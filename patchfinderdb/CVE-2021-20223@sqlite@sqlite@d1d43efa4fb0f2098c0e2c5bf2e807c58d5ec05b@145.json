{
  "cve_id": "CVE-2021-20223",
  "cve_desc": "",
  "repo": "sqlite/sqlite",
  "patch_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
  "patch_info": {
    "commit_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "files": [
      "ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Prevent fts5 tokenizer unicode61 from considering '\\0' to be a token characters, even if other characters of class \"Cc\" are.\n\nFossilOrigin-Name: b7b7bde9b7a03665e3691c6d51118965f216d2dfb1617f138b9f9e60e418ed2f",
    "before_after_code_files": [
      "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
      "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c"
    ],
    "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test": [
      "File: ext/fts5/test/fts5tok1.test -> ext/fts5/test/fts5tok1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:   SELECT * FROM t4;",
      "112: } {1 {SQL logic error}}",
      "115: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114: #-------------------------------------------------------------------------",
      "115: # Embedded 0x00 characters.",
      "116: #",
      "117: reset_db",
      "118: do_execsql_test 3.1.0 {",
      "119:   CREATE VIRTUAL TABLE t1 USING fts5(z);",
      "120:   CREATE VIRTUAL TABLE tt USING fts5vocab(t1, 'instance');",
      "121:   INSERT INTO t1 VALUES('abc' || char(0) || 'def');",
      "122:   SELECT * FROM tt;",
      "123: } { abc 1 z 0 def 1 z 1 }",
      "124: do_execsql_test 3.1.1 {",
      "125:   SELECT hex(z) FROM t1;",
      "126: } {61626300646566}",
      "127: do_execsql_test 3.1.2 {",
      "128:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "129: } {}",
      "131: do_execsql_test 3.2.0 {",
      "132:   CREATE VIRTUAL TABLE t2 USING fts5(z,",
      "133:       tokenize=\"unicode61 categories 'L* N* Co Cc'\"",
      "134:   );",
      "135:   CREATE VIRTUAL TABLE tu USING fts5vocab(t2, 'instance');",
      "137:   INSERT INTO t2 VALUES('abc' || char(0) || 'def');",
      "138:   SELECT * FROM tu;",
      "139: } { abc 1 z 0 def 1 z 1 }",
      "141: do_execsql_test 3.2.1 {",
      "142:   SELECT hex(z) FROM t1;",
      "143: } {61626300646566}",
      "145: do_execsql_test 3.2.2 {",
      "146:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "147: } {}",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 0e7e113d9f2c929c1f8a85e2cfad8e2e60f0e8770212b5e5320fb2a2c42911f8",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "94649b6159a58b7fc7e37a9d03753fbbdff5e157",
      "candidate_info": {
        "commit_hash": "94649b6159a58b7fc7e37a9d03753fbbdff5e157",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/94649b6159a58b7fc7e37a9d03753fbbdff5e157",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbe.c"
        ],
        "message": "Correctly unwind the savepoint stack if the database goes read-only in the middle of a savepoint.\n\nFossilOrigin-Name: a96d02b4ab8c70cc20b322e4fa3a4b8814f05c51f5d8b071ec9d69e7379f3ea5",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbe.c||src/vdbe.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 9bdd57cb9ad8ac1f4a0f1a3942d94ca5193109eeb1975343c4f0c7abf7135946",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3264:           p->rc = rc = SQLITE_BUSY;",
          "3265:           goto vdbe_return;",
          "3266:         }",
          "3268:         rc = p->rc;",
          "3269:       }else{",
          "3270:         int isSchemaChange;",
          "3271:         iSavepoint = db->nSavepoint - iSavepoint - 1;",
          "",
          "[Removed Lines]",
          "3267:         db->isTransactionSavepoint = 0;",
          "",
          "[Added Lines]",
          "3268:         if( rc ){",
          "3269:           db->autoCommit = 0;",
          "3270:         }else{",
          "3271:           db->isTransactionSavepoint = 0;",
          "3272:         }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "576d5a8634851f3762c0ee527511ca53016eab7e",
      "candidate_info": {
        "commit_hash": "576d5a8634851f3762c0ee527511ca53016eab7e",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/576d5a8634851f3762c0ee527511ca53016eab7e",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/resolve.c",
          "src/update.c",
          "test/upfrom3.test"
        ],
        "message": "Fix problems that could occur if a table with the same name as the table being updated appeared in the FROM clause of an UPDATE statement.\n\nFossilOrigin-Name: 13224cbd75990615088f3e30ccba05d31b3099fae4300c9ab8f7663bc5f0eb6f",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/resolve.c||src/resolve.c",
          "src/update.c||src/update.c",
          "test/upfrom3.test||test/upfrom3.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 5176cb7a6a4e8cfa1973aaae46fcd7d39baedb70ae20bfacc82d62ca39fb0aa3",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/resolve.c||src/resolve.c": [
          "File: src/resolve.c -> src/resolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "766:       struct SrcList_item *pItem;",
          "767:       assert( pSrcList && pSrcList->nSrc>=1 );",
          "768:       pItem = pSrcList->a;",
          "770:       pExpr->op = TK_COLUMN;",
          "771:       pExpr->y.pTab = pItem->pTab;",
          "772:       pExpr->iTable = pItem->iCursor;",
          "774:       pExpr->affExpr = SQLITE_AFF_INTEGER;",
          "775:       break;",
          "776:     }",
          "",
          "[Removed Lines]",
          "769:       assert( HasRowid(pItem->pTab) && pItem->pTab->pSelect==0 );",
          "773:       pExpr->iColumn = -1;",
          "",
          "[Added Lines]",
          "772:       pExpr->iColumn--;",
          "",
          "---------------"
        ],
        "src/update.c||src/update.c": [
          "File: src/update.c -> src/update.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "131: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "139: static Expr *exprRowColumn(Parse *pParse, int iCol){",
          "140:   Expr *pRet = sqlite3PExpr(pParse, TK_ROW, 0, 0);",
          "141:   if( pRet ) pRet->iColumn = iCol+1;",
          "142:   return pRet;",
          "143: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "161: static void updatePopulateEphTable(",
          "",
          "[Added Lines]",
          "183: static void updateFromSelect(",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "172:   SelectDest dest;",
          "173:   Select *pSelect = 0;",
          "174:   ExprList *pList = 0;",
          "176:   sqlite3 *db = pParse->db;",
          "177:   Table *pTab = pTabList->a[0].pTab;",
          "178:   SrcList *pSrc;",
          "",
          "[Removed Lines]",
          "175:   ExprList *pGroupBy = 0;",
          "",
          "[Added Lines]",
          "197:   ExprList *pGrp = 0;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "199:   }",
          "200:   if( pPk ){",
          "201:     for(i=0; i<pPk->nKeyCol; i++){",
          "206:       if( pLimit ){",
          "210:       }",
          "211:       pList = sqlite3ExprListAppend(pParse, pList, pNew);",
          "212:     }",
          "213:     eDest = SRT_Upfrom;",
          "214:   }else if( pTab->pSelect ){",
          "220:     eDest = SRT_Table;",
          "221:   }else{",
          "222:     eDest = IsVirtual(pTab) ? SRT_Table : SRT_Upfrom;",
          "226:     if( pLimit ){",
          "230:     }",
          "231:   }",
          "232:   assert( pChanges || db->mallocFailed );",
          "",
          "[Removed Lines]",
          "202:       Expr *pNew = sqlite3PExpr(pParse, TK_DOT,",
          "203:           sqlite3Expr(db, TK_ID, pTab->zName),",
          "204:           sqlite3Expr(db, TK_ID, pTab->aCol[pPk->aiColumn[i]].zName)",
          "205:       );",
          "207:         pGroupBy = sqlite3ExprListAppend(pParse, pGroupBy,",
          "208:             sqlite3ExprDup(db, pNew, 0)",
          "209:         );",
          "215:     pList = sqlite3ExprListAppend(pParse, pList,",
          "216:         sqlite3PExpr(pParse, TK_DOT,",
          "217:           sqlite3Expr(db, TK_ID, pTab->zName),",
          "218:           sqlite3PExpr(pParse, TK_ASTERISK, 0, 0)",
          "219:     ));",
          "223:     pList = sqlite3ExprListAppend(pParse, pList,",
          "224:         sqlite3PExpr(pParse, TK_ROW, 0, 0)",
          "225:     );",
          "227:       pGroupBy = sqlite3ExprListAppend(pParse, pGroupBy,",
          "228:           sqlite3PExpr(pParse, TK_ROW, 0, 0)",
          "229:       );",
          "",
          "[Added Lines]",
          "224:       Expr *pNew = exprRowColumn(pParse, pPk->aiColumn[i]);",
          "226:         pGrp = sqlite3ExprListAppend(pParse, pGrp, sqlite3ExprDup(db, pNew, 0));",
          "232:     for(i=0; i<pTab->nCol; i++){",
          "233:       pList = sqlite3ExprListAppend(pParse, pList, exprRowColumn(pParse, i));",
          "234:     }",
          "238:     pList = sqlite3ExprListAppend(pParse, 0, sqlite3PExpr(pParse,TK_ROW,0,0));",
          "240:       pGrp = sqlite3ExprListAppend(pParse, 0, sqlite3PExpr(pParse,TK_ROW,0,0));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "238:     }",
          "239:   }",
          "240:   pSelect = sqlite3SelectNew(pParse, pList,",
          "242:   );",
          "243:   sqlite3SelectDestInit(&dest, eDest, iEph);",
          "244:   dest.iSDParm2 = (pPk ? pPk->nKeyCol : -1);",
          "",
          "[Removed Lines]",
          "241:       pSrc, pWhere2, pGroupBy, 0, pOrderBy2, SF_IncludeHidden, pLimit2",
          "",
          "[Added Lines]",
          "252:       pSrc, pWhere2, pGrp, 0, pOrderBy2, SF_IncludeHidden, pLimit2",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "652:         }",
          "653:       }",
          "654:       if( nChangeFrom ){",
          "656:             pParse, iEph, pPk, pChanges, pTabList, pWhere, pOrderBy, pLimit",
          "657:         );",
          "658: #ifndef SQLITE_OMIT_SUBQUERY",
          "",
          "[Removed Lines]",
          "655:         updatePopulateEphTable(",
          "",
          "[Added Lines]",
          "666:         updateFromSelect(",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1169:   regArg = pParse->nMem + 1;",
          "1170:   pParse->nMem += nArg;",
          "1171:   if( pSrc->nSrc>1 ){",
          "1173:     if( pRowid ){",
          "1175:     }else{",
          "1181:     }",
          "1182:     for(i=0; i<pTab->nCol; i++){",
          "1183:       if( aXRef[i]>=0 ){",
          "1184:         pList = sqlite3ExprListAppend(pParse, pList,",
          "1185:           sqlite3ExprDup(db, pChanges->a[aXRef[i]].pExpr, 0)",
          "1186:         );",
          "1187:       }else{",
          "1193:       }",
          "1194:     }",
          "1197:     sqlite3ExprListDelete(db, pList);",
          "1198:     eOnePass = ONEPASS_OFF;",
          "1199:   }else{",
          "",
          "[Removed Lines]",
          "1172:     ExprList *pList = 0;",
          "1174:       pList = sqlite3ExprListAppend(pParse, pList, sqlite3ExprDup(db,pRowid,0));",
          "1176:       pList = sqlite3ExprListAppend(pParse, pList,",
          "1177:           sqlite3PExpr(pParse, TK_DOT,",
          "1178:             sqlite3Expr(db, TK_ID, pTab->zName),",
          "1179:             sqlite3Expr(db, TK_ID, \"_rowid_\")",
          "1180:       ));",
          "1188:         pList = sqlite3ExprListAppend(pParse, pList,",
          "1189:             sqlite3PExpr(pParse, TK_DOT,",
          "1190:               sqlite3Expr(db, TK_ID, pTab->zName),",
          "1191:               sqlite3Expr(db, TK_ID, pTab->aCol[i].zName)",
          "1192:         ));",
          "1196:     updatePopulateEphTable(pParse, ephemTab, 0, pList, pSrc, pWhere, 0, 0);",
          "",
          "[Added Lines]",
          "1183:     Expr *pRow;",
          "1184:     ExprList *pList;",
          "1186:       pRow = sqlite3ExprDup(db, pRowid, 0);",
          "1188:       pRow = sqlite3PExpr(pParse, TK_ROW, 0, 0);",
          "1190:     pList = sqlite3ExprListAppend(pParse, 0, pRow);",
          "1198:         pList = sqlite3ExprListAppend(pParse, pList, exprRowColumn(pParse, i));",
          "1202:     updateFromSelect(pParse, ephemTab, 0, pList, pSrc, pWhere, 0, 0);",
          "",
          "---------------"
        ],
        "test/upfrom3.test||test/upfrom3.test": [
          "File: test/upfrom3.test -> test/upfrom3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: #   2.*: Test UPDATE ... FROM statements that modify PK fields of WITHOUT",
          "23: #        ROWID tables.",
          "24: #",
          "26: foreach {tn wo} {",
          "27:   1 \"\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25: #   3.*: Test that UPDATE ... FROM statements are not confused if there",
          "26: #        are multiple tables of the same name in attached databases.",
          "27: #",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "171:   3 60 60",
          "172: }",
          "174: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "177: #-------------------------------------------------------------------------",
          "178: foreach {tn wo} {",
          "179:   1 \"\"",
          "180:   2 \"WITHOUT ROWID\"",
          "181: } {",
          "182:   reset_db",
          "183:   forcedelete test.db2",
          "184:   eval [string map [list %WO% $wo %TN% $tn] {",
          "185:     do_execsql_test 3.$tn.1 {",
          "186:       CREATE TABLE g1(a, b, c, PRIMARY KEY(a, b)) %WO%;",
          "187:       INSERT INTO g1 VALUES(1, 1, 1);",
          "189:       ATTACH 'test.db2' AS aux;",
          "190:       CREATE TABLE aux.g1(a, b, c, PRIMARY KEY(a, b)) %WO%;",
          "191:       INSERT INTO aux.g1 VALUES(10, 1, 10);",
          "192:       INSERT INTO aux.g1 VALUES(20, 2, 20);",
          "193:       INSERT INTO aux.g1 VALUES(30, 3, 30);",
          "194:     }",
          "196:     do_execsql_test 3.$tn.2 {",
          "197:       UPDATE aux.g1 SET c=101 FROM main.g1;",
          "198:     }",
          "199:     do_execsql_test 3.$tn.3 {",
          "200:       SELECT * FROM aux.g1;",
          "201:     } {10 1 101  20 2 101  30 3 101}",
          "203:     do_execsql_test 3.$tn.4 {",
          "204:       UPDATE g1 SET c=101 FROM g1;",
          "205:     }",
          "206:     do_execsql_test 3.$tn.5 {",
          "207:       SELECT * FROM g1;",
          "208:     } {1 1 101}",
          "209:   }]",
          "210: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "48eb03bd0e3c36565b639306f21d05b52d8f6c6c",
      "candidate_info": {
        "commit_hash": "48eb03bd0e3c36565b639306f21d05b52d8f6c6c",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/48eb03bd0e3c36565b639306f21d05b52d8f6c6c",
        "files": [
          "ext/misc/json1.c",
          "manifest",
          "manifest.uuid",
          "test/json101.test"
        ],
        "message": "Proper surrogate pair decoding added to JSON functions.  See the mailing list bug report and [https://bugs.python.org/issue38749].  More test cases needed here, but it seems to work so far.\n\nFossilOrigin-Name: 51027f08c0478f1bf9d7545d9e268c772c0a5cd5dda4b03d78f16c7d94f2f50d",
        "before_after_code_files": [
          "ext/misc/json1.c||ext/misc/json1.c",
          "manifest.uuid||manifest.uuid",
          "test/json101.test||test/json101.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/misc/json1.c||ext/misc/json1.c": [
          "File: ext/misc/json1.c -> ext/misc/json1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "522:   sqlite3_result_subtype(pCtx, JSON_SUBTYPE);",
          "523: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "530: static u8 jsonHexToInt(int h){",
          "531:   assert( (h>='0' && h<='9') ||  (h>='a' && h<='f') ||  (h>='A' && h<='F') );",
          "532: #ifdef SQLITE_EBCDIC",
          "533:   h += 9*(1&~(h>>4));",
          "534: #else",
          "535:   h += 9*(1&(h>>6));",
          "536: #endif",
          "537:   return (u8)(h & 0xf);",
          "538: }",
          "543: static u32 jsonHexToInt4(const char *z){",
          "544:   u32 v;",
          "545:   assert( safe_isxdigit(z[0]) );",
          "546:   assert( safe_isxdigit(z[1]) );",
          "547:   assert( safe_isxdigit(z[2]) );",
          "548:   assert( safe_isxdigit(z[3]) );",
          "549:   v = (jsonHexToInt(z[0])<<12)",
          "550:     + (jsonHexToInt(z[1])<<8)",
          "551:     + (jsonHexToInt(z[2])<<4)",
          "552:     + jsonHexToInt(z[3]);",
          "553:   return v;",
          "554: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "615:           }else{",
          "616:             c = z[++i];",
          "617:             if( c=='u' ){",
          "627:               if( v==0 ) break;",
          "628:               if( v<=0x7f ){",
          "629:                 zOut[j++] = (char)v;",
          "",
          "[Removed Lines]",
          "618:               u32 v = 0, k;",
          "619:               for(k=0; k<4; i++, k++){",
          "620:                 assert( i<n-2 );",
          "621:                 c = z[i+1];",
          "622:                 assert( safe_isxdigit(c) );",
          "623:                 if( c<='9' ) v = v*16 + c - '0';",
          "624:                 else if( c<='F' ) v = v*16 + c - 'A' + 10;",
          "625:                 else v = v*16 + c - 'a' + 10;",
          "626:               }",
          "",
          "[Added Lines]",
          "649:               u32 v = jsonHexToInt4(z+i+1);",
          "650:               i += 4;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "631:                 zOut[j++] = (char)(0xc0 | (v>>6));",
          "632:                 zOut[j++] = 0x80 | (v&0x3f);",
          "633:               }else{",
          "637:               }",
          "638:             }else{",
          "639:               if( c=='b' ){",
          "",
          "[Removed Lines]",
          "634:                 zOut[j++] = (char)(0xe0 | (v>>12));",
          "635:                 zOut[j++] = 0x80 | ((v>>6)&0x3f);",
          "636:                 zOut[j++] = 0x80 | (v&0x3f);",
          "",
          "[Added Lines]",
          "658:                 u32 vlo;",
          "659:                 if( (v&0xfc00)==0xd800",
          "660:                   && i<n-6",
          "661:                   && z[i+1]=='\\\\'",
          "662:                   && z[i+2]=='u'",
          "663:                   && ((vlo = jsonHexToInt4(z+i+3))&0xfc00)==0xdc00",
          "664:                 ){",
          "666:                   v = ((v&0x3ff)<<10) + (vlo&0x3ff) + 0x10000;",
          "667:                   i += 6;",
          "668:                   zOut[j++] = 0xf0 | (v>>18);",
          "669:                   zOut[j++] = 0x80 | ((v>>12)&0x3f);",
          "670:                   zOut[j++] = 0x80 | ((v>>6)&0x3f);",
          "671:                   zOut[j++] = 0x80 | (v&0x3f);",
          "672:                 }else{",
          "673:                   zOut[j++] = 0xe0 | (v>>12);",
          "674:                   zOut[j++] = 0x80 | ((v>>6)&0x3f);",
          "675:                   zOut[j++] = 0x80 | (v&0x3f);",
          "676:                 }",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: f7a74f89dbd58b47bbcb58ea2af71fbe1eb5ec2dbe36d90685c39cb28ecf5250",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/json101.test||test/json101.test": [
          "File: test/json101.test -> test/json101.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "832:   SELECT xyz.* FROM (JSON_EACH('{\"a\":1, \"b\":2}')) AS xyz;",
          "833: } {a 1 integer 1 2 {} {$.a} {$} b 2 integer 2 4 {} {$.b} {$}}",
          "835: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "835: # 2019-11-10",
          "836: # Mailing list bug report on the handling of surrogate pairs",
          "837: # in JSON.",
          "838: #",
          "839: do_execsql_test json-16.10 {",
          "840:   SELECT length(json_extract('\"abc\\uD834\\uDD1Exyz\"','$'));",
          "841: } {7}",
          "842: do_execsql_test json-16.20 {",
          "843:   SELECT length(json_extract('\"\\uD834\\uDD1E\"','$'));",
          "844: } {1}",
          "845: do_execsql_test json-16.30 {",
          "846:   SELECT unicode(json_extract('\"\\uD834\\uDD1E\"','$'));",
          "847: } {119070}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e7375bfa727bfa12649897fd6a655f81b703f0db",
      "candidate_info": {
        "commit_hash": "e7375bfa727bfa12649897fd6a655f81b703f0db",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e7375bfa727bfa12649897fd6a655f81b703f0db",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c",
          "src/expr.c",
          "src/parse.y",
          "src/sqliteInt.h",
          "src/treeview.c"
        ],
        "message": "Enhanced detection logic for preventing the use of static schema expressions by code generating routines.\n\nFossilOrigin-Name: 5f60b527b938c0778e8f725c635ce0dc5ed7a4e01fd6252aa2cdb64da2f625bc",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c",
          "src/expr.c||src/expr.c",
          "src/parse.y||src/parse.y",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/treeview.c||src/treeview.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: f45f5de000834da5b23cdcf12c3f0e3073287756afe06bdb77b95fb65b250258",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2157: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2160: #ifdef SQLITE_DEBUG",
          "2167: static int markImmutableExprStep(Walker *pWalker, Expr *pExpr){",
          "2168:   ExprSetVVAProperty(pExpr, EP_Immutable);",
          "2169:   return WRC_Continue;",
          "2170: }",
          "2171: static void markExprListImmutable(ExprList *pList){",
          "2172:   if( pList ){",
          "2173:     Walker w;",
          "2174:     memset(&w, 0, sizeof(w));",
          "2175:     w.xExprCallback = markImmutableExprStep;",
          "2176:     w.xSelectCallback = sqlite3SelectWalkNoop;",
          "2177:     w.xSelectCallback2 = 0;",
          "2178:     sqlite3WalkExprList(&w, pList);",
          "2179:   }",
          "2180: }",
          "2181: #else",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2250:       sqlite3ExprListDelete(db, p->pCheck);",
          "2251:       p->pCheck = 0;",
          "2252:     }",
          "2253:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2278:     }else{",
          "2279:       markExprListImmutable(p->pCheck);",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "46:   int op;",
          "47:   while( ExprHasProperty(pExpr, EP_Skip) ){",
          "48:     assert( pExpr->op==TK_COLLATE );",
          "",
          "[Removed Lines]",
          "45: char sqlite3ExprAffinity(Expr *pExpr){",
          "",
          "[Added Lines]",
          "45: char sqlite3ExprAffinity(const Expr *pExpr){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "156:   sqlite3 *db = pParse->db;",
          "157:   CollSeq *pColl = 0;",
          "159:   while( p ){",
          "160:     int op = p->op;",
          "161:     if( op==TK_REGISTER ) op = p->op2;",
          "",
          "[Removed Lines]",
          "155: CollSeq *sqlite3ExprCollSeq(Parse *pParse, Expr *pExpr){",
          "158:   Expr *p = pExpr;",
          "",
          "[Added Lines]",
          "155: CollSeq *sqlite3ExprCollSeq(Parse *pParse, const Expr *pExpr){",
          "158:   const Expr *p = pExpr;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "228:   CollSeq *p = sqlite3ExprCollSeq(pParse, pExpr);",
          "229:   if( p==0 ) p = pParse->db->pDfltColl;",
          "230:   assert( p!=0 );",
          "",
          "[Removed Lines]",
          "227: CollSeq *sqlite3ExprNNCollSeq(Parse *pParse, Expr *pExpr){",
          "",
          "[Added Lines]",
          "227: CollSeq *sqlite3ExprNNCollSeq(Parse *pParse, const Expr *pExpr){",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "238:   CollSeq *pColl1 = sqlite3ExprNNCollSeq(pParse, pE1);",
          "239:   CollSeq *pColl2 = sqlite3ExprNNCollSeq(pParse, pE2);",
          "240:   return sqlite3StrICmp(pColl1->zName, pColl2->zName)==0;",
          "",
          "[Removed Lines]",
          "237: int sqlite3ExprCollSeqMatch(Parse *pParse, Expr *pE1, Expr *pE2){",
          "",
          "[Added Lines]",
          "237: int sqlite3ExprCollSeqMatch(Parse *pParse, const Expr *pE1, const Expr *pE2){",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "249:   char aff1 = sqlite3ExprAffinity(pExpr);",
          "250:   if( aff1>SQLITE_AFF_NONE && aff2>SQLITE_AFF_NONE ){",
          "",
          "[Removed Lines]",
          "248: char sqlite3CompareAffinity(Expr *pExpr, char aff2){",
          "",
          "[Added Lines]",
          "248: char sqlite3CompareAffinity(const Expr *pExpr, char aff2){",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "271:   char aff;",
          "272:   assert( pExpr->op==TK_EQ || pExpr->op==TK_IN || pExpr->op==TK_LT ||",
          "273:           pExpr->op==TK_GT || pExpr->op==TK_GE || pExpr->op==TK_LE ||",
          "",
          "[Removed Lines]",
          "270: static char comparisonAffinity(Expr *pExpr){",
          "",
          "[Added Lines]",
          "270: static char comparisonAffinity(const Expr *pExpr){",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "294:   char aff = comparisonAffinity(pExpr);",
          "295:   if( aff<SQLITE_AFF_TEXT ){",
          "296:     return 1;",
          "",
          "[Removed Lines]",
          "293: int sqlite3IndexAffinityOk(Expr *pExpr, char idx_affinity){",
          "",
          "[Added Lines]",
          "293: int sqlite3IndexAffinityOk(const Expr *pExpr, char idx_affinity){",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "309:   u8 aff = (char)sqlite3ExprAffinity(pExpr2);",
          "310:   aff = (u8)sqlite3CompareAffinity(pExpr1, aff) | (u8)jumpIfNull;",
          "311:   return aff;",
          "",
          "[Removed Lines]",
          "308: static u8 binaryCompareP5(Expr *pExpr1, Expr *pExpr2, int jumpIfNull){",
          "",
          "[Added Lines]",
          "308: static u8 binaryCompareP5(",
          "312: ){",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "326: CollSeq *sqlite3BinaryCompareCollSeq(",
          "327:   Parse *pParse,",
          "330: ){",
          "331:   CollSeq *pColl;",
          "332:   assert( pLeft );",
          "",
          "[Removed Lines]",
          "328:   Expr *pLeft,",
          "329:   Expr *pRight",
          "",
          "[Added Lines]",
          "332:   const Expr *pLeft,",
          "333:   const Expr *pRight",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "355:   if( ExprHasProperty(p, EP_Commuted) ){",
          "356:     return sqlite3BinaryCompareCollSeq(pParse, p->pRight, p->pLeft);",
          "357:   }else{",
          "",
          "[Removed Lines]",
          "354: CollSeq *sqlite3ExprCompareCollSeq(Parse *pParse, Expr *p){",
          "",
          "[Added Lines]",
          "358: CollSeq *sqlite3ExprCompareCollSeq(Parse *pParse, const Expr *p){",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "594:   int addrDone = sqlite3VdbeMakeLabel(pParse);",
          "595:   int isCommuted = ExprHasProperty(pExpr,EP_Commuted);",
          "597:   if( pParse->nErr ) return;",
          "598:   if( nLeft!=sqlite3ExprVectorSize(pRight) ){",
          "599:     sqlite3ErrorMsg(pParse, \"row value misused\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "601:   assert( !ExprHasVVAProperty(pExpr,EP_Immutable) );",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1206:     assert( !ExprHasProperty(p, EP_TokenOnly|EP_Reduced) );",
          "1207:     assert( !ExprHasProperty(p, EP_FromJoin) );",
          "1208:     assert( !ExprHasProperty(p, EP_MemToken) );",
          "1210:     if( p->pLeft || p->x.pList ){",
          "1211:       nSize = EXPR_REDUCEDSIZE | EP_Reduced;",
          "1212:     }else{",
          "",
          "[Removed Lines]",
          "1209:     assert( !ExprHasProperty(p, EP_NoReduce) );",
          "",
          "[Added Lines]",
          "1214:     assert( !ExprHasVVAProperty(p, EP_NoReduce) );",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1311:     pNew->flags &= ~(EP_Reduced|EP_TokenOnly|EP_Static|EP_MemToken);",
          "1312:     pNew->flags |= nStructSize & (EP_Reduced|EP_TokenOnly);",
          "1313:     pNew->flags |= staticFlag;",
          "1316:     if( nToken ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1319:     ExprClearVVAProperties(pNew);",
          "1320:     if( dupFlags ){",
          "1321:       ExprSetVVAProperty(pNew, EP_Immutable);",
          "1322:     }",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "3174:   pLeft = pExpr->pLeft;",
          "3175:   if( sqlite3ExprCheckIN(pParse, pExpr) ) return;",
          "3176:   zAff = exprINAffinity(pParse, pExpr);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3183:   assert( !ExprHasVVAProperty(pExpr,EP_Immutable) );",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "3781:   if( pExpr==0 ){",
          "3782:     op = TK_NULL;",
          "3783:   }else{",
          "3784:     op = pExpr->op;",
          "3785:   }",
          "3786:   switch( op ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3794:     assert( !ExprHasVVAProperty(pExpr,EP_Immutable) );",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "4039:         tempX.op = TK_INTEGER;",
          "4040:         tempX.flags = EP_IntValue|EP_TokenOnly;",
          "4041:         tempX.u.iValue = 0;",
          "4042:         r1 = sqlite3ExprCodeTemp(pParse, &tempX, &regFree1);",
          "4043:         r2 = sqlite3ExprCodeTemp(pParse, pExpr->pLeft, &regFree2);",
          "4044:         sqlite3VdbeAddOp3(v, OP_Subtract, r2, r1, target);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4053:         ExprClearVVAProperties(&tempX);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "4115:         return sqlite3ExprCodeAtInit(pParse, pExpr, -1);",
          "4116:       }",
          "4117:       assert( !ExprHasProperty(pExpr, EP_xIsSelect) );",
          "4123:       nFarg = pFarg ? pFarg->nExpr : 0;",
          "4124:       assert( !ExprHasProperty(pExpr, EP_IntValue) );",
          "4125:       zId = pExpr->u.zToken;",
          "",
          "[Removed Lines]",
          "4118:       if( ExprHasProperty(pExpr, EP_TokenOnly) ){",
          "4119:         pFarg = 0;",
          "4120:       }else{",
          "4121:         pFarg = pExpr->x.pList;",
          "4122:       }",
          "",
          "[Added Lines]",
          "4130:       assert( !ExprHasProperty(pExpr, EP_TokenOnly) );",
          "4131:       pFarg = pExpr->x.pList;",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "4573: void sqlite3ExprCode(Parse *pParse, Expr *pExpr, int target){",
          "4574:   int inReg;",
          "4576:   assert( target>0 && target<=pParse->nMem );",
          "4577:   inReg = sqlite3ExprCodeTarget(pParse, pExpr, target);",
          "4578:   assert( pParse->pVdbe!=0 || pParse->db->mallocFailed );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4585:   assert( pExpr==0 || !ExprHasVVAProperty(pExpr,EP_Immutable) );",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "4790:   assert( jumpIfNull==SQLITE_JUMPIFNULL || jumpIfNull==0 );",
          "4793:   op = pExpr->op;",
          "4794:   switch( op ){",
          "4795:     case TK_AND:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4803:   assert( !ExprHasVVAProperty(pExpr, EP_Immutable) );",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "4931:   assert( jumpIfNull==SQLITE_JUMPIFNULL || jumpIfNull==0 );",
          "4933:   if( pExpr==0 )    return;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4945:   assert( !ExprHasVVAProperty(pExpr,EP_Immutable) );",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "5214:   }",
          "5215:   if( (pA->flags & (EP_Distinct|EP_Commuted))",
          "5216:      != (pB->flags & (EP_Distinct|EP_Commuted)) ) return 2;",
          "5218:     if( combinedFlags & EP_xIsSelect ) return 2;",
          "5219:     if( (combinedFlags & EP_FixedCol)==0",
          "5220:      && sqlite3ExprCompare(pParse, pA->pLeft, pB->pLeft, iTab) ) return 2;",
          "",
          "[Removed Lines]",
          "5217:   if( (combinedFlags & EP_TokenOnly)==0 ){",
          "",
          "[Added Lines]",
          "5229:   if( ALWAYS((combinedFlags & EP_TokenOnly)==0) ){",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "5222:     if( sqlite3ExprListCompare(pA->x.pList, pB->x.pList, iTab) ) return 2;",
          "5223:     if( pA->op!=TK_STRING",
          "5224:      && pA->op!=TK_TRUEFALSE",
          "5226:     ){",
          "5227:       if( pA->iColumn!=pB->iColumn ) return 2;",
          "5228:       if( pA->op2!=pB->op2 ){",
          "",
          "[Removed Lines]",
          "5225:      && (combinedFlags & EP_Reduced)==0",
          "",
          "[Added Lines]",
          "5237:      && ALWAYS((combinedFlags & EP_Reduced)==0)",
          "",
          "---------------"
        ],
        "src/parse.y||src/parse.y": [
          "File: src/parse.y -> src/parse.y",
          "--- Hunk 1 ---",
          "[Context before]",
          "965:       p->op = (u8)op;",
          "966:       p->affExpr = 0;",
          "967:       p->flags = EP_Leaf;",
          "968:       p->iAgg = -1;",
          "969:       p->pLeft = p->pRight = 0;",
          "970:       p->x.pList = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "968:       ExprClearVVAProperties(p);",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "2598:   union {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2597: #ifdef SQLITE_DEBUG",
          "2599: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2700: #define ExprAlwaysTrue(E)   (((E)->flags&(EP_FromJoin|EP_IsTrue))==EP_IsTrue)",
          "2701: #define ExprAlwaysFalse(E)  (((E)->flags&(EP_FromJoin|EP_IsFalse))==EP_IsFalse)",
          "2707: #ifdef SQLITE_DEBUG",
          "2709: #else",
          "2710: # define ExprSetVVAProperty(E,P)",
          "2711: #endif",
          "",
          "[Removed Lines]",
          "2708: # define ExprSetVVAProperty(E,P)  (E)->flags|=(P)",
          "",
          "[Added Lines]",
          "2718: # define ExprSetVVAProperty(E,P)   (E)->vvaFlags|=(P)",
          "2719: # define ExprHasVVAProperty(E,P)   (((E)->vvaFlags&(P))!=0)",
          "2720: # define ExprClearVVAProperties(E) (E)->vvaFlags = 0",
          "2723: # define ExprHasVVAProperty(E,P)   0",
          "2724: # define ExprClearVVAProperties(E)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4440: const char *sqlite3IndexAffinityStr(sqlite3*, Index*);",
          "4441: void sqlite3TableAffinity(Vdbe*, Table*, int);",
          "4444: char sqlite3TableColumnAffinity(Table*,int);",
          "4446: int sqlite3Atoi64(const char*, i64*, int, u8);",
          "4447: int sqlite3DecOrHexToI64(const char*, i64*);",
          "4448: void sqlite3ErrorWithMsg(sqlite3*, int, const char*,...);",
          "",
          "[Removed Lines]",
          "4442: char sqlite3CompareAffinity(Expr *pExpr, char aff2);",
          "4443: int sqlite3IndexAffinityOk(Expr *pExpr, char idx_affinity);",
          "4445: char sqlite3ExprAffinity(Expr *pExpr);",
          "",
          "[Added Lines]",
          "4456: char sqlite3CompareAffinity(const Expr *pExpr, char aff2);",
          "4457: int sqlite3IndexAffinityOk(const Expr *pExpr, char idx_affinity);",
          "4459: char sqlite3ExprAffinity(const Expr *pExpr);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "4466: int sqlite3IsBinary(const CollSeq*);",
          "4467: CollSeq *sqlite3LocateCollSeq(Parse *pParse, const char*zName);",
          "4468: void sqlite3SetTextEncoding(sqlite3 *db, u8);",
          "4472: Expr *sqlite3ExprAddCollateToken(Parse *pParse, Expr*, const Token*, int);",
          "4473: Expr *sqlite3ExprAddCollateString(Parse*,Expr*,const char*);",
          "4474: Expr *sqlite3ExprSkipCollate(Expr*);",
          "",
          "[Removed Lines]",
          "4469: CollSeq *sqlite3ExprCollSeq(Parse *pParse, Expr *pExpr);",
          "4470: CollSeq *sqlite3ExprNNCollSeq(Parse *pParse, Expr *pExpr);",
          "4471: int sqlite3ExprCollSeqMatch(Parse*,Expr*,Expr*);",
          "",
          "[Added Lines]",
          "4483: CollSeq *sqlite3ExprCollSeq(Parse *pParse, const Expr *pExpr);",
          "4484: CollSeq *sqlite3ExprNNCollSeq(Parse *pParse, const Expr *pExpr);",
          "4485: int sqlite3ExprCollSeqMatch(Parse*,const Expr*,const Expr*);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "4699: #endif",
          "4700: int sqlite3Reprepare(Vdbe*);",
          "4701: void sqlite3ExprListCheckLength(Parse*, ExprList*, const char*);",
          "4704: int sqlite3TempInMemory(const sqlite3*);",
          "4705: const char *sqlite3JournalModename(int);",
          "4706: #ifndef SQLITE_OMIT_WAL",
          "",
          "[Removed Lines]",
          "4702: CollSeq *sqlite3ExprCompareCollSeq(Parse*,Expr*);",
          "4703: CollSeq *sqlite3BinaryCompareCollSeq(Parse *, Expr *, Expr *);",
          "",
          "[Added Lines]",
          "4716: CollSeq *sqlite3ExprCompareCollSeq(Parse*,const Expr*);",
          "4717: CollSeq *sqlite3BinaryCompareCollSeq(Parse *, const Expr*, const Expr*);",
          "",
          "---------------"
        ],
        "src/treeview.c||src/treeview.c": [
          "File: src/treeview.c -> src/treeview.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "398: void sqlite3TreeViewExpr(TreeView *pView, const Expr *pExpr, u8 moreToFollow){",
          "402:   pView = sqlite3TreeViewPush(pView, moreToFollow);",
          "403:   if( pExpr==0 ){",
          "404:     sqlite3TreeViewLine(pView, \"nil\");",
          "405:     sqlite3TreeViewPop(pView);",
          "406:     return;",
          "407:   }",
          "409:     StrAccum x;",
          "410:     sqlite3StrAccumInit(&x, 0, zFlgs, sizeof(zFlgs), 0);",
          "411:     sqlite3_str_appendf(&x, \" fg.af=%x.%c\",",
          "",
          "[Removed Lines]",
          "401:   char zFlgs[60];",
          "408:   if( pExpr->flags || pExpr->affExpr ){",
          "",
          "[Added Lines]",
          "401:   char zFlgs[200];",
          "408:   if( pExpr->flags || pExpr->affExpr || pExpr->vvaFlags ){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "416:     if( ExprHasProperty(pExpr, EP_FromDDL) ){",
          "417:       sqlite3_str_appendf(&x, \" DDL\");",
          "418:     }",
          "419:     sqlite3StrAccumFinish(&x);",
          "420:   }else{",
          "421:     zFlgs[0] = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "419:     if( ExprHasVVAProperty(pExpr, EP_Immutable) ){",
          "420:       sqlite3_str_appendf(&x, \" IMMUTABLE\");",
          "421:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "522:     case TK_RSHIFT:  zBinOp = \"RSHIFT\"; break;",
          "523:     case TK_CONCAT:  zBinOp = \"CONCAT\"; break;",
          "524:     case TK_DOT:     zBinOp = \"DOT\";    break;",
          "526:     case TK_UMINUS:  zUniOp = \"UMINUS\"; break;",
          "527:     case TK_UPLUS:   zUniOp = \"UPLUS\";  break;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "528:     case TK_LIMIT:   zBinOp = \"LIMIT\";  break;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0f28e1bdd93e443292fafb3527a594372b40a7c4",
      "candidate_info": {
        "commit_hash": "0f28e1bdd93e443292fafb3527a594372b40a7c4",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/0f28e1bdd93e443292fafb3527a594372b40a7c4",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c"
        ],
        "message": "Remove a NEVER() comparison from sqlite3ExprCompare().\n\nFossilOrigin-Name: f4285297e1e7ebef90bfc0f71402a4e1726d31bc15b69fec13a1f0d98fed1f08",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: a1e1ba9145049491c593ac70d9e05149662d34770129c270d702f284cd19a481",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5030:     ){",
          "5031:       if( pA->iColumn!=pB->iColumn ) return 2;",
          "5032:       if( pA->op2!=pB->op2 ) return 2;",
          "5036:     }",
          "5037:   }",
          "5038:   return 0;",
          "",
          "[Removed Lines]",
          "5033:       if( pA->op!=TK_IN",
          "5034:        && pA->iTable!=pB->iTable",
          "5035:        && (pA->iTable!=iTab || NEVER(pB->iTable>=0)) ) return 2;",
          "",
          "[Added Lines]",
          "5033:       if( pA->op!=TK_IN && pA->iTable!=pB->iTable && pA->iTable!=iTab ){",
          "5034:         return 2;",
          "5035:       }",
          "",
          "---------------"
        ]
      }
    }
  ]
}