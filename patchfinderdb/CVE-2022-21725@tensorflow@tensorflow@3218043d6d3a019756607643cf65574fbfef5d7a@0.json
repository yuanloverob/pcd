{
  "cve_id": "CVE-2022-21725",
  "cve_desc": "Tensorflow is an Open Source Machine Learning Framework. The estimator for the cost of some convolution operations can be made to execute a division by 0. The function fails to check that the stride argument is strictly positive. Hence, the fix is to add a check for the stride argument to ensure it is valid. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.",
  "repo": "tensorflow/tensorflow",
  "patch_hash": "3218043d6d3a019756607643cf65574fbfef5d7a",
  "patch_info": {
    "commit_hash": "3218043d6d3a019756607643cf65574fbfef5d7a",
    "repo": "tensorflow/tensorflow",
    "commit_url": "https://github.com/tensorflow/tensorflow/commit/3218043d6d3a019756607643cf65574fbfef5d7a",
    "files": [
      "tensorflow/core/grappler/costs/BUILD",
      "tensorflow/core/grappler/costs/op_level_cost_estimator.cc",
      "tensorflow/core/grappler/costs/op_level_cost_estimator.h",
      "tensorflow/core/grappler/costs/op_level_cost_estimator_test.cc"
    ],
    "message": "Internal change\n\nPiperOrigin-RevId: 411896058\nChange-Id: Ia031058247e3cf382957a6662d3f9e1cbb481ca2",
    "before_after_code_files": [
      "tensorflow/core/grappler/costs/op_level_cost_estimator.cc||tensorflow/core/grappler/costs/op_level_cost_estimator.cc",
      "tensorflow/core/grappler/costs/op_level_cost_estimator.h||tensorflow/core/grappler/costs/op_level_cost_estimator.h",
      "tensorflow/core/grappler/costs/op_level_cost_estimator_test.cc||tensorflow/core/grappler/costs/op_level_cost_estimator_test.cc"
    ]
  },
  "patch_diff": {
    "tensorflow/core/grappler/costs/op_level_cost_estimator.cc||tensorflow/core/grappler/costs/op_level_cost_estimator.cc": [
      "File: tensorflow/core/grappler/costs/op_level_cost_estimator.cc -> tensorflow/core/grappler/costs/op_level_cost_estimator.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "2153: }",
      "2157: OpLevelCostEstimator::OpDimensionsFromInputs(",
      "2158:     const TensorShapeProto& original_image_shape, const OpInfo& op_info,",
      "2159:     bool* found_unknown_shapes) {",
      "",
      "[Removed Lines]",
      "2156: OpLevelCostEstimator::ConvolutionDimensions",
      "",
      "[Added Lines]",
      "2156: StatusOr<OpLevelCostEstimator::ConvolutionDimensions>",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "2190:   std::vector<int64_t> strides = GetStrides(op_info);",
      "2191:   int64_t sx = strides[x_index];",
      "2192:   int64_t sy = strides[y_index];",
      "2193:   const auto padding = GetPadding(op_info);",
      "2195:   int64_t ox = GetOutputSize(ix, kx, sx, padding);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2193:   if (sx == 0 || sy == 0) {",
      "2194:     return errors::InvalidArgument(",
      "2195:         \"Stride must be > 0 for Height and Width, but got (\", sy, \", \", sx,",
      "2196:         \")\");",
      "2197:   }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "2206:   bool found_unknown_shapes = false;",
      "2207:   const auto& op_info = op_context.op_info;",
      "2213:   int per_output_ops = dims.kx * dims.ky == 1 ? 1 : dims.kx * dims.ky - 1;",
      "",
      "[Removed Lines]",
      "2209:   ConvolutionDimensions dims = OpDimensionsFromInputs(",
      "2210:       op_info.inputs(0).shape(), op_info, &found_unknown_shapes);",
      "",
      "[Added Lines]",
      "2214:   TF_ASSIGN_OR_RETURN(ConvolutionDimensions dims,",
      "2215:                       OpDimensionsFromInputs(op_info.inputs(0).shape(), op_info,",
      "2216:                                              &found_unknown_shapes));",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "2248:                                    op_info.ShortDebugString());",
      "2249:   }",
      "2254:   int64_t ops = 0;",
      "2255:   if (dims.kx == 1 && dims.ky == 1) {",
      "",
      "[Removed Lines]",
      "2251:   ConvolutionDimensions dims = OpDimensionsFromInputs(",
      "2252:       op_info.inputs(0).shape(), op_info, &found_unknown_shapes);",
      "",
      "[Added Lines]",
      "2257:   TF_ASSIGN_OR_RETURN(ConvolutionDimensions dims,",
      "2258:                       OpDimensionsFromInputs(op_info.inputs(0).shape(), op_info,",
      "2259:                                              &found_unknown_shapes));",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "2324:   bool found_unknown_shapes = false;",
      "2325:   const auto& op_info = op_context.op_info;",
      "2331:   int64_t ops = dims.batch * dims.ox * dims.oy * dims.oz * dims.kx * dims.ky;",
      "",
      "[Removed Lines]",
      "2327:   ConvolutionDimensions dims = OpDimensionsFromInputs(",
      "2328:       op_info.inputs(0).shape(), op_info, &found_unknown_shapes);",
      "",
      "[Added Lines]",
      "2334:   TF_ASSIGN_OR_RETURN(ConvolutionDimensions dims,",
      "2335:                       OpDimensionsFromInputs(op_info.inputs(0).shape(), op_info,",
      "2336:                                              &found_unknown_shapes));",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "2382:     found_unknown_shapes = true;",
      "2383:   }",
      "2388:   int64_t ops = 0;",
      "2389:   if (dims.kx <= dims.sx && dims.ky <= dims.sy) {",
      "",
      "[Removed Lines]",
      "2385:   ConvolutionDimensions dims =",
      "2386:       OpDimensionsFromInputs(x_shape, op_info, &found_unknown_shapes);",
      "",
      "[Added Lines]",
      "2393:   TF_ASSIGN_OR_RETURN(",
      "2394:       ConvolutionDimensions dims,",
      "2395:       OpDimensionsFromInputs(x_shape, op_info, &found_unknown_shapes));",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "2414:   const bool is_training = IsTraining(op_info);",
      "2416:   int64_t ops = 0;",
      "",
      "[Removed Lines]",
      "2412:   ConvolutionDimensions dims = OpDimensionsFromInputs(",
      "2413:       op_info.inputs(0).shape(), op_info, &found_unknown_shapes);",
      "",
      "[Added Lines]",
      "2421:   TF_ASSIGN_OR_RETURN(ConvolutionDimensions dims,",
      "2422:                       OpDimensionsFromInputs(op_info.inputs(0).shape(), op_info,",
      "2423:                                              &found_unknown_shapes));",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "2465:   int64_t ops = 0;",
      "2466:   const auto rsqrt_cost = Eigen::internal::functor_traits<",
      "",
      "[Removed Lines]",
      "2462:   ConvolutionDimensions dims = OpDimensionsFromInputs(",
      "2463:       op_info.inputs(1).shape(), op_info, &found_unknown_shapes);",
      "",
      "[Added Lines]",
      "2472:   TF_ASSIGN_OR_RETURN(ConvolutionDimensions dims,",
      "2473:                       OpDimensionsFromInputs(op_info.inputs(1).shape(), op_info,",
      "2474:                                              &found_unknown_shapes));",
      "",
      "---------------"
    ],
    "tensorflow/core/grappler/costs/op_level_cost_estimator.h||tensorflow/core/grappler/costs/op_level_cost_estimator.h": [
      "File: tensorflow/core/grappler/costs/op_level_cost_estimator.h -> tensorflow/core/grappler/costs/op_level_cost_estimator.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "290:       bool* found_unknown_shapes);",
      "294:       const TensorShapeProto& original_image_shape, const OpInfo& op_info,",
      "295:       bool* found_unknown_shapes);",
      "",
      "[Removed Lines]",
      "293:   static ConvolutionDimensions OpDimensionsFromInputs(",
      "",
      "[Added Lines]",
      "293:   static StatusOr<ConvolutionDimensions> OpDimensionsFromInputs(",
      "",
      "---------------"
    ],
    "tensorflow/core/grappler/costs/op_level_cost_estimator_test.cc||tensorflow/core/grappler/costs/op_level_cost_estimator_test.cc": [
      "File: tensorflow/core/grappler/costs/op_level_cost_estimator_test.cc -> tensorflow/core/grappler/costs/op_level_cost_estimator_test.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "24: #include \"tensorflow/core/framework/tensor_shape.h\"",
      "25: #include \"tensorflow/core/framework/tensor_shape.pb.h\"",
      "26: #include \"tensorflow/core/framework/types.h\"",
      "27: #include \"tensorflow/core/platform/test.h\"",
      "28: #include \"tensorflow/core/protobuf/device_properties.pb.h\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "27: #include \"tensorflow/core/platform/status_matchers.h\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "558:     }",
      "560:     bool found_unknown_shapes;",
      "564:     Padding padding_enum;",
      "565:     if (padding == \"VALID\") {",
      "566:       padding_enum = Padding::VALID;",
      "",
      "[Removed Lines]",
      "561:     auto dims = OpLevelCostEstimator::OpDimensionsFromInputs(",
      "562:         op_context.op_info.inputs(0).shape(), op_context.op_info,",
      "563:         &found_unknown_shapes);",
      "",
      "[Added Lines]",
      "562:     TF_ASSERT_OK_AND_ASSIGN(",
      "563:         auto dims, OpLevelCostEstimator::OpDimensionsFromInputs(",
      "564:                        op_context.op_info.inputs(0).shape(), op_context.op_info,",
      "565:                        &found_unknown_shapes));",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "581:     EXPECT_EQ(padding_enum, dims.padding);",
      "582:   }",
      "584:   OpLevelCostEstimator estimator_;",
      "585: };",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "586:   StatusOr<OpLevelCostEstimator::ConvolutionDimensions>",
      "587:   CallOpDimensionsFromInputs(const int n, const int h, const int w, const int c,",
      "588:                              const int kx, const int ky, const int sx,",
      "589:                              const int sy, const string& data_format,",
      "590:                              const string& padding) {",
      "591:     OpContext op_context;",
      "593:     const std::vector<int> x = {n, h, w, c};",
      "594:     const std::vector<int> ksize = {1, kx, ky, 1};",
      "595:     std::vector<int> strides;",
      "596:     if (data_format == \"NHWC\") {",
      "597:       strides = {1, sy, sx, 1};",
      "598:     } else {",
      "599:       strides = {1, 1, sy, sx};",
      "600:     }",
      "602:     auto& op_info = op_context.op_info;",
      "603:     SetCpuDevice(&op_info);",
      "604:     op_info.set_op(\"MaxPool\");",
      "606:     DescribeTensor4D(x[0], x[1], x[2], x[3], op_info.add_inputs());",
      "607:     auto* attr = op_info.mutable_attr();",
      "608:     SetAttrValue(data_format, &(*attr)[\"data_format\"]);",
      "609:     SetAttrValue(padding, &(*attr)[\"padding\"]);",
      "610:     SetAttrValue(strides, &(*attr)[\"strides\"]);",
      "611:     SetAttrValue(ksize, &(*attr)[\"ksize\"]);",
      "612:     bool found_unknown_shapes;",
      "613:     return OpLevelCostEstimator::OpDimensionsFromInputs(",
      "614:         op_context.op_info.inputs(0).shape(), op_context.op_info,",
      "615:         &found_unknown_shapes);",
      "616:   }",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1383:   }",
      "1384: }",
      "1386: TEST_F(OpLevelCostEstimatorTest, PredictMaxPool) {",
      "1387:   auto predict_max_pool = [this](const int n, const int in, const int c,",
      "1388:                                  const int k, const int s,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1420: TEST_F(OpLevelCostEstimatorTest, OpDimensionsFromInputsError) {",
      "1421:   std::vector<string> paddings = {\"VALID\", \"SAME\"};",
      "1422:   std::vector<string> formats = {\"NHWC\", \"NCHW\"};",
      "1423:   for (const auto& p : paddings) {",
      "1424:     for (const auto& f : formats) {",
      "1426:       ASSERT_THAT(",
      "1427:           CallOpDimensionsFromInputs(10, 14, 14, 3840, 3, 3, 0, 2, f, p),",
      "1428:           testing::StatusIs(",
      "1429:               error::INVALID_ARGUMENT,",
      "1430:               \"Stride must be > 0 for Height and Width, but got (2, 0)\"));",
      "1431:       ASSERT_THAT(",
      "1432:           CallOpDimensionsFromInputs(10, 14, 14, 3840, 3, 3, 2, 0, f, p),",
      "1433:           testing::StatusIs(",
      "1434:               error::INVALID_ARGUMENT,",
      "1435:               \"Stride must be > 0 for Height and Width, but got (0, 2)\"));",
      "1436:     }",
      "1437:   }",
      "1438: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "c6d1d34cf28662542df45584422ce2e3311e0d13",
      "candidate_info": {
        "commit_hash": "c6d1d34cf28662542df45584422ce2e3311e0d13",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/c6d1d34cf28662542df45584422ce2e3311e0d13",
        "files": [
          "tensorflow/core/grappler/costs/BUILD",
          "tensorflow/core/grappler/costs/op_level_cost_estimator.cc",
          "tensorflow/core/grappler/costs/op_level_cost_estimator.h",
          "tensorflow/core/grappler/costs/op_level_cost_estimator_test.cc"
        ],
        "message": "Refactor op level cost estimator -- cost functions report raw data (e.g., num ops, num bytes, not time), and then PredictCosts() translates it to time (in Costs).\n\n(1) Add a new structure, NodeCosts -- this is supposed to be used within op_level_cost_estimator; not for the users of OpLevelCostEstimator.\n\n(2) PredictCosts calls PredictNodeCosts, and then convert NodeCosts to Costs;\nusers of OpLevelCostEstimator wouldn't see any difference.\n\n(3) The signature of Predict methods for each op type is Status Predict***(OpContext&, NodeCost*); within OpLevelCostEstimator, we'll use Status for handling erroneous cases.\n\n(4) Fixed PredictSoftmax(): previously, it incorrectly checking input is rank-2, but it can be any rank >=1.\n\n(5) Predict times for fused ops are changed (in unit test, 2ns at most); that's because we now add bytes (in int64) and then calculate time, whereas previously, we first calculate time for each op, and then add them, but bytes to time may introduces some errors (int to float), the current approach is more accurate (however small delta it is).\n\n(6) CropAndResize op cost ignored 2nd, 3rd, and 4th input tensors' mem cost; it's now incorporated.\n\nPiperOrigin-RevId: 346121141\nChange-Id: I6caf1123f99dac6897f048644222f2fb46417885",
        "before_after_code_files": [
          "tensorflow/core/grappler/costs/op_level_cost_estimator.cc||tensorflow/core/grappler/costs/op_level_cost_estimator.cc",
          "tensorflow/core/grappler/costs/op_level_cost_estimator.h||tensorflow/core/grappler/costs/op_level_cost_estimator.h",
          "tensorflow/core/grappler/costs/op_level_cost_estimator_test.cc||tensorflow/core/grappler/costs/op_level_cost_estimator_test.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/grappler/costs/op_level_cost_estimator.cc||tensorflow/core/grappler/costs/op_level_cost_estimator.cc",
            "tensorflow/core/grappler/costs/op_level_cost_estimator.h||tensorflow/core/grappler/costs/op_level_cost_estimator.h",
            "tensorflow/core/grappler/costs/op_level_cost_estimator_test.cc||tensorflow/core/grappler/costs/op_level_cost_estimator_test.cc"
          ],
          "candidate": [
            "tensorflow/core/grappler/costs/op_level_cost_estimator.cc||tensorflow/core/grappler/costs/op_level_cost_estimator.cc",
            "tensorflow/core/grappler/costs/op_level_cost_estimator.h||tensorflow/core/grappler/costs/op_level_cost_estimator.h",
            "tensorflow/core/grappler/costs/op_level_cost_estimator_test.cc||tensorflow/core/grappler/costs/op_level_cost_estimator_test.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/grappler/costs/op_level_cost_estimator.cc||tensorflow/core/grappler/costs/op_level_cost_estimator.cc": [
          "File: tensorflow/core/grappler/costs/op_level_cost_estimator.cc -> tensorflow/core/grappler/costs/op_level_cost_estimator.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: #include \"tensorflow/core/grappler/clusters/utils.h\"",
          "27: #include \"tensorflow/core/grappler/costs/op_context.h\"",
          "28: #include \"tensorflow/core/grappler/costs/utils.h\"",
          "30: namespace tensorflow {",
          "31: namespace grappler {",
          "33: constexpr int kOpsPerMac = 2;",
          "34: constexpr char kGuaranteeConst[] = \"GuaranteeConst\";",
          "35: constexpr char kAddN[] = \"AddN\";",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "29: #include \"tensorflow/core/platform/errors.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "121: constexpr char kAssignSubVariableOp[] = \"AssignSubVariableOp\";",
          "123: static const Costs::Duration kMinComputeTime(1);",
          "125: namespace {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "126: static const int64 kMinComputeOp = 1;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "354: OpLevelCostEstimator::OpLevelCostEstimator() {",
          "362:     };",
          "363:   };",
          "",
          "[Removed Lines]",
          "357:   typedef Costs (OpLevelCostEstimator::*CostImpl)(const OpContext& op_context)",
          "358:       const;",
          "359:   auto wrap = [this](CostImpl impl) -> std::function<Costs(const OpContext&)> {",
          "360:     return [this, impl](const OpContext& op_context) {",
          "361:       return (this->*impl)(op_context);",
          "",
          "[Added Lines]",
          "360:   typedef Status (OpLevelCostEstimator::*CostImpl)(const OpContext& op_context,",
          "361:                                                    NodeCosts*) const;",
          "362:   auto wrap = [this](CostImpl impl)",
          "363:       -> std::function<Status(const OpContext&, NodeCosts*)> {",
          "364:     return [this, impl](const OpContext& op_context, NodeCosts* node_costs) {",
          "365:       return (this->*impl)(op_context, node_costs);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "642: }",
          "644: Costs OpLevelCostEstimator::PredictCosts(const OpContext& op_context) const {",
          "645:   const auto& op_info = op_context.op_info;",
          "646:   auto it = device_cost_impl_.find(op_info.op());",
          "647:   if (it != device_cost_impl_.end()) {",
          "653:   }",
          "655:   if (persistent_ops_.find(op_info.op()) != persistent_ops_.end()) {",
          "657:   }",
          "659:   if (elementwise_ops_.find(op_info.op()) != elementwise_ops_.end()) {",
          "661:   }",
          "663:   VLOG(1) << \"Missing accurate estimator for op: \" << op_info.op();",
          "666: }",
          "668: DeviceInfo OpLevelCostEstimator::GetDeviceInfo(",
          "",
          "[Removed Lines]",
          "648:     std::function<Costs(const OpContext&)> estimator = it->second;",
          "649:     Costs costs = estimator(op_context);",
          "650:     VLOG(1) << \"Operation \" << op_info.op() << \" takes \"",
          "651:             << costs.execution_time.count() << \" ns.\";",
          "652:     return costs;",
          "656:     return PredictVariable(op_context);",
          "660:     return PredictCwiseOp(op_context);",
          "665:   return PredictCostOfAnUnknownOp(op_context);",
          "",
          "[Added Lines]",
          "649:   Costs costs;",
          "650:   NodeCosts node_costs;",
          "651:   if (PredictNodeCosts(op_context, &node_costs).ok()) {",
          "652:     if (node_costs.has_costs) {",
          "653:       return node_costs.costs;",
          "654:     }",
          "656:     if (node_costs.minimum_cost_op) {",
          "662:       costs.compute_time = kMinComputeTime;",
          "663:       costs.execution_time = kMinComputeTime;",
          "664:       costs.memory_time = 0;",
          "665:       costs.intermediate_memory_time = 0;",
          "666:       costs.intermediate_memory_read_time = 0;",
          "667:       costs.intermediate_memory_write_time = 0;",
          "668:     } else {",
          "670:       costs = PredictOpCountBasedCost(",
          "671:           node_costs.num_compute_ops, node_costs.num_total_read_bytes(),",
          "672:           node_costs.num_total_write_bytes(), op_context.op_info);",
          "673:     }",
          "674:     VLOG(1) << \"Operation \" << op_context.op_info.op() << \" takes \"",
          "675:             << costs.execution_time.count() << \" ns.\";",
          "677:     costs.max_memory = node_costs.max_memory;",
          "678:     costs.persistent_memory = node_costs.persistent_memory;",
          "679:     costs.temporary_memory = node_costs.temporary_memory;",
          "680:     costs.inaccurate = node_costs.inaccurate;",
          "681:     costs.num_ops_with_unknown_shapes =",
          "682:         node_costs.num_nodes_with_unknown_shapes;",
          "683:     costs.num_ops_total = node_costs.num_nodes;",
          "684:     return costs;",
          "685:   }",
          "687:   LOG(WARNING) << \"Error in PredictCost() for the op: \"",
          "688:                << op_context.op_info.ShortDebugString();",
          "689:   costs = Costs::ZeroCosts(/*inaccurate=*/true);",
          "690:   costs.num_ops_with_unknown_shapes = node_costs.num_nodes_with_unknown_shapes;",
          "691:   return costs;",
          "692: }",
          "694: Status OpLevelCostEstimator::PredictNodeCosts(const OpContext& op_context,",
          "695:                                               NodeCosts* node_costs) const {",
          "699:     std::function<Status(const OpContext&, NodeCosts*)> estimator = it->second;",
          "700:     return estimator(op_context, node_costs);",
          "704:     return PredictVariable(op_context, node_costs);",
          "708:     return PredictCwiseOp(op_context, node_costs);",
          "713:   node_costs->num_nodes_with_unknown_op_type = 1;",
          "714:   return PredictCostOfAnUnknownOp(op_context, node_costs);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "716:   return DeviceInfo(gflops, gb_per_sec);",
          "717: }",
          "720:   const auto& op_info = op_context.op_info;",
          "721:   bool found_unknown_shapes = false;",
          "",
          "[Removed Lines]",
          "719: Costs OpLevelCostEstimator::PredictCwiseOp(const OpContext& op_context) const {",
          "",
          "[Added Lines]",
          "768: Status OpLevelCostEstimator::PredictCwiseOp(const OpContext& op_context,",
          "769:                                             NodeCosts* node_costs) const {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "736:   }",
          "738:   int op_cost = 1;",
          "740:   auto it = elementwise_ops_.find(op_info.op());",
          "741:   if (it != elementwise_ops_.end()) {",
          "742:     op_cost = it->second;",
          "744:   } else {",
          "746:   }",
          "754: }",
          "763: }",
          "765: Costs OpLevelCostEstimator::PredictOpCountBasedCost(",
          "",
          "[Removed Lines]",
          "739:   bool is_known_elementwise_op = false;",
          "743:     is_known_elementwise_op = true;",
          "745:     LOG(WARNING) << \"Not a cwise op: \" << op_info.op();",
          "748:   Costs costs = PredictOpCountBasedCost(op_count * op_cost, op_info);",
          "749:   if (found_unknown_shapes || !is_known_elementwise_op) {",
          "750:     costs.inaccurate = true;",
          "751:   }",
          "752:   costs.num_ops_with_unknown_shapes = found_unknown_shapes;",
          "753:   return costs;",
          "756: Costs OpLevelCostEstimator::PredictCostOfAnUnknownOp(",
          "757:     const OpContext& op_context) const {",
          "760:   auto costs = PredictOpCountBasedCost(0, op_context.op_info);",
          "761:   costs.inaccurate = true;",
          "762:   return costs;",
          "",
          "[Added Lines]",
          "793:     return errors::InvalidArgument(\"Not a cwise op: \", op_info.op());",
          "796:   return PredictDefaultNodeCosts(op_count * op_cost, op_context,",
          "797:                                  &found_unknown_shapes, node_costs);",
          "800: Status OpLevelCostEstimator::PredictCostOfAnUnknownOp(",
          "801:     const OpContext& op_context, NodeCosts* node_costs) const {",
          "804:   bool found_unknown_shapes = false;",
          "805:   node_costs->inaccurate = true;",
          "806:   return PredictDefaultNodeCosts(0, op_context, &found_unknown_shapes,",
          "807:                                  node_costs);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1509:   return total_input_size;",
          "1510: }",
          "1512: int64 OpLevelCostEstimator::CalculateLargestInputCount(",
          "1513:     const OpInfo& op_info, bool* found_unknown_shapes) {",
          "1514:   int64 largest_input_count = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1557: std::vector<int64> OpLevelCostEstimator::CalculateInputTensorSize(",
          "1558:     const OpInfo& op_info, bool* found_unknown_shapes) {",
          "1559:   std::vector<int64> input_tensor_size;",
          "1560:   input_tensor_size.reserve(op_info.inputs().size());",
          "1561:   for (auto& input : op_info.inputs()) {",
          "1562:     input_tensor_size.push_back(",
          "1563:         CalculateTensorSize(input, found_unknown_shapes));",
          "1564:   }",
          "1565:   return input_tensor_size;",
          "1566: }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1545:   return total_output_size;",
          "1546: }",
          "1548: bool HasZeroDim(const OpInfo& op_info) {",
          "1549:   for (int i = 0; i < op_info.inputs_size(); ++i) {",
          "1550:     const auto& input = op_info.inputs(i);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1604: std::vector<int64> OpLevelCostEstimator::CalculateOutputTensorSize(",
          "1605:     const OpInfo& op_info, bool* found_unknown_shapes) {",
          "1606:   std::vector<int64> output_tensor_size;",
          "1607:   output_tensor_size.reserve(op_info.outputs().size());",
          "1609:   for (const auto& output : op_info.outputs()) {",
          "1610:     DataType dt = output.dtype();",
          "1611:     const auto& original_output_shape = output.shape();",
          "1612:     int64 output_size = DataTypeSize(BaseType(dt));",
          "1613:     int num_dims = std::max(1, original_output_shape.dim_size());",
          "1614:     auto output_shape = MaybeGetMinimumShape(original_output_shape, num_dims,",
          "1615:                                              found_unknown_shapes);",
          "1616:     for (const auto& dim : output_shape.dim()) {",
          "1617:       output_size *= dim.size();",
          "1618:     }",
          "1619:     output_tensor_size.push_back(output_size);",
          "1620:   }",
          "1621:   return output_tensor_size;",
          "1622: }",
          "1624: Status OpLevelCostEstimator::PredictDefaultNodeCosts(",
          "1625:     const int64 num_compute_ops, const OpContext& op_context,",
          "1626:     bool* found_unknown_shapes, NodeCosts* node_costs) {",
          "1627:   const auto& op_info = op_context.op_info;",
          "1628:   node_costs->num_compute_ops = num_compute_ops;",
          "1629:   node_costs->num_input_bytes_accessed =",
          "1630:       CalculateInputTensorSize(op_info, found_unknown_shapes);",
          "1631:   node_costs->num_output_bytes_accessed =",
          "1632:       CalculateOutputTensorSize(op_info, found_unknown_shapes);",
          "1633:   node_costs->max_memory = node_costs->num_total_output_bytes();",
          "1634:   if (*found_unknown_shapes) {",
          "1635:     node_costs->inaccurate = true;",
          "1636:     node_costs->num_nodes_with_unknown_shapes = 1;",
          "1637:   }",
          "1638:   return Status::OK();",
          "1639: }",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1560:   return false;",
          "1561: }",
          "1564:   const auto& op_info = op_context.op_info;",
          "1565:   if (HasZeroDim(op_info)) {",
          "1570:   }",
          "1571:   bool found_unknown_shapes = false;",
          "1577: }",
          "1581:   const auto& op_info = op_context.op_info;",
          "1582:   if (HasZeroDim(op_info)) {",
          "1587:   }",
          "1588:   bool found_unknown_shapes = false;",
          "1596: }",
          "1600:   const auto& op_info = op_context.op_info;",
          "1601:   if (HasZeroDim(op_info)) {",
          "1606:   }",
          "1607:   bool found_unknown_shapes = false;",
          "1615: }",
          "",
          "[Removed Lines]",
          "1563: Costs OpLevelCostEstimator::PredictConv2D(const OpContext& op_context) const {",
          "1566:     Costs costs = Costs::ZeroCosts();",
          "1567:     costs.inaccurate = true;",
          "1568:     costs.num_ops_with_unknown_shapes = 1;",
          "1569:     return costs;",
          "1572:   auto costs = PredictOpCountBasedCost(",
          "1573:       CountConv2DOperations(op_info, &found_unknown_shapes), op_info);",
          "1574:   costs.inaccurate = found_unknown_shapes;",
          "1575:   costs.num_ops_with_unknown_shapes = found_unknown_shapes;",
          "1576:   return costs;",
          "1579: Costs OpLevelCostEstimator::PredictConv2DBackpropInput(",
          "1580:     const OpContext& op_context) const {",
          "1583:     Costs costs = Costs::ZeroCosts();",
          "1584:     costs.inaccurate = true;",
          "1585:     costs.num_ops_with_unknown_shapes = true;",
          "1586:     return costs;",
          "1589:   auto costs =",
          "1590:       PredictOpCountBasedCost(CountConv2DBackpropInputOperations(",
          "1591:                                   op_info, nullptr, &found_unknown_shapes),",
          "1592:                               op_info);",
          "1593:   costs.inaccurate = found_unknown_shapes;",
          "1594:   costs.num_ops_with_unknown_shapes = found_unknown_shapes;",
          "1595:   return costs;",
          "1598: Costs OpLevelCostEstimator::PredictConv2DBackpropFilter(",
          "1599:     const OpContext& op_context) const {",
          "1602:     Costs costs = Costs::ZeroCosts();",
          "1603:     costs.inaccurate = true;",
          "1604:     costs.num_ops_with_unknown_shapes = true;",
          "1605:     return costs;",
          "1608:   auto costs =",
          "1609:       PredictOpCountBasedCost(CountConv2DBackpropFilterOperations(",
          "1610:                                   op_info, nullptr, &found_unknown_shapes),",
          "1611:                               op_info);",
          "1612:   costs.inaccurate = found_unknown_shapes;",
          "1613:   costs.num_ops_with_unknown_shapes = found_unknown_shapes;",
          "1614:   return costs;",
          "1617: Costs OpLevelCostEstimator::PredictFusedConv2DBiasActivation(",
          "1618:     const OpContext& op_context) const {",
          "",
          "[Added Lines]",
          "1656: Status OpLevelCostEstimator::PredictConv2D(const OpContext& op_context,",
          "1657:                                            NodeCosts* node_costs) const {",
          "1660:     node_costs->num_nodes_with_unknown_shapes = 1;",
          "1661:     return errors::InvalidArgument(\"Conv2D op includes zero dimension: \",",
          "1662:                                    op_info.ShortDebugString());",
          "1665:   int64 num_compute_ops = CountConv2DOperations(op_info, &found_unknown_shapes);",
          "1666:   return PredictDefaultNodeCosts(num_compute_ops, op_context,",
          "1667:                                  &found_unknown_shapes, node_costs);",
          "1670: Status OpLevelCostEstimator::PredictConv2DBackpropInput(",
          "1671:     const OpContext& op_context, NodeCosts* node_costs) const {",
          "1674:     node_costs->num_nodes_with_unknown_shapes = 1;",
          "1675:     return errors::InvalidArgument(",
          "1676:         \"Conv2DBackpropInput op includes zero dimension\",",
          "1677:         op_info.ShortDebugString());",
          "1680:   int64 num_compute_ops = CountConv2DBackpropInputOperations(",
          "1681:       op_info, nullptr, &found_unknown_shapes);",
          "1682:   return PredictDefaultNodeCosts(num_compute_ops, op_context,",
          "1683:                                  &found_unknown_shapes, node_costs);",
          "1686: Status OpLevelCostEstimator::PredictConv2DBackpropFilter(",
          "1687:     const OpContext& op_context, NodeCosts* node_costs) const {",
          "1690:     node_costs->num_nodes_with_unknown_shapes = 1;",
          "1691:     return errors::InvalidArgument(",
          "1692:         \"Conv2DBackpropFilter op includes zero dimension\",",
          "1693:         op_info.ShortDebugString());",
          "1696:   int64 num_compute_ops = CountConv2DBackpropFilterOperations(",
          "1697:       op_info, nullptr, &found_unknown_shapes);",
          "1698:   return PredictDefaultNodeCosts(num_compute_ops, op_context,",
          "1699:                                  &found_unknown_shapes, node_costs);",
          "1702: Status OpLevelCostEstimator::PredictFusedConv2DBiasActivation(",
          "1703:     const OpContext& op_context, NodeCosts* node_costs) const {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1639:   std::string data_format = GetDataFormat(op_context.op_info);",
          "1640:   if (data_format != \"NCHW\" && data_format != \"NHWC\" &&",
          "1641:       data_format != \"NCHW_VECT_C\") {",
          "1646:   }",
          "1647:   std::string filter_format = GetFilterFormat(op_context.op_info);",
          "1648:   if (filter_format != \"HWIO\" && filter_format != \"OIHW\" &&",
          "1649:       filter_format != \"OIHW_VECT_I\") {",
          "1654:   }",
          "1656:   auto& conv_input = op_context.op_info.inputs(0);",
          "",
          "[Removed Lines]",
          "1642:     LOG(WARNING) << \"unsupported data format: \" << data_format;",
          "1643:     Costs cost = Costs::ZeroCosts();",
          "1644:     cost.inaccurate = true;",
          "1645:     return cost;",
          "1650:     LOG(WARNING) << \"unsupported filter format: \" << filter_format;",
          "1651:     Costs cost = Costs::ZeroCosts();",
          "1652:     cost.inaccurate = true;",
          "1653:     return cost;",
          "",
          "[Added Lines]",
          "1727:     return errors::InvalidArgument(",
          "1728:         \"Unsupported data format (\", data_format,",
          "1729:         \") for op: \", op_context.op_info.ShortDebugString());",
          "1734:     return errors::InvalidArgument(",
          "1735:         \"Unsupported filter format (\", filter_format,",
          "1736:         \") for op: \", op_context.op_info.ShortDebugString());",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1702: }",
          "1705:   const auto& op_info = op_context.op_info;",
          "1706:   bool found_unknown_shapes = false;",
          "1712: }",
          "1715:   const auto& op_info = op_context.op_info;",
          "1717:   auto it = op_info.attr().find(\"equation\");",
          "1719:   OpContext batch_matmul_op_context;",
          "1720:   bool found_unknown_shapes = false;",
          "1721:   bool success = GenerateBatchMatmulContextFromEinsum(",
          "1722:       op_context, &batch_matmul_op_context, &found_unknown_shapes);",
          "1723:   if (!success) {",
          "1725:   }",
          "1730: }",
          "1734:   const auto& op_info = op_context.op_info;",
          "1735:   bool found_unknown_shapes = false;",
          "",
          "[Removed Lines]",
          "1698:   auto costs = PredictFusedOp(op_context_with_output, component_ops);",
          "1699:   costs.inaccurate |= found_unknown_shapes;",
          "1700:   costs.num_ops_with_unknown_shapes = costs.inaccurate;",
          "1701:   return costs;",
          "1704: Costs OpLevelCostEstimator::PredictMatMul(const OpContext& op_context) const {",
          "1707:   auto costs = PredictOpCountBasedCost(",
          "1708:       CountMatMulOperations(op_info, &found_unknown_shapes), op_info);",
          "1709:   costs.inaccurate = found_unknown_shapes;",
          "1710:   costs.num_ops_with_unknown_shapes = found_unknown_shapes;",
          "1711:   return costs;",
          "1714: Costs OpLevelCostEstimator::PredictEinsum(const OpContext& op_context) const {",
          "1718:   if (it == op_info.attr().end()) return Costs::ZeroCosts(/*inaccurate=*/true);",
          "1724:     return PredictCostOfAnUnknownOp(op_context);",
          "1726:   Costs costs = PredictCosts(batch_matmul_op_context);",
          "1727:   costs.inaccurate = costs.inaccurate || found_unknown_shapes;",
          "1728:   costs.num_ops_with_unknown_shapes = found_unknown_shapes;",
          "1729:   return costs;",
          "1732: Costs OpLevelCostEstimator::PredictSparseTensorDenseMatMul(",
          "1733:     const OpContext& op_context) const {",
          "",
          "[Added Lines]",
          "1781:   if (found_unknown_shapes) {",
          "1782:     node_costs->inaccurate = true;",
          "1783:     node_costs->num_nodes_with_unknown_shapes = 1;",
          "1784:   }",
          "1785:   return PredictFusedOp(op_context_with_output, component_ops, node_costs);",
          "1788: Status OpLevelCostEstimator::PredictMatMul(const OpContext& op_context,",
          "1789:                                            NodeCosts* node_costs) const {",
          "1792:   int64 num_compute_ops = CountMatMulOperations(op_info, &found_unknown_shapes);",
          "1793:   return PredictDefaultNodeCosts(num_compute_ops, op_context,",
          "1794:                                  &found_unknown_shapes, node_costs);",
          "1797: Status OpLevelCostEstimator::PredictEinsum(const OpContext& op_context,",
          "1798:                                            NodeCosts* node_costs) const {",
          "1802:   if (it == op_info.attr().end()) {",
          "1803:     return errors::InvalidArgument(\"Einsum op doesn't have equation attr: \",",
          "1804:                                    op_info.ShortDebugString());",
          "1805:   }",
          "1811:   if (found_unknown_shapes) {",
          "1812:     node_costs->inaccurate = true;",
          "1813:     node_costs->num_nodes_with_unknown_shapes = 1;",
          "1814:   }",
          "1816:     return PredictCostOfAnUnknownOp(op_context, node_costs);",
          "1818:   return PredictNodeCosts(batch_matmul_op_context, node_costs);",
          "1821: Status OpLevelCostEstimator::PredictSparseTensorDenseMatMul(",
          "1822:     const OpContext& op_context, NodeCosts* node_costs) const {",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1758:       CalculateTensorSize(op_info.inputs(2), &found_unknown_shapes);",
          "1759:   int64 b_input_size =",
          "1760:       num_elems_in_a * n_dim * DataTypeSize(BaseType(b_matrix.dtype()));",
          "1773: }",
          "1776:   const auto& op_info = op_context.op_info;",
          "1777:   VLOG(1) << \"Op:\" << op_info.op() << \" Execution Time 0 (ns)\";",
          "1779: }",
          "1786: }",
          "1789:   const auto& op_info = op_context.op_info;",
          "1802:   const auto& op_info = op_context.op_info;",
          "1815:   const auto& op_info = op_context.op_info;",
          "1816:   bool found_unknown_shapes = false;",
          "1822: }",
          "1825:   const auto& op_info = op_context.op_info;",
          "1835: }",
          "1841:   const auto& op_info = op_context.op_info;",
          "1843:   const int inputs_needed = op_info.op() == \"Slice\" ? 3 : 2;",
          "1844:   if (op_info.outputs_size() == 0 || op_info.inputs_size() < inputs_needed) {",
          "1848:   }",
          "1850:   bool unknown_shapes = false;",
          "",
          "[Removed Lines]",
          "1761:   double input_size = a_indices_input_size + a_values_input_size +",
          "1762:                       a_shape_input_size + b_input_size;",
          "1764:   double output_size = CalculateOutputSize(op_info, &found_unknown_shapes);",
          "1766:   auto costs =",
          "1767:       PredictOpCountBasedCost(op_count, input_size, output_size, op_info);",
          "1768:   costs.inaccurate = found_unknown_shapes;",
          "1769:   costs.num_ops_with_unknown_shapes = found_unknown_shapes;",
          "1770:   costs.max_memory = output_size;",
          "1772:   return costs;",
          "1775: Costs OpLevelCostEstimator::PredictNoOp(const OpContext& op_context) const {",
          "1778:   return Costs::ZeroCosts();",
          "1781: Costs OpLevelCostEstimator::PredictPureMemoryOp(",
          "1782:     const OpContext& op_context) const {",
          "1785:   return PredictOpCountBasedCost(0, op_context.op_info);",
          "1788: Costs OpLevelCostEstimator::PredictIdentity(const OpContext& op_context) const {",
          "1790:   VLOG(1) << \"Op:\" << op_info.op() << \" Execution Time 0 (ns)\";",
          "1791:   Costs result = Costs::ZeroCosts();",
          "1792:   result.max_memory = CalculateOutputSize(op_info, &result.inaccurate);",
          "1793:   result.num_ops_with_unknown_shapes = result.inaccurate;",
          "1796:   result.compute_time = kMinComputeTime;",
          "1797:   result.execution_time = result.compute_time;",
          "1798:   return result;",
          "1799: }",
          "1801: Costs OpLevelCostEstimator::PredictVariable(const OpContext& op_context) const {",
          "1803:   VLOG(1) << \"Op:\" << op_info.op() << \" Execution Time 0 (ns)\";",
          "1804:   Costs result = Costs::ZeroCosts();",
          "1805:   result.persistent_memory = CalculateOutputSize(op_info, &result.inaccurate);",
          "1806:   result.num_ops_with_unknown_shapes = result.inaccurate;",
          "1808:   result.compute_time = kMinComputeTime;",
          "1809:   result.execution_time = result.compute_time;",
          "1810:   return result;",
          "1811: }",
          "1813: Costs OpLevelCostEstimator::PredictBatchMatMul(",
          "1814:     const OpContext& op_context) const {",
          "1817:   Costs costs = PredictOpCountBasedCost(",
          "1818:       CountBatchMatMulOperations(op_info, &found_unknown_shapes), op_info);",
          "1819:   costs.inaccurate = found_unknown_shapes;",
          "1820:   costs.num_ops_with_unknown_shapes = found_unknown_shapes;",
          "1821:   return costs;",
          "1824: Costs OpLevelCostEstimator::PredictMetadata(const OpContext& op_context) const {",
          "1826:   Costs costs = Costs::ZeroCosts();",
          "1827:   costs.max_memory = CalculateOutputSize(op_info, &costs.inaccurate);",
          "1828:   costs.num_ops_with_unknown_shapes = costs.inaccurate;",
          "1831:   costs.compute_time = kMinComputeTime;",
          "1832:   costs.execution_time = costs.compute_time;",
          "1834:   return costs;",
          "1837: Costs OpLevelCostEstimator::PredictGatherOrSlice(",
          "1838:     const OpContext& op_context) const {",
          "1845:     Costs costs = Costs::ZeroCosts();",
          "1846:     costs.inaccurate = true;",
          "1847:     return costs;",
          "",
          "[Added Lines]",
          "1850:   int64 output_size = CalculateOutputSize(op_info, &found_unknown_shapes);",
          "1852:   node_costs->num_compute_ops = op_count;",
          "1853:   node_costs->num_input_bytes_accessed = {a_indices_input_size,",
          "1854:                                           a_values_input_size,",
          "1855:                                           a_shape_input_size, b_input_size};",
          "1856:   node_costs->num_output_bytes_accessed = {output_size};",
          "1857:   if (found_unknown_shapes) {",
          "1858:     node_costs->inaccurate = true;",
          "1859:     node_costs->num_nodes_with_unknown_shapes = 1;",
          "1860:   }",
          "1861:   return Status::OK();",
          "1864: Status OpLevelCostEstimator::PredictNoOp(const OpContext& op_context,",
          "1865:                                          NodeCosts* node_costs) const {",
          "1869:   return Status::OK();",
          "1872: Status OpLevelCostEstimator::PredictPureMemoryOp(const OpContext& op_context,",
          "1873:                                                  NodeCosts* node_costs) const {",
          "1876:   bool found_unknown_shapes = false;",
          "1877:   node_costs->num_nodes_with_pure_memory_op = 1;",
          "1878:   return PredictDefaultNodeCosts(0, op_context, &found_unknown_shapes,",
          "1879:                                  node_costs);",
          "1882: Status OpLevelCostEstimator::PredictIdentity(const OpContext& op_context,",
          "1883:                                              NodeCosts* node_costs) const {",
          "1885:   VLOG(1) << \"Op:\" << op_info.op() << \" Minimum cost for Identity\";",
          "1886:   node_costs->minimum_cost_op = true;",
          "1887:   node_costs->num_compute_ops = kMinComputeOp;",
          "1890:   node_costs->num_input_bytes_accessed = {0};",
          "1891:   node_costs->num_output_bytes_accessed = {0};",
          "1892:   bool inaccurate = false;",
          "1893:   node_costs->max_memory = CalculateOutputSize(op_info, &inaccurate);",
          "1894:   if (inaccurate) {",
          "1895:     node_costs->inaccurate = true;",
          "1896:     node_costs->num_nodes_with_unknown_shapes = 1;",
          "1897:   }",
          "1898:   return Status::OK();",
          "1899: }",
          "1901: Status OpLevelCostEstimator::PredictVariable(const OpContext& op_context,",
          "1902:                                              NodeCosts* node_costs) const {",
          "1904:   VLOG(1) << \"Op:\" << op_info.op() << \" Minimum cost for Variable\";",
          "1905:   node_costs->minimum_cost_op = true;",
          "1906:   node_costs->num_compute_ops = kMinComputeOp;",
          "1909:   node_costs->num_input_bytes_accessed = {0};",
          "1910:   node_costs->num_output_bytes_accessed = {0};",
          "1911:   bool inaccurate = false;",
          "1912:   node_costs->persistent_memory = CalculateOutputSize(op_info, &inaccurate);",
          "1913:   if (inaccurate) {",
          "1914:     node_costs->inaccurate = true;",
          "1915:     node_costs->num_nodes_with_unknown_shapes = 1;",
          "1916:   }",
          "1917:   return Status::OK();",
          "1918: }",
          "1920: Status OpLevelCostEstimator::PredictBatchMatMul(const OpContext& op_context,",
          "1921:                                                 NodeCosts* node_costs) const {",
          "1924:   int64 num_compute_ops =",
          "1925:       CountBatchMatMulOperations(op_info, &found_unknown_shapes);",
          "1926:   return PredictDefaultNodeCosts(num_compute_ops, op_context,",
          "1927:                                  &found_unknown_shapes, node_costs);",
          "1930: Status OpLevelCostEstimator::PredictMetadata(const OpContext& op_context,",
          "1931:                                              NodeCosts* node_costs) const {",
          "1933:   node_costs->minimum_cost_op = true;",
          "1934:   node_costs->num_compute_ops = kMinComputeOp;",
          "1935:   node_costs->num_input_bytes_accessed = {0};",
          "1936:   node_costs->num_output_bytes_accessed = {0};",
          "1937:   bool inaccurate = false;",
          "1938:   node_costs->max_memory = CalculateOutputSize(op_info, &inaccurate);",
          "1939:   if (inaccurate) {",
          "1940:     node_costs->inaccurate = true;",
          "1941:     node_costs->num_nodes_with_unknown_shapes = 1;",
          "1942:   }",
          "1943:   return Status::OK();",
          "1946: Status OpLevelCostEstimator::PredictGatherOrSlice(const OpContext& op_context,",
          "1947:                                                   NodeCosts* node_costs) const {",
          "1954:     return errors::InvalidArgument(",
          "1955:         op_info.op(),",
          "1956:         \" Op doesn't have valid input / output: \", op_info.ShortDebugString());",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1854:   const int64 op_count =",
          "1855:       CalculateTensorElementCount(op_info.outputs(0), &unknown_shapes);",
          "1860:   if (op_info.op() == \"Slice\") {",
          "1862:     end_input_index = 3;",
          "",
          "[Removed Lines]",
          "1857:   const double output_size = CalculateOutputSize(op_info, &unknown_shapes);",
          "1858:   double input_size = output_size;",
          "1859:   int begin_input_index = 1, end_input_index;",
          "",
          "[Added Lines]",
          "1965:   node_costs->num_compute_ops = op_count;",
          "1967:   const int64 output_size = CalculateOutputSize(op_info, &unknown_shapes);",
          "1968:   node_costs->num_output_bytes_accessed = {output_size};",
          "1970:   node_costs->num_input_bytes_accessed.reserve(op_info.inputs().size());",
          "1971:   int64 input_size = output_size;",
          "1975:   node_costs->num_input_bytes_accessed.push_back(input_size);",
          "1976:   int begin_input_index = 1;",
          "1977:   int end_input_index;",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1868:     end_input_index = 2;",
          "1869:   }",
          "1870:   for (int i = begin_input_index; i < end_input_index; ++i) {",
          "1873:   }",
          "1882: }",
          "1886:   const auto& op_info = op_context.op_info;",
          "1887:   bool found_unknown_shapes = false;",
          "",
          "[Removed Lines]",
          "1871:     input_size +=",
          "1872:         CalculateTensorElementCount(op_info.inputs(i), &unknown_shapes);",
          "1875:   Costs costs =",
          "1876:       PredictOpCountBasedCost(op_count, input_size, output_size, op_info);",
          "1877:   costs.inaccurate = unknown_shapes;",
          "1878:   costs.num_ops_with_unknown_shapes = unknown_shapes;",
          "1879:   costs.max_memory = output_size;",
          "1881:   return costs;",
          "1884: Costs OpLevelCostEstimator::PredictScatter(const OpContext& op_context) const {",
          "",
          "[Added Lines]",
          "1989:     node_costs->num_input_bytes_accessed.push_back(",
          "1990:         CalculateTensorElementCount(op_info.inputs(i), &unknown_shapes));",
          "1992:   if (unknown_shapes) {",
          "1993:     node_costs->inaccurate = true;",
          "1994:     node_costs->num_nodes_with_unknown_shapes = 1;",
          "1995:   }",
          "1996:   return Status::OK();",
          "1999: Status OpLevelCostEstimator::PredictScatter(const OpContext& op_context,",
          "2000:                                             NodeCosts* node_costs) const {",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1904:     num_elems_in_ref_per_index *= ref_tensor_shape.dim(i).size();",
          "1905:   }",
          "1906:   const int64 op_count = num_indices * num_elems_in_ref_per_index;",
          "1909:   int64 ref_input_size =",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2023:   node_costs->num_compute_ops = op_count;",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1912:       CalculateTensorSize(op_info.inputs(1), &found_unknown_shapes);",
          "1913:   int64 updates_input_size =",
          "1914:       CalculateTensorSize(op_info.inputs(2), &found_unknown_shapes);",
          "1921:       op_count * DataTypeSize(BaseType(op_info.outputs(0).dtype()));",
          "1929: }",
          "1932:     const OpContext& op_context,",
          "1943:   for (auto& fused_op : fused_op_contexts) {",
          "1949:   }",
          "1953: }",
          "",
          "[Removed Lines]",
          "1916:   double total_input_size =",
          "1917:       ref_input_size + indices_input_size + updates_input_size;",
          "1920:   double total_output_size =",
          "1923:   auto costs = PredictOpCountBasedCost(op_count, total_input_size,",
          "1924:                                        total_output_size, op_info);",
          "1925:   costs.inaccurate = found_unknown_shapes;",
          "1926:   costs.num_ops_with_unknown_shapes = found_unknown_shapes;",
          "1928:   return costs;",
          "1931: Costs OpLevelCostEstimator::PredictFusedOp(",
          "1933:     const std::vector<OpContext>& fused_op_contexts) const {",
          "1939:   Costs fused_cost = PredictOpCountBasedCost(0, op_context.op_info);",
          "1941:   fused_cost.compute_time = 0;",
          "1942:   fused_cost.inaccurate = false;",
          "1944:     auto op_cost = PredictCosts(fused_op);",
          "1946:     fused_cost.compute_time += op_cost.compute_time;",
          "1947:     fused_cost.inaccurate |= op_cost.inaccurate;",
          "1948:     fused_cost.intermediate_memory_time += op_cost.intermediate_memory_time;",
          "1951:   CombineCostsAndUpdateExecutionTime(compute_memory_overlap_, &fused_cost);",
          "1952:   return fused_cost;",
          "",
          "[Added Lines]",
          "2032:   node_costs->num_input_bytes_accessed = {ref_input_size, indices_input_size,",
          "2033:                                           updates_input_size};",
          "2036:   int64 output_size =",
          "2038:   node_costs->num_output_bytes_accessed = {output_size};",
          "2040:   if (found_unknown_shapes) {",
          "2041:     node_costs->inaccurate = true;",
          "2042:     node_costs->num_nodes_with_unknown_shapes = 1;",
          "2043:   }",
          "2044:   return Status::OK();",
          "2047: Status OpLevelCostEstimator::PredictFusedOp(",
          "2049:     const std::vector<OpContext>& fused_op_contexts,",
          "2050:     NodeCosts* node_costs) const {",
          "2056:   bool found_unknown_shapes = false;",
          "2057:   Status s =",
          "2058:       PredictDefaultNodeCosts(0, op_context, &found_unknown_shapes, node_costs);",
          "2061:     NodeCosts fused_node_costs;",
          "2062:     s.Update(PredictNodeCosts(fused_op, &fused_node_costs));",
          "2063:     node_costs->num_compute_ops += fused_node_costs.num_compute_ops;",
          "2064:     node_costs->inaccurate |= fused_node_costs.inaccurate;",
          "2067:     node_costs->num_nodes_with_unknown_shapes |=",
          "2068:         fused_node_costs.num_nodes_with_unknown_shapes;",
          "2069:     node_costs->num_nodes_with_unknown_op_type |=",
          "2070:         fused_node_costs.num_nodes_with_unknown_op_type;",
          "2071:     node_costs->num_nodes_with_pure_memory_op |=",
          "2072:         fused_node_costs.num_nodes_with_pure_memory_op;",
          "2075:   return Status::OK();",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "2040:   return conv_dims;",
          "2041: }",
          "2044:   bool found_unknown_shapes = false;",
          "2045:   const auto& op_info = op_context.op_info;",
          "",
          "[Removed Lines]",
          "2043: Costs OpLevelCostEstimator::PredictMaxPool(const OpContext& op_context) const {",
          "",
          "[Added Lines]",
          "2166: Status OpLevelCostEstimator::PredictMaxPool(const OpContext& op_context,",
          "2167:                                             NodeCosts* node_costs) const {",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "2051:   int per_output_ops = dims.kx * dims.ky == 1 ? 1 : dims.kx * dims.ky - 1;",
          "2052:   int64 ops = dims.batch * dims.ox * dims.oy * dims.oz * per_output_ops;",
          "2055:   if (dims.ky >= dims.sy) {",
          "2058:   } else {  // dims.ky < dims.sy",
          "2062:     const auto data_size = DataTypeSize(BaseType(op_info.inputs(0).dtype()));",
          "2065:   }",
          "2075: }",
          "2079:   bool found_unknown_shapes = false;",
          "2080:   const auto& op_info = op_context.op_info;",
          "2085:   ConvolutionDimensions dims = OpDimensionsFromInputs(",
          "2086:       op_info.inputs(0).shape(), op_info, &found_unknown_shapes);",
          "",
          "[Removed Lines]",
          "2054:   double total_input_size = 0;",
          "2056:     total_input_size =",
          "2057:         CalculateTensorSize(op_info.inputs(0), &found_unknown_shapes);",
          "2063:     total_input_size =",
          "2064:         data_size * dims.batch * dims.ix * dims.ky * dims.oy * dims.iz;",
          "2066:   const double total_output_size =",
          "2067:       CalculateOutputSize(op_info, &found_unknown_shapes);",
          "2069:   Costs costs = PredictOpCountBasedCost(ops, total_input_size,",
          "2070:                                         total_output_size, op_info);",
          "2071:   costs.inaccurate = found_unknown_shapes;",
          "2072:   costs.num_ops_with_unknown_shapes = found_unknown_shapes;",
          "2073:   costs.max_memory = total_output_size;",
          "2074:   return costs;",
          "2077: Costs OpLevelCostEstimator::PredictMaxPoolGrad(",
          "2078:     const OpContext& op_context) const {",
          "2084:   if (op_info.inputs_size() < 3) return Costs::ZeroCosts(/*inaccurate=*/true);",
          "",
          "[Added Lines]",
          "2177:   node_costs->num_compute_ops = ops;",
          "2179:   int64 input_size = 0;",
          "2181:     input_size = CalculateTensorSize(op_info.inputs(0), &found_unknown_shapes);",
          "2187:     input_size = data_size * dims.batch * dims.ix * dims.ky * dims.oy * dims.iz;",
          "2189:   node_costs->num_input_bytes_accessed = {input_size};",
          "2190:   const int64 output_size = CalculateOutputSize(op_info, &found_unknown_shapes);",
          "2191:   node_costs->num_output_bytes_accessed = {output_size};",
          "2192:   node_costs->max_memory = output_size;",
          "2193:   if (found_unknown_shapes) {",
          "2194:     node_costs->inaccurate = true;",
          "2195:     node_costs->num_nodes_with_unknown_shapes = 1;",
          "2196:   }",
          "2197:   return Status::OK();",
          "2200: Status OpLevelCostEstimator::PredictMaxPoolGrad(const OpContext& op_context,",
          "2201:                                                 NodeCosts* node_costs) const {",
          "2207:   if (op_info.inputs_size() < 3) {",
          "2208:     return errors::InvalidArgument(\"MaxPoolGrad op has invalid inputs: \",",
          "2209:                                    op_info.ShortDebugString());",
          "2210:   }",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "2099:     ops = dims.batch * dims.iz *",
          "2100:           (dims.ox * dims.oy * (dims.kx * dims.ky - 1) + dims.ix * dims.iy * 2);",
          "2101:   }",
          "2106:       CalculateTensorSize(op_info.inputs(0), &found_unknown_shapes);",
          "2108:       CalculateTensorSize(op_info.inputs(2), &found_unknown_shapes);",
          "2111:       CalculateTensorSize(op_info.inputs(0), &found_unknown_shapes);",
          "2119: }",
          "2127:   bool found_unknown_shapes = false;",
          "2128:   const auto& op_info = op_context.op_info;",
          "2141: }",
          "2144:   bool found_unknown_shapes = false;",
          "2145:   const auto& op_info = op_context.op_info;",
          "",
          "[Removed Lines]",
          "2105:   double total_input_size =",
          "2107:   total_input_size +=",
          "2110:   const double total_output_size =",
          "2113:   Costs costs = PredictOpCountBasedCost(ops, total_input_size,",
          "2114:                                         total_output_size, op_info);",
          "2115:   costs.inaccurate = found_unknown_shapes;",
          "2116:   costs.num_ops_with_unknown_shapes = found_unknown_shapes;",
          "2117:   costs.max_memory = total_output_size;",
          "2118:   return costs;",
          "2125: Costs OpLevelCostEstimator::PredictAssignVariableOps(",
          "2126:     const OpContext& op_context) const {",
          "2130:   if (op_info.inputs_size() != 2) return Costs::ZeroCosts(true);",
          "2131:   const double total_input_size =",
          "2132:       CalculateInputSize(op_info, &found_unknown_shapes);",
          "2133:   const double flops = op_info.op() == kAssignVariableOp",
          "2134:                            ? 0.0",
          "2135:                            : CalculateTensorElementCount(op_info.inputs(1),",
          "2136:                                                          &found_unknown_shapes);",
          "2137:   Costs costs = PredictOpCountBasedCost(flops, total_input_size, 0, op_info);",
          "2138:   costs.inaccurate = found_unknown_shapes;",
          "2139:   costs.num_ops_with_unknown_shapes = found_unknown_shapes;",
          "2140:   return costs;",
          "2143: Costs OpLevelCostEstimator::PredictAvgPool(const OpContext& op_context) const {",
          "",
          "[Added Lines]",
          "2229:   node_costs->num_compute_ops = ops;",
          "2233:   const int64 input0_size =",
          "2235:   const int64 input2_size =",
          "2237:   node_costs->num_input_bytes_accessed = {input0_size, 0, input2_size};",
          "2239:   const int64 output_size =",
          "2241:   node_costs->num_output_bytes_accessed = {output_size};",
          "2242:   node_costs->max_memory = output_size;",
          "2244:   if (found_unknown_shapes) {",
          "2245:     node_costs->inaccurate = true;",
          "2246:     node_costs->num_nodes_with_unknown_shapes = 1;",
          "2247:   }",
          "2248:   return Status::OK();",
          "2255: Status OpLevelCostEstimator::PredictAssignVariableOps(",
          "2256:     const OpContext& op_context, NodeCosts* node_costs) const {",
          "2260:   if (op_info.inputs_size() != 2) {",
          "2261:     return errors::InvalidArgument(\"AssignVariable op has invalid input: \",",
          "2262:                                    op_info.ShortDebugString());",
          "2263:   }",
          "2265:   const int64 ops = op_info.op() == kAssignVariableOp",
          "2266:                         ? 0",
          "2267:                         : CalculateTensorElementCount(op_info.inputs(1),",
          "2268:                                                       &found_unknown_shapes);",
          "2269:   node_costs->num_compute_ops = ops;",
          "2270:   const int64 input_size = CalculateInputSize(op_info, &found_unknown_shapes);",
          "2271:   node_costs->num_input_bytes_accessed = {input_size};",
          "2275:   node_costs->num_output_bytes_accessed = {0};",
          "2276:   if (found_unknown_shapes) {",
          "2277:     node_costs->inaccurate = true;",
          "2278:     node_costs->num_nodes_with_unknown_shapes = 1;",
          "2279:   }",
          "2280:   return Status::OK();",
          "2283: Status OpLevelCostEstimator::PredictAvgPool(const OpContext& op_context,",
          "2284:                                             NodeCosts* node_costs) const {",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "2151:   int64 ops = dims.batch * dims.ox * dims.oy * dims.oz * dims.kx * dims.ky;",
          "2154:   if (dims.ky >= dims.sy) {",
          "2157:   } else {  // dims.ky < dims.sy",
          "2161:     const auto data_size = DataTypeSize(BaseType(op_info.inputs(0).dtype()));",
          "2164:   }",
          "2174: }",
          "2178:   bool found_unknown_shapes = false;",
          "2179:   const auto& op_info = op_context.op_info;",
          "",
          "[Removed Lines]",
          "2153:   double total_input_size = 0;",
          "2155:     total_input_size =",
          "2156:         CalculateTensorSize(op_info.inputs(0), &found_unknown_shapes);",
          "2162:     total_input_size =",
          "2163:         data_size * dims.batch * dims.ix * dims.ky * dims.oy * dims.iz;",
          "2165:   const double total_output_size =",
          "2166:       CalculateOutputSize(op_info, &found_unknown_shapes);",
          "2168:   Costs costs = PredictOpCountBasedCost(ops, total_input_size,",
          "2169:                                         total_output_size, op_info);",
          "2170:   costs.inaccurate = found_unknown_shapes;",
          "2171:   costs.num_ops_with_unknown_shapes = found_unknown_shapes;",
          "2172:   costs.max_memory = total_output_size;",
          "2173:   return costs;",
          "2176: Costs OpLevelCostEstimator::PredictAvgPoolGrad(",
          "2177:     const OpContext& op_context) const {",
          "",
          "[Added Lines]",
          "2293:   node_costs->num_compute_ops = ops;",
          "2295:   int64 input_size;",
          "2297:     input_size = CalculateTensorSize(op_info.inputs(0), &found_unknown_shapes);",
          "2303:     input_size = data_size * dims.batch * dims.ix * dims.ky * dims.oy * dims.iz;",
          "2305:   node_costs->num_input_bytes_accessed = {input_size};",
          "2307:   const int64 output_size = CalculateOutputSize(op_info, &found_unknown_shapes);",
          "2308:   node_costs->num_output_bytes_accessed = {output_size};",
          "2309:   node_costs->max_memory = output_size;",
          "2311:   if (found_unknown_shapes) {",
          "2312:     node_costs->inaccurate = true;",
          "2313:     node_costs->num_nodes_with_unknown_shapes = 1;",
          "2314:   }",
          "2315:   return Status::OK();",
          "2318: Status OpLevelCostEstimator::PredictAvgPoolGrad(const OpContext& op_context,",
          "2319:                                                 NodeCosts* node_costs) const {",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "2212:     ops = dims.batch * dims.iz *",
          "2213:           (dims.ix * dims.iy + dims.ox * dims.oy * (dims.kx * dims.ky + 1));",
          "2214:   }",
          "2227: }",
          "2231:   bool found_unknown_shapes = false;",
          "2232:   const auto& op_info = op_context.op_info;",
          "",
          "[Removed Lines]",
          "2216:   const double total_input_size =",
          "2217:       CalculateInputSize(op_info, &found_unknown_shapes);",
          "2218:   const double total_output_size =",
          "2219:       CalculateOutputSize(op_info, &found_unknown_shapes);",
          "2221:   Costs costs = PredictOpCountBasedCost(ops, total_input_size,",
          "2222:                                         total_output_size, op_info);",
          "2223:   costs.inaccurate = found_unknown_shapes;",
          "2224:   costs.num_ops_with_unknown_shapes = found_unknown_shapes;",
          "2225:   costs.max_memory = total_output_size;",
          "2226:   return costs;",
          "2229: Costs OpLevelCostEstimator::PredictFusedBatchNorm(",
          "2230:     const OpContext& op_context) const {",
          "",
          "[Added Lines]",
          "2357:   auto s = PredictDefaultNodeCosts(ops, op_context, &found_unknown_shapes,",
          "2358:                                    node_costs);",
          "2359:   node_costs->max_memory = node_costs->num_total_output_bytes();",
          "2360:   return s;",
          "2363: Status OpLevelCostEstimator::PredictFusedBatchNorm(",
          "2364:     const OpContext& op_context, NodeCosts* node_costs) const {",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "2247:   } else {",
          "2248:     ops = dims.batch * dims.ix * dims.iy * dims.iz * 2;",
          "2249:   }",
          "2252:       CalculateTensorSize(op_info.inputs(0), &found_unknown_shapes);",
          "2254:       CalculateTensorSize(op_info.inputs(1), &found_unknown_shapes);",
          "2258:   if (is_training) {",
          "2262:   } else {",
          "2265:   }",
          "2274: }",
          "2278:   bool found_unknown_shapes = false;",
          "2279:   const auto& op_info = op_context.op_info;",
          "",
          "[Removed Lines]",
          "2251:   const double size_nhwc =",
          "2253:   const double size_c =",
          "2255:   double total_input_size = 0.0;",
          "2256:   double total_internal_read_size = 0.0;",
          "2257:   double total_output_size = 0.0;",
          "2259:     total_input_size = size_nhwc + size_c * 2;",
          "2260:     total_output_size = size_nhwc + size_c * 4;",
          "2261:     total_internal_read_size = size_nhwc;",
          "2263:     total_input_size = size_nhwc + size_c * 4;",
          "2264:     total_output_size = size_nhwc;",
          "2267:   Costs costs =",
          "2268:       PredictOpCountBasedCost(ops, total_input_size + total_internal_read_size,",
          "2269:                               total_output_size, op_info);",
          "2270:   costs.inaccurate = found_unknown_shapes;",
          "2271:   costs.num_ops_with_unknown_shapes = found_unknown_shapes;",
          "2272:   costs.max_memory = total_output_size;",
          "2273:   return costs;",
          "2276: Costs OpLevelCostEstimator::PredictFusedBatchNormGrad(",
          "2277:     const OpContext& op_context) const {",
          "",
          "[Added Lines]",
          "2384:   node_costs->num_compute_ops = ops;",
          "2386:   const int64 size_nhwc =",
          "2388:   const int64 size_c =",
          "2391:     node_costs->num_input_bytes_accessed = {size_nhwc, size_c, size_c};",
          "2392:     node_costs->num_output_bytes_accessed = {size_nhwc, size_c, size_c, size_c,",
          "2393:                                              size_c};",
          "2398:     node_costs->internal_read_bytes = size_nhwc;",
          "2400:     node_costs->num_input_bytes_accessed = {size_nhwc, size_c, size_c, size_c,",
          "2401:                                             size_c};",
          "2402:     node_costs->num_output_bytes_accessed = {size_nhwc};",
          "2404:   node_costs->max_memory = node_costs->num_total_output_bytes();",
          "2406:   if (found_unknown_shapes) {",
          "2407:     node_costs->inaccurate = true;",
          "2408:     node_costs->num_nodes_with_unknown_shapes = 1;",
          "2409:   }",
          "2410:   return Status::OK();",
          "2413: Status OpLevelCostEstimator::PredictFusedBatchNormGrad(",
          "2414:     const OpContext& op_context, NodeCosts* node_costs) const {",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "2289:   const auto rsqrt_cost = Eigen::internal::functor_traits<",
          "2290:       Eigen::internal::scalar_rsqrt_op<float>>::Cost;",
          "2291:   ops = dims.iz * (dims.batch * dims.ix * dims.iy * 11 + 5 + rsqrt_cost);",
          "2294:       CalculateTensorSize(op_info.inputs(1), &found_unknown_shapes);",
          "2296:       CalculateTensorSize(op_info.inputs(2), &found_unknown_shapes);",
          "2308: }",
          "2311:   const auto& op_info = op_context.op_info;",
          "2312:   bool found_unknown_shapes = false;",
          "",
          "[Removed Lines]",
          "2293:   const double size_nhwc =",
          "2295:   const double size_c =",
          "2297:   double total_input_size = size_nhwc * 2 + size_c * 2;",
          "2298:   double total_internal_read_size = size_nhwc;",
          "2299:   double total_output_size = size_nhwc * 1 + size_c * 2;",
          "2301:   Costs costs =",
          "2302:       PredictOpCountBasedCost(ops, total_input_size + total_internal_read_size,",
          "2303:                               total_output_size, op_info);",
          "2304:   costs.inaccurate = found_unknown_shapes;",
          "2305:   costs.num_ops_with_unknown_shapes = found_unknown_shapes;",
          "2306:   costs.max_memory = total_output_size;",
          "2307:   return costs;",
          "2310: Costs OpLevelCostEstimator::PredictNaryOp(const OpContext& op_context) const {",
          "",
          "[Added Lines]",
          "2429:   node_costs->num_compute_ops = ops;",
          "2431:   const int64 size_nhwc =",
          "2433:   const int64 size_c =",
          "2437:   node_costs->num_input_bytes_accessed = {size_nhwc, size_nhwc, size_c, size_c};",
          "2438:   node_costs->num_output_bytes_accessed = {size_nhwc, size_c, size_c};",
          "2440:   node_costs->internal_read_bytes = size_nhwc;",
          "2441:   node_costs->max_memory = node_costs->num_total_output_bytes();",
          "2443:   if (found_unknown_shapes) {",
          "2444:     node_costs->inaccurate = true;",
          "2445:     node_costs->num_nodes_with_unknown_shapes = 1;",
          "2446:   }",
          "2447:   return Status::OK();",
          "2450: Status OpLevelCostEstimator::PredictNaryOp(const OpContext& op_context,",
          "2451:                                            NodeCosts* node_costs) const {",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "2332:   const auto sum_cost = Eigen::internal::functor_traits<",
          "2333:       Eigen::internal::scalar_sum_op<float>>::Cost;",
          "2340: }",
          "2344:   bool found_unknown_shapes = false;",
          "2345:   const int64 logits_size = CalculateTensorElementCount(",
          "2346:       op_context.op_info.inputs(0), &found_unknown_shapes);",
          "2350: #define EIGEN_COST(X) Eigen::internal::functor_traits<Eigen::internal::X>::Cost",
          "",
          "[Removed Lines]",
          "2334:   Costs costs = PredictOpCountBasedCost(op_count * sum_cost, op_info);",
          "2335:   if (found_unknown_shapes) {",
          "2336:     costs.inaccurate = true;",
          "2337:   }",
          "2338:   costs.num_ops_with_unknown_shapes = found_unknown_shapes;",
          "2339:   return costs;",
          "2343: Costs OpLevelCostEstimator::PredictSoftmax(const OpContext& op_context) const {",
          "2347:   TensorShapeProto logits_shape = MaybeGetMinimumShape(",
          "2348:       op_context.op_info.inputs(0).shape(), 2, &found_unknown_shapes);",
          "",
          "[Added Lines]",
          "2475:   return PredictDefaultNodeCosts(op_count * sum_cost, op_context,",
          "2476:                                  &found_unknown_shapes, node_costs);",
          "2480: Status OpLevelCostEstimator::PredictSoftmax(const OpContext& op_context,",
          "2481:                                             NodeCosts* node_costs) const {",
          "2486:   TensorShapeProto logits_shape = op_context.op_info.inputs(0).shape();",
          "2487:   if (logits_shape.unknown_rank() || logits_shape.dim_size() == 0) {",
          "2488:     return errors::InvalidArgument(\"Softmax op has invalid input: \",",
          "2489:                                    op_context.op_info.ShortDebugString());",
          "2490:   }",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "2359:       EIGEN_COST(scalar_inverse_op<float>) * logits_shape.dim(0).size();",
          "2361: #undef EIGEN_COST",
          "2364: }",
          "2368:   bool found_unknown_shapes = false;",
          "2370:   if (op_context.op_info.outputs().empty() ||",
          "2371:       op_context.op_info.inputs().empty()) {",
          "2373:   }",
          "2379:   const int64 output_elements = CalculateTensorElementCount(",
          "2380:       op_context.op_info.outputs(0), &found_unknown_shapes);",
          "",
          "[Removed Lines]",
          "2363:   return PredictOpCountBasedCost(ops, op_context.op_info);",
          "2366: Costs OpLevelCostEstimator::PredictResizeBilinear(",
          "2367:     const OpContext& op_context) const {",
          "2372:     return Costs::ZeroCosts(/*inaccurate=*/true);",
          "2375:   const int64 input_size =",
          "2376:       CalculateTensorSize(op_context.op_info.inputs(0), &found_unknown_shapes);",
          "2377:   const int64 output_size =",
          "2378:       CalculateTensorSize(op_context.op_info.outputs(0), &found_unknown_shapes);",
          "",
          "[Added Lines]",
          "2504:   return PredictDefaultNodeCosts(ops, op_context, &found_unknown_shapes,",
          "2505:                                  node_costs);",
          "2508: Status OpLevelCostEstimator::PredictResizeBilinear(",
          "2509:     const OpContext& op_context, NodeCosts* node_costs) const {",
          "2514:     return errors::InvalidArgument(",
          "2515:         \"ResizeBilinear op has invalid input / output \",",
          "2516:         op_context.op_info.ShortDebugString());",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "2384:   bool use_half_pixel_centers = false;",
          "2385:   if (half_pixel_centers == op_context.op_info.attr().end()) {",
          "2386:     LOG(WARNING) << \"half_pixel_centers attr not set for ResizeBilinear.\";",
          "2388:   } else {",
          "2389:     use_half_pixel_centers = half_pixel_centers->second.b();",
          "2390:   }",
          "",
          "[Removed Lines]",
          "2387:     return PredictCostOfAnUnknownOp(op_context);",
          "",
          "[Added Lines]",
          "2527:     return PredictCostOfAnUnknownOp(op_context, node_costs);",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "2455:   ops += (add_cost * 3 + sub_cost_float * 3 + mul_cost * 3) * output_elements;",
          "2459: }",
          "2463:   bool found_unknown_shapes = false;",
          "2465:   const auto method = op_context.op_info.attr().find(\"method\");",
          "",
          "[Removed Lines]",
          "2457:   return PredictOpCountBasedCost(ops, input_size, output_size,",
          "2458:                                  op_context.op_info);",
          "2461: Costs OpLevelCostEstimator::PredictCropAndResize(",
          "2462:     const OpContext& op_context) const {",
          "",
          "[Added Lines]",
          "2597:   return PredictDefaultNodeCosts(ops, op_context, &found_unknown_shapes,",
          "2598:                                  node_costs);",
          "2601: Status OpLevelCostEstimator::PredictCropAndResize(const OpContext& op_context,",
          "2602:                                                   NodeCosts* node_costs) const {",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "2472:   } else {",
          "2473:     LOG(WARNING) << \"method attr in CropAndResize invalid; expected bilinear \"",
          "2474:                     \"or nearest.\";",
          "2476:   }",
          "2483:   const int64 num_boxes = op_context.op_info.inputs(1).shape().dim(0).size();",
          "2484:   const auto crop_shape = MaybeGetMinimumShape(",
          "2485:       op_context.op_info.outputs(0).shape(), 4, &found_unknown_shapes);",
          "",
          "[Removed Lines]",
          "2475:     return PredictCostOfAnUnknownOp(op_context);",
          "2478:   const int input_size =",
          "2479:       CalculateTensorSize(op_context.op_info.inputs(0), &found_unknown_shapes);",
          "2480:   const int output_size =",
          "2481:       CalculateOutputSize(op_context.op_info, &found_unknown_shapes);",
          "",
          "[Added Lines]",
          "2615:     return PredictCostOfAnUnknownOp(op_context, node_costs);",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "2530:     ops += cast_to_float_cost * output_elements;",
          "2531:   }",
          "2535: }",
          "2537: }  // end namespace grappler",
          "",
          "[Removed Lines]",
          "2533:   return PredictOpCountBasedCost(ops, input_size, output_size,",
          "2534:                                  op_context.op_info);",
          "",
          "[Added Lines]",
          "2667:   return PredictDefaultNodeCosts(ops, op_context, &found_unknown_shapes,",
          "2668:                                  node_costs);",
          "",
          "---------------"
        ],
        "tensorflow/core/grappler/costs/op_level_cost_estimator.h||tensorflow/core/grappler/costs/op_level_cost_estimator.h": [
          "File: tensorflow/core/grappler/costs/op_level_cost_estimator.h -> tensorflow/core/grappler/costs/op_level_cost_estimator.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: #ifndef TENSORFLOW_CORE_GRAPPLER_COSTS_OP_LEVEL_COST_ESTIMATOR_H_",
          "17: #define TENSORFLOW_CORE_GRAPPLER_COSTS_OP_LEVEL_COST_ESTIMATOR_H_",
          "19: #include \"tensorflow/core/grappler/costs/cost_estimator.h\"",
          "20: #include \"tensorflow/core/grappler/costs/op_context.h\"",
          "21: #include \"tensorflow/core/grappler/costs/op_performance_data.pb.h\"",
          "22: #include \"tensorflow/core/util/padding.h\"",
          "24: namespace tensorflow {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: #include <numeric>",
          "24: #include \"tensorflow/core/lib/core/status.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "29: TensorShapeProto MaybeGetMinimumShape(const TensorShapeProto& original_shape,",
          "30:                                       int rank, bool* found_unknown_shapes);",
          "32: class OpLevelCostEstimator {",
          "33:  public:",
          "34:   OpLevelCostEstimator();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "36: struct NodeCosts {",
          "41:   bool minimum_cost_op = false;",
          "44:   int64 num_compute_ops = 0;",
          "48:   std::vector<int64> num_input_bytes_accessed;   // ordered by input tensors.",
          "49:   std::vector<int64> num_output_bytes_accessed;  // ordered by output ports.",
          "50:   int64 internal_read_bytes = 0;",
          "51:   int64 internal_write_bytes = 0;",
          "54:   int64 num_total_input_bytes() {",
          "55:     return std::accumulate(num_input_bytes_accessed.begin(),",
          "56:                            num_input_bytes_accessed.end(), 0LL);",
          "57:   }",
          "58:   int64 num_total_read_bytes() {",
          "59:     return num_total_input_bytes() + internal_read_bytes;",
          "60:   }",
          "61:   int64 num_total_output_bytes() {",
          "62:     return std::accumulate(num_output_bytes_accessed.begin(),",
          "63:                            num_output_bytes_accessed.end(), 0LL);",
          "64:   }",
          "65:   int64 num_total_write_bytes() {",
          "66:     return num_total_output_bytes() + internal_write_bytes;",
          "67:   }",
          "68:   int64 num_bytes_accessed() {",
          "69:     return num_total_read_bytes() + num_total_write_bytes();",
          "70:   }",
          "73:   int64 max_memory = 0;",
          "74:   int64 persistent_memory = 0;",
          "75:   int64 temporary_memory = 0;",
          "78:   int64 num_nodes = 1;",
          "79:   int64 num_nodes_with_unknown_shapes = 0;",
          "80:   int64 num_nodes_with_unknown_op_type = 0;",
          "81:   int64 num_nodes_with_pure_memory_op = 0;",
          "82:   bool inaccurate = false;",
          "87:   bool has_costs = false;",
          "88:   Costs costs;",
          "89: };",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "40:   virtual DeviceInfo GetDeviceInfo(const DeviceProperties& device) const;",
          "42:  protected:",
          "48:   Costs PredictOpCountBasedCost(double operations, const OpInfo& op_info) const;",
          "",
          "[Removed Lines]",
          "44:   Costs PredictCostOfAnUnknownOp(const OpContext& op_context) const;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "54:                                 double output_io_bytes,",
          "55:                                 const OpInfo& op_info) const;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "117:   Status PredictNodeCosts(const OpContext& op_context,",
          "118:                           NodeCosts* node_costs) const;",
          "121:   Status PredictCostOfAnUnknownOp(const OpContext& op_context,",
          "122:                                   NodeCosts* node_costs) const;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "67:   Costs PredictNaryOp(const OpContext& op_context) const;",
          "68:   Costs PredictConv2D(const OpContext& op_context) const;",
          "69:   Costs PredictCwiseOp(const OpContext& op_context) const;",
          "70:   Costs PredictConv2DBackpropInput(const OpContext& op_context) const;",
          "71:   Costs PredictConv2DBackpropFilter(const OpContext& op_context) const;",
          "72:   Costs PredictFusedConv2DBiasActivation(const OpContext& op_context) const;",
          "73:   Costs PredictMatMul(const OpContext& op_context) const;",
          "74:   Costs PredictSparseTensorDenseMatMul(const OpContext& op_context) const;",
          "75:   Costs PredictNoOp(const OpContext& op_context) const;",
          "76:   Costs PredictIdentity(const OpContext& op_context) const;",
          "77:   Costs PredictVariable(const OpContext& op_context) const;",
          "78:   Costs PredictBatchMatMul(const OpContext& op_context) const;",
          "79:   Costs PredictMetadata(const OpContext& op_context) const;",
          "80:   Costs PredictGatherOrSlice(const OpContext& op_context) const;",
          "81:   Costs PredictScatter(const OpContext& op_context) const;",
          "82:   Costs PredictMaxPool(const OpContext& op_context) const;",
          "83:   Costs PredictMaxPoolGrad(const OpContext& op_context) const;",
          "84:   Costs PredictAvgPool(const OpContext& op_context) const;",
          "85:   Costs PredictAvgPoolGrad(const OpContext& op_context) const;",
          "86:   Costs PredictFusedBatchNorm(const OpContext& op_context) const;",
          "87:   Costs PredictFusedBatchNormGrad(const OpContext& op_context) const;",
          "88:   Costs PredictEinsum(const OpContext& op_context) const;",
          "89:   Costs PredictAssignVariableOps(const OpContext& op_context) const;",
          "90:   Costs PredictPureMemoryOp(const OpContext& op_context) const;",
          "91:   Costs PredictSoftmax(const OpContext& op_context) const;",
          "92:   Costs PredictResizeBilinear(const OpContext& op_context) const;",
          "93:   Costs PredictCropAndResize(const OpContext& op_context) const;",
          "96:   Costs PredictFusedOp(const OpContext& op_context,",
          "97:                        const std::vector<OpContext>& fused_op_contexts) const;",
          "",
          "[Added Lines]",
          "134:   Status PredictNaryOp(const OpContext& op_context,",
          "135:                        NodeCosts* node_costs) const;",
          "136:   Status PredictConv2D(const OpContext& op_context,",
          "137:                        NodeCosts* node_costs) const;",
          "138:   Status PredictCwiseOp(const OpContext& op_context,",
          "139:                         NodeCosts* node_costs) const;",
          "140:   Status PredictConv2DBackpropInput(const OpContext& op_context,",
          "141:                                     NodeCosts* node_costs) const;",
          "142:   Status PredictConv2DBackpropFilter(const OpContext& op_context,",
          "143:                                      NodeCosts* node_costs) const;",
          "144:   Status PredictFusedConv2DBiasActivation(const OpContext& op_context,",
          "145:                                           NodeCosts* node_costs) const;",
          "146:   Status PredictMatMul(const OpContext& op_context,",
          "147:                        NodeCosts* node_costs) const;",
          "148:   Status PredictSparseTensorDenseMatMul(const OpContext& op_context,",
          "149:                                         NodeCosts* node_costs) const;",
          "150:   Status PredictNoOp(const OpContext& op_context, NodeCosts* node_costs) const;",
          "151:   Status PredictIdentity(const OpContext& op_context,",
          "152:                          NodeCosts* node_costs) const;",
          "153:   Status PredictVariable(const OpContext& op_context,",
          "154:                          NodeCosts* node_costs) const;",
          "155:   Status PredictBatchMatMul(const OpContext& op_context,",
          "156:                             NodeCosts* node_costs) const;",
          "157:   Status PredictMetadata(const OpContext& op_context,",
          "158:                          NodeCosts* node_costs) const;",
          "159:   Status PredictGatherOrSlice(const OpContext& op_context,",
          "160:                               NodeCosts* node_costs) const;",
          "161:   Status PredictScatter(const OpContext& op_context,",
          "162:                         NodeCosts* node_costs) const;",
          "163:   Status PredictMaxPool(const OpContext& op_context,",
          "164:                         NodeCosts* node_costs) const;",
          "165:   Status PredictMaxPoolGrad(const OpContext& op_context,",
          "166:                             NodeCosts* node_costs) const;",
          "167:   Status PredictAvgPool(const OpContext& op_context,",
          "168:                         NodeCosts* node_costs) const;",
          "169:   Status PredictAvgPoolGrad(const OpContext& op_context,",
          "170:                             NodeCosts* node_costs) const;",
          "171:   Status PredictFusedBatchNorm(const OpContext& op_context,",
          "172:                                NodeCosts* node_costs) const;",
          "173:   Status PredictFusedBatchNormGrad(const OpContext& op_context,",
          "174:                                    NodeCosts* node_costs) const;",
          "175:   Status PredictEinsum(const OpContext& op_context,",
          "176:                        NodeCosts* node_costs) const;",
          "177:   Status PredictAssignVariableOps(const OpContext& op_context,",
          "178:                                   NodeCosts* node_costs) const;",
          "179:   Status PredictPureMemoryOp(const OpContext& op_context,",
          "180:                              NodeCosts* node_costs) const;",
          "181:   Status PredictSoftmax(const OpContext& op_context,",
          "182:                         NodeCosts* node_costs) const;",
          "183:   Status PredictResizeBilinear(const OpContext& op_context,",
          "184:                                NodeCosts* node_costs) const;",
          "185:   Status PredictCropAndResize(const OpContext& op_context,",
          "186:                               NodeCosts* node_costs) const;",
          "189:   Status PredictFusedOp(const OpContext& op_context,",
          "190:                         const std::vector<OpContext>& fused_op_contexts,",
          "191:                         NodeCosts* node_costs) const;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "176:   static int64 CalculateInputSize(const OpInfo& op_info,",
          "177:                                   bool* found_unknown_shapes);",
          "181:   static int64 CalculateOutputSize(const OpInfo& op_info,",
          "182:                                    bool* found_unknown_shapes);",
          "185:   static ConvolutionDimensions ConvolutionDimensionsFromInputs(",
          "186:       const TensorShapeProto& original_image_shape,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "274:   static std::vector<int64> CalculateInputTensorSize(",
          "275:       const OpInfo& op_info, bool* found_unknown_shapes);",
          "283:   static std::vector<int64> CalculateOutputTensorSize(",
          "284:       const OpInfo& op_info, bool* found_unknown_shapes);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "203:   static OpInfo::TensorProperties DescribeTensor(",
          "204:       DataType type, const std::vector<int64>& dims);",
          "206:  protected:",
          "207:   std::map<string, int> elementwise_ops_;",
          "209:   std::map<string, CostImpl> device_cost_impl_;",
          "",
          "[Removed Lines]",
          "208:   typedef std::function<Costs(const OpContext& op_context)> CostImpl;",
          "",
          "[Added Lines]",
          "309:   static Status PredictDefaultNodeCosts(const int64 num_compute_ops,",
          "310:                                         const OpContext& op_context,",
          "311:                                         bool* found_unknown_shapes,",
          "312:                                         NodeCosts* node_costs);",
          "316:   typedef std::function<Status(const OpContext& op_context, NodeCosts*)>",
          "317:       CostImpl;",
          "",
          "---------------"
        ],
        "tensorflow/core/grappler/costs/op_level_cost_estimator_test.cc||tensorflow/core/grappler/costs/op_level_cost_estimator_test.cc": [
          "File: tensorflow/core/grappler/costs/op_level_cost_estimator_test.cc -> tensorflow/core/grappler/costs/op_level_cost_estimator_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "894:       16, 19, 19, 48, 48, 5, 5, 19, 19, 256, /* has_side_input = */ false,",
          "895:       \"NCHW\", \"HWIO\"));",
          "896:   EXPECT_EQ(Costs::Duration(825345), cost.memory_time);",
          "899:   EXPECT_EQ(cost.num_ops_total, 1);",
          "900:   EXPECT_FALSE(cost.inaccurate);",
          "901:   EXPECT_EQ(cost.num_ops_with_unknown_shapes, 0);",
          "",
          "[Removed Lines]",
          "897:   EXPECT_EQ(Costs::Duration(355321038), cost.compute_time);",
          "898:   EXPECT_EQ(Costs::Duration(356146383), cost.execution_time);",
          "",
          "[Added Lines]",
          "897:   EXPECT_EQ(Costs::Duration(355321037), cost.compute_time);",
          "898:   EXPECT_EQ(Costs::Duration(356146382), cost.execution_time);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "908:       16, 19, 19, 48, 48, 5, 5, 19, 19, 256, /* has_side_input = */ true,",
          "909:       \"NCHW\", \"HWIO\"));",
          "910:   EXPECT_EQ(Costs::Duration(1416808), cost.memory_time);",
          "913:   EXPECT_EQ(cost.num_ops_total, 1);",
          "914:   EXPECT_FALSE(cost.inaccurate);",
          "915:   EXPECT_EQ(cost.num_ops_with_unknown_shapes, 0);",
          "",
          "[Removed Lines]",
          "911:   EXPECT_EQ(Costs::Duration(355616770), cost.compute_time);",
          "912:   EXPECT_EQ(Costs::Duration(357033578), cost.execution_time);",
          "",
          "[Added Lines]",
          "911:   EXPECT_EQ(Costs::Duration(355616768), cost.compute_time);",
          "912:   EXPECT_EQ(Costs::Duration(357033576), cost.execution_time);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "922:       16, 19, 19, 48, 48, 5, 5, 19, 19, 256, /* has_side_input = */ true,",
          "923:       \"NCHW\", \"OIHW\"));",
          "924:   EXPECT_EQ(Costs::Duration(1416808), cost.memory_time);",
          "927:   EXPECT_EQ(cost.num_ops_total, 1);",
          "928:   EXPECT_FALSE(cost.inaccurate);",
          "929:   EXPECT_EQ(cost.num_ops_with_unknown_shapes, 0);",
          "",
          "[Removed Lines]",
          "925:   EXPECT_EQ(Costs::Duration(355616770), cost.compute_time);",
          "926:   EXPECT_EQ(Costs::Duration(357033578), cost.execution_time);",
          "",
          "[Added Lines]",
          "925:   EXPECT_EQ(Costs::Duration(355616768), cost.compute_time);",
          "926:   EXPECT_EQ(Costs::Duration(357033576), cost.execution_time);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "936:       16, 19, 19, 48, 48, 5, 5, 19, 19, 256, /* has_side_input = */ true,",
          "937:       \"NHWC\", \"HWIO\"));",
          "938:   EXPECT_EQ(Costs::Duration(1416808), cost.memory_time);",
          "941:   EXPECT_EQ(cost.num_ops_total, 1);",
          "942:   EXPECT_FALSE(cost.inaccurate);",
          "943:   EXPECT_EQ(cost.num_ops_with_unknown_shapes, 0);",
          "",
          "[Removed Lines]",
          "939:   EXPECT_EQ(Costs::Duration(355616770), cost.compute_time);",
          "940:   EXPECT_EQ(Costs::Duration(357033578), cost.execution_time);",
          "",
          "[Added Lines]",
          "939:   EXPECT_EQ(Costs::Duration(355616768), cost.compute_time);",
          "940:   EXPECT_EQ(Costs::Duration(357033576), cost.execution_time);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "950:       16, 19, 19, 48, 48, 5, 5, 19, 19, 256, /* has_side_input = */ true,",
          "951:       \"NHWC\", \"OIHW\"));",
          "952:   EXPECT_EQ(Costs::Duration(1416808), cost.memory_time);",
          "955:   EXPECT_EQ(cost.num_ops_total, 1);",
          "956:   EXPECT_FALSE(cost.inaccurate);",
          "957:   EXPECT_EQ(cost.num_ops_with_unknown_shapes, 0);",
          "",
          "[Removed Lines]",
          "953:   EXPECT_EQ(Costs::Duration(355616770), cost.compute_time);",
          "954:   EXPECT_EQ(Costs::Duration(357033578), cost.execution_time);",
          "",
          "[Added Lines]",
          "953:   EXPECT_EQ(Costs::Duration(355616768), cost.compute_time);",
          "954:   EXPECT_EQ(Costs::Duration(357033576), cost.execution_time);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "964:       16, 19, 19, 48, 48, 5, 5, 19, 19, 256, /* has_side_input = */ true,",
          "965:       \"NCHW_VECT_C\", \"OIHW\"));",
          "966:   EXPECT_EQ(Costs::Duration(1416808), cost.memory_time);",
          "969:   EXPECT_EQ(cost.num_ops_total, 1);",
          "970:   EXPECT_FALSE(cost.inaccurate);",
          "971:   EXPECT_EQ(cost.num_ops_with_unknown_shapes, 0);",
          "",
          "[Removed Lines]",
          "967:   EXPECT_EQ(Costs::Duration(355616770), cost.compute_time);",
          "968:   EXPECT_EQ(Costs::Duration(357033578), cost.execution_time);",
          "",
          "[Added Lines]",
          "967:   EXPECT_EQ(Costs::Duration(355616768), cost.compute_time);",
          "968:   EXPECT_EQ(Costs::Duration(357033576), cost.execution_time);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "978:       16, 19, 19, 48, 48, 5, 5, 19, 19, 256, /* has_side_input = */ true,",
          "979:       \"NCHW\", \"OIHW_VECT_I\"));",
          "980:   EXPECT_EQ(Costs::Duration(1416808), cost.memory_time);",
          "983:   EXPECT_EQ(cost.num_ops_total, 1);",
          "984:   EXPECT_FALSE(cost.inaccurate);",
          "985:   EXPECT_EQ(cost.num_ops_with_unknown_shapes, 0);",
          "",
          "[Removed Lines]",
          "981:   EXPECT_EQ(Costs::Duration(355616770), cost.compute_time);",
          "982:   EXPECT_EQ(Costs::Duration(357033578), cost.execution_time);",
          "",
          "[Added Lines]",
          "981:   EXPECT_EQ(Costs::Duration(355616768), cost.compute_time);",
          "982:   EXPECT_EQ(Costs::Duration(357033576), cost.execution_time);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "993:       16, 19, 19, 48, 48, 5, 5, 19, 19, 256, /* has_side_input = */ true,",
          "994:       \"NCHW_VECT_C\", \"OIHW_VECT_I\"));",
          "995:   EXPECT_EQ(Costs::Duration(1416808), cost.memory_time);",
          "998:   EXPECT_EQ(cost.num_ops_total, 1);",
          "999:   EXPECT_FALSE(cost.inaccurate);",
          "1000:   EXPECT_EQ(cost.num_ops_with_unknown_shapes, 0);",
          "",
          "[Removed Lines]",
          "996:   EXPECT_EQ(Costs::Duration(355616770), cost.compute_time);",
          "997:   EXPECT_EQ(Costs::Duration(357033578), cost.execution_time);",
          "",
          "[Added Lines]",
          "996:   EXPECT_EQ(Costs::Duration(355616768), cost.compute_time);",
          "997:   EXPECT_EQ(Costs::Duration(357033576), cost.execution_time);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2255:   DescribeTensor4D(kNumBoxes, kOutputImageDim, kOutputImageDim, kChannelSize,",
          "2256:                    op_context.op_info.add_outputs());",
          "2258:   const int kExpectedMemoryTime =",
          "2262:   {",
          "",
          "[Removed Lines]",
          "2259:       (kImageDim * kImageDim + kNumBoxes * kOutputImageDim * kOutputImageDim) *",
          "2260:       4;",
          "",
          "[Added Lines]",
          "2261:       (kImageDim * kImageDim * 4 +  // input image in float.",
          "2262:        kNumBoxes * 4 * 8 / 10 +     // boxes (kNumBoxes x 4) in int64.",
          "2263:        kNumBoxes * kOutputImageDim * kOutputImageDim * 4);  // output in float.",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "809753688a596330e46d09869be30a63f43a3bd8",
      "candidate_info": {
        "commit_hash": "809753688a596330e46d09869be30a63f43a3bd8",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/809753688a596330e46d09869be30a63f43a3bd8",
        "files": [
          "tensorflow/core/grappler/costs/BUILD",
          "tensorflow/core/grappler/costs/op_level_cost_estimator.cc",
          "tensorflow/core/grappler/costs/op_level_cost_estimator.h",
          "tensorflow/core/grappler/costs/op_level_cost_estimator_test.cc"
        ],
        "message": "Internal change\n\nPiperOrigin-RevId: 411896058\nChange-Id: Ia031058247e3cf382957a6662d3f9e1cbb481ca2",
        "before_after_code_files": [
          "tensorflow/core/grappler/costs/op_level_cost_estimator.cc||tensorflow/core/grappler/costs/op_level_cost_estimator.cc",
          "tensorflow/core/grappler/costs/op_level_cost_estimator.h||tensorflow/core/grappler/costs/op_level_cost_estimator.h",
          "tensorflow/core/grappler/costs/op_level_cost_estimator_test.cc||tensorflow/core/grappler/costs/op_level_cost_estimator_test.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/grappler/costs/op_level_cost_estimator.cc||tensorflow/core/grappler/costs/op_level_cost_estimator.cc",
            "tensorflow/core/grappler/costs/op_level_cost_estimator.h||tensorflow/core/grappler/costs/op_level_cost_estimator.h",
            "tensorflow/core/grappler/costs/op_level_cost_estimator_test.cc||tensorflow/core/grappler/costs/op_level_cost_estimator_test.cc"
          ],
          "candidate": [
            "tensorflow/core/grappler/costs/op_level_cost_estimator.cc||tensorflow/core/grappler/costs/op_level_cost_estimator.cc",
            "tensorflow/core/grappler/costs/op_level_cost_estimator.h||tensorflow/core/grappler/costs/op_level_cost_estimator.h",
            "tensorflow/core/grappler/costs/op_level_cost_estimator_test.cc||tensorflow/core/grappler/costs/op_level_cost_estimator_test.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/grappler/costs/op_level_cost_estimator.cc||tensorflow/core/grappler/costs/op_level_cost_estimator.cc": [
          "File: tensorflow/core/grappler/costs/op_level_cost_estimator.cc -> tensorflow/core/grappler/costs/op_level_cost_estimator.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "2132: }",
          "2136: OpLevelCostEstimator::OpDimensionsFromInputs(",
          "2137:     const TensorShapeProto& original_image_shape, const OpInfo& op_info,",
          "2138:     bool* found_unknown_shapes) {",
          "",
          "[Removed Lines]",
          "2135: OpLevelCostEstimator::ConvolutionDimensions",
          "",
          "[Added Lines]",
          "2135: StatusOr<OpLevelCostEstimator::ConvolutionDimensions>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2169:   std::vector<int64_t> strides = GetStrides(op_info);",
          "2170:   int64_t sx = strides[x_index];",
          "2171:   int64_t sy = strides[y_index];",
          "2172:   const auto padding = GetPadding(op_info);",
          "2174:   int64_t ox = GetOutputSize(ix, kx, sx, padding);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2172:   if (sx == 0 || sy == 0) {",
          "2173:     return errors::InvalidArgument(",
          "2174:         \"Stride must be > 0 for Height and Width, but got (\", sy, \", \", sx,",
          "2175:         \")\");",
          "2176:   }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2185:   bool found_unknown_shapes = false;",
          "2186:   const auto& op_info = op_context.op_info;",
          "2192:   int per_output_ops = dims.kx * dims.ky == 1 ? 1 : dims.kx * dims.ky - 1;",
          "",
          "[Removed Lines]",
          "2188:   ConvolutionDimensions dims = OpDimensionsFromInputs(",
          "2189:       op_info.inputs(0).shape(), op_info, &found_unknown_shapes);",
          "",
          "[Added Lines]",
          "2193:   TF_ASSIGN_OR_RETURN(ConvolutionDimensions dims,",
          "2194:                       OpDimensionsFromInputs(op_info.inputs(0).shape(), op_info,",
          "2195:                                              &found_unknown_shapes));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2227:                                    op_info.ShortDebugString());",
          "2228:   }",
          "2233:   int64_t ops = 0;",
          "2234:   if (dims.kx == 1 && dims.ky == 1) {",
          "",
          "[Removed Lines]",
          "2230:   ConvolutionDimensions dims = OpDimensionsFromInputs(",
          "2231:       op_info.inputs(0).shape(), op_info, &found_unknown_shapes);",
          "",
          "[Added Lines]",
          "2236:   TF_ASSIGN_OR_RETURN(ConvolutionDimensions dims,",
          "2237:                       OpDimensionsFromInputs(op_info.inputs(0).shape(), op_info,",
          "2238:                                              &found_unknown_shapes));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2303:   bool found_unknown_shapes = false;",
          "2304:   const auto& op_info = op_context.op_info;",
          "2310:   int64_t ops = dims.batch * dims.ox * dims.oy * dims.oz * dims.kx * dims.ky;",
          "",
          "[Removed Lines]",
          "2306:   ConvolutionDimensions dims = OpDimensionsFromInputs(",
          "2307:       op_info.inputs(0).shape(), op_info, &found_unknown_shapes);",
          "",
          "[Added Lines]",
          "2313:   TF_ASSIGN_OR_RETURN(ConvolutionDimensions dims,",
          "2314:                       OpDimensionsFromInputs(op_info.inputs(0).shape(), op_info,",
          "2315:                                              &found_unknown_shapes));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2361:     found_unknown_shapes = true;",
          "2362:   }",
          "2367:   int64_t ops = 0;",
          "2368:   if (dims.kx <= dims.sx && dims.ky <= dims.sy) {",
          "",
          "[Removed Lines]",
          "2364:   ConvolutionDimensions dims =",
          "2365:       OpDimensionsFromInputs(x_shape, op_info, &found_unknown_shapes);",
          "",
          "[Added Lines]",
          "2372:   TF_ASSIGN_OR_RETURN(",
          "2373:       ConvolutionDimensions dims,",
          "2374:       OpDimensionsFromInputs(x_shape, op_info, &found_unknown_shapes));",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2393:   const bool is_training = IsTraining(op_info);",
          "2395:   int64_t ops = 0;",
          "",
          "[Removed Lines]",
          "2391:   ConvolutionDimensions dims = OpDimensionsFromInputs(",
          "2392:       op_info.inputs(0).shape(), op_info, &found_unknown_shapes);",
          "",
          "[Added Lines]",
          "2400:   TF_ASSIGN_OR_RETURN(ConvolutionDimensions dims,",
          "2401:                       OpDimensionsFromInputs(op_info.inputs(0).shape(), op_info,",
          "2402:                                              &found_unknown_shapes));",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2444:   int64_t ops = 0;",
          "2445:   const auto rsqrt_cost = Eigen::internal::functor_traits<",
          "",
          "[Removed Lines]",
          "2441:   ConvolutionDimensions dims = OpDimensionsFromInputs(",
          "2442:       op_info.inputs(1).shape(), op_info, &found_unknown_shapes);",
          "",
          "[Added Lines]",
          "2451:   TF_ASSIGN_OR_RETURN(ConvolutionDimensions dims,",
          "2452:                       OpDimensionsFromInputs(op_info.inputs(1).shape(), op_info,",
          "2453:                                              &found_unknown_shapes));",
          "",
          "---------------"
        ],
        "tensorflow/core/grappler/costs/op_level_cost_estimator.h||tensorflow/core/grappler/costs/op_level_cost_estimator.h": [
          "File: tensorflow/core/grappler/costs/op_level_cost_estimator.h -> tensorflow/core/grappler/costs/op_level_cost_estimator.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "290:       bool* found_unknown_shapes);",
          "294:       const TensorShapeProto& original_image_shape, const OpInfo& op_info,",
          "295:       bool* found_unknown_shapes);",
          "",
          "[Removed Lines]",
          "293:   static ConvolutionDimensions OpDimensionsFromInputs(",
          "",
          "[Added Lines]",
          "293:   static StatusOr<ConvolutionDimensions> OpDimensionsFromInputs(",
          "",
          "---------------"
        ],
        "tensorflow/core/grappler/costs/op_level_cost_estimator_test.cc||tensorflow/core/grappler/costs/op_level_cost_estimator_test.cc": [
          "File: tensorflow/core/grappler/costs/op_level_cost_estimator_test.cc -> tensorflow/core/grappler/costs/op_level_cost_estimator_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: #include \"tensorflow/core/framework/tensor_shape.h\"",
          "25: #include \"tensorflow/core/framework/tensor_shape.pb.h\"",
          "26: #include \"tensorflow/core/framework/types.h\"",
          "27: #include \"tensorflow/core/platform/test.h\"",
          "28: #include \"tensorflow/core/protobuf/device_properties.pb.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27: #include \"tensorflow/core/platform/status_matchers.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "558:     }",
          "560:     bool found_unknown_shapes;",
          "564:     Padding padding_enum;",
          "565:     if (padding == \"VALID\") {",
          "566:       padding_enum = Padding::VALID;",
          "",
          "[Removed Lines]",
          "561:     auto dims = OpLevelCostEstimator::OpDimensionsFromInputs(",
          "562:         op_context.op_info.inputs(0).shape(), op_context.op_info,",
          "563:         &found_unknown_shapes);",
          "",
          "[Added Lines]",
          "562:     TF_ASSERT_OK_AND_ASSIGN(",
          "563:         auto dims, OpLevelCostEstimator::OpDimensionsFromInputs(",
          "564:                        op_context.op_info.inputs(0).shape(), op_context.op_info,",
          "565:                        &found_unknown_shapes));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "581:     EXPECT_EQ(padding_enum, dims.padding);",
          "582:   }",
          "584:   OpLevelCostEstimator estimator_;",
          "585: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "586:   StatusOr<OpLevelCostEstimator::ConvolutionDimensions>",
          "587:   CallOpDimensionsFromInputs(const int n, const int h, const int w, const int c,",
          "588:                              const int kx, const int ky, const int sx,",
          "589:                              const int sy, const string& data_format,",
          "590:                              const string& padding) {",
          "591:     OpContext op_context;",
          "593:     const std::vector<int> x = {n, h, w, c};",
          "594:     const std::vector<int> ksize = {1, kx, ky, 1};",
          "595:     std::vector<int> strides;",
          "596:     if (data_format == \"NHWC\") {",
          "597:       strides = {1, sy, sx, 1};",
          "598:     } else {",
          "599:       strides = {1, 1, sy, sx};",
          "600:     }",
          "602:     auto& op_info = op_context.op_info;",
          "603:     SetCpuDevice(&op_info);",
          "604:     op_info.set_op(\"MaxPool\");",
          "606:     DescribeTensor4D(x[0], x[1], x[2], x[3], op_info.add_inputs());",
          "607:     auto* attr = op_info.mutable_attr();",
          "608:     SetAttrValue(data_format, &(*attr)[\"data_format\"]);",
          "609:     SetAttrValue(padding, &(*attr)[\"padding\"]);",
          "610:     SetAttrValue(strides, &(*attr)[\"strides\"]);",
          "611:     SetAttrValue(ksize, &(*attr)[\"ksize\"]);",
          "612:     bool found_unknown_shapes;",
          "613:     return OpLevelCostEstimator::OpDimensionsFromInputs(",
          "614:         op_context.op_info.inputs(0).shape(), op_context.op_info,",
          "615:         &found_unknown_shapes);",
          "616:   }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1383:   }",
          "1384: }",
          "1386: TEST_F(OpLevelCostEstimatorTest, PredictMaxPool) {",
          "1387:   auto predict_max_pool = [this](const int n, const int in, const int c,",
          "1388:                                  const int k, const int s,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1420: TEST_F(OpLevelCostEstimatorTest, OpDimensionsFromInputsError) {",
          "1421:   std::vector<string> paddings = {\"VALID\", \"SAME\"};",
          "1422:   std::vector<string> formats = {\"NHWC\", \"NCHW\"};",
          "1423:   for (const auto& p : paddings) {",
          "1424:     for (const auto& f : formats) {",
          "1426:       ASSERT_THAT(",
          "1427:           CallOpDimensionsFromInputs(10, 14, 14, 3840, 3, 3, 0, 2, f, p),",
          "1428:           testing::StatusIs(",
          "1429:               error::INVALID_ARGUMENT,",
          "1430:               \"Stride must be > 0 for Height and Width, but got (2, 0)\"));",
          "1431:       ASSERT_THAT(",
          "1432:           CallOpDimensionsFromInputs(10, 14, 14, 3840, 3, 3, 2, 0, f, p),",
          "1433:           testing::StatusIs(",
          "1434:               error::INVALID_ARGUMENT,",
          "1435:               \"Stride must be > 0 for Height and Width, but got (0, 2)\"));",
          "1436:     }",
          "1437:   }",
          "1438: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8b94c9a57ccc845a27a22dcbb222668205eef7ef",
      "candidate_info": {
        "commit_hash": "8b94c9a57ccc845a27a22dcbb222668205eef7ef",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/8b94c9a57ccc845a27a22dcbb222668205eef7ef",
        "files": [
          "tensorflow/core/grappler/costs/BUILD",
          "tensorflow/core/grappler/costs/op_level_cost_estimator.cc",
          "tensorflow/core/grappler/costs/op_level_cost_estimator.h",
          "tensorflow/core/grappler/costs/op_level_cost_estimator_test.cc"
        ],
        "message": "Internal change\n\nPiperOrigin-RevId: 411896058\nChange-Id: Ia031058247e3cf382957a6662d3f9e1cbb481ca2",
        "before_after_code_files": [
          "tensorflow/core/grappler/costs/op_level_cost_estimator.cc||tensorflow/core/grappler/costs/op_level_cost_estimator.cc",
          "tensorflow/core/grappler/costs/op_level_cost_estimator.h||tensorflow/core/grappler/costs/op_level_cost_estimator.h",
          "tensorflow/core/grappler/costs/op_level_cost_estimator_test.cc||tensorflow/core/grappler/costs/op_level_cost_estimator_test.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/grappler/costs/op_level_cost_estimator.cc||tensorflow/core/grappler/costs/op_level_cost_estimator.cc",
            "tensorflow/core/grappler/costs/op_level_cost_estimator.h||tensorflow/core/grappler/costs/op_level_cost_estimator.h",
            "tensorflow/core/grappler/costs/op_level_cost_estimator_test.cc||tensorflow/core/grappler/costs/op_level_cost_estimator_test.cc"
          ],
          "candidate": [
            "tensorflow/core/grappler/costs/op_level_cost_estimator.cc||tensorflow/core/grappler/costs/op_level_cost_estimator.cc",
            "tensorflow/core/grappler/costs/op_level_cost_estimator.h||tensorflow/core/grappler/costs/op_level_cost_estimator.h",
            "tensorflow/core/grappler/costs/op_level_cost_estimator_test.cc||tensorflow/core/grappler/costs/op_level_cost_estimator_test.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/grappler/costs/op_level_cost_estimator.cc||tensorflow/core/grappler/costs/op_level_cost_estimator.cc": [
          "File: tensorflow/core/grappler/costs/op_level_cost_estimator.cc -> tensorflow/core/grappler/costs/op_level_cost_estimator.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "2130: }",
          "2134: OpLevelCostEstimator::OpDimensionsFromInputs(",
          "2135:     const TensorShapeProto& original_image_shape, const OpInfo& op_info,",
          "2136:     bool* found_unknown_shapes) {",
          "",
          "[Removed Lines]",
          "2133: OpLevelCostEstimator::ConvolutionDimensions",
          "",
          "[Added Lines]",
          "2133: StatusOr<OpLevelCostEstimator::ConvolutionDimensions>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2167:   std::vector<int64> strides = GetStrides(op_info);",
          "2168:   int64 sx = strides[x_index];",
          "2169:   int64 sy = strides[y_index];",
          "2170:   const auto padding = GetPadding(op_info);",
          "2172:   int64 ox = GetOutputSize(ix, kx, sx, padding);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2170:   if (sx == 0 || sy == 0) {",
          "2171:     return errors::InvalidArgument(",
          "2172:         \"Stride must be > 0 for Height and Width, but got (\", sy, \", \", sx,",
          "2173:         \")\");",
          "2174:   }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2183:   bool found_unknown_shapes = false;",
          "2184:   const auto& op_info = op_context.op_info;",
          "2190:   int per_output_ops = dims.kx * dims.ky == 1 ? 1 : dims.kx * dims.ky - 1;",
          "",
          "[Removed Lines]",
          "2186:   ConvolutionDimensions dims = OpDimensionsFromInputs(",
          "2187:       op_info.inputs(0).shape(), op_info, &found_unknown_shapes);",
          "",
          "[Added Lines]",
          "2191:   TF_ASSIGN_OR_RETURN(ConvolutionDimensions dims,",
          "2192:                       OpDimensionsFromInputs(op_info.inputs(0).shape(), op_info,",
          "2193:                                              &found_unknown_shapes));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2224:                                    op_info.ShortDebugString());",
          "2225:   }",
          "2230:   int64 ops = 0;",
          "2231:   if (dims.kx == 1 && dims.ky == 1) {",
          "",
          "[Removed Lines]",
          "2227:   ConvolutionDimensions dims = OpDimensionsFromInputs(",
          "2228:       op_info.inputs(0).shape(), op_info, &found_unknown_shapes);",
          "",
          "[Added Lines]",
          "2233:   TF_ASSIGN_OR_RETURN(ConvolutionDimensions dims,",
          "2234:                       OpDimensionsFromInputs(op_info.inputs(0).shape(), op_info,",
          "2235:                                              &found_unknown_shapes));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2300:   bool found_unknown_shapes = false;",
          "2301:   const auto& op_info = op_context.op_info;",
          "2307:   int64 ops = dims.batch * dims.ox * dims.oy * dims.oz * dims.kx * dims.ky;",
          "",
          "[Removed Lines]",
          "2303:   ConvolutionDimensions dims = OpDimensionsFromInputs(",
          "2304:       op_info.inputs(0).shape(), op_info, &found_unknown_shapes);",
          "",
          "[Added Lines]",
          "2310:   TF_ASSIGN_OR_RETURN(ConvolutionDimensions dims,",
          "2311:                       OpDimensionsFromInputs(op_info.inputs(0).shape(), op_info,",
          "2312:                                              &found_unknown_shapes));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2357:     found_unknown_shapes = true;",
          "2358:   }",
          "2363:   int64 ops = 0;",
          "2364:   if (dims.kx <= dims.sx && dims.ky <= dims.sy) {",
          "",
          "[Removed Lines]",
          "2360:   ConvolutionDimensions dims =",
          "2361:       OpDimensionsFromInputs(x_shape, op_info, &found_unknown_shapes);",
          "",
          "[Added Lines]",
          "2368:   TF_ASSIGN_OR_RETURN(",
          "2369:       ConvolutionDimensions dims,",
          "2370:       OpDimensionsFromInputs(x_shape, op_info, &found_unknown_shapes));",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2389:   const bool is_training = IsTraining(op_info);",
          "2391:   int64 ops = 0;",
          "",
          "[Removed Lines]",
          "2387:   ConvolutionDimensions dims = OpDimensionsFromInputs(",
          "2388:       op_info.inputs(0).shape(), op_info, &found_unknown_shapes);",
          "",
          "[Added Lines]",
          "2396:   TF_ASSIGN_OR_RETURN(ConvolutionDimensions dims,",
          "2397:                       OpDimensionsFromInputs(op_info.inputs(0).shape(), op_info,",
          "2398:                                              &found_unknown_shapes));",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2440:   int64 ops = 0;",
          "2441:   const auto rsqrt_cost = Eigen::internal::functor_traits<",
          "",
          "[Removed Lines]",
          "2437:   ConvolutionDimensions dims = OpDimensionsFromInputs(",
          "2438:       op_info.inputs(1).shape(), op_info, &found_unknown_shapes);",
          "",
          "[Added Lines]",
          "2447:   TF_ASSIGN_OR_RETURN(ConvolutionDimensions dims,",
          "2448:                       OpDimensionsFromInputs(op_info.inputs(1).shape(), op_info,",
          "2449:                                              &found_unknown_shapes));",
          "",
          "---------------"
        ],
        "tensorflow/core/grappler/costs/op_level_cost_estimator.h||tensorflow/core/grappler/costs/op_level_cost_estimator.h": [
          "File: tensorflow/core/grappler/costs/op_level_cost_estimator.h -> tensorflow/core/grappler/costs/op_level_cost_estimator.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "290:       bool* found_unknown_shapes);",
          "294:       const TensorShapeProto& original_image_shape, const OpInfo& op_info,",
          "295:       bool* found_unknown_shapes);",
          "",
          "[Removed Lines]",
          "293:   static ConvolutionDimensions OpDimensionsFromInputs(",
          "",
          "[Added Lines]",
          "293:   static StatusOr<ConvolutionDimensions> OpDimensionsFromInputs(",
          "",
          "---------------"
        ],
        "tensorflow/core/grappler/costs/op_level_cost_estimator_test.cc||tensorflow/core/grappler/costs/op_level_cost_estimator_test.cc": [
          "File: tensorflow/core/grappler/costs/op_level_cost_estimator_test.cc -> tensorflow/core/grappler/costs/op_level_cost_estimator_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: #include \"tensorflow/core/framework/tensor_shape.h\"",
          "25: #include \"tensorflow/core/framework/tensor_shape.pb.h\"",
          "26: #include \"tensorflow/core/framework/types.h\"",
          "27: #include \"tensorflow/core/platform/test.h\"",
          "28: #include \"tensorflow/core/protobuf/device_properties.pb.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27: #include \"tensorflow/core/platform/status_matchers.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "558:     }",
          "560:     bool found_unknown_shapes;",
          "564:     Padding padding_enum;",
          "565:     if (padding == \"VALID\") {",
          "566:       padding_enum = Padding::VALID;",
          "",
          "[Removed Lines]",
          "561:     auto dims = OpLevelCostEstimator::OpDimensionsFromInputs(",
          "562:         op_context.op_info.inputs(0).shape(), op_context.op_info,",
          "563:         &found_unknown_shapes);",
          "",
          "[Added Lines]",
          "562:     TF_ASSERT_OK_AND_ASSIGN(",
          "563:         auto dims, OpLevelCostEstimator::OpDimensionsFromInputs(",
          "564:                        op_context.op_info.inputs(0).shape(), op_context.op_info,",
          "565:                        &found_unknown_shapes));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "581:     EXPECT_EQ(padding_enum, dims.padding);",
          "582:   }",
          "584:   OpLevelCostEstimator estimator_;",
          "585: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "586:   StatusOr<OpLevelCostEstimator::ConvolutionDimensions>",
          "587:   CallOpDimensionsFromInputs(const int n, const int h, const int w, const int c,",
          "588:                              const int kx, const int ky, const int sx,",
          "589:                              const int sy, const string& data_format,",
          "590:                              const string& padding) {",
          "591:     OpContext op_context;",
          "593:     const std::vector<int> x = {n, h, w, c};",
          "594:     const std::vector<int> ksize = {1, kx, ky, 1};",
          "595:     std::vector<int> strides;",
          "596:     if (data_format == \"NHWC\") {",
          "597:       strides = {1, sy, sx, 1};",
          "598:     } else {",
          "599:       strides = {1, 1, sy, sx};",
          "600:     }",
          "602:     auto& op_info = op_context.op_info;",
          "603:     SetCpuDevice(&op_info);",
          "604:     op_info.set_op(\"MaxPool\");",
          "606:     DescribeTensor4D(x[0], x[1], x[2], x[3], op_info.add_inputs());",
          "607:     auto* attr = op_info.mutable_attr();",
          "608:     SetAttrValue(data_format, &(*attr)[\"data_format\"]);",
          "609:     SetAttrValue(padding, &(*attr)[\"padding\"]);",
          "610:     SetAttrValue(strides, &(*attr)[\"strides\"]);",
          "611:     SetAttrValue(ksize, &(*attr)[\"ksize\"]);",
          "612:     bool found_unknown_shapes;",
          "613:     return OpLevelCostEstimator::OpDimensionsFromInputs(",
          "614:         op_context.op_info.inputs(0).shape(), op_context.op_info,",
          "615:         &found_unknown_shapes);",
          "616:   }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1383:   }",
          "1384: }",
          "1386: TEST_F(OpLevelCostEstimatorTest, PredictMaxPool) {",
          "1387:   auto predict_max_pool = [this](const int n, const int in, const int c,",
          "1388:                                  const int k, const int s,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1420: TEST_F(OpLevelCostEstimatorTest, OpDimensionsFromInputsError) {",
          "1421:   std::vector<string> paddings = {\"VALID\", \"SAME\"};",
          "1422:   std::vector<string> formats = {\"NHWC\", \"NCHW\"};",
          "1423:   for (const auto& p : paddings) {",
          "1424:     for (const auto& f : formats) {",
          "1426:       ASSERT_THAT(",
          "1427:           CallOpDimensionsFromInputs(10, 14, 14, 3840, 3, 3, 0, 2, f, p),",
          "1428:           testing::StatusIs(",
          "1429:               error::INVALID_ARGUMENT,",
          "1430:               \"Stride must be > 0 for Height and Width, but got (2, 0)\"));",
          "1431:       ASSERT_THAT(",
          "1432:           CallOpDimensionsFromInputs(10, 14, 14, 3840, 3, 3, 2, 0, f, p),",
          "1433:           testing::StatusIs(",
          "1434:               error::INVALID_ARGUMENT,",
          "1435:               \"Stride must be > 0 for Height and Width, but got (0, 2)\"));",
          "1436:     }",
          "1437:   }",
          "1438: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ea92968f5770cf84521eb87192d37b072ceff27f",
      "candidate_info": {
        "commit_hash": "ea92968f5770cf84521eb87192d37b072ceff27f",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/ea92968f5770cf84521eb87192d37b072ceff27f",
        "files": [
          "tensorflow/core/grappler/costs/BUILD",
          "tensorflow/core/grappler/costs/op_level_cost_estimator.cc",
          "tensorflow/core/grappler/costs/op_level_cost_estimator.h",
          "tensorflow/core/grappler/costs/op_level_cost_estimator_test.cc"
        ],
        "message": "Internal change\n\nPiperOrigin-RevId: 411896058\nChange-Id: Ia031058247e3cf382957a6662d3f9e1cbb481ca2",
        "before_after_code_files": [
          "tensorflow/core/grappler/costs/op_level_cost_estimator.cc||tensorflow/core/grappler/costs/op_level_cost_estimator.cc",
          "tensorflow/core/grappler/costs/op_level_cost_estimator.h||tensorflow/core/grappler/costs/op_level_cost_estimator.h",
          "tensorflow/core/grappler/costs/op_level_cost_estimator_test.cc||tensorflow/core/grappler/costs/op_level_cost_estimator_test.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/grappler/costs/op_level_cost_estimator.cc||tensorflow/core/grappler/costs/op_level_cost_estimator.cc",
            "tensorflow/core/grappler/costs/op_level_cost_estimator.h||tensorflow/core/grappler/costs/op_level_cost_estimator.h",
            "tensorflow/core/grappler/costs/op_level_cost_estimator_test.cc||tensorflow/core/grappler/costs/op_level_cost_estimator_test.cc"
          ],
          "candidate": [
            "tensorflow/core/grappler/costs/op_level_cost_estimator.cc||tensorflow/core/grappler/costs/op_level_cost_estimator.cc",
            "tensorflow/core/grappler/costs/op_level_cost_estimator.h||tensorflow/core/grappler/costs/op_level_cost_estimator.h",
            "tensorflow/core/grappler/costs/op_level_cost_estimator_test.cc||tensorflow/core/grappler/costs/op_level_cost_estimator_test.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/grappler/costs/op_level_cost_estimator.cc||tensorflow/core/grappler/costs/op_level_cost_estimator.cc": [
          "File: tensorflow/core/grappler/costs/op_level_cost_estimator.cc -> tensorflow/core/grappler/costs/op_level_cost_estimator.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "2121: }",
          "2125: OpLevelCostEstimator::OpDimensionsFromInputs(",
          "2126:     const TensorShapeProto& original_image_shape, const OpInfo& op_info,",
          "2127:     bool* found_unknown_shapes) {",
          "",
          "[Removed Lines]",
          "2124: OpLevelCostEstimator::ConvolutionDimensions",
          "",
          "[Added Lines]",
          "2124: StatusOr<OpLevelCostEstimator::ConvolutionDimensions>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2158:   std::vector<int64> strides = GetStrides(op_info);",
          "2159:   int64 sx = strides[x_index];",
          "2160:   int64 sy = strides[y_index];",
          "2161:   const auto padding = GetPadding(op_info);",
          "2163:   int64 ox = GetOutputSize(ix, kx, sx, padding);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2161:   if (sx == 0 || sy == 0) {",
          "2162:     return errors::InvalidArgument(",
          "2163:         \"Stride must be > 0 for Height and Width, but got (\", sy, \", \", sx,",
          "2164:         \")\");",
          "2165:   }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2174:   bool found_unknown_shapes = false;",
          "2175:   const auto& op_info = op_context.op_info;",
          "2181:   int per_output_ops = dims.kx * dims.ky == 1 ? 1 : dims.kx * dims.ky - 1;",
          "",
          "[Removed Lines]",
          "2177:   ConvolutionDimensions dims = OpDimensionsFromInputs(",
          "2178:       op_info.inputs(0).shape(), op_info, &found_unknown_shapes);",
          "",
          "[Added Lines]",
          "2182:   TF_ASSIGN_OR_RETURN(ConvolutionDimensions dims,",
          "2183:                       OpDimensionsFromInputs(op_info.inputs(0).shape(), op_info,",
          "2184:                                              &found_unknown_shapes));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2215:                                    op_info.ShortDebugString());",
          "2216:   }",
          "2221:   int64 ops = 0;",
          "2222:   if (dims.kx == 1 && dims.ky == 1) {",
          "",
          "[Removed Lines]",
          "2218:   ConvolutionDimensions dims = OpDimensionsFromInputs(",
          "2219:       op_info.inputs(0).shape(), op_info, &found_unknown_shapes);",
          "",
          "[Added Lines]",
          "2224:   TF_ASSIGN_OR_RETURN(ConvolutionDimensions dims,",
          "2225:                       OpDimensionsFromInputs(op_info.inputs(0).shape(), op_info,",
          "2226:                                              &found_unknown_shapes));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2291:   bool found_unknown_shapes = false;",
          "2292:   const auto& op_info = op_context.op_info;",
          "2298:   int64 ops = dims.batch * dims.ox * dims.oy * dims.oz * dims.kx * dims.ky;",
          "",
          "[Removed Lines]",
          "2294:   ConvolutionDimensions dims = OpDimensionsFromInputs(",
          "2295:       op_info.inputs(0).shape(), op_info, &found_unknown_shapes);",
          "",
          "[Added Lines]",
          "2301:   TF_ASSIGN_OR_RETURN(ConvolutionDimensions dims,",
          "2302:                       OpDimensionsFromInputs(op_info.inputs(0).shape(), op_info,",
          "2303:                                              &found_unknown_shapes));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2348:     found_unknown_shapes = true;",
          "2349:   }",
          "2354:   int64 ops = 0;",
          "2355:   if (dims.kx <= dims.sx && dims.ky <= dims.sy) {",
          "",
          "[Removed Lines]",
          "2351:   ConvolutionDimensions dims =",
          "2352:       OpDimensionsFromInputs(x_shape, op_info, &found_unknown_shapes);",
          "",
          "[Added Lines]",
          "2359:   TF_ASSIGN_OR_RETURN(",
          "2360:       ConvolutionDimensions dims,",
          "2361:       OpDimensionsFromInputs(x_shape, op_info, &found_unknown_shapes));",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2380:   const bool is_training = IsTraining(op_info);",
          "2382:   int64 ops = 0;",
          "",
          "[Removed Lines]",
          "2378:   ConvolutionDimensions dims = OpDimensionsFromInputs(",
          "2379:       op_info.inputs(0).shape(), op_info, &found_unknown_shapes);",
          "",
          "[Added Lines]",
          "2387:   TF_ASSIGN_OR_RETURN(ConvolutionDimensions dims,",
          "2388:                       OpDimensionsFromInputs(op_info.inputs(0).shape(), op_info,",
          "2389:                                              &found_unknown_shapes));",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2431:   int64 ops = 0;",
          "2432:   const auto rsqrt_cost = Eigen::internal::functor_traits<",
          "",
          "[Removed Lines]",
          "2428:   ConvolutionDimensions dims = OpDimensionsFromInputs(",
          "2429:       op_info.inputs(1).shape(), op_info, &found_unknown_shapes);",
          "",
          "[Added Lines]",
          "2438:   TF_ASSIGN_OR_RETURN(ConvolutionDimensions dims,",
          "2439:                       OpDimensionsFromInputs(op_info.inputs(1).shape(), op_info,",
          "2440:                                              &found_unknown_shapes));",
          "",
          "---------------"
        ],
        "tensorflow/core/grappler/costs/op_level_cost_estimator.h||tensorflow/core/grappler/costs/op_level_cost_estimator.h": [
          "File: tensorflow/core/grappler/costs/op_level_cost_estimator.h -> tensorflow/core/grappler/costs/op_level_cost_estimator.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "290:       bool* found_unknown_shapes);",
          "294:       const TensorShapeProto& original_image_shape, const OpInfo& op_info,",
          "295:       bool* found_unknown_shapes);",
          "",
          "[Removed Lines]",
          "293:   static ConvolutionDimensions OpDimensionsFromInputs(",
          "",
          "[Added Lines]",
          "293:   static StatusOr<ConvolutionDimensions> OpDimensionsFromInputs(",
          "",
          "---------------"
        ],
        "tensorflow/core/grappler/costs/op_level_cost_estimator_test.cc||tensorflow/core/grappler/costs/op_level_cost_estimator_test.cc": [
          "File: tensorflow/core/grappler/costs/op_level_cost_estimator_test.cc -> tensorflow/core/grappler/costs/op_level_cost_estimator_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: #include \"tensorflow/core/framework/tensor_shape.h\"",
          "25: #include \"tensorflow/core/framework/tensor_shape.pb.h\"",
          "26: #include \"tensorflow/core/framework/types.h\"",
          "27: #include \"tensorflow/core/platform/test.h\"",
          "28: #include \"tensorflow/core/protobuf/device_properties.pb.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27: #include \"tensorflow/core/platform/status_matchers.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "558:     }",
          "560:     bool found_unknown_shapes;",
          "564:     Padding padding_enum;",
          "565:     if (padding == \"VALID\") {",
          "566:       padding_enum = Padding::VALID;",
          "",
          "[Removed Lines]",
          "561:     auto dims = OpLevelCostEstimator::OpDimensionsFromInputs(",
          "562:         op_context.op_info.inputs(0).shape(), op_context.op_info,",
          "563:         &found_unknown_shapes);",
          "",
          "[Added Lines]",
          "562:     TF_ASSERT_OK_AND_ASSIGN(",
          "563:         auto dims, OpLevelCostEstimator::OpDimensionsFromInputs(",
          "564:                        op_context.op_info.inputs(0).shape(), op_context.op_info,",
          "565:                        &found_unknown_shapes));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "581:     EXPECT_EQ(padding_enum, dims.padding);",
          "582:   }",
          "584:   OpLevelCostEstimator estimator_;",
          "585: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "586:   StatusOr<OpLevelCostEstimator::ConvolutionDimensions>",
          "587:   CallOpDimensionsFromInputs(const int n, const int h, const int w, const int c,",
          "588:                              const int kx, const int ky, const int sx,",
          "589:                              const int sy, const string& data_format,",
          "590:                              const string& padding) {",
          "591:     OpContext op_context;",
          "593:     const std::vector<int> x = {n, h, w, c};",
          "594:     const std::vector<int> ksize = {1, kx, ky, 1};",
          "595:     std::vector<int> strides;",
          "596:     if (data_format == \"NHWC\") {",
          "597:       strides = {1, sy, sx, 1};",
          "598:     } else {",
          "599:       strides = {1, 1, sy, sx};",
          "600:     }",
          "602:     auto& op_info = op_context.op_info;",
          "603:     SetCpuDevice(&op_info);",
          "604:     op_info.set_op(\"MaxPool\");",
          "606:     DescribeTensor4D(x[0], x[1], x[2], x[3], op_info.add_inputs());",
          "607:     auto* attr = op_info.mutable_attr();",
          "608:     SetAttrValue(data_format, &(*attr)[\"data_format\"]);",
          "609:     SetAttrValue(padding, &(*attr)[\"padding\"]);",
          "610:     SetAttrValue(strides, &(*attr)[\"strides\"]);",
          "611:     SetAttrValue(ksize, &(*attr)[\"ksize\"]);",
          "612:     bool found_unknown_shapes;",
          "613:     return OpLevelCostEstimator::OpDimensionsFromInputs(",
          "614:         op_context.op_info.inputs(0).shape(), op_context.op_info,",
          "615:         &found_unknown_shapes);",
          "616:   }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1383:   }",
          "1384: }",
          "1386: TEST_F(OpLevelCostEstimatorTest, PredictMaxPool) {",
          "1387:   auto predict_max_pool = [this](const int n, const int in, const int c,",
          "1388:                                  const int k, const int s,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1420: TEST_F(OpLevelCostEstimatorTest, OpDimensionsFromInputsError) {",
          "1421:   std::vector<string> paddings = {\"VALID\", \"SAME\"};",
          "1422:   std::vector<string> formats = {\"NHWC\", \"NCHW\"};",
          "1423:   for (const auto& p : paddings) {",
          "1424:     for (const auto& f : formats) {",
          "1426:       ASSERT_THAT(",
          "1427:           CallOpDimensionsFromInputs(10, 14, 14, 3840, 3, 3, 0, 2, f, p),",
          "1428:           testing::StatusIs(",
          "1429:               error::INVALID_ARGUMENT,",
          "1430:               \"Stride must be > 0 for Height and Width, but got (2, 0)\"));",
          "1431:       ASSERT_THAT(",
          "1432:           CallOpDimensionsFromInputs(10, 14, 14, 3840, 3, 3, 2, 0, f, p),",
          "1433:           testing::StatusIs(",
          "1434:               error::INVALID_ARGUMENT,",
          "1435:               \"Stride must be > 0 for Height and Width, but got (0, 2)\"));",
          "1436:     }",
          "1437:   }",
          "1438: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}