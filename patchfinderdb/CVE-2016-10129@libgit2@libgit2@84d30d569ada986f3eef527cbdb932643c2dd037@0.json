{
  "cve_id": "CVE-2016-10129",
  "cve_desc": "The Git Smart Protocol support in libgit2 before 0.24.6 and 0.25.x before 0.25.1 allows remote attackers to cause a denial of service (NULL pointer dereference) via an empty packet line.",
  "repo": "libgit2/libgit2",
  "patch_hash": "84d30d569ada986f3eef527cbdb932643c2dd037",
  "patch_info": {
    "commit_hash": "84d30d569ada986f3eef527cbdb932643c2dd037",
    "repo": "libgit2/libgit2",
    "commit_url": "https://github.com/libgit2/libgit2/commit/84d30d569ada986f3eef527cbdb932643c2dd037",
    "files": [
      "src/transports/smart_pkt.c",
      "src/transports/smart_protocol.c"
    ],
    "message": "smart_pkt: treat empty packet lines as error\n\nThe Git protocol does not specify what should happen in the case\nof an empty packet line (that is a packet line \"0004\"). We\ncurrently indicate success, but do not return a packet in the\ncase where we hit an empty line. The smart protocol was not\nprepared to handle such packets in all cases, though, resulting\nin a `NULL` pointer dereference.\n\nFix the issue by returning an error instead. As such kind of\npackets is not even specified by upstream, this is the right\nthing to do.",
    "before_after_code_files": [
      "src/transports/smart_pkt.c||src/transports/smart_pkt.c",
      "src/transports/smart_protocol.c||src/transports/smart_protocol.c"
    ]
  },
  "patch_diff": {
    "src/transports/smart_pkt.c||src/transports/smart_pkt.c": [
      "File: src/transports/smart_pkt.c -> src/transports/smart_pkt.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "438:  line += PKT_LEN_SIZE;",
      "443:  if (len == PKT_LEN_SIZE) {",
      "447:  }",
      "",
      "[Removed Lines]",
      "446:   return 0;",
      "",
      "[Added Lines]",
      "445:   giterr_set_str(GITERR_NET, \"Invalid empty packet\");",
      "446:   return GIT_ERROR;",
      "",
      "---------------"
    ],
    "src/transports/smart_protocol.c||src/transports/smart_protocol.c": [
      "File: src/transports/smart_protocol.c -> src/transports/smart_protocol.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "759:   line_len -= (line_end - line);",
      "760:   line = line_end;",
      "770:   error = add_push_report_pkt(push, pkt);",
      "772:   git_pkt_free(pkt);",
      "",
      "[Removed Lines]",
      "767:   if (pkt == NULL)",
      "768:    continue;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "822:   error = 0;",
      "827:   switch (pkt->type) {",
      "828:    case GIT_PKT_DATA:",
      "",
      "[Removed Lines]",
      "824:   if (pkt == NULL)",
      "825:    continue;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "45a2ee3f401d0e2f23d84b987099e0dc34a68117",
      "candidate_info": {
        "commit_hash": "45a2ee3f401d0e2f23d84b987099e0dc34a68117",
        "repo": "libgit2/libgit2",
        "commit_url": "https://github.com/libgit2/libgit2/commit/45a2ee3f401d0e2f23d84b987099e0dc34a68117",
        "files": [
          "tests/online/badssl.c"
        ],
        "message": "https: don't test that RC4 is invalid\n\nNone of our crypto backends actually reject RC4 as a cipher so don't\ntest for it and instead keep it as something we'd like to do.",
        "before_after_code_files": [
          "tests/online/badssl.c||tests/online/badssl.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libgit2/libgit2/pull/4075"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "tests/online/badssl.c||tests/online/badssl.c": [
          "File: tests/online/badssl.c -> tests/online/badssl.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "67:  git_clone_options opts = GIT_CLONE_OPTIONS_INIT;",
          "68:  opts.fetch_opts.callbacks.certificate_check = cert_check_assert_invalid;",
          "70:  if (!g_has_ssl)",
          "71:   cl_skip();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "71:  cl_skip();",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2b9298bfe2ab193041445f77eb359224bb9ae5cd",
      "candidate_info": {
        "commit_hash": "2b9298bfe2ab193041445f77eb359224bb9ae5cd",
        "repo": "libgit2/libgit2",
        "commit_url": "https://github.com/libgit2/libgit2/commit/2b9298bfe2ab193041445f77eb359224bb9ae5cd",
        "files": [
          "include/git2/version.h"
        ],
        "message": "Bump version to 0.24.6",
        "before_after_code_files": [
          "include/git2/version.h||include/git2/version.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libgit2/libgit2/pull/4075"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/git2/version.h||include/git2/version.h": [
          "File: include/git2/version.h -> include/git2/version.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: #ifndef INCLUDE_git_version_h__",
          "8: #define INCLUDE_git_version_h__",
          "11: #define LIBGIT2_VER_MAJOR 0",
          "12: #define LIBGIT2_VER_MINOR 24",
          "14: #define LIBGIT2_VER_PATCH 0",
          "16: #define LIBGIT2_SOVERSION 24",
          "",
          "[Removed Lines]",
          "10: #define LIBGIT2_VERSION \"0.24.5\"",
          "13: #define LIBGIT2_VER_REVISION 5",
          "",
          "[Added Lines]",
          "10: #define LIBGIT2_VERSION \"0.24.6\"",
          "13: #define LIBGIT2_VER_REVISION 6",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b5c6a1b407b7f8b952bded2789593b68b1876211",
      "candidate_info": {
        "commit_hash": "b5c6a1b407b7f8b952bded2789593b68b1876211",
        "repo": "libgit2/libgit2",
        "commit_url": "https://github.com/libgit2/libgit2/commit/b5c6a1b407b7f8b952bded2789593b68b1876211",
        "files": [
          "src/transports/http.c"
        ],
        "message": "http: check certificate validity before clobbering the error variable",
        "before_after_code_files": [
          "src/transports/http.c||src/transports/http.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libgit2/libgit2/pull/4075"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/transports/http.c||src/transports/http.c": [
          "File: src/transports/http.c -> src/transports/http.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "602:  if ((!error || error == GIT_ECERTIFICATE) && t->owner->certificate_check_cb != NULL &&",
          "603:      git_stream_is_encrypted(t->io)) {",
          "604:   git_cert *cert;",
          "607:   if ((error = git_stream_certificate(&cert, t->io)) < 0)",
          "608:    return error;",
          "610:   giterr_clear();",
          "612:   error = t->owner->certificate_check_cb(cert, is_valid, t->connection_data.host, t->owner->message_cb_payload);",
          "614:   if (error < 0) {",
          "",
          "[Removed Lines]",
          "605:   int is_valid;",
          "611:   is_valid = error != GIT_ECERTIFICATE;",
          "",
          "[Added Lines]",
          "605:   int is_valid = (error == GIT_OK);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d3cb8f64cde3b84c3d1543f122f989aeb2f6a69e",
      "candidate_info": {
        "commit_hash": "d3cb8f64cde3b84c3d1543f122f989aeb2f6a69e",
        "repo": "libgit2/libgit2",
        "commit_url": "https://github.com/libgit2/libgit2/commit/d3cb8f64cde3b84c3d1543f122f989aeb2f6a69e",
        "files": [
          "tests/online/badssl.c"
        ],
        "message": "http: correct the expected error for RC4\n\nWe must make sure that we're getting a certificate error from the\nlibrary so we know that we're testing the right thing.",
        "before_after_code_files": [
          "tests/online/badssl.c||tests/online/badssl.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libgit2/libgit2/pull/4075"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "tests/online/badssl.c||tests/online/badssl.c": [
          "File: tests/online/badssl.c -> tests/online/badssl.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "70:  if (!g_has_ssl)",
          "71:   cl_skip();",
          "75: }",
          "",
          "[Removed Lines]",
          "73:  cl_git_fail(git_clone(&g_repo, \"https://rc4.badssl.com/fake.git\", \"./fake\", NULL));",
          "74:  cl_git_fail(git_clone(&g_repo, \"https://rc4.badssl.com/fake.git\", \"./fake\", &opts));",
          "",
          "[Added Lines]",
          "73:  cl_git_fail_with(GIT_ECERTIFICATE,",
          "74:     git_clone(&g_repo, \"https://rc4.badssl.com/fake.git\", \"./fake\", NULL));",
          "75:  cl_git_fail_with(GIT_ECERTIFICATE,",
          "76:     git_clone(&g_repo, \"https://rc4.badssl.com/fake.git\", \"./fake\", &opts));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ca531956619f021913ac01669b3818a705b7b676",
      "candidate_info": {
        "commit_hash": "ca531956619f021913ac01669b3818a705b7b676",
        "repo": "libgit2/libgit2",
        "commit_url": "https://github.com/libgit2/libgit2/commit/ca531956619f021913ac01669b3818a705b7b676",
        "files": [
          "tests/online/badssl.c"
        ],
        "message": "http: perform 'badssl' check also via certificate callback\n\nMake sure that the callbacks do also get a 'valid' value of zero when\nthe certificate we're looking at is in valid and assert that within the\ntest.",
        "before_after_code_files": [
          "tests/online/badssl.c||tests/online/badssl.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libgit2/libgit2/pull/4075"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "tests/online/badssl.c||tests/online/badssl.c": [
          "File: tests/online/badssl.c -> tests/online/badssl.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: static bool g_has_ssl = false;",
          "11: #endif",
          "13: void test_online_badssl__expired(void)",
          "14: {",
          "15:  if (!g_has_ssl)",
          "16:   cl_skip();",
          "18:  cl_git_fail_with(GIT_ECERTIFICATE,",
          "19:     git_clone(&g_repo, \"https://expired.badssl.com/fake.git\", \"./fake\", NULL));",
          "20: }",
          "22: void test_online_badssl__wrong_host(void)",
          "23: {",
          "24:  if (!g_has_ssl)",
          "25:   cl_skip();",
          "27:  cl_git_fail_with(GIT_ECERTIFICATE,",
          "28:     git_clone(&g_repo, \"https://wrong.host.badssl.com/fake.git\", \"./fake\", NULL));",
          "29: }",
          "31: void test_online_badssl__self_signed(void)",
          "32: {",
          "33:  if (!g_has_ssl)",
          "34:   cl_skip();",
          "36:  cl_git_fail_with(GIT_ECERTIFICATE,",
          "37:     git_clone(&g_repo, \"https://self-signed.badssl.com/fake.git\", \"./fake\", NULL));",
          "38: }",
          "40: void test_online_badssl__old_cipher(void)",
          "41: {",
          "42:  if (!g_has_ssl)",
          "43:   cl_skip();",
          "45:  cl_git_fail(git_clone(&g_repo, \"https://rc4.badssl.com/fake.git\", \"./fake\", NULL));",
          "46: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "13: static int cert_check_assert_invalid(git_cert *cert, int valid, const char* host, void *payload)",
          "14: {",
          "15:  GIT_UNUSED(cert); GIT_UNUSED(host); GIT_UNUSED(payload);",
          "17:  cl_assert_equal_i(0, valid);",
          "19:  return GIT_ECERTIFICATE;",
          "20: }",
          "24:  git_clone_options opts = GIT_CLONE_OPTIONS_INIT;",
          "25:  opts.fetch_opts.callbacks.certificate_check = cert_check_assert_invalid;",
          "33:  cl_git_fail_with(GIT_ECERTIFICATE,",
          "34:     git_clone(&g_repo, \"https://expired.badssl.com/fake.git\", \"./fake\", &opts));",
          "39:  git_clone_options opts = GIT_CLONE_OPTIONS_INIT;",
          "40:  opts.fetch_opts.callbacks.certificate_check = cert_check_assert_invalid;",
          "47:  cl_git_fail_with(GIT_ECERTIFICATE,",
          "48:     git_clone(&g_repo, \"https://wrong.host.badssl.com/fake.git\", \"./fake\", &opts));",
          "53:  git_clone_options opts = GIT_CLONE_OPTIONS_INIT;",
          "54:  opts.fetch_opts.callbacks.certificate_check = cert_check_assert_invalid;",
          "61:  cl_git_fail_with(GIT_ECERTIFICATE,",
          "62:     git_clone(&g_repo, \"https://self-signed.badssl.com/fake.git\", \"./fake\", &opts));",
          "67:  git_clone_options opts = GIT_CLONE_OPTIONS_INIT;",
          "68:  opts.fetch_opts.callbacks.certificate_check = cert_check_assert_invalid;",
          "74:  cl_git_fail(git_clone(&g_repo, \"https://rc4.badssl.com/fake.git\", \"./fake\", &opts));",
          "",
          "---------------"
        ]
      }
    }
  ]
}