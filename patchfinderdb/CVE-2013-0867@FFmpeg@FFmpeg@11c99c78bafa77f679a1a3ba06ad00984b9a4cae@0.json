{
  "cve_id": "CVE-2013-0867",
  "cve_desc": "The decode_slice_header function in libavcodec/h264.c in FFmpeg before 1.1.2 does not properly check when the pixel format changes, which allows remote attackers to have unspecified impact via crafted H.264 video data, related to an out-of-bounds array access.",
  "repo": "FFmpeg/FFmpeg",
  "patch_hash": "11c99c78bafa77f679a1a3ba06ad00984b9a4cae",
  "patch_info": {
    "commit_hash": "11c99c78bafa77f679a1a3ba06ad00984b9a4cae",
    "repo": "FFmpeg/FFmpeg",
    "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/11c99c78bafa77f679a1a3ba06ad00984b9a4cae",
    "files": [
      "libavcodec/h264.c"
    ],
    "message": "h264: check the pixel format directly and force a reinit on mismatches.\n\nThe existing checks are insufficient to detect a pixel format\nchanges in case of some damaged streams.\nFixes inconsistency and later out of array accesses\n\nFound-by: Mateusz \"j00ru\" Jurczyk and Gynvael Coldwind\nSigned-off-by: Michael Niedermayer <michaelni@gmx.at>",
    "before_after_code_files": [
      "libavcodec/h264.c||libavcodec/h264.c"
    ]
  },
  "patch_diff": {
    "libavcodec/h264.c||libavcodec/h264.c": [
      "File: libavcodec/h264.c -> libavcodec/h264.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2776:                      || s->avctx->bits_per_raw_sample != h->sps.bit_depth_luma",
      "2777:                      || h->cur_chroma_format_idc != h->sps.chroma_format_idc",
      "2778:                      || av_cmp_q(h->sps.sar, s->avctx->sample_aspect_ratio)));",
      "2781:     s->mb_width  = h->sps.mb_width;",
      "2782:     s->mb_height = h->sps.mb_height * (2 - h->sps.frame_mbs_only_flag);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2779:     if (h0->s.avctx->pix_fmt != get_pixel_format(h0))",
      "2780:         must_reinit = 1;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "3ef1538121fa6daeb1767510f1d4ae2c306c9fec",
      "candidate_info": {
        "commit_hash": "3ef1538121fa6daeb1767510f1d4ae2c306c9fec",
        "repo": "FFmpeg/FFmpeg",
        "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/3ef1538121fa6daeb1767510f1d4ae2c306c9fec",
        "files": [
          "libavcodec/h264.c"
        ],
        "message": "h264: check the pixel format directly and force a reinit on mismatches.\n\nThe existing checks are insufficient to detect a pixel format\nchanges in case of some damaged streams.\nFixes inconsistency and later out of array accesses\n\nFound-by: Mateusz \"j00ru\" Jurczyk and Gynvael Coldwind\nSigned-off-by: Michael Niedermayer <michaelni@gmx.at>\n(cherry picked from commit 11c99c78bafa77f679a1a3ba06ad00984b9a4cae)\n\nSigned-off-by: Michael Niedermayer <michaelni@gmx.at>",
        "before_after_code_files": [
          "libavcodec/h264.c||libavcodec/h264.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "libavcodec/h264.c||libavcodec/h264.c"
          ],
          "candidate": [
            "libavcodec/h264.c||libavcodec/h264.c"
          ]
        }
      },
      "candidate_diff": {
        "libavcodec/h264.c||libavcodec/h264.c": [
          "File: libavcodec/h264.c -> libavcodec/h264.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2765:                      || s->avctx->bits_per_raw_sample != h->sps.bit_depth_luma",
          "2766:                      || h->cur_chroma_format_idc != h->sps.chroma_format_idc",
          "2767:                      || av_cmp_q(h->sps.sar, s->avctx->sample_aspect_ratio)));",
          "2770:     s->mb_width  = h->sps.mb_width;",
          "2771:     s->mb_height = h->sps.mb_height * (2 - h->sps.frame_mbs_only_flag);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2768:     if (h0->s.avctx->pix_fmt != get_pixel_format(h0))",
          "2769:         must_reinit = 1;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "15a736483e3cb672e343ab3ffb78281675896d6f",
      "candidate_info": {
        "commit_hash": "15a736483e3cb672e343ab3ffb78281675896d6f",
        "repo": "FFmpeg/FFmpeg",
        "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/15a736483e3cb672e343ab3ffb78281675896d6f",
        "files": [
          "libavcodec/h264.c"
        ],
        "message": "h264: check mb_width/height\n\nFixes inconsistency that leads to out of array accesses with threads\n\nFound-by: Mateusz \"j00ru\" Jurczyk and Gynvael Coldwind\nSigned-off-by: Michael Niedermayer <michaelni@gmx.at>\n(cherry picked from commit 5a9e3760495e8678ae87314670e3d9d5a1792c8d)\n\nSigned-off-by: Michael Niedermayer <michaelni@gmx.at>",
        "before_after_code_files": [
          "libavcodec/h264.c||libavcodec/h264.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libavcodec/h264.c||libavcodec/h264.c"
          ],
          "candidate": [
            "libavcodec/h264.c||libavcodec/h264.c"
          ]
        }
      },
      "candidate_diff": {
        "libavcodec/h264.c||libavcodec/h264.c": [
          "File: libavcodec/h264.c -> libavcodec/h264.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3208:                      || 16*h->sps.mb_height * (2 - h->sps.frame_mbs_only_flag) != h->avctx->coded_height",
          "3209:                      || h->avctx->bits_per_raw_sample != h->sps.bit_depth_luma",
          "3210:                      || h->cur_chroma_format_idc != h->sps.chroma_format_idc",
          "3212:     if (h0->avctx->pix_fmt != get_pixel_format(h0, 0))",
          "3213:         must_reinit = 1;",
          "",
          "[Removed Lines]",
          "3211:                      || av_cmp_q(h->sps.sar, h->avctx->sample_aspect_ratio)));",
          "",
          "[Added Lines]",
          "3211:                      || av_cmp_q(h->sps.sar, h->avctx->sample_aspect_ratio)",
          "3212:                      || h->mb_width  != h->sps.mb_width",
          "3213:                      || h->mb_height != h->sps.mb_height * (2 - h->sps.frame_mbs_only_flag)",
          "3214:                     ));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "04220b473e9d7b22d737405348f9904f22bcfb96",
      "candidate_info": {
        "commit_hash": "04220b473e9d7b22d737405348f9904f22bcfb96",
        "repo": "FFmpeg/FFmpeg",
        "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/04220b473e9d7b22d737405348f9904f22bcfb96",
        "files": [
          "libavcodec/h264.c"
        ],
        "message": "h264: ensure that get_format() is called when changing format but not otherwise.\n\nFixes Ticket2288\n\nTested-by: Stefano Pigozzi <stefano.pigozzi@gmail.com>\nSigned-off-by: Michael Niedermayer <michaelni@gmx.at>",
        "before_after_code_files": [
          "libavcodec/h264.c||libavcodec/h264.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libavcodec/h264.c||libavcodec/h264.c"
          ],
          "candidate": [
            "libavcodec/h264.c||libavcodec/h264.c"
          ]
        }
      },
      "candidate_diff": {
        "libavcodec/h264.c||libavcodec/h264.c": [
          "File: libavcodec/h264.c -> libavcodec/h264.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2852:     return 0;",
          "2853: }",
          "2856: {",
          "2857:     switch (h->sps.bit_depth_luma) {",
          "2858:     case 9:",
          "",
          "[Removed Lines]",
          "2855: static enum PixelFormat get_pixel_format(H264Context *h)",
          "",
          "[Added Lines]",
          "2855: static enum PixelFormat get_pixel_format(H264Context *h, int force_callback)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2921:                                         hwaccel_pixfmt_list_h264_420;",
          "2923:             for (i=0; fmt[i] != AV_PIX_FMT_NONE; i++)",
          "2925:                     return fmt[i];",
          "2926:             return h->avctx->get_format(h->avctx, fmt);",
          "2927:         }",
          "",
          "[Removed Lines]",
          "2924:                 if (fmt[i] == h->avctx->pix_fmt)",
          "",
          "[Added Lines]",
          "2924:                 if (fmt[i] == h->avctx->pix_fmt && !force_callback)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3169:                      || h->avctx->bits_per_raw_sample != h->sps.bit_depth_luma",
          "3170:                      || h->cur_chroma_format_idc != h->sps.chroma_format_idc",
          "3171:                      || av_cmp_q(h->sps.sar, h->avctx->sample_aspect_ratio)));",
          "3173:         must_reinit = 1;",
          "3175:     h->mb_width  = h->sps.mb_width;",
          "",
          "[Removed Lines]",
          "3172:     if (h0->avctx->pix_fmt != get_pixel_format(h0))",
          "",
          "[Added Lines]",
          "3172:     if (h0->avctx->pix_fmt != get_pixel_format(h0, 0))",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3210:         flush_change(h);",
          "3213:             return ret;",
          "3214:         h->avctx->pix_fmt = ret;",
          "",
          "[Removed Lines]",
          "3212:         if ((ret = get_pixel_format(h)) < 0)",
          "",
          "[Added Lines]",
          "3212:         if ((ret = get_pixel_format(h, 1)) < 0)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3229:             return -1;",
          "3230:         }",
          "3233:             return ret;",
          "3234:         h->avctx->pix_fmt = ret;",
          "",
          "[Removed Lines]",
          "3232:         if ((ret = get_pixel_format(h)) < 0)",
          "",
          "[Added Lines]",
          "3232:         if ((ret = get_pixel_format(h, 1)) < 0)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5a9e3760495e8678ae87314670e3d9d5a1792c8d",
      "candidate_info": {
        "commit_hash": "5a9e3760495e8678ae87314670e3d9d5a1792c8d",
        "repo": "FFmpeg/FFmpeg",
        "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/5a9e3760495e8678ae87314670e3d9d5a1792c8d",
        "files": [
          "libavcodec/h264.c"
        ],
        "message": "h264: check mb_width/height\n\nFixes inconsistency that leads to out of array accesses with threads\n\nFound-by: Mateusz \"j00ru\" Jurczyk and Gynvael Coldwind\nSigned-off-by: Michael Niedermayer <michaelni@gmx.at>",
        "before_after_code_files": [
          "libavcodec/h264.c||libavcodec/h264.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libavcodec/h264.c||libavcodec/h264.c"
          ],
          "candidate": [
            "libavcodec/h264.c||libavcodec/h264.c"
          ]
        }
      },
      "candidate_diff": {
        "libavcodec/h264.c||libavcodec/h264.c": [
          "File: libavcodec/h264.c -> libavcodec/h264.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3310:                      || 16*h->sps.mb_height * (2 - h->sps.frame_mbs_only_flag) != h->avctx->coded_height",
          "3311:                      || h->avctx->bits_per_raw_sample != h->sps.bit_depth_luma",
          "3312:                      || h->cur_chroma_format_idc != h->sps.chroma_format_idc",
          "3314:     if (h0->avctx->pix_fmt != get_pixel_format(h0, 0))",
          "3315:         must_reinit = 1;",
          "",
          "[Removed Lines]",
          "3313:                      || av_cmp_q(h->sps.sar, h->avctx->sample_aspect_ratio)));",
          "",
          "[Added Lines]",
          "3313:                      || av_cmp_q(h->sps.sar, h->avctx->sample_aspect_ratio)",
          "3314:                      || h->mb_width  != h->sps.mb_width",
          "3315:                      || h->mb_height != h->sps.mb_height * (2 - h->sps.frame_mbs_only_flag)",
          "3316:                     ));",
          "",
          "---------------"
        ]
      }
    }
  ]
}