{
  "cve_id": "CVE-2021-37750",
  "cve_desc": "The Key Distribution Center (KDC) in MIT Kerberos 5 (aka krb5) before 1.18.5 and 1.19.x before 1.19.3 has a NULL pointer dereference in kdc/do_tgs_req.c via a FAST inner body that lacks a server field.",
  "repo": "krb5/krb5",
  "patch_hash": "d775c95af7606a51bf79547a94fa52ddd1cb7f49",
  "patch_info": {
    "commit_hash": "d775c95af7606a51bf79547a94fa52ddd1cb7f49",
    "repo": "krb5/krb5",
    "commit_url": "https://github.com/krb5/krb5/commit/d775c95af7606a51bf79547a94fa52ddd1cb7f49",
    "files": [
      "src/kdc/do_tgs_req.c"
    ],
    "message": "Fix KDC null deref on TGS inner body null server\n\nAfter the KDC decodes a FAST inner body, it does not check for a null\nserver.  Prior to commit 39548a5b17bbda9eeb63625a201cfd19b9de1c5b this\nwould typically result in an error from krb5_unparse_name(), but with\nthe addition of get_local_tgt() it results in a null dereference.  Add\na null check.\n\nReported by Joseph Sutton of Catalyst.\n\nCVE-2021-37750:\n\nIn MIT krb5 releases 1.14 and later, an authenticated attacker can\ncause a null dereference in the KDC by sending a FAST TGS request with\nno server field.\n\nticket: 9008 (new)\ntags: pullup\ntarget_version: 1.19-next\ntarget_version: 1.18-next",
    "before_after_code_files": [
      "src/kdc/do_tgs_req.c||src/kdc/do_tgs_req.c"
    ]
  },
  "patch_diff": {
    "src/kdc/do_tgs_req.c||src/kdc/do_tgs_req.c": [
      "File: src/kdc/do_tgs_req.c -> src/kdc/do_tgs_req.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "204:         status = \"FIND_FAST\";",
      "205:         goto cleanup;",
      "206:     }",
      "208:     errcode = get_local_tgt(kdc_context, &sprinc->realm, header_server,",
      "209:                             &local_tgt, &local_tgt_storage, &local_tgt_key);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "207:     if (sprinc == NULL) {",
      "208:         status = \"NULL_SERVER\";",
      "209:         errcode = KRB5KDC_ERR_S_PRINCIPAL_UNKNOWN;",
      "210:         goto cleanup;",
      "211:     }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "f5162aa63fb7652eae2ad74be4c3bdf869c0d1f7",
      "candidate_info": {
        "commit_hash": "f5162aa63fb7652eae2ad74be4c3bdf869c0d1f7",
        "repo": "krb5/krb5",
        "commit_url": "https://github.com/krb5/krb5/commit/f5162aa63fb7652eae2ad74be4c3bdf869c0d1f7",
        "files": [
          "src/kdc/do_tgs_req.c"
        ],
        "message": "Fix KDC null deref on TGS inner body null server\n\nAfter the KDC decodes a FAST inner body, it does not check for a null\nserver.  Prior to commit 39548a5b17bbda9eeb63625a201cfd19b9de1c5b this\nwould typically result in an error from krb5_unparse_name(), but with\nthe addition of get_local_tgt() it results in a null dereference.  Add\na null check.\n\nReported by Joseph Sutton of Catalyst.\n\nCVE-2021-37750:\n\nIn MIT krb5 releases 1.14 and later, an authenticated attacker can\ncause a null dereference in the KDC by sending a FAST TGS request with\nno server field.\n\n(cherry picked from commit d775c95af7606a51bf79547a94fa52ddd1cb7f49)\n\nticket: 9008\nversion_fixed: 1.19.3",
        "before_after_code_files": [
          "src/kdc/do_tgs_req.c||src/kdc/do_tgs_req.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/kdc/do_tgs_req.c||src/kdc/do_tgs_req.c"
          ],
          "candidate": [
            "src/kdc/do_tgs_req.c||src/kdc/do_tgs_req.c"
          ]
        }
      },
      "candidate_diff": {
        "src/kdc/do_tgs_req.c||src/kdc/do_tgs_req.c": [
          "File: src/kdc/do_tgs_req.c -> src/kdc/do_tgs_req.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "207:         status = \"FIND_FAST\";",
          "208:         goto cleanup;",
          "209:     }",
          "211:     errcode = get_local_tgt(kdc_context, &sprinc->realm, header_server,",
          "212:                             &local_tgt, &local_tgt_storage, &local_tgt_key);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "210:     if (sprinc == NULL) {",
          "211:         status = \"NULL_SERVER\";",
          "212:         errcode = KRB5KDC_ERR_S_PRINCIPAL_UNKNOWN;",
          "213:         goto cleanup;",
          "214:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fd9decf85055acca218c34c9e1222dc692b973d4",
      "candidate_info": {
        "commit_hash": "fd9decf85055acca218c34c9e1222dc692b973d4",
        "repo": "krb5/krb5",
        "commit_url": "https://github.com/krb5/krb5/commit/fd9decf85055acca218c34c9e1222dc692b973d4",
        "files": [
          "src/kdc/do_tgs_req.c"
        ],
        "message": "Fix KDC null deref on TGS inner body null server\n\nAfter the KDC decodes a FAST inner body, it does not check for a null\nserver.  Prior to commit 39548a5b17bbda9eeb63625a201cfd19b9de1c5b this\nwould typically result in an error from krb5_unparse_name(), but with\nthe addition of get_local_tgt() it results in a null dereference.  Add\na null check.\n\nReported by Joseph Sutton of Catalyst.\n\nCVE-2021-37750:\n\nIn MIT krb5 releases 1.14 and later, an authenticated attacker can\ncause a null dereference in the KDC by sending a FAST TGS request with\nno server field.\n\n(cherry picked from commit d775c95af7606a51bf79547a94fa52ddd1cb7f49)\n\nticket: 9008\nversion_fixed: 1.18.5",
        "before_after_code_files": [
          "src/kdc/do_tgs_req.c||src/kdc/do_tgs_req.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/kdc/do_tgs_req.c||src/kdc/do_tgs_req.c"
          ],
          "candidate": [
            "src/kdc/do_tgs_req.c||src/kdc/do_tgs_req.c"
          ]
        }
      },
      "candidate_diff": {
        "src/kdc/do_tgs_req.c||src/kdc/do_tgs_req.c": [
          "File: src/kdc/do_tgs_req.c -> src/kdc/do_tgs_req.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "208:         status = \"FIND_FAST\";",
          "209:         goto cleanup;",
          "210:     }",
          "212:     errcode = get_local_tgt(kdc_context, &sprinc->realm, header_server,",
          "213:                             &local_tgt, &local_tgt_storage, &local_tgt_key);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "210:     }",
          "211:     if (sprinc == NULL) {",
          "212:         status = \"NULL_SERVER\";",
          "213:         errcode = KRB5KDC_ERR_S_PRINCIPAL_UNKNOWN;",
          "214:         goto cleanup;",
          "",
          "---------------"
        ]
      }
    }
  ]
}