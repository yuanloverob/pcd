{
  "cve_id": "CVE-2021-4187",
  "cve_desc": "vim is vulnerable to Use After Free",
  "repo": "vim/vim",
  "patch_hash": "4bf1006cae7e87259ccd5219128c3dba75774441",
  "patch_info": {
    "commit_hash": "4bf1006cae7e87259ccd5219128c3dba75774441",
    "repo": "vim/vim",
    "commit_url": "https://github.com/vim/vim/commit/4bf1006cae7e87259ccd5219128c3dba75774441",
    "files": [
      "src/testdir/test_vim9_func.vim",
      "src/userfunc.c",
      "src/version.c"
    ],
    "message": "patch 8.2.3923: Vim9: double free with split argument list in nested function\n\nProblem:    Vim9: double free if a nested function has a line break in the\n            argument list.\nSolution:   Set cmdlinep when freeing the previous line.",
    "before_after_code_files": [
      "src/testdir/test_vim9_func.vim||src/testdir/test_vim9_func.vim",
      "src/userfunc.c||src/userfunc.c",
      "src/version.c||src/version.c"
    ]
  },
  "patch_diff": {
    "src/testdir/test_vim9_func.vim||src/testdir/test_vim9_func.vim": [
      "File: src/testdir/test_vim9_func.vim -> src/testdir/test_vim9_func.vim",
      "--- Hunk 1 ---",
      "[Context before]",
      "1669:   assert_fails('FuncWithForwardCall()', 'E1096:', '', 1, 'FuncWithForwardCall')",
      "1670: enddef",
      "1673:   var lines =<< trim END",
      "1674:       vim9script",
      "1675:       # Define an outer function",
      "",
      "[Removed Lines]",
      "1672: def Test_nested_functin_with_nextcmd()",
      "",
      "[Added Lines]",
      "1672: def Test_nested_function_with_nextcmd()",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1689:   CheckScriptFailure(lines, 'E476: Invalid command: AAAAA')",
      "1690: enddef",
      "1692: def Test_return_type_wrong()",
      "1693:   CheckScriptFailure([",
      "1694:         'def Func(): number',",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1692: def Test_nested_function_with_args_split()",
      "1693:   var lines =<< trim END",
      "1694:       vim9script",
      "1695:       def FirstFunction()",
      "1696:         def SecondFunction(",
      "1697:         )",
      "1698:         # had a double free if the right parenthesis of the nested function is",
      "1699:         # on the next line",
      "1701:         enddef|BBBB",
      "1702:       enddef",
      "1703:       # Compile all functions",
      "1704:       defcompile",
      "1705:   END",
      "1706:   # FIXME: this should fail on the BBBB",
      "1707:   CheckScriptSuccess(lines)",
      "1708: enddef",
      "",
      "---------------"
    ],
    "src/userfunc.c||src/userfunc.c": [
      "File: src/userfunc.c -> src/userfunc.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "219:      if (theline == NULL)",
      "220:   break;",
      "221:      vim_free(*line_to_free);",
      "223:      whitep = (char_u *)\" \";",
      "224:      p = skipwhite(theline);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "222:      if (*eap->cmdlinep == *line_to_free)",
      "",
      "---------------"
    ],
    "src/version.c||src/version.c": [
      "File: src/version.c -> src/version.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "750: static int included_patches[] =",
      "753:     3922,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "753:     3923,",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "7473a84cf935f64ddd4ea7fe7eee0f9c51c50b60",
      "candidate_info": {
        "commit_hash": "7473a84cf935f64ddd4ea7fe7eee0f9c51c50b60",
        "repo": "vim/vim",
        "commit_url": "https://github.com/vim/vim/commit/7473a84cf935f64ddd4ea7fe7eee0f9c51c50b60",
        "files": [
          "src/errors.h",
          "src/testdir/test_vim9_func.vim",
          "src/userfunc.c",
          "src/version.c",
          "src/vim9compile.c"
        ],
        "message": "patch 8.2.3924: Vim9: no error if something follows :enddef\n\nProblem:    Vim9: no error if something follows :enddef in a nested function.\nSolution:   Give an error.  Move common code to a function.",
        "before_after_code_files": [
          "src/errors.h||src/errors.h",
          "src/testdir/test_vim9_func.vim||src/testdir/test_vim9_func.vim",
          "src/userfunc.c||src/userfunc.c",
          "src/version.c||src/version.c",
          "src/vim9compile.c||src/vim9compile.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/testdir/test_vim9_func.vim||src/testdir/test_vim9_func.vim",
            "src/userfunc.c||src/userfunc.c",
            "src/version.c||src/version.c"
          ],
          "candidate": [
            "src/testdir/test_vim9_func.vim||src/testdir/test_vim9_func.vim",
            "src/userfunc.c||src/userfunc.c",
            "src/version.c||src/version.c"
          ]
        }
      },
      "candidate_diff": {
        "src/errors.h||src/errors.h": [
          "File: src/errors.h -> src/errors.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "717:  INIT(= N_(\"E1171: Missing } after inline function\"));",
          "718: EXTERN char e_cannot_use_default_values_in_lambda[]",
          "719:  INIT(= N_(\"E1172: Cannot use default values in a lambda\"));",
          "722: EXTERN char e_string_required_for_argument_nr[]",
          "723:  INIT(= N_(\"E1174: String required for argument %d\"));",
          "724: EXTERN char e_non_empty_string_required_for_argument_nr[]",
          "",
          "[Removed Lines]",
          "720: EXTERN char e_text_found_after_enddef_str[]",
          "721:  INIT(= N_(\"E1173: Text found after enddef: %s\"));",
          "",
          "[Added Lines]",
          "720: EXTERN char e_text_found_after_str_str[]",
          "721:  INIT(= N_(\"E1173: Text found after %s: %s\"));",
          "",
          "---------------"
        ],
        "src/testdir/test_vim9_func.vim||src/testdir/test_vim9_func.vim": [
          "File: src/testdir/test_vim9_func.vim -> src/testdir/test_vim9_func.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "1686:       # Compile all functions",
          "1687:       defcompile",
          "1688:   END",
          "1690: enddef",
          "1692: def Test_nested_function_with_args_split()",
          "",
          "[Removed Lines]",
          "1689:   CheckScriptFailure(lines, 'E476: Invalid command: AAAAA')",
          "",
          "[Added Lines]",
          "1689:   CheckScriptFailure(lines, 'E1173: Text found after enddef: BBBB')",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1703:       # Compile all functions",
          "1704:       defcompile",
          "1705:   END",
          "1708: enddef",
          "1710: def Test_return_type_wrong()",
          "",
          "[Removed Lines]",
          "1706:   # FIXME: this should fail on the BBBB",
          "1707:   CheckScriptSuccess(lines)",
          "",
          "[Added Lines]",
          "1706:   CheckScriptFailure(lines, 'E1173: Text found after enddef: BBBB')",
          "1708:   lines =<< trim END",
          "1709:       vim9script",
          "1710:       def FirstFunction()",
          "1711:         func SecondFunction()",
          "1712:         endfunc|BBBB",
          "1713:       enddef",
          "1714:       defcompile",
          "1715:   END",
          "1716:   CheckScriptFailure(lines, 'E1173: Text found after endfunction: BBBB')",
          "",
          "---------------"
        ],
        "src/userfunc.c||src/userfunc.c": [
          "File: src/userfunc.c -> src/userfunc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "165:     return p;",
          "166: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "173:     static char_u *",
          "174: get_function_line(",
          "175:  exarg_T  *eap,",
          "176:  char_u  **line_to_free,",
          "177:  getline_opt_T getline_options,",
          "178:  int  indent)",
          "179: {",
          "180:     char_u *theline;",
          "182:     if (eap->getline == NULL)",
          "183:  theline = getcmdline(':', 0L, indent, getline_options);",
          "184:     else",
          "185:  theline = eap->getline(':', eap->cookie, indent, getline_options);",
          "186:     if (theline != NULL)",
          "187:     {",
          "188:  if (*eap->cmdlinep == *line_to_free)",
          "190:  vim_free(*line_to_free);",
          "192:     }",
          "194:     return theline;",
          "195: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "212:  while (eap != NULL && eap->getline != NULL",
          "213:     && (*p == NUL || (VIM_ISWHITE(*whitep) && *p == '#')))",
          "214:  {",
          "219:      if (theline == NULL)",
          "220:   break;",
          "225:      whitep = (char_u *)\" \";",
          "226:      p = skipwhite(theline);",
          "227:  }",
          "",
          "[Removed Lines]",
          "215:      char_u *theline;",
          "218:      theline = eap->getline(':', eap->cookie, 0, TRUE);",
          "221:      vim_free(*line_to_free);",
          "222:      if (*eap->cmdlinep == *line_to_free)",
          "",
          "[Added Lines]",
          "245:      char_u *theline = get_function_line(eap, line_to_free, 0, TRUE);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "720:  }",
          "721:  else",
          "722:  {",
          "727:              getline_options);",
          "732:  }",
          "733:  if (KeyTyped)",
          "734:      lines_left = Rows - 1;",
          "",
          "[Removed Lines]",
          "723:      if (eap->getline == NULL)",
          "724:   theline = getcmdline(':', 0L, indent, getline_options);",
          "725:      else",
          "726:   theline = eap->getline(':', eap->cookie, indent,",
          "728:      if (*eap->cmdlinep == *line_to_free)",
          "730:      vim_free(*line_to_free);",
          "",
          "[Added Lines]",
          "747:      theline = get_function_line(eap, line_to_free, indent,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "827:    SOURCING_LNUM = sourcing_lnum_top",
          "828:        + newlines->ga_len + 1;",
          "829:    if (eap->cmdidx == CMD_def)",
          "831:    else",
          "832:        give_warning2((char_u *)",
          "833:        _(\"W22: Text found after :endfunction: %s\"),",
          "",
          "[Removed Lines]",
          "830:        semsg(_(e_text_found_after_enddef_str), p);",
          "",
          "[Added Lines]",
          "847:        semsg(_(e_text_found_after_str_str), \"enddef\", p);",
          "",
          "---------------"
        ],
        "src/version.c||src/version.c": [
          "File: src/version.c -> src/version.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "750: static int included_patches[] =",
          "753:     3923,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "753:     3924,",
          "",
          "---------------"
        ],
        "src/vim9compile.c||src/vim9compile.c": [
          "File: src/vim9compile.c -> src/vim9compile.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "879:     }",
          "881:     ufunc = define_function(eap, lambda_name, line_to_free);",
          "883:     if (ufunc == NULL)",
          "884:     {",
          "885:  r = eap->skip ? OK : FAIL;",
          "886:  goto theend;",
          "887:     }",
          "890:     if (!is_global && cctx->ctx_ufunc->uf_block_depth > 0)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "887:     if (eap->nextcmd != NULL)",
          "888:     {",
          "889:  semsg(_(e_text_found_after_str_str),",
          "890:        eap->cmdidx == CMD_def ? \"enddef\" : \"endfunction\", eap->nextcmd);",
          "891:  r = FAIL;",
          "892:  goto theend;",
          "893:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9c23f9bb5fe435b28245ba8ac65aa0ca6b902c04",
      "candidate_info": {
        "commit_hash": "9c23f9bb5fe435b28245ba8ac65aa0ca6b902c04",
        "repo": "vim/vim",
        "commit_url": "https://github.com/vim/vim/commit/9c23f9bb5fe435b28245ba8ac65aa0ca6b902c04",
        "files": [
          "src/proto/userfunc.pro",
          "src/testdir/test_vim9_func.vim",
          "src/userfunc.c",
          "src/version.c",
          "src/vim9compile.c",
          "src/vim9execute.c"
        ],
        "message": "patch 8.2.3902: Vim9: double free with nested :def function\n\nProblem:    Vim9: double free with nested :def function.\nSolution:   Pass \"line_to_free\" from compile_def_function() and make sure\n            cmdlinep is valid.",
        "before_after_code_files": [
          "src/proto/userfunc.pro||src/proto/userfunc.pro",
          "src/testdir/test_vim9_func.vim||src/testdir/test_vim9_func.vim",
          "src/userfunc.c||src/userfunc.c",
          "src/version.c||src/version.c",
          "src/vim9compile.c||src/vim9compile.c",
          "src/vim9execute.c||src/vim9execute.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/testdir/test_vim9_func.vim||src/testdir/test_vim9_func.vim",
            "src/userfunc.c||src/userfunc.c",
            "src/version.c||src/version.c"
          ],
          "candidate": [
            "src/testdir/test_vim9_func.vim||src/testdir/test_vim9_func.vim",
            "src/userfunc.c||src/userfunc.c",
            "src/version.c||src/version.c"
          ]
        }
      },
      "candidate_diff": {
        "src/proto/userfunc.pro||src/proto/userfunc.pro": [
          "File: src/proto/userfunc.pro -> src/proto/userfunc.pro",
          "--- Hunk 1 ---",
          "[Context before]",
          "38: char_u *get_scriptlocal_funcname(char_u *funcname);",
          "39: char_u *save_function_name(char_u **name, int *is_global, int skip, int flags, funcdict_T *fudi);",
          "40: void list_functions(regmatch_T *regmatch);",
          "42: void ex_function(exarg_T *eap);",
          "43: void ex_defcompile(exarg_T *eap);",
          "44: int eval_fname_script(char_u *p);",
          "",
          "[Removed Lines]",
          "41: ufunc_T *define_function(exarg_T *eap, char_u *name_arg);",
          "",
          "[Added Lines]",
          "41: ufunc_T *define_function(exarg_T *eap, char_u *name_arg, char_u **line_to_free);",
          "",
          "---------------"
        ],
        "src/testdir/test_vim9_func.vim||src/testdir/test_vim9_func.vim": [
          "File: src/testdir/test_vim9_func.vim -> src/testdir/test_vim9_func.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "1669:   assert_fails('FuncWithForwardCall()', 'E1096:', '', 1, 'FuncWithForwardCall')",
          "1670: enddef",
          "1672: def Test_return_type_wrong()",
          "1673:   CheckScriptFailure([",
          "1674:         'def Func(): number',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1672: def Test_nested_functin_with_nextcmd()",
          "1673:   var lines =<< trim END",
          "1674:       vim9script",
          "1675:       # Define an outer function",
          "1676:       def FirstFunction()",
          "1677:         # Define an inner function",
          "1678:         def SecondFunction()",
          "1679:           # the function has a body, a double free is detected.",
          "1680:           AAAAA",
          "1682:          # enddef followed by | or } followed by # one or more characters",
          "1683:          enddef|BBBB",
          "1684:       enddef",
          "1686:       # Compile all functions",
          "1687:       defcompile",
          "1688:   END",
          "1689:   CheckScriptFailure(lines, 'E476: Invalid command: AAAAA')",
          "1690: enddef",
          "",
          "---------------"
        ],
        "src/userfunc.c||src/userfunc.c": [
          "File: src/userfunc.c -> src/userfunc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "720:  }",
          "721:  else",
          "722:  {",
          "724:      if (eap->getline == NULL)",
          "725:   theline = getcmdline(':', 0L, indent, getline_options);",
          "726:      else",
          "727:   theline = eap->getline(':', eap->cookie, indent,",
          "728:              getline_options);",
          "730:  }",
          "731:  if (KeyTyped)",
          "",
          "[Removed Lines]",
          "723:      vim_free(*line_to_free);",
          "",
          "[Added Lines]",
          "728:      if (*eap->cmdlinep == *line_to_free)",
          "730:      vim_free(*line_to_free);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "839:    eap->nextcmd = nextcmd;",
          "841:    {",
          "842:        vim_free(*eap->cmdlinep);",
          "",
          "[Removed Lines]",
          "840:    if (*line_to_free != NULL)",
          "",
          "[Added Lines]",
          "842:    if (*line_to_free != NULL",
          "843:          && *eap->cmdlinep != *line_to_free)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1161:  }",
          "1162:  if (ga_grow(gap, 1) == FAIL || ga_grow(freegap, 1) == FAIL)",
          "1163:      goto erret;",
          "1166:      last = cmdline;",
          "1167:  else",
          "",
          "[Removed Lines]",
          "1164:  if (cmdline != NULL)",
          "",
          "[Added Lines]",
          "1167:  if (eap.nextcmd != NULL)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1175:  ((char_u **)freegap->ga_data)[freegap->ga_len++] = pnl;",
          "1176:     }",
          "1179:     {",
          "1180:  garray_T *tfgap = &evalarg->eval_tofree_ga;",
          "",
          "[Removed Lines]",
          "1178:     if (cmdline != NULL)",
          "",
          "[Added Lines]",
          "1181:     if (eap.nextcmd != NULL)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1187:  {",
          "1188:      ((char_u **)(tfgap->ga_data))[tfgap->ga_len++] = cmdline;",
          "1189:      evalarg->eval_using_cmdline = TRUE;",
          "1190:  }",
          "1191:     }",
          "1192:     else",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1193:      if (cmdline == line_to_free)",
          "1194:   line_to_free = NULL;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "3990:     ufunc_T *",
          "3992: {",
          "3994:     int  j;",
          "3995:     int  c;",
          "3996:     int  saved_did_emsg;",
          "",
          "[Removed Lines]",
          "3991: define_function(exarg_T *eap, char_u *name_arg)",
          "3993:     char_u *line_to_free = NULL;",
          "",
          "[Added Lines]",
          "3996: define_function(exarg_T *eap, char_u *name_arg, char_u **line_to_free)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "4258:     if (get_function_args(&p, ')', &newargs,",
          "4259:    eap->cmdidx == CMD_def ? &argtypes : NULL, FALSE,",
          "4260:     NULL, &varargs, &default_args, eap->skip,",
          "4262:  goto errret_2;",
          "4263:     whitep = p;",
          "",
          "[Removed Lines]",
          "4261:     eap, &line_to_free) == FAIL)",
          "",
          "[Added Lines]",
          "4265:     eap, line_to_free) == FAIL)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "4372:      || eap->skip)",
          "4373:  goto erret;",
          "",
          "[Removed Lines]",
          "4371:     if (get_function_body(eap, &newlines, line_arg, &line_to_free) == FAIL",
          "",
          "[Added Lines]",
          "4375:     if (get_function_body(eap, &newlines, line_arg, line_to_free) == FAIL",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "4660:     }",
          "4661: ret_free:",
          "4662:     ga_clear_strings(&argtypes);",
          "4664:     vim_free(fudi.fd_newkey);",
          "4665:     if (name != name_arg)",
          "4666:  vim_free(name);",
          "",
          "[Removed Lines]",
          "4663:     vim_free(line_to_free);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "4676:     void",
          "4677: ex_function(exarg_T *eap)",
          "4678: {",
          "4680: }",
          "",
          "[Removed Lines]",
          "4679:     (void)define_function(eap, NULL);",
          "",
          "[Added Lines]",
          "4682:     char_u *line_to_free = NULL;",
          "4684:     (void)define_function(eap, NULL, &line_to_free);",
          "4685:     vim_free(line_to_free);",
          "",
          "---------------"
        ],
        "src/version.c||src/version.c": [
          "File: src/version.c -> src/version.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "750: static int included_patches[] =",
          "753:     3901,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "753:     3902,",
          "",
          "---------------"
        ],
        "src/vim9compile.c||src/vim9compile.c": [
          "File: src/vim9compile.c -> src/vim9compile.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "814:     static char_u *",
          "816: {",
          "817:     int  is_global = *eap->arg == 'g' && eap->arg[1] == ':';",
          "818:     char_u *name_start = eap->arg;",
          "819:     char_u *name_end = to_name_end(eap->arg, TRUE);",
          "820:     char_u *lambda_name;",
          "821:     ufunc_T *ufunc;",
          "822:     int  r = FAIL;",
          "",
          "[Removed Lines]",
          "815: compile_nested_function(exarg_T *eap, cctx_T *cctx)",
          "",
          "[Added Lines]",
          "815: compile_nested_function(exarg_T *eap, cctx_T *cctx, char_u **line_to_free)",
          "820:     int  off;",
          "821:     char_u *func_name;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "866:     lambda_name = vim_strsave(get_lambda_name());",
          "867:     if (lambda_name == NULL)",
          "868:  return NULL;",
          "871:     if (ufunc == NULL)",
          "872:     {",
          "",
          "[Removed Lines]",
          "869:     ufunc = define_function(eap, lambda_name);",
          "",
          "[Added Lines]",
          "873:     off = is_global ? 2 : 0;",
          "874:     func_name = vim_strnsave(name_start + off, name_end - name_start - off);",
          "875:     if (func_name == NULL)",
          "876:     {",
          "877:  r = FAIL;",
          "878:  goto theend;",
          "879:     }",
          "881:     ufunc = define_function(eap, lambda_name, line_to_free);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "912:     if (is_global)",
          "913:     {",
          "924:     }",
          "925:     else",
          "926:     {",
          "929:           TRUE, ufunc->uf_func_type);",
          "931:  if (lvar == NULL)",
          "",
          "[Removed Lines]",
          "914:  char_u *func_name = vim_strnsave(name_start + 2,",
          "915:           name_end - name_start - 2);",
          "917:  if (func_name == NULL)",
          "918:      r = FAIL;",
          "919:  else",
          "920:  {",
          "921:      r = generate_NEWFUNC(cctx, lambda_name, func_name);",
          "922:      lambda_name = NULL;",
          "923:  }",
          "928:  lvar_T *lvar = reserve_local(cctx, name_start, name_end - name_start,",
          "",
          "[Added Lines]",
          "926:  r = generate_NEWFUNC(cctx, lambda_name, func_name);",
          "927:  func_name = NULL;",
          "928:  lambda_name = NULL;",
          "933:  lvar_T *lvar = reserve_local(cctx, func_name, name_end - name_start,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "938: theend:",
          "939:     vim_free(lambda_name);",
          "940:     return r == FAIL ? NULL : (char_u *)\"\";",
          "941: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "945:     vim_free(func_name);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2861:      case CMD_def:",
          "2862:      case CMD_function:",
          "2863:       ea.arg = p;",
          "2865:       break;",
          "2867:      case CMD_return:",
          "",
          "[Removed Lines]",
          "2864:       line = compile_nested_function(&ea, &cctx);",
          "",
          "[Added Lines]",
          "2870:       line = compile_nested_function(&ea, &cctx, &line_to_free);",
          "",
          "---------------"
        ],
        "src/vim9execute.c||src/vim9execute.c": [
          "File: src/vim9execute.c -> src/vim9execute.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3345:   else",
          "3346:   {",
          "3347:       exarg_T ea;",
          "3349:       CLEAR_FIELD(ea);",
          "3350:       ea.cmd = ea.arg = iptr->isn_arg.string;",
          "3352:   }",
          "3353:   break;",
          "",
          "[Removed Lines]",
          "3351:       define_function(&ea, NULL);",
          "",
          "[Added Lines]",
          "3348:       char_u  *line_to_free = NULL;",
          "3352:       define_function(&ea, NULL, &line_to_free);",
          "3353:       vim_free(line_to_free);",
          "",
          "---------------"
        ]
      }
    }
  ]
}