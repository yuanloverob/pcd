{
  "cve_id": "CVE-2019-10664",
  "cve_desc": "Domoticz before 4.10578 allows SQL Injection via the idx parameter in CWebServer::GetFloorplanImage in WebServer.cpp.",
  "repo": "domoticz/domoticz",
  "patch_hash": "ee70db46f81afa582c96b887b73bcd2a86feda00",
  "patch_info": {
    "commit_hash": "ee70db46f81afa582c96b887b73bcd2a86feda00",
    "repo": "domoticz/domoticz",
    "commit_url": "https://github.com/domoticz/domoticz/commit/ee70db46f81afa582c96b887b73bcd2a86feda00",
    "files": [
      "main/WebServer.cpp"
    ],
    "message": "Fixed possible SQL Injection Vulnerability (Thanks to Fabio Carretto!)",
    "before_after_code_files": [
      "main/WebServer.cpp||main/WebServer.cpp"
    ]
  },
  "patch_diff": {
    "main/WebServer.cpp||main/WebServer.cpp": [
      "File: main/WebServer.cpp -> main/WebServer.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "10772:     return;",
      "10773:    }",
      "10774:    std::vector<std::vector<std::string> > result;",
      "10776:    if (result.empty())",
      "10777:     return;",
      "10778:    reply::set_content(&rep, result[0][0].begin(), result[0][0].end());",
      "",
      "[Removed Lines]",
      "10775:    result = m_sql.safe_queryBlob(\"SELECT Image FROM Floorplans WHERE ID=%s\", idx.c_str());",
      "",
      "[Added Lines]",
      "10775:    result = m_sql.safe_queryBlob(\"SELECT Image FROM Floorplans WHERE ID=%d\", atol(idx.c_str()));",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "d61bb18e17f9d9acd56e88ba3c28363235cb7633",
      "candidate_info": {
        "commit_hash": "d61bb18e17f9d9acd56e88ba3c28363235cb7633",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/d61bb18e17f9d9acd56e88ba3c28363235cb7633",
        "files": [
          "main/domoticz.cpp"
        ],
        "message": "Start logging to file earlier in main()",
        "before_after_code_files": [
          "main/domoticz.cpp||main/domoticz.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "main/domoticz.cpp||main/domoticz.cpp": [
          "File: main/domoticz.cpp -> main/domoticz.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "752:     _log.Log(LOG_ERROR, \"Please specify an output log file\");",
          "753:     return 1;",
          "754:    }",
          "755:   }",
          "756:   if (cmdLine.HasSwitch(\"-approot\"))",
          "757:   {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "755:    logfile = cmdLine.GetSafeArgument(\"-log\", 0, \"domoticz.log\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "766:   }",
          "767:  }",
          "769:  if (szStartupFolder.empty())",
          "770:  {",
          "771: #if !defined WIN32",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "770:  if (!logfile.empty())",
          "771:   _log.SetOutputFile(logfile.c_str());",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1186:  }",
          "1187:  m_StartTime = time(NULL);",
          "1199: #if defined WIN32",
          "",
          "[Removed Lines]",
          "1189:  if (!bUseConfigFile) {",
          "1190:   if (cmdLine.HasSwitch(\"-log\"))",
          "1191:   {",
          "1192:    logfile = cmdLine.GetSafeArgument(\"-log\", 0, \"domoticz.log\");",
          "1193:   }",
          "1194:  }",
          "1195:  if (!logfile.empty())",
          "1196:   _log.SetOutputFile(logfile.c_str());",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "98912c1a85dd2e919fded367e0974b0bc8172575",
      "candidate_info": {
        "commit_hash": "98912c1a85dd2e919fded367e0974b0bc8172575",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/98912c1a85dd2e919fded367e0974b0bc8172575",
        "files": [
          "hardware/plugins/PluginTransports.cpp"
        ],
        "message": "Bug Fix: Stop TCP Listening connections crashing on plugin shutdown",
        "before_after_code_files": [
          "hardware/plugins/PluginTransports.cpp||hardware/plugins/PluginTransports.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "hardware/plugins/PluginTransports.cpp||hardware/plugins/PluginTransports.cpp": [
          "File: hardware/plugins/PluginTransports.cpp -> hardware/plugins/PluginTransports.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "144:     boost::asio::ip::tcp::socket* pSocket = new boost::asio::ip::tcp::socket(ios);",
          "145:     m_Acceptor->async_accept((boost::asio::ip::tcp::socket&)*pSocket, boost::bind(&CPluginTransportTCP::handleAsyncAccept, this, pSocket, boost::asio::placeholders::error));",
          "146:    }",
          "147:   }",
          "148:   catch (std::exception& e)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "146:     m_bConnecting = true;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9e75a45a0bc2796ef404fa0e46dea2649e516885",
      "candidate_info": {
        "commit_hash": "9e75a45a0bc2796ef404fa0e46dea2649e516885",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/9e75a45a0bc2796ef404fa0e46dea2649e516885",
        "files": [
          "hardware/AccuWeather.cpp",
          "hardware/DomoticzHardware.cpp",
          "hardware/DomoticzHardware.h",
          "hardware/Meteostick.cpp",
          "hardware/MySensorsBase.cpp",
          "hardware/Netatmo.cpp",
          "hardware/OpenWeatherMap.cpp",
          "hardware/RFLinkBase.cpp",
          "hardware/Rtl433.cpp",
          "hardware/Tellstick.cpp",
          "hardware/Winddelen.cpp",
          "hardware/hardwaretypes.h",
          "main/RFXNames.cpp",
          "main/SQLHelper.cpp",
          "main/WebServer.cpp",
          "main/mainworker.cpp",
          "msbuild/domoticz.vcxproj",
          "push/BasePush.cpp"
        ],
        "message": "Added new Wind sensor without Temp and Chill",
        "before_after_code_files": [
          "hardware/AccuWeather.cpp||hardware/AccuWeather.cpp",
          "hardware/DomoticzHardware.cpp||hardware/DomoticzHardware.cpp",
          "hardware/DomoticzHardware.h||hardware/DomoticzHardware.h",
          "hardware/Meteostick.cpp||hardware/Meteostick.cpp",
          "hardware/MySensorsBase.cpp||hardware/MySensorsBase.cpp",
          "hardware/Netatmo.cpp||hardware/Netatmo.cpp",
          "hardware/OpenWeatherMap.cpp||hardware/OpenWeatherMap.cpp",
          "hardware/RFLinkBase.cpp||hardware/RFLinkBase.cpp",
          "hardware/Rtl433.cpp||hardware/Rtl433.cpp",
          "hardware/Tellstick.cpp||hardware/Tellstick.cpp",
          "hardware/Winddelen.cpp||hardware/Winddelen.cpp",
          "hardware/hardwaretypes.h||hardware/hardwaretypes.h",
          "main/RFXNames.cpp||main/RFXNames.cpp",
          "main/SQLHelper.cpp||main/SQLHelper.cpp",
          "main/WebServer.cpp||main/WebServer.cpp",
          "main/mainworker.cpp||main/mainworker.cpp",
          "msbuild/domoticz.vcxproj||msbuild/domoticz.vcxproj",
          "push/BasePush.cpp||push/BasePush.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [
            "main/WebServer.cpp||main/WebServer.cpp"
          ],
          "candidate": [
            "main/WebServer.cpp||main/WebServer.cpp"
          ]
        }
      },
      "candidate_diff": {
        "hardware/AccuWeather.cpp||hardware/AccuWeather.cpp": [
          "File: hardware/AccuWeather.cpp -> hardware/AccuWeather.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "371:    }",
          "372:    if (wind_degrees != -1)",
          "373:    {",
          "375:    }",
          "376:   }",
          "",
          "[Removed Lines]",
          "374:     SendWind(1, 255, wind_degrees, windspeed_ms, windgust_ms, temp, wind_chill, true, \"Wind\");",
          "",
          "[Added Lines]",
          "374:     SendWind(1, 255, wind_degrees, windspeed_ms, windgust_ms, temp, wind_chill, true, true, \"Wind\");",
          "",
          "---------------"
        ],
        "hardware/DomoticzHardware.cpp||hardware/DomoticzHardware.cpp": [
          "File: hardware/DomoticzHardware.cpp -> hardware/DomoticzHardware.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "786: }",
          "790: {",
          "791:  RBUF tsen;",
          "792:  memset(&tsen, 0, sizeof(RBUF));",
          "793:  tsen.WIND.packetlength = sizeof(tsen.WIND) - 1;",
          "794:  tsen.WIND.packettype = pTypeWIND;",
          "796:   tsen.WIND.subtype = sTypeWINDNoTemp;",
          "797:  else",
          "798:   tsen.WIND.subtype = sTypeWIND4;",
          "799:  tsen.WIND.battery_level = BatteryLevel;",
          "800:  tsen.WIND.rssi = RssiLevel;",
          "801:  tsen.WIND.id1 = (NodeID & 0xFF00) >> 8;",
          "",
          "[Removed Lines]",
          "789: void CDomoticzHardwareBase::SendWind(const int NodeID, const int BatteryLevel, const int WindDir, const float WindSpeed, const float WindGust, const float WindTemp, const float WindChill, const bool bHaveWindTemp, const std::string &defaultname, const int RssiLevel /* =12 */)",
          "795:  if (!bHaveWindTemp)",
          "",
          "[Added Lines]",
          "789: void CDomoticzHardwareBase::SendWind(const int NodeID, const int BatteryLevel, const int WindDir, const float WindSpeed, const float WindGust, const float WindTemp, const float WindChill, const bool bHaveWindTemp, const bool bHaveWindChill, const std::string &defaultname, const int RssiLevel /* =12 */)",
          "796:  if ((!bHaveWindTemp) && (!bHaveWindChill))",
          "797:   tsen.WIND.subtype = sTypeWINDNoTempNoChill;",
          "798:  else if (!bHaveWindTemp)",
          "",
          "---------------"
        ],
        "hardware/DomoticzHardware.h||hardware/DomoticzHardware.h": [
          "File: hardware/DomoticzHardware.h -> hardware/DomoticzHardware.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "98:  void SendRainSensor(const int NodeID, const int BatteryLevel, const float RainCounter, const std::string &defaultname, const int RssiLevel = 12);",
          "99:  float GetRainSensorValue(const int NodeID, bool &bExists);",
          "100:  bool GetWindSensorValue(const int NodeID, int &WindDir, float &WindSpeed, float &WindGust, float &twindtemp, float &windchill, bool bHaveWindTemp, bool &bExists);",
          "102:  void SendPressureSensor(const int NodeID, const int ChildID, const int BatteryLevel, const float pressure, const std::string &defaultname);",
          "103:  void SendSolarRadiationSensor(const unsigned char NodeID, const int BatteryLevel, const float radiation, const std::string &defaultname);",
          "104:  void SendDistanceSensor(const int NodeID, const int ChildID, const int BatteryLevel, const float distance, const std::string &defaultname);",
          "",
          "[Removed Lines]",
          "101:  void SendWind(const int NodeID, const int BatteryLevel, const int WindDir, const float WindSpeed, const float WindGust, const float WindTemp, const float WindChill, const bool bHaveWindTemp, const std::string &defaultname, const int RssiLevel = 12);",
          "",
          "[Added Lines]",
          "101:  void SendWind(const int NodeID, const int BatteryLevel, const int WindDir, const float WindSpeed, const float WindGust, const float WindTemp, const float WindChill, const bool bHaveWindTemp, const bool bHaveWindChill, const std::string &defaultname, const int RssiLevel = 12);",
          "",
          "---------------"
        ],
        "hardware/Meteostick.cpp||hardware/Meteostick.cpp": [
          "File: hardware/Meteostick.cpp -> hardware/Meteostick.cpp"
        ],
        "hardware/MySensorsBase.cpp||hardware/MySensorsBase.cpp": [
          "File: hardware/MySensorsBase.cpp -> hardware/MySensorsBase.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "563:   }",
          "564:  }",
          "565:  int cNode = (nodeID << 8) | ChildID;",
          "567: }",
          "569: void MySensorsBase::SendSensor2Domoticz(_tMySensorNode *pNode, _tMySensorChild *pChild, const _eSetType vType)",
          "",
          "[Removed Lines]",
          "566:  SendWind(cNode, iBatteryLevel, iDirection, fWind, fGust, fTemp, fChill, bHaveTemp, sname);",
          "",
          "[Added Lines]",
          "566:  SendWind(cNode, iBatteryLevel, iDirection, fWind, fGust, fTemp, fChill, bHaveTemp, true, sname);",
          "",
          "---------------"
        ],
        "hardware/Netatmo.cpp||hardware/Netatmo.cpp": [
          "File: hardware/Netatmo.cpp -> hardware/Netatmo.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "573:  if (bHaveWind)",
          "574:  {",
          "576:  }",
          "577:  return true;",
          "578: }",
          "",
          "[Removed Lines]",
          "575:   SendWind(ID, batValue, wind_angle, wind_strength, wind_gust, 0, 0, false, name, rssiLevel);",
          "",
          "[Added Lines]",
          "575:   SendWind(ID, batValue, wind_angle, wind_strength, wind_gust, 0, 0, false, false, name, rssiLevel);",
          "",
          "---------------"
        ],
        "hardware/OpenWeatherMap.cpp||hardware/OpenWeatherMap.cpp": [
          "File: hardware/OpenWeatherMap.cpp -> hardware/OpenWeatherMap.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "190:   return;",
          "191:  }",
          "193:  if (!root[\"main\"].empty())",
          "194:  {",
          "196:   int humidity = 0;",
          "197:   int barometric = 0;",
          "198:   int barometric_forecast = baroForecastNoInfo;",
          "",
          "[Removed Lines]",
          "195:   float temp = -999.9f;",
          "",
          "[Added Lines]",
          "193:  float temp = -999.9f;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "268:    windspeed_ms = root[\"wind\"][\"speed\"].asFloat();",
          "269:   }",
          "270:   if ((wind_degrees != -1) && (windspeed_ms != -1))",
          "272:  }",
          "",
          "[Removed Lines]",
          "271:    SendWind(1, 255, wind_degrees, windspeed_ms, 0, 0, 0, false, \"Wind\");",
          "",
          "[Added Lines]",
          "271:   {",
          "272:    bool bHaveTemp = (temp != -999.9f);",
          "273:    float rTemp = (temp != -999.9f) ? temp : 0;",
          "274:    SendWind(1, 255, wind_degrees, windspeed_ms, 0, rTemp, 0, bHaveTemp, false, \"Wind\");",
          "275:   }",
          "",
          "---------------"
        ],
        "hardware/RFLinkBase.cpp||hardware/RFLinkBase.cpp": [
          "File: hardware/RFLinkBase.cpp -> hardware/RFLinkBase.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1039:   if (!bHaveWindTemp) windtemp = twindtemp;",
          "1040:   if (!bHaveWindChill) windchill = twindchill;",
          "1043:  }",
          "1045:  if (bHaveCO2)",
          "",
          "[Removed Lines]",
          "1042:   SendWind(ID, BatteryLevel, twindir, windspeed, windgust, windtemp, windchill, bHaveWindTemp, tmp_Name);",
          "",
          "[Added Lines]",
          "1042:   SendWind(ID, BatteryLevel, twindir, windspeed, windgust, windtemp, windchill, bHaveWindTemp, bHaveWindChill, tmp_Name);",
          "",
          "---------------"
        ],
        "hardware/Rtl433.cpp||hardware/Rtl433.cpp": [
          "File: hardware/Rtl433.cpp -> hardware/Rtl433.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "14: #include <stdio.h>",
          "15: #include \"Rtl433.h\"",
          "21: }",
          "23: CRtl433::CRtl433(const int ID, const std::string &cmdline) :",
          "",
          "[Removed Lines]",
          "17: void removeCharsFromString(std::string &str, const char* charsToRemove ) {",
          "18:    for ( unsigned int i = 0; i < strlen(charsToRemove); ++i ) {",
          "19:       str.erase( remove(str.begin(), str.end(), charsToRemove[i]), str.end() );",
          "20:    }",
          "",
          "[Added Lines]",
          "17: void removeCharsFromString(std::string &str, const char* charsToRemove) {",
          "18:  for (unsigned int i = 0; i < strlen(charsToRemove); ++i) {",
          "19:   str.erase(remove(str.begin(), str.end(), charsToRemove[i]), str.end());",
          "20:  }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "27:  removeCharsFromString(m_cmdline, \":;/$()`<>|&\");",
          "28:  m_HwdID = ID;",
          "29:  m_hPipe = NULL;",
          "41: }",
          "43: CRtl433::~CRtl433()",
          "",
          "[Removed Lines]",
          "31: #ifdef _DEBUG",
          "32:  std::string headerline = \"time,msg,codes,model,button,id,channel,battery,temperature_C,mic,rid,humidity,state,status,brand,rain_rate,rain_total,gust,average,direction,pressure_hPa,uv,power_W,energy_kWh,unit,group_call,command,dim,dim_value,wind_speed,wind_gust,wind_direction,dipswitch,rbutton,device,temperature_F,rc,brandmodelidtemperature_C,setpoint_C,switch,cmd,cmd_id,modelidcmd,tristate,direction_str,direction_deg,speed,rain,msg_type,signal,hours,minutes,seconds,year,month,day,sensor_code,uv_status,uv_index,lux,wm,fc,ws_id,rainfall_mm,wind_speed_ms,gust_speed_ms,current,interval,learn,sensor_id,battery_low,sequence_num,message_type,wind_speed_mph,wind_dir_deg,wind_dir,rainfall_accumulation_inch,raincounter_raw,windstrength,winddirection,flags,maybetemp,binding_countdown,depth,dev_id,power0,power1,power2,node,ct1,ct2,ct3,ct4,Vrms/batt,temp1_C,temp2_C,temp3_C,temp4_C,temp5_C,temp6_C,pulse,address,button1,button2,button3,button4,data,sid,transmit,moisture,type,pressure_PSI,battery_mV,pressure_bar,pulses,energy,device id,code,len,to,from,payload,event,heartbeat,brandmodelidstatus,temperature_C1,temperature_C2,test,probe,water,ptemperature_C,phumidity,newbattery,heating,heating_temp,uvi,light_lux,counter,alarm,depth_cm,repeat,temperature_1_C,temperature_2_C,device_type,raw_message,switch1,switch2,switch3,switch4,switch5,seq,extradata,house_id,module_id,sensor_type,sensor_count,alarms,sensor_value,battery_voltage,failed,pressure_kPa\";",
          "33:  headerline = \"time,model,button,id,channel,battery,temperature_C,mic,rid,humidity,state,brand,rain_rate,rain_total,gust,average,direction,pressure_hPa,uv,power_W,energy_kWh,unit,group_call,command,dim,dim_value,wind_speed,wind_gust,wind_direction,dipswitch,rbutton,device,temperature_F,status,rc,brandmodelidtemperature_C,setpoint_C,switch,direction_str,direction_deg,speed,rain,msg_type,signal,hours,minutes,seconds,year,month,day,sensor_code,uv_status,uv_index,lux,wm,fc,ws_id,rainfall_mm,wind_speed_ms,gust_speed_ms,current,interval,learn,windstrength,winddirection,flags,maybetemp,binding_countdown,depth,dev_id,power0,power1,power2,node,ct1,ct2,ct3,ct4,Vrms/batt,temp1_C,temp2_C,temp3_C,temp4_C,temp5_C,temp6_C,pulse,sid,transmit,moisture,type,pressure_PSI,battery_mV,pressure_bar,code,pulses,energy,device id,len,to,from,payload,event,heartbeat,brandmodelidstatus,temperature_C1,temperature_C2,test,newbattery,heating,heating_temp,water,wind_dir_deg,uvi,light_lux,counter,alarm,depth_cm,repeat,temperature_1_C,temperature_2_C,device_type,raw_message,switch1,switch2,switch3,switch4,switch5,seq,extradata,house_id,module_id,sensor_type,sensor_count,alarms,sensor_value,battery_voltage,data,failed,pressure_kPa\";",
          "34:  std::vector<std::string> headers = ParseCSVLine(headerline.c_str());",
          "37:  std::string line = \"2018-12-06 18:35:52,HIDEKI TS04 sensor,,,3,OK,10.900,,,83,,,,,,,,,,,,,,,,,,,,,,,,,6,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,\";",
          "38:  ParseLine(headers, line.c_str());",
          "39: #endif",
          "",
          "[Added Lines]",
          "30:  m_time_last_received = 0;",
          "32:  #ifdef _DEBUG",
          "33:   std::string headerline = \"time,msg,codes,model,button,id,channel,battery,temperature_C,mic,rid,humidity,state,status,brand,rain_rate,rain_total,gust,average,direction,pressure_hPa,uv,power_W,energy_kWh,unit,group_call,command,dim,dim_value,wind_speed,wind_gust,wind_direction,dipswitch,rbutton,device,temperature_F,rc,brandmodelidtemperature_C,setpoint_C,switch,cmd,cmd_id,modelidcmd,tristate,direction_str,direction_deg,speed,rain,msg_type,signal,hours,minutes,seconds,year,month,day,sensor_code,uv_status,uv_index,lux,wm,fc,ws_id,rainfall_mm,wind_speed_ms,gust_speed_ms,current,interval,learn,sensor_id,battery_low,sequence_num,message_type,wind_speed_mph,wind_dir_deg,wind_dir,rainfall_accumulation_inch,raincounter_raw,windstrength,winddirection,flags,maybetemp,binding_countdown,depth,dev_id,power0,power1,power2,node,ct1,ct2,ct3,ct4,Vrms/batt,temp1_C,temp2_C,temp3_C,temp4_C,temp5_C,temp6_C,pulse,address,button1,button2,button3,button4,data,sid,transmit,moisture,type,pressure_PSI,battery_mV,pressure_bar,pulses,energy,device id,code,len,to,from,payload,event,heartbeat,brandmodelidstatus,temperature_C1,temperature_C2,test,probe,water,ptemperature_C,phumidity,newbattery,heating,heating_temp,uvi,light_lux,counter,alarm,depth_cm,repeat,temperature_1_C,temperature_2_C,device_type,raw_message,switch1,switch2,switch3,switch4,switch5,seq,extradata,house_id,module_id,sensor_type,sensor_count,alarms,sensor_value,battery_voltage,failed,pressure_kPa\";",
          "34:   std::vector<std::string> headers = ParseCSVLine(headerline.c_str());",
          "37:   ParseLine(headers, line.c_str());",
          "38:  #endif",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "133:   h++;",
          "134:  }",
          "135:  int id = 0;",
          "136:  int unit = 0;",
          "138:  int channel = 0;",
          "140:  int batterylevel = 255;",
          "163:  if (!data[\"id\"].empty())",
          "164:  {",
          "",
          "[Removed Lines]",
          "137:  bool hasunit = false;",
          "139:  bool haschannel = false;",
          "141:  bool hasbattery = false;",
          "142:  float tempC;",
          "143:  bool hastempC = false;",
          "144:  int humidity;",
          "145:  bool hashumidity = false;",
          "146:  float pressure;",
          "147:  bool haspressure = false;",
          "148:  float rain;",
          "149:  bool hasrain = false;",
          "150:  float depth_cm;",
          "151:  bool hasdepth_cm = false;",
          "152:  float depth;",
          "153:  bool hasdepth = false;",
          "154:  float wind_str;",
          "155:  bool haswind_str = false;",
          "156:  float wind_gst;",
          "157:  bool haswind_gst = false;",
          "158:  int wind_dir;",
          "159:  bool haswind_dir = false;",
          "",
          "[Added Lines]",
          "136:  bool haveUnit = false;",
          "139:  bool haveChannel = false;",
          "142:  bool haveBattery = false;",
          "145:  bool haveTemp = false;",
          "146:  float tempC = 0;",
          "148:  bool haveHumidity = false;",
          "149:  int humidity = 0;",
          "151:  bool havePressure = false;",
          "152:  float pressure = 0;",
          "154:  bool haveRain = false;",
          "155:  float rain = 0;",
          "157:  bool haveDepth_CM = false;",
          "158:  float depth_cm = 0;",
          "160:  bool haveDepth = false;",
          "161:  float depth = 0;",
          "163:  bool haveWind_Strength = false;",
          "164:  float wind_strength = 0;",
          "166:  bool haveWind_Gust = false;",
          "167:  float wind_gust = 0;",
          "169:  bool haveWind_Dir = false;",
          "170:  int wind_dir = 0;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "173:  if (FindField(data, \"unit\"))",
          "174:  {",
          "175:   unit = atoi(data[\"unit\"].c_str());",
          "177:  }",
          "178:  if (FindField(data, \"channel\"))",
          "179:  {",
          "180:   channel = atoi(data[\"channel\"].c_str());",
          "182:  }",
          "183:  if (FindField(data, \"battery\"))",
          "184:  {",
          "185:   if (data[\"battery\"] == \"LOW\") {",
          "186:    batterylevel = 10;",
          "188:   }",
          "189:   else if (data[\"battery\"] == \"OK\") {",
          "190:    batterylevel = 100;",
          "192:   }",
          "193:  }",
          "195:  if (FindField(data, \"temperature_C\"))",
          "196:  {",
          "197:   tempC = (float)atof(data[\"temperature_C\"].c_str());",
          "199:  }",
          "201:  if (FindField(data, \"humidity\"))",
          "",
          "[Removed Lines]",
          "176:   hasunit = true;",
          "181:   haschannel = true;",
          "187:    hasbattery = true;",
          "191:    hasbattery = true;",
          "198:   hastempC = true;",
          "",
          "[Added Lines]",
          "185:   haveUnit = true;",
          "190:   haveChannel = true;",
          "196:    haveBattery = true;",
          "200:    haveBattery = true;",
          "207:   haveTemp = true;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "203:   if (data[\"humidity\"] == \"HH\")",
          "204:   {",
          "205:    humidity = 90;",
          "207:   }",
          "208:   else if (data[\"humidity\"] == \"LL\")",
          "209:   {",
          "210:    humidity = 10;",
          "212:   }",
          "213:   else",
          "214:   {",
          "215:    humidity = atoi(data[\"humidity\"].c_str());",
          "217:   }",
          "218:  }",
          "220:  if (FindField(data, \"pressure_hPa\"))",
          "221:  {",
          "222:   pressure = (float)atof(data[\"pressure_hPa\"].c_str());",
          "224:  }",
          "226:  if (FindField(data, \"rain\"))",
          "227:  {",
          "228:   rain = (float)atof(data[\"rain\"].c_str());",
          "230:  }",
          "231:  if (FindField(data, \"rain_total\"))",
          "232:  {",
          "233:   rain = (float)atof(data[\"rain_total\"].c_str());",
          "235:  }",
          "237:  if (FindField(data, \"depth_cm\"))",
          "238:  {",
          "239:   depth_cm = (float)atof(data[\"depth_cm\"].c_str());",
          "241:  }",
          "243:  if (FindField(data, \"depth\"))",
          "244:  {",
          "245:   depth = (float)atof(data[\"depth\"].c_str());",
          "247:  }",
          "249:  if (FindField(data, \"windstrength\") || FindField(data, \"wind_speed\"))",
          "250:  {",
          "252:   if (FindField(data, \"windstrength\"))",
          "253:   {",
          "255:   }",
          "256:   else if (FindField(data, \"wind_speed\"))",
          "257:   {",
          "259:   }",
          "261:  }",
          "262:  else if (FindField(data, \"average\"))",
          "263:  {",
          "266:  }",
          "268:  if (FindField(data, \"winddirection\") || FindField(data, \"wind_direction\"))",
          "269:  {",
          "271:   if (FindField(data, \"winddirection\"))",
          "272:   {",
          "273:    wind_dir = atoi(data[\"winddirection\"].c_str());",
          "",
          "[Removed Lines]",
          "206:    hashumidity = true;",
          "211:    hashumidity = true;",
          "216:    hashumidity = true;",
          "223:   haspressure = true;",
          "229:   hasrain = true;",
          "234:   hasrain = true;",
          "240:   hasdepth_cm = true;",
          "246:   hasdepth = true;",
          "254:    wind_str = (float)atof(data[\"windstrength\"].c_str());",
          "258:    wind_str = (float)atof(data[\"wind_speed\"].c_str());",
          "260:   haswind_str = true;",
          "264:   wind_str = (float)atof(data[\"average\"].c_str());",
          "265:   haswind_str = true;",
          "",
          "[Added Lines]",
          "215:    haveHumidity = true;",
          "220:    haveHumidity = true;",
          "225:    haveHumidity = true;",
          "232:   havePressure = true;",
          "238:   haveRain = true;",
          "243:   haveRain = true;",
          "249:   haveDepth_CM = true;",
          "255:   haveDepth = true;",
          "263:    wind_strength = (float)atof(data[\"windstrength\"].c_str());",
          "267:    wind_strength = (float)atof(data[\"wind_speed\"].c_str());",
          "269:   haveWind_Strength = true;",
          "273:   wind_strength = (float)atof(data[\"average\"].c_str());",
          "274:   haveWind_Strength = true;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "276:   {",
          "277:    wind_dir = atoi(data[\"wind_direction\"].c_str());",
          "278:   }",
          "280:  }",
          "281:  else if (FindField(data, \"direction\"))",
          "282:  {",
          "283:   wind_dir = atoi(data[\"direction\"].c_str());",
          "285:  }",
          "287:  if (FindField(data, \"wind_gust\"))",
          "288:  {",
          "291:  }",
          "292:  else if (FindField(data, \"gust\"))",
          "293:  {",
          "296:  }",
          "298:  std::string model = data[\"model\"];",
          "",
          "[Removed Lines]",
          "279:   haswind_dir = true;",
          "284:   haswind_dir = true;",
          "289:   wind_gst = (float)atof(data[\"wind_gust\"].c_str());",
          "290:   haswind_gst = true;",
          "294:   wind_gst = (float)atof(data[\"gust\"].c_str());",
          "295:   haswind_gst = true;",
          "",
          "[Added Lines]",
          "288:   haveWind_Dir = true;",
          "293:   haveWind_Dir = true;",
          "298:   wind_gust = (float)atof(data[\"wind_gust\"].c_str());",
          "299:   haveWind_Gust = true;",
          "303:   wind_gust = (float)atof(data[\"gust\"].c_str());",
          "304:   haveWind_Gust = true;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "319:  unsigned int sensoridx = (id & 0xff) | ((channel & 0xff) << 8);",
          "323:  {",
          "325:  }",
          "329:  {",
          "330:   int iForecast = 0;",
          "378:  }",
          "380:  {",
          "391:  }",
          "393:  {",
          "400:  }",
          "402:  {",
          "408:  }",
          "410:  {",
          "416:  }",
          "419:  {",
          "425:  }",
          "427:  {",
          "431:  }",
          "433:  {",
          "437:  }",
          "440: }",
          "442: void CRtl433::Do_Work()",
          "",
          "[Removed Lines]",
          "321:  bool bValidTempHum = false;",
          "322:  if (hastempC && hashumidity)",
          "324:   bValidTempHum = !((tempC == 0) && (humidity == 0));",
          "327:  bool bHaveSend = false;",
          "328:  if (hastempC && hashumidity && haspressure && bValidTempHum)",
          "331:   SendTempHumBaroSensor(sensoridx,",
          "332:    batterylevel,",
          "333:    tempC,",
          "334:    humidity,",
          "335:    pressure,",
          "336:    iForecast,",
          "337:    model);",
          "338:   bHaveSend = true;",
          "339:  }",
          "340:  else if (haswind_str && haswind_dir && !haswind_gst && hastempC)",
          "341:  {",
          "342:   SendWind(sensoridx,",
          "343:    batterylevel,",
          "344:    wind_dir,",
          "345:    wind_str,",
          "346:    0,",
          "347:    tempC,",
          "348:    0,",
          "349:    true,",
          "350:    model);",
          "351:   bHaveSend = true;",
          "352:  }",
          "353:  else if (haswind_str && haswind_dir && !haswind_gst && !hastempC)",
          "354:  {",
          "355:   SendWind(sensoridx,",
          "356:    batterylevel,",
          "357:    wind_dir,",
          "358:    wind_str,",
          "359:    0,",
          "360:    0,",
          "361:    0,",
          "362:    false,",
          "363:    model);",
          "364:   bHaveSend = true;",
          "365:  }",
          "366:  else if (haswind_str && haswind_gst && haswind_dir && hastempC)",
          "367:  {",
          "368:   SendWind(sensoridx,",
          "369:    batterylevel,",
          "370:    wind_dir,",
          "371:    wind_str,",
          "372:    wind_gst,",
          "373:    tempC,",
          "374:    0,",
          "375:    true,",
          "376:    model);",
          "377:   bHaveSend = true;",
          "379:  else if (haswind_str && haswind_gst && haswind_dir && !hastempC)",
          "381:   SendWind(sensoridx,",
          "382:    batterylevel,",
          "383:    wind_dir,",
          "384:    wind_str,",
          "385:    wind_gst,",
          "386:    0,",
          "387:    0,",
          "388:    false,",
          "389:    model);",
          "390:   bHaveSend = true;",
          "392:  else if (hastempC && hashumidity && bValidTempHum)",
          "394:   SendTempHumSensor(sensoridx,",
          "395:    batterylevel,",
          "396:    tempC,",
          "397:    humidity,",
          "398:    model);",
          "399:   bHaveSend = true;",
          "401:  else if (hastempC && !hashumidity)",
          "403:   SendTempSensor(sensoridx,",
          "404:    batterylevel,",
          "405:    tempC,",
          "406:    model);",
          "407:   bHaveSend = true;",
          "409:  else if (!hastempC && hashumidity)",
          "411:   SendHumiditySensor(sensoridx,",
          "412:    batterylevel,",
          "413:    humidity,",
          "414:    model);",
          "415:   bHaveSend = true;",
          "418:  if (hasrain)",
          "420:   SendRainSensor(sensoridx,",
          "421:    batterylevel,",
          "422:    rain,",
          "423:    model);",
          "424:   bHaveSend = true;",
          "426:  if (hasdepth_cm)",
          "428:   SendDistanceSensor(sensoridx, unit,",
          "429:    batterylevel, depth_cm, model);",
          "430:   bHaveSend = true;",
          "432:  if (hasdepth)",
          "434:   SendDistanceSensor(sensoridx, unit,",
          "435:    batterylevel, depth, model);",
          "436:   bHaveSend = true;",
          "439:  return bHaveSend;",
          "",
          "[Added Lines]",
          "330:  if (haveTemp && haveHumidity)",
          "333:   bool bValidTempHum = !((tempC == 0) && (humidity == 0));",
          "334:   if (!bValidTempHum)",
          "335:    return false; //invalid temp+hum",
          "338:  if (haveTemp && haveHumidity && havePressure)",
          "341:   SendTempHumBaroSensor(sensoridx, batterylevel, tempC, humidity, pressure, iForecast, model);",
          "342:   return true;",
          "344:  if (haveTemp && haveHumidity)",
          "346:   SendTempHumSensor(sensoridx, batterylevel, tempC, humidity, model);",
          "347:   return true;",
          "349:  if (haveWind_Strength || haveWind_Gust || haveWind_Dir)",
          "351:   SendWind(sensoridx, batterylevel, wind_dir, wind_strength, wind_gust, tempC, 0, haveTemp, false, model);",
          "352:   return true;",
          "354:  if (haveTemp)",
          "356:   SendTempSensor(sensoridx, batterylevel, tempC, model);",
          "357:   return true;",
          "359:  if (haveHumidity)",
          "361:   SendHumiditySensor(sensoridx, batterylevel, humidity, model);",
          "362:   return true;",
          "364:  if (haveRain)",
          "366:   SendRainSensor(sensoridx, batterylevel, rain, model);",
          "367:   return true;",
          "369:  if (haveDepth_CM)",
          "371:   SendDistanceSensor(sensoridx, unit, batterylevel, depth_cm, model);",
          "372:   return true;",
          "374:  if (haveDepth)",
          "376:   SendDistanceSensor(sensoridx, unit, batterylevel, depth, model);",
          "377:   return true;",
          "379:  return false; //not handled (Yet!)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "515:     }",
          "516:    }",
          "517:    else { //fgets",
          "519:      continue;",
          "520:     }",
          "521:     break; // bail out, subprocess has failed",
          "",
          "[Removed Lines]",
          "518:     if ((errno == EWOULDBLOCK)|| (errno == EAGAIN)) {",
          "",
          "[Added Lines]",
          "458:     if ((errno == EWOULDBLOCK) || (errno == EAGAIN)) {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "548:    {",
          "549:     if (IsStopRequested(1000))",
          "550:      break;",
          "552:   }",
          "554:  _log.Log(LOG_STATUS, \"Rtl433: Worker stopped...\");",
          "555: }",
          "",
          "[Removed Lines]",
          "551:    }",
          "553:  } // while !IsStopRequested()",
          "",
          "[Added Lines]",
          "492:  }",
          "493: } // while !IsStopRequested()",
          "",
          "---------------"
        ],
        "hardware/Tellstick.cpp||hardware/Tellstick.cpp": [
          "File: hardware/Tellstick.cpp -> hardware/Tellstick.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "149:         pos = message.find(\";\", pos+1);",
          "150:     }",
          "151:     if (!deviceId.empty() && !winddirection.empty() && ! windaverage.empty() && ! windgust.empty()) {",
          "153:     }",
          "154: }",
          "",
          "[Removed Lines]",
          "152:         SendWind(atoi(deviceId.c_str()), 255, atoi(winddirection.c_str()), static_cast<float>(atof(windaverage.c_str())), static_cast<float>(atof(windgust.c_str())), 0, 0, false, \"Wind\");",
          "",
          "[Added Lines]",
          "152:         SendWind(atoi(deviceId.c_str()), 255, atoi(winddirection.c_str()), static_cast<float>(atof(windaverage.c_str())), static_cast<float>(atof(windgust.c_str())), 0, 0, false, false, \"Wind\");",
          "",
          "---------------"
        ],
        "hardware/Winddelen.cpp||hardware/Winddelen.cpp": [
          "File: hardware/Winddelen.cpp -> hardware/Winddelen.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "244:    else if (szWD == \"NNW\")",
          "245:     windDir = static_cast<int>(rint(15 * 22.5f));",
          "248:   }",
          "250:   if (!root[\"diameter\"].empty())",
          "",
          "[Removed Lines]",
          "247:    SendWind(m_usMillID, 255, windDir, windSpeed, windSpeed, 0, 0, false, \"Wind\");",
          "",
          "[Added Lines]",
          "247:    SendWind(m_usMillID, 255, windDir, windSpeed, windSpeed, 0, 0, false, false, \"Wind\");",
          "",
          "---------------"
        ],
        "hardware/hardwaretypes.h||hardware/hardwaretypes.h": [
          "File: hardware/hardwaretypes.h -> hardware/hardwaretypes.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: #define sTypeTHBFloat 0x10   //Weather Station",
          "21: #define sTypeWINDNoTemp 0x30    //Weather Station",
          "23: #define wsbaroforcast_heavy_snow 0x01",
          "24: #define wsbaroforcast_snow 0x01",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: #define sTypeWINDNoTempNoChill 0x31    //Weather Station",
          "",
          "---------------"
        ],
        "main/RFXNames.cpp||main/RFXNames.cpp": [
          "File: main/RFXNames.cpp -> main/RFXNames.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "598:  { pTypeWIND, sTypeWIND7, \"Alecto WS4500\" },",
          "599:  { pTypeWIND, sTypeWIND8, \"Alecto ACH2010\" },",
          "600:  { pTypeWIND, sTypeWINDNoTemp, \"Weather Station\" },",
          "602:  { pTypeUV, sTypeUV1, \"UVN128,UV138\" },",
          "603:  { pTypeUV, sTypeUV2, \"UVN800\" },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "601:  { pTypeWIND, sTypeWINDNoTempNoChill, \"Wind\" },",
          "",
          "---------------"
        ],
        "main/SQLHelper.cpp||main/SQLHelper.cpp": [
          "File: main/SQLHelper.cpp -> main/SQLHelper.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "5090:     }",
          "5091:     break;",
          "5092:    case pTypeWIND:",
          "5094:      continue;",
          "5095:     if (splitresults.size() >= 6)",
          "5096:     {",
          "5098:      chill = static_cast<float>(atof(splitresults[5].c_str()));",
          "5099:     }",
          "5100:     break;",
          "",
          "[Removed Lines]",
          "5093:     if ((dSubType != sTypeWIND4) && (dSubType != sTypeWINDNoTemp))",
          "5097:      temp = static_cast<float>(atof(splitresults[4].c_str()));",
          "",
          "[Added Lines]",
          "5093:     if (dSubType == sTypeWINDNoTempNoChill)",
          "5097:      if (dSubType != sTypeWINDNoTemp)",
          "5098:      {",
          "5099:       temp = static_cast<float>(atof(splitresults[4].c_str()));",
          "5100:      }",
          "",
          "---------------"
        ],
        "main/WebServer.cpp||main/WebServer.cpp": [
          "File: main/WebServer.cpp -> main/WebServer.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "13220:         (dType == pTypeTEMP_HUM_BARO) ||",
          "13221:         (dType == pTypeTEMP_BARO) ||",
          "13222:         ((dType == pTypeWIND) && (dSubType == sTypeWIND4)) ||",
          "13224:         ((dType == pTypeUV) && (dSubType == sTypeUV3)) ||",
          "13225:         (dType == pTypeThermostat1) ||",
          "13226:         (dType == pTypeRadiator1) ||",
          "",
          "[Removed Lines]",
          "13223:         ((dType == pTypeWIND) && (dSubType == sTypeWINDNoTemp)) ||",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "14812:         bool bOK = true;",
          "14813:         if (dType == pTypeWIND)",
          "14814:         {",
          "14816:         }",
          "14817:         if (bOK)",
          "14818:         {",
          "",
          "[Removed Lines]",
          "14815:          bOK = ((dSubType == sTypeWIND4) || (dSubType == sTypeWINDNoTemp));",
          "",
          "[Added Lines]",
          "14813:          bOK = ((dSubType != sTypeWINDNoTemp) && (dSubType != sTypeWINDNoTempNoChill));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "14895:        ((dType == pTypeRego6XXTemp) || (dType == pTypeTEMP) || (dType == pTypeTEMP_HUM) || (dType == pTypeTEMP_HUM_BARO) || (dType == pTypeTEMP_BARO) || (dType == pTypeWIND) || (dType == pTypeThermostat1) || (dType == pTypeRadiator1)) ||",
          "14896:        ((dType == pTypeUV) && (dSubType == sTypeUV3)) ||",
          "14897:        ((dType == pTypeWIND) && (dSubType == sTypeWIND4)) ||",
          "14899:        (dType == pTypeEvohomeZone) || (dType == pTypeEvohomeWater)",
          "14900:        )",
          "14901:       {",
          "",
          "[Removed Lines]",
          "14898:        ((dType == pTypeWIND) && (dSubType == sTypeWINDNoTemp)) ||",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "16344:       ((dType == pTypeRego6XXTemp) || (dType == pTypeTEMP) || (dType == pTypeTEMP_HUM) || (dType == pTypeTEMP_HUM_BARO) || (dType == pTypeTEMP_BARO) || (dType == pTypeWIND) || (dType == pTypeThermostat1) || (dType == pTypeRadiator1) ||",
          "16345:       ((dType == pTypeUV) && (dSubType == sTypeUV3)) ||",
          "16346:        ((dType == pTypeWIND) && (dSubType == sTypeWIND4)) ||",
          "16348:        ((dType == pTypeRFXSensor) && (dSubType == sTypeRFXSensorTemp)) ||",
          "16349:        ((dType == pTypeThermostat) && (dSubType == sTypeThermSetpoint)) ||",
          "16350:        (dType == pTypeEvohomeZone) || (dType == pTypeEvohomeWater)",
          "",
          "[Removed Lines]",
          "16347:        ((dType == pTypeWIND) && (dSubType == sTypeWINDNoTemp)) ||",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "main/mainworker.cpp||main/mainworker.cpp": [
          "File: main/mainworker.cpp -> main/mainworker.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "3171:  m_wind_calculator[windID].SetSpeedGust(intSpeed, intGust);",
          "3173:  float temp = 0, chill = 0;",
          "3175:  {",
          "3185:   {",
          "3214:   }",
          "3216:   {",
          "3233:   }",
          "3240:   {",
          "3243:   }",
          "3244:  }",
          "",
          "[Removed Lines]",
          "3174:  if (pResponse->WIND.subtype == sTypeWIND4)",
          "3176:   if (!pResponse->WIND.tempsign)",
          "3177:   {",
          "3178:    temp = float((pResponse->WIND.temperatureh * 256) + pResponse->WIND.temperaturel) / 10.0f;",
          "3179:   }",
          "3180:   else",
          "3181:   {",
          "3182:    temp = -(float(((pResponse->WIND.temperatureh & 0x7F) * 256) + pResponse->WIND.temperaturel) / 10.0f);",
          "3183:   }",
          "3184:   if ((temp < -200) || (temp > 380))",
          "3186:    WriteMessage(\" Invalid Temperature\");",
          "3187:    return;",
          "3188:   }",
          "3190:   float AddjValue = 0.0f;",
          "3191:   float AddjMulti = 1.0f;",
          "3192:   m_sql.GetAddjustment(HwdID, ID.c_str(), Unit, devType, subType, AddjValue, AddjMulti);",
          "3193:   temp += AddjValue;",
          "3195:   if (!pResponse->WIND.chillsign)",
          "3196:   {",
          "3197:    chill = float((pResponse->WIND.chillh * 256) + pResponse->WIND.chilll) / 10.0f;",
          "3198:   }",
          "3199:   else",
          "3200:   {",
          "3201:    chill = -(float(((pResponse->WIND.chillh) & 0x7F) * 256 + pResponse->WIND.chilll) / 10.0f);",
          "3202:   }",
          "3203:   chill += AddjValue;",
          "3204:  }",
          "3205:  else if (pResponse->WIND.subtype == sTypeWINDNoTemp)",
          "3206:  {",
          "3207:   if (!pResponse->WIND.tempsign)",
          "3208:   {",
          "3209:    temp = float((pResponse->WIND.temperatureh * 256) + pResponse->WIND.temperaturel) / 10.0f;",
          "3210:   }",
          "3211:   else",
          "3212:   {",
          "3213:    temp = -(float(((pResponse->WIND.temperatureh & 0x7F) * 256) + pResponse->WIND.temperaturel) / 10.0f);",
          "3215:   if ((temp < -200) || (temp > 380))",
          "3217:    WriteMessage(\" Invalid Temperature\");",
          "3218:    return;",
          "3219:   }",
          "3221:   float AddjValue = 0.0f;",
          "3222:   float AddjMulti = 1.0f;",
          "3223:   m_sql.GetAddjustment(HwdID, ID.c_str(), Unit, devType, subType, AddjValue, AddjMulti);",
          "3224:   temp += AddjValue;",
          "3226:   if (!pResponse->WIND.chillsign)",
          "3227:   {",
          "3228:    chill = float((pResponse->WIND.chillh * 256) + pResponse->WIND.chilll) / 10.0f;",
          "3229:   }",
          "3230:   else",
          "3231:   {",
          "3232:    chill = -(float(((pResponse->WIND.chillh) & 0x7F) * 256 + pResponse->WIND.chilll) / 10.0f);",
          "3234:   chill += AddjValue;",
          "3235:  }",
          "3236:  if (chill == 0)",
          "3237:  {",
          "3238:   float wspeedms = float(intSpeed) / 10.0f;",
          "3239:   if ((temp < 10.0) && (wspeedms >= 1.4))",
          "3241:    float chillJatTI = 13.12f + 0.6215f*temp - 11.37f*pow(wspeedms*3.6f, 0.16f) + 0.3965f*temp*pow(wspeedms*3.6f, 0.16f);",
          "3242:    chill = chillJatTI;",
          "",
          "[Added Lines]",
          "3174:  if (subType != sTypeWINDNoTempNoChill)",
          "3176:   if (pResponse->WIND.subtype == sTypeWIND4)",
          "3178:    if (!pResponse->WIND.tempsign)",
          "3179:    {",
          "3180:     temp = float((pResponse->WIND.temperatureh * 256) + pResponse->WIND.temperaturel) / 10.0f;",
          "3181:    }",
          "3182:    else",
          "3183:    {",
          "3184:     temp = -(float(((pResponse->WIND.temperatureh & 0x7F) * 256) + pResponse->WIND.temperaturel) / 10.0f);",
          "3185:    }",
          "3186:    if ((temp < -200) || (temp > 380))",
          "3187:    {",
          "3188:     WriteMessage(\" Invalid Temperature\");",
          "3189:     return;",
          "3190:    }",
          "3192:    float AddjValue = 0.0f;",
          "3193:    float AddjMulti = 1.0f;",
          "3194:    m_sql.GetAddjustment(HwdID, ID.c_str(), Unit, devType, subType, AddjValue, AddjMulti);",
          "3195:    temp += AddjValue;",
          "3197:    if (!pResponse->WIND.chillsign)",
          "3198:    {",
          "3199:     chill = float((pResponse->WIND.chillh * 256) + pResponse->WIND.chilll) / 10.0f;",
          "3200:    }",
          "3201:    else",
          "3202:    {",
          "3203:     chill = -(float(((pResponse->WIND.chillh) & 0x7F) * 256 + pResponse->WIND.chilll) / 10.0f);",
          "3204:    }",
          "3205:    chill += AddjValue;",
          "3207:   else if (pResponse->WIND.subtype == sTypeWINDNoTemp)",
          "3209:    float AddjValue = 0.0f;",
          "3210:    float AddjMulti = 1.0f;",
          "3211:    m_sql.GetAddjustment(HwdID, ID.c_str(), Unit, devType, subType, AddjValue, AddjMulti);",
          "3212:    temp += AddjValue;",
          "3214:    if (!pResponse->WIND.chillsign)",
          "3215:    {",
          "3216:     chill = float((pResponse->WIND.chillh * 256) + pResponse->WIND.chilll) / 10.0f;",
          "3217:    }",
          "3218:    else",
          "3219:    {",
          "3220:     chill = -(float(((pResponse->WIND.chillh) & 0x7F) * 256 + pResponse->WIND.chilll) / 10.0f);",
          "3221:    }",
          "3222:    chill += AddjValue;",
          "3224:   if (chill == 0)",
          "3226:    float wspeedms = float(intSpeed) / 10.0f;",
          "3227:    if ((temp < 10.0) && (wspeedms >= 1.4))",
          "3228:    {",
          "3229:     float chillJatTI = 13.12f + 0.6215f*temp - 11.37f*pow(wspeedms*3.6f, 0.16f) + 0.3965f*temp*pow(wspeedms*3.6f, 0.16f);",
          "3230:     chill = chillJatTI;",
          "3231:    }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3285:   case sTypeWINDNoTemp:",
          "3286:    WriteMessage(\"subtype       = Weather Station\");",
          "3287:    break;",
          "3288:   default:",
          "3289:    sprintf(szTmp, \"ERROR: Unknown Sub type for Packet type= %02X:%02X\", pResponse->WIND.packettype, pResponse->WIND.subtype);",
          "3290:    WriteMessage(szTmp);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3277:   case sTypeWINDNoTempNoChill:",
          "3278:    WriteMessage(\"subtype       = Wind (No Temp or Chill sensors\");",
          "3279:    break;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3314:    WriteMessage(szTmp);",
          "3316:    sprintf(szTmp, \"Chill         = %.1f C\", chill);",
          "3317:   }",
          "3318:   if (pResponse->WIND.subtype == sTypeWINDNoTemp)",
          "3319:   {",
          "3323:    sprintf(szTmp, \"Chill         = %.1f C\", chill);",
          "3324:   }",
          "3326:   sprintf(szTmp, \"Signal level  = %d\", pResponse->WIND.rssi);",
          "",
          "[Removed Lines]",
          "3320:    sprintf(szTmp, \"Temperature   = %.1f C\", temp);",
          "3321:    WriteMessage(szTmp);",
          "",
          "[Added Lines]",
          "3309:    WriteMessage(szTmp);",
          "3314:    WriteMessage(szTmp);",
          "",
          "---------------"
        ],
        "msbuild/domoticz.vcxproj||msbuild/domoticz.vcxproj": [
          "File: msbuild/domoticz.vcxproj -> msbuild/domoticz.vcxproj",
          "--- Hunk 1 ---",
          "[Context before]",
          "14:     <ProjectGuid>{6AD96441-5B2C-467B-AAB6-A1B8368D503A}</ProjectGuid>",
          "15:     <Keyword>Win32Proj</Keyword>",
          "16:     <RootNamespace>domoticz</RootNamespace>",
          "18:   </PropertyGroup>",
          "19:   <Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.Default.props\" />",
          "20:   <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|Win32'\" Label=\"Configuration\">",
          "",
          "[Removed Lines]",
          "17:     <WindowsTargetPlatformVersion>10.0.17134.0</WindowsTargetPlatformVersion>",
          "",
          "[Added Lines]",
          "17:     <WindowsTargetPlatformVersion>10.0.17763.0</WindowsTargetPlatformVersion>",
          "",
          "---------------"
        ],
        "push/BasePush.cpp||push/BasePush.cpp": [
          "File: push/BasePush.cpp -> push/BasePush.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "80:   { pTypeWIND, sTypeWIND6, \"Direction,Direction string,Speed,Gust,Temperature,Chill\" },",
          "81:   { pTypeWIND, sTypeWIND7, \"Direction,Direction string,Speed,Gust,Temperature,Chill\" },",
          "82:   { pTypeWIND, sTypeWIND8, \"Direction,Direction string,Speed,Gust,Temperature,Chill\" },",
          "85:   { pTypeUV, sTypeUV1, \"UV,Temperature\" },",
          "86:   { pTypeUV, sTypeUV2, \"UV,Temperature\" },",
          "",
          "[Removed Lines]",
          "83:   { pTypeWIND, sTypeWINDNoTemp, \"Direction,Direction string,Speed,Gust,Temperature,Chill\" },",
          "",
          "[Added Lines]",
          "83:   { pTypeWIND, sTypeWINDNoTemp, \"Direction,Direction string,Speed,Gust,Chill\" },",
          "84:   { pTypeWIND, sTypeWINDNoTempNoChill, \"Direction,Direction string,Speed,Gust\" },",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4db378a40198f9a3576a418678b50009ca1f9123",
      "candidate_info": {
        "commit_hash": "4db378a40198f9a3576a418678b50009ca1f9123",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/4db378a40198f9a3576a418678b50009ca1f9123",
        "files": [
          "hardware/ToonThermostat.cpp",
          "main/Helper.cpp",
          "main/Helper.h",
          "webserver/cWebem.cpp"
        ],
        "message": "Removed boost UUID dependency in project",
        "before_after_code_files": [
          "hardware/ToonThermostat.cpp||hardware/ToonThermostat.cpp",
          "main/Helper.cpp||main/Helper.cpp",
          "main/Helper.h||main/Helper.h",
          "webserver/cWebem.cpp||webserver/cWebem.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "hardware/ToonThermostat.cpp||hardware/ToonThermostat.cpp": [
          "File: hardware/ToonThermostat.cpp -> hardware/ToonThermostat.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: #include \"../main/SQLHelper.h\"",
          "11: #include \"../json/json.h\"",
          "17: #ifdef _DEBUG",
          "",
          "[Removed Lines]",
          "13: #include <boost/uuid/uuid.hpp>            // uuid class",
          "14: #include <boost/uuid/uuid_generators.hpp> // generators",
          "15: #include <boost/uuid/uuid_io.hpp>         // streaming operators etc.",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "288:  sDecodeRXMessage(this, (const unsigned char *)&lcmd.LIGHTING2, defaultname.c_str(), 255);",
          "289: }",
          "292: std::string CToonThermostat::GetRandom()",
          "293: {",
          "297: }",
          "299: bool CToonThermostat::Login()",
          "",
          "[Removed Lines]",
          "294:  boost::uuids::uuid uuid = boost::uuids::random_generator()();",
          "295:  std::string suuid = boost::uuids::to_string(uuid);",
          "296:  return suuid;",
          "",
          "[Added Lines]",
          "289:  return GenerateUUID();",
          "",
          "---------------"
        ],
        "main/Helper.cpp||main/Helper.cpp": [
          "File: main/Helper.cpp -> main/Helper.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1267:  return is_wsl;",
          "1268: }",
          "1269: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1271: const std::string hexCHARS = \"0123456789abcdef\";",
          "1272: std::string GenerateUUID() // DCE/RFC 4122",
          "1273: {",
          "1274:  std::srand((unsigned int)std::time(nullptr));",
          "1275:  std::string uuid = std::string(36, ' ');",
          "1277:  uuid[8] = '-';",
          "1278:  uuid[13] = '-';",
          "1279:  uuid[14] = '4'; //M",
          "1280:  uuid[18] = '-';",
          "1282:  uuid[23] = '-';",
          "1284:  for (size_t ii = 0; ii < uuid.size(); ii++)",
          "1285:  {",
          "1286:   if (uuid[ii] == ' ')",
          "1287:   {",
          "1288:    uuid[ii] = hexCHARS[(ii == 19) ? (8 + (std::rand() & 0x03)) : std::rand() & 0x0F];",
          "1289:   }",
          "1290:  }",
          "1291:  return uuid;",
          "1292: }",
          "",
          "---------------"
        ],
        "main/Helper.h||main/Helper.h": [
          "File: main/Helper.h -> main/Helper.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "87:  bool IsWSL(void); //Detects if running under Windows Subsystem for Linux (WSL)",
          "88: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "90: std::string GenerateUUID();",
          "",
          "---------------"
        ],
        "webserver/cWebem.cpp||webserver/cWebem.cpp": [
          "File: webserver/cWebem.cpp -> webserver/cWebem.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1326:    reply::add_header(&rep, \"Set-Cookie\", sstr.str(), false);",
          "1327:   }",
          "1353:   std::string cWebemRequestHandler::generateSessionID()",
          "1354:   {",
          "",
          "[Removed Lines]",
          "1330:   const std::string hexCHARS = \"0123456789abcdef\";",
          "1331:   std::string GenerateUUID() // DCE/RFC 4122",
          "1332:   {",
          "1333:    std::srand((unsigned int)std::time(nullptr));",
          "1334:    std::string uuid = std::string(36, ' ');",
          "1336:    uuid[8] = '-';",
          "1337:    uuid[13] = '-';",
          "1338:    uuid[14] = '4'; //M",
          "1339:    uuid[18] = '-';",
          "1341:    uuid[23] = '-';",
          "1343:    for (size_t ii = 0; ii < uuid.size(); ii++)",
          "1344:    {",
          "1345:     if (uuid[ii] == ' ')",
          "1346:     {",
          "1347:      uuid[ii] = hexCHARS[(ii == 19) ? (8 + (std::rand() & 0x03)) : std::rand() & 0x0F];",
          "1348:     }",
          "1349:    }",
          "1350:    return uuid;",
          "1351:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "89db9778cbfea5b98778d58ade19af68d925458c",
      "candidate_info": {
        "commit_hash": "89db9778cbfea5b98778d58ade19af68d925458c",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/89db9778cbfea5b98778d58ade19af68d925458c",
        "files": [
          "main/WebServer.cpp",
          "www/app/SetupController.js"
        ],
        "message": "Solving #2586",
        "before_after_code_files": [
          "main/WebServer.cpp||main/WebServer.cpp",
          "www/app/SetupController.js||www/app/SetupController.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [
            "main/WebServer.cpp||main/WebServer.cpp"
          ],
          "candidate": [
            "main/WebServer.cpp||main/WebServer.cpp"
          ]
        }
      },
      "candidate_diff": {
        "main/WebServer.cpp||main/WebServer.cpp": [
          "File: main/WebServer.cpp -> main/WebServer.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "7630:    std::string sCM113DisplayType = request::findValue(&req, \"CM113DisplayType\");",
          "7631:    m_sql.UpdatePreferencesVar(\"CM113DisplayType\", atoi(sCM113DisplayType.c_str()));",
          "7643:    {",
          "7644:     WebUserName = \"\";",
          "7645:     WebPassword = \"\";",
          "7646:    }",
          "7651:    }",
          "7659:    {",
          "7660:     RemoveUsersSessions(sOldWebLogin, session);",
          "7661:    }",
          "7665:    m_sql.UpdatePreferencesVar(\"WebLocalNetworks\", WebLocalNetworks.c_str());",
          "7666:    m_sql.UpdatePreferencesVar(\"WebRemoteProxyIPs\", WebRemoteProxyIPs.c_str());",
          "",
          "[Removed Lines]",
          "7633:    std::string WebUserName = request::findValue(&req, \"WebUserName\");",
          "7634:    std::string WebPassword = request::findValue(&req, \"WebPassword\");",
          "7635:    std::string WebLocalNetworks = request::findValue(&req, \"WebLocalNetworks\");",
          "7636:    std::string WebRemoteProxyIPs = request::findValue(&req, \"WebRemoteProxyIPs\");",
          "7637:    WebUserName = CURLEncode::URLDecode(WebUserName);",
          "7638:    WebPassword = CURLEncode::URLDecode(WebPassword);",
          "7639:    WebLocalNetworks = CURLEncode::URLDecode(WebLocalNetworks);",
          "7640:    WebRemoteProxyIPs = CURLEncode::URLDecode(WebRemoteProxyIPs);",
          "7642:    if ((WebUserName.empty()) || (WebPassword.empty()))",
          "7647:    WebUserName = base64_encode(WebUserName);",
          "7648:    if (WebPassword.size() != 32)",
          "7649:    {",
          "7650:     WebPassword = GenerateMD5Hash(WebPassword);",
          "7654:    int nUnusedValue = 0;",
          "7655:    std::string sOldWebLogin;",
          "7656:    std::string sOldWebPassword;",
          "7657:    if (((m_sql.GetPreferencesVar(\"WebUserName\", nUnusedValue, sOldWebLogin)) && (sOldWebLogin != WebUserName))",
          "7658:     || ((m_sql.GetPreferencesVar(\"WebPassword\", nUnusedValue, sOldWebPassword)) && (sOldWebPassword != WebPassword)))",
          "7663:    m_sql.UpdatePreferencesVar(\"WebUserName\", WebUserName.c_str());",
          "7664:    m_sql.UpdatePreferencesVar(\"WebPassword\", WebPassword.c_str());",
          "",
          "[Added Lines]",
          "7633:    std::string WebUserName = base64_encode(CURLEncode::URLDecode(request::findValue(&req, \"WebUserName\")));",
          "7634:    std::string WebPassword = CURLEncode::URLDecode(request::findValue(&req, \"WebPassword\"));",
          "7637:    std::string sOldWebLogin;",
          "7638:    std::string sOldWebPassword;",
          "7639:    m_sql.GetPreferencesVar(\"WebUserName\", sOldWebLogin);",
          "7640:    m_sql.GetPreferencesVar(\"WebPassword\", sOldWebPassword);",
          "7642:    bool bHaveAdminUserPasswordChange = false;",
          "7644:    if ((WebUserName == sOldWebLogin) && (WebPassword.empty()))",
          "7645:    {",
          "7647:    }",
          "7648:    else if (WebUserName.empty() || WebPassword.empty())",
          "7651:     if ((!sOldWebLogin.empty()) || (!sOldWebPassword.empty()))",
          "7652:      bHaveAdminUserPasswordChange = true;",
          "7656:    else {",
          "7657:     if ((WebUserName != sOldWebLogin) || (WebPassword != sOldWebPassword))",
          "7658:     {",
          "7659:      bHaveAdminUserPasswordChange = true;",
          "7660:     }",
          "7664:    if (bHaveAdminUserPasswordChange)",
          "7667:     m_sql.UpdatePreferencesVar(\"WebUserName\", WebUserName.c_str());",
          "7668:     m_sql.UpdatePreferencesVar(\"WebPassword\", WebPassword.c_str());",
          "7671:    std::string WebLocalNetworks = CURLEncode::URLDecode(request::findValue(&req, \"WebLocalNetworks\"));",
          "7672:    std::string WebRemoteProxyIPs = CURLEncode::URLDecode(request::findValue(&req, \"WebRemoteProxyIPs\"));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "12736:     }",
          "12737:     else if (Key == \"WebPassword\")",
          "12738:     {",
          "12740:     }",
          "12741:     else if (Key == \"SecPassword\")",
          "12742:     {",
          "",
          "[Removed Lines]",
          "12739:      root[\"WebPassword\"] = sValue;",
          "",
          "[Added Lines]",
          "12747:      root[\"WebPassword\"] = \"\";// sValue;",
          "",
          "---------------"
        ],
        "www/app/SetupController.js||www/app/SetupController.js": [
          "File: www/app/SetupController.js -> www/app/SetupController.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: define(['app'], function (app) {",
          "4:   googleMapsCallback = function () {",
          "5:    $(\"#dialog-findlatlong\").dialog(\"open\");",
          "6:   };",
          "",
          "[Removed Lines]",
          "2:  app.controller('SetupController', ['$scope', '$rootScope', '$window', '$location', '$http', '$interval', function ($scope, $rootScope, $window, $location, $http, $interval) {",
          "",
          "[Added Lines]",
          "2:  app.controller('SetupController', ['$scope', '$rootScope', '$window', '$location', '$http', '$interval', 'md5', function ($scope, $rootScope, $window, $location, $http, $interval, md5) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "411:       $(\"#mobilemodetable #combosmobiletype\").val(data.MobileType);",
          "412:      }",
          "413:      if (typeof data.WebUserName != 'undefined') {",
          "414:       $(\"#webtable #WebUserName\").val(data.WebUserName);",
          "415:      }",
          "416:      if (typeof data.WebPassword != 'undefined') {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "413:       $scope.OldAdminUser=data.WebUserName;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "680:     ShowNotify($.t('Invalid Location Settings...'), 2000, true);",
          "681:     return;",
          "682:    }",
          "684:    var secpanel = $(\"#sectable #SecPassword\").val();",
          "685:    var switchprotection = $(\"#protectiontable #ProtectionPassword\").val();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "684:    var adminuser = $(\"#webtable #WebUserName\").val();",
          "685:    var adminpwd = $(\"#webtable #WebPassword\").val();",
          "686:    if ((adminuser!=\"\")&&($scope.OldAdminUser!=adminuser)) {",
          "687:     if (adminpwd==\"\") {",
          "688:      ShowNotify($.t('Please enter a Admin password!'), 2000, true);",
          "689:      return;",
          "690:     }",
          "691:    }",
          "692:    if (adminpwd!=\"\") {",
          "693:     $(\"#webtable #WebPassword\").val(md5.createHash(adminpwd));",
          "694:    }",
          "",
          "---------------"
        ]
      }
    }
  ]
}