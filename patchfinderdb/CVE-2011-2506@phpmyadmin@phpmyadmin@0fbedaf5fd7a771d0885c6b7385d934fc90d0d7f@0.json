{
  "cve_id": "CVE-2011-2506",
  "cve_desc": "setup/lib/ConfigGenerator.class.php in phpMyAdmin 3.x before 3.3.10.2 and 3.4.x before 3.4.3.1 does not properly restrict the presence of comment closing delimiters, which allows remote attackers to conduct static code injection attacks by leveraging the ability to modify the SESSION superglobal array.",
  "repo": "phpmyadmin/phpmyadmin",
  "patch_hash": "0fbedaf5fd7a771d0885c6b7385d934fc90d0d7f",
  "patch_info": {
    "commit_hash": "0fbedaf5fd7a771d0885c6b7385d934fc90d0d7f",
    "repo": "phpmyadmin/phpmyadmin",
    "commit_url": "https://github.com/phpmyadmin/phpmyadmin/commit/0fbedaf5fd7a771d0885c6b7385d934fc90d0d7f",
    "files": [
      "ChangeLog",
      "setup/lib/ConfigGenerator.class.php"
    ],
    "message": "Fixed possible code injection incase session variables are compromised, see PMASA-2011-6",
    "before_after_code_files": [
      "setup/lib/ConfigGenerator.class.php||setup/lib/ConfigGenerator.class.php"
    ]
  },
  "patch_diff": {
    "setup/lib/ConfigGenerator.class.php||setup/lib/ConfigGenerator.class.php": [
      "File: setup/lib/ConfigGenerator.class.php -> setup/lib/ConfigGenerator.class.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "39:         if ($cf->getServerCount() > 0) {",
      "40:             $ret .= \"/* Servers configuration */$crlf\\$i = 0;\" . $crlf . $crlf;",
      "41:             foreach ($c['Servers'] as $id => $server) {",
      "43:                     . '$i++;' . $crlf;",
      "44:                 foreach ($server as $k => $v) {",
      "45:                     $k = preg_replace('/[^A-Za-z0-9_]/', '_', $k);",
      "",
      "[Removed Lines]",
      "42:                 $ret .= '/* Server: ' . strtr($cf->getServerName($id), '*/', '-') . \" [$id] */\" . $crlf",
      "",
      "[Added Lines]",
      "42:                 $ret .= '/* Server: ' . strtr($cf->getServerName($id) . \" [$id] \", '*/', '-') . \"*/\" . $crlf",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "dcc352a9dce00acc50b919521deaae314c048fd4",
      "candidate_info": {
        "commit_hash": "dcc352a9dce00acc50b919521deaae314c048fd4",
        "repo": "phpmyadmin/phpmyadmin",
        "commit_url": "https://github.com/phpmyadmin/phpmyadmin/commit/dcc352a9dce00acc50b919521deaae314c048fd4",
        "files": [
          "libraries/config/ConfigFile.class.php",
          "setup/config.php",
          "setup/frames/config.inc.php",
          "setup/lib/ConfigGenerator.class.php"
        ],
        "message": "refactor config file generation out of ConfigFile class",
        "before_after_code_files": [
          "libraries/config/ConfigFile.class.php||libraries/config/ConfigFile.class.php",
          "setup/config.php||setup/config.php",
          "setup/frames/config.inc.php||setup/frames/config.inc.php",
          "setup/lib/ConfigGenerator.class.php||setup/lib/ConfigGenerator.class.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "setup/lib/ConfigGenerator.class.php||setup/lib/ConfigGenerator.class.php"
          ],
          "candidate": [
            "setup/lib/ConfigGenerator.class.php||setup/lib/ConfigGenerator.class.php"
          ]
        }
      },
      "candidate_diff": {
        "libraries/config/ConfigFile.class.php||libraries/config/ConfigFile.class.php": [
          "File: libraries/config/ConfigFile.class.php -> libraries/config/ConfigFile.class.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "110:         $this->persistKeys = array_flip($keys);",
          "111:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "118:     public function getPersistKeysMap()",
          "119:     {",
          "120:         return $this->persistKeys;",
          "121:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "303:     public function getServerCount()",
          "304:     {",
          "308:     }",
          "",
          "[Removed Lines]",
          "305:       return isset($_SESSION[$this->id]['Servers'])",
          "306:           ? count($_SESSION[$this->id]['Servers'])",
          "307:           : 0;",
          "",
          "[Added Lines]",
          "315:         return isset($_SESSION[$this->id]['Servers'])",
          "316:             ? count($_SESSION[$this->id]['Servers'])",
          "317:             : 0;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "409:         return SETUP_CONFIG_FILE;",
          "410:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "427:     public function getConfig()",
          "428:     {",
          "429:         return $_SESSION[$this->id];",
          "430:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "427:         }",
          "428:         return $c;",
          "429:     }",
          "562: }",
          "563: ?>",
          "",
          "[Removed Lines]",
          "436:     public function getConfigFile()",
          "437:     {",
          "438:         $crlf = (isset($_SESSION['eol']) && $_SESSION['eol'] == 'win') ? \"\\r\\n\" : \"\\n\";",
          "439:         $c = $_SESSION[$this->id];",
          "442:         $ret = '<?php' . $crlf",
          "443:             . '/*' . $crlf",
          "444:             . ' * Generated configuration file' . $crlf",
          "445:             . ' * Generated by: phpMyAdmin '",
          "446:                     . $GLOBALS['PMA_Config']->get('PMA_VERSION')",
          "447:                     . ' setup script by Piotr Przybylski <piotrprz@gmail.com>' . $crlf",
          "448:             . ' * Date: ' . date(DATE_RFC1123) . $crlf",
          "449:             . ' */' . $crlf . $crlf;",
          "452:         if ($this->getServerCount() > 0) {",
          "453:             $ret .= \"/* Servers configuration */$crlf\\$i = 0;\" . $crlf . $crlf;",
          "454:             foreach ($c['Servers'] as $id => $server) {",
          "455:                 $ret .= '/* Server: ' . strtr($this->getServerName($id), '*/', '-') . \" [$id] */\" . $crlf",
          "456:                     . '$i++;' . $crlf;",
          "457:                 foreach ($server as $k => $v) {",
          "458:                     $k = preg_replace('/[^A-Za-z0-9_]/', '_', $k);",
          "459:                     $ret .= \"\\$cfg['Servers'][\\$i]['$k'] = \"",
          "460:                         . (is_array($v) && $this->_isZeroBasedArray($v)",
          "461:                                 ? $this->_exportZeroBasedArray($v, $crlf)",
          "462:                                 : var_export($v, true))",
          "463:                         . ';' . $crlf;",
          "464:                 }",
          "465:                 $ret .= $crlf;",
          "466:             }",
          "467:             $ret .= '/* End of servers configuration */' . $crlf . $crlf;",
          "468:         }",
          "469:         unset($c['Servers']);",
          "472:         $persistKeys = $this->persistKeys;",
          "473:         foreach ($c as $k => $v) {",
          "474:             $k = preg_replace('/[^A-Za-z0-9_]/', '_', $k);",
          "475:             $ret .= $this->_getVarExport($k, $v, $crlf);",
          "476:             if (isset($persistKeys[$k])) {",
          "477:                 unset($persistKeys[$k]);",
          "478:             }",
          "479:         }",
          "481:         foreach (array_keys($persistKeys) as $k) {",
          "482:             if (strpos($k, '/') === false) {",
          "483:                 $k = preg_replace('/[^A-Za-z0-9_]/', '_', $k);",
          "484:                 $ret .= $this->_getVarExport($k, $this->getDefault($k), $crlf);",
          "485:             }",
          "486:         }",
          "487:         $ret .= '?>';",
          "489:         return $ret;",
          "490:     }",
          "500:     private function _getVarExport($var_name, $var_value, $crlf)",
          "501:     {",
          "502:         if (!is_array($var_value) || empty($var_value)) {",
          "503:             return \"\\$cfg['$var_name'] = \" . var_export($var_value, true) . ';' . $crlf;",
          "504:         }",
          "505:         $ret = '';",
          "506:         if ($this->_isZeroBasedArray($var_value)) {",
          "507:             $ret = \"\\$cfg['$var_name'] = \" . $this->_exportZeroBasedArray($var_value, $crlf)",
          "508:                 . ');' . $crlf;",
          "509:         } else {",
          "511:             foreach ($var_value as $k => $v) {",
          "512:                 $k = preg_replace('/[^A-Za-z0-9_]/', '_', $k);",
          "513:                 $ret .= \"\\$cfg['$var_name']['$k'] = \" . var_export($v, true) . ';' . $crlf;",
          "514:             }",
          "515:         }",
          "516:         return $ret;",
          "517:     }",
          "525:     private function _isZeroBasedArray(array $array)",
          "526:     {",
          "527:         for ($i = 0; $i < count($array); $i++) {",
          "528:             if (!isset($array[$i])) {",
          "529:                 return false;",
          "530:             }",
          "531:         }",
          "532:         return true;",
          "533:     }",
          "542:     private function _exportZeroBasedArray(array $array, $crlf)",
          "543:     {",
          "544:         $retv = array();",
          "545:         foreach ($array as $v) {",
          "546:             $retv[] = var_export($v, true);",
          "547:         }",
          "548:         $ret = \"array(\";",
          "549:         if (count($retv) <= 4) {",
          "551:             $ret .= implode(', ', $retv);",
          "552:         } else {",
          "554:             $imax = count($retv)-1;",
          "555:             for ($i = 0; $i <= $imax; $i++) {",
          "556:                 $ret .= ($i < $imax ? ($i > 0 ? ',' : '') : '') . $crlf . '    ' . $retv[$i];",
          "557:             }",
          "558:         }",
          "559:         $ret .= ')';",
          "560:         return $ret;",
          "561:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "setup/config.php||setup/config.php": [
          "File: setup/config.php -> setup/config.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "13: require './lib/common.inc.php';",
          "14: require_once './libraries/config/Form.class.php';",
          "15: require_once './libraries/config/FormDisplay.class.php';",
          "17: require './libraries/config/setup.forms.php';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "16: require_once './setup/lib/ConfigGenerator.class.php';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "41:     header('Content-Type: text/plain');",
          "42:     header('Content-Disposition: attachment; filename=\"config.inc.php\"');",
          "44:     exit;",
          "45: } elseif (PMA_ifSetOr($_POST['submit_save'], '')) {",
          "50:     header('HTTP/1.1 303 See Other');",
          "51:     header('Location: index.php');",
          "52:     exit;",
          "",
          "[Removed Lines]",
          "43:     echo ConfigFile::getInstance()->getConfigFile();",
          "49:     file_put_contents($config_file_path, ConfigFile::getInstance()->getConfigFile());",
          "",
          "[Added Lines]",
          "44:     echo ConfigGenerator::getConfigFile();",
          "50:     file_put_contents($config_file_path, ConfigGenerator::getConfigFile());",
          "",
          "---------------"
        ],
        "setup/frames/config.inc.php||setup/frames/config.inc.php": [
          "File: setup/frames/config.inc.php -> setup/frames/config.inc.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: require_once './libraries/config/FormDisplay.class.php';",
          "18: require_once './setup/lib/index.lib.php';",
          "20: $config_readable = false;",
          "21: $config_writable = false;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: require_once './setup/lib/ConfigGenerator.class.php';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "29: <tr>",
          "30:     <td>",
          "31:         <textarea cols=\"50\" rows=\"20\" name=\"textconfig\" id=\"textconfig\" spellcheck=\"false\"><?php",
          "33:         ?></textarea>",
          "34:     </td>",
          "35: </tr>",
          "",
          "[Removed Lines]",
          "32:             echo htmlspecialchars(ConfigFile::getInstance()->getConfigFile())",
          "",
          "[Added Lines]",
          "33:             echo htmlspecialchars(ConfigGenerator::getConfigFile())",
          "",
          "---------------"
        ],
        "setup/lib/ConfigGenerator.class.php||setup/lib/ConfigGenerator.class.php": [
          "File: setup/lib/ConfigGenerator.class.php -> setup/lib/ConfigGenerator.class.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "13: class ConfigGenerator",
          "14: {",
          "20:     public static function getConfigFile()",
          "21:     {",
          "22:         $cf = ConfigFile::getInstance();",
          "24:         $crlf = (isset($_SESSION['eol']) && $_SESSION['eol'] == 'win') ? \"\\r\\n\" : \"\\n\";",
          "25:         $c = $cf->getConfig();",
          "28:         $ret = '<?php' . $crlf",
          "29:             . '/*' . $crlf",
          "30:             . ' * Generated configuration file' . $crlf",
          "31:             . ' * Generated by: phpMyAdmin '",
          "32:                     . $GLOBALS['PMA_Config']->get('PMA_VERSION')",
          "33:                     . ' setup script by Piotr Przybylski <piotrprz@gmail.com>' . $crlf",
          "34:             . ' * Date: ' . date(DATE_RFC1123) . $crlf",
          "35:             . ' */' . $crlf . $crlf;",
          "38:         if ($cf->getServerCount() > 0) {",
          "39:             $ret .= \"/* Servers configuration */$crlf\\$i = 0;\" . $crlf . $crlf;",
          "40:             foreach ($c['Servers'] as $id => $server) {",
          "41:                 $ret .= '/* Server: ' . strtr($cf->getServerName($id), '*/', '-') . \" [$id] */\" . $crlf",
          "42:                     . '$i++;' . $crlf;",
          "43:                 foreach ($server as $k => $v) {",
          "44:                     $k = preg_replace('/[^A-Za-z0-9_]/', '_', $k);",
          "45:                     $ret .= \"\\$cfg['Servers'][\\$i]['$k'] = \"",
          "46:                         . (is_array($v) && self::_isZeroBasedArray($v)",
          "47:                                 ? self::_exportZeroBasedArray($v, $crlf)",
          "48:                                 : var_export($v, true))",
          "49:                         . ';' . $crlf;",
          "50:                 }",
          "51:                 $ret .= $crlf;",
          "52:             }",
          "53:             $ret .= '/* End of servers configuration */' . $crlf . $crlf;",
          "54:         }",
          "55:         unset($c['Servers']);",
          "58:         $persistKeys = $cf->getPersistKeysMap();",
          "60:         foreach ($c as $k => $v) {",
          "61:             $k = preg_replace('/[^A-Za-z0-9_]/', '_', $k);",
          "62:             $ret .= self::_getVarExport($k, $v, $crlf);",
          "63:             if (isset($persistKeys[$k])) {",
          "64:                 unset($persistKeys[$k]);",
          "65:             }",
          "66:         }",
          "68:         foreach (array_keys($persistKeys) as $k) {",
          "69:             if (strpos($k, '/') === false) {",
          "70:                 $k = preg_replace('/[^A-Za-z0-9_]/', '_', $k);",
          "71:                 $ret .= self::_getVarExport($k, $cf->getDefault($k), $crlf);",
          "72:             }",
          "73:         }",
          "74:         $ret .= '?>';",
          "76:         return $ret;",
          "77:     }",
          "87:     private static function _getVarExport($var_name, $var_value, $crlf)",
          "88:     {",
          "89:         if (!is_array($var_value) || empty($var_value)) {",
          "90:             return \"\\$cfg['$var_name'] = \" . var_export($var_value, true) . ';' . $crlf;",
          "91:         }",
          "92:         $ret = '';",
          "93:         if (self::_isZeroBasedArray($var_value)) {",
          "94:             $ret = \"\\$cfg['$var_name'] = \" . self::_exportZeroBasedArray($var_value, $crlf)",
          "95:                 . ');' . $crlf;",
          "96:         } else {",
          "98:             foreach ($var_value as $k => $v) {",
          "99:                 $k = preg_replace('/[^A-Za-z0-9_]/', '_', $k);",
          "100:                 $ret .= \"\\$cfg['$var_name']['$k'] = \" . var_export($v, true) . ';' . $crlf;",
          "101:             }",
          "102:         }",
          "103:         return $ret;",
          "104:     }",
          "112:     private static function _isZeroBasedArray(array $array)",
          "113:     {",
          "114:         for ($i = 0; $i < count($array); $i++) {",
          "115:             if (!isset($array[$i])) {",
          "116:                 return false;",
          "117:             }",
          "118:         }",
          "119:         return true;",
          "120:     }",
          "129:     private static function _exportZeroBasedArray(array $array, $crlf)",
          "130:     {",
          "131:         $retv = array();",
          "132:         foreach ($array as $v) {",
          "133:             $retv[] = var_export($v, true);",
          "134:         }",
          "135:         $ret = \"array(\";",
          "136:         if (count($retv) <= 4) {",
          "138:             $ret .= implode(', ', $retv);",
          "139:         } else {",
          "141:             $imax = count($retv)-1;",
          "142:             for ($i = 0; $i <= $imax; $i++) {",
          "143:                 $ret .= ($i < $imax ? ($i > 0 ? ',' : '') : '') . $crlf . '    ' . $retv[$i];",
          "144:             }",
          "145:         }",
          "146:         $ret .= ')';",
          "147:         return $ret;",
          "148:     }",
          "149: }",
          "150: ?>",
          "",
          "---------------"
        ]
      }
    }
  ]
}