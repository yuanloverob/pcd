{
  "cve_id": "CVE-2012-4444",
  "cve_desc": "The ip6_frag_queue function in net/ipv6/reassembly.c in the Linux kernel before 2.6.36 allows remote attackers to bypass intended network restrictions via overlapping IPv6 fragments.",
  "repo": "torvalds/linux",
  "patch_hash": "70789d7052239992824628db8133de08dc78e593",
  "patch_info": {
    "commit_hash": "70789d7052239992824628db8133de08dc78e593",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/70789d7052239992824628db8133de08dc78e593",
    "files": [
      "net/ipv6/reassembly.c"
    ],
    "message": "ipv6: discard overlapping fragment\n\nRFC5722 prohibits reassembling fragments when some data overlaps.\n\nBug spotted by Zhang Zuotao <zuotao.zhang@6wind.com>.\n\nSigned-off-by: Nicolas Dichtel <nicolas.dichtel@6wind.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
    "before_after_code_files": [
      "net/ipv6/reassembly.c||net/ipv6/reassembly.c"
    ]
  },
  "patch_diff": {
    "net/ipv6/reassembly.c||net/ipv6/reassembly.c": [
      "File: net/ipv6/reassembly.c -> net/ipv6/reassembly.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "149: }",
      "150: EXPORT_SYMBOL(ip6_frag_match);",
      "159: void ip6_frag_init(struct inet_frag_queue *q, void *a)",
      "160: {",
      "161:  struct frag_queue *fq = container_of(q, struct frag_queue, q);",
      "",
      "[Removed Lines]",
      "153: static void frag_kfree_skb(struct netns_frags *nf, struct sk_buff *skb)",
      "154: {",
      "155:  atomic_sub(skb->truesize, &nf->mem);",
      "156:  kfree_skb(skb);",
      "157: }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "346:  }",
      "348: found:",
      "402:  FRAG6_CB(skb)->offset = offset;",
      "",
      "[Removed Lines]",
      "353:  if (prev) {",
      "354:   int i = (FRAG6_CB(prev)->offset + prev->len) - offset;",
      "356:   if (i > 0) {",
      "357:    offset += i;",
      "358:    if (end <= offset)",
      "359:     goto err;",
      "360:    if (!pskb_pull(skb, i))",
      "361:     goto err;",
      "362:    if (skb->ip_summed != CHECKSUM_UNNECESSARY)",
      "363:     skb->ip_summed = CHECKSUM_NONE;",
      "364:   }",
      "365:  }",
      "370:  while (next && FRAG6_CB(next)->offset < end) {",
      "373:   if (i < next->len) {",
      "377:    if (!pskb_pull(next, i))",
      "378:     goto err;",
      "380:    fq->q.meat -= i;",
      "381:    if (next->ip_summed != CHECKSUM_UNNECESSARY)",
      "382:     next->ip_summed = CHECKSUM_NONE;",
      "383:    break;",
      "384:   } else {",
      "385:    struct sk_buff *free_it = next;",
      "390:    next = next->next;",
      "392:    if (prev)",
      "393:     prev->next = next;",
      "394:    else",
      "395:     fq->q.fragments = next;",
      "397:    fq->q.meat -= free_it->len;",
      "398:    frag_kfree_skb(fq->q.net, free_it);",
      "399:   }",
      "400:  }",
      "",
      "[Added Lines]",
      "351:  if (prev &&",
      "352:      (FRAG6_CB(prev)->offset + prev->len) - offset > 0)",
      "353:   goto discard_fq;",
      "356:  if (next && FRAG6_CB(next)->offset < end)",
      "357:   goto discard_fq;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "436:  write_unlock(&ip6_frags.lock);",
      "437:  return -1;",
      "439: err:",
      "440:  IP6_INC_STATS(net, ip6_dst_idev(skb_dst(skb)),",
      "441:         IPSTATS_MIB_REASMFAILS);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "396: discard_fq:",
      "397:  fq_kill(fq);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "d6bebca92c663fb216c072193945946f3807ca7f",
      "candidate_info": {
        "commit_hash": "d6bebca92c663fb216c072193945946f3807ca7f",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/d6bebca92c663fb216c072193945946f3807ca7f",
        "files": [
          "include/net/inet_frag.h",
          "net/ipv4/ip_fragment.c",
          "net/ipv6/reassembly.c"
        ],
        "message": "fragment: add fast path for in-order fragments\n\nadd fast path for in-order fragments\n\nAs the fragments are sent in order in most of OSes, such as Windows, Darwin and\nFreeBSD, it is likely the new fragments are at the end of the inet_frag_queue.\nIn the fast path, we check if the skb at the end of the inet_frag_queue is the\nprev we expect.\n\nSigned-off-by: Changli Gao <xiaosuo@gmail.com>\n----\n include/net/inet_frag.h |    1 +\n net/ipv4/ip_fragment.c  |   12 ++++++++++++\n net/ipv6/reassembly.c   |   11 +++++++++++\n 3 files changed, 24 insertions(+)\nSigned-off-by: David S. Miller <davem@davemloft.net>",
        "before_after_code_files": [
          "include/net/inet_frag.h||include/net/inet_frag.h",
          "net/ipv4/ip_fragment.c||net/ipv4/ip_fragment.c",
          "net/ipv6/reassembly.c||net/ipv6/reassembly.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "net/ipv6/reassembly.c||net/ipv6/reassembly.c"
          ],
          "candidate": [
            "net/ipv6/reassembly.c||net/ipv6/reassembly.c"
          ]
        }
      },
      "candidate_diff": {
        "include/net/inet_frag.h||include/net/inet_frag.h": [
          "File: include/net/inet_frag.h -> include/net/inet_frag.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "20:  atomic_t  refcnt;",
          "23:  ktime_t   stamp;",
          "25:  int   meat;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23:  struct sk_buff  *fragments_tail;",
          "",
          "---------------"
        ],
        "net/ipv4/ip_fragment.c||net/ipv4/ip_fragment.c": [
          "File: net/ipv4/ip_fragment.c -> net/ipv4/ip_fragment.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "314:  qp->q.len = 0;",
          "315:  qp->q.meat = 0;",
          "316:  qp->q.fragments = NULL;",
          "317:  qp->iif = 0;",
          "319:  return 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "317:  qp->q.fragments_tail = NULL;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "389:  prev = NULL;",
          "390:  for (next = qp->q.fragments; next != NULL; next = next->next) {",
          "391:   if (FRAG_CB(next)->offset >= offset)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "390:  prev = qp->q.fragments_tail;",
          "391:  if (!prev || FRAG_CB(prev)->offset < offset) {",
          "392:   next = NULL;",
          "393:   goto found;",
          "394:  }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "393:   prev = next;",
          "394:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "402: found:",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "453:  skb->next = next;",
          "454:  if (prev)",
          "455:   prev->next = skb;",
          "456:  else",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "461:  if (!next)",
          "462:   qp->q.fragments_tail = skb;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "504:    goto out_nomem;",
          "506:   fp->next = head->next;",
          "507:   prev->next = fp;",
          "509:   skb_morph(head, qp->q.fragments);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "516:   if (!fp->next)",
          "517:    qp->q.fragments_tail = fp;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "574:  iph->tot_len = htons(len);",
          "575:  IP_INC_STATS_BH(net, IPSTATS_MIB_REASMOKS);",
          "576:  qp->q.fragments = NULL;",
          "577:  return 0;",
          "579: out_nomem:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "588:  qp->q.fragments_tail = NULL;",
          "",
          "---------------"
        ],
        "net/ipv6/reassembly.c||net/ipv6/reassembly.c": [
          "File: net/ipv6/reassembly.c -> net/ipv6/reassembly.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "336:  prev = NULL;",
          "337:  for(next = fq->q.fragments; next != NULL; next = next->next) {",
          "338:   if (FRAG6_CB(next)->offset >= offset)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "336:  prev = fq->q.fragments_tail;",
          "337:  if (!prev || FRAG6_CB(prev)->offset < offset) {",
          "338:   next = NULL;",
          "339:   goto found;",
          "340:  }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "340:   prev = next;",
          "341:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "348: found:",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "399:  skb->next = next;",
          "400:  if (prev)",
          "401:   prev->next = skb;",
          "402:  else",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "406:  if (!next)",
          "407:   fq->q.fragments_tail = skb;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "463:    goto out_oom;",
          "465:   fp->next = head->next;",
          "466:   prev->next = fp;",
          "468:   skb_morph(head, fq->q.fragments);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "474:   if (!fp->next)",
          "475:    fq->q.fragments_tail = fp;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "549:  IP6_INC_STATS_BH(net, __in6_dev_get(dev), IPSTATS_MIB_REASMOKS);",
          "550:  rcu_read_unlock();",
          "551:  fq->q.fragments = NULL;",
          "552:  return 1;",
          "554: out_oversize:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "562:  fq->q.fragments_tail = NULL;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0b5ccb2ee250136dd7385b1c7da28417d0d4d32d",
      "candidate_info": {
        "commit_hash": "0b5ccb2ee250136dd7385b1c7da28417d0d4d32d",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/0b5ccb2ee250136dd7385b1c7da28417d0d4d32d",
        "files": [
          "include/net/ipv6.h",
          "include/net/netfilter/ipv6/nf_conntrack_ipv6.h",
          "net/ipv6/netfilter/nf_conntrack_l3proto_ipv6.c",
          "net/ipv6/netfilter/nf_conntrack_reasm.c",
          "net/ipv6/reassembly.c"
        ],
        "message": "ipv6: reassembly: use seperate reassembly queues for conntrack and local delivery\n\nCurrently the same reassembly queue might be used for packets reassembled\nby conntrack in different positions in the stack (PREROUTING/LOCAL_OUT),\nas well as local delivery. This can cause \"packet jumps\" when the fragment\ncompleting a reassembled packet is queued from a different position in the\nstack than the previous ones.\n\nAdd a \"user\" identifier to the reassembly queue key to seperate the queues\nof each caller, similar to what we do for IPv4.\n\nSigned-off-by: Patrick McHardy <kaber@trash.net>",
        "before_after_code_files": [
          "include/net/ipv6.h||include/net/ipv6.h",
          "include/net/netfilter/ipv6/nf_conntrack_ipv6.h||include/net/netfilter/ipv6/nf_conntrack_ipv6.h",
          "net/ipv6/netfilter/nf_conntrack_l3proto_ipv6.c||net/ipv6/netfilter/nf_conntrack_l3proto_ipv6.c",
          "net/ipv6/netfilter/nf_conntrack_reasm.c||net/ipv6/netfilter/nf_conntrack_reasm.c",
          "net/ipv6/reassembly.c||net/ipv6/reassembly.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "net/ipv6/reassembly.c||net/ipv6/reassembly.c"
          ],
          "candidate": [
            "net/ipv6/reassembly.c||net/ipv6/reassembly.c"
          ]
        }
      },
      "candidate_diff": {
        "include/net/ipv6.h||include/net/ipv6.h": [
          "File: include/net/ipv6.h -> include/net/ipv6.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "351: struct inet_frag_queue;",
          "353: struct ip6_create_arg {",
          "354:  __be32 id;",
          "355:  struct in6_addr *src;",
          "356:  struct in6_addr *dst;",
          "357: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "353: enum ip6_defrag_users {",
          "354:  IP6_DEFRAG_LOCAL_DELIVER,",
          "355:  IP6_DEFRAG_CONNTRACK_IN,",
          "356:  IP6_DEFRAG_CONNTRACK_OUT,",
          "357: };",
          "361:  u32 user;",
          "",
          "---------------"
        ],
        "include/net/netfilter/ipv6/nf_conntrack_ipv6.h||include/net/netfilter/ipv6/nf_conntrack_ipv6.h": [
          "File: include/net/netfilter/ipv6/nf_conntrack_ipv6.h -> include/net/netfilter/ipv6/nf_conntrack_ipv6.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: extern int nf_ct_frag6_init(void);",
          "11: extern void nf_ct_frag6_cleanup(void);",
          "13: extern void nf_ct_frag6_output(unsigned int hooknum, struct sk_buff *skb,",
          "14:           struct net_device *in,",
          "15:           struct net_device *out,",
          "",
          "[Removed Lines]",
          "12: extern struct sk_buff *nf_ct_frag6_gather(struct sk_buff *skb);",
          "",
          "[Added Lines]",
          "12: extern struct sk_buff *nf_ct_frag6_gather(struct sk_buff *skb, u32 user);",
          "",
          "---------------"
        ],
        "net/ipv6/netfilter/nf_conntrack_l3proto_ipv6.c||net/ipv6/netfilter/nf_conntrack_l3proto_ipv6.c": [
          "File: net/ipv6/netfilter/nf_conntrack_l3proto_ipv6.c -> net/ipv6/netfilter/nf_conntrack_l3proto_ipv6.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "187:  return nf_conntrack_confirm(skb);",
          "188: }",
          "190: static unsigned int ipv6_defrag(unsigned int hooknum,",
          "191:     struct sk_buff *skb,",
          "192:     const struct net_device *in,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "190: static enum ip6_defrag_users nf_ct6_defrag_user(unsigned int hooknum,",
          "191:       struct sk_buff *skb)",
          "192: {",
          "193:  if (hooknum == NF_INET_PRE_ROUTING)",
          "194:   return IP6_DEFRAG_CONNTRACK_IN;",
          "195:  else",
          "196:   return IP6_DEFRAG_CONNTRACK_OUT;",
          "198: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "199:  if (skb->nfct)",
          "200:   return NF_ACCEPT;",
          "205:  if (reasm == NULL)",
          "206:   return NF_STOLEN;",
          "",
          "[Removed Lines]",
          "202:  reasm = nf_ct_frag6_gather(skb);",
          "",
          "[Added Lines]",
          "212:  reasm = nf_ct_frag6_gather(skb, nf_ct6_defrag_user(hooknum, skb));",
          "",
          "---------------"
        ],
        "net/ipv6/netfilter/nf_conntrack_reasm.c||net/ipv6/netfilter/nf_conntrack_reasm.c": [
          "File: net/ipv6/netfilter/nf_conntrack_reasm.c -> net/ipv6/netfilter/nf_conntrack_reasm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "170: static __inline__ struct nf_ct_frag6_queue *",
          "172: {",
          "173:  struct inet_frag_queue *q;",
          "174:  struct ip6_create_arg arg;",
          "175:  unsigned int hash;",
          "177:  arg.id = id;",
          "178:  arg.src = src;",
          "179:  arg.dst = dst;",
          "",
          "[Removed Lines]",
          "171: fq_find(__be32 id, struct in6_addr *src, struct in6_addr *dst)",
          "",
          "[Added Lines]",
          "171: fq_find(__be32 id, u32 user, struct in6_addr *src, struct in6_addr *dst)",
          "178:  arg.user = user;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "559:  return 0;",
          "560: }",
          "563: {",
          "564:  struct sk_buff *clone;",
          "565:  struct net_device *dev = skb->dev;",
          "",
          "[Removed Lines]",
          "562: struct sk_buff *nf_ct_frag6_gather(struct sk_buff *skb)",
          "",
          "[Added Lines]",
          "563: struct sk_buff *nf_ct_frag6_gather(struct sk_buff *skb, u32 user)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "605:  if (atomic_read(&nf_init_frags.mem) > nf_init_frags.high_thresh)",
          "606:   nf_ct_frag6_evictor();",
          "609:  if (fq == NULL) {",
          "610:   pr_debug(\"Can't find and can't create new queue\\n\");",
          "611:   goto ret_orig;",
          "",
          "[Removed Lines]",
          "608:  fq = fq_find(fhdr->identification, &hdr->saddr, &hdr->daddr);",
          "",
          "[Added Lines]",
          "609:  fq = fq_find(fhdr->identification, user, &hdr->saddr, &hdr->daddr);",
          "",
          "---------------"
        ],
        "net/ipv6/reassembly.c||net/ipv6/reassembly.c": [
          "File: net/ipv6/reassembly.c -> net/ipv6/reassembly.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "72:  struct inet_frag_queue q;",
          "75:  struct in6_addr  saddr;",
          "76:  struct in6_addr  daddr;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "75:  u32   user;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "141:  struct ip6_create_arg *arg = a;",
          "143:  fq = container_of(q, struct frag_queue, q);",
          "145:    ipv6_addr_equal(&fq->saddr, arg->src) &&",
          "146:    ipv6_addr_equal(&fq->daddr, arg->dst));",
          "147: }",
          "",
          "[Removed Lines]",
          "144:  return (fq->id == arg->id &&",
          "",
          "[Added Lines]",
          "145:  return (fq->id == arg->id && fq->user == arg->user &&",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "163:  struct ip6_create_arg *arg = a;",
          "165:  fq->id = arg->id;",
          "166:  ipv6_addr_copy(&fq->saddr, arg->src);",
          "167:  ipv6_addr_copy(&fq->daddr, arg->dst);",
          "168: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "167:  fq->user = arg->user;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "243:  unsigned int hash;",
          "245:  arg.id = id;",
          "246:  arg.src = src;",
          "247:  arg.dst = dst;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "248:  arg.user = IP6_DEFRAG_LOCAL_DELIVER;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a95d8c88bea0c93505e1d143d075f112be2b25e3",
      "candidate_info": {
        "commit_hash": "a95d8c88bea0c93505e1d143d075f112be2b25e3",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/a95d8c88bea0c93505e1d143d075f112be2b25e3",
        "files": [
          "net/ipv4/ip_fragment.c",
          "net/ipv6/reassembly.c"
        ],
        "message": "ipfrag : frag_kfree_skb() cleanup\n\nThird param (work) is unused, remove it.\n\nRemove __inline__ and inline qualifiers.\n\nSigned-off-by: Eric Dumazet <eric.dumazet@gmail.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
        "before_after_code_files": [
          "net/ipv4/ip_fragment.c||net/ipv4/ip_fragment.c",
          "net/ipv6/reassembly.c||net/ipv6/reassembly.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "net/ipv6/reassembly.c||net/ipv6/reassembly.c"
          ],
          "candidate": [
            "net/ipv6/reassembly.c||net/ipv6/reassembly.c"
          ]
        }
      },
      "candidate_diff": {
        "net/ipv4/ip_fragment.c||net/ipv4/ip_fragment.c": [
          "File: net/ipv4/ip_fragment.c -> net/ipv4/ip_fragment.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "124: }",
          "129: {",
          "132:  atomic_sub(skb->truesize, &nf->mem);",
          "133:  kfree_skb(skb);",
          "134: }",
          "",
          "[Removed Lines]",
          "127: static __inline__ void frag_kfree_skb(struct netns_frags *nf,",
          "128:   struct sk_buff *skb, int *work)",
          "130:  if (work)",
          "",
          "[Added Lines]",
          "127: static void frag_kfree_skb(struct netns_frags *nf, struct sk_buff *skb)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "309:  fp = qp->q.fragments;",
          "310:  do {",
          "311:   struct sk_buff *xp = fp->next;",
          "313:   fp = xp;",
          "314:  } while (fp);",
          "",
          "[Removed Lines]",
          "312:   frag_kfree_skb(qp->q.net, fp, NULL);",
          "",
          "[Added Lines]",
          "309:   frag_kfree_skb(qp->q.net, fp);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "446:     qp->q.fragments = next;",
          "448:    qp->q.meat -= free_it->len;",
          "450:   }",
          "451:  }",
          "",
          "[Removed Lines]",
          "449:    frag_kfree_skb(qp->q.net, free_it, NULL);",
          "",
          "[Added Lines]",
          "446:    frag_kfree_skb(qp->q.net, free_it);",
          "",
          "---------------"
        ],
        "net/ipv6/reassembly.c||net/ipv6/reassembly.c": [
          "File: net/ipv6/reassembly.c -> net/ipv6/reassembly.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "150: EXPORT_SYMBOL(ip6_frag_match);",
          "155: {",
          "158:  atomic_sub(skb->truesize, &nf->mem);",
          "159:  kfree_skb(skb);",
          "160: }",
          "",
          "[Removed Lines]",
          "153: static inline void frag_kfree_skb(struct netns_frags *nf,",
          "154:   struct sk_buff *skb, int *work)",
          "156:  if (work)",
          "",
          "[Added Lines]",
          "153: static void frag_kfree_skb(struct netns_frags *nf, struct sk_buff *skb)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "392:     fq->q.fragments = next;",
          "394:    fq->q.meat -= free_it->len;",
          "396:   }",
          "397:  }",
          "",
          "[Removed Lines]",
          "395:    frag_kfree_skb(fq->q.net, free_it, NULL);",
          "",
          "[Added Lines]",
          "392:    frag_kfree_skb(fq->q.net, free_it);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f46421416fb6b91513fb687d6503142cd99034a5",
      "candidate_info": {
        "commit_hash": "f46421416fb6b91513fb687d6503142cd99034a5",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/f46421416fb6b91513fb687d6503142cd99034a5",
        "files": [
          "net/ipv6/reassembly.c"
        ],
        "message": "ipv6: fix overlap check for fragments\n\nThe type of FRAG6_CB(prev)->offset is int, skb->len is *unsigned* int,\nand offset is int.\n\nWithout this patch, type conversion occurred to this expression, when\n(FRAG6_CB(prev)->offset + prev->len) is less than offset.\n\nSigned-off-by: Shan Wei <shanwei@cn.fujitsu.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
        "before_after_code_files": [
          "net/ipv6/reassembly.c||net/ipv6/reassembly.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "net/ipv6/reassembly.c||net/ipv6/reassembly.c"
          ],
          "candidate": [
            "net/ipv6/reassembly.c||net/ipv6/reassembly.c"
          ]
        }
      },
      "candidate_diff": {
        "net/ipv6/reassembly.c||net/ipv6/reassembly.c": [
          "File: net/ipv6/reassembly.c -> net/ipv6/reassembly.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "351:  if (prev &&",
          "353:   goto discard_fq;",
          "",
          "[Removed Lines]",
          "352:      (FRAG6_CB(prev)->offset + prev->len) - offset > 0)",
          "",
          "[Added Lines]",
          "352:      (FRAG6_CB(prev)->offset + prev->len) > offset)",
          "",
          "---------------"
        ]
      }
    }
  ]
}