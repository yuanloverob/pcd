{
  "cve_id": "CVE-2019-19242",
  "cve_desc": "SQLite 3.30.1 mishandles pExpr->y.pTab, as demonstrated by the TK_COLUMN case in sqlite3ExprCodeTarget in expr.c.",
  "repo": "sqlite/sqlite",
  "patch_hash": "57f7ece78410a8aae86aa4625fb7556897db384c",
  "patch_info": {
    "commit_hash": "57f7ece78410a8aae86aa4625fb7556897db384c",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/57f7ece78410a8aae86aa4625fb7556897db384c",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/expr.c",
      "src/wherecode.c",
      "test/gencol1.test"
    ],
    "message": "Fix a problem that comes up when using generated columns that evaluate to a constant in an index and then making use of that index in a join.\n\nFossilOrigin-Name: 8b12e95fec7ce6e0de82a04ca3dfcf1a8e62e233b7382aa28a8a9be6e862b1af",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/expr.c||src/expr.c",
      "src/wherecode.c||src/wherecode.c",
      "test/gencol1.test||test/gencol1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 2d53a30cc23e53033af8e8666457654db5dcc453ed6cd176ce1d0bff4f528159",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/expr.c||src/expr.c": [
      "File: src/expr.c -> src/expr.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3607:         int iReg = sqlite3ExprCodeTarget(pParse, pExpr->pLeft,target);",
      "3609:         if( aff>SQLITE_AFF_BLOB ){",
      "3610:           static const char zAff[] = \"B\\000C\\000D\\000E\";",
      "3611:           assert( SQLITE_AFF_BLOB=='A' );",
      "",
      "[Removed Lines]",
      "3608:         int aff = sqlite3TableColumnAffinity(pExpr->y.pTab, pExpr->iColumn);",
      "",
      "[Added Lines]",
      "3608:         int aff;",
      "3609:         if( pExpr->y.pTab ){",
      "3610:           aff = sqlite3TableColumnAffinity(pExpr->y.pTab, pExpr->iColumn);",
      "3611:         }else{",
      "3612:           aff = pExpr->affExpr;",
      "3613:         }",
      "",
      "---------------"
    ],
    "src/wherecode.c||src/wherecode.c": [
      "File: src/wherecode.c -> src/wherecode.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1141:   if( pExpr->op==TK_COLUMN ){",
      "1142:     IdxExprTrans *pX = p->u.pIdxTrans;",
      "1143:     if( pExpr->iTable==pX->iTabCur && pExpr->iColumn==pX->iTabCol ){",
      "1144:       pExpr->iTable = pX->iIdxCur;",
      "1145:       pExpr->iColumn = pX->iIdxCol;",
      "1146:       pExpr->y.pTab = 0;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1144:       assert( pExpr->y.pTab!=0 );",
      "1145:       pExpr->affExpr = sqlite3TableColumnAffinity(pExpr->y.pTab,pExpr->iColumn);",
      "",
      "---------------"
    ],
    "test/gencol1.test||test/gencol1.test": [
      "File: test/gencol1.test -> test/gencol1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "243:   UPDATE t0 SET c0 = NULL;",
      "244: } {1 {generated column loop on \"c2\"}}",
      "247: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "246: # 2019-11-21 Problems in the new generated column logic",
      "247: # reported by Yongheng Chen and Rui Zhong",
      "248: do_execsql_test gencol1-9.10 {",
      "249:   DROP TABLE IF EXISTS t1;",
      "250:   DROP TABLE IF EXISTS t2;",
      "251:   CREATE TABLE t1(aa , bb AS (17) UNIQUE);",
      "252:   INSERT INTO t1 VALUES(17);",
      "253:   CREATE TABLE t2(cc);",
      "254:   INSERT INTO t2 VALUES(41);",
      "255:   SELECT * FROM t2 JOIN t1 WHERE t1.bb=t1.aa AND t1.bb=17;",
      "256: } {41 17 17}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "8e10d74b214c1ff1bb542266c256f4a9ee3e9b47",
      "candidate_info": {
        "commit_hash": "8e10d74b214c1ff1bb542266c256f4a9ee3e9b47",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/8e10d74b214c1ff1bb542266c256f4a9ee3e9b47",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c",
          "src/insert.c",
          "src/sqliteInt.h",
          "src/where.c"
        ],
        "message": "Get generated columns working for WITHOUT ROWID tables.\n\nFossilOrigin-Name: 9f409649ec4282a47f0a8b079b419f1922e0c24779b297f477ced168d5b7910d",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c",
          "src/insert.c||src/insert.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/where.c||src/where.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: e8426acb94179ff49549aced6ea3c26c49ba4761c2f414fa1772d6a031edc79d",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "877: }",
          "883: i16 sqlite3ColumnOfIndex(Index *pIdx, i16 iCol){",
          "884:   int i;",
          "885: #ifndef SQLITE_OMIT_GENERATED_COLUMNS",
          "887:   if( pTab->tabFlags & TF_HasVirtual ){",
          "888:     for(i=0; i<=iCol; i++){",
          "889:       if( pTab->aCol[i].colFlags & COLFLAG_VIRTUAL ) iCol++;",
          "890:     }",
          "891:   }",
          "897: }",
          "899: #ifndef SQLITE_OMIT_GENERATED_COLUMNS",
          "908: i16 sqlite3ColumnOfTable(Table *pTab, i16 iCol){",
          "909:   int i;",
          "",
          "[Removed Lines]",
          "886:   Table *pTab = pIdx->pTable;",
          "892: #endif",
          "893:   for(i=0; i<pIdx->nColumn; i++){",
          "894:     if( iCol==pIdx->aiColumn[i] ) return i;",
          "895:   }",
          "896:   return -1;",
          "",
          "[Added Lines]",
          "885:   for(i=0; i<pIdx->nColumn; i++){",
          "886:     if( iCol==pIdx->aiColumn[i] ) return i;",
          "887:   }",
          "888:   return -1;",
          "889: }",
          "905: i16 sqlite3ColumnOfStorage(Table *pTab, i16 iCol){",
          "907:     int i;",
          "912:   return iCol;",
          "914: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2051:   nExtra = 0;",
          "2052:   for(i=0; i<pTab->nCol; i++){",
          "2054:   }",
          "2055:   if( resizeIndexObject(db, pPk, nPk+nExtra) ) return;",
          "2056:   for(i=0, j=nPk; i<pTab->nCol; i++){",
          "2058:       assert( j<pPk->nColumn );",
          "2059:       pPk->aiColumn[j] = i;",
          "2060:       pPk->azColl[j] = sqlite3StrBINARY;",
          "",
          "[Removed Lines]",
          "2053:     if( !hasColumn(pPk->aiColumn, nPk, i) ) nExtra++;",
          "2057:     if( !hasColumn(pPk->aiColumn, j, i) ){",
          "",
          "[Added Lines]",
          "2072:     if( !hasColumn(pPk->aiColumn, nPk, i)",
          "2073:      && (pTab->aCol[i].colFlags & COLFLAG_VIRTUAL)==0 ) nExtra++;",
          "2077:     if( !hasColumn(pPk->aiColumn, j, i)",
          "2078:      && (pTab->aCol[i].colFlags & COLFLAG_VIRTUAL)==0",
          "2079:     ){",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2062:     }",
          "2063:   }",
          "2064:   assert( pPk->nColumn==j );",
          "2066:   recomputeColumnsNotIndexed(pPk);",
          "2067: }",
          "",
          "[Removed Lines]",
          "2065:   assert( pTab->nCol<=j );",
          "",
          "[Added Lines]",
          "2087:   assert( pTab->nNVCol<=j );",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2172:     }",
          "2173:     if( (p->tabFlags & TF_HasPrimaryKey)==0 ){",
          "2174:       sqlite3ErrorMsg(pParse, \"PRIMARY KEY missing on table %s\", p->zName);",
          "2178:     }",
          "2179:   }",
          "2183: #ifndef SQLITE_OMIT_CHECK",
          "",
          "[Removed Lines]",
          "2175:     }else{",
          "2176:       p->tabFlags |= TF_WithoutRowid | TF_NoVisibleRowid;",
          "2177:       convertToWithoutRowidTable(pParse, p);",
          "2181:   iDb = sqlite3SchemaToIndex(db, p->pSchema);",
          "",
          "[Added Lines]",
          "2197:       return;",
          "2199:     p->tabFlags |= TF_WithoutRowid | TF_NoVisibleRowid;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2204:   }",
          "2205: #endif",
          "2208:   estimateTableWidth(p);",
          "2209:   for(pIdx=p->pIndex; pIdx; pIdx=pIdx->pNext){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2227:   if( (tabOpts & TF_WithoutRowid)!=0 ){",
          "2228:     convertToWithoutRowidTable(pParse, p);",
          "2229:   }",
          "2231:   iDb = sqlite3SchemaToIndex(db, p->pSchema);",
          "",
          "---------------"
        ],
        "src/insert.c||src/insert.c": [
          "File: src/insert.c -> src/insert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1435:   for(i=0; i<nCol; i++){",
          "1436:     if( i==pTab->iPKey ){",
          "1438:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1436:     int iReg;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1453:     assert( onError==OE_Rollback || onError==OE_Abort || onError==OE_Fail",
          "1454:         || onError==OE_Ignore || onError==OE_Replace );",
          "1455:     addr1 = 0;",
          "1456:     switch( onError ){",
          "1457:       case OE_Replace: {",
          "1458:         assert( onError==OE_Replace );",
          "1459:         addr1 = sqlite3VdbeMakeLabel(pParse);",
          "1461:           VdbeCoverage(v);",
          "1462:         sqlite3ExprCode(pParse, pTab->aCol[i].pDflt, regNewData+1+i);",
          "1464:           VdbeCoverage(v);",
          "1465:         onError = OE_Abort;",
          "",
          "[Removed Lines]",
          "1460:         sqlite3VdbeAddOp2(v, OP_NotNull, regNewData+1+i, addr1);",
          "1463:         sqlite3VdbeAddOp2(v, OP_NotNull, regNewData+1+i, addr1);",
          "",
          "[Added Lines]",
          "1457:     if( (pTab->tabFlags & TF_HasVirtual)==0 ){",
          "1458:       iReg = regNewData+1+i;",
          "1459:     }else if( pTab->aCol[i].colFlags & COLFLAG_VIRTUAL ){",
          "1460:       iReg = ++pParse->nMem;",
          "1461:       assert( pParse->iSelfTab==0 );",
          "1462:       pParse->iSelfTab = -regNewData;",
          "1463:       sqlite3ExprCode(pParse, pTab->aCol[i].pDflt, iReg);",
          "1464:       pParse->iSelfTab = 0;",
          "1465:       if( onError==OE_Replace ) onError = OE_Abort;",
          "1466:     }else{",
          "1467:       iReg = sqlite3ColumnOfTable(pTab, i) + regNewData + 1;",
          "1468:     }",
          "1473:         sqlite3VdbeAddOp2(v, OP_NotNull, iReg, addr1);",
          "1476:         sqlite3VdbeAddOp2(v, OP_NotNull, iReg, addr1);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1474:         char *zMsg = sqlite3MPrintf(db, \"%s.%s\", pTab->zName,",
          "1475:                                     pTab->aCol[i].zName);",
          "1476:         sqlite3VdbeAddOp3(v, OP_HaltIfNull, SQLITE_CONSTRAINT_NOTNULL, onError,",
          "1478:         sqlite3VdbeAppendP4(v, zMsg, P4_DYNAMIC);",
          "1479:         sqlite3VdbeChangeP5(v, P5_ConstraintNotNull);",
          "1480:         VdbeCoverage(v);",
          "",
          "[Removed Lines]",
          "1477:                           regNewData+1+i);",
          "",
          "[Added Lines]",
          "1490:                           iReg);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1483:       }",
          "1484:       default: {",
          "1485:         assert( onError==OE_Ignore );",
          "1487:         VdbeCoverage(v);",
          "1488:         break;",
          "1489:       }",
          "",
          "[Removed Lines]",
          "1486:         sqlite3VdbeAddOp2(v, OP_IsNull, regNewData+1+i, ignoreDest);",
          "",
          "[Added Lines]",
          "1499:         sqlite3VdbeAddOp2(v, OP_IsNull, iReg, ignoreDest);",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "3954: Index *sqlite3PrimaryKeyIndex(Table*);",
          "3955: i16 sqlite3ColumnOfIndex(Index*, i16);",
          "3956: #ifdef SQLITE_OMIT_GENERATED_COLUMNS",
          "3958: #else",
          "3959:   i16 sqlite3ColumnOfTable(Table*, i16);",
          "3960: #endif",
          "3961: void sqlite3StartTable(Parse*,Token*,Token*,int,int,int,int);",
          "3962: #if SQLITE_ENABLE_HIDDEN_COLUMNS",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3961:   i16 sqlite3ColumnOfStorage(Table*, i16);",
          "",
          "---------------"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5378:             Index *pPk = sqlite3PrimaryKeyIndex(pTab);",
          "5379:             x = pPk->aiColumn[x];",
          "5380:             assert( x>=0 );",
          "5381:           }",
          "5382:           x = sqlite3ColumnOfIndex(pIdx, x);",
          "5383:           if( x>=0 ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5381:           }else{",
          "5382:             x = sqlite3ColumnOfStorage(pTab,x);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6ece353f2d2223ec78e63ce972081a047e89a641",
      "candidate_info": {
        "commit_hash": "6ece353f2d2223ec78e63ce972081a047e89a641",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/6ece353f2d2223ec78e63ce972081a047e89a641",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "src/resolve.c",
          "src/treeview.c",
          "test/istrue.test"
        ],
        "message": "Handle expressions like \"expr IS TRUE COLLATE xyz\" in the same way as \"expr IS TRUE\". Fix for [4d01eda8115b10d1].\n\nFossilOrigin-Name: 5c6146b56a75a94f4baa10e95407c54dd0b9314a57a8702a4b96b15c4d7ac48c",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "src/resolve.c||src/resolve.c",
          "src/treeview.c||src/treeview.c",
          "test/istrue.test||test/istrue.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/expr.c||src/expr.c"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/expr.c||src/expr.c"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 614ecb0af47038848e8ba2aed6b92db6f33ddc4aea6361795dbde440380f5a35",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1815: int sqlite3ExprTruthValue(const Expr *pExpr){",
          "1816:   assert( pExpr->op==TK_TRUEFALSE );",
          "1817:   assert( sqlite3StrICmp(pExpr->u.zToken,\"true\")==0",
          "1818:        || sqlite3StrICmp(pExpr->u.zToken,\"false\")==0 );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1816:   pExpr = sqlite3ExprSkipCollate((Expr*)pExpr);",
          "",
          "---------------"
        ],
        "src/resolve.c||src/resolve.c": [
          "File: src/resolve.c -> src/resolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "930:     }",
          "931:     case TK_IS:",
          "932:     case TK_ISNOT: {",
          "934:       assert( !ExprHasProperty(pExpr, EP_Reduced) );",
          "938:         int rc = resolveExprStep(pWalker, pRight);",
          "939:         if( rc==WRC_Abort ) return WRC_Abort;",
          "940:         if( pRight->op==TK_TRUEFALSE ){",
          "",
          "[Removed Lines]",
          "933:       Expr *pRight;",
          "937:       if( (pRight = pExpr->pRight)->op==TK_ID ){",
          "",
          "[Added Lines]",
          "933:       Expr *pRight = sqlite3ExprSkipCollate(pExpr->pRight);",
          "937:       if( pRight->op==TK_ID ){",
          "",
          "---------------"
        ],
        "src/treeview.c||src/treeview.c": [
          "File: src/treeview.c -> src/treeview.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "514:       };",
          "515:       assert( pExpr->op2==TK_IS || pExpr->op2==TK_ISNOT );",
          "516:       assert( pExpr->pRight );",
          "518:       x = (pExpr->op2==TK_ISNOT)*2 + sqlite3ExprTruthValue(pExpr->pRight);",
          "519:       zUniOp = azOp[x];",
          "520:       break;",
          "",
          "[Removed Lines]",
          "517:       assert( pExpr->pRight->op==TK_TRUEFALSE );",
          "",
          "[Added Lines]",
          "517:       assert( sqlite3ExprSkipCollate(pExpr->pRight)->op==TK_TRUEFALSE );",
          "",
          "---------------"
        ],
        "test/istrue.test||test/istrue.test": [
          "File: test/istrue.test -> test/istrue.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "158:   SELECT *,'x' FROM t7 ORDER BY a;",
          "159: } {1 0 1 0 1 x 2 1 0 0 1 x 3 1 0 0 1 x 4 0 1 1 0 x}",
          "161: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "161: do_execsql_test istrue-710 {",
          "162:   SELECT 0.5 IS TRUE COLLATE NOCASE;",
          "163:   SELECT 0.5 IS TRUE COLLATE RTRIM;",
          "164:   SELECT 0.5 IS TRUE COLLATE BINARY;",
          "166:   SELECT 0.5 IS TRUE;",
          "167:   SELECT 0.5 COLLATE NOCASE IS TRUE;",
          "168:   SELECT 0.0 IS FALSE;",
          "170:   SELECT 0.0 IS FALSE COLLATE NOCASE;",
          "171:   SELECT 0.0 IS FALSE COLLATE RTRIM;",
          "172:   SELECT 0.0 IS FALSE COLLATE BINARY;",
          "173: } {1 1 1   1 1 1  1 1 1}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "523fb53f72ad41bddfe02f1f5d667dfdd164240f",
      "candidate_info": {
        "commit_hash": "523fb53f72ad41bddfe02f1f5d667dfdd164240f",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/523fb53f72ad41bddfe02f1f5d667dfdd164240f",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/wapptest.tcl"
        ],
        "message": "Various fixes for the wapptest.tcl script.\n\nFossilOrigin-Name: cbf423656047f0cb5200be6981a205e0ae206eef8263aa686f4a3621fb07fb57",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/wapptest.tcl||test/wapptest.tcl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: a4af0c2fee05aaa2e95ae6a5c847ff2d363e24f325f4ffdcf51bc264b9bf5e2d",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/wapptest.tcl||test/wapptest.tcl": [
          "File: test/wapptest.tcl -> test/wapptest.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: # \\",
          "3: exec wapptclsh \"$0\" ${1+\"$@\"}",
          "5: #",
          "9: # Variables set by the \"control\" form:",
          "10: #",
          "",
          "[Removed Lines]",
          "6: #",
          "7: #",
          "",
          "[Added Lines]",
          "5: # package required wapp",
          "6: source [file join [file dirname [info script]] wapp.tcl]",
          "8: # Read the data from the releasetest_data.tcl script.",
          "10: source [file join [file dirname [info script]] releasetest_data.tcl]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "22: set G(tcl)      \"\"",
          "23: set G(jobs)     3",
          "48: # Check to see if there are uncommitted changes in the SQLite source",
          "49: # directory. Return true if there are, or false otherwise.",
          "",
          "[Removed Lines]",
          "25: set G(sqlite_version) unknown",
          "27: # The root of the SQLite source tree.",
          "28: #",
          "29: set G(srcdir)   [file dirname [file dirname [info script]]]",
          "31: # Either \"config\", \"running\", \"stopped\":",
          "32: #",
          "33: set G(state) \"config\"",
          "35: # releasetest.tcl script",
          "36: #",
          "37: set G(releaseTest) [file join [file dirname [info script]] releasetest.tcl]",
          "39: set G(cnt) 0",
          "41: # package required wapp",
          "42: source [file join [file dirname [info script]] wapp.tcl]",
          "44: # Read the data from the releasetest_data.tcl script.",
          "45: #",
          "46: source [file join [file dirname [info script]] releasetest_data.tcl]",
          "",
          "[Added Lines]",
          "28: proc wapptest_init {} {",
          "29:   global G",
          "31:   set lSave [list platform test keep msvc tcl jobs]",
          "32:   foreach k $lSave { set A($k) $G($k) }",
          "33:   array unset G",
          "34:   foreach k $lSave { set G($k) $A($k) }",
          "36:   # The root of the SQLite source tree.",
          "37:   set G(srcdir)   [file dirname [file dirname [info script]]]",
          "39:   # releasetest.tcl script",
          "40:   set G(releaseTest) [file join [file dirname [info script]] releasetest.tcl]",
          "42:   set G(sqlite_version) \"unknown\"",
          "44:   # Either \"config\", \"running\" or \"stopped\":",
          "45:   set G(state) \"config\"",
          "46: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "162:   }",
          "163: }",
          "165: proc slave_fileevent {name} {",
          "166:   global G",
          "167:   set fd $G(test.$name.channel)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "165: proc slave_test_done {name rc} {",
          "166:   global G",
          "167:   set G(test.$name.done) [clock seconds]",
          "168:   set G(test.$name.nError) 0",
          "169:   set G(test.$name.nTest) 0",
          "170:   set G(test.$name.errmsg) \"\"",
          "171:   if {$rc} {",
          "172:     incr G(test.$name.nError)",
          "173:   }",
          "174:   if {[file exists $G(test.$name.log)]} {",
          "175:     count_tests_and_errors $name $G(test.$name.log)",
          "176:   }",
          "177: }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "170:     fconfigure $fd -blocking 1",
          "171:     set rc [catch { close $fd }]",
          "172:     unset G(test.$name.channel)",
          "183:   } else {",
          "184:     set line [gets $fd]",
          "185:     if {[string trim $line] != \"\"} { puts \"Trace   : $name - \\\"$line\\\"\" }",
          "",
          "[Removed Lines]",
          "173:     set G(test.$name.done) [clock seconds]",
          "174:     set G(test.$name.nError) 0",
          "175:     set G(test.$name.nTest) 0",
          "176:     set G(test.$name.errmsg) \"\"",
          "177:     if {$rc} {",
          "178:       incr G(test.$name.nError)",
          "179:     }",
          "180:     if {[file exists $G(test.$name.log)]} {",
          "181:       count_tests_and_errors $name $G(test.$name.log)",
          "182:     }",
          "",
          "[Added Lines]",
          "187:     slave_test_done $name $rc",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "215:     catch {",
          "216:       append G(result) \" SQLite version $G(sqlite_version)\"",
          "217:     }",
          "218:   } else {",
          "219:     set nLaunch [expr $G(jobs) - $nRunning]",
          "220:     foreach j $G(test_array) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "223:     set G(state) \"stopped\"",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "241:   }",
          "242: }",
          "244: proc generate_main_page {{extra {}}} {",
          "245:   global G",
          "246:   set_test_array",
          "248:   wapp-trim {",
          "249:     <html>",
          "250:     <head>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "250: proc generate_select_widget {label id lOpt opt} {",
          "251:   wapp-trim {",
          "252:     <label> %string($label) </label>",
          "253:     <select id=%string($id) name=%string($id)>",
          "254:   }",
          "255:   foreach o $lOpt {",
          "256:     set selected \"\"",
          "257:     if {$o==$opt} { set selected \" selected=1\" }",
          "258:     wapp-subst \"<option $selected>$o</option>\"",
          "259:   }",
          "260:   wapp-trim { </select> }",
          "261: }",
          "267:   # <meta http-equiv=\"refresh\" content=\"5; URL=/\">",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "266:   wapp-trim {",
          "267:       <div class=div id=controls>",
          "271:   }",
          "276:   }",
          "277:   wapp-trim {",
          "286:   }",
          "289:         <label> Tcl: </label>",
          "290:         <input id=\"control_tcl\" name=\"control_tcl\"></input>",
          "292:         <label> Keep files: </label>",
          "293:         <input id=\"control_keep\" name=\"control_keep\" type=checkbox value=1>",
          "294:         </input>",
          "295:         <label> Use MSVC: </label>",
          "296:         <input id=\"control_msvc\" name=\"control_msvc\" type=checkbox value=1>",
          "297:         </input>",
          "313:   }",
          "314:   wapp-trim {",
          "319:      </form>",
          "323:   }",
          "324:   foreach t $G(test_array) {",
          "325:     set config [dict get $t config]",
          "326:     set target [dict get $t target]",
          "",
          "[Removed Lines]",
          "268:         <form action=\"control\" method=\"post\" name=\"control\">",
          "269:         <label> Platform: </label>",
          "270:         <select id=\"control_platform\" name=\"control_platform\">",
          "272:   foreach platform [array names ::Platforms] {",
          "273:     set selected \"\"",
          "274:     if {$platform==$G(platform)} { set selected \" selected=1\" }",
          "275:     wapp-subst \"<option $selected>$platform</option>\"",
          "278:         </select>",
          "279:         <label> Test: </label>",
          "280:         <select id=\"control_test\" name=\"control_test\">",
          "281:   }",
          "282:   foreach test [list Normal Veryquick Smoketest Build-Only] {",
          "283:     set selected \"\"",
          "284:     if {$test==$G(test)} { set selected \" selected=1\" }",
          "285:     wapp-subst \"<option $selected>$test</option>\"",
          "287:   wapp-trim [subst -nocommands {",
          "288:         </select>",
          "298:         <hr>",
          "299:         <div class=right>",
          "300:           <label> Jobs: </label>",
          "301:           <select id=\"control_jobs\" name=\"control_jobs\">",
          "302:   }]",
          "303:   for {set i 1} {$i <= 8} {incr i} {",
          "304:     if {$G(jobs)==$i} {",
          "305:       wapp-trim {",
          "306:         <option selected=1>%string($i)</option>",
          "307:       }",
          "308:     } else {",
          "309:       wapp-trim {",
          "310:         <option>%string($i)</option>",
          "311:       }",
          "312:     }",
          "315:           </select>",
          "316:           <input id=control_go name=control_go type=submit value=\"Run Tests!\">",
          "317:           </input>",
          "318:         </div>",
          "320:       </div>",
          "321:       <div class=div id=tests>",
          "322:       <table>",
          "",
          "[Added Lines]",
          "288:       <form action=\"control\" method=\"post\" name=\"control\">",
          "291:   # Build the \"platform\" select widget.",
          "292:   set lOpt [array names ::Platforms]",
          "293:   generate_select_widget Platform control_platform $lOpt $G(platform)",
          "295:   # Build the \"test\" select widget.",
          "296:   set lOpt [list Normal Veryquick Smoketest Build-Only]",
          "297:   generate_select_widget Test control_test $lOpt $G(test)",
          "299:   # Build the \"jobs\" select widget. Options are 1 to 8.",
          "300:   generate_select_widget Jobs control_jobs {1 2 3 4 5 6 7 8} $G(jobs)",
          "302:   switch $G(state) {",
          "303:     config {",
          "304:       set txt \"Run Tests!\"",
          "305:       set id control_run",
          "306:     }",
          "307:     running {",
          "308:       set txt \"STOP Tests!\"",
          "309:       set id control_stop",
          "310:     }",
          "311:     stopped {",
          "312:       set txt \"Reset!\"",
          "313:       set id control_reset",
          "314:     }",
          "317:     <div class=right>",
          "318:     <input id=%string($id) name=%string($id) type=submit value=\"%string($txt)\">",
          "319:     </input>",
          "320:     </div>",
          "323:   wapp-trim {",
          "324:   <br><br>",
          "337:   wapp-trim {",
          "338:      </div>",
          "339:      <div class=div2 id=tests>",
          "340:   }",
          "341:   wapp-page-tests",
          "343:   set script \"script/$G(state).js\"",
          "344:   wapp-trim {",
          "345:     </div>",
          "346:       <script src=%string($script)></script>",
          "347:     </body>",
          "348:     </html>",
          "349:   }",
          "350: }",
          "352: proc wapp-default {} {",
          "353:   generate_main_page",
          "354: }",
          "356: proc wapp-page-tests {} {",
          "357:   global G",
          "358:   wapp-trim { <table> }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "371:     }",
          "372:   }",
          "378:   if {[info exists G(result)]} {",
          "379:     set res $G(result)",
          "380:     wapp-trim {",
          "382:     }",
          "383:   }",
          "394: }",
          "396: proc wapp-page-control {} {",
          "397:   global G",
          "399:     if {[wapp-param-exists control_$v]} {",
          "400:       set G($v) [wapp-param control_$v]",
          "403:     }",
          "404:   }",
          "409:     set_test_array",
          "410:     set ::G(state) \"running\"",
          "411:   }",
          "413:   if {$::G(state) == \"running\"} {",
          "414:     do_some_stuff",
          "415:   }",
          "417:   wapp-redirect /",
          "418: }",
          "420: proc wapp-page-style.css {} {",
          "421:   wapp-subst {",
          "422:     .div {",
          "",
          "[Removed Lines]",
          "374:   wapp-trim {",
          "375:       </table>",
          "376:       </div>",
          "377:   }",
          "381:       <div class=div id=log> %string($res) </div>",
          "384:   wapp-trim {",
          "385:     <script src=\"script.js\"></script>",
          "386:     </body>",
          "387:     </html>",
          "388:   }",
          "389:   incr G(cnt)",
          "390: }",
          "392: proc wapp-default {} {",
          "393:   generate_main_page",
          "398:   foreach v {platform test tcl jobs keep msvc} {",
          "401:     } else {",
          "402:       set G($v) 0",
          "406:   if {[wapp-param-exists control_go]} {",
          "407:     # This is an actual \"run test\" command, not just a change of",
          "408:     # configuration!",
          "",
          "[Added Lines]",
          "409:   wapp-trim { </table> }",
          "414:       <div class=border id=result> %string($res) </div>",
          "419: # URI: /control",
          "420: #",
          "421: # Whenever the form at the top of the application page is submitted, it",
          "422: # is submitted here.",
          "423: #",
          "426:   catch { puts [wapp-param control_msvc] }",
          "427:   if {$::G(state)==\"config\"} {",
          "428:     set lControls [list platform test tcl jobs keep msvc]",
          "429:     set G(msvc) 0",
          "430:     set G(keep) 0",
          "431:   } else {",
          "432:     set lControls [list jobs]",
          "433:   }",
          "434:   foreach v $lControls {",
          "440:   if {[wapp-param-exists control_run]} {",
          "441:     # This is a \"run test\" command.",
          "446:   if {[wapp-param-exists control_stop]} {",
          "447:     # A \"STOP tests\" command.",
          "448:     set G(state) \"stopped\"",
          "449:     set G(result) \"Test halted by user\"",
          "450:     foreach j $G(test_array) {",
          "451:       set name [dict get $j config]",
          "452:       if { [info exists G(test.$name.channel)] } {",
          "453:         close $G(test.$name.channel)",
          "454:         unset G(test.$name.channel)",
          "455:         slave_test_done $name 1",
          "456:       }",
          "457:     }",
          "458:   }",
          "460:   if {[wapp-param-exists control_reset]} {",
          "461:     # A \"reset app\" command.",
          "462:     set G(state) \"config\"",
          "463:     wapptest_init",
          "464:   }",
          "472: # URI: /style.css",
          "473: #",
          "474: # Return the stylesheet for the application main page.",
          "475: #",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "425:       padding: 1em;",
          "426:     }",
          "428:     .warning {",
          "429:       text-align:center;",
          "430:       color: red;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "484:     .border {",
          "485:       border: 3px groove #444444;",
          "486:       padding: 1em;",
          "487:       margin-top: 1em;",
          "488:       margin-bottom: 1em;",
          "489:     }",
          "491:     .div2 {",
          "492:       margin: 1em;",
          "493:     }",
          "495:     table {",
          "496:       padding: 1em;",
          "497:       width:100%;",
          "498:       border: 3px groove #444444;",
          "499:     }",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "432:       font-weight: bold;",
          "433:     }",
          "438:     .testfield {",
          "439:       padding-right: 10ex;",
          "440:     }",
          "442:     .testwait {}",
          "443:     .testrunning { color: blue }",
          "444:     .testdone { color: green }",
          "445:     .testfail { color: red }",
          "446:   }",
          "447: }",
          "451:   set tcl $::G(tcl)",
          "452:   set keep $::G(keep)",
          "453:   set msvc $::G(msvc)",
          "455:   wapp-subst {",
          "457:     lElem.forEach(function(e) {",
          "458:       var elem = document.getElementById(e);",
          "459:       elem.addEventListener(\"change\", function() { control.submit() } );",
          "",
          "[Removed Lines]",
          "435:     .right {",
          "436:     }",
          "449: proc wapp-page-script.js {} {",
          "456:     var lElem = \\[\"control_platform\", \"control_test\", \"control_msvc\", \"control_jobs\"\\];",
          "",
          "[Added Lines]",
          "510:       white-space: nowrap;",
          "518:     .right { float: right; }",
          "523: # URI: /script/${state}.js",
          "524: #",
          "525: # The last part of this URI is always \"config.js\", \"running.js\" or",
          "526: # \"stopped.js\", depending on the state of the application. It returns",
          "527: # the javascript part of the front-end for the requested state to the",
          "528: # browser.",
          "529: #",
          "530: proc wapp-page-script {} {",
          "531:   regexp {[^/]*$} [wapp-param REQUEST_URI] script",
          "538:     var lElem = \\[\"control_platform\", \"control_test\", \"control_msvc\",",
          "539:         \"control_jobs\"",
          "540:     \\];",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "469:     elem.checked = %string($msvc);",
          "470:   }",
          "473:     wapp-subst {",
          "474:       var lElem = \\[\"control_platform\", \"control_test\",",
          "476:       \\];",
          "477:       lElem.forEach(function(e) {",
          "478:         var elem = document.getElementById(e);",
          "",
          "[Removed Lines]",
          "472:   if {$::G(state)!=\"config\"} {",
          "475:           \"control_tcl\", \"control_keep\", \"control_msvc\", \"control_go\"",
          "",
          "[Added Lines]",
          "556:   if {$script != \"config.js\"} {",
          "559:           \"control_tcl\", \"control_keep\", \"control_msvc\"",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "480:       })",
          "481:     }",
          "482:   }",
          "483: }",
          "485: proc wapp-page-env {} {",
          "486:   wapp-allow-xorigin-params",
          "487:   wapp-trim {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "568:   if {$script == \"running.js\"} {",
          "569:     wapp-subst {",
          "570:       function reload_tests() {",
          "571:         fetch('tests')",
          "572:           .then( data => data.text() )",
          "573:           .then( data => {",
          "574:             document.getElementById(\"tests\").innerHTML = data;",
          "575:           })",
          "576:           .then( data => {",
          "577:             if( document.getElementById(\"result\") ){",
          "578:               document.location = document.location;",
          "579:             } else {",
          "580:               setTimeout(reload_tests, 1000)",
          "581:             }",
          "582:           });",
          "583:       }",
          "585:       setTimeout(reload_tests, 1000)",
          "586:     }",
          "587:   }",
          "590: # URI: /env",
          "591: #",
          "592: # This is for debugging only. Serves no other purpose.",
          "593: #",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "490:   }",
          "491: }",
          "493: proc wapp-page-log {} {",
          "494:   set log [string range [wapp-param REQUEST_URI] 5 end]",
          "495:   set fd [open $log]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "602: # URI: /log/dirname/test.log",
          "603: #",
          "604: # This URI reads file \"dirname/test.log\" from disk, wraps it in a <pre>",
          "605: # block, and returns it to the browser. Use for viewing log files.",
          "606: #",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "502:   }",
          "503: }",
          "505: wapp-start $argv",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "619: wapptest_init",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d0ff601c62a4873a5808fd072dc573797883ef51",
      "candidate_info": {
        "commit_hash": "d0ff601c62a4873a5808fd072dc573797883ef51",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/d0ff601c62a4873a5808fd072dc573797883ef51",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/main.c",
          "src/resolve.c",
          "src/shell.c.in",
          "src/sqlite.h.in",
          "src/sqliteInt.h",
          "src/test1.c"
        ],
        "message": "Improved interface to double-quoted string literal enabling/disabling.\n\nFossilOrigin-Name: 923cfd53fcff2fcb91530bf819d2ecb0eda3f6a27dae29c7460f9ce3a3ffce7b",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/main.c||src/main.c",
          "src/resolve.c||src/resolve.c",
          "src/shell.c.in||src/shell.c.in",
          "src/sqlite.h.in||src/sqlite.h.in",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/test1.c||src/test1.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 1fad20925efa70d0c242e9cba8fa55456fb07a81229c1068da84c6e27d0c0be8",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/main.c||src/main.c": [
          "File: src/main.c -> src/main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "846:         { SQLITE_DBCONFIG_WRITABLE_SCHEMA,       SQLITE_WriteSchema|",
          "847:                                                  SQLITE_NoSchemaError  },",
          "848:         { SQLITE_DBCONFIG_LEGACY_ALTER_TABLE,    SQLITE_LegacyAlter    },",
          "851:       };",
          "852:       unsigned int i;",
          "",
          "[Removed Lines]",
          "849:         { SQLITE_DBCONFIG_NO_DQS_SCHEMA,         SQLITE_NoDQSSchema    },",
          "850:         { SQLITE_DBCONFIG_NO_DQS,                SQLITE_NoDQS          },",
          "",
          "[Added Lines]",
          "849:         { SQLITE_DBCONFIG_DQS_DDL,               SQLITE_DqsDDL         },",
          "850:         { SQLITE_DBCONFIG_DQS_DML,               SQLITE_DqsDML         },",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3074:   db->nextPagesize = 0;",
          "3075:   db->nMaxSorterMmap = 0x7FFFFFFF;",
          "3076:   db->flags |= SQLITE_ShortColNames | SQLITE_EnableTrigger | SQLITE_CacheSpill",
          "3078: #if !defined(SQLITE_DEFAULT_AUTOMATIC_INDEX) || SQLITE_DEFAULT_AUTOMATIC_INDEX",
          "3079:                  | SQLITE_AutoIndex",
          "3080: #endif",
          "",
          "[Removed Lines]",
          "3077:                  | SQLITE_NoDQSSchema",
          "",
          "[Added Lines]",
          "3077:                  | SQLITE_DqsDML",
          "",
          "---------------"
        ],
        "src/resolve.c||src/resolve.c": [
          "File: src/resolve.c -> src/resolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "148:   return 1;",
          "149: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "154: static int areDoubleQuotedStringsEnabled(sqlite3 *db, NameContext *pTopNC){",
          "156:   if( pTopNC->ncFlags & NC_IsDDL ){",
          "158:     if( sqlite3WritableSchema(db) && (db->flags & SQLITE_DqsDML)!=0 ){",
          "159:       return 1;",
          "160:     }",
          "161:     return (db->flags & SQLITE_DqsDDL)!=0;",
          "162:   }else{",
          "164:     return (db->flags & SQLITE_DqsDML)!=0;",
          "165:   }",
          "166: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "477:   if( cnt==0 && zTab==0 ){",
          "478:     assert( pExpr->op==TK_ID );",
          "482:     ){",
          "",
          "[Removed Lines]",
          "479:     if( ExprHasProperty(pExpr,EP_DblQuoted)",
          "480:      && 0==(pTopNC->ncFlags&NC_NoDblQStr)",
          "481:      && 0==(db->flags & SQLITE_NoDQS)",
          "",
          "[Added Lines]",
          "496:     if( ExprHasProperty(pExpr,EP_DblQuoted)",
          "497:      && areDoubleQuotedStringsEnabled(db, pTopNC)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1771:   }",
          "1772:   sNC.pParse = pParse;",
          "1773:   sNC.pSrcList = &sSrc;",
          "1783:   if( (rc = sqlite3ResolveExprNames(&sNC, pExpr))!=SQLITE_OK ) return rc;",
          "1784:   if( pList ) rc = sqlite3ResolveExprListNames(&sNC, pList);",
          "1785:   return rc;",
          "",
          "[Removed Lines]",
          "1774:   sNC.ncFlags = type;",
          "1775:   if( (pParse->db->flags & SQLITE_NoDQS)!=0",
          "1776:    || (!pParse->db->init.busy",
          "1777:         && !sqlite3WritableSchema(pParse->db)",
          "1778:         && (pParse->db->flags & SQLITE_NoDQSSchema)!=0",
          "1779:       )",
          "1780:   ){",
          "1781:     sNC.ncFlags |= NC_NoDblQStr;",
          "1782:   }",
          "",
          "[Added Lines]",
          "1790:   sNC.ncFlags = type | NC_IsDDL;",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "7086:         { \"defensive\",          SQLITE_DBCONFIG_DEFENSIVE             },",
          "7087:         { \"wriable_schema\",     SQLITE_DBCONFIG_WRITABLE_SCHEMA       },",
          "7088:         { \"legacy_alter_table\", SQLITE_DBCONFIG_LEGACY_ALTER_TABLE    },",
          "7091:     };",
          "7092:     int ii, v;",
          "7093:     open_db(p, 0);",
          "",
          "[Removed Lines]",
          "7089:         { \"no_dqs_schema\",      SQLITE_DBCONFIG_NO_DQS_SCHEMA         },",
          "7090:         { \"no_dqs\",             SQLITE_DBCONFIG_NO_DQS                },",
          "",
          "[Added Lines]",
          "7089:         { \"dqs_dml\",            SQLITE_DBCONFIG_DQS_DML               },",
          "7090:         { \"dqs_ddl\",            SQLITE_DBCONFIG_DQS_DDL               },",
          "",
          "---------------"
        ],
        "src/sqlite.h.in||src/sqlite.h.in": [
          "File: src/sqlite.h.in -> src/sqlite.h.in"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "2799: #define NC_NoDblQStr 0x10000 /* Do not allow double-quoted string hack.",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/test1.c||src/test1.c": [
          "File: src/test1.c -> src/test1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "7619:     { \"DEFENSIVE\",          SQLITE_DBCONFIG_DEFENSIVE },",
          "7620:     { \"WRITABLE_SCHEMA\",    SQLITE_DBCONFIG_WRITABLE_SCHEMA },",
          "7621:     { \"LEGACY_ALTER_TABLE\", SQLITE_DBCONFIG_LEGACY_ALTER_TABLE },",
          "7624:   };",
          "7625:   int i;",
          "7626:   int v;",
          "",
          "[Removed Lines]",
          "7622:     { \"NO_DQS_SCHEMA\",      SQLITE_DBCONFIG_NO_DQS_SCHEMA },",
          "7623:     { \"NO_DQS\",             SQLITE_DBCONFIG_NO_DQS },",
          "",
          "[Added Lines]",
          "7622:     { \"DQS_DML\",            SQLITE_DBCONFIG_DQS_DML },",
          "7623:     { \"DQS_DDL\",            SQLITE_DBCONFIG_DQS_DDL },",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d9bc6e8973e9bedadf51bb8fb50f143afdeb497a",
      "candidate_info": {
        "commit_hash": "d9bc6e8973e9bedadf51bb8fb50f143afdeb497a",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/d9bc6e8973e9bedadf51bb8fb50f143afdeb497a",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/whereInt.h",
          "tool/lemon.c"
        ],
        "message": "Fix some harmless compiler warnings.\n\nFossilOrigin-Name: ca068d82387fc3cda9d2050cedb4f9c61b6d9dc54f89015b4b2ee492243ed5c9",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/whereInt.h||src/whereInt.h",
          "tool/lemon.c||tool/lemon.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: e6d5fee8cdbdce8515957e8288e4d1e7b06f417fd3f9deeeb636fbf5b995af51",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/whereInt.h||src/whereInt.h": [
          "File: src/whereInt.h -> src/whereInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "17: #ifndef SQLITE_WHEREINT_H",
          "18: #define SQLITE_WHEREINT_H",
          "",
          "---------------"
        ],
        "tool/lemon.c||tool/lemon.c": [
          "File: tool/lemon.c -> tool/lemon.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "485: static struct action *Action_new(void){",
          "487:   struct action *newaction;",
          "490:     int i;",
          "491:     int amt = 100;",
          "494:       fprintf(stderr,\"Unable to allocate memory for a new parser action.\");",
          "495:       exit(1);",
          "496:     }",
          "499:   }",
          "502:   return newaction;",
          "503: }",
          "",
          "[Removed Lines]",
          "486:   static struct action *freelist = 0;",
          "489:   if( freelist==0 ){",
          "492:     freelist = (struct action *)calloc(amt, sizeof(struct action));",
          "493:     if( freelist==0 ){",
          "497:     for(i=0; i<amt-1; i++) freelist[i].next = &freelist[i+1];",
          "498:     freelist[amt-1].next = 0;",
          "500:   newaction = freelist;",
          "501:   freelist = freelist->next;",
          "",
          "[Added Lines]",
          "486:   static struct action *actionfreelist = 0;",
          "489:   if( actionfreelist==0 ){",
          "492:     actionfreelist = (struct action *)calloc(amt, sizeof(struct action));",
          "493:     if( actionfreelist==0 ){",
          "497:     for(i=0; i<amt-1; i++) actionfreelist[i].next = &actionfreelist[i+1];",
          "498:     actionfreelist[amt-1].next = 0;",
          "500:   newaction = actionfreelist;",
          "501:   actionfreelist = actionfreelist->next;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1907:   return ep;",
          "1908: }",
          "1911: static struct s_options *op;",
          "1912: static FILE *errstream;",
          "",
          "[Removed Lines]",
          "1910: static char **argv;",
          "",
          "[Added Lines]",
          "1910: static char **g_argv;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1920: static void errline(int n, int k, FILE *err)",
          "1921: {",
          "1922:   int spcnt, i;",
          "1928:   }",
          "1929:   spcnt += k;",
          "1931:   if( spcnt<20 ){",
          "1932:     fprintf(err,\"\\n%*s^-- here\\n\",spcnt,\"\");",
          "1933:   }else{",
          "",
          "[Removed Lines]",
          "1923:   if( argv[0] ) fprintf(err,\"%s\",argv[0]);",
          "1924:   spcnt = lemonStrlen(argv[0]) + 1;",
          "1925:   for(i=1; i<n && argv[i]; i++){",
          "1926:     fprintf(err,\" %s\",argv[i]);",
          "1927:     spcnt += lemonStrlen(argv[i])+1;",
          "1930:   for(; argv[i]; i++) fprintf(err,\" %s\",argv[i]);",
          "",
          "[Added Lines]",
          "1923:   if( g_argv[0] ) fprintf(err,\"%s\",g_argv[0]);",
          "1924:   spcnt = lemonStrlen(g_argv[0]) + 1;",
          "1925:   for(i=1; i<n && g_argv[i]; i++){",
          "1926:     fprintf(err,\" %s\",g_argv[i]);",
          "1927:     spcnt += lemonStrlen(g_argv[i])+1;",
          "1930:   for(; g_argv[i]; i++) fprintf(err,\" %s\",g_argv[i]);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1943: {",
          "1944:   int i;",
          "1945:   int dashdash = 0;",
          "1949:         if( n==0 ) return i;",
          "1950:         n--;",
          "1951:       }",
          "1953:     }",
          "1954:   }",
          "1955:   return -1;",
          "",
          "[Removed Lines]",
          "1946:   if( argv!=0 && *argv!=0 ){",
          "1947:     for(i=1; argv[i]; i++){",
          "1948:       if( dashdash || !ISOPT(argv[i]) ){",
          "1952:       if( strcmp(argv[i],\"--\")==0 ) dashdash = 1;",
          "",
          "[Added Lines]",
          "1946:   if( g_argv!=0 && *g_argv!=0 ){",
          "1947:     for(i=1; g_argv[i]; i++){",
          "1948:       if( dashdash || !ISOPT(g_argv[i]) ){",
          "1952:       if( strcmp(g_argv[i],\"--\")==0 ) dashdash = 1;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1966:   int errcnt = 0;",
          "1967:   int j;",
          "1968:   for(j=0; op[j].label; j++){",
          "1970:   }",
          "1972:   if( op[j].label==0 ){",
          "1973:     if( err ){",
          "1974:       fprintf(err,\"%sundefined option.\\n\",emsg);",
          "",
          "[Removed Lines]",
          "1969:     if( strncmp(&argv[i][1],op[j].label,lemonStrlen(op[j].label))==0 ) break;",
          "1971:   v = argv[i][0]=='-' ? 1 : 0;",
          "",
          "[Added Lines]",
          "1969:     if( strncmp(&g_argv[i][1],op[j].label,lemonStrlen(op[j].label))==0 ) break;",
          "1971:   v = g_argv[i][0]=='-' ? 1 : 0;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1982:   }else if( op[j].type==OPT_FFLAG ){",
          "1983:     (*(void(*)(int))(op[j].arg))(v);",
          "1984:   }else if( op[j].type==OPT_FSTR ){",
          "1986:   }else{",
          "1987:     if( err ){",
          "1988:       fprintf(err,\"%smissing argument on switch.\\n\",emsg);",
          "",
          "[Removed Lines]",
          "1985:     (*(void(*)(char *))(op[j].arg))(&argv[i][2]);",
          "",
          "[Added Lines]",
          "1985:     (*(void(*)(char *))(op[j].arg))(&g_argv[i][2]);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2004:   char *cp;",
          "2005:   int j;",
          "2006:   int errcnt = 0;",
          "2008:   assert( cp!=0 );",
          "2010:   for(j=0; op[j].label; j++){",
          "2012:   }",
          "2014:   if( op[j].label==0 ){",
          "",
          "[Removed Lines]",
          "2007:   cp = strchr(argv[i],'=');",
          "2011:     if( strcmp(argv[i],op[j].label)==0 ) break;",
          "",
          "[Added Lines]",
          "2007:   cp = strchr(g_argv[i],'=');",
          "2011:     if( strcmp(g_argv[i],op[j].label)==0 ) break;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2035:           if( err ){",
          "2036:             fprintf(err,",
          "2037:                \"%sillegal character in floating-point argument.\\n\",emsg);",
          "2039:           }",
          "2040:           errcnt++;",
          "2041:         }",
          "",
          "[Removed Lines]",
          "2038:             errline(i,(int)((char*)end-(char*)argv[i]),err);",
          "",
          "[Added Lines]",
          "2038:             errline(i,(int)((char*)end-(char*)g_argv[i]),err);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2046:         if( *end ){",
          "2047:           if( err ){",
          "2048:             fprintf(err,\"%sillegal character in integer argument.\\n\",emsg);",
          "2050:           }",
          "2051:           errcnt++;",
          "2052:         }",
          "",
          "[Removed Lines]",
          "2049:             errline(i,(int)((char*)end-(char*)argv[i]),err);",
          "",
          "[Added Lines]",
          "2049:             errline(i,(int)((char*)end-(char*)g_argv[i]),err);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2086: int OptInit(char **a, struct s_options *o, FILE *err)",
          "2087: {",
          "2088:   int errcnt = 0;",
          "2090:   op = o;",
          "2091:   errstream = err;",
          "2093:     int i;",
          "2096:         errcnt += handleflags(i,err);",
          "2098:         errcnt += handleswitch(i,err);",
          "2099:       }",
          "2100:     }",
          "",
          "[Removed Lines]",
          "2089:   argv = a;",
          "2092:   if( argv && *argv && op ){",
          "2094:     for(i=1; argv[i]; i++){",
          "2095:       if( argv[i][0]=='+' || argv[i][0]=='-' ){",
          "2097:       }else if( strchr(argv[i],'=') ){",
          "",
          "[Added Lines]",
          "2089:   g_argv = a;",
          "2092:   if( g_argv && *g_argv && op ){",
          "2094:     for(i=1; g_argv[i]; i++){",
          "2095:       if( g_argv[i][0]=='+' || g_argv[i][0]=='-' ){",
          "2097:       }else if( strchr(g_argv[i],'=') ){",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2111:   int cnt = 0;",
          "2112:   int dashdash = 0;",
          "2113:   int i;",
          "2118:     }",
          "2119:   }",
          "2120:   return cnt;",
          "",
          "[Removed Lines]",
          "2114:   if( argv!=0 && argv[0]!=0 ){",
          "2115:     for(i=1; argv[i]; i++){",
          "2116:       if( dashdash || !ISOPT(argv[i]) ) cnt++;",
          "2117:       if( strcmp(argv[i],\"--\")==0 ) dashdash = 1;",
          "",
          "[Added Lines]",
          "2114:   if( g_argv!=0 && g_argv[0]!=0 ){",
          "2115:     for(i=1; g_argv[i]; i++){",
          "2116:       if( dashdash || !ISOPT(g_argv[i]) ) cnt++;",
          "2117:       if( strcmp(g_argv[i],\"--\")==0 ) dashdash = 1;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "2124: {",
          "2125:   int i;",
          "2126:   i = argindex(n);",
          "2128: }",
          "2130: void OptErr(int n)",
          "",
          "[Removed Lines]",
          "2127:   return i>=0 ? argv[i] : 0;",
          "",
          "[Added Lines]",
          "2127:   return i>=0 ? g_argv[i] : 0;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "2728:     case WAITING_FOR_CLASS_ID:",
          "2729:       if( !ISLOWER(x[0]) ){",
          "2730:         ErrorMsg(psp->filename, psp->tokenlineno,",
          "2732:         psp->errorcnt++;",
          "2733:         psp->state = RESYNC_AFTER_DECL_ERROR;",
          "2734:      }else if( Symbol_find(x) ){",
          "",
          "[Removed Lines]",
          "2731:           \"%%token_class must be followed by an identifier: \", x);",
          "",
          "[Added Lines]",
          "2731:           \"%%token_class must be followed by an identifier: %s\", x);",
          "",
          "---------------"
        ]
      }
    }
  ]
}