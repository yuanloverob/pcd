{
  "cve_id": "CVE-2019-19242",
  "cve_desc": "SQLite 3.30.1 mishandles pExpr->y.pTab, as demonstrated by the TK_COLUMN case in sqlite3ExprCodeTarget in expr.c.",
  "repo": "sqlite/sqlite",
  "patch_hash": "57f7ece78410a8aae86aa4625fb7556897db384c",
  "patch_info": {
    "commit_hash": "57f7ece78410a8aae86aa4625fb7556897db384c",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/57f7ece78410a8aae86aa4625fb7556897db384c",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/expr.c",
      "src/wherecode.c",
      "test/gencol1.test"
    ],
    "message": "Fix a problem that comes up when using generated columns that evaluate to a constant in an index and then making use of that index in a join.\n\nFossilOrigin-Name: 8b12e95fec7ce6e0de82a04ca3dfcf1a8e62e233b7382aa28a8a9be6e862b1af",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/expr.c||src/expr.c",
      "src/wherecode.c||src/wherecode.c",
      "test/gencol1.test||test/gencol1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 2d53a30cc23e53033af8e8666457654db5dcc453ed6cd176ce1d0bff4f528159",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/expr.c||src/expr.c": [
      "File: src/expr.c -> src/expr.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3607:         int iReg = sqlite3ExprCodeTarget(pParse, pExpr->pLeft,target);",
      "3609:         if( aff>SQLITE_AFF_BLOB ){",
      "3610:           static const char zAff[] = \"B\\000C\\000D\\000E\";",
      "3611:           assert( SQLITE_AFF_BLOB=='A' );",
      "",
      "[Removed Lines]",
      "3608:         int aff = sqlite3TableColumnAffinity(pExpr->y.pTab, pExpr->iColumn);",
      "",
      "[Added Lines]",
      "3608:         int aff;",
      "3609:         if( pExpr->y.pTab ){",
      "3610:           aff = sqlite3TableColumnAffinity(pExpr->y.pTab, pExpr->iColumn);",
      "3611:         }else{",
      "3612:           aff = pExpr->affExpr;",
      "3613:         }",
      "",
      "---------------"
    ],
    "src/wherecode.c||src/wherecode.c": [
      "File: src/wherecode.c -> src/wherecode.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1141:   if( pExpr->op==TK_COLUMN ){",
      "1142:     IdxExprTrans *pX = p->u.pIdxTrans;",
      "1143:     if( pExpr->iTable==pX->iTabCur && pExpr->iColumn==pX->iTabCol ){",
      "1144:       pExpr->iTable = pX->iIdxCur;",
      "1145:       pExpr->iColumn = pX->iIdxCol;",
      "1146:       pExpr->y.pTab = 0;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1144:       assert( pExpr->y.pTab!=0 );",
      "1145:       pExpr->affExpr = sqlite3TableColumnAffinity(pExpr->y.pTab,pExpr->iColumn);",
      "",
      "---------------"
    ],
    "test/gencol1.test||test/gencol1.test": [
      "File: test/gencol1.test -> test/gencol1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "243:   UPDATE t0 SET c0 = NULL;",
      "244: } {1 {generated column loop on \"c2\"}}",
      "247: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "246: # 2019-11-21 Problems in the new generated column logic",
      "247: # reported by Yongheng Chen and Rui Zhong",
      "248: do_execsql_test gencol1-9.10 {",
      "249:   DROP TABLE IF EXISTS t1;",
      "250:   DROP TABLE IF EXISTS t2;",
      "251:   CREATE TABLE t1(aa , bb AS (17) UNIQUE);",
      "252:   INSERT INTO t1 VALUES(17);",
      "253:   CREATE TABLE t2(cc);",
      "254:   INSERT INTO t2 VALUES(41);",
      "255:   SELECT * FROM t2 JOIN t1 WHERE t1.bb=t1.aa AND t1.bb=17;",
      "256: } {41 17 17}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "47a30159e5cdce71eb9df166c83eb01ec6c40718",
      "candidate_info": {
        "commit_hash": "47a30159e5cdce71eb9df166c83eb01ec6c40718",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/47a30159e5cdce71eb9df166c83eb01ec6c40718",
        "files": [
          "ext/fts5/fts5.h",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Fix typos in comments in fts5.h. No changes to code.\n\nFossilOrigin-Name: c19e97bc927074915a3ac8307bf89d30580cf90edd75f4001bcf589b2dfefe58",
        "before_after_code_files": [
          "ext/fts5/fts5.h||ext/fts5/fts5.h",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts5/fts5.h||ext/fts5/fts5.h": [
          "File: ext/fts5/fts5.h -> ext/fts5/fts5.h"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 8824115a9776e876a3677f0cb479e311ee65584d43872b37766a146afec72d8f",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "150edadf586e793489ba7ffbb76a34d4d874d6dd",
      "candidate_info": {
        "commit_hash": "150edadf586e793489ba7ffbb76a34d4d874d6dd",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/150edadf586e793489ba7ffbb76a34d4d874d6dd",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/fuzzdata8.db"
        ],
        "message": "New testcase added to test/fuzzdata8.db.\n\nFossilOrigin-Name: 2f5c1925b94d85489533549c58191feb1d803ad9d58b43f47fef42b72c531a38",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 2e01096b8933a2315e3dffcd7d0de84c744c1b4be1d909388c61f0fd636ddb99",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "680f6e8e2e4ae427baf48a05d3d41e53dd066c50",
      "candidate_info": {
        "commit_hash": "680f6e8e2e4ae427baf48a05d3d41e53dd066c50",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/680f6e8e2e4ae427baf48a05d3d41e53dd066c50",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/sqliteInt.h",
          "src/window.c",
          "test/pg_common.tcl",
          "test/window7.tcl",
          "test/window7.test",
          "test/windowerr.tcl",
          "test/windowerr.test"
        ],
        "message": "Support some \"ROWS BETWEEN N PRECEDING AND M FOLLOWING\" window functions without caching entire partitions.\n\nFossilOrigin-Name: e7a91f12282afb5d5d7d78397a11d18e0268ee0c931d85e21fce00d13929494e",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/window.c||src/window.c",
          "test/pg_common.tcl||test/pg_common.tcl",
          "test/window7.tcl||test/window7.tcl",
          "test/window7.test||test/window7.test",
          "test/windowerr.tcl||test/windowerr.tcl",
          "test/windowerr.test||test/windowerr.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: c155125fd5dddb438c09d40f5137c47d88defb7a6ede4261f09d7bdaad250d37",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "3580: };",
          "3582: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3581:   int regFirst;",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "790:     pMWin->iEphCsr = pParse->nTab++;",
          "792:     selectWindowRewriteEList(pParse, pMWin, pSrc, p->pEList, &pSublist);",
          "793:     selectWindowRewriteEList(pParse, pMWin, pSrc, p->pOrderBy, &pSublist);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "791:     pParse->nTab += 3;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "843:       }",
          "845:       sqlite3VdbeAddOp2(v, OP_OpenEphemeral, pMWin->iEphCsr, pSublist->nExpr);",
          "846:     }else{",
          "847:       sqlite3SelectDelete(db, pSub);",
          "848:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "847:       sqlite3VdbeAddOp2(v, OP_OpenDup, pMWin->iEphCsr+1, pMWin->iEphCsr);",
          "848:       sqlite3VdbeAddOp2(v, OP_OpenDup, pMWin->iEphCsr+2, pMWin->iEphCsr);",
          "849:       sqlite3VdbeAddOp2(v, OP_OpenDup, pMWin->iEphCsr+3, pMWin->iEphCsr);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1086:     sqlite3VdbeAddOp3(v, OP_Null, 0, pMWin->regPart, pMWin->regPart+nPart-1);",
          "1087:   }",
          "1089:   for(pWin=pMWin; pWin; pWin=pWin->pNextWin){",
          "1090:     FuncDef *p = pWin->pFunc;",
          "1091:     if( (p->funcFlags & SQLITE_FUNC_MINMAX) && pWin->eStart!=TK_UNBOUNDED ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1093:   pMWin->regFirst = ++pParse->nMem;",
          "1094:   sqlite3VdbeAddOp2(v, OP_Integer, 1, pMWin->regFirst);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1429:     }",
          "1430:     else if( pFunc->zName==leadName || pFunc->zName==lagName ){",
          "1431:       int nArg = pWin->pOwner->x.pList->nExpr;",
          "1433:       int csr = pWin->csrApp;",
          "1434:       int lbl = sqlite3VdbeMakeLabel(pParse);",
          "1435:       int tmpReg = sqlite3GetTempReg(pParse);",
          "1437:       if( nArg<3 ){",
          "1438:         sqlite3VdbeAddOp2(v, OP_Null, 0, pWin->regResult);",
          "",
          "[Removed Lines]",
          "1432:       int iEph = pMWin->iEphCsr;",
          "",
          "[Added Lines]",
          "1442:       int iEph = pMWin->iEphCsr;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1834:   sqlite3VdbeJumpHere(v, addrGoto);",
          "1835: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1844: static void windowCodeStep(",
          "1845:   Parse *pParse,",
          "1846:   Select *p,",
          "1847:   WhereInfo *pWInfo,",
          "1848:   int regGosub,",
          "1849:   int addrGosub",
          "1850: ){",
          "1851:   Window *pMWin = p->pWin;",
          "1852:   Vdbe *v = sqlite3GetVdbe(pParse);",
          "1855:   int regArg;",
          "1856:   int csrCurrent = pMWin->iEphCsr;",
          "1857:   int csrWrite = csrCurrent+1;",
          "1858:   int csrStart = csrCurrent+2;",
          "1859:   int csrEnd = csrCurrent+3;",
          "1864:   int iSubCsr = p->pSrc->a[0].iCursor;",
          "1865:   int nSub = p->pSrc->a[0].pTab->nCol;",
          "1866:   int k;",
          "1868:   int addrGoto;",
          "1869:   int addrIf;",
          "1870:   int addrIfEnd;",
          "1871:   int addrIfStart;",
          "1872:   int addrGosubFlush;",
          "1873:   int addrInteger;",
          "1874:   int addrGoto2;",
          "1876:   int reg = pParse->nMem+1;",
          "1877:   int regRecord = reg+nSub;",
          "1878:   int regRowid = regRecord+1;",
          "1880:   pParse->nMem += 1 + nSub + 1;",
          "1882:   regFlushPart = ++pParse->nMem;",
          "1883:   regStart = ++pParse->nMem;",
          "1884:   regEnd = ++pParse->nMem;",
          "1886:   assert( pMWin->eStart==TK_PRECEDING",
          "1887:        || pMWin->eStart==TK_CURRENT",
          "1888:        || pMWin->eStart==TK_FOLLOWING",
          "1889:        || pMWin->eStart==TK_UNBOUNDED",
          "1890:   );",
          "1891:   assert( pMWin->eEnd==TK_FOLLOWING",
          "1892:        || pMWin->eEnd==TK_CURRENT",
          "1893:        || pMWin->eEnd==TK_UNBOUNDED",
          "1894:        || pMWin->eEnd==TK_PRECEDING",
          "1895:   );",
          "1900:   for(k=0; k<nSub; k++){",
          "1901:     sqlite3VdbeAddOp3(v, OP_Column, iSubCsr, k, reg+k);",
          "1902:   }",
          "1903:   sqlite3VdbeAddOp3(v, OP_MakeRecord, reg, nSub, regRecord);",
          "1906:   if( pMWin->pPartition ){",
          "1907:     int addr;",
          "1908:     ExprList *pPart = pMWin->pPartition;",
          "1909:     int nPart = pPart->nExpr;",
          "1910:     int regNewPart = reg + pMWin->nBufferCol;",
          "1911:     KeyInfo *pKeyInfo = sqlite3KeyInfoFromExprList(pParse, pPart, 0, 0);",
          "1913:     addrIf = sqlite3VdbeAddOp1(v, OP_If, pMWin->regFirst);",
          "1914:     addr = sqlite3VdbeAddOp3(v, OP_Compare, regNewPart, pMWin->regPart, nPart);",
          "1915:     sqlite3VdbeAppendP4(v, (void*)pKeyInfo, P4_KEYINFO);",
          "1916:     sqlite3VdbeAddOp3(v, OP_Jump, addr+2, addr+3, addr+2);",
          "1917:     VdbeCoverageEqNe(v);",
          "1918:     addrGosubFlush = sqlite3VdbeAddOp1(v, OP_Gosub, regFlushPart);",
          "1919:     VdbeComment((v, \"call flush_partition\"));",
          "1920:     sqlite3VdbeJumpHere(v, addrIf);",
          "1921:   }",
          "1924:   sqlite3VdbeAddOp2(v, OP_NewRowid, csrWrite, regRowid);",
          "1925:   sqlite3VdbeAddOp3(v, OP_Insert, csrWrite, regRecord, regRowid);",
          "1928:   addrIf = sqlite3VdbeAddOp1(v, OP_IfNot, pMWin->regFirst);",
          "1929:   if( pMWin->pPartition ){",
          "1930:     sqlite3VdbeAddOp3(v, OP_Copy,",
          "1931:         reg+pMWin->nBufferCol, pMWin->regPart, pMWin->pPartition->nExpr-1",
          "1932:     );",
          "1933:   }",
          "1934:   sqlite3VdbeAddOp2(v, OP_Rewind, csrStart, 1);   sqlite3VdbeChangeP5(v, 1);",
          "1935:   sqlite3VdbeAddOp2(v, OP_Rewind, csrCurrent, 1); sqlite3VdbeChangeP5(v, 1);",
          "1936:   sqlite3VdbeAddOp2(v, OP_Rewind, csrEnd, 1);",
          "1937:   regArg = windowInitAccum(pParse, pMWin);",
          "1939:   sqlite3VdbeAddOp2(v, OP_Integer, 0, pMWin->regFirst);",
          "1940:   sqlite3ExprCode(pParse, pMWin->pStart, regStart);",
          "1941:   windowCheckIntValue(pParse, regStart, 0);",
          "1942:   sqlite3ExprCode(pParse, pMWin->pEnd, regEnd);",
          "1943:   windowCheckIntValue(pParse, regEnd, 1);",
          "1944:   addrGoto = sqlite3VdbeAddOp0(v, OP_Goto);",
          "1947:   sqlite3VdbeJumpHere(v, addrIf);",
          "1948:   sqlite3VdbeAddOp2(v, OP_Next, csrEnd, sqlite3VdbeCurrentAddr(v)+1);",
          "1949:   addrIfEnd = sqlite3VdbeAddOp3(v, OP_IfPos, regEnd, 0, 1);",
          "1950:   windowAggFinal(pParse, pMWin, 0);",
          "1951:   sqlite3VdbeAddOp2(v, OP_Next, csrCurrent, sqlite3VdbeCurrentAddr(v)+1);",
          "1952:   windowReturnOneRow(pParse, pMWin, regGosub, addrGosub);",
          "1953:   addrIfStart = sqlite3VdbeAddOp3(v, OP_IfPos, regStart, 0, 1);",
          "1954:   sqlite3VdbeAddOp2(v, OP_Next, csrStart, sqlite3VdbeCurrentAddr(v)+1);",
          "1955:   windowAggStep(pParse, pMWin, csrStart, 1, regArg, 0);",
          "1956:   sqlite3VdbeJumpHere(v, addrIfStart);",
          "1957:   sqlite3VdbeJumpHere(v, addrIfEnd);",
          "1959:   sqlite3VdbeJumpHere(v, addrGoto);",
          "1960:   windowAggStep(pParse, pMWin, csrEnd, 0, regArg, 0);",
          "1963:   sqlite3WhereEnd(pWInfo);",
          "1966:   if( pMWin->pPartition ){",
          "1967:     addrInteger = sqlite3VdbeAddOp2(v, OP_Integer, 0, regFlushPart);",
          "1968:     sqlite3VdbeJumpHere(v, addrGosubFlush);",
          "1969:   }",
          "1971:   sqlite3VdbeAddOp2(v, OP_Next, csrCurrent, sqlite3VdbeCurrentAddr(v)+2);",
          "1972:   addrGoto = sqlite3VdbeAddOp0(v, OP_Goto);",
          "1973:   windowAggFinal(pParse, pMWin, 0);",
          "1974:   windowReturnOneRow(pParse, pMWin, regGosub, addrGosub);",
          "1975:   addrIfStart = sqlite3VdbeAddOp3(v, OP_IfPos, regStart, 0, 1);",
          "1976:   sqlite3VdbeAddOp2(v, OP_Next, csrStart, sqlite3VdbeCurrentAddr(v)+2);",
          "1977:   addrGoto2 = sqlite3VdbeAddOp0(v, OP_Goto);",
          "1978:   windowAggStep(pParse, pMWin, csrStart, 1, regArg, 0);",
          "1979:   sqlite3VdbeJumpHere(v, addrIfStart);",
          "1980:   sqlite3VdbeAddOp2(v, OP_Goto, 0, addrGoto-1);",
          "1981:   sqlite3VdbeJumpHere(v, addrGoto);",
          "1982:   sqlite3VdbeJumpHere(v, addrGoto2);",
          "1984:   sqlite3VdbeAddOp1(v, OP_ResetSorter, csrCurrent);",
          "1985:   sqlite3VdbeAddOp2(v, OP_Integer, 1, pMWin->regFirst);",
          "1986:   if( pMWin->pPartition ){",
          "1987:     sqlite3VdbeChangeP1(v, addrInteger, sqlite3VdbeCurrentAddr(v));",
          "1988:     sqlite3VdbeAddOp1(v, OP_Return, regFlushPart);",
          "1989:   }",
          "1990: }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2296:   if( pMWin->eType==TK_ROWS",
          "2297:    && (pMWin->eStart!=TK_UNBOUNDED||pMWin->eEnd!=TK_CURRENT||!pMWin->pOrderBy)",
          "2298:   ){",
          "2301:   }else{",
          "2302:     Window *pWin;",
          "",
          "[Removed Lines]",
          "2299:     VdbeModuleComment((pParse->pVdbe, \"Begin RowExprStep()\"));",
          "2300:     windowCodeRowExprStep(pParse, p, pWInfo, regGosub, addrGosub);",
          "",
          "[Added Lines]",
          "2454:     Window *pWin;",
          "2456:     for(pWin=pMWin; pWin; pWin=pWin->pNextWin){",
          "2457:       FuncDef *pFunc = pWin->pFunc;",
          "2458:       if( (pFunc->funcFlags & SQLITE_FUNC_WINDOW_SIZE)",
          "2459:         || (pFunc->zName==nth_valueName)",
          "2460:         || (pFunc->zName==first_valueName)",
          "2461:         || (pFunc->zName==leadName)",
          "2462:         || (pFunc->zName==lagName)",
          "2463:       ){",
          "2464:         bCache = 1;",
          "2465:         break;",
          "2466:       }",
          "2467:     }",
          "2468:     if( bCache || pMWin->eStart!=TK_PRECEDING || pMWin->eEnd!=TK_FOLLOWING ){",
          "2469:       VdbeModuleComment((pParse->pVdbe, \"Begin RowExprStep()\"));",
          "2470:       windowCodeRowExprStep(pParse, p, pWInfo, regGosub, addrGosub);",
          "2471:       VdbeModuleComment((pParse->pVdbe, \"End RowExprStep()\"));",
          "2472:     }else{",
          "2473:       VdbeModuleComment((pParse->pVdbe, \"Begin windowCodeStep()\"));",
          "2474:       windowCodeStep(pParse, p, pWInfo, regGosub, addrGosub);",
          "2475:       VdbeModuleComment((pParse->pVdbe, \"End windowCodeStep()\"));",
          "2476:     }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2323:     if( bCache ){",
          "2324:       VdbeModuleComment((pParse->pVdbe, \"Begin CacheStep()\"));",
          "2325:       windowCodeCacheStep(pParse, p, pWInfo, regGosub, addrGosub);",
          "2326:     }else{",
          "2327:       VdbeModuleComment((pParse->pVdbe, \"Begin DefaultStep()\"));",
          "2328:       windowCodeDefaultStep(pParse, p, pWInfo, regGosub, addrGosub);",
          "2329:     }",
          "2330:   }",
          "2331: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2502:       VdbeModuleComment((pParse->pVdbe, \"End CacheStep()\"));",
          "2506:       VdbeModuleComment((pParse->pVdbe, \"End DefaultStep()\"));",
          "",
          "---------------"
        ],
        "test/pg_common.tcl||test/pg_common.tcl": [
          "File: test/pg_common.tcl -> test/pg_common.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "67:   puts $::fd \"\"",
          "68: }",
          "70: # Same as [execsql_test], except coerce all results to floating point values",
          "71: # with two decimal points.",
          "72: #",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "70: proc errorsql_test {tn sql} {",
          "71:   set rc [catch {execsql $sql} msg]",
          "72:   if {$rc==0} {",
          "73:     error \"errorsql_test SQL did not cause an error!\"",
          "74:   }",
          "75:   puts $::fd \"# PG says \\\"[string trim $msg]\\\"\"",
          "76:   set sql [string map {string_agg group_concat} $sql]",
          "77:   puts $::fd \"do_test $tn { catch { execsql {\"",
          "78:   puts $::fd \"  [string trim $sql]\"",
          "79:   puts $::fd \"} } } 1\"",
          "80:   puts $::fd \"\"",
          "81: }",
          "",
          "---------------"
        ],
        "test/window7.tcl||test/window7.tcl": [
          "File: test/window7.tcl -> test/window7.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2018 May 19",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #***********************************************************************",
          "11: #",
          "13: source [file join [file dirname $argv0] pg_common.tcl]",
          "15: #=========================================================================",
          "17: start_test window7 \"2019 March 01\"",
          "18: ifcapable !windowfunc",
          "20: execsql_test 1.0 {",
          "21:   DROP TABLE IF EXISTS t3;",
          "22:   CREATE TABLE t3(a INTEGER, b INTEGER);",
          "23:   INSERT INTO t3 VALUES",
          "24:     (1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8),",
          "25:     (9, 9), (0, 10), (1, 11), (2, 12), (3, 13), (4, 14), (5, 15), (6, 16),",
          "26:     (7, 17), (8, 18), (9, 19), (0, 20), (1, 21), (2, 22), (3, 23), (4, 24),",
          "27:     (5, 25), (6, 26), (7, 27), (8, 28), (9, 29), (0, 30), (1, 31), (2, 32),",
          "28:     (3, 33), (4, 34), (5, 35), (6, 36), (7, 37), (8, 38), (9, 39), (0, 40),",
          "29:     (1, 41), (2, 42), (3, 43), (4, 44), (5, 45), (6, 46), (7, 47), (8, 48),",
          "30:     (9, 49), (0, 50), (1, 51), (2, 52), (3, 53), (4, 54), (5, 55), (6, 56),",
          "31:     (7, 57), (8, 58), (9, 59), (0, 60), (1, 61), (2, 62), (3, 63), (4, 64),",
          "32:     (5, 65), (6, 66), (7, 67), (8, 68), (9, 69), (0, 70), (1, 71), (2, 72),",
          "33:     (3, 73), (4, 74), (5, 75), (6, 76), (7, 77), (8, 78), (9, 79), (0, 80),",
          "34:     (1, 81), (2, 82), (3, 83), (4, 84), (5, 85), (6, 86), (7, 87), (8, 88),",
          "35:     (9, 89), (0, 90), (1, 91), (2, 92), (3, 93), (4, 94), (5, 95), (6, 96),",
          "36:     (7, 97), (8, 98), (9, 99), (0, 100);",
          "37: }",
          "39: execsql_test 1.1 {",
          "40:   SELECT a, sum(b) FROM t3 GROUP BY a ORDER BY 1;",
          "41: }",
          "43: execsql_test 1.2 {",
          "44:   SELECT a, sum(b) OVER (",
          "45:     ORDER BY a GROUPS BETWEEN CURRENT ROW AND CURRENT ROW",
          "46:   ) FROM t3 ORDER BY 1;",
          "47: }",
          "49: execsql_test 1.3 {",
          "50:   SELECT a, sum(b) OVER (",
          "51:     ORDER BY a GROUPS BETWEEN 0 PRECEDING AND 0 FOLLOWING",
          "52:   ) FROM t3 ORDER BY 1;",
          "53: }",
          "55: execsql_test 1.4 {",
          "56:   SELECT a, sum(b) OVER (",
          "57:     ORDER BY a GROUPS BETWEEN 2 PRECEDING AND 2 FOLLOWING",
          "58:   ) FROM t3 ORDER BY 1;",
          "59: }",
          "61: execsql_test 1.5 {",
          "62:   SELECT a, sum(b) OVER (",
          "63:     ORDER BY a RANGE BETWEEN 0 PRECEDING AND 0 FOLLOWING",
          "64:   ) FROM t3 ORDER BY 1;",
          "65: }",
          "67: execsql_test 1.6 {",
          "68:   SELECT a, sum(b) OVER (",
          "69:     ORDER BY a RANGE BETWEEN 2 PRECEDING AND 2 FOLLOWING",
          "70:   ) FROM t3 ORDER BY 1;",
          "71: }",
          "73: execsql_test 1.7 {",
          "74:   SELECT a, sum(b) OVER (",
          "75:     ORDER BY a RANGE BETWEEN 2 PRECEDING AND 1 FOLLOWING",
          "76:   ) FROM t3 ORDER BY 1;",
          "77: }",
          "79: execsql_test 1.8.1 {",
          "80:   SELECT a, sum(b) OVER (",
          "81:     ORDER BY a RANGE BETWEEN 0 PRECEDING AND 1 FOLLOWING",
          "82:   ) FROM t3 ORDER BY 1;",
          "83: }",
          "84: execsql_test 1.8.2 {",
          "85:   SELECT a, sum(b) OVER (",
          "86:     ORDER BY a DESC RANGE BETWEEN 0 PRECEDING AND 1 FOLLOWING",
          "87:   ) FROM t3 ORDER BY 1;",
          "88: }",
          "90: finish_test",
          "",
          "---------------"
        ],
        "test/window7.test||test/window7.test": [
          "File: test/window7.test -> test/window7.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2019 March 01",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #***********************************************************************",
          "11: # This file implements regression tests for SQLite library.",
          "12: #",
          "14: ####################################################",
          "15: # DO NOT EDIT! THIS FILE IS AUTOMATICALLY GENERATED!",
          "16: ####################################################",
          "18: set testdir [file dirname $argv0]",
          "19: source $testdir/tester.tcl",
          "20: set testprefix window7",
          "22: ifcapable !windowfunc { finish_test ; return }",
          "23: do_execsql_test 1.0 {",
          "24:   DROP TABLE IF EXISTS t3;",
          "25:   CREATE TABLE t3(a INTEGER, b INTEGER);",
          "26:   INSERT INTO t3 VALUES",
          "27:     (1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8),",
          "28:     (9, 9), (0, 10), (1, 11), (2, 12), (3, 13), (4, 14), (5, 15), (6, 16),",
          "29:     (7, 17), (8, 18), (9, 19), (0, 20), (1, 21), (2, 22), (3, 23), (4, 24),",
          "30:     (5, 25), (6, 26), (7, 27), (8, 28), (9, 29), (0, 30), (1, 31), (2, 32),",
          "31:     (3, 33), (4, 34), (5, 35), (6, 36), (7, 37), (8, 38), (9, 39), (0, 40),",
          "32:     (1, 41), (2, 42), (3, 43), (4, 44), (5, 45), (6, 46), (7, 47), (8, 48),",
          "33:     (9, 49), (0, 50), (1, 51), (2, 52), (3, 53), (4, 54), (5, 55), (6, 56),",
          "34:     (7, 57), (8, 58), (9, 59), (0, 60), (1, 61), (2, 62), (3, 63), (4, 64),",
          "35:     (5, 65), (6, 66), (7, 67), (8, 68), (9, 69), (0, 70), (1, 71), (2, 72),",
          "36:     (3, 73), (4, 74), (5, 75), (6, 76), (7, 77), (8, 78), (9, 79), (0, 80),",
          "37:     (1, 81), (2, 82), (3, 83), (4, 84), (5, 85), (6, 86), (7, 87), (8, 88),",
          "38:     (9, 89), (0, 90), (1, 91), (2, 92), (3, 93), (4, 94), (5, 95), (6, 96),",
          "39:     (7, 97), (8, 98), (9, 99), (0, 100);",
          "40: } {}",
          "42: do_execsql_test 1.1 {",
          "43:   SELECT a, sum(b) FROM t3 GROUP BY a ORDER BY 1;",
          "44: } {0 550   1 460   2 470   3 480   4 490   5 500   6 510   7 520   8 530   9 540}",
          "46: do_execsql_test 1.2 {",
          "47:   SELECT a, sum(b) OVER (",
          "48:     ORDER BY a GROUPS BETWEEN CURRENT ROW AND CURRENT ROW",
          "49:   ) FROM t3 ORDER BY 1;",
          "50: } {0 550   0 550   0 550   0 550   0 550   0 550   0 550   0 550   0 550   0 550   1 460   1 460   1 460   1 460   1 460   1 460   1 460   1 460   1 460   1 460   2 470   2 470   2 470   2 470   2 470   2 470   2 470   2 470   2 470   2 470   3 480   3 480   3 480   3 480   3 480   3 480   3 480   3 480   3 480   3 480   4 490   4 490   4 490   4 490   4 490   4 490   4 490   4 490   4 490   4 490   5 500   5 500   5 500   5 500   5 500   5 500   5 500   5 500   5 500   5 500   6 510   6 510   6 510   6 510   6 510   6 510   6 510   6 510   6 510   6 510   7 520   7 520   7 520   7 520   7 520   7 520   7 520   7 520   7 520   7 520   8 530   8 530   8 530   8 530   8 530   8 530   8 530   8 530   8 530   8 530   9 540   9 540   9 540   9 540   9 540   9 540   9 540   9 540   9 540   9 540}",
          "52: do_execsql_test 1.3 {",
          "53:   SELECT a, sum(b) OVER (",
          "54:     ORDER BY a GROUPS BETWEEN 0 PRECEDING AND 0 FOLLOWING",
          "55:   ) FROM t3 ORDER BY 1;",
          "56: } {0 550   0 550   0 550   0 550   0 550   0 550   0 550   0 550   0 550   0 550   1 460   1 460   1 460   1 460   1 460   1 460   1 460   1 460   1 460   1 460   2 470   2 470   2 470   2 470   2 470   2 470   2 470   2 470   2 470   2 470   3 480   3 480   3 480   3 480   3 480   3 480   3 480   3 480   3 480   3 480   4 490   4 490   4 490   4 490   4 490   4 490   4 490   4 490   4 490   4 490   5 500   5 500   5 500   5 500   5 500   5 500   5 500   5 500   5 500   5 500   6 510   6 510   6 510   6 510   6 510   6 510   6 510   6 510   6 510   6 510   7 520   7 520   7 520   7 520   7 520   7 520   7 520   7 520   7 520   7 520   8 530   8 530   8 530   8 530   8 530   8 530   8 530   8 530   8 530   8 530   9 540   9 540   9 540   9 540   9 540   9 540   9 540   9 540   9 540   9 540}",
          "58: do_execsql_test 1.4 {",
          "59:   SELECT a, sum(b) OVER (",
          "60:     ORDER BY a GROUPS BETWEEN 2 PRECEDING AND 2 FOLLOWING",
          "61:   ) FROM t3 ORDER BY 1;",
          "62: } {0 1480   0 1480   0 1480   0 1480   0 1480   0 1480   0 1480   0 1480   0 1480   0 1480   1 1960   1 1960   1 1960   1 1960   1 1960   1 1960   1 1960   1 1960   1 1960   1 1960   2 2450   2 2450   2 2450   2 2450   2 2450   2 2450   2 2450   2 2450   2 2450   2 2450   3 2400   3 2400   3 2400   3 2400   3 2400   3 2400   3 2400   3 2400   3 2400   3 2400   4 2450   4 2450   4 2450   4 2450   4 2450   4 2450   4 2450   4 2450   4 2450   4 2450   5 2500   5 2500   5 2500   5 2500   5 2500   5 2500   5 2500   5 2500   5 2500   5 2500   6 2550   6 2550   6 2550   6 2550   6 2550   6 2550   6 2550   6 2550   6 2550   6 2550   7 2600   7 2600   7 2600   7 2600   7 2600   7 2600   7 2600   7 2600   7 2600   7 2600   8 2100   8 2100   8 2100   8 2100   8 2100   8 2100   8 2100   8 2100   8 2100   8 2100   9 1590   9 1590   9 1590   9 1590   9 1590   9 1590   9 1590   9 1590   9 1590   9 1590}",
          "64: do_execsql_test 1.5 {",
          "65:   SELECT a, sum(b) OVER (",
          "66:     ORDER BY a RANGE BETWEEN 0 PRECEDING AND 0 FOLLOWING",
          "67:   ) FROM t3 ORDER BY 1;",
          "68: } {0 550   0 550   0 550   0 550   0 550   0 550   0 550   0 550   0 550   0 550   1 460   1 460   1 460   1 460   1 460   1 460   1 460   1 460   1 460   1 460   2 470   2 470   2 470   2 470   2 470   2 470   2 470   2 470   2 470   2 470   3 480   3 480   3 480   3 480   3 480   3 480   3 480   3 480   3 480   3 480   4 490   4 490   4 490   4 490   4 490   4 490   4 490   4 490   4 490   4 490   5 500   5 500   5 500   5 500   5 500   5 500   5 500   5 500   5 500   5 500   6 510   6 510   6 510   6 510   6 510   6 510   6 510   6 510   6 510   6 510   7 520   7 520   7 520   7 520   7 520   7 520   7 520   7 520   7 520   7 520   8 530   8 530   8 530   8 530   8 530   8 530   8 530   8 530   8 530   8 530   9 540   9 540   9 540   9 540   9 540   9 540   9 540   9 540   9 540   9 540}",
          "70: do_execsql_test 1.6 {",
          "71:   SELECT a, sum(b) OVER (",
          "72:     ORDER BY a RANGE BETWEEN 2 PRECEDING AND 2 FOLLOWING",
          "73:   ) FROM t3 ORDER BY 1;",
          "74: } {0 1480   0 1480   0 1480   0 1480   0 1480   0 1480   0 1480   0 1480   0 1480   0 1480   1 1960   1 1960   1 1960   1 1960   1 1960   1 1960   1 1960   1 1960   1 1960   1 1960   2 2450   2 2450   2 2450   2 2450   2 2450   2 2450   2 2450   2 2450   2 2450   2 2450   3 2400   3 2400   3 2400   3 2400   3 2400   3 2400   3 2400   3 2400   3 2400   3 2400   4 2450   4 2450   4 2450   4 2450   4 2450   4 2450   4 2450   4 2450   4 2450   4 2450   5 2500   5 2500   5 2500   5 2500   5 2500   5 2500   5 2500   5 2500   5 2500   5 2500   6 2550   6 2550   6 2550   6 2550   6 2550   6 2550   6 2550   6 2550   6 2550   6 2550   7 2600   7 2600   7 2600   7 2600   7 2600   7 2600   7 2600   7 2600   7 2600   7 2600   8 2100   8 2100   8 2100   8 2100   8 2100   8 2100   8 2100   8 2100   8 2100   8 2100   9 1590   9 1590   9 1590   9 1590   9 1590   9 1590   9 1590   9 1590   9 1590   9 1590}",
          "76: do_execsql_test 1.7 {",
          "77:   SELECT a, sum(b) OVER (",
          "78:     ORDER BY a RANGE BETWEEN 2 PRECEDING AND 1 FOLLOWING",
          "79:   ) FROM t3 ORDER BY 1;",
          "80: } {0 1010   0 1010   0 1010   0 1010   0 1010   0 1010   0 1010   0 1010   0 1010   0 1010   1 1480   1 1480   1 1480   1 1480   1 1480   1 1480   1 1480   1 1480   1 1480   1 1480   2 1960   2 1960   2 1960   2 1960   2 1960   2 1960   2 1960   2 1960   2 1960   2 1960   3 1900   3 1900   3 1900   3 1900   3 1900   3 1900   3 1900   3 1900   3 1900   3 1900   4 1940   4 1940   4 1940   4 1940   4 1940   4 1940   4 1940   4 1940   4 1940   4 1940   5 1980   5 1980   5 1980   5 1980   5 1980   5 1980   5 1980   5 1980   5 1980   5 1980   6 2020   6 2020   6 2020   6 2020   6 2020   6 2020   6 2020   6 2020   6 2020   6 2020   7 2060   7 2060   7 2060   7 2060   7 2060   7 2060   7 2060   7 2060   7 2060   7 2060   8 2100   8 2100   8 2100   8 2100   8 2100   8 2100   8 2100   8 2100   8 2100   8 2100   9 1590   9 1590   9 1590   9 1590   9 1590   9 1590   9 1590   9 1590   9 1590   9 1590}",
          "82: do_execsql_test 1.8.1 {",
          "83:   SELECT a, sum(b) OVER (",
          "84:     ORDER BY a RANGE BETWEEN 0 PRECEDING AND 1 FOLLOWING",
          "85:   ) FROM t3 ORDER BY 1;",
          "86: } {0 1010   0 1010   0 1010   0 1010   0 1010   0 1010   0 1010   0 1010   0 1010   0 1010   1 930   1 930   1 930   1 930   1 930   1 930   1 930   1 930   1 930   1 930   2 950   2 950   2 950   2 950   2 950   2 950   2 950   2 950   2 950   2 950   3 970   3 970   3 970   3 970   3 970   3 970   3 970   3 970   3 970   3 970   4 990   4 990   4 990   4 990   4 990   4 990   4 990   4 990   4 990   4 990   5 1010   5 1010   5 1010   5 1010   5 1010   5 1010   5 1010   5 1010   5 1010   5 1010   6 1030   6 1030   6 1030   6 1030   6 1030   6 1030   6 1030   6 1030   6 1030   6 1030   7 1050   7 1050   7 1050   7 1050   7 1050   7 1050   7 1050   7 1050   7 1050   7 1050   8 1070   8 1070   8 1070   8 1070   8 1070   8 1070   8 1070   8 1070   8 1070   8 1070   9 540   9 540   9 540   9 540   9 540   9 540   9 540   9 540   9 540   9 540}",
          "88: do_execsql_test 1.8.2 {",
          "89:   SELECT a, sum(b) OVER (",
          "90:     ORDER BY a DESC RANGE BETWEEN 0 PRECEDING AND 1 FOLLOWING",
          "91:   ) FROM t3 ORDER BY 1;",
          "92: } {0 550   0 550   0 550   0 550   0 550   0 550   0 550   0 550   0 550   0 550   1 1010   1 1010   1 1010   1 1010   1 1010   1 1010   1 1010   1 1010   1 1010   1 1010   2 930   2 930   2 930   2 930   2 930   2 930   2 930   2 930   2 930   2 930   3 950   3 950   3 950   3 950   3 950   3 950   3 950   3 950   3 950   3 950   4 970   4 970   4 970   4 970   4 970   4 970   4 970   4 970   4 970   4 970   5 990   5 990   5 990   5 990   5 990   5 990   5 990   5 990   5 990   5 990   6 1010   6 1010   6 1010   6 1010   6 1010   6 1010   6 1010   6 1010   6 1010   6 1010   7 1030   7 1030   7 1030   7 1030   7 1030   7 1030   7 1030   7 1030   7 1030   7 1030   8 1050   8 1050   8 1050   8 1050   8 1050   8 1050   8 1050   8 1050   8 1050   8 1050   9 1070   9 1070   9 1070   9 1070   9 1070   9 1070   9 1070   9 1070   9 1070   9 1070}",
          "94: finish_test",
          "",
          "---------------"
        ],
        "test/windowerr.tcl||test/windowerr.tcl": [
          "File: test/windowerr.tcl -> test/windowerr.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2018 May 19",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #***********************************************************************",
          "11: #",
          "13: source [file join [file dirname $argv0] pg_common.tcl]",
          "15: #=========================================================================",
          "17: start_test windowerr \"2019 March 01\"",
          "18: ifcapable !windowfunc",
          "20: execsql_test 1.0 {",
          "21:   DROP TABLE IF EXISTS t1;",
          "22:   CREATE TABLE t1(a INTEGER, b INTEGER);",
          "23: }",
          "25: foreach {tn frame} {",
          "26:   1 \"ORDER BY a ROWS BETWEEN -1 PRECEDING AND 1 FOLLOWING\"",
          "27:   2 \"ORDER BY a ROWS BETWEEN  1 PRECEDING AND -1 FOLLOWING\"",
          "29:   3 \"ORDER BY a RANGE BETWEEN -1 PRECEDING AND 1 FOLLOWING\"",
          "30:   4 \"ORDER BY a RANGE BETWEEN  1 PRECEDING AND -1 FOLLOWING\"",
          "32:   5 \"ORDER BY a GROUPS BETWEEN -1 PRECEDING AND 1 FOLLOWING\"",
          "33:   6 \"ORDER BY a GROUPS BETWEEN  1 PRECEDING AND -1 FOLLOWING\"",
          "34: } {",
          "35:   errorsql_test 1.$tn \"",
          "36:   SELECT a, sum(b) OVER (",
          "37:     $frame",
          "38:   ) FROM t3 ORDER BY 1",
          "39:   \"",
          "40: }",
          "42: finish_test",
          "",
          "---------------"
        ],
        "test/windowerr.test||test/windowerr.test": [
          "File: test/windowerr.test -> test/windowerr.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2019 March 01",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #***********************************************************************",
          "11: # This file implements regression tests for SQLite library.",
          "12: #",
          "14: ####################################################",
          "15: # DO NOT EDIT! THIS FILE IS AUTOMATICALLY GENERATED!",
          "16: ####################################################",
          "18: set testdir [file dirname $argv0]",
          "19: source $testdir/tester.tcl",
          "20: set testprefix windowerr",
          "22: ifcapable !windowfunc { finish_test ; return }",
          "23: do_execsql_test 1.0 {",
          "24:   DROP TABLE IF EXISTS t1;",
          "25:   CREATE TABLE t1(a INTEGER, b INTEGER);",
          "26: } {}",
          "28: # PG says \"ERROR:  frame starting offset must not be negative\"",
          "29: do_test 1.1 { catch { execsql {",
          "30:   SELECT a, sum(b) OVER (",
          "31:     ORDER BY a ROWS BETWEEN -1 PRECEDING AND 1 FOLLOWING",
          "32:   ) FROM t3 ORDER BY 1",
          "33: } } } 1",
          "35: # PG says \"ERROR:  frame ending offset must not be negative\"",
          "36: do_test 1.2 { catch { execsql {",
          "37:   SELECT a, sum(b) OVER (",
          "38:     ORDER BY a ROWS BETWEEN  1 PRECEDING AND -1 FOLLOWING",
          "39:   ) FROM t3 ORDER BY 1",
          "40: } } } 1",
          "42: # PG says \"ERROR:  invalid preceding or following size in window function\"",
          "43: do_test 1.3 { catch { execsql {",
          "44:   SELECT a, sum(b) OVER (",
          "45:     ORDER BY a RANGE BETWEEN -1 PRECEDING AND 1 FOLLOWING",
          "46:   ) FROM t3 ORDER BY 1",
          "47: } } } 1",
          "49: # PG says \"ERROR:  invalid preceding or following size in window function\"",
          "50: do_test 1.4 { catch { execsql {",
          "51:   SELECT a, sum(b) OVER (",
          "52:     ORDER BY a RANGE BETWEEN  1 PRECEDING AND -1 FOLLOWING",
          "53:   ) FROM t3 ORDER BY 1",
          "54: } } } 1",
          "56: # PG says \"ERROR:  frame starting offset must not be negative\"",
          "57: do_test 1.5 { catch { execsql {",
          "58:   SELECT a, sum(b) OVER (",
          "59:     ORDER BY a GROUPS BETWEEN -1 PRECEDING AND 1 FOLLOWING",
          "60:   ) FROM t3 ORDER BY 1",
          "61: } } } 1",
          "63: # PG says \"ERROR:  frame ending offset must not be negative\"",
          "64: do_test 1.6 { catch { execsql {",
          "65:   SELECT a, sum(b) OVER (",
          "66:     ORDER BY a GROUPS BETWEEN  1 PRECEDING AND -1 FOLLOWING",
          "67:   ) FROM t3 ORDER BY 1",
          "68: } } } 1",
          "70: finish_test",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c5f808d85ef130717aee1bc7e7ffcd934c84ab66",
      "candidate_info": {
        "commit_hash": "c5f808d85ef130717aee1bc7e7ffcd934c84ab66",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/c5f808d85ef130717aee1bc7e7ffcd934c84ab66",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "src/insert.c",
          "src/where.c"
        ],
        "message": "Add testcase macros.\n\nFossilOrigin-Name: fb9c9bb284d441bd7aa34c87b6fd8ce57d036c17623d82354154fc6286bdd134",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "src/insert.c||src/insert.c",
          "src/where.c||src/where.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/expr.c||src/expr.c"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/expr.c||src/expr.c"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 27ab41c9102e7801ff829488fc123a8040da008bef373d6704efbe2f93e1da90",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3410:       return;",
          "3411: #endif",
          "3412:     }else if( !HasRowid(pTab) ){",
          "3413:       x = sqlite3TableColumnToIndex(sqlite3PrimaryKeyIndex(pTab), iCol);",
          "3414:       op = OP_Column;",
          "3415:     }else{",
          "3416:       x = sqlite3TableColumnToStorage(pTab,iCol);",
          "3417:       op = OP_Column;",
          "3418:     }",
          "3419:     sqlite3VdbeAddOp3(v, op, iTabCur, x, regOut);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3413:       testcase( iCol!=sqlite3TableColumnToStorage(pTab, iCol) );",
          "3418:       testcase( x!=iCol );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3584:           Column *pCol;",
          "3585:           Table *pTab = pExpr->y.pTab;",
          "3586:           int iSrc;",
          "3587:           assert( pTab!=0 );",
          "3591:             return -1-pParse->iSelfTab;",
          "3592:           }",
          "3596: #ifndef SQLITE_OMIT_GENERATED_COLUMNS",
          "3597:           if( pCol->colFlags & COLFLAG_GENERATED ){",
          "3598:             if( pCol->colFlags & COLFLAG_BUSY ){",
          "",
          "[Removed Lines]",
          "3588:           assert( pExpr->iColumn>=XN_ROWID );",
          "3589:           assert( pExpr->iColumn<pExpr->y.pTab->nCol );",
          "3590:           if( pExpr->iColumn<0 ){",
          "3593:           pCol = pTab->aCol + pExpr->iColumn;",
          "3594:           iSrc = sqlite3TableColumnToStorage(pTab, pExpr->iColumn)",
          "3595:                       - pParse->iSelfTab;",
          "",
          "[Added Lines]",
          "3589:           int iCol = pExpr->iColumn;",
          "3591:           assert( iCol>=XN_ROWID );",
          "3592:           assert( iCol<pExpr->y.pTab->nCol );",
          "3593:           if( iCol<0 ){",
          "3596:           pCol = pTab->aCol + iCol;",
          "3597:           testcase( iCol!=sqlite3TableColumnToStorage(pTab,iCol) );",
          "3598:           iSrc = sqlite3TableColumnToStorage(pTab, iCol) - pParse->iSelfTab;",
          "",
          "---------------"
        ],
        "src/insert.c||src/insert.c": [
          "File: src/insert.c -> src/insert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1464:       pParse->iSelfTab = 0;",
          "1465:       if( onError==OE_Replace ) onError = OE_Abort;",
          "1466:     }else{",
          "1467:       iReg = sqlite3TableColumnToStorage(pTab, i) + regNewData + 1;",
          "1468:     }",
          "1469:     switch( onError ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1467:       testcase( i!=sqlite3TableColumnToStorage(pTab, i) );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1782:         VdbeComment((v, \"%s column %d\", pIdx->zName, i));",
          "1783: #endif",
          "1784:       }else{",
          "1785:         x = sqlite3TableColumnToStorage(pTab, iField) + regNewData + 1;",
          "1786:         sqlite3VdbeAddOp2(v, OP_SCopy, x, regIdx+i);",
          "1787:         VdbeComment((v, \"%s\", pTab->aCol[iField].zName));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1786:         testcase( sqlite3TableColumnToStorage(pTab, iField)!=iField );",
          "",
          "---------------"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5379:             x = pPk->aiColumn[x];",
          "5380:             assert( x>=0 );",
          "5381:           }else{",
          "5382:             x = sqlite3StorageColumnToTable(pTab,x);",
          "5383:           }",
          "5384:           x = sqlite3TableColumnToIndex(pIdx, x);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5382:             testcase( x!=sqlite3StorageColumnToTable(pTab,x) );",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8a3884efae47b8f762fdd7c3b0751ddca8e41243",
      "candidate_info": {
        "commit_hash": "8a3884efae47b8f762fdd7c3b0751ddca8e41243",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/8a3884efae47b8f762fdd7c3b0751ddca8e41243",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/sqliteInt.h",
          "src/util.c",
          "src/vdbe.c",
          "src/vdbemem.c"
        ],
        "message": "Much faster implementation of applyNumericAffinity() by avoiding some unnecessary calls to sqlite3Atoi64().\n\nFossilOrigin-Name: c1d8a3f65490eef2216f360d708b1746cbaa6dadce42c0950dc8e09b9ab28ee2",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/util.c||src/util.c",
          "src/vdbe.c||src/vdbe.c",
          "src/vdbemem.c||src/vdbemem.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: f9e85e6c79162081f8f512d22951931a89d157a32b24afdc48b7eb865379abe7",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "4175: int sqlite3FixExpr(DbFixer*, Expr*);",
          "4176: int sqlite3FixExprList(DbFixer*, ExprList*);",
          "4177: int sqlite3FixTriggerStep(DbFixer*, TriggerStep*);",
          "4178: int sqlite3AtoF(const char *z, double*, int, u8);",
          "4179: int sqlite3GetInt32(const char *, int*);",
          "4180: int sqlite3Atoi(const char*);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4178: int sqlite3RealSameAsInt(double,sqlite3_int64);",
          "",
          "---------------"
        ],
        "src/util.c||src/util.c": [
          "File: src/util.c -> src/util.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "436:     incr = 2;",
          "437:     assert( SQLITE_UTF16LE==2 && SQLITE_UTF16BE==3 );",
          "438:     for(i=3-enc; i<length && z[i]==0; i+=2){}",
          "440:     zEnd = &z[i^1];",
          "441:     z += (enc&1);",
          "442:   }",
          "",
          "[Removed Lines]",
          "439:     nonNum = i<length;",
          "",
          "[Added Lines]",
          "444:     if( i<length ) eType = -100;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "469:   if( *z=='.' ){",
          "470:     z+=incr;",
          "473:     while( z<zEnd && sqlite3Isdigit(*z) ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "476:     eType++;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "485:   if( *z=='e' || *z=='E' ){",
          "486:     z+=incr;",
          "487:     eValid = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "494:     eType++;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "587: #else",
          "588:   return !sqlite3Atoi64(z, pResult, length, enc);",
          "",
          "[Removed Lines]",
          "586:   return z==zEnd && nDigit>0 && eValid && nonNum==0;",
          "",
          "[Added Lines]",
          "593:   return z==zEnd && nDigit>0 && eValid && eType>0 ? eType : 0;",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "276:   return pCx;",
          "277: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "285: static int alsoAnInt(Mem *pRec, double rValue, i64 *piValue){",
          "286:   i64 iValue = (double)rValue;",
          "287:   if( sqlite3RealSameAsInt(rValue,iValue) ){",
          "288:     testcase( iValue<-2251799813685248 );",
          "289:     testcase( iValue==-2251799813685248 );",
          "290:     testcase( iValue==-2251799813685247 );",
          "291:     testcase( iValue>-2251799813685247 && iValue<+2251799813685247 );",
          "292:     testcase( iValue==+2251799813685247 );",
          "293:     testcase( iValue==+2251799813685248 );",
          "294:     testcase( iValue>+2251799813685248 );",
          "295:     if( iValue > -2251799813685248 && iValue < 2251799813685248 ){",
          "297:       return 1;",
          "298:     }",
          "299:   }",
          "300:   return 0==sqlite3Atoi64(pRec->z, piValue, pRec->n, pRec->enc);",
          "301: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "294: static void applyNumericAffinity(Mem *pRec, int bTryForInt){",
          "295:   double rValue;",
          "297:   u8 enc = pRec->enc;",
          "298:   assert( (pRec->flags & (MEM_Str|MEM_Int|MEM_Real|MEM_IntReal))==MEM_Str );",
          "302:     pRec->flags |= MEM_Int;",
          "303:   }else{",
          "304:     pRec->u.r = rValue;",
          "",
          "[Removed Lines]",
          "296:   i64 iValue;",
          "299:   if( sqlite3AtoF(pRec->z, &rValue, pRec->n, enc)==0 ) return;",
          "300:   if( 0==sqlite3Atoi64(pRec->z, &iValue, pRec->n, enc) ){",
          "301:     pRec->u.i = iValue;",
          "",
          "[Added Lines]",
          "321:   int rc;",
          "323:   rc = sqlite3AtoF(pRec->z, &rValue, pRec->n, enc);",
          "324:   if( rc==0 ) return;",
          "325:   if( rc==1 && alsoAnInt(pRec, rValue, &pRec->u.i) ){",
          "",
          "---------------"
        ],
        "src/vdbemem.c||src/vdbemem.c": [
          "File: src/vdbemem.c -> src/vdbemem.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "701:   double r2 = (double)i;",
          "702:   return memcmp(&r1, &r2, sizeof(r1))==0;",
          "703: }",
          "",
          "[Removed Lines]",
          "700: static int sqlite3RealSameAsInt(double r1, sqlite3_int64 i){",
          "",
          "[Added Lines]",
          "700: int sqlite3RealSameAsInt(double r1, sqlite3_int64 i){",
          "",
          "---------------"
        ]
      }
    }
  ]
}