{
  "cve_id": "CVE-2019-19924",
  "cve_desc": "SQLite 3.30.1 mishandles certain parser-tree rewriting, related to expr.c, vdbeaux.c, and window.c. This is caused by incorrect sqlite3WindowRewrite() error handling.",
  "repo": "sqlite/sqlite",
  "patch_hash": "8654186b0236d556aa85528c2573ee0b6ab71be3",
  "patch_info": {
    "commit_hash": "8654186b0236d556aa85528c2573ee0b6ab71be3",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/8654186b0236d556aa85528c2573ee0b6ab71be3",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/expr.c",
      "src/vdbeaux.c",
      "src/window.c"
    ],
    "message": "When an error occurs while rewriting the parser tree for window functions in the sqlite3WindowRewrite() routine, make sure that pParse->nErr is set, and make sure that this shuts down any subsequent code generation that might depend on the transformations that were implemented.  This fixes a problem discovered by the Yongheng and Rui fuzzer.\n\nFossilOrigin-Name: e2bddcd4c55ba3cbe0130332679ff4b048630d0ced9a8899982edb5a3569ba7f",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/expr.c||src/expr.c",
      "src/vdbeaux.c||src/vdbeaux.c",
      "src/window.c||src/window.c"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 4417c5bf0aabb34ed174f01afd981c924ae965a42128719d8d6735536631d12f",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/expr.c||src/expr.c": [
      "File: src/expr.c -> src/expr.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "376:   int addr;",
      "377:   CollSeq *p4;",
      "379:   if( isCommuted ){",
      "380:     p4 = sqlite3BinaryCompareCollSeq(pParse, pRight, pLeft);",
      "381:   }else{",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "379:   if( pParse->nErr ) return 0;",
      "",
      "---------------"
    ],
    "src/vdbeaux.c||src/vdbeaux.c": [
      "File: src/vdbeaux.c -> src/vdbeaux.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1304: static void vdbeVComment(Vdbe *p, const char *zFormat, va_list ap){",
      "1305:   assert( p->nOp>0 || p->aOp==0 );",
      "1307:   if( p->nOp ){",
      "1308:     assert( p->aOp );",
      "1309:     sqlite3DbFree(p->db, p->aOp[p->nOp-1].zComment);",
      "",
      "[Removed Lines]",
      "1306:   assert( p->aOp==0 || p->aOp[p->nOp-1].zComment==0 || p->db->mallocFailed );",
      "",
      "[Added Lines]",
      "1306:   assert( p->aOp==0 || p->aOp[p->nOp-1].zComment==0 || p->db->mallocFailed",
      "1307:           || p->pParse->nErr>0 );",
      "",
      "---------------"
    ],
    "src/window.c||src/window.c": [
      "File: src/window.c -> src/window.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "935:     pTab = sqlite3DbMallocZero(db, sizeof(Table));",
      "936:     if( pTab==0 ){",
      "938:     }",
      "940:     p->pSrc = 0;",
      "",
      "[Removed Lines]",
      "937:       return SQLITE_NOMEM;",
      "",
      "[Added Lines]",
      "937:       return sqlite3ErrorToParser(db, SQLITE_NOMEM);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1039:     sqlite3DbFree(db, pTab);",
      "1040:   }",
      "1042:   return rc;",
      "1043: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1042:   if( rc && pParse->nErr==0 ){",
      "1043:     assert( pParse->db->mallocFailed );",
      "1044:     return sqlite3ErrorToParser(pParse->db, SQLITE_NOMEM);",
      "1045:   }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "21f6daa2cd32c5773a606981320c3a5e956a7726",
      "candidate_info": {
        "commit_hash": "21f6daa2cd32c5773a606981320c3a5e956a7726",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/21f6daa2cd32c5773a606981320c3a5e956a7726",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c",
          "src/btree.h",
          "src/btreeInt.h",
          "src/vdbe.c"
        ],
        "message": "Faster response to sqlite3_interrupt() in the OP_IntegrityCk and OP_Count opcodes.\n\nFossilOrigin-Name: bf875dc59909f9c22f7c1fc843bc4d9e5d97af5cb4ef43c4fa1d566ddfdeaacb",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c",
          "src/btree.h||src/btree.h",
          "src/btreeInt.h||src/btreeInt.h",
          "src/vdbe.c||src/vdbe.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 9455643eecb74c8ac93ad3b3566f30e380dd912cdce3de993da5af42973ac59c",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "9462: int sqlite3BtreeCount(BtCursor *pCur, i64 *pnEntry){",
          "",
          "[Added Lines]",
          "9462: int sqlite3BtreeCount(sqlite3 *db, BtCursor *pCur, i64 *pnEntry){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "9475:   while( rc==SQLITE_OK ){",
          "",
          "[Added Lines]",
          "9475:   while( rc==SQLITE_OK && !db->u1.isInterrupted ){",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "9598:     checkAppendMsg(pCheck, \"2nd reference to page %d\", iPage);",
          "9599:     return 1;",
          "9600:   }",
          "9601:   setPageReferenced(pCheck, iPage);",
          "9602:   return 0;",
          "9603: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9601:   if( pCheck->db->u1.isInterrupted ) return 1;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "10058:   assert( p->inTrans>TRANS_NONE && pBt->inTransaction>TRANS_NONE );",
          "10059:   VVA_ONLY( nRef = sqlite3PagerRefcount(pBt->pPager) );",
          "10060:   assert( nRef>=0 );",
          "10061:   sCheck.pBt = pBt;",
          "10062:   sCheck.pPager = pBt->pPager;",
          "10063:   sCheck.nPage = btreePagecount(sCheck.pBt);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "10063:   sCheck.db = db;",
          "",
          "---------------"
        ],
        "src/btree.h||src/btree.h": [
          "File: src/btree.h -> src/btree.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "314: u32 sqlite3BtreePayloadSize(BtCursor*);",
          "315: sqlite3_int64 sqlite3BtreeMaxRecordSize(BtCursor*);",
          "318: struct Pager *sqlite3BtreePager(Btree*);",
          "319: i64 sqlite3BtreeRowCountEst(BtCursor*);",
          "",
          "[Removed Lines]",
          "317: char *sqlite3BtreeIntegrityCheck(Btree*, int *aRoot, int nRoot, int, int*);",
          "",
          "[Added Lines]",
          "317: char *sqlite3BtreeIntegrityCheck(sqlite3*,Btree*,int*aRoot,int nRoot,int,int*);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "335: int sqlite3BtreeCursorIsValidNN(BtCursor*);",
          "337: #ifndef SQLITE_OMIT_BTREECOUNT",
          "339: #endif",
          "341: #ifdef SQLITE_TEST",
          "",
          "[Removed Lines]",
          "338: int sqlite3BtreeCount(BtCursor *, i64 *);",
          "",
          "[Added Lines]",
          "338: int sqlite3BtreeCount(sqlite3*, BtCursor*, i64*);",
          "",
          "---------------"
        ],
        "src/btreeInt.h||src/btreeInt.h": [
          "File: src/btreeInt.h -> src/btreeInt.h"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3143:   pCrsr = p->apCsr[pOp->p1]->uc.pCursor;",
          "3144:   assert( pCrsr );",
          "3147:   if( rc ) goto abort_due_to_error;",
          "3148:   pOut = out2Prerelease(p, pOp);",
          "3149:   pOut->u.i = nEntry;",
          "3151: }",
          "3152: #endif",
          "",
          "[Removed Lines]",
          "3146:   rc = sqlite3BtreeCount(pCrsr, &nEntry);",
          "3150:   break;",
          "",
          "[Added Lines]",
          "3146:   rc = sqlite3BtreeCount(db, pCrsr, &nEntry);",
          "3150:   goto check_for_interrupt;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "6104:   pIn1 = &aMem[pOp->p1];",
          "6105:   assert( pOp->p5<db->nDb );",
          "6106:   assert( DbMaskTest(p->btreeMask, pOp->p5) );",
          "6108:                                  (int)pnErr->u.i+1, &nErr);",
          "6109:   sqlite3VdbeMemSetNull(pIn1);",
          "6110:   if( nErr==0 ){",
          "",
          "[Removed Lines]",
          "6107:   z = sqlite3BtreeIntegrityCheck(db->aDb[pOp->p5].pBt, &aRoot[1], nRoot,",
          "",
          "[Added Lines]",
          "6107:   z = sqlite3BtreeIntegrityCheck(db, db->aDb[pOp->p5].pBt, &aRoot[1], nRoot,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "6117:   }",
          "6118:   UPDATE_MAX_BLOBSIZE(pIn1);",
          "6119:   sqlite3VdbeChangeEncoding(pIn1, encoding);",
          "6121: }",
          "",
          "[Removed Lines]",
          "6120:   break;",
          "",
          "[Added Lines]",
          "6120:   goto check_for_interrupt;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a677eecad3dc751db19aaf27b6c0674200ecef21",
      "candidate_info": {
        "commit_hash": "a677eecad3dc751db19aaf27b6c0674200ecef21",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/a677eecad3dc751db19aaf27b6c0674200ecef21",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "src/resolve.c",
          "src/select.c",
          "src/sqliteInt.h",
          "src/vdbe.c",
          "src/vdbeaux.c",
          "src/where.c",
          "src/whereexpr.c",
          "test/affinity2.test",
          "test/where.test",
          "test/whereG.test"
        ],
        "message": "Merge fixes from trunk.  Also fix a reference to the KeyInfo.aSortOrder field, which should now be KeyInfo.aSortFlags\n\nFossilOrigin-Name: 63e625c8eb06720eef30573aa562e38c90d228a9cf493f8bb59f09e50f0e3168",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "src/resolve.c||src/resolve.c",
          "src/select.c||src/select.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/vdbe.c||src/vdbe.c",
          "src/vdbeaux.c||src/vdbeaux.c",
          "src/where.c||src/where.c",
          "src/whereexpr.c||src/whereexpr.c",
          "test/affinity2.test||test/affinity2.test",
          "test/where.test||test/where.test",
          "test/whereG.test||test/whereG.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/expr.c||src/expr.c",
            "src/vdbeaux.c||src/vdbeaux.c"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/expr.c||src/expr.c",
            "src/vdbeaux.c||src/vdbeaux.c"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: b1cbcdc6eb42cca0c42a05e0d6ba4c6c7f09adff0c59ecfc5b434a94dec07a41",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "106: }",
          "112: Expr *sqlite3ExprSkipCollate(Expr *pExpr){",
          "113:   while( pExpr && ExprHasProperty(pExpr, EP_Skip|EP_Unlikely) ){",
          "114:     if( ExprHasProperty(pExpr, EP_Unlikely) ){",
          "115:       assert( !ExprHasProperty(pExpr, EP_xIsSelect) );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "112:   while( pExpr && ExprHasProperty(pExpr, EP_Skip) ){",
          "113:     assert( pExpr->op==TK_COLLATE );",
          "114:     pExpr = pExpr->pLeft;",
          "115:   }",
          "116:   return pExpr;",
          "117: }",
          "124: Expr *sqlite3ExprSkipCollateAndLikely(Expr *pExpr){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2180: int sqlite3ExprNeedsNoAffinityChange(const Expr *p, char aff){",
          "2181:   u8 op;",
          "2182:   if( aff==SQLITE_AFF_BLOB ) return 1;",
          "2184:   op = p->op;",
          "2185:   if( op==TK_REGISTER ) op = p->op2;",
          "2186:   switch( op ){",
          "",
          "[Removed Lines]",
          "2183:   while( p->op==TK_UPLUS || p->op==TK_UMINUS ){ p = p->pLeft; }",
          "",
          "[Added Lines]",
          "2194:   int unaryMinus = 0;",
          "2196:   while( p->op==TK_UPLUS || p->op==TK_UMINUS ){",
          "2197:     if( p->op==TK_UMINUS ) unaryMinus = 1;",
          "2198:     p = p->pLeft;",
          "2199:   }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2191:       return aff==SQLITE_AFF_REAL || aff==SQLITE_AFF_NUMERIC;",
          "2192:     }",
          "2193:     case TK_STRING: {",
          "2195:     }",
          "2196:     case TK_BLOB: {",
          "2198:     }",
          "2199:     case TK_COLUMN: {",
          "",
          "[Removed Lines]",
          "2194:       return aff==SQLITE_AFF_TEXT;",
          "2197:       return 1;",
          "",
          "[Added Lines]",
          "2210:       return !unaryMinus && aff==SQLITE_AFF_TEXT;",
          "2213:       return !unaryMinus;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3400: static void exprToRegister(Expr *pExpr, int iReg){",
          "3402:   p->op2 = p->op;",
          "3403:   p->op = TK_REGISTER;",
          "3404:   p->iTable = iReg;",
          "",
          "[Removed Lines]",
          "3401:   Expr *p = sqlite3ExprSkipCollate(pExpr);",
          "",
          "[Added Lines]",
          "3417:   Expr *p = sqlite3ExprSkipCollateAndLikely(pExpr);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "4207: int sqlite3ExprCodeTemp(Parse *pParse, Expr *pExpr, int *pReg){",
          "4208:   int r2;",
          "4210:   if( ConstFactorOk(pParse)",
          "4211:    && pExpr->op!=TK_REGISTER",
          "4212:    && sqlite3ExprIsConstantNotJoin(pExpr)",
          "",
          "[Removed Lines]",
          "4209:   pExpr = sqlite3ExprSkipCollate(pExpr);",
          "",
          "[Added Lines]",
          "4225:   pExpr = sqlite3ExprSkipCollateAndLikely(pExpr);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "4950: int sqlite3ExprCompareSkip(Expr *pA, Expr *pB, int iTab){",
          "4951:   return sqlite3ExprCompare(0,",
          "4954:              iTab);",
          "4955: }",
          "",
          "[Removed Lines]",
          "4952:              sqlite3ExprSkipCollate(pA),",
          "4953:              sqlite3ExprSkipCollate(pB),",
          "",
          "[Added Lines]",
          "4968:              sqlite3ExprSkipCollateAndLikely(pA),",
          "4969:              sqlite3ExprSkipCollateAndLikely(pB),",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "5159: int sqlite3ExprImpliesNonNullRow(Expr *p, int iTab){",
          "5160:   Walker w;",
          "5162:   while( p ){",
          "5163:     if( p->op==TK_NOTNULL ){",
          "5164:       p = p->pLeft;",
          "",
          "[Removed Lines]",
          "5161:   p = sqlite3ExprSkipCollate(p);",
          "",
          "[Added Lines]",
          "5177:   p = sqlite3ExprSkipCollateAndLikely(p);",
          "",
          "---------------"
        ],
        "src/resolve.c||src/resolve.c": [
          "File: src/resolve.c -> src/resolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "973:     }",
          "974:     case TK_IS:",
          "975:     case TK_ISNOT: {",
          "977:       assert( !ExprHasProperty(pExpr, EP_Reduced) );",
          "",
          "[Removed Lines]",
          "976:       Expr *pRight = sqlite3ExprSkipCollate(pExpr->pRight);",
          "",
          "[Added Lines]",
          "976:       Expr *pRight = sqlite3ExprSkipCollateAndLikely(pExpr->pRight);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1184:       int iCol = -1;",
          "1185:       Expr *pE, *pDup;",
          "1186:       if( pItem->done ) continue;",
          "1188:       if( sqlite3ExprIsInteger(pE, &iCol) ){",
          "1189:         if( iCol<=0 || iCol>pEList->nExpr ){",
          "1190:           resolveOutOfRangeError(pParse, \"ORDER\", i+1, pEList->nExpr);",
          "",
          "[Removed Lines]",
          "1187:       pE = sqlite3ExprSkipCollate(pItem->pExpr);",
          "",
          "[Added Lines]",
          "1187:       pE = sqlite3ExprSkipCollateAndLikely(pItem->pExpr);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1363:   pParse = pNC->pParse;",
          "1364:   for(i=0, pItem=pOrderBy->a; i<pOrderBy->nExpr; i++, pItem++){",
          "1365:     Expr *pE = pItem->pExpr;",
          "1367:     if( zType[0]!='G' ){",
          "1368:       iCol = resolveAsName(pParse, pSelect->pEList, pE2);",
          "1369:       if( iCol>0 ){",
          "",
          "[Removed Lines]",
          "1366:     Expr *pE2 = sqlite3ExprSkipCollate(pE);",
          "",
          "[Added Lines]",
          "1366:     Expr *pE2 = sqlite3ExprSkipCollateAndLikely(pE);",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1960:     if( (zName = pEList->a[i].zName)!=0 ){",
          "1962:     }else{",
          "1964:       while( pColExpr->op==TK_DOT ){",
          "1965:         pColExpr = pColExpr->pRight;",
          "1966:         assert( pColExpr!=0 );",
          "",
          "[Removed Lines]",
          "1963:       Expr *pColExpr = sqlite3ExprSkipCollate(pEList->a[i].pExpr);",
          "",
          "[Added Lines]",
          "1963:       Expr *pColExpr = sqlite3ExprSkipCollateAndLikely(pEList->a[i].pExpr);",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "4278: Expr *sqlite3ExprAddCollateToken(Parse *pParse, Expr*, const Token*, int);",
          "4279: Expr *sqlite3ExprAddCollateString(Parse*,Expr*,const char*);",
          "4280: Expr *sqlite3ExprSkipCollate(Expr*);",
          "4281: int sqlite3CheckCollSeq(Parse *, CollSeq *);",
          "4282: int sqlite3WritableSchema(sqlite3*);",
          "4283: int sqlite3CheckObjectName(Parse*, const char*,const char*,const char*);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4281: Expr *sqlite3ExprSkipCollateAndLikely(Expr*);",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4132:   pC->deferredMoveto = 0;",
          "4133:   pC->cacheStatus = CACHE_STALE;",
          "4134:   if( pC->isTable ){",
          "4136:     assert( sqlite3BtreeCursorHasHint(pC->uc.pCursor, BTREE_SEEK_EQ)==0",
          "4137:               || CORRUPT_DB );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4135:     u16 flags3, newType;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4142:     pIn3 = &aMem[pOp->p3];",
          "4144:       applyNumericAffinity(pIn3, 0);",
          "4145:     }",
          "4153:           VdbeBranchTaken(1,2);",
          "4154:           goto jump_to_p2;",
          "4155:         }else{",
          "",
          "[Removed Lines]",
          "4143:     if( (pIn3->flags & (MEM_Int|MEM_Real|MEM_IntReal|MEM_Str))==MEM_Str ){",
          "4146:     iKey = sqlite3VdbeIntValue(pIn3);",
          "4150:     if( (pIn3->flags & (MEM_Int|MEM_IntReal))==0 ){",
          "4151:       if( (pIn3->flags & MEM_Real)==0 ){",
          "4152:         if( (pIn3->flags & MEM_Null) || oc>=OP_SeekGE ){",
          "",
          "[Added Lines]",
          "4144:     flags3 = pIn3->flags;",
          "4145:     if( (flags3 & (MEM_Int|MEM_Real|MEM_IntReal|MEM_Str))==MEM_Str ){",
          "4154:     if( (newType & (MEM_Int|MEM_IntReal))==0 ){",
          "4155:       if( (newType & MEM_Real)==0 ){",
          "4156:         if( (newType & MEM_Null) || oc>=OP_SeekGE ){",
          "",
          "---------------"
        ],
        "src/vdbeaux.c||src/vdbeaux.c": [
          "File: src/vdbeaux.c -> src/vdbeaux.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5022:   preupdate.keyinfo.db = db;",
          "5023:   preupdate.keyinfo.enc = ENC(db);",
          "5024:   preupdate.keyinfo.nKeyField = pTab->nCol;",
          "5026:   preupdate.iKey1 = iKey1;",
          "5027:   preupdate.iKey2 = iKey2;",
          "5028:   preupdate.pTab = pTab;",
          "",
          "[Removed Lines]",
          "5025:   preupdate.keyinfo.aSortOrder = (u8*)&fakeSortOrder;",
          "",
          "[Added Lines]",
          "5025:   preupdate.keyinfo.aSortFlags = (u8*)&fakeSortOrder;",
          "",
          "---------------"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "253:         ){",
          "254:           if( (pTerm->eOperator & WO_EQUIV)!=0",
          "255:            && pScan->nEquiv<ArraySize(pScan->aiCur)",
          "257:           ){",
          "258:             int j;",
          "259:             for(j=0; j<pScan->nEquiv; j++){",
          "",
          "[Removed Lines]",
          "256:            && (pX = sqlite3ExprSkipCollate(pTerm->pExpr->pRight))->op==TK_COLUMN",
          "",
          "[Added Lines]",
          "256:            && (pX = sqlite3ExprSkipCollateAndLikely(pTerm->pExpr->pRight))->op",
          "257:                ==TK_COLUMN",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "449:   const char *zColl = pIdx->azColl[iCol];",
          "451:   for(i=0; i<pList->nExpr; i++){",
          "453:     if( p->op==TK_COLUMN",
          "454:      && p->iColumn==pIdx->aiColumn[iCol]",
          "455:      && p->iTable==iBase",
          "",
          "[Removed Lines]",
          "452:     Expr *p = sqlite3ExprSkipCollate(pList->a[i].pExpr);",
          "",
          "[Added Lines]",
          "453:     Expr *p = sqlite3ExprSkipCollateAndLikely(pList->a[i].pExpr);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "515:   for(i=0; i<pDistinct->nExpr; i++){",
          "517:     if( p->op==TK_COLUMN && p->iTable==iBase && p->iColumn<0 ) return 1;",
          "518:   }",
          "",
          "[Removed Lines]",
          "516:     Expr *p = sqlite3ExprSkipCollate(pDistinct->a[i].pExpr);",
          "",
          "[Added Lines]",
          "517:     Expr *p = sqlite3ExprSkipCollateAndLikely(pDistinct->a[i].pExpr);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2770:   if( pIndex->bUnordered ) return 0;",
          "2771:   if( (pOB = pBuilder->pWInfo->pOrderBy)==0 ) return 0;",
          "2772:   for(ii=0; ii<pOB->nExpr; ii++){",
          "2774:     if( pExpr->op==TK_COLUMN && pExpr->iTable==iCursor ){",
          "2775:       if( pExpr->iColumn<0 ) return 1;",
          "2776:       for(jj=0; jj<pIndex->nKeyCol; jj++){",
          "",
          "[Removed Lines]",
          "2773:     Expr *pExpr = sqlite3ExprSkipCollate(pOB->a[ii].pExpr);",
          "",
          "[Added Lines]",
          "2774:     Expr *pExpr = sqlite3ExprSkipCollateAndLikely(pOB->a[ii].pExpr);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3711:     for(i=0; i<nOrderBy; i++){",
          "3712:       if( MASKBIT(i) & obSat ) continue;",
          "3714:       if( pOBExpr->op!=TK_COLUMN ) continue;",
          "3715:       if( pOBExpr->iTable!=iCur ) continue;",
          "3716:       pTerm = sqlite3WhereFindTerm(&pWInfo->sWC, iCur, pOBExpr->iColumn,",
          "",
          "[Removed Lines]",
          "3713:       pOBExpr = sqlite3ExprSkipCollate(pOrderBy->a[i].pExpr);",
          "",
          "[Added Lines]",
          "3714:       pOBExpr = sqlite3ExprSkipCollateAndLikely(pOrderBy->a[i].pExpr);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "3830:         isMatch = 0;",
          "3831:         for(i=0; bOnce && i<nOrderBy; i++){",
          "3832:           if( MASKBIT(i) & obSat ) continue;",
          "3834:           testcase( wctrlFlags & WHERE_GROUPBY );",
          "3835:           testcase( wctrlFlags & WHERE_DISTINCTBY );",
          "3836:           if( (wctrlFlags & (WHERE_GROUPBY|WHERE_DISTINCTBY))==0 ) bOnce = 0;",
          "",
          "[Removed Lines]",
          "3833:           pOBExpr = sqlite3ExprSkipCollate(pOrderBy->a[i].pExpr);",
          "",
          "[Added Lines]",
          "3834:           pOBExpr = sqlite3ExprSkipCollateAndLikely(pOrderBy->a[i].pExpr);",
          "",
          "---------------"
        ],
        "src/whereexpr.c||src/whereexpr.c": [
          "File: src/whereexpr.c -> src/whereexpr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "84:   }else{",
          "85:     pTerm->truthProb = 1;",
          "86:   }",
          "88:   pTerm->wtFlags = wtFlags;",
          "89:   pTerm->pWC = pWC;",
          "90:   pTerm->iParent = -1;",
          "",
          "[Removed Lines]",
          "87:   pTerm->pExpr = sqlite3ExprSkipCollate(p);",
          "",
          "[Added Lines]",
          "87:   pTerm->pExpr = sqlite3ExprSkipCollateAndLikely(p);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1453: void sqlite3WhereSplit(WhereClause *pWC, Expr *pExpr, u8 op){",
          "1455:   pWC->op = op;",
          "1456:   if( pE2==0 ) return;",
          "1457:   if( pE2->op!=op ){",
          "",
          "[Removed Lines]",
          "1454:   Expr *pE2 = sqlite3ExprSkipCollate(pExpr);",
          "",
          "[Added Lines]",
          "1454:   Expr *pE2 = sqlite3ExprSkipCollateAndLikely(pExpr);",
          "",
          "---------------"
        ],
        "test/affinity2.test||test/affinity2.test": [
          "File: test/affinity2.test -> test/affinity2.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "85:   SELECT * FROM t3 WHERE c='0' ORDER BY a;",
          "86: } {2 1 0 4 1 0}",
          "88: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "88: # 2019-08-22 ticket https://sqlite.org/src/info/d99f1ffe836c591ac57f",
          "89: # False positive in sqlite3ExprNeedsNoAffinityChange()",
          "90: #",
          "91: do_execsql_test 500 {",
          "92:   DROP TABLE IF EXISTS t0;",
          "93:   CREATE TABLE t0(c0 TEXT UNIQUE, c1);",
          "94:   INSERT INTO t0(c0) VALUES (-1);",
          "95:   SELECT quote(- x'ce'), quote(t0.c0), quote(- x'ce' >= t0.c0) FROM t0;",
          "96: } {0 '-1' 1}",
          "97: do_execsql_test 501 {",
          "98:   SELECT * FROM t0 WHERE - x'ce' >= t0.c0;",
          "99: } {-1 {}}",
          "100: do_execsql_test 502 {",
          "101:   SELECT quote(+-+x'ce'), quote(t0.c0), quote(+-+x'ce' >= t0.c0) FROM t0;",
          "102: } {0 '-1' 1}",
          "103: do_execsql_test 503 {",
          "104:   SELECT * FROM t0 WHERE +-+x'ce' >= t0.c0;",
          "105: } {-1 {}}",
          "106: do_execsql_test 504 {",
          "107:   SELECT quote(- 'ce'), quote(t0.c0), quote(- 'ce' >= t0.c0) FROM t0;",
          "108: } {0 '-1' 1}",
          "109: do_execsql_test 505 {",
          "110:   SELECT * FROM t0 WHERE - 'ce' >= t0.c0;",
          "111: } {-1 {}}",
          "112: do_execsql_test 506 {",
          "113:   SELECT quote(+-+'ce'), quote(t0.c0), quote(+-+'ce' >= t0.c0) FROM t0;",
          "114: } {0 '-1' 1}",
          "115: do_execsql_test 507 {",
          "116:   SELECT * FROM t0 WHERE +-+'ce' >= t0.c0;",
          "117: } {-1 {}}",
          "",
          "---------------"
        ],
        "test/where.test||test/where.test": [
          "File: test/where.test -> test/where.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1538:     ON CONFLICT(c) DO UPDATE SET b=NULL",
          "1539: } {1 {corrupt database}}",
          "1541: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1541: # 2019-08-21 Ticket https://www.sqlite.org/src/info/d9f584e936c7a8d0",
          "1542: #",
          "1543: db close",
          "1544: sqlite3 db :memory:",
          "1545: do_execsql_test where-26.1 {",
          "1546:   CREATE TABLE t0(c0 INTEGER PRIMARY KEY, c1 TEXT);",
          "1547:   INSERT INTO t0(c0, c1) VALUES (1, 'a');",
          "1548:   CREATE TABLE t1(c0 INT PRIMARY KEY, c1 TEXT);",
          "1549:   INSERT INTO t1(c0, c1) VALUES (1, 'a');",
          "1550:   SELECT * FROM t0 WHERE '-1' BETWEEN 0 AND t0.c0;",
          "1551: } {1 a}",
          "1552: do_execsql_test where-26.2 {",
          "1553:   SELECT * FROM t1 WHERE '-1' BETWEEN 0 AND t1.c0;",
          "1554: } {1 a}",
          "1555: do_execsql_test where-26.3 {",
          "1556:   SELECT * FROM t0 WHERE '-1'>=0 AND '-1'<=t0.c0;",
          "1557: } {1 a}",
          "1558: do_execsql_test where-26.4 {",
          "1559:   SELECT * FROM t1 WHERE '-1'>=0 AND '-1'<=t1.c0;",
          "1560: } {1 a}",
          "1561: do_execsql_test where-26.5 {",
          "1562:   SELECT '-1' BETWEEN 0 AND t0.c0 FROM t0;",
          "1563: } {1}",
          "1564: do_execsql_test where-26.6 {",
          "1565:   SELECT '-1' BETWEEN 0 AND t1.c0 FROM t1;",
          "1566: } {1}",
          "1567: do_execsql_test where-26.7 {",
          "1568:   SELECT '-1'>=0 AND '-1'<=t0.c0 FROM t0;",
          "1569: } {1}",
          "1570: do_execsql_test where-26.8 {",
          "1571:   SELECT '-1'>=0 AND '-1'<=t1.c0 FROM t1;",
          "1572: } {1}",
          "",
          "---------------"
        ],
        "test/whereG.test||test/whereG.test": [
          "File: test/whereG.test -> test/whereG.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "266:   SELECT coalesce(a,a), x FROM t1, t2 ORDER BY 1, 2;",
          "267: } {1 3 1 4 9 3 9 4}",
          "270: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "269: # 2019-08-22",
          "270: # Ticket https://www.sqlite.org/src/info/7e07a3dbf5a8cd26",
          "271: #",
          "272: do_execsql_test 8.1 {",
          "273:   DROP TABLE IF EXISTS t0;",
          "274:   CREATE TABLE t0 (c0);",
          "275:   INSERT INTO t0(c0) VALUES ('a');",
          "276:   SELECT LIKELY(t0.rowid) <= '0' FROM t0;",
          "277: } {1}",
          "278: do_execsql_test 8.2 {",
          "279:   SELECT * FROM t0 WHERE LIKELY(t0.rowid) <= '0';",
          "280: } {a}",
          "281: do_execsql_test 8.3 {",
          "282:   SELECT (t0.rowid) <= '0' FROM t0;",
          "283: } {0}",
          "284: do_execsql_test 8.4 {",
          "285:   SELECT * FROM t0 WHERE (t0.rowid) <= '0';",
          "286: } {}",
          "287: do_execsql_test 8.5 {",
          "288:   SELECT unlikely(t0.rowid) <= '0', likelihood(t0.rowid,0.5) <= '0' FROM t0;",
          "289: } {1 1}",
          "290: do_execsql_test 8.6 {",
          "291:   SELECT * FROM t0 WHERE unlikely(t0.rowid) <= '0';",
          "292: } {a}",
          "293: do_execsql_test 8.7 {",
          "294:   SELECT * FROM t0 WHERE likelihood(t0.rowid, 0.5) <= '0';",
          "295: } {a}",
          "296: do_execsql_test 8.8 {",
          "297:   SELECT unlikely(t0.rowid <= '0'),",
          "298:          likely(t0.rowid <= '0'),",
          "299:          likelihood(t0.rowid <= '0',0.5)",
          "300:     FROM t0;",
          "301: } {0 0 0}",
          "302: do_execsql_test 8.9 {",
          "303:   SELECT * FROM t0 WHERE unlikely(t0.rowid <= '0');",
          "304: } {}",
          "305: do_execsql_test 8.10 {",
          "306:   SELECT * FROM t0 WHERE likelihood(t0.rowid <= '0', 0.5);",
          "307: } {}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bffdd636339b32c706253e8c791ccca8b3f88f19",
      "candidate_info": {
        "commit_hash": "bffdd636339b32c706253e8c791ccca8b3f88f19",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/bffdd636339b32c706253e8c791ccca8b3f88f19",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "test/check.test",
          "test/indexexpr1.test"
        ],
        "message": "When computing an expression value for an index-on-expression or a CHECK constraint and the expressions uses a REAL table column, but the value of that column is an integer (in other words, when it is using the store-real-as-integer optimization) be sure to promote the value to real before evaluating the expression.  Ticket [57af00b6642ecd68].\n\nFossilOrigin-Name: 0658c16e311393c8a347b1bd41fa5dbfd2e184aa75d84c011aa8dbac79b632e9",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "test/check.test||test/check.test",
          "test/indexexpr1.test||test/indexexpr1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/expr.c||src/expr.c"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/expr.c||src/expr.c"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: f6d8956cf8b5993a4332b9330e89d5c3d5f8872ea5a2ce3d2e91127406cc1839",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3532:       if( iTab<0 ){",
          "3533:         if( pParse->iSelfTab<0 ){",
          "3536:         }else{",
          "",
          "[Removed Lines]",
          "3535:           return pExpr->iColumn - pParse->iSelfTab;",
          "",
          "[Added Lines]",
          "3535:           assert( pExpr->y.pTab!=0 );",
          "3536:           assert( pExpr->iColumn>=XN_ROWID );",
          "3537:           assert( pExpr->iColumn<pExpr->y.pTab->nCol );",
          "3538:           if( pExpr->iColumn>=0",
          "3539:             && pExpr->y.pTab->aCol[pExpr->iColumn].affinity==SQLITE_AFF_REAL",
          "3540:           ){",
          "3541:             sqlite3VdbeAddOp2(v, OP_SCopy, pExpr->iColumn - pParse->iSelfTab,",
          "3542:                               target);",
          "3543:             sqlite3VdbeAddOp1(v, OP_RealAffinity, target);",
          "3544:             return target;",
          "3545:           }else{",
          "3546:             return pExpr->iColumn - pParse->iSelfTab;",
          "3547:           }",
          "",
          "---------------"
        ],
        "test/check.test||test/check.test": [
          "File: test/check.test -> test/check.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "123:       y REAL CONSTRAINT two CHECK( typeof(coalesce(y,0.1))=='real' ),",
          "124:       z TEXT CONSTRAINT three CHECK( typeof(coalesce(z,''))=='text' )",
          "125:     );",
          "126:     PRAGMA writable_schema = 0;",
          "127:   }",
          "128: } {}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "126:     CREATE TABLE t2n(",
          "127:       x INTEGER CONSTRAINT one CHECK( typeof(coalesce(x,0))==\"integer\" ),",
          "128:       y NUMERIC CONSTRAINT two CHECK( typeof(coalesce(y,0.1))=='real' ),",
          "129:       z TEXT CONSTRAINT three CHECK( typeof(coalesce(z,''))=='text' )",
          "130:     );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "146:   }",
          "147: } {1 {CHECK constraint failed: one}}",
          "148: do_test check-2.5 {",
          "149:   catchsql {",
          "150:     INSERT INTO t2 VALUES(NULL, 5, NULL);",
          "151:   }",
          "152: } {1 {CHECK constraint failed: two}}",
          "153: do_test check-2.6 {",
          "154:   catchsql {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "154:   # The 5 gets automatically promoted to 5.0 because the column type is REAL",
          "158: } {0 {}}",
          "159: do_test check-2.5b {",
          "160:   # This time the column type is NUMERIC, so not automatic promption to REAL",
          "161:   # occurs and the constraint fails.",
          "162:   catchsql {",
          "163:     INSERT INTO t2n VALUES(NULL, 5, NULL);",
          "164:   }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "195:   execsql {",
          "196:     DROP TABLE IF EXISTS t2b;",
          "197:     DROP TABLE IF EXISTS t2c;",
          "198:   }",
          "199: } {}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "211:     DROP TABLE IF EXISTS t2n;",
          "",
          "---------------"
        ],
        "test/indexexpr1.test||test/indexexpr1.test": [
          "File: test/indexexpr1.test -> test/indexexpr1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "457:   SELECT * FROM t0 WHERE ((NULL IS FALSE) IS FALSE);",
          "458: } {0}",
          "460: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "460: # 2019-09-02 https://www.sqlite.org/src/tktview/57af00b6642ecd6848",
          "461: # When the expression of an an index-on-expression references a",
          "462: # table column of type REAL that is actually holding an MEM_IntReal",
          "463: # value, be sure to use the REAL value and not the INT value when",
          "464: # computing the expression.",
          "465: #",
          "466: do_execsql_test indexexpr-1800 {",
          "467:   DROP TABLE IF EXISTS t0;",
          "468:   CREATE TABLE t0(c0 REAL, c1 TEXT);",
          "469:   CREATE INDEX i0 ON t0(+c0, c0);",
          "470:   INSERT INTO t0(c0) VALUES(0);",
          "471:   SELECT CAST(+ t0.c0 AS BLOB) LIKE 0 FROM t0;",
          "472: } {0}",
          "473: do_execsql_test indexexpr-1810 {",
          "474:   SELECT CAST(+ t0.c0 AS BLOB) LIKE '0.0' FROM t0;",
          "475: } {1}",
          "476: do_execsql_test indexexpr-1820 {",
          "477:   DROP TABLE IF EXISTS t1;",
          "478:   CREATE TABLE t1(x REAL);",
          "479:   CREATE INDEX t1x ON t1(x, +x);",
          "480:   INSERT INTO t1(x) VALUES(2);",
          "481:   SELECT +x FROM t1 WHERE x=2;",
          "482: } {2.0}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "91f34eab2d08ef03e4454664458960f746ba580e",
      "candidate_info": {
        "commit_hash": "91f34eab2d08ef03e4454664458960f746ba580e",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/91f34eab2d08ef03e4454664458960f746ba580e",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c",
          "src/shell.c.in"
        ],
        "message": "Allow DROP TABLE to work on tables name \"sqlite_parameters\" just as it does with tables named \"sqlite_stat%\".  Fix for the \".parameter clear\" command in the shell.\n\nFossilOrigin-Name: e768179baacb2423205a774cc8149fe58ed86a9320102aff4844b1d8933aa1db",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c",
          "src/shell.c.in||src/shell.c.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 0ceab26f15c4c7039647cbccf8939dd5c36a60b70ffeefcd3b415c8d4d8351cd",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2816:   }",
          "2817: #endif",
          "2818:   if( sqlite3StrNICmp(pTab->zName, \"sqlite_\", 7)==0",
          "2820:     sqlite3ErrorMsg(pParse, \"table %s may not be dropped\", pTab->zName);",
          "2821:     goto exit_drop_table;",
          "2822:   }",
          "",
          "[Removed Lines]",
          "2819:     && sqlite3StrNICmp(pTab->zName, \"sqlite_stat\", 11)!=0 ){",
          "",
          "[Added Lines]",
          "2819:     && sqlite3StrNICmp(pTab->zName+7, \"stat\", 4)!=0",
          "2820:     && sqlite3StrNICmp(pTab->zName+7, \"parameters\", 10)!=0 ){",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "8150:     if( nArg==2 && strcmp(azArg[1],\"clear\")==0 ){",
          "8154:       sqlite3_exec(p->db, \"DROP TABLE IF EXISTS temp.sqlite_parameters;\",",
          "8155:                    0, 0, 0);",
          "8157:     }else",
          "",
          "[Removed Lines]",
          "8151:       int wrSchema = 0;",
          "8152:       sqlite3_db_config(p->db, SQLITE_DBCONFIG_WRITABLE_SCHEMA, -1, &wrSchema);",
          "8153:       sqlite3_db_config(p->db, SQLITE_DBCONFIG_WRITABLE_SCHEMA, 1, 0);",
          "8156:       sqlite3_db_config(p->db, SQLITE_DBCONFIG_WRITABLE_SCHEMA, wrSchema, 0);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7e85e9033ff34f8f75e5bb56152be39be39a62a5",
      "candidate_info": {
        "commit_hash": "7e85e9033ff34f8f75e5bb56152be39be39a62a5",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/7e85e9033ff34f8f75e5bb56152be39be39a62a5",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/dbfuzz2.c"
        ],
        "message": "Disable unix-specific features of dbfuzz2 when compiling on windows.\n\nFossilOrigin-Name: af84774d1eebcfe6a61b564b4edf280ad3c3a93f39b7f70b6fcc56f7bbdfb9eb",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/dbfuzz2.c||test/dbfuzz2.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: c48f6f39c5f89a338fed7153553a27a5d882d4d8db8221e911b96e0dd57c53d9",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/dbfuzz2.c||test/dbfuzz2.c": [
          "File: test/dbfuzz2.c -> test/dbfuzz2.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "43: #include <stdarg.h>",
          "44: #include <ctype.h>",
          "45: #include <stdint.h>",
          "46: #include <sys/time.h>",
          "47: #include <sys/resource.h>",
          "48: #include \"sqlite3.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "46: #ifndef _WIN32",
          "49: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "261:         szMax = strtol(argv[++i], 0, 0);",
          "262:         continue;",
          "263:       }",
          "264:       if( strcmp(z,\"max-stack\")==0",
          "265:        || strcmp(z,\"max-data\")==0",
          "266:        || strcmp(z,\"max-as\")==0",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "266: #ifndef _WIN32",
          "",
          "---------------"
        ]
      }
    }
  ]
}