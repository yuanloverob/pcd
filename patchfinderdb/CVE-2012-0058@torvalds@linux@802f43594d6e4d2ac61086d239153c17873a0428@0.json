{
  "cve_id": "CVE-2012-0058",
  "cve_desc": "The kiocb_batch_free function in fs/aio.c in the Linux kernel before 3.2.2 allows local users to cause a denial of service (OOPS) via vectors that trigger incorrect iocb management.",
  "repo": "torvalds/linux",
  "patch_hash": "802f43594d6e4d2ac61086d239153c17873a0428",
  "patch_info": {
    "commit_hash": "802f43594d6e4d2ac61086d239153c17873a0428",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/802f43594d6e4d2ac61086d239153c17873a0428",
    "files": [
      "fs/aio.c"
    ],
    "message": "Unused iocbs in a batch should not be accounted as active.\n\ncommit 69e4747ee9727d660b88d7e1efe0f4afcb35db1b upstream.\n\nSince commit 080d676de095 (\"aio: allocate kiocbs in batches\") iocbs are\nallocated in a batch during processing of first iocbs.  All iocbs in a\nbatch are automatically added to ctx->active_reqs list and accounted in\nctx->reqs_active.\n\nIf one (not the last one) of iocbs submitted by an user fails, further\niocbs are not processed, but they are still present in ctx->active_reqs\nand accounted in ctx->reqs_active.  This causes process to stuck in a D\nstate in wait_for_all_aios() on exit since ctx->reqs_active will never\ngo down to zero.  Furthermore since kiocb_batch_free() frees iocb\nwithout removing it from active_reqs list the list become corrupted\nwhich may cause oops.\n\nFix this by removing iocb from ctx->active_reqs and updating\nctx->reqs_active in kiocb_batch_free().\n\nSigned-off-by: Gleb Natapov <gleb@redhat.com>\nReviewed-by: Jeff Moyer <jmoyer@redhat.com>\nSigned-off-by: Linus Torvalds <torvalds@linux-foundation.org>\nSigned-off-by: Greg Kroah-Hartman <gregkh@suse.de>",
    "before_after_code_files": [
      "fs/aio.c||fs/aio.c"
    ]
  },
  "patch_diff": {
    "fs/aio.c||fs/aio.c": [
      "File: fs/aio.c -> fs/aio.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "476:  batch->count = total;",
      "477: }",
      "480: {",
      "481:  struct kiocb *req, *n;",
      "483:  list_for_each_entry_safe(req, n, &batch->head, ki_batch) {",
      "484:   list_del(&req->ki_batch);",
      "485:   kmem_cache_free(kiocb_cachep, req);",
      "486:  }",
      "487: }",
      "",
      "[Removed Lines]",
      "479: static void kiocb_batch_free(struct kiocb_batch *batch)",
      "",
      "[Added Lines]",
      "479: static void kiocb_batch_free(struct kioctx *ctx, struct kiocb_batch *batch)",
      "483:  if (list_empty(&batch->head))",
      "484:   return;",
      "486:  spin_lock_irq(&ctx->ctx_lock);",
      "489:   list_del(&req->ki_list);",
      "491:   ctx->reqs_active--;",
      "493:  spin_unlock_irq(&ctx->ctx_lock);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1742:  }",
      "1743:  blk_finish_plug(&plug);",
      "1746:  put_ioctx(ctx);",
      "1747:  return i ? i : ret;",
      "1748: }",
      "",
      "[Removed Lines]",
      "1745:  kiocb_batch_free(&batch);",
      "",
      "[Added Lines]",
      "1752:  kiocb_batch_free(ctx, &batch);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "69e4747ee9727d660b88d7e1efe0f4afcb35db1b",
      "candidate_info": {
        "commit_hash": "69e4747ee9727d660b88d7e1efe0f4afcb35db1b",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/69e4747ee9727d660b88d7e1efe0f4afcb35db1b",
        "files": [
          "fs/aio.c"
        ],
        "message": "Unused iocbs in a batch should not be accounted as active.\n\nSince commit 080d676de095 (\"aio: allocate kiocbs in batches\") iocbs are\nallocated in a batch during processing of first iocbs.  All iocbs in a\nbatch are automatically added to ctx->active_reqs list and accounted in\nctx->reqs_active.\n\nIf one (not the last one) of iocbs submitted by an user fails, further\niocbs are not processed, but they are still present in ctx->active_reqs\nand accounted in ctx->reqs_active.  This causes process to stuck in a D\nstate in wait_for_all_aios() on exit since ctx->reqs_active will never\ngo down to zero.  Furthermore since kiocb_batch_free() frees iocb\nwithout removing it from active_reqs list the list become corrupted\nwhich may cause oops.\n\nFix this by removing iocb from ctx->active_reqs and updating\nctx->reqs_active in kiocb_batch_free().\n\nSigned-off-by: Gleb Natapov <gleb@redhat.com>\nReviewed-by: Jeff Moyer <jmoyer@redhat.com>\nCc: stable@kernel.org   # 3.2\nSigned-off-by: Linus Torvalds <torvalds@linux-foundation.org>",
        "before_after_code_files": [
          "fs/aio.c||fs/aio.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "fs/aio.c||fs/aio.c"
          ],
          "candidate": [
            "fs/aio.c||fs/aio.c"
          ]
        }
      },
      "candidate_diff": {
        "fs/aio.c||fs/aio.c": [
          "File: fs/aio.c -> fs/aio.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "476:  batch->count = total;",
          "477: }",
          "480: {",
          "481:  struct kiocb *req, *n;",
          "483:  list_for_each_entry_safe(req, n, &batch->head, ki_batch) {",
          "484:   list_del(&req->ki_batch);",
          "485:   kmem_cache_free(kiocb_cachep, req);",
          "486:  }",
          "487: }",
          "",
          "[Removed Lines]",
          "479: static void kiocb_batch_free(struct kiocb_batch *batch)",
          "",
          "[Added Lines]",
          "479: static void kiocb_batch_free(struct kioctx *ctx, struct kiocb_batch *batch)",
          "483:  if (list_empty(&batch->head))",
          "484:   return;",
          "486:  spin_lock_irq(&ctx->ctx_lock);",
          "489:   list_del(&req->ki_list);",
          "491:   ctx->reqs_active--;",
          "493:  spin_unlock_irq(&ctx->ctx_lock);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1742:  }",
          "1743:  blk_finish_plug(&plug);",
          "1746:  put_ioctx(ctx);",
          "1747:  return i ? i : ret;",
          "1748: }",
          "",
          "[Removed Lines]",
          "1745:  kiocb_batch_free(&batch);",
          "",
          "[Added Lines]",
          "1752:  kiocb_batch_free(ctx, &batch);",
          "",
          "---------------"
        ]
      }
    }
  ]
}