{
  "cve_id": "CVE-2012-2330",
  "cve_desc": "The Update method in src/node_http_parser.cc in Node.js before 0.6.17 and 0.7 before 0.7.8 does not properly check the length of a string, which allows remote attackers to obtain sensitive information (request header contents) and possibly spoof HTTP headers via a zero length string.",
  "repo": "joyent/node",
  "patch_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
  "patch_info": {
    "commit_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
    "repo": "joyent/node",
    "commit_url": "https://github.com/joyent/node/commit/c9a231d",
    "files": [
      "src/node_http_parser.cc"
    ],
    "message": "typo in node_http_parser",
    "before_after_code_files": [
      "src/node_http_parser.cc||src/node_http_parser.cc"
    ]
  },
  "patch_diff": {
    "src/node_http_parser.cc||src/node_http_parser.cc": [
      "File: src/node_http_parser.cc -> src/node_http_parser.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "191:   void Update(const char* str, size_t size) {",
      "192:     if (str_ == NULL)",
      "193:       str_ = str;",
      "197:       char* s = new char[size_ + size];",
      "",
      "[Removed Lines]",
      "194:     else if (on_heap_ || str_ + size != str) {",
      "",
      "[Added Lines]",
      "194:     else if (on_heap_ || str_ + size_ != str) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "84590f3fe9507887cebdcc11b3d1bc93180dc5a7",
      "candidate_info": {
        "commit_hash": "84590f3fe9507887cebdcc11b3d1bc93180dc5a7",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/84590f3fe9507887cebdcc11b3d1bc93180dc5a7",
        "files": [
          "common.gypi"
        ],
        "message": "build: fix -fno-tree-vrp heuristic\n\n-fno-tree-vrp is a gcc only switch. Don't enable it when compiling with clang,\nit will only complain about -fno-tree-vrp being ignored.",
        "before_after_code_files": [
          "common.gypi||common.gypi"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "common.gypi||common.gypi": [
          "File: common.gypi -> common.gypi",
          "--- Hunk 1 ---",
          "[Context before]",
          "66:               }, {",
          "67:                 'cflags!': [ '-ffunction-sections', '-fdata-sections' ],",
          "68:               }],",
          "70:                 'cflags': [ '-fno-tree-vrp' ],",
          "71:               }],",
          "72:             ],",
          "",
          "[Removed Lines]",
          "69:               ['clang==1 or gcc_version >= 40', {",
          "",
          "[Added Lines]",
          "69:               ['clang == 0 and gcc_version >= 40', {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cc0e7efb3765ffd22d1394618e3f648cde7dfddc",
      "candidate_info": {
        "commit_hash": "cc0e7efb3765ffd22d1394618e3f648cde7dfddc",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/cc0e7efb3765ffd22d1394618e3f648cde7dfddc",
        "files": [
          "src/slab_allocator.cc"
        ],
        "message": "slab_allocator: fix crash in dtor if V8 is dead\n\nDon't try to dispose the persistent handles if the VM is already dead, it\ntriggers an assertion inside V8.",
        "before_after_code_files": [
          "src/slab_allocator.cc||src/slab_allocator.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/slab_allocator.cc||src/slab_allocator.cc": [
          "File: src/slab_allocator.cc -> src/slab_allocator.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "37: using v8::Persistent;",
          "38: using v8::String;",
          "39: using v8::Value;",
          "42: namespace node {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "40: using v8::V8;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "50: SlabAllocator::~SlabAllocator() {",
          "51:   if (!initialized_) return;",
          "52:   slab_sym_.Dispose();",
          "53:   slab_sym_.Clear();",
          "54:   slab_.Dispose();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "53:   if (V8::IsDead()) return;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fac6c69456d170ee19fa14bbccade67129d873b5",
      "candidate_info": {
        "commit_hash": "fac6c69456d170ee19fa14bbccade67129d873b5",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/fac6c69456d170ee19fa14bbccade67129d873b5",
        "files": [
          "deps/v8/tools/gen-postmortem-metadata.py"
        ],
        "message": "v8: fix postmortem debugging tools build",
        "before_after_code_files": [
          "deps/v8/tools/gen-postmortem-metadata.py||deps/v8/tools/gen-postmortem-metadata.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "deps/v8/tools/gen-postmortem-metadata.py||deps/v8/tools/gen-postmortem-metadata.py": [
          "File: deps/v8/tools/gen-postmortem-metadata.py -> deps/v8/tools/gen-postmortem-metadata.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "78:     { 'name': 'SmiValueShift',          'value': 'kSmiTagSize' },",
          "79:     { 'name': 'PointerSizeLog2',        'value': 'kPointerSizeLog2' },",
          "83:     { 'name': 'prop_idx_first',",
          "84:         'value': 'DescriptorArray::kFirstIndex' },",
          "85:     { 'name': 'prop_type_field',",
          "",
          "[Removed Lines]",
          "81:     { 'name': 'prop_idx_content',",
          "82:         'value': 'DescriptorArray::kContentArrayIndex' },",
          "",
          "[Added Lines]",
          "81:     { 'name': 'prop_idx_transitions',",
          "82:         'value': 'DescriptorArray::kTransitionsIndex' },",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4624cf12141d23621db864d5825a22ddd25db8fd",
      "candidate_info": {
        "commit_hash": "4624cf12141d23621db864d5825a22ddd25db8fd",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/4624cf12141d23621db864d5825a22ddd25db8fd",
        "files": [
          "src/stream_wrap.cc"
        ],
        "message": "stream_wrap.cc: fix typo",
        "before_after_code_files": [
          "src/stream_wrap.cc||src/stream_wrap.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/stream_wrap.cc||src/stream_wrap.cc": [
          "File: src/stream_wrap.cc -> src/stream_wrap.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "337:       break;",
          "339:     case kUcs2:",
          "341:       break;",
          "343:     default:",
          "",
          "[Removed Lines]",
          "340:       storage_size += string->Length() * sizeof(uint16_t);",
          "",
          "[Added Lines]",
          "340:       storage_size = string->Length() * sizeof(uint16_t);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "71ae1753196f41d569d20a940ed036a50c292069",
      "candidate_info": {
        "commit_hash": "71ae1753196f41d569d20a940ed036a50c292069",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/71ae1753196f41d569d20a940ed036a50c292069",
        "files": [
          "lib/zlib.js",
          "src/node_zlib.cc",
          "test/simple/test-zlib-dictionary.js"
        ],
        "message": "zlib: reset() method for deflate/inflate streams\n\n* ammended test-zlib-dictionary to cover reusing streams",
        "before_after_code_files": [
          "lib/zlib.js||lizlib.js",
          "src/node_zlib.cc||src/node_zlib.cc",
          "test/simple/test-zlib-dictionary.js||test/simple/test-zlib-dictionary.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/zlib.js||lizlib.js": [
          "File: lib/zlib.js -> lizlib.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "309:   return empty;",
          "310: };",
          "312: Zlib.prototype.flush = function flush(cb) {",
          "313:   this._flush = binding.Z_SYNC_FLUSH;",
          "314:   return this.write(cb);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/node_zlib.cc||src/node_zlib.cc": [
          "File: src/node_zlib.cc -> src/node_zlib.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "250:     Init(ctx, level, windowBits, memLevel, strategy,",
          "251:          dictionary, dictionary_len);",
          "252:     return Undefined();",
          "253:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "252:     SetDictionary(ctx);",
          "253:     return Undefined();",
          "254:   }",
          "256:   static Handle<Value> Reset(const Arguments &args) {",
          "257:     HandleScope scope;",
          "259:     ZCtx<mode> *ctx = ObjectWrap::Unwrap< ZCtx<mode> >(args.This());",
          "261:     Reset(ctx);",
          "262:     SetDictionary(ctx);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "304:     ctx->dictionary_ = reinterpret_cast<Bytef *>(dictionary);",
          "305:     ctx->dictionary_len_ = dictionary_len;",
          "320:     }",
          "324:   }",
          "326:  private:",
          "",
          "[Removed Lines]",
          "307:     if (dictionary != NULL) {",
          "308:       switch (mode) {",
          "309:         case DEFLATE:",
          "310:         case DEFLATERAW:",
          "311:           err = deflateSetDictionary(&ctx->strm_,",
          "312:                                      ctx->dictionary_,",
          "313:                                      dictionary_len);",
          "314:           break;",
          "315:         default:",
          "316:           break;",
          "317:       }",
          "319:       assert(err == Z_OK && \"Failed to set dictionary\");",
          "322:     ctx->write_in_progress_ = false;",
          "323:     ctx->init_done_ = true;",
          "",
          "[Added Lines]",
          "318:     ctx->write_in_progress_ = false;",
          "319:     ctx->init_done_ = true;",
          "320:   }",
          "322:   static void SetDictionary(ZCtx* ctx) {",
          "323:     if (ctx->dictionary_ == NULL) return;",
          "325:     int err;",
          "327:     switch (mode) {",
          "328:       case DEFLATE:",
          "329:       case DEFLATERAW:",
          "330:         err = deflateSetDictionary(&ctx->strm_,",
          "331:                                    ctx->dictionary_,",
          "332:                                    ctx->dictionary_len_);",
          "333:         break;",
          "334:       default:",
          "335:         break;",
          "338:     assert(err == Z_OK && \"Failed to set dictionary\");",
          "339:   }",
          "341:   static void Reset(ZCtx* ctx) {",
          "342:     int err;",
          "344:     switch (mode) {",
          "345:       case DEFLATE:",
          "346:       case DEFLATERAW:",
          "347:         err = deflateReset(&ctx->strm_);",
          "348:         break;",
          "349:       case INFLATE:",
          "350:       case INFLATERAW:",
          "351:         err = inflateReset(&ctx->strm_);",
          "352:         break;",
          "353:       default:",
          "354:         break;",
          "355:     }",
          "357:     assert(err == Z_OK && \"Failed to reset stream\");",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "352:     z->InstanceTemplate()->SetInternalFieldCount(1); \\",
          "353:     NODE_SET_PROTOTYPE_METHOD(z, \"write\", ZCtx<mode>::Write); \\",
          "354:     NODE_SET_PROTOTYPE_METHOD(z, \"init\", ZCtx<mode>::Init); \\",
          "355:     z->SetClassName(String::NewSymbol(name)); \\",
          "356:     target->Set(String::NewSymbol(name), z->GetFunction()); \\",
          "357:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "389:     NODE_SET_PROTOTYPE_METHOD(z, \"reset\", ZCtx<mode>::Reset); \\",
          "",
          "---------------"
        ],
        "test/simple/test-zlib-dictionary.js||test/simple/test-zlib-dictionary.js": [
          "File: test/simple/test-zlib-dictionary.js -> test/simple/test-zlib-dictionary.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "43: ].join(''));",
          "45: var deflate = zlib.createDeflate({ dictionary: spdyDict });",
          "48: var input = [",
          "49:   'HTTP/1.1 200 Ok',",
          "",
          "[Removed Lines]",
          "46: var inflate = zlib.createInflate({ dictionary: spdyDict });",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "52:   ''",
          "53: ].join('\\r\\n');",
          "",
          "[Removed Lines]",
          "56: deflate.on('data', function(chunk) {",
          "57:   inflate.write(chunk);",
          "58: });",
          "59: deflate.on('end', function() {",
          "60:   inflate.end();",
          "61: });",
          "64: var output = [];",
          "65: inflate.on('data', function(chunk) {",
          "66:   output.push(chunk);",
          "67: });",
          "68: inflate.on('end', function() {",
          "69:   assert.equal(output.join(''), input);",
          "70: });",
          "72: deflate.write(input);",
          "73: deflate.end();",
          "",
          "[Added Lines]",
          "54: var called = 0;",
          "60: function run(num) {",
          "61:   var inflate = zlib.createInflate({ dictionary: spdyDict });",
          "63:   if (num === 2) {",
          "64:     deflate.reset();",
          "65:     deflate.removeAllListeners('data');",
          "66:   }",
          "69:   deflate.on('data', function(chunk) {",
          "70:     inflate.write(chunk);",
          "71:   });",
          "74:   var output = [];",
          "75:   inflate.on('data', function(chunk) {",
          "76:     output.push(chunk);",
          "77:   });",
          "78:   inflate.on('end', function() {",
          "79:     called++;",
          "81:     assert.equal(output.join(''), input);",
          "83:     if (num < 2) run(num + 1);",
          "84:   });",
          "86:   deflate.write(input);",
          "87:   deflate.flush(function() {",
          "88:     inflate.end();",
          "89:   });",
          "90: }",
          "91: run(1);",
          "93: process.on('exit', function() {",
          "94:   assert.equal(called, 2);",
          "95: });",
          "",
          "---------------"
        ]
      }
    }
  ]
}