{
  "cve_id": "CVE-2017-17087",
  "cve_desc": "fileio.c in Vim prior to 8.0.1263 sets the group ownership of a .swp file to the editor's primary group (which may be different from the group ownership of the original file), which allows local users to obtain sensitive information by leveraging an applicable group membership, as demonstrated by /etc/shadow owned by root:shadow mode 0640, but /etc/.shadow.swp owned by root:users mode 0640, a different vulnerability than CVE-2017-1000382.",
  "repo": "vim/vim",
  "patch_hash": "5a73e0ca54c77e067c3b12ea6f35e3e8681e8cf8",
  "patch_info": {
    "commit_hash": "5a73e0ca54c77e067c3b12ea6f35e3e8681e8cf8",
    "repo": "vim/vim",
    "commit_url": "https://github.com/vim/vim/commit/5a73e0ca54c77e067c3b12ea6f35e3e8681e8cf8",
    "files": [
      "src/Makefile",
      "src/fileio.c",
      "src/testdir/test_swap.vim",
      "src/version.c"
    ],
    "message": "patch 8.0.1263: others can read the swap file if a user is careless\n\nProblem:    Others can read the swap file if a user is careless with his\n            primary group.\nSolution:   If the group permission allows for reading but the world\n            permissions doesn't, make sure the group is right.",
    "before_after_code_files": [
      "src/fileio.c||src/fileio.c",
      "src/testdir/test_swap.vim||src/testdir/test_swap.vim",
      "src/version.c||src/version.c"
    ]
  },
  "patch_diff": {
    "src/fileio.c||src/fileio.c": [
      "File: src/fileio.c -> src/fileio.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "717:  if (swap_mode > 0 && curbuf->b_ml.ml_mfp != NULL",
      "718:      && curbuf->b_ml.ml_mfp->mf_fname != NULL)",
      "720: #endif",
      "721:     }",
      "",
      "[Removed Lines]",
      "719:      (void)mch_setperm(curbuf->b_ml.ml_mfp->mf_fname, (long)swap_mode);",
      "",
      "[Added Lines]",
      "719:  {",
      "720:      char_u *swap_fname = curbuf->b_ml.ml_mfp->mf_fname;",
      "729:      if ((swap_mode & 044) == 040)",
      "730:      {",
      "731:   stat_T swap_st;",
      "733:   if (mch_stat((char *)swap_fname, &swap_st) >= 0",
      "734:    && st.st_gid != swap_st.st_gid",
      "735:    && fchown(curbuf->b_ml.ml_mfp->mf_fd, -1, st.st_gid)",
      "736:           == -1)",
      "737:       swap_mode &= 0600;",
      "738:      }",
      "740:      (void)mch_setperm(swap_fname, (long)swap_mode);",
      "741:  }",
      "",
      "---------------"
    ],
    "src/testdir/test_swap.vim||src/testdir/test_swap.vim": [
      "File: src/testdir/test_swap.vim -> src/testdir/test_swap.vim",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: \" Tests for the swap feature",
      "5:   if !has(\"unix\")",
      "6:     return",
      "7:   endif",
      "48: endfunc",
      "",
      "[Removed Lines]",
      "3: \" Tests for 'directory' option.",
      "4: func Test_swap_directory()",
      "8:   let content = ['start of testfile',",
      "9:        \\ 'line 2 Abcdefghij',",
      "10:        \\ 'line 3 Abcdefghij',",
      "11:        \\ 'end of testfile']",
      "12:   call writefile(content, 'Xtest1')",
      "14:   \"  '.', swap file in the same directory as file",
      "15:   set dir=.,~",
      "17:   \" Verify that the swap file doesn't exist in the current directory",
      "18:   call assert_equal([], glob(\".Xtest1*.swp\", 1, 1, 1))",
      "19:   edit Xtest1",
      "20:   let swfname = split(execute(\"swapname\"))[0]",
      "21:   call assert_equal([swfname], glob(swfname, 1, 1, 1))",
      "23:   \" './dir', swap file in a directory relative to the file",
      "24:   set dir=./Xtest2,.,~",
      "26:   call mkdir(\"Xtest2\")",
      "27:   edit Xtest1",
      "28:   call assert_equal([], glob(swfname, 1, 1, 1))",
      "29:   let swfname = \"Xtest2/Xtest1.swp\"",
      "30:   call assert_equal(swfname, split(execute(\"swapname\"))[0])",
      "31:   call assert_equal([swfname], glob(\"Xtest2/*\", 1, 1, 1))",
      "33:   \" 'dir', swap file in directory relative to the current dir",
      "34:   set dir=Xtest.je,~",
      "36:   call mkdir(\"Xtest.je\")",
      "37:   call writefile(content, 'Xtest2/Xtest3')",
      "38:   edit Xtest2/Xtest3",
      "39:   call assert_equal([\"Xtest2/Xtest3\"], glob(\"Xtest2/*\", 1, 1, 1))",
      "40:   let swfname = \"Xtest.je/Xtest3.swp\"",
      "41:   call assert_equal(swfname, split(execute(\"swapname\"))[0])",
      "42:   call assert_equal([swfname], glob(\"Xtest.je/*\", 1, 1, 1))",
      "44:   set dir&",
      "45:   call delete(\"Xtest1\")",
      "46:   call delete(\"Xtest2\", \"rf\")",
      "47:   call delete(\"Xtest.je\", \"rf\")",
      "",
      "[Added Lines]",
      "3: \"\" Tests for 'directory' option.",
      "4: \"func Test_swap_directory()",
      "5: \"  if !has(\"unix\")",
      "6: \"    return",
      "7: \"  endif",
      "8: \"  let content = ['start of testfile',",
      "9: \"       \\ 'line 2 Abcdefghij',",
      "10: \"       \\ 'line 3 Abcdefghij',",
      "11: \"       \\ 'end of testfile']",
      "12: \"  call writefile(content, 'Xtest1')",
      "13: \"",
      "14: \"  \"  '.', swap file in the same directory as file",
      "15: \"  set dir=.,~",
      "16: \"",
      "17: \"  \" Verify that the swap file doesn't exist in the current directory",
      "18: \"  call assert_equal([], glob(\".Xtest1*.swp\", 1, 1, 1))",
      "19: \"  edit Xtest1",
      "20: \"  let swfname = split(execute(\"swapname\"))[0]",
      "21: \"  call assert_equal([swfname], glob(swfname, 1, 1, 1))",
      "22: \"",
      "23: \"  \" './dir', swap file in a directory relative to the file",
      "24: \"  set dir=./Xtest2,.,~",
      "25: \"",
      "26: \"  call mkdir(\"Xtest2\")",
      "27: \"  edit Xtest1",
      "28: \"  call assert_equal([], glob(swfname, 1, 1, 1))",
      "29: \"  let swfname = \"Xtest2/Xtest1.swp\"",
      "30: \"  call assert_equal(swfname, split(execute(\"swapname\"))[0])",
      "31: \"  call assert_equal([swfname], glob(\"Xtest2/*\", 1, 1, 1))",
      "32: \"",
      "33: \"  \" 'dir', swap file in directory relative to the current dir",
      "34: \"  set dir=Xtest.je,~",
      "35: \"",
      "36: \"  call mkdir(\"Xtest.je\")",
      "37: \"  call writefile(content, 'Xtest2/Xtest3')",
      "38: \"  edit Xtest2/Xtest3",
      "39: \"  call assert_equal([\"Xtest2/Xtest3\"], glob(\"Xtest2/*\", 1, 1, 1))",
      "40: \"  let swfname = \"Xtest.je/Xtest3.swp\"",
      "41: \"  call assert_equal(swfname, split(execute(\"swapname\"))[0])",
      "42: \"  call assert_equal([swfname], glob(\"Xtest.je/*\", 1, 1, 1))",
      "43: \"",
      "44: \"  set dir&",
      "45: \"  call delete(\"Xtest1\")",
      "46: \"  call delete(\"Xtest2\", \"rf\")",
      "47: \"  call delete(\"Xtest.je\", \"rf\")",
      "48: \"endfunc",
      "50: func Test_swap_group()",
      "54:   let groups = split(system('groups'))",
      "55:   if len(groups) <= 1",
      "56:     throw 'Skipped: need at least two groups, got ' . groups",
      "57:   endif",
      "59:   call delete('Xtest')",
      "60:   split Xtest",
      "61:   call setline(1, 'just some text')",
      "62:   wq",
      "63:   if system('ls -l Xtest') !~ ' ' . groups[0] . ' \\d'",
      "64:     throw 'Skipped: test file does not have the first group'",
      "65:   else",
      "66:     silent !chmod 640 Xtest",
      "67:     call system('chgrp ' . groups[1] . ' Xtest')",
      "68:     if system('ls -l Xtest') !~ ' ' . groups[1] . ' \\d'",
      "69:       throw 'Skipped: cannot set second group on test file'",
      "70:     else",
      "71:       split Xtest",
      "72:       let swapname = substitute(execute('swapname'), '[[:space:]]', '', 'g')",
      "73:       call assert_match('Xtest', swapname)",
      "74:       \" Group of swapfile must now match original file.",
      "75:       call assert_match(' ' . groups[1] . ' \\d', system('ls -l ' . swapname))",
      "77:       bwipe!",
      "78:     endif",
      "79:   endif",
      "81:   call delete('Xtest')",
      "",
      "---------------"
    ],
    "src/version.c||src/version.c": [
      "File: src/version.c -> src/version.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "762: static int included_patches[] =",
      "765:     1262,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "765:     1263,",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "430dc5d360166ca5bb6a73f2c87ae53e09282ecb",
      "candidate_info": {
        "commit_hash": "430dc5d360166ca5bb6a73f2c87ae53e09282ecb",
        "repo": "vim/vim",
        "commit_url": "https://github.com/vim/vim/commit/430dc5d360166ca5bb6a73f2c87ae53e09282ecb",
        "files": [
          "src/Makefile",
          "src/testdir/Make_all.mak",
          "src/testdir/Make_amiga.mak",
          "src/testdir/Make_dos.mak",
          "src/testdir/Make_ming.mak",
          "src/testdir/Make_vms.mms",
          "src/testdir/main.aap",
          "src/testdir/test12.in",
          "src/testdir/test12.ok",
          "src/testdir/test40.in",
          "src/testdir/test40.ok",
          "src/testdir/test45.in",
          "src/testdir/test45.ok",
          "src/testdir/test83.in",
          "src/testdir/test83.ok",
          "src/testdir/test_autocmd.vim",
          "src/testdir/test_fold.vim",
          "src/testdir/test_swap.vim",
          "src/testdir/test_tagjump.vim",
          "src/version.c"
        ],
        "message": "patch 8.0.1253: still too many old style tests\n\nProblem:    Still too many old style tests.\nSolution:   Convert a few more tests to new style. (Yegappan Lakshmanan,\n            closes #2272)",
        "before_after_code_files": [
          "src/testdir/Make_all.mak||src/testdir/Make_all.mak",
          "src/testdir/Make_amiga.mak||src/testdir/Make_amiga.mak",
          "src/testdir/Make_dos.mak||src/testdir/Make_dos.mak",
          "src/testdir/Make_ming.mak||src/testdir/Make_ming.mak",
          "src/testdir/Make_vms.mms||src/testdir/Make_vms.mms",
          "src/testdir/main.aap||src/testdir/main.aap",
          "src/testdir/test12.in||src/testdir/test12.in",
          "src/testdir/test12.ok||src/testdir/test12.ok",
          "src/testdir/test40.in||src/testdir/test40.in",
          "src/testdir/test40.ok||src/testdir/test40.ok",
          "src/testdir/test45.in||src/testdir/test45.in",
          "src/testdir/test45.ok||src/testdir/test45.ok",
          "src/testdir/test83.in||src/testdir/test83.in",
          "src/testdir/test83.ok||src/testdir/test83.ok",
          "src/testdir/test_autocmd.vim||src/testdir/test_autocmd.vim",
          "src/testdir/test_fold.vim||src/testdir/test_fold.vim",
          "src/testdir/test_swap.vim||src/testdir/test_swap.vim",
          "src/testdir/test_tagjump.vim||src/testdir/test_tagjump.vim",
          "src/version.c||src/version.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/testdir/test_swap.vim||src/testdir/test_swap.vim",
            "src/version.c||src/version.c"
          ],
          "candidate": [
            "src/testdir/test_swap.vim||src/testdir/test_swap.vim",
            "src/version.c||src/version.c"
          ]
        }
      },
      "candidate_diff": {
        "src/testdir/Make_all.mak||src/testdir/Make_all.mak": [
          "File: src/testdir/Make_all.mak -> src/testdir/Make_all.mak",
          "--- Hunk 1 ---",
          "[Context before]",
          "20:  test36.out \\",
          "21:  test37.out \\",
          "22:  test39.out \\",
          "24:  test42.out \\",
          "25:  test44.out \\",
          "27:  test48.out \\",
          "28:  test55.out \\",
          "29:  test64.out \\",
          "",
          "[Removed Lines]",
          "23:  test40.out \\",
          "26:  test45.out \\",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "59: # Tests that run on most systems, but not on Amiga and DOS/Windows.",
          "60: SCRIPTS_MORE2 = \\",
          "62:  test49.out",
          "",
          "[Removed Lines]",
          "61:  test12.out \\",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "68:  test30.out \\",
          "69:  test59.out \\",
          "70:  test72.out \\",
          "74: # Tests specifically for MS-Windows.",
          "",
          "[Removed Lines]",
          "71:  test83.out",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "79: SCRIPTS_GUI =",
          "83: # Keep test_alot*.res as the last one, sort the others.",
          "84: NEW_TESTS = test_arabic.res \\",
          "85:      test_arglist.res \\",
          "",
          "[Removed Lines]",
          "82: # Tests using runtest.vim.vim.",
          "",
          "[Added Lines]",
          "78: # Tests using runtest.vim",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "164:      test_startup_utf8.res \\",
          "165:      test_stat.res \\",
          "166:      test_substitute.res \\",
          "167:      test_syntax.res \\",
          "168:      test_system.res \\",
          "169:      test_tab.res \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "163:      test_swap.res \\",
          "",
          "---------------"
        ],
        "src/testdir/Make_amiga.mak||src/testdir/Make_amiga.mak": [
          "File: src/testdir/Make_amiga.mak -> src/testdir/Make_amiga.mak",
          "--- Hunk 1 ---",
          "[Context before]",
          "13: # test2  \"\\\\tmp\" doesn't work",
          "14: # test10 'errorformat' is different",
          "15: # test11 \"cat\" doesn't work properly",
          "17: # test52 only for Win32",
          "18: # test85 no Lua interface",
          "19: # test86, 87 no Python interface",
          "",
          "[Removed Lines]",
          "16: # test12 can't unlink a swap file",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/testdir/Make_dos.mak||src/testdir/Make_dos.mak": [
          "File: src/testdir/Make_dos.mak -> src/testdir/Make_dos.mak",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: # Omitted:",
          "13: # test2  \"\\\\tmp\" doesn't work.",
          "14: # test10 'errorformat' is different",
          "16: # test49 fails in various ways",
          "17: # test97 \\{ and \\$ are not escaped characters.",
          "",
          "[Removed Lines]",
          "15: # test12 can't unlink a swap file",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/testdir/Make_ming.mak||src/testdir/Make_ming.mak": [
          "File: src/testdir/Make_ming.mak -> src/testdir/Make_ming.mak",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: # Omitted:",
          "32: # test2  \"\\\\tmp\" doesn't work.",
          "33: # test10 'errorformat' is different",
          "35: # test97 \\{ and \\$ are not escaped characters",
          "37: SCRIPTS = $(SCRIPTS_ALL) $(SCRIPTS_MORE1) $(SCRIPTS_MORE4) $(SCRIPTS_WIN32)",
          "",
          "[Removed Lines]",
          "34: # test12 can't unlink a swap file",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/testdir/Make_vms.mms||src/testdir/Make_vms.mms": [
          "File: src/testdir/Make_vms.mms -> src/testdir/Make_vms.mms",
          "--- Hunk 1 ---",
          "[Context before]",
          "76: SCRIPT = test1.out test3.out \\",
          "77:        test14.out test15.out \\",
          "82:        test64.out test68.out test69.out \\",
          "83:        test72.out test77a.out test88.out \\",
          "85:        test_autocmd_option.out \\",
          "86:        test_breakindent.out \\",
          "87:        test_changelist.out \\",
          "",
          "[Removed Lines]",
          "78:        test29.out test30.out \\",
          "79:        test36.out test37.out test39.out \\",
          "80:        test40.out test42.out test44.out test45.out \\",
          "81:        test48.out test49.out test55.out \\",
          "84:        test94.out test95.out test99.out test108.out\\",
          "",
          "[Added Lines]",
          "78:        test29.out \\",
          "79:        test30.out test36.out test37.out test39.out \\",
          "80:        test42.out test44.out test48.out test49.out \\",
          "81:        test55.out \\",
          "84:        test94.out test95.out test99.out test108.out \\",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "107: #",
          "108: # test72: bug - Vim hangs at :rename (while rename works well otherwise)",
          "109: # test78: bug - Vim dies at :recover Xtest",
          "111: # test85: no Lua interface",
          "112: # test89: bug - findfile() does not work on VMS (just in the current directory)",
          "113: # test102: Just ODS-5 supports space and special chars in the filename.",
          "",
          "[Removed Lines]",
          "110: # test83: ?",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "119: .ENDIF",
          "121: .IFDEF WANT_UNIX",
          "123: .ENDIF",
          "125: .IFDEF WANT_WIN",
          "",
          "[Removed Lines]",
          "122: SCRIPT_UNIX = test10.out test12.out test17.out test27.out test49.out test73.out",
          "",
          "[Added Lines]",
          "121: SCRIPT_UNIX = test10.out test17.out test27.out test49.out test73.out",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "146: SCRIPT_GDIFF = test47.out",
          "147: .ENDIF",
          "153: .IFDEF HAVE_LUA",
          "154: SCRIPT_LUA = test85.out",
          "155: .ENDIF",
          "",
          "[Removed Lines]",
          "149: .IFDEF HAVE_ICONV",
          "150: SCRIPT_ICONV = test83.out",
          "151: .ENDIF",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "179:  -@ if \"''F$SEARCH(\"Xtest.*\")'\"    .NES. \"\" then delete/noconfirm/nolog Xtest.*.*",
          "181: all : clean nolog $(START_WITH) $(SCRIPT) $(SCRIPT_GUI) $(SCRIPT_UNIX) $(SCRIPT_WIN) $(SCRIPT_SPELL) $(SCRIPT_ODS5) $(SCRIPT_GZIP) \\",
          "183:  -@ write sys$output \" \"",
          "184:  -@ write sys$output \"-----------------------------------------------\"",
          "185:  -@ write sys$output \"                All done\"",
          "",
          "[Removed Lines]",
          "182:     $(SCRIPT_GDIFF) $(SCRIPT_MZSCH) $(SCRIPT_ICONV) $(SCRIPT_LUA) $(SCRIPT_PYTHON) nolog",
          "",
          "[Added Lines]",
          "177:     $(SCRIPT_GDIFF) $(SCRIPT_MZSCH) $(SCRIPT_LUA) $(SCRIPT_PYTHON) nolog",
          "",
          "---------------"
        ],
        "src/testdir/main.aap||src/testdir/main.aap": [
          "File: src/testdir/main.aap -> src/testdir/main.aap",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: Scripts = test1.out test2.out test3.out test6.out",
          "8:   test11.out",
          "10:   test18.out test21.out",
          "11:   test27.out test29.out test30.out",
          "12:   test36.out test37.out",
          "15:   test48.out test49.out test74.out",
          "17: ScriptsGUI = test16.out",
          "",
          "[Removed Lines]",
          "9:   test12.out  test13.out test14.out test15.out test17.out",
          "13:   test39.out test40.out test42.out",
          "14:   test44.out test45.out test46.out test47.out",
          "",
          "[Added Lines]",
          "9:   test13.out test14.out test15.out test17.out",
          "13:   test39.out test42.out",
          "14:   test44.out test46.out test47.out",
          "",
          "---------------"
        ],
        "src/testdir/test12.in||src/testdir/test12.in": [
          "File: src/testdir/test12.in -> src/testdir/test12.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/testdir/test12.ok||src/testdir/test12.ok": [
          "File: src/testdir/test12.ok -> src/testdir/test12.ok",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/testdir/test40.in||src/testdir/test40.in": [
          "File: src/testdir/test40.in -> src/testdir/test40.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/testdir/test40.ok||src/testdir/test40.ok": [
          "File: src/testdir/test40.ok -> src/testdir/test40.ok",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/testdir/test45.in||src/testdir/test45.in": [
          "File: src/testdir/test45.in -> src/testdir/test45.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/testdir/test45.ok||src/testdir/test45.ok": [
          "File: src/testdir/test45.ok -> src/testdir/test45.ok",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/testdir/test83.in||src/testdir/test83.in": [
          "File: src/testdir/test83.in -> src/testdir/test83.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/testdir/test83.ok||src/testdir/test83.ok": [
          "File: src/testdir/test83.ok -> src/testdir/test83.ok",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/testdir/test_autocmd.vim||src/testdir/test_autocmd.vim": [
          "File: src/testdir/test_autocmd.vim -> src/testdir/test_autocmd.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "917:   enew",
          "918:   unlet g:bname",
          "919: endfunc",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "920: \" Test for \"*Cmd\" autocommands",
          "921: func Test_Cmd_Autocmds()",
          "922:   call writefile(['start of Xxx', \"\\tabc2\", 'end of Xxx'], 'Xxx')",
          "924:   enew!",
          "925:   au BufReadCmd XtestA 0r Xxx|$del",
          "926:   edit XtestA   \" will read text of Xxd instead",
          "927:   call assert_equal('start of Xxx', getline(1))",
          "929:   au BufWriteCmd XtestA call append(line(\"$\"), \"write\")",
          "930:   write    \" will append a line to the file",
          "931:   call assert_equal('write', getline('$'))",
          "932:   call assert_fails('read XtestA', 'E484') \" should not read anything",
          "933:   call assert_equal('write', getline(4))",
          "935:   \" now we have:",
          "936:   \" 1 start of Xxx",
          "937:   \" 2  abc2",
          "938:   \" 3 end of Xxx",
          "939:   \" 4 write",
          "941:   au FileReadCmd XtestB '[r Xxx",
          "942:   2r XtestB   \" will read Xxx below line 2 instead",
          "943:   call assert_equal('start of Xxx', getline(3))",
          "945:   \" now we have:",
          "946:   \" 1 start of Xxx",
          "947:   \" 2  abc2",
          "948:   \" 3 start of Xxx",
          "949:   \" 4  abc2",
          "950:   \" 5 end of Xxx",
          "951:   \" 6 end of Xxx",
          "952:   \" 7 write",
          "954:   au FileWriteCmd XtestC '[,']copy $",
          "955:   normal 4GA1",
          "956:   4,5w XtestC   \" will copy lines 4 and 5 to the end",
          "957:   call assert_equal(\"\\tabc21\", getline(8))",
          "958:   call assert_fails('r XtestC', 'E484') \" should not read anything",
          "959:   call assert_equal(\"end of Xxx\", getline(9))",
          "961:   \" now we have:",
          "962:   \" 1 start of Xxx",
          "963:   \" 2  abc2",
          "964:   \" 3 start of Xxx",
          "965:   \" 4  abc21",
          "966:   \" 5 end of Xxx",
          "967:   \" 6 end of Xxx",
          "968:   \" 7 write",
          "969:   \" 8  abc21",
          "970:   \" 9 end of Xxx",
          "972:   let g:lines = []",
          "973:   au FileAppendCmd XtestD call extend(g:lines, getline(line(\"'[\"), line(\"']\")))",
          "974:   w >>XtestD   \" will add lines to 'lines'",
          "975:   call assert_equal(9, len(g:lines))",
          "976:   call assert_fails('$r XtestD', 'E484') \" should not read anything",
          "977:   call assert_equal(9, line('$'))",
          "978:   call assert_equal('end of Xxx', getline('$'))",
          "980:   au BufReadCmd XtestE 0r Xxx|$del",
          "981:   sp XtestE   \" split window with test.out",
          "982:   call assert_equal('end of Xxx', getline(3))",
          "984:   let g:lines = []",
          "985:   exe \"normal 2Goasdf\\<Esc>\\<C-W>\\<C-W>\"",
          "986:   au BufWriteCmd XtestE call extend(g:lines, getline(0, '$'))",
          "987:   wall    \" will write other window to 'lines'",
          "988:   call assert_equal(4, len(g:lines), g:lines)",
          "989:   call assert_equal('asdf', g:lines[2])",
          "991:   au! BufReadCmd",
          "992:   au! BufWriteCmd",
          "993:   au! FileReadCmd",
          "994:   au! FileWriteCmd",
          "995:   au! FileAppendCmd",
          "996:   %bwipe!",
          "997:   call delete('Xxx')",
          "998:   enew!",
          "999: endfunc",
          "",
          "---------------"
        ],
        "src/testdir/test_fold.vim||src/testdir/test_fold.vim": [
          "File: src/testdir/test_fold.vim -> src/testdir/test_fold.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "460:   call assert_equal(3, foldclosedend(2))",
          "461:   bwipe!",
          "462: endfunc",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "464: \" Various fold related tests",
          "466: \" Basic test if a fold can be created, opened, moving to the end and closed",
          "467: func Test_fold_manual()",
          "468:   enew!",
          "469:   set fdm=manual",
          "471:   let content = ['1 aa', '2 bb', '3 cc']",
          "472:   call append(0, content)",
          "473:   call cursor(1, 1)",
          "474:   normal zf2j",
          "475:   call assert_equal('1 aa', getline(foldclosed('.')))",
          "476:   normal zo",
          "477:   call assert_equal(-1, foldclosed('.'))",
          "478:   normal ]z",
          "479:   call assert_equal('3 cc', getline('.'))",
          "480:   normal zc",
          "481:   call assert_equal('1 aa', getline(foldclosed('.')))",
          "483:   set fdm&",
          "484:   enew!",
          "485: endfunc",
          "487: \" test folding with markers.",
          "488: func Test_fold_marker()",
          "489:   enew!",
          "490:   set fdm=marker fdl=1 fdc=3",
          "492:   let content = ['4 dd {{{', '5 ee {{{ }}}', '6 ff }}}']",
          "493:   call append(0, content)",
          "494:   call cursor(2, 1)",
          "495:   call assert_equal(2, foldlevel('.'))",
          "496:   normal [z",
          "497:   call assert_equal(1, foldlevel('.'))",
          "498:   exe \"normal jo{{ \\<Esc>r{jj\"",
          "499:   call assert_equal(1, foldlevel('.'))",
          "500:   normal kYpj",
          "501:   call assert_equal(0, foldlevel('.'))",
          "503:   set fdm& fdl& fdc&",
          "504:   enew!",
          "505: endfunc",
          "507: \" test folding with indent",
          "508: func Test_fold_indent()",
          "509:   enew!",
          "510:   set fdm=indent sw=2",
          "512:   let content = ['1 aa', '2 bb', '3 cc']",
          "513:   call append(0, content)",
          "514:   call cursor(2, 1)",
          "515:   exe \"normal i  \\<Esc>jI    \"",
          "516:   call assert_equal(2, foldlevel('.'))",
          "517:   normal k",
          "518:   call assert_equal(1, foldlevel('.'))",
          "520:   set fdm& sw&",
          "521:   enew!",
          "522: endfunc",
          "524: \" test syntax folding",
          "525: func Test_fold_syntax()",
          "526:   if !has('syntax')",
          "527:     return",
          "528:   endif",
          "530:   enew!",
          "531:   set fdm=syntax fdl=0",
          "533:   syn region Hup start=\"dd\" end=\"ii\" fold contains=Fd1,Fd2,Fd3",
          "534:   syn region Fd1 start=\"ee\" end=\"ff\" fold contained",
          "535:   syn region Fd2 start=\"gg\" end=\"hh\" fold contained",
          "536:   syn region Fd3 start=\"commentstart\" end=\"commentend\" fold contained",
          "537:   let content = ['3 cc', '4 dd {{{', '5 ee {{{ }}}', '{{{{', '6 ff }}}',",
          "538:        \\ '6 ff }}}', '7 gg', '8 hh', '9 ii']",
          "539:   call append(0, content)",
          "540:   normal Gzk",
          "541:   call assert_equal('9 ii', getline('.'))",
          "542:   normal k",
          "543:   call assert_equal('3 cc', getline('.'))",
          "544:   exe \"normal jAcommentstart   \\<Esc>Acommentend\"",
          "545:   set fdl=1",
          "546:   normal 3j",
          "547:   call assert_equal('7 gg', getline('.'))",
          "548:   set fdl=0",
          "549:   exe \"normal zO\\<C-L>j\"",
          "550:   call assert_equal('8 hh', getline('.'))",
          "551:   syn clear Fd1 Fd2 Fd3 Hup",
          "553:   set fdm& fdl&",
          "554:   enew!",
          "555: endfunc",
          "557: func Flvl()",
          "558:   let l = getline(v:lnum)",
          "559:   if l =~ \"bb$\"",
          "560:     return 2",
          "561:   elseif l =~ \"gg$\"",
          "562:     return \"s1\"",
          "563:   elseif l =~ \"ii$\"",
          "564:     return \">2\"",
          "565:   elseif l =~ \"kk$\"",
          "566:     return \"0\"",
          "567:   endif",
          "568:   return \"=\"",
          "569: endfun",
          "571: \" test expression folding",
          "572: func Test_fold_expr()",
          "573:   enew!",
          "574:   set fdm=expr fde=Flvl()",
          "576:   let content = ['1 aa',",
          "577:        \\ '2 bb',",
          "578:        \\ '3 cc',",
          "579:        \\ '4 dd {{{commentstart  commentend',",
          "580:        \\ '5 ee {{{ }}}',",
          "581:        \\ '{{{',",
          "582:        \\ '6 ff }}}',",
          "583:        \\ '6 ff }}}',",
          "584:        \\ '  7 gg',",
          "585:        \\ '    8 hh',",
          "586:        \\ '9 ii',",
          "587:        \\ 'a jj',",
          "588:        \\ 'b kk']",
          "589:   call append(0, content)",
          "590:   call cursor(1, 1)",
          "591:   exe \"normal /bb$\\<CR>\"",
          "592:   call assert_equal(2, foldlevel('.'))",
          "593:   exe \"normal /hh$\\<CR>\"",
          "594:   call assert_equal(1, foldlevel('.'))",
          "595:   exe \"normal /ii$\\<CR>\"",
          "596:   call assert_equal(2, foldlevel('.'))",
          "597:   exe \"normal /kk$\\<CR>\"",
          "598:   call assert_equal(0, foldlevel('.'))",
          "600:   set fdm& fde&",
          "601:   enew!",
          "602: endfunc",
          "604: \" Bug with fdm=indent and moving folds",
          "605: \" Moving a fold a few times, messes up the folds below the moved fold.",
          "606: \" Fixed by 7.4.700",
          "607: func Test_fold_move()",
          "608:   enew!",
          "609:   set fdm=indent sw=2 fdl=0",
          "611:   let content = ['', '', 'Line1', '  Line2', '  Line3',",
          "612:        \\ 'Line4', '  Line5', '  Line6',",
          "613:        \\ 'Line7', '  Line8', '  Line9']",
          "614:   call append(0, content)",
          "615:   normal zM",
          "616:   call cursor(4, 1)",
          "617:   move 2",
          "618:   move 1",
          "619:   call assert_equal(7, foldclosed(7))",
          "620:   call assert_equal(8, foldclosedend(7))",
          "621:   call assert_equal(0, foldlevel(9))",
          "622:   call assert_equal(10, foldclosed(10))",
          "623:   call assert_equal(11, foldclosedend(10))",
          "624:   call assert_equal('+--  2 lines: Line2', foldtextresult(2))",
          "625:   call assert_equal('+--  2 lines: Line8', foldtextresult(10))",
          "627:   set fdm& sw& fdl&",
          "628:   enew!",
          "629: endfunc",
          "",
          "---------------"
        ],
        "src/testdir/test_swap.vim||src/testdir/test_swap.vim": [
          "File: src/testdir/test_swap.vim -> src/testdir/test_swap.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: \" Tests for the swap feature",
          "3: \" Tests for 'directory' option.",
          "4: func Test_swap_directory()",
          "5:   if !has(\"unix\")",
          "6:     return",
          "7:   endif",
          "8:   let content = ['start of testfile',",
          "9:        \\ 'line 2 Abcdefghij',",
          "10:        \\ 'line 3 Abcdefghij',",
          "11:        \\ 'end of testfile']",
          "12:   call writefile(content, 'Xtest1')",
          "14:   \"  '.', swap file in the same directory as file",
          "15:   set dir=.,~",
          "17:   \" Verify that the swap file doesn't exist in the current directory",
          "18:   call assert_equal([], glob(\".Xtest1*.swp\", 1, 1, 1))",
          "19:   edit Xtest1",
          "20:   let swfname = split(execute(\"swapname\"))[0]",
          "21:   call assert_equal([swfname], glob(swfname, 1, 1, 1))",
          "23:   \" './dir', swap file in a directory relative to the file",
          "24:   set dir=./Xtest2,.,~",
          "26:   call mkdir(\"Xtest2\")",
          "27:   edit Xtest1",
          "28:   call assert_equal([], glob(swfname, 1, 1, 1))",
          "29:   let swfname = \"Xtest2/Xtest1.swp\"",
          "30:   call assert_equal(swfname, split(execute(\"swapname\"))[0])",
          "31:   call assert_equal([swfname], glob(\"Xtest2/*\", 1, 1, 1))",
          "33:   \" 'dir', swap file in directory relative to the current dir",
          "34:   set dir=Xtest.je,~",
          "36:   call mkdir(\"Xtest.je\")",
          "37:   call writefile(content, 'Xtest2/Xtest3')",
          "38:   edit Xtest2/Xtest3",
          "39:   call assert_equal([\"Xtest2/Xtest3\"], glob(\"Xtest2/*\", 1, 1, 1))",
          "40:   let swfname = \"Xtest.je/Xtest3.swp\"",
          "41:   call assert_equal(swfname, split(execute(\"swapname\"))[0])",
          "42:   call assert_equal([swfname], glob(\"Xtest.je/*\", 1, 1, 1))",
          "44:   set dir&",
          "45:   call delete(\"Xtest1\")",
          "46:   call delete(\"Xtest2\", \"rf\")",
          "47:   call delete(\"Xtest.je\", \"rf\")",
          "48: endfunc",
          "",
          "---------------"
        ],
        "src/testdir/test_tagjump.vim||src/testdir/test_tagjump.vim": [
          "File: src/testdir/test_tagjump.vim -> src/testdir/test_tagjump.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "174:   %bwipe!",
          "175: endfunc",
          "177: \" vim: shiftwidth=2 sts=2 expandtab",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "177: \" Tests for tag search with !_TAG_FILE_ENCODING.",
          "178: \" Depends on the test83-tags2 and test83-tags3 files.",
          "179: func Test_tag_file_encoding()",
          "180:   if has('vms')",
          "181:     return",
          "182:   endif",
          "184:   if !has('iconv') || iconv(\"\\x82\\x60\", \"cp932\", \"utf-8\") != \"\\uff21\"",
          "185:     return",
          "186:   endif",
          "188:   let save_enc = &encoding",
          "189:   set encoding=utf8",
          "191:   let content = ['text for tags1', 'abcdefghijklmnopqrs']",
          "192:   call writefile(content, 'Xtags1.txt')",
          "193:   let content = ['text for tags2', '\uff21\uff22\uff23']",
          "194:   call writefile(content, 'Xtags2.txt')",
          "195:   let content = ['text for tags3', '\uff21\uff22\uff23']",
          "196:   call writefile(content, 'Xtags3.txt')",
          "197:   let content = ['!_TAG_FILE_ENCODING utf-8 //', 'abcdefghijklmnopqrs Xtags1.txt /abcdefghijklmnopqrs']",
          "198:   call writefile(content, 'Xtags1')",
          "200:   \" case1:",
          "201:   new",
          "202:   set tags=Xtags1",
          "203:   tag abcdefghijklmnopqrs",
          "204:   call assert_equal('Xtags1.txt', expand('%:t'))",
          "205:   call assert_equal('abcdefghijklmnopqrs', getline('.'))",
          "206:   close",
          "208:   \" case2:",
          "209:   new",
          "210:   set tags=test83-tags2",
          "211:   tag /.\uff22\uff23",
          "212:   call assert_equal('Xtags2.txt', expand('%:t'))",
          "213:   call assert_equal('\uff21\uff22\uff23', getline('.'))",
          "214:   close",
          "216:   \" case3:",
          "217:   new",
          "218:   set tags=test83-tags3",
          "219:   tag abc50",
          "220:   call assert_equal('Xtags3.txt', expand('%:t'))",
          "221:   call assert_equal('\uff21\uff22\uff23', getline('.'))",
          "222:   close",
          "224:   set tags&",
          "225:   let &encoding = save_enc",
          "226:   call delete('Xtags1.txt')",
          "227:   call delete('Xtags2.txt')",
          "228:   call delete('Xtags3.txt')",
          "229:   call delete('Xtags1')",
          "230: endfunc",
          "",
          "---------------"
        ],
        "src/version.c||src/version.c": [
          "File: src/version.c -> src/version.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "762: static int included_patches[] =",
          "765:     1252,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "765:     1253,",
          "",
          "---------------"
        ]
      }
    }
  ]
}