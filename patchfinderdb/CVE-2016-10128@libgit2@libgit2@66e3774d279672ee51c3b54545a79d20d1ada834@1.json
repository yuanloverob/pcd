{
  "cve_id": "CVE-2016-10128",
  "cve_desc": "Buffer overflow in the git_pkt_parse_line function in transports/smart_pkt.c in the Git Smart Protocol support in libgit2 before 0.24.6 and 0.25.x before 0.25.1 allows remote attackers to have unspecified impact via a crafted non-flush packet.",
  "repo": "libgit2/libgit2",
  "patch_hash": "66e3774d279672ee51c3b54545a79d20d1ada834",
  "patch_info": {
    "commit_hash": "66e3774d279672ee51c3b54545a79d20d1ada834",
    "repo": "libgit2/libgit2",
    "commit_url": "https://github.com/libgit2/libgit2/commit/66e3774d279672ee51c3b54545a79d20d1ada834",
    "files": [
      "src/transports/smart_pkt.c"
    ],
    "message": "smart_pkt: verify packet length exceeds PKT_LEN_SIZE\n\nEach packet line in the Git protocol is prefixed by a four-byte\nlength of how much data will follow, which we parse in\n`git_pkt_parse_line`. The transmitted length can either be equal\nto zero in case of a flush packet or has to be at least of length\nfour, as it also includes the encoded length itself. Not\nchecking this may result in a buffer overflow as we directly pass\nthe length to functions which accept a `size_t` length as\nparameter.\n\nFix the issue by verifying that non-flush packets have at least a\nlength of `PKT_LEN_SIZE`.",
    "before_after_code_files": [
      "src/transports/smart_pkt.c||src/transports/smart_pkt.c"
    ]
  },
  "patch_diff": {
    "src/transports/smart_pkt.c||src/transports/smart_pkt.c": [
      "File: src/transports/smart_pkt.c -> src/transports/smart_pkt.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "427:  if (bufflen > 0 && bufflen < (size_t)len)",
      "428:   return GIT_EBUFS;",
      "430:  line += PKT_LEN_SIZE;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "435:  if (len != 0 && len < PKT_LEN_SIZE)",
      "436:   return GIT_ERROR;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "2ac57aa89bde788173b54bd153430369deec64c0",
      "candidate_info": {
        "commit_hash": "2ac57aa89bde788173b54bd153430369deec64c0",
        "repo": "libgit2/libgit2",
        "commit_url": "https://github.com/libgit2/libgit2/commit/2ac57aa89bde788173b54bd153430369deec64c0",
        "files": [
          "tests/online/badssl.c"
        ],
        "message": "https: don't test that RC4 is invalid\n\nNone of our crypto backends actually reject RC4 as a cipher so don't\ntest for it and instead keep it as something we'd like to do.",
        "before_after_code_files": [
          "tests/online/badssl.c||tests/online/badssl.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libgit2/libgit2/pull/4076"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "tests/online/badssl.c||tests/online/badssl.c": [
          "File: tests/online/badssl.c -> tests/online/badssl.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "67:  git_clone_options opts = GIT_CLONE_OPTIONS_INIT;",
          "68:  opts.fetch_opts.callbacks.certificate_check = cert_check_assert_invalid;",
          "70:  if (!g_has_ssl)",
          "71:   cl_skip();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "71:  cl_skip();",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ccee8cabc3fd187046bbfccb407de95dafc310f6",
      "candidate_info": {
        "commit_hash": "ccee8cabc3fd187046bbfccb407de95dafc310f6",
        "repo": "libgit2/libgit2",
        "commit_url": "https://github.com/libgit2/libgit2/commit/ccee8cabc3fd187046bbfccb407de95dafc310f6",
        "files": [
          "src/transports/smart_pkt.c"
        ],
        "message": "smart_pkt: verify packet length exceeds PKT_LEN_SIZE\n\nEach packet line in the Git protocol is prefixed by a four-byte\nlength of how much data will follow, which we parse in\n`git_pkt_parse_line`. The transmitted length can either be equal\nto zero in case of a flush packet or has to be at least of length\nfour, as it also includes the encoded length itself. Not\nchecking this may result in a buffer overflow as we directly pass\nthe length to functions which accept a `size_t` length as\nparameter.\n\nFix the issue by verifying that non-flush packets have at least a\nlength of `PKT_LEN_SIZE`.",
        "before_after_code_files": [
          "src/transports/smart_pkt.c||src/transports/smart_pkt.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/transports/smart_pkt.c||src/transports/smart_pkt.c"
          ],
          "candidate": [
            "src/transports/smart_pkt.c||src/transports/smart_pkt.c"
          ]
        }
      },
      "candidate_diff": {
        "src/transports/smart_pkt.c||src/transports/smart_pkt.c": [
          "File: src/transports/smart_pkt.c -> src/transports/smart_pkt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "427:  if (bufflen > 0 && bufflen < (size_t)len)",
          "428:   return GIT_EBUFS;",
          "430:  line += PKT_LEN_SIZE;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "435:  if (len != 0 && len < PKT_LEN_SIZE)",
          "436:   return GIT_ERROR;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4ac39c76c0153d1ee6889a0984c39e97731684b2",
      "candidate_info": {
        "commit_hash": "4ac39c76c0153d1ee6889a0984c39e97731684b2",
        "repo": "libgit2/libgit2",
        "commit_url": "https://github.com/libgit2/libgit2/commit/4ac39c76c0153d1ee6889a0984c39e97731684b2",
        "files": [
          "src/transports/smart_pkt.c"
        ],
        "message": "smart_pkt: verify packet length exceeds PKT_LEN_SIZE\n\nEach packet line in the Git protocol is prefixed by a four-byte\nlength of how much data will follow, which we parse in\n`git_pkt_parse_line`. The transmitted length can either be equal\nto zero in case of a flush packet or has to be at least of length\nfour, as it also includes the encoded length itself. Not\nchecking this may result in a buffer overflow as we directly pass\nthe length to functions which accept a `size_t` length as\nparameter.\n\nFix the issue by verifying that non-flush packets have at least a\nlength of `PKT_LEN_SIZE`.",
        "before_after_code_files": [
          "src/transports/smart_pkt.c||src/transports/smart_pkt.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/transports/smart_pkt.c||src/transports/smart_pkt.c"
          ],
          "candidate": [
            "src/transports/smart_pkt.c||src/transports/smart_pkt.c"
          ]
        }
      },
      "candidate_diff": {
        "src/transports/smart_pkt.c||src/transports/smart_pkt.c": [
          "File: src/transports/smart_pkt.c -> src/transports/smart_pkt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "427:  if (bufflen > 0 && bufflen < (size_t)len)",
          "428:   return GIT_EBUFS;",
          "430:  line += PKT_LEN_SIZE;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "435:  if (len != 0 && len < PKT_LEN_SIZE)",
          "436:   return GIT_ERROR;",
          "",
          "---------------"
        ]
      }
    }
  ]
}