{
  "cve_id": "CVE-2019-19645",
  "cve_desc": "alter.c in SQLite through 3.30.1 allows attackers to trigger infinite recursion via certain types of self-referential views in conjunction with ALTER TABLE statements.",
  "repo": "sqlite/sqlite",
  "patch_hash": "38096961c7cd109110ac21d3ed7dad7e0cb0ae06",
  "patch_info": {
    "commit_hash": "38096961c7cd109110ac21d3ed7dad7e0cb0ae06",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/38096961c7cd109110ac21d3ed7dad7e0cb0ae06",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/alter.c",
      "src/build.c",
      "src/sqliteInt.h",
      "test/altertab3.test"
    ],
    "message": "Avoid infinite recursion in the ALTER TABLE code when a view contains an unused CTE that references, directly or indirectly, the view itself.\n\nFossilOrigin-Name: 1d2e53a39b87e364685e21de137655b6eee725e4c6d27fc90865072d7c5892b5",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/alter.c||src/alter.c",
      "src/build.c||src/build.c",
      "src/sqliteInt.h||src/sqliteInt.h",
      "test/altertab3.test||test/altertab3.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: c5d44143599f3fe98492b2b900fa3d77925c7be545096251055ceeab899a41f1",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/alter.c||src/alter.c": [
      "File: src/alter.c -> src/alter.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "760:   Parse *pParse = pWalker->pParse;",
      "761:   int i;",
      "762:   if( pParse->nErr ) return WRC_Abort;",
      "763:   if( ALWAYS(p->pEList) ){",
      "764:     ExprList *pList = p->pEList;",
      "765:     for(i=0; i<pList->nExpr; i++){",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "763:   if( p->selFlags & SF_View ) return WRC_Prune;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "853: static int renameColumnSelectCb(Walker *pWalker, Select *p){",
      "854:   renameWalkWith(pWalker, p);",
      "855:   return WRC_Continue;",
      "856: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "855:   if( p->selFlags & SF_View ) return WRC_Prune;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1316:   if( sParse.pNewTable ){",
      "1317:     Select *pSelect = sParse.pNewTable->pSelect;",
      "1318:     if( pSelect ){",
      "1319:       sParse.rc = SQLITE_OK;",
      "1321:       rc = (db->mallocFailed ? SQLITE_NOMEM : sParse.rc);",
      "1322:       if( rc==SQLITE_OK ){",
      "1323:         sqlite3WalkSelect(&sWalker, pSelect);",
      "",
      "[Removed Lines]",
      "1320:       sqlite3SelectPrep(&sParse, sParse.pNewTable->pSelect, 0);",
      "",
      "[Added Lines]",
      "1321:       pSelect->selFlags &= ~SF_View;",
      "1323:       sqlite3SelectPrep(&sParse, pSelect, 0);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1434:   int i;",
      "1435:   RenameCtx *p = pWalker->u.pRename;",
      "1436:   SrcList *pSrc = pSelect->pSrc;",
      "1437:   if( pSrc==0 ){",
      "1438:     assert( pWalker->pParse->db->mallocFailed );",
      "1439:     return WRC_Abort;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1440:   if( pSelect->selFlags & SF_View ) return WRC_Prune;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1514:         if( pTab->pSelect ){",
      "1515:           if( isLegacy==0 ){",
      "1516:             NameContext sNC;",
      "1517:             memset(&sNC, 0, sizeof(sNC));",
      "1518:             sNC.pParse = &sParse;",
      "1520:             sqlite3SelectPrep(&sParse, pTab->pSelect, &sNC);",
      "1521:             if( sParse.nErr ) rc = sParse.rc;",
      "1522:             sqlite3WalkSelect(&sWalker, pTab->pSelect);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1520:             Select *pSelect = pTab->pSelect;",
      "1525:             assert( pSelect->selFlags & SF_View );",
      "1526:             pSelect->selFlags &= ~SF_View;",
      "",
      "---------------"
    ],
    "src/build.c||src/build.c": [
      "File: src/build.c -> src/build.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2488:   if( IN_RENAME_OBJECT ){",
      "2489:     p->pSelect = pSelect;",
      "2490:     pSelect = 0;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2488:   pSelect->selFlags |= SF_View;",
      "",
      "---------------"
    ],
    "src/sqliteInt.h||src/sqliteInt.h": [
      "File: src/sqliteInt.h -> src/sqliteInt.h"
    ],
    "test/altertab3.test||test/altertab3.test": [
      "File: test/altertab3.test -> test/altertab3.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "487:   ALTER TABLE a RENAME a TO b;",
      "488: }",
      "491: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "490: #------------------------------------------------------------------------",
      "491: #",
      "492: reset_db",
      "493: do_execsql_test 22.1 {",
      "494:   CREATE TABLE t1(a);",
      "495:   CREATE VIEW v2(b) AS SELECT * FROM v2;",
      "496: }",
      "498: do_catchsql_test 22.2 {",
      "499:   ALTER TABLE t1 RENAME TO t4;",
      "500: } {1 {error in view v2: view v2 is circularly defined}}",
      "502: do_execsql_test 22.3 {",
      "503:   DROP VIEW v2;",
      "504:   CREATE VIEW v2(b) AS WITH t3 AS (SELECT b FROM v2) SELECT * FROM t3;",
      "505: }",
      "507: breakpoint",
      "508: do_catchsql_test 22.4 {",
      "509:   ALTER TABLE t1 RENAME TO t4;",
      "510: } {1 {error in view v2: view v2 is circularly defined}}",
      "512: do_execsql_test 22.5 {",
      "513:   DROP VIEW v2;",
      "514:   CREATE VIEW v2(b) AS WITH t3 AS (SELECT b FROM v2) VALUES(1);",
      "515: }",
      "517: do_catchsql_test 22.6 {",
      "518:   ALTER TABLE t1 RENAME TO t4;",
      "519: } {0 {}}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "0ad7aa818283c82c550cdf18c7f897341b66f39f",
      "candidate_info": {
        "commit_hash": "0ad7aa818283c82c550cdf18c7f897341b66f39f",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/0ad7aa818283c82c550cdf18c7f897341b66f39f",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c",
          "test/join.test",
          "test/with1.test"
        ],
        "message": "Limit the size of SrcList objects to 200 entries (compile-time configurable using -DSQLITE_MAX_SRCLIST=n).  The maximum number of tables in a join has always been 64, so this is not a real constraint on capability.  Limiting the size of a SrcList prevents DOS attacks (discovered by OSSFuzz) using crazy nexted CTE joins.\n\nFossilOrigin-Name: 7cac614d5df55eb092b863163483b6782b942b21bd15fd787576fef5619fa849",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c",
          "test/join.test||test/join.test",
          "test/with1.test||test/with1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/build.c||src/build.c"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/build.c||src/build.c"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 9a425051e7ba59e797636f5cf32b5f6efafdb21c8d5300e099b8008b829c1439",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3823:   return -1;",
          "3824: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3834: #ifndef SQLITE_MAX_SRCLIST",
          "3835: # define SQLITE_MAX_SRCLIST 200",
          "3836: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3861:     SrcList *pNew;",
          "3862:     int nAlloc = pSrc->nSrc*2+nExtra;",
          "3863:     int nGot;",
          "3864:     pNew = sqlite3DbRealloc(db, pSrc,",
          "3865:                sizeof(*pSrc) + (nAlloc-1)*sizeof(pSrc->a[0]) );",
          "3866:     if( pNew==0 ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3877:     if( pSrc->nSrc+nExtra>=SQLITE_MAX_SRCLIST ){",
          "3883:       sqlite3OomFault(db);",
          "3884:       return pSrc;",
          "3885:     }",
          "3886:     if( nAlloc>SQLITE_MAX_SRCLIST ) nAlloc = SQLITE_MAX_SRCLIST;",
          "",
          "---------------"
        ],
        "test/join.test||test/join.test": [
          "File: test/join.test -> test/join.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "671: jointest join-12.6 66 {1 {at most 64 tables in a join}}",
          "672: jointest join-12.7 127 {1 {at most 64 tables in a join}}",
          "673: jointest join-12.8 128 {1 {at most 64 tables in a join}}",
          "690: #-------------------------------------------------------------------------",
          "",
          "[Removed Lines]",
          "674: jointest join-12.9 1000 {1 {at most 64 tables in a join}}",
          "676: # If SQLite is built with SQLITE_MEMDEBUG, then the huge number of realloc()",
          "677: # calls made by the following test cases are too time consuming to run.",
          "678: # Without SQLITE_MEMDEBUG, realloc() is fast enough that these are not",
          "679: # a problem.",
          "680: ifcapable pragma&&compileoption_diags {",
          "681:   if {[lsearch [db eval {PRAGMA compile_options}] MEMDEBUG]<0} {",
          "682:     jointest join-12.10 65534 {1 {at most 64 tables in a join}}",
          "683:     jointest join-12.11 65535 {1 {too many references to \"t14\": max 65535}}",
          "684:     jointest join-12.12 65536 {1 {too many references to \"t14\": max 65535}}",
          "685:     jointest join-12.13 65537 {1 {too many references to \"t14\": max 65535}}",
          "686:   }",
          "687: }",
          "",
          "[Added Lines]",
          "675: # As of 2019-01-17, the number of elements in a SrcList is limited",
          "676: # to 200.  The following tests still run, but the answer is now",
          "677: # an SQLITE_NOMEM error.",
          "678: #",
          "679: # jointest join-12.9 1000 {1 {at most 64 tables in a join}}",
          "680: #",
          "681: #  If SQLite is built with SQLITE_MEMDEBUG, then the huge number of realloc()",
          "682: #  calls made by the following test cases are too time consuming to run.",
          "683: #  Without SQLITE_MEMDEBUG, realloc() is fast enough that these are not",
          "684: #  a problem.",
          "685: #",
          "686: # ifcapable pragma&&compileoption_diags {",
          "687: #    if {[lsearch [db eval {PRAGMA compile_options}] MEMDEBUG]<0} {",
          "688: #     jointest join-12.10 65534 {1 {at most 64 tables in a join}}",
          "689: #     jointest join-12.11 65535 {1 {too many references to \"t14\": max 65535}}",
          "690: #     jointest join-12.12 65536 {1 {too many references to \"t14\": max 65535}}",
          "691: #     jointest join-12.13 65537 {1 {too many references to \"t14\": max 65535}}",
          "692: #   }",
          "693: # }",
          "",
          "---------------"
        ],
        "test/with1.test||test/with1.test": [
          "File: test/with1.test -> test/with1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1071:              SELECT * FROM Table0  NATURAL JOIN  Table0));",
          "1072: } {{}}",
          "1074: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1074: # 2019-01-17",
          "1075: # Make sure crazy nexted CTE joins terminate with an error quickly.",
          "1076: #",
          "1077: do_catchsql_test 22.1 {",
          "1078:   WITH RECURSIVE c AS (",
          "1079:      WITH RECURSIVE c AS (",
          "1080:         WITH RECURSIVE c AS (",
          "1081:            WITH RECURSIVE c AS (",
          "1082:                WITH  c AS (VALUES(0))",
          "1083:                SELECT 1 FROM c LEFT JOIN c ON ltrim(1)",
          "1084:            )",
          "1085:            SELECT 1 FROM c,c,c,c,c,c,c,c,c",
          "1086:         )",
          "1087:         SELECT  2 FROM c,c,c,c,c,c,c,c,c",
          "1088:      )",
          "1089:      SELECT 3 FROM c,c,c,c,c,c,c,c,c",
          "1090:   )",
          "1091:   SELECT 4 FROM c,c,c,c,c,c,c,c,c;",
          "1092: } {1 {out of memory}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c930b405f0717d5f8626dd846f3ab1d2a7243195",
      "candidate_info": {
        "commit_hash": "c930b405f0717d5f8626dd846f3ab1d2a7243195",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/c930b405f0717d5f8626dd846f3ab1d2a7243195",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/func.c"
        ],
        "message": "Performance improvement on the instr() function, especially for large haystacks.\n\nFossilOrigin-Name: ce51f1a2b6a1789a5876e01cf829e45d84f3851d135a2fa5c44a56f948673a60",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/func.c||src/func.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 63eb803dbc27077007dbee8def659d1523724eb73f1def1cdb68027e5c20843a",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/func.c||src/func.c": [
          "File: src/func.c -> src/func.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "201:   int typeHaystack, typeNeedle;",
          "202:   int N = 1;",
          "203:   int isText;",
          "205:   UNUSED_PARAMETER(argc);",
          "206:   typeHaystack = sqlite3_value_type(argv[0]);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "204:   unsigned char firstChar;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "219:       isText = 1;",
          "220:     }",
          "221:     if( zNeedle==0 || (nHaystack && zHaystack==0) ) return;",
          "223:       N++;",
          "224:       do{",
          "225:         nHaystack--;",
          "",
          "[Removed Lines]",
          "222:     while( nNeedle<=nHaystack && memcmp(zHaystack, zNeedle, nNeedle)!=0 ){",
          "",
          "[Added Lines]",
          "223:     firstChar = zNeedle[0];",
          "224:     while( nNeedle<=nHaystack",
          "225:        && (zHaystack[0]!=firstChar || memcmp(zHaystack, zNeedle, nNeedle)!=0)",
          "226:     ){",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "09ea1256ecc31185dbc61ef61ee6be8fad5c9e02",
      "candidate_info": {
        "commit_hash": "09ea1256ecc31185dbc61ef61ee6be8fad5c9e02",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/09ea1256ecc31185dbc61ef61ee6be8fad5c9e02",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in",
          "src/test1.c"
        ],
        "message": "Improvement to the hexdb interpreter built into the CLI and into the TCL test harness: Round the \"size\" up to the next multiple of the \"pagesize\".\n\nFossilOrigin-Name: 9ec92939cb2d2c96ae15bc496feed233ce31424c25a6bf86ace7e0ef3eedec5b",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in",
          "src/test1.c||src/test1.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 7ef7b23cbb1b9ace9f853238d9133320c153e6c3417e6823ab6394ee1fe56358",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "3891:   rc = sscanf(zLine, \"| size %d pagesize %d\", &n, &pgsz);",
          "3892:   if( rc!=2 ) goto readHexDb_error;",
          "3893:   if( n<0 ) goto readHexDb_error;",
          "3894:   a = sqlite3_malloc( n ? n : 1 );",
          "3895:   if( a==0 ){",
          "3896:     utf8_printf(stderr, \"Out of memory!\\n\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3894:   if( pgsz<512 || pgsz>65536 || (pgsz&(pgsz-1))!=0 ) goto readHexDb_error;",
          "",
          "---------------"
        ],
        "src/test1.c||src/test1.c": [
          "File: src/test1.c -> src/test1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "7740:       int pgsz;",
          "7741:       rc = sscanf(zIn+i, \"| size %d pagesize %d\", &n, &pgsz);",
          "7742:       if( rc!=2 ) continue;",
          "7743:       if( n<512 ){",
          "7744:         Tcl_AppendResult(interp, \"bad 'size' field\", (void*)0);",
          "7745:         return TCL_ERROR;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7743:       if( pgsz<512 || pgsz>65536 || (pgsz&(pgsz-1))!=0 ){",
          "7744:         Tcl_AppendResult(interp, \"bad 'pagesize' field\", (void*)0);",
          "7745:         return TCL_ERROR;",
          "7746:       }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b182588c8e0cdbafc5987df0a919d29021d1ba58",
      "candidate_info": {
        "commit_hash": "b182588c8e0cdbafc5987df0a919d29021d1ba58",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/b182588c8e0cdbafc5987df0a919d29021d1ba58",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in"
        ],
        "message": "Have \".recover\" handle \"\\r\" and \"\\n\" in the same way as \".dump\".\n\nFossilOrigin-Name: f95f0f02ab6c6cf45f25b613c7ab57f68249689d0a9eddf4c9518ddf0edad365",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 8dcc1d89d955bf58c80a8c30a37960f0cf95719953951a92626cc332cc75ec60",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "3934: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3950: static void shellEscapeCrnl(",
          "3951:   sqlite3_context *context,",
          "3952:   int argc,",
          "3953:   sqlite3_value **argv",
          "3954: ){",
          "3955:   const char *zText = (const char*)sqlite3_value_text(argv[0]);",
          "3956:   if( zText[0]=='\\'' ){",
          "3957:     int nText = sqlite3_value_bytes(argv[0]);",
          "3958:     int i;",
          "3959:     char zBuf1[20];",
          "3960:     char zBuf2[20];",
          "3961:     const char *zNL = 0;",
          "3962:     const char *zCR = 0;",
          "3963:     int nCR = 0;",
          "3964:     int nNL = 0;",
          "3966:     for(i=0; zText[i]; i++){",
          "3967:       if( zNL==0 && zText[i]=='\\n' ){",
          "3968:         zNL = unused_string(zText, \"\\\\n\", \"\\\\012\", zBuf1);",
          "3969:         nNL = (int)strlen(zNL);",
          "3970:       }",
          "3971:       if( zCR==0 && zText[i]=='\\r' ){",
          "3972:         zCR = unused_string(zText, \"\\\\r\", \"\\\\015\", zBuf2);",
          "3973:         nCR = (int)strlen(zCR);",
          "3974:       }",
          "3975:     }",
          "3977:     if( zNL || zCR ){",
          "3978:       int iOut = 0;",
          "3979:       i64 nMax = (nNL > nCR) ? nNL : nCR;",
          "3980:       i64 nAlloc = nMax * nText + (nMax+12)*2;",
          "3981:       char *zOut = (char*)sqlite3_malloc64(nAlloc);",
          "3982:       if( zOut==0 ){",
          "3983:         sqlite3_result_error_nomem(context);",
          "3984:         return;",
          "3985:       }",
          "3987:       if( zNL && zCR ){",
          "3988:         memcpy(&zOut[iOut], \"replace(replace(\", 16);",
          "3989:         iOut += 16;",
          "3990:       }else{",
          "3991:         memcpy(&zOut[iOut], \"replace(\", 8);",
          "3992:         iOut += 8;",
          "3993:       }",
          "3994:       for(i=0; zText[i]; i++){",
          "3995:         if( zText[i]=='\\n' ){",
          "3996:           memcpy(&zOut[iOut], zNL, nNL);",
          "3997:           iOut += nNL;",
          "3998:         }else if( zText[i]=='\\r' ){",
          "3999:           memcpy(&zOut[iOut], zCR, nCR);",
          "4000:           iOut += nCR;",
          "4001:         }else{",
          "4002:           zOut[iOut] = zText[i];",
          "4003:           iOut++;",
          "4004:         }",
          "4005:       }",
          "4007:       if( zNL ){",
          "4008:         memcpy(&zOut[iOut], \",'\", 2); iOut += 2;",
          "4009:         memcpy(&zOut[iOut], zNL, nNL); iOut += nNL;",
          "4010:         memcpy(&zOut[iOut], \"', char(10))\", 12); iOut += 12;",
          "4011:       }",
          "4012:       if( zCR ){",
          "4013:         memcpy(&zOut[iOut], \",'\", 2); iOut += 2;",
          "4014:         memcpy(&zOut[iOut], zCR, nCR); iOut += nCR;",
          "4015:         memcpy(&zOut[iOut], \"', char(13))\", 12); iOut += 12;",
          "4016:       }",
          "4018:       sqlite3_result_text(context, zOut, iOut, SQLITE_TRANSIENT);",
          "4019:       sqlite3_free(zOut);",
          "4020:       return;",
          "4021:     }",
          "4022:   }",
          "4024:   sqlite3_result_value(context, argv[0]);",
          "4025: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4013:                             shellModuleSchema, 0, 0);",
          "4014:     sqlite3_create_function(p->db, \"shell_putsnl\", 1, SQLITE_UTF8, p,",
          "4015:                             shellPutsFunc, 0, 0);",
          "4016: #ifndef SQLITE_NOHAVE_SYSTEM",
          "4017:     sqlite3_create_function(p->db, \"edit\", 1, SQLITE_UTF8, 0,",
          "4018:                             editFunc, 0, 0);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4106:     sqlite3_create_function(p->db, \"shell_escape_crnl\", 1, SQLITE_UTF8, 0,",
          "4107:                             shellEscapeCrnl, 0, 0);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "6349:     \"GROUP BY pgno, cell;\"",
          "6350:   );",
          "6364:   if( rc==SQLITE_OK ){",
          "",
          "[Removed Lines]",
          "6352: #if 0",
          "6353:   zSql = \"SELECT type ||','|| name ||','|| tbl_name ||','|| rootpage ||','|| sql FROM recovery.schema;\";",
          "6354:   shellPrepare(pState->db, &rc, zSql, &pLoop);",
          "6355:   while( rc==SQLITE_OK && SQLITE_ROW==sqlite3_step(pLoop) ){",
          "6356:     raw_printf(pState->out, \"%s\\n\", (const char*)sqlite3_column_text(pLoop, 0));",
          "6357:   }",
          "6358:   shellFinalize(&rc, pLoop);",
          "6359:   return rc;",
          "6360: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "6398:         raw_printf(pState->out, \"DELETE FROM sqlite_sequence;\\n\");",
          "6399:       }",
          "6400:       shellPreparePrintf(pState->db, &rc, &pData,",
          "6402:         \"FROM sqlite_dbdata WHERE pgno IN (\"",
          "6403:         \"  SELECT pgno FROM recovery.map WHERE root=%d\"",
          "6404:         \")\"",
          "",
          "[Removed Lines]",
          "6401:         \"SELECT max(field), group_concat(quote(value), ', ') \"",
          "",
          "[Added Lines]",
          "6483:         \"SELECT max(field), group_concat(shell_escape_crnl(quote(value)),', ')\"",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "6423:     sqlite3_stmt *pStmt = 0;",
          "6424:     shellPrepare(pState->db, &rc,",
          "6425:         \"SELECT sql, name FROM recovery.schema \"",
          "6427:     );",
          "6428:     while( rc==SQLITE_OK && SQLITE_ROW==sqlite3_step(pStmt) ){",
          "6429:       const char *zSql = (const char*)sqlite3_column_text(pStmt, 0);",
          "",
          "[Removed Lines]",
          "6426:         \"WHERE (type='table' AND sql LIKE 'create table%') IS NOT TRUE\", &pStmt",
          "",
          "[Added Lines]",
          "6508:         \"WHERE sql NOT LIKE 'create table%'\", &pStmt",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8625221444d4f70965d41d241ed7fecc2d8bf7bc",
      "candidate_info": {
        "commit_hash": "8625221444d4f70965d41d241ed7fecc2d8bf7bc",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/8625221444d4f70965d41d241ed7fecc2d8bf7bc",
        "files": [
          "ext/misc/csv.c",
          "manifest",
          "manifest.uuid",
          "test/csv01.test"
        ],
        "message": "Fix a problem with the CSV extension when it uses the \"header\" option on a real file.\n\nFossilOrigin-Name: 7acaed08f946633fca3ab8434dd6349ea6f1bac4fd9ec21f476db013ee06de30",
        "before_after_code_files": [
          "ext/misc/csv.c||ext/misc/csv.c",
          "manifest.uuid||manifest.uuid",
          "test/csv01.test||test/csv01.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/misc/csv.c||ext/misc/csv.c": [
          "File: ext/misc/csv.c -> ext/misc/csv.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "621:   }else if( pNew->zData ){",
          "622:     pNew->iStart = (int)sRdr.iIn;",
          "623:   }else{",
          "625:   }",
          "626:   csv_reader_reset(&sRdr);",
          "627:   rc = sqlite3_declare_vtab(db, CSV_SCHEMA);",
          "",
          "[Removed Lines]",
          "624:     pNew->iStart = ftell(sRdr.in);",
          "",
          "[Added Lines]",
          "624:     pNew->iStart = ftell(sRdr.in) - sRdr.nIn + sRdr.iIn;",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: a1f50d57ce76f6c08a0ddbdd3c3fe2732d0e57dda14cb9aa3da00a14ceb4bc44",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/csv01.test||test/csv01.test": [
          "File: test/csv01.test -> test/csv01.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "214:   SELECT * FROM trent;",
          "215: } {1}",
          "217: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "217: # 2018-12-26",
          "218: # Bug report on the mailing list",
          "219: #",
          "220: forcedelete csv01.csv",
          "221: set fd [open csv01.csv w]",
          "222: puts $fd \"a,b,c,d\\r\\n1,2,3,4\\r\\none,two,three,four\\r\\n5,6,7,8\"",
          "223: close $fd",
          "224: do_execsql_test 5.1 {",
          "225:   CREATE VIRTUAL TABLE t5_1 USING csv(filename='csv01.csv');",
          "226:   SELECT name FROM temp.pragma_table_info('t5_1');",
          "227: } {c0 c1 c2 c3}",
          "228: do_execsql_test 5.2 {",
          "229:   SELECT *, '|' FROM t5_1;",
          "230: } {a b c d | 1 2 3 4 | one two three four | 5 6 7 8 |}",
          "231: do_execsql_test 5.3 {",
          "232:   DROP TABLE t5_1;",
          "233:   CREATE VIRTUAL TABLE t5_1 USING csv(filename='csv01.csv', header);",
          "234:   SELECT name FROM temp.pragma_table_info('t5_1');",
          "235: } {a b c d}",
          "236: do_execsql_test 5.4 {",
          "237:   SELECT *, '|' FROM t5_1;",
          "238: } {1 2 3 4 | one two three four | 5 6 7 8 |}",
          "",
          "---------------"
        ]
      }
    }
  ]
}