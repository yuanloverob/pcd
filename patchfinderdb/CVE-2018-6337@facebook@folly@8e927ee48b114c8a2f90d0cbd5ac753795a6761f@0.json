{
  "cve_id": "CVE-2018-6337",
  "cve_desc": "folly::secureRandom will re-use a buffer between parent and child processes when fork() is called. That will result in multiple forked children producing repeat (or similar) results. This affects HHVM 3.26 prior to 3.26.3 and the folly library between v2017.12.11.00 and v2018.08.09.00.",
  "repo": "facebook/folly",
  "patch_hash": "8e927ee48b114c8a2f90d0cbd5ac753795a6761f",
  "patch_info": {
    "commit_hash": "8e927ee48b114c8a2f90d0cbd5ac753795a6761f",
    "repo": "facebook/folly",
    "commit_url": "https://github.com/facebook/folly/commit/8e927ee48b114c8a2f90d0cbd5ac753795a6761f",
    "files": [
      "folly/Random.cpp",
      "folly/test/RandomTest.cpp"
    ],
    "message": "Flush secureRandom buffer on fork\n\nSummary: On fork, flush the secureRandom buffer, so that we don't share entropy between the parent and child.\n\nReviewed By: ricklavoie\n\nDifferential Revision: D9196474\n\nfbshipit-source-id: 12ff8488d814466186df61328a5f1d4000beb27f",
    "before_after_code_files": [
      "folly/Random.cpp||folly/Random.cpp",
      "folly/test/RandomTest.cpp||folly/test/RandomTest.cpp"
    ]
  },
  "patch_diff": {
    "folly/Random.cpp||folly/Random.cpp": [
      "File: folly/Random.cpp -> folly/Random.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "73: class BufferedRandomDevice {",
      "74:  public:",
      "75:   static constexpr size_t kDefaultBufferSize = 128;",
      "77:   explicit BufferedRandomDevice(size_t bufferSize = kDefaultBufferSize);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "75:   static once_flag flag;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "97:   unsigned char* ptr_;",
      "98: };",
      "100: BufferedRandomDevice::BufferedRandomDevice(size_t bufferSize)",
      "101:   : bufferSize_(bufferSize),",
      "102:     buffer_(new unsigned char[bufferSize]),",
      "103:     ptr_(buffer_.get() + bufferSize) {  // refill on first use",
      "104: }",
      "106: void BufferedRandomDevice::getSlow(unsigned char* data, size_t size) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "101: once_flag BufferedRandomDevice::flag;",
      "102: struct RandomTag {};",
      "108:   call_once(flag, [this]() {",
      "109:     detail::AtFork::registerHandler(",
      "110:         this,",
      "114:         []() {",
      "115:           using Single = SingletonThreadLocal<BufferedRandomDevice, RandomTag>;",
      "116:           auto& t = Single::get();",
      "120:           t.ptr_ = t.buffer_.get() + t.bufferSize_;",
      "121:         });",
      "122:   });",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "124:   ptr_ += size;",
      "125: }",
      "129: } // namespace",
      "131: void Random::secureRandom(void* data, size_t size) {",
      "",
      "[Removed Lines]",
      "127: struct RandomTag {};",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "folly/test/RandomTest.cpp||folly/test/RandomTest.cpp": [
      "File: folly/test/RandomTest.cpp -> folly/test/RandomTest.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "138:         std::unordered_set<uint64_t>(vals.begin(), vals.end()).size());",
      "139:   }",
      "140: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "142: TEST(Random, SecureFork) {",
      "143:   unsigned char buffer = 0;",
      "145:   folly::Random::secureRandom(&buffer, 1);",
      "147:   auto pid = fork();",
      "148:   EXPECT_NE(pid, -1);",
      "149:   if (pid) {",
      "151:     int status = 0;",
      "152:     folly::Random::secureRandom(&buffer, 1);",
      "153:     auto pid2 = wait(&status);",
      "154:     EXPECT_NE(WEXITSTATUS(status), buffer);",
      "155:     EXPECT_EQ(pid, pid2);",
      "156:   } else {",
      "158:     folly::Random::secureRandom(&buffer, 1);",
      "159:     exit(buffer); // Do not print gtest results",
      "160:   }",
      "161: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "84ca5428ba69e8baeb3cdbade87916179eff336c",
      "candidate_info": {
        "commit_hash": "84ca5428ba69e8baeb3cdbade87916179eff336c",
        "repo": "facebook/folly",
        "commit_url": "https://github.com/facebook/folly/commit/84ca5428ba69e8baeb3cdbade87916179eff336c",
        "files": [
          "folly/test/RandomTest.cpp"
        ],
        "message": "Fix RandomFork test\n\nSummary:\nFork test tries to test that we don't reuse the SecureRandom buffer on fork, but it only tests one byte.\n\nThis gives us probability one in 256*256 (or something like that) that we spuriously fail.\n\nCheck the whole buffer instead before failing.\n\nReviewed By: fredemmott\n\nDifferential Revision: D9242788\n\nfbshipit-source-id: b9fb809518797c439d7fe16084a04f9964a1f597",
        "before_after_code_files": [
          "folly/test/RandomTest.cpp||folly/test/RandomTest.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "folly/test/RandomTest.cpp||folly/test/RandomTest.cpp"
          ],
          "candidate": [
            "folly/test/RandomTest.cpp||folly/test/RandomTest.cpp"
          ]
        }
      },
      "candidate_diff": {
        "folly/test/RandomTest.cpp||folly/test/RandomTest.cpp": [
          "File: folly/test/RandomTest.cpp -> folly/test/RandomTest.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "140: }",
          "142: TEST(Random, SecureFork) {",
          "152:     folly::Random::secureRandom(&buffer, 1);",
          "160:   }",
          "161: }",
          "",
          "[Removed Lines]",
          "143:   unsigned char buffer = 0;",
          "145:   folly::Random::secureRandom(&buffer, 1);",
          "147:   auto pid = fork();",
          "148:   EXPECT_NE(pid, -1);",
          "149:   if (pid) {",
          "151:     int status = 0;",
          "153:     auto pid2 = wait(&status);",
          "154:     EXPECT_NE(WEXITSTATUS(status), buffer);",
          "155:     EXPECT_EQ(pid, pid2);",
          "156:   } else {",
          "158:     folly::Random::secureRandom(&buffer, 1);",
          "159:     exit(buffer); // Do not print gtest results",
          "",
          "[Added Lines]",
          "144:   int retries = 100;",
          "145:   while (true) {",
          "146:     unsigned char buffer = 0;",
          "150:     auto pid = fork();",
          "151:     EXPECT_NE(pid, -1);",
          "152:     if (pid) {",
          "154:       int status = 0;",
          "155:       folly::Random::secureRandom(&buffer, 1);",
          "156:       auto pid2 = wait(&status);",
          "157:       EXPECT_EQ(pid, pid2);",
          "161:       if (WEXITSTATUS(status) == buffer && retries-- > 0) {",
          "162:         continue;",
          "163:       }",
          "164:       EXPECT_NE(WEXITSTATUS(status), buffer);",
          "165:       return;",
          "166:     } else {",
          "168:       folly::Random::secureRandom(&buffer, 1);",
          "169:       exit(buffer); // Do not print gtest results",
          "170:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bfdd04bb0acfab12effab52c05ce5dea5d847981",
      "candidate_info": {
        "commit_hash": "bfdd04bb0acfab12effab52c05ce5dea5d847981",
        "repo": "facebook/folly",
        "commit_url": "https://github.com/facebook/folly/commit/bfdd04bb0acfab12effab52c05ce5dea5d847981",
        "files": [
          "folly/Random.cpp"
        ],
        "message": "Epochs for BufferedRandomDevice\n\nSummary:\n[Folly] Epochs for `BufferedRandomDevice`.\n\nTo maintain the security property that the thread-local object is reset after fork in the child process, but in an async-signal-safe way.\n\nThis approach has the downside that it makes the fast path larger by 3 instruction (`mov`, `cmp`, `jne`).\n\nReviewed By: djwatson, ot\n\nDifferential Revision: D9256536\n\nfbshipit-source-id: dc34e1aeb75e1009610d47fe4ef7030a4a0e2a90",
        "before_after_code_files": [
          "folly/Random.cpp||folly/Random.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "folly/Random.cpp||folly/Random.cpp"
          ],
          "candidate": [
            "folly/Random.cpp||folly/Random.cpp"
          ]
        }
      },
      "candidate_diff": {
        "folly/Random.cpp||folly/Random.cpp": [
          "File: folly/Random.cpp -> folly/Random.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "75:   static once_flag flag;",
          "76:   static constexpr size_t kDefaultBufferSize = 128;",
          "78:   explicit BufferedRandomDevice(size_t bufferSize = kDefaultBufferSize);",
          "80:   void get(void* data, size_t size) {",
          "82:       memcpy(data, ptr_, size);",
          "83:       ptr_ += size;",
          "84:     } else {",
          "",
          "[Removed Lines]",
          "81:     if (LIKELY(size <= remaining())) {",
          "",
          "[Added Lines]",
          "78:   static void notifyNewGlobalEpoch() {",
          "79:     globalEpoch_.fetch_add(1, std::memory_order_relaxed);",
          "80:   }",
          "85:     auto const globalEpoch = globalEpoch_.load(std::memory_order_relaxed);",
          "86:     if (LIKELY(globalEpoch == epoch_ && size <= remaining())) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "93:     return size_t(buffer_.get() + bufferSize_ - ptr_);",
          "94:   }",
          "96:   const size_t bufferSize_;",
          "97:   std::unique_ptr<unsigned char[]> buffer_;",
          "98:   unsigned char* ptr_;",
          "99: };",
          "101: once_flag BufferedRandomDevice::flag;",
          "102: struct RandomTag {};",
          "104: BufferedRandomDevice::BufferedRandomDevice(size_t bufferSize)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "101:   static std::atomic<size_t> globalEpoch_;",
          "103:   size_t epoch_{size_t(-1)}; // refill on first use",
          "110: std::atomic<size_t> BufferedRandomDevice::globalEpoch_{0};",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "114:         []() {",
          "121:         });",
          "122:   });",
          "123: }",
          "125: void BufferedRandomDevice::getSlow(unsigned char* data, size_t size) {",
          "126:   DCHECK_GT(size, remaining());",
          "127:   if (size >= bufferSize_) {",
          "",
          "[Removed Lines]",
          "115:           using Single = SingletonThreadLocal<BufferedRandomDevice, RandomTag>;",
          "116:           auto& t = Single::get();",
          "120:           t.ptr_ = t.buffer_.get() + t.bufferSize_;",
          "",
          "[Added Lines]",
          "125:           BufferedRandomDevice::notifyNewGlobalEpoch();",
          "131:   auto const globalEpoch = globalEpoch_.load(std::memory_order_relaxed);",
          "132:   if (globalEpoch != epoch_) {",
          "133:     epoch_ = globalEpoch_;",
          "134:     ptr_ = buffer_.get() + bufferSize_;",
          "135:   }",
          "",
          "---------------"
        ]
      }
    }
  ]
}