{
  "cve_id": "CVE-2012-2330",
  "cve_desc": "The Update method in src/node_http_parser.cc in Node.js before 0.6.17 and 0.7 before 0.7.8 does not properly check the length of a string, which allows remote attackers to obtain sensitive information (request header contents) and possibly spoof HTTP headers via a zero length string.",
  "repo": "joyent/node",
  "patch_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
  "patch_info": {
    "commit_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
    "repo": "joyent/node",
    "commit_url": "https://github.com/joyent/node/commit/c9a231d",
    "files": [
      "src/node_http_parser.cc"
    ],
    "message": "typo in node_http_parser",
    "before_after_code_files": [
      "src/node_http_parser.cc||src/node_http_parser.cc"
    ]
  },
  "patch_diff": {
    "src/node_http_parser.cc||src/node_http_parser.cc": [
      "File: src/node_http_parser.cc -> src/node_http_parser.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "191:   void Update(const char* str, size_t size) {",
      "192:     if (str_ == NULL)",
      "193:       str_ = str;",
      "197:       char* s = new char[size_ + size];",
      "",
      "[Removed Lines]",
      "194:     else if (on_heap_ || str_ + size != str) {",
      "",
      "[Added Lines]",
      "194:     else if (on_heap_ || str_ + size_ != str) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "07a983a6025cf788df2e2371e96924ffe8602e08",
      "candidate_info": {
        "commit_hash": "07a983a6025cf788df2e2371e96924ffe8602e08",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/07a983a6025cf788df2e2371e96924ffe8602e08",
        "files": [
          "test/simple/test-http-dns-error.js",
          "test/simple/test-net-dns-error.js"
        ],
        "message": "test: add tcp and https DNS error tests\n\nnet-dns-error: specifc test for the net DNS issue.\nhttp-dns-error: now it works for HTTPS as well.",
        "before_after_code_files": [
          "test/simple/test-http-dns-error.js||test/simple/test-http-dns-error.js",
          "test/simple/test-net-dns-error.js||test/simple/test-net-dns-error.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/simple/test-http-dns-error.js||test/simple/test-http-dns-error.js": [
          "File: test/simple/test-http-dns-error.js -> test/simple/test-http-dns-error.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "59:   req.end();",
          "60: }",
          "66: test(http);",
          "68: process.on('exit', function() {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "62: test(https);",
          "",
          "---------------"
        ],
        "test/simple/test-net-dns-error.js||test/simple/test-net-dns-error.js": [
          "File: test/simple/test-net-dns-error.js -> test/simple/test-net-dns-error.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: var assert = require('assert');",
          "24: var net = require('net');",
          "26: var expected_bad_connections = 1;",
          "27: var actual_bad_connections = 0;",
          "29: var host = '********';",
          "30: host += host;",
          "31: host += host;",
          "32: host += host;",
          "33: host += host;",
          "34: host += host;",
          "36: function do_not_call() {",
          "37:   throw new Error('This function should not have been called.');",
          "38: }",
          "40: var socket = net.connect(42, host, do_not_call);",
          "41: socket.on('error', function (err) {",
          "42:   assert.equal(err.code, 'ENOTFOUND');",
          "43:   actual_bad_connections++;",
          "44: });",
          "46: process.on('exit', function() {",
          "47:   assert.equal(actual_bad_connections, expected_bad_connections);",
          "48: });",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d5047f5fe669c0434da99e2aacd197e228d040a4",
      "candidate_info": {
        "commit_hash": "d5047f5fe669c0434da99e2aacd197e228d040a4",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/d5047f5fe669c0434da99e2aacd197e228d040a4",
        "files": [
          "lib/http.js"
        ],
        "message": "http: use `util._deprecationWarning` for deprecation warning",
        "before_after_code_files": [
          "lib/http.js||lihttp.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/http.js||lihttp.js": [
          "File: lib/http.js -> lihttp.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1591: function Client(port, host) {",
          "1595:   host = host || 'localhost';",
          "1596:   port = port || 80;",
          "1597:   this.host = host;",
          "",
          "[Removed Lines]",
          "1593:   console.trace('http.Client is a legacy interface and will be removed in ' +",
          "1594:                 'the near future. Do not use it.');",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c15e6905c43af4bf3ed77ed72b6bd90efa3bc9b4",
      "candidate_info": {
        "commit_hash": "c15e6905c43af4bf3ed77ed72b6bd90efa3bc9b4",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/c15e6905c43af4bf3ed77ed72b6bd90efa3bc9b4",
        "files": [
          "lib/zlib.js"
        ],
        "message": "Added destroy method to Zlib object in zlib.js module",
        "before_after_code_files": [
          "lib/zlib.js||lizlib.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/zlib.js||lizlib.js": [
          "File: lib/zlib.js -> lizlib.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "427:   this._process();",
          "428: };",
          "430: util.inherits(Deflate, Zlib);",
          "431: util.inherits(Inflate, Zlib);",
          "432: util.inherits(Gzip, Zlib);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f66f793c07ed263938748593bec0eec204291e84",
      "candidate_info": {
        "commit_hash": "f66f793c07ed263938748593bec0eec204291e84",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/f66f793c07ed263938748593bec0eec204291e84",
        "files": [
          "lib/net.js"
        ],
        "message": "net: hook up handle wrap to owning object",
        "before_after_code_files": [
          "lib/net.js||linet.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/net.js||linet.js": [
          "File: lib/net.js -> linet.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "122:   if (self._handle) {",
          "124:     self._handle.onread = onread;",
          "125:   }",
          "126: }",
          "",
          "[Removed Lines]",
          "123:     self._handle.socket = self;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "293: function afterShutdown(status, handle, req) {",
          "296:   assert.ok(self._flags & FLAG_SHUTDOWN);",
          "297:   assert.ok(!self.writable);",
          "",
          "[Removed Lines]",
          "294:   var self = handle.socket;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "381: function onread(buffer, offset, length) {",
          "382:   var handle = this;",
          "384:   assert.equal(handle, self._handle);",
          "386:   timers.active(self);",
          "",
          "[Removed Lines]",
          "383:   var self = handle.socket;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "585: function afterWrite(status, handle, req) {",
          "589:   if (self.destroyed) {",
          "",
          "[Removed Lines]",
          "586:   var self = handle.socket;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "724: function afterConnect(status, handle, req, readable, writable) {",
          "728:   if (self.destroyed) {",
          "",
          "[Removed Lines]",
          "725:   var self = handle.socket;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "881:   }",
          "883:   self._handle.onconnection = onconnection;",
          "",
          "[Removed Lines]",
          "884:   self._handle.socket = self;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "981: function onconnection(clientHandle) {",
          "982:   var handle = this;",
          "985:   debug('onconnection');",
          "",
          "[Removed Lines]",
          "983:   var self = handle.socket;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7f58d207f32617e51017ee01a74e0f4042840e99",
      "candidate_info": {
        "commit_hash": "7f58d207f32617e51017ee01a74e0f4042840e99",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/7f58d207f32617e51017ee01a74e0f4042840e99",
        "files": [
          "lib/fs.js",
          "test/simple/test-fs-non-number-arguments-throw.js"
        ],
        "message": "[ISSUE #2554 #2567] throw if fs args for 'start' or 'end' are strings",
        "before_after_code_files": [
          "lib/fs.js||lifs.js",
          "test/simple/test-fs-non-number-arguments-throw.js||test/simple/test-fs-non-number-arguments-throw.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/fs.js||lifs.js": [
          "File: lib/fs.js -> lifs.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1038:   if (this.encoding) this.setEncoding(this.encoding);",
          "1040:   if (this.start !== undefined) {",
          "1041:     if (this.end === undefined) {",
          "1042:       this.end = Infinity;",
          "1043:     }",
          "1045:     if (this.start > this.end) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1226:   }",
          "1228:   if (this.start !== undefined) {",
          "1229:     if (this.start < 0) {",
          "1230:       throw new Error('start must be >= zero');",
          "1231:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/simple/test-fs-non-number-arguments-throw.js||test/simple/test-fs-non-number-arguments-throw.js": [
          "File: test/simple/test-fs-non-number-arguments-throw.js -> test/simple/test-fs-non-number-arguments-throw.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: var assert = require('assert'),",
          "2:     fs = require('fs'),",
          "3:     saneEmitter,",
          "4:     sanity = 'ire(\\'assert\\')';",
          "6: saneEmitter = fs.createReadStream(__filename, { start: 17, end: 29 });",
          "8: assert.throws(function () {",
          "9:   fs.createReadStream(__filename, { start: \"17\", end: 29 });",
          "10: }, \"start as string didn't throw an error for createReadStream\");",
          "12: assert.throws(function () {",
          "13:   fs.createReadStream(__filename, { start: 17, end: \"29\" });",
          "14: }, \"end as string didn't throw an error\");",
          "16: assert.throws(function () {",
          "17:   fs.createWriteStream(__filename, { start: \"17\" });",
          "18: }, \"start as string didn't throw an error for createWriteStream\");",
          "20: saneEmitter.on('data', function (data) {",
          "22:   assert.strictEqual(sanity, data.toString('utf8'), 'read ' +",
          "23:                      data.toString('utf8') + ' instead of ' + sanity);",
          "24: });",
          "",
          "---------------"
        ]
      }
    }
  ]
}