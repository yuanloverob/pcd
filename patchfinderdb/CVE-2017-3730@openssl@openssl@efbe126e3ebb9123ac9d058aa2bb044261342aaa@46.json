{
  "cve_id": "CVE-2017-3730",
  "cve_desc": "In OpenSSL 1.1.0 before 1.1.0d, if a malicious server supplies bad parameters for a DHE or ECDHE key exchange then this can result in the client attempting to dereference a NULL pointer leading to a client crash. This could be exploited in a Denial of Service attack.",
  "repo": "openssl/openssl",
  "patch_hash": "efbe126e3ebb9123ac9d058aa2bb044261342aaa",
  "patch_info": {
    "commit_hash": "efbe126e3ebb9123ac9d058aa2bb044261342aaa",
    "repo": "openssl/openssl",
    "commit_url": "https://github.com/openssl/openssl/commit/efbe126e3ebb9123ac9d058aa2bb044261342aaa",
    "files": [
      "ssl/statem/statem_clnt.c"
    ],
    "message": "Fix missing NULL checks in CKE processing\n\nReviewed-by: Rich Salz <rsalz@openssl.org>",
    "before_after_code_files": [
      "ssl/statem/statem_clnt.c||ssl/statem/statem_clnt.c"
    ]
  },
  "patch_diff": {
    "ssl/statem/statem_clnt.c||ssl/statem/statem_clnt.c": [
      "File: ssl/statem/statem_clnt.c -> ssl/statem/statem_clnt.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2258:         return 0;",
      "2259:     }",
      "2260:     ckey = ssl_generate_pkey(skey);",
      "2261:     dh_clnt = EVP_PKEY_get0_DH(ckey);",
      "2263:     if (dh_clnt == NULL || ssl_derive(s, ckey, skey) == 0) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2261:     if (ckey == NULL) {",
      "2262:         SSLerr(SSL_F_TLS_CONSTRUCT_CKE_DHE, ERR_R_INTERNAL_ERROR);",
      "2263:         return 0;",
      "2264:     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "2296:     }",
      "2298:     ckey = ssl_generate_pkey(skey);",
      "2300:     if (ssl_derive(s, ckey, skey) == 0) {",
      "2301:         SSLerr(SSL_F_TLS_CONSTRUCT_CKE_ECDHE, ERR_R_EVP_LIB);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2304:     if (ckey == NULL) {",
      "2305:         SSLerr(SSL_F_TLS_CONSTRUCT_CKE_ECDHE, ERR_R_INTERNAL_ERROR);",
      "2306:         goto err;",
      "2307:     }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "1320d2501d0c9c6ad9ea0dc1f5115f4e6b3e0c3b",
      "candidate_info": {
        "commit_hash": "1320d2501d0c9c6ad9ea0dc1f5115f4e6b3e0c3b",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/1320d2501d0c9c6ad9ea0dc1f5115f4e6b3e0c3b",
        "files": [
          "test/recipes/60-test_x509_store.t"
        ],
        "message": "Fix test_x509_store\n\nDon't run this test unless 'openssl rehash' works properly.\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2664)\n(cherry picked from commit 73540f4729bb856ab066c6e7a57513a97e3ca36f)",
        "before_after_code_files": [
          "test/recipes/60-test_x509_store.t||test/recipes/60-test_x509_store.t"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/recipes/60-test_x509_store.t||test/recipes/60-test_x509_store.t": [
          "File: test/recipes/60-test_x509_store.t -> test/recipes/60-test_x509_store.t",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: setup(\"test_x509_store\");",
          "19: # We use 'openssl verify' for these tests, as it contains everything",
          "20: # we need to conduct these tests.  The tests here are a subset of the",
          "21: # ones found in 25-test_verify.t",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: #If \"openssl rehash -help\" fails it's most likely because we're on a platform",
          "20: #that doesn't support the rehash command (e.g. Windows)",
          "21: plan skip_all => \"test_rehash is not available on this platform\"",
          "22:     unless run(app([\"openssl\", \"rehash\", \"-help\"]));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bb5b56af4c3b9e43a698f01b70732c62d3642583",
      "candidate_info": {
        "commit_hash": "bb5b56af4c3b9e43a698f01b70732c62d3642583",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/bb5b56af4c3b9e43a698f01b70732c62d3642583",
        "files": [
          "crypto/async/async_wait.c"
        ],
        "message": "Remove fd from the list when the engine clears the wait context before pause\n\nThis fixes the num of fds added/removed returned by ASYNC_WAIT_CTX_get_changed_fds\n\nPreviously, the numbers were not consistent with the fds actually written in\nthe buffers since the fds that have been both added and removed are explicitly\nignored in the loop.\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\nReviewed-by: Matt Caswell <matt@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2581)\n(cherry picked from commit f89dd6738a0ec2b6cfb05a3cc5fa38843dc27d2f)",
        "before_after_code_files": [
          "crypto/async/async_wait.c||crypto/async/async_wait.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/async/async_wait.c||crypto/async/async_wait.c": [
          "File: crypto/async/async_wait.c -> crypto/async/async_wait.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "148:             continue;",
          "149:         }",
          "150:         if (curr->key == key) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "152:             if (curr->add == 1) {",
          "153:                 if (ctx->fds == curr) {",
          "154:                     ctx->fds = curr->next;",
          "155:                 }",
          "156:                 else {",
          "157:                     struct fd_lookup_st *prev = ctx->fds;",
          "158:                     while (prev->next != curr && prev->next != NULL) {",
          "159:                         prev = prev->next;",
          "160:                     }",
          "161:                     if (prev->next == NULL) {",
          "162:                         return 1;",
          "163:                     }",
          "164:                     prev->next = curr->next;",
          "165:                 }",
          "171:                 if (curr->cleanup != NULL)",
          "172:                     curr->cleanup(ctx, curr->key, curr->fd, curr->custom_data);",
          "173:                 OPENSSL_free(curr);",
          "174:                 ctx->numadd--;",
          "175:                 return 1;",
          "176:             }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9b498c9f0fc4faf6314a8c48125aa0afac26c2ba",
      "candidate_info": {
        "commit_hash": "9b498c9f0fc4faf6314a8c48125aa0afac26c2ba",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/9b498c9f0fc4faf6314a8c48125aa0afac26c2ba",
        "files": [
          "apps/apps.c",
          "apps/apps.h",
          "apps/s_client.c",
          "apps/s_server.c"
        ],
        "message": "Refactor to avoid unnecessary preprocessor logic\n\nReviewed-by: Andy Polyakov <appro@openssl.org>\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(cherry picked from commit 51e5133d551b4c132f72fc2ff5bbe076f5a3e052)",
        "before_after_code_files": [
          "apps/apps.c||apps/apps.c",
          "apps/apps.h||apps/apps.h",
          "apps/s_client.c||apps/s_client.c",
          "apps/s_server.c||apps/s_server.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "apps/apps.c||apps/apps.c": [
          "File: apps/apps.c -> apps/apps.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2300: #endif",
          "2303: #if defined(_WIN32) && defined(STD_INPUT_HANDLE)",
          "2304: int raw_read_stdin(void *buf, int siz)",
          "2305: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2303: #if defined(__VMS)",
          "2304: # include \"vms_term_sock.h\"",
          "2305: static int stdin_sock = -1;",
          "2307: static void close_stdin_sock(void)",
          "2308: {",
          "2309:     TerminalSocket (TERM_SOCK_DELETE, &stdin_sock);",
          "2310: }",
          "2312: int fileno_stdin(void)",
          "2313: {",
          "2314:     if (stdin_sock == -1) {",
          "2315:         TerminalSocket(TERM_SOCK_CREATE, &stdin_sock);",
          "2316:         atexit(close_stdin_sock);",
          "2317:     }",
          "2319:     return stdin_sock;",
          "2320: }",
          "2321: #else",
          "2322: int fileno_stdin(void)",
          "2323: {",
          "2324:     return fileno(stdin);",
          "2325: }",
          "2326: #endif",
          "2328: int fileno_stdout(void)",
          "2329: {",
          "2330:     return fileno(stdout);",
          "2331: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2309:     else",
          "2310:         return (-1);",
          "2311: }",
          "2312: #else",
          "2313: int raw_read_stdin(void *buf, int siz)",
          "2314: {",
          "2316: }",
          "2317: #endif",
          "",
          "[Removed Lines]",
          "2315:     return read(fileno(stdin), buf, siz);",
          "",
          "[Added Lines]",
          "2342: #elif defined(__VMS)",
          "2343: int raw_read_stdin(void *buf, int siz)",
          "2344: {",
          "2345:     return recv(fileno_stdin(), buf, siz, 0);",
          "2346: }",
          "2350:     return read(fileno_stdin(), buf, siz);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2328: #else",
          "2329: int raw_write_stdout(const void *buf, int siz)",
          "2330: {",
          "2332: }",
          "2333: #endif",
          "",
          "[Removed Lines]",
          "2331:     return write(fileno(stdout), buf, siz);",
          "",
          "[Added Lines]",
          "2366:     return write(fileno_stdout(), buf, siz);",
          "",
          "---------------"
        ],
        "apps/apps.h||apps/apps.h": [
          "File: apps/apps.h -> apps/apps.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "549: int app_isdir(const char *);",
          "550: int app_access(const char *, int flag);",
          "551: int raw_read_stdin(void *, int);",
          "552: int raw_write_stdout(const void *, int);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "551: int fileno_stdin(void);",
          "552: int fileno_stdout(void);",
          "",
          "---------------"
        ],
        "apps/s_client.c||apps/s_client.c": [
          "File: apps/s_client.c -> apps/s_client.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "44: #ifndef OPENSSL_NO_SOCK",
          "",
          "[Removed Lines]",
          "46: #ifdef OPENSSL_SYS_VMS",
          "47: # include \"vms_term_sock.h\"",
          "48: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "861:     int c_nbio = 0, c_msg = 0, c_ign_eof = 0, c_brief = 0;",
          "862:     int c_tlsextdebug = 0, c_status_req = 0;",
          "863:     BIO *bio_c_msg = NULL;",
          "869:     FD_ZERO(&readfds);",
          "870:     FD_ZERO(&writefds);",
          "",
          "[Removed Lines]",
          "864: #if defined(OPENSSL_SYS_VMS)",
          "865:     int stdin_sock;",
          "866:     TerminalSocket(TERM_SOCK_CREATE, &stdin_sock);",
          "867: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1828:     SSL_set_connect_state(con);",
          "1834:     else",
          "1835:         width = SSL_get_fd(con) + 1;",
          "1839:     read_tty = 1;",
          "1840:     write_tty = 0;",
          "1841:     tty_on = 0;",
          "",
          "[Removed Lines]",
          "1831: #if defined(OPENSSL_SYS_VMS)",
          "1832:     if (stdin_sock > SSL_get_fd(con))",
          "1833:         width = stdin_sock + 1;",
          "1836: #else",
          "1837:     width = SSL_get_fd(con) + 1;",
          "1838: #endif",
          "",
          "[Added Lines]",
          "1824:     if (fileno_stdin() > SSL_get_fd(con))",
          "1825:         width = fileno_stdin() + 1;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2169:                 if (read_tty && !at_eof)",
          "2171:                 if (write_tty)",
          "2173: #endif",
          "2174:             }",
          "2175:             if (read_ssl)",
          "",
          "[Removed Lines]",
          "2165: #if defined(OPENSSL_SYS_VMS)",
          "2166:                 if (read_tty && !at_eof)",
          "2167:                     openssl_fdset(stdin_sock, &readfds);",
          "2168: #else",
          "2170:                     openssl_fdset(fileno(stdin), &readfds);",
          "2172:                     openssl_fdset(fileno(stdout), &writefds);",
          "",
          "[Added Lines]",
          "2156:                     openssl_fdset(fileno_stdin(), &readfds);",
          "2157: #if !defined(OPENSSL_SYS_VMS)",
          "2159:                     openssl_fdset(fileno_stdout(), &writefds);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2301:         else if (!ssl_pending && write_tty)",
          "2302: #else",
          "2304: #endif",
          "2305:         {",
          "2306: #ifdef CHARSET_EBCDIC",
          "",
          "[Removed Lines]",
          "2303:         else if (!ssl_pending && FD_ISSET(fileno(stdout), &writefds))",
          "",
          "[Added Lines]",
          "2290:         else if (!ssl_pending && FD_ISSET(fileno_stdout(), &writefds))",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2389: #if defined(OPENSSL_SYS_MSDOS)",
          "2390:         else if (has_stdin_waiting())",
          "2393: #else",
          "2395: #endif",
          "2396:         {",
          "2397:             if (crlf) {",
          "2398:                 int j, lf_num;",
          "2403:                 i = raw_read_stdin(cbuf, BUFSIZZ / 2);",
          "2406:                 lf_num = 0;",
          "2408:                 for (j = 0; j < i; j++)",
          "",
          "[Removed Lines]",
          "2391: #elif defined(OPENSSL_SYS_VMS)",
          "2392:         else if (FD_ISSET(stdin_sock, &readfds))",
          "2394:         else if (FD_ISSET(fileno(stdin), &readfds))",
          "2400: #if defined(OPENSSL_SYS_VMS)",
          "2401:                 i = recv(stdin_sock, cbuf, BUFSIZZ / 2, 0);",
          "2402: #else",
          "2404: #endif",
          "",
          "[Added Lines]",
          "2379:         else if (FD_ISSET(fileno_stdin(), &readfds))",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2417:                     }",
          "2418:                 }",
          "2419:                 assert(lf_num == 0);",
          "2424:                 i = raw_read_stdin(cbuf, BUFSIZZ);",
          "2427: #if !defined(OPENSSL_SYS_WINDOWS) && !defined(OPENSSL_SYS_MSDOS)",
          "2428:             if (i == 0)",
          "2429:                 at_eof = 1;",
          "",
          "[Removed Lines]",
          "2420:             } else {",
          "2421: #if defined(OPENSSL_SYS_VMS)",
          "2422:                 i = recv(stdin_sock, cbuf, BUFSIZZ, 0);",
          "2423: #else",
          "2425: #endif",
          "2426:             }",
          "",
          "[Added Lines]",
          "2400:             } else",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2508:     bio_c_out = NULL;",
          "2509:     BIO_free(bio_c_msg);",
          "2510:     bio_c_msg = NULL;",
          "2514:     return (ret);",
          "2515: }",
          "",
          "[Removed Lines]",
          "2511: #if defined(OPENSSL_SYS_VMS)",
          "2512:     TerminalSocket(TERM_SOCK_DELETE, &stdin_sock);",
          "2513: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "apps/s_server.c||apps/s_server.c": [
          "File: apps/s_server.c -> apps/s_server.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "90: #include <openssl/ebcdic.h>",
          "91: #endif",
          "98: static int not_resumable_sess_cb(SSL *s, int is_forward_secure);",
          "99: static int sv_body(int s, int stype, unsigned char *context);",
          "100: static int www_body(int s, int stype, unsigned char *context);",
          "",
          "[Removed Lines]",
          "93: #ifdef OPENSSL_SYS_VMS",
          "94: # include \"vms_term_sock.h\"",
          "95: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2012: #else",
          "2013:     struct timeval *timeoutp;",
          "2014: #endif",
          "2020:     buf = app_malloc(bufsize, \"server buffer\");",
          "2021:     if (s_nbio) {",
          "",
          "[Removed Lines]",
          "2015: #if defined(OPENSSL_SYS_VMS)",
          "2016:     int stdin_sock;",
          "2017:     TerminalSocket (TERM_SOCK_CREATE, &stdin_sock);",
          "2018: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2116:         SSL_set_tlsext_debug_arg(con, bio_s_out);",
          "2117:     }",
          "2123:     else",
          "2124:         width = s + 1;",
          "2128:     for (;;) {",
          "2129:         int read_from_terminal;",
          "2130:         int read_from_sslcon;",
          "",
          "[Removed Lines]",
          "2120: #if defined(OPENSSL_SYS_VMS)",
          "2121:     if (stdin_sock > s)",
          "2122:         width = stdin_sock + 1;",
          "2125: #else",
          "2126:     width = s + 1;",
          "2127: #endif",
          "",
          "[Added Lines]",
          "2110:     if (fileno_stdin() > s)",
          "2111:         width = fileno_stdin() + 1;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2136:         if (!read_from_sslcon) {",
          "2137:             FD_ZERO(&readfds);",
          "2138: #if !defined(OPENSSL_SYS_WINDOWS) && !defined(OPENSSL_SYS_MSDOS)",
          "2144: #endif",
          "2145:             openssl_fdset(s, &readfds);",
          "",
          "[Removed Lines]",
          "2139: # if defined(OPENSSL_SYS_VMS)",
          "2140:             openssl_fdset(stdin_sock, &readfds);",
          "2141: # else",
          "2142:             openssl_fdset(fileno(stdin), &readfds);",
          "2143: # endif",
          "",
          "[Added Lines]",
          "2125:             openssl_fdset(fileno_stdin(), &readfds);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2181:             if (i <= 0)",
          "2182:                 continue;",
          "2188:                 read_from_terminal = 1;",
          "2189: #endif",
          "2190:             if (FD_ISSET(s, &readfds))",
          "",
          "[Removed Lines]",
          "2183: # if defined(OPENSSL_SYS_VMS)",
          "2184:             if (FD_ISSET(stdin_sock, &readfds))",
          "2185: # else",
          "2186:             if (FD_ISSET(fileno(stdin), &readfds))",
          "2187: # endif",
          "",
          "[Added Lines]",
          "2165:             if (FD_ISSET(fileno_stdin(), &readfds))",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2194:             if (s_crlf) {",
          "2195:                 int j, lf_num;",
          "2200:                 i = raw_read_stdin(buf, bufsize / 2);",
          "2202:                 lf_num = 0;",
          "2204:                 for (j = 0; j < i; j++)",
          "",
          "[Removed Lines]",
          "2197: #if defined(OPENSSL_SYS_VMS)",
          "2198:                 i=recv(stdin_sock, buf, bufsize / 2, 0);",
          "2199: #else",
          "2201: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2213:                     }",
          "2214:                 }",
          "2215:                 assert(lf_num == 0);",
          "2220:                 i = raw_read_stdin(buf, bufsize);",
          "2223:             if (!s_quiet && !s_brief) {",
          "2224:                 if ((i <= 0) || (buf[0] == 'Q')) {",
          "2225:                     BIO_printf(bio_s_out, \"DONE\\n\");",
          "",
          "[Removed Lines]",
          "2216:             } else {",
          "2217: #if defined(OPENSSL_SYS_VMS)",
          "2218:                 i = recv(stdin_sock, buf, bufsize, 0);",
          "2219: #else",
          "2221: #endif",
          "2222:             }",
          "",
          "[Added Lines]",
          "2190:             } else",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2433:     OPENSSL_clear_free(buf, bufsize);",
          "2434:     if (ret >= 0)",
          "2435:         BIO_printf(bio_s_out, \"ACCEPT\\n\");",
          "2439:     (void)BIO_flush(bio_s_out);",
          "2440:     return (ret);",
          "2441: }",
          "",
          "[Removed Lines]",
          "2436: #if defined(OPENSSL_SYS_VMS)",
          "2437:     TerminalSocket (TERM_SOCK_DELETE, &stdin_sock);",
          "2438: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b649ffcaea38864270ad6c2362ed0ef639749707",
      "candidate_info": {
        "commit_hash": "b649ffcaea38864270ad6c2362ed0ef639749707",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/b649ffcaea38864270ad6c2362ed0ef639749707",
        "files": [
          "test/recipes/25-test_crl.t"
        ],
        "message": "Add a couple of test to check CRL fingerprint\n\nReviewed-by: Kurt Roeckx <kurt@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2314)\n(cherry picked from commit 929860d0e6112f5c7766d9ea036c3f8bd8d3d719)",
        "before_after_code_files": [
          "test/recipes/25-test_crl.t||test/recipes/25-test_crl.t"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/recipes/25-test_crl.t||test/recipes/25-test_crl.t": [
          "File: test/recipes/25-test_crl.t -> test/recipes/25-test_crl.t",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: setup(\"test_crl\");",
          "20: require_ok(srctop_file('test','recipes','tconversion.pl'));",
          "",
          "[Removed Lines]",
          "18: plan tests => 3;",
          "",
          "[Added Lines]",
          "18: plan tests => 5;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "24: };",
          "26: ok(run(test(['crltest'])));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "28: ok(compare1stline([qw{openssl crl -noout -fingerprint -in},",
          "29:                    srctop_file('test', 'testcrl.pem')],",
          "30:                   'SHA1 Fingerprint=BA:F4:1B:AD:7A:9B:2F:09:16:BC:60:A7:0E:CE:79:2E:36:00:E7:B2'));",
          "31: ok(compare1stline([qw{openssl crl -noout -fingerprint -sha256 -in},",
          "32:                    srctop_file('test', 'testcrl.pem')],",
          "33:                   'SHA256 Fingerprint=B3:A9:FD:A7:2E:8C:3D:DF:D0:F1:C3:1A:96:60:B5:FD:B0:99:7C:7F:0E:E4:34:F5:DB:87:62:36:BC:F1:BC:1B'));",
          "35: sub compare1stline {",
          "36:     my ($cmdarray, $str) = @_;",
          "37:     my @lines = run(app($cmdarray), capture => 1);",
          "39:     return 1 if $lines[0] =~ m|^\\Q${str}\\E\\R$|;",
          "40:     note \"Got      \", $lines[0];",
          "41:     note \"Expected \", $str;",
          "42:     return 0;",
          "43: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c028052c4cfc39dc99f735f1743b18867547129f",
      "candidate_info": {
        "commit_hash": "c028052c4cfc39dc99f735f1743b18867547129f",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/c028052c4cfc39dc99f735f1743b18867547129f",
        "files": [
          "crypto/threads_win.c"
        ],
        "message": "Revert \"Fixed deadlock in CRYPTO_THREAD_run_once for Windows\"\n\nThis reverts commit edc18749bd5dfb7e12513d3978f78f9b56104fd6.\n\nThe proposed fix is incorrect. It marks the \"run_once\" code as having\nfinished before it has. The intended semantics of run_once is that no\nthreads should proceed until the code has run exactly once. With this\nchange the \"second\" thread will think the run_once code has already been\nrun and will continue, even though it is still in progress. This could\nresult in a crash or other incorrect behaviour.\n\nReviewed-by: Tim Hudson <tjh@openssl.org>",
        "before_after_code_files": [
          "crypto/threads_win.c||crypto/threads_win.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/threads_win.c||crypto/threads_win.c": [
          "File: crypto/threads_win.c -> crypto/threads_win.c"
        ]
      }
    }
  ]
}