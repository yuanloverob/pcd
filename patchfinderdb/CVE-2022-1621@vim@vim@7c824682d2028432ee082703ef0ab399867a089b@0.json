{
  "cve_id": "CVE-2022-1621",
  "cve_desc": "Heap buffer overflow in vim_strncpy find_word in GitHub repository vim/vim prior to 8.2.4919. This vulnerability is capable of crashing software, Bypass Protection Mechanism, Modify Memory, and possible remote execution",
  "repo": "vim/vim",
  "patch_hash": "7c824682d2028432ee082703ef0ab399867a089b",
  "patch_info": {
    "commit_hash": "7c824682d2028432ee082703ef0ab399867a089b",
    "repo": "vim/vim",
    "commit_url": "https://github.com/vim/vim/commit/7c824682d2028432ee082703ef0ab399867a089b",
    "files": [
      "src/errors.h",
      "src/mbyte.c",
      "src/spellfile.c",
      "src/testdir/test_spell_utf8.vim",
      "src/version.c"
    ],
    "message": "patch 8.2.4919: can add invalid bytes with :spellgood\n\nProblem:    Can add invalid bytes with :spellgood.\nSolution:   Check for a valid word string.",
    "before_after_code_files": [
      "src/errors.h||src/errors.h",
      "src/mbyte.c||src/mbyte.c",
      "src/spellfile.c||src/spellfile.c",
      "src/testdir/test_spell_utf8.vim||src/testdir/test_spell_utf8.vim",
      "src/version.c||src/version.c"
    ]
  },
  "patch_diff": {
    "src/errors.h||src/errors.h": [
      "File: src/errors.h -> src/errors.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "3273: EXTERN char e_missing_close_curly_str[]",
      "3274:  INIT(= N_(\"E1279: Missing '}': %s\"));",
      "3275: #endif",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "3276: #ifdef FEAT_SPELL",
      "3277: EXTERN char e_illegal_character_in_word[]",
      "3278:  INIT(= N_(\"E1280: Illegal character in word\"));",
      "3279: #endif",
      "",
      "---------------"
    ],
    "src/mbyte.c||src/mbyte.c": [
      "File: src/mbyte.c -> src/mbyte.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "4226:     convert_setup(&vimconv, NULL, NULL);",
      "4227: }",
      "",
      "[Removed Lines]",
      "4229: #if defined(FEAT_GUI_GTK) || defined(PROTO)",
      "",
      "[Added Lines]",
      "4229: #if defined(FEAT_GUI_GTK) || defined(FEAT_SPELL) || defined(PROTO)",
      "",
      "---------------"
    ],
    "src/spellfile.c||src/spellfile.c": [
      "File: src/spellfile.c -> src/spellfile.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "4390:     int  res = OK;",
      "4391:     char_u *p;",
      "4393:     (void)spell_casefold(curwin, word, len, foldword, MAXWLEN);",
      "4394:     for (p = pfxlist; res == OK; ++p)",
      "4395:     {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4394:     if (enc_utf8 && !utf_valid_string(word, NULL))",
      "4395:  return FAIL;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "6190:     int  i;",
      "6191:     char_u *spf;",
      "6193:     if (idx == 0)     // use internal wordlist",
      "6194:     {",
      "6195:  if (int_wordlist == NULL)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6197:     if (enc_utf8 && !utf_valid_string(word, NULL))",
      "6198:     {",
      "6199:  emsg(_(e_illegal_character_in_word));",
      "6200:  return;",
      "6201:     }",
      "",
      "---------------"
    ],
    "src/testdir/test_spell_utf8.vim||src/testdir/test_spell_utf8.vim": [
      "File: src/testdir/test_spell_utf8.vim -> src/testdir/test_spell_utf8.vim",
      "--- Hunk 1 ---",
      "[Context before]",
      "780:   bwipe!",
      "781: endfunc",
      "784: \" vim: shiftwidth=2 sts=2 expandtab",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "783: \" Invalid bytes may cause trouble when creating the word list.",
      "784: func Test_check_for_valid_word()",
      "785:   call assert_fails(\"spellgood! 0\u0002\\xac\", 'E1280:')",
      "786: endfunc",
      "",
      "---------------"
    ],
    "src/version.c||src/version.c": [
      "File: src/version.c -> src/version.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "747: static int included_patches[] =",
      "750:     4918,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "750:     4919,",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "5e59ea54c0c37c2f84770f068d95280069828774",
      "candidate_info": {
        "commit_hash": "5e59ea54c0c37c2f84770f068d95280069828774",
        "repo": "vim/vim",
        "commit_url": "https://github.com/vim/vim/commit/5e59ea54c0c37c2f84770f068d95280069828774",
        "files": [
          "src/spellfile.c",
          "src/testdir/test_spell.vim",
          "src/version.c"
        ],
        "message": "patch 9.0.0021: invalid memory access when adding word to spell word list\n\nProblem:    Invalid memory access when adding word with a control character to\n            the internal spell word list.\nSolution:   Disallow adding a word with control characters or a trailing\n            slash.",
        "before_after_code_files": [
          "src/spellfile.c||src/spellfile.c",
          "src/testdir/test_spell.vim||src/testdir/test_spell.vim",
          "src/version.c||src/version.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/spellfile.c||src/spellfile.c",
            "src/version.c||src/version.c"
          ],
          "candidate": [
            "src/spellfile.c||src/spellfile.c",
            "src/version.c||src/version.c"
          ]
        }
      },
      "candidate_diff": {
        "src/spellfile.c||src/spellfile.c": [
          "File: src/spellfile.c -> src/spellfile.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4366:     return (wordnode_T *)getroom(spin, sizeof(wordnode_T), TRUE);",
          "4367: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4373:     static int",
          "4374: valid_spell_word(char_u *word)",
          "4375: {",
          "4376:     char_u *p;",
          "4378:     if (enc_utf8 && !utf_valid_string(word, NULL))",
          "4379:  return FALSE;",
          "4380:     for (p = word; *p != NUL; p += mb_ptr2len(p))",
          "4381:  if (*p < ' ' || (p[0] == '/' && p[1] == NUL))",
          "4382:      return FALSE;",
          "4383:     return TRUE;",
          "4384: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4391:     char_u *p;",
          "4395:  return FAIL;",
          "4397:     (void)spell_casefold(curwin, word, len, foldword, MAXWLEN);",
          "",
          "[Removed Lines]",
          "4394:     if (enc_utf8 && !utf_valid_string(word, NULL))",
          "",
          "[Added Lines]",
          "4411:     if (!valid_spell_word(word))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "6194:     int  i;",
          "6195:     char_u *spf;",
          "6198:     {",
          "6199:  emsg(_(e_illegal_character_in_word));",
          "6200:  return;",
          "",
          "[Removed Lines]",
          "6197:     if (enc_utf8 && !utf_valid_string(word, NULL))",
          "",
          "[Added Lines]",
          "6214:     if (!valid_spell_word(word))",
          "",
          "---------------"
        ],
        "src/testdir/test_spell.vim||src/testdir/test_spell.vim": [
          "File: src/testdir/test_spell.vim -> src/testdir/test_spell.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "854:   bwipe!",
          "855: endfunc",
          "857: func LoadAffAndDic(aff_contents, dic_contents)",
          "858:   set enc=latin1",
          "859:   set spellfile=",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "857: func Test_spell_good_word_invalid()",
          "858:   \" This was adding a word with a 0x02 byte, which causes havoc.",
          "859:   enew",
          "860:   norm o0",
          "861:   sil! norm rzzWs00\u0002/",
          "862:   2",
          "863:   sil! norm VzGprzzW",
          "864:   sil! norm z=",
          "866:   bwipe!",
          "867:   \" clear the internal word list",
          "868:   set enc=latin1",
          "869:   set enc=utf-8",
          "870: endfunc",
          "",
          "---------------"
        ],
        "src/version.c||src/version.c": [
          "File: src/version.c -> src/version.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "736: static int included_patches[] =",
          "739:     20,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "739:     21,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2ebcc35826bc2deb04e5fc6d73332f55783e7f52",
      "candidate_info": {
        "commit_hash": "2ebcc35826bc2deb04e5fc6d73332f55783e7f52",
        "repo": "vim/vim",
        "commit_url": "https://github.com/vim/vim/commit/2ebcc35826bc2deb04e5fc6d73332f55783e7f52",
        "files": [
          "src/spellfile.c",
          "src/testdir/test_spell.vim",
          "src/version.c"
        ],
        "message": "patch 9.0.0052: \"zG\" may throw an error if invalid character follows\n\nProblem:    \"zG\" may throw an error if invalid character follows.\nSolution:   Pass the word length to valid_spell_word(). (Ken Takata,\n            closes #10737)",
        "before_after_code_files": [
          "src/spellfile.c||src/spellfile.c",
          "src/testdir/test_spell.vim||src/testdir/test_spell.vim",
          "src/version.c||src/version.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/spellfile.c||src/spellfile.c",
            "src/version.c||src/version.c"
          ],
          "candidate": [
            "src/spellfile.c||src/spellfile.c",
            "src/version.c||src/version.c"
          ]
        }
      },
      "candidate_diff": {
        "src/spellfile.c||src/spellfile.c": [
          "File: src/spellfile.c -> src/spellfile.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4373:     static int",
          "4375: {",
          "4376:     char_u *p;",
          "4379:  return FALSE;",
          "4381:  if (*p < ' ' || (p[0] == '/' && p[1] == NUL))",
          "4382:      return FALSE;",
          "4383:     return TRUE;",
          "",
          "[Removed Lines]",
          "4374: valid_spell_word(char_u *word)",
          "4378:     if (enc_utf8 && !utf_valid_string(word, NULL))",
          "4380:     for (p = word; *p != NUL; p += mb_ptr2len(p))",
          "",
          "[Added Lines]",
          "4374: valid_spell_word(char_u *word, char_u *end)",
          "4378:     if (enc_utf8 && !utf_valid_string(word, end))",
          "4380:     for (p = word; *p != NUL && p < end; p += mb_ptr2len(p))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4408:     char_u *p;",
          "4412:  return FAIL;",
          "4414:     (void)spell_casefold(curwin, word, len, foldword, MAXWLEN);",
          "",
          "[Removed Lines]",
          "4411:     if (!valid_spell_word(word))",
          "",
          "[Added Lines]",
          "4411:     if (!valid_spell_word(word, word + len))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "6211:     int  i;",
          "6212:     char_u *spf;",
          "6215:     {",
          "6216:  emsg(_(e_illegal_character_in_word));",
          "6217:  return;",
          "",
          "[Removed Lines]",
          "6214:     if (!valid_spell_word(word))",
          "",
          "[Added Lines]",
          "6214:     if (!valid_spell_word(word, word + len))",
          "",
          "---------------"
        ],
        "src/testdir/test_spell.vim||src/testdir/test_spell.vim": [
          "File: src/testdir/test_spell.vim -> src/testdir/test_spell.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "884:   sil! norm z=",
          "886:   bwipe!",
          "887: endfunc",
          "889: func LoadAffAndDic(aff_contents, dic_contents)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "887: endfunc",
          "889: func Test_spell_good_word_slash()",
          "890:   \" This caused E1280.",
          "891:   new",
          "892:   norm afoo /",
          "893:   1",
          "894:   norm zG",
          "896:   bwipe!",
          "",
          "---------------"
        ],
        "src/version.c||src/version.c": [
          "File: src/version.c -> src/version.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "736: static int included_patches[] =",
          "739:     51,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "739:     52,",
          "",
          "---------------"
        ]
      }
    }
  ]
}