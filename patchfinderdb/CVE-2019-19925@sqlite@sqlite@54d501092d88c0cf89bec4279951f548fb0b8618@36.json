{
  "cve_id": "CVE-2019-19925",
  "cve_desc": "zipfileUpdate in ext/misc/zipfile.c in SQLite 3.30.1 mishandles a NULL pathname during an update of a ZIP archive.",
  "repo": "sqlite/sqlite",
  "patch_hash": "54d501092d88c0cf89bec4279951f548fb0b8618",
  "patch_info": {
    "commit_hash": "54d501092d88c0cf89bec4279951f548fb0b8618",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/54d501092d88c0cf89bec4279951f548fb0b8618",
    "files": [
      "ext/misc/zipfile.c",
      "manifest",
      "manifest.uuid",
      "test/zipfile.test"
    ],
    "message": "Fix the zipfile extension so that INSERT works even if the pathname of the file being inserted is a NULL.  Bug discovered by the Yongheng and Rui fuzzer.\n\nFossilOrigin-Name: a80f84b511231204658304226de3e075a55afc2e3f39ac063716f7a57f585c06",
    "before_after_code_files": [
      "ext/misc/zipfile.c||ext/misc/zipfile.c",
      "manifest.uuid||manifest.uuid",
      "test/zipfile.test||test/zipfile.test"
    ]
  },
  "patch_diff": {
    "ext/misc/zipfile.c||ext/misc/zipfile.c": [
      "File: ext/misc/zipfile.c -> ext/misc/zipfile.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1620:     if( rc==SQLITE_OK ){",
      "1621:       zPath = (const char*)sqlite3_value_text(apVal[2]);",
      "1622:       nPath = (int)strlen(zPath);",
      "1623:       mTime = zipfileGetTime(apVal[4]);",
      "1624:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1622:       if( zPath==0 ) zPath = \"\";",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: fccfb8a9ed3c1df9f23762bb8df6fdf36a21118899e3fae41f451169a5f2c08e",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "test/zipfile.test||test/zipfile.test": [
      "File: test/zipfile.test -> test/zipfile.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "795:   } {. ./x1.txt ./x2.txt}",
      "796: }",
      "798: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "798: # 2019-12-18 Yongheng and Rui fuzzer",
      "799: #",
      "800: do_execsql_test 13.10 {",
      "801:   DROP TABLE IF EXISTS t0;",
      "802:   DROP TABLE IF EXISTS t1;",
      "803:   CREATE TABLE t0(a,b,c,d,e,f,g);",
      "804:   REPLACE INTO t0(c,b,f) VALUES(10,10,10);",
      "805:   CREATE VIRTUAL TABLE t1 USING zipfile('h.zip');",
      "806:   REPLACE INTO t1 SELECT * FROM t0;",
      "807:   SELECT quote(name),quote(mode),quote(mtime),quote(sz),quote(rawdata),",
      "808:          quote(data),quote(method) FROM t1;",
      "809: } {'' 10 10 2 X'3130' X'3130' 0}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "6ba81ef1bf73dc9ba14094bcc9913601cfe9e475",
      "candidate_info": {
        "commit_hash": "6ba81ef1bf73dc9ba14094bcc9913601cfe9e475",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/6ba81ef1bf73dc9ba14094bcc9913601cfe9e475",
        "files": [
          "ext/fts3/fts3_write.c",
          "ext/fts5/fts5_index.c",
          "ext/fts5/fts5_storage.c",
          "ext/fts5/test/fts5circref.test",
          "ext/rtree/rtree.c",
          "ext/rtree/rtreecirc.test",
          "manifest",
          "manifest.uuid",
          "src/build.c",
          "src/prepare.c",
          "src/sqlite.h.in",
          "src/sqliteInt.h",
          "src/trigger.c",
          "test/fts3aa.test"
        ],
        "message": "Add new sqlite3_prepare_v3() flag SQLITE_PREPARE_NO_VTAB, for preparing statements that are not allowed to use any virtual tables. Use this to prevent circular references in triggers on virtual table shadow tables from causing resource leaks.\n\nFossilOrigin-Name: da587d18575ac06a6b65fec1d106f0cc65bc10f493ca6c6b99117a2162d15a52",
        "before_after_code_files": [
          "ext/fts3/fts3_write.c||ext/fts3/fts3_write.c",
          "ext/fts5/fts5_index.c||ext/fts5/fts5_index.c",
          "ext/fts5/fts5_storage.c||ext/fts5/fts5_storage.c",
          "ext/fts5/test/fts5circref.test||ext/fts5/test/fts5circref.test",
          "ext/rtree/rtree.c||ext/rtree/rtree.c",
          "ext/rtree/rtreecirc.test||ext/rtree/rtreecirc.test",
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c",
          "src/prepare.c||src/prepare.c",
          "src/sqlite.h.in||src/sqlite.h.in",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/trigger.c||src/trigger.c",
          "test/fts3aa.test||test/fts3aa.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/fts3_write.c||ext/fts3/fts3_write.c": [
          "File: ext/fts3/fts3_write.c -> ext/fts3/fts3_write.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "397:   pStmt = p->aStmt[eStmt];",
          "398:   if( !pStmt ){",
          "399:     char *zSql;",
          "400:     if( eStmt==SQL_CONTENT_INSERT ){",
          "401:       zSql = sqlite3_mprintf(azSql[eStmt], p->zDb, p->zName, p->zWriteExprlist);",
          "402:     }else if( eStmt==SQL_SELECT_CONTENT_BY_ROWID ){",
          "403:       zSql = sqlite3_mprintf(azSql[eStmt], p->zReadExprlist);",
          "404:     }else{",
          "405:       zSql = sqlite3_mprintf(azSql[eStmt], p->zDb, p->zName);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "399:     int f = SQLITE_PREPARE_PERSISTENT|SQLITE_PREPARE_NO_VTAB;",
          "404:       f &= ~SQLITE_PREPARE_NO_VTAB;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "407:     if( !zSql ){",
          "408:       rc = SQLITE_NOMEM;",
          "409:     }else{",
          "412:       sqlite3_free(zSql);",
          "413:       assert( rc==SQLITE_OK || pStmt==0 );",
          "414:       p->aStmt[eStmt] = pStmt;",
          "",
          "[Removed Lines]",
          "410:       rc = sqlite3_prepare_v3(p->db, zSql, -1, SQLITE_PREPARE_PERSISTENT,",
          "411:                               &pStmt, NULL);",
          "",
          "[Added Lines]",
          "412:       rc = sqlite3_prepare_v3(p->db, zSql, -1, f, &pStmt, NULL);",
          "",
          "---------------"
        ],
        "ext/fts5/fts5_index.c||ext/fts5/fts5_index.c": [
          "File: ext/fts5/fts5_index.c -> ext/fts5/fts5_index.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "729:   if( p->rc==SQLITE_OK ){",
          "730:     if( zSql ){",
          "731:       p->rc = sqlite3_prepare_v3(p->pConfig->db, zSql, -1,",
          "733:     }else{",
          "734:       p->rc = SQLITE_NOMEM;",
          "735:     }",
          "",
          "[Removed Lines]",
          "732:                                  SQLITE_PREPARE_PERSISTENT, ppStmt, 0);",
          "",
          "[Added Lines]",
          "732:           SQLITE_PREPARE_PERSISTENT|SQLITE_PREPARE_NO_VTAB,",
          "733:           ppStmt, 0);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "770:   if( p->rc!=SQLITE_OK ) return;",
          "772:   if( p->pDeleter==0 ){",
          "774:     Fts5Config *pConfig = p->pConfig;",
          "775:     char *zSql = sqlite3_mprintf(",
          "776:         \"DELETE FROM '%q'.'%q_data' WHERE id>=? AND id<=?\",",
          "777:           pConfig->zDb, pConfig->zName",
          "778:     );",
          "790:   }",
          "792:   sqlite3_bind_int64(p->pDeleter, 1, iFirst);",
          "",
          "[Removed Lines]",
          "773:     int rc;",
          "779:     if( zSql==0 ){",
          "780:       rc = SQLITE_NOMEM;",
          "781:     }else{",
          "782:       rc = sqlite3_prepare_v3(pConfig->db, zSql, -1,",
          "783:                               SQLITE_PREPARE_PERSISTENT, &p->pDeleter, 0);",
          "784:       sqlite3_free(zSql);",
          "785:     }",
          "786:     if( rc!=SQLITE_OK ){",
          "787:       p->rc = rc;",
          "788:       return;",
          "789:     }",
          "",
          "[Added Lines]",
          "779:     if( fts5IndexPrepareStmt(p, &p->pDeleter, zSql) ) return;",
          "",
          "---------------"
        ],
        "ext/fts5/fts5_storage.c||ext/fts5/fts5_storage.c": [
          "File: ext/fts5/fts5_storage.c -> ext/fts5/fts5_storage.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "136:     if( zSql==0 ){",
          "137:       rc = SQLITE_NOMEM;",
          "138:     }else{",
          "141:       sqlite3_free(zSql);",
          "142:       if( rc!=SQLITE_OK && pzErrMsg ){",
          "",
          "[Removed Lines]",
          "139:       rc = sqlite3_prepare_v3(pC->db, zSql, -1,",
          "140:                               SQLITE_PREPARE_PERSISTENT, &p->aStmt[eStmt], 0);",
          "",
          "[Added Lines]",
          "139:       int f = SQLITE_PREPARE_PERSISTENT;",
          "140:       if( eStmt>FTS5_STMT_LOOKUP ) f |= SQLITE_PREPARE_NO_VTAB;",
          "141:       rc = sqlite3_prepare_v3(pC->db, zSql, -1, f, &p->aStmt[eStmt], 0);",
          "",
          "---------------"
        ],
        "ext/fts5/test/fts5circref.test||ext/fts5/test/fts5circref.test": [
          "File: ext/fts5/test/fts5circref.test -> ext/fts5/test/fts5circref.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2018 Dec 22",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #*************************************************************************",
          "11: # This file implements regression tests for SQLite library.  The",
          "12: # focus of this script is testing the FTS5 module.",
          "13: #",
          "15: source [file join [file dirname [info script]] fts5_common.tcl]",
          "16: set testprefix fts5circref",
          "18: # If SQLITE_ENABLE_FTS5 is not defined, omit this file.",
          "19: ifcapable !fts5 {",
          "20:   finish_test",
          "21:   return",
          "22: }",
          "24: do_execsql_test 1.0 {",
          "25:   CREATE VIRTUAL TABLE tt USING fts5(a);",
          "26:   SELECT name FROM sqlite_master ORDER BY 1;",
          "27: } {",
          "28:   tt tt_config tt_content tt_data tt_docsize tt_idx",
          "29: }",
          "30: db_save_and_close",
          "32: foreach {tn schema sql} {",
          "33:   1 {",
          "34:     CREATE TRIGGER tr1 AFTER INSERT ON tt_config BEGIN",
          "35:       SELECT * FROM tt;",
          "36:     END;",
          "37:   } {",
          "38:     INSERT INTO tt(tt, rank) VALUES('usermerge', 4);",
          "39:   }",
          "41:   2 {",
          "42:     CREATE TRIGGER tr1 AFTER INSERT ON tt_docsize BEGIN",
          "43:       SELECT * FROM tt;",
          "44:     END;",
          "45:   } {",
          "46:     INSERT INTO tt(a) VALUES('one two three');",
          "47:   }",
          "49:   3 {",
          "50:     CREATE TRIGGER tr1 AFTER INSERT ON tt_content BEGIN",
          "51:       SELECT * FROM tt;",
          "52:     END;",
          "53:   } {",
          "54:     INSERT INTO tt(a) VALUES('one two three');",
          "55:   }",
          "57:   4 {",
          "58:     CREATE TRIGGER tr1 AFTER INSERT ON tt_data BEGIN",
          "59:       SELECT * FROM tt;",
          "60:     END;",
          "61:   } {",
          "62:     INSERT INTO tt(a) VALUES('one two three');",
          "63:   }",
          "65:   5 {",
          "66:     CREATE TRIGGER tr1 AFTER INSERT ON tt_idx BEGIN",
          "67:       SELECT * FROM tt;",
          "68:     END;",
          "69:   } {",
          "70:     INSERT INTO tt(a) VALUES('one two three');",
          "71:   }",
          "72: } {",
          "73:   db_restore_and_reopen",
          "74:   do_execsql_test 1.1.$tn.1 $schema",
          "75:   do_catchsql_test 1.1.$tn.2 $sql {1 {SQL logic error}}",
          "76:   db close",
          "77: }",
          "80: finish_test",
          "",
          "---------------"
        ],
        "ext/rtree/rtree.c||ext/rtree/rtree.c": [
          "File: ext/rtree/rtree.c -> ext/rtree/rtree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3423:   };",
          "3424:   sqlite3_stmt **appStmt[N_STATEMENT];",
          "3425:   int i;",
          "3427:   pRtree->db = db;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3426:   const int f = SQLITE_PREPARE_PERSISTENT|SQLITE_PREPARE_NO_VTAB;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3479:     }",
          "3480:     zSql = sqlite3_mprintf(zFormat, zDb, zPrefix);",
          "3481:     if( zSql ){",
          "3484:     }else{",
          "3485:       rc = SQLITE_NOMEM;",
          "3486:     }",
          "",
          "[Removed Lines]",
          "3482:       rc = sqlite3_prepare_v3(db, zSql, -1, SQLITE_PREPARE_PERSISTENT,",
          "3483:                               appStmt[i], 0);",
          "",
          "[Added Lines]",
          "3483:       rc = sqlite3_prepare_v3(db, zSql, -1, f, appStmt[i], 0);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3510:       if( zSql==0 ){",
          "3511:         rc = SQLITE_NOMEM;",
          "3512:       }else{",
          "3515:         sqlite3_free(zSql);",
          "3516:       }",
          "3517:     }",
          "",
          "[Removed Lines]",
          "3513:         rc = sqlite3_prepare_v3(db, zSql, -1, SQLITE_PREPARE_PERSISTENT,",
          "3514:                                 &pRtree->pWriteAux, 0);",
          "",
          "[Added Lines]",
          "3513:         rc = sqlite3_prepare_v3(db, zSql, -1, f, &pRtree->pWriteAux, 0);",
          "",
          "---------------"
        ],
        "ext/rtree/rtreecirc.test||ext/rtree/rtreecirc.test": [
          "File: ext/rtree/rtreecirc.test -> ext/rtree/rtreecirc.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2018 Dec 22",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #*************************************************************************",
          "11: # This file implements regression tests for SQLite library.  The",
          "12: # focus of this script is testing the FTS5 module.",
          "13: #",
          "15: if {![info exists testdir]} {",
          "16:   set testdir [file join [file dirname [info script]] .. .. test]",
          "17: }",
          "18: source [file join [file dirname [info script]] rtree_util.tcl]",
          "19: source $testdir/tester.tcl",
          "20: set testprefix rtreecirc",
          "22: ifcapable !rtree {",
          "23:   finish_test",
          "24:   return",
          "25: }",
          "27: do_execsql_test 1.0 {",
          "28:   CREATE VIRTUAL TABLE rt USING rtree(id, x1, x2, y1, y2);",
          "29:   SELECT name FROM sqlite_master ORDER BY 1;",
          "30: } {",
          "31:   rt rt_node rt_parent rt_rowid",
          "32: }",
          "33: db_save_and_close",
          "35: foreach {tn schema sql} {",
          "36:   1 {",
          "37:     CREATE TRIGGER tr1 AFTER INSERT ON rt_node BEGIN",
          "38:       SELECT * FROM rt;",
          "39:     END;",
          "40:   } {",
          "41:     INSERT INTO rt VALUES(1, 2, 3, 4, 5);",
          "42:   }",
          "43:   2 {",
          "44:     CREATE TRIGGER tr1 AFTER INSERT ON rt_parent BEGIN",
          "45:       SELECT * FROM rt;",
          "46:     END;",
          "47:   } {",
          "48:     INSERT INTO rt VALUES(1, 2, 3, 4, 5);",
          "49:   }",
          "50:   3 {",
          "51:     CREATE TRIGGER tr1 AFTER INSERT ON rt_rowid BEGIN",
          "52:       SELECT * FROM rt;",
          "53:     END;",
          "54:   } {",
          "55:     INSERT INTO rt VALUES(1, 2, 3, 4, 5);",
          "56:   }",
          "57: } {",
          "58:   db_restore_and_reopen",
          "59:   do_execsql_test  1.1.$tn.1 $schema",
          "60:   do_catchsql_test 1.1.$tn.2 $sql {1 {no such table: main.rt}}",
          "61:   db close",
          "62: }",
          "65: finish_test",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 1abb83d29a06308c96bea379311b390240347c5f81824749348d18ad75840c96",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "355:   p = sqlite3FindTable(db, zName, zDbase);",
          "356:   if( p==0 ){",
          "358: #ifndef SQLITE_OMIT_VIRTUALTABLE",
          "368:     }",
          "369: #endif",
          "377:     }",
          "378:   }",
          "",
          "[Removed Lines]",
          "357:     const char *zMsg = flags & LOCATE_VIEW ? \"no such view\" : \"no such table\";",
          "362:     Module *pMod = (Module*)sqlite3HashFind(&db->aModule, zName);",
          "363:     if( pMod==0 && sqlite3_strnicmp(zName, \"pragma_\", 7)==0 ){",
          "364:       pMod = sqlite3PragmaVtabRegister(db, zName);",
          "365:     }",
          "366:     if( pMod && sqlite3VtabEponymousTableInit(pParse, pMod) ){",
          "367:       return pMod->pEpoTab;",
          "370:     if( (flags & LOCATE_NOERR)==0 ){",
          "371:       if( zDbase ){",
          "372:         sqlite3ErrorMsg(pParse, \"%s: %s.%s\", zMsg, zDbase, zName);",
          "373:       }else{",
          "374:         sqlite3ErrorMsg(pParse, \"%s: %s\", zMsg, zName);",
          "375:       }",
          "376:       pParse->checkSchema = 1;",
          "",
          "[Added Lines]",
          "361:     if( pParse->disableVtab==0 ){",
          "362:       Module *pMod = (Module*)sqlite3HashFind(&db->aModule, zName);",
          "363:       if( pMod==0 && sqlite3_strnicmp(zName, \"pragma_\", 7)==0 ){",
          "364:         pMod = sqlite3PragmaVtabRegister(db, zName);",
          "365:       }",
          "366:       if( pMod && sqlite3VtabEponymousTableInit(pParse, pMod) ){",
          "367:         return pMod->pEpoTab;",
          "368:       }",
          "371:     if( flags & LOCATE_NOERR ) return 0;",
          "372:     pParse->checkSchema = 1;",
          "373:   }else if( IsVirtual(p) && pParse->disableVtab ){",
          "374:     p = 0;",
          "375:   }",
          "377:   if( p==0 ){",
          "378:     const char *zMsg = flags & LOCATE_VIEW ? \"no such view\" : \"no such table\";",
          "379:     if( zDbase ){",
          "380:       sqlite3ErrorMsg(pParse, \"%s: %s.%s\", zMsg, zDbase, zName);",
          "381:     }else{",
          "382:       sqlite3ErrorMsg(pParse, \"%s: %s\", zMsg, zName);",
          "",
          "---------------"
        ],
        "src/prepare.c||src/prepare.c": [
          "File: src/prepare.c -> src/prepare.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "545:     sParse.disableLookaside++;",
          "546:     db->lookaside.bDisable++;",
          "547:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "548:   sParse.disableVtab = (prepFlags & SQLITE_PREPARE_NO_VTAB)!=0;",
          "",
          "---------------"
        ],
        "src/sqlite.h.in||src/sqlite.h.in": [
          "File: src/sqlite.h.in -> src/sqlite.h.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "3641: #define SQLITE_PREPARE_PERSISTENT              0x01",
          "3642: #define SQLITE_PREPARE_NORMALIZE               0x02",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3648: #define SQLITE_PREPARE_NO_VTAB                 0x04",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h"
        ],
        "src/trigger.c||src/trigger.c": [
          "File: src/trigger.c -> src/trigger.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "916:   pSubParse->zAuthContext = pTrigger->zName;",
          "917:   pSubParse->eTriggerOp = pTrigger->op;",
          "918:   pSubParse->nQueryLoop = pParse->nQueryLoop;",
          "920:   v = sqlite3GetVdbe(pSubParse);",
          "921:   if( v ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "919:   pSubParse->disableVtab = pParse->disableVtab;",
          "",
          "---------------"
        ],
        "test/fts3aa.test||test/fts3aa.test": [
          "File: test/fts3aa.test -> test/fts3aa.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "250:   CREATE VIRTUAL TABLE t10 USING fts3(<, b, c);",
          "251: }",
          "253: expand_all_sql db",
          "254: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "253: do_execsql_test 10.0 {",
          "254:   CREATE VIRTUAL TABLE z1 USING fts3;",
          "255:   INSERT INTO z1 VALUES('one two three'),('four one five'),('six two five');",
          "256:   CREATE TRIGGER z1r1 AFTER DELETE ON z1_content BEGIN",
          "257:     DELETE FROM z1;",
          "258:   END;",
          "259: }",
          "260: do_catchsql_test 10.1 {",
          "261:   DELETE FROM z1;",
          "262: } {1 {SQL logic error}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4d02b5f7d0e346ea8faeeb8d65d57f516d1def44",
      "candidate_info": {
        "commit_hash": "4d02b5f7d0e346ea8faeeb8d65d57f516d1def44",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/4d02b5f7d0e346ea8faeeb8d65d57f516d1def44",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in"
        ],
        "message": "Add casts to shell.c.in to avoid warnings on systems where size_t is 32 bits.\n\nFossilOrigin-Name: fe014288ac03cdf0dc5410b7d45cad4768759b52746c0a22bce2fc03779c5d5a",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 9e66458592d40fbd96ea5f21339573110ca1cfe328238a020c9420a87d35dd72",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "1256:   }",
          "1257:   sz = sqlite3_value_bytes(argv[0]);",
          "1258:   if( bBin ){",
          "1260:   }else{",
          "1261:     const char *z = (const char*)sqlite3_value_text(argv[0]);",
          "1263:     if( z && strstr(z,\"\\r\\n\")!=0 ) hasCRNL = 1;",
          "1265:   }",
          "1266:   fclose(f);",
          "1267:   f = 0;",
          "",
          "[Removed Lines]",
          "1259:     x = fwrite(sqlite3_value_blob(argv[0]), 1, sz, f);",
          "1264:     x = fwrite(sqlite3_value_text(argv[0]), 1, sz, f);",
          "",
          "[Added Lines]",
          "1259:     x = fwrite(sqlite3_value_blob(argv[0]), 1, (size_t)sz, f);",
          "1264:     x = fwrite(sqlite3_value_text(argv[0]), 1, (size_t)sz, f);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1294:     sqlite3_result_error_nomem(context);",
          "1295:     goto edit_func_end;",
          "1296:   }",
          "1298:   fclose(f);",
          "1299:   f = 0;",
          "1300:   if( x!=sz ){",
          "",
          "[Removed Lines]",
          "1297:   x = fread(p, 1, sz, f);",
          "",
          "[Added Lines]",
          "1297:   x = fread(p, 1, (size_t)sz, f);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b92b019fe3d0669504a94dd8c26b63d5dd52441e",
      "candidate_info": {
        "commit_hash": "b92b019fe3d0669504a94dd8c26b63d5dd52441e",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/b92b019fe3d0669504a94dd8c26b63d5dd52441e",
        "files": [
          "ext/fts5/fts5_index.c",
          "ext/fts5/fts5_vocab.c",
          "ext/fts5/test/fts5corrupt3.test",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Fix another buffer overrun that could occur when quering a corrupt database using an fts5vocab table.\n\nFossilOrigin-Name: b80119bd6044c0993210115732b6ae7b4b0b29c1471b0723bef24f2052c8e671",
        "before_after_code_files": [
          "ext/fts5/fts5_index.c||ext/fts5/fts5_index.c",
          "ext/fts5/fts5_vocab.c||ext/fts5/fts5_vocab.c",
          "ext/fts5/test/fts5corrupt3.test||ext/fts5/test/fts5corrupt3.test",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts5/fts5_index.c||ext/fts5/fts5_index.c": [
          "File: ext/fts5/fts5_index.c -> ext/fts5/fts5_index.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1654:   iOff += fts5GetVarint32(&a[iOff], nNew);",
          "1656:     p->rc = FTS5_CORRUPT;",
          "1657:     return;",
          "1658:   }",
          "",
          "[Removed Lines]",
          "1655:   if( iOff+nNew>pIter->pLeaf->szLeaf || nKeep>pIter->term.n ){",
          "",
          "[Added Lines]",
          "1655:   if( iOff+nNew>pIter->pLeaf->szLeaf || nKeep>pIter->term.n || nNew==0 ){",
          "",
          "---------------"
        ],
        "ext/fts5/fts5_vocab.c||ext/fts5/fts5_vocab.c": [
          "File: ext/fts5/fts5_vocab.c -> ext/fts5/fts5_vocab.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "484:       int nTerm;",
          "486:       zTerm = sqlite3Fts5IterTerm(pCsr->pIter, &nTerm);",
          "487:       if( pCsr->nLeTerm>=0 ){",
          "488:         int nCmp = MIN(nTerm, pCsr->nLeTerm);",
          "489:         int bCmp = memcmp(pCsr->zLeTerm, zTerm, nCmp);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "487:       assert( nTerm>=0 );",
          "",
          "---------------"
        ],
        "ext/fts5/test/fts5corrupt3.test||ext/fts5/test/fts5corrupt3.test": [
          "File: ext/fts5/test/fts5corrupt3.test -> ext/fts5/test/fts5corrupt3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "6641:   INSERT INTO t1(t1) VALUES('integrity-check');",
          "6642: } {1 {database disk image is malformed}}",
          "6645: sqlite3_fts5_may_be_corrupt 0",
          "6646: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6644: #--------------------------------------------------------------------------",
          "6645: reset_db",
          "6646: do_test 49.0 {",
          "6647:   sqlite3 db {}",
          "6648:   db deserialize [decode_hexdb {",
          "6649: | size 40960 pagesize 4096 filename crash-fd87385402ecf5.db",
          "6650: | page 1 offset 0",
          "6651: |      0: 53 51 4c 69 74 65 20 66 6f 72 6d 61 74 20 33 00   SQLite format 3.",
          "6652: |     16: 10 00 01 01 00 40 20 20 00 00 00 00 00 00 00 0a   .....@  ........",
          "6653: |     32: 00 00 00 00 00 00 00 00 00 00 00 0d 00 00 00 04   ................",
          "6654: |     48: 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00   ................",
          "6655: |     96: 00 00 00 00 0d 00 00 00 0d 0b 6e 00 0f a3 0f 4c   ..........n....L",
          "6656: |    112: 0e e1 0e 81 0e 24 0d cc 0d 72 0d 1b 0c b0 0c 50   .....$...r.....P",
          "6657: |    128: 0b f8 0b b3 0b 6e 00 00 00 00 00 00 00 00 00 00   .....n..........",
          "6658: |   2912: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 43 0d   ..............C.",
          "6659: |   2928: 06 17 11 11 08 75 74 61 62 6c 65 74 34 74 34 43   .....utablet4t4C",
          "6660: |   2944: 52 45 41 54 45 20 56 49 52 54 55 41 4c 20 54 41   REATE VIRTUAL TA",
          "6661: |   2960: 42 4c 45 20 74 34 20 55 53 49 4e 47 20 66 74 73   BLE t4 USING fts",
          "6662: |   2976: 35 76 6f 63 61 62 28 27 74 32 27 2c 20 27 72 6f   5vocab('t2', 'ro",
          "6663: |   2992: 77 27 29 43 0c 06 17 11 11 08 75 74 61 62 6c 65   w')C......utable",
          "6664: |   3008: 74 33 74 33 43 52 45 41 54 45 20 56 49 52 54 55   t3t3CREATE VIRTU",
          "6665: |   3024: 41 4c 20 54 41 42 4c 45 20 74 33 20 55 53 49 4e   AL TABLE t3 USIN",
          "6666: |   3040: 47 20 66 74 73 35 76 6f 63 61 62 28 27 74 31 27   G fts5vocab('t1'",
          "6667: |   3056: 2c 20 27 72 6f 77 27 29 56 0b 06 17 1f 1f 01 7d   , 'row')V.......",
          "6668: |   3072: 74 61 62 6c 65 74 32 5f 63 6f 6e 66 69 67 74 32   tablet2_configt2",
          "6669: |   3088: 5f 63 6f 6e 66 69 67 0a 43 52 45 41 54 45 20 54   _config.CREATE T",
          "6670: |   3104: 41 42 4c 45 20 27 74 32 5f 63 6f 6e 66 69 67 27   ABLE 't2_config'",
          "6671: |   3120: 28 6b 20 50 52 49 4d 41 52 59 20 4b 45 59 2c 20   (k PRIMARY KEY,",
          "6672: |   3136: 76 29 20 57 49 54 48 4f 55 54 20 52 4f 57 49 44   v) WITHOUT ROWID",
          "6673: |   3152: 5e 0a 07 17 21 21 01 81 07 74 61 62 6c 65 74 32   ^...!!...tablet2",
          "6674: |   3168: 5f 63 6f 6e 74 65 6e 74 74 32 5f 63 6f 6e 74 65   _contentt2_conte",
          "6675: |   3184: 6e 74 09 43 52 45 41 54 45 20 54 41 42 4c 45 20   nt.CREATE TABLE",
          "6676: |   3200: 27 74 32 5f 63 6f 6e 74 65 6e 74 27 28 69 64 20   't2_content'(id",
          "6677: |   3216: 49 4e 54 45 47 45 52 20 50 52 49 4d 41 52 59 20   INTEGER PRIMARY",
          "6678: |   3232: 4b 45 59 2c 20 63 30 2c 20 63 31 2c 20 63 32 29   KEY, c0, c1, c2)",
          "6679: |   3248: 69 09 07 17 19 19 01 81 2d 74 61 62 6c 65 74 32   i.......-tablet2",
          "6680: |   3264: 5f 69 64 78 74 32 5f 69 64 78 08 43 52 45 41 54   _idxt2_idx.CREAT",
          "6681: |   3280: 45 20 54 41 42 4c 45 20 27 74 32 5f 69 64 78 27   E TABLE 't2_idx'",
          "6682: |   3296: 28 73 65 67 69 64 2c 20 74 65 72 6d 2c 20 70 67   (segid, term, pg",
          "6683: |   3312: 6e 6f 2c 20 50 52 49 4d 41 52 59 20 4b 45 59 28   no, PRIMARY KEY(",
          "6684: |   3328: 73 65 67 69 64 2c 20 74 65 72 6d 29 29 20 57 49   segid, term)) WI",
          "6685: |   3344: 54 48 4f 55 54 20 52 4f 57 49 44 55 08 07 17 1b   THOUT ROWIDU....",
          "6686: |   3360: 1b 01 81 01 74 61 62 6c 65 74 32 5f 64 61 74 61   ....tablet2_data",
          "6687: |   3376: 74 32 5f 64 61 74 61 07 43 52 45 41 54 45 20 54   t2_data.CREATE T",
          "6688: |   3392: 41 42 4c 45 20 27 74 32 5f 64 61 74 61 27 28 69   ABLE 't2_data'(i",
          "6689: |   3408: 64 20 49 4e 54 45 47 45 52 20 50 52 49 4d 41 52   d INTEGER PRIMAR",
          "6690: |   3424: 59 20 4b 45 59 2c 20 62 6c 6f 63 6b 20 42 4c 4f   Y KEY, block BLO",
          "6691: |   3440: 42 29 58 07 07 17 11 11 08 81 1d 74 61 62 6c 65   B)X........table",
          "6692: |   3456: 74 32 74 32 43 52 45 41 54 45 20 56 49 52 54 55   t2t2CREATE VIRTU",
          "6693: |   3472: 41 4c 20 54 41 42 4c 45 20 74 32 20 55 53 49 4e   AL TABLE t2 USIN",
          "6694: |   3488: 47 20 66 74 73 35 28 27 61 27 2c 5b 62 5d 2c 22   G fts5('a',[b],.",
          "6695: |   3504: 63 22 2c 64 65 74 61 69 6c 3d 6e 6f 6e 65 2c 63   c.,detail=none,c",
          "6696: |   3520: 6f 6c 75 6d 6e 73 69 7a 65 3d 30 29 56 06 06 17   olumnsize=0)V...",
          "6697: |   3536: 1f 1f 01 7d 74 61 62 6c 65 74 31 5f 63 6f 6e 66   ....tablet1_conf",
          "6698: |   3552: 69 67 74 31 5f 63 6f 6e 66 69 67 06 43 52 45 41   igt1_config.CREA",
          "6699: |   3568: 54 45 20 54 41 42 4c 45 20 27 74 31 5f 63 6f 6e   TE TABLE 't1_con",
          "6700: |   3584: 66 69 67 27 28 6b 20 50 52 49 4d 41 52 59 20 4b   fig'(k PRIMARY K",
          "6701: |   3600: 45 59 2c 20 76 29 20 57 49 54 48 4f 55 54 20 52   EY, v) WITHOUT R",
          "6702: |   3616: 4f 57 49 44 5b 05 07 17 21 21 01 81 01 74 61 62   OWID[...!!...tab",
          "6703: |   3632: 6c 65 74 31 5f 64 6f 63 73 69 7a 65 74 31 5f 64   let1_docsizet1_d",
          "6704: |   3648: 6f 63 73 69 7a 65 05 43 52 45 41 54 45 20 54 41   ocsize.CREATE TA",
          "6705: |   3664: 42 4c 45 20 27 74 31 5f 64 6f 63 73 69 7a 65 27   BLE 't1_docsize'",
          "6706: |   3680: 28 69 64 20 49 4e 54 45 47 45 52 20 50 52 49 4d   (id INTEGER PRIM",
          "6707: |   3696: 41 52 59 20 4b 45 59 2c 20 73 7a 20 42 4c 4f 42   ARY KEY, sz BLOB",
          "6708: |   3712: 29 5e 04 07 17 21 21 01 81 07 74 61 62 6c 65 74   )^...!!...tablet",
          "6709: |   3728: 31 5f 63 6f 6e 74 65 6e 74 74 31 5f 63 6f 6e 74   1_contentt1_cont",
          "6710: |   3744: 65 6e 74 04 43 52 45 41 54 45 20 54 41 42 4c 45   ent.CREATE TABLE",
          "6711: |   3760: 20 27 74 31 5f 63 6f 6e 74 65 6e 74 27 28 69 64    't1_content'(id",
          "6712: |   3776: 20 49 4e 54 45 47 45 52 20 50 52 49 4d 41 52 59    INTEGER PRIMARY",
          "6713: |   3792: 20 4b 45 59 2c 20 63 30 2c 20 63 31 2c 20 63 32    KEY, c0, c1, c2",
          "6714: |   3808: 29 69 03 07 17 19 19 01 81 2d 74 61 62 6c 65 74   )i.......-tablet",
          "6715: |   3824: 31 5f 69 64 78 74 31 5f 69 64 78 03 43 52 45 41   1_idxt1_idx.CREA",
          "6716: |   3840: 54 45 20 54 41 42 4c 45 20 27 74 31 5f 69 64 78   TE TABLE 't1_idx",
          "6717: |   3856: 27 28 73 65 67 69 64 2c 20 74 65 72 6d 2c 20 70   '(segid, term, p",
          "6718: |   3872: 67 6e 6f 2c 20 50 52 49 4d 41 52 59 20 4b 45 59   gno, PRIMARY KEY",
          "6719: |   3888: 28 73 65 67 69 64 2c 20 74 65 72 6d 29 29 20 57   (segid, term)) W",
          "6720: |   3904: 49 54 48 4f 55 54 20 52 4f 57 49 44 55 02 07 17   ITHOUT ROWIDU...",
          "6721: |   3920: 1b 1b 01 81 01 74 61 62 6c 65 74 31 5f 64 61 74   .....tablet1_dat",
          "6722: |   3936: 61 74 31 5f 64 61 74 61 02 43 52 45 41 54 45 20   at1_data.CREATE",
          "6723: |   3952: 54 41 42 4c 45 20 27 74 31 5f 64 61 74 61 27 28   TABLE 't1_data'(",
          "6724: |   3968: 69 64 20 49 4e 54 45 47 45 52 20 50 52 49 4d 41   id INTEGER PRIMA",
          "6725: |   3984: 52 59 20 4b 45 59 2c 20 62 6c 6f 63 6b 20 42 4c   RY KEY, block BL",
          "6726: |   4000: 4f 42 29 5b 01 07 17 11 11 08 81 23 74 61 62 6c   OB)[.......#tabl",
          "6727: |   4016: 65 74 31 74 31 43 52 45 41 54 45 20 56 49 52 54   et1t1CREATE VIRT",
          "6728: |   4032: 55 41 4c 20 54 41 42 4c 45 20 74 31 20 55 53 49   UAL TABLE t1 USI",
          "6729: |   4048: 4e 47 20 66 74 73 35 28 61 2c 62 20 75 6e 69 6e   NG fts5(a,b unin",
          "6730: |   4064: 64 65 78 65 64 2c 63 2c 74 6f 6b 65 6e 69 7a 65   dexed,c,tokenize",
          "6731: |   4080: 3d 22 70 6f 72 74 65 72 20 61 73 63 69 69 22 29   =.porter ascii.)",
          "6732: | page 2 offset 4096",
          "6733: |      0: 0d 0f 68 00 05 0f 13 00 0f e6 0f 13 0f a8 0f 7c   ..h............|",
          "6734: |     16: 0f 2a 00 00 00 00 00 00 00 00 00 00 00 00 00 00   .*..............",
          "6735: |   3856: 00 00 00 15 0a 03 00 30 00 00 00 00 01 03 03 00   .......0........",
          "6736: |   3872: 03 01 01 01 02 01 01 03 01 01 37 8c 80 80 80 80   ..........7.....",
          "6737: |   3888: 01 03 00 74 00 20 68 20 69 0d 00 00 00 03 0f e8   ...t. h i.......",
          "6738: |   3904: 00 0f f8 0f f0 0f e8 00 00 00 00 00 00 00 00 00   ................",
          "6739: | page 5 offset 16384",
          "6740: |   4064: 00 00 00 00 00 00 00 00 06 03 03 00 12 03 00 00   ................",
          "6741: |   4080: 60 20 30 d6 20 30 00 30 60 10 30 01 20 30 00 30   ` 0. 0.0`.0. 0.0",
          "6742: | page 6 offset 20480",
          "6743: |      0: a0 00 00 00 10 ff 40 00 ff 00 00 00 00 00 00 00   ......@.........",
          "6744: |   4080: 00 00 00 00 0b 03 1b 01 76 65 72 73 69 6f 6e 04   ........version.",
          "6745: | page 7 offset 24576",
          "6746: |      0: 0d 00 00 00 03 0f 9e 00 0f e6 0f ef 0f 9e 00 00   ................",
          "6747: |   3984: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 41 84   ..............A.",
          "6748: |   4000: 80 80 80 80 01 04 00 81 06 00 00 00 34 02 30 61   ............4.0a",
          "6749: |   4016: 01 01 00 00 00 00 00 00 00 00 00 11 87 89 06 26   ...............&",
          "6750: |   4032: 01 64 01 01 01 65 01 01 01 66 01 01 01 67 01 01   .d...e...f...g..",
          "6751: |   4048: 01 01 01 68 01 01 01 01 01 69 01 01 01 04 06 06   ...h.....i......",
          "6752: |   4064: 06 04 44 00 06 06 07 01 03 00 14 03 09 09 09 0f   ..D.............",
          "6753: |   4080: 0a 03 00 24 00 00 00 00 01 01 01 00 01 01 01 01   ...$............",
          "6754: | page 8 offset 28672",
          "6755: |      0: 0a 00 00 00 01 0f fa 00 0f fa 00 00 00 00 00 00   ................",
          "6756: |   4080: 00 00 00 00 00 00 00 00 00 00 05 04 09 0c 01 02   ................",
          "6757: | page 9 offset 32768",
          "6758: |      0: 0d 00 00 00 9d 0f be 00 0f ea 0f d4 0f be 00 00   ................",
          "6759: |   4016: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 14 03   ................",
          "6760: |   4032: 05 00 17 17 17 61 20 62 20 63 67 20 68 20 69 67   .....a b cg h ig",
          "6761: |   4048: 20 68 20 69 14 02 05 00 17 17 17 67 20 68 20 69    h i.......g h i",
          "6762: |   4064: 61 20 62 20 63 67 20 68 20 69 14 01 05 00 17 17   a b cg h i......",
          "6763: |   4080: 17 61 20 62 20 63 64 20 65 20 66 67 20 68 20 69   .a b cd e fg h i",
          "6764: | page 10 offset 36864",
          "6765: |      0: 0a 00 00 00 01 0f f4 00 0f f4 00 00 00 00 00 00   ................",
          "6766: |   4080: 00 00 00 00 0b 03 1b 01 76 65 72 73 69 6f 6e 04   ........version.",
          "6767: | end crash-fd87385402ecf5.db",
          "6768: }]} {}",
          "6770: do_catchsql_test 49.1 {",
          "6771:   SELECT term FROM t4 WHERE term LIKE 'oase';",
          "6772: } {1 {database disk image is malformed}}",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 1bb17c863a269ab8b28df94b9fdaac3ee70777ccd0a30300131bf67df6722052",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "da7a4c0f7a63ffe908c863e80bff84e5826346a9",
      "candidate_info": {
        "commit_hash": "da7a4c0f7a63ffe908c863e80bff84e5826346a9",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/da7a4c0f7a63ffe908c863e80bff84e5826346a9",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c",
          "test/corruptL.test"
        ],
        "message": "When parsing the schema, check for duplicate index root page numbers before adding the index to the schema hash table.\n\nFossilOrigin-Name: 6b360bc0b9ad18ccda9d58d43a8388d19999432bfdf294abcf5beb44ef990cb4",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c",
          "test/corruptL.test||test/corruptL.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 197edb235b785c68fda7be788efbc61137d9452886599415a927b959ade93c65",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3487:       Index *p;",
          "3488:       assert( !IN_SPECIAL_PARSE );",
          "3489:       assert( sqlite3SchemaMutexHeld(db, 0, pIndex->pSchema) );",
          "3498:       if( pTblName!=0 ){",
          "3499:         pIndex->tnum = db->init.newTnum;",
          "3500:         if( sqlite3IndexHasDuplicateRootPage(pIndex) ){",
          "",
          "[Removed Lines]",
          "3490:       p = sqlite3HashInsert(&pIndex->pSchema->idxHash,",
          "3491:           pIndex->zName, pIndex);",
          "3492:       if( p ){",
          "3494:         sqlite3OomFault(db);",
          "3495:         goto exit_create_index;",
          "3496:       }",
          "3497:       db->mDbFlags |= DBFLAG_SchemaChange;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3503:           goto exit_create_index;",
          "3504:         }",
          "3505:       }",
          "3506:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3498:       p = sqlite3HashInsert(&pIndex->pSchema->idxHash,",
          "3499:           pIndex->zName, pIndex);",
          "3500:       if( p ){",
          "3502:         sqlite3OomFault(db);",
          "3503:         goto exit_create_index;",
          "3504:       }",
          "3505:       db->mDbFlags |= DBFLAG_SchemaChange;",
          "",
          "---------------"
        ],
        "test/corruptL.test||test/corruptL.test": [
          "File: test/corruptL.test -> test/corruptL.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "629:   COMMIT;",
          "630: } {1 {malformed database schema (t1b) - invalid root page}}",
          "632: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "632: #-------------------------------------------------------------------------",
          "633: reset_db",
          "634: do_test 7.0 {",
          "635:   sqlite3 db {}",
          "636:   db deserialize [decode_hexdb {",
          "637: | size 20480 pagesize 4096 filename crash-8391315d75edff.db",
          "638: | page 1 offset 0",
          "639: |      0: 53 51 4c 69 74 65 20 66 6f 72 6d 61 74 20 33 00   SQLite format 3.",
          "640: |     16: 10 00 01 01 00 40 20 20 00 00 00 00 00 00 00 05   .....@  ........",
          "641: |     32: 00 00 00 00 00 00 00 00 00 00 00 05 00 00 00 04   ................",
          "642: |     48: 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00   ................",
          "643: |     96: 00 00 00 00 0d 00 00 00 05 0e 55 00 0f 74 0f 3c   ..........U..t.<",
          "644: |    112: 0e f9 0e d1 0e 55 00 00 00 00 00 00 00 00 00 00   .....U..........",
          "645: |   3664: 00 00 00 00 00 7a 05 07 15 11 11 08 81 63 76 69   .....z.......cvi",
          "646: |   3680: 65 77 76 31 76 31 43 52 45 41 54 45 20 56 49 45   ewv1v1CREATE VIE",
          "647: |   3696: 57 20 76 31 28 78 2c 69 29 20 41 53 0a 53 45 4c   W v1(x,i) AS.SEL",
          "648: |   3712: 45 43 54 20 74 31 2e 62 2c 74 32 2e 62 20 46 52   ECT t1.b,t2.b FR",
          "649: |   3728: 4f 4d 20 74 31 2c 74 32 20 57 48 45 52 45 20 74   OM t1,t2 WHERE t",
          "650: |   3744: 31 2e 61 3d 74 32 2e 61 20 47 52 4f 55 50 20 42   1.a=t2.a GROUP B",
          "651: |   3760: 59 20 31 20 48 41 56 49 4e 47 20 74 32 2e 63 20   Y 1 HAVING t2.c",
          "652: |   3776: 4e 4f 54 20 4e 55 4c 4c 0a 4c 49 4d 49 54 20 31   NOT NULL.LIMIT 1",
          "653: |   3792: 30 26 04 06 17 11 11 01 39 74 61 62 6c 65 74 32   0&......9tablet2",
          "654: |   3808: 74 32 05 43 52 45 41 54 45 20 54 41 42 4c 45 20   t2.CREATE TABLE",
          "655: |   3824: 74 32 28 61 2c 62 2c 63 29 41 03 06 17 15 11 01   t2(a,b,c)A......",
          "656: |   3840: 6b 69 6e 64 65 78 74 31 78 31 74 31 03 43 52 45   kindext1x1t1.CRE",
          "657: |   3856: 41 54 45 20 49 4e 44 45 58 20 74 31 78 31 20 4f   ATE INDEX t1x1 O",
          "658: |   3872: 4e 20 74 31 28 64 29 20 57 48 45 52 45 20 65 65   N t1(d) WHERE ee",
          "659: |   3888: 20 49 53 20 4e 4f 54 20 4e 55 4c 4c 36 02 06 17    IS NOT NULL6...",
          "660: |   3904: 17 11 01 53 69 6e 64 65 78 74 31 61 62 63 74 31   ...Sindext1abct1",
          "661: |   3920: 03 43 52 45 41 54 45 20 49 4e 44 45 58 20 74 31   .CREATE INDEX t1",
          "662: |   3936: 61 62 63 20 4f 4e 20 74 31 28 61 2c 62 2c 63 2b   abc ON t1(a,b,c+",
          "663: |   3952: 64 2b 65 29 81 09 01 07 17 11 11 01 81 7d 74 61   d+e)..........ta",
          "664: |   3968: 62 6c 65 74 31 74 31 02 43 52 45 41 54 45 20 54   blet1t1.CREATE T",
          "665: |   3984: 41 42 4c 45 20 74 31 28 61 2c 62 2c 63 2c 64 2c   ABLE t1(a,b,c,d,",
          "666: |   4000: 65 2c 66 2c 67 2c 68 2c 6a 2c 6a 6a 2c 6a 6a 6a   e,f,g,h,j,jj,jjj",
          "667: |   4016: 2c 6b 2c 61 61 2c 62 69 8c 63 63 2c 64 64 2c 65   ,k,aa,bi.cc,dd,e",
          "668: |   4032: 65 20 44 45 46 41 55 4c 54 20 33 2e 31 34 2c 0a   e DEFAULT 3.14,.",
          "669: |   4048: 66 66 20 44 45 46 41 55 4c 54 28 27 68 69 63 63   ff DEFAULT('hicc",
          "670: |   4064: 75 70 27 29 2c 67 67 20 4e 4f 54 20 4e 55 4c 4c   up'),gg NOT NULL",
          "671: |   4080: 20 44 45 46 41 55 4c 54 28 66 61 6c 73 65 29 29    DEFAULT(false))",
          "672: | page 2 offset 4096",
          "673: |      0: 0d 00 00 00 0a 0e 7b 00 0f dc 0f b6 0f 8f 0f 68   ...............h",
          "674: |     16: 0f 41 0f 1a 0e f3 0e cb 0e a3 0e 22 00 00 00 00   .A..............",
          "675: |   3696: 00 00 00 00 00 00 00 00 00 00 00 26 0a 14 01 01   ...........&....",
          "676: |   3712: 02 08 00 00 00 00 00 00 00 00 00 00 00 00 07 19   ................",
          "677: |   3728: 08 09 5a 00 b4 40 09 1e b8 51 eb 95 1f 68 69 63   ..Z..@...Q...hic",
          "678: |   3744: 63 75 70 26 09 14 01 01 02 08 00 00 00 00 00 00   cup&............",
          "679: |   3760: 00 00 00 00 00 00 07 19 08 08 50 00 a0 40 09 1e   ..........P..@..",
          "680: |   3776: b8 51 eb 85 1f 68 69 63 63 74 70 26 08 14 01 01   .Q...hicctp&....",
          "681: |   3792: 03 08 00 00 00 00 00 00 00 00 00 00 00 00 07 19   ................",
          "682: |   3808: 08 07 46 00 8c 40 09 1e b8 51 eb 85 1f 68 69 63   ..F..@...Q...hic",
          "683: |   3824: 63 75 70 25 07 14 01 01 01 08 00 00 00 00 00 00   cup%............",
          "684: |   3840: 00 00 00 00 00 10 07 19 08 06 3c 78 40 09 1e b8   ..........<x@...",
          "685: |   3856: 51 eb 85 1f 68 69 63 63 75 70 25 06 14 01 01 01   Q...hiccup%.....",
          "686: |   3872: 08 00 00 00 00 00 00 00 00 00 00 00 00 07 19 08   ................",
          "687: |   3888: 05 32 64 40 09 1e b8 51 eb 85 1f 68 69 63 63 75   .2d@...Q...hiccu",
          "688: |   3904: 70 25 05 14 01 01 01 08 00 00 00 00 00 00 00 00   p%..............",
          "689: |   3920: 00 00 00 00 07 19 08 04 28 50 40 09 1e b8 51 eb   ........(P@...Q.",
          "690: |   3936: 85 1f 68 69 63 63 75 70 25 04 14 01 00 f1 08 00   ..hiccup%.......",
          "691: |   3952: 00 00 00 00 00 00 00 00 00 00 00 07 19 08 03 1e   ................",
          "692: |   3968: 3c 40 09 1e b8 51 eb 85 1f 68 69 63 63 75 70 25   <@...Q...hiccup%",
          "693: |   3984: 03 14 01 01 01 08 00 00 00 00 00 00 00 00 00 00   ................",
          "694: |   4000: 00 00 07 19 08 02 14 28 40 09 1e b8 51 eb 85 1f   .......(@...Q...",
          "695: |   4016: 68 69 63 63 75 70 24 02 14 09 01 01 08 00 00 00   hiccup$.........",
          "696: |   4032: 00 00 00 00 00 00 00 00 00 07 19 08 0a 14 40 09   ..............@.",
          "697: |   4048: 1e b8 51 eb 85 1f 68 69 63 63 75 70 22 01 14 08   ..Q...hiccup....",
          "698: |   4064: 08 08 08 00 00 00 00 00 00 00 00 00 00 00 00 07   ................",
          "699: |   4080: 19 08 40 09 1e b8 51 eb 85 1f 68 69 63 63 75 70   ..@...Q...hiccup",
          "700: | page 3 offset 8192",
          "701: |      0: 0a 00 00 00 0a 0f aa 00 0f fa 0f f2 0f e9 0f e0   ................",
          "702: |     16: 0f d7 0f ce 0f c5 0f bc 0f b3 0f aa 00 00 00 00   ................",
          "703: |   4000: 00 00 00 00 00 00 00 00 00 00 08 05 01 01 00 01   ................",
          "704: |   4016: 09 5a 0a d8 05 01 01 00 01 08 50 09 08 05 01 01   .Z........P.....",
          "705: |   4032: 00 01 07 46 08 08 05 01 01 00 01 06 3c 07 08 05   ...F........<...",
          "706: |   4048: 01 01 00 01 05 32 06 08 05 01 01 00 01 04 28 05   .....2........(.",
          "707: |   4064: 08 05 01 02 60 01 03 1e 04 08 05 01 01 00 01 02   ....`...........",
          "708: |   4080: 14 03 07 05 09 01 00 01 0a 02 05 05 08 08 00 09   ................",
          "709: | page 4 offset 12288",
          "710: |      0: 0a 00 00 00 0a 0f cf 00 0f fc 0f f7 0f f2 0f ed   ................",
          "711: |     16: 0f e8 0f e3 0f de 0f d9 0f d4 0f cf 00 00 00 00   ................",
          "712: |   4032: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 04   ................",
          "713: |   4048: 03 08 01 0a 04 03 08 01 09 04 03 08 01 08 04 03   ................",
          "714: |   4064: 08 01 07 04 03 08 01 06 04 03 08 01 05 04 03 08   ................",
          "715: |   4080: 01 04 04 03 08 01 03 04 03 08 01 02 03 03 08 09   ................",
          "716: | page 5 offset 16384",
          "717: |      0: 0d 00 00 00 00 10 00 00 00 00 00 00 00 00 00 00   ................",
          "718: | end crash-8391315d75edff.db",
          "719: }]} {}",
          "721: do_catchsql_test 7.1 {",
          "722:   SELECT * FROM sqlite_master;",
          "723: } {1 {malformed database schema (t1x1) - invalid root page}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d681626a8b3b1070917f7c673a0dd55065ec2775",
      "candidate_info": {
        "commit_hash": "d681626a8b3b1070917f7c673a0dd55065ec2775",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/d681626a8b3b1070917f7c673a0dd55065ec2775",
        "files": [
          "ext/misc/zipfile.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Update the zipfile extension to use deflateBound(), instead of compressBound(), to learn the maximum possible size of a deflate()d buffer.\n\nFossilOrigin-Name: f5ee30426e8876e70304f852153b56991a2a66e0f6a82597e9dcccf49163272d",
        "before_after_code_files": [
          "ext/misc/zipfile.c||ext/misc/zipfile.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ext/misc/zipfile.c||ext/misc/zipfile.c",
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "ext/misc/zipfile.c||ext/misc/zipfile.c",
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/misc/zipfile.c||ext/misc/zipfile.c": [
          "File: ext/misc/zipfile.c -> ext/misc/zipfile.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "983: ){",
          "986:   int rc = SQLITE_OK;",
          "988:   aOut = (u8*)sqlite3_malloc64(nAlloc);",
          "989:   if( aOut==0 ){",
          "990:     rc = SQLITE_NOMEM;",
          "991:   }else{",
          "992:     int res;",
          "997:     str.next_out = aOut;",
          "998:     str.avail_out = nAlloc;",
          "1000:     deflateInit2(&str, 9, Z_DEFLATED, -15, 8, Z_DEFAULT_STRATEGY);",
          "1001:     res = deflate(&str, Z_FINISH);",
          "1003:     if( res==Z_STREAM_END ){",
          "",
          "[Removed Lines]",
          "984:   sqlite3_int64 nAlloc = compressBound(nIn);",
          "985:   u8 *aOut;",
          "993:     z_stream str;",
          "994:     memset(&str, 0, sizeof(str));",
          "995:     str.next_in = (Bytef*)aIn;",
          "996:     str.avail_in = nIn;",
          "",
          "[Added Lines]",
          "985:   sqlite3_int64 nAlloc;",
          "986:   z_stream str;",
          "987:   u8 *aOut;",
          "989:   memset(&str, 0, sizeof(str));",
          "990:   str.next_in = (Bytef*)aIn;",
          "991:   str.avail_in = nIn;",
          "992:   deflateInit2(&str, 9, Z_DEFLATED, -15, 8, Z_DEFAULT_STRATEGY);",
          "994:   nAlloc = deflateBound(&str, nIn);",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 8a39167bd2d46496f7484cfec371e4bad22da882209b01da9459c4ed5877da25",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}