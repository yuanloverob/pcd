{
  "cve_id": "CVE-2020-22875",
  "cve_desc": "Integer overflow vulnerability in function Jsi_ObjSetLength in jsish before 3.0.6, allows remote attackers to execute arbitrary code.",
  "repo": "pcmacdon/jsish",
  "patch_hash": "5408a6d93f45bf1f7acd9ae5d44e0ebd77379e98",
  "patch_info": {
    "commit_hash": "5408a6d93f45bf1f7acd9ae5d44e0ebd77379e98",
    "repo": "pcmacdon/jsish",
    "commit_url": "https://github.com/pcmacdon/jsish/commit/5408a6d93f45bf1f7acd9ae5d44e0ebd77379e98",
    "files": [
      "md/Reference.md",
      "src/jsi.h",
      "src/jsiArray.c",
      "src/jsiCmds.c",
      "tests/locals.jsi",
      "tools/protos.jsi",
      "www/reference.wiki"
    ],
    "message": "Release \"3.0.6\": Fix crashes in Array for \"integer overflow #10\"\n\nFossilOrigin-Name: 50642d64b8f0a4e62df68e59fcb2ef0923c3dbec8fc8a15d38b1ddbe655c38d6",
    "before_after_code_files": [
      "src/jsi.h||src/jsi.h",
      "src/jsiArray.c||src/jsiArray.c",
      "src/jsiCmds.c||src/jsiCmds.c",
      "tests/locals.jsi||tests/locals.jsi",
      "tools/protos.jsi||tools/protos.jsi",
      "www/reference.wiki||www/reference.wiki"
    ]
  },
  "patch_diff": {
    "src/jsi.h||src/jsi.h": [
      "File: src/jsi.h -> src/jsi.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "5: #define JSI_VERSION_MAJOR   3",
      "6: #define JSI_VERSION_MINOR   0",
      "9: #define JSI_VERSION (JSI_VERSION_MAJOR + ((Jsi_Number)JSI_VERSION_MINOR/100.0) + ((Jsi_Number)JSI_VERSION_RELEASE/10000.0))",
      "",
      "[Removed Lines]",
      "7: #define JSI_VERSION_RELEASE 4",
      "",
      "[Added Lines]",
      "7: #define JSI_VERSION_RELEASE 6",
      "",
      "---------------"
    ],
    "src/jsiArray.c||src/jsiArray.c": [
      "File: src/jsiArray.c -> src/jsiArray.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "7: #define NO_QSORT_R 1",
      "8: #endif",
      "10: static Jsi_RC jsi_ArrayPushCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
      "11:     Jsi_Value **ret, Jsi_Func *funcPtr)",
      "12: {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "10: static uint jsi_SizeOfArray(Jsi_Interp *interp, Jsi_Obj *obj) {",
      "11:     if (!obj || !obj->arr)",
      "12:         return 0;",
      "13:     return obj->arrCnt;",
      "14: }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "19:     obj = _this->d.obj;",
      "21:     int argc = Jsi_ValueGetLength(interp, args);",
      "27:     int i;",
      "28:     for (i = 0; i < argc; ++i) {",
      "29:         Jsi_Value *ov = Jsi_ValueArrayIndex(interp, args, i);",
      "",
      "[Removed Lines]",
      "22:     int curlen = Jsi_ObjGetLength(interp, obj);",
      "23:     if (curlen < 0) {",
      "24:         Jsi_ObjSetLength(interp, obj, 0);",
      "25:     }",
      "",
      "[Added Lines]",
      "28:     int curlen = jsi_SizeOfArray(interp, obj);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "31:         Jsi_ValueInsertArray(interp, _this, curlen + i, ov, 0);",
      "32:     }",
      "35:     return JSI_OK;",
      "36: }",
      "",
      "[Removed Lines]",
      "34:     Jsi_ValueMakeNumber(interp, ret, Jsi_ObjGetLength(interp, obj));",
      "",
      "[Added Lines]",
      "36:     Jsi_ValueMakeNumber(interp, ret, jsi_SizeOfArray(interp, obj));",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "45:     Jsi_Value *v;",
      "46:     Jsi_Obj *obj;",
      "47:     obj = _this->d.obj;",
      "50:     if (i < 0) {",
      "51:         Jsi_ValueMakeUndef(interp, ret);",
      "",
      "[Removed Lines]",
      "48:     int i = Jsi_ObjGetLength(interp, obj) - 1;",
      "",
      "[Added Lines]",
      "50:     int i = jsi_SizeOfArray(interp, obj) - 1;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "78:     int argc, curlen;",
      "79:     Jsi_DString dStr = {};",
      "82:     if (curlen == 0) {",
      "83:         goto bail;",
      "84:     }",
      "",
      "[Removed Lines]",
      "81:     curlen = Jsi_ObjGetLength(interp, _this->d.obj);",
      "",
      "[Added Lines]",
      "83:     curlen = jsi_SizeOfArray(interp, _this->d.obj);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "89:             jstr = Jsi_ValueToString(interp, sc, NULL);",
      "90:     }",
      "93:         goto bail;",
      "94:     }",
      "95:     int i;",
      "",
      "[Removed Lines]",
      "92:     if (0 == (argc=Jsi_ObjGetLength(interp, _this->d.obj))) {",
      "",
      "[Added Lines]",
      "94:     if (0 == (argc=jsi_SizeOfArray(interp, _this->d.obj))) {",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "233:         return;",
      "234:     }",
      "237:     if (len <= 0) return;",
      "239:     Jsi_Value *v0 = Jsi_ValueArrayIndex(interp, v, 0);",
      "",
      "[Removed Lines]",
      "236:     int len = Jsi_ObjGetLength(interp, v->d.obj);",
      "",
      "[Added Lines]",
      "238:     int len = jsi_SizeOfArray(interp, v->d.obj);",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "256: static Jsi_RC jsi_ArrayFlatSub(Jsi_Interp *interp, Jsi_Obj* nobj, Jsi_Value *arr, int depth) {",
      "259:     if (len <= 0) return JSI_OK;",
      "260:     Jsi_RC rc = JSI_OK;",
      "262:     for (i = 0; i < len && rc == JSI_OK; i++) {",
      "263:         Jsi_Value *t = Jsi_ValueArrayIndex(interp, arr, i);",
      "264:         if (t && depth>0 && Jsi_ValueIsArray(interp, t))",
      "",
      "[Removed Lines]",
      "258:     int i, n = 0, len = Jsi_ObjGetLength(interp, arr->d.obj);",
      "261:     int clen = Jsi_ObjGetLength(interp, nobj);",
      "",
      "[Added Lines]",
      "260:     int i, n = 0, len = jsi_SizeOfArray(interp, arr->d.obj);",
      "263:     int clen = jsi_SizeOfArray(interp, nobj);",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "302:     obj = _this->d.obj;",
      "304:     argc = Jsi_ValueGetLength(interp, args);",
      "309:     Jsi_ObjListifyArray(interp, obj);",
      "311:     nobj = Jsi_ObjNewType(interp, JSI_OT_ARRAY);",
      "",
      "[Removed Lines]",
      "305:     curlen = Jsi_ObjGetLength(interp, obj);",
      "306:     if (curlen < 0) {",
      "307:         Jsi_ObjSetLength(interp, obj, 0);",
      "308:     }",
      "",
      "[Added Lines]",
      "307:     curlen = jsi_SizeOfArray(interp, obj);",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "377:     if (!sthis)",
      "378:         sthis = nthis = Jsi_ValueNew1(interp);",
      "379:     obj = _this->d.obj;",
      "384:     Jsi_ObjListifyArray(interp, obj);",
      "385:     nobj = Jsi_ObjNewType(interp, JSI_OT_ARRAY);",
      "386:     nsiz = obj->arrCnt;",
      "",
      "[Removed Lines]",
      "380:     curlen = Jsi_ObjGetLength(interp, obj);",
      "381:     if (curlen < 0) {",
      "382:         Jsi_ObjSetLength(interp, obj, 0);",
      "383:     }",
      "",
      "[Added Lines]",
      "379:     curlen = jsi_SizeOfArray(interp, obj);",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "439:     if (!sthis)",
      "440:         sthis = nthis = Jsi_ValueNew1(interp);",
      "441:     obj = _this->d.obj;",
      "446:     Jsi_ObjListifyArray(interp, obj);",
      "447:     nobj = Jsi_ObjNewType(interp, JSI_OT_ARRAY);",
      "448:     nsiz = obj->arrCnt;",
      "",
      "[Removed Lines]",
      "442:     curlen = Jsi_ObjGetLength(interp, obj);",
      "443:     if (curlen < 0) {",
      "444:         Jsi_ObjSetLength(interp, obj, 0);",
      "445:     }",
      "",
      "[Added Lines]",
      "438:     curlen = jsi_SizeOfArray(interp, obj);",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "522:     if (_this->vt != JSI_VT_OBJECT || !Jsi_ObjIsArray(interp, _this->d.obj))",
      "523:         return Jsi_LogError(\"expected array object\");",
      "524:     Jsi_Obj *obj;",
      "526:     uint i;",
      "527:     Jsi_Value *func, *vpargs;",
      "",
      "[Removed Lines]",
      "525:     int curlen;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "535:         sthis = nthis = Jsi_ValueNew1(interp);",
      "537:     obj = _this->d.obj;",
      "542:     Jsi_ObjListifyArray(interp, obj);",
      "543:     Jsi_RC rc = JSI_OK;",
      "",
      "[Removed Lines]",
      "538:     curlen = Jsi_ObjGetLength(interp, obj);",
      "539:     if (curlen < 0) {",
      "540:         Jsi_ObjSetLength(interp, obj, 0);",
      "541:     }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "566:     if (_this->vt != JSI_VT_OBJECT || !Jsi_ObjIsArray(interp, _this->d.obj))",
      "567:         return Jsi_LogError(\"expected array\");",
      "568:     Jsi_Obj *obj;",
      "570:     uint i;",
      "571:     Jsi_RC rc = JSI_OK;",
      "572:     Jsi_Value *func, *vpargs, *sthis = Jsi_ValueArrayIndex(interp, args, 1);",
      "",
      "[Removed Lines]",
      "569:     int curlen;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 15 ---",
      "[Context before]",
      "579:         sthis = nthis = Jsi_ValueNew1(interp);",
      "581:     obj = _this->d.obj;",
      "586:     Jsi_ObjListifyArray(interp, obj);",
      "587:     int fval = 0;",
      "588:     Jsi_Value *nrPtr = Jsi_ValueNew1(interp);",
      "",
      "[Removed Lines]",
      "582:     curlen = Jsi_ObjGetLength(interp, obj);",
      "583:     if (curlen < 0) {",
      "584:         Jsi_ObjSetLength(interp, obj, 0);",
      "585:     }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 16 ---",
      "[Context before]",
      "628:     if (_this->vt != JSI_VT_OBJECT || !Jsi_ObjIsArray(interp, _this->d.obj))",
      "629:         return Jsi_LogError(\"expected array\");",
      "630:     Jsi_RC rc = JSI_OK;",
      "632:     Jsi_Obj *obj;",
      "633:     Jsi_Value *func, *vpargs, *ini = Jsi_ValueArrayIndex(interp, args, 1);",
      "",
      "[Removed Lines]",
      "631:     int curlen, i;",
      "",
      "[Added Lines]",
      "614:     int i;",
      "",
      "---------------",
      "--- Hunk 17 ---",
      "[Context before]",
      "639:     Jsi_Value *nrPtr = Jsi_ValueNew1(interp);",
      "640:     obj = _this->d.obj;",
      "644:     Jsi_ObjListifyArray(interp, obj);",
      "645:     Jsi_Value *vobjs[4];",
      "646:     int n, rev = (op==2);",
      "",
      "[Removed Lines]",
      "641:     curlen = Jsi_ObjGetLength(interp, obj);",
      "642:     if (curlen < 0)",
      "643:         Jsi_ObjSetLength(interp, obj, 0);",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 18 ---",
      "[Context before]",
      "717:         goto bail;",
      "718:     }",
      "721:     if (n == 0) {",
      "722:         goto bail;",
      "723:     }",
      "",
      "[Removed Lines]",
      "720:     n = Jsi_ObjGetLength(interp, obj);",
      "",
      "[Added Lines]",
      "700:     n = jsi_SizeOfArray(interp, obj);",
      "",
      "---------------",
      "--- Hunk 19 ---",
      "[Context before]",
      "769: static Jsi_RC jsi_ArraySizeOfCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,Jsi_Value **ret, Jsi_Func *funcPtr) {",
      "770:     if (_this->vt != JSI_VT_OBJECT || !Jsi_ObjIsArray(interp, _this->d.obj))",
      "771:         return Jsi_LogError(\"expected array object\");",
      "773:     Jsi_ValueMakeNumber(interp, ret, i);",
      "774:     return JSI_OK;",
      "775: }",
      "",
      "[Removed Lines]",
      "772:     int i = Jsi_ObjGetLength(interp, _this->d.obj);",
      "",
      "[Added Lines]",
      "752:     int i = jsi_SizeOfArray(interp, _this->d.obj);",
      "",
      "---------------",
      "--- Hunk 20 ---",
      "[Context before]",
      "780:     Jsi_Value *v;",
      "781:     Jsi_Obj *obj = _this->d.obj;",
      "782:     Jsi_ObjListifyArray(interp, obj);",
      "785:     if (n<=0) {",
      "786:         Jsi_ValueMakeUndef(interp, ret);",
      "787:     } else {",
      "",
      "[Removed Lines]",
      "783:     uint n = Jsi_ObjGetLength(interp, obj);",
      "784:     assert(n <= obj->arrCnt);",
      "",
      "[Added Lines]",
      "763:     uint n = jsi_SizeOfArray(interp, obj);",
      "",
      "---------------",
      "--- Hunk 21 ---",
      "[Context before]",
      "803:     Jsi_Obj *obj = _this->d.obj;",
      "804:     int argc = Jsi_ValueGetLength(interp, args);",
      "809:     if (argc <= 0) {",
      "810:         Jsi_ValueMakeNumber(interp, ret, 0);",
      "811:         return JSI_OK;",
      "",
      "[Removed Lines]",
      "805:     int curlen = Jsi_ObjGetLength(interp, obj);",
      "806:     if (curlen < 0) {",
      "807:         Jsi_ObjSetLength(interp, obj, 0);",
      "808:     }",
      "",
      "[Added Lines]",
      "784:     int curlen = jsi_SizeOfArray(interp, obj);",
      "",
      "---------------",
      "--- Hunk 22 ---",
      "[Context before]",
      "825:     }",
      "826:     Jsi_ObjSetLength(interp, obj, curlen+argc);",
      "829:     return JSI_OK;",
      "830: }",
      "",
      "[Removed Lines]",
      "828:     Jsi_ValueMakeNumber(interp, ret, Jsi_ObjGetLength(interp, obj));",
      "",
      "[Added Lines]",
      "804:     Jsi_ValueMakeNumber(interp, ret, jsi_SizeOfArray(interp, obj));",
      "",
      "---------------",
      "--- Hunk 23 ---",
      "[Context before]",
      "841:     Jsi_Obj *obj = _this->d.obj;",
      "844:     if (start && Jsi_GetNumberFromValue(interp, start, &nstart) == JSI_OK) {",
      "845:         istart = (int)nstart;",
      "",
      "[Removed Lines]",
      "842:     n = Jsi_ObjGetLength(interp, obj);",
      "",
      "[Added Lines]",
      "818:     n = jsi_SizeOfArray(interp, obj);",
      "",
      "---------------",
      "--- Hunk 24 ---",
      "[Context before]",
      "902:         goto bail;",
      "903:     }",
      "904:     obj = _this->d.obj;",
      "906:     if (Jsi_GetNumberFromValue(interp,start, &nstart) == JSI_OK) {",
      "907:         istart = (int)nstart;",
      "908:         if (istart > n)",
      "",
      "[Removed Lines]",
      "905:     n = Jsi_ObjGetLength(interp, obj);",
      "",
      "[Added Lines]",
      "881:     n = jsi_SizeOfArray(interp, obj);",
      "",
      "---------------",
      "--- Hunk 25 ---",
      "[Context before]",
      "1166:     argc = Jsi_ValueGetLength(interp, args);",
      "1167:     istart = 0;",
      "1168:     ilen = (argc>=2 ? argc - 2 : 0);",
      "1170:     curlen = n;",
      "1172:     if (!start) {",
      "",
      "[Removed Lines]",
      "1169:     n = Jsi_ObjGetLength(interp, obj);",
      "",
      "[Added Lines]",
      "1145:     n = jsi_SizeOfArray(interp, obj);",
      "",
      "---------------",
      "--- Hunk 26 ---",
      "[Context before]",
      "1202:     }",
      "1204:     if (curlen < 0) {",
      "1206:     }",
      "1207:     Jsi_ObjListifyArray(interp, obj);",
      "",
      "[Removed Lines]",
      "1205:         Jsi_ObjSetLength(interp, obj, 0);",
      "",
      "[Added Lines]",
      "1181:         Jsi_ObjSetLength(interp, obj, curlen=0);",
      "",
      "---------------"
    ],
    "src/jsiCmds.c||src/jsiCmds.c": [
      "File: src/jsiCmds.c -> src/jsiCmds.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "4509:     return rc;",
      "4510: }",
      "4512: static const char *jsi_FindHelpStr(const char *fstr, const char *key, Jsi_DString *dPtr) {",
      "4513:     if (!fstr) return \"\";",
      "4514:     Jsi_DSSetLength(dPtr, 0);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4512: static Jsi_RC SysRunMainCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
      "4513:     Jsi_Value **ret, Jsi_Func *funcPtr)",
      "4514: {",
      "4515:     if (jsi_isMain(interp))",
      "4516:         return SysRunModuleCmd(interp, args, _this, ret, funcPtr);",
      "4517:     return JSI_OK;",
      "4518: }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "4762:     { \"execZip\",    InfoExecZipCmd,     0,  0, \"\", .help=\"If executing a .zip file, return file name\", .retType=(uint)JSI_TT_STRING|JSI_TT_VOID },",
      "4763:     { \"files\",      InfoFilesCmd,       0,  0, \"\", .help=\"Return list of all sourced files\", .retType=(uint)JSI_TT_ARRAY },",
      "4764:     { \"funcs\",      InfoFuncsCmd,       0,  1, \"string|regexp|object=void\", .help=\"Return details or list of matching functions\", .retType=(uint)JSI_TT_ARRAY|JSI_TT_OBJECT },",
      "4766:     { \"interp\",     jsi_InterpInfo,     0,  1, \"interp:userobj=void\", .help=\"Return info on given or current interp\", .retType=(uint)JSI_TT_OBJECT },",
      "4767:     { \"isMain\",     InfoIsMainCmd,      0,  0, \"\", .help=\"Return true if current script was the main script invoked from command-line\", .retType=(uint)JSI_TT_BOOLEAN },",
      "4768:     { \"keywords\",   InfoKeywordsCmd,    0,  2, \"isSql=false, name:string=void\", .help=\"Return/lookup reserved keyword\", .retType=(uint)JSI_TT_ARRAY|JSI_TT_BOOLEAN },",
      "",
      "[Removed Lines]",
      "4765:     { \"locals\",     InfoLocalsCmd,      0,  1, \"varsOnly:boolean=void\", .help=\"Return functions/vars inside local function\", .retType=(uint)JSI_TT_OBJECT },",
      "",
      "[Added Lines]",
      "4773:     { \"locals\",     InfoLocalsCmd,      0,  1, \"filter:boolean=void\", .help=\"Return locals; use filter=true/false just vars/functions\", .retType=(uint)JSI_TT_OBJECT },",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "4863:     { \"puts\",       SysPutsCmd,      1, -1, \"val, ...\", .help=\"Output one or more values to stdout\", .retType=(uint)JSI_TT_VOID, .flags=0, .info=FN_puts },",
      "4864:     { \"quote\",      SysQuoteCmd,     1,  1, \"val:string\", .help=\"Return quoted string\", .retType=(uint)JSI_TT_STRING },",
      "4865:     { \"require\",    SysRequireCmd,   0,  3, \"name:string=void, version:number|string=1, options:object=void\", .help=\"Load/query packages\", .retType=(uint)JSI_TT_NUMBER|JSI_TT_OBJECT|JSI_TT_ARRAY, .flags=0, .info=FN_require, .opts=jsiModuleOptions },",
      "4866:     { \"runModule\",  SysRunModuleCmd, 0,  2, \"cmd:string|null|function=void, conf:array=undefined\", .help=\"Invoke named module. If name is empty, uses file basename. If isMain and no args givine parses console.args\", .retType=(uint)JSI_TT_ANY, .flags=0},",
      "4867:     { \"sleep\",      SysSleepCmd,     0,  1, \"secs:number=1.0\",  .help=\"sleep for N milliseconds, minimum .001\", .retType=(uint)JSI_TT_VOID },",
      "4868: #ifndef JSI_OMIT_EVENT",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4874:     { \"runMain\",    SysRunMainCmd,   0,  2, \"cmd:string|null|function=void, conf:array=undefined\", .help=\"If isMain invokes runModule\", .retType=(uint)JSI_TT_ANY, .flags=0},",
      "",
      "---------------"
    ],
    "tests/locals.jsi||tests/locals.jsi": [
      "File: tests/locals.jsi -> tests/locals.jsi",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: function foo() {",
      "4:   function bar() { }",
      "5:   var x = 1;",
      "6: ;  Info.locals();",
      "7: ;  Info.locals(false);",
      "8: ;  Info.locals(true);",
      "9: }",
      "11: foo();",
      "14: =!EXPECTSTART!=",
      "15: Info.locals() ==> { bar:\"function bar() {...}\", x:1 }",
      "16: Info.locals(false) ==> { bar:\"function bar() {...}\" }",
      "17: Info.locals(true) ==> { x:1 }",
      "18: =!EXPECTEND!=",
      "",
      "---------------"
    ],
    "tools/protos.jsi||tools/protos.jsi": [
      "File: tools/protos.jsi -> tools/protos.jsi",
      "--- Hunk 1 ---",
      "[Context before]",
      "140: Info.prototype.isMain = function():boolean {};",
      "141: Info.prototype.keywords = function(isSql=false, name:string=void):boolean|array {};",
      "142: Info.prototype.level = function(level:number=void):number|array|object {};",
      "144: Info.prototype.lookup = function(name:string):any {};",
      "145: Info.prototype.methods = function(val:string|regexp):array|object {};",
      "146: Info.prototype.named = function(name:string=void):array|userobj {};",
      "",
      "[Removed Lines]",
      "143: Info.prototype.locals = function(varsOnly:boolean=void):object {};",
      "",
      "[Added Lines]",
      "143: Info.prototype.locals = function(filter:boolean=void):object {};",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "303: System.prototype.puts = function(val, ...):void {};",
      "304: System.prototype.quote = function(val:string):string {};",
      "305: System.prototype.require = function(name:string=void, version:number|string=1, options:object=void):number|array|object {};",
      "306: System.prototype.runModule = function(cmd:string|null|function=void, conf:array=undefined):any {};",
      "307: System.prototype.setInterval = function(callback:function, ms:number):number {};",
      "308: System.prototype.setTimeout = function(callback:function, ms:number):number {};",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "306: System.prototype.runMain = function(cmd:string|null|function=void, conf:array=undefined):any {};",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "394: var puts = function(val, ...):void {};",
      "395: var quote = function(val:string):string {};",
      "396: var require = function(name:string=void, version:number|string=1, options:object=void):number|array|object {};",
      "397: var runModule = function(cmd:string|null|function=void, conf:array=undefined):any {};",
      "398: var setInterval = function(callback:function, ms:number):number {};",
      "399: var setTimeout = function(callback:function, ms:number):number {};",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "398: var runMain = function(cmd:string|null|function=void, conf:array=undefined):any {};",
      "",
      "---------------"
    ],
    "www/reference.wiki||www/reference.wiki": [
      "File: www/reference.wiki -> www/reference.wiki",
      "--- Hunk 1 ---",
      "[Context before]",
      "552: <tr><td>level</td><td>level(level:number=void):number|array|object </td><td>Return current level or details of a call-stack frame. With no arg, returns the number of the current stack frame level.",
      "553: Otherwise returns details on the specified level.",
      "554: The topmost level is 1, and 0 is the current level, and a negative level translates as relative to the current level.</td></tr>",
      "556: <tr><td>lookup</td><td>lookup(name:string) </td><td>Given string name, lookup and return value, eg: function.</td></tr>",
      "557: <tr><td>methods</td><td>methods(val:string|regexp):array|object </td><td>Return functions and commands.</td></tr>",
      "558: <tr><td>named</td><td>named(name:string=void):array|userobj </td><td>Returns command names for builtin Objects, eg: 'File', 'Interp', sub-Object names, or the named object.</td></tr>",
      "",
      "[Removed Lines]",
      "555: <tr><td>locals</td><td>locals(varsOnly:boolean=void):object </td><td>Return functions/vars inside local function.</td></tr>",
      "",
      "[Added Lines]",
      "555: <tr><td>locals</td><td>locals(filter:boolean=void):object </td><td>Return locals; use filter=true/false just vars/functions.</td></tr>",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1361: With two arguments, returns object containing: version, loadFile, func.",
      "1362: A third argument sets options for package or module.",
      "1363: Note an error is thrown if requested version is greater than actual version.</td></tr>",
      "1364: <tr><td>runModule</td><td>runModule(cmd:string|null|function=void, conf:array=undefined) </td><td>Invoke named module. If name is empty, uses file basename. If isMain and no args givine parses console.args.</td></tr>",
      "1365: <tr><td>setInterval</td><td>setInterval(callback:function, ms:number):number </td><td>Setup recurring function to run every given millisecs.</td></tr>",
      "1366: <tr><td>setTimeout</td><td>setTimeout(callback:function, ms:number):number </td><td>Setup function to run after given millisecs.</td></tr>",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1364: <tr><td>runMain</td><td>runMain(cmd:string|null|function=void, conf:array=undefined) </td><td>If isMain invokes runModule.</td></tr>",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "8caeaac36871c7d8953c8f78b28ed883ce152aa7",
      "candidate_info": {
        "commit_hash": "8caeaac36871c7d8953c8f78b28ed883ce152aa7",
        "repo": "pcmacdon/jsish",
        "commit_url": "https://github.com/pcmacdon/jsish/commit/8caeaac36871c7d8953c8f78b28ed883ce152aa7",
        "files": [
          "md/Reference.md",
          "src/jsi.h",
          "src/jsiCmds.c",
          "src/jsiEval.c",
          "tools/protos.jsi",
          "www/reference.wiki"
        ],
        "message": "Release \"3.0.47\": source/import merge.\n\nFossilOrigin-Name: a116d3c3400cbeaf5257a3cc3cfe306701f366aebeedea328f7733eecb87e597",
        "before_after_code_files": [
          "src/jsi.h||src/jsi.h",
          "src/jsiCmds.c||src/jsiCmds.c",
          "src/jsiEval.c||src/jsiEval.c",
          "tools/protos.jsi||tools/protos.jsi",
          "www/reference.wiki||www/reference.wiki"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/jsi.h||src/jsi.h",
            "src/jsiCmds.c||src/jsiCmds.c",
            "tools/protos.jsi||tools/protos.jsi",
            "www/reference.wiki||www/reference.wiki"
          ],
          "candidate": [
            "src/jsi.h||src/jsi.h",
            "src/jsiCmds.c||src/jsiCmds.c",
            "tools/protos.jsi||tools/protos.jsi",
            "www/reference.wiki||www/reference.wiki"
          ]
        }
      },
      "candidate_diff": {
        "src/jsi.h||src/jsi.h": [
          "File: src/jsi.h -> src/jsi.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #define JSI_VERSION_MAJOR   3",
          "6: #define JSI_VERSION_MINOR   0",
          "9: #define JSI_VERSION (JSI_VERSION_MAJOR + ((Jsi_Number)JSI_VERSION_MINOR/100.0) + ((Jsi_Number)JSI_VERSION_RELEASE/10000.0))",
          "",
          "[Removed Lines]",
          "7: #define JSI_VERSION_RELEASE 46",
          "",
          "[Added Lines]",
          "7: #define JSI_VERSION_RELEASE 47",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "138:     JSI_EVAL_EXISTS         =0x80, // Source if exists.",
          "139:     JSI_EVAL_ERRIGNORE      =0x100,// Source ignores errors.",
          "140:     JSI_EVAL_NOEVAL         =0x200,// Source parses only.",
          "143:     JSI_CALL_CONSTRUCTOR    =0x1,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "141:     JSI_EVAL_IMPORT         =0x400,// Source closure.",
          "",
          "---------------"
        ],
        "src/jsiCmds.c||src/jsiCmds.c": [
          "File: src/jsiCmds.c -> src/jsiCmds.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "67: typedef struct {",
          "68:     bool trace;",
          "69:     bool once;",
          "70:     bool noError;",
          "71:     bool noEval;",
          "72:     bool autoIndex;",
          "74:     bool global;",
          "75:     bool exists;",
          "76:     uint level;",
          "",
          "[Removed Lines]",
          "73:     bool isMain;",
          "",
          "[Added Lines]",
          "70:     bool isMain;",
          "74:     bool import;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "80:     JSI_OPT(BOOL,   SourceData, autoIndex,  .help=\"Look for and load Jsi_Auto.jsi auto-index file\" ),",
          "81:     JSI_OPT(BOOL,   SourceData, exists, .help=\"Source file only if exists\" ),",
          "82:     JSI_OPT(BOOL,   SourceData, global, .help=\"File is to be sourced in global frame rather than local\" ),",
          "83:     JSI_OPT(BOOL,   SourceData, isMain, .help=\"Coerce to true the value of Info.isMain()\" ),",
          "84:     JSI_OPT(UINT,   SourceData, level,  .help=\"Frame to source file in\" ),",
          "85:     JSI_OPT(BOOL,   SourceData, noEval, .help=\"Disable eval: just parses file to check syntax\" ),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "84:     JSI_OPT(BOOL,   SourceData, import, .help=\"Wrap in a function closure\" ),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "90: };",
          "95: {",
          "96:     jsi_Pstate *ps = interp->ps;",
          "97:     Jsi_RC rc = JSI_OK;",
          "98:     int flags = 0;",
          "99:     int i, argc = 1;",
          "101:     Jsi_Value *v, *va = Jsi_ValueArrayIndex(interp, args, 0);",
          "102:     Jsi_Value *vo = Jsi_ValueArrayIndex(interp, args, 1);",
          "103:     if (vo) {",
          "105:             Jsi_LogError(\"arg2: expected object 'options'\");",
          "",
          "[Removed Lines]",
          "93: static Jsi_RC SysSourceCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "94:     Jsi_Value **ret, Jsi_Func *funcPtr)",
          "100:     SourceData data = {.trace = interp->debugOpts.includeTrace, .once = interp->debugOpts.includeOnce};",
          "",
          "[Added Lines]",
          "95: static Jsi_RC SysSourceCmdEx(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "96:     Jsi_Value **ret, Jsi_Func *funcPtr, bool isimp)",
          "102:     SourceData data = {",
          "103:         .trace = interp->debugOpts.includeTrace,",
          "104:         .once = interp->debugOpts.includeOnce,",
          "105:         .import = isimp",
          "106:     };",
          "109:     if (!va) return JSI_ERROR;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "121:         flags|= JSI_EVAL_ERRIGNORE;",
          "122:     if (data.noEval)",
          "123:         flags|= JSI_EVAL_NOEVAL;",
          "124:     if (data.global) {",
          "125:         flags|= JSI_EVAL_GLOBAL;",
          "126:         if (data.level)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "131:     if (data.import) {",
          "132:         flags|= JSI_EVAL_IMPORT;",
          "133:         if (va && Jsi_ValueIsArray(interp, va))",
          "134:             return Jsi_LogError(\"import can not use array of files\");",
          "135:     }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "164:     return rc;",
          "165: }",
          "167: static void jsiGetTime(long *seconds, long *milliseconds)",
          "168: {",
          "169:     struct timeval tv;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "179: static Jsi_RC SysSourceCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "180:     Jsi_Value **ret, Jsi_Func *funcPtr)",
          "181: {",
          "182:     return SysSourceCmdEx(interp, args, _this, ret, funcPtr, 0);",
          "183: }",
          "186: static Jsi_RC SysImportCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "187:     Jsi_Value **ret, Jsi_Func *funcPtr)",
          "188: {",
          "189:     return SysSourceCmdEx(interp, args, _this, ret, funcPtr, 1);",
          "190: }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "4958:     { \"exec\",       SysExecCmd,      1,  2, \"val:string, options:string|object=void\", .help=\"Execute an OS command\", .retType=(uint)JSI_TT_ANY, .flags=0, .info=FN_exec, .opts=ExecOptions},",
          "4959:     { \"exit\",       SysExitCmd,      0,  1, \"code:number=0\", .help=\"Exit the current interpreter\", .retType=(uint)JSI_TT_VOID },",
          "4960:     { \"format\",     SysFormatCmd,    1, -1, \"format:string, ...\", .help=\"Printf style formatting: adds %q and %S\", .retType=(uint)JSI_TT_STRING },",
          "4962:     { \"isFinite\",   isFiniteCmd,     1,  1, \"val\", .help=\"Return true if is a finite number\", .retType=(uint)JSI_TT_BOOLEAN },",
          "4963:     { \"isMain\",     InfoIsMainCmd,   0,  0, \"\", .help=\"Return true if current script was the main script invoked from command-line\", .retType=(uint)JSI_TT_BOOLEAN },",
          "4964:     { \"isNaN\",      isNaNCmd,        1,  1, \"val\", .help=\"Return true if not a number\", .retType=(uint)JSI_TT_BOOLEAN },",
          "",
          "[Removed Lines]",
          "4961:     { \"import\",     SysSourceCmd,    1,  2, \"val:string|array, options:object=void\",  .help=\"Same as source\", .retType=(uint)JSI_TT_ANY, .flags=0, .info=0, .opts=SourceOptions},",
          "",
          "[Added Lines]",
          "4986:     { \"import\",     SysImportCmd,    1,  2, \"file:string, options:object=void\",  .help=\"Same as source with {import:true}\", .retType=(uint)JSI_TT_ANY, .flags=0, .info=0, .opts=SourceOptions},",
          "",
          "---------------"
        ],
        "src/jsiEval.c||src/jsiEval.c": [
          "File: src/jsiEval.c -> src/jsiEval.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2341:             uint ilen;",
          "2342:             char buf[JSI_BUFSIZ*2];",
          "2343:             const char *jpp;",
          "2344:             while (cnt<MAX_LOOP_COUNT) {",
          "2345:                 if (!Jsi_Gets(interp, input, buf, sizeof(buf)))",
          "2346:                     break;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2344:             if (flags&JSI_EVAL_IMPORT)",
          "2345:                 Jsi_DSAppend(&dStr, \"return (function(){ \", NULL);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2374:             }",
          "2375:             if (cnt>=MAX_LOOP_COUNT)",
          "2376:                 Jsi_LogError(\"source file too large\");",
          "2377:             str = Jsi_DSValue(&dStr);",
          "2379:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2380:             if (flags&JSI_EVAL_IMPORT)",
          "2381:                 Jsi_DSAppend(&dStr, \"})(); \", NULL);",
          "",
          "---------------"
        ],
        "tools/protos.jsi||tools/protos.jsi": [
          "File: tools/protos.jsi -> tools/protos.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "302: System.prototype.exec = function(val:string, options:string|object=void):any {};",
          "303: System.prototype.exit = function(code:number=0):void {};",
          "304: System.prototype.format = function(format:string, ...):string {};",
          "306: System.prototype.isFinite = function(val):boolean {};",
          "307: System.prototype.isMain = function():boolean {};",
          "308: System.prototype.isNaN = function(val):boolean {};",
          "",
          "[Removed Lines]",
          "305: System.prototype.import = function(val:string|array, options:object=void):any {};",
          "",
          "[Added Lines]",
          "305: System.prototype.import = function(file:string, options:object=void):any {};",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "397: var exec = function(val:string, options:string|object=void):any {};",
          "398: var exit = function(code:number=0):void {};",
          "399: var format = function(format:string, ...):string {};",
          "401: var isFinite = function(val):boolean {};",
          "402: var isMain = function():boolean {};",
          "403: var isNaN = function(val):boolean {};",
          "",
          "[Removed Lines]",
          "400: var import = function(val:string|array, options:object=void):any {};",
          "",
          "[Added Lines]",
          "400: var import = function(file:string, options:object=void):any {};",
          "",
          "---------------"
        ],
        "www/reference.wiki||www/reference.wiki": [
          "File: www/reference.wiki -> www/reference.wiki",
          "--- Hunk 1 ---",
          "[Context before]",
          "1030: |exec|([options](#options-systemexec):string&#124;object=void) |Execute an OS command. If the command ends with '&', set the 'bg' option to true. The second argument can be a string, which is the same as setting the 'inputStr' option. By default, returns the string output, unless the 'bg', 'inputStr', 'retCode' or 'retAll' options are used|",
          "1031: |exit|(code:number=0):void |Exit the current interpreter.|",
          "1032: |format|(format:string, ...):string |Printf style formatting: adds %q and %S.|",
          "1034: |isFinite|(val):boolean |Return true if is a finite number.|",
          "1035: |isMain|():boolean |Return true if current script was the main script invoked from command-line.|",
          "1036: |isNaN|(val):boolean |Return true if not a number.|",
          "",
          "[Removed Lines]",
          "1033: |import|([options](#options-systemimport):object=void) |Same as source.|",
          "",
          "[Added Lines]",
          "1033: |import|([options](#options-systemimport):object=void) |Same as source with {import:true}.|",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1081: |autoIndex|*BOOL*|Look for and load Jsi_Auto.jsi auto-index file.||",
          "1082: |exists|*BOOL*|Source file only if exists.||",
          "1083: |global|*BOOL*|File is to be sourced in global frame rather than local.||",
          "1084: |isMain|*BOOL*|Coerce to true the value of Info.isMain().||",
          "1085: |level|*UINT*|Frame to source file in.||",
          "1086: |noEval|*BOOL*|Disable eval: just parses file to check syntax.||",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1084: |import|*BOOL*|Wrap in a function closure.||",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1115: |autoIndex|*BOOL*|Look for and load Jsi_Auto.jsi auto-index file.||",
          "1116: |exists|*BOOL*|Source file only if exists.||",
          "1117: |global|*BOOL*|File is to be sourced in global frame rather than local.||",
          "1118: |isMain|*BOOL*|Coerce to true the value of Info.isMain().||",
          "1119: |level|*UINT*|Frame to source file in.||",
          "1120: |noEval|*BOOL*|Disable eval: just parses file to check syntax.||",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1119: |import|*BOOL*|Wrap in a function closure.||",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "904c1df4ed521da87649696b80f5d4f89b3ddff5",
      "candidate_info": {
        "commit_hash": "904c1df4ed521da87649696b80f5d4f89b3ddff5",
        "repo": "pcmacdon/jsish",
        "commit_url": "https://github.com/pcmacdon/jsish/commit/904c1df4ed521da87649696b80f5d4f89b3ddff5",
        "files": [
          "md/Reference.md",
          "src/jsi.h",
          "src/jsiCmds.c",
          "src/jsiEval.c",
          "src/jsiInt.h",
          "src/jsiInterp.c",
          "src/jsiProto.c",
          "src/jsiValue.c",
          "tests/info.jsi",
          "tools/protos.jsi",
          "www/reference.wiki"
        ],
        "message": "Release \"3.0.31\": Fix Object.values error checking\n\nFossilOrigin-Name: ace72b726edad95dcfb5e2c85b9be7427cfdb291f0664f700621ae9fa946584d",
        "before_after_code_files": [
          "src/jsi.h||src/jsi.h",
          "src/jsiCmds.c||src/jsiCmds.c",
          "src/jsiEval.c||src/jsiEval.c",
          "src/jsiInt.h||src/jsiInt.h",
          "src/jsiInterp.c||src/jsiInterp.c",
          "src/jsiProto.c||src/jsiProto.c",
          "src/jsiValue.c||src/jsiValue.c",
          "tests/info.jsi||tests/info.jsi",
          "tools/protos.jsi||tools/protos.jsi",
          "www/reference.wiki||www/reference.wiki"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/jsi.h||src/jsi.h",
            "src/jsiCmds.c||src/jsiCmds.c",
            "tools/protos.jsi||tools/protos.jsi",
            "www/reference.wiki||www/reference.wiki"
          ],
          "candidate": [
            "src/jsi.h||src/jsi.h",
            "src/jsiCmds.c||src/jsiCmds.c",
            "tools/protos.jsi||tools/protos.jsi",
            "www/reference.wiki||www/reference.wiki"
          ]
        }
      },
      "candidate_diff": {
        "src/jsi.h||src/jsi.h": [
          "File: src/jsi.h -> src/jsi.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #define JSI_VERSION_MAJOR   3",
          "6: #define JSI_VERSION_MINOR   0",
          "9: #define JSI_VERSION (JSI_VERSION_MAJOR + ((Jsi_Number)JSI_VERSION_MINOR/100.0) + ((Jsi_Number)JSI_VERSION_RELEASE/10000.0))",
          "",
          "[Removed Lines]",
          "7: #define JSI_VERSION_RELEASE 30",
          "",
          "[Added Lines]",
          "7: #define JSI_VERSION_RELEASE 31",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "137:     JSI_EVAL_ISMAIN         =0x40, // Set isMain to true.",
          "138:     JSI_EVAL_EXISTS         =0x80, // Source if exists.",
          "139:     JSI_EVAL_ERRIGNORE      =0x100,// Source ignores errors.",
          "142:     JSI_CALL_CONSTRUCTOR    =0x1,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "140:     JSI_EVAL_NOEVAL         =0x200,// Source parses only.",
          "",
          "---------------"
        ],
        "src/jsiCmds.c||src/jsiCmds.c": [
          "File: src/jsiCmds.c -> src/jsiCmds.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "52:     bool trace;",
          "53:     bool once;",
          "54:     bool noError;",
          "55:     bool autoIndex;",
          "56:     bool isMain;",
          "57:     bool global;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "55:     bool noEval;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "65:     JSI_OPT(BOOL,   SourceData, global, .help=\"File is to be sourced in global frame rather than local\" ),",
          "66:     JSI_OPT(BOOL,   SourceData, isMain, .help=\"Coerce to true the value of Info.isMain()\" ),",
          "67:     JSI_OPT(UINT,   SourceData, level,  .help=\"Frame to source file in\" ),",
          "68:     JSI_OPT(BOOL,   SourceData, noError,.help=\"Ignore errors in sourced file\" ),",
          "69:     JSI_OPT(BOOL,   SourceData, once,   .help=\"Source file only if not already sourced (Default: Interp.debugOpts.includeOnce)\" ),",
          "70:     JSI_OPT(BOOL,   SourceData, trace,  .help=\"Trace include statements (Default: Interp.debugOpts.includeTrace)\" ),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "69:     JSI_OPT(BOOL,   SourceData, noEval, .help=\"Disable eval: just parses file to check syntax\" ),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "101:         flags|= JSI_EVAL_EXISTS;",
          "102:     if (data.noError)",
          "103:         flags|= JSI_EVAL_ERRIGNORE;",
          "104:     if (data.global) {",
          "105:         flags|= JSI_EVAL_GLOBAL;",
          "106:         if (data.level)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "106:     if (data.noEval)",
          "107:         flags|= JSI_EVAL_NOEVAL;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1581: }",
          "1583: static Jsi_RC SysPutsCmd_(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this, Jsi_Value **ret,",
          "1585: {",
          "1587:     const char *fn = NULL;",
          "1588:     Jsi_DString dStr, oStr;",
          "1589:     if (interp->noStderr)",
          "1590:         stdErr = 0;",
          "1591:     Jsi_Chan *chan = (stdErr ? jsi_Stderr : jsi_Stdout);",
          "",
          "[Removed Lines]",
          "1584:     Jsi_Func *funcPtr, bool stdErr, jsi_LogOptions *popts, const char *argStr, bool conLog)",
          "1586:     int i, cnt = 0, quote = (popts->file);",
          "",
          "[Added Lines]",
          "1588:     Jsi_Func *funcPtr, bool stdErr, jsi_LogOptions *popts, const char *argStr, bool conLog, bool islog)",
          "1590:     int i = 0, cnt = 0, quote = (popts->file);",
          "1593:     Jsi_Value *v;",
          "1594:     if (islog) {",
          "1595:         v = Jsi_ValueArrayIndex(interp, args, 0);",
          "1596:         if (Jsi_ValueIsBoolean(interp, v)) {",
          "1597:             i++;",
          "1598:             if (Jsi_ValueIsFalse(interp, v)) return JSI_OK;",
          "1599:         }",
          "1600:     }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1611:                 || (!interp->logOpts.Info && jsi_PrefixMatch(argStr, \"INFO: \")))",
          "1612:                 goto done;",
          "1613:         }",
          "1617:             if (!v) continue;",
          "1618:             int len = 0;",
          "1619:             if (cnt++)",
          "",
          "[Removed Lines]",
          "1615:         for (i = 0; i < argc; ++i) {",
          "1616:             Jsi_Value *v = Jsi_ValueArrayIndex(interp, args, i);",
          "",
          "[Added Lines]",
          "1626:         for (; i < argc; ++i) {",
          "1627:             v = Jsi_ValueArrayIndex(interp, args, i);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1675:     return SysPrintfCmd_(interp, args, _this, ret, funcPtr, jsi_Stderr);",
          "1676: }",
          "1678: static Jsi_RC consoleLogCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this, Jsi_Value **ret,",
          "1679:     Jsi_Func *funcPtr)",
          "1680: {",
          "1681:     int conLog = ((!interp->logOpts.Error) || (!interp->logOpts.Warn) || (!interp->logOpts.Info));",
          "1683: }",
          "1685: static Jsi_RC consolePutsCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this, Jsi_Value **ret,",
          "1686:     Jsi_Func *funcPtr)",
          "1687: {",
          "1688:     jsi_LogOptions lo = {};",
          "1690: }",
          "1692: #define FN_puts JSI_INFO(\"\\",
          "",
          "[Removed Lines]",
          "1682:     return SysPutsCmd_(interp, args, _this, ret, funcPtr, 1, &interp->logOpts, NULL, conLog);",
          "1689:     return SysPutsCmd_(interp, args, _this, ret, funcPtr, 1, (interp->tracePuts?&interp->logOpts:&lo), NULL, 0);",
          "",
          "[Added Lines]",
          "1689: #define FN_logputs \"\\",
          "1690: If first argument is a boolean, output appears only if true.\"",
          "1695:     return SysPutsCmd_(interp, args, _this, ret, funcPtr, 1, &interp->logOpts, NULL, conLog, 1);",
          "1702:     return SysPutsCmd_(interp, args, _this, ret, funcPtr, 1, (interp->tracePuts?&interp->logOpts:&lo), NULL, 0, 0);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1695:     Jsi_Func *funcPtr)",
          "1696: {",
          "1697:     jsi_LogOptions lo = {};",
          "1699: }",
          "1701: static Jsi_RC SysLogCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this, Jsi_Value **ret,",
          "1702:     Jsi_Func *funcPtr)",
          "1703: {",
          "1705: }",
          "1707: typedef struct {",
          "",
          "[Removed Lines]",
          "1698:     return SysPutsCmd_(interp, args, _this, ret, funcPtr, 0, (interp->tracePuts?&interp->logOpts:&lo), NULL, 0);",
          "1704:     return SysPutsCmd_(interp, args, _this, ret, funcPtr, 0, &interp->logOpts, NULL, 0);",
          "",
          "[Added Lines]",
          "1711:     return SysPutsCmd_(interp, args, _this, ret, funcPtr, 0, (interp->tracePuts?&interp->logOpts:&lo), NULL, 0, 0);",
          "1717:     return SysPutsCmd_(interp, args, _this, ret, funcPtr, 0, &interp->logOpts, NULL, 0, 1);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1804:             jsi_LogOptions lo = {}, *loPtr = ((udata.mode==jsi_AssertModeLog || interp->tracePuts)?&interp->logOpts:&lo);",
          "1805:             Jsi_DSInit(&dStr);",
          "1806:             const char *imsg = Jsi_DSAppend(&dStr, msg, NULL);",
          "1808:             Jsi_DSFree(&dStr);",
          "1809:         } else",
          "1810:             rv = Jsi_LogError(\"%s\", msg);",
          "",
          "[Removed Lines]",
          "1807:             SysPutsCmd_(interp, NULL, _this, ret, funcPtr, !udata.noStderr, loPtr, imsg, 0);",
          "",
          "[Added Lines]",
          "1820:             SysPutsCmd_(interp, NULL, _this, ret, funcPtr, !udata.noStderr, loPtr, imsg, 0, 0);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "4736:     { \"assert\", jsi_AssertCmd,      1,  3, \"expr:boolean|number|function, msg:string=void, options:object=void\",  .help=\"Same as System.assert()\", .retType=(uint)JSI_TT_VOID, .flags=0, .info=0, .opts=AssertOptions},",
          "4737:     { \"error\",  consoleLogCmd,      1, -1, \"val, ...\", .help=\"Same as log\", .retType=(uint)JSI_TT_VOID, .flags=0 },",
          "4738:     { \"input\",  consoleInputCmd,    0,  0, \"\", .help=\"Read input from the console\", .retType=(uint)JSI_TT_STRING|JSI_TT_VOID },",
          "4740:     { \"printf\", consolePrintfCmd,   1, -1, \"format:string, ...\", .help=\"Same as System.printf but goes to stderr\", .retType=(uint)JSI_TT_VOID, .flags=0 },",
          "4741:     { \"puts\",   consolePutsCmd,     1, -1, \"val, ...\", .help=\"Same as System.puts, but goes to stderr\", .retType=(uint)JSI_TT_VOID, .flags=0 },",
          "4742:     { \"warn\",   consoleLogCmd,      1, -1, \"val, ...\", .help=\"Same as log\", .retType=(uint)JSI_TT_VOID, .flags=0 },",
          "",
          "[Removed Lines]",
          "4739:     { \"log\",    consoleLogCmd,      1, -1, \"val, ...\", .help=\"Same as System.puts, but goes to stderr and includes file:line\", .retType=(uint)JSI_TT_VOID, .flags=0 },",
          "",
          "[Added Lines]",
          "4752:     { \"log\",    consoleLogCmd,      1, -1, \"val, ...\", .help=\"Same as System.puts, but goes to stderr and includes file:line\", .retType=(uint)JSI_TT_VOID, .flags=0, .info=FN_logputs },",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "4777:     { \"executable\", InfoExecutableCmd,  0,  0, \"\", .help=\"Return name of executable\", .retType=(uint)JSI_TT_STRING },",
          "4778:     { \"execZip\",    InfoExecZipCmd,     0,  0, \"\", .help=\"If executing a .zip file, return file name\", .retType=(uint)JSI_TT_STRING|JSI_TT_VOID },",
          "4779:     { \"files\",      InfoFilesCmd,       0,  0, \"\", .help=\"Return list of all sourced files\", .retType=(uint)JSI_TT_ARRAY },",
          "4781:     { \"locals\",     InfoLocalsCmd,      0,  1, \"filter:boolean=void\", .help=\"Return locals; use filter=true/false just vars/functions\", .retType=(uint)JSI_TT_OBJECT },",
          "4782:     { \"interp\",     jsi_InterpInfo,     0,  1, \"interp:userobj=void\", .help=\"Return info on given or current interp\", .retType=(uint)JSI_TT_OBJECT },",
          "4783:     { \"isMain\",     InfoIsMainCmd,      0,  0, \"\", .help=\"Return true if current script was the main script invoked from command-line\", .retType=(uint)JSI_TT_BOOLEAN },",
          "",
          "[Removed Lines]",
          "4780:     { \"funcs\",      InfoFuncsCmd,       0,  1, \"arg:string|regexp|object=void\", .help=\"Return details or list of matching functions\", .retType=(uint)JSI_TT_ARRAY|JSI_TT_OBJECT },",
          "",
          "[Added Lines]",
          "4793:     { \"funcs\",      InfoFuncsCmd,       0,  1, \"arg:string|regexp|function|object=void\", .help=\"Return details or list of matching functions\", .retType=(uint)JSI_TT_ARRAY|JSI_TT_OBJECT },",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "4868: #ifndef JSI_OMIT_LOAD",
          "4869:     { \"load\",       jsi_LoadLoadCmd, 1,  1, \"shlib:string\", .help=\"Load a shared executable and invoke its _Init call\", .retType=(uint)JSI_TT_VOID },",
          "4870: #endif",
          "4872:     { \"matchObj\",   SysMatchObjCmd,  1,  4, \"obj:object, match:string=void, partial=false, noerror=false\", .help=\"Validate that object matches given name:type string. With single arg returns generated string\", .retType=(uint)JSI_TT_BOOLEAN|JSI_TT_STRING },",
          "4873:     { \"noOp\",       jsi_NoOpCmd,     0, -1, \"\", .help=\"A No-Op. A zero overhead command call that is useful for debugging\" },",
          "4874:     { \"parseInt\",   parseIntCmd,     1,  2, \"val:any, base:number=10\", .help=\"Convert string to an integer\", .retType=(uint)JSI_TT_NUMBER },",
          "",
          "[Removed Lines]",
          "4871:     { \"log\",        SysLogCmd,       1, -1, \"val, ...\", .help=\"Same as puts, but includes file:line\", .retType=(uint)JSI_TT_VOID, .flags=0 },",
          "",
          "[Added Lines]",
          "4884:     { \"log\",        SysLogCmd,       1, -1, \"val, ...\", .help=\"Same as puts, but includes file:line\", .retType=(uint)JSI_TT_VOID, .flags=0, .info=FN_logputs },",
          "",
          "---------------"
        ],
        "src/jsiEval.c||src/jsiEval.c": [
          "File: src/jsiEval.c -> src/jsiEval.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2265:                 fi = (jsi_FileInfo *)Jsi_Calloc(1,sizeof(*fi));",
          "2266:                 if (!fi) goto bail;",
          "2267:                 Jsi_HashValueSet(hPtr, fi);",
          "2269:                 fi->fileName = (char*)Jsi_KeyAdd(interp, fname);",
          "2270:                 char *dfname = Jsi_Strdup(fname);",
          "2271:                 if ((cp = Jsi_Strrchr(dfname,'/')))",
          "2274:                 Jsi_Free(dfname);",
          "2275:             }",
          "2276:             if (!input->fname)",
          "",
          "[Removed Lines]",
          "2268:                 fi->origFile = (char*)Jsi_KeyAdd(interp, origFile);",
          "2273:                 interp->curDir = fi->dirName = (char*)Jsi_KeyAdd(interp, dfname);",
          "",
          "[Added Lines]",
          "2272:                 fi->dirName = interp->curDir = (char*)Jsi_KeyAdd(interp, dfname);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2344:     interp->evalFlags = flags;",
          "2345:     if (!ps)",
          "2346:         rc = JSI_ERROR;",
          "2348:         Jsi_ValueMakeUndef(interp, &interp->retValue);",
          "2349:         interp->ps = ps;",
          "2350:         Jsi_Value *retValue = interp->retValue;",
          "",
          "[Removed Lines]",
          "2347:     else if (!interp->noEval) {",
          "",
          "[Added Lines]",
          "2346:     else if (!interp->noEval && !(flags&JSI_EVAL_NOEVAL)) {",
          "",
          "---------------"
        ],
        "src/jsiInt.h||src/jsiInt.h": [
          "File: src/jsiInt.h -> src/jsiInt.h"
        ],
        "src/jsiInterp.c||src/jsiInterp.c": [
          "File: src/jsiInterp.c -> src/jsiInterp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1131:     interp = (Jsi_Interp *)Jsi_Calloc(1,sizeof(*interp));",
          "1132:     interp->framePtr = &interp->topFrame;",
          "1133:     interp->framePtr->filePtr = &interp->topFile;",
          "1135:     if (!parent)",
          "1136:         interp->maxInterpDepth = JSI_MAX_SUBINTERP_DEPTH;",
          "1137:     else {",
          "",
          "[Removed Lines]",
          "1134:     interp->topFile.fileName = interp->topFile.dirName = interp->topFile.origFile =\"\";",
          "",
          "[Added Lines]",
          "1134:     interp->topFile.fileName = interp->topFile.dirName = \"\";",
          "",
          "---------------"
        ],
        "src/jsiProto.c||src/jsiProto.c": [
          "File: src/jsiProto.c -> src/jsiProto.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "380:    if (argc>0)",
          "381:         val = Jsi_ValueArrayIndex(interp, args, 0);",
          "384:     if (!Jsi_ValueIsObjType(interp, val, JSI_OT_OBJECT))",
          "386:     Jsi_ValueMakeArrayObject(interp, ret, NULL);",
          "389: }",
          "391: Jsi_RC jsi_ObjectToStringCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "",
          "[Removed Lines]",
          "383:     Jsi_RC rc = Jsi_ValueGetKeys(interp, val, *ret);",
          "385:         Jsi_LogError(\"can not call values() with non-object\");",
          "387:     Jsi_ObjGetValues(interp, Jsi_ValueGetObj(interp, val), *ret);",
          "388:     return rc;",
          "",
          "[Added Lines]",
          "384:         return Jsi_LogError(\"can not call values() with non-object\");",
          "386:     return Jsi_ObjGetValues(interp, Jsi_ValueGetObj(interp, val), *ret);",
          "",
          "---------------"
        ],
        "src/jsiValue.c||src/jsiValue.c": [
          "File: src/jsiValue.c -> src/jsiValue.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "123:     if (vd->ip) {",
          "124:         vd->ipLine = vd->ip->Line;",
          "125:         vd->ipOp = vd->ip->op;",
          "127:     }",
          "128:     vd->interp = interp;",
          "129:     if (jsi_memDebugBreakIdx && jsi_memDebugBreakIdx == vd->Idx)",
          "",
          "[Removed Lines]",
          "126:         vd->ipFname = vd->ip->fname;",
          "",
          "[Added Lines]",
          "126:         vd->ipFname = (vd->ip->filePtr?vd->ip->filePtr->fileName:0);",
          "",
          "---------------"
        ],
        "tests/info.jsi||tests/info.jsi": [
          "File: tests/info.jsi -> tests/info.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "57: K = {} ==> {}",
          "58: K.f(1) ==> 'F'",
          "59: undefined",
          "63: Info.funcs(K) ==> [ \"f\", \"g\" ]",
          "64: File.tail(Info.script()) ==> info.jsi",
          "65: File.tail(Info.script(XX)) ==> info.jsi",
          "",
          "[Removed Lines]",
          "60: Info.funcs(K.f).argList ==> /home/pmacdona/src/jsi3/tests/info.jsi:29: warn: type mismatch for argument arg 1 'arg': expected \"string|object|regexp\" but got \"function\", in call to 'funcs' declared at info.jsi:0.0 <function (z) {...}>.    (at or near \"f\")",
          "62: [ \"z\" ]",
          "",
          "[Added Lines]",
          "60: Info.funcs(K.f).argList ==> [ \"z\" ]",
          "",
          "---------------"
        ],
        "tools/protos.jsi||tools/protos.jsi": [
          "File: tools/protos.jsi -> tools/protos.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "135: Info.prototype.execZip = function():string|void {};",
          "136: Info.prototype.executable = function():string {};",
          "137: Info.prototype.files = function():array {};",
          "139: Info.prototype.interp = function(interp:userobj=void):object {};",
          "140: Info.prototype.isMain = function():boolean {};",
          "141: Info.prototype.keywords = function(isSql=false, name:string=void):boolean|array {};",
          "",
          "[Removed Lines]",
          "138: Info.prototype.funcs = function(arg:string|regexp|object=void):array|object {};",
          "",
          "[Added Lines]",
          "138: Info.prototype.funcs = function(arg:string|regexp|function|object=void):array|object {};",
          "",
          "---------------"
        ],
        "www/reference.wiki||www/reference.wiki": [
          "File: www/reference.wiki -> www/reference.wiki",
          "--- Hunk 1 ---",
          "[Context before]",
          "546: <tr><td>execZip</td><td>execZip():string|void </td><td>If executing a .zip file, return file name.</td></tr>",
          "547: <tr><td>executable</td><td>executable():string </td><td>Return name of executable.</td></tr>",
          "548: <tr><td>files</td><td>files():array </td><td>Return list of all sourced files.</td></tr>",
          "550: <tr><td>interp</td><td>interp(interp:userobj=void):object </td><td>Return info on given or current interp.</td></tr>",
          "551: <tr><td>isMain</td><td>isMain():boolean </td><td>Return true if current script was the main script invoked from command-line.</td></tr>",
          "552: <tr><td>keywords</td><td>keywords(isSql=false, name:string=void):boolean|array </td><td>Return/lookup reserved keyword.</td></tr>",
          "",
          "[Removed Lines]",
          "549: <tr><td>funcs</td><td>funcs(arg:string|regexp|object=void):array|object </td><td>Return details or list of matching functions.</td></tr>",
          "",
          "[Added Lines]",
          "549: <tr><td>funcs</td><td>funcs(arg:string|regexp|function|object=void):array|object </td><td>Return details or list of matching functions.</td></tr>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1361: <tr><td>isMain</td><td>isMain():boolean </td><td>Return true if current script was the main script invoked from command-line.</td></tr>",
          "1362: <tr><td>isNaN</td><td>isNaN(val):boolean </td><td>Return true if not a number.</td></tr>",
          "1363: <tr><td>load</td><td>load(shlib:string):void </td><td>Load a shared executable and invoke its _Init call.</td></tr>",
          "1365: <tr><td>matchObj</td><td>matchObj(obj:object, match:string=void, partial=false, noerror=false):string|boolean </td><td>Validate that object matches given name:type string. With single arg returns generated string.</td></tr>",
          "1366: <tr><td>noOp</td><td>noOp() </td><td>A No-Op. A zero overhead command call that is useful for debugging.</td></tr>",
          "1367: <tr><td>parseFloat</td><td>parseFloat(val):number </td><td>Convert string to a double.</td></tr>",
          "",
          "[Removed Lines]",
          "1364: <tr><td>log</td><td>log(val, ...):void </td><td>Same as puts, but includes file:line.</td></tr>",
          "",
          "[Added Lines]",
          "1364: <tr><td>log</td><td>log(val, ...):void </td><td>Same as puts, but includes file:line. If first argument is a boolean, output appears only if true.</td></tr>",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1442: <tr><td>global</td><td><i>BOOL</i></td><td>File is to be sourced in global frame rather than local.</td><td><i></i></td></tr>",
          "1443: <tr><td>isMain</td><td><i>BOOL</i></td><td>Coerce to true the value of Info.isMain().</td><td><i></i></td></tr>",
          "1444: <tr><td>level</td><td><i>UINT</i></td><td>Frame to source file in.</td><td><i></i></td></tr>",
          "1445: <tr><td>noError</td><td><i>BOOL</i></td><td>Ignore errors in sourced file.</td><td><i></i></td></tr>",
          "1446: <tr><td>once</td><td><i>BOOL</i></td><td>Source file only if not already sourced (Default: Interp.debugOpts.includeOnce).</td><td><i></i></td></tr>",
          "1447: <tr><td>trace</td><td><i>BOOL</i></td><td>Trace include statements (Default: Interp.debugOpts.includeTrace).</td><td><i></i></td></tr>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1445: <tr><td>noEval</td><td><i>BOOL</i></td><td>Disable eval: just parses file to check syntax.</td><td><i></i></td></tr>",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1838: <tr><td>assert</td><td>assert(expr:boolean|number|function, msg:string=void, <a href='#console.assertOptions'>options</a>:object=void):void </td><td>Same as System.assert().</td></tr>",
          "1839: <tr><td>error</td><td>error(val, ...):void </td><td>Same as log.</td></tr>",
          "1840: <tr><td>input</td><td>input():string|void </td><td>Read input from the console.</td></tr>",
          "1842: <tr><td>printf</td><td>printf(format:string, ...):void </td><td>Same as System.printf but goes to stderr.</td></tr>",
          "1843: <tr><td>puts</td><td>puts(val, ...):void </td><td>Same as System.puts, but goes to stderr.</td></tr>",
          "1844: <tr><td>warn</td><td>warn(val, ...):void </td><td>Same as log.</td></tr>",
          "",
          "[Removed Lines]",
          "1841: <tr><td>log</td><td>log(val, ...):void </td><td>Same as System.puts, but goes to stderr and includes file:line.</td></tr>",
          "",
          "[Added Lines]",
          "1842: <tr><td>log</td><td>log(val, ...):void </td><td>Same as System.puts, but goes to stderr and includes file:line. If first argument is a boolean, output appears only if true.</td></tr>",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7142b2c27da2f0a16a526c579b6d379df369de8a",
      "candidate_info": {
        "commit_hash": "7142b2c27da2f0a16a526c579b6d379df369de8a",
        "repo": "pcmacdon/jsish",
        "commit_url": "https://github.com/pcmacdon/jsish/commit/7142b2c27da2f0a16a526c579b6d379df369de8a",
        "files": [
          "lib/www/docs/app.js",
          "lib/www/js/Jsish.js",
          "lib/www/md/Reference.md",
          "src/jsi.h",
          "src/jsiCode.c",
          "src/jsiFunc.c",
          "src/jsiInt.h",
          "src/jsiInterp.c",
          "src/jsiLexer.c",
          "src/jsiRegexp.c",
          "src/parser.y",
          "tools/protos.jsi"
        ],
        "message": "Release \"3.4.1\": Add noES6 option for checking .js web scripts, docs cleanup\n\nFossilOrigin-Name: d171926609d98202d4070878b013b6761a16f4d989ca9da3ed4d953c40825b3f",
        "before_after_code_files": [
          "lib/www/js/Jsish.js||lib/www/js/Jsish.js",
          "src/jsi.h||src/jsi.h",
          "src/jsiCode.c||src/jsiCode.c",
          "src/jsiFunc.c||src/jsiFunc.c",
          "src/jsiInt.h||src/jsiInt.h",
          "src/jsiInterp.c||src/jsiInterp.c",
          "src/jsiLexer.c||src/jsiLexer.c",
          "src/jsiRegexp.c||src/jsiRegexp.c",
          "src/parser.y||src/parser.y",
          "tools/protos.jsi||tools/protos.jsi"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/jsi.h||src/jsi.h",
            "tools/protos.jsi||tools/protos.jsi"
          ],
          "candidate": [
            "src/jsi.h||src/jsi.h",
            "tools/protos.jsi||tools/protos.jsi"
          ]
        }
      },
      "candidate_diff": {
        "lib/www/js/Jsish.js||lib/www/js/Jsish.js": [
          "File: lib/www/js/Jsish.js -> lib/www/js/Jsish.js"
        ],
        "src/jsi.h||src/jsi.h": [
          "File: src/jsi.h -> src/jsi.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #define JSI_VERSION_MAJOR   3",
          "6: #define JSI_VERSION_MINOR   4",
          "9: #define JSI_VERSION (JSI_VERSION_MAJOR + ((Jsi_Number)JSI_VERSION_MINOR/100.0) + ((Jsi_Number)JSI_VERSION_RELEASE/10000.0))",
          "",
          "[Removed Lines]",
          "7: #define JSI_VERSION_RELEASE 0",
          "",
          "[Added Lines]",
          "7: #define JSI_VERSION_RELEASE 1",
          "",
          "---------------"
        ],
        "src/jsiCode.c||src/jsiCode.c": [
          "File: src/jsiCode.c -> src/jsiCode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "219:     JSI_NEW_CODESLN(0,OP_PUSHSTR, str);",
          "220: }",
          "222: static Jsi_OpCodes *code_push_vstring(jsi_Pstate *p, jsi_Pline *line, Jsi_String *s) {",
          "223:     JSI_NEW_CODESLN(0,OP_PUSHVSTR, s);",
          "224: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "222: static void code_es6(jsi_Pstate *p) {",
          "223:     Jsi_Interp *interp = p->interp;",
          "224:     if (interp->noES6) {",
          "225:         Jsi_LogError(\"es6 feature\");",
          "226:         p->err_count++;",
          "227:     }",
          "228: }",
          "",
          "---------------"
        ],
        "src/jsiFunc.c||src/jsiFunc.c": [
          "File: src/jsiFunc.c -> src/jsiFunc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "423: void jsi_FuncCallCheck(jsi_Pstate *p, jsi_Pline *line, int argc, bool isNew, const char *name, const char *namePre, Jsi_OpCodes *argCodes)",
          "424: {",
          "425:     Jsi_Interp *interp = p->interp;",
          "426:     if (interp->noCheck || name == NULL || (!interp->typeCheck.funcdecl && interp->inParse))",
          "427:         return;",
          "428:     if (name && isdigit(name[0]))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "426:     if (name && interp->noES6 && interp->noEval && (!Jsi_Strcmp(name, \"fetch\") || !Jsi_Strcmp(name, \"import\")))",
          "427:         Jsi_LogWarn(\"possible ES6 function call: %s\", name);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "493:     Jsi_Func *f = jsi_FuncNew(interp);",
          "494:     jsi_Lexer *l = pstate->lexer;",
          "495:     f->isArrow = flags&1;",
          "496:     f->isSet = flags&2;",
          "497:     f->isGet = flags&4;",
          "498:     f->type = FC_NORMAL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "498:     if (f->isArrow && interp->noES6) {",
          "499:         Jsi_LogError(\"Arrow function used in noES6 mode: %s\", name);",
          "500:         pstate->err_count++;",
          "501:     }",
          "",
          "---------------"
        ],
        "src/jsiInt.h||src/jsiInt.h": [
          "File: src/jsiInt.h -> src/jsiInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1130:     bool noConfig;",
          "1131:     bool noLoad;",
          "1132:     bool noEval;",
          "1133:     bool noAutoLoad;",
          "1134:     bool noStderr;",
          "1135:     bool noSubInterps;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1133:     bool noES6;",
          "",
          "---------------"
        ],
        "src/jsiInterp.c||src/jsiInterp.c": [
          "File: src/jsiInterp.c -> src/jsiInterp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "111:     JSI_OPT(BOOL,  Jsi_Interp, noCheck,     .help=\"Disable type checking\", .flags=JSI_OPT_LOCKSAFE ),",
          "112:     JSI_OPT(BOOL,  Jsi_Interp, noConfig,    .help=\"Disable use of Interp.conf to change options after create\", jsi_IIOF),",
          "113:     JSI_OPT(BOOL,  Jsi_Interp, noError,     .help=\"Type checks failures are warning\", .flags=JSI_OPT_LOCKSAFE ),",
          "114:     JSI_OPT(BOOL,  Jsi_Interp, noEval,      .help=\"Disable eval: just parses file to check syntax\", jsi_IIOF),",
          "115:     JSI_OPT(BOOL,  Jsi_Interp, noInput,     .help=\"Disable use of console.input()\", .flags=JSI_OPT_LOCKSAFE),",
          "116:     JSI_OPT(BOOL,  Jsi_Interp, noLoad,      .help=\"Disable load of shared libs\", .flags=JSI_OPT_LOCKSAFE),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "114:     JSI_OPT(BOOL,  Jsi_Interp, noES6,       .help=\"Warn/error when ES6 features are used, eg. arrow funcs or let/const\" ),",
          "",
          "---------------"
        ],
        "src/jsiLexer.c||src/jsiLexer.c": [
          "File: src/jsiLexer.c -> src/jsiLexer.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "484:             if (!regtxt)",
          "485:                 return 0;",
          "486:             Jsi_Regex *re = Jsi_RegExpNew(interp, regtxt, JSI_REG_STATIC);",
          "488:                  Jsi_Free(regtxt);",
          "489:                  return -1;",
          "490:             }",
          "",
          "[Removed Lines]",
          "487:             if (!(yylvalp->regex = re)) {",
          "",
          "[Added Lines]",
          "487:             if (!(yylvalp->regex = re) && !(interp->noEval && interp->noES6)) {",
          "",
          "---------------"
        ],
        "src/jsiRegexp.c||src/jsiRegexp.c": [
          "File: src/jsiRegexp.c -> src/jsiRegexp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "37: {",
          "38:     bool isNew;",
          "39:     Jsi_HashEntry *hPtr;",
          "41:     char c, *cm, *ce;",
          "42:     const char *cp;",
          "43:     Jsi_Regex *re;",
          "",
          "[Removed Lines]",
          "40:     int flag = REG_EXTENDED;",
          "",
          "[Added Lines]",
          "40:     int flag = REG_EXTENDED, rec = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "80:     }",
          "82:     regex_t reg;",
          "86:         return NULL;",
          "87:     }",
          "",
          "[Removed Lines]",
          "83:     if (!jsi_regexValid(cp) || regcomp(&reg, cp, flag)) {",
          "85:         Jsi_LogError(\"Invalid regex string '%s'\", cp);",
          "",
          "[Added Lines]",
          "83:     if (!jsi_regexValid(cp) || (rec=regcomp(&reg, cp, flag))) {",
          "84:         char errbuf[200];",
          "85:         errbuf[0] = 0;",
          "87:         if (rec) {",
          "88:             regerror(rec, &reg, errbuf, sizeof(errbuf)-20);",
          "89:             if (rec==REG_BADRPT && Jsi_Strstr(cp, \"(?:\"))",
          "90:                 strcat(errbuf, \" eg. (?:\");",
          "91:         }",
          "92:         bool iswarn = (interp->inParse && interp->noEval && interp->noES6);",
          "93:         Jsi_LogMsg(interp, NULL,(iswarn?JSI_LOG_WARN:JSI_LOG_ERROR), \"Invalid regex string '%s' : %s\", cp, errbuf);",
          "",
          "---------------"
        ],
        "src/parser.y||src/parser.y": [
          "File: src/parser.y -> src/parser.y",
          "--- Hunk 1 ---",
          "[Context before]",
          "151: localvar:",
          "152:     LOCAL { $$ = LOCAL; }",
          "155: ;",
          "157: objexport:",
          "",
          "[Removed Lines]",
          "153:     | LOCALLET { $$ = LOCALLET; }",
          "154:     | LOCALCONST { $$ = LOCALCONST; }",
          "",
          "[Added Lines]",
          "153:     | LOCALLET { $$ = LOCALLET;  code_es6(pstate);}",
          "154:     | LOCALCONST { $$ = LOCALCONST; code_es6(pstate); }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "390: inof:",
          "391:     IN      { $$ = 0; }",
          "393: ;",
          "395: for_statement:",
          "",
          "[Removed Lines]",
          "392:     | OF    { $$ = 1; }",
          "",
          "[Added Lines]",
          "392:     | OF    { $$ = 1;  code_es6(pstate); }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "846:     IDENTIFIER '(' args_opt ')' func_statement_block {",
          "847:         Jsi_OpCodes *lval = code_push_func(pstate, &@3, jsi_FuncMake(pstate, $3, $5, &@1, $1, 0));",
          "848:         lval->lvalue_flag = 1;",
          "850:         $$ = codes_join(code_push_string(pstate,&@1, $1), lval);",
          "851:         jsi_PstatePop(pstate);",
          "852:     }",
          "",
          "[Removed Lines]",
          "849:         lval->lvalue_name = $1;",
          "",
          "[Added Lines]",
          "849:         lval->lvalue_name = $1;",
          "850:         code_es6(pstate);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "855: itemident:",
          "856:     itemfunc { $$ = $1; }",
          "857:     | IDENTIFIER  {",
          "858:         Jsi_OpCodes *lval = code_push_index(pstate, &@1, $1, 0);",
          "859:         lval->lvalue_flag = 1;",
          "860:         lval->lvalue_name = $1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "859:         code_es6(pstate);",
          "",
          "---------------"
        ],
        "tools/protos.jsi||tools/protos.jsi": [
          "File: tools/protos.jsi -> tools/protos.jsi"
        ]
      }
    },
    {
      "candidate_hash": "7f490a5689be7df2acd12f5ca3c147e560110cf0",
      "candidate_info": {
        "commit_hash": "7f490a5689be7df2acd12f5ca3c147e560110cf0",
        "repo": "pcmacdon/jsish",
        "commit_url": "https://github.com/pcmacdon/jsish/commit/7f490a5689be7df2acd12f5ca3c147e560110cf0",
        "files": [
          "Makefile",
          "c-demos/Makefile",
          "c-demos/dyno.c",
          "c-demos/dynspec-test.jsi",
          "c-demos/dynspec.c",
          "c-demos/dynspecn-test.jsi",
          "c-demos/dynspecn.c",
          "jsish.c",
          "src/jsi.h",
          "src/jsiArray.c",
          "src/jsiCmds.c",
          "src/jsiEval.c",
          "src/jsiFileCmds.c",
          "src/jsiFilesys.c",
          "src/jsiFunc.c",
          "src/jsiHash.c",
          "src/jsiInt.h",
          "src/jsiInterp.c",
          "src/jsiMySql.c",
          "src/jsiObj.c",
          "src/jsiProto.c",
          "src/jsiSqlite.c",
          "src/jsiString.c",
          "src/jsiStubs.h",
          "src/jsiTree.c",
          "src/jsiUtils.c",
          "src/jsiValue.c",
          "src/jsiVfs.c",
          "src/jsiWebSocket.c",
          "tests/obj2.jsi",
          "tools/protos.jsi"
        ],
        "message": "Release \"3.1.8\": Fix get/set _this context\n\nFossilOrigin-Name: 2b0d6da54a524f438db9909f6af7f8b28850f388b6b8b454496e6cfee5702bde",
        "before_after_code_files": [
          "c-demos/dyno.c||c-demos/dyno.c",
          "c-demos/dynspec-test.jsi||c-demos/dynspec-test.jsi",
          "c-demos/dynspec.c||c-demos/dynspec.c",
          "c-demos/dynspecn-test.jsi||c-demos/dynspecn-test.jsi",
          "c-demos/dynspecn.c||c-demos/dynspecn.c",
          "jsish.c||jsish.c",
          "src/jsi.h||src/jsi.h",
          "src/jsiArray.c||src/jsiArray.c",
          "src/jsiCmds.c||src/jsiCmds.c",
          "src/jsiEval.c||src/jsiEval.c",
          "src/jsiFileCmds.c||src/jsiFileCmds.c",
          "src/jsiFilesys.c||src/jsiFilesys.c",
          "src/jsiFunc.c||src/jsiFunc.c",
          "src/jsiHash.c||src/jsiHash.c",
          "src/jsiInt.h||src/jsiInt.h",
          "src/jsiInterp.c||src/jsiInterp.c",
          "src/jsiMySql.c||src/jsiMySql.c",
          "src/jsiObj.c||src/jsiObj.c",
          "src/jsiProto.c||src/jsiProto.c",
          "src/jsiSqlite.c||src/jsiSqlite.c",
          "src/jsiString.c||src/jsiString.c",
          "src/jsiStubs.h||src/jsiStubs.h",
          "src/jsiTree.c||src/jsiTree.c",
          "src/jsiUtils.c||src/jsiUtils.c",
          "src/jsiValue.c||src/jsiValue.c",
          "src/jsiVfs.c||src/jsiVfs.c",
          "src/jsiWebSocket.c||src/jsiWebSocket.c",
          "tests/obj2.jsi||tests/obj2.jsi",
          "tools/protos.jsi||tools/protos.jsi"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/jsi.h||src/jsi.h",
            "src/jsiArray.c||src/jsiArray.c",
            "src/jsiCmds.c||src/jsiCmds.c",
            "tools/protos.jsi||tools/protos.jsi"
          ],
          "candidate": [
            "src/jsi.h||src/jsi.h",
            "src/jsiArray.c||src/jsiArray.c",
            "src/jsiCmds.c||src/jsiCmds.c",
            "tools/protos.jsi||tools/protos.jsi"
          ]
        }
      },
      "candidate_diff": {
        "c-demos/dyno.c||c-demos/dyno.c": [
          "File: c-demos/dyno.c -> c-demos/dyno.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "46:     Jsi_IncrRefCount(interp, dynObj);",
          "48:     Jsi_Obj *obj = Jsi_ValueGetObj(interp, dynObj);",
          "53:     return JSI_OK;",
          "54: }",
          "",
          "[Removed Lines]",
          "49:     Jsi_ObjAccessor(interp, obj, 1, \"foo\", ocmd);",
          "50:     Jsi_ObjAccessor(interp, obj, 0, \"foo\", ocmd);",
          "51:     Jsi_ObjAccessor(interp, obj, 1, \"bar\", ocmd);",
          "52:     Jsi_ObjAccessor(interp, obj, 0, \"bar\", ocmd);",
          "",
          "[Added Lines]",
          "49:     Jsi_ObjAccessor(interp, obj, \"foo\", 1, ocmd, 0);",
          "50:     Jsi_ObjAccessor(interp, obj, \"foo\", 0, ocmd, 0);",
          "51:     Jsi_ObjAccessor(interp, obj, \"bar\", 1, ocmd, 0);",
          "52:     Jsi_ObjAccessor(interp, obj, \"bar\", 0, ocmd, 0);",
          "",
          "---------------"
        ],
        "c-demos/dynspec-test.jsi||c-demos/dynspec-test.jsi": [
          "File: c-demos/dynspec-test.jsi -> c-demos/dynspec-test.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: =!EXPECTSTART!=",
          "36: require('dynspec') ==> 1",
          "38: keys=Object.keys(sobj) ==> [ \"mark\", \"rowid\", \"myTime\", \"id\", \"desc\", \"isdirty\", \"name\", \"max\", \"markSet\" ]",
          "39: Info.obj(sobj) ==> { freeze:true, freezeModify:true, freezeReadCheck:true, getters:[ \"mark\", \"rowid\", \"myTime\", \"id\", \"desc\", \"isdirty\", \"name\", \"max\", \"markSet\" ], objType:\"object\", setters:[ \"mark\", \"rowid\", \"myTime\", \"id\", \"desc\", \"isdirty\", \"name\", \"max\", \"markSet\" ], spec:[ { cName:\"Jsi_Strbuf\", help:\"Fixed size char buf\", initOnly:false, name:\"name\", noCase:false, readOnly:false, required:false, size:16, type:\"STRBUF\" }, { cName:\"Jsi_DString\", help:\"Description field of arbitrary length\", initOnly:false, name:\"desc\", noCase:false, readOnly:false, required:false, size:224, type:\"DSTRING\" }, { cName:\"int\", help:\"Int id\", initOnly:false, name:\"id\", noCase:false, readOnly:false, required:false, size:4, type:\"INT\" }, { cName:\"double\", help:\"Max value\", initOnly:false, name:\"max\", noCase:false, readOnly:false, required:false, size:8, type:\"DOUBLE\" }, { cName:\"time_d\", help:\"milliseconds since 1970\", initOnly:false, name:\"myTime\", noCase:false, readOnly:false, required:false, size:8, type:\"TIME_D\" }, { cName:\"\", customArg:{ enumList:[ \"\", \"A\", \"B\", \"C\", \"D\", \"F\" ], help:\"one value from list\", name:\"enum\" }, customArgHelp:\"\", data:[ \"\", \"A\", \"B\", \"C\", \"D\", \"F\" ], help:\"Marks\", initOnly:false, name:\"mark\", noCase:false, readOnly:false, required:false, size:4, type:\"CUSTOM\" }, { cName:\"\", customArg:{ bitSet:[ \"\", \"A\", \"B\", \"C\", \"D\", \"F\" ], help:\"An int field accessed a bit at a time\", name:\"bitset\" }, customArgHelp:\"\", data:[ \"\", \"A\", \"B\", \"C\", \"D\", \"F\" ], help:\"A bit set of marks\", initOnly:false, name:\"markSet\", noCase:false, readOnly:false, required:false, size:4, type:\"CUSTOM\" }, { cName:\"int64_t\", flags:1024, help:\"DB rowid for update/insert; not stored in db\", initOnly:false, name:\"rowid\", noCase:false, readOnly:false, required:false, size:8, type:\"INT64\" }, { cName:\"bool\", flags:256, help:\"Dirty bit flag: not stored in db\", initOnly:false, name:\"isdirty\", noCase:false, readOnly:false, required:false, size:1, type:\"BOOL\" } ] }",
          "40: sobj.id = 3 ==> 3",
          "",
          "[Removed Lines]",
          "37: sobj ==> {}",
          "",
          "[Added Lines]",
          "37: sobj ==> { mark:\"\", rowid:0, myTime:\"1969-12-31T16:00:00\", id:0, desc:\"\", isdirty:false, name:\"\", max:0, markSet:[] }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "53: v = {} ==> {}",
          "54: v[i]=sobj[i] ==> B",
          "55: v[i]=sobj[i] ==> 4",
          "57: v[i]=sobj[i] ==> 4",
          "58: v[i]=sobj[i] ==> My desc",
          "59: v[i]=sobj[i] ==> true",
          "60: v[i]=sobj[i] ==> Someone",
          "61: v[i]=sobj[i] ==> 2",
          "62: v[i]=sobj[i] ==> [ \"B\", \"C\", \"D\" ]",
          "65: =!EXPECTEND!=",
          "",
          "[Removed Lines]",
          "56: v[i]=sobj[i] ==> 2020-09-23T11:51:37",
          "63: v ==> { desc:\"My desc\", id:4, isdirty:true, mark:\"B\", markSet:[ \"B\", \"C\", \"D\" ], max:2, myTime:\"2020-09-23T11:51:37\", name:\"Someone\", rowid:4 }",
          "64: Object.assign(sobj,{isdirty:false, rowid:3}) ==> {}",
          "",
          "[Added Lines]",
          "56: v[i]=sobj[i] ==> 2020-09-24T09:29:56",
          "63: v ==> { desc:\"My desc\", id:4, isdirty:true, mark:\"B\", markSet:[ \"B\", \"C\", \"D\" ], max:2, myTime:\"2020-09-24T09:29:56\", name:\"Someone\", rowid:4 }",
          "64: Object.assign(sobj,{isdirty:false, rowid:3}) ==> { mark:\"B\", rowid:3, myTime:\"2020-09-24T09:29:56\", id:4, desc:\"\", isdirty:false, name:\"Someone\", max:2, markSet:[ \"B\", \"C\", \"D\" ] }",
          "65: sobj.isdirty ==> false",
          "66: Object.values(sobj) ==> [ \"B\", 3, \"2020-09-24T09:29:56\", 4, \"\", false, \"Someone\", 2, [ \"B\", \"C\", \"D\" ] ]",
          "67: arr[0].id = 32 ==> 32",
          "68: arr[0] ==> { mark:\"\", rowid:0, myTime:\"1969-12-31T16:00:00\", id:32, desc:\"\", isdirty:false, name:\"\", max:0, markSet:[] }",
          "69: sobj.id ==> 4",
          "70: sobj.id = arr[0].id ==> 32",
          "71: sobj.id ==> 32",
          "",
          "---------------"
        ],
        "c-demos/dynspec.c||c-demos/dynspec.c": [
          "File: c-demos/dynspec.c -> c-demos/dynspec.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: } MyData;",
          "23:     JSI_OPT(STRBUF,     MyData, name,   .help=\"Fixed size char buf\" ),",
          "24:     JSI_OPT(DSTRING,    MyData, desc,   .help=\"Description field of arbitrary length\"),",
          "25:     JSI_OPT(INT,        MyData, id,     .help=\"Int id\" ),",
          "",
          "[Removed Lines]",
          "22: static Jsi_StructSpec MyOptions[] = {",
          "",
          "[Added Lines]",
          "22: static Jsi_OptionSpec MyOptions[] = {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "38: bool filterproc(Jsi_AccessorSpec *ap, const char *key, Jsi_Value *val) {",
          "39:     if (!key)",
          "41:     else",
          "42:        calls++;",
          "43:     return 0;",
          "44: }",
          "46: Jsi_RC Jsi_Initdynspec(Jsi_Interp *interp, int release) {",
          "49:     if (release) {",
          "50:         return JSI_OK;",
          "",
          "[Removed Lines]",
          "40:         printf(\"Accessor released after %d calls: sets=%d/gets=%d \\n\", calls, ap->setCnt, ap->getCnt);",
          "47:     static MyData mydata;",
          "",
          "[Added Lines]",
          "40:         printf(\"Accessor for \\\"%s\\\" released after %d calls: sets=%d/gets=%d \\n\", ap->objName, calls, ap->setCnt, ap->getCnt);",
          "47:     static MyData mydata  = {};",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "52:     Jsi_LogDebug(\"LOADED DYNSPEC\");",
          "53:     Jsi_PkgProvide(interp, \"dynspec\", 1, Jsi_Initdynspec);",
          "56:     if (!ap)",
          "57:         return JSI_ERROR;",
          "58:     ap->filterProc = filterproc;",
          "60:     return JSI_OK;",
          "",
          "[Removed Lines]",
          "55:     Jsi_AccessorSpec *ap = Jsi_ObjAccessorWithSpec(interp, \"sobj\", MyOptions, (uchar*)&mydata, NULL, 0);",
          "",
          "[Added Lines]",
          "55:     Jsi_AccessorSpec *ap  = Jsi_ObjAccessorWithSpec(interp, \"sobj\",  MyOptions, (uchar*)&mydata,  NULL, 0);",
          "",
          "---------------"
        ],
        "c-demos/dynspecn-test.jsi||c-demos/dynspecn-test.jsi": [
          "File: c-demos/dynspecn-test.jsi -> c-demos/dynspecn-test.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #!/usr/bin/env jsish",
          "3: ;require('dynspecn');",
          "5: var keys, s, v;",
          "6: ;sobj;",
          "7: ;arr;",
          "8: ;arr[0];",
          "9: ;arr[0].id = 32;",
          "10: ;arr[0];",
          "11: ;sobj.id;",
          "12: ;sobj.id = arr[0].id;",
          "13: ;sobj.id;",
          "14: ;dobj.n;",
          "15: ;darr[0];",
          "18: =!EXPECTSTART!=",
          "19: require('dynspecn') ==> 1",
          "20: sobj ==> { mark:\"\", rowid:0, myTime:\"1969-12-31T16:00:00\", id:0, desc:\"\", isdirty:false, name:\"\", max:0, markSet:[] }",
          "21: arr ==> [ { mark:\"\", rowid:0, myTime:\"1969-12-31T16:00:00\", id:0, desc:\"\", isdirty:false, name:\"\", max:0, markSet:[] }, { mark:\"\", rowid:0, myTime:\"1969-12-31T16:00:00\", id:0, desc:\"\", isdirty:false, name:\"\", max:0, markSet:[] } ]",
          "22: arr[0] ==> { mark:\"\", rowid:0, myTime:\"1969-12-31T16:00:00\", id:0, desc:\"\", isdirty:false, name:\"\", max:0, markSet:[] }",
          "23: arr[0].id = 32 ==> 32",
          "24: arr[0] ==> { mark:\"\", rowid:0, myTime:\"1969-12-31T16:00:00\", id:32, desc:\"\", isdirty:false, name:\"\", max:0, markSet:[] }",
          "25: sobj.id ==> 0",
          "26: sobj.id = arr[0].id ==> 32",
          "27: sobj.id ==> 32",
          "28: dobj.n ==> { mark:\"\", rowid:0, myTime:\"1969-12-31T16:00:00\", id:0, desc:\"\", isdirty:false, name:\"\", max:0, markSet:[] }",
          "29: darr[0] ==> { mark:\"\", rowid:0, myTime:\"1969-12-31T16:00:00\", id:0, desc:\"\", isdirty:false, name:\"\", max:0, markSet:[] }",
          "30: =!EXPECTEND!=",
          "",
          "---------------"
        ],
        "c-demos/dynspecn.c||c-demos/dynspecn.c": [
          "File: c-demos/dynspecn.c -> c-demos/dynspecn.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #include \"jsi.h\"",
          "5: static const char *markStrs[] = {\"\",\"A\",\"B\",\"C\",\"D\",\"F\", NULL};",
          "6: typedef enum { MARK_NONE, MARK_A, MARK_B, MARK_C, MARK_D, MARK_F } MarkType;",
          "9: typedef struct {",
          "10:     char name[16];",
          "11:     Jsi_Number max;",
          "12:     int id;",
          "13:     MarkType mark;",
          "14:     int markSet;",
          "15:     Jsi_Number myTime;",
          "16:     Jsi_DString desc;",
          "17:     Jsi_Wide rowid;",
          "18:     bool isdirty;",
          "19: } MyData;",
          "22: static Jsi_OptionSpec MyOptions[] = {",
          "23:     JSI_OPT(STRBUF,     MyData, name,   .help=\"Fixed size char buf\" ),",
          "24:     JSI_OPT(DSTRING,    MyData, desc,   .help=\"Description field of arbitrary length\"),",
          "25:     JSI_OPT(INT,        MyData, id,     .help=\"Int id\" ),",
          "26:     JSI_OPT(DOUBLE,     MyData, max,    .help=\"Max value\"),",
          "27:     JSI_OPT(TIME_D,     MyData, myTime, .help=\"milliseconds since 1970\" ),",
          "28:     JSI_OPT(CUSTOM,     MyData, mark,   .help=\"Marks\", .flags=0, .custom=Jsi_Opt_SwitchEnum,   .data=markStrs ),",
          "29:     JSI_OPT(CUSTOM,     MyData, markSet,.help=\"A bit set of marks\", .flags=0, .custom=Jsi_Opt_SwitchBitset, .data=markStrs ),",
          "30:     JSI_OPT(INT64,      MyData, rowid,  .help=\"DB rowid for update/insert; not stored in db\", .flags=JSI_OPT_DB_ROWID),",
          "31:     JSI_OPT(BOOL,       MyData, isdirty,.help=\"Dirty bit flag: not stored in db\", .flags=JSI_OPT_DB_DIRTY),",
          "32:     JSI_OPT_END(        MyData)",
          "33: };",
          "35: Jsi_InitProc Jsi_Initdynspecn;",
          "36: static int calls = 0;",
          "38: bool filterproc(Jsi_AccessorSpec *ap, const char *key, Jsi_Value *val) {",
          "39:     if (!key)",
          "40:         printf(\"Accessor for \\\"%s\\\" released after %d calls: sets=%d/gets=%d \\n\", ap->objName, calls, ap->setCnt, ap->getCnt);",
          "41:     else",
          "42:        calls++;",
          "43:     return 0;",
          "44: }",
          "46: Jsi_RC Jsi_Initdynspecn(Jsi_Interp *interp, int release) {",
          "47:     static MyData mydata  = {}, mydata2[4] = {};",
          "49:     if (release) {",
          "50:         return JSI_OK;",
          "51:     }",
          "52:     Jsi_LogDebug(\"LOADED DYNSPECN\");",
          "53:     Jsi_PkgProvide(interp, \"dynspecn\", 1, Jsi_Initdynspecn);",
          "55:     Jsi_AccessorSpec",
          "57:     if (!ap)",
          "58:         return JSI_ERROR;",
          "61:     if (JSI_OK != Jsi_NewVariable(interp, \"arr\", Jsi_ValueNewArray(interp, NULL, 0), 0) ||",
          "62:         !Jsi_ObjAccessorWithSpec(interp, \"arr[0]\", MyOptions, (uchar*)&mydata2[0], NULL, 0) ||",
          "63:         !Jsi_ObjAccessorWithSpec(interp, \"arr[1]\", MyOptions, (uchar*)&mydata2[1], NULL, 0))",
          "64:         return JSI_ERROR;",
          "68:     if (JSI_OK != Jsi_EvalString(interp, \"var darr = [{}]; var dobj = {n:{}};\", 0))",
          "69:         return JSI_ERROR;",
          "70:     if (!Jsi_ObjAccessorWithSpec(interp, \"darr[0]\", MyOptions, (uchar*)&mydata2[2], NULL, 0)",
          "71:         || !Jsi_ObjAccessorWithSpec(interp, \"dobj.n\", MyOptions, (uchar*)&mydata2[3], NULL, 0))",
          "72:         return JSI_ERROR;",
          "73:     ap->filterProc = filterproc;",
          "75:     return JSI_OK;",
          "76: }",
          "",
          "---------------"
        ],
        "jsish.c||jsish.c": [
          "File: jsish.c -> jsish.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: #ifndef SQLITE_VERSION",
          "23: #include \"sqlite/src/sqlite3.c\"",
          "24: #endif //SQLITE_VERSION",
          "25: #include \"lws/src/lwsSingle.c\"",
          "26: #include \"src/jsiCode.c\"",
          "27: #include \"src/jsiLexer.c\"",
          "28: #include \"src/jsiFunc.c\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25: #ifdef __cplusplus",
          "26: #include \"lws/src/src/lws.h\"",
          "27: #else // __cplusplus",
          "29: #endif //__cplusplus",
          "",
          "---------------"
        ],
        "src/jsi.h||src/jsi.h": [
          "File: src/jsi.h -> src/jsi.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #define JSI_VERSION_MAJOR   3",
          "6: #define JSI_VERSION_MINOR   1",
          "9: #define JSI_VERSION (JSI_VERSION_MAJOR + ((Jsi_Number)JSI_VERSION_MINOR/100.0) + ((Jsi_Number)JSI_VERSION_RELEASE/10000.0))",
          "",
          "[Removed Lines]",
          "7: #define JSI_VERSION_RELEASE 7",
          "",
          "[Added Lines]",
          "7: #define JSI_VERSION_RELEASE 8",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "743:     Jsi_Key_Type keyType; // Read-only",
          "744:     Jsi_Interp *interp;",
          "745:     Jsi_Wide flags;",
          "746:     void *user, *user2;",
          "747:     Jsi_MapFmtKeyProc *fmtKeyProc;",
          "748:     Jsi_RBCompareProc *compareTreeProc;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "748:     int refCnt;           // Shared map.",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1499:     const char *objName;",
          "1500:     Jsi_Value *callback;",
          "1501:     void *dataPtr;",
          "1503:     Jsi_Value* varVal;",
          "1504:     Jsi_Obj *varObj;",
          "1505:     bool callAlloc;",
          "",
          "[Removed Lines]",
          "1502:     uint flags;",
          "",
          "[Added Lines]",
          "1505:     int flags;",
          "",
          "---------------"
        ],
        "src/jsiArray.c||src/jsiArray.c": [
          "File: src/jsiArray.c -> src/jsiArray.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "616:         vobjs[3] = _this;",
          "617:         vpargs = Jsi_ValueMakeObject(interp, NULL, Jsi_ObjNewArray(interp, vobjs, maa, 0));",
          "618:         Jsi_IncrRefCount(interp, vpargs);",
          "620:         Jsi_DecrRefCount(interp, vpargs);",
          "621:         if (rc != JSI_OK)",
          "622:             break;",
          "",
          "[Removed Lines]",
          "619:         rc = Jsi_FunctionInvoke(interp, func, vpargs, &nrPtr, NULL);",
          "",
          "[Added Lines]",
          "619:         rc = Jsi_FunctionInvoke(interp, func, vpargs, &nrPtr, _this);",
          "",
          "---------------"
        ],
        "src/jsiCmds.c||src/jsiCmds.c": [
          "File: src/jsiCmds.c -> src/jsiCmds.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "67: typedef struct {",
          "68:     bool trace;",
          "69:     bool once;",
          "70:     bool isMain;",
          "71:     bool noError;",
          "72:     bool noEval;",
          "73:     bool autoIndex;",
          "75:     bool global;",
          "76:     bool exists;",
          "77:     uint level;",
          "",
          "[Removed Lines]",
          "74:     bool import;",
          "",
          "[Added Lines]",
          "70:     bool import;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "525:             return Jsi_LogError(\"arg1: expected number 'code'\");",
          "526:     }",
          "527:     if (interp->onExit && interp->parent) {",
          "529:         if (Jsi_InterpGone(interp))",
          "530:             return JSI_ERROR;",
          "531:         if (b)",
          "",
          "[Removed Lines]",
          "528:         bool b = Jsi_FunctionInvokeBool(interp->parent, interp->onExit, v);",
          "",
          "[Added Lines]",
          "528:         bool b = Jsi_FunctionInvokeBool(interp->parent, interp->onExit, v, _this);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1851:         }",
          "1852:         Jsi_Value *vpargs = Jsi_ValueMakeObject(interp, NULL, Jsi_ObjNewArray(interp, NULL, 0, 0));",
          "1853:         Jsi_IncrRefCount(interp, vpargs);",
          "1855:         Jsi_DecrRefCount(interp, vpargs);",
          "1856:         if (rc != JSI_OK)",
          "1857:             return JSI_OK;",
          "",
          "[Removed Lines]",
          "1854:         rc = Jsi_FunctionInvoke(interp, v, vpargs, ret, NULL);",
          "",
          "[Added Lines]",
          "1854:         rc = Jsi_FunctionInvoke(interp, v, vpargs, ret, _this);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "4099:     gettimeofday(&tv, NULL);",
          "4100:     start = (Jsi_Wide) tv.tv_sec * 1000000 + tv.tv_usec;",
          "4101:     for (i=0; i<n && rc == JSI_OK; i++) {",
          "4103:     }",
          "4104:     gettimeofday(&tv, NULL);",
          "4105:     end = (Jsi_Wide) tv.tv_sec * 1000000 + tv.tv_usec;",
          "",
          "[Removed Lines]",
          "4102:         rc = Jsi_FunctionInvoke(interp, func, NULL, ret, NULL);",
          "",
          "[Added Lines]",
          "4102:         rc = Jsi_FunctionInvoke(interp, func, NULL, ret, _this);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "4635:     ofunc = interp->framePtr->funcName;",
          "4636:     interp->framePtr->arguments = vpargs;",
          "4637:     interp->framePtr->funcName = \"moduleRun\";",
          "4639:     interp->framePtr->arguments = oargs;",
          "4640:     interp->framePtr->funcName = ofunc;",
          "4641:     Jsi_DecrRefCount(interp, cmd);",
          "",
          "[Removed Lines]",
          "4638:     rc = Jsi_FunctionInvoke(interp, cmd, vpargs, ret, NULL);",
          "",
          "[Added Lines]",
          "4638:     rc = Jsi_FunctionInvoke(interp, cmd, vpargs, ret, _this);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "4709:         if (v==NULL) continue;",
          "4710:         const char *key = (char*)Jsi_TreeKeyGet(tPtr);",
          "4711:         if (!Jsi_ValueObjLookup(interp, v1, key, 1))",
          "4713:     }",
          "4714:     if (v2)",
          "4715:         Jsi_TreeSearchDone(&search);",
          "",
          "[Removed Lines]",
          "4712:             Jsi_ObjInsert(interp, v1->d.obj, key, v, 0);",
          "",
          "[Added Lines]",
          "4712:             Jsi_ValueInsert(interp, v1, key, v, 0);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "4840:                     }",
          "4841:             }",
          "4842:             if (rc == JSI_OK)",
          "4844:         }",
          "4845:         Jsi_TreeSearchDone(&search);",
          "4846:     }",
          "",
          "[Removed Lines]",
          "4843:                 Jsi_ObjInsert(interp, v1->d.obj, key, val, 0);",
          "",
          "[Added Lines]",
          "4843:                 Jsi_ValueInsert(interp, v1, key, val, 0);",
          "",
          "---------------"
        ],
        "src/jsiEval.c||src/jsiEval.c": [
          "File: src/jsiEval.c -> src/jsiEval.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "674:                 (ret?\"null\":Jsi_JSONQuote(interp, Jsi_DSValue(&aStr),-1, &jStr)),",
          "675:                 (ret?Jsi_JSONQuote(interp, Jsi_DSValue(&dStr),-1, &lStr):\"null\"),",
          "676:                  fname, ip->Line, ip->Lofs);",
          "678:                 Jsi_DSPrintf(&pStr, \"failed trace call\\n\");",
          "679:             Jsi_DSFree(&jStr);",
          "680:             Jsi_DSFree(&kStr);",
          "",
          "[Removed Lines]",
          "677:             if (Jsi_FunctionInvokeJSON(interp->parent, interp->debugOpts.traceCallback, Jsi_DSValue(&kStr), NULL) != JSI_OK)",
          "",
          "[Added Lines]",
          "677:             if (Jsi_FunctionInvokeJSON(interp->parent, interp->debugOpts.traceCallback, Jsi_DSValue(&kStr), NULL, NULL) != JSI_OK)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "860:             else {",
          "862:                 Jsi_Value *cscope = scope->chains_cnt > 0 ? scope->chains[0]:currentScope;",
          "864:                 if (rc != JSI_OK)",
          "865:                     return rc;",
          "",
          "[Removed Lines]",
          "863:                 Jsi_RC rc = Jsi_ObjInsert(interp, cscope->d.obj, varname, v=Jsi_ValueNew(interp), JSI_OM_DONTENUM);",
          "",
          "[Added Lines]",
          "863:                 Jsi_RC rc = Jsi_ValueInsert(interp, cscope, varname, v=Jsi_ValueNew(interp), JSI_OM_DONTENUM);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1074: #endif",
          "1075:     Jsi_Value *v = Jsi_ValueDup(interp, value);",
          "1078:         Jsi_DecrRefCount(interp, v);",
          "1079:         return JSI_ERROR;",
          "1080:     }",
          "",
          "[Removed Lines]",
          "1077:     if (Jsi_ObjInsert(interp, target->d.obj, kstr, v, flag) != JSI_OK) {",
          "",
          "[Added Lines]",
          "1077:     if (Jsi_ValueInsert(interp, target, kstr, v, flag) != JSI_OK) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1159:                 Jsi_DString nStr;",
          "1160:                 Jsi_DSInit(&nStr);",
          "1161:                 Jsi_DSPrintf(&nStr, \"[\\\"#Interp_%d\\\", %d]\", interp->objId, interp->opCnt);//TODO: use actual time interval rather than opCnt.",
          "1163:                     rc = JSI_ERROR;",
          "1164:                 Jsi_DSFree(&nStr);",
          "1165:             }",
          "",
          "[Removed Lines]",
          "1162:                 if (Jsi_FunctionInvokeJSON(interp->parent, interp->busyCallback, Jsi_DSValue(&nStr), NULL) != JSI_OK)",
          "",
          "[Added Lines]",
          "1162:                 if (Jsi_FunctionInvokeJSON(interp->parent, interp->busyCallback, Jsi_DSValue(&nStr), NULL, NULL) != JSI_OK)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1357:                 break;",
          "1358:             }",
          "1359:             case OP_LOCAL: {",
          "1361:                 context_id = ps->_context_id++;",
          "1362:                 break;",
          "1363:             }",
          "",
          "[Removed Lines]",
          "1360:                 rc = Jsi_ObjInsert(interp, currentScope->d.obj, (char*)ip->data, Jsi_ValueNew(interp), 0);",
          "",
          "[Added Lines]",
          "1360:                 rc = Jsi_ValueInsert(interp, currentScope, (char*)ip->data, Jsi_ValueNew(interp), 0);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1691:                 }",
          "1692:                 if (hPtrGet) {",
          "1695:                     hPtrGet = NULL;",
          "1696:                 }",
          "1697:                 break;",
          "",
          "[Removed Lines]",
          "1694:                     jsi_SetterCall(interp, hPtrGet, v, 0);",
          "",
          "[Added Lines]",
          "1694:                     jsi_SetterCall(interp, hPtrGet, v, _jsi_TOQ, 0);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2225:                 Jsi_DString kStr={};",
          "2226:                 Jsi_Value *vrc = Jsi_ValueNew1(pinterp);",
          "2227:                 Jsi_DSPrintf(&kStr, \"[\\\"%s\\\", %d ]\", ucp, lineNo);",
          "2229:                 if (rcs == JSI_OK) {",
          "2230:                     const char *cps = Jsi_ValueString(pinterp, vrc, NULL);",
          "2231:                     if (!cps)",
          "",
          "[Removed Lines]",
          "2228:                 Jsi_RC rcs = Jsi_FunctionInvokeJSON(pinterp, interp->debugOpts.testFmtCallback, Jsi_DSValue(&kStr), &vrc);",
          "",
          "[Added Lines]",
          "2228:                 Jsi_RC rcs = Jsi_FunctionInvokeJSON(pinterp, interp->debugOpts.testFmtCallback, Jsi_DSValue(&kStr), &vrc, NULL);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2259:         buf[ilen-2] = 0; // Remove last char and newline.",
          "2260:         Jsi_Value *inStr = Jsi_ValueNewStringDup(interp, buf+1);",
          "2261:         Jsi_IncrRefCount(interp, inStr);",
          "2263:         if (Jsi_InterpGone(interp))",
          "2264:             return JSI_ERROR;",
          "2265:         if (rc != JSI_OK) {",
          "",
          "[Removed Lines]",
          "2262:         Jsi_RC rc = Jsi_FunctionInvokeString(interp, interp->jsppCallback, inStr, &dStr);",
          "",
          "[Added Lines]",
          "2262:         Jsi_RC rc = Jsi_FunctionInvokeString(interp, interp->jsppCallback, inStr, &dStr, NULL);",
          "",
          "---------------"
        ],
        "src/jsiFileCmds.c||src/jsiFileCmds.c": [
          "File: src/jsiFileCmds.c -> src/jsiFileCmds.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "900: static Jsi_RC SubGlobsDirectory(Jsi_Interp *interp, Jsi_Obj* obj, Jsi_Value *reg,",
          "901:     const char *zPattern, const char* path, GlobData *opts, int deep,",
          "903: {",
          "904:     if (cnt>interp->maxIncDepth || !path)",
          "905:         return Jsi_LogError(\"runaway File.globs\");",
          "",
          "[Removed Lines]",
          "902:     int cnt)",
          "",
          "[Added Lines]",
          "902:     int cnt, Jsi_Value* _this)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1004:                     continue;",
          "1005:                 Jsi_DString sStr = {};",
          "1006:                 Jsi_DSAppend(&sStr, spath, \"/\", z, mid, NULL);",
          "1008:                 Jsi_DSFree(&sStr);",
          "1009:                 continue;",
          "1010:             }",
          "",
          "[Removed Lines]",
          "1007:                 rc = SubGlobsDirectory(interp, obj, NULL, NULL, Jsi_DSValue(&sStr), opts, deep, cnt+1);",
          "",
          "[Added Lines]",
          "1007:                 rc = SubGlobsDirectory(interp, obj, NULL, NULL, Jsi_DSValue(&sStr), opts, deep, cnt+1, _this);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1016:                 Jsi_DSAppend(&sStr, spath, (spath[0]?\"/\":\"\"),  z, NULL);",
          "1017:                 if (opts->dirFilter && Jsi_ValueIsFunction(interp, opts->dirFilter)) {",
          "1018:                     bres=Jsi_FunctionInvokeBool(interp, opts->dirFilter,",
          "1020:                     if (Jsi_InterpGone(interp)) {",
          "1021:                         rc = JSI_ERROR;",
          "1022:                         goto done;",
          "",
          "[Removed Lines]",
          "1019:                         Jsi_ValueNewStringDup(interp, Jsi_DSValue(&sStr)));",
          "",
          "[Added Lines]",
          "1019:                         Jsi_ValueNewStringDup(interp, Jsi_DSValue(&sStr)), _this);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1029:                 if (opts->types && Jsi_Strchr(opts->types, 'd'))",
          "1030:                     goto dumpit;",
          "1031:                 zz = Jsi_DSValue(&sStr);",
          "1033:                 Jsi_DSFree(&sStr);",
          "1034:                 if (opts->limit>0 && opts->cnt >= opts->limit)",
          "1035:                     goto done;",
          "",
          "[Removed Lines]",
          "1032:                 rc = SubGlobsDirectory(interp, obj, reg, zPattern, zz, opts, deep+1, cnt+1);",
          "",
          "[Added Lines]",
          "1032:                 rc = SubGlobsDirectory(interp, obj, reg, zPattern, zz, opts, deep+1, cnt+1, _this);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1095:         if (opts->filter && Jsi_ValueIsFunction(interp, opts->filter)) {",
          "1096:             Jsi_Value *nval = Jsi_ValueNewStringDup(interp, z);",
          "1097:             Jsi_IncrRefCount(interp, nval);",
          "1099:             if (Jsi_InterpGone(interp)) {",
          "1100:                 rc = JSI_ERROR;",
          "1101:                 goto done;",
          "",
          "[Removed Lines]",
          "1098:             bres=Jsi_FunctionInvokeBool(interp, opts->filter, nval);",
          "",
          "[Added Lines]",
          "1098:             bres=Jsi_FunctionInvokeBool(interp, opts->filter, nval, _this);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1237:     if (pat == NULL || Jsi_ValueIsNull(interp, pat))",
          "1238:         dcp = \"*\";",
          "1239:     else if (Jsi_ValueIsObjType(interp, pat, JSI_OT_REGEXP))",
          "1241:     else {",
          "1242:         dcp = Jsi_ValueString(interp, pat, NULL);",
          "1243:         if (!dcp) {",
          "",
          "[Removed Lines]",
          "1240:         rc = SubGlobsDirectory(interp, obj, pat, NULL, dcp, &Data, 0, 0);",
          "",
          "[Added Lines]",
          "1240:         rc = SubGlobsDirectory(interp, obj, pat, NULL, dcp, &Data, 0, 0, _this);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1259:     } else",
          "1260:         dcp = Jsi_DSAppend(&dStr, dcp, NULL);",
          "1263:     if (rc != JSI_OK)",
          "1264:         Jsi_ValueMakeUndef(interp, ret);",
          "1265:     else if (Data.retCount)",
          "",
          "[Removed Lines]",
          "1262:     rc = SubGlobsDirectory(interp, obj, NULL, zPattern, dcp, &Data, 0, 0);",
          "",
          "[Added Lines]",
          "1262:     rc = SubGlobsDirectory(interp, obj, NULL, zPattern, dcp, &Data, 0, 0, _this);",
          "",
          "---------------"
        ],
        "src/jsiFilesys.c||src/jsiFilesys.c": [
          "File: src/jsiFilesys.c -> src/jsiFilesys.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1021:             Jsi_DString jStr={}, kStr={};",
          "1022:             Jsi_DSPrintf(&kStr, \"[%s, %d]\",",
          "1023:                 Jsi_JSONQuote(interp, str, size, &jStr), (chan->fp == stderr?1:0));",
          "1025:                 code = 1;",
          "1026:             Jsi_DSFree(&jStr);",
          "1027:             Jsi_DSFree(&kStr);",
          "",
          "[Removed Lines]",
          "1024:             if (Jsi_FunctionInvokeJSON(interp->parent, interp->debugOpts.putsCallback, Jsi_DSValue(&kStr), NULL) != JSI_OK)",
          "",
          "[Added Lines]",
          "1024:             if (Jsi_FunctionInvokeJSON(interp->parent, interp->debugOpts.putsCallback, Jsi_DSValue(&kStr), NULL, NULL) != JSI_OK)",
          "",
          "---------------"
        ],
        "src/jsiFunc.c||src/jsiFunc.c": [
          "File: src/jsiFunc.c -> src/jsiFunc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "623:         for (i = 0; i < who->localnames->count && rc == JSI_OK; ++i) {",
          "624:             const char *argkey = jsi_ScopeStrsGet(who->localnames, i);",
          "625:             if (argkey)",
          "627:         }",
          "628:     }",
          "629:     return rc;",
          "",
          "[Removed Lines]",
          "626:                 rc = Jsi_ObjInsert(interp, arguments->d.obj, argkey, Jsi_ValueNew(interp), 0);",
          "",
          "[Added Lines]",
          "626:                 rc = Jsi_ValueInsert(interp, arguments, argkey, Jsi_ValueNew(interp), 0);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "889: }",
          "893: {",
          "894:     if (interp->deleting)",
          "895:         return JSI_ERROR;",
          "",
          "[Removed Lines]",
          "892: int Jsi_FunctionInvokeBool(Jsi_Interp *interp, Jsi_Value *func, Jsi_Value *arg)",
          "",
          "[Added Lines]",
          "892: int Jsi_FunctionInvokeBool(Jsi_Interp *interp, Jsi_Value *func, Jsi_Value *arg, Jsi_Value* _this)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "906:         vpargs = Jsi_ValueMakeObject(interp, NULL, Jsi_ObjNewArray(interp, &arg, 1, 1));",
          "907:     }",
          "908:     Jsi_IncrRefCount(interp, vpargs);",
          "910:     Jsi_DecrRefCount(interp, vpargs);",
          "911:     if (rc == JSI_OK)",
          "912:         bres = Jsi_ValueIsTrue(interp, frPtr);",
          "",
          "[Removed Lines]",
          "909:     rc = Jsi_FunctionInvoke(interp, func, vpargs, &frPtr, NULL);",
          "",
          "[Added Lines]",
          "909:     rc = Jsi_FunctionInvoke(interp, func, vpargs, &frPtr, _this);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "921: }",
          "925: {",
          "926:     if (interp->deleting)",
          "927:         return JSI_ERROR;",
          "",
          "[Removed Lines]",
          "924: Jsi_RC Jsi_FunctionInvokeString(Jsi_Interp *interp, Jsi_Value *func, Jsi_Value *arg, Jsi_DString *dStr)",
          "",
          "[Added Lines]",
          "924: Jsi_RC Jsi_FunctionInvokeString(Jsi_Interp *interp, Jsi_Value *func, Jsi_Value *arg, Jsi_DString *dStr, Jsi_Value* _this)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "937:         vpargs = Jsi_ValueMakeObject(interp, NULL, Jsi_ObjNewArray(interp, &arg, 1, 1));",
          "938:     }",
          "939:     Jsi_IncrRefCount(interp, vpargs);",
          "941:     Jsi_DecrRefCount(interp, vpargs);",
          "942:     if (rc != JSI_OK)",
          "943:         Jsi_LogError(\"function call failed\");",
          "",
          "[Removed Lines]",
          "940:     rc = Jsi_FunctionInvoke(interp, func, vpargs, &frPtr, NULL);",
          "",
          "[Added Lines]",
          "940:     rc = Jsi_FunctionInvoke(interp, func, vpargs, &frPtr, _this);",
          "",
          "---------------"
        ],
        "src/jsiHash.c||src/jsiHash.c": [
          "File: src/jsiHash.c -> src/jsiHash.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "407:     tablePtr->opts.mapType = (Jsi_Map_Type)JSI_MAP_HASH;",
          "408:     tablePtr->typ = JSI_MAP_HASH;",
          "409:     tablePtr->opts.interp = interp;",
          "410:     tablePtr->buckets = tablePtr->staticBuckets;",
          "411: #if !(JSI_SMALL_HASH_TABLE && !(JSI_SMALL_HASH_TABLE & (JSI_SMALL_HASH_TABLE - 1)))",
          "412: #error \"small hash must be a power of two\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "410:     tablePtr->opts.refCnt = 1;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "519: }",
          "523: Jsi_HashDelete(Jsi_Hash *tablePtr)",
          "524: {",
          "525:     Jsi_HashClear(tablePtr);",
          "526:     Jsi_Free(tablePtr);",
          "527: }",
          "529: Jsi_HashEntry *",
          "",
          "[Removed Lines]",
          "522: void",
          "",
          "[Added Lines]",
          "523: int",
          "526:     SIGASSERT(tablePtr, HASH);",
          "527:     if (--tablePtr->opts.refCnt>0) // Shared hash check.",
          "528:         return tablePtr->opts.refCnt;",
          "531:     return 0;",
          "",
          "---------------"
        ],
        "src/jsiInt.h||src/jsiInt.h": [
          "File: src/jsiInt.h -> src/jsiInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1506: extern char* jsi_RlGetLine(Jsi_Interp* interp, const char *prompt);",
          "1507: extern void jsi_DumpValue(Jsi_Interp *interp, Jsi_Value *arg);",
          "1508: extern Jsi_RC jsi_ObjSetFlag(Jsi_Interp *interp, Jsi_Obj *obj, int flag, int on);",
          "1512: #if !defined(_JSI_MEMCLEAR) && defined(JSI_MEM_DEBUG)",
          "",
          "[Removed Lines]",
          "1509: extern Jsi_RC jsi_SetterCall(Jsi_Interp *interp, Jsi_HashEntry *hPtr, Jsi_Value *val, int flags);",
          "1510: extern Jsi_RC jsi_GetterCall(Jsi_Interp *interp, Jsi_HashEntry *hPtr, Jsi_Value **vres, int flags);",
          "",
          "[Added Lines]",
          "1509: extern Jsi_RC jsi_SetterCall(Jsi_Interp *interp, Jsi_HashEntry *hPtr, Jsi_Value *val, Jsi_Value *_this, int flags);",
          "1510: extern Jsi_RC jsi_GetterCall(Jsi_Interp *interp, Jsi_HashEntry *hPtr, Jsi_Value **vres, Jsi_Value *_this, int flags);",
          "",
          "---------------"
        ],
        "src/jsiInterp.c||src/jsiInterp.c": [
          "File: src/jsiInterp.c -> src/jsiInterp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "194: }",
          "198: {",
          "199:     if (!Jsi_ValueIsFunction(interp, func))",
          "200:         return JSI_ERROR;",
          "201:     Jsi_Value *aPtr = Jsi_ValueNew1(interp);",
          "202:     Jsi_RC rc = Jsi_JSONParse(interp, json, &aPtr, 0);",
          "203:     if (rc == JSI_OK)",
          "205:     Jsi_DecrRefCount(interp, aPtr);",
          "206:     return rc;",
          "207: }",
          "",
          "[Removed Lines]",
          "197: Jsi_RC Jsi_FunctionInvokeJSON(Jsi_Interp *interp, Jsi_Value *func, const char *json, Jsi_Value **ret)",
          "204:         rc = Jsi_FunctionInvoke(interp, func, aPtr, ret, NULL);",
          "",
          "[Added Lines]",
          "197: Jsi_RC Jsi_FunctionInvokeJSON(Jsi_Interp *interp, Jsi_Value *func, const char *json, Jsi_Value **ret, Jsi_Value *_this)",
          "204:         rc = Jsi_FunctionInvoke(interp, func, aPtr, ret, _this);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "213: {",
          "214:     Jsi_Value *func = Jsi_NameLookup(interp, cmdstr);",
          "215:     if (func)",
          "217:     return Jsi_LogError(\"can not find cmd: %s\", cmdstr);",
          "218: }",
          "",
          "[Removed Lines]",
          "216:         return Jsi_FunctionInvokeJSON(interp, func, json, ret);",
          "",
          "[Added Lines]",
          "216:         return Jsi_FunctionInvokeJSON(interp, func, json, ret, NULL);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1043:     Jsi_RC rc = JSI_ERROR;",
          "1044:     if (interp->debugOpts.debugCallback) {",
          "1045:         Jsi_ValueReset(interp, &interp->retValue);",
          "1047:     }",
          "1048:     interp->isInCallback = 0;",
          "1049:     if (interp->parent->exited == 0 && rc != JSI_OK)",
          "",
          "[Removed Lines]",
          "1046:         rc = Jsi_FunctionInvokeJSON(interp->parent, interp->debugOpts.debugCallback, Jsi_DSValue(&dStr), &interp->retValue);",
          "",
          "[Added Lines]",
          "1046:         rc = Jsi_FunctionInvokeJSON(interp->parent, interp->debugOpts.debugCallback, Jsi_DSValue(&dStr), &interp->retValue, NULL);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2365:             jsi_AliasCreateCmd(interp, Jsi_DSValue(&se->func), (AliasCmd*)se->acdata);",
          "2366:         }",
          "2367:         else if (se->acfunc) {",
          "2369:                 rc = JSI_ERROR;",
          "2370:             Jsi_DecrRefCount(interp, se->acfunc);",
          "2371:         }",
          "",
          "[Removed Lines]",
          "2368:             if (JSI_OK != Jsi_FunctionInvokeJSON(interp, se->acfunc, Jsi_DSValue(&se->data), NULL))",
          "",
          "[Added Lines]",
          "2368:             if (JSI_OK != Jsi_FunctionInvokeJSON(interp, se->acfunc, Jsi_DSValue(&se->data), NULL, NULL))",
          "",
          "---------------"
        ],
        "src/jsiMySql.c||src/jsiMySql.c": [
          "File: src/jsiMySql.c -> src/jsiMySql.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1333:             Jsi_ObjInsert(interp, argso, apColName[i], nnv, 0);",
          "1334:         }",
          "1335:         Jsi_IncrRefCount(interp, varg1);",
          "1337:         if (Jsi_InterpGone(interp))",
          "1338:             return JSI_ERROR;",
          "1339:         Jsi_DecrRefCount(interp, varg1);",
          "",
          "[Removed Lines]",
          "1336:         bool rb = Jsi_FunctionInvokeBool(interp, p->tocall, varg1);",
          "",
          "[Added Lines]",
          "1336:         bool rb = Jsi_FunctionInvokeBool(interp, p->tocall, varg1, NULL);",
          "",
          "---------------"
        ],
        "src/jsiObj.c||src/jsiObj.c": [
          "File: src/jsiObj.c -> src/jsiObj.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: #include \"jsiInt.h\"",
          "4: #endif",
          "",
          "[Removed Lines]",
          "6: static void jsi_AccessorConfFree(Jsi_Interp* interp, Jsi_Obj* obj);",
          "",
          "[Added Lines]",
          "6: static void jsi_AccessorSpecFree(Jsi_Interp* interp, Jsi_Obj* obj);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "124:     return JSI_OK;",
          "125: }",
          "128: {",
          "129:     if (!Jsi_ValueIsObjType(interp, outVal, JSI_OT_ARRAY))",
          "130:         return Jsi_LogBug(\"outVal is not an array\");",
          "",
          "[Removed Lines]",
          "127: Jsi_RC Jsi_ObjGetValues(Jsi_Interp *interp, Jsi_Obj *obj, Jsi_Value *outVal)",
          "",
          "[Added Lines]",
          "127: Jsi_RC Jsi_ObjGetValues(Jsi_Interp *interp, Jsi_Obj *obj, Jsi_Value *outVal, Jsi_Value *_this)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "136:         for (hPtr = Jsi_HashSearchFirst(obj->getters, &search);",
          "137:             hPtr != NULL; hPtr = Jsi_HashSearchNext(&search)) {",
          "138:             Jsi_Value *val = Jsi_ValueNew(interp);",
          "140:             if (Jsi_ObjArrayAdd(interp, to, val) != JSI_OK || rc != JSI_OK)",
          "141:                 return JSI_ERROR;",
          "142:         }",
          "",
          "[Removed Lines]",
          "139:             Jsi_RC rc = jsi_GetterCall(interp, hPtr, &val, 0);",
          "",
          "[Added Lines]",
          "139:             Jsi_RC rc = jsi_GetterCall(interp, hPtr, &val, _this, 0);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "311:     if (obj->getters)",
          "312:         Jsi_HashDelete(obj->getters);",
          "313:     if (obj->accessorSpec)",
          "316:     switch (obj->ot) {",
          "317:         case JSI_OT_STRING:",
          "318:             if (!obj->isstrkey)",
          "",
          "[Removed Lines]",
          "314:         jsi_AccessorConfFree(interp, obj);",
          "",
          "[Added Lines]",
          "313:         jsi_AccessorSpecFree(interp, obj);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "515:     return JSI_OK;",
          "516: }",
          "519:     Jsi_Hash *h = NULL;",
          "520:     Jsi_HashEntry *hPtr;",
          "521:     if (obj->ot != JSI_OT_OBJECT) {",
          "",
          "[Removed Lines]",
          "518: Jsi_Hash* Jsi_ObjAccessor(Jsi_Interp *interp, Jsi_Obj *obj, bool isSet, const char *name, Jsi_Value* callback) {",
          "",
          "[Added Lines]",
          "516: Jsi_Hash* Jsi_ObjAccessor(Jsi_Interp *interp, Jsi_Obj *obj, const char *name, bool isSet, Jsi_Value* callback, int flags) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "545:         if (!hPtr)",
          "546:             Jsi_LogWarn(\"%s accessor not found for %s\", isSet?\"set\":\"get\", name);",
          "547:         else {",
          "549:             if (callback)",
          "550:                 Jsi_DecrRefCount(interp, callback);",
          "551:             Jsi_HashEntryDelete(hPtr);",
          "",
          "[Removed Lines]",
          "548:             callback = Jsi_HashValueGet(hPtr);",
          "",
          "[Added Lines]",
          "546:             callback = (Jsi_Value*)Jsi_HashValueGet(hPtr);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "554:     return h;",
          "555: }",
          "558:     Jsi_AccessorSpec *adv = obj->accessorSpec;",
          "559:     if (!adv) return;",
          "560:     if (adv->filterProc)",
          "561:         (*adv->filterProc)(adv, NULL, NULL);",
          "562:     if (adv->callAlloc)",
          "563:         Jsi_DecrRefCount(interp, adv->callback);",
          "564:     Jsi_Free(adv);",
          "565: }",
          "",
          "[Removed Lines]",
          "557: static void jsi_AccessorConfFree(Jsi_Interp* interp, Jsi_Obj* obj) {",
          "",
          "[Added Lines]",
          "555: static void jsi_AccessorSpecFree(Jsi_Interp* interp, Jsi_Obj* obj) {",
          "562:     Jsi_OptionsFree(interp, adv->spec, adv->dataPtr, 0);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "599: Jsi_AccessorSpec* Jsi_ObjAccessorWithSpec(Jsi_Interp *interp, const char* objName, Jsi_OptionSpec *spec,",
          "601:     Jsi_AccessorSpec ad = {",
          "602:         .sig=JSI_SIG_ACCESSOR, .spec=spec, .objName=objName, .callback=callback, .dataPtr=dataPtr, .flags=flags",
          "603:     };",
          "604:     Jsi_OptionSpec *specPtr = spec;",
          "606:         Jsi_LogError(\"must give spec, objName and either callback or dataPtr\");",
          "607:         return NULL;",
          "608:     }",
          "",
          "[Removed Lines]",
          "600:     uchar *dataPtr, Jsi_Value* callback, uint flags) {",
          "605:     if (!objName || !spec || (!callback && !dataPtr)) {",
          "",
          "[Added Lines]",
          "599:     void *dataPtr, Jsi_Value* callback, int flags) {",
          "604:     if (!objName || !objName[0] || !spec || (!callback && !dataPtr)) {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "610:         Jsi_LogError(\"invalid options\");",
          "611:         return NULL;",
          "612:     }",
          "619:     ad.varVal = Jsi_NameLookup(interp, objName);",
          "620:     if (ad.varVal)",
          "621:         ad.varObj = Jsi_ValueGetObj(interp, ad.varVal);",
          "622:     if (!ad.varVal || !ad.varObj) {",
          "",
          "[Removed Lines]",
          "613:     Jsi_DString dStr = {};",
          "614:     int isVar = (!Jsi_Strchr(objName, '.') && !Jsi_Strchr(objName, '['));",
          "615:     const char *var = isVar?\"var \":\"\",",
          "617:     if (JSI_OK != Jsi_EvalString(interp, ev, 0))",
          "618:         return NULL;",
          "",
          "[Added Lines]",
          "613:     if (!ad.varVal) {",
          "614:         if (Jsi_StrIsAlnum(objName)) {",
          "615:             ad.varVal = Jsi_ValueNewObj(interp, NULL);",
          "616:             if (ad.varVal && Jsi_NewVariable(interp, objName, ad.varVal, 0) != JSI_OK) {",
          "617:                 Jsi_LogWarn(\"failed to setup new variable\");",
          "618:                 return NULL;",
          "619:             }",
          "620:         } else {",
          "622:             Jsi_DString dStr = {};",
          "623:             Jsi_RC rc = Jsi_EvalString(interp, Jsi_DSPrintf(&dStr, \"%s = {};\", objName), 0);",
          "624:             Jsi_DSFree(&dStr);",
          "625:             ad.varVal = Jsi_NameLookup(interp, objName);",
          "626:             if (JSI_OK != rc)",
          "627:                 return NULL;",
          "628:         }",
          "629:     }",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "632:         adp->callAlloc = 1;",
          "633:     }",
          "634:     while (specPtr->id>=JSI_OPTION_BOOL && specPtr->id < JSI_OPTION_END && specPtr->name) {",
          "639:         specPtr++;",
          "640:     }",
          "642:     return adp;",
          "643: }",
          "",
          "[Removed Lines]",
          "635:         Jsi_ObjAccessor(interp, ad.varObj, 0, specPtr->name, callback);",
          "636:         Jsi_ObjAccessor(interp, ad.varObj, 1, specPtr->name, callback);",
          "641:     ad.varObj->accessorSpec = adp;",
          "",
          "[Added Lines]",
          "645:         Jsi_ObjAccessor(interp, adp->varObj, specPtr->name, 0, callback, flags);",
          "646:         Jsi_ObjAccessor(interp, adp->varObj, specPtr->name, 1, callback, flags);",
          "651:     adp->varObj->accessorSpec = adp;",
          "",
          "---------------"
        ],
        "src/jsiProto.c||src/jsiProto.c": [
          "File: src/jsiProto.c -> src/jsiProto.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "161:             else {",
          "162:                 v = Jsi_ValueNew(interp);",
          "163:             }",
          "165:         }",
          "166:     }",
          "167:     return (nrc == JSI_ERROR?nrc:rc);",
          "",
          "[Removed Lines]",
          "164:             Jsi_ObjInsert(interp, args->d.obj, argkey, v, JSI_OM_DONTENUM | JSI_OM_INNERSHARED);",
          "",
          "[Added Lines]",
          "164:             Jsi_ValueInsert(interp, args, argkey, v, JSI_OM_DONTENUM | JSI_OM_INNERSHARED);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "426:     if (!Jsi_ValueIsObjType(interp, val, JSI_OT_OBJECT))",
          "427:         return Jsi_LogError(\"can not call values() with non-object\");",
          "428:     Jsi_ValueMakeArrayObject(interp, ret, NULL);",
          "430: }",
          "432: Jsi_RC jsi_ObjectToStringCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "",
          "[Removed Lines]",
          "429:     return Jsi_ObjGetValues(interp, Jsi_ValueGetObj(interp, val), *ret);",
          "",
          "[Added Lines]",
          "429:     return Jsi_ObjGetValues(interp, Jsi_ValueGetObj(interp, val), *ret, _this);",
          "",
          "---------------"
        ],
        "src/jsiSqlite.c||src/jsiSqlite.c": [
          "File: src/jsiSqlite.c -> src/jsiSqlite.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1940:             Jsi_ObjInsert(interp, argso, apColName[i], nnv, 0);",
          "1941:         }",
          "1942:         Jsi_IncrRefCount(interp, varg1);",
          "1944:         Jsi_DecrRefCount(interp, varg1);",
          "1945:         if (Jsi_InterpGone(interp))",
          "1946:             return JSI_ERROR;",
          "",
          "[Removed Lines]",
          "1943:         bool rb = Jsi_FunctionInvokeBool(interp, p->tocall, varg1);",
          "",
          "[Added Lines]",
          "1943:         bool rb = Jsi_FunctionInvokeBool(interp, p->tocall, varg1, NULL);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2550:   Jsi_DSAppend(dStr, \"'\", NULL);",
          "2551: }",
          "2564: #define FN_sqlexec JSI_INFO(\"\\",
          "2565: Return values in formatted as JSON, HTML, etc. , optionally calling function with a result object\")",
          "2566: static Jsi_RC SqliteQueryCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "",
          "[Removed Lines]",
          "2553: bool dbIsAlnumStr(const char *cp)",
          "2554: {",
          "2555:     if (!cp || !*cp) return 0;",
          "2556:     while (*cp)",
          "2557:         if (isalnum(*cp) || *cp == '_')",
          "2558:             cp++;",
          "2559:         else",
          "2560:             return 0;",
          "2561:     return 1;",
          "2562: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/jsiString.c||src/jsiString.c": [
          "File: src/jsiString.c -> src/jsiString.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "672:             else {",
          "673:                 Jsi_Value *inStr = Jsi_ValueNewStringDup(interp, source_str);",
          "674:                 Jsi_IncrRefCount(interp, inStr);",
          "676:                 if (Jsi_InterpGone(interp))",
          "677:                     return JSI_ERROR;",
          "678:                 if (rc != JSI_OK) {",
          "",
          "[Removed Lines]",
          "675:                 Jsi_RC rc = Jsi_FunctionInvokeString(interp, repVal, inStr, &dStr);",
          "",
          "[Added Lines]",
          "675:                 Jsi_RC rc = Jsi_FunctionInvokeString(interp, repVal, inStr, &dStr, _this);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "789:             Jsi_DSFree(&sStr);",
          "790:             Jsi_IncrRefCount(interp, inStr);",
          "791:             if (maxArgs==1) {",
          "793:                 if (Jsi_InterpGone(interp))",
          "794:                     return JSI_ERROR;",
          "795:                 if (rc != JSI_OK) {",
          "",
          "[Removed Lines]",
          "792:                 Jsi_RC rc = Jsi_FunctionInvokeString(interp, repVal, inStr, &dStr);",
          "",
          "[Added Lines]",
          "792:                 Jsi_RC rc = Jsi_FunctionInvokeString(interp, repVal, inStr, &dStr, _this);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "814:                 vpargs = Jsi_ValueMakeObject(interp, NULL, Jsi_ObjNewArray(interp, items, i, 0));",
          "815:                 Jsi_IncrRefCount(interp, vpargs);",
          "816:                 ret = Jsi_ValueNew1(interp);",
          "818:                 if (Jsi_InterpGone(interp))",
          "819:                     return JSI_ERROR;",
          "820:                 Jsi_DecrRefCount(interp, vpargs);",
          "",
          "[Removed Lines]",
          "817:                 rc = Jsi_FunctionInvoke(interp, repVal, vpargs, &ret, NULL);",
          "",
          "[Added Lines]",
          "817:                 rc = Jsi_FunctionInvoke(interp, repVal, vpargs, &ret, _this);",
          "",
          "---------------"
        ],
        "src/jsiStubs.h||src/jsiStubs.h": [
          "File: src/jsiStubs.h -> src/jsiStubs.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #endif",
          "10: #undef JSI_EXTENSION_INI",
          "11: #define JSI_EXTENSION_INI Jsi_Stubs *jsiStubsPtr = NULL;",
          "",
          "[Removed Lines]",
          "8: #define JSI_STUBS_MD5 \"8da7a9baf8c22efef48939d296defc64\"",
          "",
          "[Added Lines]",
          "8: #define JSI_STUBS_MD5 \"aff068ab3a03d873e96f46a828943e9b\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "90:     Jsi_RC(*_Jsi_FunctionArguments)(Jsi_Interp *interp, Jsi_Value *func, int *argcPtr);",
          "91:     Jsi_RC(*_Jsi_FunctionApply)(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this, Jsi_Value **ret);",
          "92:     Jsi_RC(*_Jsi_FunctionInvoke)(Jsi_Interp *interp, Jsi_Value *tocall, Jsi_Value *args, Jsi_Value **ret, Jsi_Value *_this);",
          "96:     Jsi_Value*(*_Jsi_VarLookup)(Jsi_Interp *interp, const char *varname);",
          "97:     Jsi_Value*(*_Jsi_NameLookup)(Jsi_Interp *interp, const char *varname);",
          "98:     Jsi_Value*(*_Jsi_NameLookup2)(Jsi_Interp *interp, const char *name, const char *inObj);",
          "",
          "[Removed Lines]",
          "93:     Jsi_RC(*_Jsi_FunctionInvokeJSON)(Jsi_Interp *interp, Jsi_Value *tocall, const char *json, Jsi_Value **ret);",
          "94:     int(*_Jsi_FunctionInvokeBool)(Jsi_Interp *interp, Jsi_Value *func, Jsi_Value *arg);",
          "95:     Jsi_RC(*_Jsi_FunctionInvokeString)(Jsi_Interp *interp, Jsi_Value *func, Jsi_Value *arg, Jsi_DString *dStr);",
          "",
          "[Added Lines]",
          "93:     Jsi_RC(*_Jsi_FunctionInvokeJSON)(Jsi_Interp *interp, Jsi_Value *tocall, const char *json, Jsi_Value **ret, Jsi_Value *_this);",
          "94:     int(*_Jsi_FunctionInvokeBool)(Jsi_Interp *interp, Jsi_Value *func, Jsi_Value *arg, Jsi_Value* _this);",
          "95:     Jsi_RC(*_Jsi_FunctionInvokeString)(Jsi_Interp *interp, Jsi_Value *func, Jsi_Value *arg, Jsi_DString *dStr, Jsi_Value* _this);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "278:     void(*_Jsi_NumberUtoA10)(Jsi_UWide, char* buf, int bsiz);",
          "279:     Jsi_Hash*(*_Jsi_HashNew)(Jsi_Interp *interp, uint keyType, Jsi_HashDeleteProc *freeProc);",
          "280:     Jsi_RC(*_Jsi_HashConf)(Jsi_Hash *hashPtr, Jsi_MapOpts *opts, bool set);",
          "282:     void(*_Jsi_HashClear)(Jsi_Hash *hashPtr);",
          "283:     Jsi_HashEntry*(*_Jsi_HashSet)(Jsi_Hash *hashPtr, const void *key, void *value);",
          "284:     void*(*_Jsi_HashGet)(Jsi_Hash *hashPtr, const void *key, int flags);",
          "",
          "[Removed Lines]",
          "281:     void(*_Jsi_HashDelete)(Jsi_Hash *hashPtr);",
          "",
          "[Added Lines]",
          "281:     int(*_Jsi_HashDelete)(Jsi_Hash *hashPtr);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "295:     uint(*_Jsi_HashSize)(Jsi_Hash *hashPtr);",
          "296:     Jsi_Tree*(*_Jsi_TreeNew)(Jsi_Interp *interp, uint keyType, Jsi_TreeDeleteProc *freeProc);",
          "297:     Jsi_RC(*_Jsi_TreeConf)(Jsi_Tree *treePtr, Jsi_MapOpts *opts, bool set);",
          "299:     void(*_Jsi_TreeClear)(Jsi_Tree *treePtr);",
          "300:     Jsi_TreeEntry*(*_Jsi_TreeObjSetValue)(Jsi_Obj* obj, const char *key, Jsi_Value *val, int isstrkey);",
          "301:     Jsi_Value*    (*_Jsi_TreeObjGetValue)(Jsi_Obj* obj, const char *key, int isstrkey);",
          "",
          "[Removed Lines]",
          "298:     void(*_Jsi_TreeDelete)(Jsi_Tree *treePtr);",
          "",
          "[Added Lines]",
          "298:     int(*_Jsi_TreeDelete)(Jsi_Tree *treePtr);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "317:     Jsi_RC(*_Jsi_TreeKeysDump)(Jsi_Interp *interp, Jsi_Tree *hashPtr, Jsi_Value **ret, int flags);",
          "318:     Jsi_List*(*_Jsi_ListNew)(Jsi_Interp *interp, Jsi_Wide flags, Jsi_HashDeleteProc *freeProc);",
          "319:     Jsi_RC(*_Jsi_ListConf)(Jsi_List *list, Jsi_MapOpts *opts, bool set);",
          "321:     void(*_Jsi_ListClear)(Jsi_List *list);",
          "322:     void*(*_Jsi_ListValueGet)(Jsi_ListEntry *list);",
          "323:     void(*_Jsi_ListValueSet)(Jsi_ListEntry *list, const void *value);",
          "",
          "[Removed Lines]",
          "320:     void(*_Jsi_ListDelete)(Jsi_List *list);",
          "",
          "[Added Lines]",
          "320:     int(*_Jsi_ListDelete)(Jsi_List *list);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "339:     void(*_Jsi_StackFreeElements)(Jsi_Interp *interp, Jsi_Stack *stack, Jsi_DeleteProc *freeFunc);",
          "340:     Jsi_Map*(*_Jsi_MapNew)(Jsi_Interp *interp, Jsi_Map_Type mapType, Jsi_Key_Type keyType, Jsi_MapDeleteProc *freeProc);",
          "341:     Jsi_RC(*_Jsi_MapConf)(Jsi_Map *mapPtr, Jsi_MapOpts *opts, bool set);",
          "343:     void(*_Jsi_MapClear)(Jsi_Map *mapPtr);",
          "344:     Jsi_MapEntry*(*_Jsi_MapSet)(Jsi_Map *mapPtr, const void *key, const void *value);",
          "345:     void*(*_Jsi_MapGet)(Jsi_Map *mapPtr, const void *key, int flags);",
          "",
          "[Removed Lines]",
          "342:     void(*_Jsi_MapDelete)(Jsi_Map *mapPtr);",
          "",
          "[Added Lines]",
          "342:     int(*_Jsi_MapDelete)(Jsi_Map *mapPtr);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "448:     Jsi_RC(*_Jsi_SqlObjBinds)(Jsi_Interp* interp, Jsi_DString* zStr, Jsi_SqlObjOpts*opts);",
          "449:     Jsi_RC(*_Jsi_UserObjName)(Jsi_Interp *interp, Jsi_Value *v, Jsi_DString *dStr);",
          "450:     Jsi_Value*(*_Jsi_ValueNewRegExp)(Jsi_Interp *interp, const char *regtxt, const char* modifiers);",
          "452:     Jsi_PkgOpts*(*_Jsi_CommandPkgOpts)(Jsi_Interp *interp, Jsi_Func *func);",
          "453:     Jsi_Interp*(*_Jsi_InterpMain)(int argc, char **argv, Jsi_InitProc* initProc);",
          "454:     Jsi_RC(*_Jsi_ObjFreeze)(Jsi_Interp *interp, Jsi_Obj *obj, bool freeze, bool modifyOk, bool readCheck);",
          "456:     Jsi_Value*(*_Jsi_ValueNewFunction)(Jsi_Interp *interp, Jsi_CmdProc *callback, const char *name, void *privData);",
          "458:     Jsi_Func*(*_Jsi_FunctionFromValue)(Jsi_Interp *interp, Jsi_Value* value);",
          "460:     void *endPtr;",
          "461: } Jsi_Stubs;",
          "",
          "[Removed Lines]",
          "451:     Jsi_RC(*_Jsi_ObjGetValues)(Jsi_Interp *interp, Jsi_Obj *obj, Jsi_Value *outVal);",
          "455:     Jsi_Hash*(*_Jsi_ObjAccessor)(Jsi_Interp *interp, Jsi_Obj *obj, bool isSet, const char *name, Jsi_Value* callback);",
          "457:     Jsi_AccessorSpec*(*_Jsi_ObjAccessorWithSpec)(Jsi_Interp *interp, const char* objName, Jsi_OptionSpec *spec, uchar *dataPtr, Jsi_Value* callback, uint flags);",
          "459:     Jsi_RC (*_Jsi_NewVariable)(Jsi_Interp *interp, const char *name, Jsi_Value *val, uint flags);",
          "",
          "[Added Lines]",
          "451:     Jsi_RC(*_Jsi_ObjGetValues)(Jsi_Interp *interp, Jsi_Obj *obj, Jsi_Value *outVal, Jsi_Value *_this);",
          "455:     Jsi_Hash*(*_Jsi_ObjAccessor)(Jsi_Interp *interp, Jsi_Obj *obj, const char *name, bool isSet, Jsi_Value* callback, int flags);",
          "457:     Jsi_AccessorSpec*(*_Jsi_ObjAccessorWithSpec)(Jsi_Interp *interp, const char* objName, Jsi_OptionSpec *spec, void *dataPtr, Jsi_Value* callback, int flags);",
          "459:     Jsi_RC (*_Jsi_NewVariable)(Jsi_Interp *interp, const char *name, Jsi_Value *val, int flags);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "958: #define Jsi_FunctionArguments(n0,n1,n2) JSISTUBCALL(jsiStubsPtr, _Jsi_FunctionArguments(n0,n1,n2))",
          "959: #define Jsi_FunctionApply(n0,n1,n2,n3) JSISTUBCALL(jsiStubsPtr, _Jsi_FunctionApply(n0,n1,n2,n3))",
          "960: #define Jsi_FunctionInvoke(n0,n1,n2,n3,n4) JSISTUBCALL(jsiStubsPtr, _Jsi_FunctionInvoke(n0,n1,n2,n3,n4))",
          "964: #define Jsi_VarLookup(n0,n1) JSISTUBCALL(jsiStubsPtr, _Jsi_VarLookup(n0,n1))",
          "965: #define Jsi_NameLookup(n0,n1) JSISTUBCALL(jsiStubsPtr, _Jsi_NameLookup(n0,n1))",
          "966: #define Jsi_NameLookup2(n0,n1,n2) JSISTUBCALL(jsiStubsPtr, _Jsi_NameLookup2(n0,n1,n2))",
          "",
          "[Removed Lines]",
          "961: #define Jsi_FunctionInvokeJSON(n0,n1,n2,n3) JSISTUBCALL(jsiStubsPtr, _Jsi_FunctionInvokeJSON(n0,n1,n2,n3))",
          "962: #define Jsi_FunctionInvokeBool(n0,n1,n2) JSISTUBCALL(jsiStubsPtr, _Jsi_FunctionInvokeBool(n0,n1,n2))",
          "963: #define Jsi_FunctionInvokeString(n0,n1,n2,n3) JSISTUBCALL(jsiStubsPtr, _Jsi_FunctionInvokeString(n0,n1,n2,n3))",
          "",
          "[Added Lines]",
          "961: #define Jsi_FunctionInvokeJSON(n0,n1,n2,n3,n4) JSISTUBCALL(jsiStubsPtr, _Jsi_FunctionInvokeJSON(n0,n1,n2,n3,n4))",
          "962: #define Jsi_FunctionInvokeBool(n0,n1,n2,n3) JSISTUBCALL(jsiStubsPtr, _Jsi_FunctionInvokeBool(n0,n1,n2,n3))",
          "963: #define Jsi_FunctionInvokeString(n0,n1,n2,n3,n4) JSISTUBCALL(jsiStubsPtr, _Jsi_FunctionInvokeString(n0,n1,n2,n3,n4))",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1316: #define Jsi_SqlObjBinds(n0,n1,n2) JSISTUBCALL(jsiStubsPtr, _Jsi_SqlObjBinds(n0,n1,n2))",
          "1317: #define Jsi_UserObjName(n0,n1,n2) JSISTUBCALL(jsiStubsPtr, _Jsi_UserObjName(n0,n1,n2))",
          "1318: #define Jsi_ValueNewRegExp(n0,n1,n2) JSISTUBCALL(jsiStubsPtr, _Jsi_ValueNewRegExp(n0,n1,n2))",
          "1320: #define Jsi_CommandPkgOpts(n0,n1) JSISTUBCALL(jsiStubsPtr, _Jsi_CommandPkgOpts(n0,n1))",
          "1321: #define Jsi_InterpMain(n0,n1,n2) JSISTUBCALL(jsiStubsPtr, _Jsi_InterpMain(n0,n1,n2))",
          "1322: #define Jsi_ObjFreeze(n0,n1,n2,n3,n4) JSISTUBCALL(jsiStubsPtr, _Jsi_ObjFreeze(n0,n1,n2,n3,n4))",
          "1324: #define Jsi_ValueNewFunction(n0,n1,n2,n3) JSISTUBCALL(jsiStubsPtr, _Jsi_ValueNewFunction(n0,n1,n2,n3))",
          "1325: #define Jsi_ObjAccessorWithSpec(n0,n1,n2,n3,n4,n5) JSISTUBCALL(jsiStubsPtr, _Jsi_ObjAccessorWithSpec(n0,n1,n2,n3,n4,n5))",
          "1326: #define Jsi_FunctionFromValue(n0,n1) JSISTUBCALL(jsiStubsPtr, _Jsi_FunctionFromValue(n0,n1))",
          "",
          "[Removed Lines]",
          "1319: #define Jsi_ObjGetValues(n0,n1,n2) JSISTUBCALL(jsiStubsPtr, _Jsi_ObjGetValues(n0,n1,n2))",
          "1323: #define Jsi_ObjAccessor(n0,n1,n2,n3,n4) JSISTUBCALL(jsiStubsPtr, _Jsi_ObjAccessor(n0,n1,n2,n3,n4))",
          "",
          "[Added Lines]",
          "1319: #define Jsi_ObjGetValues(n0,n1,n2,n3) JSISTUBCALL(jsiStubsPtr, _Jsi_ObjGetValues(n0,n1,n2,n3))",
          "1323: #define Jsi_ObjAccessor(n0,n1,n2,n3,n4,n5) JSISTUBCALL(jsiStubsPtr, _Jsi_ObjAccessor(n0,n1,n2,n3,n4,n5))",
          "",
          "---------------"
        ],
        "src/jsiTree.c||src/jsiTree.c": [
          "File: src/jsiTree.c -> src/jsiTree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "451:     treePtr->typ = (Jsi_Map_Type)JSI_MAP_TREE;",
          "452:     treePtr->root = NULL;",
          "453:     treePtr->opts.interp = interp;",
          "454:     treePtr->numEntries = 0;",
          "455:     treePtr->epoch = 0;",
          "456:     treePtr->opts.keyType = (Jsi_Key_Type)keyType;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "454:     treePtr->opts.refCnt = 1;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "507:         (*treePtr->opts.lockTreeProc)(treePtr, 0);",
          "508: }",
          "511: {",
          "512:     SIGASSERTV(treePtr, TREE);",
          "513:     if (treePtr->flags.destroyed)",
          "516:     treePtr->flags.destroyed = 1;",
          "517:     destroy_node(treePtr->opts.interp, treePtr->root);",
          "518:     _JSI_MEMCLEAR(treePtr);",
          "519:     Jsi_Free(treePtr);",
          "520: }",
          "",
          "[Removed Lines]",
          "510: void Jsi_TreeDelete (Jsi_Tree *treePtr)",
          "514:         return;",
          "",
          "[Added Lines]",
          "511: int Jsi_TreeDelete (Jsi_Tree *treePtr)",
          "514:     if (--treePtr->opts.refCnt>0) // Shared tree check.",
          "515:         return treePtr->opts.refCnt;",
          "517:         return -1;",
          "523:     return 0;",
          "",
          "---------------"
        ],
        "src/jsiUtils.c||src/jsiUtils.c": [
          "File: src/jsiUtils.c -> src/jsiUtils.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "297:             Jsi_DString jStr={}, kStr={};",
          "298:             Jsi_DSPrintf(&kStr, \"[%s, \\\"%s\\\", \\\"%s\\\", %d, %d ]\",",
          "299:                 Jsi_JSONQuote(interp, buf1, -1, &jStr), mt, curFile, line, lofs);",
          "301:                 code = 1;",
          "302:             Jsi_DSFree(&jStr);",
          "303:             Jsi_DSFree(&kStr);",
          "",
          "[Removed Lines]",
          "300:             if (Jsi_FunctionInvokeJSON(interp->parent, interp->debugOpts.msgCallback, Jsi_DSValue(&kStr), NULL) != JSI_OK)",
          "",
          "[Added Lines]",
          "300:             if (Jsi_FunctionInvokeJSON(interp->parent, interp->debugOpts.msgCallback, Jsi_DSValue(&kStr), NULL, NULL) != JSI_OK)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "497: bool Jsi_StrIsAlnum(const char *cp)",
          "498: {",
          "499:     if (!cp || !*cp) return 0;",
          "500:     while (*cp)",
          "501:         if (isalnum(*cp) || *cp == '_')",
          "502:             cp++;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "500:     if (isalpha(*cp) || *cp == '_')",
          "501:         cp++;",
          "502:     else",
          "503:         return 0;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "673:     return rc;",
          "674: }",
          "677: {",
          "678:     const char *key = (char*)Jsi_HashKeyGet(hPtr);",
          "679:     Jsi_Value *v = interp->GetterValue;",
          "681:     if (rc != JSI_OK)",
          "682:         return JSI_ERROR;",
          "683:     return jsi_ObjectGetFmt(interp, key, v, ow);",
          "",
          "[Removed Lines]",
          "676: static Jsi_RC jsi_objectGetterFmt(Jsi_Interp *interp, Jsi_HashEntry *hPtr, objwalker *ow)",
          "680:     Jsi_RC rc = jsi_GetterCall(interp, hPtr, &interp->GetterValue, 0);",
          "",
          "[Added Lines]",
          "680: static Jsi_RC jsi_objectGetterFmt(Jsi_Interp *interp, Jsi_HashEntry *hPtr, objwalker *ow, Jsi_Value* _this)",
          "684:     Jsi_RC rc = jsi_GetterCall(interp, hPtr, &interp->GetterValue, _this, 0);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "844:                     Jsi_DSAppend(dStr,\"{\",len?\" \":\"\", NULL);",
          "845:                     for (hPtr = Jsi_HashSearchFirst(o->getters, &search);",
          "846:                         hPtr != NULL; hPtr = Jsi_HashSearchNext(&search)) {",
          "848:                     }",
          "849:                 } else {",
          "850:                     Jsi_DSAppend(dStr,\"{\",len?\" \":\"\", NULL);",
          "",
          "[Removed Lines]",
          "847:                         jsi_objectGetterFmt(interp, hPtr, owPtr);",
          "",
          "[Added Lines]",
          "851:                         jsi_objectGetterFmt(interp, hPtr, owPtr, v);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1435:     list->opts.flags = flags;",
          "1436:     list->opts.freeHashProc = freeProc;",
          "1437:     list->opts.interp = interp;",
          "1438:     list->opts.mapType = JSI_MAP_LIST;",
          "1439:     list->opts.keyType = (Jsi_Key_Type)-1;",
          "1440:     return list;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1442:     list->opts.refCnt = 1;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1443: Jsi_RC Jsi_ListConf(Jsi_List *listPtr, Jsi_MapOpts *opts, bool set)",
          "1444: {",
          "1445:     if (set) {",
          "1446:         listPtr->opts = *opts;",
          "1447:     } else {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1450:     SIGASSERT(listPtr, LIST);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1450:     return JSI_OK;",
          "1451: }",
          "1454:     Jsi_ListClear(list);",
          "1455:     free(list);",
          "1456: }",
          "1458: void Jsi_ListClear(Jsi_List *list) {",
          "",
          "[Removed Lines]",
          "1453: void Jsi_ListDelete(Jsi_List *list) {",
          "",
          "[Added Lines]",
          "1459: int Jsi_ListDelete(Jsi_List *list) {",
          "1460:     SIGASSERT(list, LIST);",
          "1461:     if (--list->opts.refCnt>0) // Shared hash check.",
          "1462:         return list->opts.refCnt;",
          "1465:     return 0;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1471: Jsi_ListEntry* Jsi_ListPush(Jsi_List *list, Jsi_ListEntry *item, Jsi_ListEntry *before)",
          "1472: {",
          "1473:     Assert(item && list);",
          "1474:     if (item->list && (item->list->head == item || item->prev || item->next)) {",
          "1475:         Assert(list->opts.freeListProc == item->list->opts.freeListProc);",
          "1476:         Jsi_ListPop(item->list, item);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1484:     SIGASSERT(list, LIST);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1625:     }",
          "1626: }",
          "1629:     SIGASSERTV(mapPtr, MAP);",
          "1630:     switch (mapPtr->typ) {",
          "1635:     }",
          "1637: }",
          "1638: Jsi_MapEntry* Jsi_MapSet(Jsi_Map *mapPtr, const void *key, const void *value){",
          "1639:     SIGASSERT(mapPtr, MAP);",
          "",
          "[Removed Lines]",
          "1628: void Jsi_MapDelete (Jsi_Map *mapPtr) {",
          "1631:         case JSI_MAP_HASH: Jsi_HashDelete(mapPtr->v.hash); break;",
          "1632:         case JSI_MAP_TREE: Jsi_TreeDelete(mapPtr->v.tree); break;",
          "1633:         case JSI_MAP_LIST: Jsi_ListDelete(mapPtr->v.list); break;",
          "1634:         default: return;",
          "1636:     Jsi_Free(mapPtr);",
          "",
          "[Added Lines]",
          "1639: int Jsi_MapDelete (Jsi_Map *mapPtr) {",
          "1641:     int r = 0;",
          "1643:         case JSI_MAP_HASH: r = Jsi_HashDelete(mapPtr->v.hash); break;",
          "1644:         case JSI_MAP_TREE: r = Jsi_TreeDelete(mapPtr->v.tree); break;",
          "1645:         case JSI_MAP_LIST: r = Jsi_ListDelete(mapPtr->v.list); break;",
          "1646:         default: return -1;",
          "1648:     if (r==0)",
          "1649:         Jsi_Free(mapPtr);",
          "1650:     return r;",
          "",
          "---------------"
        ],
        "src/jsiValue.c||src/jsiValue.c": [
          "File: src/jsiValue.c -> src/jsiValue.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "992:     if (obj->getters) {",
          "993:         Jsi_HashEntry *hPtr = Jsi_HashEntryFind(obj->getters, keyStr);",
          "994:         if (hPtr) {",
          "1013:             if (rc == JSI_OK) {",
          "1014:                 v = interp->GetterValue;",
          "1015:                 v->f.bits.isgetter = 1;",
          "",
          "[Removed Lines]",
          "995:             Jsi_RC rc = jsi_GetterCall(interp, hPtr, &interp->GetterValue, 0);",
          "997:         if (vget) {",
          "998:             Jsi_Value *vpargs = NULL, *vargs[2], *vres = interp->GetterValue;",
          "999:             Jsi_FuncObj *fobj = vget->d.obj->d.fobj;",
          "1000:             int i = 0;",
          "1001:             if (!fobj->func->isGet) {",
          "1002:                 vargs[i++] = Jsi_ValueNewStringDup(interp, keyStr);",
          "1003:                 Jsi_IncrRefCount(interp, vargs[0]);",
          "1004:                 vpargs = Jsi_ValueMakeObject(interp, NULL, Jsi_ObjNewArray(interp, vargs, i, 0));",
          "1005:                 Jsi_IncrRefCount(interp, vpargs);",
          "1006:             }",
          "1008:             Jsi_RC rc = Jsi_FunctionInvoke(interp, vget, vpargs, &vres, NULL);",
          "1009:             if (vpargs) {",
          "1010:                 Jsi_DecrRefCount(interp, vargs[0]);",
          "1011:                 Jsi_DecrRefCount(interp, vpargs);",
          "",
          "[Added Lines]",
          "995:             Jsi_RC rc = jsi_GetterCall(interp, hPtr, &interp->GetterValue, target, 0);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1302:     return res;",
          "1303: }",
          "1307: }",
          "1319: Jsi_RC Jsi_ValueInsertArray(Jsi_Interp *interp, Jsi_Value *target, int key, Jsi_Value *val, int flags)",
          "",
          "[Removed Lines]",
          "1305: Jsi_RC Jsi_NewVariable(Jsi_Interp *interp, const char *name, Jsi_Value *val, uint flags) {",
          "1306:     return Jsi_ObjInsert(interp, interp->csc->d.obj, name, val, 0);",
          "1310: Jsi_RC Jsi_ValueInsert(Jsi_Interp *interp, Jsi_Value *target, const char *key, Jsi_Value *val, int flags)",
          "1311: {",
          "1312:     if (target->vt != JSI_VT_OBJECT)",
          "1313:         return Jsi_LogError(\"Target is not object\");",
          "1314:     target->f.flag |= flags;",
          "1315:     return Jsi_ObjInsert(interp, target->d.obj, key, val, flags);",
          "1316: }",
          "",
          "[Added Lines]",
          "1288: Jsi_RC Jsi_NewVariable(Jsi_Interp *interp, const char *name, Jsi_Value *val, int flags) {",
          "1289:     if (!val)",
          "1290:         val = Jsi_ValueNew(interp);",
          "1291:     return Jsi_ValueInsert(interp, interp->csc, name, val, flags);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1325:     if (obj->isarrlist) {",
          "1326:         if (key >= 0 && (uint)key < interp->maxArrayList) {",
          "1328:             return JSI_OK;",
          "1329:         }",
          "1330:         return JSI_ERROR;",
          "1331:     }",
          "1332:     char unibuf[JSI_MAX_NUMBER_STRING];",
          "1333:     Jsi_NumberItoA10(key, unibuf, sizeof(unibuf));",
          "1335: }",
          "",
          "[Removed Lines]",
          "1327:             Jsi_ObjArraySet(interp, obj, val, key);",
          "1334:     return Jsi_ObjInsert(interp, obj, unibuf, val, flags);",
          "",
          "[Added Lines]",
          "1304:             Jsi_ValueArraySet(interp, target, val, key);",
          "1311:     return Jsi_ValueInsert(interp, target, unibuf, val, flags);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1359:     IterObjInsertKey(io, (const char*)Jsi_TreeKeyGet(hPtr));",
          "1360: }",
          "1363: {",
          "1364:     const char *key = (char*)Jsi_HashKeyGet(hPtr);",
          "1365:     Jsi_Value *v = (Jsi_Value*)Jsi_HashValueGet(hPtr);",
          "",
          "[Removed Lines]",
          "1362: Jsi_RC jsi_SetterCall(Jsi_Interp *interp, Jsi_HashEntry *hPtr, Jsi_Value *val, int flags)",
          "",
          "[Added Lines]",
          "1339: Jsi_RC jsi_SetterCall(Jsi_Interp *interp, Jsi_HashEntry *hPtr, Jsi_Value *val, Jsi_Value *_this, int flags)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1377:     vpargs = Jsi_ValueMakeObject(interp, NULL, Jsi_ObjNewArray(interp, vargs, i, 0));",
          "1378:     Jsi_IncrRefCount(interp, val);",
          "1379:     Jsi_IncrRefCount(interp, vpargs);",
          "1381:     Jsi_DecrRefCount(interp, vpargs);",
          "1382:     Jsi_DecrRefCount(interp, val);",
          "1383:     if (i>1)",
          "",
          "[Removed Lines]",
          "1380:     Jsi_RC rc = Jsi_FunctionInvoke(interp, v, vpargs, &retStr, NULL);",
          "",
          "[Added Lines]",
          "1357:     Jsi_RC rc = Jsi_FunctionInvoke(interp, v, vpargs, &retStr, _this);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1388:     return JSI_OK;",
          "1389: }",
          "1392: {",
          "1393:     const char *key = (char*)Jsi_HashKeyGet(hPtr);",
          "1394:     Jsi_Value *vcall = (Jsi_Value*)Jsi_HashValueGet(hPtr);",
          "",
          "[Removed Lines]",
          "1391: Jsi_RC jsi_GetterCall(Jsi_Interp *interp, Jsi_HashEntry *hPtr, Jsi_Value **vres, int flags)",
          "",
          "[Added Lines]",
          "1368: Jsi_RC jsi_GetterCall(Jsi_Interp *interp, Jsi_HashEntry *hPtr, Jsi_Value **vres, Jsi_Value *_this, int flags)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1404:         Jsi_IncrRefCount(interp, vpargs);",
          "1405:     }",
          "1408:     if (vpargs) {",
          "1409:         Jsi_DecrRefCount(interp, vargs[0]);",
          "1410:         Jsi_DecrRefCount(interp, vpargs);",
          "",
          "[Removed Lines]",
          "1407:     Jsi_RC rc = Jsi_FunctionInvoke(interp, vcall, vpargs, vres, NULL);",
          "",
          "[Added Lines]",
          "1384:     Jsi_RC rc = Jsi_FunctionInvoke(interp, vcall, vpargs, vres, _this);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1412:     return rc;",
          "1413: }",
          "1416: {",
          "1417:     Jsi_TreeEntry *hPtr;",
          "1418:     SIGASSERT(val, VALUE);",
          "",
          "[Removed Lines]",
          "1415: Jsi_RC Jsi_ObjInsert(Jsi_Interp *interp, Jsi_Obj *obj, const char *key, Jsi_Value *val, int flags)",
          "",
          "[Added Lines]",
          "1392: static Jsi_RC jsi_ObjValInsert(Jsi_Interp *interp, Jsi_Obj *obj, const char *key, Jsi_Value *val, Jsi_Value *_this, int flags)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1420:     if (obj && obj->setters && val) {",
          "1421:         Jsi_HashEntry *hPtr = Jsi_HashEntryFind(obj->setters, key);",
          "1422:         if (hPtr)",
          "1424:     }",
          "1426:     if (val && obj->freeze) {",
          "",
          "[Removed Lines]",
          "1423:             return jsi_SetterCall(interp, hPtr, val, 0);",
          "",
          "[Added Lines]",
          "1400:             return jsi_SetterCall(interp, hPtr, val, _this, 0);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1442:     return JSI_OK;",
          "1443: }",
          "1445: static Jsi_RC IterGetKeysCallback(Jsi_Tree* tree, Jsi_TreeEntry *hPtr, void *data)",
          "1446: {",
          "1447:     Jsi_IterObj *io = (Jsi_IterObj *)data;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1423: Jsi_RC Jsi_ValueInsert(Jsi_Interp *interp, Jsi_Value *target, const char *key, Jsi_Value *val, int flags)",
          "1424: {",
          "1425:     if (target->vt != JSI_VT_OBJECT)",
          "1426:         return Jsi_LogError(\"Target is not object\");",
          "1427:     target->f.flag |= flags;",
          "1428:     return jsi_ObjValInsert(interp, target->d.obj, key, val, target, flags);",
          "1429: }",
          "1431: Jsi_RC Jsi_ObjInsert(Jsi_Interp *interp, Jsi_Obj *obj, const char *key, Jsi_Value *val, int flags)",
          "1432: {",
          "1433:     return jsi_ObjValInsert(interp, obj, key, val, NULL, flags);",
          "1434: }",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1481:         iterobj->isgetter = 1;",
          "1482:         for (hPtr = Jsi_HashSearchFirst(to->getters, &search);",
          "1483:             hPtr != NULL; hPtr = Jsi_HashSearchNext(&search)) {",
          "1485:                 IterObjInsertKey(iterobj, key);",
          "1486:         }",
          "1487:         return;",
          "",
          "[Removed Lines]",
          "1484:                 const char *key = Jsi_HashKeyGet(hPtr);",
          "",
          "[Added Lines]",
          "1475:                 const char *key = (char*)Jsi_HashKeyGet(hPtr);",
          "",
          "---------------"
        ],
        "src/jsiVfs.c||src/jsiVfs.c": [
          "File: src/jsiVfs.c -> src/jsiVfs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "496:     Jsi_IncrRefCount(interp, vpargs);",
          "497:     for (i=0; i<n; i++)",
          "498:         Jsi_IncrRefCount(interp, vargs[i]);",
          "500:     for (i=0; i<n; i++)",
          "501:         Jsi_DecrRefCount(interp, vargs[i]);",
          "502:     Jsi_DecrRefCount(interp, vpargs);",
          "",
          "[Removed Lines]",
          "499:     Jsi_RC rc = Jsi_FunctionInvoke(interp, cmd, vpargs, ret, NULL);",
          "",
          "[Added Lines]",
          "499:     Jsi_RC rc = Jsi_FunctionInvoke(interp, cmd, vpargs, ret, _this);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "596:         Jsi_IncrRefCount(interp, vargs[0]);",
          "597:         Jsi_IncrRefCount(interp, vpargs);",
          "599:         Jsi_DecrRefCount(interp, vpargs);",
          "600:         Jsi_DecrRefCount(interp, vargs[0]);",
          "601:         if (jrc != JSI_OK) {",
          "",
          "[Removed Lines]",
          "598:         Jsi_RC jrc = Jsi_FunctionInvoke(interp, cmdPtr->callback, vpargs, &retStr, NULL);",
          "",
          "[Added Lines]",
          "598:         Jsi_RC jrc = Jsi_FunctionInvoke(interp, cmdPtr->callback, vpargs, &retStr, _this);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "620:         Jsi_IncrRefCount(interp, vargs[0]);",
          "621:         Jsi_IncrRefCount(interp, vpargs);",
          "623:         Jsi_DecrRefCount(interp, vpargs);",
          "624:         Jsi_DecrRefCount(interp, vargs[0]);",
          "625:         if (jrc != JSI_OK) {",
          "",
          "[Removed Lines]",
          "622:         Jsi_RC jrc = Jsi_FunctionInvoke(interp, cmdPtr->callback, vpargs, &retStr, NULL);",
          "",
          "[Added Lines]",
          "622:         Jsi_RC jrc = Jsi_FunctionInvoke(interp, cmdPtr->callback, vpargs, &retStr, _this);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "720:         Jsi_IncrRefCount(interp, vargs[0]);",
          "721:         Jsi_IncrRefCount(interp, vpargs);",
          "723:         Jsi_DecrRefCount(interp, vpargs);",
          "724:         Jsi_DecrRefCount(interp, vargs[0]);",
          "725:         Jsi_DecrRefCount(interp, retStr);",
          "",
          "[Removed Lines]",
          "722:         jrc = Jsi_FunctionInvoke(interp, cmdPtr->callback, vpargs, &retStr, NULL);",
          "",
          "[Added Lines]",
          "722:         jrc = Jsi_FunctionInvoke(interp, cmdPtr->callback, vpargs, &retStr, _this);",
          "",
          "---------------"
        ],
        "src/jsiWebSocket.c||src/jsiWebSocket.c": [
          "File: src/jsiWebSocket.c -> src/jsiWebSocket.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1540:                 Jsi_DSAppend(&jStr, \"[null]\", NULL);",
          "1541:                 Jsi_DSAppend(&jStr, \"]\", NULL);",
          "1542:                 vrc = Jsi_ValueNew1(interp);",
          "1544:                 if (Jsi_InterpGone(interp))",
          "1545:                     return -1;",
          "1546:                 if (evrc != JSI_OK || !vrc || !Jsi_ValueIsObjType(interp, vrc, JSI_OT_OBJECT)) {",
          "",
          "[Removed Lines]",
          "1543:                 evrc = Jsi_FunctionInvokeJSON(interp, hv, Jsi_DSValue(&jStr), &vrc);",
          "",
          "[Added Lines]",
          "1543:                 evrc = Jsi_FunctionInvokeJSON(interp, hv, Jsi_DSValue(&jStr), &vrc, NULL);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1563:             if (hdlPtr->objVar) {  // Call the obj.parse function.",
          "1564:                 Jsi_DSAppend(&jStr, \"[\\\"\", buf, \"\\\"]\", NULL); // TODO: JSON encode.",
          "1565:                 vrc = Jsi_ValueNew1(interp);",
          "1567:                 isalloc = 1;",
          "1568:             }",
          "1569:             else if (Jsi_ValueIsFunction(interp, hv)) {",
          "1571:                 Jsi_DSAppend(&jStr, \"[\\\"\", buf, \"\\\", {wsName:\\\"\", Jsi_DSValue(&cmdPtr->cName), \"\\\"\", \"}]\", NULL); // TODO: JSON encode.",
          "1572:                 vrc = Jsi_ValueNew1(interp);",
          "1574:                 isalloc = 1;",
          "1575:             } else {",
          "",
          "[Removed Lines]",
          "1566:                 evrc = Jsi_FunctionInvokeJSON(interp, hdlPtr->objVar, Jsi_DSValue(&jStr), &vrc);",
          "1573:                 evrc = Jsi_FunctionInvokeJSON(interp, hv, Jsi_DSValue(&jStr), &vrc);",
          "",
          "[Added Lines]",
          "1566:                 evrc = Jsi_FunctionInvokeJSON(interp, hdlPtr->objVar, Jsi_DSValue(&jStr), &vrc, NULL);",
          "1573:                 evrc = Jsi_FunctionInvokeJSON(interp, hv, Jsi_DSValue(&jStr), &vrc, NULL);",
          "",
          "---------------"
        ],
        "tests/obj2.jsi||tests/obj2.jsi": [
          "File: tests/obj2.jsi -> tests/obj2.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "4:    _foo:0,",
          "5:    _bar:'',",
          "6:    set foo(val) {",
          "8:    },",
          "9:    get foo() {",
          "11:    },",
          "12:    set bar(val) {",
          "14:    },",
          "15:    get bar() {",
          "17:    },",
          "18: };",
          "19: ;x.bar = 'x';",
          "",
          "[Removed Lines]",
          "7:       x._foo=val;",
          "10:      return x._foo;",
          "13:       x._bar=val;",
          "16:      return x._bar;",
          "",
          "[Added Lines]",
          "7:       this._foo=val;",
          "10:      return this._foo;",
          "13:       this._bar=val;",
          "16:      return this._bar;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "40: x.foo ==> 9",
          "41: x.export++ ==> 99",
          "42: x.export ==> 100",
          "44: Info.vars(x) ==> [ \"_bar\", \"_foo\", \"export\" ]",
          "45: i=Info.obj(x) ==> { freeze:false, freezeModify:true, freezeReadCheck:false, getters:[ \"foo\", \"bar\" ], objType:\"object\", setters:[ \"foo\", \"bar\" ], spec:undefined }",
          "46: keys ==> [ \"bar\", \"foo\" ]",
          "",
          "[Removed Lines]",
          "43: x.foo++ ==> 100",
          "",
          "[Added Lines]",
          "43: x.foo++ ==> 9",
          "",
          "---------------"
        ],
        "tools/protos.jsi||tools/protos.jsi": [
          "File: tools/protos.jsi -> tools/protos.jsi"
        ]
      }
    },
    {
      "candidate_hash": "c4fe315afadb935008de5466f60855e663caa653",
      "candidate_info": {
        "commit_hash": "c4fe315afadb935008de5466f60855e663caa653",
        "repo": "pcmacdon/jsish",
        "commit_url": "https://github.com/pcmacdon/jsish/commit/c4fe315afadb935008de5466f60855e663caa653",
        "files": [
          "README.md",
          "jsish.c",
          "lib/Zip.jsi",
          "lib/web/app",
          "lib/web/md/Building.md",
          "lib/web/md/Reference.md",
          "lib/web/md/Start.md",
          "lib/web/md/dev/Ledger.md",
          "lib/web/md/dev/jsi.js.md",
          "lib/web/md/index.json",
          "src/jsi.h",
          "src/jsiCmds.c",
          "src/jsiZvfs.c",
          "tools/protos.jsi"
        ],
        "message": "Release \"3.4\": fix zip handling of dirs.\n\nFossilOrigin-Name: 9393cad26fca4ffe3a1388f50e08fcd55b4762cbeb9058205ba269721659fd4c",
        "before_after_code_files": [
          "jsish.c||jsish.c",
          "lib/Zip.jsi||lib/Zip.jsi",
          "src/jsi.h||src/jsi.h",
          "src/jsiCmds.c||src/jsiCmds.c",
          "src/jsiZvfs.c||src/jsiZvfs.c",
          "tools/protos.jsi||tools/protos.jsi"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/jsi.h||src/jsi.h",
            "src/jsiCmds.c||src/jsiCmds.c",
            "tools/protos.jsi||tools/protos.jsi"
          ],
          "candidate": [
            "src/jsi.h||src/jsi.h",
            "src/jsiCmds.c||src/jsiCmds.c",
            "tools/protos.jsi||tools/protos.jsi"
          ]
        }
      },
      "candidate_diff": {
        "jsish.c||jsish.c": [
          "File: jsish.c -> jsish.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: #include \"regex/tre-mem.c\"",
          "13: #include \"src/parser.h\"",
          "14: #include \"src/jsiInt.h\"",
          "15: #if JSI__MINIZ",
          "16: #include \"miniz/miniz.c\"",
          "17: #endif //JSI__MINIZ",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "15: #include \"src/linenoise.h\"",
          "",
          "---------------"
        ],
        "lib/Zip.jsi||lib/Zip.jsi": [
          "File: lib/Zip.jsi -> lib/Zip.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "98:             return usage(\"must give a directory to zip: \" + zdir);",
          "99:         var i = 0, zargs = [];",
          "100:         zargs[i++] = File.realpath(fname);",
          "102:         zargs[i++] = zdir;",
          "103:         for (var n = 3; n<args.length; n++) {",
          "104:             var ldir = args[n];",
          "107:             zargs[i++] = null;",
          "108:         }",
          "109:         Zvfs.create.apply({},zargs);",
          "",
          "[Removed Lines]",
          "101:         zargs[i++] = File.glob('*', {dir:zdir, recurse:true});",
          "105:             zargs[i++] = File.glob(ldir, {recurse:true});",
          "106:             zargs[i-1].push(ldir);",
          "",
          "[Added Lines]",
          "101:         zargs[i++] = File.glob('*', {dir:zdir, recurse:true}).sort();",
          "105:             zargs[i++] = File.glob(ldir, {recurse:true}).concat([ldir]).sort();",
          "",
          "---------------"
        ],
        "src/jsi.h||src/jsi.h": [
          "File: src/jsi.h -> src/jsi.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: #define __JSI_H__",
          "5: #define JSI_VERSION_MAJOR   3",
          "7: #define JSI_VERSION_RELEASE 0",
          "9: #define JSI_VERSION (JSI_VERSION_MAJOR + ((Jsi_Number)JSI_VERSION_MINOR/100.0) + ((Jsi_Number)JSI_VERSION_RELEASE/10000.0))",
          "",
          "[Removed Lines]",
          "6: #define JSI_VERSION_MINOR   3",
          "",
          "[Added Lines]",
          "6: #define JSI_VERSION_MINOR   4",
          "",
          "---------------"
        ],
        "src/jsiCmds.c||src/jsiCmds.c": [
          "File: src/jsiCmds.c -> src/jsiCmds.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5062: #endif",
          "5063:     { \"log\",        SysLogCmd,       1, -1, \"val, ...\", .help=\"Same as puts, but includes file:line\", .retType=(uint)JSI_TT_VOID, .flags=0 },",
          "5064:     { \"matchObj\",   SysMatchObjCmd,  1,  4, \"obj:object, match:string=void, partial=false, noerror=false\", .help=\"Validate that object matches given name:type string. With single arg returns generated string\", .retType=(uint)JSI_TT_BOOLEAN|JSI_TT_STRING },",
          "5066:     { \"moduleOpts\", SysModuleOptsCmd,1,  3, \"options:object, self:object|userobj=void, conf:object|null|undefined=void\", .help=\"Parse module options\", .retType=(uint)JSI_TT_OBJECT, .flags=0},",
          "5067:     { \"moduleRun\",  SysModuleRunCmd, 1,  2, \"cmd:string|function, args:array=undefined\", .help=\"Invoke named module with given args or command-line args\", .retType=(uint)JSI_TT_ANY},",
          "5068:     { \"noOp\",       jsi_NoOpCmd,     0, -1, \"\", .help=\"A No-Op. A zero overhead command call that is useful for debugging\" },",
          "",
          "[Removed Lines]",
          "5065:     { \"module\",     SysModuleCmd,    1,  3, \"cmd:string|function, version:number|string=1, options:object=void\", .help=\"Same as provide, but also invokes the function/name if isMain is true\", .retType=(uint)JSI_TT_VOID, .flags=0, .info=0, .opts=jsiModuleOptions },",
          "",
          "[Added Lines]",
          "5065:     { \"module\",     SysModuleCmd,    1,  3, \"cmd:string|function, version:number|string=1, options:object=void\", .help=\"Same as provide, but will invoke cmd if isMain is true\", .retType=(uint)JSI_TT_VOID, .flags=0, .info=0, .opts=jsiModuleOptions },",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5070:     { \"parseFloat\", parseFloatCmd,   1,  1, \"val\", .help=\"Convert string to a double\", .retType=(uint)JSI_TT_NUMBER },",
          "5071:     { \"parseOpts\",  SysParseOptsCmd, 3,  3, \"self:object|userobj, options:object, conf:object|null|undefined\", .help=\"Parse module options: similar to moduleOpts but arg order different and no freeze\", .retType=(uint)JSI_TT_OBJECT, .flags=0},",
          "5072:     { \"printf\",     SysPrintfCmd,    1, -1, \"format:string, ...\", .help=\"Formatted output to stdout\", .retType=(uint)JSI_TT_VOID, .flags=0 },",
          "5074:     { \"puts\",       SysPutsCmd,      1, -1, \"val:any, ...\", .help=\"Output one or more values to stdout\", .retType=(uint)JSI_TT_VOID, .flags=0, .info=FN_puts },",
          "5075:     { \"quote\",      SysQuoteCmd,     1,  1, \"val:string\", .help=\"Return quoted string\", .retType=(uint)JSI_TT_STRING },",
          "5076:     { \"require\",    SysRequireCmd,   0,  3, \"name:string=void, version:number|string=1, options:object=void\", .help=\"Load/query packages\", .retType=(uint)JSI_TT_NUMBER|JSI_TT_OBJECT|JSI_TT_ARRAY, .flags=0, .info=FN_require, .opts=jsiModuleOptions },",
          "",
          "[Removed Lines]",
          "5073:     { \"provide\",    SysProvideCmd,   0,  3, \"name:string|function=void, version:number|string=1, options:object=void\", .help=\"Provide a package for use with require\", .retType=(uint)JSI_TT_VOID, .flags=0, .info=0, .opts=jsiModuleOptions  },",
          "",
          "[Added Lines]",
          "5073:     { \"provide\",    SysProvideCmd,   0,  3, \"cmd:string|function=void, version:number|string=1, options:object=void\", .help=\"Make a package available for use by require\", .retType=(uint)JSI_TT_VOID, .flags=0, .info=0, .opts=jsiModuleOptions  },",
          "",
          "---------------"
        ],
        "src/jsiZvfs.c||src/jsiZvfs.c": [
          "File: src/jsiZvfs.c -> src/jsiZvfs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1730:     Jsi_Write(interp, out, zHdr, 30);",
          "",
          "[Removed Lines]",
          "1731:     Jsi_Write(interp, out, zDest, nameLen);",
          "",
          "[Added Lines]",
          "1730:     Jsi_Write(interp, out, p->zName, nameLen);",
          "",
          "---------------"
        ],
        "tools/protos.jsi||tools/protos.jsi": [
          "File: tools/protos.jsi -> tools/protos.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "286: System.prototype.parseInt = function(val:any, base:number=10):number {};",
          "287: System.prototype.parseOpts = function(self:object|userobj, options:object, conf:object|null|undefined):object {};",
          "288: System.prototype.printf = function(format:string, ...):void {};",
          "290: System.prototype.puts = function(val:any, ...):void {};",
          "291: System.prototype.quote = function(val:string):string {};",
          "292: System.prototype.require = function(name:string=void, version:number|string=1, options:object=void):number|array|object {};",
          "",
          "[Removed Lines]",
          "289: System.prototype.provide = function(name:string|function=void, version:number|string=1, options:object=void):void {};",
          "",
          "[Added Lines]",
          "289: System.prototype.provide = function(cmd:string|function=void, version:number|string=1, options:object=void):void {};",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "385: var parseInt = function(val:any, base:number=10):number {};",
          "386: var parseOpts = function(self:object|userobj, options:object, conf:object|null|undefined):object {};",
          "387: var printf = function(format:string, ...):void {};",
          "389: var puts = function(val:any, ...):void {};",
          "390: var quote = function(val:string):string {};",
          "391: var require = function(name:string=void, version:number|string=1, options:object=void):number|array|object {};",
          "",
          "[Removed Lines]",
          "388: var provide = function(name:string|function=void, version:number|string=1, options:object=void):void {};",
          "",
          "[Added Lines]",
          "388: var provide = function(cmd:string|function=void, version:number|string=1, options:object=void):void {};",
          "",
          "---------------"
        ]
      }
    }
  ]
}