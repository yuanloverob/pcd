{
  "cve_id": "CVE-2019-19646",
  "cve_desc": "pragma.c in SQLite through 3.30.1 mishandles NOT NULL in an integrity_check PRAGMA command in certain cases of generated columns.",
  "repo": "sqlite/sqlite",
  "patch_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
  "patch_info": {
    "commit_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/pragma.c",
      "test/gencol1.test"
    ],
    "message": "Fix the NOT NULL verification logic in PRAGMA integrity_check so that it works for generated columns whose value is the result of a comparison operator. Ticket [bd8c280671ba44a7]\n\nFossilOrigin-Name: f3b39c71b88cb6721f443de56cdce4c08252453a5e340b00a2bd88dc10c42400",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/pragma.c||src/pragma.c",
      "test/gencol1.test||test/gencol1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: e3398c5ffb060b2b26334b8598e2c63953741e2d6f5124dbd6bdfc8e94742539",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/pragma.c||src/pragma.c": [
      "File: src/pragma.c -> src/pragma.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1596:           if( j==pTab->iPKey ) continue;",
      "1597:           if( pTab->aCol[j].notNull==0 ) continue;",
      "1598:           sqlite3ExprCodeGetColumnOfTable(v, pTab, iDataCur, j, 3);",
      "1600:           jmp2 = sqlite3VdbeAddOp1(v, OP_NotNull, 3); VdbeCoverage(v);",
      "1601:           zErr = sqlite3MPrintf(db, \"NULL value in %s.%s\", pTab->zName,",
      "1602:                               pTab->aCol[j].zName);",
      "",
      "[Removed Lines]",
      "1599:           sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "",
      "[Added Lines]",
      "1599:           if( sqlite3VdbeGetOp(v,-1)->opcode==OP_Column ){",
      "1600:             sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "1601:           }",
      "",
      "---------------"
    ],
    "test/gencol1.test||test/gencol1.test": [
      "File: test/gencol1.test -> test/gencol1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "328:   INSERT OR REPLACE INTO t0(c0, c1) VALUES (2, 1), (1, 0)",
      "329: } {1 {FOREIGN KEY constraint failed}}",
      "331: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "331: # 2019-12-09 ticket bd8c280671ba44a7",
      "332: # With generated columns, the sqlite3ExprGetColumnOfTable() routine might",
      "333: # generate a code sequence that does not end with OP_Column.  So check to",
      "334: # make sure that the last instruction generated is an OP_column prior to",
      "335: # applying the OPFLAG_TYPEOFARG optimization to NOT NULL checks in the",
      "336: # PRAGMA integrity_check code.",
      "337: #",
      "338: sqlite3 db :memory:",
      "339: do_execsql_test gencol1-12.10 {",
      "340:   CREATE TABLE t0 (c0, c1 NOT NULL AS (c0==0));",
      "341:   INSERT INTO t0(c0) VALUES (0);",
      "342:   PRAGMA integrity_check;",
      "343: } {ok}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "4413265d4eb6eab7dc6c8fde05738fb68990d901",
      "candidate_info": {
        "commit_hash": "4413265d4eb6eab7dc6c8fde05738fb68990d901",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/4413265d4eb6eab7dc6c8fde05738fb68990d901",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/speedtest1.c"
        ],
        "message": "Add new cases to speedtest1 for measuring performance of binary to/from decimal conversions of floating point values.\n\nFossilOrigin-Name: b84e7057c05338347b4267f7ccc1d7b9b6d4e9a941ce8b76bf2c27c26772000c",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/speedtest1.c||test/speedtest1.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: ed250b4e18ea042d681bbe8d7ed00895564f4525c22928a003a84585b4756ec3",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/speedtest1.c||test/speedtest1.c": [
          "File: test/speedtest1.c -> test/speedtest1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1191:     speedtest1_run();",
          "1192:   }",
          "1193:   speedtest1_end_test();",
          "1194: }",
          "1196: #ifdef SQLITE_ENABLE_RTREE",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1195:   n = g.szTest*5000;",
          "1196:   speedtest1_begin_test(140, \"%d calls to round()\", n);",
          "1197:   speedtest1_exec(\"SELECT sum(round(a,2)+round(b,4)) FROM t1;\");",
          "1198:   speedtest1_end_test();",
          "1201:   speedtest1_begin_test(150, \"%d printf() calls\", n*4);",
          "1202:   speedtest1_exec(",
          "1203:     \"WITH c(fmt) AS (VALUES('%%g'),('%%e'),('%%!g'),('%%.20f'))\"",
          "1204:     \"SELECT sum(printf(fmt,a)) FROM t1, c\"",
          "1205:   );",
          "1206:   speedtest1_end_test();",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8d40673c8458f9b26a9cb72b8ed9f5a10fe26e6f",
      "candidate_info": {
        "commit_hash": "8d40673c8458f9b26a9cb72b8ed9f5a10fe26e6f",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/8d40673c8458f9b26a9cb72b8ed9f5a10fe26e6f",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c",
          "src/prepare.c",
          "src/sqliteInt.h"
        ],
        "message": "Detect if two indexes of the same table share a common rootpage while parsing the schema, and throw an error immediately.\n\nFossilOrigin-Name: f21c6f1343edc4ba68f9f8e68caac34da0d1c651526ecaf61c0e2d66593a555e",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c",
          "src/prepare.c||src/prepare.c",
          "src/sqliteInt.h||src/sqliteInt.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: dc794d8f518ed46536928a77a560d46e4f9365c30a00cd108f000d8556a66c00",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3497:       db->mDbFlags |= DBFLAG_SchemaChange;",
          "3498:       if( pTblName!=0 ){",
          "3499:         pIndex->tnum = db->init.newTnum;",
          "3500:       }",
          "3501:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3500:         if( sqlite3IndexHasDuplicateRootPage(pIndex) ){",
          "3501:           sqlite3ErrorMsg(pParse, \"invalid root page\");",
          "3502:           pParse->rc = SQLITE_CORRUPT_BKPT;",
          "3503:           goto exit_create_index;",
          "3504:         }",
          "",
          "---------------"
        ],
        "src/prepare.c||src/prepare.c": [
          "File: src/prepare.c -> src/prepare.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "44:   }",
          "45: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "52: int sqlite3IndexHasDuplicateRootPage(Index *pIndex){",
          "53:   Index *p;",
          "54:   for(p=pIndex->pTable->pIndex; p; p=p->pNext){",
          "55:     if( p->tnum==pIndex->tnum && p!=pIndex ) return 1;",
          "56:   }",
          "57:   return 0;",
          "58: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "122:     if( pIndex==0",
          "123:      || sqlite3GetInt32(argv[1],&pIndex->tnum)==0",
          "124:      || pIndex->tnum<2",
          "125:     ){",
          "126:       corruptSchema(pData, argv[0], pIndex?\"invalid rootpage\":\"orphan index\");",
          "127:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "138:      || sqlite3IndexHasDuplicateRootPage(pIndex)",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "3844: void sqlite3ExprListSetSpan(Parse*,ExprList*,const char*,const char*);",
          "3845: void sqlite3ExprListDelete(sqlite3*, ExprList*);",
          "3846: u32 sqlite3ExprListFlags(const ExprList*);",
          "3847: int sqlite3Init(sqlite3*, char**);",
          "3848: int sqlite3InitCallback(void*, int, char**, char**);",
          "3849: int sqlite3InitOne(sqlite3*, int, char**, u32);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3847: int sqlite3IndexHasDuplicateRootPage(Index*);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0167ef202b2279af622956a4a1a073531759c216",
      "candidate_info": {
        "commit_hash": "0167ef202b2279af622956a4a1a073531759c216",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/0167ef202b2279af622956a4a1a073531759c216",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c"
        ],
        "message": "Fix an obsolete comment that defines the meaning of one of the parameters to the sqlite3FindInIndex() subroutine.  No changes to code.\n\nFossilOrigin-Name: 0c946f0846b2835f8facca806a4d4ecc2b2e97343de245a0d91716d998b2a829",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 0658c16e311393c8a347b1bd41fa5dbfd2e184aa75d84c011aa8dbac79b632e9",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c"
        ]
      }
    },
    {
      "candidate_hash": "c19b63c9a32f9de0830eb43f50c03aad3b351b51",
      "candidate_info": {
        "commit_hash": "c19b63c9a32f9de0830eb43f50c03aad3b351b51",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/c19b63c9a32f9de0830eb43f50c03aad3b351b51",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c"
        ],
        "message": "Improved header comment and precondition checking for the new isDupColumn() function.\n\nFossilOrigin-Name: 740d5ff6cc9bf7b151dfb8b27409e5923cfb2789b5398fe13d89563aff8ffc07",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: b34fa5bff40d3d364bd8c80e7de55c606ef3caac47b14b5265ebcb38857eb85e",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1741: }",
          "1755:   int i, j;",
          "1761:   for(i=0; i<nKey; i++){",
          "1765:     ){",
          "1766:       return 1;",
          "1767:     }",
          "",
          "[Removed Lines]",
          "1754: static int isDupColumn(Index *pIdx1, int nKey, Index *pIdx2, int iCol){",
          "1756:   assert( nKey<=pIdx1->nColumn );",
          "1757:   assert( iCol<MAX(pIdx2->nColumn,pIdx2->nKeyCol) );",
          "1758:   j = pIdx2->aiColumn[iCol];",
          "1759:   testcase( j==XN_EXPR );",
          "1760:   assert( j!=XN_ROWID );",
          "1762:     assert( pIdx1->aiColumn[i]>=0 || j>=0 );",
          "1763:     if( pIdx1->aiColumn[i]==j",
          "1764:      && sqlite3StrICmp(pIdx1->azColl[i],pIdx2->azColl[iCol])==0",
          "",
          "[Added Lines]",
          "1756: static int isDupColumn(Index *pIdx, int nKey, Index *pPk, int iCol){",
          "1758:   assert( nKey<=pIdx->nColumn );",
          "1759:   assert( iCol<MAX(pPk->nColumn,pPk->nKeyCol) );",
          "1760:   assert( pPk->idxType==SQLITE_IDXTYPE_PRIMARYKEY );",
          "1761:   assert( pPk->pTable->tabFlags & TF_WithoutRowid );",
          "1762:   assert( pPk->pTable==pIdx->pTable );",
          "1763:   testcase( pPk==pIdx );",
          "1764:   j = pPk->aiColumn[iCol];",
          "1765:   assert( j!=XN_ROWID && j!=XN_EXPR );",
          "1767:     assert( pIdx->aiColumn[i]>=0 || j>=0 );",
          "1768:     if( pIdx->aiColumn[i]==j",
          "1769:      && sqlite3StrICmp(pIdx->azColl[i], pPk->azColl[iCol])==0",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d493353e9991159a69540f9732df8ff6be2aa2d6",
      "candidate_info": {
        "commit_hash": "d493353e9991159a69540f9732df8ff6be2aa2d6",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/d493353e9991159a69540f9732df8ff6be2aa2d6",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/treeview.c"
        ],
        "message": "Enhance the TreeView logic to show information about Expr.op2 for FUNCTION and COLUMN nodes.\n\nFossilOrigin-Name: aceeaf9e28767a0880a16872867a1f57bff163acd0f10d19d5688068077590fa",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/treeview.c||src/treeview.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 2978b65ebe25eeabe543b67cb266308cceb20082a4ae71565d6d083d7c08bc9f",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/treeview.c||src/treeview.c": [
          "File: src/treeview.c -> src/treeview.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "423:     case TK_COLUMN: {",
          "424:       if( pExpr->iTable<0 ){",
          "427:       }else{",
          "428:         sqlite3TreeViewLine(pView, \"{%d:%d}%s\",",
          "429:                              pExpr->iTable, pExpr->iColumn, zFlgs);",
          "",
          "[Removed Lines]",
          "426:         sqlite3TreeViewLine(pView, \"COLUMN(%d)%s\", pExpr->iColumn, zFlgs);",
          "",
          "[Added Lines]",
          "426:         char zOp2[16];",
          "427:         if( pExpr->op2 ){",
          "428:           sqlite3_snprintf(sizeof(zOp2),zOp2,\" op2=0x%02x\",pExpr->op2);",
          "429:         }else{",
          "430:           zOp2[0] = 0;",
          "431:         }",
          "432:         sqlite3TreeViewLine(pView, \"COLUMN(%d)%s%s\",",
          "433:                                     pExpr->iColumn, zFlgs, zOp2);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "566:       if( pExpr->op==TK_AGG_FUNCTION ){",
          "567:         sqlite3TreeViewLine(pView, \"AGG_FUNCTION%d %Q%s\",",
          "568:                              pExpr->op2, pExpr->u.zToken, zFlgs);",
          "569:       }else{",
          "570:         sqlite3TreeViewLine(pView, \"FUNCTION %Q%s\", pExpr->u.zToken, zFlgs);",
          "571:       }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "576:       }else if( pExpr->op2!=0 ){",
          "577:         const char *zOp2;",
          "578:         char zBuf[8];",
          "579:         sqlite3_snprintf(sizeof(zBuf),zBuf,\"0x%02x\",pExpr->op2);",
          "580:         zOp2 = zBuf;",
          "581:         if( pExpr->op2==NC_IsCheck ) zOp2 = \"NC_IsCheck\";",
          "582:         if( pExpr->op2==NC_IdxExpr ) zOp2 = \"NC_IdxExpr\";",
          "583:         if( pExpr->op2==NC_PartIdx ) zOp2 = \"NC_PartIdx\";",
          "584:         if( pExpr->op2==NC_GenCol ) zOp2 = \"NC_GenCol\";",
          "585:         sqlite3TreeViewLine(pView, \"FUNCTION %Q%s op2=%s\",",
          "586:                             pExpr->u.zToken, zFlgs, zOp2);",
          "",
          "---------------"
        ]
      }
    }
  ]
}