{
  "cve_id": "CVE-2019-19923",
  "cve_desc": "flattenSubquery in select.c in SQLite 3.30.1 mishandles certain uses of SELECT DISTINCT involving a LEFT JOIN in which the right-hand side is a view. This can cause a NULL pointer dereference (or incorrect results).",
  "repo": "sqlite/sqlite",
  "patch_hash": "396afe6f6aa90a31303c183e11b2b2d4b7956b35",
  "patch_info": {
    "commit_hash": "396afe6f6aa90a31303c183e11b2b2d4b7956b35",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/396afe6f6aa90a31303c183e11b2b2d4b7956b35",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/join.test"
    ],
    "message": "Continue to back away from the LEFT JOIN optimization of check-in [41c27bc0ff1d3135] by disallowing query flattening if the outer query is DISTINCT.  Without this fix, if an index scan is run on the table within the view on the right-hand side of the LEFT JOIN, stale result registers might be accessed yielding incorrect results, and/or an OP_IfNullRow opcode might be invoked on the un-opened table, resulting in a NULL-pointer dereference.  This problem was found by the Yongheng and Rui fuzzer.\n\nFossilOrigin-Name: 862974312edf00e9d1068115d1a39b7235b7db68b6d86b81d38a12f025a4748e",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/join.test||test/join.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 289158aa24b066c453d2bce4bc2dead1c56fb0b23c3f7c4810b34b13627cef34",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3797:   if( (pSubitem->fg.jointype & JT_OUTER)!=0 ){",
      "3798:     isLeftJoin = 1;",
      "3801:       return 0;",
      "3802:     }",
      "3803:   }",
      "",
      "[Removed Lines]",
      "3799:     if( pSubSrc->nSrc>1 || isAgg || IsVirtual(pSubSrc->a[0].pTab) ){",
      "",
      "[Added Lines]",
      "3804:     ){",
      "",
      "---------------"
    ],
    "test/join.test||test/join.test": [
      "File: test/join.test -> test/join.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "975:   SELECT 24, * FROM t1 LEFT JOIN t0 ON +aa ISNULL;",
      "976: } {13 1 {} 14 1 {} 23 1 {} 24 1 {}}",
      "978: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "978: # 2019-12-18 problem with a LEFT JOIN where the RHS is a view.",
      "979: # Detected by Yongheng and Rui.",
      "980: # Follows from the optimization attempt of check-in 41c27bc0ff1d3135",
      "981: # on 2017-04-18",
      "982: #",
      "983: reset_db",
      "984: do_execsql_test join-22.10 {",
      "985:   CREATE TABLE t0(a, b);",
      "986:   CREATE INDEX t0a ON t0(a);",
      "987:   INSERT INTO t0 VALUES(10,10),(10,11),(10,12);",
      "988:   SELECT DISTINCT c FROM t0 LEFT JOIN (SELECT a+1 AS c FROM t0) ORDER BY c ;",
      "989: } {11}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "77318a3c3f22f34a3b88e2522f1be966bfb4073b",
      "candidate_info": {
        "commit_hash": "77318a3c3f22f34a3b88e2522f1be966bfb4073b",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/77318a3c3f22f34a3b88e2522f1be966bfb4073b",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/resolve.c"
        ],
        "message": "Factor out the conditional (which is only true for rare errors) from the notValid() function in resolve.c, for a performance improvement and size reduction.  Also cause failures to set the Expr node to a NULL operator so that it does not cause problems later in case PRAGMA writable_schema=ON has been set.  Test cases in TH3.\n\nFossilOrigin-Name: c6af9f655b73200ecc0c4189698e421af6ca584babdc76e73a36d468b2eea1f9",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/resolve.c||src/resolve.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 48ba5e5a2227257cebafacbb09e9dd91d9b89ab2d52a8b4e4113c1d017d95f41",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/resolve.c||src/resolve.c": [
          "File: src/resolve.c -> src/resolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "652: ){",
          "657: #ifndef SQLITE_OMIT_CHECK",
          "659: #endif",
          "660: #ifndef SQLITE_OMIT_GENERATED_COLUMNS",
          "662: #endif",
          "665: }",
          "",
          "[Removed Lines]",
          "647: static void notValid(",
          "653:   assert( (validMask&~(NC_IsCheck|NC_PartIdx|NC_IdxExpr|NC_GenCol))==0 );",
          "654:   if( (pNC->ncFlags & validMask)!=0 ){",
          "655:     const char *zIn = \"partial index WHERE clauses\";",
          "656:     if( pNC->ncFlags & NC_IdxExpr )      zIn = \"index expressions\";",
          "658:     else if( pNC->ncFlags & NC_IsCheck ) zIn = \"CHECK constraints\";",
          "661:     else if( pNC->ncFlags & NC_GenCol ) zIn = \"generated columns\";",
          "663:     sqlite3ErrorMsg(pParse, \"%s prohibited in %s\", zMsg, zIn);",
          "664:   }",
          "",
          "[Added Lines]",
          "659: static void notValidImpl(",
          "665:   const char *zIn = \"partial index WHERE clauses\";",
          "666:   if( pNC->ncFlags & NC_IdxExpr )      zIn = \"index expressions\";",
          "668:   else if( pNC->ncFlags & NC_IsCheck ) zIn = \"CHECK constraints\";",
          "671:   else if( pNC->ncFlags & NC_GenCol ) zIn = \"generated columns\";",
          "673:   sqlite3ErrorMsg(pParse, \"%s prohibited in %s\", zMsg, zIn);",
          "674:   if( pExpr ) pExpr->op = TK_NULL;",
          "676: #define sqlite3ResolveNotValid(P,N,M,X,E) \\",
          "677:   assert( ((X)&~(NC_IsCheck|NC_PartIdx|NC_IdxExpr|NC_GenCol))==0 ); \\",
          "678:   if( ((N)->ncFlags & (X))!=0 ) notValidImpl(P,N,M,E);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "751:         zColumn = pExpr->u.zToken;",
          "752:       }else{",
          "753:         Expr *pLeft = pExpr->pLeft;",
          "755:         pRight = pExpr->pRight;",
          "756:         if( pRight->op==TK_ID ){",
          "757:           zDb = 0;",
          "",
          "[Removed Lines]",
          "754:         notValid(pParse, pNC, \"the \\\".\\\" operator\", NC_IdxExpr|NC_GenCol);",
          "",
          "[Added Lines]",
          "767:         testcase( pNC->ncFlags & NC_IdxExpr );",
          "768:         testcase( pNC->ncFlags & NC_GenCol );",
          "769:         sqlite3ResolveNotValid(pParse, pNC, \"the \\\".\\\" operator\",",
          "770:                                NC_IdxExpr|NC_GenCol, 0);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "852:         }else{",
          "854:           pExpr->op2 = pNC->ncFlags & NC_SelfRef;",
          "",
          "[Removed Lines]",
          "851:           notValid(pParse, pNC, \"non-deterministic functions\", NC_SelfRef);",
          "",
          "[Added Lines]",
          "867:           sqlite3ResolveNotValid(pParse, pNC, \"non-deterministic functions\",",
          "868:                                  NC_SelfRef, 0);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "995:       testcase( pExpr->op==TK_IN );",
          "996:       if( ExprHasProperty(pExpr, EP_xIsSelect) ){",
          "997:         int nRef = pNC->nRef;",
          "1000:         sqlite3WalkSelect(pWalker, pExpr->x.pSelect);",
          "1001:         assert( pNC->nRef>=nRef );",
          "1002:         if( nRef!=pNC->nRef ){",
          "",
          "[Removed Lines]",
          "998:         notValid(pParse, pNC, \"subqueries\",",
          "999:                  NC_IsCheck|NC_PartIdx|NC_IdxExpr|NC_GenCol);",
          "",
          "[Added Lines]",
          "1015:         testcase( pNC->ncFlags & NC_IsCheck );",
          "1016:         testcase( pNC->ncFlags & NC_PartIdx );",
          "1017:         testcase( pNC->ncFlags & NC_IdxExpr );",
          "1018:         testcase( pNC->ncFlags & NC_GenCol );",
          "1019:         sqlite3ResolveNotValid(pParse, pNC, \"subqueries\",",
          "1020:                  NC_IsCheck|NC_PartIdx|NC_IdxExpr|NC_GenCol, pExpr);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1007:       break;",
          "1008:     }",
          "1009:     case TK_VARIABLE: {",
          "1012:       break;",
          "1013:     }",
          "1014:     case TK_IS:",
          "",
          "[Removed Lines]",
          "1010:       notValid(pParse, pNC, \"parameters\",",
          "1011:                NC_IsCheck|NC_PartIdx|NC_IdxExpr|NC_GenCol);",
          "",
          "[Added Lines]",
          "1031:       testcase( pNC->ncFlags & NC_IsCheck );",
          "1032:       testcase( pNC->ncFlags & NC_PartIdx );",
          "1033:       testcase( pNC->ncFlags & NC_IdxExpr );",
          "1034:       testcase( pNC->ncFlags & NC_GenCol );",
          "1035:       sqlite3ResolveNotValid(pParse, pNC, \"parameters\",",
          "1036:                NC_IsCheck|NC_PartIdx|NC_IdxExpr|NC_GenCol, pExpr);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7314495ff82c0ed4ac6f2776121282e3a8fe566a",
      "candidate_info": {
        "commit_hash": "7314495ff82c0ed4ac6f2776121282e3a8fe566a",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/7314495ff82c0ed4ac6f2776121282e3a8fe566a",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/insert.c",
          "src/wherecode.c",
          "test/affinity2.test"
        ],
        "message": "When the affinity of a table column is INT or REAL, make the affinity of corresponding index columns NUMERIC.  This increases the precision of index lookups for large numbers so that it matches the precision of ordinary comparison operators.  Ticket [40812aea1fde9594]\n\nFossilOrigin-Name: e0d909c740b774d8a46731696e33342be83206cc4a95d07f42fdb3d8cc2d7a8e",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/insert.c||src/insert.c",
          "src/wherecode.c||src/wherecode.c",
          "test/affinity2.test||test/affinity2.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 67381dadede98a55d8d9e085d021e6fa6473071978967b6302e03b28cf2245e1",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/insert.c||src/insert.c": [
          "File: src/insert.c -> src/insert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "99:         aff = sqlite3ExprAffinity(pIdx->aColExpr->a[n].pExpr);",
          "100:       }",
          "101:       if( aff<SQLITE_AFF_BLOB ) aff = SQLITE_AFF_BLOB;",
          "102:       pIdx->zColAff[n] = aff;",
          "103:     }",
          "104:     pIdx->zColAff[n] = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "102:       if( aff>SQLITE_AFF_NUMERIC) aff = SQLITE_AFF_NUMERIC;",
          "",
          "---------------"
        ],
        "src/wherecode.c||src/wherecode.c": [
          "File: src/wherecode.c -> src/wherecode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "755:         if( sqlite3ExprNeedsNoAffinityChange(pRight, zAff[j]) ){",
          "756:           zAff[j] = SQLITE_AFF_BLOB;",
          "757:         }",
          "758:       }",
          "759:     }",
          "760:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "758:         if( zAff[j]==SQLITE_AFF_REAL ) zAff[j] = SQLITE_AFF_NUMERIC;",
          "",
          "---------------"
        ],
        "test/affinity2.test||test/affinity2.test": [
          "File: test/affinity2.test -> test/affinity2.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "116:   SELECT * FROM t0 WHERE +-+'ce' >= t0.c0;",
          "117: } {-1 {}}",
          "120: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "119: # 2019-08-30 ticket https://www.sqlite.org/src/info/40812aea1fde9594",
          "120: #",
          "121: do_execsql_test 600 {",
          "122:   DROP TABLE IF EXISTS t0;",
          "123:   CREATE TABLE t0(c0 REAL UNIQUE);",
          "124:   INSERT INTO t0(c0) VALUES (3175546974276630385);",
          "125:   SELECT 3175546974276630385 < c0 FROM t0;",
          "126: } {1}",
          "127: do_execsql_test 601 {",
          "128:   SELECT 1 FROM t0 WHERE 3175546974276630385 < c0;",
          "129: } {1}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "62e009f3d89c837d83a366215332f0a0d04bfd04",
      "candidate_info": {
        "commit_hash": "62e009f3d89c837d83a366215332f0a0d04bfd04",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/62e009f3d89c837d83a366215332f0a0d04bfd04",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/fuzzdata8.db"
        ],
        "message": "New test cases in test/fuzzdata8.db.\n\nFossilOrigin-Name: ab2356f580384e4b40d128fc04fd6bc4dfcf50109df77d05d59adcc20f339066",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 177f5f40eabfcfd229ac7f291dfed9e9ee35762e86923a0f356915f389da177d",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "89d249364e4cdee732374cfdf2966b17bc3fe44a",
      "candidate_info": {
        "commit_hash": "89d249364e4cdee732374cfdf2966b17bc3fe44a",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/89d249364e4cdee732374cfdf2966b17bc3fe44a",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/tclsqlite.c",
          "test/tclsqlite.test"
        ],
        "message": "Add the \"-returntype\" option to the \"db function\" Tcl method.\n\nFossilOrigin-Name: 789a492b68c353e2b763d67d399722b7ab61bfe09b472466df2821f65cab1be9",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/tclsqlite.c||src/tclsqlite.c",
          "test/tclsqlite.test||test/tclsqlite.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 122330dba3eb2492875bd02a46442306f73e251408447af5e5914ee0c8d6a110",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/tclsqlite.c||src/tclsqlite.c": [
          "File: src/tclsqlite.c -> src/tclsqlite.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "995:     u8 *data;",
          "996:     const char *zType = (pVar->typePtr ? pVar->typePtr->name : \"\");",
          "997:     char c = zType[0];",
          "1018:     }",
          "1019:   }",
          "1020: }",
          "",
          "[Removed Lines]",
          "998:     if( c=='b' && strcmp(zType,\"bytearray\")==0 && pVar->bytes==0 ){",
          "1001:       data = Tcl_GetByteArrayFromObj(pVar, &n);",
          "1002:       sqlite3_result_blob(context, data, n, SQLITE_TRANSIENT);",
          "1003:     }else if( c=='b' && strcmp(zType,\"boolean\")==0 ){",
          "1004:       Tcl_GetIntFromObj(0, pVar, &n);",
          "1005:       sqlite3_result_int(context, n);",
          "1006:     }else if( c=='d' && strcmp(zType,\"double\")==0 ){",
          "1007:       double r;",
          "1008:       Tcl_GetDoubleFromObj(0, pVar, &r);",
          "1009:       sqlite3_result_double(context, r);",
          "1010:     }else if( (c=='w' && strcmp(zType,\"wideInt\")==0) ||",
          "1011:           (c=='i' && strcmp(zType,\"int\")==0) ){",
          "1012:       Tcl_WideInt v;",
          "1013:       Tcl_GetWideIntFromObj(0, pVar, &v);",
          "1014:       sqlite3_result_int64(context, v);",
          "1015:     }else{",
          "1016:       data = (unsigned char *)Tcl_GetStringFromObj(pVar, &n);",
          "1017:       sqlite3_result_text(context, (char *)data, n, SQLITE_TRANSIENT);",
          "",
          "[Added Lines]",
          "1007:     int eType = p->eType;",
          "1009:     if( eType==SQLITE_NULL ){",
          "1010:       if( c=='b' && strcmp(zType,\"bytearray\")==0 && pVar->bytes==0 ){",
          "1013:         eType = SQLITE_BLOB;",
          "1014:       }else if( (c=='b' && strcmp(zType,\"boolean\")==0)",
          "1015:              || (c=='w' && strcmp(zType,\"wideInt\")==0)",
          "1016:              || (c=='i' && strcmp(zType,\"int\")==0)",
          "1017:       ){",
          "1018:         eType = SQLITE_INTEGER;",
          "1019:       }else if( c=='d' && strcmp(zType,\"double\")==0 ){",
          "1020:         eType = SQLITE_FLOAT;",
          "1021:       }else{",
          "1022:         eType = SQLITE_TEXT;",
          "1023:       }",
          "1024:     }",
          "1026:     switch( eType ){",
          "1027:       case SQLITE_BLOB: {",
          "1028:         data = Tcl_GetByteArrayFromObj(pVar, &n);",
          "1029:         sqlite3_result_blob(context, data, n, SQLITE_TRANSIENT);",
          "1030:         break;",
          "1031:       }",
          "1032:       case SQLITE_INTEGER: {",
          "1033:         Tcl_WideInt v;",
          "1034:         if( TCL_OK==Tcl_GetWideIntFromObj(0, pVar, &v) ){",
          "1035:           sqlite3_result_int64(context, v);",
          "1036:           break;",
          "1037:         }",
          "1039:       }",
          "1040:       case SQLITE_FLOAT: {",
          "1041:         double r;",
          "1042:         if( TCL_OK==Tcl_GetDoubleFromObj(0, pVar, &r) ){",
          "1043:           sqlite3_result_double(context, r);",
          "1044:           break;",
          "1045:         }",
          "1047:       }",
          "1048:       default: {",
          "1049:         data = (unsigned char *)Tcl_GetStringFromObj(pVar, &n);",
          "1050:         sqlite3_result_text(context, (char *)data, n, SQLITE_TRANSIENT);",
          "1051:         break;",
          "1052:       }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2646:     char *zName;",
          "2647:     int nArg = -1;",
          "2648:     int i;",
          "2649:     if( objc<4 ){",
          "2650:       Tcl_WrongNumArgs(interp, 2, objv, \"NAME ?SWITCHES? SCRIPT\");",
          "2651:       return TCL_ERROR;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2685:     int eType = SQLITE_NULL;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2653:     for(i=3; i<(objc-1); i++){",
          "2654:       const char *z = Tcl_GetString(objv[i]);",
          "2655:       int n = strlen30(z);",
          "2657:         if( i==(objc-2) ){",
          "2658:           Tcl_AppendResult(interp, \"option requires an argument: \", z,(char*)0);",
          "2659:           return TCL_ERROR;",
          "",
          "[Removed Lines]",
          "2656:       if( n>2 && strncmp(z, \"-argcount\",n)==0 ){",
          "",
          "[Added Lines]",
          "2693:       if( n>1 && strncmp(z, \"-argcount\",n)==0 ){",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2666:         }",
          "2667:         i++;",
          "2668:       }else",
          "2670:         flags |= SQLITE_DETERMINISTIC;",
          "2671:       }else{",
          "2672:         Tcl_AppendResult(interp, \"bad option \\\"\", z,",
          "2674:         );",
          "2675:         return TCL_ERROR;",
          "2676:       }",
          "",
          "[Removed Lines]",
          "2669:       if( n>2 && strncmp(z, \"-deterministic\",n)==0 ){",
          "2673:             \"\\\": must be -argcount or -deterministic\", (char*)0",
          "",
          "[Added Lines]",
          "2706:       if( n>1 && strncmp(z, \"-deterministic\",n)==0 ){",
          "2708:       }else",
          "2709:       if( n>1 && strncmp(z, \"-returntype\", n)==0 ){",
          "2710:         const char *azType[] = {\"integer\", \"real\", \"text\", \"blob\", \"any\", 0};",
          "2711:         assert( SQLITE_INTEGER==1 && SQLITE_FLOAT==2 && SQLITE_TEXT==3 );",
          "2712:         assert( SQLITE_BLOB==4 && SQLITE_NULL==5 );",
          "2713:         if( i==(objc-2) ){",
          "2714:           Tcl_AppendResult(interp, \"option requires an argument: \", z,(char*)0);",
          "2715:           return TCL_ERROR;",
          "2716:         }",
          "2717:         i++;",
          "2718:         if( Tcl_GetIndexFromObj(interp, objv[i], azType, \"type\", 0, &eType) ){",
          "2719:           return TCL_ERROR;",
          "2720:         }",
          "2721:         eType++;",
          "2724:             \"\\\": must be -argcount, -deterministic or -returntype\", (char*)0",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2686:     pFunc->pScript = pScript;",
          "2687:     Tcl_IncrRefCount(pScript);",
          "2688:     pFunc->useEvalObjv = safeToUseEvalObjv(interp, pScript);",
          "2689:     rc = sqlite3_create_function(pDb->db, zName, nArg, flags,",
          "2690:         pFunc, tclSqlFunc, 0, 0);",
          "2691:     if( rc!=SQLITE_OK ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2740:     pFunc->eType = eType;",
          "",
          "---------------"
        ],
        "test/tclsqlite.test||test/tclsqlite.test": [
          "File: test/tclsqlite.test -> test/tclsqlite.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: set testdir [file dirname $argv0]",
          "23: source $testdir/tester.tcl",
          "25: # Check the error messages generated by tclsqlite",
          "26: #",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24: set testprefix tcl",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "711:   set res",
          "712: } {1 {a b *} 2 {a *} 3 {a b *}}",
          "718: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "715: #-------------------------------------------------------------------------",
          "716: # Test the -type option to [db function].",
          "717: #",
          "718: reset_db",
          "719: proc add {a b} { return [expr $a + $b] }",
          "720: proc ret {a} { return $a }",
          "722: db function add_i -returntype integer add",
          "723: db function add_r -ret        real    add",
          "724: db function add_t -return     text    add",
          "725: db function add_b -returntype blob    add",
          "726: db function add_a -returntype any     add",
          "728: db function ret_i -returntype int     ret",
          "729: db function ret_r -returntype real    ret",
          "730: db function ret_t -returntype text    ret",
          "731: db function ret_b -returntype blob    ret",
          "732: db function ret_a -r          any     ret",
          "734: do_execsql_test 17.0 {",
          "735:   SELECT quote( add_i(2, 3) );",
          "736:   SELECT quote( add_r(2, 3) );",
          "737:   SELECT quote( add_t(2, 3) );",
          "738:   SELECT quote( add_b(2, 3) );",
          "739:   SELECT quote( add_a(2, 3) );",
          "740: } {5 5.0 '5' X'35' 5}",
          "742: do_execsql_test 17.1 {",
          "743:   SELECT quote( add_i(2.2, 3.3) );",
          "744:   SELECT quote( add_r(2.2, 3.3) );",
          "745:   SELECT quote( add_t(2.2, 3.3) );",
          "746:   SELECT quote( add_b(2.2, 3.3) );",
          "747:   SELECT quote( add_a(2.2, 3.3) );",
          "748: } {5.5 5.5 '5.5' X'352E35' 5.5}",
          "750: do_execsql_test 17.2 {",
          "751:   SELECT quote( ret_i(2.5) );",
          "752:   SELECT quote( ret_r(2.5) );",
          "753:   SELECT quote( ret_t(2.5) );",
          "754:   SELECT quote( ret_b(2.5) );",
          "755:   SELECT quote( ret_a(2.5) );",
          "756: } {2.5 2.5 '2.5' X'322E35' 2.5}",
          "758: do_execsql_test 17.3 {",
          "759:   SELECT quote( ret_i('2.5') );",
          "760:   SELECT quote( ret_r('2.5') );",
          "761:   SELECT quote( ret_t('2.5') );",
          "762:   SELECT quote( ret_b('2.5') );",
          "763:   SELECT quote( ret_a('2.5') );",
          "764: } {2.5 2.5 '2.5' X'322E35' '2.5'}",
          "766: do_execsql_test 17.4 {",
          "767:   SELECT quote( ret_i('abc') );",
          "768:   SELECT quote( ret_r('abc') );",
          "769:   SELECT quote( ret_t('abc') );",
          "770:   SELECT quote( ret_b('abc') );",
          "771:   SELECT quote( ret_a('abc') );",
          "772: } {'abc' 'abc' 'abc' X'616263' 'abc'}",
          "774: do_execsql_test 17.5 {",
          "775:   SELECT quote( ret_i(X'616263') );",
          "776:   SELECT quote( ret_r(X'616263') );",
          "777:   SELECT quote( ret_t(X'616263') );",
          "778:   SELECT quote( ret_b(X'616263') );",
          "779:   SELECT quote( ret_a(X'616263') );",
          "780: } {'abc' 'abc' 'abc' X'616263' X'616263'}",
          "782: do_test 17.6.1 {",
          "783:   list [catch { db function xyz -return object ret } msg] $msg",
          "784: } {1 {bad type \"object\": must be integer, real, text, blob, or any}}",
          "786: do_test 17.6.2 {",
          "787:   list [catch { db function xyz -return ret } msg] $msg",
          "788: } {1 {option requires an argument: -return}}",
          "790: do_test 17.6.3 {",
          "791:   list [catch { db function xyz -n object ret } msg] $msg",
          "792: } {1 {bad option \"-n\": must be -argcount, -deterministic or -returntype}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "10cc16c95418f3c178637026fbc9206a063ec841",
      "candidate_info": {
        "commit_hash": "10cc16c95418f3c178637026fbc9206a063ec841",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/10cc16c95418f3c178637026fbc9206a063ec841",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/select.c"
        ],
        "message": "Fix a minor comment typo.  No code changes.\n\nFossilOrigin-Name: 9a0a93c89d3fdd0f9000a9226388e2e53f299165e043913f40b83bf597bfea04",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/select.c||src/select.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/select.c||src/select.c"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/select.c||src/select.c"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 9b2879629c34fc0a8e99d94648903eb93aabbc7a3682c80cb7382f9a9ca5ffb7",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c"
        ]
      }
    }
  ]
}