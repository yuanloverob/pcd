{
  "cve_id": "CVE-2015-0278",
  "cve_desc": "libuv before 0.10.34 does not properly drop group privileges, which allows context-dependent attackers to gain privileges via unspecified vectors.",
  "repo": "libuv/libuv",
  "patch_hash": "66ab38918c911bcff025562cf06237d7fedaba0c",
  "patch_info": {
    "commit_hash": "66ab38918c911bcff025562cf06237d7fedaba0c",
    "repo": "libuv/libuv",
    "commit_url": "https://github.com/libuv/libuv/commit/66ab38918c911bcff025562cf06237d7fedaba0c",
    "files": [
      "src/unix/process.c"
    ],
    "message": "unix: call setgoups before calling setuid/setgid\n\nPartial fix for #1093",
    "before_after_code_files": [
      "src/unix/process.c||src/unix/process.c"
    ]
  },
  "patch_diff": {
    "src/unix/process.c||src/unix/process.c": [
      "File: src/unix/process.c -> src/unix/process.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "330:     _exit(127);",
      "331:   }",
      "333:   if ((options->flags & UV_PROCESS_SETGID) && setgid(options->gid)) {",
      "334:     uv__write_int(error_fd, -errno);",
      "335:     perror(\"setgid()\");",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "333:   if (options->flags & (UV_PROCESS_SETUID | UV_PROCESS_SETGID)) {",
      "341:     SAVE_ERRNO(setgroups(0, NULL));",
      "342:   }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "cd6e74dd801065a5497b7cf3341b61a444fac915",
      "candidate_info": {
        "commit_hash": "cd6e74dd801065a5497b7cf3341b61a444fac915",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/cd6e74dd801065a5497b7cf3341b61a444fac915",
        "files": [
          "test/echo-server.c",
          "test/test-getaddrinfo.c",
          "test/test-ping-pong.c",
          "test/test-spawn.c",
          "test/test-threadpool-cancel.c"
        ],
        "message": "test: fix compilation warnings with VC++\n\nC6011 and C4244",
        "before_after_code_files": [
          "test/echo-server.c||test/echo-server.c",
          "test/test-getaddrinfo.c||test/test-getaddrinfo.c",
          "test/test-ping-pong.c||test/test-ping-pong.c",
          "test/test-spawn.c||test/test-spawn.c",
          "test/test-threadpool-cancel.c||test/test-threadpool-cancel.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/echo-server.c||test/echo-server.c": [
          "File: test/echo-server.c -> test/echo-server.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "119:   }",
          "121:   wr = (write_req_t*) malloc(sizeof *wr);",
          "123:   wr->buf = uv_buf_init(buf->base, nread);",
          "124:   if (uv_write(&wr->req, handle, &wr->buf, 1, after_write)) {",
          "125:     FATAL(\"uv_write failed\");",
          "126:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "122:   ASSERT(wr != NULL);",
          "",
          "---------------"
        ],
        "test/test-getaddrinfo.c||test/test-getaddrinfo.c": [
          "File: test/test-getaddrinfo.c -> test/test-getaddrinfo.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "126:     callback_counts[i] = 0;",
          "128:     data = (int*)malloc(sizeof(int));",
          "130:     getaddrinfo_handles[i].data = data;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "129:     ASSERT(data != NULL);",
          "",
          "---------------"
        ],
        "test/test-ping-pong.c||test/test-ping-pong.c": [
          "File: test/test-ping-pong.c -> test/test-ping-pong.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "155:   struct sockaddr_in6 server_addr;",
          "156:   pinger_t *pinger;",
          "158:   ASSERT(0 ==uv_ip6_addr(\"::1\", TEST_PORT, &server_addr));",
          "159:   pinger = malloc(sizeof(*pinger));",
          "160:   pinger->state = 0;",
          "161:   pinger->pongs = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "161:   ASSERT(pinger != NULL);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "186:   ASSERT(0 == uv_ip4_addr(\"127.0.0.1\", TEST_PORT, &server_addr));",
          "187:   pinger = malloc(sizeof(*pinger));",
          "188:   pinger->state = 0;",
          "189:   pinger->pongs = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "190:   ASSERT(pinger != NULL);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "211:   pinger_t *pinger;",
          "213:   pinger = (pinger_t*)malloc(sizeof(*pinger));",
          "214:   pinger->state = 0;",
          "215:   pinger->pongs = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "217:   ASSERT(pinger != NULL);",
          "",
          "---------------"
        ],
        "test/test-spawn.c||test/test-spawn.c": [
          "File: test/test-spawn.c -> test/test-spawn.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "837:   WCHAR* non_verbatim_output;",
          "839:   test_output = calloc(count, sizeof(WCHAR*));",
          "840:   for (i = 0; i < count; ++i) {",
          "841:     test_output[i] = calloc(2 * (wcslen(test_str[i]) + 2), sizeof(WCHAR));",
          "842:     quote_cmd_arg(test_str[i], test_output[i]);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "840:   ASSERT(test_output != NULL);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "845:     total_size += wcslen(test_output[i]) + 1;",
          "846:   }",
          "847:   command_line = calloc(total_size + 1, sizeof(WCHAR));",
          "848:   for (i = 0; i < count; ++i) {",
          "849:     wcscat(command_line, test_output[i]);",
          "850:     wcscat(command_line, L\" \");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "849:   ASSERT(command_line != NULL);",
          "",
          "---------------"
        ],
        "test/test-threadpool-cancel.c||test/test-threadpool-cancel.c": [
          "File: test/test-threadpool-cancel.c -> test/test-threadpool-cancel.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "90:       ASSERT(0 == uv_cancel((uv_req_t*) req));",
          "91:       break;",
          "92:     }",
          "",
          "[Removed Lines]",
          "89:     if (uv_cond_timedwait(&signal_cond, &signal_mutex, (uint64_t)(350 * 1e6))) {",
          "",
          "[Added Lines]",
          "89:     if (uv_cond_timedwait(&signal_cond,",
          "90:                           &signal_mutex,",
          "91:                           (uint64_t) (350 * 1e6))) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b7d333fc91588f46884297543794d1b5e1515222",
      "candidate_info": {
        "commit_hash": "b7d333fc91588f46884297543794d1b5e1515222",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/b7d333fc91588f46884297543794d1b5e1515222",
        "files": [
          "include/uv.h"
        ],
        "message": "include: clean up includes in uv.h\n\n* size_t is defined in <stddef.h>, not <sys/types.h>\n\n* Simplify the platform check.",
        "before_after_code_files": [
          "include/uv.h||include/uv.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/uv.h||include/uv.h": [
          "File: include/uv.h -> include/uv.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "46: #endif",
          "48: #include \"uv-errno.h\"",
          "50: #if defined(_MSC_VER) && _MSC_VER < 1600",
          "51: # include \"stdint-msvc2008.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "49: #include <stddef.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "53: # include <stdint.h>",
          "54: #endif",
          "66: # include \"uv-win.h\"",
          "67: #endif",
          "",
          "[Removed Lines]",
          "58: #if defined(__SVR4) && !defined(__unix__)",
          "59: # define __unix__",
          "60: #endif",
          "62: #if defined(__unix__) || defined(__POSIX__) || \\",
          "63:     defined(__APPLE__) || defined(_AIX)",
          "64: # include \"uv-unix.h\"",
          "65: #else",
          "",
          "[Added Lines]",
          "57: #if defined(_WIN32)",
          "59: #else",
          "60: # include \"uv-unix.h\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6f62d62c905c2335232ec8e5697036426bd171d4",
      "candidate_info": {
        "commit_hash": "6f62d62c905c2335232ec8e5697036426bd171d4",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/6f62d62c905c2335232ec8e5697036426bd171d4",
        "files": [
          "src/win/process.c"
        ],
        "message": "windows: always initialize uv_process_t\n\nThe unix implementation of uv_spawn always starts out with a\nuv__handle_init, but the windows implementation sometimes bails out\nearly before calling uv__handle_init. This means that uv_close on a\nfailed uv_spawn will always succeed on unix but sometimes fail on\nwindows.\n\nThis commit lifts the initialization of the uv_process_t above all of\nthe error checking to ensure that uv_close will always work when\nuv_spawn returns an error.",
        "before_after_code_files": [
          "src/win/process.c||src/win/process.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/win/process.c||src/win/process.c": [
          "File: src/win/process.c -> src/win/process.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "811:   PROCESS_INFORMATION info;",
          "812:   DWORD process_flags;",
          "814:   if (options->flags & (UV_PROCESS_SETGID | UV_PROCESS_SETUID)) {",
          "815:     return UV_ENOTSUP;",
          "816:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "814:   uv_process_init(loop, process);",
          "815:   process->exit_cb = options->exit_cb;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "827:                               UV_PROCESS_WINDOWS_HIDE |",
          "828:                               UV_PROCESS_WINDOWS_VERBATIM_ARGUMENTS)));",
          "833:   err = uv_utf8_to_utf16_alloc(options->file, &application);",
          "834:   if (err)",
          "835:     goto done;",
          "",
          "[Removed Lines]",
          "830:   uv_process_init(loop, process);",
          "831:   process->exit_cb = options->exit_cb;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5ac214c712b99a94bc0e37e6544a53b7329d3ab1",
      "candidate_info": {
        "commit_hash": "5ac214c712b99a94bc0e37e6544a53b7329d3ab1",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/5ac214c712b99a94bc0e37e6544a53b7329d3ab1",
        "files": [
          "Makefile.am",
          "include/uv.h",
          "src/unix/pipe.c",
          "src/win/pipe.c",
          "test/task.h",
          "test/test-list.h",
          "test/test-pipe-getsockname.c",
          "uv.gyp"
        ],
        "message": "unix, windows: add uv_pipe_getsockname",
        "before_after_code_files": [
          "Makefile.am||Makefile.am",
          "include/uv.h||include/uv.h",
          "src/unix/pipe.c||src/unix/pipe.c",
          "src/win/pipe.c||src/win/pipe.c",
          "test/task.h||test/task.h",
          "test/test-list.h||test/test-list.h",
          "test/test-pipe-getsockname.c||test/test-pipe-getsockname.c",
          "uv.gyp||uv.gyp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Makefile.am||Makefile.am": [
          "File: Makefile.am -> Makefile.am",
          "--- Hunk 1 ---",
          "[Context before]",
          "157:                          test/test-ping-pong.c \\",
          "158:                          test/test-pipe-bind-error.c \\",
          "159:                          test/test-pipe-connect-error.c \\",
          "160:                          test/test-pipe-server-close.c \\",
          "161:                          test/test-platform-output.c \\",
          "162:                          test/test-poll-close.c \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "160:                          test/test-pipe-getsockname.c \\",
          "",
          "---------------"
        ],
        "include/uv.h||include/uv.h": [
          "File: include/uv.h -> include/uv.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1195:                                const char* name,",
          "1196:                                uv_connect_cb cb);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1205: UV_EXTERN int uv_pipe_getsockname(const uv_pipe_t* handle, char* buf, size_t* len);",
          "",
          "---------------"
        ],
        "src/unix/pipe.c||src/unix/pipe.c": [
          "File: src/unix/pipe.c -> src/unix/pipe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "212: }",
          "215: void uv_pipe_pending_instances(uv_pipe_t* handle, int count) {",
          "216: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "215: int uv_pipe_getsockname(const uv_pipe_t* handle, char* buf, size_t* len) {",
          "216:   struct sockaddr_un sa;",
          "217:   socklen_t addrlen;",
          "218:   int err;",
          "220:   addrlen = sizeof(sa);",
          "221:   memset(&sa, 0, addrlen);",
          "222:   err = getsockname(uv__stream_fd(handle), (struct sockaddr*) &sa, &addrlen);",
          "223:   if (err < 0) {",
          "225:     return -errno;",
          "226:   }",
          "228:   if (sa.sun_path[0] == 0)",
          "230:     addrlen -= offsetof(struct sockaddr_un, sun_path);",
          "231:   else",
          "232:     addrlen = strlen(sa.sun_path) + 1;",
          "235:   if (addrlen > *len) {",
          "237:     return UV_ENOBUFS;",
          "238:   }",
          "240:   memcpy(buf, sa.sun_path, addrlen);",
          "243:   return 0;",
          "244: }",
          "",
          "---------------"
        ],
        "src/win/pipe.c||src/win/pipe.c": [
          "File: src/win/pipe.c -> src/win/pipe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "45: static const int default_pending_pipe_instances = 4;",
          "48: #define UV_IPC_RAW_DATA       0x0001",
          "49: #define UV_IPC_TCP_SERVER     0x0002",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "48: static char pipe_prefix[] = \"\\\\\\\\?\\\\pipe\";",
          "49: static const int pipe_prefix_len = sizeof(pipe_prefix) - 1;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "72: static void uv_unique_pipe_name(char* ptr, char* name, size_t size) {",
          "74: }",
          "",
          "[Removed Lines]",
          "73:   _snprintf(name, size, \"\\\\\\\\.\\\\pipe\\\\uv\\\\%p-%u\", ptr, GetCurrentProcessId());",
          "",
          "[Added Lines]",
          "77:   _snprintf(name, size, \"\\\\\\\\?\\\\pipe\\\\uv\\\\%p-%u\", ptr, GetCurrentProcessId());",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "433:   }",
          "435:   if (!uv_utf8_to_utf16(name, handle->name, nameSize / sizeof(WCHAR))) {",
          "437:   }",
          "",
          "[Removed Lines]",
          "436:     return uv_translate_sys_error(GetLastError());",
          "",
          "[Added Lines]",
          "440:     err = GetLastError();",
          "441:     goto error;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1746:   }",
          "1747:   return 0;",
          "1748: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1756: int uv_pipe_getsockname(const uv_pipe_t* handle, char* buf, size_t* len) {",
          "1757:   NTSTATUS nt_status;",
          "1758:   IO_STATUS_BLOCK io_status;",
          "1759:   FILE_NAME_INFORMATION tmp_name_info;",
          "1760:   FILE_NAME_INFORMATION* name_info;",
          "1761:   WCHAR* name_buf;",
          "1762:   unsigned int addrlen;",
          "1763:   unsigned int name_size;",
          "1764:   unsigned int name_len;",
          "1765:   int err;",
          "1767:   name_info = NULL;",
          "1769:   if (handle->handle == INVALID_HANDLE_VALUE) {",
          "1771:     return UV_EINVAL;",
          "1772:   }",
          "1774:   nt_status = pNtQueryInformationFile(handle->handle,",
          "1775:                                       &io_status,",
          "1776:                                       &tmp_name_info,",
          "1777:                                       sizeof tmp_name_info,",
          "1778:                                       FileNameInformation);",
          "1779:   if (nt_status == STATUS_BUFFER_OVERFLOW) {",
          "1780:     name_size = sizeof(*name_info) + tmp_name_info.FileNameLength;",
          "1781:     name_info = malloc(name_size);",
          "1782:     if (!name_info)",
          "1783:       uv_fatal_error(ERROR_OUTOFMEMORY, \"malloc\");",
          "1785:     nt_status = pNtQueryInformationFile(handle->handle,",
          "1786:                                         &io_status,",
          "1787:                                         name_info,",
          "1788:                                         name_size,",
          "1789:                                         FileNameInformation);",
          "1790:   }",
          "1792:   if (nt_status != STATUS_SUCCESS) {",
          "1793:     err = uv_translate_sys_error(pRtlNtStatusToDosError(nt_status));",
          "1794:     goto error;",
          "1795:   }",
          "1797:   if (!name_info) {",
          "1799:     name_buf = tmp_name_info.FileName;",
          "1800:     name_len = tmp_name_info.FileNameLength;",
          "1801:   } else {",
          "1802:     name_buf = name_info->FileName;",
          "1803:     name_len = name_info->FileNameLength;",
          "1804:   }",
          "1806:   if (name_len == 0) {",
          "1807:     err = 0;",
          "1808:     goto error;",
          "1809:   }",
          "1811:   name_len /= sizeof(WCHAR);",
          "1814:   addrlen = WideCharToMultiByte(CP_UTF8,",
          "1815:                                 0,",
          "1816:                                 name_buf,",
          "1817:                                 name_len,",
          "1818:                                 NULL,",
          "1819:                                 0,",
          "1820:                                 NULL,",
          "1821:                                 NULL);",
          "1822:   if (!addrlen) {",
          "1823:     err = uv_translate_sys_error(GetLastError());",
          "1824:     goto error;",
          "1825:   } else if (pipe_prefix_len + addrlen + 1 > *len) {",
          "1827:     err = UV_ENOBUFS;",
          "1828:     goto error;",
          "1829:   }",
          "1831:   memcpy(buf, pipe_prefix, pipe_prefix_len);",
          "1832:   addrlen = WideCharToMultiByte(CP_UTF8,",
          "1833:                                 0,",
          "1834:                                 name_buf,",
          "1835:                                 name_len,",
          "1836:                                 buf+pipe_prefix_len,",
          "1838:                                 NULL,",
          "1839:                                 NULL);",
          "1840:   if (!addrlen) {",
          "1841:     err = uv_translate_sys_error(GetLastError());",
          "1842:     goto error;",
          "1843:   }",
          "1845:   addrlen += pipe_prefix_len;",
          "1846:   buf[addrlen++] = '\\0';",
          "1849:   return 0;",
          "1851: error:",
          "1852:   free(name_info);",
          "1854:   return err;",
          "1855: }",
          "",
          "---------------"
        ],
        "test/task.h||test/task.h": [
          "File: test/task.h -> test/task.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "41: #define TEST_PORT_2 9124",
          "43: #ifdef _WIN32",
          "46: #else",
          "47: # define TEST_PIPENAME \"/tmp/uv-test-sock\"",
          "48: # define TEST_PIPENAME_2 \"/tmp/uv-test-sock2\"",
          "",
          "[Removed Lines]",
          "44: # define TEST_PIPENAME \"\\\\\\\\.\\\\pipe\\\\uv-test\"",
          "45: # define TEST_PIPENAME_2 \"\\\\\\\\.\\\\pipe\\\\uv-test2\"",
          "",
          "[Added Lines]",
          "44: # define TEST_PIPENAME \"\\\\\\\\?\\\\pipe\\\\uv-test\"",
          "45: # define TEST_PIPENAME_2 \"\\\\\\\\?\\\\pipe\\\\uv-test2\"",
          "",
          "---------------"
        ],
        "test/test-list.h||test/test-list.h": [
          "File: test/test-list.h -> test/test-list.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "94: TEST_DECLARE   (pipe_listen_without_bind)",
          "95: TEST_DECLARE   (pipe_connect_bad_name)",
          "96: TEST_DECLARE   (pipe_connect_to_file)",
          "97: TEST_DECLARE   (pipe_server_close)",
          "98: TEST_DECLARE   (connection_fail)",
          "99: TEST_DECLARE   (connection_fail_doesnt_auto_close)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "97: TEST_DECLARE   (pipe_getsockname)",
          "98: TEST_DECLARE   (pipe_getsockname_abstract)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "355:   TEST_ENTRY  (pipe_bind_error_addrnotavail)",
          "356:   TEST_ENTRY  (pipe_bind_error_inval)",
          "357:   TEST_ENTRY  (pipe_listen_without_bind)",
          "359:   TEST_ENTRY  (connection_fail)",
          "360:   TEST_ENTRY  (connection_fail_doesnt_auto_close)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "360:   TEST_ENTRY  (pipe_getsockname)",
          "361:   TEST_ENTRY  (pipe_getsockname_abstract)",
          "",
          "---------------"
        ],
        "test/test-pipe-getsockname.c||test/test-pipe-getsockname.c": [
          "File: test/test-pipe-getsockname.c -> test/test-pipe-getsockname.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: #include \"uv.h\"",
          "23: #include \"task.h\"",
          "24: #include <stdio.h>",
          "25: #include <stdlib.h>",
          "26: #include <string.h>",
          "28: #if defined(__linux__)",
          "29:   #include <sys/socket.h>",
          "30:   #include <sys/un.h>",
          "31: #endif",
          "34: static int close_cb_called = 0;",
          "35: static char abstract_pipe[] = \"\\0test-pipe\";",
          "38: static void close_cb(uv_handle_t* handle) {",
          "39:   ASSERT(handle != NULL);",
          "40:   close_cb_called++;",
          "41: }",
          "44: TEST_IMPL(pipe_getsockname) {",
          "45:   uv_pipe_t server;",
          "46:   char buf[1024];",
          "47:   size_t len;",
          "48:   int r;",
          "50:   r = uv_pipe_init(uv_default_loop(), &server, 0);",
          "51:   ASSERT(r == 0);",
          "52:   r = uv_pipe_bind(&server, TEST_PIPENAME);",
          "53:   ASSERT(r == 0);",
          "55:   len = sizeof buf;",
          "56:   r = uv_pipe_getsockname(&server, buf, &len);",
          "57:   ASSERT(r == 0);",
          "59:   ASSERT(memcmp(buf, TEST_PIPENAME, len) == 0);",
          "61:   uv_close((uv_handle_t*)&server, close_cb);",
          "63:   uv_run(uv_default_loop(), UV_RUN_DEFAULT);",
          "65:   ASSERT(close_cb_called == 1);",
          "67:   MAKE_VALGRIND_HAPPY();",
          "68:   return 0;",
          "69: }",
          "72: TEST_IMPL(pipe_getsockname_abstract) {",
          "73: #if defined(__linux__)",
          "74:   uv_pipe_t server;",
          "75:   char buf[1024];",
          "76:   size_t len;",
          "77:   int r;",
          "78:   int sock;",
          "79:   struct sockaddr_un sun;",
          "80:   socklen_t sun_len;",
          "82:   sock = socket(AF_LOCAL, SOCK_STREAM, 0);",
          "83:   ASSERT(sock != -1);",
          "85:   sun_len = sizeof sun;",
          "86:   memset(&sun, 0, sun_len);",
          "87:   sun.sun_family = AF_UNIX;",
          "88:   memcpy(sun.sun_path, abstract_pipe, sizeof abstract_pipe);",
          "90:   r = bind(sock, (struct sockaddr*)&sun, sun_len);",
          "91:   ASSERT(r == 0);",
          "93:   r = uv_pipe_init(uv_default_loop(), &server, 0);",
          "94:   ASSERT(r == 0);",
          "95:   r = uv_pipe_open(&server, sock);",
          "96:   ASSERT(r == 0);",
          "98:   len = sizeof buf;",
          "99:   r = uv_pipe_getsockname(&server, buf, &len);",
          "100:   ASSERT(r == 0);",
          "102:   ASSERT(memcmp(buf, abstract_pipe, sizeof abstract_pipe) == 0);",
          "104:   uv_close((uv_handle_t*)&server, close_cb);",
          "106:   uv_run(uv_default_loop(), UV_RUN_DEFAULT);",
          "108:   close(sock);",
          "110:   ASSERT(close_cb_called == 1);",
          "111:   MAKE_VALGRIND_HAPPY();",
          "112:   return 0;",
          "113: #else",
          "114:   MAKE_VALGRIND_HAPPY();",
          "115:   return 0;",
          "116: #endif",
          "117: }",
          "",
          "---------------"
        ],
        "uv.gyp||uv.gyp": [
          "File: uv.gyp -> uv.gyp",
          "--- Hunk 1 ---",
          "[Context before]",
          "337:         'test/test-ping-pong.c',",
          "338:         'test/test-pipe-bind-error.c',",
          "339:         'test/test-pipe-connect-error.c',",
          "340:         'test/test-pipe-server-close.c',",
          "341:         'test/test-platform-output.c',",
          "342:         'test/test-poll.c',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "340:         'test/test-pipe-getsockname.c',",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8010bf9dd2a649bbe1e65b59e7bbd0e6bedd80ba",
      "candidate_info": {
        "commit_hash": "8010bf9dd2a649bbe1e65b59e7bbd0e6bedd80ba",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/8010bf9dd2a649bbe1e65b59e7bbd0e6bedd80ba",
        "files": [
          "vcbuild.bat"
        ],
        "message": "build, windows: fixed x64 configuration issue",
        "before_after_code_files": [
          "vcbuild.bat||vcbuild.bat"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "vcbuild.bat||vcbuild.bat": [
          "File: vcbuild.bat -> vcbuild.bat",
          "--- Hunk 1 ---",
          "[Context before]",
          "33: if /i \"%1\"==\"nobuild\"      set nobuild=1&goto arg-ok",
          "34: if /i \"%1\"==\"x86\"          set target_arch=ia32&set platform=WIN32&set vs_toolset=x86&goto arg-ok",
          "35: if /i \"%1\"==\"ia32\"         set target_arch=ia32&set platform=WIN32&set vs_toolset=x86&goto arg-ok",
          "37: if /i \"%1\"==\"shared\"       set library=shared_library&goto arg-ok",
          "38: if /i \"%1\"==\"static\"       set library=static_library&goto arg-ok",
          "39: :arg-ok",
          "",
          "[Removed Lines]",
          "36: if /i \"%1\"==\"x64\"          set target_arch=x64&set platform=amd64&set vs_toolset=x64&goto arg-ok",
          "",
          "[Added Lines]",
          "36: if /i \"%1\"==\"x64\"          set target_arch=x64&set platform=x64&set vs_toolset=x64&goto arg-ok",
          "",
          "---------------"
        ]
      }
    }
  ]
}