{
  "cve_id": "CVE-2019-19923",
  "cve_desc": "flattenSubquery in select.c in SQLite 3.30.1 mishandles certain uses of SELECT DISTINCT involving a LEFT JOIN in which the right-hand side is a view. This can cause a NULL pointer dereference (or incorrect results).",
  "repo": "sqlite/sqlite",
  "patch_hash": "396afe6f6aa90a31303c183e11b2b2d4b7956b35",
  "patch_info": {
    "commit_hash": "396afe6f6aa90a31303c183e11b2b2d4b7956b35",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/396afe6f6aa90a31303c183e11b2b2d4b7956b35",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/join.test"
    ],
    "message": "Continue to back away from the LEFT JOIN optimization of check-in [41c27bc0ff1d3135] by disallowing query flattening if the outer query is DISTINCT.  Without this fix, if an index scan is run on the table within the view on the right-hand side of the LEFT JOIN, stale result registers might be accessed yielding incorrect results, and/or an OP_IfNullRow opcode might be invoked on the un-opened table, resulting in a NULL-pointer dereference.  This problem was found by the Yongheng and Rui fuzzer.\n\nFossilOrigin-Name: 862974312edf00e9d1068115d1a39b7235b7db68b6d86b81d38a12f025a4748e",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/join.test||test/join.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 289158aa24b066c453d2bce4bc2dead1c56fb0b23c3f7c4810b34b13627cef34",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3797:   if( (pSubitem->fg.jointype & JT_OUTER)!=0 ){",
      "3798:     isLeftJoin = 1;",
      "3801:       return 0;",
      "3802:     }",
      "3803:   }",
      "",
      "[Removed Lines]",
      "3799:     if( pSubSrc->nSrc>1 || isAgg || IsVirtual(pSubSrc->a[0].pTab) ){",
      "",
      "[Added Lines]",
      "3804:     ){",
      "",
      "---------------"
    ],
    "test/join.test||test/join.test": [
      "File: test/join.test -> test/join.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "975:   SELECT 24, * FROM t1 LEFT JOIN t0 ON +aa ISNULL;",
      "976: } {13 1 {} 14 1 {} 23 1 {} 24 1 {}}",
      "978: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "978: # 2019-12-18 problem with a LEFT JOIN where the RHS is a view.",
      "979: # Detected by Yongheng and Rui.",
      "980: # Follows from the optimization attempt of check-in 41c27bc0ff1d3135",
      "981: # on 2017-04-18",
      "982: #",
      "983: reset_db",
      "984: do_execsql_test join-22.10 {",
      "985:   CREATE TABLE t0(a, b);",
      "986:   CREATE INDEX t0a ON t0(a);",
      "987:   INSERT INTO t0 VALUES(10,10),(10,11),(10,12);",
      "988:   SELECT DISTINCT c FROM t0 LEFT JOIN (SELECT a+1 AS c FROM t0) ORDER BY c ;",
      "989: } {11}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "db586e48432ac81c81d454af4f5e879743dd9f7b",
      "candidate_info": {
        "commit_hash": "db586e48432ac81c81d454af4f5e879743dd9f7b",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/db586e48432ac81c81d454af4f5e879743dd9f7b",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/where.c"
        ],
        "message": "Add a missing VdbeCoverage() macro.\n\nFossilOrigin-Name: 33da6092d3d04b6eb6ab396b8c4f668e3529e26bf11e26f5fcb9b61fe3470197",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/where.c||src/where.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 47cd634c98b502d40a493455ba6d73cbd0dae74944f9cf06fcbcd025f4b49d6e",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5217:       if( pLevel->regBignull ){",
          "5218:         sqlite3VdbeResolveLabel(v, pLevel->addrBignull);",
          "5219:         sqlite3VdbeAddOp2(v, OP_IfNotZero, pLevel->regBignull, pLevel->p2-1);",
          "5220:       }",
          "5221: #ifndef SQLITE_DISABLE_SKIPAHEAD_DISTINCT",
          "5222:       if( addrSeek ) sqlite3VdbeJumpHere(v, addrSeek);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5220:         VdbeCoverage(v);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "060b7fa9745e1439ce1d9be96bb921b98b0a6da3",
      "candidate_info": {
        "commit_hash": "060b7fa9745e1439ce1d9be96bb921b98b0a6da3",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/060b7fa9745e1439ce1d9be96bb921b98b0a6da3",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/whereexpr.c",
          "test/like3.test",
          "test/tkt-78e04e52ea.test",
          "test/vtab1.test",
          "test/vtabH.test"
        ],
        "message": "Refactor the LIKE optimization decision logic so that it uses sqlite3AtoF() on both boundary keys to determine if the optimization can be used when the LHS is something that might not have TEXT affinity. Ticket [ce8717f0885af975].  See also [c94369cae9b561b1], [b043a54c3de54b28], [fd76310a5e843e07], and [158290c0abafde67].\n\nFossilOrigin-Name: b4a9e09e60213ccff925d09f0b6e549e2a3e3862856c710f108779e2867dec76",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/whereexpr.c||src/whereexpr.c",
          "test/like3.test||test/like3.test",
          "test/tkt-78e04e52ea.test||test/tkt-78e04e52ea.test",
          "test/vtab1.test||test/vtab1.test",
          "test/vtabH.test||test/vtabH.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: c4b405687b010ee20ec02c42913a0540909d0155c88a4a56194fda99c704279e",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/whereexpr.c||src/whereexpr.c": [
          "File: src/whereexpr.c -> src/whereexpr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "264:         zNew[iTo] = 0;",
          "265:         assert( iTo>0 );",
          "284:         ){",
          "289:             sqlite3ExprDelete(db, pPrefix);",
          "290:             sqlite3ValueFree(pVal);",
          "291:             return 0;",
          "",
          "[Removed Lines]",
          "279:         if( sqlite3Isdigit(zNew[0])",
          "280:          || sqlite3Isspace(zNew[0])",
          "281:          || zNew[0]=='-'",
          "282:          || zNew[0]=='+'",
          "283:          || zNew[iTo-1]=='0'-1",
          "285:           if( pLeft->op!=TK_COLUMN",
          "286:            || sqlite3ExprAffinity(pLeft)!=SQLITE_AFF_TEXT",
          "288:           ){",
          "",
          "[Added Lines]",
          "279:         if( pLeft->op!=TK_COLUMN",
          "280:          || sqlite3ExprAffinity(pLeft)!=SQLITE_AFF_TEXT",
          "283:           int isNum;",
          "284:           double rDummy;",
          "285:           isNum = sqlite3AtoF(zNew, &rDummy, iTo, SQLITE_UTF8);",
          "286:           if( isNum<=0 ){",
          "287:             zNew[iTo-1]++;",
          "288:             isNum = sqlite3AtoF(zNew, &rDummy, iTo, SQLITE_UTF8);",
          "289:             zNew[iTo-1]--;",
          "290:           }",
          "291:           if( isNum>0 ){",
          "",
          "---------------"
        ],
        "test/like3.test||test/like3.test": [
          "File: test/like3.test -> test/like3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "198:   SELECT * FROM t0 WHERE t0.c0 LIKE './';",
          "199: } {./}",
          "202: # 2019-02-27",
          "203: # Verify that the LIKE optimization works with an ESCAPE clause when",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "201: # 2019-06-14",
          "202: # Ticket https://www.sqlite.org/src/info/ce8717f0885af975",
          "203: do_execsql_test like3-5.410 {",
          "204:   DROP TABLE IF EXISTS t0;",
          "205:   CREATE TABLE t0(c0 INT UNIQUE COLLATE NOCASE);",
          "206:   INSERT INTO t0(c0) VALUES ('.1%');",
          "207:   SELECT * FROM t0 WHERE t0.c0 LIKE '.1%';",
          "208: } {.1%}",
          "",
          "---------------"
        ],
        "test/tkt-78e04e52ea.test||test/tkt-78e04e52ea.test": [
          "File: test/tkt-78e04e52ea.test -> test/tkt-78e04e52ea.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "41:   }",
          "42: } {}",
          "43: do_test tkt-78e04-1.4 {",
          "45: } {/*SCAN TABLE  USING COVERING INDEX i1*/}",
          "46: do_test tkt-78e04-1.5 {",
          "47:   execsql {",
          "",
          "[Removed Lines]",
          "44:  db eval {EXPLAIN QUERY PLAN SELECT \"\" FROM \"\" WHERE \"\" LIKE '1abc%';}",
          "",
          "[Added Lines]",
          "44:  db eval {EXPLAIN QUERY PLAN SELECT \"\" FROM \"\" WHERE \"\" LIKE '1e5%';}",
          "",
          "---------------"
        ],
        "test/vtab1.test||test/vtab1.test": [
          "File: test/vtab1.test -> test/vtab1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1311:     {xFilter {SELECT rowid, a, b FROM 't6' WHERE b >= ? AND b < ?} 8 9}",
          "1313:   1.3 \"SELECT a FROM e6 WHERE b LIKE '8J%'\" {3 4}",
          "1316:   1.4 \"SELECT a FROM e6 WHERE b LIKE '8j%'\" {3 4}",
          "1318: } {",
          "1319:   set echo_module {}",
          "1320:   do_execsql_test 18.$tn.1 $sql $res",
          "",
          "[Removed Lines]",
          "1314:     {xFilter {SELECT rowid, a, b FROM 't6' WHERE b like ?} 8J%}",
          "1317:     {xFilter {SELECT rowid, a, b FROM 't6' WHERE b like ?} 8j%}",
          "",
          "[Added Lines]",
          "1314:     {xFilter {SELECT rowid, a, b FROM 't6' WHERE b >= ? AND b < ? AND b like ?} 8J 8k 8J%}",
          "1317:     {xFilter {SELECT rowid, a, b FROM 't6' WHERE b >= ? AND b < ? AND b like ?} 8J 8k 8j%}",
          "1319:   1.5 \"SELECT a FROM e6 WHERE b LIKE '8%'\" {3 4}",
          "1320:     {xFilter {SELECT rowid, a, b FROM 't6' WHERE b like ?} 8%}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1324: do_execsql_test 18.2.0 {  PRAGMA case_sensitive_like = ON }",
          "1325: foreach {tn sql res filter} {",
          "1329:   2.2 \"SELECT a FROM e6 WHERE b LIKE '8j%'\" {}",
          "1331: } {",
          "1332:   set echo_module {}",
          "1333:   do_execsql_test 18.$tn.1 $sql $res",
          "",
          "[Removed Lines]",
          "1326:   2.1 \"SELECT a FROM e6 WHERE b LIKE '8J%'\" {3 4}",
          "1327:     {xFilter {SELECT rowid, a, b FROM 't6' WHERE b like ?} 8J%}",
          "1330:     {xFilter {SELECT rowid, a, b FROM 't6' WHERE b like ?} 8j%}",
          "",
          "[Added Lines]",
          "1329:   2.1 \"SELECT a FROM e6 WHERE b LIKE '8%'\" {3 4}",
          "1330:     {xFilter {SELECT rowid, a, b FROM 't6' WHERE b like ?} 8%}",
          "1333:     {xFilter {SELECT rowid, a, b FROM 't6' WHERE b >= ? AND b < ? AND b like ?} 8j 8k 8j%}",
          "1335:   2.3 \"SELECT a FROM e6 WHERE b LIKE '8J%'\" {3 4}",
          "1336:     {xFilter {SELECT rowid, a, b FROM 't6' WHERE b >= ? AND b < ? AND b like ?} 8J 8K 8J%}",
          "",
          "---------------"
        ],
        "test/vtabH.test||test/vtabH.test": [
          "File: test/vtabH.test -> test/vtabH.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "33: foreach {tn sql expect} {",
          "34:   1 \"SELECT * FROM e6 WHERE b LIKE '8abc'\" {",
          "37:   }",
          "39:   2 \"SELECT * FROM e6 WHERE b GLOB '8abc'\" {",
          "40:     xBestIndex {SELECT rowid, a, b FROM 't6' WHERE b glob ?}",
          "42:   }",
          "43: } {",
          "44:   do_test 1.$tn {",
          "",
          "[Removed Lines]",
          "35:     xBestIndex {SELECT rowid, a, b FROM 't6' WHERE b like ?}",
          "36:     xFilter {SELECT rowid, a, b FROM 't6' WHERE b like ?} 8abc",
          "41:     xFilter {SELECT rowid, a, b FROM 't6' WHERE b glob ?} 8abc",
          "",
          "[Added Lines]",
          "35:     xBestIndex",
          "36:        {SELECT rowid, a, b FROM 't6' WHERE b >= ? AND b < ? AND b like ?}",
          "37:     xFilter",
          "38:        {SELECT rowid, a, b FROM 't6' WHERE b >= ? AND b < ? AND b like ?}",
          "39:        8ABC 8abd 8abc",
          "43:      xBestIndex",
          "44:        {SELECT rowid, a, b FROM 't6' WHERE b >= ? AND b < ? AND b glob ?}",
          "45:      xFilter",
          "46:        {SELECT rowid, a, b FROM 't6' WHERE b >= ? AND b < ? AND b glob ?}",
          "47:        8abc 8abd 8abc",
          "48:   }",
          "49:   3 \"SELECT * FROM e6 WHERE b LIKE '8e/'\" {",
          "50:     xBestIndex {SELECT rowid, a, b FROM 't6' WHERE b like ?}",
          "51:     xFilter {SELECT rowid, a, b FROM 't6' WHERE b like ?} 8e/",
          "52:   }",
          "53:   4 \"SELECT * FROM e6 WHERE b GLOB '8e/'\" {",
          "55:     xFilter {SELECT rowid, a, b FROM 't6' WHERE b glob ?} 8e/",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "044388cf98a1e6c1ab61cbecf3e48f3c8f56d8a4",
      "candidate_info": {
        "commit_hash": "044388cf98a1e6c1ab61cbecf3e48f3c8f56d8a4",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/044388cf98a1e6c1ab61cbecf3e48f3c8f56d8a4",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbe.h",
          "src/vdbeaux.c"
        ],
        "message": "Modify signature of sqlite3VdbeChangeOpcode() to accept int instead of u32.\n\nFossilOrigin-Name: 68b7f2acf4d228f32250e37cbc0eb5d275b512d49071bbb38e1f5634b705f7d3",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbe.h||src/vdbe.h",
          "src/vdbeaux.c||src/vdbeaux.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 1b85442b614df0808c10c34ec281282e5dfd93d6d5f9737b51263ffaa4da5c72",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbe.h||src/vdbe.h": [
          "File: src/vdbe.h -> src/vdbe.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "223: #endif",
          "224: void sqlite3VdbeAddParseSchemaOp(Vdbe*,int,char*);",
          "226: void sqlite3VdbeChangeP1(Vdbe*, int addr, int P1);",
          "227: void sqlite3VdbeChangeP2(Vdbe*, int addr, int P2);",
          "228: void sqlite3VdbeChangeP3(Vdbe*, int addr, int P3);",
          "",
          "[Removed Lines]",
          "225: void sqlite3VdbeChangeOpcode(Vdbe*, u32 addr, u8);",
          "",
          "[Added Lines]",
          "225: void sqlite3VdbeChangeOpcode(Vdbe*, int addr, u8);",
          "",
          "---------------"
        ],
        "src/vdbeaux.c||src/vdbeaux.c": [
          "File: src/vdbeaux.c -> src/vdbeaux.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "981:   sqlite3VdbeGetOp(p,addr)->opcode = iNewOpcode;",
          "982: }",
          "983: void sqlite3VdbeChangeP1(Vdbe *p, int addr, int val){",
          "",
          "[Removed Lines]",
          "980: void sqlite3VdbeChangeOpcode(Vdbe *p, u32 addr, u8 iNewOpcode){",
          "",
          "[Added Lines]",
          "980: void sqlite3VdbeChangeOpcode(Vdbe *p, int addr, u8 iNewOpcode){",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f8a488bb6b89b1657badfff3e77add3be8fc9333",
      "candidate_info": {
        "commit_hash": "f8a488bb6b89b1657badfff3e77add3be8fc9333",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/f8a488bb6b89b1657badfff3e77add3be8fc9333",
        "files": [
          "ext/fts5/fts5_main.c",
          "ext/fts5/test/fts5vocab2.test",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Fix a problem causing a crash if an fts5vocab table was created to query an fts3/4 FTS index.\n\nFossilOrigin-Name: 9cd64ce453e4435d80117b8610c22a0a4b53cd6e84b39815e70e684f6b0295c8",
        "before_after_code_files": [
          "ext/fts5/fts5_main.c||ext/fts5/fts5_main.c",
          "ext/fts5/test/fts5vocab2.test||ext/fts5/test/fts5vocab2.test",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts5/fts5_main.c||ext/fts5/fts5_main.c": [
          "File: ext/fts5/fts5_main.c -> ext/fts5/fts5_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2245: ){",
          "2246:   Fts5Cursor *pCsr;",
          "2249:   pCsr = fts5CursorFromCsrid(pGlobal, iCsrId);",
          "2254: }",
          "",
          "[Removed Lines]",
          "2247:   Fts5Table *pTab;",
          "2250:   pTab = (Fts5Table*)pCsr->base.pVtab;",
          "2253:   return pTab->pIndex;",
          "",
          "[Added Lines]",
          "2248:   if( pCsr ){",
          "2249:     Fts5Table *pTab = (Fts5Table*)pCsr->base.pVtab;",
          "2251:     return pTab->pIndex;",
          "2252:   }",
          "2253:   return 0;",
          "",
          "---------------"
        ],
        "ext/fts5/test/fts5vocab2.test||ext/fts5/test/fts5vocab2.test": [
          "File: ext/fts5/test/fts5vocab2.test -> ext/fts5/test/fts5vocab2.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "202:   SELECT * FROM v1;",
          "203: } {}",
          "205: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "205: #-------------------------------------------------------------------------",
          "206: #",
          "207: reset_db",
          "208: do_execsql_test 4.0 {",
          "209:   CREATE VIRTUAL TABLE v1 USING fts5vocab(nosuchtable, col);",
          "210: }",
          "212: do_catchsql_test 4.1 {",
          "213:   SELECT * FROM v1 WHERE term=='nosuchterm';",
          "214: } {1 {no such fts5 table: main.nosuchtable}}",
          "216: do_execsql_test 4.2.1 {",
          "217:   CREATE TABLE nosuchtable(nosuchtable, y, z);",
          "218: }",
          "219: do_catchsql_test 4.2.2 {",
          "220:   SELECT * FROM v1 WHERE term=='nosuchterm';",
          "221: } {1 {no such fts5 table: main.nosuchtable}}",
          "223: ifcapable fts3 {",
          "224:   do_execsql_test 4.3.1 {",
          "225:     DROP TABLE nosuchtable;",
          "226:     CREATE VIRTUAL TABLE nosuchtable USING fts3(a, b);",
          "227:   } {}",
          "228:   do_catchsql_test 4.3.2 {",
          "229:     SELECT * FROM v1 WHERE term=='nosuchterm';",
          "230:   } {1 {no such fts5 table: main.nosuchtable}}",
          "231:   do_catchsql_test 4.3.3 {",
          "232:     INSERT INTO nosuchtable VALUES('id', '*id');",
          "233:     SELECT * FROM v1 WHERE term=='nosuchterm';",
          "234:   } {1 {no such fts5 table: main.nosuchtable}}",
          "235: }",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 65e50706a017751d72d0f9c7f575955194977decd0acf13aaca90c3cb925f20e",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b9bcf7ca600ab8a94018adc2eac4115441a09d89",
      "candidate_info": {
        "commit_hash": "b9bcf7ca600ab8a94018adc2eac4115441a09d89",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/b9bcf7ca600ab8a94018adc2eac4115441a09d89",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/alter.c",
          "src/analyze.c",
          "src/build.c",
          "src/expr.c",
          "src/insert.c",
          "src/sqliteInt.h",
          "src/upsert.c",
          "src/vdbeapi.c",
          "src/where.c",
          "src/wherecode.c"
        ],
        "message": "Refactor names of column index transformation functions, for clarity. Get generated columns working with ALTER TABLE RENAME COLUMN.\n\nFossilOrigin-Name: 27ab41c9102e7801ff829488fc123a8040da008bef373d6704efbe2f93e1da90",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/alter.c||src/alter.c",
          "src/analyze.c||src/analyze.c",
          "src/build.c||src/build.c",
          "src/expr.c||src/expr.c",
          "src/insert.c||src/insert.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/upsert.c||src/upsert.c",
          "src/vdbeapi.c||src/vdbeapi.c",
          "src/where.c||src/where.c",
          "src/wherecode.c||src/wherecode.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 86074da0fd2949e231898ef0bc672d90fd89cefa49fb0eb50ff398fbdd91d1ad",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/alter.c||src/alter.c": [
          "File: src/alter.c -> src/alter.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1334:           sqlite3WalkExprList(&sWalker, pIdx->aColExpr);",
          "1335:         }",
          "1336:       }",
          "1338:       for(pFKey=sParse.pNewTable->pFKey; pFKey; pFKey=pFKey->pNextFrom){",
          "1339:         for(i=0; i<pFKey->nCol; i++){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1337: #ifndef SQLITE_OMIT_GENERATED_COLUMNS",
          "1338:       for(i=0; i<sParse.pNewTable->nCol; i++){",
          "1339:         sqlite3WalkExpr(&sWalker, sParse.pNewTable->aCol[i].pDflt);",
          "1340:       }",
          "1341: #endif",
          "",
          "---------------"
        ],
        "src/analyze.c||src/analyze.c": [
          "File: src/analyze.c -> src/analyze.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1182:       int j, k, regKey;",
          "1183:       regKey = sqlite3GetTempRange(pParse, pPk->nKeyCol);",
          "1184:       for(j=0; j<pPk->nKeyCol; j++){",
          "1186:         assert( k>=0 && k<pIdx->nColumn );",
          "1187:         sqlite3VdbeAddOp3(v, OP_Column, iIdxCur, k, regKey+j);",
          "1188:         VdbeComment((v, \"%s\", pTab->aCol[pPk->aiColumn[j]].zName));",
          "",
          "[Removed Lines]",
          "1185:         k = sqlite3ColumnOfIndex(pIdx, pPk->aiColumn[j]);",
          "",
          "[Added Lines]",
          "1185:         k = sqlite3TableColumnToIndex(pIdx, pPk->aiColumn[j]);",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "877: }",
          "884:   int i;",
          "885:   for(i=0; i<pIdx->nColumn; i++){",
          "886:     if( iCol==pIdx->aiColumn[i] ) return i;",
          "",
          "[Removed Lines]",
          "883: i16 sqlite3ColumnOfIndex(Index *pIdx, i16 iCol){",
          "",
          "[Added Lines]",
          "885: i16 sqlite3TableColumnToIndex(Index *pIdx, i16 iCol){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "889: }",
          "891: #ifndef SQLITE_OMIT_GENERATED_COLUMNS",
          "906:   if( pTab->tabFlags & TF_HasVirtual ){",
          "907:     int i;",
          "908:     for(i=0; i<=iCol; i++){",
          "",
          "[Removed Lines]",
          "905: i16 sqlite3ColumnOfStorage(Table *pTab, i16 iCol){",
          "",
          "[Added Lines]",
          "907: i16 sqlite3StorageColumnToTable(Table *pTab, i16 iCol){",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "928:   int i;",
          "929:   i16 n;",
          "930:   assert( iCol<pTab->nCol );",
          "",
          "[Removed Lines]",
          "927: i16 sqlite3ColumnOfTable(Table *pTab, i16 iCol){",
          "",
          "[Added Lines]",
          "929: i16 sqlite3TableColumnToStorage(Table *pTab, i16 iCol){",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1577:   u8 eType = COLFLAG_VIRTUAL;",
          "1578:   Table *pTab = pParse->pNewTable;",
          "1579:   Column *pCol;",
          "1583:   if( pTab==0 ) goto generated_done;",
          "1584:   pCol = &(pTab->aCol[pTab->nCol-1]);",
          "1585:   if( pCol->pDflt ) goto generated_error;",
          "1586:   if( pType ){",
          "1587:     if( pType->n==7 && sqlite3StrNICmp(\"virtual\",pType->z,7)==0 ){",
          "",
          "[Removed Lines]",
          "1580:   if( IN_RENAME_OBJECT ){",
          "1581:     sqlite3RenameExprUnmap(pParse, pExpr);",
          "1582:   }",
          "",
          "[Added Lines]",
          "1584:   if( IN_DECLARE_VTAB ){",
          "1585:     sqlite3ErrorMsg(pParse, \"virtual tables cannot use computed columns\");",
          "1586:     goto generated_done;",
          "1587:   }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1597:   assert( TF_HasVirtual==COLFLAG_VIRTUAL );",
          "1598:   assert( TF_HasStored==COLFLAG_STORED );",
          "1599:   pTab->tabFlags |= eType;",
          "1601:   goto generated_done;",
          "1603: generated_error:",
          "",
          "[Removed Lines]",
          "1600:   pCol->pDflt = sqlite3ExprDup(pParse->db, pExpr, 0);",
          "",
          "[Added Lines]",
          "1603:   pCol->pDflt = pExpr;",
          "1604:   pExpr = 0;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "3653:   assert( HasRowid(pTab)",
          "3655:   recomputeColumnsNotIndexed(pIndex);",
          "3656:   if( pTblName!=0 && pIndex->nColumn>=pTab->nCol ){",
          "3657:     pIndex->isCovering = 1;",
          "3658:     for(j=0; j<pTab->nCol; j++){",
          "3659:       if( j==pTab->iPKey ) continue;",
          "3661:       pIndex->isCovering = 0;",
          "3662:       break;",
          "3663:     }",
          "",
          "[Removed Lines]",
          "3654:       || pTab->iPKey<0 || sqlite3ColumnOfIndex(pIndex, pTab->iPKey)>=0 );",
          "3660:       if( sqlite3ColumnOfIndex(pIndex,j)>=0 ) continue;",
          "",
          "[Added Lines]",
          "3658:       || pTab->iPKey<0 || sqlite3TableColumnToIndex(pIndex, pTab->iPKey)>=0 );",
          "3664:       if( sqlite3TableColumnToIndex(pIndex,j)>=0 ) continue;",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3410:       return;",
          "3411: #endif",
          "3412:     }else if( !HasRowid(pTab) ){",
          "3414:       op = OP_Column;",
          "3415:     }else{",
          "3417:       op = OP_Column;",
          "3418:     }",
          "3419:     sqlite3VdbeAddOp3(v, op, iTabCur, x, regOut);",
          "",
          "[Removed Lines]",
          "3413:       x = sqlite3ColumnOfIndex(sqlite3PrimaryKeyIndex(pTab), iCol);",
          "3416:       x = sqlite3ColumnOfTable(pTab,iCol);",
          "",
          "[Added Lines]",
          "3413:       x = sqlite3TableColumnToIndex(sqlite3PrimaryKeyIndex(pTab), iCol);",
          "3416:       x = sqlite3TableColumnToStorage(pTab,iCol);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3591:             return -1-pParse->iSelfTab;",
          "3592:           }",
          "3593:           pCol = pTab->aCol + pExpr->iColumn;",
          "3595: #ifndef SQLITE_OMIT_GENERATED_COLUMNS",
          "3596:           if( pCol->colFlags & COLFLAG_GENERATED ){",
          "3597:             if( pCol->colFlags & COLFLAG_BUSY ){",
          "",
          "[Removed Lines]",
          "3594:           iSrc = sqlite3ColumnOfTable(pTab, pExpr->iColumn) - pParse->iSelfTab;",
          "",
          "[Added Lines]",
          "3594:           iSrc = sqlite3TableColumnToStorage(pTab, pExpr->iColumn)",
          "3595:                       - pParse->iSelfTab;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "5320: static int exprIdxCover(Walker *pWalker, Expr *pExpr){",
          "5321:   if( pExpr->op==TK_COLUMN",
          "5322:    && pExpr->iTable==pWalker->u.pIdxCover->iCur",
          "5324:   ){",
          "5325:     pWalker->eCode = 1;",
          "5326:     return WRC_Abort;",
          "",
          "[Removed Lines]",
          "5323:    && sqlite3ColumnOfIndex(pWalker->u.pIdxCover->pIdx, pExpr->iColumn)<0",
          "",
          "[Added Lines]",
          "5324:    && sqlite3TableColumnToIndex(pWalker->u.pIdxCover->pIdx, pExpr->iColumn)<0",
          "",
          "---------------"
        ],
        "src/insert.c||src/insert.c": [
          "File: src/insert.c -> src/insert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1055:       int k;",
          "1056:       u32 colFlags;",
          "1057:       assert( i>=nHidden );",
          "1059:       if( i==pTab->iPKey ){",
          "",
          "[Removed Lines]",
          "1058:       assert( iRegStore==sqlite3ColumnOfTable(pTab,i)+regRowid+1 );",
          "",
          "[Added Lines]",
          "1058:       assert( iRegStore==sqlite3TableColumnToStorage(pTab,i)+regRowid+1 );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1464:       pParse->iSelfTab = 0;",
          "1465:       if( onError==OE_Replace ) onError = OE_Abort;",
          "1466:     }else{",
          "1468:     }",
          "1469:     switch( onError ){",
          "1470:       case OE_Replace: {",
          "",
          "[Removed Lines]",
          "1467:       iReg = sqlite3ColumnOfTable(pTab, i) + regNewData + 1;",
          "",
          "[Added Lines]",
          "1467:       iReg = sqlite3TableColumnToStorage(pTab, i) + regNewData + 1;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1782:         VdbeComment((v, \"%s column %d\", pIdx->zName, i));",
          "1783: #endif",
          "1784:       }else{",
          "1786:         sqlite3VdbeAddOp2(v, OP_SCopy, x, regIdx+i);",
          "1787:         VdbeComment((v, \"%s\", pTab->aCol[iField].zName));",
          "1788:       }",
          "",
          "[Removed Lines]",
          "1785:         x = sqlite3ColumnOfTable(pTab, iField) + regNewData + 1;",
          "",
          "[Added Lines]",
          "1785:         x = sqlite3TableColumnToStorage(pTab, iField) + regNewData + 1;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1873:         if( pIdx!=pPk ){",
          "1874:           for(i=0; i<pPk->nKeyCol; i++){",
          "1875:             assert( pPk->aiColumn[i]>=0 );",
          "1877:             sqlite3VdbeAddOp3(v, OP_Column, iThisCur, x, regR+i);",
          "1878:             VdbeComment((v, \"%s.%s\", pTab->zName,",
          "1879:                          pTab->aCol[pPk->aiColumn[i]].zName));",
          "",
          "[Removed Lines]",
          "1876:             x = sqlite3ColumnOfIndex(pIdx, pPk->aiColumn[i]);",
          "",
          "[Added Lines]",
          "1876:             x = sqlite3TableColumnToIndex(pIdx, pPk->aiColumn[i]);",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "3952: Table *sqlite3ResultSetOfSelect(Parse*,Select*,char);",
          "3953: void sqlite3OpenMasterTable(Parse *, int);",
          "3954: Index *sqlite3PrimaryKeyIndex(Table*);",
          "3956: #ifdef SQLITE_OMIT_GENERATED_COLUMNS",
          "3959: #else",
          "3962: #endif",
          "3963: void sqlite3StartTable(Parse*,Token*,Token*,int,int,int,int);",
          "3964: #if SQLITE_ENABLE_HIDDEN_COLUMNS",
          "",
          "[Removed Lines]",
          "3955: i16 sqlite3ColumnOfIndex(Index*, i16);",
          "3960:   i16 sqlite3ColumnOfTable(Table*, i16);",
          "3961:   i16 sqlite3ColumnOfStorage(Table*, i16);",
          "",
          "[Added Lines]",
          "3968: i16 sqlite3TableColumnToIndex(Index*, i16);",
          "3973:   i16 sqlite3TableColumnToStorage(Table*, i16);",
          "3974:   i16 sqlite3StorageColumnToTable(Table*, i16);",
          "",
          "---------------"
        ],
        "src/upsert.c||src/upsert.c": [
          "File: src/upsert.c -> src/upsert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "226:       for(i=0; i<nPk; i++){",
          "227:         int k;",
          "228:         assert( pPk->aiColumn[i]>=0 );",
          "230:         sqlite3VdbeAddOp3(v, OP_Column, iCur, k, iPk+i);",
          "231:         VdbeComment((v, \"%s.%s\", pIdx->zName,",
          "232:                     pTab->aCol[pPk->aiColumn[i]].zName));",
          "",
          "[Removed Lines]",
          "229:         k = sqlite3ColumnOfIndex(pIdx, pPk->aiColumn[i]);",
          "",
          "[Added Lines]",
          "229:         k = sqlite3TableColumnToIndex(pIdx, pPk->aiColumn[i]);",
          "",
          "---------------"
        ],
        "src/vdbeapi.c||src/vdbeapi.c": [
          "File: src/vdbeapi.c -> src/vdbeapi.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1831:     goto preupdate_old_out;",
          "1832:   }",
          "1833:   if( p->pPk ){",
          "1835:   }",
          "1836:   if( iIdx>=p->pCsr->nField || iIdx<0 ){",
          "1837:     rc = SQLITE_RANGE;",
          "",
          "[Removed Lines]",
          "1834:     iIdx = sqlite3ColumnOfIndex(p->pPk, iIdx);",
          "",
          "[Added Lines]",
          "1834:     iIdx = sqlite3TableColumnToIndex(p->pPk, iIdx);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1921:     goto preupdate_new_out;",
          "1922:   }",
          "1923:   if( p->pPk && p->op!=SQLITE_UPDATE ){",
          "1925:   }",
          "1926:   if( iIdx>=p->pCsr->nField || iIdx<0 ){",
          "1927:     rc = SQLITE_RANGE;",
          "",
          "[Removed Lines]",
          "1924:     iIdx = sqlite3ColumnOfIndex(p->pPk, iIdx);",
          "",
          "[Added Lines]",
          "1924:     iIdx = sqlite3TableColumnToIndex(p->pPk, iIdx);",
          "",
          "---------------"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5379:             x = pPk->aiColumn[x];",
          "5380:             assert( x>=0 );",
          "5381:           }else{",
          "5383:           }",
          "5385:           if( x>=0 ){",
          "5386:             pOp->p2 = x;",
          "5387:             pOp->p1 = pLevel->iIdxCur;",
          "",
          "[Removed Lines]",
          "5382:             x = sqlite3ColumnOfStorage(pTab,x);",
          "5384:           x = sqlite3ColumnOfIndex(pIdx, x);",
          "",
          "[Added Lines]",
          "5382:             x = sqlite3StorageColumnToTable(pTab,x);",
          "5384:           x = sqlite3TableColumnToIndex(pIdx, x);",
          "",
          "---------------"
        ],
        "src/wherecode.c||src/wherecode.c": [
          "File: src/wherecode.c -> src/wherecode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "823:   assert( pHint->pIdx!=0 );",
          "824:   if( pExpr->op==TK_COLUMN",
          "825:    && pExpr->iTable==pHint->iTabCur",
          "827:   ){",
          "828:     pWalker->eCode = 1;",
          "829:   }",
          "",
          "[Removed Lines]",
          "826:    && sqlite3ColumnOfIndex(pHint->pIdx, pExpr->iColumn)<0",
          "",
          "[Added Lines]",
          "826:    && sqlite3TableColumnToIndex(pHint->pIdx, pExpr->iColumn)<0",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "891:       pExpr->iTable = reg;",
          "892:     }else if( pHint->pIdx!=0 ){",
          "893:       pExpr->iTable = pHint->iIdxCur;",
          "895:       assert( pExpr->iColumn>=0 );",
          "896:     }",
          "897:   }else if( pExpr->op==TK_AGG_FUNCTION ){",
          "",
          "[Removed Lines]",
          "894:       pExpr->iColumn = sqlite3ColumnOfIndex(pHint->pIdx, pExpr->iColumn);",
          "",
          "[Added Lines]",
          "894:       pExpr->iColumn = sqlite3TableColumnToIndex(pHint->pIdx, pExpr->iColumn);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1826:       Index *pPk = sqlite3PrimaryKeyIndex(pIdx->pTable);",
          "1827:       iRowidReg = sqlite3GetTempRange(pParse, pPk->nKeyCol);",
          "1828:       for(j=0; j<pPk->nKeyCol; j++){",
          "1830:         sqlite3VdbeAddOp3(v, OP_Column, iIdxCur, k, iRowidReg+j);",
          "1831:       }",
          "1832:       sqlite3VdbeAddOp4Int(v, OP_NotFound, iCur, addrCont,",
          "",
          "[Removed Lines]",
          "1829:         k = sqlite3ColumnOfIndex(pIdx, pPk->aiColumn[j]);",
          "",
          "[Added Lines]",
          "1829:         k = sqlite3TableColumnToIndex(pIdx, pPk->aiColumn[j]);",
          "",
          "---------------"
        ]
      }
    }
  ]
}