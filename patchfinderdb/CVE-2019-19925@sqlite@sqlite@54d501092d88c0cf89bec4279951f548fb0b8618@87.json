{
  "cve_id": "CVE-2019-19925",
  "cve_desc": "zipfileUpdate in ext/misc/zipfile.c in SQLite 3.30.1 mishandles a NULL pathname during an update of a ZIP archive.",
  "repo": "sqlite/sqlite",
  "patch_hash": "54d501092d88c0cf89bec4279951f548fb0b8618",
  "patch_info": {
    "commit_hash": "54d501092d88c0cf89bec4279951f548fb0b8618",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/54d501092d88c0cf89bec4279951f548fb0b8618",
    "files": [
      "ext/misc/zipfile.c",
      "manifest",
      "manifest.uuid",
      "test/zipfile.test"
    ],
    "message": "Fix the zipfile extension so that INSERT works even if the pathname of the file being inserted is a NULL.  Bug discovered by the Yongheng and Rui fuzzer.\n\nFossilOrigin-Name: a80f84b511231204658304226de3e075a55afc2e3f39ac063716f7a57f585c06",
    "before_after_code_files": [
      "ext/misc/zipfile.c||ext/misc/zipfile.c",
      "manifest.uuid||manifest.uuid",
      "test/zipfile.test||test/zipfile.test"
    ]
  },
  "patch_diff": {
    "ext/misc/zipfile.c||ext/misc/zipfile.c": [
      "File: ext/misc/zipfile.c -> ext/misc/zipfile.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1620:     if( rc==SQLITE_OK ){",
      "1621:       zPath = (const char*)sqlite3_value_text(apVal[2]);",
      "1622:       nPath = (int)strlen(zPath);",
      "1623:       mTime = zipfileGetTime(apVal[4]);",
      "1624:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1622:       if( zPath==0 ) zPath = \"\";",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: fccfb8a9ed3c1df9f23762bb8df6fdf36a21118899e3fae41f451169a5f2c08e",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "test/zipfile.test||test/zipfile.test": [
      "File: test/zipfile.test -> test/zipfile.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "795:   } {. ./x1.txt ./x2.txt}",
      "796: }",
      "798: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "798: # 2019-12-18 Yongheng and Rui fuzzer",
      "799: #",
      "800: do_execsql_test 13.10 {",
      "801:   DROP TABLE IF EXISTS t0;",
      "802:   DROP TABLE IF EXISTS t1;",
      "803:   CREATE TABLE t0(a,b,c,d,e,f,g);",
      "804:   REPLACE INTO t0(c,b,f) VALUES(10,10,10);",
      "805:   CREATE VIRTUAL TABLE t1 USING zipfile('h.zip');",
      "806:   REPLACE INTO t1 SELECT * FROM t0;",
      "807:   SELECT quote(name),quote(mode),quote(mtime),quote(sz),quote(rawdata),",
      "808:          quote(data),quote(method) FROM t1;",
      "809: } {'' 10 10 2 X'3130' X'3130' 0}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "7f6f12bdd35c55d9f98b6eefbe2d40c4a85aab87",
      "candidate_info": {
        "commit_hash": "7f6f12bdd35c55d9f98b6eefbe2d40c4a85aab87",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/7f6f12bdd35c55d9f98b6eefbe2d40c4a85aab87",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "src/resolve.c",
          "src/select.c",
          "src/sqliteInt.h",
          "src/window.c",
          "test/window9.test"
        ],
        "message": "Remove Window objects from the corresponding Select.pWin list when they are deleted, as they are, for example, when the ORDER BY clause is optimized out.\n\nFossilOrigin-Name: fd7316cda0fdfe86985f41a97dff3beba188606ec9bc6fef38a686a6976a6e01",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "src/resolve.c||src/resolve.c",
          "src/select.c||src/select.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/window.c||src/window.c",
          "test/window9.test||test/window9.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: bd37ce3fb8dee8d538f6afc0bfc13cdc3ebdd504e6461f0130c6ecc8af585f68",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1327: static int gatherSelectWindowsCallback(Walker *pWalker, Expr *pExpr){",
          "1328:   if( pExpr->op==TK_FUNCTION && ExprHasProperty(pExpr, EP_WinFunc) ){",
          "1330:     assert( IsWindowFunc(pExpr) );",
          "1333:   }",
          "1334:   return WRC_Continue;",
          "1335: }",
          "",
          "[Removed Lines]",
          "1329:     assert( pExpr->y.pWin );",
          "1331:     pExpr->y.pWin->pNextWin = pWalker->u.pSelect->pWin;",
          "1332:     pWalker->u.pSelect->pWin = pExpr->y.pWin;",
          "",
          "[Added Lines]",
          "1329:     Select *pSelect = pWalker->u.pSelect;",
          "1330:     Window *pWin = pExpr->y.pWin;",
          "1331:     assert( pWin );",
          "1333:     if( pSelect->pWin ){",
          "1335:       pSelect->pWin->ppThis = &pWin->pNextWin;",
          "1336:     }",
          "1337:     pWin->pNextWin = pSelect->pWin;",
          "1338:     pWin->ppThis = &pSelect->pWin;",
          "1339:     pSelect->pWin = pWin;",
          "",
          "---------------"
        ],
        "src/resolve.c||src/resolve.c": [
          "File: src/resolve.c -> src/resolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "901: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "902:         if( pWin ){",
          "903:           Select *pSel = pNC->pWinSelect;",
          "904:           if( IN_RENAME_OBJECT==0 ){",
          "905:             sqlite3WindowUpdate(pParse, pSel->pWinDefn, pWin, pDef);",
          "906:           }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "904:           assert( pWin==pExpr->y.pWin );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "910:           if( 0==pSel->pWin",
          "911:            || 0==sqlite3WindowCompare(pParse, pSel->pWin, pWin, 0)",
          "912:           ){",
          "915:           }",
          "916:           pNC->ncFlags |= NC_HasWin;",
          "917:         }else",
          "",
          "[Removed Lines]",
          "913:             pExpr->y.pWin->pNextWin = pSel->pWin;",
          "914:             pSel->pWin = pExpr->y.pWin;",
          "",
          "[Added Lines]",
          "914:             pWin->pNextWin = pSel->pWin;",
          "915:             if( pSel->pWin ){",
          "916:               pSel->pWin->ppThis = &pWin->pNextWin;",
          "917:             }",
          "918:             pSel->pWin = pWin;",
          "919:             pWin->ppThis = &pSel->pWin;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1296: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "1300: static int resolveRemoveWindowsCb(Walker *pWalker, Expr *pExpr){",
          "1301:   if( ExprHasProperty(pExpr, EP_WinFunc) ){",
          "1308:     }",
          "1309:   }",
          "1310:   return WRC_Continue;",
          "",
          "[Removed Lines]",
          "1302:     Window **pp;",
          "1303:     for(pp=&pWalker->u.pSelect->pWin; *pp; pp=&(*pp)->pNextWin){",
          "1304:       if( *pp==pExpr->y.pWin ){",
          "1306:         break;",
          "1307:       }",
          "",
          "[Added Lines]",
          "1307:     Window *pWin = pExpr->y.pWin;",
          "1308:     if( pWin->ppThis ){",
          "1310:       if( pWin->pNextWin ) pWin->pNextWin->ppThis = pWin->ppThis;",
          "1311:       pWin->ppThis = 0;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1323: }",
          "1324: #else",
          "",
          "[Removed Lines]",
          "1317: static void resolveRemoveWindows(Select *pSelect, Expr *pExpr){",
          "1318:   Walker sWalker;",
          "1319:   memset(&sWalker, 0, sizeof(Walker));",
          "1320:   sWalker.xExprCallback = resolveRemoveWindowsCb;",
          "1321:   sWalker.u.pSelect = pSelect;",
          "1322:   sqlite3WalkExpr(&sWalker, pExpr);",
          "1325: # define resolveRemoveWindows(x,y)",
          "1326: #endif",
          "",
          "[Added Lines]",
          "1321: static void windowRemoveExprFromSelect(Select *pSelect, Expr *pExpr){",
          "1322:   if( pSelect->pWin ){",
          "1323:     Walker sWalker;",
          "1324:     memset(&sWalker, 0, sizeof(Walker));",
          "1325:     sWalker.xExprCallback = resolveRemoveWindowsCb;",
          "1326:     sWalker.u.pSelect = pSelect;",
          "1327:     sqlite3WalkExpr(&sWalker, pExpr);",
          "1328:   }",
          "1331: # define windowRemoveExprFromSelect(a, b)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1398:         pItem->u.x.iOrderByCol = j+1;",
          "1399:       }",
          "1400:     }",
          "",
          "[Removed Lines]",
          "1397:         resolveRemoveWindows(pSelect, pE);",
          "",
          "[Added Lines]",
          "1403:         windowRemoveExprFromSelect(pSelect, pE);",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "102:     }",
          "103: #endif",
          "104:     if( OK_IF_ALWAYS_TRUE(p->pWith) ) sqlite3WithDelete(db, p->pWith);",
          "105:     if( bFree ) sqlite3DbFreeNN(db, p);",
          "106:     p = pPrior;",
          "107:     bFree = 1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "105:     assert( p->pWin==0 );",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1023: void sqlite3WindowDelete(sqlite3 *db, Window *p){",
          "1024:   if( p ){",
          "1025:     sqlite3ExprDelete(db, p->pFilter);",
          "1026:     sqlite3ExprListDelete(db, p->pPartition);",
          "1027:     sqlite3ExprListDelete(db, p->pOrderBy);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1025:     if( p->ppThis ){",
          "1027:       if( p->pNextWin ) p->pNextWin->ppThis = p->ppThis;",
          "1028:     }",
          "",
          "---------------"
        ],
        "test/window9.test||test/window9.test": [
          "File: test/window9.test -> test/window9.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "98:   SELECT b=='2', rank() OVER (ORDER BY a) FROM t1",
          "99: } {1 1   0 2}",
          "101: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "101: #-------------------------------------------------------------------------",
          "102: reset_db",
          "103: do_execsql_test 3.0 {",
          "104:   CREATE TABLE t1(a);",
          "105:   CREATE TABLE t2(a,b,c);",
          "106: }",
          "108: do_execsql_test 3.1 {",
          "109:   SELECT EXISTS(SELECT 1 FROM t1 ORDER BY sum(a) OVER ()) FROM t1;",
          "110: }",
          "112: do_execsql_test 3.2 {",
          "113:   SELECT sum(a) OVER () FROM t2",
          "114:    ORDER BY EXISTS(SELECT 1 FROM t2 ORDER BY sum(a) OVER ());",
          "115: }",
          "117: do_catchsql_test 3.3 {",
          "118:   SELECT a, sum(a) OVER (ORDER BY a DESC) FROM t2",
          "119:   ORDER BY EXISTS(",
          "120:     SELECT 1 FROM t2 ORDER BY sum(a) OVER (ORDER BY a)",
          "121:   ) OVER (ORDER BY a);",
          "122: } {1 {near \"OVER\": syntax error}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "94e95ea46e89f34adeba606db60f4691a25d7c1f",
      "candidate_info": {
        "commit_hash": "94e95ea46e89f34adeba606db60f4691a25d7c1f",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/94e95ea46e89f34adeba606db60f4691a25d7c1f",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/test_vfs.c",
          "test/lock_common.tcl",
          "test/shmlock.test",
          "test/wal.test"
        ],
        "message": "Copy some extra test infrastructure from the mutexfree-shmlock branch to trunk.\n\nFossilOrigin-Name: 883337ffdb434b6856ceaada121c0be67e2fdec7b447675f45e85568ef28d7d9",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/test_vfs.c||src/test_vfs.c",
          "test/lock_common.tcl||test/lock_common.tcl",
          "test/shmlock.test||test/shmlock.test",
          "test/wal.test||test/wal.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 95a9a39ff784b960b62dd6298e722a620ba3f9c8b76839a49bbef35d7bc84a8e",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/test_vfs.c||src/test_vfs.c": [
          "File: src/test_vfs.c -> src/test_vfs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1564:   return TCL_ERROR;",
          "1565: }",
          "1567: int Sqlitetestvfs_Init(Tcl_Interp *interp){",
          "1568:   Tcl_CreateObjCommand(interp, \"testvfs\", testvfs_cmd, 0, 0);",
          "1569:   return TCL_OK;",
          "1570: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1567: extern int getDbPointer(Tcl_Interp *interp, const char *zA, sqlite3 **ppDb);",
          "1568: extern const char *sqlite3ErrName(int);",
          "1573: static int SQLITE_TCLAPI test_vfs_shmlock(",
          "1574:   void * clientData,",
          "1575:   Tcl_Interp *interp,",
          "1576:   int objc,",
          "1577:   Tcl_Obj *CONST objv[]",
          "1578: ){",
          "1579:   const char *azArg1[] = {\"shared\", \"exclusive\", 0};",
          "1580:   const char *azArg2[] = {\"lock\", \"unlock\", 0};",
          "1581:   sqlite3 *db = 0;",
          "1582:   int rc = SQLITE_OK;",
          "1583:   const char *zDbname = 0;",
          "1584:   int iArg1 = 0;",
          "1585:   int iArg2 = 0;",
          "1586:   int iOffset = 0;",
          "1587:   int n = 0;",
          "1588:   sqlite3_file *pFd;",
          "1590:   if( objc!=7 ){",
          "1591:     Tcl_WrongNumArgs(interp, 1, objv,",
          "1592:         \"DB DBNAME (shared|exclusive) (lock|unlock) OFFSET N\"",
          "1593:     );",
          "1594:     return TCL_ERROR;",
          "1595:   }",
          "1597:   zDbname = Tcl_GetString(objv[2]);",
          "1598:   if( getDbPointer(interp, Tcl_GetString(objv[1]), &db)",
          "1599:    || Tcl_GetIndexFromObj(interp, objv[3], azArg1, \"ARG\", 0, &iArg1)",
          "1600:    || Tcl_GetIndexFromObj(interp, objv[4], azArg2, \"ARG\", 0, &iArg2)",
          "1601:    || Tcl_GetIntFromObj(interp, objv[5], &iOffset)",
          "1602:    || Tcl_GetIntFromObj(interp, objv[6], &n)",
          "1603:   ){",
          "1604:     return TCL_ERROR;",
          "1605:   }",
          "1607:   sqlite3_file_control(db, zDbname, SQLITE_FCNTL_FILE_POINTER, (void*)&pFd);",
          "1608:   if( pFd==0 ){",
          "1609:     return TCL_ERROR;",
          "1610:   }",
          "1611:   rc = pFd->pMethods->xShmLock(pFd, iOffset, n,",
          "1612:       (iArg1==0 ? SQLITE_SHM_SHARED : SQLITE_SHM_EXCLUSIVE)",
          "1613:     | (iArg2==0 ? SQLITE_SHM_LOCK : SQLITE_SHM_UNLOCK)",
          "1614:   );",
          "1615:   Tcl_SetObjResult(interp, Tcl_NewStringObj(sqlite3ErrName(rc), -1));",
          "1616:   return TCL_OK;",
          "1617: }",
          "1622:   Tcl_CreateObjCommand(interp, \"vfs_shmlock\", test_vfs_shmlock, 0, 0);",
          "",
          "---------------"
        ],
        "test/lock_common.tcl||test/lock_common.tcl": [
          "File: test/lock_common.tcl -> test/lock_common.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: proc do_multiclient_test {varname script} {",
          "19:     if {[info exists ::G(valgrind)]} { db close ; continue }",
          "20:     set ::code2_chan [launch_testfixture]",
          "21:     set ::code3_chan [launch_testfixture]",
          "22:     proc code2 {tcl} { testfixture $::code2_chan $tcl }",
          "23:     proc code3 {tcl} { testfixture $::code3_chan $tcl }",
          "26:     proc code2 {tcl} { uplevel #0 $tcl }",
          "27:     proc code3 {tcl} { uplevel #0 $tcl }",
          "29:   }] {",
          "30:     faultsim_delete_and_reopen",
          "32:     proc code1 {tcl} { uplevel #0 $tcl }",
          "",
          "[Removed Lines]",
          "18:   foreach code [list {",
          "24:     set tn 1",
          "25:   } {",
          "28:     set tn 2",
          "",
          "[Added Lines]",
          "18:   foreach {tn code} [list 1 {",
          "24:   } 2 {",
          "28:     # Do not run multi-process tests with the unix-excl VFS.",
          "29:     #",
          "30:     if {$tn==1 && [permutation]==\"unix-excl\"} continue",
          "",
          "---------------"
        ],
        "test/shmlock.test||test/shmlock.test": [
          "File: test/shmlock.test -> test/shmlock.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2018 December 6",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #***********************************************************************",
          "11: #",
          "13: set testdir [file dirname $argv0]",
          "14: source $testdir/tester.tcl",
          "16: set testprefix shmlock",
          "18: ifcapable !wal {finish_test ; return }",
          "20: sqlite3 db2 test.db",
          "21: sqlite3 db3 test.db",
          "23: do_execsql_test 1.0 {",
          "24:   PRAGMA journal_mode = wal;",
          "25:   CREATE TABLE t1(a, b);",
          "26:   INSERT INTO t1 VALUES(1, 2);",
          "27: } {wal}",
          "28: do_test 1.1 { execsql { SELECT * FROM t1 } db2 } {1 2}",
          "29: do_test 1.2 { execsql { SELECT * FROM t1 } db3 } {1 2}",
          "31: foreach {tn dbhandle cmd res} {",
          "32:   1    db  {shared    lock   7 1}    OK",
          "33:   2    db2 {exclusive lock   7 1}    BUSY",
          "34:   3    db  {shared    unlock 7 1}    OK",
          "35:   4    db2 {exclusive lock   7 1}    OK",
          "36:   5    db  {shared    lock   7 1}    BUSY",
          "37:   6    db  {exclusive lock   7 1}    BUSY",
          "38:   7    db2 {exclusive unlock 7 1}    OK",
          "40:   8    db  {exclusive lock   0 8}    OK",
          "41:   9    db  {exclusive unlock 0 8}    OK",
          "42:   10   db2 {exclusive lock   0 8}    OK",
          "43:   11   db2 {exclusive unlock 0 8}    OK",
          "45:   12   db  {shared    lock   0 1}    OK",
          "46:   13   db2 {shared    lock   0 1}    OK",
          "47:   14   db3 {shared    lock   0 1}    OK",
          "48:   15   db3 {shared    unlock 0 1}    OK",
          "49:   16   db3 {exclusive lock   0 1}    BUSY",
          "50:   17   db2 {shared    unlock 0 1}    OK",
          "51:   18   db3 {exclusive lock   0 1}    BUSY",
          "52:   19   db  {shared    unlock 0 1}    OK",
          "53:   20   db3 {exclusive lock   0 1}    OK",
          "54:   21   db3 {exclusive unlock 0 1}    OK",
          "56:   22   db  {shared    lock   3 1}    OK",
          "57:   23   db2 {exclusive lock   2 2}    BUSY",
          "58:   24   db  {shared    lock   2 1}    OK",
          "59:   25   db2 {exclusive lock   0 5}    BUSY",
          "60:   26   db2 {exclusive lock   0 4}    BUSY",
          "61:   27   db2 {exclusive lock   0 3}    BUSY",
          "62:   28   db  {shared    unlock 3 1}    OK",
          "63:   29   db2 {exclusive lock   2 2}    BUSY",
          "64:   28   db  {shared    unlock 2 1}    OK",
          "65:   29   db2 {exclusive lock   2 2}    OK",
          "66:   29   db2 {exclusive unlock 2 2}    OK",
          "67: } {",
          "68:   do_test 1.3.$tn [list vfs_shmlock $dbhandle main {*}$cmd] \"SQLITE_$res\"",
          "69: }",
          "71: db  close",
          "72: db2 close",
          "73: db3 close",
          "75: if {[permutation]==\"unix-excl\"} {",
          "76:   do_test 2.0 {",
          "77:     for {set i 0} {$i < 256} {incr i} {",
          "78:       sqlite3 db$i test.db",
          "79:       execsql { SELECT * FROM t1 } db$i",
          "80:     }",
          "81:     for {set i 0} {$i < 255} {incr i} {",
          "82:       set rc [vfs_shmlock db$i main shared lock 4 1]",
          "83:       if {$rc != \"SQLITE_OK\"} { error $rc }",
          "84:     }",
          "86:     vfs_shmlock db255 main shared lock 4 1",
          "87:   } {SQLITE_BUSY}",
          "89:   do_test 2.1 { vfs_shmlock db255 main exclusive lock   4 1 } SQLITE_BUSY",
          "90:   do_test 2.2 { vfs_shmlock db0   main shared    unlock 4 1 } SQLITE_OK",
          "91:   do_test 2.3 { vfs_shmlock db255 main shared    lock   4 1 } SQLITE_OK",
          "92:   do_test 2.4 { vfs_shmlock db255 main shared    unlock 4 1 } SQLITE_OK",
          "93:   do_test 2.5 { vfs_shmlock db255 main exclusive lock   4 1 } SQLITE_BUSY",
          "95:   do_test 2.6 {",
          "96:     for {set i 1} {$i < 255} {incr i} {",
          "97:       set rc [vfs_shmlock db255 main exclusive lock 4 1]",
          "98:       if {$rc != \"SQLITE_BUSY\"} { error $rc }",
          "99:       set rc [vfs_shmlock db$i main shared unlock 4 1]",
          "100:       if {$rc != \"SQLITE_OK\"} { error $rc }",
          "101:     }",
          "103:     vfs_shmlock db255 main exclusive lock 4 1",
          "104:   } {SQLITE_OK}",
          "106:   vfs_shmlock db255 main exclusive unlock 4 1",
          "108:   for {set i 0} {$i < 256} {incr i} {",
          "109:     db$i close",
          "110:   }",
          "111: }",
          "113: sqlite3 db0 test.db",
          "114: sqlite3 db1 test.db",
          "115: do_test 3.1 { execsql { SELECT * FROM t1 } db0 } {1 2}",
          "116: do_test 3.2 { execsql { SELECT * FROM t1 } db1 } {1 2}",
          "118: set L(0) {n n n n n n n n}",
          "119: set L(1) {n n n n n n n n}",
          "120: proc random_lock_test {idx} {",
          "121:   global L",
          "122:   set iSlot [expr int(rand()*8)]",
          "123:   if {[expr int(rand()*2)]} {",
          "124:     # Unlock operation",
          "125:     if {[lindex $L($idx) $iSlot]!=\"n\"} {",
          "126:       vfs_shmlock db$idx main [lindex $L($idx) $iSlot] unlock $iSlot 1",
          "127:       lset L($idx) $iSlot n",
          "128:     }",
          "129:   } else {",
          "130:     # Lock operation",
          "131:     if {[lindex $L($idx) $iSlot]==\"n\"} {",
          "132:       set locktype [lindex {e s} [expr int(rand()*2)]]",
          "133:       set n 1",
          "134:       if {$locktype==\"e\"} {",
          "135:         for {set l $iSlot} {$l<8 && [lindex $L($idx) $l]==\"n\"} {incr l} {}",
          "136:         set n [expr int(rand()*($l-$iSlot))+1]",
          "137:         # puts \"iSlot=$iSlot l=$l L=$L($idx)\"",
          "138:         # puts \"$iSlot $n\"",
          "139:       }",
          "140:       set res [vfs_shmlock db$idx main $locktype lock $iSlot $n]",
          "142:       set bBusy 0",
          "143:       for {set i $iSlot} {$i<($iSlot+$n)} {incr i} {",
          "144:         set other [lindex $L([expr ($idx+1)%2]) $i]",
          "145:         if {($other!=\"n\" && $locktype==\"e\")||($other==\"e\" && $locktype==\"s\")} {",
          "146:           if {$res != \"SQLITE_BUSY\"} { error \"BUSY not detected\" }",
          "147:           set bBusy 1",
          "148:           break",
          "149:         }",
          "150:       }",
          "152:       if {$bBusy==0} {",
          "153:         if {$res != \"SQLITE_OK\"} { error \"BUSY false-positive\" }",
          "154:         for {set i $iSlot} {$i<($iSlot+$n)} {incr i} {",
          "155:           lset L($idx) $i $locktype",
          "156:         }",
          "157:       }",
          "158:     }",
          "159:   }",
          "160: }",
          "162: set nStep 100000",
          "163: for {set i 0} {$i < $nStep} {incr i} {",
          "164:   random_lock_test 0",
          "165:   random_lock_test 1",
          "166: }",
          "168: db0 close",
          "169: db1 close",
          "171: finish_test",
          "",
          "---------------"
        ],
        "test/wal.test||test/wal.test": [
          "File: test/wal.test -> test/wal.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1297: # At one point, SQLite was failing to grow the mapping of the wal-index",
          "1298: # file in step 3 and the checkpoint was corrupting the database file.",
          "1299: #",
          "1314:     sqlite3 db test.db",
          "1346: catch { db2 close }",
          "1347: catch { db close }",
          "",
          "[Removed Lines]",
          "1300: do_test wal-20.1 {",
          "1301:   catch {db close}",
          "1302:   forcedelete test.db test.db-wal test.db-journal",
          "1303:   sqlite3 db test.db",
          "1304:   execsql {",
          "1305:     PRAGMA journal_mode = WAL;",
          "1306:     CREATE TABLE t1(x);",
          "1307:     INSERT INTO t1 VALUES(randomblob(900));",
          "1308:     SELECT count(*) FROM t1;",
          "1309:   }",
          "1310: } {wal 1}",
          "1311: do_test wal-20.2 {",
          "1312:   set ::buddy [launch_testfixture]",
          "1313:   testfixture $::buddy {",
          "1315:     db transaction { db eval {",
          "1316:       PRAGMA wal_autocheckpoint = 0;",
          "1331:     } }",
          "1332:   }",
          "1333: } {0}",
          "1334: do_test wal-20.3 {",
          "1335:   close $::buddy",
          "1336:   execsql { PRAGMA wal_checkpoint }",
          "1337:   execsql { SELECT count(*) FROM t1 }",
          "1338: } {16384}",
          "1339: do_test wal-20.4 {",
          "1340:   db close",
          "1341:   sqlite3 db test.db",
          "1342:   execsql { SELECT count(*) FROM t1 }",
          "1343: } {16384}",
          "1344: integrity_check wal-20.5",
          "",
          "[Added Lines]",
          "1300: if {[permutation]!=\"unix-excl\"} {",
          "1301:   do_test wal-20.1 {",
          "1302:     catch {db close}",
          "1303:     forcedelete test.db test.db-wal test.db-journal",
          "1305:     execsql {",
          "1306:       PRAGMA journal_mode = WAL;",
          "1307:       CREATE TABLE t1(x);",
          "1308:       INSERT INTO t1 VALUES(randomblob(900));",
          "1309:       SELECT count(*) FROM t1;",
          "1310:     }",
          "1311:   } {wal 1}",
          "1312:   do_test wal-20.2 {",
          "1313:     set ::buddy [launch_testfixture]",
          "1314:     testfixture $::buddy {",
          "1315:       sqlite3 db test.db",
          "1316:       db transaction { db eval {",
          "1317:         PRAGMA wal_autocheckpoint = 0;",
          "1332:       } }",
          "1333:     }",
          "1334:   } {0}",
          "1335:   do_test wal-20.3 {",
          "1336:     close $::buddy",
          "1337:     execsql { PRAGMA wal_checkpoint }",
          "1338:     execsql { SELECT count(*) FROM t1 }",
          "1339:   } {16384}",
          "1340:   do_test wal-20.4 {",
          "1341:     db close",
          "1342:     sqlite3 db test.db",
          "1343:     execsql { SELECT count(*) FROM t1 }",
          "1344:   } {16384}",
          "1345:   integrity_check wal-20.5",
          "1346: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9b2bd91d9a4bf91c3dff1caf1ec2687ed9b54873",
      "candidate_info": {
        "commit_hash": "9b2bd91d9a4bf91c3dff1caf1ec2687ed9b54873",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/9b2bd91d9a4bf91c3dff1caf1ec2687ed9b54873",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/sqlite.h.in"
        ],
        "message": "Give a link to the URI Filename document in the documentation to the various sqlite3_uri_parameter() interfaces.\n\nFossilOrigin-Name: 69b0b2ee536fda8975f60643f7f1891db4649958aca476822ea2a632ce731992",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/sqlite.h.in||src/sqlite.h.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 54f2399fb2a626602d405c857297f2da833f9f048cbc478f9110bed2e9bda299",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/sqlite.h.in||src/sqlite.h.in": [
          "File: src/sqlite.h.in -> src/sqlite.h.in"
        ]
      }
    },
    {
      "candidate_hash": "41e0717bcb409de9ec296c3215b572dfab2697c9",
      "candidate_info": {
        "commit_hash": "41e0717bcb409de9ec296c3215b572dfab2697c9",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/41e0717bcb409de9ec296c3215b572dfab2697c9",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/resetdb.test"
        ],
        "message": "Update test file \"resetdb.test\" so that it works with the \"prepare\" permutation.\n\nFossilOrigin-Name: 95d338124be2e0e18f17354b28f4320336202f1a4ec1177df753b2800e954bfb",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/resetdb.test||test/resetdb.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 2c8769c69f301307db6663adb8b7c0b89f5959516bf6110cb8ff4b21bd903f70",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/resetdb.test||test/resetdb.test": [
          "File: test/resetdb.test -> test/resetdb.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "83:   db eval VACUUM",
          "84:   sqlite3_db_config db RESET_DB 0",
          "86:   # Verify that the reset took, even on the separate database connection",
          "87:   catchsql {",
          "88:      PRAGMA page_count;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "86:   # If using sqlite3_prepare() instead of _v2() or _v3(), the block",
          "87:   # below raises an SQLITE_SCHEMA error. The following fixes this.",
          "88:   if {[permutation]==\"prepare\"} { catchsql \"SELECT * FROM sqlite_master\" db2 }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b63d6070ee83ea13f35bee56d32fca574a1c6151",
      "candidate_info": {
        "commit_hash": "b63d6070ee83ea13f35bee56d32fca574a1c6151",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/b63d6070ee83ea13f35bee56d32fca574a1c6151",
        "files": [
          "ext/fts5/fts5_index.c",
          "ext/fts5/test/fts5corrupt3.test",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Fix an assert() in fts5 that could fail with a corrupt database.\n\nFossilOrigin-Name: 83935b950619855fb3bf05486091804ac2a61fb993c6ec826c89f943264fabc3",
        "before_after_code_files": [
          "ext/fts5/fts5_index.c||ext/fts5/fts5_index.c",
          "ext/fts5/test/fts5corrupt3.test||ext/fts5/test/fts5corrupt3.test",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts5/fts5_index.c||ext/fts5/fts5_index.c": [
          "File: ext/fts5/fts5_index.c -> ext/fts5/fts5_index.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3578: #ifdef SQLITE_DEBUG",
          "3579:       for(iLvl=0; iLvl<pStruct->nLevel; iLvl++){",
          "3580:         for(iSeg=0; iSeg<pStruct->aLevel[iLvl].nSeg; iSeg++){",
          "3582:         }",
          "3583:       }",
          "3586:       {",
          "3587:         sqlite3_stmt *pIdxSelect = fts5IdxSelectStmt(p);",
          "",
          "[Removed Lines]",
          "3581:           assert( iSegid!=pStruct->aLevel[iLvl].aSeg[iSeg].iSegid );",
          "3584:       assert( iSegid>0 && iSegid<=FTS5_MAX_SEGMENT );",
          "",
          "[Added Lines]",
          "3581:           assert_nc( iSegid!=pStruct->aLevel[iLvl].aSeg[iSeg].iSegid );",
          "3584:       assert_nc( iSegid>0 && iSegid<=FTS5_MAX_SEGMENT );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3589:           u8 aBlob[2] = {0xff, 0xff};",
          "3590:           sqlite3_bind_int(pIdxSelect, 1, iSegid);",
          "3591:           sqlite3_bind_blob(pIdxSelect, 2, aBlob, 2, SQLITE_STATIC);",
          "3593:           p->rc = sqlite3_reset(pIdxSelect);",
          "3594:           sqlite3_bind_null(pIdxSelect, 2);",
          "3595:         }",
          "",
          "[Removed Lines]",
          "3592:           assert( sqlite3_step(pIdxSelect)!=SQLITE_ROW );",
          "",
          "[Added Lines]",
          "3592:           assert_nc( sqlite3_step(pIdxSelect)!=SQLITE_ROW );",
          "",
          "---------------"
        ],
        "ext/fts5/test/fts5corrupt3.test||ext/fts5/test/fts5corrupt3.test": [
          "File: ext/fts5/test/fts5corrupt3.test -> ext/fts5/test/fts5corrupt3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "498: | end c9.db",
          "499:   }]",
          "500: } {}",
          "502: do_catchsql_test 10.1 {",
          "503:   SELECT * FROM t1 WHERE t1 MATCH 'abandon';",
          "504: } {1 {database disk image is malformed}}",
          "506: sqlite3_fts5_may_be_corrupt 0",
          "507: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "505: #-------------------------------------------------------------------------",
          "506: #",
          "507: reset_db",
          "508: do_test 11.0 {",
          "509:   sqlite3 db {}",
          "510:   db deserialize [decode_hexdb {",
          "511: | size 28672 pagesize 4096 filename c10b.db",
          "512: | page 1 offset 0",
          "513: |      0: 53 51 4c 69 74 65 20 66 6f 72 6d 61 74 20 33 00   SQLite format 3.",
          "514: |     16: 10 00 01 01 00 40 20 20 00 00 00 01 00 00 00 07   .....@  ........",
          "515: |     32: 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00   ................",
          "516: |     48: 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00   ................",
          "517: |     80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01   ................",
          "518: |     96: 00 2e 30 38 0d 00 00 00 07 0d d2 00 0f c4 0f 6d   ..08...........m",
          "519: |    112: 0f 02 0e ab 0e 4e 0d f6 0d d2 00 00 00 00 00 00   .....N..........",
          "520: |   3536: 00 00 22 07 06 17 11 11 01 31 74 61 62 6c 65 74   .........1tablet",
          "521: |   3552: 32 74 32 07 43 52 45 41 54 45 20 54 41 42 4c 45   2t2.CREATE TABLE",
          "522: |   3568: 20 74 32 28 78 29 56 06 06 17 1f 1f 01 7d 74 61    t2(x)V.......ta",
          "523: |   3584: 62 6c 65 74 31 5f 63 6f 6e 66 69 67 74 31 5f 63   blet1_configt1_c",
          "524: |   3600: 6f 6e 66 69 67 06 43 52 45 41 54 45 20 54 41 42   onfig.CREATE TAB",
          "525: |   3616: 4c 45 20 27 74 31 5f 63 6f 6e 66 69 67 27 28 6b   LE 't1_config'(k",
          "526: |   3632: 20 50 52 49 4d 41 52 59 20 4b 45 59 2c 20 76 29    PRIMARY KEY, v)",
          "527: |   3648: 20 57 49 54 48 4f 55 54 20 52 4f 57 49 44 5b 05    WITHOUT ROWID[.",
          "528: |   3664: 07 17 21 21 01 81 01 74 61 62 6c 65 74 31 5f 64   ..!!...tablet1_d",
          "529: |   3680: 6f 63 73 69 7a 65 74 31 5f 64 6f 63 73 69 7a 65   ocsizet1_docsize",
          "530: |   3696: 05 43 52 45 41 54 45 20 54 41 42 4c 45 20 27 74   .CREATE TABLE 't",
          "531: |   3712: 31 5f 64 6f 63 73 69 7a 65 27 28 69 64 20 49 4e   1_docsize'(id IN",
          "532: |   3728: 54 45 47 45 52 20 50 52 49 4d 41 52 59 20 4b 45   TEGER PRIMARY KE",
          "533: |   3744: 59 2c 20 73 7a 20 42 4c 4f 42 29 55 04 06 17 21   Y, sz BLOB)U...!",
          "534: |   3760: 21 01 77 74 61 62 6c 65 74 31 5f 63 6f 6e 74 65   !.wtablet1_conte",
          "535: |   3776: 6e 74 74 31 5f 63 6f 6e 74 65 6e 74 04 43 52 45   ntt1_content.CRE",
          "536: |   3792: 41 54 45 20 54 41 42 4c 45 20 27 74 31 5f 63 6f   ATE TABLE 't1_co",
          "537: |   3808: 6e 74 65 6e 74 27 28 69 64 20 49 4e 54 45 47 45   ntent'(id INTEGE",
          "538: |   3824: 52 20 50 52 49 4d 41 52 59 20 4b 45 59 2c 20 63   R PRIMARY KEY, c",
          "539: |   3840: 30 29 69 03 07 17 19 19 01 81 2d 74 61 62 6c 65   0)i.......-table",
          "540: |   3856: 74 31 5f 69 64 78 74 31 5f 69 64 78 03 43 52 45   t1_idxt1_idx.CRE",
          "541: |   3872: 41 54 45 20 54 41 42 4c 45 20 27 74 31 5f 69 64   ATE TABLE 't1_id",
          "542: |   3888: 78 27 28 73 65 67 69 64 2c 20 74 65 72 6d 2c 20   x'(segid, term,",
          "543: |   3904: 70 67 6e 6f 2c 20 50 52 49 4d 41 52 59 20 4b 45   pgno, PRIMARY KE",
          "544: |   3920: 59 28 73 65 67 69 64 2c 20 74 65 72 6d 29 29 20   Y(segid, term))",
          "545: |   3936: 57 49 54 48 4f 55 54 20 52 4f 57 49 44 55 02 07   WITHOUT ROWIDU..",
          "546: |   3952: 17 1b 1b 01 81 01 74 61 62 6c 65 74 31 5f 64 61   ......tablet1_da",
          "547: |   3968: 74 61 74 31 5f 64 61 74 61 02 43 52 45 41 54 45   tat1_data.CREATE",
          "548: |   3984: 20 54 41 42 4c 45 20 27 74 31 5f 64 61 74 61 27    TABLE 't1_data'",
          "549: |   4000: 28 69 64 20 49 4e 54 45 47 45 52 20 50 52 44 d9   (id INTEGER PRD.",
          "550: |   4016: 41 52 59 20 4b 45 59 2c 20 62 6c 6f 63 6b 20 42   ARY KEY, block B",
          "551: |   4032: 4c 4f 42 29 3a 01 06 17 11 11 08 63 74 61 62 6c   LOB):......ctabl",
          "552: |   4048: 65 74 31 74 31 43 52 45 41 54 45 20 56 49 52 54   et1t1CREATE VIRT",
          "553: |   4064: 55 41 4c 20 54 41 42 4c 45 20 74 31 20 55 53 49   UAL TABLE t1 USI",
          "554: |   4080: 4e 47 20 66 74 73 35 28 63 6f 6e 74 65 6e 74 29   NG fts5(content)",
          "555: | page 2 offset 4096",
          "556: |      0: 0d 00 00 00 06 0f 59 00 0f e8 0f ef 0f bd 0f b0   ......Y.........",
          "557: |     16: 0f 73 0f 59 00 00 00 00 00 00 00 00 00 00 00 00   .s.Y............",
          "558: |   3920: 00 00 00 00 00 00 00 00 00 13 84 80 80 80 80 04   ................",
          "559: |   3936: 03 01 2a 0a 00 00 00 00 01 02 02 00 02 01 01 01   ..*.............",
          "560: |   3952: 02 01 01 36 84 80 80 80 80 03 03 05 66 00 40 00   ...6........f.@.",
          "561: |   3968: 00 00 01 00 00 00 29 07 30 61 63 74 69 76 65 04   ......).0active.",
          "562: |   3984: 02 02 02 03 74 6f 6d 06 02 02 05 02 69 63 07 02   ....tom.....ic..",
          "563: |   4000: 02 01 06 62 6f 6f 6d 65 72 05 02 02 04 0b 08 07   ...boomer.......",
          "564: |   4016: 06 84 80 80 80 80 02 03 01 10 01 07 07 24 84 80   .............$..",
          "565: |   4032: 80 80 80 01 03 00 4e 00 00 00 1e 06 30 61 62 61   ......N.....0aba",
          "566: |   4048: 63 6b 01 02 02 04 02 66 74 02 02 02 04 04 6e 64   ck.....ft.....nd",
          "567: |   4064: 6f 6e 03 02 02 04 0a 07 05 01 03 00 10 03 03 0f   on..............",
          "568: |   4080: 0a 03 00 24 00 00 00 00 01 01 01 00 01 01 01 01   ...$............",
          "569: | page 3 offset 8192",
          "570: |      0: 0a 00 00 00 02 0f f3 00 0f fa 0f f3 00 00 00 00   ................",
          "571: |   4080: 00 00 00 06 04 01 0c 01 02 02 05 04 09 0c 01 02   ................",
          "572: | page 4 offset 12288",
          "573: |      0: 0d 00 00 00 07 0f b6 00 0f f6 0f ec 0f e0 0f d5   ................",
          "574: |     16: 0f ca 0f c1 0f b6 00 00 00 00 00 00 00 00 00 00   ................",
          "575: |   4016: 00 00 00 00 00 00 09 07 03 00 19 61 74 6f 6d 69   ...........atomi",
          "576: |   4032: 63 07 06 03 00 15 61 74 6f 6d 09 05 03 00 19 62   c.....atom.....b",
          "577: |   4048: 6f 6f 6d 65 72 09 04 03 00 19 61 63 74 69 76 65   oomer.....active",
          "578: |   4064: 0a 03 03 00 1b 61 62 61 6e 64 6f 6e 08 02 03 00   .....abandon....",
          "579: |   4080: 17 61 62 61 66 74 08 01 03 00 17 61 62 61 63 6b   .abaft.....aback",
          "580: | page 5 offset 16384",
          "581: |      0: 0d 00 00 00 07 0f d6 00 0f fa 0f f4 0f ee 0f e8   ................",
          "582: |     16: 0f e2 0f dc 0f d6 00 00 00 00 00 00 00 00 00 00   ................",
          "583: |   4048: 00 00 00 00 00 00 04 07 03 00 0e 01 04 06 03 00   ................",
          "584: |   4064: 0e 01 04 05 03 00 0e 01 04 04 03 00 0e 01 04 03   ................",
          "585: |   4080: 03 00 0e 01 04 02 03 00 0e 01 04 01 03 00 0e 01   ................",
          "586: | page 6 offset 20480",
          "587: |      0: 0a 00 00 00 01 0f f4 00 0f f4 00 00 00 00 00 00   ................",
          "588: |   4080: 00 00 00 00 0b 03 1b 01 76 65 72 73 69 6f 6e 04   ........version.",
          "589: | page 7 offset 24576",
          "590: |      0: 0d 00 00 00 03 0f d6 00 0f f4 0f e1 0f d6 00 00   ................",
          "591: |   4048: 00 00 00 00 00 00 09 03 02 1b 72 65 62 75 69 6c   ..........rebuil",
          "592: |   4064: 64 11 02 02 2b 69 6e 74 65 67 72 69 74 79 2d 63   d...+integrity-c",
          "593: |   4080: 68 65 63 6b 0a 01 02 1d 6f 70 74 69 6d 69 7a 65   heck....optimize",
          "594: | end c10b.db",
          "595: }]} {}",
          "597: # This returns SQLITE_CONSTRAINT instead of SQLITE_CORRUPT. The problem is",
          "598: # that the corrupted structure-record leads fts5 to try to use a segment-id",
          "599: # that is already in use. This is caught by the PRIMARY KEY constraint on",
          "600: # the %_idx table.",
          "601: #",
          "602: do_catchsql_test 11.1 {",
          "603:   UPDATE t1 SET content='abc' WHERE content='boomer';",
          "604: } {1 {constraint failed}}",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 3518c09b944c92974939b1de244401afd34de5d9aa75050e5ad55581a94e1e71",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}