{
  "cve_id": "CVE-2020-22873",
  "cve_desc": "Buffer overflow vulnerability in function NumberToPrecisionCmd in jsish before 3.0.7, allows remote attackers to execute arbitrary code.",
  "repo": "pcmacdon/jsish",
  "patch_hash": "430ea27accd4d4ffddc946c9402e7c9064835a18",
  "patch_info": {
    "commit_hash": "430ea27accd4d4ffddc946c9402e7c9064835a18",
    "repo": "pcmacdon/jsish",
    "commit_url": "https://github.com/pcmacdon/jsish/commit/430ea27accd4d4ffddc946c9402e7c9064835a18",
    "files": [
      "src/jsi.h",
      "src/jsiCmds.c",
      "src/jsiCode.c",
      "src/jsiEval.c",
      "src/jsiFilesys.c",
      "src/jsiFunc.c",
      "src/jsiHash.c",
      "src/jsiInterp.c",
      "src/jsiJSON.c",
      "src/jsiMySql.c",
      "src/jsiNumber.c",
      "src/jsiOptions.c",
      "src/jsiPstate.c",
      "src/jsiRegexp.c",
      "src/jsiSqlite.c",
      "src/jsiString.c",
      "src/jsiTree.c",
      "src/jsiUtils.c",
      "src/jsiValue.c",
      "src/jsiWebSocket.c"
    ],
    "message": "Release \"3.0.7\": Fix toPrecision bug \"stack overflow #4\".\n\nFossilOrigin-Name: 6c7f0c37027d7f890b57cb38f776af39b8f81f03e60ceeb0a231a1d21e24b5de",
    "before_after_code_files": [
      "src/jsi.h||src/jsi.h",
      "src/jsiCmds.c||src/jsiCmds.c",
      "src/jsiCode.c||src/jsiCode.c",
      "src/jsiEval.c||src/jsiEval.c",
      "src/jsiFilesys.c||src/jsiFilesys.c",
      "src/jsiFunc.c||src/jsiFunc.c",
      "src/jsiHash.c||src/jsiHash.c",
      "src/jsiInterp.c||src/jsiInterp.c",
      "src/jsiJSON.c||src/jsiJSON.c",
      "src/jsiMySql.c||src/jsiMySql.c",
      "src/jsiNumber.c||src/jsiNumber.c",
      "src/jsiOptions.c||src/jsiOptions.c",
      "src/jsiPstate.c||src/jsiPstate.c",
      "src/jsiRegexp.c||src/jsiRegexp.c",
      "src/jsiSqlite.c||src/jsiSqlite.c",
      "src/jsiString.c||src/jsiString.c",
      "src/jsiTree.c||src/jsiTree.c",
      "src/jsiUtils.c||src/jsiUtils.c",
      "src/jsiValue.c||src/jsiValue.c",
      "src/jsiWebSocket.c||src/jsiWebSocket.c"
    ]
  },
  "patch_diff": {
    "src/jsi.h||src/jsi.h": [
      "File: src/jsi.h -> src/jsi.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "5: #define JSI_VERSION_MAJOR   3",
      "6: #define JSI_VERSION_MINOR   0",
      "9: #define JSI_VERSION (JSI_VERSION_MAJOR + ((Jsi_Number)JSI_VERSION_MINOR/100.0) + ((Jsi_Number)JSI_VERSION_RELEASE/10000.0))",
      "",
      "[Removed Lines]",
      "7: #define JSI_VERSION_RELEASE 6",
      "",
      "[Added Lines]",
      "7: #define JSI_VERSION_RELEASE 7",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "217:     JSI_BUFSIZ=8192",
      "",
      "[Removed Lines]",
      "216:     JSI_MAX_NUMBER_STRING=50,",
      "",
      "[Added Lines]",
      "216:     JSI_MAX_NUMBER_STRING=100,",
      "",
      "---------------"
    ],
    "src/jsiCmds.c||src/jsiCmds.c": [
      "File: src/jsiCmds.c -> src/jsiCmds.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "845:         Jsi_ObjInsert(interp, nobj, \"name\", Jsi_ValueNewStringDup(interp, name), 0);",
      "846:         Jsi_ObjInsert(interp, nobj, \"version\", Jsi_ValueNewNumber(interp, ptr->version), 0);",
      "847:         Jsi_ObjInsert(interp, nobj, \"lastReq\", Jsi_ValueNewNumber(interp, ptr->lastReq), 0);",
      "849:         jsi_VersionNormalize(ptr->version, buf, sizeof(buf));",
      "850:         Jsi_ObjInsert(interp, nobj, \"verStr\", Jsi_ValueNewStringDup(interp, buf), 0);",
      "851:         const char *cp = (ptr->loadFile?ptr->loadFile:\"\");",
      "",
      "[Removed Lines]",
      "848:         char buf[200];",
      "",
      "[Added Lines]",
      "848:         char buf[JSI_MAX_NUMBER_STRING*2];",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1192:     Jsi_Value *vres;",
      "1193:     Jsi_Obj  *ores = Jsi_ObjNew(interp);",
      "1194:     Jsi_Value *nnv;",
      "1197:     vres = Jsi_ValueMakeObject(interp, NULL, ores);",
      "",
      "[Removed Lines]",
      "1195:     char *val, nam[200];",
      "",
      "[Added Lines]",
      "1195:     char *val, nam[JSI_BUFSIZ/2];",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "2700:     }",
      "2701:     if (bp.line<=0 && !bp.func)",
      "2702:         return Jsi_LogError(\"bad number\");",
      "2704:     bp.id = ++interp->debugOpts.breakIdx;",
      "2705:     bp.enabled = 1;",
      "2706:     snprintf(nbuf, sizeof(nbuf), \"%d\", bp.id);",
      "",
      "[Removed Lines]",
      "2703:     char nbuf[100];",
      "",
      "[Added Lines]",
      "2703:     char nbuf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "2718:     if (interp->breakpointHash)",
      "2719:     {",
      "2720:         int num;",
      "2722:         if (Jsi_GetIntFromValue(interp, val, &num) != JSI_OK)",
      "2723:             return Jsi_LogError(\"bad number\");",
      "",
      "[Removed Lines]",
      "2721:         char nbuf[100];",
      "",
      "[Added Lines]",
      "2721:         char nbuf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "2766:         return Jsi_HashKeysDump(interp, interp->breakpointHash, ret, 0);",
      "2767:     Jsi_Value *val = Jsi_ValueArrayIndex(interp, args, 0);",
      "2768:     int num;",
      "2770:     if (Jsi_GetIntFromValue(interp, val, &num) != JSI_OK)",
      "2771:         return Jsi_LogError(\"bad number\");",
      "",
      "[Removed Lines]",
      "2769:     char nbuf[100];",
      "",
      "[Added Lines]",
      "2769:     char nbuf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "3800:     Jsi_Value *flag = Jsi_ValueArrayIndex(interp, args, 1);",
      "3801:     if (!val) goto bail;",
      "3802:     if (Jsi_ValueIsNumber(interp, val)) {",
      "3804:         Jsi_Number n;",
      "3805:         if (Jsi_GetNumberFromValue(interp, val, &n) != JSI_OK)",
      "3806:             goto bail;",
      "",
      "[Removed Lines]",
      "3803:         char buf[200];",
      "",
      "[Added Lines]",
      "3803:         char buf[JSI_MAX_NUMBER_STRING*2];",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "3953:         if (bv)",
      "3954:             interp->timesStart = now;",
      "3955:         else {",
      "3957:             snprintf(buf, sizeof(buf), \" (times = %.6f sec)\\n\", (now-interp->timesStart));",
      "3958:             Jsi_Puts(interp, jsi_Stderr, buf, -1);",
      "3959:         }",
      "",
      "[Removed Lines]",
      "3956:             char buf[100];",
      "",
      "[Added Lines]",
      "3956:             char buf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------"
    ],
    "src/jsiCode.c||src/jsiCode.c": [
      "File: src/jsiCode.c -> src/jsiCode.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "436:     if (_JSICASTINT(op->op) < 0 || op->op >= OP_LASTOP) {",
      "437:         snprintf(buf, bsiz, \"Bad opcode[%d] at %d\", op->op, currentip);",
      "438:     }",
      "440:     snprintf(nbuf, sizeof(nbuf), \"%d#%d\", currentip, op->Line);",
      "441:     snprintf(buf, bsiz, \"%-8s %s \", nbuf, jsi_op_names[op->op]);",
      "",
      "[Removed Lines]",
      "439:     char nbuf[100];",
      "",
      "[Added Lines]",
      "439:     char nbuf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------"
    ],
    "src/jsiEval.c||src/jsiEval.c": [
      "File: src/jsiEval.c -> src/jsiEval.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "288: static const char *jsi_evalprint(Jsi_Value *v)",
      "289: {",
      "291:     if (!v)",
      "292:         return \"nil\";",
      "293:     if (v->vt == JSI_VT_NUMBER) {",
      "295:     } else if (v->vt == JSI_VT_BOOL) {",
      "297:     } else if (v->vt == JSI_VT_STRING) {",
      "299:     } else if (v->vt == JSI_VT_VARIABLE) {",
      "301:     } else if (v->vt == JSI_VT_NULL) {",
      "303:     } else if (v->vt == JSI_VT_OBJECT) {",
      "305:     } else if (v->vt == JSI_VT_UNDEF) {",
      "307:     }",
      "308:     return buf;",
      "309: }",
      "",
      "[Removed Lines]",
      "290:     static char buf[100];",
      "294:         snprintf(buf, 100, \"NUM:%\" JSI_NUMGFMT \" \", v->d.num);",
      "296:         snprintf(buf, 100, \"BOO:%d\", v->d.val);",
      "298:         snprintf(buf, 100, \"STR:'%s'\", v->d.s.str);",
      "300:         snprintf(buf, 100, \"VAR:%p\", v->d.lval);",
      "302:         snprintf(buf, 100, \"NULL\");",
      "304:         snprintf(buf, 100, \"OBJ:%p\", v->d.obj);",
      "306:         snprintf(buf, 100, \"UNDEFINED\");",
      "",
      "[Added Lines]",
      "290:     static char buf[JSI_MAX_NUMBER_STRING];",
      "294:         snprintf(buf, sizeof(buf), \"NUM:%\" JSI_NUMGFMT \" \", v->d.num);",
      "296:         snprintf(buf, sizeof(buf), \"BOO:%d\", v->d.val);",
      "298:         snprintf(buf, sizeof(buf), \"STR:'%s'\", v->d.s.str);",
      "300:         snprintf(buf, sizeof(buf), \"VAR:%p\", v->d.lval);",
      "302:         snprintf(buf, sizeof(buf), \"NULL\");",
      "304:         snprintf(buf, sizeof(buf), \"OBJ:%p\", v->d.obj);",
      "306:         snprintf(buf, sizeof(buf), \"UNDEFINED\");",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "403:     jsi_TryList *trylist, jsi_OpCode *ip, Jsi_OpCodes *opcodes)",
      "404: {",
      "405:     int i;",
      "407:     jsi_code_decode(interp, ip, ip - opcodes->codes, buf, sizeof(buf));",
      "408:     Jsi_Printf(interp, jsi_Stderr, \"%p: %-30.200s : THIS=%s, STACK=[\", ip, buf, jsi_evalprint(_this));",
      "409:     for (i = 0; i < interp->framePtr->Sp; ++i) {",
      "",
      "[Removed Lines]",
      "406:     char buf[200];",
      "",
      "[Added Lines]",
      "406:     char buf[JSI_MAX_NUMBER_STRING*2];",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1538:                     break;",
      "1539:                 }",
      "1540:                 int bval = 0;",
      "1542:                 Jsi_Value *vv;",
      "1543:                 Jsi_Obj *obj = v->d.obj;",
      "1544:                 if (!cp) {",
      "",
      "[Removed Lines]",
      "1541:                 char nbuf[100];",
      "",
      "[Added Lines]",
      "1541:                 char nbuf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "2155:     Jsi_IncrRefCount(interp, fargs);",
      "2156:     rc = jsi_evalcode_sub(ps, opcodes, scope, fargs, _this, *vret);",
      "2157:     Jsi_DecrRefCount(interp, fargs);",
      "2159:         if ((interp->evalFlags&JSI_EVAL_RETURN)==0)",
      "2160:             Jsi_ValueMakeUndef(interp, vret);",
      "",
      "[Removed Lines]",
      "2158:     if (interp->didReturn == 0 && !interp->exited) {",
      "",
      "[Added Lines]",
      "2158:     if (interp->didReturn == 0 && !interp->exited && rc == JSI_OK) {",
      "",
      "---------------"
    ],
    "src/jsiFilesys.c||src/jsiFilesys.c": [
      "File: src/jsiFilesys.c -> src/jsiFilesys.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1178:     if ((str = getenv(\"HOME\")) == NULL) {",
      "1179:         struct passwd pwd, *pw;",
      "1181:         if (getpwuid_r(getuid(), &pwd, buf, sizeof(buf), &pw) == 0 && pw->pw_dir)",
      "1182:             str = pw->pw_dir;",
      "1183:     }",
      "",
      "[Removed Lines]",
      "1180:         char buf[20000];",
      "",
      "[Added Lines]",
      "1180:         char buf[JSI_BUFSIZ*3];",
      "",
      "---------------"
    ],
    "src/jsiFunc.c||src/jsiFunc.c": [
      "File: src/jsiFunc.c -> src/jsiFunc.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "189: Jsi_RC jsi_ArgTypeCheck(Jsi_Interp *interp, int typ,  Jsi_Value *arg, const char *p1,",
      "190:     const char *p2, int index, Jsi_Func *func, bool isdefault) {",
      "191:     Jsi_RC rc = JSI_OK;",
      "193:     idxBuf[0] = 0;",
      "194:     if (func && arg->vt == JSI_VT_UNDEF && !interp->typeCheck.noundef && index>0 && !isdefault && !(typ&JSI_TT_UNDEFINED)) {",
      "195:         snprintf(idxBuf, sizeof(idxBuf), \" arg %d\", index);",
      "",
      "[Removed Lines]",
      "192:     char idxBuf[200];",
      "",
      "[Added Lines]",
      "192:     char idxBuf[JSI_MAX_NUMBER_STRING*2];",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "295:         Jsi_DString dStr = {};",
      "296:         const char *exp = jsi_typeName(interp, typ, &dStr);",
      "297:         const char *vtyp = jsi_TypeName(interp, (Jsi_ttype)atyp);",
      "299:         idxBuf[0] = 0;",
      "300:         if (index>0)",
      "301:             snprintf(idxBuf, sizeof(idxBuf), \" arg %d\", index);",
      "",
      "[Removed Lines]",
      "298:         char idxBuf[200];",
      "",
      "[Added Lines]",
      "298:         char idxBuf[JSI_MAX_NUMBER_STRING*2];",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "339:     if (ss==NULL && spec == NULL)",
      "340:         return JSI_OK;",
      "341:     int i, minArgs, maxArgs, mis = 0, varargs = 0;",
      "343:     if (func->type == FC_BUILDIN) {",
      "344:         varargs =  (spec->maxArgs<0);",
      "345:         maxArgs = spec->maxArgs + func->callflags.bits.addargs;",
      "",
      "[Removed Lines]",
      "342:     char nbuf[100];",
      "",
      "[Added Lines]",
      "342:     char nbuf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------"
    ],
    "src/jsiHash.c||src/jsiHash.c": [
      "File: src/jsiHash.c -> src/jsiHash.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "623:     void *key = Jsi_HashKeyGet(hPtr);",
      "624:     if (opts->keyType == JSI_KEYS_ONEWORD)",
      "625:         return Jsi_ValueNewNumber(opts->interp, (Jsi_Number)(intptr_t)key);",
      "627:     snprintf(nbuf, sizeof(nbuf), \"%p\", key);",
      "628:     return Jsi_ValueNewStringDup(opts->interp, nbuf);",
      "629: }",
      "",
      "[Removed Lines]",
      "626:     char nbuf[100];",
      "",
      "[Added Lines]",
      "626:     char nbuf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------"
    ],
    "src/jsiInterp.c||src/jsiInterp.c": [
      "File: src/jsiInterp.c -> src/jsiInterp.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "701: Jsi_Interp* Jsi_Main(Jsi_InterpOpts *opts)",
      "702: {",
      "704:     Jsi_Interp* interp = NULL;",
      "705:     int argc = 0, first = 1;",
      "706:     char **argv = NULL;",
      "",
      "[Removed Lines]",
      "703:     int rc = 0;",
      "",
      "[Added Lines]",
      "703:     Jsi_RC rc = JSI_OK;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "929:     }",
      "930:     if (jsi_deleted) //TODO: rationalize jsi_deleted, jsi_exitCode, etc",
      "931:         return jsi_DoExit(rc==JSI_EXIT?NULL:interp, jsi_exitCode);",
      "934:         Jsi_Value *ret = Jsi_ReturnValue(interp);",
      "935:         if (!Jsi_ValueIsType(interp, ret, JSI_VT_UNDEF)) {",
      "",
      "[Removed Lines]",
      "932:     if (rc == 0) {",
      "",
      "[Added Lines]",
      "932:     if (rc == JSI_OK) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "940:         }",
      "941:     } else {",
      "942:         if (!interp->parent && !interp->isHelp)",
      "944:         return jsi_DoExit(interp, 1);",
      "945:     }",
      "",
      "[Removed Lines]",
      "943:             fputs(\"ERROR\\n\", stderr);",
      "",
      "[Added Lines]",
      "943:             fprintf(stderr, \"ERROR: %s\\n\", interp->errMsgBuf);",
      "",
      "---------------"
    ],
    "src/jsiJSON.c||src/jsiJSON.c": [
      "File: src/jsiJSON.c -> src/jsiJSON.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "7: static void jsonNewDString(Jsi_Interp *interp, Jsi_DString *dStr, const char* str, int len)",
      "8: {",
      "10:     const char *cp = str;",
      "11:     int ulen;",
      "",
      "[Removed Lines]",
      "9:     char buf[100], *dp = buf;",
      "",
      "[Added Lines]",
      "9:     char buf[JSI_MAX_NUMBER_STRING], *dp = buf;",
      "",
      "---------------"
    ],
    "src/jsiMySql.c||src/jsiMySql.c": [
      "File: src/jsiMySql.c -> src/jsiMySql.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1170: static void mdbEvalSetColumnJSON(MyDbEvalContext *p, int iCol, Jsi_DString *dStr) {",
      "1171:     Jsi_Interp *interp = p->jdb->interp;",
      "1173:     MysqlPrep *prep = p->prep;",
      "1174:     SqlFieldResults *field = prep->fieldResult+iCol;",
      "1175:     if (field->isnull) {",
      "",
      "[Removed Lines]",
      "1172:     char nbuf[200];",
      "",
      "[Added Lines]",
      "1172:     char nbuf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1220: static void mdbEvalSetColumn(MyDbEvalContext *p, int iCol, Jsi_DString *dStr) {",
      "1223:     MysqlPrep *prep = p->prep;",
      "1224:     SqlFieldResults *field = prep->fieldResult+iCol;",
      "1225:     Jsi_Interp *interp = p->jdb->interp;",
      "",
      "[Removed Lines]",
      "1222:     char nbuf[200];",
      "",
      "[Added Lines]",
      "1222:     char nbuf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------"
    ],
    "src/jsiNumber.c||src/jsiNumber.c": [
      "File: src/jsiNumber.c -> src/jsiNumber.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "123: static Jsi_RC NumberToFixedCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
      "124:     Jsi_Value **ret, Jsi_Func *funcPtr)",
      "125: {",
      "127:     int prec = 0, skip = 0;",
      "128:     Jsi_Number num;",
      "129:     Jsi_Value *v;",
      "",
      "[Removed Lines]",
      "126:     char buf[100];",
      "",
      "[Added Lines]",
      "126:     char buf[JSI_MAX_NUMBER_STRING+1];",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "141: static Jsi_RC NumberToPrecisionCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
      "142:     Jsi_Value **ret, Jsi_Func *funcPtr)",
      "143: {",
      "145:     int prec = 0, skip = 0;",
      "146:     Jsi_Number num;",
      "147:     Jsi_Value *v;",
      "148:     ChkStringN(_this, funcPtr, v);",
      "149:     if (Jsi_GetIntFromValue(interp, Jsi_ValueArrayIndex(interp, args, skip), &prec) != JSI_OK)",
      "150:         return JSI_ERROR;",
      "152:     Jsi_GetDoubleFromValue(interp, v, &num);",
      "153:     snprintf(buf, sizeof(buf),\"%.*\" JSI_NUMFFMT, prec, num);",
      "154:     if (num<0)",
      "",
      "[Removed Lines]",
      "144:     char buf[100];",
      "151:     if (prec<=0) return JSI_ERROR;",
      "",
      "[Added Lines]",
      "144:     char buf[JSI_MAX_NUMBER_STRING*2];",
      "151:     if (prec<=0 || prec>JSI_MAX_NUMBER_STRING) return Jsi_LogError(\"precision must be between 1 and %d\", JSI_MAX_NUMBER_STRING);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "163: static Jsi_RC NumberToExponentialCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
      "164:     Jsi_Value **ret, Jsi_Func *funcPtr)",
      "165: {",
      "167:     int prec = 0, skip = 0;",
      "168:     Jsi_Number num;",
      "169:     Jsi_Value *v;",
      "",
      "[Removed Lines]",
      "166:     char buf[100];",
      "",
      "[Added Lines]",
      "166:     char buf[JSI_MAX_NUMBER_STRING+1];",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "191: static Jsi_RC NumberToStringCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
      "192:     Jsi_Value **ret, Jsi_Func *funcPtr)",
      "193: {",
      "195:     int radix = 10, skip = 0, argc = Jsi_ValueGetLength(interp, args);",
      "196:     Jsi_Number num;",
      "197:     Jsi_Value *v;",
      "",
      "[Removed Lines]",
      "194:     char buf[500];",
      "",
      "[Added Lines]",
      "194:     char buf[JSI_MAX_NUMBER_STRING+1];",
      "",
      "---------------"
    ],
    "src/jsiOptions.c||src/jsiOptions.c": [
      "File: src/jsiOptions.c -> src/jsiOptions.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1876:         if (JSI_OK != jsi_EnumToValue(interp, eSpec, outValue, outStr, (void*)&nval, flags))",
      "1877:             return JSI_ERROR;",
      "1878:     } else if (outStr) {",
      "1880:         snprintf(obuf, sizeof(obuf), \"%\" PRId64, inum);",
      "1881:         Jsi_DSAppend(outStr, obuf, NULL);",
      "1882:     } else {",
      "",
      "[Removed Lines]",
      "1879:         char obuf[100];",
      "",
      "[Added Lines]",
      "1879:         char obuf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------"
    ],
    "src/jsiPstate.c||src/jsiPstate.c": [
      "File: src/jsiPstate.c -> src/jsiPstate.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "239:     l->d.fp = fp;",
      "240:     Jsi_Rewind(ps->interp, fp);",
      "241:     if (skipbang) {",
      "244:             Jsi_Rewind(ps->interp, fp);",
      "245:         }",
      "246:     }",
      "",
      "[Removed Lines]",
      "242:         char buf[1000];",
      "243:         if (Jsi_Gets(ps->interp, fp, buf, 1000) && (buf[0] != '#' || buf[1] != '!')) {",
      "",
      "[Added Lines]",
      "242:         char buf[JSI_BUFSIZ];",
      "243:         if (Jsi_Gets(ps->interp, fp, buf, sizeof(buf)) && (buf[0] != '#' || buf[1] != '!')) {",
      "",
      "---------------"
    ],
    "src/jsiRegexp.c||src/jsiRegexp.c": [
      "File: src/jsiRegexp.c -> src/jsiRegexp.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "162:     int r  = regexec(reg, v, 1, &pos, regexec_flags);",
      "164:     if (r >= REG_BADPAT) {",
      "167:         regerror(r, reg, buf, sizeof(buf));",
      "168:         return Jsi_LogError(\"error while matching pattern: %s\", buf);",
      "",
      "[Removed Lines]",
      "165:         char buf[100];",
      "",
      "[Added Lines]",
      "165:         char buf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------"
    ],
    "src/jsiSqlite.c||src/jsiSqlite.c": [
      "File: src/jsiSqlite.c -> src/jsiSqlite.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1396:     bool b;",
      "1397:     if( rc != JSI_OK) {",
      "1399:         snprintf(buf, sizeof(buf), \"error in function: %.200s\", p->zName);",
      "1400:         sqlite3_result_error(context, buf, -1);",
      "",
      "[Removed Lines]",
      "1398:         char buf[250];",
      "",
      "[Added Lines]",
      "1398:         char buf[JSI_BUFSIZ];",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1761: static void dbEvalSetColumnJSON(DbEvalContext *p, int iCol, Jsi_DString *dStr) {",
      "1762:     Jsi_Interp *interp = p->jdb->interp;",
      "1765:     sqlite3_stmt *pStmt = p->pPreStmt->pStmt;",
      "",
      "[Removed Lines]",
      "1763:     char nbuf[200];",
      "",
      "[Added Lines]",
      "1763:     char nbuf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1811: static void dbEvalSetColumn(DbEvalContext *p, int iCol, Jsi_DString *dStr) {",
      "1812:     Jsi_Interp *interp = p->jdb->interp;",
      "1815:     sqlite3_stmt *pStmt = p->pPreStmt->pStmt;",
      "",
      "[Removed Lines]",
      "1813:     char nbuf[200];",
      "",
      "[Added Lines]",
      "1813:     char nbuf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "2561: static void dbOutputHexBlob(Jsi_DString *dStr, const void *pBlob, int nBlob){",
      "2562:   int i;",
      "2564:   Jsi_DSAppend(dStr, \"X'\", NULL);",
      "2565:   for(i=0; i<nBlob; i++){ snprintf(out, sizeof(out),\"%02x\",zBlob[i]&0xff);Jsi_DSAppend(dStr, out, NULL); }",
      "2566:   Jsi_DSAppend(dStr, \"'\", NULL);",
      "",
      "[Removed Lines]",
      "2563:   char out[100], *zBlob = (char *)pBlob;",
      "",
      "[Added Lines]",
      "2563:   char out[JSI_MAX_NUMBER_STRING], *zBlob = (char *)pBlob;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "4394:     DbEvalContext sEval = {};",
      "4395:     int insert = 0, replace = 0, update = 0;",
      "4397: #ifdef JSI_DB_DSTRING_SIZE",
      "4398:     JSI_DSTRING_VAR(dStr, JSI_DB_DSTRING_SIZE);",
      "4399: #else",
      "",
      "[Removed Lines]",
      "4396:     char nbuf[100], *bPtr;",
      "",
      "[Added Lines]",
      "4396:     char nbuf[JSI_MAX_NUMBER_STRING], *bPtr;",
      "",
      "---------------"
    ],
    "src/jsiString.c||src/jsiString.c": [
      "File: src/jsiString.c -> src/jsiString.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "724:         int match = regexec(regex, p, MAX_SUBREGEX, pmatch, regexec_flags);",
      "726:         if (match >= REG_BADPAT) {",
      "729:             regerror(match, regex, buf, sizeof(buf));",
      "730:             Jsi_LogError(\"error while matching pattern: %s\", buf);",
      "",
      "[Removed Lines]",
      "727:             char buf[100];",
      "",
      "[Added Lines]",
      "727:             char buf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "895:             return JSI_OK;",
      "896:         }",
      "897:         if (r >= REG_BADPAT) {",
      "900:             regerror(r, reg, buf, sizeof(buf));",
      "901:             Jsi_LogError(\"error while matching pattern: %s\", buf);",
      "",
      "[Removed Lines]",
      "898:             char buf[100];",
      "",
      "[Added Lines]",
      "898:             char buf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------"
    ],
    "src/jsiTree.c||src/jsiTree.c": [
      "File: src/jsiTree.c -> src/jsiTree.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "946:         int n;",
      "947:         int m;",
      "948:     } t1, t2;",
      "951:     wt = Jsi_TreeNew(interp, JSI_KEYS_ONEWORD, NULL);",
      "952:     mt = Jsi_TreeNew(interp, sizeof(struct tdata), NULL);",
      "",
      "[Removed Lines]",
      "949:     char nbuf[100];",
      "",
      "[Added Lines]",
      "949:     char nbuf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1038:     void *key = Jsi_TreeKeyGet(hPtr);",
      "1039:     if (opts->keyType == JSI_KEYS_ONEWORD)",
      "1040:         return Jsi_ValueNewNumber(opts->interp, (Jsi_Number)(intptr_t)key);",
      "1042:     snprintf(nbuf, sizeof(nbuf), \"%p\", key);",
      "1043:     return Jsi_ValueNewStringDup(opts->interp, nbuf);",
      "1044: }",
      "",
      "[Removed Lines]",
      "1041:     char nbuf[100];",
      "",
      "[Added Lines]",
      "1041:     char nbuf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------"
    ],
    "src/jsiUtils.c||src/jsiUtils.c": [
      "File: src/jsiUtils.c -> src/jsiUtils.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "626: static Jsi_RC jsiValueGetString(Jsi_Interp *interp, Jsi_Value* v, Jsi_DString *dStr, objwalker *owPtr)",
      "627: {",
      "629:     Jsi_DString eStr;",
      "630:     Jsi_DSInit(&eStr);",
      "631:     if (interp->maxDepth>0 && owPtr->depth > interp->maxDepth)",
      "",
      "[Removed Lines]",
      "628:     char buf[100], *str;",
      "",
      "[Added Lines]",
      "628:     char buf[JSI_MAX_NUMBER_STRING], *str;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "943: }",
      "945: static void jsiLNGetMatches(const char *str, linenoiseCompletions *lc) {",
      "947:     const char *cp, *fnam = \"Info.completions\";",
      "948:     int i = 0, len;",
      "949:     int rc, isfile = 0, start = 0, end = Jsi_Strlen(str);",
      "",
      "[Removed Lines]",
      "946:     char buf[1000], pre[1000], hpre[6] = {};",
      "",
      "[Added Lines]",
      "946:     char buf[JSI_BUFSIZ], pre[JSI_BUFSIZ], hpre[6] = {};",
      "",
      "---------------"
    ],
    "src/jsiValue.c||src/jsiValue.c": [
      "File: src/jsiValue.c -> src/jsiValue.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "401:     assert(args->vt == JSI_VT_OBJECT);",
      "402:     if (obj->isarrlist && obj->arr)",
      "403:         return ((index < 0 || (uint)index >= obj->arrCnt) ? NULL : obj->arr[index]);",
      "405:     Jsi_NumberItoA10(index, unibuf, sizeof(unibuf));",
      "406:     v = Jsi_TreeObjGetValue(args->d.obj, unibuf, 0);",
      "407:     return v;",
      "",
      "[Removed Lines]",
      "404:     char unibuf[100];",
      "",
      "[Added Lines]",
      "404:     char unibuf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "531:     if (!v)",
      "532:         goto done;",
      "533:     if (lenPtr) *lenPtr = 0;",
      "535:     switch(v->vt) {",
      "536:         case JSI_VT_STRING:",
      "537:             ntxt = v->d.s.str;",
      "",
      "[Removed Lines]",
      "534:     char unibuf[200];",
      "",
      "[Added Lines]",
      "534:     char unibuf[JSI_MAX_NUMBER_STRING*2];",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1182:             if (Jsi_ValueIsString(interp, key)) {",
      "1183:                 char *kstr = Jsi_ValueString(interp, key, NULL);",
      "1184:                 if (!Jsi_Strcmp(kstr,\"call\") || !Jsi_Strcmp(kstr,\"apply\") || !Jsi_Strcmp(kstr,\"bind\")) {",
      "1186:                     snprintf(fbuf, sizeof(fbuf), \"Function.%s\", kstr);",
      "1187:                     Jsi_Value *vv = Jsi_NameLookup(interp, fbuf);",
      "1188:                     if (vv)",
      "",
      "[Removed Lines]",
      "1185:                     char fbuf[100];",
      "",
      "[Added Lines]",
      "1185:                     char fbuf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1379:         }",
      "1380:         return JSI_ERROR;",
      "1381:     }",
      "1383:     Jsi_NumberItoA10(key, unibuf, sizeof(unibuf));",
      "1384:     Jsi_ObjInsert(interp, obj, unibuf, val, flags);",
      "1385:     return JSI_OK;",
      "",
      "[Removed Lines]",
      "1382:     char unibuf[100];",
      "",
      "[Added Lines]",
      "1382:     char unibuf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------"
    ],
    "src/jsiWebSocket.c||src/jsiWebSocket.c": [
      "File: src/jsiWebSocket.c -> src/jsiWebSocket.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "208:     Jsi_DString recvBuf; // To buffer recv when recvJSON is true.",
      "209:     Jsi_Value *onClose, *onFilter, *onRecv, *onUpload, *onGet, *onUnknown, *rootdir, *headers;",
      "210:     char *lastData;",
      "212: #if (LWS_LIBRARY_VERSION_MAJOR>1)",
      "213:     char filename[PATH_MAX];",
      "214:     long file_length;",
      "",
      "[Removed Lines]",
      "211:     char key[100]; // Lookup key.",
      "",
      "[Added Lines]",
      "211:     char key[JSI_MAX_NUMBER_STRING]; // Lookup key.",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "569: jsi_wsGetHeaders(jsi_wsPss *pss, struct lws *wsi, Jsi_DString* dStr, int lens[], int hmax)",
      "570: {",
      "571:     int n = 0, i = 0, nlen;",
      "573:     const char *cp;",
      "574:     while ((cp = (char*)lws_token_to_string((enum lws_token_indexes)n))) {",
      "575:         int len = lws_hdr_copy(wsi, buf, sizeof(buf), ( enum lws_token_indexes)n);",
      "",
      "[Removed Lines]",
      "572:     char buf[1000];",
      "",
      "[Added Lines]",
      "572:     char buf[JSI_BUFSIZ];",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1344:     Jsi_DSFree(&sStr);",
      "1345:     if (cmdPtr->debug>1)",
      "1346:         fprintf(stderr, \"FILE: %s in %s | %s\\n\", buf, cmdPtr->curRoot, Jsi_ValueString(interp, cmdPtr->rootdir, NULL));",
      "1348:     isJsiWeb = (cpde && cmdPtr->jsiFnPattern && Jsi_GlobMatch(cmdPtr->jsiFnPattern, cpde+1, 0));",
      "1349:     bool isgzip = 0;",
      "1350:     if (!ext || !ext[1])",
      "",
      "[Removed Lines]",
      "1347:     char extBuf[100], *cpde = Jsi_Strrchr(buf, '/');",
      "",
      "[Added Lines]",
      "1347:     char extBuf[JSI_BUFSIZ], *cpde = Jsi_Strrchr(buf, '/');",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1836:         if (cmdPtr->post) {",
      "1837:             unsigned char **p = (unsigned char **)in, *end = (*p) + len;",
      "1838:             int n = 0;",
      "1840:             Jsi_ValueString(interp, cmdPtr->post, &n);",
      "1841:             snprintf(buf, sizeof(buf), \"%d\", n);",
      "",
      "[Removed Lines]",
      "1839:             char buf[100];",
      "",
      "[Added Lines]",
      "1839:             char buf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "2228:     case LWS_CALLBACK_CLIENT_ESTABLISHED:",
      "2229:     case LWS_CALLBACK_ESTABLISHED:",
      "2230:         if (cmdPtr->bufferPwr2>0) {",
      "2232:             snprintf(nbuf, sizeof(nbuf), \"%d\", cmdPtr->bufferPwr2);",
      "2233:             lws_set_extension_option(wsi, \"permessage-deflate\", \"rx_buf_size\", nbuf);",
      "2234:             lws_set_extension_option(wsi, \"permessage-deflate\", \"tx_buf_size\", nbuf);",
      "",
      "[Removed Lines]",
      "2231:             char nbuf[100];",
      "",
      "[Added Lines]",
      "2231:             char nbuf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "2870:     const char *verStr = NULL;",
      "2871:     verStr = lws_get_library_version();",
      "2872:     if (verStr) {",
      "2874:         snprintf(buf, sizeof(buf), \"%s\", verStr);",
      "2875:         cp = Jsi_Strchr(buf, ' ');",
      "2876:         if (cp) *cp = 0;",
      "",
      "[Removed Lines]",
      "2873:         char buf[100], *cp;",
      "",
      "[Added Lines]",
      "2873:         char buf[JSI_MAX_NUMBER_STRING], *cp;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "f7cf5c807ddc0e7db1542ca9eea95ad60c4ed1c4",
      "candidate_info": {
        "commit_hash": "f7cf5c807ddc0e7db1542ca9eea95ad60c4ed1c4",
        "repo": "pcmacdon/jsish",
        "commit_url": "https://github.com/pcmacdon/jsish/commit/f7cf5c807ddc0e7db1542ca9eea95ad60c4ed1c4",
        "files": [
          "Makefile",
          "jsiconfig.h",
          "src/jsi.h",
          "src/parser.h"
        ],
        "message": "Fix build.\n\nFossilOrigin-Name: 52166f80d322021729e28fd899f229f28435d41522291a173c0520436c259008",
        "before_after_code_files": [
          "jsiconfig.h||jsiconfig.h",
          "src/jsi.h||src/jsi.h",
          "src/parser.h||src/parser.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/jsi.h||src/jsi.h"
          ],
          "candidate": [
            "src/jsi.h||src/jsi.h"
          ]
        }
      },
      "candidate_diff": {
        "jsiconfig.h||jsiconfig.h": [
          "File: jsiconfig.h -> jsiconfig.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #define JSI__BASE64=1",
          "2: #define JSI__CDATA=1",
          "3: #define JSI__DEBUG=1",
          "4: #define JSI__ENCRYPT=1",
          "5: #define JSI__EVENT=1",
          "6: #define JSI__FILESYS=1",
          "7: #define JSI__INFO=1",
          "8: #define JSI__LOAD=1",
          "9: #define JSI__MARKDOWN=1",
          "10: #define JSI__MATH=1",
          "11: #define JSI__MD5=1",
          "12: #define JSI__READLINE=1",
          "13: #define JSI__SHA1=1",
          "14: #define JSI__SHA256=1",
          "15: #define JSI__SIGNAL=1",
          "16: #define JSI__STUBS=1",
          "17: #define JSI__THREADS=1",
          "18: #define JSI__ZVFS=1",
          "19: #define JSI__MEMDEBUG=0",
          "20: #define JSI__MINIZ=0",
          "21: #define JSI__REGEX=0",
          "22: #define JSI__SANITIZE=0",
          "23: #define JSI__SOCKET=1",
          "24: #define JSI__SQLITE=1",
          "25: #define JSI__WEBSOCKET=1",
          "26: #define JSI__MYSQL=1",
          "",
          "---------------"
        ],
        "src/jsi.h||src/jsi.h": [
          "File: src/jsi.h -> src/jsi.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: #ifndef __JSI_H__",
          "3: #define __JSI_H__",
          "9: #define JSI_VERSION (JSI_VERSION_MAJOR + ((Jsi_Number)JSI_VERSION_MINOR/100.0) + ((Jsi_Number)JSI_VERSION_RELEASE/10000.0))",
          "",
          "[Removed Lines]",
          "5: #define JSI_VERSION_MAJOR   2",
          "6: #define JSI_VERSION_MINOR   8",
          "7: #define JSI_VERSION_RELEASE 55",
          "",
          "[Added Lines]",
          "5: #define JSI_VERSION_MAJOR   3",
          "6: #define JSI_VERSION_MINOR   0",
          "7: #define JSI_VERSION_RELEASE 0",
          "",
          "---------------"
        ],
        "src/parser.h||src/parser.h": [
          "File: src/parser.h -> src/parser.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5:    Copyright (C) 1984, 1989-1990, 2000-2015 Free Software Foundation, Inc.",
          "7:    This program is free software: you can redistribute it and/or modify",
          "8:    it under the terms of the GNU General Public License as published by",
          "9:    the Free Software Foundation, either version 3 of the License, or",
          "10:    (at your option) any later version.",
          "12:    This program is distributed in the hope that it will be useful,",
          "13:    but WITHOUT ANY WARRANTY; without even the implied warranty of",
          "14:    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
          "15:    GNU General Public License for more details.",
          "17:    You should have received a copy of the GNU General Public License",
          "21:    part or all of the Bison parser skeleton and distribute that work",
          "22:    under terms of your choice, so long as that work isn't itself a",
          "23:    parser generator using the skeleton or a modified version thereof",
          "24:    as a parser skeleton.  Alternatively, if you modify or redistribute",
          "25:    the parser skeleton itself, you may (at your option) remove this",
          "26:    special exception, which will cause the skeleton and the resulting",
          "27:    Bison output files to be licensed under the GNU General Public",
          "28:    License without this special exception.",
          "30:    This special exception was added by the Free Software Foundation in",
          "33: #ifndef YY_YY_SRC_PARSER_H_INCLUDED",
          "34: # define YY_YY_SRC_PARSER_H_INCLUDED",
          "36: #ifndef YYDEBUG",
          "37: # define YYDEBUG 0",
          "38: #endif",
          "39: #if YYDEBUG",
          "40: extern int yydebug;",
          "41: #endif",
          "44: #ifndef YYTOKENTYPE",
          "45: # define YYTOKENTYPE",
          "46:   enum yytokentype",
          "47:   {",
          "48:     IDENTIFIER = 258,",
          "49:     STRING = 259,",
          "50:     IF = 260,",
          "51:     ELSE = 261,",
          "52:     FOR = 262,",
          "53:     IN = 263,",
          "54:     WHILE = 264,",
          "55:     DO = 265,",
          "56:     CONTINUE = 266,",
          "57:     SWITCH = 267,",
          "58:     CASE = 268,",
          "59:     DEFAULT = 269,",
          "60:     BREAK = 270,",
          "61:     FUNC = 271,",
          "62:     RETURN = 272,",
          "63:     LOCAL = 273,",
          "64:     OF = 274,",
          "65:     NEW = 275,",
          "66:     DELETE = 276,",
          "67:     TRY = 277,",
          "68:     CATCH = 278,",
          "69:     FINALLY = 279,",
          "70:     THROW = 280,",
          "71:     WITH = 281,",
          "72:     UNDEF = 282,",
          "73:     _TRUE = 283,",
          "74:     _FALSE = 284,",
          "75:     _THIS = 285,",
          "76:     ARGUMENTS = 286,",
          "77:     FNUMBER = 287,",
          "78:     REGEXP = 288,",
          "79:     TYPESTRING = 289,",
          "80:     TYPENUMBER = 290,",
          "81:     TYPENULL = 291,",
          "82:     TYPEOBJECT = 292,",
          "83:     TYPEBOOLEAN = 293,",
          "84:     TYPEUSEROBJ = 294,",
          "85:     TYPEITEROBJ = 295,",
          "86:     TYPEREGEXP = 296,",
          "87:     TYPEANY = 297,",
          "88:     TYPEARRAY = 298,",
          "89:     ELLIPSIS = 299,",
          "90:     ARROW = 300,",
          "91:     __DEBUG = 301,",
          "92:     MIN_PRI = 302,",
          "93:     ARGCOMMA = 303,",
          "94:     ADDAS = 304,",
          "95:     MNSAS = 305,",
          "96:     MULAS = 306,",
          "97:     MODAS = 307,",
          "98:     LSHFAS = 308,",
          "99:     RSHFAS = 309,",
          "100:     URSHFAS = 310,",
          "101:     BANDAS = 311,",
          "102:     BORAS = 312,",
          "103:     BXORAS = 313,",
          "104:     DIVAS = 314,",
          "105:     OR = 315,",
          "106:     AND = 316,",
          "107:     EQU = 317,",
          "108:     NEQ = 318,",
          "109:     EEQU = 319,",
          "110:     NNEQ = 320,",
          "111:     LEQ = 321,",
          "112:     GEQ = 322,",
          "113:     INSTANCEOF = 323,",
          "114:     LSHF = 324,",
          "115:     RSHF = 325,",
          "116:     URSHF = 326,",
          "117:     NEG = 327,",
          "118:     INC = 328,",
          "119:     DEC = 329,",
          "120:     TYPEOF = 330,",
          "121:     VOID = 331,",
          "122:     MAX_PRI = 332",
          "123:   };",
          "124: #endif",
          "127: #if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED",
          "129: union YYSTYPE",
          "130: {",
          "133:     Jsi_OpCodes *opcodes;",
          "134:     Jsi_Value *value;",
          "135:     const char *sstr;",
          "136:     Jsi_String *vstr;",
          "137:     Jsi_Regex* regex;",
          "138:     Jsi_Number *num;",
          "139:     Jsi_ScopeStrs *scopes;",
          "140:     int inum;",
          "141:     struct jsi_CaseExprStat* caseitem;",
          "142:     struct jsi_CaseList* caselist;",
          "145: };",
          "147: typedef union YYSTYPE YYSTYPE;",
          "148: # define YYSTYPE_IS_TRIVIAL 1",
          "149: # define YYSTYPE_IS_DECLARED 1",
          "150: #endif",
          "153: #if ! defined YYLTYPE && ! defined YYLTYPE_IS_DECLARED",
          "154: typedef struct YYLTYPE YYLTYPE;",
          "155: struct YYLTYPE",
          "156: {",
          "157:   int first_line;",
          "158:   int first_column;",
          "159:   int last_line;",
          "160:   int last_column;",
          "161: };",
          "162: # define YYLTYPE_IS_DECLARED 1",
          "163: # define YYLTYPE_IS_TRIVIAL 1",
          "164: #endif",
          "168: int yyparse (struct jsi_Pstate *pstate);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7142b2c27da2f0a16a526c579b6d379df369de8a",
      "candidate_info": {
        "commit_hash": "7142b2c27da2f0a16a526c579b6d379df369de8a",
        "repo": "pcmacdon/jsish",
        "commit_url": "https://github.com/pcmacdon/jsish/commit/7142b2c27da2f0a16a526c579b6d379df369de8a",
        "files": [
          "lib/www/docs/app.js",
          "lib/www/js/Jsish.js",
          "lib/www/md/Reference.md",
          "src/jsi.h",
          "src/jsiCode.c",
          "src/jsiFunc.c",
          "src/jsiInt.h",
          "src/jsiInterp.c",
          "src/jsiLexer.c",
          "src/jsiRegexp.c",
          "src/parser.y",
          "tools/protos.jsi"
        ],
        "message": "Release \"3.4.1\": Add noES6 option for checking .js web scripts, docs cleanup\n\nFossilOrigin-Name: d171926609d98202d4070878b013b6761a16f4d989ca9da3ed4d953c40825b3f",
        "before_after_code_files": [
          "lib/www/js/Jsish.js||lib/www/js/Jsish.js",
          "src/jsi.h||src/jsi.h",
          "src/jsiCode.c||src/jsiCode.c",
          "src/jsiFunc.c||src/jsiFunc.c",
          "src/jsiInt.h||src/jsiInt.h",
          "src/jsiInterp.c||src/jsiInterp.c",
          "src/jsiLexer.c||src/jsiLexer.c",
          "src/jsiRegexp.c||src/jsiRegexp.c",
          "src/parser.y||src/parser.y",
          "tools/protos.jsi||tools/protos.jsi"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/jsi.h||src/jsi.h",
            "src/jsiCode.c||src/jsiCode.c",
            "src/jsiFunc.c||src/jsiFunc.c",
            "src/jsiInterp.c||src/jsiInterp.c",
            "src/jsiRegexp.c||src/jsiRegexp.c"
          ],
          "candidate": [
            "src/jsi.h||src/jsi.h",
            "src/jsiCode.c||src/jsiCode.c",
            "src/jsiFunc.c||src/jsiFunc.c",
            "src/jsiInterp.c||src/jsiInterp.c",
            "src/jsiRegexp.c||src/jsiRegexp.c"
          ]
        }
      },
      "candidate_diff": {
        "lib/www/js/Jsish.js||lib/www/js/Jsish.js": [
          "File: lib/www/js/Jsish.js -> lib/www/js/Jsish.js"
        ],
        "src/jsi.h||src/jsi.h": [
          "File: src/jsi.h -> src/jsi.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #define JSI_VERSION_MAJOR   3",
          "6: #define JSI_VERSION_MINOR   4",
          "9: #define JSI_VERSION (JSI_VERSION_MAJOR + ((Jsi_Number)JSI_VERSION_MINOR/100.0) + ((Jsi_Number)JSI_VERSION_RELEASE/10000.0))",
          "",
          "[Removed Lines]",
          "7: #define JSI_VERSION_RELEASE 0",
          "",
          "[Added Lines]",
          "7: #define JSI_VERSION_RELEASE 1",
          "",
          "---------------"
        ],
        "src/jsiCode.c||src/jsiCode.c": [
          "File: src/jsiCode.c -> src/jsiCode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "219:     JSI_NEW_CODESLN(0,OP_PUSHSTR, str);",
          "220: }",
          "222: static Jsi_OpCodes *code_push_vstring(jsi_Pstate *p, jsi_Pline *line, Jsi_String *s) {",
          "223:     JSI_NEW_CODESLN(0,OP_PUSHVSTR, s);",
          "224: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "222: static void code_es6(jsi_Pstate *p) {",
          "223:     Jsi_Interp *interp = p->interp;",
          "224:     if (interp->noES6) {",
          "225:         Jsi_LogError(\"es6 feature\");",
          "226:         p->err_count++;",
          "227:     }",
          "228: }",
          "",
          "---------------"
        ],
        "src/jsiFunc.c||src/jsiFunc.c": [
          "File: src/jsiFunc.c -> src/jsiFunc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "423: void jsi_FuncCallCheck(jsi_Pstate *p, jsi_Pline *line, int argc, bool isNew, const char *name, const char *namePre, Jsi_OpCodes *argCodes)",
          "424: {",
          "425:     Jsi_Interp *interp = p->interp;",
          "426:     if (interp->noCheck || name == NULL || (!interp->typeCheck.funcdecl && interp->inParse))",
          "427:         return;",
          "428:     if (name && isdigit(name[0]))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "426:     if (name && interp->noES6 && interp->noEval && (!Jsi_Strcmp(name, \"fetch\") || !Jsi_Strcmp(name, \"import\")))",
          "427:         Jsi_LogWarn(\"possible ES6 function call: %s\", name);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "493:     Jsi_Func *f = jsi_FuncNew(interp);",
          "494:     jsi_Lexer *l = pstate->lexer;",
          "495:     f->isArrow = flags&1;",
          "496:     f->isSet = flags&2;",
          "497:     f->isGet = flags&4;",
          "498:     f->type = FC_NORMAL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "498:     if (f->isArrow && interp->noES6) {",
          "499:         Jsi_LogError(\"Arrow function used in noES6 mode: %s\", name);",
          "500:         pstate->err_count++;",
          "501:     }",
          "",
          "---------------"
        ],
        "src/jsiInt.h||src/jsiInt.h": [
          "File: src/jsiInt.h -> src/jsiInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1130:     bool noConfig;",
          "1131:     bool noLoad;",
          "1132:     bool noEval;",
          "1133:     bool noAutoLoad;",
          "1134:     bool noStderr;",
          "1135:     bool noSubInterps;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1133:     bool noES6;",
          "",
          "---------------"
        ],
        "src/jsiInterp.c||src/jsiInterp.c": [
          "File: src/jsiInterp.c -> src/jsiInterp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "111:     JSI_OPT(BOOL,  Jsi_Interp, noCheck,     .help=\"Disable type checking\", .flags=JSI_OPT_LOCKSAFE ),",
          "112:     JSI_OPT(BOOL,  Jsi_Interp, noConfig,    .help=\"Disable use of Interp.conf to change options after create\", jsi_IIOF),",
          "113:     JSI_OPT(BOOL,  Jsi_Interp, noError,     .help=\"Type checks failures are warning\", .flags=JSI_OPT_LOCKSAFE ),",
          "114:     JSI_OPT(BOOL,  Jsi_Interp, noEval,      .help=\"Disable eval: just parses file to check syntax\", jsi_IIOF),",
          "115:     JSI_OPT(BOOL,  Jsi_Interp, noInput,     .help=\"Disable use of console.input()\", .flags=JSI_OPT_LOCKSAFE),",
          "116:     JSI_OPT(BOOL,  Jsi_Interp, noLoad,      .help=\"Disable load of shared libs\", .flags=JSI_OPT_LOCKSAFE),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "114:     JSI_OPT(BOOL,  Jsi_Interp, noES6,       .help=\"Warn/error when ES6 features are used, eg. arrow funcs or let/const\" ),",
          "",
          "---------------"
        ],
        "src/jsiLexer.c||src/jsiLexer.c": [
          "File: src/jsiLexer.c -> src/jsiLexer.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "484:             if (!regtxt)",
          "485:                 return 0;",
          "486:             Jsi_Regex *re = Jsi_RegExpNew(interp, regtxt, JSI_REG_STATIC);",
          "488:                  Jsi_Free(regtxt);",
          "489:                  return -1;",
          "490:             }",
          "",
          "[Removed Lines]",
          "487:             if (!(yylvalp->regex = re)) {",
          "",
          "[Added Lines]",
          "487:             if (!(yylvalp->regex = re) && !(interp->noEval && interp->noES6)) {",
          "",
          "---------------"
        ],
        "src/jsiRegexp.c||src/jsiRegexp.c": [
          "File: src/jsiRegexp.c -> src/jsiRegexp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "37: {",
          "38:     bool isNew;",
          "39:     Jsi_HashEntry *hPtr;",
          "41:     char c, *cm, *ce;",
          "42:     const char *cp;",
          "43:     Jsi_Regex *re;",
          "",
          "[Removed Lines]",
          "40:     int flag = REG_EXTENDED;",
          "",
          "[Added Lines]",
          "40:     int flag = REG_EXTENDED, rec = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "80:     }",
          "82:     regex_t reg;",
          "86:         return NULL;",
          "87:     }",
          "",
          "[Removed Lines]",
          "83:     if (!jsi_regexValid(cp) || regcomp(&reg, cp, flag)) {",
          "85:         Jsi_LogError(\"Invalid regex string '%s'\", cp);",
          "",
          "[Added Lines]",
          "83:     if (!jsi_regexValid(cp) || (rec=regcomp(&reg, cp, flag))) {",
          "84:         char errbuf[200];",
          "85:         errbuf[0] = 0;",
          "87:         if (rec) {",
          "88:             regerror(rec, &reg, errbuf, sizeof(errbuf)-20);",
          "89:             if (rec==REG_BADRPT && Jsi_Strstr(cp, \"(?:\"))",
          "90:                 strcat(errbuf, \" eg. (?:\");",
          "91:         }",
          "92:         bool iswarn = (interp->inParse && interp->noEval && interp->noES6);",
          "93:         Jsi_LogMsg(interp, NULL,(iswarn?JSI_LOG_WARN:JSI_LOG_ERROR), \"Invalid regex string '%s' : %s\", cp, errbuf);",
          "",
          "---------------"
        ],
        "src/parser.y||src/parser.y": [
          "File: src/parser.y -> src/parser.y",
          "--- Hunk 1 ---",
          "[Context before]",
          "151: localvar:",
          "152:     LOCAL { $$ = LOCAL; }",
          "155: ;",
          "157: objexport:",
          "",
          "[Removed Lines]",
          "153:     | LOCALLET { $$ = LOCALLET; }",
          "154:     | LOCALCONST { $$ = LOCALCONST; }",
          "",
          "[Added Lines]",
          "153:     | LOCALLET { $$ = LOCALLET;  code_es6(pstate);}",
          "154:     | LOCALCONST { $$ = LOCALCONST; code_es6(pstate); }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "390: inof:",
          "391:     IN      { $$ = 0; }",
          "393: ;",
          "395: for_statement:",
          "",
          "[Removed Lines]",
          "392:     | OF    { $$ = 1; }",
          "",
          "[Added Lines]",
          "392:     | OF    { $$ = 1;  code_es6(pstate); }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "846:     IDENTIFIER '(' args_opt ')' func_statement_block {",
          "847:         Jsi_OpCodes *lval = code_push_func(pstate, &@3, jsi_FuncMake(pstate, $3, $5, &@1, $1, 0));",
          "848:         lval->lvalue_flag = 1;",
          "850:         $$ = codes_join(code_push_string(pstate,&@1, $1), lval);",
          "851:         jsi_PstatePop(pstate);",
          "852:     }",
          "",
          "[Removed Lines]",
          "849:         lval->lvalue_name = $1;",
          "",
          "[Added Lines]",
          "849:         lval->lvalue_name = $1;",
          "850:         code_es6(pstate);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "855: itemident:",
          "856:     itemfunc { $$ = $1; }",
          "857:     | IDENTIFIER  {",
          "858:         Jsi_OpCodes *lval = code_push_index(pstate, &@1, $1, 0);",
          "859:         lval->lvalue_flag = 1;",
          "860:         lval->lvalue_name = $1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "859:         code_es6(pstate);",
          "",
          "---------------"
        ],
        "tools/protos.jsi||tools/protos.jsi": [
          "File: tools/protos.jsi -> tools/protos.jsi"
        ]
      }
    },
    {
      "candidate_hash": "1ff1545df0d40f58dfed10bca4caf7bd6b390f00",
      "candidate_info": {
        "commit_hash": "1ff1545df0d40f58dfed10bca4caf7bd6b390f00",
        "repo": "pcmacdon/jsish",
        "commit_url": "https://github.com/pcmacdon/jsish/commit/1ff1545df0d40f58dfed10bca4caf7bd6b390f00",
        "files": [
          "Configs/make_default.conf",
          "Configs/make_devel.conf",
          "Configs/make_memdebug.conf",
          "Configs/make_minimal.conf",
          "Configs/make_musl.conf",
          "Configs/make_muslssl.conf",
          "Configs/make_mysql.conf",
          "Configs/make_noext.conf",
          "Configs/make_release.conf",
          "Configs/make_sanitize.conf",
          "Configs/make_static.conf",
          "Configs/make_win.conf",
          "Configs/make_winssl.conf",
          "Makefile",
          "lib/Manage.jsi",
          "lib/SqliteUI/SqliteUI.jsi",
          "lib/Zip.jsi",
          "lib/www/js/Jsish.js",
          "lib/www/md/Building.md",
          "lib/www/md/Reference.md",
          "src/jsi.h",
          "src/jsiCmds.c",
          "src/jsiEval.c",
          "src/jsiFileCmds.c",
          "src/jsiFilesys.c",
          "src/jsiInterp.c",
          "src/jsiMySql.c",
          "src/jsiStubs.h",
          "src/jsiUtils.c",
          "src/jsiWebSocket.c",
          "tests/arrow.jsi",
          "tests/badfunc.jsi",
          "tools/protos.jsi",
          "zhash.txt"
        ],
        "message": "Refactor\n\nFossilOrigin-Name: 6b4bb53c779f8e4f02f0a005514e06dc41fe80dc33112a493f284c3c4fc1d70a",
        "before_after_code_files": [
          "Configs/make_default.conf||Configs/make_default.conf",
          "Configs/make_memdebug.conf||Configs/make_memdebug.conf",
          "Configs/make_minimal.conf||Configs/make_minimal.conf",
          "Configs/make_musl.conf||Configs/make_musl.conf",
          "Configs/make_muslssl.conf||Configs/make_muslssl.conf",
          "Configs/make_release.conf||Configs/make_mysql.conf",
          "Configs/make_noext.conf||Configs/make_noext.conf",
          "Configs/make_devel.conf||Configs/make_sanitize.conf",
          "Configs/make_static.conf||Configs/make_static.conf",
          "Configs/make_win.conf||Configs/make_win.conf",
          "Configs/make_winssl.conf||Configs/make_winssl.conf",
          "lib/Manage.jsi||liManage.jsi",
          "lib/SqliteUI/SqliteUI.jsi||liSqliteUI/SqliteUI.jsi",
          "lib/Zip.jsi||liZip.jsi",
          "lib/www/js/Jsish.js||liwww/js/Jsish.js",
          "src/jsi.h||src/jsi.h",
          "src/jsiCmds.c||src/jsiCmds.c",
          "src/jsiEval.c||src/jsiEval.c",
          "src/jsiFileCmds.c||src/jsiFileCmds.c",
          "src/jsiFilesys.c||src/jsiFilesys.c",
          "src/jsiInterp.c||src/jsiInterp.c",
          "src/jsiMySql.c||src/jsiMySql.c",
          "src/jsiStubs.h||src/jsiStubs.h",
          "src/jsiUtils.c||src/jsiUtils.c",
          "src/jsiWebSocket.c||src/jsiWebSocket.c",
          "tests/arrow.jsi||tests/arrow.jsi",
          "tests/badfunc.jsi||tests/badfunc.jsi",
          "tools/protos.jsi||tools/protos.jsi"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/jsi.h||src/jsi.h",
            "src/jsiCmds.c||src/jsiCmds.c",
            "src/jsiEval.c||src/jsiEval.c",
            "src/jsiFilesys.c||src/jsiFilesys.c",
            "src/jsiInterp.c||src/jsiInterp.c",
            "src/jsiMySql.c||src/jsiMySql.c",
            "src/jsiUtils.c||src/jsiUtils.c",
            "src/jsiWebSocket.c||src/jsiWebSocket.c"
          ],
          "candidate": [
            "src/jsi.h||src/jsi.h",
            "src/jsiCmds.c||src/jsiCmds.c",
            "src/jsiEval.c||src/jsiEval.c",
            "src/jsiFilesys.c||src/jsiFilesys.c",
            "src/jsiInterp.c||src/jsiInterp.c",
            "src/jsiMySql.c||src/jsiMySql.c",
            "src/jsiUtils.c||src/jsiUtils.c",
            "src/jsiWebSocket.c||src/jsiWebSocket.c"
          ]
        }
      },
      "candidate_diff": {
        "Configs/make_default.conf||Configs/make_default.conf": [
          "File: Configs/make_default.conf -> Configs/make_default.conf",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: # make.conf :",
          "3: JSI_CONFIG_DEFINED=1",
          "4: JSI__BASE64=1",
          "5: JSI__CDATA=1",
          "",
          "[Removed Lines]",
          "2: DEFCONFIG_VER=2.0332",
          "",
          "[Added Lines]",
          "2: DEFCONFIG_VER=3.0500",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "23: WITH_EXT_SOCKET=1",
          "24: WITH_EXT_SQLITE=1",
          "25: WITH_EXT_WEBSOCKET=1",
          "27: BUILDIN_SQLITE=1",
          "28: BUILDIN_WEBSOCKET=1",
          "29: JSI__ZIPLIB=1",
          "",
          "[Removed Lines]",
          "26: WITH_MOD_MYSQL=1",
          "",
          "[Added Lines]",
          "26: WITH_MOD_MYSQL=0",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "32: PREFIX=/usr/local",
          "33: LINKSTATIC=0",
          "34: XCPREFIX=",
          "37: PROGFLAGS=  -DJSI__BASE64=1 -DJSI__CDATA=1 -DJSI__DEBUG=1 -DJSI__ENCRYPT=1 -DJSI__EVENT=1 -DJSI__FILESYS=1 -DJSI__INFO=1 -DJSI__LOAD=1 -DJSI__MATH=1 -DJSI__MD5=1 -DJSI__MINIZ=1 -DJSI__READLINE=1 -DJSI__SHA1=1 -DJSI__SHA256=1 -DJSI__SIGNAL=1 -DJSI__STUBS=1 -DJSI__THREADS=1 -DJSI__ZVFS=1 -DJSI__MEMDEBUG=0 -DJSI__REGEX=0 -DJSI__SANITIZE=0 -DJSI__SOCKET=1 -DJSI__SQLITE=1 -DJSI__WEBSOCKET=1",
          "40: # command: ./configure --config=default",
          "41: # prefix : /usr/local",
          "",
          "[Removed Lines]",
          "35: BUILDMODS=mysql",
          "38: MODFLAGS=  -DJSI__MYSQL=1",
          "",
          "[Added Lines]",
          "35: BUILDMODS=",
          "38: MODFLAGS=  -DJSI__MYSQL=0",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "45: # nozip  : 0",
          "46: # opt    : base64,cdata,debug,encrypt,event,filesys,info,load,math,md5,readline,sha1,sha256,signal,stubs,threads,zvfs",
          "47: # ext    : socket,sqlite,websocket",
          "",
          "[Removed Lines]",
          "48: # mod    : mysql",
          "",
          "[Added Lines]",
          "48: # mod    :",
          "",
          "---------------"
        ],
        "Configs/make_memdebug.conf||Configs/make_memdebug.conf": [
          "File: Configs/make_memdebug.conf -> Configs/make_memdebug.conf",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: # make.conf : memdebug",
          "3: JSI_CONFIG_DEFINED=1",
          "4: JSI__BASE64=1",
          "5: JSI__CDATA=1",
          "",
          "[Removed Lines]",
          "2: DEFCONFIG_VER=2.0332",
          "",
          "[Added Lines]",
          "2: DEFCONFIG_VER=3.0500",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "13: JSI__MD5=1",
          "14: JSI__MINIZ=1",
          "15: JSI__READLINE=1",
          "17: JSI__SHA1=1",
          "18: JSI__SHA256=1",
          "19: JSI__SIGNAL=1",
          "",
          "[Removed Lines]",
          "16: JSI__SANITIZE=0",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "21: JSI__THREADS=1",
          "22: JSI__ZVFS=1",
          "23: JSI__MEMDEBUG=1",
          "24: WITH_EXT_SOCKET=1",
          "25: WITH_EXT_SQLITE=1",
          "26: WITH_EXT_WEBSOCKET=1",
          "28: BUILDIN_SQLITE=1",
          "29: BUILDIN_WEBSOCKET=1",
          "30: JSI__ZIPLIB=1",
          "",
          "[Removed Lines]",
          "27: WITH_EXT_MYSQL=1",
          "",
          "[Added Lines]",
          "23: JSI__SANITIZE=0",
          "27: WITH_EXT_SQLITE=1",
          "28: WITH_EXT_WEBSOCKET=1",
          "29: WITH_EXT_MYSQL=0",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "35: XCPREFIX=",
          "36: BUILDMODS=",
          "39: MODFLAGS=",
          "42: # prefix : /usr/local",
          "43: # program: jsish",
          "44: # target : unix",
          "45: # shared : 0",
          "46: # nozip  : 0",
          "49: # mod    :",
          "",
          "[Removed Lines]",
          "38: PROGFLAGS=  -DJSI__BASE64=1 -DJSI__CDATA=1 -DJSI__DEBUG=1 -DJSI__ENCRYPT=1 -DJSI__EVENT=1 -DJSI__FILESYS=1 -DJSI__INFO=1 -DJSI__LOAD=1 -DJSI__MATH=1 -DJSI__MD5=1 -DJSI__MINIZ=1 -DJSI__READLINE=1 -DJSI__SHA1=1 -DJSI__SHA256=1 -DJSI__SIGNAL=1 -DJSI__STUBS=1 -DJSI__THREADS=1 -DJSI__ZVFS=1 -DJSI__MEMDEBUG=1 -DJSI__REGEX=0 -DJSI__SANITIZE=0 -DJSI__SOCKET=1 -DJSI__SQLITE=1 -DJSI__WEBSOCKET=1 -DJSI__MYSQL=1",
          "41: # command: ./configure --ext=+mysql --opt=+memdebug --label=memdebug",
          "47: # opt    : base64,cdata,debug,encrypt,event,filesys,info,load,math,md5,readline,sha1,sha256,signal,stubs,threads,zvfs,memdebug",
          "48: # ext    : socket,sqlite,websocket,mysql",
          "",
          "[Added Lines]",
          "40: PROGFLAGS=  -DJSI__BASE64=1 -DJSI__CDATA=1 -DJSI__DEBUG=1 -DJSI__ENCRYPT=1 -DJSI__EVENT=1 -DJSI__FILESYS=1 -DJSI__INFO=1 -DJSI__LOAD=1 -DJSI__MATH=1 -DJSI__MD5=1 -DJSI__READLINE=1 -DJSI__SHA1=1 -DJSI__SHA256=1 -DJSI__SIGNAL=1 -DJSI__STUBS=1 -DJSI__THREADS=1 -DJSI__ZVFS=1 -DJSI__MEMDEBUG=1 -DJSI__MINIZ=1 -DJSI__REGEX=0 -DJSI__SANITIZE=0 -DJSI__SOCKET=1 -DJSI__SQLITE=1 -DJSI__WEBSOCKET=1 -DJSI__SQLITE=1 -DJSI__WEBSOCKET=1 -DJSI__MYSQL=0",
          "43: # command: ./configure --ext=+sqlite,websocket --label=memdebug --opt=+sanitize,memdebug",
          "49: # opt    : base64,cdata,debug,encrypt,event,filesys,info,load,math,md5,readline,sha1,sha256,signal,stubs,threads,zvfs,sanitize,memdebug",
          "50: # ext    : socket,sqlite,websocket,sqlite,websocket",
          "",
          "---------------"
        ],
        "Configs/make_minimal.conf||Configs/make_minimal.conf": [
          "File: Configs/make_minimal.conf -> Configs/make_minimal.conf",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: # make.conf : Minimal",
          "3: JSI_CONFIG_DEFINED=1",
          "4: JSI__FILESYS=1",
          "5: JSI__INFO=1",
          "",
          "[Removed Lines]",
          "2: DEFCONFIG_VER=2.0332",
          "",
          "[Added Lines]",
          "2: DEFCONFIG_VER=3.0500",
          "",
          "---------------"
        ],
        "Configs/make_musl.conf||Configs/make_musl.conf": [
          "File: Configs/make_musl.conf -> Configs/make_musl.conf",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: # make.conf : Musl",
          "3: JSI_CONFIG_DEFINED=1",
          "4: JSI__BASE64=1",
          "5: JSI__CDATA=1",
          "",
          "[Removed Lines]",
          "2: DEFCONFIG_VER=2.0332",
          "",
          "[Added Lines]",
          "2: DEFCONFIG_VER=3.0500",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "23: WITH_EXT_SOCKET=1",
          "24: WITH_EXT_SQLITE=1",
          "25: WITH_EXT_WEBSOCKET=1",
          "27: BUILDIN_SQLITE=1",
          "28: BUILDIN_WEBSOCKET=1",
          "29: JSI__ZIPLIB=1",
          "",
          "[Removed Lines]",
          "26: WITH_MOD_MYSQL=1",
          "",
          "[Added Lines]",
          "26: WITH_MOD_MYSQL=0",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "32: PREFIX=/usr/local",
          "33: LINKSTATIC=1",
          "34: XCPREFIX=",
          "37: PROGFLAGS=  -DJSI__BASE64=1 -DJSI__CDATA=1 -DJSI__DEBUG=1 -DJSI__ENCRYPT=1 -DJSI__EVENT=1 -DJSI__FILESYS=1 -DJSI__INFO=1 -DJSI__LOAD=1 -DJSI__MATH=1 -DJSI__MD5=1 -DJSI__READLINE=1 -DJSI__SHA1=1 -DJSI__SHA256=1 -DJSI__SIGNAL=1 -DJSI__STUBS=1 -DJSI__THREADS=1 -DJSI__ZVFS=1 -DJSI__MEMDEBUG=0 -DJSI__MINIZ=1 -DJSI__REGEX=0 -DJSI__SANITIZE=0 -DJSI__SOCKET=1 -DJSI__SQLITE=1 -DJSI__WEBSOCKET=1",
          "40: # command: ./configure --target=musl --opt=+miniz --static --label=Musl",
          "41: # prefix : /usr/local",
          "",
          "[Removed Lines]",
          "35: BUILDMODS=mysql",
          "38: MODFLAGS=  -DJSI__MYSQL=1",
          "",
          "[Added Lines]",
          "35: BUILDMODS=",
          "38: MODFLAGS=  -DJSI__MYSQL=0",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "45: # nozip  : 0",
          "46: # opt    : base64,cdata,debug,encrypt,event,filesys,info,load,math,md5,sha1,sha256,signal,stubs,threads,zvfs,miniz",
          "47: # ext    : socket,sqlite,websocket",
          "",
          "[Removed Lines]",
          "48: # mod    : mysql",
          "",
          "[Added Lines]",
          "48: # mod    :",
          "",
          "---------------"
        ],
        "Configs/make_muslssl.conf||Configs/make_muslssl.conf": [
          "File: Configs/make_muslssl.conf -> Configs/make_muslssl.conf",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: # make.conf : Musl",
          "3: JSI_CONFIG_DEFINED=1",
          "4: WITH_SSL=1",
          "5: JSI__BASE64=1",
          "",
          "[Removed Lines]",
          "2: DEFCONFIG_VER=2.0332",
          "",
          "[Added Lines]",
          "2: DEFCONFIG_VER=3.0500",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "24: WITH_EXT_SOCKET=1",
          "25: WITH_EXT_SQLITE=1",
          "26: WITH_EXT_WEBSOCKET=1",
          "28: BUILDIN_SQLITE=1",
          "29: BUILDIN_WEBSOCKET=1",
          "30: JSI__ZIPLIB=1",
          "",
          "[Removed Lines]",
          "27: WITH_MOD_MYSQL=1",
          "",
          "[Added Lines]",
          "27: WITH_MOD_MYSQL=0",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "33: PREFIX=/usr/local",
          "34: LINKSTATIC=1",
          "35: XCPREFIX=",
          "38: PROGFLAGS=  -DJSI__BASE64=1 -DJSI__CDATA=1 -DJSI__DEBUG=1 -DJSI__ENCRYPT=1 -DJSI__EVENT=1 -DJSI__FILESYS=1 -DJSI__INFO=1 -DJSI__LOAD=1 -DJSI__MATH=1 -DJSI__MD5=1 -DJSI__READLINE=1 -DJSI__SHA1=1 -DJSI__SHA256=1 -DJSI__SIGNAL=1 -DJSI__STUBS=1 -DJSI__THREADS=1 -DJSI__ZVFS=1 -DJSI__MEMDEBUG=0 -DJSI__MINIZ=1 -DJSI__REGEX=0 -DJSI__SANITIZE=0 -DJSI__SOCKET=1 -DJSI__SQLITE=1 -DJSI__WEBSOCKET=1",
          "41: # command: ./configure --target=musl --opt=+miniz --static --label=Musl",
          "42: # prefix : /usr/local",
          "",
          "[Removed Lines]",
          "36: BUILDMODS=mysql",
          "39: MODFLAGS=  -DJSI__MYSQL=1",
          "",
          "[Added Lines]",
          "36: BUILDMODS=",
          "39: MODFLAGS=  -DJSI__MYSQL=0",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "46: # nozip  : 0",
          "47: # opt    : base64,cdata,debug,encrypt,event,filesys,info,load,math,md5,sha1,sha256,signal,stubs,threads,zvfs,miniz",
          "48: # ext    : socket,sqlite,websocket",
          "",
          "[Removed Lines]",
          "49: # mod    : mysql",
          "",
          "[Added Lines]",
          "49: # mod    :",
          "",
          "---------------"
        ],
        "Configs/make_release.conf||Configs/make_mysql.conf": [
          "File: Configs/make_release.conf -> Configs/make_mysql.conf",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: DEFCONFIG_VER=2.0332",
          "3: JSI_CONFIG_DEFINED=1",
          "4: JSI__BASE64=1",
          "",
          "[Removed Lines]",
          "1: # make.conf : Release",
          "",
          "[Added Lines]",
          "1: # make.conf :",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "23: WITH_EXT_SOCKET=1",
          "24: WITH_EXT_SQLITE=1",
          "25: WITH_EXT_WEBSOCKET=1",
          "29: BUILDIN_SQLITE=1",
          "30: BUILDIN_WEBSOCKET=1",
          "31: JSI__ZIPLIB=1",
          "",
          "[Removed Lines]",
          "26: WITH_EXT_SQLITE=1",
          "27: WITH_EXT_WEBSOCKET=1",
          "28: WITH_EXT_MYSQL=1",
          "",
          "[Added Lines]",
          "26: WITH_MOD_MYSQL=1",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "34: PREFIX=/usr/local",
          "35: LINKSTATIC=0",
          "36: XCPREFIX=",
          "43: # prefix : /usr/local",
          "44: # program: jsish",
          "45: # target : unix",
          "46: # shared : 0",
          "47: # nozip  : 0",
          "48: # opt    : base64,cdata,debug,encrypt,event,filesys,info,load,math,md5,readline,sha1,sha256,signal,stubs,threads,zvfs",
          "",
          "[Removed Lines]",
          "37: BUILDMODS=",
          "39: PROGFLAGS=  -DJSI__BASE64=1 -DJSI__CDATA=1 -DJSI__DEBUG=1 -DJSI__ENCRYPT=1 -DJSI__EVENT=1 -DJSI__FILESYS=1 -DJSI__INFO=1 -DJSI__LOAD=1 -DJSI__MATH=1 -DJSI__MD5=1 -DJSI__MINIZ=1 -DJSI__READLINE=1 -DJSI__SHA1=1 -DJSI__SHA256=1 -DJSI__SIGNAL=1 -DJSI__STUBS=1 -DJSI__THREADS=1 -DJSI__ZVFS=1 -DJSI__MEMDEBUG=0 -DJSI__REGEX=0 -DJSI__SANITIZE=0 -DJSI__SOCKET=1 -DJSI__SQLITE=1 -DJSI__WEBSOCKET=1 -DJSI__SQLITE=1 -DJSI__WEBSOCKET=1 -DJSI__MYSQL=1",
          "40: MODFLAGS=",
          "42: # command: ./configure --ext=+sqlite,websocket,mysql --label=Release",
          "49: # ext    : socket,sqlite,websocket,sqlite,websocket,mysql",
          "50: # mod    :",
          "",
          "[Added Lines]",
          "35: BUILDMODS=mysql",
          "37: PROGFLAGS=  -DJSI__BASE64=1 -DJSI__CDATA=1 -DJSI__DEBUG=1 -DJSI__ENCRYPT=1 -DJSI__EVENT=1 -DJSI__FILESYS=1 -DJSI__INFO=1 -DJSI__LOAD=1 -DJSI__MATH=1 -DJSI__MD5=1 -DJSI__MINIZ=1 -DJSI__READLINE=1 -DJSI__SHA1=1 -DJSI__SHA256=1 -DJSI__SIGNAL=1 -DJSI__STUBS=1 -DJSI__THREADS=1 -DJSI__ZVFS=1 -DJSI__MEMDEBUG=0 -DJSI__REGEX=0 -DJSI__SANITIZE=0 -DJSI__SOCKET=1 -DJSI__SQLITE=1 -DJSI__WEBSOCKET=1",
          "38: MODFLAGS=  -DJSI__MYSQL=1",
          "40: # command: ./configure --config=default",
          "47: # ext    : socket,sqlite,websocket",
          "48: # mod    : mysql",
          "",
          "---------------"
        ],
        "Configs/make_noext.conf||Configs/make_noext.conf": [
          "File: Configs/make_noext.conf -> Configs/make_noext.conf",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: # make.conf : Release",
          "3: JSI_CONFIG_DEFINED=1",
          "4: JSI__BASE64=1",
          "5: JSI__CDATA=1",
          "",
          "[Removed Lines]",
          "2: DEFCONFIG_VER=2.0332",
          "",
          "[Added Lines]",
          "2: DEFCONFIG_VER=3.0500",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "39: PROGFLAGS=  -DJSI__BASE64=1 -DJSI__CDATA=1 -DJSI__DEBUG=1 -DJSI__ENCRYPT=1 -DJSI__EVENT=1 -DJSI__FILESYS=1 -DJSI__INFO=1 -DJSI__LOAD=1 -DJSI__MATH=1 -DJSI__MD5=1 -DJSI__MINIZ=1 -DJSI__READLINE=1 -DJSI__SHA1=1 -DJSI__SHA256=1 -DJSI__SIGNAL=1 -DJSI__STUBS=1 -DJSI__THREADS=1 -DJSI__ZVFS=1 -DJSI__MEMDEBUG=0 -DJSI__REGEX=0 -DJSI__SANITIZE=0 -DJSI__SOCKET=0 -DJSI__SQLITE=0 -DJSI__WEBSOCKET=0 -DJSI__SQLITE=0 -DJSI__WEBSOCKET=0 -DJSI__MYSQL=0",
          "40: MODFLAGS=",
          "43: # prefix : /usr/local",
          "44: # program: jsish",
          "45: # target : unix",
          "46: # shared : 0",
          "47: # nozip  : 0",
          "48: # opt    : base64,cdata,debug,encrypt,event,filesys,info,load,math,md5,readline,sha1,sha256,signal,stubs,threads,zvfs",
          "50: # mod    :",
          "",
          "[Removed Lines]",
          "42: # command: ./configure --ext=+sqlite,websocket,mysql --label=Release",
          "49: # ext    : socket,sqlite,websocket,sqlite,websocket,mysql",
          "",
          "[Added Lines]",
          "42: # command: ./configure --ext=+sqlite,websocket --label=Release",
          "49: # ext    : socket,sqlite,websocket,sqlite,websocket",
          "",
          "---------------"
        ],
        "Configs/make_devel.conf||Configs/make_sanitize.conf": [
          "File: Configs/make_devel.conf -> Configs/make_sanitize.conf",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: JSI_CONFIG_DEFINED=1",
          "4: JSI__BASE64=1",
          "5: JSI__CDATA=1",
          "",
          "[Removed Lines]",
          "1: # make.conf : Devel",
          "2: DEFCONFIG_VER=2.5.23",
          "",
          "[Added Lines]",
          "1: # make.conf : sanitize",
          "2: DEFCONFIG_VER=3.0500",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "26: WITH_EXT_WEBSOCKET=1",
          "27: WITH_EXT_SQLITE=1",
          "28: WITH_EXT_WEBSOCKET=1",
          "30: BUILDIN_SQLITE=1",
          "31: BUILDIN_WEBSOCKET=1",
          "32: JSI__ZIPLIB=1",
          "",
          "[Removed Lines]",
          "29: WITH_EXT_MYSQL=1",
          "",
          "[Added Lines]",
          "29: WITH_EXT_MYSQL=0",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "37: XCPREFIX=",
          "38: BUILDMODS=",
          "41: MODFLAGS=",
          "44: # prefix : /usr/local",
          "45: # program: jsish",
          "46: # target : unix",
          "47: # shared : 0",
          "48: # nozip  : 0",
          "49: # opt    : base64,cdata,debug,encrypt,event,filesys,info,load,math,md5,readline,sha1,sha256,signal,stubs,threads,zvfs,sanitize,memdebug",
          "51: # mod    :",
          "",
          "[Removed Lines]",
          "40: PROGFLAGS=  -DJSI__BASE64=1 -DJSI__CDATA=1 -DJSI__DEBUG=1 -DJSI__ENCRYPT=1 -DJSI__EVENT=1 -DJSI__FILESYS=1 -DJSI__INFO=1 -DJSI__LOAD=1 -DJSI__MATH=1 -DJSI__MD5=1 -DJSI__READLINE=1 -DJSI__SHA1=1 -DJSI__SHA256=1 -DJSI__SIGNAL=1 -DJSI__STUBS=1 -DJSI__THREADS=1 -DJSI__ZVFS=1 -DJSI__MEMDEBUG=1 -DJSI__MINIZ=1 -DJSI__REGEX=0 -DJSI__SANITIZE=1 -DJSI__SOCKET=1 -DJSI__SQLITE=1 -DJSI__WEBSOCKET=1 -DJSI__SQLITE=1 -DJSI__WEBSOCKET=1 -DJSI__MYSQL=1",
          "43: # command: ./configure --ext=+sqlite,websocket,mysql --label=Devel --opt=+sanitize,memdebug",
          "50: # ext    : socket,sqlite,websocket,sqlite,websocket,mysql",
          "",
          "[Added Lines]",
          "40: PROGFLAGS=  -DJSI__BASE64=1 -DJSI__CDATA=1 -DJSI__DEBUG=1 -DJSI__ENCRYPT=1 -DJSI__EVENT=1 -DJSI__FILESYS=1 -DJSI__INFO=1 -DJSI__LOAD=1 -DJSI__MATH=1 -DJSI__MD5=1 -DJSI__READLINE=1 -DJSI__SHA1=1 -DJSI__SHA256=1 -DJSI__SIGNAL=1 -DJSI__STUBS=1 -DJSI__THREADS=1 -DJSI__ZVFS=1 -DJSI__MEMDEBUG=1 -DJSI__MINIZ=1 -DJSI__REGEX=0 -DJSI__SANITIZE=1 -DJSI__SOCKET=1 -DJSI__SQLITE=1 -DJSI__WEBSOCKET=1 -DJSI__SQLITE=1 -DJSI__WEBSOCKET=1 -DJSI__MYSQL=0",
          "43: # command: ./configure --ext=+sqlite,websocket --label=sanitize --opt=+sanitize,memdebug",
          "50: # ext    : socket,sqlite,websocket,sqlite,websocket",
          "",
          "---------------"
        ],
        "Configs/make_static.conf||Configs/make_static.conf": [
          "File: Configs/make_static.conf -> Configs/make_static.conf",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: # make.conf : Release",
          "3: JSI_CONFIG_DEFINED=1",
          "4: JSI__BASE64=1",
          "5: JSI__CDATA=1",
          "",
          "[Removed Lines]",
          "2: DEFCONFIG_VER=2.0332",
          "",
          "[Added Lines]",
          "2: DEFCONFIG_VER=3.0500",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "25: WITH_EXT_WEBSOCKET=1",
          "26: WITH_EXT_SQLITE=1",
          "27: WITH_EXT_WEBSOCKET=1",
          "29: BUILDIN_SQLITE=1",
          "30: BUILDIN_WEBSOCKET=1",
          "31: JSI__ZIPLIB=1",
          "",
          "[Removed Lines]",
          "28: WITH_MOD_MYSQL=1",
          "",
          "[Added Lines]",
          "28: WITH_MOD_MYSQL=0",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "37: BUILDMODS=",
          "39: PROGFLAGS=  -DJSI__BASE64=1 -DJSI__CDATA=1 -DJSI__DEBUG=1 -DJSI__ENCRYPT=1 -DJSI__EVENT=1 -DJSI__FILESYS=1 -DJSI__INFO=1 -DJSI__LOAD=1 -DJSI__MATH=1 -DJSI__MD5=1 -DJSI__MINIZ=1 -DJSI__READLINE=1 -DJSI__SHA1=1 -DJSI__SHA256=1 -DJSI__SIGNAL=1 -DJSI__STUBS=1 -DJSI__THREADS=1 -DJSI__ZVFS=1 -DJSI__MEMDEBUG=0 -DJSI__REGEX=0 -DJSI__SANITIZE=0 -DJSI__SOCKET=1 -DJSI__SQLITE=1 -DJSI__WEBSOCKET=1 -DJSI__SQLITE=1 -DJSI__WEBSOCKET=1",
          "43: # prefix : /usr/local",
          "44: # program: jsish",
          "45: # target : unix",
          "46: # shared : 0",
          "47: # nozip  : 0",
          "48: # opt    : base64,cdata,debug,encrypt,event,filesys,info,load,math,md5,readline,sha1,sha256,signal,stubs,threads,zvfs",
          "50: # mod    :",
          "",
          "[Removed Lines]",
          "40: MODFLAGS=  -DJSI__MYSQL=1",
          "42: # command: ./configure --ext=+sqlite,websocket,mysql --label=Release",
          "49: # ext    : socket,sqlite,websocket,sqlite,websocket,mysql",
          "",
          "[Added Lines]",
          "40: MODFLAGS=  -DJSI__MYSQL=0",
          "42: # command: ./configure --ext=+sqlite,websocket --label=Release",
          "49: # ext    : socket,sqlite,websocket,sqlite,websocket",
          "",
          "---------------"
        ],
        "Configs/make_win.conf||Configs/make_win.conf": [
          "File: Configs/make_win.conf -> Configs/make_win.conf",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: # make.conf : Windows",
          "3: JSI_CONFIG_DEFINED=1",
          "4: JSI__BASE64=1",
          "5: JSI__CDATA=1",
          "",
          "[Removed Lines]",
          "2: DEFCONFIG_VER=2.0332",
          "",
          "[Added Lines]",
          "2: DEFCONFIG_VER=3.0500",
          "",
          "---------------"
        ],
        "Configs/make_winssl.conf||Configs/make_winssl.conf": [
          "File: Configs/make_winssl.conf -> Configs/make_winssl.conf",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: # make.conf : Windows",
          "3: JSI_CONFIG_DEFINED=1",
          "4: WITH_SSL=1",
          "5: JSI__BASE64=1",
          "",
          "[Removed Lines]",
          "2: DEFCONFIG_VER=2.0332",
          "",
          "[Added Lines]",
          "2: DEFCONFIG_VER=3.0500",
          "",
          "---------------"
        ],
        "lib/Manage.jsi||liManage.jsi": [
          "File: lib/Manage.jsi -> liManage.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "29:     }",
          "31:     function sunzip(foss='') {",
          "33:             if (foss)",
          "34:                 fossil('rm --hard jsi');",
          "37:         Jsi_CopyDir('/zvfs/lib/www', 'jsi');",
          "38:         if (foss)",
          "39:             fossil('add jsi');",
          "",
          "[Removed Lines]",
          "32:         if (File.isdir('jsi'))",
          "35:             else",
          "36:                 File.remove('jsi', true);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "47:         else",
          "48:             ver = fossil('version', true);",
          "49:         if (!ver)",
          "51:         var cnt = File.glob('*', {retCount:true});",
          "52:         if (cnt)",
          "55:         ver = fossil('status', true);",
          "56:         if (ver.match(/^repository:.*/))",
          "59:         var dname = File.tail(File.pwd());",
          "",
          "[Removed Lines]",
          "50:             throw 'install fossil first, eg. use \"sudo apt install fossil\" or \"sudo jsish -M getfossil\"';",
          "53:             throw 'setup must be used in an empty directory';",
          "57:             throw 'sorry: already in open fossil: '+ver.split('\\n')[0];",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "65:         if (!app.match(/^[-0-9a-zA-Z_]+$/)) {",
          "66:             app = File.rootname(File.tail(app));",
          "67:             if (!app.match(/^[-0-9a-zA-Z_]+$/))",
          "69:         } else",
          "70:             url = self.repo+'/'+app;",
          "71:         var proj = name.toUpperCase();",
          "72:         if (app.toLowerCase() == proj)",
          "74:         var pfn = name+'.fossil';",
          "75:         if (url[0] == '/' && File.exists(url+'.fossil'))",
          "76:             url += '.fossil';",
          "",
          "[Removed Lines]",
          "68:                 throw 'app name invalid: '+app;",
          "73:             throw 'can not use name same as app: '+name;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "125:         var url = surl();",
          "126:         var dif = fossil('changes');",
          "127:         if (dif)",
          "129:         return fossil('pull --from-parent-project '+opts+' '+url);",
          "130:     }",
          "",
          "[Removed Lines]",
          "128:             throw 'must run \"fossil commit\" first';",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "145:     function spupdate(opts='', msg='') {",
          "146:         var cur = fossil('branch current').trim();",
          "147:         if (cur != 'private')",
          "149:         var rs = supdate(opts+' --private', msg);",
          "150:         return rs;",
          "151:     }",
          "",
          "[Removed Lines]",
          "148:             throw 'need to use \"fossil update private\" before spupdate: '+cur;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "169:             if (tl1 == tl2)",
          "170:                 return 'spull returned no changes';",
          "171:         }",
          "173:         try {",
          "174:             mrg = fossil('merge');",
          "175:             ms = mrg.match(/WARNING: [0-9]+ merge conflicts/);",
          "",
          "[Removed Lines]",
          "172:         var mrg = '', ms;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "180:             return;",
          "181:         if (ms) {",
          "182:             puts('Conflict', mrg);",
          "184:         }",
          "",
          "[Removed Lines]",
          "183:             throw 'merge conflict'+ms[0];",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "233:                 else if (ext === '.jsi' && ft !== 'Jsish.jsi' && ft !=='autoload.jsi')",
          "234:                     rc.push(fr);",
          "235:             }",
          "237:         }",
          "238:         require(fn);",
          "239:         return moduleRun(fn);",
          "",
          "[Removed Lines]",
          "236:             throw 'missing required module name or builtin:\\n    '+rc.sort().join(', ')+'\\n';",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "244:             fn = Info.executable();",
          "245:         return Util.hash('', {file:fn, type:'sha1'});",
          "246:     }",
          "248:     function zhash(fn='') {",
          "249:         if (!fn)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "271:         if (self.output !== '')",
          "272:             fn = self.output;",
          "273:         if (File.exists(fn))",
          "275:         var pat = File.rootname(File.tail(fn));",
          "276:         var pref = tmpname;",
          "277:         var tmpl = File.read('/zvfs/lib/templates/'+pref+'.jsi');",
          "",
          "[Removed Lines]",
          "274:             throw 'file exists: '+fn;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "298:         surl:       [surl,       \"Get parent project url\"],",
          "299:         supdate:    [supdate,    \"Update a sub-project created with sclone: also update/merge/commit\"],",
          "300:         spupdate:   [spupdate,   \"Shortcut for 'supdate --private'\"],",
          "301:         zcheck:     [zcheck,     \"Compare zhash of jsish builtin zip\"],",
          "302:         zhash:      [zhash,      \"Calculate sha1 hash of appended zip\"]",
          "303:     };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/SqliteUI/SqliteUI.jsi||liSqliteUI/SqliteUI.jsi": [
          "File: lib/SqliteUI/SqliteUI.jsi -> liSqliteUI/SqliteUI.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "18:         local       :true,              // Web server is to listen only on localhost.",
          "19:         noCheck     :false,             // Disable typechecking.",
          "20:         noGui       :false,             // Disable starting local browser.",
          "21:         noUpdate    :false,             // Caller will provide update calls.",
          "22:         noIO        :false,             // Disable disk io operations, other than to db.",
          "23:         port        :0,                 // Port, or zero to let OS choose.",
          "24:         readonly    :false,             // Databases are opened readonly.",
          "25:         server      :false,             // Server mode: same as noGui=true and closeTimout=0",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "55:             win: [ \"start\" ],",
          "56:             mac: [ \"open\" ]",
          "57:         },",
          "59:         optSchema :",
          "60:             \"CREATE TABLE IF NOT EXISTS dbfiles (file);\" +",
          "61:             \"CREATE TABLE IF NOT EXISTS saved_queries (query NOT NULL, dbID NOT NULL);\" +",
          "",
          "[Removed Lines]",
          "58:         optdbfile: '~/.sqliteui.db',    // Store options, saved queries, etc.",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/Zip.jsi||liZip.jsi": [
          "File: lib/Zip.jsi -> liZip.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "104:     function create(fname:string, zdir:string, ...) {",
          "105:         if (!File.isdir(zdir))",
          "106:             return usage(\"must give a directory to zip: \" + zdir);",
          "108:         zargs[i++] = File.realpath(fname);",
          "109:         zargs[i++] = File.glob('*', {dir:zdir, recurse:true}).sort();",
          "110:         zargs[i++] = zdir;",
          "111:         for (var n = 3; n<args.length; n++) {",
          "112:             var ldir = args[n];",
          "114:             zargs[i++] = null;",
          "115:         }",
          "116:         Zvfs.create.apply({},zargs);",
          "",
          "[Removed Lines]",
          "107:         var i = 0, zargs = [];",
          "113:             zargs[i++] = File.glob(ldir, {recurse:true}).concat([ldir]).sort();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/www/js/Jsish.js||liwww/js/Jsish.js": [
          "File: lib/www/js/Jsish.js -> liwww/js/Jsish.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: var LogDebug = function(){},",
          "11: var Log = {",
          "27:     }",
          "28: };",
          "30: (function () {",
          "31: \"use strict\";",
          "33: var config = {",
          "46: };",
          "47: var self = { // Internal self information.",
          "59: };",
          "61: function gettype(m) {",
          "67: }",
          "69: function parseError(msg) {",
          "72: }",
          "74: function errorCmd(msg) { // Handle error condition.",
          "84: }",
          "86: function typeValidate(typ) {",
          "100: }",
          "102: function getType(val) {",
          "113: }",
          "115: function SigParse(sig) { // Parse string signature and return info.",
          "176:         }",
          "177:     }",
          "185: }",
          "187: function SigConvert(code) { // Convert typed functions to work in browser, adding $jsig and default-value set.",
          "215:     }",
          "218: }",
          "220: function convertTest(s) {",
          "236:     }",
          "238: }",
          "240: function fileext(fn) {",
          "244: }",
          "246: function addScript(fn) { // Add script into page.",
          "258: }",
          "260: function errHandler(msg, url, lineNumber) {",
          "265: }",
          "268: var jsi = {",
          "325:         }",
          "394:         }",
          "419:             break;",
          "420:         }",
          "641:         }",
          "647:             }",
          "652:         }",
          "692:             }",
          "754:                 }",
          "765:             return;",
          "766:         }",
          "782:         }",
          "876:         }",
          "893:         }",
          "894:     }",
          "895: };",
          "897: window['Jsish'] = jsi;",
          "",
          "[Removed Lines]",
          "5:     LogTrace = function(){},",
          "6:     LogTest = function(){},",
          "7:     LogInfo = console.warn.bind(console.window,'INFO: '),",
          "8:     LogWarn = console.warn.bind(console.window,'WARN: '),",
          "9:     LogError = console.error.bind(console.window,'ERROR: ');",
          "12:     debug: function(){},",
          "13:     trace : function(){},",
          "14:     test : function(){},",
          "15:     info : console.log.bind(console.window,'INFO: '),",
          "16:     warn : console.warn.bind(console.window,'WARN: '),",
          "17:     error : console.error.bind(console.window,'ERROR: '),",
          "18:     conf: function(typ, on) {",
          "20:         if (!typ) typ = 'debug';",
          "21:         switch (typ) {",
          "22:             case 'debug': LogDebug = Log.debug = (on?console.log.bind(console.window,'DEBUG: '):function(){}); break;",
          "23:             case 'trace': LogTrace = Log.trace = (on?console.log.bind(console.window,'TRACE: '):function(){}); break;",
          "24:             case 'test':  LogTest  = Log.test  = (on?console.log.bind(console.window,'TEST: ') :function(){}); break;",
          "25:             default: puts('unknown log type, not one of: debug,trace,test');",
          "26:         }",
          "34:     mode:'error',",
          "35:     disabled:false,",
          "36:     histmode:false, // Use Vue-router history mode.",
          "37:     insert:false,",
          "38:     inline:false,",
          "39:     interp:{},      // Interp state info from jsish.",
          "40:     onload:null,",
          "41:     subopts:{},",
          "42:     approot:'./',",
          "43:     jsiroot:'./',",
          "44:     baseroot:'',",
          "45:     websock:true,",
          "48:     typeNameStr:'number,string,boolean,array,function,object,regexp,any,userobj,void,null,undefined',",
          "49:     typeNames:null,",
          "50:     sigs:{},",
          "51:     uuid:0,",
          "52:     srcList:[],",
          "53:     srcCnt:0,",
          "54:     errCnt:0,",
          "55:     errCur:null,",
          "56:     funcLst:[],",
          "57:     log:{},",
          "58:     wsstarted:false",
          "62:     if (m===null) return 'null';",
          "63:     var typ = typeof m;",
          "64:     if (typ==='object' && Array === m.constructor)",
          "65:         return 'array';",
          "66:     return typ;",
          "70:     errorCmd('PARSERR: '+msg+' ==> '+jsi.self.curSig);",
          "71:     return [];",
          "75:     jsi.self.errCnt++;",
          "76:     switch (jsi.config.mode) {",
          "77:         case 'error': if (console.error) console.error(msg); return;",
          "78:         case 'throw': console.log(msg); throw(msg);",
          "79:         case 'log': break;",
          "80:         case 'alert': alert(msg); break;",
          "81:         default: console.log('unknown mode: '+jsi.config.mode);",
          "82:     }",
          "83:     return console.log(msg);",
          "87:     if (typ === '') return null;",
          "88:     var tlst = typ.split('|');",
          "89:     var i = -1;",
          "90:     if (!jsi.self.typeNames)",
          "91:         jsi.self.typeNames = jsi.self.typeNameStr.split(',');",
          "92:     for (i = 0; i<tlst.length; i++)",
          "93:         if (jsi.self.typeNames.indexOf(tlst[i])<0) {",
          "94:             parseError(\"type unknown '\"+tlst[i]+'\" not one of: '+jsi.self.typeNameStr);",
          "95:             return null;",
          "96:         }",
          "97:     if (tlst.length===1 && tlst[0] === 'any')",
          "98:         return null;",
          "99:     return tlst;",
          "103:     switch (val) {",
          "104:         case 'true': case 'false': return 'boolean';",
          "105:         case 'null': return 'null';",
          "106:         case 'undefined': return 'undefined';",
          "107:         default:",
          "108:             if (val[0] === \"'\" || val[0] === '\"')",
          "109:                 return 'string';",
          "110:             if (parseFloat(val))",
          "111:                 return 'number';",
          "112:     }",
          "116:     jsi.self.curSig = sig;",
          "119:     var sargs = '';",
          "123:     var someDef = sig.indexOf('=')>=0;",
          "124:     if (sig.indexOf(':')<0 && !someDef) // Skip functions with no types or defaults",
          "125:         return [];",
          "126:     var res = {};",
          "128:     var astr = sig.trim();",
          "129:     var acall = [];",
          "130:     if (astr !== '') {",
          "131:         var alst = astr.split(',');",
          "132:         var minargs = alst.length, maxargs = minargs;",
          "133:         var last = alst.length-1;",
          "134:         for (var i = 0; i<=last; i++) {",
          "135:             var aval = alst[i].trim();",
          "136:             if (aval === '...') {",
          "137:                 if (i != last)",
          "138:                     return parseError(\"expected ... to be at end\");",
          "139:                 maxargs = -1;",
          "140:                 if (minargs>0)",
          "141:                     minargs--;",
          "142:                 break;",
          "143:             }",
          "144:             var rega = /^([a-zA-Z0-9_]+)(:[|a-z]+|)(=.+|)$/;",
          "145:             var avals = rega.exec(aval);",
          "146:             if (!avals)",
          "147:                 return parseError(\"invalid argument: \"+aval);",
          "149:             if (i)",
          "150:                 sargs += ', ';",
          "151:             var afnam = avals[1];",
          "152:             if (afnam === '' || avals.length<3)",
          "153:                 afnam = aval;",
          "154:             sargs += afnam;",
          "155:             var defval=undefined, atyp = '';",
          "156:             if (avals.length>2)",
          "157:                 atyp = avals[2].substr(1);",
          "158:             var tlst = typeValidate(atyp);",
          "159:             var hasDef = (avals[3] && avals[3] !== '');",
          "160:             if (hasDef) { // Default value",
          "161:                 if (avals[3] !== '=void') {",
          "162:                     defval = avals[3].substr(1);",
          "163:                     var defType = getType(defval);",
          "164:                     if (defType)",
          "165:                         if (tlst === null)",
          "166:                             tlst = [defType];",
          "167:                         else if (tlst.indexOf(defType)<0)",
          "168:                             tlst.push(defType);",
          "169:                 }",
          "170:                 if (minargs===alst.length)",
          "171:                     minargs = i;",
          "172:             }",
          "173:             else if (minargs!==alst.length)",
          "174:                 return parseError(\"non-default value follows default: \"+aval+' in: '+str);",
          "175:             acall.push({name:afnam, typ:tlst, def:defval});",
          "178:     res.astr = astr;",
          "179:     res.min = minargs;",
          "180:     res.max = maxargs;",
          "181:     res.args = acall;",
          "182:     res.sargs = sargs;",
          "183:     res.ssig = sig;",
          "184:     return res;",
          "189:     function reMethod(str) {",
          "190:         var reg = /^function\\s*([a-zA-Z0-9_]*)\\s*\\(([^)]*)\\)(:[\\|a-z]+|)(\\s*)\\{$/;",
          "191:         var vals = reg.exec(str);",
          "192:         if (!vals) {",
          "193:             LogWarn(\"invalid method: \"+str);",
          "194:             return str;",
          "195:         }",
          "197:         var fnam = vals[1];",
          "198:         if (fnam !== '' && fnam[0] !== '_')",
          "199:             jsi.self.funcLst.push(fnam);",
          "200:         var someDflt = str.indexOf('=')>=0;",
          "201:         if (str.indexOf(':')<0 && !someDflt) // Skip functions with no types or defaults",
          "202:             return str;",
          "203:         var res = 'function '+fnam+'(';",
          "205:         var astr = vals[2].trim();",
          "206:         if (astr === '')",
          "207:             res += str + ') {';",
          "208:         else {",
          "209:             var sobj = SigParse(vals[2]);",
          "211:             res += sobj.sargs+')' + '{ $jsig(\"'+sobj.ssig+'\", arguments); ';",
          "212:         }",
          "214:         return res;",
          "216:     var reg = /function\\s*[a-zA-Z0-9_]*\\s*\\([^)]*\\)(:[\\|a-z]+|)\\s*\\{/g;",
          "217:     return code.replace(reg, reMethod) + '\\n<!--JSIG GEN-->';",
          "221:     var rs = '', lst = s.split('\\n');",
          "222:     for (var i in lst) {",
          "223:         var u, l = lst[i], len = l.length;",
          "224:         if (l[0] == ';' && l[len-1]==';') {",
          "225:             if (l[1]=='/' && l[2]=='/') {",
          "226:                 u = l.substr(3,len-4);",
          "227:                 rs += \"puts(\\\"\"+u+\"\\\" ==> \\\");\";",
          "228:                     + \"try { puts(JSON.stringify(\"+u+\")); puts('\\\\nFAIL!\\\\n'); } \"",
          "229:                     + \"catch(err) { puts('\\\\nPASS!: err =',err); }\\n\";",
          "230:             } else {",
          "231:                 u = l.substr(1,len-2);",
          "232:                 rs += \"puts(\\\"\"+u+\" ==> \\\"+JSON.stringify(\"+u+\"));\\n\";",
          "233:             }",
          "234:         }",
          "235:         rs += '\\n';",
          "237:     return rs;",
          "241:     var i = fn.lastIndexOf('.');",
          "242:     if (i<0) return '';",
          "243:     return fn.substr(i+1);",
          "247:     var f=document.createElement('script');",
          "248:     f.setAttribute(\"type\",\"text/javascript\");",
          "249:     if (fn.indexOf('\\n')>=0)",
          "250:         f.innerHTML = fn;",
          "251:     else {",
          "252:         f.setAttribute(\"src\", fn);",
          "253:         jsi.self.srcCnt++;",
          "254:         f.setAttribute(\"onload\", \"$jsi.self.srcCnt--;\");",
          "255:     }",
          "256:     var h = document.querySelector(\"head\");",
          "257:     h.appendChild(f);",
          "262:     puts('MMM',msg);",
          "263:     $jsi.output('<p style=\"color:red\">'+msg+'</p>\\n');",
          "264:     return true;",
          "269:     unittest:0,",
          "270:     config:config,",
          "271:     self:self,",
          "273:     $: function(sel, top) {",
          "274:         if (typeof sel !== 'string') throw('expected string, got '+typeof sel);",
          "275:         var rc;",
          "276:         if (!top)",
          "277:             top = document;",
          "278:         return top.querySelectorAll(sel);",
          "279:     },",
          "281:     $jsig: function(sig, args) { // Check function arguments",
          "282:         if (jsi.config.disabled)",
          "283:             return function() {};",
          "284:         try {",
          "285:             jsi.jsigImpl(sig, args);",
          "286:         } catch(e) {",
          "287:             if (config.interp.asserts && console.assert)",
          "288:                 return console.assert.bind(console.window, false, 'ASSERT: '+e);",
          "289:             else if (console.warn)",
          "290:                 return console.warn.bind(console.window, 'WARN: '+e);",
          "291:             else",
          "292:                 return console.log.bind(console.window, 'LOG: '+e);",
          "293:         }",
          "294:         return (function() {});",
          "295:     },",
          "297:     gettype:gettype,",
          "298:     matchType: function(v1, v2) {",
          "299:         return gettype(v1) === getype(v2);",
          "300:     },",
          "301:     jsigImpl: function(sig, args) { // Check function arguments",
          "302:         function ArgCheckType(o, aind, val) {",
          "303:             var af = o.args[aind];",
          "304:             var tlst = (af?af.typ:null);",
          "305:             if (!tlst) return;",
          "306:             var nam = af.name;",
          "307:             var vtyp = gettype(val);",
          "308:             for (var i = 0; i<tlst.length; i++) {",
          "309:                 switch (tlst[i]) {",
          "310:                     case \"number\":  if (vtyp === 'number') return; break;",
          "311:                     case \"string\":  if (vtyp === 'string') return; break;",
          "312:                     case \"boolean\": if (vtyp === 'boolean') return; break;",
          "313:                     case \"function\":if (vtyp === 'function') return; break;",
          "314:                     case \"array\":   if (vtyp === 'array') return; break;",
          "315:                     case \"regexp\":  if (vtyp === 'object' && val && val.constructor === RegExp) return; break;",
          "316:                     case \"object\":  if (vtyp === 'object' && val && val.constructor !== Array) return; break;",
          "317:                     case \"any\":     return; break;",
          "318:                     case \"userobj\": if (vtyp === 'object') return; break;",
          "319:                     case \"undefined\": case \"void\": if (val === undefined) return; break;",
          "320:                     case \"null\": if (val === null) return; break;",
          "321:                     default: throw(\"type '\"+tlst[i]+'\" is unknown: not one of: '+jsi.self.typeNameStr);",
          "322:                 }",
          "323:             }",
          "324:             throw 'type mismatch for arg '+(aind+1)+' \"'+nam+'\" expected \"'+tlst.join('|')+'\" got \"'+vtyp+'\" '+val;",
          "327:         var o = sig;",
          "328:         if (typeof sig === 'string') {",
          "329:             o = jsi.self.sigs[sig];",
          "330:             if (!o)",
          "331:                 o = jsi.self.sigs[sig] = SigParse(sig);",
          "332:         }",
          "333:         if (typeof o !== 'object')",
          "334:             throw('$jsig arg 1: bad sig:'+sig);",
          "335:         if (typeof args !== 'object')",
          "336:             throw('$jsig arg 2: expected arguments:'+args);",
          "338:         var len = args.length, msg;",
          "339:         var pre = '';",
          "340:         if (o.max>=0 && len>o.max)",
          "341:             msg = \"extra arguments: expected \"+o.max+\" got \"+len;",
          "342:         else if (len<o.min)",
          "343:             msg = \"missing arguments: expected \"+o.min+\" got \"+len;",
          "344:         for (var aind = 0; aind<args.length && !msg; aind++)",
          "345:             msg = ArgCheckType(o, aind, args[aind]);",
          "346:         if (msg)",
          "347:             throw msg;",
          "348:     },",
          "349:     getUrl:function(url, success, error) {",
          "350:         return jsi.ajax({url:url, success:success, error:error});",
          "351:     },",
          "352:     ajax:function(opts) { // Ajax",
          "353:         function none(){};",
          "355:         opts = jsi.setopts(opts, {",
          "356:             success:    null,",
          "357:             error:      null,",
          "358:             complete:   null,",
          "359:             type:       'GET',",
          "360:             dataType:   'text', // One of: json, jsonp, script, text.",
          "361:             data:       {},   // Query data.",
          "362:             headers:    {},",
          "363:             async:      true,",
          "364:             url:        null",
          "365:         });",
          "366:         if (!opts.url) throw('url is required');",
          "368:         var req, key, i, qd = null, dt = opts.dataType;",
          "369:         if (!opts.success) opts.success = none;",
          "370:         if (!opts.error) opts.error = none;",
          "371:         if (!opts.complete) opts.complete = none;",
          "372:         switch (dt) {",
          "373:         case 'jsonp': case 'script': {",
          "374:             req = document.createElement('script');",
          "376:             window[opts.data.callback = jsi.guid()] = function(data) {",
          "377:                 opts.success.call(req, data, null, req);",
          "378:             };",
          "380:             req.onload = req.onerror = function(e) {",
          "381:                 if (e && e.type === \"error\")",
          "382:                     opts.error.call(jsi, req);",
          "383:                 opts.complete.call(jsi, req);",
          "384:                 req.remove();",
          "385:             };",
          "387:             qd = '?';",
          "388:             for (key in opts.data)",
          "389:                 qd += encodeURIComponent(key) + '=' + encodeURIComponent(opts.data[key]) +'&';",
          "391:             req.src = opts.url + qd;",
          "392:             document.head.appendChild(req);",
          "393:             break;",
          "395:         case 'text':",
          "396:         case 'json': {",
          "397:             req = new XMLHttpRequest();",
          "398:             req.open(opts.type, opts.url, opts.async);",
          "399:             opts.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";",
          "400:             for (key in opts.headers)",
          "401:                 req.setRequestHeader(key, opts.headers[key]);",
          "403:             req.onload = req.onerror = function onload() {",
          "404:                 var text = req.statusText;",
          "405:                 if ( req.status < 200 || req.status >= 400 )",
          "406:                     opts.error.call(jsi, req, text);",
          "407:                 else {",
          "408:                     var resp = req.responseText;",
          "409:                     if (dt === 'json')",
          "410:                         resp = JSON.parse(resp);",
          "411:                     opts.success.call(jsi, resp, text, req);",
          "412:                 }",
          "413:                 opts.complete.call(jsi, req, text);",
          "414:             };",
          "416:             if (opts.data)",
          "417:                 qd = (typeof opts.data === 'string' ? opts.data : JSON.stringify(opts.data));",
          "418:             req.send(qd);",
          "421:         default:",
          "422:             throw('dataType not one of: json, jsonp, script, text');",
          "423:         }",
          "424:         return req;",
          "425:     },",
          "427:     conf: function(vals) { $jsig('vals:object', arguments)();",
          "429:         var i;",
          "430:         if (!vals)",
          "431:             return jsi.config;",
          "432:         for (i in vals) {",
          "433:             var ti, tt = gettype(jsi.config[i]), vv = vals[i];",
          "434:             if (tt == 'undefined')",
          "435:                 errorCmd('Option \"'+i+'\": not one of: '+Object.keys(jsi.config).join(', '));",
          "436:             else {",
          "437:                 switch (i) {",
          "438:                     case 'mode':",
          "439:                         var modes = ['error', 'log', 'throw', 'alert'];",
          "440:                         if (modes.indexOf(vals[i])<0)",
          "441:                             errorCmd('invalid mode \"'+vals[i]+'\": not one of: '+modes.join(','));",
          "442:                         break;",
          "443:                     case 'insert':",
          "444:                         window.onerror = (vals[i]?errHandler:undefined);",
          "445:                         break;",
          "446:                     case 'interp':",
          "447:                         if (vv.log.indexOf('debug')>=0) Log.conf('debug', true);",
          "448:                         if (vv.log.indexOf('trace')>=0) Log.conf('trace', true);",
          "449:                         if (vv.log.indexOf('test')>=0)  Log.conf('test', true);",
          "450:                         break;",
          "451:                 }",
          "452:                 if (jsi.config[i] !== null && tt !== (ti=gettype(vals[i])))",
          "453:                     errorCmd('type mismatch in conf of \"'+i+'\": '+tt+'!='+ti);",
          "454:                 jsi.config[i] = vals[i];",
          "455:             }",
          "456:         }",
          "457:     },",
          "458:     parseOpts: function(target, opts, vals) { $jsig('target:object,opts:object,vals:object=void', arguments)();",
          "460:         var i;",
          "461:         for (i in opts)",
          "462:             if (typeof(target[i]) === 'undefined')",
          "463:                 target[i] = opts[i];",
          "464:         for (i in vals) {",
          "465:             var ti, tt = gettype(opts[i]);",
          "466:             if (tt == 'undefined')",
          "467:                 LogWarn(\"option \"+i+\" not one of: \"+Object.keys(opts).join(', '));",
          "468:             else {",
          "469:                 if (opts[i] !== null && tt !== (ti=gettype(vals[i])))",
          "470:                     LogWarn('type mismatch of '+i+': '+tt+'!='+ti);",
          "471:                 target[i] = vals[i];",
          "472:             }",
          "473:         }",
          "474:     },",
          "476:      getOpts: function(opts, vals, target) {",
          "478:         var i;",
          "479:         if (typeof(target) == 'undefined')",
          "480:             target = Object.assign(opts);",
          "481:         else",
          "482:             for (i in opts)",
          "483:                 if (typeof(target[i]) === 'undefined')",
          "484:                     target[i] = opts[i];",
          "485:         for (i in vals) {",
          "486:             var ti, tt = gettype(opts[i]);",
          "487:             if (tt == 'undefined')",
          "488:                 LogWarn(\"option \"+i+\" not one of: \"+Object.keys(opts).join(', '));",
          "489:             else {",
          "490:                 if (opts[i] !== null && tt !== (ti=gettype(vals[i])))",
          "491:                     LogWarn('type mismatch of '+i+': '+tt+'!='+ti);",
          "492:                 target[i] = vals[i];",
          "493:             }",
          "494:         }",
          "495:         return target;",
          "496:     },",
          "497:     filesave: function(filename, data, mime) {  $jsig(\"filename:string, data:string, mime='text/html'\", arguments)();",
          "500:         var blob = new Blob([data], {type: (mime?mime:'text/html')});",
          "501:         if(window.navigator.msSaveOrOpenBlob) {",
          "502:             window.navigator.msSaveBlob(blob, filename);",
          "503:         } else {",
          "504:             var elem = window.document.createElement('a');",
          "505:             elem.href = window.URL.createObjectURL(blob);",
          "506:             elem.download = filename;",
          "507:             document.body.appendChild(elem);",
          "508:             elem.click();",
          "509:             document.body.removeChild(elem);",
          "510:         }",
          "511:     },",
          "513:     guid: function() { // Return unique UUID.",
          "514:         if (!jsi.self.uuid)",
          "515:             jsi.self.uuid = Date.now();",
          "516:         return '_uuid'+(jsi.self.uuid++).toString(16);",
          "517:     },",
          "519:     output: function(str) { $jsig('str:string', arguments)();",
          "521:         var f=document.createElement('div');",
          "522:         f.innerHTML = str;",
          "523:         var h = document.querySelector(\"body\");",
          "524:         h.appendChild(f);",
          "525:     },",
          "526:     htmladd: function(str) { output(str); },",
          "528:     inc: function(fn, onload, onerror) {",
          "529:         var f=document.createElement('script');",
          "530:         f.setAttribute(\"type\",\"text/javascript\");",
          "531:         f.setAttribute(\"src\", fn);",
          "532:         jsi.self.srcCnt++;",
          "533:         if (onload)",
          "534:             f.onload = onload;",
          "535:         if (onerror)",
          "536:             f.onerror = onerror;",
          "537:         var h = document.querySelector(\"head\");",
          "538:         h.appendChild(f);",
          "539:     },",
          "540:     include: function(fns) { $jsig('fns:string|array', arguments)();",
          "542:         if (typeof fns === 'string')",
          "543:             fns = [fns];",
          "544:         for (var i in fns) {",
          "545:             var fn = fns[i];",
          "546:             if (window.jsiWebSocket)",
          "547:                 return addScript(fn);",
          "548:             jsi.self.srcList.push(fn);",
          "549:             jsi.self.srcCnt++;",
          "551:             jsi.ajax({url:fn,",
          "552:                 success: function(str, txtcode, req) {",
          "553:                     jsi.self.srcCnt--;",
          "555:                     var hdrs = req.getAllResponseHeaders();",
          "556:                     if (!hdrs || hdrs.indexOf('jsiWebSocket')<0) {",
          "557:                         str = SigConvert(str);",
          "559:                     }",
          "560:                     if (str.indexOf('\\n')>=0)",
          "561:                         addScript(str);",
          "562:                     else",
          "563:                         console.warn('no newline', str);",
          "565:                 },",
          "566:                 error:function(str) {",
          "567:                     jsi.self.srcCnt--;",
          "568:                     LogWarn('Src Error: '+str);",
          "569:                 }",
          "570:             });",
          "571:         }",
          "572:     },",
          "573:     loadCSS: function(css) {",
          "574:         return jsi.css(css);",
          "575:     },",
          "577:     css: function(css) {",
          "578:         if (jsi.gettype(css) == 'array') {",
          "579:             for (var i in css)",
          "580:                 jsi.css(css[i]);",
          "581:             return;",
          "582:         }",
          "583:         var id = document.head || document.getElementsByTagName('head')[0];",
          "584:         if (css.indexOf('{')>=0) {",
          "585:             var style = document.createElement('style');",
          "586:             id.appendChild(style);",
          "587:             style.type = 'text/css';",
          "588:             if (style.styleSheet)",
          "589:                 style.styleSheet.cssText = css;",
          "590:             else",
          "591:                 style.appendChild(document.createTextNode(css));",
          "592:         } else {",
          "593:             if (css[0] != '.' && css[0] != '/')",
          "594:                 css = config.approot+css;",
          "595:             var link = document.createElement('link');",
          "596:             link.rel=\"stylesheet\";",
          "597:             link.type=\"text/css\";",
          "598:             link.href=css;",
          "599:             id.appendChild(link);",
          "600:         }",
          "601:     },",
          "602:     onload: function(f) { // Set user function to invoke when page/files loaded.",
          "603:         if (typeof f !== 'function') {",
          "604:             throw('onload expects a function');",
          "605:         }",
          "606:         jsi.config.onload = f;",
          "607:     },",
          "609:     schema: function(obj, schm) { // Check object/json schema, or generate when schm null/ommited.",
          "611:         function gen(obj) {",
          "612:             function sub(m,name) {",
          "613:                 var p, i, typ = gettype(m), rc = {type:typ};",
          "614:                 switch (typ) {",
          "615:                     case 'number':",
          "616:                     case 'boolean':",
          "617:                     case 'string':",
          "618:                     case 'null':",
          "619:                         break;",
          "620:                     case 'array':",
          "621:                         if (m[0]===undefined) throw('array must be non-empty '+name);",
          "622:                         rc.items = sub(m[0], name);",
          "623:                         break;",
          "624:                     case 'object':",
          "625:                         rc.properties = {};",
          "626:                         var req = [];",
          "627:                         for (i in m) {",
          "628:                             rc.properties[i] = sub(m[i], i);",
          "629:                             req.push(i);",
          "630:                         }",
          "631:                         if (req.length)",
          "632:                             rc.required = req;",
          "633:                         break;",
          "635:                     default:",
          "636:                         console.log('ignoring unsupported type:', typ);",
          "637:                 }",
          "638:                 return rc;",
          "639:             }",
          "640:             return sub(obj,'');",
          "643:         function ref(ref, sch, s) {",
          "644:             if (ref.substr(0,2) === '#/') {",
          "645:                 s = sch;",
          "646:                 ref = ref.substr(2);",
          "648:             var rlst = ref.split('/');",
          "649:             for (var i in rlst)",
          "650:                 s = s[rlst[i]];",
          "651:             return s;",
          "654:         function check(m, s, name) {",
          "655:             if (m === undefined) throw('missing value: '+name);",
          "656:             if (s === undefined) throw('missing schema for: '+name);",
          "657:             var p, i, typ = gettype(m);",
          "658:             switch (s.type) {",
          "659:                 case 'number':",
          "660:                 case 'string':",
          "661:                 case 'boolean':",
          "662:                 case 'null':",
          "663:                     if (typ !== s.type) throw('type mismatch: '+typ+'!='+s.type+' at '+name);",
          "664:                     break;",
          "665:                 case 'array':",
          "666:                     if (typ !== s.type) throw('type mismatch: '+typ+'!='+s.type+' at '+name);",
          "667:                     var nn = name+'[]';",
          "668:                     for (i=0; i<m.length; i++)",
          "669:                         check(m[i], s.items, name+'['+i+']');",
          "670:                     break;",
          "671:                 case 'object':",
          "672:                     var req = s.required;",
          "673:                     if (req && req.length) {",
          "674:                         for (p in req) {",
          "675:                             i = req[p];",
          "676:                             if (m[i] === undefined) throw('missing required value : \"'+i+'\" at '+name);",
          "677:                         }",
          "678:                     }",
          "679:                     var keys = Object.keys(m);",
          "680:                     if (keys.length===1 && keys[0] === '$ref')",
          "681:                         m = ref(m[keys[0]], sch, s);",
          "682:                     for (i in m) {",
          "683:                         if (!m.hasOwnProperty(i)) continue;",
          "684:                         var spi = s.properties[i];",
          "685:                         if (!spi) throw('object property not in schema: \"'+i+'\" at '+name);",
          "686:                         sub(m[i], spi, name+'.'+i);",
          "687:                     }",
          "688:                     break;",
          "690:                 default:",
          "691:                     throw('unsupported schema type '+s.type);",
          "693:         }",
          "694:         if (schm === null || arguments.length==1)",
          "695:             return gen(obj);",
          "696:         check(obj, schm, '#');",
          "697:     },",
          "699:     setopts: function(obj, opts) { // Set opts in obj and return.",
          "700:         var i;",
          "701:         for (i in obj)",
          "702:             if (opts[i] === undefined)",
          "703:                 throw(\"unknown option: \"+i+' is not one of: '+Object.keys(opts).join(', '));",
          "704:         for (i in opts)",
          "705:             if (obj[i] === undefined)",
          "706:                 obj[i] = opts[i];",
          "707:         return obj;",
          "708:     },",
          "709:     isfossil:function() {",
          "710:         return (location.pathname.indexOf('/doc/ckout/')>=0 || location.pathname.indexOf('/doc/tip/')>=0);",
          "711:     },",
          "712:     isjsi:function() {",
          "713:         return (jsi.getCookie('sessionJsi')?true:false);",
          "714:     },",
          "715:     websock:function(opts) { // Create websocket connection if jsish is server.",
          "716:         if (!config.websock || !jsi.getCookie('sessionJsi'))",
          "717:             return;",
          "718:         var ws;",
          "719:         var w = {",
          "720:             prot:'ws',",
          "721:             debug:false,",
          "722:             noreloadexts:'',",
          "723:             onrecv:null,",
          "724:             onopen:null,",
          "725:             onchange:function(fname) {",
          "726:                 location.reload();",
          "727:             },",
          "728:             onmessage:function(obj) {",
          "730:                 var msg=JSON.parse(obj.data);",
          "731:                 if (msg.mod === '!') {",
          "732:                     switch (msg.cmd) {",
          "733:                         case 'reload':",
          "734:                             var fname = msg.data.fname, fext, fia;",
          "735:                             if (fname)",
          "736:                                 fia = fname.lastIndexOf('.');",
          "737:                             if (fia && fia>0)",
          "738:                                 fext = fname.substr(fia+1);",
          "739:                             if (w.noreloadexts != '' && fname) {",
          "740:                                 if (typeof(w.noreloadexts)==='string')",
          "741:                                     w.noreloadexts = w.noreloadexts.split(',');",
          "742:                                 if (fext && w.noreloadexts.indexOf(fext)>=0) {",
          "743:                                     if (w.debug)",
          "744:                                         puts('ignoring changed file: '+fname);",
          "745:                                     return;",
          "746:                                 }",
          "747:                             }",
          "748:                             if (w.onchange)",
          "749:                                 w.onchange(fname, fext);",
          "750:                         return;",
          "751:                         default: puts('unknown * cmd');",
          "752:                     }",
          "753:                     return;",
          "755:                 if (msg.mod === '*') {",
          "756:                     puts('TODO: broadcast');",
          "757:                     return;",
          "758:                 }",
          "759:                 if (w.onrecv)",
          "760:                     w.onrecv(msg);",
          "761:             },",
          "762:         };",
          "763:         if (self.wsstarted) {",
          "764:             console.log('websock already started');",
          "767:         self.wsstarted = 1;",
          "768:         if (opts) {",
          "769:             if (typeof(opts) === 'string') {",
          "770:                 var nops = {}, flst = opts.split('|');",
          "771:                 for (var fli in flst) {",
          "772:                     var fnn = flst[fli].split(':');",
          "773:                     nops[fnn[0]] = fnn[1];",
          "774:                 }",
          "775:                 opts = nops;",
          "776:             }",
          "777:             for (var i in opts) {",
          "778:                 if (w[i]===undefined)",
          "779:                     puts(i,'unknown, expected: '+Object.keys(w));",
          "780:                 w[i] = opts[i];",
          "781:             }",
          "783:         var url = document.URL.replace(/^http/,'ws').split('#')[0];",
          "784:         self.ws = ws = new WebSocket(url, w.prot);",
          "785:         ws.onmessage = w.onmessage;",
          "786:         if (w.onopen)",
          "787:             ws.onopen = w.onopen;",
          "788:         puts('Websock Started');",
          "789:         return ws;",
          "790:     },",
          "792:     getCookie:function(cname) {",
          "793:         var name = cname + \"=\";",
          "794:         var dc = decodeURIComponent(document.cookie);",
          "795:         var ca = dc.split(';');",
          "796:         for(var i = 0; i <ca.length; i++) {",
          "797:             var c = ca[i];",
          "798:             while (c.charAt(0) == ' ')",
          "799:                 c = c.substring(1);",
          "800:             if (c.indexOf(name) == 0)",
          "801:                 return c.substring(name.length, c.length);",
          "802:         }",
          "803:         return \"\";",
          "804:     },",
          "806:     matchObj:function(msg, match, partial, noerror, pfx) { //msg:object,match:string=void,partial=false,noerror=false",
          "807:         function validate(msg, match, partial) { //msg:object,match:string=void,partial=false",
          "808:             function typeGet(msg) {",
          "809:                 var tt = gettype(msg);",
          "810:                 if (tt !== 'object')",
          "811:                     throw('expected object');",
          "812:                 var pat = '{', pre = '';",
          "813:                 var keys = Object.keys(msg).sort();",
          "814:                 for (var i=0; i<keys.length; i++) {",
          "815:                     var nni = keys[i];",
          "816:                     pat += pre + nni + ':' + gettype(msg[nni]);",
          "817:                     pre = ',';",
          "818:                 }",
          "819:                 pat += '}';",
          "820:                 return pat;",
          "821:             }",
          "823:             var len = 1, i, pat = typeGet(msg);",
          "824:             if (!match)",
          "825:                 return pat;",
          "826:             if (typeof(match) !== 'string')",
          "827:                 throw('arg 2: expected string');",
          "829:             match = match.replace(/\\s/g,'');",
          "830:             if (pat === match)",
          "831:                 return;",
          "832:             if (!partial)",
          "833:                 throw('matchOjb failed: expected \"'+match+'\", not \"'+pat+'\"');",
          "834:             var ss = match.substr(1,match.length-2).split(','), sl = {};",
          "835:             for (i=0; i<ss.length; i++) {",
          "836:                 var st = ss[i].split(':');",
          "837:                 sl[st[0]] = st[1];",
          "838:             }",
          "839:             for (i in msg) {",
          "840:                 if (sl[i] && gettype(msg[i]) === sl[i]) continue;",
          "841:                 throw('matchOjb failed: expected \"'+match+'\", not \"'+pat+'\"');",
          "842:             }",
          "843:         }",
          "844:         if (!pfx) pfx = '';",
          "845:         if (!match)",
          "846:             return validate(msg, match, partial);",
          "847:         try {",
          "848:             validate(msg, match, partial);",
          "849:         } catch(e) {",
          "850:             if (config.interp.asserts && console.assert && !noerror)",
          "851:                 return console.assert.bind(console.window, false, 'ASSERT:'+pfx+e);",
          "852:             else if (console.warn)",
          "853:                 return console.warn.bind(console.window, 'WARN: '+pfx+e);",
          "854:             else",
          "855:                 return console.log.bind(console.window, 'LOG: '+pfx+e);",
          "856:         }",
          "857:         return (function() {});",
          "858:     },",
          "859:     assert: function(exp, msg) {",
          "860:         if (!exp) {",
          "861:             var e = '!'+exp.toString()+' '+msg;",
          "862:             if (config.interp.asserts && console.assert)",
          "863:                 return console.assert.bind(console.window, false, 'ASSERT:'+e);",
          "864:             else if (console.warn)",
          "865:                 return console.warn.bind(console.window, 'WARN: '+e);",
          "866:             else",
          "867:                 return console.log.bind(console.window, 'LOG: '+e);",
          "868:         }",
          "869:     },",
          "871:     _main: function(f) { // Startup.",
          "872:         if (jsi.self.srcCnt>0) {",
          "873:             Log.debug(\"waiting for src\");",
          "874:             setTimeout(\"$jsi._main()\", 1000);",
          "875:             return;",
          "877:         var mode = location.search.match(/^\\?jsi.mode=(.+)$/);",
          "878:         if (mode && mode[1])",
          "879:             jsi.conf({mode:mode[1]});",
          "881:         if (jsi.config.onload)",
          "882:             jsi.config.onload();",
          "883:         var scr = $('script[src*=\"/jsi.js?websock=\"]')[0];",
          "884:         if (scr) {",
          "885:             var ss = scr.src.indexOf('=');",
          "886:             var ssv;",
          "887:             if (ss>0) {",
          "888:                 ssv = scr.src.substr(ss+1);",
          "889:                 if (ssv==='false') return;",
          "890:                 if (ssv==='true') ssv = undefined;",
          "891:             }",
          "892:             jsi.websock(ssv);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "901: window['$assert'] = jsi.assert;",
          "903: if (typeof window['puts'] === 'undefined')",
          "905: if (typeof window['$'] === 'undefined')",
          "908: if (document.readyState !== 'loading')",
          "910: else",
          "913: }());",
          "",
          "[Removed Lines]",
          "904:     window['puts'] = console.log.bind(console.window);",
          "906:     window['$'] = $jsi.$;",
          "909:     jsi._main();",
          "911:     document.addEventListener(\"DOMContentLoaded\", function () {jsi._main();}, false);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/jsi.h||src/jsi.h": [
          "File: src/jsi.h -> src/jsi.h"
        ],
        "src/jsiCmds.c||src/jsiCmds.c": [
          "File: src/jsiCmds.c -> src/jsiCmds.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4373: static Jsi_RC VueConvertCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "4374:     Jsi_Value **ret, Jsi_Func *funcPtr)",
          "4375: {",
          "4379:     if (!path)",
          "4380:         return Jsi_LogError(\"arg 1: expected path\");",
          "4383:     Jsi_DString dStr = {}, tStr = {};",
          "4385:     if (rc == JSI_OK)",
          "4387:     Jsi_DSFree(&dStr);",
          "4388:     if (rc == JSI_OK)",
          "4389:         Jsi_ValueMakeDStringObject(interp, ret, &tStr);",
          "",
          "[Removed Lines]",
          "4376:     bool ES6 = 0;",
          "4377:     Jsi_Value *path = Jsi_ValueArrayIndex(interp, args, 0),",
          "4381:     if (bval && Jsi_ValueGetBoolean(interp, bval, &ES6) != JSI_OK)",
          "4382:         return Jsi_LogError(\"arg 1: expected boolean\");",
          "4384:     Jsi_RC rc = Jsi_FileRead(interp, path, &dStr);",
          "4386:         rc = Jsi_VueConvert(interp, path, Jsi_DSValue(&dStr), &tStr, ES6);",
          "",
          "[Added Lines]",
          "4376:     int dLen;",
          "4377:     Jsi_Value *path = Jsi_ValueArrayIndex(interp, args, 0);",
          "4378:     Jsi_Value *arg = Jsi_ValueArrayIndex(interp, args, 1);",
          "4379:     const char *data = NULL;",
          "4382:     if (arg) {",
          "4383:         if (Jsi_ValueIsNull(interp, arg)) {",
          "4384:             data = \"%\";",
          "4385:             dLen = 1;",
          "4386:         } else",
          "4387:             data = Jsi_ValueString(interp, arg, &dLen);",
          "4388:         if (!data)",
          "4389:             return Jsi_LogError(\"arg 1: expected null or string\");",
          "4390:     }",
          "4392:     Jsi_RC rc = JSI_OK;",
          "4393:     if (data)",
          "4394:         Jsi_DSAppendLen(&dStr, data, dLen);",
          "4395:     else",
          "4396:         rc = Jsi_FileRead(interp, path, &dStr);",
          "4398:         rc = Jsi_VueConvert(interp, path, Jsi_DSValue(&dStr), Jsi_DSLength(&dStr), &tStr);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5149:     { \"sqlValues\",  SysSqlValuesCmd, 1,  2, \"name:string, obj:object=void\", .help=\"Get object values for SQL\"  },",
          "5150:     { \"times\",      SysTimesCmd,     1,  2, \"callback:function|boolean, count:number=1\", .help=\"Call function count times and return execution time in microseconds\", .retType=(uint)JSI_TT_NUMBER },",
          "5151:     { \"verConvert\", SysVerConvertCmd,1,  2, \"ver:string|number, zeroTrim:number=0\", .help=\"Convert a version to/from a string/number, or return null if not a version. For string output zeroTrim says how many trailing .0 to trim (0-2)\", .retType=(uint)JSI_TT_NUMBER|JSI_TT_STRING|JSI_TT_NULL },",
          "5153:     { NULL, 0,0,0,0, .help=\"Utilities commands\"  }",
          "5154: };",
          "",
          "[Removed Lines]",
          "5152:     { \"vueConvert\", VueConvertCmd,   1,  2, \"fn:string, es6:boolean=false\",.help=\"Convert a .vue file to .js\", .retType=(uint)JSI_TT_STRING },",
          "",
          "[Added Lines]",
          "5164:     { \"vueConvert\", VueConvertCmd,   1,  2, \"fn:string,data:string|null=void\",.help=\"Convert/generate .vue/.js file; returns a %s fmt string when data=null\", .retType=(uint)JSI_TT_STRING },",
          "",
          "---------------"
        ],
        "src/jsiEval.c||src/jsiEval.c": [
          "File: src/jsiEval.c -> src/jsiEval.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "358:             if (str) {",
          "359:                 if (!Jsi_Strcmp(nam, \"help\"))",
          "360:                     Jsi_LogInfo(\"...%s\", str);",
          "363:             }",
          "364:             return JSI_ERROR;",
          "365:         }",
          "",
          "[Removed Lines]",
          "361:                 else",
          "362:                     Jsi_LogError(\"%s near \\\"%s\\\"\", nam, str);",
          "",
          "[Added Lines]",
          "361:                 else if (str[0] != '!')",
          "362:                     Jsi_LogError(\"%s near \\\"%s\\\"\", nam, str);",
          "363:                 else {",
          "364:                     bool ov = interp->dumpedStack;",
          "365:                     interp->dumpedStack = 1;",
          "366:                     Jsi_LogError(\"%s\", str);",
          "367:                     interp->dumpedStack = ov;",
          "368:                 }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "811:     jsiVarDeref(interp, stackargc + 1);",
          "812:     int tocall_index = interp->framePtr->Sp - stackargc - 1;",
          "813:     Jsi_Value *_this = _jsi_THISIDX(tocall_index),",
          "818:     Jsi_IncrRefCount(interp, args);",
          "820:         _this = Jsi_ValueDup(interp, interp->Top_object);",
          "822:         _this = Jsi_ValueDup(interp, _this);",
          "823:         jsiClearThis(interp, tocall_index);",
          "825:     Jsi_RC rc = jsiFunctionSubCall(interp, args, _this, &spretPtr, tocall, discard);",
          "827:     jsiPop(interp, stackargc);",
          "828:     jsiClearStack(interp,1);",
          "829:     if (rc == JSI_CONTINUE) {",
          "830:         Jsi_ValueMakeUndef(interp, &_jsi_TOP);",
          "",
          "[Removed Lines]",
          "819:     if (_this->vt != JSI_VT_OBJECT)",
          "821:     else {",
          "824:     }",
          "",
          "[Added Lines]",
          "825:     bool isArrow = 0;",
          "826:     if (tocall && tocall->vt == JSI_VT_OBJECT && tocall->d.obj->ot == JSI_OT_FUNCTION)",
          "827:         isArrow = tocall->d.obj->d.fobj->func->isArrow;",
          "828:     if (isArrow) {",
          "829:         _this = interp->framePtr->inthis;",
          "830:         Jsi_IncrRefCount(interp, _this);",
          "831:     } else if (_this->vt != JSI_VT_OBJECT) {",
          "833:     } else {",
          "836:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2289:     return JSI_OK;",
          "2290: }",
          "2295:     Jsi_RC rc = JSI_OK;",
          "2299:         fns = cp+1;",
          "2300:     while (rc == JSI_OK) {",
          "2303:         const char *t[5] = {0,0,0,0,0}, *pf = NULL, *name = NULL;",
          "2304:         t[0] = str;",
          "2306:             pf = p[0];",
          "2307:         else if (!cnt) {",
          "2310:         } else {",
          "2311:             cp = s+lt;",
          "2313:                 pf = \"<template name=\";",
          "2314:             else {",
          "2316:                 name = cp;",
          "2317:                 while (*cp && (isalnum(*cp) || *cp == '-' || *cp == '_')) cp++;",
          "2321:                 }",
          "2322:             }",
          "2323:         }",
          "",
          "[Removed Lines]",
          "2292: Jsi_RC Jsi_VueConvert(Jsi_Interp *interp, Jsi_Value *fn, const char *str, Jsi_DString *tStr, bool ES6) {",
          "2294:     static const char *p[3] = {\"<template\", \"\\n</template>\\n<script>\\n\", \"\\n</script>\\n\" };",
          "2296:     int cnt = 0, lt = Jsi_Strlen(p[0]), nameLen = 0;",
          "2297:     const char *s = str, *cp, *fns = Jsi_ValueString(interp, fn, NULL);",
          "2298:     if (fns && (cp = Jsi_Strrchr(fns, '/')))",
          "2301:         while (*s && isspace(*s)) s++;",
          "2302:         if (!*s) break;",
          "2305:         if (Jsi_Strncmp(s, p[0], lt))",
          "2308:             if (s[lt]=='>')",
          "2309:                 t[1] = s + lt+1;",
          "2312:             if (Jsi_Strncmp(cp, \" name=\\\"\", 7))",
          "2315:                 cp += 7;",
          "2318:                 if (*cp == '\"' && cp[1] == '>' && name != cp) {",
          "2319:                     t[1] = cp + 2;",
          "2320:                     nameLen = cp-name;",
          "",
          "[Added Lines]",
          "2305: Jsi_RC Jsi_VueConvert(Jsi_Interp *interp, Jsi_Value *fn, const char *str, int sLen, Jsi_DString *tStr) {",
          "2307:     static const char **p,",
          "2312:     const char *s = str, *cp, *cx, *fext, *fns = Jsi_ValueString(interp, fn, NULL);",
          "2313:     if (!fns)",
          "2314:         return Jsi_LogError(\"missing file name\");",
          "2315:     if ((cp = Jsi_Strrchr(fns, '/')))",
          "2317:     if ((cp = Jsi_Strrchr(fns, '.')))",
          "2318:         fext = cp+1;",
          "2319:     if (!fext || (Jsi_Strcmp(fext, \"js\") && Jsi_Strcmp(fext, \"vue\")))",
          "2320:         return Jsi_LogError(\"file ext must be .js or .vue\");",
          "2321:     bool invue = (*fext == 'v');",
          "2322:     p = (invue ? r:q);",
          "2323:     int cnt = 0, nameLen = 0, xcnt, lcnt;",
          "2326:         if (cnt==0 && (!*s || (*s=='%' &&  !s[1]))) {",
          "2327:             if (!*s)",
          "2328:                 t[0] = t[1] = t[2] = t[3] = t[4] = \"\";",
          "2329:             else {",
          "2330:                 t[1] =  \"\\n%s\";",
          "2331:                 t[3] = (invue?\"\\n%s\":\"%s\");",
          "2332:                 t[2] = t[1]+Jsi_Strlen(t[1]);",
          "2333:                 t[4] = t[3]+Jsi_Strlen(t[3]);",
          "2334:                 s = t[2];",
          "2335:             }",
          "2336:             if (invue)",
          "2337:                 goto outjs;",
          "2338:             else",
          "2339:                 goto outvue;",
          "2340:         }",
          "2341:         while (*s && isspace(*s))",
          "2342:             Jsi_DSAppendLen(tStr, s++, 1);",
          "2343:         if (!*s) break;",
          "2345:         cp = (cnt==0 || invue ? p[0] : x[0]);",
          "2346:         int lt = Jsi_Strlen(cp);",
          "2347:         if (Jsi_Strncmp(s, cp, lt))",
          "2350:             if (invue) {",
          "2351:                 if (s[lt]=='>')",
          "2352:                     t[1] = s + lt+1;",
          "2353:             } else {",
          "2354:                 cp = Jsi_Strstr(s + lt, x[1]);",
          "2355:                 if (cp)",
          "2356:                     t[1] = cp + Jsi_Strlen(x[1]);",
          "2357:                 else",
          "2358:                     pf = x[1];",
          "2359:             }",
          "2362:             cx = (cnt==0 || invue ? \" name=\\\"\" : \"\");",
          "2363:             xcnt = Jsi_Strlen(cx);",
          "2364:             if (Jsi_Strncmp(cp, cx, xcnt))",
          "2367:                 cp += xcnt;",
          "2369:                 lcnt = Jsi_Strlen(x[1]);",
          "2371:                 if (*cp == '\"' && name != cp) {",
          "2372:                     if (xcnt && cp[1] == '>') {",
          "2373:                         t[1] = cp + 2;",
          "2374:                         nameLen = cp-name;",
          "2375:                     } else if (!xcnt && !Jsi_Strncmp(cp, x[1], lcnt)) {",
          "2376:                         t[1] = cp + lcnt;",
          "2377:                         nameLen = cp-name;",
          "2378:                     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2331:                     pf = p[1];",
          "2332:                 else {",
          "2333:                     t[3] = t[2]+Jsi_Strlen(p[1]);",
          "2335:                     if (cp) {",
          "2337:                         t[4] = Jsi_Strstr(t[3], p[2]);",
          "2338:                     }",
          "2339:                     if (!t[4])",
          "",
          "[Removed Lines]",
          "2334:                     cp = Jsi_Strchr(t[3], '{'); // Skip \"export default\" or \"module.export\", etc.",
          "2336:                         t[3] = cp+1;",
          "",
          "[Added Lines]",
          "2392:                     if (invue)",
          "2393:                         cp = Jsi_Strchr(t[3], '{'); // Skip \"export default\" or \"module.export\", etc.",
          "2394:                     else",
          "2395:                         cp = t[3];",
          "2397:                         t[3] = cp+(invue?1:0);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2342:             }",
          "2343:         }",
          "2344:         if (pf)",
          "2349:             Jsi_DSAppendLen(tStr, t[1], t[2]-t[1]);",
          "2351:             Jsi_DSAppendLen(tStr, t[3], t[4]-t[3]);",
          "2353:         }",
          "2354:         else {",
          "2360:                 Jsi_DSAppendLen(tStr, name, nameLen);",
          "2361:             }",
          "2363:             Jsi_DSAppendLen(tStr, t[1], t[2]-t[1]);",
          "2365:             Jsi_DSAppendLen(tStr, t[3], t[4]-t[3]);",
          "2367:         }",
          "2369:         cnt++;",
          "2370:     }",
          "2371:     return rc;",
          "2372: }",
          "",
          "[Removed Lines]",
          "2345:             rc = Jsi_LogError(\"bad vue template '%s': expected '%s' at %.20s\", fns, pf, s);",
          "2346:         else if (cnt==0 && ES6) {",
          "2348:             Jsi_DSAppend(tStr, \"export default {\\n  template:`\", NULL);",
          "2350:             Jsi_DSAppend(tStr, \"\\n\\n`,\\n\", NULL);",
          "2356:             if (!cnt)",
          "2357:                 Jsi_DSAppend(tStr, \"'use strict'; Pdq.Component('\", fns, NULL);",
          "2358:             else {",
          "2359:                 Jsi_DSAppend(tStr, \"\\nVue.component('\", NULL);",
          "2362:             Jsi_DSAppend(tStr, \"', { template:`\", NULL);",
          "2364:             Jsi_DSAppend(tStr, \"\\n\\n`,\\n\", NULL);",
          "2366:             Jsi_DSAppend(tStr, \"\\n);\", NULL);",
          "2368:         s = t[4]+Jsi_Strlen(p[2]);",
          "",
          "[Added Lines]",
          "2406:             rc = Jsi_LogError(\"bad vue template '%s': expected '%s' at %.40s\", fns, pf, s);",
          "2407:         else if (!invue) {",
          "2408: outvue:",
          "2409:             Jsi_DSAppend(tStr, r[0], (cnt?\" name=\\\"\":\">\"), NULL);",
          "2410:             if (cnt) {",
          "2411:                 Jsi_DSAppendLen(tStr, name, nameLen);",
          "2412:                 Jsi_DSAppend(tStr, \"\\\">\", NULL);",
          "2413:             }",
          "2415:             Jsi_DSAppend(tStr, r[1], \" export default {\\n\", NULL);",
          "2417:             Jsi_DSAppend(tStr, r[2], NULL);",
          "2420: outjs:",
          "2421:             if (!cnt) {",
          "2422:                 int fnln = Jsi_Strlen(fns)-4;",
          "2423:                 Jsi_DSAppend(tStr, q[0], NULL);",
          "2424:                 Jsi_DSAppendLen(tStr, fns, fnln);",
          "2425:             } else {",
          "2426:                 Jsi_DSAppend(tStr, \"\\n\\n\", x[0], NULL);",
          "2429:             Jsi_DSAppend(tStr, x[1], NULL);",
          "2431:             Jsi_DSAppendLen(tStr, q[1], Jsi_Strlen(q[1])-1);",
          "2435:             Jsi_DSAppend(tStr, q[2], NULL);",
          "2437:         if (*s)",
          "2438:             s = t[4]+Jsi_Strlen(p[2]) + (invue?0:2);",
          "2441:     Jsi_DSAppend(tStr, \"\\n\", NULL);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2404:     Jsi_DSInit(&tStr);",
          "2406:     if (str == NULL) {",
          "2408:             fext = Jsi_Strrchr(fname, '.');",
          "2410:                 Jsi_DSAppendLen(&fStr, fname, fnLen-1);",
          "",
          "[Removed Lines]",
          "2407:         if (fname != NULL) {",
          "",
          "[Added Lines]",
          "2478:         if (fname == NULL)",
          "2479:             goto bail;",
          "2480:         else {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2514:             if (flags&JSI_EVAL_IMPORT)",
          "2515:                 Jsi_DSAppend(&dStr, \"return (function(){ \", NULL);",
          "2518:                 if (!Jsi_Gets(interp, input, buf, sizeof(buf)))",
          "2519:                     break;",
          "2521:                     Jsi_DSAppend(&dStr, \"\\n\", NULL);",
          "2522:                     continue;",
          "2523:                 }",
          "",
          "[Removed Lines]",
          "2517:             while (cnt<MAX_LOOP_COUNT) {",
          "2520:                 if (++cnt==1 && (!(flags&JSI_EVAL_NOSKIPBANG)) && (buf[0] == '#' && buf[1] == '!')) {",
          "",
          "[Added Lines]",
          "2590:             while (cnt++ < MAX_LOOP_COUNT) {",
          "2593:                 if (cnt==1 && (!(flags&JSI_EVAL_NOSKIPBANG)) && (buf[0] == '#' && buf[1] == '!')) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2559:     oldSp = interp->framePtr->Sp;",
          "2561:     rc = JSI_OK;",
          "2564:         if (rc != JSI_OK)",
          "2565:             goto bail;",
          "2566:         str = Jsi_DSValue(&tStr);",
          "",
          "[Removed Lines]",
          "2562:     if (fext && !Jsi_Strcmp(fext, \".vue\") && (interp->noEval || (flags&JSI_EVAL_NOEVAL))) {",
          "2563:         rc = Jsi_VueConvert(interp, path, str, &tStr, !interp->noES6);",
          "",
          "[Added Lines]",
          "2635:     if (str && *str && fext && !Jsi_Strcmp(fext, \".vue\") && (interp->noEval || (flags&JSI_EVAL_NOEVAL))) {",
          "2637:         rc = Jsi_VueConvert(interp, path, str, Jsi_Strlen(str), &tStr);",
          "",
          "---------------"
        ],
        "src/jsiFileCmds.c||src/jsiFileCmds.c": [
          "File: src/jsiFileCmds.c -> src/jsiFileCmds.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "426: Jsi_RC Jsi_FileRead(Jsi_Interp *interp, Jsi_Value *name, Jsi_DString *dStr) {",
          "427:     Jsi_RC rc = JSI_ERROR;",
          "428:     Jsi_Channel chan = Jsi_Open(interp, name, \"rb\");",
          "430:     if (!chan)",
          "431:         return rc;",
          "432:     char buf[JSI_BUFSIZ];",
          "434:         Jsi_DSAppendLen(dStr, buf, n);",
          "435:         sum += n;",
          "436:     }",
          "",
          "[Removed Lines]",
          "429:     int n, sum = 0;",
          "433:     while (sum < MAX_LOOP_COUNT && (n = Jsi_Read(interp, chan, buf, sizeof(buf))) > 0) {",
          "",
          "[Added Lines]",
          "429:     int n, sum = 0, cnt = 0;",
          "433:     while (cnt++ < MAX_LOOP_COUNT && (n = Jsi_Read(interp, chan, buf, sizeof(buf))) > 0) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "447:     SAFEACCESS(fname, 0, 0)",
          "449:     Jsi_Channel chan = Jsi_Open(interp, fname, (mode ? mode : \"rb\"));",
          "451:     if (!chan)",
          "452:         return Jsi_LogError(\"failed open for read: %s\", GSVal(fname));",
          "453:     Jsi_DString dStr = {};",
          "454:     char buf[JSI_BUFSIZ];",
          "456:         Jsi_DSAppendLen(&dStr, buf, n);",
          "457:         sum += n;",
          "458:     }",
          "",
          "[Removed Lines]",
          "450:     int n, sum = 0;",
          "455:     while (sum < MAX_LOOP_COUNT && (n = Jsi_Read(interp, chan, buf, sizeof(buf))) > 0) {",
          "",
          "[Added Lines]",
          "450:     int n, sum = 0, cnt = 0;",
          "455:     while (cnt++ < MAX_LOOP_COUNT && (n = Jsi_Read(interp, chan, buf, sizeof(buf))) > 0) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "481:     chan = Jsi_Open(interp, fname, (mode ? mode : \"wb+\"));",
          "482:     if (!chan)",
          "483:         return Jsi_LogError(\"failed open for write: %s\", GSVal(fname));",
          "485:         len -= n;",
          "486:         sum += n;",
          "487:         cnt++;",
          "",
          "[Removed Lines]",
          "484:     while (cnt < MAX_LOOP_COUNT && len > 0 && (n = Jsi_Write(interp, chan, data, len)) > 0) {",
          "",
          "[Added Lines]",
          "484:     while (cnt < MAX_LOOP_COUNT && len > 0 && (n = Jsi_Write(interp, chan, data+sum, len)) > 0) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "818: }",
          "820: static Jsi_RC FileJoinCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "821:     Jsi_Value **ret, Jsi_Func *funcPtr)",
          "822: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "820: static Jsi_RC FileNormalizeCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "821:     Jsi_Value **ret, Jsi_Func *funcPtr)",
          "822: {",
          "823:     const char *path = Jsi_ValueArrayIndexToStr(interp, args, 0, NULL);",
          "824:     Jsi_DString dStr = {};",
          "825:     if (path)",
          "826:         path = Jsi_NormalPath(interp, path, &dStr);",
          "827:     if (path)",
          "828:         Jsi_ValueMakeStringDup(interp, ret, (char*)path);",
          "829:     Jsi_DSFree(&dStr);",
          "830:     return JSI_OK;",
          "832: }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "906: {",
          "907:     if (cnt>interp->maxIncDepth || !path)",
          "908:         return Jsi_LogError(\"runaway File.globs\");",
          "910:     char pbuf[PATH_MAX];",
          "911:     Jsi_RC rc = JSI_OK;",
          "912:     int i, n, flags = opts->flags, slen;",
          "",
          "[Removed Lines]",
          "909:     struct dirent **namelist;",
          "",
          "[Added Lines]",
          "922:     struct dirent **namelist = NULL;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "963:         Jsi_ValueMakeString(interp, &rpPath, dcp);",
          "965:     if ((n=Jsi_Scandir(interp, rpPath, &namelist, 0, alphasort)) < 0) {",
          "967:         Jsi_LogError(\"bad directory\");",
          "968:         Jsi_DecrRefCount(interp, rpPath);",
          "969:         return JSI_ERROR;",
          "",
          "[Removed Lines]",
          "966:         if (opts->recurse && deep) return JSI_OK;",
          "",
          "[Added Lines]",
          "979:         if (opts->recurse && deep) goto done;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1114:         opts->cnt++;",
          "1115:         if (!opts->retCount) {",
          "1116:             Jsi_DSSetLength(&tStr, 0);",
          "1119:             if (!opts->tails)",
          "1120:                 Jsi_DSAppend(&tStr, spath, (spath[0]?\"/\":\"\"), NULL);",
          "1121:             Jsi_DSAppend(&tStr, z, NULL);",
          "1122:             z = Jsi_DSValue(&tStr);",
          "1126:             }",
          "1127:             Jsi_Value *nv;",
          "1130:             else {",
          "1131:                 Jsi_Value *info = Jsi_ValueNew1(interp);",
          "1132:                 snprintf(pbuf, sizeof(pbuf), \"%s%s%s\", spath, (spath[0]?\"/\":\"\"),  z);",
          "",
          "[Removed Lines]",
          "1117:             if (opts->prefix)",
          "1118:                 Jsi_DSAppend(&tStr, opts->prefix, NULL);",
          "1123:             if (!opts->tails && opts->dirLen && Jsi_Strlen(z)>=(uint)opts->dirLen) {",
          "1124:                 z += opts->dirLen;",
          "1125:                 if (z[0] == '/') z++;",
          "1128:             if (!opts->retInfo)",
          "1129:                 nv = Jsi_ValueNewStringDup(interp, z);",
          "",
          "[Added Lines]",
          "1134:             uint dlen = (uint)opts->dirLen;",
          "1135:             if (!opts->tails && dlen && Jsi_Strlen(z)>=dlen) {",
          "1136:                 z += dlen;",
          "1137:                 if (z[0] == '/' && !opts->prefix) z++;",
          "1140:             if (!opts->retInfo) {",
          "1141:                 if (!opts->prefix)",
          "1142:                     nv = Jsi_ValueNewStringDup(interp, z);",
          "1143:                 else {",
          "1144:                     Jsi_DString pStr = {};",
          "1145:                     nv = Jsi_ValueNewStringDup(interp, Jsi_DSAppend(&pStr, opts->prefix, z, NULL));",
          "1146:                     Jsi_DSFree(&pStr);",
          "1147:                 }",
          "1148:             }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1226:         pat = Data.pattern;",
          "1227:     if (!Data.limit)",
          "1228:         Data.limit = interp->maxArrayList;",
          "1230:         dcp = Data.dirStr = Jsi_ValueString(interp, Data.dir, &Data.dirLen);",
          "1231:         if (*dcp == '~') {",
          "1232:             dcp = Jsi_FileRealpath(interp, Data.dir, NULL);",
          "",
          "[Removed Lines]",
          "1229:     if (Data.dir) {",
          "",
          "[Added Lines]",
          "1248:     if (!Data.dir) {",
          "1249:         Jsi_DString dStr = {};",
          "1250:         dcp = Jsi_GetCwd(interp, &dStr);",
          "1251:         Data.dirLen = Jsi_Strlen(dcp);",
          "1252:         Data.dir = Jsi_ValueNewStringDup(interp, dcp);",
          "1253:         Jsi_IncrRefCount(interp, Data.dir);",
          "1254:         Jsi_DSFree(&dStr);",
          "1255:         isOpts = 1;",
          "1256:     } else {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1307:     { \"mkdir\",      FileMkdirCmd,       1,  2, \"file:string,force:boolean=false\",  .help=\"Create a directory: force creates subdirs\" },",
          "1308:     { \"mknod\",      FileMknodCmd,       3,  3, \"file:string, mode:number, dev:number\", .help=\"Create unix device file using mknod\"  },",
          "1309:     { \"mtime\",      FileMtimeCmd,       1,  1, \"file:string\",  .help=\"Return file modified time\", .retType=(uint)JSI_TT_NUMBER },",
          "1310:     { \"owned\",      FileOwnedCmd,       1,  1, \"file:string\",  .help=\"Return true if file is owned by user\", .retType=(uint)JSI_TT_BOOLEAN },",
          "1311:     { \"perms\",      FilePermsCmd,       1,  1, \"file:string\",  .help=\"Return perms string\", .retType=(uint)JSI_TT_STRING },",
          "1312:     { \"pwd\",        FilePwdCmd,         0,  0, \"\",  .help=\"Return current directory\", .retType=(uint)JSI_TT_STRING },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1337:     { \"normalize\",  FileNormalizeCmd,   1,  1, \"file:string\",  .help=\"Return normalized file path\", .retType=(uint)JSI_TT_STRING },",
          "",
          "---------------"
        ],
        "src/jsiFilesys.c||src/jsiFilesys.c": [
          "File: src/jsiFilesys.c -> src/jsiFilesys.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "951: static Jsi_RC FilesysWriteCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "952:     Jsi_Value **ret, Jsi_Func *funcPtr)",
          "953: {",
          "955:     UdfGet(udf, _this, funcPtr);",
          "956:     char *buf = Jsi_ValueArrayIndexToStr(interp, args, 0, &m);",
          "958:     if (!udf->filename) {",
          "959:         goto bail;",
          "960:     }",
          "963:         sum += n;",
          "964:         m -= n;",
          "",
          "[Removed Lines]",
          "954:     int  sum = 0, n, m;",
          "961:     while (m > 0 && sum < MAX_LOOP_COUNT && (n = Jsi_Write(interp, udf->chan, buf, m)) > 0) {",
          "",
          "[Added Lines]",
          "954:     int  sum = 0, n, m, cnt = 0;",
          "961:     while (m > 0 && cnt++ < MAX_LOOP_COUNT && (n = Jsi_Write(interp, udf->chan, buf+sum, m)) > 0) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1204: char* Jsi_NormalPath(Jsi_Interp *interp, const char *path, Jsi_DString *dStr) {",
          "1206:     char cdbuf[PATH_MAX];",
          "1207:     Jsi_DSInit(dStr);",
          "1208:     if (!path || !path[0]) return NULL;",
          "1209:     if (*path == '/')",
          "1210:         Jsi_DSAppend(dStr, path, NULL);",
          "1213:         Jsi_DSAppend(dStr, path, NULL);",
          "1214:         return Jsi_DSValue(dStr);",
          "1215:     }",
          "1217:     else if (path[0] == '~') {",
          "1219:     } else if (path[0] == '.' && path[1] == 0) {",
          "1220:         if (jsiIntData.pwd) {",
          "1221:             Jsi_DSAppend(dStr, jsiIntData.pwd, NULL);",
          "",
          "[Removed Lines]",
          "1205:     char prefix[3] = \"\";",
          "1212:     else if (*path && path[1] == ':') {",
          "1216: #endif",
          "1218:         Jsi_DSAppend(dStr, jsi_GetHomeDir(interp), (path[1] == '/' ? \"\" : \"/\"), path+1, NULL);",
          "",
          "[Added Lines]",
          "1211:     else if (isalpha(*path) && path[1] == ':') {",
          "1217:         jsi_TildePath(interp, path, dStr);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1232:     Jsi_DString sStr = {};",
          "1233:     char *cp = Jsi_DSValue(dStr);",
          "1234: #ifdef __WIN32",
          "1239:         cp += 2;",
          "1240:     }",
          "1241: #endif",
          "1242:     int i=0, n=0, m, nmax, unclean=0, slens[PATH_MAX];",
          "1244:     char *sptrs[PATH_MAX];",
          "1245:     while (*cp && n<PATH_MAX) {",
          "1246:         while (*cp && *cp == '/') {",
          "",
          "[Removed Lines]",
          "1235:     if (*cp && cp[1] == ':') {",
          "1236:         prefix[0] = *cp;",
          "1237:         prefix[1] = cp[1];",
          "1238:         prefix[2] = 0;",
          "1243:     char *sp = cp, *ss;",
          "",
          "[Added Lines]",
          "1234:     if (isalpha(*cp) && cp[1] == ':') {",
          "1236:         Jsi_DSAppendLen(&sStr, cp, 2);",
          "1241:     char *ss;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1258:         cp = ss;",
          "1259:     }",
          "1260:     if (!unclean)",
          "1263:     nmax = n--;",
          "1264:     while (n>0) {",
          "",
          "[Removed Lines]",
          "1261:         return sp;",
          "",
          "[Added Lines]",
          "1259:         goto done;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1278:                 m--;",
          "1279:             }",
          "1280:             if (cnt<1)",
          "1282:         }",
          "1283:         n--;",
          "1284:     }",
          "1287:     for (i=0; i<nmax; i++) {",
          "1288:         if (slens[i]) {",
          "1289: #ifdef __WIN32",
          "",
          "[Removed Lines]",
          "1286:     Jsi_DSAppend(&sStr, prefix, NULL);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1296:     }",
          "1297:     Jsi_DSSetLength(dStr, 0);",
          "1298:     Jsi_DSAppend(dStr, Jsi_DSValue(&sStr), NULL);",
          "1299:     Jsi_DSFree(&sStr);",
          "1300:     return Jsi_DSValue(dStr);",
          "1301: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1295: done:",
          "",
          "---------------"
        ],
        "src/jsiInterp.c||src/jsiInterp.c": [
          "File: src/jsiInterp.c -> src/jsiInterp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "838:                 break;",
          "839:             case 'i':",
          "840:                 if (argc <= 2)",
          "842:                 else {",
          "843:                     Jsi_DString dStr = {}, eStr = {};",
          "844:                     const char *cps, *cpe;",
          "",
          "[Removed Lines]",
          "841:                     rc = Jsi_LogError(\"expected a module-name to invoke: or use 'jsish -m run'\");",
          "",
          "[Added Lines]",
          "841:                     rc = Jsi_LogError(\"expected a module-name to invoke'\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "891:                 rc = Jsi_EvalString(interp, \"moduleRun('Zip');\", JSI_EVAL_ISMAIN);",
          "892:                 break;",
          "893:             default:",
          "897:         }",
          "898:     } else {",
          "",
          "[Removed Lines]",
          "894:                 puts(\"usage: jsish [ --E CODE | --I OPT:VAL | --T ] \\n\\t\"",
          "895:                 \"-a | -c | -d | -D | -e | -h | -i | J | -m  | -s | -S | -u | -v | -w | -W | -z | FILE ...\\nUse -help for long help.\");",
          "896:                 return jsi_DoExit(interp, 1);",
          "",
          "[Added Lines]",
          "894:                 goto helpout;",
          "895:         }",
          "896:     } else if (ai1[0] == '-') {",
          "897:         if (ai1[1] != '-' ||  !((ai1[2] == 'T' || (argc<2 && (ai1[2] == 'E' || ai1[2] == 'I'))) && !ai1[3])) {",
          "898: helpout:",
          "899:             puts(\"usage: jsish [ --E CODE | --I OPT:VAL | --T ] \\n\\t\"",
          "900:             \"-a | -c | -d | -D | -e | -h | -i | J | -m  | -s | -S | -u | -v | -w | -W | -z | FILE ...\\nUse -help for long help.\");",
          "901:             return jsi_DoExit(interp, 1);",
          "",
          "---------------"
        ],
        "src/jsiMySql.c||src/jsiMySql.c": [
          "File: src/jsiMySql.c -> src/jsiMySql.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: #include <stdio.h>",
          "29: #include <mysql/mysql.h>",
          "30: #include <mysql/my_config.h>",
          "32: #if JSI__MEMDEBUG",
          "33: #include \"jsiInt.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "31: #ifndef my_bool",
          "32: #define my_bool bool",
          "33: #endif",
          "",
          "---------------"
        ],
        "src/jsiStubs.h||src/jsiStubs.h": [
          "File: src/jsiStubs.h -> src/jsiStubs.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #endif",
          "10: #undef JSI_EXTENSION_INI",
          "11: #define JSI_EXTENSION_INI Jsi_Stubs *jsiStubsPtr = NULL;",
          "",
          "[Removed Lines]",
          "8: #define JSI_STUBS_MD5 \"06f4b81e3ef88190a192804091ac9f52\"",
          "",
          "[Added Lines]",
          "8: #define JSI_STUBS_MD5 \"8a8a6dd17365785032ac1fe8558d64fd\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "457:     Jsi_AccessorSpec*(*_Jsi_ObjAccessorWithSpec)(Jsi_Interp *interp, const char* objName, Jsi_OptionSpec *spec, void *dataPtr, Jsi_Value* callback, int flags);",
          "458:     Jsi_Func*(*_Jsi_FunctionFromValue)(Jsi_Interp *interp, Jsi_Value* value);",
          "459:     Jsi_RC (*_Jsi_NewVariable)(Jsi_Interp *interp, const char *name, Jsi_Value *val, int flags);",
          "461:     void *endPtr;",
          "462: } Jsi_Stubs;",
          "",
          "[Removed Lines]",
          "460:     Jsi_RC(*_Jsi_VueConvert)(Jsi_Interp *interp, Jsi_Value *fn, const char *str, Jsi_DString *tStr, bool ES6);",
          "",
          "[Added Lines]",
          "460:     Jsi_RC(*_Jsi_VueConvert)(Jsi_Interp *interp, Jsi_Value *fn, const char *str, int slen, Jsi_DString *outStr);",
          "",
          "---------------"
        ],
        "src/jsiUtils.c||src/jsiUtils.c": [
          "File: src/jsiUtils.c -> src/jsiUtils.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1071: }",
          "1073: static void jsiLNGetMatches(const char *str, linenoiseCompletions *lc) {",
          "1075:     const char *cp, *fnam = \"Info.completions\";",
          "1076:     int i = 0, len;",
          "1077:     int rc, isfile = 0, start = 0, end = Jsi_Strlen(str);",
          "",
          "[Removed Lines]",
          "1074:     char buf[JSI_BUFSIZ], pre[JSI_BUFSIZ], hpre[6] = {};",
          "",
          "[Added Lines]",
          "1074:     char buf[JSI_BUFSIZ], pre[JSI_BUFSIZ-15], hpre[6] = {};",
          "",
          "---------------"
        ],
        "src/jsiWebSocket.c||src/jsiWebSocket.c": [
          "File: src/jsiWebSocket.c -> src/jsiWebSocket.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1697:                     hrc = jsi_wsServeString(pss, wsi, Jsi_DSValue(&tStr), 0, NULL, mime);",
          "1698:                     jsi_wsFileAdd(interp, cmdPtr, fname, -1);",
          "1699:                 }",
          "1700:                 Jsi_DecrRefCount(interp, fname);",
          "1701:                 fname = NULL;",
          "1702:                 rc = hrc;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1700:                 Jsi_DSFree(&tStr);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2293:                 fprintf(stderr,  \"Received network connect from %s (%s)\\n\",",
          "2294:                      cmdPtr->clientName, cmdPtr->clientIP);",
          "2295: #ifndef __WIN32",
          "2297:                 if (cmdPtr->debug>1)",
          "2299:                 return 1;",
          "2300:             }",
          "2301: #endif",
          "",
          "[Removed Lines]",
          "2296:             if (cmdPtr->local && (cmdPtr->clientName && Jsi_Strcmp(cmdPtr->clientName, loname))) {",
          "2298:                     fprintf(stderr,  \"Dropping non-localhost connection\\n\");",
          "",
          "[Added Lines]",
          "2297:             if (cmdPtr->local && (cmdPtr->clientName &&",
          "2298:             (Jsi_Strcmp(cmdPtr->clientName, loname) && !Jsi_Strstr(cmdPtr->clientName, \"127.0.0.1\")))) {",
          "2300:                     fprintf(stderr,  \"Dropping non-localhost connection: %s != %s\\n\", cmdPtr->clientName, loname);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2838: }",
          "2840: static Jsi_RC jsi_wsHandleVue(Jsi_Interp *interp, jsi_wsCmdObj *cmdPtr, jsi_wsPss *pss, Jsi_Value *fn, Jsi_DString *tStr) {",
          "2842:     Jsi_DString dStr = {};",
          "2844:     Jsi_RC rc = jsi_wsFileRead(interp, fn, &dStr, cmdPtr, pss);",
          "2849:     return rc;",
          "2850: }",
          "",
          "[Removed Lines]",
          "2845:     if (rc != JSI_OK)",
          "2846:         return JSI_ERROR;",
          "2847:     const char *s = Jsi_DSValue(&dStr);",
          "2848:     rc = Jsi_VueConvert(interp, fn, s, tStr, cmdPtr->vueES6);",
          "",
          "[Added Lines]",
          "2846:     if (rc == JSI_OK) {",
          "2847:         const char *s = Jsi_DSValue(&dStr);",
          "2848:         int dlen = Jsi_DSLength(&dStr);",
          "2849:         if (!dlen)",
          "2850:             rc = Jsi_LogErrorExt(\"empty file\");",
          "2851:         else",
          "2852:             rc = Jsi_VueConvert(interp, fn, s, dlen, tStr);",
          "2853:     }",
          "2854:     Jsi_DSFree(&dStr);",
          "",
          "---------------"
        ],
        "tests/arrow.jsi||tests/arrow.jsi": [
          "File: tests/arrow.jsi -> tests/arrow.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: array1 = [1, 4, 9, 16];",
          "4: ;array1.map(function(x) { return x * 2; });",
          "",
          "[Removed Lines]",
          "1: var array1, n = 0;;",
          "",
          "[Added Lines]",
          "1: var array1, n = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "20: ;y.filter( function(n) { return x.includes(n); } );",
          "24: =!EXPECTSTART!=",
          "25: array1.map(function(x) { return x * 2; }) ==> [ 2, 8, 18, 32 ]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23: var z = {a:1, b:2, z:99};",
          "24: function foo() {",
          "25:   var bad = () => { return this.z; };",
          "26:   return bad();",
          "27: }",
          "30: ;foo.call(z);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "35: y.filter( n => x.includes(n) ) ==> [ 1, 2, 3 ]",
          "36: y.filter( n => { return x.includes(n); } ) ==> [ 1, 2, 3 ]",
          "37: y.filter( function(n) { return x.includes(n); } ) ==> [ 1, 2, 3 ]",
          "38: =!EXPECTEND!=",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "47: foo.call(z) ==> 99",
          "",
          "---------------"
        ],
        "tests/badfunc.jsi||tests/badfunc.jsi": [
          "File: tests/badfunc.jsi -> tests/badfunc.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: =!EXPECTSTART!=",
          "25: e ==> 'xx', functions are: bad big ugly.",
          "27: Info.funcs(x) ==> [ \"bad\", \"big\", \"ugly\" ]",
          "28: Info.data(x) ==> [ \"a\", \"b\" ]",
          "29: Info.data() ==> [ \"x\" ]",
          "",
          "[Removed Lines]",
          "26: e2 ==> 'xx' sub-commands are: atime chdir chmod copy dirname executable exists extension glob isdir isfile isrelative join link lstat mkdir mknod mtime owned perms pwd read readable readlink realpath remove rename rootname size stat tail tempfile truncate writable write.",
          "",
          "[Added Lines]",
          "26: e2 ==> 'xx' sub-commands are: atime chdir chmod copy dirname executable exists extension glob isdir isfile isrelative join link lstat mkdir mknod mtime normalize owned perms pwd read readable readlink realpath remove rename rootname size stat tail tempfile truncate writable write.",
          "",
          "---------------"
        ],
        "tools/protos.jsi||tools/protos.jsi": [
          "File: tools/protos.jsi -> tools/protos.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "71: File.prototype.mkdir = function(file:string,force:boolean=false):any {};",
          "72: File.prototype.mknod = function(file:string, mode:number, dev:number):any {};",
          "73: File.prototype.mtime = function(file:string):number {};",
          "74: File.prototype.owned = function(file:string):boolean {};",
          "75: File.prototype.perms = function(file:string):string {};",
          "76: File.prototype.pwd = function():string {};",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "74: File.prototype.normalize = function(file:string):string {};",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "323: Util.prototype.sqlValues = function(name:string, obj:object=void):any {};",
          "324: Util.prototype.times = function(callback:function|boolean, count:number=1):number {};",
          "325: Util.prototype.verConvert = function(ver:string|number, zeroTrim:number=0):number|string|null {};",
          "327: var Vfs = function(cmd,args) {};",
          "328: Vfs.prototype.conf = function(mount:string, options:string|object|string=void):any {};",
          "329: Vfs.prototype.exec = function(cmd:string):any {};",
          "",
          "[Removed Lines]",
          "326: Util.prototype.vueConvert = function(fn:string, es6:boolean=false):string {};",
          "",
          "[Added Lines]",
          "327: Util.prototype.vueConvert = function(fn:string,data:string|null=void):string {};",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "569037fbaee3fd29513bb9032a2594b8d007ddb5",
      "candidate_info": {
        "commit_hash": "569037fbaee3fd29513bb9032a2594b8d007ddb5",
        "repo": "pcmacdon/jsish",
        "commit_url": "https://github.com/pcmacdon/jsish/commit/569037fbaee3fd29513bb9032a2594b8d007ddb5",
        "files": [
          "Makefile",
          "README.md",
          "c-demos/stubs/Makefile",
          "lib/Websrv.jsi",
          "lib/web/md/Builds.md",
          "lib/web/md/Misc.md",
          "lib/web/md/Reference.md",
          "lib/web/md/Using.md",
          "src/jsi.h",
          "src/jsiEval.c",
          "src/jsiFileCmds.c",
          "src/jsiFunc.c",
          "src/jsiWebSocket.c",
          "tools/protos.jsi"
        ],
        "message": "Release \"3.2.1\": fixes and doc updates\n\nFossilOrigin-Name: 0871690a1be24808a31371f25ceb4afc9714fddd13d40f46dd9b20006b54cd4e",
        "before_after_code_files": [
          "lib/Websrv.jsi||lib/Websrv.jsi",
          "src/jsi.h||src/jsi.h",
          "src/jsiEval.c||src/jsiEval.c",
          "src/jsiFileCmds.c||src/jsiFileCmds.c",
          "src/jsiFunc.c||src/jsiFunc.c",
          "src/jsiWebSocket.c||src/jsiWebSocket.c",
          "tools/protos.jsi||tools/protos.jsi"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/jsi.h||src/jsi.h",
            "src/jsiEval.c||src/jsiEval.c",
            "src/jsiFunc.c||src/jsiFunc.c",
            "src/jsiWebSocket.c||src/jsiWebSocket.c"
          ],
          "candidate": [
            "src/jsi.h||src/jsi.h",
            "src/jsiEval.c||src/jsiEval.c",
            "src/jsiFunc.c||src/jsiFunc.c",
            "src/jsiWebSocket.c||src/jsiWebSocket.c"
          ]
        }
      },
      "candidate_diff": {
        "lib/Websrv.jsi||lib/Websrv.jsi": [
          "File: lib/Websrv.jsi -> lib/Websrv.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "17:     };",
          "18:     var options = { // Run a standalone web server, opening browser to serve out url.",
          "19:         anchor      :'',        // Anchor after url.",
          "20:         closeTimeout:0,         // Time til exit after close of final client websocket (ms).",
          "21:         confFile    :'',        // JSON file of options (eg. for useridPass or wsOpts).",
          "23:         ignoreExit  :false,     // Ignore exit request.",
          "24:         initArg     :[],        // List of app modules to run.",
          "25:         isFile      :false,     // Url is a file, so throw if not exists.",
          "26:         local       :true,      // Accept only local connections.",
          "28:         mode        :'',        // Mode string: menu, admin",
          "29:         noCheck     :false,     // Disable function type-checking for .jsi files in browser.",
          "30:         noGui       :false,     // Disable starting local browser.",
          "",
          "[Removed Lines]",
          "22:         browser     :'',        // The browser to exec, eg. \"chrome-browser\"",
          "27:         maxPort     :1000,      // Max to add to above port.",
          "",
          "[Added Lines]",
          "20:         browser     :'',        // The browser to exec, eg. \"chrome-browser\"",
          "23:         docs        :'',        // Display markdown docs from this directory.",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "33:         onRecv      :null,      // Callback command to handle websocket msgs.",
          "34:         pageStr     :'',        // String to serve out as url.",
          "35:         port        :0,         // Start search for port.",
          "36:         query       :'',        // Query to append to url.",
          "37:         rootdir     :null,      // Base directory.",
          "38:         server      :false,     // Server mode: same as noGui=true and closeTimout=0",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "36:         portMax     :1000,      // Max times to increment-retry port if busy.",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "217:         }",
          "219:         var i;",
          "221:             var err = null;",
          "222:             try {",
          "223:                 self.ws = new WebSocket(self.wsopts);",
          "",
          "[Removed Lines]",
          "220:         for (i=0; i<self.maxPort; i++) {",
          "",
          "[Added Lines]",
          "221:         for (i=0; i<self.portMax; i++) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "232:             self.wsopts.port++;",
          "233:             LogTrace(\"ee:\", err);",
          "234:         }",
          "236:             console.log(\"Failed to get port\");",
          "237:             return false;",
          "238:         }",
          "",
          "[Removed Lines]",
          "235:         if (i>=self.maxPort) {",
          "",
          "[Added Lines]",
          "236:         if (i>=self.portMax) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "410:             }",
          "411:             self.url = urlarg;",
          "412:         }",
          "415:             self.mnt = Jsi_Archive([self.zip], {noRun:true, version:self.zipVer});",
          "416:             if (!self.rootdir)",
          "417:                 self.rootdir = self.mnt;",
          "",
          "[Removed Lines]",
          "414:         if (self.zip) {",
          "",
          "[Added Lines]",
          "414:         if (self.docs) {",
          "415:             if (self.rootdir || self.zip)",
          "416:                 throw('can not use both rootdir/zip with docs');",
          "417:             self.rootdir = '/zvfs/lib/web';",
          "418:             self.url = 'Docs/Docs.html';",
          "419:             if (self.timeout != options.timeout)",
          "420:                 self.timeout = 0;",
          "423:         } else if (self.zip) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "419:                 self.rootdir = self.mnt + '/' + self.rootdir;",
          "420:             if (!self.url)",
          "421:                 self.url = getUrlInDir(self.mnt);",
          "424:             if (!self.url.length)",
          "425:                 self.rootdir = Info.scriptDir();",
          "426:             else",
          "",
          "[Removed Lines]",
          "422:         }",
          "423:         else if (!self.rootdir) {",
          "",
          "[Added Lines]",
          "432:         } else if (!self.rootdir) {",
          "",
          "---------------"
        ],
        "src/jsi.h||src/jsi.h": [
          "File: src/jsi.h -> src/jsi.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #define JSI_VERSION_MAJOR   3",
          "6: #define JSI_VERSION_MINOR   2",
          "9: #define JSI_VERSION (JSI_VERSION_MAJOR + ((Jsi_Number)JSI_VERSION_MINOR/100.0) + ((Jsi_Number)JSI_VERSION_RELEASE/10000.0))",
          "",
          "[Removed Lines]",
          "7: #define JSI_VERSION_RELEASE 0",
          "",
          "[Added Lines]",
          "7: #define JSI_VERSION_RELEASE 1",
          "",
          "---------------"
        ],
        "src/jsiEval.c||src/jsiEval.c": [
          "File: src/jsiEval.c -> src/jsiEval.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1912:                 break;",
          "1913:             }",
          "1914:             case OP_SCATCH: {",
          "1915:                 if (trylist == NULL || trylist->type != jsi_TL_TRY)",
          "1916:                     Jsi_LogBug(\"Unexpected SCATCH opcode??\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1915:                 interp->curIpLastError = NULL;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1933:                         Jsi_Value *ple = ps->last_exception;",
          "1934:                         Jsi_ValueCopy(interp, excpt, ple);",
          "1935:                         Jsi_ValueReset(interp, &ps->last_exception);",
          "1937:                         Jsi_ValueMakeStringDup(interp, &excpt, interp->errMsgBuf);",
          "1938:                         interp->errMsgBuf[0] = 0;",
          "1939:                     }",
          "",
          "[Removed Lines]",
          "1936:                     } else if (interp->errMsgBuf[0]) {",
          "",
          "[Added Lines]",
          "1937:                     } else {",
          "",
          "---------------"
        ],
        "src/jsiFileCmds.c||src/jsiFileCmds.c": [
          "File: src/jsiFileCmds.c -> src/jsiFileCmds.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1157:         Jsi_DecrRefCount(interp, rpPath);",
          "1158:     if (namelist) {",
          "1159:         while (--n >= 0)",
          "1162:     }",
          "1163:     return rc;",
          "1164: }",
          "",
          "[Removed Lines]",
          "1160:             Jsi_Free(namelist[n]);",
          "1161:         Jsi_Free(namelist);",
          "",
          "[Added Lines]",
          "1160:             free(namelist[n]);",
          "1161:         free(namelist);",
          "",
          "---------------"
        ],
        "src/jsiFunc.c||src/jsiFunc.c": [
          "File: src/jsiFunc.c -> src/jsiFunc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "202:     Jsi_RC rc = JSI_OK;",
          "203:     char idxBuf[JSI_MAX_NUMBER_STRING*2];",
          "204:     idxBuf[0] = 0;",
          "205:     if (func && arg->vt == JSI_VT_UNDEF && !interp->typeCheck.noundef && index>0 && !isdefault && !(typ&(JSI_TT_UNDEFINED|JSI_TT_ANY))) {",
          "206:         snprintf(idxBuf, sizeof(idxBuf), \" arg %d\", index);",
          "207:         jsi_TypeMismatch(interp);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "205:     if (func && func->cmdSpec && func->cmdSpec->maxArgs==-1 && index>=func->cmdSpec->minArgs)",
          "206:         return JSI_OK;",
          "",
          "---------------"
        ],
        "src/jsiWebSocket.c||src/jsiWebSocket.c": [
          "File: src/jsiWebSocket.c -> src/jsiWebSocket.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "117:     bool isBinary, isFinal;",
          "118: } jsi_wsStatData;",
          "121:     uint sig;",
          "122:     Jsi_Interp *interp;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "121: static const char *wsIndexTypeStrs[] = { \"auto\", \"html\", \"json\", \"jsonp\", \"disabled\", NULL };",
          "122: typedef enum { ws_IndexAuto, ws_IndexHtml, ws_IndexJson, ws_IndexJsonp, ws_IndexDisabled } ws_IndexTypeE;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "128:     bool client, noUpdate, noWebsock, noWarn, ssl, local, extHandlers, handlersPkg, inUpdate, noCompress, noConfig, echo;",
          "129:     Jsi_Value* version;",
          "130:     int idx;",
          "131:     int port;",
          "132:     uint modifySecs;",
          "133:     int maxUpload;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "136:     ws_IndexTypeE dirIndex;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "314:     JSI_OPT(STRKEY, jsi_wsCmdObj, clientHost, .help=\"Override host name for client\"),",
          "315:     JSI_OPT(STRKEY, jsi_wsCmdObj, clientOrigin,.help=\"Override client origin (origin)\"),",
          "316:     JSI_OPT(INT,    jsi_wsCmdObj, debug,      .help=\"Set debug level. Setting this to 512 will turn on max liblws log levels\"),",
          "317:     JSI_OPT(BOOL,   jsi_wsCmdObj, echo,       .help=\"LogInfo outputs all websock Send/Recv messages\"),",
          "318:     JSI_OPT(STRKEY, jsi_wsCmdObj, formParams, .help=\"Comma seperated list of upload form param names ('text,send,file,upload')\", jsi_IIRO),",
          "319:     JSI_OPT(BOOL,   jsi_wsCmdObj, extHandlers,.help=\"Setup builtin extension-handlers, ie: .htmli, .cssi, .jsi, .mdi\", jsi_IIOF),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "323:     JSI_OPT(CUSTOM, jsi_wsCmdObj, dirIndex,   .help=\"Enable listing directories\", .flags=0, .custom=Jsi_Opt_SwitchEnum, .data=(void*)wsIndexTypeStrs),",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "347:     JSI_OPT(FUNC,   jsi_wsCmdObj, onUnknown,  .help=\"Function to call to server out content when no file exists\", .flags=0, .custom=0, .data=(void*)\"ws:userobj, id:number, url:string, query:array\"),",
          "348:     JSI_OPT(FUNC,   jsi_wsCmdObj, onUpload,   .help=\"Function to call handle http-post\", .flags=0, .custom=0, .data=(void*)\"ws:userobj, id:number, filename:string, data:string, startpos:number, complete:boolean\"),",
          "349:     JSI_OPT(FUNC,   jsi_wsCmdObj, onRecv,     .help=\"Function to call when websock data recieved\", .flags=0, .custom=0, .data=(void*)\"ws:userobj, id:number, data:string\"),",
          "351:     JSI_OPT(INT,    jsi_wsCmdObj, port,       .help=\"Port for server to listen on (8080)\", jsi_IIOF),",
          "352:     JSI_OPT(STRING, jsi_wsCmdObj, post,       .help=\"Post string to serve\", jsi_IIOF),",
          "353:     JSI_OPT(STRKEY, jsi_wsCmdObj, protocol,   .help=\"Name of protocol (ws/wss)\"),",
          "",
          "[Removed Lines]",
          "350:     JSI_OPT(OBJ,    jsi_wsCmdObj, pathAliases,.help=\"Path alias lookups\", jsi_IIOF),",
          "",
          "[Added Lines]",
          "357:     JSI_OPT(OBJ,    jsi_wsCmdObj, pathAliases,.help=\"Path alias object: /jsi builtin\", jsi_IIOF),",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "563:     return (rc>=0?1:0);",
          "564: }",
          "566: static const char*",
          "567: jsi_wsHeader(jsi_wsPss *pss, const char *name, int *lenPtr)",
          "568: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "574: static int jsi_wsServeDir(jsi_wsPss *pss, struct lws *wsi, Jsi_Value *fname, const char* fn, const char *mime)",
          "575: {",
          "576:     jsi_wsCmdObj *cmdPtr = pss->cmdPtr;",
          "577:     Jsi_Interp *interp = cmdPtr->interp;",
          "578:     bool jsauto = cmdPtr->dirIndex==ws_IndexAuto;",
          "579:     const char *callback = NULL;",
          "580:     int n, i, cnt = 0;",
          "581:     Jsi_RC rc = JSI_OK;",
          "582:     struct dirent **namelist = NULL;",
          "583:     if (cmdPtr->dirIndex == ws_IndexDisabled || (n=Jsi_Scandir(interp, fname, &namelist, 0, 0)) < 0) {",
          "584:         if (cmdPtr->noWarn==0)",
          "585:             fprintf(stderr, \"can not serve directory: %s\\n\", fn);",
          "586:         return jsi_wsServeString(pss, wsi, \"<b style='color:red'>ERROR: can not serve directory!</b>\", 404, NULL, NULL);",
          "587:     }",
          "588:     bool jsonp = cmdPtr->dirIndex==ws_IndexJsonp, json=(jsonp||cmdPtr->dirIndex==ws_IndexJson);",
          "589:     if (jsonp || jsauto) {",
          "590:         Jsi_Value *val;",
          "591:         if (pss->queryObj && ((val = Jsi_ValueObjLookup(interp, pss->queryObj, \"callback\", 0))))",
          "592:             callback = Jsi_ValueToString(interp, val, NULL);",
          "593:         if (!callback)",
          "594:             jsonp = 0;",
          "595:         else if (!Jsi_Strcmp(callback,\"null\")) {",
          "596:             if (jsauto)",
          "597:                 json = 1;",
          "598:             else",
          "599:                 json = jsonp = 0;",
          "600:         } else if (jsauto)",
          "601:             json = jsonp = 1;",
          "602:     }",
          "603:     const char *fnb = Jsi_ValueToString(interp, fname, NULL);",
          "604:     Jsi_DString dStr = {}, tStr = {};",
          "605:     int fnlen = Jsi_Strlen(fn);",
          "606:     bool isroot = (fn[0]=='/'&&!fn[1]);",
          "607:     const char fne = (fnlen>=1?fn[fnlen-1]:0), *fns = (fne=='/' || isroot?\"\":\"/\");",
          "608:     if (jsonp)",
          "609:         Jsi_DSAppend(&dStr, \"/* callback */\\n\", callback, \"([\", NULL);",
          "610:     else if (json)",
          "611:         Jsi_DSAppend(&dStr, \"[\", NULL);",
          "612:     else {",
          "613:         Jsi_DSPrintf(&dStr, \"<html>\\n<head><title>Index of %s%s</title></head>\\n<body bgcolor=\\\"white\\\">\"",
          "614:             \"<h1>Index of %s%s</h1><hr><pre>%s\", fn, fns, fn, fns,",
          "615:                 (isroot?\"\":\"<a href=\\\"../\\\">../</a>\\n\"));",
          "616:     }",
          "618:     for (i=0; i<n && rc == JSI_OK; i++)",
          "619:     {",
          "620:         int ftyp;",
          "621:         const char *z = namelist[i]->d_name;",
          "622:         if (*z == '.') {",
          "623:             if (!(cmdPtr->flags&JSI_FILE_TYPE_HIDDEN)) // TODO: own flag",
          "624:                 continue;",
          "625:             else if ((z[1] == 0 || (z[1] == '.' && z[2] == 0)))",
          "626:                 continue;",
          "627:         }",
          "628: #ifdef __WIN32",
          "630:         ftyp = (namelist[i]->d_ino? DT_DIR : DT_REG);",
          "631: #else",
          "632:         ftyp = namelist[i]->d_type;",
          "633: #endif",
          "634:         uint sz = 0;",
          "635:         char pbuf[PATH_MAX];",
          "636:         snprintf(pbuf, sizeof(pbuf), \"%s%s%s\", fnb, (fne!='/' && fnb[0]?\"/\":\"\"),  z);",
          "637:         Jsi_StatBuf stat = {};",
          "638:         Jsi_Value *vpath = Jsi_ValueNewStringConst(interp, pbuf, -1);",
          "639:         Jsi_IncrRefCount(interp, vpath);",
          "640:         int sc = Jsi_Stat(interp, vpath, &stat);",
          "641:         Jsi_DecrRefCount(interp, vpath);",
          "642:         if (!sc) sz = stat.st_size;",
          "643:         Jsi_DSSetLength(&tStr, 0);",
          "644:         Jsi_DatetimeFormat(interp, stat.st_mtime, \"%a, %d %b %Y %T GMT\", 1, &tStr);",
          "645:         const char *t = (ftyp == DT_DIR ? \"/\" : \"\");",
          "646:         int lz = Jsi_Strlen(z), ln = 50-lz-(t[0]?1:0), ln2 = 30 ;",
          "648:         if (json)",
          "649:             Jsi_DSPrintf(&dStr, \"%s\\n{ \\\"name\\\":\\\"%s\\\", \\\"type\\\":\\\"%s\\\", \\\"mtime\\\":\\\"%s\\\", \\\"size\\\":%d }\",",
          "650:                 (cnt?\",\":\"\"), z, (t[0]?\"directory\":\"file\"), Jsi_DSValue(&tStr), (uint)sz);",
          "651:         else",
          "652:             Jsi_DSPrintf(&dStr, \"<a href=\\\"%s/%s%s\\\">%s%s</a>%*s %*u\\n\",",
          "653:                 (isroot?\"\":fn), z, t, z, t, ln, Jsi_DSValue(&tStr), ln2, (uint)sz);",
          "654:         cnt++;",
          "655:     }",
          "656:     if (jsonp)",
          "657:         Jsi_DSAppend(&dStr, \"\\n]);\\n\", NULL);",
          "658:     else if (json)",
          "659:         Jsi_DSAppend(&dStr, \"\\n]\\n\", NULL);",
          "660:     else",
          "661:         Jsi_DSAppend(&dStr, \"</pre><hr></body></html>\", NULL);",
          "662:     if (json)",
          "663:         mime = \"application/json\";",
          "664:     int nrc = jsi_wsServeString(pss, wsi, Jsi_DSValue(&dStr), 200, NULL, mime);",
          "665:     Jsi_DSFree(&dStr);",
          "666:     Jsi_DSFree(&tStr);",
          "667:     if (namelist) {",
          "668:         while (--n >= 0)",
          "669:             free(namelist[n]);",
          "670:         free(namelist);",
          "671:     }",
          "672:     return nrc;",
          "673: }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1154: }",
          "1156: static void jsi_wsPathAlias(Jsi_Interp *interp, jsi_wsCmdObj *cmdPtr, const char **inPtr, Jsi_DString *dStr) {",
          "1157:     const char *ce, *cp = NULL;",
          "1158:     char *lcp;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1265: static const char* jsi_wsGetJsiPath(Jsi_Interp *interp, jsi_wsCmdObj *cmdPtr) {",
          "1266:     if (!cmdPtr->jsishPathCache) {",
          "1267:         Jsi_PkgRequire(interp, \"Jsish\", 0);",
          "1268:         Jsi_PkgVersion(interp, \"Jsish\", &cmdPtr->jsishPathCache);",
          "1269:     }",
          "1270:     return cmdPtr->jsishPathCache;",
          "1271: }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1175:     }",
          "1176:     if (!Jsi_Strncmp(*inPtr, \"/jsi/\", 5)) {",
          "1183:         if (cp) {",
          "1184:             Jsi_DSSetLength(dStr, 0);",
          "1185:             Jsi_DSAppend(dStr, cp, NULL);",
          "",
          "[Removed Lines]",
          "1178:         if (!(cp = cmdPtr->jsishPathCache)) {",
          "1179:             Jsi_PkgRequire(interp, \"Jsish\", 0);",
          "1180:             if (Jsi_PkgVersion(interp, \"Jsish\", &cp)>=0)",
          "1181:                 cmdPtr->jsishPathCache = cp;",
          "1182:         }",
          "",
          "[Added Lines]",
          "1295:         cp = jsi_wsGetJsiPath(interp, cmdPtr);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1204:     if (!nstr)",
          "1205:         return Jsi_LogErrorExt(\"arg 1: expected string\");",
          "1206:     Jsi_Value *v, *a = cmdPtr->pathAliases;",
          "1223:     }",
          "1225:     return JSI_OK;",
          "1226: }",
          "",
          "[Removed Lines]",
          "1207:     if (!a|| !Jsi_ValueIsObjType(interp, a, JSI_OT_OBJECT)) return JSI_OK;",
          "1208:     Jsi_IterObj *io = Jsi_IterObjNew(interp, NULL);",
          "1209:     Jsi_IterGetKeys(interp, cmdPtr->pathAliases, io, 0);",
          "1210:     uint i;",
          "1211:     for (i=0; i<io->count; i++) {",
          "1212:         kstr = io->keys[i];",
          "1213:         v = Jsi_ValueObjLookup(interp, a, kstr, 1);",
          "1214:         if (!v) continue;",
          "1215:         vstr = Jsi_ValueToString(interp, v, &vlen);",
          "1216:         if (!vstr) continue;",
          "1217:         if (nlen<=vlen) continue;",
          "1218:         if (Jsi_Strncmp(vstr, nstr, vlen)) continue;",
          "1219:         Jsi_DString dStr = {};",
          "1220:         Jsi_DSAppend(&dStr, \"/\", kstr, nstr+vlen, NULL);",
          "1221:         Jsi_ValueFromDS(interp, &dStr, ret);",
          "1222:         break;",
          "1224:     Jsi_IterObjFree(io);",
          "",
          "[Added Lines]",
          "1320:     uint i=0, cnt=0;",
          "1321:     if (a && Jsi_ValueIsObjType(interp, a, JSI_OT_OBJECT)) {",
          "1322:         Jsi_IterObj *io = Jsi_IterObjNew(interp, NULL);",
          "1323:         Jsi_IterGetKeys(interp, cmdPtr->pathAliases, io, 0);",
          "1324:         uint i, cnt = io->count;",
          "1325:         for (i=0; i<cnt; i++) {",
          "1326:             kstr = io->keys[i];",
          "1327:             v = Jsi_ValueObjLookup(interp, a, kstr, 1);",
          "1328:             if (!v) continue;",
          "1329:             vstr = Jsi_ValueToString(interp, v, &vlen);",
          "1330:             if (!vstr) continue;",
          "1331:             if (nlen<=vlen) continue;",
          "1332:             if (Jsi_Strncmp(vstr, nstr, vlen)) continue;",
          "1333:             Jsi_DString dStr = {};",
          "1334:             Jsi_DSAppend(&dStr, \"/\", kstr, nstr+vlen, NULL);",
          "1335:             Jsi_ValueFromDS(interp, &dStr, ret);",
          "1336:             break;",
          "1337:         }",
          "1338:         Jsi_IterObjFree(io);",
          "1340:     const char *cp;",
          "1341:     if (i>=cnt && !Jsi_Strcmp(\"zvfs\", nstr) && ((cp = jsi_wsGetJsiPath(interp, cmdPtr))))",
          "1342:         Jsi_ValueMakeStringDup(interp, ret, cp);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1652:         Jsi_DecrRefCount(interp, fname);",
          "1653:         goto done;",
          "1654:     }",
          "1657:     if (S_ISDIR(jsb.st_mode)) {",
          "1661:         Jsi_DecrRefCount(interp, fname);",
          "1662:         goto done;",
          "1663:     }",
          "1666:     n = 0;",
          "",
          "[Removed Lines]",
          "1655:     if (!ext || isSSI)",
          "1656:         goto serve;",
          "1658:         if (cmdPtr->noWarn==0)",
          "1659:             fprintf(stderr, \"can not serve directory: %s\\n\", buf);",
          "1660:         rc = jsi_wsServeString(pss, wsi, \"<b style='color:red'>ERROR: can not serve directory!</b>\", 404, NULL, NULL);",
          "1665: serve:",
          "",
          "[Added Lines]",
          "1775: serve:",
          "1777:         rc = jsi_wsServeDir(pss, wsi, fname, inPtr, mime);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2023:             fprintf(stderr, \"FILTER CONNECTION: %s\\n\", inPtr);",
          "2024:         pss = jsi_wsgetPss(cmdPtr, wsi, user, 1, 1);",
          "2025:         Jsi_DSSet(&pss->url, inPtr);",
          "2026:         jsi_wsgetUriArgValue(interp, wsi, &pss->query, &pss->queryObj);",
          "2028:         if (cmdPtr->instCtx == context && (cmdPtr->clientName[0] || cmdPtr->clientIP[0])) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2142:         if (pss->query)",
          "2143:             Jsi_DecrRefCount(interp, pss->query);",
          "2144:         pss->query = NULL;",
          "2145:         if (pss->queryObj)",
          "2146:             Jsi_DecrRefCount(interp, pss->queryObj);",
          "2147:         pss->queryObj = NULL;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "3086:     { \"query\",      WebSocketQueryCmd,    1,  2, \"id:number, name:string=void\",.help=\"Get one or all query values for connect id\", .retType=(uint)JSI_TT_STRING|JSI_TT_OBJECT|JSI_TT_VOID },",
          "3087:     { \"send\",       WebSocketSendCmd,     2,  2, \"id:number, data:any\", .help=\"Send a websocket message to id\", .retType=(uint)JSI_TT_VOID, .flags=0, .info=FN_wssend },",
          "3088:     { \"status\",     WebSocketStatusCmd,   0,  0, \"\", .help=\"Return liblws server status\", .retType=(uint)JSI_TT_OBJECT|JSI_TT_VOID},",
          "3090:     { \"update\",     WebSocketUpdateCmd,   0,  0, \"\", .help=\"Service events for just this websocket\", .retType=(uint)JSI_TT_VOID },",
          "3091:     { \"version\",    WebSocketVersionCmd,  0,  0, \"\", .help=\"Runtime library version string\", .retType=(uint)JSI_TT_STRING },",
          "3092:     { NULL, 0,0,0,0, .help=\"Commands for managing WebSocket server/client connections\"  }",
          "",
          "[Removed Lines]",
          "3089:     { \"unalias\",    WebSocketUnaliasCmd,  1,  1, \"path:string\", .help=\"Return alias reverse lookup\", .retType=(uint)JSI_TT_STRING|JSI_TT_VOID},",
          "",
          "[Added Lines]",
          "3211:     { \"unalias\",    WebSocketUnaliasCmd,  1,  1, \"path:string\", .help=\"Lookup name-key with the given path in pathAlias object\", .retType=(uint)JSI_TT_STRING|JSI_TT_VOID},",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "3274:         if (NULL == lws_client_connect_via_info(&lci))",
          "3275:         {",
          "3276:             Jsi_LogErrorExt(\"websock connect failed\");",
          "3279:         }",
          "3280:     } else if (cmdPtr->port == 0) {",
          "",
          "[Removed Lines]",
          "3277:             jsi_wswebsocketObjFree(interp, cmdPtr);",
          "3278:             return JSI_ERROR;",
          "",
          "[Added Lines]",
          "3399:             goto fail;",
          "",
          "---------------"
        ],
        "tools/protos.jsi||tools/protos.jsi": [
          "File: tools/protos.jsi -> tools/protos.jsi"
        ]
      }
    },
    {
      "candidate_hash": "604578dc3f22ef71733fdfb39c5a4d913571de5a",
      "candidate_info": {
        "commit_hash": "604578dc3f22ef71733fdfb39c5a4d913571de5a",
        "repo": "pcmacdon/jsish",
        "commit_url": "https://github.com/pcmacdon/jsish/commit/604578dc3f22ef71733fdfb39c5a4d913571de5a",
        "files": [
          "lib/Csspp.jsi",
          "lib/DebugUI/DebugUI.jsi",
          "lib/Htmlpp.jsi",
          "lib/Jsish.jsi",
          "lib/Jspp.jsi",
          "lib/Safe.jsi",
          "lib/SqliteUI/SqliteUI.jsi",
          "src/jsi.h",
          "src/jsiCmds.c",
          "src/jsiCode.c",
          "src/jsiEval.c",
          "src/jsiInt.h",
          "src/jsiProto.c",
          "src/jsiUtils.c",
          "src/parser.y",
          "tools/protos.jsi"
        ],
        "message": "Release \"3.0.44\": moduleOpts fix, LogError fix\n\nFossilOrigin-Name: 5df6cf900a4ad12d6103e4b22f82704f378722cefea94f30cbc4f13725ac0282",
        "before_after_code_files": [
          "lib/Csspp.jsi||lib/Csspp.jsi",
          "lib/DebugUI/DebugUI.jsi||lib/DebugUI/DebugUI.jsi",
          "lib/Htmlpp.jsi||lib/Htmlpp.jsi",
          "lib/Jsish.jsi||lib/Jsish.jsi",
          "lib/Jspp.jsi||lib/Jspp.jsi",
          "lib/Safe.jsi||lib/Safe.jsi",
          "lib/SqliteUI/SqliteUI.jsi||lib/SqliteUI/SqliteUI.jsi",
          "src/jsi.h||src/jsi.h",
          "src/jsiCmds.c||src/jsiCmds.c",
          "src/jsiCode.c||src/jsiCode.c",
          "src/jsiEval.c||src/jsiEval.c",
          "src/jsiInt.h||src/jsiInt.h",
          "src/jsiProto.c||src/jsiProto.c",
          "src/jsiUtils.c||src/jsiUtils.c",
          "src/parser.y||src/parser.y",
          "tools/protos.jsi||tools/protos.jsi"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/jsi.h||src/jsi.h",
            "src/jsiCmds.c||src/jsiCmds.c",
            "src/jsiCode.c||src/jsiCode.c",
            "src/jsiEval.c||src/jsiEval.c",
            "src/jsiUtils.c||src/jsiUtils.c"
          ],
          "candidate": [
            "src/jsi.h||src/jsi.h",
            "src/jsiCmds.c||src/jsiCmds.c",
            "src/jsiCode.c||src/jsiCode.c",
            "src/jsiEval.c||src/jsiEval.c",
            "src/jsiUtils.c||src/jsiUtils.c"
          ]
        }
      },
      "candidate_diff": {
        "lib/Csspp.jsi||lib/Csspp.jsi": [
          "File: lib/Csspp.jsi -> lib/Csspp.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "74:             nstr = nstr.trim();",
          "75:         var res = nstr;",
          "76:         var cres = nstr;",
          "78:         if (self.vmap.length) {",
          "79:             if (self.vmap.indexOf(fnam)>=0)",
          "80:                 errorCmd(\"Redefined symbol: \"+fnam);",
          "",
          "[Removed Lines]",
          "77:         var i = self.maxRecurse;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/DebugUI/DebugUI.jsi||lib/DebugUI/DebugUI.jsi": [
          "File: lib/DebugUI/DebugUI.jsi -> lib/DebugUI/DebugUI.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "28:     };",
          "30:     var self = {",
          "31:         curline:0,",
          "32:         curfile:null,",
          "33:         curlev:0,",
          "34:         curfunc:null,",
          "36:         done:false,",
          "37:         fsent:[], // File name cache",
          "38:         files:[],",
          "39:         filedata:{},",
          "40:         file:null,",
          "41:         id:-1,",
          "42:         isSafe:false,   // Debug program in a safe interp",
          "43:         lastCmd:'',     // Previous cmd, empty string repeats.",
          "44:         lastCommand:'',  // Full command name (unaliased)",
          "45:         lastPrintArg:null,",
          "46:         level:0,",
          "47:         line:0,",
          "48:         optdbfile: '~/.debugui.db',   // Store options, etc.",
          "49:         prevLevel:0,",
          "50:         rootdir: null,  // Root for application files.",
          "51:         stopped:false,",
          "52:         toplev:0,",
          "53:         version:1.0,",
          "54:         Debug:false,",
          "55:         Trace:false,",
          "",
          "[Removed Lines]",
          "35:         curfunc:null, curlevel:0, optstr:'', bpId:0,",
          "",
          "[Added Lines]",
          "31:         args:null,",
          "32:         bpId:0,",
          "33:         closeId:null,",
          "38:         curlevel:0,",
          "39:         dbfile:null,",
          "41:         find:null,",
          "47:         interp:null,",
          "54:         opstr:'',",
          "55:         optdb:null,",
          "62:         ws:null,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "694:         var req = require(\"DebugUI\", 1.0);",
          "695:         if (!self.rootdir)",
          "696:             self.rootdir=File.dirname(req.loadFile);",
          "698:         if (typeof(fileargs) !== 'array')",
          "699:             self.dbfile = fileargs;",
          "700:         else {",
          "",
          "[Removed Lines]",
          "697:         self.args = null;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/Htmlpp.jsi||lib/Htmlpp.jsi": [
          "File: lib/Htmlpp.jsi -> lib/Htmlpp.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "37:     if (self.interpOptStr.length)",
          "38:         self.intOpts = JSON.parse(self.interpOptStr);",
          "41:     function callback(iname:string, cnt:number) {",
          "",
          "[Removed Lines]",
          "39:     self.intOpts.maxOpCnt = self.maxOptCnt;",
          "",
          "[Added Lines]",
          "39:     self.intOpts.maxOpCnt = self.maxOpCnt;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "259:                 self.rc += '\\n\\n'+self.errs+\"</pre>\";",
          "260:             }",
          "261:         }",
          "263:             delete self.interp;",
          "266:         return self.rc;",
          "267:     }",
          "268:     if (self.wsName.length)",
          "",
          "[Removed Lines]",
          "262:         if (self.delInterp) {",
          "264:             self.interp = null;",
          "265:         }",
          "",
          "[Added Lines]",
          "262:         if (self.delInterp)",
          "",
          "---------------"
        ],
        "lib/Jsish.jsi||lib/Jsish.jsi": [
          "File: lib/Jsish.jsi -> lib/Jsish.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "265:         objOpts     :{},        // Options for objOpts",
          "266:         verbose     :false",
          "267:     };",
          "269:     var cols = db.query('PRAGMA table_info(\"'+table+'\")');",
          "270:     if (!cols.length) {",
          "271:         if (!self.noCreate)",
          "",
          "[Removed Lines]",
          "268:     moduleOpts(self, options);",
          "",
          "[Added Lines]",
          "268:     parseOpts(self, options, conf);",
          "",
          "---------------"
        ],
        "lib/Jspp.jsi||lib/Jspp.jsi": [
          "File: lib/Jspp.jsi -> lib/Jspp.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "32:         funcLst:[],         // List of functions",
          "33:         funcIdx:0,          // Func idx.",
          "34:         curFile:'',         // Current file being processed.",
          "36:     };",
          "37:     var ws;",
          "39:     moduleOpts(self, options);",
          "44:     function typeValidate(typ) {",
          "45:         if (typ === '') return [];",
          "",
          "[Removed Lines]",
          "35:         tail:''             // Basename of file.",
          "41:     self.typeNameStr = \"number string boolean array function object regexp any userobj void null undefined\";",
          "42:     self.typeNameList = self.typeNameStr.split(' ');",
          "",
          "[Added Lines]",
          "35:         tail:'',            // Basename of file.",
          "36:         typeNameStr:\"number string boolean array function object regexp any userobj void null undefined\",",
          "38:     self.typeNameList = self.typeNameStr.split(' ');",
          "",
          "---------------"
        ],
        "lib/Safe.jsi||lib/Safe.jsi": [
          "File: lib/Safe.jsi -> lib/Safe.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "65:         var sopts = {isSafe:true, name:'safeProg'};",
          "66:         if (self.paranoid) {",
          "67:             self.noRead = true;",
          "69:             sopts.noNetwork = true;",
          "71:             sopts.stdinStr = 'INPUT DISALLOWED';",
          "",
          "[Removed Lines]",
          "68:             sopts.asserts=true;",
          "",
          "[Added Lines]",
          "68:             sopts.log='assert';",
          "",
          "---------------"
        ],
        "lib/SqliteUI/SqliteUI.jsi||lib/SqliteUI/SqliteUI.jsi": [
          "File: lib/SqliteUI/SqliteUI.jsi -> lib/SqliteUI/SqliteUI.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "32:     };",
          "33:     var self =",
          "34:     {",
          "35:         debugging:false,      // Break in debugger on recv.",
          "36:         integrityFail:null,",
          "37:         foreignKeysFail:null,",
          "38:         rootdir: null,                  // Where main.js lives.",
          "39:         SJO : { mode: 'json2' },        // Sqlite mode.",
          "40:         browsers: {                     // Not used, yet.",
          "41:             unix:[ \"xdg-open\", \"gnome-open\", \"firefox\", \"google-chrome\" ],",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "35:         cleanup:null,",
          "36:         closeId:null,",
          "37:         db:null,",
          "38:         dbfile:null,",
          "39:         dbinfo:{},",
          "40:         dblist:null,",
          "41:         dbID:null,",
          "43:         done:0,",
          "46:         foreignKeysInfo:null,",
          "47:         optdb:null,",
          "49:         ws:null,",
          "50:         wsopts:null,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "556:     function main() {",
          "557:         debugger;",
          "558:         LogTrace('Starting', files);",
          "560:         var req = require(\"SqliteUI\", 1.0);",
          "561:         if (!self.rootdir)",
          "562:             self.rootdir=File.dirname(req.loadFile);",
          "",
          "[Removed Lines]",
          "559:         self.done = 0;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/jsi.h||src/jsi.h": [
          "File: src/jsi.h -> src/jsi.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #define JSI_VERSION_MAJOR   3",
          "6: #define JSI_VERSION_MINOR   0",
          "9: #define JSI_VERSION (JSI_VERSION_MAJOR + ((Jsi_Number)JSI_VERSION_MINOR/100.0) + ((Jsi_Number)JSI_VERSION_RELEASE/10000.0))",
          "",
          "[Removed Lines]",
          "7: #define JSI_VERSION_RELEASE 43",
          "",
          "[Added Lines]",
          "7: #define JSI_VERSION_RELEASE 44",
          "",
          "---------------"
        ],
        "src/jsiCmds.c||src/jsiCmds.c": [
          "File: src/jsiCmds.c -> src/jsiCmds.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4648:             v3 = NULL;",
          "4649:         }",
          "4650:     }",
          "4651:     if (v3 && !Jsi_ValueIsNull(interp, v3) && !Jsi_ValueIsUndef(interp, v3)) {",
          "4652:         if (!Jsi_ValueIsObjType(interp, v3, JSI_OT_OBJECT))",
          "4653:             return Jsi_LogError(\"arg 3: expected object|null|undefined\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4651:     if (!parse && !v3 && (v3=interp->framePtr->fargs)) {",
          "4652:         if (Jsi_ValueIsObjType(interp, v3, JSI_OT_ARRAY))",
          "4653:             v3 = Jsi_ValueArrayIndex(interp, v3, 1);",
          "4654:         else {",
          "4655:             v3 = NULL;",
          "4656:         }",
          "4657:     }",
          "",
          "---------------"
        ],
        "src/jsiCode.c||src/jsiCode.c": [
          "File: src/jsiCode.c -> src/jsiCode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "544: static Jsi_OpCodes *opassign(jsi_Pstate *pstate, jsi_Pline *line, Jsi_OpCodes *lval, Jsi_OpCodes *oprand, Jsi_OpCodes *op)",
          "545: {",
          "546:     Jsi_OpCodes *ret;",
          "548:         ret = codes_join3(lval,",
          "549:                              codes_join3(code_push_top(), oprand, op),",
          "550:                              code_assign(pstate, line, 1));",
          "",
          "[Removed Lines]",
          "547:     if ((lval)->lvalue_flag == 1) {",
          "",
          "[Added Lines]",
          "547:     if ((lval)->lvalue_flag&1) {",
          "",
          "---------------"
        ],
        "src/jsiEval.c||src/jsiEval.c": [
          "File: src/jsiEval.c -> src/jsiEval.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "934:     Jsi_Value *currentScope)",
          "935: {",
          "936:     Jsi_RC rc = JSI_OK;",
          "937:     jsiVarDeref(interp,2);",
          "947:         arrayindex = (int)idx->d.num;",
          "960:     }",
          "964:         int bLen, cLen;",
          "965:         char bbuf[10], *cp = Jsi_ValueString(interp, src, &bLen);",
          "966:         int n = (int)idx->d.num;",
          "",
          "[Removed Lines]",
          "938:     int isnull;",
          "939:     if ((isnull=Jsi_ValueIsNull(interp, src)) || Jsi_ValueIsUndef(interp, src)) {",
          "940:         Jsi_LogError(\"invalid subscript of %s\", (isnull?\"null\":\"undefined\"));",
          "941:         jsiPop(interp, 1);",
          "942:         return JSI_ERROR;",
          "943:     }",
          "944:     int arrayindex = -1;",
          "946:     if (idx->vt == JSI_VT_NUMBER && Jsi_NumberIsInteger(idx->d.num) && idx->d.num >= 0) {",
          "948:     }",
          "950:     if (src->vt == JSI_VT_OBJECT && src->d.obj->ot == JSI_OT_OBJECT && src->d.obj->freeze && src->d.obj->freezeReadCheck) {",
          "951:         Jsi_Value *v;",
          "952:         char keyBuf[100], *keyStr = keyBuf;",
          "953:         if (arrayindex>=0)",
          "954:             snprintf(keyBuf, sizeof(keyBuf), \"%d\", arrayindex);",
          "955:         else",
          "956:             keyStr = Jsi_ValueString(interp, idx, NULL);",
          "957:         if (!keyStr || !(v = Jsi_ValueObjLookup(interp, src, keyStr, 0))) {",
          "958:             return Jsi_LogError(\"frozen read undefined key: %s\", keyStr);",
          "959:         }",
          "962:     Jsi_String *str = jsi_ValueString(src);",
          "963:     if (str && Jsi_ValueIsNumber(interp, idx)) {",
          "",
          "[Added Lines]",
          "937:     uint flags = (uintptr_t)ip->data, right_val = flags&1; // isident=flags&2;",
          "938:     Jsi_String *str = NULL;",
          "939:     Jsi_Obj *obj = NULL;",
          "940:     int bsc, arrayindex = -1;",
          "942:     if (idx->vt == JSI_VT_NUMBER && Jsi_NumberIsInteger(idx->d.num) && idx->d.num >= 0)",
          "945:     switch (src->vt) {",
          "946:         case JSI_VT_NULL:",
          "947:             rc = Jsi_LogError(\"invalid null subscript\");",
          "948:             break;",
          "949:         case JSI_VT_UNDEF:",
          "950:             rc = Jsi_LogError(\"invalid undefined subscript\");",
          "951:             break;",
          "954:         case JSI_VT_STRING:",
          "955:             str = &src->d.s;",
          "956:             break;",
          "957:         case JSI_VT_OBJECT:",
          "958:             obj = src->d.obj;",
          "959:             switch (obj->ot) {",
          "960:                 case JSI_OT_STRING:",
          "961:                     str = &obj->d.s;",
          "962:                     break;",
          "963:                 case JSI_OT_OBJECT:",
          "964:                     if (obj->freeze && obj->freezeReadCheck) {",
          "965:                         Jsi_Value *v;",
          "966:                         char keyBuf[100], *keyStr = keyBuf;",
          "967:                         if (arrayindex>=0)",
          "968:                             snprintf(keyBuf, sizeof(keyBuf), \"%d\", arrayindex);",
          "969:                         else",
          "970:                             keyStr = Jsi_ValueString(interp, idx, NULL);",
          "971:                         if (!keyStr || !(v = Jsi_ValueObjLookup(interp, src, keyStr, 0))) {",
          "972:                             rc = Jsi_LogError(\"frozen read undefined key: %s\", keyStr);",
          "973:                         }",
          "974:                     }",
          "975:                     break;",
          "976:                 default:",
          "977:                     break;",
          "978:             }",
          "979:             break;",
          "980:         default:",
          "981:             break;",
          "983:     if (rc != JSI_OK)",
          "984:         goto done;",
          "987:         const char *keyStr = Jsi_ValueString(interp, idx, NULL);",
          "988:         Jsi_Value *vp = Jsi_ValueObjLookup(interp, src, keyStr, 0);",
          "989:         if (vp) {",
          "992:             if (right_val || vp->f.bits.readonly) {",
          "993:                 if (vp->vt == JSI_VT_OBJECT || vp->vt == JSI_VT_STRING)  // TODO:*** Undo using ValueCopy. ***",
          "994:                     Jsi_ValueMove(interp, src, vp);",
          "995:                 else",
          "996:                     Jsi_ValueCopy(interp, src, vp);",
          "997:             } else {",
          "998:                 Jsi_Value res = VALINIT;",
          "999:                 res.vt = JSI_VT_VARIABLE;",
          "1000:                 res.d.lval = vp;",
          "1001:                 Jsi_ValueCopy(interp, src, &res);",
          "1002:             }",
          "1004:             goto done;",
          "1005:         }",
          "1007:     if (str && Jsi_ValueIsNumber(interp, idx)) { // eg. \"abc\"[1]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "984:             }",
          "985:             Jsi_ValueMakeStringDup(interp, &src, bbuf);",
          "986:         }",
          "989:     }",
          "990:     Jsi_ValueToObject(interp, src);",
          "998:     if (bsc == 0 && interp->lastSubscriptFail && interp->lastSubscriptFail->vt != JSI_VT_UNDEF)",
          "999:         Jsi_ValueReset(interp, &interp->lastSubscriptFail);",
          "1003:         Jsi_Value res = VALINIT,",
          "",
          "[Removed Lines]",
          "987:         jsiPop(interp, 1);",
          "988:         return rc;",
          "992:         if (idx->vt == JSI_VT_STRING && Jsi_Strcmp(idx->d.s.str, \"callee\") == 0) {",
          "993:             jsiClearStack(interp,1);",
          "994:             Jsi_ValueMakeStringKey(interp, &idx, \"\\1callee\\1\");",
          "995:         }",
          "997:     int bsc = Jsi_ValueIsObjType(interp, src, JSI_OT_NUMBER); // Previous bad subscript.",
          "1001:     if (src->vt != JSI_VT_UNDEF) {",
          "1002:         int right_val = (uintptr_t)ip->data;",
          "",
          "[Added Lines]",
          "1031:         goto done;",
          "1034:     bsc = Jsi_ValueIsObjType(interp, src, JSI_OT_NUMBER); // Previous bad subscript.",
          "1038:     {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1030:             Jsi_DecrRefCount(interp, vp);",
          "1031:         }",
          "1032:     }",
          "1033:     jsiPop(interp, 1);",
          "1034:     return rc;",
          "1035: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1070: done:",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1235:             case OP_ASSIGN: {",
          "1236:                 Jsi_Value *sval = _jsi_TOP, *dval = _jsi_TOQ;",
          "1237:                 bool globThis = (sval->vt == JSI_VT_OBJECT && sval->d.obj == interp->csc->d.obj);",
          "1239:                     jsiVarDeref(interp,1);",
          "1240:                     rc = jsiValueAssign(interp, dval, sval, lop);",
          "1241:                     if (strict && sval->vt == JSI_VT_UNDEF)",
          "",
          "[Removed Lines]",
          "1238:                 if ((uintptr_t)ip->data == 1) {",
          "",
          "[Added Lines]",
          "1276:                 if ((uintptr_t)ip->data & 1) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2099:     frame.parent->child = interp->framePtr = &frame;",
          "2100:     frame.ps = ps;",
          "2101:     frame.ingsc = scope;",
          "2103:     frame.inthis = _this;",
          "2104:     frame.opcodes = opcodes;",
          "2105:     frame.filePtr = fi;",
          "",
          "[Removed Lines]",
          "2102:     frame.incsc = fargs;",
          "",
          "[Added Lines]",
          "2140:     frame.incsc = frame.fargs = fargs;",
          "",
          "---------------"
        ],
        "src/jsiInt.h||src/jsiInt.h": [
          "File: src/jsiInt.h -> src/jsiInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "704:     int tryDepth;",
          "705:     int withDepth;",
          "706:     jsi_ScopeChain* ingsc;",
          "708:     Jsi_Value *inthis;",
          "709:     Jsi_OpCodes *opcodes;",
          "710:     struct jsi_Pstate *ps;",
          "",
          "[Removed Lines]",
          "707:     Jsi_Value *incsc;",
          "",
          "[Added Lines]",
          "707:     Jsi_Value *fargs;      // Function call args.",
          "708:     Jsi_Value *incsc;      // Initial args",
          "",
          "---------------"
        ],
        "src/jsiProto.c||src/jsiProto.c": [
          "File: src/jsiProto.c -> src/jsiProto.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "365: static Jsi_RC ObjectFreezeCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "366:     Jsi_Value **ret, Jsi_Func *funcPtr)",
          "367: {",
          "368:     Jsi_Value *val = Jsi_ValueArrayIndex(interp, args, 0),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "368:     if (_this->vt != JSI_VT_OBJECT || _this->d.obj->ot != JSI_OT_FUNCTION ||",
          "369:         _this->d.obj->d.fobj->func->callback != ObjectConstructor)",
          "370:         return Jsi_LogError(\"must call via Object.freeze\");",
          "",
          "---------------"
        ],
        "src/jsiUtils.c||src/jsiUtils.c": [
          "File: src/jsiUtils.c -> src/jsiUtils.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "134:     bool isExt = 0, ftail = interp->logOpts.ftail;",
          "136:     uint log = jsi_GetLogFlag(interp, code, popts);",
          "141:     if (popts) {",
          "142:         isExt = 1;",
          "143:         ftail = 1;",
          "",
          "[Removed Lines]",
          "138:         mask = popts->modConf.logmask;",
          "139:         log = popts->modConf.log|interp->log;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "145:     if (!log)",
          "146:         return (code==JSI_LOG_ERROR?JSI_ERROR:JSI_OK);",
          "147:     if (code == JSI_LOG_ERROR) {",
          "151:     }",
          "152:     char pbuf[JSI_BUFSIZ/8] = \"\";",
          "153:     char buf[JSI_BUFSIZ/2];",
          "",
          "[Removed Lines]",
          "148:         if (interp->curIpLastError == interp->curIp)",
          "149:             return JSI_ERROR;",
          "150:         interp->curIpLastError = interp->curIp;",
          "",
          "[Added Lines]",
          "144:         if (interp->curIp) {",
          "145:             if (interp->curIpLastError == interp->curIp)",
          "146:                 return JSI_ERROR;",
          "147:             interp->curIpLastError = interp->curIp;",
          "148:         }",
          "",
          "---------------"
        ],
        "src/parser.y||src/parser.y": [
          "File: src/parser.y -> src/parser.y",
          "--- Hunk 1 ---",
          "[Context before]",
          "339: delete_statement:",
          "340:     DELETE lvalue ';'           {",
          "342:             $$ = codes_join($2, code_delete(2));",
          "343:         } else {",
          "344:             $$ = codes_join($2, code_delete(1));",
          "",
          "[Removed Lines]",
          "341:         if (($2)->lvalue_flag == 2) {",
          "",
          "[Added Lines]",
          "341:         if (($2)->lvalue_flag&2) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "399:     | label_opt FOR '(' lvalue inof expr ')' statement_or_empty {",
          "400:         jsi_ForinVar *fv;",
          "401:         int inof = $5;",
          "403:             fv = forinvar_new(pstate, NULL, NULL, codes_join($4, code_subscript(pstate, &@4, 0)));",
          "404:         else fv = forinvar_new(pstate, NULL, NULL, $4);",
          "405:         Jsi_OpCodes *lval;",
          "",
          "[Removed Lines]",
          "402:         if (($4)->lvalue_flag == 2)",
          "",
          "[Added Lines]",
          "402:         if (($4)->lvalue_flag&2)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "566:     value                   { $$ = $1; }",
          "567:     | func_expr             { $$ = $1; }",
          "568:     | lvalue                {",
          "570:         else $$ = $1;",
          "571:     }",
          "572:     | expr ',' expr         { $$ = codes_join3($1, code_pop(1), $3); }",
          "573:     | expr '[' expr ']'     { $$ = codes_join3($1, $3, code_subscript(pstate, &@1, 1)); }",
          "575:     | '-' expr %prec NEG    { $$ = codes_join($2, code_neg()); }",
          "576:     | '+' expr %prec NEG    { $$ = codes_join($2, code_pos()); }",
          "577:     | '~' expr              { $$ = codes_join($2, code_bnot()); }",
          "",
          "[Removed Lines]",
          "569:         if (($1)->lvalue_flag == 2) $$ = codes_join($1, code_subscript(pstate, &@1, 1));",
          "574:     | expr '.' IDENTIFIER   { $$ = codes_join3($1, code_push_string(pstate,&@3,$3), code_subscript(pstate, &@3, 1)); }",
          "",
          "[Added Lines]",
          "569:         if (($1)->lvalue_flag&2) $$ = codes_join($1, code_subscript(pstate, &@1, 1 |(($1)->lvalue_flag&4?2:0)));",
          "574:     | expr '.' IDENTIFIER   { $$ = codes_join3($1, code_push_string(pstate,&@3,$3), code_subscript(pstate, &@3, 3)); }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "584:     | expr '-' expr         { $$ = codes_join3($1, $3, code_sub()); }",
          "585:     | expr IN expr          { $$ = codes_join3($1, $3, code_in()); }",
          "586:     | lvalue INC            {",
          "588:         else $$ = codes_join($1, code_inc(pstate, &@1, 1));",
          "589:     }",
          "590:     | lvalue DEC            {",
          "592:         else $$ = codes_join($1, code_dec(pstate, &@1, 1));",
          "593:     }",
          "594:     | INC lvalue            {",
          "596:         else $$ = codes_join($2, code_inc(pstate, &@2, 0));",
          "597:     }",
          "598:     | TYPEOF expr {",
          "600:         else $$ = codes_join($2, code_typeof(pstate, &@2, 0));",
          "601:     }",
          "602:     | DEC lvalue            {",
          "604:         else $$ = codes_join($2, code_dec(pstate, &@2, 0));",
          "605:     }",
          "606:     | '(' expr ')'          { $$ = $2; }",
          "",
          "[Removed Lines]",
          "587:         if (($1)->lvalue_flag == 2) $$ = codes_join3($1, code_subscript(pstate, &@1, 0), code_inc(pstate, &@1, 1));",
          "591:         if (($1)->lvalue_flag == 2) $$ = codes_join3($1, code_subscript(pstate, &@1, 0), code_dec(pstate, &@1, 1));",
          "595:         if (($2)->lvalue_flag == 2) $$ = codes_join3($2, code_subscript(pstate, &@2, 0), code_inc(pstate, &@2, 0));",
          "599:         if (($2)->lvalue_flag == 2) $$ = codes_join3($2, code_subscript(pstate, &@2, 0), code_typeof(pstate, &@2, 0));",
          "603:         if (($2)->lvalue_flag == 2) $$ = codes_join3($2, code_subscript(pstate, &@2, 0), code_dec(pstate, &@2, 0));",
          "",
          "[Added Lines]",
          "587:         if (($1)->lvalue_flag&2) $$ = codes_join3($1, code_subscript(pstate, &@1, 0), code_inc(pstate, &@1, 1));",
          "591:         if (($1)->lvalue_flag&2) $$ = codes_join3($1, code_subscript(pstate, &@1, 0), code_dec(pstate, &@1, 1));",
          "595:         if (($2)->lvalue_flag&2) $$ = codes_join3($2, code_subscript(pstate, &@2, 0), code_inc(pstate, &@2, 0));",
          "599:         if (($2)->lvalue_flag&2) $$ = codes_join3($2, code_subscript(pstate, &@2, 0), code_typeof(pstate, &@2, 0));",
          "603:         if (($2)->lvalue_flag&2) $$ = codes_join3($2, code_subscript(pstate, &@2, 0), code_dec(pstate, &@2, 0));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "654:     | NEW value             { $$ = codes_join($2, code_newfcall(pstate, &@1, 0, NULL, $2)); }",
          "655:     | NEW lvalue            {",
          "657:         else $$ = codes_join($2, code_newfcall(pstate, &@2, 0, NULL, $2));}",
          "658:     | NEW '(' expr ')'      { $$ = codes_join($3, code_newfcall(pstate, &@1,0, NULL, $3)); }",
          "659:     | NEW func_expr         { $$ = codes_join($2, code_newfcall(pstate, &@1,0, NULL, $2)); }",
          "",
          "[Removed Lines]",
          "656:         if (($2)->lvalue_flag == 2) $$ = codes_join3($2, code_subscript(pstate, &@2, 1), code_newfcall(pstate, &@2, 0, NULL, $2));",
          "",
          "[Added Lines]",
          "656:         if (($2)->lvalue_flag&2) $$ = codes_join3($2, code_subscript(pstate, &@2, 1), code_newfcall(pstate, &@2, 0, NULL, $2));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "667:         Jsi_OpCodes *opl = $4;",
          "668:         int expr_cnt = opl ? opl->expr_counter:0;",
          "669:         Jsi_OpCodes *lv = NULL;",
          "671:         else lv = $2;",
          "672:         $$ = codes_join3(lv, (opl ? opl : code_nop()), code_newfcall(pstate, &@1,expr_cnt, lv?lv->lvalue_name:NULL, opl));",
          "673:     }",
          "",
          "[Removed Lines]",
          "670:         if (($2)->lvalue_flag == 2) lv = codes_join($2, code_subscript(pstate, &@2, 1));",
          "",
          "[Added Lines]",
          "670:         if (($2)->lvalue_flag&2) lv = codes_join($2, code_subscript(pstate, &@2, 1));",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "720:         Jsi_OpCodes *pref;",
          "721:         Jsi_OpCodes *lval = $1;",
          "722:         const char *n1 = lval->lvalue_name;",
          "724:             const char *n2 = NULL;",
          "725:             pref = codes_join3($1, code_chthis(pstate,&@1, 1), code_subscript(pstate, &@1, 1));",
          "726:             if (pref->code_len>=2 && pref->codes[0].op == OP_PUSHVAR && pref->codes[1].op == OP_PUSHSTR && !n1) {",
          "",
          "[Removed Lines]",
          "723:         if (lval->lvalue_flag == 2) {",
          "",
          "[Added Lines]",
          "723:         if (lval->lvalue_flag&2) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "751:     | ARGUMENTS             { $$ = code_push_args(); ($$)->lvalue_flag = 1; }",
          "752:     | _THIS                 { $$ = code_push_this(pstate,&@1); ($$)->lvalue_flag = 1; }",
          "753:     | lvalue '[' expr ']'   {",
          "755:         else $$ = codes_join($1, $3);",
          "756:         ($$)->lvalue_flag = 2;",
          "757:     }",
          "758:     | lvalue '.' IDENTIFIER {",
          "762:     }",
          "763: ;",
          "",
          "[Removed Lines]",
          "754:         if (($1)->lvalue_flag == 2) $$ = codes_join3($1, code_subscript(pstate, &@1, 1), $3);",
          "759:         if (($1)->lvalue_flag == 2) $$ = codes_join3($1, code_subscript(pstate, &@1, 1), code_push_string(pstate,&@3, $3));",
          "760:         else $$ = codes_join($1, code_push_string(pstate,&@3, $3));",
          "761:         ($$)->lvalue_flag = 2;",
          "",
          "[Added Lines]",
          "754:         if (($1)->lvalue_flag&2) $$ = codes_join3($1, code_subscript(pstate, &@1, 1), $3);",
          "759:         if (($1)->lvalue_flag&2) {",
          "760:             $$ = codes_join3($1, code_subscript(pstate, &@1, 3), code_push_string(pstate,&@3, $3));",
          "761:             ($$)->lvalue_flag = 2;",
          "762:         } else {",
          "763:             $$ = codes_join($1, code_push_string(pstate,&@3, $3));",
          "764:             ($$)->lvalue_flag = 6;",
          "765:         }",
          "",
          "---------------"
        ],
        "tools/protos.jsi||tools/protos.jsi": [
          "File: tools/protos.jsi -> tools/protos.jsi"
        ]
      }
    }
  ]
}