{
  "cve_id": "CVE-2017-15127",
  "cve_desc": "A flaw was found in the hugetlb_mcopy_atomic_pte function in mm/hugetlb.c in the Linux kernel before 4.13. A superfluous implicit page unlock for VM_SHARED hugetlbfs mapping could trigger a local denial of service (BUG).",
  "repo": "torvalds/linux",
  "patch_hash": "5af10dfd0afc559bb4b0f7e3e8227a1578333995",
  "patch_info": {
    "commit_hash": "5af10dfd0afc559bb4b0f7e3e8227a1578333995",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/5af10dfd0afc559bb4b0f7e3e8227a1578333995",
    "files": [
      "mm/hugetlb.c"
    ],
    "message": "userfaultfd: hugetlbfs: remove superfluous page unlock in VM_SHARED case\n\nhuge_add_to_page_cache->add_to_page_cache implicitly unlocks the page\nbefore returning in case of errors.\n\nThe error returned was -EEXIST by running UFFDIO_COPY on a non-hole\noffset of a VM_SHARED hugetlbfs mapping.  It was an userland bug that\ntriggered it and the kernel must cope with it returning -EEXIST from\nioctl(UFFDIO_COPY) as expected.\n\n  page dumped because: VM_BUG_ON_PAGE(!PageLocked(page))\n  kernel BUG at mm/filemap.c:964!\n  invalid opcode: 0000 [#1] SMP\n  CPU: 1 PID: 22582 Comm: qemu-system-x86 Not tainted 4.11.11-300.fc26.x86_64 #1\n  RIP: unlock_page+0x4a/0x50\n  Call Trace:\n    hugetlb_mcopy_atomic_pte+0xc0/0x320\n    mcopy_atomic+0x96f/0xbe0\n    userfaultfd_ioctl+0x218/0xe90\n    do_vfs_ioctl+0xa5/0x600\n    SyS_ioctl+0x79/0x90\n    entry_SYSCALL_64_fastpath+0x1a/0xa9\n\nLink: http://lkml.kernel.org/r/20170802165145.22628-2-aarcange@redhat.com\nSigned-off-by: Andrea Arcangeli <aarcange@redhat.com>\nTested-by: Maxime Coquelin <maxime.coquelin@redhat.com>\nReviewed-by: Mike Kravetz <mike.kravetz@oracle.com>\nCc: \"Dr. David Alan Gilbert\" <dgilbert@redhat.com>\nCc: Mike Rapoport <rppt@linux.vnet.ibm.com>\nCc: Alexey Perevalov <a.perevalov@samsung.com>\nSigned-off-by: Andrew Morton <akpm@linux-foundation.org>\nSigned-off-by: Linus Torvalds <torvalds@linux-foundation.org>",
    "before_after_code_files": [
      "mm/hugetlb.c||mm/hugetlb.c"
    ]
  },
  "patch_diff": {
    "mm/hugetlb.c||mm/hugetlb.c": [
      "File: mm/hugetlb.c -> mm/hugetlb.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "4062:  return ret;",
      "4063: out_release_unlock:",
      "4064:  spin_unlock(ptl);",
      "4066:  if (vm_shared)",
      "4067:   unlock_page(page);",
      "4068:  put_page(page);",
      "4069:  goto out;",
      "4070: }",
      "",
      "[Removed Lines]",
      "4065: out_release_nounlock:",
      "",
      "[Added Lines]",
      "4067: out_release_nounlock:",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "be37aa4b993bd5d4191f76a7bd43be33f987b972",
      "candidate_info": {
        "commit_hash": "be37aa4b993bd5d4191f76a7bd43be33f987b972",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/be37aa4b993bd5d4191f76a7bd43be33f987b972",
        "files": [
          "drivers/scsi/qla2xxx/qla_tmpl.c"
        ],
        "message": "scsi: qla2xxx: Fix system crash while triggering FW dump\n\nThis patch fixes system hang/crash while firmware dump is attempted with\nBlock MQ enabled in qla2xxx driver. Fix is to remove check in fw dump\ntemplate entries for existing request and response queues so that full\nbuffer size is calculated during template size calculation.\n\nFollowing stack trace is seen during firmware dump capture process\n\n[  694.390588] qla2xxx [0000:81:00.0]-5003:11: ISP System Error - mbx1=4b1fh mbx2=10h mbx3=2ah mbx7=0h.\n[  694.402336] BUG: unable to handle kernel paging request at ffffc90008c7b000\n[  694.402372] IP: memcpy_erms+0x6/0x10\n[  694.402386] PGD 105f01a067\n[  694.402386] PUD 85f89c067\n[  694.402398] PMD 10490cb067\n[  694.402409] PTE 0\n[  694.402421]\n[  694.402437] Oops: 0002 [#1] PREEMPT SMP\n[  694.402452] Modules linked in: netconsole configfs qla2xxx scsi_transport_fc\nnvme_fc nvme_fabrics bnep bluetooth rfkill xt_tcpudp unix_diag xt_multiport\nip6table_filter ip6_tables iptable_filter ip_tables x_tables af_packet\niscsi_ibft iscsi_boot_sysfs xfs libcrc32c ipmi_ssif sb_edac edac_core\nx86_pkg_temp_thermal intel_powerclamp coretemp kvm_intel kvm irqbypass igb\ncrct10dif_pclmul crc32_pclmul ghash_clmulni_intel pcbc aesni_intel iTCO_wdt\naes_x86_64 crypto_simd ptp iTCO_vendor_support glue_helper cryptd lpc_ich joydev\ni2c_i801 pcspkr ioatdma mei_me pps_core tpm_tis mei mfd_core acpi_power_meter\ntpm_tis_core ipmi_si ipmi_devintf tpm ipmi_msghandler shpchp wmi dca button\nacpi_pad btrfs xor uas usb_storage hid_generic usbhid raid6_pq crc32c_intel ast\ni2c_algo_bit drm_kms_helper syscopyarea sysfillrect\n[  694.402692]  sysimgblt fb_sys_fops xhci_pci ttm ehci_pci sr_mod xhci_hcd\ncdrom ehci_hcd drm usbcore sg\n[  694.402730] CPU: 0 PID: 0 Comm: swapper/0 Not tainted 4.10.0-1-default+ #19\n[  694.402753] Hardware name: Supermicro X10DRi/X10DRi, BIOS 1.1a 10/16/2015\n[  694.402776] task: ffffffff81c0e4c0 task.stack: ffffffff81c00000\n[  694.402798] RIP: 0010:memcpy_erms+0x6/0x10\n[  694.402813] RSP: 0018:ffff88085fc03cd0 EFLAGS: 00210006\n[  694.402832] RAX: ffffc90008c7ae0c RBX: 0000000000000004 RCX: 000000000001fe0c\n[  694.402856] RDX: 0000000000020000 RSI: ffff8810332c01f4 RDI: ffffc90008c7b000\n[  694.402879] RBP: ffff88085fc03d18 R08: 0000000000020000 R09: 0000000000279e0a\n[  694.402903] R10: 0000000000000000 R11: f000000000000000 R12: ffff88085fc03d80\n[  694.402927] R13: ffffc90008a01000 R14: ffffc90008a056d4 R15: ffff881052ef17e0\n[  694.402951] FS:  0000000000000000(0000) GS:ffff88085fc00000(0000) knlGS:0000000000000000\n[  694.402977] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033\n[  694.403012] CR2: ffffc90008c7b000 CR3: 0000000001c09000 CR4: 00000000001406f0\n[  694.403036] Call Trace:\n[  694.403047]  <IRQ>\n[  694.403072]  ? qla27xx_fwdt_entry_t263+0x18e/0x380 [qla2xxx]\n[  694.403099]  qla27xx_walk_template+0x9d/0x1a0 [qla2xxx]\n[  694.403124]  qla27xx_fwdump+0x1f3/0x272 [qla2xxx]\n[  694.403149]  qla2x00_async_event+0xb08/0x1a50 [qla2xxx]\n[  694.403169]  ? enqueue_task_fair+0xa2/0x9d0\n\nSigned-off-by: Mike Hernandez <michael.hernandez@cavium.com>\nSigned-off-by: Joe Carnuccio <joe.carnuccio@cavium.com>\nSigned-off-by: Himanshu Madhani <himanshu.madhani@cavium.com>\nSigned-off-by: Martin K. Petersen <martin.petersen@oracle.com>",
        "before_after_code_files": [
          "drivers/scsi/qla2xxx/qla_tmpl.c||drivers/scsi/qla2xxx/qla_tmpl.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "drivers/scsi/qla2xxx/qla_tmpl.c||drivers/scsi/qla2xxx/qla_tmpl.c": [
          "File: drivers/scsi/qla2xxx/qla_tmpl.c -> drivers/scsi/qla2xxx/qla_tmpl.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "401:   for (i = 0; i < vha->hw->max_req_queues; i++) {",
          "402:    struct req_que *req = vha->hw->req_q_map[i];",
          "407:    if (req || !buf) {",
          "408:     length = req ?",
          "409:         req->length : REQUEST_ENTRY_CNT_24XX;",
          "",
          "[Removed Lines]",
          "404:    if (!test_bit(i, vha->hw->req_qid_map))",
          "405:     continue;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "418:   for (i = 0; i < vha->hw->max_rsp_queues; i++) {",
          "419:    struct rsp_que *rsp = vha->hw->rsp_q_map[i];",
          "424:    if (rsp || !buf) {",
          "425:     length = rsp ?",
          "426:         rsp->length : RESPONSE_ENTRY_CNT_MQ;",
          "",
          "[Removed Lines]",
          "421:    if (!test_bit(i, vha->hw->rsp_qid_map))",
          "422:     continue;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "660:   for (i = 0; i < vha->hw->max_req_queues; i++) {",
          "661:    struct req_que *req = vha->hw->req_q_map[i];",
          "666:    if (req || !buf) {",
          "667:     qla27xx_insert16(i, buf, len);",
          "668:     qla27xx_insert16(1, buf, len);",
          "",
          "[Removed Lines]",
          "663:    if (!test_bit(i, vha->hw->req_qid_map))",
          "664:     continue;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "675:   for (i = 0; i < vha->hw->max_rsp_queues; i++) {",
          "676:    struct rsp_que *rsp = vha->hw->rsp_q_map[i];",
          "681:    if (rsp || !buf) {",
          "682:     qla27xx_insert16(i, buf, len);",
          "683:     qla27xx_insert16(1, buf, len);",
          "",
          "[Removed Lines]",
          "678:    if (!test_bit(i, vha->hw->rsp_qid_map))",
          "679:     continue;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "36f41f8fc6d8aa9f8c9072d66ff7cf9055f5e69b",
      "candidate_info": {
        "commit_hash": "36f41f8fc6d8aa9f8c9072d66ff7cf9055f5e69b",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/36f41f8fc6d8aa9f8c9072d66ff7cf9055f5e69b",
        "files": [
          "net/key/af_key.c"
        ],
        "message": "af_key: do not use GFP_KERNEL in atomic contexts\n\npfkey_broadcast() might be called from non process contexts,\nwe can not use GFP_KERNEL in these cases [1].\n\nThis patch partially reverts commit ba51b6be38c1 (\"net: Fix RCU splat in\naf_key\"), only keeping the GFP_ATOMIC forcing under rcu_read_lock()\nsection.\n\n[1] : syzkaller reported :\n\nin_atomic(): 1, irqs_disabled(): 0, pid: 2932, name: syzkaller183439\n3 locks held by syzkaller183439/2932:\n #0:  (&net->xfrm.xfrm_cfg_mutex){+.+.+.}, at: [<ffffffff83b43888>] pfkey_sendmsg+0x4c8/0x9f0 net/key/af_key.c:3649\n #1:  (&pfk->dump_lock){+.+.+.}, at: [<ffffffff83b467f6>] pfkey_do_dump+0x76/0x3f0 net/key/af_key.c:293\n #2:  (&(&net->xfrm.xfrm_policy_lock)->rlock){+...+.}, at: [<ffffffff83957632>] spin_lock_bh include/linux/spinlock.h:304 [inline]\n #2:  (&(&net->xfrm.xfrm_policy_lock)->rlock){+...+.}, at: [<ffffffff83957632>] xfrm_policy_walk+0x192/0xa30 net/xfrm/xfrm_policy.c:1028\nCPU: 0 PID: 2932 Comm: syzkaller183439 Not tainted 4.13.0-rc4+ #24\nHardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011\nCall Trace:\n __dump_stack lib/dump_stack.c:16 [inline]\n dump_stack+0x194/0x257 lib/dump_stack.c:52\n ___might_sleep+0x2b2/0x470 kernel/sched/core.c:5994\n __might_sleep+0x95/0x190 kernel/sched/core.c:5947\n slab_pre_alloc_hook mm/slab.h:416 [inline]\n slab_alloc mm/slab.c:3383 [inline]\n kmem_cache_alloc+0x24b/0x6e0 mm/slab.c:3559\n skb_clone+0x1a0/0x400 net/core/skbuff.c:1037\n pfkey_broadcast_one+0x4b2/0x6f0 net/key/af_key.c:207\n pfkey_broadcast+0x4ba/0x770 net/key/af_key.c:281\n dump_sp+0x3d6/0x500 net/key/af_key.c:2685\n xfrm_policy_walk+0x2f1/0xa30 net/xfrm/xfrm_policy.c:1042\n pfkey_dump_sp+0x42/0x50 net/key/af_key.c:2695\n pfkey_do_dump+0xaa/0x3f0 net/key/af_key.c:299\n pfkey_spddump+0x1a0/0x210 net/key/af_key.c:2722\n pfkey_process+0x606/0x710 net/key/af_key.c:2814\n pfkey_sendmsg+0x4d6/0x9f0 net/key/af_key.c:3650\nsock_sendmsg_nosec net/socket.c:633 [inline]\n sock_sendmsg+0xca/0x110 net/socket.c:643\n ___sys_sendmsg+0x755/0x890 net/socket.c:2035\n __sys_sendmsg+0xe5/0x210 net/socket.c:2069\n SYSC_sendmsg net/socket.c:2080 [inline]\n SyS_sendmsg+0x2d/0x50 net/socket.c:2076\n entry_SYSCALL_64_fastpath+0x1f/0xbe\nRIP: 0033:0x445d79\nRSP: 002b:00007f32447c1dc8 EFLAGS: 00000202 ORIG_RAX: 000000000000002e\nRAX: ffffffffffffffda RBX: 0000000000000000 RCX: 0000000000445d79\nRDX: 0000000000000000 RSI: 000000002023dfc8 RDI: 0000000000000008\nRBP: 0000000000000086 R08: 00007f32447c2700 R09: 00007f32447c2700\nR10: 00007f32447c2700 R11: 0000000000000202 R12: 0000000000000000\nR13: 00007ffe33edec4f R14: 00007f32447c29c0 R15: 0000000000000000\n\nFixes: ba51b6be38c1 (\"net: Fix RCU splat in af_key\")\nSigned-off-by: Eric Dumazet <edumazet@google.com>\nReported-by: Dmitry Vyukov <dvyukov@google.com>\nCc: David Ahern <dsa@cumulusnetworks.com>\nAcked-by: David Ahern <dsahern@gmail.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
        "before_after_code_files": [
          "net/key/af_key.c||net/key/af_key.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "net/key/af_key.c||net/key/af_key.c": [
          "File: net/key/af_key.c -> net/key/af_key.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "228: #define BROADCAST_ONE  1",
          "229: #define BROADCAST_REGISTERED 2",
          "230: #define BROADCAST_PROMISC_ONLY 4",
          "232:       int broadcast_flags, struct sock *one_sk,",
          "233:       struct net *net)",
          "234: {",
          "",
          "[Removed Lines]",
          "231: static int pfkey_broadcast(struct sk_buff *skb,",
          "",
          "[Added Lines]",
          "231: static int pfkey_broadcast(struct sk_buff *skb, gfp_t allocation,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "278:  rcu_read_unlock();",
          "280:  if (one_sk != NULL)",
          "283:  kfree_skb(skb2);",
          "284:  kfree_skb(skb);",
          "",
          "[Removed Lines]",
          "281:   err = pfkey_broadcast_one(skb, &skb2, GFP_KERNEL, one_sk);",
          "",
          "[Added Lines]",
          "281:   err = pfkey_broadcast_one(skb, &skb2, allocation, one_sk);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "311:   hdr = (struct sadb_msg *) pfk->dump.skb->data;",
          "312:   hdr->sadb_msg_seq = 0;",
          "313:   hdr->sadb_msg_errno = rc;",
          "315:     &pfk->sk, sock_net(&pfk->sk));",
          "316:   pfk->dump.skb = NULL;",
          "317:  }",
          "",
          "[Removed Lines]",
          "314:   pfkey_broadcast(pfk->dump.skb, BROADCAST_ONE,",
          "",
          "[Added Lines]",
          "314:   pfkey_broadcast(pfk->dump.skb, GFP_ATOMIC, BROADCAST_ONE,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "355:  hdr->sadb_msg_len = (sizeof(struct sadb_msg) /",
          "356:         sizeof(uint64_t));",
          "360:  return 0;",
          "361: }",
          "",
          "[Removed Lines]",
          "358:  pfkey_broadcast(skb, BROADCAST_ONE, sk, sock_net(sk));",
          "",
          "[Added Lines]",
          "358:  pfkey_broadcast(skb, GFP_KERNEL, BROADCAST_ONE, sk, sock_net(sk));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1390:  xfrm_state_put(x);",
          "1394:  return 0;",
          "1395: }",
          "",
          "[Removed Lines]",
          "1392:  pfkey_broadcast(resp_skb, BROADCAST_ONE, sk, net);",
          "",
          "[Added Lines]",
          "1392:  pfkey_broadcast(resp_skb, GFP_KERNEL, BROADCAST_ONE, sk, net);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1476:  hdr->sadb_msg_seq = c->seq;",
          "1477:  hdr->sadb_msg_pid = c->portid;",
          "1481:  return 0;",
          "1482: }",
          "",
          "[Removed Lines]",
          "1479:  pfkey_broadcast(skb, BROADCAST_ALL, NULL, xs_net(x));",
          "",
          "[Added Lines]",
          "1479:  pfkey_broadcast(skb, GFP_ATOMIC, BROADCAST_ALL, NULL, xs_net(x));",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1589:  out_hdr->sadb_msg_reserved = 0;",
          "1590:  out_hdr->sadb_msg_seq = hdr->sadb_msg_seq;",
          "1591:  out_hdr->sadb_msg_pid = hdr->sadb_msg_pid;",
          "1594:  return 0;",
          "1595: }",
          "",
          "[Removed Lines]",
          "1592:  pfkey_broadcast(out_skb, BROADCAST_ONE, sk, sock_net(sk));",
          "",
          "[Added Lines]",
          "1592:  pfkey_broadcast(out_skb, GFP_ATOMIC, BROADCAST_ONE, sk, sock_net(sk));",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1694:   return -ENOBUFS;",
          "1695:  }",
          "1699:  return 0;",
          "1700: }",
          "",
          "[Removed Lines]",
          "1697:  pfkey_broadcast(supp_skb, BROADCAST_REGISTERED, sk, sock_net(sk));",
          "",
          "[Added Lines]",
          "1697:  pfkey_broadcast(supp_skb, GFP_KERNEL, BROADCAST_REGISTERED, sk,",
          "1698:    sock_net(sk));",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1712:  hdr->sadb_msg_errno = (uint8_t) 0;",
          "1713:  hdr->sadb_msg_len = (sizeof(struct sadb_msg) / sizeof(uint64_t));",
          "1716: }",
          "1718: static int key_notify_sa_flush(const struct km_event *c)",
          "",
          "[Removed Lines]",
          "1715:  return pfkey_broadcast(skb, BROADCAST_ONE, sk, sock_net(sk));",
          "",
          "[Added Lines]",
          "1715:  return pfkey_broadcast(skb, GFP_ATOMIC, BROADCAST_ONE, sk,",
          "1716:           sock_net(sk));",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1733:  hdr->sadb_msg_len = (sizeof(struct sadb_msg) / sizeof(uint64_t));",
          "1734:  hdr->sadb_msg_reserved = 0;",
          "1738:  return 0;",
          "1739: }",
          "",
          "[Removed Lines]",
          "1736:  pfkey_broadcast(skb, BROADCAST_ALL, NULL, c->net);",
          "",
          "[Added Lines]",
          "1737:  pfkey_broadcast(skb, GFP_ATOMIC, BROADCAST_ALL, NULL, c->net);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1790:  out_hdr->sadb_msg_pid = pfk->dump.msg_portid;",
          "1792:  if (pfk->dump.skb)",
          "1794:     &pfk->sk, sock_net(&pfk->sk));",
          "1795:  pfk->dump.skb = out_skb;",
          "",
          "[Removed Lines]",
          "1793:   pfkey_broadcast(pfk->dump.skb, BROADCAST_ONE,",
          "",
          "[Added Lines]",
          "1794:   pfkey_broadcast(pfk->dump.skb, GFP_ATOMIC, BROADCAST_ONE,",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1878:   new_hdr->sadb_msg_errno = 0;",
          "1879:  }",
          "1882:  return 0;",
          "1883: }",
          "",
          "[Removed Lines]",
          "1881:  pfkey_broadcast(skb, BROADCAST_ALL, NULL, sock_net(sk));",
          "",
          "[Added Lines]",
          "1882:  pfkey_broadcast(skb, GFP_KERNEL, BROADCAST_ALL, NULL, sock_net(sk));",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "2206:  out_hdr->sadb_msg_errno = 0;",
          "2207:  out_hdr->sadb_msg_seq = c->seq;",
          "2208:  out_hdr->sadb_msg_pid = c->portid;",
          "2210:  return 0;",
          "2212: }",
          "",
          "[Removed Lines]",
          "2209:  pfkey_broadcast(out_skb, BROADCAST_ALL, NULL, xp_net(xp));",
          "",
          "[Added Lines]",
          "2210:  pfkey_broadcast(out_skb, GFP_ATOMIC, BROADCAST_ALL, NULL, xp_net(xp));",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "2426:  out_hdr->sadb_msg_errno = 0;",
          "2427:  out_hdr->sadb_msg_seq = hdr->sadb_msg_seq;",
          "2428:  out_hdr->sadb_msg_pid = hdr->sadb_msg_pid;",
          "2430:  err = 0;",
          "2432: out:",
          "",
          "[Removed Lines]",
          "2429:  pfkey_broadcast(out_skb, BROADCAST_ONE, sk, xp_net(xp));",
          "",
          "[Added Lines]",
          "2430:  pfkey_broadcast(out_skb, GFP_ATOMIC, BROADCAST_ONE, sk, xp_net(xp));",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "2682:  out_hdr->sadb_msg_pid = pfk->dump.msg_portid;",
          "2684:  if (pfk->dump.skb)",
          "2686:     &pfk->sk, sock_net(&pfk->sk));",
          "2687:  pfk->dump.skb = out_skb;",
          "",
          "[Removed Lines]",
          "2685:   pfkey_broadcast(pfk->dump.skb, BROADCAST_ONE,",
          "",
          "[Added Lines]",
          "2686:   pfkey_broadcast(pfk->dump.skb, GFP_ATOMIC, BROADCAST_ONE,",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "2739:  hdr->sadb_msg_satype = SADB_SATYPE_UNSPEC;",
          "2740:  hdr->sadb_msg_len = (sizeof(struct sadb_msg) / sizeof(uint64_t));",
          "2741:  hdr->sadb_msg_reserved = 0;",
          "2743:  return 0;",
          "2745: }",
          "",
          "[Removed Lines]",
          "2742:  pfkey_broadcast(skb_out, BROADCAST_ALL, NULL, c->net);",
          "",
          "[Added Lines]",
          "2743:  pfkey_broadcast(skb_out, GFP_ATOMIC, BROADCAST_ALL, NULL, c->net);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "2803:  void *ext_hdrs[SADB_EXT_MAX];",
          "2804:  int err;",
          "2807:    BROADCAST_PROMISC_ONLY, NULL, sock_net(sk));",
          "2809:  memset(ext_hdrs, 0, sizeof(ext_hdrs));",
          "",
          "[Removed Lines]",
          "2806:  pfkey_broadcast(skb_clone(skb, GFP_KERNEL),",
          "",
          "[Added Lines]",
          "2807:  pfkey_broadcast(skb_clone(skb, GFP_KERNEL), GFP_KERNEL,",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "3024:  out_hdr->sadb_msg_seq = 0;",
          "3025:  out_hdr->sadb_msg_pid = 0;",
          "3028:  return 0;",
          "3029: }",
          "",
          "[Removed Lines]",
          "3027:  pfkey_broadcast(out_skb, BROADCAST_REGISTERED, NULL, xs_net(x));",
          "",
          "[Added Lines]",
          "3028:  pfkey_broadcast(out_skb, GFP_ATOMIC, BROADCAST_REGISTERED, NULL,",
          "3029:    xs_net(x));",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "3212:          xfrm_ctx->ctx_len);",
          "3213:  }",
          "3216: }",
          "3218: static struct xfrm_policy *pfkey_compile_policy(struct sock *sk, int opt,",
          "",
          "[Removed Lines]",
          "3215:  return pfkey_broadcast(skb, BROADCAST_REGISTERED, NULL, xs_net(x));",
          "",
          "[Added Lines]",
          "3217:  return pfkey_broadcast(skb, GFP_ATOMIC, BROADCAST_REGISTERED, NULL,",
          "3218:           xs_net(x));",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "3408:  n_port->sadb_x_nat_t_port_port = sport;",
          "3409:  n_port->sadb_x_nat_t_port_reserved = 0;",
          "3412: }",
          "3414: #ifdef CONFIG_NET_KEY_MIGRATE",
          "",
          "[Removed Lines]",
          "3411:  return pfkey_broadcast(skb, BROADCAST_REGISTERED, NULL, xs_net(x));",
          "",
          "[Added Lines]",
          "3414:  return pfkey_broadcast(skb, GFP_ATOMIC, BROADCAST_REGISTERED, NULL,",
          "3415:           xs_net(x));",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "3599:  }",
          "3604:  return 0;",
          "",
          "[Removed Lines]",
          "3602:  pfkey_broadcast(skb, BROADCAST_ALL, NULL, &init_net);",
          "",
          "[Added Lines]",
          "3606:  pfkey_broadcast(skb, GFP_ATOMIC, BROADCAST_ALL, NULL, &init_net);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6f48655facfd7f7ccfe6d252ac0fe319ab02e4dd",
      "candidate_info": {
        "commit_hash": "6f48655facfd7f7ccfe6d252ac0fe319ab02e4dd",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/6f48655facfd7f7ccfe6d252ac0fe319ab02e4dd",
        "files": [
          "drivers/target/target_core_tpg.c",
          "drivers/target/target_core_transport.c"
        ],
        "message": "target: Fix node_acl demo-mode + uncached dynamic shutdown regression\n\nThis patch fixes a generate_node_acls = 1 + cache_dynamic_acls = 0\nregression, that was introduced by\n\n  commit 01d4d673558985d9a118e1e05026633c3e2ade9b\n  Author: Nicholas Bellinger <nab@linux-iscsi.org>\n  Date:   Wed Dec 7 12:55:54 2016 -0800\n\nwhich originally had the proper list_del_init() usage, but was\ndropped during list review as it was thought unnecessary by HCH.\n\nHowever, list_del_init() usage is required during the special\ngenerate_node_acls = 1 + cache_dynamic_acls = 0 case when\ntransport_free_session() does a list_del(&se_nacl->acl_list),\nfollowed by target_complete_nacl() doing the same thing.\n\nThis was manifesting as a general protection fault as reported\nby Justin:\n\nkernel: general protection fault: 0000 [#1] SMP\nkernel: Modules linked in:\nkernel: CPU: 0 PID: 11047 Comm: iscsi_ttx Not tainted 4.13.0-rc2.x86_64.1+ #20\nkernel: Hardware name: Intel Corporation S5500BC/S5500BC, BIOS S5500.86B.01.00.0064.050520141428 05/05/2014\nkernel: task: ffff88026939e800 task.stack: ffffc90007884000\nkernel: RIP: 0010:target_put_nacl+0x49/0xb0\nkernel: RSP: 0018:ffffc90007887d70 EFLAGS: 00010246\nkernel: RAX: dead000000000200 RBX: ffff8802556ca000 RCX: 0000000000000000\nkernel: RDX: dead000000000100 RSI: 0000000000000246 RDI: ffff8802556ce028\nkernel: RBP: ffffc90007887d88 R08: 0000000000000001 R09: 0000000000000000\nkernel: R10: ffffc90007887df8 R11: ffffea0009986900 R12: ffff8802556ce020\nkernel: R13: ffff8802556ce028 R14: ffff8802556ce028 R15: ffffffff88d85540\nkernel: FS:  0000000000000000(0000) GS:ffff88027fc00000(0000) knlGS:0000000000000000\nkernel: CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033\nkernel: CR2: 00007fffe36f5f94 CR3: 0000000009209000 CR4: 00000000003406f0\nkernel: DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000\nkernel: DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400\nkernel: Call Trace:\nkernel:  transport_free_session+0x67/0x140\nkernel:  transport_deregister_session+0x7a/0xc0\nkernel:  iscsit_close_session+0x92/0x210\nkernel:  iscsit_close_connection+0x5f9/0x840\nkernel:  iscsit_take_action_for_connection_exit+0xfe/0x110\nkernel:  iscsi_target_tx_thread+0x140/0x1e0\nkernel:  ? wait_woken+0x90/0x90\nkernel:  kthread+0x124/0x160\nkernel:  ? iscsit_thread_get_cpumask+0x90/0x90\nkernel:  ? kthread_create_on_node+0x40/0x40\nkernel:  ret_from_fork+0x22/0x30\nkernel: Code: 00 48 89 fb 4c 8b a7 48 01 00 00 74 68 4d 8d 6c 24 08 4c\n89 ef e8 e8 28 43 00 48 8b 93 20 04 00 00 48 8b 83 28 04 00 00 4c 89\nef <48> 89 42 08 48 89 10 48 b8 00 01 00 00 00 00 ad de 48 89 83 20\nkernel: RIP: target_put_nacl+0x49/0xb0 RSP: ffffc90007887d70\nkernel: ---[ end trace f12821adbfd46fed ]---\n\nTo address this, go ahead and use proper list_del_list() for all\ncases of se_nacl->acl_list deletion.\n\nReported-by: Justin Maggard <jmaggard01@gmail.com>\nTested-by: Justin Maggard <jmaggard01@gmail.com>\nCc: Justin Maggard <jmaggard01@gmail.com>\nCc: stable@vger.kernel.org # 4.1+\nSigned-off-by: Nicholas Bellinger <nab@linux-iscsi.org>",
        "before_after_code_files": [
          "drivers/target/target_core_tpg.c||drivers/target/target_core_tpg.c",
          "drivers/target/target_core_transport.c||drivers/target/target_core_transport.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "drivers/target/target_core_tpg.c||drivers/target/target_core_tpg.c": [
          "File: drivers/target/target_core_tpg.c -> drivers/target/target_core_tpg.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "364:  mutex_lock(&tpg->acl_node_mutex);",
          "365:  if (acl->dynamic_node_acl)",
          "366:   acl->dynamic_node_acl = 0;",
          "368:  mutex_unlock(&tpg->acl_node_mutex);",
          "370:  target_shutdown_sessions(acl);",
          "",
          "[Removed Lines]",
          "367:  list_del(&acl->acl_list);",
          "",
          "[Added Lines]",
          "367:  list_del_init(&acl->acl_list);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "550:  list_for_each_entry_safe(nacl, nacl_tmp, &node_list, acl_list) {",
          "553:   core_tpg_wait_for_nacl_pr_ref(nacl);",
          "554:   core_free_device_list_for_node(nacl, se_tpg);",
          "",
          "[Removed Lines]",
          "551:   list_del(&nacl->acl_list);",
          "",
          "[Added Lines]",
          "551:   list_del_init(&nacl->acl_list);",
          "",
          "---------------"
        ],
        "drivers/target/target_core_transport.c||drivers/target/target_core_transport.c": [
          "File: drivers/target/target_core_transport.c -> drivers/target/target_core_transport.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "466:  }",
          "468:  mutex_lock(&se_tpg->acl_node_mutex);",
          "470:  mutex_unlock(&se_tpg->acl_node_mutex);",
          "472:  core_tpg_wait_for_nacl_pr_ref(nacl);",
          "",
          "[Removed Lines]",
          "469:  list_del(&nacl->acl_list);",
          "",
          "[Added Lines]",
          "469:  list_del_init(&nacl->acl_list);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "538:    spin_unlock_irqrestore(&se_nacl->nacl_sess_lock, flags);",
          "540:    if (se_nacl->dynamic_stop)",
          "542:   }",
          "543:   mutex_unlock(&se_tpg->acl_node_mutex);",
          "",
          "[Removed Lines]",
          "541:     list_del(&se_nacl->acl_list);",
          "",
          "[Added Lines]",
          "541:     list_del_init(&se_nacl->acl_list);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fd851ba9caa9a63fdbb72a2e6ed5560c0989e999",
      "candidate_info": {
        "commit_hash": "fd851ba9caa9a63fdbb72a2e6ed5560c0989e999",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/fd851ba9caa9a63fdbb72a2e6ed5560c0989e999",
        "files": [
          "include/net/udp.h"
        ],
        "message": "udp: harden copy_linear_skb()\n\nsyzkaller got crashes with CONFIG_HARDENED_USERCOPY=y configs.\n\nIssue here is that recvfrom() can be used with user buffer of Z bytes,\nand SO_PEEK_OFF of X bytes, from a skb with Y bytes, and following\ncondition :\n\nZ < X < Y\n\nkernel BUG at mm/usercopy.c:72!\ninvalid opcode: 0000 [#1] SMP KASAN\nDumping ftrace buffer:\n   (ftrace buffer empty)\nModules linked in:\nCPU: 0 PID: 2917 Comm: syzkaller842281 Not tainted 4.13.0-rc3+ #16\nHardware name: Google Google Compute Engine/Google Compute Engine, BIOS\nGoogle 01/01/2011\ntask: ffff8801d2fa40c0 task.stack: ffff8801d1fe8000\nRIP: 0010:report_usercopy mm/usercopy.c:64 [inline]\nRIP: 0010:__check_object_size+0x3ad/0x500 mm/usercopy.c:264\nRSP: 0018:ffff8801d1fef8a8 EFLAGS: 00010286\nRAX: 0000000000000078 RBX: ffffffff847102c0 RCX: 0000000000000000\nRDX: 0000000000000078 RSI: 1ffff1003a3fded5 RDI: ffffed003a3fdf09\nRBP: ffff8801d1fef998 R08: 0000000000000001 R09: 0000000000000000\nR10: 0000000000000000 R11: 0000000000000000 R12: ffff8801d1ea480e\nR13: fffffffffffffffa R14: ffffffff84710280 R15: dffffc0000000000\nFS:  0000000001360880(0000) GS:ffff8801dc000000(0000)\nknlGS:0000000000000000\nCS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033\nCR2: 00000000202ecfe4 CR3: 00000001d1ff8000 CR4: 00000000001406f0\nDR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000\nDR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400\nCall Trace:\n check_object_size include/linux/thread_info.h:108 [inline]\n check_copy_size include/linux/thread_info.h:139 [inline]\n copy_to_iter include/linux/uio.h:105 [inline]\n copy_linear_skb include/net/udp.h:371 [inline]\n udpv6_recvmsg+0x1040/0x1af0 net/ipv6/udp.c:395\n inet_recvmsg+0x14c/0x5f0 net/ipv4/af_inet.c:793\n sock_recvmsg_nosec net/socket.c:792 [inline]\n sock_recvmsg+0xc9/0x110 net/socket.c:799\n SYSC_recvfrom+0x2d6/0x570 net/socket.c:1788\n SyS_recvfrom+0x40/0x50 net/socket.c:1760\n entry_SYSCALL_64_fastpath+0x1f/0xbe\n\nFixes: b65ac44674dd (\"udp: try to avoid 2 cache miss on dequeue\")\nSigned-off-by: Eric Dumazet <edumazet@google.com>\nCc: Paolo Abeni <pabeni@redhat.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
        "before_after_code_files": [
          "include/net/udp.h||include/net/udp.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/net/udp.h||include/net/udp.h": [
          "File: include/net/udp.h -> include/net/udp.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "368: {",
          "369:  int n, copy = len - off;",
          "371:  n = copy_to_iter(skb->data + off, copy, to);",
          "372:  if (n == copy)",
          "373:   return 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "371:  if (copy < 0)",
          "372:   return -EINVAL;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "40f75ea466b424ff7a8a24e626b97da52387d210",
      "candidate_info": {
        "commit_hash": "40f75ea466b424ff7a8a24e626b97da52387d210",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/40f75ea466b424ff7a8a24e626b97da52387d210",
        "files": [
          "drivers/gpu/drm/i915/i915_perf.c"
        ],
        "message": "drm/i915/perf: Initialise dynamic sysfs group before creation\n\nAnother case where we need to call sysfs_attr_init() to setup the\ninternal lockdep class prior to use:\n\n[    9.325229] BUG: key ffff880168bc7bb0 not in .data!\n[    9.325240] DEBUG_LOCKS_WARN_ON(1)\n[    9.325250] ------------[ cut here ]------------\n[    9.325280] WARNING: CPU: 1 PID: 275 at kernel/locking/lockdep.c:3156 lockdep_init_map+0x1b2/0x1c0\n[    9.325301] Modules linked in: intel_powerclamp(+) coretemp crct10dif_pclmul crc32_pclmul ghash_clmulni_intel i915(+) snd_hda_intel snd_hda_codec snd_hwdep r8169 mii snd_hda_core snd_pcm prime_numbers i2c_hid pinctrl_geminilake pinctrl_intel\n[    9.325375] CPU: 1 PID: 275 Comm: modprobe Not tainted 4.13.0-rc4-CI-Trybot_1040+ #1\n[    9.325395] Hardware name: Intel Corp. Geminilake/GLK RVP2 LP4SD (07), BIOS GELKRVPA.X64.0045.B51.1704281422 04/28/2017\n[    9.325422] task: ffff8801721a4ec0 task.stack: ffffc900001dc000\n[    9.325440] RIP: 0010:lockdep_init_map+0x1b2/0x1c0\n[    9.325456] RSP: 0018:ffffc900001dfa10 EFLAGS: 00010282\n[    9.325473] RAX: 0000000000000016 RBX: ffff880168d54b80 RCX: 0000000000000000\n[    9.325488] RDX: 0000000080000001 RSI: 0000000000000001 RDI: ffffffff810f0800\n[    9.325505] RBP: ffffc900001dfa30 R08: 0000000000000001 R09: 0000000000000000\n[    9.325521] R10: 0000000000000000 R11: 0000000000000000 R12: ffff880168bc7bb0\n[    9.325537] R13: 0000000000000000 R14: ffff880168bc7b98 R15: ffffffff81a263a0\n[    9.325554] FS:  00007fb60c3fd700(0000) GS:ffff88017fc80000(0000) knlGS:0000000000000000\n[    9.325574] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033\n[    9.325588] CR2: 0000006582777d80 CR3: 000000016d818000 CR4: 00000000003406e0\n[    9.325604] Call Trace:\n[    9.325618]  __kernfs_create_file+0x76/0xe0\n[    9.325632]  sysfs_add_file_mode_ns+0x8a/0x1a0\n[    9.325646]  internal_create_group+0xea/0x2c0\n[    9.325660]  sysfs_create_group+0x13/0x20\n[    9.325737]  i915_perf_register+0xde/0x220 [i915]\n[    9.325800]  i915_driver_load+0xa77/0x16c0 [i915]\n[    9.325863]  i915_pci_probe+0x37/0x90 [i915]\n[    9.325880]  pci_device_probe+0xa8/0x130\n[    9.325894]  driver_probe_device+0x29c/0x450\n[    9.325908]  __driver_attach+0xe3/0xf0\n[    9.325922]  ? driver_probe_device+0x450/0x450\n[    9.325935]  bus_for_each_dev+0x62/0xa0\n[    9.325948]  driver_attach+0x1e/0x20\n[    9.325960]  bus_add_driver+0x173/0x270\n[    9.325974]  driver_register+0x60/0xe0\n[    9.325986]  __pci_register_driver+0x60/0x70\n[    9.326044]  i915_init+0x6f/0x78 [i915]\n[    9.326066]  ? 0xffffffffa024e000\n[    9.326079]  do_one_initcall+0x43/0x170\n[    9.326094]  ? rcu_read_lock_sched_held+0x7a/0x90\n[    9.326109]  ? kmem_cache_alloc_trace+0x261/0x2d0\n[    9.326124]  do_init_module+0x5f/0x206\n[    9.326137]  load_module+0x2561/0x2da0\n[    9.326150]  ? show_coresize+0x30/0x30\n[    9.326165]  ? kernel_read_file+0x105/0x190\n[    9.326180]  SyS_finit_module+0xc1/0x100\n[    9.326192]  ? SyS_finit_module+0xc1/0x100\n[    9.326210]  entry_SYSCALL_64_fastpath+0x1c/0xb1\n[    9.326223] RIP: 0033:0x7fb60bf359f9\n[    9.326234] RSP: 002b:00007fff92b47c48 EFLAGS: 00000246 ORIG_RAX: 0000000000000139\n[    9.326255] RAX: ffffffffffffffda RBX: ffffffff814898a3 RCX: 00007fb60bf359f9\n[    9.326271] RDX: 0000000000000000 RSI: 00000028a9ceef8b RDI: 0000000000000000\n[    9.326287] RBP: ffffc900001dff88 R08: 0000000000000000 R09: 0000000000000000\n[    9.326303] R10: 0000000000000000 R11: 0000000000000246 R12: 0000000000040000\n[    9.326319] R13: 00000028aaef2a70 R14: 0000000000000000 R15: 00000028aaeee5d0\n[    9.326339]  ? __this_cpu_preempt_check+0x13/0x20\n[    9.326353] Code: f1 39 00 85 c0 0f 84 38 ff ff ff 83 3d 9f 44 ce 01 00 0f 85 2b ff ff ff 48 c7 c6 b2 a2 c7 81 48 c7 c7 53 40 c5 81 e8 3f 82 01 00 <0f> ff e9 11 ff ff ff 0f 1f 80 00 00 00 00 55 31 c9 31 d2 31 f6\n\nFixes: 701f8231a2fe (\"drm/i915/perf: prune OA configs\")\nSigned-off-by: Chris Wilson <chris@chris-wilson.co.uk>\nCc: Lionel Landwerlin <lionel.g.landwerlin@intel.com>\nCc: Matthew Auld <matthew.auld@intel.com>\nLink: https://patchwork.freedesktop.org/patch/msgid/20170810175743.25401-1-chris@chris-wilson.co.uk\nReviewed-by: Lionel Landwerlin <lionel.g.landwerlin@intel.com>",
        "before_after_code_files": [
          "drivers/gpu/drm/i915/i915_perf.c||drivers/gpu/drm/i915/i915_perf.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "drivers/gpu/drm/i915/i915_perf.c||drivers/gpu/drm/i915/i915_perf.c": [
          "File: drivers/gpu/drm/i915/i915_perf.c -> drivers/gpu/drm/i915/i915_perf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2908:  if (!dev_priv->perf.metrics_kobj)",
          "2909:   goto exit;",
          "2914:  if (IS_HASWELL(dev_priv)) {",
          "2915:   i915_perf_load_test_config_hsw(dev_priv);",
          "",
          "[Removed Lines]",
          "2911:  memset(&dev_priv->perf.oa.test_config, 0,",
          "2912:         sizeof(dev_priv->perf.oa.test_config));",
          "",
          "[Added Lines]",
          "2911:  sysfs_attr_init(&dev_priv->perf.oa.test_config.sysfs_metric_id.attr);",
          "",
          "---------------"
        ]
      }
    }
  ]
}