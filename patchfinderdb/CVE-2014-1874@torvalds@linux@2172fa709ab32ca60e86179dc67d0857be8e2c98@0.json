{
  "cve_id": "CVE-2014-1874",
  "cve_desc": "The security_context_to_sid_core function in security/selinux/ss/services.c in the Linux kernel before 3.13.4 allows local users to cause a denial of service (system crash) by leveraging the CAP_MAC_ADMIN capability to set a zero-length security context.",
  "repo": "torvalds/linux",
  "patch_hash": "2172fa709ab32ca60e86179dc67d0857be8e2c98",
  "patch_info": {
    "commit_hash": "2172fa709ab32ca60e86179dc67d0857be8e2c98",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/2172fa709ab32ca60e86179dc67d0857be8e2c98",
    "files": [
      "security/selinux/ss/services.c"
    ],
    "message": "SELinux:  Fix kernel BUG on empty security contexts.\n\nSetting an empty security context (length=0) on a file will\nlead to incorrectly dereferencing the type and other fields\nof the security context structure, yielding a kernel BUG.\nAs a zero-length security context is never valid, just reject\nall such security contexts whether coming from userspace\nvia setxattr or coming from the filesystem upon a getxattr\nrequest by SELinux.\n\nSetting a security context value (empty or otherwise) unknown to\nSELinux in the first place is only possible for a root process\n(CAP_MAC_ADMIN), and, if running SELinux in enforcing mode, only\nif the corresponding SELinux mac_admin permission is also granted\nto the domain by policy.  In Fedora policies, this is only allowed for\nspecific domains such as livecd for setting down security contexts\nthat are not defined in the build host policy.\n\nReproducer:\nsu\nsetenforce 0\ntouch foo\nsetfattr -n security.selinux foo\n\nCaveat:\nRelabeling or removing foo after doing the above may not be possible\nwithout booting with SELinux disabled.  Any subsequent access to foo\nafter doing the above will also trigger the BUG.\n\nBUG output from Matthew Thode:\n[  473.893141] ------------[ cut here ]------------\n[  473.962110] kernel BUG at security/selinux/ss/services.c:654!\n[  473.995314] invalid opcode: 0000 [#6] SMP\n[  474.027196] Modules linked in:\n[  474.058118] CPU: 0 PID: 8138 Comm: ls Tainted: G      D   I\n3.13.0-grsec #1\n[  474.116637] Hardware name: Supermicro X8ST3/X8ST3, BIOS 2.0\n07/29/10\n[  474.149768] task: ffff8805f50cd010 ti: ffff8805f50cd488 task.ti:\nffff8805f50cd488\n[  474.183707] RIP: 0010:[<ffffffff814681c7>]  [<ffffffff814681c7>]\ncontext_struct_compute_av+0xce/0x308\n[  474.219954] RSP: 0018:ffff8805c0ac3c38  EFLAGS: 00010246\n[  474.252253] RAX: 0000000000000000 RBX: ffff8805c0ac3d94 RCX:\n0000000000000100\n[  474.287018] RDX: ffff8805e8aac000 RSI: 00000000ffffffff RDI:\nffff8805e8aaa000\n[  474.321199] RBP: ffff8805c0ac3cb8 R08: 0000000000000010 R09:\n0000000000000006\n[  474.357446] R10: 0000000000000000 R11: ffff8805c567a000 R12:\n0000000000000006\n[  474.419191] R13: ffff8805c2b74e88 R14: 00000000000001da R15:\n0000000000000000\n[  474.453816] FS:  00007f2e75220800(0000) GS:ffff88061fc00000(0000)\nknlGS:0000000000000000\n[  474.489254] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033\n[  474.522215] CR2: 00007f2e74716090 CR3: 00000005c085e000 CR4:\n00000000000207f0\n[  474.556058] Stack:\n[  474.584325]  ffff8805c0ac3c98 ffffffff811b549b ffff8805c0ac3c98\nffff8805f1190a40\n[  474.618913]  ffff8805a6202f08 ffff8805c2b74e88 00068800d0464990\nffff8805e8aac860\n[  474.653955]  ffff8805c0ac3cb8 000700068113833a ffff880606c75060\nffff8805c0ac3d94\n[  474.690461] Call Trace:\n[  474.723779]  [<ffffffff811b549b>] ? lookup_fast+0x1cd/0x22a\n[  474.778049]  [<ffffffff81468824>] security_compute_av+0xf4/0x20b\n[  474.811398]  [<ffffffff8196f419>] avc_compute_av+0x2a/0x179\n[  474.843813]  [<ffffffff8145727b>] avc_has_perm+0x45/0xf4\n[  474.875694]  [<ffffffff81457d0e>] inode_has_perm+0x2a/0x31\n[  474.907370]  [<ffffffff81457e76>] selinux_inode_getattr+0x3c/0x3e\n[  474.938726]  [<ffffffff81455cf6>] security_inode_getattr+0x1b/0x22\n[  474.970036]  [<ffffffff811b057d>] vfs_getattr+0x19/0x2d\n[  475.000618]  [<ffffffff811b05e5>] vfs_fstatat+0x54/0x91\n[  475.030402]  [<ffffffff811b063b>] vfs_lstat+0x19/0x1b\n[  475.061097]  [<ffffffff811b077e>] SyS_newlstat+0x15/0x30\n[  475.094595]  [<ffffffff8113c5c1>] ? __audit_syscall_entry+0xa1/0xc3\n[  475.148405]  [<ffffffff8197791e>] system_call_fastpath+0x16/0x1b\n[  475.179201] Code: 00 48 85 c0 48 89 45 b8 75 02 0f 0b 48 8b 45 a0 48\n8b 3d 45 d0 b6 00 8b 40 08 89 c6 ff ce e8 d1 b0 06 00 48 85 c0 49 89 c7\n75 02 <0f> 0b 48 8b 45 b8 4c 8b 28 eb 1e 49 8d 7d 08 be 80 01 00 00 e8\n[  475.255884] RIP  [<ffffffff814681c7>]\ncontext_struct_compute_av+0xce/0x308\n[  475.296120]  RSP <ffff8805c0ac3c38>\n[  475.328734] ---[ end trace f076482e9d754adc ]---\n\nReported-by:  Matthew Thode <mthode@mthode.org>\nSigned-off-by: Stephen Smalley <sds@tycho.nsa.gov>\nCc: stable@vger.kernel.org\nSigned-off-by: Paul Moore <pmoore@redhat.com>",
    "before_after_code_files": [
      "security/selinux/ss/services.c||security/selinux/ss/services.c"
    ]
  },
  "patch_diff": {
    "security/selinux/ss/services.c||security/selinux/ss/services.c": [
      "File: security/selinux/ss/services.c -> security/selinux/ss/services.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1232:  struct context context;",
      "1233:  int rc = 0;",
      "1235:  if (!ss_initialized) {",
      "1236:   int i;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1236:  if (!scontext_len)",
      "1237:   return -EINVAL;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "e53376bef2cd97d3e3f61fdc677fb8da7d03d0da",
      "candidate_info": {
        "commit_hash": "e53376bef2cd97d3e3f61fdc677fb8da7d03d0da",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/e53376bef2cd97d3e3f61fdc677fb8da7d03d0da",
        "files": [
          "include/net/netfilter/nf_conntrack.h",
          "net/netfilter/nf_conntrack_core.c",
          "net/netfilter/nf_synproxy_core.c",
          "net/netfilter/xt_CT.c"
        ],
        "message": "netfilter: nf_conntrack: don't release a conntrack with non-zero refcnt\n\nWith this patch, the conntrack refcount is initially set to zero and\nit is bumped once it is added to any of the list, so we fulfill\nEric's golden rule which is that all released objects always have a\nrefcount that equals zero.\n\nAndrey Vagin reports that nf_conntrack_free can't be called for a\nconntrack with non-zero ref-counter, because it can race with\nnf_conntrack_find_get().\n\nA conntrack slab is created with SLAB_DESTROY_BY_RCU. Non-zero\nref-counter says that this conntrack is used. So when we release\na conntrack with non-zero counter, we break this assumption.\n\nCPU1                                    CPU2\n____nf_conntrack_find()\n                                        nf_ct_put()\n                                         destroy_conntrack()\n                                        ...\n                                        init_conntrack\n                                         __nf_conntrack_alloc (set use = 1)\natomic_inc_not_zero(&ct->use) (use = 2)\n                                         if (!l4proto->new(ct, skb, dataoff, timeouts))\n                                          nf_conntrack_free(ct); (use = 2 !!!)\n                                        ...\n                                        __nf_conntrack_alloc (set use = 1)\n if (!nf_ct_key_equal(h, tuple, zone))\n  nf_ct_put(ct); (use = 0)\n   destroy_conntrack()\n                                        /* continue to work with CT */\n\nAfter applying the path \"[PATCH] netfilter: nf_conntrack: fix RCU\nrace in nf_conntrack_find_get\" another bug was triggered in\ndestroy_conntrack():\n\n<4>[67096.759334] ------------[ cut here ]------------\n<2>[67096.759353] kernel BUG at net/netfilter/nf_conntrack_core.c:211!\n...\n<4>[67096.759837] Pid: 498649, comm: atdd veid: 666 Tainted: G         C ---------------    2.6.32-042stab084.18 #1 042stab084_18 /DQ45CB\n<4>[67096.759932] RIP: 0010:[<ffffffffa03d99ac>]  [<ffffffffa03d99ac>] destroy_conntrack+0x15c/0x190 [nf_conntrack]\n<4>[67096.760255] Call Trace:\n<4>[67096.760255]  [<ffffffff814844a7>] nf_conntrack_destroy+0x17/0x30\n<4>[67096.760255]  [<ffffffffa03d9bb5>] nf_conntrack_find_get+0x85/0x130 [nf_conntrack]\n<4>[67096.760255]  [<ffffffffa03d9fb2>] nf_conntrack_in+0x352/0xb60 [nf_conntrack]\n<4>[67096.760255]  [<ffffffffa048c771>] ipv4_conntrack_local+0x51/0x60 [nf_conntrack_ipv4]\n<4>[67096.760255]  [<ffffffff81484419>] nf_iterate+0x69/0xb0\n<4>[67096.760255]  [<ffffffff814b5b00>] ? dst_output+0x0/0x20\n<4>[67096.760255]  [<ffffffff814845d4>] nf_hook_slow+0x74/0x110\n<4>[67096.760255]  [<ffffffff814b5b00>] ? dst_output+0x0/0x20\n<4>[67096.760255]  [<ffffffff814b66d5>] raw_sendmsg+0x775/0x910\n<4>[67096.760255]  [<ffffffff8104c5a8>] ? flush_tlb_others_ipi+0x128/0x130\n<4>[67096.760255]  [<ffffffff8100bc4e>] ? apic_timer_interrupt+0xe/0x20\n<4>[67096.760255]  [<ffffffff8100bc4e>] ? apic_timer_interrupt+0xe/0x20\n<4>[67096.760255]  [<ffffffff814c136a>] inet_sendmsg+0x4a/0xb0\n<4>[67096.760255]  [<ffffffff81444e93>] ? sock_sendmsg+0x13/0x140\n<4>[67096.760255]  [<ffffffff81444f97>] sock_sendmsg+0x117/0x140\n<4>[67096.760255]  [<ffffffff8102e299>] ? native_smp_send_reschedule+0x49/0x60\n<4>[67096.760255]  [<ffffffff81519beb>] ? _spin_unlock_bh+0x1b/0x20\n<4>[67096.760255]  [<ffffffff8109d930>] ? autoremove_wake_function+0x0/0x40\n<4>[67096.760255]  [<ffffffff814960f0>] ? do_ip_setsockopt+0x90/0xd80\n<4>[67096.760255]  [<ffffffff8100bc4e>] ? apic_timer_interrupt+0xe/0x20\n<4>[67096.760255]  [<ffffffff8100bc4e>] ? apic_timer_interrupt+0xe/0x20\n<4>[67096.760255]  [<ffffffff814457c9>] sys_sendto+0x139/0x190\n<4>[67096.760255]  [<ffffffff810efa77>] ? audit_syscall_entry+0x1d7/0x200\n<4>[67096.760255]  [<ffffffff810ef7c5>] ? __audit_syscall_exit+0x265/0x290\n<4>[67096.760255]  [<ffffffff81474daf>] compat_sys_socketcall+0x13f/0x210\n<4>[67096.760255]  [<ffffffff8104dea3>] ia32_sysret+0x0/0x5\n\nI have reused the original title for the RFC patch that Andrey posted and\nmost of the original patch description.\n\nCc: Eric Dumazet <edumazet@google.com>\nCc: Andrew Vagin <avagin@parallels.com>\nCc: Florian Westphal <fw@strlen.de>\nReported-by: Andrew Vagin <avagin@parallels.com>\nSigned-off-by: Pablo Neira Ayuso <pablo@netfilter.org>\nReviewed-by: Eric Dumazet <edumazet@google.com>\nAcked-by: Andrew Vagin <avagin@parallels.com>",
        "before_after_code_files": [
          "include/net/netfilter/nf_conntrack.h||include/net/netfilter/nf_conntrack.h",
          "net/netfilter/nf_conntrack_core.c||net/netfilter/nf_conntrack_core.c",
          "net/netfilter/nf_synproxy_core.c||net/netfilter/nf_synproxy_core.c",
          "net/netfilter/xt_CT.c||net/netfilter/xt_CT.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/net/netfilter/nf_conntrack.h||include/net/netfilter/nf_conntrack.h": [
          "File: include/net/netfilter/nf_conntrack.h -> include/net/netfilter/nf_conntrack.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "284: extern unsigned int nf_conntrack_hash_rnd;",
          "285: void init_nf_conntrack_hash_rnd(void);",
          "287: #define NF_CT_STAT_INC(net, count)   __this_cpu_inc((net)->ct.stat->count)",
          "288: #define NF_CT_STAT_INC_ATOMIC(net, count) this_cpu_inc((net)->ct.stat->count)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "287: void nf_conntrack_tmpl_insert(struct net *net, struct nf_conn *tmpl);",
          "",
          "---------------"
        ],
        "net/netfilter/nf_conntrack_core.c||net/netfilter/nf_conntrack_core.c": [
          "File: net/netfilter/nf_conntrack_core.c -> net/netfilter/nf_conntrack_core.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "448:    goto out;",
          "450:  add_timer(&ct->timeout);",
          "452:  __nf_conntrack_hash_insert(ct, hash, repl_hash);",
          "453:  NF_CT_STAT_INC(net, insert);",
          "454:  spin_unlock_bh(&nf_conntrack_lock);",
          "",
          "[Removed Lines]",
          "451:  nf_conntrack_get(&ct->ct_general);",
          "",
          "[Added Lines]",
          "451:  smp_wmb();",
          "453:  atomic_set(&ct->ct_general.use, 2);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "462: }",
          "463: EXPORT_SYMBOL_GPL(nf_conntrack_hash_check_insert);",
          "466: int",
          "467: __nf_conntrack_confirm(struct sk_buff *skb)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "468: void nf_conntrack_tmpl_insert(struct net *net, struct nf_conn *tmpl)",
          "469: {",
          "470:  __set_bit(IPS_TEMPLATE_BIT, &tmpl->status);",
          "471:  __set_bit(IPS_CONFIRMED_BIT, &tmpl->status);",
          "472:  nf_conntrack_get(&tmpl->ct_general);",
          "474:  spin_lock_bh(&nf_conntrack_lock);",
          "476:  hlist_nulls_add_head_rcu(&tmpl->tuplehash[IP_CT_DIR_ORIGINAL].hnnode,",
          "477:      &net->ct.tmpl);",
          "478:  spin_unlock_bh(&nf_conntrack_lock);",
          "479: }",
          "480: EXPORT_SYMBOL_GPL(nf_conntrack_tmpl_insert);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "733:   nf_ct_zone->id = zone;",
          "734:  }",
          "735: #endif",
          "741:  return ct;",
          "743: #ifdef CONFIG_NF_CONNTRACK_ZONES",
          "",
          "[Removed Lines]",
          "739:  smp_wmb();",
          "740:  atomic_set(&ct->ct_general.use, 1);",
          "",
          "[Added Lines]",
          "756:  atomic_set(&ct->ct_general.use, 0);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "761: {",
          "762:  struct net *net = nf_ct_net(ct);",
          "764:  nf_ct_ext_destroy(ct);",
          "765:  nf_ct_ext_free(ct);",
          "766:  kmem_cache_free(net->ct.nf_conntrack_cachep, ct);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "783:  NF_CT_ASSERT(atomic_read(&ct->ct_general.use) == 0);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "856:   NF_CT_STAT_INC(net, new);",
          "857:  }",
          "860:  hlist_nulls_add_head_rcu(&ct->tuplehash[IP_CT_DIR_ORIGINAL].hnnode,",
          "861:          &net->ct.unconfirmed);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "881:  nf_conntrack_get(&ct->ct_general);",
          "",
          "---------------"
        ],
        "net/netfilter/nf_synproxy_core.c||net/netfilter/nf_synproxy_core.c": [
          "File: net/netfilter/nf_synproxy_core.c -> net/netfilter/nf_synproxy_core.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "363:   goto err2;",
          "364:  if (!nfct_synproxy_ext_add(ct))",
          "365:   goto err2;",
          "369:  snet->tmpl = ct;",
          "371:  snet->stats = alloc_percpu(struct synproxy_stats);",
          "",
          "[Removed Lines]",
          "366:  __set_bit(IPS_TEMPLATE_BIT, &ct->status);",
          "367:  __set_bit(IPS_CONFIRMED_BIT, &ct->status);",
          "",
          "[Added Lines]",
          "367:  nf_conntrack_tmpl_insert(net, ct);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "390: {",
          "391:  struct synproxy_net *snet = synproxy_pernet(net);",
          "394:  synproxy_proc_exit(net);",
          "395:  free_percpu(snet->stats);",
          "396: }",
          "",
          "[Removed Lines]",
          "393:  nf_conntrack_free(snet->tmpl);",
          "",
          "[Added Lines]",
          "392:  nf_ct_put(snet->tmpl);",
          "",
          "---------------"
        ],
        "net/netfilter/xt_CT.c||net/netfilter/xt_CT.c": [
          "File: net/netfilter/xt_CT.c -> net/netfilter/xt_CT.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "228:    goto err3;",
          "229:  }",
          "237: out:",
          "238:  info->ct = ct;",
          "239:  return 0;",
          "",
          "[Removed Lines]",
          "231:  __set_bit(IPS_TEMPLATE_BIT, &ct->status);",
          "232:  __set_bit(IPS_CONFIRMED_BIT, &ct->status);",
          "235:  hlist_nulls_add_head_rcu(&ct->tuplehash[IP_CT_DIR_ORIGINAL].hnnode,",
          "236:      &par->net->ct.tmpl);",
          "",
          "[Added Lines]",
          "231:  nf_conntrack_tmpl_insert(par->net, ct);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8ffcc704c963b4157391bd87a4544cdfd18b574d",
      "candidate_info": {
        "commit_hash": "8ffcc704c963b4157391bd87a4544cdfd18b574d",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/8ffcc704c963b4157391bd87a4544cdfd18b574d",
        "files": [
          "net/mac80211/cfg.c",
          "net/mac80211/ht.c",
          "net/mac80211/iface.c"
        ],
        "message": "mac80211: avoid deadlock revealed by lockdep\n\nsdata->u.ap.request_smps_work can\u2019t be flushed synchronously\nunder wdev_lock(wdev) since ieee80211_request_smps_ap_work\nitself locks the same lock.\nWhile at it, reset the driver_smps_mode when the ap is\nstopped to its default: OFF.\n\nThis solves:\n\n======================================================\n[ INFO: possible circular locking dependency detected ]\n3.12.0-ipeer+ #2 Tainted: G           O\n-------------------------------------------------------\nrmmod/2867 is trying to acquire lock:\n  ((&sdata->u.ap.request_smps_work)){+.+...}, at: [<c105b8d0>] flush_work+0x0/0x90\n\nbut task is already holding lock:\n  (&wdev->mtx){+.+.+.}, at: [<f9b32626>] cfg80211_stop_ap+0x26/0x230 [cfg80211]\n\nwhich lock already depends on the new lock.\n\nthe existing dependency chain (in reverse order) is:\n\n-> #1 (&wdev->mtx){+.+.+.}:\n        [<c10aefa9>] lock_acquire+0x79/0xe0\n        [<c1607a1a>] mutex_lock_nested+0x4a/0x360\n        [<fb06288b>] ieee80211_request_smps_ap_work+0x2b/0x50 [mac80211]\n        [<c105cdd8>] process_one_work+0x198/0x450\n        [<c105d469>] worker_thread+0xf9/0x320\n        [<c10669ff>] kthread+0x9f/0xb0\n        [<c1613397>] ret_from_kernel_thread+0x1b/0x28\n\n-> #0 ((&sdata->u.ap.request_smps_work)){+.+...}:\n        [<c10ae9df>] __lock_acquire+0x183f/0x1910\n        [<c10aefa9>] lock_acquire+0x79/0xe0\n        [<c105b917>] flush_work+0x47/0x90\n        [<c105d867>] __cancel_work_timer+0x67/0xe0\n        [<c105d90f>] cancel_work_sync+0xf/0x20\n        [<fb0765cc>] ieee80211_stop_ap+0x8c/0x340 [mac80211]\n        [<f9b3268c>] cfg80211_stop_ap+0x8c/0x230 [cfg80211]\n        [<f9b0d8f9>] cfg80211_leave+0x79/0x100 [cfg80211]\n        [<f9b0da72>] cfg80211_netdev_notifier_call+0xf2/0x4f0 [cfg80211]\n        [<c160f2c9>] notifier_call_chain+0x59/0x130\n        [<c106c6de>] __raw_notifier_call_chain+0x1e/0x30\n        [<c106c70f>] raw_notifier_call_chain+0x1f/0x30\n        [<c14f8213>] call_netdevice_notifiers_info+0x33/0x70\n        [<c14f8263>] call_netdevice_notifiers+0x13/0x20\n        [<c14f82a4>] __dev_close_many+0x34/0xb0\n        [<c14f83fe>] dev_close_many+0x6e/0xc0\n        [<c14f9c77>] rollback_registered_many+0xa7/0x1f0\n        [<c14f9dd4>] unregister_netdevice_many+0x14/0x60\n        [<fb06f4d9>] ieee80211_remove_interfaces+0xe9/0x170 [mac80211]\n        [<fb055116>] ieee80211_unregister_hw+0x56/0x110 [mac80211]\n        [<fa3e9396>] iwl_op_mode_mvm_stop+0x26/0xe0 [iwlmvm]\n        [<f9b9d8ca>] _iwl_op_mode_stop+0x3a/0x70 [iwlwifi]\n        [<f9b9d96f>] iwl_opmode_deregister+0x6f/0x90 [iwlwifi]\n        [<fa405179>] __exit_compat+0xd/0x19 [iwlmvm]\n        [<c10b8bf9>] SyS_delete_module+0x179/0x2b0\n        [<c1613421>] sysenter_do_call+0x12/0x32\n\nFixes: 687da132234f (\"mac80211: implement SMPS for AP\")\nCc: <stable@vger.kernel.org> [3.13]\nReported-by: Ilan Peer <ilan.peer@intel.com>\nSigned-off-by: Emmanuel Grumbach <emmanuel.grumbach@intel.com>\nSigned-off-by: Johannes Berg <johannes.berg@intel.com>",
        "before_after_code_files": [
          "net/mac80211/cfg.c||net/mac80211/cfg.c",
          "net/mac80211/ht.c||net/mac80211/ht.c",
          "net/mac80211/iface.c||net/mac80211/iface.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "net/mac80211/cfg.c||net/mac80211/cfg.c": [
          "File: net/mac80211/cfg.c -> net/mac80211/cfg.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1090:  kfree(sdata->u.ap.next_beacon);",
          "1091:  sdata->u.ap.next_beacon = NULL;",
          "1096:  list_for_each_entry(vlan, &sdata->u.ap.vlans, u.vlan.list)",
          "1097:   netif_carrier_off(vlan->dev);",
          "",
          "[Removed Lines]",
          "1093:  cancel_work_sync(&sdata->u.ap.request_smps_work);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1103:  kfree_rcu(old_beacon, rcu_head);",
          "1104:  if (old_probe_resp)",
          "1105:   kfree_rcu(old_probe_resp, rcu_head);",
          "1107:  __sta_info_flush(sdata, true);",
          "1108:  ieee80211_free_keys(sdata, true);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1104:  sdata->u.ap.driver_smps_mode = IEEE80211_SMPS_OFF;",
          "",
          "---------------"
        ],
        "net/mac80211/ht.c||net/mac80211/ht.c": [
          "File: net/mac80211/ht.c -> net/mac80211/ht.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "466:         u.ap.request_smps_work);",
          "468:  sdata_lock(sdata);",
          "470:  sdata_unlock(sdata);",
          "471: }",
          "",
          "[Removed Lines]",
          "469:  __ieee80211_request_smps_ap(sdata, sdata->u.ap.driver_smps_mode);",
          "",
          "[Added Lines]",
          "469:  if (sdata_dereference(sdata->u.ap.beacon, sdata))",
          "470:   __ieee80211_request_smps_ap(sdata,",
          "471:          sdata->u.ap.driver_smps_mode);",
          "",
          "---------------"
        ],
        "net/mac80211/iface.c||net/mac80211/iface.c": [
          "File: net/mac80211/iface.c -> net/mac80211/iface.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "771:  ieee80211_roc_purge(local, sdata);",
          "774:   ieee80211_mgd_stop(sdata);",
          "777:   ieee80211_ibss_stop(sdata);",
          "",
          "[Removed Lines]",
          "773:  if (sdata->vif.type == NL80211_IFTYPE_STATION)",
          "776:  if (sdata->vif.type == NL80211_IFTYPE_ADHOC)",
          "",
          "[Added Lines]",
          "773:  switch (sdata->vif.type) {",
          "774:  case NL80211_IFTYPE_STATION:",
          "776:   break;",
          "777:  case NL80211_IFTYPE_ADHOC:",
          "779:   break;",
          "780:  case NL80211_IFTYPE_AP:",
          "781:   cancel_work_sync(&sdata->u.ap.request_smps_work);",
          "782:   break;",
          "783:  default:",
          "784:   break;",
          "785:  }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5cb906c7035f03a3a44fecece9d3ff8fcc75d6e0",
      "candidate_info": {
        "commit_hash": "5cb906c7035f03a3a44fecece9d3ff8fcc75d6e0",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/5cb906c7035f03a3a44fecece9d3ff8fcc75d6e0",
        "files": [
          "drivers/misc/mei/client.c"
        ],
        "message": "mei: don't unset read cb ptr on reset\n\nDon't set read callback to NULL during reset as\nthis leads to memory leak of both cb and its buffer.\nThe memory is correctly freed during mei_release.\n\nThe memory leak is detectable by kmemleak if\napplication has open read call while system is going through\nsuspend/resume.\n\nunreferenced object 0xecead780 (size 64):\n  comm \"AsyncTask #1\", pid 1018, jiffies 4294949621 (age 152.440s)\n  hex dump (first 32 bytes):\n    00 01 10 00 00 02 20 00 00 bf 30 f1 00 00 00 00  ...... ...0.....\n    00 00 00 00 00 00 00 00 36 01 00 00 00 70 da e2  ........6....p..\n  backtrace:\n    [<c1a60aec>] kmemleak_alloc+0x3c/0xa0\n    [<c131ed56>] kmem_cache_alloc_trace+0xc6/0x190\n    [<c16243c9>] mei_io_cb_init+0x29/0x50\n    [<c1625722>] mei_cl_read_start+0x102/0x360\n    [<c16268f3>] mei_read+0x103/0x4e0\n    [<c1324b09>] vfs_read+0x89/0x160\n    [<c1324d5f>] SyS_read+0x4f/0x80\n    [<c1a7b318>] syscall_call+0x7/0xb\n    [<ffffffff>] 0xffffffff\nunreferenced object 0xe2da7000 (size 512):\n  comm \"AsyncTask #1\", pid 1018, jiffies 4294949621 (age 152.440s)\n  hex dump (first 32 bytes):\n    00 6c da e2 7c 00 00 00 00 00 00 00 c0 eb 0c 59  .l..|..........Y\n    1b 00 00 00 01 00 00 00 02 10 00 00 01 00 00 00  ................\n  backtrace:\n    [<c1a60aec>] kmemleak_alloc+0x3c/0xa0\n    [<c131f127>] __kmalloc+0xe7/0x1d0\n    [<c162447e>] mei_io_cb_alloc_resp_buf+0x2e/0x60\n    [<c162574c>] mei_cl_read_start+0x12c/0x360\n    [<c16268f3>] mei_read+0x103/0x4e0\n    [<c1324b09>] vfs_read+0x89/0x160\n    [<c1324d5f>] SyS_read+0x4f/0x80\n    [<c1a7b318>] syscall_call+0x7/0xb\n    [<ffffffff>] 0xffffffff\n\nSigned-off-by: Alexander Usyskin <alexander.usyskin@intel.com>\nSigned-off-by: Tomas Winkler <tomas.winkler@intel.com>\nCc: stable <stable@vger.kernel.org>\nSigned-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>",
        "before_after_code_files": [
          "drivers/misc/mei/client.c||drivers/misc/mei/client.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "drivers/misc/mei/client.c||drivers/misc/mei/client.c": [
          "File: drivers/misc/mei/client.c -> drivers/misc/mei/client.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "908:  list_for_each_entry_safe(cl, next, &dev->file_list, link) {",
          "909:   cl->state = MEI_FILE_DISCONNECTED;",
          "910:   cl->mei_flow_ctrl_creds = 0;",
          "912:   cl->timer_count = 0;",
          "913:  }",
          "914: }",
          "",
          "[Removed Lines]",
          "911:   cl->read_cb = NULL;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ac323d8d807060f7c95a685a9fe861e7b6300993",
      "candidate_info": {
        "commit_hash": "ac323d8d807060f7c95a685a9fe861e7b6300993",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/ac323d8d807060f7c95a685a9fe861e7b6300993",
        "files": [
          "drivers/power/max17040_battery.c"
        ],
        "message": "power: max17040: Fix NULL pointer dereference when there is no platform_data\n\nFix NULL pointer dereference of \"chip->pdata\" if platform_data was not\nsupplied to the driver.\n\nThe driver during probe stored the pointer to the platform_data:\n\tchip->pdata = client->dev.platform_data;\nLater it was dereferenced in max17040_get_online() and\nmax17040_get_status().\n\nIf platform_data was not supplied, the NULL pointer exception would\nhappen:\n\n[    6.626094] Unable to handle kernel  of a at virtual address 00000000\n[    6.628557] pgd = c0004000\n[    6.632868] [00000000] *pgd=66262564\n[    6.634636] Unable to handle kernel paging request at virtual address e6262000\n[    6.642014] pgd = de468000\n[    6.644700] [e6262000] *pgd=00000000\n[    6.648265] Internal error: Oops: 5 [#1] PREEMPT SMP ARM\n[    6.653552] Modules linked in:\n[    6.656598] CPU: 0 PID: 31 Comm: kworker/0:1 Not tainted 3.10.14-02717-gc58b4b4 #505\n[    6.664334] Workqueue: events max17040_work\n[    6.668488] task: dfa11b80 ti: df9f6000 task.ti: df9f6000\n[    6.673873] PC is at show_pte+0x80/0xb8\n[    6.677687] LR is at show_pte+0x3c/0xb8\n[    6.681503] pc : [<c001b7b8>]    lr : [<c001b774>]    psr: 600f0113\n[    6.681503] sp : df9f7d58  ip : 600f0113  fp : 00000009\n[    6.692965] r10: 00000000  r9 : 00000000  r8 : dfa11b80\n[    6.698171] r7 : df9f7ea0  r6 : e6262000  r5 : 00000000  r4 : 00000000\n[    6.704680] r3 : 00000000  r2 : e6262000  r1 : 600f0193  r0 : c05b3750\n[    6.711194] Flags: nZCv  IRQs on  FIQs on  Mode SVC_32  ISA ARM  Segment kernel\n[    6.718485] Control: 10c53c7d  Table: 5e46806a  DAC: 00000015\n[    6.724218] Process kworker/0:1 (pid: 31, stack limit = 0xdf9f6238)\n[    6.730465] Stack: (0xdf9f7d58 to 0xdf9f8000)\n[    6.914325] [<c001b7b8>] (show_pte+0x80/0xb8) from [<c047107c>] (__do_kernel_fault.part.9+0x44/0x74)\n[    6.923425] [<c047107c>] (__do_kernel_fault.part.9+0x44/0x74) from [<c001bb7c>] (do_page_fault+0x2c4/0x360)\n[    6.933144] [<c001bb7c>] (do_page_fault+0x2c4/0x360) from [<c0008400>] (do_DataAbort+0x34/0x9c)\n[    6.941825] [<c0008400>] (do_DataAbort+0x34/0x9c) from [<c000e5d8>] (__dabt_svc+0x38/0x60)\n[    6.950058] Exception stack(0xdf9f7ea0 to 0xdf9f7ee8)\n[    6.955099] 7ea0: df0c1790 00000000 00000002 00000000 df0c1794 df0c1790 df0c1790 00000042\n[    6.963271] 7ec0: df0c1794 00000001 00000000 00000009 00000000 df9f7ee8 c0306268 c0306270\n[    6.971419] 7ee0: a00f0113 ffffffff\n[    6.974902] [<c000e5d8>] (__dabt_svc+0x38/0x60) from [<c0306270>] (max17040_work+0x8c/0x144)\n[    6.983317] [<c0306270>] (max17040_work+0x8c/0x144) from [<c003f364>] (process_one_work+0x138/0x440)\n[    6.992429] [<c003f364>] (process_one_work+0x138/0x440) from [<c003fa64>] (worker_thread+0x134/0x3b8)\n[    7.001628] [<c003fa64>] (worker_thread+0x134/0x3b8) from [<c00454bc>] (kthread+0xa4/0xb0)\n[    7.009875] [<c00454bc>] (kthread+0xa4/0xb0) from [<c000eb28>] (ret_from_fork+0x14/0x2c)\n[    7.017943] Code: e1a03005 e2422480 e0826104 e59f002c (e7922104)\n[    7.024017] ---[ end trace 73bc7006b9cc5c79 ]---\n\nSigned-off-by: Krzysztof Kozlowski <k.kozlowski@samsung.com>\nFixes: c6f4a42de60b981dd210de01cd3e575835e3158e\nCc: <stable@vger.kernel.org>",
        "before_after_code_files": [
          "drivers/power/max17040_battery.c||drivers/power/max17040_battery.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "drivers/power/max17040_battery.c||drivers/power/max17040_battery.c": [
          "File: drivers/power/max17040_battery.c -> drivers/power/max17040_battery.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "148: {",
          "149:  struct max17040_chip *chip = i2c_get_clientdata(client);",
          "152:   chip->online = chip->pdata->battery_online();",
          "153:  else",
          "154:   chip->online = 1;",
          "",
          "[Removed Lines]",
          "151:  if (chip->pdata->battery_online)",
          "",
          "[Added Lines]",
          "151:  if (chip->pdata && chip->pdata->battery_online)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "158: {",
          "159:  struct max17040_chip *chip = i2c_get_clientdata(client);",
          "162:   chip->status = POWER_SUPPLY_STATUS_UNKNOWN;",
          "163:   return;",
          "164:  }",
          "",
          "[Removed Lines]",
          "161:  if (!chip->pdata->charger_online || !chip->pdata->charger_enable) {",
          "",
          "[Added Lines]",
          "161:  if (!chip->pdata || !chip->pdata->charger_online",
          "162:    || !chip->pdata->charger_enable) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1e4dd9461fabfbc780cdfaf103cec790f3a53325",
      "candidate_info": {
        "commit_hash": "1e4dd9461fabfbc780cdfaf103cec790f3a53325",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/1e4dd9461fabfbc780cdfaf103cec790f3a53325",
        "files": [
          "mm/slub.c"
        ],
        "message": "slub: do not assert not having lock in removing freed partial\n\nVladimir reported the following issue:\n\nCommit c65c1877bd68 (\"slub: use lockdep_assert_held\") requires\nremove_partial() to be called with n->list_lock held, but free_partial()\ncalled from kmem_cache_close() on cache destruction does not follow this\nrule, leading to a warning:\n\n  WARNING: CPU: 0 PID: 2787 at mm/slub.c:1536 __kmem_cache_shutdown+0x1b2/0x1f0()\n  Modules linked in:\n  CPU: 0 PID: 2787 Comm: modprobe Tainted: G        W    3.14.0-rc1-mm1+ #1\n  Hardware name:\n   0000000000000600 ffff88003ae1dde8 ffffffff816d9583 0000000000000600\n   0000000000000000 ffff88003ae1de28 ffffffff8107c107 0000000000000000\n   ffff880037ab2b00 ffff88007c240d30 ffffea0001ee5280 ffffea0001ee52a0\n  Call Trace:\n    __kmem_cache_shutdown+0x1b2/0x1f0\n    kmem_cache_destroy+0x43/0xf0\n    xfs_destroy_zones+0x103/0x110 [xfs]\n    exit_xfs_fs+0x38/0x4e4 [xfs]\n    SyS_delete_module+0x19a/0x1f0\n    system_call_fastpath+0x16/0x1b\n\nHis solution was to add a spinlock in order to quiet lockdep.  Although\nthere would be no contention to adding the lock, that lock also requires\ndisabling of interrupts which will have a larger impact on the system.\n\nInstead of adding a spinlock to a location where it is not needed for\nlockdep, make a __remove_partial() function that does not test if the\nlist_lock is held, as no one should have it due to it being freed.\n\nAlso added a __add_partial() function that does not do the lock\nvalidation either, as it is not needed for the creation of the cache.\n\nSigned-off-by: Steven Rostedt <rostedt@goodmis.org>\nReported-by: Vladimir Davydov <vdavydov@parallels.com>\nSuggested-by: David Rientjes <rientjes@google.com>\nAcked-by: David Rientjes <rientjes@google.com>\nAcked-by: Vladimir Davydov <vdavydov@parallels.com>\nAcked-by: Christoph Lameter <cl@linux.com>\nCc: Pekka Enberg <penberg@kernel.org>\nSigned-off-by: Andrew Morton <akpm@linux-foundation.org>\nSigned-off-by: Linus Torvalds <torvalds@linux-foundation.org>",
        "before_after_code_files": [
          "mm/slub.c||mm/slub.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "mm/slub.c||mm/slub.c": [
          "File: mm/slub.c -> mm/slub.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1523: {",
          "1526:  n->nr_partial++;",
          "1527:  if (tail == DEACTIVATE_TO_TAIL)",
          "1528:   list_add_tail(&page->lru, &n->partial);",
          "",
          "[Removed Lines]",
          "1521: static inline void add_partial(struct kmem_cache_node *n,",
          "1522:     struct page *page, int tail)",
          "1524:  lockdep_assert_held(&n->list_lock);",
          "",
          "[Added Lines]",
          "1521: static inline void",
          "1522: __add_partial(struct kmem_cache_node *n, struct page *page, int tail)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1530:   list_add(&page->lru, &n->partial);",
          "1531: }",
          "1535: {",
          "1536:  lockdep_assert_held(&n->list_lock);",
          "1538:  list_del(&page->lru);",
          "1539:  n->nr_partial--;",
          "1540: }",
          "",
          "[Removed Lines]",
          "1533: static inline void remove_partial(struct kmem_cache_node *n,",
          "1534:      struct page *page)",
          "",
          "[Added Lines]",
          "1531: static inline void add_partial(struct kmem_cache_node *n,",
          "1532:     struct page *page, int tail)",
          "1535:  __add_partial(n, page, tail);",
          "1536: }",
          "1538: static inline void",
          "1539: __remove_partial(struct kmem_cache_node *n, struct page *page)",
          "1540: {",
          "1545: static inline void remove_partial(struct kmem_cache_node *n,",
          "1546:      struct page *page)",
          "1547: {",
          "1548:  lockdep_assert_held(&n->list_lock);",
          "1549:  __remove_partial(n, page);",
          "1550: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2904:  inc_slabs_node(kmem_cache_node, node, page->objects);",
          "2913: }",
          "2915: static void free_kmem_cache_nodes(struct kmem_cache *s)",
          "",
          "[Removed Lines]",
          "2910:  spin_lock(&n->list_lock);",
          "2911:  add_partial(n, page, DEACTIVATE_TO_HEAD);",
          "2912:  spin_unlock(&n->list_lock);",
          "",
          "[Added Lines]",
          "2920:  __add_partial(n, page, DEACTIVATE_TO_HEAD);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3196:  list_for_each_entry_safe(page, h, &n->partial, lru) {",
          "3197:   if (!page->inuse) {",
          "3199:    discard_slab(s, page);",
          "3200:   } else {",
          "3201:    list_slab_objects(s, page,",
          "",
          "[Removed Lines]",
          "3198:    remove_partial(n, page);",
          "",
          "[Added Lines]",
          "3206:    __remove_partial(n, page);",
          "",
          "---------------"
        ]
      }
    }
  ]
}