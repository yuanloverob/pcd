{
  "cve_id": "CVE-2019-19646",
  "cve_desc": "pragma.c in SQLite through 3.30.1 mishandles NOT NULL in an integrity_check PRAGMA command in certain cases of generated columns.",
  "repo": "sqlite/sqlite",
  "patch_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
  "patch_info": {
    "commit_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/pragma.c",
      "test/gencol1.test"
    ],
    "message": "Fix the NOT NULL verification logic in PRAGMA integrity_check so that it works for generated columns whose value is the result of a comparison operator. Ticket [bd8c280671ba44a7]\n\nFossilOrigin-Name: f3b39c71b88cb6721f443de56cdce4c08252453a5e340b00a2bd88dc10c42400",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/pragma.c||src/pragma.c",
      "test/gencol1.test||test/gencol1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: e3398c5ffb060b2b26334b8598e2c63953741e2d6f5124dbd6bdfc8e94742539",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/pragma.c||src/pragma.c": [
      "File: src/pragma.c -> src/pragma.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1596:           if( j==pTab->iPKey ) continue;",
      "1597:           if( pTab->aCol[j].notNull==0 ) continue;",
      "1598:           sqlite3ExprCodeGetColumnOfTable(v, pTab, iDataCur, j, 3);",
      "1600:           jmp2 = sqlite3VdbeAddOp1(v, OP_NotNull, 3); VdbeCoverage(v);",
      "1601:           zErr = sqlite3MPrintf(db, \"NULL value in %s.%s\", pTab->zName,",
      "1602:                               pTab->aCol[j].zName);",
      "",
      "[Removed Lines]",
      "1599:           sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "",
      "[Added Lines]",
      "1599:           if( sqlite3VdbeGetOp(v,-1)->opcode==OP_Column ){",
      "1600:             sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "1601:           }",
      "",
      "---------------"
    ],
    "test/gencol1.test||test/gencol1.test": [
      "File: test/gencol1.test -> test/gencol1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "328:   INSERT OR REPLACE INTO t0(c0, c1) VALUES (2, 1), (1, 0)",
      "329: } {1 {FOREIGN KEY constraint failed}}",
      "331: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "331: # 2019-12-09 ticket bd8c280671ba44a7",
      "332: # With generated columns, the sqlite3ExprGetColumnOfTable() routine might",
      "333: # generate a code sequence that does not end with OP_Column.  So check to",
      "334: # make sure that the last instruction generated is an OP_column prior to",
      "335: # applying the OPFLAG_TYPEOFARG optimization to NOT NULL checks in the",
      "336: # PRAGMA integrity_check code.",
      "337: #",
      "338: sqlite3 db :memory:",
      "339: do_execsql_test gencol1-12.10 {",
      "340:   CREATE TABLE t0 (c0, c1 NOT NULL AS (c0==0));",
      "341:   INSERT INTO t0(c0) VALUES (0);",
      "342:   PRAGMA integrity_check;",
      "343: } {ok}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "c204d81a6c043305cfae10e7e9c9338d3702d1a6",
      "candidate_info": {
        "commit_hash": "c204d81a6c043305cfae10e7e9c9338d3702d1a6",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/c204d81a6c043305cfae10e7e9c9338d3702d1a6",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/treeview.c"
        ],
        "message": "Enhance treeview to show SOFT-COLLATE for TK_COLLATE operators that omit the EP_Collate flag.\n\nFossilOrigin-Name: a97804620a27acc30bebd2aaa04e38f2f36de48b0931038ca8bdc9cb0c36b8f4",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/treeview.c||src/treeview.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 36997c4ade2ef3a274cd1ac52b44118fb3a05325adb650b7b338ecb43d060575",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/treeview.c||src/treeview.c": [
          "File: src/treeview.c -> src/treeview.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "536:     }",
          "538:     case TK_COLLATE: {",
          "540:       sqlite3TreeViewExpr(pView, pExpr->pLeft, 0);",
          "541:       break;",
          "542:     }",
          "",
          "[Removed Lines]",
          "539:       sqlite3TreeViewLine(pView, \"COLLATE %Q\", pExpr->u.zToken);",
          "",
          "[Added Lines]",
          "543:       sqlite3TreeViewLine(pView, \"%sCOLLATE %Q%s\",",
          "544:         !ExprHasProperty(pExpr, EP_Collate) ? \"SOFT-\" : \"\",",
          "545:         pExpr->u.zToken, zFlgs);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5c2f2206b63f7cfabb9e0211e8887d6cd915e983",
      "candidate_info": {
        "commit_hash": "5c2f2206b63f7cfabb9e0211e8887d6cd915e983",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/5c2f2206b63f7cfabb9e0211e8887d6cd915e983",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c"
        ],
        "message": "Initialize the 18-byte overrun area on the buffer used to reconstruct overflow btree cells during a btree search, to avoid a harmless jump-depends-on-uninit-values warning.\n\nFossilOrigin-Name: 4b05caeb1b9767ba58cb4261ecc22cdd495216b3258d45f2165cdbd3ea079495",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 915388ab39ba3ca8681cd2613b91314aa965967f23a5bface90f54a3d6423300",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5534:             rc = SQLITE_CORRUPT_PAGE(pPage);",
          "5535:             goto moveto_finish;",
          "5536:           }",
          "5538:           if( pCellKey==0 ){",
          "5539:             rc = SQLITE_NOMEM_BKPT;",
          "5540:             goto moveto_finish;",
          "5541:           }",
          "5542:           pCur->ix = (u16)idx;",
          "5543:           rc = accessPayload(pCur, 0, nCell, (unsigned char*)pCellKey, 0);",
          "5544:           pCur->curFlags &= ~BTCF_ValidOvfl;",
          "5545:           if( rc ){",
          "5546:             sqlite3_free(pCellKey);",
          "",
          "[Removed Lines]",
          "5537:           pCellKey = sqlite3Malloc( nCell+18 );",
          "",
          "[Added Lines]",
          "5538:           pCellKey = sqlite3Malloc( nCell+nOverrun );",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4c8056079ffdafae82b7f42fe4917af2f583cf51",
      "candidate_info": {
        "commit_hash": "4c8056079ffdafae82b7f42fe4917af2f583cf51",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/4c8056079ffdafae82b7f42fe4917af2f583cf51",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbemem.c"
        ],
        "message": "Remove a harmless unused variable.\n\nFossilOrigin-Name: 28091a48aa6994f8d7c142b5851bcd6b4e9a93a7bbef6c927a6182d24f3245b4",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbemem.c||src/vdbemem.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 8e100e6c35c30e0d7e4014b9435f81f9f61ddab2386dfe9a4218d8190a6da3be",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbemem.c||src/vdbemem.c": [
          "File: src/vdbemem.c -> src/vdbemem.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "460: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "461: int sqlite3VdbeMemAggValue(Mem *pAccum, Mem *pOut, FuncDef *pFunc){",
          "462:   sqlite3_context ctx;",
          "464:   assert( pFunc!=0 );",
          "465:   assert( pFunc->xValue!=0 );",
          "466:   assert( (pAccum->flags & MEM_Null)!=0 || pFunc==pAccum->u.pDef );",
          "467:   assert( pAccum->db==0 || sqlite3_mutex_held(pAccum->db->mutex) );",
          "468:   memset(&ctx, 0, sizeof(ctx));",
          "472:   sqlite3VdbeMemSetNull(pOut);",
          "473:   ctx.pOut = pOut;",
          "474:   ctx.pMem = pAccum;",
          "",
          "[Removed Lines]",
          "463:   Mem t;",
          "469:   memset(&t, 0, sizeof(t));",
          "470:   t.flags = MEM_Null;",
          "471:   t.db = pAccum->db;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bf9ff256fe17526a995ac3e470aa120c3c173414",
      "candidate_info": {
        "commit_hash": "bf9ff256fe17526a995ac3e470aa120c3c173414",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/bf9ff256fe17526a995ac3e470aa120c3c173414",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c",
          "src/sqliteInt.h",
          "test/without_rowid1.test"
        ],
        "message": "Disable index seek optimizations on REINDEX when the order of primary keys in the index differs from the main table. Fix for ticket [bba7b69f9849b5bf11b4].\n\nFossilOrigin-Name: f7aadfab3bb8eb8eb2cd62dc8a6823538387b3329f1efc23ef75482488109478",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "test/without_rowid1.test||test/without_rowid1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: f158c048be1dc7c80d38787a20495caa55b86416967efd57f4888548d42b4819",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1928:         testcase( hasColumn(pIdx->aiColumn, pIdx->nKeyCol, pPk->aiColumn[i]) );",
          "1929:         pIdx->aiColumn[j] = pPk->aiColumn[i];",
          "1930:         pIdx->azColl[j] = pPk->azColl[i];",
          "1931:         j++;",
          "1932:       }",
          "1933:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1931:         if( pPk->aSortOrder[i] ){",
          "1933:           pIdx->bAscKeyBug = 1;",
          "1934:         }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3049:     addr2 = sqlite3VdbeCurrentAddr(v);",
          "3050:   }",
          "3051:   sqlite3VdbeAddOp3(v, OP_SorterData, iSorter, regRecord, iIdx);",
          "3053:   sqlite3VdbeAddOp2(v, OP_IdxInsert, iIdx, regRecord);",
          "3054:   sqlite3VdbeChangeP5(v, OPFLAG_USESEEKRESULT);",
          "3055:   sqlite3ReleaseTempReg(pParse, regRecord);",
          "",
          "[Removed Lines]",
          "3052:   sqlite3VdbeAddOp1(v, OP_SeekEnd, iIdx);",
          "",
          "[Added Lines]",
          "3056:   if( !pIndex->bAscKeyBug ){",
          "3064:     sqlite3VdbeAddOp1(v, OP_SeekEnd, iIdx);",
          "3065:   }",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h"
        ],
        "test/without_rowid1.test||test/without_rowid1.test": [
          "File: test/without_rowid1.test -> test/without_rowid1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "399:   PRAGMA integrity_check;",
          "400:   SELECT a FROM t11 ORDER BY a COLLATE binary;",
          "401: } {ok A a}",
          "403: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "403: # 2019-05-13 ticket https://www.sqlite.org/src/info/bba7b69f9849b5b",
          "404: do_execsql_test 12.1 {",
          "405:   DROP TABLE IF EXISTS t0;",
          "406:   CREATE TABLE t0 (c0 INTEGER PRIMARY KEY DESC, c1 UNIQUE DEFAULT NULL) WITHOUT ROWID;",
          "407:   INSERT INTO t0(c0) VALUES (1), (2), (3), (4), (5);",
          "408:   REINDEX;",
          "409:   PRAGMA integrity_check;",
          "410: } {ok}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "dd6cc9b52abf6c4ae15a57a9f3d6e3c1e848f589",
      "candidate_info": {
        "commit_hash": "dd6cc9b52abf6c4ae15a57a9f3d6e3c1e848f589",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/dd6cc9b52abf6c4ae15a57a9f3d6e3c1e848f589",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c",
          "src/expr.c",
          "src/insert.c",
          "src/sqliteInt.h",
          "src/update.c"
        ],
        "message": "Work toward getting generated columns to work with triggers.  Still more work to do in this area.\n\nFossilOrigin-Name: 932a37275d7e932f8237d32c8fc6087ed8cd342fe01ef2f7a43c7237ab84c9ac",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c",
          "src/expr.c||src/expr.c",
          "src/insert.c||src/insert.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/update.c||src/update.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: fb9c9bb284d441bd7aa34c87b6fd8ce57d036c17623d82354154fc6286bdd134",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "934:   for(i=0, n=0; i<iCol; i++){",
          "935:     if( (pTab->aCol[i].colFlags & COLFLAG_VIRTUAL)==0 ) n++;",
          "936:   }",
          "938: }",
          "939: #endif",
          "",
          "[Removed Lines]",
          "937:   return n;",
          "",
          "[Added Lines]",
          "959:   if( pTab->aCol[i].colFlags & COLFLAG_VIRTUAL ){",
          "961:     return pTab->nNVCol + i - n;",
          "962:   }else{",
          "964:     return n;",
          "965:   }",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3604:               return 0;",
          "3605:             }",
          "3606:             pCol->colFlags |= COLFLAG_BUSY;",
          "3614:             }",
          "3615:             pCol->colFlags &= ~(COLFLAG_BUSY|COLFLAG_NOTAVAIL);",
          "3617:           }else",
          "3619:           if( pCol->affinity==SQLITE_AFF_REAL ){",
          "",
          "[Removed Lines]",
          "3607:             if( pCol->colFlags & COLFLAG_VIRTUAL ){",
          "3608:               target = sqlite3ExprCodeTarget(pParse, pCol->pDflt, target);",
          "3609:             }else{",
          "3610:               target = iSrc;",
          "3611:               if( pCol->colFlags & COLFLAG_NOTAVAIL ){",
          "3612:                 sqlite3ExprCode(pParse, pCol->pDflt, iSrc);",
          "3613:               }",
          "3616:             return target;",
          "",
          "[Added Lines]",
          "3607:             if( pCol->colFlags & COLFLAG_NOTAVAIL ){",
          "3608:               sqlite3ExprCode(pParse, pCol->pDflt, iSrc);",
          "3611:             return iSrc;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4090:       Table *pTab = pExpr->y.pTab;",
          "4093:       assert( pExpr->iTable==0 || pExpr->iTable==1 );",
          "4096:       assert( p1>=0 && p1<(pTab->nCol*2+2) );",
          "4098:       sqlite3VdbeAddOp2(v, OP_Param, p1, target);",
          "4099:       VdbeComment((v, \"r[%d]=%s.%s\", target,",
          "4100:         (pExpr->iTable ? \"new\" : \"old\"),",
          "4102:       ));",
          "4104: #ifndef SQLITE_OMIT_FLOATING_POINT",
          "",
          "[Removed Lines]",
          "4091:       int p1 = pExpr->iTable * (pTab->nCol+1) + 1 + pExpr->iColumn;",
          "4094:       assert( pExpr->iColumn>=-1 && pExpr->iColumn<pTab->nCol );",
          "4095:       assert( pTab->iPKey<0 || pExpr->iColumn!=pTab->iPKey );",
          "4101:         (pExpr->iColumn<0 ? \"rowid\" : pExpr->y.pTab->aCol[pExpr->iColumn].zName)",
          "",
          "[Added Lines]",
          "4086:       int iCol = pExpr->iColumn;",
          "4087:       int p1 = pExpr->iTable * (pTab->nCol+1) + 1",
          "4088:                      + (iCol>=0 ? sqlite3TableColumnToStorage(pTab, iCol) : -1);",
          "4091:       assert( iCol>=-1 && iCol<pTab->nCol );",
          "4092:       assert( pTab->iPKey<0 || iCol!=pTab->iPKey );",
          "4098:         (pExpr->iColumn<0 ? \"rowid\" : pExpr->y.pTab->aCol[iCol].zName)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4113:         sqlite3VdbeAddOp1(v, OP_RealAffinity, target);",
          "4114:       }",
          "4115: #endif",
          "",
          "[Removed Lines]",
          "4110:       if( pExpr->iColumn>=0",
          "4111:        && pTab->aCol[pExpr->iColumn].affinity==SQLITE_AFF_REAL",
          "4112:       ){",
          "",
          "[Added Lines]",
          "4107:       if( iCol>=0 && pTab->aCol[iCol].affinity==SQLITE_AFF_REAL ){",
          "",
          "---------------"
        ],
        "src/insert.c||src/insert.c": [
          "File: src/insert.c -> src/insert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "216: ){",
          "217:   int i;",
          "222:   for(i=0; i<pTab->nCol; i++){",
          "224:       pTab->aCol[i].colFlags |= COLFLAG_NOTAVAIL;",
          "225:     }",
          "226:   }",
          "",
          "[Removed Lines]",
          "212: void sqlite3ComputeStoredColumns(",
          "223:     if( pTab->aCol[i].colFlags & COLFLAG_STORED ){",
          "",
          "[Added Lines]",
          "212: void sqlite3ComputeGeneratedColumns(",
          "218:   int nv;",
          "224:     if( pTab->aCol[i].colFlags & COLFLAG_GENERATED ){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "232:   pParse->iSelfTab = -iRegStore;",
          "234:     u32 colFlags = pTab->aCol[i].colFlags;",
          "241:       colFlags &= ~COLFLAG_NOTAVAIL;",
          "242:     }",
          "243:   }",
          "244:   pParse->iSelfTab = 0;",
          "245: }",
          "",
          "[Removed Lines]",
          "233:   for(i=0; i<pTab->nCol; i++, iRegStore++){",
          "235:     if( (colFlags & COLFLAG_VIRTUAL)!=0 ){",
          "237:       iRegStore--;",
          "238:     }else if( (colFlags & COLFLAG_NOTAVAIL)!=0 ){",
          "240:       sqlite3ExprCode(pParse, pTab->aCol[i].pDflt, iRegStore);",
          "",
          "[Added Lines]",
          "234:   for(i=nv=0; i<pTab->nCol; i++){",
          "236:     if( (colFlags & COLFLAG_NOTAVAIL)!=0 ){",
          "237:       assert( colFlags & COLFLAG_GENERATED );",
          "238:       if( colFlags & COLFLAG_VIRTUAL ){",
          "240:         assert( pTab->nNVCol+nv == sqlite3TableColumnToStorage(pTab,i) );",
          "241:         sqlite3ExprCode(pParse, pTab->aCol[i].pDflt,",
          "242:                         iRegStore+pTab->nNVCol+nv);",
          "243:       }else{",
          "245:         assert( i-nv == sqlite3TableColumnToStorage(pTab,i) );",
          "246:         sqlite3ExprCode(pParse, pTab->aCol[i].pDflt, iRegStore+i-nv);",
          "247:       }",
          "250:     if( (colFlags & COLFLAG_VIRTUAL)!=0 ) nv++;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1055:       int k;",
          "1056:       u32 colFlags;",
          "1057:       assert( i>=nHidden );",
          "1059:       if( i==pTab->iPKey ){",
          "",
          "[Removed Lines]",
          "1058:       assert( iRegStore==sqlite3TableColumnToStorage(pTab,i)+regRowid+1 );",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1108:     }",
          "1110: #ifndef SQLITE_OMIT_GENERATED_COLUMNS",
          "1115:     }",
          "1116: #endif",
          "",
          "[Removed Lines]",
          "1113:     if( pTab->tabFlags & TF_HasStored ){",
          "1114:       sqlite3ComputeStoredColumns(pParse, regRowid+1, pTab);",
          "",
          "[Added Lines]",
          "1120:     if( pTab->tabFlags & (TF_HasStored|TF_HasVirtual) ){",
          "1121:       sqlite3ComputeGeneratedColumns(pParse, regRowid+1, pTab);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1454:     assert( onError==OE_Rollback || onError==OE_Abort || onError==OE_Fail",
          "1455:         || onError==OE_Ignore || onError==OE_Replace );",
          "1456:     addr1 = 0;",
          "1470:     switch( onError ){",
          "1471:       case OE_Replace: {",
          "1472:         assert( onError==OE_Replace );",
          "",
          "[Removed Lines]",
          "1457:     if( (pTab->tabFlags & TF_HasVirtual)==0 ){",
          "1458:       iReg = regNewData+1+i;",
          "1459:     }else if( pTab->aCol[i].colFlags & COLFLAG_VIRTUAL ){",
          "1460:       iReg = ++pParse->nMem;",
          "1461:       assert( pParse->iSelfTab==0 );",
          "1462:       pParse->iSelfTab = -regNewData;",
          "1463:       sqlite3ExprCode(pParse, pTab->aCol[i].pDflt, iReg);",
          "1464:       pParse->iSelfTab = 0;",
          "1465:       if( onError==OE_Replace ) onError = OE_Abort;",
          "1466:     }else{",
          "1467:       testcase( i!=sqlite3TableColumnToStorage(pTab, i) );",
          "1468:       iReg = sqlite3TableColumnToStorage(pTab, i) + regNewData + 1;",
          "1469:     }",
          "",
          "[Added Lines]",
          "1464:     testcase( i!=sqlite3TableColumnToStorage(pTab, i) );",
          "1465:     testcase( pTab->aCol[i].colFlags & COLFLAG_VIRTUAL );",
          "1466:     testcase( pTab->aCol[i].colFlags & COLFLAG_STORED );",
          "1467:     testcase( pTab->aCol[i].colFlags & COLFLAG_GENERATED );",
          "1468:     iReg = sqlite3TableColumnToStorage(pTab, i) + regNewData + 1;",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "4044: #endif",
          "4045: void sqlite3Insert(Parse*, SrcList*, Select*, IdList*, int, Upsert*);",
          "4046: #ifndef SQLITE_OMIT_GENERATED_COLUMNS",
          "4048: #endif",
          "4049: void *sqlite3ArrayAllocate(sqlite3*,void*,int,int*,int*);",
          "4050: IdList *sqlite3IdListAppend(Parse*, IdList*, Token*);",
          "",
          "[Removed Lines]",
          "4047:   void sqlite3ComputeStoredColumns(Parse*, int, Table*);",
          "",
          "[Added Lines]",
          "4047:   void sqlite3ComputeGeneratedColumns(Parse*, int, Table*);",
          "",
          "---------------"
        ],
        "src/update.c||src/update.c": [
          "File: src/update.c -> src/update.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "693:     }",
          "694:   }",
          "695: #ifndef SQLITE_OMIT_GENERATED_COLUMNS",
          "698:   }",
          "699: #endif",
          "",
          "[Removed Lines]",
          "696:   if( pTab->tabFlags & TF_HasStored ){",
          "697:     sqlite3ComputeStoredColumns(pParse, regNew, pTab);",
          "",
          "[Added Lines]",
          "696:   if( pTab->tabFlags & (TF_HasStored|TF_HasVirtual) ){",
          "697:     sqlite3ComputeGeneratedColumns(pParse, regNew, pTab);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "737:       }",
          "738:     }",
          "739: #ifndef SQLITE_OMIT_GENERATED_COLUMNS",
          "742:     }",
          "743: #endif",
          "744:   }",
          "",
          "[Removed Lines]",
          "740:     if( pTab->tabFlags & TF_HasStored ){",
          "741:       sqlite3ComputeStoredColumns(pParse, regNew, pTab);",
          "",
          "[Added Lines]",
          "740:     if( pTab->tabFlags & (TF_HasStored|TF_HasVirtual) ){",
          "741:       sqlite3ComputeGeneratedColumns(pParse, regNew, pTab);",
          "",
          "---------------"
        ]
      }
    }
  ]
}