{
  "cve_id": "CVE-2017-3730",
  "cve_desc": "In OpenSSL 1.1.0 before 1.1.0d, if a malicious server supplies bad parameters for a DHE or ECDHE key exchange then this can result in the client attempting to dereference a NULL pointer leading to a client crash. This could be exploited in a Denial of Service attack.",
  "repo": "openssl/openssl",
  "patch_hash": "efbe126e3ebb9123ac9d058aa2bb044261342aaa",
  "patch_info": {
    "commit_hash": "efbe126e3ebb9123ac9d058aa2bb044261342aaa",
    "repo": "openssl/openssl",
    "commit_url": "https://github.com/openssl/openssl/commit/efbe126e3ebb9123ac9d058aa2bb044261342aaa",
    "files": [
      "ssl/statem/statem_clnt.c"
    ],
    "message": "Fix missing NULL checks in CKE processing\n\nReviewed-by: Rich Salz <rsalz@openssl.org>",
    "before_after_code_files": [
      "ssl/statem/statem_clnt.c||ssl/statem/statem_clnt.c"
    ]
  },
  "patch_diff": {
    "ssl/statem/statem_clnt.c||ssl/statem/statem_clnt.c": [
      "File: ssl/statem/statem_clnt.c -> ssl/statem/statem_clnt.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2258:         return 0;",
      "2259:     }",
      "2260:     ckey = ssl_generate_pkey(skey);",
      "2261:     dh_clnt = EVP_PKEY_get0_DH(ckey);",
      "2263:     if (dh_clnt == NULL || ssl_derive(s, ckey, skey) == 0) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2261:     if (ckey == NULL) {",
      "2262:         SSLerr(SSL_F_TLS_CONSTRUCT_CKE_DHE, ERR_R_INTERNAL_ERROR);",
      "2263:         return 0;",
      "2264:     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "2296:     }",
      "2298:     ckey = ssl_generate_pkey(skey);",
      "2300:     if (ssl_derive(s, ckey, skey) == 0) {",
      "2301:         SSLerr(SSL_F_TLS_CONSTRUCT_CKE_ECDHE, ERR_R_EVP_LIB);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2304:     if (ckey == NULL) {",
      "2305:         SSLerr(SSL_F_TLS_CONSTRUCT_CKE_ECDHE, ERR_R_INTERNAL_ERROR);",
      "2306:         goto err;",
      "2307:     }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "949bd8e45eb4d2697d20c2249fa42cba545da2ac",
      "candidate_info": {
        "commit_hash": "949bd8e45eb4d2697d20c2249fa42cba545da2ac",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/949bd8e45eb4d2697d20c2249fa42cba545da2ac",
        "files": [
          "test/recipes/60-test_x509_store.t"
        ],
        "message": "Add a test of the X509_STORE / X509_LOOKUP API\n\nFortunately, \"openssl verify\" makes good use of that API\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2652)\n(cherry picked from commit bb0f7eca75b8da1538c08c1f5be1bb7ea8f40638)",
        "before_after_code_files": [
          "test/recipes/60-test_x509_store.t||test/recipes/60-test_x509_store.t"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/recipes/60-test_x509_store.t||test/recipes/60-test_x509_store.t": [
          "File: test/recipes/60-test_x509_store.t -> test/recipes/60-test_x509_store.t",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #! /usr/bin/env perl",
          "2: # Copyright 2015-2016 The OpenSSL Project Authors. All Rights Reserved.",
          "3: #",
          "4: # Licensed under the OpenSSL license (the \"License\").  You may not use",
          "5: # this file except in compliance with the License.  You can obtain a copy",
          "6: # in the file LICENSE in the source distribution or at",
          "7: # https://www.openssl.org/source/license.html",
          "10: use strict;",
          "11: use warnings;",
          "13: use File::Copy;",
          "14: use File::Spec::Functions qw/:DEFAULT canonpath/;",
          "15: use OpenSSL::Test qw/:DEFAULT srctop_file/;",
          "17: setup(\"test_x509_store\");",
          "19: # We use 'openssl verify' for these tests, as it contains everything",
          "20: # we need to conduct these tests.  The tests here are a subset of the",
          "21: # ones found in 25-test_verify.t",
          "23: sub verify {",
          "24:     my ($cert, $purpose, $trustedpath, $untrusted, @opts) = @_;",
          "25:     my @args = qw(openssl verify -auth_level 1 -purpose);",
          "26:     my @path = qw(test certs);",
          "27:     push(@args, \"$purpose\", @opts);",
          "28:     push(@args, \"-CApath\", $trustedpath);",
          "29:     for (@$untrusted) { push(@args, \"-untrusted\", srctop_file(@path, \"$_.pem\")) }",
          "30:     push(@args, srctop_file(@path, \"$cert.pem\"));",
          "31:     run(app([@args]));",
          "32: }",
          "34: plan tests => 3;",
          "36: indir \"60-test_x509_store\" => sub {",
          "37:     for ((\"root-cert\")) {",
          "38:         copy(srctop_file(\"test\", \"certs\", \"$_.pem\"), curdir());",
          "39:     }",
          "40:     ok(run(app([qw(openssl rehash), curdir()])), \"Rehashing\");",
          "42:     # Canonical success",
          "43:     ok(verify(\"ee-cert\", \"sslserver\", curdir(), [\"ca-cert\"], \"-show_chain\"),",
          "44:        \"verify ee-cert\");",
          "46:     # Failure because root cert not present in CApath",
          "47:     ok(!verify(\"ca-root2\", \"any\", curdir(), [], \"-show_chain\"));",
          "48: }, create => 1, cleanup => 1;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d52c9b58a6e6c6dba62221b469e1576fe26b3c20",
      "candidate_info": {
        "commit_hash": "d52c9b58a6e6c6dba62221b469e1576fe26b3c20",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/d52c9b58a6e6c6dba62221b469e1576fe26b3c20",
        "files": [
          "test/ssl_test_ctx.c"
        ],
        "message": "Fix a mem leak in ssl_test_ctx.c\n\nReviewed-by: Richard Levitte <levitte@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2650)\n(cherry picked from commit d605fc3a0ce4103ca6660904795bf1209cdb55b7)",
        "before_after_code_files": [
          "test/ssl_test_ctx.c||test/ssl_test_ctx.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/ssl_test_ctx.c||test/ssl_test_ctx.c": [
          "File: test/ssl_test_ctx.c -> test/ssl_test_ctx.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "507:     OPENSSL_free(conf->client.alpn_protocols);",
          "508:     OPENSSL_free(conf->server.alpn_protocols);",
          "509:     OPENSSL_free(conf->server2.alpn_protocols);",
          "510: }",
          "512: static void ssl_test_ctx_free_extra_data(SSL_TEST_CTX *ctx)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "510:     OPENSSL_free(conf->client.reneg_ciphers);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8aa38789332b49ef3d33965649a4595b1bc33ac9",
      "candidate_info": {
        "commit_hash": "8aa38789332b49ef3d33965649a4595b1bc33ac9",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/8aa38789332b49ef3d33965649a4595b1bc33ac9",
        "files": [
          "ssl/t1_lib.c"
        ],
        "message": "Add some more consistency checks in tls_decrypt_ticket.\n\nReviewed-by: Richard Levitte <levitte@openssl.org>\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2704)\n(cherry picked from commit 79020b27beff060d02830870fdfd821fe8cbd439)",
        "before_after_code_files": [
          "ssl/t1_lib.c||ssl/t1_lib.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ssl/t1_lib.c||ssl/t1_lib.c": [
          "File: ssl/t1_lib.c -> ssl/t1_lib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3172:     sess = d2i_SSL_SESSION(NULL, &p, slen);",
          "3173:     OPENSSL_free(sdec);",
          "3174:     if (sess) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3176:         if (p != sdec + slen || sess->session_id_length != 0) {",
          "3177:             SSL_SESSION_free(sess);",
          "3178:             return 2;",
          "3179:         }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a0c5ccc7c1ec1614b77c76ee0f057e681e7a12e9",
      "candidate_info": {
        "commit_hash": "a0c5ccc7c1ec1614b77c76ee0f057e681e7a12e9",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/a0c5ccc7c1ec1614b77c76ee0f057e681e7a12e9",
        "files": [
          "engines/afalg/e_afalg.c"
        ],
        "message": "engines/afalg: make it compile with backward compatibility headers.\n\nReviewed-by: Tim Hudson <tjh@openssl.org>\n(cherry picked from commit 4e3997293b3825ed19de20d5484f8c0f66fce534)",
        "before_after_code_files": [
          "engines/afalg/e_afalg.c||engines/afalg/e_afalg.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "engines/afalg/e_afalg.c||engines/afalg/e_afalg.c": [
          "File: engines/afalg/e_afalg.c -> engines/afalg/e_afalg.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: #include <stdio.h>",
          "13: #include <string.h>",
          "14: #include <unistd.h>",
          "",
          "[Removed Lines]",
          "11: #define _GNU_SOURCE",
          "",
          "[Added Lines]",
          "11: #ifndef _GNU_SOURCE",
          "12: # define _GNU_SOURCE",
          "13: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "17: #include <openssl/async.h>",
          "18: #include <openssl/err.h>",
          "20: #include <linux/version.h>",
          "21: #define K_MAJ   4",
          "22: #define K_MIN1  1",
          "23: #define K_MIN2  0",
          "25: # warning \"AFALG ENGINE requires Kernel Headers >= 4.1.0\"",
          "26: # warning \"Skipping Compilation of AFALG engine\"",
          "27: void engine_load_afalg_int(void)",
          "",
          "[Removed Lines]",
          "24: #if LINUX_VERSION_CODE <= KERNEL_VERSION(K_MAJ, K_MIN1, K_MIN2)",
          "",
          "[Added Lines]",
          "22: #include <sys/socket.h>",
          "27: #if LINUX_VERSION_CODE <= KERNEL_VERSION(K_MAJ, K_MIN1, K_MIN2) || \\",
          "28:     !defined(AF_ALG)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "30: #else",
          "32: # include <linux/if_alg.h>",
          "34: # include <fcntl.h>",
          "35: # include <sys/utsname.h>",
          "",
          "[Removed Lines]",
          "33: # include <sys/socket.h>",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b67a37b84674881226bb96709239a7e5945bc480",
      "candidate_info": {
        "commit_hash": "b67a37b84674881226bb96709239a7e5945bc480",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/b67a37b84674881226bb96709239a7e5945bc480",
        "files": [
          "test/recipes/40-test_rehash.t"
        ],
        "message": "test_rehash does nothing, have it do something\n\ntest/recipes/40-test_rehash.t uses test files from certs/demo, which\ndoesn't exist any longer.  Have it use PEM files from test/ instead.\n\nBecause rehash wants only one certificate or CRL per file, we must\nalso filter those PEM files to produce test files with a single object\neach.\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2594)\n(cherry picked from commit 4bbd8a5daaa810c487f684971c0339a1d7c15da9)",
        "before_after_code_files": [
          "test/recipes/40-test_rehash.t||test/recipes/40-test_rehash.t"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/recipes/40-test_rehash.t||test/recipes/40-test_rehash.t": [
          "File: test/recipes/40-test_rehash.t -> test/recipes/40-test_rehash.t",
          "--- Hunk 1 ---",
          "[Context before]",
          "14: use File::Copy;",
          "15: use File::Basename;",
          "16: use if $^O ne \"VMS\", 'File::Glob' => qw/glob/;",
          "19: setup(\"test_rehash\");",
          "",
          "[Removed Lines]",
          "17: use OpenSSL::Test qw/:DEFAULT bldtop_file/;",
          "",
          "[Added Lines]",
          "17: use OpenSSL::Test qw/:DEFAULT srctop_file/;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "58: }, create => 1, cleanup => 1;",
          "60: sub prepare {",
          "66:     my @destfiles = ();",
          "70:     }",
          "71:     foreach (@_) {",
          "72:         die \"Internal error, argument is not CODE\"",
          "73:             unless (ref($_) eq 'CODE');",
          "",
          "[Removed Lines]",
          "61:     my @sourcefiles =",
          "62:         sort map { glob(bldtop_file('certs', 'demo', \"*.$_\")) } ('pem',",
          "63:                                                                  'crt',",
          "64:                                                                  'cer',",
          "65:                                                                  'crl');",
          "67:     foreach (@sourcefiles) {",
          "68:         copy($_, curdir());",
          "69:         push @destfiles, catfile(curdir(), basename($_));",
          "",
          "[Added Lines]",
          "61:     my @pemsourcefiles = sort glob(srctop_file('test', \"*.pem\"));",
          "64:     die \"There are no source files\\n\" if scalar @pemsourcefiles == 0;",
          "66:     my $cnt = 0;",
          "67:     foreach (@pemsourcefiles) {",
          "68:         my $basename = basename($_, \".pem\");",
          "69:         my $writing = 0;",
          "71:         open PEM, $_ or die \"Can't read $_: $!\\n\";",
          "72:         while (my $line = <PEM>) {",
          "73:             if ($line =~ m{^-----BEGIN (?:CERTIFICATE|X509 CRL)-----}) {",
          "74:                 die \"New start in a PEM blob?\\n\" if $writing;",
          "75:                 $cnt++;",
          "76:                 my $destfile =",
          "77:                     catfile(curdir(),",
          "78:                             $basename . sprintf(\"-%02d\", $cnt) . \".pem\");",
          "79:                 push @destfiles, $destfile;",
          "80:                 open OUT, '>', $destfile",
          "81:                     or die \"Can't write $destfile\\n\";",
          "82:                 $writing = 1;",
          "83:             }",
          "84:             print OUT $line if $writing;",
          "85:             if ($line =~ m|^-----END |) {",
          "86:                 close OUT if $writing;",
          "87:                 $writing = 0;",
          "88:             }",
          "89:         }",
          "90:         die \"No end marker in $basename\\n\" if $writing;",
          "92:     die \"No test PEM files produced\\n\" if $cnt == 0;",
          "",
          "---------------"
        ]
      }
    }
  ]
}