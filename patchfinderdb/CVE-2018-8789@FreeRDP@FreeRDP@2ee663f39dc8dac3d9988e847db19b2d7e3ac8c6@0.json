{
  "cve_id": "CVE-2018-8789",
  "cve_desc": "FreeRDP prior to version 2.0.0-rc4 contains several Out-Of-Bounds Reads in the NTLM Authentication module that results in a Denial of Service (segfault).",
  "repo": "FreeRDP/FreeRDP",
  "patch_hash": "2ee663f39dc8dac3d9988e847db19b2d7e3ac8c6",
  "patch_info": {
    "commit_hash": "2ee663f39dc8dac3d9988e847db19b2d7e3ac8c6",
    "repo": "FreeRDP/FreeRDP",
    "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/2ee663f39dc8dac3d9988e847db19b2d7e3ac8c6",
    "files": [
      "winpr/libwinpr/sspi/NTLM/ntlm_message.c"
    ],
    "message": "Fixed CVE-2018-8789\n\nThanks to Eyal Itkin from Check Point Software Technologies.",
    "before_after_code_files": [
      "winpr/libwinpr/sspi/NTLM/ntlm_message.c||winpr/libwinpr/sspi/NTLM/ntlm_message.c"
    ]
  },
  "patch_diff": {
    "winpr/libwinpr/sspi/NTLM/ntlm_message.c||winpr/libwinpr/sspi/NTLM/ntlm_message.c": [
      "File: winpr/libwinpr/sspi/NTLM/ntlm_message.c -> winpr/libwinpr/sspi/NTLM/ntlm_message.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "74:  \"NTLMSSP_NEGOTIATE_UNICODE\"",
      "75: };",
      "78: {",
      "79:  int i;",
      "80:  const char* str;",
      "",
      "[Removed Lines]",
      "77: void ntlm_print_negotiate_flags(UINT32 flags)",
      "",
      "[Added Lines]",
      "77: static void ntlm_print_negotiate_flags(UINT32 flags)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "90:  }",
      "91: }",
      "94: {",
      "95:  if (Stream_GetRemainingLength(s) < 12)",
      "96:   return -1;",
      "",
      "[Removed Lines]",
      "93: int ntlm_read_message_header(wStream* s, NTLM_MESSAGE_HEADER* header)",
      "",
      "[Added Lines]",
      "93: static int ntlm_read_message_header(wStream* s, NTLM_MESSAGE_HEADER* header)",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "104:  return 1;",
      "105: }",
      "108: {",
      "109:  Stream_Write(s, header->Signature, sizeof(NTLM_SIGNATURE));",
      "110:  Stream_Write_UINT32(s, header->MessageType);",
      "111: }",
      "114: {",
      "115:  CopyMemory(header->Signature, NTLM_SIGNATURE, sizeof(NTLM_SIGNATURE));",
      "116:  header->MessageType = MessageType;",
      "117: }",
      "120: {",
      "121:  if (Stream_GetRemainingLength(s) < 8)",
      "122:   return -1;",
      "",
      "[Removed Lines]",
      "107: void ntlm_write_message_header(wStream* s, NTLM_MESSAGE_HEADER* header)",
      "113: void ntlm_populate_message_header(NTLM_MESSAGE_HEADER* header, UINT32 MessageType)",
      "119: int ntlm_read_message_fields(wStream* s, NTLM_MESSAGE_FIELDS* fields)",
      "",
      "[Added Lines]",
      "107: static void ntlm_write_message_header(wStream* s, NTLM_MESSAGE_HEADER* header)",
      "113: static void ntlm_populate_message_header(NTLM_MESSAGE_HEADER* header, UINT32 MessageType)",
      "119: static int ntlm_read_message_fields(wStream* s, NTLM_MESSAGE_FIELDS* fields)",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "127:  return 1;",
      "128: }",
      "131: {",
      "132:  if (fields->MaxLen < 1)",
      "133:   fields->MaxLen = fields->Len;",
      "",
      "[Removed Lines]",
      "130: void ntlm_write_message_fields(wStream* s, NTLM_MESSAGE_FIELDS* fields)",
      "",
      "[Added Lines]",
      "130: static void ntlm_write_message_fields(wStream* s, NTLM_MESSAGE_FIELDS* fields)",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "138: }",
      "141: {",
      "142:  if (fields->Len > 0)",
      "143:  {",
      "145:    return -1;",
      "147:   fields->Buffer = (PBYTE) malloc(fields->Len);",
      "",
      "[Removed Lines]",
      "140: int ntlm_read_message_fields_buffer(wStream* s, NTLM_MESSAGE_FIELDS* fields)",
      "144:   if ((fields->BufferOffset + fields->Len) > Stream_Length(s))",
      "",
      "[Added Lines]",
      "140: static int ntlm_read_message_fields_buffer(wStream* s, NTLM_MESSAGE_FIELDS* fields)",
      "144:   const UINT64 offset = (UINT64)fields->BufferOffset + (UINT64)fields->Len;",
      "146:   if (offset > Stream_Length(s))",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "156:  return 1;",
      "157: }",
      "160: {",
      "161:  if (fields->Len > 0)",
      "162:  {",
      "",
      "[Removed Lines]",
      "159: void ntlm_write_message_fields_buffer(wStream* s, NTLM_MESSAGE_FIELDS* fields)",
      "",
      "[Added Lines]",
      "161: static void ntlm_write_message_fields_buffer(wStream* s, NTLM_MESSAGE_FIELDS* fields)",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "165:  }",
      "166: }",
      "169: {",
      "170:  if (fields)",
      "171:  {",
      "",
      "[Removed Lines]",
      "168: void ntlm_free_message_fields_buffer(NTLM_MESSAGE_FIELDS* fields)",
      "",
      "[Added Lines]",
      "170: static void ntlm_free_message_fields_buffer(NTLM_MESSAGE_FIELDS* fields)",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "180:  }",
      "181: }",
      "184: {",
      "185:  WLog_DBG(TAG, \"%s (Len: %\"PRIu16\" MaxLen: %\"PRIu16\" BufferOffset: %\"PRIu32\")\",",
      "186:           name, fields->Len, fields->MaxLen, fields->BufferOffset);",
      "",
      "[Removed Lines]",
      "183: void ntlm_print_message_fields(NTLM_MESSAGE_FIELDS* fields, const char* name)",
      "",
      "[Added Lines]",
      "185: static void ntlm_print_message_fields(NTLM_MESSAGE_FIELDS* fields, const char* name)",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "d1112c279bd1a327e8e4d0b5f371458bf2579659",
      "candidate_info": {
        "commit_hash": "d1112c279bd1a327e8e4d0b5f371458bf2579659",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/d1112c279bd1a327e8e4d0b5f371458bf2579659",
        "files": [
          "include/freerdp/codec/nsc.h",
          "libfreerdp/codec/nsc.c",
          "libfreerdp/codec/nsc_encode.c",
          "libfreerdp/codec/nsc_encode.h",
          "libfreerdp/codec/nsc_sse2.c"
        ],
        "message": "Fixed CVE-2018-8788\n\nThanks to Eyal Itkin from Check Point Software Technologies.",
        "before_after_code_files": [
          "include/freerdp/codec/nsc.h||include/freerdp/codec/nsc.h",
          "libfreerdp/codec/nsc.c||libfreerdp/codec/nsc.c",
          "libfreerdp/codec/nsc_encode.c||libfreerdp/codec/nsc_encode.c",
          "libfreerdp/codec/nsc_encode.h||libfreerdp/codec/nsc_encode.h",
          "libfreerdp/codec/nsc_sse2.c||libfreerdp/codec/nsc_sse2.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/5031"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/freerdp/codec/nsc.h||include/freerdp/codec/nsc.h": [
          "File: include/freerdp/codec/nsc.h -> include/freerdp/codec/nsc.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "78:  const BYTE* palette;",
          "82:                 UINT32 rowstride);",
          "84:  NSC_CONTEXT_PRIV* priv;",
          "",
          "[Removed Lines]",
          "80:  void (*decode)(NSC_CONTEXT* context);",
          "81:  void (*encode)(NSC_CONTEXT* context, const BYTE* BitmapData,",
          "",
          "[Added Lines]",
          "80:  BOOL (*decode)(NSC_CONTEXT* context);",
          "81:  BOOL (*encode)(NSC_CONTEXT* context, const BYTE* BitmapData,",
          "",
          "---------------"
        ],
        "libfreerdp/codec/nsc.c||libfreerdp/codec/nsc.c": [
          "File: libfreerdp/codec/nsc.c -> libfreerdp/codec/nsc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "42: #define NSC_INIT_SIMD(_nsc_context) do { } while (0)",
          "43: #endif",
          "46: {",
          "47:  UINT16 x;",
          "48:  UINT16 y;",
          "53:  for (y = 0; y < context->height; y++)",
          "54:  {",
          "",
          "[Removed Lines]",
          "45: static void nsc_decode(NSC_CONTEXT* context)",
          "49:  UINT16 rw = ROUND_UP_TO(context->width, 8);",
          "51:  BYTE* bmpdata = context->BitmapData;",
          "",
          "[Added Lines]",
          "45: static BOOL nsc_decode(NSC_CONTEXT* context)",
          "49:  UINT16 rw;",
          "50:  BYTE shift;",
          "51:  BYTE* bmpdata;",
          "52:  size_t pos = 0;",
          "54:  if (!context)",
          "55:   return FALSE;",
          "57:  rw = ROUND_UP_TO(context->width, 8);",
          "59:  bmpdata = context->BitmapData;",
          "61:  if (!bmpdata)",
          "62:   return FALSE;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "80:    INT16 r_val = y_val + co_val - cg_val;",
          "81:    INT16 g_val = y_val + cg_val;",
          "82:    INT16 b_val = y_val - co_val - cg_val;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "95:    if (pos + 4 > context->BitmapDataLength)",
          "96:     return FALSE;",
          "98:    pos += 4;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "90:    aplane++;",
          "91:   }",
          "92:  }",
          "93: }",
          "96: {",
          "97:  UINT32 len;",
          "98:  UINT32 left;",
          "",
          "[Removed Lines]",
          "95: static void nsc_rle_decode(BYTE* in, BYTE* out, UINT32 originalSize)",
          "",
          "[Added Lines]",
          "110:  return TRUE;",
          "113: static BOOL nsc_rle_decode(BYTE* in, BYTE* out, UINT32 outSize, UINT32 originalSize)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "106:   if (left == 5)",
          "107:   {",
          "109:    left--;",
          "110:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "126:    if (outSize < 1)",
          "127:     return FALSE;",
          "129:    outSize--;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "124:     in += 4;",
          "125:    }",
          "127:    FillMemory(out, len, value);",
          "128:    out += len;",
          "129:    left -= len;",
          "130:   }",
          "131:   else",
          "132:   {",
          "134:    left--;",
          "135:   }",
          "136:  }",
          "139: }",
          "142: {",
          "143:  UINT16 i;",
          "144:  BYTE* rle;",
          "145:  UINT32 planeSize;",
          "146:  UINT32 originalSize;",
          "147:  rle = context->Planes;",
          "149:  for (i = 0; i < 4; i++)",
          "",
          "[Removed Lines]",
          "141: static void nsc_rle_decompress_data(NSC_CONTEXT* context)",
          "",
          "[Added Lines]",
          "149:    if (outSize < len)",
          "150:     return FALSE;",
          "152:    outSize -= len;",
          "159:    if (outSize < 1)",
          "160:     return FALSE;",
          "162:    outSize--;",
          "168:  if ((outSize < 4) || (left < 4))",
          "169:   return FALSE;",
          "171:  memcpy(out, in, 4);",
          "172:  return TRUE;",
          "175: static BOOL nsc_rle_decompress_data(NSC_CONTEXT* context)",
          "182:  if (!context)",
          "183:   return FALSE;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "152:   planeSize = context->PlaneByteCount[i];",
          "154:   if (planeSize == 0)",
          "155:    FillMemory(context->priv->PlaneBuffers[i], originalSize, 0xFF);",
          "156:   else if (planeSize < originalSize)",
          "158:   else",
          "159:    CopyMemory(context->priv->PlaneBuffers[i], rle, originalSize);",
          "161:   rle += planeSize;",
          "162:  }",
          "163: }",
          "165: static BOOL nsc_stream_initialize(NSC_CONTEXT* context, wStream* s)",
          "",
          "[Removed Lines]",
          "157:    nsc_rle_decode(rle, context->priv->PlaneBuffers[i], originalSize);",
          "",
          "[Added Lines]",
          "193:   {",
          "194:    if (context->priv->PlaneBuffersLength < originalSize)",
          "195:     return FALSE;",
          "198:   }",
          "200:   {",
          "201:    if (!nsc_rle_decode(rle, context->priv->PlaneBuffers[i], context->priv->PlaneBuffersLength,",
          "202:                        originalSize))",
          "203:     return FALSE;",
          "204:   }",
          "206:   {",
          "207:    if (context->priv->PlaneBuffersLength < originalSize)",
          "208:     return FALSE;",
          "211:   }",
          "216:  return TRUE;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "396:   return FALSE;",
          "407:  if (!freerdp_image_copy(pDstData, DstFormat, nDstStride, nXDst, nYDst,",
          "408:                          width, height, context->BitmapData,",
          "",
          "[Removed Lines]",
          "399:  PROFILER_ENTER(context->priv->prof_nsc_rle_decompress_data)",
          "400:  nsc_rle_decompress_data(context);",
          "401:  PROFILER_EXIT(context->priv->prof_nsc_rle_decompress_data)",
          "403:  PROFILER_ENTER(context->priv->prof_nsc_decode)",
          "404:  context->decode(context);",
          "405:  PROFILER_EXIT(context->priv->prof_nsc_decode)",
          "",
          "[Added Lines]",
          "453:  {",
          "454:   BOOL rc;",
          "455:   PROFILER_ENTER(context->priv->prof_nsc_rle_decompress_data)",
          "456:   rc = nsc_rle_decompress_data(context);",
          "457:   PROFILER_EXIT(context->priv->prof_nsc_rle_decompress_data)",
          "459:   if (!rc)",
          "460:    return FALSE;",
          "461:  }",
          "463:  {",
          "464:   BOOL rc;",
          "465:   PROFILER_ENTER(context->priv->prof_nsc_decode)",
          "466:   rc = context->decode(context);",
          "467:   PROFILER_EXIT(context->priv->prof_nsc_decode)",
          "469:   if (!rc)",
          "470:    return FALSE;",
          "471:  }",
          "",
          "---------------"
        ],
        "libfreerdp/codec/nsc_encode.c||libfreerdp/codec/nsc_encode.c": [
          "File: libfreerdp/codec/nsc_encode.c -> libfreerdp/codec/nsc_encode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "87:  return FALSE;",
          "88: }",
          "91:                                       UINT32 scanline)",
          "92: {",
          "93:  UINT16 x;",
          "",
          "[Removed Lines]",
          "90: static void nsc_encode_argb_to_aycocg(NSC_CONTEXT* context, const BYTE* data,",
          "",
          "[Added Lines]",
          "91: static BOOL nsc_encode_argb_to_aycocg(NSC_CONTEXT* context, const BYTE* data,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "104:  INT16 b_val;",
          "105:  BYTE a_val;",
          "106:  UINT32 tempWidth;",
          "107:  tempWidth = ROUND_UP_TO(context->width, 8);",
          "108:  rw = (context->ChromaSubsamplingLevel ? tempWidth : context->width);",
          "109:  ccl = context->ColorLossLevel;",
          "111:  for (y = 0; y < context->height; y++)",
          "112:  {",
          "113:   src = data + (context->height - 1 - y) * scanline;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "109:  if (!context || data || (scanline == 0))",
          "110:   return FALSE;",
          "116:  if (context->priv->PlaneBuffersLength < rw * scanline)",
          "117:   return FALSE;",
          "119:  if (rw < scanline * 2)",
          "120:   return FALSE;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "242:   CopyMemory(coplane, coplane - rw, rw);",
          "243:   CopyMemory(cgplane, cgplane - rw, rw);",
          "244:  }",
          "245: }",
          "248: {",
          "249:  UINT16 x;",
          "250:  UINT16 y;",
          "257:  UINT32 tempWidth;",
          "258:  UINT32 tempHeight;",
          "259:  tempWidth = ROUND_UP_TO(context->width, 8);",
          "260:  tempHeight = ROUND_UP_TO(context->height, 2);",
          "262:  for (y = 0; y < tempHeight >> 1; y++)",
          "263:  {",
          "271:   for (x = 0; x < tempWidth >> 1; x++)",
          "272:   {",
          "",
          "[Removed Lines]",
          "247: static void nsc_encode_subsampling(NSC_CONTEXT* context)",
          "251:  BYTE* co_dst;",
          "252:  BYTE* cg_dst;",
          "253:  INT8* co_src0;",
          "254:  INT8* co_src1;",
          "255:  INT8* cg_src0;",
          "256:  INT8* cg_src1;",
          "264:   co_dst = context->priv->PlaneBuffers[1] + y * (tempWidth >> 1);",
          "265:   cg_dst = context->priv->PlaneBuffers[2] + y * (tempWidth >> 1);",
          "266:   co_src0 = (INT8*) context->priv->PlaneBuffers[1] + (y << 1) * tempWidth;",
          "267:   co_src1 = co_src0 + tempWidth;",
          "268:   cg_src0 = (INT8*) context->priv->PlaneBuffers[2] + (y << 1) * tempWidth;",
          "269:   cg_src1 = cg_src0 + tempWidth;",
          "",
          "[Added Lines]",
          "257:  return TRUE;",
          "260: static BOOL nsc_encode_subsampling(NSC_CONTEXT* context)",
          "267:  if (!context)",
          "268:   return FALSE;",
          "273:  if (tempHeight == 0)",
          "274:   return FALSE;",
          "276:  if (tempWidth > context->priv->PlaneBuffersLength / tempHeight)",
          "277:   return FALSE;",
          "281:   BYTE* co_dst = context->priv->PlaneBuffers[1] + y * (tempWidth >> 1);",
          "282:   BYTE* cg_dst = context->priv->PlaneBuffers[2] + y * (tempWidth >> 1);",
          "283:   const INT8* co_src0 = (INT8*) context->priv->PlaneBuffers[1] + (y << 1) * tempWidth;",
          "284:   const INT8* co_src1 = co_src0 + tempWidth;",
          "285:   const INT8* cg_src0 = (INT8*) context->priv->PlaneBuffers[2] + (y << 1) * tempWidth;",
          "286:   const INT8* cg_src1 = cg_src0 + tempWidth;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "280:    cg_src1 += 2;",
          "281:   }",
          "282:  }",
          "283: }",
          "286: {",
          "289:  if (context->ChromaSubsamplingLevel)",
          "290:  {",
          "292:  }",
          "293: }",
          "296: {",
          "297:  UINT32 left;",
          "298:  UINT32 runlength = 1;",
          "",
          "[Removed Lines]",
          "285: void nsc_encode(NSC_CONTEXT* context, const BYTE* bmpdata, UINT32 rowstride)",
          "287:  nsc_encode_argb_to_aycocg(context, bmpdata, rowstride);",
          "291:   nsc_encode_subsampling(context);",
          "295: static UINT32 nsc_rle_encode(BYTE* in, BYTE* out, UINT32 originalSize)",
          "",
          "[Added Lines]",
          "301:  return TRUE;",
          "304: BOOL nsc_encode(NSC_CONTEXT* context, const BYTE* bmpdata, UINT32 rowstride)",
          "306:  if (!context || !bmpdata || (rowstride == 0))",
          "307:   return FALSE;",
          "309:  if (!nsc_encode_argb_to_aycocg(context, bmpdata, rowstride))",
          "310:   return FALSE;",
          "314:   if (!nsc_encode_subsampling(context))",
          "315:    return FALSE;",
          "318:  return TRUE;",
          "321: static UINT32 nsc_rle_encode(const BYTE* in, BYTE* out, UINT32 originalSize)",
          "",
          "---------------"
        ],
        "libfreerdp/codec/nsc_encode.h||libfreerdp/codec/nsc_encode.h": [
          "File: libfreerdp/codec/nsc_encode.h -> libfreerdp/codec/nsc_encode.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: #include <freerdp/api.h>",
          "28:                               UINT32 rowstride);",
          "",
          "[Removed Lines]",
          "27: FREERDP_LOCAL void nsc_encode(NSC_CONTEXT* context, const BYTE* bmpdata,",
          "",
          "[Added Lines]",
          "27: FREERDP_LOCAL BOOL nsc_encode(NSC_CONTEXT* context, const BYTE* bmpdata,",
          "",
          "---------------"
        ],
        "libfreerdp/codec/nsc_sse2.c||libfreerdp/codec/nsc_sse2.c": [
          "File: libfreerdp/codec/nsc_sse2.c -> libfreerdp/codec/nsc_sse2.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "385:  }",
          "386: }",
          "389:                             UINT32 scanline)",
          "390: {",
          "391:  nsc_encode_argb_to_aycocg_sse2(context, data, scanline);",
          "",
          "[Removed Lines]",
          "388: static void nsc_encode_sse2(NSC_CONTEXT* context, const BYTE* data,",
          "",
          "[Added Lines]",
          "388: static BOOL nsc_encode_sse2(NSC_CONTEXT* context, const BYTE* data,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "394:  {",
          "395:   nsc_encode_subsampling_sse2(context);",
          "396:  }",
          "397: }",
          "399: void nsc_init_sse2(NSC_CONTEXT* context)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "398:  return TRUE;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "602f4a2e14b41703b5f431de3154cd46a5750a2d",
      "candidate_info": {
        "commit_hash": "602f4a2e14b41703b5f431de3154cd46a5750a2d",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/602f4a2e14b41703b5f431de3154cd46a5750a2d",
        "files": [
          "include/freerdp/codec/zgfx.h",
          "libfreerdp/codec/zgfx.c"
        ],
        "message": "Fixed CVE-2018-8785\n\nThanks to Eyal Itkin from Check Point Software Technologies.",
        "before_after_code_files": [
          "include/freerdp/codec/zgfx.h||include/freerdp/codec/zgfx.h",
          "libfreerdp/codec/zgfx.c||libfreerdp/codec/zgfx.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/5031"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/freerdp/codec/zgfx.h||include/freerdp/codec/zgfx.h": [
          "File: include/freerdp/codec/zgfx.h -> include/freerdp/codec/zgfx.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "33: #define ZGFX_SEGMENTED_MAXSIZE   65535",
          "54: typedef struct _ZGFX_CONTEXT ZGFX_CONTEXT;",
          "56: #ifdef __cplusplus",
          "57: extern \"C\" {",
          "58: #endif",
          "64: FREERDP_API void zgfx_context_reset(ZGFX_CONTEXT* zgfx, BOOL flush);",
          "",
          "[Removed Lines]",
          "35: struct _ZGFX_CONTEXT",
          "36: {",
          "37:  BOOL Compressor;",
          "39:  const BYTE* pbInputCurrent;",
          "40:  const BYTE* pbInputEnd;",
          "42:  UINT32 bits;",
          "43:  UINT32 cBitsRemaining;",
          "44:  UINT32 BitsCurrent;",
          "45:  UINT32 cBitsCurrent;",
          "47:  BYTE OutputBuffer[65536];",
          "48:  UINT32 OutputCount;",
          "50:  BYTE HistoryBuffer[2500000];",
          "51:  UINT32 HistoryIndex;",
          "52:  UINT32 HistoryBufferSize;",
          "53: };",
          "60: FREERDP_API int zgfx_decompress(ZGFX_CONTEXT* zgfx, const BYTE* pSrcData, UINT32 SrcSize, BYTE** ppDstData, UINT32* pDstSize, UINT32 flags);",
          "61: FREERDP_API int zgfx_compress(ZGFX_CONTEXT* zgfx, const BYTE* pSrcData, UINT32 SrcSize, BYTE** ppDstData, UINT32* pDstSize, UINT32* pFlags);",
          "62: FREERDP_API int zgfx_compress_to_stream(ZGFX_CONTEXT* zgfx, wStream* sDst, const BYTE* pUncompressed, UINT32 uncompressedSize, UINT32* pFlags);",
          "",
          "[Added Lines]",
          "41: FREERDP_API int zgfx_decompress(ZGFX_CONTEXT* zgfx, const BYTE* pSrcData, UINT32 SrcSize,",
          "42:                                 BYTE** ppDstData, UINT32* pDstSize, UINT32 flags);",
          "43: FREERDP_API int zgfx_compress(ZGFX_CONTEXT* zgfx, const BYTE* pSrcData, UINT32 SrcSize,",
          "44:                               BYTE** ppDstData, UINT32* pDstSize, UINT32* pFlags);",
          "45: FREERDP_API int zgfx_compress_to_stream(ZGFX_CONTEXT* zgfx, wStream* sDst,",
          "46:                                         const BYTE* pUncompressed, UINT32 uncompressedSize, UINT32* pFlags);",
          "",
          "---------------"
        ],
        "libfreerdp/codec/zgfx.c||libfreerdp/codec/zgfx.c": [
          "File: libfreerdp/codec/zgfx.c -> libfreerdp/codec/zgfx.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "45: struct _ZGFX_TOKEN",
          "46: {",
          "51:  UINT32 valueBase;",
          "52: };",
          "53: typedef struct _ZGFX_TOKEN ZGFX_TOKEN;",
          "55: static const ZGFX_TOKEN ZGFX_TOKEN_TABLE[] =",
          "56: {",
          "",
          "[Removed Lines]",
          "47:  int prefixLength;",
          "48:  int prefixCode;",
          "49:  int valueBits;",
          "50:  int tokenType;",
          "",
          "[Added Lines]",
          "47:  UINT32 prefixLength;",
          "48:  UINT32 prefixCode;",
          "49:  UINT32 valueBits;",
          "50:  UINT32 tokenType;",
          "55: struct _ZGFX_CONTEXT",
          "56: {",
          "57:  BOOL Compressor;",
          "59:  const BYTE* pbInputCurrent;",
          "60:  const BYTE* pbInputEnd;",
          "62:  UINT32 bits;",
          "63:  UINT32 cBitsRemaining;",
          "64:  UINT32 BitsCurrent;",
          "65:  UINT32 cBitsCurrent;",
          "67:  BYTE OutputBuffer[65536];",
          "68:  UINT32 OutputCount;",
          "70:  BYTE HistoryBuffer[2500000];",
          "71:  UINT32 HistoryIndex;",
          "72:  UINT32 HistoryBufferSize;",
          "73: };",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "98:  { 0 }",
          "99: };",
          "111:  _zgfx->BitsCurrent &= ((1 << _zgfx->cBitsCurrent) - 1);",
          "113: static void zgfx_history_buffer_ring_write(ZGFX_CONTEXT* zgfx, const BYTE* src, size_t count)",
          "114: {",
          "",
          "[Removed Lines]",
          "101: #define zgfx_GetBits(_zgfx, _nbits) \\",
          "102:  while (_zgfx->cBitsCurrent < _nbits) { \\",
          "103:   _zgfx->BitsCurrent <<= 8; \\",
          "104:   if (_zgfx->pbInputCurrent < _zgfx->pbInputEnd) \\",
          "105:    _zgfx->BitsCurrent += *(_zgfx->pbInputCurrent)++; \\",
          "106:   _zgfx->cBitsCurrent += 8; \\",
          "107:  } \\",
          "108:  _zgfx->cBitsRemaining -= _nbits; \\",
          "109:  _zgfx->cBitsCurrent -= _nbits; \\",
          "110:  _zgfx->bits = _zgfx->BitsCurrent >> _zgfx->cBitsCurrent; \\",
          "",
          "[Added Lines]",
          "121: static INLINE BOOL zgfx_GetBits(ZGFX_CONTEXT* _zgfx, UINT32 _nbits)",
          "122: {",
          "123:  if (!_zgfx)",
          "124:   return FALSE;",
          "126:  while (_zgfx->cBitsCurrent < _nbits)",
          "127:  {",
          "128:   _zgfx->BitsCurrent <<= 8;",
          "130:   if (_zgfx->pbInputCurrent < _zgfx->pbInputEnd)",
          "131:    _zgfx->BitsCurrent += *(_zgfx->pbInputCurrent)++;",
          "133:   _zgfx->cBitsCurrent += 8;",
          "134:  }",
          "136:  _zgfx->cBitsRemaining -= _nbits;",
          "137:  _zgfx->cBitsCurrent -= _nbits;",
          "138:  _zgfx->bits = _zgfx->BitsCurrent >> _zgfx->cBitsCurrent;",
          "140: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "193: {",
          "194:  BYTE c;",
          "195:  BYTE flags;",
          "197:  int opIndex;",
          "198:  int haveBits;",
          "199:  int inPrefix;",
          "",
          "[Removed Lines]",
          "196:  int extra;",
          "",
          "[Added Lines]",
          "225:  UINT32 extra = 0;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "349:   UINT16 segmentCount;",
          "350:   UINT32 uncompressedSize;",
          "351:   BYTE* pConcatenated;",
          "353:   if (Stream_GetRemainingLength(stream) < 6)",
          "354:    goto fail;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "382:   size_t used = 0;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "377:    if (!zgfx_decompress_segment(zgfx, stream, segmentSize))",
          "378:     goto fail;",
          "380:    CopyMemory(pConcatenated, zgfx->OutputBuffer, zgfx->OutputCount);",
          "381:    pConcatenated += zgfx->OutputCount;",
          "382:   }",
          "383:  }",
          "384:  else",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "411:    if (zgfx->OutputCount > UINT32_MAX - used)",
          "412:     goto fail;",
          "414:    if (used + zgfx->OutputCount > uncompressedSize)",
          "415:     goto fail;",
          "419:    used += zgfx->OutputCount;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "445a5a42c500ceb80f8fa7f2c11f3682538033f3",
      "candidate_info": {
        "commit_hash": "445a5a42c500ceb80f8fa7f2c11f3682538033f3",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/445a5a42c500ceb80f8fa7f2c11f3682538033f3",
        "files": [
          "libfreerdp/core/update.c"
        ],
        "message": "Fixed CVE-2018-8786\n\nThanks to Eyal Itkin from Check Point Software Technologies.",
        "before_after_code_files": [
          "libfreerdp/core/update.c||libfreerdp/core/update.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/5031"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "libfreerdp/core/update.c||libfreerdp/core/update.c": [
          "File: libfreerdp/core/update.c -> libfreerdp/core/update.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "209:  if (bitmapUpdate->number > bitmapUpdate->count)",
          "210:  {",
          "217:   if (!newdata)",
          "218:    goto fail;",
          "",
          "[Removed Lines]",
          "211:   UINT16 count;",
          "212:   BITMAP_DATA* newdata;",
          "213:   count = bitmapUpdate->number * 2;",
          "214:   newdata = (BITMAP_DATA*) realloc(bitmapUpdate->rectangles,",
          "215:                                    sizeof(BITMAP_DATA) * count);",
          "",
          "[Added Lines]",
          "211:   UINT32 count = bitmapUpdate->number * 2;",
          "212:   BITMAP_DATA* newdata = (BITMAP_DATA*) realloc(bitmapUpdate->rectangles,",
          "213:                          sizeof(BITMAP_DATA) * count);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "09b9d4f1994a674c4ec85b4947aa656eda1aed8a",
      "candidate_info": {
        "commit_hash": "09b9d4f1994a674c4ec85b4947aa656eda1aed8a",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/09b9d4f1994a674c4ec85b4947aa656eda1aed8a",
        "files": [
          "libfreerdp/gdi/graphics.c"
        ],
        "message": "Fixed CVE-2018-8787\n\nThanks to Eyal Itkin from Check Point Software Technologies.",
        "before_after_code_files": [
          "libfreerdp/gdi/graphics.c||libfreerdp/gdi/graphics.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/5031"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "libfreerdp/gdi/graphics.c||libfreerdp/gdi/graphics.c": [
          "File: libfreerdp/gdi/graphics.c -> libfreerdp/gdi/graphics.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "141: {",
          "142:  UINT32 SrcSize = length;",
          "143:  rdpGdi* gdi = context->gdi;",
          "144:  bitmap->compressed = FALSE;",
          "145:  bitmap->format = gdi->dstFormat;",
          "147:  bitmap->data = (BYTE*) _aligned_malloc(bitmap->length, 16);",
          "149:  if (!bitmap->data)",
          "",
          "[Removed Lines]",
          "146:  bitmap->length = DstWidth * DstHeight * GetBytesPerPixel(bitmap->format);",
          "",
          "[Added Lines]",
          "144:  UINT32 size = DstWidth * DstHeight;",
          "148:  if ((GetBytesPerPixel(bitmap->format) == 0) ||",
          "149:      (DstWidth == 0) || (DstHeight == 0) || (DstWidth > UINT32_MAX / DstHeight) ||",
          "150:      (size > (UINT32_MAX / GetBytesPerPixel(bitmap->format))))",
          "151:   return FALSE;",
          "153:  size *= GetBytesPerPixel(bitmap->format);",
          "154:  bitmap->length = size;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "17c363a5162fd4dc77b1df54e48d7bd9bf6b3be7",
      "candidate_info": {
        "commit_hash": "17c363a5162fd4dc77b1df54e48d7bd9bf6b3be7",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/17c363a5162fd4dc77b1df54e48d7bd9bf6b3be7",
        "files": [
          "libfreerdp/codec/zgfx.c"
        ],
        "message": "Fixed CVE-2018-8784\n\nThanks to Eyal Itkin from Check Point Software Technologies.",
        "before_after_code_files": [
          "libfreerdp/codec/zgfx.c||libfreerdp/codec/zgfx.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/5031"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "libfreerdp/codec/zgfx.c||libfreerdp/codec/zgfx.c": [
          "File: libfreerdp/codec/zgfx.c -> libfreerdp/codec/zgfx.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "137:  _zgfx->cBitsCurrent -= _nbits;",
          "138:  _zgfx->bits = _zgfx->BitsCurrent >> _zgfx->cBitsCurrent;",
          "139:  _zgfx->BitsCurrent &= ((1 << _zgfx->cBitsCurrent) - 1);",
          "140: }",
          "142: static void zgfx_history_buffer_ring_write(ZGFX_CONTEXT* zgfx, const BYTE* src, size_t count)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "140:  return TRUE;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "229:  UINT32 count;",
          "230:  UINT32 distance;",
          "231:  BYTE* pbSegment;",
          "235:   return FALSE;",
          "",
          "[Removed Lines]",
          "232:  size_t cbSegment = segmentSize - 1;",
          "234:  if ((Stream_GetRemainingLength(stream) < segmentSize) || (segmentSize < 1))",
          "",
          "[Added Lines]",
          "233:  size_t cbSegment;",
          "235:  if (!zgfx || !stream)",
          "236:   return FALSE;",
          "238:  cbSegment = segmentSize - 1;",
          "240:  if ((Stream_GetRemainingLength(stream) < segmentSize) || (segmentSize < 1) ||",
          "241:      (segmentSize > UINT32_MAX))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "242:  if (!(flags & PACKET_COMPRESSED))",
          "243:  {",
          "244:   zgfx_history_buffer_ring_write(zgfx, pbSegment, cbSegment);",
          "245:   CopyMemory(zgfx->OutputBuffer, pbSegment, cbSegment);",
          "246:   zgfx->OutputCount = cbSegment;",
          "247:   return TRUE;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "253:   if (cbSegment > sizeof(zgfx->OutputBuffer))",
          "254:    return FALSE;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "280:      if (++zgfx->HistoryIndex == zgfx->HistoryBufferSize)",
          "281:       zgfx->HistoryIndex = 0;",
          "283:      zgfx->OutputBuffer[zgfx->OutputCount++] = c;",
          "284:     }",
          "285:     else",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "294:      if (zgfx->OutputCount >= sizeof(zgfx->OutputBuffer))",
          "295:       return FALSE;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "313:        count += zgfx->bits;",
          "314:       }",
          "316:       zgfx_history_buffer_ring_read(zgfx, distance, &(zgfx->OutputBuffer[zgfx->OutputCount]), count);",
          "317:       zgfx_history_buffer_ring_write(zgfx, &(zgfx->OutputBuffer[zgfx->OutputCount]), count);",
          "318:       zgfx->OutputCount += count;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "330:       if (count > sizeof(zgfx->OutputBuffer) - zgfx->OutputCount)",
          "331:        return FALSE;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "325:       zgfx->cBitsRemaining -= zgfx->cBitsCurrent;",
          "326:       zgfx->cBitsCurrent = 0;",
          "327:       zgfx->BitsCurrent = 0;",
          "328:       CopyMemory(&(zgfx->OutputBuffer[zgfx->OutputCount]), zgfx->pbInputCurrent, count);",
          "329:       zgfx_history_buffer_ring_write(zgfx, zgfx->pbInputCurrent, count);",
          "330:       zgfx->pbInputCurrent += count;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "346:       if (count > sizeof(zgfx->OutputBuffer) - zgfx->OutputCount)",
          "347:        return FALSE;",
          "",
          "---------------"
        ]
      }
    }
  ]
}