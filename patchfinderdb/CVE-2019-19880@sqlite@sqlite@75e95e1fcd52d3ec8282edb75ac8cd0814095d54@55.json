{
  "cve_id": "CVE-2019-19880",
  "cve_desc": "exprListAppendList in window.c in SQLite 3.30.1 allows attackers to trigger an invalid pointer dereference because constant integer values in ORDER BY clauses of window definitions are mishandled.",
  "repo": "sqlite/sqlite",
  "patch_hash": "75e95e1fcd52d3ec8282edb75ac8cd0814095d54",
  "patch_info": {
    "commit_hash": "75e95e1fcd52d3ec8282edb75ac8cd0814095d54",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/75e95e1fcd52d3ec8282edb75ac8cd0814095d54",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/window.c"
    ],
    "message": "When processing constant integer values in ORDER BY clauses of window definitions (see check-in [7e4809eadfe99ebf]) be sure to fully disable the constant value to avoid an invalid pointer dereference if the expression is ever duplicated. This fixes a crash report from Yongheng and Rui.\n\nFossilOrigin-Name: 1ca0bd982ab1183bbafce0d260e4dceda5eb766ed2e7793374a88d1ae0bdd2ca",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/window.c||src/window.c"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 8223e79f987feda5c8e51ec52cec6798cca16d070b10558939e2888ca1a25b8e",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/window.c||src/window.c": [
      "File: src/window.c -> src/window.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "895:     int nInit = pList ? pList->nExpr : 0;",
      "896:     for(i=0; i<pAppend->nExpr; i++){",
      "897:       Expr *pDup = sqlite3ExprDup(pParse->db, pAppend->a[i].pExpr, 0);",
      "898:       if( bIntToNull && pDup && pDup->op==TK_INTEGER ){",
      "899:         pDup->op = TK_NULL;",
      "900:         pDup->flags &= ~(EP_IntValue|EP_IsTrue|EP_IsFalse);",
      "901:       }",
      "902:       pList = sqlite3ExprListAppend(pParse, pList, pDup);",
      "903:       if( pList ) pList->a[nInit+i].sortFlags = pAppend->a[i].sortFlags;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "898:       assert( pDup==0 || !ExprHasProperty(pDup, EP_MemToken) );",
      "902:         pDup->u.zToken = 0;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a7d6db6ac05cb7d51c19494feba51a65c6a21cd2",
      "candidate_info": {
        "commit_hash": "a7d6db6ac05cb7d51c19494feba51a65c6a21cd2",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/a7d6db6ac05cb7d51c19494feba51a65c6a21cd2",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "src/resolve.c",
          "src/sqliteInt.h",
          "test/func3.test"
        ],
        "message": "The affinity of the unlikely() function and its cousins should be \"none\". Ticket [0c620df60bffd9ef]\n\nFossilOrigin-Name: 614ecb0af47038848e8ba2aed6b92db6f33ddc4aea6361795dbde440380f5a35",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "src/resolve.c||src/resolve.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "test/func3.test||test/func3.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 0f748fe58bbbb7ce3f30303da25ec811b2bbce249549aa9c7927979ac5b38013",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "45: char sqlite3ExprAffinity(Expr *pExpr){",
          "46:   int op;",
          "47:   if( pExpr->flags & EP_Generic ) return 0;",
          "49:   op = pExpr->op;",
          "50:   if( op==TK_SELECT ){",
          "51:     assert( pExpr->flags&EP_xIsSelect );",
          "",
          "[Removed Lines]",
          "48:   pExpr = sqlite3ExprSkipCollate(pExpr);",
          "",
          "[Added Lines]",
          "48:   while( ExprHasProperty(pExpr, EP_Skip) ){",
          "49:     assert( pExpr->op==TK_COLLATE );",
          "50:     pExpr = pExpr->pLeft;",
          "51:     assert( pExpr!=0 );",
          "52:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "108: Expr *sqlite3ExprSkipCollate(Expr *pExpr){",
          "110:     if( ExprHasProperty(pExpr, EP_Unlikely) ){",
          "111:       assert( !ExprHasProperty(pExpr, EP_xIsSelect) );",
          "112:       assert( pExpr->x.pList->nExpr>0 );",
          "",
          "[Removed Lines]",
          "109:   while( pExpr && ExprHasProperty(pExpr, EP_Skip) ){",
          "",
          "[Added Lines]",
          "113:   while( pExpr && ExprHasProperty(pExpr, EP_Skip|EP_Unlikely) ){",
          "",
          "---------------"
        ],
        "src/resolve.c||src/resolve.c": [
          "File: src/resolve.c -> src/resolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "747:       }else{",
          "748:         is_agg = pDef->xFinalize!=0;",
          "749:         if( pDef->funcFlags & SQLITE_FUNC_UNLIKELY ){",
          "751:           if( n==2 ){",
          "752:             pExpr->iTable = exprProbability(pList->a[1].pExpr);",
          "753:             if( pExpr->iTable<0 ){",
          "",
          "[Removed Lines]",
          "750:           ExprSetProperty(pExpr, EP_Unlikely|EP_Skip);",
          "",
          "[Added Lines]",
          "750:           ExprSetProperty(pExpr, EP_Unlikely);",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h"
        ],
        "test/func3.test||test/func3.test": [
          "File: test/func3.test -> test/func3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "153:   db eval {EXPLAIN SELECT unlikely(min(1.0+'2.0',4*11))}",
          "154: } [db eval {EXPLAIN SELECT min(1.0+'2.0',4*11)}]",
          "157: # EVIDENCE-OF: R-23735-03107 The likely(X) function returns the argument",
          "158: # X unchanged.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "156: # Unlikely() does not preserve the affinity of X.",
          "157: # ticket https://www.sqlite.org/src/tktview/0c620df60b",
          "158: #",
          "159: do_execsql_test func3-5.40 {",
          "160:   SELECT likely(CAST(1 AS INT))=='1';",
          "161: } 0",
          "162: do_execsql_test func3-5.41 {",
          "163:   SELECT unlikely(CAST(1 AS INT))=='1';",
          "164: } 0",
          "165: do_execsql_test func3-5.41 {",
          "166:   SELECT likelihood(CAST(1 AS INT),0.5)=='1';",
          "167: } 0",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c5b35ae567e0f68d20bb102f781d23c42251d042",
      "candidate_info": {
        "commit_hash": "c5b35ae567e0f68d20bb102f781d23c42251d042",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/c5b35ae567e0f68d20bb102f781d23c42251d042",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/window.c"
        ],
        "message": "Simplifications to the window-function code.\n\nFossilOrigin-Name: 489a1eb3aa2f1225b97b50a5f8688cf1a4ab0371973da1badc29616d70386c03",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/window.c||src/window.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/window.c||src/window.c"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/window.c||src/window.c"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 040e196a8be3ca41b9365310ab88c2a3cc84b918a6511c77a6d95d4b4e0da3ed",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1550:     assert( bInverse==0 || pWin->eStart!=TK_UNBOUNDED );",
          "1552:     for(i=0; i<nArg; i++){",
          "1553:       if( i!=1 || pFunc->zName!=nth_valueName ){",
          "1554:         sqlite3VdbeAddOp3(v, OP_Column, csr, pWin->iArgCol+i, reg+i);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1554:     assert( pWin==pMWin || sqlite3WindowCompare(pParse,pWin,pMWin,0)==0 );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1608:        && pWin->eStart==pWin->eEnd",
          "1609:        && pWin->eStart==TK_PRECEDING",
          "1610:       ){",
          "1612:         int regPeer = sqlite3GetTempReg(pParse);",
          "1613:         int regString = sqlite3GetTempReg(pParse);",
          "1614:         int lbl = sqlite3VdbeMakeLabel(pParse);",
          "1615:         VdbeModuleComment((v, \"windowAggStep \\\"peer is numeric?\\\" test\"));",
          "1619:         windowReadPeerValues(p, csr, regPeer);",
          "1620:         sqlite3VdbeAddOp2(v, OP_IsNull, regPeer, lbl);",
          "1621:         sqlite3VdbeAddOp4(v, OP_String8, 0, regString, 0, \"\", P4_STATIC);",
          "",
          "[Removed Lines]",
          "1611:         int op = ((pMWin->eStart==TK_FOLLOWING) ? OP_Ge : OP_Le);",
          "1616:         sqlite3VdbeAddOp3(v, op, p->regStart, lbl, p->regEnd);",
          "",
          "[Added Lines]",
          "1620:         sqlite3VdbeAddOp3(v, OP_Le, p->regStart, lbl, p->regEnd);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cc5979dbd384049c1efef847e5cc22082191024b",
      "candidate_info": {
        "commit_hash": "cc5979dbd384049c1efef847e5cc22082191024b",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/cc5979dbd384049c1efef847e5cc22082191024b",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/main.c",
          "src/shell.c.in",
          "src/sqlite.h.in",
          "src/sqliteInt.h",
          "src/vtab.c",
          "test/intarray.test",
          "test/vtab1.test"
        ],
        "message": "Add the ability to unregister a virtual table module by invoking sqlite3_create_module() with a NULL sqlite3_module pointer.\n\nFossilOrigin-Name: 31e34fa3390196cdc3178bf120224b08df5ec58fa2c77079ede6e9461a430dad",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/main.c||src/main.c",
          "src/shell.c.in||src/shell.c.in",
          "src/sqlite.h.in||src/sqlite.h.in",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/vtab.c||src/vtab.c",
          "test/intarray.test||test/intarray.test",
          "test/vtab1.test||test/vtab1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: f17e72291f197a92b3e15e054271b997d45211a5a31ca4ea6c7fbb33026d5f1f",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/main.c||src/main.c": [
          "File: src/main.c -> src/main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1236: #ifndef SQLITE_OMIT_VIRTUALTABLE",
          "1237:   for(i=sqliteHashFirst(&db->aModule); i; i=sqliteHashNext(i)){",
          "1238:     Module *pMod = (Module *)sqliteHashData(i);",
          "1242:     sqlite3VtabEponymousTableClear(db, pMod);",
          "1244:   }",
          "1245:   sqlite3HashClear(&db->aModule);",
          "1246: #endif",
          "",
          "[Removed Lines]",
          "1239:     if( pMod->xDestroy ){",
          "1240:       pMod->xDestroy(pMod->pAux);",
          "1241:     }",
          "1243:     sqlite3DbFree(db, pMod);",
          "",
          "[Added Lines]",
          "1240:     sqlite3VtabModuleUnref(db, pMod);",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "3649:   \"    --row                   Trace each row (SQLITE_TRACE_ROW)\",",
          "3650:   \"    --close                 Trace connection close (SQLITE_TRACE_CLOSE)\",",
          "3652:   \".vfsinfo ?AUX?           Information about the top-level VFS\",",
          "3653:   \".vfslist                 List all available VFSes\",",
          "3654:   \".vfsname ?AUX?           Print the name of the VFS stack\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3652: #ifdef SQLITE_DEBUG",
          "3653:   \".unmodule NAME ...       Unregister virtual table modules\",",
          "3654: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "9401:   }else",
          "9404: #if SQLITE_USER_AUTHENTICATION",
          "9405:   if( c=='u' && strncmp(azArg[0], \"user\", n)==0 ){",
          "9406:     if( nArg<2 ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9407: #ifdef SQLITE_DEBUG",
          "9408:   if( c=='u' && strncmp(azArg[0], \"unmodule\", n)==0 ){",
          "9409:     int ii;",
          "9410:     if( nArg<2 ){",
          "9411:       raw_printf(stderr, \"Usage: .unmodule NAME ...\\n\");",
          "9412:       rc = 1;",
          "9413:       goto meta_command_exit;",
          "9414:     }",
          "9415:     open_db(p, 0);",
          "9416:     for(ii=1; ii<nArg; ii++){",
          "9417:       sqlite3_create_module(p->db, azArg[ii], 0, 0);",
          "9418:     }",
          "9419:   }else",
          "9420: #endif",
          "",
          "---------------"
        ],
        "src/sqlite.h.in||src/sqlite.h.in": [
          "File: src/sqlite.h.in -> src/sqlite.h.in"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "4438: #  define sqlite3VtabInSync(db) 0",
          "4439: #  define sqlite3VtabLock(X)",
          "4440: #  define sqlite3VtabUnlock(X)",
          "4441: #  define sqlite3VtabUnlockList(X)",
          "4442: #  define sqlite3VtabSavepoint(X, Y, Z) SQLITE_OK",
          "4443: #  define sqlite3GetVTable(X,Y)  ((VTable*)0)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4442: #  define sqlite3VtabModuleUnref(D,X)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4449:    int sqlite3VtabCommit(sqlite3 *db);",
          "4450:    void sqlite3VtabLock(VTable *);",
          "4451:    void sqlite3VtabUnlock(VTable *);",
          "4452:    void sqlite3VtabUnlockList(sqlite3*);",
          "4453:    int sqlite3VtabSavepoint(sqlite3 *, int, int);",
          "4454:    void sqlite3VtabImportErrmsg(Vdbe*, sqlite3_vtab*);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4454:    void sqlite3VtabModuleUnref(sqlite3*,Module*);",
          "",
          "---------------"
        ],
        "src/vtab.c||src/vtab.c": [
          "File: src/vtab.c -> src/vtab.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "42: ){",
          "43:   Module *pMod;",
          "48:   }else{",
          "51:     memcpy(zCopy, zName, nName+1);",
          "52:     pMod->zName = zCopy;",
          "53:     pMod->pModule = pModule;",
          "54:     pMod->pAux = pAux;",
          "55:     pMod->xDestroy = xDestroy;",
          "56:     pMod->pEpoTab = 0;",
          "60:       sqlite3OomFault(db);",
          "61:       sqlite3DbFree(db, pDel);",
          "62:       pMod = 0;",
          "63:     }",
          "64:   }",
          "65:   return pMod;",
          "",
          "[Removed Lines]",
          "44:   int nName = sqlite3Strlen30(zName);",
          "45:   pMod = (Module *)sqlite3Malloc(sizeof(Module) + nName + 1);",
          "46:   if( pMod==0 ){",
          "47:     sqlite3OomFault(db);",
          "49:     Module *pDel;",
          "50:     char *zCopy = (char *)(&pMod[1]);",
          "57:     pDel = (Module *)sqlite3HashInsert(&db->aModule,zCopy,(void*)pMod);",
          "58:     assert( pDel==0 || pDel==pMod );",
          "59:     if( pDel ){",
          "",
          "[Added Lines]",
          "47:   Module *pDel;",
          "48:   char *zCopy;",
          "49:   if( pModule==0 ){",
          "50:     zCopy = (char*)zName;",
          "51:     pMod = 0;",
          "53:     int nName = sqlite3Strlen30(zName);",
          "54:     pMod = (Module *)sqlite3Malloc(sizeof(Module) + nName + 1);",
          "55:     if( pMod==0 ){",
          "56:       sqlite3OomFault(db);",
          "57:       return 0;",
          "58:     }",
          "59:     zCopy = (char *)(&pMod[1]);",
          "66:     pMod->nRefModule = 1;",
          "67:   }",
          "68:   pDel = (Module *)sqlite3HashInsert(&db->aModule,zCopy,(void*)pMod);",
          "69:   if( pDel ){",
          "70:     if( pDel==pMod ){",
          "74:     }else{",
          "75:       sqlite3VtabModuleUnref(db, pDel);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "80:   int rc = SQLITE_OK;",
          "82:   sqlite3_mutex_enter(db->mutex);",
          "88:   rc = sqlite3ApiExit(db, rc);",
          "89:   if( rc!=SQLITE_OK && xDestroy ) xDestroy(pAux);",
          "90:   sqlite3_mutex_leave(db->mutex);",
          "",
          "[Removed Lines]",
          "83:   if( sqlite3HashFind(&db->aModule, zName) ){",
          "84:     rc = SQLITE_MISUSE_BKPT;",
          "85:   }else{",
          "86:     (void)sqlite3VtabCreateModule(db, zName, pModule, pAux, xDestroy);",
          "87:   }",
          "",
          "[Added Lines]",
          "96:   (void)sqlite3VtabCreateModule(db, zName, pModule, pAux, xDestroy);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "123:   return createModule(db, zName, pModule, pAux, xDestroy);",
          "124: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "139: void sqlite3VtabModuleUnref(sqlite3 *db, Module *pMod){",
          "140:   assert( pMod->nRefModule>0 );",
          "141:   pMod->nRefModule--;",
          "142:   if( pMod->nRefModule==0 ){",
          "143:     if( pMod->xDestroy ){",
          "144:       pMod->xDestroy(pMod->pAux);",
          "145:     }",
          "146:     assert( pMod->pEpoTab==0 );",
          "147:     sqlite3DbFree(db, pMod);",
          "148:   }",
          "149: }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "162:   pVTab->nRef--;",
          "163:   if( pVTab->nRef==0 ){",
          "164:     sqlite3_vtab *p = pVTab->pVtab;",
          "165:     if( p ){",
          "166:       p->pModule->xDisconnect(p);",
          "167:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "190:     sqlite3VtabModuleUnref(pVTab->db, pVTab->pMod);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "567:     memset(pVTable->pVtab, 0, sizeof(pVTable->pVtab[0]));",
          "568:     pVTable->pVtab->pModule = pMod->pModule;",
          "569:     pVTable->nRef = 1;",
          "570:     if( sCtx.bDeclared==0 ){",
          "571:       const char *zFormat = \"vtable constructor did not declare schema: %s\";",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "595:     pMod->nRefModule++;",
          "",
          "---------------"
        ],
        "test/intarray.test||test/intarray.test": [
          "File: test/intarray.test -> test/intarray.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "47:   }",
          "48: } {table ia1 table ia2 table ia3 table ia4}",
          "51: do_test intarray-1.1b {",
          "52:   db eval {DROP TABLE ia1}",
          "57: do_test intarray-1.2 {",
          "58:   db eval {",
          "",
          "[Removed Lines]",
          "50: # Verify the inability to DROP and recreate an intarray virtual table.",
          "53:   set rc [catch {sqlite3_intarray_create db ia1} msg]",
          "54:   lappend rc $msg",
          "55: } {1 SQLITE_MISUSE}",
          "",
          "[Added Lines]",
          "50: # Verify the ability to DROP and recreate an intarray virtual table.",
          "53:   set rc [catch {sqlite3_intarray_create db ia1} ia1]",
          "54:   lappend rc $ia1",
          "55: } {/0 [0-9A-Z]+/}",
          "",
          "---------------"
        ],
        "test/vtab1.test||test/vtab1.test": [
          "File: test/vtab1.test -> test/vtab1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1352: do_execsql_test 18.2.x {  PRAGMA case_sensitive_like = OFF }",
          "1354: #-------------------------------------------------------------------------",
          "1356: #",
          "1357: do_test 19.1 {",
          "1358:   sqlite3 db2 test.db",
          "",
          "[Removed Lines]",
          "1355: # Test that an existing module may not be overridden.",
          "",
          "[Added Lines]",
          "1355: # Test that it is ok to override and existing module.",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1360: } SQLITE_OK",
          "1361: do_test 19.2 {",
          "1362:   register_echo_module [sqlite3_connection_pointer db2]",
          "1364: do_test 19.3 {",
          "1365:   db2 close",
          "1366: } {}",
          "",
          "[Removed Lines]",
          "1363: } SQLITE_MISUSE",
          "",
          "[Added Lines]",
          "1363: } SQLITE_OK",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "68feae52a9c5052b10e80a933b6c8998b3bb6715",
      "candidate_info": {
        "commit_hash": "68feae52a9c5052b10e80a933b6c8998b3bb6715",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/68feae52a9c5052b10e80a933b6c8998b3bb6715",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in"
        ],
        "message": "Improved error handling for the \".open --hexdb\" command of the CLI.\n\nFossilOrigin-Name: 4fa831d5cd5861f6a0a8f08a738b2d4d371fb2a788178ce86482c5bba761f9de",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: ebe4845cd0ffb96b30be3c69eb399d58e93149886bc2fa60a7ebd7b4fbe447a4",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "3884:   if( fgets(zLine, sizeof(zLine), in)==0 ) goto readHexDb_error;",
          "3885:   rc = sscanf(zLine, \"| size %d pagesize %d\", &n, &pgsz);",
          "3886:   if( rc!=2 ) goto readHexDb_error;",
          "3889:   if( a==0 ){",
          "3890:     utf8_printf(stderr, \"Out of memory!\\n\");",
          "3891:     goto readHexDb_error;",
          "",
          "[Removed Lines]",
          "3887:   if( n<=0 ) goto readHexDb_error;",
          "3888:   a = sqlite3_malloc( n );",
          "",
          "[Added Lines]",
          "3887:   if( n<0 ) goto readHexDb_error;",
          "3888:   a = sqlite3_malloc( n ? n : 1 );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3924:   return a;",
          "3926: readHexDb_error:",
          "3928:     fclose(in);",
          "3929:   }else{",
          "3930:     while( fgets(zLine, sizeof(zLine), p->in)!=0 ){",
          "",
          "[Removed Lines]",
          "3927:   if( in!=stdin ){",
          "",
          "[Added Lines]",
          "3927:   if( in!=p->in ){",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4166:       }else{",
          "4167:         aData = readHexDb(p, &nData);",
          "4168:         if( aData==0 ){",
          "4170:           return;",
          "4171:         }",
          "4172:       }",
          "",
          "[Removed Lines]",
          "4169:           utf8_printf(stderr, \"Error in hexdb input\\n\");",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ee37f8b0a38521c892afc7ddb2810b70ba9c0283",
      "candidate_info": {
        "commit_hash": "ee37f8b0a38521c892afc7ddb2810b70ba9c0283",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/ee37f8b0a38521c892afc7ddb2810b70ba9c0283",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in"
        ],
        "message": "Fix the built-in edit() SQL function in the CLI so that it works with zero-length blobs.\n\nFossilOrigin-Name: e32490128684cfeeb8213baecc78a7942b8fb63d00e375edd965bf236faeed18",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 44578865fa7baf9760e355691ca9ce753295aaba7a4ee0bba29d4f85d9335bab",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "1289:   fseek(f, 0, SEEK_END);",
          "1290:   sz = ftell(f);",
          "1291:   rewind(f);",
          "1293:   if( p==0 ){",
          "1294:     sqlite3_result_error_nomem(context);",
          "1295:     goto edit_func_end;",
          "",
          "[Removed Lines]",
          "1292:   p = sqlite3_malloc64( sz+(bBin==0) );",
          "",
          "[Added Lines]",
          "1292:   p = sqlite3_malloc64( sz+1 );",
          "",
          "---------------"
        ]
      }
    }
  ]
}