{
  "cve_id": "CVE-2014-1832",
  "cve_desc": "Phusion Passenger 4.0.37 allows local users to write to certain files and directories via a symlink attack on (1) control_process.pid or a (2) generation-* file.  NOTE: this vulnerability exists because of an incomplete fix for CVE-2014-1831.",
  "repo": "phusion/passenger",
  "patch_hash": "94428057c602da3d6d34ef75c78091066ecac5c0",
  "patch_info": {
    "commit_hash": "94428057c602da3d6d34ef75c78091066ecac5c0",
    "repo": "phusion/passenger",
    "commit_url": "https://github.com/phusion/passenger/commit/94428057c602da3d6d34ef75c78091066ecac5c0",
    "files": [
      "NEWS",
      "ext/common/ServerInstanceDir.h",
      "ext/common/Utils.cpp",
      "ext/common/Utils.h"
    ],
    "message": "Fix a symlink-related security vulnerability.\n\nThe fix in commit 34b10878 and contained a small attack time window in\nbetween two filesystem operations. This has been fixed.",
    "before_after_code_files": [
      "ext/common/ServerInstanceDir.h||ext/common/ServerInstanceDir.h",
      "ext/common/Utils.cpp||ext/common/Utils.cpp",
      "ext/common/Utils.h||ext/common/Utils.h"
    ]
  },
  "patch_diff": {
    "ext/common/ServerInstanceDir.h||ext/common/ServerInstanceDir.h": [
      "File: ext/common/ServerInstanceDir.h -> ext/common/ServerInstanceDir.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "194:  void initialize(const string &path, bool owner) {",
      "195:   TRACE_POINT();",
      "196:   this->path  = path;",
      "197:   this->owner = owner;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "196:   struct stat buf;",
      "197:   int ret;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "215:   if (owner) {",
      "218:     createDirectory(path);",
      "225:    }",
      "227:    throw RuntimeException(\"Server instance directory '\" + path +",
      "228:     \"' does not exist\");",
      "229:   }",
      "",
      "[Removed Lines]",
      "216:    switch (getFileTypeNoFollowSymlinks(path)) {",
      "217:    case FT_NONEXISTANT:",
      "219:     break;",
      "220:    case FT_DIRECTORY:",
      "221:     verifyDirectoryPermissions(path);",
      "222:     break;",
      "223:    default:",
      "224:     throw RuntimeException(\"'\" + path + \"' already exists, and is not a directory\");",
      "226:   } else if (getFileType(path) != FT_DIRECTORY) {",
      "",
      "[Added Lines]",
      "219:   do {",
      "220:    ret = lstat(path.c_str(), &buf);",
      "221:   } while (ret == -1 && errno == EAGAIN);",
      "223:    if (ret == 0) {",
      "224:     if (S_ISDIR(buf.st_mode)) {",
      "225:      verifyDirectoryPermissions(path, buf);",
      "226:     } else {",
      "227:      throw RuntimeException(\"'\" + path + \"' already exists, and is not a directory\");",
      "228:     }",
      "229:    } else if (errno == ENOENT) {",
      "231:    } else {",
      "232:     int e = errno;",
      "233:     throw FileSystemException(\"Cannot lstat '\" + path + \"'\",",
      "234:      e, path);",
      "236:   } else if (!S_ISDIR(buf.st_mode)) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "263:   TRACE_POINT();",
      "270:    throw RuntimeException(\"Tried to reuse existing server instance directory \" +",
      "271:     path + \", but it has wrong permissions\");",
      "272:   } else if (buf.st_uid != geteuid() || buf.st_gid != getegid()) {",
      "",
      "[Removed Lines]",
      "262:  void verifyDirectoryPermissions(const string &path) {",
      "264:   struct stat buf;",
      "266:   if (stat(path.c_str(), &buf) == -1) {",
      "267:    int e = errno;",
      "268:    throw FileSystemException(\"Cannot stat() \" + path, e, path);",
      "269:   } else if (buf.st_mode != (S_IFDIR | parseModeString(\"u=rwx,g=rx,o=rx\"))) {",
      "",
      "[Added Lines]",
      "272:  void verifyDirectoryPermissions(const string &path, struct stat &buf) {",
      "275:   if (buf.st_mode != (S_IFDIR | parseModeString(\"u=rwx,g=rx,o=rx\"))) {",
      "",
      "---------------"
    ],
    "ext/common/Utils.cpp||ext/common/Utils.cpp": [
      "File: ext/common/Utils.cpp -> ext/common/Utils.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "143:  }",
      "144: }",
      "175: void",
      "176: createFile(const string &filename, const StaticString &contents, mode_t permissions, uid_t owner,",
      "177:  gid_t group, bool overwrite)",
      "",
      "[Removed Lines]",
      "146: FileType",
      "147: getFileTypeNoFollowSymlinks(const StaticString &filename) {",
      "148:  struct stat buf;",
      "149:  int ret;",
      "151:  ret = lstat(filename.c_str(), &buf);",
      "152:  if (ret == 0) {",
      "153:   if (S_ISREG(buf.st_mode)) {",
      "154:    return FT_REGULAR;",
      "155:   } else if (S_ISDIR(buf.st_mode)) {",
      "156:    return FT_DIRECTORY;",
      "157:   } else if (S_ISLNK(buf.st_mode)) {",
      "158:    return FT_SYMLINK;",
      "159:   } else {",
      "160:    return FT_OTHER;",
      "161:   }",
      "162:  } else {",
      "163:   if (errno == ENOENT) {",
      "164:    return FT_NONEXISTANT;",
      "165:   } else {",
      "166:    int e = errno;",
      "167:    string message(\"Cannot lstat '\");",
      "168:    message.append(filename);",
      "169:    message.append(\"'\");",
      "170:    throw FileSystemException(message, e, filename);",
      "171:   }",
      "172:  }",
      "173: }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "ext/common/Utils.h||ext/common/Utils.h": [
      "File: ext/common/Utils.h -> ext/common/Utils.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "65:  FT_REGULAR,",
      "67:  FT_DIRECTORY,",
      "71:  FT_OTHER",
      "72: } FileType;",
      "",
      "[Removed Lines]",
      "69:  FT_SYMLINK,",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "124: FileType getFileType(const StaticString &filename, CachedFileStat *cstat = 0,",
      "125:                      unsigned int throttleRate = 0);",
      "",
      "[Removed Lines]",
      "129: FileType getFileTypeNoFollowSymlinks(const StaticString &filename);",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "d0b56c697c0e9e625db46768538250c66da33e66",
      "candidate_info": {
        "commit_hash": "d0b56c697c0e9e625db46768538250c66da33e66",
        "repo": "phusion/passenger",
        "commit_url": "https://github.com/phusion/passenger/commit/d0b56c697c0e9e625db46768538250c66da33e66",
        "files": [
          "ext/apache2/Utils.cpp",
          "ext/apache2/Utils.h"
        ],
        "message": "Add new function 'getFileType'.",
        "before_after_code_files": [
          "ext/apache2/Utils.cpp||ext/apache2/Utils.cpp",
          "ext/apache2/Utils.h||ext/apache2/Utils.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ext/apache2/Utils.cpp||ext/apache2/Utils.cpp": [
          "File: ext/apache2/Utils.cpp -> ext/apache2/Utils.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: #include <cassert>",
          "23: #include \"Utils.h\"",
          "25: #define SPAWN_SERVER_SCRIPT_NAME \"passenger-spawn-server\"",
          "",
          "[Removed Lines]",
          "22: #include <unistd.h>",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "51: bool",
          "52: fileExists(const char *filename) {",
          "53:  struct stat buf;",
          "55:  if (stat(filename, &buf) == 0) {",
          "57:  } else {",
          "58:   if (errno == ENOENT) {",
          "60:   } else {",
          "61:    int e = errno;",
          "62:    string message(\"Cannot stat '\");",
          "",
          "[Removed Lines]",
          "56:   return S_ISREG(buf.st_mode);",
          "59:    return false;",
          "",
          "[Added Lines]",
          "52:  return getFileType(filename) == FT_REGULAR;",
          "53: }",
          "55: FileType",
          "56: getFileType(const char *filename) {",
          "60:   if (S_ISREG(buf.st_mode)) {",
          "61:    return FT_REGULAR;",
          "62:   } else if (S_ISDIR(buf.st_mode)) {",
          "63:    return FT_DIRECTORY;",
          "64:   } else {",
          "65:    return FT_OTHER;",
          "66:   }",
          "69:    return FT_NONEXISTANT;",
          "",
          "---------------"
        ],
        "ext/apache2/Utils.h||ext/apache2/Utils.h": [
          "File: ext/apache2/Utils.h -> ext/apache2/Utils.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: #include <cstdlib>",
          "33: #include <cstring>",
          "34: #include <errno.h>",
          "35: #include \"Exceptions.h\"",
          "37: namespace Passenger {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "35: #include <unistd.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "39: using namespace std;",
          "40: using namespace boost;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "44: typedef enum {",
          "46:  FT_NONEXISTANT,",
          "48:  FT_REGULAR,",
          "50:  FT_DIRECTORY,",
          "52:  FT_OTHER",
          "53: } FileType;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "145: bool fileExists(const char *filename);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "168: FileType getFileType(const char *filename);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fae1d46166a724942c66136e9ff444da8475804f",
      "candidate_info": {
        "commit_hash": "fae1d46166a724942c66136e9ff444da8475804f",
        "repo": "phusion/passenger",
        "commit_url": "https://github.com/phusion/passenger/commit/fae1d46166a724942c66136e9ff444da8475804f",
        "files": [
          ".gitignore",
          "Rakefile",
          "ext/apache2/HelperServer.cpp",
          "ext/apache2/Watchdog.cpp",
          "ext/common/Account.h",
          "ext/common/AccountsDatabase.cpp",
          "ext/common/AccountsDatabase.h",
          "ext/common/MessageServer.h",
          "ext/common/ServerInstanceDir.h",
          "ext/common/Utils.cpp",
          "ext/common/Utils.h",
          "ext/oxt/system_calls.cpp",
          "ext/oxt/system_calls.hpp"
        ],
        "message": "Begin writing a watchdog+helper server architecture for the Apache module. Doesn't work yet.",
        "before_after_code_files": [
          "ext/apache2/HelperServer.cpp||ext/apache2/HelperServer.cpp",
          "ext/apache2/Watchdog.cpp||ext/apache2/Watchdog.cpp",
          "ext/common/Account.h||ext/common/Account.h",
          "ext/common/AccountsDatabase.cpp||ext/common/AccountsDatabase.cpp",
          "ext/common/AccountsDatabase.h||ext/common/AccountsDatabase.h",
          "ext/common/MessageServer.h||ext/common/MessageServer.h",
          "ext/common/ServerInstanceDir.h||ext/common/ServerInstanceDir.h",
          "ext/common/Utils.cpp||ext/common/Utils.cpp",
          "ext/common/Utils.h||ext/common/Utils.h",
          "ext/oxt/system_calls.cpp||ext/oxt/system_calls.cpp",
          "ext/oxt/system_calls.hpp||ext/oxt/system_calls.hpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ext/common/ServerInstanceDir.h||ext/common/ServerInstanceDir.h",
            "ext/common/Utils.cpp||ext/common/Utils.cpp",
            "ext/common/Utils.h||ext/common/Utils.h"
          ],
          "candidate": [
            "ext/common/ServerInstanceDir.h||ext/common/ServerInstanceDir.h",
            "ext/common/Utils.cpp||ext/common/Utils.cpp",
            "ext/common/Utils.h||ext/common/Utils.h"
          ]
        }
      },
      "candidate_diff": {
        "ext/apache2/HelperServer.cpp||ext/apache2/HelperServer.cpp": [
          "File: ext/apache2/HelperServer.cpp -> ext/apache2/HelperServer.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "26: #include <boost/shared_ptr.hpp>",
          "27: #include <boost/bind.hpp>",
          "28: #include <oxt/thread.hpp>",
          "29: #include <oxt/system_calls.hpp>",
          "31: #include <string>",
          "32: #include <sys/types.h>",
          "33: #include <sys/select.h>",
          "34: #include <unistd.h>",
          "35: #include <cstdlib>",
          "36: #include <cstring>",
          "37: #include <cerrno>",
          "39: #include \"ApplicationPool/Pool.h\"",
          "40: #include \"ApplicationPool/Server.h\"",
          "41: #include \"AccountsDatabase.h\"",
          "42: #include \"Account.h\"",
          "43: #include \"MessageServer.h\"",
          "44: #include \"BacktracesServer.h\"",
          "45: #include \"ServerInstanceDir.h\"",
          "46: #include \"MessageChannel.h\"",
          "47: #include \"FileDescriptor.h\"",
          "48: #include \"Logging.h\"",
          "49: #include \"Exceptions.h\"",
          "50: #include \"Utils.h\"",
          "52: using namespace std;",
          "53: using namespace boost;",
          "54: using namespace oxt;",
          "55: using namespace Passenger;",
          "57: class Server {",
          "58: private:",
          "59:  static const unsigned int MESSAGE_SERVER_STACK_SIZE = 64 * 1024;",
          "61:  ServerInstanceDir serverInstanceDir;",
          "62:  ServerInstanceDir::GenerationPtr generation;",
          "63:  FileDescriptor feedbackFd;",
          "64:  MessageChannel feedbackChannel;",
          "65:  AccountsDatabasePtr accountsDatabase;",
          "66:  MessageServerPtr messageServer;",
          "67:  ApplicationPool::PoolPtr pool;",
          "68:  shared_ptr<oxt::thread> messageServerThread;",
          "70:  string receiveWebServerPassword() {",
          "71:   vector<string> args;",
          "73:   if (!feedbackChannel.read(args)) {",
          "74:    throw IOException(\"Cannot read the web server account password\");",
          "75:   }",
          "76:   if (args[0] != \"web server account password\") {",
          "77:    throw IOException(\"Unexpected input message\");",
          "78:   }",
          "79:   return Base64::decode(args[1]);",
          "80:  }",
          "85:  void lowerPrivilege(const string &username) {",
          "86:   struct passwd *entry;",
          "88:   entry = getpwnam(username.c_str());",
          "89:   if (entry != NULL) {",
          "90:    if (initgroups(username.c_str(), entry->pw_gid) != 0) {",
          "91:     int e = errno;",
          "92:     P_WARN(\"WARNING: Unable to lower ApplicationPoolServerExecutable's \"",
          "93:      \"privilege to that of user '\" << username <<",
          "94:      \"': cannot set supplementary groups for this \"",
          "95:      \"user: \" << strerror(e) << \" (\" << e << \")\");",
          "96:    }",
          "97:    if (setgid(entry->pw_gid) != 0) {",
          "98:     int e = errno;",
          "99:     P_WARN(\"WARNING: Unable to lower ApplicationPoolServerExecutable's \"",
          "100:      \"privilege to that of user '\" << username <<",
          "101:      \"': cannot set group ID: \" << strerror(e) <<",
          "102:      \" (\" << e << \")\");",
          "103:    }",
          "104:    if (setuid(entry->pw_uid) != 0) {",
          "105:     int e = errno;",
          "106:     P_WARN(\"WARNING: Unable to lower ApplicationPoolServerExecutable's \"",
          "107:      \"privilege to that of user '\" << username <<",
          "108:      \"': cannot set user ID: \" << strerror(e) <<",
          "109:      \" (\" << e << \")\");",
          "110:    }",
          "111:   } else {",
          "112:    P_WARN(\"WARNING: Unable to lower ApplicationPoolServerExecutable's \"",
          "113:     \"privilege to that of user '\" << username <<",
          "114:     \"': user does not exist.\");",
          "115:   }",
          "116:  }",
          "118: public:",
          "119:  Server(unsigned int logLevel, FileDescriptor feedbackFd,",
          "120:   pid_t webServerPid, const string &tempDir,",
          "121:   bool userSwitching, const string &defaultUser, uid_t workerUid, gid_t workerGid,",
          "122:   const string &passengerRoot, const string &rubyCommand,",
          "123:   unsigned int generationNumber)",
          "124:   : serverInstanceDir(webServerPid, tempDir, false)",
          "125:  {",
          "126:   TRACE_POINT();",
          "127:   string webServerPassword;",
          "129:   setLogLevel(logLevel);",
          "130:   this->feedbackFd  = feedbackFd;",
          "131:   feedbackChannel   = MessageChannel(feedbackFd);",
          "133:   UPDATE_TRACE_POINT();",
          "134:   webServerPassword = receiveWebServerPassword();",
          "135:   generation        = serverInstanceDir.getGeneration(generationNumber);",
          "136:   accountsDatabase  = AccountsDatabase::createDefault(generation, userSwitching, defaultUser);",
          "137:   accountsDatabase->add(\"_web_server\", webServerPassword, false,",
          "138:    Account::GET | Account::SET_PARAMETERS | Account::EXIT);",
          "139:   messageServer = ptr(new MessageServer(generation->getPath() + \"/socket\", accountsDatabase));",
          "140:   if (geteuid() == 0 && !userSwitching) {",
          "141:    lowerPrivilege(defaultUser);",
          "142:   }",
          "144:   UPDATE_TRACE_POINT();",
          "145:   pool.reset(new ApplicationPool::Pool(findSpawnServer(passengerRoot.c_str()), \"\", rubyCommand));",
          "146:   messageServer->addHandler(ptr(new ApplicationPool::Server(pool)));",
          "147:   messageServer->addHandler(ptr(new BacktracesServer()));",
          "149:   UPDATE_TRACE_POINT();",
          "150:   feedbackChannel.write(\"initialized\", messageServer->getSocketFilename().c_str(), NULL);",
          "151:  }",
          "153:  ~Server() {",
          "154:   TRACE_POINT();",
          "155:   messageServerThread->interrupt_and_join();",
          "156:  }",
          "158:  void mainLoop() {",
          "159:   TRACE_POINT();",
          "161:   messageServerThread.reset(new oxt::thread(",
          "162:    boost::bind(&MessageServer::mainLoop, messageServer.get()),",
          "163:    \"MessageServer thread\",",
          "164:    MESSAGE_SERVER_STACK_SIZE",
          "165:   ));",
          "167:   fd_set fds;",
          "168:   FD_ZERO(&fds);",
          "169:   FD_SET(feedbackFd, &fds);",
          "170:   try {",
          "171:    UPDATE_TRACE_POINT();",
          "172:    if (syscalls::select(feedbackFd + 1, &fds, NULL, NULL, NULL) == -1) {",
          "173:     int e = errno;",
          "174:     throw SystemException(\"select() failed\", e);",
          "175:    }",
          "176:   } catch (const boost::thread_interrupted &) {",
          "178:   }",
          "179:  }",
          "180: };",
          "182: static void",
          "183: ignoreSigpipe() {",
          "184:  struct sigaction action;",
          "185:  action.sa_handler = SIG_IGN;",
          "186:  action.sa_flags   = 0;",
          "187:  sigemptyset(&action.sa_mask);",
          "188:  sigaction(SIGPIPE, &action, NULL);",
          "189: }",
          "191: int",
          "192: main(int argc, char *argv[]) {",
          "193:  TRACE_POINT();",
          "194:  try {",
          "197:   setpgrp();",
          "199:   ignoreSigpipe();",
          "200:   setup_syscall_interruption_support();",
          "202:   unsigned int   logLevel   = atoi(argv[1]);",
          "203:   FileDescriptor feedbackFd = atoi(argv[2]);",
          "204:   pid_t   webServerPid  = (pid_t) atoll(argv[3]);",
          "205:   string  tempDir       = argv[4];",
          "206:   bool    userSwitching = strcmp(argv[5], \"true\") == 0;",
          "207:   string  defaultUser   = argv[6];",
          "208:   uid_t   workerUid     = (uid_t) atoll(argv[7]);",
          "209:   gid_t   workerGid     = (uid_t) atoll(argv[8]);",
          "210:   string  passengerRoot = argv[9];",
          "211:   string  rubyCommand   = argv[10];",
          "212:   unsigned int generationNumber = atoll(argv[11]);",
          "214:   UPDATE_TRACE_POINT();",
          "215:   Server server(logLevel, feedbackFd, webServerPid, tempDir,",
          "216:    userSwitching, defaultUser, workerUid, workerGid,",
          "217:    passengerRoot, rubyCommand, generationNumber);",
          "218:   P_DEBUG(\"Passenger helper server started on PID \" << getpid());",
          "220:   UPDATE_TRACE_POINT();",
          "221:   server.mainLoop();",
          "222:  } catch (const tracable_exception &e) {",
          "223:   P_ERROR(e.what() << \"\\n\" << e.backtrace());",
          "224:   return 1;",
          "225:  } catch (const exception &e) {",
          "226:   P_ERROR(e.what());",
          "227:   return 1;",
          "228:  } catch (...) {",
          "229:   P_ERROR(\"Unknown exception thrown in main thread.\");",
          "230:   throw;",
          "231:  }",
          "233:  P_TRACE(2, \"Helper server exited.\");",
          "234:  return 0;",
          "235: }",
          "",
          "---------------"
        ],
        "ext/apache2/Watchdog.cpp||ext/apache2/Watchdog.cpp": [
          "File: ext/apache2/Watchdog.cpp -> ext/apache2/Watchdog.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #include <oxt/thread.hpp>",
          "2: #include <oxt/system_calls.hpp>",
          "3: #include <string>",
          "5: #include <sys/types.h>",
          "6: #include <unistd.h>",
          "7: #include <signal.h>",
          "8: #include <cstdio>",
          "9: #include <cstdlib>",
          "10: #include <cstring>",
          "11: #include <cerrno>",
          "13: #include \"ServerInstanceDir.h\"",
          "14: #include \"FileDescriptor.h\"",
          "15: #include \"MessageChannel.h\"",
          "16: #include \"MessageServer.h\"",
          "17: #include \"Base64.h\"",
          "18: #include \"Logging.h\"",
          "19: #include \"Exceptions.h\"",
          "21: using namespace std;",
          "22: using namespace boost;",
          "23: using namespace oxt;",
          "24: using namespace Passenger;",
          "27: static unsigned int   logLevel;",
          "28: static FileDescriptor feedbackFd;  // This is the feedback fd to the web server, not to the helper server.",
          "29: static pid_t   webServerPid;",
          "30: static string  tempDir;",
          "31: static bool    userSwitching;",
          "32: static string  defaultUser;",
          "33: static uid_t   workerUid;",
          "34: static gid_t   workerGid;",
          "35: static string  passengerRoot;",
          "36: static string  rubyCommand;",
          "38: static boost::mutex globalMutex;",
          "39: static bool exitGracefully = false;",
          "41: struct HelperServerFeedback {",
          "42:  FileDescriptor feedbackFd;",
          "43:  string socketFilename;",
          "44: };",
          "47: static string",
          "48: findHelperServer() {",
          "49:  return passengerRoot + \"/ext/apache2/HelperServer\";",
          "50: }",
          "52: static void",
          "53: killAndWait(pid_t pid) {",
          "54:  this_thread::disable_interruption di;",
          "55:  this_thread::disable_syscall_interruption dsi;",
          "56:  syscalls::kill(pid, SIGKILL);",
          "57:  syscalls::waitpid(pid, NULL, 0);",
          "58: }",
          "60: static pid_t",
          "61: startHelperServer(const string &helperServerFilename, unsigned int generationNumber,",
          "62:  const string &webServerPassword, HelperServerFeedback &feedback",
          "63: ) {",
          "64:  this_thread::disable_interruption di;",
          "65:  this_thread::disable_syscall_interruption dsi;",
          "66:  int fds[2], e, ret;",
          "67:  pid_t pid;",
          "69:  if (syscalls::socketpair(AF_UNIX, SOCK_STREAM, 0, fds) == -1) {",
          "70:   int e = errno;",
          "71:   throw SystemException(\"Cannot create a Unix socket pair\", e);",
          "72:  }",
          "74:  pid = syscalls::fork();",
          "75:  if (pid == 0) {",
          "77:   long max_fds, i;",
          "80:   syscalls::close(fds[0]);",
          "81:   if (fds[1] != 3) {",
          "82:    if (syscalls::dup2(fds[1], 3) == -1) {",
          "83:     e = errno;",
          "84:     try {",
          "85:      MessageChannel(fds[1]).write(\"system error\",",
          "86:       \"dup2() failed\",",
          "87:       toString(e).c_str(),",
          "88:       NULL);",
          "89:      _exit(1);",
          "90:     } catch (...) {",
          "91:      fprintf(stderr, \"Passenger Watchdog: dup2() failed: %s (%d)\\n\",",
          "92:       strerror(e), e);",
          "93:      fflush(stderr);",
          "94:      _exit(1);",
          "95:     }",
          "96:    }",
          "97:   }",
          "98:   max_fds = sysconf(_SC_OPEN_MAX);",
          "99:   for (i = 4; i < max_fds; i++) {",
          "100:    if (i != fds[1]) {",
          "101:     syscalls::close(i);",
          "102:    }",
          "103:   }",
          "105:   execl(helperServerFilename.c_str(),",
          "106:    helperServerFilename.c_str(),",
          "107:    toString(logLevel).c_str(),",
          "108:    \"3\",  // feedback fd",
          "109:    toString(webServerPid).c_str(),",
          "110:    tempDir.c_str(),",
          "111:    userSwitching ? \"true\" : \"false\",",
          "112:    defaultUser.c_str(),",
          "113:    toString(workerUid).c_str(),",
          "114:    toString(workerGid).c_str(),",
          "115:    passengerRoot.c_str(),",
          "116:    rubyCommand.c_str(),",
          "117:    toString(generationNumber).c_str(),",
          "118:    (char *) 0);",
          "119:   e = errno;",
          "120:   try {",
          "121:    MessageChannel(3).write(\"exec error\", toString(e).c_str(), NULL);",
          "122:    _exit(1);",
          "123:   } catch (...) {",
          "124:    fprintf(stderr, \"Passenger Watchdog: could not execute %s: %s (%d)\\n\",",
          "125:     helperServerFilename.c_str(), strerror(e), e);",
          "126:    fflush(stderr);",
          "127:    _exit(1);",
          "128:   }",
          "129:  } else if (pid == -1) {",
          "131:   e = errno;",
          "132:   syscalls::close(fds[0]);",
          "133:   syscalls::close(fds[1]);",
          "134:   throw SystemException(\"Cannot create a new process\", e);",
          "135:  } else {",
          "137:   FileDescriptor helperServerFeedbackFd(fds[0]);",
          "138:   MessageChannel helperServerFeedbackChannel(fds[0]);",
          "139:   vector<string> args;",
          "141:   syscalls::close(fds[1]);",
          "142:   this_thread::restore_interruption ri(di);",
          "143:   this_thread::restore_syscall_interruption rsi(dsi);",
          "145:   try {",
          "147:    helperServerFeedbackChannel.write(\"web server account password\",",
          "148:     Base64::encode(webServerPassword).c_str(),",
          "149:     NULL);",
          "150:   } catch (const SystemException &ex) {",
          "151:    killAndWait(pid);",
          "152:    throw SystemException(\"Unable to start the helper server: \"",
          "153:     \"an error occurred while sending startup arguments\",",
          "154:     ex.code());",
          "155:   } catch (...) {",
          "156:    killAndWait(pid);",
          "157:    throw;",
          "158:   }",
          "161:   try {",
          "162:    if (!helperServerFeedbackChannel.read(args)) {",
          "163:     this_thread::disable_interruption di2;",
          "164:     this_thread::disable_syscall_interruption dsi2;",
          "169:     ret = syscalls::waitpid(pid, NULL, WNOHANG);",
          "170:     if (ret == 0) {",
          "175:      killAndWait(pid);",
          "176:      throw RuntimeException(\"Unable to start the helper server: \"",
          "177:       \"an unknown error occurred during its startup\");",
          "178:     } else {",
          "180:      throw RuntimeException(\"Unable to start the helper server: \"",
          "181:       \"it seems to have crashed during startup for an unknown reason\");",
          "182:     }",
          "183:    }",
          "184:   } catch (const SystemException &ex) {",
          "185:    killAndWait(pid);",
          "186:    throw SystemException(\"Unable to start the helper server: \"",
          "187:     \"unable to read its initialization feedback\",",
          "188:     ex.code());",
          "189:   } catch (const RuntimeException &) {",
          "190:    throw;",
          "191:   } catch (...) {",
          "192:    killAndWait(pid);",
          "193:    throw;",
          "194:   }",
          "196:   if (args[0] == \"initialized\") {",
          "197:    feedback.feedbackFd = helperServerFeedbackFd;",
          "198:    feedback.socketFilename = args[1];",
          "199:   } else if (args[0] == \"system error\") {",
          "200:    killAndWait(pid);",
          "201:    throw SystemException(args[1], atoi(args[2]));",
          "202:   } else if (args[0] == \"exec error\") {",
          "203:    killAndWait(pid);",
          "204:    throw SystemException(\"Unable to start the helper server\", atoi(args[1]));",
          "205:   } else {",
          "206:    killAndWait(pid);",
          "207:    throw RuntimeException(\"The helper server sent an unknown feedback message '\" + args[0] + \"'\");",
          "208:   }",
          "210:   return pid;",
          "211:  }",
          "212: }",
          "214: static void",
          "215: relayFeedback(const string &webServerPassword, const HelperServerFeedback &feedback) {",
          "216:  MessageChannel feedbackChannel(feedbackFd);",
          "217:  feedbackChannel.write(\"initialized\",",
          "218:   feedback.socketFilename.c_str(),",
          "219:   Base64::encode(webServerPassword).c_str(),",
          "220:   NULL);",
          "221: }",
          "223: static void",
          "224: cleanupHelperServerInBackground(ServerInstanceDirPtr &serverInstanceDir,",
          "225:  ServerInstanceDir::GenerationPtr &generation, FileDescriptor &helperServerFeedbackFd)",
          "226: {",
          "227:  this_thread::disable_interruption di;",
          "228:  this_thread::disable_syscall_interruption dsi;",
          "229:  pid_t pid;",
          "231:  pid = fork();",
          "232:  if (pid == 0) {",
          "234:   char x;",
          "237:   syscalls::read(helperServerFeedbackFd, &x, 1);",
          "240:   generation.reset();",
          "241:   serverInstanceDir.reset();",
          "243:   _exit(0);",
          "245:  } else if (pid == -1) {",
          "249:  } else {",
          "253:   serverInstanceDir->detach();",
          "254:   generation->detach();",
          "255:  }",
          "256: }",
          "258: static void",
          "259: watchdogMainLoop() {",
          "260:  this_thread::disable_interruption di;",
          "261:  this_thread::disable_syscall_interruption dsi;",
          "263:  try {",
          "264:   ServerInstanceDirPtr serverInstanceDir(new ServerInstanceDir(webServerPid, tempDir));",
          "265:   ServerInstanceDir::GenerationPtr generation =",
          "266:    serverInstanceDir->newGeneration(userSwitching, defaultUser, workerUid, workerGid);",
          "268:   char webServerPasswordData[MessageServer::MAX_PASSWORD_SIZE];",
          "269:   string webServerPassword;",
          "270:   string helperServerFilename;",
          "271:   bool done = false;",
          "272:   bool firstStart = true;",
          "273:   pid_t pid;",
          "274:   int ret, status;",
          "276:   generateSecureToken(webServerPasswordData, sizeof(webServerPasswordData));",
          "277:   webServerPassword.assign(webServerPasswordData, sizeof(webServerPasswordData));",
          "278:   helperServerFilename = findHelperServer();",
          "280:   while (!done && !this_thread::interruption_requested()) {",
          "281:    HelperServerFeedback feedback;",
          "283:    try {",
          "284:     this_thread::restore_interruption ri(di);",
          "285:     this_thread::restore_syscall_interruption rsi(dsi);",
          "286:     pid = startHelperServer(helperServerFilename, generation->getNumber(),",
          "287:      webServerPassword, feedback);",
          "288:    } catch (const thread_interrupted &) {",
          "289:     return;",
          "290:    }",
          "292:    if (firstStart) {",
          "293:     firstStart = false;",
          "294:     this_thread::restore_interruption ri(di);",
          "295:     this_thread::restore_syscall_interruption rsi(dsi);",
          "296:     try {",
          "297:      relayFeedback(webServerPassword, feedback);",
          "298:     } catch (const thread_interrupted &) {",
          "299:      killAndWait(pid);",
          "300:      return;",
          "301:     } catch (...) {",
          "302:      killAndWait(pid);",
          "303:      throw;",
          "304:     }",
          "305:    }",
          "308:    try {",
          "309:     this_thread::restore_interruption ri(di);",
          "310:     this_thread::restore_syscall_interruption rsi(dsi);",
          "311:     ret = syscalls::waitpid(pid, &status, 0);",
          "312:    } catch (const thread_interrupted &) {",
          "313:     bool graceful;",
          "315:     globalMutex.lock();",
          "316:     graceful = exitGracefully;",
          "317:     globalMutex.unlock();",
          "319:     if (graceful) {",
          "327:      cleanupHelperServerInBackground(serverInstanceDir, generation,",
          "328:       feedback.feedbackFd);",
          "329:     } else {",
          "334:      syscalls::killpg(pid, SIGKILL);",
          "335:      syscalls::waitpid(pid, NULL, 0);",
          "336:     }",
          "337:     return;",
          "338:    }",
          "340:    if (ret != -1) {",
          "341:     done = WIFEXITED(status) && WEXITSTATUS(status) == 0;",
          "342:    }",
          "345:    if (!done) {",
          "346:     P_DEBUG(\"Helper server crashed, restarting it...\");",
          "347:    }",
          "348:   }",
          "349:  } catch (const tracable_exception &e) {",
          "350:   P_ERROR(e.what() << \"\\n\" << e.backtrace());",
          "351:  }",
          "352: }",
          "354: static void",
          "355: disableOomKiller() {",
          "356:  FILE *f = fopen(\"/proc/self/oom_adj\", \"w\");",
          "357:  if (f != NULL) {",
          "358:   fprintf(f, \"-17\");",
          "359:   fclose(f);",
          "360:  }",
          "361: }",
          "363: int",
          "364: main(int argc, char *argv[]) {",
          "365:  logLevel      = atoi(argv[1]);",
          "366:  feedbackFd    = atoi(argv[2]);",
          "367:  webServerPid  = (pid_t) atoll(argv[3]);",
          "368:  tempDir       = argv[4];",
          "369:  userSwitching = strcmp(argv[5], \"true\") == 0;",
          "370:  defaultUser   = argv[6];",
          "371:  workerUid     = (uid_t) atoll(argv[7]);",
          "372:  workerGid     = (uid_t) atoll(argv[8]);",
          "373:  passengerRoot = argv[9];",
          "374:  rubyCommand   = argv[10];",
          "376:  disableOomKiller();",
          "377:  setup_syscall_interruption_support();",
          "379:  oxt::thread watchdogThread(watchdogMainLoop, \"Watchdog thread\", 16 * 1024);",
          "381:  this_thread::disable_interruption di;",
          "382:  this_thread::disable_syscall_interruption dsi;",
          "383:  char x;",
          "384:  int ret = syscalls::read(feedbackFd, &x, 1);",
          "385:  if (ret == 1) {",
          "387:   globalMutex.lock();",
          "388:   exitGracefully = true;",
          "389:   globalMutex.unlock();",
          "390:   watchdogThread.interrupt_and_join();",
          "391:  } else {",
          "393:   watchdogThread.interrupt_and_join();",
          "394:  }",
          "395:  return 0;",
          "396: }",
          "",
          "---------------"
        ],
        "ext/common/Account.h||ext/common/Account.h": [
          "File: ext/common/Account.h -> ext/common/Account.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "75:  };",
          "77: private:",
          "",
          "[Removed Lines]",
          "74:   INSPECT_BACKTRACES        = 1 << 8",
          "",
          "[Added Lines]",
          "74:   INSPECT_BACKTRACES        = 1 << 8,",
          "77:   EXIT                      = 1 << 9",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "107:   this->rights = (Rights) rights;",
          "108:  }",
          "110:  static string createHash(const StaticString &userSuppliedPassword) {",
          "112:   return userSuppliedPassword;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "113:  string getRawPassword() const {",
          "114:   return passwordOrHash;",
          "115:  }",
          "",
          "---------------"
        ],
        "ext/common/AccountsDatabase.cpp||ext/common/AccountsDatabase.cpp": [
          "File: ext/common/AccountsDatabase.cpp -> ext/common/AccountsDatabase.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "33: namespace Passenger {",
          "35: AccountsDatabasePtr",
          "37:  AccountsDatabasePtr database(new AccountsDatabase());",
          "55:   Account::INSPECT_BASIC_INFO | Account::INSPECT_BACKTRACES);",
          "59:  return database;",
          "60: }",
          "",
          "[Removed Lines]",
          "36: AccountsDatabase::createDefault() {",
          "38:  string infoDir;",
          "39:  struct stat buf;",
          "40:  int ret;",
          "42:  infoDir = getPassengerTempDir() + \"/info\";",
          "43:  do {",
          "44:   ret = stat(infoDir.c_str(), &buf);",
          "45:  } while (ret == -1 && errno == EINTR);",
          "46:  if (ret == -1) {",
          "47:   int e = errno;",
          "48:   throw FileSystemException(\"Cannot stat \" + infoDir, e, infoDir);",
          "49:  }",
          "51:  char passengerStatusPasswordBuf[MessageServer::MAX_PASSWORD_SIZE];",
          "52:  generateSecureToken(passengerStatusPasswordBuf, sizeof(passengerStatusPasswordBuf));",
          "53:  string passengerStatusPassword(passengerStatusPasswordBuf, sizeof(passengerStatusPasswordBuf));",
          "54:  database->add(\"_passenger-status\", passengerStatusPassword, false,",
          "56:  createFile(infoDir + \"/passenger-status-password.txt\",",
          "57:   passengerStatusPassword, S_IRUSR, buf.st_uid, buf.st_gid);",
          "",
          "[Added Lines]",
          "36: AccountsDatabase::createDefault(const ServerInstanceDir::GenerationPtr &generation,",
          "37:                                 bool userSwitching, const string &defaultUser)",
          "38: {",
          "40:  uid_t defaultUid;",
          "41:  gid_t defaultGid;",
          "42:  struct {",
          "43:   char passengerStatus[MessageServer::MAX_PASSWORD_SIZE];",
          "44:  } passwords;",
          "45:  string passengerStatusPasswordString;",
          "47:  determineLowestUserAndGroup(defaultUser, defaultUid, defaultGid);",
          "49:  generateSecureToken(&passwords, sizeof(passwords));",
          "50:  passengerStatusPasswordString.assign(passwords.passengerStatus, sizeof(passwords.passengerStatus));",
          "52:  database->add(\"_passenger-status\", passengerStatusPasswordString, false,",
          "54:  if (geteuid() == 0 && !userSwitching) {",
          "55:   createFile(generation->getPath() + \"/passenger-status-password.txt\",",
          "56:    passengerStatusPasswordString, S_IRUSR, defaultUid, defaultGid);",
          "57:  } else {",
          "58:   createFile(generation->getPath() + \"/passenger-status-password.txt\",",
          "59:    passengerStatusPasswordString, S_IRUSR);",
          "60:  }",
          "",
          "---------------"
        ],
        "ext/common/AccountsDatabase.h||ext/common/AccountsDatabase.h": [
          "File: ext/common/AccountsDatabase.h -> ext/common/AccountsDatabase.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: #include <map>",
          "30: #include <boost/shared_ptr.hpp>",
          "31: #include \"Account.h\"",
          "32: #include \"StaticString.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "32: #include \"ServerInstanceDir.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "47:  map<string, AccountPtr> accounts;",
          "49: public:",
          "52:  AccountPtr add(const string &username, const string &passwordOrHash, bool hashGiven, int rights = Account::ALL) {",
          "53:   AccountPtr account(new Account(username, passwordOrHash, hashGiven, rights));",
          "",
          "[Removed Lines]",
          "50:  static AccountsDatabasePtr createDefault();",
          "",
          "[Added Lines]",
          "51:  static AccountsDatabasePtr createDefault(const ServerInstanceDir::GenerationPtr &generation,",
          "52:                                           bool userSwitching, const string &defaultUser);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "55:   return account;",
          "56:  }",
          "58:  AccountPtr authenticate(const string &username, const StaticString &userSuppliedPassword) {",
          "59:   map<string, AccountPtr>::iterator it = accounts.find(username);",
          "60:   if (it == accounts.end()) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "60:  const AccountPtr get(const string &username) const {",
          "61:   map<string, AccountPtr>::const_iterator it(accounts.find(username));",
          "62:   if (it == accounts.end()) {",
          "63:    return AccountPtr();",
          "64:   } else {",
          "65:    return it->second;",
          "66:   }",
          "67:  }",
          "",
          "---------------"
        ],
        "ext/common/MessageServer.h||ext/common/MessageServer.h": [
          "File: ext/common/MessageServer.h -> ext/common/MessageServer.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "468:   syscalls::unlink(socketFilename.c_str());",
          "469:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "471:  string getSocketFilename() const {",
          "472:   return socketFilename;",
          "473:  }",
          "",
          "---------------"
        ],
        "ext/common/ServerInstanceDir.h||ext/common/ServerInstanceDir.h": [
          "File: ext/common/ServerInstanceDir.h -> ext/common/ServerInstanceDir.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "60:   }",
          "62:   void create(bool userSwitching, const string &defaultUser, uid_t workerUid, gid_t workerGid) {",
          "63:    uid_t defaultUid;",
          "64:    gid_t defaultGid;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "63:    bool runningAsRoot = geteuid() == 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "72:    makeDirTree(path, \"u=wxs,g=x,o=x\");",
          "84:    } else {",
          "86:    }",
          "103:    } else {",
          "105:    }",
          "108:     if (userSwitching) {",
          "",
          "[Removed Lines]",
          "82:    if (geteuid() == 0) {",
          "83:     makeDirTree(path + \"/webserver_private\", \"u=wxs,g=,o=\", workerUid, workerGid);",
          "85:     makeDirTree(path + \"/webserver_private\", \"u=wxs,g=,o=\");",
          "93:    if (geteuid() == 0) {",
          "98:     if (userSwitching) {",
          "99:      makeDirTree(path + \"/master\", \"u=xs,g=,o=\", workerUid, workerGid);",
          "100:     } else {",
          "101:      makeDirTree(path + \"/master\", \"u=xs,g=,o=\", defaultUid, defaultGid);",
          "102:     }",
          "104:     makeDirTree(path + \"/master\", \"u=wxs,g=,o=\");",
          "107:    if (geteuid() == 0) {",
          "",
          "[Added Lines]",
          "80:    if (runningAsRoot) {",
          "81:     makeDirTree(path + \"/buffered_uploads\", \"u=wxs,g=,o=\", workerUid, workerGid);",
          "83:     makeDirTree(path + \"/buffered_uploads\", \"u=wxs,g=,o=\");",
          "86:    if (runningAsRoot) {",
          "91:     makeDirTree(path + \"/webserver_shared_resources\", \"u=xs,g=,o=\", workerUid, workerGid);",
          "93:     makeDirTree(path + \"/webserver_shared_resources\", \"u=wxs,g=,o=\");",
          "96:    if (runningAsRoot) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "154:   string getPath() const {",
          "155:    return path;",
          "156:   }",
          "157:  };",
          "159:  typedef shared_ptr<Generation> GenerationPtr;",
          "161: private:",
          "162:  string path;",
          "165:   this->path  = path;",
          "186:   makeDirTree(path, \"u=rwxs,g=rx,o=rx\");",
          "",
          "[Removed Lines]",
          "164:  void initialize(const string &path) {",
          "",
          "[Added Lines]",
          "147:   void detach() {",
          "148:    owner = false;",
          "149:   }",
          "156:  bool owner;",
          "158:  void initialize(const string &path, bool owner) {",
          "160:   this->owner = owner;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "198:  }",
          "200: public:",
          "202:   string theParentDir;",
          "204:   if (parentDir.empty()) {",
          "",
          "[Removed Lines]",
          "201:  ServerInstanceDir(pid_t webServerPid, const string &parentDir = \"\") {",
          "",
          "[Added Lines]",
          "193:  ServerInstanceDir(pid_t webServerPid, const string &parentDir = \"\", bool owner = true) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "206:   } else {",
          "207:    theParentDir = parentDir;",
          "208:   }",
          "210:  }",
          "214:  }",
          "216:  ~ServerInstanceDir() {",
          "225:    }",
          "229:   }",
          "230:  }",
          "",
          "[Removed Lines]",
          "209:   initialize(theParentDir + \"/passenger.\" + toString<unsigned long long>(webServerPid));",
          "212:  ServerInstanceDir(const string &path) {",
          "213:   initialize(path);",
          "217:   GenerationPtr newestGeneration;",
          "218:   try {",
          "219:    newestGeneration = getNewestGeneration();",
          "220:   } catch (const FileSystemException &e) {",
          "221:    if (e.code() == ENOENT) {",
          "222:     return;",
          "223:    } else {",
          "224:     throw;",
          "226:   }",
          "227:   if (newestGeneration == NULL) {",
          "228:    removeDirTree(path);",
          "",
          "[Added Lines]",
          "201:   initialize(theParentDir + \"/passenger.\" + toString<unsigned long long>(webServerPid), owner);",
          "205:  ServerInstanceDir(const string &path, bool owner = true) {",
          "206:   initialize(path, owner);",
          "210:   if (owner) {",
          "211:    GenerationPtr newestGeneration;",
          "212:    try {",
          "213:     newestGeneration = getNewestGeneration();",
          "214:    } catch (const FileSystemException &e) {",
          "215:     if (e.code() == ENOENT) {",
          "216:      return;",
          "217:     } else {",
          "218:      throw;",
          "219:     }",
          "220:    }",
          "221:    if (newestGeneration == NULL) {",
          "222:     removeDirTree(path);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "233:   return path;",
          "234:  }",
          "236:  GenerationPtr newGeneration(bool userSwitching, const string &defaultUser, uid_t workerUid, gid_t workerGid) {",
          "237:   GenerationPtr newestGeneration = getNewestGeneration();",
          "238:   unsigned int newNumber;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "231:  void detach() {",
          "232:   owner = false;",
          "233:  }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "281:  }",
          "282: };",
          "284: } // namespace Passenger",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "283: typedef shared_ptr<ServerInstanceDir> ServerInstanceDirPtr;",
          "",
          "---------------"
        ],
        "ext/common/Utils.cpp||ext/common/Utils.cpp": [
          "File: ext/common/Utils.cpp -> ext/common/Utils.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "220:  }",
          "221: }",
          "242: string",
          "243: canonicalizePath(const string &path) {",
          "244:  #ifdef __GLIBC__",
          "",
          "[Removed Lines]",
          "223: string",
          "224: findApplicationPoolServer(const char *passengerRoot) {",
          "225:  assert(passengerRoot != NULL);",
          "226:  string root(passengerRoot);",
          "227:  if (root.at(root.size() - 1) != '/') {",
          "228:   root.append(1, '/');",
          "229:  }",
          "231:  string path(root);",
          "232:  path.append(\"ext/apache2/ApplicationPoolServerExecutable\");",
          "233:  if (fileExists(path.c_str())) {",
          "234:   return path;",
          "235:  } else {",
          "236:   path.assign(root);",
          "237:   path.append(\"lib/phusion_passenger/ApplicationPoolServerExecutable\");",
          "238:   return path;",
          "239:  }",
          "240: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ext/common/Utils.h||ext/common/Utils.h": [
          "File: ext/common/Utils.h -> ext/common/Utils.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "217: string findSpawnServer(const char *passengerRoot = NULL);",
          "",
          "[Removed Lines]",
          "229: string findApplicationPoolServer(const char *passengerRoot);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ext/oxt/system_calls.cpp||ext/oxt/system_calls.cpp": [
          "File: ext/oxt/system_calls.cpp -> ext/oxt/system_calls.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "114:  return ret;",
          "115: }",
          "117: int",
          "118: syscalls::accept(int sockfd, struct sockaddr *addr, socklen_t *addrlen) {",
          "119:  int ret;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "117: int",
          "118: syscalls::dup2(int filedes, int filedes2) {",
          "119:  int ret;",
          "120:  CHECK_INTERRUPTION(",
          "121:   ret == -1,",
          "122:   ret = ::dup2(filedes, filedes2)",
          "123:  );",
          "124:  return ret;",
          "125: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "345:  return ret;",
          "346: }",
          "348: pid_t",
          "349: syscalls::waitpid(pid_t pid, int *status, int options) {",
          "350:  pid_t ret;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "358: int",
          "359: syscalls::killpg(pid_t pgrp, int sig) {",
          "360:  int ret;",
          "361:  CHECK_INTERRUPTION(",
          "362:   ret == -1,",
          "363:   ret = ::killpg(pgrp, sig)",
          "364:  );",
          "365:  return ret;",
          "366: }",
          "",
          "---------------"
        ],
        "ext/oxt/system_calls.hpp||ext/oxt/system_calls.hpp": [
          "File: ext/oxt/system_calls.hpp -> ext/oxt/system_calls.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "125:   ssize_t write(int fd, const void *buf, size_t count);",
          "126:   int close(int fd);",
          "127:   int pipe(int filedes[2]);",
          "129:   int accept(int sockfd, struct sockaddr *addr, socklen_t *addrlen);",
          "130:   int bind(int sockfd, const struct sockaddr *addr, socklen_t addrlen);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "128:   int dup2(int filedes, int filedes2);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "154:   pid_t fork();",
          "155:   int kill(pid_t pid, int sig);",
          "156:   pid_t waitpid(pid_t pid, int *status, int options);",
          "157:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "157:   int killpg(pid_t pgrp, int sig);",
          "",
          "---------------"
        ]
      }
    }
  ]
}