{
  "cve_id": "CVE-2018-14341",
  "cve_desc": "In Wireshark 2.6.0 to 2.6.1, 2.4.0 to 2.4.7, and 2.2.0 to 2.2.15, the DICOM dissector could go into a large or infinite loop. This was addressed in epan/dissectors/packet-dcm.c by preventing an offset overflow.",
  "repo": "wireshark/wireshark",
  "patch_hash": "25118898a931589cfdea4693e056a02b7daecf10",
  "patch_info": {
    "commit_hash": "25118898a931589cfdea4693e056a02b7daecf10",
    "repo": "wireshark/wireshark",
    "commit_url": "https://github.com/wireshark/wireshark/commit/25118898a931589cfdea4693e056a02b7daecf10",
    "files": [
      "epan/dissectors/packet-dcm.c"
    ],
    "message": "Make sure the offset doesn't overflow.\n\nIt'd only overflow if the value is *so* large that it won't fit in the\npacket (given that we have a 2^32-1-byte limit on the packet size), so\nuse tvb_ensure_bytes_exist() to ensure we have the entire value before\nprocessing the value.\n\n(The real problem is that we don't handle the case where there's a value\nmultiplicity > 1 for some types; in those cases, we should loop,\nprocessing all the values, which would cause us to eventually throw an\nexception when we ran past the end of the packet.  This is just a quick\nfix.)\n\nBug: 14742\nChange-Id: I447ece81d1c84d3b1d218faeb2c155f910208c29\nReviewed-on: https://code.wireshark.org/review/27853\nReviewed-by: Guy Harris <guy@alum.mit.edu>",
    "before_after_code_files": [
      "epan/dissectors/packet-dcm.c||epan/dissectors/packet-dcm.c"
    ]
  },
  "patch_diff": {
    "epan/dissectors/packet-dcm.c||epan/dissectors/packet-dcm.c": [
      "File: epan/dissectors/packet-dcm.c -> epan/dissectors/packet-dcm.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "5758:     guint encoding = (pdv->syntax == DCM_EBE) ? ENC_BIG_ENDIAN : ENC_LITTLE_ENDIAN;",
      "5762:        Potentially long types. Obey vl_max",
      "5763:        ---------------------------------------------------------------------------",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "5762:        and exception if vl_max is so large that it causes the offset",
      "5764:     tvb_ensure_bytes_exist(tvb, offset, vl_max);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "2e716c32be6aa20e1813b0002878853e71f8b2f4",
      "candidate_info": {
        "commit_hash": "2e716c32be6aa20e1813b0002878853e71f8b2f4",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/2e716c32be6aa20e1813b0002878853e71f8b2f4",
        "files": [
          "epan/dissectors/packet-dcm.c"
        ],
        "message": "Make sure the offset doesn't overflow.\n\nIt'd only overflow if the value is *so* large that it won't fit in the\npacket (given that we have a 2^32-1-byte limit on the packet size), so\nuse tvb_ensure_bytes_exist() to ensure we have the entire value before\nprocessing the value.\n\n(The real problem is that we don't handle the case where there's a value\nmultiplicity > 1 for some types; in those cases, we should loop,\nprocessing all the values, which would cause us to eventually throw an\nexception when we ran past the end of the packet.  This is just a quick\nfix.)\n\nBug: 14742\nChange-Id: I447ece81d1c84d3b1d218faeb2c155f910208c29\nReviewed-on: https://code.wireshark.org/review/27853\nReviewed-by: Guy Harris <guy@alum.mit.edu>\n(cherry picked from commit 25118898a931589cfdea4693e056a02b7daecf10)\nReviewed-on: https://code.wireshark.org/review/27856",
        "before_after_code_files": [
          "epan/dissectors/packet-dcm.c||epan/dissectors/packet-dcm.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-dcm.c||epan/dissectors/packet-dcm.c"
          ],
          "candidate": [
            "epan/dissectors/packet-dcm.c||epan/dissectors/packet-dcm.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-dcm.c||epan/dissectors/packet-dcm.c": [
          "File: epan/dissectors/packet-dcm.c -> epan/dissectors/packet-dcm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5712:     else                        is_little_endian = TRUE;",
          "5716:        Potentially long types. Obey vl_max",
          "5717:        ---------------------------------------------------------------------------",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5716:        and exception if vl_max is so large that it causes the offset",
          "5718:     tvb_ensure_bytes_exist(tvb, offset, vl_max);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fa315d638e769cf016385210a366a77bd197a70b",
      "candidate_info": {
        "commit_hash": "fa315d638e769cf016385210a366a77bd197a70b",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/fa315d638e769cf016385210a366a77bd197a70b",
        "files": [
          "epan/dissectors/packet-dcm.c"
        ],
        "message": "Make sure the offset doesn't overflow.\n\nIt'd only overflow if the value is *so* large that it won't fit in the\npacket (given that we have a 2^32-1-byte limit on the packet size), so\nuse tvb_ensure_bytes_exist() to ensure we have the entire value before\nprocessing the value.\n\n(The real problem is that we don't handle the case where there's a value\nmultiplicity > 1 for some types; in those cases, we should loop,\nprocessing all the values, which would cause us to eventually throw an\nexception when we ran past the end of the packet.  This is just a quick\nfix.)\n\nBug: 14742\nChange-Id: I447ece81d1c84d3b1d218faeb2c155f910208c29\nReviewed-on: https://code.wireshark.org/review/27853\nReviewed-by: Guy Harris <guy@alum.mit.edu>\n(cherry picked from commit 25118898a931589cfdea4693e056a02b7daecf10)\nReviewed-on: https://code.wireshark.org/review/27854",
        "before_after_code_files": [
          "epan/dissectors/packet-dcm.c||epan/dissectors/packet-dcm.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-dcm.c||epan/dissectors/packet-dcm.c"
          ],
          "candidate": [
            "epan/dissectors/packet-dcm.c||epan/dissectors/packet-dcm.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-dcm.c||epan/dissectors/packet-dcm.c": [
          "File: epan/dissectors/packet-dcm.c -> epan/dissectors/packet-dcm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5758:     guint encoding = (pdv->syntax == DCM_EBE) ? ENC_BIG_ENDIAN : ENC_LITTLE_ENDIAN;",
          "5762:        Potentially long types. Obey vl_max",
          "5763:        ---------------------------------------------------------------------------",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5762:        and exception if vl_max is so large that it causes the offset",
          "5764:     tvb_ensure_bytes_exist(tvb, offset, vl_max);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c1afa79ccc17c6e8a81319be03bffed4c0d7210a",
      "candidate_info": {
        "commit_hash": "c1afa79ccc17c6e8a81319be03bffed4c0d7210a",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/c1afa79ccc17c6e8a81319be03bffed4c0d7210a",
        "files": [
          "epan/dissectors/packet-dcm.c"
        ],
        "message": "Make sure the offset doesn't overflow.\n\nIt'd only overflow if the value is *so* large that it won't fit in the\npacket (given that we have a 2^32-1-byte limit on the packet size), so\nuse tvb_ensure_bytes_exist() to ensure we have the entire value before\nprocessing the value.\n\n(The real problem is that we don't handle the case where there's a value\nmultiplicity > 1 for some types; in those cases, we should loop,\nprocessing all the values, which would cause us to eventually throw an\nexception when we ran past the end of the packet.  This is just a quick\nfix.)\n\nBug: 14742\nChange-Id: I447ece81d1c84d3b1d218faeb2c155f910208c29\nReviewed-on: https://code.wireshark.org/review/27853\nReviewed-by: Guy Harris <guy@alum.mit.edu>\n(cherry picked from commit 25118898a931589cfdea4693e056a02b7daecf10)\nReviewed-on: https://code.wireshark.org/review/27855",
        "before_after_code_files": [
          "epan/dissectors/packet-dcm.c||epan/dissectors/packet-dcm.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-dcm.c||epan/dissectors/packet-dcm.c"
          ],
          "candidate": [
            "epan/dissectors/packet-dcm.c||epan/dissectors/packet-dcm.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-dcm.c||epan/dissectors/packet-dcm.c": [
          "File: epan/dissectors/packet-dcm.c -> epan/dissectors/packet-dcm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5620:     guint encoding = (pdv->syntax == DCM_EBE) ? ENC_BIG_ENDIAN : ENC_LITTLE_ENDIAN;",
          "5624:        Potentially long types. Obey vl_max",
          "5625:        ---------------------------------------------------------------------------",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5624:        and exception if vl_max is so large that it causes the offset",
          "5626:     tvb_ensure_bytes_exist(tvb, offset, vl_max);",
          "",
          "---------------"
        ]
      }
    }
  ]
}