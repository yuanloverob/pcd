{
  "cve_id": "CVE-2019-19244",
  "cve_desc": "sqlite3Select in select.c in SQLite 3.30.1 allows a crash if a sub-select uses both DISTINCT and window functions, and also has certain ORDER BY usage.",
  "repo": "sqlite/sqlite",
  "patch_hash": "e59c562b3f6894f84c715772c4b116d7b5c01348",
  "patch_info": {
    "commit_hash": "e59c562b3f6894f84c715772c4b116d7b5c01348",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/e59c562b3f6894f84c715772c4b116d7b5c01348",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/window1.test"
    ],
    "message": "Fix a crash that could occur if a sub-select that uses both DISTINCT and window functions also used an ORDER BY that is the same as its select list.\n\nFossilOrigin-Name: bcdd66c1691955c697f3d756c2b035acfe98f6aad72e90b0021bab6e9023b3ba",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/window1.test||test/window1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 6a64fb6a2da6c98f1e87b55ad5689967e1db4eae2e08345471d95e28cd567e0f",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "6065:   if( (p->selFlags & (SF_Distinct|SF_Aggregate))==SF_Distinct",
      "6066:    && sqlite3ExprListCompare(sSort.pOrderBy, pEList, -1)==0",
      "6067:   ){",
      "6068:     p->selFlags &= ~SF_Distinct;",
      "6069:     pGroupBy = p->pGroupBy = sqlite3ExprListDup(db, pEList, 0);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6067:    && p->pWin==0",
      "",
      "---------------"
    ],
    "test/window1.test||test/window1.test": [
      "File: test/window1.test -> test/window1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "1243:   ALTER TABLE a0 RENAME TO S;",
      "1244: } {1 {error in view a: 1st ORDER BY term does not match any column in the result set}}",
      "1246: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1246: reset_db",
      "1247: do_execsql_test 33.1 {",
      "1248:   CREATE TABLE t1(aa, bb);",
      "1249:   INSERT INTO t1 VALUES(1, 2);",
      "1250:   INSERT INTO t1 VALUES(5, 6);",
      "1251:   CREATE TABLE t2(x);",
      "1252:   INSERT INTO t2 VALUES(1);",
      "1253: }",
      "1254: do_execsql_test 33.2 {",
      "1255:   SELECT (SELECT DISTINCT sum(aa) OVER() FROM t1 ORDER BY 1), x FROM t2",
      "1256:   ORDER BY 1;",
      "1257: } {6 1}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "996f5ccb3328b12e8b8c65b0f536e1f717a60067",
      "candidate_info": {
        "commit_hash": "996f5ccb3328b12e8b8c65b0f536e1f717a60067",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/996f5ccb3328b12e8b8c65b0f536e1f717a60067",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c"
        ],
        "message": "Fix an incorrect assert() in balance_nonroot().\n\nFossilOrigin-Name: 59c9e73f86b89ee17b0bce47bcb93f5b5ace5b7985678287195002afb9d40cd8",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 9ec92939cb2d2c96ae15bc496feed233ce31424c25a6bf86ace7e0ef3eedec5b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "6664:   assert( pPage->nOverflow<=ArraySize(pPage->apOvfl) );",
          "6665:   assert( ArraySize(pPage->apOvfl)==ArraySize(pPage->aiOvfl) );",
          "6666:   assert( sqlite3_mutex_held(pPage->pBt->mutex) );",
          "6673:   assert( pPage->nFree>=0 );",
          "6674:   if( pPage->nOverflow || sz+2>pPage->nFree ){",
          "6675:     if( pTemp ){",
          "",
          "[Removed Lines]",
          "6672:   assert( sz==pPage->xCellSize(pPage, pCell) || (sz==8 && iChild>0) );",
          "",
          "[Added Lines]",
          "6667:   assert( sz==pPage->xCellSize(pPage, pCell) || CORRUPT_DB );",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "57c45147207fcf1d94a8a3a324ecf4d19922dfa1",
      "candidate_info": {
        "commit_hash": "57c45147207fcf1d94a8a3a324ecf4d19922dfa1",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/57c45147207fcf1d94a8a3a324ecf4d19922dfa1",
        "files": [
          "ext/rbu/rbuvacuum4.test",
          "ext/rbu/sqlite3rbu.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Optimize further cases of restarting an RBU vacuum.\n\nFossilOrigin-Name: 6b3261bfa1d762aa29a57244a30cf5e35655f1fe9c30ee682c186dec29d7a2c2",
        "before_after_code_files": [
          "ext/rbu/rbuvacuum4.test||ext/rbu/rbuvacuum4.test",
          "ext/rbu/sqlite3rbu.c||ext/rbu/sqlite3rbu.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/rbu/rbuvacuum4.test||ext/rbu/rbuvacuum4.test": [
          "File: ext/rbu/rbuvacuum4.test -> ext/rbu/rbuvacuum4.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2019 Jan 3",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #***********************************************************************",
          "11: #",
          "12: # This file contains tests for the RBU module. More specifically, it",
          "13: # contains tests to ensure that the sqlite3rbu_vacuum() API works as",
          "14: # expected.",
          "15: #",
          "17: source [file join [file dirname [info script]] rbu_common.tcl]",
          "18: set testprefix rbuvacuum4",
          "20: set step 1",
          "22: do_execsql_test 1.0 {",
          "23:   CREATE TABLE t1(a PRIMARY KEY, b, c) WITHOUT ROWID;",
          "24:   INSERT INTO t1 VALUES(1, 2, 3);",
          "25:   INSERT INTO t1 VALUES(4, 5, 6);",
          "26:   INSERT INTO t1 VALUES(7, 8, 9);",
          "27: }",
          "28: do_rbu_vacuum_test 1.1 1",
          "30: #-------------------------------------------------------------------------",
          "31: reset_db",
          "33: do_execsql_test 2.0 {",
          "34:   CREATE TABLE t1(a, b, c, PRIMARY KEY(a, b, c)) WITHOUT ROWID;",
          "35:   INSERT INTO t1 VALUES(1, 2, 3);",
          "36:   INSERT INTO t1 VALUES(4, 5, 6);",
          "37:   INSERT INTO t1 VALUES(7, 8, 9);",
          "38: }",
          "39: do_rbu_vacuum_test 2.1 1",
          "40: do_execsql_test 2.2 {",
          "41:   SELECT * FROM t1;",
          "42: } {1 2 3 4 5 6 7 8 9}",
          "44: #-------------------------------------------------------------------------",
          "45: reset_db",
          "47: do_execsql_test 3.0 {",
          "48:   CREATE TABLE t1(a INTEGER PRIMARY KEY, b, c);",
          "49:   CREATE INDEX i1 oN t1(b, c);",
          "50:   INSERT INTO t1 VALUES(1, 2, 3);",
          "51:   INSERT INTO t1 VALUES(4, 5, 6);",
          "52:   INSERT INTO t1 VALUES(7, 8, 9);",
          "53: }",
          "55: do_rbu_vacuum_test 3.1 1",
          "57: do_execsql_test 3.2 {",
          "58:   SELECT * FROM t1;",
          "59: } {1 2 3 4 5 6 7 8 9}",
          "61: #-------------------------------------------------------------------------",
          "62: reset_db",
          "63: do_execsql_test 4.0 {",
          "64:   CREATE TABLE x1(a, b, c, d, PRIMARY KEY(c, b)) WITHOUT ROWID;",
          "65:   INSERT INTO x1 VALUES(1, 1, 1, 1);",
          "66:   INSERT INTO x1 VALUES(1, 1, 2, 1);",
          "67:   INSERT INTO x1 VALUES(1, 2, 2, 1);",
          "69:   INSERT INTO x1 VALUES(NULL, 2, 3, NULL);",
          "70:   INSERT INTO x1 VALUES(NULL, 2, 4, NULL);",
          "71:   INSERT INTO x1 VALUES(NULL, 2, 5, NULL);",
          "73:   CREATE INDEX x1ad ON x1(d, a);",
          "74: }",
          "76: do_rbu_vacuum_test 4.1.1 1",
          "78: do_execsql_test 4.2 {",
          "79:   SELECT count(*) fROM x1",
          "80: } 6",
          "82: do_rbu_vacuum_test 4.1.2 0",
          "84: finish_test",
          "",
          "---------------"
        ],
        "ext/rbu/sqlite3rbu.c||ext/rbu/sqlite3rbu.c": [
          "File: ext/rbu/sqlite3rbu.c -> ext/rbu/sqlite3rbu.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1476:           zSelect = rbuMPrintf(p, \"%z%squote(\\\"%w\\\")\", zSelect, zSep2, zCol);",
          "1477:           zSep = \", \";",
          "1478:           zSep2 = \"||','||\";",
          "1479:         }",
          "1480:       }",
          "1481:       if( i==pIter->nTblCol ) break;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1479:           break;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1503:   return zRet;",
          "1504: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1507: char *rbuVacuumIndexStart(",
          "1508:   sqlite3rbu *p,",
          "1509:   RbuObjIter *pIter",
          "1510: ){",
          "1511:   char *zOrder = 0;",
          "1512:   char *zLhs = 0;",
          "1513:   char *zSelect = 0;",
          "1514:   char *zVector = 0;",
          "1515:   char *zRet = 0;",
          "1516:   int bFailed = 0;",
          "1518:   if( p->rc==SQLITE_OK ){",
          "1519:     const char *zSep = \"\";",
          "1520:     int iCol = 0;",
          "1521:     sqlite3_stmt *pXInfo = 0;",
          "1522:     p->rc = prepareFreeAndCollectError(p->dbMain, &pXInfo, &p->zErrmsg,",
          "1523:         sqlite3_mprintf(\"PRAGMA main.index_xinfo = %Q\", pIter->zIdx)",
          "1524:     );",
          "1525:     while( p->rc==SQLITE_OK && SQLITE_ROW==sqlite3_step(pXInfo) ){",
          "1526:       int iCid = sqlite3_column_int(pXInfo, 1);",
          "1527:       const char *zCollate = (const char*)sqlite3_column_text(pXInfo, 4);",
          "1528:       const char *zCol;",
          "1529:       if( sqlite3_column_int(pXInfo, 3) ){",
          "1530:         bFailed = 1;",
          "1531:         break;",
          "1532:       }",
          "1534:       if( iCid<0 ){",
          "1535:         if( pIter->eType==RBU_PK_IPK ){",
          "1536:           int i;",
          "1537:           for(i=0; pIter->abTblPk[i]==0; i++);",
          "1538:           assert( i<pIter->nTblCol );",
          "1539:           zCol = pIter->azTblCol[i];",
          "1540:         }else{",
          "1541:           zCol = \"_rowid_\";",
          "1542:         }",
          "1543:       }else{",
          "1544:         zCol = pIter->azTblCol[iCid];",
          "1545:       }",
          "1547:       zLhs = rbuMPrintf(p, \"%z%s \\\"%w\\\" COLLATE %Q\",",
          "1548:           zLhs, zSep, zCol, zCollate",
          "1549:       );",
          "1550:       zOrder = rbuMPrintf(p, \"%z%s \\\"rbu_imp_%d%w\\\" COLLATE %Q DESC\",",
          "1551:           zOrder, zSep, iCol, zCol, zCollate",
          "1552:       );",
          "1553:       zSelect = rbuMPrintf(p, \"%z%s quote(\\\"rbu_imp_%d%w\\\")\",",
          "1554:           zSelect, zSep, iCol, zCol",
          "1555:       );",
          "1556:       zSep = \", \";",
          "1557:       iCol++;",
          "1558:     }",
          "1559:     rbuFinalize(p, pXInfo);",
          "1560:   }",
          "1561:   if( bFailed ) goto index_start_out;",
          "1563:   if( p->rc==SQLITE_OK ){",
          "1564:     int iCol;",
          "1565:     sqlite3_stmt *pSel = 0;",
          "1567:     if( p->rc==SQLITE_OK ){",
          "1568:       p->rc = prepareFreeAndCollectError(p->dbMain, &pSel, &p->zErrmsg,",
          "1569:           sqlite3_mprintf(\"SELECT %s FROM \\\"rbu_imp_%w\\\" ORDER BY %s LIMIT 1\",",
          "1570:             zSelect, pIter->zTbl, zOrder",
          "1571:           )",
          "1572:       );",
          "1573:     }",
          "1574:     if( p->rc==SQLITE_OK && SQLITE_ROW==sqlite3_step(pSel) ){",
          "1575:       const char *zSep = \"\";",
          "1576:       for(iCol=0; iCol<pIter->nCol; iCol++){",
          "1577:         const char *zQuoted = (const char*)sqlite3_column_text(pSel, iCol);",
          "1578:         if( zQuoted[0]=='N' ){",
          "1579:           bFailed = 1;",
          "1580:           break;",
          "1581:         }",
          "1582:         zVector = rbuMPrintf(p, \"%z%s%s\", zVector, zSep, zQuoted);",
          "1583:         zSep = \", \";",
          "1584:       }",
          "1586:       if( !bFailed ){",
          "1587:         zRet = rbuMPrintf(p, \"(%s) > (%s)\", zLhs, zVector);",
          "1588:       }",
          "1589:     }",
          "1590:     rbuFinalize(p, pSel);",
          "1591:   }",
          "1593:  index_start_out:",
          "1594:   sqlite3_free(zOrder);",
          "1595:   sqlite3_free(zSelect);",
          "1596:   sqlite3_free(zVector);",
          "1597:   sqlite3_free(zLhs);",
          "1598:   return zRet;",
          "1599: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2179:       if( p->rc==SQLITE_OK ){",
          "2180:         char *zSql;",
          "2181:         if( rbuIsVacuum(p) ){",
          "2182:           zSql = sqlite3_mprintf(",
          "2184:               zCollist,",
          "2185:               pIter->zDataTbl,",
          "2187:           );",
          "2188:         }else",
          "2190:         if( pIter->eType==RBU_PK_EXTERNAL || pIter->eType==RBU_PK_NONE ){",
          "",
          "[Removed Lines]",
          "2183:               \"SELECT %s, 0 AS rbu_control FROM '%q' %s ORDER BY %s%s\",",
          "2186:               zPart, zCollist, zLimit",
          "",
          "[Added Lines]",
          "2277:           const char *zStart = 0;",
          "2278:           if( nOffset ){",
          "2279:             zStart = rbuVacuumIndexStart(p, pIter);",
          "2280:             if( zStart ){",
          "2281:               sqlite3_free(zLimit);",
          "2282:               zLimit = 0;",
          "2283:             }",
          "2284:           }",
          "2287:               \"SELECT %s, 0 AS rbu_control FROM '%q' %s %s %s ORDER BY %s%s\",",
          "2290:               zPart,",
          "2291:               (zStart ? (zPart ? \"AND\" : \"WHERE\") : \"\"), zStart,",
          "2292:               zCollist, zLimit",
          "2294:           sqlite3_free(zStart);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2207:               zCollist, zLimit",
          "2208:           );",
          "2209:         }",
          "2211:       }",
          "2213:       sqlite3_free(zImposterCols);",
          "",
          "[Removed Lines]",
          "2210:         p->rc = prepareFreeAndCollectError(p->dbRbu, &pIter->pSelect, pz, zSql);",
          "",
          "[Added Lines]",
          "2317:         if( p->rc==SQLITE_OK ){",
          "2318:           p->rc = prepareFreeAndCollectError(p->dbRbu,&pIter->pSelect,pz,zSql);",
          "2319:         }else{",
          "2320:           sqlite3_free(zSql);",
          "2321:         }",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: cdc09867ed6522026ae7bfac1f59cd79b60fba6d07d49b99b030a501a7059ee4",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "df9d32441a3d2abf62ecfec60f2605dc1630b76b",
      "candidate_info": {
        "commit_hash": "df9d32441a3d2abf62ecfec60f2605dc1630b76b",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/df9d32441a3d2abf62ecfec60f2605dc1630b76b",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c",
          "src/expr.c",
          "src/parse.y",
          "src/prepare.c",
          "src/resolve.c",
          "src/select.c",
          "src/sqliteInt.h",
          "src/vdbeaux.c",
          "src/walker.c",
          "src/window.c",
          "test/filter1.test",
          "test/filter2.tcl",
          "test/filter2.test",
          "test/window2.tcl",
          "test/window2.test"
        ],
        "message": "Add support for attaching a FILTER clause to an aggregate function.\n\nFossilOrigin-Name: ee293e5aeac0b05a8b809095610fd8b4fdaf8e68cd368de90ec0d45e3582ffe5",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c",
          "src/expr.c||src/expr.c",
          "src/parse.y||src/parse.y",
          "src/prepare.c||src/prepare.c",
          "src/resolve.c||src/resolve.c",
          "src/select.c||src/select.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/vdbeaux.c||src/vdbeaux.c",
          "src/walker.c||src/walker.c",
          "src/window.c||src/window.c",
          "test/filter1.test||test/filter1.test",
          "test/filter2.tcl||test/filter2.tcl",
          "test/filter2.test||test/filter2.test",
          "test/window2.tcl||test/window2.tcl",
          "test/window2.test||test/window2.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/select.c||src/select.c"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/select.c||src/select.c"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 0d7287e1bfdd5a392bf2fb17699e7cfd0b08bf61fab6cbf4b4bb347b3c4b4610",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "8307:   VVA_ONLY( int balance_deeper_called = 0 );",
          "8309:   do {",
          "8311:     MemPage *pPage = pCur->pPage;",
          "8313:     if( NEVER(pPage->nFree<0) && btreeComputeFreeSpace(pPage) ) break;",
          "8315:       if( pPage->nOverflow ){",
          "",
          "[Removed Lines]",
          "8310:     int iPage = pCur->iPage;",
          "8314:     if( iPage==0 ){",
          "",
          "[Added Lines]",
          "8310:     int iPage;",
          "8314:     if( pPage->nOverflow==0 && pPage->nFree<=nMin ){",
          "8315:       break;",
          "8316:     }else if( (iPage = pCur->iPage)==0 ){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "8332:       }else{",
          "8333:         break;",
          "8334:       }",
          "8337:     }else{",
          "8338:       MemPage * const pParent = pCur->apPage[iPage-1];",
          "8339:       int const iIdx = pCur->aiIdx[iPage-1];",
          "",
          "[Removed Lines]",
          "8335:     }else if( pPage->nOverflow==0 && pPage->nFree<=nMin ){",
          "8336:       break;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1040:     assert( p->x.pList==0 || p->pRight==0 );",
          "1041:     if( p->pLeft && p->op!=TK_SELECT_COLUMN ) sqlite3ExprDeleteNN(db, p->pLeft);",
          "1042:     if( p->pRight ){",
          "1043:       sqlite3ExprDeleteNN(db, p->pRight);",
          "1044:     }else if( ExprHasProperty(p, EP_xIsSelect) ){",
          "1045:       sqlite3SelectDelete(db, p->x.pSelect);",
          "1046:     }else{",
          "1047:       sqlite3ExprListDelete(db, p->x.pList);",
          "1052:     }",
          "1053:   }",
          "1054:   if( ExprHasProperty(p, EP_MemToken) ) sqlite3DbFree(db, p->u.zToken);",
          "",
          "[Removed Lines]",
          "1048:     }",
          "1049:     if( ExprHasProperty(p, EP_WinFunc) ){",
          "1050:       assert( p->op==TK_FUNCTION );",
          "1051:       sqlite3WindowDelete(db, p->y.pWin);",
          "",
          "[Added Lines]",
          "1043:       assert( !ExprHasProperty(p, EP_WinFunc) );",
          "1046:       assert( !ExprHasProperty(p, EP_WinFunc) );",
          "1050: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "1051:       if( ExprHasProperty(p, EP_WinFunc) ){",
          "1052:         sqlite3WindowDelete(db, p->y.pWin);",
          "1053:       }",
          "1054: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1334: static int gatherSelectWindowsCallback(Walker *pWalker, Expr *pExpr){",
          "1337:     pExpr->y.pWin->pNextWin = pWalker->u.pSelect->pWin;",
          "1338:     pWalker->u.pSelect->pWin = pExpr->y.pWin;",
          "1339:   }",
          "",
          "[Removed Lines]",
          "1335:   if( pExpr->op==TK_FUNCTION && pExpr->y.pWin!=0 ){",
          "1336:     assert( ExprHasProperty(pExpr, EP_WinFunc) );",
          "",
          "[Added Lines]",
          "1338:   if( pExpr->op==TK_FUNCTION && ExprHasProperty(pExpr, EP_WinFunc) ){",
          "1339:     assert( pExpr->y.pWin );",
          "1340:     assert( IsWindowFunc(pExpr) );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4839:     return 2;",
          "4840:   }",
          "4841:   if( pA->op!=TK_COLUMN && pA->op!=TK_AGG_COLUMN && pA->u.zToken ){",
          "4843:       if( sqlite3StrICmp(pA->u.zToken,pB->u.zToken)!=0 ) return 2;",
          "4844: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "4854:       if( ExprHasProperty(pA,EP_WinFunc) ){",
          "4856:       }",
          "4857: #endif",
          "4858:     }else if( pA->op==TK_NULL ){",
          "",
          "[Removed Lines]",
          "4842:     if( pA->op==TK_FUNCTION ){",
          "4853:       assert( ExprHasProperty(pA,EP_WinFunc)==ExprHasProperty(pB,EP_WinFunc) );",
          "4855:         if( sqlite3WindowCompare(pParse,pA->y.pWin,pB->y.pWin)!=0 ) return 2;",
          "",
          "[Added Lines]",
          "4846:     if( pA->op==TK_FUNCTION || pA->op==TK_AGG_FUNCTION ){",
          "4849:       assert( pA->op==pB->op );",
          "4850:       if( ExprHasProperty(pA,EP_WinFunc)!=ExprHasProperty(pB,EP_WinFunc) ){",
          "4851:         return 2;",
          "4852:       }",
          "4854:         if( sqlite3WindowCompare(pParse, pA->y.pWin, pB->y.pWin, 1)!=0 ){",
          "4855:           return 2;",
          "4856:         }",
          "",
          "---------------"
        ],
        "src/parse.y||src/parse.y": [
          "File: src/parse.y -> src/parse.y",
          "--- Hunk 1 ---",
          "[Context before]",
          "1044: }",
          "1046: %ifndef SQLITE_OMIT_WINDOWFUNC",
          "1048:   A = sqlite3ExprFunction(pParse, Y, &X, D);",
          "1049:   sqlite3WindowAttach(pParse, A, Z);",
          "1050: }",
          "1052:   A = sqlite3ExprFunction(pParse, 0, &X, 0);",
          "1053:   sqlite3WindowAttach(pParse, A, Z);",
          "1054: }",
          "",
          "[Removed Lines]",
          "1047: expr(A) ::= id(X) LP distinct(D) exprlist(Y) RP over_clause(Z). {",
          "1051: expr(A) ::= id(X) LP STAR RP over_clause(Z). {",
          "",
          "[Added Lines]",
          "1047: expr(A) ::= id(X) LP distinct(D) exprlist(Y) RP filter_over(Z). {",
          "1051: expr(A) ::= id(X) LP STAR RP filter_over(Z). {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1657: %type part_opt {ExprList*}",
          "1658: %destructor part_opt {sqlite3ExprListDelete(pParse->db, $$);}",
          "1663: %type range_or_rows {int}",
          "",
          "[Removed Lines]",
          "1660: %type filter_opt {Expr*}",
          "1661: %destructor filter_opt {sqlite3ExprDelete(pParse->db, $$);}",
          "",
          "[Added Lines]",
          "1660: %type filter_clause {Expr*}",
          "1661: %destructor filter_clause {sqlite3ExprDelete(pParse->db, $$);}",
          "1663: %type over_clause {Window*}",
          "1664: %destructor over_clause {sqlite3WindowDelete(pParse->db, $$);}",
          "1666: %type filter_over {Window*}",
          "1667: %destructor filter_over {sqlite3WindowDelete(pParse->db, $$);}",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1724: %destructor window_clause {sqlite3WindowListDelete(pParse->db, $$);}",
          "1725: window_clause(A) ::= WINDOW windowdefn_list(B). { A = B; }",
          "1730:   A = Z;",
          "1731:   assert( A!=0 );",
          "1733: }",
          "1735:   A = (Window*)sqlite3DbMallocZero(pParse->db, sizeof(Window));",
          "1736:   if( A ){",
          "1737:     A->zName = sqlite3DbStrNDup(pParse->db, Z.z, Z.n);",
          "1741:   }",
          "1742: }",
          "",
          "[Removed Lines]",
          "1727: %type over_clause {Window*}",
          "1728: %destructor over_clause {sqlite3WindowDelete(pParse->db, $$);}",
          "1729: over_clause(A) ::= filter_opt(W) OVER LP window(Z) RP. {",
          "1732:   A->pFilter = W;",
          "1734: over_clause(A) ::= filter_opt(W) OVER nm(Z). {",
          "1738:     A->pFilter = W;",
          "1739:   }else{",
          "1740:     sqlite3ExprDelete(pParse->db, W);",
          "1744: filter_opt(A) ::= .                            { A = 0; }",
          "1745: filter_opt(A) ::= FILTER LP WHERE expr(X) RP.  { A = X; }",
          "",
          "[Added Lines]",
          "1733: filter_over(A) ::= filter_clause(F) over_clause(O). {",
          "1734:   O->pFilter = F;",
          "1735:   A = O;",
          "1736: }",
          "1737: filter_over(A) ::= over_clause(O). {",
          "1738:   A = O;",
          "1739: }",
          "1740: filter_over(A) ::= filter_clause(F). {",
          "1741:   A = (Window*)sqlite3DbMallocZero(pParse->db, sizeof(Window));",
          "1742:   if( A ){",
          "1743:     A->eFrmType = TK_FILTER;",
          "1744:     A->pFilter = F;",
          "1745:   }",
          "1746: }",
          "1748: over_clause(A) ::= OVER LP window(Z) RP. {",
          "1752: over_clause(A) ::= OVER nm(Z). {",
          "1759: filter_clause(A) ::= FILTER LP WHERE expr(X) RP.  { A = X; }",
          "",
          "---------------"
        ],
        "src/prepare.c||src/prepare.c": [
          "File: src/prepare.c -> src/prepare.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "635:   rc = sParse.rc;",
          "637: #ifndef SQLITE_OMIT_EXPLAIN",
          "639:     static const char * const azColName[] = {",
          "640:        \"addr\", \"opcode\", \"p1\", \"p2\", \"p3\", \"p4\", \"p5\", \"comment\",",
          "641:        \"id\", \"parent\", \"notused\", \"detail\"",
          "",
          "[Removed Lines]",
          "638:   if( rc==SQLITE_OK && sParse.pVdbe && sParse.explain ){",
          "",
          "[Added Lines]",
          "638:   if( sParse.explain && rc==SQLITE_OK && sParse.pVdbe ){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "660:   if( db->init.busy==0 ){",
          "661:     sqlite3VdbeSetSql(sParse.pVdbe, zSql, (int)(sParse.zTail-zSql), prepFlags);",
          "662:   }",
          "665:     assert(!(*ppStmt));",
          "666:   }else{",
          "",
          "[Removed Lines]",
          "663:   if( sParse.pVdbe && (rc!=SQLITE_OK || db->mallocFailed) ){",
          "664:     sqlite3VdbeFinalize(sParse.pVdbe);",
          "",
          "[Added Lines]",
          "663:   if( rc!=SQLITE_OK || db->mallocFailed ){",
          "664:     if( sParse.pVdbe ) sqlite3VdbeFinalize(sParse.pVdbe);",
          "",
          "---------------"
        ],
        "src/resolve.c||src/resolve.c": [
          "File: src/resolve.c -> src/resolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "751:       int savedAllowFlags = (pNC->ncFlags & (NC_AllowAgg | NC_AllowWin));",
          "753:       assert( !ExprHasProperty(pExpr, EP_xIsSelect) );",
          "754:       zId = pExpr->u.zToken;",
          "755:       nId = sqlite3Strlen30(zId);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "752: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "753:       Window *pWin = (IsWindowFunc(pExpr) ? pExpr->y.pWin : 0);",
          "754: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "830:           || (pDef->xValue==0 && pDef->xInverse==0)",
          "831:           || (pDef->xValue && pDef->xInverse && pDef->xSFunc && pDef->xFinalize)",
          "832:         );",
          "834:           sqlite3ErrorMsg(pParse,",
          "835:               \"%.*s() may not be used as a window function\", nId, zId",
          "836:           );",
          "837:           pNC->nErr++;",
          "838:         }else if(",
          "839:               (is_agg && (pNC->ncFlags & NC_AllowAgg)==0)",
          "842:         ){",
          "843:           const char *zType;",
          "845:             zType = \"window\";",
          "846:           }else{",
          "847:             zType = \"aggregate\";",
          "",
          "[Removed Lines]",
          "833:         if( pDef && pDef->xValue==0 && ExprHasProperty(pExpr, EP_WinFunc) ){",
          "840:            || (is_agg && (pDef->funcFlags&SQLITE_FUNC_WINDOW) && !pExpr->y.pWin)",
          "841:            || (is_agg && pExpr->y.pWin && (pNC->ncFlags & NC_AllowWin)==0)",
          "844:           if( (pDef->funcFlags & SQLITE_FUNC_WINDOW) || pExpr->y.pWin ){",
          "",
          "[Added Lines]",
          "835:         if( pDef && pDef->xValue==0 && pWin ){",
          "842:            || (is_agg && (pDef->funcFlags&SQLITE_FUNC_WINDOW) && !pWin)",
          "843:            || (is_agg && pWin && (pNC->ncFlags & NC_AllowWin)==0)",
          "846:           if( (pDef->funcFlags & SQLITE_FUNC_WINDOW) || pWin ){",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "849:           sqlite3ErrorMsg(pParse, \"misuse of %s function %.*s()\",zType,nId,zId);",
          "850:           pNC->nErr++;",
          "851:           is_agg = 0;",
          "852:         }",
          "853: #else",
          "854:         if( (is_agg && (pNC->ncFlags & NC_AllowAgg)==0) ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "854:         }else if( is_agg==0 && ExprHasProperty(pExpr, EP_WinFunc) ){",
          "855:           assert( !IsWindowFunc(pExpr) );",
          "856:           sqlite3ErrorMsg(pParse,",
          "857:               \"filter clause may not be used with non-aggregate %.*s()\",",
          "858:               nId, zId",
          "859:           );",
          "860:           pNC->nErr++;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "876: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "878: #else",
          "879:           pNC->ncFlags &= ~NC_AllowAgg;",
          "880: #endif",
          "",
          "[Removed Lines]",
          "877:           pNC->ncFlags &= ~(NC_AllowWin | (!pExpr->y.pWin ? NC_AllowAgg : 0));",
          "",
          "[Added Lines]",
          "886:           pNC->ncFlags &= ~(NC_AllowWin | (!pWin ? NC_AllowAgg : 0));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "883:       sqlite3WalkExprList(pWalker, pList);",
          "884:       if( is_agg ){",
          "885: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "887:           Select *pSel = pNC->pWinSelect;",
          "888:           if( IN_RENAME_OBJECT==0 ){",
          "890:           }",
          "894:           if( 0==pSel->pWin",
          "896:           ){",
          "897:             pExpr->y.pWin->pNextWin = pSel->pWin;",
          "898:             pSel->pWin = pExpr->y.pWin;",
          "",
          "[Removed Lines]",
          "886:         if( pExpr->y.pWin ){",
          "889:             sqlite3WindowUpdate(pParse, pSel->pWinDefn, pExpr->y.pWin, pDef);",
          "891:           sqlite3WalkExprList(pWalker, pExpr->y.pWin->pPartition);",
          "892:           sqlite3WalkExprList(pWalker, pExpr->y.pWin->pOrderBy);",
          "893:           sqlite3WalkExpr(pWalker, pExpr->y.pWin->pFilter);",
          "895:            || 0==sqlite3WindowCompare(pParse, pSel->pWin, pExpr->y.pWin)",
          "",
          "[Added Lines]",
          "895:         if( pWin ){",
          "898:             sqlite3WindowUpdate(pParse, pSel->pWinDefn, pWin, pDef);",
          "900:           sqlite3WalkExprList(pWalker, pWin->pPartition);",
          "901:           sqlite3WalkExprList(pWalker, pWin->pOrderBy);",
          "902:           sqlite3WalkExpr(pWalker, pWin->pFilter);",
          "904:            || 0==sqlite3WindowCompare(pParse, pSel->pWin, pWin, 0)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "904:           NameContext *pNC2 = pNC;",
          "905:           pExpr->op = TK_AGG_FUNCTION;",
          "906:           pExpr->op2 = 0;",
          "907:           while( pNC2 && !sqlite3FunctionUsesThisSrc(pExpr, pNC2->pSrcList) ){",
          "908:             pExpr->op2++;",
          "909:             pNC2 = pNC2->pNext;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "916: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "917:           if( ExprHasProperty(pExpr, EP_WinFunc) ){",
          "918:             sqlite3WalkExpr(pWalker, pExpr->y.pWin->pFilter);",
          "919:           }",
          "920: #endif",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4404:   assert( *ppMinMax==0 );",
          "4405:   assert( pFunc->op==TK_AGG_FUNCTION );",
          "4407:   zFunc = pFunc->u.zToken;",
          "4408:   if( sqlite3StrICmp(zFunc, \"min\")==0 ){",
          "4409:     eRet = WHERE_ORDERBY_MIN;",
          "",
          "[Removed Lines]",
          "4406:   if( pEList==0 || pEList->nExpr!=1 ) return eRet;",
          "",
          "[Added Lines]",
          "4406:   assert( !IsWindowFunc(pFunc) );",
          "4407:   if( pEList==0 || pEList->nExpr!=1 || ExprHasProperty(pFunc, EP_WinFunc) ){",
          "4408:     return eRet;",
          "4409:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4450:   if( pExpr->op!=TK_AGG_FUNCTION ) return 0;",
          "4451:   if( NEVER(pAggInfo->nFunc==0) ) return 0;",
          "4452:   if( (pAggInfo->aFunc[0].pFunc->funcFlags&SQLITE_FUNC_COUNT)==0 ) return 0;",
          "4455:   return pTab;",
          "4456: }",
          "",
          "[Removed Lines]",
          "4453:   if( pExpr->flags&EP_Distinct ) return 0;",
          "",
          "[Added Lines]",
          "4456:   if( ExprHasProperty(pExpr, EP_Distinct|EP_WinFunc) ) return 0;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "5330:     int regAgg;",
          "5331:     ExprList *pList = pF->pExpr->x.pList;",
          "5332:     assert( !ExprHasProperty(pF->pExpr, EP_xIsSelect) );",
          "5333:     if( pList ){",
          "5334:       nArg = pList->nExpr;",
          "5335:       regAgg = sqlite3GetTempRange(pParse, nArg);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5336:     assert( !IsWindowFunc(pF->pExpr) );",
          "5337:     if( ExprHasProperty(pF->pExpr, EP_WinFunc) ){",
          "5338:       Expr *pFilter = pF->pExpr->y.pWin->pFilter;",
          "5339:       addrNext = sqlite3VdbeMakeLabel(pParse);",
          "5340:       sqlite3ExprIfFalse(pParse, pFilter, addrNext, SQLITE_JUMPIFNULL);",
          "5341:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "5339:       regAgg = 0;",
          "5340:     }",
          "5341:     if( pF->iDistinct>=0 ){",
          "5345:       codeDistinct(pParse, pF->iDistinct, addrNext, 1, regAgg);",
          "",
          "[Removed Lines]",
          "5342:       addrNext = sqlite3VdbeMakeLabel(pParse);",
          "",
          "[Added Lines]",
          "5351:       if( addrNext==0 ){",
          "5352:         addrNext = sqlite3VdbeMakeLabel(pParse);",
          "5353:       }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "6222:       minMaxFlag = WHERE_ORDERBY_NORMAL;",
          "6223:     }",
          "6224:     for(i=0; i<sAggInfo.nFunc; i++){",
          "6226:       sNC.ncFlags |= NC_InAggFunc;",
          "6228:       sNC.ncFlags &= ~NC_InAggFunc;",
          "6229:     }",
          "6230:     sAggInfo.mxReg = pParse->nMem;",
          "",
          "[Removed Lines]",
          "6225:       assert( !ExprHasProperty(sAggInfo.aFunc[i].pExpr, EP_xIsSelect) );",
          "6227:       sqlite3ExprAnalyzeAggList(&sNC, sAggInfo.aFunc[i].pExpr->x.pList);",
          "",
          "[Added Lines]",
          "6236:       Expr *pExpr = sAggInfo.aFunc[i].pExpr;",
          "6237:       assert( !ExprHasProperty(pExpr, EP_xIsSelect) );",
          "6239:       sqlite3ExprAnalyzeAggList(&sNC, pExpr->x.pList);",
          "6240: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "6241:       assert( !IsWindowFunc(pExpr) );",
          "6242:       if( ExprHasProperty(pExpr, EP_WinFunc) ){",
          "6243:         sqlite3ExprAnalyzeAggregates(&sNC, pExpr->y.pWin->pFilter);",
          "6244:       }",
          "6245: #endif",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2586: #define IsWindowFunc(p) ( \\",
          "2587:     ExprHasProperty((p), EP_WinFunc) && p->y.pWin->eFrmType!=TK_FILTER \\",
          "2588: )",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3603: void sqlite3WindowListDelete(sqlite3 *db, Window *p);",
          "3604: Window *sqlite3WindowAlloc(Parse*, int, int, Expr*, int , Expr*, u8);",
          "3605: void sqlite3WindowAttach(Parse*, Expr*, Window*);",
          "3607: void sqlite3WindowCodeInit(Parse*, Window*);",
          "3608: void sqlite3WindowCodeStep(Parse*, Select*, WhereInfo*, int, int);",
          "3609: int sqlite3WindowRewrite(Parse*, Select*);",
          "",
          "[Removed Lines]",
          "3606: int sqlite3WindowCompare(Parse*, Window*, Window*);",
          "",
          "[Added Lines]",
          "3619: int sqlite3WindowCompare(Parse*, Window*, Window*, int);",
          "",
          "---------------"
        ],
        "src/vdbeaux.c||src/vdbeaux.c": [
          "File: src/vdbeaux.c -> src/vdbeaux.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4607:     nCmp = MIN( pPKey2->aMem[0].n, nStr );",
          "4608:     res = memcmp(&aKey1[szHdr], pPKey2->aMem[0].z, nCmp);",
          "4611:       res = nStr - pPKey2->aMem[0].n;",
          "4612:       if( res==0 ){",
          "4613:         if( pPKey2->nField>1 ){",
          "",
          "[Removed Lines]",
          "4610:     if( res==0 ){",
          "",
          "[Added Lines]",
          "4610:     if( res>0 ){",
          "4611:       res = pPKey2->r2;",
          "4612:     }else if( res<0 ){",
          "4613:       res = pPKey2->r1;",
          "4614:     }else{",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4621:       }else{",
          "4622:         res = pPKey2->r1;",
          "4623:       }",
          "4628:     }",
          "4629:   }",
          "",
          "[Removed Lines]",
          "4624:     }else if( res>0 ){",
          "4625:       res = pPKey2->r2;",
          "4626:     }else{",
          "4627:       res = pPKey2->r1;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/walker.c||src/walker.c": [
          "File: src/walker.c -> src/walker.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "63:       if( pExpr->pLeft && walkExpr(pWalker, pExpr->pLeft) ) return WRC_Abort;",
          "64:        assert( pExpr->x.pList==0 || pExpr->pRight==0 );",
          "65:       if( pExpr->pRight ){",
          "66:         pExpr = pExpr->pRight;",
          "67:         continue;",
          "68:       }else if( ExprHasProperty(pExpr, EP_xIsSelect) ){",
          "69:         if( sqlite3WalkSelect(pWalker, pExpr->x.pSelect) ) return WRC_Abort;",
          "73: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "77: #endif",
          "78:     }",
          "79:     break;",
          "80:   }",
          "",
          "[Removed Lines]",
          "70:       }else if( pExpr->x.pList ){",
          "71:         if( sqlite3WalkExprList(pWalker, pExpr->x.pList) ) return WRC_Abort;",
          "72:       }",
          "74:       if( ExprHasProperty(pExpr, EP_WinFunc) ){",
          "75:         if( walkWindowList(pWalker, pExpr->y.pWin) ) return WRC_Abort;",
          "76:       }",
          "",
          "[Added Lines]",
          "66:         assert( !ExprHasProperty(pExpr, EP_WinFunc) );",
          "70:         assert( !ExprHasProperty(pExpr, EP_WinFunc) );",
          "72:       }else{",
          "73:         if( pExpr->x.pList ){",
          "74:           if( sqlite3WalkExprList(pWalker, pExpr->x.pList) ) return WRC_Abort;",
          "75:         }",
          "77:         if( ExprHasProperty(pExpr, EP_WinFunc) ){",
          "78:           if( walkWindowList(pWalker, pExpr->y.pWin) ) return WRC_Abort;",
          "79:         }",
          "81:       }",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1196: void sqlite3WindowAttach(Parse *pParse, Expr *p, Window *pWin){",
          "1197:   if( p ){",
          "1198:     assert( p->op==TK_FUNCTION );",
          "1210:     }",
          "1211:   }else{",
          "1212:     sqlite3WindowDelete(pParse->db, pWin);",
          "",
          "[Removed Lines]",
          "1202:     if( ALWAYS(pWin) ){",
          "1203:       p->y.pWin = pWin;",
          "1204:       ExprSetProperty(p, EP_WinFunc);",
          "1205:       pWin->pOwner = p;",
          "1206:       if( p->flags & EP_Distinct ){",
          "1207:         sqlite3ErrorMsg(pParse,",
          "1208:            \"DISTINCT is not supported for window functions\");",
          "1209:       }",
          "",
          "[Added Lines]",
          "1199:     assert( pWin );",
          "1200:     p->y.pWin = pWin;",
          "1201:     ExprSetProperty(p, EP_WinFunc);",
          "1202:     pWin->pOwner = p;",
          "1203:     if( (p->flags & EP_Distinct) && pWin->eFrmType!=TK_FILTER ){",
          "1204:       sqlite3ErrorMsg(pParse,",
          "1205:           \"DISTINCT is not supported for window functions\"",
          "1206:       );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1221:   if( p1->eFrmType!=p2->eFrmType ) return 1;",
          "1222:   if( p1->eStart!=p2->eStart ) return 1;",
          "1223:   if( p1->eEnd!=p2->eEnd ) return 1;",
          "",
          "[Removed Lines]",
          "1220: int sqlite3WindowCompare(Parse *pParse, Window *p1, Window *p2){",
          "",
          "[Added Lines]",
          "1217: int sqlite3WindowCompare(Parse *pParse, Window *p1, Window *p2, int bFilter){",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1226:   if( sqlite3ExprCompare(pParse, p1->pEnd, p2->pEnd, -1) ) return 1;",
          "1227:   if( sqlite3ExprListCompare(p1->pPartition, p2->pPartition, -1) ) return 1;",
          "1228:   if( sqlite3ExprListCompare(p1->pOrderBy, p2->pOrderBy, -1) ) return 1;",
          "1229:   return 0;",
          "1230: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1226:   if( bFilter ){",
          "1227:     if( sqlite3ExprCompare(pParse, p1->pFilter, p2->pFilter, -1) ) return 1;",
          "1228:   }",
          "",
          "---------------"
        ],
        "test/filter1.test||test/filter1.test": [
          "File: test/filter1.test -> test/filter1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2018 May 8",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #***********************************************************************",
          "11: # This file implements regression tests for SQLite library.",
          "12: #",
          "14: set testdir [file dirname $argv0]",
          "15: source $testdir/tester.tcl",
          "16: set testprefix filter1",
          "18: ifcapable !windowfunc {",
          "19:   finish_test",
          "20:   return",
          "21: }",
          "23: do_execsql_test 1.0 {",
          "24:   CREATE TABLE t1(a);",
          "25:   CREATE INDEX i1 ON t1(a);",
          "26:   INSERT INTO t1 VALUES(1), (2), (3), (4), (5), (6), (7), (8), (9);",
          "27: }",
          "29: do_execsql_test 1.1 { SELECT sum(a) FROM t1; } 45",
          "30: do_execsql_test 1.2 { SELECT sum(a) FILTER( WHERE a<5 ) FROM t1; } 10",
          "32: do_execsql_test 1.3 {",
          "33:   SELECT sum(a) FILTER( WHERE a>9 ),",
          "34:          sum(a) FILTER( WHERE a>8 ),",
          "35:          sum(a) FILTER( WHERE a>7 ),",
          "36:          sum(a) FILTER( WHERE a>6 ),",
          "37:          sum(a) FILTER( WHERE a>5 ),",
          "38:          sum(a) FILTER( WHERE a>4 ),",
          "39:          sum(a) FILTER( WHERE a>3 ),",
          "40:          sum(a) FILTER( WHERE a>2 ),",
          "41:          sum(a) FILTER( WHERE a>1 ),",
          "42:          sum(a) FILTER( WHERE a>0 )",
          "43:   FROM t1;",
          "44: } {{} 9 17 24 30 35 39 42 44 45}",
          "46: do_execsql_test 1.4 {",
          "47:   SELECT max(a) FILTER (WHERE (a % 2)==0) FROM t1",
          "48: } {8}",
          "50: do_execsql_test 1.5 {",
          "51:   SELECT min(a) FILTER (WHERE a>4) FROM t1",
          "52: } {5}",
          "54: do_execsql_test 1.6 {",
          "55:   SELECT count(*) FILTER (WHERE a!=5) FROM t1",
          "56: } {8}",
          "58: do_execsql_test 1.7 {",
          "59:   SELECT min(a) FILTER (WHERE a>3) FROM t1 GROUP BY (a%2) ORDER BY 1;",
          "60: } {4 5}",
          "62: do_execsql_test 1.8 {",
          "63:   CREATE VIEW vv AS",
          "64:   SELECT sum(a) FILTER( WHERE a>9 ),",
          "65:          sum(a) FILTER( WHERE a>8 ),",
          "66:          sum(a) FILTER( WHERE a>7 ),",
          "67:          sum(a) FILTER( WHERE a>6 ),",
          "68:          sum(a) FILTER( WHERE a>5 ),",
          "69:          sum(a) FILTER( WHERE a>4 ),",
          "70:          sum(a) FILTER( WHERE a>3 ),",
          "71:          sum(a) FILTER( WHERE a>2 ),",
          "72:          sum(a) FILTER( WHERE a>1 ),",
          "73:          sum(a) FILTER( WHERE a>0 )",
          "74:   FROM t1;",
          "75:   SELECT * FROM vv;",
          "76: } {{} 9 17 24 30 35 39 42 44 45}",
          "79: #-------------------------------------------------------------------------",
          "80: # Test some errors:",
          "81: #",
          "82: #   .1 FILTER on a non-aggregate function,",
          "83: #   .2 Window function in FILTER clause,",
          "84: #   .3 Aggregate function in FILTER clause,",
          "85: #",
          "86: reset_db",
          "87: do_execsql_test 2.0 {",
          "88:   CREATE TABLE t1(a);",
          "89:   INSERT INTO t1 VALUES(1), (2), (3), (4), (5), (6), (7), (8), (9);",
          "90: }",
          "92: do_catchsql_test 2.1 {",
          "93:   SELECT upper(a) FILTER (WHERE a=1) FROM t1",
          "94: } {1 {filter clause may not be used with non-aggregate upper()}}",
          "96: do_catchsql_test 2.2 {",
          "97:   SELECT sum(a) FILTER (WHERE 1 - max(a) OVER () > 0) FROM t1",
          "98: } {1 {misuse of window function max()}}",
          "100: do_catchsql_test 2.3 {",
          "101:   SELECT sum(a) FILTER (WHERE 1 - count(a)) FROM t1",
          "102: } {1 {misuse of aggregate function count()}}",
          "104: finish_test",
          "",
          "---------------"
        ],
        "test/filter2.tcl||test/filter2.tcl": [
          "File: test/filter2.tcl -> test/filter2.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2018 May 19",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #***********************************************************************",
          "11: #",
          "13: source [file join [file dirname $argv0] pg_common.tcl]",
          "15: #=========================================================================",
          "18: start_test filter2 \"2019 July 2\"",
          "20: ifcapable !windowfunc",
          "22: execsql_test 1.0 {",
          "23:   DROP TABLE IF EXISTS t1;",
          "24:   CREATE TABLE t1(a INTEGER PRIMARY KEY, b INTEGER);",
          "25:   INSERT INTO t1 VALUES",
          "26:    (1, 7), (2, 3), (3, 5), (4, 30), (5, 26), (6, 23), (7, 27),",
          "27:    (8, 3), (9, 17), (10, 26), (11, 33), (12, 25), (13, NULL), (14, 47),",
          "28:    (15, 36), (16, 13), (17, 45), (18, 31), (19, 11), (20, 36), (21, 37),",
          "29:    (22, 21), (23, 22), (24, 14), (25, 16), (26, 3), (27, 7), (28, 29),",
          "30:    (29, 50), (30, 38), (31, 3), (32, 36), (33, 12), (34, 4), (35, 46),",
          "31:    (36, 3), (37, 48), (38, 23), (39, NULL), (40, 24), (41, 5), (42, 46),",
          "32:    (43, 11), (44, NULL), (45, 18), (46, 25), (47, 15), (48, 18), (49, 23);",
          "33: }",
          "35: execsql_test 1.1 { SELECT sum(b) FROM t1 }",
          "37: execsql_test 1.2 { SELECT sum(b) FILTER (WHERE a<10) FROM t1 }",
          "39: execsql_test 1.3 { SELECT count(DISTINCT b) FROM t1 }",
          "41: execsql_test 1.4 { SELECT count(DISTINCT b) FILTER (WHERE a!=19) FROM t1 }",
          "43: execsql_test 1.5 {",
          "44:   SELECT min(b) FILTER (WHERE a>19),",
          "45:          min(b) FILTER (WHERE a>0),",
          "46:          max(a+b) FILTER (WHERE a>19),",
          "47:          max(b+a) FILTER (WHERE a BETWEEN 10 AND 40)",
          "48:   FROM t1;",
          "49: }",
          "51: execsql_test 1.6 {",
          "52:   SELECT min(b),",
          "53:          min(b),",
          "54:          max(a+b),",
          "55:          max(b+a)",
          "56:   FROM t1",
          "57:   GROUP BY (a%10)",
          "58:   ORDER BY 1, 2, 3, 4;",
          "59: }",
          "61: execsql_test 1.7 {",
          "62:   SELECT min(b) FILTER (WHERE a>19),",
          "63:          min(b) FILTER (WHERE a>0),",
          "64:          max(a+b) FILTER (WHERE a>19),",
          "65:          max(b+a) FILTER (WHERE a BETWEEN 10 AND 40)",
          "66:   FROM t1",
          "67:   GROUP BY (a%10)",
          "68:   ORDER BY 1, 2, 3, 4;",
          "69: }",
          "71: execsql_test 1.8 {",
          "72:   SELECT sum(a+b) FILTER (WHERE a=NULL) FROM t1",
          "73: }",
          "75: execsql_test 1.9 {",
          "76:   SELECT (a%5) FROM t1 GROUP BY (a%5)",
          "77:   HAVING sum(b) FILTER (WHERE b<20) > 34",
          "78:   ORDER BY 1",
          "79: }",
          "81: execsql_test 1.10 {",
          "82:   SELECT (a%5), sum(b) FILTER (WHERE b<20) AS bbb",
          "83:   FROM t1",
          "84:   GROUP BY (a%5) HAVING sum(b) FILTER (WHERE b<20) >34",
          "85:   ORDER BY 1",
          "86: }",
          "88: execsql_test 1.11 {",
          "89:   SELECT (a%5), sum(b) FILTER (WHERE b<20) AS bbb",
          "90:   FROM t1",
          "91:   GROUP BY (a%5) HAVING sum(b) FILTER (WHERE b<20) >34",
          "92:   ORDER BY 2",
          "93: }",
          "95: execsql_test 1.12 {",
          "96:   SELECT (a%5),",
          "97:     sum(b) FILTER (WHERE b<20) AS bbb,",
          "98:     count(distinct b) FILTER (WHERE b<20 OR a=13) AS ccc",
          "99:   FROM t1 GROUP BY (a%5)",
          "100:   ORDER BY 2",
          "101: }",
          "103: execsql_test 1.13 {",
          "104:   SELECT",
          "105:     string_agg(CAST(b AS TEXT), '_') FILTER (WHERE b%2!=0),",
          "106:     string_agg(CAST(b AS TEXT), '_') FILTER (WHERE b%2!=1),",
          "107:     count(*) FILTER (WHERE b%2!=0),",
          "108:     count(*) FILTER (WHERE b%2!=1)",
          "109:   FROM t1;",
          "110: }",
          "112: execsql_float_test 1.14 {",
          "113:   SELECT",
          "114:     avg(b) FILTER (WHERE b>a),",
          "115:     avg(b) FILTER (WHERE b<a)",
          "116:   FROM t1 GROUP BY (a%2) ORDER BY 1,2;",
          "117: }",
          "119: execsql_test 1.15 {",
          "120:   SELECT",
          "121:     a/5,",
          "122:     sum(b) FILTER (WHERE a%5=0),",
          "123:     sum(b) FILTER (WHERE a%5=1),",
          "124:     sum(b) FILTER (WHERE a%5=2),",
          "125:     sum(b) FILTER (WHERE a%5=3),",
          "126:     sum(b) FILTER (WHERE a%5=4)",
          "127:   FROM t1 GROUP BY (a/5) ORDER BY 1;",
          "128: }",
          "130: finish_test",
          "",
          "---------------"
        ],
        "test/filter2.test||test/filter2.test": [
          "File: test/filter2.test -> test/filter2.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2019 July 2",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #***********************************************************************",
          "11: # This file implements regression tests for SQLite library.",
          "12: #",
          "14: ####################################################",
          "15: # DO NOT EDIT! THIS FILE IS AUTOMATICALLY GENERATED!",
          "16: ####################################################",
          "18: set testdir [file dirname $argv0]",
          "19: source $testdir/tester.tcl",
          "20: set testprefix filter2",
          "22: ifcapable !windowfunc { finish_test ; return }",
          "23: do_execsql_test 1.0 {",
          "24:   DROP TABLE IF EXISTS t1;",
          "25:   CREATE TABLE t1(a INTEGER PRIMARY KEY, b INTEGER);",
          "26:   INSERT INTO t1 VALUES",
          "27:    (1, 7), (2, 3), (3, 5), (4, 30), (5, 26), (6, 23), (7, 27),",
          "28:    (8, 3), (9, 17), (10, 26), (11, 33), (12, 25), (13, NULL), (14, 47),",
          "29:    (15, 36), (16, 13), (17, 45), (18, 31), (19, 11), (20, 36), (21, 37),",
          "30:    (22, 21), (23, 22), (24, 14), (25, 16), (26, 3), (27, 7), (28, 29),",
          "31:    (29, 50), (30, 38), (31, 3), (32, 36), (33, 12), (34, 4), (35, 46),",
          "32:    (36, 3), (37, 48), (38, 23), (39, NULL), (40, 24), (41, 5), (42, 46),",
          "33:    (43, 11), (44, NULL), (45, 18), (46, 25), (47, 15), (48, 18), (49, 23);",
          "34: } {}",
          "36: do_execsql_test 1.1 {",
          "37:   SELECT sum(b) FROM t1",
          "38: } {1041}",
          "40: do_execsql_test 1.2 {",
          "41:   SELECT sum(b) FILTER (WHERE a<10) FROM t1",
          "42: } {141}",
          "44: do_execsql_test 1.3 {",
          "45:   SELECT count(DISTINCT b) FROM t1",
          "46: } {31}",
          "48: do_execsql_test 1.4 {",
          "49:   SELECT count(DISTINCT b) FILTER (WHERE a!=19) FROM t1",
          "50: } {31}",
          "52: do_execsql_test 1.5 {",
          "53:   SELECT min(b) FILTER (WHERE a>19),",
          "54:          min(b) FILTER (WHERE a>0),",
          "55:          max(a+b) FILTER (WHERE a>19),",
          "56:          max(b+a) FILTER (WHERE a BETWEEN 10 AND 40)",
          "57:   FROM t1;",
          "58: } {3 3 88 85}",
          "60: do_execsql_test 1.6 {",
          "61:   SELECT min(b),",
          "62:          min(b),",
          "63:          max(a+b),",
          "64:          max(b+a)",
          "65:   FROM t1",
          "66:   GROUP BY (a%10)",
          "67:   ORDER BY 1, 2, 3, 4;",
          "68: } {3 3 58 58   3 3 66 66   3 3 71 71   3 3 88 88   4 4 61 61   5 5 54 54",
          "69:   7 7 85 85   11 11 79 79   16 16 81 81   24 24 68 68}",
          "71: do_execsql_test 1.7 {",
          "72:   SELECT min(b) FILTER (WHERE a>19),",
          "73:          min(b) FILTER (WHERE a>0),",
          "74:          max(a+b) FILTER (WHERE a>19),",
          "75:          max(b+a) FILTER (WHERE a BETWEEN 10 AND 40)",
          "76:   FROM t1",
          "77:   GROUP BY (a%10)",
          "78:   ORDER BY 1, 2, 3, 4;",
          "79: } {3 3 58 58   3 3 71 39   4 4 38 61   7 7 85 85   11 5 54 45   16 16 81 81",
          "80:   18 3 66 61   21 3 88 68   23 11 79 79   24 24 68 68}",
          "82: do_execsql_test 1.8 {",
          "83:   SELECT sum(a+b) FILTER (WHERE a=NULL) FROM t1",
          "84: } {{}}",
          "86: do_execsql_test 1.9 {",
          "87:   SELECT (a%5) FROM t1 GROUP BY (a%5)",
          "88:   HAVING sum(b) FILTER (WHERE b<20) > 34",
          "89:   ORDER BY 1",
          "90: } {3   4}",
          "92: do_execsql_test 1.10 {",
          "93:   SELECT (a%5), sum(b) FILTER (WHERE b<20) AS bbb",
          "94:   FROM t1",
          "95:   GROUP BY (a%5) HAVING sum(b) FILTER (WHERE b<20) >34",
          "96:   ORDER BY 1",
          "97: } {3 49   4 46}",
          "99: do_execsql_test 1.11 {",
          "100:   SELECT (a%5), sum(b) FILTER (WHERE b<20) AS bbb",
          "101:   FROM t1",
          "102:   GROUP BY (a%5) HAVING sum(b) FILTER (WHERE b<20) >34",
          "103:   ORDER BY 2",
          "104: } {4 46   3 49}",
          "106: do_execsql_test 1.12 {",
          "107:   SELECT (a%5),",
          "108:     sum(b) FILTER (WHERE b<20) AS bbb,",
          "109:     count(distinct b) FILTER (WHERE b<20 OR a=13) AS ccc",
          "110:   FROM t1 GROUP BY (a%5)",
          "111:   ORDER BY 2",
          "112: } {2 25 3   0 34 2   1 34 4   4 46 4   3 49 5}",
          "114: do_execsql_test 1.13 {",
          "115:   SELECT",
          "116:     group_concat(CAST(b AS TEXT), '_') FILTER (WHERE b%2!=0),",
          "117:     group_concat(CAST(b AS TEXT), '_') FILTER (WHERE b%2!=1),",
          "118:     count(*) FILTER (WHERE b%2!=0),",
          "119:     count(*) FILTER (WHERE b%2!=1)",
          "120:   FROM t1;",
          "121: } {7_3_5_23_27_3_17_33_25_47_13_45_31_11_37_21_3_7_29_3_3_23_5_11_25_15_23 30_26_26_36_36_22_14_16_50_38_36_12_4_46_48_24_46_18_18 27 19}",
          "124: do_test 1.14 {",
          "125:   set myres {}",
          "126:   foreach r [db eval {SELECT",
          "127:     avg(b) FILTER (WHERE b>a),",
          "128:     avg(b) FILTER (WHERE b<a)",
          "129:   FROM t1 GROUP BY (a%2) ORDER BY 1,2;}] {",
          "130:     lappend myres [format %.4f [set r]]",
          "131:   }",
          "132:   set res2 {30.8333 13.7273 31.4167 13.0000}",
          "133:   set i 0",
          "134:   foreach r [set myres] r2 [set res2] {",
          "135:     if {[set r]<([set r2]-0.0001) || [set r]>([set r2]+0.0001)} {",
          "136:       error \"list element [set i] does not match: got=[set r] expected=[set r2]\"",
          "137:     }",
          "138:     incr i",
          "139:   }",
          "140:   set {} {}",
          "141: } {}",
          "143: do_execsql_test 1.15 {",
          "144:   SELECT",
          "145:     a/5,",
          "146:     sum(b) FILTER (WHERE a%5=0),",
          "147:     sum(b) FILTER (WHERE a%5=1),",
          "148:     sum(b) FILTER (WHERE a%5=2),",
          "149:     sum(b) FILTER (WHERE a%5=3),",
          "150:     sum(b) FILTER (WHERE a%5=4)",
          "151:   FROM t1 GROUP BY (a/5) ORDER BY 1;",
          "152: } {0 {} 7 3 5 30   1 26 23 27 3 17   2 26 33 25 {} 47   3 36 13 45 31 11",
          "153:   4 36 37 21 22 14   5 16 3 7 29 50   6 38 3 36 12 4   7 46 3 48 23 {}",
          "154:   8 24 5 46 11 {}   9 18 25 15 18 23}",
          "156: finish_test",
          "",
          "---------------"
        ],
        "test/window2.tcl||test/window2.tcl": [
          "File: test/window2.tcl -> test/window2.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "424:   WINDOW win AS (ORDER BY 1);",
          "425: }",
          "429: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "427: execsql_test 4.10 {",
          "428:   SELECT count(*) OVER (ORDER BY b) FROM t1",
          "429: }",
          "431: execsql_test 4.11 {",
          "432:   SELECT count(distinct a) FILTER (WHERE b='odd') FROM t1",
          "433: }",
          "",
          "---------------"
        ],
        "test/window2.test||test/window2.test": [
          "File: test/window2.test -> test/window2.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "893:   set {} {}",
          "894: } {}",
          "896: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "896: do_execsql_test 4.10 {",
          "897:   SELECT count(*) OVER (ORDER BY b) FROM t1",
          "898: } {3   3   3   6   6   6}",
          "900: do_execsql_test 4.11 {",
          "901:   SELECT count(distinct a) FILTER (WHERE b='odd') FROM t1",
          "902: } {3}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "69a66a7be12600547ab1a91c83995fa6bd6375fd",
      "candidate_info": {
        "commit_hash": "69a66a7be12600547ab1a91c83995fa6bd6375fd",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/69a66a7be12600547ab1a91c83995fa6bd6375fd",
        "files": [
          "Makefile.in",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Include OPTS in the build of dbfuzz2.\n\nFossilOrigin-Name: eac9c0c49650b008951318a2225b932709a0a8dffbb01ed57684c40357b2e25c",
        "before_after_code_files": [
          "Makefile.in||Makefile.in",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "Makefile.in||Makefile.in": [
          "File: Makefile.in -> Makefile.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "685:   -DSQLITE_EANBLE_FTS5",
          "687: dbfuzz2: $(TOP)/test/dbfuzz2.c sqlite3.c sqlite3.h",
          "689:   $(DBFUZZ2_OPTS) $(TOP)/test/dbfuzz2.c sqlite3.c",
          "690:  mkdir -p dbfuzz2-dir",
          "691:  cp $(TOP)/test/dbfuzz2-seed* dbfuzz2-dir",
          "",
          "[Removed Lines]",
          "688:  clang-6.0 -I. -g -O0 -fsanitize=fuzzer,undefined,address -o dbfuzz2 \\",
          "",
          "[Added Lines]",
          "688:  clang-6.0 $(OPT_FEATURE_FLAGS) $(OPTS) -I. -g -O0 \\",
          "689:   -fsanitize=fuzzer,undefined,address -o dbfuzz2 \\",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 54231ac4ca506e6c34c31bc02bb8d3db22f14e1b01679bc70529b165d7dabb83",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "909f78cbd8a80b5c26668f5acfe81220e52cb374",
      "candidate_info": {
        "commit_hash": "909f78cbd8a80b5c26668f5acfe81220e52cb374",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/909f78cbd8a80b5c26668f5acfe81220e52cb374",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/attach.test",
          "test/indexexpr2.test",
          "test/pragma4.test"
        ],
        "message": "Update some test cases to account for SQLITE_OMIT_VIRTUAL_TABLE builds.\n\nFossilOrigin-Name: b53a9a3dc6b0422a102b245451769b0cd8c0d67090fefabf7cb3a65137a73771",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/attach.test||test/attach.test",
          "test/indexexpr2.test||test/indexexpr2.test",
          "test/pragma4.test||test/pragma4.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 5c040fdb013d178e5dffa300621eab91b92beb085ffb9ef2ba08f6bf1dd4013e",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/attach.test||test/attach.test": [
          "File: test/attach.test -> test/attach.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "726:     } db2",
          "727:   } {1 {trigger r5 cannot reference objects in database temp}}",
          "728: } ;# endif subquery",
          "730:   do_test attach-5.10 {",
          "731:     db close",
          "732:     catch {db2 close}",
          "",
          "[Removed Lines]",
          "729: ifcapable json1 {",
          "",
          "[Added Lines]",
          "729: ifcapable json1&&vtab {",
          "",
          "---------------"
        ],
        "test/indexexpr2.test||test/indexexpr2.test": [
          "File: test/indexexpr2.test -> test/indexexpr2.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "201: # Additional test cases to show that UPDATE does not modify indexes that",
          "202: # do not involve unchanged columns.",
          "203: #",
          "233: finish_test",
          "",
          "[Removed Lines]",
          "204: load_static_extension db explain",
          "205: do_execsql_test 4.200 {",
          "206:   CREATE TABLE t2(a,b,c,d,e,f);",
          "207:   INSERT INTO t2 VALUES(2,3,4,5,6,7);",
          "208:   CREATE INDEX t2abc ON t2(a+b+c);",
          "209:   CREATE INDEX t2cd ON t2(c*d);",
          "210:   CREATE INDEX t2def ON t2(d,e+25*f);",
          "211:   SELECT sqlite_master.name",
          "212:     FROM sqlite_master, explain('UPDATE t2 SET b=b+1')",
          "213:    WHERE explain.opcode LIKE 'Open%'",
          "214:      AND sqlite_master.rootpage=explain.p2",
          "215:    ORDER BY 1;",
          "216: } {t2 t2abc}",
          "217: do_execsql_test 4.210 {",
          "218:   SELECT sqlite_master.name",
          "219:     FROM sqlite_master, explain('UPDATE t2 SET c=c+1')",
          "220:    WHERE explain.opcode LIKE 'Open%'",
          "221:      AND sqlite_master.rootpage=explain.p2",
          "222:    ORDER BY 1;",
          "223: } {t2 t2abc t2cd}",
          "224: do_execsql_test 4.220 {",
          "225:   SELECT sqlite_master.name",
          "226:     FROM sqlite_master, explain('UPDATE t2 SET c=c+1, f=NULL')",
          "227:    WHERE explain.opcode LIKE 'Open%'",
          "228:      AND sqlite_master.rootpage=explain.p2",
          "229:    ORDER BY 1;",
          "230: } {t2 t2abc t2cd t2def}",
          "",
          "[Added Lines]",
          "204: ifcapable vtab {",
          "205:   load_static_extension db explain",
          "206:   do_execsql_test 4.200 {",
          "207:     CREATE TABLE t2(a,b,c,d,e,f);",
          "208:     INSERT INTO t2 VALUES(2,3,4,5,6,7);",
          "209:     CREATE INDEX t2abc ON t2(a+b+c);",
          "210:     CREATE INDEX t2cd ON t2(c*d);",
          "211:     CREATE INDEX t2def ON t2(d,e+25*f);",
          "212:     SELECT sqlite_master.name",
          "213:       FROM sqlite_master, explain('UPDATE t2 SET b=b+1')",
          "214:      WHERE explain.opcode LIKE 'Open%'",
          "215:        AND sqlite_master.rootpage=explain.p2",
          "216:      ORDER BY 1;",
          "217:   } {t2 t2abc}",
          "218:   do_execsql_test 4.210 {",
          "219:     SELECT sqlite_master.name",
          "220:       FROM sqlite_master, explain('UPDATE t2 SET c=c+1')",
          "221:      WHERE explain.opcode LIKE 'Open%'",
          "222:        AND sqlite_master.rootpage=explain.p2",
          "223:      ORDER BY 1;",
          "224:   } {t2 t2abc t2cd}",
          "225:   do_execsql_test 4.220 {",
          "226:     SELECT sqlite_master.name",
          "227:       FROM sqlite_master, explain('UPDATE t2 SET c=c+1, f=NULL')",
          "228:      WHERE explain.opcode LIKE 'Open%'",
          "229:        AND sqlite_master.rootpage=explain.p2",
          "230:      ORDER BY 1;",
          "231:   } {t2 t2abc t2cd t2def}",
          "232: }",
          "",
          "---------------"
        ],
        "test/pragma4.test||test/pragma4.test": [
          "File: test/pragma4.test -> test/pragma4.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "134:   ATTACH 'test.db2' AS aux;",
          "135:   CREATE TABLE aux.t2(d, e, f);",
          "136: }",
          "142: }",
          "143: do_test 4.2.4 {",
          "144:   sqlite3 db3 test.db",
          "",
          "[Removed Lines]",
          "137: do_execsql_test 4.2.2 { SELECT * FROM pragma_table_info('t1') } {",
          "138:   0 a {} 0 {} 0 1 b {} 0 {} 0 2 c {} 0 {} 0",
          "139: }",
          "140: do_execsql_test 4.2.3 { SELECT * FROM pragma_table_info('t2') } {",
          "141:   0 d {} 0 {} 0 1 e {} 0 {} 0 2 f {} 0 {} 0",
          "",
          "[Added Lines]",
          "137: ifcapable vtab {",
          "138:   do_execsql_test 4.2.2 { SELECT * FROM pragma_table_info('t1') } {",
          "139:     0 a {} 0 {} 0 1 b {} 0 {} 0 2 c {} 0 {} 0",
          "140:   }",
          "141:   do_execsql_test 4.2.3 { SELECT * FROM pragma_table_info('t2') } {",
          "142:     0 d {} 0 {} 0 1 e {} 0 {} 0 2 f {} 0 {} 0",
          "143:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "146:   execsql { DROP TABLE t1 } db3",
          "147:   execsql { DROP TABLE t2 } db2",
          "148: } {}",
          "152: db2 close",
          "153: db3 close",
          "",
          "[Removed Lines]",
          "149: do_execsql_test 4.2.5 { SELECT * FROM pragma_table_info('t1') }",
          "150: do_execsql_test 4.2.6 { SELECT * FROM pragma_table_info('t2') }",
          "",
          "[Added Lines]",
          "151: ifcapable vtab {",
          "152:   do_execsql_test 4.2.5 { SELECT * FROM pragma_table_info('t1') }",
          "153:   do_execsql_test 4.2.6 { SELECT * FROM pragma_table_info('t2') }",
          "154: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "160:   CREATE TABLE aux.t2(d, e, f);",
          "161:   CREATE INDEX aux.i2 ON t2(e);",
          "162: }",
          "165: do_test 4.3.4 {",
          "166:   sqlite3 db3 test.db",
          "167:   sqlite3 db2 test.db2",
          "168:   execsql { DROP INDEX i1 } db3",
          "169:   execsql { DROP INDEX i2 } db2",
          "170: } {}",
          "174: do_execsql_test 4.4.0 {",
          "175:   CREATE INDEX main.i1 ON t1(b, c);",
          "176:   CREATE INDEX aux.i2 ON t2(e, f);",
          "177: }",
          "180: do_test 4.4.3 {",
          "181:   execsql { DROP INDEX i1 } db3",
          "182:   execsql { DROP INDEX i2 } db2",
          "183: } {}",
          "187: do_execsql_test 4.5.0 {",
          "188:   CREATE UNIQUE INDEX main.i1 ON t1(a);",
          "",
          "[Removed Lines]",
          "163: do_execsql_test 4.3.2 { SELECT * FROM pragma_index_info('i1') } {0 1 b}",
          "164: do_execsql_test 4.3.3 { SELECT * FROM pragma_index_info('i2') } {0 1 e}",
          "171: do_execsql_test 4.3.5 { SELECT * FROM pragma_index_info('i1') }",
          "172: do_execsql_test 4.3.6 { SELECT * FROM pragma_index_info('i2') }",
          "178: do_execsql_test 4.4.1 { SELECT * FROM pragma_index_list('t1') } {0 i1 0 c 0}",
          "179: do_execsql_test 4.4.2 { SELECT * FROM pragma_index_list('t2') } {0 i2 0 c 0}",
          "184: do_execsql_test 4.4.5 { SELECT * FROM pragma_index_list('t1') } {}",
          "185: do_execsql_test 4.4.6 { SELECT * FROM pragma_index_list('t2') } {}",
          "",
          "[Added Lines]",
          "167: ifcapable vtab {",
          "168:   do_execsql_test 4.3.2 { SELECT * FROM pragma_index_info('i1') } {0 1 b}",
          "169:   do_execsql_test 4.3.3 { SELECT * FROM pragma_index_info('i2') } {0 1 e}",
          "170: }",
          "177: ifcapable vtab {",
          "178:   do_execsql_test 4.3.5 { SELECT * FROM pragma_index_info('i1') }",
          "179:   do_execsql_test 4.3.6 { SELECT * FROM pragma_index_info('i2') }",
          "180: }",
          "182: execsql {SELECT * FROM main.sqlite_master, aux.sqlite_master}",
          "187: ifcapable vtab {",
          "188:   do_execsql_test 4.4.1 { SELECT * FROM pragma_index_list('t1') } {0 i1 0 c 0}",
          "189:   do_execsql_test 4.4.2 { SELECT * FROM pragma_index_list('t2') } {0 i2 0 c 0}",
          "190: }",
          "195: ifcapable vtab {",
          "196:   do_execsql_test 4.4.5 { SELECT * FROM pragma_index_list('t1') } {}",
          "197:   do_execsql_test 4.4.6 { SELECT * FROM pragma_index_list('t2') } {}",
          "198: }",
          "199: execsql {SELECT * FROM main.sqlite_master, aux.sqlite_master}",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "190:   CREATE TABLE main.c1 (a, b, c REFERENCES t1(a));",
          "191:   CREATE TABLE aux.c2 (d, e, r REFERENCES t2(d));",
          "192: }",
          "198: }",
          "199: do_test 4.5.3 {",
          "200:   execsql { DROP TABLE c1 } db3",
          "201:   execsql { DROP TABLE c2 } db2",
          "202: } {}",
          "206: do_execsql_test 4.6.0 {",
          "207:   CREATE TABLE main.c1 (a, b, c REFERENCES t1(a));",
          "",
          "[Removed Lines]",
          "193: do_execsql_test 4.5.1 { SELECT * FROM pragma_foreign_key_list('c1') } {",
          "194:   0 0 t1 c a {NO ACTION} {NO ACTION} NONE",
          "195: }",
          "196: do_execsql_test 4.5.2 { SELECT * FROM pragma_foreign_key_list('c2') } {",
          "197:   0 0 t2 r d {NO ACTION} {NO ACTION} NONE",
          "203: do_execsql_test 4.5.1 { SELECT * FROM pragma_foreign_key_list('c1') }",
          "204: do_execsql_test 4.5.2 { SELECT * FROM pragma_foreign_key_list('c2') }",
          "",
          "[Added Lines]",
          "207: ifcapable vtab {",
          "208:   do_execsql_test 4.5.1 { SELECT * FROM pragma_foreign_key_list('c1') } {",
          "209:     0 0 t1 c a {NO ACTION} {NO ACTION} NONE",
          "210:   }",
          "211:   do_execsql_test 4.5.2 { SELECT * FROM pragma_foreign_key_list('c2') } {",
          "212:     0 0 t2 r d {NO ACTION} {NO ACTION} NONE",
          "213:   }",
          "219: ifcapable vtab {",
          "220:   do_execsql_test 4.5.4 { SELECT * FROM pragma_foreign_key_list('c1') }",
          "221:   do_execsql_test 4.5.5 { SELECT * FROM pragma_foreign_key_list('c2') }",
          "222: }",
          "223: execsql {SELECT * FROM main.sqlite_master, aux.sqlite_master}",
          "",
          "---------------"
        ]
      }
    }
  ]
}