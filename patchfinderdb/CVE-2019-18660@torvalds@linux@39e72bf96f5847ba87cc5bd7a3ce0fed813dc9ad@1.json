{
  "cve_id": "CVE-2019-18660",
  "cve_desc": "The Linux kernel before 5.4.1 on powerpc allows Information Exposure because the Spectre-RSB mitigation is not in place for all applicable CPUs, aka CID-39e72bf96f58. This is related to arch/powerpc/kernel/entry_64.S and arch/powerpc/kernel/security.c.",
  "repo": "torvalds/linux",
  "patch_hash": "39e72bf96f5847ba87cc5bd7a3ce0fed813dc9ad",
  "patch_info": {
    "commit_hash": "39e72bf96f5847ba87cc5bd7a3ce0fed813dc9ad",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/39e72bf96f5847ba87cc5bd7a3ce0fed813dc9ad",
    "files": [
      "arch/powerpc/include/asm/asm-prototypes.h",
      "arch/powerpc/include/asm/security_features.h",
      "arch/powerpc/kernel/entry_64.S",
      "arch/powerpc/kernel/security.c"
    ],
    "message": "powerpc/book3s64: Fix link stack flush on context switch\n\nIn commit ee13cb249fab (\"powerpc/64s: Add support for software count\ncache flush\"), I added support for software to flush the count\ncache (indirect branch cache) on context switch if firmware told us\nthat was the required mitigation for Spectre v2.\n\nAs part of that code we also added a software flush of the link\nstack (return address stack), which protects against Spectre-RSB\nbetween user processes.\n\nThat is all correct for CPUs that activate that mitigation, which is\ncurrently Power9 Nimbus DD2.3.\n\nWhat I got wrong is that on older CPUs, where firmware has disabled\nthe count cache, we also need to flush the link stack on context\nswitch.\n\nTo fix it we create a new feature bit which is not set by firmware,\nwhich tells us we need to flush the link stack. We set that when\nfirmware tells us that either of the existing Spectre v2 mitigations\nare enabled.\n\nThen we adjust the patching code so that if we see that feature bit we\nenable the link stack flush. If we're also told to flush the count\ncache in software then we fall through and do that also.\n\nOn the older CPUs we don't need to do do the software count cache\nflush, firmware has disabled it, so in that case we patch in an early\nreturn after the link stack flush.\n\nThe naming of some of the functions is awkward after this patch,\nbecause they're called \"count cache\" but they also do link stack. But\nwe'll fix that up in a later commit to ease backporting.\n\nThis is the fix for CVE-2019-18660.\n\nReported-by: Anthony Steinhauser <asteinhauser@google.com>\nFixes: ee13cb249fab (\"powerpc/64s: Add support for software count cache flush\")\nCc: stable@vger.kernel.org # v4.4+\nSigned-off-by: Michael Ellerman <mpe@ellerman.id.au>",
    "before_after_code_files": [
      "arch/powerpc/include/asm/asm-prototypes.h||arch/powerpc/include/asm/asm-prototypes.h",
      "arch/powerpc/include/asm/security_features.h||arch/powerpc/include/asm/security_features.h",
      "arch/powerpc/kernel/entry_64.S||arch/powerpc/kernel/entry_64.S",
      "arch/powerpc/kernel/security.c||arch/powerpc/kernel/security.c"
    ]
  },
  "patch_diff": {
    "arch/powerpc/include/asm/asm-prototypes.h||arch/powerpc/include/asm/asm-prototypes.h": [
      "File: arch/powerpc/include/asm/asm-prototypes.h -> arch/powerpc/include/asm/asm-prototypes.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "153: extern s32 patch__call_flush_count_cache;",
      "154: extern s32 patch__flush_count_cache_return;",
      "155: extern s32 patch__memset_nocache, patch__memcpy_nocache;",
      "157: extern long flush_count_cache;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "155: extern s32 patch__flush_link_stack_return;",
      "",
      "---------------"
    ],
    "arch/powerpc/include/asm/security_features.h||arch/powerpc/include/asm/security_features.h": [
      "File: arch/powerpc/include/asm/security_features.h -> arch/powerpc/include/asm/security_features.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "82: #define SEC_FTR_FLUSH_COUNT_CACHE 0x0000000000000400ull",
      "86: #define SEC_FTR_DEFAULT \\",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "85: #define SEC_FTR_FLUSH_LINK_STACK 0x0000000000001000ull",
      "",
      "---------------"
    ],
    "arch/powerpc/kernel/entry_64.S||arch/powerpc/kernel/entry_64.S": [
      "File: arch/powerpc/kernel/entry_64.S -> arch/powerpc/kernel/entry_64.S",
      "--- Hunk 1 ---",
      "[Context before]",
      "546:  .balign 32",
      "548: 1: mtlr r9",
      "549:  li r9,0x7fff",
      "550:  mtctr r9",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "552: 3: nop",
      "553:  patch_site 3b patch__flush_link_stack_return",
      "",
      "---------------"
    ],
    "arch/powerpc/kernel/security.c||arch/powerpc/kernel/security.c": [
      "File: arch/powerpc/kernel/security.c -> arch/powerpc/kernel/security.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "24:  COUNT_CACHE_FLUSH_HW = 0x4,",
      "25: };",
      "26: static enum count_cache_flush_type count_cache_flush_type = COUNT_CACHE_FLUSH_NONE;",
      "28: bool barrier_nospec_enabled;",
      "29: static bool no_nospec;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "27: static bool link_stack_flush_enabled;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "213:   if (ccd)",
      "214:    seq_buf_printf(&s, \"Indirect branch cache disabled\");",
      "215:  } else if (count_cache_flush_type != COUNT_CACHE_FLUSH_NONE) {",
      "216:   seq_buf_printf(&s, \"Mitigation: Software count cache flush\");",
      "218:   if (count_cache_flush_type == COUNT_CACHE_FLUSH_HW)",
      "219:    seq_buf_printf(&s, \" (hardware accelerated)\");",
      "220:  } else if (btb_flush_enabled) {",
      "221:   seq_buf_printf(&s, \"Mitigation: Branch predictor state flush\");",
      "222:  } else {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "217:   if (link_stack_flush_enabled)",
      "218:    seq_buf_printf(&s, \", Software link stack flush\");",
      "226:   if (link_stack_flush_enabled)",
      "227:    seq_buf_printf(&s, \", Software link stack flush\");",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "377: device_initcall(stf_barrier_debugfs_init);",
      "380: static void toggle_count_cache_flush(bool enable)",
      "381: {",
      "383:   patch_instruction_site(&patch__call_flush_count_cache, PPC_INST_NOP);",
      "386:   return;",
      "387:  }",
      "389:  patch_branch_site(&patch__call_flush_count_cache,",
      "390:      (u64)&flush_count_cache, BRANCH_SET_LINK);",
      "392:  if (!security_ftr_enabled(SEC_FTR_BCCTR_FLUSH_ASSIST)) {",
      "393:   count_cache_flush_type = COUNT_CACHE_FLUSH_SW;",
      "394:   pr_info(\"count-cache-flush: full software flush sequence enabled.\\n\");",
      "",
      "[Removed Lines]",
      "382:  if (!enable || !security_ftr_enabled(SEC_FTR_FLUSH_COUNT_CACHE)) {",
      "384:   count_cache_flush_type = COUNT_CACHE_FLUSH_NONE;",
      "385:   pr_info(\"count-cache-flush: software flush disabled.\\n\");",
      "",
      "[Added Lines]",
      "389: static void no_count_cache_flush(void)",
      "390: {",
      "391:  count_cache_flush_type = COUNT_CACHE_FLUSH_NONE;",
      "392:  pr_info(\"count-cache-flush: software flush disabled.\\n\");",
      "393: }",
      "397:  if (!security_ftr_enabled(SEC_FTR_FLUSH_COUNT_CACHE) &&",
      "398:      !security_ftr_enabled(SEC_FTR_FLUSH_LINK_STACK))",
      "399:   enable = false;",
      "401:  if (!enable) {",
      "403:   pr_info(\"link-stack-flush: software flush disabled.\\n\");",
      "404:   link_stack_flush_enabled = false;",
      "405:   no_count_cache_flush();",
      "413:  pr_info(\"link-stack-flush: software flush enabled.\\n\");",
      "414:  link_stack_flush_enabled = true;",
      "417:  if (!security_ftr_enabled(SEC_FTR_FLUSH_COUNT_CACHE)) {",
      "418:   patch_instruction_site(&patch__flush_link_stack_return, PPC_INST_BLR);",
      "419:   no_count_cache_flush();",
      "420:   return;",
      "421:  }",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "407:  if (no_spectrev2 || cpu_mitigations_off()) {",
      "408:   if (security_ftr_enabled(SEC_FTR_BCCTRL_SERIALISED) ||",
      "409:       security_ftr_enabled(SEC_FTR_COUNT_CACHE_DISABLED))",
      "412:   enable = false;",
      "413:  }",
      "415:  toggle_count_cache_flush(enable);",
      "416: }",
      "",
      "[Removed Lines]",
      "410:    pr_warn(\"Spectre v2 mitigations not under software control, can't disable\\n\");",
      "",
      "[Added Lines]",
      "441:    pr_warn(\"Spectre v2 mitigations not fully under software control, can't disable\\n\");",
      "451:  if (security_ftr_enabled(SEC_FTR_COUNT_CACHE_DISABLED) ||",
      "452:      security_ftr_enabled(SEC_FTR_FLUSH_COUNT_CACHE))",
      "453:   security_ftr_set(SEC_FTR_FLUSH_LINK_STACK);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "792254a77201453d9a77479e63dc216ad90462d2",
      "candidate_info": {
        "commit_hash": "792254a77201453d9a77479e63dc216ad90462d2",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/792254a77201453d9a77479e63dc216ad90462d2",
        "files": [
          "arch/powerpc/include/asm/asm-prototypes.h",
          "arch/powerpc/kernel/entry_64.S",
          "arch/powerpc/kernel/security.c"
        ],
        "message": "powerpc/security: Fix link stack flush instruction\n\nThe inline execution path for the hardware assisted branch flush\ninstruction failed to set CTR to the correct value before bcctr,\ncausing a crash when the feature is enabled.\n\nFixes: 4d24e21cc694 (\"powerpc/security: Allow for processors that flush the link stack using the special bcctr\")\nSigned-off-by: Nicholas Piggin <npiggin@gmail.com>\nSigned-off-by: Michael Ellerman <mpe@ellerman.id.au>\nLink: https://lore.kernel.org/r/20201007080605.64423-1-npiggin@gmail.com",
        "before_after_code_files": [
          "arch/powerpc/include/asm/asm-prototypes.h||arch/powerpc/include/asm/asm-prototypes.h",
          "arch/powerpc/kernel/entry_64.S||arch/powerpc/kernel/entry_64.S",
          "arch/powerpc/kernel/security.c||arch/powerpc/kernel/security.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "arch/powerpc/include/asm/asm-prototypes.h||arch/powerpc/include/asm/asm-prototypes.h",
            "arch/powerpc/kernel/entry_64.S||arch/powerpc/kernel/entry_64.S",
            "arch/powerpc/kernel/security.c||arch/powerpc/kernel/security.c"
          ],
          "candidate": [
            "arch/powerpc/include/asm/asm-prototypes.h||arch/powerpc/include/asm/asm-prototypes.h",
            "arch/powerpc/kernel/entry_64.S||arch/powerpc/kernel/entry_64.S",
            "arch/powerpc/kernel/security.c||arch/powerpc/kernel/security.c"
          ]
        }
      },
      "candidate_diff": {
        "arch/powerpc/include/asm/asm-prototypes.h||arch/powerpc/include/asm/asm-prototypes.h": [
          "File: arch/powerpc/include/asm/asm-prototypes.h -> arch/powerpc/include/asm/asm-prototypes.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "145: void _kvmppc_save_tm_pr(struct kvm_vcpu *vcpu, u64 guest_msr);",
          "149: extern s32 patch__flush_count_cache_return;",
          "150: extern s32 patch__flush_link_stack_return;",
          "151: extern s32 patch__call_kvm_flush_link_stack;",
          "",
          "[Removed Lines]",
          "148: extern s32 patch__call_flush_branch_caches;",
          "",
          "[Added Lines]",
          "148: extern s32 patch__call_flush_branch_caches1;",
          "149: extern s32 patch__call_flush_branch_caches2;",
          "150: extern s32 patch__call_flush_branch_caches3;",
          "",
          "---------------"
        ],
        "arch/powerpc/kernel/entry_64.S||arch/powerpc/kernel/entry_64.S": [
          "File: arch/powerpc/kernel/entry_64.S -> arch/powerpc/kernel/entry_64.S",
          "--- Hunk 1 ---",
          "[Context before]",
          "431: #define FLUSH_COUNT_CACHE \\",
          "432: 1: nop;   \\",
          "435: .macro nops number",
          "436:  .rept \\number",
          "",
          "[Removed Lines]",
          "433:  patch_site 1b, patch__call_flush_branch_caches",
          "",
          "[Added Lines]",
          "433:  patch_site 1b, patch__call_flush_branch_caches1; \\",
          "434: 1: nop;   \\",
          "435:  patch_site 1b, patch__call_flush_branch_caches2; \\",
          "436: 1: nop;   \\",
          "437:  patch_site 1b, patch__call_flush_branch_caches3",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "513:  kuap_check_amr r9, r10",
          "",
          "[Removed Lines]",
          "515:  FLUSH_COUNT_CACHE",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "arch/powerpc/kernel/security.c||arch/powerpc/kernel/security.c": [
          "File: arch/powerpc/kernel/security.c -> arch/powerpc/kernel/security.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "431: static void update_branch_cache_flush(void)",
          "432: {",
          "433: #ifdef CONFIG_KVM_BOOK3S_HV_POSSIBLE",
          "435:  if (link_stack_flush_type == BRANCH_CACHE_FLUSH_NONE) {",
          "438:  } else {",
          "442:  }",
          "443: #endif",
          "446:  if (count_cache_flush_type == BRANCH_CACHE_FLUSH_NONE &&",
          "447:      link_stack_flush_type == BRANCH_CACHE_FLUSH_NONE) {",
          "450:  } else if (count_cache_flush_type == BRANCH_CACHE_FLUSH_HW &&",
          "451:      link_stack_flush_type == BRANCH_CACHE_FLUSH_HW) {",
          "454:  } else {",
          "459:   if (count_cache_flush_type == BRANCH_CACHE_FLUSH_NONE) {",
          "",
          "[Removed Lines]",
          "436:   patch_instruction_site(&patch__call_kvm_flush_link_stack,",
          "437:            ppc_inst(PPC_INST_NOP));",
          "440:   patch_branch_site(&patch__call_kvm_flush_link_stack,",
          "441:       (u64)&kvm_flush_link_stack, BRANCH_SET_LINK);",
          "448:   patch_instruction_site(&patch__call_flush_branch_caches,",
          "449:            ppc_inst(PPC_INST_NOP));",
          "452:   patch_instruction_site(&patch__call_flush_branch_caches,",
          "453:            ppc_inst(PPC_INST_BCCTR_FLUSH));",
          "455:   patch_branch_site(&patch__call_flush_branch_caches,",
          "456:       (u64)&flush_branch_caches, BRANCH_SET_LINK);",
          "",
          "[Added Lines]",
          "433:  u32 *site;",
          "436:  site = &patch__call_kvm_flush_link_stack;",
          "439:   patch_instruction_site(site, ppc_inst(PPC_INST_NOP));",
          "442:   patch_branch_site(site, (u64)&kvm_flush_link_stack, BRANCH_SET_LINK);",
          "447:  site = &patch__call_flush_branch_caches3;",
          "448:  patch_instruction_site(site, ppc_inst(PPC_INST_NOP));",
          "449:  site = &patch__call_flush_branch_caches2;",
          "450:  patch_instruction_site(site, ppc_inst(PPC_INST_NOP));",
          "451:  site = &patch__call_flush_branch_caches1;",
          "452:  patch_instruction_site(site, ppc_inst(PPC_INST_NOP));",
          "462:   site = &patch__call_flush_branch_caches1;",
          "463:   patch_instruction_site(site, ppc_inst(0x39207fff)); // li r9,0x7fff",
          "464:   site = &patch__call_flush_branch_caches2;",
          "465:   patch_instruction_site(site, ppc_inst(0x7d2903a6)); // mtctr r9",
          "466:   site = &patch__call_flush_branch_caches3;",
          "467:   patch_instruction_site(site, ppc_inst(PPC_INST_BCCTR_FLUSH));",
          "470:   patch_branch_site(site, (u64)&flush_branch_caches, BRANCH_SET_LINK);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c06ac2771070f465076e87bba262c64fb0b3aca3",
      "candidate_info": {
        "commit_hash": "c06ac2771070f465076e87bba262c64fb0b3aca3",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/c06ac2771070f465076e87bba262c64fb0b3aca3",
        "files": [
          "arch/powerpc/kernel/security.c"
        ],
        "message": "powerpc/security: change link stack flush state to the flush type enum\n\nPrepare to allow for hardware link stack flushing by using the\nnone/sw/hw type, same as the count cache state.\n\nSigned-off-by: Nicholas Piggin <npiggin@gmail.com>\nSigned-off-by: Michael Ellerman <mpe@ellerman.id.au>\nLink: https://lore.kernel.org/r/20200609070610.846703-3-npiggin@gmail.com",
        "before_after_code_files": [
          "arch/powerpc/kernel/security.c||arch/powerpc/kernel/security.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "arch/powerpc/kernel/security.c||arch/powerpc/kernel/security.c"
          ],
          "candidate": [
            "arch/powerpc/kernel/security.c||arch/powerpc/kernel/security.c"
          ]
        }
      },
      "candidate_diff": {
        "arch/powerpc/kernel/security.c||arch/powerpc/kernel/security.c": [
          "File: arch/powerpc/kernel/security.c -> arch/powerpc/kernel/security.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "27:  BRANCH_CACHE_FLUSH_HW = 0x4,",
          "28: };",
          "29: static enum branch_cache_flush_type count_cache_flush_type = BRANCH_CACHE_FLUSH_NONE;",
          "32: bool barrier_nospec_enabled;",
          "33: static bool no_nospec;",
          "",
          "[Removed Lines]",
          "30: static bool link_stack_flush_enabled;",
          "",
          "[Added Lines]",
          "30: static enum branch_cache_flush_type link_stack_flush_type = BRANCH_CACHE_FLUSH_NONE;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "219:   if (ccd)",
          "220:    seq_buf_printf(&s, \"Indirect branch cache disabled\");",
          "223:    seq_buf_printf(&s, \", Software link stack flush\");",
          "225:  } else if (count_cache_flush_type != BRANCH_CACHE_FLUSH_NONE) {",
          "",
          "[Removed Lines]",
          "222:   if (link_stack_flush_enabled)",
          "",
          "[Added Lines]",
          "222:   if (link_stack_flush_type == BRANCH_CACHE_FLUSH_SW)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "228:   if (count_cache_flush_type == BRANCH_CACHE_FLUSH_HW)",
          "229:    seq_buf_printf(&s, \" (hardware accelerated)\");",
          "232:    seq_buf_printf(&s, \", Software link stack flush\");",
          "234:  } else if (btb_flush_enabled) {",
          "",
          "[Removed Lines]",
          "231:   if (link_stack_flush_enabled)",
          "",
          "[Added Lines]",
          "231:   if (link_stack_flush_type == BRANCH_CACHE_FLUSH_SW)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "447:            ppc_inst(PPC_INST_NOP));",
          "448: #endif",
          "449:   pr_info(\"link-stack-flush: software flush disabled.\\n\");",
          "451:   no_count_cache_flush();",
          "452:   return;",
          "453:  }",
          "",
          "[Removed Lines]",
          "450:   link_stack_flush_enabled = false;",
          "",
          "[Added Lines]",
          "450:   link_stack_flush_type = BRANCH_CACHE_FLUSH_NONE;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "463: #endif",
          "465:  pr_info(\"link-stack-flush: software flush enabled.\\n\");",
          "469:  if (!security_ftr_enabled(SEC_FTR_FLUSH_COUNT_CACHE)) {",
          "",
          "[Removed Lines]",
          "466:  link_stack_flush_enabled = true;",
          "",
          "[Added Lines]",
          "466:  link_stack_flush_type = BRANCH_CACHE_FLUSH_SW;",
          "",
          "---------------"
        ]
      }
    }
  ]
}