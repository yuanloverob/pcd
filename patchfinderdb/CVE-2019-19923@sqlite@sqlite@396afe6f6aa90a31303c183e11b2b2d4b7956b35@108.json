{
  "cve_id": "CVE-2019-19923",
  "cve_desc": "flattenSubquery in select.c in SQLite 3.30.1 mishandles certain uses of SELECT DISTINCT involving a LEFT JOIN in which the right-hand side is a view. This can cause a NULL pointer dereference (or incorrect results).",
  "repo": "sqlite/sqlite",
  "patch_hash": "396afe6f6aa90a31303c183e11b2b2d4b7956b35",
  "patch_info": {
    "commit_hash": "396afe6f6aa90a31303c183e11b2b2d4b7956b35",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/396afe6f6aa90a31303c183e11b2b2d4b7956b35",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/join.test"
    ],
    "message": "Continue to back away from the LEFT JOIN optimization of check-in [41c27bc0ff1d3135] by disallowing query flattening if the outer query is DISTINCT.  Without this fix, if an index scan is run on the table within the view on the right-hand side of the LEFT JOIN, stale result registers might be accessed yielding incorrect results, and/or an OP_IfNullRow opcode might be invoked on the un-opened table, resulting in a NULL-pointer dereference.  This problem was found by the Yongheng and Rui fuzzer.\n\nFossilOrigin-Name: 862974312edf00e9d1068115d1a39b7235b7db68b6d86b81d38a12f025a4748e",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/join.test||test/join.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 289158aa24b066c453d2bce4bc2dead1c56fb0b23c3f7c4810b34b13627cef34",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3797:   if( (pSubitem->fg.jointype & JT_OUTER)!=0 ){",
      "3798:     isLeftJoin = 1;",
      "3801:       return 0;",
      "3802:     }",
      "3803:   }",
      "",
      "[Removed Lines]",
      "3799:     if( pSubSrc->nSrc>1 || isAgg || IsVirtual(pSubSrc->a[0].pTab) ){",
      "",
      "[Added Lines]",
      "3804:     ){",
      "",
      "---------------"
    ],
    "test/join.test||test/join.test": [
      "File: test/join.test -> test/join.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "975:   SELECT 24, * FROM t1 LEFT JOIN t0 ON +aa ISNULL;",
      "976: } {13 1 {} 14 1 {} 23 1 {} 24 1 {}}",
      "978: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "978: # 2019-12-18 problem with a LEFT JOIN where the RHS is a view.",
      "979: # Detected by Yongheng and Rui.",
      "980: # Follows from the optimization attempt of check-in 41c27bc0ff1d3135",
      "981: # on 2017-04-18",
      "982: #",
      "983: reset_db",
      "984: do_execsql_test join-22.10 {",
      "985:   CREATE TABLE t0(a, b);",
      "986:   CREATE INDEX t0a ON t0(a);",
      "987:   INSERT INTO t0 VALUES(10,10),(10,11),(10,12);",
      "988:   SELECT DISTINCT c FROM t0 LEFT JOIN (SELECT a+1 AS c FROM t0) ORDER BY c ;",
      "989: } {11}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "d35300f9b69d0260ef1e28340355c0b2c87f4904",
      "candidate_info": {
        "commit_hash": "d35300f9b69d0260ef1e28340355c0b2c87f4904",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/d35300f9b69d0260ef1e28340355c0b2c87f4904",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/parse.y",
          "src/sqliteInt.h",
          "src/window.c",
          "tool/mkkeywordhash.c"
        ],
        "message": "Parse EXCLUDE clauses in window frames. They do not yet work.\n\nFossilOrigin-Name: d03c7533a1e993f1b12392a5193b2127484307b27072236a1255e7a30849a381",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/parse.y||src/parse.y",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/window.c||src/window.c",
          "tool/mkkeywordhash.c||tool/mkkeywordhash.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 7d66cd2013206ebad50c7cdb7dab9211fa8b47f5cb7067dcb314b3e0180875f8",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/parse.y||src/parse.y": [
          "File: src/parse.y -> src/parse.y",
          "--- Hunk 1 ---",
          "[Context before]",
          "1688: }",
          "1690: frame_opt(A) ::= .                             {",
          "1692: }",
          "1695: }",
          "1698: }",
          "1700: range_or_rows(A) ::= RANGE.   { A = TK_RANGE; }",
          "",
          "[Removed Lines]",
          "1691:   A = sqlite3WindowAlloc(pParse, 0, TK_UNBOUNDED, 0, TK_CURRENT, 0);",
          "1693: frame_opt(A) ::= range_or_rows(X) frame_bound_s(Y). {",
          "1694:   A = sqlite3WindowAlloc(pParse, X, Y.eType, Y.pExpr, TK_CURRENT, 0);",
          "1696: frame_opt(A) ::= range_or_rows(X) BETWEEN frame_bound_s(Y) AND frame_bound_e(Z). {",
          "1697:   A = sqlite3WindowAlloc(pParse, X, Y.eType, Y.pExpr, Z.eType, Z.pExpr);",
          "",
          "[Added Lines]",
          "1691:   A = sqlite3WindowAlloc(pParse, 0, TK_UNBOUNDED, 0, TK_CURRENT, 0, 0);",
          "1693: frame_opt(A) ::= range_or_rows(X) frame_bound_s(Y) frame_exclude_opt(Z). {",
          "1694:   A = sqlite3WindowAlloc(pParse, X, Y.eType, Y.pExpr, TK_CURRENT, 0, Z);",
          "1696: frame_opt(A) ::= range_or_rows(X) BETWEEN frame_bound_s(Y) AND frame_bound_e(Z) frame_exclude_opt(W). {",
          "1697:   A = sqlite3WindowAlloc(pParse, X, Y.eType, Y.pExpr, Z.eType, Z.pExpr, W);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1711: frame_bound(A) ::= CURRENT ROW.         { A.eType = TK_CURRENT  ; A.pExpr = 0; }",
          "1712: frame_bound(A) ::= expr(X) FOLLOWING.   { A.eType = TK_FOLLOWING; A.pExpr = X; }",
          "1714: %type window_clause {Window*}",
          "1715: %destructor window_clause {sqlite3WindowListDelete(pParse->db, $$);}",
          "1716: window_clause(A) ::= WINDOW windowdefn_list(B). { A = B; }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1714: %type frame_exclude_opt {u8}",
          "1715: frame_exclude_opt(A) ::= . { A = TK_NO; }",
          "1716: frame_exclude_opt(A) ::= EXCLUDE frame_exclude(X). { A = X; }",
          "1718: %type frame_exclude {u8}",
          "1719: frame_exclude(A) ::= NO OTHERS.   { A = 0; }",
          "1720: frame_exclude(A) ::= CURRENT ROW. { A = TK_CURRENT; }",
          "1721: frame_exclude(A) ::= GROUP.       { A = TK_GROUP; }",
          "1722: frame_exclude(A) ::= TIES.        { A = TK_TIES; }",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "3585: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "3586: void sqlite3WindowDelete(sqlite3*, Window*);",
          "3587: void sqlite3WindowListDelete(sqlite3 *db, Window *p);",
          "3589: void sqlite3WindowAttach(Parse*, Expr*, Window*);",
          "3590: int sqlite3WindowCompare(Parse*, Window*, Window*);",
          "3591: void sqlite3WindowCodeInit(Parse*, Window*);",
          "",
          "[Removed Lines]",
          "3588: Window *sqlite3WindowAlloc(Parse*, int, int, Expr*, int , Expr*);",
          "",
          "[Added Lines]",
          "3588: Window *sqlite3WindowAlloc(Parse*, int, int, Expr*, int , Expr*, u8);",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1039:   pWin->eType = eType;",
          "1040:   pWin->eStart = eStart;",
          "1041:   pWin->eEnd = eEnd;",
          "1042:   pWin->bImplicitFrame = bImplicitFrame;",
          "1043:   pWin->pEnd = sqlite3WindowOffsetExpr(pParse, pEnd);",
          "1044:   pWin->pStart = sqlite3WindowOffsetExpr(pParse, pStart);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1043:   pWin->eExclude = eExclude;",
          "",
          "---------------"
        ],
        "tool/mkkeywordhash.c||tool/mkkeywordhash.c": [
          "File: tool/mkkeywordhash.c -> tool/mkkeywordhash.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "205:   { \"ESCAPE\",           \"TK_ESCAPE\",       ALWAYS                 },",
          "206:   { \"EXCEPT\",           \"TK_EXCEPT\",       COMPOUND               },",
          "207:   { \"EXCLUSIVE\",        \"TK_EXCLUSIVE\",    ALWAYS                 },",
          "208:   { \"EXISTS\",           \"TK_EXISTS\",       ALWAYS                 },",
          "209:   { \"EXPLAIN\",          \"TK_EXPLAIN\",      EXPLAIN                },",
          "210:   { \"FAIL\",             \"TK_FAIL\",         CONFLICT|TRIGGER       },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "208:   { \"EXCLUDE\",          \"TK_EXCLUDE\",      WINDOWFUNC             },",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "239:   { \"LIMIT\",            \"TK_LIMIT\",        ALWAYS                 },",
          "240:   { \"MATCH\",            \"TK_MATCH\",        ALWAYS                 },",
          "241:   { \"NATURAL\",          \"TK_JOIN_KW\",      ALWAYS                 },",
          "243:   { \"NOT\",              \"TK_NOT\",          ALWAYS                 },",
          "244:   { \"NOTHING\",          \"TK_NOTHING\",      UPSERT                 },",
          "245:   { \"NOTNULL\",          \"TK_NOTNULL\",      ALWAYS                 },",
          "",
          "[Removed Lines]",
          "242:   { \"NO\",               \"TK_NO\",           FKEY                   },",
          "",
          "[Added Lines]",
          "243:   { \"NO\",               \"TK_NO\",           FKEY|WINDOWFUNC        },",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "249:   { \"ON\",               \"TK_ON\",           ALWAYS                 },",
          "250:   { \"OR\",               \"TK_OR\",           ALWAYS                 },",
          "251:   { \"ORDER\",            \"TK_ORDER\",        ALWAYS                 },",
          "252:   { \"OUTER\",            \"TK_JOIN_KW\",      ALWAYS                 },",
          "253:   { \"OVER\",             \"TK_OVER\",         WINDOWFUNC             },",
          "254:   { \"PARTITION\",        \"TK_PARTITION\",    WINDOWFUNC             },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "253:   { \"OTHERS\",           \"TK_OTHERS\",       WINDOWFUNC             },",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "278:   { \"TEMP\",             \"TK_TEMP\",         ALWAYS                 },",
          "279:   { \"TEMPORARY\",        \"TK_TEMP\",         ALWAYS                 },",
          "280:   { \"THEN\",             \"TK_THEN\",         ALWAYS                 },",
          "281:   { \"TO\",               \"TK_TO\",           ALWAYS                 },",
          "282:   { \"TRANSACTION\",      \"TK_TRANSACTION\",  ALWAYS                 },",
          "283:   { \"TRIGGER\",          \"TK_TRIGGER\",      TRIGGER                },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "283:   { \"TIES\",             \"TK_TIES\",         WINDOWFUNC             },",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9c3bb59f76bd1cc196e6a5609017555b228eb64c",
      "candidate_info": {
        "commit_hash": "9c3bb59f76bd1cc196e6a5609017555b228eb64c",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/9c3bb59f76bd1cc196e6a5609017555b228eb64c",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbe.c"
        ],
        "message": "Fix the build for when -DSQLITE_SMALL_STACK is used.\n\nFossilOrigin-Name: b9eda2249ab5cf523093e4849c317d9a4b1743f7e15d96bdd6bb6cc423302914",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbe.c||src/vdbe.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 89bf0399e87be76e7b264e0a35e8a6d3af0f9e71123a929c20754882b636ca70",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2984:     }else if( pRec->flags & (MEM_Int|MEM_IntReal) ){",
          "2986:       i64 i = pRec->u.i;",
          "2988:       testcase( pRec->flags & MEM_Int );",
          "2989:       testcase( pRec->flags & MEM_IntReal );",
          "2990:       if( i<0 ){",
          "2992:       }else{",
          "2994:       }",
          "2995:       nHdr++;",
          "3002:         if( (i&1)==i && file_format>=4 ){",
          "3004:         }else{",
          "3005:           nData++;",
          "3006:           pRec->uTemp = 1;",
          "3007:         }",
          "3009:         nData += 2;",
          "3010:         pRec->uTemp = 2;",
          "3012:         nData += 3;",
          "3013:         pRec->uTemp = 3;",
          "3015:         nData += 4;",
          "3016:         pRec->uTemp = 4;",
          "3018:         nData += 6;",
          "3019:         pRec->uTemp = 5;",
          "3020:       }else{",
          "",
          "[Removed Lines]",
          "2987:       u64 u;",
          "2991:         u = ~i;",
          "2993:         u = i;",
          "2996:       testcase( u==127 );               testcase( u==128 );",
          "2997:       testcase( u==32767 );             testcase( u==32768 );",
          "2998:       testcase( u==8388607 );           testcase( u==8388608 );",
          "2999:       testcase( u==2147483647 );        testcase( u==2147483648 );",
          "3000:       testcase( u==140737488355327LL ); testcase( u==140737488355328LL );",
          "3001:       if( u<=127 ){",
          "3003:           pRec->uTemp = 8+(u32)u;",
          "3008:       }else if( u<=32767 ){",
          "3011:       }else if( u<=8388607 ){",
          "3014:       }else if( u<=2147483647 ){",
          "3017:       }else if( u<=140737488355327LL ){",
          "",
          "[Added Lines]",
          "2987:       u64 uu;",
          "2991:         uu = ~i;",
          "2993:         uu = i;",
          "2996:       testcase( uu==127 );               testcase( uu==128 );",
          "2997:       testcase( uu==32767 );             testcase( uu==32768 );",
          "2998:       testcase( uu==8388607 );           testcase( uu==8388608 );",
          "2999:       testcase( uu==2147483647 );        testcase( uu==2147483648 );",
          "3000:       testcase( uu==140737488355327LL ); testcase( uu==140737488355328LL );",
          "3001:       if( uu<=127 ){",
          "3003:           pRec->uTemp = 8+(u32)uu;",
          "3008:       }else if( uu<=32767 ){",
          "3011:       }else if( uu<=8388607 ){",
          "3014:       }else if( uu<=2147483647 ){",
          "3017:       }else if( uu<=140737488355327LL ){",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a40cb96a4c6f1313d076c0314925412c556d2e48",
      "candidate_info": {
        "commit_hash": "a40cb96a4c6f1313d076c0314925412c556d2e48",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/a40cb96a4c6f1313d076c0314925412c556d2e48",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbe.c",
          "test/rowid.test"
        ],
        "message": "Fix a problem with the fix for [9cf6c9bb51] (commit [658b84d7]) that could cause a cursor to be left in an invalid state following a (rowid < text-value) search.\n\nFossilOrigin-Name: bc7d2c1656396bb4f5f1f814e60dbf816cc91c5a521b54ad593cd3da0fe8dcb4",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbe.c||src/vdbe.c",
          "test/rowid.test||test/rowid.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 228e1087c0602470e450586499de5a3e87e266c688bc828f20e3bad2fdc65ff1",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4001:   pC->seekOp = pOp->opcode;",
          "4002: #endif",
          "4004:   if( pC->isTable ){",
          "4006:     assert( sqlite3BtreeCursorHasHint(pC->uc.pCursor, BTREE_SEEK_EQ)==0",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4004:   pC->deferredMoveto = 0;",
          "4005:   pC->cacheStatus = CACHE_STALE;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4105:       goto seek_not_found;",
          "4106:     }",
          "4107:   }",
          "4110: #ifdef SQLITE_TEST",
          "4111:   sqlite3_search_count++;",
          "4112: #endif",
          "",
          "[Removed Lines]",
          "4108:   pC->deferredMoveto = 0;",
          "4109:   pC->cacheStatus = CACHE_STALE;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/rowid.test||test/rowid.test": [
          "File: test/rowid.test -> test/rowid.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "765:   SELECT * FROM t14 WHERE x < 'a' ORDER BY rowid DESC;",
          "766: } {}",
          "768: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "768: reset_db",
          "769: do_execsql_test rowid-15.0 {",
          "770:   PRAGMA reverse_unordered_selects=true;",
          "771:   CREATE TABLE t1 (c0, c1);",
          "772:   CREATE TABLE t2 (c0 INT UNIQUE);",
          "773:   INSERT INTO t1(c0, c1) VALUES (0, 0), (0, NULL);",
          "774:   INSERT INTO t2(c0) VALUES (1);",
          "775: }",
          "777: do_execsql_test rowid-15.1 {",
          "778:   SELECT t2.c0, t1.c1 FROM t1, t2",
          "779:   WHERE (t2.rowid <= 'a') OR (t1.c0 <= t2.c0) LIMIT 100",
          "780: } {1 {} 1 0}",
          "782: do_execsql_test rowid-15.2 {",
          "783:   SELECT 1, NULL INTERSECT SELECT * FROM (",
          "784:       SELECT t2.c0, t1.c1 FROM t1, t2",
          "785:       WHERE ((t2.rowid <= 'a')) OR (t1.c0 <= t2.c0) ORDER BY 'a' DESC LIMIT 100",
          "786:   );",
          "787: } {1 {}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ee6c5e5ae7193241a55dd83c8f434a5d7c5abf11",
      "candidate_info": {
        "commit_hash": "ee6c5e5ae7193241a55dd83c8f434a5d7c5abf11",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/ee6c5e5ae7193241a55dd83c8f434a5d7c5abf11",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/parse.y"
        ],
        "message": "Move some things in parse.y so that TK_COLUMN and TK_AGG_COLUMN are assigned the same values as they are on trunk for a very small speedup.\n\nFossilOrigin-Name: d26fdfa3bc5f8d9c4a6000462080b0dd508e5cae9a83e0d126be48195224da8c",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/parse.y||src/parse.y"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: bfe793780fa6fc7a1e7d0ee60606dda272985de9573887dca118e9510fc609f2",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/parse.y||src/parse.y": [
          "File: src/parse.y -> src/parse.y"
        ]
      }
    },
    {
      "candidate_hash": "47a30159e5cdce71eb9df166c83eb01ec6c40718",
      "candidate_info": {
        "commit_hash": "47a30159e5cdce71eb9df166c83eb01ec6c40718",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/47a30159e5cdce71eb9df166c83eb01ec6c40718",
        "files": [
          "ext/fts5/fts5.h",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Fix typos in comments in fts5.h. No changes to code.\n\nFossilOrigin-Name: c19e97bc927074915a3ac8307bf89d30580cf90edd75f4001bcf589b2dfefe58",
        "before_after_code_files": [
          "ext/fts5/fts5.h||ext/fts5/fts5.h",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts5/fts5.h||ext/fts5/fts5.h": [
          "File: ext/fts5/fts5.h -> ext/fts5/fts5.h"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 8824115a9776e876a3677f0cb479e311ee65584d43872b37766a146afec72d8f",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}