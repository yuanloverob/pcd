{
  "cve_id": "CVE-2019-19924",
  "cve_desc": "SQLite 3.30.1 mishandles certain parser-tree rewriting, related to expr.c, vdbeaux.c, and window.c. This is caused by incorrect sqlite3WindowRewrite() error handling.",
  "repo": "sqlite/sqlite",
  "patch_hash": "8654186b0236d556aa85528c2573ee0b6ab71be3",
  "patch_info": {
    "commit_hash": "8654186b0236d556aa85528c2573ee0b6ab71be3",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/8654186b0236d556aa85528c2573ee0b6ab71be3",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/expr.c",
      "src/vdbeaux.c",
      "src/window.c"
    ],
    "message": "When an error occurs while rewriting the parser tree for window functions in the sqlite3WindowRewrite() routine, make sure that pParse->nErr is set, and make sure that this shuts down any subsequent code generation that might depend on the transformations that were implemented.  This fixes a problem discovered by the Yongheng and Rui fuzzer.\n\nFossilOrigin-Name: e2bddcd4c55ba3cbe0130332679ff4b048630d0ced9a8899982edb5a3569ba7f",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/expr.c||src/expr.c",
      "src/vdbeaux.c||src/vdbeaux.c",
      "src/window.c||src/window.c"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 4417c5bf0aabb34ed174f01afd981c924ae965a42128719d8d6735536631d12f",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/expr.c||src/expr.c": [
      "File: src/expr.c -> src/expr.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "376:   int addr;",
      "377:   CollSeq *p4;",
      "379:   if( isCommuted ){",
      "380:     p4 = sqlite3BinaryCompareCollSeq(pParse, pRight, pLeft);",
      "381:   }else{",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "379:   if( pParse->nErr ) return 0;",
      "",
      "---------------"
    ],
    "src/vdbeaux.c||src/vdbeaux.c": [
      "File: src/vdbeaux.c -> src/vdbeaux.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1304: static void vdbeVComment(Vdbe *p, const char *zFormat, va_list ap){",
      "1305:   assert( p->nOp>0 || p->aOp==0 );",
      "1307:   if( p->nOp ){",
      "1308:     assert( p->aOp );",
      "1309:     sqlite3DbFree(p->db, p->aOp[p->nOp-1].zComment);",
      "",
      "[Removed Lines]",
      "1306:   assert( p->aOp==0 || p->aOp[p->nOp-1].zComment==0 || p->db->mallocFailed );",
      "",
      "[Added Lines]",
      "1306:   assert( p->aOp==0 || p->aOp[p->nOp-1].zComment==0 || p->db->mallocFailed",
      "1307:           || p->pParse->nErr>0 );",
      "",
      "---------------"
    ],
    "src/window.c||src/window.c": [
      "File: src/window.c -> src/window.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "935:     pTab = sqlite3DbMallocZero(db, sizeof(Table));",
      "936:     if( pTab==0 ){",
      "938:     }",
      "940:     p->pSrc = 0;",
      "",
      "[Removed Lines]",
      "937:       return SQLITE_NOMEM;",
      "",
      "[Added Lines]",
      "937:       return sqlite3ErrorToParser(db, SQLITE_NOMEM);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1039:     sqlite3DbFree(db, pTab);",
      "1040:   }",
      "1042:   return rc;",
      "1043: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1042:   if( rc && pParse->nErr==0 ){",
      "1043:     assert( pParse->db->mallocFailed );",
      "1044:     return sqlite3ErrorToParser(pParse->db, SQLITE_NOMEM);",
      "1045:   }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b4e5039316e0c8fee98913d6f3433074d28a4b6b",
      "candidate_info": {
        "commit_hash": "b4e5039316e0c8fee98913d6f3433074d28a4b6b",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/b4e5039316e0c8fee98913d6f3433074d28a4b6b",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in"
        ],
        "message": "Add the \".eqp trace\" command to the CLI when using SQLITE_DEBUG, as a convenient shorthand for \"PRAGMA vdbe_debug=ON\" but with automatic indentation feature for program listings provided by the CLI.\n\nFossilOrigin-Name: 626502faa17b5b7a0fa36cabfd12e463eb09aec048d01c587a18d3977cf04662",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 13f6942eb0da2d92a0830f18640ce64208bd0cd6ff6d0c97e4a4c57ac3d65ba6",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "3401:   \"     --newlines             Allow unescaped newline characters in output\",",
          "3402:   \"   TABLE is LIKE pattern for the tables to dump\",",
          "3403:   \".echo on|off             Turn command echo on or off\",",
          "3405:   \".excel                   Display the output of next command in a spreadsheet\",",
          "3406:   \".exit ?CODE?             Exit this program with return-code CODE\",",
          "3407:   \".expert                  EXPERIMENTAL. Suggest indexes for specified queries\",",
          "",
          "[Removed Lines]",
          "3404:   \".eqp on|off|full         Enable or disable automatic EXPLAIN QUERY PLAN\",",
          "",
          "[Added Lines]",
          "3405:   \".eqp on|off|full|...     Enable or disable automatic EXPLAIN QUERY PLAN\",",
          "3406:   \"   Other Modes:\",",
          "3407: #ifdef SQLITE_DEBUG",
          "3408:   \"      test                  Show raw EXPLAIN QUERY PLAN output\",",
          "3409:   \"      trace                 Like \\\"full\\\" but also enable \\\"PRAGMA vdbe_trace\\\"\",",
          "3410: #endif",
          "3411:   \"      trigger               Like \\\"full\\\" but also show trigger bytecode\",",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "6264:   if( c=='e' && strncmp(azArg[0], \"eqp\", n)==0 ){",
          "6265:     if( nArg==2 ){",
          "6266:       p->autoEQPtest = 0;",
          "6267:       if( strcmp(azArg[1],\"full\")==0 ){",
          "6268:         p->autoEQP = AUTOEQP_full;",
          "6269:       }else if( strcmp(azArg[1],\"trigger\")==0 ){",
          "6270:         p->autoEQP = AUTOEQP_trigger;",
          "6271:       }else if( strcmp(azArg[1],\"test\")==0 ){",
          "6272:         p->autoEQP = AUTOEQP_on;",
          "6273:         p->autoEQPtest = 1;",
          "6274:       }else{",
          "6275:         p->autoEQP = (u8)booleanValue(azArg[1]);",
          "6276:       }",
          "6277:     }else{",
          "6279:       rc = 1;",
          "6280:     }",
          "6281:   }else",
          "",
          "[Removed Lines]",
          "6278:       raw_printf(stderr, \"Usage: .eqp off|on|trigger|full\\n\");",
          "",
          "[Added Lines]",
          "6274:       if( p->autoEQPtrace ){",
          "6275:         if( p->db ) sqlite3_exec(p->db, \"PRAGMA vdbe_trace=OFF;\", 0, 0, 0);",
          "6276:         p->autoEQPtrace = 0;",
          "6277:       }",
          "6282: #ifdef SQLITE_DEBUG",
          "6286:       }else if( strcmp(azArg[1],\"trace\")==0 ){",
          "6287:         p->autoEQP = AUTOEQP_full;",
          "6288:         p->autoEQPtrace = 1;",
          "6289:         open_db(p, 0);",
          "6290:         (void)sqlite3_table_column_metadata(p->db, \"x\",\"x\",0,0,0,0,0,0);",
          "6291:         sqlite3_exec(p->db, \"PRAGMA vdbe_trace=ON;\", 0, 0, 0);",
          "6292: #endif",
          "6297:       raw_printf(stderr, \"Usage: .eqp off|on|trace|trigger|full\\n\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d79cd92b237d51aeb5f6eb7b68acee27e1c6c279",
      "candidate_info": {
        "commit_hash": "d79cd92b237d51aeb5f6eb7b68acee27e1c6c279",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/d79cd92b237d51aeb5f6eb7b68acee27e1c6c279",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/resolve.c"
        ],
        "message": "Test for an OOM condition in resolveAlias().\n\nFossilOrigin-Name: 322eca7f6ad2234059669015aabb773a790e8bc3da95431c9c851ff5342c969b",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/resolve.c||src/resolve.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 1cc6cf6407c6e25aeafeca379a93d0ad2614839c07fb3644e46926fce5f1cfab",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/resolve.c||src/resolve.c": [
          "File: src/resolve.c -> src/resolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "97:       pExpr->flags |= EP_MemToken;",
          "98:     }",
          "99:     if( ExprHasProperty(pExpr, EP_WinFunc) ){",
          "101:     }",
          "102:     sqlite3DbFree(db, pDup);",
          "103:   }",
          "",
          "[Removed Lines]",
          "100:       pExpr->y.pWin->pOwner = pExpr;",
          "",
          "[Added Lines]",
          "100:       if( pExpr->y.pWin!=0 ){",
          "101:         pExpr->y.pWin->pOwner = pExpr;",
          "102:       }else{",
          "103:         assert( db->mallocFailed );",
          "104:       }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "276d7f78470002e09ede5bd96556cddbc23cd678",
      "candidate_info": {
        "commit_hash": "276d7f78470002e09ede5bd96556cddbc23cd678",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/276d7f78470002e09ede5bd96556cddbc23cd678",
        "files": [
          "manifest",
          "manifest.uuid",
          "tool/lempar.c"
        ],
        "message": "Try to fix a harmless compiler warning reported by ICC.\n\nFossilOrigin-Name: 7f41b44ca2ecb907ea0fd09a974ac9dbdf911463a94f0f77c826cf1b1d9c3e8c",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "tool/lempar.c||tool/lempar.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: b528bdcd45db1b783ecd9739c3d3c890f04de7003f079668970eafaf8e23b2f3",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tool/lempar.c||tool/lempar.c": [
          "File: tool/lempar.c -> tool/lempar.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1068:   return yyFallback[iToken];",
          "1069: #else",
          "1070:   (void)iToken;",
          "1072:   return 0;",
          "1073: }",
          "",
          "[Removed Lines]",
          "1071: #endif",
          "",
          "[Added Lines]",
          "1072: #endif",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a2b6806b3e4dd2d39b2d776e7eaecff17bc2d086",
      "candidate_info": {
        "commit_hash": "a2b6806b3e4dd2d39b2d776e7eaecff17bc2d086",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/a2b6806b3e4dd2d39b2d776e7eaecff17bc2d086",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c"
        ],
        "message": "If the string formatter in sqlite3NestedParse() fails due to an over-length string, make sure this error is recorded by the parser so that it knows to fail.\n\nFossilOrigin-Name: 85e53ff13300132250221de769a2aa7d92d81bb48d60f6e99000bc69a5b1e6fb",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: bbdbaf84a52937ccf877072a8b01b07f7b9c037c59ba54df72ca888d5404cbad",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "266:     if( !db->mallocFailed ) pParse->rc = SQLITE_TOOBIG;",
          "267:     return;",
          "268:   }",
          "269:   pParse->nested++;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "267:     pParse->nErr++;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0a8d06a93f308e2ad450a62b961a09d43c15bba6",
      "candidate_info": {
        "commit_hash": "0a8d06a93f308e2ad450a62b961a09d43c15bba6",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/0a8d06a93f308e2ad450a62b961a09d43c15bba6",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/view.test",
          "test/window9.test"
        ],
        "message": "Add test cases to this branch.\n\nFossilOrigin-Name: f37317d81cc2864ed57c76a7347351310d61c8056a2a0179218530ba60a44986",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/view.test||test/view.test",
          "test/window9.test||test/window9.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 7480db307c39b86bce269583e5917f5e1a3990500552fd98400ef3e7088c0b2a",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/view.test||test/view.test": [
          "File: test/view.test -> test/view.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "724:   1 1 3 3",
          "725: }",
          "727: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "727: #-------------------------------------------------------------------------",
          "728: reset_db",
          "729: do_execsql_test view-27.0 {",
          "730:   CREATE TABLE t0(c0 TEXT, c1);",
          "731:   INSERT INTO t0(c0, c1) VALUES (-1, 0);",
          "732:   CREATE VIEW v0(c0, c1) AS SELECT t0.c0, AVG(t0.c1) FROM t0;",
          "733: }",
          "735: do_execsql_test view-27.1 {",
          "736:   SELECT c0, typeof(c0), affinity(c0), c1, typeof(c1), affinity(c1) FROM v0;",
          "737: } {",
          "738:   -1   text text",
          "739:    0.0 real none",
          "740: }",
          "742: do_execsql_test view-27.2 { SELECT c0<c1 FROM v0 } 1",
          "743: do_execsql_test view-27.3 { SELECT c1<c0 FROM v0 } 0",
          "744: do_execsql_test view-27.4 {",
          "745:   SELECT 1 FROM v0 WHERE c1<c0",
          "746: } {}",
          "747: do_execsql_test view-27.5 {",
          "748:   SELECT 1 FROM v0 WHERE c0<c1",
          "749: } {1}",
          "751: do_execsql_test view-27.6 {",
          "752:   SELECT c0<c1 FROM (SELECT t0.c0 AS c0, AVG(t0.c1) AS c1 FROM t0)",
          "753: } 1",
          "754: do_execsql_test view-27.7 {",
          "755:   SELECT c1<c0 FROM (SELECT t0.c0 AS c0, AVG(t0.c1) AS c1 FROM t0)",
          "756: } 0",
          "757: do_execsql_test view-27.8 {",
          "758:   SELECT 1 FROM (SELECT t0.c0 AS c0, AVG(t0.c1) AS c1 FROM t0) WHERE c1<c0",
          "759: } {}",
          "760: do_execsql_test view-27.9 {",
          "761:   SELECT 1 FROM (SELECT t0.c0 AS c0, AVG(t0.c1) AS c1 FROM t0) WHERE c0<c1",
          "762: } {1}",
          "",
          "---------------"
        ],
        "test/window9.test||test/window9.test": [
          "File: test/window9.test -> test/window9.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "131:       );",
          "132: } {1 {sub-select returns 3 columns - expected 1}}",
          "135: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "134: #-------------------------------------------------------------------------",
          "135: reset_db",
          "136: do_execsql_test 4.0 {",
          "137:   CREATE TABLE t1(a, b TEXT);",
          "138:   INSERT INTO t1 VALUES('A', 1), ('A', 2), ('2', 1), ('2', 2);",
          "139: }",
          "141: do_execsql_test 4.1.1 {",
          "142:   SELECT b, b=count(*), '1,2'                   FROM t1 GROUP BY b;",
          "143: } {1 0 1,2 2 1 1,2}",
          "144: do_execsql_test 4.1.2 {",
          "145:   SELECT b, b=count(*), group_concat(b) OVER () FROM t1 GROUP BY b;",
          "146: } {1 0 1,2 2 1 1,2}",
          "",
          "---------------"
        ]
      }
    }
  ]
}