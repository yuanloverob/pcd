{
  "cve_id": "CVE-2014-8713",
  "cve_desc": "Stack-based buffer overflow in the build_expert_data function in epan/dissectors/packet-ncp2222.inc in the NCP dissector in Wireshark 1.10.x before 1.10.11 and 1.12.x before 1.12.2 allows remote attackers to cause a denial of service (application crash) via a crafted packet.",
  "repo": "wireshark/wireshark",
  "patch_hash": "b9988e2bbfc7c6c41ef82c559bd11a8c19170491",
  "patch_info": {
    "commit_hash": "b9988e2bbfc7c6c41ef82c559bd11a8c19170491",
    "repo": "wireshark/wireshark",
    "commit_url": "https://github.com/wireshark/wireshark/commit/b9988e2bbfc7c6c41ef82c559bd11a8c19170491",
    "files": [
      "epan/dissectors/packet-ncp2222.inc"
    ],
    "message": "ncp2222: don't overflow buffer constructing string\n\nFixes stack-smashing vuln.\n\nSomehow there was already an XXX in the code about this, but nobody realized at\nthe time it was worth fixing... really?\n\nBug: 10552\nChange-Id: I849068bd6c45146339444f295b72430d3c6e08f2\nReviewed-on: https://code.wireshark.org/review/4653\nReviewed-by: Evan Huus <eapache@gmail.com>",
    "before_after_code_files": [
      "epan/dissectors/packet-ncp2222.inc||epan/dissectors/packet-ncp2222.inc"
    ]
  },
  "patch_diff": {
    "epan/dissectors/packet-ncp2222.inc||epan/dissectors/packet-ncp2222.inc": [
      "File: epan/dissectors/packet-ncp2222.inc -> epan/dissectors/packet-ncp2222.inc",
      "--- Hunk 1 ---",
      "[Context before]",
      "2755:             case 18:",
      "2756:             case 19:",
      "2760:                 if (repeat_lookup > 0) {",
      "2761:                     if (strlen(temp_buffer) + strlen(buffer) < 250) {",
      "2762:                         g_strlcat(temp_buffer, buffer, 256);",
      "",
      "[Removed Lines]",
      "2759:                 uni_to_string(get_finfo_value_string(PTREE_FINFO(tree_pointer)), get_finfo_length(PTREE_FINFO(tree_pointer)), buffer);",
      "",
      "[Added Lines]",
      "2758:                 uni_to_string(get_finfo_value_string(PTREE_FINFO(tree_pointer)), MIN(get_finfo_length(PTREE_FINFO(tree_pointer)), buffer_size), buffer);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "4a5ca5c76e199694bba8a21418f52ca0f30322d1",
      "candidate_info": {
        "commit_hash": "4a5ca5c76e199694bba8a21418f52ca0f30322d1",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/4a5ca5c76e199694bba8a21418f52ca0f30322d1",
        "files": [
          "epan/crypt/airpdcap.c",
          "epan/crypt/airpdcap_debug.h",
          "epan/dissectors/packet-ap1394.c",
          "epan/dissectors/packet-arp.c",
          "epan/dissectors/packet-ber.c",
          "epan/dissectors/packet-btsdp.c",
          "epan/dissectors/packet-isakmp.c",
          "epan/dissectors/packet-ncp2222.inc",
          "epan/dissectors/packet-rtmpt.c",
          "epan/dissectors/packet-sigcomp.c",
          "epan/dissectors/packet-ssl-utils.c",
          "epan/dissectors/packet-ubertooth.c",
          "epan/dissectors/packet-yami.c",
          "epan/sigcomp-udvm.c",
          "epan/sigcomp_state_hdlr.c",
          "epan/to_str.c",
          "epan/to_str.h",
          "ui/gtk/lbm_stream_dlg.c",
          "ui/gtk/lbm_uimflow_dlg.c",
          "ui/gtk/mcast_stream.c",
          "ui/qt/lbm_stream_dialog.cpp",
          "ui/qt/lbm_uimflow_dialog.cpp",
          "ui/qt/uat_dialog.cpp"
        ],
        "message": "bytes_to_ep_str -> bytes_to_str\n\nChange-Id: Ifcda8328dedec0ef4104c3a124d6246f99493750\nReviewed-on: https://code.wireshark.org/review/6389\nReviewed-by: Anders Broman <a.broman58@gmail.com>",
        "before_after_code_files": [
          "epan/crypt/airpdcap.c||epan/crypt/airpdcap.c",
          "epan/crypt/airpdcap_debug.h||epan/crypt/airpdcap_debug.h",
          "epan/dissectors/packet-ap1394.c||epan/dissectors/packet-ap1394.c",
          "epan/dissectors/packet-arp.c||epan/dissectors/packet-arp.c",
          "epan/dissectors/packet-ber.c||epan/dissectors/packet-ber.c",
          "epan/dissectors/packet-btsdp.c||epan/dissectors/packet-btsdp.c",
          "epan/dissectors/packet-isakmp.c||epan/dissectors/packet-isakmp.c",
          "epan/dissectors/packet-ncp2222.inc||epan/dissectors/packet-ncp2222.inc",
          "epan/dissectors/packet-rtmpt.c||epan/dissectors/packet-rtmpt.c",
          "epan/dissectors/packet-sigcomp.c||epan/dissectors/packet-sigcomp.c",
          "epan/dissectors/packet-ssl-utils.c||epan/dissectors/packet-ssl-utils.c",
          "epan/dissectors/packet-ubertooth.c||epan/dissectors/packet-ubertooth.c",
          "epan/dissectors/packet-yami.c||epan/dissectors/packet-yami.c",
          "epan/sigcomp-udvm.c||epan/sigcomp-udvm.c",
          "epan/sigcomp_state_hdlr.c||epan/sigcomp_state_hdlr.c",
          "epan/to_str.c||epan/to_str.c",
          "epan/to_str.h||epan/to_str.h",
          "ui/gtk/lbm_stream_dlg.c||ui/gtk/lbm_stream_dlg.c",
          "ui/gtk/lbm_uimflow_dlg.c||ui/gtk/lbm_uimflow_dlg.c",
          "ui/gtk/mcast_stream.c||ui/gtk/mcast_stream.c",
          "ui/qt/lbm_stream_dialog.cpp||ui/qt/lbm_stream_dialog.cpp",
          "ui/qt/lbm_uimflow_dialog.cpp||ui/qt/lbm_uimflow_dialog.cpp",
          "ui/qt/uat_dialog.cpp||ui/qt/uat_dialog.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-ncp2222.inc||epan/dissectors/packet-ncp2222.inc"
          ],
          "candidate": [
            "epan/dissectors/packet-ncp2222.inc||epan/dissectors/packet-ncp2222.inc"
          ]
        }
      },
      "candidate_diff": {
        "epan/crypt/airpdcap.c||epan/crypt/airpdcap.c": [
          "File: epan/crypt/airpdcap.c -> epan/crypt/airpdcap.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1835: decryption_key_t*",
          "1836: parse_key_string(gchar* input_string, guint8 key_type)",
          "1837: {",
          "1839:     gchar *ssid;",
          "1841:     GString    *key_string = NULL;",
          "",
          "[Removed Lines]",
          "1838:     gchar *key;",
          "",
          "[Added Lines]",
          "1838:     gchar *key, *tmp_str;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1874:            dk->type = AIRPDCAP_KEY_TYPE_WEP;",
          "1878:            g_string_ascii_down(dk->key);",
          "1879:            dk->bits = key_ba->len * 8;",
          "1880:            dk->ssid = NULL;",
          "1882:            g_byte_array_free(key_ba, TRUE);",
          "1883:            return dk;",
          "1884:        }",
          "",
          "[Removed Lines]",
          "1877:            dk->key  = g_string_new(bytes_to_ep_str(key_ba->data, key_ba->len));",
          "",
          "[Added Lines]",
          "1877:            tmp_str = bytes_to_str(NULL, key_ba->data, key_ba->len);",
          "1878:            dk->key  = g_string_new(tmp_str);",
          "1883:            wmem_free(NULL, tmp_str);",
          "",
          "---------------"
        ],
        "epan/crypt/airpdcap_debug.h||epan/crypt/airpdcap_debug.h": [
          "File: epan/crypt/airpdcap_debug.h -> epan/crypt/airpdcap_debug.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "87: #endif",
          "88: #endif",
          "",
          "[Removed Lines]",
          "90: #define DEBUG_DUMP(x,y,z) g_warning(\"%s: %s\", x, bytes_to_ep_str(y, (z)))",
          "",
          "[Added Lines]",
          "90: #define DEBUG_DUMP(x,y,z) \\",
          "91:     { \\",
          "92:     char* tmp_str = (char*)bytes_to_str(NULL, y, (z)); \\",
          "93:     g_warning(\"%s: %s\", x, ) \\",
          "94:     wmem_free(NULL, tmp_str); \\",
          "95:     }",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-ap1394.c||epan/dissectors/packet-ap1394.c": [
          "File: epan/dissectors/packet-ap1394.c -> epan/dissectors/packet-ap1394.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "66: {",
          "67:   proto_item *ti;",
          "68:   proto_tree *fh_tree = NULL;",
          "70:   guint16    etype;",
          "71:   tvbuff_t *next_tvb;",
          "73:   col_set_str(pinfo->cinfo, COL_PROTOCOL, \"IP/IEEE1394\");",
          "74:   col_clear(pinfo->cinfo, COL_INFO);",
          "77:   TVB_SET_ADDRESS(&pinfo->dl_src,   AT_EUI64, tvb, 8, 8);",
          "78:   TVB_SET_ADDRESS(&pinfo->src,      AT_EUI64, tvb, 8, 8);",
          "80:   TVB_SET_ADDRESS(&pinfo->dl_dst,   AT_EUI64, tvb, 0, 8);",
          "81:   TVB_SET_ADDRESS(&pinfo->dst,      AT_EUI64, tvb, 0, 8);",
          "83:   if (tree) {",
          "84:     ti = proto_tree_add_protocol_format(tree, proto_ap1394, tvb, 0, 18,",
          "85:                 \"Apple IP-over-IEEE 1394, Src: %s, Dst: %s\",",
          "87:     fh_tree = proto_item_add_subtree(ti, ett_ap1394);",
          "88:     proto_tree_add_item(fh_tree, hf_ap1394_dst, tvb, 0, 8, ENC_NA);",
          "89:     proto_tree_add_item(fh_tree, hf_ap1394_src, tvb, 8, 8, ENC_NA);",
          "",
          "[Removed Lines]",
          "69:   const guint8 *src_addr, *dst_addr;",
          "76:   src_addr=tvb_get_ptr(tvb, 8, 8);",
          "79:   dst_addr=tvb_get_ptr(tvb, 0, 8);",
          "86:                 bytes_to_ep_str(src_addr, 8), bytes_to_ep_str(dst_addr, 8));",
          "",
          "[Added Lines]",
          "83:                 address_to_str(wmem_packet_scope(), &pinfo->src), address_to_str(wmem_packet_scope(), &pinfo->dst));",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-arp.c||epan/dissectors/packet-arp.c": [
          "File: epan/dissectors/packet-arp.c -> epan/dissectors/packet-arp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "397:     return address_to_str(wmem_packet_scope(), &addr);",
          "398:     }",
          "399:   }",
          "401: }",
          "403: #define MAX_E164_STR_LEN                20",
          "",
          "[Removed Lines]",
          "400:   return bytes_to_ep_str(ad, ad_len);",
          "",
          "[Added Lines]",
          "400:   return bytes_to_str(wmem_packet_scope(), ad, ad_len);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "435:   }",
          "436: }",
          "",
          "[Removed Lines]",
          "434:     return bytes_to_ep_str(ad, ad_len);",
          "",
          "[Added Lines]",
          "434:     return bytes_to_str(wmem_packet_scope(), ad, ad_len);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "456: }",
          "458: const value_string arp_hrd_vals[] = {",
          "",
          "[Removed Lines]",
          "455:   return bytes_to_ep_str(ad, ad_len);",
          "",
          "[Added Lines]",
          "455:   return bytes_to_str(wmem_packet_scope(), ad, ad_len);",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-ber.c||epan/dissectors/packet-ber.c": [
          "File: epan/dissectors/packet-ber.c -> epan/dissectors/packet-ber.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3964:             if (bitstring[byteno]) {",
          "3965:                 expert_add_info_format(",
          "3966:                     actx->pinfo, item, &ei_ber_bits_unknown,",
          "3968:                 break;",
          "3969:             }",
          "3970:         }",
          "",
          "[Removed Lines]",
          "3967:                     \"Unknown bit(s): 0x%s\", bytes_to_ep_str(bitstring, len));",
          "",
          "[Added Lines]",
          "3967:                     \"Unknown bit(s): 0x%s\", bytes_to_str(wmem_packet_scope(), bitstring, len));",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-btsdp.c||epan/dissectors/packet-btsdp.c": [
          "File: epan/dissectors/packet-btsdp.c -> epan/dissectors/packet-btsdp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "910:             i_uuid += 1;",
          "911:         }",
          "914:     }",
          "915: }",
          "",
          "[Removed Lines]",
          "913:         return bytes_to_ep_str(uuid->data, uuid->size);",
          "",
          "[Added Lines]",
          "913:         return bytes_to_str(wmem_packet_scope(), uuid->data, uuid->size);",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-isakmp.c||epan/dissectors/packet-isakmp.c": [
          "File: epan/dissectors/packet-isakmp.c -> epan/dissectors/packet-isakmp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4739:         if (tvb_memeql(tvb, offset, md, icd_len) == 0) {",
          "4740:           proto_item_append_text(icd_item, \"[correct]\");",
          "4741:         } else {",
          "4743:           expert_add_info(pinfo, icd_item, &ei_isakmp_ikev2_integrity_checksum);",
          "4744:         }",
          "4745:         gcry_md_close(md_hd);",
          "",
          "[Removed Lines]",
          "4742:           proto_item_append_text(icd_item, \"[incorrect, should be %s]\", bytes_to_ep_str(md, icd_len));",
          "",
          "[Added Lines]",
          "4742:           proto_item_append_text(icd_item, \"[incorrect, should be %s]\", bytes_to_str(wmem_packet_scope(), md, icd_len));",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-ncp2222.inc||epan/dissectors/packet-ncp2222.inc": [
          "File: epan/dissectors/packet-ncp2222.inc -> epan/dissectors/packet-ncp2222.inc",
          "--- Hunk 1 ---",
          "[Context before]",
          "2782:                 }",
          "2783:             case 21:",
          "2786:                 break;",
          "2788:                 g_snprintf(buffer, (gulong) buffer_size, \"Unsupported Expert Type\");",
          "",
          "[Removed Lines]",
          "2785:                 g_snprintf(buffer, (gulong) buffer_size, \"%s\", bytes_to_ep_str(get_finfo_value_string(PTREE_FINFO(tree_pointer)), get_finfo_length(PTREE_FINFO(tree_pointer))));",
          "",
          "[Added Lines]",
          "2785:                 g_snprintf(buffer, (gulong) buffer_size, \"%s\", bytes_to_str(wmem_packet_scope(), get_finfo_value_string(PTREE_FINFO(tree_pointer)), get_finfo_length(PTREE_FINFO(tree_pointer))));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "7748:                         col_append_fstr(pinfo->cinfo, COL_INFO,",
          "7749:                                         (const gchar*) ncp_rec->req_info_str->first_string,",
          "7750:                                         byte_string);",
          "",
          "[Removed Lines]",
          "7747:                         byte_string = bytes_to_ep_str(get_finfo_value_string(finfo), get_finfo_length(finfo));",
          "",
          "[Added Lines]",
          "7747:                         byte_string = bytes_to_str(wmem_packet_scope(), get_finfo_value_string(finfo), get_finfo_length(finfo));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "7782:                         if (info_type == 1)",
          "7785:                             col_append_fstr(pinfo->cinfo, COL_INFO,",
          "7786:                                             (const gchar*) ncp_rec->req_info_str->repeat_string,",
          "7787:                                             byte_string);",
          "",
          "[Removed Lines]",
          "7784:                             byte_string = bytes_to_ep_str(get_finfo_value_string(finfo), get_finfo_length(finfo));",
          "",
          "[Added Lines]",
          "7784:                             byte_string = bytes_to_str(wmem_packet_scope(), get_finfo_value_string(finfo), get_finfo_length(finfo));",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-rtmpt.c||epan/dissectors/packet-rtmpt.c": [
          "File: epan/dissectors/packet-rtmpt.c -> epan/dissectors/packet-rtmpt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1530:                         iValueOffset += iValueLength;",
          "1531:                         iByteArrayValue = (guint8 *)tvb_memdup(wmem_packet_scope(), tvb, iValueOffset, iArrayLength);",
          "1532:                         proto_tree_add_bytes(val_tree, hf_amf_bytearray, tvb, iValueOffset, iArrayLength, iByteArrayValue);",
          "1534:                         if (parent_ti != NULL)",
          "1536:                 } else {",
          "1538:                         proto_tree_add_uint(val_tree, hf_amf_object_reference, tvb, iValueOffset, iValueLength, iIntegerValue >> 1);",
          "",
          "[Removed Lines]",
          "1533:                         proto_item_append_text(ti, \" %s\", bytes_to_ep_str(iByteArrayValue, iArrayLength));",
          "1535:                                 proto_item_append_text(parent_ti, \" %s\", bytes_to_ep_str(iByteArrayValue, iArrayLength));",
          "",
          "[Added Lines]",
          "1533:                         proto_item_append_text(ti, \" %s\", bytes_to_str(wmem_packet_scope(), iByteArrayValue, iArrayLength));",
          "1535:                                 proto_item_append_text(parent_ti, \" %s\", bytes_to_str(wmem_packet_scope(), iByteArrayValue, iArrayLength));",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-sigcomp.c||epan/dissectors/packet-sigcomp.c": [
          "File: epan/dissectors/packet-sigcomp.c -> epan/dissectors/packet-sigcomp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "690:             offset = offset + len;",
          "691:         }",
          "692:         tvb_memcpy(tvb, partial_state, offset, partial_state_len);",
          "694:         proto_tree_add_string(sigcomp_tree,hf_sigcomp_partial_state,",
          "695:             tvb, offset, partial_state_len, partial_state_str);",
          "696:         offset = offset + partial_state_len;",
          "",
          "[Removed Lines]",
          "693:         partial_state_str = bytes_to_ep_str(partial_state, partial_state_len);",
          "",
          "[Added Lines]",
          "693:         partial_state_str = bytes_to_str(wmem_packet_scope(), partial_state, partial_state_len);",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-ssl-utils.c||epan/dissectors/packet-ssl-utils.c": [
          "File: epan/dissectors/packet-ssl-utils.c -> epan/dissectors/packet-ssl-utils.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3603:     static char               buf_name[256];",
          "3604:     static char               buf_email[128];",
          "3605:     unsigned char             buf_keyid[32];",
          "3607:     gnutls_pkcs12_t       ssl_p12  = NULL;",
          "3608:     gnutls_x509_crt_t     ssl_cert = NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3606:     char                     *tmp_str;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3726:                     if (ret < 0) { g_strlcpy(buf_keyid, \"<ERROR>\", 32); }",
          "3728:                     private_key->x509_cert = ssl_cert;",
          "3730:                     break;",
          "3732:                 case GNUTLS_BAG_PKCS8_KEY:",
          "",
          "[Removed Lines]",
          "3729:                     ssl_debug_printf( \"Certificate imported: %s <%s>, KeyID %s\\n\", buf_name, buf_email, bytes_to_ep_str(buf_keyid, (int) buf_len));",
          "",
          "[Added Lines]",
          "3730:                     tmp_str = bytes_to_str(NULL, buf_keyid, (int) buf_len);",
          "3731:                     ssl_debug_printf( \"Certificate imported: %s <%s>, KeyID %s\\n\", buf_name, buf_email, tmp_str);",
          "3732:                     wmem_free(NULL, tmp_str);",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-ubertooth.c||epan/dissectors/packet-ubertooth.c": [
          "File: epan/dissectors/packet-ubertooth.c -> epan/dissectors/packet-ubertooth.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1781:         proto_tree_add_bytes(main_tree, hf_serial_number, tvb,",
          "1782:                 offset, 16, (guint8 *) serial);",
          "1783:         col_append_fstr(pinfo->cinfo, COL_INFO, \" = %s\",",
          "1785:         offset += 16;",
          "1787:         break;",
          "",
          "[Removed Lines]",
          "1784:                 bytes_to_ep_str((guint8 *) serial, 16));",
          "",
          "[Added Lines]",
          "1784:                 bytes_to_str(wmem_packet_scope(), (guint8 *) serial, 16));",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-yami.c||epan/dissectors/packet-yami.c": [
          "File: epan/dissectors/packet-yami.c -> epan/dissectors/packet-yami.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "231:    offset += 4;",
          "233:    val = tvb_get_ptr(tvb, offset, val_len);",
          "236:    proto_item_append_text(ti, \", Type: binary, Value: %s\", repr);",
          "237:    offset += (val_len + 3) & ~3;",
          "",
          "[Removed Lines]",
          "234:    repr = bytes_to_ep_str(val, val_len);",
          "",
          "[Added Lines]",
          "234:    repr = bytes_to_str(wmem_packet_scope(), val, val_len);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "395:     offset += 4;",
          "397:     val = tvb_get_ptr(tvb, offset, val_len);",
          "400:     proto_item_append_text(ti, \"%s, \", repr);",
          "401:     offset += (val_len + 3) & ~3;",
          "",
          "[Removed Lines]",
          "398:     repr = bytes_to_ep_str(val, val_len);",
          "",
          "[Added Lines]",
          "398:     repr = bytes_to_str(wmem_packet_scope(), val, val_len);",
          "",
          "---------------"
        ],
        "epan/sigcomp-udvm.c||epan/sigcomp-udvm.c": [
          "File: epan/sigcomp-udvm.c -> epan/sigcomp-udvm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "892:   if (print_level_2 ){",
          "893:    proto_tree_add_text(udvm_tree, message_tvb, 0, -1,",
          "894:      \"Calculated SHA-1: %s\",",
          "896:   }",
          "898:   current_address = next_operand_address;",
          "",
          "[Removed Lines]",
          "895:      bytes_to_ep_str(sha1_digest_buf, STATE_BUFFER_SIZE));",
          "",
          "[Added Lines]",
          "895:      bytes_to_str(wmem_packet_scope(), sha1_digest_buf, STATE_BUFFER_SIZE));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2695:     sha1_update( &ctx, (guint8 *) sha1buff, state_length_buff[n] + 8);",
          "2696:     sha1_finish( &ctx, sha1_digest_buf );",
          "2697:     if (print_level_3 ){",
          "2700:     }",
          "",
          "[Removed Lines]",
          "2698:      proto_tree_add_text(udvm_tree, bytecode_tvb, 0, -1,\"SHA1 digest %s\",bytes_to_ep_str(sha1_digest_buf, STATE_BUFFER_SIZE));",
          "",
          "[Added Lines]",
          "2698:      proto_tree_add_text(udvm_tree, bytecode_tvb, 0, -1,\"SHA1 digest %s\", bytes_to_str(wmem_packet_scope(), sha1_digest_buf, STATE_BUFFER_SIZE));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2705:     udvm_state_create(sha1buff, sha1_digest_buf, STATE_MIN_ACCESS_LEN);",
          "2707:     proto_tree_add_text(udvm_tree,bytecode_tvb, 0, -1,\"### Creating state ###\");",
          "2710:     n++;",
          "",
          "[Removed Lines]",
          "2708:     proto_tree_add_string(udvm_tree,hf_id, bytecode_tvb, 0, 0, bytes_to_ep_str(sha1_digest_buf, STATE_MIN_ACCESS_LEN));",
          "",
          "[Added Lines]",
          "2708:     proto_tree_add_string(udvm_tree,hf_id, bytecode_tvb, 0, 0, bytes_to_str(wmem_packet_scope(), sha1_digest_buf, STATE_MIN_ACCESS_LEN));",
          "",
          "---------------"
        ],
        "epan/sigcomp_state_hdlr.c||epan/sigcomp_state_hdlr.c": [
          "File: epan/sigcomp_state_hdlr.c -> epan/sigcomp_state_hdlr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "628:  sip_sdp_buff = (guint8 *)g_malloc(SIP_SDP_STATE_LENGTH + 8);",
          "",
          "[Removed Lines]",
          "630:  partial_state_str = bytes_to_ep_str(sip_sdp_state_identifier, 6);",
          "",
          "[Added Lines]",
          "630:  partial_state_str = bytes_to_str(NULL, sip_sdp_state_identifier, 6);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "638:  memcpy(sip_sdp_buff+8, sip_sdp_static_dictionaty_for_sigcomp, SIP_SDP_STATE_LENGTH);",
          "640:  g_hash_table_insert(state_buffer_table, g_strdup(partial_state_str), sip_sdp_buff);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "641:  wmem_free(NULL, partial_state_str);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "646:  presence_buff = (guint8 *)g_malloc(PRESENCE_STATE_LENGTH + 8);",
          "650:  memset(presence_buff, 0, 8);",
          "651:  presence_buff[0] = PRESENCE_STATE_LENGTH >> 8;",
          "",
          "[Removed Lines]",
          "648:  partial_state_str = bytes_to_ep_str(presence_state_identifier, 6);",
          "",
          "[Added Lines]",
          "649:  partial_state_str = bytes_to_str(NULL, presence_state_identifier, 6);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "653:  memcpy(presence_buff+8, presence_static_dictionary_for_sigcomp, PRESENCE_STATE_LENGTH);",
          "655:  g_hash_table_insert(state_buffer_table, g_strdup(partial_state_str), presence_buff);",
          "656: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "657:  wmem_free(NULL, partial_state_str);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "694:   partial_state[n] = buff[p_id_start + n];",
          "695:   n++;",
          "696:  }",
          "698:  proto_tree_add_text(tree,tvb, 0, -1,\"### Accessing state ###\");",
          "699:  proto_tree_add_string(tree,hf_id, tvb, 0, 0, partial_state_str);",
          "",
          "[Removed Lines]",
          "697:  partial_state_str = bytes_to_ep_str(partial_state, p_id_length);",
          "",
          "[Added Lines]",
          "699:  partial_state_str = bytes_to_str(wmem_packet_scope(), partial_state, p_id_length);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "822:   partial_state[i] = state_identifier[i];",
          "823:   i++;",
          "824:  }",
          "827:  dummy_buff = (gchar *)g_hash_table_lookup(state_buffer_table, partial_state_str);",
          "828:  if ( dummy_buff == NULL ){",
          "",
          "[Removed Lines]",
          "825:  partial_state_str = bytes_to_ep_str(partial_state, p_id_length);",
          "",
          "[Added Lines]",
          "827:  partial_state_str = bytes_to_str(NULL, partial_state, p_id_length);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "833:   g_free(state_buff);",
          "835:  }",
          "836: }",
          "838: #if 1",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "838:  wmem_free(NULL, partial_state_str);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "851:   partial_state[i] = buff[p_id_start + i];",
          "852:   i++;",
          "853:  }",
          "",
          "[Removed Lines]",
          "854:  partial_state_str = bytes_to_ep_str(partial_state, p_id_length);",
          "",
          "[Added Lines]",
          "857:  partial_state_str = bytes_to_str(NULL, partial_state, p_id_length);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "863:   g_hash_table_remove (state_buffer_table, partial_state_str);",
          "864:   g_free(dummy_buff);",
          "865:  }",
          "866: }",
          "867: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "869:  wmem_free(NULL, partial_state_str);",
          "",
          "---------------"
        ],
        "epan/to_str.c||epan/to_str.c": [
          "File: epan/to_str.c -> epan/to_str.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "199:  return buf;",
          "200: }",
          "229: char *",
          "230: bytes_to_str(wmem_allocator_t *allocator, const guint8 *bd, int bd_len)",
          "231: {",
          "",
          "[Removed Lines]",
          "202: gchar *",
          "203: bytes_to_ep_str(const guint8 *bd, int bd_len)",
          "204: {",
          "205:  gchar *cur;",
          "206:  gchar *cur_ptr;",
          "207:  int truncated = 0;",
          "209:  if (!bd)",
          "210:   REPORT_DISSECTOR_BUG(\"Null pointer passed to bytes_to_ep_str()\");",
          "212:  cur=(gchar *)ep_alloc(MAX_BYTE_STR_LEN+3+1);",
          "213:  if (bd_len <= 0) { cur[0] = '\\0'; return cur; }",
          "216:   truncated = 1;",
          "217:   bd_len = MAX_BYTE_STR_LEN/2;",
          "218:  }",
          "222:  if (truncated)",
          "226:  return cur;",
          "227: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "epan/to_str.h||epan/to_str.h": [
          "File: epan/to_str.h -> epan/to_str.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "132: WS_DLL_PUBLIC char *bytes_to_str(wmem_allocator_t *allocator, const guint8 *bd, int bd_len);",
          "",
          "[Removed Lines]",
          "127: WS_DLL_PUBLIC gchar *bytes_to_ep_str(const guint8 *bd, int bd_len);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ui/gtk/lbm_stream_dlg.c||ui/gtk/lbm_stream_dlg.c": [
          "File: ui/gtk/lbm_stream_dlg.c -> ui/gtk/lbm_stream_dlg.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "83: static lbmc_stream_dlg_info_t * global_stream_dialog_info = NULL;",
          "86: {",
          "87:     gchar * buf = NULL;",
          "88:     char* addr_str;",
          "90:     if (endpoint->type == lbm_uim_instance_stream)",
          "91:     {",
          "93:     }",
          "94:     else",
          "95:     {",
          "96:         addr_str = (char*)address_to_str(NULL, &(endpoint->stream_info.dest.addr));",
          "98:             \"%\" G_GUINT32_FORMAT \":%s:%\" G_GUINT16_FORMAT,",
          "99:             endpoint->stream_info.dest.domain,",
          "100:             addr_str,",
          "",
          "[Removed Lines]",
          "85: static gchar * lbmc_stream_dlg_format_endpoint_ep(const lbm_uim_stream_endpoint_t * endpoint)",
          "92:         buf = bytes_to_ep_str(endpoint->stream_info.ctxinst.ctxinst, sizeof(endpoint->stream_info.ctxinst.ctxinst));",
          "97:         buf = ep_strdup_printf(",
          "",
          "[Added Lines]",
          "85: static gchar * lbmc_stream_dlg_format_endpoint(wmem_allocator_t *allocator, const lbm_uim_stream_endpoint_t * endpoint)",
          "92:         buf = bytes_to_str(allocator, endpoint->stream_info.ctxinst.ctxinst, sizeof(endpoint->stream_info.ctxinst.ctxinst));",
          "97:         buf = wmem_strdup_printf(allocator,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "571:         stream = (lbmc_stream_dlg_stream_entry_t *)g_malloc(sizeof(lbmc_stream_dlg_stream_entry_t));",
          "572:         stream->channel = tapinfo->channel;",
          "575:         stream->first_frame = (guint32)(~0);",
          "576:         stream->last_frame = 0;",
          "577:         stream->messages = 0;",
          "",
          "[Removed Lines]",
          "573:         stream->endpoint_a = wmem_strdup(wmem_file_scope(), lbmc_stream_dlg_format_endpoint_ep(&(tapinfo->endpoint_a)));",
          "574:         stream->endpoint_b = wmem_strdup(wmem_file_scope(), lbmc_stream_dlg_format_endpoint_ep(&(tapinfo->endpoint_b)));",
          "",
          "[Added Lines]",
          "573:         stream->endpoint_a = lbmc_stream_dlg_format_endpoint(wmem_file_scope(), &(tapinfo->endpoint_a));",
          "574:         stream->endpoint_b = lbmc_stream_dlg_format_endpoint(wmem_file_scope(), &(tapinfo->endpoint_b));",
          "",
          "---------------"
        ],
        "ui/gtk/lbm_uimflow_dlg.c||ui/gtk/lbm_uimflow_dlg.c": [
          "File: ui/gtk/lbm_uimflow_dlg.c -> ui/gtk/lbm_uimflow_dlg.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "94:     lbm_uim_stream_endpoint_t epa;",
          "95:     lbm_uim_stream_endpoint_t epb;",
          "96:     seq_analysis_item_t * item;",
          "99:     gboolean swap_endpoints = FALSE;",
          "100:     int rc;",
          "",
          "[Removed Lines]",
          "97:     gchar * ctxinst1 = NULL;",
          "98:     gchar * ctxinst2 = NULL;",
          "",
          "[Added Lines]",
          "97:     gchar * ctxinst1;",
          "98:     gchar * ctxinst2;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "179:     }",
          "180:     if (epa.type == lbm_uim_instance_stream)",
          "181:     {",
          "184:         item->comment = g_strdup_printf(\"%s <-> %s [%\" G_GUINT64_FORMAT \"]\",",
          "185:             ctxinst1,",
          "186:             ctxinst2,",
          "",
          "[Removed Lines]",
          "182:         ctxinst1 = bytes_to_ep_str(epa.stream_info.ctxinst.ctxinst, sizeof(epa.stream_info.ctxinst.ctxinst));",
          "183:         ctxinst2 = bytes_to_ep_str(epb.stream_info.ctxinst.ctxinst, sizeof(epb.stream_info.ctxinst.ctxinst));",
          "",
          "[Added Lines]",
          "182:         ctxinst1 = bytes_to_str(pinfo->pool, epa.stream_info.ctxinst.ctxinst, sizeof(epa.stream_info.ctxinst.ctxinst));",
          "183:         ctxinst2 = bytes_to_str(pinfo->pool, epb.stream_info.ctxinst.ctxinst, sizeof(epb.stream_info.ctxinst.ctxinst));",
          "",
          "---------------"
        ],
        "ui/gtk/mcast_stream.c||ui/gtk/mcast_stream.c": [
          "File: ui/gtk/mcast_stream.c -> ui/gtk/mcast_stream.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "177:     if ((pinfo->dl_dst.type != AT_ETHER) ||",
          "180:         return 0;",
          "",
          "[Removed Lines]",
          "178:         ((g_ascii_strncasecmp(\"01005E\", bytes_to_ep_str((const guint8 *)pinfo->dl_dst.data, pinfo->dl_dst.len), 6) != 0) &&",
          "179:          (g_ascii_strncasecmp(\"3333\", bytes_to_ep_str((const guint8 *)pinfo->dl_dst.data, pinfo->dl_dst.len), 4) != 0)) )",
          "",
          "[Added Lines]",
          "178:         ((g_ascii_strncasecmp(\"01005E\", bytes_to_str(pinfo->pool, (const guint8 *)pinfo->dl_dst.data, pinfo->dl_dst.len), 6) != 0) &&",
          "179:          (g_ascii_strncasecmp(\"3333\", bytes_to_str(pinfo->pool, (const guint8 *)pinfo->dl_dst.data, pinfo->dl_dst.len), 4) != 0)) )",
          "",
          "---------------"
        ],
        "ui/qt/lbm_stream_dialog.cpp||ui/qt/lbm_stream_dialog.cpp": [
          "File: ui/qt/lbm_stream_dialog.cpp -> ui/qt/lbm_stream_dialog.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "193: {",
          "194:     if (endpoint->type == lbm_uim_instance_stream)",
          "195:     {",
          "197:     }",
          "198:     else",
          "199:     {",
          "",
          "[Removed Lines]",
          "196:         return QString(bytes_to_ep_str(endpoint->stream_info.ctxinst.ctxinst, sizeof(endpoint->stream_info.ctxinst.ctxinst)));",
          "",
          "[Added Lines]",
          "196:         return QString(bytes_to_str(pinfo->pool, endpoint->stream_info.ctxinst.ctxinst, sizeof(endpoint->stream_info.ctxinst.ctxinst)));",
          "",
          "---------------"
        ],
        "ui/qt/lbm_uimflow_dialog.cpp||ui/qt/lbm_uimflow_dialog.cpp": [
          "File: ui/qt/lbm_uimflow_dialog.cpp -> ui/qt/lbm_uimflow_dialog.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "133:     }",
          "134:     if (epa.type == lbm_uim_instance_stream)",
          "135:     {",
          "138:         item->comment = g_strdup_printf(\"%s <-> %s [%\" G_GUINT64_FORMAT \"]\",",
          "139:             ctxinst1,",
          "140:             ctxinst2,",
          "",
          "[Removed Lines]",
          "136:         ctxinst1 = bytes_to_ep_str(epa.stream_info.ctxinst.ctxinst, sizeof(epa.stream_info.ctxinst.ctxinst));",
          "137:         ctxinst2 = bytes_to_ep_str(epb.stream_info.ctxinst.ctxinst, sizeof(epb.stream_info.ctxinst.ctxinst));",
          "",
          "[Added Lines]",
          "136:         ctxinst1 = bytes_to_str(pinfo->pool, epa.stream_info.ctxinst.ctxinst, sizeof(epa.stream_info.ctxinst.ctxinst));",
          "137:         ctxinst2 = bytes_to_str(pinfo->pool, epb.stream_info.ctxinst.ctxinst, sizeof(epb.stream_info.ctxinst.ctxinst));",
          "",
          "---------------"
        ],
        "ui/qt/uat_dialog.cpp||ui/qt/uat_dialog.cpp": [
          "File: ui/qt/uat_dialog.cpp -> ui/qt/uat_dialog.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "173:         string_rep = str;",
          "174:         break;",
          "175:     case PT_TXTMOD_HEXBYTES: {",
          "177:         break;",
          "178:     }",
          "179:     default:",
          "",
          "[Removed Lines]",
          "176:         string_rep = bytes_to_ep_str((const guint8 *) str, length);",
          "",
          "[Added Lines]",
          "176:         {",
          "177:             char* temp_str = bytes_to_str(NULL, (const guint8 *) str, length);",
          "178:             QString qstr(temp_str);",
          "179:             string_rep = qstr;",
          "180:             wmem_free(NULL, temp_str);",
          "181:         }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "63faad686b49e02b86cd1961dd3bc8283f120da8",
      "candidate_info": {
        "commit_hash": "63faad686b49e02b86cd1961dd3bc8283f120da8",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/63faad686b49e02b86cd1961dd3bc8283f120da8",
        "files": [
          "epan/dissectors/packet-ncp2222.inc"
        ],
        "message": "NCP: add a missing cast following g6ca40c5\n\nChange-Id: I0b93c4faab52d830b8160d89b9bb8026ab2a216e\nReviewed-on: https://code.wireshark.org/review/4657\nReviewed-by: Pascal Quantin <pascal.quantin@gmail.com>",
        "before_after_code_files": [
          "epan/dissectors/packet-ncp2222.inc||epan/dissectors/packet-ncp2222.inc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-ncp2222.inc||epan/dissectors/packet-ncp2222.inc"
          ],
          "candidate": [
            "epan/dissectors/packet-ncp2222.inc||epan/dissectors/packet-ncp2222.inc"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-ncp2222.inc||epan/dissectors/packet-ncp2222.inc": [
          "File: epan/dissectors/packet-ncp2222.inc -> epan/dissectors/packet-ncp2222.inc",
          "--- Hunk 1 ---",
          "[Context before]",
          "2755:             case 18:",
          "2756:             case 19:",
          "2759:                 if (repeat_lookup > 0) {",
          "2760:                     if (strlen(temp_buffer) + strlen(buffer) < 250) {",
          "2761:                         g_strlcat(temp_buffer, buffer, 256);",
          "",
          "[Removed Lines]",
          "2758:                 uni_to_string(get_finfo_value_string(PTREE_FINFO(tree_pointer)), MIN(get_finfo_length(PTREE_FINFO(tree_pointer)), buffer_size), buffer);",
          "",
          "[Added Lines]",
          "2758:                 uni_to_string(get_finfo_value_string(PTREE_FINFO(tree_pointer)), MIN(get_finfo_length(PTREE_FINFO(tree_pointer)), (gulong)buffer_size), buffer);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2758114e0af437b51727f12a497e30347bb2cf9a",
      "candidate_info": {
        "commit_hash": "2758114e0af437b51727f12a497e30347bb2cf9a",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/2758114e0af437b51727f12a497e30347bb2cf9a",
        "files": [
          "epan/dissectors/packet-ncp-int.h",
          "epan/dissectors/packet-ncp2222.inc",
          "tools/ncp2222.py"
        ],
        "message": "Some more ncp2222 improvements\n\nIncluding:\n1. Using ENC_BIG_ENDIAN and ENC_LITTLE_ENDIAN instead of self made macros\n\n2. Creating an \"expert info hook\" so that fields can be parsed \"in real time\" and added as expert info instead of searching by field name and manually getting values.  Most of the expert info is still under if (tree)s, but this is another step closer to removing all of the \"manual labor\" done that requires \"special handling\" of all tree functionality.  Once the \"manual labor\" is removed, this dissector can behave like every other dissector and the if (tree)s can be removed with more abandon.\n\nChange-Id: If2c6a4c723e12e070e68d6df2d492d4b5ac35123\nReviewed-on: https://code.wireshark.org/review/10555\nReviewed-by: Anders Broman <a.broman58@gmail.com>",
        "before_after_code_files": [
          "epan/dissectors/packet-ncp-int.h||epan/dissectors/packet-ncp-int.h",
          "epan/dissectors/packet-ncp2222.inc||epan/dissectors/packet-ncp2222.inc",
          "tools/ncp2222.py||tools/ncp2222.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-ncp2222.inc||epan/dissectors/packet-ncp2222.inc"
          ],
          "candidate": [
            "epan/dissectors/packet-ncp2222.inc||epan/dissectors/packet-ncp2222.inc"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-ncp-int.h||epan/dissectors/packet-ncp-int.h": [
          "File: epan/dissectors/packet-ncp-int.h -> epan/dissectors/packet-ncp-int.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: #define __PACKET_NCP_INT_H__",
          "31: #include <epan/expert.h>",
          "33: typedef struct _ptvc_record ptvc_record;",
          "34: typedef struct _sub_ptvc_record sub_ptvc_record;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "32: #include <epan/ptvcursor.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "37:  int   *hf_ptr;",
          "38:  gint   length;",
          "39:  const sub_ptvc_record *sub_ptvc_rec;",
          "41:  unsigned int var_index : 2;",
          "42:  unsigned int repeat_index : 2;",
          "43:  unsigned int req_cond_index : 8;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "41:  unsigned int endianness;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "98:  gint   ncp_error_index;",
          "99: } error_equivalency;",
          "102:  guint8   func;",
          "103:  guint8   subfunc;",
          "104:  guint8   has_subfunc;",
          "",
          "[Removed Lines]",
          "101: typedef struct {",
          "",
          "[Added Lines]",
          "102: struct _ncp_record;",
          "103: typedef void (ncp_expert_handler)(ptvcursor_t *ptvc, packet_info *pinfo, const struct _ncp_record *ncp_rec, gboolean request);",
          "105: typedef struct _ncp_record {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "110:  const int  *req_cond_indexes;",
          "111:  unsigned int  req_cond_size_type;",
          "112:  const info_string_t *req_info_str;",
          "113: } ncp_record;",
          "115: typedef struct {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "117:  ncp_expert_handler  *expert_handler_func;",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-ncp2222.inc||epan/dissectors/packet-ncp2222.inc": [
          "File: epan/dissectors/packet-ncp2222.inc -> epan/dissectors/packet-ncp2222.inc",
          "--- Hunk 1 ---",
          "[Context before]",
          "1846: };",
          "1848: static void",
          "1850:                     gboolean *req_cond_results, gboolean really_decode,",
          "",
          "[Removed Lines]",
          "1849: process_ptvc_record(ptvcursor_t *ptvc, const ptvc_record *rec,",
          "1851:                     const ncp_record *ncp_rec);",
          "",
          "[Added Lines]",
          "1849: process_ptvc_record(ptvcursor_t *ptvc, packet_info *pinfo, const ptvc_record *rec,",
          "1851:                     const ncp_record *ncp_rec, gboolean request);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2151: {",
          "2152:     return (char *)fvalue_get(&finfo->value);",
          "2153: }",
          "2162: static const char *",
          "2163: get_item_name(proto_item *item)",
          "",
          "[Removed Lines]",
          "2154: #if 0",
          "2155: static char *",
          "2156: get_item_string(proto_item *item)",
          "2157: {",
          "2158:     return get_finfo_value_string(PITEM_FINFO(item));",
          "2159: }",
          "2160: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2299:     return",
          "2300:         ptvcursor_add(ptvc, *rec->hf_ptr,",
          "2301:                       rec->length,",
          "2303: }",
          "2305: static proto_item*",
          "",
          "[Removed Lines]",
          "2302:                       rec->endianness ? ENC_LITTLE_ENDIAN : ENC_BIG_ENDIAN);",
          "",
          "[Added Lines]",
          "2295:                       rec->endianness);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2311:     item = ptvcursor_add(ptvc, *rec->hf_ptr,",
          "2312:                          rec->length,",
          "2315:     if (item) {",
          "2316:         uint_to_nwdate(get_item_value(item), &nw_date);",
          "",
          "[Removed Lines]",
          "2313:                          rec->endianness ? ENC_LITTLE_ENDIAN : ENC_BIG_ENDIAN);",
          "",
          "[Added Lines]",
          "2306:                          rec->endianness);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2331:     item = ptvcursor_add(ptvc, *rec->hf_ptr,",
          "2332:                          rec->length,",
          "2335:     if (item) {",
          "2336:         uint_to_nwtime(get_item_value(item), &nw_time);",
          "",
          "[Removed Lines]",
          "2333:                          rec->endianness ? ENC_LITTLE_ENDIAN : ENC_BIG_ENDIAN);",
          "",
          "[Added Lines]",
          "2326:                          rec->endianness);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2358:     item = ptvcursor_add(ptvc, *rec->hf_ptr,",
          "2359:                          rec->length,",
          "2362:     if (item) {",
          "2363:         proto_item_set_text(item, \"%s\", get_item_name(item));",
          "",
          "[Removed Lines]",
          "2360:                          rec->endianness ? ENC_LITTLE_ENDIAN : ENC_BIG_ENDIAN);",
          "",
          "[Added Lines]",
          "2353:                          rec->endianness);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2389:         item = ptvcursor_add(ptvc, *rec->hf_ptr, rec->length,",
          "2392:         ett = *rec->sub_ptvc_rec->ett;",
          "",
          "[Removed Lines]",
          "2390:                              rec->endianness ? ENC_LITTLE_ENDIAN : ENC_BIG_ENDIAN);",
          "",
          "[Added Lines]",
          "2383:                              rec->endianness);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2404:             DISSECTOR_ASSERT(!sub_rec->sub_ptvc_rec);",
          "2405:             ptvcursor_add_no_advance(sub_ptvc, *sub_rec->hf_ptr,",
          "2406:                                      sub_rec->length,",
          "2408:             sub_rec++;",
          "2409:         }",
          "",
          "[Removed Lines]",
          "2407:                                      sub_rec->endianness ? ENC_LITTLE_ENDIAN : ENC_BIG_ENDIAN);",
          "",
          "[Added Lines]",
          "2400:                                      sub_rec->endianness);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2422: static void",
          "2424:                                gboolean *req_cond_results, gboolean really_decode,",
          "2426: {",
          "2427:     const ptvc_record   *sub_rec;",
          "2428:     gint                ett;",
          "",
          "[Removed Lines]",
          "2423: process_struct_sub_ptvc_record(ptvcursor_t *ptvc, const ptvc_record *rec,",
          "2425:                                const ncp_record *ncp_rec)",
          "",
          "[Added Lines]",
          "2416: process_struct_sub_ptvc_record(ptvcursor_t *ptvc, packet_info *pinfo, const ptvc_record *rec,",
          "2418:                                const ncp_record *ncp_rec, gboolean request)",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2445:     sub_rec = rec->sub_ptvc_rec->ptvc_rec;",
          "2449:     if (rec->sub_ptvc_rec->descr) {",
          "",
          "[Removed Lines]",
          "2446:     process_ptvc_record(ptvc, sub_rec, req_cond_results, really_decode, ncp_rec);",
          "",
          "[Added Lines]",
          "2439:     process_ptvc_record(ptvc, pinfo, sub_rec, req_cond_results, really_decode, ncp_rec, request);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2460: static void",
          "2462:                      gboolean *req_cond_results, gboolean really_decode,",
          "2464: {",
          "2465:     proto_item  *item;",
          "2466:     guint       i, repeat_count;",
          "",
          "[Removed Lines]",
          "2461: _process_ptvc_record(ptvcursor_t *ptvc, const ptvc_record *rec,",
          "2463:                      const ncp_record *ncp_rec)",
          "",
          "[Added Lines]",
          "2454: _process_ptvc_record(ptvcursor_t *ptvc, packet_info *pinfo, const ptvc_record *rec,",
          "2456:                      const ncp_record *ncp_rec, gboolean request)",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "2471:         if (rec->repeat_index >= NO_REPEAT) {",
          "2472:             if (rec->hf_ptr == PTVC_STRUCT) {",
          "2474:                                                req_cond_results, really_decode,",
          "2476:             }",
          "2477:             else {",
          "2478:                 process_bitfield_sub_ptvc_record(ptvc, rec,",
          "",
          "[Removed Lines]",
          "2473:                 process_struct_sub_ptvc_record(ptvc, rec,",
          "2475:                                                ncp_rec);",
          "",
          "[Added Lines]",
          "2466:                 process_struct_sub_ptvc_record(ptvc, pinfo, rec,",
          "2468:                                                ncp_rec, request);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "2483:             repeat_count = repeat_vars[rec->repeat_index];",
          "2484:             for (i = 0; i < repeat_count; i++ ) {",
          "2485:                 if (rec->hf_ptr == PTVC_STRUCT) {",
          "2487:                                                    req_cond_results, really_decode,",
          "2489:                 }",
          "2490:                 else {",
          "2491:                     process_bitfield_sub_ptvc_record(ptvc, rec,",
          "",
          "[Removed Lines]",
          "2486:                     process_struct_sub_ptvc_record(ptvc, rec,",
          "2488:                                                    ncp_rec);",
          "",
          "[Added Lines]",
          "2479:                     process_struct_sub_ptvc_record(ptvc, pinfo, rec,",
          "2481:                                                    ncp_rec, request);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "2579: static void",
          "2581:                     gboolean *req_cond_results, gboolean really_decode,",
          "2583: {",
          "2584:     gboolean decode;",
          "2586:     while(rec->hf_ptr != NULL) {",
          "2587:         decode = really_decode;",
          "",
          "[Removed Lines]",
          "2580: process_ptvc_record(ptvcursor_t *ptvc, const ptvc_record *rec,",
          "2582:                     const ncp_record *ncp_rec)",
          "",
          "[Added Lines]",
          "2573: process_ptvc_record(ptvcursor_t *ptvc, packet_info *pinfo, const ptvc_record *rec,",
          "2575:                     const ncp_record *ncp_rec, gboolean request)",
          "2578:     ptvcursor_t *expert_ptvc;",
          "2579:     proto_tree* expert_tree = ptvcursor_tree(ptvc);",
          "2580:     tvbuff_t* expert_tvb = ptvcursor_tvbuff(ptvc);",
          "2581:     gint expert_offset = ptvcursor_current_offset(ptvc);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "2595:             }",
          "2596:         }",
          "2597:         if (decode || ncp_rec->req_cond_size_type == REQ_COND_SIZE_CONSTANT) {",
          "2599:         }",
          "2600:         rec++;",
          "2601:     }",
          "2602: }",
          "",
          "[Removed Lines]",
          "2598:             _process_ptvc_record(ptvc, rec, req_cond_results, decode, ncp_rec);",
          "",
          "[Added Lines]",
          "2595:             _process_ptvc_record(ptvc, pinfo, rec, req_cond_results, decode, ncp_rec, request);",
          "2602:     if (ncp_rec->expert_handler_func)",
          "2603:     {",
          "2604:         expert_ptvc = ptvcursor_new(expert_tree, expert_tvb, expert_offset);",
          "2605:         ncp_rec->expert_handler_func(expert_ptvc, pinfo, ncp_rec, request);",
          "2606:         ptvcursor_free(expert_ptvc);",
          "2607:     }",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "2634: static const ncp_record ncp1111_request =",
          "2635: { 0x1, 0x00, NO_SUBFUNC, \"Create Connection Service\", NCP_GROUP_CONNECTION,",
          "2638: static const ncp_record ncp5555_request =",
          "2639: { 0x5, 0x00, NO_SUBFUNC, \"Destroy Connection Service\", NCP_GROUP_CONNECTION,",
          "2642: static const ncp_record ncpbbbb_request =",
          "2643: { 0xb, 0x00, NO_SUBFUNC, \"Server Broadcast Message\", NCP_GROUP_CONNECTION,",
          "2646: static const ncp_record ncplip_echo =",
          "2647: { 0x1f, 0x00, NO_SUBFUNC, \"LIP Echo Packet\", NCP_GROUP_CONNECTION,",
          "2651: static void free_proto_tree(void *tree)",
          "",
          "[Removed Lines]",
          "2636:   NULL, NULL, ncp_0x2_errors, NULL, NO_REQ_COND_SIZE, NULL };",
          "2640:   NULL, NULL, ncp_0x2_errors, NULL, NO_REQ_COND_SIZE, NULL };",
          "2644:   NULL, NULL, ncp_0x2_errors, NULL, NO_REQ_COND_SIZE, NULL };",
          "2648:   NULL, NULL, ncp_0x2_errors, NULL, NO_REQ_COND_SIZE, NULL };",
          "",
          "[Added Lines]",
          "2642:   NULL, NULL, ncp_0x2_errors, NULL, NO_REQ_COND_SIZE, NULL, NULL };",
          "2646:   NULL, NULL, ncp_0x2_errors, NULL, NO_REQ_COND_SIZE, NULL, NULL };",
          "2650:   NULL, NULL, ncp_0x2_errors, NULL, NO_REQ_COND_SIZE, NULL, NULL };",
          "2654:   NULL, NULL, ncp_0x2_errors, NULL, NO_REQ_COND_SIZE, NULL, NULL };",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "2957:     }",
          "2958: }",
          "2967: {",
          "3042:     }",
          "3045:     }",
          "3047: }",
          "3059: {",
          "3092:                 }",
          "3094:                 {",
          "3098:                 }",
          "3105:             }",
          "3143:             if ((ncp_rec->func == 89 || ncp_rec->func == 87) && (ncp_rec->subfunc == 32 || ncp_rec->subfunc == 1)) {",
          "3153:                 if (ncp_rec->subfunc == 1) {",
          "3154:                     expert_add_info_format(pinfo, NULL, &ei_ncp_file_handle, \"%s - File handle %s\",",
          "3157:                 }",
          "3158:                 else",
          "3159:                 {",
          "3162:                     expert_add_info_format(pinfo, NULL, &ei_ncp_file_handle, \"%s - File handle %s, %s\",",
          "3166:                 }",
          "3167:             }",
          "3209:         }",
          "3210:     }",
          "3211: }",
          "3214: static void",
          "3215: print_nds_values(proto_tree *vtree, packet_info* pinfo, tvbuff_t *tvb, guint32 syntax_type, nds_val *vvalues)",
          "",
          "[Removed Lines]",
          "2963: static void",
          "2964: build_expert_data(proto_tree *ncp_tree, const char *hf_name, char *buffer,",
          "2965:                   size_t buffer_size, int repeat_lookup,",
          "2966:                   gboolean search_structs)",
          "2968:     proto_tree     *tree_pointer;",
          "2969:     proto_tree     *tree_loc;",
          "2970:     proto_tree     *struct_tree_pointer = NULL;",
          "2971:     char            temp_buffer[256]=\"\\0\";",
          "2972:     gboolean        in_struct=FALSE;",
          "2974:     buffer[0] = '\\0';",
          "2975:     tree_loc = ncp_tree->first_child;",
          "2976:     for (tree_pointer=tree_loc; tree_pointer!=NULL; tree_pointer=tree_pointer->next)",
          "2977:     {",
          "2979:         if (tree_pointer->first_child && !in_struct && search_structs) {",
          "2980:             struct_tree_pointer = tree_pointer;",
          "2981:             tree_pointer = tree_pointer->first_child;",
          "2982:             in_struct=TRUE;",
          "2983:         }",
          "2984:         if (strcmp(PTREE_FINFO(tree_pointer)->hfinfo->abbrev, hf_name)==0)",
          "2985:         {",
          "2986:             switch (PTREE_FINFO(tree_pointer)->hfinfo->type)",
          "2987:             {",
          "2989:                 g_snprintf(buffer, (gulong) buffer_size, \"%02x\", get_finfo_value_integer(PTREE_FINFO(tree_pointer)));",
          "2990:                 break;",
          "2992:                 g_snprintf(buffer, (gulong) buffer_size, \"%u\", get_finfo_value_integer(PTREE_FINFO(tree_pointer)));",
          "2993:                 break;",
          "2996:                 g_snprintf(buffer, (gulong) buffer_size, \"%08x\", get_finfo_value_integer(PTREE_FINFO(tree_pointer)));",
          "2997:                 break;",
          "2998:             case 17:",
          "2999:             case 18:",
          "3000:             case 19:",
          "3002:                 uni_to_string(get_finfo_value_string(PTREE_FINFO(tree_pointer)), MIN(get_finfo_length(PTREE_FINFO(tree_pointer)), (guint) buffer_size), buffer);",
          "3003:                 if (repeat_lookup > 0) {",
          "3004:                     if (strlen(temp_buffer) + strlen(buffer) < 250) {",
          "3005:                         g_strlcat(temp_buffer, buffer, 256);",
          "3006:                         repeat_lookup--;",
          "3007:                         if (repeat_lookup == 0) {",
          "3008:                             g_strlcpy(buffer, temp_buffer, buffer_size);",
          "3009:                             break;",
          "3010:                         }",
          "3011:                         else",
          "3012:                         {",
          "3013:                             g_strlcat(temp_buffer, \"/\", 256);",
          "3014:                             break;",
          "3015:                         }",
          "3016:                     }",
          "3017:                     else",
          "3018:                     {",
          "3019:                         return;",
          "3020:                     }",
          "3021:                 }",
          "3022:                 else",
          "3023:                 {",
          "3024:                     break;",
          "3025:                 }",
          "3026:             case 21:",
          "3028:                 g_snprintf(buffer, (gulong) buffer_size, \"%s\", bytes_to_str(wmem_packet_scope(), get_finfo_value_string(PTREE_FINFO(tree_pointer)), get_finfo_length(PTREE_FINFO(tree_pointer))));",
          "3029:                 break;",
          "3031:                 g_snprintf(buffer, (gulong) buffer_size, \"Unsupported Expert Type\");",
          "3032:                 return;",
          "3033:             }",
          "3034:             if (repeat_lookup ==0) {",
          "3035:                 break;",
          "3036:             }",
          "3037:         }",
          "3038:         if (tree_pointer->next==NULL && in_struct && search_structs) {",
          "3039:                 tree_pointer = struct_tree_pointer;",
          "3040:                 in_struct=FALSE;",
          "3041:         }",
          "3043:     if (strlen(buffer)==0) {",
          "3044:         g_snprintf(buffer, (gulong) buffer_size, \"No Value\");",
          "3046:     return;",
          "3057: static void",
          "3058: trap_for_expert_event(proto_tree *ncp_tree, packet_info *pinfo, const ncp_record *ncp_rec, int request_reply)",
          "3060:     if (ncp_rec == NULL)",
          "3061:         return;",
          "3063:     if (request_reply==0) {",
          "3064:         if (ncp_echo_file) {",
          "3066:             if (ncp_rec->func == 66) {",
          "3067:                 char p_filehandle[15]=\"\\0\";",
          "3069:                 build_expert_data(ncp_tree, \"ncp.file_handle\", p_filehandle,",
          "3070:                                   sizeof p_filehandle, 0, FALSE);",
          "3072:                 expert_add_info_format(pinfo, NULL, &ei_ncp_file_handle, \"Close file handle %s\", p_filehandle);",
          "3073:             }",
          "3075:             if ((ncp_rec->func == 89 || ncp_rec->func == 87) && (ncp_rec->subfunc == 1 || ncp_rec->subfunc == 30 || ncp_rec->subfunc == 32 || ncp_rec->subfunc == 33)) {",
          "3076:                 char oaction[3]=\"\\0\";",
          "3077:                 char p_filename[256]=\"\\0\";",
          "3078:                 char p_rights[3]=\"\\0\";",
          "3079:                 char p_path_count[3]=\"\\0\";",
          "3081:                 build_expert_data(ncp_tree, \"ncp.open_create_mode\", oaction,",
          "3082:                                   sizeof oaction, 0, FALSE);",
          "3083:                 build_expert_data(ncp_tree, \"ncp.desired_access_rights\",",
          "3084:                                   p_rights, sizeof p_rights, 0, FALSE);",
          "3085:                 build_expert_data(ncp_tree, \"ncp.path_count\", p_path_count,",
          "3086:                                   sizeof p_path_count, 0, FALSE);",
          "3088:                 if (ncp_rec->func == 87) {",
          "3089:                     build_expert_data(ncp_tree, \"ncp.path\", p_filename,",
          "3090:                                       sizeof p_filename,  atoi(p_path_count),",
          "3091:                                       FALSE);",
          "3093:                 else",
          "3095:                     build_expert_data(ncp_tree, \"ncp.path16\", p_filename,",
          "3096:                                       sizeof p_filename,  atoi(p_path_count),",
          "3097:                                       FALSE);",
          "3100:                 expert_add_info_format(pinfo, NULL, &ei_ncp_file_rights,",
          "3101:                                        \"Op-lock open, mode %s for filename %s with rights %s\",",
          "3102:                                        val_to_str((guint32)(strtoul(oaction, NULL, 16) & 0xeb), open_create_mode_vals, \"Unknown: %d\"),",
          "3103:                                        p_filename,",
          "3104:                                        val_to_str((atoi(p_rights) & 0x5f), ncp_rights_vals, \"Unknown: %d\"));",
          "3107:             if (ncp_rec->func == 87 && ncp_rec->subfunc == 34) {",
          "3108:                 char cc_function[3]=\"\\0\";",
          "3109:                 char p_filehandle[15]=\"\\0\";",
          "3111:                 build_expert_data(ncp_tree, \"ncp.cc_file_handle\",",
          "3112:                                   p_filehandle, sizeof p_filehandle, 0, FALSE);",
          "3113:                 build_expert_data(ncp_tree, \"ncp.cc_function\",",
          "3114:                                   cc_function, sizeof cc_function, 0, FALSE);",
          "3116:                 expert_add_info_format(pinfo, NULL, &ei_ncp_op_lock_handle, \"Op-lock on handle %s - %s\", p_filehandle,",
          "3117:                                        val_to_str(atoi(cc_function), ncp_cc_function_vals, \"Unknown: %d\"));",
          "3118:             }",
          "3120:             if (ncp_rec->func == 87 && ncp_rec->subfunc == 44) {",
          "3121:                 char p_rights[20]=\"\\0\";",
          "3122:                 char n_rights[20]=\"\\0\";",
          "3123:                 char p_filehandle[15]=\"\\0\";",
          "3125:                 build_expert_data(ncp_tree, \"ncp.file_handle\",",
          "3126:                                   p_filehandle, sizeof p_filehandle, 0, FALSE);",
          "3127:                 build_expert_data(ncp_tree, \"ncp.access_rights_mask_word\",",
          "3128:                                   p_rights, sizeof p_rights, 0, FALSE);",
          "3129:                 build_expert_data(ncp_tree, \"ncp.new_access_rights_mask\",",
          "3130:                                   n_rights, sizeof n_rights, 0, FALSE);",
          "3131:                 expert_add_info_format(pinfo, NULL, &ei_ncp_file_rights_change, \"Change handle %s rights from:(%s) to:(%s)\",",
          "3132:                                        p_filehandle,",
          "3133:                                        val_to_str((atoi(p_rights) & 0x1ff), access_rights_vals, \"Unknown: %d\"),",
          "3134:                                        val_to_str((atoi(n_rights) & 0x1ff), access_rights_vals, \"Unknown: %d\"));",
          "3135:             }",
          "3136:         }",
          "3137:     }",
          "3138:     else",
          "3139:     {",
          "3144:                 char oaction[3]=\"\\0\";",
          "3145:                 char oplockflg[3]=\"\\0\";",
          "3146:                 char p_filehandle[15]=\"\\0\";",
          "3148:                 build_expert_data(ncp_tree, \"ncp.open_create_action\",",
          "3149:                                   oaction, sizeof oaction, 0, FALSE);",
          "3150:                 build_expert_data(ncp_tree, \"ncp.file_handle\",",
          "3151:                                   p_filehandle, sizeof p_filehandle, 0, FALSE);",
          "3155:                                            val_to_str((atoi(oaction) & 0x8f), open_create_action_vals, \"Unknown: %d\"),",
          "3156:                                            p_filehandle);",
          "3160:                     build_expert_data(ncp_tree, \"ncp.o_c_ret_flags\",",
          "3161:                                       oplockflg, sizeof oplockflg, 0, FALSE);",
          "3163:                                            val_to_str((atoi(oaction) & 0x8f), open_create_action_vals, \"Unknown: %d\"),",
          "3164:                                            p_filehandle,",
          "3165:                                            val_to_str(atoi(oplockflg), ncp_o_c_ret_flags_vals, \"Unknown: %d\"));",
          "3169:             if (ncp_rec->func == 87 && ncp_rec->subfunc == 44) {",
          "3170:                 char p_rights[20]=\"\\0\";",
          "3171:                 char p_filehandle[15]=\"\\0\";",
          "3173:                 build_expert_data(ncp_tree, \"ncp.file_handle\",",
          "3174:                                   p_filehandle, sizeof p_filehandle, 0, FALSE);",
          "3175:                 build_expert_data(ncp_tree, \"ncp.effective_rights\",",
          "3176:                                   p_rights, sizeof p_rights, 0, FALSE);",
          "3177:                 expert_add_info_format(pinfo, NULL, &ei_ncp_effective_rights, \"Handle %s effective rights:(%s)\", p_filehandle,",
          "3178:                                        val_to_str((atoi(p_rights) & 0x1ff), access_rights_vals, \"Unknown: %d\"));",
          "3179:             }",
          "3180:         }",
          "3182:         if (ncp_rec->func == 23 && ncp_rec->subfunc == 17 && ncp_echo_server) {",
          "3183:             char fsname[50]=\"\\0\";",
          "3184:             char p_maj_ver[3]=\"\\0\";",
          "3185:             char p_min_ver[3]=\"\\0\";",
          "3186:             char p_rev[3]=\"\\0\";",
          "3187:             char p_lang[3]=\"\\0\";",
          "3188:             char p_serv_type[3]=\"\\0\";",
          "3189:             char p_kernel[3]=\"\\0\";",
          "3192:             build_expert_data(ncp_tree, \"ncp.server_name\",",
          "3193:                               fsname, sizeof fsname, 0, FALSE);",
          "3194:             build_expert_data(ncp_tree, \"ncp.product_major_version\",",
          "3195:                               p_maj_ver, sizeof p_maj_ver, 0, FALSE);",
          "3196:             build_expert_data(ncp_tree, \"ncp.product_minor_version\",",
          "3197:                               p_min_ver, sizeof p_min_ver, 0, FALSE);",
          "3198:             build_expert_data(ncp_tree, \"ncp.product_revision_version\",",
          "3199:                               p_rev, sizeof p_rev, 0, FALSE);",
          "3200:             build_expert_data(ncp_tree, \"ncp.os_language_id\",",
          "3201:                               p_lang, sizeof p_lang, 0, FALSE);",
          "3202:             build_expert_data(ncp_tree, \"ncp.oes_server\",",
          "3203:                               p_serv_type, sizeof p_serv_type, 0, FALSE);",
          "3204:             build_expert_data(ncp_tree, \"ncp.oeslinux_or_netware\",",
          "3205:                               p_kernel, sizeof p_kernel, 0, FALSE);",
          "3207:             expert_add_info_format(pinfo, NULL, &ei_ncp_server, \"Server %s, version %s.%s, support pack %s, language %s, server type %s, kernel %s\", fsname,",
          "3208:                                    p_maj_ver, p_min_ver, p_rev, p_lang, val_to_str((atoi(p_serv_type) & 0x01), serv_type_vals, \"Unknown: %d\"), val_to_str((atoi(p_kernel) & 0x01), kernel_type_vals, \"Unknown: %d\") );",
          "",
          "[Added Lines]",
          "2967: static void ncp1633_reply_expert_func(ptvcursor_t *ptvc, packet_info *pinfo, const ncp_record *ncp_rec _U_, gboolean request)",
          "2969:     if (nds_echo_eid && !request) {",
          "2970:         guint32 object_id;",
          "2971:         guint8  volume_name_len;",
          "2972:         gchar*  volume_name;",
          "2974:         object_id = tvb_get_letohl(ptvcursor_tvbuff(ptvc), ptvcursor_current_offset(ptvc)+126);",
          "2975:         ptvcursor_advance(ptvc, 134);",
          "2976:         volume_name_len = tvb_get_guint8(ptvcursor_tvbuff(ptvc), ptvcursor_current_offset(ptvc));",
          "2977:         ptvcursor_advance(ptvc, 1);",
          "2978:         volume_name = tvb_get_string_enc(wmem_packet_scope(), ptvcursor_tvbuff(ptvc),",
          "2979:                                 ptvcursor_current_offset(ptvc), volume_name_len, ENC_ASCII);",
          "2981:         expert_add_info_format(pinfo, NULL, &ei_ncp_eid,",
          "2982:                                     \"EID (%08x) = %s\", object_id, volume_name);",
          "2984: }",
          "2987: static void ncp1711_reply_expert_func(ptvcursor_t *ptvc, packet_info *pinfo, const ncp_record *ncp_rec _U_, gboolean request)",
          "2988: {",
          "2989:     if (ncp_echo_server && !request) {",
          "2990:         guint8* fsname;",
          "2991:         guint8 maj_ver, min_ver, os_lang, serv_type, kernel;",
          "2992:         guint16 prod_rev;",
          "2994:         fsname = tvb_get_string_enc(wmem_packet_scope(), ptvcursor_tvbuff(ptvc),",
          "2995:                                 ptvcursor_current_offset(ptvc), 48, ENC_ASCII);",
          "2996:         ptvcursor_advance(ptvc, 48);",
          "2997:         maj_ver = tvb_get_guint8(ptvcursor_tvbuff(ptvc), ptvcursor_current_offset(ptvc));",
          "2998:         ptvcursor_advance(ptvc, 1);",
          "2999:         min_ver = tvb_get_guint8(ptvcursor_tvbuff(ptvc), ptvcursor_current_offset(ptvc));",
          "3001:         prod_rev = tvb_get_ntohs(ptvcursor_tvbuff(ptvc), ptvcursor_current_offset(ptvc));",
          "3002:         ptvcursor_advance(ptvc, 2);",
          "3003:         os_lang = tvb_get_guint8(ptvcursor_tvbuff(ptvc), ptvcursor_current_offset(ptvc));",
          "3004:         ptvcursor_advance(ptvc, 2);",
          "3005:         serv_type = tvb_get_guint8(ptvcursor_tvbuff(ptvc), ptvcursor_current_offset(ptvc));",
          "3006:         ptvcursor_advance(ptvc, 1);",
          "3007:         kernel = tvb_get_guint8(ptvcursor_tvbuff(ptvc), ptvcursor_current_offset(ptvc));",
          "3008:         ptvcursor_advance(ptvc, 1);",
          "3010:         expert_add_info_format(pinfo, NULL, &ei_ncp_server, \"Server %s, version %d.%d, support pack %d, language %d, server type %s, kernel %s\", fsname,",
          "3011:                                 maj_ver, min_ver, prod_rev, os_lang, val_to_str(serv_type & 0x01, serv_type_vals, \"Unknown: %d\"),",
          "3012:                                 val_to_str(kernel & 0x01, kernel_type_vals, \"Unknown: %d\") );",
          "3017: static void ncp42_request_expert_func(ptvcursor_t *ptvc, packet_info *pinfo, const ncp_record *ncp_rec _U_, gboolean request)",
          "3019:     if (ncp_echo_file && request) {",
          "3020:         gchar* filehandle = tvb_bytes_to_str(wmem_packet_scope(), ptvcursor_tvbuff(ptvc),",
          "3021:                                                 ptvcursor_current_offset(ptvc)+1, 6);",
          "3023:         expert_add_info_format(pinfo, NULL, &ei_ncp_file_handle, \"Close file handle %s\", filehandle);",
          "3024:     }",
          "3025: }",
          "3028: static void file_rights_expert_func(ptvcursor_t *ptvc, packet_info *pinfo, const ncp_record *ncp_rec, gboolean request)",
          "3029: {",
          "3030:     if (ncp_echo_file) {",
          "3031:         if (request) {",
          "3032:             guint8 oaction = 0, path_count = 0;",
          "3033:             guint16 rights = 0;",
          "3034:             gchar* filename = (gchar*)\"\";",
          "3036:             if (ncp_rec->func == 87) {",
          "3037:                 switch(ncp_rec->subfunc)",
          "3038:                 {",
          "3039:                 case 1:",
          "3040:                 case 32:",
          "3041:                     oaction = tvb_get_guint8(ptvcursor_tvbuff(ptvc), ptvcursor_current_offset(ptvc)+1);",
          "3042:                     ptvcursor_advance(ptvc, 12);",
          "3043:                     rights = tvb_get_ntohs(ptvcursor_tvbuff(ptvc), ptvcursor_current_offset(ptvc));",
          "3044:                     ptvcursor_advance(ptvc, 8);",
          "3045:                     path_count = tvb_get_guint8(ptvcursor_tvbuff(ptvc), ptvcursor_current_offset(ptvc));",
          "3046:                     ptvcursor_advance(ptvc, 1);",
          "3047:                     filename = tvb_get_string_enc(wmem_packet_scope(), ptvcursor_tvbuff(ptvc),",
          "3048:                                 ptvcursor_current_offset(ptvc), path_count, ENC_ASCII);",
          "3049:                     break;",
          "3050:                 case 33:",
          "3051:                 case 30:",
          "3052:                     oaction = tvb_get_guint8(ptvcursor_tvbuff(ptvc), ptvcursor_current_offset(ptvc)+2);",
          "3053:                     ptvcursor_advance(ptvc, 16);",
          "3054:                     rights = tvb_get_ntohs(ptvcursor_tvbuff(ptvc), ptvcursor_current_offset(ptvc));",
          "3055:                     ptvcursor_advance(ptvc, 8);",
          "3056:                     path_count = tvb_get_guint8(ptvcursor_tvbuff(ptvc), ptvcursor_current_offset(ptvc));",
          "3057:                     ptvcursor_advance(ptvc, 1);",
          "3058:                     filename = tvb_get_string_enc(wmem_packet_scope(), ptvcursor_tvbuff(ptvc),",
          "3059:                                     ptvcursor_current_offset(ptvc), path_count, ENC_ASCII);",
          "3060:                     break;",
          "3062:             } else if (ncp_rec->func == 89) {",
          "3063:                 switch(ncp_rec->subfunc)",
          "3065:                 case 1:",
          "3066:                 case 32:",
          "3067:                     oaction = tvb_get_guint8(ptvcursor_tvbuff(ptvc), ptvcursor_current_offset(ptvc)+1);",
          "3068:                     ptvcursor_advance(ptvc, 12);",
          "3069:                     rights = tvb_get_ntohs(ptvcursor_tvbuff(ptvc), ptvcursor_current_offset(ptvc));",
          "3070:                     ptvcursor_advance(ptvc, 14);",
          "3071:                     path_count = tvb_get_guint8(ptvcursor_tvbuff(ptvc), ptvcursor_current_offset(ptvc));",
          "3072:                     ptvcursor_advance(ptvc, 1);",
          "3073:                     filename = tvb_get_string_enc(wmem_packet_scope(), ptvcursor_tvbuff(ptvc),",
          "3074:                                     ptvcursor_current_offset(ptvc), path_count, ENC_ASCII);",
          "3075:                     break;",
          "3076:                 case 33:",
          "3077:                 case 30:",
          "3078:                     oaction = tvb_get_guint8(ptvcursor_tvbuff(ptvc), ptvcursor_current_offset(ptvc)+2);",
          "3079:                     ptvcursor_advance(ptvc, 16);",
          "3080:                     rights = tvb_get_ntohs(ptvcursor_tvbuff(ptvc), ptvcursor_current_offset(ptvc));",
          "3081:                     ptvcursor_advance(ptvc, 14);",
          "3082:                     path_count = tvb_get_guint8(ptvcursor_tvbuff(ptvc), ptvcursor_current_offset(ptvc));",
          "3083:                     ptvcursor_advance(ptvc, 1);",
          "3084:                     filename = tvb_get_string_enc(wmem_packet_scope(), ptvcursor_tvbuff(ptvc),",
          "3085:                                     ptvcursor_current_offset(ptvc), path_count, ENC_ASCII);",
          "3086:                     break;",
          "3090:             expert_add_info_format(pinfo, NULL, &ei_ncp_file_rights,",
          "3091:                                 \"Op-lock open, mode %s for filename %s with rights %s\",",
          "3092:                                 val_to_str(oaction & 0xeb, open_create_mode_vals, \"Unknown: %d\"),",
          "3093:                                 filename,",
          "3094:                                 val_to_str(rights & 0x5f, ncp_rights_vals, \"Unknown: %d\"));",
          "3095:         } else {",
          "3097:                 guint8 oaction, oplockflg;",
          "3098:                 gchar* filehandle;",
          "3100:                 filehandle = tvb_bytes_to_str(wmem_packet_scope(), ptvcursor_tvbuff(ptvc),",
          "3101:                                                 ptvcursor_current_offset(ptvc), 4);",
          "3102:                 ptvcursor_advance(ptvc, 4);",
          "3103:                 oaction = tvb_get_guint8(ptvcursor_tvbuff(ptvc), ptvcursor_current_offset(ptvc));",
          "3107:                                            val_to_str(oaction & 0x8f, open_create_action_vals, \"Unknown: %d\"),",
          "3108:                                            filehandle);",
          "3112:                     ptvcursor_advance(ptvc, 1);",
          "3113:                     oplockflg = tvb_get_guint8(ptvcursor_tvbuff(ptvc), ptvcursor_current_offset(ptvc));",
          "3115:                                            val_to_str(oaction & 0x8f, open_create_action_vals, \"Unknown: %d\"),",
          "3116:                                            filehandle,",
          "3117:                                            val_to_str(oplockflg, ncp_o_c_ret_flags_vals, \"Unknown: %d\"));",
          "3125: static void ncp5722_request_expert_func(ptvcursor_t *ptvc, packet_info *pinfo, const ncp_record *ncp_rec _U_, gboolean request)",
          "3126: {",
          "3127:     if (ncp_echo_file && request) {",
          "3128:         guint32 filehandle;",
          "3129:         guint8 cc_function;",
          "3131:         filehandle = tvb_get_ntohl(ptvcursor_tvbuff(ptvc), ptvcursor_current_offset(ptvc));",
          "3132:         ptvcursor_advance(ptvc, 4);",
          "3133:         cc_function = tvb_get_guint8(ptvcursor_tvbuff(ptvc), ptvcursor_current_offset(ptvc));",
          "3135:         expert_add_info_format(pinfo, NULL, &ei_ncp_op_lock_handle, \"Op-lock on handle %08x - %s\", filehandle,",
          "3136:                                 val_to_str(cc_function, ncp_cc_function_vals, \"Unknown: %d\"));",
          "3137:     }",
          "3138: }",
          "3141: static void ncp572c_expert_func(ptvcursor_t *ptvc, packet_info *pinfo, const ncp_record *ncp_rec _U_, gboolean request)",
          "3142: {",
          "3143:     if (ncp_echo_file) {",
          "3144:         gchar* filehandle;",
          "3146:         if (request) {",
          "3147:             guint16 access_rights, new_rights;",
          "3149:             access_rights = tvb_get_ntohs(ptvcursor_tvbuff(ptvc), ptvcursor_current_offset(ptvc)+8);",
          "3150:             ptvcursor_advance(ptvc, 10);",
          "3151:             new_rights = tvb_get_ntohs(ptvcursor_tvbuff(ptvc), ptvcursor_current_offset(ptvc));",
          "3152:             ptvcursor_advance(ptvc, 2);",
          "3153:             filehandle = tvb_bytes_to_str(wmem_packet_scope(), ptvcursor_tvbuff(ptvc),",
          "3154:                                                     ptvcursor_current_offset(ptvc), 4);",
          "3156:             expert_add_info_format(pinfo, NULL, &ei_ncp_file_rights_change, \"Change handle %s rights from:(%s) to:(%s)\",",
          "3157:                                    filehandle,",
          "3158:                                    val_to_str(access_rights & 0x1ff, access_rights_vals, \"Unknown: %d\"),",
          "3159:                                    val_to_str(new_rights & 0x1ff, access_rights_vals, \"Unknown: %d\"));",
          "3161:         } else {",
          "3162:             guint32 rights;",
          "3164:             filehandle = tvb_bytes_to_str(wmem_packet_scope(), ptvcursor_tvbuff(ptvc),",
          "3165:                                                     ptvcursor_current_offset(ptvc), 4);",
          "3166:             ptvcursor_advance(ptvc, 4);",
          "3167:             rights = tvb_get_ntohl(ptvcursor_tvbuff(ptvc), ptvcursor_current_offset(ptvc)+8);",
          "3169:             expert_add_info_format(pinfo, NULL, &ei_ncp_effective_rights, \"Handle %s effective rights:(%s)\", filehandle,",
          "3170:                                     val_to_str(rights & 0x1ff, access_rights_vals, \"Unknown: %d\"));",
          "3171:         }",
          "3172:     }",
          "3173: }",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "6525: }",
          "6527: static void",
          "6529:                       const ncp_record *ncp_rec, ncp_req_hash_value *request_value)",
          "6530: {",
          "6531:     guint16             x;",
          "",
          "[Removed Lines]",
          "6528: dissect_ncp_8x20reply(tvbuff_t *tvb, proto_tree *volatile ncp_tree,",
          "",
          "[Added Lines]",
          "6489: dissect_ncp_8x20reply(tvbuff_t *tvb, packet_info *pinfo, proto_tree *volatile ncp_tree,",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "6568:             btree = proto_tree_add_subtree(atree, tvb, loffset, -1, ett_ncp, &bitem, \"Attributes\");",
          "6570:             ptvc = ptvcursor_new(btree, tvb, loffset);",
          "6573:             ptvcursor_free(ptvc);",
          "6574:             loffset += 6;",
          "6575:             proto_item_set_end(bitem, tvb, loffset);",
          "",
          "[Removed Lines]",
          "6571:             process_ptvc_record(ptvc, ptvc_struct_attributes_struct,",
          "6572:                     NULL, TRUE, ncp_rec);",
          "",
          "[Added Lines]",
          "6532:             process_ptvc_record(ptvc, pinfo, ptvc_struct_attributes_struct,",
          "6533:                     NULL, TRUE, ncp_rec, FALSE);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "6613:         if (request_value->req_mask & 0x0020 && !ncp_newstyle) {",
          "6614:             btree = proto_tree_add_subtree(atree, tvb, loffset, -1, ett_ncp, &bitem, \"Extended Attributes\");",
          "6615:             ptvc = ptvcursor_new(btree, tvb, loffset);",
          "6618:             ptvcursor_free(ptvc);",
          "6619:             loffset += 12;",
          "6620:             proto_item_set_end(bitem, tvb, loffset);",
          "",
          "[Removed Lines]",
          "6616:             process_ptvc_record(ptvc, ptvc_struct_ea_info_struct,",
          "6617:                     NULL, TRUE, ncp_rec);",
          "",
          "[Added Lines]",
          "6577:             process_ptvc_record(ptvc, pinfo, ptvc_struct_ea_info_struct,",
          "6578:                     NULL, TRUE, ncp_rec, FALSE);",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "6630:             btree = proto_tree_add_subtree(atree, tvb, loffset, -1, ett_ncp, &bitem, \"Extended Attributes\");",
          "6632:             ptvc = ptvcursor_new(btree, tvb, loffset);",
          "6635:             ptvcursor_free(ptvc);",
          "6636:             loffset += 12;",
          "6637:             proto_item_set_end(bitem, tvb, loffset);",
          "",
          "[Removed Lines]",
          "6633:             process_ptvc_record(ptvc, ptvc_struct_ea_info_struct,",
          "6634:                     NULL, TRUE, ncp_rec);",
          "",
          "[Added Lines]",
          "6594:             process_ptvc_record(ptvc, pinfo, ptvc_struct_ea_info_struct,",
          "6595:                     NULL, TRUE, ncp_rec, FALSE);",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "6646:         if (request_value->req_mask & 0x0040) {",
          "6647:             btree = proto_tree_add_subtree(atree, tvb, loffset, -1, ett_ncp, &bitem, \"Archive\");",
          "6648:             ptvc = ptvcursor_new(btree, tvb, loffset);",
          "6651:             ptvcursor_free(ptvc);",
          "6652:             loffset += 8;",
          "6653:             proto_item_set_end(bitem, tvb, loffset);",
          "",
          "[Removed Lines]",
          "6649:             process_ptvc_record(ptvc, ptvc_struct_archive_info_struct,",
          "6650:                     NULL, TRUE, ncp_rec);",
          "",
          "[Added Lines]",
          "6610:             process_ptvc_record(ptvc, pinfo, ptvc_struct_archive_info_struct,",
          "6611:                     NULL, TRUE, ncp_rec, FALSE);",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "6663:             btree = proto_tree_add_subtree(atree, tvb, loffset, -1, ett_ncp, &bitem, \"Modification\");",
          "6665:             ptvc = ptvcursor_new(btree, tvb, loffset);",
          "6668:             ptvcursor_free(ptvc);",
          "6669:             loffset += 10;",
          "6670:             proto_item_set_end(bitem, tvb, loffset);",
          "",
          "[Removed Lines]",
          "6666:             process_ptvc_record(ptvc, ptvc_struct_modify_info_struct,",
          "6667:                     NULL, TRUE, ncp_rec);",
          "",
          "[Added Lines]",
          "6627:             process_ptvc_record(ptvc, pinfo, ptvc_struct_modify_info_struct,",
          "6628:                     NULL, TRUE, ncp_rec, FALSE);",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "6679:         if (request_value->req_mask & 0x0100 && !ncp_newstyle) {",
          "6680:             btree = proto_tree_add_subtree(atree, tvb, loffset, -1, ett_ncp, &bitem, \"Creation\");",
          "6681:             ptvc = ptvcursor_new(btree, tvb, loffset);",
          "6684:             ptvcursor_free(ptvc);",
          "6685:             loffset += 8;",
          "6686:             proto_item_set_end(bitem, tvb, loffset);",
          "",
          "[Removed Lines]",
          "6682:             process_ptvc_record(ptvc, ptvc_struct_creation_info_struct,",
          "6683:                     NULL, TRUE, ncp_rec);",
          "",
          "[Added Lines]",
          "6643:             process_ptvc_record(ptvc, pinfo, ptvc_struct_creation_info_struct,",
          "6644:                     NULL, TRUE, ncp_rec, FALSE);",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "6695:         if (request_value->req_mask & 0x0100 && ncp_newstyle) {",
          "6696:             btree = proto_tree_add_subtree(atree, tvb, loffset, -1, ett_ncp, &bitem, \"Creation\");",
          "6697:             ptvc = ptvcursor_new(btree, tvb, loffset);",
          "6700:             ptvcursor_free(ptvc);",
          "6701:             loffset += 8;",
          "6702:             proto_item_set_end(bitem, tvb, loffset);",
          "",
          "[Removed Lines]",
          "6698:             process_ptvc_record(ptvc, ptvc_struct_creation_info_struct,",
          "6699:                     NULL, TRUE, ncp_rec);",
          "",
          "[Added Lines]",
          "6659:             process_ptvc_record(ptvc, pinfo, ptvc_struct_creation_info_struct,",
          "6660:                     NULL, TRUE, ncp_rec, FALSE);",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "6722:         if (request_value->req_mask & 0x0400) {",
          "6723:             btree = proto_tree_add_subtree(atree, tvb, loffset, -1, ett_ncp, &bitem, \"Directory Entry\");",
          "6724:             ptvc = ptvcursor_new(btree, tvb, loffset);",
          "6727:             ptvcursor_free(ptvc);",
          "6728:             loffset += 12;",
          "6729:             proto_item_set_end(bitem, tvb, loffset);",
          "",
          "[Removed Lines]",
          "6725:             process_ptvc_record(ptvc, ptvc_struct_dir_entry_struct,",
          "6726:                     NULL, TRUE, ncp_rec);",
          "",
          "[Added Lines]",
          "6686:             process_ptvc_record(ptvc, pinfo, ptvc_struct_dir_entry_struct,",
          "6687:                     NULL, TRUE, ncp_rec, FALSE);",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "6738:         if (request_value->req_mask & 0x0800) {",
          "6739:             ptvc = ptvcursor_new(atree, tvb, loffset);",
          "6742:             ptvcursor_free(ptvc);",
          "6743:             loffset += 2;",
          "6744:         }",
          "",
          "[Removed Lines]",
          "6740:             process_ptvc_record(ptvc, ptvc_struct_rights_info_struct,",
          "6741:                     NULL, TRUE, ncp_rec);",
          "",
          "[Added Lines]",
          "6701:             process_ptvc_record(ptvc, pinfo, ptvc_struct_rights_info_struct,",
          "6702:                     NULL, TRUE, ncp_rec, FALSE);",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "6807:         if (request_value->req_mask_ext & 0x0004 && ncp_newstyle) {",
          "6808:             ptvc = ptvcursor_new(atree, tvb, loffset);",
          "6811:             ptvcursor_free(ptvc);",
          "6812:             loffset += 4;",
          "6813:         }",
          "",
          "[Removed Lines]",
          "6809:             process_ptvc_record(ptvc, ptvc_struct_flush_time_struct,",
          "6810:                     NULL, TRUE, ncp_rec);",
          "",
          "[Added Lines]",
          "6770:             process_ptvc_record(ptvc, pinfo, ptvc_struct_flush_time_struct,",
          "6771:                     NULL, TRUE, ncp_rec, FALSE);",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "6836:             btree = proto_tree_add_subtree(atree, tvb, loffset, -1, ett_ncp, &bitem, \"Mac Date\");",
          "6838:             ptvc = ptvcursor_new(btree, tvb, loffset);",
          "6841:             ptvcursor_free(ptvc);",
          "6842:             loffset += 8;",
          "6843:             proto_item_set_end(bitem, tvb, loffset);",
          "",
          "[Removed Lines]",
          "6839:             process_ptvc_record(ptvc, ptvc_struct_mac_time_struct,",
          "6840:                     NULL, TRUE, ncp_rec);",
          "",
          "[Added Lines]",
          "6800:             process_ptvc_record(ptvc, pinfo, ptvc_struct_mac_time_struct,",
          "6801:                     NULL, TRUE, ncp_rec, FALSE);",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "6846:         if (request_value->req_mask_ext & 0x0100 && ncp_newstyle) {",
          "6847:             ptvc = ptvcursor_new(atree, tvb, loffset);",
          "6850:             ptvcursor_free(ptvc);",
          "6851:             loffset += 2;",
          "6852:         }",
          "",
          "[Removed Lines]",
          "6848:             process_ptvc_record(ptvc, ptvc_struct_last_access_time_struct,",
          "6849:                     NULL, TRUE, ncp_rec);",
          "",
          "[Added Lines]",
          "6809:             process_ptvc_record(ptvc, pinfo, ptvc_struct_last_access_time_struct,",
          "6810:                     NULL, TRUE, ncp_rec, FALSE);",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "6880: static void",
          "6881: dissect_ncp_123_62_reply(tvbuff_t *tvb, proto_tree *volatile ncp_tree)",
          "6882: {",
          "",
          "[Removed Lines]",
          "6883:     char value_format[2]=\"\\0\";",
          "6884:     char param_string[256]=\"\\0\";",
          "6886:     build_expert_data(ncp_tree, \"ncp.set_cmd_type\",",
          "6887:                       value_format, sizeof value_format, 0, FALSE);",
          "6888:     build_expert_data(ncp_tree, \"ncp.set_cmd_name\",",
          "6889:                       param_string, sizeof param_string, 0, FALSE);",
          "6890:     switch (atoi(value_format)) {",
          "",
          "[Added Lines]",
          "6844:     guint8 cmd_type;",
          "6845:     guint8* param_string;",
          "6846:     gint ret_len;",
          "6848:     cmd_type = tvb_get_guint8(tvb, 8+16);",
          "6849:     param_string = tvb_get_stringz_enc(wmem_packet_scope(), tvb, 8+24, &ret_len, ENC_ASCII);",
          "6851:     switch (cmd_type) {",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "7468:             TRY {",
          "7470:             } CATCH_ALL {",
          "7471:                 exception_code = EXCEPT_CODE;",
          "7472:                 message = GET_MESSAGE;",
          "",
          "[Removed Lines]",
          "7469:                 process_ptvc_record(ptvc, ncp_rec->request_ptvc, NULL, TRUE, ncp_rec);",
          "",
          "[Added Lines]",
          "7430:                 process_ptvc_record(ptvc, pinfo, ncp_rec->request_ptvc, NULL, TRUE, ncp_rec, TRUE);",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "7627:         if ((func == 0x57 || func == 0x59) && subfunc == 0x14 && ncp_tree && request_value) {",
          "7638:         }",
          "",
          "[Removed Lines]",
          "7628:             char ret_info_string[16];",
          "7629:             char ret_info_string_ext[16];",
          "7631:             build_expert_data(ncp_tree, \"ncp.ret_info_mask\",",
          "7632:                               ret_info_string, sizeof ret_info_string, 0, FALSE);",
          "7633:             request_value->req_mask = (guint32) atoi(ret_info_string);",
          "7634:             build_expert_data(ncp_tree, \"ncp.ext_info\",",
          "7635:                               ret_info_string_ext, sizeof ret_info_string_ext,",
          "7636:                               0, FALSE);",
          "7637:             request_value->req_mask_ext = (guint32) atoi(ret_info_string_ext);",
          "",
          "[Added Lines]",
          "7589:             request_value->req_mask = tvb_get_letohs(tvb, 8+4);",
          "7590:             request_value->req_mask_ext = tvb_get_letohs(tvb, 8+6);",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "7657:                 dissect_ncp_8x20req(tvb, ncp_tree, 28, ncp_rec->func);",
          "7658:             }",
          "7659:         }",
          "7663:         CLEANUP_CALL_AND_POP_PFX(xx);",
          "",
          "[Removed Lines]",
          "7661:         trap_for_expert_event(ncp_tree, pinfo, ncp_rec, 0);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "8712:         }",
          "8714:         if ((ncp_rec->func == 0x57 || ncp_rec->func == 0x59) && ncp_rec->subfunc == 0x14) {",
          "8716:         }",
          "8717:         if (ncp_rec->func == 5 && ncp_echo_conn) {",
          "8718:             expert_add_info(pinfo, NULL, &ei_ncp_connection_destroyed);",
          "",
          "[Removed Lines]",
          "8715:             dissect_ncp_8x20reply(tvb, ncp_tree, ncp_rec, request_value);",
          "",
          "[Added Lines]",
          "8666:             dissect_ncp_8x20reply(tvb, pinfo, ncp_tree, ncp_rec, request_value);",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "8751:             }",
          "8752:             clear_repeat_vars();",
          "8753:             ptvc = ptvcursor_new(ncp_tree, tvb, 8);",
          "8756:             ptvcursor_free(ptvc);",
          "8778:             if (ncp_rec->func == 0x7b && ncp_rec->subfunc == 0x11) {",
          "8779:                 dissect_ncp_123_17_reply(tvb, pinfo, ncp_tree);",
          "",
          "[Removed Lines]",
          "8754:             process_ptvc_record(ptvc, ncp_rec->reply_ptvc,",
          "8755:                                 req_cond_results, TRUE, ncp_rec);",
          "8759:             if (!pinfo->fd->flags.visited && ncp_rec->func == 0x16 && ncp_rec->subfunc == 0x33) {",
          "8761:                 char    eid_string[10];",
          "8762:                 char    global_object_name[256];",
          "8764:                 build_expert_data(ncp_tree, \"ncp.directory_services_object_id\",",
          "8765:                                   eid_string, sizeof eid_string,",
          "8766:                                   0, TRUE);",
          "8767:                 build_expert_data(ncp_tree, \"ncp.volume_name_len\",",
          "8768:                                   global_object_name, sizeof global_object_name,",
          "8769:                                   0, FALSE);",
          "8772:                 if (nds_echo_eid) {",
          "8773:                     expert_add_info_format(pinfo, NULL, &ei_ncp_eid,",
          "8774:                                            \"EID (%s) = %s\", eid_string, global_object_name);",
          "8775:                 }",
          "8776:             }",
          "",
          "[Added Lines]",
          "8705:             process_ptvc_record(ptvc, pinfo, ncp_rec->reply_ptvc,",
          "8706:                                 req_cond_results, TRUE, ncp_rec, FALSE);",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "8796:             }",
          "8798:         }",
          "8801:     } else {",
          "8802:         if (tvb_reported_length(tvb) > 8) {",
          "8803:             expert_item = proto_tree_add_item(ncp_tree, hf_no_request_record_found, tvb, 8, -1, ENC_NA);",
          "",
          "[Removed Lines]",
          "8800:         trap_for_expert_event(ncp_tree, pinfo, ncp_rec, 1);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "8858:     nds_frag = tvb_get_letohl(tvb, 8);",
          "8861:     if (nds_frag == 0xffffffff) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8791:        came, and the address and connection to which the request",
          "8792:        is being sent, so that we can match up calls with replies.",
          "8793:        (We don't include the sequence number, as we may want",
          "8794:        to have all packets over the same connection treated",
          "8795:        as being part of a single conversation so that we can",
          "8798:     conversation = find_conversation(pinfo->fd->num, &pinfo->src, &pinfo->dst,",
          "8799:                                      PT_NCP, nw_connection, nw_connection, 0);",
          "8800:     if (conversation == NULL) {",
          "8802:         conversation = conversation_new(pinfo->fd->num, &pinfo->src, &pinfo->dst,",
          "8803:                                         PT_NCP, nw_connection, nw_connection, 0);",
          "8804:     }",
          "8806:     if (!pinfo->fd->flags.visited) {",
          "8807:         request_value = ncp_hash_insert(conversation, sequence, ncp_rec, pinfo->fd->num);",
          "8808:         request_value->req_frame_num = pinfo->fd->num;",
          "8809:         request_value->req_frame_time=pinfo->fd->abs_ts;",
          "8818:         if (ncp_rec && !ncp_tree) {",
          "8819:             run_req_cond = TRUE;",
          "8820:         }",
          "8822:         request_value->nds_frag_num = nds_frag;",
          "8823:     }",
          "8826:        add to the Info column, we need to construct a protocol",
          "8827:        tree.  If we already have a proto_tree, then wonderful.",
          "8829:     if ((run_info_str || run_req_cond) && !ncp_tree) {",
          "8830:         proto_item *ti;",
          "8832:         temp_tree = proto_tree_create_root(pinfo);",
          "8833:         proto_tree_set_visible(temp_tree, FALSE);",
          "8834:         ti = proto_tree_add_item(temp_tree, proto_ncp, tvb, 0, -1, ENC_NA);",
          "8835:         ncp_tree = proto_item_add_subtree(ti, ett_ncp);",
          "8836:     }",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "11164:                         func, func);",
          "11165:     }",
          "11215:     if (ncp_tree) {",
          "",
          "[Removed Lines]",
          "11168:        came, and the address and connection to which the request",
          "11169:        is being sent, so that we can match up calls with replies.",
          "11170:        (We don't include the sequence number, as we may want",
          "11171:        to have all packets over the same connection treated",
          "11172:        as being part of a single conversation so that we can",
          "11175:     conversation = find_conversation(pinfo->fd->num, &pinfo->src, &pinfo->dst,",
          "11176:                                      PT_NCP, nw_connection, nw_connection, 0);",
          "11177:     if (conversation == NULL) {",
          "11179:         conversation = conversation_new(pinfo->fd->num, &pinfo->src, &pinfo->dst,",
          "11180:                                         PT_NCP, nw_connection, nw_connection, 0);",
          "11181:     }",
          "11183:     if (!pinfo->fd->flags.visited) {",
          "11184:         request_value = ncp_hash_insert(conversation, sequence, ncp_rec, pinfo->fd->num);",
          "11185:         request_value->req_frame_num = pinfo->fd->num;",
          "11186:         request_value->req_frame_time=pinfo->fd->abs_ts;",
          "11195:         if (ncp_rec && !ncp_tree) {",
          "11196:             run_req_cond = TRUE;",
          "11197:         }",
          "11199:         request_value->nds_frag_num = nds_frag;",
          "11200:     }",
          "11203:        add to the Info column, we need to construct a protocol",
          "11204:        tree.  If we already have a proto_tree, then wonderful.",
          "11206:     if ((run_info_str || run_req_cond) && !ncp_tree) {",
          "11207:         proto_item *ti;",
          "11209:         temp_tree = proto_tree_create_root(pinfo);",
          "11210:         proto_tree_set_visible(temp_tree, FALSE);",
          "11211:         ti = proto_tree_add_item(temp_tree, proto_ncp, tvb, 0, -1, ENC_NA);",
          "11212:         ncp_tree = proto_item_add_subtree(ti, ett_ncp);",
          "11213:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "11239:             if (ncp_rec && ncp_rec->request_ptvc)",
          "11240:             {",
          "11241:                 clear_repeat_vars();",
          "11243:             }",
          "11244:             proto_tree_add_uint_format_value(ncp_tree, hf_ncp_func, tvb, 6, 1,",
          "11245:                                        func, \"%d (0x%02X), %s\",",
          "",
          "[Removed Lines]",
          "11242:                 process_ptvc_record(ptvc, ncp_rec->request_ptvc, NULL, TRUE, ncp_rec);",
          "",
          "[Added Lines]",
          "11173:                 process_ptvc_record(ptvc, pinfo, ncp_rec->request_ptvc, NULL, TRUE, ncp_rec, TRUE);",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "11375:                     request_value->req_nds_prot_flags = nds_prot_flags;",
          "11376:                 }",
          "11377:             }",
          "11378:             break;",
          "11380:         default:",
          "11382:             break;",
          "11383:         }",
          "11387:         CLEANUP_CALL_AND_POP;",
          "",
          "[Removed Lines]",
          "11384:         ptvcursor_free(ptvc);",
          "",
          "[Added Lines]",
          "11309:             ptvcursor_free(ptvc);",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "11524:         ptvc = ptvcursor_new(ncp_tree, tvb, 7);",
          "11525:         if (ncp_rec && ncp_rec->request_ptvc) {",
          "11526:             clear_repeat_vars();",
          "11528:         }",
          "11529:         ptvcursor_free(ptvc);",
          "",
          "[Removed Lines]",
          "11527:             process_ptvc_record(ptvc, ncp_rec->request_ptvc, NULL, TRUE, ncp_rec);",
          "",
          "[Added Lines]",
          "11458:             process_ptvc_record(ptvc, pinfo, ncp_rec->request_ptvc, NULL, TRUE, ncp_rec, TRUE);",
          "",
          "---------------"
        ],
        "tools/ncp2222.py||tools/ncp2222.py": [
          "File: tools/ncp2222.py -> tools/ncp2222.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "361:     def RegularCode(self, var, repeat, req_cond):",
          "362:         \"String representation\"",
          "367:         length = None",
          "",
          "[Removed Lines]",
          "363:         endianness = 'BE'",
          "364:         if self.endianness == LE:",
          "365:             endianness = 'LE'",
          "",
          "[Added Lines]",
          "363:         endianness = 'ENC_BIG_ENDIAN'",
          "364:         if self.endianness == ENC_LITTLE_ENDIAN:",
          "365:             endianness = 'ENC_LITTLE_ENDIAN'",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "422:         self.has_length         = has_length",
          "423:         self.req_cond_size      = None",
          "424:         self.req_info_str       = None",
          "426:         if group not in groups:",
          "427:             msg.write(\"NCP 0x%x has invalid group '%s'\\n\" % \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "425:         self.expert_func        = None",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "560:         \"Returns a C symbol based on the NCP function code, for the info_str\"",
          "561:         return \"info_str_0x%x\" % (self.__code__)",
          "563:     def Variables(self):",
          "564:         \"\"\"Returns a list of variables used in the request and reply records.",
          "565:         A variable is listed only once, even if it is used twice (once in",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "564:     def MakeExpert(self, func):",
          "565:         self.expert_func = func",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "696: ##############################################################################",
          "700: NA              = -1            # Not Applicable",
          "702: class Type:",
          "",
          "[Removed Lines]",
          "698: LE              = 1             # Little-Endian",
          "699: BE              = 0             # Big-Endian",
          "",
          "[Added Lines]",
          "702: ENC_LITTLE_ENDIAN              = 1             # Little-Endian",
          "703: ENC_BIG_ENDIAN              = 0             # Big-Endian",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "856: class uint16(Type, CountingNumber):",
          "857:     type    = \"uint16\"",
          "858:     ftype   = \"FT_UINT16\"",
          "860:         Type.__init__(self, abbrev, descr, 2, endianness)",
          "862: class uint24(Type, CountingNumber):",
          "863:     type    = \"uint24\"",
          "864:     ftype   = \"FT_UINT24\"",
          "866:         Type.__init__(self, abbrev, descr, 3, endianness)",
          "868: class uint32(Type, CountingNumber):",
          "869:     type    = \"uint32\"",
          "870:     ftype   = \"FT_UINT32\"",
          "872:         Type.__init__(self, abbrev, descr, 4, endianness)",
          "874: class uint64(Type, CountingNumber):",
          "875:     type    = \"uint64\"",
          "876:     ftype   = \"FT_UINT64\"",
          "878:         Type.__init__(self, abbrev, descr, 8, endianness)",
          "880: class eptime(Type, CountingNumber):",
          "881:     type    = \"eptime\"",
          "882:     ftype   = \"FT_ABSOLUTE_TIME\"",
          "883:     disp    = \"ABSOLUTE_TIME_LOCAL\"",
          "885:         Type.__init__(self, abbrev, descr, 4, endianness)",
          "887: class boolean8(uint8):",
          "",
          "[Removed Lines]",
          "859:     def __init__(self, abbrev, descr, endianness = LE):",
          "865:     def __init__(self, abbrev, descr, endianness = LE):",
          "871:     def __init__(self, abbrev, descr, endianness = LE):",
          "877:     def __init__(self, abbrev, descr, endianness = LE):",
          "884:     def __init__(self, abbrev, descr, endianness = LE):",
          "",
          "[Added Lines]",
          "863:     def __init__(self, abbrev, descr, endianness = ENC_LITTLE_ENDIAN):",
          "869:     def __init__(self, abbrev, descr, endianness = ENC_LITTLE_ENDIAN):",
          "875:     def __init__(self, abbrev, descr, endianness = ENC_LITTLE_ENDIAN):",
          "881:     def __init__(self, abbrev, descr, endianness = ENC_LITTLE_ENDIAN):",
          "888:     def __init__(self, abbrev, descr, endianness = ENC_LITTLE_ENDIAN):",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "924:     type    = \"nstring16\"",
          "925:     ftype   = \"FT_UINT_STRING\"",
          "926:     disp    = \"BASE_NONE\"",
          "928:         Type.__init__(self, abbrev, descr, 2, endianness)",
          "930: class nstring32(Type, nstring):",
          "",
          "[Removed Lines]",
          "927:     def __init__(self, abbrev, descr, endianness = LE):",
          "",
          "[Added Lines]",
          "931:     def __init__(self, abbrev, descr, endianness = ENC_LITTLE_ENDIAN):",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "934:     type    = \"nstring32\"",
          "935:     ftype   = \"FT_UINT_STRING\"",
          "936:     disp    = \"BASE_NONE\"",
          "938:         Type.__init__(self, abbrev, descr, 4, endianness)",
          "940: class fw_string(Type):",
          "",
          "[Removed Lines]",
          "937:     def __init__(self, abbrev, descr, endianness = LE):",
          "",
          "[Added Lines]",
          "941:     def __init__(self, abbrev, descr, endianness = ENC_LITTLE_ENDIAN):",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "964:     type    = \"val_string\"",
          "965:     disp    = 'BASE_HEX'",
          "968:         Type.__init__(self, abbrev, descr, self.bytes, endianness)",
          "969:         self.values = val_string_array",
          "",
          "[Removed Lines]",
          "967:     def __init__(self, abbrev, descr, val_string_array, endianness = LE):",
          "",
          "[Added Lines]",
          "971:     def __init__(self, abbrev, descr, val_string_array, endianness = ENC_LITTLE_ENDIAN):",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1026:     type    = \"nbytes8\"",
          "1027:     ftype   = \"FT_UINT_BYTES\"",
          "1028:     disp    = \"BASE_NONE\"",
          "1030:         Type.__init__(self, abbrev, descr, 1, endianness)",
          "1032: class nbytes16(Type, nbytes):",
          "",
          "[Removed Lines]",
          "1029:     def __init__(self, abbrev, descr, endianness = LE):",
          "",
          "[Added Lines]",
          "1033:     def __init__(self, abbrev, descr, endianness = ENC_LITTLE_ENDIAN):",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1036:     type    = \"nbytes16\"",
          "1037:     ftype   = \"FT_UINT_BYTES\"",
          "1038:     disp    = \"BASE_NONE\"",
          "1040:         Type.__init__(self, abbrev, descr, 2, endianness)",
          "1042: class nbytes32(Type, nbytes):",
          "",
          "[Removed Lines]",
          "1039:     def __init__(self, abbrev, descr, endianness = LE):",
          "",
          "[Added Lines]",
          "1043:     def __init__(self, abbrev, descr, endianness = ENC_LITTLE_ENDIAN):",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1046:     type    = \"nbytes32\"",
          "1047:     ftype   = \"FT_UINT_BYTES\"",
          "1048:     disp    = \"BASE_NONE\"",
          "1050:         Type.__init__(self, abbrev, descr, 4, endianness)",
          "1052: class bf_uint(Type):",
          "1053:     type    = \"bf_uint\"",
          "1054:     disp    = None",
          "1057:         Type.__init__(self, abbrev, descr, self.bytes, endianness)",
          "1058:         self.bitmask = bitmask",
          "",
          "[Removed Lines]",
          "1049:     def __init__(self, abbrev, descr, endianness = LE):",
          "1056:     def __init__(self, bitmask, abbrev, descr, endianness=LE):",
          "",
          "[Added Lines]",
          "1053:     def __init__(self, abbrev, descr, endianness = ENC_LITTLE_ENDIAN):",
          "1060:     def __init__(self, bitmask, abbrev, descr, endianness=ENC_LITTLE_ENDIAN):",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1064:     type    = \"bf_uint\"",
          "1065:     disp    = None",
          "1068:         bf_uint.__init__(self, bitmask, abbrev, descr, endiannes)",
          "1069:         self.values = val_string_array",
          "",
          "[Removed Lines]",
          "1067:     def __init__(self, bitmask, abbrev, descr, val_string_array, endiannes=LE):",
          "",
          "[Added Lines]",
          "1071:     def __init__(self, bitmask, abbrev, descr, val_string_array, endiannes=ENC_LITTLE_ENDIAN):",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1169:     ftype   = \"FT_UINT16\"",
          "1170:     bf_type = bf_boolean16",
          "1173:         uint16.__init__(self, abbrev, descr, endianness)",
          "1174:         bitfield.__init__(self, vars)",
          "",
          "[Removed Lines]",
          "1172:     def __init__(self, abbrev, descr, vars, endianness=LE):",
          "",
          "[Added Lines]",
          "1176:     def __init__(self, abbrev, descr, vars, endianness=ENC_LITTLE_ENDIAN):",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1178:     ftype   = \"FT_UINT24\"",
          "1179:     bf_type = bf_boolean24",
          "1182:         uint24.__init__(self, abbrev, descr, endianness)",
          "1183:         bitfield.__init__(self, vars)",
          "",
          "[Removed Lines]",
          "1181:     def __init__(self, abbrev, descr, vars, endianness=LE):",
          "",
          "[Added Lines]",
          "1185:     def __init__(self, abbrev, descr, vars, endianness=ENC_LITTLE_ENDIAN):",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1187:     ftype   = \"FT_UINT32\"",
          "1188:     bf_type = bf_boolean32",
          "1191:         uint32.__init__(self, abbrev, descr, endianness)",
          "1192:         bitfield.__init__(self, vars)",
          "",
          "[Removed Lines]",
          "1190:     def __init__(self, abbrev, descr, vars, endianness=LE):",
          "",
          "[Added Lines]",
          "1194:     def __init__(self, abbrev, descr, vars, endianness=ENC_LITTLE_ENDIAN):",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1273: ActualMaxUsedRoutingBuffers     = uint16(\"actual_max_used_routing_buffers\", \"Actual Max Used Routing Buffers\")",
          "1274: ActualResponseCount             = uint16(\"actual_response_count\", \"Actual Response Count\")",
          "1275: AddNameSpaceAndVol              = stringz(\"add_nm_spc_and_vol\", \"Add Name Space and Volume\")",
          "1277: AFPEntryID.Display(\"BASE_HEX\")",
          "1278: AllocAvailByte                  = uint32(\"alloc_avail_byte\", \"Bytes Available for Allocation\")",
          "1279: AllocateMode                    = bitfield16(\"alloc_mode\", \"Allocate Mode\", [",
          "",
          "[Removed Lines]",
          "1276: AFPEntryID                      = uint32(\"afp_entry_id\", \"AFP Entry ID\", BE)",
          "",
          "[Added Lines]",
          "1280: AFPEntryID                      = uint32(\"afp_entry_id\", \"AFP Entry ID\", ENC_BIG_ENDIAN)",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1292: ArchivedTime.NWTime()",
          "1293: ArchivedDate                    = uint16(\"archived_date\", \"Archived Date\")",
          "1294: ArchivedDate.NWDate()",
          "1296: ArchiverID.Display(\"BASE_HEX\")",
          "1297: AssociatedNameSpace             = uint8(\"associated_name_space\", \"Associated Name Space\")",
          "1298: AttachDuringProcessing          = uint16(\"attach_during_processing\", \"Attach During Processing\")",
          "",
          "[Removed Lines]",
          "1295: ArchiverID                      = uint32(\"archiver_id\", \"Archiver ID\", BE)",
          "",
          "[Added Lines]",
          "1299: ArchiverID                      = uint32(\"archiver_id\", \"Archiver ID\", ENC_BIG_ENDIAN)",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1369: ])",
          "1370: AuditHandle                     = uint32(\"audit_handle\", \"Audit File Handle\")",
          "1371: AuditHandle.Display(\"BASE_HEX\")",
          "1373: AuditID.Display(\"BASE_HEX\")",
          "1374: AuditIDType                     = val_string16(\"audit_id_type\", \"Audit ID Type\", [",
          "1375:         [ 0x0000, \"Volume\" ],",
          "",
          "[Removed Lines]",
          "1372: AuditID                         = uint32(\"audit_id\", \"Audit ID\", BE)",
          "",
          "[Added Lines]",
          "1376: AuditID                         = uint32(\"audit_id\", \"Audit ID\", ENC_BIG_ENDIAN)",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1389: BackgroundDirtyWrites           = uint32(\"background_dirty_writes\", \"Background Dirty Writes\")",
          "1390: BadLogicalConnectionCount       = uint16(\"bad_logical_connection_count\", \"Bad Logical Connection Count\")",
          "1391: BannerName                      = fw_string(\"banner_name\", \"Banner Name\", 14)",
          "1393: BaseDirectoryID.Display(\"BASE_HEX\")",
          "1394: binderyContext                  = nstring8(\"bindery_context\", \"Bindery Context\")",
          "1395: BitMap                          = bytes(\"bit_map\", \"Bit Map\", 512)",
          "",
          "[Removed Lines]",
          "1392: BaseDirectoryID                 = uint32(\"base_directory_id\", \"Base Directory ID\", BE)",
          "",
          "[Added Lines]",
          "1396: BaseDirectoryID                 = uint32(\"base_directory_id\", \"Base Directory ID\", ENC_BIG_ENDIAN)",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1411:         [0x14, \"ISA/PCI\"],",
          "1412: ])",
          "1413: BytesActuallyTransferred        = uint32(\"bytes_actually_transferred\", \"Bytes Actually Transferred\")",
          "1415: BytesActuallyTransferred64bit.Display(\"BASE_DEC\")",
          "1416: BytesRead                       = fw_string(\"bytes_read\", \"Bytes Read\", 6)",
          "1417: BytesToCopy                     = uint32(\"bytes_to_copy\", \"Bytes to Copy\")",
          "",
          "[Removed Lines]",
          "1414: BytesActuallyTransferred64bit   = uint64(\"bytes_actually_transferred_64\", \"Bytes Actually Transferred\", LE)",
          "",
          "[Added Lines]",
          "1418: BytesActuallyTransferred64bit   = uint64(\"bytes_actually_transferred_64\", \"Bytes Actually Transferred\", ENC_LITTLE_ENDIAN)",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1482:         [ 0x00fd, \"Bad Station Number\" ],",
          "1483:         [ 0x00ff, \"Failure\" ],",
          "1484: ])",
          "1486: ClientIDNumber.Display(\"BASE_HEX\")",
          "1487: ClientList                      = uint32(\"client_list\", \"Client List\")",
          "1488: ClientListCount                 = uint16(\"client_list_cnt\", \"Client List Count\")",
          "",
          "[Removed Lines]",
          "1485: ClientIDNumber                  = uint32(\"client_id_number\", \"Client ID Number\", BE)",
          "",
          "[Added Lines]",
          "1489: ClientIDNumber                  = uint32(\"client_id_number\", \"Client ID Number\", ENC_BIG_ENDIAN)",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1526: ])",
          "1527: ConnectionListCount             = uint32(\"conn_list_count\", \"Connection List Count\")",
          "1528: ConnectionList                  = uint32(\"connection_list\", \"Connection List\")",
          "1530: ConnectionNumberList            = nstring8(\"connection_number_list\", \"Connection Number List\")",
          "1531: ConnectionNumberWord            = uint16(\"conn_number_word\", \"Connection Number\")",
          "1532: ConnectionNumberByte            = uint8(\"conn_number_byte\", \"Connection Number\")",
          "",
          "[Removed Lines]",
          "1529: ConnectionNumber                = uint32(\"connection_number\", \"Connection Number\", BE)",
          "",
          "[Added Lines]",
          "1533: ConnectionNumber                = uint32(\"connection_number\", \"Connection Number\", ENC_BIG_ENDIAN)",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1579: CreationDate.NWDate()",
          "1580: CreationTime                    = uint16(\"creation_time\", \"Creation Time\")",
          "1581: CreationTime.NWTime()",
          "1583: CreatorID.Display(\"BASE_HEX\")",
          "1584: CreatorNameSpaceNumber          = val_string8(\"creator_name_space_number\", \"Creator Name Space Number\", [",
          "1585:         [ 0x00, \"DOS Name Space\" ],",
          "",
          "[Removed Lines]",
          "1582: CreatorID                       = uint32(\"creator_id\", \"Creator ID\", BE)",
          "",
          "[Added Lines]",
          "1586: CreatorID                       = uint32(\"creator_id\", \"Creator ID\", ENC_BIG_ENDIAN)",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1657: DeletedFileTime.Display(\"BASE_HEX\")",
          "1658: DeletedTime                     = uint16(\"deleted_time\", \"Deleted Time\")",
          "1659: DeletedTime.NWTime()",
          "1661: DeletedID.Display(\"BASE_HEX\")",
          "1662: DeleteExistingFileFlag          = val_string8(\"delete_existing_file_flag\", \"Delete Existing File Flag\", [",
          "1663:         [ 0x00, \"Do Not Delete Existing File\" ],",
          "",
          "[Removed Lines]",
          "1660: DeletedID                       = uint32( \"delete_id\", \"Deleted ID\", BE)",
          "",
          "[Added Lines]",
          "1664: DeletedID                       = uint32( \"delete_id\", \"Deleted ID\", ENC_BIG_ENDIAN)",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "1703: DirectoryEntryNumber            = uint32(\"directory_entry_number\", \"Directory Entry Number\")",
          "1704: DirectoryEntryNumber.Display('BASE_HEX')",
          "1705: DirectoryEntryNumberWord        = uint16(\"directory_entry_number_word\", \"Directory Entry Number\")",
          "1707: DirectoryID.Display(\"BASE_HEX\")",
          "1708: DirectoryName                   = fw_string(\"directory_name\", \"Directory Name\",12)",
          "1709: DirectoryName14                 = fw_string(\"directory_name_14\", \"Directory Name\", 14)",
          "",
          "[Removed Lines]",
          "1706: DirectoryID                     = uint16(\"directory_id\", \"Directory ID\", BE)",
          "",
          "[Added Lines]",
          "1710: DirectoryID                     = uint16(\"directory_id\", \"Directory ID\", ENC_BIG_ENDIAN)",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "2242: FileNameLen                     = uint8(\"file_name_len\", \"Filename Length\")",
          "2243: FileOffset                      = uint32(\"file_offset\", \"File Offset\")",
          "2244: FilePath                        = nstring8(\"file_path\", \"File Path\")",
          "2246: FileSize64bit       = uint64(\"f_size_64bit\", \"64bit File Size\")",
          "2247: FileSystemID                    = uint8(\"file_system_id\", \"File System ID\")",
          "2248: FileTime                        = uint16(\"file_time\", \"File Time\")",
          "",
          "[Removed Lines]",
          "2245: FileSize                        = uint32(\"file_size\", \"File Size\", BE)",
          "",
          "[Added Lines]",
          "2249: FileSize                        = uint32(\"file_size\", \"File Size\", ENC_BIG_ENDIAN)",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "2437: ])",
          "2438: JobCount                        = uint32(\"job_count\", \"Job Count\")",
          "2439: JobFileHandle                   = bytes(\"job_file_handle\", \"Job File Handle\", 6)",
          "2441: JobFileHandleLong.Display(\"BASE_HEX\")",
          "2442: JobFileName                     = fw_string(\"job_file_name\", \"Job File Name\", 14)",
          "2443: JobPosition                     = uint8(\"job_position\", \"Job Position\")",
          "2444: JobPositionWord                 = uint16(\"job_position_word\", \"Job Position\")",
          "2447: JobNumberLong.Display(\"BASE_HEX\")",
          "2450: LANCustomVariablesCount         = uint32(\"lan_cust_var_count\", \"LAN Custom Variables Count\")",
          "2451: LANdriverBoardInstance          = uint16(\"lan_drv_bd_inst\", \"LAN Driver Board Instance\")",
          "",
          "[Removed Lines]",
          "2440: JobFileHandleLong               = uint32(\"job_file_handle_long\", \"Job File Handle\", BE)",
          "2445: JobNumber                       = uint16(\"job_number\", \"Job Number\", BE )",
          "2446: JobNumberLong                   = uint32(\"job_number_long\", \"Job Number\", BE )",
          "2448: JobType                         = uint16(\"job_type\", \"Job Type\", BE )",
          "",
          "[Added Lines]",
          "2444: JobFileHandleLong               = uint32(\"job_file_handle_long\", \"Job File Handle\", ENC_BIG_ENDIAN)",
          "2449: JobNumber                       = uint16(\"job_number\", \"Job Number\", ENC_BIG_ENDIAN )",
          "2450: JobNumberLong                   = uint32(\"job_number_long\", \"Job Number\", ENC_BIG_ENDIAN )",
          "2452: JobType                         = uint16(\"job_type\", \"Job Type\", ENC_BIG_ENDIAN )",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "2698: LoggedObjectID                  = uint32(\"logged_object_id\", \"Logged in Object ID\")",
          "2699: LoggedObjectID.Display(\"BASE_HEX\")",
          "2700: LoggedCount                     = uint16(\"logged_count\", \"Logged Count\")",
          "2702: LogicalDriveCount               = uint8(\"logical_drive_count\", \"Logical Drive Count\")",
          "2703: LogicalDriveNumber              = uint8(\"logical_drive_number\", \"Logical Drive Number\")",
          "2704: LogicalLockThreshold            = uint8(\"logical_lock_threshold\", \"LogicalLockThreshold\")",
          "",
          "[Removed Lines]",
          "2701: LogicalConnectionNumber         = uint16(\"logical_connection_number\", \"Logical Connection Number\", BE)",
          "",
          "[Added Lines]",
          "2705: LogicalConnectionNumber         = uint16(\"logical_connection_number\", \"Logical Connection Number\", ENC_BIG_ENDIAN)",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "2730: MACBackupDate.NWDate()",
          "2731: MACBackupTime                   = uint16(\"mac_backup_time\", \"Mac Backup Time\")",
          "2732: MACBackupTime.NWTime()",
          "2734: MacBaseDirectoryID.Display(\"BASE_HEX\")",
          "2735: MACCreateDate                   = uint16(\"mac_create_date\", \"Mac Create Date\")",
          "2736: MACCreateDate.NWDate()",
          "",
          "[Removed Lines]",
          "2733: MacBaseDirectoryID              = uint32(\"mac_base_directory_id\", \"Mac Base Directory ID\", BE)",
          "",
          "[Added Lines]",
          "2737: MacBaseDirectoryID              = uint32(\"mac_base_directory_id\", \"Mac Base Directory ID\", ENC_BIG_ENDIAN)",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "2814: ModifiedDate.NWDate()",
          "2815: ModifiedTime                    = uint16(\"modified_time\", \"Modified Time\")",
          "2816: ModifiedTime.NWTime()",
          "2818: ModifierID.Display(\"BASE_HEX\")",
          "2819: ModifyDOSInfoMask               = bitfield16(\"modify_dos_info_mask\", \"Modify DOS Info Mask\", [",
          "2820:         bf_boolean16(0x0002, \"modify_dos_read\", \"Attributes\"),",
          "",
          "[Removed Lines]",
          "2817: ModifierID                      = uint32(\"modifier_id\", \"Modifier ID\", BE)",
          "",
          "[Added Lines]",
          "2821: ModifierID                      = uint32(\"modifier_id\", \"Modifier ID\", ENC_BIG_ENDIAN)",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "2951:         bf_boolean16(0x0080, \"new_access_rights_modify\", \"Modify\"),",
          "2952:         bf_boolean16(0x0100, \"new_access_rights_supervisor\", \"Supervisor\"),",
          "2953: ])",
          "2955: NewDirectoryID.Display(\"BASE_HEX\")",
          "2956: NewEAHandle                     = uint32(\"new_ea_handle\", \"New EA Handle\")",
          "2957: NewEAHandle.Display(\"BASE_HEX\")",
          "",
          "[Removed Lines]",
          "2954: NewDirectoryID                  = uint32(\"new_directory_id\", \"New Directory ID\", BE)",
          "",
          "[Added Lines]",
          "2958: NewDirectoryID                  = uint32(\"new_directory_id\", \"New Directory ID\", ENC_BIG_ENDIAN)",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "2965: NextCntBlock                    = uint32(\"next_cnt_block\", \"Next Count Block\")",
          "2966: NextHugeStateInfo               = bytes(\"next_huge_state_info\", \"Next Huge State Info\", 16)",
          "2967: nextLimbScanNum                 = uint32(\"next_limb_scan_num\", \"Next Limb Scan Number\")",
          "2969: NextObjectID.Display(\"BASE_HEX\")",
          "2970: NextRecord                      = uint32(\"next_record\", \"Next Record\")",
          "2971: NextRequestRecord               = uint16(\"next_request_record\", \"Next Request Record\")",
          "",
          "[Removed Lines]",
          "2968: NextObjectID                    = uint32(\"next_object_id\", \"Next Object ID\", BE)",
          "",
          "[Added Lines]",
          "2972: NextObjectID                    = uint32(\"next_object_id\", \"Next Object ID\", ENC_BIG_ENDIAN)",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "3115:         [ 0x00, \"No properties\" ],",
          "3116:         [ 0xff, \"One or more properties\" ],",
          "3117: ])",
          "3119: ObjectID.Display('BASE_HEX')",
          "3120: ObjectIDCount                   = uint16(\"object_id_count\", \"Object ID Count\")",
          "3121: ObjectIDInfo                    = uint32(\"object_id_info\", \"Object Information\")",
          "",
          "[Removed Lines]",
          "3118: ObjectID                        = uint32(\"object_id\", \"Object ID\", BE)",
          "",
          "[Added Lines]",
          "3122: ObjectID                        = uint32(\"object_id\", \"Object ID\", ENC_BIG_ENDIAN)",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "3583: SearchPattern                           = nstring8(\"search_pattern\", \"Search Pattern\")",
          "3584: SearchPattern16                         = nstring16(\"search_pattern_16\", \"Search Pattern\")",
          "3585: SearchSequence                          = bytes(\"search_sequence\", \"Search Sequence\", 9)",
          "3587: Second                                      = uint8(\"s_second\", \"Seconds\")",
          "3588: SecondsRelativeToTheYear2000            = uint32(\"sec_rel_to_y2k\", \"Seconds Relative to the Year 2000\")",
          "3589: SecretStoreVerb                         = val_string8(\"ss_verb\", \"Secret Store Verb\",[",
          "",
          "[Removed Lines]",
          "3586: SearchSequenceWord          = uint16(\"search_sequence_word\", \"Search Sequence\", BE)",
          "",
          "[Added Lines]",
          "3590: SearchSequenceWord          = uint16(\"search_sequence_word\", \"Search Sequence\", ENC_BIG_ENDIAN)",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "3636: SequenceNumberLong.Display(\"BASE_HEX\")",
          "3637: ServerAddress                   = bytes(\"server_address\", \"Server Address\", 12)",
          "3638: ServerAppNumber                 = uint16(\"server_app_num\", \"Server App Number\")",
          "3640: ServerID.Display(\"BASE_HEX\")",
          "3641: ServerInfoFlags                 = val_string16(\"server_info_flags\", \"Server Information Flags\", [",
          "3642:         [ 0x0000, \"This server is not a member of a Cluster\" ],",
          "",
          "[Removed Lines]",
          "3639: ServerID                        = uint32(\"server_id_number\", \"Server ID\", BE )",
          "",
          "[Added Lines]",
          "3643: ServerID                        = uint32(\"server_id_number\", \"Server ID\", ENC_BIG_ENDIAN )",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "3822: TargetMessage                   = nstring8(\"target_message\", \"Message\")",
          "3823: TargetPrinter                   = uint8( \"target_ptr\", \"Target Printer\" )",
          "3824: targetReceiveTime               = bytes(\"target_receive_time\", \"Target Receive Time\", 8)",
          "3826: TargetServerIDNumber.Display(\"BASE_HEX\")",
          "3827: targetTransmitTime              = bytes(\"target_transmit_time\", \"Target Transmit Time\", 8)",
          "3828: TaskNumByte                     = uint8(\"task_num_byte\", \"Task Number\")",
          "",
          "[Removed Lines]",
          "3825: TargetServerIDNumber            = uint32(\"target_server_id_number\", \"Target Server ID Number\", BE )",
          "",
          "[Added Lines]",
          "3829: TargetServerIDNumber            = uint32(\"target_server_id_number\", \"Target Server ID Number\", ENC_BIG_ENDIAN )",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "3878: TotalRequestPackets             = uint32(\"total_request_packets\", \"Total Request Packets\")",
          "3879: TotalRoutedPackets              = uint32(\"total_routed_packets\", \"Total Routed Packets\")",
          "3880: TotalRxPkts                     = uint32(\"total_rx_pkts\", \"Total Receive Packets\")",
          "3882: TotalTransactionsBackedOut      = uint32(\"total_trans_backed_out\", \"Total Transactions Backed Out\")",
          "3883: TotalTransactionsPerformed      = uint32(\"total_trans_performed\", \"Total Transactions Performed\")",
          "3884: TotalTxPkts                     = uint32(\"total_tx_pkts\", \"Total Transmit Packets\")",
          "",
          "[Removed Lines]",
          "3881: TotalServerMemory               = uint16(\"total_server_memory\", \"Total Server Memory\", BE)",
          "",
          "[Added Lines]",
          "3885: TotalServerMemory               = uint16(\"total_server_memory\", \"Total Server Memory\", ENC_BIG_ENDIAN)",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "3947: UnUsedExtendedDirectoryExtents  = uint32(\"un_used_extended_directory_extents\", \"Unused Extended Directory Extents\")",
          "3948: UpdateDate                      = uint16(\"update_date\", \"Update Date\")",
          "3949: UpdateDate.NWDate()",
          "3951: UpdateID.Display(\"BASE_HEX\")",
          "3952: UpdateTime                      = uint16(\"update_time\", \"Update Time\")",
          "3953: UpdateTime.NWTime()",
          "",
          "[Removed Lines]",
          "3950: UpdateID                        = uint32(\"update_id\", \"Update ID\", BE)",
          "",
          "[Added Lines]",
          "3954: UpdateID                        = uint32(\"update_id\", \"Update ID\", ENC_BIG_ENDIAN)",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "3956:         [ 0x0001, \"Connection is in use\" ],",
          "3957: ])",
          "3958: UsedBlocks                      = uint32(\"used_blocks\", \"Used Blocks\")",
          "3960: UserID.Display(\"BASE_HEX\")",
          "3961: UserLoginAllowed                = val_string8(\"user_login_allowed\", \"Login Status\", [",
          "3962:         [ 0x00, \"Client Login Disabled\" ],",
          "",
          "[Removed Lines]",
          "3959: UserID                          = uint32(\"user_id\", \"User ID\", BE)",
          "",
          "[Added Lines]",
          "3963: UserID                          = uint32(\"user_id\", \"User ID\", ENC_BIG_ENDIAN)",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "4049:         [ 0x00000002, \"NetWare 386 Version 30\" ],",
          "4050:         [ 0x00000003, \"NetWare 386 Version 31\" ],",
          "4051: ])",
          "4053: WaitTime                        = uint32(\"wait_time\", \"Wait Time\")",
          "4055: Year                            = val_string8(\"year\", \"Year\",[",
          "",
          "[Removed Lines]",
          "4052: WastedServerMemory              = uint16(\"wasted_server_memory\", \"Wasted Server Memory\", BE)",
          "",
          "[Added Lines]",
          "4056: WastedServerMemory              = uint16(\"wasted_server_memory\", \"Wasted Server Memory\", ENC_BIG_ENDIAN)",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "4342: CreationInfoStruct              = struct(\"creation_info_struct\", [",
          "4343:         CreationTime,",
          "4344:         CreationDate,",
          "4346: ], \"Creation Information\")",
          "4347: CreationTimeStruct              = struct(\"creation_time_struct\", [",
          "4348:         CreationTime,",
          "",
          "[Removed Lines]",
          "4345:         endian(CreatorID, LE),",
          "",
          "[Added Lines]",
          "4349:         endian(CreatorID, ENC_LITTLE_ENDIAN),",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "4390:         DirectoryName14,",
          "4391:         DirectoryAttributes,",
          "4392:         DirectoryAccessRights,",
          "4395:         CreatorID,",
          "4396:         Reserved2,",
          "4397:         DirectoryStamp,",
          "",
          "[Removed Lines]",
          "4393:         endian(CreationDate, BE),",
          "4394:         endian(AccessDate, BE),",
          "",
          "[Added Lines]",
          "4397:         endian(CreationDate, ENC_BIG_ENDIAN),",
          "4398:         endian(AccessDate, ENC_BIG_ENDIAN),",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "4550:         AttributesDef,",
          "4551:         FileMode,",
          "4552:         FileSize,",
          "4557: ], \"File Instance\")",
          "4558: FileNameStruct                  = struct(\"file_name_struct\", [",
          "4559:         FileName,",
          "",
          "[Removed Lines]",
          "4553:         endian(CreationDate, BE),",
          "4554:         endian(AccessDate, BE),",
          "4555:         endian(UpdateDate, BE),",
          "4556:         endian(UpdateTime, BE),",
          "",
          "[Added Lines]",
          "4557:         endian(CreationDate, ENC_BIG_ENDIAN),",
          "4558:         endian(AccessDate, ENC_BIG_ENDIAN),",
          "4559:         endian(UpdateDate, ENC_BIG_ENDIAN),",
          "4560:         endian(UpdateTime, ENC_BIG_ENDIAN),",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "4864: ModifyInfoStruct                = struct(\"modify_info_struct\", [",
          "4865:         ModifiedTime,",
          "4866:         ModifiedDate,",
          "4868:         LastAccessedDate,",
          "4869: ], \"Modification Information\")",
          "4870: nameInfo                        = struct(\"name_info_struct\", [",
          "",
          "[Removed Lines]",
          "4867:         endian(ModifierID, LE),",
          "",
          "[Added Lines]",
          "4871:         endian(ModifierID, ENC_LITTLE_ENDIAN),",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "4957:         ObjectFlags,",
          "4958: ])",
          "4959: ObjectTypeStruct                = struct(\"object_type_struct\", [",
          "4961:         Reserved2,",
          "4962: ])",
          "4963: ObjectNameStruct                = struct(\"object_name_struct\", [",
          "",
          "[Removed Lines]",
          "4960:         endian(ObjectType, BE),",
          "",
          "[Added Lines]",
          "4964:         endian(ObjectType, ENC_BIG_ENDIAN),",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "4968:         Restriction,",
          "4969: ])",
          "4970: ObjectIDStruct64                = struct(\"object_id_struct64\", [",
          "4973: ])",
          "4974: OpnFilesStruct                  = struct(\"opn_files_struct\", [",
          "4975:         TaskNumberWord,",
          "",
          "[Removed Lines]",
          "4971:         endian(ObjectID, LE),",
          "4972:         endian(RestrictionQuad, LE),",
          "",
          "[Added Lines]",
          "4975:         endian(ObjectID, ENC_LITTLE_ENDIAN),",
          "4976:         endian(RestrictionQuad, ENC_LITTLE_ENDIAN),",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "5247:         uint32(\"num_of_cache_hits_no_wait\", \"Number Of Cache Hits No Wait\"),",
          "5248: ], \"Trend Counters\")",
          "5249: TrusteeStruct                   = struct(\"trustee_struct\", [",
          "5251:         AccessRightsMaskWord,",
          "5252: ])",
          "5253: UpdateDateStruct                = struct(\"update_date_struct\", [",
          "",
          "[Removed Lines]",
          "5250:         endian(ObjectID, LE),",
          "",
          "[Added Lines]",
          "5254:         endian(ObjectID, ENC_LITTLE_ENDIAN),",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "5260:         UpdateTime,",
          "5261: ])",
          "5262: UserInformation                 = struct(\"user_info\", [",
          "5264:         UseCount,",
          "5265:         Reserved2,",
          "5266:         ConnectionServiceType,",
          "",
          "[Removed Lines]",
          "5263:         endian(ConnectionNumber, LE),",
          "",
          "[Added Lines]",
          "5267:         endian(ConnectionNumber, ENC_LITTLE_ENDIAN),",
          "",
          "---------------",
          "--- Hunk 49 ---",
          "[Context before]",
          "5385: zFileMap_Allocation             = struct(\"zfilemap_allocation_struct\", [",
          "5386:     uint64(\"extent_byte_offset\", \"Byte Offset\"),",
          "5388:     #ExtentLength,",
          "5389: ], \"File Map Allocation\")",
          "5390: zFileMap_Logical             = struct(\"zfilemap_logical_struct\", [",
          "",
          "[Removed Lines]",
          "5387:     endian(uint64(\"extent_length_alloc\", \"Length\"), LE),",
          "",
          "[Added Lines]",
          "5391:     endian(uint64(\"extent_length_alloc\", \"Length\"), ENC_LITTLE_ENDIAN),",
          "",
          "---------------",
          "--- Hunk 50 ---",
          "[Context before]",
          "5861: static void ncp_postseq_cleanup(void);",
          "5866: #define NO_ENDIANNESS   0",
          "5868: #define NO_LENGTH       -1",
          "",
          "[Removed Lines]",
          "5864: #define BE              0",
          "5865: #define LE              1",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 51 ---",
          "[Context before]",
          "6664:             print('    \"%s\"' % (pkt.req_info_str[2],))",
          "6665:             print(\"};\\n\")",
          "6669:     # Print ncp_record packet records",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6669:     print(\"/* Forward declaration of expert info functions defined in ncp2222.inc */\")",
          "6670:     for pkt in packets:",
          "6671:         if pkt.expert_func:",
          "6672:             print(\"static void %s_expert_func(ptvcursor_t *ptvc, packet_info *pinfo, const ncp_record *ncp_rec, gboolean request);\" % pkt.expert_func)",
          "",
          "---------------",
          "--- Hunk 52 ---",
          "[Context before]",
          "6726:         else:",
          "6727:             req_info_str = \"NULL\"",
          "6730:                 (ptvc_request, ptvc_reply, errors.Name(), req_conds,",
          "6734:     print(\"};\\n\")",
          "6736:     print(\"/* ncp funcs that require a subfunc */\")",
          "",
          "[Removed Lines]",
          "6729:         print('        %s, %s, %s, %s, %s, %s },\\n' % \\",
          "6731:                 req_cond_size, req_info_str))",
          "6733:     print('    { 0, 0, 0, NULL, 0, NULL, NULL, NULL, NULL, NO_REQ_COND_SIZE, NULL }')",
          "",
          "[Added Lines]",
          "6735:         if pkt.expert_func:",
          "6736:             expert_func = \"&\" + pkt.expert_func + \"_expert_func\"",
          "6737:         else:",
          "6738:             expert_func = \"NULL\"",
          "6740:         print('        %s, %s, %s, %s, %s, %s, %s },\\n' % \\",
          "6742:                 req_cond_size, req_info_str, expert_func))",
          "6744:     print('    { 0, 0, 0, NULL, 0, NULL, NULL, NULL, NULL, NO_REQ_COND_SIZE, NULL, NULL }')",
          "",
          "---------------",
          "--- Hunk 53 ---",
          "[Context before]",
          "8570:     pkt.Request( (12, 267), [",
          "8571:             rec( 7, 1, DirHandle ),",
          "8572:             rec( 8, 1, LockFlag ),",
          "8574:             rec( 11, (1, 256), FilePath ),",
          "8575:     ])",
          "8576:     pkt.Reply(8)",
          "",
          "[Removed Lines]",
          "8573:             rec( 9, 2, TimeoutLimit, BE ),",
          "",
          "[Added Lines]",
          "8584:             rec( 9, 2, TimeoutLimit, ENC_BIG_ENDIAN ),",
          "",
          "---------------",
          "--- Hunk 54 ---",
          "[Context before]",
          "8617:     pkt = NCP(0x09, \"Log Logical Record\", 'sync')",
          "8618:     pkt.Request( (11, 138), [",
          "8619:             rec( 7, 1, LockFlag ),",
          "8621:             rec( 10, (1, 128), LogicalRecordName ),",
          "8622:     ], info_str=(LogicalRecordName, \"Log Logical Record: %s\", \", %s\"))",
          "8623:     pkt.Reply(8)",
          "",
          "[Removed Lines]",
          "8620:             rec( 8, 2, TimeoutLimit, BE ),",
          "",
          "[Added Lines]",
          "8631:             rec( 8, 2, TimeoutLimit, ENC_BIG_ENDIAN ),",
          "",
          "---------------",
          "--- Hunk 55 ---",
          "[Context before]",
          "8740:             rec( 10, 1, TargetPrinter ),",
          "8741:     ])",
          "8742:     pkt.Reply( 12, [",
          "8744:     ])",
          "8745:     pkt.CompletionCodes([0x0000, 0x9600, 0xff06])",
          "",
          "[Removed Lines]",
          "8743:             rec( 8, 4, ObjectID, BE ),",
          "",
          "[Added Lines]",
          "8754:             rec( 8, 4, ObjectID, ENC_BIG_ENDIAN ),",
          "",
          "---------------",
          "--- Hunk 56 ---",
          "[Context before]",
          "8750:             rec( 7, 1, VolumeNumber )",
          "8751:     ],info_str=(VolumeNumber, \"Get Volume Information for Volume %d\", \", %d\"))",
          "8752:     pkt.Reply( 36, [",
          "8758:             rec( 18, 16, VolumeName ),",
          "8760:     ])",
          "8761:     pkt.CompletionCodes([0x0000, 0x9804])",
          "",
          "[Removed Lines]",
          "8753:             rec( 8, 2, SectorsPerCluster, BE ),",
          "8754:             rec( 10, 2, TotalVolumeClusters, BE ),",
          "8755:             rec( 12, 2, AvailableClusters, BE ),",
          "8756:             rec( 14, 2, TotalDirectorySlots, BE ),",
          "8757:             rec( 16, 2, AvailableDirectorySlots, BE ),",
          "8759:             rec( 34, 2, RemovableFlag, BE ),",
          "",
          "[Added Lines]",
          "8764:             rec( 8, 2, SectorsPerCluster, ENC_BIG_ENDIAN ),",
          "8765:             rec( 10, 2, TotalVolumeClusters, ENC_BIG_ENDIAN ),",
          "8766:             rec( 12, 2, AvailableClusters, ENC_BIG_ENDIAN ),",
          "8767:             rec( 14, 2, TotalDirectorySlots, ENC_BIG_ENDIAN ),",
          "8768:             rec( 16, 2, AvailableDirectorySlots, ENC_BIG_ENDIAN ),",
          "8770:             rec( 34, 2, RemovableFlag, ENC_BIG_ENDIAN ),",
          "",
          "---------------",
          "--- Hunk 57 ---",
          "[Context before]",
          "8826:     # 2222/150A, 21/10",
          "8827:     pkt = NCP(0x150A, \"Send Broadcast Message\", 'message')",
          "8828:     pkt.Request((17, 74), [",
          "8831:             rec( 16, (1, 58), TargetMessage ),",
          "8832:     ], info_str=(TargetMessage, \"Send Broadcast Message: %s\", \", %s\"))",
          "8833:     pkt.Reply(14, [",
          "8836:     ])",
          "8837:     pkt.CompletionCodes([0x0000, 0xfd00])",
          "",
          "[Removed Lines]",
          "8829:             rec( 10, 2, ClientListCount, LE, var=\"x\" ),",
          "8830:             rec( 12, 4, ClientList, LE, repeat=\"x\" ),",
          "8834:             rec( 8, 2, ClientListCount, LE, var=\"x\" ),",
          "8835:             rec( 10, 4, ClientCompFlag, LE, repeat=\"x\" ),",
          "",
          "[Added Lines]",
          "8840:             rec( 10, 2, ClientListCount, ENC_LITTLE_ENDIAN, var=\"x\" ),",
          "8841:             rec( 12, 4, ClientList, ENC_LITTLE_ENDIAN, repeat=\"x\" ),",
          "8845:             rec( 8, 2, ClientListCount, ENC_LITTLE_ENDIAN, var=\"x\" ),",
          "8846:             rec( 10, 4, ClientCompFlag, ENC_LITTLE_ENDIAN, repeat=\"x\" ),",
          "",
          "---------------",
          "--- Hunk 58 ---",
          "[Context before]",
          "8849:     pkt.Request(22, [",
          "8850:             rec( 10, 1, ConnectionControlBits ),",
          "8851:             rec( 11, 3, Reserved3 ),",
          "8854:     ])",
          "8855:     pkt.Reply(8)",
          "8856:     pkt.CompletionCodes([0x0000, 0xff00])",
          "",
          "[Removed Lines]",
          "8852:             rec( 14, 4, ConnectionListCount, LE, var=\"x\" ),",
          "8853:             rec( 18, 4, ConnectionList, LE, repeat=\"x\" ),",
          "",
          "[Added Lines]",
          "8863:             rec( 14, 4, ConnectionListCount, ENC_LITTLE_ENDIAN, var=\"x\" ),",
          "8864:             rec( 18, 4, ConnectionList, ENC_LITTLE_ENDIAN, repeat=\"x\" ),",
          "",
          "---------------",
          "--- Hunk 59 ---",
          "[Context before]",
          "8881:     pkt = NCP(0x1602, \"Scan Directory Information\", 'file')",
          "8882:     pkt.Request((14,268), [",
          "8883:             rec( 10, 1, DirHandle ),",
          "8885:             rec( 13, (1, 255), Path ),",
          "8886:     ], info_str=(Path, \"Scan Directory Information: %s\", \", %s\"))",
          "8887:     pkt.Reply(36, [",
          "8888:             rec( 8, 16, DirectoryPath ),",
          "8892:             rec( 32, 1, AccessRightsMask ),",
          "8893:             rec( 33, 1, Reserved ),",
          "8895:     ])",
          "8896:     pkt.CompletionCodes([0x0000, 0x9600, 0x9804, 0x9b03, 0x9c03, 0xa100, 0xfa00,",
          "8897:                          0xfd00, 0xff00])",
          "",
          "[Removed Lines]",
          "8884:             rec( 11, 2, StartingSearchNumber, BE ),",
          "8889:             rec( 24, 2, CreationDate, BE ),",
          "8890:             rec( 26, 2, CreationTime, BE ),",
          "8891:             rec( 28, 4, CreatorID, BE ),",
          "8894:             rec( 34, 2, NextSearchNumber, BE ),",
          "",
          "[Added Lines]",
          "8895:             rec( 11, 2, StartingSearchNumber, ENC_BIG_ENDIAN ),",
          "8900:             rec( 24, 2, CreationDate, ENC_BIG_ENDIAN ),",
          "8901:             rec( 26, 2, CreationTime, ENC_BIG_ENDIAN ),",
          "8902:             rec( 28, 4, CreatorID, ENC_BIG_ENDIAN ),",
          "8905:             rec( 34, 2, NextSearchNumber, ENC_BIG_ENDIAN ),",
          "",
          "---------------",
          "--- Hunk 60 ---",
          "[Context before]",
          "8971:     ], info_str=(Path, \"Scan Directory for Trustees: %s\", \", %s\"))",
          "8972:     pkt.Reply(57, [",
          "8973:             rec( 8, 16, DirectoryPath ),",
          "8976:             rec( 28, 4, CreatorID ),",
          "8982:             rec( 52, 1, AccessRightsMask ),",
          "8983:             rec( 53, 1, AccessRightsMask ),",
          "8984:             rec( 54, 1, AccessRightsMask ),",
          "",
          "[Removed Lines]",
          "8974:             rec( 24, 2, CreationDate, BE ),",
          "8975:             rec( 26, 2, CreationTime, BE ),",
          "8977:             rec( 32, 4, TrusteeID, BE ),",
          "8978:             rec( 36, 4, TrusteeID, BE ),",
          "8979:             rec( 40, 4, TrusteeID, BE ),",
          "8980:             rec( 44, 4, TrusteeID, BE ),",
          "8981:             rec( 48, 4, TrusteeID, BE ),",
          "",
          "[Added Lines]",
          "8985:             rec( 24, 2, CreationDate, ENC_BIG_ENDIAN ),",
          "8986:             rec( 26, 2, CreationTime, ENC_BIG_ENDIAN ),",
          "8988:             rec( 32, 4, TrusteeID, ENC_BIG_ENDIAN ),",
          "8989:             rec( 36, 4, TrusteeID, ENC_BIG_ENDIAN ),",
          "8990:             rec( 40, 4, TrusteeID, ENC_BIG_ENDIAN ),",
          "8991:             rec( 44, 4, TrusteeID, ENC_BIG_ENDIAN ),",
          "8992:             rec( 48, 4, TrusteeID, ENC_BIG_ENDIAN ),",
          "",
          "---------------",
          "--- Hunk 61 ---",
          "[Context before]",
          "8992:     pkt = NCP(0x160D, \"Add Trustee to Directory\", 'file')",
          "8993:     pkt.Request((17,271), [",
          "8994:             rec( 10, 1, DirHandle ),",
          "8996:             rec( 15, 1, AccessRightsMask ),",
          "8997:             rec( 16, (1, 255), Path ),",
          "8998:     ], info_str=(Path, \"Add Trustee to Directory: %s\", \", %s\"))",
          "",
          "[Removed Lines]",
          "8995:             rec( 11, 4, TrusteeID, BE ),",
          "",
          "[Added Lines]",
          "9006:             rec( 11, 4, TrusteeID, ENC_BIG_ENDIAN ),",
          "",
          "---------------",
          "--- Hunk 62 ---",
          "[Context before]",
          "9004:     pkt = NCP(0x160E, \"Delete Trustee from Directory\", 'file')",
          "9005:     pkt.Request((17,271), [",
          "9006:             rec( 10, 1, DirHandle ),",
          "9008:             rec( 15, 1, Reserved ),",
          "9009:             rec( 16, (1, 255), Path ),",
          "9010:     ], info_str=(Path, \"Delete Trustee from Directory: %s\", \", %s\"))",
          "",
          "[Removed Lines]",
          "9007:             rec( 11, 4, TrusteeID, BE ),",
          "",
          "[Added Lines]",
          "9018:             rec( 11, 4, TrusteeID, ENC_BIG_ENDIAN ),",
          "",
          "---------------",
          "--- Hunk 63 ---",
          "[Context before]",
          "9079:             rec( 10, 1, DirHandle )",
          "9080:     ],info_str=(DirHandle, \"Get Volume Information with Handle %d\", \", %d\"))",
          "9081:     pkt.Reply( 36, [",
          "9087:             rec( 18, 16, VolumeName ),",
          "9089:     ])",
          "9090:     pkt.CompletionCodes([0x0000, 0xff00])",
          "9091:     # 2222/1616, 22/22",
          "",
          "[Removed Lines]",
          "9082:             rec( 8, 2, SectorsPerCluster, BE ),",
          "9083:             rec( 10, 2, TotalVolumeClusters, BE ),",
          "9084:             rec( 12, 2, AvailableClusters, BE ),",
          "9085:             rec( 14, 2, TotalDirectorySlots, BE ),",
          "9086:             rec( 16, 2, AvailableDirectorySlots, BE ),",
          "9088:             rec( 34, 2, RemovableFlag, BE ),",
          "",
          "[Added Lines]",
          "9093:             rec( 8, 2, SectorsPerCluster, ENC_BIG_ENDIAN ),",
          "9094:             rec( 10, 2, TotalVolumeClusters, ENC_BIG_ENDIAN ),",
          "9095:             rec( 12, 2, AvailableClusters, ENC_BIG_ENDIAN ),",
          "9096:             rec( 14, 2, TotalDirectorySlots, ENC_BIG_ENDIAN ),",
          "9097:             rec( 16, 2, AvailableDirectorySlots, ENC_BIG_ENDIAN ),",
          "9099:             rec( 34, 2, RemovableFlag, ENC_BIG_ENDIAN ),",
          "",
          "---------------",
          "--- Hunk 64 ---",
          "[Context before]",
          "9129:             rec( 10, 1, DirHandle ),",
          "9130:             rec( 11, 2, CreationDate ),",
          "9131:             rec( 13, 2, CreationTime ),",
          "9133:             rec( 19, 1, AccessRightsMask ),",
          "9134:             rec( 20, (1,255), Path ),",
          "9135:     ], info_str=(Path, \"Set Directory Information: %s\", \", %s\"))",
          "",
          "[Removed Lines]",
          "9132:             rec( 15, 4, CreatorID, BE ),",
          "",
          "[Added Lines]",
          "9143:             rec( 15, 4, CreatorID, ENC_BIG_ENDIAN ),",
          "",
          "---------------",
          "--- Hunk 65 ---",
          "[Context before]",
          "9164:             rec( 24, 12, FileName12 ),",
          "9165:             rec( 36, 2, CreationTime ),",
          "9166:             rec( 38, 2, CreationDate ),",
          "9168:             rec( 44, 2, ArchivedTime ),",
          "9169:             rec( 46, 2, ArchivedDate ),",
          "9171:             rec( 52, 2, UpdateTime ),",
          "9172:             rec( 54, 2, UpdateDate ),",
          "9175:             rec( 64, 44, Reserved44 ),",
          "9176:             rec( 108, 2, InheritedRightsMask ),",
          "9177:             rec( 110, 2, LastAccessedDate ),",
          "9178:             rec( 112, 4, DeletedFileTime ),",
          "9179:             rec( 116, 2, DeletedTime ),",
          "9180:             rec( 118, 2, DeletedDate ),",
          "9182:             rec( 124, 16, Reserved16 ),",
          "9183:     ])",
          "9184:     pkt.CompletionCodes([0x0000, 0xfb01, 0x9801, 0xff1d])",
          "",
          "[Removed Lines]",
          "9167:             rec( 40, 4, CreatorID, BE ),",
          "9170:             rec( 48, 4, ArchiverID, BE ),",
          "9173:             rec( 56, 4, UpdateID, BE ),",
          "9174:             rec( 60, 4, FileSize, BE ),",
          "9181:             rec( 120, 4, DeletedID, BE ),",
          "",
          "[Added Lines]",
          "9178:             rec( 40, 4, CreatorID, ENC_BIG_ENDIAN ),",
          "9181:             rec( 48, 4, ArchiverID, ENC_BIG_ENDIAN ),",
          "9184:             rec( 56, 4, UpdateID, ENC_BIG_ENDIAN ),",
          "9185:             rec( 60, 4, FileSize, ENC_BIG_ENDIAN ),",
          "9192:             rec( 120, 4, DeletedID, ENC_BIG_ENDIAN ),",
          "",
          "---------------",
          "--- Hunk 66 ---",
          "[Context before]",
          "9212:             rec( 8, 4, SequenceNumber ),",
          "9213:             rec( 12, 4, Subdirectory ),",
          "9214:             rec( 16, 4, AttributesDef32 ),",
          "9216:             rec( 21, 1, PurgeFlags ),",
          "9217:             rec( 22, 1, DestNameSpace ),",
          "9218:             rec( 23, 1, NameLen ),",
          "9219:             rec( 24, 12, Name12 ),",
          "9220:             rec( 36, 2, CreationTime ),",
          "9221:             rec( 38, 2, CreationDate ),",
          "9223:             rec( 44, 2, ArchivedTime ),",
          "9224:             rec( 46, 2, ArchivedDate ),",
          "9226:             rec( 52, 2, UpdateTime ),",
          "9227:             rec( 54, 2, UpdateDate ),",
          "9230:             rec( 64, 44, Reserved44 ),",
          "9231:             rec( 108, 2, InheritedRightsMask ),",
          "9232:             rec( 110, 2, LastAccessedDate ),",
          "",
          "[Removed Lines]",
          "9215:             rec( 20, 1, UniqueID, LE ),",
          "9222:             rec( 40, 4, CreatorID, BE ),",
          "9225:             rec( 48, 4, ArchiverID, BE ),",
          "9228:             rec( 56, 4, UpdateID, BE ),",
          "9229:             rec( 60, 4, FileSize, BE ),",
          "",
          "[Added Lines]",
          "9226:             rec( 20, 1, UniqueID, ENC_LITTLE_ENDIAN ),",
          "9233:             rec( 40, 4, CreatorID, ENC_BIG_ENDIAN ),",
          "9236:             rec( 48, 4, ArchiverID, ENC_BIG_ENDIAN ),",
          "9239:             rec( 56, 4, UpdateID, ENC_BIG_ENDIAN ),",
          "9240:             rec( 60, 4, FileSize, ENC_BIG_ENDIAN ),",
          "",
          "---------------",
          "--- Hunk 67 ---",
          "[Context before]",
          "9241:     pkt.Reply(136, [",
          "9242:             rec( 8, 4, Subdirectory ),",
          "9243:             rec( 12, 4, AttributesDef32 ),",
          "9245:             rec( 17, 1, PurgeFlags ),",
          "9246:             rec( 18, 1, DestNameSpace ),",
          "9247:             rec( 19, 1, NameLen ),",
          "9248:             rec( 20, 12, Name12 ),",
          "9249:             rec( 32, 2, CreationTime ),",
          "9250:             rec( 34, 2, CreationDate ),",
          "9252:             rec( 40, 2, ArchivedTime ),",
          "9253:             rec( 42, 2, ArchivedDate ),",
          "9255:             rec( 48, 2, UpdateTime ),",
          "9256:             rec( 50, 2, UpdateDate ),",
          "9258:             rec( 56, 48, Reserved48 ),",
          "9259:             rec( 104, 2, MaximumSpace ),",
          "9260:             rec( 106, 2, InheritedRightsMask ),",
          "",
          "[Removed Lines]",
          "9244:             rec( 16, 1, UniqueID, LE ),",
          "9251:             rec( 36, 4, CreatorID, BE ),",
          "9254:             rec( 44, 4, ArchiverID, BE ),",
          "9257:             rec( 52, 4, NextTrusteeEntry, BE ),",
          "",
          "[Added Lines]",
          "9255:             rec( 16, 1, UniqueID, ENC_LITTLE_ENDIAN ),",
          "9262:             rec( 36, 4, CreatorID, ENC_BIG_ENDIAN ),",
          "9265:             rec( 44, 4, ArchiverID, ENC_BIG_ENDIAN ),",
          "9268:             rec( 52, 4, NextTrusteeEntry, ENC_BIG_ENDIAN ),",
          "",
          "---------------",
          "--- Hunk 68 ---",
          "[Context before]",
          "9364:     pkt = NCP(0x1627, \"Add Extended Trustee to Directory or File\", 'file')",
          "9365:     pkt.Request((18,272), [",
          "9366:             rec( 10, 1, DirHandle ),",
          "9368:             rec( 15, 2, TrusteeRights ),",
          "9369:             rec( 17, (1, 255), Path ),",
          "9370:     ], info_str=(Path, \"Add Extended Trustee: %s\", \", %s\"))",
          "",
          "[Removed Lines]",
          "9367:             rec( 11, 4, ObjectID, BE ),",
          "",
          "[Added Lines]",
          "9378:             rec( 11, 4, ObjectID, ENC_BIG_ENDIAN ),",
          "",
          "---------------",
          "--- Hunk 69 ---",
          "[Context before]",
          "9389:             rec( 24, 12, Name12 ),",
          "9390:             rec( 36, 2, CreationTime ),",
          "9391:             rec( 38, 2, CreationDate ),",
          "9393:             rec( 44, 2, ArchivedTime ),",
          "9394:             rec( 46, 2, ArchivedDate ),",
          "9396:             rec( 52, 2, UpdateTime ),",
          "9397:             rec( 54, 2, UpdateDate ),",
          "9402:             rec( 72, 36, Reserved36 ),",
          "9403:             rec( 108, 2, InheritedRightsMask ),",
          "9404:             rec( 110, 2, LastAccessedDate ),",
          "9405:             rec( 112, 4, DeletedFileTime ),",
          "9406:             rec( 116, 2, DeletedTime ),",
          "9407:             rec( 118, 2, DeletedDate ),",
          "9409:             rec( 124, 8, Undefined8 ),",
          "9414:     ])",
          "9415:     pkt.CompletionCodes([0x0000, 0x8900, 0x9c03, 0xfb01, 0xff00])",
          "9416:     # 2222/1629, 22/41",
          "9417:     pkt = NCP(0x1629, \"Get Object Disk Usage and Restrictions\", 'file')",
          "9418:     pkt.Request(15, [",
          "9419:             rec( 10, 1, VolumeNumber ),",
          "9421:     ])",
          "9422:     pkt.Reply(16, [",
          "9423:             rec( 8, 4, Restriction ),",
          "",
          "[Removed Lines]",
          "9392:             rec( 40, 4, CreatorID, BE ),",
          "9395:             rec( 48, 4, ArchiverID, BE ),",
          "9398:             rec( 56, 4, UpdateID, BE ),",
          "9399:             rec( 60, 4, DataForkSize, BE ),",
          "9400:             rec( 64, 4, DataForkFirstFAT, BE ),",
          "9401:             rec( 68, 4, NextTrusteeEntry, BE ),",
          "9408:             rec( 120, 4, DeletedID, BE ),",
          "9410:             rec( 132, 4, PrimaryEntry, LE ),",
          "9411:             rec( 136, 4, NameList, LE ),",
          "9412:             rec( 140, 4, OtherFileForkSize, BE ),",
          "9413:             rec( 144, 4, OtherFileForkFAT, BE ),",
          "9420:             rec( 11, 4, ObjectID, LE ),",
          "",
          "[Added Lines]",
          "9403:             rec( 40, 4, CreatorID, ENC_BIG_ENDIAN ),",
          "9406:             rec( 48, 4, ArchiverID, ENC_BIG_ENDIAN ),",
          "9409:             rec( 56, 4, UpdateID, ENC_BIG_ENDIAN ),",
          "9410:             rec( 60, 4, DataForkSize, ENC_BIG_ENDIAN ),",
          "9411:             rec( 64, 4, DataForkFirstFAT, ENC_BIG_ENDIAN ),",
          "9412:             rec( 68, 4, NextTrusteeEntry, ENC_BIG_ENDIAN ),",
          "9419:             rec( 120, 4, DeletedID, ENC_BIG_ENDIAN ),",
          "9421:             rec( 132, 4, PrimaryEntry, ENC_LITTLE_ENDIAN ),",
          "9422:             rec( 136, 4, NameList, ENC_LITTLE_ENDIAN ),",
          "9423:             rec( 140, 4, OtherFileForkSize, ENC_BIG_ENDIAN ),",
          "9424:             rec( 144, 4, OtherFileForkFAT, ENC_BIG_ENDIAN ),",
          "9431:             rec( 11, 4, ObjectID, ENC_LITTLE_ENDIAN ),",
          "",
          "---------------",
          "--- Hunk 70 ---",
          "[Context before]",
          "9438:     pkt = NCP(0x162B, \"Remove Extended Trustee from Dir or File\", 'file')",
          "9439:     pkt.Request((17,271), [",
          "9440:             rec( 10, 1, DirHandle ),",
          "9442:             rec( 15, 1, Unused ),",
          "9443:             rec( 16, (1, 255), Path ),",
          "9444:     ], info_str=(Path, \"Remove Extended Trustee from %s\", \", %s\"))",
          "",
          "[Removed Lines]",
          "9441:             rec( 11, 4, ObjectID, BE ),",
          "",
          "[Added Lines]",
          "9452:             rec( 11, 4, ObjectID, ENC_BIG_ENDIAN ),",
          "",
          "---------------",
          "--- Hunk 71 ---",
          "[Context before]",
          "9532:             rec( 24, 12, Name12 ),",
          "9533:             rec( 36, 2, CreationTime ),",
          "9534:             rec( 38, 2, CreationDate ),",
          "9536:             rec( 44, 2, ArchivedTime ),",
          "9537:             rec( 46, 2, ArchivedDate ),",
          "9538:             rec( 48, 4, ArchiverID ),",
          "",
          "[Removed Lines]",
          "9535:             rec( 40, 4, CreatorID, BE ),",
          "",
          "[Added Lines]",
          "9546:             rec( 40, 4, CreatorID, ENC_BIG_ENDIAN ),",
          "",
          "---------------",
          "--- Hunk 72 ---",
          "[Context before]",
          "9555:             rec( 14, (1, 255), FileName ),",
          "9556:     ], info_str=(FileName, \"Open Data Stream: %s\", \", %s\"))",
          "9557:     pkt.Reply( 12, [",
          "9559:     ])",
          "9560:     pkt.CompletionCodes([0x0000, 0x8000, 0x8200, 0x9002, 0xbe00, 0xff00])",
          "9561:     # 2222/1632, 22/50",
          "9562:     pkt = NCP(0x1632, \"Get Object Effective Rights for Directory Entry\", 'file')",
          "9563:     pkt.Request( (16,270), [",
          "9565:             rec( 14, 1, DirHandle ),",
          "9566:             rec( 15, (1, 255), Path ),",
          "9567:     ], info_str=(Path, \"Get Object Effective Rights: %s\", \", %s\"))",
          "",
          "[Removed Lines]",
          "9558:             rec( 8, 4, CCFileHandle, BE ),",
          "9564:             rec( 10, 4, ObjectID, BE ),",
          "",
          "[Added Lines]",
          "9569:             rec( 8, 4, CCFileHandle, ENC_BIG_ENDIAN ),",
          "9575:             rec( 10, 4, ObjectID, ENC_BIG_ENDIAN ),",
          "",
          "---------------",
          "--- Hunk 73 ---",
          "[Context before]",
          "9580:             rec( 138, (1,128), VolumeNameLen ),",
          "9581:     ])",
          "9582:     pkt.CompletionCodes([0x0000, 0x7e01, 0x9804, 0xfb08, 0xff00])",
          "9583:     # 2222/1634, 22/52",
          "9584:     pkt = NCP(0x1634, \"Get Mount Volume List\", 'file')",
          "9585:     pkt.Request( 22, [",
          "9586:             rec( 10, 4, StartVolumeNumber ),",
          "9588:             rec( 18, 4, SrcNameSpace ),",
          "9589:     ])",
          "9590:     pkt.Reply( NO_LENGTH_CHECK, [",
          "",
          "[Removed Lines]",
          "9587:             rec( 14, 4, VolumeRequestFlags, LE ),",
          "",
          "[Added Lines]",
          "9594:     pkt.MakeExpert(\"ncp1633_reply\")",
          "9599:             rec( 14, 4, VolumeRequestFlags, ENC_LITTLE_ENDIAN ),",
          "",
          "---------------",
          "--- Hunk 74 ---",
          "[Context before]",
          "9614:     pkt = NCP(0x1636, \"Add User Disk Space Restriction 64 Bit Aware\", 'file')",
          "9615:     pkt.Request(26, [",
          "9616:             rec( 10, 4, VolumeNumberLong ),",
          "9618:             rec( 18, 8, DiskSpaceLimit64 ),",
          "9619:     ])",
          "9620:     pkt.Reply(8)",
          "",
          "[Removed Lines]",
          "9617:             rec( 14, 4, ObjectID, LE ),",
          "",
          "[Added Lines]",
          "9629:             rec( 14, 4, ObjectID, ENC_LITTLE_ENDIAN ),",
          "",
          "---------------",
          "--- Hunk 75 ---",
          "[Context before]",
          "9623:     pkt = NCP(0x1637, \"Get Object Disk Usage and Restrictions 64 Bit Aware\", 'file')",
          "9624:     pkt.Request(18, [",
          "9625:             rec( 10, 4, VolumeNumberLong ),",
          "9627:     ])",
          "9628:     pkt.Reply(24, [",
          "9629:             rec( 8, 8, RestrictionQuad ),",
          "",
          "[Removed Lines]",
          "9626:             rec( 14, 4, ObjectID, LE ),",
          "",
          "[Added Lines]",
          "9638:             rec( 14, 4, ObjectID, ENC_LITTLE_ENDIAN ),",
          "",
          "---------------",
          "--- Hunk 76 ---",
          "[Context before]",
          "9711:             rec( 10, (1,16), UserName ),",
          "9712:     ], info_str=(UserName, \"Get User Number: %s\", \", %s\"))",
          "9713:     pkt.Reply( 12, [",
          "9715:     ])",
          "9716:     pkt.CompletionCodes([0x0000, 0x9600, 0xf001, 0xfc06, 0xfe07, 0xff00])",
          "9717:     # 2222/1705, 23/05",
          "",
          "[Removed Lines]",
          "9714:             rec( 8, 4, ObjectID, BE ),",
          "",
          "[Added Lines]",
          "9726:             rec( 8, 4, ObjectID, ENC_BIG_ENDIAN ),",
          "",
          "---------------",
          "--- Hunk 77 ---",
          "[Context before]",
          "9723:             rec( 8, 16, UserName16 ),",
          "9724:             rec( 24, 7, LoginTime ),",
          "9725:             rec( 31, 39, FullName ),",
          "9727:             rec( 74, 128, SecurityEquivalentList ),",
          "9728:             rec( 202, 64, Reserved64 ),",
          "9729:     ])",
          "",
          "[Removed Lines]",
          "9726:             rec( 70, 4, UserID, BE ),",
          "",
          "[Added Lines]",
          "9738:             rec( 70, 4, UserID, ENC_BIG_ENDIAN ),",
          "",
          "---------------",
          "--- Hunk 78 ---",
          "[Context before]",
          "9731:     # 2222/1707, 23/07",
          "9732:     pkt = NCP(0x1707, \"Get Group Number\", 'bindery')",
          "9733:     pkt.Request( 14, [",
          "9735:     ])",
          "9736:     pkt.Reply( 62, [",
          "9739:             rec( 14, 48, ObjectNameLen ),",
          "9740:     ])",
          "9741:     pkt.CompletionCodes([0x0000, 0x9602, 0xf101, 0xfc06, 0xfe07, 0xff00])",
          "",
          "[Removed Lines]",
          "9734:             rec( 10, 4, ObjectID, BE ),",
          "9737:             rec( 8, 4, ObjectID, BE ),",
          "9738:             rec( 12, 2, ObjectType, BE ),",
          "",
          "[Added Lines]",
          "9746:             rec( 10, 4, ObjectID, ENC_BIG_ENDIAN ),",
          "9749:             rec( 8, 4, ObjectID, ENC_BIG_ENDIAN ),",
          "9750:             rec( 12, 2, ObjectType, ENC_BIG_ENDIAN ),",
          "",
          "---------------",
          "--- Hunk 79 ---",
          "[Context before]",
          "9759:     pkt = NCP(0x170E, \"Get Disk Utilization\", 'fileserver')",
          "9760:     pkt.Request( 15, [",
          "9761:             rec( 10, 1, VolumeNumber ),",
          "9763:     ])",
          "9764:     pkt.Reply( 19, [",
          "9765:             rec( 8, 1, VolumeNumber ),",
          "9770:     ])",
          "9771:     pkt.CompletionCodes([0x0000, 0x9600, 0x9804, 0xa100, 0xf200])",
          "9772:     # 2222/170F, 23/15",
          "",
          "[Removed Lines]",
          "9762:             rec( 11, 4, TrusteeID, BE ),",
          "9766:             rec( 9, 4, TrusteeID, BE ),",
          "9767:             rec( 13, 2, DirectoryCount, BE ),",
          "9768:             rec( 15, 2, FileCount, BE ),",
          "9769:             rec( 17, 2, ClusterCount, BE ),",
          "",
          "[Added Lines]",
          "9774:             rec( 11, 4, TrusteeID, ENC_BIG_ENDIAN ),",
          "9778:             rec( 9, 4, TrusteeID, ENC_BIG_ENDIAN ),",
          "9779:             rec( 13, 2, DirectoryCount, ENC_BIG_ENDIAN ),",
          "9780:             rec( 15, 2, FileCount, ENC_BIG_ENDIAN ),",
          "9781:             rec( 17, 2, ClusterCount, ENC_BIG_ENDIAN ),",
          "",
          "---------------",
          "--- Hunk 80 ---",
          "[Context before]",
          "9781:             rec( 8, 2, NextSearchIndex ),",
          "9782:             rec( 10, 14, FileName14 ),",
          "9783:             rec( 24, 2, AttributesDef16 ),",
          "9792:             rec( 46, 56, Reserved56 ),",
          "9793:     ])",
          "9794:     pkt.CompletionCodes([0x0000, 0x8800, 0x8900, 0x9300, 0x9400, 0x9804, 0x9b00, 0x9c00,",
          "",
          "[Removed Lines]",
          "9784:             rec( 26, 4, FileSize, BE ),",
          "9785:             rec( 30, 2, CreationDate, BE ),",
          "9786:             rec( 32, 2, LastAccessedDate, BE ),",
          "9787:             rec( 34, 2, ModifiedDate, BE ),",
          "9788:             rec( 36, 2, ModifiedTime, BE ),",
          "9789:             rec( 38, 4, CreatorID, BE ),",
          "9790:             rec( 42, 2, ArchivedDate, BE ),",
          "9791:             rec( 44, 2, ArchivedTime, BE ),",
          "",
          "[Added Lines]",
          "9796:             rec( 26, 4, FileSize, ENC_BIG_ENDIAN ),",
          "9797:             rec( 30, 2, CreationDate, ENC_BIG_ENDIAN ),",
          "9798:             rec( 32, 2, LastAccessedDate, ENC_BIG_ENDIAN ),",
          "9799:             rec( 34, 2, ModifiedDate, ENC_BIG_ENDIAN ),",
          "9800:             rec( 36, 2, ModifiedTime, ENC_BIG_ENDIAN ),",
          "9801:             rec( 38, 4, CreatorID, ENC_BIG_ENDIAN ),",
          "9802:             rec( 42, 2, ArchivedDate, ENC_BIG_ENDIAN ),",
          "9803:             rec( 44, 2, ArchivedTime, ENC_BIG_ENDIAN ),",
          "",
          "---------------",
          "--- Hunk 81 ---",
          "[Context before]",
          "9797:     pkt = NCP(0x1710, \"Set File Information\", 'file')",
          "9798:     pkt.Request((91,345), [",
          "9799:             rec( 10, 2, AttributesDef16 ),",
          "9808:             rec( 32, 56, Reserved56 ),",
          "9809:             rec( 88, 1, DirHandle ),",
          "9810:             rec( 89, 1, SearchAttributes ),",
          "",
          "[Removed Lines]",
          "9800:             rec( 12, 4, FileSize, BE ),",
          "9801:             rec( 16, 2, CreationDate, BE ),",
          "9802:             rec( 18, 2, LastAccessedDate, BE ),",
          "9803:             rec( 20, 2, ModifiedDate, BE ),",
          "9804:             rec( 22, 2, ModifiedTime, BE ),",
          "9805:             rec( 24, 4, CreatorID, BE ),",
          "9806:             rec( 28, 2, ArchivedDate, BE ),",
          "9807:             rec( 30, 2, ArchivedTime, BE ),",
          "",
          "[Added Lines]",
          "9812:             rec( 12, 4, FileSize, ENC_BIG_ENDIAN ),",
          "9813:             rec( 16, 2, CreationDate, ENC_BIG_ENDIAN ),",
          "9814:             rec( 18, 2, LastAccessedDate, ENC_BIG_ENDIAN ),",
          "9815:             rec( 20, 2, ModifiedDate, ENC_BIG_ENDIAN ),",
          "9816:             rec( 22, 2, ModifiedTime, ENC_BIG_ENDIAN ),",
          "9817:             rec( 24, 4, CreatorID, ENC_BIG_ENDIAN ),",
          "9818:             rec( 28, 2, ArchivedDate, ENC_BIG_ENDIAN ),",
          "9819:             rec( 30, 2, ArchivedTime, ENC_BIG_ENDIAN ),",
          "",
          "---------------",
          "--- Hunk 82 ---",
          "[Context before]",
          "9821:             rec( 8, 48, ServerName ),",
          "9822:             rec( 56, 1, OSMajorVersion ),",
          "9823:             rec( 57, 1, OSMinorVersion ),",
          "9827:             rec( 64, 1, OSRevision ),",
          "9828:             rec( 65, 1, SFTSupportLevel ),",
          "9829:             rec( 66, 1, TTSLevel ),",
          "9831:             rec( 69, 1, AccountVersion ),",
          "9832:             rec( 70, 1, VAPVersion ),",
          "9833:             rec( 71, 1, QueueingVersion ),",
          "",
          "[Removed Lines]",
          "9824:             rec( 58, 2, ConnectionsSupportedMax, BE ),",
          "9825:             rec( 60, 2, ConnectionsInUse, BE ),",
          "9826:             rec( 62, 2, VolumesSupportedMax, BE ),",
          "9830:             rec( 67, 2, ConnectionsMaxUsed, BE ),",
          "",
          "[Added Lines]",
          "9836:             rec( 58, 2, ConnectionsSupportedMax, ENC_BIG_ENDIAN ),",
          "9837:             rec( 60, 2, ConnectionsInUse, ENC_BIG_ENDIAN ),",
          "9838:             rec( 62, 2, VolumesSupportedMax, ENC_BIG_ENDIAN ),",
          "9842:             rec( 67, 2, ConnectionsMaxUsed, ENC_BIG_ENDIAN ),",
          "",
          "---------------",
          "--- Hunk 83 ---",
          "[Context before]",
          "9837:             rec( 75, 1, InternetBridgeVersion ),",
          "9838:             rec( 76, 1, MixedModePathFlag ),",
          "9839:             rec( 77, 1, LocalLoginInfoCcode ),",
          "9844:             rec( 85, 1, SixtyFourBitOffsetsSupportedFlag ),",
          "9845:             rec( 86, 1, OESServer ),",
          "9846:             rec( 87, 1, OESLinuxOrNetWare ),",
          "9847:             rec( 88, 48, Reserved48 ),",
          "9848:     ])",
          "9849:     pkt.CompletionCodes([0x0000, 0x9600])",
          "9850:     # 2222/1712, 23/18",
          "9851:     pkt = NCP(0x1712, \"Get Network Serial Number\", 'fileserver')",
          "",
          "[Removed Lines]",
          "9840:             rec( 78, 2, ProductMajorVersion, BE ),",
          "9841:             rec( 80, 2, ProductMinorVersion, BE ),",
          "9842:             rec( 82, 2, ProductRevisionVersion, BE ),",
          "9843:             rec( 84, 1, OSLanguageID, LE ),",
          "",
          "[Added Lines]",
          "9852:             rec( 78, 2, ProductMajorVersion, ENC_BIG_ENDIAN ),",
          "9853:             rec( 80, 2, ProductMinorVersion, ENC_BIG_ENDIAN ),",
          "9854:             rec( 82, 2, ProductRevisionVersion, ENC_BIG_ENDIAN ),",
          "9855:             rec( 84, 1, OSLanguageID, ENC_LITTLE_ENDIAN ),",
          "9861:     pkt.MakeExpert(\"ncp1711_reply\")",
          "",
          "---------------",
          "--- Hunk 84 ---",
          "[Context before]",
          "9861:             rec( 10, 1, TargetConnectionNumber ),",
          "9862:     ],info_str=(TargetConnectionNumber, \"Get Internet Address for Connection %d\", \", %d\"))",
          "9863:     pkt.Reply(20, [",
          "9865:             rec( 12, 6, NetworkNodeAddress ),",
          "9867:     ])",
          "9868:     pkt.CompletionCodes([0x0000, 0xff00])",
          "9869:     # 2222/1714, 23/20",
          "9870:     pkt = NCP(0x1714, \"Login Object\", 'connection')",
          "9871:     pkt.Request( (14, 60), [",
          "9873:             rec( 12, (1,16), ClientName ),",
          "9874:             rec( -1, (1,32), Password ),",
          "9875:     ], info_str=(UserName, \"Login Object: %s\", \", %s\"))",
          "",
          "[Removed Lines]",
          "9864:             rec( 8, 4, NetworkAddress, BE ),",
          "9866:             rec( 18, 2, NetworkSocket, BE ),",
          "9872:             rec( 10, 2, ObjectType, BE ),",
          "",
          "[Added Lines]",
          "9877:             rec( 8, 4, NetworkAddress, ENC_BIG_ENDIAN ),",
          "9879:             rec( 18, 2, NetworkSocket, ENC_BIG_ENDIAN ),",
          "9885:             rec( 10, 2, ObjectType, ENC_BIG_ENDIAN ),",
          "",
          "---------------",
          "--- Hunk 85 ---",
          "[Context before]",
          "9881:     # 2222/1715, 23/21",
          "9882:     pkt = NCP(0x1715, \"Get Object Connection List\", 'connection')",
          "9883:     pkt.Request( (13, 28), [",
          "9885:             rec( 12, (1,16), ObjectName ),",
          "9886:     ], info_str=(UserName, \"Get Object Connection List: %s\", \", %s\"))",
          "9887:     pkt.Reply( (9, 136), [",
          "",
          "[Removed Lines]",
          "9884:             rec( 10, 2, ObjectType, BE ),",
          "",
          "[Added Lines]",
          "9897:             rec( 10, 2, ObjectType, ENC_BIG_ENDIAN ),",
          "",
          "---------------",
          "--- Hunk 86 ---",
          "[Context before]",
          "9894:             rec( 10, 1, TargetConnectionNumber ),",
          "9895:     ])",
          "9896:     pkt.Reply( 70, [",
          "9899:             rec( 14, 48, ObjectNameLen ),",
          "9900:             rec( 62, 7, LoginTime ),",
          "9901:             rec( 69, 1, Reserved ),",
          "",
          "[Removed Lines]",
          "9897:             rec( 8, 4, UserID, BE ),",
          "9898:             rec( 12, 2, ObjectType, BE ),",
          "",
          "[Added Lines]",
          "9910:             rec( 8, 4, UserID, ENC_BIG_ENDIAN ),",
          "9911:             rec( 12, 2, ObjectType, ENC_BIG_ENDIAN ),",
          "",
          "---------------",
          "--- Hunk 87 ---",
          "[Context before]",
          "9912:     pkt = NCP(0x1718, \"Keyed Object Login\", 'connection')",
          "9913:     pkt.Request( (21, 68), [",
          "9914:             rec( 10, 8, LoginKey ),",
          "9916:             rec( 20, (1,48), ObjectName ),",
          "9917:     ], info_str=(ObjectName, \"Keyed Object Login: %s\", \", %s\"))",
          "9918:     pkt.Reply(8)",
          "",
          "[Removed Lines]",
          "9915:             rec( 18, 2, ObjectType, BE ),",
          "",
          "[Added Lines]",
          "9928:             rec( 18, 2, ObjectType, ENC_BIG_ENDIAN ),",
          "",
          "---------------",
          "--- Hunk 88 ---",
          "[Context before]",
          "9930:     pkt = NCP(0x171B, \"Get Object Connection List\", 'connection')",
          "9931:     pkt.Request( (17,64), [",
          "9932:             rec( 10, 4, SearchConnNumber ),",
          "9934:             rec( 16, (1,48), ObjectName ),",
          "9935:     ], info_str=(ObjectName, \"Get Object Connection List: %s\", \", %s\"))",
          "9936:     pkt.Reply( (13), [",
          "9937:             rec( 8, 1, ConnListLen, var=\"x\" ),",
          "9939:     ])",
          "9940:     pkt.CompletionCodes([0x0000, 0x9600, 0xf001, 0xfc06, 0xfe07, 0xff00])",
          "9941:     # 2222/171C, 23/28",
          "",
          "[Removed Lines]",
          "9933:             rec( 14, 2, ObjectType, BE ),",
          "9938:             rec( 9, 4, ConnectionNumber, LE, repeat=\"x\" ),",
          "",
          "[Added Lines]",
          "9946:             rec( 14, 2, ObjectType, ENC_BIG_ENDIAN ),",
          "9951:             rec( 9, 4, ConnectionNumber, ENC_LITTLE_ENDIAN, repeat=\"x\" ),",
          "",
          "---------------",
          "--- Hunk 89 ---",
          "[Context before]",
          "9944:             rec( 10, 4, TargetConnectionNumber ),",
          "9945:     ])",
          "9946:     pkt.Reply( 70, [",
          "9949:             rec( 14, 48, ObjectNameLen ),",
          "9950:             rec( 62, 7, LoginTime ),",
          "9951:             rec( 69, 1, Reserved ),",
          "",
          "[Removed Lines]",
          "9947:             rec( 8, 4, UserID, BE ),",
          "9948:             rec( 12, 2, ObjectType, BE ),",
          "",
          "[Added Lines]",
          "9960:             rec( 8, 4, UserID, ENC_BIG_ENDIAN ),",
          "9961:             rec( 12, 2, ObjectType, ENC_BIG_ENDIAN ),",
          "",
          "---------------",
          "--- Hunk 90 ---",
          "[Context before]",
          "9968:     # 2222/171F, 23/31",
          "9969:     pkt = NCP(0x171F, \"Get Connection List From Object\", 'connection')",
          "9970:     pkt.Request( 18, [",
          "9972:             rec( 14, 4, ConnectionNumber ),",
          "9973:     ])",
          "9974:     pkt.Reply( (9, 136), [",
          "",
          "[Removed Lines]",
          "9971:             rec( 10, 4, ObjectID, BE ),",
          "",
          "[Added Lines]",
          "9984:             rec( 10, 4, ObjectID, ENC_BIG_ENDIAN ),",
          "",
          "---------------",
          "--- Hunk 91 ---",
          "[Context before]",
          "9978:     # 2222/1720, 23/32",
          "9979:     pkt = NCP(0x1720, \"Scan Bindery Object (List)\", 'bindery')",
          "9980:     pkt.Request((23,70), [",
          "9983:     rec( 16, 2, Reserved2 ),",
          "9984:             rec( 18, 4, InfoFlags ),",
          "9985:             rec( 22, (1,48), ObjectName ),",
          "9986:     ], info_str=(ObjectName, \"Scan Bindery Object: %s\", \", %s\"))",
          "9987:     pkt.Reply(NO_LENGTH_CHECK, [",
          "9988:             rec( 8, 4, ObjectInfoReturnCount ),",
          "9990:             rec( 16, 4, ObjectID ),",
          "9991:             srec(ObjectTypeStruct, req_cond=\"ncp.info_flags_type == TRUE\"),",
          "9992:             srec(ObjectSecurityStruct, req_cond=\"ncp.info_flags_security == TRUE\"),",
          "",
          "[Removed Lines]",
          "9981:             rec( 10, 4, NextObjectID, BE ),",
          "9982:             rec( 14, 2, ObjectType, BE ),",
          "9989:             rec( 12, 4, NextObjectID, BE ),",
          "",
          "[Added Lines]",
          "9994:             rec( 10, 4, NextObjectID, ENC_BIG_ENDIAN ),",
          "9995:             rec( 14, 2, ObjectType, ENC_BIG_ENDIAN ),",
          "10002:             rec( 12, 4, NextObjectID, ENC_BIG_ENDIAN ),",
          "",
          "---------------",
          "--- Hunk 92 ---",
          "[Context before]",
          "10019:     pkt.Request( (15,62), [",
          "10020:             rec( 10, 1, ObjectFlags ),",
          "10021:             rec( 11, 1, ObjectSecurity ),",
          "10023:             rec( 14, (1,48), ObjectName ),",
          "10024:     ], info_str=(ObjectName, \"Create Bindery Object: %s\", \", %s\"))",
          "10025:     pkt.Reply(8)",
          "",
          "[Removed Lines]",
          "10022:             rec( 12, 2, ObjectType, BE ),",
          "",
          "[Added Lines]",
          "10035:             rec( 12, 2, ObjectType, ENC_BIG_ENDIAN ),",
          "",
          "---------------",
          "--- Hunk 93 ---",
          "[Context before]",
          "10028:     # 2222/1733, 23/51",
          "10029:     pkt = NCP(0x1733, \"Delete Bindery Object\", 'bindery')",
          "10030:     pkt.Request( (13,60), [",
          "10032:             rec( 12, (1,48), ObjectName ),",
          "10033:     ], info_str=(ObjectName, \"Delete Bindery Object: %s\", \", %s\"))",
          "10034:     pkt.Reply(8)",
          "",
          "[Removed Lines]",
          "10031:             rec( 10, 2, ObjectType, BE ),",
          "",
          "[Added Lines]",
          "10044:             rec( 10, 2, ObjectType, ENC_BIG_ENDIAN ),",
          "",
          "---------------",
          "--- Hunk 94 ---",
          "[Context before]",
          "10037:     # 2222/1734, 23/52",
          "10038:     pkt = NCP(0x1734, \"Rename Bindery Object\", 'bindery')",
          "10039:     pkt.Request( (14,108), [",
          "10041:             rec( 12, (1,48), ObjectName ),",
          "10042:             rec( -1, (1,48), NewObjectName ),",
          "10043:     ], info_str=(ObjectName, \"Rename Bindery Object: %s\", \", %s\"))",
          "",
          "[Removed Lines]",
          "10040:             rec( 10, 2, ObjectType, BE ),",
          "",
          "[Added Lines]",
          "10053:             rec( 10, 2, ObjectType, ENC_BIG_ENDIAN ),",
          "",
          "---------------",
          "--- Hunk 95 ---",
          "[Context before]",
          "10046:     # 2222/1735, 23/53",
          "10047:     pkt = NCP(0x1735, \"Get Bindery Object ID\", 'bindery')",
          "10048:     pkt.Request((13,60), [",
          "10050:             rec( 12, (1,48), ObjectName ),",
          "10051:     ], info_str=(ObjectName, \"Get Bindery Object: %s\", \", %s\"))",
          "10052:     pkt.Reply(62, [",
          "10055:             rec( 14, 48, ObjectNameLen ),",
          "10056:     ])",
          "10057:     pkt.CompletionCodes([0x0000, 0x9600, 0xef01, 0xf000, 0xfc02, 0xfe01, 0xff00])",
          "10058:     # 2222/1736, 23/54",
          "10059:     pkt = NCP(0x1736, \"Get Bindery Object Name\", 'bindery')",
          "10060:     pkt.Request( 14, [",
          "10062:     ])",
          "10063:     pkt.Reply( 62, [",
          "10066:             rec( 14, 48, ObjectNameLen ),",
          "10067:     ])",
          "10068:     pkt.CompletionCodes([0x0000, 0x9600, 0xf101, 0xfc02, 0xfe01, 0xff00])",
          "10069:     # 2222/1737, 23/55",
          "10070:     pkt = NCP(0x1737, \"Scan Bindery Object\", 'bindery')",
          "10071:     pkt.Request((17,64), [",
          "10074:             rec( 16, (1,48), ObjectName ),",
          "10075:     ], info_str=(ObjectName, \"Scan Bindery Object: %s\", \", %s\"))",
          "10076:     pkt.Reply(65, [",
          "10079:             rec( 14, 48, ObjectNameLen ),",
          "10080:             rec( 62, 1, ObjectFlags ),",
          "10081:             rec( 63, 1, ObjectSecurity ),",
          "",
          "[Removed Lines]",
          "10049:             rec( 10, 2, ObjectType, BE ),",
          "10053:             rec( 8, 4, ObjectID, LE ),",
          "10054:             rec( 12, 2, ObjectType, BE ),",
          "10061:             rec( 10, 4, ObjectID, BE ),",
          "10064:             rec( 8, 4, ObjectID, BE ),",
          "10065:             rec( 12, 2, ObjectType, BE ),",
          "10072:             rec( 10, 4, ObjectID, BE ),",
          "10073:             rec( 14, 2, ObjectType, BE ),",
          "10077:             rec( 8, 4, ObjectID, BE ),",
          "10078:             rec( 12, 2, ObjectType, BE ),",
          "",
          "[Added Lines]",
          "10062:             rec( 10, 2, ObjectType, ENC_BIG_ENDIAN ),",
          "10066:             rec( 8, 4, ObjectID, ENC_LITTLE_ENDIAN ),",
          "10067:             rec( 12, 2, ObjectType, ENC_BIG_ENDIAN ),",
          "10074:             rec( 10, 4, ObjectID, ENC_BIG_ENDIAN ),",
          "10077:             rec( 8, 4, ObjectID, ENC_BIG_ENDIAN ),",
          "10078:             rec( 12, 2, ObjectType, ENC_BIG_ENDIAN ),",
          "10085:             rec( 10, 4, ObjectID, ENC_BIG_ENDIAN ),",
          "10086:             rec( 14, 2, ObjectType, ENC_BIG_ENDIAN ),",
          "10090:             rec( 8, 4, ObjectID, ENC_BIG_ENDIAN ),",
          "10091:             rec( 12, 2, ObjectType, ENC_BIG_ENDIAN ),",
          "",
          "---------------",
          "--- Hunk 96 ---",
          "[Context before]",
          "10087:     pkt = NCP(0x1738, \"Change Bindery Object Security\", 'bindery')",
          "10088:     pkt.Request((14,61), [",
          "10089:             rec( 10, 1, ObjectSecurity ),",
          "10091:             rec( 13, (1,48), ObjectName ),",
          "10092:     ], info_str=(ObjectName, \"Change Bindery Object Security: %s\", \", %s\"))",
          "10093:     pkt.Reply(8)",
          "",
          "[Removed Lines]",
          "10090:             rec( 11, 2, ObjectType, BE ),",
          "",
          "[Added Lines]",
          "10103:             rec( 11, 2, ObjectType, ENC_BIG_ENDIAN ),",
          "",
          "---------------",
          "--- Hunk 97 ---",
          "[Context before]",
          "10095:     # 2222/1739, 23/57",
          "10096:     pkt = NCP(0x1739, \"Create Property\", 'bindery')",
          "10097:     pkt.Request((16,78), [",
          "10099:             rec( 12, (1,48), ObjectName ),",
          "10100:             rec( -1, 1, PropertyType ),",
          "10101:             rec( -1, 1, ObjectSecurity ),",
          "",
          "[Removed Lines]",
          "10098:             rec( 10, 2, ObjectType, BE ),",
          "",
          "[Added Lines]",
          "10111:             rec( 10, 2, ObjectType, ENC_BIG_ENDIAN ),",
          "",
          "---------------",
          "--- Hunk 98 ---",
          "[Context before]",
          "10108:     # 2222/173A, 23/58",
          "10109:     pkt = NCP(0x173A, \"Delete Property\", 'bindery')",
          "10110:     pkt.Request((14,76), [",
          "10112:             rec( 12, (1,48), ObjectName ),",
          "10113:             rec( -1, (1,16), PropertyName ),",
          "10114:     ], info_str=(PropertyName, \"Delete Property: %s\", \", %s\"))",
          "",
          "[Removed Lines]",
          "10111:             rec( 10, 2, ObjectType, BE ),",
          "",
          "[Added Lines]",
          "10124:             rec( 10, 2, ObjectType, ENC_BIG_ENDIAN ),",
          "",
          "---------------",
          "--- Hunk 99 ---",
          "[Context before]",
          "10118:     # 2222/173B, 23/59",
          "10119:     pkt = NCP(0x173B, \"Change Property Security\", 'bindery')",
          "10120:     pkt.Request((15,77), [",
          "10122:             rec( 12, (1,48), ObjectName ),",
          "10123:             rec( -1, 1, ObjectSecurity ),",
          "10124:             rec( -1, (1,16), PropertyName ),",
          "",
          "[Removed Lines]",
          "10121:             rec( 10, 2, ObjectType, BE ),",
          "",
          "[Added Lines]",
          "10134:             rec( 10, 2, ObjectType, ENC_BIG_ENDIAN ),",
          "",
          "---------------",
          "--- Hunk 100 ---",
          "[Context before]",
          "10129:     # 2222/173C, 23/60",
          "10130:     pkt = NCP(0x173C, \"Scan Property\", 'bindery')",
          "10131:     pkt.Request((18,80), [",
          "10133:             rec( 12, (1,48), ObjectName ),",
          "10135:             rec( -1, (1,16), PropertyName ),",
          "10136:     ], info_str=(PropertyName, \"Scan Property: %s\", \", %s\"))",
          "10137:     pkt.Reply( 32, [",
          "10138:             rec( 8, 16, PropertyName16 ),",
          "10139:             rec( 24, 1, ObjectFlags ),",
          "10140:             rec( 25, 1, ObjectSecurity ),",
          "10142:             rec( 30, 1, ValueAvailable ),",
          "10143:             rec( 31, 1, MoreProperties ),",
          "10144:     ])",
          "",
          "[Removed Lines]",
          "10132:             rec( 10, 2, ObjectType, BE ),",
          "10134:             rec( -1, 4, LastInstance, BE ),",
          "10141:             rec( 26, 4, SearchInstance, BE ),",
          "",
          "[Added Lines]",
          "10145:             rec( 10, 2, ObjectType, ENC_BIG_ENDIAN ),",
          "10147:             rec( -1, 4, LastInstance, ENC_BIG_ENDIAN ),",
          "10154:             rec( 26, 4, SearchInstance, ENC_BIG_ENDIAN ),",
          "",
          "---------------",
          "--- Hunk 101 ---",
          "[Context before]",
          "10147:     # 2222/173D, 23/61",
          "10148:     pkt = NCP(0x173D, \"Read Property Value\", 'bindery')",
          "10149:     pkt.Request((15,77), [",
          "10151:             rec( 12, (1,48), ObjectName ),",
          "10152:             rec( -1, 1, PropertySegment ),",
          "10153:             rec( -1, (1,16), PropertyName ),",
          "",
          "[Removed Lines]",
          "10150:             rec( 10, 2, ObjectType, BE ),",
          "",
          "[Added Lines]",
          "10163:             rec( 10, 2, ObjectType, ENC_BIG_ENDIAN ),",
          "",
          "---------------",
          "--- Hunk 102 ---",
          "[Context before]",
          "10163:     # 2222/173E, 23/62",
          "10164:     pkt = NCP(0x173E, \"Write Property Value\", 'bindery')",
          "10165:     pkt.Request((144,206), [",
          "10167:             rec( 12, (1,48), ObjectName ),",
          "10168:             rec( -1, 1, PropertySegment ),",
          "10169:             rec( -1, 1, MoreFlag ),",
          "",
          "[Removed Lines]",
          "10166:             rec( 10, 2, ObjectType, BE ),",
          "",
          "[Added Lines]",
          "10179:             rec( 10, 2, ObjectType, ENC_BIG_ENDIAN ),",
          "",
          "---------------",
          "--- Hunk 103 ---",
          "[Context before]",
          "10181:     # 2222/173F, 23/63",
          "10182:     pkt = NCP(0x173F, \"Verify Bindery Object Password\", 'bindery')",
          "10183:     pkt.Request((14,92), [",
          "10185:             rec( 12, (1,48), ObjectName ),",
          "10186:             rec( -1, (1,32), Password ),",
          "10187:     ], info_str=(ObjectName, \"Verify Bindery Object Password: %s\", \", %s\"))",
          "",
          "[Removed Lines]",
          "10184:             rec( 10, 2, ObjectType, BE ),",
          "",
          "[Added Lines]",
          "10197:             rec( 10, 2, ObjectType, ENC_BIG_ENDIAN ),",
          "",
          "---------------",
          "--- Hunk 104 ---",
          "[Context before]",
          "10191:     # 2222/1740, 23/64",
          "10192:     pkt = NCP(0x1740, \"Change Bindery Object Password\", 'bindery')",
          "10193:     pkt.Request((15,124), [",
          "10195:             rec( 12, (1,48), ObjectName ),",
          "10196:             rec( -1, (1,32), Password ),",
          "10197:             rec( -1, (1,32), NewPassword ),",
          "",
          "[Removed Lines]",
          "10194:             rec( 10, 2, ObjectType, BE ),",
          "",
          "[Added Lines]",
          "10207:             rec( 10, 2, ObjectType, ENC_BIG_ENDIAN ),",
          "",
          "---------------",
          "--- Hunk 105 ---",
          "[Context before]",
          "10202:     # 2222/1741, 23/65",
          "10203:     pkt = NCP(0x1741, \"Add Bindery Object To Set\", 'bindery')",
          "10204:     pkt.Request((17,126), [",
          "10206:             rec( 12, (1,48), ObjectName ),",
          "10207:             rec( -1, (1,16), PropertyName ),",
          "10209:             rec( -1, (1,48), MemberName ),",
          "10210:     ], info_str=(MemberName, \"Add Bindery Object to Set: %s\", \", %s\"))",
          "10211:     pkt.Reply(8)",
          "",
          "[Removed Lines]",
          "10205:             rec( 10, 2, ObjectType, BE ),",
          "10208:             rec( -1, 2, MemberType, BE ),",
          "",
          "[Added Lines]",
          "10218:             rec( 10, 2, ObjectType, ENC_BIG_ENDIAN ),",
          "10221:             rec( -1, 2, MemberType, ENC_BIG_ENDIAN ),",
          "",
          "---------------",
          "--- Hunk 106 ---",
          "[Context before]",
          "10215:     # 2222/1742, 23/66",
          "10216:     pkt = NCP(0x1742, \"Delete Bindery Object From Set\", 'bindery')",
          "10217:     pkt.Request((17,126), [",
          "10219:             rec( 12, (1,48), ObjectName ),",
          "10220:             rec( -1, (1,16), PropertyName ),",
          "10222:             rec( -1, (1,48), MemberName ),",
          "10223:     ], info_str=(MemberName, \"Delete Bindery Object from Set: %s\", \", %s\"))",
          "10224:     pkt.Reply(8)",
          "",
          "[Removed Lines]",
          "10218:             rec( 10, 2, ObjectType, BE ),",
          "10221:             rec( -1, 2, MemberType, BE ),",
          "",
          "[Added Lines]",
          "10231:             rec( 10, 2, ObjectType, ENC_BIG_ENDIAN ),",
          "10234:             rec( -1, 2, MemberType, ENC_BIG_ENDIAN ),",
          "",
          "---------------",
          "--- Hunk 107 ---",
          "[Context before]",
          "10227:     # 2222/1743, 23/67",
          "10228:     pkt = NCP(0x1743, \"Is Bindery Object In Set\", 'bindery')",
          "10229:     pkt.Request((17,126), [",
          "10231:             rec( 12, (1,48), ObjectName ),",
          "10232:             rec( -1, (1,16), PropertyName ),",
          "10234:             rec( -1, (1,48), MemberName ),",
          "10235:     ], info_str=(MemberName, \"Is Bindery Object in Set: %s\", \", %s\"))",
          "10236:     pkt.Reply(8)",
          "",
          "[Removed Lines]",
          "10230:             rec( 10, 2, ObjectType, BE ),",
          "10233:             rec( -1, 2, MemberType, BE ),",
          "",
          "[Added Lines]",
          "10243:             rec( 10, 2, ObjectType, ENC_BIG_ENDIAN ),",
          "10246:             rec( -1, 2, MemberType, ENC_BIG_ENDIAN ),",
          "",
          "---------------",
          "--- Hunk 108 ---",
          "[Context before]",
          "10251:     pkt.Request(10)",
          "10252:     pkt.Reply(13, [",
          "10253:             rec( 8, 1, ObjectSecurity ),",
          "10255:     ])",
          "10256:     pkt.CompletionCodes([0x0000, 0x9600])",
          "10257:     # 2222/1747, 23/71",
          "10258:     pkt = NCP(0x1747, \"Scan Bindery Object Trustee Paths\", 'bindery')",
          "10259:     pkt.Request(17, [",
          "10260:             rec( 10, 1, VolumeNumber ),",
          "10263:     ])",
          "10264:     pkt.Reply((16,270), [",
          "10267:             rec( 14, 1, ObjectSecurity ),",
          "10268:             rec( 15, (1,255), Path ),",
          "10269:     ])",
          "",
          "[Removed Lines]",
          "10254:             rec( 9, 4, LoggedObjectID, BE ),",
          "10261:             rec( 11, 2, LastSequenceNumber, BE ),",
          "10262:             rec( 13, 4, ObjectID, BE ),",
          "10265:             rec( 8, 2, LastSequenceNumber, BE),",
          "10266:             rec( 10, 4, ObjectID, BE ),",
          "",
          "[Added Lines]",
          "10267:             rec( 9, 4, LoggedObjectID, ENC_BIG_ENDIAN ),",
          "10274:             rec( 11, 2, LastSequenceNumber, ENC_BIG_ENDIAN ),",
          "10275:             rec( 13, 4, ObjectID, ENC_BIG_ENDIAN ),",
          "10278:             rec( 8, 2, LastSequenceNumber, ENC_BIG_ENDIAN),",
          "10279:             rec( 10, 4, ObjectID, ENC_BIG_ENDIAN ),",
          "",
          "---------------",
          "--- Hunk 109 ---",
          "[Context before]",
          "10272:     # 2222/1748, 23/72",
          "10273:     pkt = NCP(0x1748, \"Get Bindery Object Access Level\", 'bindery')",
          "10274:     pkt.Request(14, [",
          "10276:     ])",
          "10277:     pkt.Reply(9, [",
          "10278:             rec( 8, 1, ObjectSecurity ),",
          "",
          "[Removed Lines]",
          "10275:             rec( 10, 4, ObjectID, BE ),",
          "",
          "[Added Lines]",
          "10288:             rec( 10, 4, ObjectID, ENC_BIG_ENDIAN ),",
          "",
          "---------------",
          "--- Hunk 110 ---",
          "[Context before]",
          "10287:     pkt = NCP(0x174A, \"Keyed Verify Password\", 'bindery')",
          "10288:     pkt.Request((21,68), [",
          "10289:             rec( 10, 8, LoginKey ),",
          "10291:             rec( 20, (1,48), ObjectName ),",
          "10292:     ], info_str=(ObjectName, \"Keyed Verify Password: %s\", \", %s\"))",
          "10293:     pkt.Reply(8)",
          "",
          "[Removed Lines]",
          "10290:             rec( 18, 2, ObjectType, BE ),",
          "",
          "[Added Lines]",
          "10303:             rec( 18, 2, ObjectType, ENC_BIG_ENDIAN ),",
          "",
          "---------------",
          "--- Hunk 111 ---",
          "[Context before]",
          "10296:     pkt = NCP(0x174B, \"Keyed Change Password\", 'bindery')",
          "10297:     pkt.Request((22,100), [",
          "10298:             rec( 10, 8, LoginKey ),",
          "10300:             rec( 20, (1,48), ObjectName ),",
          "10301:             rec( -1, (1,32), Password ),",
          "10302:     ], info_str=(ObjectName, \"Keyed Change Password: %s\", \", %s\"))",
          "",
          "[Removed Lines]",
          "10299:             rec( 18, 2, ObjectType, BE ),",
          "",
          "[Added Lines]",
          "10312:             rec( 18, 2, ObjectType, ENC_BIG_ENDIAN ),",
          "",
          "---------------",
          "--- Hunk 112 ---",
          "[Context before]",
          "10305:     # 2222/174C, 23/76",
          "10306:     pkt = NCP(0x174C, \"List Relations Of an Object\", 'bindery')",
          "10307:     pkt.Request((18,80), [",
          "10310:             rec( 16, (1,48), ObjectName ),",
          "10311:             rec( -1, (1,16), PropertyName ),",
          "10312:     ], info_str=(ObjectName, \"List Relations of an Object: %s\", \", %s\"))",
          "10313:     pkt.Reply(14, [",
          "10316:     ])",
          "10317:     pkt.CompletionCodes([0x0000, 0xf000, 0xf200, 0xfe01, 0xff00])",
          "10318:     # 2222/1764, 23/100",
          "10319:     pkt = NCP(0x1764, \"Create Queue\", 'qms')",
          "10320:     pkt.Request((15,316), [",
          "10322:             rec( 12, (1,48), QueueName ),",
          "10323:             rec( -1, 1, PathBase ),",
          "10324:             rec( -1, (1,255), Path ),",
          "",
          "[Removed Lines]",
          "10308:             rec( 10, 4, LastSeen, BE ),",
          "10309:             rec( 14, 2, ObjectType, BE ),",
          "10314:             rec( 8, 2, RelationsCount, BE, var=\"x\" ),",
          "10315:             rec( 10, 4, ObjectID, BE, repeat=\"x\" ),",
          "10321:             rec( 10, 2, QueueType, BE ),",
          "",
          "[Added Lines]",
          "10321:             rec( 10, 4, LastSeen, ENC_BIG_ENDIAN ),",
          "10322:             rec( 14, 2, ObjectType, ENC_BIG_ENDIAN ),",
          "10327:             rec( 8, 2, RelationsCount, ENC_BIG_ENDIAN, var=\"x\" ),",
          "10328:             rec( 10, 4, ObjectID, ENC_BIG_ENDIAN, repeat=\"x\" ),",
          "10334:             rec( 10, 2, QueueType, ENC_BIG_ENDIAN ),",
          "",
          "---------------",
          "--- Hunk 113 ---",
          "[Context before]",
          "10375:     pkt.Reply(62, [",
          "10376:             rec( 8, 1, ClientStation ),",
          "10377:             rec( 9, 1, ClientTaskNumber ),",
          "10380:             rec( 18, 6, TargetExecutionTime ),",
          "10381:             rec( 24, 6, JobEntryTime ),",
          "10384:             rec( 34, 1, JobPosition ),",
          "10385:             rec( 35, 1, JobControlFlags ),",
          "10386:             rec( 36, 14, JobFileName ),",
          "10387:             rec( 50, 6, JobFileHandle ),",
          "10388:             rec( 56, 1, ServerStation ),",
          "10389:             rec( 57, 1, ServerTaskNumber ),",
          "10391:     ])",
          "10392:     pkt.CompletionCodes([0x0000, 0x9900, 0xd000, 0xd100, 0xd200,",
          "10393:                          0xd300, 0xd400, 0xd500, 0xd601, 0xd703,",
          "",
          "[Removed Lines]",
          "10378:             rec( 10, 4, ClientIDNumber, BE ),",
          "10379:             rec( 14, 4, TargetServerIDNumber, BE ),",
          "10382:             rec( 30, 2, JobNumber, BE ),",
          "10383:             rec( 32, 2, JobType, BE ),",
          "10390:             rec( 58, 4, ServerID, BE ),",
          "",
          "[Added Lines]",
          "10391:             rec( 10, 4, ClientIDNumber, ENC_BIG_ENDIAN ),",
          "10392:             rec( 14, 4, TargetServerIDNumber, ENC_BIG_ENDIAN ),",
          "10395:             rec( 30, 2, JobNumber, ENC_BIG_ENDIAN ),",
          "10396:             rec( 32, 2, JobType, ENC_BIG_ENDIAN ),",
          "10403:             rec( 58, 4, ServerID, ENC_BIG_ENDIAN ),",
          "",
          "---------------",
          "--- Hunk 114 ---",
          "[Context before]",
          "10397:     pkt = NCP(0x1769, \"Close File And Start Queue Job\", 'qms')",
          "10398:     pkt.Request(16, [",
          "10399:             rec( 10, 4, QueueID ),",
          "10401:     ])",
          "10402:     pkt.Reply(8)",
          "10403:     pkt.CompletionCodes([0x0000, 0x9900, 0xd000, 0xd100, 0xd200,",
          "",
          "[Removed Lines]",
          "10400:             rec( 14, 2, JobNumber, BE ),",
          "",
          "[Added Lines]",
          "10413:             rec( 14, 2, JobNumber, ENC_BIG_ENDIAN ),",
          "",
          "---------------",
          "--- Hunk 115 ---",
          "[Context before]",
          "10407:     pkt = NCP(0x176A, \"Remove Job From Queue\", 'qms')",
          "10408:     pkt.Request(16, [",
          "10409:             rec( 10, 4, QueueID ),",
          "10411:     ])",
          "10412:     pkt.Reply(8)",
          "10413:     pkt.CompletionCodes([0x0000, 0x9900, 0xd000, 0xd100, 0xd200,",
          "",
          "[Removed Lines]",
          "10410:             rec( 14, 2, JobNumber, BE ),",
          "",
          "[Added Lines]",
          "10423:             rec( 14, 2, JobNumber, ENC_BIG_ENDIAN ),",
          "",
          "---------------",
          "--- Hunk 116 ---",
          "[Context before]",
          "10419:             rec( 10, 4, QueueID ),",
          "10420:     ])",
          "10421:     pkt.Reply(12, [",
          "10424:     ])",
          "10425:     pkt.CompletionCodes([0x0000, 0x9900, 0xd000, 0xd100, 0xd200,",
          "10426:                          0xd300, 0xd400, 0xd500, 0xd601, 0xd703,",
          "",
          "[Removed Lines]",
          "10422:             rec( 8, 2, JobCount, BE, var=\"x\" ),",
          "10423:             rec( 10, 2, JobNumber, BE, repeat=\"x\" ),",
          "",
          "[Added Lines]",
          "10435:             rec( 8, 2, JobCount, ENC_BIG_ENDIAN, var=\"x\" ),",
          "10436:             rec( 10, 2, JobNumber, ENC_BIG_ENDIAN, repeat=\"x\" ),",
          "",
          "---------------",
          "--- Hunk 117 ---",
          "[Context before]",
          "10429:     pkt = NCP(0x176C, \"Read Queue Job Entry\", 'qms')",
          "10430:     pkt.Request(16, [",
          "10431:             rec( 10, 4, QueueID ),",
          "10433:     ])",
          "10434:     pkt.Reply(258, [",
          "10435:         rec( 8, 250, JobStruct ),",
          "",
          "[Removed Lines]",
          "10432:             rec( 14, 2, JobNumber, BE ),",
          "",
          "[Added Lines]",
          "10445:             rec( 14, 2, JobNumber, ENC_BIG_ENDIAN ),",
          "",
          "---------------",
          "--- Hunk 118 ---",
          "[Context before]",
          "10450:     pkt = NCP(0x176E, \"Change Queue Job Position\", 'qms')",
          "10451:     pkt.Request(17, [",
          "10452:             rec( 10, 4, QueueID ),",
          "10454:             rec( 16, 1, NewPosition ),",
          "10455:     ])",
          "10456:     pkt.Reply(8)",
          "",
          "[Removed Lines]",
          "10453:             rec( 14, 2, JobNumber, BE ),",
          "",
          "[Added Lines]",
          "10466:             rec( 14, 2, JobNumber, ENC_BIG_ENDIAN ),",
          "",
          "---------------",
          "--- Hunk 119 ---",
          "[Context before]",
          "10479:     pkt = NCP(0x1771, \"Service Queue Job\", 'qms')",
          "10480:     pkt.Request(16, [",
          "10481:             rec( 10, 4, QueueID ),",
          "10483:     ])",
          "10484:     pkt.Reply(62, [",
          "10485:             rec( 8, 1, ClientStation ),",
          "10486:             rec( 9, 1, ClientTaskNumber ),",
          "10489:             rec( 18, 6, TargetExecutionTime ),",
          "10490:             rec( 24, 6, JobEntryTime ),",
          "10493:             rec( 34, 1, JobPosition ),",
          "10494:             rec( 35, 1, JobControlFlags ),",
          "10495:             rec( 36, 14, JobFileName ),",
          "10496:             rec( 50, 6, JobFileHandle ),",
          "10497:             rec( 56, 1, ServerStation ),",
          "10498:             rec( 57, 1, ServerTaskNumber ),",
          "10500:     ])",
          "10501:     pkt.CompletionCodes([0x0000, 0x9900, 0xd000, 0xd100, 0xd200,",
          "10502:                          0xd300, 0xd400, 0xd500, 0xd601, 0xd703,",
          "",
          "[Removed Lines]",
          "10482:             rec( 14, 2, ServiceType, BE ),",
          "10487:             rec( 10, 4, ClientIDNumber, BE ),",
          "10488:             rec( 14, 4, TargetServerIDNumber, BE ),",
          "10491:             rec( 30, 2, JobNumber, BE ),",
          "10492:             rec( 32, 2, JobType, BE ),",
          "10499:             rec( 58, 4, ServerID, BE ),",
          "",
          "[Added Lines]",
          "10495:             rec( 14, 2, ServiceType, ENC_BIG_ENDIAN ),",
          "10500:             rec( 10, 4, ClientIDNumber, ENC_BIG_ENDIAN ),",
          "10501:             rec( 14, 4, TargetServerIDNumber, ENC_BIG_ENDIAN ),",
          "10504:             rec( 30, 2, JobNumber, ENC_BIG_ENDIAN ),",
          "10505:             rec( 32, 2, JobType, ENC_BIG_ENDIAN ),",
          "10512:             rec( 58, 4, ServerID, ENC_BIG_ENDIAN ),",
          "",
          "---------------",
          "--- Hunk 120 ---",
          "[Context before]",
          "10505:     pkt = NCP(0x1772, \"Finish Servicing Queue Job\", 'qms')",
          "10506:     pkt.Request(18, [",
          "10507:             rec( 10, 4, QueueID ),",
          "10510:     ])",
          "10511:     pkt.Reply(8)",
          "10512:     pkt.CompletionCodes([0x0000, 0x9900, 0xd000, 0xd100, 0xd200,",
          "",
          "[Removed Lines]",
          "10508:             rec( 14, 2, JobNumber, BE ),",
          "10509:             rec( 16, 2, ChargeInformation, BE ),",
          "",
          "[Added Lines]",
          "10521:             rec( 14, 2, JobNumber, ENC_BIG_ENDIAN ),",
          "10522:             rec( 16, 2, ChargeInformation, ENC_BIG_ENDIAN ),",
          "",
          "---------------",
          "--- Hunk 121 ---",
          "[Context before]",
          "10516:     pkt = NCP(0x1773, \"Abort Servicing Queue Job\", 'qms')",
          "10517:     pkt.Request(16, [",
          "10518:             rec( 10, 4, QueueID ),",
          "10520:     ])",
          "10521:     pkt.Reply(8)",
          "10522:     pkt.CompletionCodes([0x0000, 0x9900, 0xd000, 0xd100, 0xd200,",
          "",
          "[Removed Lines]",
          "10519:             rec( 14, 2, JobNumber, BE ),",
          "",
          "[Added Lines]",
          "10532:             rec( 14, 2, JobNumber, ENC_BIG_ENDIAN ),",
          "",
          "---------------",
          "--- Hunk 122 ---",
          "[Context before]",
          "10526:     pkt = NCP(0x1774, \"Change To Client Rights\", 'qms')",
          "10527:     pkt.Request(16, [",
          "10528:             rec( 10, 4, QueueID ),",
          "10530:     ])",
          "10531:     pkt.Reply(8)",
          "10532:     pkt.CompletionCodes([0x0000, 0x9900, 0xd000, 0xd100, 0xd200,",
          "",
          "[Removed Lines]",
          "10529:             rec( 14, 2, JobNumber, BE ),",
          "",
          "[Added Lines]",
          "10542:             rec( 14, 2, JobNumber, ENC_BIG_ENDIAN ),",
          "",
          "---------------",
          "--- Hunk 123 ---",
          "[Context before]",
          "10543:     pkt = NCP(0x1776, \"Read Queue Server Current Status\", 'qms')",
          "10544:     pkt.Request(19, [",
          "10545:             rec( 10, 4, QueueID ),",
          "10547:             rec( 18, 1, ServerStation ),",
          "10548:     ])",
          "10549:     pkt.Reply(72, [",
          "",
          "[Removed Lines]",
          "10546:             rec( 14, 4, ServerID, BE ),",
          "",
          "[Added Lines]",
          "10559:             rec( 14, 4, ServerID, ENC_BIG_ENDIAN ),",
          "",
          "---------------",
          "--- Hunk 124 ---",
          "[Context before]",
          "10566:     pkt = NCP(0x1778, \"Get Queue Job File Size\", 'qms')",
          "10567:     pkt.Request(16, [",
          "10568:             rec( 10, 4, QueueID ),",
          "10570:     ])",
          "10571:     pkt.Reply(18, [",
          "10572:             rec( 8, 4, QueueID ),",
          "10575:     ])",
          "10576:     pkt.CompletionCodes([0x0000, 0x9900, 0xd000, 0xd100, 0xd200,",
          "10577:                          0xd300, 0xd400, 0xd500, 0xd601, 0xd703,",
          "",
          "[Removed Lines]",
          "10569:             rec( 14, 2, JobNumber, BE ),",
          "10573:             rec( 12, 2, JobNumber, BE ),",
          "10574:             rec( 14, 4, FileSize, BE ),",
          "",
          "[Added Lines]",
          "10582:             rec( 14, 2, JobNumber, ENC_BIG_ENDIAN ),",
          "10586:             rec( 12, 2, JobNumber, ENC_BIG_ENDIAN ),",
          "10587:             rec( 14, 4, FileSize, ENC_BIG_ENDIAN ),",
          "",
          "---------------",
          "--- Hunk 125 ---",
          "[Context before]",
          "10634:             rec( 16, 4, CurrentEntries ),",
          "10635:             rec( 20, 4, CurrentServers, var=\"x\" ),",
          "10636:             rec( 24, 4, ServerID, repeat=\"x\" ),",
          "10638:     ])",
          "10639:     pkt.CompletionCodes([0x0000, 0x9900, 0xd000, 0xd100, 0xd200,",
          "10640:                          0xd300, 0xd400, 0xd500, 0xd601, 0xd703,",
          "",
          "[Removed Lines]",
          "10637:             rec( 28, 4, ServerStationLong, LE, repeat=\"x\" ),",
          "",
          "[Added Lines]",
          "10650:             rec( 28, 4, ServerStationLong, ENC_LITTLE_ENDIAN, repeat=\"x\" ),",
          "",
          "---------------",
          "--- Hunk 126 ---",
          "[Context before]",
          "10729:     pkt = NCP(0x1786, \"Read Queue Server Current Status\", 'qms')",
          "10730:     pkt.Request(22, [",
          "10731:             rec( 10, 4, QueueID ),",
          "10733:             rec( 18, 4, ServerStation ),",
          "10734:     ])",
          "10735:     pkt.Reply(72, [",
          "",
          "[Removed Lines]",
          "10732:             rec( 14, 4, ServerID, BE ),",
          "",
          "[Added Lines]",
          "10745:             rec( 14, 4, ServerID, ENC_BIG_ENDIAN ),",
          "",
          "---------------",
          "--- Hunk 127 ---",
          "[Context before]",
          "10747:     pkt.Reply(20, [",
          "10748:             rec( 8, 4, QueueID ),",
          "10749:             rec( 12, 4, JobNumberLong ),",
          "10751:     ])",
          "10752:     pkt.CompletionCodes([0x0000, 0x9900, 0xd000, 0xd100, 0xd200,",
          "10753:                          0xd300, 0xd400, 0xd500, 0xd601, 0xd703,",
          "",
          "[Removed Lines]",
          "10750:             rec( 16, 4, FileSize, BE ),",
          "",
          "[Added Lines]",
          "10763:             rec( 16, 4, FileSize, ENC_BIG_ENDIAN ),",
          "",
          "---------------",
          "--- Hunk 128 ---",
          "[Context before]",
          "10768:     pkt.Request(24, [",
          "10769:             rec( 10, 4, QueueID ),",
          "10770:             rec( 14, 4, QueueStartPosition ),",
          "10772:             rec( 22, 2, FormType, repeat=\"x\" ),",
          "10773:     ])",
          "10774:     pkt.Reply(20, [",
          "",
          "[Removed Lines]",
          "10771:             rec( 18, 4, FormTypeCnt, LE, var=\"x\" ),",
          "",
          "[Added Lines]",
          "10784:             rec( 18, 4, FormTypeCnt, ENC_LITTLE_ENDIAN, var=\"x\" ),",
          "",
          "---------------",
          "--- Hunk 129 ---",
          "[Context before]",
          "10782:     pkt.Request(24, [",
          "10783:             rec( 10, 4, QueueID ),",
          "10784:             rec( 14, 4, QueueStartPosition ),",
          "10786:             rec( 22, 2, FormType, repeat=\"x\" ),",
          "10787:     ])",
          "10788:     pkt.Reply(94, [",
          "",
          "[Removed Lines]",
          "10785:             rec( 18, 4, FormTypeCnt, LE, var= \"x\" ),",
          "",
          "[Added Lines]",
          "10798:             rec( 18, 4, FormTypeCnt, ENC_LITTLE_ENDIAN, var= \"x\" ),",
          "",
          "---------------",
          "--- Hunk 130 ---",
          "[Context before]",
          "10792:     # 2222/1796, 23/150",
          "10793:     pkt = NCP(0x1796, \"Get Current Account Status\", 'accounting')",
          "10794:     pkt.Request((13,60), [",
          "10796:             rec( 12, (1,48), ObjectName ),",
          "10797:     ], info_str=(ObjectName, \"Get Current Account Status: %s\", \", %s\"))",
          "10798:     pkt.Reply(264, [",
          "10801:             rec( 16, 120, Reserved120 ),",
          "10834:     ])",
          "10835:     pkt.CompletionCodes([0x0000, 0x9600, 0xc000, 0xc101, 0xc400, 0xe800,",
          "10836:                          0xea00, 0xeb00, 0xec00, 0xfc06, 0xfe07, 0xff00])",
          "10837:     # 2222/1797, 23/151",
          "10838:     pkt = NCP(0x1797, \"Submit Account Charge\", 'accounting')",
          "10839:     pkt.Request((26,327), [",
          "10845:             rec( 24, (1,48), ObjectName ),",
          "10846:             rec( -1, (1,255), Comment ),",
          "10847:     ], info_str=(ObjectName, \"Submit Account Charge: %s\", \", %s\"))",
          "",
          "[Removed Lines]",
          "10795:             rec( 10, 2, ObjectType, BE ),",
          "10799:             rec( 8, 4, AccountBalance, BE ),",
          "10800:             rec( 12, 4, CreditLimit, BE ),",
          "10802:             rec( 136, 4, HolderID, BE ),",
          "10803:             rec( 140, 4, HoldAmount, BE ),",
          "10804:             rec( 144, 4, HolderID, BE ),",
          "10805:             rec( 148, 4, HoldAmount, BE ),",
          "10806:             rec( 152, 4, HolderID, BE ),",
          "10807:             rec( 156, 4, HoldAmount, BE ),",
          "10808:             rec( 160, 4, HolderID, BE ),",
          "10809:             rec( 164, 4, HoldAmount, BE ),",
          "10810:             rec( 168, 4, HolderID, BE ),",
          "10811:             rec( 172, 4, HoldAmount, BE ),",
          "10812:             rec( 176, 4, HolderID, BE ),",
          "10813:             rec( 180, 4, HoldAmount, BE ),",
          "10814:             rec( 184, 4, HolderID, BE ),",
          "10815:             rec( 188, 4, HoldAmount, BE ),",
          "10816:             rec( 192, 4, HolderID, BE ),",
          "10817:             rec( 196, 4, HoldAmount, BE ),",
          "10818:             rec( 200, 4, HolderID, BE ),",
          "10819:             rec( 204, 4, HoldAmount, BE ),",
          "10820:             rec( 208, 4, HolderID, BE ),",
          "10821:             rec( 212, 4, HoldAmount, BE ),",
          "10822:             rec( 216, 4, HolderID, BE ),",
          "10823:             rec( 220, 4, HoldAmount, BE ),",
          "10824:             rec( 224, 4, HolderID, BE ),",
          "10825:             rec( 228, 4, HoldAmount, BE ),",
          "10826:             rec( 232, 4, HolderID, BE ),",
          "10827:             rec( 236, 4, HoldAmount, BE ),",
          "10828:             rec( 240, 4, HolderID, BE ),",
          "10829:             rec( 244, 4, HoldAmount, BE ),",
          "10830:             rec( 248, 4, HolderID, BE ),",
          "10831:             rec( 252, 4, HoldAmount, BE ),",
          "10832:             rec( 256, 4, HolderID, BE ),",
          "10833:             rec( 260, 4, HoldAmount, BE ),",
          "10840:             rec( 10, 2, ServiceType, BE ),",
          "10841:             rec( 12, 4, ChargeAmount, BE ),",
          "10842:             rec( 16, 4, HoldCancelAmount, BE ),",
          "10843:             rec( 20, 2, ObjectType, BE ),",
          "10844:             rec( 22, 2, CommentType, BE ),",
          "",
          "[Added Lines]",
          "10808:             rec( 10, 2, ObjectType, ENC_BIG_ENDIAN ),",
          "10812:             rec( 8, 4, AccountBalance, ENC_BIG_ENDIAN ),",
          "10813:             rec( 12, 4, CreditLimit, ENC_BIG_ENDIAN ),",
          "10815:             rec( 136, 4, HolderID, ENC_BIG_ENDIAN ),",
          "10816:             rec( 140, 4, HoldAmount, ENC_BIG_ENDIAN ),",
          "10817:             rec( 144, 4, HolderID, ENC_BIG_ENDIAN ),",
          "10818:             rec( 148, 4, HoldAmount, ENC_BIG_ENDIAN ),",
          "10819:             rec( 152, 4, HolderID, ENC_BIG_ENDIAN ),",
          "10820:             rec( 156, 4, HoldAmount, ENC_BIG_ENDIAN ),",
          "10821:             rec( 160, 4, HolderID, ENC_BIG_ENDIAN ),",
          "10822:             rec( 164, 4, HoldAmount, ENC_BIG_ENDIAN ),",
          "10823:             rec( 168, 4, HolderID, ENC_BIG_ENDIAN ),",
          "10824:             rec( 172, 4, HoldAmount, ENC_BIG_ENDIAN ),",
          "10825:             rec( 176, 4, HolderID, ENC_BIG_ENDIAN ),",
          "10826:             rec( 180, 4, HoldAmount, ENC_BIG_ENDIAN ),",
          "10827:             rec( 184, 4, HolderID, ENC_BIG_ENDIAN ),",
          "10828:             rec( 188, 4, HoldAmount, ENC_BIG_ENDIAN ),",
          "10829:             rec( 192, 4, HolderID, ENC_BIG_ENDIAN ),",
          "10830:             rec( 196, 4, HoldAmount, ENC_BIG_ENDIAN ),",
          "10831:             rec( 200, 4, HolderID, ENC_BIG_ENDIAN ),",
          "10832:             rec( 204, 4, HoldAmount, ENC_BIG_ENDIAN ),",
          "10833:             rec( 208, 4, HolderID, ENC_BIG_ENDIAN ),",
          "10834:             rec( 212, 4, HoldAmount, ENC_BIG_ENDIAN ),",
          "10835:             rec( 216, 4, HolderID, ENC_BIG_ENDIAN ),",
          "10836:             rec( 220, 4, HoldAmount, ENC_BIG_ENDIAN ),",
          "10837:             rec( 224, 4, HolderID, ENC_BIG_ENDIAN ),",
          "10838:             rec( 228, 4, HoldAmount, ENC_BIG_ENDIAN ),",
          "10839:             rec( 232, 4, HolderID, ENC_BIG_ENDIAN ),",
          "10840:             rec( 236, 4, HoldAmount, ENC_BIG_ENDIAN ),",
          "10841:             rec( 240, 4, HolderID, ENC_BIG_ENDIAN ),",
          "10842:             rec( 244, 4, HoldAmount, ENC_BIG_ENDIAN ),",
          "10843:             rec( 248, 4, HolderID, ENC_BIG_ENDIAN ),",
          "10844:             rec( 252, 4, HoldAmount, ENC_BIG_ENDIAN ),",
          "10845:             rec( 256, 4, HolderID, ENC_BIG_ENDIAN ),",
          "10846:             rec( 260, 4, HoldAmount, ENC_BIG_ENDIAN ),",
          "10853:             rec( 10, 2, ServiceType, ENC_BIG_ENDIAN ),",
          "10854:             rec( 12, 4, ChargeAmount, ENC_BIG_ENDIAN ),",
          "10855:             rec( 16, 4, HoldCancelAmount, ENC_BIG_ENDIAN ),",
          "10856:             rec( 20, 2, ObjectType, ENC_BIG_ENDIAN ),",
          "10857:             rec( 22, 2, CommentType, ENC_BIG_ENDIAN ),",
          "",
          "---------------",
          "--- Hunk 131 ---",
          "[Context before]",
          "10852:     # 2222/1798, 23/152",
          "10853:     pkt = NCP(0x1798, \"Submit Account Hold\", 'accounting')",
          "10854:     pkt.Request((17,64), [",
          "10857:             rec( 16, (1,48), ObjectName ),",
          "10858:     ], info_str=(ObjectName, \"Submit Account Hold: %s\", \", %s\"))",
          "10859:     pkt.Reply(8)",
          "",
          "[Removed Lines]",
          "10855:             rec( 10, 4, HoldCancelAmount, BE ),",
          "10856:             rec( 14, 2, ObjectType, BE ),",
          "",
          "[Added Lines]",
          "10868:             rec( 10, 4, HoldCancelAmount, ENC_BIG_ENDIAN ),",
          "10869:             rec( 14, 2, ObjectType, ENC_BIG_ENDIAN ),",
          "",
          "---------------",
          "--- Hunk 132 ---",
          "[Context before]",
          "10863:     # 2222/1799, 23/153",
          "10864:     pkt = NCP(0x1799, \"Submit Account Note\", 'accounting')",
          "10865:     pkt.Request((18,319), [",
          "10869:             rec( 16, (1,48), ObjectName ),",
          "10870:             rec( -1, (1,255), Comment ),",
          "10871:     ], info_str=(ObjectName, \"Submit Account Note: %s\", \", %s\"))",
          "",
          "[Removed Lines]",
          "10866:             rec( 10, 2, ServiceType, BE ),",
          "10867:             rec( 12, 2, ObjectType, BE ),",
          "10868:             rec( 14, 2, CommentType, BE ),",
          "",
          "[Added Lines]",
          "10879:             rec( 10, 2, ServiceType, ENC_BIG_ENDIAN ),",
          "10880:             rec( 12, 2, ObjectType, ENC_BIG_ENDIAN ),",
          "10881:             rec( 14, 2, CommentType, ENC_BIG_ENDIAN ),",
          "",
          "---------------",
          "--- Hunk 133 ---",
          "[Context before]",
          "10951:     pkt = NCP(0x17D4, \"Get File System Statistics\", 'fileserver')",
          "10952:     pkt.Request(10)",
          "10953:     pkt.Reply(50, [",
          "10955:             rec( 12, 2, ConfiguredMaxOpenFiles ),",
          "10956:             rec( 14, 2, ActualMaxOpenFiles ),",
          "10957:             rec( 16, 2, CurrentOpenFiles ),",
          "",
          "[Removed Lines]",
          "10954:             rec( 8, 4, SystemIntervalMarker, BE ),",
          "",
          "[Added Lines]",
          "10967:             rec( 8, 4, SystemIntervalMarker, ENC_BIG_ENDIAN ),",
          "",
          "---------------",
          "--- Hunk 134 ---",
          "[Context before]",
          "10976:             rec( 12, (1,255), SemaphoreName ),",
          "10977:     ])",
          "10978:     pkt.Reply(53, [",
          "10980:             rec( 12, 1, TransactionTrackingSupported ),",
          "10981:             rec( 13, 1, TransactionTrackingEnabled ),",
          "10982:             rec( 14, 2, TransactionVolumeNumber ),",
          "",
          "[Removed Lines]",
          "10979:             rec( 8, 4, SystemIntervalMarker, BE ),",
          "",
          "[Added Lines]",
          "10992:             rec( 8, 4, SystemIntervalMarker, ENC_BIG_ENDIAN ),",
          "",
          "---------------",
          "--- Hunk 135 ---",
          "[Context before]",
          "10999:     pkt = NCP(0x17D6, \"Read Disk Cache Statistics\", 'fileserver')",
          "11000:     pkt.Request(10)",
          "11001:     pkt.Reply(86, [",
          "11003:             rec( 12, 2, CacheBufferCount ),",
          "11004:             rec( 14, 2, CacheBufferSize ),",
          "11005:             rec( 16, 2, DirtyCacheBuffers ),",
          "",
          "[Removed Lines]",
          "11002:             rec( 8, 4, SystemIntervalMarker, BE ),",
          "",
          "[Added Lines]",
          "11015:             rec( 8, 4, SystemIntervalMarker, ENC_BIG_ENDIAN ),",
          "",
          "---------------",
          "--- Hunk 136 ---",
          "[Context before]",
          "11030:     pkt = NCP(0x17D7, \"Get Drive Mapping Table\", 'fileserver')",
          "11031:     pkt.Request(10)",
          "11032:     pkt.Reply(184, [",
          "11034:             rec( 12, 1, SFTSupportLevel ),",
          "11035:             rec( 13, 1, LogicalDriveCount ),",
          "11036:             rec( 14, 1, PhysicalDriveCount ),",
          "11037:             rec( 15, 1, DiskChannelTable ),",
          "11038:             rec( 16, 4, Reserved4 ),",
          "11040:             rec( 22, 32, DriveMappingTable ),",
          "11041:             rec( 54, 32, DriveMirrorTable ),",
          "11042:             rec( 86, 32, DeadMirrorTable ),",
          "11043:             rec( 118, 1, ReMirrorDriveNumber ),",
          "11044:             rec( 119, 1, Filler ),",
          "11046:             rec( 124, 60, SFTErrorTable ),",
          "11047:     ])",
          "11048:     pkt.CompletionCodes([0x0000, 0x9600, 0xc601, 0xff00])",
          "",
          "[Removed Lines]",
          "11033:             rec( 8, 4, SystemIntervalMarker, BE ),",
          "11039:             rec( 20, 2, PendingIOCommands, BE ),",
          "11045:             rec( 120, 4, ReMirrorCurrentOffset, BE ),",
          "",
          "[Added Lines]",
          "11046:             rec( 8, 4, SystemIntervalMarker, ENC_BIG_ENDIAN ),",
          "11052:             rec( 20, 2, PendingIOCommands, ENC_BIG_ENDIAN ),",
          "11058:             rec( 120, 4, ReMirrorCurrentOffset, ENC_BIG_ENDIAN ),",
          "",
          "---------------",
          "--- Hunk 137 ---",
          "[Context before]",
          "11052:             rec( 10, 1, PhysicalDiskNumber ),",
          "11053:     ])",
          "11054:     pkt.Reply(101, [",
          "11056:             rec( 12, 1, PhysicalDiskChannel ),",
          "11057:             rec( 13, 1, DriveRemovableFlag ),",
          "11058:             rec( 14, 1, PhysicalDriveType ),",
          "",
          "[Removed Lines]",
          "11055:             rec( 8, 4, SystemIntervalMarker, BE ),",
          "",
          "[Added Lines]",
          "11068:             rec( 8, 4, SystemIntervalMarker, ENC_BIG_ENDIAN ),",
          "",
          "---------------",
          "--- Hunk 138 ---",
          "[Context before]",
          "11077:             rec( 10, 1, DiskChannelNumber ),",
          "11078:     ])",
          "11079:     pkt.Reply(192, [",
          "11083:             rec( 16, 1, SoftwareDriverType ),",
          "11084:             rec( 17, 1, SoftwareMajorVersionNumber ),",
          "11085:             rec( 18, 1, SoftwareMinorVersionNumber ),",
          "",
          "[Removed Lines]",
          "11080:             rec( 8, 4, SystemIntervalMarker, BE ),",
          "11081:             rec( 12, 2, ChannelState, BE ),",
          "11082:             rec( 14, 2, ChannelSynchronizationState, BE ),",
          "",
          "[Added Lines]",
          "11093:             rec( 8, 4, SystemIntervalMarker, ENC_BIG_ENDIAN ),",
          "11094:             rec( 12, 2, ChannelState, ENC_BIG_ENDIAN ),",
          "11095:             rec( 14, 2, ChannelSynchronizationState, ENC_BIG_ENDIAN ),",
          "",
          "---------------",
          "--- Hunk 139 ---",
          "[Context before]",
          "11097:     pkt = NCP(0x17DB, \"Get Connection's Open Files\", 'fileserver')",
          "11098:     pkt.Request(14, [",
          "11099:             rec( 10, 2, ConnectionNumber ),",
          "11101:     ])",
          "11102:     pkt.Reply(32, [",
          "11103:             rec( 8, 2, NextRequestRecord ),",
          "",
          "[Removed Lines]",
          "11100:             rec( 12, 2, LastRecordSeen, BE ),",
          "",
          "[Added Lines]",
          "11113:             rec( 12, 2, LastRecordSeen, ENC_BIG_ENDIAN ),",
          "",
          "---------------",
          "--- Hunk 140 ---",
          "[Context before]",
          "11108:     # 2222/17DC, 23/220",
          "11109:     pkt = NCP(0x17DC, \"Get Connection Using A File\", 'fileserver')",
          "11110:     pkt.Request((14,268), [",
          "11112:             rec( 12, 1, DirHandle ),",
          "11113:             rec( 13, (1,255), Path ),",
          "11114:     ], info_str=(Path, \"Get Connection Using File: %s\", \", %s\"))",
          "11115:     pkt.Reply(30, [",
          "11123:             rec( 22, 1, Locked ),",
          "11124:             rec( 23, 1, NumberOfRecords, var=\"x\" ),",
          "11125:             rec( 24, 6, ConnFileStruct, repeat=\"x\" ),",
          "",
          "[Removed Lines]",
          "11111:             rec( 10, 2, LastRecordSeen, BE ),",
          "11116:             rec( 8, 2, UseCount, BE ),",
          "11117:             rec( 10, 2, OpenCount, BE ),",
          "11118:             rec( 12, 2, OpenForReadCount, BE ),",
          "11119:             rec( 14, 2, OpenForWriteCount, BE ),",
          "11120:             rec( 16, 2, DenyReadCount, BE ),",
          "11121:             rec( 18, 2, DenyWriteCount, BE ),",
          "11122:             rec( 20, 2, NextRequestRecord, BE ),",
          "",
          "[Added Lines]",
          "11124:             rec( 10, 2, LastRecordSeen, ENC_BIG_ENDIAN ),",
          "11129:             rec( 8, 2, UseCount, ENC_BIG_ENDIAN ),",
          "11130:             rec( 10, 2, OpenCount, ENC_BIG_ENDIAN ),",
          "11131:             rec( 12, 2, OpenForReadCount, ENC_BIG_ENDIAN ),",
          "11132:             rec( 14, 2, OpenForWriteCount, ENC_BIG_ENDIAN ),",
          "11133:             rec( 16, 2, DenyReadCount, ENC_BIG_ENDIAN ),",
          "11134:             rec( 18, 2, DenyWriteCount, ENC_BIG_ENDIAN ),",
          "11135:             rec( 20, 2, NextRequestRecord, ENC_BIG_ENDIAN ),",
          "",
          "---------------",
          "--- Hunk 141 ---",
          "[Context before]",
          "11129:     pkt = NCP(0x17DD, \"Get Physical Record Locks By Connection And File\", 'fileserver')",
          "11130:     pkt.Request(31, [",
          "11131:             rec( 10, 2, TargetConnectionNumber ),",
          "11133:             rec( 14, 1, VolumeNumber ),",
          "11134:             rec( 15, 2, DirectoryID ),",
          "11135:             rec( 17, 14, FileName14 ),",
          "",
          "[Removed Lines]",
          "11132:             rec( 12, 2, LastRecordSeen, BE ),",
          "",
          "[Added Lines]",
          "11145:             rec( 12, 2, LastRecordSeen, ENC_BIG_ENDIAN ),",
          "",
          "---------------",
          "--- Hunk 142 ---",
          "[Context before]",
          "11159:     pkt = NCP(0x17DF, \"Get Logical Records By Connection\", 'fileserver')",
          "11160:     pkt.Request(14, [",
          "11161:             rec( 10, 2, TargetConnectionNumber ),",
          "11163:     ])",
          "11164:     pkt.Reply((14,268), [",
          "11165:             rec( 8, 2, NextRequestRecord ),",
          "",
          "[Removed Lines]",
          "11162:             rec( 12, 2, LastRecordSeen, BE ),",
          "",
          "[Added Lines]",
          "11175:             rec( 12, 2, LastRecordSeen, ENC_BIG_ENDIAN ),",
          "",
          "---------------",
          "--- Hunk 143 ---",
          "[Context before]",
          "11174:             rec( 12, (1,255), LogicalRecordName ),",
          "11175:     ], info_str=(LogicalRecordName, \"Get Logical Record Information: %s\", \", %s\"))",
          "11176:     pkt.Reply(20, [",
          "11179:             rec( 12, 2, NextRequestRecord ),",
          "11180:             rec( 14, 1, Locked ),",
          "11181:             rec( 15, 1, NumberOfRecords, var=\"x\" ),",
          "",
          "[Removed Lines]",
          "11177:             rec( 8, 2, UseCount, BE ),",
          "11178:             rec( 10, 2, ShareableLockCount, BE ),",
          "",
          "[Added Lines]",
          "11190:             rec( 8, 2, UseCount, ENC_BIG_ENDIAN ),",
          "11191:             rec( 10, 2, ShareableLockCount, ENC_BIG_ENDIAN ),",
          "",
          "---------------",
          "--- Hunk 144 ---",
          "[Context before]",
          "11201:             rec( 12, (1,255), SemaphoreName ),",
          "11202:     ], info_str=(SemaphoreName, \"Get Semaphore Information: %s\", \", %s\"))",
          "11203:     pkt.Reply(17, [",
          "11206:             rec( 12, 1, SemaphoreValue ),",
          "11207:             rec( 13, 1, NumberOfRecords, var=\"x\" ),",
          "11208:             rec( 14, 3, SemaInfoStruct, repeat=\"x\" ),",
          "",
          "[Removed Lines]",
          "11204:             rec( 8, 2, NextRequestRecord, BE ),",
          "11205:             rec( 10, 2, OpenCount, BE ),",
          "",
          "[Added Lines]",
          "11217:             rec( 8, 2, NextRequestRecord, ENC_BIG_ENDIAN ),",
          "11218:             rec( 10, 2, OpenCount, ENC_BIG_ENDIAN ),",
          "",
          "---------------",
          "--- Hunk 145 ---",
          "[Context before]",
          "11214:             rec( 10, 1, LANDriverNumber ),",
          "11215:     ])",
          "11216:     pkt.Reply(180, [",
          "11218:             rec( 12, 6, HostAddress ),",
          "11219:             rec( 18, 1, BoardInstalled ),",
          "11220:             rec( 19, 1, OptionNumber ),",
          "",
          "[Removed Lines]",
          "11217:             rec( 8, 4, NetworkAddress, BE ),",
          "",
          "[Added Lines]",
          "11230:             rec( 8, 4, NetworkAddress, ENC_BIG_ENDIAN ),",
          "",
          "---------------",
          "--- Hunk 146 ---",
          "[Context before]",
          "11236:     # 2222/17E6, 23/230",
          "11237:     pkt = NCP(0x17E6, \"Get Object's Remaining Disk Space\", 'fileserver')",
          "11238:     pkt.Request(14, [",
          "11240:     ])",
          "11241:     pkt.Reply(21, [",
          "11243:             rec( 12, 4, ObjectID ),",
          "11245:             rec( 20, 1, RestrictionsEnforced ),",
          "11246:      ])",
          "11247:     pkt.CompletionCodes([0x0000, 0x9600, 0xc601, 0xfd00, 0xff00])",
          "",
          "[Removed Lines]",
          "11239:             rec( 10, 4, ObjectID, BE ),",
          "11242:             rec( 8, 4, SystemIntervalMarker, BE ),",
          "11244:             rec( 16, 4, UnusedDiskBlocks, BE ),",
          "",
          "[Added Lines]",
          "11252:             rec( 10, 4, ObjectID, ENC_BIG_ENDIAN ),",
          "11255:             rec( 8, 4, SystemIntervalMarker, ENC_BIG_ENDIAN ),",
          "11257:             rec( 16, 4, UnusedDiskBlocks, ENC_BIG_ENDIAN ),",
          "",
          "---------------",
          "--- Hunk 147 ---",
          "[Context before]",
          "11249:     pkt = NCP(0x17E7, \"Get File Server LAN I/O Statistics\", 'fileserver')",
          "11250:     pkt.Request(10)",
          "11251:     pkt.Reply(74, [",
          "11253:             rec( 12, 2, ConfiguredMaxRoutingBuffers ),",
          "11254:             rec( 14, 2, ActualMaxUsedRoutingBuffers ),",
          "11255:             rec( 16, 2, CurrentlyUsedRoutingBuffers ),",
          "",
          "[Removed Lines]",
          "11252:             rec( 8, 4, SystemIntervalMarker, BE ),",
          "",
          "[Added Lines]",
          "11265:             rec( 8, 4, SystemIntervalMarker, ENC_BIG_ENDIAN ),",
          "",
          "---------------",
          "--- Hunk 148 ---",
          "[Context before]",
          "11283:     pkt = NCP(0x17E8, \"Get File Server Misc Information\", 'fileserver')",
          "11284:     pkt.Request(10)",
          "11285:     pkt.Reply(40, [",
          "11287:             rec( 12, 1, ProcessorType ),",
          "11288:             rec( 13, 1, Reserved ),",
          "11289:             rec( 14, 1, NumberOfServiceProcesses ),",
          "",
          "[Removed Lines]",
          "11286:             rec( 8, 4, SystemIntervalMarker, BE ),",
          "",
          "[Added Lines]",
          "11299:             rec( 8, 4, SystemIntervalMarker, ENC_BIG_ENDIAN ),",
          "",
          "---------------",
          "--- Hunk 149 ---",
          "[Context before]",
          "11303:             rec( 10, 1, VolumeNumber ),",
          "11304:     ],info_str=(VolumeNumber, \"Get Information on Volume %d\", \", %d\"))",
          "11305:     pkt.Reply(48, [",
          "11307:             rec( 12, 1, VolumeNumber ),",
          "11308:             rec( 13, 1, LogicalDriveNumber ),",
          "11309:             rec( 14, 2, BlockSize ),",
          "",
          "[Removed Lines]",
          "11306:             rec( 8, 4, SystemIntervalMarker, BE ),",
          "",
          "[Added Lines]",
          "11319:             rec( 8, 4, SystemIntervalMarker, ENC_BIG_ENDIAN ),",
          "",
          "---------------",
          "--- Hunk 150 ---",
          "[Context before]",
          "11348:     pkt.Request(18, [",
          "11349:             rec( 10, 1, DataStreamNumber ),",
          "11350:             rec( 11, 1, VolumeNumber ),",
          "11352:             rec( 16, 2, LastRecordSeen ),",
          "11353:     ])",
          "11354:     pkt.Reply(33, [",
          "",
          "[Removed Lines]",
          "11351:             rec( 12, 4, DirectoryBase, LE ),",
          "",
          "[Added Lines]",
          "11364:             rec( 12, 4, DirectoryBase, ENC_LITTLE_ENDIAN ),",
          "",
          "---------------",
          "--- Hunk 151 ---",
          "[Context before]",
          "11371:             rec( 10, 2, TargetConnectionNumber ),",
          "11372:             rec( 12, 1, DataStreamNumber ),",
          "11373:             rec( 13, 1, VolumeNumber ),",
          "11375:             rec( 18, 2, LastRecordSeen ),",
          "11376:     ])",
          "11377:     pkt.Reply(23, [",
          "11378:             rec( 8, 2, NextRequestRecord ),",
          "11380:             rec( 12, 11, LockStruct, repeat=\"x\" ),",
          "11381:     ])",
          "11382:     pkt.CompletionCodes([0x0000, 0x9600, 0xc601, 0xfd00, 0xff00])",
          "",
          "[Removed Lines]",
          "11374:             rec( 14, 4, DirectoryBase, LE ),",
          "11379:             rec( 10, 2, NumberOfLocks, LE, var=\"x\" ),",
          "",
          "[Added Lines]",
          "11387:             rec( 14, 4, DirectoryBase, ENC_LITTLE_ENDIAN ),",
          "11392:             rec( 10, 2, NumberOfLocks, ENC_LITTLE_ENDIAN, var=\"x\" ),",
          "",
          "---------------",
          "--- Hunk 152 ---",
          "[Context before]",
          "11390:     ])",
          "11391:     pkt.Reply(30, [",
          "11392:             rec( 8, 2, NextRequestRecord ),",
          "11394:             rec( 12, 18, PhyLockStruct, repeat=\"x\" ),",
          "11395:     ])",
          "11396:     pkt.CompletionCodes([0x0000, 0x9600, 0xc601, 0xfd00, 0xff00])",
          "",
          "[Removed Lines]",
          "11393:             rec( 10, 2, NumberOfLocks, LE, var=\"x\" ),",
          "",
          "[Added Lines]",
          "11406:             rec( 10, 2, NumberOfLocks, ENC_LITTLE_ENDIAN, var=\"x\" ),",
          "",
          "---------------",
          "--- Hunk 153 ---",
          "[Context before]",
          "11500:     pkt.Request(24, [",
          "11501:             rec( 7, 1, LockFlag ),",
          "11502:             rec( 8, 6, FileHandle ),",
          "11505:             rec( 22, 2, LockTimeout ),",
          "11506:     ], info_str=(LockAreaLen, \"Lock Record - Length of %d\", \"%d\"))",
          "11507:     pkt.Reply(8)",
          "",
          "[Removed Lines]",
          "11503:             rec( 14, 4, LockAreasStartOffset, BE ),",
          "11504:             rec( 18, 4, LockAreaLen, BE ),",
          "",
          "[Added Lines]",
          "11516:             rec( 14, 4, LockAreasStartOffset, ENC_BIG_ENDIAN ),",
          "11517:             rec( 18, 4, LockAreaLen, ENC_BIG_ENDIAN ),",
          "",
          "---------------",
          "--- Hunk 154 ---",
          "[Context before]",
          "11536:     pkt.Request(22, [",
          "11537:             rec( 7, 1, Reserved ),",
          "11538:             rec( 8, 6, FileHandle ),",
          "11541:     ], info_str=(LockAreaLen, \"Clear Lock Record - Length of %d\", \"%d\"))",
          "11542:     pkt.Reply(8)",
          "11543:     pkt.CompletionCodes([0x0000, 0x8000, 0x8800, 0x9600, 0xfd02, 0xfe04, 0xff03])",
          "",
          "[Removed Lines]",
          "11539:             rec( 14, 4, LockAreasStartOffset, BE ),",
          "11540:             rec( 18, 4, LockAreaLen, BE ),",
          "",
          "[Added Lines]",
          "11552:             rec( 14, 4, LockAreasStartOffset, ENC_BIG_ENDIAN ),",
          "11553:             rec( 18, 4, LockAreaLen, ENC_BIG_ENDIAN ),",
          "",
          "---------------",
          "--- Hunk 155 ---",
          "[Context before]",
          "11555:             rec( 9, (1,255), SemaphoreName ),",
          "11556:     ], info_str=(SemaphoreName, \"Open Semaphore: %s\", \", %s\"))",
          "11557:     pkt.Reply(13, [",
          "11559:               rec( 12, 1, SemaphoreOpenCount ),",
          "11560:     ])",
          "11561:     pkt.CompletionCodes([0x0000, 0x9600, 0xff01])",
          "11562:     # 2222/2001, 32/01",
          "11563:     pkt = NCP(0x2001, \"Examine Semaphore\", 'sync', has_length=0)",
          "11564:     pkt.Request(12, [",
          "11566:     ])",
          "11567:     pkt.Reply(10, [",
          "11568:               rec( 8, 1, SemaphoreValue ),",
          "",
          "[Removed Lines]",
          "11558:               rec( 8, 4, SemaphoreHandle, BE ),",
          "11565:             rec( 8, 4, SemaphoreHandle, BE ),",
          "",
          "[Added Lines]",
          "11571:               rec( 8, 4, SemaphoreHandle, ENC_BIG_ENDIAN ),",
          "11578:             rec( 8, 4, SemaphoreHandle, ENC_BIG_ENDIAN ),",
          "",
          "---------------",
          "--- Hunk 156 ---",
          "[Context before]",
          "11572:     # 2222/2002, 32/02",
          "11573:     pkt = NCP(0x2002, \"Wait On Semaphore\", 'sync', has_length=0)",
          "11574:     pkt.Request(14, [",
          "11577:     ])",
          "11578:     pkt.Reply(8)",
          "11579:     pkt.CompletionCodes([0x0000, 0x9600, 0xff01])",
          "11580:     # 2222/2003, 32/03",
          "11581:     pkt = NCP(0x2003, \"Signal Semaphore\", 'sync', has_length=0)",
          "11582:     pkt.Request(12, [",
          "11584:     ])",
          "11585:     pkt.Reply(8)",
          "11586:     pkt.CompletionCodes([0x0000, 0x9600, 0xff01])",
          "11587:     # 2222/2004, 32/04",
          "11588:     pkt = NCP(0x2004, \"Close Semaphore\", 'sync', has_length=0)",
          "11589:     pkt.Request(12, [",
          "11591:     ])",
          "11592:     pkt.Reply(8)",
          "11593:     pkt.CompletionCodes([0x0000, 0x9600, 0xff01])",
          "11594:     # 2222/21, 33",
          "11595:     pkt = NCP(0x21, \"Negotiate Buffer Size\", 'connection')",
          "11596:     pkt.Request(9, [",
          "11598:     ])",
          "11599:     pkt.Reply(10, [",
          "11601:     ])",
          "11602:     pkt.CompletionCodes([0x0000])",
          "11603:     # 2222/2200, 34/00",
          "",
          "[Removed Lines]",
          "11575:             rec( 8, 4, SemaphoreHandle, BE ),",
          "11576:             rec( 12, 2, SemaphoreTimeOut, BE ),",
          "11583:             rec( 8, 4, SemaphoreHandle, BE ),",
          "11590:             rec( 8, 4, SemaphoreHandle, BE ),",
          "11597:             rec( 7, 2, BufferSize, BE ),",
          "11600:             rec( 8, 2, BufferSize, BE ),",
          "",
          "[Added Lines]",
          "11588:             rec( 8, 4, SemaphoreHandle, ENC_BIG_ENDIAN ),",
          "11589:             rec( 12, 2, SemaphoreTimeOut, ENC_BIG_ENDIAN ),",
          "11596:             rec( 8, 4, SemaphoreHandle, ENC_BIG_ENDIAN ),",
          "11603:             rec( 8, 4, SemaphoreHandle, ENC_BIG_ENDIAN ),",
          "11610:             rec( 7, 2, BufferSize, ENC_BIG_ENDIAN ),",
          "11613:             rec( 8, 2, BufferSize, ENC_BIG_ENDIAN ),",
          "",
          "---------------",
          "--- Hunk 157 ---",
          "[Context before]",
          "11614:     pkt = NCP(0x2202, \"TTS End Transaction\", 'tts', has_length=0)",
          "11615:     pkt.Request(8)",
          "11616:     pkt.Reply(12, [",
          "11618:     ])",
          "11619:     pkt.CompletionCodes([0x0000, 0xff01])",
          "11620:     # 2222/2203, 34/03",
          "",
          "[Removed Lines]",
          "11617:               rec( 8, 4, TransactionNumber, BE ),",
          "",
          "[Added Lines]",
          "11630:               rec( 8, 4, TransactionNumber, ENC_BIG_ENDIAN ),",
          "",
          "---------------",
          "--- Hunk 158 ---",
          "[Context before]",
          "11625:     # 2222/2204, 34/04",
          "11626:     pkt = NCP(0x2204, \"TTS Transaction Status\", 'tts', has_length=0)",
          "11627:     pkt.Request(12, [",
          "11629:     ])",
          "11630:     pkt.Reply(8)",
          "11631:     pkt.CompletionCodes([0x0000])",
          "",
          "[Removed Lines]",
          "11628:               rec( 8, 4, TransactionNumber, BE ),",
          "",
          "[Added Lines]",
          "11641:               rec( 8, 4, TransactionNumber, ENC_BIG_ENDIAN ),",
          "",
          "---------------",
          "--- Hunk 159 ---",
          "[Context before]",
          "11701:             rec( 10, 1, VolumeNumber ),",
          "11702:             rec( 11, 4, BaseDirectoryID ),",
          "11703:             rec( 15, 1, DeleteExistingFileFlag ),",
          "11705:             rec( 20, 4, Reserved4 ),",
          "11706:             rec( 24, 2, FinderAttr ),",
          "11710:             rec( 32, 16, Reserved16 ),",
          "11711:             rec( 48, (1,255), Path ),",
          "11712:     ], info_str=(Path, \"AFP Create File: %s\", \", %s\"))",
          "",
          "[Removed Lines]",
          "11704:             rec( 16, 4, CreatorID, BE ),",
          "11707:             rec( 26, 2, HorizLocation, BE ),",
          "11708:             rec( 28, 2, VertLocation, BE ),",
          "11709:             rec( 30, 2, FileDirWindow, BE ),",
          "",
          "[Added Lines]",
          "11717:             rec( 16, 4, CreatorID, ENC_BIG_ENDIAN ),",
          "11720:             rec( 26, 2, HorizLocation, ENC_BIG_ENDIAN ),",
          "11721:             rec( 28, 2, VertLocation, ENC_BIG_ENDIAN ),",
          "11722:             rec( 30, 2, FileDirWindow, ENC_BIG_ENDIAN ),",
          "",
          "---------------",
          "--- Hunk 160 ---",
          "[Context before]",
          "11736:             rec( 15, (1,255), Path ),",
          "11737:     ], info_str=(Path, \"AFP Get Entry from Name: %s\", \", %s\"))",
          "11738:     pkt.Reply(12, [",
          "11740:     ])",
          "11741:     pkt.CompletionCodes([0x0000, 0x8301, 0x8800, 0x9300, 0x9600, 0x9804, 0x9c03,",
          "11742:                          0xa100, 0xa201, 0xfd00, 0xff19])",
          "",
          "[Removed Lines]",
          "11739:             rec( 8, 4, TargetEntryID, BE ),",
          "",
          "[Added Lines]",
          "11752:             rec( 8, 4, TargetEntryID, ENC_BIG_ENDIAN ),",
          "",
          "---------------",
          "--- Hunk 161 ---",
          "[Context before]",
          "11745:     pkt.Request((18,272), [",
          "11746:             rec( 10, 1, VolumeNumber ),",
          "11747:             rec( 11, 4, BaseDirectoryID ),",
          "11749:             rec( 17, (1,255), Path ),",
          "11750:     ], info_str=(Path, \"AFP Get File Information: %s\", \", %s\"))",
          "11751:     pkt.Reply(121, [",
          "11765:             rec( 44, 4, Reserved4 ),",
          "11766:             rec( 48, 2, FinderAttr ),",
          "11767:             rec( 50, 2, HorizLocation ),",
          "",
          "[Removed Lines]",
          "11748:             rec( 15, 2, RequestBitMap, BE ),",
          "11752:             rec( 8, 4, AFPEntryID, BE ),",
          "11753:             rec( 12, 4, ParentID, BE ),",
          "11754:             rec( 16, 2, AttributesDef16, LE ),",
          "11755:             rec( 18, 4, DataForkLen, BE ),",
          "11756:             rec( 22, 4, ResourceForkLen, BE ),",
          "11757:             rec( 26, 2, TotalOffspring, BE  ),",
          "11758:             rec( 28, 2, CreationDate, BE ),",
          "11759:             rec( 30, 2, LastAccessedDate, BE ),",
          "11760:             rec( 32, 2, ModifiedDate, BE ),",
          "11761:             rec( 34, 2, ModifiedTime, BE ),",
          "11762:             rec( 36, 2, ArchivedDate, BE ),",
          "11763:             rec( 38, 2, ArchivedTime, BE ),",
          "11764:             rec( 40, 4, CreatorID, BE ),",
          "",
          "[Added Lines]",
          "11761:             rec( 15, 2, RequestBitMap, ENC_BIG_ENDIAN ),",
          "11765:             rec( 8, 4, AFPEntryID, ENC_BIG_ENDIAN ),",
          "11766:             rec( 12, 4, ParentID, ENC_BIG_ENDIAN ),",
          "11767:             rec( 16, 2, AttributesDef16, ENC_LITTLE_ENDIAN ),",
          "11768:             rec( 18, 4, DataForkLen, ENC_BIG_ENDIAN ),",
          "11769:             rec( 22, 4, ResourceForkLen, ENC_BIG_ENDIAN ),",
          "11770:             rec( 26, 2, TotalOffspring, ENC_BIG_ENDIAN  ),",
          "11771:             rec( 28, 2, CreationDate, ENC_BIG_ENDIAN ),",
          "11772:             rec( 30, 2, LastAccessedDate, ENC_BIG_ENDIAN ),",
          "11773:             rec( 32, 2, ModifiedDate, ENC_BIG_ENDIAN ),",
          "11774:             rec( 34, 2, ModifiedTime, ENC_BIG_ENDIAN ),",
          "11775:             rec( 36, 2, ArchivedDate, ENC_BIG_ENDIAN ),",
          "11776:             rec( 38, 2, ArchivedTime, ENC_BIG_ENDIAN ),",
          "11777:             rec( 40, 4, CreatorID, ENC_BIG_ENDIAN ),",
          "",
          "---------------",
          "--- Hunk 162 ---",
          "[Context before]",
          "11769:             rec( 54, 2, FileDirWindow ),",
          "11770:             rec( 56, 16, Reserved16 ),",
          "11771:             rec( 72, 32, LongName ),",
          "11773:             rec( 108, 12, ShortName ),",
          "11774:             rec( 120, 1, AccessPrivileges ),",
          "11775:     ])",
          "",
          "[Removed Lines]",
          "11772:             rec( 104, 4, CreatorID, BE ),",
          "",
          "[Added Lines]",
          "11785:             rec( 104, 4, CreatorID, ENC_BIG_ENDIAN ),",
          "",
          "---------------",
          "--- Hunk 163 ---",
          "[Context before]",
          "11782:     ])",
          "11783:     pkt.Reply(14, [",
          "11784:             rec( 8, 1, VolumeID ),",
          "11786:             rec( 13, 1, ForkIndicator ),",
          "11787:     ])",
          "11788:     pkt.CompletionCodes([0x0000, 0x8301, 0x8800, 0x9300, 0x9600, 0xa201])",
          "",
          "[Removed Lines]",
          "11785:             rec( 9, 4, TargetEntryID, BE ),",
          "",
          "[Added Lines]",
          "11798:             rec( 9, 4, TargetEntryID, ENC_BIG_ENDIAN ),",
          "",
          "---------------",
          "--- Hunk 164 ---",
          "[Context before]",
          "11790:     pkt = NCP(0x2307, \"AFP Rename\", 'afp')",
          "11791:     pkt.Request((21, 529), [",
          "11792:             rec( 10, 1, VolumeNumber ),",
          "11795:             rec( 19, (1,255), Path ),",
          "11796:             rec( -1, (1,255), NewFileNameLen ),",
          "11797:     ], info_str=(Path, \"AFP Rename: %s\", \", %s\"))",
          "",
          "[Removed Lines]",
          "11793:             rec( 11, 4, MacSourceBaseID, BE ),",
          "11794:             rec( 15, 4, MacDestinationBaseID, BE ),",
          "",
          "[Added Lines]",
          "11806:             rec( 11, 4, MacSourceBaseID, ENC_BIG_ENDIAN ),",
          "11807:             rec( 15, 4, MacDestinationBaseID, ENC_BIG_ENDIAN ),",
          "",
          "---------------",
          "--- Hunk 165 ---",
          "[Context before]",
          "11809:             rec( 17, (1,255), Path ),",
          "11810:     ], info_str=(Path, \"AFP Open File Fork: %s\", \", %s\"))",
          "11811:     pkt.Reply(22, [",
          "11814:             rec( 16, 6, NetWareAccessHandle ),",
          "11815:     ])",
          "11816:     pkt.CompletionCodes([0x0000, 0x8000, 0x8101, 0x8301, 0x8800, 0x9300,",
          "",
          "[Removed Lines]",
          "11812:             rec( 8, 4, AFPEntryID, BE ),",
          "11813:             rec( 12, 4, DataForkLen, BE ),",
          "",
          "[Added Lines]",
          "11825:             rec( 8, 4, AFPEntryID, ENC_BIG_ENDIAN ),",
          "11826:             rec( 12, 4, DataForkLen, ENC_BIG_ENDIAN ),",
          "",
          "---------------",
          "--- Hunk 166 ---",
          "[Context before]",
          "11821:     pkt.Request((64, 318), [",
          "11822:             rec( 10, 1, VolumeNumber ),",
          "11823:             rec( 11, 4, MacBaseDirectoryID ),",
          "11833:             rec( 35, 4, Reserved4 ),",
          "11834:             rec( 39, 2, FinderAttr ),",
          "11835:             rec( 41, 2, HorizLocation ),",
          "",
          "[Removed Lines]",
          "11824:             rec( 15, 2, RequestBitMap, BE ),",
          "11825:             rec( 17, 2, MacAttr, BE ),",
          "11826:             rec( 19, 2, CreationDate, BE ),",
          "11827:             rec( 21, 2, LastAccessedDate, BE ),",
          "11828:             rec( 23, 2, ModifiedDate, BE ),",
          "11829:             rec( 25, 2, ModifiedTime, BE ),",
          "11830:             rec( 27, 2, ArchivedDate, BE ),",
          "11831:             rec( 29, 2, ArchivedTime, BE ),",
          "11832:             rec( 31, 4, CreatorID, BE ),",
          "",
          "[Added Lines]",
          "11837:             rec( 15, 2, RequestBitMap, ENC_BIG_ENDIAN ),",
          "11838:             rec( 17, 2, MacAttr, ENC_BIG_ENDIAN ),",
          "11839:             rec( 19, 2, CreationDate, ENC_BIG_ENDIAN ),",
          "11840:             rec( 21, 2, LastAccessedDate, ENC_BIG_ENDIAN ),",
          "11841:             rec( 23, 2, ModifiedDate, ENC_BIG_ENDIAN ),",
          "11842:             rec( 25, 2, ModifiedTime, ENC_BIG_ENDIAN ),",
          "11843:             rec( 27, 2, ArchivedDate, ENC_BIG_ENDIAN ),",
          "11844:             rec( 29, 2, ArchivedTime, ENC_BIG_ENDIAN ),",
          "11845:             rec( 31, 4, CreatorID, ENC_BIG_ENDIAN ),",
          "",
          "---------------",
          "--- Hunk 167 ---",
          "[Context before]",
          "11847:     pkt.Request((26, 280), [",
          "11848:             rec( 10, 1, VolumeNumber ),",
          "11849:             rec( 11, 4, MacBaseDirectoryID ),",
          "11854:             rec( 25, (1,255), Path ),",
          "11855:     ], info_str=(Path, \"AFP Scan File Information: %s\", \", %s\"))",
          "11856:     pkt.Reply(123, [",
          "11858:             rec( 10, 113, AFP10Struct, repeat=\"x\" ),",
          "11859:     ])",
          "11860:     pkt.CompletionCodes([0x0000, 0x8301, 0x8800, 0x9300, 0x9600, 0x9804,",
          "",
          "[Removed Lines]",
          "11850:             rec( 15, 4, MacLastSeenID, BE ),",
          "11851:             rec( 19, 2, DesiredResponseCount, BE ),",
          "11852:             rec( 21, 2, SearchBitMap, BE ),",
          "11853:             rec( 23, 2, RequestBitMap, BE ),",
          "11857:             rec( 8, 2, ActualResponseCount, BE, var=\"x\" ),",
          "",
          "[Added Lines]",
          "11863:             rec( 15, 4, MacLastSeenID, ENC_BIG_ENDIAN ),",
          "11864:             rec( 19, 2, DesiredResponseCount, ENC_BIG_ENDIAN ),",
          "11865:             rec( 21, 2, SearchBitMap, ENC_BIG_ENDIAN ),",
          "11866:             rec( 23, 2, RequestBitMap, ENC_BIG_ENDIAN ),",
          "11870:             rec( 8, 2, ActualResponseCount, ENC_BIG_ENDIAN, var=\"x\" ),",
          "",
          "---------------",
          "--- Hunk 168 ---",
          "[Context before]",
          "11880:             rec( 11, (1,255), Path ),",
          "11881:     ], info_str=(Path, \"AFP Get Entry ID from Path Name: %s\", \", %s\"))",
          "11882:     pkt.Reply(12, [",
          "11884:     ])",
          "11885:     pkt.CompletionCodes([0x0000, 0x8301, 0x8800, 0x9300, 0x9600,",
          "11886:                          0x9804, 0x9b03, 0x9c03, 0xa100, 0xa201,",
          "",
          "[Removed Lines]",
          "11883:             rec( 8, 4, AFPEntryID, BE ),",
          "",
          "[Added Lines]",
          "11896:             rec( 8, 4, AFPEntryID, ENC_BIG_ENDIAN ),",
          "",
          "---------------",
          "--- Hunk 169 ---",
          "[Context before]",
          "11891:             rec( 10, 1, VolumeNumber ),",
          "11892:             rec( 11, 4, BaseDirectoryID ),",
          "11893:             rec( 15, 1, Reserved ),",
          "11895:             rec( 20, 4, Reserved4 ),",
          "11896:             rec( 24, 2, FinderAttr ),",
          "11897:             rec( 26, 2, HorizLocation ),",
          "",
          "[Removed Lines]",
          "11894:             rec( 16, 4, CreatorID, BE ),",
          "",
          "[Added Lines]",
          "11907:             rec( 16, 4, CreatorID, ENC_BIG_ENDIAN ),",
          "",
          "---------------",
          "--- Hunk 170 ---",
          "[Context before]",
          "11913:             rec( 10, 1, VolumeNumber ),",
          "11914:             rec( 11, 4, BaseDirectoryID ),",
          "11915:             rec( 15, 1, DeleteExistingFileFlag ),",
          "11917:             rec( 20, 4, Reserved4 ),",
          "11918:             rec( 24, 2, FinderAttr ),",
          "11919:             rec( 26, 2, HorizLocation ),",
          "",
          "[Removed Lines]",
          "11916:             rec( 16, 4, CreatorID, BE ),",
          "",
          "[Added Lines]",
          "11929:             rec( 16, 4, CreatorID, ENC_BIG_ENDIAN ),",
          "",
          "---------------",
          "--- Hunk 171 ---",
          "[Context before]",
          "11936:     pkt.Request((18,272), [",
          "11937:             rec( 10, 1, VolumeNumber ),",
          "11938:             rec( 11, 4, BaseDirectoryID ),",
          "11940:             rec( 17, (1,255), Path ),",
          "11941:     ], info_str=(Path, \"AFP 2.0 Get Information: %s\", \", %s\"))",
          "11942:     pkt.Reply(128, [",
          "11945:             rec( 16, 2, AttributesDef16 ),",
          "11956:             rec( 44, 4, Reserved4 ),",
          "11957:             rec( 48, 2, FinderAttr ),",
          "11958:             rec( 50, 2, HorizLocation ),",
          "",
          "[Removed Lines]",
          "11939:             rec( 15, 2, RequestBitMap, BE ),",
          "11943:             rec( 8, 4, AFPEntryID, BE ),",
          "11944:             rec( 12, 4, ParentID, BE ),",
          "11946:             rec( 18, 4, DataForkLen, BE ),",
          "11947:             rec( 22, 4, ResourceForkLen, BE ),",
          "11948:             rec( 26, 2, TotalOffspring, BE ),",
          "11949:             rec( 28, 2, CreationDate, BE ),",
          "11950:             rec( 30, 2, LastAccessedDate, BE ),",
          "11951:             rec( 32, 2, ModifiedDate, BE ),",
          "11952:             rec( 34, 2, ModifiedTime, BE ),",
          "11953:             rec( 36, 2, ArchivedDate, BE ),",
          "11954:             rec( 38, 2, ArchivedTime, BE ),",
          "11955:             rec( 40, 4, CreatorID, BE ),",
          "",
          "[Added Lines]",
          "11952:             rec( 15, 2, RequestBitMap, ENC_BIG_ENDIAN ),",
          "11956:             rec( 8, 4, AFPEntryID, ENC_BIG_ENDIAN ),",
          "11957:             rec( 12, 4, ParentID, ENC_BIG_ENDIAN ),",
          "11959:             rec( 18, 4, DataForkLen, ENC_BIG_ENDIAN ),",
          "11960:             rec( 22, 4, ResourceForkLen, ENC_BIG_ENDIAN ),",
          "11961:             rec( 26, 2, TotalOffspring, ENC_BIG_ENDIAN ),",
          "11962:             rec( 28, 2, CreationDate, ENC_BIG_ENDIAN ),",
          "11963:             rec( 30, 2, LastAccessedDate, ENC_BIG_ENDIAN ),",
          "11964:             rec( 32, 2, ModifiedDate, ENC_BIG_ENDIAN ),",
          "11965:             rec( 34, 2, ModifiedTime, ENC_BIG_ENDIAN ),",
          "11966:             rec( 36, 2, ArchivedDate, ENC_BIG_ENDIAN ),",
          "11967:             rec( 38, 2, ArchivedTime, ENC_BIG_ENDIAN ),",
          "11968:             rec( 40, 4, CreatorID, ENC_BIG_ENDIAN ),",
          "",
          "---------------",
          "--- Hunk 172 ---",
          "[Context before]",
          "11960:             rec( 54, 2, FileDirWindow ),",
          "11961:             rec( 56, 16, Reserved16 ),",
          "11962:             rec( 72, 32, LongName ),",
          "11964:             rec( 108, 12, ShortName ),",
          "11965:             rec( 120, 1, AccessPrivileges ),",
          "11966:             rec( 121, 1, Reserved ),",
          "",
          "[Removed Lines]",
          "11963:             rec( 104, 4, CreatorID, BE ),",
          "",
          "[Added Lines]",
          "11976:             rec( 104, 4, CreatorID, ENC_BIG_ENDIAN ),",
          "",
          "---------------",
          "--- Hunk 173 ---",
          "[Context before]",
          "11973:     pkt.Request((70, 324), [",
          "11974:             rec( 10, 1, VolumeNumber ),",
          "11975:             rec( 11, 4, MacBaseDirectoryID ),",
          "11977:             rec( 17, 2, AttributesDef16 ),",
          "11985:             rec( 35, 4, Reserved4 ),",
          "11986:             rec( 39, 2, FinderAttr ),",
          "11987:             rec( 41, 2, HorizLocation ),",
          "",
          "[Removed Lines]",
          "11976:             rec( 15, 2, RequestBitMap, BE ),",
          "11978:             rec( 19, 2, CreationDate, BE ),",
          "11979:             rec( 21, 2, LastAccessedDate, BE ),",
          "11980:             rec( 23, 2, ModifiedDate, BE ),",
          "11981:             rec( 25, 2, ModifiedTime, BE ),",
          "11982:             rec( 27, 2, ArchivedDate, BE ),",
          "11983:             rec( 29, 2, ArchivedTime, BE ),",
          "11984:             rec( 31, 4, CreatorID, BE ),",
          "",
          "[Added Lines]",
          "11989:             rec( 15, 2, RequestBitMap, ENC_BIG_ENDIAN ),",
          "11991:             rec( 19, 2, CreationDate, ENC_BIG_ENDIAN ),",
          "11992:             rec( 21, 2, LastAccessedDate, ENC_BIG_ENDIAN ),",
          "11993:             rec( 23, 2, ModifiedDate, ENC_BIG_ENDIAN ),",
          "11994:             rec( 25, 2, ModifiedTime, ENC_BIG_ENDIAN ),",
          "11995:             rec( 27, 2, ArchivedDate, ENC_BIG_ENDIAN ),",
          "11996:             rec( 29, 2, ArchivedTime, ENC_BIG_ENDIAN ),",
          "11997:             rec( 31, 4, CreatorID, ENC_BIG_ENDIAN ),",
          "",
          "---------------",
          "--- Hunk 174 ---",
          "[Context before]",
          "12000:     pkt.Request((26, 280), [",
          "12001:             rec( 10, 1, VolumeNumber ),",
          "12002:             rec( 11, 4, MacBaseDirectoryID ),",
          "12007:             rec( 25, (1,255), Path ),",
          "12008:     ], info_str=(Path, \"AFP 2.0 Scan File Information: %s\", \", %s\"))",
          "12009:     pkt.Reply(14, [",
          "",
          "[Removed Lines]",
          "12003:             rec( 15, 4, MacLastSeenID, BE ),",
          "12004:             rec( 19, 2, DesiredResponseCount, BE ),",
          "12005:             rec( 21, 2, SearchBitMap, BE ),",
          "12006:             rec( 23, 2, RequestBitMap, BE ),",
          "",
          "[Added Lines]",
          "12016:             rec( 15, 4, MacLastSeenID, ENC_BIG_ENDIAN ),",
          "12017:             rec( 19, 2, DesiredResponseCount, ENC_BIG_ENDIAN ),",
          "12018:             rec( 21, 2, SearchBitMap, ENC_BIG_ENDIAN ),",
          "12019:             rec( 23, 2, RequestBitMap, ENC_BIG_ENDIAN ),",
          "",
          "---------------",
          "--- Hunk 175 ---",
          "[Context before]",
          "12016:     pkt = NCP(0x2312, \"AFP Get DOS Name From Entry ID\", 'afp')",
          "12017:     pkt.Request(15, [",
          "12018:             rec( 10, 1, VolumeNumber ),",
          "12020:     ])",
          "12021:     pkt.Reply((9,263), [",
          "12022:             rec( 8, (1,255), Path ),",
          "",
          "[Removed Lines]",
          "12019:             rec( 11, 4, AFPEntryID, BE ),",
          "",
          "[Added Lines]",
          "12032:             rec( 11, 4, AFPEntryID, ENC_BIG_ENDIAN ),",
          "",
          "---------------",
          "--- Hunk 176 ---",
          "[Context before]",
          "12026:     pkt = NCP(0x2313, \"AFP Get Macintosh Info On Deleted File\", 'afp')",
          "12027:     pkt.Request(15, [",
          "12028:             rec( 10, 1, VolumeNumber ),",
          "12030:     ])",
          "12031:     pkt.Reply((51,305), [",
          "12033:             rec( 12, 4, Reserved4 ),",
          "12034:             rec( 16, 2, FinderAttr ),",
          "12035:             rec( 18, 2, HorizLocation ),",
          "",
          "[Removed Lines]",
          "12029:             rec( 11, 4, DirectoryNumber, BE ),",
          "12032:             rec( 8, 4, CreatorID, BE ),",
          "",
          "[Added Lines]",
          "12042:             rec( 11, 4, DirectoryNumber, ENC_BIG_ENDIAN ),",
          "12045:             rec( 8, 4, CreatorID, ENC_BIG_ENDIAN ),",
          "",
          "---------------",
          "--- Hunk 177 ---",
          "[Context before]",
          "12037:             rec( 22, 2, FileDirWindow ),",
          "12038:             rec( 24, 16, Reserved16 ),",
          "12039:             rec( 40, 6, ProDOSInfo ),",
          "12041:             rec( 50, (1,255), FileName ),",
          "12042:     ])",
          "12043:     pkt.CompletionCodes([0x0000, 0x9c03, 0xbf00])",
          "12044:     # 2222/2400, 36/00",
          "12045:     pkt = NCP(0x2400, \"Get NCP Extension Information\", 'extension')",
          "12046:     pkt.Request(14, [",
          "12048:     ])",
          "12049:     pkt.Reply((16,270), [",
          "12050:             rec( 8, 4, NCPextensionNumber ),",
          "",
          "[Removed Lines]",
          "12040:             rec( 46, 4, ResourceForkSize, BE ),",
          "12047:             rec( 10, 4, NCPextensionNumber, LE ),",
          "",
          "[Added Lines]",
          "12053:             rec( 46, 4, ResourceForkSize, ENC_BIG_ENDIAN ),",
          "12060:             rec( 10, 4, NCPextensionNumber, ENC_LITTLE_ENDIAN ),",
          "",
          "---------------",
          "--- Hunk 178 ---",
          "[Context before]",
          "12148:     pkt.Reply(14, [",
          "12149:             rec( 8, 1, VolumeNumber ),",
          "12150:             rec( 9, 2, DirectoryID ),",
          "12152:             rec( 13, 1, AccessRightsMask ),",
          "12153:     ])",
          "12154:     pkt.CompletionCodes([0x0000, 0x9600, 0x9804, 0x9b03, 0x9c03, 0xa100,",
          "",
          "[Removed Lines]",
          "12151:             rec( 11, 2, SequenceNumber, BE ),",
          "",
          "[Added Lines]",
          "12164:             rec( 11, 2, SequenceNumber, ENC_BIG_ENDIAN ),",
          "",
          "---------------",
          "--- Hunk 179 ---",
          "[Context before]",
          "12158:     pkt.Request((14, 268), [",
          "12159:             rec( 7, 1, VolumeNumber ),",
          "12160:             rec( 8, 2, DirectoryID ),",
          "12162:             rec( 12, 1, SearchAttributes ),",
          "12163:             rec( 13, (1,255), Path ),",
          "12164:     ], info_str=(Path, \"File Search Continue: %s\", \", %s\"))",
          "",
          "[Removed Lines]",
          "12161:             rec( 10, 2, SequenceNumber, BE ),",
          "",
          "[Added Lines]",
          "12174:             rec( 10, 2, SequenceNumber, ENC_BIG_ENDIAN ),",
          "",
          "---------------",
          "--- Hunk 180 ---",
          "[Context before]",
          "12179:     # 2222/40, 64",
          "12180:     pkt = NCP(0x40, \"Search for a File\", 'file')",
          "12181:     pkt.Request((12, 266), [",
          "12183:             rec( 9, 1, DirHandle ),",
          "12184:             rec( 10, 1, SearchAttributes ),",
          "12185:             rec( 11, (1,255), FileName ),",
          "12186:     ], info_str=(FileName, \"Search for File: %s\", \", %s\"))",
          "12187:     pkt.Reply(40, [",
          "12189:             rec( 10, 2, Reserved2 ),",
          "12190:             rec( 12, 14, FileName14 ),",
          "12191:             rec( 26, 1, AttributesDef ),",
          "12192:             rec( 27, 1, FileExecuteType ),",
          "12193:             rec( 28, 4, FileSize ),",
          "12198:     ])",
          "12199:     pkt.CompletionCodes([0x0000, 0x8900, 0x9600, 0x9804, 0x9b03,",
          "12200:                          0x9c03, 0xa100, 0xfd00, 0xff16])",
          "",
          "[Removed Lines]",
          "12182:             rec( 7, 2, SequenceNumber, BE ),",
          "12188:             rec( 8, 2, SequenceNumber, BE ),",
          "12194:             rec( 32, 2, CreationDate, BE ),",
          "12195:             rec( 34, 2, LastAccessedDate, BE ),",
          "12196:             rec( 36, 2, ModifiedDate, BE ),",
          "12197:             rec( 38, 2, ModifiedTime, BE ),",
          "",
          "[Added Lines]",
          "12195:             rec( 7, 2, SequenceNumber, ENC_BIG_ENDIAN ),",
          "12201:             rec( 8, 2, SequenceNumber, ENC_BIG_ENDIAN ),",
          "12207:             rec( 32, 2, CreationDate, ENC_BIG_ENDIAN ),",
          "12208:             rec( 34, 2, LastAccessedDate, ENC_BIG_ENDIAN ),",
          "12209:             rec( 36, 2, ModifiedDate, ENC_BIG_ENDIAN ),",
          "12210:             rec( 38, 2, ModifiedTime, ENC_BIG_ENDIAN ),",
          "",
          "---------------",
          "--- Hunk 181 ---",
          "[Context before]",
          "12211:             rec( 16, 14, FileName14 ),",
          "12212:             rec( 30, 1, AttributesDef ),",
          "12213:             rec( 31, 1, FileExecuteType ),",
          "12219:     ])",
          "12220:     pkt.CompletionCodes([0x0000, 0x8000, 0x8101, 0x8200, 0x9400,",
          "12221:                          0x9600, 0x9804, 0x9c03, 0xa100, 0xfd00,",
          "",
          "[Removed Lines]",
          "12214:             rec( 32, 4, FileSize, BE ),",
          "12215:             rec( 36, 2, CreationDate, BE ),",
          "12216:             rec( 38, 2, LastAccessedDate, BE ),",
          "12217:             rec( 40, 2, ModifiedDate, BE ),",
          "12218:             rec( 42, 2, ModifiedTime, BE ),",
          "",
          "[Added Lines]",
          "12227:             rec( 32, 4, FileSize, ENC_BIG_ENDIAN ),",
          "12228:             rec( 36, 2, CreationDate, ENC_BIG_ENDIAN ),",
          "12229:             rec( 38, 2, LastAccessedDate, ENC_BIG_ENDIAN ),",
          "12230:             rec( 40, 2, ModifiedDate, ENC_BIG_ENDIAN ),",
          "12231:             rec( 42, 2, ModifiedTime, ENC_BIG_ENDIAN ),",
          "",
          "---------------",
          "--- Hunk 182 ---",
          "[Context before]",
          "12228:     ], info_str=(FileHandle, \"Close File - 0x%s\", \", %s\"))",
          "12229:     pkt.Reply(8)",
          "12230:     pkt.CompletionCodes([0x0000, 0x8800, 0xff1a])",
          "12231:     # 2222/43, 67",
          "12232:     pkt = NCP(0x43, \"Create File\", 'file')",
          "12233:     pkt.Request((10, 264), [",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "12244:     pkt.MakeExpert(\"ncp42_request\")",
          "",
          "---------------",
          "--- Hunk 183 ---",
          "[Context before]",
          "12241:             rec( 16, 14, FileName14 ),",
          "12242:             rec( 30, 1, AttributesDef ),",
          "12243:             rec( 31, 1, FileExecuteType ),",
          "12249:     ])",
          "12250:     pkt.CompletionCodes([0x0000, 0x8000, 0x8101, 0x8401, 0x8501,",
          "12251:                          0x8701, 0x8d00, 0x8f00, 0x9001, 0x9600,",
          "",
          "[Removed Lines]",
          "12244:             rec( 32, 4, FileSize, BE ),",
          "12245:             rec( 36, 2, CreationDate, BE ),",
          "12246:             rec( 38, 2, LastAccessedDate, BE ),",
          "12247:             rec( 40, 2, ModifiedDate, BE ),",
          "12248:             rec( 42, 2, ModifiedTime, BE ),",
          "",
          "[Added Lines]",
          "12258:             rec( 32, 4, FileSize, ENC_BIG_ENDIAN ),",
          "12259:             rec( 36, 2, CreationDate, ENC_BIG_ENDIAN ),",
          "12260:             rec( 38, 2, LastAccessedDate, ENC_BIG_ENDIAN ),",
          "12261:             rec( 40, 2, ModifiedDate, ENC_BIG_ENDIAN ),",
          "12262:             rec( 42, 2, ModifiedTime, ENC_BIG_ENDIAN ),",
          "",
          "---------------",
          "--- Hunk 184 ---",
          "[Context before]",
          "12295:             rec( 8, 6, FileHandle ),",
          "12296:     ], info_str=(FileHandle, \"Get Current Size of File - 0x%s\", \", %s\"))",
          "12297:     pkt.Reply(12, [",
          "12299:     ])",
          "12300:     pkt.CompletionCodes([0x0000, 0x8800])",
          "12301:     # 2222/48, 72",
          "",
          "[Removed Lines]",
          "12298:             rec( 8, 4, FileSize, BE ),",
          "",
          "[Added Lines]",
          "12312:             rec( 8, 4, FileSize, ENC_BIG_ENDIAN ),",
          "",
          "---------------",
          "--- Hunk 185 ---",
          "[Context before]",
          "12303:     pkt.Request(20, [",
          "12304:             rec( 7, 1, Reserved ),",
          "12305:             rec( 8, 6, FileHandle ),",
          "12308:     ], info_str=(FileHandle, \"Read From File - 0x%s\", \", %s\"))",
          "12309:     pkt.Reply(10, [",
          "12311:     ])",
          "12312:     pkt.CompletionCodes([0x0000, 0x8300, 0x8800, 0x9300, 0xff1b])",
          "12313:     # 2222/49, 73",
          "",
          "[Removed Lines]",
          "12306:             rec( 14, 4, FileOffset, BE ),",
          "12307:             rec( 18, 2, MaxBytes, BE ),",
          "12310:             rec( 8, 2, NumBytes, BE ),",
          "",
          "[Added Lines]",
          "12320:             rec( 14, 4, FileOffset, ENC_BIG_ENDIAN ),",
          "12321:             rec( 18, 2, MaxBytes, ENC_BIG_ENDIAN ),",
          "12324:             rec( 8, 2, NumBytes, ENC_BIG_ENDIAN ),",
          "",
          "---------------",
          "--- Hunk 186 ---",
          "[Context before]",
          "12315:     pkt.Request(20, [",
          "12316:             rec( 7, 1, Reserved ),",
          "12317:             rec( 8, 6, FileHandle ),",
          "12320:     ], info_str=(FileHandle, \"Write to a File - 0x%s\", \", %s\"))",
          "12321:     pkt.Reply(8)",
          "12322:     pkt.CompletionCodes([0x0000, 0x0104, 0x8300, 0x8800, 0x9400, 0x9500, 0xa201, 0xff1b])",
          "",
          "[Removed Lines]",
          "12318:             rec( 14, 4, FileOffset, BE ),",
          "12319:             rec( 18, 2, MaxBytes, BE ),",
          "",
          "[Added Lines]",
          "12332:             rec( 14, 4, FileOffset, ENC_BIG_ENDIAN ),",
          "12333:             rec( 18, 2, MaxBytes, ENC_BIG_ENDIAN ),",
          "",
          "---------------",
          "--- Hunk 187 ---",
          "[Context before]",
          "12326:             rec( 7, 1, Reserved ),",
          "12327:             rec( 8, 6, FileHandle ),",
          "12328:             rec( 14, 6, TargetFileHandle ),",
          "12332:     ])",
          "12333:     pkt.Reply(12, [",
          "12335:     ])",
          "12336:     pkt.CompletionCodes([0x0000, 0x0104, 0x8300, 0x8800, 0x9300, 0x9400,",
          "12337:                          0x9500, 0x9600, 0xa201, 0xff1b])",
          "",
          "[Removed Lines]",
          "12329:             rec( 20, 4, FileOffset, BE ),",
          "12330:             rec( 24, 4, TargetFileOffset, BE ),",
          "12331:             rec( 28, 2, BytesToCopy, BE ),",
          "12334:             rec( 8, 4, BytesActuallyTransferred, BE ),",
          "",
          "[Added Lines]",
          "12343:             rec( 20, 4, FileOffset, ENC_BIG_ENDIAN ),",
          "12344:             rec( 24, 4, TargetFileOffset, ENC_BIG_ENDIAN ),",
          "12345:             rec( 28, 2, BytesToCopy, ENC_BIG_ENDIAN ),",
          "12348:             rec( 8, 4, BytesActuallyTransferred, ENC_BIG_ENDIAN ),",
          "",
          "---------------",
          "--- Hunk 188 ---",
          "[Context before]",
          "12340:     pkt.Request(18, [",
          "12341:             rec( 7, 1, Reserved ),",
          "12342:             rec( 8, 6, FileHandle ),",
          "12345:     ], info_str=(FileHandle, \"Set Time and Date Stamp for File - 0x%s\", \", %s\"))",
          "12346:     pkt.Reply(8)",
          "12347:     pkt.CompletionCodes([0x0000, 0x8800, 0x9400, 0x9600, 0xfb08])",
          "",
          "[Removed Lines]",
          "12343:             rec( 14, 2, FileTime, BE ),",
          "12344:             rec( 16, 2, FileDate, BE ),",
          "",
          "[Added Lines]",
          "12357:             rec( 14, 2, FileTime, ENC_BIG_ENDIAN ),",
          "12358:             rec( 16, 2, FileDate, ENC_BIG_ENDIAN ),",
          "",
          "---------------",
          "--- Hunk 189 ---",
          "[Context before]",
          "12359:             rec( 16, 14, FileName14 ),",
          "12360:             rec( 30, 1, AttributesDef ),",
          "12361:             rec( 31, 1, FileExecuteType ),",
          "12367:     ])",
          "12368:     pkt.CompletionCodes([0x0000, 0x8000, 0x8101, 0x8200, 0x9400,",
          "12369:                          0x9600, 0x9804, 0x9c03, 0xa100, 0xfd00,",
          "",
          "[Removed Lines]",
          "12362:             rec( 32, 4, FileSize, BE ),",
          "12363:             rec( 36, 2, CreationDate, BE ),",
          "12364:             rec( 38, 2, LastAccessedDate, BE ),",
          "12365:             rec( 40, 2, ModifiedDate, BE ),",
          "12366:             rec( 42, 2, ModifiedTime, BE ),",
          "",
          "[Added Lines]",
          "12376:             rec( 32, 4, FileSize, ENC_BIG_ENDIAN ),",
          "12377:             rec( 36, 2, CreationDate, ENC_BIG_ENDIAN ),",
          "12378:             rec( 38, 2, LastAccessedDate, ENC_BIG_ENDIAN ),",
          "12379:             rec( 40, 2, ModifiedDate, ENC_BIG_ENDIAN ),",
          "12380:             rec( 42, 2, ModifiedTime, ENC_BIG_ENDIAN ),",
          "",
          "---------------",
          "--- Hunk 190 ---",
          "[Context before]",
          "12381:             rec( 16, 14, FileName14 ),",
          "12382:             rec( 30, 1, AttributesDef ),",
          "12383:             rec( 31, 1, FileExecuteType ),",
          "12389:     ])",
          "12390:     pkt.CompletionCodes([0x0000, 0x8000, 0x8101, 0x8401, 0x8501,",
          "12391:                          0x8701, 0x8d00, 0x8f00, 0x9001, 0x9600,",
          "",
          "[Removed Lines]",
          "12384:             rec( 32, 4, FileSize, BE ),",
          "12385:             rec( 36, 2, CreationDate, BE ),",
          "12386:             rec( 38, 2, LastAccessedDate, BE ),",
          "12387:             rec( 40, 2, ModifiedDate, BE ),",
          "12388:             rec( 42, 2, ModifiedTime, BE ),",
          "",
          "[Added Lines]",
          "12398:             rec( 32, 4, FileSize, ENC_BIG_ENDIAN ),",
          "12399:             rec( 36, 2, CreationDate, ENC_BIG_ENDIAN ),",
          "12400:             rec( 38, 2, LastAccessedDate, ENC_BIG_ENDIAN ),",
          "12401:             rec( 40, 2, ModifiedDate, ENC_BIG_ENDIAN ),",
          "12402:             rec( 42, 2, ModifiedTime, ENC_BIG_ENDIAN ),",
          "",
          "---------------",
          "--- Hunk 191 ---",
          "[Context before]",
          "12418:             rec( 16, 14, FileName14 ),",
          "12419:             rec( 30, 1, AttributesDef ),",
          "12420:             rec( 31, 1, FileExecuteType ),",
          "12426:     ])",
          "12427:     pkt.CompletionCodes([0x0000, 0x8000, 0x8101, 0x8401, 0x8501,",
          "12428:                          0x8701, 0x8d00, 0x8f00, 0x9001, 0x9600,",
          "",
          "[Removed Lines]",
          "12421:             rec( 32, 4, FileSize, BE ),",
          "12422:             rec( 36, 2, CreationDate, BE ),",
          "12423:             rec( 38, 2, LastAccessedDate, BE ),",
          "12424:             rec( 40, 2, ModifiedDate, BE ),",
          "12425:             rec( 42, 2, ModifiedTime, BE ),",
          "",
          "[Added Lines]",
          "12435:             rec( 32, 4, FileSize, ENC_BIG_ENDIAN ),",
          "12436:             rec( 36, 2, CreationDate, ENC_BIG_ENDIAN ),",
          "12437:             rec( 38, 2, LastAccessedDate, ENC_BIG_ENDIAN ),",
          "12438:             rec( 40, 2, ModifiedDate, ENC_BIG_ENDIAN ),",
          "12439:             rec( 42, 2, ModifiedTime, ENC_BIG_ENDIAN ),",
          "",
          "---------------",
          "--- Hunk 192 ---",
          "[Context before]",
          "12430:     # 2222/55, 85",
          "12431:     pkt = NCP(0x55, \"Get Sparse File Data Block Bit Map\", 'file', has_length=1)",
          "12432:     pkt.Request(19, [",
          "12434:             rec( 9, 6, FileHandle ),",
          "12435:             rec( 15, 4, FileOffset ),",
          "12436:     ], info_str=(FileHandle, \"Get Sparse File Data Block Bitmap for File - 0x%s\", \", %s\"))",
          "",
          "[Removed Lines]",
          "12433:             rec( 7, 2, SubFuncStrucLen, BE ),",
          "",
          "[Added Lines]",
          "12447:             rec( 7, 2, SubFuncStrucLen, ENC_BIG_ENDIAN ),",
          "",
          "---------------",
          "--- Hunk 193 ---",
          "[Context before]",
          "12452:     pkt = NCP(0x5602, \"Write Extended Attribute\", 'extended', has_length=0 )",
          "12453:     pkt.Request((35,97), [",
          "12454:             rec( 8, 2, EAFlags ),",
          "12456:             rec( 14, 4, ReservedOrDirectoryNumber ),",
          "12457:             rec( 18, 4, TtlWriteDataSize ),",
          "12458:             rec( 22, 4, FileOffset ),",
          "",
          "[Removed Lines]",
          "12455:             rec( 10, 4, EAHandleOrNetWareHandleOrVolume, BE ),",
          "",
          "[Added Lines]",
          "12469:             rec( 10, 4, EAHandleOrNetWareHandleOrVolume, ENC_BIG_ENDIAN ),",
          "",
          "---------------",
          "--- Hunk 194 ---",
          "[Context before]",
          "12596:     pkt.CompletionCodes([0x0000, 0x0102, 0x7f00, 0x8001, 0x8101, 0x8401, 0x8501,",
          "12597:                          0x8701, 0x8900, 0x8d00, 0x8f00, 0x9001, 0x9400, 0x9600,",
          "12598:                          0x9804, 0x9900, 0x9b03, 0x9c03, 0xa500, 0xa802, 0xa901, 0xbf00, 0xfd00, 0xff16])",
          "12599:     # 2222/5702, 87/02",
          "12600:     pkt = NCP(0x5702, \"Initialize Search\", 'file', has_length=0)",
          "12601:     pkt.Request( (18,272), [",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "12613:     pkt.MakeExpert(\"file_rights\")",
          "",
          "---------------",
          "--- Hunk 195 ---",
          "[Context before]",
          "12728:             rec( 10, 1, SrcNameSpace ),",
          "12729:             rec( 11, 1, DestNameSpace ),",
          "12730:             rec( 12, 2, SearchAttributesLow ),",
          "12732:             rec( 16, 2, ExtendedInfo ),",
          "12733:             rec( 18, 1, VolumeNumber ),",
          "12734:             rec( 19, 4, DirectoryBase ),",
          "",
          "[Removed Lines]",
          "12731:             rec( 14, 2, ReturnInfoMask, LE ),",
          "",
          "[Added Lines]",
          "12746:             rec( 14, 2, ReturnInfoMask, ENC_LITTLE_ENDIAN ),",
          "",
          "---------------",
          "--- Hunk 196 ---",
          "[Context before]",
          "12805:             rec( 19, 1, FileExtendedAttributes ),",
          "12806:             rec( 20, 2, CreationDate ),",
          "12807:             rec( 22, 2, CreationTime ),",
          "12809:             rec( 28, 2, ModifiedDate ),",
          "12810:             rec( 30, 2, ModifiedTime ),",
          "12812:             rec( 36, 2, ArchivedDate ),",
          "12813:             rec( 38, 2, ArchivedTime ),",
          "12815:             rec( 44, 2, LastAccessedDate ),",
          "12816:             rec( 46, 2, InheritedRightsMask ),",
          "12817:             rec( 48, 2, InheritanceRevokeMask ),",
          "",
          "[Removed Lines]",
          "12808:             rec( 24, 4, CreatorID, BE ),",
          "12811:             rec( 32, 4, ModifierID, BE ),",
          "12814:             rec( 40, 4, ArchiverID, BE ),",
          "",
          "[Added Lines]",
          "12823:             rec( 24, 4, CreatorID, ENC_BIG_ENDIAN ),",
          "12826:             rec( 32, 4, ModifierID, ENC_BIG_ENDIAN ),",
          "12829:             rec( 40, 4, ArchiverID, ENC_BIG_ENDIAN ),",
          "",
          "---------------",
          "--- Hunk 197 ---",
          "[Context before]",
          "12933:             rec( 8, 4, SequenceNumber ),",
          "12934:             rec( 12, 2, DeletedTime ),",
          "12935:             rec( 14, 2, DeletedDate ),",
          "12937:             rec( 20, 4, VolumeID ),",
          "12938:             rec( 24, 4, DirectoryBase ),",
          "12939:             srec( DSSpaceAllocateStruct, req_cond=\"(ncp.ext_info_newstyle == 0) && (ncp.ret_info_mask_alloc == 1)\" ),",
          "",
          "[Removed Lines]",
          "12936:             rec( 16, 4, DeletedID, BE ),",
          "",
          "[Added Lines]",
          "12951:             rec( 16, 4, DeletedID, ENC_BIG_ENDIAN ),",
          "",
          "---------------",
          "--- Hunk 198 ---",
          "[Context before]",
          "13267:             rec( 33, (1,255), Path, repeat=\"x\" ),",
          "13268:     ], info_str=(Path, \"Open or Create File: %s\", \"/%s\"))",
          "13269:     pkt.Reply(NO_LENGTH_CHECK, [",
          "13271:             rec( 12, 1, OpenCreateAction ),",
          "13272:             rec( 13, 1, Reserved ),",
          "13273:             srec( DSSpaceAllocateStruct, req_cond=\"(ncp.ext_info_newstyle == 0) && (ncp.ret_info_mask_alloc == 1)\" ),",
          "",
          "[Removed Lines]",
          "13270:             rec( 8, 4, FileHandle, BE ),",
          "",
          "[Added Lines]",
          "13285:             rec( 8, 4, FileHandle, ENC_BIG_ENDIAN ),",
          "",
          "---------------",
          "--- Hunk 199 ---",
          "[Context before]",
          "13310:     pkt.CompletionCodes([0x0000, 0x0102, 0x8000, 0x8101, 0x8401, 0x8501,",
          "13311:                          0x8701, 0x8d00, 0x8f00, 0x9001, 0x9600,",
          "13312:                          0x9804, 0x9b03, 0x9c03, 0xbe00, 0xbf00, 0xfd00, 0xff16])",
          "13313:     # 2222/571F, 87/31",
          "13314:     pkt = NCP(0x571F, \"Get File Information\", 'file', has_length=0)",
          "13315:     pkt.Request(15, [",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "13328:     pkt.MakeExpert(\"file_rights\")",
          "",
          "---------------",
          "--- Hunk 200 ---",
          "[Context before]",
          "13347:             rec( 29, (1,255), Path, repeat=\"x\" ),",
          "13348:     ], info_str=(Path, \"Open or Create with Op-Lock: %s\", \"/%s\"))",
          "13349:     pkt.Reply( NO_LENGTH_CHECK, [",
          "13351:             rec( 12, 1, OpenCreateAction ),",
          "13352:             rec( 13, 1, OCRetFlags ),",
          "13353:             srec( DSSpaceAllocateStruct, req_cond=\"(ncp.ret_info_mask != 0x0000) && (ncp.ext_info_newstyle == 0) && (ncp.ret_info_mask_alloc == 1)\" ),",
          "",
          "[Removed Lines]",
          "13350:             rec( 8, 4, FileHandle, BE ),",
          "",
          "[Added Lines]",
          "13366:             rec( 8, 4, FileHandle, ENC_BIG_ENDIAN ),",
          "",
          "---------------",
          "--- Hunk 201 ---",
          "[Context before]",
          "13404:     pkt.CompletionCodes([0x0000, 0x0102, 0x7f00, 0x8000, 0x8101, 0x8401, 0x8501,",
          "13405:                          0x8701, 0x8d00, 0x8f00, 0x9001, 0x9600,",
          "13406:                          0x9804, 0x9b03, 0x9c03, 0xbf00, 0xfd00, 0xff16])",
          "13407:     # 2222/5721, 87/33",
          "13408:     pkt = NCP(0x5721, \"Open/Create File or Subdirectory II with Callback\", 'file', has_length=0)",
          "13409:     pkt.Request((34, 288), [",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "13423:     pkt.MakeExpert(\"file_rights\")",
          "",
          "---------------",
          "--- Hunk 202 ---",
          "[Context before]",
          "13481:     pkt.CompletionCodes([0x0000, 0x0102, 0x8000, 0x8101, 0x8401, 0x8501,",
          "13482:                          0x8701, 0x8d00, 0x8f00, 0x9001, 0x9600,",
          "13483:                          0x9804, 0x9b03, 0x9c03, 0xbe00, 0xbf00, 0xfd00, 0xff16])",
          "13484:     # 2222/5722, 87/34",
          "13485:     pkt = NCP(0x5722, \"Open CallBack Control (Op-Lock)\", 'file', has_length=0)",
          "13486:     pkt.Request(13, [",
          "13488:             rec( 14, 1, CCFunction ),",
          "13489:     ])",
          "13490:     pkt.Reply(8)",
          "13491:     pkt.CompletionCodes([0x0000, 0x8000, 0x8800, 0xff16])",
          "13492:     # 2222/5723, 87/35",
          "13493:     pkt = NCP(0x5723, \"Modify DOS Attributes on a File or Subdirectory\", 'file', has_length=0)",
          "13494:     pkt.Request((28, 282), [",
          "",
          "[Removed Lines]",
          "13487:             rec( 10, 4, CCFileHandle, BE ),",
          "",
          "[Added Lines]",
          "13501:     pkt.MakeExpert(\"file_rights\")",
          "13505:             rec( 10, 4, CCFileHandle, ENC_BIG_ENDIAN ),",
          "13510:     pkt.MakeExpert(\"ncp5722_request\")",
          "",
          "---------------",
          "--- Hunk 203 ---",
          "[Context before]",
          "13645:     pkt.Request((24,278), [",
          "13646:             rec( 8, 1, NameSpace ),",
          "13647:             rec( 9, 1, Reserved ),",
          "13649:             rec( 12, 4, SequenceNumber ),",
          "13650:             rec( 16, 1, VolumeNumber ),",
          "13651:             rec( 17, 4, DirectoryBase ),",
          "",
          "[Removed Lines]",
          "13648:             rec( 10, 2, CtrlFlags, LE ),",
          "",
          "[Added Lines]",
          "13667:             rec( 10, 2, CtrlFlags, ENC_LITTLE_ENDIAN ),",
          "",
          "---------------",
          "--- Hunk 204 ---",
          "[Context before]",
          "13706:             rec( 12, 4, DirectoryNumber ),",
          "13707:             rec( 16, 2, AccessRightsMaskWord ),",
          "13708:             rec( 18, 2, NewAccessRights ),",
          "13710:     ])",
          "13711:     pkt.Reply(16, [",
          "13714:     ])",
          "13715:     pkt.CompletionCodes([0x0000, 0x7300, 0x8000, 0x8101, 0x8401, 0x8501,",
          "13716:                          0x8701, 0x8800, 0x8d00, 0x8f00, 0x9001, 0x9600,",
          "13717:                          0x9804, 0x9b03, 0x9c03, 0xbf00, 0xfd00, 0xff16])",
          "13718:     # 2222/5740, 87/64",
          "13719:     pkt = NCP(0x5740, \"Read from File\", 'file', has_length=0)",
          "13720:     pkt.Request(22, [",
          "13724: ])",
          "13725:     pkt.Reply(10, [",
          "13727: ])",
          "13728:     pkt.CompletionCodes([0x0000, 0x8300, 0x8800, 0x9300, 0x9500, 0xa201, 0xfd00, 0xff1b])",
          "13729:     # 2222/5741, 87/65",
          "13730:     pkt = NCP(0x5741, \"Write to File\", 'file', has_length=0)",
          "13731:     pkt.Request(22, [",
          "13735: ])",
          "13736:     pkt.Reply(8)",
          "13737:     pkt.CompletionCodes([0x0000, 0x0102, 0x8300, 0x8800, 0x9400, 0x9500, 0xa201, 0xfd00, 0xff1b])",
          "13738:     # 2222/5742, 87/66",
          "13739:     pkt = NCP(0x5742, \"Get Current Size of File\", 'file', has_length=0)",
          "13740:     pkt.Request(12, [",
          "13742: ])",
          "13743:     pkt.Reply(16, [",
          "13744:     rec( 8, 8, FileSize64bit),",
          "",
          "[Removed Lines]",
          "13709:             rec( 20, 4, FileHandle, BE ),",
          "13712:             rec( 8, 4, FileHandle, BE ),",
          "13713:             rec( 12, 4, EffectiveRights, LE ),",
          "13721:     rec( 8, 4, FileHandle, BE ),",
          "13722:     rec( 12, 8, StartOffset64bit, BE ),",
          "13723:     rec( 20, 2, NumBytes, BE ),",
          "13726:     rec( 8, 2, NumBytes, BE),",
          "13732:     rec( 8, 4, FileHandle, BE ),",
          "13733:     rec( 12, 8, StartOffset64bit, BE ),",
          "13734:     rec( 20, 2, NumBytes, BE ),",
          "13741:     rec( 8, 4, FileHandle, BE ),",
          "",
          "[Added Lines]",
          "13728:             rec( 20, 4, FileHandle, ENC_BIG_ENDIAN ),",
          "13731:             rec( 8, 4, FileHandle, ENC_BIG_ENDIAN ),",
          "13732:             rec( 12, 4, EffectiveRights, ENC_LITTLE_ENDIAN ),",
          "13737:     pkt.MakeExpert(\"ncp572c\")",
          "13741:     rec( 8, 4, FileHandle, ENC_BIG_ENDIAN ),",
          "13742:     rec( 12, 8, StartOffset64bit, ENC_BIG_ENDIAN ),",
          "13743:     rec( 20, 2, NumBytes, ENC_BIG_ENDIAN ),",
          "13746:     rec( 8, 2, NumBytes, ENC_BIG_ENDIAN),",
          "13752:     rec( 8, 4, FileHandle, ENC_BIG_ENDIAN ),",
          "13753:     rec( 12, 8, StartOffset64bit, ENC_BIG_ENDIAN ),",
          "13754:     rec( 20, 2, NumBytes, ENC_BIG_ENDIAN ),",
          "13761:     rec( 8, 4, FileHandle, ENC_BIG_ENDIAN ),",
          "",
          "---------------",
          "--- Hunk 205 ---",
          "[Context before]",
          "13747:     # 2222/5743, 87/67",
          "13748:     pkt = NCP(0x5743, \"Log Physical Record\", 'file', has_length=0)",
          "13749:     pkt.Request(36, [",
          "13755: ])",
          "13756:     pkt.Reply(8)",
          "13757:     pkt.CompletionCodes([0x0000, 0x7f00, 0x8800, 0x9600, 0xfb08, 0xfd02, 0xff01])",
          "13758:     # 2222/5744, 87/68",
          "13759:     pkt = NCP(0x5744, \"Release Physical Record\", 'file', has_length=0)",
          "13760:     pkt.Request(28, [",
          "13764: ])",
          "13765:     pkt.Reply(8)",
          "13766:     pkt.CompletionCodes([0x0000, 0x7300, 0x8000, 0x8101, 0x8401, 0x8501,",
          "",
          "[Removed Lines]",
          "13750:     rec( 8, 4, LockFlag, BE ),",
          "13751:     rec(12, 4, FileHandle, BE ),",
          "13752:     rec(16, 8, StartOffset64bit, BE ),",
          "13753:     rec(24, 8, Length64bit, BE ),",
          "13754:     rec(32, 4, LockTimeout, BE),",
          "13761:     rec(8, 4, FileHandle, BE ),",
          "13762:     rec(12, 8, StartOffset64bit, BE ),",
          "13763:     rec(20, 8, Length64bit, BE ),",
          "",
          "[Added Lines]",
          "13770:     rec( 8, 4, LockFlag, ENC_BIG_ENDIAN ),",
          "13771:     rec(12, 4, FileHandle, ENC_BIG_ENDIAN ),",
          "13772:     rec(16, 8, StartOffset64bit, ENC_BIG_ENDIAN ),",
          "13773:     rec(24, 8, Length64bit, ENC_BIG_ENDIAN ),",
          "13774:     rec(32, 4, LockTimeout, ENC_BIG_ENDIAN),",
          "13781:     rec(8, 4, FileHandle, ENC_BIG_ENDIAN ),",
          "13782:     rec(12, 8, StartOffset64bit, ENC_BIG_ENDIAN ),",
          "13783:     rec(20, 8, Length64bit, ENC_BIG_ENDIAN ),",
          "",
          "---------------",
          "--- Hunk 206 ---",
          "[Context before]",
          "13769:     # 2222/5745, 87/69",
          "13770:     pkt = NCP(0x5745, \"Clear Physical Record\", 'file', has_length=0)",
          "13771:     pkt.Request(28, [",
          "13775: ])",
          "13776:     pkt.Reply(8)",
          "13777:     pkt.CompletionCodes([0x0000, 0x7300, 0x8000, 0x8101, 0x8401, 0x8501,",
          "",
          "[Removed Lines]",
          "13772:     rec(8, 4, FileHandle, BE ),",
          "13773:     rec(12, 8, StartOffset64bit, BE ),",
          "13774:     rec(20, 8, Length64bit, BE ),",
          "",
          "[Added Lines]",
          "13792:     rec(8, 4, FileHandle, ENC_BIG_ENDIAN ),",
          "13793:     rec(12, 8, StartOffset64bit, ENC_BIG_ENDIAN ),",
          "13794:     rec(20, 8, Length64bit, ENC_BIG_ENDIAN ),",
          "",
          "---------------",
          "--- Hunk 207 ---",
          "[Context before]",
          "13780:     # 2222/5746, 87/70",
          "13781:     pkt = NCP(0x5746, \"Copy from One File to Another (64 Bit offset capable)\", 'file', has_length=0)",
          "13782:     pkt.Request(44, [",
          "13788: ])",
          "13789:     pkt.Reply(16, [",
          "13791:     ])",
          "13792:     pkt.CompletionCodes([0x0000, 0x0104, 0x8301, 0x8800, 0x9300, 0x9400,",
          "13793:                          0x9500, 0x9600, 0xa201])",
          "13794:     # 2222/5747, 87/71",
          "13795:     pkt = NCP(0x5747, \"Get Sparse File Data Block Bit Map\", 'file', has_length=0)",
          "13796:     pkt.Request(23, [",
          "13800: ])",
          "13801:     pkt.Reply(NO_LENGTH_CHECK, [",
          "13802:             rec( 8, 1, ExtentListFormat ),",
          "",
          "[Removed Lines]",
          "13783:     rec(8, 6, SourceFileHandle, BE ),",
          "13784:     rec(14, 6, TargetFileHandle, BE ),",
          "13785:     rec(20, 8, SourceFileOffset, BE ),",
          "13786:     rec(28, 8, TargetFileOffset64bit, BE ),",
          "13787:     rec(36, 8, BytesToCopy64bit, BE ),",
          "13790:             rec( 8, 8, BytesActuallyTransferred64bit, BE ),",
          "13797:     rec(8, 6, SourceFileHandle, BE ),",
          "13798:     rec(14, 8, SourceFileOffset, BE ),",
          "13799:     rec(22, 1, ExtentListFormat, BE ),",
          "",
          "[Added Lines]",
          "13803:     rec(8, 6, SourceFileHandle, ENC_BIG_ENDIAN ),",
          "13804:     rec(14, 6, TargetFileHandle, ENC_BIG_ENDIAN ),",
          "13805:     rec(20, 8, SourceFileOffset, ENC_BIG_ENDIAN ),",
          "13806:     rec(28, 8, TargetFileOffset64bit, ENC_BIG_ENDIAN ),",
          "13807:     rec(36, 8, BytesToCopy64bit, ENC_BIG_ENDIAN ),",
          "13810:             rec( 8, 8, BytesActuallyTransferred64bit, ENC_BIG_ENDIAN ),",
          "13817:     rec(8, 6, SourceFileHandle, ENC_BIG_ENDIAN ),",
          "13818:     rec(14, 8, SourceFileOffset, ENC_BIG_ENDIAN ),",
          "13819:     rec(22, 1, ExtentListFormat, ENC_BIG_ENDIAN ),",
          "",
          "---------------",
          "--- Hunk 208 ---",
          "[Context before]",
          "13811:      # 2222/5748, 87/72",
          "13812:     pkt = NCP(0x5748, \"Read a File\", 'file', has_length=0)",
          "13813:     pkt.Request(24, [",
          "13817: ])",
          "13818:     pkt.Reply(NO_LENGTH_CHECK, [",
          "13820:  rec( 12, PROTO_LENGTH_UNKNOWN, Data64),",
          "13821:  #decoded in packet-ncp2222.inc",
          "13823:  ])",
          "13824:     pkt.CompletionCodes([0x0000, 0x8300, 0x8800, 0x9300, 0x9500, 0xa201, 0xfd00, 0xff1b])",
          "13826:      # 2222/5749, 87/73",
          "13827:     pkt = NCP(0x5749, \"Write to a File\", 'file', has_length=0)",
          "13828:     pkt.Request(24, [",
          "13832: ])",
          "13833:     pkt.Reply(8)",
          "13834:     pkt.CompletionCodes([0x0000, 0x0102, 0x8300, 0x8800, 0x9400, 0x9500, 0xa201, 0xfd00, 0xff1b])",
          "",
          "[Removed Lines]",
          "13814:     rec( 8, 4, FileHandle, BE ),",
          "13815:     rec( 12, 8, StartOffset64bit, BE ),",
          "13816:     rec( 20, 4, NumBytesLong, BE ),",
          "13819:     rec( 8, 4, NumBytesLong, BE),",
          "13822:  # rec( NumBytesLong, 4, BytesActuallyTransferred64bit, BE),",
          "13829:     rec( 8, 4, FileHandle, BE ),",
          "13830:     rec( 12, 8, StartOffset64bit, BE ),",
          "13831:     rec( 20, 4, NumBytesLong, BE ),",
          "",
          "[Added Lines]",
          "13834:     rec( 8, 4, FileHandle, ENC_BIG_ENDIAN ),",
          "13835:     rec( 12, 8, StartOffset64bit, ENC_BIG_ENDIAN ),",
          "13836:     rec( 20, 4, NumBytesLong, ENC_BIG_ENDIAN ),",
          "13839:     rec( 8, 4, NumBytesLong, ENC_BIG_ENDIAN),",
          "13842:  # rec( NumBytesLong, 4, BytesActuallyTransferred64bit, ENC_BIG_ENDIAN),",
          "13849:     rec( 8, 4, FileHandle, ENC_BIG_ENDIAN ),",
          "13850:     rec( 12, 8, StartOffset64bit, ENC_BIG_ENDIAN ),",
          "13851:     rec( 20, 4, NumBytesLong, ENC_BIG_ENDIAN ),",
          "",
          "---------------",
          "--- Hunk 209 ---",
          "[Context before]",
          "14045:             rec( 35, (2,255), Path16, repeat=\"x\" ),",
          "14046:     ], info_str=(Path16, \"Open or Create File or Subdirectory: %s\", \"/%s\"))",
          "14047:     pkt.Reply( NO_LENGTH_CHECK, [",
          "14049:             rec( 12, 1, OpenCreateAction ),",
          "14050:             rec( 13, 1, Reserved ),",
          "14051:             srec( DSSpaceAllocateStruct, req_cond=\"(ncp.ret_info_mask != 0x0000) && (ncp.ext_info_newstyle == 0) && (ncp.ret_info_mask_alloc == 1)\" ),",
          "",
          "[Removed Lines]",
          "14048:             rec( 8, 4, FileHandle, BE ),",
          "",
          "[Added Lines]",
          "14068:             rec( 8, 4, FileHandle, ENC_BIG_ENDIAN ),",
          "",
          "---------------",
          "--- Hunk 210 ---",
          "[Context before]",
          "14103:     pkt.CompletionCodes([0x0000, 0x0102, 0x7f00, 0x8000, 0x8101, 0x8401, 0x8501,",
          "14104:                                             0x8701, 0x8d00, 0x8f00, 0x9001, 0x9600,",
          "14105:                                             0x9804, 0x9900, 0x9b03, 0x9c03, 0xa901, 0xa500, 0xaa00, 0xbf00, 0xfd00, 0xff16])",
          "14106:     # 2222/5902, 89/02",
          "14107:     pkt = NCP(0x5902, \"Initialize Search\", 'enhanced', has_length=0)",
          "14108:     pkt.Request( (25,278), [",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14126:     pkt.MakeExpert(\"file_rights\")",
          "",
          "---------------",
          "--- Hunk 211 ---",
          "[Context before]",
          "14241:             rec( 8, 1, SrcNameSpace ),",
          "14242:             rec( 9, 1, DestNameSpace ),",
          "14243:             rec( 10, 2, SearchAttributesLow ),",
          "14245:             rec( 14, 2, ExtendedInfo ),",
          "14246:             rec( 16, 4, DirectoryBase ),",
          "14247:             rec( 20, 1, VolumeNumber ),",
          "",
          "[Removed Lines]",
          "14244:             rec( 12, 2, ReturnInfoMask, LE ),",
          "",
          "[Added Lines]",
          "14265:             rec( 12, 2, ReturnInfoMask, ENC_LITTLE_ENDIAN ),",
          "",
          "---------------",
          "--- Hunk 212 ---",
          "[Context before]",
          "14325:             rec( 19, 1, FileExtendedAttributes ),",
          "14326:             rec( 20, 2, CreationDate ),",
          "14327:             rec( 22, 2, CreationTime ),",
          "14329:             rec( 28, 2, ModifiedDate ),",
          "14330:             rec( 30, 2, ModifiedTime ),",
          "14332:             rec( 36, 2, ArchivedDate ),",
          "14333:             rec( 38, 2, ArchivedTime ),",
          "14335:             rec( 44, 2, LastAccessedDate ),",
          "14336:             rec( 46, 2, InheritedRightsMask ),",
          "14337:             rec( 48, 2, InheritanceRevokeMask ),",
          "",
          "[Removed Lines]",
          "14328:             rec( 24, 4, CreatorID, BE ),",
          "14331:             rec( 32, 4, ModifierID, BE ),",
          "14334:             rec( 40, 4, ArchiverID, BE ),",
          "",
          "[Added Lines]",
          "14349:             rec( 24, 4, CreatorID, ENC_BIG_ENDIAN ),",
          "14352:             rec( 32, 4, ModifierID, ENC_BIG_ENDIAN ),",
          "14355:             rec( 40, 4, ArchiverID, ENC_BIG_ENDIAN ),",
          "",
          "---------------",
          "--- Hunk 213 ---",
          "[Context before]",
          "14467:             rec( 8, 4, SequenceNumber ),",
          "14468:             rec( 12, 2, DeletedTime ),",
          "14469:             rec( 14, 2, DeletedDate ),",
          "14471:             rec( 20, 4, VolumeID ),",
          "14472:             rec( 24, 4, DirectoryBase ),",
          "14473:             srec( DSSpaceAllocateStruct, req_cond=\"(ncp.ext_info_newstyle == 0) && (ncp.ret_info_mask_alloc == 1)\" ),",
          "",
          "[Removed Lines]",
          "14470:             rec( 16, 4, DeletedID, BE ),",
          "",
          "[Added Lines]",
          "14491:             rec( 16, 4, DeletedID, ENC_BIG_ENDIAN ),",
          "",
          "---------------",
          "--- Hunk 214 ---",
          "[Context before]",
          "14674:             rec( 29, (2,255), Path16, repeat=\"x\" ),",
          "14675:     ], info_str=(Path16, \"Get Effective Rights for: %s\", \"/%s\"))",
          "14676:     pkt.Reply(NO_LENGTH_CHECK, [",
          "14678:             srec( DSSpaceAllocateStruct, req_cond=\"(ncp.ext_info_newstyle == 0) && (ncp.ret_info_mask_alloc == 1)\" ),",
          "14679:             srec( PadDSSpaceAllocate, req_cond=\"(ncp.ext_info_newstyle == 0) && (ncp.ret_info_mask_alloc == 0)\" ),",
          "14680:             srec( AttributesStruct, req_cond=\"(ncp.ext_info_newstyle == 0) && (ncp.ret_info_mask_attr == 1)\" ),",
          "",
          "[Removed Lines]",
          "14677:             rec( 8, 2, EffectiveRights, LE ),",
          "",
          "[Added Lines]",
          "14698:             rec( 8, 2, EffectiveRights, ENC_LITTLE_ENDIAN ),",
          "",
          "---------------",
          "--- Hunk 215 ---",
          "[Context before]",
          "14738:             rec( 39, (2,255), Path16, repeat=\"x\" ),",
          "14739:     ], info_str=(Path16, \"Open or Create File: %s\", \"/%s\"))",
          "14740:     pkt.Reply(NO_LENGTH_CHECK, [",
          "14742:             rec( 12, 1, OpenCreateAction ),",
          "14743:             rec( 13, 1, Reserved ),",
          "14744:             srec( DSSpaceAllocateStruct, req_cond=\"(ncp.ext_info_newstyle == 0) && (ncp.ret_info_mask_alloc == 1)\" ),",
          "",
          "[Removed Lines]",
          "14741:             rec( 8, 4, FileHandle, BE ),",
          "",
          "[Added Lines]",
          "14762:             rec( 8, 4, FileHandle, ENC_BIG_ENDIAN ),",
          "",
          "---------------",
          "--- Hunk 216 ---",
          "[Context before]",
          "14782:     pkt.CompletionCodes([0x0000, 0x0102, 0x8000, 0x8101, 0x8401, 0x8501,",
          "14783:                          0x8701, 0x8d00, 0x8f00, 0x9001, 0x9600,",
          "14784:                          0x9804, 0x9b03, 0x9c03, 0xa901, 0xaa00, 0xbf00, 0xfd00, 0xff16])",
          "14785:     # 2222/5920, 89/32",
          "14786:     pkt = NCP(0x5920, \"Open/Create File or Subdirectory with Callback\", 'enhanced', has_length=0)",
          "14787:     pkt.Request((37, 290), [",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14806:     pkt.MakeExpert(\"file_rights\")",
          "",
          "---------------",
          "--- Hunk 217 ---",
          "[Context before]",
          "14801:             rec( 35, (2,255), Path16, repeat=\"x\" ),",
          "14802:     ], info_str=(Path16, \"Open or Create with Op-Lock: %s\", \"/%s\"))",
          "14803:     pkt.Reply( NO_LENGTH_CHECK, [",
          "14805:             rec( 12, 1, OpenCreateAction ),",
          "14806:             rec( 13, 1, OCRetFlags ),",
          "14807:             srec( DSSpaceAllocateStruct, req_cond=\"(ncp.ret_info_mask != 0x0000) && (ncp.ext_info_newstyle == 0) && (ncp.ret_info_mask_alloc == 1)\" ),",
          "",
          "[Removed Lines]",
          "14804:             rec( 8, 4, FileHandle, BE ),",
          "",
          "[Added Lines]",
          "14826:             rec( 8, 4, FileHandle, ENC_BIG_ENDIAN ),",
          "",
          "---------------",
          "--- Hunk 218 ---",
          "[Context before]",
          "14859:     pkt.CompletionCodes([0x0000, 0x0102, 0x7f00, 0x8000, 0x8101, 0x8401, 0x8501,",
          "14860:                          0x8701, 0x8d00, 0x8f00, 0x9001, 0x9400, 0x9600,",
          "14861:                          0x9804, 0x9b03, 0x9c03, 0xa901, 0xaa00, 0xbf00, 0xfd00, 0xff16])",
          "14862:     # 2222/5921, 89/33",
          "14863:     pkt = NCP(0x5921, \"Open/Create File or Subdirectory II with Callback\", 'enhanced', has_length=0)",
          "14864:     pkt.Request((41, 294), [",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14884:     pkt.MakeExpert(\"file_rights\")",
          "",
          "---------------",
          "--- Hunk 219 ---",
          "[Context before]",
          "14939:     pkt.CompletionCodes([0x0000, 0x0102, 0x8000, 0x8101, 0x8401, 0x8501,",
          "14940:                          0x8701, 0x8d00, 0x8f00, 0x9001, 0x9600,",
          "14941:                          0x9804, 0x9b03, 0x9c03, 0xa901, 0xaa00, 0xbf00, 0xfd00, 0xff16])",
          "14942:     # 2222/5923, 89/35",
          "14943:     pkt = NCP(0x5923, \"Modify DOS Attributes on a File or Subdirectory\", 'enhanced', has_length=0)",
          "14944:     pkt.Request((35, 288), [",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14965:     pkt.MakeExpert(\"file_rights\")",
          "",
          "---------------",
          "--- Hunk 220 ---",
          "[Context before]",
          "15459:     # 2222/61, 97",
          "15460:     pkt = NCP(0x61, \"Get Big Packet NCP Max Packet Size\", 'connection')",
          "15461:     pkt.Request(10, [",
          "15463:             rec( 9, 1, SecurityFlag ),",
          "15464:     ],info_str=(ProposedMaxSize, \"Get Big Max Packet Size - %d\", \", %d\"))",
          "15465:     pkt.Reply(13, [",
          "15468:             rec( 12, 1, SecurityFlag ),",
          "15469:     ])",
          "15470:     pkt.CompletionCodes([0x0000])",
          "",
          "[Removed Lines]",
          "15462:             rec( 7, 2, ProposedMaxSize, BE ),",
          "15466:             rec( 8, 2, AcceptedMaxSize, BE ),",
          "15467:             rec( 10, 2, EchoSocket, BE ),",
          "",
          "[Added Lines]",
          "15486:             rec( 7, 2, ProposedMaxSize, ENC_BIG_ENDIAN ),",
          "15490:             rec( 8, 2, AcceptedMaxSize, ENC_BIG_ENDIAN ),",
          "15491:             rec( 10, 2, EchoSocket, ENC_BIG_ENDIAN ),",
          "",
          "---------------",
          "--- Hunk 221 ---",
          "[Context before]",
          "15481:     # 2222/65, 101",
          "15482:     pkt = NCP(0x65, \"Packet Burst Connection Request\", 'pburst')",
          "15483:     pkt.Request(25, [",
          "15489:     ])",
          "15490:     pkt.Reply(16, [",
          "15493:     ])",
          "15494:     pkt.CompletionCodes([0x0000])",
          "15495:     # 2222/66, 102",
          "",
          "[Removed Lines]",
          "15484:             rec( 7, 4, LocalConnectionID, BE ),",
          "15485:             rec( 11, 4, LocalMaxPacketSize, BE ),",
          "15486:             rec( 15, 2, LocalTargetSocket, BE ),",
          "15487:             rec( 17, 4, LocalMaxSendSize, BE ),",
          "15488:             rec( 21, 4, LocalMaxRecvSize, BE ),",
          "15491:             rec( 8, 4, RemoteTargetID, BE ),",
          "15492:             rec( 12, 4, RemoteMaxPacketSize, BE ),",
          "",
          "[Added Lines]",
          "15508:             rec( 7, 4, LocalConnectionID, ENC_BIG_ENDIAN ),",
          "15509:             rec( 11, 4, LocalMaxPacketSize, ENC_BIG_ENDIAN ),",
          "15510:             rec( 15, 2, LocalTargetSocket, ENC_BIG_ENDIAN ),",
          "15511:             rec( 17, 4, LocalMaxSendSize, ENC_BIG_ENDIAN ),",
          "15512:             rec( 21, 4, LocalMaxRecvSize, ENC_BIG_ENDIAN ),",
          "15515:             rec( 8, 4, RemoteTargetID, ENC_BIG_ENDIAN ),",
          "15516:             rec( 12, 4, RemoteMaxPacketSize, ENC_BIG_ENDIAN ),",
          "",
          "---------------",
          "--- Hunk 222 ---",
          "[Context before]",
          "15847:     pkt = NCP(0x7B01, \"Get Cache Information\", 'stats')",
          "15848:     pkt.Request(10)",
          "15849:     pkt.Reply(288, [",
          "15851:             rec(12, 1, VConsoleVersion ),",
          "15852:             rec(13, 1, VConsoleRevision ),",
          "15853:             rec(14, 2, Reserved2 ),",
          "",
          "[Removed Lines]",
          "15850:             rec(8, 4, CurrentServerTime, LE),",
          "",
          "[Added Lines]",
          "15874:             rec(8, 4, CurrentServerTime, ENC_LITTLE_ENDIAN),",
          "",
          "---------------",
          "--- Hunk 223 ---",
          "[Context before]",
          "15890:     # 2222/7B04, 123/04",
          "15891:     pkt = NCP(0x7B04, \"User Information\", 'stats')",
          "15892:     pkt.Request(14, [",
          "15894:     ])",
          "15895:     pkt.Reply((85, 132), [",
          "15896:             rec(8, 4, CurrentServerTime ),",
          "",
          "[Removed Lines]",
          "15893:             rec(10, 4, ConnectionNumber, LE ),",
          "",
          "[Added Lines]",
          "15917:             rec(10, 4, ConnectionNumber, ENC_LITTLE_ENDIAN ),",
          "",
          "---------------"
        ]
      }
    }
  ]
}