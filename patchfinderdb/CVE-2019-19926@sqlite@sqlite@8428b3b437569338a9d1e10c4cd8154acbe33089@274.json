{
  "cve_id": "CVE-2019-19926",
  "cve_desc": "multiSelect in select.c in SQLite 3.30.1 mishandles certain errors during parsing, as demonstrated by errors from sqlite3WindowRewrite() calls. NOTE: this vulnerability exists because of an incomplete fix for CVE-2019-19880.",
  "repo": "sqlite/sqlite",
  "patch_hash": "8428b3b437569338a9d1e10c4cd8154acbe33089",
  "patch_info": {
    "commit_hash": "8428b3b437569338a9d1e10c4cd8154acbe33089",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/8428b3b437569338a9d1e10c4cd8154acbe33089",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c"
    ],
    "message": "Continuation of [e2bddcd4c55ba3cb]: Add another spot where it is necessary to abort early due to prior errors in sqlite3WindowRewrite().\n\nFossilOrigin-Name: cba2a2a44cdf138a629109bb0ad088ed4ef67fc66bed3e0373554681a39615d2",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 3d4c0bf8904135fa68c75801bfa738715cacc3b19dc8ad6ef550b11798d4b121",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2809:     }",
      "2810:   #endif",
      "2811:   }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2812:   if( pParse->nErr ) goto multi_select_end;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "e216ae0a3e334f6ca51ca0d1d11cf07c380dd0ea",
      "candidate_info": {
        "commit_hash": "e216ae0a3e334f6ca51ca0d1d11cf07c380dd0ea",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e216ae0a3e334f6ca51ca0d1d11cf07c380dd0ea",
        "files": [
          "ext/misc/dbdata.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Fix further buffer overreads triggered by passing corrupt records to the sqlite_dbdata module.\n\nFossilOrigin-Name: dbc6a9f7f67256dea96d3245e7bec145ba65d64adf322e18f1f3ac9556b4e0b6",
        "before_after_code_files": [
          "ext/misc/dbdata.c||ext/misc/dbdata.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/misc/dbdata.c||ext/misc/dbdata.c": [
          "File: ext/misc/dbdata.c -> ext/misc/dbdata.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "495:         int iHdr;",
          "496:         int U, X;",
          "497:         int nLocal;",
          "499:         switch( pCsr->aPage[iOff] ){",
          "500:           case 0x02:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "498:         int bNextPage = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "512:         }",
          "514:         if( pCsr->iCell>=pCsr->nCell ){",
          "515:           sqlite3_free(pCsr->aPage);",
          "516:           pCsr->aPage = 0;",
          "517:           if( pCsr->bOnePage ) return SQLITE_OK;",
          "518:           pCsr->iPgno++;",
          "519:           continue;",
          "520:         }",
          "591:       }else{",
          "592:         pCsr->iField++;",
          "593:         if( pCsr->iField>0 ){",
          "",
          "[Removed Lines]",
          "522:         iOff += 8 + nPointer + pCsr->iCell*2;",
          "523:         iOff = get_uint16(&pCsr->aPage[iOff]);",
          "526:         iOff += nPointer;",
          "529:         iOff += dbdataGetVarint(&pCsr->aPage[iOff], &nPayload);",
          "532:         if( bHasRowid ){",
          "533:           iOff += dbdataGetVarint(&pCsr->aPage[iOff], &pCsr->iIntkey);",
          "534:         }",
          "537:         pCsr->pRec = (u8*)sqlite3_malloc64(nPayload);",
          "538:         if( pCsr->pRec==0 ) return SQLITE_NOMEM;",
          "539:         pCsr->nRec = nPayload;",
          "541:         U = pCsr->nPage;",
          "542:         if( bHasRowid ){",
          "543:           X = U-35;",
          "544:         }else{",
          "545:           X = ((U-12)*64/255)-23;",
          "546:         }",
          "547:         if( nPayload<=X ){",
          "548:           nLocal = nPayload;",
          "549:         }else{",
          "550:           int M, K;",
          "551:           M = ((U-12)*32/255)-23;",
          "552:           K = M+((nPayload-M)%(U-4));",
          "553:           if( K<=X ){",
          "554:             nLocal = K;",
          "555:           }else{",
          "556:             nLocal = M;",
          "557:           }",
          "558:         }",
          "561:         memcpy(pCsr->pRec, &pCsr->aPage[iOff], nLocal);",
          "562:         iOff += nLocal;",
          "565:         if( nPayload>nLocal ){",
          "566:           sqlite3_int64 nRem = nPayload - nLocal;",
          "567:           unsigned int pgnoOvfl = get_uint32(&pCsr->aPage[iOff]);",
          "568:           while( nRem>0 ){",
          "569:             u8 *aOvfl = 0;",
          "570:             int nOvfl = 0;",
          "571:             int nCopy;",
          "572:             rc = dbdataLoadPage(pCsr, pgnoOvfl, &aOvfl, &nOvfl);",
          "573:             assert( rc!=SQLITE_OK || nOvfl==pCsr->nPage );",
          "574:             if( rc!=SQLITE_OK ) return rc;",
          "576:             nCopy = U-4;",
          "577:             if( nCopy>nRem ) nCopy = nRem;",
          "578:             memcpy(&pCsr->pRec[nPayload-nRem], &aOvfl[4], nCopy);",
          "579:             nRem -= nCopy;",
          "581:             pgnoOvfl = get_uint32(aOvfl);",
          "582:             sqlite3_free(aOvfl);",
          "583:           }",
          "584:         }",
          "586:         iHdr = dbdataGetVarint(pCsr->pRec, &nHdr);",
          "587:         pCsr->nHdr = nHdr;",
          "588:         pCsr->pHdrPtr = &pCsr->pRec[iHdr];",
          "589:         pCsr->pPtr = &pCsr->pRec[pCsr->nHdr];",
          "590:         pCsr->iField = (bHasRowid ? -1 : 0);",
          "",
          "[Added Lines]",
          "516:           bNextPage = 1;",
          "517:         }else{",
          "519:           iOff += 8 + nPointer + pCsr->iCell*2;",
          "520:           if( iOff>pCsr->nPage ){",
          "521:             bNextPage = 1;",
          "522:           }else{",
          "523:             iOff = get_uint16(&pCsr->aPage[iOff]);",
          "524:           }",
          "527:           iOff += nPointer;",
          "530:           if( bNextPage || iOff>pCsr->nPage ){",
          "531:             bNextPage = 1;",
          "532:           }else{",
          "533:             iOff += dbdataGetVarint(&pCsr->aPage[iOff], &nPayload);",
          "534:           }",
          "537:           if( bHasRowid && !bNextPage && iOff<pCsr->nPage ){",
          "538:             iOff += dbdataGetVarint(&pCsr->aPage[iOff], &pCsr->iIntkey);",
          "539:           }",
          "542:           U = pCsr->nPage;",
          "543:           if( bHasRowid ){",
          "544:             X = U-35;",
          "545:           }else{",
          "546:             X = ((U-12)*64/255)-23;",
          "547:           }",
          "548:           if( nPayload<=X ){",
          "549:             nLocal = nPayload;",
          "550:           }else{",
          "551:             int M, K;",
          "552:             M = ((U-12)*32/255)-23;",
          "553:             K = M+((nPayload-M)%(U-4));",
          "554:             if( K<=X ){",
          "555:               nLocal = K;",
          "556:             }else{",
          "557:               nLocal = M;",
          "558:             }",
          "559:           }",
          "561:           if( bNextPage || nLocal+iOff>pCsr->nPage ){",
          "562:             bNextPage = 1;",
          "563:           }else{",
          "568:             pCsr->pRec = (u8*)sqlite3_malloc64(nPayload+100);",
          "569:             if( pCsr->pRec==0 ) return SQLITE_NOMEM;",
          "570:             memset(pCsr->pRec, 0, nPayload+100);",
          "571:             pCsr->nRec = nPayload;",
          "574:             memcpy(pCsr->pRec, &pCsr->aPage[iOff], nLocal);",
          "575:             iOff += nLocal;",
          "578:             if( nPayload>nLocal ){",
          "579:               sqlite3_int64 nRem = nPayload - nLocal;",
          "580:               unsigned int pgnoOvfl = get_uint32(&pCsr->aPage[iOff]);",
          "581:               while( nRem>0 ){",
          "582:                 u8 *aOvfl = 0;",
          "583:                 int nOvfl = 0;",
          "584:                 int nCopy;",
          "585:                 rc = dbdataLoadPage(pCsr, pgnoOvfl, &aOvfl, &nOvfl);",
          "586:                 assert( rc!=SQLITE_OK || nOvfl==pCsr->nPage );",
          "587:                 if( rc!=SQLITE_OK ) return rc;",
          "589:                 nCopy = U-4;",
          "590:                 if( nCopy>nRem ) nCopy = nRem;",
          "591:                 memcpy(&pCsr->pRec[nPayload-nRem], &aOvfl[4], nCopy);",
          "592:                 nRem -= nCopy;",
          "594:                 pgnoOvfl = get_uint32(aOvfl);",
          "595:                 sqlite3_free(aOvfl);",
          "596:               }",
          "597:             }",
          "599:             iHdr = dbdataGetVarint(pCsr->pRec, &nHdr);",
          "600:             pCsr->nHdr = nHdr;",
          "601:             pCsr->pHdrPtr = &pCsr->pRec[iHdr];",
          "602:             pCsr->pPtr = &pCsr->pRec[pCsr->nHdr];",
          "603:             pCsr->iField = (bHasRowid ? -1 : 0);",
          "604:           }",
          "605:         }",
          "607:         if( bNextPage ){",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: e736da9c18fad138c5502d354c3553373cba15358b69e44b257f60def59422e2",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0a8764ad7ad7de39af698e88687266acf06442db",
      "candidate_info": {
        "commit_hash": "0a8764ad7ad7de39af698e88687266acf06442db",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/0a8764ad7ad7de39af698e88687266acf06442db",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/resolve.c"
        ],
        "message": "Rename a local variable to avoid masking a function parameter and thus causing a harmless compiler warning.\n\nFossilOrigin-Name: f065cf003bd2a3a580cb5b9fa2eacd8be075fe8c2bbc5688e9a9406abbfb3804",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/resolve.c||src/resolve.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: c7309ed3c7588c7e51e09418bf5cfd4611539b44c39cef9ed4ae0e385bae7625",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/resolve.c||src/resolve.c": [
          "File: src/resolve.c -> src/resolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "566:   if( pExpr->iColumn>=0 && pMatch!=0 ){",
          "567:     int n = pExpr->iColumn;",
          "571:     assert( pMatch->iCursor==pExpr->iTable );",
          "574:     ){",
          "578:     }else{",
          "579:       testcase( n==BMS-1 );",
          "580:       testcase( n==BMS );",
          "",
          "[Removed Lines]",
          "568:     Table *pTab;",
          "569:     pTab = pExpr->y.pTab;",
          "570:     assert( pTab!=0 );",
          "572:     if( (pTab->tabFlags & TF_HasGenerated)!=0",
          "573:      && (pTab->aCol[n].colFlags & COLFLAG_GENERATED)!=0",
          "575:       testcase( pTab->nCol==BMS-1 );",
          "576:       testcase( pTab->nCol==BMS );",
          "577:       pMatch->colUsed = pTab->nCol>=BMS ? ALLBITS : MASKBIT(pTab->nCol)-1;",
          "",
          "[Added Lines]",
          "568:     Table *pExTab = pExpr->y.pTab;",
          "569:     assert( pExTab!=0 );",
          "571:     if( (pExTab->tabFlags & TF_HasGenerated)!=0",
          "572:      && (pExTab->aCol[n].colFlags & COLFLAG_GENERATED)!=0",
          "574:       testcase( pExTab->nCol==BMS-1 );",
          "575:       testcase( pExTab->nCol==BMS );",
          "576:       pMatch->colUsed = pExTab->nCol>=BMS ? ALLBITS : MASKBIT(pExTab->nCol)-1;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "273e01b4c69ddebe31db8db21c1a27d7fa9f4870",
      "candidate_info": {
        "commit_hash": "273e01b4c69ddebe31db8db21c1a27d7fa9f4870",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/273e01b4c69ddebe31db8db21c1a27d7fa9f4870",
        "files": [
          "ext/rtree/rtree.c",
          "ext/rtree/rtreefuzz001.test",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Fix a potential NULL-pointer deference in RTREE due to corrupt shadow tables.\n\nFossilOrigin-Name: 1fdd3604eef880414682e9e6f74d714520fe1c63f267ec4da752d2dc1da6bf72",
        "before_after_code_files": [
          "ext/rtree/rtree.c||ext/rtree/rtree.c",
          "ext/rtree/rtreefuzz001.test||ext/rtree/rtreefuzz001.test",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/rtree/rtree.c||ext/rtree/rtree.c": [
          "File: ext/rtree/rtree.c -> ext/rtree/rtree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2948:     rc = findLeafNode(pRtree, iDelete, &pLeaf, 0);",
          "2949:   }",
          "2953:     int rc2;",
          "2954:     rc = nodeRowidIndex(pRtree, pLeaf, iDelete, &iCell);",
          "2955:     if( rc==SQLITE_OK ){",
          "",
          "[Removed Lines]",
          "2952:   if( rc==SQLITE_OK ){",
          "",
          "[Added Lines]",
          "2951: #ifdef CORRUPT_DB",
          "2952:   assert( pLeaf!=0 || rc!=SQLITE_OK || CORRUPT_DB );",
          "2953: #endif",
          "2956:   if( rc==SQLITE_OK && pLeaf ){",
          "",
          "---------------"
        ],
        "ext/rtree/rtreefuzz001.test||ext/rtree/rtreefuzz001.test": [
          "File: ext/rtree/rtreefuzz001.test -> ext/rtree/rtreefuzz001.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "472: do_test rtreefuzz001-200 {",
          "473:   sqlite3 db {}",
          "474:   db deserialize [decode_hexdb {",
          "476: | size 16384 pagesize 4096 filename c3.db",
          "477: | page 1 offset 0",
          "478: |      0: 53 51 4c 69 74 65 20 66 6f 72 6d 61 74 20 33 00   SQLite format 3.",
          "",
          "[Removed Lines]",
          "475: .open --hexdb",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "568:   }",
          "569: } {1 {database disk image is malformed}}",
          "571: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "570: do_test rtreefuzz001-300 {",
          "571:   sqlite3 db {}",
          "572:   db deserialize [decode_hexdb {",
          "573: | size 16384 pagesize 4096 filename c4.db",
          "574: | page 1 offset 0",
          "575: |      0: 53 51 4c 69 74 65 20 66 6f 72 6d 61 74 20 33 00   SQLite format 3.",
          "576: |     16: 10 00 01 01 00 40 20 20 00 00 00 00 00 00 00 04   .....@  ........",
          "577: |     32: 00 00 00 00 00 00 00 00 00 00 00 04 00 00 00 04   ................",
          "578: |     96: 00 00 00 00 0d 00 00 00 04 0e 9c 00 0f ad 0f 4f   ...............O",
          "579: |    112: 0e fc 0e 9c 00 00 00 00 00 00 00 00 00 00 00 00   ................",
          "580: |   3728: 00 00 00 00 00 00 00 00 00 00 00 00 5e 04 07 17   ............^...",
          "581: |   3744: 1f 1f 01 81 0b 74 61 62 6c 65 74 31 5f 70 61 72   .....tablet1_par",
          "582: |   3760: 65 6e 74 74 31 5f 70 61 72 65 6e 74 04 43 52 45   entt1_parent.CRE",
          "583: |   3776: 41 54 45 20 54 41 42 4c 45 20 22 74 31 5f 70 61   ATE TABLE \"t1_pa",
          "584: |   3792: 72 65 6e 74 22 28 6e 6f 64 65 6e 6f 20 49 4e 54   rent\"(nodeno INT",
          "585: |   3808: 45 47 45 52 20 50 52 49 4d 41 52 59 20 4b 45 59   EGER PRIMARY KEY",
          "586: |   3824: 2c 70 61 72 65 6e 74 6e 6f 64 65 29 51 03 06 17   ,parentnode)Q...",
          "587: |   3840: 1b 1b 01 7b 74 61 62 6c 65 74 31 5f 6e 6f 64 65   ....tablet1_node",
          "588: |   3856: 74 31 5f 6e 6f 64 65 03 43 52 45 41 54 45 20 54   t1_node.CREATE T",
          "589: |   3872: 41 42 4c 45 20 22 74 31 5f 6e 6f 64 65 22 28 6e   ABLE \"t1_node\"(n",
          "590: |   3888: 6f 64 65 6e 6f 20 49 4e 54 45 47 45 52 20 50 52   odeno INTEGER PR",
          "591: |   3904: 49 4d 41 52 59 20 4b 45 59 2c 64 61 74 61 29 5c   IMARY KEY,data)\\",
          "592: |   3920: 02 07 17 1d 1d 01 81 0b 74 61 62 6c 65 74 31 5f   ........tablet1_",
          "593: |   3936: 72 6f 77 69 64 74 31 5f 72 6f 77 69 64 02 43 52   rowidt1_rowid.CR",
          "594: |   3952: 45 41 54 45 20 54 41 42 4c 45 20 22 74 31 5f 72   EATE TABLE \"t1_r",
          "595: |   3968: 6f 77 69 64 22 28 72 6f 77 69 64 20 49 4e 54 45   owid\"(rowid INTE",
          "596: |   3984: 47 45 72 20 50 52 49 4d 41 52 59 20 4b 45 59 2c   GEr PRIMARY KEY,",
          "597: |   4000: 6e 6f 64 65 6e 6f 2c 61 30 2c 61 31 29 51 01 07   nodeno,a0,a1)Q..",
          "598: |   4016: 17 11 11 08 81 0f 74 61 62 6c 65 74 31 74 31 43   ......tablet1t1C",
          "599: |   4032: 52 45 41 54 45 20 56 49 52 54 55 41 4c 20 54 41   REATE VIRTUAL TA",
          "600: |   4048: 42 4c 45 20 74 31 20 55 53 49 4e 47 20 72 74 72   BLE t1 USING rtr",
          "601: |   4064: 65 65 28 69 64 2c 78 30 2c 78 31 2c 79 30 2c 79   ee(id,x0,x1,y0,y",
          "602: |   4080: 31 2c 2b 6c 61 62 65 6c 2c 2b 6f 74 68 65 72 29   1,+label,+other)",
          "603: | page 2 offset 4096",
          "604: |      0: 0d 00 00 00 0e 0e f7 00 0f e8 0f 00 fb 70 f9 e0   .............p..",
          "605: |     16: f9 10 f8 10 f7 00 f5 e0 f4 f0 f3 90 f2 90 f1 80   ................",
          "606: |     32: f0 60 ef 00 00 00 00 00 00 00 00 00 00 00 00 00   .`..............",
          "607: |   3824: 00 00 00 00 00 00 00 0d 0e 05 00 09 1d 00 74 6f   ..............to",
          "608: |   3840: 70 20 68 61 6c 66 10 0d 05 00 09 23 00 62 6f 74   p half.....#.bot",
          "609: |   3856: 74 6f 6d 20 68 61 6c 66 0f 0c 05 00 09 21 00 72   tom half.....!.r",
          "610: |   3872: 69 67 68 74 20 68 61 6c 66 0e 0b 05 00 09 1f 00   ight half.......",
          "611: |   3888: 6c 65 66 74 20 68 61 6c 66 14 0a 05 00 09 2b 00   left half.....+.",
          "612: |   3904: 00 03 98 20 49 98 2f 6c 62 05 74 68 69 6e 67 0d   ... I./lb.thing.",
          "613: |   3920: 09 05 00 09 1d 00 74 6f 70 20 65 64 67 65 10 08   ......top edge..",
          "614: |   3936: 05 00 09 23 00 62 6f 74 74 6f 6d 20 65 64 67 65   ...#.bottom edge",
          "615: |   3952: 0f 07 05 00 09 21 00 72 69 67 68 74 20 65 64 67   .....!.right edg",
          "616: |   3968: 65 0e 06 05 00 09 1f 00 6c 65 66 74 20 65 64 67   e.......left edg",
          "617: |   3984: 65 0b 05 05 00 09 19 00 63 65 6e 74 65 72 17 04   e.......center..",
          "618: |   4000: 05 00 09 31 00 75 70 70 65 72 2d 72 69 67 68 74   ...1.upper-right",
          "619: |   4016: 20 63 6f 72 6e 65 72 17 03 05 00 09 31 00 6c 6f    corner.....1.lo",
          "620: |   4032: 77 65 72 2d 72 69 67 68 74 20 63 6f 72 6e 65 72   wer-right corner",
          "621: |   4048: 16 02 05 00 09 2f 00 75 70 70 65 72 2d 6c 65 66   ...../.upper-lef",
          "622: |   4064: 74 20 63 6f 72 6e 65 72 16 01 05 00 09 2f 00 6c   t corner...../.l",
          "623: |   4080: 6f 77 65 72 2d 6c 65 66 74 20 63 6f 72 6e 65 72   ower-left corner",
          "624: | page 3 offset 8192",
          "625: |      0: 0d 00 00 00 01 0b 2d 00 0b 2d 00 00 00 00 00 00   ......-..-......",
          "626: |   2848: 00 00 00 00 00 00 00 00 00 00 00 00 00 89 50 01   ..............P.",
          "627: |   2864: 04 00 93 24 00 00 00 0e 00 00 00 00 00 00 00 01   ...$............",
          "628: |   2880: 00 00 00 04 01 20 00 00 00 00 00 04 12 00 00 00   ..... ..........",
          "629: |   2896: 00 00 00 00 00 00 00 23 00 00 00 00 41 20 00 00   .......#....A ..",
          "630: |   2912: 42 b4 00 00 42 c8 00 00 00 00 00 00 00 00 00 03   B...B...........",
          "631: |   2928: 42 b4 00 00 42 c8 00 00 00 00 00 00 41 20 00 00   B...B.......A ..",
          "632: |   2944: 00 00 00 00 00 00 00 04 42 b4 00 00 42 c8 00 00   ........B...B...",
          "633: |   2960: 42 b4 00 00 42 c8 00 00 00 00 00 00 00 00 00 05   B...B...........",
          "634: |   2976: 42 20 00 00 42 70 00 00 42 20 00 00 42 70 00 00   B ..Bp..B ..Bp..",
          "635: |   2992: 00 00 00 00 00 00 00 06 00 00 00 00 40 a0 00 00   ............@...",
          "636: |   3008: 00 00 00 04 2c 80 00 00 00 00 00 00 00 00 00 74   ....,..........t",
          "637: |   3024: 2b e0 00 04 2c 80 00 04 2c 80 00 00 00 00 00 00   +...,...,.......",
          "638: |   3040: 00 00 00 80 00 00 00 04 2c 80 00 00 00 00 00 04   ........,.......",
          "639: |   3056: 0a 00 00 00 00 00 b0 80 00 00 04 2c 80 00 04 2b   ...........,...+",
          "640: |   3072: e0 00 04 2c 80 00 00 00 00 00 00 00 00 00 a0 00   ...,............",
          "641: |   3088: 00 00 04 2c 80 00 00 00 00 00 04 2c 80 00 00 00   ...,.......,....",
          "642: |   3104: 00 00 00 00 00 00 b0 00 00 00 04 24 80 00 00 00   ...........$....",
          "643: |   3120: 00 00 04 2c 80 00 00 00 00 00 00 00 50 00 91 f0   ...,........P...",
          "644: |   3136: 06 c6 56 67 42 06 86 16 c6 61 40 a0 50 00 92 b0   ..VgB....a@.P...",
          "645: |   3152: 07 46 86 52 07 76 86 f6 c6 52 07 46 86 96 e6 70   .F.R.v...R.F...p",
          "646: |   3168: d0 90 50 00 91 d0 07 46 f7 02 06 56 46 76 51 00   ..P....F...VFvQ.",
          "647: |   3184: 80 50 00 92 30 06 26 f7 47 46 f6 d2 06 56 46 76   .P..0.&.GF...VFv",
          "648: |   3200: 50 f0 70 50 00 92 10 07 26 96 76 87 42 06 56 46   P.pP....&.v.B.VF",
          "649: |   3216: 76 50 e0 60 50 00 91 f0 06 c6 56 67 42 06 56 46   vP.`P.....VgB.VF",
          "650: |   3232: 76 50 b0 50 50 00 91 90 06 36 56 e7 46 57 21 70   vP.PP....6V.FW!p",
          "651: |   3248: 40 50 00 93 10 07 57 07 06 57 22 d7 26 96 76 87   @P....W..W\".&.v.",
          "652: |   3264: 42 06 36 f7 26 e6 57 21 70 30 50 00 93 10 06 c6   B.6.&.W!p0P.....",
          "653: |   3280: f7 76 57 22 d7 26 96 76 87 42 06 36 f7 26 e6 57   .vW\".&.v.B.6.&.W",
          "654: |   3296: 21 60 20 50 00 92 f0 07 57 07 06 57 22 d6 c6 56   !` P....W..W\"..V",
          "655: |   3312: 60 00 00 c4 24 c0 00 04 2c 80 00 00 00 00 00 04   `...$...,.......",
          "656: |   3328: 2c 80 00 00 00 00 00 00 00 00 00 d0 00 00 00 04   ,...............",
          "657: |   3344: 2c 80 00 00 00 00 00 04 24 80 00 00 00 00 00 00   ,.......$.......",
          "658: |   3360: 00 00 00 e0 00 00 00 04 2c 80 00 04 24 c0 00 04   ........,...$...",
          "659: |   3376: 2c 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00   ,...............",
          "660: | page 4 offset 12288",
          "661: |      0: 0d 00 00 00 00 10 00 00 00 00 00 00 00 00 00 00   ................",
          "662: | end c4.db",
          "663:   }]",
          "664:   catchsql {",
          "665:     UPDATE t1 SET label='x';",
          "666:   }",
          "667: } {1 {malformed database schema (?)}}",
          "668: do_test rtreefuzz001-310 {",
          "669:   catchsql {",
          "670:     SELECT rtreecheck('t1');",
          "671:   }",
          "672: } {1 {database disk image is malformed}}",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 085667180b230587abb82abfdd14da8859e23620994d5cf152236b64c756dd04",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "73c53b39c9656c5bf8cd6a1758b055d806dd7dcc",
      "candidate_info": {
        "commit_hash": "73c53b39c9656c5bf8cd6a1758b055d806dd7dcc",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/73c53b39c9656c5bf8cd6a1758b055d806dd7dcc",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/select.c",
          "test/countofview.test"
        ],
        "message": "Fix the count-of-view optimization so that it is (correctly) disabled for a query that includes a WHERE clause or a GROUP BY clause.\n\nFossilOrigin-Name: 05897ca48a40c6771ff83ba8ecc3a5c60dafddf58651c222dd8cf89b9fc7b077",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/select.c||src/select.c",
          "test/countofview.test||test/countofview.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/select.c||src/select.c"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/select.c||src/select.c"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: adebffc18e6165672947a6bda5ca23ea7723cca7ab8da4feb81fca8f83e4fcaf",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5519:   sqlite3 *db;",
          "5522:   pExpr = p->pEList->a[0].pExpr;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5523:   if( p->pWhere ) return 0;",
          "5524:   if( p->pGroupBy ) return 0;",
          "",
          "---------------"
        ],
        "test/countofview.test||test/countofview.test": [
          "File: test/countofview.test -> test/countofview.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "40:   )",
          "41: } {3}",
          "43: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "43: # 2019-05-15",
          "44: do_execsql_test 2.0 {",
          "45:   CREATE TABLE t1(x);",
          "46:   INSERT INTO t1 VALUES(1),(99),('abc');",
          "47:   CREATE VIEW v1(x,y) AS SELECT x,1 FROM t1 UNION ALL SELECT x,2 FROM t1;",
          "48:   SELECT count(*) FROM v1 WHERE x<>1;",
          "49: } {4}",
          "50: do_execsql_test 2.1 {",
          "51:   SELECT count(*) FROM v1 GROUP BY y;",
          "52: } {3 3}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f66bfcb740c823c9c6ffce1f7f0d0c2bb811046a",
      "candidate_info": {
        "commit_hash": "f66bfcb740c823c9c6ffce1f7f0d0c2bb811046a",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/f66bfcb740c823c9c6ffce1f7f0d0c2bb811046a",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/update.c",
          "test/conflict3.test"
        ],
        "message": "If a DELETE trigger fired by an UPDATE OR REPLACE statement deletes the row being updated, do not attempt to proceed with the original UPDATE operation. Fix for [d6a0fbc1].\n\nFossilOrigin-Name: 4145b3e05051ba6729105157a876793ad14a05d895fc10fe704f437eab16ea93",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/update.c||src/update.c",
          "test/conflict3.test||test/conflict3.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: e2db1123faac26c0e0b6a1ebef1685ea7633bfcafd1ff743ba5380700f7745af",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/update.c||src/update.c": [
          "File: src/update.c -> src/update.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "715:   }",
          "717:   if( !isView ){",
          "721:     assert( regOldRowid>0 );",
          "722:     sqlite3GenerateConstraintChecks(pParse, pTab, aRegIdx, iDataCur, iIdxCur,",
          "723:         regNewRowid, regOldRowid, chngKey, onError, labelContinue, &bReplace,",
          "724:         aXRef, 0);",
          "727:     if( hasFK ){",
          "728:       sqlite3FkCheck(pParse, pTab, regOldRowid, 0, aXRef, chngKey);",
          "729:     }",
          "740:     sqlite3GenerateRowIndexDelete(pParse, pTab, iDataCur, iIdxCur, aRegIdx, -1);",
          "",
          "[Removed Lines]",
          "732:     if( bReplace || chngKey ){",
          "733:       if( pPk ){",
          "734:         addr1 = sqlite3VdbeAddOp4Int(v, OP_NotFound, iDataCur, 0, regKey, nKey);",
          "735:       }else{",
          "736:         addr1 = sqlite3VdbeAddOp3(v, OP_NotExists, iDataCur, 0, regOldRowid);",
          "737:       }",
          "738:       VdbeCoverageNeverTaken(v);",
          "739:     }",
          "",
          "[Added Lines]",
          "727:     if( bReplace || chngKey ){",
          "728:       if( pPk ){",
          "729:         sqlite3VdbeAddOp4Int(v, OP_NotFound,iDataCur,labelContinue,regKey,nKey);",
          "730:       }else{",
          "731:         sqlite3VdbeAddOp3(v, OP_NotExists, iDataCur, labelContinue,regOldRowid);",
          "732:       }",
          "733:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "766:       sqlite3VdbeAddOp2(v, OP_Delete, iDataCur, 0);",
          "767:     }",
          "768: #endif",
          "773:     if( hasFK ){",
          "774:       sqlite3FkCheck(pParse, pTab, 0, regNewRowid, aXRef, chngKey);",
          "",
          "[Removed Lines]",
          "769:     if( bReplace || chngKey ){",
          "770:       sqlite3VdbeJumpHere(v, addr1);",
          "771:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/conflict3.test||test/conflict3.test": [
          "File: test/conflict3.test -> test/conflict3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "366:   SELECT * FROM t2;",
          "367: } {111 111B 112 112}",
          "370: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "369: #-------------------------------------------------------------------------",
          "370: ifcapable trigger {",
          "371:   reset_db",
          "372:   do_execsql_test 13.1.0 {",
          "373:     PRAGMA recursive_triggers = true;",
          "374:     CREATE TABLE t0 (c0 UNIQUE, c1 UNIQUE);",
          "375:     CREATE TRIGGER tr0 AFTER DELETE ON t0 BEGIN",
          "376:       DELETE FROM t0;",
          "377:     END;",
          "379:     INSERT INTO t0 VALUES(1, NULL);",
          "380:     INSERT INTO t0 VALUES(0, NULL);",
          "381:   }",
          "383:   do_execsql_test 13.1.1 {",
          "384:     UPDATE OR REPLACE t0 SET c1 = 1;",
          "385:   }",
          "387:   integrity_check 13.1.2",
          "389:   do_execsql_test 13.1.3 {",
          "390:     SELECT * FROM t0",
          "391:   } {}",
          "393:   do_execsql_test 13.2.0 {",
          "394:     CREATE TABLE t2 (a PRIMARY KEY, b UNIQUE, c UNIQUE) WITHOUT ROWID;",
          "395:     CREATE TRIGGER tr3 AFTER DELETE ON t2 BEGIN",
          "396:       DELETE FROM t2;",
          "397:     END;",
          "399:     INSERT INTO t2 VALUES(1, 1, 1);",
          "400:     INSERT INTO t2 VALUES(2, 2, 2);",
          "401:   }",
          "403:   do_execsql_test 13.2.1 {",
          "404:     UPDATE OR REPLACE t2 SET c = 0;",
          "405:   }",
          "407:   integrity_check 13.2.2",
          "409:   do_execsql_test 13.2.3 {",
          "410:     SELECT * FROM t2",
          "411:   } {}",
          "413:   do_execsql_test 13.3.0 {",
          "414:     CREATE TABLE t1(a, b);",
          "415:     CREATE TABLE log(x);",
          "416:     CREATE INDEX i1 ON t1(a);",
          "417:     INSERT INTO t1 VALUES(1, 2);",
          "419:     CREATE TRIGGER tb BEFORE UPDATE ON t1 BEGIN",
          "420:       DELETE FROM t1;",
          "421:     END;",
          "422:     CREATE TRIGGER ta AFTER UPDATE ON t1 BEGIN",
          "423:       INSERT INTO log VALUES('fired!');",
          "424:     END;",
          "426:     UPDATE t1 SET b=3;",
          "427:   }",
          "429:   do_execsql_test 13.3.1 {",
          "430:     SELECT * FROM t1;",
          "431:   } {}",
          "432:   do_execsql_test 13.3.2 {",
          "433:     SELECT * FROM log;",
          "434:   } {}",
          "435: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}