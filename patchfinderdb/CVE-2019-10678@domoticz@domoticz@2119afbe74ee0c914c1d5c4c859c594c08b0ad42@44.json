{
  "cve_id": "CVE-2019-10678",
  "cve_desc": "Domoticz before 4.10579 neglects to categorize \\n and \\r as insecure argument options.",
  "repo": "domoticz/domoticz",
  "patch_hash": "2119afbe74ee0c914c1d5c4c859c594c08b0ad42",
  "patch_info": {
    "commit_hash": "2119afbe74ee0c914c1d5c4c859c594c08b0ad42",
    "repo": "domoticz/domoticz",
    "commit_url": "https://github.com/domoticz/domoticz/commit/2119afbe74ee0c914c1d5c4c859c594c08b0ad42",
    "files": [
      "main/Helper.cpp"
    ],
    "message": "Do not allow enters/returns in arguments (thanks to Fabio Carretto)",
    "before_after_code_files": [
      "main/Helper.cpp||main/Helper.cpp"
    ]
  },
  "patch_diff": {
    "main/Helper.cpp||main/Helper.cpp": [
      "File: main/Helper.cpp -> main/Helper.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "1014:  \"$\",",
      "1015:  \"<\",",
      "1016:  \">\",",
      "1017:  NULL",
      "1018: };",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1017:  \"\\n\",",
      "1018:  \"\\r\",",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "c33b35df50e20145645c7ff9f576638b90cb4b9a",
      "candidate_info": {
        "commit_hash": "c33b35df50e20145645c7ff9f576638b90cb4b9a",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/c33b35df50e20145645c7ff9f576638b90cb4b9a",
        "files": [
          "main/mainworker.cpp"
        ],
        "message": "Fix double strating of event system at startup",
        "before_after_code_files": [
          "main/mainworker.cpp||main/mainworker.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "main/mainworker.cpp||main/mainworker.cpp": [
          "File: main/mainworker.cpp -> main/mainworker.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "532:  asttwend = szRiseSet;",
          "534:  m_scheduler.SetSunRiseSetTimers(sunrise, sunset, sunatsouth, civtwstart, civtwend, nauttwstart, nauttwend, asttwstart, asttwend); // Do not change the order",
          "535:  std::string riseset = sunrise.substr(0, sunrise.size() - 3) + \";\" + sunset.substr(0, sunset.size() - 3) + \";\" + sunatsouth.substr(0, sunatsouth.size() - 3) + \";\" + civtwstart.substr(0, civtwstart.size() - 3) + \";\" + civtwend.substr(0, civtwend.size() - 3) + \";\" + nauttwstart.substr(0, nauttwstart.size() - 3) + \";\" + nauttwend.substr(0, nauttwend.size() - 3) + \";\" + asttwstart.substr(0, asttwstart.size() - 3) + \";\" + asttwend.substr(0, asttwend.size() - 3) + \";\" + daylength.substr(0, daylength.size() - 3); //make a short version",
          "536:  if (m_LastSunriseSet != riseset)",
          "537:  {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "536:  bool bFirstTime = m_LastSunriseSet.empty();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "573:   else",
          "574:    _log.Log(LOG_NORM, \"Astronomical twilight start: %s Astronomical twilight end: %s\", asttwstart.c_str(), asttwend.c_str());",
          "581:  }",
          "582:  return true;",
          "583: }",
          "",
          "[Removed Lines]",
          "577:   m_eventsystem.LoadEvents(); // reloads all events from database to refresh blocky events sunrise/sunset what are already replaced with time",
          "",
          "[Added Lines]",
          "579:   if (!bFirstTime)",
          "580:    m_eventsystem.LoadEvents();",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3d006098bc278afe96dc786f155c340e47dadacb",
      "candidate_info": {
        "commit_hash": "3d006098bc278afe96dc786f155c340e47dadacb",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/3d006098bc278afe96dc786f155c340e47dadacb",
        "files": [
          "hardware/Rtl433.cpp"
        ],
        "message": "RTL433, implemented Moisture sensor (should implement #3089)",
        "before_after_code_files": [
          "hardware/Rtl433.cpp||hardware/Rtl433.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "hardware/Rtl433.cpp||hardware/Rtl433.cpp": [
          "File: hardware/Rtl433.cpp -> hardware/Rtl433.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "169:  bool haveWind_Dir = false;",
          "170:  int wind_dir = 0;",
          "172:  if (!data[\"id\"].empty())",
          "173:  {",
          "174:   id = atoi(data[\"id\"].c_str());",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "172:  bool haveMoisture = false;",
          "173:  int moisture = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "308:   wind_gust = (float)atof(data[\"gust\"].c_str());",
          "309:   haveWind_Gust = true;",
          "310:  }",
          "312:  std::string model = data[\"model\"];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "314:  else if (FindField(data, \"moisture\"))",
          "315:  {",
          "316:   moisture = atoi(data[\"moisture\"].c_str());",
          "317:   haveMoisture = true;",
          "318:  }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "381:   SendDistanceSensor(sensoridx, unit, batterylevel, depth, model);",
          "382:   return true;",
          "383:  }",
          "384:  return false; //not handled (Yet!)",
          "385: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "392:  if (haveMoisture)",
          "393:  {",
          "394:   SendMoistureSensor(sensoridx, batterylevel, moisture, model);",
          "395:   return true;",
          "396:  }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "286135afce2987043efe40c5f3402b6f45c70604",
      "candidate_info": {
        "commit_hash": "286135afce2987043efe40c5f3402b6f45c70604",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/286135afce2987043efe40c5f3402b6f45c70604",
        "files": [
          "main/domoticz.cpp"
        ],
        "message": "Fixed Watchdog thread's start when domoticz is running as a daemon",
        "before_after_code_files": [
          "main/domoticz.cpp||main/domoticz.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "main/domoticz.cpp||main/domoticz.cpp": [
          "File: main/domoticz.cpp -> main/domoticz.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "696: int main(int argc, char**argv)",
          "697: #endif",
          "698: {",
          "703: #if defined WIN32",
          "704: #ifndef _DEBUG",
          "705:  CreateMutexA(0, FALSE, \"Local\\\\Domoticz\");",
          "",
          "[Removed Lines]",
          "699:  time_t atime = mytime(NULL);",
          "700:  m_LastHeartbeat = atime;",
          "701:  std::thread thread_watchdog(Do_Watchdog_Work);",
          "702:  SetThreadName(thread_watchdog.native_handle(), \"Watchdog\");",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1191: #endif",
          "1192:  }",
          "1194:  if (!m_mainworker.Start())",
          "1195:  {",
          "1196:   return 1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1191:  m_LastHeartbeat = mytime(NULL);",
          "1192:  std::thread thread_watchdog(Do_Watchdog_Work);",
          "1193:  SetThreadName(thread_watchdog.native_handle(), \"Watchdog\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0046914e3d9ba52e0a404629f591d39767fa4312",
      "candidate_info": {
        "commit_hash": "0046914e3d9ba52e0a404629f591d39767fa4312",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/0046914e3d9ba52e0a404629f591d39767fa4312",
        "files": [
          "main/mainworker.cpp"
        ],
        "message": "Removed duplicate switch case",
        "before_after_code_files": [
          "main/mainworker.cpp||main/mainworker.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "main/mainworker.cpp||main/mainworker.cpp": [
          "File: main/mainworker.cpp -> main/mainworker.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "5736:   case sTypeLucciAirDCII:",
          "5737:    WriteMessage(\"subtype       = Lucci Air DC II\");",
          "5738:    break;",
          "5742:   default:",
          "5743:    sprintf(szTmp, \"ERROR: Unknown Sub type for Packet type= %02X:%02X\", pResponse->LIGHTING6.packettype, pResponse->LIGHTING6.subtype);",
          "5744:    WriteMessage(szTmp);",
          "",
          "[Removed Lines]",
          "5739:   case sTypeWestinghouse:",
          "5740:    WriteMessage(\"subtype       = Westinghouse\");",
          "5741:    break;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7d8c01f7498e588c6b6d7a4859f161c6478fa812",
      "candidate_info": {
        "commit_hash": "7d8c01f7498e588c6b6d7a4859f161c6478fa812",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/7d8c01f7498e588c6b6d7a4859f161c6478fa812",
        "files": [
          "hardware/plugins/DelayedLink.h"
        ],
        "message": "Planning ahead",
        "before_after_code_files": [
          "hardware/plugins/DelayedLink.h||hardware/plugins/DelayedLink.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "hardware/plugins/DelayedLink.h||hardware/plugins/DelayedLink.h": [
          "File: hardware/plugins/DelayedLink.h -> hardware/plugins/DelayedLink.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "128:    if (!shared_lib_) {",
          "129: #ifdef WIN32",
          "130: # ifdef _DEBUG",
          "131:     if (!shared_lib_) shared_lib_ = LoadLibrary(\"python37_d.dll\");",
          "132:     if (!shared_lib_) shared_lib_ = LoadLibrary(\"python36_d.dll\");",
          "133:     if (!shared_lib_) shared_lib_ = LoadLibrary(\"python35_d.dll\");",
          "134:     if (!shared_lib_) shared_lib_ = LoadLibrary(\"python34_d.dll\");",
          "135: # else",
          "136:     if (!shared_lib_) shared_lib_ = LoadLibrary(\"python37.dll\");",
          "137:     if (!shared_lib_) shared_lib_ = LoadLibrary(\"python36.dll\");",
          "138:     if (!shared_lib_) shared_lib_ = LoadLibrary(\"python35.dll\");",
          "139:     if (!shared_lib_) shared_lib_ = LoadLibrary(\"python34.dll\");",
          "140: # endif",
          "141: #else",
          "142:     if (!shared_lib_) FindLibrary(\"python3.7\", true);",
          "143:     if (!shared_lib_) FindLibrary(\"python3.6\", true);",
          "144:     if (!shared_lib_) FindLibrary(\"python3.5\", true);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "131:     if (!shared_lib_) shared_lib_ = LoadLibrary(\"python38_d.dll\");",
          "137:     if (!shared_lib_) shared_lib_ = LoadLibrary(\"python38.dll\");",
          "144:     if (!shared_lib_) FindLibrary(\"python3.8\", true);",
          "",
          "---------------"
        ]
      }
    }
  ]
}