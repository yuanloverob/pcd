{
  "cve_id": "CVE-2014-2567",
  "cve_desc": "The OpenConnectionTask::handleStateHelper function in Imap/Tasks/OpenConnectionTask.cpp in Trojita before 0.4.1 allows man-in-the-middle attackers to trigger use of cleartext for saving a message into a (1) sent or (2) draft folder via a PREAUTH response that prevents later use of the STARTTLS command.",
  "repo": "jktjkt/trojita",
  "patch_hash": "25fffa3e25cbad85bbca804193ad336b090a9ce1",
  "patch_info": {
    "commit_hash": "25fffa3e25cbad85bbca804193ad336b090a9ce1",
    "repo": "jktjkt/trojita",
    "commit_url": "https://github.com/jktjkt/trojita/commit/25fffa3e25cbad85bbca804193ad336b090a9ce1",
    "files": [
      "src/Imap/Tasks/OpenConnectionTask.cpp",
      "tests/Imap/test_Imap_Tasks_OpenConnection.cpp",
      "tests/Imap/test_Imap_Tasks_OpenConnection.h"
    ],
    "message": "IMAP: refuse to work when STARTTLS is required but server sends PREAUTH\n\nOops, we cannot send STARTTLS when the connection is already authenticated.\nThis is serious enough to warrant an error; an attacker might be going after a\nplaintext of a message we're going to APPEND, etc.\n\nThanks to Arnt Gulbrandsen on the imap-protocol ML for asking what happens when\nwe're configured to request STARTTLS and a PREAUTH is received, and to Michael M\nSlusarz for starting that discussion.\n\nHope the error message is readable enough.\n\nCVE: CVE-2014-2567",
    "before_after_code_files": [
      "src/Imap/Tasks/OpenConnectionTask.cpp||src/Imap/Tasks/OpenConnectionTask.cpp",
      "tests/Imap/test_Imap_Tasks_OpenConnection.cpp||tests/Imap/test_Imap_Tasks_OpenConnection.cpp",
      "tests/Imap/test_Imap_Tasks_OpenConnection.h||tests/Imap/test_Imap_Tasks_OpenConnection.h"
    ]
  },
  "patch_diff": {
    "src/Imap/Tasks/OpenConnectionTask.cpp||src/Imap/Tasks/OpenConnectionTask.cpp": [
      "File: src/Imap/Tasks/OpenConnectionTask.cpp -> src/Imap/Tasks/OpenConnectionTask.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "153:     {",
      "154:         switch (resp->kind) {",
      "155:         case PREAUTH:",
      "157:             if (model->accessParser(parser).capabilitiesFresh) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "156:             if (model->m_startTls) {",
      "162:                 logout(tr(\"Configuration requires sending STARTTLS, but the IMAP server greets us with PREAUTH. \"",
      "163:                           \"Encryption cannot be established. If this configuration worked previously, someone \"",
      "164:                           \"is after your data and they are pretty smart.\"));",
      "165:                 return true;",
      "166:             }",
      "",
      "---------------"
    ],
    "tests/Imap/test_Imap_Tasks_OpenConnection.cpp||tests/Imap/test_Imap_Tasks_OpenConnection.cpp": [
      "File: tests/Imap/test_Imap_Tasks_OpenConnection.cpp -> tests/Imap/test_Imap_Tasks_OpenConnection.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "129:     QVERIFY(startTlsUpgradeSpy->isEmpty());",
      "130: }",
      "133: void ImapModelOpenConnectionTest::testOk()",
      "134: {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "133: void ImapModelOpenConnectionTest::testPreauthWithStartTlsWanted()",
      "134: {",
      "135:     cleanup(); init(true); // yuck, but I can't come up with anything better...",
      "137:     cEmpty();",
      "138:     cServer(\"* PREAUTH hi there\\r\\n\");",
      "139:     QCOMPARE(failedSpy->size(), 1);",
      "140:     QVERIFY(completedSpy->isEmpty());",
      "141:     QVERIFY(authSpy->isEmpty());",
      "142:     QVERIFY(startTlsUpgradeSpy->isEmpty());",
      "143: }",
      "",
      "---------------"
    ],
    "tests/Imap/test_Imap_Tasks_OpenConnection.h||tests/Imap/test_Imap_Tasks_OpenConnection.h": [
      "File: tests/Imap/test_Imap_Tasks_OpenConnection.h -> tests/Imap/test_Imap_Tasks_OpenConnection.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "40:     void testPreauth();",
      "41:     void testPreauthWithCapability();",
      "43:     void testOk();",
      "44:     void testOkWithCapability();",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "42:     void testPreauthWithStartTlsWanted();",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "e09e1068bb9c411c01290cb2eb51499115bce557",
      "candidate_info": {
        "commit_hash": "e09e1068bb9c411c01290cb2eb51499115bce557",
        "repo": "jktjkt/trojita",
        "commit_url": "https://github.com/jktjkt/trojita/commit/e09e1068bb9c411c01290cb2eb51499115bce557",
        "files": [
          "src/Imap/Tasks/OpenConnectionTask.cpp",
          "src/Imap/Tasks/OpenConnectionTask.h"
        ],
        "message": "refactoring: clearer name for a method which aborts the connection during initial setup\n\nAs suggested by Thomas, \"logout\" might imply that a connection got as\nfar as to actually sending the credentials, and that this action would\nactually send a LOGOUT. That's not the case at all here.\n\nChange-Id: I59545b1c270475a0ee27d721d26eb9830f21e1fd",
        "before_after_code_files": [
          "src/Imap/Tasks/OpenConnectionTask.cpp||src/Imap/Tasks/OpenConnectionTask.cpp",
          "src/Imap/Tasks/OpenConnectionTask.h||src/Imap/Tasks/OpenConnectionTask.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/Imap/Tasks/OpenConnectionTask.cpp||src/Imap/Tasks/OpenConnectionTask.cpp"
          ],
          "candidate": [
            "src/Imap/Tasks/OpenConnectionTask.cpp||src/Imap/Tasks/OpenConnectionTask.cpp"
          ]
        }
      },
      "candidate_diff": {
        "src/Imap/Tasks/OpenConnectionTask.cpp||src/Imap/Tasks/OpenConnectionTask.cpp": [
          "File: src/Imap/Tasks/OpenConnectionTask.cpp -> src/Imap/Tasks/OpenConnectionTask.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "166:                 return true;",
          "167:             }",
          "",
          "[Removed Lines]",
          "163:                 logout(tr(\"Configuration requires sending STARTTLS, but the IMAP server greets us with PREAUTH. \"",
          "164:                           \"Encryption cannot be established. If this configuration worked previously, someone \"",
          "165:                           \"is after your data and they are pretty smart.\"));",
          "",
          "[Added Lines]",
          "163:                 abortConnection(tr(\"Configuration requires sending STARTTLS, but the IMAP server greets us with PREAUTH. \"",
          "164:                                    \"Encryption cannot be established. If this configuration worked previously, someone \"",
          "165:                                    \"is after your data and they are pretty smart.\"));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "192:             return true;",
          "194:         case BYE:",
          "196:             return true;",
          "198:         case BAD:",
          "",
          "[Removed Lines]",
          "195:             logout(tr(\"This server gracefully refuses IMAP connections through a BYE response.\"));",
          "",
          "[Added Lines]",
          "195:             abortConnection(tr(\"This server gracefully refuses IMAP connections through a BYE response.\"));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "201:             if (resp->respCode != ALERT) {",
          "202:                 emit model->alertReceived(tr(\"The server replied with the following BAD response:\\n%1\").arg(resp->message));",
          "203:             }",
          "205:             return true;",
          "207:         default:",
          "",
          "[Removed Lines]",
          "204:             logout(tr(\"Server has greeted us with a BAD response\"));",
          "",
          "[Added Lines]",
          "204:             abortConnection(tr(\"Server has greeted us with a BAD response\"));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "233:                     EMIT_LATER_NOARG(model, requireStartTlsInFuture);",
          "234:                 }",
          "235:             } else {",
          "237:             }",
          "238:             return true;",
          "239:         }",
          "",
          "[Removed Lines]",
          "236:                 logout(tr(\"Cannot establish a secure connection.\\nThe STARTTLS command failed: %1\").arg(resp->message));",
          "",
          "[Added Lines]",
          "236:                 abortConnection(tr(\"Cannot establish a secure connection.\\nThe STARTTLS command failed: %1\").arg(resp->message));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "262:         bool wasCaps = checkCapabilitiesResult(resp);",
          "263:         if (wasCaps && !_finished) {",
          "264:             if (model->accessParser(parser).capabilities.contains(QLatin1String(\"LOGINDISABLED\"))) {",
          "266:             } else {",
          "267:                 model->changeConnectionState(parser, CONN_STATE_LOGIN);",
          "268:                 askForAuth();",
          "",
          "[Removed Lines]",
          "265:                 logout(tr(\"Server error: Capabilities contain LOGINDISABLED even after STARTTLS\"));",
          "",
          "[Added Lines]",
          "265:                 abortConnection(tr(\"Server error: Capabilities contain LOGINDISABLED even after STARTTLS\"));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "377:         Q_ASSERT(model->accessParser(parser).capabilitiesFresh);",
          "378:         if (!model->accessParser(parser).capabilities.contains(QLatin1String(\"STARTTLS\"))) {",
          "380:         } else {",
          "381:             startTlsCmd = parser->startTls();",
          "382:             model->changeConnectionState(parser, CONN_STATE_STARTTLS_ISSUED);",
          "",
          "[Removed Lines]",
          "379:             logout(tr(\"Server error: LOGINDISABLED but no STARTTLS capability. The login is effectively disabled entirely.\"));",
          "",
          "[Added Lines]",
          "379:             abortConnection(tr(\"Server error: LOGINDISABLED but no STARTTLS capability. The login is effectively disabled entirely.\"));",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "397:     if (resp->tag == capabilityCmd) {",
          "398:         if (!model->accessParser(parser).capabilitiesFresh) {",
          "400:             return true;",
          "401:         }",
          "402:         if (resp->kind != Responses::OK) {",
          "404:         }",
          "405:         return true;",
          "406:     }",
          "",
          "[Removed Lines]",
          "399:             logout(tr(\"Server error: did not get the required CAPABILITY response.\"));",
          "403:             logout(tr(\"Server error: The CAPABILITY request failed.\"));",
          "",
          "[Added Lines]",
          "399:             abortConnection(tr(\"Server error: did not get the required CAPABILITY response.\"));",
          "403:             abortConnection(tr(\"Server error: The CAPABILITY request failed.\"));",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "432:     _completed();",
          "433: }",
          "436: {",
          "437:     _failed(message);",
          "438:     EMIT_LATER(model, authAttemptFailed, Q_ARG(QString, message));",
          "",
          "[Removed Lines]",
          "435: void OpenConnectionTask::logout(const QString &message)",
          "",
          "[Added Lines]",
          "435: void OpenConnectionTask::abortConnection(const QString &message)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "457:             loginCmd = parser->login(model->m_imapUser, model->m_imapPassword);",
          "458:             model->accessParser(parser).capabilitiesFresh = false;",
          "459:         } else {",
          "461:         }",
          "462:     }",
          "463: }",
          "",
          "[Removed Lines]",
          "460:             logout(tr(\"Cannot login, you have not provided any credentials yet.\"));",
          "",
          "[Added Lines]",
          "460:             abortConnection(tr(\"Cannot login, you have not provided any credentials yet.\"));",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "484:         if (ok) {",
          "485:             model->changeConnectionState(parser, CONN_STATE_CONNECTED_PRETLS_PRECAPS);",
          "486:         } else {",
          "488:         }",
          "489:         break;",
          "490:     case CONN_STATE_STARTTLS_VERIFYING:",
          "",
          "[Removed Lines]",
          "487:             logout(tr(\"The security state of the SSL connection got rejected\"));",
          "",
          "[Added Lines]",
          "487:             abortConnection(tr(\"The security state of the SSL connection got rejected\"));",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "493:             model->accessParser(parser).capabilitiesFresh = false;",
          "494:             capabilityCmd = parser->capability();",
          "495:         } else {",
          "497:         }",
          "498:         break;",
          "499:     default:",
          "",
          "[Removed Lines]",
          "496:             logout(tr(\"The security state of the connection after a STARTTLS operation got rejected\"));",
          "",
          "[Added Lines]",
          "496:             abortConnection(tr(\"The security state of the connection after a STARTTLS operation got rejected\"));",
          "",
          "---------------"
        ],
        "src/Imap/Tasks/OpenConnectionTask.h||src/Imap/Tasks/OpenConnectionTask.h": [
          "File: src/Imap/Tasks/OpenConnectionTask.h -> src/Imap/Tasks/OpenConnectionTask.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "82:     void onComplete();",
          "86:     void askForAuth();",
          "",
          "[Removed Lines]",
          "84:     void logout(const QString &message);",
          "",
          "[Added Lines]",
          "84:     void abortConnection(const QString &message);",
          "",
          "---------------"
        ]
      }
    }
  ]
}