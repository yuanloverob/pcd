{
  "cve_id": "CVE-2021-20223",
  "cve_desc": "",
  "repo": "sqlite/sqlite",
  "patch_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
  "patch_info": {
    "commit_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "files": [
      "ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Prevent fts5 tokenizer unicode61 from considering '\\0' to be a token characters, even if other characters of class \"Cc\" are.\n\nFossilOrigin-Name: b7b7bde9b7a03665e3691c6d51118965f216d2dfb1617f138b9f9e60e418ed2f",
    "before_after_code_files": [
      "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
      "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c"
    ],
    "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test": [
      "File: ext/fts5/test/fts5tok1.test -> ext/fts5/test/fts5tok1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:   SELECT * FROM t4;",
      "112: } {1 {SQL logic error}}",
      "115: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114: #-------------------------------------------------------------------------",
      "115: # Embedded 0x00 characters.",
      "116: #",
      "117: reset_db",
      "118: do_execsql_test 3.1.0 {",
      "119:   CREATE VIRTUAL TABLE t1 USING fts5(z);",
      "120:   CREATE VIRTUAL TABLE tt USING fts5vocab(t1, 'instance');",
      "121:   INSERT INTO t1 VALUES('abc' || char(0) || 'def');",
      "122:   SELECT * FROM tt;",
      "123: } { abc 1 z 0 def 1 z 1 }",
      "124: do_execsql_test 3.1.1 {",
      "125:   SELECT hex(z) FROM t1;",
      "126: } {61626300646566}",
      "127: do_execsql_test 3.1.2 {",
      "128:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "129: } {}",
      "131: do_execsql_test 3.2.0 {",
      "132:   CREATE VIRTUAL TABLE t2 USING fts5(z,",
      "133:       tokenize=\"unicode61 categories 'L* N* Co Cc'\"",
      "134:   );",
      "135:   CREATE VIRTUAL TABLE tu USING fts5vocab(t2, 'instance');",
      "137:   INSERT INTO t2 VALUES('abc' || char(0) || 'def');",
      "138:   SELECT * FROM tu;",
      "139: } { abc 1 z 0 def 1 z 1 }",
      "141: do_execsql_test 3.2.1 {",
      "142:   SELECT hex(z) FROM t1;",
      "143: } {61626300646566}",
      "145: do_execsql_test 3.2.2 {",
      "146:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "147: } {}",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 0e7e113d9f2c929c1f8a85e2cfad8e2e60f0e8770212b5e5320fb2a2c42911f8",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "51690f26bcaab815650286c16362b36d39977cea",
      "candidate_info": {
        "commit_hash": "51690f26bcaab815650286c16362b36d39977cea",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/51690f26bcaab815650286c16362b36d39977cea",
        "files": [
          "ext/fts3/fts3_write.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Fix to check-in [5d9a369301a65f32] so that it compiles without SQLITE_DEBUG.\n\nFossilOrigin-Name: fefe2d046725254367f9f82a8c8cb137e8b75dbbf4bc48debf0649479ff2f0c2",
        "before_after_code_files": [
          "ext/fts3/fts3_write.c||ext/fts3/fts3_write.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/fts3_write.c||ext/fts3/fts3_write.c": [
          "File: ext/fts3/fts3_write.c -> ext/fts3/fts3_write.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1239:     }",
          "1240:   }else if( rc==SQLITE_ERROR ){",
          "1242:   }",
          "1244:   return rc;",
          "",
          "[Removed Lines]",
          "1241:     rc = sqlite3Fts3Corrupt();",
          "",
          "[Added Lines]",
          "1241:     rc = FTS_CORRUPT_VTAB;",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 4dbd398d640852d4a696d68c72ee039968023d402a8053b5e6b4ef1d75e982a8",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5f0dfc00de8f0755545310de3c940ccb2ed9e624",
      "candidate_info": {
        "commit_hash": "5f0dfc00de8f0755545310de3c940ccb2ed9e624",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/5f0dfc00de8f0755545310de3c940ccb2ed9e624",
        "files": [
          "ext/rtree/geopoly.c",
          "ext/rtree/rtree.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Thoroughly reset the rtree cursor at the start of each VFilter operation, including clearing its cache.  This prevents left over pages in the cache which can cause problems on shutdown after a LEFT JOIN. Ticket [5eadca17c4dde90c]\n\nFossilOrigin-Name: 4c50afafce8416369f89477ba7fe7d9b047399a5ee5754c73d0e67bbea8d877c",
        "before_after_code_files": [
          "ext/rtree/geopoly.c||ext/rtree/geopoly.c",
          "ext/rtree/rtree.c||ext/rtree/rtree.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/rtree/geopoly.c||ext/rtree/geopoly.c": [
          "File: ext/rtree/geopoly.c -> ext/rtree/geopoly.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1345:   RtreeNode *pRoot = 0;",
          "1346:   int rc = SQLITE_OK;",
          "1347:   int iCell = 0;",
          "1350:   rtreeReference(pRtree);",
          "1360:   pCsr->iStrategy = idxNum;",
          "1361:   if( idxNum==1 ){",
          "",
          "[Removed Lines]",
          "1348:   sqlite3_stmt *pStmt;",
          "1353:   freeCursorConstraints(pCsr);",
          "1354:   sqlite3_free(pCsr->aPoint);",
          "1355:   pStmt = pCsr->pReadAux;",
          "1356:   memset(pCsr, 0, sizeof(RtreeCursor));",
          "1357:   pCsr->base.pVtab = (sqlite3_vtab*)pRtree;",
          "1358:   pCsr->pReadAux = pStmt;",
          "",
          "[Added Lines]",
          "1352:   resetCursor(pCsr);",
          "",
          "---------------"
        ],
        "ext/rtree/rtree.c||ext/rtree/rtree.c": [
          "File: ext/rtree/rtree.c -> ext/rtree/rtree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1071:   if( pCsr->aConstraint ){",
          "1073:     for(i=0; i<pCsr->nConstraint; i++){",
          "",
          "[Removed Lines]",
          "1070: static void freeCursorConstraints(RtreeCursor *pCsr){",
          "",
          "[Added Lines]",
          "1070: static void resetCursor(RtreeCursor *pCsr){",
          "1071:   Rtree *pRtree = (Rtree *)(pCsr->base.pVtab);",
          "1072:   int ii;",
          "1073:   sqlite3_stmt *pStmt;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1080:     sqlite3_free(pCsr->aConstraint);",
          "1081:     pCsr->aConstraint = 0;",
          "1082:   }",
          "1083: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1086:   for(ii=0; ii<RTREE_CACHE_SZ; ii++) nodeRelease(pRtree, pCsr->aNode[ii]);",
          "1087:   sqlite3_free(pCsr->aPoint);",
          "1088:   pStmt = pCsr->pReadAux;",
          "1089:   memset(pCsr, 0, sizeof(RtreeCursor));",
          "1090:   pCsr->base.pVtab = (sqlite3_vtab*)pRtree;",
          "1091:   pCsr->pReadAux = pStmt;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1088: static int rtreeClose(sqlite3_vtab_cursor *cur){",
          "1089:   Rtree *pRtree = (Rtree *)(cur->pVtab);",
          "1091:   RtreeCursor *pCsr = (RtreeCursor *)cur;",
          "1092:   assert( pRtree->nCursor>0 );",
          "1094:   sqlite3_finalize(pCsr->pReadAux);",
          "1097:   sqlite3_free(pCsr);",
          "1098:   pRtree->nCursor--;",
          "1099:   nodeBlobReset(pRtree);",
          "",
          "[Removed Lines]",
          "1090:   int ii;",
          "1093:   freeCursorConstraints(pCsr);",
          "1095:   sqlite3_free(pCsr->aPoint);",
          "1096:   for(ii=0; ii<RTREE_CACHE_SZ; ii++) nodeRelease(pRtree, pCsr->aNode[ii]);",
          "",
          "[Added Lines]",
          "1102:   resetCursor(pCsr);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1799:   int ii;",
          "1800:   int rc = SQLITE_OK;",
          "1801:   int iCell = 0;",
          "1804:   rtreeReference(pRtree);",
          "1814:   pCsr->iStrategy = idxNum;",
          "1815:   if( idxNum==1 ){",
          "",
          "[Removed Lines]",
          "1802:   sqlite3_stmt *pStmt;",
          "1807:   freeCursorConstraints(pCsr);",
          "1808:   sqlite3_free(pCsr->aPoint);",
          "1809:   pStmt = pCsr->pReadAux;",
          "1810:   memset(pCsr, 0, sizeof(RtreeCursor));",
          "1811:   pCsr->base.pVtab = (sqlite3_vtab*)pRtree;",
          "1812:   pCsr->pReadAux = pStmt;",
          "",
          "[Added Lines]",
          "1813:   resetCursor(pCsr);",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 953e6aa6d9ca09e549c88bc728c322fabdcef581f3b4a7763d95488dddbbd6a5",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c004bd54e33213499cdd3e8c974598fb1eef7764",
      "candidate_info": {
        "commit_hash": "c004bd54e33213499cdd3e8c974598fb1eef7764",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/c004bd54e33213499cdd3e8c974598fb1eef7764",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbeInt.h",
          "src/vdbeaux.c"
        ],
        "message": "Fix another harmless compiler warning.\n\nFossilOrigin-Name: 949eec2530bbe7f48daddfb3022d60ea5d7a43f0f5d120e71c682054feb721db",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbeInt.h||src/vdbeInt.h",
          "src/vdbeaux.c||src/vdbeaux.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: cc54de354317ebc080d4d1ee25427b31a49c4a75e01cb5d9966f1aaeb2ad098d",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbeInt.h||src/vdbeInt.h": [
          "File: src/vdbeInt.h -> src/vdbeInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "501: int sqlite3VdbeNextOpcode(Vdbe*,Mem*,int,int*,int*,Op**);",
          "502: char *sqlite3VdbeDisplayP4(sqlite3*,Op*);",
          "503: #endif",
          "505: char *sqlite3VdbeDisplayComment(sqlite3*,const Op*,const char*);",
          "506: #endif",
          "507: #if !defined(SQLITE_OMIT_EXPLAIN)",
          "",
          "[Removed Lines]",
          "504: #if defined(SQLITE_ENABLE_EXPLAIN_COMMENT)",
          "",
          "[Added Lines]",
          "504: #if defined(SQLITE_ENABLE_EXPLAIN_COMMENTS)",
          "",
          "---------------"
        ],
        "src/vdbeaux.c||src/vdbeaux.c": [
          "File: src/vdbeaux.c -> src/vdbeaux.c"
        ]
      }
    },
    {
      "candidate_hash": "9c9c70920bae0ccd6216ea7fa61f387fdeb0b6ae",
      "candidate_info": {
        "commit_hash": "9c9c70920bae0ccd6216ea7fa61f387fdeb0b6ae",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/9c9c70920bae0ccd6216ea7fa61f387fdeb0b6ae",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/test_vfs.c"
        ],
        "message": "Fix a recently introduced memory leak in the test code in test_vfs.c.\n\nFossilOrigin-Name: 2d53a30cc23e53033af8e8666457654db5dcc453ed6cd176ce1d0bff4f528159",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/test_vfs.c||src/test_vfs.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 2eb997327c2c369c10b7835be80112d77cb2a7cfa9fe4d564042984c21d94698",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/test_vfs.c||src/test_vfs.c": [
          "File: src/test_vfs.c -> src/test_vfs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1392:   if( p->pScript ) Tcl_DecrRefCount(p->pScript);",
          "1393:   sqlite3_vfs_unregister(p->pVfs);",
          "1394:   memset(p->pVfs, 0, sizeof(sqlite3_vfs));",
          "1396:   ckfree((char *)p->pVfs);",
          "1397:   ckfree((char *)p);",
          "1398: }",
          "",
          "[Removed Lines]",
          "1395:   memset(p, 0, sizeof(Testvfs));",
          "",
          "[Added Lines]",
          "1396:   memset(p, 0, sizeof(Testvfs));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "46a31cdf6b7c1197e01627f91af601479cd99940",
      "candidate_info": {
        "commit_hash": "46a31cdf6b7c1197e01627f91af601479cd99940",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/46a31cdf6b7c1197e01627f91af601479cd99940",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/select.c",
          "src/util.c",
          "test/with3.test"
        ],
        "message": "Make sure the WITH stack in the Parse object is disabled following an error.\n\nFossilOrigin-Name: de6e6d6846d6a41c4821454dfdc042096234df753be08c5567b79fe535d9b6ea",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/select.c||src/select.c",
          "src/util.c||src/util.c",
          "test/with3.test||test/with3.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: b59f94e4da9b1653f2004b214407a50340dd476b27e6ec7e29e501a95db9c963",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4670:   assert( pFrom->pTab==0 );",
          "4672:   pCte = searchWith(pParse->pWith, pFrom, &pWith);",
          "4673:   if( pCte ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4671:   if( pParse->nErr ){",
          "4672:     return SQLITE_ERROR;",
          "4673:   }",
          "",
          "---------------"
        ],
        "src/util.c||src/util.c": [
          "File: src/util.c -> src/util.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "192:     sqlite3DbFree(db, pParse->zErrMsg);",
          "193:     pParse->zErrMsg = zMsg;",
          "194:     pParse->rc = SQLITE_ERROR;",
          "195:   }",
          "196: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "195:     pParse->pWith = 0;",
          "",
          "---------------"
        ],
        "test/with3.test||test/with3.test": [
          "File: test/with3.test -> test/with3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "30:     SELECT 5 FROM t0 UNION SELECT 8 FROM m",
          "31:   )",
          "32:   SELECT * FROM i;",
          "35: # Additional test cases that came out of the work to",
          "36: # fix for Kostya's problem.",
          "",
          "[Removed Lines]",
          "33: } {1 {no such table: m}}",
          "",
          "[Added Lines]",
          "33: } {1 {no such table: t0}}",
          "35: # 2019-11-09 dbfuzzcheck find",
          "36: do_catchsql_test 1.1 {",
          "37:   CREATE VIEW v1(x,y) AS",
          "38:     WITH t1(a,b) AS (VALUES(1,2))",
          "39:     SELECT * FROM nosuchtable JOIN t1;",
          "40:   SELECT * FROM v1;",
          "41: } {1 {no such table: main.nosuchtable}}",
          "",
          "---------------"
        ]
      }
    }
  ]
}