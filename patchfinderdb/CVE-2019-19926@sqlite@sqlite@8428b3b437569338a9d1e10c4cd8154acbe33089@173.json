{
  "cve_id": "CVE-2019-19926",
  "cve_desc": "multiSelect in select.c in SQLite 3.30.1 mishandles certain errors during parsing, as demonstrated by errors from sqlite3WindowRewrite() calls. NOTE: this vulnerability exists because of an incomplete fix for CVE-2019-19880.",
  "repo": "sqlite/sqlite",
  "patch_hash": "8428b3b437569338a9d1e10c4cd8154acbe33089",
  "patch_info": {
    "commit_hash": "8428b3b437569338a9d1e10c4cd8154acbe33089",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/8428b3b437569338a9d1e10c4cd8154acbe33089",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c"
    ],
    "message": "Continuation of [e2bddcd4c55ba3cb]: Add another spot where it is necessary to abort early due to prior errors in sqlite3WindowRewrite().\n\nFossilOrigin-Name: cba2a2a44cdf138a629109bb0ad088ed4ef67fc66bed3e0373554681a39615d2",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 3d4c0bf8904135fa68c75801bfa738715cacc3b19dc8ad6ef550b11798d4b121",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2809:     }",
      "2810:   #endif",
      "2811:   }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2812:   if( pParse->nErr ) goto multi_select_end;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "7ed6c068f556dd45f705355c3454c1f8af1047d4",
      "candidate_info": {
        "commit_hash": "7ed6c068f556dd45f705355c3454c1f8af1047d4",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/7ed6c068f556dd45f705355c3454c1f8af1047d4",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c",
          "src/vdbeaux.c",
          "test/indexexpr2.test"
        ],
        "message": "Fix a problem in [b5ca442a] causing an assert() to fail in REINDEX commands.\n\nFossilOrigin-Name: a3e77c7776ab01dadb9d30d6067ac97e9d4b09ec54834558a5fa1ffed7b52c72",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c",
          "src/vdbeaux.c||src/vdbeaux.c",
          "test/indexexpr2.test||test/indexexpr2.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: b8071d10cba8f6c19fb8d5df3877f72567dc6d6a94744a39cbc1f58b2e2f343b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c"
        ],
        "src/vdbeaux.c||src/vdbeaux.c": [
          "File: src/vdbeaux.c -> src/vdbeaux.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "648:       break;",
          "649:     }",
          "650:     if( opcode==OP_CreateBtree && pOp->p3==BTREE_INTKEY ) hasCreateTable = 1;",
          "652:     if( opcode==OP_InitCoroutine ) hasInitCoroutine = 1;",
          "653: #ifndef SQLITE_OMIT_FOREIGN_KEY",
          "654:     if( opcode==OP_FkCounter && pOp->p1==0 && pOp->p2==1 ){",
          "",
          "[Removed Lines]",
          "651:     if( opcode==OP_CreateBtree && pOp->p3==BTREE_BLOBKEY ) hasCreateIndex = 1;",
          "",
          "[Added Lines]",
          "651:     if( mayAbort ){",
          "656:       if( opcode==OP_CreateBtree && pOp->p3==BTREE_BLOBKEY ) hasCreateIndex = 1;",
          "657:       if( opcode==OP_Clear ) hasCreateIndex = 1;",
          "658:     }",
          "",
          "---------------"
        ],
        "test/indexexpr2.test||test/indexexpr2.test": [
          "File: test/indexexpr2.test -> test/indexexpr2.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "291:   SELECT sql FROM sqlite_master WHERE tbl_name = 't0';",
          "292:   CREATE INDEX i0 ON t0(c0);",
          "293: } {{CREATE TABLE t0(c0)}}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "294: do_execsql_test 7.3 {",
          "295:   REINDEX;",
          "296: } {}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a790882d63af27deca8a2cf63577ae909fe08d6c",
      "candidate_info": {
        "commit_hash": "a790882d63af27deca8a2cf63577ae909fe08d6c",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/a790882d63af27deca8a2cf63577ae909fe08d6c",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/dbfuzz2.c"
        ],
        "message": "Add the -memtrace option to dbfuzz2.\n\nFossilOrigin-Name: 67fecbc79d3e927a7e22f3589be3184114322635874e4b3170666e352d0bfe9d",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/dbfuzz2.c||test/dbfuzz2.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 3a127ef9f7feafe6ba8c75e4eb29e28aa61a30249082cc8767ada1ec0cc0b7f1",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/dbfuzz2.c||test/dbfuzz2.c": [
          "File: test/dbfuzz2.c -> test/dbfuzz2.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "73: static sqlite3_int64 szMax = 104857600;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "77: static sqlite3_mem_methods memtraceBase;",
          "78: static FILE *memtraceOut;",
          "81: static void *memtraceMalloc(int n){",
          "82:   if( memtraceOut ){",
          "83:     fprintf(memtraceOut, \"MEMTRACE: allocate %d bytes\\n\",",
          "84:             memtraceBase.xRoundup(n));",
          "85:   }",
          "86:   return memtraceBase.xMalloc(n);",
          "87: }",
          "88: static void memtraceFree(void *p){",
          "89:   if( p==0 ) return;",
          "90:   if( memtraceOut ){",
          "91:     fprintf(memtraceOut, \"MEMTRACE: free %d bytes\\n\", memtraceBase.xSize(p));",
          "92:   }",
          "93:   memtraceBase.xFree(p);",
          "94: }",
          "95: static void *memtraceRealloc(void *p, int n){",
          "96:   if( p==0 ) return memtraceMalloc(n);",
          "97:   if( n==0 ){",
          "98:     memtraceFree(p);",
          "99:     return 0;",
          "100:   }",
          "101:   if( memtraceOut ){",
          "102:     fprintf(memtraceOut, \"MEMTRACE: resize %d -> %d bytes\\n\",",
          "103:             memtraceBase.xSize(p), memtraceBase.xRoundup(n));",
          "104:   }",
          "105:   return memtraceBase.xRealloc(p, n);",
          "106: }",
          "107: static int memtraceSize(void *p){",
          "108:   return memtraceBase.xSize(p);",
          "109: }",
          "110: static int memtraceRoundup(int n){",
          "111:   return memtraceBase.xRoundup(n);",
          "112: }",
          "113: static int memtraceInit(void *p){",
          "114:   return memtraceBase.xInit(p);",
          "115: }",
          "116: static void memtraceShutdown(void *p){",
          "117:   memtraceBase.xShutdown(p);",
          "118: }",
          "121: static sqlite3_mem_methods ersaztMethods = {",
          "122:   memtraceMalloc,",
          "123:   memtraceFree,",
          "124:   memtraceRealloc,",
          "125:   memtraceSize,",
          "126:   memtraceRoundup,",
          "127:   memtraceInit,",
          "128:   memtraceShutdown",
          "129: };",
          "132: int sqlite3MemTraceActivate(FILE *out){",
          "133:   int rc = SQLITE_OK;",
          "134:   if( memtraceBase.xMalloc==0 ){",
          "135:     rc = sqlite3_config(SQLITE_CONFIG_GETMALLOC, &memtraceBase);",
          "136:     if( rc==SQLITE_OK ){",
          "137:       rc = sqlite3_config(SQLITE_CONFIG_MALLOC, &ersaztMethods);",
          "138:     }",
          "139:   }",
          "140:   memtraceOut = out;",
          "141:   return rc;",
          "142: }",
          "145: int sqlite3MemTraceDeactivate(void){",
          "146:   int rc = SQLITE_OK;",
          "147:   if( memtraceBase.xMalloc!=0 ){",
          "148:     rc = sqlite3_config(SQLITE_CONFIG_MALLOC, &memtraceBase);",
          "149:     if( rc==SQLITE_OK ){",
          "150:       memset(&memtraceBase, 0, sizeof(memtraceBase));",
          "151:     }",
          "152:   }",
          "153:   memtraceOut = 0;",
          "154:   return rc;",
          "155: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "162:         bVdbeDebug = 1;",
          "163:         continue;",
          "164:       }",
          "165:       if( strcmp(z,\"max-db-size\")==0 ){",
          "166:         if( i+1==argc ){",
          "167:           fprintf(stderr, \"missing argument to %s\\n\", argv[i]);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "248:       if( strcmp(z,\"memtrace\")==0 ){",
          "249:         sqlite3MemTraceActivate(stdout);",
          "250:         continue;",
          "251:       }",
          "252:       if( strcmp(z,\"mem\")==0 ){",
          "253:         bVdbeDebug = 1;",
          "254:         continue;",
          "255:       }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9cb02640419614ae3771ebbffce076474380029b",
      "candidate_info": {
        "commit_hash": "9cb02640419614ae3771ebbffce076474380029b",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/9cb02640419614ae3771ebbffce076474380029b",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in"
        ],
        "message": "Add the \".parameter\" command to the CLI.\n\nFossilOrigin-Name: 1f9fa58541dc974989eee9c9a5d453956f7dbcf42965ece2db2cb5dee3f3f5e2",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: c7f70b6d96338dba201e005104e7f7148c1a8cd767ab05e35b44617c4c797bc5",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "2751: #define BIND_PARAM_TABLE \"$Parameters\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2754: static void bind_table_init(ShellState *p){",
          "2755:   sqlite3_exec(p->db,",
          "2756:     \"CREATE TABLE IF NOT EXISTS temp.[\" BIND_PARAM_TABLE \"](\\n\"",
          "2757:     \"  key TEXT PRIMARY KEY,\\n\"",
          "2758:     \"  value ANY\\n\"",
          "2759:     \") WITHOUT ROWID;\",",
          "2760:     0, 0, 0);",
          "2761: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3547:   \"        --zip           FILE is a ZIP archive\",",
          "3548:   \".output ?FILE?           Send output to FILE or stdout if FILE is omitted\",",
          "3549:   \"     If FILE begins with '|' then open it as a pipe.\",",
          "3550:   \".print STRING...         Print literal STRING\",",
          "3551: #ifndef SQLITE_OMIT_PROGRESS_CALLBACK",
          "3552:   \".progress N              Invoke progress handler after every N opcodes\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3560:   \".parameter CMD ...       Manage SQL parameter bindings\",",
          "3561:   \"   clear                   Erase all bindings\",",
          "3562:   \"   init                    Initialize the TEMP table that holds bindings\",",
          "3563:   \"   list                    List the current parameter bindings\",",
          "3564:   \"   set PARAMETER VALUE     Given SQL parameter PARAMETER a value of VALUE\",",
          "3565:   \"                           PARAMETER should start with '$', ':', '@', or '?'\",",
          "3566:   \"   unset PARAMETER         Remove PARAMETER from the binding table\",",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "7078:     }",
          "7079:   }else",
          "7081:   if( c=='p' && n>=3 && strncmp(azArg[0], \"print\", n)==0 ){",
          "7082:     int i;",
          "7083:     for(i=1; i<nArg; i++){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7098:   if( c=='p' && n>=3 && strncmp(azArg[0], \"parameter\", n)==0 ){",
          "7099:     open_db(p,0);",
          "7100:     if( nArg<=1 ) goto parameter_syntax_error;",
          "7105:     if( nArg==2 && strcmp(azArg[1],\"clear\")==0 ){",
          "7106:       sqlite3_exec(p->db, \"DROP TABLE IF EXISTS temp.[\" BIND_PARAM_TABLE \"];\",",
          "7107:                    0, 0, 0);",
          "7108:     }else",
          "7113:     if( nArg==2 && strcmp(azArg[1],\"list\")==0 ){",
          "7114:       sqlite3_stmt *pStmt = 0;",
          "7115:       int rx;",
          "7116:       int len = 0;",
          "7117:       rx = sqlite3_prepare_v2(p->db,",
          "7118:              \"SELECT max(length(key)) \"",
          "7119:              \"FROM temp.[\" BIND_PARAM_TABLE \"];\", -1, &pStmt, 0);",
          "7120:       if( rx==SQLITE_OK && sqlite3_step(pStmt)==SQLITE_ROW ){",
          "7121:         len = sqlite3_column_int(pStmt, 0);",
          "7122:         if( len>40 ) len = 40;",
          "7123:       }",
          "7124:       sqlite3_finalize(pStmt);",
          "7125:       pStmt = 0;",
          "7126:       if( len ){",
          "7127:         rx = sqlite3_prepare_v2(p->db,",
          "7128:              \"SELECT key, quote(value) \"",
          "7129:              \"FROM temp.[\" BIND_PARAM_TABLE \"];\", -1, &pStmt, 0);",
          "7130:         while( sqlite3_step(pStmt)==SQLITE_ROW ){",
          "7131:           utf8_printf(p->out, \"%-*s %s\\n\", len, sqlite3_column_text(pStmt,0),",
          "7132:                       sqlite3_column_text(pStmt,1));",
          "7133:         }",
          "7134:         sqlite3_finalize(pStmt);",
          "7135:       }",
          "7136:     }else",
          "7142:     if( nArg==2 && strcmp(azArg[1],\"init\")==0 ){",
          "7143:       bind_table_init(p);",
          "7144:     }else",
          "7152:     if( nArg==4 && strcmp(azArg[1],\"set\")==0 ){",
          "7153:       int rx;",
          "7154:       char *zSql;",
          "7155:       sqlite3_stmt *pStmt;",
          "7156:       const char *zKey = azArg[2];",
          "7157:       const char *zValue = azArg[3];",
          "7158:       bind_table_init(p);",
          "7159:       zSql = sqlite3_mprintf(",
          "7160:                   \"REPLACE INTO temp.[\" BIND_PARAM_TABLE \"](key,value)\"",
          "7161:                   \"VALUES(%Q,%s);\", zKey, zValue);",
          "7162:       if( zSql==0 ) shell_out_of_memory();",
          "7163:       pStmt = 0;",
          "7164:       rx = sqlite3_prepare_v2(p->db, zSql, -1, &pStmt, 0);",
          "7165:       sqlite3_free(zSql);",
          "7166:       if( rx!=SQLITE_OK ){",
          "7167:         sqlite3_finalize(pStmt);",
          "7168:         pStmt = 0;",
          "7169:         zSql = sqlite3_mprintf(",
          "7170:                    \"REPLACE INTO temp.[\" BIND_PARAM_TABLE \"](key,value)\"",
          "7171:                    \"VALUES(%Q,%Q);\", zKey, zValue);",
          "7172:         if( zSql==0 ) shell_out_of_memory();",
          "7173:         rx = sqlite3_prepare_v2(p->db, zSql, -1, &pStmt, 0);",
          "7174:         sqlite3_free(zSql);",
          "7175:         if( rx!=SQLITE_OK ){",
          "7176:           utf8_printf(p->out, \"Error: %s\\n\", sqlite3_errmsg(p->db));",
          "7177:           sqlite3_finalize(pStmt);",
          "7178:           pStmt = 0;",
          "7179:           rc = 1;",
          "7180:         }",
          "7181:       }",
          "7182:       sqlite3_step(pStmt);",
          "7183:       sqlite3_finalize(pStmt);",
          "7184:     }else",
          "7190:     if( nArg==3 && strcmp(azArg[1],\"unset\")==0 ){",
          "7191:       char *zSql = sqlite3_mprintf(",
          "7192:           \"DELETE FROM temp.[\" BIND_PARAM_TABLE \"] WHERE key=%Q\", azArg[2]);",
          "7193:       if( zSql==0 ) shell_out_of_memory();",
          "7194:       sqlite3_exec(p->db, zSql, 0, 0, 0);",
          "7195:       sqlite3_free(zSql);",
          "7196:     }else",
          "7198:     parameter_syntax_error:",
          "7199:     showHelp(p->out, \"parameter\");",
          "7200:   }else",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7ac0e562a384a45458aa66c8cffeabaf532e111c",
      "candidate_info": {
        "commit_hash": "7ac0e562a384a45458aa66c8cffeabaf532e111c",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/7ac0e562a384a45458aa66c8cffeabaf532e111c",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "test/join5.test"
        ],
        "message": "Fix an assert() failure that could occur in a join query if the RHS of an IN() operator is a list containing correlated expressions. This problem was introduced by checkin [e130319317e7611938] which was part of the fix for ticket [787fa716be3a7f650c] - so this commit is part of that ticket's fix too.\n\nFossilOrigin-Name: 778b1224a318d0137c7dab8361128f593506d3677267898119b934b4d66dfe38",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "test/join5.test||test/join5.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: d91095ba7130e974f0c95334760c679a31479b07a3d458e15994a24eee474752",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2809:       if( addrOnce && !sqlite3ExprIsConstant(pE2) ){",
          "2810:         sqlite3VdbeChangeToNoop(v, addrOnce);",
          "2811:         addrOnce = 0;",
          "2812:       }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2811:         ExprClearProperty(pExpr, EP_Subrtn);",
          "",
          "---------------"
        ],
        "test/join5.test||test/join5.test": [
          "File: test/join5.test -> test/join5.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "306:   `--SEARCH TABLE t4 USING INDEX t4xz (x=?)",
          "307: }",
          "309: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "309: reset_db",
          "310: do_execsql_test 8.0 {",
          "311:   CREATE TABLE t0 (c0, c1, PRIMARY KEY (c0, c1));",
          "312:   CREATE TABLE t1 (c0);",
          "314:   INSERT INTO t1 VALUES (2);",
          "316:   INSERT INTO t0 VALUES(0, 10);",
          "317:   INSERT INTO t0 VALUES(1, 10);",
          "318:   INSERT INTO t0 VALUES(2, 10);",
          "319:   INSERT INTO t0 VALUES(3, 10);",
          "320: }",
          "322: do_execsql_test 8.1 {",
          "323:   SELECT * FROM t0, t1",
          "324:   WHERE (t0.c1 >= 1 OR t0.c1 < 1) AND t0.c0 IN (1, t1.c0) ORDER BY 1;",
          "325: } {",
          "326:   1 10 2",
          "327:   2 10 2",
          "328: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4ec3e820a00c5372972a0f1b143b2797b21ffb9f",
      "candidate_info": {
        "commit_hash": "4ec3e820a00c5372972a0f1b143b2797b21ffb9f",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/4ec3e820a00c5372972a0f1b143b2797b21ffb9f",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/wherecode.c"
        ],
        "message": "Formatting change on a multi-line conditional, for improved clarity. No logic changes.\n\nFossilOrigin-Name: 7248e3476511ecd317f54edcfe1e87443bfdcc1b10c89c7734eefcabafec6c0b",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/wherecode.c||src/wherecode.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: bc751fb64d5b08e5ca4c85cd1c6fbf09590fa9dad7e176ba373082ea373655b5",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/wherecode.c||src/wherecode.c": [
          "File: src/wherecode.c -> src/wherecode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1308:       if( (pTerm->eOperator & WO_IN)!=0 ) iIn--;",
          "1309:       if( j<16 && (pLoop->u.vtab.omitMask>>j)&1 ){",
          "1310:         disableTerm(pLevel, pTerm);",
          "1313:       ){",
          "",
          "[Removed Lines]",
          "1311:       }else if( (pTerm->eOperator & WO_IN)!=0 &&",
          "1312:           sqlite3ExprVectorSize(pTerm->pExpr->pLeft)==1",
          "",
          "[Added Lines]",
          "1311:       }else if( (pTerm->eOperator & WO_IN)!=0",
          "1312:         && sqlite3ExprVectorSize(pTerm->pExpr->pLeft)==1",
          "",
          "---------------"
        ]
      }
    }
  ]
}