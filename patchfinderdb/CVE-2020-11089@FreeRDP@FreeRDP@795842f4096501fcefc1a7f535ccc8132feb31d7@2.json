{
  "cve_id": "CVE-2020-11089",
  "cve_desc": "In FreeRDP before 2.1.0, there is an out-of-bound read in irp functions (parallel_process_irp_create, serial_process_irp_create, drive_process_irp_write, printer_process_irp_write, rdpei_recv_pdu, serial_process_irp_write). This has been fixed in 2.1.0.",
  "repo": "FreeRDP/FreeRDP",
  "patch_hash": "795842f4096501fcefc1a7f535ccc8132feb31d7",
  "patch_info": {
    "commit_hash": "795842f4096501fcefc1a7f535ccc8132feb31d7",
    "repo": "FreeRDP/FreeRDP",
    "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/795842f4096501fcefc1a7f535ccc8132feb31d7",
    "files": [
      "channels/parallel/client/parallel_main.c"
    ],
    "message": "Fixed oob read in parallel_process_irp_create",
    "before_after_code_files": [
      "channels/parallel/client/parallel_main.c||channels/parallel/client/parallel_main.c"
    ]
  },
  "patch_diff": {
    "channels/parallel/client/parallel_main.c||channels/parallel/client/parallel_main.c": [
      "File: channels/parallel/client/parallel_main.c -> channels/parallel/client/parallel_main.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "83: {",
      "84:  char* path = NULL;",
      "85:  int status;",
      "86:  UINT32 PathLength;",
      "90:  Stream_Read_UINT32(irp->input, PathLength);",
      "94:  if (status < 1)",
      "95:   if (!(path = (char*)calloc(1, 1)))",
      "",
      "[Removed Lines]",
      "87:  Stream_Seek(irp->input, 28);",
      "91:  status = ConvertFromUnicode(CP_UTF8, 0, (WCHAR*)Stream_Pointer(irp->input), PathLength / 2,",
      "92:                              &path, 0, NULL, NULL);",
      "",
      "[Added Lines]",
      "86:  WCHAR* ptr;",
      "88:  if (!Stream_SafeSeek(irp->input, 28))",
      "89:   return ERROR_INVALID_DATA;",
      "92:  if (Stream_GetRemainingLength(irp->input) < 4)",
      "93:   return ERROR_INVALID_DATA;",
      "95:  ptr = (WCHAR*)Stream_Pointer(irp->input);",
      "96:  if (!Stream_SafeSeek(irp->input, PathLength))",
      "97:   return ERROR_INVALID_DATA;",
      "98:  status = ConvertFromUnicode(CP_UTF8, 0, ptr, PathLength / 2, &path, 0, NULL, NULL);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "af79aafbba3c0380fccbaf0ff03223966811f173",
      "candidate_info": {
        "commit_hash": "af79aafbba3c0380fccbaf0ff03223966811f173",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/af79aafbba3c0380fccbaf0ff03223966811f173",
        "files": [
          "channels/smartcard/client/smartcard_pack.c"
        ],
        "message": "Fixed int overflow in smartcard_ndr_read\n\nThanks to hac425",
        "before_after_code_files": [
          "channels/smartcard/client/smartcard_pack.c||channels/smartcard/client/smartcard_pack.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6151"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "channels/smartcard/client/smartcard_pack.c||channels/smartcard/client/smartcard_pack.c": [
          "File: channels/smartcard/client/smartcard_pack.c -> channels/smartcard/client/smartcard_pack.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "101: static LONG smartcard_ndr_read(wStream* s, BYTE** data, size_t min, size_t elementSize,",
          "102:                                ndr_ptr_t type)",
          "103: {",
          "105:  void* r;",
          "106:  size_t required;",
          "",
          "[Removed Lines]",
          "104:  UINT32 len, offset, len2;",
          "",
          "[Added Lines]",
          "104:  size_t len, offset, len2;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "163:            min, len);",
          "164:   return STATUS_DATA_ERROR;",
          "165:  }",
          "169:  {",
          "170:   WLog_ERR(TAG,",
          "171:            \"Short data while trying to read data from NDR pointer, expected %\" PRIu32",
          "",
          "[Removed Lines]",
          "166:  len *= elementSize;",
          "168:  if (Stream_GetRemainingLength(s) < len)",
          "",
          "[Added Lines]",
          "167:  if (len > SIZE_MAX / 2)",
          "168:   return STATUS_BUFFER_TOO_SMALL;",
          "170:  if (Stream_GetRemainingLength(s) / elementSize < len)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "173:            len, Stream_GetRemainingLength(s));",
          "174:   return STATUS_BUFFER_TOO_SMALL;",
          "175:  }",
          "177:  r = calloc(len + 1, sizeof(CHAR));",
          "178:  if (!r)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "178:  len *= elementSize;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "52dd312e11b7376db62eabda244b481386d28c86",
      "candidate_info": {
        "commit_hash": "52dd312e11b7376db62eabda244b481386d28c86",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/52dd312e11b7376db62eabda244b481386d28c86",
        "files": [
          "channels/urbdrc/client/data_transfer.c"
        ],
        "message": "Fixed various input buffer length checks in URBDRC\n\nThanks to hac425 CVE-2020-11039",
        "before_after_code_files": [
          "channels/urbdrc/client/data_transfer.c||channels/urbdrc/client/data_transfer.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6151"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "channels/urbdrc/client/data_transfer.c||channels/urbdrc/client/data_transfer.c": [
          "File: channels/urbdrc/client/data_transfer.c -> channels/urbdrc/client/data_transfer.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "234:  Stream_Read_UINT32(s, IoControlCode);",
          "235:  Stream_Read_UINT32(s, InputBufferSize);",
          "238:   return ERROR_INVALID_DATA;",
          "241:  Stream_Read_UINT32(s, OutputBufferSize);",
          "242:  Stream_Read_UINT32(s, RequestId);",
          "243:  InterfaceId = ((STREAM_ID_PROXY << 30) | pdev->get_ReqCompletion(pdev));",
          "",
          "[Removed Lines]",
          "237:  if (Stream_GetRemainingLength(s) < InputBufferSize + 8)",
          "240:  Stream_Seek(s, InputBufferSize);",
          "",
          "[Added Lines]",
          "237:  if (!Stream_SafeSeek(s, InputBufferSize))",
          "238:   return ERROR_INVALID_DATA;",
          "239:  if (Stream_GetRemainingLength(s) < 8ULL)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "315:  Stream_Read_UINT32(s, IoControlCode);",
          "316:  Stream_Read_UINT32(s, InputBufferSize);",
          "319:   return ERROR_INVALID_DATA;",
          "322:  Stream_Read_UINT32(s, OutputBufferSize);",
          "323:  Stream_Read_UINT32(s, RequestId);",
          "324:  InterfaceId = ((STREAM_ID_PROXY << 30) | pdev->get_ReqCompletion(pdev));",
          "",
          "[Removed Lines]",
          "318:  if (Stream_GetRemainingLength(s) < InputBufferSize + 8)",
          "321:  Stream_Seek(s, InputBufferSize);",
          "",
          "[Added Lines]",
          "319:  if (!Stream_SafeSeek(s, InputBufferSize))",
          "320:   return ERROR_INVALID_DATA;",
          "321:  if (Stream_GetRemainingLength(s) < 8ULL)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "398:                                      int transferDir)",
          "399: {",
          "400:  MSUSB_CONFIG_DESCRIPTOR* MsConfig = NULL;",
          "402:  BYTE ConfigurationDescriptorIsValid;",
          "403:  wStream* out;",
          "404:  int MsOutSize = 0;",
          "",
          "[Removed Lines]",
          "401:  UINT32 out_size, InterfaceId, NumInterfaces, usbd_status = 0;",
          "",
          "[Added Lines]",
          "402:  size_t out_size;",
          "403:  UINT32 InterfaceId, NumInterfaces, usbd_status = 0;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "452:  if (MsConfig)",
          "453:   MsOutSize = MsConfig->MsOutSize;",
          "455:  if (MsOutSize > 0)",
          "456:   out_size = 36 + MsOutSize;",
          "457:  else",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "457:  if (MsOutSize > SIZE_MAX - 36)",
          "458:   return ERROR_INVALID_DATA;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "807:                                            wStream* s, UINT32 RequestField, UINT32 MessageId,",
          "808:                                            IUDEVMAN* udevman, BYTE func_recipient, int transferDir)",
          "809: {",
          "811:  BYTE bmRequestType, desc_index, desc_type;",
          "812:  UINT16 langId;",
          "813:  wStream* out;",
          "",
          "[Removed Lines]",
          "810:  UINT32 out_size, InterfaceId, OutputBufferSize, usbd_status;",
          "",
          "[Added Lines]",
          "815:  size_t out_size;",
          "816:  UINT32 InterfaceId, OutputBufferSize, usbd_status;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "831:  Stream_Read_UINT8(s, desc_type);",
          "832:  Stream_Read_UINT16(s, langId);",
          "833:  Stream_Read_UINT32(s, OutputBufferSize);",
          "835:  if (transferDir == USBD_TRANSFER_DIRECTION_OUT)",
          "836:  {",
          "837:   if (Stream_GetRemainingLength(s) < OutputBufferSize)",
          "838:    return ERROR_INVALID_DATA;",
          "839:  }",
          "842:  out = Stream_New(NULL, out_size);",
          "844:  if (!out)",
          "",
          "[Removed Lines]",
          "841:  out_size = 36 + OutputBufferSize;",
          "",
          "[Added Lines]",
          "840:  if (OutputBufferSize > UINT32_MAX - 36)",
          "841:   return ERROR_INVALID_DATA;",
          "848:  out_size = 36ULL + OutputBufferSize;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "885:                                            wStream* s, UINT32 RequestField, UINT32 MessageId,",
          "886:                                            IUDEVMAN* udevman, BYTE func_recipient, int transferDir)",
          "887: {",
          "889:  UINT16 Index;",
          "890:  BYTE bmRequestType;",
          "891:  wStream* out;",
          "",
          "[Removed Lines]",
          "888:  UINT32 out_size, InterfaceId, OutputBufferSize, usbd_status;",
          "",
          "[Added Lines]",
          "895:  size_t out_size;",
          "896:  UINT32 InterfaceId, OutputBufferSize, usbd_status;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "916:  Stream_Seek(s, 2);",
          "917:  Stream_Read_UINT32(s, OutputBufferSize);",
          "919:  out = Stream_New(NULL, out_size);",
          "921:  if (!out)",
          "",
          "[Removed Lines]",
          "918:  out_size = 36 + OutputBufferSize;",
          "",
          "[Added Lines]",
          "926:  if (OutputBufferSize > UINT32_MAX - 36)",
          "927:   return ERROR_INVALID_DATA;",
          "928:  out_size = 36ULL + OutputBufferSize;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "972:  Stream_Read_UINT32(s, OutputBufferSize);",
          "974:  if (transferDir == USBD_TRANSFER_DIRECTION_OUT)",
          "975:  {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "983:  if (OutputBufferSize > UINT32_MAX - 36)",
          "984:   return ERROR_INVALID_DATA;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "977:    return ERROR_INVALID_DATA;",
          "978:  }",
          "981:  out = Stream_New(NULL, out_size);",
          "983:  if (!out)",
          "",
          "[Removed Lines]",
          "980:  out_size = 36 + OutputBufferSize;",
          "",
          "[Added Lines]",
          "992:  out_size = 36ULL + OutputBufferSize;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1022:                                               wStream* s, UINT32 RequestField, UINT32 MessageId,",
          "1023:                                               IUDEVMAN* udevman, int transferDir)",
          "1024: {",
          "1026:  BYTE Recipient, InterfaceNumber, Ms_PageIndex;",
          "1027:  UINT16 Ms_featureDescIndex;",
          "1028:  wStream* out;",
          "",
          "[Removed Lines]",
          "1025:  UINT32 out_size, InterfaceId, OutputBufferSize, usbd_status;",
          "",
          "[Added Lines]",
          "1037:  size_t out_size;",
          "1038:  UINT32 InterfaceId, OutputBufferSize, usbd_status;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1052:  Stream_Read_UINT32(s, OutputBufferSize);",
          "1054:  switch (transferDir)",
          "1055:  {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1066:  if (OutputBufferSize > UINT32_MAX - 36)",
          "1067:   return ERROR_INVALID_DATA;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1064:  }",
          "1066:  InterfaceId = ((STREAM_ID_PROXY << 30) | pdev->get_ReqCompletion(pdev));",
          "1068:  out = Stream_New(NULL, out_size);",
          "1070:  if (!out)",
          "",
          "[Removed Lines]",
          "1067:  out_size = 36 + OutputBufferSize;",
          "",
          "[Added Lines]",
          "1082:  out_size = 36ULL + OutputBufferSize;",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1245:                                                   wStream* s, UINT32 RequestField, UINT32 MessageId,",
          "1246:                                                   IUDEVMAN* udevman, int transferDir)",
          "1247: {",
          "1249:  wStream* out;",
          "1250:  URBDRC_PLUGIN* urbdrc;",
          "1251:  const BOOL noAck = (RequestField & 0x80000000U) != 0;",
          "",
          "[Removed Lines]",
          "1248:  UINT32 out_size, InterfaceId, OutputBufferSize, usbd_status;",
          "",
          "[Added Lines]",
          "1263:  size_t out_size;",
          "1264:  UINT32 InterfaceId, OutputBufferSize, usbd_status;",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1271:   return ERROR_INVALID_DATA;",
          "1273:  Stream_Read_UINT32(s, OutputBufferSize);",
          "1275:  out = Stream_New(NULL, out_size);",
          "1277:  if (!out)",
          "",
          "[Removed Lines]",
          "1274:  out_size = 36 + OutputBufferSize;",
          "",
          "[Added Lines]",
          "1290:  if (OutputBufferSize > UINT32_MAX - 36)",
          "1291:   return ERROR_INVALID_DATA;",
          "1292:  out_size = 36ULL + OutputBufferSize;",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1298:                                               wStream* s, UINT32 RequestField, UINT32 MessageId,",
          "1299:                                               IUDEVMAN* udevman, int transferDir)",
          "1300: {",
          "1302:  UINT16 interface;",
          "1303:  wStream* out;",
          "1304:  URBDRC_PLUGIN* urbdrc;",
          "",
          "[Removed Lines]",
          "1301:  UINT32 out_size, InterfaceId, OutputBufferSize, usbd_status;",
          "",
          "[Added Lines]",
          "1319:  size_t out_size;",
          "1320:  UINT32 InterfaceId, OutputBufferSize, usbd_status;",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1327:  Stream_Read_UINT16(s, interface);",
          "1328:  Stream_Seek(s, 2);",
          "1329:  Stream_Read_UINT32(s, OutputBufferSize);",
          "1331:  out = Stream_New(NULL, out_size);",
          "1333:  if (!out)",
          "",
          "[Removed Lines]",
          "1330:  out_size = 36 + OutputBufferSize;",
          "",
          "[Added Lines]",
          "1349:  if (OutputBufferSize > UINT32_MAX - 36)",
          "1350:   return ERROR_INVALID_DATA;",
          "1351:  out_size = 36ULL + OutputBufferSize;",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1376:  Stream_Read_UINT16(s, FeatureSelector);",
          "1377:  Stream_Read_UINT16(s, Index);",
          "1378:  Stream_Read_UINT32(s, OutputBufferSize);",
          "1380:  switch (transferDir)",
          "1381:  {",
          "1382:   case USBD_TRANSFER_DIRECTION_OUT:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1400:  if (OutputBufferSize > UINT32_MAX - 36)",
          "1401:   return ERROR_INVALID_DATA;",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1389:    break;",
          "1390:  }",
          "1394:  if (!out)",
          "1395:   return ERROR_OUTOFMEMORY;",
          "",
          "[Removed Lines]",
          "1392:  out = Stream_New(NULL, 36 + OutputBufferSize);",
          "",
          "[Added Lines]",
          "1414:  out = Stream_New(NULL, 36ULL + OutputBufferSize);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "917daa8b560903690cf73b1da6cefe9604e75816",
      "candidate_info": {
        "commit_hash": "917daa8b560903690cf73b1da6cefe9604e75816",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/917daa8b560903690cf73b1da6cefe9604e75816",
        "files": [
          "channels/parallel/client/parallel_main.c"
        ],
        "message": "Fixed oob read in parallel_process_irp_write",
        "before_after_code_files": [
          "channels/parallel/client/parallel_main.c||channels/parallel/client/parallel_main.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6151"
        ],
        "olp_code_files": {
          "patch": [
            "channels/parallel/client/parallel_main.c||channels/parallel/client/parallel_main.c"
          ],
          "candidate": [
            "channels/parallel/client/parallel_main.c||channels/parallel/client/parallel_main.c"
          ]
        }
      },
      "candidate_diff": {
        "channels/parallel/client/parallel_main.c||channels/parallel/client/parallel_main.c": [
          "File: channels/parallel/client/parallel_main.c -> channels/parallel/client/parallel_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "201:  UINT32 Length;",
          "202:  UINT64 Offset;",
          "203:  ssize_t status;",
          "204:  Stream_Read_UINT32(irp->input, Length);",
          "205:  Stream_Read_UINT64(irp->input, Offset);",
          "207:  len = Length;",
          "209:  while (len > 0)",
          "210:  {",
          "213:   if (status < 0)",
          "214:   {",
          "",
          "[Removed Lines]",
          "211:   status = write(parallel->file, Stream_Pointer(irp->input), len);",
          "",
          "[Added Lines]",
          "204:  void* ptr;",
          "205:  if (Stream_GetRemainingLength(irp->input) > 12)",
          "206:   return ERROR_INVALID_DATA;",
          "211:   return ERROR_INVALID_DATA;",
          "212:  ptr = Stream_Pointer(irp->input);",
          "213:  if (!Stream_SafeSeek(irp->input, Length))",
          "214:   return ERROR_INVALID_DATA;",
          "219:   status = write(parallel->file, ptr, len);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9f77fc3dd2394373e1be753952b00dafa1a9b7da",
      "candidate_info": {
        "commit_hash": "9f77fc3dd2394373e1be753952b00dafa1a9b7da",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/9f77fc3dd2394373e1be753952b00dafa1a9b7da",
        "files": [
          "channels/urbdrc/common/msusb.c"
        ],
        "message": "Fixed int overflow in msusb_mspipes_read\n\nThanks to hac425",
        "before_after_code_files": [
          "channels/urbdrc/common/msusb.c||channels/urbdrc/common/msusb.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6151"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "channels/urbdrc/common/msusb.c||channels/urbdrc/common/msusb.c": [
          "File: channels/urbdrc/common/msusb.c -> channels/urbdrc/common/msusb.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "64:  UINT32 pnum;",
          "65:  MSUSB_PIPE_DESCRIPTOR** MsPipes;",
          "68:   return NULL;",
          "70:  MsPipes = (MSUSB_PIPE_DESCRIPTOR**)calloc(NumberOfPipes, sizeof(MSUSB_PIPE_DESCRIPTOR*));",
          "",
          "[Removed Lines]",
          "67:  if (Stream_GetRemainingCapacity(s) < 12 * NumberOfPipes)",
          "",
          "[Added Lines]",
          "67:  if (Stream_GetRemainingCapacity(s) / 12 < NumberOfPipes)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c31eb24baeeafa8f337d0930bef903bcd5545ba1",
      "candidate_info": {
        "commit_hash": "c31eb24baeeafa8f337d0930bef903bcd5545ba1",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/c31eb24baeeafa8f337d0930bef903bcd5545ba1",
        "files": [
          "channels/drdynvc/client/drdynvc_main.c"
        ],
        "message": "Fixed wrong error return from drdynvc_write_data\n\nWhen the channel was closed a wrong error code was returned.",
        "before_after_code_files": [
          "channels/drdynvc/client/drdynvc_main.c||channels/drdynvc/client/drdynvc_main.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6151"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "channels/drdynvc/client/drdynvc_main.c||channels/drdynvc/client/drdynvc_main.c": [
          "File: channels/drdynvc/client/drdynvc_main.c -> channels/drdynvc/client/drdynvc_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "816:  if (dataSize == 0)",
          "817:  {",
          "819:  }",
          "820:  else if (dataSize <= CHANNEL_CHUNK_LENGTH - pos)",
          "821:  {",
          "",
          "[Removed Lines]",
          "818:   dvcman_close_channel(drdynvc->channel_mgr, ChannelId, TRUE);",
          "",
          "[Added Lines]",
          "818:   status = dvcman_close_channel(drdynvc->channel_mgr, ChannelId, TRUE);",
          "",
          "---------------"
        ]
      }
    }
  ]
}