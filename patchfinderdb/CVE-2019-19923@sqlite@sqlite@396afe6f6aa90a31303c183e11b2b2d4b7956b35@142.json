{
  "cve_id": "CVE-2019-19923",
  "cve_desc": "flattenSubquery in select.c in SQLite 3.30.1 mishandles certain uses of SELECT DISTINCT involving a LEFT JOIN in which the right-hand side is a view. This can cause a NULL pointer dereference (or incorrect results).",
  "repo": "sqlite/sqlite",
  "patch_hash": "396afe6f6aa90a31303c183e11b2b2d4b7956b35",
  "patch_info": {
    "commit_hash": "396afe6f6aa90a31303c183e11b2b2d4b7956b35",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/396afe6f6aa90a31303c183e11b2b2d4b7956b35",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/join.test"
    ],
    "message": "Continue to back away from the LEFT JOIN optimization of check-in [41c27bc0ff1d3135] by disallowing query flattening if the outer query is DISTINCT.  Without this fix, if an index scan is run on the table within the view on the right-hand side of the LEFT JOIN, stale result registers might be accessed yielding incorrect results, and/or an OP_IfNullRow opcode might be invoked on the un-opened table, resulting in a NULL-pointer dereference.  This problem was found by the Yongheng and Rui fuzzer.\n\nFossilOrigin-Name: 862974312edf00e9d1068115d1a39b7235b7db68b6d86b81d38a12f025a4748e",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/join.test||test/join.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 289158aa24b066c453d2bce4bc2dead1c56fb0b23c3f7c4810b34b13627cef34",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3797:   if( (pSubitem->fg.jointype & JT_OUTER)!=0 ){",
      "3798:     isLeftJoin = 1;",
      "3801:       return 0;",
      "3802:     }",
      "3803:   }",
      "",
      "[Removed Lines]",
      "3799:     if( pSubSrc->nSrc>1 || isAgg || IsVirtual(pSubSrc->a[0].pTab) ){",
      "",
      "[Added Lines]",
      "3804:     ){",
      "",
      "---------------"
    ],
    "test/join.test||test/join.test": [
      "File: test/join.test -> test/join.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "975:   SELECT 24, * FROM t1 LEFT JOIN t0 ON +aa ISNULL;",
      "976: } {13 1 {} 14 1 {} 23 1 {} 24 1 {}}",
      "978: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "978: # 2019-12-18 problem with a LEFT JOIN where the RHS is a view.",
      "979: # Detected by Yongheng and Rui.",
      "980: # Follows from the optimization attempt of check-in 41c27bc0ff1d3135",
      "981: # on 2017-04-18",
      "982: #",
      "983: reset_db",
      "984: do_execsql_test join-22.10 {",
      "985:   CREATE TABLE t0(a, b);",
      "986:   CREATE INDEX t0a ON t0(a);",
      "987:   INSERT INTO t0 VALUES(10,10),(10,11),(10,12);",
      "988:   SELECT DISTINCT c FROM t0 LEFT JOIN (SELECT a+1 AS c FROM t0) ORDER BY c ;",
      "989: } {11}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "0a8764ad7ad7de39af698e88687266acf06442db",
      "candidate_info": {
        "commit_hash": "0a8764ad7ad7de39af698e88687266acf06442db",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/0a8764ad7ad7de39af698e88687266acf06442db",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/resolve.c"
        ],
        "message": "Rename a local variable to avoid masking a function parameter and thus causing a harmless compiler warning.\n\nFossilOrigin-Name: f065cf003bd2a3a580cb5b9fa2eacd8be075fe8c2bbc5688e9a9406abbfb3804",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/resolve.c||src/resolve.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: c7309ed3c7588c7e51e09418bf5cfd4611539b44c39cef9ed4ae0e385bae7625",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/resolve.c||src/resolve.c": [
          "File: src/resolve.c -> src/resolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "566:   if( pExpr->iColumn>=0 && pMatch!=0 ){",
          "567:     int n = pExpr->iColumn;",
          "571:     assert( pMatch->iCursor==pExpr->iTable );",
          "574:     ){",
          "578:     }else{",
          "579:       testcase( n==BMS-1 );",
          "580:       testcase( n==BMS );",
          "",
          "[Removed Lines]",
          "568:     Table *pTab;",
          "569:     pTab = pExpr->y.pTab;",
          "570:     assert( pTab!=0 );",
          "572:     if( (pTab->tabFlags & TF_HasGenerated)!=0",
          "573:      && (pTab->aCol[n].colFlags & COLFLAG_GENERATED)!=0",
          "575:       testcase( pTab->nCol==BMS-1 );",
          "576:       testcase( pTab->nCol==BMS );",
          "577:       pMatch->colUsed = pTab->nCol>=BMS ? ALLBITS : MASKBIT(pTab->nCol)-1;",
          "",
          "[Added Lines]",
          "568:     Table *pExTab = pExpr->y.pTab;",
          "569:     assert( pExTab!=0 );",
          "571:     if( (pExTab->tabFlags & TF_HasGenerated)!=0",
          "572:      && (pExTab->aCol[n].colFlags & COLFLAG_GENERATED)!=0",
          "574:       testcase( pExTab->nCol==BMS-1 );",
          "575:       testcase( pExTab->nCol==BMS );",
          "576:       pMatch->colUsed = pExTab->nCol>=BMS ? ALLBITS : MASKBIT(pExTab->nCol)-1;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0a8d06a93f308e2ad450a62b961a09d43c15bba6",
      "candidate_info": {
        "commit_hash": "0a8d06a93f308e2ad450a62b961a09d43c15bba6",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/0a8d06a93f308e2ad450a62b961a09d43c15bba6",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/view.test",
          "test/window9.test"
        ],
        "message": "Add test cases to this branch.\n\nFossilOrigin-Name: f37317d81cc2864ed57c76a7347351310d61c8056a2a0179218530ba60a44986",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/view.test||test/view.test",
          "test/window9.test||test/window9.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 7480db307c39b86bce269583e5917f5e1a3990500552fd98400ef3e7088c0b2a",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/view.test||test/view.test": [
          "File: test/view.test -> test/view.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "724:   1 1 3 3",
          "725: }",
          "727: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "727: #-------------------------------------------------------------------------",
          "728: reset_db",
          "729: do_execsql_test view-27.0 {",
          "730:   CREATE TABLE t0(c0 TEXT, c1);",
          "731:   INSERT INTO t0(c0, c1) VALUES (-1, 0);",
          "732:   CREATE VIEW v0(c0, c1) AS SELECT t0.c0, AVG(t0.c1) FROM t0;",
          "733: }",
          "735: do_execsql_test view-27.1 {",
          "736:   SELECT c0, typeof(c0), affinity(c0), c1, typeof(c1), affinity(c1) FROM v0;",
          "737: } {",
          "738:   -1   text text",
          "739:    0.0 real none",
          "740: }",
          "742: do_execsql_test view-27.2 { SELECT c0<c1 FROM v0 } 1",
          "743: do_execsql_test view-27.3 { SELECT c1<c0 FROM v0 } 0",
          "744: do_execsql_test view-27.4 {",
          "745:   SELECT 1 FROM v0 WHERE c1<c0",
          "746: } {}",
          "747: do_execsql_test view-27.5 {",
          "748:   SELECT 1 FROM v0 WHERE c0<c1",
          "749: } {1}",
          "751: do_execsql_test view-27.6 {",
          "752:   SELECT c0<c1 FROM (SELECT t0.c0 AS c0, AVG(t0.c1) AS c1 FROM t0)",
          "753: } 1",
          "754: do_execsql_test view-27.7 {",
          "755:   SELECT c1<c0 FROM (SELECT t0.c0 AS c0, AVG(t0.c1) AS c1 FROM t0)",
          "756: } 0",
          "757: do_execsql_test view-27.8 {",
          "758:   SELECT 1 FROM (SELECT t0.c0 AS c0, AVG(t0.c1) AS c1 FROM t0) WHERE c1<c0",
          "759: } {}",
          "760: do_execsql_test view-27.9 {",
          "761:   SELECT 1 FROM (SELECT t0.c0 AS c0, AVG(t0.c1) AS c1 FROM t0) WHERE c0<c1",
          "762: } {1}",
          "",
          "---------------"
        ],
        "test/window9.test||test/window9.test": [
          "File: test/window9.test -> test/window9.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "131:       );",
          "132: } {1 {sub-select returns 3 columns - expected 1}}",
          "135: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "134: #-------------------------------------------------------------------------",
          "135: reset_db",
          "136: do_execsql_test 4.0 {",
          "137:   CREATE TABLE t1(a, b TEXT);",
          "138:   INSERT INTO t1 VALUES('A', 1), ('A', 2), ('2', 1), ('2', 2);",
          "139: }",
          "141: do_execsql_test 4.1.1 {",
          "142:   SELECT b, b=count(*), '1,2'                   FROM t1 GROUP BY b;",
          "143: } {1 0 1,2 2 1 1,2}",
          "144: do_execsql_test 4.1.2 {",
          "145:   SELECT b, b=count(*), group_concat(b) OVER () FROM t1 GROUP BY b;",
          "146: } {1 0 1,2 2 1 1,2}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "05921223c25ae385a5e17bbf5484f5885bb78f2c",
      "candidate_info": {
        "commit_hash": "05921223c25ae385a5e17bbf5484f5885bb78f2c",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/05921223c25ae385a5e17bbf5484f5885bb78f2c",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/sqliteInt.h",
          "src/util.c",
          "src/vdbeaux.c"
        ],
        "message": "Smaller and faster sqlite3IsNaN() implementation makes deserialization of floating point values much faster.\n\nFossilOrigin-Name: ea748edecb261f2b862d542daff6e99a6fd8879a8ace94b440d99e110577d1c1",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/util.c||src/util.c",
          "src/vdbeaux.c||src/vdbeaux.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: c1d8a3f65490eef2216f360d708b1746cbaa6dadce42c0950dc8e09b9ab28ee2",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "3802: #endif",
          "3804: #ifndef SQLITE_OMIT_FLOATING_POINT",
          "3805:   int sqlite3IsNaN(double);",
          "3806: #else",
          "3807: # define sqlite3IsNaN(X)  0",
          "3808: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3805: # define EXP754 (((u64)0x7ff)<<52)",
          "3806: # define MAN754 ((((u64)1)<<52)-1)",
          "3807: # define IsNaN(X) (((X)&EXP754)==EXP754 && ((X)&MAN754)!=0)",
          "3810: # define IsNaN(X)         0",
          "",
          "---------------"
        ],
        "src/util.c||src/util.c": [
          "File: src/util.c -> src/util.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "58: #ifndef SQLITE_OMIT_FLOATING_POINT",
          "65: int sqlite3IsNaN(double x){",
          "102: }",
          "",
          "[Removed Lines]",
          "67: #if !SQLITE_HAVE_ISNAN && !HAVE_ISNAN",
          "91: #ifdef __FAST_MATH__",
          "92: # error SQLite will not work correctly with the -ffast-math option of GCC.",
          "93: #endif",
          "94:   volatile double y = x;",
          "95:   volatile double z = y;",
          "96:   rc = (y!=z);",
          "98:   rc = isnan(x);",
          "100:   testcase( rc );",
          "101:   return rc;",
          "",
          "[Added Lines]",
          "63:   u64 y;",
          "64:   memcpy(&y,&x,sizeof(y));",
          "65:   return IsNaN(y);",
          "",
          "---------------"
        ],
        "src/vdbeaux.c||src/vdbeaux.c": [
          "File: src/vdbeaux.c -> src/vdbeaux.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "3655: static u32 SQLITE_NOINLINE serialGet(",
          "",
          "[Added Lines]",
          "3655: static u32 serialGet(",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3684:     assert( sizeof(x)==8 && sizeof(pMem->u.r)==8 );",
          "3685:     swapMixedEndianFloat(x);",
          "3686:     memcpy(&pMem->u.r, &x, sizeof(x));",
          "3688:   }",
          "3689:   return 8;",
          "3690: }",
          "",
          "[Removed Lines]",
          "3687:     pMem->flags = sqlite3IsNaN(pMem->u.r) ? MEM_Null : MEM_Real;",
          "",
          "[Added Lines]",
          "3687:     pMem->flags = IsNaN(x) ? MEM_Null : MEM_Real;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9942ef0d95c5a34bec24b669f454fc157bbf8eee",
      "candidate_info": {
        "commit_hash": "9942ef0d95c5a34bec24b669f454fc157bbf8eee",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/9942ef0d95c5a34bec24b669f454fc157bbf8eee",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "src/insert.c",
          "src/sqliteInt.h"
        ],
        "message": "STORED columns can now reference other STORED columns, in any order, as long as there are not loops.\n\nFossilOrigin-Name: 0d236698e64b2a4b46f91a25279c406e0bf392fe66116678456f0a034c11d7b4",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "src/insert.c||src/insert.c",
          "src/sqliteInt.h||src/sqliteInt.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 4ad66af04a654d92711d2d056ce8f35cd21eac4b99fb8d78be1a314620b6d29e",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3577:       }",
          "3578:       if( iTab<0 ){",
          "3579:         if( pParse->iSelfTab<0 ){",
          "3582:           assert( pExpr->iColumn>=XN_ROWID );",
          "3583:           assert( pExpr->iColumn<pExpr->y.pTab->nCol );",
          "3589:             sqlite3VdbeAddOp1(v, OP_RealAffinity, target);",
          "3590:             return target;",
          "3591:           }else{",
          "3593:           }",
          "3594:         }else{",
          "",
          "[Removed Lines]",
          "3581:           assert( pExpr->y.pTab!=0 );",
          "3584:           if( pExpr->iColumn>=0",
          "3585:             && pExpr->y.pTab->aCol[pExpr->iColumn].affinity==SQLITE_AFF_REAL",
          "3586:           ){",
          "3587:             sqlite3VdbeAddOp2(v, OP_SCopy, pExpr->iColumn - pParse->iSelfTab,",
          "3588:                               target);",
          "3592:             return pExpr->iColumn - pParse->iSelfTab;",
          "",
          "[Added Lines]",
          "3586:           Column *pCol;",
          "3587:           Table *pTab = pExpr->y.pTab;",
          "3588:           int iSrc;",
          "3589:           assert( pTab!=0 );",
          "3592:           if( pExpr->iColumn<0 ){",
          "3593:             return -1-pParse->iSelfTab;",
          "3594:           }",
          "3595:           pCol = pTab->aCol + pExpr->iColumn;",
          "3596:           iSrc = sqlite3ColumnOfTable(pTab, pExpr->iColumn) - pParse->iSelfTab;",
          "3597: #ifndef SQLITE_OMIT_GENERATED_COLUMNS",
          "3598:           if( pCol->colFlags & COLFLAG_GENERATED ){",
          "3599:             if( pCol->colFlags & COLFLAG_BUSY ){",
          "3600:               sqlite3ErrorMsg(pParse, \"generated column loop on \\\"%s\\\"\",",
          "3601:                               pCol->zName);",
          "3602:               return 0;",
          "3603:             }",
          "3604:             pCol->colFlags |= COLFLAG_BUSY;",
          "3605:             if( pCol->colFlags & COLFLAG_VIRTUAL ){",
          "3606:               target = sqlite3ExprCodeTarget(pParse, pCol->pDflt, target);",
          "3607:             }else{",
          "3608:               target = iSrc;",
          "3609:               if( pCol->colFlags & COLFLAG_NOTAVAIL ){",
          "3610:                 sqlite3ExprCode(pParse, pCol->pDflt, iSrc);",
          "3611:               }",
          "3612:             }",
          "3613:             pCol->colFlags &= ~(COLFLAG_BUSY|COLFLAG_NOTAVAIL);",
          "3614:             return target;",
          "3615:           }else",
          "3617:           if( pCol->affinity==SQLITE_AFF_REAL ){",
          "3618:             sqlite3VdbeAddOp2(v, OP_SCopy, iSrc, target);",
          "3622:             return iSrc;",
          "",
          "---------------"
        ],
        "src/insert.c||src/insert.c": [
          "File: src/insert.c -> src/insert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "216: ){",
          "217:   int i;",
          "218:   pParse->iSelfTab = -iRegStore;",
          "219:   for(i=0; i<pTab->nCol; i++, iRegStore++){",
          "220:     u32 colFlags = pTab->aCol[i].colFlags;",
          "221:     if( (colFlags & COLFLAG_VIRTUAL)!=0 ){",
          "223:       iRegStore--;",
          "226:       sqlite3ExprCode(pParse, pTab->aCol[i].pDflt, iRegStore);",
          "227:     }",
          "228:   }",
          "229:   pParse->iSelfTab = 0;",
          "",
          "[Removed Lines]",
          "224:     }else if( (colFlags & COLFLAG_STORED)!=0 ){",
          "",
          "[Added Lines]",
          "222:   for(i=0; i<pTab->nCol; i++){",
          "223:     if( pTab->aCol[i].colFlags & COLFLAG_STORED ){",
          "224:       pTab->aCol[i].colFlags |= COLFLAG_NOTAVAIL;",
          "225:     }",
          "226:   }",
          "238:     }else if( (colFlags & COLFLAG_NOTAVAIL)!=0 ){",
          "241:       colFlags &= ~COLFLAG_NOTAVAIL;",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h"
        ]
      }
    },
    {
      "candidate_hash": "79d8aa24f17b1d7f2743c1bcf823bc17489d14ec",
      "candidate_info": {
        "commit_hash": "79d8aa24f17b1d7f2743c1bcf823bc17489d14ec",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/79d8aa24f17b1d7f2743c1bcf823bc17489d14ec",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/wapptest.tcl"
        ],
        "message": "Fix a typo in the wapptest.tcl script.\n\nFossilOrigin-Name: 971b4422ae7a8eed67f5db62c0e1cc061faac9404ff5f7051d7e07decf2207a4",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/wapptest.tcl||test/wapptest.tcl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: d6131caf6471ad41fa5a28b0067d759ac1cc9dba1170678534488b416f9a1157",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/wapptest.tcl||test/wapptest.tcl": [
          "File: test/wapptest.tcl -> test/wapptest.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "289:   wapptest_output $msg",
          "290:   if {[info exists G(test.$name.errmsg)] && $G(test.$name.errmsg)!=\"\"} {",
          "292:   }",
          "293: }",
          "",
          "[Removed Lines]",
          "291:     wapptest_output \"    $G(test.$config.errmsg)\"",
          "",
          "[Added Lines]",
          "291:     wapptest_output \"    $G(test.$name.errmsg)\"",
          "",
          "---------------"
        ]
      }
    }
  ]
}