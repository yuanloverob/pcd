{
  "cve_id": "CVE-2014-3710",
  "cve_desc": "The donote function in readelf.c in file through 5.20, as used in the Fileinfo component in PHP 5.4.34, does not ensure that sufficient note headers are present, which allows remote attackers to cause a denial of service (out-of-bounds read and application crash) via a crafted ELF file.",
  "repo": "file/file",
  "patch_hash": "39c7ac1106be844a5296d3eb5971946cc09ffda0",
  "patch_info": {
    "commit_hash": "39c7ac1106be844a5296d3eb5971946cc09ffda0",
    "repo": "file/file",
    "commit_url": "https://github.com/file/file/commit/39c7ac1106be844a5296d3eb5971946cc09ffda0",
    "files": [
      "ChangeLog",
      "src/readelf.c"
    ],
    "message": "Fix note bounds reading, Francisco Alonso / Red Hat",
    "before_after_code_files": [
      "src/readelf.c||src/readelf.c"
    ]
  },
  "patch_diff": {
    "src/readelf.c||src/readelf.c": [
      "File: src/readelf.c -> src/readelf.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "27: #include \"file.h\"",
      "29: #ifndef lint",
      "31: #endif",
      "33: #ifdef BUILTIN_ELF",
      "",
      "[Removed Lines]",
      "30: FILE_RCSID(\"@(#)$File: readelf.c,v 1.102 2014/03/11 21:00:13 christos Exp $\")",
      "",
      "[Added Lines]",
      "30: FILE_RCSID(\"@(#)$File: readelf.c,v 1.103 2014/05/02 02:25:10 christos Exp $\")",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "477:  uint32_t namesz, descsz;",
      "478:  unsigned char *nbuf = CAST(unsigned char *, vbuf);",
      "480:  (void)memcpy(xnh_addr, &nbuf[offset], xnh_sizeof);",
      "481:  offset += xnh_sizeof;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "480:  if (xnh_sizeof + offset > size) {",
      "484:   return xnh_sizeof + offset;",
      "485:  }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b7269d7b7ef4b0f99b702077658776ab728183e1",
      "candidate_info": {
        "commit_hash": "b7269d7b7ef4b0f99b702077658776ab728183e1",
        "repo": "file/file",
        "commit_url": "https://github.com/file/file/commit/b7269d7b7ef4b0f99b702077658776ab728183e1",
        "files": [
          "src/readelf.c"
        ],
        "message": "remove debugging printf.",
        "before_after_code_files": [
          "src/readelf.c||src/readelf.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/readelf.c||src/readelf.c"
          ],
          "candidate": [
            "src/readelf.c||src/readelf.c"
          ]
        }
      },
      "candidate_diff": {
        "src/readelf.c||src/readelf.c": [
          "File: src/readelf.c -> src/readelf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: #include \"file.h\"",
          "29: #ifndef lint",
          "31: #endif",
          "33: #ifdef BUILTIN_ELF",
          "",
          "[Removed Lines]",
          "30: FILE_RCSID(\"@(#)$File: readelf.c,v 1.100 2014/03/11 15:52:54 christos Exp $\")",
          "",
          "[Added Lines]",
          "30: FILE_RCSID(\"@(#)$File: readelf.c,v 1.101 2014/03/11 17:13:18 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "951:    break;",
          "952:   }",
          "956:   switch (xsh_type) {",
          "957:   case SHT_NOTE:",
          "",
          "[Removed Lines]",
          "954: printf(\"name %s type %d\\n\", name, xsh_type);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fb33636ba72d84977e368e56d5d5f7f553f08a23",
      "candidate_info": {
        "commit_hash": "fb33636ba72d84977e368e56d5d5f7f553f08a23",
        "repo": "file/file",
        "commit_url": "https://github.com/file/file/commit/fb33636ba72d84977e368e56d5d5f7f553f08a23",
        "files": [
          "src/readelf.c"
        ],
        "message": "fix sign-compare error.",
        "before_after_code_files": [
          "src/readelf.c||src/readelf.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/readelf.c||src/readelf.c"
          ],
          "candidate": [
            "src/readelf.c||src/readelf.c"
          ]
        }
      },
      "candidate_diff": {
        "src/readelf.c||src/readelf.c": [
          "File: src/readelf.c -> src/readelf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: #include \"file.h\"",
          "29: #ifndef lint",
          "31: #endif",
          "33: #ifdef BUILTIN_ELF",
          "",
          "[Removed Lines]",
          "30: FILE_RCSID(\"@(#)$File: readelf.c,v 1.120 2015/06/16 14:18:07 christos Exp $\")",
          "",
          "[Added Lines]",
          "30: FILE_RCSID(\"@(#)$File: readelf.c,v 1.121 2015/07/11 14:41:37 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1053:   switch (xsh_type) {",
          "1054:   case SHT_NOTE:",
          "1056:     if (file_printf(ms,",
          "1057:         \", note offset/size 0x%\" INTMAX_T_FORMAT",
          "1058:         \"x+0x%\" INTMAX_T_FORMAT \"x exceeds\"",
          "",
          "[Removed Lines]",
          "1055:    if (xsh_size + xsh_offset > (uintmax_t)fsize)  {",
          "",
          "[Added Lines]",
          "1055:    if ((uintmax_t)(xsh_size + xsh_offset) >",
          "1056:        (uintmax_t)fsize) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b4c01141e5367f247b84dcaf6aefbb4e741842b8",
      "candidate_info": {
        "commit_hash": "b4c01141e5367f247b84dcaf6aefbb4e741842b8",
        "repo": "file/file",
        "commit_url": "https://github.com/file/file/commit/b4c01141e5367f247b84dcaf6aefbb4e741842b8",
        "files": [
          "src/elfclass.h",
          "src/readelf.c"
        ],
        "message": "- limit the number of program and section header number of sections to be   processed to avoid excessive processing time. - if a bad note is found, return 0 to stop processing immediately.",
        "before_after_code_files": [
          "src/elfclass.h||src/elfclass.h",
          "src/readelf.c||src/readelf.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/readelf.c||src/readelf.c"
          ],
          "candidate": [
            "src/readelf.c||src/readelf.c"
          ]
        }
      },
      "candidate_diff": {
        "src/elfclass.h||src/elfclass.h": [
          "File: src/elfclass.h -> src/elfclass.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "35:  switch (type) {",
          "36: #ifdef ELFCORE",
          "37:  case ET_CORE:",
          "38:   flags |= FLAGS_IS_CORE;",
          "39:   if (dophn_core(ms, clazz, swap, fd,",
          "42:       (size_t)elf_getu16(swap, elfhdr.e_phentsize),",
          "43:       fsize, &flags) == -1)",
          "44:    return -1;",
          "",
          "[Removed Lines]",
          "40:       (off_t)elf_getu(swap, elfhdr.e_phoff),",
          "41:       elf_getu16(swap, elfhdr.e_phnum),",
          "",
          "[Added Lines]",
          "38:   phnum = elf_getu16(swap, elfhdr.e_phnum);",
          "39:   if (phnum > MAX_PHNUM)",
          "40:    return toomany(ms, \"program\", phnum);",
          "43:       (off_t)elf_getu(swap, elfhdr.e_phoff), phnum,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "46: #endif",
          "47:  case ET_EXEC:",
          "48:  case ET_DYN:",
          "49:   if (dophn_exec(ms, clazz, swap, fd,",
          "52:       (size_t)elf_getu16(swap, elfhdr.e_phentsize),",
          "55:    return -1;",
          "57:  case ET_REL:",
          "58:   if (doshn(ms, clazz, swap, fd,",
          "61:       (size_t)elf_getu16(swap, elfhdr.e_shentsize),",
          "62:       fsize, &flags, elf_getu16(swap, elfhdr.e_machine),",
          "63:       (int)elf_getu16(swap, elfhdr.e_shstrndx)) == -1)",
          "",
          "[Removed Lines]",
          "50:       (off_t)elf_getu(swap, elfhdr.e_phoff),",
          "51:       elf_getu16(swap, elfhdr.e_phnum),",
          "53:       fsize, &flags, elf_getu16(swap, elfhdr.e_shnum))",
          "54:       == -1)",
          "59:       (off_t)elf_getu(swap, elfhdr.e_shoff),",
          "60:       elf_getu16(swap, elfhdr.e_shnum),",
          "",
          "[Added Lines]",
          "51:   phnum = elf_getu16(swap, elfhdr.e_phnum);",
          "52:   if (phnum > MAX_PHNUM)",
          "53:    return toomany(ms, \"program\", phnum);",
          "54:   shnum = elf_getu16(swap, elfhdr.e_shnum);",
          "55:   if (shnum > MAX_SHNUM)",
          "56:    return toomany(ms, \"section\", shnum);",
          "58:       (off_t)elf_getu(swap, elfhdr.e_phoff), phnum,",
          "60:       fsize, &flags, shnum) == -1)",
          "64:   shnum = elf_getu16(swap, elfhdr.e_shnum);",
          "65:   if (shnum > MAX_SHNUM)",
          "66:    return toomany(ms, \"section\", shnum);",
          "68:       (off_t)elf_getu(swap, elfhdr.e_shoff), shnum,",
          "",
          "---------------"
        ],
        "src/readelf.c||src/readelf.c": [
          "File: src/readelf.c -> src/readelf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: #include \"file.h\"",
          "29: #ifndef lint",
          "31: #endif",
          "33: #ifdef BUILTIN_ELF",
          "",
          "[Removed Lines]",
          "30: FILE_RCSID(\"@(#)$File: readelf.c,v 1.103 2014/05/02 02:25:10 christos Exp $\")",
          "",
          "[Added Lines]",
          "30: FILE_RCSID(\"@(#)$File: readelf.c,v 1.104 2014/10/17 15:49:00 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "60: private uint32_t getu32(int, uint32_t);",
          "61: private uint64_t getu64(int, uint64_t);",
          "63: private uint16_t",
          "64: getu16(int swap, uint16_t value)",
          "65: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "63: #define MAX_PHNUM 256",
          "64: #define MAX_SHNUM 1024",
          "66: private int",
          "67: toomany(struct magic_set *ms, const char *name, uint16_t num)",
          "68: {",
          "69:  if (file_printf(ms, \", too many %s header sections (%u)\", name, num",
          "70:      ) == -1)",
          "71:   return -1;",
          "72:  return 0;",
          "73: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "499:  if (namesz & 0x80000000) {",
          "500:      (void)file_printf(ms, \", bad note name size 0x%lx\",",
          "501:   (unsigned long)namesz);",
          "503:  }",
          "505:  if (descsz & 0x80000000) {",
          "506:      (void)file_printf(ms, \", bad note description size 0x%lx\",",
          "507:   (unsigned long)descsz);",
          "509:  }",
          "",
          "[Removed Lines]",
          "502:      return offset;",
          "508:      return offset;",
          "",
          "[Added Lines]",
          "514:      return 0;",
          "520:      return 0;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1240:  int flags = 0;",
          "1241:  Elf32_Ehdr elf32hdr;",
          "1242:  Elf64_Ehdr elf64hdr;",
          "1245:  if (ms->flags & (MAGIC_MIME|MAGIC_APPLE))",
          "1246:   return 0;",
          "",
          "[Removed Lines]",
          "1243:  uint16_t type;",
          "",
          "[Added Lines]",
          "1255:  uint16_t type, phnum, shnum;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "445c8fb0ebff85195be94cd9f7e1df89cade5c7f",
      "candidate_info": {
        "commit_hash": "445c8fb0ebff85195be94cd9f7e1df89cade5c7f",
        "repo": "file/file",
        "commit_url": "https://github.com/file/file/commit/445c8fb0ebff85195be94cd9f7e1df89cade5c7f",
        "files": [
          "src/readelf.c"
        ],
        "message": "Bail out on partial reads, from Alexander Cherepanov",
        "before_after_code_files": [
          "src/readelf.c||src/readelf.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/readelf.c||src/readelf.c"
          ],
          "candidate": [
            "src/readelf.c||src/readelf.c"
          ]
        }
      },
      "candidate_diff": {
        "src/readelf.c||src/readelf.c": [
          "File: src/readelf.c -> src/readelf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: #include \"file.h\"",
          "29: #ifndef lint",
          "31: #endif",
          "33: #ifdef BUILTIN_ELF",
          "",
          "[Removed Lines]",
          "30: FILE_RCSID(\"@(#)$File: readelf.c,v 1.113 2014/12/11 14:10:53 christos Exp $\")",
          "",
          "[Added Lines]",
          "30: FILE_RCSID(\"@(#)$File: readelf.c,v 1.114 2014/12/11 14:19:36 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "321:  for ( ; num; num--) {",
          "323:    file_badread(ms);",
          "324:    return -1;",
          "325:   }",
          "",
          "[Removed Lines]",
          "322:   if (pread(fd, xph_addr, xph_sizeof, off) == -1) {",
          "",
          "[Added Lines]",
          "322:   if (pread(fd, xph_addr, xph_sizeof, off) < (ssize_t)xph_sizeof) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "930:  char name[50];",
          "932:  if (size != xsh_sizeof) {",
          "933:   if (file_printf(ms, \", corrupted section header size\") == -1)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "931:  ssize_t namesize;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "936:  }",
          "940:   file_badread(ms);",
          "941:   return -1;",
          "942:  }",
          "",
          "[Removed Lines]",
          "939:  if (pread(fd, xsh_addr, xsh_sizeof, off + size * strtab) == -1) {",
          "",
          "[Added Lines]",
          "940:  if (pread(fd, xsh_addr, xsh_sizeof, off + size * strtab) < (ssize_t)xsh_sizeof) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "945:  for ( ; num; num--) {",
          "948:    file_badread(ms);",
          "949:    return -1;",
          "950:   }",
          "952:   if (strcmp(name, \".debug_info\") == 0)",
          "953:    stripped = 0;",
          "956:    file_badread(ms);",
          "957:    return -1;",
          "958:   }",
          "",
          "[Removed Lines]",
          "947:   if (pread(fd, name, sizeof(name), name_off + xsh_name) == -1) {",
          "951:   name[sizeof(name) - 1] = '\\0';",
          "955:   if (pread(fd, xsh_addr, xsh_sizeof, off) == -1) {",
          "",
          "[Added Lines]",
          "948:   if ((namesize = pread(fd, name, sizeof(name) - 1, name_off + xsh_name)) == -1) {",
          "952:   name[namesize] = '\\0';",
          "956:   if (pread(fd, xsh_addr, xsh_sizeof, off) < (ssize_t)xsh_sizeof) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "982:         \" for note\");",
          "983:     return -1;",
          "984:    }",
          "986:     file_badread(ms);",
          "987:     free(nbuf);",
          "988:     return -1;",
          "",
          "[Removed Lines]",
          "985:    if (pread(fd, nbuf, xsh_size, xsh_offset) == -1) {",
          "",
          "[Added Lines]",
          "986:    if (pread(fd, nbuf, xsh_size, xsh_offset) < (ssize_t)xsh_size) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1178:  }",
          "1180:    for ( ; num; num--) {",
          "1182:    file_badread(ms);",
          "1183:    return -1;",
          "1184:   }",
          "",
          "[Removed Lines]",
          "1181:   if (pread(fd, xph_addr, xph_sizeof, off) == -1) {",
          "",
          "[Added Lines]",
          "1182:   if (pread(fd, xph_addr, xph_sizeof, off) < (ssize_t)xph_sizeof) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "85a4520624a545bc65ba9313a3742fa1d9dc80cd",
      "candidate_info": {
        "commit_hash": "85a4520624a545bc65ba9313a3742fa1d9dc80cd",
        "repo": "file/file",
        "commit_url": "https://github.com/file/file/commit/85a4520624a545bc65ba9313a3742fa1d9dc80cd",
        "files": [
          "src/readelf.c"
        ],
        "message": "PR/460: Detect and avoid large (invalid) malloc in elf parser.",
        "before_after_code_files": [
          "src/readelf.c||src/readelf.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/readelf.c||src/readelf.c"
          ],
          "candidate": [
            "src/readelf.c||src/readelf.c"
          ]
        }
      },
      "candidate_diff": {
        "src/readelf.c||src/readelf.c": [
          "File: src/readelf.c -> src/readelf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: #include \"file.h\"",
          "29: #ifndef lint",
          "31: #endif",
          "33: #ifdef BUILTIN_ELF",
          "",
          "[Removed Lines]",
          "30: FILE_RCSID(\"@(#)$File: readelf.c,v 1.118 2015/01/02 21:29:39 christos Exp $\")",
          "",
          "[Added Lines]",
          "30: FILE_RCSID(\"@(#)$File: readelf.c,v 1.119 2015/04/09 20:01:41 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1048:    break;",
          "1049:   }",
          "1052:   switch (xsh_type) {",
          "1053:   case SHT_NOTE:",
          "1054:    if ((nbuf = malloc(xsh_size)) == NULL) {",
          "1055:     file_error(ms, errno, \"Cannot allocate memory\"",
          "1056:         \" for note\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1055:    if (xsh_size + xsh_offset > (uintmax_t)fsize)  {",
          "1056:     if (file_printf(ms,",
          "1057:         \", note offset/size 0x%jx+0x%jx exceeds\"",
          "1058:         \" file size 0x%jx\", (uintmax_t)xsh_offset,",
          "1059:         (uintmax_t)xsh_size, (uintmax_t)fsize) == -1)",
          "1060:      return -1;",
          "1061:     return 0;",
          "1062:    }",
          "",
          "---------------"
        ]
      }
    }
  ]
}