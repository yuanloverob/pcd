{
  "cve_id": "CVE-2019-16930",
  "cve_desc": "Zcashd in Zcash before 2.0.7-3 allows discovery of the IP address of a full node that owns a shielded address, related to mishandling of exceptions during deserialization of note plaintexts. This affects anyone who has disclosed their zaddr to a third party.",
  "repo": "zcash/zcash",
  "patch_hash": "c1fbf8ab5d73cff5e1f45236995857c75ba4128d",
  "patch_info": {
    "commit_hash": "c1fbf8ab5d73cff5e1f45236995857c75ba4128d",
    "repo": "zcash/zcash",
    "commit_url": "https://github.com/zcash/zcash/commit/c1fbf8ab5d73cff5e1f45236995857c75ba4128d",
    "files": [
      "src/zcash/Note.cpp"
    ],
    "message": "Ignore exceptions when deserializing note plaintexts",
    "before_after_code_files": [
      "src/zcash/Note.cpp||src/zcash/Note.cpp"
    ]
  },
  "patch_diff": {
    "src/zcash/Note.cpp||src/zcash/Note.cpp": [
      "File: src/zcash/Note.cpp -> src/zcash/Note.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "173:     }",
      "185: }",
      "187: boost::optional<SaplingNotePlaintext> SaplingNotePlaintext::decrypt(",
      "",
      "[Removed Lines]",
      "176:     CDataStream ss(SER_NETWORK, PROTOCOL_VERSION);",
      "177:     ss << pt.get();",
      "179:     SaplingOutgoingPlaintext ret;",
      "180:     ss >> ret;",
      "182:     assert(ss.size() == 0);",
      "184:     return ret;",
      "",
      "[Added Lines]",
      "176:     try {",
      "177:         CDataStream ss(SER_NETWORK, PROTOCOL_VERSION);",
      "178:         ss << pt.get();",
      "180:         SaplingOutgoingPlaintext ret;",
      "181:         ss >> ret;",
      "183:         assert(ss.size() == 0);",
      "185:         return ret;",
      "186:     } catch (const boost::thread_interrupted&) {",
      "187:         throw;",
      "188:     } catch (...) {",
      "189:         return boost::none;",
      "190:     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "197:     }",
      "203:     SaplingNotePlaintext ret;",
      "208:     uint256 pk_d;",
      "209:     if (!librustzcash_ivk_to_pkd(ivk.begin(), ret.d.data(), pk_d.begin())) {",
      "",
      "[Removed Lines]",
      "200:     CDataStream ss(SER_NETWORK, PROTOCOL_VERSION);",
      "201:     ss << pt.get();",
      "204:     ss >> ret;",
      "206:     assert(ss.size() == 0);",
      "",
      "[Added Lines]",
      "207:     try {",
      "208:         CDataStream ss(SER_NETWORK, PROTOCOL_VERSION);",
      "209:         ss << pt.get();",
      "210:         ss >> ret;",
      "211:         assert(ss.size() == 0);",
      "212:     } catch (const boost::thread_interrupted&) {",
      "213:         throw;",
      "214:     } catch (...) {",
      "215:         return boost::none;",
      "216:     }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "243:     }",
      "249:     SaplingNotePlaintext ret;",
      "252:     uint256 cmu_expected;",
      "253:     if (!librustzcash_sapling_compute_cm(",
      "",
      "[Removed Lines]",
      "246:     CDataStream ss(SER_NETWORK, PROTOCOL_VERSION);",
      "247:     ss << pt.get();",
      "250:     ss >> ret;",
      "",
      "[Added Lines]",
      "257:     try {",
      "258:         CDataStream ss(SER_NETWORK, PROTOCOL_VERSION);",
      "259:         ss << pt.get();",
      "260:         ss >> ret;",
      "261:         assert(ss.size() == 0);",
      "262:     } catch (const boost::thread_interrupted&) {",
      "263:         throw;",
      "264:     } catch (...) {",
      "265:         return boost::none;",
      "266:     }",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "265:         return boost::none;",
      "266:     }",
      "270:     return ret;",
      "271: }",
      "",
      "[Removed Lines]",
      "268:     assert(ss.size() == 0);",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "3c8e9703589bedf5c1d17438a9f1701d4fd7035c",
      "candidate_info": {
        "commit_hash": "3c8e9703589bedf5c1d17438a9f1701d4fd7035c",
        "repo": "zcash/zcash",
        "commit_url": "https://github.com/zcash/zcash/commit/3c8e9703589bedf5c1d17438a9f1701d4fd7035c",
        "files": [
          "src/zcash/Note.cpp"
        ],
        "message": "Check epk vs esk whenever caller has esk",
        "before_after_code_files": [
          "src/zcash/Note.cpp||src/zcash/Note.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/zcash/Note.cpp||src/zcash/Note.cpp"
          ],
          "candidate": [
            "src/zcash/Note.cpp||src/zcash/Note.cpp"
          ]
        }
      },
      "candidate_diff": {
        "src/zcash/Note.cpp||src/zcash/Note.cpp": [
          "File: src/zcash/Note.cpp -> src/zcash/Note.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "222:     assert(ss.size() == 0);",
          "226:         return boost::none;",
          "227:     }",
          "",
          "[Removed Lines]",
          "225:     if (!plaintext_version_valid(params, height, ret.leadByte)) {",
          "",
          "[Added Lines]",
          "225:     if (!plaintext_version_is_valid(params, height, ret.leadByte)) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "287:     assert(ss.size() == 0);",
          "291:         return boost::none;",
          "292:     }",
          "",
          "[Removed Lines]",
          "290:     if (!plaintext_version_valid(params, height, ret.leadByte)) {",
          "",
          "[Added Lines]",
          "290:     if (!plaintext_version_is_valid(params, height, ret.leadByte)) {",
          "291:         return boost::none;",
          "292:     }",
          "295:     uint256 expected_epk;",
          "296:     if (!librustzcash_sapling_ka_derivepublic(ret.d.data(), esk.begin(), expected_epk.begin())) {",
          "297:         return boost::none;",
          "298:     }",
          "299:     if (expected_epk != epk) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "309:     }",
          "311:     if (ret.leadByte == 0x02) {",
          "324:         if (esk != ret.generate_esk()) {",
          "",
          "[Removed Lines]",
          "314:         uint256 expected_epk;",
          "315:         if (!librustzcash_sapling_ka_derivepublic(ret.d.data(), esk.begin(), expected_epk.begin())) {",
          "316:             return boost::none;",
          "317:         }",
          "318:         if (expected_epk != epk) {",
          "319:             return boost::none;",
          "320:         }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}