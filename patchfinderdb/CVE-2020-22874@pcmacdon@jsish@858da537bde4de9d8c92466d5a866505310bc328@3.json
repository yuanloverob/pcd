{
  "cve_id": "CVE-2020-22874",
  "cve_desc": "Integer overflow vulnerability in function Jsi_ObjArraySizer in jsish before 3.0.8, allows remote attackers to execute arbitrary code.",
  "repo": "pcmacdon/jsish",
  "patch_hash": "858da537bde4de9d8c92466d5a866505310bc328",
  "patch_info": {
    "commit_hash": "858da537bde4de9d8c92466d5a866505310bc328",
    "repo": "pcmacdon/jsish",
    "commit_url": "https://github.com/pcmacdon/jsish/commit/858da537bde4de9d8c92466d5a866505310bc328",
    "files": [
      "md/Reference.md",
      "src/jsi.h",
      "src/jsiArray.c",
      "src/jsiCData.c",
      "src/jsiInt.h",
      "src/jsiInterp.c",
      "src/jsiObj.c",
      "src/jsiValue.c",
      "tools/protos.jsi",
      "www/reference.wiki"
    ],
    "message": "Release \"3.0.8\": Address Array alloc sizing issues from issue \"integer overflow and buffer overflow #5\".\n\nFossilOrigin-Name: 8c46a1d465b358110dcfb271721d35fe843a1b52f2fa24ccc10094eb8aaf6fe4",
    "before_after_code_files": [
      "src/jsi.h||src/jsi.h",
      "src/jsiArray.c||src/jsiArray.c",
      "src/jsiCData.c||src/jsiCData.c",
      "src/jsiInt.h||src/jsiInt.h",
      "src/jsiInterp.c||src/jsiInterp.c",
      "src/jsiObj.c||src/jsiObj.c",
      "src/jsiValue.c||src/jsiValue.c",
      "tools/protos.jsi||tools/protos.jsi",
      "www/reference.wiki||www/reference.wiki"
    ]
  },
  "patch_diff": {
    "src/jsi.h||src/jsi.h": [
      "File: src/jsi.h -> src/jsi.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "5: #define JSI_VERSION_MAJOR   3",
      "6: #define JSI_VERSION_MINOR   0",
      "9: #define JSI_VERSION (JSI_VERSION_MAJOR + ((Jsi_Number)JSI_VERSION_MINOR/100.0) + ((Jsi_Number)JSI_VERSION_RELEASE/10000.0))",
      "",
      "[Removed Lines]",
      "7: #define JSI_VERSION_RELEASE 7",
      "",
      "[Added Lines]",
      "7: #define JSI_VERSION_RELEASE 8",
      "",
      "---------------"
    ],
    "src/jsiArray.c||src/jsiArray.c": [
      "File: src/jsiArray.c -> src/jsiArray.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "267:             rc = jsi_ArrayFlatSub(interp, nobj, t , depth-1);",
      "268:         else if (!Jsi_ValueIsUndef(interp, t))",
      "269:             Jsi_ObjArrayAdd(interp, nobj, t);",
      "271:             return Jsi_LogError(\"array size exceeded\");",
      "272:     }",
      "273:     return rc;",
      "",
      "[Removed Lines]",
      "270:         if ((++n + clen)>interp->maxArrayList)",
      "",
      "[Added Lines]",
      "270:         if ((uint)(++n + clen)>interp->maxArrayList)",
      "",
      "---------------"
    ],
    "src/jsiCData.c||src/jsiCData.c": [
      "File: src/jsiCData.c -> src/jsiCData.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1276:             sf->flags |= JSI_OPT_BITSET_ENUM;",
      "1277:         }",
      "1278:         if (sf->arrSize) {",
      "1281:                 goto bail;",
      "1282:             }",
      "1283:             if (sf->bits || isEnum) {",
      "",
      "[Removed Lines]",
      "1279:             if (sf->arrSize>MAX_ARRAY_LIST) {",
      "1280:                 rc = Jsi_LogError(\"array size too big: %d >= %d\", sf->arrSize, MAX_ARRAY_LIST);",
      "",
      "[Added Lines]",
      "1279:             if (sf->arrSize>interp->maxArrayList) {",
      "1280:                 rc = Jsi_LogError(\"array size too big: %d >= %d\", sf->arrSize, interp->maxArrayList);",
      "",
      "---------------"
    ],
    "src/jsiInt.h||src/jsiInt.h": [
      "File: src/jsiInt.h -> src/jsiInt.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "1259:     Jsi_Value *Top_object;",
      "1260:     Jsi_ScopeStrs *scopes[JSI_MAX_SCOPE];",
      "1261:     int cur_scope;",
      "1263:     int delRBCnt;",
      "1264:     Jsi_Func *activeFunc;  // Currently active function call.",
      "1265:     Jsi_Func *prevActiveFunc;  // Prev active function call.",
      "",
      "[Removed Lines]",
      "1262:     int maxArrayList;",
      "",
      "[Added Lines]",
      "1262:     uint maxArrayList;",
      "",
      "---------------"
    ],
    "src/jsiInterp.c||src/jsiInterp.c": [
      "File: src/jsiInterp.c -> src/jsiInterp.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "100:     JSI_OPT(INT,   Jsi_Interp, lockTimeout, .help=\"Thread time-out for mutex lock acquires (milliseconds)\" ),",
      "101:     JSI_OPT(CUSTOM,Jsi_Interp, logOpts,     .help=\"Options for log output to add file/line/time\", .flags=0, .custom=Jsi_Opt_SwitchSuboption, .data=jsi_InterpLogOptions),",
      "102:     JSI_OPT(INT,   Jsi_Interp, maxDepth,    .help=\"Depth limit of recursive function calls (1000)\", .flags=JSI_OPT_LOCKSAFE),",
      "104:     JSI_OPT(INT,   Jsi_Interp, maxIncDepth, .help=\"Maximum allowed source/require nesting depth (50)\", .flags=JSI_OPT_LOCKSAFE),",
      "105:     JSI_OPT(INT,   Jsi_Interp, maxInterpDepth,.help=\"Maximum nested subinterp create depth (10)\", .flags=JSI_OPT_LOCKSAFE),",
      "106:     JSI_OPT(INT,   Jsi_Interp, maxUserObjs, .help=\"Maximum number of 'new' object calls, eg. File, RegExp, etc\", .flags=JSI_OPT_LOCKSAFE ),",
      "",
      "[Removed Lines]",
      "103:     JSI_OPT(INT,   Jsi_Interp, maxArrayList,.help=\"Maximum array convertable to list (100000)\", .flags=JSI_OPT_LOCKSAFE),",
      "",
      "[Added Lines]",
      "103:     JSI_OPT(UINT,  Jsi_Interp, maxArrayList,.help=\"Maximum array convertable to list (100000)\", .flags=JSI_OPT_LOCKSAFE),",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1146:     }",
      "1147:     interp->maxDepth = JSI_MAX_EVAL_DEPTH;",
      "1148:     interp->maxIncDepth = JSI_MAX_INCLUDE_DEPTH;",
      "1149:     interp->typeWarnMax = 50;",
      "1150:     interp->subOpts.dblPrec = __DBL_DECIMAL_DIG__-1;",
      "1151:     interp->subOpts.prompt = \"$ \";",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1149:     interp->maxArrayList = MAX_ARRAY_LIST;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1482: #endif",
      "1483:     if (interp->typeCheck.all|interp->typeCheck.parse|interp->typeCheck.funcsig)",
      "1484:         interp->staticFuncsTbl = Jsi_HashNew(interp, JSI_KEYS_STRING, NULL);",
      "1486:     if (!jsiIntData.isInit) {",
      "1487:         jsiIntData.isInit = 1;",
      "1488:         jsi_InitValue(interp, 0);",
      "",
      "[Removed Lines]",
      "1485:     interp->maxArrayList = MAX_ARRAY_LIST;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/jsiObj.c||src/jsiObj.c": [
      "File: src/jsiObj.c -> src/jsiObj.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "76:         if (!cp || !isdigit(*cp))",
      "77:             return JSI_OK;",
      "78:         n = (int)strtol(cp, &ep, 0);",
      "80:             return JSI_OK;",
      "81:         hPtr->f.bits.isarrlist = 1;",
      "82:         if (Jsi_ObjArraySizer(interp, obj, n) <= 0)",
      "",
      "[Removed Lines]",
      "79:         if (n<0 || n >= interp->maxArrayList)",
      "",
      "[Added Lines]",
      "79:         if (n<0 || (uint)n >= interp->maxArrayList)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "415: int Jsi_ObjArraySizer(Jsi_Interp *interp, Jsi_Obj *obj, uint len)",
      "416: {",
      "418:     assert(obj->isarrlist);",
      "419:     if (mod>1)",
      "420:         nsiz = nsiz + ((mod-1) - (nsiz + mod - 1)%mod);",
      "423:         return 0;",
      "424:     }",
      "425:     if (len >= obj->arrMaxSize) {",
      "",
      "[Removed Lines]",
      "417:     int nsiz = len + 1, mod = ALLOC_MOD_SIZE;",
      "421:     if (nsiz > MAX_ARRAY_LIST) {",
      "422:         Jsi_LogError(\"array size too large\");",
      "",
      "[Added Lines]",
      "417:     uint nsiz = len + 1, mod = ALLOC_MOD_SIZE;",
      "421:     if (len >= interp->maxArrayList || nsiz > interp->maxArrayList) {",
      "422:         Jsi_LogError(\"array size too big: %u >= %u\", len, interp->maxArrayList);",
      "",
      "---------------"
    ],
    "src/jsiValue.c||src/jsiValue.c": [
      "File: src/jsiValue.c -> src/jsiValue.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1036:     }",
      "1040:         target->vt == JSI_VT_OBJECT && target->d.obj->arr) {",
      "1041:         return jsi_ObjArraySetDup(interp, target->d.obj, value, arrayindex);",
      "1042:     }",
      "",
      "[Removed Lines]",
      "1039:     if (arrayindex >= 0 && arrayindex < MAX_ARRAY_LIST &&",
      "",
      "[Added Lines]",
      "1039:     if (arrayindex >= 0 && (uint)arrayindex < interp->maxArrayList &&",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1373:     Jsi_Obj *obj = target->d.obj;",
      "1375:     if (obj->isarrlist) {",
      "1377:             Jsi_ObjArraySet(interp, obj, val, key);",
      "1378:             return JSI_OK;",
      "1379:         }",
      "",
      "[Removed Lines]",
      "1376:         if (key >= 0 && key < interp->maxArrayList) {",
      "",
      "[Added Lines]",
      "1376:         if (key >= 0 && (uint)key < interp->maxArrayList) {",
      "",
      "---------------"
    ],
    "tools/protos.jsi||tools/protos.jsi": [
      "File: tools/protos.jsi -> tools/protos.jsi"
    ],
    "www/reference.wiki||www/reference.wiki": [
      "File: www/reference.wiki -> www/reference.wiki",
      "--- Hunk 1 ---",
      "[Context before]",
      "633: <tr><td>lockTimeout</td><td><i>INT</i></td><td>Thread time-out for mutex lock acquires (milliseconds).</td><td><i></i></td></tr>",
      "634: <tr><td>logOpts</td><td><i><a href='#logOptsOptions'>options</a></i></td><td>Options for log output to add file/line/time.</td><td><i></i></td></tr>",
      "635: <tr><td>maxDepth</td><td><i>INT</i></td><td>Depth limit of recursive function calls (1000).</td><td><i></i></td></tr>",
      "637: <tr><td>maxIncDepth</td><td><i>INT</i></td><td>Maximum allowed source/require nesting depth (50).</td><td><i></i></td></tr>",
      "638: <tr><td>maxInterpDepth</td><td><i>INT</i></td><td>Maximum nested subinterp create depth (10).</td><td><i></i></td></tr>",
      "639: <tr><td>maxUserObjs</td><td><i>INT</i></td><td>Maximum number of 'new' object calls, eg. File, RegExp, etc.</td><td><i></i></td></tr>",
      "",
      "[Removed Lines]",
      "636: <tr><td>maxArrayList</td><td><i>INT</i></td><td>Maximum array convertable to list (100000).</td><td><i></i></td></tr>",
      "",
      "[Added Lines]",
      "636: <tr><td>maxArrayList</td><td><i>UINT</i></td><td>Maximum array convertable to list (100000).</td><td><i></i></td></tr>",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "43c9c6adec77276746fc9de49272c14b7608aac8",
      "candidate_info": {
        "commit_hash": "43c9c6adec77276746fc9de49272c14b7608aac8",
        "repo": "pcmacdon/jsish",
        "commit_url": "https://github.com/pcmacdon/jsish/commit/43c9c6adec77276746fc9de49272c14b7608aac8",
        "files": [
          "lib/DebugUI/html/bind.jsi",
          "lib/DebugUI/html/main.htmli",
          "lib/Module.jsi",
          "lib/Websrv.jsi",
          "lib/www/Websrv.htmli",
          "lib/www/docs/App.js",
          "lib/www/include.min.js",
          "lib/www/js/Jsish.js",
          "lib/www/js/highcharts-vue.js",
          "lib/www/md/Reference.md",
          "src/jsi.h",
          "src/jsiCmds.c",
          "src/jsiInterp.c",
          "src/jsiWebSocket.c",
          "tools/protos.jsi"
        ],
        "message": "Release \"3.4.9\": Enhance Info.version, WebSocket poll\n\nFossilOrigin-Name: c3469e6dd397c8009dd867fcb2dc9e9c1696189c20d27711a175cf8caea7a843",
        "before_after_code_files": [
          "lib/DebugUI/html/main.htmli||lib/DebugUI/html/main.htmli",
          "lib/Module.jsi||lib/Module.jsi",
          "lib/Websrv.jsi||lib/Websrv.jsi",
          "lib/www/Websrv.htmli||lib/www/Websrv.htmli",
          "lib/www/include.min.js||lib/www/include.min.js",
          "lib/www/js/Jsish.js||lib/www/js/Jsish.js",
          "lib/www/js/highcharts-vue.js||lib/www/js/highcharts-vue.js",
          "src/jsi.h||src/jsi.h",
          "src/jsiCmds.c||src/jsiCmds.c",
          "src/jsiInterp.c||src/jsiInterp.c",
          "src/jsiWebSocket.c||src/jsiWebSocket.c",
          "tools/protos.jsi||tools/protos.jsi"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/jsi.h||src/jsi.h",
            "src/jsiInterp.c||src/jsiInterp.c",
            "tools/protos.jsi||tools/protos.jsi"
          ],
          "candidate": [
            "src/jsi.h||src/jsi.h",
            "src/jsiInterp.c||src/jsiInterp.c",
            "tools/protos.jsi||tools/protos.jsi"
          ]
        }
      },
      "candidate_diff": {
        "lib/DebugUI/html/main.htmli||lib/DebugUI/html/main.htmli": [
          "File: lib/DebugUI/html/main.htmli -> lib/DebugUI/html/main.htmli",
          "--- Hunk 1 ---",
          "[Context before]",
          "6:     <link rel=\"icon\" href=\"data:;base64,iVBORw0KGgo=\">",
          "8:     <script src=\"/jsi/js/Jsish.js\"></script>",
          "10: <?",
          "12:     include(['debugui.jsi', 'debugui.cssi']);",
          "",
          "[Removed Lines]",
          "9:     <script src=\"/jsi/bind.js\"></script>",
          "",
          "[Added Lines]",
          "9:     <script src=\"bind.jsi\"></script>",
          "",
          "---------------"
        ],
        "lib/Module.jsi||lib/Module.jsi": [
          "File: lib/Module.jsi -> lib/Module.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "48:         if (!name)",
          "49:             name = dname;",
          "51:         var proj = name.toUpperCase();",
          "52:         if (app.toLowerCase() == proj)",
          "53:             throw 'can not use name same as app: '+name;",
          "54:         var pfn = name+'.fossil';",
          "56:         if (url[0] == '/' && File.exists(url+'.fossil'))",
          "57:             url += '.fossil';",
          "58:         var ccmd = 'fossil clone '+url+' '+pfn;",
          "",
          "[Removed Lines]",
          "55:         var url = self.repo+'/'+app;",
          "",
          "[Added Lines]",
          "51:         var url = app;",
          "52:         if (!app.match(/^[-0-9a-zA-Z_]+$/)) {",
          "53:             app = File.rootname(File.tail(app));",
          "54:             if (!app.match(/^[-0-9a-zA-Z_]+$/))",
          "55:                 throw 'app name invalid: '+app;",
          "56:         } else",
          "57:             url = self.repo+'/'+app;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "72:             return;",
          "73:         exec('fossil open '+pfn);",
          "74:         exec('fossil remote-url off');",
          "76:         var dfn = 'html/index.html';",
          "77:         if (!File.exists('index.html') && File.exists(dfn)) {",
          "78:             var idat = File.read(dfn);",
          "79:             idat = idat.map(['\"../', '\"']);",
          "80:             File.write('index.html', idat);",
          "81:         }",
          "85:         if (File.exists('main.jsi'))",
          "87:     }",
          "89:     function supdate() {",
          "",
          "[Removed Lines]",
          "75:         Jsi_CopyDir('/zvfs/lib/www', 'jsi');",
          "82:         exec('fossil add jsi');",
          "83:         exec('fossil commit -m Subclone --no-warnings');",
          "84:         puts('DONE! Change password with: fossil user password '+Util.getuser().user+' NEWPASS');",
          "86:             puts('To finish setup run: \"jsish .\"');",
          "",
          "[Added Lines]",
          "81:         if (!File.isdir('jsi')) {",
          "82:             Jsi_CopyDir('/zvfs/lib/www', 'jsi');",
          "83:             exec('fossil add jsi');",
          "84:         }",
          "91:         exec('fossil commit -m sclone --no-warnings');",
          "93:             puts('DONE! To finish setup run: \"jsish .\"');",
          "94:         else",
          "95:             puts('DONE! Change password with: fossil user password '+Util.getuser().user+' NEWPASS');",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "94:             url = url.substr(1,url.length-3);",
          "95:         var dif = exec('fossil diff');",
          "96:         if (dif)",
          "98:         return exec('fossil pull --from-parent-project '+url);",
          "99:     }",
          "",
          "[Removed Lines]",
          "97:             throw 'sorry: run \"fossil commit\" first';",
          "",
          "[Added Lines]",
          "106:             throw 'must run \"fossil commit\" first';",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "113:     }",
          "115:     function es5lint(d) {",
          "118:             lst = File.glob('*.js', {dir:d, recurse:true});",
          "119:         else",
          "120:             lst = [d];",
          "121:         for (i of lst) {",
          "123:             delete int;",
          "124:         }",
          "125:     }",
          "",
          "[Removed Lines]",
          "116:         var i, lst;",
          "117:         if (File.isdir(d))",
          "122:             var int = new Interp({noEval:true, noES6:true, scriptFile:i});",
          "",
          "[Added Lines]",
          "125:         var i, lst, isdir = File.isdir(d);",
          "126:         if (isdir)",
          "131:             if (i.substr(i.length-7) == '.min.js') continue;",
          "132:             var ft = File.tail(i);",
          "133:             if (ft=='prism.js' || ft.substr(0,3)=='vue') continue;",
          "134:             var di = i;",
          "135:             if (isdir) di = d+'/'+i;",
          "136:             var int = new Interp({noEval:true, noES6:true, scriptFile:di});",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "165:     }",
          "167:     var cmdList = [",
          "169:         [\"es5lint\",     es5lint,    \"Perform lint check with ES6 features disabled\"],",
          "170:         [\"getfossil\",   getfossil,  \"Download fossil executable\"],",
          "171:         [\"jsonify\",     jsonify,    \"Normalize a json file\"],",
          "",
          "[Removed Lines]",
          "168:         [\"createmod\",   createmod,     \"Create a .jsi module from template\" ],",
          "",
          "[Added Lines]",
          "182:         [\"createmod\",   createmod,  \"Create a .jsi module from template\" ],",
          "",
          "---------------"
        ],
        "lib/Websrv.jsi||lib/Websrv.jsi": [
          "File: lib/Websrv.jsi -> lib/Websrv.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "400:         }",
          "401:     }",
          "407:             lst = File.glob('*.js', {dir:d, recurse:true});",
          "408:         else",
          "409:             lst = [d];",
          "410:         for (i of lst) {",
          "412:             delete int;",
          "413:         }",
          "416:     if (self.es5lint)",
          "419:     if (self.srcFile !== '')",
          "420:         source(self.srcFile);",
          "",
          "[Removed Lines]",
          "403:     function es5lint() {",
          "404:         var d = self.es5lint;",
          "405:         var i, lst;",
          "406:         if (File.isdir(d))",
          "411:             var int = new Interp({noEval:true, noES6:true, scriptFile:i});",
          "414:     }",
          "417:         return es5lint();",
          "",
          "[Added Lines]",
          "403:     function es5lint(d) {",
          "404:         var i, lst, isdir = File.isdir(d);",
          "405:         if (isdir)",
          "410:             if (i.substr(i.length-7) == '.min.js') continue;",
          "411:             var ft = File.tail(i);",
          "412:             if (ft=='prism.js' || ft.substr(0,3)=='vue') continue;",
          "413:             var di = i;",
          "414:             if (isdir) di = d+'/'+i;",
          "415:             var int = new Interp({noEval:true, noES6:true, scriptFile:di});",
          "418:     }",
          "420:         return es5lint(self.es5lint);",
          "",
          "---------------"
        ],
        "lib/www/Websrv.htmli||lib/www/Websrv.htmli": [
          "File: lib/www/Websrv.htmli -> lib/www/Websrv.htmli",
          "--- Hunk 1 ---",
          "[Context before]",
          "6:     <link rel=\"icon\" href=\"data:;base64,iVBORw0KGgo=\">",
          "7:     <link rel=\"stylesheet\" href=\"/jsi/www/jsiweb.css\" type=\"text/css\" media=\"screen\" />",
          "8:     <script src=\"/jsi/www/jsi.js\"></script>",
          "10:   </head>",
          "12: <script>",
          "",
          "[Removed Lines]",
          "9:     <script src=\"/jsi/www/bind.js\"></script>",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/www/include.min.js||lib/www/include.min.js": [
          "File: lib/www/include.min.js -> lib/www/include.min.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/www/js/Jsish.js||lib/www/js/Jsish.js": [
          "File: lib/www/js/Jsish.js -> lib/www/js/Jsish.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "365:         });",
          "366:         if (!opts.url) throw('url is required');",
          "369:         if (!opts.success) opts.success = none;",
          "370:         if (!opts.error) opts.error = none;",
          "371:         if (!opts.complete) opts.complete = none;",
          "",
          "[Removed Lines]",
          "368:         var req, qd = null, dt = opts.dataType;",
          "",
          "[Added Lines]",
          "368:         var req, key, i, qd = null, dt = opts.dataType;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "385:             };",
          "387:             qd = '?';",
          "389:                 qd += encodeURIComponent(key) + '=' + encodeURIComponent(opts.data[key]) +'&';",
          "391:             req.src = opts.url + qd;",
          "",
          "[Removed Lines]",
          "388:             for (var key in opts.data)",
          "",
          "[Added Lines]",
          "388:             for (key in opts.data)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "397:             req = new XMLHttpRequest();",
          "398:             req.open(opts.type, opts.url, opts.async);",
          "399:             opts.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";",
          "401:                 req.setRequestHeader(key, opts.headers[key]);",
          "403:             req.onload = req.onerror = function onload() {",
          "",
          "[Removed Lines]",
          "400:             for (var key in opts.headers)",
          "",
          "[Added Lines]",
          "400:             for (key in opts.headers)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "427:     conf: function(vals) { $jsig('vals:object', arguments)();",
          "429:         if (!vals)",
          "430:             return jsi.config;",
          "432:             var ti, tt = gettype(jsi.config[i]), vv = vals[i];",
          "433:             if (tt == 'undefined')",
          "434:                 errorCmd('Option \"'+i+'\": not one of: '+Object.keys(jsi.config).join(', '));",
          "",
          "[Removed Lines]",
          "431:         for (var i in vals) {",
          "",
          "[Added Lines]",
          "429:         var i;",
          "432:         for (i in vals) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "456:     },",
          "457:     parseOpts: function(target, opts, vals) { $jsig('target:object,opts:object,vals:object=void', arguments)();",
          "460:             if (typeof(target[i]) === 'undefined')",
          "461:                 target[i] = opts[i];",
          "463:             var ti, tt = gettype(opts[i]);",
          "464:             if (tt == 'undefined')",
          "465:                 LogWarn(\"option \"+i+\" not one of: \"+Object.keys(opts).join(', '));",
          "",
          "[Removed Lines]",
          "459:         for (var i in opts)",
          "462:         for (var i in vals) {",
          "",
          "[Added Lines]",
          "460:         var i;",
          "461:         for (i in opts)",
          "464:         for (i in vals) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "474:      getOpts: function(opts, vals, target) {",
          "476:         if (typeof(target) == 'undefined')",
          "477:             target = Object.assign(opts);",
          "478:         else",
          "480:                 if (typeof(target[i]) === 'undefined')",
          "481:                     target[i] = opts[i];",
          "483:             var ti, tt = gettype(opts[i]);",
          "484:             if (tt == 'undefined')",
          "485:                 LogWarn(\"option \"+i+\" not one of: \"+Object.keys(opts).join(', '));",
          "",
          "[Removed Lines]",
          "479:             for (var i in opts)",
          "482:         for (var i in vals) {",
          "",
          "[Added Lines]",
          "478:         var i;",
          "482:             for (i in opts)",
          "485:         for (i in vals) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "520:         var h = document.querySelector(\"body\");",
          "521:         h.appendChild(f);",
          "522:     },",
          "525:     inc: function(fn, onload, onerror) {",
          "526:         var f=document.createElement('script');",
          "",
          "[Removed Lines]",
          "523:     htmladd: function(str) { output(str) },",
          "",
          "[Added Lines]",
          "526:     htmladd: function(str) { output(str); },",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "694:     },",
          "696:     setopts: function(obj, opts) { // Set opts in obj and return.",
          "698:             if (opts[i] === undefined)",
          "699:                 throw(\"unknown option: \"+i+' is not one of: '+Object.keys(opts).join(', '));",
          "701:             if (obj[i] === undefined)",
          "702:                 obj[i] = opts[i];",
          "703:         return obj;",
          "",
          "[Removed Lines]",
          "697:         for (var i in obj)",
          "700:         for (var i in opts)",
          "",
          "[Added Lines]",
          "700:         var i;",
          "701:         for (i in obj)",
          "704:         for (i in opts)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "742:                                 }",
          "743:                             }",
          "744:                             if (w.onchange)",
          "746:                         return;",
          "747:                         default: puts('unknown * cmd');",
          "748:                     }",
          "",
          "[Removed Lines]",
          "745:                                 w.onchange(fname, fext)",
          "",
          "[Added Lines]",
          "749:                                 w.onchange(fname, fext);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "890:     }",
          "891: };",
          "894: window['$jsi'] = jsi;",
          "895: window['$jsig'] = jsi.$jsig;",
          "896: window['$matchObj'] = jsi.matchObj;",
          "",
          "[Removed Lines]",
          "893: window['Jsish'] = jsi",
          "",
          "[Added Lines]",
          "897: window['Jsish'] = jsi;",
          "",
          "---------------"
        ],
        "lib/www/js/highcharts-vue.js||lib/www/js/highcharts-vue.js": [
          "File: lib/www/js/highcharts-vue.js -> lib/www/js/highcharts-vue.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/jsi.h||src/jsi.h": [
          "File: src/jsi.h -> src/jsi.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #define JSI_VERSION_MAJOR   3",
          "6: #define JSI_VERSION_MINOR   4",
          "9: #define JSI_VERSION (JSI_VERSION_MAJOR + ((Jsi_Number)JSI_VERSION_MINOR/100.0) + ((Jsi_Number)JSI_VERSION_RELEASE/10000.0))",
          "",
          "[Removed Lines]",
          "7: #define JSI_VERSION_RELEASE 8",
          "",
          "[Added Lines]",
          "7: #define JSI_VERSION_RELEASE 9",
          "",
          "---------------"
        ],
        "src/jsiCmds.c||src/jsiCmds.c": [
          "File: src/jsiCmds.c -> src/jsiCmds.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "975:     Jsi_RC rc = JSI_OK;",
          "976:     if (argc==2) {",
          "977:         if (ver < n)",
          "979:         if (rc != JSI_OK)",
          "980:             return rc;",
          "981:         return jsi_PkgDumpInfo(interp, name, ret, n);",
          "",
          "[Removed Lines]",
          "978:             rc = Jsi_LogType(\"package '%s' downlevel: %.\" JSI_NUMGFMT \" < %.\" JSI_VERFMT_LEN JSI_NUMGFMT, name, ver, n);",
          "",
          "[Added Lines]",
          "978:             rc = Jsi_LogType(\"package '%s' downlevel: %.\" JSI_VERFMT_LEN JSI_NUMGFMT \" < %.\" JSI_VERFMT_LEN JSI_NUMGFMT, name, ver, n);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2729:     Jsi_Value **ret, Jsi_Func *funcPtr)",
          "2730: {",
          "2731:     Jsi_Value *full = Jsi_ValueArrayIndex(interp, args, 0);",
          "2732:     if (!full)",
          "2736:     else if (!Jsi_ValueIsTrue(interp, full))",
          "2738:     else {",
          "2739:         char buf[JSI_BUFSIZ];",
          "2740:         snprintf(buf, sizeof(buf),",
          "2744:         return Jsi_JSONParse(interp, buf, ret, 0);",
          "2745:     }",
          "2746:     return JSI_OK;",
          "",
          "[Removed Lines]",
          "2733:         Jsi_ValueMakeNumber(interp, ret, Jsi_Version());",
          "2734:     else if (!Jsi_ValueIsBoolean(interp, full))",
          "2735:         return Jsi_LogError(\"arg1: expected bool 'full'\");",
          "2737:         Jsi_ValueMakeNumber(interp, ret, Jsi_Version());",
          "2741:             \"{major:%d, minor:%d, release:%d, verStr:\\\"%d.%d.%d\\\"}\",",
          "2742:             JSI_VERSION_MAJOR, JSI_VERSION_MINOR, JSI_VERSION_RELEASE,",
          "2743:             JSI_VERSION_MAJOR, JSI_VERSION_MINOR, JSI_VERSION_RELEASE);",
          "",
          "[Added Lines]",
          "2732:     Jsi_Value *uver = Jsi_ValueArrayIndex(interp, args, 1);",
          "2733:     Jsi_Number v, n = Jsi_Version();",
          "2734:     if (uver && jsi_GetVerFromVal(interp, uver, &n, 0) != JSI_OK)",
          "2735:         return JSI_ERROR;",
          "2737:         Jsi_ValueMakeNumber(interp, ret, n);",
          "2738:     else if (Jsi_ValueIsNumber(interp, full) || Jsi_ValueIsString(interp, full)) {",
          "2739:         if (uver)",
          "2740:             return Jsi_LogError(\"no arg2 when arg1 is a string|number\");",
          "2741:         if (jsi_GetVerFromVal(interp, full, &n, 0) != JSI_OK)",
          "2742:             return JSI_ERROR;",
          "2743:         Jsi_ValueMakeNumber(interp, ret, n);",
          "2744:     } else if (!Jsi_ValueIsBoolean(interp, full))",
          "2745:         return Jsi_LogError(\"arg1: expected 'full' to be boolean|string|number\");",
          "2747:         Jsi_ValueMakeNumber(interp, ret, n);",
          "2750:         int major=JSI_VERSION_MAJOR, minor=JSI_VERSION_MINOR, release=JSI_VERSION_RELEASE;",
          "2751:         v = n;",
          "2752:         if (uver) {",
          "2753:             major=n;",
          "2754:             n = (n+.00001-major)*100.0;",
          "2755:             minor = n;",
          "2756:             n = (n+.001-minor)*100.0;",
          "2757:             release = n;",
          "2758:         }",
          "2760:             \"{major:%d, minor:%d, release:%d, verStr:\\\"%d.%d.%d\\\", version:%g}\",",
          "2761:             major, minor, release, major, minor, release, v);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "5027:     { \"script\",     InfoScriptCmd,      0,  1, \"func:function|regexp=void\", .help=\"Get current script file name, or file containing function\", .retType=(uint)JSI_TT_STRING|JSI_TT_ARRAY|JSI_TT_VOID },",
          "5028:     { \"scriptDir\",  InfoScriptDirCmd,   0,  0, \"\", .help=\"Get directory of current script\", .retType=(uint)JSI_TT_STRING|JSI_TT_VOID },",
          "5029:     { \"vars\",       InfoVarsCmd,        0,  1, \"val:string|regexp|object=void\", .help=\"Return details or list of matching variables\", .retType=(uint)JSI_TT_ARRAY|JSI_TT_OBJECT, .flags=0, .info=FN_infovars },",
          "5031:     { NULL, 0,0,0,0, .help=\"Commands for inspecting internal state information in JSI\"  }",
          "5032: };",
          "5033: static Jsi_RC SysSqlValuesCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "",
          "[Removed Lines]",
          "5030:     { \"version\",    InfoVersionCmd,     0,  1, \"full:boolean=false\", .help=\"JSI version: returns object when full=true\", .retType=(uint)JSI_TT_NUMBER|JSI_TT_OBJECT  },",
          "",
          "[Added Lines]",
          "5048:     { \"version\",    InfoVersionCmd,     0,  2, \"full:boolean|number|string=false, ver:number|string=void\", .help=\"Return version: when full=true returns as object\", .retType=(uint)JSI_TT_NUMBER|JSI_TT_OBJECT  },",
          "",
          "---------------"
        ],
        "src/jsiInterp.c||src/jsiInterp.c": [
          "File: src/jsiInterp.c -> src/jsiInterp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "787:           \"  -d\\t\\tDebug: console script debugger.\\n\"",
          "788:           \"  -e CODE\\tEvaluate javascript and exit.\\n\"",
          "789:           \"  -h ?CMD?\\tHelp: show help for jsish or its commands.\\n\"",
          "792:           \"  -s\\t\\tSafe: runs script in safe sub-interp.\\n\"",
          "793:           \"  -t\\t\\tTesting of scripts or directories of scripts with .js/.jsi extension.\\n\"",
          "794:           \"  -w\\t\\tWget: web client to download file from url.\\n\"",
          "",
          "[Removed Lines]",
          "790:           \"  -m\\t\\tInvoke named Module.\\n\"",
          "791:           \"  -M\\t\\tModule utilities\\n\"",
          "",
          "[Added Lines]",
          "790:           \"  -i MOD\\tInvoke named Module.\\n\"",
          "791:           \"  -m\\t\\tModule utilities\\n\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "833:             case 'J':",
          "834:                 rc = Jsi_EvalString(interp, \"moduleRun('Jspp');\", JSI_EVAL_ISMAIN);",
          "835:                 break;",
          "837:                 rc = Jsi_EvalString(interp, \"moduleRun('Module');\", JSI_EVAL_ISMAIN);",
          "838:                 break;",
          "840:                 if (argc <= 2)",
          "842:                 else {",
          "843:                     Jsi_DString dStr = {}, eStr = {};",
          "844:                     const char *cps, *cpe;",
          "",
          "[Removed Lines]",
          "836:             case 'M':",
          "839:             case 'm':",
          "841:                     rc = Jsi_LogError(\"expected a module-name: see available with 'jsish -M run'\");",
          "",
          "[Added Lines]",
          "836:             case 'm':",
          "839:             case 'i':",
          "841:                     rc = Jsi_LogError(\"expected a module-name to invoke: or use 'jsish -m run'\");",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "892:                 break;",
          "893:             default:",
          "894:                 puts(\"usage: jsish [ --E CODE | --I OPT:VAL | --T ] \\n\\t\"",
          "896:                 return jsi_DoExit(interp, 1);",
          "897:         }",
          "898:     } else {",
          "",
          "[Removed Lines]",
          "895:                 \"-a | -c | -d | -D | -e CODE | -h | J | -m  | -M | -s | -S | -u | -v | -w | -W | -z | FILE ...\\nUse -help for long help.\");",
          "",
          "[Added Lines]",
          "895:                 \"-a | -c | -d | -D | -e | -h | -i | J | -m  | -s | -S | -u | -v | -w | -W | -z | FILE ...\\nUse -help for long help.\");",
          "",
          "---------------"
        ],
        "src/jsiWebSocket.c||src/jsiWebSocket.c": [
          "File: src/jsiWebSocket.c -> src/jsiWebSocket.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "359:     JSI_OPT(FUNC,   jsi_wsCmdObj, onUpload,   .help=\"Function to call handle http-post\", .flags=0, .custom=0, .data=(void*)\"ws:userobj, id:number, filename:string, data:string, startpos:number, complete:boolean\"),",
          "360:     JSI_OPT(FUNC,   jsi_wsCmdObj, onRecv,     .help=\"Function to call when websock data recieved\", .flags=0, .custom=0, .data=(void*)\"ws:userobj, id:number, data:string\"),",
          "361:     JSI_OPT(OBJ,    jsi_wsCmdObj, pathAliases,.help=\"Alias document root  ({jsi:'/zvfs/lib/www'}) \", jsi_IIOF),",
          "363:     JSI_OPT(INT,    jsi_wsCmdObj, port,       .help=\"Port for server to listen on (8080)\", jsi_IIOF),",
          "364:     JSI_OPT(STRING, jsi_wsCmdObj, post,       .help=\"Post string to serve\", jsi_IIOF),",
          "365:     JSI_OPT(STRKEY, jsi_wsCmdObj, protocol,   .help=\"Name of protocol (ws/wss)\"),",
          "",
          "[Removed Lines]",
          "362:     JSI_OPT(INT,    jsi_wsCmdObj, pollms,     .help=\"Poll wait time in ms (0)\"),",
          "",
          "[Added Lines]",
          "362:     JSI_OPT(INT,    jsi_wsCmdObj, pollms,     .help=\"Poll wait time in ms (5)\"),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3354:     cmdPtr->maxUpload = 100000;",
          "3355:     cmdPtr->interp = interp;",
          "3356:     cmdPtr->ietf_version = -1;",
          "3357:     cmdPtr->bufferPwr2 = 0;",
          "3358:     cmdPtr->ws_gid = -1;",
          "3359:     cmdPtr->ws_uid = -1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3357:     cmdPtr->pollms = 5;",
          "",
          "---------------"
        ],
        "tools/protos.jsi||tools/protos.jsi": [
          "File: tools/protos.jsi -> tools/protos.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "118: Info.prototype.script = function(func:function|regexp=void):string|array|void {};",
          "119: Info.prototype.scriptDir = function():string|void {};",
          "120: Info.prototype.vars = function(val:string|regexp|object=void):array|object {};",
          "122: var Interp = function(cmd,args) {};",
          "123: Interp.prototype.alias = function(name:string=void, func:function|null=void, args:array|null=void, async=false):any {};",
          "124: Interp.prototype.call = function(funcName:string, args:array, wait:boolean=false):any {};",
          "",
          "[Removed Lines]",
          "121: Info.prototype.version = function(full:boolean=false):number|object {};",
          "",
          "[Added Lines]",
          "121: Info.prototype.version = function(full:boolean|number|string=false, ver:number|string=void):number|object {};",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e24266585df82650d614d4ef0be6b50698b8680e",
      "candidate_info": {
        "commit_hash": "e24266585df82650d614d4ef0be6b50698b8680e",
        "repo": "pcmacdon/jsish",
        "commit_url": "https://github.com/pcmacdon/jsish/commit/e24266585df82650d614d4ef0be6b50698b8680e",
        "files": [
          "md/Reference.md",
          "src/jsiEval.c",
          "tests/locals.jsi",
          "tools/protos.jsi",
          "www/reference.wiki"
        ],
        "message": "Fix help: use LogInfo\n\nFossilOrigin-Name: c71a4dc42dee41c73ca3fce5bb085214247d5e1292b5f28f3c2f8a2ef5788901",
        "before_after_code_files": [
          "src/jsiEval.c||src/jsiEval.c",
          "tests/locals.jsi||tests/locals.jsi",
          "tools/protos.jsi||tools/protos.jsi",
          "www/reference.wiki||www/reference.wiki"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "tools/protos.jsi||tools/protos.jsi",
            "www/reference.wiki||www/reference.wiki"
          ],
          "candidate": [
            "tools/protos.jsi||tools/protos.jsi",
            "www/reference.wiki||www/reference.wiki"
          ]
        }
      },
      "candidate_diff": {
        "src/jsiEval.c||src/jsiEval.c": [
          "File: src/jsiEval.c -> src/jsiEval.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "357:             const char *str = (top?Jsi_ValueString(interp, top, NULL):\"\");",
          "358:             if (str) {",
          "359:                 if (!Jsi_Strcmp(nam, \"help\"))",
          "361:                 else",
          "362:                     Jsi_LogError(\"%s near %s\", nam, str);",
          "363:             }",
          "",
          "[Removed Lines]",
          "360:                     Jsi_LogError(\"...%s\", str);",
          "",
          "[Added Lines]",
          "360:                     Jsi_LogInfo(\"...%s\", str);",
          "",
          "---------------"
        ],
        "tests/locals.jsi||tests/locals.jsi": [
          "File: tests/locals.jsi -> tests/locals.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "14: =!EXPECTSTART!=",
          "15: Info.locals() ==> { bar:\"function bar() {...}\", x:1 }",
          "18: =!EXPECTEND!=",
          "",
          "[Removed Lines]",
          "16: Info.locals(false) ==> { bar:\"function bar() {...}\" }",
          "17: Info.locals(true) ==> { x:1 }",
          "",
          "[Added Lines]",
          "16: Info.locals(false) ==> { x:1 }",
          "17: Info.locals(true) ==> { bar:\"function bar() {...}\" }",
          "",
          "---------------"
        ],
        "tools/protos.jsi||tools/protos.jsi": [
          "File: tools/protos.jsi -> tools/protos.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "216: Number.prototype.toPrecision = function(num:number):string {};",
          "217: Number.prototype.toString = function(radix:number=10):string {};",
          "218: var Object = function(cmd,args) {};",
          "219: Object.prototype.create = function(proto:null|object, properties:object=void):object {};",
          "220: Object.prototype.freeze = function(obj:object, freeze:boolean=true, modifyok:boolean=true, readcheck:boolean=true):void {};",
          "221: Object.prototype.getPrototypeOf = function(name:object|function):function|object {};",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "219: Object.prototype.assign = function(obj:object,...):object {};",
          "",
          "---------------"
        ],
        "www/reference.wiki||www/reference.wiki": [
          "File: www/reference.wiki -> www/reference.wiki",
          "--- Hunk 1 ---",
          "[Context before]",
          "389: |isMain|():boolean |Return true if current script was the main script invoked from command-line.|",
          "390: |keywords|(isSql=false, name:string=void):boolean&#124;array |Return/lookup reserved keyword.|",
          "391: |level|(level:number=void):number&#124;array&#124;object |Return current level or details of a call-stack frame. With no arg, returns the number of the current stack frame level. Otherwise returns details on the specified level. The topmost level is 1, and 0 is the current level, and a negative level translates as relative to the current level.|",
          "393: |lookup|(name:string) |Given string name, lookup and return value, eg: function.|",
          "394: |methods|(val:string&#124;regexp):array&#124;object |Return functions and commands.|",
          "395: |named|(name:string=void):array&#124;userobj |Returns command names for builtin Objects, eg: 'File', 'Interp', sub-Object names, or the named object.|",
          "",
          "[Removed Lines]",
          "392: |locals|(filter:boolean=void):object |Return locals; use filter=true/false just vars/functions.|",
          "",
          "[Added Lines]",
          "392: |locals|(filter:boolean=void):object |Return locals; if filter=true/false omit vars/functions.|",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "717: |Method|Function Argument Types|Description|",
          "718: |---|---|---|",
          "719: |Object|(val:object&#124;function&#124;null=void):object |Object constructor.|",
          "720: |create|(proto:null&#124;object, properties:object=void):object |Create a new object with prototype object and properties.|",
          "721: |freeze|(obj:object, freeze:boolean=true, modifyok:boolean=true, readcheck:boolean=true):void |Freeze/unfreeze an object with optionally.|",
          "722: |getPrototypeOf|(name:object&#124;function):function&#124;object |Return prototype of an object.|",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "720: |assign|(obj:object,...):object |Return arg1 object with assigned values.|",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cc29c8c17fb4551f13a45115004b75c73d2123bc",
      "candidate_info": {
        "commit_hash": "cc29c8c17fb4551f13a45115004b75c73d2123bc",
        "repo": "pcmacdon/jsish",
        "commit_url": "https://github.com/pcmacdon/jsish/commit/cc29c8c17fb4551f13a45115004b75c73d2123bc",
        "files": [
          "lib/web/jsi.js",
          "src/jsi.h",
          "src/jsiCmds.c",
          "src/jsiFileCmds.c",
          "src/jsiFilesys.c",
          "src/jsiUtils.c",
          "tools/protos.jsi"
        ],
        "message": "Release \"3.0.10\": Fix utf encode of JSON stringify.\n\nFossilOrigin-Name: d3144ff96fb1ab62b2d996461ca68b12fd707a45a51c399b7a05f0bacdc88c61",
        "before_after_code_files": [
          "lib/web/jsi.js||lib/web/jsi.js",
          "src/jsi.h||src/jsi.h",
          "src/jsiCmds.c||src/jsiCmds.c",
          "src/jsiFileCmds.c||src/jsiFileCmds.c",
          "src/jsiFilesys.c||src/jsiFilesys.c",
          "src/jsiUtils.c||src/jsiUtils.c",
          "tools/protos.jsi||tools/protos.jsi"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/jsi.h||src/jsi.h",
            "tools/protos.jsi||tools/protos.jsi"
          ],
          "candidate": [
            "src/jsi.h||src/jsi.h",
            "tools/protos.jsi||tools/protos.jsi"
          ]
        }
      },
      "candidate_diff": {
        "lib/web/jsi.js||lib/web/jsi.js": [
          "File: lib/web/jsi.js -> lib/web/jsi.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "12:     debug: function(){},",
          "13:     trace : function(){},",
          "14:     test : function(){},",
          "16:     warn : console.warn.bind(console.window,'WARN: '),",
          "17:     error : console.error.bind(console.window,'ERROR: '),",
          "18:     conf: function(typ, on) {",
          "20:         if (!typ) typ = 'debug';",
          "21:         switch (typ) {",
          "25:             default: puts('unknown log type, not one of: debug,trace,test');",
          "26:         }",
          "27:     }",
          "",
          "[Removed Lines]",
          "15:     info : console.warn.bind(console.window,'INFO: '),",
          "22:             case 'debug': LogDebug = Log.debug = (on?console.error.bind(console.window,'DEBUG: '):function(){}); break;",
          "23:             case 'trace': LogTrace = Log.trace = (on?console.warn.bind(console.window,'TRACE: '):function(){}); break;",
          "24:             case 'test': LogTest = Log.test = (on?console.error.bind(console.window,'TEST: '):function(){}); break;",
          "",
          "[Added Lines]",
          "15:     info : console.log.bind(console.window,'INFO: '),",
          "22:             case 'debug': LogDebug = Log.debug = (on?console.log.bind(console.window,'DEBUG: '):function(){}); break;",
          "23:             case 'trace': LogTrace = Log.trace = (on?console.log.bind(console.window,'TRACE: '):function(){}); break;",
          "24:             case 'test':  LogTest  = Log.test  = (on?console.log.bind(console.window,'TEST: ') :function(){}); break;",
          "",
          "---------------"
        ],
        "src/jsi.h||src/jsi.h": [
          "File: src/jsi.h -> src/jsi.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #define JSI_VERSION_MAJOR   3",
          "6: #define JSI_VERSION_MINOR   0",
          "9: #define JSI_VERSION (JSI_VERSION_MAJOR + ((Jsi_Number)JSI_VERSION_MINOR/100.0) + ((Jsi_Number)JSI_VERSION_RELEASE/10000.0))",
          "",
          "[Removed Lines]",
          "7: #define JSI_VERSION_RELEASE 9",
          "",
          "[Added Lines]",
          "7: #define JSI_VERSION_RELEASE 10",
          "",
          "---------------"
        ],
        "src/jsiCmds.c||src/jsiCmds.c": [
          "File: src/jsiCmds.c -> src/jsiCmds.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3920: mismatch:",
          "3921:             ok = 0;",
          "3922:             if (interp->asserts && !noerror)",
          "3924:             else",
          "3926:         }",
          "3928:     }",
          "",
          "[Removed Lines]",
          "3923:                 rc = Jsi_LogError(\"matchobj failed: expected '%s' not '%s'\", cp, sp);",
          "3925:                 Jsi_LogWarn(\"matchobj failed: expected '%s' not '%s'\", cp, sp);",
          "",
          "[Added Lines]",
          "3923:                 rc = Jsi_LogError(\"matchobj failed: expected '%s' got '%s'\", sp, cp);",
          "3925:                 Jsi_LogWarn(\"matchobj failed: expected '%s' got '%s'\", sp, cp);",
          "",
          "---------------"
        ],
        "src/jsiFileCmds.c||src/jsiFileCmds.c": [
          "File: src/jsiFileCmds.c -> src/jsiFileCmds.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "120:     MKDBL(\"mtime\",st.st_mtime); MKDBL(\"size\",st.st_size);",
          "121:     MKDBL(\"uid\",st.st_uid); MKDBL(\"gid\",st.st_gid);",
          "123:     char smode[30];",
          "124:     getFileTypeCh(st.st_mode, smode);",
          "125:     Jsi_Value *nv = Jsi_ValueNewStringDup(interp, smode);",
          "126:     Jsi_ObjInsert(interp, ores, \"perms\", nv, 0);",
          "127:     if (!isshort) {",
          "128:         MKDBL(\"dev\",st.st_dev); MKDBL(\"ino\",st.st_ino);",
          "129:         MKDBL(\"nlink\",st.st_nlink); MKDBL(\"rdev\",st.st_rdev);",
          "130: #ifndef __WIN32",
          "",
          "[Removed Lines]",
          "122:     MKDBL(\"mode\",st.st_mode);",
          "",
          "[Added Lines]",
          "127:         MKDBL(\"mode\",st.st_mode);",
          "",
          "---------------"
        ],
        "src/jsiFilesys.c||src/jsiFilesys.c": [
          "File: src/jsiFilesys.c -> src/jsiFilesys.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1031:             code = chan->fsPtr->putsProc(chan, str);",
          "1032:     }",
          "1034:         Jsi_Puts(interp, chan, \"\\\\0\", -1);",
          "1035:         Jsi_Puts(interp, chan, str+len+1, size-len-1);",
          "1036:     }",
          "",
          "[Removed Lines]",
          "1033:     if (size>=0 && len < size) {",
          "",
          "[Added Lines]",
          "1033:     if (size>=0 && len>0 && len < size) {",
          "",
          "---------------"
        ],
        "src/jsiUtils.c||src/jsiUtils.c": [
          "File: src/jsiUtils.c -> src/jsiUtils.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "630:     Jsi_DSInit(&eStr);",
          "631:     if (interp->maxDepth>0 && owPtr->depth > interp->maxDepth)",
          "632:         return Jsi_LogError(\"recursive ToString\");",
          "634:     int isjson = owPtr->quote&JSI_OUTPUT_JSON;",
          "635:     Jsi_Number num;",
          "636:     switch(v->vt) {",
          "",
          "[Removed Lines]",
          "633:     int quote = owPtr->quote;",
          "",
          "[Added Lines]",
          "633:     int quote = owPtr->quote, len = -1, i;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "672:         case JSI_VT_STRING:",
          "673:             str = v->d.s.str;",
          "674: outstr:",
          "675:             if (!quote) {",
          "677:                 return JSI_OK;",
          "678:             }",
          "679:             Jsi_DSAppend(dStr,\"\\\"\", NULL);",
          "681:                 if ((*str == '\\'' && (!isjson)) || *str == '\\\\'|| *str == '\\\"'|| (*str == '\\n'",
          "682:                     && (!(owPtr->quote&JSI_OUTPUT_NEWLINES)))",
          "683:                     || *str == '\\r' || *str == '\\t' || *str == '\\f' || *str == '\\b'  ) {",
          "",
          "[Removed Lines]",
          "676:                 Jsi_DSAppend(dStr, str, NULL);",
          "680:             while (*str) {",
          "",
          "[Added Lines]",
          "675:             if (len == -1)",
          "676:                 len = Jsi_Strlen(str);",
          "678:                 Jsi_DSAppendLen(dStr, str, len);",
          "682:             i = 0;",
          "683:             while (i++<len) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "700:                     int l = Jsi_UtfEncode(str, ubuf);",
          "701:                     Jsi_DSAppend(dStr,ubuf, NULL);",
          "702:                     str += l-1;",
          "703:                 }",
          "704:                 str++;",
          "705:             }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "706:                     i += l-1;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "718:                     return JSI_OK;",
          "719:                 case JSI_OT_STRING:",
          "720:                     str = o->d.s.str;",
          "721:                     goto outstr;",
          "722:                 case JSI_OT_FUNCTION:",
          "723:                     Jsi_FuncObjToString(interp, o->d.fobj->func, &eStr, 3 | ((owPtr->depth==0 && owPtr->quote)?8:0));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "725:                     len = o->d.s.len;",
          "",
          "---------------"
        ],
        "tools/protos.jsi||tools/protos.jsi": [
          "File: tools/protos.jsi -> tools/protos.jsi"
        ]
      }
    },
    {
      "candidate_hash": "7f490a5689be7df2acd12f5ca3c147e560110cf0",
      "candidate_info": {
        "commit_hash": "7f490a5689be7df2acd12f5ca3c147e560110cf0",
        "repo": "pcmacdon/jsish",
        "commit_url": "https://github.com/pcmacdon/jsish/commit/7f490a5689be7df2acd12f5ca3c147e560110cf0",
        "files": [
          "Makefile",
          "c-demos/Makefile",
          "c-demos/dyno.c",
          "c-demos/dynspec-test.jsi",
          "c-demos/dynspec.c",
          "c-demos/dynspecn-test.jsi",
          "c-demos/dynspecn.c",
          "jsish.c",
          "src/jsi.h",
          "src/jsiArray.c",
          "src/jsiCmds.c",
          "src/jsiEval.c",
          "src/jsiFileCmds.c",
          "src/jsiFilesys.c",
          "src/jsiFunc.c",
          "src/jsiHash.c",
          "src/jsiInt.h",
          "src/jsiInterp.c",
          "src/jsiMySql.c",
          "src/jsiObj.c",
          "src/jsiProto.c",
          "src/jsiSqlite.c",
          "src/jsiString.c",
          "src/jsiStubs.h",
          "src/jsiTree.c",
          "src/jsiUtils.c",
          "src/jsiValue.c",
          "src/jsiVfs.c",
          "src/jsiWebSocket.c",
          "tests/obj2.jsi",
          "tools/protos.jsi"
        ],
        "message": "Release \"3.1.8\": Fix get/set _this context\n\nFossilOrigin-Name: 2b0d6da54a524f438db9909f6af7f8b28850f388b6b8b454496e6cfee5702bde",
        "before_after_code_files": [
          "c-demos/dyno.c||c-demos/dyno.c",
          "c-demos/dynspec-test.jsi||c-demos/dynspec-test.jsi",
          "c-demos/dynspec.c||c-demos/dynspec.c",
          "c-demos/dynspecn-test.jsi||c-demos/dynspecn-test.jsi",
          "c-demos/dynspecn.c||c-demos/dynspecn.c",
          "jsish.c||jsish.c",
          "src/jsi.h||src/jsi.h",
          "src/jsiArray.c||src/jsiArray.c",
          "src/jsiCmds.c||src/jsiCmds.c",
          "src/jsiEval.c||src/jsiEval.c",
          "src/jsiFileCmds.c||src/jsiFileCmds.c",
          "src/jsiFilesys.c||src/jsiFilesys.c",
          "src/jsiFunc.c||src/jsiFunc.c",
          "src/jsiHash.c||src/jsiHash.c",
          "src/jsiInt.h||src/jsiInt.h",
          "src/jsiInterp.c||src/jsiInterp.c",
          "src/jsiMySql.c||src/jsiMySql.c",
          "src/jsiObj.c||src/jsiObj.c",
          "src/jsiProto.c||src/jsiProto.c",
          "src/jsiSqlite.c||src/jsiSqlite.c",
          "src/jsiString.c||src/jsiString.c",
          "src/jsiStubs.h||src/jsiStubs.h",
          "src/jsiTree.c||src/jsiTree.c",
          "src/jsiUtils.c||src/jsiUtils.c",
          "src/jsiValue.c||src/jsiValue.c",
          "src/jsiVfs.c||src/jsiVfs.c",
          "src/jsiWebSocket.c||src/jsiWebSocket.c",
          "tests/obj2.jsi||tests/obj2.jsi",
          "tools/protos.jsi||tools/protos.jsi"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/jsi.h||src/jsi.h",
            "src/jsiArray.c||src/jsiArray.c",
            "src/jsiInt.h||src/jsiInt.h",
            "src/jsiInterp.c||src/jsiInterp.c",
            "src/jsiObj.c||src/jsiObj.c",
            "src/jsiValue.c||src/jsiValue.c",
            "tools/protos.jsi||tools/protos.jsi"
          ],
          "candidate": [
            "src/jsi.h||src/jsi.h",
            "src/jsiArray.c||src/jsiArray.c",
            "src/jsiInt.h||src/jsiInt.h",
            "src/jsiInterp.c||src/jsiInterp.c",
            "src/jsiObj.c||src/jsiObj.c",
            "src/jsiValue.c||src/jsiValue.c",
            "tools/protos.jsi||tools/protos.jsi"
          ]
        }
      },
      "candidate_diff": {
        "c-demos/dyno.c||c-demos/dyno.c": [
          "File: c-demos/dyno.c -> c-demos/dyno.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "46:     Jsi_IncrRefCount(interp, dynObj);",
          "48:     Jsi_Obj *obj = Jsi_ValueGetObj(interp, dynObj);",
          "53:     return JSI_OK;",
          "54: }",
          "",
          "[Removed Lines]",
          "49:     Jsi_ObjAccessor(interp, obj, 1, \"foo\", ocmd);",
          "50:     Jsi_ObjAccessor(interp, obj, 0, \"foo\", ocmd);",
          "51:     Jsi_ObjAccessor(interp, obj, 1, \"bar\", ocmd);",
          "52:     Jsi_ObjAccessor(interp, obj, 0, \"bar\", ocmd);",
          "",
          "[Added Lines]",
          "49:     Jsi_ObjAccessor(interp, obj, \"foo\", 1, ocmd, 0);",
          "50:     Jsi_ObjAccessor(interp, obj, \"foo\", 0, ocmd, 0);",
          "51:     Jsi_ObjAccessor(interp, obj, \"bar\", 1, ocmd, 0);",
          "52:     Jsi_ObjAccessor(interp, obj, \"bar\", 0, ocmd, 0);",
          "",
          "---------------"
        ],
        "c-demos/dynspec-test.jsi||c-demos/dynspec-test.jsi": [
          "File: c-demos/dynspec-test.jsi -> c-demos/dynspec-test.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: =!EXPECTSTART!=",
          "36: require('dynspec') ==> 1",
          "38: keys=Object.keys(sobj) ==> [ \"mark\", \"rowid\", \"myTime\", \"id\", \"desc\", \"isdirty\", \"name\", \"max\", \"markSet\" ]",
          "39: Info.obj(sobj) ==> { freeze:true, freezeModify:true, freezeReadCheck:true, getters:[ \"mark\", \"rowid\", \"myTime\", \"id\", \"desc\", \"isdirty\", \"name\", \"max\", \"markSet\" ], objType:\"object\", setters:[ \"mark\", \"rowid\", \"myTime\", \"id\", \"desc\", \"isdirty\", \"name\", \"max\", \"markSet\" ], spec:[ { cName:\"Jsi_Strbuf\", help:\"Fixed size char buf\", initOnly:false, name:\"name\", noCase:false, readOnly:false, required:false, size:16, type:\"STRBUF\" }, { cName:\"Jsi_DString\", help:\"Description field of arbitrary length\", initOnly:false, name:\"desc\", noCase:false, readOnly:false, required:false, size:224, type:\"DSTRING\" }, { cName:\"int\", help:\"Int id\", initOnly:false, name:\"id\", noCase:false, readOnly:false, required:false, size:4, type:\"INT\" }, { cName:\"double\", help:\"Max value\", initOnly:false, name:\"max\", noCase:false, readOnly:false, required:false, size:8, type:\"DOUBLE\" }, { cName:\"time_d\", help:\"milliseconds since 1970\", initOnly:false, name:\"myTime\", noCase:false, readOnly:false, required:false, size:8, type:\"TIME_D\" }, { cName:\"\", customArg:{ enumList:[ \"\", \"A\", \"B\", \"C\", \"D\", \"F\" ], help:\"one value from list\", name:\"enum\" }, customArgHelp:\"\", data:[ \"\", \"A\", \"B\", \"C\", \"D\", \"F\" ], help:\"Marks\", initOnly:false, name:\"mark\", noCase:false, readOnly:false, required:false, size:4, type:\"CUSTOM\" }, { cName:\"\", customArg:{ bitSet:[ \"\", \"A\", \"B\", \"C\", \"D\", \"F\" ], help:\"An int field accessed a bit at a time\", name:\"bitset\" }, customArgHelp:\"\", data:[ \"\", \"A\", \"B\", \"C\", \"D\", \"F\" ], help:\"A bit set of marks\", initOnly:false, name:\"markSet\", noCase:false, readOnly:false, required:false, size:4, type:\"CUSTOM\" }, { cName:\"int64_t\", flags:1024, help:\"DB rowid for update/insert; not stored in db\", initOnly:false, name:\"rowid\", noCase:false, readOnly:false, required:false, size:8, type:\"INT64\" }, { cName:\"bool\", flags:256, help:\"Dirty bit flag: not stored in db\", initOnly:false, name:\"isdirty\", noCase:false, readOnly:false, required:false, size:1, type:\"BOOL\" } ] }",
          "40: sobj.id = 3 ==> 3",
          "",
          "[Removed Lines]",
          "37: sobj ==> {}",
          "",
          "[Added Lines]",
          "37: sobj ==> { mark:\"\", rowid:0, myTime:\"1969-12-31T16:00:00\", id:0, desc:\"\", isdirty:false, name:\"\", max:0, markSet:[] }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "53: v = {} ==> {}",
          "54: v[i]=sobj[i] ==> B",
          "55: v[i]=sobj[i] ==> 4",
          "57: v[i]=sobj[i] ==> 4",
          "58: v[i]=sobj[i] ==> My desc",
          "59: v[i]=sobj[i] ==> true",
          "60: v[i]=sobj[i] ==> Someone",
          "61: v[i]=sobj[i] ==> 2",
          "62: v[i]=sobj[i] ==> [ \"B\", \"C\", \"D\" ]",
          "65: =!EXPECTEND!=",
          "",
          "[Removed Lines]",
          "56: v[i]=sobj[i] ==> 2020-09-23T11:51:37",
          "63: v ==> { desc:\"My desc\", id:4, isdirty:true, mark:\"B\", markSet:[ \"B\", \"C\", \"D\" ], max:2, myTime:\"2020-09-23T11:51:37\", name:\"Someone\", rowid:4 }",
          "64: Object.assign(sobj,{isdirty:false, rowid:3}) ==> {}",
          "",
          "[Added Lines]",
          "56: v[i]=sobj[i] ==> 2020-09-24T09:29:56",
          "63: v ==> { desc:\"My desc\", id:4, isdirty:true, mark:\"B\", markSet:[ \"B\", \"C\", \"D\" ], max:2, myTime:\"2020-09-24T09:29:56\", name:\"Someone\", rowid:4 }",
          "64: Object.assign(sobj,{isdirty:false, rowid:3}) ==> { mark:\"B\", rowid:3, myTime:\"2020-09-24T09:29:56\", id:4, desc:\"\", isdirty:false, name:\"Someone\", max:2, markSet:[ \"B\", \"C\", \"D\" ] }",
          "65: sobj.isdirty ==> false",
          "66: Object.values(sobj) ==> [ \"B\", 3, \"2020-09-24T09:29:56\", 4, \"\", false, \"Someone\", 2, [ \"B\", \"C\", \"D\" ] ]",
          "67: arr[0].id = 32 ==> 32",
          "68: arr[0] ==> { mark:\"\", rowid:0, myTime:\"1969-12-31T16:00:00\", id:32, desc:\"\", isdirty:false, name:\"\", max:0, markSet:[] }",
          "69: sobj.id ==> 4",
          "70: sobj.id = arr[0].id ==> 32",
          "71: sobj.id ==> 32",
          "",
          "---------------"
        ],
        "c-demos/dynspec.c||c-demos/dynspec.c": [
          "File: c-demos/dynspec.c -> c-demos/dynspec.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: } MyData;",
          "23:     JSI_OPT(STRBUF,     MyData, name,   .help=\"Fixed size char buf\" ),",
          "24:     JSI_OPT(DSTRING,    MyData, desc,   .help=\"Description field of arbitrary length\"),",
          "25:     JSI_OPT(INT,        MyData, id,     .help=\"Int id\" ),",
          "",
          "[Removed Lines]",
          "22: static Jsi_StructSpec MyOptions[] = {",
          "",
          "[Added Lines]",
          "22: static Jsi_OptionSpec MyOptions[] = {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "38: bool filterproc(Jsi_AccessorSpec *ap, const char *key, Jsi_Value *val) {",
          "39:     if (!key)",
          "41:     else",
          "42:        calls++;",
          "43:     return 0;",
          "44: }",
          "46: Jsi_RC Jsi_Initdynspec(Jsi_Interp *interp, int release) {",
          "49:     if (release) {",
          "50:         return JSI_OK;",
          "",
          "[Removed Lines]",
          "40:         printf(\"Accessor released after %d calls: sets=%d/gets=%d \\n\", calls, ap->setCnt, ap->getCnt);",
          "47:     static MyData mydata;",
          "",
          "[Added Lines]",
          "40:         printf(\"Accessor for \\\"%s\\\" released after %d calls: sets=%d/gets=%d \\n\", ap->objName, calls, ap->setCnt, ap->getCnt);",
          "47:     static MyData mydata  = {};",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "52:     Jsi_LogDebug(\"LOADED DYNSPEC\");",
          "53:     Jsi_PkgProvide(interp, \"dynspec\", 1, Jsi_Initdynspec);",
          "56:     if (!ap)",
          "57:         return JSI_ERROR;",
          "58:     ap->filterProc = filterproc;",
          "60:     return JSI_OK;",
          "",
          "[Removed Lines]",
          "55:     Jsi_AccessorSpec *ap = Jsi_ObjAccessorWithSpec(interp, \"sobj\", MyOptions, (uchar*)&mydata, NULL, 0);",
          "",
          "[Added Lines]",
          "55:     Jsi_AccessorSpec *ap  = Jsi_ObjAccessorWithSpec(interp, \"sobj\",  MyOptions, (uchar*)&mydata,  NULL, 0);",
          "",
          "---------------"
        ],
        "c-demos/dynspecn-test.jsi||c-demos/dynspecn-test.jsi": [
          "File: c-demos/dynspecn-test.jsi -> c-demos/dynspecn-test.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #!/usr/bin/env jsish",
          "3: ;require('dynspecn');",
          "5: var keys, s, v;",
          "6: ;sobj;",
          "7: ;arr;",
          "8: ;arr[0];",
          "9: ;arr[0].id = 32;",
          "10: ;arr[0];",
          "11: ;sobj.id;",
          "12: ;sobj.id = arr[0].id;",
          "13: ;sobj.id;",
          "14: ;dobj.n;",
          "15: ;darr[0];",
          "18: =!EXPECTSTART!=",
          "19: require('dynspecn') ==> 1",
          "20: sobj ==> { mark:\"\", rowid:0, myTime:\"1969-12-31T16:00:00\", id:0, desc:\"\", isdirty:false, name:\"\", max:0, markSet:[] }",
          "21: arr ==> [ { mark:\"\", rowid:0, myTime:\"1969-12-31T16:00:00\", id:0, desc:\"\", isdirty:false, name:\"\", max:0, markSet:[] }, { mark:\"\", rowid:0, myTime:\"1969-12-31T16:00:00\", id:0, desc:\"\", isdirty:false, name:\"\", max:0, markSet:[] } ]",
          "22: arr[0] ==> { mark:\"\", rowid:0, myTime:\"1969-12-31T16:00:00\", id:0, desc:\"\", isdirty:false, name:\"\", max:0, markSet:[] }",
          "23: arr[0].id = 32 ==> 32",
          "24: arr[0] ==> { mark:\"\", rowid:0, myTime:\"1969-12-31T16:00:00\", id:32, desc:\"\", isdirty:false, name:\"\", max:0, markSet:[] }",
          "25: sobj.id ==> 0",
          "26: sobj.id = arr[0].id ==> 32",
          "27: sobj.id ==> 32",
          "28: dobj.n ==> { mark:\"\", rowid:0, myTime:\"1969-12-31T16:00:00\", id:0, desc:\"\", isdirty:false, name:\"\", max:0, markSet:[] }",
          "29: darr[0] ==> { mark:\"\", rowid:0, myTime:\"1969-12-31T16:00:00\", id:0, desc:\"\", isdirty:false, name:\"\", max:0, markSet:[] }",
          "30: =!EXPECTEND!=",
          "",
          "---------------"
        ],
        "c-demos/dynspecn.c||c-demos/dynspecn.c": [
          "File: c-demos/dynspecn.c -> c-demos/dynspecn.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #include \"jsi.h\"",
          "5: static const char *markStrs[] = {\"\",\"A\",\"B\",\"C\",\"D\",\"F\", NULL};",
          "6: typedef enum { MARK_NONE, MARK_A, MARK_B, MARK_C, MARK_D, MARK_F } MarkType;",
          "9: typedef struct {",
          "10:     char name[16];",
          "11:     Jsi_Number max;",
          "12:     int id;",
          "13:     MarkType mark;",
          "14:     int markSet;",
          "15:     Jsi_Number myTime;",
          "16:     Jsi_DString desc;",
          "17:     Jsi_Wide rowid;",
          "18:     bool isdirty;",
          "19: } MyData;",
          "22: static Jsi_OptionSpec MyOptions[] = {",
          "23:     JSI_OPT(STRBUF,     MyData, name,   .help=\"Fixed size char buf\" ),",
          "24:     JSI_OPT(DSTRING,    MyData, desc,   .help=\"Description field of arbitrary length\"),",
          "25:     JSI_OPT(INT,        MyData, id,     .help=\"Int id\" ),",
          "26:     JSI_OPT(DOUBLE,     MyData, max,    .help=\"Max value\"),",
          "27:     JSI_OPT(TIME_D,     MyData, myTime, .help=\"milliseconds since 1970\" ),",
          "28:     JSI_OPT(CUSTOM,     MyData, mark,   .help=\"Marks\", .flags=0, .custom=Jsi_Opt_SwitchEnum,   .data=markStrs ),",
          "29:     JSI_OPT(CUSTOM,     MyData, markSet,.help=\"A bit set of marks\", .flags=0, .custom=Jsi_Opt_SwitchBitset, .data=markStrs ),",
          "30:     JSI_OPT(INT64,      MyData, rowid,  .help=\"DB rowid for update/insert; not stored in db\", .flags=JSI_OPT_DB_ROWID),",
          "31:     JSI_OPT(BOOL,       MyData, isdirty,.help=\"Dirty bit flag: not stored in db\", .flags=JSI_OPT_DB_DIRTY),",
          "32:     JSI_OPT_END(        MyData)",
          "33: };",
          "35: Jsi_InitProc Jsi_Initdynspecn;",
          "36: static int calls = 0;",
          "38: bool filterproc(Jsi_AccessorSpec *ap, const char *key, Jsi_Value *val) {",
          "39:     if (!key)",
          "40:         printf(\"Accessor for \\\"%s\\\" released after %d calls: sets=%d/gets=%d \\n\", ap->objName, calls, ap->setCnt, ap->getCnt);",
          "41:     else",
          "42:        calls++;",
          "43:     return 0;",
          "44: }",
          "46: Jsi_RC Jsi_Initdynspecn(Jsi_Interp *interp, int release) {",
          "47:     static MyData mydata  = {}, mydata2[4] = {};",
          "49:     if (release) {",
          "50:         return JSI_OK;",
          "51:     }",
          "52:     Jsi_LogDebug(\"LOADED DYNSPECN\");",
          "53:     Jsi_PkgProvide(interp, \"dynspecn\", 1, Jsi_Initdynspecn);",
          "55:     Jsi_AccessorSpec",
          "57:     if (!ap)",
          "58:         return JSI_ERROR;",
          "61:     if (JSI_OK != Jsi_NewVariable(interp, \"arr\", Jsi_ValueNewArray(interp, NULL, 0), 0) ||",
          "62:         !Jsi_ObjAccessorWithSpec(interp, \"arr[0]\", MyOptions, (uchar*)&mydata2[0], NULL, 0) ||",
          "63:         !Jsi_ObjAccessorWithSpec(interp, \"arr[1]\", MyOptions, (uchar*)&mydata2[1], NULL, 0))",
          "64:         return JSI_ERROR;",
          "68:     if (JSI_OK != Jsi_EvalString(interp, \"var darr = [{}]; var dobj = {n:{}};\", 0))",
          "69:         return JSI_ERROR;",
          "70:     if (!Jsi_ObjAccessorWithSpec(interp, \"darr[0]\", MyOptions, (uchar*)&mydata2[2], NULL, 0)",
          "71:         || !Jsi_ObjAccessorWithSpec(interp, \"dobj.n\", MyOptions, (uchar*)&mydata2[3], NULL, 0))",
          "72:         return JSI_ERROR;",
          "73:     ap->filterProc = filterproc;",
          "75:     return JSI_OK;",
          "76: }",
          "",
          "---------------"
        ],
        "jsish.c||jsish.c": [
          "File: jsish.c -> jsish.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: #ifndef SQLITE_VERSION",
          "23: #include \"sqlite/src/sqlite3.c\"",
          "24: #endif //SQLITE_VERSION",
          "25: #include \"lws/src/lwsSingle.c\"",
          "26: #include \"src/jsiCode.c\"",
          "27: #include \"src/jsiLexer.c\"",
          "28: #include \"src/jsiFunc.c\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25: #ifdef __cplusplus",
          "26: #include \"lws/src/src/lws.h\"",
          "27: #else // __cplusplus",
          "29: #endif //__cplusplus",
          "",
          "---------------"
        ],
        "src/jsi.h||src/jsi.h": [
          "File: src/jsi.h -> src/jsi.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #define JSI_VERSION_MAJOR   3",
          "6: #define JSI_VERSION_MINOR   1",
          "9: #define JSI_VERSION (JSI_VERSION_MAJOR + ((Jsi_Number)JSI_VERSION_MINOR/100.0) + ((Jsi_Number)JSI_VERSION_RELEASE/10000.0))",
          "",
          "[Removed Lines]",
          "7: #define JSI_VERSION_RELEASE 7",
          "",
          "[Added Lines]",
          "7: #define JSI_VERSION_RELEASE 8",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "743:     Jsi_Key_Type keyType; // Read-only",
          "744:     Jsi_Interp *interp;",
          "745:     Jsi_Wide flags;",
          "746:     void *user, *user2;",
          "747:     Jsi_MapFmtKeyProc *fmtKeyProc;",
          "748:     Jsi_RBCompareProc *compareTreeProc;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "748:     int refCnt;           // Shared map.",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1499:     const char *objName;",
          "1500:     Jsi_Value *callback;",
          "1501:     void *dataPtr;",
          "1503:     Jsi_Value* varVal;",
          "1504:     Jsi_Obj *varObj;",
          "1505:     bool callAlloc;",
          "",
          "[Removed Lines]",
          "1502:     uint flags;",
          "",
          "[Added Lines]",
          "1505:     int flags;",
          "",
          "---------------"
        ],
        "src/jsiArray.c||src/jsiArray.c": [
          "File: src/jsiArray.c -> src/jsiArray.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "616:         vobjs[3] = _this;",
          "617:         vpargs = Jsi_ValueMakeObject(interp, NULL, Jsi_ObjNewArray(interp, vobjs, maa, 0));",
          "618:         Jsi_IncrRefCount(interp, vpargs);",
          "620:         Jsi_DecrRefCount(interp, vpargs);",
          "621:         if (rc != JSI_OK)",
          "622:             break;",
          "",
          "[Removed Lines]",
          "619:         rc = Jsi_FunctionInvoke(interp, func, vpargs, &nrPtr, NULL);",
          "",
          "[Added Lines]",
          "619:         rc = Jsi_FunctionInvoke(interp, func, vpargs, &nrPtr, _this);",
          "",
          "---------------"
        ],
        "src/jsiCmds.c||src/jsiCmds.c": [
          "File: src/jsiCmds.c -> src/jsiCmds.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "67: typedef struct {",
          "68:     bool trace;",
          "69:     bool once;",
          "70:     bool isMain;",
          "71:     bool noError;",
          "72:     bool noEval;",
          "73:     bool autoIndex;",
          "75:     bool global;",
          "76:     bool exists;",
          "77:     uint level;",
          "",
          "[Removed Lines]",
          "74:     bool import;",
          "",
          "[Added Lines]",
          "70:     bool import;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "525:             return Jsi_LogError(\"arg1: expected number 'code'\");",
          "526:     }",
          "527:     if (interp->onExit && interp->parent) {",
          "529:         if (Jsi_InterpGone(interp))",
          "530:             return JSI_ERROR;",
          "531:         if (b)",
          "",
          "[Removed Lines]",
          "528:         bool b = Jsi_FunctionInvokeBool(interp->parent, interp->onExit, v);",
          "",
          "[Added Lines]",
          "528:         bool b = Jsi_FunctionInvokeBool(interp->parent, interp->onExit, v, _this);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1851:         }",
          "1852:         Jsi_Value *vpargs = Jsi_ValueMakeObject(interp, NULL, Jsi_ObjNewArray(interp, NULL, 0, 0));",
          "1853:         Jsi_IncrRefCount(interp, vpargs);",
          "1855:         Jsi_DecrRefCount(interp, vpargs);",
          "1856:         if (rc != JSI_OK)",
          "1857:             return JSI_OK;",
          "",
          "[Removed Lines]",
          "1854:         rc = Jsi_FunctionInvoke(interp, v, vpargs, ret, NULL);",
          "",
          "[Added Lines]",
          "1854:         rc = Jsi_FunctionInvoke(interp, v, vpargs, ret, _this);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "4099:     gettimeofday(&tv, NULL);",
          "4100:     start = (Jsi_Wide) tv.tv_sec * 1000000 + tv.tv_usec;",
          "4101:     for (i=0; i<n && rc == JSI_OK; i++) {",
          "4103:     }",
          "4104:     gettimeofday(&tv, NULL);",
          "4105:     end = (Jsi_Wide) tv.tv_sec * 1000000 + tv.tv_usec;",
          "",
          "[Removed Lines]",
          "4102:         rc = Jsi_FunctionInvoke(interp, func, NULL, ret, NULL);",
          "",
          "[Added Lines]",
          "4102:         rc = Jsi_FunctionInvoke(interp, func, NULL, ret, _this);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "4635:     ofunc = interp->framePtr->funcName;",
          "4636:     interp->framePtr->arguments = vpargs;",
          "4637:     interp->framePtr->funcName = \"moduleRun\";",
          "4639:     interp->framePtr->arguments = oargs;",
          "4640:     interp->framePtr->funcName = ofunc;",
          "4641:     Jsi_DecrRefCount(interp, cmd);",
          "",
          "[Removed Lines]",
          "4638:     rc = Jsi_FunctionInvoke(interp, cmd, vpargs, ret, NULL);",
          "",
          "[Added Lines]",
          "4638:     rc = Jsi_FunctionInvoke(interp, cmd, vpargs, ret, _this);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "4709:         if (v==NULL) continue;",
          "4710:         const char *key = (char*)Jsi_TreeKeyGet(tPtr);",
          "4711:         if (!Jsi_ValueObjLookup(interp, v1, key, 1))",
          "4713:     }",
          "4714:     if (v2)",
          "4715:         Jsi_TreeSearchDone(&search);",
          "",
          "[Removed Lines]",
          "4712:             Jsi_ObjInsert(interp, v1->d.obj, key, v, 0);",
          "",
          "[Added Lines]",
          "4712:             Jsi_ValueInsert(interp, v1, key, v, 0);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "4840:                     }",
          "4841:             }",
          "4842:             if (rc == JSI_OK)",
          "4844:         }",
          "4845:         Jsi_TreeSearchDone(&search);",
          "4846:     }",
          "",
          "[Removed Lines]",
          "4843:                 Jsi_ObjInsert(interp, v1->d.obj, key, val, 0);",
          "",
          "[Added Lines]",
          "4843:                 Jsi_ValueInsert(interp, v1, key, val, 0);",
          "",
          "---------------"
        ],
        "src/jsiEval.c||src/jsiEval.c": [
          "File: src/jsiEval.c -> src/jsiEval.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "674:                 (ret?\"null\":Jsi_JSONQuote(interp, Jsi_DSValue(&aStr),-1, &jStr)),",
          "675:                 (ret?Jsi_JSONQuote(interp, Jsi_DSValue(&dStr),-1, &lStr):\"null\"),",
          "676:                  fname, ip->Line, ip->Lofs);",
          "678:                 Jsi_DSPrintf(&pStr, \"failed trace call\\n\");",
          "679:             Jsi_DSFree(&jStr);",
          "680:             Jsi_DSFree(&kStr);",
          "",
          "[Removed Lines]",
          "677:             if (Jsi_FunctionInvokeJSON(interp->parent, interp->debugOpts.traceCallback, Jsi_DSValue(&kStr), NULL) != JSI_OK)",
          "",
          "[Added Lines]",
          "677:             if (Jsi_FunctionInvokeJSON(interp->parent, interp->debugOpts.traceCallback, Jsi_DSValue(&kStr), NULL, NULL) != JSI_OK)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "860:             else {",
          "862:                 Jsi_Value *cscope = scope->chains_cnt > 0 ? scope->chains[0]:currentScope;",
          "864:                 if (rc != JSI_OK)",
          "865:                     return rc;",
          "",
          "[Removed Lines]",
          "863:                 Jsi_RC rc = Jsi_ObjInsert(interp, cscope->d.obj, varname, v=Jsi_ValueNew(interp), JSI_OM_DONTENUM);",
          "",
          "[Added Lines]",
          "863:                 Jsi_RC rc = Jsi_ValueInsert(interp, cscope, varname, v=Jsi_ValueNew(interp), JSI_OM_DONTENUM);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1074: #endif",
          "1075:     Jsi_Value *v = Jsi_ValueDup(interp, value);",
          "1078:         Jsi_DecrRefCount(interp, v);",
          "1079:         return JSI_ERROR;",
          "1080:     }",
          "",
          "[Removed Lines]",
          "1077:     if (Jsi_ObjInsert(interp, target->d.obj, kstr, v, flag) != JSI_OK) {",
          "",
          "[Added Lines]",
          "1077:     if (Jsi_ValueInsert(interp, target, kstr, v, flag) != JSI_OK) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1159:                 Jsi_DString nStr;",
          "1160:                 Jsi_DSInit(&nStr);",
          "1161:                 Jsi_DSPrintf(&nStr, \"[\\\"#Interp_%d\\\", %d]\", interp->objId, interp->opCnt);//TODO: use actual time interval rather than opCnt.",
          "1163:                     rc = JSI_ERROR;",
          "1164:                 Jsi_DSFree(&nStr);",
          "1165:             }",
          "",
          "[Removed Lines]",
          "1162:                 if (Jsi_FunctionInvokeJSON(interp->parent, interp->busyCallback, Jsi_DSValue(&nStr), NULL) != JSI_OK)",
          "",
          "[Added Lines]",
          "1162:                 if (Jsi_FunctionInvokeJSON(interp->parent, interp->busyCallback, Jsi_DSValue(&nStr), NULL, NULL) != JSI_OK)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1357:                 break;",
          "1358:             }",
          "1359:             case OP_LOCAL: {",
          "1361:                 context_id = ps->_context_id++;",
          "1362:                 break;",
          "1363:             }",
          "",
          "[Removed Lines]",
          "1360:                 rc = Jsi_ObjInsert(interp, currentScope->d.obj, (char*)ip->data, Jsi_ValueNew(interp), 0);",
          "",
          "[Added Lines]",
          "1360:                 rc = Jsi_ValueInsert(interp, currentScope, (char*)ip->data, Jsi_ValueNew(interp), 0);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1691:                 }",
          "1692:                 if (hPtrGet) {",
          "1695:                     hPtrGet = NULL;",
          "1696:                 }",
          "1697:                 break;",
          "",
          "[Removed Lines]",
          "1694:                     jsi_SetterCall(interp, hPtrGet, v, 0);",
          "",
          "[Added Lines]",
          "1694:                     jsi_SetterCall(interp, hPtrGet, v, _jsi_TOQ, 0);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2225:                 Jsi_DString kStr={};",
          "2226:                 Jsi_Value *vrc = Jsi_ValueNew1(pinterp);",
          "2227:                 Jsi_DSPrintf(&kStr, \"[\\\"%s\\\", %d ]\", ucp, lineNo);",
          "2229:                 if (rcs == JSI_OK) {",
          "2230:                     const char *cps = Jsi_ValueString(pinterp, vrc, NULL);",
          "2231:                     if (!cps)",
          "",
          "[Removed Lines]",
          "2228:                 Jsi_RC rcs = Jsi_FunctionInvokeJSON(pinterp, interp->debugOpts.testFmtCallback, Jsi_DSValue(&kStr), &vrc);",
          "",
          "[Added Lines]",
          "2228:                 Jsi_RC rcs = Jsi_FunctionInvokeJSON(pinterp, interp->debugOpts.testFmtCallback, Jsi_DSValue(&kStr), &vrc, NULL);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2259:         buf[ilen-2] = 0; // Remove last char and newline.",
          "2260:         Jsi_Value *inStr = Jsi_ValueNewStringDup(interp, buf+1);",
          "2261:         Jsi_IncrRefCount(interp, inStr);",
          "2263:         if (Jsi_InterpGone(interp))",
          "2264:             return JSI_ERROR;",
          "2265:         if (rc != JSI_OK) {",
          "",
          "[Removed Lines]",
          "2262:         Jsi_RC rc = Jsi_FunctionInvokeString(interp, interp->jsppCallback, inStr, &dStr);",
          "",
          "[Added Lines]",
          "2262:         Jsi_RC rc = Jsi_FunctionInvokeString(interp, interp->jsppCallback, inStr, &dStr, NULL);",
          "",
          "---------------"
        ],
        "src/jsiFileCmds.c||src/jsiFileCmds.c": [
          "File: src/jsiFileCmds.c -> src/jsiFileCmds.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "900: static Jsi_RC SubGlobsDirectory(Jsi_Interp *interp, Jsi_Obj* obj, Jsi_Value *reg,",
          "901:     const char *zPattern, const char* path, GlobData *opts, int deep,",
          "903: {",
          "904:     if (cnt>interp->maxIncDepth || !path)",
          "905:         return Jsi_LogError(\"runaway File.globs\");",
          "",
          "[Removed Lines]",
          "902:     int cnt)",
          "",
          "[Added Lines]",
          "902:     int cnt, Jsi_Value* _this)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1004:                     continue;",
          "1005:                 Jsi_DString sStr = {};",
          "1006:                 Jsi_DSAppend(&sStr, spath, \"/\", z, mid, NULL);",
          "1008:                 Jsi_DSFree(&sStr);",
          "1009:                 continue;",
          "1010:             }",
          "",
          "[Removed Lines]",
          "1007:                 rc = SubGlobsDirectory(interp, obj, NULL, NULL, Jsi_DSValue(&sStr), opts, deep, cnt+1);",
          "",
          "[Added Lines]",
          "1007:                 rc = SubGlobsDirectory(interp, obj, NULL, NULL, Jsi_DSValue(&sStr), opts, deep, cnt+1, _this);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1016:                 Jsi_DSAppend(&sStr, spath, (spath[0]?\"/\":\"\"),  z, NULL);",
          "1017:                 if (opts->dirFilter && Jsi_ValueIsFunction(interp, opts->dirFilter)) {",
          "1018:                     bres=Jsi_FunctionInvokeBool(interp, opts->dirFilter,",
          "1020:                     if (Jsi_InterpGone(interp)) {",
          "1021:                         rc = JSI_ERROR;",
          "1022:                         goto done;",
          "",
          "[Removed Lines]",
          "1019:                         Jsi_ValueNewStringDup(interp, Jsi_DSValue(&sStr)));",
          "",
          "[Added Lines]",
          "1019:                         Jsi_ValueNewStringDup(interp, Jsi_DSValue(&sStr)), _this);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1029:                 if (opts->types && Jsi_Strchr(opts->types, 'd'))",
          "1030:                     goto dumpit;",
          "1031:                 zz = Jsi_DSValue(&sStr);",
          "1033:                 Jsi_DSFree(&sStr);",
          "1034:                 if (opts->limit>0 && opts->cnt >= opts->limit)",
          "1035:                     goto done;",
          "",
          "[Removed Lines]",
          "1032:                 rc = SubGlobsDirectory(interp, obj, reg, zPattern, zz, opts, deep+1, cnt+1);",
          "",
          "[Added Lines]",
          "1032:                 rc = SubGlobsDirectory(interp, obj, reg, zPattern, zz, opts, deep+1, cnt+1, _this);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1095:         if (opts->filter && Jsi_ValueIsFunction(interp, opts->filter)) {",
          "1096:             Jsi_Value *nval = Jsi_ValueNewStringDup(interp, z);",
          "1097:             Jsi_IncrRefCount(interp, nval);",
          "1099:             if (Jsi_InterpGone(interp)) {",
          "1100:                 rc = JSI_ERROR;",
          "1101:                 goto done;",
          "",
          "[Removed Lines]",
          "1098:             bres=Jsi_FunctionInvokeBool(interp, opts->filter, nval);",
          "",
          "[Added Lines]",
          "1098:             bres=Jsi_FunctionInvokeBool(interp, opts->filter, nval, _this);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1237:     if (pat == NULL || Jsi_ValueIsNull(interp, pat))",
          "1238:         dcp = \"*\";",
          "1239:     else if (Jsi_ValueIsObjType(interp, pat, JSI_OT_REGEXP))",
          "1241:     else {",
          "1242:         dcp = Jsi_ValueString(interp, pat, NULL);",
          "1243:         if (!dcp) {",
          "",
          "[Removed Lines]",
          "1240:         rc = SubGlobsDirectory(interp, obj, pat, NULL, dcp, &Data, 0, 0);",
          "",
          "[Added Lines]",
          "1240:         rc = SubGlobsDirectory(interp, obj, pat, NULL, dcp, &Data, 0, 0, _this);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1259:     } else",
          "1260:         dcp = Jsi_DSAppend(&dStr, dcp, NULL);",
          "1263:     if (rc != JSI_OK)",
          "1264:         Jsi_ValueMakeUndef(interp, ret);",
          "1265:     else if (Data.retCount)",
          "",
          "[Removed Lines]",
          "1262:     rc = SubGlobsDirectory(interp, obj, NULL, zPattern, dcp, &Data, 0, 0);",
          "",
          "[Added Lines]",
          "1262:     rc = SubGlobsDirectory(interp, obj, NULL, zPattern, dcp, &Data, 0, 0, _this);",
          "",
          "---------------"
        ],
        "src/jsiFilesys.c||src/jsiFilesys.c": [
          "File: src/jsiFilesys.c -> src/jsiFilesys.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1021:             Jsi_DString jStr={}, kStr={};",
          "1022:             Jsi_DSPrintf(&kStr, \"[%s, %d]\",",
          "1023:                 Jsi_JSONQuote(interp, str, size, &jStr), (chan->fp == stderr?1:0));",
          "1025:                 code = 1;",
          "1026:             Jsi_DSFree(&jStr);",
          "1027:             Jsi_DSFree(&kStr);",
          "",
          "[Removed Lines]",
          "1024:             if (Jsi_FunctionInvokeJSON(interp->parent, interp->debugOpts.putsCallback, Jsi_DSValue(&kStr), NULL) != JSI_OK)",
          "",
          "[Added Lines]",
          "1024:             if (Jsi_FunctionInvokeJSON(interp->parent, interp->debugOpts.putsCallback, Jsi_DSValue(&kStr), NULL, NULL) != JSI_OK)",
          "",
          "---------------"
        ],
        "src/jsiFunc.c||src/jsiFunc.c": [
          "File: src/jsiFunc.c -> src/jsiFunc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "623:         for (i = 0; i < who->localnames->count && rc == JSI_OK; ++i) {",
          "624:             const char *argkey = jsi_ScopeStrsGet(who->localnames, i);",
          "625:             if (argkey)",
          "627:         }",
          "628:     }",
          "629:     return rc;",
          "",
          "[Removed Lines]",
          "626:                 rc = Jsi_ObjInsert(interp, arguments->d.obj, argkey, Jsi_ValueNew(interp), 0);",
          "",
          "[Added Lines]",
          "626:                 rc = Jsi_ValueInsert(interp, arguments, argkey, Jsi_ValueNew(interp), 0);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "889: }",
          "893: {",
          "894:     if (interp->deleting)",
          "895:         return JSI_ERROR;",
          "",
          "[Removed Lines]",
          "892: int Jsi_FunctionInvokeBool(Jsi_Interp *interp, Jsi_Value *func, Jsi_Value *arg)",
          "",
          "[Added Lines]",
          "892: int Jsi_FunctionInvokeBool(Jsi_Interp *interp, Jsi_Value *func, Jsi_Value *arg, Jsi_Value* _this)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "906:         vpargs = Jsi_ValueMakeObject(interp, NULL, Jsi_ObjNewArray(interp, &arg, 1, 1));",
          "907:     }",
          "908:     Jsi_IncrRefCount(interp, vpargs);",
          "910:     Jsi_DecrRefCount(interp, vpargs);",
          "911:     if (rc == JSI_OK)",
          "912:         bres = Jsi_ValueIsTrue(interp, frPtr);",
          "",
          "[Removed Lines]",
          "909:     rc = Jsi_FunctionInvoke(interp, func, vpargs, &frPtr, NULL);",
          "",
          "[Added Lines]",
          "909:     rc = Jsi_FunctionInvoke(interp, func, vpargs, &frPtr, _this);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "921: }",
          "925: {",
          "926:     if (interp->deleting)",
          "927:         return JSI_ERROR;",
          "",
          "[Removed Lines]",
          "924: Jsi_RC Jsi_FunctionInvokeString(Jsi_Interp *interp, Jsi_Value *func, Jsi_Value *arg, Jsi_DString *dStr)",
          "",
          "[Added Lines]",
          "924: Jsi_RC Jsi_FunctionInvokeString(Jsi_Interp *interp, Jsi_Value *func, Jsi_Value *arg, Jsi_DString *dStr, Jsi_Value* _this)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "937:         vpargs = Jsi_ValueMakeObject(interp, NULL, Jsi_ObjNewArray(interp, &arg, 1, 1));",
          "938:     }",
          "939:     Jsi_IncrRefCount(interp, vpargs);",
          "941:     Jsi_DecrRefCount(interp, vpargs);",
          "942:     if (rc != JSI_OK)",
          "943:         Jsi_LogError(\"function call failed\");",
          "",
          "[Removed Lines]",
          "940:     rc = Jsi_FunctionInvoke(interp, func, vpargs, &frPtr, NULL);",
          "",
          "[Added Lines]",
          "940:     rc = Jsi_FunctionInvoke(interp, func, vpargs, &frPtr, _this);",
          "",
          "---------------"
        ],
        "src/jsiHash.c||src/jsiHash.c": [
          "File: src/jsiHash.c -> src/jsiHash.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "407:     tablePtr->opts.mapType = (Jsi_Map_Type)JSI_MAP_HASH;",
          "408:     tablePtr->typ = JSI_MAP_HASH;",
          "409:     tablePtr->opts.interp = interp;",
          "410:     tablePtr->buckets = tablePtr->staticBuckets;",
          "411: #if !(JSI_SMALL_HASH_TABLE && !(JSI_SMALL_HASH_TABLE & (JSI_SMALL_HASH_TABLE - 1)))",
          "412: #error \"small hash must be a power of two\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "410:     tablePtr->opts.refCnt = 1;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "519: }",
          "523: Jsi_HashDelete(Jsi_Hash *tablePtr)",
          "524: {",
          "525:     Jsi_HashClear(tablePtr);",
          "526:     Jsi_Free(tablePtr);",
          "527: }",
          "529: Jsi_HashEntry *",
          "",
          "[Removed Lines]",
          "522: void",
          "",
          "[Added Lines]",
          "523: int",
          "526:     SIGASSERT(tablePtr, HASH);",
          "527:     if (--tablePtr->opts.refCnt>0) // Shared hash check.",
          "528:         return tablePtr->opts.refCnt;",
          "531:     return 0;",
          "",
          "---------------"
        ],
        "src/jsiInt.h||src/jsiInt.h": [
          "File: src/jsiInt.h -> src/jsiInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1506: extern char* jsi_RlGetLine(Jsi_Interp* interp, const char *prompt);",
          "1507: extern void jsi_DumpValue(Jsi_Interp *interp, Jsi_Value *arg);",
          "1508: extern Jsi_RC jsi_ObjSetFlag(Jsi_Interp *interp, Jsi_Obj *obj, int flag, int on);",
          "1512: #if !defined(_JSI_MEMCLEAR) && defined(JSI_MEM_DEBUG)",
          "",
          "[Removed Lines]",
          "1509: extern Jsi_RC jsi_SetterCall(Jsi_Interp *interp, Jsi_HashEntry *hPtr, Jsi_Value *val, int flags);",
          "1510: extern Jsi_RC jsi_GetterCall(Jsi_Interp *interp, Jsi_HashEntry *hPtr, Jsi_Value **vres, int flags);",
          "",
          "[Added Lines]",
          "1509: extern Jsi_RC jsi_SetterCall(Jsi_Interp *interp, Jsi_HashEntry *hPtr, Jsi_Value *val, Jsi_Value *_this, int flags);",
          "1510: extern Jsi_RC jsi_GetterCall(Jsi_Interp *interp, Jsi_HashEntry *hPtr, Jsi_Value **vres, Jsi_Value *_this, int flags);",
          "",
          "---------------"
        ],
        "src/jsiInterp.c||src/jsiInterp.c": [
          "File: src/jsiInterp.c -> src/jsiInterp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "194: }",
          "198: {",
          "199:     if (!Jsi_ValueIsFunction(interp, func))",
          "200:         return JSI_ERROR;",
          "201:     Jsi_Value *aPtr = Jsi_ValueNew1(interp);",
          "202:     Jsi_RC rc = Jsi_JSONParse(interp, json, &aPtr, 0);",
          "203:     if (rc == JSI_OK)",
          "205:     Jsi_DecrRefCount(interp, aPtr);",
          "206:     return rc;",
          "207: }",
          "",
          "[Removed Lines]",
          "197: Jsi_RC Jsi_FunctionInvokeJSON(Jsi_Interp *interp, Jsi_Value *func, const char *json, Jsi_Value **ret)",
          "204:         rc = Jsi_FunctionInvoke(interp, func, aPtr, ret, NULL);",
          "",
          "[Added Lines]",
          "197: Jsi_RC Jsi_FunctionInvokeJSON(Jsi_Interp *interp, Jsi_Value *func, const char *json, Jsi_Value **ret, Jsi_Value *_this)",
          "204:         rc = Jsi_FunctionInvoke(interp, func, aPtr, ret, _this);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "213: {",
          "214:     Jsi_Value *func = Jsi_NameLookup(interp, cmdstr);",
          "215:     if (func)",
          "217:     return Jsi_LogError(\"can not find cmd: %s\", cmdstr);",
          "218: }",
          "",
          "[Removed Lines]",
          "216:         return Jsi_FunctionInvokeJSON(interp, func, json, ret);",
          "",
          "[Added Lines]",
          "216:         return Jsi_FunctionInvokeJSON(interp, func, json, ret, NULL);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1043:     Jsi_RC rc = JSI_ERROR;",
          "1044:     if (interp->debugOpts.debugCallback) {",
          "1045:         Jsi_ValueReset(interp, &interp->retValue);",
          "1047:     }",
          "1048:     interp->isInCallback = 0;",
          "1049:     if (interp->parent->exited == 0 && rc != JSI_OK)",
          "",
          "[Removed Lines]",
          "1046:         rc = Jsi_FunctionInvokeJSON(interp->parent, interp->debugOpts.debugCallback, Jsi_DSValue(&dStr), &interp->retValue);",
          "",
          "[Added Lines]",
          "1046:         rc = Jsi_FunctionInvokeJSON(interp->parent, interp->debugOpts.debugCallback, Jsi_DSValue(&dStr), &interp->retValue, NULL);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2365:             jsi_AliasCreateCmd(interp, Jsi_DSValue(&se->func), (AliasCmd*)se->acdata);",
          "2366:         }",
          "2367:         else if (se->acfunc) {",
          "2369:                 rc = JSI_ERROR;",
          "2370:             Jsi_DecrRefCount(interp, se->acfunc);",
          "2371:         }",
          "",
          "[Removed Lines]",
          "2368:             if (JSI_OK != Jsi_FunctionInvokeJSON(interp, se->acfunc, Jsi_DSValue(&se->data), NULL))",
          "",
          "[Added Lines]",
          "2368:             if (JSI_OK != Jsi_FunctionInvokeJSON(interp, se->acfunc, Jsi_DSValue(&se->data), NULL, NULL))",
          "",
          "---------------"
        ],
        "src/jsiMySql.c||src/jsiMySql.c": [
          "File: src/jsiMySql.c -> src/jsiMySql.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1333:             Jsi_ObjInsert(interp, argso, apColName[i], nnv, 0);",
          "1334:         }",
          "1335:         Jsi_IncrRefCount(interp, varg1);",
          "1337:         if (Jsi_InterpGone(interp))",
          "1338:             return JSI_ERROR;",
          "1339:         Jsi_DecrRefCount(interp, varg1);",
          "",
          "[Removed Lines]",
          "1336:         bool rb = Jsi_FunctionInvokeBool(interp, p->tocall, varg1);",
          "",
          "[Added Lines]",
          "1336:         bool rb = Jsi_FunctionInvokeBool(interp, p->tocall, varg1, NULL);",
          "",
          "---------------"
        ],
        "src/jsiObj.c||src/jsiObj.c": [
          "File: src/jsiObj.c -> src/jsiObj.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: #include \"jsiInt.h\"",
          "4: #endif",
          "",
          "[Removed Lines]",
          "6: static void jsi_AccessorConfFree(Jsi_Interp* interp, Jsi_Obj* obj);",
          "",
          "[Added Lines]",
          "6: static void jsi_AccessorSpecFree(Jsi_Interp* interp, Jsi_Obj* obj);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "124:     return JSI_OK;",
          "125: }",
          "128: {",
          "129:     if (!Jsi_ValueIsObjType(interp, outVal, JSI_OT_ARRAY))",
          "130:         return Jsi_LogBug(\"outVal is not an array\");",
          "",
          "[Removed Lines]",
          "127: Jsi_RC Jsi_ObjGetValues(Jsi_Interp *interp, Jsi_Obj *obj, Jsi_Value *outVal)",
          "",
          "[Added Lines]",
          "127: Jsi_RC Jsi_ObjGetValues(Jsi_Interp *interp, Jsi_Obj *obj, Jsi_Value *outVal, Jsi_Value *_this)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "136:         for (hPtr = Jsi_HashSearchFirst(obj->getters, &search);",
          "137:             hPtr != NULL; hPtr = Jsi_HashSearchNext(&search)) {",
          "138:             Jsi_Value *val = Jsi_ValueNew(interp);",
          "140:             if (Jsi_ObjArrayAdd(interp, to, val) != JSI_OK || rc != JSI_OK)",
          "141:                 return JSI_ERROR;",
          "142:         }",
          "",
          "[Removed Lines]",
          "139:             Jsi_RC rc = jsi_GetterCall(interp, hPtr, &val, 0);",
          "",
          "[Added Lines]",
          "139:             Jsi_RC rc = jsi_GetterCall(interp, hPtr, &val, _this, 0);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "311:     if (obj->getters)",
          "312:         Jsi_HashDelete(obj->getters);",
          "313:     if (obj->accessorSpec)",
          "316:     switch (obj->ot) {",
          "317:         case JSI_OT_STRING:",
          "318:             if (!obj->isstrkey)",
          "",
          "[Removed Lines]",
          "314:         jsi_AccessorConfFree(interp, obj);",
          "",
          "[Added Lines]",
          "313:         jsi_AccessorSpecFree(interp, obj);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "515:     return JSI_OK;",
          "516: }",
          "519:     Jsi_Hash *h = NULL;",
          "520:     Jsi_HashEntry *hPtr;",
          "521:     if (obj->ot != JSI_OT_OBJECT) {",
          "",
          "[Removed Lines]",
          "518: Jsi_Hash* Jsi_ObjAccessor(Jsi_Interp *interp, Jsi_Obj *obj, bool isSet, const char *name, Jsi_Value* callback) {",
          "",
          "[Added Lines]",
          "516: Jsi_Hash* Jsi_ObjAccessor(Jsi_Interp *interp, Jsi_Obj *obj, const char *name, bool isSet, Jsi_Value* callback, int flags) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "545:         if (!hPtr)",
          "546:             Jsi_LogWarn(\"%s accessor not found for %s\", isSet?\"set\":\"get\", name);",
          "547:         else {",
          "549:             if (callback)",
          "550:                 Jsi_DecrRefCount(interp, callback);",
          "551:             Jsi_HashEntryDelete(hPtr);",
          "",
          "[Removed Lines]",
          "548:             callback = Jsi_HashValueGet(hPtr);",
          "",
          "[Added Lines]",
          "546:             callback = (Jsi_Value*)Jsi_HashValueGet(hPtr);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "554:     return h;",
          "555: }",
          "558:     Jsi_AccessorSpec *adv = obj->accessorSpec;",
          "559:     if (!adv) return;",
          "560:     if (adv->filterProc)",
          "561:         (*adv->filterProc)(adv, NULL, NULL);",
          "562:     if (adv->callAlloc)",
          "563:         Jsi_DecrRefCount(interp, adv->callback);",
          "564:     Jsi_Free(adv);",
          "565: }",
          "",
          "[Removed Lines]",
          "557: static void jsi_AccessorConfFree(Jsi_Interp* interp, Jsi_Obj* obj) {",
          "",
          "[Added Lines]",
          "555: static void jsi_AccessorSpecFree(Jsi_Interp* interp, Jsi_Obj* obj) {",
          "562:     Jsi_OptionsFree(interp, adv->spec, adv->dataPtr, 0);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "599: Jsi_AccessorSpec* Jsi_ObjAccessorWithSpec(Jsi_Interp *interp, const char* objName, Jsi_OptionSpec *spec,",
          "601:     Jsi_AccessorSpec ad = {",
          "602:         .sig=JSI_SIG_ACCESSOR, .spec=spec, .objName=objName, .callback=callback, .dataPtr=dataPtr, .flags=flags",
          "603:     };",
          "604:     Jsi_OptionSpec *specPtr = spec;",
          "606:         Jsi_LogError(\"must give spec, objName and either callback or dataPtr\");",
          "607:         return NULL;",
          "608:     }",
          "",
          "[Removed Lines]",
          "600:     uchar *dataPtr, Jsi_Value* callback, uint flags) {",
          "605:     if (!objName || !spec || (!callback && !dataPtr)) {",
          "",
          "[Added Lines]",
          "599:     void *dataPtr, Jsi_Value* callback, int flags) {",
          "604:     if (!objName || !objName[0] || !spec || (!callback && !dataPtr)) {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "610:         Jsi_LogError(\"invalid options\");",
          "611:         return NULL;",
          "612:     }",
          "619:     ad.varVal = Jsi_NameLookup(interp, objName);",
          "620:     if (ad.varVal)",
          "621:         ad.varObj = Jsi_ValueGetObj(interp, ad.varVal);",
          "622:     if (!ad.varVal || !ad.varObj) {",
          "",
          "[Removed Lines]",
          "613:     Jsi_DString dStr = {};",
          "614:     int isVar = (!Jsi_Strchr(objName, '.') && !Jsi_Strchr(objName, '['));",
          "615:     const char *var = isVar?\"var \":\"\",",
          "617:     if (JSI_OK != Jsi_EvalString(interp, ev, 0))",
          "618:         return NULL;",
          "",
          "[Added Lines]",
          "613:     if (!ad.varVal) {",
          "614:         if (Jsi_StrIsAlnum(objName)) {",
          "615:             ad.varVal = Jsi_ValueNewObj(interp, NULL);",
          "616:             if (ad.varVal && Jsi_NewVariable(interp, objName, ad.varVal, 0) != JSI_OK) {",
          "617:                 Jsi_LogWarn(\"failed to setup new variable\");",
          "618:                 return NULL;",
          "619:             }",
          "620:         } else {",
          "622:             Jsi_DString dStr = {};",
          "623:             Jsi_RC rc = Jsi_EvalString(interp, Jsi_DSPrintf(&dStr, \"%s = {};\", objName), 0);",
          "624:             Jsi_DSFree(&dStr);",
          "625:             ad.varVal = Jsi_NameLookup(interp, objName);",
          "626:             if (JSI_OK != rc)",
          "627:                 return NULL;",
          "628:         }",
          "629:     }",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "632:         adp->callAlloc = 1;",
          "633:     }",
          "634:     while (specPtr->id>=JSI_OPTION_BOOL && specPtr->id < JSI_OPTION_END && specPtr->name) {",
          "639:         specPtr++;",
          "640:     }",
          "642:     return adp;",
          "643: }",
          "",
          "[Removed Lines]",
          "635:         Jsi_ObjAccessor(interp, ad.varObj, 0, specPtr->name, callback);",
          "636:         Jsi_ObjAccessor(interp, ad.varObj, 1, specPtr->name, callback);",
          "641:     ad.varObj->accessorSpec = adp;",
          "",
          "[Added Lines]",
          "645:         Jsi_ObjAccessor(interp, adp->varObj, specPtr->name, 0, callback, flags);",
          "646:         Jsi_ObjAccessor(interp, adp->varObj, specPtr->name, 1, callback, flags);",
          "651:     adp->varObj->accessorSpec = adp;",
          "",
          "---------------"
        ],
        "src/jsiProto.c||src/jsiProto.c": [
          "File: src/jsiProto.c -> src/jsiProto.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "161:             else {",
          "162:                 v = Jsi_ValueNew(interp);",
          "163:             }",
          "165:         }",
          "166:     }",
          "167:     return (nrc == JSI_ERROR?nrc:rc);",
          "",
          "[Removed Lines]",
          "164:             Jsi_ObjInsert(interp, args->d.obj, argkey, v, JSI_OM_DONTENUM | JSI_OM_INNERSHARED);",
          "",
          "[Added Lines]",
          "164:             Jsi_ValueInsert(interp, args, argkey, v, JSI_OM_DONTENUM | JSI_OM_INNERSHARED);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "426:     if (!Jsi_ValueIsObjType(interp, val, JSI_OT_OBJECT))",
          "427:         return Jsi_LogError(\"can not call values() with non-object\");",
          "428:     Jsi_ValueMakeArrayObject(interp, ret, NULL);",
          "430: }",
          "432: Jsi_RC jsi_ObjectToStringCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "",
          "[Removed Lines]",
          "429:     return Jsi_ObjGetValues(interp, Jsi_ValueGetObj(interp, val), *ret);",
          "",
          "[Added Lines]",
          "429:     return Jsi_ObjGetValues(interp, Jsi_ValueGetObj(interp, val), *ret, _this);",
          "",
          "---------------"
        ],
        "src/jsiSqlite.c||src/jsiSqlite.c": [
          "File: src/jsiSqlite.c -> src/jsiSqlite.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1940:             Jsi_ObjInsert(interp, argso, apColName[i], nnv, 0);",
          "1941:         }",
          "1942:         Jsi_IncrRefCount(interp, varg1);",
          "1944:         Jsi_DecrRefCount(interp, varg1);",
          "1945:         if (Jsi_InterpGone(interp))",
          "1946:             return JSI_ERROR;",
          "",
          "[Removed Lines]",
          "1943:         bool rb = Jsi_FunctionInvokeBool(interp, p->tocall, varg1);",
          "",
          "[Added Lines]",
          "1943:         bool rb = Jsi_FunctionInvokeBool(interp, p->tocall, varg1, NULL);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2550:   Jsi_DSAppend(dStr, \"'\", NULL);",
          "2551: }",
          "2564: #define FN_sqlexec JSI_INFO(\"\\",
          "2565: Return values in formatted as JSON, HTML, etc. , optionally calling function with a result object\")",
          "2566: static Jsi_RC SqliteQueryCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "",
          "[Removed Lines]",
          "2553: bool dbIsAlnumStr(const char *cp)",
          "2554: {",
          "2555:     if (!cp || !*cp) return 0;",
          "2556:     while (*cp)",
          "2557:         if (isalnum(*cp) || *cp == '_')",
          "2558:             cp++;",
          "2559:         else",
          "2560:             return 0;",
          "2561:     return 1;",
          "2562: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/jsiString.c||src/jsiString.c": [
          "File: src/jsiString.c -> src/jsiString.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "672:             else {",
          "673:                 Jsi_Value *inStr = Jsi_ValueNewStringDup(interp, source_str);",
          "674:                 Jsi_IncrRefCount(interp, inStr);",
          "676:                 if (Jsi_InterpGone(interp))",
          "677:                     return JSI_ERROR;",
          "678:                 if (rc != JSI_OK) {",
          "",
          "[Removed Lines]",
          "675:                 Jsi_RC rc = Jsi_FunctionInvokeString(interp, repVal, inStr, &dStr);",
          "",
          "[Added Lines]",
          "675:                 Jsi_RC rc = Jsi_FunctionInvokeString(interp, repVal, inStr, &dStr, _this);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "789:             Jsi_DSFree(&sStr);",
          "790:             Jsi_IncrRefCount(interp, inStr);",
          "791:             if (maxArgs==1) {",
          "793:                 if (Jsi_InterpGone(interp))",
          "794:                     return JSI_ERROR;",
          "795:                 if (rc != JSI_OK) {",
          "",
          "[Removed Lines]",
          "792:                 Jsi_RC rc = Jsi_FunctionInvokeString(interp, repVal, inStr, &dStr);",
          "",
          "[Added Lines]",
          "792:                 Jsi_RC rc = Jsi_FunctionInvokeString(interp, repVal, inStr, &dStr, _this);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "814:                 vpargs = Jsi_ValueMakeObject(interp, NULL, Jsi_ObjNewArray(interp, items, i, 0));",
          "815:                 Jsi_IncrRefCount(interp, vpargs);",
          "816:                 ret = Jsi_ValueNew1(interp);",
          "818:                 if (Jsi_InterpGone(interp))",
          "819:                     return JSI_ERROR;",
          "820:                 Jsi_DecrRefCount(interp, vpargs);",
          "",
          "[Removed Lines]",
          "817:                 rc = Jsi_FunctionInvoke(interp, repVal, vpargs, &ret, NULL);",
          "",
          "[Added Lines]",
          "817:                 rc = Jsi_FunctionInvoke(interp, repVal, vpargs, &ret, _this);",
          "",
          "---------------"
        ],
        "src/jsiStubs.h||src/jsiStubs.h": [
          "File: src/jsiStubs.h -> src/jsiStubs.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #endif",
          "10: #undef JSI_EXTENSION_INI",
          "11: #define JSI_EXTENSION_INI Jsi_Stubs *jsiStubsPtr = NULL;",
          "",
          "[Removed Lines]",
          "8: #define JSI_STUBS_MD5 \"8da7a9baf8c22efef48939d296defc64\"",
          "",
          "[Added Lines]",
          "8: #define JSI_STUBS_MD5 \"aff068ab3a03d873e96f46a828943e9b\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "90:     Jsi_RC(*_Jsi_FunctionArguments)(Jsi_Interp *interp, Jsi_Value *func, int *argcPtr);",
          "91:     Jsi_RC(*_Jsi_FunctionApply)(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this, Jsi_Value **ret);",
          "92:     Jsi_RC(*_Jsi_FunctionInvoke)(Jsi_Interp *interp, Jsi_Value *tocall, Jsi_Value *args, Jsi_Value **ret, Jsi_Value *_this);",
          "96:     Jsi_Value*(*_Jsi_VarLookup)(Jsi_Interp *interp, const char *varname);",
          "97:     Jsi_Value*(*_Jsi_NameLookup)(Jsi_Interp *interp, const char *varname);",
          "98:     Jsi_Value*(*_Jsi_NameLookup2)(Jsi_Interp *interp, const char *name, const char *inObj);",
          "",
          "[Removed Lines]",
          "93:     Jsi_RC(*_Jsi_FunctionInvokeJSON)(Jsi_Interp *interp, Jsi_Value *tocall, const char *json, Jsi_Value **ret);",
          "94:     int(*_Jsi_FunctionInvokeBool)(Jsi_Interp *interp, Jsi_Value *func, Jsi_Value *arg);",
          "95:     Jsi_RC(*_Jsi_FunctionInvokeString)(Jsi_Interp *interp, Jsi_Value *func, Jsi_Value *arg, Jsi_DString *dStr);",
          "",
          "[Added Lines]",
          "93:     Jsi_RC(*_Jsi_FunctionInvokeJSON)(Jsi_Interp *interp, Jsi_Value *tocall, const char *json, Jsi_Value **ret, Jsi_Value *_this);",
          "94:     int(*_Jsi_FunctionInvokeBool)(Jsi_Interp *interp, Jsi_Value *func, Jsi_Value *arg, Jsi_Value* _this);",
          "95:     Jsi_RC(*_Jsi_FunctionInvokeString)(Jsi_Interp *interp, Jsi_Value *func, Jsi_Value *arg, Jsi_DString *dStr, Jsi_Value* _this);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "278:     void(*_Jsi_NumberUtoA10)(Jsi_UWide, char* buf, int bsiz);",
          "279:     Jsi_Hash*(*_Jsi_HashNew)(Jsi_Interp *interp, uint keyType, Jsi_HashDeleteProc *freeProc);",
          "280:     Jsi_RC(*_Jsi_HashConf)(Jsi_Hash *hashPtr, Jsi_MapOpts *opts, bool set);",
          "282:     void(*_Jsi_HashClear)(Jsi_Hash *hashPtr);",
          "283:     Jsi_HashEntry*(*_Jsi_HashSet)(Jsi_Hash *hashPtr, const void *key, void *value);",
          "284:     void*(*_Jsi_HashGet)(Jsi_Hash *hashPtr, const void *key, int flags);",
          "",
          "[Removed Lines]",
          "281:     void(*_Jsi_HashDelete)(Jsi_Hash *hashPtr);",
          "",
          "[Added Lines]",
          "281:     int(*_Jsi_HashDelete)(Jsi_Hash *hashPtr);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "295:     uint(*_Jsi_HashSize)(Jsi_Hash *hashPtr);",
          "296:     Jsi_Tree*(*_Jsi_TreeNew)(Jsi_Interp *interp, uint keyType, Jsi_TreeDeleteProc *freeProc);",
          "297:     Jsi_RC(*_Jsi_TreeConf)(Jsi_Tree *treePtr, Jsi_MapOpts *opts, bool set);",
          "299:     void(*_Jsi_TreeClear)(Jsi_Tree *treePtr);",
          "300:     Jsi_TreeEntry*(*_Jsi_TreeObjSetValue)(Jsi_Obj* obj, const char *key, Jsi_Value *val, int isstrkey);",
          "301:     Jsi_Value*    (*_Jsi_TreeObjGetValue)(Jsi_Obj* obj, const char *key, int isstrkey);",
          "",
          "[Removed Lines]",
          "298:     void(*_Jsi_TreeDelete)(Jsi_Tree *treePtr);",
          "",
          "[Added Lines]",
          "298:     int(*_Jsi_TreeDelete)(Jsi_Tree *treePtr);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "317:     Jsi_RC(*_Jsi_TreeKeysDump)(Jsi_Interp *interp, Jsi_Tree *hashPtr, Jsi_Value **ret, int flags);",
          "318:     Jsi_List*(*_Jsi_ListNew)(Jsi_Interp *interp, Jsi_Wide flags, Jsi_HashDeleteProc *freeProc);",
          "319:     Jsi_RC(*_Jsi_ListConf)(Jsi_List *list, Jsi_MapOpts *opts, bool set);",
          "321:     void(*_Jsi_ListClear)(Jsi_List *list);",
          "322:     void*(*_Jsi_ListValueGet)(Jsi_ListEntry *list);",
          "323:     void(*_Jsi_ListValueSet)(Jsi_ListEntry *list, const void *value);",
          "",
          "[Removed Lines]",
          "320:     void(*_Jsi_ListDelete)(Jsi_List *list);",
          "",
          "[Added Lines]",
          "320:     int(*_Jsi_ListDelete)(Jsi_List *list);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "339:     void(*_Jsi_StackFreeElements)(Jsi_Interp *interp, Jsi_Stack *stack, Jsi_DeleteProc *freeFunc);",
          "340:     Jsi_Map*(*_Jsi_MapNew)(Jsi_Interp *interp, Jsi_Map_Type mapType, Jsi_Key_Type keyType, Jsi_MapDeleteProc *freeProc);",
          "341:     Jsi_RC(*_Jsi_MapConf)(Jsi_Map *mapPtr, Jsi_MapOpts *opts, bool set);",
          "343:     void(*_Jsi_MapClear)(Jsi_Map *mapPtr);",
          "344:     Jsi_MapEntry*(*_Jsi_MapSet)(Jsi_Map *mapPtr, const void *key, const void *value);",
          "345:     void*(*_Jsi_MapGet)(Jsi_Map *mapPtr, const void *key, int flags);",
          "",
          "[Removed Lines]",
          "342:     void(*_Jsi_MapDelete)(Jsi_Map *mapPtr);",
          "",
          "[Added Lines]",
          "342:     int(*_Jsi_MapDelete)(Jsi_Map *mapPtr);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "448:     Jsi_RC(*_Jsi_SqlObjBinds)(Jsi_Interp* interp, Jsi_DString* zStr, Jsi_SqlObjOpts*opts);",
          "449:     Jsi_RC(*_Jsi_UserObjName)(Jsi_Interp *interp, Jsi_Value *v, Jsi_DString *dStr);",
          "450:     Jsi_Value*(*_Jsi_ValueNewRegExp)(Jsi_Interp *interp, const char *regtxt, const char* modifiers);",
          "452:     Jsi_PkgOpts*(*_Jsi_CommandPkgOpts)(Jsi_Interp *interp, Jsi_Func *func);",
          "453:     Jsi_Interp*(*_Jsi_InterpMain)(int argc, char **argv, Jsi_InitProc* initProc);",
          "454:     Jsi_RC(*_Jsi_ObjFreeze)(Jsi_Interp *interp, Jsi_Obj *obj, bool freeze, bool modifyOk, bool readCheck);",
          "456:     Jsi_Value*(*_Jsi_ValueNewFunction)(Jsi_Interp *interp, Jsi_CmdProc *callback, const char *name, void *privData);",
          "458:     Jsi_Func*(*_Jsi_FunctionFromValue)(Jsi_Interp *interp, Jsi_Value* value);",
          "460:     void *endPtr;",
          "461: } Jsi_Stubs;",
          "",
          "[Removed Lines]",
          "451:     Jsi_RC(*_Jsi_ObjGetValues)(Jsi_Interp *interp, Jsi_Obj *obj, Jsi_Value *outVal);",
          "455:     Jsi_Hash*(*_Jsi_ObjAccessor)(Jsi_Interp *interp, Jsi_Obj *obj, bool isSet, const char *name, Jsi_Value* callback);",
          "457:     Jsi_AccessorSpec*(*_Jsi_ObjAccessorWithSpec)(Jsi_Interp *interp, const char* objName, Jsi_OptionSpec *spec, uchar *dataPtr, Jsi_Value* callback, uint flags);",
          "459:     Jsi_RC (*_Jsi_NewVariable)(Jsi_Interp *interp, const char *name, Jsi_Value *val, uint flags);",
          "",
          "[Added Lines]",
          "451:     Jsi_RC(*_Jsi_ObjGetValues)(Jsi_Interp *interp, Jsi_Obj *obj, Jsi_Value *outVal, Jsi_Value *_this);",
          "455:     Jsi_Hash*(*_Jsi_ObjAccessor)(Jsi_Interp *interp, Jsi_Obj *obj, const char *name, bool isSet, Jsi_Value* callback, int flags);",
          "457:     Jsi_AccessorSpec*(*_Jsi_ObjAccessorWithSpec)(Jsi_Interp *interp, const char* objName, Jsi_OptionSpec *spec, void *dataPtr, Jsi_Value* callback, int flags);",
          "459:     Jsi_RC (*_Jsi_NewVariable)(Jsi_Interp *interp, const char *name, Jsi_Value *val, int flags);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "958: #define Jsi_FunctionArguments(n0,n1,n2) JSISTUBCALL(jsiStubsPtr, _Jsi_FunctionArguments(n0,n1,n2))",
          "959: #define Jsi_FunctionApply(n0,n1,n2,n3) JSISTUBCALL(jsiStubsPtr, _Jsi_FunctionApply(n0,n1,n2,n3))",
          "960: #define Jsi_FunctionInvoke(n0,n1,n2,n3,n4) JSISTUBCALL(jsiStubsPtr, _Jsi_FunctionInvoke(n0,n1,n2,n3,n4))",
          "964: #define Jsi_VarLookup(n0,n1) JSISTUBCALL(jsiStubsPtr, _Jsi_VarLookup(n0,n1))",
          "965: #define Jsi_NameLookup(n0,n1) JSISTUBCALL(jsiStubsPtr, _Jsi_NameLookup(n0,n1))",
          "966: #define Jsi_NameLookup2(n0,n1,n2) JSISTUBCALL(jsiStubsPtr, _Jsi_NameLookup2(n0,n1,n2))",
          "",
          "[Removed Lines]",
          "961: #define Jsi_FunctionInvokeJSON(n0,n1,n2,n3) JSISTUBCALL(jsiStubsPtr, _Jsi_FunctionInvokeJSON(n0,n1,n2,n3))",
          "962: #define Jsi_FunctionInvokeBool(n0,n1,n2) JSISTUBCALL(jsiStubsPtr, _Jsi_FunctionInvokeBool(n0,n1,n2))",
          "963: #define Jsi_FunctionInvokeString(n0,n1,n2,n3) JSISTUBCALL(jsiStubsPtr, _Jsi_FunctionInvokeString(n0,n1,n2,n3))",
          "",
          "[Added Lines]",
          "961: #define Jsi_FunctionInvokeJSON(n0,n1,n2,n3,n4) JSISTUBCALL(jsiStubsPtr, _Jsi_FunctionInvokeJSON(n0,n1,n2,n3,n4))",
          "962: #define Jsi_FunctionInvokeBool(n0,n1,n2,n3) JSISTUBCALL(jsiStubsPtr, _Jsi_FunctionInvokeBool(n0,n1,n2,n3))",
          "963: #define Jsi_FunctionInvokeString(n0,n1,n2,n3,n4) JSISTUBCALL(jsiStubsPtr, _Jsi_FunctionInvokeString(n0,n1,n2,n3,n4))",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1316: #define Jsi_SqlObjBinds(n0,n1,n2) JSISTUBCALL(jsiStubsPtr, _Jsi_SqlObjBinds(n0,n1,n2))",
          "1317: #define Jsi_UserObjName(n0,n1,n2) JSISTUBCALL(jsiStubsPtr, _Jsi_UserObjName(n0,n1,n2))",
          "1318: #define Jsi_ValueNewRegExp(n0,n1,n2) JSISTUBCALL(jsiStubsPtr, _Jsi_ValueNewRegExp(n0,n1,n2))",
          "1320: #define Jsi_CommandPkgOpts(n0,n1) JSISTUBCALL(jsiStubsPtr, _Jsi_CommandPkgOpts(n0,n1))",
          "1321: #define Jsi_InterpMain(n0,n1,n2) JSISTUBCALL(jsiStubsPtr, _Jsi_InterpMain(n0,n1,n2))",
          "1322: #define Jsi_ObjFreeze(n0,n1,n2,n3,n4) JSISTUBCALL(jsiStubsPtr, _Jsi_ObjFreeze(n0,n1,n2,n3,n4))",
          "1324: #define Jsi_ValueNewFunction(n0,n1,n2,n3) JSISTUBCALL(jsiStubsPtr, _Jsi_ValueNewFunction(n0,n1,n2,n3))",
          "1325: #define Jsi_ObjAccessorWithSpec(n0,n1,n2,n3,n4,n5) JSISTUBCALL(jsiStubsPtr, _Jsi_ObjAccessorWithSpec(n0,n1,n2,n3,n4,n5))",
          "1326: #define Jsi_FunctionFromValue(n0,n1) JSISTUBCALL(jsiStubsPtr, _Jsi_FunctionFromValue(n0,n1))",
          "",
          "[Removed Lines]",
          "1319: #define Jsi_ObjGetValues(n0,n1,n2) JSISTUBCALL(jsiStubsPtr, _Jsi_ObjGetValues(n0,n1,n2))",
          "1323: #define Jsi_ObjAccessor(n0,n1,n2,n3,n4) JSISTUBCALL(jsiStubsPtr, _Jsi_ObjAccessor(n0,n1,n2,n3,n4))",
          "",
          "[Added Lines]",
          "1319: #define Jsi_ObjGetValues(n0,n1,n2,n3) JSISTUBCALL(jsiStubsPtr, _Jsi_ObjGetValues(n0,n1,n2,n3))",
          "1323: #define Jsi_ObjAccessor(n0,n1,n2,n3,n4,n5) JSISTUBCALL(jsiStubsPtr, _Jsi_ObjAccessor(n0,n1,n2,n3,n4,n5))",
          "",
          "---------------"
        ],
        "src/jsiTree.c||src/jsiTree.c": [
          "File: src/jsiTree.c -> src/jsiTree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "451:     treePtr->typ = (Jsi_Map_Type)JSI_MAP_TREE;",
          "452:     treePtr->root = NULL;",
          "453:     treePtr->opts.interp = interp;",
          "454:     treePtr->numEntries = 0;",
          "455:     treePtr->epoch = 0;",
          "456:     treePtr->opts.keyType = (Jsi_Key_Type)keyType;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "454:     treePtr->opts.refCnt = 1;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "507:         (*treePtr->opts.lockTreeProc)(treePtr, 0);",
          "508: }",
          "511: {",
          "512:     SIGASSERTV(treePtr, TREE);",
          "513:     if (treePtr->flags.destroyed)",
          "516:     treePtr->flags.destroyed = 1;",
          "517:     destroy_node(treePtr->opts.interp, treePtr->root);",
          "518:     _JSI_MEMCLEAR(treePtr);",
          "519:     Jsi_Free(treePtr);",
          "520: }",
          "",
          "[Removed Lines]",
          "510: void Jsi_TreeDelete (Jsi_Tree *treePtr)",
          "514:         return;",
          "",
          "[Added Lines]",
          "511: int Jsi_TreeDelete (Jsi_Tree *treePtr)",
          "514:     if (--treePtr->opts.refCnt>0) // Shared tree check.",
          "515:         return treePtr->opts.refCnt;",
          "517:         return -1;",
          "523:     return 0;",
          "",
          "---------------"
        ],
        "src/jsiUtils.c||src/jsiUtils.c": [
          "File: src/jsiUtils.c -> src/jsiUtils.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "297:             Jsi_DString jStr={}, kStr={};",
          "298:             Jsi_DSPrintf(&kStr, \"[%s, \\\"%s\\\", \\\"%s\\\", %d, %d ]\",",
          "299:                 Jsi_JSONQuote(interp, buf1, -1, &jStr), mt, curFile, line, lofs);",
          "301:                 code = 1;",
          "302:             Jsi_DSFree(&jStr);",
          "303:             Jsi_DSFree(&kStr);",
          "",
          "[Removed Lines]",
          "300:             if (Jsi_FunctionInvokeJSON(interp->parent, interp->debugOpts.msgCallback, Jsi_DSValue(&kStr), NULL) != JSI_OK)",
          "",
          "[Added Lines]",
          "300:             if (Jsi_FunctionInvokeJSON(interp->parent, interp->debugOpts.msgCallback, Jsi_DSValue(&kStr), NULL, NULL) != JSI_OK)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "497: bool Jsi_StrIsAlnum(const char *cp)",
          "498: {",
          "499:     if (!cp || !*cp) return 0;",
          "500:     while (*cp)",
          "501:         if (isalnum(*cp) || *cp == '_')",
          "502:             cp++;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "500:     if (isalpha(*cp) || *cp == '_')",
          "501:         cp++;",
          "502:     else",
          "503:         return 0;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "673:     return rc;",
          "674: }",
          "677: {",
          "678:     const char *key = (char*)Jsi_HashKeyGet(hPtr);",
          "679:     Jsi_Value *v = interp->GetterValue;",
          "681:     if (rc != JSI_OK)",
          "682:         return JSI_ERROR;",
          "683:     return jsi_ObjectGetFmt(interp, key, v, ow);",
          "",
          "[Removed Lines]",
          "676: static Jsi_RC jsi_objectGetterFmt(Jsi_Interp *interp, Jsi_HashEntry *hPtr, objwalker *ow)",
          "680:     Jsi_RC rc = jsi_GetterCall(interp, hPtr, &interp->GetterValue, 0);",
          "",
          "[Added Lines]",
          "680: static Jsi_RC jsi_objectGetterFmt(Jsi_Interp *interp, Jsi_HashEntry *hPtr, objwalker *ow, Jsi_Value* _this)",
          "684:     Jsi_RC rc = jsi_GetterCall(interp, hPtr, &interp->GetterValue, _this, 0);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "844:                     Jsi_DSAppend(dStr,\"{\",len?\" \":\"\", NULL);",
          "845:                     for (hPtr = Jsi_HashSearchFirst(o->getters, &search);",
          "846:                         hPtr != NULL; hPtr = Jsi_HashSearchNext(&search)) {",
          "848:                     }",
          "849:                 } else {",
          "850:                     Jsi_DSAppend(dStr,\"{\",len?\" \":\"\", NULL);",
          "",
          "[Removed Lines]",
          "847:                         jsi_objectGetterFmt(interp, hPtr, owPtr);",
          "",
          "[Added Lines]",
          "851:                         jsi_objectGetterFmt(interp, hPtr, owPtr, v);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1435:     list->opts.flags = flags;",
          "1436:     list->opts.freeHashProc = freeProc;",
          "1437:     list->opts.interp = interp;",
          "1438:     list->opts.mapType = JSI_MAP_LIST;",
          "1439:     list->opts.keyType = (Jsi_Key_Type)-1;",
          "1440:     return list;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1442:     list->opts.refCnt = 1;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1443: Jsi_RC Jsi_ListConf(Jsi_List *listPtr, Jsi_MapOpts *opts, bool set)",
          "1444: {",
          "1445:     if (set) {",
          "1446:         listPtr->opts = *opts;",
          "1447:     } else {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1450:     SIGASSERT(listPtr, LIST);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1450:     return JSI_OK;",
          "1451: }",
          "1454:     Jsi_ListClear(list);",
          "1455:     free(list);",
          "1456: }",
          "1458: void Jsi_ListClear(Jsi_List *list) {",
          "",
          "[Removed Lines]",
          "1453: void Jsi_ListDelete(Jsi_List *list) {",
          "",
          "[Added Lines]",
          "1459: int Jsi_ListDelete(Jsi_List *list) {",
          "1460:     SIGASSERT(list, LIST);",
          "1461:     if (--list->opts.refCnt>0) // Shared hash check.",
          "1462:         return list->opts.refCnt;",
          "1465:     return 0;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1471: Jsi_ListEntry* Jsi_ListPush(Jsi_List *list, Jsi_ListEntry *item, Jsi_ListEntry *before)",
          "1472: {",
          "1473:     Assert(item && list);",
          "1474:     if (item->list && (item->list->head == item || item->prev || item->next)) {",
          "1475:         Assert(list->opts.freeListProc == item->list->opts.freeListProc);",
          "1476:         Jsi_ListPop(item->list, item);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1484:     SIGASSERT(list, LIST);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1625:     }",
          "1626: }",
          "1629:     SIGASSERTV(mapPtr, MAP);",
          "1630:     switch (mapPtr->typ) {",
          "1635:     }",
          "1637: }",
          "1638: Jsi_MapEntry* Jsi_MapSet(Jsi_Map *mapPtr, const void *key, const void *value){",
          "1639:     SIGASSERT(mapPtr, MAP);",
          "",
          "[Removed Lines]",
          "1628: void Jsi_MapDelete (Jsi_Map *mapPtr) {",
          "1631:         case JSI_MAP_HASH: Jsi_HashDelete(mapPtr->v.hash); break;",
          "1632:         case JSI_MAP_TREE: Jsi_TreeDelete(mapPtr->v.tree); break;",
          "1633:         case JSI_MAP_LIST: Jsi_ListDelete(mapPtr->v.list); break;",
          "1634:         default: return;",
          "1636:     Jsi_Free(mapPtr);",
          "",
          "[Added Lines]",
          "1639: int Jsi_MapDelete (Jsi_Map *mapPtr) {",
          "1641:     int r = 0;",
          "1643:         case JSI_MAP_HASH: r = Jsi_HashDelete(mapPtr->v.hash); break;",
          "1644:         case JSI_MAP_TREE: r = Jsi_TreeDelete(mapPtr->v.tree); break;",
          "1645:         case JSI_MAP_LIST: r = Jsi_ListDelete(mapPtr->v.list); break;",
          "1646:         default: return -1;",
          "1648:     if (r==0)",
          "1649:         Jsi_Free(mapPtr);",
          "1650:     return r;",
          "",
          "---------------"
        ],
        "src/jsiValue.c||src/jsiValue.c": [
          "File: src/jsiValue.c -> src/jsiValue.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "992:     if (obj->getters) {",
          "993:         Jsi_HashEntry *hPtr = Jsi_HashEntryFind(obj->getters, keyStr);",
          "994:         if (hPtr) {",
          "1013:             if (rc == JSI_OK) {",
          "1014:                 v = interp->GetterValue;",
          "1015:                 v->f.bits.isgetter = 1;",
          "",
          "[Removed Lines]",
          "995:             Jsi_RC rc = jsi_GetterCall(interp, hPtr, &interp->GetterValue, 0);",
          "997:         if (vget) {",
          "998:             Jsi_Value *vpargs = NULL, *vargs[2], *vres = interp->GetterValue;",
          "999:             Jsi_FuncObj *fobj = vget->d.obj->d.fobj;",
          "1000:             int i = 0;",
          "1001:             if (!fobj->func->isGet) {",
          "1002:                 vargs[i++] = Jsi_ValueNewStringDup(interp, keyStr);",
          "1003:                 Jsi_IncrRefCount(interp, vargs[0]);",
          "1004:                 vpargs = Jsi_ValueMakeObject(interp, NULL, Jsi_ObjNewArray(interp, vargs, i, 0));",
          "1005:                 Jsi_IncrRefCount(interp, vpargs);",
          "1006:             }",
          "1008:             Jsi_RC rc = Jsi_FunctionInvoke(interp, vget, vpargs, &vres, NULL);",
          "1009:             if (vpargs) {",
          "1010:                 Jsi_DecrRefCount(interp, vargs[0]);",
          "1011:                 Jsi_DecrRefCount(interp, vpargs);",
          "",
          "[Added Lines]",
          "995:             Jsi_RC rc = jsi_GetterCall(interp, hPtr, &interp->GetterValue, target, 0);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1302:     return res;",
          "1303: }",
          "1307: }",
          "1319: Jsi_RC Jsi_ValueInsertArray(Jsi_Interp *interp, Jsi_Value *target, int key, Jsi_Value *val, int flags)",
          "",
          "[Removed Lines]",
          "1305: Jsi_RC Jsi_NewVariable(Jsi_Interp *interp, const char *name, Jsi_Value *val, uint flags) {",
          "1306:     return Jsi_ObjInsert(interp, interp->csc->d.obj, name, val, 0);",
          "1310: Jsi_RC Jsi_ValueInsert(Jsi_Interp *interp, Jsi_Value *target, const char *key, Jsi_Value *val, int flags)",
          "1311: {",
          "1312:     if (target->vt != JSI_VT_OBJECT)",
          "1313:         return Jsi_LogError(\"Target is not object\");",
          "1314:     target->f.flag |= flags;",
          "1315:     return Jsi_ObjInsert(interp, target->d.obj, key, val, flags);",
          "1316: }",
          "",
          "[Added Lines]",
          "1288: Jsi_RC Jsi_NewVariable(Jsi_Interp *interp, const char *name, Jsi_Value *val, int flags) {",
          "1289:     if (!val)",
          "1290:         val = Jsi_ValueNew(interp);",
          "1291:     return Jsi_ValueInsert(interp, interp->csc, name, val, flags);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1325:     if (obj->isarrlist) {",
          "1326:         if (key >= 0 && (uint)key < interp->maxArrayList) {",
          "1328:             return JSI_OK;",
          "1329:         }",
          "1330:         return JSI_ERROR;",
          "1331:     }",
          "1332:     char unibuf[JSI_MAX_NUMBER_STRING];",
          "1333:     Jsi_NumberItoA10(key, unibuf, sizeof(unibuf));",
          "1335: }",
          "",
          "[Removed Lines]",
          "1327:             Jsi_ObjArraySet(interp, obj, val, key);",
          "1334:     return Jsi_ObjInsert(interp, obj, unibuf, val, flags);",
          "",
          "[Added Lines]",
          "1304:             Jsi_ValueArraySet(interp, target, val, key);",
          "1311:     return Jsi_ValueInsert(interp, target, unibuf, val, flags);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1359:     IterObjInsertKey(io, (const char*)Jsi_TreeKeyGet(hPtr));",
          "1360: }",
          "1363: {",
          "1364:     const char *key = (char*)Jsi_HashKeyGet(hPtr);",
          "1365:     Jsi_Value *v = (Jsi_Value*)Jsi_HashValueGet(hPtr);",
          "",
          "[Removed Lines]",
          "1362: Jsi_RC jsi_SetterCall(Jsi_Interp *interp, Jsi_HashEntry *hPtr, Jsi_Value *val, int flags)",
          "",
          "[Added Lines]",
          "1339: Jsi_RC jsi_SetterCall(Jsi_Interp *interp, Jsi_HashEntry *hPtr, Jsi_Value *val, Jsi_Value *_this, int flags)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1377:     vpargs = Jsi_ValueMakeObject(interp, NULL, Jsi_ObjNewArray(interp, vargs, i, 0));",
          "1378:     Jsi_IncrRefCount(interp, val);",
          "1379:     Jsi_IncrRefCount(interp, vpargs);",
          "1381:     Jsi_DecrRefCount(interp, vpargs);",
          "1382:     Jsi_DecrRefCount(interp, val);",
          "1383:     if (i>1)",
          "",
          "[Removed Lines]",
          "1380:     Jsi_RC rc = Jsi_FunctionInvoke(interp, v, vpargs, &retStr, NULL);",
          "",
          "[Added Lines]",
          "1357:     Jsi_RC rc = Jsi_FunctionInvoke(interp, v, vpargs, &retStr, _this);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1388:     return JSI_OK;",
          "1389: }",
          "1392: {",
          "1393:     const char *key = (char*)Jsi_HashKeyGet(hPtr);",
          "1394:     Jsi_Value *vcall = (Jsi_Value*)Jsi_HashValueGet(hPtr);",
          "",
          "[Removed Lines]",
          "1391: Jsi_RC jsi_GetterCall(Jsi_Interp *interp, Jsi_HashEntry *hPtr, Jsi_Value **vres, int flags)",
          "",
          "[Added Lines]",
          "1368: Jsi_RC jsi_GetterCall(Jsi_Interp *interp, Jsi_HashEntry *hPtr, Jsi_Value **vres, Jsi_Value *_this, int flags)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1404:         Jsi_IncrRefCount(interp, vpargs);",
          "1405:     }",
          "1408:     if (vpargs) {",
          "1409:         Jsi_DecrRefCount(interp, vargs[0]);",
          "1410:         Jsi_DecrRefCount(interp, vpargs);",
          "",
          "[Removed Lines]",
          "1407:     Jsi_RC rc = Jsi_FunctionInvoke(interp, vcall, vpargs, vres, NULL);",
          "",
          "[Added Lines]",
          "1384:     Jsi_RC rc = Jsi_FunctionInvoke(interp, vcall, vpargs, vres, _this);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1412:     return rc;",
          "1413: }",
          "1416: {",
          "1417:     Jsi_TreeEntry *hPtr;",
          "1418:     SIGASSERT(val, VALUE);",
          "",
          "[Removed Lines]",
          "1415: Jsi_RC Jsi_ObjInsert(Jsi_Interp *interp, Jsi_Obj *obj, const char *key, Jsi_Value *val, int flags)",
          "",
          "[Added Lines]",
          "1392: static Jsi_RC jsi_ObjValInsert(Jsi_Interp *interp, Jsi_Obj *obj, const char *key, Jsi_Value *val, Jsi_Value *_this, int flags)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1420:     if (obj && obj->setters && val) {",
          "1421:         Jsi_HashEntry *hPtr = Jsi_HashEntryFind(obj->setters, key);",
          "1422:         if (hPtr)",
          "1424:     }",
          "1426:     if (val && obj->freeze) {",
          "",
          "[Removed Lines]",
          "1423:             return jsi_SetterCall(interp, hPtr, val, 0);",
          "",
          "[Added Lines]",
          "1400:             return jsi_SetterCall(interp, hPtr, val, _this, 0);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1442:     return JSI_OK;",
          "1443: }",
          "1445: static Jsi_RC IterGetKeysCallback(Jsi_Tree* tree, Jsi_TreeEntry *hPtr, void *data)",
          "1446: {",
          "1447:     Jsi_IterObj *io = (Jsi_IterObj *)data;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1423: Jsi_RC Jsi_ValueInsert(Jsi_Interp *interp, Jsi_Value *target, const char *key, Jsi_Value *val, int flags)",
          "1424: {",
          "1425:     if (target->vt != JSI_VT_OBJECT)",
          "1426:         return Jsi_LogError(\"Target is not object\");",
          "1427:     target->f.flag |= flags;",
          "1428:     return jsi_ObjValInsert(interp, target->d.obj, key, val, target, flags);",
          "1429: }",
          "1431: Jsi_RC Jsi_ObjInsert(Jsi_Interp *interp, Jsi_Obj *obj, const char *key, Jsi_Value *val, int flags)",
          "1432: {",
          "1433:     return jsi_ObjValInsert(interp, obj, key, val, NULL, flags);",
          "1434: }",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1481:         iterobj->isgetter = 1;",
          "1482:         for (hPtr = Jsi_HashSearchFirst(to->getters, &search);",
          "1483:             hPtr != NULL; hPtr = Jsi_HashSearchNext(&search)) {",
          "1485:                 IterObjInsertKey(iterobj, key);",
          "1486:         }",
          "1487:         return;",
          "",
          "[Removed Lines]",
          "1484:                 const char *key = Jsi_HashKeyGet(hPtr);",
          "",
          "[Added Lines]",
          "1475:                 const char *key = (char*)Jsi_HashKeyGet(hPtr);",
          "",
          "---------------"
        ],
        "src/jsiVfs.c||src/jsiVfs.c": [
          "File: src/jsiVfs.c -> src/jsiVfs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "496:     Jsi_IncrRefCount(interp, vpargs);",
          "497:     for (i=0; i<n; i++)",
          "498:         Jsi_IncrRefCount(interp, vargs[i]);",
          "500:     for (i=0; i<n; i++)",
          "501:         Jsi_DecrRefCount(interp, vargs[i]);",
          "502:     Jsi_DecrRefCount(interp, vpargs);",
          "",
          "[Removed Lines]",
          "499:     Jsi_RC rc = Jsi_FunctionInvoke(interp, cmd, vpargs, ret, NULL);",
          "",
          "[Added Lines]",
          "499:     Jsi_RC rc = Jsi_FunctionInvoke(interp, cmd, vpargs, ret, _this);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "596:         Jsi_IncrRefCount(interp, vargs[0]);",
          "597:         Jsi_IncrRefCount(interp, vpargs);",
          "599:         Jsi_DecrRefCount(interp, vpargs);",
          "600:         Jsi_DecrRefCount(interp, vargs[0]);",
          "601:         if (jrc != JSI_OK) {",
          "",
          "[Removed Lines]",
          "598:         Jsi_RC jrc = Jsi_FunctionInvoke(interp, cmdPtr->callback, vpargs, &retStr, NULL);",
          "",
          "[Added Lines]",
          "598:         Jsi_RC jrc = Jsi_FunctionInvoke(interp, cmdPtr->callback, vpargs, &retStr, _this);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "620:         Jsi_IncrRefCount(interp, vargs[0]);",
          "621:         Jsi_IncrRefCount(interp, vpargs);",
          "623:         Jsi_DecrRefCount(interp, vpargs);",
          "624:         Jsi_DecrRefCount(interp, vargs[0]);",
          "625:         if (jrc != JSI_OK) {",
          "",
          "[Removed Lines]",
          "622:         Jsi_RC jrc = Jsi_FunctionInvoke(interp, cmdPtr->callback, vpargs, &retStr, NULL);",
          "",
          "[Added Lines]",
          "622:         Jsi_RC jrc = Jsi_FunctionInvoke(interp, cmdPtr->callback, vpargs, &retStr, _this);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "720:         Jsi_IncrRefCount(interp, vargs[0]);",
          "721:         Jsi_IncrRefCount(interp, vpargs);",
          "723:         Jsi_DecrRefCount(interp, vpargs);",
          "724:         Jsi_DecrRefCount(interp, vargs[0]);",
          "725:         Jsi_DecrRefCount(interp, retStr);",
          "",
          "[Removed Lines]",
          "722:         jrc = Jsi_FunctionInvoke(interp, cmdPtr->callback, vpargs, &retStr, NULL);",
          "",
          "[Added Lines]",
          "722:         jrc = Jsi_FunctionInvoke(interp, cmdPtr->callback, vpargs, &retStr, _this);",
          "",
          "---------------"
        ],
        "src/jsiWebSocket.c||src/jsiWebSocket.c": [
          "File: src/jsiWebSocket.c -> src/jsiWebSocket.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1540:                 Jsi_DSAppend(&jStr, \"[null]\", NULL);",
          "1541:                 Jsi_DSAppend(&jStr, \"]\", NULL);",
          "1542:                 vrc = Jsi_ValueNew1(interp);",
          "1544:                 if (Jsi_InterpGone(interp))",
          "1545:                     return -1;",
          "1546:                 if (evrc != JSI_OK || !vrc || !Jsi_ValueIsObjType(interp, vrc, JSI_OT_OBJECT)) {",
          "",
          "[Removed Lines]",
          "1543:                 evrc = Jsi_FunctionInvokeJSON(interp, hv, Jsi_DSValue(&jStr), &vrc);",
          "",
          "[Added Lines]",
          "1543:                 evrc = Jsi_FunctionInvokeJSON(interp, hv, Jsi_DSValue(&jStr), &vrc, NULL);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1563:             if (hdlPtr->objVar) {  // Call the obj.parse function.",
          "1564:                 Jsi_DSAppend(&jStr, \"[\\\"\", buf, \"\\\"]\", NULL); // TODO: JSON encode.",
          "1565:                 vrc = Jsi_ValueNew1(interp);",
          "1567:                 isalloc = 1;",
          "1568:             }",
          "1569:             else if (Jsi_ValueIsFunction(interp, hv)) {",
          "1571:                 Jsi_DSAppend(&jStr, \"[\\\"\", buf, \"\\\", {wsName:\\\"\", Jsi_DSValue(&cmdPtr->cName), \"\\\"\", \"}]\", NULL); // TODO: JSON encode.",
          "1572:                 vrc = Jsi_ValueNew1(interp);",
          "1574:                 isalloc = 1;",
          "1575:             } else {",
          "",
          "[Removed Lines]",
          "1566:                 evrc = Jsi_FunctionInvokeJSON(interp, hdlPtr->objVar, Jsi_DSValue(&jStr), &vrc);",
          "1573:                 evrc = Jsi_FunctionInvokeJSON(interp, hv, Jsi_DSValue(&jStr), &vrc);",
          "",
          "[Added Lines]",
          "1566:                 evrc = Jsi_FunctionInvokeJSON(interp, hdlPtr->objVar, Jsi_DSValue(&jStr), &vrc, NULL);",
          "1573:                 evrc = Jsi_FunctionInvokeJSON(interp, hv, Jsi_DSValue(&jStr), &vrc, NULL);",
          "",
          "---------------"
        ],
        "tests/obj2.jsi||tests/obj2.jsi": [
          "File: tests/obj2.jsi -> tests/obj2.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "4:    _foo:0,",
          "5:    _bar:'',",
          "6:    set foo(val) {",
          "8:    },",
          "9:    get foo() {",
          "11:    },",
          "12:    set bar(val) {",
          "14:    },",
          "15:    get bar() {",
          "17:    },",
          "18: };",
          "19: ;x.bar = 'x';",
          "",
          "[Removed Lines]",
          "7:       x._foo=val;",
          "10:      return x._foo;",
          "13:       x._bar=val;",
          "16:      return x._bar;",
          "",
          "[Added Lines]",
          "7:       this._foo=val;",
          "10:      return this._foo;",
          "13:       this._bar=val;",
          "16:      return this._bar;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "40: x.foo ==> 9",
          "41: x.export++ ==> 99",
          "42: x.export ==> 100",
          "44: Info.vars(x) ==> [ \"_bar\", \"_foo\", \"export\" ]",
          "45: i=Info.obj(x) ==> { freeze:false, freezeModify:true, freezeReadCheck:false, getters:[ \"foo\", \"bar\" ], objType:\"object\", setters:[ \"foo\", \"bar\" ], spec:undefined }",
          "46: keys ==> [ \"bar\", \"foo\" ]",
          "",
          "[Removed Lines]",
          "43: x.foo++ ==> 100",
          "",
          "[Added Lines]",
          "43: x.foo++ ==> 9",
          "",
          "---------------"
        ],
        "tools/protos.jsi||tools/protos.jsi": [
          "File: tools/protos.jsi -> tools/protos.jsi"
        ]
      }
    },
    {
      "candidate_hash": "e70088ae62acf033bcb169e19c778dd1fce66c08",
      "candidate_info": {
        "commit_hash": "e70088ae62acf033bcb169e19c778dd1fce66c08",
        "repo": "pcmacdon/jsish",
        "commit_url": "https://github.com/pcmacdon/jsish/commit/e70088ae62acf033bcb169e19c778dd1fce66c08",
        "files": [
          "lib/Debug.jsi",
          "md/Reference.md",
          "src/jsi.h",
          "src/jsiCmds.c",
          "src/jsiInt.h",
          "src/jsiInterp.c",
          "src/jsiUtils.c",
          "tools/protos.jsi",
          "www/reference.wiki"
        ],
        "message": "Release \"3.0.37\": debugger adds line-editing\n\nFossilOrigin-Name: 6d649cfc1fb0cd6ef578301475203b5512fe021185efd1a69ae70651c8fef253",
        "before_after_code_files": [
          "lib/Debug.jsi||lib/Debug.jsi",
          "src/jsi.h||src/jsi.h",
          "src/jsiCmds.c||src/jsiCmds.c",
          "src/jsiInt.h||src/jsiInt.h",
          "src/jsiInterp.c||src/jsiInterp.c",
          "src/jsiUtils.c||src/jsiUtils.c",
          "tools/protos.jsi||tools/protos.jsi",
          "www/reference.wiki||www/reference.wiki"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/jsi.h||src/jsi.h",
            "src/jsiInt.h||src/jsiInt.h",
            "src/jsiInterp.c||src/jsiInterp.c",
            "tools/protos.jsi||tools/protos.jsi",
            "www/reference.wiki||www/reference.wiki"
          ],
          "candidate": [
            "src/jsi.h||src/jsi.h",
            "src/jsiInt.h||src/jsiInt.h",
            "src/jsiInterp.c||src/jsiInterp.c",
            "tools/protos.jsi||tools/protos.jsi",
            "www/reference.wiki||www/reference.wiki"
          ]
        }
      },
      "candidate_diff": {
        "lib/Debug.jsi||lib/Debug.jsi": [
          "File: lib/Debug.jsi -> lib/Debug.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "398:         var done = false;",
          "399:         while (!done) {",
          "402:             update(); // Handle signals.",
          "403:             if (self.stopSig) {",
          "404:                 self.stopSig = false;",
          "",
          "[Removed Lines]",
          "400:             printf(\"#%d==> \", self.curlev?self.curlev:level);",
          "401:             var inp = console.input();",
          "",
          "[Added Lines]",
          "400:             var prompt = format(\"#%d==> \", self.curlev?self.curlev:level);",
          "401:             var inp = console.input(prompt);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "436:                 case 'locals':  cmdEval('eval Info.level(0).locals', false); break;",
          "437:                 case 'next':    done=true; self.interp.conf({debugOpts:{minLevel:level}}); self.minLevel = level; break;",
          "438:                 case 'print':   cmdPrint(inlst); break;",
          "440:                 case 'step':    done=true; break;",
          "441:                 case 'tbreak':  cmdBreak(inlst,line,func,file,true); break;",
          "442:                 case 'up':      cmdLevel(inlst, true); break;",
          "",
          "[Removed Lines]",
          "439:                 case 'quit':    exit(0); break;",
          "",
          "[Added Lines]",
          "439:                 case 'quit':    console.input(null); exit(0); break;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "472:             } catch(e) {}",
          "473:         }",
          "476:         var dopts = {",
          "477:             debugOpts:{debugCallback:'callback'},",
          "478:             args:self.args,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "475:         Interp.conf({historyFile:'~/.jsish_debug'});",
          "",
          "---------------"
        ],
        "src/jsi.h||src/jsi.h": [
          "File: src/jsi.h -> src/jsi.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #define JSI_VERSION_MAJOR   3",
          "6: #define JSI_VERSION_MINOR   0",
          "9: #define JSI_VERSION (JSI_VERSION_MAJOR + ((Jsi_Number)JSI_VERSION_MINOR/100.0) + ((Jsi_Number)JSI_VERSION_RELEASE/10000.0))",
          "",
          "[Removed Lines]",
          "7: #define JSI_VERSION_RELEASE 36",
          "",
          "[Added Lines]",
          "7: #define JSI_VERSION_RELEASE 37",
          "",
          "---------------"
        ],
        "src/jsiCmds.c||src/jsiCmds.c": [
          "File: src/jsiCmds.c -> src/jsiCmds.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "19:     char buf[1024];",
          "20:     char *cp, *p = buf;",
          "21:     buf[0] = 0;",
          "22:     if (!interp->stdinStr)",
          "23:         p=fgets(buf, sizeof(buf), stdin);",
          "24:     else {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22:     Jsi_Value *v = Jsi_ValueArrayIndex(interp, args, 0);",
          "23:     if (v) {",
          "24:         if (interp->isSafe)",
          "25:             return Jsi_LogError(\"line edit not available in safe mode\");",
          "26:         if (Jsi_ValueIsNull(interp, v)) {",
          "27:             jsi_RlGetLine(interp, NULL);",
          "28:             return JSI_OK;",
          "29:         }",
          "30:         cp = Jsi_ValueString(interp, v, NULL);",
          "31:         if (cp) {",
          "32:             p  = jsi_RlGetLine(interp, cp);",
          "33:             if (p)",
          "34:                 Jsi_ValueMakeString(interp, ret, p);",
          "35:             return JSI_OK;",
          "36:         }",
          "37:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4844: static Jsi_CmdSpec consoleCmds[] = {",
          "4845:     { \"assert\", jsi_AssertCmd,      1,  3, \"expr:boolean|number|function, msg:string=void, options:object=void\",  .help=\"Same as System.assert()\", .retType=(uint)JSI_TT_VOID, .flags=0, .info=0, .opts=AssertOptions},",
          "4846:     { \"error\",  consoleErrorCmd,    1, -1, \"val, ...\", .help=\"Same as log but adding prefix ERROR:\", .retType=(uint)JSI_TT_VOID, .flags=0 },",
          "4848:     { \"log\",    consoleLogCmd,      1, -1, \"val, ...\", .help=\"Like System.puts, but goes to stderr and includes file:line.\", .retType=(uint)JSI_TT_VOID, .flags=0 },",
          "4849:     { \"logp\",   consoleLogPCmd,     1, -1, \"val, ...\", .help=\"Same as console.log, but first arg is string prefix and if second is a boolean it controls output\", .retType=(uint)JSI_TT_VOID, .flags=0 },",
          "4850:     { \"printf\", consolePrintfCmd,   1, -1, \"format:string, ...\", .help=\"Same as System.printf but goes to stderr\", .retType=(uint)JSI_TT_VOID, .flags=0 },",
          "",
          "[Removed Lines]",
          "4847:     { \"input\",  consoleInputCmd,    0,  0, \"\", .help=\"Read input from the console\", .retType=(uint)JSI_TT_STRING|JSI_TT_VOID },",
          "",
          "[Added Lines]",
          "4863:     { \"input\",  consoleInputCmd,    0,  1, \"prompt:null|string=''\", .help=\"Read input from the console: if prompt uses linenoise line editing\", .retType=(uint)JSI_TT_STRING|JSI_TT_VOID },",
          "",
          "---------------"
        ],
        "src/jsiInt.h||src/jsiInt.h": [
          "File: src/jsiInt.h -> src/jsiInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1490: extern void jsi_FuncFree(Jsi_Interp *interp, Jsi_Func *func);",
          "1491: extern void jsi_ToHexStr(const uchar *indata, int dlen, char *out);",
          "1492: extern bool jsi_StrIsBalanced(char *str);",
          "1494: #ifndef _JSI_MEMCLEAR",
          "1495: #ifndef JSI_MEM_DEBUG",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1493: extern char* jsi_RlGetLine(Jsi_Interp* interp, const char *prompt);",
          "",
          "---------------"
        ],
        "src/jsiInterp.c||src/jsiInterp.c": [
          "File: src/jsiInterp.c -> src/jsiInterp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "92:     JSI_OPT(CUSTOM,Jsi_Interp, debugOpts,   .help=\"Options for debugging\", .flags=0, .custom=Jsi_Opt_SwitchSuboption, .data=InterpDebugOptions),",
          "93:     JSI_OPT(BOOL,  Jsi_Interp, interactive, .help=\"Force interactive mode. ie. ignore no_interactive flag\", jsi_IIOF),",
          "94:     JSI_OPT(BOOL,  Jsi_Interp, hasOpenSSL,  .help=\"WebSocket compiled with SSL is available\", jsi_IIOF),",
          "96:     JSI_OPT(BOOL,  Jsi_Interp, isSafe,      .help=\"Is this a safe interp (ie. with limited or no file access)\", jsi_IIOF),",
          "97:     JSI_OPT(STRKEY,Jsi_Interp, jsppChars,   .help=\"Line preprocessor when sourcing files. Line starts with first char, and either ends with it, or matches string\"),",
          "98:     JSI_OPT(FUNC,  Jsi_Interp, jsppCallback,.help=\"Command to preprocess lines that match jsppChars. Call func(interpName:string, opCnt:number)\"),",
          "",
          "[Removed Lines]",
          "95:     JSI_OPT(STRKEY,Jsi_Interp, historyFile, .help=\"In interactive mode, file to use for history (~/.jsish_history)\", jsi_IIOF),",
          "",
          "[Added Lines]",
          "95:     JSI_OPT(STRKEY,Jsi_Interp, historyFile, .help=\"For readline, file to use for history (~/.jsish_history)\", JSI_OPT_LOCKSAFE),",
          "",
          "---------------"
        ],
        "src/jsiUtils.c||src/jsiUtils.c": [
          "File: src/jsiUtils.c -> src/jsiUtils.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "890:     }",
          "891:     res = Jsi_Strdup(Jsi_DSValue(&dStr));",
          "892:     Jsi_DSFree(&dStr);",
          "893:     return res;",
          "894: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "893:     printf(\"READ: %s\\n\", res);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1224:     return rc;",
          "1225: }",
          "1227: Jsi_RC Jsi_ThisDataSet(Jsi_Interp *interp, Jsi_Value *_this, void *value)",
          "1228: {",
          "1229:     bool isNew;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1228: char* jsi_RlGetLine(Jsi_Interp* interp, const char *prompt)",
          "1229: {",
          "1230:     int istty;",
          "1231:     static int init = 0;",
          "1232:     if (interp->isSafe)",
          "1233:         return NULL;",
          "1234: #ifndef __WIN32",
          "1235:     istty = isatty(fileno(stdin));",
          "1236: #else",
          "1237:     istty = _isatty(_fileno(stdin));",
          "1238: #endif",
          "1239:     if(!prompt || (!init && interp->subOpts.noReadline == 0 && !interp->parent))",
          "1240:     {",
          "1241:         init = 1;",
          "1242:         Jsi_DString dStr = {};",
          "1243:         const char *hfile = (interp->historyFile ? interp->historyFile : \"~/.jsish_history\");",
          "1244:         const char *hist = Jsi_NormalPath(interp, hfile, &dStr);",
          "1246:         if (!prompt) {",
          "1247:             jsi_sh_stifle_history(100);",
          "1248:             jsi_sh_write_history(hist);",
          "1249:             return NULL;",
          "1250:         } else if (hist)",
          "1251:             jsi_sh_read_history(hist);",
          "1252:         Jsi_DSFree(&dStr);",
          "1253:     }",
          "1254:     return get_inputline(interp, istty, (prompt?prompt:\"$ \"));",
          "1255: }",
          "",
          "---------------"
        ],
        "tools/protos.jsi||tools/protos.jsi": [
          "File: tools/protos.jsi -> tools/protos.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "372: var console = function(cmd,args) {};",
          "373: console.prototype.assert = function(expr:boolean|number|function, msg:string=void, options:object=void):void {};",
          "374: console.prototype.error = function(val, ...):void {};",
          "376: console.prototype.log = function(val, ...):void {};",
          "377: console.prototype.logp = function(val, ...):void {};",
          "378: console.prototype.printf = function(format:string, ...):void {};",
          "",
          "[Removed Lines]",
          "375: console.prototype.input = function():string|void {};",
          "",
          "[Added Lines]",
          "375: console.prototype.input = function(prompt:null|string=''):string|void {};",
          "",
          "---------------"
        ],
        "www/reference.wiki||www/reference.wiki": [
          "File: www/reference.wiki -> www/reference.wiki",
          "--- Hunk 1 ---",
          "[Context before]",
          "626: <tr><td>debugOpts</td><td><i><a href='#debugOptsOptions'>options</a></i></td><td>Options for debugging.</td><td><i></i></td></tr>",
          "627: <tr><td>interactive</td><td><i>BOOL</i></td><td>Force interactive mode. ie. ignore no_interactive flag.</td><td><i>initOnly</i></td></tr>",
          "628: <tr><td>hasOpenSSL</td><td><i>BOOL</i></td><td>WebSocket compiled with SSL is available.</td><td><i>initOnly</i></td></tr>",
          "630: <tr><td>isSafe</td><td><i>BOOL</i></td><td>Is this a safe interp (ie. with limited or no file access).</td><td><i>initOnly</i></td></tr>",
          "631: <tr><td>jsppChars</td><td><i>STRKEY</i></td><td>Line preprocessor when sourcing files. Line starts with first char, and either ends with it, or matches string.</td><td><i></i></td></tr>",
          "632: <tr><td>jsppCallback</td><td><i>FUNC</i></td><td>Command to preprocess lines that match jsppChars. Call func(interpName:string, opCnt:number).</td><td><i></i></td></tr>",
          "",
          "[Removed Lines]",
          "629: <tr><td>historyFile</td><td><i>STRKEY</i></td><td>In interactive mode, file to use for history (~/.jsish_history).</td><td><i>initOnly</i></td></tr>",
          "",
          "[Added Lines]",
          "629: <tr><td>historyFile</td><td><i>STRKEY</i></td><td>For readline, file to use for history (~/.jsish_history).</td><td><i></i></td></tr>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1834: <tr><th>Method</th><th>Prototype</th><th>Description</th></tr>",
          "1835: <tr><td>assert</td><td>assert(expr:boolean|number|function, msg:string=void, <a href='#console.assertOptions'>options</a>:object=void):void </td><td>Same as System.assert().</td></tr>",
          "1836: <tr><td>error</td><td>error(val, ...):void </td><td>Same as log but adding prefix ERROR:.</td></tr>",
          "1838: <tr><td>log</td><td>log(val, ...):void </td><td>Like System.puts, but goes to stderr and includes file:line..</td></tr>",
          "1839: <tr><td>logp</td><td>logp(val, ...):void </td><td>Same as console.log, but first arg is string prefix and if second is a boolean it controls output.</td></tr>",
          "1840: <tr><td>printf</td><td>printf(format:string, ...):void </td><td>Same as System.printf but goes to stderr.</td></tr>",
          "",
          "[Removed Lines]",
          "1837: <tr><td>input</td><td>input():string|void </td><td>Read input from the console.</td></tr>",
          "",
          "[Added Lines]",
          "1837: <tr><td>input</td><td>input(prompt:null|string=''):string|void </td><td>Read input from the console: if prompt uses linenoise line editing.</td></tr>",
          "",
          "---------------"
        ]
      }
    }
  ]
}