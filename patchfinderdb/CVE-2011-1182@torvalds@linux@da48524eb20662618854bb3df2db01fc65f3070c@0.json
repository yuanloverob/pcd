{
  "cve_id": "CVE-2011-1182",
  "cve_desc": "kernel/signal.c in the Linux kernel before 2.6.39 allows local users to spoof the uid and pid of a signal sender via a sigqueueinfo system call.",
  "repo": "torvalds/linux",
  "patch_hash": "da48524eb20662618854bb3df2db01fc65f3070c",
  "patch_info": {
    "commit_hash": "da48524eb20662618854bb3df2db01fc65f3070c",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/da48524eb20662618854bb3df2db01fc65f3070c",
    "files": [
      "kernel/signal.c"
    ],
    "message": "Prevent rt_sigqueueinfo and rt_tgsigqueueinfo from spoofing the signal code\n\nUserland should be able to trust the pid and uid of the sender of a\nsignal if the si_code is SI_TKILL.\n\nUnfortunately, the kernel has historically allowed sigqueueinfo() to\nsend any si_code at all (as long as it was negative - to distinguish it\nfrom kernel-generated signals like SIGILL etc), so it could spoof a\nSI_TKILL with incorrect siginfo values.\n\nHappily, it looks like glibc has always set si_code to the appropriate\nSI_QUEUE, so there are probably no actual user code that ever uses\nanything but the appropriate SI_QUEUE flag.\n\nSo just tighten the check for si_code (we used to allow any negative\nvalue), and add a (one-time) warning in case there are binaries out\nthere that might depend on using other si_code values.\n\nSigned-off-by: Julien Tinnes <jln@google.com>\nAcked-by: Oleg Nesterov <oleg@redhat.com>\nSigned-off-by: Linus Torvalds <torvalds@linux-foundation.org>",
    "before_after_code_files": [
      "kernel/signal.c||kernel/signal.c"
    ]
  },
  "patch_diff": {
    "kernel/signal.c||kernel/signal.c": [
      "File: kernel/signal.c -> kernel/signal.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2421:   return -EFAULT;",
      "2426:   return -EPERM;",
      "2427:  info.si_signo = sig;",
      "",
      "[Removed Lines]",
      "2425:  if (info.si_code >= 0)",
      "",
      "[Added Lines]",
      "2426:  if (info.si_code != SI_QUEUE) {",
      "2428:   WARN_ON_ONCE(info.si_code < 0);",
      "2430:  }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "2437:   return -EINVAL;",
      "2442:   return -EPERM;",
      "2443:  info->si_signo = sig;",
      "2445:  return do_send_specific(tgid, pid, sig, info);",
      "",
      "[Removed Lines]",
      "2441:  if (info->si_code >= 0)",
      "",
      "[Added Lines]",
      "2446:  if (info->si_code != SI_QUEUE) {",
      "2448:   WARN_ON_ONCE(info->si_code < 0);",
      "2450:  }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "243b422af9ea9af4ead07a8ad54c90d4f9b6081a",
      "candidate_info": {
        "commit_hash": "243b422af9ea9af4ead07a8ad54c90d4f9b6081a",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/243b422af9ea9af4ead07a8ad54c90d4f9b6081a",
        "files": [
          "kernel/signal.c"
        ],
        "message": "Relax si_code check in rt_sigqueueinfo and rt_tgsigqueueinfo\n\nCommit da48524eb206 (\"Prevent rt_sigqueueinfo and rt_tgsigqueueinfo\nfrom spoofing the signal code\") made the check on si_code too strict.\nThere are several legitimate places where glibc wants to queue a\nnegative si_code different from SI_QUEUE:\n\n - This was first noticed with glibc's aio implementation, which wants\n   to queue a signal with si_code SI_ASYNCIO; the current kernel\n   causes glibc's tst-aio4 test to fail because rt_sigqueueinfo()\n   fails with EPERM.\n\n - Further examination of the glibc source shows that getaddrinfo_a()\n   wants to use SI_ASYNCNL (which the kernel does not even define).\n   The timer_create() fallback code wants to queue signals with SI_TIMER.\n\nAs suggested by Oleg Nesterov <oleg@redhat.com>, loosen the check to\nforbid only the problematic SI_TKILL case.\n\nReported-by: Klaus Dittrich <kladit@arcor.de>\nAcked-by: Julien Tinnes <jln@google.com>\nCc: <stable@kernel.org>\nSigned-off-by: Roland Dreier <roland@purestorage.com>\nSigned-off-by: Linus Torvalds <torvalds@linux-foundation.org>",
        "before_after_code_files": [
          "kernel/signal.c||kernel/signal.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "kernel/signal.c||kernel/signal.c"
          ],
          "candidate": [
            "kernel/signal.c||kernel/signal.c"
          ]
        }
      },
      "candidate_diff": {
        "kernel/signal.c||kernel/signal.c": [
          "File: kernel/signal.c -> kernel/signal.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2442:   WARN_ON_ONCE(info.si_code < 0);",
          "2443:   return -EPERM;",
          "",
          "[Removed Lines]",
          "2440:  if (info.si_code != SI_QUEUE) {",
          "",
          "[Added Lines]",
          "2440:  if (info.si_code >= 0 || info.si_code == SI_TKILL) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2462:   WARN_ON_ONCE(info->si_code < 0);",
          "2463:   return -EPERM;",
          "",
          "[Removed Lines]",
          "2460:  if (info->si_code != SI_QUEUE) {",
          "",
          "[Added Lines]",
          "2460:  if (info->si_code >= 0 || info->si_code == SI_TKILL) {",
          "",
          "---------------"
        ]
      }
    }
  ]
}