{
  "cve_id": "CVE-2015-0278",
  "cve_desc": "libuv before 0.10.34 does not properly drop group privileges, which allows context-dependent attackers to gain privileges via unspecified vectors.",
  "repo": "libuv/libuv",
  "patch_hash": "66ab38918c911bcff025562cf06237d7fedaba0c",
  "patch_info": {
    "commit_hash": "66ab38918c911bcff025562cf06237d7fedaba0c",
    "repo": "libuv/libuv",
    "commit_url": "https://github.com/libuv/libuv/commit/66ab38918c911bcff025562cf06237d7fedaba0c",
    "files": [
      "src/unix/process.c"
    ],
    "message": "unix: call setgoups before calling setuid/setgid\n\nPartial fix for #1093",
    "before_after_code_files": [
      "src/unix/process.c||src/unix/process.c"
    ]
  },
  "patch_diff": {
    "src/unix/process.c||src/unix/process.c": [
      "File: src/unix/process.c -> src/unix/process.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "330:     _exit(127);",
      "331:   }",
      "333:   if ((options->flags & UV_PROCESS_SETGID) && setgid(options->gid)) {",
      "334:     uv__write_int(error_fd, -errno);",
      "335:     perror(\"setgid()\");",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "333:   if (options->flags & (UV_PROCESS_SETUID | UV_PROCESS_SETGID)) {",
      "341:     SAVE_ERRNO(setgroups(0, NULL));",
      "342:   }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "8bbf469cb091776c291d2866addcee8a60357068",
      "candidate_info": {
        "commit_hash": "8bbf469cb091776c291d2866addcee8a60357068",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/8bbf469cb091776c291d2866addcee8a60357068",
        "files": [
          "test/test-udp-multicast-join6.c"
        ],
        "message": "test: fix multicast join test on OSX when using IPv6\n\nWhen choosing an IPv6 interface all low level APIs use the interface\nindex which can be gathered with if_nametoindex. Passing a 0 means to\nuse the default as per the documentation. On OSX, however, this is not\nthe case and when 0 is specified it gives EADDRNOTAVAIL error. So, we\nworkaround the test, by using the 'lo0' interface on OSX, which has an\nindex of 1.",
        "before_after_code_files": [
          "test/test-udp-multicast-join6.c||test/test-udp-multicast-join6.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/test-udp-multicast-join6.c||test/test-udp-multicast-join6.c": [
          "File: test/test-udp-multicast-join6.c -> test/test-udp-multicast-join6.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "116:   ASSERT(r == 0);",
          "119:   r = uv_udp_set_membership(&client, \"ff02::1\", NULL, UV_JOIN_GROUP);",
          "120:   ASSERT(r == 0);",
          "122:   r = uv_udp_recv_start(&client, alloc_cb, cl_recv_cb);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "119: #if defined(__APPLE__)",
          "120:   r = uv_udp_set_membership(&client, \"ff02::1\", \"::1%lo0\", UV_JOIN_GROUP);",
          "121: #else",
          "123: #endif",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2930d04e5b2d47f889290ed82bbb27c99f2dd430",
      "candidate_info": {
        "commit_hash": "2930d04e5b2d47f889290ed82bbb27c99f2dd430",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/2930d04e5b2d47f889290ed82bbb27c99f2dd430",
        "files": [
          "src/win/fs.c"
        ],
        "message": "windows: fall back for volume info query\n\nWine does not currently support FileFsVolumeInformation:\n\nhttps://github.com/mirrors/wine/blob/0e42fd97c0/dlls/ntdll/file.c#L2679\n\nSo check io_status and fall back to previous behavior if not\nimplemented.",
        "before_after_code_files": [
          "src/win/fs.c||src/win/fs.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/win/fs.c||src/win/fs.c": [
          "File: src/win/fs.c -> src/win/fs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "861:                                             FileFsVolumeInformation);",
          "865:     SetLastError(pRtlNtStatusToDosError(nt_status));",
          "866:     return -1;",
          "867:   }",
          "",
          "[Removed Lines]",
          "864:   if (NT_ERROR(nt_status)) {",
          "",
          "[Added Lines]",
          "864:   if (io_status.Status == STATUS_NOT_IMPLEMENTED) {",
          "865:     statbuf->st_dev = 0;",
          "866:   } else if (NT_ERROR(nt_status)) {",
          "869:   } else {",
          "870:     statbuf->st_dev = volume_info.VolumeSerialNumber;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "921:   statbuf->st_nlink = file_info.StandardInformation.NumberOfLinks;",
          "",
          "[Removed Lines]",
          "923:   statbuf->st_dev = volume_info.VolumeSerialNumber;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "489fb4c9725d071c9eb0665578e9beb68f1a4067",
      "candidate_info": {
        "commit_hash": "489fb4c9725d071c9eb0665578e9beb68f1a4067",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/489fb4c9725d071c9eb0665578e9beb68f1a4067",
        "files": [
          "src/win/fs.c"
        ],
        "message": "windows/fs: make uv_fs_open() report EINVAL correctly\n\nBefore, when the user passed an invalid paramter to uv_fs_open, libuv\nwould detect this and call SET_REQ_RESULT to set the result value to -1.\nSET_REQ_RESULT then stored whatever error code was returned by\nGetLastError(), which would have no relationship to the actual problem,\nand might as well be zero.",
        "before_after_code_files": [
          "src/win/fs.c||src/win/fs.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/win/fs.c||src/win/fs.c": [
          "File: src/win/fs.c -> src/win/fs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "411:     access = FILE_GENERIC_READ | FILE_GENERIC_WRITE;",
          "412:     break;",
          "413:   default:",
          "416:   }",
          "418:   if (flags & _O_APPEND) {",
          "",
          "[Removed Lines]",
          "414:     result  = -1;",
          "415:     goto end;",
          "",
          "[Added Lines]",
          "414:     goto einval;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "449:     disposition = CREATE_ALWAYS;",
          "450:     break;",
          "451:   default:",
          "454:   }",
          "456:   attributes |= FILE_ATTRIBUTE_NORMAL;",
          "",
          "[Removed Lines]",
          "452:     result = -1;",
          "453:     goto end;",
          "",
          "[Added Lines]",
          "451:     goto einval;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "479:     attributes |= FILE_FLAG_RANDOM_ACCESS;",
          "480:     break;",
          "481:   default:",
          "484:   }",
          "",
          "[Removed Lines]",
          "482:     result = -1;",
          "483:     goto end;",
          "",
          "[Added Lines]",
          "480:     goto einval;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "506:     return;",
          "507:   }",
          "508:   result = _open_osfhandle((intptr_t) file, flags);",
          "510:   SET_REQ_RESULT(req, result);",
          "511: }",
          "513: void fs__close(uv_fs_t* req) {",
          "",
          "[Removed Lines]",
          "509: end:",
          "",
          "[Added Lines]",
          "507:   return;",
          "509:  einval:",
          "510:   SET_REQ_UV_ERROR(req, UV_EINVAL, ERROR_INVALID_PARAMETER);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b460142451b144e3ff9157c5e15cbd6f2fe0312f",
      "candidate_info": {
        "commit_hash": "b460142451b144e3ff9157c5e15cbd6f2fe0312f",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/b460142451b144e3ff9157c5e15cbd6f2fe0312f",
        "files": [
          "test/benchmark-million-timers.c"
        ],
        "message": "bench: measure total/init/dispatch/cleanup times\n\n* Add finer-grained measurements to the million_timers benchmark.\n  Before this commit it only measured the total running time.\n\n* Bump the number of inserted timers from 1M to 10M.  With one million\n  timers, it finishes too quickly to get useful profiling data out of\n  it with perf or oprofile.  The name of the benchmark is now a lie but\n  such is life.",
        "before_after_code_files": [
          "test/benchmark-million-timers.c||test/benchmark-million-timers.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/benchmark-million-timers.c||test/benchmark-million-timers.c": [
          "File: test/benchmark-million-timers.c -> test/benchmark-million-timers.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: #include \"task.h\"",
          "23: #include \"uv.h\"",
          "27: static int timer_cb_called;",
          "28: static int close_cb_called;",
          "",
          "[Removed Lines]",
          "25: #define NUM_TIMERS (1000 * 1000)",
          "",
          "[Added Lines]",
          "25: #define NUM_TIMERS (10 * 1000 * 1000)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "41: BENCHMARK_IMPL(million_timers) {",
          "42:   uv_timer_t* timers;",
          "43:   uv_loop_t* loop;",
          "46:   int timeout;",
          "47:   int i;",
          "",
          "[Removed Lines]",
          "44:   uint64_t before;",
          "45:   uint64_t after;",
          "",
          "[Added Lines]",
          "44:   uint64_t before_all;",
          "45:   uint64_t before_run;",
          "46:   uint64_t after_run;",
          "47:   uint64_t after_all;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "52:   loop = uv_default_loop();",
          "53:   timeout = 0;",
          "55:   for (i = 0; i < NUM_TIMERS; i++) {",
          "56:     if (i % 1000 == 0) timeout++;",
          "57:     ASSERT(0 == uv_timer_init(loop, timers + i));",
          "58:     ASSERT(0 == uv_timer_start(timers + i, timer_cb, timeout, 0));",
          "59:   }",
          "62:   ASSERT(0 == uv_run(loop, UV_RUN_DEFAULT));",
          "65:   for (i = 0; i < NUM_TIMERS; i++)",
          "66:     uv_close((uv_handle_t*) (timers + i), close_cb);",
          "68:   ASSERT(0 == uv_run(loop, UV_RUN_DEFAULT));",
          "69:   ASSERT(timer_cb_called == NUM_TIMERS);",
          "70:   ASSERT(close_cb_called == NUM_TIMERS);",
          "71:   free(timers);",
          "75:   MAKE_VALGRIND_HAPPY();",
          "76:   return 0;",
          "",
          "[Removed Lines]",
          "61:   before = uv_hrtime();",
          "63:   after = uv_hrtime();",
          "73:   LOGF(\"%.2f seconds\\n\", (after - before) / 1e9);",
          "",
          "[Added Lines]",
          "57:   before_all = uv_hrtime();",
          "64:   before_run = uv_hrtime();",
          "66:   after_run = uv_hrtime();",
          "72:   after_all = uv_hrtime();",
          "78:   LOGF(\"%.2f seconds total\\n\", (after_all - before_all) / 1e9);",
          "79:   LOGF(\"%.2f seconds init\\n\", (before_run - before_all) / 1e9);",
          "80:   LOGF(\"%.2f seconds dispatch\\n\", (after_run - before_run) / 1e9);",
          "81:   LOGF(\"%.2f seconds cleanup\\n\", (after_all - after_run) / 1e9);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6d463bfe37e095c5dde471ae4d2109f49c3f37e0",
      "candidate_info": {
        "commit_hash": "6d463bfe37e095c5dde471ae4d2109f49c3f37e0",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/6d463bfe37e095c5dde471ae4d2109f49c3f37e0",
        "files": [
          "ChangeLog",
          "configure.ac"
        ],
        "message": "Now working on v0.11.21",
        "before_after_code_files": [
          "configure.ac||configure.ac"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "13: # OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.",
          "15: AC_PREREQ(2.57)",
          "17: AC_CONFIG_MACRO_DIR([m4])",
          "18: m4_include([m4/libuv-extra-automake-flags.m4])",
          "19: AM_INIT_AUTOMAKE([-Wall -Werror foreign subdir-objects] UV_EXTRA_AUTOMAKE_FLAGS)",
          "",
          "[Removed Lines]",
          "16: AC_INIT([libuv], [0.11.20], [https://github.com/joyent/libuv/issues])",
          "",
          "[Added Lines]",
          "16: AC_INIT([libuv], [0.11.21], [https://github.com/joyent/libuv/issues])",
          "",
          "---------------"
        ]
      }
    }
  ]
}