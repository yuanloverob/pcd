{
  "cve_id": "CVE-2016-2521",
  "cve_desc": "Untrusted search path vulnerability in the WiresharkApplication class in ui/qt/wireshark_application.cpp in Wireshark 1.12.x before 1.12.10 and 2.0.x before 2.0.2 on Windows allows local users to gain privileges via a Trojan horse riched20.dll.dll file in the current working directory, related to use of QLibrary.",
  "repo": "wireshark/wireshark",
  "patch_hash": "4a79cf2e1ab056faaddd252aa56520435b318a56",
  "patch_info": {
    "commit_hash": "4a79cf2e1ab056faaddd252aa56520435b318a56",
    "repo": "wireshark/wireshark",
    "commit_url": "https://github.com/wireshark/wireshark/commit/4a79cf2e1ab056faaddd252aa56520435b318a56",
    "files": [
      "ui/gtk/main.c",
      "ui/qt/wireshark_application.cpp"
    ],
    "message": "Switch from QLibrary to ws_load_library.\n\nFrom the comments in qlibrary_win.cpp:\n\n// We make the following attempts at locating the library:\n[ ... ]\n// Windows\n// if (absolute)\n//     fileName\n//     fileName + \".dll\"\n// else\n//     fileName + \".dll\"\n//     fileName\n\nWe were passing \"riched20.dll\" to QLibrary, which meant that it searched\nfor \"riched20.dll.dll\" first.\n\nSwitch to ws_load_library, which we use elsewhere and which has much\nsafer default behavior.\n\nChange-Id: Ic8f0cf5686c9b1856d37e76be4404d6236c076e5\nReviewed-on: https://code.wireshark.org/review/13607\nReviewed-by: Gerald Combs <gerald@wireshark.org>\nPetri-Dish: Gerald Combs <gerald@wireshark.org>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Michael Mann <mmann78@netscape.net>",
    "before_after_code_files": [
      "ui/gtk/main.c||ui/gtk/main.c",
      "ui/qt/wireshark_application.cpp||ui/qt/wireshark_application.cpp"
    ]
  },
  "patch_diff": {
    "ui/gtk/main.c||ui/gtk/main.c": [
      "File: ui/gtk/main.c -> ui/gtk/main.c"
    ],
    "ui/qt/wireshark_application.cpp||ui/qt/wireshark_application.cpp": [
      "File: ui/qt/wireshark_application.cpp -> ui/qt/wireshark_application.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "65: #include \"ui/software_update.h\"",
      "66: #include \"ui/last_open_dir.h\"",
      "67: #include \"ui/recent_utils.h\"",
      "70: #ifdef _WIN32",
      "71: #  include \"ui/win32/console_win32.h\"",
      "74: #include <QAction>",
      "",
      "[Removed Lines]",
      "68: #include <wsutil/utf8_entities.h>",
      "",
      "[Added Lines]",
      "69: #include \"wsutil/utf8_entities.h\"",
      "73: #  include \"wsutil/file_util.h\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "85: #include <QUrl>",
      "86: #include <QColorDialog>",
      "93: #ifdef _MSC_VER",
      "94: #pragma warning(pop)",
      "95: #endif",
      "",
      "[Removed Lines]",
      "88: #ifdef Q_OS_WIN",
      "89: #include <QDebug>",
      "90: #include <QLibrary>",
      "91: #endif",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "559: #ifdef Q_OS_WIN",
      "568: #endif // Q_OS_WIN",
      "570: #if (QT_VERSION >= QT_VERSION_CHECK(5, 1, 0))",
      "",
      "[Removed Lines]",
      "561:     if (QLibrary::isLibrary(\"riched20.dll\")) {",
      "562:         QLibrary riched20(\"riched20.dll\");",
      "563:         riched20.load();",
      "564:         if (!riched20.isLoaded()) {",
      "565:             qDebug() << riched20.errorString();",
      "566:         }",
      "567:     }",
      "",
      "[Added Lines]",
      "558:     ws_load_library(\"riched20.dll\");",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "f8d67cf1faec8cec8a9612307d8fac750e87e3af",
      "candidate_info": {
        "commit_hash": "f8d67cf1faec8cec8a9612307d8fac750e87e3af",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/f8d67cf1faec8cec8a9612307d8fac750e87e3af",
        "files": [
          "ui/gtk/main.c",
          "ui/qt/wireshark_application.cpp"
        ],
        "message": "Switch from QLibrary to ws_load_library.\n\nFrom the comments in qlibrary_win.cpp:\n\n// We make the following attempts at locating the library:\n[ ... ]\n// Windows\n// if (absolute)\n//     fileName\n//     fileName + \".dll\"\n// else\n//     fileName + \".dll\"\n//     fileName\n\nWe were passing \"riched20.dll\" to QLibrary, which meant that it searched\nfor \"riched20.dll.dll\" first.\n\nSwitch to ws_load_library, which we use elsewhere and which has much\nsafer default behavior.\n\nConflicts:\n\tui/qt/wireshark_application.cpp\n\nChange-Id: Ic8f0cf5686c9b1856d37e76be4404d6236c076e5\nReviewed-on: https://code.wireshark.org/review/13607\nReviewed-by: Gerald Combs <gerald@wireshark.org>\nPetri-Dish: Gerald Combs <gerald@wireshark.org>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Michael Mann <mmann78@netscape.net>\n(cherry picked from commit 4a79cf2e1ab056faaddd252aa56520435b318a56)\nReviewed-on: https://code.wireshark.org/review/13656\n(cherry picked from commit b33f4c8c610e469b456b089c407b5b55ce4ab1ec)\nReviewed-on: https://code.wireshark.org/review/13747",
        "before_after_code_files": [
          "ui/gtk/main.c||ui/gtk/main.c",
          "ui/qt/wireshark_application.cpp||ui/qt/wireshark_application.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "ui/gtk/main.c||ui/gtk/main.c",
            "ui/qt/wireshark_application.cpp||ui/qt/wireshark_application.cpp"
          ],
          "candidate": [
            "ui/gtk/main.c||ui/gtk/main.c",
            "ui/qt/wireshark_application.cpp||ui/qt/wireshark_application.cpp"
          ]
        }
      },
      "candidate_diff": {
        "ui/gtk/main.c||ui/gtk/main.c": [
          "File: ui/gtk/main.c -> ui/gtk/main.c"
        ],
        "ui/qt/wireshark_application.cpp||ui/qt/wireshark_application.cpp": [
          "File: ui/qt/wireshark_application.cpp -> ui/qt/wireshark_application.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "49: #ifdef _WIN32",
          "50: #  include \"ui/win32/console_win32.h\"",
          "53: #include <QDesktopServices>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "51: #  include \"wsutil/file_util.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "58: #include <QTimer>",
          "59: #include <QUrl>",
          "66: WiresharkApplication *wsApp = NULL;",
          "",
          "[Removed Lines]",
          "61: #ifdef Q_OS_WIN",
          "62: #include <QDebug>",
          "63: #include <QLibrary>",
          "64: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "572: #ifdef Q_OS_WIN",
          "581: #endif // Q_OS_WIN",
          "583:     setAttribute(Qt::AA_DontShowIconsInMenus, true);",
          "",
          "[Removed Lines]",
          "574:     if (QLibrary::isLibrary(\"riched20.dll\")) {",
          "575:         QLibrary riched20(\"riched20.dll\");",
          "576:         riched20.load();",
          "577:         if (!riched20.isLoaded()) {",
          "578:             qDebug() << riched20.errorString();",
          "579:         }",
          "580:     }",
          "",
          "[Added Lines]",
          "570:     ws_load_library(\"riched20.dll\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b33f4c8c610e469b456b089c407b5b55ce4ab1ec",
      "candidate_info": {
        "commit_hash": "b33f4c8c610e469b456b089c407b5b55ce4ab1ec",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/b33f4c8c610e469b456b089c407b5b55ce4ab1ec",
        "files": [
          "ui/gtk/main.c",
          "ui/qt/wireshark_application.cpp"
        ],
        "message": "Switch from QLibrary to ws_load_library.\n\nFrom the comments in qlibrary_win.cpp:\n\n// We make the following attempts at locating the library:\n[ ... ]\n// Windows\n// if (absolute)\n//     fileName\n//     fileName + \".dll\"\n// else\n//     fileName + \".dll\"\n//     fileName\n\nWe were passing \"riched20.dll\" to QLibrary, which meant that it searched\nfor \"riched20.dll.dll\" first.\n\nSwitch to ws_load_library, which we use elsewhere and which has much\nsafer default behavior.\n\nConflicts:\n\tui/qt/wireshark_application.cpp\n\nChange-Id: Ic8f0cf5686c9b1856d37e76be4404d6236c076e5\nReviewed-on: https://code.wireshark.org/review/13607\nReviewed-by: Gerald Combs <gerald@wireshark.org>\nPetri-Dish: Gerald Combs <gerald@wireshark.org>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Michael Mann <mmann78@netscape.net>\n(cherry picked from commit 4a79cf2e1ab056faaddd252aa56520435b318a56)\nReviewed-on: https://code.wireshark.org/review/13656",
        "before_after_code_files": [
          "ui/gtk/main.c||ui/gtk/main.c",
          "ui/qt/wireshark_application.cpp||ui/qt/wireshark_application.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "ui/gtk/main.c||ui/gtk/main.c",
            "ui/qt/wireshark_application.cpp||ui/qt/wireshark_application.cpp"
          ],
          "candidate": [
            "ui/gtk/main.c||ui/gtk/main.c",
            "ui/qt/wireshark_application.cpp||ui/qt/wireshark_application.cpp"
          ]
        }
      },
      "candidate_diff": {
        "ui/gtk/main.c||ui/gtk/main.c": [
          "File: ui/gtk/main.c -> ui/gtk/main.c"
        ],
        "ui/qt/wireshark_application.cpp||ui/qt/wireshark_application.cpp": [
          "File: ui/qt/wireshark_application.cpp -> ui/qt/wireshark_application.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "57: #include \"ui/software_update.h\"",
          "58: #include \"ui/last_open_dir.h\"",
          "59: #include \"ui/recent_utils.h\"",
          "62: #ifdef _WIN32",
          "63: #  include \"ui/win32/console_win32.h\"",
          "66: #include <QAction>",
          "",
          "[Removed Lines]",
          "60: #include <wsutil/utf8_entities.h>",
          "",
          "[Added Lines]",
          "61: #include \"wsutil/utf8_entities.h\"",
          "65: #  include \"wsutil/file_util.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "77: #include <QUrl>",
          "78: #include <QColorDialog>",
          "85: WiresharkApplication *wsApp = NULL;",
          "",
          "[Removed Lines]",
          "80: #ifdef Q_OS_WIN",
          "81: #include <QDebug>",
          "82: #include <QLibrary>",
          "83: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "538: #ifdef Q_OS_WIN",
          "547: #endif // Q_OS_WIN",
          "549: #if (QT_VERSION >= QT_VERSION_CHECK(5, 1, 0))",
          "",
          "[Removed Lines]",
          "540:     if (QLibrary::isLibrary(\"riched20.dll\")) {",
          "541:         QLibrary riched20(\"riched20.dll\");",
          "542:         riched20.load();",
          "543:         if (!riched20.isLoaded()) {",
          "544:             qDebug() << riched20.errorString();",
          "545:         }",
          "546:     }",
          "",
          "[Added Lines]",
          "537:     ws_load_library(\"riched20.dll\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b05803db4b7079307565e423a8caf828949add49",
      "candidate_info": {
        "commit_hash": "b05803db4b7079307565e423a8caf828949add49",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/b05803db4b7079307565e423a8caf828949add49",
        "files": [
          "CMakeLists.txt",
          "capchild/CMakeLists.txt",
          "caputils/CMakeLists.txt",
          "echld/CMakeLists.txt",
          "epan/CMakeLists.txt",
          "epan/dissectors/dcerpc/CMakeLists.txt",
          "plugins/docsis/CMakeLists.txt",
          "plugins/ethercat/CMakeLists.txt",
          "plugins/gryphon/CMakeLists.txt",
          "plugins/irda/CMakeLists.txt",
          "plugins/m2m/CMakeLists.txt",
          "plugins/mate/CMakeLists.txt",
          "plugins/opcua/CMakeLists.txt",
          "plugins/profinet/CMakeLists.txt",
          "plugins/stats_tree/CMakeLists.txt",
          "plugins/tpg/CMakeLists.txt",
          "plugins/unistim/CMakeLists.txt",
          "plugins/wimax/CMakeLists.txt",
          "plugins/wimaxasncp/CMakeLists.txt",
          "plugins/wimaxmacphy/CMakeLists.txt",
          "tools/lemon/CMakeLists.txt",
          "ui/CMakeLists.txt",
          "ui/gtk/CMakeLists.txt",
          "ui/qt/CMakeLists.txt",
          "ui/qt/rpc_service_response_time_dialog.cpp",
          "ui/qt/wireshark_application.cpp",
          "wiretap/CMakeLists.txt",
          "wsutil/CMakeLists.txt"
        ],
        "message": "CMake: Add /WX\n\nAdd \"/WX\" to the Visual C++ compiler flags if DISABLE_WERROR is off,\nsimilar to config.nmake.\n\nWe haven't compiled C++ code with -Wshorten-64-to-32 for quite \nsome time so there's no need to add -Wno-shorten-64-to-32 in\nui/qt/CMakeLists.txt.\n\nAdditionally, squelch\n\n----\nC:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\algorithm(3050) : warning C4267: 'argument' : conversion from 'size_t' to 'int', possible loss of data (.\\rpc_service_response_time_dialog.cpp)\n        C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\algorithm(3065) : see reference to function template instantiation 'void std::_Median<_RanIt,bool(__cdecl *)(const QString &,const QString &)>(_RanIt,_RanIt,_RanIt,_Pr)' being compiled\n        with\n        [\n            _RanIt=QList<QString>::iterator\n,            _Pr=bool (__cdecl *)(const QString &,const QString &)\n        ]\n        C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\algorithm(3127) : see reference to function template instantiation 'std::pair<_RanIt,_RanIt> std::_Unguarded_partition<_RanIt,bool(__cdecl *)(const QString &,const QString &)>(_RanIt,_RanIt,_Pr)' being compiled\n        with\n        [\n            _RanIt=QList<QString>::iterator\n,            _Pr=bool (__cdecl *)(const QString &,const QString &)\n        ]\n        C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\algorithm(3157) : see reference to function template instantiation 'void std::_Sort<_Iter,int,bool(__cdecl *)(const QString &,const QString &)>(_RanIt,_RanIt,_Diff,_Pr)' being compiled\n        with\n        [\n            _Iter=QList<QString>::iterator\n,            _RanIt=QList<QString>::iterator\n,            _Diff=int\n,            _Pr=bool (__cdecl *)(const QString &,const QString &)\n        ]\n        .\\rpc_service_response_time_dialog.cpp(130) : see reference to function template instantiation 'void std::sort<QList<QString>::iterator,bool(__cdecl *)(const QString &,const QString &)>(_RanIt,_RanIt,_Pr)' being compiled\n        with\n        [\n            _RanIt=QList<QString>::iterator\n,            _Pr=bool (__cdecl *)(const QString &,const QString &)\n        ]\nC:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\algorithm(3051) : warning C4267: 'argument' : conversion from 'size_t' to 'int', possible loss of data (.\\rpc_service_response_time_dialog.cpp)\nC:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\algorithm(3052) : warning C4267: 'argument' : conversion from 'size_t' to 'int', possible loss of data (.\\rpc_service_response_time_dialog.cpp)\nC:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\algorithm(3053) : warning C4267: 'argument' : conversion from 'size_t' to 'int', possible loss of data (.\\rpc_service_response_time_dialog.cpp)\n----\n\nin both rpc_service_response_time_dialog.cpp and wireshark_application.cpp\nso that we'll compile successfully.\n\nChange-Id: I457bcede99dcb1f3c1001f1f559c4901bb000357\nReviewed-on: https://code.wireshark.org/review/10533\nPetri-Dish: Gerald Combs <gerald@wireshark.org>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Gerald Combs <gerald@wireshark.org>",
        "before_after_code_files": [
          "ui/qt/rpc_service_response_time_dialog.cpp||ui/qt/rpc_service_response_time_dialog.cpp",
          "ui/qt/wireshark_application.cpp||ui/qt/wireshark_application.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ui/qt/wireshark_application.cpp||ui/qt/wireshark_application.cpp"
          ],
          "candidate": [
            "ui/qt/wireshark_application.cpp||ui/qt/wireshark_application.cpp"
          ]
        }
      },
      "candidate_diff": {
        "ui/qt/rpc_service_response_time_dialog.cpp||ui/qt/rpc_service_response_time_dialog.cpp": [
          "File: ui/qt/rpc_service_response_time_dialog.cpp -> ui/qt/rpc_service_response_time_dialog.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: #include \"rpc_service_response_time_dialog.h\"",
          "24: #include <algorithm>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23: #ifdef _MSC_VER",
          "24: #pragma warning(push)",
          "25: #pragma warning(disable : 4267)",
          "26: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "35: #include <QHBoxLayout>",
          "36: #include <QLabel>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "44: #ifdef _MSC_VER",
          "45: #pragma warning(pop)",
          "46: #endif",
          "",
          "---------------"
        ],
        "ui/qt/wireshark_application.cpp||ui/qt/wireshark_application.cpp": [
          "File: ui/qt/wireshark_application.cpp -> ui/qt/wireshark_application.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: #include \"wireshark_application.h\"",
          "24: #include <algorithm>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23: #ifdef _MSC_VER",
          "24: #pragma warning(push)",
          "25: #pragma warning(disable : 4267)",
          "26: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "81: #include <QLibrary>",
          "82: #endif",
          "84: WiresharkApplication *wsApp = NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "90: #ifdef _MSC_VER",
          "91: #pragma warning(pop)",
          "92: #endif",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bfe73e3ad7162830c222a5b0d73433a72324baa5",
      "candidate_info": {
        "commit_hash": "bfe73e3ad7162830c222a5b0d73433a72324baa5",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/bfe73e3ad7162830c222a5b0d73433a72324baa5",
        "files": [
          "ui/qt/wireshark_application.cpp",
          "ui/qt/wireshark_application.h",
          "ui/recent.c",
          "ui/recent.h",
          "wireshark-qt.cpp"
        ],
        "message": "Qt: save custom colors in recent_common file\n\nThis allows to save colors across sessions for systems other than\nOSX that do not provide a system wide color picker\n\nWhile we are at it, let's stop reading the recent file twice at startup\n\nBug: 11888\nChange-Id: I69ff14d699d8111fe6a8bdac0157fcd115a60c2b\nReviewed-on: https://code.wireshark.org/review/12659\nReviewed-by: Pascal Quantin <pascal.quantin@gmail.com>\nPetri-Dish: Pascal Quantin <pascal.quantin@gmail.com>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Stig Bj\u00f8rlykke <stig@bjorlykke.org>",
        "before_after_code_files": [
          "ui/qt/wireshark_application.cpp||ui/qt/wireshark_application.cpp",
          "ui/qt/wireshark_application.h||ui/qt/wireshark_application.h",
          "ui/recent.c||ui/recent.c",
          "ui/recent.h||ui/recent.h",
          "wireshark-qt.cpp||wireshark-qt.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ui/qt/wireshark_application.cpp||ui/qt/wireshark_application.cpp"
          ],
          "candidate": [
            "ui/qt/wireshark_application.cpp||ui/qt/wireshark_application.cpp"
          ]
        }
      },
      "candidate_diff": {
        "ui/qt/wireshark_application.cpp||ui/qt/wireshark_application.cpp": [
          "File: ui/qt/wireshark_application.cpp -> ui/qt/wireshark_application.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "81: #include <QSocketNotifier>",
          "82: #include <QThread>",
          "83: #include <QUrl>",
          "85: #ifdef Q_OS_WIN",
          "86: #include <QDebug>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "84: #include <QColorDialog>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "407:     return title_parts.join(window_title_separator_);",
          "408: }",
          "410: void WiresharkApplication::setLastOpenDir(const char *dir_name)",
          "411: {",
          "412:     qint64 len;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "411: void WiresharkApplication::applyCustomColorsFromRecent()",
          "412: {",
          "413:     int i = 0;",
          "414:     bool ok;",
          "415:     for (GList *custom_color = recent.custom_colors; custom_color; custom_color = custom_color->next) {",
          "416:         QRgb rgb = QString((const char *)custom_color->data).toUInt(&ok, 16);",
          "417:         if (ok) {",
          "418: #if QT_VERSION < QT_VERSION_CHECK(5, 0, 0)",
          "419:             QColorDialog::setCustomColor(i++, rgb);",
          "420: #else",
          "421:             QColorDialog::setCustomColor(i++, QColor(rgb));",
          "422: #endif",
          "423:         }",
          "424:     }",
          "425: }",
          "427: void WiresharkApplication::storeCustomColorsInRecent()",
          "428: {",
          "429:     if (QColorDialog::customCount()) {",
          "430:         prefs_clear_string_list(recent.custom_colors);",
          "431:         recent.custom_colors = NULL;",
          "432:         for (int i = 0; i < QColorDialog::customCount(); i++) {",
          "433: #if QT_VERSION < QT_VERSION_CHECK(5, 0, 0)",
          "434:             QRgb rgb = QColorDialog::customColor(i);",
          "435: #else",
          "436:             QRgb rgb = QColorDialog::customColor(i).rgb();",
          "437: #endif",
          "438:             recent.custom_colors = g_list_append(recent.custom_colors, g_strdup_printf(\"%08x\", rgb));",
          "439:         }",
          "440:     }",
          "441: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "470: void WiresharkApplication::cleanup()",
          "471: {",
          "472:     software_update_cleanup();",
          "474:     write_profile_recent();",
          "475:     write_recent();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "506:     storeCustomColorsInRecent();",
          "",
          "---------------"
        ],
        "ui/qt/wireshark_application.h||ui/qt/wireshark_application.h": [
          "File: ui/qt/wireshark_application.h -> ui/qt/wireshark_application.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "111:     const QString &windowTitleSeparator() const { return window_title_separator_; }",
          "112:     const QString windowTitleString(QStringList title_parts);",
          "113:     const QString windowTitleString(QString title_part) { return windowTitleString(QStringList() << title_part); }",
          "115:     QTranslator translator;",
          "116:     QTranslator translatorQt;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "114:     void applyCustomColorsFromRecent();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "130:     static QString window_title_separator_;",
          "131:     QList<AppSignal> app_signals_;",
          "132:     int active_captures_;",
          "134: protected:",
          "135:     bool event(QEvent *event);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "134:     void storeCustomColorsInRecent();",
          "",
          "---------------"
        ],
        "ui/recent.c||ui/recent.c": [
          "File: ui/recent.c -> ui/recent.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "71: #define RECENT_GUI_CONVERSATION_TABS          \"gui.conversation_tabs\"",
          "72: #define RECENT_GUI_ENDPOINT_TABS              \"gui.endpoint_tabs\"",
          "73: #define RECENT_GUI_RLC_PDUS_FROM_MAC_FRAMES   \"gui.rlc_pdus_from_mac_frames\"",
          "75: #define RECENT_GUI_GEOMETRY                   \"gui.geom.\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "74: #define RECENT_GUI_CUSTOM_COLORS              \"gui.custom_colors\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "588:   char        *pf_dir_path;",
          "589:   char        *rf_path;",
          "590:   FILE        *rf;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "592:   char        *string_list;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "690:   window_geom_recent_write_all(rf);",
          "692:   fclose(rf);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "694:   fprintf(rf, \"\\n# Custom colors.\\n\");",
          "695:   fprintf(rf, \"# List of custom colors selected in Qt color picker.\\n\");",
          "696:   string_list = join_string_list(recent.custom_colors);",
          "697:   fprintf(rf, RECENT_GUI_CUSTOM_COLORS \": %s\\n\", string_list);",
          "698:   g_free(string_list);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "929:     parse_recent_boolean(value, &recent.privs_warn_if_elevated);",
          "930:   } else if (strcmp(key, RECENT_KEY_PRIVS_WARN_IF_NO_NPF) == 0) {",
          "931:     parse_recent_boolean(value, &recent.privs_warn_if_no_npf);",
          "932:   }",
          "934:   return PREFS_SET_OK;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "940:   } else if (strcmp(key, RECENT_GUI_CUSTOM_COLORS) == 0) {",
          "941:     recent.custom_colors = prefs_get_string_list(value);",
          "",
          "---------------"
        ],
        "ui/recent.h||ui/recent.h": [
          "File: ui/recent.h -> ui/recent.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "104:     gboolean    gui_rlc_use_pdus_from_mac;",
          "105: } recent_settings_t;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "105:     GList      *custom_colors;",
          "",
          "---------------"
        ],
        "wireshark-qt.cpp||wireshark-qt.cpp": [
          "File: wireshark-qt.cpp -> wireshark-qt.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "758:                       rf_path, g_strerror(rf_open_errno));",
          "759:         g_free(rf_path);",
          "760:     }",
          "763:     read_language_prefs();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "758:     wsApp->applyCustomColorsFromRecent();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "791:     if (recent.gui_fileopen_remembered_dir &&",
          "792:         test_for_directory(recent.gui_fileopen_remembered_dir) == EISDIR) {",
          "793:       wsApp->setLastOpenDir(recent.gui_fileopen_remembered_dir);",
          "",
          "[Removed Lines]",
          "784:     if (!recent_read_profile_static(&rf_path, &rf_open_errno)) {",
          "785:       simple_dialog(ESD_TYPE_WARN, ESD_BTN_OK,",
          "786:             \"Could not open recent file\\n\\\"%s\\\": %s.\",",
          "787:             rf_path, g_strerror(rf_open_errno));",
          "788:       g_free(rf_path);",
          "789:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}