{
  "cve_id": "CVE-2019-19923",
  "cve_desc": "flattenSubquery in select.c in SQLite 3.30.1 mishandles certain uses of SELECT DISTINCT involving a LEFT JOIN in which the right-hand side is a view. This can cause a NULL pointer dereference (or incorrect results).",
  "repo": "sqlite/sqlite",
  "patch_hash": "396afe6f6aa90a31303c183e11b2b2d4b7956b35",
  "patch_info": {
    "commit_hash": "396afe6f6aa90a31303c183e11b2b2d4b7956b35",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/396afe6f6aa90a31303c183e11b2b2d4b7956b35",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/join.test"
    ],
    "message": "Continue to back away from the LEFT JOIN optimization of check-in [41c27bc0ff1d3135] by disallowing query flattening if the outer query is DISTINCT.  Without this fix, if an index scan is run on the table within the view on the right-hand side of the LEFT JOIN, stale result registers might be accessed yielding incorrect results, and/or an OP_IfNullRow opcode might be invoked on the un-opened table, resulting in a NULL-pointer dereference.  This problem was found by the Yongheng and Rui fuzzer.\n\nFossilOrigin-Name: 862974312edf00e9d1068115d1a39b7235b7db68b6d86b81d38a12f025a4748e",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/join.test||test/join.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 289158aa24b066c453d2bce4bc2dead1c56fb0b23c3f7c4810b34b13627cef34",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3797:   if( (pSubitem->fg.jointype & JT_OUTER)!=0 ){",
      "3798:     isLeftJoin = 1;",
      "3801:       return 0;",
      "3802:     }",
      "3803:   }",
      "",
      "[Removed Lines]",
      "3799:     if( pSubSrc->nSrc>1 || isAgg || IsVirtual(pSubSrc->a[0].pTab) ){",
      "",
      "[Added Lines]",
      "3804:     ){",
      "",
      "---------------"
    ],
    "test/join.test||test/join.test": [
      "File: test/join.test -> test/join.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "975:   SELECT 24, * FROM t1 LEFT JOIN t0 ON +aa ISNULL;",
      "976: } {13 1 {} 14 1 {} 23 1 {} 24 1 {}}",
      "978: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "978: # 2019-12-18 problem with a LEFT JOIN where the RHS is a view.",
      "979: # Detected by Yongheng and Rui.",
      "980: # Follows from the optimization attempt of check-in 41c27bc0ff1d3135",
      "981: # on 2017-04-18",
      "982: #",
      "983: reset_db",
      "984: do_execsql_test join-22.10 {",
      "985:   CREATE TABLE t0(a, b);",
      "986:   CREATE INDEX t0a ON t0(a);",
      "987:   INSERT INTO t0 VALUES(10,10),(10,11),(10,12);",
      "988:   SELECT DISTINCT c FROM t0 LEFT JOIN (SELECT a+1 AS c FROM t0) ORDER BY c ;",
      "989: } {11}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "491b6d897df09229cfa425d60ba095c1bd81c95f",
      "candidate_info": {
        "commit_hash": "491b6d897df09229cfa425d60ba095c1bd81c95f",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/491b6d897df09229cfa425d60ba095c1bd81c95f",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/select.c"
        ],
        "message": "Make sure the column name flags are restored correctly after an error inside of sqlite3ResultSetOfSelect().\n\nFossilOrigin-Name: b1601db7adba2dccd4f90fbbe5099c801a2b0d97af087fbe82ed98d05496b38c",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/select.c||src/select.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/select.c||src/select.c"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/select.c||src/select.c"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: db4b4c2c1e9f1adacfb1b2fedb717a4d8bb0a299c3b11835404a99fcd67bf24b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2089:   db->flags &= ~(u64)SQLITE_FullColNames;",
          "2090:   db->flags |= SQLITE_ShortColNames;",
          "2091:   sqlite3SelectPrep(pParse, pSelect, 0);",
          "2092:   if( pParse->nErr ) return 0;",
          "2093:   while( pSelect->pPrior ) pSelect = pSelect->pPrior;",
          "2095:   pTab = sqlite3DbMallocZero(db, sizeof(Table) );",
          "2096:   if( pTab==0 ){",
          "2097:     return 0;",
          "",
          "[Removed Lines]",
          "2094:   db->flags = savedFlags;",
          "",
          "[Added Lines]",
          "2092:   db->flags = savedFlags;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e0ae3f69ebae948bf2eadb1b015e75bfb0f3cecc",
      "candidate_info": {
        "commit_hash": "e0ae3f69ebae948bf2eadb1b015e75bfb0f3cecc",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e0ae3f69ebae948bf2eadb1b015e75bfb0f3cecc",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "test/window9.test"
        ],
        "message": "Fix a bug in the linked-list handling code added by commit [fd7316cd].\n\nFossilOrigin-Name: 05080344dceafcfb670fbf01f7d69a1d713a54b6845f968a9cfe941fb53b13af",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "test/window9.test||test/window9.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 25fec62ac5a23382a54eee78d3705885eb4065826d7e8da098816d03ae9dc639",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1330:     Window *pWin = pExpr->y.pWin;",
          "1331:     assert( pWin );",
          "1332:     assert( IsWindowFunc(pExpr) );",
          "1333:     if( pSelect->pWin ){",
          "1335:       pSelect->pWin->ppThis = &pWin->pNextWin;",
          "1336:     }",
          "1337:     pWin->pNextWin = pSelect->pWin;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1333:     assert( pWin->ppThis==0 );",
          "",
          "---------------"
        ],
        "test/window9.test||test/window9.test": [
          "File: test/window9.test -> test/window9.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "121:   ) OVER (ORDER BY a);",
          "122: } {1 {near \"OVER\": syntax error}}",
          "125: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "124: do_catchsql_test 3.4 {",
          "125:   SELECT y, y+1, y+2 FROM (",
          "126:       SELECT c IN (",
          "127:         SELECT min(a) OVER (),",
          "128:         (abs(row_number() OVER())+22)/19,",
          "129:         max(a) OVER () FROM t1",
          "130:         ) AS y FROM t2",
          "131:       );",
          "132: } {1 {sub-select returns 3 columns - expected 1}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b92d7d264ea0b811267a91b0ece3e7170bd57d6a",
      "candidate_info": {
        "commit_hash": "b92d7d264ea0b811267a91b0ece3e7170bd57d6a",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/b92d7d264ea0b811267a91b0ece3e7170bd57d6a",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/wal.c"
        ],
        "message": "Add a defense-in-depth NEVER() test to the WAL cleanup code.\n\nFossilOrigin-Name: 8d3af2010f4f652865f5c0d18e3bc793de05f8e75e75cc77786f61004b2ad28f",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/wal.c||src/wal.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 39225cc77579896214dceb93b7f224b4b3bc95b3505a2e19b41b0b18b184fbc4",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/wal.c||src/wal.c": [
          "File: src/wal.c -> src/wal.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1001:   assert( pWal->nWiData>walFramePage(pWal->hdr.mxFrame) );",
          "1002:   assert( pWal->apWiData[walFramePage(pWal->hdr.mxFrame)] );",
          "",
          "[Removed Lines]",
          "1003:   walHashGet(pWal, walFramePage(pWal->hdr.mxFrame), &sLoc);",
          "",
          "[Added Lines]",
          "1004:   rc = walHashGet(pWal, walFramePage(pWal->hdr.mxFrame), &sLoc);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6117a17323148469048563ff740c8ee4eb9ffaa3",
      "candidate_info": {
        "commit_hash": "6117a17323148469048563ff740c8ee4eb9ffaa3",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/6117a17323148469048563ff740c8ee4eb9ffaa3",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/affinity2.test"
        ],
        "message": "Avoid running a couple of tests in affinity2.test as part of the valgrind permutations, as the way floating point computations are simulated by valgrind causes them to fail.\n\nFossilOrigin-Name: 7f9a4b6015ac332a04d3e394a6b3210fc95253d8786a261178a5639cb8d9d987",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/affinity2.test||test/affinity2.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: a561a656ff50efc0103da3988626cea3ef05757403b83960f2aa6c0a48c2765e",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/affinity2.test||test/affinity2.test": [
          "File: test/affinity2.test -> test/affinity2.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "119: # 2019-08-30 ticket https://www.sqlite.org/src/info/40812aea1fde9594",
          "120: #",
          "131: finish_test",
          "",
          "[Removed Lines]",
          "121: do_execsql_test 600 {",
          "122:   DROP TABLE IF EXISTS t0;",
          "123:   CREATE TABLE t0(c0 REAL UNIQUE);",
          "124:   INSERT INTO t0(c0) VALUES (3175546974276630385);",
          "125:   SELECT 3175546974276630385 < c0 FROM t0;",
          "126: } {1}",
          "127: do_execsql_test 601 {",
          "128:   SELECT 1 FROM t0 WHERE 3175546974276630385 < c0;",
          "129: } {1}",
          "",
          "[Added Lines]",
          "121: # Due to some differences in floating point computations, these tests do not",
          "122: # work under valgrind.",
          "123: #",
          "124: if {![info exists ::G(valgrind)]} {",
          "125:   do_execsql_test 600 {",
          "126:     DROP TABLE IF EXISTS t0;",
          "127:     CREATE TABLE t0(c0 REAL UNIQUE);",
          "128:     INSERT INTO t0(c0) VALUES (3175546974276630385);",
          "129:     SELECT 3175546974276630385 < c0 FROM t0;",
          "130:   } {1}",
          "131:   do_execsql_test 601 {",
          "132:     SELECT 1 FROM t0 WHERE 3175546974276630385 < c0;",
          "133:   } {1}",
          "134: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f72a97925d6a382a58cef98510c8bc430e91ee25",
      "candidate_info": {
        "commit_hash": "f72a97925d6a382a58cef98510c8bc430e91ee25",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/f72a97925d6a382a58cef98510c8bc430e91ee25",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/fuzzdata8.db"
        ],
        "message": "Add new test cases to test/fuzzdata8.db\n\nFossilOrigin-Name: f908cd40b275a5753d5167ebb25871300381687adcb3a7fcb1f14b57a20ee3d0",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 1e16d3e8fc60d39ca3899759ff15d355fdd7d3e23b325d8d2b0f954e11ce8dce",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}