{
  "cve_id": "CVE-2022-2549",
  "cve_desc": "NULL Pointer Dereference in GitHub repository gpac/gpac prior to v2.1.0-DEV.",
  "repo": "gpac/gpac",
  "patch_hash": "0102c5d4db7fdbf08b5b591b2a6264de33867a07",
  "patch_info": {
    "commit_hash": "0102c5d4db7fdbf08b5b591b2a6264de33867a07",
    "repo": "gpac/gpac",
    "commit_url": "https://github.com/gpac/gpac/commit/0102c5d4db7fdbf08b5b591b2a6264de33867a07",
    "files": [
      "src/scene_manager/scene_dump.c"
    ],
    "message": "fixed #2232",
    "before_after_code_files": [
      "src/scene_manager/scene_dump.c||src/scene_manager/scene_dump.c"
    ]
  },
  "patch_diff": {
    "src/scene_manager/scene_dump.c||src/scene_manager/scene_dump.c": [
      "File: src/scene_manager/scene_dump.c -> src/scene_manager/scene_dump.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "785:   } else {",
      "786:    StartAttribute(sdump, \"value\");",
      "787:   }",
      "789:    if (i) gf_fprintf(sdump->trace, \" \");",
      "790:    gf_sg_vrml_mf_get_item(field.far_ptr, field.fieldType, &slot_ptr, i);",
      "",
      "[Removed Lines]",
      "788:   for (i=0; i<mffield->count; i++) {",
      "",
      "[Added Lines]",
      "788:   for (i=0; mffield && (i<mffield->count); i++) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "938:   }",
      "940:   if (!sdump->XMLDump) gf_fprintf(sdump->trace, \"[\");",
      "947:   }",
      "948:   if (!sdump->XMLDump) gf_fprintf(sdump->trace, \"]\");",
      "",
      "[Removed Lines]",
      "941:   if (mffield) {",
      "942:    for (i=0; i<mffield->count; i++) {",
      "943:     if (i) gf_fprintf(sdump->trace, \" \");",
      "944:     gf_sg_vrml_mf_get_item(field.far_ptr, field.fieldType, &slot_ptr, i);",
      "945:     gf_dump_vrml_sffield(sdump, sf_type, slot_ptr, 1, node);",
      "946:    }",
      "",
      "[Added Lines]",
      "941:   for (i=0; mffield && (i<mffield->count); i++) {",
      "942:    if (i) gf_fprintf(sdump->trace, \" \");",
      "943:    gf_sg_vrml_mf_get_item(field.far_ptr, field.fieldType, &slot_ptr, i);",
      "944:    gf_dump_vrml_sffield(sdump, sf_type, slot_ptr, 1, node);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1150:      sdump->indent--;",
      "1151:      DUMP_IND(sdump);",
      "1152:     } else {",
      "1154:       if (i) gf_fprintf(sdump->trace, \" \");",
      "1155:       if (field.fieldType != GF_SG_VRML_MFNODE) {",
      "1156:        gf_sg_vrml_mf_get_item(field.far_ptr, field.fieldType, &slot_ptr, i);",
      "",
      "[Removed Lines]",
      "1153:      for (i=0; i<mffield->count; i++) {",
      "",
      "[Added Lines]",
      "1151:      for (i=0; mffield && (i<mffield->count); i++) {",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1191:      } else {",
      "1192:       gf_fprintf(sdump->trace, \" %s=\\\"\", GetXMTFieldTypeValueName(field.fieldType));",
      "1193:      }",
      "1195:       if (i) gf_fprintf(sdump->trace, \" \");",
      "1196:       if (field.fieldType != GF_SG_VRML_MFNODE) {",
      "1197:        gf_sg_vrml_mf_get_item(field.far_ptr, field.fieldType, &slot_ptr, i);",
      "",
      "[Removed Lines]",
      "1194:      for (i=0; i<mffield->count; i++) {",
      "",
      "[Added Lines]",
      "1192:      for (i=0; mffield && (i<mffield->count); i++) {",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1262:     } else {",
      "1263:      gf_fprintf(sdump->trace, \" %s=\\\"\", GetXMTFieldTypeValueName(field.fieldType));",
      "1264:     }",
      "1272:      }",
      "1273:     }",
      "1274:     gf_fprintf(sdump->trace, \"\\\"/>\\n\");",
      "",
      "[Removed Lines]",
      "1265:     if (mffield) {",
      "1266:      for (i=0; i<mffield->count; i++) {",
      "1267:       if (i) gf_fprintf(sdump->trace, \" \");",
      "1268:       if (field.fieldType != GF_SG_VRML_MFNODE) {",
      "1269:        gf_sg_vrml_mf_get_item(field.far_ptr, field.fieldType, &slot_ptr, i);",
      "1270:        gf_dump_vrml_sffield(sdump, sf_type, slot_ptr, (mffield->count>1) ? 1 : 0, node);",
      "1271:       }",
      "",
      "[Added Lines]",
      "1263:     for (i=0; mffield && (i<mffield->count); i++) {",
      "1264:      if (i) gf_fprintf(sdump->trace, \" \");",
      "1265:      if (field.fieldType != GF_SG_VRML_MFNODE) {",
      "1266:       gf_sg_vrml_mf_get_item(field.far_ptr, field.fieldType, &slot_ptr, i);",
      "1267:       gf_dump_vrml_sffield(sdump, sf_type, slot_ptr, (mffield->count>1) ? 1 : 0, node);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "9f8510835b97a729baf3646a3171bf51b4a8592e",
      "candidate_info": {
        "commit_hash": "9f8510835b97a729baf3646a3171bf51b4a8592e",
        "repo": "gpac/gpac",
        "commit_url": "https://github.com/gpac/gpac/commit/9f8510835b97a729baf3646a3171bf51b4a8592e",
        "files": [
          "src/filters/isoffin_read_ch.c",
          "src/media_tools/media_export.c",
          "src/scene_manager/scene_dump.c",
          "testsuite"
        ],
        "message": "fixed #2055",
        "before_after_code_files": [
          "src/filters/isoffin_read_ch.c||src/filters/isoffin_read_ch.c",
          "src/media_tools/media_export.c||src/media_tools/media_export.c",
          "src/scene_manager/scene_dump.c||src/scene_manager/scene_dump.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/scene_manager/scene_dump.c||src/scene_manager/scene_dump.c"
          ],
          "candidate": [
            "src/scene_manager/scene_dump.c||src/scene_manager/scene_dump.c"
          ]
        }
      },
      "candidate_diff": {
        "src/filters/isoffin_read_ch.c||src/filters/isoffin_read_ch.c": [
          "File: src/filters/isoffin_read_ch.c -> src/filters/isoffin_read_ch.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "480:      ch->sample_num--;",
          "481:    } else {",
          "482:     if (ch->to_init && ch->sample_num) {",
          "484:      ch->last_state = GF_ISOM_INVALID_FILE;",
          "487:      ch->last_state = GF_EOS;",
          "488:     }",
          "489:    }",
          "",
          "[Removed Lines]",
          "483:      GF_LOG(GF_LOG_ERROR, GF_LOG_CONTAINER, (\"[IsoMedia] Failed to fetch initial sample %d for track %d\\n\"));",
          "485:     }",
          "486:     if (ch->sample_num >= gf_isom_get_sample_count(ch->owner->mov, ch->track)) {",
          "",
          "[Added Lines]",
          "483:      GF_LOG(GF_LOG_ERROR, GF_LOG_CONTAINER, (\"[IsoMedia] Failed to fetch initial sample %d for track %d\\n\", ch->sample_num, ch->track));",
          "485:     } else {",
          "486:      GF_LOG(GF_LOG_ERROR, GF_LOG_CONTAINER, (\"[IsoMedia] File truncated, aborting read for track %d\\n\", ch->track));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "507:   } else {",
          "508:    e = gf_isom_last_error(ch->owner->mov);",
          "509:    GF_LOG((e==GF_ISOM_INCOMPLETE_FILE) ? GF_LOG_DEBUG : GF_LOG_WARNING, GF_LOG_DASH, (\"[IsoMedia] Track #%d fail to fetch sample %d / %d: %s\\n\", ch->track, ch->sample_num, gf_isom_get_sample_count(ch->owner->mov, ch->track), gf_error_to_string(e) ));",
          "510:   }",
          "511:   return;",
          "512:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "511:    if ((e<GF_OK) && (e!=GF_ISOM_INCOMPLETE_FILE)) {",
          "512:     ch->last_state = GF_EOS;",
          "513:    }",
          "",
          "---------------"
        ],
        "src/media_tools/media_export.c||src/media_tools/media_export.c": [
          "File: src/media_tools/media_export.c -> src/media_tools/media_export.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1075:    GF_ISOSample *samp;",
          "1076:    if (safs[i].last_sample==safs[i].nb_samp) continue;",
          "1077:    samp = gf_isom_get_sample(dumper->file, safs[i].track_num, safs[i].last_sample + 1, &di);",
          "1078:    gf_saf_mux_add_au(mux, safs[i].stream_id, (u32) (samp->DTS+samp->CTS_Offset), samp->data, samp->dataLength, (samp->IsRAP==RAP) ? 1 : 0);",
          "1080:    gf_free(samp);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1078:    if (!samp) {",
          "1079:     gf_saf_mux_del(mux);",
          "1080:     return gf_isom_last_error(dumper->file);",
          "1081:    }",
          "",
          "---------------"
        ],
        "src/scene_manager/scene_dump.c||src/scene_manager/scene_dump.c": [
          "File: src/scene_manager/scene_dump.c -> src/scene_manager/scene_dump.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "939:   }",
          "941:   if (!sdump->XMLDump) gf_fprintf(sdump->trace, \"[\");",
          "946:   }",
          "947:   if (!sdump->XMLDump) gf_fprintf(sdump->trace, \"]\");",
          "",
          "[Removed Lines]",
          "942:   for (i=0; i<mffield->count; i++) {",
          "943:    if (i) gf_fprintf(sdump->trace, \" \");",
          "944:    gf_sg_vrml_mf_get_item(field.far_ptr, field.fieldType, &slot_ptr, i);",
          "945:    gf_dump_vrml_sffield(sdump, sf_type, slot_ptr, 1, node);",
          "",
          "[Added Lines]",
          "942:   if (mffield) {",
          "943:    for (i=0; i<mffield->count; i++) {",
          "944:     if (i) gf_fprintf(sdump->trace, \" \");",
          "945:     gf_sg_vrml_mf_get_item(field.far_ptr, field.fieldType, &slot_ptr, i);",
          "946:     gf_dump_vrml_sffield(sdump, sf_type, slot_ptr, 1, node);",
          "947:    }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1261:     } else {",
          "1262:      gf_fprintf(sdump->trace, \" %s=\\\"\", GetXMTFieldTypeValueName(field.fieldType));",
          "1263:     }",
          "1269:      }",
          "1270:     }",
          "1271:     gf_fprintf(sdump->trace, \"\\\"/>\\n\");",
          "",
          "[Removed Lines]",
          "1264:     for (i=0; i<mffield->count; i++) {",
          "1265:      if (i) gf_fprintf(sdump->trace, \" \");",
          "1266:      if (field.fieldType != GF_SG_VRML_MFNODE) {",
          "1267:       gf_sg_vrml_mf_get_item(field.far_ptr, field.fieldType, &slot_ptr, i);",
          "1268:       gf_dump_vrml_sffield(sdump, sf_type, slot_ptr, (mffield->count>1) ? 1 : 0, node);",
          "",
          "[Added Lines]",
          "1266:     if (mffield) {",
          "1267:      for (i=0; i<mffield->count; i++) {",
          "1268:       if (i) gf_fprintf(sdump->trace, \" \");",
          "1269:       if (field.fieldType != GF_SG_VRML_MFNODE) {",
          "1270:        gf_sg_vrml_mf_get_item(field.far_ptr, field.fieldType, &slot_ptr, i);",
          "1271:        gf_dump_vrml_sffield(sdump, sf_type, slot_ptr, (mffield->count>1) ? 1 : 0, node);",
          "1272:       }",
          "",
          "---------------"
        ]
      }
    }
  ]
}