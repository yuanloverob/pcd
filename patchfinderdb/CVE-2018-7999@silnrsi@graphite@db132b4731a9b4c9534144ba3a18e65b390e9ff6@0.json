{
  "cve_id": "CVE-2018-7999",
  "cve_desc": "In libgraphite2 in graphite2 1.3.11, a NULL pointer dereference vulnerability was found in Segment.cpp during a dumbRendering operation, which may allow attackers to cause a denial of service or possibly have unspecified other impact via a crafted .ttf file.",
  "repo": "silnrsi/graphite",
  "patch_hash": "db132b4731a9b4c9534144ba3a18e65b390e9ff6",
  "patch_info": {
    "commit_hash": "db132b4731a9b4c9534144ba3a18e65b390e9ff6",
    "repo": "silnrsi/graphite",
    "commit_url": "https://github.com/silnrsi/graphite/commit/db132b4731a9b4c9534144ba3a18e65b390e9ff6",
    "files": [
      "include/graphite2/Font.h",
      "src/GlyphCache.cpp",
      "src/gr_face.cpp",
      "tests/featuremap/CMakeLists.txt",
      "tests/featuremap/featuremaptest.cpp",
      "tests/vm/CMakeLists.txt"
    ],
    "message": "Deprecate and make ineffective gr_face_dumbRendering",
    "before_after_code_files": [
      "include/graphite2/Font.h||include/graphite2/Font.h",
      "src/GlyphCache.cpp||src/GlyphCache.cpp",
      "src/gr_face.cpp||src/gr_face.cpp",
      "tests/featuremap/featuremaptest.cpp||tests/featuremap/featuremaptest.cpp"
    ]
  },
  "patch_diff": {
    "include/graphite2/Font.h||include/graphite2/Font.h": [
      "File: include/graphite2/Font.h -> include/graphite2/Font.h"
    ],
    "src/GlyphCache.cpp||src/GlyphCache.cpp": [
      "File: src/GlyphCache.cpp -> src/GlyphCache.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "84: class GlyphCache::Loader",
      "85: {",
      "86: public:",
      "89:     operator bool () const throw();",
      "90:     unsigned short int units_per_em() const throw();",
      "",
      "[Removed Lines]",
      "87:     Loader(const Face & face, const bool dumb_font);    //return result indicates success. Do not use if failed.",
      "",
      "[Added Lines]",
      "87:     Loader(const Face & face);    //return result indicates success. Do not use if failed.",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "117: GlyphCache::GlyphCache(const Face & face, const uint32 face_options)",
      "119:   _glyphs(_glyph_loader && *_glyph_loader && _glyph_loader->num_glyphs()",
      "120:         ? grzeroalloc<const GlyphFace *>(_glyph_loader->num_glyphs()) : 0),",
      "121:   _boxes(_glyph_loader && _glyph_loader->has_boxes() && _glyph_loader->num_glyphs()",
      "",
      "[Removed Lines]",
      "118: : _glyph_loader(new Loader(face, bool(face_options & gr_face_dumbRendering))),",
      "",
      "[Added Lines]",
      "118: : _glyph_loader(new Loader(face)),",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "243: : _head(face, Tag::head),",
      "244:   _hhea(face, Tag::hhea),",
      "245:   _hmtx(face, Tag::hmtx),",
      "",
      "[Removed Lines]",
      "242: GlyphCache::Loader::Loader(const Face & face, const bool dumb_font)",
      "",
      "[Added Lines]",
      "242: GlyphCache::Loader::Loader(const Face & face)",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "265:         return;",
      "266:     }",
      "269:     {",
      "314:     }",
      "315: }",
      "",
      "[Removed Lines]",
      "268:     if (!dumb_font)",
      "270:         if ((m_pGlat = Face::Table(face, Tag::Glat, 0x00030000)) == NULL",
      "271:             || (m_pGloc = Face::Table(face, Tag::Gloc)) == NULL",
      "272:             || m_pGloc.size() < 8)",
      "273:         {",
      "274:             _head = Face::Table();",
      "275:             return;",
      "276:         }",
      "277:         const byte    * p = m_pGloc;",
      "278:         int       version = be::read<uint32>(p);",
      "279:         const uint16    flags = be::read<uint16>(p);",
      "280:         _num_attrs = be::read<uint16>(p);",
      "284:         _long_fmt              = flags & 1;",
      "285:         int tmpnumgattrs       = (m_pGloc.size()",
      "286:                                    - (p - m_pGloc)",
      "287:                                    - sizeof(uint16)*(flags & 0x2 ? _num_attrs : 0))",
      "288:                                        / (_long_fmt ? sizeof(uint32) : sizeof(uint16)) - 1;",
      "290:         if (version >= 0x00020000 || tmpnumgattrs < 0 || tmpnumgattrs > 65535",
      "291:             || _num_attrs == 0 || _num_attrs > 0x3000  // is this hard limit appropriate?",
      "292:             || _num_glyphs_graphics > tmpnumgattrs",
      "293:             || m_pGlat.size() < 4)",
      "294:         {",
      "295:             _head = Face::Table();",
      "296:             return;",
      "297:         }",
      "299:         _num_glyphs_attributes = static_cast<unsigned short>(tmpnumgattrs);",
      "300:         p = m_pGlat;",
      "301:         version = be::read<uint32>(p);",
      "302:         if (version >= 0x00040000 || (version >= 0x00030000 && m_pGlat.size() < 8))       // reject Glat tables that are too new",
      "303:         {",
      "304:             _head = Face::Table();",
      "305:             return;",
      "306:         }",
      "307:         else if (version >= 0x00030000)",
      "308:         {",
      "309:             unsigned int glatflags = be::read<uint32>(p);",
      "310:             _has_boxes = glatflags & 1;",
      "312:             _has_boxes = true;",
      "313:         }",
      "",
      "[Added Lines]",
      "268:     if ((m_pGlat = Face::Table(face, Tag::Glat, 0x00030000)) == NULL",
      "269:         || (m_pGloc = Face::Table(face, Tag::Gloc)) == NULL",
      "270:         || m_pGloc.size() < 8)",
      "272:         _head = Face::Table();",
      "273:         return;",
      "274:     }",
      "275:     const byte    * p = m_pGloc;",
      "276:     int       version = be::read<uint32>(p);",
      "277:     const uint16    flags = be::read<uint16>(p);",
      "278:     _num_attrs = be::read<uint16>(p);",
      "282:     _long_fmt              = flags & 1;",
      "283:     int tmpnumgattrs       = (m_pGloc.size()",
      "284:                                - (p - m_pGloc)",
      "285:                                - sizeof(uint16)*(flags & 0x2 ? _num_attrs : 0))",
      "286:                                    / (_long_fmt ? sizeof(uint32) : sizeof(uint16)) - 1;",
      "288:     if (version >= 0x00020000 || tmpnumgattrs < 0 || tmpnumgattrs > 65535",
      "289:         || _num_attrs == 0 || _num_attrs > 0x3000  // is this hard limit appropriate?",
      "290:         || _num_glyphs_graphics > tmpnumgattrs",
      "291:         || m_pGlat.size() < 4)",
      "292:     {",
      "293:         _head = Face::Table();",
      "294:         return;",
      "295:     }",
      "297:     _num_glyphs_attributes = static_cast<unsigned short>(tmpnumgattrs);",
      "298:     p = m_pGlat;",
      "299:     version = be::read<uint32>(p);",
      "300:     if (version >= 0x00040000 || (version >= 0x00030000 && m_pGlat.size() < 8))       // reject Glat tables that are too new",
      "301:     {",
      "302:         _head = Face::Table();",
      "303:         return;",
      "304:     }",
      "305:     else if (version >= 0x00030000)",
      "306:     {",
      "307:         unsigned int glatflags = be::read<uint32>(p);",
      "308:         _has_boxes = glatflags & 1;",
      "310:         _has_boxes = true;",
      "",
      "---------------"
    ],
    "src/gr_face.cpp||src/gr_face.cpp": [
      "File: src/gr_face.cpp -> src/gr_face.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "47:         telemetry::category _misc_cat(face.tele.misc);",
      "48: #endif",
      "49:         Face::Table silf(face, Tag::Silf, 0x00050000);",
      "52:             return false;",
      "54:         if (!face.readGlyphs(options))",
      "",
      "[Removed Lines]",
      "50:         if (silf)   options &= ~gr_face_dumbRendering;",
      "51:         else if (!(options &  gr_face_dumbRendering))",
      "",
      "[Added Lines]",
      "50:         if (!silf)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "74:                 return true;",
      "75:         }",
      "76:         else",
      "78:     }",
      "79: }",
      "",
      "[Removed Lines]",
      "77:             return options & gr_face_dumbRendering;",
      "",
      "[Added Lines]",
      "76:             return false;",
      "",
      "---------------"
    ],
    "tests/featuremap/featuremaptest.cpp||tests/featuremap/featuremaptest.cpp": [
      "File: tests/featuremap/featuremaptest.cpp -> tests/featuremap/featuremaptest.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "243: {",
      "244:     FeatureMap testFeatureMap;",
      "245:     dummyFace.replace_table(TtfUtil::Tag::Feat, &table, sizeof(T));",
      "247:     if (!face) throw std::runtime_error(\"failed to load font\");",
      "248:     bool readStatus = testFeatureMap.readFeats(*face);",
      "249:     testAssert(\"readFeats\", readStatus);",
      "",
      "[Removed Lines]",
      "246:     gr_face * face = gr_make_face_with_ops(&dummyFace, &face_handle::ops, gr_face_dumbRendering);",
      "",
      "[Added Lines]",
      "246:     gr_face * face = gr_make_face_with_ops(&dummyFace, &face_handle::ops, 0);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "286:   FeatureMap testFeatureMap;",
      "287:   dummyFace.replace_table(TtfUtil::Tag::Feat, &testBadOffset, sizeof testBadOffset);",
      "291:  }",
      "292:  catch (std::exception & e)",
      "293:  {",
      "",
      "[Removed Lines]",
      "288:   face = gr_make_face_with_ops(&dummyFace, &face_handle::ops, gr_face_dumbRendering);",
      "289:   bool readStatus = testFeatureMap.readFeats(*face);",
      "290:   testAssert(\"fail gracefully on bad table\", !readStatus);",
      "",
      "[Added Lines]",
      "288:   face = gr_make_face_with_ops(&dummyFace, &face_handle::ops, 0);",
      "289:   testAssert(\"fail gracefully on bad table\", !face);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "c3fe15c1d7ce77e1105a332614aba22575ff7022",
      "candidate_info": {
        "commit_hash": "c3fe15c1d7ce77e1105a332614aba22575ff7022",
        "repo": "silnrsi/graphite",
        "commit_url": "https://github.com/silnrsi/graphite/commit/c3fe15c1d7ce77e1105a332614aba22575ff7022",
        "files": [
          "tests/featuremap/featuremaptest.cpp"
        ],
        "message": "Fix bugs uncovered by 562529b8ff4f8b0612d8188b2700ea5361e7275a\n\nUpgraded code to C++11 and replaced manual memory management with \ncontainers and smart pointers.",
        "before_after_code_files": [
          "tests/featuremap/featuremaptest.cpp||tests/featuremap/featuremaptest.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "tests/featuremap/featuremaptest.cpp||tests/featuremap/featuremaptest.cpp"
          ],
          "candidate": [
            "tests/featuremap/featuremaptest.cpp||tests/featuremap/featuremaptest.cpp"
          ]
        }
      },
      "candidate_diff": {
        "tests/featuremap/featuremaptest.cpp||tests/featuremap/featuremaptest.cpp": [
          "File: tests/featuremap/featuremaptest.cpp -> tests/featuremap/featuremaptest.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "19:     Suite 500, Boston, MA 02110-1335, USA or visit their web page on the",
          "20:     internet at http://www.fsf.org/licenses/lgpl.html.",
          "22: #include <cstdlib>",
          "24: #include <fstream>",
          "25: #include <iostream>",
          "26: #include <map>",
          "28: #include <graphite2/Font.h>",
          "29: #include \"inc/Endian.h\"",
          "30: #include \"inc/Face.h\"",
          "31: #include \"inc/FeatureMap.h\"",
          "",
          "[Removed Lines]",
          "23: #include <stdexcept>",
          "27: #include <string>",
          "",
          "[Added Lines]",
          "22: #include <cassert>",
          "27: #include <memory>",
          "28: #include <vector>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "34: using namespace graphite2;",
          "36: #pragma pack(push, 1)",
          "38: template<typename T> class _be",
          "39: {",
          "40:  T _v;",
          "45: };",
          "47: struct FeatHeader",
          "",
          "[Removed Lines]",
          "41: public:",
          "42:  _be(const T & t) throw()     {_v = be::swap<T>(t);}",
          "44:  operator T () const throw()    {return be::swap<T>(_v); }",
          "",
          "[Added Lines]",
          "40: class face_handle : public gr_face_ops",
          "41: {",
          "42: public:",
          "43:   using table_t = std::pair<void const *, size_t>;",
          "44:   static const table_t no_table;",
          "47: private:",
          "48:   std::vector<uint8_t> _ttf;",
          "49:   void const *    _table_dir;",
          "50:   void const *    _header_tbl;",
          "51:   mutable std::map<const TtfUtil::Tag, table_t> _tables;",
          "53:   static",
          "54:   decltype(_ttf) buffer_from_file(std::string const & backing_font_path) {",
          "55:     std::ifstream f(backing_font_path, std::ifstream::binary);",
          "56:     decltype(_ttf) result(size_t(f.seekg(0, std::ios::end).tellg()));",
          "57:     f.seekg(0, std::ios::beg);",
          "59:     result.assign(std::istreambuf_iterator<char>(f),",
          "60:                   std::istreambuf_iterator<char>());",
          "61:     return result;",
          "62:   }",
          "64: public:",
          "65:   face_handle() noexcept",
          "66:   : gr_face_ops({sizeof(gr_face_ops), get_table_fn, nullptr}),",
          "67:     _table_dir(nullptr), _header_tbl(nullptr) {}",
          "69:   face_handle(std::string const & backing_font_path)",
          "70:   : gr_face_ops({sizeof(gr_face_ops), get_table_fn, nullptr}),",
          "71:     _ttf(buffer_from_file(backing_font_path)),",
          "72:     _table_dir(nullptr),",
          "73:     _header_tbl(nullptr)",
          "74:   {",
          "75:     size_t tbl_offset, tbl_len;",
          "78:     if (!TtfUtil::GetHeaderInfo(tbl_offset, tbl_len)",
          "79:         || tbl_len > _ttf.size()",
          "80:         || tbl_offset > _ttf.size() - tbl_len",
          "81:         || !TtfUtil::CheckHeader(_header_tbl = _ttf.data() + tbl_offset))",
          "82:       throw std::runtime_error(backing_font_path + \": invalid font.\");",
          "85:     if (!TtfUtil::GetTableDirInfo(_header_tbl, tbl_offset, tbl_len)",
          "86:         || tbl_len > _ttf.size()",
          "87:         || tbl_offset > _ttf.size() - tbl_len)",
          "88:       throw std::runtime_error(backing_font_path + \": invalid font\");",
          "89:     _table_dir = _ttf.data() + tbl_offset;",
          "90:   }",
          "92:   inline",
          "93:   void replace_table(TtfUtil::Tag name, void const * data, size_t len) noexcept",
          "94:   {",
          "95:     _tables[name] = {data, len};",
          "96:   }",
          "98:   table_t const & operator [] (TtfUtil::Tag name) const noexcept",
          "99:   {",
          "100:     assert(_header_tbl);",
          "101:     assert(_table_dir);",
          "102:     auto & table = _tables[name];",
          "104:     if (!table.first)",
          "105:     {",
          "106:       size_t tbl_offset, tbl_len;",
          "107:       if (TtfUtil::GetTableInfo(name, _header_tbl, _table_dir,",
          "108:             tbl_offset, tbl_len))",
          "109:           table = {_ttf.data() + tbl_offset, tbl_len};",
          "110:     }",
          "112:     return table;",
          "113:   }",
          "115: private:",
          "116:   static const void * get_table_fn(const void *afh, unsigned int name,",
          "117:                                   size_t *len) {",
          "118:     assert(afh != nullptr);",
          "120:     face_handle const & fh = *static_cast<decltype(&fh)>(afh);",
          "121:     auto & t = fh[name];",
          "123:     return t.first;",
          "124:   }",
          "125: };",
          "126: const face_handle::table_t face_handle::no_table = {0,0};",
          "135: public:",
          "136:   _be(const T & t) noexcept               {_v = be::swap<T>(t);}",
          "137:   constexpr operator T () const noexcept  {return be::swap<T>(_v); }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "72: struct FeatTableTestA",
          "73: {",
          "76:     FeatSetting m_settings[2];",
          "77: };",
          "78: #pragma pack(pop)",
          "",
          "[Removed Lines]",
          "74:     FeatHeader m_header;",
          "75:     FeatDefn m_defs[1];",
          "",
          "[Added Lines]",
          "167:     FeatHeader  m_header;",
          "168:     FeatDefn    m_defs[1];",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "86: struct FeatTableTestB",
          "87: {",
          "90:     FeatSetting m_settings[4];",
          "91: };",
          "",
          "[Removed Lines]",
          "88:     FeatHeader m_header;",
          "89:     FeatDefn m_defs[2];",
          "",
          "[Added Lines]",
          "181:     FeatHeader  m_header;",
          "182:     FeatDefn    m_defs[2];",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "163:     {{0,10},{1,11},{0,12},{10,13},{0,14},{1,15},{2,16},{2,17},{4,18},{1,19},{2,20}}",
          "164: };",
          "228: {",
          "229:     if (!b)",
          "230:     {",
          "",
          "[Removed Lines]",
          "167: class face_handle",
          "168: {",
          "169: public:",
          "170:  typedef std::pair<const void *, size_t>  table_t;",
          "171:  static const table_t      no_table;",
          "173:  face_handle(const char *backing_font_path = 0)",
          "174:  : _header(0), _dir(0)",
          "175:  {",
          "176:   if (!backing_font_path) return;",
          "177:   std::ifstream  font_file(backing_font_path, std::ifstream::binary);",
          "178:   const size_t font_size = size_t(font_file.seekg(0, std::ios::end).tellg());",
          "179:   font_file.seekg(0, std::ios::beg);",
          "180:   _header = new char [font_size];",
          "181:   font_file.read(const_cast<char *>(_header), font_size);",
          "182:      if (!TtfUtil::CheckHeader(_header))",
          "183:       throw std::runtime_error(std::string(backing_font_path) + \": invalid font\");",
          "184:      size_t dir_off, dir_sz;",
          "185:      if (!TtfUtil::GetTableDirInfo(_header, dir_off, dir_sz))",
          "186:       throw std::runtime_error(std::string(backing_font_path) + \": invalid font\");",
          "187:      _dir = _header + dir_off;",
          "188:  }",
          "190:  ~face_handle()",
          "191:  {",
          "192:   delete [] _header;",
          "193:  }",
          "195:  void replace_table(const TtfUtil::Tag name, const void * const data, size_t len) throw() {",
          "196:   _tables[name] = std::make_pair(data, len);",
          "197:  }",
          "199:  const table_t & operator [] (const TtfUtil::Tag name) const throw() {",
          "200:   const table_t & table = _tables[name];",
          "201:   if (table.first) return table;",
          "203:   size_t off, len;",
          "204:   if (!TtfUtil::GetTableInfo(name, _header, _dir, off, len))",
          "205:    return no_table;",
          "206:   return _tables[name] = table_t(_header + off, len);",
          "207:  }",
          "209:  static const gr_face_ops ops;",
          "210: private:",
          "211:  static const void * get_table_fn(const void* afh, unsigned int name, size_t *len) {",
          "212:   const face_handle & fh = *reinterpret_cast<const face_handle *>(afh);",
          "213:   const table_t & t = fh[name];",
          "215:   return t.first;",
          "216:  }",
          "218:     const char         * _header,",
          "220:  mutable std::map<const TtfUtil::Tag, table_t> _tables;",
          "221: };",
          "223: const face_handle::table_t face_handle::no_table = face_handle::table_t(reinterpret_cast<void *>(0),0);",
          "224: const gr_face_ops face_handle::ops = { sizeof(gr_face_ops), face_handle::get_table_fn, 0 };",
          "227: template <typename T> void testAssert(const char * msg, const T b)",
          "",
          "[Added Lines]",
          "259: template <typename T>",
          "260: inline",
          "261: void testAssert(const char * msg, const T b)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "233:     }",
          "234: }",
          "237: {",
          "238:     if (a != T(b))",
          "239:     {",
          "",
          "[Removed Lines]",
          "236: template <typename T, typename R> void testAssertEqual(const char * msg, const T a, const R b)",
          "",
          "[Added Lines]",
          "270: template <typename T, typename R>",
          "271: inline",
          "272: void testAssertEqual(const char * msg, const T a, const R b)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "242:     }",
          "243: }",
          "245: face_handle dummyFace;",
          "248: {",
          "249:     FeatureMap testFeatureMap;",
          "250:     dummyFace.replace_table(TtfUtil::Tag::Feat, &table, sizeof(T));",
          "258:     for (size_t i = 0; i < sizeof(table.m_defs) / sizeof(FeatDefn); i++)",
          "259:     {",
          "",
          "[Removed Lines]",
          "247: template <class T> void testFeatTable(const T & table, const char * testName)",
          "251:     gr_face * face = gr_make_face_with_ops(&dummyFace, &face_handle::ops, 0);",
          "252:     if (!face) throw std::runtime_error(\"failed to load font\");",
          "253:     bool readStatus = testFeatureMap.readFeats(*face);",
          "254:     testAssert(\"readFeats\", readStatus);",
          "255:     fprintf(stderr, testName, NULL);",
          "256:     testAssertEqual(\"test num features %hu,%hu\\n\", testFeatureMap.numFeats(), table.m_header.m_numFeat);",
          "",
          "[Added Lines]",
          "283: using face_ptr = std::unique_ptr<gr_face, decltype(&gr_face_destroy)>;",
          "285: template <class T> void testFeatTable(T const & table, std::string const & testName)",
          "289:     face_ptr face(gr_make_face_with_ops(&dummyFace, &dummyFace, 0),",
          "290:                   gr_face_destroy);",
          "291:     if (!face)",
          "292:       throw std::runtime_error(\"failed to load font\");",
          "294:     testAssert(\"readFeats\", testFeatureMap.readFeats(*face));",
          "296:     std::cerr << testName << std::endl;",
          "297:     testAssertEqual(\"test num features %hu,%hu\\n\",",
          "298:                     testFeatureMap.numFeats(),",
          "299:                     table.m_header.m_numFeat);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "263:         testAssertEqual(\"test feat label %hu %hu\\n\", ref->getNameId(), table.m_defs[i].m_label);",
          "264:         size_t settingsIndex = (table.m_defs[i].m_settingsOffset - sizeof(FeatHeader)",
          "265:             - (sizeof(FeatDefn) * table.m_header.m_numFeat)) / sizeof(FeatSetting);",
          "267:         {",
          "268:             testAssertEqual(\"setting label %hu %hu\\n\", ref->getSettingName(j),",
          "269:                        table.m_settings[settingsIndex+j].m_label);",
          "270:         }",
          "271:     }",
          "273: }",
          "275: int main(int argc, char * argv[])",
          "276: {",
          "294:   testAssert(\"fail gracefully on bad table\", !face);",
          "305: }",
          "",
          "[Removed Lines]",
          "266:         for (uint16 j = 0; j < table.m_defs[i].m_numFeatSettings; j++)",
          "272:     gr_face_destroy(face);",
          "277:     gr_face * face = 0;",
          "278:     try",
          "279:  {",
          "280:   if (argc != 2) throw std::length_error(\"not enough arguments: need a backing font\");",
          "282:   dummyFace = face_handle(argv[1]);",
          "283:   testFeatTable<FeatTableTestA>(testDataA, \"A\\n\");",
          "284:   testFeatTable<FeatTableTestB>(testDataB, \"B\\n\");",
          "285:   testFeatTable<FeatTableTestB>(testDataBunsorted, \"Bu\\n\");",
          "286:   testFeatTable<FeatTableTestC>(testDataCunsorted, \"C\\n\");",
          "287:   testFeatTable<FeatTableTestD>(testDataDunsorted, \"D\\n\");",
          "288:   testFeatTable<FeatTableTestE>(testDataE, \"E\\n\");",
          "291:   FeatureMap testFeatureMap;",
          "292:   dummyFace.replace_table(TtfUtil::Tag::Feat, &testBadOffset, sizeof testBadOffset);",
          "293:   face = gr_make_face_with_ops(&dummyFace, &face_handle::ops, 0);",
          "295:  }",
          "296:  catch (std::exception & e)",
          "297:  {",
          "298:   fprintf(stderr, \"%s: %s\\n\", argv[0], e.what());",
          "299:   gr_face_destroy(face);",
          "300:   return 1;",
          "301:  }",
          "303:     gr_face_destroy(face);",
          "304:     return 0;",
          "",
          "[Added Lines]",
          "309:         for (uint16_t j = 0; j < table.m_defs[i].m_numFeatSettings; j++)",
          "320:   try",
          "321:   {",
          "322:     if (argc != 2)",
          "323:       throw std::length_error(\"not enough arguments: need a backing font\");",
          "325:     dummyFace = face_handle(argv[1]);",
          "326:     testFeatTable<FeatTableTestA>(testDataA, \"A\\n\");",
          "327:     testFeatTable<FeatTableTestB>(testDataB, \"B\\n\");",
          "328:     testFeatTable<FeatTableTestB>(testDataBunsorted, \"Bu\\n\");",
          "329:     testFeatTable<FeatTableTestC>(testDataCunsorted, \"C\\n\");",
          "330:     testFeatTable<FeatTableTestD>(testDataDunsorted, \"D\\n\");",
          "331:     testFeatTable<FeatTableTestE>(testDataE, \"E\\n\");",
          "334:     FeatureMap testFeatureMap;",
          "335:     dummyFace.replace_table(TtfUtil::Tag::Feat, &testBadOffset, sizeof testBadOffset);",
          "336:     face_ptr face(gr_make_face_with_ops(&dummyFace, &dummyFace, 0),",
          "337:                   gr_face_destroy);",
          "339:   }",
          "340:   catch (std::exception & e)",
          "341:   {",
          "342:     std::cerr << argv[0] << \": \" << e.what() << std::endl;",
          "343:     return 1;",
          "344:   }",
          "346:   return 0;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5e7439d8a4f46055871c0f39f59f710353233177",
      "candidate_info": {
        "commit_hash": "5e7439d8a4f46055871c0f39f59f710353233177",
        "repo": "silnrsi/graphite",
        "commit_url": "https://github.com/silnrsi/graphite/commit/5e7439d8a4f46055871c0f39f59f710353233177",
        "files": [
          "src/CMakeLists.txt",
          "src/Code.cpp",
          "src/Collider.cpp",
          "src/Decompressor.cpp",
          "src/Face.cpp",
          "src/GlyphCache.cpp",
          "src/Intervals.cpp",
          "src/NameTable.cpp",
          "src/Pass.cpp",
          "src/Segment.cpp",
          "src/Silf.cpp",
          "src/Slot.cpp",
          "src/gr_font.cpp",
          "src/gr_logging.cpp",
          "src/gr_segment.cpp",
          "src/inc/Rule.h",
          "src/inc/Segment.h",
          "src/inc/Slot.h",
          "src/inc/Sparse.h",
          "src/inc/TtfUtil.h",
          "src/inc/bits.h",
          "src/inc/opcodes.h"
        ],
        "message": "Fix 64 to 32 bit narrowing warnings\n\nCurrently only clang and MSVC issues these, this should help Windows\n64bit build warning free.",
        "before_after_code_files": [
          "src/Code.cpp||src/Code.cpp",
          "src/Collider.cpp||src/Collider.cpp",
          "src/Decompressor.cpp||src/Decompressor.cpp",
          "src/Face.cpp||src/Face.cpp",
          "src/GlyphCache.cpp||src/GlyphCache.cpp",
          "src/Intervals.cpp||src/Intervals.cpp",
          "src/NameTable.cpp||src/NameTable.cpp",
          "src/Pass.cpp||src/Pass.cpp",
          "src/Segment.cpp||src/Segment.cpp",
          "src/Silf.cpp||src/Silf.cpp",
          "src/Slot.cpp||src/Slot.cpp",
          "src/gr_font.cpp||src/gr_font.cpp",
          "src/gr_logging.cpp||src/gr_logging.cpp",
          "src/gr_segment.cpp||src/gr_segment.cpp",
          "src/inc/Rule.h||src/inc/Rule.h",
          "src/inc/Segment.h||src/inc/Segment.h",
          "src/inc/Slot.h||src/inc/Slot.h",
          "src/inc/Sparse.h||src/inc/Sparse.h",
          "src/inc/TtfUtil.h||src/inc/TtfUtil.h",
          "src/inc/bits.h||src/inc/bits.h",
          "src/inc/opcodes.h||src/inc/opcodes.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/GlyphCache.cpp||src/GlyphCache.cpp"
          ],
          "candidate": [
            "src/GlyphCache.cpp||src/GlyphCache.cpp"
          ]
        }
      },
      "candidate_diff": {
        "src/Code.cpp||src/Code.cpp": [
          "File: src/Code.cpp -> src/Code.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "509:     case NEXT :",
          "510:     case COPY_NEXT :",
          "511:       ++_slotref;",
          "514:       break;",
          "515:     case INSERT :",
          "",
          "[Removed Lines]",
          "512:       _contexts[_slotref] = context(_code._instr_count+1);",
          "",
          "[Added Lines]",
          "512:       _contexts[_slotref] = context(uint8(_code._instr_count+1));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "517:       _code._modify = true;",
          "518:       break;",
          "519:     case PUT_SUBS_8BIT_OBS :    // slotref on 1st parameter",
          "521:       _code._modify = true;",
          "522:       set_changed(0);",
          "523:       GR_FALLTHROUGH;",
          "",
          "[Removed Lines]",
          "520:     case PUT_SUBS :",
          "",
          "[Added Lines]",
          "520:     case PUT_SUBS :",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "589:         if (load(bc, bc + instr_skip))",
          "590:         {",
          "591:             bc += instr_skip;",
          "594:             _max.bytecode = curr_end;",
          "596:             _out_length = 1;",
          "",
          "[Removed Lines]",
          "592:             data_skip  = instr_skip - (_code._instr_count - ctxt_start);",
          "593:             instr_skip = _code._instr_count - ctxt_start;",
          "",
          "[Added Lines]",
          "592:             data_skip  = instr_skip - byte(_code._instr_count - ctxt_start);",
          "593:             instr_skip =  byte(_code._instr_count - ctxt_start);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "620:     for (const context * c = _contexts, * const ce = c + _slotref; c < ce; ++c)",
          "621:     {",
          "622:         if (!c->flags.referenced || !c->flags.changed) continue;",
          "625:         memmove(tip+1, tip, (code_end - tip) * sizeof(instr));",
          "627:         ++code_end;",
          "628:         ++tempcount;",
          "629:         _code._delete = true;",
          "630:     }",
          "632:     _code._instr_count = code_end - code;",
          "633: }",
          "",
          "[Removed Lines]",
          "624:         instr * const tip = code + c->codeRef + tempcount;",
          "",
          "[Added Lines]",
          "624:         instr * const tip = code + c->codeRef + tempcount;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "695:     return true;",
          "696: }",
          "699: void Machine::Code::failure(const status_t s) throw() {",
          "700:     release_buffers();",
          "701:     _status = s;",
          "",
          "[Removed Lines]",
          "698: inline",
          "",
          "[Added Lines]",
          "698: inline",
          "",
          "---------------"
        ],
        "src/Collider.cpp||src/Collider.cpp": [
          "File: src/Collider.cpp -> src/Collider.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "877:         }",
          "878:         goto done;",
          "879:     }",
          "882: #if !defined GRAPHITE2_NTRACING",
          "",
          "[Removed Lines]",
          "880:     numSlices = _edges.size();",
          "",
          "[Added Lines]",
          "880:     numSlices = int(_edges.size());",
          "",
          "---------------"
        ],
        "src/Decompressor.cpp||src/Decompressor.cpp": [
          "File: src/Decompressor.cpp -> src/Decompressor.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "120:     if (literal > src_end - literal_len || literal_len > out_size)",
          "121:         return -1;",
          "122:     dst = fast_copy(dst, literal, literal_len);",
          "",
          "[Removed Lines]",
          "124:     return dst - (u8*)out;",
          "125: }",
          "",
          "[Added Lines]",
          "124:     return int(dst - (u8*)out);",
          "125: }",
          "",
          "---------------"
        ],
        "src/Face.cpp||src/Face.cpp": [
          "File: src/Face.cpp -> src/Face.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "141:     {",
          "142:         error_context(EC_ASILF + (i << 8));",
          "143:         const uint32 offset = be::read<uint32>(p),",
          "145:         if (e.test(next > silf.size() || offset >= next, E_BADSIZE))",
          "146:             return error(e);",
          "",
          "[Removed Lines]",
          "144:                      next   = i == m_numSilf - 1 ? silf.size() : be::peek<uint32>(p);",
          "",
          "[Added Lines]",
          "144:                      next   = i == m_numSilf - 1 ? uint32(silf.size()) : be::peek<uint32>(p);",
          "",
          "---------------"
        ],
        "src/GlyphCache.cpp||src/GlyphCache.cpp": [
          "File: src/GlyphCache.cpp -> src/GlyphCache.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "257:     const Face::Table maxp = Face::Table(face, Tag::maxp);",
          "258:     if (!maxp) { _head = Face::Table(); return; }",
          "262:     if (_glyf && TtfUtil::LocaLookup(_num_glyphs_graphics-1, _loca, _loca.size(), _head) == size_t(-2))",
          "263:     {",
          "",
          "[Removed Lines]",
          "260:     _num_glyphs_graphics = TtfUtil::GlyphCount(maxp);",
          "",
          "[Added Lines]",
          "260:     _num_glyphs_graphics = static_cast<unsigned short>(TtfUtil::GlyphCount(maxp));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "282:     _long_fmt              = flags & 1;",
          "284:                                - (p - m_pGloc)",
          "285:                                - sizeof(uint16)*(flags & 0x2 ? _num_attrs : 0))",
          "286:                                    / (_long_fmt ? sizeof(uint32) : sizeof(uint16)) - 1;",
          "",
          "[Removed Lines]",
          "283:     int tmpnumgattrs       = (m_pGloc.size()",
          "",
          "[Added Lines]",
          "283:     ptrdiff_t tmpnumgattrs       = (m_pGloc.size()",
          "",
          "---------------"
        ],
        "src/Intervals.cpp||src/Intervals.cpp": [
          "File: src/Intervals.cpp -> src/Intervals.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "184: Zones::const_iterator Zones::find_exclusion_under(float x) const",
          "185: {",
          "188:     while (l < h)",
          "189:     {",
          "191:         switch (_exclusions[p].outcode(x))",
          "192:         {",
          "193:         case 0 : return _exclusions.begin()+p;",
          "194:         case 1 : h = p; break;",
          "196:         case 3 : l = p+1; break;",
          "197:         }",
          "198:     }",
          "",
          "[Removed Lines]",
          "186:     int l = 0, h = _exclusions.size();",
          "190:         int const p = (l+h) >> 1;",
          "195:         case 2 :",
          "",
          "[Added Lines]",
          "186:     size_t l = 0, h = _exclusions.size();",
          "190:         size_t const p = (l+h) >> 1;",
          "195:         case 2 :",
          "",
          "---------------"
        ],
        "src/NameTable.cpp||src/NameTable.cpp": [
          "File: src/NameTable.cpp -> src/NameTable.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "180:         utf8::iterator d = uniBuffer;",
          "181:         for (utf16::const_iterator s = utf16Name, e = utf16Name + utf16Length; s != e; ++s, ++d)",
          "184:         uniBuffer[length] = 0;",
          "185:         free(utf16Name);",
          "186:         return uniBuffer;",
          "",
          "[Removed Lines]",
          "183:         length = d - uniBuffer;",
          "",
          "[Added Lines]",
          "183:         length = uint32(d - uniBuffer);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "201:         utf32::iterator d = uniBuffer;",
          "202:         for (utf16::const_iterator s = utf16Name, e = utf16Name + utf16Length; s != e; ++s, ++d)",
          "205:         uniBuffer[length] = 0;",
          "206:         free(utf16Name);",
          "207:         return uniBuffer;",
          "",
          "[Removed Lines]",
          "204:         length = d - uniBuffer;",
          "",
          "[Added Lines]",
          "204:         length = uint32(d - uniBuffer);",
          "",
          "---------------"
        ],
        "src/Pass.cpp||src/Pass.cpp": [
          "File: src/Pass.cpp -> src/Pass.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "246:     Rule * r = m_rules + m_numRules - 1;",
          "247:     for (size_t n = m_numRules; r >= m_rules; --n, --r, ac_end = ac_begin, rc_end = rc_begin)",
          "248:     {",
          "250:         r->preContext = *--precontext;",
          "251:         r->sort       = be::peek<uint16>(--sort_key);",
          "252: #ifndef NDEBUG",
          "",
          "[Removed Lines]",
          "249:         face.error_context((face.error_context() & 0xFFFF00) + EC_ARULE + ((n - 1) << 24));",
          "",
          "[Added Lines]",
          "249:         face.error_context((face.error_context() & 0xFFFF00) + EC_ARULE + int((n - 1) << 24));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "331:         if (e.test(*s >= m_numStates, E_BADSTATE))",
          "332:         {",
          "334:             return face.error(e); // true;",
          "335:         }",
          "336:     }",
          "",
          "[Removed Lines]",
          "333:             face.error_context((face.error_context() & 0xFFFF00) + EC_ASTARTS + ((s - m_startStates) << 24));",
          "",
          "[Added Lines]",
          "333:             face.error_context((face.error_context() & 0xFFFF00) + EC_ASTARTS + int((s - m_startStates) << 24));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "343:         if (e.test(*t >= m_numStates, E_BADSTATE))",
          "344:         {",
          "346:             return face.error(e);",
          "347:         }",
          "348:     }",
          "",
          "[Removed Lines]",
          "345:             face.error_context((face.error_context() & 0xFFFF00) + EC_ATRANS + (((t - m_transitions) / m_numColumns) << 8));",
          "",
          "[Added Lines]",
          "345:             face.error_context((face.error_context() & 0xFFFF00) + EC_ATRANS + int(((t - m_transitions) / m_numColumns) << 8));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "358:         if (e.test(begin >= rule_map_end || end > rule_map_end || begin > end, E_BADRULEMAPPING))",
          "359:         {",
          "361:             return face.error(e);",
          "362:         }",
          "363:         s->rules = begin;",
          "",
          "[Removed Lines]",
          "360:             face.error_context((face.error_context() & 0xFFFF00) + EC_ARULEMAP + (n << 24));",
          "",
          "[Added Lines]",
          "360:             face.error_context((face.error_context() & 0xFFFF00) + EC_ARULEMAP + int(n << 24));",
          "",
          "---------------"
        ],
        "src/Segment.cpp||src/Segment.cpp": [
          "File: src/Segment.cpp -> src/Segment.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "43: using namespace graphite2;",
          "46: : m_freeSlots(NULL),",
          "47:   m_freeJustifies(NULL),",
          "48:   m_charinfo(new CharInfo[numchars]),",
          "",
          "[Removed Lines]",
          "45: Segment::Segment(unsigned int numchars, const Face* face, uint32 script, int textDir)",
          "",
          "[Added Lines]",
          "45: Segment::Segment(size_t numchars, const Face* face, uint32 script, int textDir)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "178:         const size_t justSize = SlotJustify::size_of(m_silf->numJustLevels());",
          "179:         byte *justs = grzeroalloc<byte>(justSize * m_bufSize);",
          "180:         if (!justs) return NULL;",
          "182:         {",
          "183:             SlotJustify *p = reinterpret_cast<SlotJustify *>(justs + justSize * i);",
          "184:             SlotJustify *next = reinterpret_cast<SlotJustify *>(justs + justSize * (i + 1));",
          "",
          "[Removed Lines]",
          "181:         for (int i = m_bufSize - 2; i >= 0; --i)",
          "",
          "[Added Lines]",
          "181:         for (long i = m_bufSize - 2; i >= 0; --i)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "329: }",
          "333: {",
          "334:     int i = 0, j = 0;",
          "335:     CharInfo *c, *cend;",
          "",
          "[Removed Lines]",
          "332: void Segment::associateChars(int offset, int numChars)",
          "",
          "[Added Lines]",
          "332: void Segment::associateChars(int offset, size_t numChars)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "353:     for (Slot *s = m_first; s; s = s->next())",
          "354:     {",
          "355:         int a;",
          "357:         { charinfo(a)->after(s->index()); }",
          "358:         --a;",
          "359:         s->after(a);",
          "",
          "[Removed Lines]",
          "356:         for (a = s->after() + 1; a < offset + numChars && charinfo(a)->after() < 0; ++a)",
          "",
          "[Added Lines]",
          "356:         for (a = s->after() + 1; a < offset + int(numChars) && charinfo(a)->after() < 0; ++a)",
          "",
          "---------------"
        ],
        "src/Silf.cpp||src/Silf.cpp": [
          "File: src/Silf.cpp -> src/Silf.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "199:     {",
          "200:         uint32 pass_start = be::read<uint32>(o_passes);",
          "201:         uint32 pass_end = be::peek<uint32>(o_passes);",
          "204:                 || e.test(pass_start < passes_start, E_BADPASSSTART)",
          "205:                 || e.test(pass_end > lSilf, E_BADPASSEND)) {",
          "206:             releaseBuffers(); return face.error(e);",
          "",
          "[Removed Lines]",
          "202:         face.error_context((face.error_context() & 0xFF00) + EC_ASILF + (i << 16));",
          "203:         if (e.test(pass_start > pass_end, E_BADPASSSTART)",
          "",
          "[Added Lines]",
          "202:         face.error_context((face.error_context() & 0xFF00) + EC_ASILF + unsigned(i << 16));",
          "203:         if (e.test(pass_start > pass_end, E_BADPASSSTART)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "233: template<typename T> inline uint32 Silf::readClassOffsets(const byte *&p, size_t data_len, Error &e)",
          "234: {",
          "235:     const T cls_off = 2*sizeof(uint16) + sizeof(T)*(m_nClass+1);",
          "238:     if (e.test(be::peek<T>(p) != cls_off, E_MISALIGNEDCLASSES)",
          "239:             || e.test(max_off > (data_len - cls_off)/sizeof(uint16), E_HIGHCLASSOFFSET))",
          "",
          "[Removed Lines]",
          "236:     const size_t max_off = (be::peek<T>(p + sizeof(T)*m_nClass) - cls_off)/sizeof(uint16);",
          "",
          "[Added Lines]",
          "236:     const uint32 max_off = (be::peek<T>(p + sizeof(T)*m_nClass) - cls_off)/sizeof(uint16);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "357: bool Silf::runGraphite(Segment *seg, uint8 firstPass, uint8 lastPass, int dobidi) const",
          "358: {",
          "359:     assert(seg != 0);",
          "361:     SlotMap            map(*seg, m_dir, maxSize);",
          "362:     FiniteStateMachine fsm(map, seg->getFace()->logger());",
          "363:     vm::Machine        m(map);",
          "",
          "[Removed Lines]",
          "360:     unsigned int       maxSize = seg->slotCount() * MAX_SEG_GROWTH_FACTOR;",
          "",
          "[Added Lines]",
          "360:     size_t             maxSize = seg->slotCount() * MAX_SEG_GROWTH_FACTOR;",
          "",
          "---------------"
        ],
        "src/Slot.cpp||src/Slot.cpp": [
          "File: src/Slot.cpp -> src/Slot.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "57:     else",
          "58:         m_before = orig.m_before + charOffset;",
          "59:     if (charOffset <= 0 && orig.m_after + charOffset >= numChars)",
          "61:     else",
          "62:         m_after = orig.m_after + charOffset;",
          "63:     m_parent = NULL;",
          "",
          "[Removed Lines]",
          "60:         m_after = numChars - 1;",
          "",
          "[Added Lines]",
          "60:         m_after = int(numChars) - 1;",
          "",
          "---------------"
        ],
        "src/gr_font.cpp||src/gr_font.cpp": [
          "File: src/gr_font.cpp -> src/gr_font.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "16:     You should also have received a copy of the GNU Lesser General Public",
          "17:     License along with this library in the file named \"LICENSE\".",
          "20:     internet at http://www.fsf.org/licenses/lgpl.html.",
          "22: Alternatively, the contents of this file may be used under the terms of the",
          "",
          "[Removed Lines]",
          "18:     If not, write to the Free Software Foundation, 51 Franklin Street,",
          "19:     Suite 500, Boston, MA 02110-1335, USA or visit their web page on the",
          "",
          "[Added Lines]",
          "18:     If not, write to the Free Software Foundation, 51 Franklin Street,",
          "19:     Suite 500, Boston, MA 02110-1335, USA or visit their web page on the",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "48: gr_font* gr_make_font_with_ops(float ppm/*pixels per em*/, const void* appFontHandle/*non-NULL*/, const gr_font_ops * font_ops, const gr_face * face/*needed for scaling*/)",
          "50:     if (face == 0 || ppm <= 0)  return 0;",
          "52:     Font * const res = new Font(ppm, *face, appFontHandle, font_ops);",
          "",
          "[Removed Lines]",
          "49: {                 //the appFontHandle must stay alive all the time when the gr_font is alive. When finished with the gr_font, call destroy_gr_font",
          "",
          "[Added Lines]",
          "49: {                 //the appFontHandle must stay alive all the time when the gr_font is alive. When finished with the gr_font, call destroy_gr_font",
          "",
          "---------------"
        ],
        "src/gr_logging.cpp||src/gr_logging.cpp": [
          "File: src/gr_logging.cpp -> src/gr_logging.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "252: graphite2::objectid::objectid(const dslot & ds) throw()",
          "253: {",
          "254:     const Slot * const p = ds.second;",
          "256:     sprintf(name, \"%.4x-%.2x-%.4hx\", uint16(s >> 16), uint16(p ? p->userAttrs()[ds.first->silf()->numUser()] : 0), uint16(s));",
          "257:     name[sizeof name-1] = 0;",
          "258: }",
          "260: graphite2::objectid::objectid(const Segment * const p) throw()",
          "261: {",
          "263:     sprintf(name, \"%.4x-%.2x-%.4hx\", uint16(s >> 16), 0, uint16(s));",
          "264:     name[sizeof name-1] = 0;",
          "265: }",
          "",
          "[Removed Lines]",
          "255:     uint32 s = reinterpret_cast<size_t>(p);",
          "262:     uint32 s = reinterpret_cast<size_t>(p);",
          "",
          "[Added Lines]",
          "255:     uint32 s = uint32(reinterpret_cast<size_t>(p));",
          "262:     uint32 s = uint32(reinterpret_cast<size_t>(p));",
          "",
          "---------------"
        ],
        "src/gr_segment.cpp||src/gr_segment.cpp": [
          "File: src/gr_segment.cpp -> src/gr_segment.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "132: unsigned int gr_seg_n_cinfo(const gr_segment* pSeg/*not NULL*/)",
          "133: {",
          "134:     assert(pSeg);",
          "136: }",
          "",
          "[Removed Lines]",
          "135:     return pSeg->charInfoCount();",
          "",
          "[Added Lines]",
          "135:     return int(pSeg->charInfoCount());",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "145: unsigned int gr_seg_n_slots(const gr_segment* pSeg/*not NULL*/)",
          "146: {",
          "147:     assert(pSeg);",
          "149: }",
          "151: const gr_slot* gr_seg_first_slot(gr_segment* pSeg/*not NULL*/)",
          "",
          "[Removed Lines]",
          "148:     return pSeg->slotCount();",
          "",
          "[Added Lines]",
          "148:     return int(pSeg->slotCount());",
          "",
          "---------------"
        ],
        "src/inc/Rule.h||src/inc/Rule.h": [
          "File: src/inc/Rule.h -> src/inc/Rule.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "102: {",
          "103: public:",
          "104:   enum {MAX_SLOTS=64};",
          "107:   Slot       * * begin();",
          "108:   Slot       * * end();",
          "109:   size_t         size() const;",
          "",
          "[Removed Lines]",
          "105:   SlotMap(Segment & seg, uint8 direction, int maxSize);",
          "",
          "[Added Lines]",
          "105:   SlotMap(Segment & seg, uint8 direction, size_t maxSize);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "244: }",
          "246: inline",
          "248: : segment(seg), m_size(0), m_precontext(0), m_highwater(0),",
          "250: {",
          "251:     m_slot_map[0] = 0;",
          "252: }",
          "",
          "[Removed Lines]",
          "247: SlotMap::SlotMap(Segment & seg, uint8 direction, int maxSize)",
          "249:     m_maxSize(maxSize), m_dir(direction), m_highpassed(false)",
          "",
          "[Added Lines]",
          "247: SlotMap::SlotMap(Segment & seg, uint8 direction, size_t maxSize)",
          "249:     m_maxSize(int(maxSize)), m_dir(direction), m_highpassed(false)",
          "",
          "---------------"
        ],
        "src/inc/Segment.h||src/inc/Segment.h": [
          "File: src/inc/Segment.h -> src/inc/Segment.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "88:         SEG_HASCOLLISIONS = 2",
          "89:     };",
          "93:     Position advance() const { return m_advance; }",
          "94:     bool runGraphite() { if (m_silf) return m_face->runGraphite(this, m_silf); else return true;};",
          "95:     void chooseSilf(uint32 script) { m_silf = m_face->chooseSilf(script); }",
          "96:     const Silf *silf() const { return m_silf; }",
          "98:     const CharInfo *charinfo(unsigned int index) const { return index < m_numCharinfo ? m_charinfo + index : NULL; }",
          "99:     CharInfo *charinfo(unsigned int index) { return index < m_numCharinfo ? m_charinfo + index : NULL; }",
          "102:     ~Segment();",
          "103:     uint8 flags() const { return m_flags; }",
          "104:     void flags(uint8 f) { m_flags = f; }",
          "",
          "[Removed Lines]",
          "91:     unsigned int slotCount() const { return m_numGlyphs; }      //one slot per glyph",
          "92:     void extendLength(int num) { m_numGlyphs += num; }",
          "97:     unsigned int charInfoCount() const { return m_numCharinfo; }",
          "101:     Segment(unsigned int numchars, const Face* face, uint32 script, int dir);",
          "",
          "[Added Lines]",
          "91:     size_t slotCount() const { return m_numGlyphs; }      //one slot per glyph",
          "92:     void extendLength(ptrdiff_t num) { m_numGlyphs += num; }",
          "97:     size_t charInfoCount() const { return m_numCharinfo; }",
          "101:     Segment(size_t numchars, const Face* face, uint32 script, int dir);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "112:     SlotJustify *newJustify();",
          "113:     void freeJustify(SlotJustify *aJustify);",
          "114:     Position positionSlots(const Font *font=0, Slot *first=0, Slot *last=0, bool isRtl = false, bool isFinal = true);",
          "116:     void linkClusters(Slot *first, Slot *last);",
          "117:     uint16 getClassGlyph(uint16 cid, uint16 offset) const { return m_silf->getClassGlyph(cid, offset); }",
          "118:     uint16 findClassIndex(uint16 cid, uint16 gid) const { return m_silf->findClassIndex(cid, gid); }",
          "120:     uint32 getFeature(int index, uint8 findex) const { const FeatureRef* pFR=m_face->theSill().theFeatureMap().featureRef(findex); if (!pFR) return 0; else return pFR->getFeatureVal(m_feats[index]); }",
          "121:     void setFeature(int index, uint8 findex, uint32 val) {",
          "122:         const FeatureRef* pFR=m_face->theSill().theFeatureMap().featureRef(findex);",
          "",
          "[Removed Lines]",
          "115:     void associateChars(int offset, int num);",
          "119:     int addFeatures(const Features& feats) { m_feats.push_back(feats); return m_feats.size() - 1; }",
          "",
          "[Added Lines]",
          "115:     void associateChars(int offset, size_t num);",
          "119:     int addFeatures(const Features& feats) { m_feats.push_back(feats); return int(m_feats.size()) - 1; }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "128:     int8 dir() const { return m_dir; }",
          "129:     void dir(int8 val) { m_dir = val; }",
          "130:     bool currdir() const { return ((m_dir >> 6) ^ m_dir) & 1; }",
          "132:     void mergePassBits(const unsigned int val) { m_passBits &= val; }",
          "133:     int16 glyphAttr(uint16 gid, uint16 gattr) const { const GlyphFace * p = m_face->glyphs().glyphSafe(gid); return p ? p->attrs()[gattr] : 0; }",
          "134:     int32 getGlyphMetric(Slot *iSlot, uint8 metric, uint8 attrLevel, bool rtl) const;",
          "",
          "[Removed Lines]",
          "131:     unsigned int passBits() const { return m_passBits; }",
          "",
          "[Added Lines]",
          "131:     size_t passBits() const { return m_passBits; }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "172:     const Silf    * m_silf;",
          "173:     Slot          * m_first;            // first slot in segment",
          "174:     Slot          * m_last;             // last slot in segment",
          "176:                     m_numGlyphs,",
          "177:                     m_numCharinfo,      // size of the array and number of input characters",
          "178:                     m_passBits;         // if bit set then skip pass",
          "",
          "[Removed Lines]",
          "175:     unsigned int    m_bufSize,          // how big a buffer to create when need more slots",
          "",
          "[Added Lines]",
          "175:     size_t          m_bufSize,          // how big a buffer to create when need more slots",
          "",
          "---------------"
        ],
        "src/inc/Slot.h||src/inc/Slot.h": [
          "File: src/inc/Slot.h -> src/inc/Slot.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "37: typedef gr_attrCode attrCode;",
          "39: class GlyphFace;",
          "41: class Segment;",
          "43: struct SlotJustify",
          "",
          "[Removed Lines]",
          "40: class SegCacheEntry;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "163:     int16   *m_userAttr;    // pointer to user attributes",
          "164:     SlotJustify *m_justs;   // pointer to justification parameters",
          "167:     friend class Segment;",
          "168: };",
          "",
          "[Removed Lines]",
          "166:     friend class SegCacheEntry;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/inc/Sparse.h||src/inc/Sparse.h": [
          "File: src/inc/Sparse.h -> src/inc/Sparse.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "138:         if (ci != ci_)",
          "139:         {",
          "140:             ci = ci_;",
          "142:         }",
          "144:         ci->mask |= 1UL << (SIZEOF_CHUNK - 1 - (v.first % SIZEOF_CHUNK));",
          "",
          "[Removed Lines]",
          "141:             ci->offset = vi - m_array.values;",
          "",
          "[Added Lines]",
          "141:             ci->offset = key_type(vi - m_array.values);",
          "",
          "---------------"
        ],
        "src/inc/TtfUtil.h||src/inc/TtfUtil.h": [
          "File: src/inc/TtfUtil.h -> src/inc/TtfUtil.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "52: class Tag",
          "53: {",
          "55: public:",
          "56:     Tag(const char n[5]) throw()            : _v(TTF_TAG(n[0],n[1],n[2],n[3])) {}",
          "61:     enum",
          "62:     {",
          "",
          "[Removed Lines]",
          "54:     unsigned long _v;",
          "57:     Tag(const unsigned long tag) throw()    : _v(tag) {}",
          "59:     operator unsigned long () const throw () { return _v; }",
          "",
          "[Added Lines]",
          "54:     unsigned int _v;",
          "57:     Tag(const unsigned int tag) throw()    : _v(tag) {}",
          "59:     operator unsigned int () const throw () { return _v; }",
          "",
          "---------------"
        ],
        "src/inc/bits.h||src/inc/bits.h": [
          "File: src/inc/bits.h -> src/inc/bits.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "107: template<typename T>",
          "108: inline T mask_over_val(T v)",
          "109: {",
          "111: }",
          "113: template<typename T>",
          "",
          "[Removed Lines]",
          "110:     return _mask_over_val<sizeof(T)>(v);",
          "",
          "[Added Lines]",
          "110:     return T(_mask_over_val<sizeof(T)>(v));",
          "",
          "---------------"
        ],
        "src/inc/opcodes.h||src/inc/opcodes.h": [
          "File: src/inc/opcodes.h -> src/inc/opcodes.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "387: STARTOP(attr_set)",
          "388:     declare_params(1);",
          "389:     const attrCode      slat = attrCode(uint8(*param));",
          "391:     is->setAttr(&seg, slat, 0, val, smap);",
          "392: ENDOP",
          "394: STARTOP(attr_add)",
          "395:     declare_params(1);",
          "396:     const attrCode      slat = attrCode(uint8(*param));",
          "398:     if ((slat == gr_slatPosX || slat == gr_slatPosY) && (flags & POSITIONED) == 0)",
          "399:     {",
          "400:         seg.positionSlots(0, *smap.begin(), *(smap.end()-1), seg.currdir());",
          "",
          "[Removed Lines]",
          "390:     const          int  val  = int(pop());",
          "397:     const          int  val  = int(pop());",
          "",
          "[Added Lines]",
          "390:     const          int  val  = pop();",
          "397:     const          int  val  = pop();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "407: STARTOP(attr_sub)",
          "408:     declare_params(1);",
          "409:     const attrCode      slat = attrCode(uint8(*param));",
          "411:     if ((slat == gr_slatPosX || slat == gr_slatPosY) && (flags & POSITIONED) == 0)",
          "412:     {",
          "413:         seg.positionSlots(0, *smap.begin(), *(smap.end()-1), seg.currdir());",
          "",
          "[Removed Lines]",
          "410:     const          int  val  = int(pop());",
          "",
          "[Added Lines]",
          "410:     const          int  val  = pop();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "420: STARTOP(attr_set_slot)",
          "421:     declare_params(1);",
          "425:     is->setAttr(&seg, slat, offset, val, smap);",
          "426: ENDOP",
          "428: STARTOP(iattr_set_slot)",
          "429:     declare_params(2);",
          "433:     is->setAttr(&seg, slat, idx, val, smap);",
          "434: ENDOP",
          "",
          "[Removed Lines]",
          "422:     const attrCode      slat = attrCode(uint8(*param));",
          "423:     const int offset = (map - smap.begin())*int(slat == gr_slatAttTo);",
          "424:     const          int  val  = int(pop())  + offset;",
          "430:     const attrCode      slat = attrCode(uint8(param[0]));",
          "431:     const size_t        idx  = uint8(param[1]);",
          "432:     const          int  val  = int(pop())  + (map - smap.begin())*int(slat == gr_slatAttTo);",
          "",
          "[Added Lines]",
          "422:     const attrCode  slat   = attrCode(uint8(*param));",
          "423:     const int       offset = int(map - smap.begin())*int(slat == gr_slatAttTo);",
          "424:     const int       val    = pop()  + offset;",
          "430:     const attrCode  slat = attrCode(uint8(param[0]));",
          "431:     const size_t    idx  = uint8(param[1]);",
          "432:     const int       val  = int(pop()  + (map - smap.begin())*int(slat == gr_slatAttTo));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "549:     declare_params(2);",
          "550:     const attrCode      slat = attrCode(uint8(param[0]));",
          "551:     const size_t        idx  = uint8(param[1]);",
          "553:     is->setAttr(&seg, slat, idx, val, smap);",
          "554: ENDOP",
          "",
          "[Removed Lines]",
          "552:     const          int  val  = int(pop());",
          "",
          "[Added Lines]",
          "552:     const          int  val  = pop();",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "557:     declare_params(2);",
          "558:     const attrCode      slat = attrCode(uint8(param[0]));",
          "559:     const size_t        idx  = uint8(param[1]);",
          "561:     if ((slat == gr_slatPosX || slat == gr_slatPosY) && (flags & POSITIONED) == 0)",
          "562:     {",
          "563:         seg.positionSlots(0, *smap.begin(), *(smap.end()-1), seg.currdir());",
          "",
          "[Removed Lines]",
          "560:     const          int  val  = int(pop());",
          "",
          "[Added Lines]",
          "560:     const          int  val  = pop();",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "571:     declare_params(2);",
          "572:     const attrCode      slat = attrCode(uint8(param[0]));",
          "573:     const size_t        idx  = uint8(param[1]);",
          "575:     if ((slat == gr_slatPosX || slat == gr_slatPosY) && (flags & POSITIONED) == 0)",
          "576:     {",
          "577:         seg.positionSlots(0, *smap.begin(), *(smap.end()-1), seg.currdir());",
          "",
          "[Removed Lines]",
          "574:     const          int  val  = int(pop());",
          "",
          "[Added Lines]",
          "574:     const          int  val  = pop();",
          "",
          "---------------"
        ]
      }
    }
  ]
}