{
  "cve_id": "CVE-2019-19244",
  "cve_desc": "sqlite3Select in select.c in SQLite 3.30.1 allows a crash if a sub-select uses both DISTINCT and window functions, and also has certain ORDER BY usage.",
  "repo": "sqlite/sqlite",
  "patch_hash": "e59c562b3f6894f84c715772c4b116d7b5c01348",
  "patch_info": {
    "commit_hash": "e59c562b3f6894f84c715772c4b116d7b5c01348",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/e59c562b3f6894f84c715772c4b116d7b5c01348",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/window1.test"
    ],
    "message": "Fix a crash that could occur if a sub-select that uses both DISTINCT and window functions also used an ORDER BY that is the same as its select list.\n\nFossilOrigin-Name: bcdd66c1691955c697f3d756c2b035acfe98f6aad72e90b0021bab6e9023b3ba",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/window1.test||test/window1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 6a64fb6a2da6c98f1e87b55ad5689967e1db4eae2e08345471d95e28cd567e0f",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "6065:   if( (p->selFlags & (SF_Distinct|SF_Aggregate))==SF_Distinct",
      "6066:    && sqlite3ExprListCompare(sSort.pOrderBy, pEList, -1)==0",
      "6067:   ){",
      "6068:     p->selFlags &= ~SF_Distinct;",
      "6069:     pGroupBy = p->pGroupBy = sqlite3ExprListDup(db, pEList, 0);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6067:    && p->pWin==0",
      "",
      "---------------"
    ],
    "test/window1.test||test/window1.test": [
      "File: test/window1.test -> test/window1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "1243:   ALTER TABLE a0 RENAME TO S;",
      "1244: } {1 {error in view a: 1st ORDER BY term does not match any column in the result set}}",
      "1246: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1246: reset_db",
      "1247: do_execsql_test 33.1 {",
      "1248:   CREATE TABLE t1(aa, bb);",
      "1249:   INSERT INTO t1 VALUES(1, 2);",
      "1250:   INSERT INTO t1 VALUES(5, 6);",
      "1251:   CREATE TABLE t2(x);",
      "1252:   INSERT INTO t2 VALUES(1);",
      "1253: }",
      "1254: do_execsql_test 33.2 {",
      "1255:   SELECT (SELECT DISTINCT sum(aa) OVER() FROM t1 ORDER BY 1), x FROM t2",
      "1256:   ORDER BY 1;",
      "1257: } {6 1}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "5976b2c80533728e974c2dfb2a6abc8f1acaf3b6",
      "candidate_info": {
        "commit_hash": "5976b2c80533728e974c2dfb2a6abc8f1acaf3b6",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/5976b2c80533728e974c2dfb2a6abc8f1acaf3b6",
        "files": [
          "ext/lsm1/lsm_vtab.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Fix to the query planner for the LSM1 extension.\n\nFossilOrigin-Name: 7496e872a1a50ac65ad04709365a43038fb015ac9c690196de3cb02ce54c2e57",
        "before_after_code_files": [
          "ext/lsm1/lsm_vtab.c||ext/lsm1/lsm_vtab.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/lsm1/lsm_vtab.c||ext/lsm1/lsm_vtab.c": [
          "File: ext/lsm1/lsm_vtab.c -> ext/lsm1/lsm_vtab.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "843:   const struct sqlite3_index_constraint *pConstraint;",
          "844:   pConstraint = pIdxInfo->aConstraint;",
          "846:     if( pConstraint->usable==0 ) continue;",
          "847:     if( pConstraint->iColumn!=0 ) continue;",
          "848:     switch( pConstraint->op ){",
          "",
          "[Removed Lines]",
          "845:   for(i=0; i<pIdxInfo->nConstraint && idxNum<16; i++, pConstraint++){",
          "",
          "[Added Lines]",
          "845:   for(i=0; i<pIdxInfo->nConstraint; i++, pConstraint++){",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 5d6f4dfeea75c7dcd8c511545accb9eb4b405a02db034332249ba54794e313d2",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3374648545262810849a3b17fdb4435bbb255a07",
      "candidate_info": {
        "commit_hash": "3374648545262810849a3b17fdb4435bbb255a07",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/3374648545262810849a3b17fdb4435bbb255a07",
        "files": [
          "Makefile.in",
          "Makefile.msc",
          "main.mk",
          "manifest",
          "manifest.uuid",
          "src/shell.c.in",
          "tool/dbtotxt.c",
          "tool/dbtotxt.md"
        ],
        "message": "Add the \"dbtotxt\" utility program and the ability to read \"dbtotxt\" output as a deserialized input database in the CLI, using the --hexdb option to the \".open\" command.\n\nFossilOrigin-Name: e3bf1d3ea5f748c5142c2403813fdace5aedc1fc68f0dcd5eae40a2fe763fedb",
        "before_after_code_files": [
          "Makefile.in||Makefile.in",
          "Makefile.msc||Makefile.msc",
          "main.mk||main.mk",
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in",
          "tool/dbtotxt.c||tool/dbtotxt.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "Makefile.in||Makefile.in": [
          "File: Makefile.in -> Makefile.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "1292:  $(LTLINK) -DDBDUMP_STANDALONE -o $@ \\",
          "1293:            $(TOP)/ext/misc/dbdump.c sqlite3.lo $(TLIBS)",
          "1295: showdb$(TEXE): $(TOP)/tool/showdb.c sqlite3.lo",
          "1296:  $(LTLINK) -o $@ $(TOP)/tool/showdb.c sqlite3.lo $(TLIBS)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1295: dbtotxt$(TEXE): $(TOP)/tool/dbtotxt.c",
          "1296:  $(LTLINK)-o $@ $(TOP)/tool/dbtotxt.c",
          "",
          "---------------"
        ],
        "Makefile.msc||Makefile.msc": [
          "File: Makefile.msc -> Makefile.msc",
          "--- Hunk 1 ---",
          "[Context before]",
          "2425: testloadext.dll: testloadext.lo",
          "2426:  $(LD) $(LDFLAGS) $(LTLINKOPTS) $(LTLIBPATHS) /DLL /OUT:$@ testloadext.lo",
          "2428: showdb.exe: $(TOP)\\tool\\showdb.c $(SQLITE3C) $(SQLITE3H)",
          "2429:  $(LTLINK) $(NO_WARN) -DSQLITE_THREADSAFE=0 -DSQLITE_OMIT_LOAD_EXTENSION \\",
          "2430:   $(TOP)\\tool\\showdb.c $(SQLITE3C) /link $(LDFLAGS) $(LTLINKOPTS)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2428: dbtotxt.exe: $(TOP)\\tool\\dbtotxt.c",
          "2429:  $(LTLINK) $(NO_WARN) $(TOP)\\tool\\dbtotxt.c /link $(LDFLAGS) $(LTLINKOPTS)",
          "",
          "---------------"
        ],
        "main.mk||main.mk": [
          "File: main.mk -> main.mk",
          "--- Hunk 1 ---",
          "[Context before]",
          "976: extensiontest: testfixture$(EXE) $(TEST_EXTENSION)",
          "977:  ./testfixture$(EXE) $(TOP)/test/loadext.test",
          "979: showdb$(EXE): $(TOP)/tool/showdb.c sqlite3.o",
          "980:  $(TCC) -DSQLITE_THREADSAFE=0 -DSQLITE_OMIT_LOAD_EXTENSION -o showdb$(EXE) \\",
          "981:   $(TOP)/tool/showdb.c sqlite3.o $(THREADLIB)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "979: dbtotxt$(EXE): $(TOP)/tool/dbtotxt.c",
          "980:  $(TCC) -o dbtotxt$(EXE) $(TOP)/tool/dbtotxt.c",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: eac9c0c49650b008951318a2225b932709a0a8dffbb01ed57684c40357b2e25c",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "3444:   \"        --append        Use appendvfs to append database to the end of FILE\",",
          "3445: #ifdef SQLITE_ENABLE_DESERIALIZE",
          "3446:   \"        --deserialize   Load into memory useing sqlite3_deserialize()\",",
          "3447: #endif",
          "3448:   \"        --new           Initialize FILE to an empty database\",",
          "3449:   \"        --readonly      Open FILE readonly\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3448:   \"        --hexdb         Load the output of \\\"dbtotxt\\\" as an in-memory database\",",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3723:   return rc;",
          "3724: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3728: #ifdef SQLITE_ENABLE_DESERIALIZE",
          "3734: static unsigned char *readHexDb(ShellState *p, int *pnData){",
          "3735:   unsigned char *a = 0;",
          "3736:   int nLine = 1;",
          "3737:   int n = 0;",
          "3738:   int pgsz = 0;",
          "3739:   int iOffset = 0;",
          "3740:   int j, k;",
          "3741:   int rc;",
          "3742:   FILE *in;",
          "3743:   unsigned char x[16];",
          "3744:   char zLine[100];",
          "3745:   if( p->zDbFilename ){",
          "3746:     in = fopen(p->zDbFilename, \"r\");",
          "3747:     if( in==0 ){",
          "3748:       utf8_printf(stderr, \"cannot open \\\"%s\\\" for reading\\n\", p->zDbFilename);",
          "3749:       return 0;",
          "3750:     }",
          "3751:   }else{",
          "3752:     in = stdin;",
          "3753:   }",
          "3755:   if( fgets(zLine, sizeof(zLine), in)==0 ) goto readHexDb_error;",
          "3756:   rc = sscanf(zLine, \"| size %d pagesize %d\", &n, &pgsz);",
          "3757:   if( rc!=2 ) goto readHexDb_error;",
          "3758:   if( n<=0 ) goto readHexDb_error;",
          "3759:   a = sqlite3_malloc( n );",
          "3760:   if( a==0 ){",
          "3761:     utf8_printf(stderr, \"Out of memory!\\n\");",
          "3762:     goto readHexDb_error;",
          "3763:   }",
          "3764:   memset(a, 0, n);",
          "3765:   if( pgsz<512 || pgsz>65536 || (pgsz & (pgsz-1))!=0 ){",
          "3766:     utf8_printf(stderr, \"invalid pagesize\\n\");",
          "3767:     goto readHexDb_error;",
          "3768:   }",
          "3769:   for(nLine=2; fgets(zLine, sizeof(zLine), in)!=0; nLine++){",
          "3770:     rc = sscanf(zLine, \"| page %d offset %d\", &j, &k);",
          "3771:     if( rc==2 ){",
          "3772:       iOffset = k;",
          "3773:       continue;",
          "3774:     }",
          "3775:     if( strncmp(zLine, \"| end \", 6)==0 ){",
          "3776:       break;",
          "3777:     }",
          "3778:     rc = sscanf(zLine,\"| %d: %hhx %hhx %hhx %hhx %hhx %hhx %hhx %hhx\"",
          "3779:                       \"  %hhx %hhx %hhx %hhx %hhx %hhx %hhx %hhx\",",
          "3780:                 &j, &x[0], &x[1], &x[2], &x[3], &x[4], &x[5], &x[6], &x[7],",
          "3781:                 &x[8], &x[9], &x[10], &x[11], &x[12], &x[13], &x[14], &x[15]);",
          "3782:     if( rc==17 ){",
          "3783:       k = iOffset+j;",
          "3784:       if( k+16>n ){",
          "3785:         utf8_printf(stderr, \"continue exceeds file size\\n\");",
          "3786:         goto readHexDb_error;",
          "3787:       }",
          "3788:       memcpy(a+k, x, 16);",
          "3789:     }",
          "3790:   }",
          "3792:   if( in!=stdin ) fclose(in);",
          "3793:   return a;",
          "3795: readHexDb_error:",
          "3796:   if( in!=stdin ){",
          "3797:     fclose(in);",
          "3798:   }else{",
          "3799:     while( fgets(zLine, sizeof(zLine), in)!=0 ){",
          "3800:       if(strncmp(zLine, \"| end \", 6)==0 ) break;",
          "3801:     }",
          "3802:   }",
          "3803:   sqlite3_free(a);",
          "3804:   utf8_printf(stderr,\"Error on line %d of --hexdb input\\n\", nLine);",
          "3805:   return 0;",
          "3806: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3756:            SQLITE_OPEN_READWRITE|SQLITE_OPEN_CREATE, \"apndvfs\");",
          "3757:         break;",
          "3758:       }",
          "3759:       case SHELL_OPEN_DESERIALIZE: {",
          "3760:         sqlite3_open(0, &p->db);",
          "3761:         break;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3842:       case SHELL_OPEN_HEXDB:",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3810:       sqlite3_free(zSql);",
          "3811:     }",
          "3812: #ifdef SQLITE_ENABLE_DESERIALIZE",
          "3814:       int nData = 0;",
          "3816:       int rc = sqlite3_deserialize(p->db, \"main\", aData, nData, nData,",
          "3817:                    SQLITE_DESERIALIZE_RESIZEABLE |",
          "3818:                    SQLITE_DESERIALIZE_FREEONCLOSE);",
          "",
          "[Removed Lines]",
          "3813:     else if( p->openMode==SHELL_OPEN_DESERIALIZE ){",
          "3815:       unsigned char *aData = (unsigned char*)readFile(p->zDbFilename, &nData);",
          "",
          "[Added Lines]",
          "3897:     else",
          "3898:     if( p->openMode==SHELL_OPEN_DESERIALIZE || p->openMode==SHELL_OPEN_HEXDB ){",
          "3900:       unsigned char *aData;",
          "3901:       if( p->openMode==SHELL_OPEN_DESERIALIZE ){",
          "3902:         aData = (unsigned char*)readFile(p->zDbFilename, &nData);",
          "3903:       }else{",
          "3904:         aData = readHexDb(p, &nData);",
          "3905:         if( aData==0 ){",
          "3906:           utf8_printf(stderr, \"Error in hexdb input\\n\");",
          "3907:           return;",
          "3908:         }",
          "3909:       }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "6749: #ifdef SQLITE_ENABLE_DESERIALIZE",
          "6750:       }else if( optionMatch(z, \"deserialize\") ){",
          "6751:         p->openMode = SHELL_OPEN_DESERIALIZE;",
          "6753:       }else if( z[0]=='-' ){",
          "6754:         utf8_printf(stderr, \"unknown option: %s\\n\", z);",
          "6755:         rc = 1;",
          "",
          "[Removed Lines]",
          "6752: #endif",
          "",
          "[Added Lines]",
          "6846:       }else if( optionMatch(z, \"hexdb\") ){",
          "6847:         p->openMode = SHELL_OPEN_HEXDB;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "6758:     }",
          "6760:     zNewFilename = nArg>iName ? sqlite3_mprintf(\"%s\", azArg[iName]) : 0;",
          "6762:       if( newFlag ) shellDeleteFile(zNewFilename);",
          "6763:       p->zDbFilename = zNewFilename;",
          "6764:       open_db(p, OPEN_DB_KEEPALIVE);",
          "",
          "[Removed Lines]",
          "6761:     if( zNewFilename ){",
          "",
          "[Added Lines]",
          "6857:     if( zNewFilename || p->openMode==SHELL_OPEN_HEXDB ){",
          "",
          "---------------"
        ],
        "tool/dbtotxt.c||tool/dbtotxt.c": [
          "File: tool/dbtotxt.c -> tool/dbtotxt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27: #include <stdio.h>",
          "28: #include <string.h>",
          "29: #include <stdlib.h>",
          "32: static int allZero(unsigned char *aLine){",
          "33:   int i;",
          "34:   for(i=0; i<16 && aLine[i]==0; i++){}",
          "35:   return i==16;",
          "36: }",
          "38: int main(int argc, char **argv){",
          "50:   for(i=1; i<argc; i++){",
          "51:     if( argv[i][0]=='-' ){",
          "52:       const char *z = argv[i];",
          "53:       z++;",
          "54:       if( z[0]=='-' ) z++;",
          "55:       if( strcmp(z,\"pagesize\")==0 ){",
          "56:         i++;",
          "57:         pgsz = atoi(argv[i]);",
          "58:         if( pgsz<512 || pgsz>65536 || (pgsz&(pgsz-1))!=0 ){",
          "59:           fprintf(stderr, \"Page size must be a power of two between\"",
          "60:                           \" 512 and 65536.\\n\");",
          "61:           nErr++;",
          "62:         }",
          "63:         continue;",
          "64:       }",
          "65:       fprintf(stderr, \"Unknown option: %s\\n\", argv[i]);",
          "66:       nErr++;",
          "67:     }else if( zInputFile ){",
          "68:       fprintf(stderr, \"Already using a different input file: [%s]\\n\", argv[i]);",
          "69:       nErr++;",
          "70:     }else{",
          "71:       zInputFile = argv[i];",
          "72:     }",
          "73:   }",
          "74:   if( zInputFile==0 ){",
          "75:     fprintf(stderr, \"No input file specified.\\n\");",
          "76:     nErr++;",
          "77:   }",
          "78:   if( nErr ){",
          "79:     fprintf(stderr, \"Usage: %s [--pagesize N] FILENAME\\n\", argv[0]);",
          "80:     exit(1);",
          "81:   }",
          "82:   in = fopen(zInputFile, \"rb\");",
          "83:   if( in==0 ){",
          "84:     fprintf(stderr, \"Cannot open input file [%s]\\n\", zInputFile);",
          "85:     exit(1);",
          "86:   }",
          "87:   fseek(in, 0, SEEK_END);",
          "88:   szFile = ftell(in);",
          "89:   rewind(in);",
          "90:   if( szFile<512 ){",
          "91:     fprintf(stderr, \"File too short. Minimum size is 512 bytes.\\n\");",
          "92:     exit(1);",
          "93:   }",
          "94:   if( fread(aHdr, 100, 1, in)!=1 ){",
          "95:     fprintf(stderr, \"Cannot read file header\\n\");",
          "96:     exit(1);",
          "97:   }",
          "98:   rewind(in);",
          "99:   if( pgsz==0 ){",
          "100:     pgsz = (aHdr[16]<<8) | aHdr[17];",
          "101:     if( pgsz==1 ) pgsz = 65536;",
          "102:     if( pgsz<512 || (pgsz&(pgsz-1))!=0 ){",
          "103:       fprintf(stderr, \"Invalid page size in header: %d\\n\", pgsz);",
          "104:       exit(1);",
          "105:     }",
          "106:   }",
          "107:   zBaseName = zInputFile;",
          "108:   for(i=0; zInputFile[i]; i++){",
          "109:     if( zInputFile[i]=='/' && zInputFile[i+1]!=0 ) zBaseName = zInputFile+1;",
          "110:   }",
          "111:   printf(\"| size %d pagesize %d filename %s\\n\",(int)szFile,pgsz,zBaseName);",
          "112:   for(i=0; i<szFile; i+=16){",
          "113:     int got = (int)fread(aLine, 1, 16, in);",
          "114:     if( got!=16 ){",
          "115:       static int once = 1;",
          "116:       if( once ){",
          "117:         fprintf(stderr, \"Could not read input file starting at byte %d\\n\",",
          "118:                          i+got);",
          "119:       }",
          "120:       memset(aLine+got, 0, 16-got);",
          "121:     }",
          "122:     if( allZero(aLine) ) continue;",
          "123:     iPage = i/pgsz + 1;",
          "124:     if( lastPage!=iPage ){",
          "125:       printf(\"| page %d offset %d\\n\", iPage, (iPage-1)*pgsz);",
          "126:       lastPage = iPage;",
          "127:     }",
          "128:     printf(\"|  %5d:\", i-(iPage-1)*pgsz);",
          "129:     for(j=0; j<16; j++) printf(\" %02x\", aLine[j]);",
          "130:     printf(\"   \");",
          "131:     for(j=0; j<16; j++){",
          "132:       char c = aLine[j];",
          "133:       fputc(c>=0x20 && c<=0x7e ? c : '.', stdout);",
          "134:     }",
          "135:     fputc('\\n', stdout);",
          "136:   }",
          "137:   fclose(in);",
          "138:   printf(\"| end %s\\n\", zBaseName);",
          "139:   return 0;",
          "140: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b6f2deac3c817bc6a13cce1e7f5316ad1e8fbec0",
      "candidate_info": {
        "commit_hash": "b6f2deac3c817bc6a13cce1e7f5316ad1e8fbec0",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/b6f2deac3c817bc6a13cce1e7f5316ad1e8fbec0",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/sqliteInt.h",
          "src/window.c"
        ],
        "message": "Avoid allocating excessive registers for the PARTITION BY expressions when processing window functions.\n\nFossilOrigin-Name: 180be266238e18c01f8bd52c75dd9aa3e26e553620258141cd95189a0ae59ddb",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/window.c||src/window.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 6ad553192051eaa0c6d929baacde2de07b93c6d09de861028bbce55a2c9bfdd3",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "3571:   int regResult;",
          "",
          "[Removed Lines]",
          "3574:   int regPart;            /* First in a set of registers holding PARTITION BY",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1118: void sqlite3WindowCodeInit(Parse *pParse, Window *pMWin){",
          "1119:   Window *pWin;",
          "1120:   Vdbe *v = sqlite3GetVdbe(pParse);",
          "1124:     pMWin->regPart = pParse->nMem+1;",
          "1127:   }",
          "1129:   pMWin->regFirst = ++pParse->nMem;",
          "",
          "[Removed Lines]",
          "1121:   int nPart = (pMWin->pPartition ? pMWin->pPartition->nExpr : 0);",
          "1122:   nPart += (pMWin->pOrderBy ? pMWin->pOrderBy->nExpr : 0);",
          "1123:   if( nPart ){",
          "1125:     pParse->nMem += nPart;",
          "1126:     sqlite3VdbeAddOp3(v, OP_Null, 0, pMWin->regPart, pMWin->regPart+nPart-1);",
          "",
          "[Added Lines]",
          "1124:   if( pMWin->pPartition ){",
          "1125:     int nExpr = pMWin->pPartition->nExpr;",
          "1127:     pParse->nMem += nExpr;",
          "1128:     sqlite3VdbeAddOp3(v, OP_Null, 0, pMWin->regPart, pMWin->regPart+nExpr-1);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2302:   sqlite3VdbeAddOp2(v, OP_Integer, 0, pMWin->regFirst);",
          "2303:   sqlite3VdbeAddOp2(v, OP_Goto, 0, lblWhereEnd);",
          "2307:   sqlite3VdbeJumpHere(v, addrIfNot);",
          "2308:   if( regPeer ){",
          "2309:     windowIfNewPeer(pParse, pOrderBy, regNewPeer, regPeer, lblWhereEnd);",
          "",
          "[Removed Lines]",
          "2306:   VdbeModuleComment((pParse->pVdbe, \"Begin WindowCodeStep.SECOND_ROW\"));",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2354:       }",
          "2355:     }",
          "2356:   }",
          "2360:   sqlite3VdbeResolveLabel(v, lblWhereEnd);",
          "",
          "[Removed Lines]",
          "2357:   VdbeModuleComment((pParse->pVdbe, \"End WindowCodeStep.SECOND_ROW\"));",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2366:     sqlite3VdbeJumpHere(v, addrGosubFlush);",
          "2367:   }",
          "2370:   addrEmpty = sqlite3VdbeAddOp1(v, OP_Rewind, csrWrite);",
          "2371:   if( pMWin->eEnd==TK_PRECEDING ){",
          "2372:     windowCodeOp(&s, WINDOW_AGGSTEP, regEnd, 0);",
          "",
          "[Removed Lines]",
          "2369:   VdbeModuleComment((pParse->pVdbe, \"Begin WindowCodeStep.FLUSH\"));",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2414:   sqlite3VdbeAddOp1(v, OP_ResetSorter, s.current.csr);",
          "2415:   sqlite3VdbeAddOp2(v, OP_Integer, 1, pMWin->regFirst);",
          "2417:   if( pMWin->pPartition ){",
          "2418:     sqlite3VdbeChangeP1(v, addrInteger, sqlite3VdbeCurrentAddr(v));",
          "2419:     sqlite3VdbeAddOp1(v, OP_Return, regFlushPart);",
          "",
          "[Removed Lines]",
          "2416:   VdbeModuleComment((pParse->pVdbe, \"End WindowCodeStep.FLUSH\"));",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6c35b3065c509ec49a0ca40c85df2fdf3274306b",
      "candidate_info": {
        "commit_hash": "6c35b3065c509ec49a0ca40c85df2fdf3274306b",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/6c35b3065c509ec49a0ca40c85df2fdf3274306b",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/pragma.c",
          "src/sqlite.h.in",
          "test/jrnlmode.test"
        ],
        "message": "Disable PRAGMA journal_mode=OFF when SQLITE_DBCONFIG_DEFENSIVE is turned on. Ticket [f4ec250930342e0c].\n\nFossilOrigin-Name: a0f5eb5c79cc33b7224f3421d2baa02a2a19eb9d6eaa8117dda4a1878b229cb5",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/pragma.c||src/pragma.c",
          "src/sqlite.h.in||src/sqlite.h.in",
          "test/jrnlmode.test||test/jrnlmode.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 14c00b1016ba53ab2dc177c59a27b6b9209202973685f0f274112d296ba7dfcb",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/pragma.c||src/pragma.c": [
          "File: src/pragma.c -> src/pragma.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "645:         eMode = PAGER_JOURNALMODE_QUERY;",
          "646:       }",
          "647:     }",
          "648:     if( eMode==PAGER_JOURNALMODE_QUERY && pId2->n==0 ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "647:       if( eMode==PAGER_JOURNALMODE_OFF && (db->flags & SQLITE_Defensive)!=0 ){",
          "650:         eMode = PAGER_JOURNALMODE_QUERY;",
          "651:       }",
          "",
          "---------------"
        ],
        "src/sqlite.h.in||src/sqlite.h.in": [
          "File: src/sqlite.h.in -> src/sqlite.h.in"
        ],
        "test/jrnlmode.test||test/jrnlmode.test": [
          "File: test/jrnlmode.test -> test/jrnlmode.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "65:     PRAGMA temp.journal_mode;",
          "66:   }",
          "67: } [list persist persist [temp_journal_mode persist]]",
          "69:   execsql {",
          "70:     PRAGMA journal_mode = off;",
          "71:   }",
          "",
          "[Removed Lines]",
          "68: do_test jrnlmode-1.4 {",
          "",
          "[Added Lines]",
          "68: do_test jrnlmode-1.4a {",
          "69:   # When defensive is on, unable to set journal_mode to OFF",
          "70:   sqlite3_db_config db DEFENSIVE 1",
          "71:   execsql {",
          "72:     PRAGMA journal_mode = off;",
          "73:   }",
          "74: } {persist}",
          "75: do_test jrnlmode-1.4b {",
          "76:   # When defensive is on, unable to set journal_mode to OFF",
          "77:   sqlite3_db_config db DEFENSIVE 0",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "dfb5c963a0b643a6179de67f419f2019c4eb5dee",
      "candidate_info": {
        "commit_hash": "dfb5c963a0b643a6179de67f419f2019c4eb5dee",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/dfb5c963a0b643a6179de67f419f2019c4eb5dee",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "test/altertab2.test"
        ],
        "message": "Fix a problem with ALTER TABLE and vector assignments in UPDATE statements within triggers.\n\nFossilOrigin-Name: cc6cd7531fee39b4c2a9f522f1089c1d79254a9e25acae59468322031f94c25a",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "test/altertab2.test||test/altertab2.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: a5e9cc794f17566160c4b2b5791601a744a21ace987b19ff8a5816fd78dce56a",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "465:   }else{",
          "466:     if( pVector->op==TK_VECTOR ) pVector = pVector->x.pList->a[iField].pExpr;",
          "467:     pRet = sqlite3ExprDup(pParse->db, pVector, 0);",
          "468:   }",
          "469:   return pRet;",
          "470: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "468:     sqlite3RenameTokenRemap(pParse, pRet, pVector);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1668:   }",
          "1670: vector_append_error:",
          "1671:   sqlite3ExprDelete(db, pExpr);",
          "1672:   sqlite3IdListDelete(db, pColumns);",
          "1673:   return pList;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1672:   if( IN_RENAME_OBJECT ){",
          "1673:     sqlite3RenameExprUnmap(pParse, pExpr);",
          "1674:   }",
          "",
          "---------------"
        ],
        "test/altertab2.test||test/altertab2.test": [
          "File: test/altertab2.test -> test/altertab2.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "142:   } $expect",
          "143: }",
          "145: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "145: #-------------------------------------------------------------------------",
          "146: reset_db",
          "147: do_execsql_test 4.0 {",
          "148:   CREATE TABLE t1(a,b,c,d,e,f);",
          "149:   CREATE TRIGGER r1 AFTER INSERT ON t1 WHEN new.a NOT NULL BEGIN",
          "150:     UPDATE t1 SET (c,d)=(a,b);",
          "151:   END;",
          "152: }",
          "154: do_execsql_test 4.1 {",
          "155:   ALTER TABLE t1 RENAME TO t1x;",
          "156:   SELECT sql FROM sqlite_master WHERE type = 'trigger';",
          "157: } {",
          "158: {CREATE TRIGGER r1 AFTER INSERT ON \"t1x\" WHEN new.a NOT NULL BEGIN",
          "159:     UPDATE \"t1x\" SET (c,d)=(a,b);",
          "160:   END}",
          "161: }",
          "163: do_execsql_test 4.2 {",
          "164:   ALTER TABLE t1x RENAME a TO aaa;",
          "165:   SELECT sql FROM sqlite_master WHERE type = 'trigger';",
          "166: } {",
          "167: {CREATE TRIGGER r1 AFTER INSERT ON \"t1x\" WHEN new.aaa NOT NULL BEGIN",
          "168:     UPDATE \"t1x\" SET (c,d)=(aaa,b);",
          "169:   END}",
          "170: }",
          "172: do_execsql_test 4.3 {",
          "173:   ALTER TABLE t1x RENAME d TO ddd;",
          "174:   SELECT sql FROM sqlite_master WHERE type = 'trigger';",
          "175: } {",
          "176: {CREATE TRIGGER r1 AFTER INSERT ON \"t1x\" WHEN new.aaa NOT NULL BEGIN",
          "177:     UPDATE \"t1x\" SET (c,ddd)=(aaa,b);",
          "178:   END}",
          "179: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}