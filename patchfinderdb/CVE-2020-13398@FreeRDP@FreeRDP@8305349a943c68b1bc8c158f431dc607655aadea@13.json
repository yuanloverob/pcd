{
  "cve_id": "CVE-2020-13398",
  "cve_desc": "An issue was discovered in FreeRDP before 2.1.1. An out-of-bounds (OOB) write vulnerability has been detected in crypto_rsa_common in libfreerdp/crypto/crypto.c.",
  "repo": "FreeRDP/FreeRDP",
  "patch_hash": "8305349a943c68b1bc8c158f431dc607655aadea",
  "patch_info": {
    "commit_hash": "8305349a943c68b1bc8c158f431dc607655aadea",
    "repo": "FreeRDP/FreeRDP",
    "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/8305349a943c68b1bc8c158f431dc607655aadea",
    "files": [
      "libfreerdp/crypto/crypto.c"
    ],
    "message": "Fixed  GHSL-2020-102 heap overflow\n\n(cherry picked from commit 197b16cc15a12813c2e4fa2d6ae9cd9c4a57e581)",
    "before_after_code_files": [
      "libfreerdp/crypto/crypto.c||libfreerdp/crypto/crypto.c"
    ]
  },
  "patch_diff": {
    "libfreerdp/crypto/crypto.c||libfreerdp/crypto/crypto.c": [
      "File: libfreerdp/crypto/crypto.c -> libfreerdp/crypto/crypto.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "96: static int crypto_rsa_common(const BYTE* input, int length, UINT32 key_length, const BYTE* modulus,",
      "97:                              const BYTE* exponent, int exponent_size, BYTE* output)",
      "98: {",
      "100:  int output_length = -1;",
      "107:  if (!input_reverse)",
      "108:   return -1;",
      "",
      "[Removed Lines]",
      "99:  BN_CTX* ctx;",
      "101:  BYTE* input_reverse;",
      "102:  BYTE* modulus_reverse;",
      "103:  BYTE* exponent_reverse;",
      "104:  BIGNUM *mod, *exp, *x, *y;",
      "105:  input_reverse = (BYTE*)malloc(2 * key_length + exponent_size);",
      "",
      "[Added Lines]",
      "99:  BN_CTX* ctx = NULL;",
      "101:  BYTE* input_reverse = NULL;",
      "102:  BYTE* modulus_reverse = NULL;",
      "103:  BYTE* exponent_reverse = NULL;",
      "104:  BIGNUM* mod = NULL;",
      "105:  BIGNUM* exp = NULL;",
      "106:  BIGNUM* x = NULL;",
      "107:  BIGNUM* y = NULL;",
      "108:  size_t bufferSize = 2 * key_length + exponent_size;",
      "110:  if (!input || (length < 0) || (exponent_size < 0) || !modulus || !exponent || !output)",
      "111:   return -1;",
      "113:  if (length > bufferSize)",
      "114:   bufferSize = length;",
      "116:  input_reverse = (BYTE*)calloc(bufferSize, 1);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "131:  if (!(y = BN_new()))",
      "132:   goto fail_bn_y;",
      "138:  output_length = BN_bn2bin(y, output);",
      "139:  crypto_reverse(output, output_length);",
      "142:   memset(output + output_length, 0, key_length - output_length);",
      "144:  BN_free(y);",
      "145: fail_bn_y:",
      "146:  BN_clear_free(x);",
      "",
      "[Removed Lines]",
      "134:  BN_bin2bn(modulus_reverse, key_length, mod);",
      "135:  BN_bin2bn(exponent_reverse, exponent_size, exp);",
      "136:  BN_bin2bn(input_reverse, length, x);",
      "137:  BN_mod_exp(y, x, exp, mod, ctx);",
      "141:  if (output_length < (int)key_length)",
      "",
      "[Added Lines]",
      "145:  if (!BN_bin2bn(modulus_reverse, key_length, mod))",
      "146:   goto fail;",
      "148:  if (!BN_bin2bn(exponent_reverse, exponent_size, exp))",
      "149:   goto fail;",
      "150:  if (!BN_bin2bn(input_reverse, length, x))",
      "151:   goto fail;",
      "152:  if (BN_mod_exp(y, x, exp, mod, ctx) != 1)",
      "153:   goto fail;",
      "155:  if (output_length < 0)",
      "156:   goto fail;",
      "159:  if (output_length < key_length)",
      "162: fail:",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "df63cfb55f4ee96a69199ef285dc37ef8ea0b12c",
      "candidate_info": {
        "commit_hash": "df63cfb55f4ee96a69199ef285dc37ef8ea0b12c",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/df63cfb55f4ee96a69199ef285dc37ef8ea0b12c",
        "files": [
          "libfreerdp/core/info.c"
        ],
        "message": "Reformatted to satisfy clang-format\n\n(cherry picked from commit a4e95f8e65dfbfd2625034ad6740645366a6c0c0)",
        "before_after_code_files": [
          "libfreerdp/core/info.c||libfreerdp/core/info.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6212"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "libfreerdp/core/info.c||libfreerdp/core/info.c": [
          "File: libfreerdp/core/info.c -> libfreerdp/core/info.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "466: static BOOL rdp_read_info_string(UINT32 flags, wStream* s, size_t cbLenNonNull, CHAR** dst,",
          "467:                                  size_t max)",
          "468: {",
          "471:   char c;",
          "472:   WCHAR w;",
          "473:   BYTE b[2];",
          "",
          "[Removed Lines]",
          "469:  union",
          "470:  {",
          "",
          "[Added Lines]",
          "469:  union {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b222b10c7bde3df2ae2803c6bd1a7ce8a6352f37",
      "candidate_info": {
        "commit_hash": "b222b10c7bde3df2ae2803c6bd1a7ce8a6352f37",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/b222b10c7bde3df2ae2803c6bd1a7ce8a6352f37",
        "files": [
          "server/shadow/freerdp-shadow-cli.1.in",
          "winpr/tools/makecert-cli/winpr-makecert.1.in"
        ],
        "message": "Fixed typos (Otherweise)\n\nOtherweise ->\nOtherw ise\n      ^\n\n(cherry picked from commit 148f3c675d02da2c7f19b3099ba8792f5594416b)",
        "before_after_code_files": [
          "server/shadow/freerdp-shadow-cli.1.in||server/shadow/freerdp-shadow-cli.1.in",
          "winpr/tools/makecert-cli/winpr-makecert.1.in||winpr/tools/makecert-cli/winpr-makecert.1.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6212"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "server/shadow/freerdp-shadow-cli.1.in||server/shadow/freerdp-shadow-cli.1.in": [
          "File: server/shadow/freerdp-shadow-cli.1.in -> server/shadow/freerdp-shadow-cli.1.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "76: Successful program execution.",
          "77: .TP",
          "78: .B 1",
          "81: .SH SEE ALSO",
          "82: wlog(7)",
          "",
          "[Removed Lines]",
          "79: Otherweise.",
          "",
          "[Added Lines]",
          "79: Otherwise.",
          "",
          "---------------"
        ],
        "winpr/tools/makecert-cli/winpr-makecert.1.in||winpr/tools/makecert-cli/winpr-makecert.1.in": [
          "File: winpr/tools/makecert-cli/winpr-makecert.1.in -> winpr/tools/makecert-cli/winpr-makecert.1.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "106: Successful program execution.",
          "107: .TP",
          "108: .B 1",
          "111: .SH SEE ALSO",
          "",
          "[Removed Lines]",
          "109: Otherweise.",
          "",
          "[Added Lines]",
          "109: Otherwise.",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e805752c4e8ff99bcf0f62347a3ee0ae35181df1",
      "candidate_info": {
        "commit_hash": "e805752c4e8ff99bcf0f62347a3ee0ae35181df1",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/e805752c4e8ff99bcf0f62347a3ee0ae35181df1",
        "files": [
          "channels/drdynvc/client/drdynvc_main.c",
          "channels/urbdrc/client/data_transfer.c",
          "channels/urbdrc/client/libusb/libusb_udevice.c",
          "libfreerdp/codec/planar.c",
          "libfreerdp/core/gateway/rdg.c",
          "libfreerdp/core/orders.c",
          "libfreerdp/crypto/crypto.c",
          "server/proxy/modules/capture/cap_main.c"
        ],
        "message": "Fixed compilation warnings.\n\n(cherry picked from commit 57b405ca265966fd3790cb3f30d0b0c073268e7c)",
        "before_after_code_files": [
          "channels/drdynvc/client/drdynvc_main.c||channels/drdynvc/client/drdynvc_main.c",
          "channels/urbdrc/client/data_transfer.c||channels/urbdrc/client/data_transfer.c",
          "channels/urbdrc/client/libusb/libusb_udevice.c||channels/urbdrc/client/libuslibusb_udevice.c",
          "libfreerdp/codec/planar.c||libfreerdp/codec/planar.c",
          "libfreerdp/core/gateway/rdg.c||libfreerdp/core/gateway/rdg.c",
          "libfreerdp/core/orders.c||libfreerdp/core/orders.c",
          "libfreerdp/crypto/crypto.c||libfreerdp/crypto/crypto.c",
          "server/proxy/modules/capture/cap_main.c||server/proxy/modules/capture/cap_main.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libfreerdp/crypto/crypto.c||libfreerdp/crypto/crypto.c"
          ],
          "candidate": [
            "libfreerdp/crypto/crypto.c||libfreerdp/crypto/crypto.c"
          ]
        }
      },
      "candidate_diff": {
        "channels/drdynvc/client/drdynvc_main.c||channels/drdynvc/client/drdynvc_main.c": [
          "File: channels/drdynvc/client/drdynvc_main.c -> channels/drdynvc/client/drdynvc_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "416: static UINT dvcman_init(drdynvcPlugin* drdynvc, IWTSVirtualChannelManager* pChannelMgr)",
          "417: {",
          "419:  DVCMAN* dvcman = (DVCMAN*)pChannelMgr;",
          "420:  UINT error = CHANNEL_RC_OK;",
          "",
          "[Removed Lines]",
          "418:  size_t i;",
          "",
          "[Added Lines]",
          "418:  int i;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "483: static UINT dvcman_create_channel(drdynvcPlugin* drdynvc, IWTSVirtualChannelManager* pChannelMgr,",
          "484:                                   UINT32 ChannelId, const char* ChannelName)",
          "485: {",
          "487:  BOOL bAccept;",
          "488:  DVCMAN_CHANNEL* channel;",
          "489:  DrdynvcClientContext* context;",
          "",
          "[Removed Lines]",
          "486:  size_t i;",
          "",
          "[Added Lines]",
          "486:  int i;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1606: static UINT drdynvc_virtual_channel_event_attached(drdynvcPlugin* drdynvc)",
          "1607: {",
          "1608:  UINT error = CHANNEL_RC_OK;",
          "1610:  DVCMAN* dvcman;",
          "1612:  if (!drdynvc)",
          "",
          "[Removed Lines]",
          "1609:  size_t i;",
          "",
          "[Added Lines]",
          "1609:  int i;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1638: static UINT drdynvc_virtual_channel_event_detached(drdynvcPlugin* drdynvc)",
          "1639: {",
          "1640:  UINT error = CHANNEL_RC_OK;",
          "1642:  DVCMAN* dvcman;",
          "1644:  if (!drdynvc)",
          "",
          "[Removed Lines]",
          "1641:  size_t i;",
          "",
          "[Added Lines]",
          "1641:  int i;",
          "",
          "---------------"
        ],
        "channels/urbdrc/client/data_transfer.c||channels/urbdrc/client/data_transfer.c": [
          "File: channels/urbdrc/client/data_transfer.c -> channels/urbdrc/client/data_transfer.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "454:  if (MsConfig)",
          "455:   MsOutSize = MsConfig->MsOutSize;",
          "460:  if (MsOutSize > 0)",
          "461:   out_size = 36 + MsOutSize;",
          "462:  else",
          "463:   out_size = 44;",
          "",
          "[Removed Lines]",
          "457:  if (MsOutSize > SIZE_MAX - 36)",
          "458:   return ERROR_INVALID_DATA;",
          "",
          "[Added Lines]",
          "458:  {",
          "459:   if ((size_t)MsOutSize > SIZE_MAX - 36)",
          "460:    return ERROR_INVALID_DATA;",
          "463:  }",
          "",
          "---------------"
        ],
        "channels/urbdrc/client/libusb/libusb_udevice.c||channels/urbdrc/client/libuslibusb_udevice.c": [
          "File: channels/urbdrc/client/libusb/libusb_udevice.c -> channels/urbdrc/client/libuslibusb_udevice.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "799:    if ((ret <= 0) || (ret <= 4) || (slen <= 4) || (locale != LIBUSB_DT_STRING) ||",
          "800:        (ret > UINT8_MAX))",
          "801:    {",
          "803:     if (ret < 0)",
          "804:      msg = libusb_error_name(ret);",
          "805:     WLog_Print(urbdrc->log, WLOG_DEBUG,",
          "",
          "[Removed Lines]",
          "802:     char* msg = \"SHORT_DESCRIPTOR\";",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "841:    sprintf_s(deviceLocation, sizeof(deviceLocation),",
          "842:              \"Port_#%04\" PRIu8 \".Hub_#%04\" PRIu8 \"\", device_address, bus_number);",
          "845:    for (i = 0; i < len; i++)",
          "846:     text[i] = (WCHAR)deviceLocation[i];",
          "847:    text[len++] = '\\0';",
          "",
          "[Removed Lines]",
          "844:    len = strnlen(deviceLocation, MIN(sizeof(deviceLocation), inSize - 1));",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "libfreerdp/codec/planar.c||libfreerdp/codec/planar.c": [
          "File: libfreerdp/codec/planar.c -> libfreerdp/codec/planar.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "482: {",
          "483:  size_t pos = 0;",
          "484:  UINT32 y;",
          "485:  if (!plane || !deltaPlane)",
          "486:   return FALSE;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "485:  WINPR_UNUSED(planeLength);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1195:   {",
          "1196:    INT32 delta = *srcPtr - *prevLinePtr;",
          "1197:    s2c = (delta >= 0) ? (char)delta : (char)(~((BYTE)(-delta)) + 1);",
          "1200:   }",
          "1201:  }",
          "",
          "[Removed Lines]",
          "1198:    s2c = (s2c >= 0) ? ((UINT32)s2c << 1) : (char)(((UINT32)(~((BYTE)s2c) + 1) << 1) - 1);",
          "",
          "[Added Lines]",
          "1200:    s2c = (s2c >= 0) ? (char)((UINT32)s2c << 1)",
          "1201:                     : (char)(((UINT32)(~((BYTE)s2c) + 1) << 1) - 1);",
          "",
          "---------------"
        ],
        "libfreerdp/core/gateway/rdg.c||libfreerdp/core/gateway/rdg.c": [
          "File: libfreerdp/core/gateway/rdg.c -> libfreerdp/core/gateway/rdg.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "245: static BOOL rdg_read_http_unicode_string(wStream* s, WCHAR** string, UINT16* lengthInBytes)",
          "246: {",
          "248:  UINT16 strLenBytes;",
          "",
          "[Removed Lines]",
          "247:  WCHAR* str;",
          "",
          "[Added Lines]",
          "247:  union {",
          "248:   BYTE* b;",
          "249:   WCHAR* w;",
          "250:  } str;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "253:  Stream_Read_UINT16(s, strLenBytes);",
          "259:  if (!Stream_SafeSeek(s, strLenBytes))",
          "",
          "[Removed Lines]",
          "256:  Stream_GetPointer(s, str);",
          "",
          "[Added Lines]",
          "259:  Stream_GetPointer(s, str.b);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "741:  if (fieldsPresent & HTTP_TUNNEL_RESPONSE_FIELD_SOH_REQ)",
          "742:  {",
          "746:   if (!Stream_SafeSeek(s, 20))",
          "747:   {",
          "",
          "[Removed Lines]",
          "743:   UINT16 certLen;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "libfreerdp/core/orders.c||libfreerdp/core/orders.c": [
          "File: libfreerdp/core/orders.c -> libfreerdp/core/orders.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2618: }",
          "2619: static BOOL update_decompress_brush(wStream* s, BYTE* output, size_t outSize, BYTE bpp)",
          "2620: {",
          "2622:  BYTE byte = 0;",
          "2623:  const BYTE* palette = Stream_Pointer(s) + 16;",
          "2626:  if (Stream_GetRemainingLength(s) < 16 + bytesPerPixel * 4)",
          "2627:   return FALSE;",
          "",
          "[Removed Lines]",
          "2621:  INT32 x, y, k;",
          "2624:  const INT32 bytesPerPixel = ((bpp + 1) / 8);",
          "",
          "[Added Lines]",
          "2621:  size_t x, k;",
          "2622:  INT8 y;",
          "2625:  const size_t bytesPerPixel = ((bpp + 1) / 8);",
          "",
          "---------------"
        ],
        "libfreerdp/crypto/crypto.c||libfreerdp/crypto/crypto.c": [
          "File: libfreerdp/crypto/crypto.c -> libfreerdp/crypto/crypto.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "110:  if (!input || (length < 0) || (exponent_size < 0) || !modulus || !exponent || !output)",
          "111:   return -1;",
          "114:   return -1;",
          "116:  if (key_length >= SIZE_MAX / 2 - exponent_size)",
          "117:   return -1;",
          "119:  bufferSize = 2ULL * key_length + exponent_size;",
          "123:  input_reverse = (BYTE*)calloc(bufferSize, 1);",
          "",
          "[Removed Lines]",
          "113:  if (exponent_size > SIZE_MAX / 2)",
          "120:  if (length > bufferSize)",
          "121:   bufferSize = length;",
          "",
          "[Added Lines]",
          "113:  if ((size_t)exponent_size > SIZE_MAX / 2)",
          "120:  if ((size_t)length > bufferSize)",
          "121:   bufferSize = (size_t)length;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "163:   goto fail;",
          "164:  crypto_reverse(output, output_length);",
          "167:   memset(output + output_length, 0, key_length - output_length);",
          "169: fail:",
          "",
          "[Removed Lines]",
          "166:  if (output_length < key_length)",
          "",
          "[Added Lines]",
          "166:  if ((UINT32)output_length < key_length)",
          "",
          "---------------"
        ],
        "server/proxy/modules/capture/cap_main.c||server/proxy/modules/capture/cap_main.c": [
          "File: server/proxy/modules/capture/cap_main.c -> server/proxy/modules/capture/cap_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "127:  wStream* s;",
          "129:  socket = capture_plugin_get_socket(pdata);",
          "131:   return FALSE;",
          "133:  s = capture_plugin_packet_new(SESSION_END_PDU_BASE_SIZE, MESSAGE_TYPE_SESSION_END);",
          "",
          "[Removed Lines]",
          "130:  if (socket == -1)",
          "",
          "[Added Lines]",
          "130:  if ((INT64)socket == -1LL)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "191:   return TRUE;",
          "193:  socket = capture_plugin_get_socket(pdata);",
          "195:   return FALSE;",
          "197:  if (!capture_plugin_send_frame(pc, socket, gdi->primary_buffer))",
          "",
          "[Removed Lines]",
          "194:  if (socket == -1)",
          "",
          "[Added Lines]",
          "194:  if ((INT64)socket == -1LL)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "213:  rdpSettings* settings = pc->context.settings;",
          "215:  socket = capture_plugin_init_socket();",
          "217:  {",
          "218:   WLog_ERR(TAG, \"failed to establish a connection\");",
          "219:   return FALSE;",
          "",
          "[Removed Lines]",
          "216:  if (socket == -1)",
          "",
          "[Added Lines]",
          "216:  if ((INT64)socket == -1LL)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cb2adc84c0a69997c78709f20e3959b986559a7e",
      "candidate_info": {
        "commit_hash": "cb2adc84c0a69997c78709f20e3959b986559a7e",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/cb2adc84c0a69997c78709f20e3959b986559a7e",
        "files": [
          "libfreerdp/crypto/crypto.c"
        ],
        "message": "Fixed possible integer overflow in crypto_rsa_common\n\nThanks @anticomputer for pointing this out\n\n(cherry picked from commit 02c5ec66e5b47fe4cf2fc96e2cd387a18e3f2bb6)",
        "before_after_code_files": [
          "libfreerdp/crypto/crypto.c||libfreerdp/crypto/crypto.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libfreerdp/crypto/crypto.c||libfreerdp/crypto/crypto.c"
          ],
          "candidate": [
            "libfreerdp/crypto/crypto.c||libfreerdp/crypto/crypto.c"
          ]
        }
      },
      "candidate_diff": {
        "libfreerdp/crypto/crypto.c||libfreerdp/crypto/crypto.c": [
          "File: libfreerdp/crypto/crypto.c -> libfreerdp/crypto/crypto.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "105:  BIGNUM* exp = NULL;",
          "106:  BIGNUM* x = NULL;",
          "107:  BIGNUM* y = NULL;",
          "110:  if (!input || (length < 0) || (exponent_size < 0) || !modulus || !exponent || !output)",
          "111:   return -1;",
          "113:  if (length > bufferSize)",
          "114:   bufferSize = length;",
          "",
          "[Removed Lines]",
          "108:  size_t bufferSize = 2 * key_length + exponent_size;",
          "",
          "[Added Lines]",
          "108:  size_t bufferSize;",
          "113:  if (exponent_size > SIZE_MAX / 2)",
          "114:   return -1;",
          "116:  if (key_length >= SIZE_MAX / 2 - exponent_size)",
          "117:   return -1;",
          "119:  bufferSize = 2ULL * key_length + exponent_size;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d936402878230fcf9126f38213e28996258a6c4e",
      "candidate_info": {
        "commit_hash": "d936402878230fcf9126f38213e28996258a6c4e",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/d936402878230fcf9126f38213e28996258a6c4e",
        "files": [
          "libfreerdp/crypto/crypto.c"
        ],
        "message": "Fixed  GHSL-2020-102 heap overflow",
        "before_after_code_files": [
          "libfreerdp/crypto/crypto.c||libfreerdp/crypto/crypto.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "libfreerdp/crypto/crypto.c||libfreerdp/crypto/crypto.c"
          ],
          "candidate": [
            "libfreerdp/crypto/crypto.c||libfreerdp/crypto/crypto.c"
          ]
        }
      },
      "candidate_diff": {
        "libfreerdp/crypto/crypto.c||libfreerdp/crypto/crypto.c": [
          "File: libfreerdp/crypto/crypto.c -> libfreerdp/crypto/crypto.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "96: static int crypto_rsa_common(const BYTE* input, int length, UINT32 key_length, const BYTE* modulus,",
          "97:                              const BYTE* exponent, int exponent_size, BYTE* output)",
          "98: {",
          "100:  int output_length = -1;",
          "107:  if (!input_reverse)",
          "108:   return -1;",
          "",
          "[Removed Lines]",
          "99:  BN_CTX* ctx;",
          "101:  BYTE* input_reverse;",
          "102:  BYTE* modulus_reverse;",
          "103:  BYTE* exponent_reverse;",
          "104:  BIGNUM *mod, *exp, *x, *y;",
          "105:  input_reverse = (BYTE*)malloc(2 * key_length + exponent_size);",
          "",
          "[Added Lines]",
          "99:  BN_CTX* ctx = NULL;",
          "101:  BYTE* input_reverse = NULL;",
          "102:  BYTE* modulus_reverse = NULL;",
          "103:  BYTE* exponent_reverse = NULL;",
          "104:  BIGNUM* mod = NULL;",
          "105:  BIGNUM* exp = NULL;",
          "106:  BIGNUM* x = NULL;",
          "107:  BIGNUM* y = NULL;",
          "108:  size_t bufferSize = 2 * key_length + exponent_size;",
          "110:  if (!input || (length < 0) || (exponent_size < 0) || !modulus || !exponent || !output)",
          "111:   return -1;",
          "113:  if (length > bufferSize)",
          "114:   bufferSize = length;",
          "116:  input_reverse = (BYTE*)calloc(bufferSize, 1);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "131:  if (!(y = BN_new()))",
          "132:   goto fail_bn_y;",
          "138:  output_length = BN_bn2bin(y, output);",
          "139:  crypto_reverse(output, output_length);",
          "142:   memset(output + output_length, 0, key_length - output_length);",
          "144:  BN_free(y);",
          "145: fail_bn_y:",
          "146:  BN_clear_free(x);",
          "",
          "[Removed Lines]",
          "134:  BN_bin2bn(modulus_reverse, key_length, mod);",
          "135:  BN_bin2bn(exponent_reverse, exponent_size, exp);",
          "136:  BN_bin2bn(input_reverse, length, x);",
          "137:  BN_mod_exp(y, x, exp, mod, ctx);",
          "141:  if (output_length < (int)key_length)",
          "",
          "[Added Lines]",
          "145:  if (!BN_bin2bn(modulus_reverse, key_length, mod))",
          "146:   goto fail;",
          "148:  if (!BN_bin2bn(exponent_reverse, exponent_size, exp))",
          "149:   goto fail;",
          "150:  if (!BN_bin2bn(input_reverse, length, x))",
          "151:   goto fail;",
          "152:  if (BN_mod_exp(y, x, exp, mod, ctx) != 1)",
          "153:   goto fail;",
          "155:  if (output_length < 0)",
          "156:   goto fail;",
          "159:  if (output_length < key_length)",
          "162: fail:",
          "",
          "---------------"
        ]
      }
    }
  ]
}