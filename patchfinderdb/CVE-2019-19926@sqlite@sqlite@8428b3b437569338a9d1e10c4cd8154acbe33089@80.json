{
  "cve_id": "CVE-2019-19926",
  "cve_desc": "multiSelect in select.c in SQLite 3.30.1 mishandles certain errors during parsing, as demonstrated by errors from sqlite3WindowRewrite() calls. NOTE: this vulnerability exists because of an incomplete fix for CVE-2019-19880.",
  "repo": "sqlite/sqlite",
  "patch_hash": "8428b3b437569338a9d1e10c4cd8154acbe33089",
  "patch_info": {
    "commit_hash": "8428b3b437569338a9d1e10c4cd8154acbe33089",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/8428b3b437569338a9d1e10c4cd8154acbe33089",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c"
    ],
    "message": "Continuation of [e2bddcd4c55ba3cb]: Add another spot where it is necessary to abort early due to prior errors in sqlite3WindowRewrite().\n\nFossilOrigin-Name: cba2a2a44cdf138a629109bb0ad088ed4ef67fc66bed3e0373554681a39615d2",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 3d4c0bf8904135fa68c75801bfa738715cacc3b19dc8ad6ef550b11798d4b121",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2809:     }",
      "2810:   #endif",
      "2811:   }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2812:   if( pParse->nErr ) goto multi_select_end;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "3242c69c9140d54d98b110b72055e17fd6ede5e0",
      "candidate_info": {
        "commit_hash": "3242c69c9140d54d98b110b72055e17fd6ede5e0",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/3242c69c9140d54d98b110b72055e17fd6ede5e0",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbe.c",
          "src/vdbeapi.c",
          "src/vdbeaux.c",
          "src/vdbemem.c"
        ],
        "message": "New testcase macros to ensure that MEM_IntReal is fully tested.\n\nFossilOrigin-Name: 8b8ef445ccccc148af2cda5975986af0d134352fe16283f65d0f8a91c9ffa932",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbe.c||src/vdbe.c",
          "src/vdbeapi.c||src/vdbeapi.c",
          "src/vdbeaux.c||src/vdbeaux.c",
          "src/vdbemem.c||src/vdbemem.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: c9838731325e0ca73bd8784c10c74ae043fed7861e6de269fd90e29fa4a19955",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "355:       if( (pRec->flags&(MEM_Real|MEM_Int|MEM_IntReal)) ){",
          "356:         sqlite3VdbeMemStringify(pRec, enc, 1);",
          "357:       }",
          "358:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "356:         testcase( pRec->flags & MEM_Int );",
          "357:         testcase( pRec->flags & MEM_Real );",
          "358:         testcase( pRec->flags & MEM_IntReal );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "417: static u16 numericType(Mem *pMem){",
          "418:   if( pMem->flags & (MEM_Int|MEM_Real|MEM_IntReal) ){",
          "419:     return pMem->flags & (MEM_Int|MEM_Real|MEM_IntReal);",
          "420:   }",
          "421:   if( pMem->flags & (MEM_Str|MEM_Blob) ){",
          "422:     return computeNumericType(pMem);",
          "423:   }",
          "424:   return 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "422:     testcase( pMem->flags & MEM_Int );",
          "423:     testcase( pMem->flags & MEM_Real );",
          "424:     testcase( pMem->flags & MEM_IntReal );",
          "428:     testcase( pMem->flags & MEM_Str );",
          "429:     testcase( pMem->flags & MEM_Blob );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1803:   pIn1 = &aMem[pOp->p1];",
          "1804:   if( pIn1->flags & (MEM_Int|MEM_IntReal) ){",
          "1805:     sqlite3VdbeMemRealify(pIn1);",
          "1806:   }",
          "1807:   break;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1813:     testcase( pIn1->flags & MEM_Int );",
          "1814:     testcase( pIn1->flags & MEM_IntReal );",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "4382:   u64 iKey;",
          "4384:   pIn3 = &aMem[pOp->p3];",
          "4385:   if( (pIn3->flags & (MEM_Int|MEM_IntReal))==0 ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4395:   testcase( pIn3->flags & MEM_Int );",
          "4396:   testcase( pIn3->flags & MEM_IntReal );",
          "",
          "---------------"
        ],
        "src/vdbeapi.c||src/vdbeapi.c": [
          "File: src/vdbeapi.c -> src/vdbeapi.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1866:   }else if( p->pTab->aCol[iIdx].affinity==SQLITE_AFF_REAL ){",
          "1867:     if( pMem->flags & (MEM_Int|MEM_IntReal) ){",
          "1868:       sqlite3VdbeMemRealify(pMem);",
          "1869:     }",
          "1870:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1868:       testcase( pMem->flags & MEM_Int );",
          "1869:       testcase( pMem->flags & MEM_IntReal );",
          "",
          "---------------"
        ],
        "src/vdbeaux.c||src/vdbeaux.c": [
          "File: src/vdbeaux.c -> src/vdbeaux.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3437: #   define MAX_6BYTE ((((i64)0x00008000)<<32)-1)",
          "3438:     i64 i = pMem->u.i;",
          "3439:     u64 u;",
          "3440:     if( i<0 ){",
          "3441:       u = ~i;",
          "3442:     }else{",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3440:     testcase( flags & MEM_Int );",
          "3441:     testcase( flags & MEM_IntReal );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4114:   if( combined_flags&(MEM_Int|MEM_Real|MEM_IntReal) ){",
          "4115:     if( (f1 & f2 & (MEM_Int|MEM_IntReal))!=0 ){",
          "4116:       if( pMem1->u.i < pMem2->u.i ) return -1;",
          "4117:       if( pMem1->u.i > pMem2->u.i ) return +1;",
          "4118:       return 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4117:     testcase( combined_flags & MEM_Int );",
          "4118:     testcase( combined_flags & MEM_Real );",
          "4119:     testcase( combined_flags & MEM_IntReal );",
          "4121:       testcase( f1 & f2 & MEM_Int );",
          "4122:       testcase( f1 & f2 & MEM_IntReal );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4123:       return 0;",
          "4124:     }",
          "4125:     if( (f1&(MEM_Int|MEM_IntReal))!=0 ){",
          "4126:       if( (f2&MEM_Real)!=0 ){",
          "4127:         return sqlite3IntFloatCompare(pMem1->u.i, pMem2->u.r);",
          "4128:       }else if( (f2&(MEM_Int|MEM_IntReal))!=0 ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4133:       testcase( f1 & MEM_Int );",
          "4134:       testcase( f1 & MEM_IntReal );",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "4135:     }",
          "4136:     if( (f1&MEM_Real)!=0 ){",
          "4137:       if( (f2&(MEM_Int|MEM_IntReal))!=0 ){",
          "4138:         return -sqlite3IntFloatCompare(pMem2->u.i, pMem1->u.r);",
          "4139:       }else{",
          "4140:         return -1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4147:         testcase( f2 & MEM_Int );",
          "4148:         testcase( f2 & MEM_IntReal );",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "4286:     if( pRhs->flags & (MEM_Int|MEM_IntReal) ){",
          "4287:       serial_type = aKey1[idx1];",
          "4288:       testcase( serial_type==12 );",
          "4289:       if( serial_type>=10 ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4298:       testcase( pRhs->flags & MEM_Int );",
          "4299:       testcase( pRhs->flags & MEM_IntReal );",
          "",
          "---------------"
        ],
        "src/vdbemem.c||src/vdbemem.c": [
          "File: src/vdbemem.c -> src/vdbemem.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "564:   assert( EIGHT_BYTE_ALIGNMENT(pMem) );",
          "565:   flags = pMem->flags;",
          "566:   if( flags & (MEM_Int|MEM_IntReal) ){",
          "567:     return pMem->u.i;",
          "568:   }else if( flags & MEM_Real ){",
          "569:     return doubleToInt64(pMem->u.r);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "567:     testcase( flags & MEM_IntReal );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "593:   if( pMem->flags & MEM_Real ){",
          "594:     return pMem->u.r;",
          "595:   }else if( pMem->flags & (MEM_Int|MEM_IntReal) ){",
          "596:     return (double)pMem->u.i;",
          "597:   }else if( pMem->flags & (MEM_Str|MEM_Blob) ){",
          "598:     return memRealValue(pMem);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "597:     testcase( pMem->flags & MEM_IntReal );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "609: int sqlite3VdbeBooleanValue(Mem *pMem, int ifNull){",
          "610:   if( pMem->flags & (MEM_Int|MEM_IntReal) ) return pMem->u.i!=0;",
          "611:   if( pMem->flags & MEM_Null ) return ifNull;",
          "612:   return sqlite3VdbeRealValue(pMem)!=0.0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "612:   testcase( pMem->flags & MEM_IntReal );",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "690: int sqlite3VdbeMemNumerify(Mem *pMem){",
          "691:   if( (pMem->flags & (MEM_Int|MEM_Real|MEM_IntReal|MEM_Null))==0 ){",
          "692:     int rc;",
          "693:     assert( (pMem->flags & (MEM_Blob|MEM_Str))!=0 );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "694:   testcase( pMem->flags & MEM_Int );",
          "695:   testcase( pMem->flags & MEM_Real );",
          "696:   testcase( pMem->flags & MEM_IntReal );",
          "697:   testcase( pMem->flags & MEM_Null );",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1496:     }else{",
          "1497:       sqlite3ValueApplyAffinity(pVal, affinity, SQLITE_UTF8);",
          "1498:     }",
          "1500:     if( enc!=SQLITE_UTF8 ){",
          "1501:       rc = sqlite3VdbeChangeEncoding(pVal, enc);",
          "1502:     }",
          "",
          "[Removed Lines]",
          "1499:     if( pVal->flags & (MEM_Int|MEM_IntReal|MEM_Real) ) pVal->flags &= ~MEM_Str;",
          "",
          "[Added Lines]",
          "1506:     assert( (pVal->flags & MEM_IntReal)==0 );",
          "1507:     if( pVal->flags & (MEM_Int|MEM_IntReal|MEM_Real) ){",
          "1508:       testcase( pVal->flags & MEM_Int );",
          "1509:       testcase( pVal->flags & MEM_Real );",
          "1510:       pVal->flags &= ~MEM_Str;",
          "1511:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a920b209ffd83fb080e1a335e4b6e99b6168c4ca",
      "candidate_info": {
        "commit_hash": "a920b209ffd83fb080e1a335e4b6e99b6168c4ca",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/a920b209ffd83fb080e1a335e4b6e99b6168c4ca",
        "files": [
          "ext/session/sqlite3session.c",
          "ext/session/sqlite3session.h",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Fix typos in the comments of the sessions extension, one of which affects the generated documentation. No code changes.\n\nFossilOrigin-Name: 040d5d515bcb37bea05e0d156dbaf066c68052ac574f1b0b2cb118d473a353e0",
        "before_after_code_files": [
          "ext/session/sqlite3session.c||ext/session/sqlite3session.c",
          "ext/session/sqlite3session.h||ext/session/sqlite3session.h",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/session/sqlite3session.c||ext/session/sqlite3session.c": [
          "File: ext/session/sqlite3session.c -> ext/session/sqlite3session.c"
        ],
        "ext/session/sqlite3session.h||ext/session/sqlite3session.h": [
          "File: ext/session/sqlite3session.h -> ext/session/sqlite3session.h"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 965cbcea117835d2c6d2ec58c8025b227f491c35805e282cb31228436bc6bec1",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3f4f6823ac81ca47056367153b851ae96888708b",
      "candidate_info": {
        "commit_hash": "3f4f6823ac81ca47056367153b851ae96888708b",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/3f4f6823ac81ca47056367153b851ae96888708b",
        "files": [
          "ext/fts3/fts3_aux.c",
          "manifest",
          "manifest.uuid",
          "src/btree.c"
        ],
        "message": "Fix harmless compiler warnings.\n\nFossilOrigin-Name: 9a93c68a7673bda2e6c308d3b2798d0fb12fde399996cae24b1f0d5864adf355",
        "before_after_code_files": [
          "ext/fts3/fts3_aux.c||ext/fts3/fts3_aux.c",
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/fts3_aux.c||ext/fts3/fts3_aux.c": [
          "File: ext/fts3/fts3_aux.c -> ext/fts3/fts3_aux.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "417:     if( zStr ){",
          "418:       pCsr->filter.zTerm = sqlite3_mprintf(\"%s\", zStr);",
          "419:       if( pCsr->filter.zTerm==0 ) return SQLITE_NOMEM;",
          "421:     }",
          "422:   }",
          "424:   if( iLe>=0 ){",
          "425:     pCsr->zStop = sqlite3_mprintf(\"%s\", sqlite3_value_text(apVal[iLe]));",
          "426:     if( pCsr->zStop==0 ) return SQLITE_NOMEM;",
          "428:   }",
          "430:   if( iLangid>=0 ){",
          "",
          "[Removed Lines]",
          "420:       pCsr->filter.nTerm = strlen(pCsr->filter.zTerm);",
          "427:     pCsr->nStop = strlen(pCsr->zStop);",
          "",
          "[Added Lines]",
          "420:       pCsr->filter.nTerm = (int)strlen(pCsr->filter.zTerm);",
          "427:     pCsr->nStop = (int)strlen(pCsr->zStop);",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: e744d2dd93a78235e6c1d938b08232183b5ce7e355d1b7daf2199e585b03c106",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "6825:   assert( i<iEnd );",
          "6826:   j = get2byte(&aData[hdr+5]);",
          "6828:   memcpy(&pTmp[j], &aData[j], usableSize - j);",
          "6830:   for(k=0; pCArray->ixNx[k]<=i && ALWAYS(k<NB*2); k++){}",
          "",
          "[Removed Lines]",
          "6827:   if( NEVER(j>usableSize) ){ j = 0; }",
          "",
          "[Added Lines]",
          "6827:   if( NEVER(j>(u32)usableSize) ){ j = 0; }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f2b9d7c60502581bfd2908fbdb0dd00017d26cb0",
      "candidate_info": {
        "commit_hash": "f2b9d7c60502581bfd2908fbdb0dd00017d26cb0",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/f2b9d7c60502581bfd2908fbdb0dd00017d26cb0",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbeaux.c"
        ],
        "message": "Fix a potential use-after-free bug that follows an OOM error in code added two days ago by check-in [84e02d773d60cffe].  Problem discovered by OSSFuzz.\n\nFossilOrigin-Name: 0a2eb949f8a759e5745d9468c8183d3c0b4b30e0fa2a14b3062620eb9e1d5c1d",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbeaux.c||src/vdbeaux.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 32df5edcfef2605009f45d6ef1b97c63a99df07c7b4e00dc70f93001cfb8d81f",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbeaux.c||src/vdbeaux.c": [
          "File: src/vdbeaux.c -> src/vdbeaux.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "368:   pCtx->pVdbe = 0;",
          "369:   pCtx->isError = 0;",
          "370:   pCtx->argc = nArg;",
          "371:   addr = sqlite3VdbeAddOp4(v, eCallCtx ? OP_PureFunc : OP_Function,",
          "372:                            p1, p2, p3, (char*)pCtx, P4_FUNCCTX);",
          "373:   sqlite3VdbeChangeP5(v, eCallCtx & NC_SelfRef);",
          "375:   return addr;",
          "376: }",
          "",
          "[Removed Lines]",
          "374:   pCtx->iOp = addr;",
          "",
          "[Added Lines]",
          "371:   pCtx->iOp = sqlite3VdbeCurrentAddr(v);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8357c662b3b0110b7ba0eda82d9fbb787dd20b03",
      "candidate_info": {
        "commit_hash": "8357c662b3b0110b7ba0eda82d9fbb787dd20b03",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/8357c662b3b0110b7ba0eda82d9fbb787dd20b03",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c"
        ],
        "message": "Do not invoke btreeComputeFreeSpace() when not necessary.\n\nFossilOrigin-Name: f11b0ed47402034378ded2c60b82841b81cd1319cdb72d1ef052faef29a5294d",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 16eb0fc8f8cce51eaa5305ebc9f3bd8c8d935dd3ebebab6820e5629f9292eec2",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "7397:     pTo->isInit = 0;",
          "7398:     rc = btreeInitPage(pTo);",
          "7399:     if( rc!=SQLITE_OK ){",
          "7401:       return;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7399:     if( rc==SQLITE_OK ) rc = btreeComputeFreeSpace(pTo);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "8294:     int iPage = pCur->iPage;",
          "8295:     MemPage *pPage = pCur->pPage;",
          "8301:     if( iPage==0 ){",
          "8302:       if( pPage->nOverflow ){",
          "",
          "[Removed Lines]",
          "8297:     if( pPage->nFree<0 ){",
          "8298:       rc = btreeComputeFreeSpace(pPage);",
          "8299:       if( rc ) break;",
          "8300:     }",
          "",
          "[Added Lines]",
          "8298:     assert( pPage->nFree>=0 );",
          "",
          "---------------"
        ]
      }
    }
  ]
}