{
  "cve_id": "CVE-2015-0278",
  "cve_desc": "libuv before 0.10.34 does not properly drop group privileges, which allows context-dependent attackers to gain privileges via unspecified vectors.",
  "repo": "libuv/libuv",
  "patch_hash": "66ab38918c911bcff025562cf06237d7fedaba0c",
  "patch_info": {
    "commit_hash": "66ab38918c911bcff025562cf06237d7fedaba0c",
    "repo": "libuv/libuv",
    "commit_url": "https://github.com/libuv/libuv/commit/66ab38918c911bcff025562cf06237d7fedaba0c",
    "files": [
      "src/unix/process.c"
    ],
    "message": "unix: call setgoups before calling setuid/setgid\n\nPartial fix for #1093",
    "before_after_code_files": [
      "src/unix/process.c||src/unix/process.c"
    ]
  },
  "patch_diff": {
    "src/unix/process.c||src/unix/process.c": [
      "File: src/unix/process.c -> src/unix/process.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "330:     _exit(127);",
      "331:   }",
      "333:   if ((options->flags & UV_PROCESS_SETGID) && setgid(options->gid)) {",
      "334:     uv__write_int(error_fd, -errno);",
      "335:     perror(\"setgid()\");",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "333:   if (options->flags & (UV_PROCESS_SETUID | UV_PROCESS_SETGID)) {",
      "341:     SAVE_ERRNO(setgroups(0, NULL));",
      "342:   }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "8f15aae52f79bc2f1fcf652f59b3ece62c57d911",
      "candidate_info": {
        "commit_hash": "8f15aae52f79bc2f1fcf652f59b3ece62c57d911",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/8f15aae52f79bc2f1fcf652f59b3ece62c57d911",
        "files": [
          "include/uv.h",
          "samples/socks5-proxy/server.c",
          "src/unix/tcp.c",
          "src/uv-common.c",
          "src/uv-common.h",
          "src/win/tcp.c",
          "test/benchmark-multi-accept.c",
          "test/benchmark-ping-pongs.c",
          "test/benchmark-pump.c",
          "test/blackhole-server.c",
          "test/dns-server.c",
          "test/echo-server.c",
          "test/test-connection-fail.c",
          "test/test-delayed-accept.c",
          "test/test-emfile.c",
          "test/test-getsockname.c",
          "test/test-ipc-send-recv.c",
          "test/test-ipc.c",
          "test/test-multiple-listen.c",
          "test/test-tcp-bind-error.c",
          "test/test-tcp-bind6-error.c",
          "test/test-tcp-close-accept.c",
          "test/test-tcp-close.c",
          "test/test-tcp-try-write.c",
          "test/test-tcp-unexpected-read.c",
          "test/test-tcp-write-to-half-open-connection.c"
        ],
        "message": "tcp: uv_tcp_dualstack()\n\nExplicitly disable/enable dualstack depending on presence of flag set by\nuv_tcp_dualstack() function.",
        "before_after_code_files": [
          "include/uv.h||include/uv.h",
          "samples/socks5-proxy/server.c||samples/socks5-proxy/server.c",
          "src/unix/tcp.c||src/unix/tcp.c",
          "src/uv-common.c||src/uv-common.c",
          "src/uv-common.h||src/uv-common.h",
          "src/win/tcp.c||src/win/tcp.c",
          "test/benchmark-multi-accept.c||test/benchmark-multi-accept.c",
          "test/benchmark-ping-pongs.c||test/benchmark-ping-pongs.c",
          "test/benchmark-pump.c||test/benchmark-pump.c",
          "test/blackhole-server.c||test/blackhole-server.c",
          "test/dns-server.c||test/dns-server.c",
          "test/echo-server.c||test/echo-server.c",
          "test/test-connection-fail.c||test/test-connection-fail.c",
          "test/test-delayed-accept.c||test/test-delayed-accept.c",
          "test/test-emfile.c||test/test-emfile.c",
          "test/test-getsockname.c||test/test-getsockname.c",
          "test/test-ipc-send-recv.c||test/test-ipc-send-recv.c",
          "test/test-ipc.c||test/test-ipc.c",
          "test/test-multiple-listen.c||test/test-multiple-listen.c",
          "test/test-tcp-bind-error.c||test/test-tcp-bind-error.c",
          "test/test-tcp-bind6-error.c||test/test-tcp-bind6-error.c",
          "test/test-tcp-close-accept.c||test/test-tcp-close-accept.c",
          "test/test-tcp-close.c||test/test-tcp-close.c",
          "test/test-tcp-try-write.c||test/test-tcp-try-write.c",
          "test/test-tcp-unexpected-read.c||test/test-tcp-unexpected-read.c",
          "test/test-tcp-write-to-half-open-connection.c||test/test-tcp-write-to-half-open-connection.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/uv.h||include/uv.h": [
          "File: include/uv.h -> include/uv.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "784: UV_EXTERN int uv_tcp_simultaneous_accepts(uv_tcp_t* handle, int enable);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "786: enum uv_tcp_flags {",
          "788:   UV_TCP_IPV6ONLY = 1",
          "789: };",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "798: UV_EXTERN int uv_tcp_getsockname(uv_tcp_t* handle, struct sockaddr* name,",
          "799:     int* namelen);",
          "800: UV_EXTERN int uv_tcp_getpeername(uv_tcp_t* handle, struct sockaddr* name,",
          "",
          "[Removed Lines]",
          "796: UV_EXTERN int uv_tcp_bind(uv_tcp_t* handle, const struct sockaddr* addr);",
          "",
          "[Added Lines]",
          "801: UV_EXTERN int uv_tcp_bind(uv_tcp_t* handle,",
          "802:                           const struct sockaddr* addr,",
          "803:                           unsigned int flags);",
          "",
          "---------------"
        ],
        "samples/socks5-proxy/server.c||samples/socks5-proxy/server.c": [
          "File: samples/socks5-proxy/server.c -> samples/socks5-proxy/server.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "155:     CHECK(0 == uv_tcp_init(loop, &sx->tcp_handle));",
          "157:     what = \"uv_tcp_bind\";",
          "159:     if (err == 0) {",
          "160:       what = \"uv_listen\";",
          "161:       err = uv_listen((uv_stream_t *) &sx->tcp_handle, 128, on_connection);",
          "",
          "[Removed Lines]",
          "158:     err = uv_tcp_bind(&sx->tcp_handle, &s.addr);",
          "",
          "[Added Lines]",
          "158:     err = uv_tcp_bind(&sx->tcp_handle, &s.addr, 0);",
          "",
          "---------------"
        ],
        "src/unix/tcp.c||src/unix/tcp.c": [
          "File: src/unix/tcp.c -> src/unix/tcp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "59: int uv__tcp_bind(uv_tcp_t* tcp,",
          "60:                  const struct sockaddr* addr,",
          "62:   int err;",
          "63:   int on;",
          "",
          "[Removed Lines]",
          "61:                  unsigned int addrlen) {",
          "",
          "[Added Lines]",
          "61:                  unsigned int addrlen,",
          "62:                  unsigned int flags) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "72:   if (setsockopt(tcp->io_watcher.fd, SOL_SOCKET, SO_REUSEADDR, &on, sizeof(on)))",
          "73:     return -errno;",
          "75:   errno = 0;",
          "76:   if (bind(tcp->io_watcher.fd, addr, addrlen) && errno != EADDRINUSE)",
          "77:     return -errno;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "76: #ifdef IPV6_V6ONLY",
          "77:   if (addr->sa_family == AF_INET6) {",
          "78:     on = (flags & UV_TCP_IPV6ONLY) != 0;",
          "79:     if (setsockopt(tcp->io_watcher.fd,",
          "80:                    IPPROTO_IPV6,",
          "81:                    IPV6_V6ONLY,",
          "82:                    &on,",
          "83:                    sizeof on) == -1) {",
          "84:       return -errno;",
          "85:     }",
          "86:   }",
          "87: #endif",
          "",
          "---------------"
        ],
        "src/uv-common.c||src/uv-common.c": [
          "File: src/uv-common.c -> src/uv-common.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "152: }",
          "156:   unsigned int addrlen;",
          "158:   if (handle->type != UV_TCP)",
          "",
          "[Removed Lines]",
          "155: int uv_tcp_bind(uv_tcp_t* handle, const struct sockaddr* addr) {",
          "",
          "[Added Lines]",
          "155: int uv_tcp_bind(uv_tcp_t* handle,",
          "156:                 const struct sockaddr* addr,",
          "157:                 unsigned int flags) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "165:   else",
          "166:     return UV_EINVAL;",
          "169: }",
          "",
          "[Removed Lines]",
          "168:   return uv__tcp_bind(handle, addr, addrlen);",
          "",
          "[Added Lines]",
          "170:   return uv__tcp_bind(handle, addr, addrlen, flags);",
          "",
          "---------------"
        ],
        "src/uv-common.h||src/uv-common.h": [
          "File: src/uv-common.h -> src/uv-common.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "62: int uv__tcp_bind(uv_tcp_t* tcp,",
          "63:                  const struct sockaddr* addr,",
          "66: int uv__tcp_connect(uv_connect_t* req,",
          "67:                    uv_tcp_t* handle,",
          "",
          "[Removed Lines]",
          "64:                  unsigned int addrlen);",
          "",
          "[Added Lines]",
          "64:                  unsigned int addrlen,",
          "65:                  unsigned int flags);",
          "",
          "---------------"
        ],
        "src/win/tcp.c||src/win/tcp.c": [
          "File: src/win/tcp.c -> src/win/tcp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "238: static int uv_tcp_try_bind(uv_tcp_t* handle,",
          "239:                            const struct sockaddr* addr,",
          "241:   DWORD err;",
          "242:   int r;",
          "",
          "[Removed Lines]",
          "240:                            unsigned int addrlen) {",
          "",
          "[Added Lines]",
          "240:                            unsigned int addrlen,",
          "241:                            unsigned int flags) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "261:     }",
          "262:   }",
          "264:   r = bind(handle->socket, addr, addrlen);",
          "266:   if (r == SOCKET_ERROR) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "265: #ifdef IPV6_V6ONLY",
          "266:   if (addr->sa_family == AF_INET6) {",
          "267:     int on;",
          "269:     on = (flags & UV_TCP_IPV6ONLY) != 0;",
          "274:     setsockopt(handle->socket, IPPROTO_IPV6, IPV6_V6ONLY, &on, sizeof on);",
          "275:   }",
          "276: #endif",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "500:   if (!(handle->flags & UV_HANDLE_BOUND)) {",
          "501:     err = uv_tcp_try_bind(handle,",
          "502:                           (const struct sockaddr*) &uv_addr_ip4_any_,",
          "504:     if (err)",
          "505:       return err;",
          "506:   }",
          "",
          "[Removed Lines]",
          "503:                           sizeof(uv_addr_ip4_any_));",
          "",
          "[Added Lines]",
          "517:                           sizeof(uv_addr_ip4_any_),",
          "518:                           0);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "685:     } else {",
          "686:       abort();",
          "687:     }",
          "689:     if (err)",
          "690:       return err;",
          "691:   }",
          "",
          "[Removed Lines]",
          "688:     err = uv_tcp_try_bind(handle, bind_addr, addrlen);",
          "",
          "[Added Lines]",
          "703:     err = uv_tcp_try_bind(handle, bind_addr, addrlen, 0);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1373: int uv__tcp_bind(uv_tcp_t* handle,",
          "1374:                  const struct sockaddr* addr,",
          "1376:   int err;",
          "1379:   if (err)",
          "1380:     return uv_translate_sys_error(err);",
          "",
          "[Removed Lines]",
          "1375:                  unsigned int addrlen) {",
          "1378:   err = uv_tcp_try_bind(handle, addr, addrlen);",
          "",
          "[Added Lines]",
          "1390:                  unsigned int addrlen,",
          "1391:                  unsigned int flags) {",
          "1394:   err = uv_tcp_try_bind(handle, addr, addrlen, flags);",
          "",
          "---------------"
        ],
        "test/benchmark-multi-accept.c||test/benchmark-multi-accept.c": [
          "File: test/benchmark-multi-accept.c -> test/benchmark-multi-accept.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "210:   if (type == UV_TCP) {",
          "211:     ASSERT(0 == uv_tcp_init(loop, (uv_tcp_t*) &ctx.server_handle));",
          "212:     ASSERT(0 == uv_tcp_bind((uv_tcp_t*) &ctx.server_handle,",
          "214:   }",
          "215:   else",
          "216:     ASSERT(0);",
          "",
          "[Removed Lines]",
          "213:                             (const struct sockaddr*) &listen_addr));",
          "",
          "[Added Lines]",
          "213:                             (const struct sockaddr*) &listen_addr,",
          "214:                             0));",
          "",
          "---------------"
        ],
        "test/benchmark-ping-pongs.c||test/benchmark-ping-pongs.c": [
          "File: test/benchmark-ping-pongs.c -> test/benchmark-ping-pongs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "194:   pinger->tcp.data = pinger;",
          "198:   r = uv_tcp_connect(&pinger->connect_req,",
          "199:                      &pinger->tcp,",
          "",
          "[Removed Lines]",
          "196:   ASSERT(0 == uv_tcp_bind(&pinger->tcp, (const struct sockaddr*) &client_addr));",
          "",
          "[Added Lines]",
          "196:   ASSERT(0 == uv_tcp_bind(&pinger->tcp,",
          "197:                           (const struct sockaddr*) &client_addr,",
          "198:                           0));",
          "",
          "---------------"
        ],
        "test/benchmark-pump.c||test/benchmark-pump.c": [
          "File: test/benchmark-pump.c -> test/benchmark-pump.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "379:   server = (uv_stream_t*)&tcpServer;",
          "380:   r = uv_tcp_init(loop, &tcpServer);",
          "381:   ASSERT(r == 0);",
          "383:   ASSERT(r == 0);",
          "384:   r = uv_listen((uv_stream_t*)&tcpServer, MAX_WRITE_HANDLES, connection_cb);",
          "385:   ASSERT(r == 0);",
          "",
          "[Removed Lines]",
          "382:   r = uv_tcp_bind(&tcpServer, (const struct sockaddr*) &listen_addr);",
          "",
          "[Added Lines]",
          "382:   r = uv_tcp_bind(&tcpServer, (const struct sockaddr*) &listen_addr, 0);",
          "",
          "---------------"
        ],
        "test/blackhole-server.c||test/blackhole-server.c": [
          "File: test/blackhole-server.c -> test/blackhole-server.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "108:   r = uv_tcp_init(loop, &tcp_server);",
          "109:   ASSERT(r == 0);",
          "112:   ASSERT(r == 0);",
          "114:   r = uv_listen((uv_stream_t*)&tcp_server, 128, connection_cb);",
          "",
          "[Removed Lines]",
          "111:   r = uv_tcp_bind(&tcp_server, (const struct sockaddr*) &addr);",
          "",
          "[Added Lines]",
          "111:   r = uv_tcp_bind(&tcp_server, (const struct sockaddr*) &addr, 0);",
          "",
          "---------------"
        ],
        "test/dns-server.c||test/dns-server.c": [
          "File: test/dns-server.c -> test/dns-server.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "311:     return 1;",
          "312:   }",
          "315:   if (r) {",
          "317:     fprintf(stderr, \"Bind error\\n\");",
          "",
          "[Removed Lines]",
          "314:   r = uv_tcp_bind(&server, (const struct sockaddr*) &addr);",
          "",
          "[Added Lines]",
          "314:   r = uv_tcp_bind(&server, (const struct sockaddr*) &addr, 0);",
          "",
          "---------------"
        ],
        "test/echo-server.c||test/echo-server.c": [
          "File: test/echo-server.c -> test/echo-server.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "229:     return 1;",
          "230:   }",
          "233:   if (r) {",
          "235:     fprintf(stderr, \"Bind error\\n\");",
          "",
          "[Removed Lines]",
          "232:   r = uv_tcp_bind(&tcpServer, (const struct sockaddr*) &addr);",
          "",
          "[Added Lines]",
          "232:   r = uv_tcp_bind(&tcpServer, (const struct sockaddr*) &addr, 0);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "264:   }",
          "268:   if (r) {",
          "270:     fprintf(stderr, \"IPv6 not supported\\n\");",
          "",
          "[Removed Lines]",
          "267:   r = uv_tcp_bind(&tcpServer, (const struct sockaddr*) &addr6);",
          "",
          "[Added Lines]",
          "267:   r = uv_tcp_bind(&tcpServer, (const struct sockaddr*) &addr6, 0);",
          "",
          "---------------"
        ],
        "test/test-connection-fail.c||test/test-connection-fail.c": [
          "File: test/test-connection-fail.c -> test/test-connection-fail.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "106:   r = uv_tcp_connect(&req,",
          "107:                      &tcp,",
          "",
          "[Removed Lines]",
          "104:   ASSERT(0 == uv_tcp_bind(&tcp, (const struct sockaddr*) &client_addr));",
          "",
          "[Added Lines]",
          "104:   ASSERT(0 == uv_tcp_bind(&tcp, (const struct sockaddr*) &client_addr, 0));",
          "",
          "---------------"
        ],
        "test/test-delayed-accept.c||test/test-delayed-accept.c": [
          "File: test/test-delayed-accept.c -> test/test-delayed-accept.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "109:   r = uv_tcp_init(uv_default_loop(), server);",
          "110:   ASSERT(r == 0);",
          "112:   ASSERT(r == 0);",
          "114:   r = uv_listen((uv_stream_t*)server, 128, connection_cb);",
          "",
          "[Removed Lines]",
          "111:   r = uv_tcp_bind(server, (const struct sockaddr*) &addr);",
          "",
          "[Added Lines]",
          "111:   r = uv_tcp_bind(server, (const struct sockaddr*) &addr, 0);",
          "",
          "---------------"
        ],
        "test/test-emfile.c||test/test-emfile.c": [
          "File: test/test-emfile.c -> test/test-emfile.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "49:   ASSERT(0 == uv_ip4_addr(\"127.0.0.1\", TEST_PORT, &addr));",
          "50:   ASSERT(0 == uv_tcp_init(loop, &server_handle));",
          "51:   ASSERT(0 == uv_tcp_init(loop, &client_handle));",
          "53:   ASSERT(0 == uv_listen((uv_stream_t*) &server_handle, 8, connection_cb));",
          "",
          "[Removed Lines]",
          "52:   ASSERT(0 == uv_tcp_bind(&server_handle, (const struct sockaddr*) &addr));",
          "",
          "[Added Lines]",
          "52:   ASSERT(0 == uv_tcp_bind(&server_handle, (const struct sockaddr*) &addr, 0));",
          "",
          "---------------"
        ],
        "test/test-getsockname.c||test/test-getsockname.c": [
          "File: test/test-getsockname.c -> test/test-getsockname.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "180:     return 1;",
          "181:   }",
          "184:   if (r) {",
          "185:     fprintf(stderr, \"Bind error\\n\");",
          "186:     return 1;",
          "",
          "[Removed Lines]",
          "183:   r = uv_tcp_bind(&tcpServer, (const struct sockaddr*) &addr);",
          "",
          "[Added Lines]",
          "183:   r = uv_tcp_bind(&tcpServer, (const struct sockaddr*) &addr, 0);",
          "",
          "---------------"
        ],
        "test/test-ipc-send-recv.c||test/test-ipc-send-recv.c": [
          "File: test/test-ipc-send-recv.c -> test/test-ipc-send-recv.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "145:   r = uv_tcp_init(uv_default_loop(), &ctx.send.tcp);",
          "146:   ASSERT(r == 0);",
          "149:   ASSERT(r == 0);",
          "151:   r = run_test();",
          "",
          "[Removed Lines]",
          "148:   r = uv_tcp_bind(&ctx.send.tcp, (const struct sockaddr*) &addr);",
          "",
          "[Added Lines]",
          "148:   r = uv_tcp_bind(&ctx.send.tcp, (const struct sockaddr*) &addr, 0);",
          "",
          "---------------"
        ],
        "test/test-ipc.c||test/test-ipc.c": [
          "File: test/test-ipc.c -> test/test-ipc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "375:   r = uv_tcp_init(uv_default_loop(), &server);",
          "376:   ASSERT(r == 0);",
          "379:   ASSERT(r == 0);",
          "381:   r = uv_tcp_simultaneous_accepts(&server, 1);",
          "",
          "[Removed Lines]",
          "378:   r = uv_tcp_bind(&server, (const struct sockaddr*) &addr);",
          "",
          "[Added Lines]",
          "378:   r = uv_tcp_bind(&server, (const struct sockaddr*) &addr, 0);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "400:   r = uv_tcp_init(uv_default_loop(), &server);",
          "401:   ASSERT(r == 0);",
          "404:   ASSERT(r == 0);",
          "406:   r = uv_tcp_simultaneous_accepts(&server, 0);",
          "",
          "[Removed Lines]",
          "403:   r = uv_tcp_bind(&server, (const struct sockaddr*) &addr);",
          "",
          "[Added Lines]",
          "403:   r = uv_tcp_bind(&server, (const struct sockaddr*) &addr, 0);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "566:   r = uv_tcp_init(uv_default_loop(), &tcp_server);",
          "567:   ASSERT(r == 0);",
          "570:   ASSERT(r == 0);",
          "572:   if (!listen_after_write) {",
          "",
          "[Removed Lines]",
          "569:   r = uv_tcp_bind(&tcp_server, (const struct sockaddr*) &addr);",
          "",
          "[Added Lines]",
          "569:   r = uv_tcp_bind(&tcp_server, (const struct sockaddr*) &addr, 0);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "619:   ASSERT(0 == uv_ip4_addr(\"0.0.0.0\", TEST_PORT, &addr));",
          "622:   ASSERT(r == 0);",
          "624:   r = uv_listen((uv_stream_t*)&tcp_server, 12, ipc_on_connection_tcp_conn);",
          "",
          "[Removed Lines]",
          "621:   r = uv_tcp_bind(&tcp_server, (const struct sockaddr*) &addr);",
          "",
          "[Added Lines]",
          "621:   r = uv_tcp_bind(&tcp_server, (const struct sockaddr*) &addr, 0);",
          "",
          "---------------"
        ],
        "test/test-multiple-listen.c||test/test-multiple-listen.c": [
          "File: test/test-multiple-listen.c -> test/test-multiple-listen.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "53:   r = uv_tcp_init(uv_default_loop(), &server);",
          "54:   ASSERT(r == 0);",
          "57:   ASSERT(r == 0);",
          "59:   r = uv_listen((uv_stream_t*)&server, 128, connection_cb);",
          "",
          "[Removed Lines]",
          "56:   r = uv_tcp_bind(&server, (const struct sockaddr*) &addr);",
          "",
          "[Added Lines]",
          "56:   r = uv_tcp_bind(&server, (const struct sockaddr*) &addr, 0);",
          "",
          "---------------"
        ],
        "test/test-tcp-bind-error.c||test/test-tcp-bind-error.c": [
          "File: test/test-tcp-bind-error.c -> test/test-tcp-bind-error.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "42:   ASSERT(0 == uv_ip4_addr(\"0.0.0.0\", TEST_PORT, &addr));",
          "43:   r = uv_tcp_init(uv_default_loop(), &server1);",
          "44:   ASSERT(r == 0);",
          "46:   ASSERT(r == 0);",
          "48:   r = uv_tcp_init(uv_default_loop(), &server2);",
          "49:   ASSERT(r == 0);",
          "51:   ASSERT(r == 0);",
          "53:   r = uv_listen((uv_stream_t*)&server1, 128, NULL);",
          "",
          "[Removed Lines]",
          "45:   r = uv_tcp_bind(&server1, (const struct sockaddr*) &addr);",
          "50:   r = uv_tcp_bind(&server2, (const struct sockaddr*) &addr);",
          "",
          "[Added Lines]",
          "45:   r = uv_tcp_bind(&server1, (const struct sockaddr*) &addr, 0);",
          "50:   r = uv_tcp_bind(&server2, (const struct sockaddr*) &addr, 0);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "78:   ASSERT(r == 0);",
          "82:   ASSERT(r == 0 || r == UV_EADDRNOTAVAIL);",
          "84:   uv_close((uv_handle_t*)&server, close_cb);",
          "",
          "[Removed Lines]",
          "81:   r = uv_tcp_bind(&server, (const struct sockaddr*) &addr);",
          "",
          "[Added Lines]",
          "81:   r = uv_tcp_bind(&server, (const struct sockaddr*) &addr, 0);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "102:   r = uv_tcp_init(uv_default_loop(), &server);",
          "103:   ASSERT(r == 0);",
          "105:   ASSERT(r == UV_EADDRNOTAVAIL);",
          "107:   uv_close((uv_handle_t*)&server, close_cb);",
          "",
          "[Removed Lines]",
          "104:   r = uv_tcp_bind(&server, (const struct sockaddr*) &addr);",
          "",
          "[Added Lines]",
          "104:   r = uv_tcp_bind(&server, (const struct sockaddr*) &addr, 0);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "127:   r = uv_tcp_init(uv_default_loop(), &server);",
          "128:   ASSERT(r == 0);",
          "130:   ASSERT(r == UV_EINVAL);",
          "132:   uv_close((uv_handle_t*)&server, close_cb);",
          "",
          "[Removed Lines]",
          "129:   r = uv_tcp_bind(&server, (const struct sockaddr*) garbage_addr);",
          "",
          "[Added Lines]",
          "129:   r = uv_tcp_bind(&server, (const struct sockaddr*) garbage_addr, 0);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "153:   r = uv_tcp_init(uv_default_loop(), &server);",
          "154:   ASSERT(r == 0);",
          "156:   ASSERT(r == 0);",
          "158:   ASSERT(r == UV_EINVAL);",
          "160:   uv_close((uv_handle_t*)&server, close_cb);",
          "",
          "[Removed Lines]",
          "155:   r = uv_tcp_bind(&server, (const struct sockaddr*) &addr1);",
          "157:   r = uv_tcp_bind(&server, (const struct sockaddr*) &addr2);",
          "",
          "[Added Lines]",
          "155:   r = uv_tcp_bind(&server, (const struct sockaddr*) &addr1, 0);",
          "157:   r = uv_tcp_bind(&server, (const struct sockaddr*) &addr2, 0);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "178:   r = uv_tcp_init(uv_default_loop(), &server);",
          "179:   ASSERT(r == 0);",
          "181:   ASSERT(r == 0);",
          "183:   MAKE_VALGRIND_HAPPY();",
          "",
          "[Removed Lines]",
          "180:   r = uv_tcp_bind(&server, (const struct sockaddr*) &addr);",
          "",
          "[Added Lines]",
          "180:   r = uv_tcp_bind(&server, (const struct sockaddr*) &addr, 0);",
          "",
          "---------------"
        ],
        "test/test-tcp-bind6-error.c||test/test-tcp-bind6-error.c": [
          "File: test/test-tcp-bind6-error.c -> test/test-tcp-bind6-error.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "44:   r = uv_tcp_init(uv_default_loop(), &server1);",
          "45:   ASSERT(r == 0);",
          "47:   ASSERT(r == 0);",
          "49:   r = uv_tcp_init(uv_default_loop(), &server2);",
          "50:   ASSERT(r == 0);",
          "52:   ASSERT(r == 0);",
          "54:   r = uv_listen((uv_stream_t*)&server1, 128, NULL);",
          "",
          "[Removed Lines]",
          "46:   r = uv_tcp_bind(&server1, (const struct sockaddr*) &addr);",
          "51:   r = uv_tcp_bind(&server2, (const struct sockaddr*) &addr);",
          "",
          "[Added Lines]",
          "46:   r = uv_tcp_bind(&server1, (const struct sockaddr*) &addr, 0);",
          "51:   r = uv_tcp_bind(&server2, (const struct sockaddr*) &addr, 0);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "78:   r = uv_tcp_init(uv_default_loop(), &server);",
          "79:   ASSERT(r == 0);",
          "81:   ASSERT(r == UV_EADDRNOTAVAIL);",
          "83:   uv_close((uv_handle_t*)&server, close_cb);",
          "",
          "[Removed Lines]",
          "80:   r = uv_tcp_bind(&server, (const struct sockaddr*) &addr);",
          "",
          "[Added Lines]",
          "80:   r = uv_tcp_bind(&server, (const struct sockaddr*) &addr, 0);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "103:   r = uv_tcp_init(uv_default_loop(), &server);",
          "104:   ASSERT(r == 0);",
          "106:   ASSERT(r == UV_EINVAL);",
          "108:   uv_close((uv_handle_t*)&server, close_cb);",
          "",
          "[Removed Lines]",
          "105:   r = uv_tcp_bind(&server, (const struct sockaddr*) garbage_addr);",
          "",
          "[Added Lines]",
          "105:   r = uv_tcp_bind(&server, (const struct sockaddr*) garbage_addr, 0);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "129:   r = uv_tcp_init(uv_default_loop(), &server);",
          "130:   ASSERT(r == 0);",
          "132:   ASSERT(r == 0);",
          "134:   ASSERT(r == UV_EINVAL);",
          "136:   uv_close((uv_handle_t*)&server, close_cb);",
          "",
          "[Removed Lines]",
          "131:   r = uv_tcp_bind(&server, (const struct sockaddr*) &addr1);",
          "133:   r = uv_tcp_bind(&server, (const struct sockaddr*) &addr2);",
          "",
          "[Added Lines]",
          "131:   r = uv_tcp_bind(&server, (const struct sockaddr*) &addr1, 0);",
          "133:   r = uv_tcp_bind(&server, (const struct sockaddr*) &addr2, 0);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "154:   r = uv_tcp_init(uv_default_loop(), &server);",
          "155:   ASSERT(r == 0);",
          "157:   ASSERT(r == 0);",
          "159:   MAKE_VALGRIND_HAPPY();",
          "",
          "[Removed Lines]",
          "156:   r = uv_tcp_bind(&server, (const struct sockaddr*) &addr);",
          "",
          "[Added Lines]",
          "156:   r = uv_tcp_bind(&server, (const struct sockaddr*) &addr, 0);",
          "",
          "---------------"
        ],
        "test/test-tcp-close-accept.c||test/test-tcp-close-accept.c": [
          "File: test/test-tcp-close-accept.c -> test/test-tcp-close-accept.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "156:   ASSERT(0 == uv_ip4_addr(\"127.0.0.1\", TEST_PORT, &addr));",
          "158:   ASSERT(0 == uv_tcp_init(loop, &tcp_server));",
          "160:   ASSERT(0 == uv_listen((uv_stream_t*) &tcp_server,",
          "161:                         ARRAY_SIZE(tcp_outgoing),",
          "162:                         connection_cb));",
          "",
          "[Removed Lines]",
          "159:   ASSERT(0 == uv_tcp_bind(&tcp_server, (const struct sockaddr*) &addr));",
          "",
          "[Added Lines]",
          "159:   ASSERT(0 == uv_tcp_bind(&tcp_server, (const struct sockaddr*) &addr, 0));",
          "",
          "---------------"
        ],
        "test/test-tcp-close.c||test/test-tcp-close.c": [
          "File: test/test-tcp-close.c -> test/test-tcp-close.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "85:   r = uv_tcp_init(loop, handle);",
          "86:   ASSERT(r == 0);",
          "89:   ASSERT(r == 0);",
          "91:   r = uv_listen((uv_stream_t*)handle, 128, connection_cb);",
          "",
          "[Removed Lines]",
          "88:   r = uv_tcp_bind(handle, (const struct sockaddr*) &addr);",
          "",
          "[Added Lines]",
          "88:   r = uv_tcp_bind(handle, (const struct sockaddr*) &addr, 0);",
          "",
          "---------------"
        ],
        "test/test-tcp-try-write.c||test/test-tcp-try-write.c": [
          "File: test/test-tcp-try-write.c -> test/test-tcp-try-write.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "110:   ASSERT(0 == uv_ip4_addr(\"0.0.0.0\", TEST_PORT, &addr));",
          "112:   ASSERT(0 == uv_tcp_init(uv_default_loop(), &server));",
          "114:   ASSERT(0 == uv_listen((uv_stream_t*) &server, 128, connection_cb));",
          "115: }",
          "",
          "[Removed Lines]",
          "113:   ASSERT(0 == uv_tcp_bind(&server, (struct sockaddr*) &addr));",
          "",
          "[Added Lines]",
          "113:   ASSERT(0 == uv_tcp_bind(&server, (struct sockaddr*) &addr, 0));",
          "",
          "---------------"
        ],
        "test/test-tcp-unexpected-read.c||test/test-tcp-unexpected-read.c": [
          "File: test/test-tcp-unexpected-read.c -> test/test-tcp-unexpected-read.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "98:   ASSERT(0 == uv_tcp_init(loop, &server_handle));",
          "99:   ASSERT(0 == uv_tcp_init(loop, &client_handle));",
          "100:   ASSERT(0 == uv_tcp_init(loop, &peer_handle));",
          "102:   ASSERT(0 == uv_listen((uv_stream_t*) &server_handle, 1, connection_cb));",
          "103:   ASSERT(0 == uv_tcp_connect(&connect_req,",
          "104:                              &client_handle,",
          "",
          "[Removed Lines]",
          "101:   ASSERT(0 == uv_tcp_bind(&server_handle, (const struct sockaddr*) &addr));",
          "",
          "[Added Lines]",
          "101:   ASSERT(0 == uv_tcp_bind(&server_handle, (const struct sockaddr*) &addr, 0));",
          "",
          "---------------"
        ],
        "test/test-tcp-write-to-half-open-connection.c||test/test-tcp-write-to-half-open-connection.c": [
          "File: test/test-tcp-write-to-half-open-connection.c -> test/test-tcp-write-to-half-open-connection.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "115:   r = uv_tcp_init(loop, &tcp_server);",
          "116:   ASSERT(r == 0);",
          "119:   ASSERT(r == 0);",
          "121:   r = uv_listen((uv_stream_t*)&tcp_server, 1, connection_cb);",
          "",
          "[Removed Lines]",
          "118:   r = uv_tcp_bind(&tcp_server, (const struct sockaddr*) &addr);",
          "",
          "[Added Lines]",
          "118:   r = uv_tcp_bind(&tcp_server, (const struct sockaddr*) &addr, 0);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "442d11d618d0eff7297c922f401550138fbf8555",
      "candidate_info": {
        "commit_hash": "442d11d618d0eff7297c922f401550138fbf8555",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/442d11d618d0eff7297c922f401550138fbf8555",
        "files": [
          "include/uv.h",
          "src/unix/internal.h",
          "src/unix/stream.c"
        ],
        "message": "unix: avoid extra read, short-circuit on POLLHUP\n\nAvoid going through an extra alloc_cb -> read() -> read_cb cycle when\nthe POLLHUP flag is set because we know the next read() will hit EOF.\n\nFixes #803.",
        "before_after_code_files": [
          "include/uv.h||include/uv.h",
          "src/unix/internal.h||src/unix/internal.h",
          "src/unix/stream.c||src/unix/stream.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/uv.h||include/uv.h": [
          "File: include/uv.h -> include/uv.h"
        ],
        "src/unix/internal.h||src/unix/internal.h": [
          "File: src/unix/internal.h -> src/unix/internal.h"
        ],
        "src/unix/stream.c||src/unix/stream.c": [
          "File: src/unix/stream.c -> src/unix/stream.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "930: }",
          "933: static void uv__read(uv_stream_t* stream) {",
          "934:   uv_buf_t buf;",
          "935:   ssize_t nread;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "933: static void uv__stream_read_cb(uv_stream_t* stream,",
          "934:                                int status,",
          "935:                                uv_buf_t buf,",
          "936:                                uv_handle_type type) {",
          "937:   if (stream->read_cb != NULL)",
          "938:     stream->read_cb(stream, status, buf);",
          "939:   else",
          "940:     stream->read2_cb((uv_pipe_t*) stream, status, buf, type);",
          "941: }",
          "944: static void uv__stream_eof(uv_stream_t* stream, uv_buf_t buf) {",
          "945:   stream->flags |= UV_STREAM_READ_EOF;",
          "946:   uv__io_stop(stream->loop, &stream->io_watcher, UV__POLLIN);",
          "947:   if (!uv__io_active(&stream->io_watcher, UV__POLLOUT))",
          "948:     uv__handle_stop(stream);",
          "949:   uv__set_artificial_error(stream->loop, UV_EOF);",
          "950:   uv__stream_read_cb(stream, -1, buf, UV_UNKNOWN_HANDLE);",
          "951: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "938:   char cmsg_space[64];",
          "939:   int count;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "962:   stream->flags &= ~UV_STREAM_READ_PARTIAL;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "979:       while (nread < 0 && errno == EINTR);",
          "980:     }",
          "991:     if (nread < 0) {",
          "993:       if (errno == EAGAIN || errno == EWOULDBLOCK) {",
          "",
          "[Removed Lines]",
          "982: #define INVOKE_READ_CB(stream, status, buf, type)                             \\",
          "983:     do {                                                                      \\",
          "984:       if ((stream)->read_cb != NULL)                                          \\",
          "985:         (stream)->read_cb((stream), (status), (buf));                         \\",
          "986:       else                                                                    \\",
          "987:         (stream)->read2_cb((uv_pipe_t*) (stream), (status), (buf), (type));   \\",
          "988:     }                                                                         \\",
          "989:     while (0)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "996:           uv__io_start(stream->loop, &stream->io_watcher, UV__POLLIN);",
          "997:         }",
          "998:         uv__set_sys_error(stream->loop, EAGAIN);",
          "1000:       } else {",
          "1002:         uv__set_sys_error(stream->loop, errno);",
          "1004:         assert(!uv__io_active(&stream->io_watcher, UV__POLLIN) &&",
          "1005:                \"stream->read_cb(status=-1) did not call uv_close()\");",
          "1006:       }",
          "1007:       return;",
          "1008:     } else if (nread == 0) {",
          "1015:       return;",
          "1016:     } else {",
          "",
          "[Removed Lines]",
          "999:         INVOKE_READ_CB(stream, 0, buf, UV_UNKNOWN_HANDLE);",
          "1003:         INVOKE_READ_CB(stream, -1, buf, UV_UNKNOWN_HANDLE);",
          "1010:       uv__io_stop(stream->loop, &stream->io_watcher, UV__POLLIN);",
          "1011:       if (!uv__io_active(&stream->io_watcher, UV__POLLOUT))",
          "1012:         uv__handle_stop(stream);",
          "1013:       uv__set_artificial_error(stream->loop, UV_EOF);",
          "1014:       INVOKE_READ_CB(stream, -1, buf, UV_UNKNOWN_HANDLE);",
          "",
          "[Added Lines]",
          "1013:         uv__stream_read_cb(stream, 0, buf, UV_UNKNOWN_HANDLE);",
          "1017:         uv__stream_read_cb(stream, -1, buf, UV_UNKNOWN_HANDLE);",
          "1023:       uv__stream_eof(stream, buf);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1064:       if (nread < buflen) {",
          "1065:         return;",
          "1066:       }",
          "1067:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1074:         stream->flags |= UV_STREAM_READ_PARTIAL;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1110:     return;",
          "1111:   }",
          "1116:     uv__read(stream);",
          "1120:   }",
          "1122:   if (events & UV__POLLOUT) {",
          "1124:     uv__write(stream);",
          "1125:     uv__write_callbacks(stream);",
          "1126:   }",
          "",
          "[Removed Lines]",
          "1113:   if (events & (UV__POLLIN | UV__POLLERR | UV__POLLHUP)) {",
          "1114:     assert(uv__stream_fd(stream) >= 0);",
          "1118:     if (uv__stream_fd(stream) == -1)",
          "1123:     assert(uv__stream_fd(stream) >= 0);",
          "",
          "[Added Lines]",
          "1123:   assert(uv__stream_fd(stream) >= 0);",
          "1126:   if (events & (UV__POLLIN | UV__POLLERR))",
          "1129:   if (uv__stream_fd(stream) == -1)",
          "1138:   if ((events & UV__POLLHUP) &&",
          "1139:       (stream->flags & UV_STREAM_READING) &&",
          "1140:       (stream->flags & UV_STREAM_READ_PARTIAL) &&",
          "1141:       !(stream->flags & UV_STREAM_READ_EOF)) {",
          "1142:     uv_buf_t buf = { NULL, 0 };",
          "1143:     uv__stream_eof(stream, buf);",
          "1146:   if (uv__stream_fd(stream) == -1)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "43205ed5538fa196977a4e77ef3cbf6d279b346d",
      "candidate_info": {
        "commit_hash": "43205ed5538fa196977a4e77ef3cbf6d279b346d",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/43205ed5538fa196977a4e77ef3cbf6d279b346d",
        "files": [
          "src/unix/error.c",
          "src/unix/internal.h"
        ],
        "message": "unix: remove unused function uv_fatal_error()",
        "before_after_code_files": [
          "src/unix/error.c||src/unix/error.c",
          "src/unix/internal.h||src/unix/internal.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/unix/error.c||src/unix/error.c": [
          "File: src/unix/error.c -> src/unix/error.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "34: #include <assert.h>",
          "59: uv_err_code uv_translate_sys_error(int sys_errno) {",
          "60:   switch (sys_errno) {",
          "61:     case 0: return UV_OK;",
          "",
          "[Removed Lines]",
          "38: void uv_fatal_error(const int errorno, const char* syscall) {",
          "39:   char* buf = NULL;",
          "40:   const char* errmsg;",
          "42:   if (buf) {",
          "43:     errmsg = buf;",
          "44:   } else {",
          "45:     errmsg = \"Unknown error\";",
          "46:   }",
          "48:   if (syscall) {",
          "49:     fprintf(stderr, \"\\nlibuv fatal error. %s: (%d) %s\\n\", syscall, errorno,",
          "50:         errmsg);",
          "51:   } else {",
          "52:     fprintf(stderr, \"\\nlibuv fatal error. (%d) %s\\n\", errorno, errmsg);",
          "53:   }",
          "55:   abort();",
          "56: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/unix/internal.h||src/unix/internal.h": [
          "File: src/unix/internal.h -> src/unix/internal.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "146: uv_err_code uv_translate_sys_error(int sys_errno);",
          "150: void uv__stream_init(uv_loop_t* loop, uv_stream_t* stream,",
          "",
          "[Removed Lines]",
          "147: void uv_fatal_error(const int errorno, const char* syscall);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d17bfc617e0fee3a891b93803ac9870f265698cd",
      "candidate_info": {
        "commit_hash": "d17bfc617e0fee3a891b93803ac9870f265698cd",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/d17bfc617e0fee3a891b93803ac9870f265698cd",
        "files": [
          "include/uv.h"
        ],
        "message": "doc: add documentation to uv_udp_start_recv",
        "before_after_code_files": [
          "include/uv.h||include/uv.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/uv.h||include/uv.h": [
          "File: include/uv.h -> include/uv.h"
        ]
      }
    },
    {
      "candidate_hash": "1f73bd4030d509acf3f0b6816d457f99c2a14842",
      "candidate_info": {
        "commit_hash": "1f73bd4030d509acf3f0b6816d457f99c2a14842",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/1f73bd4030d509acf3f0b6816d457f99c2a14842",
        "files": [
          "src/win/winapi.h"
        ],
        "message": "windows: add additional NTSTATUS class detection macros",
        "before_after_code_files": [
          "src/win/winapi.h||src/win/winapi.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/win/winapi.h||src/win/winapi.h": [
          "File: src/win/winapi.h -> src/win/winapi.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "52: # define NT_SUCCESS(status) (((NTSTATUS) (status)) >= 0)",
          "53: #endif",
          "55: #ifndef STATUS_SUCCESS",
          "56: # define STATUS_SUCCESS ((NTSTATUS) 0x00000000L)",
          "57: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "55: #ifndef NT_INFORMATION",
          "56: # define NT_INFORMATION(status) ((((ULONG) (status)) >> 30) == 1)",
          "57: #endif",
          "59: #ifndef NT_WARNING",
          "60: # define NT_WARNING(status) ((((ULONG) (status)) >> 30) == 2)",
          "61: #endif",
          "63: #ifndef NT_ERROR",
          "64: # define NT_ERROR(status) ((((ULONG) (status)) >> 30) == 3)",
          "65: #endif",
          "",
          "---------------"
        ]
      }
    }
  ]
}