{
  "cve_id": "CVE-2019-19242",
  "cve_desc": "SQLite 3.30.1 mishandles pExpr->y.pTab, as demonstrated by the TK_COLUMN case in sqlite3ExprCodeTarget in expr.c.",
  "repo": "sqlite/sqlite",
  "patch_hash": "57f7ece78410a8aae86aa4625fb7556897db384c",
  "patch_info": {
    "commit_hash": "57f7ece78410a8aae86aa4625fb7556897db384c",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/57f7ece78410a8aae86aa4625fb7556897db384c",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/expr.c",
      "src/wherecode.c",
      "test/gencol1.test"
    ],
    "message": "Fix a problem that comes up when using generated columns that evaluate to a constant in an index and then making use of that index in a join.\n\nFossilOrigin-Name: 8b12e95fec7ce6e0de82a04ca3dfcf1a8e62e233b7382aa28a8a9be6e862b1af",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/expr.c||src/expr.c",
      "src/wherecode.c||src/wherecode.c",
      "test/gencol1.test||test/gencol1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 2d53a30cc23e53033af8e8666457654db5dcc453ed6cd176ce1d0bff4f528159",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/expr.c||src/expr.c": [
      "File: src/expr.c -> src/expr.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3607:         int iReg = sqlite3ExprCodeTarget(pParse, pExpr->pLeft,target);",
      "3609:         if( aff>SQLITE_AFF_BLOB ){",
      "3610:           static const char zAff[] = \"B\\000C\\000D\\000E\";",
      "3611:           assert( SQLITE_AFF_BLOB=='A' );",
      "",
      "[Removed Lines]",
      "3608:         int aff = sqlite3TableColumnAffinity(pExpr->y.pTab, pExpr->iColumn);",
      "",
      "[Added Lines]",
      "3608:         int aff;",
      "3609:         if( pExpr->y.pTab ){",
      "3610:           aff = sqlite3TableColumnAffinity(pExpr->y.pTab, pExpr->iColumn);",
      "3611:         }else{",
      "3612:           aff = pExpr->affExpr;",
      "3613:         }",
      "",
      "---------------"
    ],
    "src/wherecode.c||src/wherecode.c": [
      "File: src/wherecode.c -> src/wherecode.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1141:   if( pExpr->op==TK_COLUMN ){",
      "1142:     IdxExprTrans *pX = p->u.pIdxTrans;",
      "1143:     if( pExpr->iTable==pX->iTabCur && pExpr->iColumn==pX->iTabCol ){",
      "1144:       pExpr->iTable = pX->iIdxCur;",
      "1145:       pExpr->iColumn = pX->iIdxCol;",
      "1146:       pExpr->y.pTab = 0;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1144:       assert( pExpr->y.pTab!=0 );",
      "1145:       pExpr->affExpr = sqlite3TableColumnAffinity(pExpr->y.pTab,pExpr->iColumn);",
      "",
      "---------------"
    ],
    "test/gencol1.test||test/gencol1.test": [
      "File: test/gencol1.test -> test/gencol1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "243:   UPDATE t0 SET c0 = NULL;",
      "244: } {1 {generated column loop on \"c2\"}}",
      "247: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "246: # 2019-11-21 Problems in the new generated column logic",
      "247: # reported by Yongheng Chen and Rui Zhong",
      "248: do_execsql_test gencol1-9.10 {",
      "249:   DROP TABLE IF EXISTS t1;",
      "250:   DROP TABLE IF EXISTS t2;",
      "251:   CREATE TABLE t1(aa , bb AS (17) UNIQUE);",
      "252:   INSERT INTO t1 VALUES(17);",
      "253:   CREATE TABLE t2(cc);",
      "254:   INSERT INTO t2 VALUES(41);",
      "255:   SELECT * FROM t2 JOIN t1 WHERE t1.bb=t1.aa AND t1.bb=17;",
      "256: } {41 17 17}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "da03c1e65e449ee4f0f685b63c6906ad3d7ac2a9",
      "candidate_info": {
        "commit_hash": "da03c1e65e449ee4f0f685b63c6906ad3d7ac2a9",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/da03c1e65e449ee4f0f685b63c6906ad3d7ac2a9",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "test/join.test"
        ],
        "message": "Avoid assuming that an expression that contains the sub-expression (? IS FALSE) or (? IS TRUE) may only be true if ? is non-null. Fix for [a976c487].\n\nFossilOrigin-Name: eb7ed90b8a65748f0721aaf7bdddd2207f552be5015603fbfb7044d815ae2f36",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "test/join.test||test/join.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/expr.c||src/expr.c"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/expr.c||src/expr.c"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 86e497209217abb7bcb491a023cd353f3c7c9c103ebd9f58dd8661b12cf3694c",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5149:     case TK_CASE:",
          "5150:     case TK_IN:",
          "5151:     case TK_FUNCTION:",
          "5152:       testcase( pExpr->op==TK_ISNOT );",
          "5153:       testcase( pExpr->op==TK_ISNULL );",
          "5154:       testcase( pExpr->op==TK_NOTNULL );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5152:     case TK_TRUTH:",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5157:       testcase( pExpr->op==TK_CASE );",
          "5158:       testcase( pExpr->op==TK_IN );",
          "5159:       testcase( pExpr->op==TK_FUNCTION );",
          "5160:       return WRC_Prune;",
          "5161:     case TK_COLUMN:",
          "5162:       if( pWalker->u.iCur==pExpr->iTable ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5161:       testcase( pExpr->op==TK_TRUTH );",
          "",
          "---------------"
        ],
        "test/join.test||test/join.test": [
          "File: test/join.test -> test/join.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "884:    WHERE NOT(y='a');",
          "885: } {1 3 1 3}",
          "887: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "887: #-------------------------------------------------------------------------",
          "888: reset_db",
          "889: do_execsql_test join-18.1 {",
          "890:   CREATE TABLE t0(a);",
          "891:   CREATE TABLE t1(b);",
          "892:   CREATE VIEW v0 AS SELECT a FROM t1 LEFT JOIN t0;",
          "893:   INSERT INTO t1 VALUES (1);",
          "894: } {}",
          "896: do_execsql_test join-18.2 {",
          "897:   SELECT * FROM v0 WHERE NOT(v0.a IS FALSE);",
          "898: } {{}}",
          "900: do_execsql_test join-18.3 {",
          "901:   SELECT * FROM t1 LEFT JOIN t0 WHERE NOT(a IS FALSE);",
          "902: } {1 {}}",
          "904: do_execsql_test join-18.4 {",
          "905:   SELECT NOT(v0.a IS FALSE) FROM v0",
          "906: } {1}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5eae1d1b33b376fab31497cbdb129e2e065568c8",
      "candidate_info": {
        "commit_hash": "5eae1d1b33b376fab31497cbdb129e2e065568c8",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/5eae1d1b33b376fab31497cbdb129e2e065568c8",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/analyze.c",
          "src/sqliteInt.h",
          "src/test1.c",
          "src/where.c",
          "src/whereexpr.c"
        ],
        "message": "More legacy STAT3 code removed.\n\nFossilOrigin-Name: 845d2f17de5b4740f95884307d9efec3223737bb0f2c4a74693666caf5f61c21",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/analyze.c||src/analyze.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/test1.c||src/test1.c",
          "src/where.c||src/where.c",
          "src/whereexpr.c||src/whereexpr.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 1e17ea2fd1df4ad49138c787c8fe3207dd0c25c93f9001d52a9b69f8c12e841c",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/analyze.c||src/analyze.c": [
          "File: src/analyze.c -> src/analyze.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1684:     nSample = sqlite3_column_int(pStmt, 1);",
          "1685:     pIdx = findIndexOrPrimaryKey(db, zIndex, zDb);",
          "1686:     assert( pIdx==0 || pIdx->nSample==0 );",
          "1690:     assert( !HasRowid(pIdx->pTable) || pIdx->nColumn==pIdx->nKeyCol+1 );",
          "1691:     if( !HasRowid(pIdx->pTable) && IsPrimaryKeyIndex(pIdx) ){",
          "1692:       nIdxCol = pIdx->nKeyCol;",
          "",
          "[Removed Lines]",
          "1689:     if( pIdx==0 || pIdx->nSample ) continue;",
          "",
          "[Added Lines]",
          "1687:     if( pIdx==0 ) continue;",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h"
        ],
        "src/test1.c||src/test1.c": [
          "File: src/test1.c -> src/test1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "7173:     { \"order-by-idx-join\",   SQLITE_OrderByIdxJoin },",
          "7174:     { \"transitive\",          SQLITE_Transitive     },",
          "7175:     { \"omit-noop-join\",      SQLITE_OmitNoopJoin   },",
          "7177:     { \"skip-scan\",           SQLITE_SkipScan       },",
          "7178:   };",
          "",
          "[Removed Lines]",
          "7176:     { \"stat4\",               SQLITE_Stat34         },",
          "",
          "[Added Lines]",
          "7176:     { \"stat4\",               SQLITE_Stat4          },",
          "",
          "---------------"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1474:   Index *p = pLoop->u.btree.pIndex;",
          "1475:   int nEq = pLoop->u.btree.nEq;",
          "1479:   ){",
          "1480:     if( nEq==pBuilder->nRecValid ){",
          "1481:       UnpackedRecord *pRec = pBuilder->pRec;",
          "",
          "[Removed Lines]",
          "1477:   if( p->nSample>0 && nEq<p->nSampleCol",
          "1478:    && OptimizationEnabled(pParse->db, SQLITE_Stat34)",
          "",
          "[Added Lines]",
          "1477:   if( p->nSample>0 && ALWAYS(nEq<p->nSampleCol)",
          "1478:    && OptimizationEnabled(pParse->db, SQLITE_Stat4)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2633:          && pProbe->nSample",
          "2634:          && pNew->u.btree.nEq<=pProbe->nSampleCol",
          "2635:          && ((eOp & WO_IN)==0 || !ExprHasProperty(pTerm->pExpr, EP_xIsSelect))",
          "2637:         ){",
          "2638:           Expr *pExpr = pTerm->pExpr;",
          "2639:           if( (eOp & (WO_EQ|WO_ISNULL|WO_IS))!=0 ){",
          "",
          "[Removed Lines]",
          "2636:          && OptimizationEnabled(db, SQLITE_Stat34)",
          "",
          "[Added Lines]",
          "2636:          && OptimizationEnabled(db, SQLITE_Stat4)",
          "",
          "---------------"
        ],
        "src/whereexpr.c||src/whereexpr.c": [
          "File: src/whereexpr.c -> src/whereexpr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1393:    && pExpr->pLeft->op==TK_COLUMN",
          "1394:    && pExpr->pLeft->iColumn>=0",
          "1395:    && !ExprHasProperty(pExpr, EP_FromJoin)",
          "1397:   ){",
          "1398:     Expr *pNewExpr;",
          "1399:     Expr *pLeft = pExpr->pLeft;",
          "",
          "[Removed Lines]",
          "1396:    && OptimizationEnabled(db, SQLITE_Stat34)",
          "",
          "[Added Lines]",
          "1396:    && OptimizationEnabled(db, SQLITE_Stat4)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2cd02a5d2a4ea33cd40a3032a2041447adc4d772",
      "candidate_info": {
        "commit_hash": "2cd02a5d2a4ea33cd40a3032a2041447adc4d772",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/2cd02a5d2a4ea33cd40a3032a2041447adc4d772",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/os_win.c"
        ],
        "message": "Add assert()s in os_win.c in an effort to silence false-positives from static analyzers.\n\nFossilOrigin-Name: 22a7c15b262376fb0ce4dd3d044373380d86c5ccd96e2f24576cf04318597c33",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/os_win.c||src/os_win.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 2422534908a85a4cd11784e4c23a74ad121404f73dade587bf27efde1e2b982b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/os_win.c||src/os_win.c": [
          "File: src/os_win.c -> src/os_win.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4215:     rc = winOpenSharedMemory(pDbFd);",
          "4216:     if( rc!=SQLITE_OK ) return rc;",
          "4217:     pShm = pDbFd->pShm;",
          "4218:   }",
          "4219:   pShmNode = pShm->pShmNode;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4218:     assert( pShm!=0 );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4517:       }",
          "4518:     }",
          "4519:     if( pFd->mmapSize >= iOff+nAmt ){",
          "4521:       pFd->nFetchOut++;",
          "4522:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4521:       assert( pFd->pMapRegion!=0 );",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "166bc383e274b40662991db0612498b038a0cbab",
      "candidate_info": {
        "commit_hash": "166bc383e274b40662991db0612498b038a0cbab",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/166bc383e274b40662991db0612498b038a0cbab",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/select.c"
        ],
        "message": "Minor changes to help ensure the pointer returned by sqlite3VdbeGetOp() is not used after it becomes invalid.\n\nFossilOrigin-Name: 346bdd49fb93aa58e8bd14250974d8c0c32cc7e8317c8b12da1fa44db10d8a3a",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/select.c||src/select.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: c422afb507dc875751e6a72e4ba5f4f0793097c0de4533c1600311f689e76ed7",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c"
        ]
      }
    },
    {
      "candidate_hash": "bc4974c81bd4cda9900185a655b577f19a894e03",
      "candidate_info": {
        "commit_hash": "bc4974c81bd4cda9900185a655b577f19a894e03",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/bc4974c81bd4cda9900185a655b577f19a894e03",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/fkey.c"
        ],
        "message": "The SET DEFAULT and SET NULL conflict resolution actions for foreign key constraints should cause an error when they appear on a generated column.\n\nFossilOrigin-Name: b47513d2b32b61ba42c1e9b59287d28f6fee231e6c65de2a3aa19effbbaf1e7f",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/fkey.c||src/fkey.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 0a2eb949f8a759e5745d9468c8183d3c0b4b30e0fa2a14b3062620eb9e1d5c1d",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/fkey.c||src/fkey.c": [
          "File: src/fkey.c -> src/fkey.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1269:             sqlite3ExprAlloc(db, TK_ID, &tNew, 0),",
          "1270:             sqlite3ExprAlloc(db, TK_ID, &tToCol, 0));",
          "1271:         }else if( action==OE_SetDflt ){",
          "1273:           if( pDflt ){",
          "1274:             pNew = sqlite3ExprDup(db, pDflt, 0);",
          "1275:           }else{",
          "",
          "[Removed Lines]",
          "1272:           Expr *pDflt = pFKey->pFrom->aCol[iFromCol].pDflt;",
          "",
          "[Added Lines]",
          "1272:           Column *pCol = pFKey->pFrom->aCol + iFromCol;",
          "1273:           Expr *pDflt;",
          "1274:           if( pCol->colFlags & COLFLAG_GENERATED ){",
          "1275:             testcase( pCol->colFlags & COLFLAG_VIRTUAL );",
          "1276:             testcase( pCol->colFlags & COLFLAG_STORED );",
          "1277:             pDflt = 0;",
          "1278:           }else{",
          "1279:             pDflt = pCol->pDflt;",
          "1280:           }",
          "",
          "---------------"
        ]
      }
    }
  ]
}