{
  "cve_id": "CVE-2019-19925",
  "cve_desc": "zipfileUpdate in ext/misc/zipfile.c in SQLite 3.30.1 mishandles a NULL pathname during an update of a ZIP archive.",
  "repo": "sqlite/sqlite",
  "patch_hash": "54d501092d88c0cf89bec4279951f548fb0b8618",
  "patch_info": {
    "commit_hash": "54d501092d88c0cf89bec4279951f548fb0b8618",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/54d501092d88c0cf89bec4279951f548fb0b8618",
    "files": [
      "ext/misc/zipfile.c",
      "manifest",
      "manifest.uuid",
      "test/zipfile.test"
    ],
    "message": "Fix the zipfile extension so that INSERT works even if the pathname of the file being inserted is a NULL.  Bug discovered by the Yongheng and Rui fuzzer.\n\nFossilOrigin-Name: a80f84b511231204658304226de3e075a55afc2e3f39ac063716f7a57f585c06",
    "before_after_code_files": [
      "ext/misc/zipfile.c||ext/misc/zipfile.c",
      "manifest.uuid||manifest.uuid",
      "test/zipfile.test||test/zipfile.test"
    ]
  },
  "patch_diff": {
    "ext/misc/zipfile.c||ext/misc/zipfile.c": [
      "File: ext/misc/zipfile.c -> ext/misc/zipfile.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1620:     if( rc==SQLITE_OK ){",
      "1621:       zPath = (const char*)sqlite3_value_text(apVal[2]);",
      "1622:       nPath = (int)strlen(zPath);",
      "1623:       mTime = zipfileGetTime(apVal[4]);",
      "1624:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1622:       if( zPath==0 ) zPath = \"\";",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: fccfb8a9ed3c1df9f23762bb8df6fdf36a21118899e3fae41f451169a5f2c08e",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "test/zipfile.test||test/zipfile.test": [
      "File: test/zipfile.test -> test/zipfile.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "795:   } {. ./x1.txt ./x2.txt}",
      "796: }",
      "798: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "798: # 2019-12-18 Yongheng and Rui fuzzer",
      "799: #",
      "800: do_execsql_test 13.10 {",
      "801:   DROP TABLE IF EXISTS t0;",
      "802:   DROP TABLE IF EXISTS t1;",
      "803:   CREATE TABLE t0(a,b,c,d,e,f,g);",
      "804:   REPLACE INTO t0(c,b,f) VALUES(10,10,10);",
      "805:   CREATE VIRTUAL TABLE t1 USING zipfile('h.zip');",
      "806:   REPLACE INTO t1 SELECT * FROM t0;",
      "807:   SELECT quote(name),quote(mode),quote(mtime),quote(sz),quote(rawdata),",
      "808:          quote(data),quote(method) FROM t1;",
      "809: } {'' 10 10 2 X'3130' X'3130' 0}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "e893759cac17443c63fd0bc0bfce198985da7aa5",
      "candidate_info": {
        "commit_hash": "e893759cac17443c63fd0bc0bfce198985da7aa5",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e893759cac17443c63fd0bc0bfce198985da7aa5",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/where.c"
        ],
        "message": "The ALWAYS() added by the previous check-in was incorrect.  Take it back out.\n\nFossilOrigin-Name: 336235db2b1167cdb2feb64b47eb6368c97c43ee9641b7bfccc5775a41dd0d0e",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/where.c||src/where.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: aff209804722ac902c7abfde80ad2677e0f51beb2c7f28f65d51105d984a1640",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "802:         idxCols |= cMask;",
          "803:         pIdx->aiColumn[n] = pTerm->u.leftColumn;",
          "804:         pColl = sqlite3BinaryCompareCollSeq(pParse, pX->pLeft, pX->pRight);",
          "806:         n++;",
          "807:       }",
          "808:     }",
          "",
          "[Removed Lines]",
          "805:         pIdx->azColl[n] = ALWAYS(pColl) ? pColl->zName : sqlite3StrBINARY;",
          "",
          "[Added Lines]",
          "805:         pIdx->azColl[n] = pColl ? pColl->zName : sqlite3StrBINARY;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e20a894a34894eeb4eca0252d4ff25f99ac311e8",
      "candidate_info": {
        "commit_hash": "e20a894a34894eeb4eca0252d4ff25f99ac311e8",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e20a894a34894eeb4eca0252d4ff25f99ac311e8",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/parse.y",
          "test/altertab3.test"
        ],
        "message": "Handle renaming a column or table when the schema contains a (meaningless) index on the constant expression ('text' IN ()) or ('text' NOT IN()).\n\nFossilOrigin-Name: 567b13093956185b5d5e971b81ba4788fd9d26c03688f643b380f0f1c1a94da0",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/parse.y||src/parse.y",
          "test/altertab3.test||test/altertab3.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 94b58ab059cba9771e75f16d1460f313104a8fb879f9f8805725d362aa58cbcd",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/parse.y||src/parse.y": [
          "File: src/parse.y -> src/parse.y",
          "--- Hunk 1 ---",
          "[Context before]",
          "1176:       if( IN_RENAME_OBJECT==0 ){",
          "1177:         sqlite3ExprDelete(pParse->db, A);",
          "1178:         A = sqlite3ExprAlloc(pParse->db, TK_INTEGER,&sqlite3IntTokens[N],1);",
          "1179:       }",
          "1180:     }else if( Y->nExpr==1 ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1185:       }else{",
          "1186:         A = sqlite3PExpr(pParse, TK_UPLUS, A, 0);",
          "",
          "---------------"
        ],
        "test/altertab3.test||test/altertab3.test": [
          "File: test/altertab3.test -> test/altertab3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "175:   ALTER TABLE t1x RENAME TO t1;",
          "176: } {1 {error in trigger AFTER: no such column: d}}",
          "178: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "178: #-------------------------------------------------------------------------",
          "179: reset_db",
          "180: do_execsql_test 8.0 {",
          "181:   CREATE TABLE t0(c0);",
          "182:   CREATE INDEX i0 ON t0('1' IN ());",
          "183: }",
          "184: do_execsql_test 8.1 {",
          "185:   ALTER TABLE t0 RENAME TO t1;",
          "186:   SELECT sql FROM sqlite_master;",
          "187: } {",
          "188:   {CREATE TABLE \"t1\"(c0)}",
          "189:   {CREATE INDEX i0 ON \"t1\"('1' IN ())}",
          "190: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "531230d006696e418d40b7808798de628a3fd4f2",
      "candidate_info": {
        "commit_hash": "531230d006696e418d40b7808798de628a3fd4f2",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/531230d006696e418d40b7808798de628a3fd4f2",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/releasetest.tcl"
        ],
        "message": "Add -DSQLITE_ENABLE_DESERIALIZE to the default testing configuration in test/releasetest.tcl.\n\nFossilOrigin-Name: 433d6ef637a10ee017b5d8cadd125a162cfedc9895ae862b8dde6dddb7eda59b",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/releasetest.tcl||test/releasetest.tcl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 3839e9098107604e1526c2b1e813c019607077dfe39d7eeb92f3466518dec3b1",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/releasetest.tcl||test/releasetest.tcl": [
          "File: test/releasetest.tcl -> test/releasetest.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "50:     -O2",
          "51:     --disable-amalgamation --disable-shared",
          "52:     --enable-session",
          "53:   }",
          "54:   \"Sanitize\" {",
          "55:     CC=clang -fsanitize=undefined",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "53:     -DSQLITE_ENABLE_DESERIALIZE",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "45616c7f7539fcb60547ae95b06dd4fd421ff453",
      "candidate_info": {
        "commit_hash": "45616c7f7539fcb60547ae95b06dd4fd421ff453",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/45616c7f7539fcb60547ae95b06dd4fd421ff453",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c",
          "test/fuzzdata8.db"
        ],
        "message": "Add an \"|| CORRUPT_DB\" term to an assert() statement in the btree defragmenter.\n\nFossilOrigin-Name: 6bfd8655f006e031c0d4c988356c4b9206efa6bfdb034fde8ffa3361521a4844",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 6ae4b8c525f446ddb0e0bdd5e4e01e06e2ab975e3effa42fce6a1102b3a39830",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1421:   hdr = pPage->hdrOffset;",
          "1422:   cellOffset = pPage->cellOffset;",
          "1423:   nCell = pPage->nCell;",
          "1425:   iCellFirst = cellOffset + 2*nCell;",
          "1426:   usableSize = pPage->pBt->usableSize;",
          "",
          "[Removed Lines]",
          "1424:   assert( nCell==get2byte(&data[hdr+3]) );",
          "",
          "[Added Lines]",
          "1424:   assert( nCell==get2byte(&data[hdr+3]) || CORRUPT_DB );",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "77318a3c3f22f34a3b88e2522f1be966bfb4073b",
      "candidate_info": {
        "commit_hash": "77318a3c3f22f34a3b88e2522f1be966bfb4073b",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/77318a3c3f22f34a3b88e2522f1be966bfb4073b",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/resolve.c"
        ],
        "message": "Factor out the conditional (which is only true for rare errors) from the notValid() function in resolve.c, for a performance improvement and size reduction.  Also cause failures to set the Expr node to a NULL operator so that it does not cause problems later in case PRAGMA writable_schema=ON has been set.  Test cases in TH3.\n\nFossilOrigin-Name: c6af9f655b73200ecc0c4189698e421af6ca584babdc76e73a36d468b2eea1f9",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/resolve.c||src/resolve.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 48ba5e5a2227257cebafacbb09e9dd91d9b89ab2d52a8b4e4113c1d017d95f41",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/resolve.c||src/resolve.c": [
          "File: src/resolve.c -> src/resolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "652: ){",
          "657: #ifndef SQLITE_OMIT_CHECK",
          "659: #endif",
          "660: #ifndef SQLITE_OMIT_GENERATED_COLUMNS",
          "662: #endif",
          "665: }",
          "",
          "[Removed Lines]",
          "647: static void notValid(",
          "653:   assert( (validMask&~(NC_IsCheck|NC_PartIdx|NC_IdxExpr|NC_GenCol))==0 );",
          "654:   if( (pNC->ncFlags & validMask)!=0 ){",
          "655:     const char *zIn = \"partial index WHERE clauses\";",
          "656:     if( pNC->ncFlags & NC_IdxExpr )      zIn = \"index expressions\";",
          "658:     else if( pNC->ncFlags & NC_IsCheck ) zIn = \"CHECK constraints\";",
          "661:     else if( pNC->ncFlags & NC_GenCol ) zIn = \"generated columns\";",
          "663:     sqlite3ErrorMsg(pParse, \"%s prohibited in %s\", zMsg, zIn);",
          "664:   }",
          "",
          "[Added Lines]",
          "659: static void notValidImpl(",
          "665:   const char *zIn = \"partial index WHERE clauses\";",
          "666:   if( pNC->ncFlags & NC_IdxExpr )      zIn = \"index expressions\";",
          "668:   else if( pNC->ncFlags & NC_IsCheck ) zIn = \"CHECK constraints\";",
          "671:   else if( pNC->ncFlags & NC_GenCol ) zIn = \"generated columns\";",
          "673:   sqlite3ErrorMsg(pParse, \"%s prohibited in %s\", zMsg, zIn);",
          "674:   if( pExpr ) pExpr->op = TK_NULL;",
          "676: #define sqlite3ResolveNotValid(P,N,M,X,E) \\",
          "677:   assert( ((X)&~(NC_IsCheck|NC_PartIdx|NC_IdxExpr|NC_GenCol))==0 ); \\",
          "678:   if( ((N)->ncFlags & (X))!=0 ) notValidImpl(P,N,M,E);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "751:         zColumn = pExpr->u.zToken;",
          "752:       }else{",
          "753:         Expr *pLeft = pExpr->pLeft;",
          "755:         pRight = pExpr->pRight;",
          "756:         if( pRight->op==TK_ID ){",
          "757:           zDb = 0;",
          "",
          "[Removed Lines]",
          "754:         notValid(pParse, pNC, \"the \\\".\\\" operator\", NC_IdxExpr|NC_GenCol);",
          "",
          "[Added Lines]",
          "767:         testcase( pNC->ncFlags & NC_IdxExpr );",
          "768:         testcase( pNC->ncFlags & NC_GenCol );",
          "769:         sqlite3ResolveNotValid(pParse, pNC, \"the \\\".\\\" operator\",",
          "770:                                NC_IdxExpr|NC_GenCol, 0);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "852:         }else{",
          "854:           pExpr->op2 = pNC->ncFlags & NC_SelfRef;",
          "",
          "[Removed Lines]",
          "851:           notValid(pParse, pNC, \"non-deterministic functions\", NC_SelfRef);",
          "",
          "[Added Lines]",
          "867:           sqlite3ResolveNotValid(pParse, pNC, \"non-deterministic functions\",",
          "868:                                  NC_SelfRef, 0);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "995:       testcase( pExpr->op==TK_IN );",
          "996:       if( ExprHasProperty(pExpr, EP_xIsSelect) ){",
          "997:         int nRef = pNC->nRef;",
          "1000:         sqlite3WalkSelect(pWalker, pExpr->x.pSelect);",
          "1001:         assert( pNC->nRef>=nRef );",
          "1002:         if( nRef!=pNC->nRef ){",
          "",
          "[Removed Lines]",
          "998:         notValid(pParse, pNC, \"subqueries\",",
          "999:                  NC_IsCheck|NC_PartIdx|NC_IdxExpr|NC_GenCol);",
          "",
          "[Added Lines]",
          "1015:         testcase( pNC->ncFlags & NC_IsCheck );",
          "1016:         testcase( pNC->ncFlags & NC_PartIdx );",
          "1017:         testcase( pNC->ncFlags & NC_IdxExpr );",
          "1018:         testcase( pNC->ncFlags & NC_GenCol );",
          "1019:         sqlite3ResolveNotValid(pParse, pNC, \"subqueries\",",
          "1020:                  NC_IsCheck|NC_PartIdx|NC_IdxExpr|NC_GenCol, pExpr);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1007:       break;",
          "1008:     }",
          "1009:     case TK_VARIABLE: {",
          "1012:       break;",
          "1013:     }",
          "1014:     case TK_IS:",
          "",
          "[Removed Lines]",
          "1010:       notValid(pParse, pNC, \"parameters\",",
          "1011:                NC_IsCheck|NC_PartIdx|NC_IdxExpr|NC_GenCol);",
          "",
          "[Added Lines]",
          "1031:       testcase( pNC->ncFlags & NC_IsCheck );",
          "1032:       testcase( pNC->ncFlags & NC_PartIdx );",
          "1033:       testcase( pNC->ncFlags & NC_IdxExpr );",
          "1034:       testcase( pNC->ncFlags & NC_GenCol );",
          "1035:       sqlite3ResolveNotValid(pParse, pNC, \"parameters\",",
          "1036:                NC_IsCheck|NC_PartIdx|NC_IdxExpr|NC_GenCol, pExpr);",
          "",
          "---------------"
        ]
      }
    }
  ]
}