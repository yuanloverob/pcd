{
  "cve_id": "CVE-2021-20223",
  "cve_desc": "",
  "repo": "sqlite/sqlite",
  "patch_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
  "patch_info": {
    "commit_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "files": [
      "ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Prevent fts5 tokenizer unicode61 from considering '\\0' to be a token characters, even if other characters of class \"Cc\" are.\n\nFossilOrigin-Name: b7b7bde9b7a03665e3691c6d51118965f216d2dfb1617f138b9f9e60e418ed2f",
    "before_after_code_files": [
      "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
      "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c"
    ],
    "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test": [
      "File: ext/fts5/test/fts5tok1.test -> ext/fts5/test/fts5tok1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:   SELECT * FROM t4;",
      "112: } {1 {SQL logic error}}",
      "115: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114: #-------------------------------------------------------------------------",
      "115: # Embedded 0x00 characters.",
      "116: #",
      "117: reset_db",
      "118: do_execsql_test 3.1.0 {",
      "119:   CREATE VIRTUAL TABLE t1 USING fts5(z);",
      "120:   CREATE VIRTUAL TABLE tt USING fts5vocab(t1, 'instance');",
      "121:   INSERT INTO t1 VALUES('abc' || char(0) || 'def');",
      "122:   SELECT * FROM tt;",
      "123: } { abc 1 z 0 def 1 z 1 }",
      "124: do_execsql_test 3.1.1 {",
      "125:   SELECT hex(z) FROM t1;",
      "126: } {61626300646566}",
      "127: do_execsql_test 3.1.2 {",
      "128:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "129: } {}",
      "131: do_execsql_test 3.2.0 {",
      "132:   CREATE VIRTUAL TABLE t2 USING fts5(z,",
      "133:       tokenize=\"unicode61 categories 'L* N* Co Cc'\"",
      "134:   );",
      "135:   CREATE VIRTUAL TABLE tu USING fts5vocab(t2, 'instance');",
      "137:   INSERT INTO t2 VALUES('abc' || char(0) || 'def');",
      "138:   SELECT * FROM tu;",
      "139: } { abc 1 z 0 def 1 z 1 }",
      "141: do_execsql_test 3.2.1 {",
      "142:   SELECT hex(z) FROM t1;",
      "143: } {61626300646566}",
      "145: do_execsql_test 3.2.2 {",
      "146:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "147: } {}",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 0e7e113d9f2c929c1f8a85e2cfad8e2e60f0e8770212b5e5320fb2a2c42911f8",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "64f7ee021943e0d652f8fb86d887e63c63f02ea2",
      "candidate_info": {
        "commit_hash": "64f7ee021943e0d652f8fb86d887e63c63f02ea2",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/64f7ee021943e0d652f8fb86d887e63c63f02ea2",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c",
          "test/fuzzdata8.db"
        ],
        "message": "Remove another NEVER added by check-in [7b62555e285f32d3]. Dbsqlfuzz found another test case.\n\nFossilOrigin-Name: 481f4956aff52797880930752693a8c0b10d7fdd71d86919fe8ee13c90ad5b81",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: b5900914f7f34caf1a97c87233781d55467329b0ac4366354df13c6fd72a99c7",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "7104:         }",
          "7105:         pFree = pCell;",
          "7106:         szFree = sz;",
          "7108:       }else{",
          "7109:         pFree = pCell;",
          "7110:         szFree += sz;",
          "",
          "[Removed Lines]",
          "7107:         if( NEVER(pFree+sz>pEnd) ) return 0;",
          "",
          "[Added Lines]",
          "7107:         if( pFree+sz>pEnd ) return 0;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9a1bb3f6166f08e9f520393b2c9c3ce892366922",
      "candidate_info": {
        "commit_hash": "9a1bb3f6166f08e9f520393b2c9c3ce892366922",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/9a1bb3f6166f08e9f520393b2c9c3ce892366922",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/sqlite3ext.h"
        ],
        "message": "Add the sqlite3_database_file_object() interface to sqlite3ext.h.\n\nFossilOrigin-Name: 3cabe06b6e9433cbfb4bf7bd72a425f43b54f57d84a205adbaa6a1147bbe46bf",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/sqlite3ext.h||src/sqlite3ext.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: ae697b152d22737169892411a0c4d908895ff5fb249cce9bdb1ba0bbe32806f0",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/sqlite3ext.h||src/sqlite3ext.h": [
          "File: src/sqlite3ext.h -> src/sqlite3ext.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "639: #define sqlite3_create_filename        sqlite3_api->create_filename",
          "640: #define sqlite3_free_filename          sqlite3_api->free_filename",
          "643: #if !defined(SQLITE_CORE) && !defined(SQLITE_OMIT_LOAD_EXTENSION)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "641: #define sqlite3_database_file_object   sqlite3_api->database_file_object",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "beb22d086bae43a3e21ee140af3a9c8e369939d9",
      "candidate_info": {
        "commit_hash": "beb22d086bae43a3e21ee140af3a9c8e369939d9",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/beb22d086bae43a3e21ee140af3a9c8e369939d9",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/analyze.c",
          "src/sqliteInt.h",
          "src/where.c",
          "test/distinct2.test",
          "test/skipscan5.test",
          "test/whereG.test"
        ],
        "message": "Minor tweaks to query planning weights so that when STAT4 is enabled and functioning, a full table scan is more likely to be selected if that seems like the fastest solution.  Only do this when STAT4 info is available because an error has a large potential downside.\n\nFossilOrigin-Name: 0e7e113d9f2c929c1f8a85e2cfad8e2e60f0e8770212b5e5320fb2a2c42911f8",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/analyze.c||src/analyze.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/where.c||src/where.c",
          "test/distinct2.test||test/distinct2.test",
          "test/skipscan5.test||test/skipscan5.test",
          "test/whereG.test||test/whereG.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 602d7369166d406a26834aa47d71d565a17d377d32e41f308821a50b41f91896",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/analyze.c||src/analyze.c": [
          "File: src/analyze.c -> src/analyze.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1772:     }",
          "1773:     pSpace = (tRowcnt*)&pIdx->aSample[nSample];",
          "1774:     pIdx->aAvgEq = pSpace; pSpace += nIdxCol;",
          "1775:     for(i=0; i<nSample; i++){",
          "1776:       pIdx->aSample[i].anEq = pSpace; pSpace += nIdxCol;",
          "1777:       pIdx->aSample[i].anLt = pSpace; pSpace += nIdxCol;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1775:     pIdx->pTable->tabFlags |= TF_HasStat4;",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3044:       pNew->iSortIdx = b ? iSortIdx : 0;",
          "3046:       pNew->rRun = rSize + 16;",
          "3047:       ApplyCostMultiplier(pNew->rRun, pTab->costMult);",
          "3048:       whereLoopOutputAdjust(pWC, pNew, rSize);",
          "3049:       rc = whereLoopInsert(pBuilder, pNew);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3057: #ifdef SQLITE_ENABLE_STAT4",
          "3058:       pNew->rRun = rSize + 16 - 2*((pTab->tabFlags & TF_HasStat4)!=0);",
          "3059: #else",
          "3061: #endif",
          "",
          "---------------"
        ],
        "test/distinct2.test||test/distinct2.test": [
          "File: test/distinct2.test -> test/distinct2.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "266:   ANALYZE;",
          "267: }",
          "268: do_execsql_test 2040 {",
          "270: } {",
          "271:   one 0 1",
          "272:   one 1 1",
          "",
          "[Removed Lines]",
          "269:   SELECT DISTINCT a, b, x FROM t3 CROSS JOIN t2 ORDER BY a;",
          "",
          "[Added Lines]",
          "269:   SELECT DISTINCT a, b, x FROM t3 CROSS JOIN t2 ORDER BY a, +b;",
          "",
          "---------------"
        ],
        "test/skipscan5.test||test/skipscan5.test": [
          "File: test/skipscan5.test -> test/skipscan5.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: expr srand(4)",
          "32: do_test 1.2 {",
          "34:     set a [expr int(rand()*4.0) + 1]",
          "35:     set b [expr int(rand()*20.0) + 1]",
          "36:     execsql { INSERT INTO t1 VALUES($a, $b, NULL) }",
          "",
          "[Removed Lines]",
          "33:   for {set i 0} {$i < 100} {incr i} {",
          "",
          "[Added Lines]",
          "33:   for {set i 0} {$i < 1000} {incr i} {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "43:   2  \"b > 12 AND b < 16\"       {/*ANY(a) AND b>? AND b<?*/}",
          "44:   3  \"b > 2 AND b < 16\"        {/*SCAN TABLE t1*/}",
          "45:   4  \"b > 18 AND b < 25\"       {/*ANY(a) AND b>? AND b<?*/}",
          "47:   6  \"b > 5\"                   {/*SCAN TABLE t1*/}",
          "48:   7  \"b < 15\"                  {/*SCAN TABLE t1*/}",
          "49:   8  \"b < 5\"                   {/*ANY(a) AND b<?*/}",
          "",
          "[Removed Lines]",
          "46:   5  \"b > 15\"                  {/*ANY(a) AND b>?*/}",
          "",
          "[Added Lines]",
          "46:   5  \"b > 16\"                  {/*ANY(a) AND b>?*/}",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "52:   11 \"b > '12' AND b < '16'\"   {/*ANY(a) AND b>? AND b<?*/}",
          "53:   12 \"b > '2' AND b < '16'\"    {/*SCAN TABLE t1*/}",
          "54:   13 \"b > '18' AND b < '25'\"   {/*ANY(a) AND b>? AND b<?*/}",
          "56:   15 \"b > '5'\"                 {/*SCAN TABLE t1*/}",
          "57:   16 \"b < '15'\"                {/*SCAN TABLE t1*/}",
          "58:   17 \"b < '5'\"                 {/*ANY(a) AND b<?*/}",
          "",
          "[Removed Lines]",
          "55:   14 \"b > '15'\"                {/*ANY(a) AND b>?*/}",
          "",
          "[Added Lines]",
          "55:   14 \"b > '16'\"                {/*ANY(a) AND b>?*/}",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "108:     3 { c > 'q' }                     {/*ANY(a) AND ANY(b) AND c>?*/}",
          "109:     4 { c > 'e' }                     {/*SCAN TABLE t2*/}",
          "110:     5 { c < 'q' }                     {/*SCAN TABLE t2*/}",
          "112:   } {",
          "113:     set sql \"EXPLAIN QUERY PLAN SELECT * FROM t2 WHERE $q\"",
          "114:     do_execsql_test 2.$tn.$tn2 $sql $res",
          "",
          "[Removed Lines]",
          "111:     6 { c < 'c' }                     {/*ANY(a) AND ANY(b) AND c<?*/}",
          "",
          "[Added Lines]",
          "111:     6 { c < 'b' }                     {/*ANY(a) AND ANY(b) AND c<?*/}",
          "",
          "---------------"
        ],
        "test/whereG.test||test/whereG.test": [
          "File: test/whereG.test -> test/whereG.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "220:   SELECT * FROM t1 WHERE likely(b>?)",
          "221: } {SCAN TABLE t1}",
          "226: do_eqp_test 5.3.2 {",
          "227:   SELECT * FROM t1 WHERE likelihood(a=?, 0.9)",
          "228: } {SCAN TABLE t1}",
          "",
          "[Removed Lines]",
          "223: do_eqp_test 5.3.1 {",
          "224:   SELECT * FROM t1 WHERE a=?",
          "225: } {SEARCH TABLE t1 USING INDEX i1 (a=?)}",
          "",
          "[Added Lines]",
          "223: ifcapable stat4 {",
          "224:   do_eqp_test 5.3.1.stat4 {",
          "225:     SELECT * FROM t1 WHERE a=?",
          "226:   } {SCAN TABLE t1}",
          "227: } else {",
          "228:   do_eqp_test 5.3.1 {",
          "229:     SELECT * FROM t1 WHERE a=?",
          "230:   } {SEARCH TABLE t1 USING INDEX i1}",
          "231: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1e6c58dee291617e85fe1ef056d5d36bd5b6a5f2",
      "candidate_info": {
        "commit_hash": "1e6c58dee291617e85fe1ef056d5d36bd5b6a5f2",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/1e6c58dee291617e85fe1ef056d5d36bd5b6a5f2",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.h"
        ],
        "message": "Better understanding of savepoint code\n\nFossilOrigin-Name: ce6d8d621505f25e4fd43e7cf27445e1a2ddd58d79108d63499c2ae30cc9f610",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.h||src/btree.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 43f7ddad800acf40917c5cc3d926640dbec17c34d5f1cbbb74bd80f44eeed0a5",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.h||src/btree.h": [
          "File: src/btree.h -> src/btree.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "87: int sqlite3BtreeCreateTable(Btree*, Pgno*, int flags);",
          "88: int sqlite3BtreeTxnState(Btree*);",
          "89: int sqlite3BtreeIsInBackup(Btree*);",
          "90: void *sqlite3BtreeSchema(Btree *, int, void(*)(void *));",
          "91: int sqlite3BtreeSchemaLocked(Btree *pBtree);",
          "92: #ifndef SQLITE_OMIT_SHARED_CACHE",
          "93: int sqlite3BtreeLockTable(Btree *pBtree, int iTab, u8 isWriteLock);",
          "94: #endif",
          "95: int sqlite3BtreeSavepoint(Btree *, int, int);",
          "97: const char *sqlite3BtreeGetFilename(Btree *);",
          "98: const char *sqlite3BtreeGetJournalname(Btree *);",
          "99: int sqlite3BtreeCopyFile(Btree *, Btree *);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "102: #ifndef SQLITE_OMIT_WAL",
          "103:   int sqlite3BtreeCheckpoint(Btree*, int, int *, int *);",
          "104: #endif",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "67b9ba1732c7ed1c561ed124b4eaaaa0b7081c2e",
      "candidate_info": {
        "commit_hash": "67b9ba1732c7ed1c561ed124b4eaaaa0b7081c2e",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/67b9ba1732c7ed1c561ed124b4eaaaa0b7081c2e",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "test/gencol1.test"
        ],
        "message": "Apply real affinity to generated columns of type REAL that are extract from an index.  Ticket [e0a8120553f4b082]\n\nFossilOrigin-Name: 728ad39e3bd07a2503a95c68ed5bbc3f28fd97551d59f12a5fab25dc68227e99",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "test/gencol1.test||test/gencol1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 64154ac450e4366d18e7e867841877a69c1f978d3ba9b8754cc133248966731d",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3609:     }",
          "3610:     case TK_COLUMN: {",
          "3611:       int iTab = pExpr->iTable;",
          "3612:       if( ExprHasProperty(pExpr, EP_FixedCol) ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3612:       int iReg;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3620:         int aff;",
          "3621:         if( pExpr->y.pTab ){",
          "3622:           aff = sqlite3TableColumnAffinity(pExpr->y.pTab, pExpr->iColumn);",
          "3623:         }else{",
          "",
          "[Removed Lines]",
          "3619:         int iReg = sqlite3ExprCodeTarget(pParse, pExpr->pLeft,target);",
          "",
          "[Added Lines]",
          "3621:         iReg = sqlite3ExprCodeTarget(pParse, pExpr->pLeft,target);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3685:           iTab = pParse->iSelfTab - 1;",
          "3686:         }",
          "3687:       }",
          "3689:                                pExpr->iColumn, iTab, target,",
          "3690:                                pExpr->op2);",
          "3691:     }",
          "3692:     case TK_INTEGER: {",
          "3693:       codeInteger(pParse, pExpr, 0, target);",
          "",
          "[Removed Lines]",
          "3688:       return sqlite3ExprCodeGetColumn(pParse, pExpr->y.pTab,",
          "",
          "[Added Lines]",
          "3689:       iReg = sqlite3ExprCodeGetColumn(pParse, pExpr->y.pTab,",
          "3692:       if( pExpr->y.pTab==0 && pExpr->affExpr==SQLITE_AFF_REAL ){",
          "3693:         sqlite3VdbeAddOp1(v, OP_RealAffinity, iReg);",
          "3694:       }",
          "3695:       return iReg;",
          "",
          "---------------"
        ],
        "test/gencol1.test||test/gencol1.test": [
          "File: test/gencol1.test -> test/gencol1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "442:   SELECT c0, c1, c2 FROM t0 LEFT JOIN t1 ON c0=c1;",
          "443: } {0 {} {}}",
          "446: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "445: # 2019-12-20 ticket e0a8120553f4b082",
          "446: # Generated columns with REAL affinity need to have an OP_RealAffinity",
          "447: # opcode applied, even when the column value is extracted from an index.",
          "448: #",
          "449: reset_db",
          "450: do_execsql_test gencol1-17.10 {",
          "451:   CREATE TABLE t0(c0 REAL AS(1) UNIQUE, c1 INT);",
          "452:   INSERT INTO t0 VALUES('');",
          "453:   SELECT quote(c0), quote(c1) from t0;",
          "454: } {1.0 ''}",
          "455: do_execsql_test gencol1-17.20 {",
          "456:   SELECT *, (1 BETWEEN CAST(t0.c0 AS TEXT) AND t0.c0) FROM t0;",
          "457: } {1.0 {} 0}",
          "458: do_execsql_test gencol1-17.30 {",
          "459:   SELECT * FROM t0 WHERE (1 BETWEEN CAST(t0.c0 AS TEXT) AND t0.c0);",
          "460: } {}",
          "",
          "---------------"
        ]
      }
    }
  ]
}