{
  "cve_id": "CVE-2015-8744",
  "cve_desc": "QEMU (aka Quick Emulator) built with a VMWARE VMXNET3 paravirtual NIC emulator support is vulnerable to crash issue. It occurs when a guest sends a Layer-2 packet smaller than 22 bytes. A privileged (CAP_SYS_RAWIO) guest user could use this flaw to crash the QEMU process instance resulting in DoS.",
  "repo": "qemu/qemu",
  "patch_hash": "a7278b36fcab9af469563bd7b9dadebe2ae25e48",
  "patch_info": {
    "commit_hash": "a7278b36fcab9af469563bd7b9dadebe2ae25e48",
    "repo": "qemu/qemu",
    "commit_url": "https://github.com/qemu/qemu/commit/a7278b36fcab9af469563bd7b9dadebe2ae25e48",
    "files": [
      "hw/net/vmxnet3.c",
      "hw/net/vmxnet_tx_pkt.c"
    ],
    "message": "net/vmxnet3: Refine l2 header validation\n\nValidation of l2 header length assumed minimal packet size as\neth_header + 2 * vlan_header regardless of the actual protocol.\n\nThis caused crash for valid non-IP packets shorter than 22 bytes, as\n'tx_pkt->packet_type' hasn't been assigned for such packets, and\n'vmxnet3_on_tx_done_update_stats()' expects it to be properly set.\n\nRefine header length validation in 'vmxnet_tx_pkt_parse_headers'.\nCheck its return value during packet processing flow.\n\nAs a side effect, in case IPv4 and IPv6 header validation failure,\ncorrupt packets will be dropped.\n\nSigned-off-by: Dana Rubin <dana.rubin@ravellosystems.com>\nSigned-off-by: Shmulik Ladkani <shmulik.ladkani@ravellosystems.com>\nSigned-off-by: Jason Wang <jasowang@redhat.com>",
    "before_after_code_files": [
      "hw/net/vmxnet3.c||hw/net/vmxnet3.c",
      "hw/net/vmxnet_tx_pkt.c||hw/net/vmxnet_tx_pkt.c"
    ]
  },
  "patch_diff": {
    "hw/net/vmxnet3.c||hw/net/vmxnet3.c": [
      "File: hw/net/vmxnet3.c -> hw/net/vmxnet3.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "729:         }",
      "731:         if (txd.eop) {",
      "735:                 if (s->needs_vlan) {",
      "736:                     vmxnet_tx_pkt_setup_vlan_header(s->tx_pkt, s->tci);",
      "737:                 }",
      "",
      "[Removed Lines]",
      "732:             if (!s->skip_current_tx_pkt) {",
      "733:                 vmxnet_tx_pkt_parse(s->tx_pkt);",
      "",
      "[Added Lines]",
      "732:             if (!s->skip_current_tx_pkt && vmxnet_tx_pkt_parse(s->tx_pkt)) {",
      "",
      "---------------"
    ],
    "hw/net/vmxnet_tx_pkt.c||hw/net/vmxnet_tx_pkt.c": [
      "File: hw/net/vmxnet_tx_pkt.c -> hw/net/vmxnet_tx_pkt.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "143:     bytes_read = iov_to_buf(pkt->raw, pkt->raw_frags, 0, l2_hdr->iov_base,",
      "144:                             ETH_MAX_L2_HDR_LEN);",
      "146:         l2_hdr->iov_len = 0;",
      "147:         return false;",
      "150:     }",
      "152:     l3_proto = eth_get_l3_proto(l2_hdr->iov_base, l2_hdr->iov_len);",
      "",
      "[Removed Lines]",
      "145:     if (bytes_read < ETH_MAX_L2_HDR_LEN) {",
      "148:     } else {",
      "149:         l2_hdr->iov_len = eth_get_l2_hdr_length(l2_hdr->iov_base);",
      "",
      "[Added Lines]",
      "145:     if (bytes_read < sizeof(struct eth_header)) {",
      "146:         l2_hdr->iov_len = 0;",
      "147:         return false;",
      "148:     }",
      "150:     l2_hdr->iov_len = sizeof(struct eth_header);",
      "151:     switch (be16_to_cpu(PKT_GET_ETH_HDR(l2_hdr->iov_base)->h_proto)) {",
      "152:     case ETH_P_VLAN:",
      "153:         l2_hdr->iov_len += sizeof(struct vlan_header);",
      "154:         break;",
      "155:     case ETH_P_DVLAN:",
      "156:         l2_hdr->iov_len += 2 * sizeof(struct vlan_header);",
      "157:         break;",
      "158:     }",
      "160:     if (bytes_read < l2_hdr->iov_len) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "605d52e62fc94ec28408890fc682d4bdd7d8a36c",
      "candidate_info": {
        "commit_hash": "605d52e62fc94ec28408890fc682d4bdd7d8a36c",
        "repo": "qemu/qemu",
        "commit_url": "https://github.com/qemu/qemu/commit/605d52e62fc94ec28408890fc682d4bdd7d8a36c",
        "files": [
          "MAINTAINERS",
          "hw/net/Makefile.objs",
          "hw/net/net_rx_pkt.c",
          "hw/net/net_rx_pkt.h",
          "hw/net/net_tx_pkt.c",
          "hw/net/net_tx_pkt.h",
          "hw/net/vmxnet3.c",
          "hw/net/vmxnet_rx_pkt.c",
          "hw/net/vmxnet_rx_pkt.h",
          "hw/net/vmxnet_tx_pkt.c",
          "hw/net/vmxnet_tx_pkt.h",
          "tests/Makefile"
        ],
        "message": "net_pkt: Name vmxnet3 packet abstractions more generic\n\nThis patch drops \"vmx\" prefix from packet abstractions names\nto emphasize the fact they are generic and not tied to any\nspecific network device.\n\nThese abstractions will be reused by e1000e emulation implementation\nintroduced by following patches so their names need generalization.\n\nThis patch (except renamed files, adjusted comments and changes in MAINTAINTERS)\nwas produced by:\n\ngit grep -lz 'vmxnet_tx_pkt' | xargs -0 perl -i'' -pE \"s/vmxnet_tx_pkt/net_tx_pkt/g\"\ngit grep -lz 'vmxnet_rx_pkt' | xargs -0 perl -i'' -pE \"s/vmxnet_rx_pkt/net_rx_pkt/g\"\ngit grep -lz 'VmxnetTxPkt' | xargs -0 perl -i'' -pE \"s/VmxnetTxPkt/NetTxPkt/g\"\ngit grep -lz 'VMXNET_TX_PKT' | xargs -0 perl -i'' -pE \"s/VMXNET_TX_PKT/NET_TX_PKT/g\"\ngit grep -lz 'VmxnetRxPkt' | xargs -0 perl -i'' -pE \"s/VmxnetRxPkt/NetRxPkt/g\"\ngit grep -lz 'VMXNET_RX_PKT' | xargs -0 perl -i'' -pE \"s/VMXNET_RX_PKT/NET_RX_PKT/g\"\nsed -ie 's/VMXNET_/NET_/g' hw/net/vmxnet_rx_pkt.c\nsed -ie 's/VMXNET_/NET_/g' hw/net/vmxnet_tx_pkt.c\n\nSigned-off-by: Dmitry Fleytman <dmitry.fleytman@ravellosystems.com>\nSigned-off-by: Leonid Bloch <leonid.bloch@ravellosystems.com>\nReviewed-by: Michael S. Tsirkin <mst@redhat.com>\nSigned-off-by: Jason Wang <jasowang@redhat.com>",
        "before_after_code_files": [
          "hw/net/Makefile.objs||hw/net/Makefile.objs",
          "hw/net/vmxnet_rx_pkt.c||hw/net/net_rx_pkt.c",
          "hw/net/vmxnet_rx_pkt.h||hw/net/net_rx_pkt.h",
          "hw/net/vmxnet_tx_pkt.c||hw/net/net_tx_pkt.c",
          "hw/net/vmxnet_tx_pkt.h||hw/net/net_tx_pkt.h",
          "hw/net/vmxnet3.c||hw/net/vmxnet3.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "hw/net/vmxnet3.c||hw/net/vmxnet3.c"
          ],
          "candidate": [
            "hw/net/vmxnet3.c||hw/net/vmxnet3.c"
          ]
        }
      },
      "candidate_diff": {
        "hw/net/Makefile.objs||hw/net/Makefile.objs": [
          "File: hw/net/Makefile.objs -> hw/net/Makefile.objs",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: common-obj-$(CONFIG_PCNET_COMMON) += pcnet.o",
          "9: common-obj-$(CONFIG_E1000_PCI) += e1000.o",
          "10: common-obj-$(CONFIG_RTL8139_PCI) += rtl8139.o",
          "12: common-obj-$(CONFIG_VMXNET3_PCI) += vmxnet3.o",
          "14: common-obj-$(CONFIG_SMC91C111) += smc91c111.o",
          "",
          "[Removed Lines]",
          "11: common-obj-$(CONFIG_VMXNET3_PCI) += vmxnet_tx_pkt.o vmxnet_rx_pkt.o",
          "",
          "[Added Lines]",
          "11: common-obj-$(CONFIG_VMXNET3_PCI) += net_tx_pkt.o net_rx_pkt.o",
          "",
          "---------------"
        ],
        "hw/net/vmxnet_rx_pkt.c||hw/net/net_rx_pkt.c": [
          "File: hw/net/vmxnet_rx_pkt.c -> hw/net/net_rx_pkt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: #include \"qemu/osdep.h\"",
          "20: #include \"net/eth.h\"",
          "21: #include \"qemu-common.h\"",
          "22: #include \"qemu/iov.h\"",
          "",
          "[Removed Lines]",
          "19: #include \"vmxnet_rx_pkt.h\"",
          "",
          "[Added Lines]",
          "19: #include \"net_rx_pkt.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "34:     struct virtio_net_hdr virt_hdr;",
          "35:     uint8_t ehdr_buf[ETH_MAX_L2_HDR_LEN];",
          "37:     uint16_t vec_len;",
          "38:     uint32_t tot_len;",
          "39:     uint16_t tci;",
          "",
          "[Removed Lines]",
          "31: #define VMXNET_MAX_RX_PACKET_FRAGMENTS (2)",
          "33: struct VmxnetRxPkt {",
          "36:     struct iovec vec[VMXNET_MAX_RX_PACKET_FRAGMENTS];",
          "",
          "[Added Lines]",
          "31: #define NET_MAX_RX_PACKET_FRAGMENTS (2)",
          "33: struct NetRxPkt {",
          "36:     struct iovec vec[NET_MAX_RX_PACKET_FRAGMENTS];",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "48:     bool istcp;",
          "49: };",
          "52: {",
          "54:     p->has_virt_hdr = has_virt_hdr;",
          "56: }",
          "59: {",
          "60:     g_free(pkt);",
          "61: }",
          "64: {",
          "65:     assert(pkt);",
          "66:     return &pkt->virt_hdr;",
          "67: }",
          "70:                                size_t len, bool strip_vlan)",
          "71: {",
          "72:     uint16_t tci = 0;",
          "",
          "[Removed Lines]",
          "51: void vmxnet_rx_pkt_init(struct VmxnetRxPkt **pkt, bool has_virt_hdr)",
          "53:     struct VmxnetRxPkt *p = g_malloc0(sizeof *p);",
          "58: void vmxnet_rx_pkt_uninit(struct VmxnetRxPkt *pkt)",
          "63: struct virtio_net_hdr *vmxnet_rx_pkt_get_vhdr(struct VmxnetRxPkt *pkt)",
          "69: void vmxnet_rx_pkt_attach_data(struct VmxnetRxPkt *pkt, const void *data,",
          "",
          "[Added Lines]",
          "51: void net_rx_pkt_init(struct NetRxPkt **pkt, bool has_virt_hdr)",
          "53:     struct NetRxPkt *p = g_malloc0(sizeof *p);",
          "58: void net_rx_pkt_uninit(struct NetRxPkt *pkt)",
          "63: struct virtio_net_hdr *net_rx_pkt_get_vhdr(struct NetRxPkt *pkt)",
          "69: void net_rx_pkt_attach_data(struct NetRxPkt *pkt, const void *data,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "95:     pkt->tci = tci;",
          "96: }",
          "99: {",
          "102:     assert(pkt);",
          "104:     printf(\"RX PKT: tot_len: %d, vlan_stripped: %d, vlan_tag: %d\\n\",",
          "",
          "[Removed Lines]",
          "98: void vmxnet_rx_pkt_dump(struct VmxnetRxPkt *pkt)",
          "100: #ifdef VMXNET_RX_PKT_DEBUG",
          "101:     VmxnetRxPkt *pkt = (VmxnetRxPkt *)pkt;",
          "",
          "[Added Lines]",
          "98: void net_rx_pkt_dump(struct NetRxPkt *pkt)",
          "100: #ifdef NET_RX_PKT_DEBUG",
          "101:     NetRxPkt *pkt = (NetRxPkt *)pkt;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "106: #endif",
          "107: }",
          "110:     eth_pkt_types_e packet_type)",
          "111: {",
          "112:     assert(pkt);",
          "",
          "[Removed Lines]",
          "109: void vmxnet_rx_pkt_set_packet_type(struct VmxnetRxPkt *pkt,",
          "",
          "[Added Lines]",
          "109: void net_rx_pkt_set_packet_type(struct NetRxPkt *pkt,",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "116: }",
          "119: {",
          "120:     assert(pkt);",
          "122:     return pkt->packet_type;",
          "123: }",
          "126: {",
          "127:     assert(pkt);",
          "129:     return pkt->tot_len;",
          "130: }",
          "134: {",
          "135:     assert(pkt);",
          "",
          "[Removed Lines]",
          "118: eth_pkt_types_e vmxnet_rx_pkt_get_packet_type(struct VmxnetRxPkt *pkt)",
          "125: size_t vmxnet_rx_pkt_get_total_len(struct VmxnetRxPkt *pkt)",
          "132: void vmxnet_rx_pkt_set_protocols(struct VmxnetRxPkt *pkt, const void *data,",
          "133:                                  size_t len)",
          "",
          "[Added Lines]",
          "118: eth_pkt_types_e net_rx_pkt_get_packet_type(struct NetRxPkt *pkt)",
          "125: size_t net_rx_pkt_get_total_len(struct NetRxPkt *pkt)",
          "132: void net_rx_pkt_set_protocols(struct NetRxPkt *pkt, const void *data,",
          "133:                               size_t len)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "138:         &pkt->isudp, &pkt->istcp);",
          "139: }",
          "144: {",
          "145:     assert(pkt);",
          "",
          "[Removed Lines]",
          "141: void vmxnet_rx_pkt_get_protocols(struct VmxnetRxPkt *pkt,",
          "142:                                  bool *isip4, bool *isip6,",
          "143:                                  bool *isudp, bool *istcp)",
          "",
          "[Added Lines]",
          "141: void net_rx_pkt_get_protocols(struct NetRxPkt *pkt,",
          "142:                               bool *isip4, bool *isip6,",
          "143:                               bool *isudp, bool *istcp)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "151: }",
          "154: {",
          "155:     assert(pkt);",
          "157:     return pkt->vec;",
          "158: }",
          "161:                             struct virtio_net_hdr *vhdr)",
          "162: {",
          "163:     assert(pkt);",
          "",
          "[Removed Lines]",
          "153: struct iovec *vmxnet_rx_pkt_get_iovec(struct VmxnetRxPkt *pkt)",
          "160: void vmxnet_rx_pkt_set_vhdr(struct VmxnetRxPkt *pkt,",
          "",
          "[Added Lines]",
          "153: struct iovec *net_rx_pkt_get_iovec(struct NetRxPkt *pkt)",
          "160: void net_rx_pkt_set_vhdr(struct NetRxPkt *pkt,",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "165:     memcpy(&pkt->virt_hdr, vhdr, sizeof pkt->virt_hdr);",
          "166: }",
          "169: {",
          "170:     assert(pkt);",
          "172:     return pkt->vlan_stripped;",
          "173: }",
          "176: {",
          "177:     assert(pkt);",
          "179:     return pkt->has_virt_hdr;",
          "180: }",
          "183: {",
          "184:     assert(pkt);",
          "",
          "[Removed Lines]",
          "168: bool vmxnet_rx_pkt_is_vlan_stripped(struct VmxnetRxPkt *pkt)",
          "175: bool vmxnet_rx_pkt_has_virt_hdr(struct VmxnetRxPkt *pkt)",
          "182: uint16_t vmxnet_rx_pkt_get_vlan_tag(struct VmxnetRxPkt *pkt)",
          "",
          "[Added Lines]",
          "168: bool net_rx_pkt_is_vlan_stripped(struct NetRxPkt *pkt)",
          "175: bool net_rx_pkt_has_virt_hdr(struct NetRxPkt *pkt)",
          "182: uint16_t net_rx_pkt_get_vlan_tag(struct NetRxPkt *pkt)",
          "",
          "---------------"
        ],
        "hw/net/vmxnet_rx_pkt.h||hw/net/net_rx_pkt.h": [
          "File: hw/net/vmxnet_rx_pkt.h -> hw/net/net_rx_pkt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: #include \"net/eth.h\"",
          "",
          "[Removed Lines]",
          "18: #ifndef VMXNET_RX_PKT_H",
          "19: #define VMXNET_RX_PKT_H",
          "26: struct VmxnetRxPkt;",
          "",
          "[Added Lines]",
          "18: #ifndef NET_RX_PKT_H",
          "19: #define NET_RX_PKT_H",
          "26: struct NetRxPkt;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "34: void vmxnet_rx_pkt_uninit(struct VmxnetRxPkt *pkt);",
          "",
          "[Added Lines]",
          "34: void net_rx_pkt_uninit(struct NetRxPkt *pkt);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "43: void vmxnet_rx_pkt_init(struct VmxnetRxPkt **pkt, bool has_virt_hdr);",
          "",
          "[Added Lines]",
          "43: void net_rx_pkt_init(struct NetRxPkt **pkt, bool has_virt_hdr);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "53: size_t vmxnet_rx_pkt_get_total_len(struct VmxnetRxPkt *pkt);",
          "",
          "[Added Lines]",
          "53: size_t net_rx_pkt_get_total_len(struct NetRxPkt *pkt);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "63: void vmxnet_rx_pkt_set_protocols(struct VmxnetRxPkt *pkt, const void *data,",
          "64:                                  size_t len);",
          "",
          "[Added Lines]",
          "63: void net_rx_pkt_set_protocols(struct NetRxPkt *pkt, const void *data,",
          "64:                               size_t len);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "77:                                  bool *isip4, bool *isip6,",
          "78:                                  bool *isudp, bool *istcp);",
          "",
          "[Removed Lines]",
          "76: void vmxnet_rx_pkt_get_protocols(struct VmxnetRxPkt *pkt,",
          "",
          "[Added Lines]",
          "76: void net_rx_pkt_get_protocols(struct NetRxPkt *pkt,",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "87: struct virtio_net_hdr *vmxnet_rx_pkt_get_vhdr(struct VmxnetRxPkt *pkt);",
          "",
          "[Added Lines]",
          "87: struct virtio_net_hdr *net_rx_pkt_get_vhdr(struct NetRxPkt *pkt);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "96: eth_pkt_types_e vmxnet_rx_pkt_get_packet_type(struct VmxnetRxPkt *pkt);",
          "",
          "[Added Lines]",
          "96: eth_pkt_types_e net_rx_pkt_get_packet_type(struct NetRxPkt *pkt);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "105: uint16_t vmxnet_rx_pkt_get_vlan_tag(struct VmxnetRxPkt *pkt);",
          "",
          "[Added Lines]",
          "105: uint16_t net_rx_pkt_get_vlan_tag(struct NetRxPkt *pkt);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "114: bool vmxnet_rx_pkt_is_vlan_stripped(struct VmxnetRxPkt *pkt);",
          "",
          "[Added Lines]",
          "114: bool net_rx_pkt_is_vlan_stripped(struct NetRxPkt *pkt);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "123: bool vmxnet_rx_pkt_has_virt_hdr(struct VmxnetRxPkt *pkt);",
          "",
          "[Added Lines]",
          "123: bool net_rx_pkt_has_virt_hdr(struct NetRxPkt *pkt);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "135:     size_t len, bool strip_vlan);",
          "",
          "[Removed Lines]",
          "134: void vmxnet_rx_pkt_attach_data(struct VmxnetRxPkt *pkt, const void *data,",
          "",
          "[Added Lines]",
          "134: void net_rx_pkt_attach_data(struct NetRxPkt *pkt, const void *data,",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "144: struct iovec *vmxnet_rx_pkt_get_iovec(struct VmxnetRxPkt *pkt);",
          "",
          "[Added Lines]",
          "144: struct iovec *net_rx_pkt_get_iovec(struct NetRxPkt *pkt);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "152: void vmxnet_rx_pkt_dump(struct VmxnetRxPkt *pkt);",
          "",
          "[Added Lines]",
          "152: void net_rx_pkt_dump(struct NetRxPkt *pkt);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "162:     struct virtio_net_hdr *vhdr);",
          "",
          "[Removed Lines]",
          "161: void vmxnet_rx_pkt_set_vhdr(struct VmxnetRxPkt *pkt,",
          "",
          "[Added Lines]",
          "161: void net_rx_pkt_set_vhdr(struct NetRxPkt *pkt,",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "172:     eth_pkt_types_e packet_type);",
          "174: #endif",
          "",
          "[Removed Lines]",
          "171: void vmxnet_rx_pkt_set_packet_type(struct VmxnetRxPkt *pkt,",
          "",
          "[Added Lines]",
          "171: void net_rx_pkt_set_packet_type(struct NetRxPkt *pkt,",
          "",
          "---------------"
        ],
        "hw/net/vmxnet_tx_pkt.c||hw/net/net_tx_pkt.c": [
          "File: hw/net/vmxnet_tx_pkt.c -> hw/net/net_tx_pkt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: #include \"qemu/osdep.h\"",
          "19: #include \"hw/hw.h\"",
          "21: #include \"net/eth.h\"",
          "22: #include \"qemu-common.h\"",
          "23: #include \"qemu/iov.h\"",
          "",
          "[Removed Lines]",
          "20: #include \"vmxnet_tx_pkt.h\"",
          "",
          "[Added Lines]",
          "20: #include \"net_tx_pkt.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "26: #include \"net/net.h\"",
          "28: enum {",
          "33: };",
          "37:     struct virtio_net_hdr virt_hdr;",
          "38:     bool has_virt_hdr;",
          "",
          "[Removed Lines]",
          "29:     VMXNET_TX_PKT_VHDR_FRAG = 0,",
          "30:     VMXNET_TX_PKT_L2HDR_FRAG,",
          "31:     VMXNET_TX_PKT_L3HDR_FRAG,",
          "32:     VMXNET_TX_PKT_PL_START_FRAG",
          "36: struct VmxnetTxPkt {",
          "",
          "[Added Lines]",
          "29:     NET_TX_PKT_VHDR_FRAG = 0,",
          "30:     NET_TX_PKT_L2HDR_FRAG,",
          "31:     NET_TX_PKT_L3HDR_FRAG,",
          "32:     NET_TX_PKT_PL_START_FRAG",
          "36: struct NetTxPkt {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "55:     uint8_t l4proto;",
          "56: };",
          "59:     bool has_virt_hdr)",
          "60: {",
          "63:     p->vec = g_malloc((sizeof *p->vec) *",
          "66:     p->raw = g_malloc((sizeof *p->raw) * max_frags);",
          "68:     p->max_payload_frags = max_frags;",
          "69:     p->max_raw_frags = max_frags;",
          "70:     p->has_virt_hdr = has_virt_hdr;",
          "73:         p->has_virt_hdr ? sizeof p->virt_hdr : 0;",
          "79: }",
          "82: {",
          "83:     if (pkt) {",
          "84:         g_free(pkt->vec);",
          "",
          "[Removed Lines]",
          "58: void vmxnet_tx_pkt_init(struct VmxnetTxPkt **pkt, uint32_t max_frags,",
          "61:     struct VmxnetTxPkt *p = g_malloc0(sizeof *p);",
          "64:         (max_frags + VMXNET_TX_PKT_PL_START_FRAG));",
          "71:     p->vec[VMXNET_TX_PKT_VHDR_FRAG].iov_base = &p->virt_hdr;",
          "72:     p->vec[VMXNET_TX_PKT_VHDR_FRAG].iov_len =",
          "74:     p->vec[VMXNET_TX_PKT_L2HDR_FRAG].iov_base = &p->l2_hdr;",
          "75:     p->vec[VMXNET_TX_PKT_L3HDR_FRAG].iov_base = NULL;",
          "76:     p->vec[VMXNET_TX_PKT_L3HDR_FRAG].iov_len = 0;",
          "81: void vmxnet_tx_pkt_uninit(struct VmxnetTxPkt *pkt)",
          "",
          "[Added Lines]",
          "58: void net_tx_pkt_init(struct NetTxPkt **pkt, uint32_t max_frags,",
          "61:     struct NetTxPkt *p = g_malloc0(sizeof *p);",
          "64:         (max_frags + NET_TX_PKT_PL_START_FRAG));",
          "71:     p->vec[NET_TX_PKT_VHDR_FRAG].iov_base = &p->virt_hdr;",
          "72:     p->vec[NET_TX_PKT_VHDR_FRAG].iov_len =",
          "74:     p->vec[NET_TX_PKT_L2HDR_FRAG].iov_base = &p->l2_hdr;",
          "75:     p->vec[NET_TX_PKT_L3HDR_FRAG].iov_base = NULL;",
          "76:     p->vec[NET_TX_PKT_L3HDR_FRAG].iov_len = 0;",
          "81: void net_tx_pkt_uninit(struct NetTxPkt *pkt)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "87:     }",
          "88: }",
          "91: {",
          "92:     uint16_t csum;",
          "93:     uint32_t ph_raw_csum;",
          "",
          "[Removed Lines]",
          "90: void vmxnet_tx_pkt_update_ip_checksums(struct VmxnetTxPkt *pkt)",
          "",
          "[Added Lines]",
          "90: void net_tx_pkt_update_ip_checksums(struct NetTxPkt *pkt)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "100:         return;",
          "101:     }",
          "106:         ETH_MAX_IP_DGRAM_LEN) {",
          "107:         return;",
          "108:     }",
          "110:     ip_hdr->ip_len = cpu_to_be16(pkt->payload_len +",
          "114:     ip_hdr->ip_sum = 0;",
          "115:     csum = net_raw_checksum((uint8_t *)ip_hdr,",
          "117:     ip_hdr->ip_sum = cpu_to_be16(csum);",
          "120:     ph_raw_csum = eth_calc_pseudo_hdr_csum(ip_hdr, pkt->payload_len);",
          "121:     csum = cpu_to_be16(~net_checksum_finish(ph_raw_csum));",
          "123:                  pkt->virt_hdr.csum_offset, &csum, sizeof(csum));",
          "124: }",
          "127: {",
          "130: }",
          "133: {",
          "134:     struct iovec *l2_hdr, *l3_hdr;",
          "135:     size_t bytes_read;",
          "",
          "[Removed Lines]",
          "103:     ip_hdr = pkt->vec[VMXNET_TX_PKT_L3HDR_FRAG].iov_base;",
          "105:     if (pkt->payload_len + pkt->vec[VMXNET_TX_PKT_L3HDR_FRAG].iov_len >",
          "111:         pkt->vec[VMXNET_TX_PKT_L3HDR_FRAG].iov_len);",
          "116:         pkt->vec[VMXNET_TX_PKT_L3HDR_FRAG].iov_len);",
          "122:     iov_from_buf(&pkt->vec[VMXNET_TX_PKT_PL_START_FRAG], pkt->payload_frags,",
          "126: static void vmxnet_tx_pkt_calculate_hdr_len(struct VmxnetTxPkt *pkt)",
          "128:     pkt->hdr_len = pkt->vec[VMXNET_TX_PKT_L2HDR_FRAG].iov_len +",
          "129:         pkt->vec[VMXNET_TX_PKT_L3HDR_FRAG].iov_len;",
          "132: static bool vmxnet_tx_pkt_parse_headers(struct VmxnetTxPkt *pkt)",
          "",
          "[Added Lines]",
          "103:     ip_hdr = pkt->vec[NET_TX_PKT_L3HDR_FRAG].iov_base;",
          "105:     if (pkt->payload_len + pkt->vec[NET_TX_PKT_L3HDR_FRAG].iov_len >",
          "111:         pkt->vec[NET_TX_PKT_L3HDR_FRAG].iov_len);",
          "116:         pkt->vec[NET_TX_PKT_L3HDR_FRAG].iov_len);",
          "122:     iov_from_buf(&pkt->vec[NET_TX_PKT_PL_START_FRAG], pkt->payload_frags,",
          "126: static void net_tx_pkt_calculate_hdr_len(struct NetTxPkt *pkt)",
          "128:     pkt->hdr_len = pkt->vec[NET_TX_PKT_L2HDR_FRAG].iov_len +",
          "129:         pkt->vec[NET_TX_PKT_L3HDR_FRAG].iov_len;",
          "132: static bool net_tx_pkt_parse_headers(struct NetTxPkt *pkt)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "139:     assert(pkt);",
          "144:     bytes_read = iov_to_buf(pkt->raw, pkt->raw_frags, 0, l2_hdr->iov_base,",
          "145:                             ETH_MAX_L2_HDR_LEN);",
          "",
          "[Removed Lines]",
          "141:     l2_hdr = &pkt->vec[VMXNET_TX_PKT_L2HDR_FRAG];",
          "142:     l3_hdr = &pkt->vec[VMXNET_TX_PKT_L3HDR_FRAG];",
          "",
          "[Added Lines]",
          "141:     l2_hdr = &pkt->vec[NET_TX_PKT_L2HDR_FRAG];",
          "142:     l3_hdr = &pkt->vec[NET_TX_PKT_L3HDR_FRAG];",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "216:         break;",
          "217:     }",
          "220:     pkt->packet_type = get_eth_packet_type(l2_hdr->iov_base);",
          "221:     return true;",
          "222: }",
          "225: {",
          "226:     size_t payload_len = iov_size(pkt->raw, pkt->raw_frags) - pkt->hdr_len;",
          "229:                                 pkt->max_payload_frags,",
          "230:                                 pkt->raw, pkt->raw_frags,",
          "231:                                 pkt->hdr_len, payload_len);",
          "",
          "[Removed Lines]",
          "219:     vmxnet_tx_pkt_calculate_hdr_len(pkt);",
          "224: static bool vmxnet_tx_pkt_rebuild_payload(struct VmxnetTxPkt *pkt)",
          "228:     pkt->payload_frags = iov_copy(&pkt->vec[VMXNET_TX_PKT_PL_START_FRAG],",
          "",
          "[Added Lines]",
          "219:     net_tx_pkt_calculate_hdr_len(pkt);",
          "224: static bool net_tx_pkt_rebuild_payload(struct NetTxPkt *pkt)",
          "228:     pkt->payload_frags = iov_copy(&pkt->vec[NET_TX_PKT_PL_START_FRAG],",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "238:     }",
          "239: }",
          "242: {",
          "245: }",
          "248: {",
          "249:     assert(pkt);",
          "250:     return &pkt->virt_hdr;",
          "251: }",
          "254:                                           bool tso_enable)",
          "255: {",
          "256:     uint8_t rc = VIRTIO_NET_HDR_GSO_NONE;",
          "257:     uint16_t l3_proto;",
          "262:     if (!tso_enable) {",
          "263:         goto func_exit;",
          "264:     }",
          "267:                           pkt->l4proto);",
          "269: func_exit:",
          "270:     return rc;",
          "271: }",
          "274:     bool csum_enable, uint32_t gso_size)",
          "275: {",
          "276:     struct tcp_hdr l4hdr;",
          "",
          "[Removed Lines]",
          "241: bool vmxnet_tx_pkt_parse(struct VmxnetTxPkt *pkt)",
          "243:     return vmxnet_tx_pkt_parse_headers(pkt) &&",
          "244:            vmxnet_tx_pkt_rebuild_payload(pkt);",
          "247: struct virtio_net_hdr *vmxnet_tx_pkt_get_vhdr(struct VmxnetTxPkt *pkt)",
          "253: static uint8_t vmxnet_tx_pkt_get_gso_type(struct VmxnetTxPkt *pkt,",
          "259:     l3_proto = eth_get_l3_proto(pkt->vec[VMXNET_TX_PKT_L2HDR_FRAG].iov_base,",
          "260:         pkt->vec[VMXNET_TX_PKT_L2HDR_FRAG].iov_len);",
          "266:     rc = eth_get_gso_type(l3_proto, pkt->vec[VMXNET_TX_PKT_L3HDR_FRAG].iov_base,",
          "273: void vmxnet_tx_pkt_build_vheader(struct VmxnetTxPkt *pkt, bool tso_enable,",
          "",
          "[Added Lines]",
          "241: bool net_tx_pkt_parse(struct NetTxPkt *pkt)",
          "243:     return net_tx_pkt_parse_headers(pkt) &&",
          "244:            net_tx_pkt_rebuild_payload(pkt);",
          "247: struct virtio_net_hdr *net_tx_pkt_get_vhdr(struct NetTxPkt *pkt)",
          "253: static uint8_t net_tx_pkt_get_gso_type(struct NetTxPkt *pkt,",
          "259:     l3_proto = eth_get_l3_proto(pkt->vec[NET_TX_PKT_L2HDR_FRAG].iov_base,",
          "260:         pkt->vec[NET_TX_PKT_L2HDR_FRAG].iov_len);",
          "266:     rc = eth_get_gso_type(l3_proto, pkt->vec[NET_TX_PKT_L3HDR_FRAG].iov_base,",
          "273: void net_tx_pkt_build_vheader(struct NetTxPkt *pkt, bool tso_enable,",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "280:     assert(csum_enable || !tso_enable);",
          "284:     switch (pkt->virt_hdr.gso_type & ~VIRTIO_NET_HDR_GSO_ECN) {",
          "285:     case VIRTIO_NET_HDR_GSO_NONE:",
          "",
          "[Removed Lines]",
          "282:     pkt->virt_hdr.gso_type = vmxnet_tx_pkt_get_gso_type(pkt, tso_enable);",
          "",
          "[Added Lines]",
          "282:     pkt->virt_hdr.gso_type = net_tx_pkt_get_gso_type(pkt, tso_enable);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "295:     case VIRTIO_NET_HDR_GSO_TCPV4:",
          "296:     case VIRTIO_NET_HDR_GSO_TCPV6:",
          "298:                    0, &l4hdr, sizeof(l4hdr));",
          "299:         pkt->virt_hdr.hdr_len = pkt->hdr_len + l4hdr.th_off * sizeof(uint32_t);",
          "300:         pkt->virt_hdr.gso_size = IP_FRAG_ALIGN_SIZE(gso_size);",
          "",
          "[Removed Lines]",
          "297:         iov_to_buf(&pkt->vec[VMXNET_TX_PKT_PL_START_FRAG], pkt->payload_frags,",
          "",
          "[Added Lines]",
          "297:         iov_to_buf(&pkt->vec[NET_TX_PKT_PL_START_FRAG], pkt->payload_frags,",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "322:     }",
          "323: }",
          "326: {",
          "327:     bool is_new;",
          "328:     assert(pkt);",
          "331:         vlan, &is_new);",
          "334:     if (is_new) {",
          "335:         pkt->hdr_len += sizeof(struct vlan_header);",
          "337:             sizeof(struct vlan_header);",
          "338:     }",
          "339: }",
          "342:     size_t len)",
          "343: {",
          "344:     hwaddr mapped_len = 0;",
          "",
          "[Removed Lines]",
          "325: void vmxnet_tx_pkt_setup_vlan_header(struct VmxnetTxPkt *pkt, uint16_t vlan)",
          "330:     eth_setup_vlan_headers(pkt->vec[VMXNET_TX_PKT_L2HDR_FRAG].iov_base,",
          "336:         pkt->vec[VMXNET_TX_PKT_L2HDR_FRAG].iov_len +=",
          "341: bool vmxnet_tx_pkt_add_raw_fragment(struct VmxnetTxPkt *pkt, hwaddr pa,",
          "",
          "[Added Lines]",
          "325: void net_tx_pkt_setup_vlan_header(struct NetTxPkt *pkt, uint16_t vlan)",
          "330:     eth_setup_vlan_headers(pkt->vec[NET_TX_PKT_L2HDR_FRAG].iov_base,",
          "336:         pkt->vec[NET_TX_PKT_L2HDR_FRAG].iov_len +=",
          "341: bool net_tx_pkt_add_raw_fragment(struct NetTxPkt *pkt, hwaddr pa,",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "364:     return true;",
          "365: }",
          "368: {",
          "369:     assert(pkt);",
          "371:     return pkt->packet_type;",
          "372: }",
          "375: {",
          "376:     assert(pkt);",
          "378:     return pkt->hdr_len + pkt->payload_len;",
          "379: }",
          "382: {",
          "384:     assert(pkt);",
          "386:     printf(\"TX PKT: hdr_len: %d, pkt_type: 0x%X, l2hdr_len: %lu, \"",
          "387:         \"l3hdr_len: %lu, payload_len: %u\\n\", pkt->hdr_len, pkt->packet_type,",
          "390: #endif",
          "391: }",
          "394: {",
          "395:     int i;",
          "",
          "[Removed Lines]",
          "367: eth_pkt_types_e vmxnet_tx_pkt_get_packet_type(struct VmxnetTxPkt *pkt)",
          "374: size_t vmxnet_tx_pkt_get_total_len(struct VmxnetTxPkt *pkt)",
          "381: void vmxnet_tx_pkt_dump(struct VmxnetTxPkt *pkt)",
          "383: #ifdef VMXNET_TX_PKT_DEBUG",
          "388:         pkt->vec[VMXNET_TX_PKT_L2HDR_FRAG].iov_len,",
          "389:         pkt->vec[VMXNET_TX_PKT_L3HDR_FRAG].iov_len, pkt->payload_len);",
          "393: void vmxnet_tx_pkt_reset(struct VmxnetTxPkt *pkt)",
          "",
          "[Added Lines]",
          "367: eth_pkt_types_e net_tx_pkt_get_packet_type(struct NetTxPkt *pkt)",
          "374: size_t net_tx_pkt_get_total_len(struct NetTxPkt *pkt)",
          "381: void net_tx_pkt_dump(struct NetTxPkt *pkt)",
          "383: #ifdef NET_TX_PKT_DEBUG",
          "388:         pkt->vec[NET_TX_PKT_L2HDR_FRAG].iov_len,",
          "389:         pkt->vec[NET_TX_PKT_L3HDR_FRAG].iov_len, pkt->payload_len);",
          "393: void net_tx_pkt_reset(struct NetTxPkt *pkt)",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "402:     memset(&pkt->virt_hdr, 0, sizeof(pkt->virt_hdr));",
          "407:     assert(pkt->vec);",
          "410:         pkt->vec[i].iov_len = 0;",
          "411:     }",
          "412:     pkt->payload_len = 0;",
          "",
          "[Removed Lines]",
          "404:     g_free(pkt->vec[VMXNET_TX_PKT_L3HDR_FRAG].iov_base);",
          "405:     pkt->vec[VMXNET_TX_PKT_L3HDR_FRAG].iov_base = NULL;",
          "408:     for (i = VMXNET_TX_PKT_L2HDR_FRAG;",
          "409:          i < pkt->payload_frags + VMXNET_TX_PKT_PL_START_FRAG; i++) {",
          "",
          "[Added Lines]",
          "404:     g_free(pkt->vec[NET_TX_PKT_L3HDR_FRAG].iov_base);",
          "405:     pkt->vec[NET_TX_PKT_L3HDR_FRAG].iov_base = NULL;",
          "408:     for (i = NET_TX_PKT_L2HDR_FRAG;",
          "409:          i < pkt->payload_frags + NET_TX_PKT_PL_START_FRAG; i++) {",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "426:     pkt->l4proto = 0;",
          "427: }",
          "430: {",
          "432:     uint32_t csum_cntr;",
          "433:     uint16_t csum = 0;",
          "436:     uint16_t csl;",
          "437:     struct ip_header *iphdr;",
          "438:     size_t csum_offset = pkt->virt_hdr.csum_start + pkt->virt_hdr.csum_offset;",
          "",
          "[Removed Lines]",
          "429: static void vmxnet_tx_pkt_do_sw_csum(struct VmxnetTxPkt *pkt)",
          "431:     struct iovec *iov = &pkt->vec[VMXNET_TX_PKT_L2HDR_FRAG];",
          "435:     uint32_t iov_len = pkt->payload_frags + VMXNET_TX_PKT_PL_START_FRAG - 1;",
          "",
          "[Added Lines]",
          "429: static void net_tx_pkt_do_sw_csum(struct NetTxPkt *pkt)",
          "431:     struct iovec *iov = &pkt->vec[NET_TX_PKT_L2HDR_FRAG];",
          "435:     uint32_t iov_len = pkt->payload_frags + NET_TX_PKT_PL_START_FRAG - 1;",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "447:     csum_cntr =",
          "448:         net_checksum_add_iov(iov, iov_len, pkt->virt_hdr.csum_start, csl);",
          "451:     csum_cntr += eth_calc_pseudo_hdr_csum(iphdr, csl);",
          "",
          "[Removed Lines]",
          "450:     iphdr = pkt->vec[VMXNET_TX_PKT_L3HDR_FRAG].iov_base;",
          "",
          "[Added Lines]",
          "450:     iphdr = pkt->vec[NET_TX_PKT_L3HDR_FRAG].iov_base;",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "456: }",
          "458: enum {",
          "462: };",
          "467:     int *src_idx, size_t *src_offset, struct iovec *dst, int *dst_idx)",
          "468: {",
          "469:     size_t fetched = 0;",
          "470:     struct iovec *src = pkt->vec;",
          "474:     while (fetched < pkt->virt_hdr.gso_size) {",
          "478:             break;",
          "479:         }",
          "483:             break;",
          "484:         }",
          "",
          "[Removed Lines]",
          "459:     VMXNET_TX_PKT_FRAGMENT_L2_HDR_POS = 0,",
          "460:     VMXNET_TX_PKT_FRAGMENT_L3_HDR_POS,",
          "461:     VMXNET_TX_PKT_FRAGMENT_HEADER_NUM",
          "464: #define VMXNET_MAX_FRAG_SG_LIST (64)",
          "466: static size_t vmxnet_tx_pkt_fetch_fragment(struct VmxnetTxPkt *pkt,",
          "477:         if (*dst_idx == VMXNET_MAX_FRAG_SG_LIST) {",
          "482:         if (*src_idx == (pkt->payload_frags + VMXNET_TX_PKT_PL_START_FRAG)) {",
          "",
          "[Added Lines]",
          "459:     NET_TX_PKT_FRAGMENT_L2_HDR_POS = 0,",
          "460:     NET_TX_PKT_FRAGMENT_L3_HDR_POS,",
          "461:     NET_TX_PKT_FRAGMENT_HEADER_NUM",
          "464: #define NET_MAX_FRAG_SG_LIST (64)",
          "466: static size_t net_tx_pkt_fetch_fragment(struct NetTxPkt *pkt,",
          "477:         if (*dst_idx == NET_MAX_FRAG_SG_LIST) {",
          "482:         if (*src_idx == (pkt->payload_frags + NET_TX_PKT_PL_START_FRAG)) {",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "502:     return fetched;",
          "503: }",
          "506:     NetClientState *nc)",
          "507: {",
          "509:     size_t fragment_len = 0;",
          "510:     bool more_frags = false;",
          "513:     void *l2_iov_base, *l3_iov_base;",
          "514:     size_t l2_iov_len, l3_iov_len;",
          "516:     size_t src_offset = 0;",
          "517:     size_t fragment_offset = 0;",
          "532:     do {",
          "534:             fragment, &dst_idx);",
          "536:         more_frags = (fragment_offset + fragment_len < pkt->payload_len);",
          "",
          "[Removed Lines]",
          "505: static bool vmxnet_tx_pkt_do_sw_fragmentation(struct VmxnetTxPkt *pkt,",
          "508:     struct iovec fragment[VMXNET_MAX_FRAG_SG_LIST];",
          "515:     int src_idx =  VMXNET_TX_PKT_PL_START_FRAG, dst_idx;",
          "519:     l2_iov_base = pkt->vec[VMXNET_TX_PKT_L2HDR_FRAG].iov_base;",
          "520:     l2_iov_len = pkt->vec[VMXNET_TX_PKT_L2HDR_FRAG].iov_len;",
          "521:     l3_iov_base = pkt->vec[VMXNET_TX_PKT_L3HDR_FRAG].iov_base;",
          "522:     l3_iov_len = pkt->vec[VMXNET_TX_PKT_L3HDR_FRAG].iov_len;",
          "525:     fragment[VMXNET_TX_PKT_FRAGMENT_L2_HDR_POS].iov_base = l2_iov_base;",
          "526:     fragment[VMXNET_TX_PKT_FRAGMENT_L2_HDR_POS].iov_len = l2_iov_len;",
          "527:     fragment[VMXNET_TX_PKT_FRAGMENT_L3_HDR_POS].iov_base = l3_iov_base;",
          "528:     fragment[VMXNET_TX_PKT_FRAGMENT_L3_HDR_POS].iov_len = l3_iov_len;",
          "533:         fragment_len = vmxnet_tx_pkt_fetch_fragment(pkt, &src_idx, &src_offset,",
          "",
          "[Added Lines]",
          "505: static bool net_tx_pkt_do_sw_fragmentation(struct NetTxPkt *pkt,",
          "508:     struct iovec fragment[NET_MAX_FRAG_SG_LIST];",
          "515:     int src_idx =  NET_TX_PKT_PL_START_FRAG, dst_idx;",
          "519:     l2_iov_base = pkt->vec[NET_TX_PKT_L2HDR_FRAG].iov_base;",
          "520:     l2_iov_len = pkt->vec[NET_TX_PKT_L2HDR_FRAG].iov_len;",
          "521:     l3_iov_base = pkt->vec[NET_TX_PKT_L3HDR_FRAG].iov_base;",
          "522:     l3_iov_len = pkt->vec[NET_TX_PKT_L3HDR_FRAG].iov_len;",
          "525:     fragment[NET_TX_PKT_FRAGMENT_L2_HDR_POS].iov_base = l2_iov_base;",
          "526:     fragment[NET_TX_PKT_FRAGMENT_L2_HDR_POS].iov_len = l2_iov_len;",
          "527:     fragment[NET_TX_PKT_FRAGMENT_L3_HDR_POS].iov_base = l3_iov_base;",
          "528:     fragment[NET_TX_PKT_FRAGMENT_L3_HDR_POS].iov_len = l3_iov_len;",
          "533:         fragment_len = net_tx_pkt_fetch_fragment(pkt, &src_idx, &src_offset,",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "549:     return true;",
          "550: }",
          "553: {",
          "554:     assert(pkt);",
          "556:     if (!pkt->has_virt_hdr &&",
          "557:         pkt->virt_hdr.flags & VIRTIO_NET_HDR_F_NEEDS_CSUM) {",
          "559:     }",
          "",
          "[Removed Lines]",
          "552: bool vmxnet_tx_pkt_send(struct VmxnetTxPkt *pkt, NetClientState *nc)",
          "558:         vmxnet_tx_pkt_do_sw_csum(pkt);",
          "",
          "[Added Lines]",
          "552: bool net_tx_pkt_send(struct NetTxPkt *pkt, NetClientState *nc)",
          "558:         net_tx_pkt_do_sw_csum(pkt);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "565:     if (VIRTIO_NET_HDR_GSO_NONE != pkt->virt_hdr.gso_type) {",
          "566:         if (pkt->payload_len >",
          "567:             ETH_MAX_IP_DGRAM_LEN -",
          "569:             return false;",
          "570:         }",
          "571:     }",
          "",
          "[Removed Lines]",
          "568:             pkt->vec[VMXNET_TX_PKT_L3HDR_FRAG].iov_len) {",
          "",
          "[Added Lines]",
          "568:             pkt->vec[NET_TX_PKT_L3HDR_FRAG].iov_len) {",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "573:     if (pkt->has_virt_hdr ||",
          "574:         pkt->virt_hdr.gso_type == VIRTIO_NET_HDR_GSO_NONE) {",
          "575:         qemu_sendv_packet(nc, pkt->vec,",
          "577:         return true;",
          "578:     }",
          "581: }",
          "",
          "[Removed Lines]",
          "576:             pkt->payload_frags + VMXNET_TX_PKT_PL_START_FRAG);",
          "580:     return vmxnet_tx_pkt_do_sw_fragmentation(pkt, nc);",
          "",
          "[Added Lines]",
          "576:             pkt->payload_frags + NET_TX_PKT_PL_START_FRAG);",
          "580:     return net_tx_pkt_do_sw_fragmentation(pkt, nc);",
          "",
          "---------------"
        ],
        "hw/net/vmxnet_tx_pkt.h||hw/net/net_tx_pkt.h": [
          "File: hw/net/vmxnet_tx_pkt.h -> hw/net/net_tx_pkt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: #include \"net/eth.h\"",
          "22: #include \"exec/hwaddr.h\"",
          "",
          "[Removed Lines]",
          "18: #ifndef VMXNET_TX_PKT_H",
          "19: #define VMXNET_TX_PKT_H",
          "27: struct VmxnetTxPkt;",
          "",
          "[Added Lines]",
          "18: #ifndef NET_TX_PKT_H",
          "19: #define NET_TX_PKT_H",
          "27: struct NetTxPkt;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "37:     bool has_virt_hdr);",
          "",
          "[Removed Lines]",
          "36: void vmxnet_tx_pkt_init(struct VmxnetTxPkt **pkt, uint32_t max_frags,",
          "",
          "[Added Lines]",
          "36: void net_tx_pkt_init(struct NetTxPkt **pkt, uint32_t max_frags,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "44: void vmxnet_tx_pkt_uninit(struct VmxnetTxPkt *pkt);",
          "",
          "[Added Lines]",
          "44: void net_tx_pkt_uninit(struct NetTxPkt *pkt);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "52: struct virtio_net_hdr *vmxnet_tx_pkt_get_vhdr(struct VmxnetTxPkt *pkt);",
          "",
          "[Added Lines]",
          "52: struct virtio_net_hdr *net_tx_pkt_get_vhdr(struct NetTxPkt *pkt);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "64:     bool csum_enable, uint32_t gso_size);",
          "",
          "[Removed Lines]",
          "63: void vmxnet_tx_pkt_build_vheader(struct VmxnetTxPkt *pkt, bool tso_enable,",
          "",
          "[Added Lines]",
          "63: void net_tx_pkt_build_vheader(struct NetTxPkt *pkt, bool tso_enable,",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "73: void vmxnet_tx_pkt_setup_vlan_header(struct VmxnetTxPkt *pkt, uint16_t vlan);",
          "",
          "[Added Lines]",
          "73: void net_tx_pkt_setup_vlan_header(struct NetTxPkt *pkt, uint16_t vlan);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "84:     size_t len);",
          "",
          "[Removed Lines]",
          "83: bool vmxnet_tx_pkt_add_raw_fragment(struct VmxnetTxPkt *pkt, hwaddr pa,",
          "",
          "[Added Lines]",
          "83: bool net_tx_pkt_add_raw_fragment(struct NetTxPkt *pkt, hwaddr pa,",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "92: void vmxnet_tx_pkt_update_ip_checksums(struct VmxnetTxPkt *pkt);",
          "",
          "[Added Lines]",
          "92: void net_tx_pkt_update_ip_checksums(struct NetTxPkt *pkt);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "101: size_t vmxnet_tx_pkt_get_total_len(struct VmxnetTxPkt *pkt);",
          "",
          "[Added Lines]",
          "101: size_t net_tx_pkt_get_total_len(struct NetTxPkt *pkt);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "110: eth_pkt_types_e vmxnet_tx_pkt_get_packet_type(struct VmxnetTxPkt *pkt);",
          "",
          "[Added Lines]",
          "110: eth_pkt_types_e net_tx_pkt_get_packet_type(struct NetTxPkt *pkt);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "118: void vmxnet_tx_pkt_dump(struct VmxnetTxPkt *pkt);",
          "",
          "[Added Lines]",
          "118: void net_tx_pkt_dump(struct NetTxPkt *pkt);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "126: void vmxnet_tx_pkt_reset(struct VmxnetTxPkt *pkt);",
          "",
          "[Added Lines]",
          "126: void net_tx_pkt_reset(struct NetTxPkt *pkt);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "136: bool vmxnet_tx_pkt_send(struct VmxnetTxPkt *pkt, NetClientState *nc);",
          "",
          "[Added Lines]",
          "136: bool net_tx_pkt_send(struct NetTxPkt *pkt, NetClientState *nc);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "146: #endif",
          "",
          "[Removed Lines]",
          "144: bool vmxnet_tx_pkt_parse(struct VmxnetTxPkt *pkt);",
          "",
          "[Added Lines]",
          "144: bool net_tx_pkt_parse(struct NetTxPkt *pkt);",
          "",
          "---------------"
        ],
        "hw/net/vmxnet3.c||hw/net/vmxnet3.c": [
          "File: hw/net/vmxnet3.c -> hw/net/vmxnet3.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: #include \"vmxnet3.h\"",
          "31: #include \"vmxnet_debug.h\"",
          "32: #include \"vmware_utils.h\"",
          "36: #define PCI_DEVICE_ID_VMWARE_VMXNET3_REVISION 0x1",
          "37: #define VMXNET3_MSIX_BAR_SIZE 0x2000",
          "",
          "[Removed Lines]",
          "33: #include \"vmxnet_tx_pkt.h\"",
          "34: #include \"vmxnet_rx_pkt.h\"",
          "",
          "[Added Lines]",
          "33: #include \"net_tx_pkt.h\"",
          "34: #include \"net_rx_pkt.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "314:         bool peer_has_vhdr;",
          "318:         uint32_t offload_mode;",
          "319:         uint32_t cso_or_gso_size;",
          "320:         uint16_t tci;",
          "321:         bool needs_vlan;",
          "325:         bool tx_sop;",
          "326:         bool skip_current_tx_pkt;",
          "",
          "[Removed Lines]",
          "317:         struct VmxnetTxPkt *tx_pkt;",
          "323:         struct VmxnetRxPkt *rx_pkt;",
          "",
          "[Added Lines]",
          "317:         struct NetTxPkt *tx_pkt;",
          "323:         struct NetRxPkt *rx_pkt;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "546: {",
          "547:     switch (s->offload_mode) {",
          "548:     case VMXNET3_OM_NONE:",
          "550:         break;",
          "552:     case VMXNET3_OM_CSUM:",
          "554:         VMW_PKPRN(\"L4 CSO requested\\n\");",
          "555:         break;",
          "557:     case VMXNET3_OM_TSO:",
          "559:             s->cso_or_gso_size);",
          "561:         VMW_PKPRN(\"GSO offload requested.\");",
          "562:         break;",
          "",
          "[Removed Lines]",
          "549:         vmxnet_tx_pkt_build_vheader(s->tx_pkt, false, false, 0);",
          "553:         vmxnet_tx_pkt_build_vheader(s->tx_pkt, false, true, 0);",
          "558:         vmxnet_tx_pkt_build_vheader(s->tx_pkt, true, true,",
          "560:         vmxnet_tx_pkt_update_ip_checksums(s->tx_pkt);",
          "",
          "[Added Lines]",
          "549:         net_tx_pkt_build_vheader(s->tx_pkt, false, false, 0);",
          "553:         net_tx_pkt_build_vheader(s->tx_pkt, false, true, 0);",
          "558:         net_tx_pkt_build_vheader(s->tx_pkt, true, true,",
          "560:         net_tx_pkt_update_ip_checksums(s->tx_pkt);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "590: vmxnet3_on_tx_done_update_stats(VMXNET3State *s, int qidx,",
          "591:     Vmxnet3PktStatus status)",
          "592: {",
          "594:     struct UPT1_TxStats *stats = &s->txq_descr[qidx].txq_stats;",
          "596:     switch (status) {",
          "597:     case VMXNET3_PKT_STATUS_OK:",
          "599:         case ETH_PKT_BCAST:",
          "600:             stats->bcastPktsTxOK++;",
          "601:             stats->bcastBytesTxOK += tot_len;",
          "",
          "[Removed Lines]",
          "593:     size_t tot_len = vmxnet_tx_pkt_get_total_len(s->tx_pkt);",
          "598:         switch (vmxnet_tx_pkt_get_packet_type(s->tx_pkt)) {",
          "",
          "[Added Lines]",
          "593:     size_t tot_len = net_tx_pkt_get_total_len(s->tx_pkt);",
          "598:         switch (net_tx_pkt_get_packet_type(s->tx_pkt)) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "643:                                 Vmxnet3PktStatus status)",
          "644: {",
          "645:     struct UPT1_RxStats *stats = &s->rxq_descr[qidx].rxq_stats;",
          "648:     switch (status) {",
          "649:     case VMXNET3_PKT_STATUS_OUT_OF_BUF:",
          "",
          "[Removed Lines]",
          "646:     size_t tot_len = vmxnet_rx_pkt_get_total_len(s->rx_pkt);",
          "",
          "[Added Lines]",
          "646:     size_t tot_len = net_rx_pkt_get_total_len(s->rx_pkt);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "654:         stats->pktsRxError++;",
          "655:         break;",
          "656:     case VMXNET3_PKT_STATUS_OK:",
          "658:         case ETH_PKT_BCAST:",
          "659:             stats->bcastPktsRxOK++;",
          "660:             stats->bcastBytesRxOK += tot_len;",
          "",
          "[Removed Lines]",
          "657:         switch (vmxnet_rx_pkt_get_packet_type(s->rx_pkt)) {",
          "",
          "[Added Lines]",
          "657:         switch (net_rx_pkt_get_packet_type(s->rx_pkt)) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "715:     }",
          "722:         status = VMXNET3_PKT_STATUS_DISCARD;",
          "723:         goto func_exit;",
          "724:     }",
          "",
          "[Removed Lines]",
          "718:     vmxnet3_dump_virt_hdr(vmxnet_tx_pkt_get_vhdr(s->tx_pkt));",
          "719:     vmxnet_tx_pkt_dump(s->tx_pkt);",
          "721:     if (!vmxnet_tx_pkt_send(s->tx_pkt, qemu_get_queue(s->nic))) {",
          "",
          "[Added Lines]",
          "718:     vmxnet3_dump_virt_hdr(net_tx_pkt_get_vhdr(s->tx_pkt));",
          "719:     net_tx_pkt_dump(s->tx_pkt);",
          "721:     if (!net_tx_pkt_send(s->tx_pkt, qemu_get_queue(s->nic))) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "746:             data_len = (txd.len > 0) ? txd.len : VMXNET3_MAX_TX_BUF_SIZE;",
          "747:             data_pa = le64_to_cpu(txd.addr);",
          "750:                                                 data_pa,",
          "751:                                                 data_len)) {",
          "752:                 s->skip_current_tx_pkt = true;",
          "",
          "[Removed Lines]",
          "749:             if (!vmxnet_tx_pkt_add_raw_fragment(s->tx_pkt,",
          "",
          "[Added Lines]",
          "749:             if (!net_tx_pkt_add_raw_fragment(s->tx_pkt,",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "759:         }",
          "761:         if (txd.eop) {",
          "763:                 if (s->needs_vlan) {",
          "765:                 }",
          "767:                 vmxnet3_send_packet(s, qidx);",
          "",
          "[Removed Lines]",
          "762:             if (!s->skip_current_tx_pkt && vmxnet_tx_pkt_parse(s->tx_pkt)) {",
          "764:                     vmxnet_tx_pkt_setup_vlan_header(s->tx_pkt, s->tci);",
          "",
          "[Added Lines]",
          "762:             if (!s->skip_current_tx_pkt && net_tx_pkt_parse(s->tx_pkt)) {",
          "764:                     net_tx_pkt_setup_vlan_header(s->tx_pkt, s->tci);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "773:             vmxnet3_complete_packet(s, qidx, txd_idx);",
          "774:             s->tx_sop = true;",
          "775:             s->skip_current_tx_pkt = false;",
          "777:         }",
          "778:     }",
          "779: }",
          "",
          "[Removed Lines]",
          "776:             vmxnet_tx_pkt_reset(s->tx_pkt);",
          "",
          "[Added Lines]",
          "776:             net_tx_pkt_reset(s->tx_pkt);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "932:                                            const void *pkt_data,",
          "933:                                            size_t pkt_len)",
          "934: {",
          "",
          "[Removed Lines]",
          "931: static void vmxnet3_rx_need_csum_calculate(struct VmxnetRxPkt *pkt,",
          "",
          "[Added Lines]",
          "931: static void vmxnet3_rx_need_csum_calculate(struct NetRxPkt *pkt,",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "937:     uint8_t *data;",
          "938:     int len;",
          "941:         return;",
          "942:     }",
          "945:     if (!VMXNET_FLAG_IS_SET(vhdr->flags, VIRTIO_NET_HDR_F_NEEDS_CSUM)) {",
          "946:         return;",
          "947:     }",
          "950:     if (!(isip4 || isip6) || !(istcp || isudp)) {",
          "951:         return;",
          "952:     }",
          "",
          "[Removed Lines]",
          "940:     if (!vmxnet_rx_pkt_has_virt_hdr(pkt)) {",
          "944:     vhdr = vmxnet_rx_pkt_get_vhdr(pkt);",
          "949:     vmxnet_rx_pkt_get_protocols(pkt, &isip4, &isip6, &isudp, &istcp);",
          "",
          "[Added Lines]",
          "940:     if (!net_rx_pkt_has_virt_hdr(pkt)) {",
          "944:     vhdr = net_rx_pkt_get_vhdr(pkt);",
          "949:     net_rx_pkt_get_protocols(pkt, &isip4, &isip6, &isudp, &istcp);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "970:     vhdr->flags |= VIRTIO_NET_HDR_F_DATA_VALID;",
          "971: }",
          "974:     struct Vmxnet3_RxCompDesc *rxcd)",
          "975: {",
          "976:     int csum_ok, is_gso;",
          "",
          "[Removed Lines]",
          "973: static void vmxnet3_rx_update_descr(struct VmxnetRxPkt *pkt,",
          "",
          "[Added Lines]",
          "973: static void vmxnet3_rx_update_descr(struct NetRxPkt *pkt,",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "978:     struct virtio_net_hdr *vhdr;",
          "979:     uint8_t offload_type;",
          "982:         rxcd->ts = 1;",
          "984:     }",
          "987:         goto nocsum;",
          "988:     }",
          "",
          "[Removed Lines]",
          "981:     if (vmxnet_rx_pkt_is_vlan_stripped(pkt)) {",
          "983:         rxcd->tci = vmxnet_rx_pkt_get_vlan_tag(pkt);",
          "986:     if (!vmxnet_rx_pkt_has_virt_hdr(pkt)) {",
          "990:     vhdr = vmxnet_rx_pkt_get_vhdr(pkt);",
          "",
          "[Added Lines]",
          "981:     if (net_rx_pkt_is_vlan_stripped(pkt)) {",
          "983:         rxcd->tci = net_rx_pkt_get_vlan_tag(pkt);",
          "986:     if (!net_rx_pkt_has_virt_hdr(pkt)) {",
          "990:     vhdr = net_rx_pkt_get_vhdr(pkt);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1004:         goto nocsum;",
          "1005:     }",
          "1008:     if ((!istcp && !isudp) || (!isip4 && !isip6)) {",
          "1009:         goto nocsum;",
          "1010:     }",
          "",
          "[Removed Lines]",
          "1007:     vmxnet_rx_pkt_get_protocols(pkt, &isip4, &isip6, &isudp, &istcp);",
          "",
          "[Added Lines]",
          "1007:     net_rx_pkt_get_protocols(pkt, &isip4, &isip6, &isudp, &istcp);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1063:     uint32_t new_rxcd_gen = VMXNET3_INIT_GEN;",
          "1064:     hwaddr new_rxcd_pa = 0;",
          "1065:     hwaddr ready_rxcd_pa = 0;",
          "1067:     size_t bytes_copied = 0;",
          "1069:     uint16_t num_frags = 0;",
          "1070:     size_t chunk_size;",
          "1074:     while (bytes_left > 0) {",
          "",
          "[Removed Lines]",
          "1066:     struct iovec *data = vmxnet_rx_pkt_get_iovec(s->rx_pkt);",
          "1068:     size_t bytes_left = vmxnet_rx_pkt_get_total_len(s->rx_pkt);",
          "1072:     vmxnet_rx_pkt_dump(s->rx_pkt);",
          "",
          "[Added Lines]",
          "1066:     struct iovec *data = net_rx_pkt_get_iovec(s->rx_pkt);",
          "1068:     size_t bytes_left = net_rx_pkt_get_total_len(s->rx_pkt);",
          "1072:     net_rx_pkt_dump(s->rx_pkt);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1226: {",
          "1227:     if (s->device_active) {",
          "1228:         VMW_CBPRN(\"Deactivating vmxnet3...\");",
          "1232:         s->device_active = false;",
          "1233:     }",
          "1234: }",
          "",
          "[Removed Lines]",
          "1229:         vmxnet_tx_pkt_reset(s->tx_pkt);",
          "1230:         vmxnet_tx_pkt_uninit(s->tx_pkt);",
          "1231:         vmxnet_rx_pkt_uninit(s->rx_pkt);",
          "",
          "[Added Lines]",
          "1229:         net_tx_pkt_reset(s->tx_pkt);",
          "1230:         net_tx_pkt_uninit(s->tx_pkt);",
          "1231:         net_rx_pkt_uninit(s->rx_pkt);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1560:     VMW_CFPRN(\"Max TX fragments is %u\", s->max_tx_frags);",
          "1565:     for (i = 0; i < s->rxq_num; i++) {",
          "",
          "[Removed Lines]",
          "1561:     vmxnet_tx_pkt_init(&s->tx_pkt, s->max_tx_frags, s->peer_has_vhdr);",
          "1562:     vmxnet_rx_pkt_init(&s->rx_pkt, s->peer_has_vhdr);",
          "",
          "[Added Lines]",
          "1561:     net_tx_pkt_init(&s->tx_pkt, s->max_tx_frags, s->peer_has_vhdr);",
          "1562:     net_rx_pkt_init(&s->rx_pkt, s->peer_has_vhdr);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1965:         return false;",
          "1966:     }",
          "1969:     case ETH_PKT_UCAST:",
          "1970:         if (!VMXNET_FLAG_IS_SET(s->rx_mode, VMXNET3_RXM_UCAST)) {",
          "1971:             return false;",
          "",
          "[Removed Lines]",
          "1968:     switch (vmxnet_rx_pkt_get_packet_type(s->rx_pkt)) {",
          "",
          "[Added Lines]",
          "1968:     switch (net_rx_pkt_get_packet_type(s->rx_pkt)) {",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "2013:     }",
          "2015:     if (s->peer_has_vhdr) {",
          "2017:         buf += sizeof(struct virtio_net_hdr);",
          "2018:         size -= sizeof(struct virtio_net_hdr);",
          "2019:     }",
          "",
          "[Removed Lines]",
          "2016:         vmxnet_rx_pkt_set_vhdr(s->rx_pkt, (struct virtio_net_hdr *)buf);",
          "",
          "[Added Lines]",
          "2016:         net_rx_pkt_set_vhdr(s->rx_pkt, (struct virtio_net_hdr *)buf);",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "2026:         size = sizeof(min_buf);",
          "2027:     }",
          "2030:         get_eth_packet_type(PKT_GET_ETH_HDR(buf)));",
          "2032:     if (vmxnet3_rx_filter_may_indicate(s, buf, size)) {",
          "2034:         vmxnet3_rx_need_csum_calculate(s->rx_pkt, buf, size);",
          "2036:         bytes_indicated = vmxnet3_indicate_packet(s) ? size : -1;",
          "2037:         if (bytes_indicated < size) {",
          "2038:             VMW_PKPRN(\"RX: %zu of %zu bytes indicated\", bytes_indicated, size);",
          "",
          "[Removed Lines]",
          "2029:     vmxnet_rx_pkt_set_packet_type(s->rx_pkt,",
          "2033:         vmxnet_rx_pkt_set_protocols(s->rx_pkt, buf, size);",
          "2035:         vmxnet_rx_pkt_attach_data(s->rx_pkt, buf, size, s->rx_vlan_stripping);",
          "",
          "[Added Lines]",
          "2029:     net_rx_pkt_set_packet_type(s->rx_pkt,",
          "2033:         net_rx_pkt_set_protocols(s->rx_pkt, buf, size);",
          "2035:         net_rx_pkt_attach_data(s->rx_pkt, buf, size, s->rx_vlan_stripping);",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "2536:     VMXNET3State *s = opaque;",
          "2537:     PCIDevice *d = PCI_DEVICE(s);",
          "2542:     if (s->msix_used) {",
          "2543:         if  (!vmxnet3_use_msix_vectors(s, VMXNET3_MAX_INTRS)) {",
          "",
          "[Removed Lines]",
          "2539:     vmxnet_tx_pkt_init(&s->tx_pkt, s->max_tx_frags, s->peer_has_vhdr);",
          "2540:     vmxnet_rx_pkt_init(&s->rx_pkt, s->peer_has_vhdr);",
          "",
          "[Added Lines]",
          "2539:     net_tx_pkt_init(&s->tx_pkt, s->max_tx_frags, s->peer_has_vhdr);",
          "2540:     net_rx_pkt_init(&s->rx_pkt, s->peer_has_vhdr);",
          "",
          "---------------"
        ]
      }
    }
  ]
}