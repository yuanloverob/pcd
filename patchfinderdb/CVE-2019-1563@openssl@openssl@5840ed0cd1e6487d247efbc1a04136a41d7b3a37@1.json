{
  "cve_id": "CVE-2019-1563",
  "cve_desc": "In situations where an attacker receives automated notification of the success or failure of a decryption attempt an attacker, after sending a very large number of messages to be decrypted, can recover a CMS/PKCS7 transported encryption key or decrypt any RSA encrypted message that was encrypted with the public RSA key, using a Bleichenbacher padding oracle attack. Applications are not affected if they use a certificate together with the private RSA key to the CMS_decrypt or PKCS7_decrypt functions to select the correct recipient info to decrypt. Fixed in OpenSSL 1.1.1d (Affected 1.1.1-1.1.1c). Fixed in OpenSSL 1.1.0l (Affected 1.1.0-1.1.0k). Fixed in OpenSSL 1.0.2t (Affected 1.0.2-1.0.2s).",
  "repo": "openssl/openssl",
  "patch_hash": "5840ed0cd1e6487d247efbc1a04136a41d7b3a37",
  "patch_info": {
    "commit_hash": "5840ed0cd1e6487d247efbc1a04136a41d7b3a37",
    "repo": "openssl/openssl",
    "commit_url": "https://github.com/openssl/openssl/commit/5840ed0cd1e6487d247efbc1a04136a41d7b3a37",
    "files": [
      "CHANGES",
      "crypto/cms/cms_env.c",
      "crypto/cms/cms_lcl.h",
      "crypto/cms/cms_smime.c",
      "crypto/pkcs7/pk7_doit.c"
    ],
    "message": "Fix a padding oracle in PKCS7_dataDecode and CMS_decrypt_set1_pkey\n\nAn attack is simple, if the first CMS_recipientInfo is valid but the\nsecond CMS_recipientInfo is chosen ciphertext. If the second\nrecipientInfo decodes to PKCS #1 v1.5 form plaintext, the correct\nencryption key will be replaced by garbage, and the message cannot be\ndecoded, but if the RSA decryption fails, the correct encryption key is\nused and the recipient will not notice the attack.\n\nAs a work around for this potential attack the length of the decrypted\nkey must be equal to the cipher default key length, in case the\ncertifiate is not given and all recipientInfo are tried out.\n\nThe old behaviour can be re-enabled in the CMS code by setting the\nCMS_DEBUG_DECRYPT flag.\n\nReviewed-by: Matt Caswell <matt@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/9777)",
    "before_after_code_files": [
      "crypto/cms/cms_env.c||crypto/cms/cms_env.c",
      "crypto/cms/cms_lcl.h||crypto/cms/cms_lcl.h",
      "crypto/cms/cms_smime.c||crypto/cms/cms_smime.c",
      "crypto/pkcs7/pk7_doit.c||crypto/pkcs7/pk7_doit.c"
    ]
  },
  "patch_diff": {
    "crypto/cms/cms_env.c||crypto/cms/cms_env.c": [
      "File: crypto/cms/cms_env.c -> crypto/cms/cms_env.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "363:     unsigned char *ek = NULL;",
      "364:     size_t eklen;",
      "365:     int ret = 0;",
      "366:     CMS_EncryptedContentInfo *ec;",
      "367:     ec = cms->d.envelopedData->encryptedContentInfo;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "366:     size_t fixlen = 0;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "371:         return 0;",
      "372:     }",
      "374:     ktri->pctx = EVP_PKEY_CTX_new(pkey, NULL);",
      "375:     if (ktri->pctx == NULL)",
      "376:         return 0;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "375:     if (cms->d.envelopedData->encryptedContentInfo->havenocert",
      "376:             && !cms->d.envelopedData->encryptedContentInfo->debug) {",
      "377:         X509_ALGOR *calg = ec->contentEncryptionAlgorithm;",
      "378:         const EVP_CIPHER *ciph = EVP_get_cipherbyobj(calg->algorithm);",
      "380:         if (ciph == NULL) {",
      "381:             CMSerr(CMS_F_CMS_RECIPIENTINFO_KTRI_DECRYPT, CMS_R_UNKNOWN_CIPHER);",
      "382:             return 0;",
      "383:         }",
      "385:         fixlen = EVP_CIPHER_key_length(ciph);",
      "386:     }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "402:     if (EVP_PKEY_decrypt(ktri->pctx, ek, &eklen,",
      "403:                          ktri->encryptedKey->data,",
      "405:         CMSerr(CMS_F_CMS_RECIPIENTINFO_KTRI_DECRYPT, CMS_R_CMS_LIB);",
      "406:         goto err;",
      "407:     }",
      "",
      "[Removed Lines]",
      "404:                          ktri->encryptedKey->length) <= 0) {",
      "",
      "[Added Lines]",
      "418:                          ktri->encryptedKey->length) <= 0",
      "419:             || eklen == 0",
      "420:             || (fixlen != 0 && eklen != fixlen)) {",
      "",
      "---------------"
    ],
    "crypto/cms/cms_lcl.h||crypto/cms/cms_lcl.h": [
      "File: crypto/cms/cms_lcl.h -> crypto/cms/cms_lcl.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "125:     size_t keylen;",
      "127:     int debug;",
      "128: };",
      "130: struct CMS_RecipientInfo_st {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "129:     int havenocert;",
      "",
      "---------------"
    ],
    "crypto/cms/cms_smime.c||crypto/cms/cms_smime.c": [
      "File: crypto/cms/cms_smime.c -> crypto/cms/cms_smime.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "743:         cms->d.envelopedData->encryptedContentInfo->debug = 1;",
      "744:     else",
      "745:         cms->d.envelopedData->encryptedContentInfo->debug = 0;",
      "746:     if (!pk && !cert && !dcont && !out)",
      "747:         return 1;",
      "748:     if (pk && !CMS_decrypt_set1_pkey(cms, pk, cert))",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "746:     if (!cert)",
      "747:         cms->d.envelopedData->encryptedContentInfo->havenocert = 1;",
      "748:     else",
      "749:         cms->d.envelopedData->encryptedContentInfo->havenocert = 0;",
      "",
      "---------------"
    ],
    "crypto/pkcs7/pk7_doit.c||crypto/pkcs7/pk7_doit.c": [
      "File: crypto/pkcs7/pk7_doit.c -> crypto/pkcs7/pk7_doit.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "137: }",
      "139: static int pkcs7_decrypt_rinfo(unsigned char **pek, int *peklen,",
      "141: {",
      "142:     EVP_PKEY_CTX *pctx = NULL;",
      "143:     unsigned char *ek = NULL;",
      "",
      "[Removed Lines]",
      "140:                                PKCS7_RECIP_INFO *ri, EVP_PKEY *pkey)",
      "",
      "[Added Lines]",
      "140:                                PKCS7_RECIP_INFO *ri, EVP_PKEY *pkey,",
      "141:                                size_t fixlen)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "170:     }",
      "172:     if (EVP_PKEY_decrypt(pctx, ek, &eklen,",
      "174:         ret = 0;",
      "175:         PKCS7err(PKCS7_F_PKCS7_DECRYPT_RINFO, ERR_R_EVP_LIB);",
      "176:         goto err;",
      "",
      "[Removed Lines]",
      "173:                          ri->enc_key->data, ri->enc_key->length) <= 0) {",
      "",
      "[Added Lines]",
      "174:                          ri->enc_key->data, ri->enc_key->length) <= 0",
      "175:             || eklen == 0",
      "176:             || (fixlen != 0 && eklen != fixlen)) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "499:             for (i = 0; i < sk_PKCS7_RECIP_INFO_num(rsk); i++) {",
      "500:                 ri = sk_PKCS7_RECIP_INFO_value(rsk, i);",
      "503:                     goto err;",
      "504:                 ERR_clear_error();",
      "505:             }",
      "506:         } else {",
      "509:                 goto err;",
      "510:             ERR_clear_error();",
      "511:         }",
      "",
      "[Removed Lines]",
      "502:                 if (pkcs7_decrypt_rinfo(&ek, &eklen, ri, pkey) < 0)",
      "508:             if (pkcs7_decrypt_rinfo(&ek, &eklen, ri, pkey) < 0)",
      "",
      "[Added Lines]",
      "505:                 if (pkcs7_decrypt_rinfo(&ek, &eklen, ri, pkey,",
      "506:                         EVP_CIPHER_key_length(evp_cipher)) < 0)",
      "512:             if (pkcs7_decrypt_rinfo(&ek, &eklen, ri, pkey, 0) < 0)",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "1acb2e6f3540727c4cc9f8388cc0da265e6fe8ab",
      "candidate_info": {
        "commit_hash": "1acb2e6f3540727c4cc9f8388cc0da265e6fe8ab",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/1acb2e6f3540727c4cc9f8388cc0da265e6fe8ab",
        "files": [
          "crypto/cms/cms_enc.c",
          "crypto/cms/cms_env.c",
          "crypto/cms/cms_lib.c",
          "crypto/cms/cms_sd.c"
        ],
        "message": "Fix CMS so that it still works with non fetchable algorithms.\n\nFixes #12633\n\nFor CMS the Gost engine still requires calls to EVP_get_digestbyname() and EVP_get_cipherbyname() when\nEVP_MD_fetch() and EVP_CIPHER_fetch() return NULL.\n\nReviewed-by: Tomas Mraz <tmraz@fedoraproject.org>\nReviewed-by: Dmitry Belyavskiy <beldmit@gmail.com>\n(Merged from https://github.com/openssl/openssl/pull/12689)",
        "before_after_code_files": [
          "crypto/cms/cms_enc.c||crypto/cms/cms_enc.c",
          "crypto/cms/cms_env.c||crypto/cms/cms_env.c",
          "crypto/cms/cms_lib.c||crypto/cms/cms_lib.c",
          "crypto/cms/cms_sd.c||crypto/cms/cms_sd.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "crypto/cms/cms_env.c||crypto/cms/cms_env.c"
          ],
          "candidate": [
            "crypto/cms/cms_env.c||crypto/cms/cms_env.c"
          ]
        }
      },
      "candidate_diff": {
        "crypto/cms/cms_enc.c||crypto/cms/cms_enc.c": [
          "File: crypto/cms/cms_enc.c -> crypto/cms/cms_enc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "46:     BIO_get_cipher_ctx(b, &ctx);",
          "48:     if (enc) {",
          "49:         cipher = ec->cipher;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "48:     (void)ERR_set_mark();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "58:     if (cipher != NULL) {",
          "59:         fetched_ciph = EVP_CIPHER_fetch(cms_ctx->libctx, EVP_CIPHER_name(cipher),",
          "60:                                         cms_ctx->propq);",
          "65:     }",
          "67:         CMSerr(CMS_F_CMS_ENCRYPTEDCONTENT_INIT_BIO,",
          "68:                CMS_R_CIPHER_INITIALISATION_ERROR);",
          "69:         goto err;",
          "70:     }",
          "73:     if (enc) {",
          "74:         int ivlen;",
          "",
          "[Removed Lines]",
          "61:         if (fetched_ciph == NULL) {",
          "62:             CMSerr(CMS_F_CMS_ENCRYPTEDCONTENT_INIT_BIO, CMS_R_UNKNOWN_CIPHER);",
          "63:             goto err;",
          "64:         }",
          "66:     if (EVP_CipherInit_ex(ctx, fetched_ciph, NULL, NULL, NULL, enc) <= 0) {",
          "71:     EVP_CIPHER_free(fetched_ciph);",
          "",
          "[Added Lines]",
          "62:         if (fetched_ciph != NULL)",
          "63:             cipher = fetched_ciph;",
          "64:     }",
          "65:     if (cipher == NULL) {",
          "66:         (void)ERR_clear_last_mark();",
          "67:         CMSerr(CMS_F_CMS_ENCRYPTEDCONTENT_INIT_BIO, CMS_R_UNKNOWN_CIPHER);",
          "68:         goto err;",
          "70:     (void)ERR_pop_to_mark();",
          "72:     if (EVP_CipherInit_ex(ctx, cipher, NULL, NULL, NULL, enc) <= 0) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "159:     ok = 1;",
          "161:  err:",
          "162:     if (!keep_key || !ok) {",
          "163:         OPENSSL_clear_free(ec->key, ec->keylen);",
          "164:         ec->key = NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "167:     EVP_CIPHER_free(fetched_ciph);",
          "",
          "---------------"
        ],
        "crypto/cms/cms_env.c||crypto/cms/cms_env.c": [
          "File: crypto/cms/cms_env.c -> crypto/cms/cms_env.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "466:     size_t eklen;",
          "467:     int ret = 0;",
          "468:     size_t fixlen = 0;",
          "470:     CMS_EncryptedContentInfo *ec;",
          "471:     const CMS_CTX *ctx = cms_get0_cmsctx(cms);",
          "",
          "[Removed Lines]",
          "469:     EVP_CIPHER *ciph = NULL;",
          "",
          "[Added Lines]",
          "469:     const EVP_CIPHER *cipher = NULL;",
          "470:     EVP_CIPHER *fetched_cipher = NULL;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "482:         X509_ALGOR *calg = ec->contentEncryptionAlgorithm;",
          "483:         const char *name = OBJ_nid2sn(OBJ_obj2nid(calg->algorithm));",
          "487:             CMSerr(CMS_F_CMS_RECIPIENTINFO_KTRI_DECRYPT, CMS_R_UNKNOWN_CIPHER);",
          "488:             return 0;",
          "489:         }",
          "493:     }",
          "495:     ktri->pctx = EVP_PKEY_CTX_new_from_pkey(ctx->libctx, pkey, ctx->propq);",
          "",
          "[Removed Lines]",
          "485:         ciph = EVP_CIPHER_fetch(ctx->libctx, name, ctx->propq);",
          "486:         if (ciph == NULL) {",
          "491:         fixlen = EVP_CIPHER_key_length(ciph);",
          "492:         EVP_CIPHER_free(ciph);",
          "",
          "[Added Lines]",
          "486:         (void)ERR_set_mark();",
          "487:         fetched_cipher = EVP_CIPHER_fetch(ctx->libctx, name, ctx->propq);",
          "489:         if (fetched_cipher != NULL)",
          "490:             cipher = fetched_cipher;",
          "491:         else",
          "492:             cipher = EVP_get_cipherbyobj(calg->algorithm);",
          "493:         if (cipher == NULL) {",
          "494:             (void)ERR_clear_last_mark();",
          "498:         (void)ERR_pop_to_mark();",
          "500:         fixlen = EVP_CIPHER_key_length(cipher);",
          "501:         EVP_CIPHER_free(fetched_cipher);",
          "",
          "---------------"
        ],
        "crypto/cms/cms_lib.c||crypto/cms/cms_lib.c": [
          "File: crypto/cms/cms_lib.c -> crypto/cms/cms_lib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "394: {",
          "395:     BIO *mdbio = NULL;",
          "396:     const ASN1_OBJECT *digestoid;",
          "398:     const char *alg;",
          "400:     X509_ALGOR_get0(&digestoid, NULL, NULL, digestAlgorithm);",
          "401:     alg = OBJ_nid2sn(OBJ_obj2nid(digestoid));",
          "403:     if (digest == NULL) {",
          "404:         CMSerr(CMS_F_CMS_DIGESTALGORITHM_INIT_BIO,",
          "405:                CMS_R_UNKNOWN_DIGEST_ALGORITHM);",
          "406:         goto err;",
          "407:     }",
          "408:     mdbio = BIO_new(BIO_f_md());",
          "409:     if (mdbio == NULL || !BIO_set_md(mdbio, digest)) {",
          "410:         CMSerr(CMS_F_CMS_DIGESTALGORITHM_INIT_BIO, CMS_R_MD_BIO_INIT_ERROR);",
          "411:         goto err;",
          "412:     }",
          "414:     return mdbio;",
          "415:  err:",
          "417:     BIO_free(mdbio);",
          "418:     return NULL;",
          "419: }",
          "",
          "[Removed Lines]",
          "397:     EVP_MD *digest = NULL;",
          "402:     digest = EVP_MD_fetch(ctx->libctx, alg, ctx->propq);",
          "413:     EVP_MD_free(digest);",
          "416:     EVP_MD_free(digest);",
          "",
          "[Added Lines]",
          "397:     const EVP_MD *digest = NULL;",
          "398:     EVP_MD *fetched_digest = NULL;",
          "404:     (void)ERR_set_mark();",
          "405:     fetched_digest = EVP_MD_fetch(ctx->libctx, alg, ctx->propq);",
          "407:     if (fetched_digest != NULL)",
          "408:         digest = fetched_digest;",
          "409:     else",
          "410:         digest = EVP_get_digestbyobj(digestoid);",
          "412:         (void)ERR_clear_last_mark();",
          "417:     (void)ERR_pop_to_mark();",
          "424:     EVP_MD_free(fetched_digest);",
          "427:     EVP_MD_free(fetched_digest);",
          "",
          "---------------"
        ],
        "crypto/cms/cms_sd.c||crypto/cms/cms_sd.c": [
          "File: crypto/cms/cms_sd.c -> crypto/cms/cms_sd.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "817:     unsigned char *abuf = NULL;",
          "818:     int alen, r = -1;",
          "819:     const char *name;",
          "821:     const CMS_CTX *ctx = si->cms_ctx;",
          "823:     if (si->pkey == NULL) {",
          "",
          "[Removed Lines]",
          "820:     EVP_MD *md = NULL;",
          "",
          "[Added Lines]",
          "820:     const EVP_MD *md;",
          "821:     EVP_MD *fetched_md = NULL;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "829:         return -1;",
          "831:     name = OBJ_nid2sn(OBJ_obj2nid(si->digestAlgorithm->algorithm));",
          "834:         return -1;",
          "835:     if (si->mctx == NULL && (si->mctx = EVP_MD_CTX_new()) == NULL) {",
          "836:         CMSerr(CMS_F_CMS_SIGNERINFO_VERIFY, ERR_R_MALLOC_FAILURE);",
          "837:         goto err;",
          "",
          "[Removed Lines]",
          "832:     md = EVP_MD_fetch(ctx->libctx, name, ctx->propq);",
          "833:     if (md == NULL)",
          "",
          "[Added Lines]",
          "834:     (void)ERR_set_mark();",
          "835:     fetched_md = EVP_MD_fetch(ctx->libctx, name, ctx->propq);",
          "837:     if (fetched_md != NULL)",
          "838:         md = fetched_md;",
          "839:     else",
          "840:         md = EVP_get_digestbyobj(si->digestAlgorithm->algorithm);",
          "841:     if (md == NULL) {",
          "842:         (void)ERR_clear_last_mark();",
          "843:         CMSerr(0, CMS_R_UNKNOWN_DIGEST_ALGORITHM);",
          "845:     }",
          "846:     (void)ERR_pop_to_mark();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "860:     if (r <= 0)",
          "861:         CMSerr(CMS_F_CMS_SIGNERINFO_VERIFY, CMS_R_VERIFICATION_FAILURE);",
          "862:  err:",
          "864:     EVP_MD_CTX_reset(mctx);",
          "865:     return r;",
          "866: }",
          "",
          "[Removed Lines]",
          "863:     EVP_MD_free(md);",
          "",
          "[Added Lines]",
          "876:     EVP_MD_free(fetched_md);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c1669f41eab0e2d9a8c2498718d06b4cd48a9890",
      "candidate_info": {
        "commit_hash": "c1669f41eab0e2d9a8c2498718d06b4cd48a9890",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/c1669f41eab0e2d9a8c2498718d06b4cd48a9890",
        "files": [
          "apps/cms.c",
          "crypto/cms/cms_cd.c",
          "crypto/cms/cms_dd.c",
          "crypto/cms/cms_enc.c",
          "crypto/cms/cms_env.c",
          "crypto/cms/cms_ess.c",
          "crypto/cms/cms_io.c",
          "crypto/cms/cms_kari.c",
          "crypto/cms/cms_lib.c",
          "crypto/cms/cms_local.h",
          "crypto/cms/cms_pwri.c",
          "crypto/cms/cms_sd.c",
          "crypto/cms/cms_smime.c",
          "doc/man1/openssl-cms.pod.in",
          "doc/man3/CMS_EnvelopedData_create.pod",
          "doc/man3/CMS_encrypt.pod",
          "doc/man3/CMS_get1_ReceiptRequest.pod",
          "doc/man3/CMS_sign.pod",
          "doc/man3/SMIME_read_CMS.pod",
          "include/openssl/cms.h"
        ],
        "message": "Add libctx support to CMS.\n\n-Public CMS methods that create a CMS_ContentInfo object now have variants that also add a libctx and propq.\n This includes CMS_ContentInfo_new_with_libctx(), CMS_sign_with_libctx(), CMS_data_create_with_libctx(),\n CMS_digest_create_with_libctx(), CMS_EncryptedData_encrypt_with_libctx(), CMS_EnvelopedData_create_with_libctx().\n-Added CMS_ReceiptRequest_create0_with_libctx().\n-Added SMIME_read_CMS_ex() so that a new CMS_ContentInfo object (created using CMS_ContentInfo_new_with_libctx()) can\nbe passed to the read.\n-d2i_CMS_bio() has been modified so that after it loads the CMS_ContentInfo() it then resolves any subobjects that require\n the libctx/propq (such as objects containing X509 certificates).\n\nReviewed-by: Matt Caswell <matt@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/11884)",
        "before_after_code_files": [
          "apps/cms.c||apps/cms.c",
          "crypto/cms/cms_cd.c||crypto/cms/cms_cd.c",
          "crypto/cms/cms_dd.c||crypto/cms/cms_dd.c",
          "crypto/cms/cms_enc.c||crypto/cms/cms_enc.c",
          "crypto/cms/cms_env.c||crypto/cms/cms_env.c",
          "crypto/cms/cms_ess.c||crypto/cms/cms_ess.c",
          "crypto/cms/cms_io.c||crypto/cms/cms_io.c",
          "crypto/cms/cms_kari.c||crypto/cms/cms_kari.c",
          "crypto/cms/cms_lib.c||crypto/cms/cms_lib.c",
          "crypto/cms/cms_local.h||crypto/cms/cms_local.h",
          "crypto/cms/cms_pwri.c||crypto/cms/cms_pwri.c",
          "crypto/cms/cms_sd.c||crypto/cms/cms_sd.c",
          "crypto/cms/cms_smime.c||crypto/cms/cms_smime.c",
          "include/openssl/cms.h||include/openssl/cms.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "crypto/cms/cms_env.c||crypto/cms/cms_env.c",
            "crypto/cms/cms_smime.c||crypto/cms/cms_smime.c"
          ],
          "candidate": [
            "crypto/cms/cms_env.c||crypto/cms/cms_env.c",
            "crypto/cms/cms_smime.c||crypto/cms/cms_smime.c"
          ]
        }
      },
      "candidate_diff": {
        "apps/cms.c||apps/cms.c": [
          "File: apps/cms.c -> apps/cms.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: static int save_certs(char *signerfile, STACK_OF(X509) *signers);",
          "33: static int cms_cb(int ok, X509_STORE_CTX *ctx);",
          "34: static void receipt_request_print(CMS_ContentInfo *cms);",
          "38: static int cms_set_pkey_param(EVP_PKEY_CTX *pctx,",
          "39:                               STACK_OF(OPENSSL_STRING) *param);",
          "",
          "[Removed Lines]",
          "35: static CMS_ReceiptRequest *make_receipt_request(STACK_OF(OPENSSL_STRING)",
          "",
          "[Added Lines]",
          "35: static CMS_ReceiptRequest *make_receipt_request(",
          "36:     STACK_OF(OPENSSL_STRING) *rr_to, int rr_allorfirst,",
          "37:     STACK_OF(OPENSSL_STRING) *rr_from, OPENSSL_CTX *libctx, const char *propq);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "89:     OPT_RR_TO, OPT_AES128_WRAP, OPT_AES192_WRAP, OPT_AES256_WRAP,",
          "90:     OPT_3DES_WRAP, OPT_WRAP, OPT_ENGINE,",
          "91:     OPT_R_ENUM,",
          "93:     OPT_V_ENUM,",
          "94:     OPT_CIPHER,",
          "95:     OPT_ORIGINATOR",
          "",
          "[Removed Lines]",
          "92:     OPT_PROV_ENUM,",
          "",
          "[Added Lines]",
          "92:     OPT_PROV_ENUM, OPT_CONFIG,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "124: # ifndef OPENSSL_NO_ENGINE",
          "125:     {\"engine\", OPT_ENGINE, 's', \"Use engine e, possibly a hardware device\"},",
          "126: # endif",
          "128:     OPT_SECTION(\"Action\"),",
          "129:     {\"encrypt\", OPT_ENCRYPT, '-', \"Encrypt message\"},",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "127:     OPT_CONFIG_OPTION,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "236:     {NULL}",
          "237: };",
          "239: int cms_main(int argc, char **argv)",
          "240: {",
          "241:     ASN1_OBJECT *econtent_type = NULL;",
          "242:     BIO *in = NULL, *out = NULL, *indata = NULL, *rctin = NULL;",
          "243:     CMS_ContentInfo *cms = NULL, *rcms = NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "240: static CMS_ContentInfo *load_content_info(int informat, BIO *in, BIO **indata,",
          "241:                                           const char *name,",
          "242:                                           OPENSSL_CTX *libctx, const char *propq)",
          "243: {",
          "244:     CMS_ContentInfo *ret, *ci;",
          "246:     ret = CMS_ContentInfo_new_with_libctx(libctx, propq);",
          "247:     if (ret == NULL) {",
          "248:         BIO_printf(bio_err, \"Error allocating CMS_contentinfo\\n\");",
          "249:         return NULL;",
          "250:     }",
          "251:     switch (informat) {",
          "252:     case FORMAT_SMIME:",
          "253:         ci = SMIME_read_CMS_ex(in, indata, &ret);",
          "254:         break;",
          "255:     case FORMAT_PEM:",
          "256:         ci = PEM_read_bio_CMS(in, &ret, NULL, NULL);",
          "257:         break;",
          "258:     case FORMAT_ASN1:",
          "259:         ci = d2i_CMS_bio(in, &ret);",
          "260:         break;",
          "261:     default:",
          "262:         BIO_printf(bio_err, \"Bad input format for %s\\n\", name);",
          "263:         goto err;",
          "264:     }",
          "265:     if (ci == NULL) {",
          "266:         BIO_printf(bio_err, \"Error reading %s Content Info\\n\", name);",
          "267:         goto err;",
          "268:     }",
          "269:     return ret;",
          "270: err:",
          "271:     CMS_ContentInfo_free(ret);",
          "272:     return NULL;",
          "273: }",
          "277:     CONF *conf = NULL;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "270:     long ltmp;",
          "271:     const char *mime_eol = \"\\n\";",
          "272:     OPTION_CHOICE o;",
          "274:     if ((vpm = X509_VERIFY_PARAM_new()) == NULL)",
          "275:         return 1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "310:     OPENSSL_CTX *libctx = app_get0_libctx();",
          "311:     const char *propq = app_get0_propq();",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "417:             rr_allorfirst = 1;",
          "418:             break;",
          "419:         case OPT_RCTFORM:",
          "425:                 if (!opt_format(opt_arg(),",
          "426:                                 OPT_FMT_PEMDER | OPT_FMT_SMIME, &rctformat))",
          "427:                     goto opthelp;",
          "428:             break;",
          "429:         case OPT_CERTFILE:",
          "430:             certfile = opt_arg();",
          "",
          "[Removed Lines]",
          "420:             if (rctformat == FORMAT_SMIME)",
          "421:                 rcms = SMIME_read_CMS(rctin, NULL);",
          "422:             else if (rctformat == FORMAT_PEM)",
          "423:                 rcms = PEM_read_bio_CMS(rctin, NULL, NULL, NULL);",
          "424:             else if (rctformat == FORMAT_ASN1)",
          "",
          "[Added Lines]",
          "459:             if (rctformat == FORMAT_ASN1) {",
          "463:             } else {",
          "464:                 rcms = load_content_info(rctformat, rctin, NULL, \"recipient\",",
          "465:                                          libctx, propq);",
          "466:             }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "639:             if (!opt_provider(o))",
          "640:                 goto end;",
          "641:             break;",
          "642:         case OPT_3DES_WRAP:",
          "643: # ifndef OPENSSL_NO_DES",
          "644:             wrap_cipher = EVP_des_ede3_wrap();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "681:         case OPT_CONFIG:",
          "682:             conf = app_load_config_modules(opt_arg());",
          "683:             if (conf == NULL)",
          "684:                 goto end;",
          "685:             break;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "830:         goto end;",
          "832:     if (operation & SMIME_IP) {",
          "846:             goto end;",
          "848:         if (contfile != NULL) {",
          "849:             BIO_free(indata);",
          "850:             if ((indata = BIO_new_file(contfile, \"rb\")) == NULL) {",
          "",
          "[Removed Lines]",
          "833:         if (informat == FORMAT_SMIME) {",
          "834:             cms = SMIME_read_CMS(in, &indata);",
          "835:         } else if (informat == FORMAT_PEM) {",
          "836:             cms = PEM_read_bio_CMS(in, NULL, NULL, NULL);",
          "837:         } else if (informat == FORMAT_ASN1) {",
          "838:             cms = d2i_CMS_bio(in, NULL);",
          "839:         } else {",
          "840:             BIO_printf(bio_err, \"Bad input format for CMS file\\n\");",
          "841:             goto end;",
          "842:         }",
          "844:         if (cms == NULL) {",
          "845:             BIO_printf(bio_err, \"Error reading S/MIME message\\n\");",
          "847:         }",
          "",
          "[Added Lines]",
          "877:         cms = load_content_info(informat, in, &indata, \"SMIME\", libctx, propq);",
          "878:         if (cms == NULL)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "872:             goto end;",
          "873:         }",
          "888:             goto end;",
          "890:     }",
          "892:     out = bio_open_default(outfile, 'w', outformat);",
          "",
          "[Removed Lines]",
          "875:         if (rctformat == FORMAT_SMIME) {",
          "876:             rcms = SMIME_read_CMS(rctin, NULL);",
          "877:         } else if (rctformat == FORMAT_PEM) {",
          "878:             rcms = PEM_read_bio_CMS(rctin, NULL, NULL, NULL);",
          "879:         } else if (rctformat == FORMAT_ASN1) {",
          "880:             rcms = d2i_CMS_bio(rctin, NULL);",
          "881:         } else {",
          "882:             BIO_printf(bio_err, \"Bad input format for receipt\\n\");",
          "883:             goto end;",
          "884:         }",
          "886:         if (rcms == NULL) {",
          "887:             BIO_printf(bio_err, \"Error reading receipt\\n\");",
          "889:         }",
          "",
          "[Added Lines]",
          "907:         rcms = load_content_info(rctformat, rctin, NULL, \"recipient\", libctx,",
          "908:                                  propq);",
          "909:         if (rcms == NULL)",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "905:     ret = 3;",
          "907:     if (operation == SMIME_DATA_CREATE) {",
          "909:     } else if (operation == SMIME_DIGEST_CREATE) {",
          "911:     } else if (operation == SMIME_COMPRESS) {",
          "912:         cms = CMS_compress(in, -1, flags);",
          "913:     } else if (operation == SMIME_ENCRYPT) {",
          "914:         int i;",
          "915:         flags |= CMS_PARTIAL;",
          "917:         if (cms == NULL)",
          "918:             goto end;",
          "919:         for (i = 0; i < sk_X509_num(encerts); i++) {",
          "",
          "[Removed Lines]",
          "908:         cms = CMS_data_create(in, flags);",
          "910:         cms = CMS_digest_create(in, sign_md, flags);",
          "916:         cms = CMS_encrypt(NULL, in, cipher, flags);",
          "",
          "[Added Lines]",
          "929:         cms = CMS_data_create_with_libctx(in, flags, libctx, propq);",
          "931:         cms = CMS_digest_create_with_libctx(in, sign_md, flags, libctx, propq);",
          "937:         cms = CMS_encrypt_with_libctx(NULL, in, cipher, flags, libctx, propq);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "978:                 goto end;",
          "979:         }",
          "980:     } else if (operation == SMIME_ENCRYPTED_ENCRYPT) {",
          "984:     } else if (operation == SMIME_SIGN_RECEIPT) {",
          "985:         CMS_ContentInfo *srcms = NULL;",
          "",
          "[Removed Lines]",
          "981:         cms = CMS_EncryptedData_encrypt(in, cipher,",
          "982:                                         secret_key, secret_keylen, flags);",
          "",
          "[Added Lines]",
          "1002:         cms = CMS_EncryptedData_encrypt_with_libctx(in, cipher, secret_key,",
          "1003:                                                     secret_keylen, flags,",
          "1004:                                                     libctx, propq);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1007:                     flags |= CMS_STREAM;",
          "1008:             }",
          "1009:             flags |= CMS_PARTIAL;",
          "1011:             if (cms == NULL)",
          "1012:                 goto end;",
          "1013:             if (econtent_type != NULL)",
          "1014:                 CMS_set1_eContentType(cms, econtent_type);",
          "1016:             if (rr_to != NULL) {",
          "1018:                 if (rr == NULL) {",
          "1019:                     BIO_puts(bio_err,",
          "1020:                              \"Signed Receipt Request Creation Error\\n\");",
          "",
          "[Removed Lines]",
          "1010:             cms = CMS_sign(NULL, NULL, other, in, flags);",
          "1017:                 rr = make_receipt_request(rr_to, rr_allorfirst, rr_from);",
          "",
          "[Added Lines]",
          "1032:             cms = CMS_sign_with_libctx(NULL, NULL, other, in, flags, libctx, propq);",
          "1039:                 rr = make_receipt_request(rr_to, rr_allorfirst, rr_from, libctx,",
          "1040:                                           propq);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1231:     BIO_free(indata);",
          "1232:     BIO_free_all(out);",
          "1233:     OPENSSL_free(passin);",
          "1234:     return ret;",
          "1235: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1257:     NCONF_free(conf);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1367:     return NULL;",
          "1368: }",
          "1373: {",
          "1374:     STACK_OF(GENERAL_NAMES) *rct_to = NULL, *rct_from = NULL;",
          "1375:     CMS_ReceiptRequest *rr;",
          "",
          "[Removed Lines]",
          "1370: static CMS_ReceiptRequest *make_receipt_request(STACK_OF(OPENSSL_STRING)",
          "",
          "[Added Lines]",
          "1394: static CMS_ReceiptRequest *make_receipt_request(",
          "1395:    STACK_OF(OPENSSL_STRING) *rr_to, int rr_allorfirst,",
          "1396:    STACK_OF(OPENSSL_STRING) *rr_from,",
          "1397:    OPENSSL_CTX *libctx, const char *propq)",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1383:     } else {",
          "1384:         rct_from = NULL;",
          "1385:     }",
          "1388:     return rr;",
          "1389:  err:",
          "1390:     sk_GENERAL_NAMES_pop_free(rct_to, GENERAL_NAMES_free);",
          "",
          "[Removed Lines]",
          "1386:     rr = CMS_ReceiptRequest_create0(NULL, -1, rr_allorfirst, rct_from,",
          "1387:                                     rct_to);",
          "",
          "[Added Lines]",
          "1411:     rr = CMS_ReceiptRequest_create0_with_libctx(NULL, -1, rr_allorfirst,",
          "1412:                                                 rct_from, rct_to, libctx, propq);",
          "",
          "---------------"
        ],
        "crypto/cms/cms_cd.c||crypto/cms/cms_cd.c": [
          "File: crypto/cms/cms_cd.c -> crypto/cms/cms_cd.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: {",
          "26:     CMS_ContentInfo *cms;",
          "27:     CMS_CompressedData *cd;",
          "",
          "[Removed Lines]",
          "24: CMS_ContentInfo *cms_CompressedData_create(int comp_nid)",
          "",
          "[Added Lines]",
          "24: CMS_ContentInfo *cms_CompressedData_create(int comp_nid, OPENSSL_CTX *libctx,",
          "25:                                            const char *propq)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "34:                CMS_R_UNSUPPORTED_COMPRESSION_ALGORITHM);",
          "35:         return NULL;",
          "36:     }",
          "38:     if (cms == NULL)",
          "39:         return NULL;",
          "",
          "[Removed Lines]",
          "37:     cms = CMS_ContentInfo_new();",
          "",
          "[Added Lines]",
          "39:     cms = CMS_ContentInfo_new_with_libctx(libctx, propq);",
          "",
          "---------------"
        ],
        "crypto/cms/cms_dd.c||crypto/cms/cms_dd.c": [
          "File: crypto/cms/cms_dd.c -> crypto/cms/cms_dd.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: {",
          "22:     CMS_ContentInfo *cms;",
          "23:     CMS_DigestedData *dd;",
          "25:     if (cms == NULL)",
          "26:         return NULL;",
          "",
          "[Removed Lines]",
          "20: CMS_ContentInfo *cms_DigestedData_create(const EVP_MD *md)",
          "24:     cms = CMS_ContentInfo_new();",
          "",
          "[Added Lines]",
          "20: CMS_ContentInfo *cms_DigestedData_create(const EVP_MD *md,",
          "21:                                          OPENSSL_CTX *libctx, const char *propq)",
          "26:     cms = CMS_ContentInfo_new_with_libctx(libctx, propq);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "48: BIO *cms_DigestedData_init_bio(const CMS_ContentInfo *cms)",
          "49: {",
          "53: }",
          "55: int cms_DigestedData_do_final(const CMS_ContentInfo *cms, BIO *chain, int verify)",
          "",
          "[Removed Lines]",
          "50:     CMS_DigestedData *dd;",
          "51:     dd = cms->d.digestedData;",
          "52:     return cms_DigestAlgorithm_init_bio(dd->digestAlgorithm);",
          "",
          "[Added Lines]",
          "52:     CMS_DigestedData *dd = cms->d.digestedData;",
          "54:     return cms_DigestAlgorithm_init_bio(dd->digestAlgorithm, cms_get0_cmsctx(cms));",
          "",
          "---------------"
        ],
        "crypto/cms/cms_enc.c||crypto/cms/cms_enc.c": [
          "File: crypto/cms/cms_enc.c -> crypto/cms/cms_enc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: {",
          "25:     BIO *b;",
          "26:     EVP_CIPHER_CTX *ctx;",
          "28:     X509_ALGOR *calg = ec->contentEncryptionAlgorithm;",
          "29:     unsigned char iv[EVP_MAX_IV_LENGTH], *piv = NULL;",
          "30:     unsigned char *tkey = NULL;",
          "31:     int len;",
          "32:     size_t tkeylen = 0;",
          "34:     int ok = 0;",
          "36:     int enc, keep_key = 0;",
          "38:     enc = ec->cipher ? 1 : 0;",
          "",
          "[Removed Lines]",
          "23: BIO *cms_EncryptedContent_init_bio(CMS_EncryptedContentInfo *ec)",
          "27:     const EVP_CIPHER *ciph;",
          "",
          "[Added Lines]",
          "23: BIO *cms_EncryptedContent_init_bio(CMS_EncryptedContentInfo *ec,",
          "24:                                    const CMS_CTX *cms_ctx)",
          "28:     EVP_CIPHER *fetched_ciph = NULL;",
          "29:     const EVP_CIPHER *cipher = NULL;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "46:     BIO_get_cipher_ctx(b, &ctx);",
          "48:     if (enc) {",
          "54:             ec->cipher = NULL;",
          "55:     } else {",
          "59:             CMSerr(CMS_F_CMS_ENCRYPTEDCONTENT_INIT_BIO, CMS_R_UNKNOWN_CIPHER);",
          "60:             goto err;",
          "61:         }",
          "62:     }",
          "65:         CMSerr(CMS_F_CMS_ENCRYPTEDCONTENT_INIT_BIO,",
          "66:                CMS_R_CIPHER_INITIALISATION_ERROR);",
          "67:         goto err;",
          "68:     }",
          "70:     if (enc) {",
          "71:         int ivlen;",
          "",
          "[Removed Lines]",
          "49:         ciph = ec->cipher;",
          "53:         if (ec->key)",
          "56:         ciph = EVP_get_cipherbyobj(calg->algorithm);",
          "58:         if (!ciph) {",
          "64:     if (EVP_CipherInit_ex(ctx, ciph, NULL, NULL, NULL, enc) <= 0) {",
          "",
          "[Added Lines]",
          "49:         cipher = ec->cipher;",
          "53:         if (ec->key != NULL)",
          "56:         cipher = EVP_get_cipherbyobj(calg->algorithm);",
          "57:     }",
          "58:     if (cipher != NULL) {",
          "59:         fetched_ciph = EVP_CIPHER_fetch(cms_ctx->libctx, EVP_CIPHER_name(cipher),",
          "60:                                         cms_ctx->propq);",
          "61:         if (fetched_ciph == NULL) {",
          "66:     if (EVP_CipherInit_ex(ctx, fetched_ciph, NULL, NULL, NULL, enc) <= 0) {",
          "71:     EVP_CIPHER_free(fetched_ciph);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "74:         ivlen = EVP_CIPHER_CTX_iv_length(ctx);",
          "75:         if (ivlen > 0) {",
          "77:                 goto err;",
          "78:             piv = iv;",
          "79:         }",
          "",
          "[Removed Lines]",
          "76:             if (RAND_bytes(iv, ivlen) <= 0)",
          "",
          "[Added Lines]",
          "79:             if (RAND_bytes_ex(cms_ctx->libctx, iv, ivlen) <= 0)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "170: int cms_EncryptedContent_init(CMS_EncryptedContentInfo *ec,",
          "171:                               const EVP_CIPHER *cipher,",
          "173: {",
          "174:     ec->cipher = cipher;",
          "175:     if (key) {",
          "",
          "[Removed Lines]",
          "172:                               const unsigned char *key, size_t keylen)",
          "",
          "[Added Lines]",
          "175:                               const unsigned char *key, size_t keylen,",
          "176:                               const CMS_CTX *cms_ctx)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "180:         memcpy(ec->key, key, keylen);",
          "181:     }",
          "182:     ec->keylen = keylen;",
          "184:         ec->contentType = OBJ_nid2obj(NID_pkcs7_data);",
          "185:     return 1;",
          "186: }",
          "",
          "[Removed Lines]",
          "183:     if (cipher)",
          "",
          "[Added Lines]",
          "187:     if (cipher != NULL)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "206:         return 0;",
          "207:     }",
          "208:     ec = cms->d.encryptedData->encryptedContentInfo;",
          "210: }",
          "212: BIO *cms_EncryptedData_init_bio(const CMS_ContentInfo *cms)",
          "",
          "[Removed Lines]",
          "209:     return cms_EncryptedContent_init(ec, ciph, key, keylen);",
          "",
          "[Added Lines]",
          "214:     return cms_EncryptedContent_init(ec, ciph, key, keylen, cms_get0_cmsctx(cms));",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "214:     CMS_EncryptedData *enc = cms->d.encryptedData;",
          "215:     if (enc->encryptedContentInfo->cipher && enc->unprotectedAttrs)",
          "216:         enc->version = 2;",
          "218: }",
          "",
          "[Removed Lines]",
          "217:     return cms_EncryptedContent_init_bio(enc->encryptedContentInfo);",
          "",
          "[Added Lines]",
          "222:     return cms_EncryptedContent_init_bio(enc->encryptedContentInfo,",
          "223:                                          cms_get0_cmsctx(cms));",
          "",
          "---------------"
        ],
        "crypto/cms/cms_env.c||crypto/cms/cms_env.c": [
          "File: crypto/cms/cms_env.c -> crypto/cms/cms_env.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "14: #include <openssl/err.h>",
          "15: #include <openssl/cms.h>",
          "16: #include <openssl/evp.h>",
          "18: #include \"crypto/asn1.h\"",
          "19: #include \"crypto/evp.h\"",
          "21: DEFINE_STACK_OF(CMS_RecipientInfo)",
          "22: DEFINE_STACK_OF(CMS_RevocationInfoChoice)",
          "",
          "[Removed Lines]",
          "17: #include \"cms_local.h\"",
          "",
          "[Added Lines]",
          "19: #include \"crypto/x509.h\"",
          "20: #include \"cms_local.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "94:     return env->recipientInfos;",
          "95: }",
          "97: int CMS_RecipientInfo_type(CMS_RecipientInfo *ri)",
          "98: {",
          "99:     return ri->type;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "98: void cms_RecipientInfos_set_cmsctx(CMS_ContentInfo *cms)",
          "99: {",
          "100:     int i;",
          "101:     CMS_RecipientInfo *ri;",
          "102:     const CMS_CTX *ctx = cms_get0_cmsctx(cms);",
          "103:     STACK_OF(CMS_RecipientInfo) *rinfos = CMS_get0_RecipientInfos(cms);",
          "105:     for (i = 0; i < sk_CMS_RecipientInfo_num(rinfos); i++) {",
          "106:         ri = sk_CMS_RecipientInfo_value(rinfos, i);",
          "107:         if (ri != NULL) {",
          "108:             switch (ri->type) {",
          "109:             case CMS_RECIPINFO_AGREE:",
          "110:                 ri->d.kari->cms_ctx = ctx;",
          "111:                 break;",
          "112:             case CMS_RECIPINFO_TRANS:",
          "113:                 ri->d.ktri->cms_ctx = ctx;",
          "114:                 x509_set0_libctx(ri->d.ktri->recip, ctx->libctx, ctx->propq);",
          "115:                 break;",
          "116:             case CMS_RECIPINFO_KEK:",
          "117:                 ri->d.kekri->cms_ctx = ctx;",
          "118:                 break;",
          "119:             case CMS_RECIPINFO_PASS:",
          "120:                 ri->d.pwri->cms_ctx = ctx;",
          "121:                 break;",
          "122:             default:",
          "123:                 break;",
          "124:             }",
          "125:         }",
          "126:     }",
          "127: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "108:     return NULL;",
          "109: }",
          "112: {",
          "113:     CMS_ContentInfo *cms;",
          "114:     CMS_EnvelopedData *env;",
          "116:     if (cms == NULL)",
          "117:         goto merr;",
          "118:     env = cms_enveloped_data_init(cms);",
          "119:     if (env == NULL)",
          "120:         goto merr;",
          "123:         goto merr;",
          "124:     return cms;",
          "125:  merr:",
          "126:     CMS_ContentInfo_free(cms);",
          "128:     return NULL;",
          "129: }",
          "131: int cms_EnvelopedData_final(CMS_ContentInfo *cms, BIO *chain)",
          "132: {",
          "133:     CMS_EnvelopedData *env = NULL;",
          "",
          "[Removed Lines]",
          "111: CMS_ContentInfo *CMS_EnvelopedData_create(const EVP_CIPHER *cipher)",
          "115:     cms = CMS_ContentInfo_new();",
          "121:     if (!cms_EncryptedContent_init(env->encryptedContentInfo,",
          "122:                                    cipher, NULL, 0))",
          "127:     CMSerr(CMS_F_CMS_ENVELOPEDDATA_CREATE, ERR_R_MALLOC_FAILURE);",
          "",
          "[Added Lines]",
          "143: CMS_ContentInfo *CMS_EnvelopedData_create_with_libctx(const EVP_CIPHER *cipher,",
          "144:                                                       OPENSSL_CTX *libctx,",
          "145:                                                       const char *propq)",
          "150:     cms = CMS_ContentInfo_new_with_libctx(libctx, propq);",
          "157:     if (!cms_EncryptedContent_init(env->encryptedContentInfo, cipher, NULL, 0,",
          "158:                                    cms_get0_cmsctx(cms)))",
          "163:     CMSerr(0, ERR_R_MALLOC_FAILURE);",
          "167: CMS_ContentInfo *CMS_EnvelopedData_create(const EVP_CIPHER *cipher)",
          "168: {",
          "169:     return CMS_EnvelopedData_create_with_libctx(cipher, NULL, NULL);",
          "170: }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "176: static int cms_RecipientInfo_ktri_init(CMS_RecipientInfo *ri, X509 *recip,",
          "178: {",
          "179:     CMS_KeyTransRecipientInfo *ktri;",
          "180:     int idtype;",
          "",
          "[Removed Lines]",
          "177:                                        EVP_PKEY *pk, unsigned int flags)",
          "",
          "[Added Lines]",
          "218:                                        EVP_PKEY *pk, unsigned int flags,",
          "219:                                        const CMS_CTX *ctx)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "185:     ri->type = CMS_RECIPINFO_TRANS;",
          "187:     ktri = ri->d.ktri;",
          "189:     if (flags & CMS_USE_KEYID) {",
          "190:         ktri->version = 2;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "230:     ktri->cms_ctx = ctx;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "203:         return 0;",
          "205:     X509_up_ref(recip);",
          "",
          "[Removed Lines]",
          "202:     if (!cms_set1_SignerIdentifier(ktri->rid, recip, idtype))",
          "",
          "[Added Lines]",
          "245:     if (!cms_set1_SignerIdentifier(ktri->rid, recip, idtype, ctx))",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "209:     ktri->recip = recip;",
          "211:     if (flags & CMS_KEY_PARAM) {",
          "213:         if (ktri->pctx == NULL)",
          "214:             return 0;",
          "215:         if (EVP_PKEY_encrypt_init(ktri->pctx) <= 0)",
          "",
          "[Removed Lines]",
          "212:         ktri->pctx = EVP_PKEY_CTX_new(ktri->pkey, NULL);",
          "",
          "[Added Lines]",
          "255:         ktri->pctx = EVP_PKEY_CTX_new_from_pkey(ctx->libctx, ktri->pkey,",
          "256:                                                 ctx->propq);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "230:     CMS_RecipientInfo *ri = NULL;",
          "231:     CMS_EnvelopedData *env;",
          "232:     EVP_PKEY *pk = NULL;",
          "233:     env = cms_get0_enveloped(cms);",
          "234:     if (!env)",
          "235:         goto err;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "277:     const CMS_CTX *ctx = cms_get0_cmsctx(cms);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "248:     switch (cms_pkey_get_ri_type(pk)) {",
          "250:     case CMS_RECIPINFO_TRANS:",
          "252:             goto err;",
          "253:         break;",
          "255:     case CMS_RECIPINFO_AGREE:",
          "257:             goto err;",
          "258:         break;",
          "",
          "[Removed Lines]",
          "251:         if (!cms_RecipientInfo_ktri_init(ri, recip, pk, flags))",
          "256:         if (!cms_RecipientInfo_kari_init(ri, recip, pk, originator, originatorPrivKey, flags))",
          "",
          "[Added Lines]",
          "297:         if (!cms_RecipientInfo_ktri_init(ri, recip, pk, flags, ctx))",
          "302:         if (!cms_RecipientInfo_kari_init(ri, recip, pk, originator,",
          "303:                                          originatorPrivKey, flags, ctx))",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "352:     EVP_PKEY_CTX *pctx;",
          "353:     unsigned char *ek = NULL;",
          "354:     size_t eklen;",
          "356:     int ret = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "402:     const CMS_CTX *ctx = cms_get0_cmsctx(cms);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "368:         if (!cms_env_asn1_ctrl(ri, 0))",
          "369:             goto err;",
          "370:     } else {",
          "372:         if (pctx == NULL)",
          "373:             return 0;",
          "",
          "[Removed Lines]",
          "371:         pctx = EVP_PKEY_CTX_new(ktri->pkey, NULL);",
          "",
          "[Added Lines]",
          "419:         pctx = EVP_PKEY_CTX_new_from_pkey(ctx->libctx, ktri->pkey, ctx->propq);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "419:     size_t eklen;",
          "420:     int ret = 0;",
          "421:     size_t fixlen = 0;",
          "422:     CMS_EncryptedContentInfo *ec;",
          "423:     ec = cms->d.envelopedData->encryptedContentInfo;",
          "425:     if (ktri->pkey == NULL) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "469:     EVP_CIPHER *ciph = NULL;",
          "471:     const CMS_CTX *ctx = cms_get0_cmsctx(cms);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "430:     if (cms->d.envelopedData->encryptedContentInfo->havenocert",
          "431:             && !cms->d.envelopedData->encryptedContentInfo->debug) {",
          "432:         X509_ALGOR *calg = ec->contentEncryptionAlgorithm;",
          "435:         if (ciph == NULL) {",
          "436:             CMSerr(CMS_F_CMS_RECIPIENTINFO_KTRI_DECRYPT, CMS_R_UNKNOWN_CIPHER);",
          "437:             return 0;",
          "438:         }",
          "440:         fixlen = EVP_CIPHER_key_length(ciph);",
          "441:     }",
          "444:     if (ktri->pctx == NULL)",
          "447:     if (EVP_PKEY_decrypt_init(ktri->pctx) <= 0)",
          "448:         goto err;",
          "",
          "[Removed Lines]",
          "433:         const EVP_CIPHER *ciph = EVP_get_cipherbyobj(calg->algorithm);",
          "443:     ktri->pctx = EVP_PKEY_CTX_new(pkey, NULL);",
          "445:         return 0;",
          "",
          "[Added Lines]",
          "483:         const char *name = OBJ_nid2sn(OBJ_obj2nid(calg->algorithm));",
          "485:         ciph = EVP_CIPHER_fetch(ctx->libctx, name, ctx->propq);",
          "492:         EVP_CIPHER_free(ciph);",
          "495:     ktri->pctx = EVP_PKEY_CTX_new_from_pkey(ctx->libctx, pkey, ctx->propq);",
          "497:         goto err;",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "679:     return 1;",
          "680: }",
          "683: {",
          "684:     switch(keylen) {",
          "685:     case 16:",
          "688:     case 24:",
          "691:     case 32:",
          "693:     }",
          "696: }",
          "",
          "[Removed Lines]",
          "682: static const EVP_CIPHER *cms_get_key_wrap_cipher(size_t keylen)",
          "686:         return EVP_aes_128_wrap();",
          "689:         return EVP_aes_192_wrap();",
          "692:         return EVP_aes_256_wrap();",
          "695:     return NULL;",
          "",
          "[Added Lines]",
          "733: static EVP_CIPHER *cms_get_key_wrap_cipher(size_t keylen, const CMS_CTX *ctx)",
          "735:     const char *alg = NULL;",
          "739:         alg = \"AES-128-WRAP\";",
          "740:         break;",
          "742:         alg = \"AES-192-WRAP\";",
          "743:         break;",
          "745:         alg = \"AES-256-WRAP\";",
          "746:         break;",
          "747:     default:",
          "748:         return NULL;",
          "750:     return EVP_CIPHER_fetch(ctx->libctx, alg, ctx->propq);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "706:     unsigned char *wkey = NULL;",
          "707:     int wkeylen;",
          "708:     int r = 0;",
          "710:     int outlen = 0;",
          "711:     EVP_CIPHER_CTX *ctx = NULL;",
          "713:     ec = cms->d.envelopedData->encryptedContentInfo;",
          "",
          "[Removed Lines]",
          "709:     const EVP_CIPHER *cipher = NULL;",
          "",
          "[Added Lines]",
          "764:     EVP_CIPHER *cipher = NULL;",
          "767:     const CMS_CTX *cms_ctx = cms_get0_cmsctx(cms);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "719:         return 0;",
          "720:     }",
          "723:     if (cipher == NULL) {",
          "724:         CMSerr(CMS_F_CMS_RECIPIENTINFO_KEKRI_ENCRYPT, CMS_R_INVALID_KEY_LENGTH);",
          "725:         goto err;",
          "",
          "[Removed Lines]",
          "722:     cipher = cms_get_key_wrap_cipher(kekri->keylen);",
          "",
          "[Added Lines]",
          "778:     cipher = cms_get_key_wrap_cipher(kekri->keylen, cms_ctx);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "756:     r = 1;",
          "758:  err:",
          "759:     if (!r)",
          "760:         OPENSSL_free(wkey);",
          "761:     EVP_CIPHER_CTX_free(ctx);",
          "763:     return r;",
          "765: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "815:     EVP_CIPHER_free(cipher);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "774:     unsigned char *ukey = NULL;",
          "775:     int ukeylen;",
          "776:     int r = 0, wrap_nid;",
          "778:     int outlen = 0;",
          "779:     EVP_CIPHER_CTX *ctx = NULL;",
          "781:     ec = cms->d.envelopedData->encryptedContentInfo;",
          "",
          "[Removed Lines]",
          "777:     const EVP_CIPHER *cipher = NULL;",
          "",
          "[Added Lines]",
          "833:     EVP_CIPHER *cipher = NULL;",
          "836:     const CMS_CTX *cms_ctx = cms_get0_cmsctx(cms);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "802:         goto err;",
          "803:     }",
          "806:     if (cipher == NULL) {",
          "807:         CMSerr(CMS_F_CMS_RECIPIENTINFO_KEKRI_DECRYPT, CMS_R_INVALID_KEY_LENGTH);",
          "808:         goto err;",
          "",
          "[Removed Lines]",
          "805:     cipher = cms_get_key_wrap_cipher(kekri->keylen);",
          "",
          "[Added Lines]",
          "862:     cipher = cms_get_key_wrap_cipher(kekri->keylen, cms_ctx);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "836:     r = 1;",
          "838:  err:",
          "839:     if (!r)",
          "840:         OPENSSL_free(ukey);",
          "841:     EVP_CIPHER_CTX_free(ctx);",
          "843:     return r;",
          "845: }",
          "847: int CMS_RecipientInfo_decrypt(CMS_ContentInfo *cms, CMS_RecipientInfo *ri)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "896:     EVP_CIPHER_free(cipher);",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "951: static BIO *cms_EnvelopedData_Decryption_init_bio(CMS_ContentInfo *cms)",
          "952: {",
          "953:     CMS_EncryptedContentInfo *ec = cms->d.envelopedData->encryptedContentInfo;",
          "955:     EVP_CIPHER_CTX *ctx = NULL;",
          "957:     if (contentBio == NULL)",
          "",
          "[Removed Lines]",
          "954:     BIO *contentBio = cms_EncryptedContent_init_bio(ec);",
          "",
          "[Added Lines]",
          "1011:     BIO *contentBio = cms_EncryptedContent_init_bio(ec, cms_get0_cmsctx(cms));",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "988:     ec = cms->d.envelopedData->encryptedContentInfo;",
          "992:     if (!ret)",
          "",
          "[Removed Lines]",
          "989:     ret = cms_EncryptedContent_init_bio(ec);",
          "",
          "[Added Lines]",
          "1046:     ret = cms_EncryptedContent_init_bio(ec, cms_get0_cmsctx(cms));",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1051:     if (pk->ameth != NULL && pk->ameth->pkey_ctrl != NULL) {",
          "1052:         int i, r;",
          "1055:         if (i > 0)",
          "1056:             return r;",
          "1057:     }",
          "",
          "[Removed Lines]",
          "1054:         i = pk->ameth->pkey_ctrl(pk, ASN1_PKEY_CTRL_CMS_IS_RI_TYPE_SUPPORTED, ri_type, &r);",
          "",
          "[Added Lines]",
          "1111:         i = pk->ameth->pkey_ctrl(pk, ASN1_PKEY_CTRL_CMS_IS_RI_TYPE_SUPPORTED,",
          "1112:                                  ri_type, &r);",
          "",
          "---------------"
        ],
        "crypto/cms/cms_ess.c||crypto/cms/cms_ess.c": [
          "File: crypto/cms/cms_ess.c -> crypto/cms/cms_ess.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "15: #include <openssl/err.h>",
          "16: #include <openssl/cms.h>",
          "17: #include <openssl/ess.h>",
          "19: #include \"crypto/ess.h\"",
          "20: #include \"crypto/cms.h\"",
          "22: DEFINE_STACK_OF(GENERAL_NAMES)",
          "23: DEFINE_STACK_OF(CMS_SignerInfo)",
          "",
          "[Removed Lines]",
          "18: #include \"cms_local.h\"",
          "",
          "[Added Lines]",
          "20: #include \"crypto/x509.h\"",
          "21: #include \"cms_local.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "119:     return ret;",
          "120: }",
          "127: {",
          "128:     CMS_ReceiptRequest *rr;",
          "",
          "[Removed Lines]",
          "122: CMS_ReceiptRequest *CMS_ReceiptRequest_create0(unsigned char *id, int idlen,",
          "123:                                                int allorfirst,",
          "124:                                                STACK_OF(GENERAL_NAMES)",
          "",
          "[Added Lines]",
          "123: CMS_ReceiptRequest *CMS_ReceiptRequest_create0_with_libctx(",
          "124:     unsigned char *id, int idlen, int allorfirst,",
          "125:     STACK_OF(GENERAL_NAMES) *receiptList, STACK_OF(GENERAL_NAMES) *receiptsTo,",
          "126:     OPENSSL_CTX *libctx, const char *propq)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "135:     else {",
          "136:         if (!ASN1_STRING_set(rr->signedContentIdentifier, NULL, 32))",
          "137:             goto merr;",
          "139:             goto err;",
          "140:     }",
          "142:     sk_GENERAL_NAMES_pop_free(rr->receiptsTo, GENERAL_NAMES_free);",
          "143:     rr->receiptsTo = receiptsTo;",
          "146:         rr->receiptsFrom->type = 1;",
          "147:         rr->receiptsFrom->d.receiptList = receiptList;",
          "148:     } else {",
          "",
          "[Removed Lines]",
          "138:         if (RAND_bytes(rr->signedContentIdentifier->data, 32) <= 0)",
          "145:     if (receiptList) {",
          "",
          "[Added Lines]",
          "138:         if (RAND_bytes_ex(libctx, rr->signedContentIdentifier->data, 32) <= 0)",
          "145:     if (receiptList != NULL) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "153:     return rr;",
          "155:  merr:",
          "158:  err:",
          "159:     CMS_ReceiptRequest_free(rr);",
          "",
          "[Removed Lines]",
          "156:     CMSerr(CMS_F_CMS_RECEIPTREQUEST_CREATE0, ERR_R_MALLOC_FAILURE);",
          "",
          "[Added Lines]",
          "156:     CMSerr(0, ERR_R_MALLOC_FAILURE);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "162: }",
          "164: int CMS_add1_ReceiptRequest(CMS_SignerInfo *si, CMS_ReceiptRequest *rr)",
          "165: {",
          "166:     unsigned char *rrder = NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "164: CMS_ReceiptRequest *CMS_ReceiptRequest_create0(",
          "165:     unsigned char *id, int idlen, int allorfirst,",
          "166:     STACK_OF(GENERAL_NAMES) *receiptList, STACK_OF(GENERAL_NAMES) *receiptsTo)",
          "167: {",
          "168:     return CMS_ReceiptRequest_create0_with_libctx(id, idlen, allorfirst,",
          "169:                                                   receiptList, receiptsTo,",
          "170:                                                   NULL, NULL);",
          "171: }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "192:                                     STACK_OF(GENERAL_NAMES) **plist,",
          "193:                                     STACK_OF(GENERAL_NAMES) **prto)",
          "194: {",
          "197:     if (rr->receiptsFrom->type == 0) {",
          "202:     } else {",
          "207:     }",
          "210: }",
          "",
          "[Removed Lines]",
          "195:     if (pcid)",
          "198:         if (pallorfirst)",
          "200:         if (plist)",
          "203:         if (pallorfirst)",
          "205:         if (plist)",
          "208:     if (prto)",
          "",
          "[Added Lines]",
          "204:     if (pcid != NULL)",
          "207:         if (pallorfirst != NULL)",
          "209:         if (plist != NULL)",
          "212:         if (pallorfirst != NULL)",
          "214:         if (plist != NULL)",
          "217:     if (prto != NULL)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "214: static int cms_msgSigDigest(CMS_SignerInfo *si,",
          "215:                             unsigned char *dig, unsigned int *diglen)",
          "216: {",
          "220:     if (md == NULL)",
          "221:         return 0;",
          "224:         return 0;",
          "225:     return 1;",
          "226: }",
          "",
          "[Removed Lines]",
          "217:     const EVP_MD *md;",
          "219:     md = EVP_get_digestbyobj(si->digestAlgorithm->algorithm);",
          "222:     if (!ASN1_item_digest(ASN1_ITEM_rptr(CMS_Attributes_Verify), md,",
          "223:                           si->signedAttrs, dig, diglen))",
          "",
          "[Added Lines]",
          "226:     const EVP_MD *md = EVP_get_digestbyobj(si->digestAlgorithm->algorithm);",
          "230:     if (!asn1_item_digest_with_libctx(ASN1_ITEM_rptr(CMS_Attributes_Verify), md,",
          "231:                                       si->signedAttrs, dig, diglen,",
          "232:                                       si->cms_ctx->libctx, si->cms_ctx->propq))",
          "",
          "---------------"
        ],
        "crypto/cms/cms_io.c||crypto/cms/cms_io.c": [
          "File: crypto/cms/cms_io.c -> crypto/cms/cms_io.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "36: CMS_ContentInfo *d2i_CMS_bio(BIO *bp, CMS_ContentInfo **cms)",
          "37: {",
          "39: }",
          "41: int i2d_CMS_bio(BIO *bp, CMS_ContentInfo *cms)",
          "",
          "[Removed Lines]",
          "38:     return ASN1_item_d2i_bio(ASN1_ITEM_rptr(CMS_ContentInfo), bp, cms);",
          "",
          "[Added Lines]",
          "38:     CMS_ContentInfo *ci;",
          "40:     ci = ASN1_item_d2i_bio(ASN1_ITEM_rptr(CMS_ContentInfo), bp, cms);",
          "41:     if (ci != NULL && cms != NULL)",
          "42:         cms_resolve_libctx(ci);",
          "43:     return ci;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "71:     STACK_OF(X509_ALGOR) *mdalgs;",
          "72:     int ctype_nid = OBJ_obj2nid(cms->contentType);",
          "73:     int econt_nid = OBJ_obj2nid(CMS_get0_eContentType(cms));",
          "74:     if (ctype_nid == NID_pkcs7_signed)",
          "75:         mdalgs = cms->d.signedData->digestAlgorithms;",
          "76:     else",
          "77:         mdalgs = NULL;",
          "82: }",
          "84: CMS_ContentInfo *SMIME_read_CMS(BIO *bio, BIO **bcont)",
          "85: {",
          "89: }",
          "",
          "[Removed Lines]",
          "79:     return SMIME_write_ASN1(bio, (ASN1_VALUE *)cms, data, flags,",
          "80:                             ctype_nid, econt_nid, mdalgs,",
          "81:                             ASN1_ITEM_rptr(CMS_ContentInfo));",
          "86:     return (CMS_ContentInfo *)SMIME_read_ASN1(bio, bcont,",
          "87:                                               ASN1_ITEM_rptr",
          "88:                                               (CMS_ContentInfo));",
          "",
          "[Added Lines]",
          "79:     const CMS_CTX *ctx = cms_get0_cmsctx(cms);",
          "86:     return SMIME_write_ASN1_with_libctx(bio, (ASN1_VALUE *)cms, data, flags,",
          "87:                                         ctype_nid, econt_nid, mdalgs,",
          "88:                                         ASN1_ITEM_rptr(CMS_ContentInfo),",
          "89:                                         cms_ctx_get0_libctx(ctx),",
          "90:                                         cms_ctx_get0_propq(ctx));",
          "91: }",
          "93: CMS_ContentInfo *SMIME_read_CMS_ex(BIO *bio, BIO **bcont, CMS_ContentInfo **cms)",
          "94: {",
          "95:     CMS_ContentInfo *ci;",
          "97:     ci = (CMS_ContentInfo *)SMIME_read_ASN1_ex(bio, bcont,",
          "98:                                                ASN1_ITEM_rptr(CMS_ContentInfo),",
          "99:                                                (ASN1_VALUE **)cms);",
          "100:     if (ci != NULL && cms != NULL)",
          "101:         cms_resolve_libctx(ci);",
          "102:     return ci;",
          "107:     return SMIME_read_CMS_ex(bio, bcont, NULL);",
          "",
          "---------------"
        ],
        "crypto/cms/cms_kari.c||crypto/cms/cms_kari.c": [
          "File: crypto/cms/cms_kari.c -> crypto/cms/cms_kari.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "170:     if (pk == NULL)",
          "171:         return 1;",
          "174:     if (pctx == NULL || EVP_PKEY_derive_init(pctx) <= 0)",
          "175:         goto err;",
          "",
          "[Removed Lines]",
          "173:     pctx = EVP_PKEY_CTX_new(pk, NULL);",
          "",
          "[Added Lines]",
          "177:     pctx = EVP_PKEY_CTX_new_from_pkey(kari->cms_ctx->libctx, pk,",
          "178:                                       kari->cms_ctx->propq);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "303:     EVP_PKEY_CTX *pctx = NULL;",
          "304:     EVP_PKEY *ekey = NULL;",
          "305:     int rv = 0;",
          "308:     if (pctx == NULL)",
          "309:         goto err;",
          "310:     if (EVP_PKEY_keygen_init(pctx) <= 0)",
          "",
          "[Removed Lines]",
          "307:     pctx = EVP_PKEY_CTX_new(pk, NULL);",
          "",
          "[Added Lines]",
          "312:     const CMS_CTX *ctx = kari->cms_ctx;",
          "314:     pctx = EVP_PKEY_CTX_new_from_pkey(ctx->libctx, pk, ctx->propq);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "312:     if (EVP_PKEY_keygen(pctx, &ekey) <= 0)",
          "313:         goto err;",
          "314:     EVP_PKEY_CTX_free(pctx);",
          "316:     if (pctx == NULL)",
          "317:         goto err;",
          "318:     if (EVP_PKEY_derive_init(pctx) <= 0)",
          "",
          "[Removed Lines]",
          "315:     pctx = EVP_PKEY_CTX_new(ekey, NULL);",
          "",
          "[Added Lines]",
          "322:     pctx = EVP_PKEY_CTX_new_from_pkey(ctx->libctx, ekey, ctx->propq);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "327: }",
          "331: {",
          "332:     EVP_PKEY_CTX *pctx = NULL;",
          "333:     int rv = 0;",
          "336:     if (pctx == NULL)",
          "337:         goto err;",
          "338:     if (EVP_PKEY_derive_init(pctx) <= 0)",
          "",
          "[Removed Lines]",
          "330: static int cms_kari_set_originator_private_key(CMS_KeyAgreeRecipientInfo *kari, EVP_PKEY *originatorPrivKey )",
          "335:     pctx = EVP_PKEY_CTX_new(originatorPrivKey, NULL);",
          "",
          "[Added Lines]",
          "337: static int cms_kari_set_originator_private_key(CMS_KeyAgreeRecipientInfo *kari,",
          "338:                                                EVP_PKEY *originatorPrivKey )",
          "342:     const CMS_CTX *ctx = kari->cms_ctx;",
          "344:     pctx = EVP_PKEY_CTX_new_from_pkey(ctx->libctx, originatorPrivKey, ctx->propq);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "352: {",
          "353:     CMS_KeyAgreeRecipientInfo *kari;",
          "354:     CMS_RecipientEncryptedKey *rek = NULL;",
          "356:     ri->d.kari = M_ASN1_new_of(CMS_KeyAgreeRecipientInfo);",
          "358:         return 0;",
          "359:     ri->type = CMS_RECIPINFO_AGREE;",
          "361:     kari = ri->d.kari;",
          "362:     kari->version = 3;",
          "364:     rek = M_ASN1_new_of(CMS_RecipientEncryptedKey);",
          "365:     if (rek == NULL)",
          "",
          "[Removed Lines]",
          "351: int cms_RecipientInfo_kari_init(CMS_RecipientInfo *ri,  X509 *recip, EVP_PKEY *recipPubKey, X509 * originator, EVP_PKEY *originatorPrivKey, unsigned int flags)",
          "357:     if (!ri->d.kari)",
          "",
          "[Added Lines]",
          "360: int cms_RecipientInfo_kari_init(CMS_RecipientInfo *ri,  X509 *recip,",
          "361:                                 EVP_PKEY *recipPubKey, X509 *originator,",
          "362:                                 EVP_PKEY *originatorPrivKey, unsigned int flags,",
          "363:                                 const CMS_CTX *ctx)",
          "369:     if (ri->d.kari == NULL)",
          "375:     kari->cms_ctx = ctx;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "419: static int cms_wrap_init(CMS_KeyAgreeRecipientInfo *kari,",
          "420:                          const EVP_CIPHER *cipher)",
          "421: {",
          "422:     EVP_CIPHER_CTX *ctx = kari->ctx;",
          "423:     const EVP_CIPHER *kekcipher;",
          "424:     int keylen;",
          "425:     int ret;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "435:     const CMS_CTX *cms_ctx = kari->cms_ctx;",
          "438:     EVP_CIPHER *fetched_kekcipher;",
          "439:     const char *kekcipher_name;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "444:         if (kekcipher != NULL) {",
          "445:              if (EVP_CIPHER_mode(kekcipher) != EVP_CIPH_WRAP_MODE)",
          "446:                  return 0;",
          "449:         }",
          "450:     }",
          "",
          "[Removed Lines]",
          "448:              return EVP_EncryptInit_ex(ctx, kekcipher, NULL, NULL, NULL);",
          "",
          "[Added Lines]",
          "463:              kekcipher_name = EVP_CIPHER_name(kekcipher);",
          "464:              goto enc;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "456: #ifndef OPENSSL_NO_DES",
          "457:     if (EVP_CIPHER_type(cipher) == NID_des_ede3_cbc)",
          "459:     else",
          "460: #endif",
          "461:     if (keylen <= 16)",
          "463:     else if (keylen <= 24)",
          "465:     else",
          "468: }",
          "",
          "[Removed Lines]",
          "458:         kekcipher = EVP_des_ede3_wrap();",
          "462:         kekcipher = EVP_aes_128_wrap();",
          "464:         kekcipher = EVP_aes_192_wrap();",
          "466:         kekcipher = EVP_aes_256_wrap();",
          "467:     return EVP_EncryptInit_ex(ctx, kekcipher, NULL, NULL, NULL);",
          "",
          "[Added Lines]",
          "474:         kekcipher_name = SN_id_smime_alg_CMS3DESwrap;",
          "478:         kekcipher_name = SN_id_aes128_wrap;",
          "480:         kekcipher_name = SN_id_aes192_wrap;",
          "482:         kekcipher_name = SN_id_aes256_wrap;",
          "483: enc:",
          "484:     fetched_kekcipher = EVP_CIPHER_fetch(cms_ctx->libctx, kekcipher_name,",
          "485:                                          cms_ctx->propq);",
          "486:     if (fetched_kekcipher == NULL)",
          "487:         return 0;",
          "488:     ret = EVP_EncryptInit_ex(ctx, fetched_kekcipher, NULL, NULL, NULL);",
          "489:     EVP_CIPHER_free(fetched_kekcipher);",
          "490:     return ret;",
          "",
          "---------------"
        ],
        "crypto/cms/cms_lib.c||crypto/cms/cms_lib.c": [
          "File: crypto/cms/cms_lib.c -> crypto/cms/cms_lib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "14: #include <openssl/bio.h>",
          "15: #include <openssl/asn1.h>",
          "16: #include <openssl/cms.h>",
          "17: #include \"cms_local.h\"",
          "19: DEFINE_STACK_OF(CMS_RevocationInfoChoice)",
          "20: DEFINE_STACK_OF(X509)",
          "21: DEFINE_STACK_OF(X509_CRL)",
          "24: IMPLEMENT_ASN1_PRINT_FUNCTION(CMS_ContentInfo)",
          "26: const ASN1_OBJECT *CMS_get0_type(const CMS_ContentInfo *cms)",
          "27: {",
          "28:     return cms->contentType;",
          "29: }",
          "32: {",
          "35:     if (cms != NULL) {",
          "36:         cms->contentType = OBJ_nid2obj(NID_pkcs7_data);",
          "",
          "[Removed Lines]",
          "23: IMPLEMENT_ASN1_FUNCTIONS(CMS_ContentInfo)",
          "31: CMS_ContentInfo *cms_Data_create(void)",
          "33:     CMS_ContentInfo *cms;",
          "34:     cms = CMS_ContentInfo_new();",
          "",
          "[Added Lines]",
          "17: #include <openssl/cms.h>",
          "18: #include \"crypto/x509.h\"",
          "21: static STACK_OF(CMS_CertificateChoices)",
          "30: CMS_ContentInfo *d2i_CMS_ContentInfo(CMS_ContentInfo **a,",
          "31:                                      const unsigned char **in, long len)",
          "32: {",
          "33:     CMS_ContentInfo *ci;",
          "35:     ci = (CMS_ContentInfo *)ASN1_item_d2i((ASN1_VALUE **)a, in, len,",
          "36:                                           (CMS_ContentInfo_it()));",
          "37:     if (ci != NULL && a != NULL)",
          "38:         cms_resolve_libctx(ci);",
          "39:     return ci;",
          "40: }",
          "42: int i2d_CMS_ContentInfo(const CMS_ContentInfo *a, unsigned char **out)",
          "43: {",
          "44:     return ASN1_item_i2d((const ASN1_VALUE *)a, out, (CMS_ContentInfo_it()));",
          "45: }",
          "47: CMS_ContentInfo *CMS_ContentInfo_new_with_libctx(OPENSSL_CTX *libctx,",
          "48:                                                  const char *propq)",
          "49: {",
          "50:     CMS_ContentInfo *ci;",
          "52:     ci = (CMS_ContentInfo *)ASN1_item_new(ASN1_ITEM_rptr(CMS_ContentInfo));",
          "53:     if (ci != NULL) {",
          "54:         ci->ctx.libctx = libctx;",
          "55:         ci->ctx.propq = NULL;",
          "56:         if (propq != NULL) {",
          "57:             ci->ctx.propq = OPENSSL_strdup(propq);",
          "58:             if (ci->ctx.propq == NULL) {",
          "59:                 CMS_ContentInfo_free(ci);",
          "60:                 ci = NULL;",
          "61:                 ERR_raise(ERR_LIB_PROV, ERR_R_MALLOC_FAILURE);",
          "62:             }",
          "63:         }",
          "64:     }",
          "65:     return ci;",
          "66: }",
          "68: CMS_ContentInfo *CMS_ContentInfo_new(void)",
          "69: {",
          "70:     return CMS_ContentInfo_new_with_libctx(NULL, NULL);",
          "71: }",
          "73: void CMS_ContentInfo_free(CMS_ContentInfo *cms)",
          "74: {",
          "75:     if (cms != NULL) {",
          "76:         OPENSSL_free(cms->ctx.propq);",
          "77:         ASN1_item_free((ASN1_VALUE *)cms, ASN1_ITEM_rptr(CMS_ContentInfo));",
          "78:     }",
          "79: }",
          "81: const CMS_CTX *cms_get0_cmsctx(const CMS_ContentInfo *cms)",
          "82: {",
          "83:     return cms != NULL ? &cms->ctx : NULL;",
          "84: }",
          "86: OPENSSL_CTX *cms_ctx_get0_libctx(const CMS_CTX *ctx)",
          "87: {",
          "88:     return ctx->libctx;",
          "89: }",
          "91: const char *cms_ctx_get0_propq(const CMS_CTX *ctx)",
          "92: {",
          "93:     return ctx->propq;",
          "94: }",
          "96: void cms_resolve_libctx(CMS_ContentInfo *ci)",
          "97: {",
          "98:     int i;",
          "99:     CMS_CertificateChoices *cch;",
          "100:     STACK_OF(CMS_CertificateChoices) **pcerts;",
          "101:     const CMS_CTX *ctx;",
          "103:     if (ci == NULL)",
          "104:         return;",
          "106:     ctx = cms_get0_cmsctx(ci);",
          "107:     cms_SignerInfos_set_cmsctx(ci);",
          "108:     cms_RecipientInfos_set_cmsctx(ci);",
          "110:     pcerts = cms_get0_certificate_choices(ci);",
          "111:     if (pcerts != NULL) {",
          "112:         for (i = 0; i < sk_CMS_CertificateChoices_num(*pcerts); i++) {",
          "113:             cch = sk_CMS_CertificateChoices_value(*pcerts, i);",
          "114:             if (cch->type == CMS_CERTCHOICE_CERT)",
          "115:                 x509_set0_libctx(cch->d.certificate, ctx->libctx, ctx->propq);",
          "116:         }",
          "117:     }",
          "118: }",
          "125: CMS_ContentInfo *cms_Data_create(OPENSSL_CTX *libctx, const char *propq)",
          "127:     CMS_ContentInfo *cms = CMS_ContentInfo_new_with_libctx(libctx, propq);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "299: {",
          "300:     BIO *mdbio = NULL;",
          "301:     const ASN1_OBJECT *digestoid;",
          "303:     X509_ALGOR_get0(&digestoid, NULL, NULL, digestAlgorithm);",
          "306:         CMSerr(CMS_F_CMS_DIGESTALGORITHM_INIT_BIO,",
          "307:                CMS_R_UNKNOWN_DIGEST_ALGORITHM);",
          "308:         goto err;",
          "",
          "[Removed Lines]",
          "298: BIO *cms_DigestAlgorithm_init_bio(X509_ALGOR *digestAlgorithm)",
          "302:     const EVP_MD *digest;",
          "304:     digest = EVP_get_digestbyobj(digestoid);",
          "305:     if (!digest) {",
          "",
          "[Added Lines]",
          "392: BIO *cms_DigestAlgorithm_init_bio(X509_ALGOR *digestAlgorithm,",
          "393:                                   const CMS_CTX *ctx)",
          "397:     EVP_MD *digest = NULL;",
          "398:     const char *alg;",
          "401:     alg = OBJ_nid2sn(OBJ_obj2nid(digestoid));",
          "402:     digest = EVP_MD_fetch(ctx->libctx, alg, ctx->propq);",
          "403:     if (digest == NULL) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "312:         CMSerr(CMS_F_CMS_DIGESTALGORITHM_INIT_BIO, CMS_R_MD_BIO_INIT_ERROR);",
          "313:         goto err;",
          "314:     }",
          "315:     return mdbio;",
          "316:  err:",
          "317:     BIO_free(mdbio);",
          "318:     return NULL;",
          "319: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "413:     EVP_MD_free(digest);",
          "416:     EVP_MD_free(digest);",
          "",
          "---------------"
        ],
        "crypto/cms/cms_local.h||crypto/cms/cms_local.h": [
          "File: crypto/cms/cms_local.h -> crypto/cms/cms_local.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "43: typedef struct CMS_PasswordRecipientInfo_st CMS_PasswordRecipientInfo;",
          "44: typedef struct CMS_OtherRecipientInfo_st CMS_OtherRecipientInfo;",
          "45: typedef struct CMS_ReceiptsFrom_st CMS_ReceiptsFrom;",
          "47: struct CMS_ContentInfo_st {",
          "48:     ASN1_OBJECT *contentType;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "46: typedef struct CMS_CTX_st CMS_CTX;",
          "48: struct CMS_CTX_st {",
          "49:     OPENSSL_CTX *libctx;",
          "50:     char *propq;",
          "51: };",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "59:         void *otherData;",
          "60:     } d;",
          "61: };",
          "63: DEFINE_STACK_OF(CMS_CertificateChoices)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "67:     CMS_CTX ctx;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "93:     EVP_MD_CTX *mctx;",
          "94:     EVP_PKEY_CTX *pctx;",
          "95: };",
          "97: struct CMS_SignerIdentifier_st {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "102:     const CMS_CTX *cms_ctx;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "152:     EVP_PKEY *pkey;",
          "154:     EVP_PKEY_CTX *pctx;",
          "155: };",
          "157: struct CMS_KeyAgreeRecipientInfo_st {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "163:     const CMS_CTX *cms_ctx;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "164:     EVP_PKEY_CTX *pctx;",
          "166:     EVP_CIPHER_CTX *ctx;",
          "167: };",
          "169: struct CMS_OriginatorIdentifierOrKey_st {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "176:     const CMS_CTX *cms_ctx;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "210:     unsigned char *key;",
          "211:     size_t keylen;",
          "212: };",
          "214: struct CMS_KEKIdentifier_st {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "222:     const CMS_CTX *cms_ctx;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "226:     unsigned char *pass;",
          "227:     size_t passlen;",
          "228: };",
          "230: struct CMS_OtherRecipientInfo_st {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "239:     const CMS_CTX *cms_ctx;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "363: # define CMS_OIK_PUBKEY                  2",
          "365: BIO *cms_content_bio(CMS_ContentInfo *cms);",
          "370: BIO *cms_DigestedData_init_bio(const CMS_ContentInfo *cms);",
          "371: int cms_DigestedData_do_final(const CMS_ContentInfo *cms, BIO *chain, int verify);",
          "373: BIO *cms_SignedData_init_bio(CMS_ContentInfo *cms);",
          "374: int cms_SignedData_final(CMS_ContentInfo *cms, BIO *chain);",
          "375: int cms_set1_SignerIdentifier(CMS_SignerIdentifier *sid, X509 *cert,",
          "377: int cms_SignerIdentifier_get0_signer_id(CMS_SignerIdentifier *sid,",
          "378:                                         ASN1_OCTET_STRING **keyid,",
          "379:                                         X509_NAME **issuer,",
          "380:                                         ASN1_INTEGER **sno);",
          "381: int cms_SignerIdentifier_cert_cmp(CMS_SignerIdentifier *sid, X509 *cert);",
          "384: BIO *cms_CompressedData_init_bio(const CMS_ContentInfo *cms);",
          "387: int cms_DigestAlgorithm_find_ctx(EVP_MD_CTX *mctx, BIO *chain,",
          "388:                                  X509_ALGOR *mdalg);",
          "",
          "[Removed Lines]",
          "367: CMS_ContentInfo *cms_Data_create(void);",
          "369: CMS_ContentInfo *cms_DigestedData_create(const EVP_MD *md);",
          "376:                               int type);",
          "383: CMS_ContentInfo *cms_CompressedData_create(int comp_nid);",
          "386: BIO *cms_DigestAlgorithm_init_bio(X509_ALGOR *digestAlgorithm);",
          "",
          "[Added Lines]",
          "378: const CMS_CTX *cms_get0_cmsctx(const CMS_ContentInfo *cms);",
          "379: OPENSSL_CTX *cms_ctx_get0_libctx(const CMS_CTX *ctx);",
          "380: const char *cms_ctx_get0_propq(const CMS_CTX *ctx);",
          "381: void cms_resolve_libctx(CMS_ContentInfo *ci);",
          "383: CMS_ContentInfo *cms_Data_create(OPENSSL_CTX *ctx, const char *propq);",
          "385: CMS_ContentInfo *cms_DigestedData_create(const EVP_MD *md,",
          "386:                                          OPENSSL_CTX *libctx, const char *propq);",
          "393:                               int type, const CMS_CTX *ctx);",
          "400: CMS_ContentInfo *cms_CompressedData_create(int comp_nid, OPENSSL_CTX *libctx,",
          "401:                                            const char *propq);",
          "404: BIO *cms_DigestAlgorithm_init_bio(X509_ALGOR *digestAlgorithm,",
          "405:                                   const CMS_CTX *ctx);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "392: int cms_set1_ias(CMS_IssuerAndSerialNumber **pias, X509 *cert);",
          "393: int cms_set1_keyid(ASN1_OCTET_STRING **pkeyid, X509 *cert);",
          "396: BIO *cms_EncryptedData_init_bio(const CMS_ContentInfo *cms);",
          "397: int cms_EncryptedContent_init(CMS_EncryptedContentInfo *ec,",
          "398:                               const EVP_CIPHER *cipher,",
          "401: int cms_Receipt_verify(CMS_ContentInfo *cms, CMS_ContentInfo *req_cms);",
          "402: int cms_msgSigDigest_add1(CMS_SignerInfo *dest, CMS_SignerInfo *src);",
          "",
          "[Removed Lines]",
          "395: BIO *cms_EncryptedContent_init_bio(CMS_EncryptedContentInfo *ec);",
          "399:                               const unsigned char *key, size_t keylen);",
          "",
          "[Added Lines]",
          "414: BIO *cms_EncryptedContent_init_bio(CMS_EncryptedContentInfo *ec,",
          "415:                                    const CMS_CTX *ctx);",
          "419:                               const unsigned char *key, size_t keylen,",
          "420:                               const CMS_CTX *ctx);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "405: BIO *cms_EnvelopedData_init_bio(CMS_ContentInfo *cms);",
          "406: int cms_EnvelopedData_final(CMS_ContentInfo *cms, BIO *chain);",
          "407: CMS_EnvelopedData *cms_get0_enveloped(CMS_ContentInfo *cms);",
          "408: int cms_env_asn1_ctrl(CMS_RecipientInfo *ri, int cmd);",
          "409: int cms_pkey_get_ri_type(EVP_PKEY *pk);",
          "410: int cms_pkey_is_ri_type_supported(EVP_PKEY *pk, int ri_type);",
          "412: int cms_RecipientInfo_kari_init(CMS_RecipientInfo *ri, X509 *recip,",
          "413:                                 EVP_PKEY *recipPubKey, X509 *originator,",
          "415: int cms_RecipientInfo_kari_encrypt(const CMS_ContentInfo *cms,",
          "416:                                    CMS_RecipientInfo *ri);",
          "422: int CMS_si_check_attributes(const CMS_SignerInfo *si);",
          "425: int ess_check_signing_certs(CMS_SignerInfo *si, STACK_OF(X509) *chain);",
          "",
          "[Removed Lines]",
          "414:                                 EVP_PKEY *originatorPrivKey, unsigned int flags);",
          "419: int cms_RecipientInfo_pwri_crypt(const CMS_ContentInfo *cms, CMS_RecipientInfo *ri,",
          "420:                                  int en_de);",
          "",
          "[Added Lines]",
          "435: void cms_RecipientInfos_set_cmsctx(CMS_ContentInfo *cms);",
          "440:                                 EVP_PKEY *originatorPrivKey, unsigned int flags,",
          "441:                                 const CMS_CTX *ctx);",
          "446: int cms_RecipientInfo_pwri_crypt(const CMS_ContentInfo *cms,",
          "447:                                  CMS_RecipientInfo *ri, int en_de);",
          "450: void cms_SignerInfos_set_cmsctx(CMS_ContentInfo *cms);",
          "",
          "---------------"
        ],
        "crypto/cms/cms_pwri.c||crypto/cms/cms_pwri.c": [
          "File: crypto/cms/cms_pwri.c -> crypto/cms/cms_pwri.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "51:     X509_ALGOR *encalg = NULL;",
          "52:     unsigned char iv[EVP_MAX_IV_LENGTH];",
          "53:     int ivlen;",
          "55:     env = cms_get0_enveloped(cms);",
          "56:     if (!env)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "54:     const CMS_CTX *cms_ctx = cms_get0_cmsctx(cms);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "91:     ivlen = EVP_CIPHER_CTX_iv_length(ctx);",
          "93:     if (ivlen > 0) {",
          "95:             goto err;",
          "96:         if (EVP_EncryptInit_ex(ctx, NULL, NULL, NULL, iv) <= 0) {",
          "97:             CMSerr(CMS_F_CMS_ADD0_RECIPIENT_PASSWORD, ERR_R_EVP_LIB);",
          "",
          "[Removed Lines]",
          "94:         if (RAND_bytes(iv, ivlen) <= 0)",
          "",
          "[Added Lines]",
          "95:         if (RAND_bytes_ex(cms_ctx->libctx, iv, ivlen) <= 0)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "125:     ri->type = CMS_RECIPINFO_PASS;",
          "127:     pwri = ri->d.pwri;",
          "129:     X509_ALGOR_free(pwri->keyEncryptionAlgorithm);",
          "130:     pwri->keyEncryptionAlgorithm = X509_ALGOR_new();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "129:     pwri->cms_ctx = cms_ctx;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "233: static int kek_wrap_key(unsigned char *out, size_t *outlen,",
          "234:                         const unsigned char *in, size_t inlen,",
          "236: {",
          "237:     size_t blocklen = EVP_CIPHER_CTX_block_size(ctx);",
          "238:     size_t olen;",
          "",
          "[Removed Lines]",
          "235:                         EVP_CIPHER_CTX *ctx)",
          "",
          "[Added Lines]",
          "237:                         EVP_CIPHER_CTX *ctx, const CMS_CTX *cms_ctx)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "260:         memcpy(out + 4, in, inlen);",
          "262:         if (olen > inlen + 4",
          "264:             return 0;",
          "266:         if (!EVP_EncryptUpdate(ctx, out, &dummy, out, olen)",
          "",
          "[Removed Lines]",
          "263:             && RAND_bytes(out + 4 + inlen, olen - 4 - inlen) <= 0)",
          "",
          "[Added Lines]",
          "265:             && RAND_bytes_ex(cms_ctx->libctx, out + 4 + inlen,",
          "266:                              olen - 4 - inlen) <= 0)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "280: {",
          "281:     CMS_EncryptedContentInfo *ec;",
          "282:     CMS_PasswordRecipientInfo *pwri;",
          "283:     int r = 0;",
          "284:     X509_ALGOR *algtmp, *kekalg = NULL;",
          "285:     EVP_CIPHER_CTX *kekctx = NULL;",
          "287:     unsigned char *key = NULL;",
          "288:     size_t keylen;",
          "290:     ec = cms->d.envelopedData->encryptedContentInfo;",
          "",
          "[Removed Lines]",
          "278: int cms_RecipientInfo_pwri_crypt(const CMS_ContentInfo *cms, CMS_RecipientInfo *ri,",
          "279:                                  int en_de)",
          "286:     const EVP_CIPHER *kekcipher;",
          "",
          "[Added Lines]",
          "281: int cms_RecipientInfo_pwri_crypt(const CMS_ContentInfo *cms,",
          "282:                                  CMS_RecipientInfo *ri, int en_de)",
          "289:     const char *name;",
          "290:     EVP_CIPHER *kekcipher;",
          "293:     const CMS_CTX *cms_ctx = cms_get0_cmsctx(cms);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "312:         return 0;",
          "313:     }",
          "318:         CMSerr(CMS_F_CMS_RECIPIENTINFO_PWRI_CRYPT, CMS_R_UNKNOWN_CIPHER);",
          "320:     }",
          "322:     kekctx = EVP_CIPHER_CTX_new();",
          "323:     if (kekctx == NULL) {",
          "324:         CMSerr(CMS_F_CMS_RECIPIENTINFO_PWRI_CRYPT, ERR_R_MALLOC_FAILURE);",
          "326:     }",
          "328:     if (!EVP_CipherInit_ex(kekctx, kekcipher, NULL, NULL, NULL, en_de))",
          "",
          "[Removed Lines]",
          "315:     kekcipher = EVP_get_cipherbyobj(kekalg->algorithm);",
          "317:     if (!kekcipher) {",
          "319:         return 0;",
          "325:         return 0;",
          "",
          "[Added Lines]",
          "320:     name = OBJ_nid2sn(OBJ_obj2nid(kekalg->algorithm));",
          "321:     kekcipher = EVP_CIPHER_fetch(cms_ctx->libctx, name, cms_ctx->propq);",
          "323:     if (kekcipher == NULL) {",
          "325:         goto err;",
          "331:         goto err;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "350:     if (en_de) {",
          "353:             goto err;",
          "355:         key = OPENSSL_malloc(keylen);",
          "",
          "[Removed Lines]",
          "352:         if (!kek_wrap_key(NULL, &keylen, ec->key, ec->keylen, kekctx))",
          "",
          "[Added Lines]",
          "358:         if (!kek_wrap_key(NULL, &keylen, ec->key, ec->keylen, kekctx, cms_ctx))",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "357:         if (key == NULL)",
          "358:             goto err;",
          "361:             goto err;",
          "362:         pwri->encryptedKey->data = key;",
          "363:         pwri->encryptedKey->length = keylen;",
          "",
          "[Removed Lines]",
          "360:         if (!kek_wrap_key(key, &keylen, ec->key, ec->keylen, kekctx))",
          "",
          "[Added Lines]",
          "366:         if (!kek_wrap_key(key, &keylen, ec->key, ec->keylen, kekctx, cms_ctx))",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "384:     r = 1;",
          "386:  err:",
          "388:     EVP_CIPHER_CTX_free(kekctx);",
          "390:     if (!r)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "393:     EVP_CIPHER_free(kekcipher);",
          "",
          "---------------"
        ],
        "crypto/cms/cms_sd.c||crypto/cms/cms_sd.c": [
          "File: crypto/cms/cms_sd.c -> crypto/cms/cms_sd.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "178:     return 0;",
          "179: }",
          "182: {",
          "183:     switch (type) {",
          "184:     case CMS_SIGNERINFO_ISSUER_SERIAL:",
          "",
          "[Removed Lines]",
          "181: int cms_set1_SignerIdentifier(CMS_SignerIdentifier *sid, X509 *cert, int type)",
          "",
          "[Added Lines]",
          "184: int cms_set1_SignerIdentifier(CMS_SignerIdentifier *sid, X509 *cert, int type,",
          "185:                               const CMS_CTX *ctx)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "255:     CMS_SignerInfo *si = NULL;",
          "256:     X509_ALGOR *alg;",
          "257:     int i, type;",
          "258:     if (!X509_check_private_key(signer, pk)) {",
          "259:         CMSerr(CMS_F_CMS_ADD1_SIGNER,",
          "260:                CMS_R_PRIVATE_KEY_DOES_NOT_MATCH_CERTIFICATE);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "263:     const CMS_CTX *ctx = cms_get0_cmsctx(cms);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "272:     X509_up_ref(signer);",
          "273:     EVP_PKEY_up_ref(pk);",
          "275:     si->pkey = pk;",
          "276:     si->signer = signer;",
          "277:     si->mctx = EVP_MD_CTX_new();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "282:     si->cms_ctx = ctx;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "292:         si->version = 1;",
          "293:     }",
          "296:         goto err;",
          "298:     if (md == NULL) {",
          "",
          "[Removed Lines]",
          "295:     if (!cms_set1_SignerIdentifier(si->sid, signer, type))",
          "",
          "[Added Lines]",
          "303:     if (!cms_set1_SignerIdentifier(si->sid, signer, type, ctx))",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "311:         goto err;",
          "312:     }",
          "314:     X509_ALGOR_set_md(si->digestAlgorithm, md);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "322:     if (md == NULL) {",
          "323:         CMSerr(CMS_F_CMS_ADD1_SIGNER, CMS_R_NO_DIGEST_SET);",
          "324:         goto err;",
          "325:     }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "396:     if (flags & CMS_KEY_PARAM) {",
          "397:         if (flags & CMS_NOATTR) {",
          "399:             if (si->pctx == NULL)",
          "400:                 goto err;",
          "401:             if (EVP_PKEY_sign_init(si->pctx) <= 0)",
          "402:                 goto err;",
          "403:             if (EVP_PKEY_CTX_set_signature_md(si->pctx, md) <= 0)",
          "404:                 goto err;",
          "406:             goto err;",
          "407:     }",
          "409:     if (!sd->signerInfos)",
          "",
          "[Removed Lines]",
          "398:             si->pctx = EVP_PKEY_CTX_new(si->pkey, NULL);",
          "405:         } else if (EVP_DigestSignInit(si->mctx, &si->pctx, md, NULL, pk) <= 0)",
          "",
          "[Added Lines]",
          "411:             si->pctx = EVP_PKEY_CTX_new_from_pkey(ctx->libctx, si->pkey,",
          "412:                                                   ctx->propq);",
          "419:         } else if (EVP_DigestSignInit_with_libctx(si->mctx, &si->pctx,",
          "420:                                                   EVP_MD_name(md),",
          "421:                                                   ctx->libctx, ctx->propq,",
          "422:                                                   pk) <= 0) {",
          "424:         }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "422: }",
          "424: static int cms_add1_signingTime(CMS_SignerInfo *si, ASN1_TIME *t)",
          "425: {",
          "426:     ASN1_TIME *tt;",
          "427:     int r = 0;",
          "429:         tt = t;",
          "430:     else",
          "431:         tt = X509_gmtime_adj(NULL, 0);",
          "434:         goto merr;",
          "436:     if (CMS_signed_add1_attr_by_NID(si, NID_pkcs9_signingTime,",
          "",
          "[Removed Lines]",
          "428:     if (t)",
          "433:     if (!tt)",
          "",
          "[Added Lines]",
          "442: void cms_SignerInfos_set_cmsctx(CMS_ContentInfo *cms)",
          "443: {",
          "444:     int i;",
          "445:     CMS_SignerInfo *si;",
          "446:     STACK_OF(CMS_SignerInfo) *sinfos = CMS_get0_SignerInfos(cms);",
          "447:     const CMS_CTX *ctx = cms_get0_cmsctx(cms);",
          "449:     for (i = 0; i < sk_CMS_SignerInfo_num(sinfos); i++) {",
          "450:         si = sk_CMS_SignerInfo_value(sinfos, i);",
          "451:         if (si != NULL)",
          "452:             si->cms_ctx = ctx;",
          "453:     }",
          "454: }",
          "461:     if (t != NULL)",
          "466:     if (tt == NULL)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "438:         goto merr;",
          "440:     r = 1;",
          "442:  merr:",
          "445:         ASN1_TIME_free(tt);",
          "447:     if (!r)",
          "",
          "[Removed Lines]",
          "444:     if (!t)",
          "",
          "[Added Lines]",
          "475:     if (t == NULL)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "464: STACK_OF(CMS_SignerInfo) *CMS_get0_SignerInfos(CMS_ContentInfo *cms)",
          "465: {",
          "471: }",
          "473: STACK_OF(X509) *CMS_get0_signers(CMS_ContentInfo *cms)",
          "",
          "[Removed Lines]",
          "466:     CMS_SignedData *sd;",
          "467:     sd = cms_get0_signed(cms);",
          "468:     if (!sd)",
          "469:         return NULL;",
          "470:     return sd->signerInfos;",
          "",
          "[Added Lines]",
          "497:     CMS_SignedData *sd = cms_get0_signed(cms);",
          "499:     return sd != NULL ? sd->signerInfos : NULL;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "476:     STACK_OF(CMS_SignerInfo) *sinfos;",
          "477:     CMS_SignerInfo *si;",
          "478:     int i;",
          "479:     sinfos = CMS_get0_SignerInfos(cms);",
          "480:     for (i = 0; i < sk_CMS_SignerInfo_num(sinfos); i++) {",
          "481:         si = sk_CMS_SignerInfo_value(sinfos, i);",
          "484:                 signers = sk_X509_new_null();",
          "486:                     return NULL;",
          "487:             }",
          "488:             if (!sk_X509_push(signers, si->signer)) {",
          "",
          "[Removed Lines]",
          "482:         if (si->signer) {",
          "483:             if (!signers) {",
          "485:                 if (!signers)",
          "",
          "[Added Lines]",
          "512:         if (si->signer != NULL) {",
          "513:             if (signers == NULL) {",
          "515:                 if (signers == NULL)",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "497: void CMS_SignerInfo_set1_signer_cert(CMS_SignerInfo *si, X509 *signer)",
          "498: {",
          "500:         X509_up_ref(signer);",
          "501:         EVP_PKEY_free(si->pkey);",
          "502:         si->pkey = X509_get_pubkey(signer);",
          "",
          "[Removed Lines]",
          "499:     if (signer) {",
          "",
          "[Added Lines]",
          "529:     if (signer != NULL) {",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "527:     X509 *x;",
          "528:     int i, j;",
          "529:     int ret = 0;",
          "530:     sd = cms_get0_signed(cms);",
          "532:         return -1;",
          "533:     certs = sd->certificates;",
          "534:     for (i = 0; i < sk_CMS_SignerInfo_num(sd->signerInfos); i++) {",
          "535:         si = sk_CMS_SignerInfo_value(sd->signerInfos, i);",
          "537:             continue;",
          "539:         for (j = 0; j < sk_X509_num(scerts); j++) {",
          "",
          "[Removed Lines]",
          "531:     if (!sd)",
          "536:         if (si->signer)",
          "",
          "[Added Lines]",
          "562:     if (sd == NULL)",
          "567:         if (si->signer != NULL)",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "545:             }",
          "546:         }",
          "549:             continue;",
          "551:         for (j = 0; j < sk_CMS_CertificateChoices_num(certs); j++) {",
          "",
          "[Removed Lines]",
          "548:         if (si->signer || (flags & CMS_NOINTERN))",
          "",
          "[Added Lines]",
          "579:         if (si->signer != NULL || (flags & CMS_NOINTERN))",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "567:                               X509 **signer, X509_ALGOR **pdig,",
          "568:                               X509_ALGOR **psig)",
          "569: {",
          "578: }",
          "",
          "[Removed Lines]",
          "570:     if (pk)",
          "572:     if (signer)",
          "574:     if (pdig)",
          "576:     if (psig)",
          "",
          "[Added Lines]",
          "601:     if (pk != NULL)",
          "603:     if (signer != NULL)",
          "605:     if (pdig != NULL)",
          "607:     if (psig != NULL)",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "588:     EVP_MD_CTX *mctx = EVP_MD_CTX_new();",
          "589:     int r = 0;",
          "590:     EVP_PKEY_CTX *pctx = NULL;",
          "592:     if (mctx == NULL) {",
          "593:         CMSerr(CMS_F_CMS_SIGNERINFO_CONTENT_SIGN, ERR_R_MALLOC_FAILURE);",
          "594:         return 0;",
          "595:     }",
          "598:         CMSerr(CMS_F_CMS_SIGNERINFO_CONTENT_SIGN, CMS_R_NO_PRIVATE_KEY);",
          "599:         goto err;",
          "600:     }",
          "",
          "[Removed Lines]",
          "597:     if (!si->pkey) {",
          "",
          "[Added Lines]",
          "622:     const CMS_CTX *ctx = cms_get0_cmsctx(cms);",
          "629:     if (si->pkey == NULL) {",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "645:     } else {",
          "646:         unsigned char *sig;",
          "647:         unsigned int siglen;",
          "648:         sig = OPENSSL_malloc(EVP_PKEY_size(si->pkey));",
          "649:         if (sig == NULL) {",
          "650:             CMSerr(CMS_F_CMS_SIGNERINFO_CONTENT_SIGN, ERR_R_MALLOC_FAILURE);",
          "651:             goto err;",
          "652:         }",
          "654:             CMSerr(CMS_F_CMS_SIGNERINFO_CONTENT_SIGN, CMS_R_SIGNFINAL_ERROR);",
          "655:             OPENSSL_free(sig);",
          "656:             goto err;",
          "",
          "[Removed Lines]",
          "653:         if (!EVP_SignFinal(mctx, sig, &siglen, si->pkey)) {",
          "",
          "[Added Lines]",
          "688:         if (!EVP_SignFinal_with_libctx(mctx, sig, &siglen, si->pkey,",
          "689:                                        ctx->libctx, ctx->propq)) {",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "689:     unsigned char *abuf = NULL;",
          "690:     int alen;",
          "691:     size_t siglen;",
          "696:         return 0;",
          "698:     if (CMS_signed_get_attr_by_NID(si, NID_pkcs9_signingTime, -1) < 0) {",
          "",
          "[Removed Lines]",
          "692:     const EVP_MD *md = NULL;",
          "694:     md = EVP_get_digestbyobj(si->digestAlgorithm->algorithm);",
          "695:     if (md == NULL)",
          "",
          "[Added Lines]",
          "729:     const CMS_CTX *ctx = si->cms_ctx;",
          "730:     const char *md_name = OBJ_nid2sn(OBJ_obj2nid(si->digestAlgorithm->algorithm));",
          "732:     if (md_name == NULL)",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "707:         pctx = si->pctx;",
          "708:     else {",
          "709:         EVP_MD_CTX_reset(mctx);",
          "711:             goto err;",
          "712:         si->pctx = pctx;",
          "713:     }",
          "",
          "[Removed Lines]",
          "710:         if (EVP_DigestSignInit(mctx, &pctx, md, NULL, si->pkey) <= 0)",
          "",
          "[Added Lines]",
          "747:         if (EVP_DigestSignInit_with_libctx(mctx, &pctx,",
          "748:                                            md_name, ctx->libctx, ctx->propq,",
          "749:                                            si->pkey) <= 0)",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "780:     EVP_MD_CTX *mctx = NULL;",
          "781:     unsigned char *abuf = NULL;",
          "782:     int alen, r = -1;",
          "786:         CMSerr(CMS_F_CMS_SIGNERINFO_VERIFY, CMS_R_NO_PUBLIC_KEY);",
          "787:         return -1;",
          "788:     }",
          "",
          "[Removed Lines]",
          "783:     const EVP_MD *md = NULL;",
          "785:     if (!si->pkey) {",
          "",
          "[Added Lines]",
          "822:     const char *name;",
          "823:     EVP_MD *md = NULL;",
          "824:     const CMS_CTX *ctx = si->cms_ctx;",
          "826:     if (si->pkey == NULL) {",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "790:     if (!CMS_si_check_attributes(si))",
          "791:         return -1;",
          "794:     if (md == NULL)",
          "795:         return -1;",
          "796:     if (si->mctx == NULL && (si->mctx = EVP_MD_CTX_new()) == NULL) {",
          "797:         CMSerr(CMS_F_CMS_SIGNERINFO_VERIFY, ERR_R_MALLOC_FAILURE);",
          "799:     }",
          "800:     mctx = si->mctx;",
          "802:         goto err;",
          "804:     if (!cms_sd_asn1_ctrl(si, 1))",
          "",
          "[Removed Lines]",
          "793:     md = EVP_get_digestbyobj(si->digestAlgorithm->algorithm);",
          "798:         return -1;",
          "801:     if (EVP_DigestVerifyInit(mctx, &si->pctx, md, NULL, si->pkey) <= 0)",
          "",
          "[Added Lines]",
          "834:     name = OBJ_nid2sn(OBJ_obj2nid(si->digestAlgorithm->algorithm));",
          "835:     md = EVP_MD_fetch(ctx->libctx, name, ctx->propq);",
          "840:         goto err;",
          "843:     if (EVP_DigestVerifyInit_with_libctx(mctx, &si->pctx,",
          "844:                                          EVP_MD_name(md), ctx->libctx, NULL,",
          "845:                                          si->pkey) <= 0)",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "819:     if (r <= 0)",
          "820:         CMSerr(CMS_F_CMS_SIGNERINFO_VERIFY, CMS_R_VERIFICATION_FAILURE);",
          "821:  err:",
          "822:     EVP_MD_CTX_reset(mctx);",
          "823:     return r;",
          "824: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "866:     EVP_MD_free(md);",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "830:     int i;",
          "831:     CMS_SignedData *sd;",
          "832:     BIO *chain = NULL;",
          "833:     sd = cms_get0_signed(cms);",
          "835:         return NULL;",
          "836:     if (cms->d.signedData->encapContentInfo->partial)",
          "837:         cms_sd_set_version(sd);",
          "838:     for (i = 0; i < sk_X509_ALGOR_num(sd->digestAlgorithms); i++) {",
          "839:         X509_ALGOR *digestAlgorithm;",
          "840:         BIO *mdbio;",
          "841:         digestAlgorithm = sk_X509_ALGOR_value(sd->digestAlgorithms, i);",
          "844:             goto err;",
          "846:             BIO_push(chain, mdbio);",
          "847:         else",
          "848:             chain = mdbio;",
          "",
          "[Removed Lines]",
          "834:     if (!sd)",
          "842:         mdbio = cms_DigestAlgorithm_init_bio(digestAlgorithm);",
          "843:         if (!mdbio)",
          "845:         if (chain)",
          "",
          "[Added Lines]",
          "880:     if (sd == NULL)",
          "889:         mdbio = cms_DigestAlgorithm_init_bio(digestAlgorithm, cms_get0_cmsctx(cms));",
          "890:         if (mdbio == NULL)",
          "892:         if (chain != NULL)",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "871:         os = CMS_signed_get0_data_by_OBJ(si,",
          "872:                                          OBJ_nid2obj(NID_pkcs9_messageDigest),",
          "873:                                          -3, V_ASN1_OCTET_STRING);",
          "875:             CMSerr(CMS_F_CMS_SIGNERINFO_VERIFY_CONTENT,",
          "876:                    CMS_R_ERROR_READING_MESSAGEDIGEST_ATTRIBUTE);",
          "877:             goto err;",
          "",
          "[Removed Lines]",
          "874:         if (!os) {",
          "",
          "[Added Lines]",
          "921:         if (os == NULL) {",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "893:         if (mlen != (unsigned int)os->length) {",
          "894:             CMSerr(CMS_F_CMS_SIGNERINFO_VERIFY_CONTENT,",
          "895:                    CMS_R_MESSAGEDIGEST_ATTRIBUTE_WRONG_LENGTH);",
          "",
          "[Removed Lines]",
          "892:     if (os) {",
          "",
          "[Added Lines]",
          "939:     if (os != NULL) {",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "904:             r = 1;",
          "905:     } else {",
          "906:         const EVP_MD *md = EVP_MD_CTX_md(mctx);",
          "908:         if (pkctx == NULL)",
          "909:             goto err;",
          "910:         if (EVP_PKEY_verify_init(pkctx) <= 0)",
          "",
          "[Removed Lines]",
          "907:         pkctx = EVP_PKEY_CTX_new(si->pkey, NULL);",
          "",
          "[Added Lines]",
          "954:         const CMS_CTX *ctx = si->cms_ctx;",
          "956:         pkctx = EVP_PKEY_CTX_new_from_pkey(ctx->libctx, si->pkey, ctx->propq);",
          "",
          "---------------"
        ],
        "crypto/cms/cms_smime.c||crypto/cms/cms_smime.c": [
          "File: crypto/cms/cms_smime.c -> crypto/cms/cms_smime.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "61:             break;",
          "62:         }",
          "65:             goto err;",
          "66:     }",
          "",
          "[Removed Lines]",
          "64:         if (tmpout && (BIO_write(tmpout, buf, i) != i))",
          "",
          "[Added Lines]",
          "65:         if (tmpout != NULL && (BIO_write(tmpout, buf, i) != i))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "96: {",
          "97:     if (upto != NULL) {",
          "98:         BIO *tbio;",
          "99:         do {",
          "100:             tbio = BIO_pop(f);",
          "101:             BIO_free(f);",
          "102:             f = tbio;",
          "103:         } while (f != NULL && f != upto);",
          "105:         BIO_free_all(f);",
          "106: }",
          "108: int CMS_data(CMS_ContentInfo *cms, BIO *out, unsigned int flags)",
          "109: {",
          "110:     BIO *cont;",
          "111:     int r;",
          "112:     if (OBJ_obj2nid(CMS_get0_type(cms)) != NID_pkcs7_data) {",
          "113:         CMSerr(CMS_F_CMS_DATA, CMS_R_TYPE_NOT_DATA);",
          "114:         return 0;",
          "115:     }",
          "116:     cont = CMS_dataInit(cms, NULL);",
          "118:         return 0;",
          "119:     r = cms_copy_content(out, cont, flags);",
          "120:     BIO_free_all(cont);",
          "121:     return r;",
          "122: }",
          "125: {",
          "129:         return NULL;",
          "131:     if ((flags & CMS_STREAM) || CMS_final(cms, in, NULL, flags))",
          "132:         return cms;",
          "134:     CMS_ContentInfo_free(cms);",
          "136:     return NULL;",
          "137: }",
          "139: int CMS_digest_verify(CMS_ContentInfo *cms, BIO *dcont, BIO *out,",
          "140:                       unsigned int flags)",
          "141: {",
          "142:     BIO *cont;",
          "143:     int r;",
          "144:     if (OBJ_obj2nid(CMS_get0_type(cms)) != NID_pkcs7_digest) {",
          "145:         CMSerr(CMS_F_CMS_DIGEST_VERIFY, CMS_R_TYPE_NOT_DIGESTED_DATA);",
          "146:         return 0;",
          "147:     }",
          "150:         return 0;",
          "152:     cont = CMS_dataInit(cms, dcont);",
          "154:         return 0;",
          "155:     r = cms_copy_content(out, cont, flags);",
          "156:     if (r)",
          "157:         r = cms_DigestedData_do_final(cms, cont, 1);",
          "",
          "[Removed Lines]",
          "104:     } else",
          "117:     if (!cont)",
          "124: CMS_ContentInfo *CMS_data_create(BIO *in, unsigned int flags)",
          "126:     CMS_ContentInfo *cms;",
          "127:     cms = cms_Data_create();",
          "128:     if (!cms)",
          "149:     if (!dcont && !check_content(cms))",
          "153:     if (!cont)",
          "",
          "[Added Lines]",
          "105:     } else {",
          "107:     }",
          "120:     if (cont == NULL)",
          "127: CMS_ContentInfo *CMS_data_create_with_libctx(BIO *in, unsigned int flags,",
          "128:                                              OPENSSL_CTX *libctx,",
          "129:                                              const char *propq)",
          "131:     CMS_ContentInfo *cms = cms_Data_create(libctx, propq);",
          "133:     if (cms == NULL)",
          "143: CMS_ContentInfo *CMS_data_create(BIO *in, unsigned int flags)",
          "144: {",
          "145:     return CMS_data_create_with_libctx(in, flags, NULL, NULL);",
          "146: }",
          "159:     if (dcont == NULL && !check_content(cms))",
          "163:     if (cont == NULL)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "159:     return r;",
          "160: }",
          "164: {",
          "165:     CMS_ContentInfo *cms;",
          "167:         md = EVP_sha1();",
          "170:         return NULL;",
          "172:     if (!(flags & CMS_DETACHED))",
          "",
          "[Removed Lines]",
          "162: CMS_ContentInfo *CMS_digest_create(BIO *in, const EVP_MD *md,",
          "163:                                    unsigned int flags)",
          "166:     if (!md)",
          "168:     cms = cms_DigestedData_create(md);",
          "169:     if (!cms)",
          "",
          "[Added Lines]",
          "173: CMS_ContentInfo *CMS_digest_create_with_libctx(BIO *in,",
          "174:                                                const EVP_MD *md,",
          "175:                                                unsigned int flags,",
          "176:                                                OPENSSL_CTX *ctx,",
          "177:                                                const char *propq)",
          "181:     if (md == NULL)",
          "183:     cms = cms_DigestedData_create(md, ctx, propq);",
          "184:     if (cms == NULL)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "179:     return NULL;",
          "180: }",
          "182: int CMS_EncryptedData_decrypt(CMS_ContentInfo *cms,",
          "183:                               const unsigned char *key, size_t keylen,",
          "184:                               BIO *dcont, BIO *out, unsigned int flags)",
          "185: {",
          "186:     BIO *cont;",
          "187:     int r;",
          "188:     if (OBJ_obj2nid(CMS_get0_type(cms)) != NID_pkcs7_encrypted) {",
          "189:         CMSerr(CMS_F_CMS_ENCRYPTEDDATA_DECRYPT,",
          "190:                CMS_R_TYPE_NOT_ENCRYPTED_DATA);",
          "191:         return 0;",
          "192:     }",
          "195:         return 0;",
          "197:     if (CMS_EncryptedData_set1_key(cms, NULL, key, keylen) <= 0)",
          "198:         return 0;",
          "199:     cont = CMS_dataInit(cms, dcont);",
          "201:         return 0;",
          "202:     r = cms_copy_content(out, cont, flags);",
          "203:     do_free_upto(cont, dcont);",
          "204:     return r;",
          "205: }",
          "210: {",
          "211:     CMS_ContentInfo *cms;",
          "214:         return NULL;",
          "215:     }",
          "217:     if (cms == NULL)",
          "218:         return NULL;",
          "219:     if (!CMS_EncryptedData_set1_key(cms, cipher, key, keylen))",
          "",
          "[Removed Lines]",
          "194:     if (!dcont && !check_content(cms))",
          "200:     if (!cont)",
          "207: CMS_ContentInfo *CMS_EncryptedData_encrypt(BIO *in, const EVP_CIPHER *cipher,",
          "208:                                            const unsigned char *key,",
          "209:                                            size_t keylen, unsigned int flags)",
          "212:     if (!cipher) {",
          "213:         CMSerr(CMS_F_CMS_ENCRYPTEDDATA_ENCRYPT, CMS_R_NO_CIPHER);",
          "216:     cms = CMS_ContentInfo_new();",
          "",
          "[Added Lines]",
          "197: CMS_ContentInfo *CMS_digest_create(BIO *in, const EVP_MD *md,",
          "198:                                    unsigned int flags)",
          "199: {",
          "200:     return CMS_digest_create_with_libctx(in, md, flags, NULL, NULL);",
          "201: }",
          "216:     if (dcont == NULL && !check_content(cms))",
          "222:     if (cont == NULL)",
          "229: CMS_ContentInfo *CMS_EncryptedData_encrypt_with_libctx(BIO *in,",
          "230:                                                        const EVP_CIPHER *cipher,",
          "231:                                                        const unsigned char *key,",
          "232:                                                        size_t keylen,",
          "233:                                                        unsigned int flags,",
          "234:                                                        OPENSSL_CTX *libctx,",
          "235:                                                        const char *propq)",
          "239:     if (cipher == NULL) {",
          "240:         CMSerr(0, CMS_R_NO_CIPHER);",
          "243:     cms = CMS_ContentInfo_new_with_libctx(libctx, propq);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "230:     return NULL;",
          "231: }",
          "233: static int cms_signerinfo_verify_cert(CMS_SignerInfo *si,",
          "234:                                       X509_STORE *store,",
          "235:                                       STACK_OF(X509) *certs,",
          "236:                                       STACK_OF(X509_CRL) *crls,",
          "238: {",
          "240:     X509 *signer;",
          "241:     int i, j, r = 0;",
          "243:     if (ctx == NULL) {",
          "244:         CMSerr(CMS_F_CMS_SIGNERINFO_VERIFY_CERT, ERR_R_MALLOC_FAILURE);",
          "245:         goto err;",
          "",
          "[Removed Lines]",
          "237:                                       STACK_OF(X509) **chain)",
          "239:     X509_STORE_CTX *ctx = X509_STORE_CTX_new();",
          "",
          "[Added Lines]",
          "260: CMS_ContentInfo *CMS_EncryptedData_encrypt(BIO *in, const EVP_CIPHER *cipher,",
          "261:                                            const unsigned char *key,",
          "262:                                            size_t keylen, unsigned int flags)",
          "263: {",
          "264:     return CMS_EncryptedData_encrypt_with_libctx(in, cipher, key, keylen, flags,",
          "265:                                                  NULL, NULL);",
          "266: }",
          "272:                                       STACK_OF(X509) **chain,",
          "273:                                       const CMS_CTX *cms_ctx)",
          "275:     X509_STORE_CTX *ctx;",
          "279:     ctx = X509_STORE_CTX_new_with_libctx(cms_ctx->libctx, cms_ctx->propq);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "250:         goto err;",
          "251:     }",
          "252:     X509_STORE_CTX_set_default(ctx, \"smime_sign\");",
          "254:         X509_STORE_CTX_set0_crls(ctx, crls);",
          "256:     i = X509_verify_cert(ctx);",
          "",
          "[Removed Lines]",
          "253:     if (crls)",
          "",
          "[Added Lines]",
          "290:     if (crls != NULL)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "285:     int i, scount = 0, ret = 0;",
          "286:     BIO *cmsbio = NULL, *tmpin = NULL, *tmpout = NULL;",
          "287:     int cadesVerify = (flags & CMS_CADES) != 0;",
          "290:         return 0;",
          "292:         const ASN1_OBJECT *coid = CMS_get0_eContentType(cms);",
          "293:         if (OBJ_obj2nid(coid) == NID_id_ct_asciiTextWithCRLF)",
          "294:             flags |= CMS_ASCIICRLF;",
          "295:     }",
          "",
          "[Removed Lines]",
          "289:     if (!dcont && !check_content(cms))",
          "291:     if (dcont && !(flags & CMS_BINARY)) {",
          "",
          "[Added Lines]",
          "325:     const CMS_CTX *ctx = cms_get0_cmsctx(cms);",
          "327:     if (dcont == NULL && !check_content(cms))",
          "329:     if (dcont != NULL && !(flags & CMS_BINARY)) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "337:             si = sk_CMS_SignerInfo_value(sinfos, i);",
          "339:             if (!cms_signerinfo_verify_cert(si, store, cms_certs, crls,",
          "341:                 goto err;",
          "342:         }",
          "343:     }",
          "",
          "[Removed Lines]",
          "340:                                             si_chains ? &si_chains[i] : NULL))",
          "",
          "[Added Lines]",
          "379:                                             si_chains ? &si_chains[i] : NULL,",
          "380:                                             ctx))",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "371:         char *ptr;",
          "372:         long len;",
          "373:         len = BIO_get_mem_data(dcont, &ptr);",
          "374:         tmpin = BIO_new_mem_buf(ptr, len);",
          "375:         if (tmpin == NULL) {",
          "376:             CMSerr(CMS_F_CMS_VERIFY, ERR_R_MALLOC_FAILURE);",
          "377:             goto err2;",
          "378:         }",
          "380:         tmpin = dcont;",
          "",
          "[Removed Lines]",
          "370:     if (dcont && (BIO_method_type(dcont) == BIO_TYPE_MEM)) {",
          "379:     } else",
          "",
          "[Added Lines]",
          "410:     if (dcont != NULL && (BIO_method_type(dcont) == BIO_TYPE_MEM)) {",
          "420:     } else {",
          "422:     }",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "390:         tmpout = cms_get_text_bio(out, flags);",
          "392:             CMSerr(CMS_F_CMS_VERIFY, ERR_R_MALLOC_FAILURE);",
          "393:             goto err;",
          "394:         }",
          "395:         cmsbio = CMS_dataInit(cms, tmpout);",
          "397:             goto err;",
          "",
          "[Removed Lines]",
          "391:         if (!tmpout) {",
          "396:         if (!cmsbio)",
          "",
          "[Added Lines]",
          "433:         if (tmpout == NULL) {",
          "438:         if (cmsbio == NULL)",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "409:         }",
          "410:     } else {",
          "411:         cmsbio = CMS_dataInit(cms, tmpin);",
          "413:             goto err;",
          "415:         if (!cms_copy_content(out, cmsbio, flags))",
          "",
          "[Removed Lines]",
          "412:         if (!cmsbio)",
          "",
          "[Added Lines]",
          "454:         if (cmsbio == NULL)",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "467:     return cms_Receipt_verify(rcms, ocms);",
          "468: }",
          "473: {",
          "474:     CMS_ContentInfo *cms;",
          "475:     int i;",
          "478:     if (cms == NULL || !CMS_SignedData_init(cms))",
          "479:         goto merr;",
          "480:     if (flags & CMS_ASCIICRLF",
          "",
          "[Removed Lines]",
          "470: CMS_ContentInfo *CMS_sign(X509 *signcert, EVP_PKEY *pkey,",
          "471:                           STACK_OF(X509) *certs, BIO *data,",
          "472:                           unsigned int flags)",
          "477:     cms = CMS_ContentInfo_new();",
          "",
          "[Added Lines]",
          "512: CMS_ContentInfo *CMS_sign_with_libctx(X509 *signcert, EVP_PKEY *pkey,",
          "513:                                       STACK_OF(X509) *certs, BIO *data,",
          "514:                                       unsigned int flags,",
          "515:                                       OPENSSL_CTX *libctx, const char *propq)",
          "520:     cms = CMS_ContentInfo_new_with_libctx(libctx, propq);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "482:                                   OBJ_nid2obj(NID_id_ct_asciiTextWithCRLF)))",
          "483:         goto err;",
          "487:         goto err;",
          "488:     }",
          "490:     for (i = 0; i < sk_X509_num(certs); i++) {",
          "491:         X509 *x = sk_X509_value(certs, i);",
          "492:         if (!CMS_add1_cert(cms, x))",
          "493:             goto merr;",
          "494:     }",
          "",
          "[Removed Lines]",
          "485:     if (pkey && !CMS_add1_signer(cms, signcert, pkey, NULL, flags)) {",
          "486:         CMSerr(CMS_F_CMS_SIGN, CMS_R_ADD_SIGNER_ERROR);",
          "",
          "[Added Lines]",
          "528:     if (pkey != NULL && !CMS_add1_signer(cms, signcert, pkey, NULL, flags)) {",
          "529:         CMSerr(0, CMS_R_ADD_SIGNER_ERROR);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "503:         goto err;",
          "505:  merr:",
          "508:  err:",
          "509:     CMS_ContentInfo_free(cms);",
          "510:     return NULL;",
          "511: }",
          "513: CMS_ContentInfo *CMS_sign_receipt(CMS_SignerInfo *si,",
          "514:                                   X509 *signcert, EVP_PKEY *pkey,",
          "515:                                   STACK_OF(X509) *certs, unsigned int flags)",
          "",
          "[Removed Lines]",
          "506:     CMSerr(CMS_F_CMS_SIGN, ERR_R_MALLOC_FAILURE);",
          "",
          "[Added Lines]",
          "550:     CMSerr(0, ERR_R_MALLOC_FAILURE);",
          "557: CMS_ContentInfo *CMS_sign(X509 *signcert, EVP_PKEY *pkey, STACK_OF(X509) *certs,",
          "558:                           BIO *data, unsigned int flags)",
          "559: {",
          "560:     return CMS_sign_with_libctx(signcert, pkey, certs, data, flags, NULL, NULL);",
          "561: }",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "519:     ASN1_OCTET_STRING **pos, *os;",
          "520:     BIO *rct_cont = NULL;",
          "521:     int r = 0;",
          "523:     flags &= ~(CMS_STREAM | CMS_TEXT);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "572:     const CMS_CTX *ctx = si->cms_ctx;",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "535:         goto err;",
          "",
          "[Removed Lines]",
          "533:     cms = CMS_sign(NULL, NULL, certs, NULL, flags);",
          "534:     if (!cms)",
          "",
          "[Added Lines]",
          "584:     cms = CMS_sign_with_libctx(NULL, NULL, certs, NULL, flags,",
          "585:                                ctx->libctx, ctx->propq);",
          "586:     if (cms == NULL)",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "545:     }",
          "547:     os = cms_encode_Receipt(si);",
          "550:         goto err;",
          "553:     rct_cont = BIO_new_mem_buf(os->data, os->length);",
          "555:         goto err;",
          "",
          "[Removed Lines]",
          "549:     if (!os)",
          "554:     if (!rct_cont)",
          "",
          "[Added Lines]",
          "600:     if (os == NULL)",
          "605:     if (rct_cont == NULL)",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "579: }",
          "583: {",
          "584:     CMS_ContentInfo *cms;",
          "585:     int i;",
          "586:     X509 *recip;",
          "589:         goto merr;",
          "590:     for (i = 0; i < sk_X509_num(certs); i++) {",
          "591:         recip = sk_X509_value(certs, i);",
          "592:         if (!CMS_add1_recipient_cert(cms, recip, flags)) {",
          "594:             goto err;",
          "595:         }",
          "596:     }",
          "",
          "[Removed Lines]",
          "581: CMS_ContentInfo *CMS_encrypt(STACK_OF(X509) *certs, BIO *data,",
          "582:                              const EVP_CIPHER *cipher, unsigned int flags)",
          "587:     cms = CMS_EnvelopedData_create(cipher);",
          "588:     if (!cms)",
          "593:             CMSerr(CMS_F_CMS_ENCRYPT, CMS_R_RECIPIENT_ERROR);",
          "",
          "[Added Lines]",
          "632: CMS_ContentInfo *CMS_encrypt_with_libctx(STACK_OF(X509) *certs,",
          "633:                                          BIO *data, const EVP_CIPHER *cipher,",
          "634:                                          unsigned int flags,",
          "635:                                          OPENSSL_CTX *libctx, const char *propq)",
          "641:     cms = CMS_EnvelopedData_create_with_libctx(cipher, libctx, propq);",
          "642:     if (cms == NULL)",
          "647:             CMSerr(0, CMS_R_RECIPIENT_ERROR);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "605:         goto err;",
          "607:  merr:",
          "609:  err:",
          "610:     CMS_ContentInfo_free(cms);",
          "611:     return NULL;",
          "612: }",
          "615:                                        EVP_PKEY *pk, X509 *cert, X509 *peer)",
          "616: {",
          "617:     int i;",
          "",
          "[Removed Lines]",
          "608:     CMSerr(CMS_F_CMS_ENCRYPT, ERR_R_MALLOC_FAILURE);",
          "614: static int cms_kari_set1_pkey_and_peer(CMS_ContentInfo *cms, CMS_RecipientInfo *ri,",
          "",
          "[Added Lines]",
          "662:     CMSerr(0, ERR_R_MALLOC_FAILURE);",
          "668: CMS_ContentInfo *CMS_encrypt(STACK_OF(X509) *certs, BIO *data,",
          "669:                              const EVP_CIPHER *cipher, unsigned int flags)",
          "670: {",
          "671:     return CMS_encrypt_with_libctx(certs, data, cipher, flags, NULL, NULL);",
          "672: }",
          "674: static int cms_kari_set1_pkey_and_peer(CMS_ContentInfo *cms,",
          "675:                                        CMS_RecipientInfo *ri,",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "639:      return CMS_decrypt_set1_pkey_and_peer(cms, pk, cert, NULL);",
          "640: }",
          "643: {",
          "644:     STACK_OF(CMS_RecipientInfo) *ris;",
          "645:     CMS_RecipientInfo *ri;",
          "646:     int i, r, cms_pkey_ri_type;",
          "647:     int debug = 0, match_ri = 0;",
          "648:     ris = CMS_get0_RecipientInfos(cms);",
          "650:         debug = cms->d.envelopedData->encryptedContentInfo->debug;",
          "652:     cms_pkey_ri_type = cms_pkey_get_ri_type(pk);",
          "",
          "[Removed Lines]",
          "642: int CMS_decrypt_set1_pkey_and_peer(CMS_ContentInfo *cms, EVP_PKEY *pk, X509 *cert, X509 *peer)",
          "649:     if (ris)",
          "",
          "[Added Lines]",
          "704: int CMS_decrypt_set1_pkey_and_peer(CMS_ContentInfo *cms, EVP_PKEY *pk,",
          "705:                                    X509 *cert, X509 *peer)",
          "713:     if (ris != NULL)",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "679:             EVP_PKEY_up_ref(pk);",
          "680:             CMS_RecipientInfo_set0_pkey(ri, pk);",
          "681:             r = CMS_RecipientInfo_decrypt(cms, ri);",
          "682:             CMS_RecipientInfo_set0_pkey(ri, NULL);",
          "",
          "[Removed Lines]",
          "678:         else if (!cert || !CMS_RecipientInfo_ktri_cert_cmp(ri, cert)) {",
          "683:             if (cert) {",
          "",
          "[Added Lines]",
          "742:         else if (cert == NULL|| !CMS_RecipientInfo_ktri_cert_cmp(ri, cert)) {",
          "747:             if (cert != NULL) {",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "704:         }",
          "705:     }",
          "708:         ERR_clear_error();",
          "709:         return 1;",
          "710:     }",
          "",
          "[Removed Lines]",
          "707:     if (cert == NULL && cms_pkey_ri_type == CMS_RECIPINFO_TRANS && match_ri && !debug) {",
          "",
          "[Added Lines]",
          "771:     if (cert == NULL",
          "772:         && cms_pkey_ri_type == CMS_RECIPINFO_TRANS",
          "773:         && match_ri",
          "774:         && !debug) {",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "735:             CMS_RecipientInfo_set0_key(ri, key, keylen);",
          "736:             r = CMS_RecipientInfo_decrypt(cms, ri);",
          "737:             CMS_RecipientInfo_set0_key(ri, NULL, 0);",
          "738:             if (r > 0)",
          "739:                 return 1;",
          "741:                 CMSerr(CMS_F_CMS_DECRYPT_SET1_KEY, CMS_R_DECRYPT_ERROR);",
          "742:                 return 0;",
          "743:             }",
          "",
          "[Removed Lines]",
          "734:         if (!id || (CMS_RecipientInfo_kekri_id_cmp(ri, id, idlen) == 0)) {",
          "740:             if (id) {",
          "",
          "[Added Lines]",
          "802:         if (id == NULL || (CMS_RecipientInfo_kekri_id_cmp(ri, id, idlen) == 0)) {",
          "808:             if (id != NULL) {",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "783:         CMSerr(CMS_F_CMS_DECRYPT, CMS_R_TYPE_NOT_ENVELOPED_DATA);",
          "784:         return 0;",
          "785:     }",
          "787:         return 0;",
          "788:     if (flags & CMS_DEBUG_DECRYPT)",
          "789:         cms->d.envelopedData->encryptedContentInfo->debug = 1;",
          "790:     else",
          "791:         cms->d.envelopedData->encryptedContentInfo->debug = 0;",
          "793:         cms->d.envelopedData->encryptedContentInfo->havenocert = 1;",
          "794:     else",
          "795:         cms->d.envelopedData->encryptedContentInfo->havenocert = 0;",
          "",
          "[Removed Lines]",
          "786:     if (!dcont && !check_content(cms))",
          "792:     if (!cert)",
          "",
          "[Added Lines]",
          "855:     if (dcont == NULL && !check_content(cms))",
          "861:     if (cert == NULL)",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "815:         return 0;",
          "816:     }",
          "820:     (void)BIO_flush(cmsbio);",
          "",
          "[Removed Lines]",
          "818:     SMIME_crlf_copy(data, cmsbio, flags);",
          "",
          "[Added Lines]",
          "887:     ret = SMIME_crlf_copy(data, cmsbio, flags);",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "823:         CMSerr(CMS_F_CMS_FINAL, CMS_R_CMS_DATAFINAL_ERROR);",
          "824:         goto err;",
          "825:     }",
          "830:     do_free_upto(cmsbio, dcont);",
          "832:     return ret;",
          "",
          "[Removed Lines]",
          "827:     ret = 1;",
          "829:  err:",
          "",
          "[Added Lines]",
          "895: err:",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "840: {",
          "841:     BIO *cont;",
          "842:     int r;",
          "843:     if (OBJ_obj2nid(CMS_get0_type(cms)) != NID_id_smime_ct_compressedData) {",
          "844:         CMSerr(CMS_F_CMS_UNCOMPRESS, CMS_R_TYPE_NOT_COMPRESSED_DATA);",
          "845:         return 0;",
          "846:     }",
          "849:         return 0;",
          "851:     cont = CMS_dataInit(cms, dcont);",
          "853:         return 0;",
          "854:     r = cms_copy_content(out, cont, flags);",
          "855:     do_free_upto(cont, dcont);",
          "",
          "[Removed Lines]",
          "848:     if (!dcont && !check_content(cms))",
          "852:     if (!cont)",
          "",
          "[Added Lines]",
          "915:     if (dcont == NULL && !check_content(cms))",
          "919:     if (cont == NULL)",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "859: CMS_ContentInfo *CMS_compress(BIO *in, int comp_nid, unsigned int flags)",
          "860: {",
          "861:     CMS_ContentInfo *cms;",
          "862:     if (comp_nid <= 0)",
          "863:         comp_nid = NID_zlib_compression;",
          "866:         return NULL;",
          "868:     if (!(flags & CMS_DETACHED))",
          "",
          "[Removed Lines]",
          "864:     cms = cms_CompressedData_create(comp_nid);",
          "865:     if (!cms)",
          "",
          "[Added Lines]",
          "932:     cms = cms_CompressedData_create(comp_nid, NULL, NULL);",
          "933:     if (cms == NULL)",
          "",
          "---------------"
        ],
        "include/openssl/cms.h||include/openssl/cms.h": [
          "File: include/openssl/cms.h -> include/openssl/cms.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "45: DECLARE_ASN1_FUNCTIONS(CMS_ReceiptRequest)",
          "46: DECLARE_ASN1_PRINT_FUNCTION(CMS_ContentInfo)",
          "48: # define CMS_SIGNERINFO_ISSUER_SERIAL    0",
          "49: # define CMS_SIGNERINFO_KEYIDENTIFIER    1",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "48: CMS_ContentInfo *CMS_ContentInfo_new_with_libctx(OPENSSL_CTX *libctx,",
          "49:                                                  const char *propq);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "104: int PEM_write_bio_CMS_stream(BIO *out, CMS_ContentInfo *cms, BIO *in,",
          "105:                              int flags);",
          "106: CMS_ContentInfo *SMIME_read_CMS(BIO *bio, BIO **bcont);",
          "107: int SMIME_write_CMS(BIO *bio, CMS_ContentInfo *cms, BIO *data, int flags);",
          "109: int CMS_final(CMS_ContentInfo *cms, BIO *data, BIO *dcont,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "110: CMS_ContentInfo *SMIME_read_CMS_ex(BIO *bio, BIO **bcont, CMS_ContentInfo **ci);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "112: CMS_ContentInfo *CMS_sign(X509 *signcert, EVP_PKEY *pkey,",
          "113:                           STACK_OF(X509) *certs, BIO *data,",
          "114:                           unsigned int flags);",
          "116: CMS_ContentInfo *CMS_sign_receipt(CMS_SignerInfo *si,",
          "117:                                   X509 *signcert, EVP_PKEY *pkey,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "119: CMS_ContentInfo *CMS_sign_with_libctx(X509 *signcert, EVP_PKEY *pkey,",
          "120:                                       STACK_OF(X509) *certs, BIO *data,",
          "121:                                       unsigned int flags,",
          "122:                                       OPENSSL_CTX *ctx, const char *propq);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "120: int CMS_data(CMS_ContentInfo *cms, BIO *out, unsigned int flags);",
          "121: CMS_ContentInfo *CMS_data_create(BIO *in, unsigned int flags);",
          "123: int CMS_digest_verify(CMS_ContentInfo *cms, BIO *dcont, BIO *out,",
          "124:                       unsigned int flags);",
          "125: CMS_ContentInfo *CMS_digest_create(BIO *in, const EVP_MD *md,",
          "126:                                    unsigned int flags);",
          "128: int CMS_EncryptedData_decrypt(CMS_ContentInfo *cms,",
          "129:                               const unsigned char *key, size_t keylen,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "130: CMS_ContentInfo *CMS_data_create_with_libctx(BIO *in, unsigned int flags,",
          "131:                                              OPENSSL_CTX *ctx,",
          "132:                                              const char *propq);",
          "138: CMS_ContentInfo *CMS_digest_create_with_libctx(BIO *in, const EVP_MD *md,",
          "139:                                                unsigned int flags,",
          "140:                                                OPENSSL_CTX *ctx,",
          "141:                                                const char *propq);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "132: CMS_ContentInfo *CMS_EncryptedData_encrypt(BIO *in, const EVP_CIPHER *cipher,",
          "133:                                            const unsigned char *key,",
          "134:                                            size_t keylen, unsigned int flags);",
          "136: int CMS_EncryptedData_set1_key(CMS_ContentInfo *cms, const EVP_CIPHER *ciph,",
          "137:                                const unsigned char *key, size_t keylen);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "150: CMS_ContentInfo *CMS_EncryptedData_encrypt_with_libctx(BIO *in,",
          "151:                                                        const EVP_CIPHER *cipher,",
          "152:                                                        const unsigned char *key,",
          "153:                                                        size_t keylen,",
          "154:                                                        unsigned int flags,",
          "155:                                                        OPENSSL_CTX *ctx,",
          "156:                                                        const char *propq);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "148: CMS_ContentInfo *CMS_encrypt(STACK_OF(X509) *certs, BIO *in,",
          "149:                              const EVP_CIPHER *cipher, unsigned int flags);",
          "151: int CMS_decrypt(CMS_ContentInfo *cms, EVP_PKEY *pkey, X509 *cert,",
          "152:                 BIO *dcont, BIO *out, unsigned int flags);",
          "154: int CMS_decrypt_set1_pkey(CMS_ContentInfo *cms, EVP_PKEY *pk, X509 *cert);",
          "156: int CMS_decrypt_set1_key(CMS_ContentInfo *cms,",
          "157:                          unsigned char *key, size_t keylen,",
          "158:                          const unsigned char *id, size_t idlen);",
          "",
          "[Removed Lines]",
          "155: int CMS_decrypt_set1_pkey_and_peer(CMS_ContentInfo *cms, EVP_PKEY *pk, X509 *cert, X509 *peer);",
          "",
          "[Added Lines]",
          "172: CMS_ContentInfo *CMS_encrypt_with_libctx(STACK_OF(X509) *certs,",
          "173:                                          BIO *in, const EVP_CIPHER *cipher,",
          "174:                                          unsigned int flags,",
          "175:                                          OPENSSL_CTX *ctx, const char *propq);",
          "181: int CMS_decrypt_set1_pkey_and_peer(CMS_ContentInfo *cms, EVP_PKEY *pk,",
          "182:                                    X509 *cert, X509 *peer);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "163: int CMS_RecipientInfo_type(CMS_RecipientInfo *ri);",
          "164: EVP_PKEY_CTX *CMS_RecipientInfo_get0_pkey_ctx(CMS_RecipientInfo *ri);",
          "165: CMS_ContentInfo *CMS_EnvelopedData_create(const EVP_CIPHER *cipher);",
          "166: CMS_RecipientInfo *CMS_add1_recipient_cert(CMS_ContentInfo *cms,",
          "167:                                            X509 *recip, unsigned int flags);",
          "168: CMS_RecipientInfo *CMS_add1_recipient(CMS_ContentInfo *cms, X509 *recip,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "193: CMS_ContentInfo *CMS_EnvelopedData_create_with_libctx(const EVP_CIPHER *cipher,",
          "194:                                                       OPENSSL_CTX *ctx,",
          "195:                                                       const char *propq);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "297:                                     int lastpos, int type);",
          "299: int CMS_get1_ReceiptRequest(CMS_SignerInfo *si, CMS_ReceiptRequest **prr);",
          "305: int CMS_add1_ReceiptRequest(CMS_SignerInfo *si, CMS_ReceiptRequest *rr);",
          "306: void CMS_ReceiptRequest_get0_values(CMS_ReceiptRequest *rr,",
          "307:                                     ASN1_STRING **pcid,",
          "",
          "[Removed Lines]",
          "300: CMS_ReceiptRequest *CMS_ReceiptRequest_create0(unsigned char *id, int idlen,",
          "301:                                                int allorfirst,",
          "302:                                                STACK_OF(GENERAL_NAMES)",
          "",
          "[Added Lines]",
          "331: CMS_ReceiptRequest *CMS_ReceiptRequest_create0(",
          "332:     unsigned char *id, int idlen, int allorfirst,",
          "333:     STACK_OF(GENERAL_NAMES) *receiptList,",
          "334:     STACK_OF(GENERAL_NAMES) *receiptsTo);",
          "335: CMS_ReceiptRequest *CMS_ReceiptRequest_create0_with_libctx(",
          "336:     unsigned char *id, int idlen, int allorfirst,",
          "337:     STACK_OF(GENERAL_NAMES) *receiptList,",
          "338:     STACK_OF(GENERAL_NAMES) *receiptsTo,",
          "339:     OPENSSL_CTX *ctx, const char *propq);",
          "",
          "---------------"
        ]
      }
    }
  ]
}