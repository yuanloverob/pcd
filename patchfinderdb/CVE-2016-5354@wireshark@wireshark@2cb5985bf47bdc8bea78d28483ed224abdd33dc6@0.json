{
  "cve_id": "CVE-2016-5354",
  "cve_desc": "The USB subsystem in Wireshark 1.12.x before 1.12.12 and 2.x before 2.0.4 mishandles class types, which allows remote attackers to cause a denial of service (application crash) via a crafted packet.",
  "repo": "wireshark/wireshark",
  "patch_hash": "2cb5985bf47bdc8bea78d28483ed224abdd33dc6",
  "patch_info": {
    "commit_hash": "2cb5985bf47bdc8bea78d28483ed224abdd33dc6",
    "repo": "wireshark/wireshark",
    "commit_url": "https://github.com/wireshark/wireshark/commit/2cb5985bf47bdc8bea78d28483ed224abdd33dc6",
    "files": [
      "epan/dissectors/packet-u3v.c",
      "epan/dissectors/packet-usb-audio.c",
      "epan/dissectors/packet-usb-masstorage.c",
      "epan/dissectors/packet-usb-video.c",
      "epan/dissectors/packet-usb.h"
    ],
    "message": "Make class \"type\" for USB conversations.\n\nUSB dissectors can't assume that only their class type has been passed around in the conversation.  Make explicit check that class type expected matches the dissector and stop/prevent dissection if there isn't a match.\n\nBug: 12356\nChange-Id: Ib23973a4ebd0fbb51952ffc118daf95e3389a209\nReviewed-on: https://code.wireshark.org/review/15212\nPetri-Dish: Michael Mann <mmann78@netscape.net>\nReviewed-by: Martin Kaiser <wireshark@kaiser.cx>\nPetri-Dish: Martin Kaiser <wireshark@kaiser.cx>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Michael Mann <mmann78@netscape.net>",
    "before_after_code_files": [
      "epan/dissectors/packet-u3v.c||epan/dissectors/packet-u3v.c",
      "epan/dissectors/packet-usb-audio.c||epan/dissectors/packet-usb-audio.c",
      "epan/dissectors/packet-usb-masstorage.c||epan/dissectors/packet-usb-masstorage.c",
      "epan/dissectors/packet-usb-video.c||epan/dissectors/packet-usb-video.c",
      "epan/dissectors/packet-usb.h||epan/dissectors/packet-usb.h"
    ]
  },
  "patch_diff": {
    "epan/dissectors/packet-u3v.c||epan/dissectors/packet-u3v.c": [
      "File: epan/dissectors/packet-u3v.c -> epan/dissectors/packet-u3v.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1683:     if (!u3v_conv_info) {",
      "1684:         u3v_conv_info = wmem_new0(wmem_file_scope(), u3v_conv_info_t);",
      "1685:         usb_conv_info->class_data = u3v_conv_info;",
      "1686:     }",
      "1688:     prefix = tvb_get_letohl(tvb, 0);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1686:         usb_conv_info->class_data_type = USB_CONV_U3V;",
      "1687:     } else if (usb_conv_info->class_data_type != USB_CONV_U3V) {",
      "1689:         return 0;",
      "",
      "---------------"
    ],
    "epan/dissectors/packet-usb-audio.c||epan/dissectors/packet-usb-audio.c": [
      "File: epan/dissectors/packet-usb-audio.c -> epan/dissectors/packet-usb-audio.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "435:     if(!audio_conv_info) {",
      "436:         audio_conv_info = wmem_new(wmem_file_scope(), audio_conv_info_t);",
      "437:         usb_conv_info->class_data = audio_conv_info;",
      "440:     }",
      "441:     audio_conv_info->ver_major = ver_major;",
      "442:     offset += 2;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "438:         usb_conv_info->class_data_type = USB_CONV_AUDIO;",
      "441:     } else if (usb_conv_info->class_data_type != USB_CONV_AUDIO) {",
      "443:         return 0;",
      "",
      "---------------"
    ],
    "epan/dissectors/packet-usb-masstorage.c||epan/dissectors/packet-usb-masstorage.c": [
      "File: epan/dissectors/packet-usb-masstorage.c -> epan/dissectors/packet-usb-masstorage.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "199:         usb_ms_conv_info->itl=wmem_tree_new(wmem_file_scope());",
      "200:         usb_ms_conv_info->itlq=wmem_tree_new(wmem_file_scope());",
      "201:         usb_conv_info->class_data=usb_ms_conv_info;",
      "202:     }",
      "205:     is_request=(pinfo->srcport==NO_ENDPOINT);",
      "207:     col_set_str(pinfo->cinfo, COL_PROTOCOL, \"USBMS\");",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "202:         usb_conv_info->class_data_type = USB_CONV_MASS_STORAGE;",
      "203:     } else if (usb_conv_info->class_data_type != USB_CONV_MASS_STORAGE) {",
      "205:         return 0;",
      "",
      "---------------"
    ],
    "epan/dissectors/packet-usb-video.c||epan/dissectors/packet-usb-video.c": [
      "File: epan/dissectors/packet-usb-video.c -> epan/dissectors/packet-usb-video.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1035:             video_conv_info = wmem_new(wmem_file_scope(), video_conv_info_t);",
      "1036:             video_conv_info->entities = wmem_tree_new(wmem_file_scope());",
      "1037:             usb_conv_info->class_data = video_conv_info;",
      "1038:         }",
      "1040:         entity = (video_entity_t*) wmem_tree_lookup32(video_conv_info->entities, entity_id);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1038:             usb_conv_info->class_data_type = USB_CONV_VIDEO;",
      "1039:         } else if (usb_conv_info->class_data_type != USB_CONV_VIDEO) {",
      "1041:             return descriptor_len;",
      "",
      "---------------"
    ],
    "epan/dissectors/packet-usb.h||epan/dissectors/packet-usb.h": [
      "File: epan/dissectors/packet-usb.h -> epan/dissectors/packet-usb.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "90:     guint64 usb_id;",
      "91: } usb_trans_info_t;",
      "95: struct _usb_conv_info_t {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "93: enum usb_conv_class_data_type {USB_CONV_UNKNOWN = 0, USB_CONV_U3V, USB_CONV_AUDIO, USB_CONV_VIDEO, USB_CONV_MASS_STORAGE};",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "113:     wmem_tree_t *transactions;",
      "118:     wmem_array_t *alt_settings;",
      "119: };",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "119:     enum usb_conv_class_data_type class_data_type;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "7f77886a8f3686f3885643077bbf389aea4cfd04",
      "candidate_info": {
        "commit_hash": "7f77886a8f3686f3885643077bbf389aea4cfd04",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/7f77886a8f3686f3885643077bbf389aea4cfd04",
        "files": [
          "epan/dissectors/packet-usb-masstorage.c",
          "epan/dissectors/packet-usb-video.c",
          "epan/dissectors/packet-usb.h"
        ],
        "message": "Make class \"type\" for USB conversations.\n\nUSB dissectors can't assume that only their class type has been passed around in the conversation.  Make explicit check that class type expected matches the dissector and stop/prevent dissection if there isn't a match.\n\n# Conflicts:\n#\tepan/dissectors/packet-u3v.c\n#\tepan/dissectors/packet-usb-audio.c\n\nBug: 12356\nChange-Id: Ib23973a4ebd0fbb51952ffc118daf95e3389a209\nReviewed-on: https://code.wireshark.org/review/15212\nPetri-Dish: Michael Mann <mmann78@netscape.net>\nReviewed-by: Martin Kaiser <wireshark@kaiser.cx>\nPetri-Dish: Martin Kaiser <wireshark@kaiser.cx>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Michael Mann <mmann78@netscape.net>\nReviewed-on: https://code.wireshark.org/review/15214",
        "before_after_code_files": [
          "epan/dissectors/packet-usb-masstorage.c||epan/dissectors/packet-usb-masstorage.c",
          "epan/dissectors/packet-usb-video.c||epan/dissectors/packet-usb-video.c",
          "epan/dissectors/packet-usb.h||epan/dissectors/packet-usb.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-usb-masstorage.c||epan/dissectors/packet-usb-masstorage.c",
            "epan/dissectors/packet-usb-video.c||epan/dissectors/packet-usb-video.c",
            "epan/dissectors/packet-usb.h||epan/dissectors/packet-usb.h"
          ],
          "candidate": [
            "epan/dissectors/packet-usb-masstorage.c||epan/dissectors/packet-usb-masstorage.c",
            "epan/dissectors/packet-usb-video.c||epan/dissectors/packet-usb-video.c",
            "epan/dissectors/packet-usb.h||epan/dissectors/packet-usb.h"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-usb-masstorage.c||epan/dissectors/packet-usb-masstorage.c": [
          "File: epan/dissectors/packet-usb-masstorage.c -> epan/dissectors/packet-usb-masstorage.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "200:         usb_ms_conv_info->itl=wmem_tree_new(wmem_file_scope());",
          "201:         usb_ms_conv_info->itlq=wmem_tree_new(wmem_file_scope());",
          "202:         usb_conv_info->class_data=usb_ms_conv_info;",
          "203:     }",
          "206:     is_request=(pinfo->srcport==NO_ENDPOINT);",
          "208:     col_set_str(pinfo->cinfo, COL_PROTOCOL, \"USBMS\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "203:         usb_conv_info->class_data_type = USB_CONV_MASS_STORAGE;",
          "204:     } else if (usb_conv_info->class_data_type != USB_CONV_MASS_STORAGE) {",
          "206:         return 0;",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-usb-video.c||epan/dissectors/packet-usb-video.c": [
          "File: epan/dissectors/packet-usb-video.c -> epan/dissectors/packet-usb-video.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1032:             video_conv_info = wmem_new(wmem_file_scope(), video_conv_info_t);",
          "1033:             video_conv_info->entities = wmem_tree_new(wmem_file_scope());",
          "1034:             usb_conv_info->class_data = video_conv_info;",
          "1035:         }",
          "1037:         entity = (video_entity_t*) wmem_tree_lookup32(video_conv_info->entities, entity_id);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1035:             usb_conv_info->class_data_type = USB_CONV_VIDEO;",
          "1036:         } else if (usb_conv_info->class_data_type != USB_CONV_VIDEO) {",
          "1038:             return descriptor_len;",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-usb.h||epan/dissectors/packet-usb.h": [
          "File: epan/dissectors/packet-usb.h -> epan/dissectors/packet-usb.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "81:     guint64 usb_id;",
          "82: } usb_trans_info_t;",
          "86: struct _usb_conv_info_t {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "84: enum usb_conv_class_data_type {USB_CONV_UNKNOWN = 0, USB_CONV_AUDIO, USB_CONV_VIDEO, USB_CONV_MASS_STORAGE};",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "104:     wmem_tree_t *transactions;",
          "109:     wmem_array_t *alt_settings;",
          "110: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "110:     enum usb_conv_class_data_type class_data_type;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "20e7875c9646a76b9359f6aa90306bc50ca684e5",
      "candidate_info": {
        "commit_hash": "20e7875c9646a76b9359f6aa90306bc50ca684e5",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/20e7875c9646a76b9359f6aa90306bc50ca684e5",
        "files": [
          "epan/dissectors/packet-usb-audio.c",
          "epan/dissectors/packet-usb-masstorage.c",
          "epan/dissectors/packet-usb-video.c",
          "epan/dissectors/packet-usb.h"
        ],
        "message": "Make class \"type\" for USB conversations.\n\nUSB dissectors can't assume that only their class type has been passed around in the conversation.  Make explicit check that class type expected matches the dissector and stop/prevent dissection if there isn't a match.\n\n# Conflicts:\n#\tepan/dissectors/packet-u3v.c\n\nBug: 12356\nChange-Id: Ib23973a4ebd0fbb51952ffc118daf95e3389a209\nReviewed-on: https://code.wireshark.org/review/15212\nPetri-Dish: Michael Mann <mmann78@netscape.net>\nReviewed-by: Martin Kaiser <wireshark@kaiser.cx>\nPetri-Dish: Martin Kaiser <wireshark@kaiser.cx>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Michael Mann <mmann78@netscape.net>\nReviewed-on: https://code.wireshark.org/review/15213",
        "before_after_code_files": [
          "epan/dissectors/packet-usb-audio.c||epan/dissectors/packet-usb-audio.c",
          "epan/dissectors/packet-usb-masstorage.c||epan/dissectors/packet-usb-masstorage.c",
          "epan/dissectors/packet-usb-video.c||epan/dissectors/packet-usb-video.c",
          "epan/dissectors/packet-usb.h||epan/dissectors/packet-usb.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-usb-audio.c||epan/dissectors/packet-usb-audio.c",
            "epan/dissectors/packet-usb-masstorage.c||epan/dissectors/packet-usb-masstorage.c",
            "epan/dissectors/packet-usb-video.c||epan/dissectors/packet-usb-video.c",
            "epan/dissectors/packet-usb.h||epan/dissectors/packet-usb.h"
          ],
          "candidate": [
            "epan/dissectors/packet-usb-audio.c||epan/dissectors/packet-usb-audio.c",
            "epan/dissectors/packet-usb-masstorage.c||epan/dissectors/packet-usb-masstorage.c",
            "epan/dissectors/packet-usb-video.c||epan/dissectors/packet-usb-video.c",
            "epan/dissectors/packet-usb.h||epan/dissectors/packet-usb.h"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-usb-audio.c||epan/dissectors/packet-usb-audio.c": [
          "File: epan/dissectors/packet-usb-audio.c -> epan/dissectors/packet-usb-audio.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "323:     if(!audio_conv_info) {",
          "324:         audio_conv_info = wmem_new(wmem_file_scope(), audio_conv_info_t);",
          "325:         usb_conv_info->class_data = audio_conv_info;",
          "328:     }",
          "329:     audio_conv_info->ver_major = ver_major;",
          "330:     offset += 2;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "326:         usb_conv_info->class_data_type = USB_CONV_AUDIO;",
          "329:     } else if (usb_conv_info->class_data_type != USB_CONV_AUDIO) {",
          "331:         return 0;",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-usb-masstorage.c||epan/dissectors/packet-usb-masstorage.c": [
          "File: epan/dissectors/packet-usb-masstorage.c -> epan/dissectors/packet-usb-masstorage.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "199:         usb_ms_conv_info->itl=wmem_tree_new(wmem_file_scope());",
          "200:         usb_ms_conv_info->itlq=wmem_tree_new(wmem_file_scope());",
          "201:         usb_conv_info->class_data=usb_ms_conv_info;",
          "202:     }",
          "205:     is_request=(pinfo->srcport==NO_ENDPOINT);",
          "207:     col_set_str(pinfo->cinfo, COL_PROTOCOL, \"USBMS\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "202:         usb_conv_info->class_data_type = USB_CONV_MASS_STORAGE;",
          "203:     } else if (usb_conv_info->class_data_type != USB_CONV_MASS_STORAGE) {",
          "205:         return 0;",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-usb-video.c||epan/dissectors/packet-usb-video.c": [
          "File: epan/dissectors/packet-usb-video.c -> epan/dissectors/packet-usb-video.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1035:             video_conv_info = wmem_new(wmem_file_scope(), video_conv_info_t);",
          "1036:             video_conv_info->entities = wmem_tree_new(wmem_file_scope());",
          "1037:             usb_conv_info->class_data = video_conv_info;",
          "1038:         }",
          "1040:         entity = (video_entity_t*) wmem_tree_lookup32(video_conv_info->entities, entity_id);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1038:             usb_conv_info->class_data_type = USB_CONV_VIDEO;",
          "1039:         } else if (usb_conv_info->class_data_type != USB_CONV_VIDEO) {",
          "1041:             return descriptor_len;",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-usb.h||epan/dissectors/packet-usb.h": [
          "File: epan/dissectors/packet-usb.h -> epan/dissectors/packet-usb.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "89:     guint64 usb_id;",
          "90: } usb_trans_info_t;",
          "94: struct _usb_conv_info_t {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "92: enum usb_conv_class_data_type {USB_CONV_UNKNOWN = 0, USB_CONV_AUDIO, USB_CONV_VIDEO, USB_CONV_MASS_STORAGE};",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "112:     wmem_tree_t *transactions;",
          "117:     wmem_array_t *alt_settings;",
          "118: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "118:     enum usb_conv_class_data_type class_data_type;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5d18307cac7be1e6cc143d216545e0319f539774",
      "candidate_info": {
        "commit_hash": "5d18307cac7be1e6cc143d216545e0319f539774",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/5d18307cac7be1e6cc143d216545e0319f539774",
        "files": [
          "epan/dissectors/packet-usb-masstorage.c",
          "epan/dissectors/packet-usb-video.c",
          "epan/dissectors/packet-usb.h"
        ],
        "message": "Make class \"type\" for USB conversations.\n\nUSB dissectors can't assume that only their class type has been passed around in the conversation.  Make explicit check that class type expected matches the dissector and stop/prevent dissection if there isn't a match.\n\nConflicts:\n\tepan/dissectors/packet-usb.h\n\nBug: 12356\nChange-Id: Ib23973a4ebd0fbb51952ffc118daf95e3389a209\nReviewed-on: https://code.wireshark.org/review/15212\nPetri-Dish: Michael Mann <mmann78@netscape.net>\nReviewed-by: Martin Kaiser <wireshark@kaiser.cx>\nPetri-Dish: Martin Kaiser <wireshark@kaiser.cx>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Michael Mann <mmann78@netscape.net>\nReviewed-on: https://code.wireshark.org/review/15214\nReviewed-on: https://code.wireshark.org/review/16120\nReviewed-by: Balint Reczey <balint@balintreczey.hu>",
        "before_after_code_files": [
          "epan/dissectors/packet-usb-masstorage.c||epan/dissectors/packet-usb-masstorage.c",
          "epan/dissectors/packet-usb-video.c||epan/dissectors/packet-usb-video.c",
          "epan/dissectors/packet-usb.h||epan/dissectors/packet-usb.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-usb-masstorage.c||epan/dissectors/packet-usb-masstorage.c",
            "epan/dissectors/packet-usb-video.c||epan/dissectors/packet-usb-video.c",
            "epan/dissectors/packet-usb.h||epan/dissectors/packet-usb.h"
          ],
          "candidate": [
            "epan/dissectors/packet-usb-masstorage.c||epan/dissectors/packet-usb-masstorage.c",
            "epan/dissectors/packet-usb-video.c||epan/dissectors/packet-usb-video.c",
            "epan/dissectors/packet-usb.h||epan/dissectors/packet-usb.h"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-usb-masstorage.c||epan/dissectors/packet-usb-masstorage.c": [
          "File: epan/dissectors/packet-usb-masstorage.c -> epan/dissectors/packet-usb-masstorage.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "200:         usb_ms_conv_info->itl=wmem_tree_new(wmem_file_scope());",
          "201:         usb_ms_conv_info->itlq=wmem_tree_new(wmem_file_scope());",
          "202:         usb_conv_info->class_data=usb_ms_conv_info;",
          "203:     }",
          "206:     is_request=(pinfo->srcport==NO_ENDPOINT);",
          "208:     col_set_str(pinfo->cinfo, COL_PROTOCOL, \"USBMS\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "203:         usb_conv_info->class_data_type = USB_CONV_MASS_STORAGE;",
          "204:     } else if (usb_conv_info->class_data_type != USB_CONV_MASS_STORAGE) {",
          "206:         return 0;",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-usb-video.c||epan/dissectors/packet-usb-video.c": [
          "File: epan/dissectors/packet-usb-video.c -> epan/dissectors/packet-usb-video.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1032:             video_conv_info = wmem_new(wmem_file_scope(), video_conv_info_t);",
          "1033:             video_conv_info->entities = wmem_tree_new(wmem_file_scope());",
          "1034:             usb_conv_info->class_data = video_conv_info;",
          "1035:         }",
          "1037:         entity = (video_entity_t*) wmem_tree_lookup32(video_conv_info->entities, entity_id);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1035:             usb_conv_info->class_data_type = USB_CONV_VIDEO;",
          "1036:         } else if (usb_conv_info->class_data_type != USB_CONV_VIDEO) {",
          "1038:             return descriptor_len;",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-usb.h||epan/dissectors/packet-usb.h": [
          "File: epan/dissectors/packet-usb.h -> epan/dissectors/packet-usb.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "79:     usb_conv_info_t *interface_info;",
          "80: } usb_trans_info_t;",
          "84: struct _usb_conv_info_t {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "82: enum usb_conv_class_data_type {USB_CONV_UNKNOWN = 0, USB_CONV_AUDIO, USB_CONV_VIDEO, USB_CONV_MASS_STORAGE};",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "102:     wmem_tree_t *transactions;",
          "106: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "108:     enum usb_conv_class_data_type class_data_type;",
          "",
          "---------------"
        ]
      }
    }
  ]
}