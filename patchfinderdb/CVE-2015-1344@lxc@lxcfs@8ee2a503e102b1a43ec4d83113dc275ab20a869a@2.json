{
  "cve_id": "CVE-2015-1344",
  "cve_desc": "The do_write_pids function in lxcfs.c in LXCFS before 0.12 does not properly check permissions, which allows local users to gain privileges by writing a pid to the tasks file.",
  "repo": "lxc/lxcfs",
  "patch_hash": "8ee2a503e102b1a43ec4d83113dc275ab20a869a",
  "patch_info": {
    "commit_hash": "8ee2a503e102b1a43ec4d83113dc275ab20a869a",
    "repo": "lxc/lxcfs",
    "commit_url": "https://github.com/lxc/lxcfs/commit/8ee2a503e102b1a43ec4d83113dc275ab20a869a",
    "files": [
      "lxcfs.c"
    ],
    "message": "Implement privilege check when moving tasks\n\nWhen writing pids to a tasks file in lxcfs, lxcfs was checking\nfor privilege over the tasks file but not over the pid being\nmoved.  Since the cgm_movepid request is done as root on the host,\nnot with the requestor's credentials, we must copy the check which\ncgmanager was doing to ensure that the requesting task is allowed\nto change the victim task's cgroup membership.\n\nThis is CVE-2015-1344\nhttps://bugs.launchpad.net/ubuntu/+source/lxcfs/+bug/1512854\n\nSigned-off-by: Serge Hallyn <serge.hallyn@ubuntu.com>",
    "before_after_code_files": [
      "lxcfs.c||lxcfs.c"
    ]
  },
  "patch_diff": {
    "lxcfs.c||lxcfs.c": [
      "File: lxcfs.c -> lxcfs.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1336:  goto loop;",
      "1337: }",
      "1340: {",
      "1341:  int sock[2] = {-1, -1};",
      "1342:  pid_t qpid, cpid = -1;",
      "",
      "[Removed Lines]",
      "1339: static bool do_write_pids(pid_t tpid, const char *contrl, const char *cg, const char *file, const char *buf)",
      "",
      "[Added Lines]",
      "1343: bool hostuid_to_ns(uid_t uid, pid_t pid, uid_t *answer)",
      "1344: {",
      "1345:  FILE *f;",
      "1346:  char line[400];",
      "1348:  sprintf(line, \"/proc/%d/uid_map\", pid);",
      "1349:  if ((f = fopen(line, \"r\")) == NULL) {",
      "1350:   return false;",
      "1351:  }",
      "1354:  fclose(f);",
      "1356:  if (*answer == -1)",
      "1357:   return false;",
      "1358:  return true;",
      "1359: }",
      "1366: void get_pid_creds(pid_t pid, uid_t *uid, gid_t *gid)",
      "1367: {",
      "1368:  char line[400];",
      "1369:  uid_t u;",
      "1370:  gid_t g;",
      "1371:  FILE *f;",
      "1375:  sprintf(line, \"/proc/%d/status\", pid);",
      "1376:  if ((f = fopen(line, \"r\")) == NULL) {",
      "1377:   fprintf(stderr, \"Error opening %s: %s\\n\", line, strerror(errno));",
      "1378:   return;",
      "1379:  }",
      "1380:  while (fgets(line, 400, f)) {",
      "1381:   if (strncmp(line, \"Uid:\", 4) == 0) {",
      "1382:    if (sscanf(line+4, \"%u\", &u) != 1) {",
      "1383:     fprintf(stderr, \"bad uid line for pid %u\\n\", pid);",
      "1384:     fclose(f);",
      "1385:     return;",
      "1386:    }",
      "1388:   } else if (strncmp(line, \"Gid:\", 4) == 0) {",
      "1389:    if (sscanf(line+4, \"%u\", &g) != 1) {",
      "1390:     fprintf(stderr, \"bad gid line for pid %u\\n\", pid);",
      "1391:     fclose(f);",
      "1392:     return;",
      "1393:    }",
      "1395:   }",
      "1396:  }",
      "1397:  fclose(f);",
      "1398: }",
      "1408: bool may_move_pid(pid_t r, uid_t r_uid, pid_t v)",
      "1409: {",
      "1410:  uid_t v_uid, tmpuid;",
      "1411:  gid_t v_gid;",
      "1413:  if (r == v)",
      "1414:   return true;",
      "1415:  if (r_uid == 0)",
      "1416:   return true;",
      "1417:  get_pid_creds(v, &v_uid, &v_gid);",
      "1418:  if (r_uid == v_uid)",
      "1419:   return true;",
      "1420:  if (hostuid_to_ns(r_uid, r, &tmpuid) && tmpuid == 0",
      "1421:    && hostuid_to_ns(v_uid, r, &tmpuid))",
      "1422:   return true;",
      "1423:  return false;",
      "1424: }",
      "1426: static bool do_write_pids(pid_t tpid, uid_t tuid, const char *contrl, const char *cg,",
      "1427:   const char *file, const char *buf)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1379:   if (recv_creds(sock[0], &cred, &v)) {",
      "1380:    if (v == '0') {",
      "1381:     if (fprintf(pids_file, \"%d\", (int) cred.pid) < 0)",
      "1382:      fail = true;",
      "1383:    }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1469:     if (!may_move_pid(tpid, tuid, cred.pid)) {",
      "1470:      fail = true;",
      "1471:      break;",
      "1472:     }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1450:    strcmp(f->file, \"/cgroup.procs\") == 0 ||",
      "1451:    strcmp(f->file, \"cgroup.procs\") == 0)",
      "1454:  else",
      "1455:   r = cgfs_set_value(f->controller, f->cgroup, f->file, localbuf);",
      "",
      "[Removed Lines]",
      "1453:   r = do_write_pids(fc->pid, f->controller, f->cgroup, f->file, localbuf);",
      "",
      "[Added Lines]",
      "1545:   r = do_write_pids(fc->pid, fc->uid, f->controller, f->cgroup, f->file, localbuf);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "0dcc31ea2a038e144cdf1faa3f04972e1070d167",
      "candidate_info": {
        "commit_hash": "0dcc31ea2a038e144cdf1faa3f04972e1070d167",
        "repo": "lxc/lxcfs",
        "commit_url": "https://github.com/lxc/lxcfs/commit/0dcc31ea2a038e144cdf1faa3f04972e1070d167",
        "files": [
          "cgfs.c",
          "lxcfs.c"
        ],
        "message": "first start to converting permissions checks\n\nSigned-off-by: Serge Hallyn <serge.hallyn@ubuntu.com>",
        "before_after_code_files": [
          "cgfs.c||cgfs.c",
          "lxcfs.c||lxcfs.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lxcfs.c||lxcfs.c"
          ],
          "candidate": [
            "lxcfs.c||lxcfs.c"
          ]
        }
      },
      "candidate_diff": {
        "cgfs.c||cgfs.c": [
          "File: cgfs.c -> cgfs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "691:  if (file)",
          "692:   len += strlen(file) + 1;",
          "693:  fnam = alloca(len);",
          "695:   file ? \"/\" : \"\", file ? file : \"\");",
          "697:  ret = stat(fnam, &sb);",
          "",
          "[Removed Lines]",
          "694:  snprintf(fnam, len, \"%s/%s/%s/%s\", basedir, tmpc, cgroup,",
          "",
          "[Added Lines]",
          "694:  snprintf(fnam, len, \"%s/%s/%s%s%s\", basedir, tmpc, cgroup,",
          "",
          "---------------"
        ],
        "lxcfs.c||lxcfs.c": [
          "File: lxcfs.c -> lxcfs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "564:   path2 = last;",
          "565:  }",
          "571:  if (is_child_cgroup(controller, path1, path2)) {",
          "573:    ret = -ENOENT;",
          "574:    goto out;",
          "575:   }",
          "578:    sb->st_mode = S_IFDIR | 00555;",
          "579:    sb->st_nlink = 2;",
          "",
          "[Removed Lines]",
          "572:   if (!caller_may_see_dir(fc->pid, controller, cgroup)) {",
          "576:   if (!caller_is_in_ancestor(fc->pid, controller, cgroup, NULL)) {",
          "",
          "[Added Lines]",
          "567:  pid_t initpid = get_init_pid_for_task(fc->pid);",
          "573:   if (!caller_may_see_dir(initpid, controller, cgroup)) {",
          "577:   if (!caller_is_in_ancestor(initpid, controller, cgroup, NULL)) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "608:   sb->st_gid = k->gid;",
          "609:   sb->st_size = 0;",
          "610:   free_key(k);",
          "612:    ret = -ENOENT;",
          "613:    goto out;",
          "614:   }",
          "",
          "[Removed Lines]",
          "611:   if (!caller_is_in_ancestor(fc->pid, controller, path1, NULL)) {",
          "",
          "[Added Lines]",
          "612:   if (!caller_is_in_ancestor(initpid, controller, path1, NULL)) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "651:   }",
          "652:  }",
          "654:  if (cgroup) {",
          "656:    return -ENOENT;",
          "657:   if (!fc_may_access(fc, controller, cgroup, NULL, O_RDONLY))",
          "658:    return -EACCES;",
          "",
          "[Removed Lines]",
          "655:   if (!caller_may_see_dir(fc->pid, controller, cgroup))",
          "",
          "[Added Lines]",
          "655:  pid_t initpid = get_init_pid_for_task(fc->pid);",
          "657:   if (!caller_may_see_dir(initpid, controller, cgroup))",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "705:   goto out;",
          "706:  }",
          "709:   if (nextcg) {",
          "710:    int ret;",
          "711:    ret = filler(buf, nextcg,  NULL, 0);",
          "",
          "[Removed Lines]",
          "708:  if (!caller_is_in_ancestor(fc->pid, d->controller, d->cgroup, &nextcg)) {",
          "",
          "[Added Lines]",
          "710:  pid_t initpid = get_init_pid_for_task(fc->pid);",
          "711:  if (!caller_is_in_ancestor(initpid, d->controller, d->cgroup, &nextcg)) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "804:  }",
          "805:  free_key(k);",
          "808:   ret = -ENOENT;",
          "809:   goto out;",
          "810:  }",
          "",
          "[Removed Lines]",
          "807:  if (!caller_may_see_dir(fc->pid, controller, path1)) {",
          "",
          "[Added Lines]",
          "810:  pid_t initpid = get_init_pid_for_task(fc->pid);",
          "811:  if (!caller_may_see_dir(initpid, controller, path1)) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1689:  else",
          "1690:   path1 = cgdir;",
          "1693:   if (last && strcmp(next, last) == 0)",
          "1694:    ret = -EEXIST;",
          "1695:   else",
          "",
          "[Removed Lines]",
          "1692:  if (!caller_is_in_ancestor(fc->pid, controller, path1, &next)) {",
          "",
          "[Added Lines]",
          "1696:  pid_t initpid = get_init_pid_for_task(fc->pid);",
          "1697:  if (!caller_is_in_ancestor(initpid, controller, path1, &next)) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1701:   ret = -EACCES;",
          "1702:   goto out;",
          "1703:  }",
          "1705:   ret = -EACCES;",
          "1706:   goto out;",
          "1707:  }",
          "",
          "[Removed Lines]",
          "1704:  if (!caller_is_in_ancestor(fc->pid, controller, path1, NULL)) {",
          "",
          "[Added Lines]",
          "1709:  if (!caller_is_in_ancestor(initpid, controller, path1, NULL)) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1738:   goto out;",
          "1739:  }",
          "1742:   if (!last || strcmp(next, last) == 0)",
          "1743:    ret = -EBUSY;",
          "1744:   else",
          "",
          "[Removed Lines]",
          "1741:  if (!caller_is_in_ancestor(fc->pid, controller, cgroup, &next)) {",
          "",
          "[Added Lines]",
          "1746:  pid_t initpid = get_init_pid_for_task(fc->pid);",
          "1747:  if (!caller_is_in_ancestor(initpid, controller, cgroup, &next)) {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1750:   ret = -EACCES;",
          "1751:   goto out;",
          "1752:  }",
          "1754:   ret = -EACCES;",
          "1755:   goto out;",
          "1756:  }",
          "",
          "[Removed Lines]",
          "1753:  if (!caller_is_in_ancestor(fc->pid, controller, cgroup, NULL)) {",
          "",
          "[Added Lines]",
          "1759:  if (!caller_is_in_ancestor(initpid, controller, cgroup, NULL)) {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1925:   return total_len;",
          "1926:  }",
          "1929:  if (!cg)",
          "1930:   return read_file(\"/proc/meminfo\", buf, size, d);",
          "",
          "[Removed Lines]",
          "1928:  cg = get_pid_cgroup(fc->pid, \"memory\");",
          "",
          "[Added Lines]",
          "1934:  pid_t initpid = get_init_pid_for_task(fc->pid);",
          "1935:  cg = get_pid_cgroup(initpid, \"memory\");",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2104:   return total_len;",
          "2105:  }",
          "2108:  if (!cg)",
          "2109:   return read_file(\"proc/cpuinfo\", buf, size, d);",
          "",
          "[Removed Lines]",
          "2107:  cg = get_pid_cgroup(fc->pid, \"cpuset\");",
          "",
          "[Added Lines]",
          "2114:  pid_t initpid = get_init_pid_for_task(fc->pid);",
          "2115:  cg = get_pid_cgroup(initpid, \"cpuset\");",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "2218:   return total_len;",
          "2219:  }",
          "2222:  if (!cg)",
          "2223:   return read_file(\"/proc/stat\", buf, size, d);",
          "",
          "[Removed Lines]",
          "2221:  cg = get_pid_cgroup(fc->pid, \"cpuset\");",
          "",
          "[Added Lines]",
          "2229:  pid_t initpid = get_init_pid_for_task(fc->pid);",
          "2230:  cg = get_pid_cgroup(initpid, \"cpuset\");",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "2440: static unsigned long get_reaper_busy(pid_t task)",
          "2441: {",
          "2443:  char *cgroup = NULL, *usage_str = NULL;",
          "2444:  unsigned long usage = 0;",
          "2447:   return 0;",
          "2450:  if (!cgroup)",
          "2451:   goto out;",
          "2452:  if (!cgfs_get_value(\"cpuacct\", cgroup, \"cpuacct.usage\", &usage_str))",
          "",
          "[Removed Lines]",
          "2442:  pid_t init = get_init_pid_for_task(task);",
          "2446:  if (init == -1)",
          "2449:  cgroup = get_pid_cgroup(init, \"cpuacct\");",
          "",
          "[Added Lines]",
          "2451:  pid_t initpid = get_init_pid_for_task(task);",
          "2455:  if (initpid == -1)",
          "2458:  cgroup = get_pid_cgroup(initpid, \"cpuacct\");",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "2539:   return total_len;",
          "2540:  }",
          "2543:  if (!cg)",
          "2544:   return read_file(\"/proc/diskstats\", buf, size, d);",
          "",
          "[Removed Lines]",
          "2542:  cg = get_pid_cgroup(fc->pid, \"blkio\");",
          "",
          "[Added Lines]",
          "2551:  pid_t initpid = get_init_pid_for_task(fc->pid);",
          "2552:  cg = get_pid_cgroup(initpid, \"blkio\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "87dce5f65fa498aa21b1d22eed98f1812c935198",
      "candidate_info": {
        "commit_hash": "87dce5f65fa498aa21b1d22eed98f1812c935198",
        "repo": "lxc/lxcfs",
        "commit_url": "https://github.com/lxc/lxcfs/commit/87dce5f65fa498aa21b1d22eed98f1812c935198",
        "files": [
          "cgfs.c",
          "lxcfs.c"
        ],
        "message": "more sanity checking\n\nSigned-off-by: Serge Hallyn <serge.hallyn@ubuntu.com>",
        "before_after_code_files": [
          "cgfs.c||cgfs.c",
          "lxcfs.c||lxcfs.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lxcfs.c||lxcfs.c"
          ],
          "candidate": [
            "lxcfs.c||lxcfs.c"
          ]
        }
      },
      "candidate_diff": {
        "cgfs.c||cgfs.c": [
          "File: cgfs.c -> cgfs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "698:  if (ret < 0)",
          "699:   return NULL;",
          "703:  do {",
          "704:   newkey = malloc(sizeof(struct cgfs_files));",
          "705:  } while (!newkey);",
          "707:  newkey->uid = sb.st_uid;",
          "708:  newkey->gid = sb.st_gid;",
          "709:  newkey->mode = sb.st_mode;",
          "",
          "[Removed Lines]",
          "701:  if (!S_ISREG(sb.st_mode))",
          "702:   return NULL;",
          "706:  newkey->name = must_copy_string(file);",
          "",
          "[Added Lines]",
          "704:  if (file)",
          "705:   newkey->name = must_copy_string(file);",
          "706:  else if (rindex(cgroup, '/'))",
          "707:   newkey->name = must_copy_string(rindex(cgroup, '/'));",
          "708:  else",
          "709:   newkey->name = must_copy_string(cgroup);",
          "",
          "---------------"
        ],
        "lxcfs.c||lxcfs.c": [
          "File: lxcfs.c -> lxcfs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "90: {",
          "91:  int status, ret;",
          "93: again:",
          "94:  ret = waitpid(pid, &status, 0);",
          "95:  if (ret == -1) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "93:  if (pid <= 0)",
          "94:   return -1;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "565:  }",
          "567:  pid_t initpid = get_init_pid_for_task(fc->pid);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "571:  if (initpid <= 0)",
          "572:   initpid = fc->pid;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "653:  }",
          "655:  pid_t initpid = get_init_pid_for_task(fc->pid);",
          "656:  if (cgroup) {",
          "657:   if (!caller_may_see_dir(initpid, controller, cgroup))",
          "658:    return -ENOENT;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "661:  if (initpid <= 0)",
          "662:   initpid = fc->pid;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "708:  }",
          "710:  pid_t initpid = get_init_pid_for_task(fc->pid);",
          "711:  if (!caller_is_in_ancestor(initpid, d->controller, d->cgroup, &nextcg)) {",
          "712:   if (nextcg) {",
          "713:    int ret;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "718:  if (initpid <= 0)",
          "719:   initpid = fc->pid;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "808:  free_key(k);",
          "810:  pid_t initpid = get_init_pid_for_task(fc->pid);",
          "811:  if (!caller_may_see_dir(initpid, controller, path1)) {",
          "812:   ret = -ENOENT;",
          "813:   goto out;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "820:  if (initpid <= 0)",
          "821:   initpid = fc->pid;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1694:   path1 = cgdir;",
          "1696:  pid_t initpid = get_init_pid_for_task(fc->pid);",
          "1697:  if (!caller_is_in_ancestor(initpid, controller, path1, &next)) {",
          "1699:    ret = -EEXIST;",
          "1700:   else",
          "1701:    ret = -ENOENT;",
          "",
          "[Removed Lines]",
          "1698:   if (last && strcmp(next, last) == 0)",
          "",
          "[Added Lines]",
          "1708:  if (initpid <= 0)",
          "1709:   initpid = fc->pid;",
          "1711:   if (!next)",
          "1712:    ret = -EINVAL;",
          "1713:   else if (last && strcmp(next, last) == 0)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1744:  }",
          "1746:  pid_t initpid = get_init_pid_for_task(fc->pid);",
          "1747:  if (!caller_is_in_ancestor(initpid, controller, cgroup, &next)) {",
          "1748:   if (!last || strcmp(next, last) == 0)",
          "1749:    ret = -EBUSY;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1762:  if (initpid <= 0)",
          "1763:   initpid = fc->pid;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1932:  }",
          "1934:  pid_t initpid = get_init_pid_for_task(fc->pid);",
          "1935:  cg = get_pid_cgroup(initpid, \"memory\");",
          "1936:  if (!cg)",
          "1937:   return read_file(\"/proc/meminfo\", buf, size, d);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1952:  if (initpid <= 0)",
          "1953:   initpid = fc->pid;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2112:  }",
          "2114:  pid_t initpid = get_init_pid_for_task(fc->pid);",
          "2115:  cg = get_pid_cgroup(initpid, \"cpuset\");",
          "2116:  if (!cg)",
          "2117:   return read_file(\"proc/cpuinfo\", buf, size, d);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2134:  if (initpid <= 0)",
          "2135:   initpid = fc->pid;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2227:  }",
          "2229:  pid_t initpid = get_init_pid_for_task(fc->pid);",
          "2230:  cg = get_pid_cgroup(initpid, \"cpuset\");",
          "2231:  if (!cg)",
          "2232:   return read_file(\"/proc/stat\", buf, size, d);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2251:  if (initpid <= 0)",
          "2252:   initpid = fc->pid;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2357:  pid_t qpid;",
          "2359:  qpid = get_init_pid_for_task(pid);",
          "2361:   return 0;",
          "2363:  ret = snprintf(fnam, 100, \"/proc/%d\", qpid);",
          "",
          "[Removed Lines]",
          "2360:  if (qpid < 0)",
          "",
          "[Added Lines]",
          "2383:  if (qpid <= 0)",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "2401:  if (pid < 0)",
          "2402:   _exit(1);",
          "2403:  if (pid != 0) {",
          "2405:   _exit(0);",
          "2406:  }",
          "",
          "[Removed Lines]",
          "2404:   wait_for_pid(pid);",
          "",
          "[Added Lines]",
          "2427:   if (!wait_for_pid(pid))",
          "2428:    _exit(1);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "2410:  cred.gid = 0;",
          "2411:  cred.pid = 1;",
          "2412:  v = '1';",
          "2414:  _exit(0);",
          "2415: }",
          "",
          "[Removed Lines]",
          "2413:  send_creds(sock, &cred, v, true);",
          "",
          "[Added Lines]",
          "2437:  if (send_creds(sock, &cred, v, true) != SEND_CREDS_OK)",
          "2438:   _exit(1);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "2433:  if (!pid) {",
          "2434:   close(sock[1]);",
          "2435:   write_task_init_pid_exit(sock[0], task);",
          "2436:  }",
          "2438:  if (!recv_creds(sock[1], &cred, &v))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2461:   _exit(0);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "2442: out:",
          "2443:  close(sock[0]);",
          "2444:  close(sock[1]);",
          "2446:  return ret;",
          "2447: }",
          "",
          "[Removed Lines]",
          "2445:  wait_for_pid(pid);",
          "",
          "[Added Lines]",
          "2471:  if (pid > 0)",
          "2472:   wait_for_pid(pid);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "2452:  char *cgroup = NULL, *usage_str = NULL;",
          "2453:  unsigned long usage = 0;",
          "2456:   return 0;",
          "2458:  cgroup = get_pid_cgroup(initpid, \"cpuacct\");",
          "",
          "[Removed Lines]",
          "2455:  if (initpid == -1)",
          "",
          "[Added Lines]",
          "2482:  if (initpid <= 0)",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "2549:  }",
          "2551:  pid_t initpid = get_init_pid_for_task(fc->pid);",
          "2552:  cg = get_pid_cgroup(initpid, \"blkio\");",
          "2553:  if (!cg)",
          "2554:   return read_file(\"/proc/diskstats\", buf, size, d);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2579:  if (initpid <= 0)",
          "2580:   initpid = fc->pid;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ff96a5f9bed951f872ea5871c5c6306cc5d72065",
      "candidate_info": {
        "commit_hash": "ff96a5f9bed951f872ea5871c5c6306cc5d72065",
        "repo": "lxc/lxcfs",
        "commit_url": "https://github.com/lxc/lxcfs/commit/ff96a5f9bed951f872ea5871c5c6306cc5d72065",
        "files": [
          "lxcfs.c"
        ],
        "message": "lxcfs.c: minor cleanups\n\nMake some of these fns easier to read.\n\nSigned-off-by: Serge Hallyn <serge.hallyn@ubuntu.com>",
        "before_after_code_files": [
          "lxcfs.c||lxcfs.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lxcfs.c||lxcfs.c"
          ],
          "candidate": [
            "lxcfs.c||lxcfs.c"
          ]
        }
      },
      "candidate_diff": {
        "lxcfs.c||lxcfs.c": [
          "File: lxcfs.c -> lxcfs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1028:  if (pipe(cpipe) < 0)",
          "1029:   _exit(1);",
          "1032:  cpid = fork();",
          "1033:  if (cpid < 0)",
          "1034:   _exit(1);",
          "",
          "[Removed Lines]",
          "1031: loop:",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1042:   }",
          "1043:   close(cpipe[1]);",
          "1044:   pid_to_ns(sock, tpid);",
          "1045:  }",
          "1048:  FD_ZERO(&s);",
          "1049:  FD_SET(cpipe[0], &s);",
          "1050:  tv.tv_sec = 1;",
          "1051:  tv.tv_usec = 0;",
          "1052:  ret = select(cpipe[0]+1, &s, NULL, NULL, &tv);",
          "1053:  if (ret <= 0)",
          "1055:  ret = read(cpipe[0], &v, 1);",
          "1060:  if (!wait_for_pid(cpid))",
          "1061:   _exit(1);",
          "1062:  _exit(0);",
          "1068: }",
          "",
          "[Removed Lines]",
          "1054:   goto again;",
          "1056:  if (ret != sizeof(char) || v != '1') {",
          "1057:   goto again;",
          "1058:  }",
          "1064: again:",
          "1065:  kill(cpid, SIGKILL);",
          "1066:  wait_for_pid(cpid);",
          "1067:  goto loop;",
          "",
          "[Added Lines]",
          "1044:   _exit(1); // not reached",
          "1054:   _exit(1);",
          "1056:  if (ret != sizeof(char) || v != '1')",
          "1057:   _exit(1);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1104:  if (cpid == -1)",
          "1105:   goto out;",
          "1108:   pid_to_ns_wrapper(sock[1], tpid);",
          "1110:  char *ptr = tmpdata;",
          "",
          "[Removed Lines]",
          "1107:  if (!cpid) // child",
          "",
          "[Added Lines]",
          "1101:  if (!cpid) // child - exits when done",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2373:  pid_t cpid;",
          "2374:  struct timeval tv;",
          "2375:  fd_set s;",
          "2378:  if (unshare(CLONE_NEWNS))",
          "2379:   return 0;",
          "",
          "[Removed Lines]",
          "2376:  char v;",
          "",
          "[Added Lines]",
          "2370:  long int v;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2400:  close(fd);",
          "2402:  if (pipe(cpipe) < 0)",
          "2406:  cpid = fork();",
          "2408:   return 0;",
          "2410:  if (!cpid) {",
          "2412:   close(cpipe[0]);",
          "2418:   umount2(\"/proc\", MNT_DETACH);",
          "2419:   if (mount(\"proc\", \"/proc\", \"proc\", 0, NULL)) {",
          "2420:    perror(\"get_pid1_time mount\");",
          "2422:   }",
          "2423:   ret = lstat(\"/proc/1\", &sb);",
          "2424:   if (ret) {",
          "2425:    perror(\"get_pid1_time lstat\");",
          "2427:   }",
          "2429:  }",
          "2433:  FD_ZERO(&s);",
          "2434:  FD_SET(cpipe[0], &s);",
          "2435:  tv.tv_sec = 1;",
          "2436:  tv.tv_usec = 0;",
          "2437:  ret = select(cpipe[0]+1, &s, NULL, NULL, &tv);",
          "2438:  if (ret <= 0)",
          "2440:  ret = read(cpipe[0], &v, 1);",
          "2441:  if (ret != sizeof(char) || v != '1') {",
          "2443:  }",
          "2445:  wait_for_pid(cpid);",
          "2449:  kill(cpid, SIGKILL);",
          "2450:  wait_for_pid(cpid);",
          "2452: }",
          "2454: static long int getreaperage(pid_t qpid)",
          "",
          "[Removed Lines]",
          "2403:   exit(1);",
          "2405: loop:",
          "2407:  if (cpid < 0)",
          "2411:   char b = '1';",
          "2413:   if (write(cpipe[1], &b, sizeof(char)) < 0) {",
          "2414:    fprintf(stderr, \"%s (child): erorr on write: %s\\n\",",
          "2415:     __func__, strerror(errno));",
          "2416:   }",
          "2417:   close(cpipe[1]);",
          "2421:    return 0;",
          "2426:    return 0;",
          "2428:   return time(NULL) - sb.st_ctime;",
          "2439:   goto again;",
          "2442:   goto again;",
          "2446:  _exit(0);",
          "2448: again:",
          "2451:  goto loop;",
          "",
          "[Added Lines]",
          "2397:   return(0);",
          "2400:  if (cpid < 0) {",
          "2401:   close(cpipe[0]);",
          "2402:   close(cpipe[1]);",
          "2404:  }",
          "2411:    _exit(1);",
          "2416:    _exit(1);",
          "2417:   }",
          "2418:   long int retval = time(NULL) - sb.st_ctime;",
          "2419:   if (write(cpipe[1], &retval, sizeof(retval)) < 0) {",
          "2420:    fprintf(stderr, \"%s (child): erorr on write: %s\\n\",",
          "2421:      __func__, strerror(errno));",
          "2423:   close(cpipe[1]);",
          "2424:   _exit(0);",
          "2426:  close(cpipe[1]);",
          "2436:   goto fail;",
          "2439:   goto fail;",
          "2444:  close(cpipe[0]);",
          "2445:  return v;",
          "2447: fail:",
          "2450:  close(cpipe[0]);",
          "2451:  return 0;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2472:  }",
          "2474:  close(mypipe[1]);",
          "2475:  FD_ZERO(&s);",
          "2476:  FD_SET(mypipe[0], &s);",
          "2477:  tv.tv_sec = 1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2476:  if (pid < 0)",
          "2477:   goto out;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2513:  ret = snprintf(fnam, sizeof(fnam), \"/proc/%d/ns/pid\", (int)target);",
          "2514:  if (ret < 0 || ret >= sizeof(fnam))",
          "2517:  fd = open(fnam, O_RDONLY);",
          "2518:  if (fd < 0) {",
          "2521:  }",
          "2522:  if (setns(fd, 0)) {",
          "2524:   close(fd);",
          "2526:  }",
          "2527:  pid = fork();",
          "2528:  if (pid < 0)",
          "2530:  if (pid != 0) {",
          "2531:   wait_for_pid(pid);",
          "2533:  }",
          "",
          "[Removed Lines]",
          "2515:   exit(1);",
          "2519:   perror(\"get_pid1_time open of ns/pid\");",
          "2520:   exit(1);",
          "2523:   perror(\"get_pid1_time setns 1\");",
          "2525:   exit(1);",
          "2529:   exit(1);",
          "2532:   exit(0);",
          "",
          "[Added Lines]",
          "2519:   _exit(1);",
          "2523:   perror(\"write_task_init_pid_exit open of ns/pid\");",
          "2524:   _exit(1);",
          "2527:   perror(\"write_task_init_pid_exit setns 1\");",
          "2529:   _exit(1);",
          "2533:   _exit(1);",
          "2536:   _exit(0);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2538:  cred.pid = 1;",
          "2539:  v = '1';",
          "2540:  send_creds(sock, &cred, v, true);",
          "2542: }",
          "2544: static pid_t get_task_reaper_pid(pid_t task)",
          "",
          "[Removed Lines]",
          "2541:  exit(0);",
          "",
          "[Added Lines]",
          "2545:  _exit(0);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2606: {",
          "2607:  struct fuse_context *fc = fuse_get_context();",
          "2608:  struct file_info *d = (struct file_info *)fi->fh;",
          "2610:  unsigned long int busytime = get_reaper_busy(fc->pid), idletime;",
          "2611:  char *cache = d->buf;",
          "2612:  size_t total_len = 0;",
          "",
          "[Removed Lines]",
          "2609:  long int reaperage = getreaperage(fc->pid);;",
          "",
          "[Added Lines]",
          "2613:  long int reaperage = getreaperage(fc->pid);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e96975cbd807a3203e8cdd7087741853774535c0",
      "candidate_info": {
        "commit_hash": "e96975cbd807a3203e8cdd7087741853774535c0",
        "repo": "lxc/lxcfs",
        "commit_url": "https://github.com/lxc/lxcfs/commit/e96975cbd807a3203e8cdd7087741853774535c0",
        "files": [
          "lxcfs.c"
        ],
        "message": "Avoid redefinition of ret in local scope\n\nSigned-off-by: Serge Hallyn <serge.hallyn@ubuntu.com>",
        "before_after_code_files": [
          "lxcfs.c||lxcfs.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lxcfs.c||lxcfs.c"
          ],
          "candidate": [
            "lxcfs.c||lxcfs.c"
          ]
        }
      },
      "candidate_diff": {
        "lxcfs.c||lxcfs.c": [
          "File: lxcfs.c -> lxcfs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1036:   initpid = fc->pid;",
          "1037:  if (!caller_is_in_ancestor(initpid, d->controller, d->cgroup, &nextcg)) {",
          "1038:   if (nextcg) {",
          "1040:    ret = filler(buf, nextcg,  NULL, 0);",
          "1041:    free(nextcg);",
          "1042:    if (ret != 0) {",
          "",
          "[Removed Lines]",
          "1039:    int ret;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5739d9f48452e78dcb9e71e1024e956141de8b30",
      "candidate_info": {
        "commit_hash": "5739d9f48452e78dcb9e71e1024e956141de8b30",
        "repo": "lxc/lxcfs",
        "commit_url": "https://github.com/lxc/lxcfs/commit/5739d9f48452e78dcb9e71e1024e956141de8b30",
        "files": [
          "lxcfs.c"
        ],
        "message": "fix missing dereferencing in must_strcat_pid\n\nFixes a segfault when reading a /tasks file of a cgroup\ncontaining a large number of pids.\n\nSigned-off-by: Wolfgang Bumiller <w.bumiller@proxmox.com>\nSigned-off-by: Serge Hallyn <serge.hallyn@ubuntu.com>",
        "before_after_code_files": [
          "lxcfs.c||lxcfs.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lxcfs.c||lxcfs.c"
          ],
          "candidate": [
            "lxcfs.c||lxcfs.c"
          ]
        }
      },
      "candidate_diff": {
        "lxcfs.c||lxcfs.c": [
          "File: lxcfs.c -> lxcfs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "85:   } while (!d);",
          "89:   do {",
          "90:    d = realloc(d, *asz + BUF_RESERVE_SIZE);",
          "91:   } while (!d);",
          "",
          "[Removed Lines]",
          "88:  } else if (strlen(tmp) + sz + 1 >= asz) {",
          "",
          "[Added Lines]",
          "88:  } else if (strlen(tmp) + *sz + 1 >= *asz) {",
          "",
          "---------------"
        ]
      }
    }
  ]
}