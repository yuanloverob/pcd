{
  "cve_id": "CVE-2015-8539",
  "cve_desc": "The KEYS subsystem in the Linux kernel before 4.4 allows local users to gain privileges or cause a denial of service (BUG) via crafted keyctl commands that negatively instantiate a key, related to security/keys/encrypted-keys/encrypted.c, security/keys/trusted.c, and security/keys/user_defined.c.",
  "repo": "torvalds/linux",
  "patch_hash": "096fe9eaea40a17e125569f9e657e34cdb6d73bd",
  "patch_info": {
    "commit_hash": "096fe9eaea40a17e125569f9e657e34cdb6d73bd",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/096fe9eaea40a17e125569f9e657e34cdb6d73bd",
    "files": [
      "security/keys/encrypted-keys/encrypted.c",
      "security/keys/trusted.c",
      "security/keys/user_defined.c"
    ],
    "message": "KEYS: Fix handling of stored error in a negatively instantiated user key\n\nIf a user key gets negatively instantiated, an error code is cached in the\npayload area.  A negatively instantiated key may be then be positively\ninstantiated by updating it with valid data.  However, the ->update key\ntype method must be aware that the error code may be there.\n\nThe following may be used to trigger the bug in the user key type:\n\n    keyctl request2 user user \"\" @u\n    keyctl add user user \"a\" @u\n\nwhich manifests itself as:\n\n\tBUG: unable to handle kernel paging request at 00000000ffffff8a\n\tIP: [<ffffffff810a376f>] __call_rcu.constprop.76+0x1f/0x280 kernel/rcu/tree.c:3046\n\tPGD 7cc30067 PUD 0\n\tOops: 0002 [#1] SMP\n\tModules linked in:\n\tCPU: 3 PID: 2644 Comm: a.out Not tainted 4.3.0+ #49\n\tHardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS Bochs 01/01/2011\n\ttask: ffff88003ddea700 ti: ffff88003dd88000 task.ti: ffff88003dd88000\n\tRIP: 0010:[<ffffffff810a376f>]  [<ffffffff810a376f>] __call_rcu.constprop.76+0x1f/0x280\n\t [<ffffffff810a376f>] __call_rcu.constprop.76+0x1f/0x280 kernel/rcu/tree.c:3046\n\tRSP: 0018:ffff88003dd8bdb0  EFLAGS: 00010246\n\tRAX: 00000000ffffff82 RBX: 0000000000000000 RCX: 0000000000000001\n\tRDX: ffffffff81e3fe40 RSI: 0000000000000000 RDI: 00000000ffffff82\n\tRBP: ffff88003dd8bde0 R08: ffff88007d2d2da0 R09: 0000000000000000\n\tR10: 0000000000000000 R11: ffff88003e8073c0 R12: 00000000ffffff82\n\tR13: ffff88003dd8be68 R14: ffff88007d027600 R15: ffff88003ddea700\n\tFS:  0000000000b92880(0063) GS:ffff88007fd00000(0000) knlGS:0000000000000000\n\tCS:  0010 DS: 0000 ES: 0000 CR0: 000000008005003b\n\tCR2: 00000000ffffff8a CR3: 000000007cc5f000 CR4: 00000000000006e0\n\tStack:\n\t ffff88003dd8bdf0 ffffffff81160a8a 0000000000000000 00000000ffffff82\n\t ffff88003dd8be68 ffff88007d027600 ffff88003dd8bdf0 ffffffff810a39e5\n\t ffff88003dd8be20 ffffffff812a31ab ffff88007d027600 ffff88007d027620\n\tCall Trace:\n\t [<ffffffff810a39e5>] kfree_call_rcu+0x15/0x20 kernel/rcu/tree.c:3136\n\t [<ffffffff812a31ab>] user_update+0x8b/0xb0 security/keys/user_defined.c:129\n\t [<     inline     >] __key_update security/keys/key.c:730\n\t [<ffffffff8129e5c1>] key_create_or_update+0x291/0x440 security/keys/key.c:908\n\t [<     inline     >] SYSC_add_key security/keys/keyctl.c:125\n\t [<ffffffff8129fc21>] SyS_add_key+0x101/0x1e0 security/keys/keyctl.c:60\n\t [<ffffffff8185f617>] entry_SYSCALL_64_fastpath+0x12/0x6a arch/x86/entry/entry_64.S:185\n\nNote the error code (-ENOKEY) in EDX.\n\nA similar bug can be tripped by:\n\n    keyctl request2 trusted user \"\" @u\n    keyctl add trusted user \"a\" @u\n\nThis should also affect encrypted keys - but that has to be correctly\nparameterised or it will fail with EINVAL before getting to the bit that\nwill crashes.\n\nReported-by: Dmitry Vyukov <dvyukov@google.com>\nSigned-off-by: David Howells <dhowells@redhat.com>\nAcked-by: Mimi Zohar <zohar@linux.vnet.ibm.com>\nSigned-off-by: James Morris <james.l.morris@oracle.com>",
    "before_after_code_files": [
      "security/keys/encrypted-keys/encrypted.c||security/keys/encrypted-keys/encrypted.c",
      "security/keys/trusted.c||security/keys/trusted.c",
      "security/keys/user_defined.c||security/keys/user_defined.c"
    ]
  },
  "patch_diff": {
    "security/keys/encrypted-keys/encrypted.c||security/keys/encrypted-keys/encrypted.c": [
      "File: security/keys/encrypted-keys/encrypted.c -> security/keys/encrypted-keys/encrypted.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "845:  size_t datalen = prep->datalen;",
      "846:  int ret = 0;",
      "848:  if (datalen <= 0 || datalen > 32767 || !prep->data)",
      "849:   return -EINVAL;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "848:  if (test_bit(KEY_FLAG_NEGATIVE, &key->flags))",
      "849:   return -ENOKEY;",
      "",
      "---------------"
    ],
    "security/keys/trusted.c||security/keys/trusted.c": [
      "File: security/keys/trusted.c -> security/keys/trusted.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1008: static int trusted_update(struct key *key, struct key_preparsed_payload *prep)",
      "1009: {",
      "1011:  struct trusted_key_payload *new_p;",
      "1012:  struct trusted_key_options *new_o;",
      "1013:  size_t datalen = prep->datalen;",
      "1014:  char *datablob;",
      "1015:  int ret = 0;",
      "1017:  if (!p->migratable)",
      "1018:   return -EPERM;",
      "1019:  if (datalen <= 0 || datalen > 32767 || !prep->data)",
      "",
      "[Removed Lines]",
      "1010:  struct trusted_key_payload *p = key->payload.data[0];",
      "",
      "[Added Lines]",
      "1010:  struct trusted_key_payload *p;",
      "1017:  if (test_bit(KEY_FLAG_NEGATIVE, &key->flags))",
      "1018:   return -ENOKEY;",
      "1019:  p = key->payload.data[0];",
      "",
      "---------------"
    ],
    "security/keys/user_defined.c||security/keys/user_defined.c": [
      "File: security/keys/user_defined.c -> security/keys/user_defined.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "121:  if (ret == 0) {",
      "124:   rcu_assign_keypointer(key, upayload);",
      "125:   key->expiry = 0;",
      "126:  }",
      "",
      "[Removed Lines]",
      "123:   zap = key->payload.data[0];",
      "",
      "[Added Lines]",
      "123:   if (!test_bit(KEY_FLAG_NEGATIVE, &key->flags))",
      "124:    zap = key->payload.data[0];",
      "125:   else",
      "126:    zap = NULL;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "de55acd100993c70bb7c5ca9473b59cdc4debb20",
      "candidate_info": {
        "commit_hash": "de55acd100993c70bb7c5ca9473b59cdc4debb20",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/de55acd100993c70bb7c5ca9473b59cdc4debb20",
        "files": [
          "drivers/watchdog/omap_wdt.c"
        ],
        "message": "watchdog: omap_wdt: fix null pointer dereference\n\nFix issue from two patches overlapping causing a kernel oops\n\n[ 3569.297449] Unable to handle kernel NULL pointer dereference at virtual address 00000088\n[ 3569.306272] pgd = dc894000\n[ 3569.309287] [00000088] *pgd=00000000\n[ 3569.313104] Internal error: Oops: 5 [#1] SMP ARM\n[ 3569.317986] Modules linked in: ip6t_rpfilter ip6t_REJECT nf_reject_ipv6 xt_conntrack ebtable_filter ebtable_nat ebtable_broute bridge stp llc ebtables ip6table_security ip6table_raw ip6table_nat nf_conntrack_ipv6 nf_defrag_ipv6 nf_nat_ipv6 ip6table_mangle ip6table_filter ip6_tables iptable_security iptable_raw iptable_nat nf_conntrack_ipv4 nf_defrag_ipv4 nf_nat_ipv4 nf_nat nf_conntrack iptable_mangle musb_dsps cppi41 musb_hdrc phy_am335x udc_core phy_generic phy_am335x_control omap_sham omap_aes omap_rng omap_hwspinlock omap_mailbox hwspinlock_core musb_am335x omap_wdt at24 8250_omap leds_gpio cpufreq_dt smsc davinci_mdio mmc_block ti_cpsw cpsw_common ptp pps_core cpsw_ale davinci_cpdma omap_hsmmc omap_dma mmc_core i2c_dev\n[ 3569.386293] CPU: 0 PID: 1429 Comm: wdctl Not tainted 4.3.0-0.rc7.git0.1.fc24.armv7hl #1\n[ 3569.394740] Hardware name: Generic AM33XX (Flattened Device Tree)\n[ 3569.401179] task: dbd11a00 ti: dbaac000 task.ti: dbaac000\n[ 3569.406917] PC is at omap_wdt_get_timeleft+0xc/0x20 [omap_wdt]\n[ 3569.413106] LR is at watchdog_ioctl+0x3cc/0x42c\n[ 3569.417902] pc : [<bf0ab138>]    lr : [<c0739c54>]    psr: 600f0013\n[ 3569.417902] sp : dbaadf18  ip : 00000003  fp : 7f5d3bbe\n[ 3569.430014] r10: 00000000  r9 : 00000003  r8 : bef21ab8\n[ 3569.435535] r7 : dbbc0f7c  r6 : dbbc0f18  r5 : bef21ab8  r4 : 00000000\n[ 3569.442427] r3 : 00000000  r2 : 00000000  r1 : 8004570a  r0 : dbbc0f18\n[ 3569.449323] Flags: nZCv  IRQs on  FIQs on  Mode SVC_32  ISA ARM  Segment none\n[ 3569.456858] Control: 10c5387d  Table: 9c894019  DAC: 00000051\n[ 3569.462927] Process wdctl (pid: 1429, stack limit = 0xdbaac220)\n[ 3569.469179] Stack: (0xdbaadf18 to 0xdbaae000)\n[ 3569.473790] df00:                                                       bef21ab8 dbf60e38\n[ 3569.482441] df20: dc91b840 8004570a bef21ab8 c03988a4 dbaadf48 dc854000 00000000 dd313850\n[ 3569.491092] df40: ddf033b8 0000570a dc91b80b dbaadf3c dbf60e38 00000020 c0df9250 c0df6c48\n[ 3569.499741] df60: dc91b840 8004570a 00000000 dc91b840 dc91b840 8004570a bef21ab8 00000003\n[ 3569.508389] df80: 00000000 c03989d4 bef21b74 7f5d3bad 00000003 00000036 c020fcc4 dbaac000\n[ 3569.517037] dfa0: 00000000 c020fb00 bef21b74 7f5d3bad 00000003 8004570a bef21ab8 00000001\n[ 3569.525685] dfc0: bef21b74 7f5d3bad 00000003 00000036 00000001 00000000 7f5e4eb0 7f5d3bbe\n[ 3569.534334] dfe0: 7f5e4f10 bef21a3c 7f5d0a54 b6e97e0c a00f0010 00000003 00000000 00000000\n[ 3569.543038] [<bf0ab138>] (omap_wdt_get_timeleft [omap_wdt]) from [<c0739c54>] (watchdog_ioctl+0x3cc/0x42c)\n[ 3569.553266] [<c0739c54>] (watchdog_ioctl) from [<c03988a4>] (do_vfs_ioctl+0x5bc/0x698)\n[ 3569.561648] [<c03988a4>] (do_vfs_ioctl) from [<c03989d4>] (SyS_ioctl+0x54/0x7c)\n[ 3569.569400] [<c03989d4>] (SyS_ioctl) from [<c020fb00>] (ret_fast_syscall+0x0/0x3c)\n[ 3569.577413] Code: e12fff1e e52de004 e8bd4000 e5903060 (e5933088)\n[ 3569.584089] ---[ end trace cec3039bd3ae610a ]---\n\nCc: <stable@vger.kernel.org> # v4.2+\nSigned-off-by: Peter Robinson <pbrobinson@gmail.com>\nAcked-by: Lars Poeschel <poeschel@lemonage.de>\nReviewed-by: Guenter Roeck <linux@roeck-us.net>\nSigned-off-by: Wim Van Sebroeck <wim@iguana.be>",
        "before_after_code_files": [
          "drivers/watchdog/omap_wdt.c||drivers/watchdog/omap_wdt.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "drivers/watchdog/omap_wdt.c||drivers/watchdog/omap_wdt.c": [
          "File: drivers/watchdog/omap_wdt.c -> drivers/watchdog/omap_wdt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "206: static unsigned int omap_wdt_get_timeleft(struct watchdog_device *wdog)",
          "207: {",
          "209:  void __iomem *base = wdev->base;",
          "210:  u32 value;",
          "",
          "[Removed Lines]",
          "208:  struct omap_wdt_dev *wdev = watchdog_get_drvdata(wdog);",
          "",
          "[Added Lines]",
          "208:  struct omap_wdt_dev *wdev = to_omap_wdt_dev(wdog);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f356d7a7ddb5ea545e81c84eecfdf1b5ab4647fc",
      "candidate_info": {
        "commit_hash": "f356d7a7ddb5ea545e81c84eecfdf1b5ab4647fc",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/f356d7a7ddb5ea545e81c84eecfdf1b5ab4647fc",
        "files": [
          "drivers/tty/serial/etraxfs-uart.c"
        ],
        "message": "serial: etraxfs-uart: Fix crash\n\nSince commit 7d8c70d8048c (\"serial: mctrl-gpio: rename init function\"),\ncrisv32 either do not build or crash as follows.\n\nUnable to handle kernel NULL pointer dereference\nLinux 4.3.0-rc7-next-20151101 #1 Sun Nov 1 11:41:28 PST 2015\n...\nCall Trace: [<c0004a0e>] show_stack+0x0/0x9e\n[<c004c0c0>] printk+0x0/0x2c\n[<c00059d4>] show_registers+0x14a/0x1c2\n[<c004c0c0>] printk+0x0/0x2c\n[<c0004b52>] die_if_kernel+0x7c/0x9e\n[<c0005346>] do_page_fault+0x32e/0x3e6\n[<c01dc59c>] of_get_property+0x0/0x2c\n[<c01e0558>] of_irq_parse_raw+0x12a/0x376\n[<c01dc59c>] of_get_property+0x0/0x2c\n[<c0053aca>] get_page_from_freelist+0x73e/0x856\n[<c01dc59c>] of_get_property+0x0/0x2c\n[<c0008912>] d_mmu_refill+0x10a/0x112\n[<c01b488c>] devm_kmalloc+0x40/0x56\n[<c01b47d0>] add_dr+0xc/0x1c\n[<c01b4800>] devm_add_action+0x2/0x4e\n[<c01abdbc>] mctrl_gpio_init_noauto+0x1c/0x76\n[<c01abf9e>] mctrl_gpio_init+0x22/0x110\n\nThe function call in the etraxfs-uart driver was not renamed,\npossibly due to interference with commit 7b9c5162c182 (\"serial:\netraxfs-uart: use mctrl_gpio helpers for handling modem signals\").\n\nFixes: 7d8c70d8048c (\"serial: mctrl-gpio: rename init function\")\nSigned-off-by: Guenter Roeck <linux@roeck-us.net>\nAcked-by: Uwe Kleine-K\u00f6nig <u.kleine-koenig@pengutronix.de>\nAcked-by: Niklas Cassel <nks@flawful.org>\nSigned-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>",
        "before_after_code_files": [
          "drivers/tty/serial/etraxfs-uart.c||drivers/tty/serial/etraxfs-uart.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "drivers/tty/serial/etraxfs-uart.c||drivers/tty/serial/etraxfs-uart.c": [
          "File: drivers/tty/serial/etraxfs-uart.c -> drivers/tty/serial/etraxfs-uart.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "894:  up->regi_ser = of_iomap(np, 0);",
          "895:  up->port.dev = &pdev->dev;",
          "898:  if (IS_ERR(up->gpios))",
          "899:   return PTR_ERR(up->gpios);",
          "",
          "[Removed Lines]",
          "897:  up->gpios = mctrl_gpio_init(&pdev->dev, 0);",
          "",
          "[Added Lines]",
          "897:  up->gpios = mctrl_gpio_init_noauto(&pdev->dev, 0);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b094f89ca42fbb8ce40174d5f85ca8430e499da6",
      "candidate_info": {
        "commit_hash": "b094f89ca42fbb8ce40174d5f85ca8430e499da6",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/b094f89ca42fbb8ce40174d5f85ca8430e499da6",
        "files": [
          "block/blk-mq.c"
        ],
        "message": "blk-mq: fix calling unplug callbacks with preempt disabled\n\nLiu reported that running certain parts of xfstests threw the\nfollowing error:\n\nBUG: sleeping function called from invalid context at mm/page_alloc.c:3190\nin_atomic(): 1, irqs_disabled(): 0, pid: 6, name: kworker/u16:0\n3 locks held by kworker/u16:0/6:\n #0:  (\"writeback\"){++++.+}, at: [<ffffffff8107f083>] process_one_work+0x173/0x730\n #1:  ((&(&wb->dwork)->work)){+.+.+.}, at: [<ffffffff8107f083>] process_one_work+0x173/0x730\n #2:  (&type->s_umount_key#44){+++++.}, at: [<ffffffff811e6805>] trylock_super+0x25/0x60\nCPU: 5 PID: 6 Comm: kworker/u16:0 Tainted: G           OE   4.3.0+ #3\nHardware name: Red Hat KVM, BIOS Bochs 01/01/2011\nWorkqueue: writeback wb_workfn (flush-btrfs-108)\n ffffffff81a3abab ffff88042e282ba8 ffffffff8130191b ffffffff81a3abab\n 0000000000000c76 ffff88042e282ba8 ffff88042e27c180 ffff88042e282bd8\n ffffffff8108ed95 ffff880400000004 0000000000000000 0000000000000c76\nCall Trace:\n [<ffffffff8130191b>] dump_stack+0x4f/0x74\n [<ffffffff8108ed95>] ___might_sleep+0x185/0x240\n [<ffffffff8108eea2>] __might_sleep+0x52/0x90\n [<ffffffff811817e8>] __alloc_pages_nodemask+0x268/0x410\n [<ffffffff8109a43c>] ? sched_clock_local+0x1c/0x90\n [<ffffffff8109a6d1>] ? local_clock+0x21/0x40\n [<ffffffff810b9eb0>] ? __lock_release+0x420/0x510\n [<ffffffff810b534c>] ? __lock_acquired+0x16c/0x3c0\n [<ffffffff811ca265>] alloc_pages_current+0xc5/0x210\n [<ffffffffa0577105>] ? rbio_is_full+0x55/0x70 [btrfs]\n [<ffffffff810b7ed8>] ? mark_held_locks+0x78/0xa0\n [<ffffffff81666d50>] ? _raw_spin_unlock_irqrestore+0x40/0x60\n [<ffffffffa0578c0a>] full_stripe_write+0x5a/0xc0 [btrfs]\n [<ffffffffa0578ca9>] __raid56_parity_write+0x39/0x60 [btrfs]\n [<ffffffffa0578deb>] run_plug+0x11b/0x140 [btrfs]\n [<ffffffffa0578e33>] btrfs_raid_unplug+0x23/0x70 [btrfs]\n [<ffffffff812d36c2>] blk_flush_plug_list+0x82/0x1f0\n [<ffffffff812e0349>] blk_sq_make_request+0x1f9/0x740\n [<ffffffff812ceba2>] ? generic_make_request_checks+0x222/0x7c0\n [<ffffffff812cf264>] ? blk_queue_enter+0x124/0x310\n [<ffffffff812cf1d2>] ? blk_queue_enter+0x92/0x310\n [<ffffffff812d0ae2>] generic_make_request+0x172/0x2c0\n [<ffffffff812d0ad4>] ? generic_make_request+0x164/0x2c0\n [<ffffffff812d0ca0>] submit_bio+0x70/0x140\n [<ffffffffa0577b29>] ? rbio_add_io_page+0x99/0x150 [btrfs]\n [<ffffffffa0578a89>] finish_rmw+0x4d9/0x600 [btrfs]\n [<ffffffffa0578c4c>] full_stripe_write+0x9c/0xc0 [btrfs]\n [<ffffffffa057ab7f>] raid56_parity_write+0xef/0x160 [btrfs]\n [<ffffffffa052bd83>] btrfs_map_bio+0xe3/0x2d0 [btrfs]\n [<ffffffffa04fbd6d>] btrfs_submit_bio_hook+0x8d/0x1d0 [btrfs]\n [<ffffffffa05173c4>] submit_one_bio+0x74/0xb0 [btrfs]\n [<ffffffffa0517f55>] submit_extent_page+0xe5/0x1c0 [btrfs]\n [<ffffffffa0519b18>] __extent_writepage_io+0x408/0x4c0 [btrfs]\n [<ffffffffa05179c0>] ? alloc_dummy_extent_buffer+0x140/0x140 [btrfs]\n [<ffffffffa051dc88>] __extent_writepage+0x218/0x3a0 [btrfs]\n [<ffffffff810b7ed8>] ? mark_held_locks+0x78/0xa0\n [<ffffffffa051e2c9>] extent_write_cache_pages.clone.0+0x2f9/0x400 [btrfs]\n [<ffffffffa051e422>] extent_writepages+0x52/0x70 [btrfs]\n [<ffffffffa05001f0>] ? btrfs_set_inode_index+0x70/0x70 [btrfs]\n [<ffffffffa04fcc17>] btrfs_writepages+0x27/0x30 [btrfs]\n [<ffffffff81184df3>] do_writepages+0x23/0x40\n [<ffffffff81212229>] __writeback_single_inode+0x89/0x4d0\n [<ffffffff81212a60>] ? writeback_sb_inodes+0x260/0x480\n [<ffffffff81212a60>] ? writeback_sb_inodes+0x260/0x480\n [<ffffffff8121295f>] ? writeback_sb_inodes+0x15f/0x480\n [<ffffffff81212ad2>] writeback_sb_inodes+0x2d2/0x480\n [<ffffffff810b1397>] ? down_read_trylock+0x57/0x60\n [<ffffffff811e6805>] ? trylock_super+0x25/0x60\n [<ffffffff810d629f>] ? rcu_read_lock_sched_held+0x4f/0x90\n [<ffffffff81212d0c>] __writeback_inodes_wb+0x8c/0xc0\n [<ffffffff812130b5>] wb_writeback+0x2b5/0x500\n [<ffffffff810b7ed8>] ? mark_held_locks+0x78/0xa0\n [<ffffffff810660a8>] ? __local_bh_enable_ip+0x68/0xc0\n [<ffffffff81213362>] ? wb_do_writeback+0x62/0x310\n [<ffffffff812133c1>] wb_do_writeback+0xc1/0x310\n [<ffffffff8107c3d9>] ? set_worker_desc+0x79/0x90\n [<ffffffff81213842>] wb_workfn+0x92/0x330\n [<ffffffff8107f133>] process_one_work+0x223/0x730\n [<ffffffff8107f083>] ? process_one_work+0x173/0x730\n [<ffffffff8108035f>] ? worker_thread+0x18f/0x430\n [<ffffffff810802ed>] worker_thread+0x11d/0x430\n [<ffffffff810801d0>] ? maybe_create_worker+0xf0/0xf0\n [<ffffffff810801d0>] ? maybe_create_worker+0xf0/0xf0\n [<ffffffff810858df>] kthread+0xef/0x110\n [<ffffffff8108f74e>] ? schedule_tail+0x1e/0xd0\n [<ffffffff810857f0>] ? __init_kthread_worker+0x70/0x70\n [<ffffffff816673bf>] ret_from_fork+0x3f/0x70\n [<ffffffff810857f0>] ? __init_kthread_worker+0x70/0x70\n\nThe issue is that we've got the software context pinned while\ncalling blk_flush_plug_list(), which flushes callbacks that\nare allowed to sleep. btrfs and raid has such callbacks.\n\nFlip the checks around a bit, so we can enable preempt a bit\nearlier and flush plugs without having preempt disabled.\n\nThis only affects blk-mq driven devices, and only those that\nregister a single queue.\n\nReported-by: Liu Bo <bo.li.liu@oracle.com>\nTested-by: Liu Bo <bo.li.liu@oracle.com>\nCc: stable@kernel.org\nSigned-off-by: Jens Axboe <axboe@fb.com>",
        "before_after_code_files": [
          "block/blk-mq.c||block/blk-mq.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "block/blk-mq.c||block/blk-mq.c": [
          "File: block/blk-mq.c -> block/blk-mq.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1380:   blk_mq_bio_to_request(rq, bio);",
          "1381:   if (!request_count)",
          "1382:    trace_block_plug(q);",
          "1384:    blk_flush_plug_list(plug, false);",
          "1385:    trace_block_plug(q);",
          "1386:   }",
          "1387:   list_add_tail(&rq->queuelist, &plug->mq_list);",
          "1389:   return cookie;",
          "1390:  }",
          "",
          "[Removed Lines]",
          "1383:   else if (request_count >= BLK_MAX_REQUEST_COUNT) {",
          "1388:   blk_mq_put_ctx(data.ctx);",
          "",
          "[Added Lines]",
          "1385:   blk_mq_put_ctx(data.ctx);",
          "1387:   if (request_count >= BLK_MAX_REQUEST_COUNT) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "be821fd8e62765de43cc4f0e2db363d0e30a7e9b",
      "candidate_info": {
        "commit_hash": "be821fd8e62765de43cc4f0e2db363d0e30a7e9b",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/be821fd8e62765de43cc4f0e2db363d0e30a7e9b",
        "files": [
          "drivers/scsi/scsi_sysfs.c"
        ],
        "message": "scsi_sysfs: protect against double execution of __scsi_remove_device()\n\nOn some host errors storvsc module tries to remove sdev by scheduling a job\nwhich does the following:\n\n   sdev = scsi_device_lookup(wrk->host, 0, 0, wrk->lun);\n   if (sdev) {\n       scsi_remove_device(sdev);\n       scsi_device_put(sdev);\n   }\n\nWhile this code seems correct the following crash is observed:\n\n general protection fault: 0000 [#1] SMP DEBUG_PAGEALLOC\n RIP: 0010:[<ffffffff81169979>]  [<ffffffff81169979>] bdi_destroy+0x39/0x220\n ...\n [<ffffffff814aecdc>] ? _raw_spin_unlock_irq+0x2c/0x40\n [<ffffffff8127b7db>] blk_cleanup_queue+0x17b/0x270\n [<ffffffffa00b54c4>] __scsi_remove_device+0x54/0xd0 [scsi_mod]\n [<ffffffffa00b556b>] scsi_remove_device+0x2b/0x40 [scsi_mod]\n [<ffffffffa00ec47d>] storvsc_remove_lun+0x3d/0x60 [hv_storvsc]\n [<ffffffff81080791>] process_one_work+0x1b1/0x530\n ...\n\nThe problem comes with the fact that many such jobs (for the same device)\nare being scheduled simultaneously. While scsi_remove_device() uses\nshost->scan_mutex and scsi_device_lookup() will fail for a device in\nSDEV_DEL state there is no protection against someone who did\nscsi_device_lookup() before we actually entered __scsi_remove_device(). So\nthe whole scenario looks like that: two callers do simultaneous (or\npreemption happens) calls to scsi_device_lookup() ant these calls succeed\nfor both of them, after that they try doing scsi_remove_device().\nshost->scan_mutex only serializes their calls to __scsi_remove_device()\nand we end up doing the cleanup path twice.\n\nSigned-off-by: Vitaly Kuznetsov <vkuznets@redhat.com>\nReviewed-by: Christoph Hellwig <hch@lst.de>\nSigned-off-by: Martin K. Petersen <martin.petersen@oracle.com>",
        "before_after_code_files": [
          "drivers/scsi/scsi_sysfs.c||drivers/scsi/scsi_sysfs.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "drivers/scsi/scsi_sysfs.c||drivers/scsi/scsi_sysfs.c": [
          "File: drivers/scsi/scsi_sysfs.c -> drivers/scsi/scsi_sysfs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1100: {",
          "1101:  struct device *dev = &sdev->sdev_gendev;",
          "1103:  if (sdev->is_visible) {",
          "1104:   if (scsi_device_set_state(sdev, SDEV_CANCEL) != 0)",
          "1105:    return;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1108:  if (sdev->sdev_state == SDEV_DEL)",
          "1109:   return;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "000255b7dfc3119c13f388f179d6fc19cd00eada",
      "candidate_info": {
        "commit_hash": "000255b7dfc3119c13f388f179d6fc19cd00eada",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/000255b7dfc3119c13f388f179d6fc19cd00eada",
        "files": [
          "drivers/gpio/gpio-omap.c"
        ],
        "message": "gpio: omap: drop omap1 mpuio specific irq_mask/unmask callbacks\n\nOriginally OMAP MPUIO GPIO irqchip was implemented using Generic irq\nchip, but after set of reworks Generic irq chip code was replaced by\ncommon OMAP GPIO implementation and finally removed by\ncommit d2d05c65c40e (\"gpio: omap: Fix regression for MPUIO interrupts\").\nUnfortunately, above commit left .irq_mask/unmask callbacks assigned\nas below for MPUIO GPIO case:\n\tirqc->irq_mask = irq_gc_mask_set_bit;\n\tirqc->irq_unmask = irq_gc_mask_clr_bit;\n\nThis now causes boot failure on OMAP1 platforms, after\ncommit 450fa54cfd66 (\"gpio: omap: convert to use generic irq handler\")\nwhich forces these callbacks to be called during GPIO IRQs mapping\nfrom gpiochip_irq_map:\n\nUnable to handle kernel NULL pointer dereference at virtual address 00000000\npgd = c0004000\n[00000000] *pgd=00000000\nInternal error: Oops: 75 [#1] ARM\nModules linked in:\nCPU: 0 PID: 1 Comm: swapper Not tainted 4.4.0-rc1-e3-los_afe0c+-00002-g25379c0-dirty #1\nHardware name: Amstrad E3 (Delta)\ntask: c1836000 ti: c1838000 task.ti: c1838000\nPC is at irq_gc_mask_set_bit+0x1c/0x60\nLR is at __irq_do_set_handler+0x118/0x15c\npc : [<c004848c>]    lr : [<c0047d4c>]    psr: 600000d3\nsp : c1839c90  ip : c1862c64  fp : c1839c9c\nr10: 00000000  r9 : c0411950  r8 : c0411bbc\nr7 : 00000000  r6 : c185c310  r5 : c00444e8  r4 : c185c300\nr3 : c1854b50  r2 : 00000000  r1 : 00000000  r0 : c185c310\nFlags: nZCv  IRQs off  FIQs off  Mode SVC_32  ISA ARM  Segment kernel\nControl: 0000317f  Table: 10004000  DAC: 00000057\nProcess swapper (pid: 1, stack limit = 0xc1838190)\nStack: (0xc1839c90 to 0xc183a000)\n\n[...]\n\nBacktrace:\n[<c0048470>] (irq_gc_mask_set_bit) from [<c0047d4c>] (__irq_do_set_handler+0x118/0x15c)\n[<c0047c34>] (__irq_do_set_handler) from [<c0047dd4>] (__irq_set_handler+0x44/0x5c)\n r6:00000000 r5:c00444e8 r4:c185c300\n[<c0047d90>] (__irq_set_handler) from [<c0047e1c>] (irq_set_chip_and_handler_name+0x30/0x34)\n r7:00000050 r6:00000000 r5:c00444e8 r4:00000050\n[<c0047dec>] (irq_set_chip_and_handler_name) from [<c01b345c>] (gpiochip_irq_map+0x3c/0x8c)\n r7:00000050 r6:00000000 r5:00000050 r4:c1862c64\n[<c01b3420>] (gpiochip_irq_map) from [<c0049670>] (irq_domain_associate+0x7c/0x1c4)\n r5:c185c310 r4:c185cb00\n[<c00495f4>] (irq_domain_associate) from [<c0049894>] (irq_domain_add_simple+0x98/0xc0)\n r8:c0411bbc r7:c185cb00 r6:00000050 r5:00000010 r4:00000001\n[<c00497fc>] (irq_domain_add_simple) from [<c01b3328>] (_gpiochip_irqchip_add+0x64/0x10c)\n r7:c1862c64 r6:c0419280 r5:c1862c64 r4:c1854b50\n[<c01b32c4>] (_gpiochip_irqchip_add) from [<c01b79f4>] (omap_gpio_probe+0x2fc/0x63c)\n r5:c1854b50 r4:c1862c10\n[<c01b76f8>] (omap_gpio_probe) from [<c01fcf58>] (platform_drv_probe+0x2c/0x64)\n r10:00000000 r9:c03e45e8 r8:00000000 r7:c0419294 r6:c0411984 r5:c0419294\n r4:c0411950\n[<c01fcf2c>] (platform_drv_probe) from [<c01fb668>] (really_probe+0x160/0x29c)\n\nHence, fix it by remove obsolete callbacks assignment. After this\nchange \tomap_gpio_mask_irq()/omap_gpio_unmask_irq() will be used\nfor MPUIO IRQs masking, but this now happens anyway from\nomap_gpio_irq_startup/shutdown().\n\nCc: Tony Lindgren <tony@atomide.com>\nFixes: commit d2d05c65c40e (\"gpio: omap: Fix regression for MPUIO interrupts\")\nReported-by: Aaro Koskinen <aaro.koskinen@iki.fi>\nSigned-off-by: Grygorii Strashko <grygorii.strashko@ti.com>\nAcked-by: Santosh Shilimkar <ssantosh@kernel.org>\nTested-by: Aaro Koskinen <aaro.koskinen@iki.fi>\nSigned-off-by: Linus Walleij <linus.walleij@linaro.org>",
        "before_after_code_files": [
          "drivers/gpio/gpio-omap.c||drivers/gpio/gpio-omap.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "drivers/gpio/gpio-omap.c||drivers/gpio/gpio-omap.c": [
          "File: drivers/gpio/gpio-omap.c -> drivers/gpio/gpio-omap.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1123:  if (bank->is_mpuio) {",
          "1124:   irqc->irq_ack = dummy_irq_chip.irq_ack;",
          "1127:   if (!bank->regs->wkup_en)",
          "1128:    irqc->irq_set_wake = NULL;",
          "1129:  }",
          "",
          "[Removed Lines]",
          "1125:   irqc->irq_mask = irq_gc_mask_set_bit;",
          "1126:   irqc->irq_unmask = irq_gc_mask_clr_bit;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}