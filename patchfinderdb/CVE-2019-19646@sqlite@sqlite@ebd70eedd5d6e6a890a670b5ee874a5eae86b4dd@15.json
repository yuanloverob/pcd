{
  "cve_id": "CVE-2019-19646",
  "cve_desc": "pragma.c in SQLite through 3.30.1 mishandles NOT NULL in an integrity_check PRAGMA command in certain cases of generated columns.",
  "repo": "sqlite/sqlite",
  "patch_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
  "patch_info": {
    "commit_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/pragma.c",
      "test/gencol1.test"
    ],
    "message": "Fix the NOT NULL verification logic in PRAGMA integrity_check so that it works for generated columns whose value is the result of a comparison operator. Ticket [bd8c280671ba44a7]\n\nFossilOrigin-Name: f3b39c71b88cb6721f443de56cdce4c08252453a5e340b00a2bd88dc10c42400",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/pragma.c||src/pragma.c",
      "test/gencol1.test||test/gencol1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: e3398c5ffb060b2b26334b8598e2c63953741e2d6f5124dbd6bdfc8e94742539",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/pragma.c||src/pragma.c": [
      "File: src/pragma.c -> src/pragma.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1596:           if( j==pTab->iPKey ) continue;",
      "1597:           if( pTab->aCol[j].notNull==0 ) continue;",
      "1598:           sqlite3ExprCodeGetColumnOfTable(v, pTab, iDataCur, j, 3);",
      "1600:           jmp2 = sqlite3VdbeAddOp1(v, OP_NotNull, 3); VdbeCoverage(v);",
      "1601:           zErr = sqlite3MPrintf(db, \"NULL value in %s.%s\", pTab->zName,",
      "1602:                               pTab->aCol[j].zName);",
      "",
      "[Removed Lines]",
      "1599:           sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "",
      "[Added Lines]",
      "1599:           if( sqlite3VdbeGetOp(v,-1)->opcode==OP_Column ){",
      "1600:             sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "1601:           }",
      "",
      "---------------"
    ],
    "test/gencol1.test||test/gencol1.test": [
      "File: test/gencol1.test -> test/gencol1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "328:   INSERT OR REPLACE INTO t0(c0, c1) VALUES (2, 1), (1, 0)",
      "329: } {1 {FOREIGN KEY constraint failed}}",
      "331: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "331: # 2019-12-09 ticket bd8c280671ba44a7",
      "332: # With generated columns, the sqlite3ExprGetColumnOfTable() routine might",
      "333: # generate a code sequence that does not end with OP_Column.  So check to",
      "334: # make sure that the last instruction generated is an OP_column prior to",
      "335: # applying the OPFLAG_TYPEOFARG optimization to NOT NULL checks in the",
      "336: # PRAGMA integrity_check code.",
      "337: #",
      "338: sqlite3 db :memory:",
      "339: do_execsql_test gencol1-12.10 {",
      "340:   CREATE TABLE t0 (c0, c1 NOT NULL AS (c0==0));",
      "341:   INSERT INTO t0(c0) VALUES (0);",
      "342:   PRAGMA integrity_check;",
      "343: } {ok}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "2da8d6fe7428fb9f82b5224b7adb9c65098e459c",
      "candidate_info": {
        "commit_hash": "2da8d6fe7428fb9f82b5224b7adb9c65098e459c",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/2da8d6fe7428fb9f82b5224b7adb9c65098e459c",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/insert.c",
          "test/insert.test"
        ],
        "message": "If an AFTER DELETE trigger fires when a conflict row is deleted by REPLACE conflict resolution, make sure the conflict really has been resolved and that the trigger did not recreate the row before continuing. Ticket [a8a4847a2d96f5de]\n\nFossilOrigin-Name: eea1e7aa57e74c4329003f4550168e2aed9e33d2301a3ba84b10781a9cebbc1b",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/insert.c||src/insert.c",
          "test/insert.test||test/insert.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 7248e3476511ecd317f54edcfe1e87443bfdcc1b10c89c7734eefcabafec6c0b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/insert.c||src/insert.c": [
          "File: src/insert.c -> src/insert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1582:           sqlite3MultiWrite(pParse);",
          "1583:           sqlite3GenerateRowDelete(pParse, pTab, pTrigger, iDataCur, iIdxCur,",
          "1584:                                    regNewData, 1, 0, OE_Replace, 1, -1);",
          "1585:         }else{",
          "1586: #ifdef SQLITE_ENABLE_PREUPDATE_HOOK",
          "1587:           assert( HasRowid(pTab) );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1585:           sqlite3VdbeAddOp3(v, OP_NotExists, iDataCur, addrRowidOk, regNewData);",
          "1586:           sqlite3RowidConstraint(pParse, OE_Abort, pTab);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1829:       }",
          "1830:       default: {",
          "1831:         Trigger *pTrigger = 0;",
          "1832:         assert( onError==OE_Replace );",
          "1833:         if( db->flags&SQLITE_RecTriggers ){",
          "1834:           pTrigger = sqlite3TriggersExist(pParse, pTab, TK_DELETE, 0, 0);",
          "1835:         }",
          "1836:         if( pTrigger || sqlite3FkRequired(pParse, pTab, 0, 0) ){",
          "1837:           sqlite3MultiWrite(pParse);",
          "1838:         }",
          "1839:         sqlite3GenerateRowDelete(pParse, pTab, pTrigger, iDataCur, iIdxCur,",
          "1840:             regR, nPkField, 0, OE_Replace,",
          "1841:             (pIdx==pPk ? ONEPASS_SINGLE : ONEPASS_OFF), iThisCur);",
          "1842:         seenReplace = 1;",
          "1843:         break;",
          "1844:       }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1834:         int bRetryConstraintCheck = 0;",
          "1841:           bRetryConstraintCheck = 1;",
          "1846:         if( bRetryConstraintCheck ){",
          "1847:           sqlite3VdbeAddOp4Int(v, OP_NoConflict, iThisCur, addrUniqueOk,",
          "1848:                                regIdx, pIdx->nKeyCol); VdbeCoverage(v);",
          "1849:           sqlite3UniqueConstraint(pParse, OE_Abort, pIdx);",
          "1850:         }",
          "",
          "---------------"
        ],
        "test/insert.test||test/insert.test": [
          "File: test/insert.test -> test/insert.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "",
          "[Removed Lines]",
          "1: # 2001 September 15",
          "",
          "[Added Lines]",
          "1: # 2001-09-15",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "11: # This file implements regression tests for SQLite library.  The",
          "12: # focus of this file is testing the INSERT statement.",
          "13: #",
          "16: set testdir [file dirname $argv0]",
          "17: source $testdir/tester.tcl",
          "",
          "[Removed Lines]",
          "14: # $Id: insert.test,v 1.31 2007/04/05 11:25:59 drh Exp $",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "458:   SELECT x FROM t14;",
          "459: } {1}",
          "463: # 2019-08-12.",
          "464: #",
          "",
          "[Removed Lines]",
          "461: integrity_check insert-99.0",
          "",
          "[Added Lines]",
          "460: integrity_check insert-14.2",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "475:   SELECT a, length(b) FROM t1;",
          "476: } {4 33000}",
          "479: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "477: # 2019-10-16",
          "478: # ticket https://www.sqlite.org/src/info/a8a4847a2d96f5de",
          "479: # On a REPLACE INTO, if an AFTER trigger adds back the conflicting",
          "480: # row, you can end up with the wrong number of rows in an index.",
          "481: #",
          "482: db close",
          "483: sqlite3 db :memory:",
          "484: do_catchsql_test insert-16.1 {",
          "485:   PRAGMA recursive_triggers = true;",
          "486:   CREATE TABLE t0(c0,c1);",
          "487:   CREATE UNIQUE INDEX i0 ON t0(c0);",
          "488:   INSERT INTO t0(c0,c1) VALUES(123,1);",
          "489:   CREATE TRIGGER tr0 AFTER DELETE ON t0",
          "490:   BEGIN",
          "491:     INSERT INTO t0 VALUES(123,2);",
          "492:   END;",
          "493:   REPLACE INTO t0(c0,c1) VALUES(123,3);",
          "494: } {1 {UNIQUE constraint failed: t0.c0}}",
          "495: do_execsql_test insert-16.2 {",
          "496:   SELECT * FROM t0;",
          "497: } {123 1}",
          "498: integrity_check insert-16.3",
          "499: do_catchsql_test insert-16.4 {",
          "500:   CREATE TABLE t1(a INTEGER PRIMARY KEY, b);",
          "501:   CREATE INDEX t1b ON t1(b);",
          "502:   INSERT INTO t1 VALUES(1, 'one');",
          "503:   CREATE TRIGGER tr3 AFTER DELETE ON t1 BEGIN",
          "504:     INSERT INTO t1 VALUES(1, 'three');",
          "505:   END;",
          "506:   REPLACE INTO t1 VALUES(1, 'two');",
          "507: } {1 {UNIQUE constraint failed: t1.a}}",
          "508: integrity_check insert-16.5",
          "509: do_catchsql_test insert-16.6 {",
          "510:   PRAGMA foreign_keys = 1;",
          "511:   CREATE TABLE p1(a, b UNIQUE);",
          "512:   CREATE TABLE c1(c, d REFERENCES p1(b) ON DELETE CASCADE);",
          "513:   CREATE TRIGGER tr6 AFTER DELETE ON c1 BEGIN",
          "514:     INSERT INTO p1 VALUES(4, 1);",
          "515:   END;",
          "516:   INSERT INTO p1 VALUES(1, 1);",
          "517:   INSERT INTO c1 VALUES(2, 1);",
          "518:   REPLACE INTO p1 VALUES(3, 1);",
          "519: } {1 {UNIQUE constraint failed: p1.b}}",
          "520: integrity_check insert-16.7",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "69e224f88adb337cb48ba3e432dcad0e43434bce",
      "candidate_info": {
        "commit_hash": "69e224f88adb337cb48ba3e432dcad0e43434bce",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/69e224f88adb337cb48ba3e432dcad0e43434bce",
        "files": [
          "ext/session/sessionB.test",
          "manifest",
          "manifest.uuid",
          "test/fts3expr4.test",
          "test/scanstatus.test"
        ],
        "message": "Reformat the white-space in a few test cases so that the tests work with Tcl 8.6.9.\n\nFossilOrigin-Name: 29d02bf2fa9ecacbcc3e862ca70382f5875da8c1dc7fd27366190045fcc42b15",
        "before_after_code_files": [
          "ext/session/sessionB.test||ext/session/sessionB.test",
          "manifest.uuid||manifest.uuid",
          "test/fts3expr4.test||test/fts3expr4.test",
          "test/scanstatus.test||test/scanstatus.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/session/sessionB.test||ext/session/sessionB.test": [
          "File: ext/session/sessionB.test -> ext/session/sessionB.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "258:   INSERT INTO t2 VALUES('a', 'a', 'a', 'a');",
          "259: } {",
          "260:   DELETE FROM t2 WHERE c = 'a';",
          "264: # INSERT + UPDATE",
          "265: do_patchconcat_test 4.3.4 {",
          "",
          "[Removed Lines]",
          "261: } {",
          "262: }",
          "",
          "[Added Lines]",
          "261: } {}",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 6d39d6a68bf09e0b4f6706218373e74fc03148fd8bdba5031c3de2f750d87cf2",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/fts3expr4.test||test/fts3expr4.test": [
          "File: test/fts3expr4.test -> test/fts3expr4.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "68:   AND {AND {AND {PHRASE 3 0 *} {PHRASE 3 0 lol+}} {PHRASE 3 0 *}} {PHRASE 3 0 h4h+}",
          "69: }",
          "72: do_simple_expr_test 3.4 { *a }   { PHRASE 3 0 a }",
          "73: do_simple_expr_test 3.5 { a*b }  { AND {PHRASE 3 0 a+} {PHRASE 3 0 b} }",
          "74: do_simple_expr_test 3.6 { *a*b } { AND {PHRASE 3 0 a+} {PHRASE 3 0 b} }",
          "",
          "[Removed Lines]",
          "71: do_simple_expr_test 3.3 { * }    { }",
          "",
          "[Added Lines]",
          "71: do_simple_expr_test 3.3 { * }    {}",
          "",
          "---------------"
        ],
        "test/scanstatus.test||test/scanstatus.test": [
          "File: test/scanstatus.test -> test/scanstatus.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "254: }",
          "256: do_execsql_test    4.1.1 { INSERT INTO t1 VALUES(1, 2, 3); }",
          "259: do_execsql_test 4.2 {",
          "260:   CREATE TABLE p1(x PRIMARY KEY);",
          "",
          "[Removed Lines]",
          "257: do_scanstatus_test 4.1.2 { }",
          "",
          "[Added Lines]",
          "257: do_scanstatus_test 4.1.2 {}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "45f3b3cf1de9fcc80e2abfa6fd9924d472fc1199",
      "candidate_info": {
        "commit_hash": "45f3b3cf1de9fcc80e2abfa6fd9924d472fc1199",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/45f3b3cf1de9fcc80e2abfa6fd9924d472fc1199",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/wherecode.c"
        ],
        "message": "Stregthen an assert() in the WHERE clause code generator for the min/max optimization.\n\nFossilOrigin-Name: 1bd4b97d6405c9b093f3bfed914c56088ee13e4a2242be62b74a86660f74f533",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/wherecode.c||src/wherecode.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: d465c3eef458c851d97eea6e4117247d9c69386b276168080dbff7bb64070c93",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/wherecode.c||src/wherecode.c": [
          "File: src/wherecode.c -> src/wherecode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1706:         sqlite3VdbeAddOp2(v, OP_Goto, 0, sqlite3VdbeCurrentAddr(v)+2);",
          "1708:         op = aStartOp[(start_constraints<<2) + (1<<1) + bRev];",
          "1710:         sqlite3VdbeAddOp4Int(v, op, iIdxCur, addrNxt, regBase, nConstraint);",
          "1711:         VdbeCoverage(v);",
          "1712:         VdbeCoverageIf(v, op==OP_SeekGE);  testcase( op==OP_SeekGE );",
          "",
          "[Removed Lines]",
          "1709:         assert( op!=0 );",
          "",
          "[Added Lines]",
          "1709:         assert( op==OP_SeekGE || op==OP_SeekLE );",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3b412ac2473707fc7bc4ce29466d7b7dc4988905",
      "candidate_info": {
        "commit_hash": "3b412ac2473707fc7bc4ce29466d7b7dc4988905",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/3b412ac2473707fc7bc4ce29466d7b7dc4988905",
        "files": [
          "ext/misc/dbdata.c",
          "manifest",
          "manifest.uuid",
          "test/dbdata.test"
        ],
        "message": "Add the sqlite_dbptr virtual table to the dbdata extension. For querying the links between b-tree pages.\n\nFossilOrigin-Name: 3213a15f2133afbb0a4fec3b8f6e0eeca8c0befafd6658c41074e84f589d5d32",
        "before_after_code_files": [
          "ext/misc/dbdata.c||ext/misc/dbdata.c",
          "manifest.uuid||manifest.uuid",
          "test/dbdata.test||test/dbdata.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/misc/dbdata.c||ext/misc/dbdata.c": [
          "File: ext/misc/dbdata.c -> ext/misc/dbdata.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "87: };",
          "90: struct DbdataTable {",
          "93: };",
          "95: #define DBDATA_COLUMN_PGNO        0",
          "",
          "[Removed Lines]",
          "86:   sqlite3_int64 iRowid;",
          "",
          "[Added Lines]",
          "92:   sqlite3_int64 iRowid;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "98: #define DBDATA_COLUMN_VALUE       3",
          "99: #define DBDATA_COLUMN_SCHEMA      4",
          "101: #define DBDATA_SCHEMA             \\",
          "102:       \"CREATE TABLE x(\"           \\",
          "103:       \"  pgno INTEGER,\"           \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "115: #define DBPTR_COLUMN_PGNO         0",
          "116: #define DBPTR_COLUMN_CHILD        1",
          "117: #define DBPTR_COLUMN_SCHEMA       2",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "107:       \"  schema TEXT HIDDEN\"      \\",
          "108:       \")\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "128: #define DBPTR_SCHEMA              \\",
          "129:       \"CREATE TABLE x(\"           \\",
          "130:       \"  pgno INTEGER,\"           \\",
          "131:       \"  child INTEGER,\"          \\",
          "132:       \"  schema TEXT HIDDEN\"      \\",
          "133:       \")\"",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "118:   char **pzErr",
          "119: ){",
          "120:   DbdataTable *pTab = 0;",
          "123:   if( rc==SQLITE_OK ){",
          "124:     pTab = (DbdataTable*)sqlite3_malloc64(sizeof(DbdataTable));",
          "",
          "[Removed Lines]",
          "121:   int rc = sqlite3_declare_vtab(db, DBDATA_SCHEMA);",
          "",
          "[Added Lines]",
          "146:   int rc = sqlite3_declare_vtab(db, pAux ? DBPTR_SCHEMA : DBDATA_SCHEMA);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "127:     }else{",
          "128:       memset(pTab, 0, sizeof(DbdataTable));",
          "129:       pTab->db = db;",
          "130:     }",
          "131:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "155:       pTab->bPtr = (pAux!=0);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "159: static int dbdataBestIndex(sqlite3_vtab *tab, sqlite3_index_info *pIdxInfo){",
          "160:   int i;",
          "161:   int iSchema = -1;",
          "162:   int iPgno = -1;",
          "164:   for(i=0; i<pIdxInfo->nConstraint; i++){",
          "165:     struct sqlite3_index_constraint *p = &pIdxInfo->aConstraint[i];",
          "166:     if( p->op==SQLITE_INDEX_CONSTRAINT_EQ ){",
          "168:         if( p->usable==0 ) return SQLITE_CONSTRAINT;",
          "169:         iSchema = i;",
          "170:       }",
          "",
          "[Removed Lines]",
          "167:       if( p->iColumn==DBDATA_COLUMN_SCHEMA ){",
          "",
          "[Added Lines]",
          "186:   DbdataTable *pTab = (DbdataTable*)tab;",
          "190:   int colSchema = (pTab->bPtr ? DBPTR_COLUMN_SCHEMA : DBDATA_COLUMN_SCHEMA);",
          "195:       if( p->iColumn==colSchema ){",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "210:   pCsr->iPgno = 1;",
          "211:   pCsr->iCell = 0;",
          "212:   pCsr->iField = 0;",
          "213: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "241:   pCsr->bOnePage = 0;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "283: static int dbdataNext(sqlite3_vtab_cursor *pCursor){",
          "286:   pCsr->iRowid++;",
          "287:   while( 1 ){",
          "288:     int rc;",
          "290:     if( pCsr->aPage==0 ){",
          "291:       rc = dbdataLoadPage(pCsr, pCsr->iPgno, &pCsr->aPage, &pCsr->nPage);",
          "295:     }",
          "320:       }",
          "321:       if( pCsr->iCell>=pCsr->nCell ){",
          "322:         sqlite3_free(pCsr->aPage);",
          "323:         pCsr->aPage = 0;",
          "324:         return SQLITE_OK;",
          "325:       }",
          "360:         }else{",
          "362:         }",
          "387:         }",
          "388:       }",
          "400:     }",
          "410:   }",
          "412:   assert( !\"can't get here\" );",
          "",
          "[Removed Lines]",
          "284:   DbdataCursor *pCsr = (DbdataCursor *)pCursor;",
          "292:       if( rc!=SQLITE_OK ) return rc;",
          "293:       pCsr->iCell = 0;",
          "294:       pCsr->nCell = get_uint16(&pCsr->aPage[pCsr->iPgno==1 ? 103 : 3]);",
          "298:     if( pCsr->pRec==0 ){",
          "299:       int iOff = (pCsr->iPgno==1 ? 100 : 0);",
          "300:       int bHasRowid = 0;",
          "301:       int nPointer = 0;",
          "302:       sqlite3_int64 nPayload = 0;",
          "303:       sqlite3_int64 nHdr = 0;",
          "304:       int iHdr;",
          "305:       int U, X;",
          "306:       int nLocal;",
          "308:       switch( pCsr->aPage[iOff] ){",
          "309:         case 0x02:",
          "310:           nPointer = 4;",
          "311:           break;",
          "312:         case 0x0a:",
          "313:           break;",
          "314:         case 0x0d:",
          "315:           bHasRowid = 1;",
          "316:           break;",
          "317:         default:",
          "318:           pCsr->iCell = pCsr->nCell;",
          "319:           break;",
          "327:       iOff += 8 + nPointer + pCsr->iCell*2;",
          "328:       iOff = get_uint16(&pCsr->aPage[iOff]);",
          "331:       iOff += nPointer;",
          "334:       iOff += dbdataGetVarint(&pCsr->aPage[iOff], &nPayload);",
          "337:       if( bHasRowid ){",
          "338:         iOff += dbdataGetVarint(&pCsr->aPage[iOff], &pCsr->iIntkey);",
          "339:       }",
          "342:       pCsr->pRec = (u8*)sqlite3_malloc64(nPayload);",
          "343:       if( pCsr->pRec==0 ) return SQLITE_NOMEM;",
          "344:       pCsr->nRec = nPayload;",
          "346:       U = pCsr->nPage;",
          "347:       if( bHasRowid ){",
          "348:         X = U-35;",
          "349:       }else{",
          "350:         X = ((U-12)*64/255)-23;",
          "351:       }",
          "352:       if( nPayload<=X ){",
          "353:         nLocal = nPayload;",
          "354:       }else{",
          "355:         int M, K;",
          "356:         M = ((U-12)*32/255)-23;",
          "357:         K = M+((nPayload-M)%(U-4));",
          "358:         if( K<=X ){",
          "359:           nLocal = K;",
          "361:           nLocal = M;",
          "363:       }",
          "366:       memcpy(pCsr->pRec, &pCsr->aPage[iOff], nLocal);",
          "367:       iOff += nLocal;",
          "370:       if( nPayload>nLocal ){",
          "371:         sqlite3_int64 nRem = nPayload - nLocal;",
          "372:         u32 pgnoOvfl = get_uint32(&pCsr->aPage[iOff]);",
          "373:         while( nRem>0 ){",
          "374:           u8 *aOvfl = 0;",
          "375:           int nOvfl = 0;",
          "376:           int nCopy;",
          "377:           rc = dbdataLoadPage(pCsr, pgnoOvfl, &aOvfl, &nOvfl);",
          "378:           assert( rc!=SQLITE_OK || nOvfl==pCsr->nPage );",
          "379:           if( rc!=SQLITE_OK ) return rc;",
          "381:           nCopy = U-4;",
          "382:           if( nCopy>nRem ) nCopy = nRem;",
          "383:           memcpy(&pCsr->pRec[nPayload-nRem], &aOvfl[4], nCopy);",
          "384:           nRem -= nCopy;",
          "386:           sqlite3_free(aOvfl);",
          "391:       pCsr->nField = 0;",
          "392:       iHdr = dbdataGetVarint(pCsr->pRec, &nHdr);",
          "393:       while( iHdr<nHdr ){",
          "394:         sqlite3_int64 iDummy;",
          "395:         iHdr += dbdataGetVarint(&pCsr->pRec[iHdr], &iDummy);",
          "396:         pCsr->nField++;",
          "397:       }",
          "399:       pCsr->iField = (bHasRowid ? -2 : -1);",
          "402:     pCsr->iField++;",
          "403:     if( pCsr->iField<pCsr->nField ) return SQLITE_OK;",
          "407:     sqlite3_free(pCsr->pRec);",
          "408:     pCsr->pRec = 0;",
          "409:     pCsr->iCell++;",
          "",
          "[Added Lines]",
          "313:   DbdataCursor *pCsr = (DbdataCursor*)pCursor;",
          "314:   DbdataTable *pTab = (DbdataTable*)pCursor->pVtab;",
          "319:     int iOff = (pCsr->iPgno==1 ? 100 : 0);",
          "323:       if( rc!=SQLITE_OK || pCsr->aPage==0 ) return rc;",
          "324:       pCsr->iCell = pTab->bPtr ? -2 : 0;",
          "325:       pCsr->nCell = get_uint16(&pCsr->aPage[iOff+3]);",
          "328:     if( pTab->bPtr ){",
          "329:       if( pCsr->aPage[iOff]!=0x02 && pCsr->aPage[iOff]!=0x05 ){",
          "330:         pCsr->iCell = pCsr->nCell;",
          "332:       pCsr->iCell++;",
          "336:         if( pCsr->bOnePage ) return SQLITE_OK;",
          "337:         pCsr->iPgno++;",
          "338:       }else{",
          "341:     }else{",
          "343:       if( pCsr->pRec==0 ){",
          "344:         int bHasRowid = 0;",
          "345:         int nPointer = 0;",
          "346:         sqlite3_int64 nPayload = 0;",
          "347:         sqlite3_int64 nHdr = 0;",
          "348:         int iHdr;",
          "349:         int U, X;",
          "350:         int nLocal;",
          "352:         switch( pCsr->aPage[iOff] ){",
          "353:           case 0x02:",
          "354:             nPointer = 4;",
          "355:             break;",
          "356:           case 0x0a:",
          "357:             break;",
          "358:           case 0x0d:",
          "359:             bHasRowid = 1;",
          "360:             break;",
          "361:           default:",
          "363:             pCsr->iCell = pCsr->nCell;",
          "364:             break;",
          "365:         }",
          "367:         if( pCsr->iCell>=pCsr->nCell ){",
          "368:           sqlite3_free(pCsr->aPage);",
          "369:           pCsr->aPage = 0;",
          "370:           if( pCsr->bOnePage ) return SQLITE_OK;",
          "371:           pCsr->iPgno++;",
          "372:           continue;",
          "373:         }",
          "375:         iOff += 8 + nPointer + pCsr->iCell*2;",
          "376:         iOff = get_uint16(&pCsr->aPage[iOff]);",
          "379:         iOff += nPointer;",
          "382:         iOff += dbdataGetVarint(&pCsr->aPage[iOff], &nPayload);",
          "385:         if( bHasRowid ){",
          "386:           iOff += dbdataGetVarint(&pCsr->aPage[iOff], &pCsr->iIntkey);",
          "387:         }",
          "390:         pCsr->pRec = (u8*)sqlite3_malloc64(nPayload);",
          "391:         if( pCsr->pRec==0 ) return SQLITE_NOMEM;",
          "392:         pCsr->nRec = nPayload;",
          "394:         U = pCsr->nPage;",
          "395:         if( bHasRowid ){",
          "396:           X = U-35;",
          "398:           X = ((U-12)*64/255)-23;",
          "400:         if( nPayload<=X ){",
          "401:           nLocal = nPayload;",
          "402:         }else{",
          "403:           int M, K;",
          "404:           M = ((U-12)*32/255)-23;",
          "405:           K = M+((nPayload-M)%(U-4));",
          "406:           if( K<=X ){",
          "407:             nLocal = K;",
          "408:           }else{",
          "409:             nLocal = M;",
          "410:           }",
          "414:         memcpy(pCsr->pRec, &pCsr->aPage[iOff], nLocal);",
          "415:         iOff += nLocal;",
          "418:         if( nPayload>nLocal ){",
          "419:           sqlite3_int64 nRem = nPayload - nLocal;",
          "420:           u32 pgnoOvfl = get_uint32(&pCsr->aPage[iOff]);",
          "421:           while( nRem>0 ){",
          "422:             u8 *aOvfl = 0;",
          "423:             int nOvfl = 0;",
          "424:             int nCopy;",
          "425:             rc = dbdataLoadPage(pCsr, pgnoOvfl, &aOvfl, &nOvfl);",
          "426:             assert( rc!=SQLITE_OK || nOvfl==pCsr->nPage );",
          "427:             if( rc!=SQLITE_OK ) return rc;",
          "429:             nCopy = U-4;",
          "430:             if( nCopy>nRem ) nCopy = nRem;",
          "431:             memcpy(&pCsr->pRec[nPayload-nRem], &aOvfl[4], nCopy);",
          "432:             nRem -= nCopy;",
          "434:             sqlite3_free(aOvfl);",
          "435:           }",
          "436:         }",
          "439:         pCsr->nField = 0;",
          "440:         iHdr = dbdataGetVarint(pCsr->pRec, &nHdr);",
          "441:         while( iHdr<nHdr ){",
          "442:           sqlite3_int64 iDummy;",
          "443:           iHdr += dbdataGetVarint(&pCsr->pRec[iHdr], &iDummy);",
          "444:           pCsr->nField++;",
          "445:         }",
          "447:         pCsr->iField = (bHasRowid ? -2 : -1);",
          "450:       pCsr->iField++;",
          "451:       if( pCsr->iField<pCsr->nField ) return SQLITE_OK;",
          "455:       sqlite3_free(pCsr->pRec);",
          "456:       pCsr->pRec = 0;",
          "457:       pCsr->iCell++;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "440:   }",
          "441:   if( idxNum & 0x02 ){",
          "442:     pCsr->iPgno = sqlite3_value_int(argv[(idxNum & 0x01)]);",
          "443:   }",
          "445:   rc = sqlite3_prepare_v2(pTab->db,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "492:     pCsr->bOnePage = 1;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "533:   int i",
          "534: ){",
          "535:   DbdataCursor *pCsr = (DbdataCursor*)pCursor;",
          "558:         }",
          "562:       }",
          "564:     }",
          "565:   }",
          "566:   return SQLITE_OK;",
          "",
          "[Removed Lines]",
          "536:   switch( i ){",
          "537:     case DBDATA_COLUMN_PGNO:",
          "538:       sqlite3_result_int64(ctx, pCsr->iPgno);",
          "539:       break;",
          "540:     case DBDATA_COLUMN_CELL:",
          "541:       sqlite3_result_int(ctx, pCsr->iCell);",
          "542:       break;",
          "543:     case DBDATA_COLUMN_FIELD:",
          "544:       sqlite3_result_int(ctx, pCsr->iField);",
          "545:       break;",
          "546:     case DBDATA_COLUMN_VALUE: {",
          "547:       if( pCsr->iField<0 ){",
          "548:         sqlite3_result_int64(ctx, pCsr->iIntkey);",
          "549:       }else{",
          "550:         int iHdr;",
          "551:         sqlite3_int64 iType;",
          "552:         sqlite3_int64 iOff;",
          "553:         int i;",
          "554:         iHdr = dbdataGetVarint(pCsr->pRec, &iOff);",
          "555:         for(i=0; i<pCsr->iField; i++){",
          "556:           iHdr += dbdataGetVarint(&pCsr->pRec[iHdr], &iType);",
          "557:           iOff += dbdataValueBytes(iType);",
          "559:         dbdataGetVarint(&pCsr->pRec[iHdr], &iType);",
          "561:         dbdataValue(ctx, iType, &pCsr->pRec[iOff]);",
          "563:       break;",
          "",
          "[Added Lines]",
          "586:   DbdataTable *pTab = (DbdataTable*)pCursor->pVtab;",
          "587:   if( pTab->bPtr ){",
          "588:     switch( i ){",
          "589:       case DBPTR_COLUMN_PGNO:",
          "590:         sqlite3_result_int64(ctx, pCsr->iPgno);",
          "591:         break;",
          "592:       case DBPTR_COLUMN_CHILD: {",
          "593:         int iOff = pCsr->iPgno==1 ? 100 : 0;",
          "594:         if( pCsr->iCell<0 ){",
          "595:           iOff += 8;",
          "596:         }else{",
          "597:           iOff += 12 + pCsr->iCell*2;",
          "598:           iOff = get_uint16(&pCsr->aPage[iOff]);",
          "600:         sqlite3_result_int64(ctx, get_uint32(&pCsr->aPage[iOff]));",
          "601:         break;",
          "602:       }",
          "603:     }",
          "604:   }else{",
          "605:     switch( i ){",
          "606:       case DBDATA_COLUMN_PGNO:",
          "607:         sqlite3_result_int64(ctx, pCsr->iPgno);",
          "608:         break;",
          "609:       case DBDATA_COLUMN_CELL:",
          "610:         sqlite3_result_int(ctx, pCsr->iCell);",
          "611:         break;",
          "612:       case DBDATA_COLUMN_FIELD:",
          "613:         sqlite3_result_int(ctx, pCsr->iField);",
          "614:         break;",
          "615:       case DBDATA_COLUMN_VALUE: {",
          "616:         if( pCsr->iField<0 ){",
          "617:           sqlite3_result_int64(ctx, pCsr->iIntkey);",
          "618:         }else{",
          "619:           int iHdr;",
          "620:           sqlite3_int64 iType;",
          "621:           sqlite3_int64 iOff;",
          "622:           int i;",
          "623:           iHdr = dbdataGetVarint(pCsr->pRec, &iOff);",
          "624:           for(i=0; i<pCsr->iField; i++){",
          "625:             iHdr += dbdataGetVarint(&pCsr->pRec[iHdr], &iType);",
          "626:             iOff += dbdataValueBytes(iType);",
          "627:           }",
          "628:           dbdataGetVarint(&pCsr->pRec[iHdr], &iType);",
          "630:           dbdataValue(ctx, iType, &pCsr->pRec[iOff]);",
          "631:         }",
          "632:         break;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "606:   };",
          "608: }",
          "610: #ifdef _WIN32",
          "",
          "[Removed Lines]",
          "607:   return sqlite3_create_module(db, \"sqlite_dbdata\", &dbdata_module, 0);",
          "",
          "[Added Lines]",
          "678:   int rc = sqlite3_create_module(db, \"sqlite_dbdata\", &dbdata_module, 0);",
          "679:   if( rc==SQLITE_OK ){",
          "680:     rc = sqlite3_create_module(db, \"sqlite_dbptr\", &dbdata_module, (void*)1);",
          "681:   }",
          "682:   return rc;",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: a3ab58832935e1399ecc7e4d8daefa3a6afa6b301792ce7176bc5d7c173510fb",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/dbdata.test||test/dbdata.test": [
          "File: test/dbdata.test -> test/dbdata.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "43:   2 1  1 'ten'",
          "44: }",
          "47: do_execsql_test 1.2 {",
          "48:   INSERT INTO t1 VALUES(NULL, $big);",
          "49:   SELECT value FROM sqlite_dbdata WHERE pgno=2 AND cell=2 AND field=1;",
          "50: } $big",
          "54: finish_test",
          "",
          "[Removed Lines]",
          "46: set big [string repeat big 2000]",
          "",
          "[Added Lines]",
          "46: breakpoint",
          "48:   SELECT pgno, cell, field, quote(value) FROM sqlite_dbdata;",
          "49: } {",
          "50:   1 0 -1 1",
          "51:   1 0 0 'table'",
          "52:   1 0 1 'T1'",
          "53:   1 0 2 'T1'",
          "54:   1 0 3 2",
          "55:   1 0 4 {'CREATE TABLE T1(a, b)'}",
          "56:   2 0 -1 5",
          "57:   2 0  0 'v'",
          "58:   2 0  1 'five'",
          "59:   2 1 -1 10",
          "60:   2 1  0 'x'",
          "61:   2 1  1 'ten'",
          "62: }",
          "64: set big [string repeat big 2000]",
          "65: do_execsql_test 1.3 {",
          "70: #-------------------------------------------------------------------------",
          "71: reset_db",
          "72: db enable_load_extension 1",
          "73: db eval { SELECT load_extension('../dbdata') }",
          "75: do_execsql_test 2.0 {",
          "76:   CREATE TABLE t1(a);",
          "77:   CREATE INDEX i1 ON t1(a);",
          "78:   WITH s(i) AS (",
          "79:     SELECT 1 UNION ALL SELECT i+1 FROM s WHERE i<10",
          "80:   )",
          "81:   INSERT INTO t1 SELECT randomblob(900) FROM s;",
          "82: }",
          "84: do_execsql_test 2.1 {",
          "85:   SELECT * FROM sqlite_dbptr WHERE pgno=2;",
          "86: } {",
          "87:   2 25   2 6   2 7   2 9   2 11   2 13   2 15   2 17   2 19   2 21",
          "88: }",
          "90: do_execsql_test 2.2 {",
          "91:   SELECT * FROM sqlite_dbptr WHERE pgno=3;",
          "92: } {",
          "93:   3 24   3 23",
          "94: }",
          "96: do_execsql_test 2.3 {",
          "97:   SELECT * FROM sqlite_dbptr",
          "98: } {",
          "99:   2 25   2 6   2 7   2 9   2 11   2 13   2 15   2 17   2 19   2 21",
          "100:   3 24   3 23",
          "101: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "95da9d5d46a1df00053191dfce9758dbda434e07",
      "candidate_info": {
        "commit_hash": "95da9d5d46a1df00053191dfce9758dbda434e07",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/95da9d5d46a1df00053191dfce9758dbda434e07",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/loadext.c",
          "src/sqlite3ext.h"
        ],
        "message": "Add the new sqlite3_drop_modules() interface to the loadable extension mechanism.\n\nFossilOrigin-Name: 658bd51623787be4ca87b066a051d119f39056286e223afef3691629cf1ab0e1",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/loadext.c||src/loadext.c",
          "src/sqlite3ext.h||src/sqlite3ext.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 511da0815673ca4a176aa61dc23a8231b2ab77e8363fc184a78b6e17dba64d49",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/loadext.c||src/loadext.c": [
          "File: src/loadext.c -> src/loadext.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "461: #endif",
          "463:   sqlite3_stmt_isexplain,",
          "465: };",
          "",
          "[Removed Lines]",
          "464:   sqlite3_value_frombind",
          "",
          "[Added Lines]",
          "464:   sqlite3_value_frombind,",
          "466:   sqlite3_drop_modules,",
          "",
          "---------------"
        ],
        "src/sqlite3ext.h||src/sqlite3ext.h": [
          "File: src/sqlite3ext.h -> src/sqlite3ext.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "323:   int (*stmt_isexplain)(sqlite3_stmt*);",
          "324:   int (*value_frombind)(sqlite3_value*);",
          "325: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "326:   int (*drop_modules)(sqlite3*,const char**);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "615: #define sqlite3_stmt_isexplain         sqlite3_api->isexplain",
          "616: #define sqlite3_value_frombind         sqlite3_api->frombind",
          "619: #if !defined(SQLITE_CORE) && !defined(SQLITE_OMIT_LOAD_EXTENSION)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "620: #define sqlite3_drop_modules           sqlite3_api->drop_modules",
          "",
          "---------------"
        ]
      }
    }
  ]
}