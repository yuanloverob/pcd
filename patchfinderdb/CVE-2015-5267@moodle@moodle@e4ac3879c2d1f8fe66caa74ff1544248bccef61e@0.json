{
  "cve_id": "CVE-2015-5267",
  "cve_desc": "lib/moodlelib.php in Moodle through 2.6.11, 2.7.x before 2.7.10, 2.8.x before 2.8.8, and 2.9.x before 2.9.2 relies on the PHP mt_rand function to implement the random_string and complex_random_string functions, which makes it easier for remote attackers to predict password-recovery tokens via a brute-force approach.",
  "repo": "moodle/moodle",
  "patch_hash": "e4ac3879c2d1f8fe66caa74ff1544248bccef61e",
  "patch_info": {
    "commit_hash": "e4ac3879c2d1f8fe66caa74ff1544248bccef61e",
    "repo": "moodle/moodle",
    "commit_url": "https://github.com/moodle/moodle/commit/e4ac3879c2d1f8fe66caa74ff1544248bccef61e",
    "files": [
      "lib/moodlelib.php",
      "lib/tests/moodlelib_test.php"
    ],
    "message": "MDL-50860 core: improve creation of random strings",
    "before_after_code_files": [
      "lib/moodlelib.php||lib/moodlelib.php",
      "lib/tests/moodlelib_test.php||lib/tests/moodlelib_test.php"
    ]
  },
  "patch_diff": {
    "lib/moodlelib.php||lib/moodlelib.php": [
      "File: lib/moodlelib.php -> lib/moodlelib.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "7562:     $pool  = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';",
      "7563:     $pool .= 'abcdefghijklmnopqrstuvwxyz';",
      "7564:     $pool .= '0123456789';",
      "7565:     $poollen = strlen($pool);",
      "7566:     $string = '';",
      "7567:     for ($i = 0; $i < $length; $i++) {",
      "7569:     }",
      "7570:     return $string;",
      "7571: }",
      "",
      "[Removed Lines]",
      "7561: function random_string ($length=15) {",
      "7568:         $string .= substr($pool, (mt_rand()%($poollen)), 1);",
      "",
      "[Added Lines]",
      "7561: function random_string($length=15) {",
      "7562:     $randombytes = random_bytes_emulate($length);",
      "7569:         $rand = ord($randombytes[$i]);",
      "7570:         $string .= substr($pool, ($rand%($poollen)), 1);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "7586:     if ($length===null) {",
      "7587:         $length = floor(rand(24, 32));",
      "7588:     }",
      "7589:     $string = '';",
      "7590:     for ($i = 0; $i < $length; $i++) {",
      "7592:     }",
      "7593:     return $string;",
      "7594: }",
      "",
      "[Removed Lines]",
      "7591:         $string .= $pool[(mt_rand()%$poollen)];",
      "",
      "[Added Lines]",
      "7591:     $randombytes = random_bytes_emulate($length);",
      "7594:         $rand = ord($randombytes[$i]);",
      "7595:         $string .= $pool[($rand%$poollen)];",
      "7611: function random_bytes_emulate($length) {",
      "7612:     global $CFG;",
      "7613:     if ($length <= 0) {",
      "7614:         debugging('Invalid random bytes length', DEBUG_DEVELOPER);",
      "7615:         return '';",
      "7616:     }",
      "7617:     if (function_exists('random_bytes')) {",
      "7619:         $hash = @random_bytes($length);",
      "7620:         if ($hash !== false) {",
      "7621:             return $hash;",
      "7622:         }",
      "7623:     }",
      "7624:     if (function_exists('openssl_random_pseudo_bytes')) {",
      "7626:         $hash = openssl_random_pseudo_bytes($length);",
      "7627:         if ($hash !== false) {",
      "7628:             return $hash;",
      "7629:         }",
      "7630:     }",
      "7633:     $hash = sha1(serialize($CFG) . serialize($_SERVER) . microtime(true) . uniqid('', true), true);",
      "7635:     if ($length <= 20) {",
      "7636:         return substr($hash, 0, $length);",
      "7637:     }",
      "7638:     return $hash . random_bytes_emulate($length - 20);",
      "7639: }",
      "",
      "---------------"
    ],
    "lib/tests/moodlelib_test.php||lib/tests/moodlelib_test.php": [
      "File: lib/tests/moodlelib_test.php -> lib/tests/moodlelib_test.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "2906:         $_SERVER['HTTP_X_FORWARDED_FOR'] = $xforwardedfor;",
      "2908:     }",
      "2909: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2913:     public function test_random_bytes_emulate() {",
      "2914:         $result = random_bytes_emulate(10);",
      "2915:         $this->assertSame(10, strlen($result));",
      "2916:         $this->assertnotSame($result, random_bytes_emulate(10));",
      "2918:         $result = random_bytes_emulate(21);",
      "2919:         $this->assertSame(21, strlen($result));",
      "2920:         $this->assertnotSame($result, random_bytes_emulate(21));",
      "2922:         $result = random_bytes_emulate(666);",
      "2923:         $this->assertSame(666, strlen($result));",
      "2925:         $this->assertDebuggingNotCalled();",
      "2927:         $result = random_bytes_emulate(0);",
      "2928:         $this->assertSame('', $result);",
      "2929:         $this->assertDebuggingCalled();",
      "2931:         $result = random_bytes_emulate(-1);",
      "2932:         $this->assertSame('', $result);",
      "2933:         $this->assertDebuggingCalled();",
      "2934:     }",
      "2939:     public function test_random_string() {",
      "2940:         $pool = 'a-zA-Z0-9';",
      "2942:         $result = random_string(10);",
      "2943:         $this->assertSame(10, strlen($result));",
      "2944:         $this->assertRegExp('/^[' . $pool . ']+$/', $result);",
      "2945:         $this->assertNotSame($result, random_string(10));",
      "2947:         $result = random_string(21);",
      "2948:         $this->assertSame(21, strlen($result));",
      "2949:         $this->assertRegExp('/^[' . $pool . ']+$/', $result);",
      "2950:         $this->assertNotSame($result, random_string(21));",
      "2952:         $result = random_string(666);",
      "2953:         $this->assertSame(666, strlen($result));",
      "2954:         $this->assertRegExp('/^[' . $pool . ']+$/', $result);",
      "2956:         $result = random_string();",
      "2957:         $this->assertSame(15, strlen($result));",
      "2958:         $this->assertRegExp('/^[' . $pool . ']+$/', $result);",
      "2960:         $this->assertDebuggingNotCalled();",
      "2962:         $result = random_string(0);",
      "2963:         $this->assertSame('', $result);",
      "2964:         $this->assertDebuggingCalled();",
      "2966:         $result = random_string(-1);",
      "2967:         $this->assertSame('', $result);",
      "2968:         $this->assertDebuggingCalled();",
      "2969:     }",
      "2974:     public function test_complex_random_string() {",
      "2975:         $pool = preg_quote('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789`~!@#%^&*()_+-=[];,./<>?:{} ', '/');",
      "2977:         $result = complex_random_string(10);",
      "2978:         $this->assertSame(10, strlen($result));",
      "2979:         $this->assertRegExp('/^[' . $pool . ']+$/', $result);",
      "2980:         $this->assertNotSame($result, complex_random_string(10));",
      "2982:         $result = complex_random_string(21);",
      "2983:         $this->assertSame(21, strlen($result));",
      "2984:         $this->assertRegExp('/^[' . $pool . ']+$/', $result);",
      "2985:         $this->assertNotSame($result, complex_random_string(21));",
      "2987:         $result = complex_random_string(666);",
      "2988:         $this->assertSame(666, strlen($result));",
      "2989:         $this->assertRegExp('/^[' . $pool . ']+$/', $result);",
      "2991:         $result = complex_random_string();",
      "2992:         $this->assertEquals(28, strlen($result), '', 4); // Expected length is 24 - 32.",
      "2993:         $this->assertRegExp('/^[' . $pool . ']+$/', $result);",
      "2995:         $this->assertDebuggingNotCalled();",
      "2997:         $result = complex_random_string(0);",
      "2998:         $this->assertSame('', $result);",
      "2999:         $this->assertDebuggingCalled();",
      "3001:         $result = complex_random_string(-1);",
      "3002:         $this->assertSame('', $result);",
      "3003:         $this->assertDebuggingCalled();",
      "3004:     }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "6a3acc84defae7d5be8e68cb9d02dca92138f490",
      "candidate_info": {
        "commit_hash": "6a3acc84defae7d5be8e68cb9d02dca92138f490",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/6a3acc84defae7d5be8e68cb9d02dca92138f490",
        "files": [
          "admin/tool/generator/classes/course_backend.php",
          "admin/tool/generator/lang/en/tool_generator.php",
          "lib/classes/event/role_assigned.php",
          "lib/moodlelib.php",
          "lib/tests/moodlelib_test.php"
        ],
        "message": "MDL-55272 lib: Improve test course create performance\n\nUse core functions that are faster for test file creation.\nTo support large requests for hashes, the core hash function\nmust support large hashes without recursion.  PHP has a default\nrecursion depth of 100 and long hashes don't support this.\n\nRemove transactions as they create performance problems for larger\ncourses and doesn't introduce significant benefit for developers.\n\nPerformance changes meant the times were much faster, a reasonable\nguess was taken on performance of an average machine.",
        "before_after_code_files": [
          "admin/tool/generator/classes/course_backend.php||admin/tool/generator/classes/course_backend.php",
          "admin/tool/generator/lang/en/tool_generator.php||admin/tool/generator/lang/en/tool_generator.php",
          "lib/classes/event/role_assigned.php||lib/classes/event/role_assigned.php",
          "lib/moodlelib.php||lib/moodlelib.php",
          "lib/tests/moodlelib_test.php||lib/tests/moodlelib_test.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/moodlelib.php||lib/moodlelib.php",
            "lib/tests/moodlelib_test.php||lib/tests/moodlelib_test.php"
          ],
          "candidate": [
            "lib/moodlelib.php||lib/moodlelib.php",
            "lib/tests/moodlelib_test.php||lib/tests/moodlelib_test.php"
          ]
        }
      },
      "candidate_diff": {
        "admin/tool/generator/classes/course_backend.php||admin/tool/generator/classes/course_backend.php": [
          "File: admin/tool/generator/classes/course_backend.php -> admin/tool/generator/classes/course_backend.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "217:         $entirestart = microtime(true);",
          "223:         $this->generator = phpunit_util::get_data_generator();",
          "226:         $this->course = $this->create_course();",
          "228:         $this->create_assignments();",
          "229:         $this->create_pages();",
          "230:         $this->create_small_files();",
          "231:         $this->create_big_files();",
          "232:         $this->create_forum();",
          "",
          "[Removed Lines]",
          "220:         $transaction = $DB->start_delegated_transaction();",
          "227:         $this->create_users();",
          "",
          "[Added Lines]",
          "231:         $this->create_users();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "238:             echo html_writer::end_tag('ul');",
          "239:         }",
          "243:         return $this->course->id;",
          "244:     }",
          "",
          "[Removed Lines]",
          "242:         $transaction->allow_commit();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "440:             $fs->create_file_from_string($filerecord, $data);",
          "441:             $this->dot($i, $count);",
          "",
          "[Removed Lines]",
          "438:             $data = self::get_random_binary($this->limit_filesize(self::$paramsmallfilesize[$this->size]));",
          "",
          "[Added Lines]",
          "436:             $data = random_bytes_emulate($this->limit_filesize(self::$paramsmallfilesize[$this->size]));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "444:         $this->end_log();",
          "445:     }",
          "471:     private function create_big_files() {",
          "475:         $count = self::$parambigfilecount[$this->size];",
          "476:         $filesize = $this->limit_filesize(self::$parambigfilesize[$this->size]);",
          "",
          "[Removed Lines]",
          "454:     private static function get_random_binary($length) {",
          "456:         $data = microtime(true);",
          "457:         if (strlen($data) > $length) {",
          "459:             return substr($data, -$length);",
          "460:         }",
          "461:         $length -= strlen($data);",
          "462:         for ($j = 0; $j < $length; $j++) {",
          "463:             $data .= chr(rand(1, 255));",
          "464:         }",
          "465:         return $data;",
          "466:     }",
          "472:         global $CFG;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "499:                 throw new coding_exception('Failed to open temporary file');",
          "500:             }",
          "501:             for ($j = 0; $j < $blocks; $j++) {",
          "503:                 fwrite($handle, $data);",
          "504:                 $this->dot($i * $blocks + $j, $count * $blocks);",
          "505:             }",
          "",
          "[Removed Lines]",
          "502:                 $data = self::get_random_binary($blocksize);",
          "",
          "[Added Lines]",
          "477:                 $data = random_bytes_emulate($blocksize);",
          "",
          "---------------"
        ],
        "admin/tool/generator/lang/en/tool_generator.php||admin/tool/generator/lang/en/tool_generator.php": [
          "File: admin/tool/generator/lang/en/tool_generator.php -> admin/tool/generator/lang/en/tool_generator.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "44: $string['coursesize_0'] = 'XS (~10KB; create in ~1 second)';",
          "45: $string['coursesize_1'] = 'S (~10MB; create in ~30 seconds)';",
          "50: $string['coursewithoutusers'] = 'The selected course has no users';",
          "51: $string['createcourse'] = 'Create course';",
          "52: $string['createtestplan'] = 'Create test plan';",
          "",
          "[Removed Lines]",
          "46: $string['coursesize_2'] = 'M (~100MB; create in ~5 minutes)';",
          "47: $string['coursesize_3'] = 'L (~1GB; create in ~1 hour)';",
          "48: $string['coursesize_4'] = 'XL (~10GB; create in ~4 hours)';",
          "49: $string['coursesize_5'] = 'XXL (~20GB; create in ~8 hours)';",
          "",
          "[Added Lines]",
          "46: $string['coursesize_2'] = 'M (~100MB; create in ~2 minutes)';",
          "47: $string['coursesize_3'] = 'L (~1GB; create in ~30 minutes)';",
          "48: $string['coursesize_4'] = 'XL (~10GB; create in ~2 hours)';",
          "49: $string['coursesize_5'] = 'XXL (~20GB; create in ~4 hours)';",
          "",
          "---------------"
        ],
        "lib/classes/event/role_assigned.php||lib/classes/event/role_assigned.php": [
          "File: lib/classes/event/role_assigned.php -> lib/classes/event/role_assigned.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "106:     protected function get_legacy_logdata() {",
          "107:         $roles = get_all_roles();",
          "109:         return array($this->courseid, 'role', 'assign', 'admin/roles/assign.php?contextid='.$this->contextid.'&roleid='.$this->objectid,",
          "110:                 $rolenames[$this->objectid], '', $this->userid);",
          "111:     }",
          "",
          "[Removed Lines]",
          "108:         $rolenames = role_fix_names($roles, $this->get_context(), ROLENAME_ORIGINAL, true);",
          "",
          "[Added Lines]",
          "108:         $neededrole = array($this->objectid => $roles[$this->objectid]);",
          "109:         $rolenames = role_fix_names($neededrole, $this->get_context(), ROLENAME_ORIGINAL, true);",
          "",
          "---------------"
        ],
        "lib/moodlelib.php||lib/moodlelib.php": [
          "File: lib/moodlelib.php -> lib/moodlelib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "7803:         }",
          "7804:     }",
          "7805:     if (function_exists('openssl_random_pseudo_bytes')) {",
          "7807:         $hash = openssl_random_pseudo_bytes($length);",
          "7808:         if ($hash !== false) {",
          "7809:             return $hash;",
          "7810:         }",
          "7811:     }",
          "7820: }",
          "",
          "[Removed Lines]",
          "7814:     $hash = sha1(serialize($CFG) . serialize($_SERVER) . microtime(true) . uniqid('', true), true);",
          "7816:     if ($length <= 20) {",
          "7817:         return substr($hash, 0, $length);",
          "7818:     }",
          "7819:     return $hash . random_bytes_emulate($length - 20);",
          "",
          "[Added Lines]",
          "7814:     $staticdata = serialize($CFG) . serialize($_SERVER);",
          "7815:     $hash = '';",
          "7816:     do {",
          "7817:         $hash .= sha1($staticdata . microtime(true) . uniqid('', true), true);",
          "7818:     } while (strlen($hash) < $length);",
          "7820:     return substr($hash, 0, $length);",
          "",
          "---------------"
        ],
        "lib/tests/moodlelib_test.php||lib/tests/moodlelib_test.php": [
          "File: lib/tests/moodlelib_test.php -> lib/tests/moodlelib_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "3047:         $result = random_bytes_emulate(666);",
          "3048:         $this->assertSame(666, strlen($result));",
          "3050:         $this->assertDebuggingNotCalled();",
          "3052:         $result = random_bytes_emulate(0);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3050:         $result = random_bytes_emulate(40);",
          "3051:         $this->assertSame(40, strlen($result));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ffd94de39821a804365d66f66a7af0bfb03a0e5c",
      "candidate_info": {
        "commit_hash": "ffd94de39821a804365d66f66a7af0bfb03a0e5c",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/ffd94de39821a804365d66f66a7af0bfb03a0e5c",
        "files": [
          "lib/moodlelib.php",
          "lib/tests/moodlelib_test.php"
        ],
        "message": "MDL-55272 lib: Allow random_bytes() to return large values.\n\nPHP has a recursion limit and random_bytes on PHP5.6 without openssl\nwill error if sent a large value.  Using a loop has lower overhead than\nrecursion as well.",
        "before_after_code_files": [
          "lib/moodlelib.php||lib/moodlelib.php",
          "lib/tests/moodlelib_test.php||lib/tests/moodlelib_test.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/moodlelib.php||lib/moodlelib.php",
            "lib/tests/moodlelib_test.php||lib/tests/moodlelib_test.php"
          ],
          "candidate": [
            "lib/moodlelib.php||lib/moodlelib.php",
            "lib/tests/moodlelib_test.php||lib/tests/moodlelib_test.php"
          ]
        }
      },
      "candidate_diff": {
        "lib/moodlelib.php||lib/moodlelib.php": [
          "File: lib/moodlelib.php -> lib/moodlelib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "7637:     }",
          "7646: }",
          "",
          "[Removed Lines]",
          "7640:     $hash = sha1(serialize($CFG) . serialize($_SERVER) . microtime(true) . uniqid('', true), true);",
          "7642:     if ($length <= 20) {",
          "7643:         return substr($hash, 0, $length);",
          "7644:     }",
          "7645:     return $hash . random_bytes_emulate($length - 20);",
          "",
          "[Added Lines]",
          "7640:     $staticdata = serialize($CFG) . serialize($_SERVER);",
          "7641:     $hash = '';",
          "7642:     do {",
          "7643:         $hash .= sha1($staticdata . microtime(true) . uniqid('', true), true);",
          "7644:     } while (strlen($hash) < $length);",
          "7645:     return substr($hash, 0, $length);",
          "",
          "---------------"
        ],
        "lib/tests/moodlelib_test.php||lib/tests/moodlelib_test.php": [
          "File: lib/tests/moodlelib_test.php -> lib/tests/moodlelib_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "2930:         $result = random_bytes_emulate(666);",
          "2931:         $this->assertSame(666, strlen($result));",
          "2933:         $this->assertDebuggingNotCalled();",
          "2935:         $result = random_bytes_emulate(0);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2933:         $result = random_bytes_emulate(40);",
          "2934:         $this->assertSame(40, strlen($result));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ffd1a26a0b95a264bb4e569bc72cbece2d899476",
      "candidate_info": {
        "commit_hash": "ffd1a26a0b95a264bb4e569bc72cbece2d899476",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/ffd1a26a0b95a264bb4e569bc72cbece2d899476",
        "files": [
          "lib/moodlelib.php",
          "lib/tests/moodlelib_test.php"
        ],
        "message": "MDL-55272 lib: Allow random_bytes() to return large values.\n\nPHP has a recursion limit and random_bytes on PHP5.6 without openssl\nwill error if sent a large value.  Using a loop has lower overhead than\nrecursion as well.",
        "before_after_code_files": [
          "lib/moodlelib.php||lib/moodlelib.php",
          "lib/tests/moodlelib_test.php||lib/tests/moodlelib_test.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/moodlelib.php||lib/moodlelib.php",
            "lib/tests/moodlelib_test.php||lib/tests/moodlelib_test.php"
          ],
          "candidate": [
            "lib/moodlelib.php||lib/moodlelib.php",
            "lib/tests/moodlelib_test.php||lib/tests/moodlelib_test.php"
          ]
        }
      },
      "candidate_diff": {
        "lib/moodlelib.php||lib/moodlelib.php": [
          "File: lib/moodlelib.php -> lib/moodlelib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "7794:     }",
          "7803: }",
          "",
          "[Removed Lines]",
          "7797:     $hash = sha1(serialize($CFG) . serialize($_SERVER) . microtime(true) . uniqid('', true), true);",
          "7799:     if ($length <= 20) {",
          "7800:         return substr($hash, 0, $length);",
          "7801:     }",
          "7802:     return $hash . random_bytes_emulate($length - 20);",
          "",
          "[Added Lines]",
          "7797:     $staticdata = serialize($CFG) . serialize($_SERVER);",
          "7798:     $hash = '';",
          "7799:     do {",
          "7800:         $hash .= sha1($staticdata . microtime(true) . uniqid('', true), true);",
          "7801:     } while (strlen($hash) < $length);",
          "7802:     return substr($hash, 0, $length);",
          "",
          "---------------"
        ],
        "lib/tests/moodlelib_test.php||lib/tests/moodlelib_test.php": [
          "File: lib/tests/moodlelib_test.php -> lib/tests/moodlelib_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "3047:         $result = random_bytes_emulate(666);",
          "3048:         $this->assertSame(666, strlen($result));",
          "3050:         $this->assertDebuggingNotCalled();",
          "3052:         $result = random_bytes_emulate(0);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3050:         $result = random_bytes_emulate(40);",
          "3051:         $this->assertSame(40, strlen($result));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6e8224365ffcdf328458ea7852dc62574e806119",
      "candidate_info": {
        "commit_hash": "6e8224365ffcdf328458ea7852dc62574e806119",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/6e8224365ffcdf328458ea7852dc62574e806119",
        "files": [
          "lib/moodlelib.php",
          "lib/tests/moodlelib_test.php"
        ],
        "message": "MDL-50860 core: improve creation of random strings",
        "before_after_code_files": [
          "lib/moodlelib.php||lib/moodlelib.php",
          "lib/tests/moodlelib_test.php||lib/tests/moodlelib_test.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "lib/moodlelib.php||lib/moodlelib.php",
            "lib/tests/moodlelib_test.php||lib/tests/moodlelib_test.php"
          ],
          "candidate": [
            "lib/moodlelib.php||lib/moodlelib.php",
            "lib/tests/moodlelib_test.php||lib/tests/moodlelib_test.php"
          ]
        }
      },
      "candidate_diff": {
        "lib/moodlelib.php||lib/moodlelib.php": [
          "File: lib/moodlelib.php -> lib/moodlelib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "7791:     $pool  = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';",
          "7792:     $pool .= 'abcdefghijklmnopqrstuvwxyz';",
          "7793:     $pool .= '0123456789';",
          "7794:     $poollen = strlen($pool);",
          "7795:     $string = '';",
          "7796:     for ($i = 0; $i < $length; $i++) {",
          "7798:     }",
          "7799:     return $string;",
          "7800: }",
          "",
          "[Removed Lines]",
          "7790: function random_string ($length=15) {",
          "7797:         $string .= substr($pool, (mt_rand()%($poollen)), 1);",
          "",
          "[Added Lines]",
          "7790: function random_string($length=15) {",
          "7791:     $randombytes = random_bytes_emulate($length);",
          "7798:         $rand = ord($randombytes[$i]);",
          "7799:         $string .= substr($pool, ($rand%($poollen)), 1);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "7815:     if ($length===null) {",
          "7816:         $length = floor(rand(24, 32));",
          "7817:     }",
          "7818:     $string = '';",
          "7819:     for ($i = 0; $i < $length; $i++) {",
          "7821:     }",
          "7822:     return $string;",
          "7823: }",
          "",
          "[Removed Lines]",
          "7820:         $string .= $pool[(mt_rand()%$poollen)];",
          "",
          "[Added Lines]",
          "7820:     $randombytes = random_bytes_emulate($length);",
          "7823:         $rand = ord($randombytes[$i]);",
          "7824:         $string .= $pool[($rand%$poollen)];",
          "7840: function random_bytes_emulate($length) {",
          "7841:     global $CFG;",
          "7842:     if ($length <= 0) {",
          "7843:         debugging('Invalid random bytes length', DEBUG_DEVELOPER);",
          "7844:         return '';",
          "7845:     }",
          "7846:     if (function_exists('random_bytes')) {",
          "7848:         $hash = @random_bytes($length);",
          "7849:         if ($hash !== false) {",
          "7850:             return $hash;",
          "7851:         }",
          "7852:     }",
          "7853:     if (function_exists('openssl_random_pseudo_bytes')) {",
          "7855:         $hash = openssl_random_pseudo_bytes($length);",
          "7856:         if ($hash !== false) {",
          "7857:             return $hash;",
          "7858:         }",
          "7859:     }",
          "7862:     $hash = sha1(serialize($CFG) . serialize($_SERVER) . microtime(true) . uniqid('', true), true);",
          "7864:     if ($length <= 20) {",
          "7865:         return substr($hash, 0, $length);",
          "7866:     }",
          "7867:     return $hash . random_bytes_emulate($length - 20);",
          "7868: }",
          "",
          "---------------"
        ],
        "lib/tests/moodlelib_test.php||lib/tests/moodlelib_test.php": [
          "File: lib/tests/moodlelib_test.php -> lib/tests/moodlelib_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "2853:         $_SERVER['HTTP_X_FORWARDED_FOR'] = $xforwardedfor;",
          "2855:     }",
          "2856: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2860:     public function test_random_bytes_emulate() {",
          "2861:         $result = random_bytes_emulate(10);",
          "2862:         $this->assertSame(10, strlen($result));",
          "2863:         $this->assertnotSame($result, random_bytes_emulate(10));",
          "2865:         $result = random_bytes_emulate(21);",
          "2866:         $this->assertSame(21, strlen($result));",
          "2867:         $this->assertnotSame($result, random_bytes_emulate(21));",
          "2869:         $result = random_bytes_emulate(666);",
          "2870:         $this->assertSame(666, strlen($result));",
          "2872:         $this->assertDebuggingNotCalled();",
          "2874:         $result = random_bytes_emulate(0);",
          "2875:         $this->assertSame('', $result);",
          "2876:         $this->assertDebuggingCalled();",
          "2878:         $result = random_bytes_emulate(-1);",
          "2879:         $this->assertSame('', $result);",
          "2880:         $this->assertDebuggingCalled();",
          "2881:     }",
          "2886:     public function test_random_string() {",
          "2887:         $pool = 'a-zA-Z0-9';",
          "2889:         $result = random_string(10);",
          "2890:         $this->assertSame(10, strlen($result));",
          "2891:         $this->assertRegExp('/^[' . $pool . ']+$/', $result);",
          "2892:         $this->assertNotSame($result, random_string(10));",
          "2894:         $result = random_string(21);",
          "2895:         $this->assertSame(21, strlen($result));",
          "2896:         $this->assertRegExp('/^[' . $pool . ']+$/', $result);",
          "2897:         $this->assertNotSame($result, random_string(21));",
          "2899:         $result = random_string(666);",
          "2900:         $this->assertSame(666, strlen($result));",
          "2901:         $this->assertRegExp('/^[' . $pool . ']+$/', $result);",
          "2903:         $result = random_string();",
          "2904:         $this->assertSame(15, strlen($result));",
          "2905:         $this->assertRegExp('/^[' . $pool . ']+$/', $result);",
          "2907:         $this->assertDebuggingNotCalled();",
          "2909:         $result = random_string(0);",
          "2910:         $this->assertSame('', $result);",
          "2911:         $this->assertDebuggingCalled();",
          "2913:         $result = random_string(-1);",
          "2914:         $this->assertSame('', $result);",
          "2915:         $this->assertDebuggingCalled();",
          "2916:     }",
          "2921:     public function test_complex_random_string() {",
          "2922:         $pool = preg_quote('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789`~!@#%^&*()_+-=[];,./<>?:{} ', '/');",
          "2924:         $result = complex_random_string(10);",
          "2925:         $this->assertSame(10, strlen($result));",
          "2926:         $this->assertRegExp('/^[' . $pool . ']+$/', $result);",
          "2927:         $this->assertNotSame($result, complex_random_string(10));",
          "2929:         $result = complex_random_string(21);",
          "2930:         $this->assertSame(21, strlen($result));",
          "2931:         $this->assertRegExp('/^[' . $pool . ']+$/', $result);",
          "2932:         $this->assertNotSame($result, complex_random_string(21));",
          "2934:         $result = complex_random_string(666);",
          "2935:         $this->assertSame(666, strlen($result));",
          "2936:         $this->assertRegExp('/^[' . $pool . ']+$/', $result);",
          "2938:         $result = complex_random_string();",
          "2939:         $this->assertEquals(28, strlen($result), '', 4); // Expected length is 24 - 32.",
          "2940:         $this->assertRegExp('/^[' . $pool . ']+$/', $result);",
          "2942:         $this->assertDebuggingNotCalled();",
          "2944:         $result = complex_random_string(0);",
          "2945:         $this->assertSame('', $result);",
          "2946:         $this->assertDebuggingCalled();",
          "2948:         $result = complex_random_string(-1);",
          "2949:         $this->assertSame('', $result);",
          "2950:         $this->assertDebuggingCalled();",
          "2951:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5337b2295237958c93b6c65fa595859aaa7bf257",
      "candidate_info": {
        "commit_hash": "5337b2295237958c93b6c65fa595859aaa7bf257",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/5337b2295237958c93b6c65fa595859aaa7bf257",
        "files": [
          "lib/moodlelib.php",
          "lib/tests/moodlelib_test.php"
        ],
        "message": "MDL-50860 core: improve creation of random strings",
        "before_after_code_files": [
          "lib/moodlelib.php||lib/moodlelib.php",
          "lib/tests/moodlelib_test.php||lib/tests/moodlelib_test.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "lib/moodlelib.php||lib/moodlelib.php",
            "lib/tests/moodlelib_test.php||lib/tests/moodlelib_test.php"
          ],
          "candidate": [
            "lib/moodlelib.php||lib/moodlelib.php",
            "lib/tests/moodlelib_test.php||lib/tests/moodlelib_test.php"
          ]
        }
      },
      "candidate_diff": {
        "lib/moodlelib.php||lib/moodlelib.php": [
          "File: lib/moodlelib.php -> lib/moodlelib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "7836:     $pool  = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';",
          "7837:     $pool .= 'abcdefghijklmnopqrstuvwxyz';",
          "7838:     $pool .= '0123456789';",
          "7839:     $poollen = strlen($pool);",
          "7840:     $string = '';",
          "7841:     for ($i = 0; $i < $length; $i++) {",
          "7843:     }",
          "7844:     return $string;",
          "7845: }",
          "",
          "[Removed Lines]",
          "7835: function random_string ($length=15) {",
          "7842:         $string .= substr($pool, (mt_rand()%($poollen)), 1);",
          "",
          "[Added Lines]",
          "7835: function random_string($length=15) {",
          "7836:     $randombytes = random_bytes_emulate($length);",
          "7843:         $rand = ord($randombytes[$i]);",
          "7844:         $string .= substr($pool, ($rand%($poollen)), 1);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "7860:     if ($length===null) {",
          "7861:         $length = floor(rand(24, 32));",
          "7862:     }",
          "7863:     $string = '';",
          "7864:     for ($i = 0; $i < $length; $i++) {",
          "7866:     }",
          "7867:     return $string;",
          "7868: }",
          "",
          "[Removed Lines]",
          "7865:         $string .= $pool[(mt_rand()%$poollen)];",
          "",
          "[Added Lines]",
          "7865:     $randombytes = random_bytes_emulate($length);",
          "7868:         $rand = ord($randombytes[$i]);",
          "7869:         $string .= $pool[($rand%$poollen)];",
          "7885: function random_bytes_emulate($length) {",
          "7886:     global $CFG;",
          "7887:     if ($length <= 0) {",
          "7888:         debugging('Invalid random bytes length', DEBUG_DEVELOPER);",
          "7889:         return '';",
          "7890:     }",
          "7891:     if (function_exists('random_bytes')) {",
          "7893:         $hash = @random_bytes($length);",
          "7894:         if ($hash !== false) {",
          "7895:             return $hash;",
          "7896:         }",
          "7897:     }",
          "7898:     if (function_exists('openssl_random_pseudo_bytes')) {",
          "7900:         $hash = openssl_random_pseudo_bytes($length);",
          "7901:         if ($hash !== false) {",
          "7902:             return $hash;",
          "7903:         }",
          "7904:     }",
          "7907:     $hash = sha1(serialize($CFG) . serialize($_SERVER) . microtime(true) . uniqid('', true), true);",
          "7909:     if ($length <= 20) {",
          "7910:         return substr($hash, 0, $length);",
          "7911:     }",
          "7912:     return $hash . random_bytes_emulate($length - 20);",
          "7913: }",
          "",
          "---------------"
        ],
        "lib/tests/moodlelib_test.php||lib/tests/moodlelib_test.php": [
          "File: lib/tests/moodlelib_test.php -> lib/tests/moodlelib_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "2918:         $_SERVER['HTTP_X_FORWARDED_FOR'] = $xforwardedfor;",
          "2920:     }",
          "2921: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2925:     public function test_random_bytes_emulate() {",
          "2926:         $result = random_bytes_emulate(10);",
          "2927:         $this->assertSame(10, strlen($result));",
          "2928:         $this->assertnotSame($result, random_bytes_emulate(10));",
          "2930:         $result = random_bytes_emulate(21);",
          "2931:         $this->assertSame(21, strlen($result));",
          "2932:         $this->assertnotSame($result, random_bytes_emulate(21));",
          "2934:         $result = random_bytes_emulate(666);",
          "2935:         $this->assertSame(666, strlen($result));",
          "2937:         $this->assertDebuggingNotCalled();",
          "2939:         $result = random_bytes_emulate(0);",
          "2940:         $this->assertSame('', $result);",
          "2941:         $this->assertDebuggingCalled();",
          "2943:         $result = random_bytes_emulate(-1);",
          "2944:         $this->assertSame('', $result);",
          "2945:         $this->assertDebuggingCalled();",
          "2946:     }",
          "2951:     public function test_random_string() {",
          "2952:         $pool = 'a-zA-Z0-9';",
          "2954:         $result = random_string(10);",
          "2955:         $this->assertSame(10, strlen($result));",
          "2956:         $this->assertRegExp('/^[' . $pool . ']+$/', $result);",
          "2957:         $this->assertNotSame($result, random_string(10));",
          "2959:         $result = random_string(21);",
          "2960:         $this->assertSame(21, strlen($result));",
          "2961:         $this->assertRegExp('/^[' . $pool . ']+$/', $result);",
          "2962:         $this->assertNotSame($result, random_string(21));",
          "2964:         $result = random_string(666);",
          "2965:         $this->assertSame(666, strlen($result));",
          "2966:         $this->assertRegExp('/^[' . $pool . ']+$/', $result);",
          "2968:         $result = random_string();",
          "2969:         $this->assertSame(15, strlen($result));",
          "2970:         $this->assertRegExp('/^[' . $pool . ']+$/', $result);",
          "2972:         $this->assertDebuggingNotCalled();",
          "2974:         $result = random_string(0);",
          "2975:         $this->assertSame('', $result);",
          "2976:         $this->assertDebuggingCalled();",
          "2978:         $result = random_string(-1);",
          "2979:         $this->assertSame('', $result);",
          "2980:         $this->assertDebuggingCalled();",
          "2981:     }",
          "2986:     public function test_complex_random_string() {",
          "2987:         $pool = preg_quote('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789`~!@#%^&*()_+-=[];,./<>?:{} ', '/');",
          "2989:         $result = complex_random_string(10);",
          "2990:         $this->assertSame(10, strlen($result));",
          "2991:         $this->assertRegExp('/^[' . $pool . ']+$/', $result);",
          "2992:         $this->assertNotSame($result, complex_random_string(10));",
          "2994:         $result = complex_random_string(21);",
          "2995:         $this->assertSame(21, strlen($result));",
          "2996:         $this->assertRegExp('/^[' . $pool . ']+$/', $result);",
          "2997:         $this->assertNotSame($result, complex_random_string(21));",
          "2999:         $result = complex_random_string(666);",
          "3000:         $this->assertSame(666, strlen($result));",
          "3001:         $this->assertRegExp('/^[' . $pool . ']+$/', $result);",
          "3003:         $result = complex_random_string();",
          "3004:         $this->assertEquals(28, strlen($result), '', 4); // Expected length is 24 - 32.",
          "3005:         $this->assertRegExp('/^[' . $pool . ']+$/', $result);",
          "3007:         $this->assertDebuggingNotCalled();",
          "3009:         $result = complex_random_string(0);",
          "3010:         $this->assertSame('', $result);",
          "3011:         $this->assertDebuggingCalled();",
          "3013:         $result = complex_random_string(-1);",
          "3014:         $this->assertSame('', $result);",
          "3015:         $this->assertDebuggingCalled();",
          "3016:     }",
          "",
          "---------------"
        ]
      }
    }
  ]
}