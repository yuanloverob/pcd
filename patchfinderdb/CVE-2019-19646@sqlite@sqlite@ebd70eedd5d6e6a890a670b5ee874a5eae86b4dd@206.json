{
  "cve_id": "CVE-2019-19646",
  "cve_desc": "pragma.c in SQLite through 3.30.1 mishandles NOT NULL in an integrity_check PRAGMA command in certain cases of generated columns.",
  "repo": "sqlite/sqlite",
  "patch_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
  "patch_info": {
    "commit_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/pragma.c",
      "test/gencol1.test"
    ],
    "message": "Fix the NOT NULL verification logic in PRAGMA integrity_check so that it works for generated columns whose value is the result of a comparison operator. Ticket [bd8c280671ba44a7]\n\nFossilOrigin-Name: f3b39c71b88cb6721f443de56cdce4c08252453a5e340b00a2bd88dc10c42400",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/pragma.c||src/pragma.c",
      "test/gencol1.test||test/gencol1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: e3398c5ffb060b2b26334b8598e2c63953741e2d6f5124dbd6bdfc8e94742539",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/pragma.c||src/pragma.c": [
      "File: src/pragma.c -> src/pragma.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1596:           if( j==pTab->iPKey ) continue;",
      "1597:           if( pTab->aCol[j].notNull==0 ) continue;",
      "1598:           sqlite3ExprCodeGetColumnOfTable(v, pTab, iDataCur, j, 3);",
      "1600:           jmp2 = sqlite3VdbeAddOp1(v, OP_NotNull, 3); VdbeCoverage(v);",
      "1601:           zErr = sqlite3MPrintf(db, \"NULL value in %s.%s\", pTab->zName,",
      "1602:                               pTab->aCol[j].zName);",
      "",
      "[Removed Lines]",
      "1599:           sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "",
      "[Added Lines]",
      "1599:           if( sqlite3VdbeGetOp(v,-1)->opcode==OP_Column ){",
      "1600:             sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "1601:           }",
      "",
      "---------------"
    ],
    "test/gencol1.test||test/gencol1.test": [
      "File: test/gencol1.test -> test/gencol1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "328:   INSERT OR REPLACE INTO t0(c0, c1) VALUES (2, 1), (1, 0)",
      "329: } {1 {FOREIGN KEY constraint failed}}",
      "331: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "331: # 2019-12-09 ticket bd8c280671ba44a7",
      "332: # With generated columns, the sqlite3ExprGetColumnOfTable() routine might",
      "333: # generate a code sequence that does not end with OP_Column.  So check to",
      "334: # make sure that the last instruction generated is an OP_column prior to",
      "335: # applying the OPFLAG_TYPEOFARG optimization to NOT NULL checks in the",
      "336: # PRAGMA integrity_check code.",
      "337: #",
      "338: sqlite3 db :memory:",
      "339: do_execsql_test gencol1-12.10 {",
      "340:   CREATE TABLE t0 (c0, c1 NOT NULL AS (c0==0));",
      "341:   INSERT INTO t0(c0) VALUES (0);",
      "342:   PRAGMA integrity_check;",
      "343: } {ok}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "25fb50674f17198acfee9ac96ff5309adce37291",
      "candidate_info": {
        "commit_hash": "25fb50674f17198acfee9ac96ff5309adce37291",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/25fb50674f17198acfee9ac96ff5309adce37291",
        "files": [
          "ext/fts5/fts5Int.h",
          "ext/fts5/fts5_main.c",
          "ext/fts5/fts5_vocab.c",
          "ext/fts5/test/fts5vocab.test",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Fix problems with joining two or more fts5_vocab tables that access the same underlying fts5 table.\n\nFossilOrigin-Name: 49956395e14b61f6bf839e59ae7dd95eb32ebf32f3d16388844de6621b9c2d98",
        "before_after_code_files": [
          "ext/fts5/fts5Int.h||ext/fts5/fts5Int.h",
          "ext/fts5/fts5_main.c||ext/fts5/fts5_main.c",
          "ext/fts5/fts5_vocab.c||ext/fts5/fts5_vocab.c",
          "ext/fts5/test/fts5vocab.test||ext/fts5/test/fts5vocab.test",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts5/fts5Int.h||ext/fts5/fts5Int.h": [
          "File: ext/fts5/fts5Int.h -> ext/fts5/fts5Int.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "526: int sqlite3Fts5GetTokenizer(",
          "527:   Fts5Global*,",
          "528:   const char **azArg,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "529: typedef struct Fts5Table Fts5Table;",
          "530: struct Fts5Table {",
          "534: };",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "532:   char **pzErr",
          "533: );",
          "",
          "[Removed Lines]",
          "535: Fts5Index *sqlite3Fts5IndexFromCsrid(Fts5Global*, i64, Fts5Config **);",
          "",
          "[Added Lines]",
          "545: Fts5Table *sqlite3Fts5TableFromCsrid(Fts5Global*, i64);",
          "547: int sqlite3Fts5FlushToDisk(Fts5Table*);",
          "",
          "---------------"
        ],
        "ext/fts5/fts5_main.c||ext/fts5/fts5_main.c": [
          "File: ext/fts5/fts5_main.c -> ext/fts5/fts5_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: typedef struct Fts5Auxdata Fts5Auxdata;",
          "29: typedef struct Fts5Auxiliary Fts5Auxiliary;",
          "30: typedef struct Fts5Cursor Fts5Cursor;",
          "31: typedef struct Fts5Sorter Fts5Sorter;",
          "33: typedef struct Fts5TokenizerModule Fts5TokenizerModule;",
          "",
          "[Removed Lines]",
          "32: typedef struct Fts5Table Fts5Table;",
          "",
          "[Added Lines]",
          "31: typedef struct Fts5FullTable Fts5FullTable;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "111: };",
          "",
          "[Removed Lines]",
          "116: struct Fts5Table {",
          "",
          "[Added Lines]",
          "113: struct Fts5FullTable {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "254: #define FTS5_SAVEPOINT  5",
          "255: #define FTS5_RELEASE    6",
          "256: #define FTS5_ROLLBACKTO 7",
          "258:   switch( op ){",
          "259:     case FTS5_BEGIN:",
          "260:       assert( p->ts.eState==0 );",
          "",
          "[Removed Lines]",
          "257: static void fts5CheckTransactionState(Fts5Table *p, int op, int iSavepoint){",
          "",
          "[Added Lines]",
          "252: static void fts5CheckTransactionState(Fts5FullTable *p, int op, int iSavepoint){",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "311: }",
          "317:   if( pTab ){",
          "319:     sqlite3Fts5StorageClose(pTab->pStorage);",
          "321:     sqlite3_free(pTab);",
          "322:   }",
          "323: }",
          "",
          "[Removed Lines]",
          "309: static int fts5IsContentless(Fts5Table *pTab){",
          "310:   return pTab->pConfig->eContent==FTS5_CONTENT_NONE;",
          "316: static void fts5FreeVtab(Fts5Table *pTab){",
          "318:     sqlite3Fts5IndexClose(pTab->pIndex);",
          "320:     sqlite3Fts5ConfigFree(pTab->pConfig);",
          "",
          "[Added Lines]",
          "304: static int fts5IsContentless(Fts5FullTable *pTab){",
          "305:   return pTab->p.pConfig->eContent==FTS5_CONTENT_NONE;",
          "311: static void fts5FreeVtab(Fts5FullTable *pTab){",
          "313:     sqlite3Fts5IndexClose(pTab->p.pIndex);",
          "315:     sqlite3Fts5ConfigFree(pTab->p.pConfig);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "328: static int fts5DisconnectMethod(sqlite3_vtab *pVtab){",
          "330:   return SQLITE_OK;",
          "331: }",
          "",
          "[Removed Lines]",
          "329:   fts5FreeVtab((Fts5Table*)pVtab);",
          "",
          "[Added Lines]",
          "324:   fts5FreeVtab((Fts5FullTable*)pVtab);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "337:   Fts5Table *pTab = (Fts5Table*)pVtab;",
          "338:   int rc = sqlite3Fts5DropAll(pTab->pConfig);",
          "339:   if( rc==SQLITE_OK ){",
          "341:   }",
          "342:   return rc;",
          "343: }",
          "",
          "[Removed Lines]",
          "340:     fts5FreeVtab((Fts5Table*)pVtab);",
          "",
          "[Added Lines]",
          "335:     fts5FreeVtab((Fts5FullTable*)pVtab);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "366:   const char **azConfig = (const char**)argv;",
          "373:   if( rc==SQLITE_OK ){",
          "374:     rc = sqlite3Fts5ConfigParse(pGlobal, db, argc, azConfig, &pConfig, pzErr);",
          "375:     assert( (rc==SQLITE_OK && *pzErr==0) || pConfig==0 );",
          "376:   }",
          "377:   if( rc==SQLITE_OK ){",
          "379:     pTab->pGlobal = pGlobal;",
          "380:   }",
          "383:   if( rc==SQLITE_OK ){",
          "385:   }",
          "388:   if( rc==SQLITE_OK ){",
          "389:     rc = sqlite3Fts5StorageOpen(",
          "391:     );",
          "392:   }",
          "",
          "[Removed Lines]",
          "372:   pTab = (Fts5Table*)sqlite3Fts5MallocZero(&rc, sizeof(Fts5Table));",
          "378:     pTab->pConfig = pConfig;",
          "384:     rc = sqlite3Fts5IndexOpen(pConfig, bCreate, &pTab->pIndex, pzErr);",
          "390:         pConfig, pTab->pIndex, bCreate, &pTab->pStorage, pzErr",
          "",
          "[Added Lines]",
          "367:   pTab = (Fts5FullTable*)sqlite3Fts5MallocZero(&rc, sizeof(Fts5FullTable));",
          "373:     pTab->p.pConfig = pConfig;",
          "379:     rc = sqlite3Fts5IndexOpen(pConfig, bCreate, &pTab->p.pIndex, pzErr);",
          "385:         pConfig, pTab->p.pIndex, bCreate, &pTab->pStorage, pzErr",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "400:   if( rc==SQLITE_OK ){",
          "401:     assert( pConfig->pzErrmsg==0 );",
          "402:     pConfig->pzErrmsg = pzErr;",
          "405:     pConfig->pzErrmsg = 0;",
          "406:   }",
          "",
          "[Removed Lines]",
          "403:     rc = sqlite3Fts5IndexLoadConfig(pTab->pIndex);",
          "404:     sqlite3Fts5IndexRollback(pTab->pIndex);",
          "",
          "[Added Lines]",
          "398:     rc = sqlite3Fts5IndexLoadConfig(pTab->p.pIndex);",
          "399:     sqlite3Fts5IndexRollback(pTab->p.pIndex);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "614:   return SQLITE_OK;",
          "615: }",
          "618:   Fts5Cursor *pCsr;",
          "619:   for(pCsr=pTab->pGlobal->pCsr; pCsr; pCsr=pCsr->pNext){",
          "620:     if( pCsr->base.pVtab==(sqlite3_vtab*)pTab ) return SQLITE_OK;",
          "",
          "[Removed Lines]",
          "617: static int fts5NewTransaction(Fts5Table *pTab){",
          "",
          "[Added Lines]",
          "612: static int fts5NewTransaction(Fts5FullTable *pTab){",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "628: static int fts5OpenMethod(sqlite3_vtab *pVTab, sqlite3_vtab_cursor **ppCsr){",
          "",
          "[Removed Lines]",
          "629:   Fts5Table *pTab = (Fts5Table*)pVTab;",
          "630:   Fts5Config *pConfig = pTab->pConfig;",
          "",
          "[Added Lines]",
          "624:   Fts5FullTable *pTab = (Fts5FullTable*)pVTab;",
          "625:   Fts5Config *pConfig = pTab->p.pConfig;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "673: }",
          "675: static void fts5FreeCursorComponents(Fts5Cursor *pCsr){",
          "677:   Fts5Auxdata *pData;",
          "678:   Fts5Auxdata *pNext;",
          "",
          "[Removed Lines]",
          "676:   Fts5Table *pTab = (Fts5Table*)(pCsr->base.pVtab);",
          "",
          "[Added Lines]",
          "671:   Fts5FullTable *pTab = (Fts5FullTable*)(pCsr->base.pVtab);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "718: static int fts5CloseMethod(sqlite3_vtab_cursor *pCursor){",
          "719:   if( pCursor ){",
          "721:     Fts5Cursor *pCsr = (Fts5Cursor*)pCursor;",
          "722:     Fts5Cursor **pp;",
          "",
          "[Removed Lines]",
          "720:     Fts5Table *pTab = (Fts5Table*)(pCursor->pVtab);",
          "",
          "[Added Lines]",
          "715:     Fts5FullTable *pTab = (Fts5FullTable*)(pCursor->pVtab);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "778:   Fts5Cursor *pCsr;",
          "779:   for(pCsr=pTab->pGlobal->pCsr; pCsr; pCsr=pCsr->pNext){",
          "780:     if( pCsr->ePlan==FTS5_PLAN_MATCH",
          "",
          "[Removed Lines]",
          "777: static void fts5TripCursors(Fts5Table *pTab){",
          "",
          "[Added Lines]",
          "772: static void fts5TripCursors(Fts5FullTable *pTab){",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "801:   int rc = SQLITE_OK;",
          "802:   assert( *pbSkip==0 );",
          "803:   if( CsrFlagTest(pCsr, FTS5CSR_REQUIRE_RESEEK) ){",
          "805:     int bDesc = pCsr->bDesc;",
          "806:     i64 iRowid = sqlite3Fts5ExprRowid(pCsr->pExpr);",
          "809:     if( rc==SQLITE_OK &&  iRowid!=sqlite3Fts5ExprRowid(pCsr->pExpr) ){",
          "811:     }",
          "",
          "[Removed Lines]",
          "804:     Fts5Table *pTab = (Fts5Table*)(pCsr->base.pVtab);",
          "808:     rc = sqlite3Fts5ExprFirst(pCsr->pExpr, pTab->pIndex, iRowid, bDesc);",
          "",
          "[Added Lines]",
          "799:     Fts5FullTable *pTab = (Fts5FullTable*)(pCsr->base.pVtab);",
          "803:     rc = sqlite3Fts5ExprFirst(pCsr->pExpr, pTab->p.pIndex, iRowid, bDesc);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "902:   return rc;",
          "903: }",
          "907:   Fts5Sorter *pSorter;",
          "908:   int nPhrase;",
          "909:   sqlite3_int64 nByte;",
          "",
          "[Removed Lines]",
          "905: static int fts5CursorFirstSorted(Fts5Table *pTab, Fts5Cursor *pCsr, int bDesc){",
          "906:   Fts5Config *pConfig = pTab->pConfig;",
          "",
          "[Added Lines]",
          "900: static int fts5CursorFirstSorted(",
          "901:   Fts5FullTable *pTab,",
          "902:   Fts5Cursor *pCsr,",
          "903:   int bDesc",
          "904: ){",
          "905:   Fts5Config *pConfig = pTab->p.pConfig;",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "950:   return rc;",
          "951: }",
          "954:   int rc;",
          "955:   Fts5Expr *pExpr = pCsr->pExpr;",
          "957:   if( sqlite3Fts5ExprEof(pExpr) ){",
          "958:     CsrFlagSet(pCsr, FTS5CSR_EOF);",
          "959:   }",
          "",
          "[Removed Lines]",
          "953: static int fts5CursorFirst(Fts5Table *pTab, Fts5Cursor *pCsr, int bDesc){",
          "956:   rc = sqlite3Fts5ExprFirst(pExpr, pTab->pIndex, pCsr->iFirstRowid, bDesc);",
          "",
          "[Added Lines]",
          "952: static int fts5CursorFirst(Fts5FullTable *pTab, Fts5Cursor *pCsr, int bDesc){",
          "955:   rc = sqlite3Fts5ExprFirst(pExpr, pTab->p.pIndex, pCsr->iFirstRowid, bDesc);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "970: static int fts5SpecialMatch(",
          "972:   Fts5Cursor *pCsr,",
          "973:   const char *zQuery",
          "974: ){",
          "",
          "[Removed Lines]",
          "971:   Fts5Table *pTab,",
          "",
          "[Added Lines]",
          "970:   Fts5FullTable *pTab,",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "979:   while( z[0]==' ' ) z++;",
          "980:   for(n=0; z[n] && z[n]!=' '; n++);",
          "983:   pCsr->ePlan = FTS5_PLAN_SPECIAL;",
          "985:   if( 0==sqlite3_strnicmp(\"reads\", z, n) ){",
          "987:   }",
          "988:   else if( 0==sqlite3_strnicmp(\"id\", z, n) ){",
          "989:     pCsr->iSpecial = pCsr->iCsrId;",
          "990:   }",
          "991:   else{",
          "994:     rc = SQLITE_ERROR;",
          "995:   }",
          "",
          "[Removed Lines]",
          "982:   assert( pTab->base.zErrMsg==0 );",
          "986:     pCsr->iSpecial = sqlite3Fts5IndexReads(pTab->pIndex);",
          "993:     pTab->base.zErrMsg = sqlite3_mprintf(\"unknown special query: %.*s\", n, z);",
          "",
          "[Added Lines]",
          "981:   assert( pTab->p.base.zErrMsg==0 );",
          "985:     pCsr->iSpecial = sqlite3Fts5IndexReads(pTab->p.pIndex);",
          "992:     pTab->p.base.zErrMsg = sqlite3_mprintf(\"unknown special query: %.*s\", n, z);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1006:   Fts5Auxiliary *pAux;",
          "1008:   for(pAux=pTab->pGlobal->pAux; pAux; pAux=pAux->pNext){",
          "",
          "[Removed Lines]",
          "1005: static Fts5Auxiliary *fts5FindAuxiliary(Fts5Table *pTab, const char *zName){",
          "",
          "[Added Lines]",
          "1004: static Fts5Auxiliary *fts5FindAuxiliary(Fts5FullTable *pTab, const char *zName){",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1017: static int fts5FindRankFunction(Fts5Cursor *pCsr){",
          "1020:   int rc = SQLITE_OK;",
          "1021:   Fts5Auxiliary *pAux = 0;",
          "1022:   const char *zRank = pCsr->zRank;",
          "",
          "[Removed Lines]",
          "1018:   Fts5Table *pTab = (Fts5Table*)(pCsr->base.pVtab);",
          "1019:   Fts5Config *pConfig = pTab->pConfig;",
          "",
          "[Added Lines]",
          "1017:   Fts5FullTable *pTab = (Fts5FullTable*)(pCsr->base.pVtab);",
          "1018:   Fts5Config *pConfig = pTab->p.pConfig;",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1054:   if( rc==SQLITE_OK ){",
          "1055:     pAux = fts5FindAuxiliary(pTab, zRank);",
          "1056:     if( pAux==0 ){",
          "1059:       rc = SQLITE_ERROR;",
          "1060:     }",
          "1061:   }",
          "",
          "[Removed Lines]",
          "1057:       assert( pTab->base.zErrMsg==0 );",
          "1058:       pTab->base.zErrMsg = sqlite3_mprintf(\"no such function: %s\", zRank);",
          "",
          "[Added Lines]",
          "1056:       assert( pTab->p.base.zErrMsg==0 );",
          "1057:       pTab->p.base.zErrMsg = sqlite3_mprintf(\"no such function: %s\", zRank);",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1132: ){",
          "1135:   Fts5Cursor *pCsr = (Fts5Cursor*)pCursor;",
          "",
          "[Removed Lines]",
          "1133:   Fts5Table *pTab = (Fts5Table*)(pCursor->pVtab);",
          "1134:   Fts5Config *pConfig = pTab->pConfig;",
          "",
          "[Added Lines]",
          "1132:   Fts5FullTable *pTab = (Fts5FullTable*)(pCursor->pVtab);",
          "1133:   Fts5Config *pConfig = pTab->p.pConfig;",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1160:   assert( pCsr->zRank==0 );",
          "1161:   assert( pCsr->zRankArgs==0 );",
          "",
          "[Removed Lines]",
          "1163:   assert( pzErrmsg==0 || pzErrmsg==&pTab->base.zErrMsg );",
          "1164:   pConfig->pzErrmsg = &pTab->base.zErrMsg;",
          "",
          "[Added Lines]",
          "1162:   assert( pzErrmsg==0 || pzErrmsg==&pTab->p.base.zErrMsg );",
          "1163:   pConfig->pzErrmsg = &pTab->p.base.zErrMsg;",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1228:         rc = fts5SpecialMatch(pTab, pCsr, &zExpr[1]);",
          "1229:       }else{",
          "1231:         rc = sqlite3Fts5ExprNew(pConfig, iCol, zExpr, &pCsr->pExpr, pzErr);",
          "1232:         if( rc==SQLITE_OK ){",
          "1233:           if( bOrderByRank ){",
          "",
          "[Removed Lines]",
          "1230:         char **pzErr = &pTab->base.zErrMsg;",
          "",
          "[Added Lines]",
          "1229:         char **pzErr = &pTab->p.base.zErrMsg;",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "1251:     pCsr->ePlan = (pRowidEq ? FTS5_PLAN_ROWID : FTS5_PLAN_SCAN);",
          "1252:     rc = sqlite3Fts5StorageStmt(",
          "1254:     );",
          "1255:     if( rc==SQLITE_OK ){",
          "1256:       if( pCsr->ePlan==FTS5_PLAN_ROWID ){",
          "",
          "[Removed Lines]",
          "1253:         pTab->pStorage, fts5StmtType(pCsr), &pCsr->pStmt, &pTab->base.zErrMsg",
          "",
          "[Added Lines]",
          "1252:         pTab->pStorage, fts5StmtType(pCsr), &pCsr->pStmt, &pTab->p.base.zErrMsg",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "1335:   if( pCsr->pStmt==0 ){",
          "1337:     int eStmt = fts5StmtType(pCsr);",
          "1338:     rc = sqlite3Fts5StorageStmt(",
          "1340:     );",
          "1342:     assert( CsrFlagTest(pCsr, FTS5CSR_REQUIRE_CONTENT) );",
          "1343:   }",
          "",
          "[Removed Lines]",
          "1336:     Fts5Table *pTab = (Fts5Table*)(pCsr->base.pVtab);",
          "1339:         pTab->pStorage, eStmt, &pCsr->pStmt, (bErrormsg?&pTab->base.zErrMsg:0)",
          "1341:     assert( rc!=SQLITE_OK || pTab->base.zErrMsg==0 );",
          "",
          "[Added Lines]",
          "1335:     Fts5FullTable *pTab = (Fts5FullTable*)(pCsr->base.pVtab);",
          "1338:         pTab->pStorage, eStmt, &pCsr->pStmt, (bErrormsg?&pTab->p.base.zErrMsg:0)",
          "1340:     assert( rc!=SQLITE_OK || pTab->p.base.zErrMsg==0 );",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "1360:   return rc;",
          "1361: }",
          "1365:   va_start(ap, zFormat);",
          "1368:   va_end(ap);",
          "1369: }",
          "",
          "[Removed Lines]",
          "1363: static void fts5SetVtabError(Fts5Table *p, const char *zFormat, ...){",
          "1366:   assert( p->base.zErrMsg==0 );",
          "1367:   p->base.zErrMsg = sqlite3_vmprintf(zFormat, ap);",
          "",
          "[Added Lines]",
          "1362: static void fts5SetVtabError(Fts5FullTable *p, const char *zFormat, ...){",
          "1365:   assert( p->p.base.zErrMsg==0 );",
          "1366:   p->p.base.zErrMsg = sqlite3_vmprintf(zFormat, ap);",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "1386: static int fts5SpecialInsert(",
          "1390: ){",
          "1392:   int rc = SQLITE_OK;",
          "1393:   int bError = 0;",
          "",
          "[Removed Lines]",
          "1391:   Fts5Config *pConfig = pTab->pConfig;",
          "",
          "[Added Lines]",
          "1390:   Fts5Config *pConfig = pTab->p.pConfig;",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "1423:     pConfig->bPrefixIndex = sqlite3_value_int(pVal);",
          "1424: #endif",
          "1425:   }else{",
          "1427:     if( rc==SQLITE_OK ){",
          "1429:     }",
          "1430:     if( rc==SQLITE_OK ){",
          "1431:       if( bError ){",
          "",
          "[Removed Lines]",
          "1426:     rc = sqlite3Fts5IndexLoadConfig(pTab->pIndex);",
          "1428:       rc = sqlite3Fts5ConfigSetValue(pTab->pConfig, zCmd, pVal, &bError);",
          "",
          "[Added Lines]",
          "1425:     rc = sqlite3Fts5IndexLoadConfig(pTab->p.pIndex);",
          "1427:       rc = sqlite3Fts5ConfigSetValue(pTab->p.pConfig, zCmd, pVal, &bError);",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "1439: }",
          "1441: static int fts5SpecialDelete(",
          "1443:   sqlite3_value **apVal",
          "1444: ){",
          "1445:   int rc = SQLITE_OK;",
          "",
          "[Removed Lines]",
          "1442:   Fts5Table *pTab,",
          "",
          "[Added Lines]",
          "1441:   Fts5FullTable *pTab,",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "1454: static void fts5StorageInsert(",
          "1455:   int *pRc,",
          "1457:   sqlite3_value **apVal,",
          "1458:   i64 *piRowid",
          "1459: ){",
          "",
          "[Removed Lines]",
          "1456:   Fts5Table *pTab,",
          "",
          "[Added Lines]",
          "1455:   Fts5FullTable *pTab,",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "1489: ){",
          "",
          "[Removed Lines]",
          "1490:   Fts5Table *pTab = (Fts5Table*)pVtab;",
          "1491:   Fts5Config *pConfig = pTab->pConfig;",
          "",
          "[Added Lines]",
          "1489:   Fts5FullTable *pTab = (Fts5FullTable*)pVtab;",
          "1490:   Fts5Config *pConfig = pTab->p.pConfig;",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "1500:   assert( sqlite3_value_type(apVal[0])==SQLITE_INTEGER",
          "1501:        || sqlite3_value_type(apVal[0])==SQLITE_NULL",
          "1502:   );",
          "1507:   fts5TripCursors(pTab);",
          "",
          "[Removed Lines]",
          "1503:   assert( pTab->pConfig->pzErrmsg==0 );",
          "1504:   pTab->pConfig->pzErrmsg = &pTab->base.zErrMsg;",
          "",
          "[Added Lines]",
          "1502:   assert( pTab->p.pConfig->pzErrmsg==0 );",
          "1503:   pTab->p.pConfig->pzErrmsg = &pTab->p.base.zErrMsg;",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "1544:     if( eType0==SQLITE_INTEGER && fts5IsContentless(pTab) ){",
          "1546:           \"cannot %s contentless fts5 table: %s\",",
          "1547:           (nArg>1 ? \"UPDATE\" : \"DELETE from\"), pConfig->zName",
          "1548:       );",
          "",
          "[Removed Lines]",
          "1545:       pTab->base.zErrMsg = sqlite3_mprintf(",
          "",
          "[Added Lines]",
          "1544:       pTab->p.base.zErrMsg = sqlite3_mprintf(",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "1600:     }",
          "1601:   }",
          "1604:   return rc;",
          "1605: }",
          "",
          "[Removed Lines]",
          "1603:   pTab->pConfig->pzErrmsg = 0;",
          "",
          "[Added Lines]",
          "1602:   pTab->p.pConfig->pzErrmsg = 0;",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "1610: static int fts5SyncMethod(sqlite3_vtab *pVtab){",
          "1611:   int rc;",
          "1613:   fts5CheckTransactionState(pTab, FTS5_SYNC, 0);",
          "1615:   fts5TripCursors(pTab);",
          "1616:   rc = sqlite3Fts5StorageSync(pTab->pStorage);",
          "1618:   return rc;",
          "1619: }",
          "",
          "[Removed Lines]",
          "1612:   Fts5Table *pTab = (Fts5Table*)pVtab;",
          "1614:   pTab->pConfig->pzErrmsg = &pTab->base.zErrMsg;",
          "1617:   pTab->pConfig->pzErrmsg = 0;",
          "",
          "[Added Lines]",
          "1611:   Fts5FullTable *pTab = (Fts5FullTable*)pVtab;",
          "1613:   pTab->p.pConfig->pzErrmsg = &pTab->p.base.zErrMsg;",
          "1616:   pTab->p.pConfig->pzErrmsg = 0;",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "1624: static int fts5BeginMethod(sqlite3_vtab *pVtab){",
          "1627:   return SQLITE_OK;",
          "1628: }",
          "",
          "[Removed Lines]",
          "1625:   fts5CheckTransactionState((Fts5Table*)pVtab, FTS5_BEGIN, 0);",
          "1626:   fts5NewTransaction((Fts5Table*)pVtab);",
          "",
          "[Added Lines]",
          "1624:   fts5CheckTransactionState((Fts5FullTable*)pVtab, FTS5_BEGIN, 0);",
          "1625:   fts5NewTransaction((Fts5FullTable*)pVtab);",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "1635: static int fts5CommitMethod(sqlite3_vtab *pVtab){",
          "1638:   return SQLITE_OK;",
          "1639: }",
          "",
          "[Removed Lines]",
          "1637:   fts5CheckTransactionState((Fts5Table*)pVtab, FTS5_COMMIT, 0);",
          "",
          "[Added Lines]",
          "1636:   fts5CheckTransactionState((Fts5FullTable*)pVtab, FTS5_COMMIT, 0);",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "1645: static int fts5RollbackMethod(sqlite3_vtab *pVtab){",
          "1646:   int rc;",
          "1648:   fts5CheckTransactionState(pTab, FTS5_ROLLBACK, 0);",
          "1649:   rc = sqlite3Fts5StorageRollback(pTab->pStorage);",
          "1650:   return rc;",
          "",
          "[Removed Lines]",
          "1647:   Fts5Table *pTab = (Fts5Table*)pVtab;",
          "",
          "[Added Lines]",
          "1646:   Fts5FullTable *pTab = (Fts5FullTable*)pVtab;",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "1668:   sqlite3_int64 *pnToken",
          "1669: ){",
          "1670:   Fts5Cursor *pCsr = (Fts5Cursor*)pCtx;",
          "1672:   return sqlite3Fts5StorageSize(pTab->pStorage, iCol, pnToken);",
          "1673: }",
          "1675: static int fts5ApiRowCount(Fts5Context *pCtx, i64 *pnRow){",
          "1676:   Fts5Cursor *pCsr = (Fts5Cursor*)pCtx;",
          "1678:   return sqlite3Fts5StorageRowCount(pTab->pStorage, pnRow);",
          "1679: }",
          "",
          "[Removed Lines]",
          "1671:   Fts5Table *pTab = (Fts5Table*)(pCsr->base.pVtab);",
          "1677:   Fts5Table *pTab = (Fts5Table*)(pCsr->base.pVtab);",
          "",
          "[Added Lines]",
          "1670:   Fts5FullTable *pTab = (Fts5FullTable*)(pCsr->base.pVtab);",
          "1676:   Fts5FullTable *pTab = (Fts5FullTable*)(pCsr->base.pVtab);",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "1709: ){",
          "1710:   int rc = SQLITE_OK;",
          "1711:   Fts5Cursor *pCsr = (Fts5Cursor*)pCtx;",
          "1715:   }else{",
          "",
          "[Removed Lines]",
          "1712:   if( fts5IsContentless((Fts5Table*)(pCsr->base.pVtab)) ){",
          "",
          "[Added Lines]",
          "1711:   if( fts5IsContentless((Fts5FullTable*)(pCsr->base.pVtab)) ){",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "1904: static int fts5ApiColumnSize(Fts5Context *pCtx, int iCol, int *pnToken){",
          "1905:   Fts5Cursor *pCsr = (Fts5Cursor*)pCtx;",
          "1908:   int rc = SQLITE_OK;",
          "1910:   if( CsrFlagTest(pCsr, FTS5CSR_REQUIRE_DOCSIZE) ){",
          "",
          "[Removed Lines]",
          "1906:   Fts5Table *pTab = (Fts5Table*)(pCsr->base.pVtab);",
          "1907:   Fts5Config *pConfig = pTab->pConfig;",
          "",
          "[Added Lines]",
          "1905:   Fts5FullTable *pTab = (Fts5FullTable*)(pCsr->base.pVtab);",
          "1906:   Fts5Config *pConfig = pTab->p.pConfig;",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "2160:   int(*xCallback)(const Fts5ExtensionApi*, Fts5Context*, void*)",
          "2161: ){",
          "2162:   Fts5Cursor *pCsr = (Fts5Cursor*)pCtx;",
          "2164:   int rc;",
          "2165:   Fts5Cursor *pNew = 0;",
          "",
          "[Removed Lines]",
          "2163:   Fts5Table *pTab = (Fts5Table*)(pCsr->base.pVtab);",
          "",
          "[Added Lines]",
          "2162:   Fts5FullTable *pTab = (Fts5FullTable*)(pCsr->base.pVtab);",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "2250: ){",
          "2251:   Fts5Cursor *pCsr;",
          "2252:   pCsr = fts5CursorFromCsrid(pGlobal, iCsrId);",
          "2253:   if( pCsr ){",
          "2257:   }",
          "2258:   return 0;",
          "2259: }",
          "",
          "[Removed Lines]",
          "2246: Fts5Index *sqlite3Fts5IndexFromCsrid(",
          "2254:     Fts5Table *pTab = (Fts5Table*)pCsr->base.pVtab;",
          "2256:     return pTab->pIndex;",
          "",
          "[Added Lines]",
          "2242: Fts5Table *sqlite3Fts5TableFromCsrid(",
          "2249:     return (Fts5Table*)pCsr->base.pVtab;",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "2337: ){",
          "2340:   Fts5Cursor *pCsr = (Fts5Cursor*)pCursor;",
          "2341:   int rc = SQLITE_OK;",
          "",
          "[Removed Lines]",
          "2338:   Fts5Table *pTab = (Fts5Table*)(pCursor->pVtab);",
          "2339:   Fts5Config *pConfig = pTab->pConfig;",
          "",
          "[Added Lines]",
          "2331:   Fts5FullTable *pTab = (Fts5FullTable*)(pCursor->pVtab);",
          "2332:   Fts5Config *pConfig = pTab->p.pConfig;",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "2390: ){",
          "2392:   Fts5Auxiliary *pAux;",
          "2394:   UNUSED_PARAM(nUnused);",
          "",
          "[Removed Lines]",
          "2391:   Fts5Table *pTab = (Fts5Table*)pVtab;",
          "",
          "[Added Lines]",
          "2384:   Fts5FullTable *pTab = (Fts5FullTable*)pVtab;",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "2412: ){",
          "2414:   return sqlite3Fts5StorageRename(pTab->pStorage, zName);",
          "2415: }",
          "2422: static int fts5SavepointMethod(sqlite3_vtab *pVtab, int iSavepoint){",
          "2428: }",
          "",
          "[Removed Lines]",
          "2413:   Fts5Table *pTab = (Fts5Table*)pVtab;",
          "2423:   Fts5Table *pTab = (Fts5Table*)pVtab;",
          "2425:   fts5CheckTransactionState(pTab, FTS5_SAVEPOINT, iSavepoint);",
          "2426:   fts5TripCursors(pTab);",
          "2427:   return sqlite3Fts5StorageSync(pTab->pStorage);",
          "",
          "[Added Lines]",
          "2406:   Fts5FullTable *pTab = (Fts5FullTable*)pVtab;",
          "2410: int sqlite3Fts5FlushToDisk(Fts5Table *pTab){",
          "2411:   fts5TripCursors((Fts5FullTable*)pTab);",
          "2412:   return sqlite3Fts5StorageSync(((Fts5FullTable*)pTab)->pStorage);",
          "2413: }",
          "2422:   fts5CheckTransactionState((Fts5FullTable*)pVtab, FTS5_SAVEPOINT, iSavepoint);",
          "2423:   return sqlite3Fts5FlushToDisk((Fts5Table*)pVtab);",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "2435: static int fts5ReleaseMethod(sqlite3_vtab *pVtab, int iSavepoint){",
          "2441: }",
          "",
          "[Removed Lines]",
          "2436:   Fts5Table *pTab = (Fts5Table*)pVtab;",
          "2438:   fts5CheckTransactionState(pTab, FTS5_RELEASE, iSavepoint);",
          "2439:   fts5TripCursors(pTab);",
          "2440:   return sqlite3Fts5StorageSync(pTab->pStorage);",
          "",
          "[Added Lines]",
          "2433:   fts5CheckTransactionState((Fts5FullTable*)pVtab, FTS5_RELEASE, iSavepoint);",
          "2434:   return sqlite3Fts5FlushToDisk((Fts5Table*)pVtab);",
          "",
          "---------------",
          "--- Hunk 49 ---",
          "[Context before]",
          "2448: static int fts5RollbackToMethod(sqlite3_vtab *pVtab, int iSavepoint){",
          "2451:   fts5CheckTransactionState(pTab, FTS5_ROLLBACKTO, iSavepoint);",
          "2452:   fts5TripCursors(pTab);",
          "",
          "[Removed Lines]",
          "2449:   Fts5Table *pTab = (Fts5Table*)pVtab;",
          "",
          "[Added Lines]",
          "2443:   Fts5FullTable *pTab = (Fts5FullTable*)pVtab;",
          "",
          "---------------"
        ],
        "ext/fts5/fts5_vocab.c||ext/fts5/fts5_vocab.c": [
          "File: ext/fts5/fts5_vocab.c -> ext/fts5/fts5_vocab.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "327:   sqlite3_vtab_cursor **ppCsr",
          "328: ){",
          "329:   Fts5VocabTable *pTab = (Fts5VocabTable*)pVTab;",
          "332:   Fts5VocabCursor *pCsr = 0;",
          "333:   int rc = SQLITE_OK;",
          "334:   sqlite3_stmt *pStmt = 0;",
          "",
          "[Removed Lines]",
          "330:   Fts5Index *pIndex = 0;",
          "331:   Fts5Config *pConfig = 0;",
          "",
          "[Added Lines]",
          "329:   Fts5Table *pFts5 = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "348:   if( pStmt && sqlite3_step(pStmt)==SQLITE_ROW ){",
          "349:     i64 iId = sqlite3_column_int64(pStmt, 0);",
          "351:   }",
          "361:     }",
          "362:   }",
          "364:   if( rc==SQLITE_OK ){",
          "366:     pCsr = (Fts5VocabCursor*)sqlite3Fts5MallocZero(&rc, nByte);",
          "367:   }",
          "369:   if( pCsr ){",
          "371:     pCsr->pStmt = pStmt;",
          "373:     pCsr->aCnt = (i64*)&pCsr[1];",
          "375:   }else{",
          "376:     sqlite3_finalize(pStmt);",
          "377:   }",
          "",
          "[Removed Lines]",
          "350:     pIndex = sqlite3Fts5IndexFromCsrid(pTab->pGlobal, iId, &pConfig);",
          "353:   if( rc==SQLITE_OK && pIndex==0 ){",
          "354:     rc = sqlite3_finalize(pStmt);",
          "355:     pStmt = 0;",
          "356:     if( rc==SQLITE_OK ){",
          "357:       pVTab->zErrMsg = sqlite3_mprintf(",
          "358:           \"no such fts5 table: %s.%s\", pTab->zFts5Db, pTab->zFts5Tbl",
          "359:       );",
          "360:       rc = SQLITE_ERROR;",
          "365:     int nByte = pConfig->nCol * sizeof(i64) * 2 + sizeof(Fts5VocabCursor);",
          "370:     pCsr->pIndex = pIndex;",
          "372:     pCsr->pConfig = pConfig;",
          "374:     pCsr->aDoc = &pCsr->aCnt[pConfig->nCol];",
          "",
          "[Added Lines]",
          "348:     pFts5 = sqlite3Fts5TableFromCsrid(pTab->pGlobal, iId);",
          "351:   if( rc==SQLITE_OK ){",
          "352:     if( pFts5==0 ){",
          "353:       rc = sqlite3_finalize(pStmt);",
          "354:       pStmt = 0;",
          "355:       if( rc==SQLITE_OK ){",
          "356:         pVTab->zErrMsg = sqlite3_mprintf(",
          "357:             \"no such fts5 table: %s.%s\", pTab->zFts5Db, pTab->zFts5Tbl",
          "358:             );",
          "359:         rc = SQLITE_ERROR;",
          "360:       }",
          "361:     }else{",
          "362:       rc = sqlite3Fts5FlushToDisk(pFts5);",
          "367:     int nByte = pFts5->pConfig->nCol * sizeof(i64)*2 + sizeof(Fts5VocabCursor);",
          "372:     pCsr->pFts5 = pFts5;",
          "375:     pCsr->aDoc = &pCsr->aCnt[pFts5->pConfig->nCol];",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "387:   sqlite3_free(pCsr->zLeTerm);",
          "388:   pCsr->nLeTerm = -1;",
          "389:   pCsr->zLeTerm = 0;",
          "390: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "391:   pCsr->bEof = 0;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "425: }",
          "427: static int fts5VocabInstanceNext(Fts5VocabCursor *pCsr){",
          "429:   int rc = SQLITE_OK;",
          "430:   Fts5IndexIter *pIter = pCsr->pIter;",
          "431:   i64 *pp = &pCsr->iInstPos;",
          "",
          "[Removed Lines]",
          "428:   int eDetail = pCsr->pConfig->eDetail;",
          "",
          "[Added Lines]",
          "430:   int eDetail = pCsr->pFts5->pConfig->eDetail;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "460:   Fts5VocabCursor *pCsr = (Fts5VocabCursor*)pCursor;",
          "461:   Fts5VocabTable *pTab = (Fts5VocabTable*)pCursor->pVtab;",
          "462:   int rc = SQLITE_OK;",
          "465:   pCsr->rowid++;",
          "",
          "[Removed Lines]",
          "463:   int nCol = pCsr->pConfig->nCol;",
          "",
          "[Added Lines]",
          "465:   int nCol = pCsr->pFts5->pConfig->nCol;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "499:       assert( pTab->eType==FTS5_VOCAB_COL || pTab->eType==FTS5_VOCAB_ROW );",
          "500:       while( rc==SQLITE_OK ){",
          "",
          "[Removed Lines]",
          "501:         int eDetail = pCsr->pConfig->eDetail;",
          "",
          "[Added Lines]",
          "503:         int eDetail = pCsr->pFts5->pConfig->eDetail;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "570:   if( rc==SQLITE_OK && pCsr->bEof==0 && pTab->eType==FTS5_VOCAB_COL ){",
          "571:     while( pCsr->aDoc[pCsr->iCol]==0 ) pCsr->iCol++;",
          "573:   }",
          "574:   return rc;",
          "575: }",
          "",
          "[Removed Lines]",
          "572:     assert( pCsr->iCol<pCsr->pConfig->nCol );",
          "",
          "[Added Lines]",
          "574:     assert( pCsr->iCol<pCsr->pFts5->pConfig->nCol );",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "627:   }",
          "629:   if( rc==SQLITE_OK ){",
          "631:   }",
          "632:   if( rc==SQLITE_OK && eType==FTS5_VOCAB_INSTANCE ){",
          "633:     rc = fts5VocabInstanceNewTerm(pCsr);",
          "634:   }",
          "638:   ){",
          "639:     rc = fts5VocabNextMethod(pCursor);",
          "640:   }",
          "",
          "[Removed Lines]",
          "630:     rc = sqlite3Fts5IndexQuery(pCsr->pIndex, zTerm, nTerm, f, 0, &pCsr->pIter);",
          "635:   if( rc==SQLITE_OK",
          "636:    && !pCsr->bEof",
          "637:    && (eType!=FTS5_VOCAB_INSTANCE || pCsr->pConfig->eDetail!=FTS5_DETAIL_NONE)",
          "",
          "[Added Lines]",
          "632:     Fts5Index *pIndex = pCsr->pFts5->pIndex;",
          "633:     rc = sqlite3Fts5IndexQuery(pIndex, zTerm, nTerm, f, 0, &pCsr->pIter);",
          "638:   if( rc==SQLITE_OK && !pCsr->bEof",
          "639:    && (eType!=FTS5_VOCAB_INSTANCE",
          "640:     || pCsr->pFts5->pConfig->eDetail!=FTS5_DETAIL_NONE)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "658: ){",
          "659:   Fts5VocabCursor *pCsr = (Fts5VocabCursor*)pCursor;",
          "661:   int eType = ((Fts5VocabTable*)(pCursor->pVtab))->eType;",
          "662:   i64 iVal = 0;",
          "",
          "[Removed Lines]",
          "660:   int eDetail = pCsr->pConfig->eDetail;",
          "",
          "[Added Lines]",
          "663:   int eDetail = pCsr->pFts5->pConfig->eDetail;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "669:     assert( iCol==1 || iCol==2 || iCol==3 );",
          "670:     if( iCol==1 ){",
          "671:       if( eDetail!=FTS5_DETAIL_NONE ){",
          "673:         sqlite3_result_text(pCtx, z, -1, SQLITE_STATIC);",
          "674:       }",
          "675:     }else if( iCol==2 ){",
          "",
          "[Removed Lines]",
          "672:         const char *z = pCsr->pConfig->azCol[pCsr->iCol];",
          "",
          "[Added Lines]",
          "675:         const char *z = pCsr->pFts5->pConfig->azCol[pCsr->iCol];",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "697:         }else if( eDetail==FTS5_DETAIL_COLUMNS ){",
          "698:           ii = (int)pCsr->iInstPos;",
          "699:         }",
          "702:           sqlite3_result_text(pCtx, z, -1, SQLITE_STATIC);",
          "703:         }",
          "704:         break;",
          "",
          "[Removed Lines]",
          "700:         if( ii>=0 && ii<pCsr->pConfig->nCol ){",
          "701:           const char *z = pCsr->pConfig->azCol[ii];",
          "",
          "[Added Lines]",
          "703:         if( ii>=0 && ii<pCsr->pFts5->pConfig->nCol ){",
          "704:           const char *z = pCsr->pFts5->pConfig->azCol[ii];",
          "",
          "---------------"
        ],
        "ext/fts5/test/fts5vocab.test||ext/fts5/test/fts5vocab.test": [
          "File: ext/fts5/test/fts5vocab.test -> ext/fts5/test/fts5vocab.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "479:   expr [lsearch $e2 SorterSort]<0",
          "480: } 0",
          "484: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "482: #-------------------------------------------------------------------------",
          "483: do_execsql_test 10.0 {",
          "484:   CREATE VIRTUAL TABLE ft USING fts5(a, b, c);",
          "485:   CREATE VIRTUAL TABLE t2 USING fts5vocab('ft','row');",
          "486:   CREATE VIRTUAL TABLE t3 USING fts5vocab('ft','row');",
          "487: }",
          "489: do_execsql_test 10.1 {",
          "490:   BEGIN;",
          "491:     INSERT INTO ft(b) VALUES('x y');",
          "492: }",
          "494: do_execsql_test 10.2 {",
          "495:   SELECT t2.term FROM t2;",
          "496: } {x y}",
          "498: do_execsql_test 10.3 {",
          "499:   SELECT t2.term, t3.term FROM t2, t3;",
          "500: } {x x x y y x y y}",
          "502: do_execsql_test 10.4 {",
          "503:   COMMIT;",
          "504: }",
          "506: do_execsql_test 10.5 {",
          "507:   BEGIN;",
          "508:     INSERT INTO ft(a) VALUES('1 2 3');",
          "509:     INSERT INTO ft(a) VALUES('4 5 6');",
          "510:     INSERT INTO ft(a) VALUES('1 2 3');",
          "511:     INSERT INTO ft(a) VALUES('4 5 6');",
          "512:     INSERT INTO ft(a) VALUES('1 2 3');",
          "513:     INSERT INTO ft(a) VALUES('4 5 6');",
          "514: }",
          "516: do_test 10.6 {",
          "517:   set res [list]",
          "518:   db eval { SELECT rowid FROM ft('4') } x {",
          "519:     db eval { SELECT * FROM t2 }",
          "520:     lappend res $x(rowid)",
          "521:   }",
          "522:   db eval COMMIT",
          "523:   set res",
          "524: } {3 5 7}",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: df08d472b090b212fb77ce2aae0e1ffe79ae5db4b1accf55e6fdb18e8b0a7098",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "70738712deac70dbadd5692edd6135494eed6a12",
      "candidate_info": {
        "commit_hash": "70738712deac70dbadd5692edd6135494eed6a12",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/70738712deac70dbadd5692edd6135494eed6a12",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbe.c"
        ],
        "message": "Improved type information display when tracing VDBE execution.\n\nFossilOrigin-Name: ee83d8e30d6f9ca8f1cce653ee094ff151f633f4b6a21dd814ab07e8cfb901eb",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbe.c||src/vdbe.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 6fe0367f9a337b7c62886b7771f3ce0642faa13f4e4f3d9a0c848abbab514cd0",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c"
        ]
      }
    },
    {
      "candidate_hash": "348d7f64f2f24191570a9e47cb937d76ee3b5ca2",
      "candidate_info": {
        "commit_hash": "348d7f64f2f24191570a9e47cb937d76ee3b5ca2",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/348d7f64f2f24191570a9e47cb937d76ee3b5ca2",
        "files": [
          "ext/rtree/rtree.c",
          "ext/rtree/rtree1.test",
          "ext/rtree/rtreeH.test",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Be strict about type enforcement on rowid look-ups in the RTREE extension. Ticket [30e2c183b6b356e4]\n\nFossilOrigin-Name: d43e0efb9642037dd751cfed13438e71cfceb50e14a0ec603880c6c3be2e93b1",
        "before_after_code_files": [
          "ext/rtree/rtree.c||ext/rtree/rtree.c",
          "ext/rtree/rtree1.test||ext/rtree/rtree1.test",
          "ext/rtree/rtreeH.test||ext/rtree/rtreeH.test",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/rtree/rtree.c||ext/rtree/rtree.c": [
          "File: ext/rtree/rtree.c -> ext/rtree/rtree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1818:     i64 iRowid = sqlite3_value_int64(argv[0]);",
          "1819:     i64 iNode = 0;",
          "1821:     if( rc==SQLITE_OK && pLeaf!=0 ){",
          "1822:       p = rtreeSearchPointNew(pCsr, RTREE_ZERO, 0);",
          "",
          "[Removed Lines]",
          "1820:     rc = findLeafNode(pRtree, iRowid, &pLeaf, &iNode);",
          "",
          "[Added Lines]",
          "1820:     int eType = sqlite3_value_numeric_type(argv[0]);",
          "1821:     if( eType==SQLITE_INTEGER",
          "1822:      || (eType==SQLITE_FLOAT && sqlite3_value_double(argv[0])==iRowid)",
          "1823:     ){",
          "1824:       rc = findLeafNode(pRtree, iRowid, &pLeaf, &iNode);",
          "1825:     }else{",
          "1826:       rc = SQLITE_OK;",
          "1827:       pLeaf = 0;",
          "1828:     }",
          "",
          "---------------"
        ],
        "ext/rtree/rtree1.test||ext/rtree/rtree1.test": [
          "File: ext/rtree/rtree1.test -> ext/rtree/rtree1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "601:   1 0.0 0.0",
          "602:   2 52.0 81.0",
          "603: }",
          "606:   DROP TABLE t10;",
          "607:   CREATE VIRTUAL TABLE t10 USING rtree_i32(ii, x1, x2);",
          "608:   INSERT INTO t10 VALUES(1, 'one', 'two');",
          "609:   INSERT INTO t10 VALUES(2, '52xyz', '81...');",
          "610:   INSERT INTO t10 VALUES(3, 42.3, 49.9);",
          "611: }",
          "613:   SELECT * FROM t10;",
          "614: } {",
          "615:   1 0 0",
          "",
          "[Removed Lines]",
          "605: do_execsql_test 14.4 {",
          "612: do_execsql_test 14.5 {",
          "",
          "[Added Lines]",
          "604: do_execsql_test 14.6 {",
          "605:   INSERT INTO t10 VALUES(0,10,20);",
          "606:   SELECT * FROM t10 WHERE ii=NULL;",
          "607: } {}",
          "608: do_execsql_test 14.7 {",
          "609:   SELECT * FROM t10 WHERE ii='xyz';",
          "610: } {}",
          "611: do_execsql_test 14.8 {",
          "612:   SELECT * FROM t10 WHERE ii='0.0';",
          "613: } {0 10.0 20.0}",
          "614: do_execsql_test 14.9 {",
          "615:   SELECT * FROM t10 WHERE ii=0.0;",
          "616: } {0 10.0 20.0}",
          "619: do_execsql_test 14.104 {",
          "626: do_execsql_test 14.105 {",
          "",
          "---------------"
        ],
        "ext/rtree/rtreeH.test||ext/rtree/rtreeH.test": [
          "File: ext/rtree/rtreeH.test -> ext/rtree/rtreeH.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "43: do_execsql_test rtreeH-102 {",
          "44:   SELECT * FROM t1 WHERE rowid=5;",
          "45: } {5 40.0 60.0 40.0 60.0 center {}}",
          "46: do_execsql_test rtreeH-103 {",
          "47:   SELECT * FROM t1 WHERE label='center';",
          "48: } {5 40.0 60.0 40.0 60.0 center {}}",
          "50: do_rtree_integrity_test rtreeH-110 t1",
          "52: do_execsql_test rtreeH-120 {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "46: do_execsql_test rtreeH-102b {",
          "47:   SELECT * FROM t1 WHERE rowid=5.0;",
          "48: } {5 40.0 60.0 40.0 60.0 center {}}",
          "49: do_execsql_test rtreeH-102c {",
          "50:   SELECT * FROM t1 WHERE rowid='5';",
          "51: } {5 40.0 60.0 40.0 60.0 center {}}",
          "52: do_execsql_test rtreeH-102d {",
          "53:   SELECT * FROM t1 WHERE rowid='0005';",
          "54: } {5 40.0 60.0 40.0 60.0 center {}}",
          "55: do_execsql_test rtreeH-102e {",
          "56:   SELECT * FROM t1 WHERE rowid='+5.0e+0';",
          "57: } {5 40.0 60.0 40.0 60.0 center {}}",
          "62: do_execsql_test rtreeH-104 {",
          "63:   SELECT * FROM t1 WHERE rowid='+5.0e+0x';",
          "64: } {}",
          "65: do_execsql_test rtreeH-105 {",
          "66:   SELECT * FROM t1 WHERE rowid=x'35';",
          "67: } {}",
          "68: do_execsql_test rtreeH-106 {",
          "69:   SELECT * FROM t1 WHERE rowid=null;",
          "70: } {}",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: f898d04cf272ef0130dcae146cb86d8630b10a6f19aecfc2fa70e97e082bd51c",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1f3b284b11bdc781dba7fe655fd287b2d9bef029",
      "candidate_info": {
        "commit_hash": "1f3b284b11bdc781dba7fe655fd287b2d9bef029",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/1f3b284b11bdc781dba7fe655fd287b2d9bef029",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/alter.c",
          "src/vdbeaux.c",
          "test/altertab3.test"
        ],
        "message": "Ensure that ALTER TABLE commands open statement transactions. Fix for [596d059a].\n\nFossilOrigin-Name: 0f2129f59f7df929106e2af876c2976dea6528c1dc1850d64cddb256f20e121a",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/alter.c||src/alter.c",
          "src/vdbeaux.c||src/vdbeaux.c",
          "test/altertab3.test||test/altertab3.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: fb60150aeedc3898cb249c75c98a7cb48fcec090f94ded7896b634e436c7daa5",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/alter.c||src/alter.c": [
          "File: src/alter.c -> src/alter.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "166:   }",
          "167: #endif",
          "174:   v = sqlite3GetVdbe(pParse);",
          "175:   if( v==0 ){",
          "176:     goto exit_rename_table;",
          "177:   }",
          "180:   zTabName = pTab->zName;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "177:   sqlite3MayAbort(pParse);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "243:     int i = ++pParse->nMem;",
          "244:     sqlite3VdbeLoadString(v, i, zName);",
          "245:     sqlite3VdbeAddOp4(v, OP_VRename, i, 0, 0,(const char*)pVTab, P4_VTAB);",
          "247:   }",
          "248: #endif",
          "",
          "[Removed Lines]",
          "246:     sqlite3MayAbort(pParse);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "567:   zNew = sqlite3NameFromToken(db, pNew);",
          "568:   if( !zNew ) goto exit_rename_column;",
          "569:   assert( pNew->n>0 );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "566:   sqlite3MayAbort(pParse);",
          "",
          "---------------"
        ],
        "src/vdbeaux.c||src/vdbeaux.c": [
          "File: src/vdbeaux.c -> src/vdbeaux.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "637:     int opcode = pOp->opcode;",
          "638:     if( opcode==OP_Destroy || opcode==OP_VUpdate || opcode==OP_VRename",
          "639:      || opcode==OP_VDestroy",
          "640:      || ((opcode==OP_Halt || opcode==OP_HaltIfNull)",
          "641:       && ((pOp->p1)!=SQLITE_OK && pOp->p2==OE_Abort))",
          "642:     ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "640:      || (opcode==OP_Function0 && pOp->p4.pFunc->funcFlags&SQLITE_FUNC_INTERNAL)",
          "",
          "---------------"
        ],
        "test/altertab3.test||test/altertab3.test": [
          "File: test/altertab3.test -> test/altertab3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "81:   SELECT sql FROM sqlite_master WHERE name = 'v1'",
          "82: } {{CREATE VIEW v1 AS SELECT * FROM t1 WHERE a=1 OR (bbb IN ())}}",
          "86: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "84: #-------------------------------------------------------------------------",
          "85: reset_db",
          "86: do_execsql_test 4.0 {",
          "87:   CREATE TABLE t1(a, b);",
          "88:   CREATE TABLE t3(e, f);",
          "89:   CREATE TRIGGER tr1 AFTER INSERT ON t1 BEGIN",
          "90:     INSERT INTO t2 VALUES(new.a, new.b);",
          "91:   END;",
          "92: }",
          "94: do_catchsql_test 4.1.2 {",
          "95:   BEGIN;",
          "96:     ALTER TABLE t3 RENAME TO t4;",
          "97: } {1 {error in trigger tr1: no such table: main.t2}}",
          "98: do_execsql_test 4.1.2 {",
          "99:   COMMIT;",
          "100: }",
          "101: do_execsql_test 4.1.3 {",
          "102:   SELECT * FROM sqlite_master WHERE type='table' AND name!='t1';",
          "103: } {table t3 t3 3 {CREATE TABLE t3(e, f)}}",
          "106: do_catchsql_test 4.2.1 {",
          "107:   BEGIN;",
          "108:     ALTER TABLE t3 RENAME e TO eee;",
          "109: } {1 {error in trigger tr1: no such table: main.t2}}",
          "110: do_execsql_test 4.2.2 {",
          "111:   COMMIT;",
          "112: }",
          "113: do_execsql_test 4.2.3 {",
          "114:   SELECT * FROM sqlite_master WHERE type='table' AND name!='t1';",
          "115: } {table t3 t3 3 {CREATE TABLE t3(e, f)}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "174c21ff06fd8e31b6ad415fdadf5b50c1225443",
      "candidate_info": {
        "commit_hash": "174c21ff06fd8e31b6ad415fdadf5b50c1225443",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/174c21ff06fd8e31b6ad415fdadf5b50c1225443",
        "files": [
          "ext/fts5/fts5_buffer.c",
          "ext/fts5/fts5_index.c",
          "ext/fts5/test/fts5corrupt3.test",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Fix further problems with fts5 and corrupt databases causing integer overflow.\n\nFossilOrigin-Name: 673a7dd698eca05bb2909fa01f962a0667361732a6d0e61cf7780ead4a07c967",
        "before_after_code_files": [
          "ext/fts5/fts5_buffer.c||ext/fts5/fts5_buffer.c",
          "ext/fts5/fts5_index.c||ext/fts5/fts5_index.c",
          "ext/fts5/test/fts5corrupt3.test||ext/fts5/test/fts5corrupt3.test",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts5/fts5_buffer.c||ext/fts5/fts5_buffer.c": [
          "File: ext/fts5/fts5_buffer.c -> ext/fts5/fts5_buffer.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: int sqlite3Fts5BufferSize(int *pRc, Fts5Buffer *pBuf, u32 nByte){",
          "19:   if( (u32)pBuf->nSpace<nByte ){",
          "21:     u8 *pNew;",
          "22:     while( nNew<nByte ){",
          "23:       nNew = nNew * 2;",
          "24:     }",
          "26:     if( pNew==0 ){",
          "28:       return 1;",
          "",
          "[Removed Lines]",
          "20:     u32 nNew = pBuf->nSpace ? pBuf->nSpace : 64;",
          "25:     pNew = sqlite3_realloc(pBuf->p, nNew);",
          "",
          "[Added Lines]",
          "20:     u64 nNew = pBuf->nSpace ? pBuf->nSpace : 64;",
          "25:     pNew = sqlite3_realloc64(pBuf->p, nNew);",
          "",
          "---------------"
        ],
        "ext/fts5/fts5_index.c||ext/fts5/fts5_index.c": [
          "File: ext/fts5/fts5_index.c -> ext/fts5/fts5_index.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2234:   int szLeaf = pIter->pLeaf->szLeaf;",
          "2235:   int n = pIter->pLeaf->nn;",
          "2242:   int bEndOfPage = 0;",
          "",
          "[Removed Lines]",
          "2237:   int nMatch = 0;",
          "2238:   int nKeep = 0;",
          "2239:   int nNew = 0;",
          "2240:   int iTermOff;",
          "",
          "[Added Lines]",
          "2237:   u32 nMatch = 0;",
          "2238:   u32 nKeep = 0;",
          "2239:   u32 nNew = 0;",
          "2240:   u32 iTermOff;",
          "",
          "---------------"
        ],
        "ext/fts5/test/fts5corrupt3.test||ext/fts5/test/fts5corrupt3.test": [
          "File: ext/fts5/test/fts5corrupt3.test -> ext/fts5/test/fts5corrupt3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "2817:   COMMIT;",
          "2818: } {0 {}}",
          "2820: sqlite3_fts5_may_be_corrupt 0",
          "2821: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2820: #--------------------------------------------------------------------------",
          "2821: reset_db",
          "2822: do_test 27.0 {",
          "2823:   sqlite3 db {}",
          "2824:   db deserialize [decode_hexdb {",
          "2825: | size 32768 pagesize 4096 filename timeout-2ca5b0658c98.db",
          "2826: | page 1 offset 0",
          "2827: |      0: 53 51 4c 69 74 65 20 66 6f 72 6d 61 74 20 33 00   SQLite format 3.",
          "2828: |     16: 10 00 01 01 00 40 20 20 00 00 00 00 00 00 00 08   .....@  ........",
          "2829: |     32: 00 00 00 02 00 00 00 01 00 00 00 09 00 00 00 04   ................",
          "2830: |     48: 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00   ................",
          "2831: |     96: 00 00 00 00 0d 0f c7 00 07 0d 92 00 0f 8d 0f 36   ...............6",
          "2832: |    112: 0e cb 0e 6b 0e 0e 0d b6 0d 92 0d 92 00 00 00 00   ...k............",
          "2833: |   3472: 00 00 22 08 06 17 11 11 01 31 74 61 62 6c 65 74   .........1tablet",
          "2834: |   3488: 32 74 32 08 43 52 45 41 54 45 20 54 41 42 4c 45   2t2.CREATE TABLE",
          "2835: |   3504: 20 74 32 28 78 29 56 07 06 17 1f 1f 01 7d 74 61    t2(x)V.......ta",
          "2836: |   3520: 62 6c 65 74 31 5f 63 6f 6e 66 69 67 74 31 5f 63   blet1_configt1_c",
          "2837: |   3536: 6f 6e 66 69 67 07 43 52 45 41 54 45 20 54 41 42   onfig.CREATE TAB",
          "2838: |   3552: 4c 45 20 27 74 31 5f 63 6f 6e 66 69 67 27 28 6b   LE 't1_config'(k",
          "2839: |   3568: 20 50 52 49 4d 41 52 59 20 4b 45 59 2c 20 76 29    PRIMARY KEY, v)",
          "2840: |   3584: 20 57 49 54 48 4f 55 54 20 52 4f 57 49 44 5b 06    WITHOUT ROWID[.",
          "2841: |   3600: 07 17 21 21 01 81 01 74 61 62 6c 65 74 31 5f 64   ..!!...tablet1_d",
          "2842: |   3616: 6f 63 73 69 7a 65 74 31 5f 64 6f 63 73 69 7a 65   ocsizet1_docsize",
          "2843: |   3632: 06 43 52 45 41 54 45 20 54 41 42 4c 45 20 27 74   .CREATE TABLE 't",
          "2844: |   3648: 31 5f 64 6f 63 73 69 7a 65 27 28 69 64 20 49 4e   1_docsize'(id IN",
          "2845: |   3664: 54 45 47 45 52 20 50 52 49 4d 41 52 59 20 4b 45   TEGER PRIMARY KE",
          "2846: |   3680: 59 2c 20 73 7a 20 42 4c 4f 42 29 5e 05 07 17 21   Y, sz BLOB)^...!",
          "2847: |   3696: 21 01 81 07 74 61 62 6c 65 74 31 5f 63 6f 6e 74   !...tablet1_cont",
          "2848: |   3712: 65 6e 74 74 31 5f 63 6f 6e 74 65 6e 74 05 43 52   entt1_content.CR",
          "2849: |   3728: 45 41 54 45 20 54 41 42 4c 45 20 27 74 31 5f 63   EATE TABLE 't1_c",
          "2850: |   3744: 6f 6e 74 65 6e 74 27 28 69 64 20 49 4e 54 45 47   ontent'(id INTEG",
          "2851: |   3760: 45 52 20 50 52 49 4d 41 52 59 20 4b 45 59 2c 20   ER PRIMARY KEY,",
          "2852: |   3776: 63 30 2c 20 63 31 2c 20 63 32 29 69 04 07 17 19   c0, c1, c2)i....",
          "2853: |   3792: 19 01 81 2d 74 61 62 6c 65 74 31 5f 69 64 78 74   ...-tablet1_idxt",
          "2854: |   3808: 31 5f 69 64 78 04 43 52 45 41 54 45 20 54 41 42   1_idx.CREATE TAB",
          "2855: |   3824: 4c 45 20 27 74 31 5f 69 64 78 27 28 73 65 67 69   LE 't1_idx'(segi",
          "2856: |   3840: 64 2c 20 74 65 72 6d 2c 20 70 67 6e 6f 2c 20 50   d, term, pgno, P",
          "2857: |   3856: 52 49 4d 41 52 59 20 4b 45 59 28 73 65 67 69 64   RIMARY KEY(segid",
          "2858: |   3872: 2c 20 74 65 72 6d 29 29 20 57 49 54 48 4f 55 54   , term)) WITHOUT",
          "2859: |   3888: 20 52 4f 57 49 44 55 03 07 17 1b 1b 01 81 01 74    ROWIDU........t",
          "2860: |   3904: 61 62 6c 65 74 31 5f 64 61 74 61 74 31 5f 64 61   ablet1_datat1_da",
          "2861: |   3920: 74 61 03 43 52 45 41 54 45 20 54 41 42 4c 45 20   ta.CREATE TABLE",
          "2862: |   3936: 27 74 31 5f 64 61 74 61 27 28 69 64 20 49 4e 54   't1_data'(id INT",
          "2863: |   3952: 45 47 45 52 20 50 52 49 4d 41 52 59 20 4b 45 59   EGER PRIMARY KEY",
          "2864: |   3968: 2c 20 62 6c 6f 63 6b 20 42 4c 4f 42 29 38 02 06   , block BLOB)8..",
          "2865: |   3984: 17 11 11 08 5f 74 61 62 6c 65 74 31 74 31 43 52   ...._tablet1t1CR",
          "2866: |   4000: 45 41 54 45 20 56 49 52 54 55 41 4c 20 54 41 42   EATE VIRTUAL TAB",
          "2867: |   4016: 4c 45 20 74 31 20 55 53 49 4e 47 20 66 74 73 35   LE t1 USING fts5",
          "2868: |   4032: 28 61 2c 62 2c 63 29 00 00 00 39 00 00 00 00 00   (a,b,c)...9.....",
          "2869: | page 3 offset 8192",
          "2870: |      0: 0d 00 00 00 03 0c 94 00 0f e6 0f ef 0c 94 00 00   ................",
          "2871: |   3216: 00 00 00 00 86 4a 84 80 80 80 80 01 04 00 8d 18   .....J..........",
          "2872: |   3232: 00 00 03 2b 02 30 30 01 02 06 01 02 06 01 02 06   ...+.00.........",
          "2873: |   3248: 1f 02 03 01 02 03 01 02 03 01 08 32 30 31 36 30   ...........20160",
          "2874: |   3264: 36 30 39 01 02 07 01 02 07 01 02 07 01 01 34 01   609...........4.",
          "2875: |   3280: 02 05 01 02 05 01 02 05 01 01 35 01 02 04 01 02   ..........5.....",
          "2876: |   3296: 04 01 02 04 02 07 30 30 30 30 30 30 30 1c 02 04   ......0000000...",
          "2877: |   3312: 01 02 04 01 02 04 01 06 62 69 6e 61 72 79 03 06   ........binary..",
          "2878: |   3328: 01 02 02 03 06 01 02 02 03 06 01 02 02 03 06 01   ................",
          "2879: |   3344: 02 02 03 06 01 02 02 03 06 01 02 02 03 06 01 02   ................",
          "2880: |   3360: 02 03 06 01 02 02 03 06 01 02 02 03 06 01 02 02   ................",
          "2881: |   3376: 03 06 01 02 02 03 06 01 02 02 01 08 63 6f 6d 70   ............comp",
          "2882: |   3392: 69 6c 65 72 01 20 01 02 02 02 01 02 02 01 06 64   iler. .........d",
          "2883: |   3408: 62 73 7c cc cc cc cc cc cc cc cc cc cc cc cc cc   bs|.............",
          "2884: |   3424: cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc   ................",
          "2885: |   3440: cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc   ................",
          "2886: |   3456: cc cc cc cc cc cc c4 61 74 07 02 03 01 02 03 01   .......at.......",
          "2887: |   3472: 02 03 02 04 65 62 75 67 04 02 02 01 02 02 01 02   ....ebug........",
          "2888: |   3488: 02 01 06 65 6e 61 62 6c 65 07 02 02 01 02 02 01   ...enable.......",
          "2889: |   3504: 02 02 01 02 02 01 02 02 01 02 02 01 02 02 01 02   ................",
          "2890: |   3520: 02 01 02 02 01 02 02 01 02 02 01 02 02 01 02 02   ................",
          "2891: |   3536: 01 02 02 01 02 02 01 02 02 01 02 02 01 02 05 23   ...............#",
          "2892: |   3552: d6 76 36 32 d3 52 e3 42 e3 02 03 23 03 13 63 03   .v62.R.B...#..c.",
          "2893: |   3568: 63 03 95 84 e4 f4 34 15 34 52 60 10 50 04 30 f1   c.....4.4R`.P.0.",
          "2894: |   3584: 74 34 f4 d5 04 94 c4 55 23 d6 76 36 32 d3 52 e3   t4.....U#.v62.R.",
          "2895: |   3600: 42 e3 02 03 23 03 13 63 03 63 03 95 85 25 45 24   B...#..c.c...%E$",
          "2896: |   3616: 94 d0 d0 00 00 02 40 ee 00 00 ff 80 ff 00 fe 80   ......@.........",
          "2897: |   3632: fe 00 fd 80 fd 00 fc 80 fc 00 fb 80 fb 00 fa 80   ................",
          "2898: |   3648: fa 00 f9 80 f9 00 f8 80 f8 00 f7 80 f7 00 f6 80   ................",
          "2899: |   3664: f6 00 f5 80 f5 00 f4 80 f4 00 f8 0f 30 0f 28 0f   ............0.(.",
          "2900: |   3680: 20 0f 18 0f 10 0f 08 0f 00 0e f8 0e f0 0e e8 0e    ...............",
          "2901: |   3696: e0 02 02 03 06 01 02 02 03 06 01 02 02 03 06 01   ................",
          "2902: |   3712: 02 02 03 06 01 02 02 03 06 01 02 02 03 06 01 02   ................",
          "2903: |   3728: 02 01 04 6f 6d 69 74 1f 02 02 01 02 02 01 02 02   ...omit.........",
          "2904: |   3744: 01 05 72 74 72 65 65 19 02 03 01 02 03 01 02 03   ..rtree.........",
          "2905: |   3760: 04 02 69 6d 01 06 01 02 02 03 06 01 02 02 03 06   ..im............",
          "2906: |   3776: 01 02 02 03 06 01 02 02 03 06 01 02 02 03 06 01   ................",
          "2907: |   3792: 02 02 03 06 01 02 02 03 06 01 02 02 03 06 01 02   ................",
          "2908: |   3808: 02 03 06 01 02 02 03 06 01 02 02 03 06 01 02 02   ................",
          "2909: |   3824: 01 0a 74 68 72 65 61 64 73 61 66 65 22 02 02 01   ..threadsafe....",
          "2910: |   3840: 02 02 01 02 02 01 04 76 74 61 62 07 02 04 01 02   .......vtab.....",
          "2911: |   3856: 04 01 02 04 01 01 78 01 06 01 01 02 01 06 01 01   ......x.........",
          "2912: |   3872: 02 01 06 01 01 02 01 06 01 01 02 01 06 01 01 02   ................",
          "2913: |   3888: 01 06 01 01 02 01 06 01 01 02 01 06 01 01 02 01   ................",
          "2914: |   3904: 06 01 01 02 01 06 01 01 02 01 06 01 01 02 01 06   ................",
          "2915: |   3920: 01 01 02 01 06 01 01 02 01 06 01 01 02 01 06 01   ................",
          "2916: |   3936: 01 02 01 06 01 01 02 01 06 01 01 02 01 06 01 01   ................",
          "2917: |   3952: 02 01 06 01 01 02 01 06 01 01 02 01 06 01 01 02   ................",
          "2918: |   3968: 01 06 01 01 02 01 06 01 01 02 01 06 01 01 02 01   ................",
          "2919: |   3984: 06 01 01 02 01 06 01 01 02 01 06 01 01 02 01 06   ................",
          "2920: |   4000: 01 01 02 01 06 01 01 02 01 06 01 01 02 01 06 01   ................",
          "2921: |   4016: 01 02 01 06 01 01 02 01 06 01 01 02 01 06 01 01   ................",
          "2922: |   4032: 02 01 06 01 01 02 01 06 01 01 02 04 15 13 0c 0c   ................",
          "2923: |   4048: 12 44 13 11 0f 47 13 0f 0c 0e 11 10 0f 0e 10 0f   .D...G..........",
          "2924: |   4064: 44 0f 10 40 15 0f 07 01 03 00 14 24 5a 24 24 0f   D..@.......$Z$$.",
          "2925: |   4080: 0a 03 00 24 00 00 00 00 01 01 01 00 01 01 01 01   ...$............",
          "2926: | page 4 offset 12288",
          "2927: |      0: 0a 00 00 00 01 0f fa 00 0f fa 00 00 00 00 00 00   ................",
          "2928: |   4080: 00 00 00 00 00 00 00 00 00 00 05 04 09 0c 01 02   ................",
          "2929: | page 5 offset 16384",
          "2930: |      0: 0d 00 00 00 24 0c 0a 00 0f d8 0f af 0f 86 0f 74   ....$..........t",
          "2931: |     16: 0f 61 0f 4e 0f 2f 0f 0f 0e ef 0e d7 0e be 0e a5   .a.N./..........",
          "2932: |     32: 0e 8d 0e 74 0e 5b 0e 40 0e 24 0e 08 0d ef 0d d5   ...t.[.@.$......",
          "2933: |     48: 0d bb 0d a0 0d 84 0d 68 0d 4f 0d 35 0d 1b 0c fb   .......h.O.5....",
          "2934: |     64: 0c da 0c b9 0c 99 0c 78 0c 57 0c 3e 0c 24 0c 0a   .......x.W.>.$..",
          "2935: |   3072: 00 00 00 00 00 00 00 00 00 00 18 24 05 00 25 0f   ...........$..%.",
          "2936: |   3088: 19 54 48 52 45 41 44 53 41 46 45 3d 30 58 42 49   .THREADSAFE=0XBI",
          "2937: |   3104: 4e 41 52 59 18 23 05 00 25 0f 19 54 48 52 45 41   NARY.#..%..THREA",
          "2938: |   3120: 44 53 41 46 45 3d 30 58 4e 4f 43 41 53 45 17 22   DSAFE=0XNOCASE..",
          "2939: |   3136: 05 00 25 0f 17 54 48 52 45 41 44 53 41 46 45 3d   ..%..THREADSAFE=",
          "2940: |   3152: 30 58 52 54 52 49 4d 1f 21 05 00 33 0f 19 4f 4d   0XRTRIM.!..3..OM",
          "2941: |   3168: 49 54 20 4c 4f 41 44 20 45 58 54 45 4e 53 49 4f   IT LOAD EXTENSIO",
          "2942: |   3184: 4e 58 42 49 4e 41 52 59 1f 20 05 00 33 0f 19 4f   NXBINARY. ..3..O",
          "2943: |   3200: 4d 49 54 20 4c 4f 41 44 20 45 58 54 45 4e 53 49   MIT LOAD EXTENSI",
          "2944: |   3216: 4f 4e 58 4e 4f 43 41 53 45 1e 1f 05 00 33 0f 17   ONXNOCASE....3..",
          "2945: |   3232: 4f 4d 49 54 20 4c 4f 41 44 20 45 5f e8 54 45 4e   OMIT LOAD E_.TEN",
          "2946: |   3248: 53 49 4f 4e 58 52 54 52 49 4d 1f 1e 05 00 33 0f   SIONXRTRIM....3.",
          "2947: |   3264: 19 4d 41 58 20 4d 45 4d 4f 52 59 3d 35 30 31 81   .MAX MEMORY=501.",
          "2948: |   3280: 40 50 02 50 f1 94 54 e4 14 24 c4 52 04 a5 35 f4   @P.P..T..$.R..5.",
          "2949: |   3296: e3 15 84 e4 f4 34 15 34 51 71 30 50 02 50 f1 74   .....4.4Qq0P.P.t",
          "2950: |   3312: 54 e4 14 24 c4 52 04 a5 34 f4 e3 15 85 25 45 24   T..$.R..4....%E$",
          "2951: |   3328: 94 d1 a1 20 50 02 90 f1 94 54 e4 14 24 c4 52 04   ... P....T..$.R.",
          "2952: |   3344: 74 54 f5 04 f4 c5 95 84 24 94 e4 15 25 91 a1 10   tT......$...%...",
          "2953: |   3360: 50 02 90 f1 94 54 e4 14 24 c4 52 04 74 54 f5 04   P....T..$.R.tT..",
          "2954: |   3376: f4 c5 95 84 e4 f4 34 15 34 51 91 00 50 02 90 f1   ......4.4Q..P...",
          "2955: |   3392: 74 54 e4 14 24 c4 52 04 74 54 f5 04 f4 c5 95 85   tT..$.R.tT......",
          "2956: |   3408: 25 45 24 94 d1 70 f0 50 02 30 f1 94 54 e4 14 24   %E$..p.P.0..T..$",
          "2957: |   3424: c4 52 04 65 45 33 55 84 24 94 e4 15 25 91 70 e0   .R.eE3U.$...%.p.",
          "2958: |   3440: 50 02 30 f1 94 54 e4 14 24 c4 52 04 65 45 33 55   P.0..T..$.R.eE3U",
          "2959: |   3456: 84 e4 f4 34 15 34 51 60 d0 50 02 30 f1 74 54 e4   ...4.4Q`.P.0.tT.",
          "2960: |   3472: 14 24 c4 52 04 65 45 33 55 85 25 45 24 94 d1 70   .$.R.eE3U.%E$..p",
          "2961: |   3488: c0 50 02 30 f1 94 54 e4 14 24 c4 52 04 65 45 33   .P.0..T..$.R.eE3",
          "2962: |   3504: 45 84 24 94 e4 15 25 91 70 b0 50 02 30 f1 94 54   E.$...%.p.P.0..T",
          "2963: |   3520: e4 14 24 c4 52 04 65 45 33 45 84 e4 f4 34 15 34   ..$.R.eE3E...4.4",
          "2964: |   3536: 51 60 a0 50 02 30 f1 74 54 e4 14 24 c4 52 04 65   Q`.P.0.tT..$.R.e",
          "2965: |   3552: 45 33 45 85 25 45 24 94 d1 e0 90 50 03 10 f1 94   E3E.%E$....P....",
          "2966: |   3568: 54 e4 42 4c 45 20 44 42 53 54 41 54 20 56 54 41   T.BLE DBSTAT VTA",
          "2967: |   3584: 42 58 42 49 4e 41 52 59 1e 08 05 00 31 0f 19 45   BXBINARY....1..E",
          "2968: |   3600: e4 14 24 c4 52 04 44 25 35 44 15 42 05 65 42 41   ..$.R.D%5D.B.eBA",
          "2969: |   3616: 54 84 e4 f4 34 15 34 51 d0 70 50 03 10 f1 74 54   T...4.4Q.pP...tT",
          "2970: |   3632: e4 14 24 c4 52 04 44 25 35 44 15 42 05 65 44 14   ..$.R.D%5D.B.eD.",
          "2971: |   3648: 25 85 25 45 24 94 d1 10 60 50 01 70 f1 94 44 54   %.%E$...`P.p..DT",
          "2972: |   3664: 25 54 75 84 24 94 e4 15 25 91 10 50 50 01 70 f1   %Tu.$...%..PP.p.",
          "2973: |   3680: 94 44 54 25 54 75 84 e4 f4 34 15 34 51 00 40 50   .DT%Tu...4.4Q.@P",
          "2974: |   3696: 01 70 f1 74 44 54 25 54 75 85 25 45 24 94 d2 70   .p.tDT%Tu.%E$..p",
          "2975: |   3712: 30 50 04 30 f1 94 34 f4 d5 04 94 c4 55 23 d6 76   0P.0..4.....U#.v",
          "2976: |   3728: 36 32 d3 52 e3 42 e3 02 03 23 03 13 63 03 63 03   62.R.B...#..c.c.",
          "2977: |   3744: 95 84 24 94 e4 15 25 92 70 20 50 04 30 f1 94 34   ..$...%.p P.0..4",
          "2978: |   3760: f4 d5 04 94 c4 53 30 01 00 00 10 10 04 02 02 00   .....S0.........",
          "2979: |   3776: 00 00 00 00 00 00 00 80 00 00 00 20 00 00 00 10   ........... ....",
          "2980: |   3792: 00 00 00 90 00 00 00 40 00 00 00 00 00 00 00 00   .......@........",
          "2981: | page 6 offset 20480",
          "2982: |   3808: 06 24 03 00 12 02 01 01 06 23 03 00 12 02 01 01   .$.......#......",
          "2983: |   3824: 06 22 03 00 12 02 01 01 06 21 03 00 12 03 01 01   .........!......",
          "2984: |   3840: 06 20 03 00 12 03 01 01 06 1f 03 00 12 03 01 01   . ..............",
          "2985: |   3856: 06 1e 03 00 12 03 01 01 06 1d 03 00 12 03 01 01   ................",
          "2986: |   3872: 06 1c 03 00 12 03 01 01 06 1b 03 00 12 02 01 01   ................",
          "2987: |   3888: 06 1a 03 00 12 02 01 01 06 19 03 00 12 02 01 01   ................",
          "2988: |   3904: 06 18 03 00 12 02 01 01 06 17 03 00 12 02 01 01   ................",
          "2989: |   3920: 06 16 03 00 12 02 01 01 06 15 03 00 12 02 01 01   ................",
          "2990: |   3936: 06 14 03 00 12 02 01 01 06 13 03 00 12 02 01 01   ................",
          "2991: |   3952: 06 12 03 00 12 02 01 01 06 11 03 00 12 02 01 01   ................",
          "2992: |   3968: 06 10 03 00 12 02 01 01 06 0f 03 00 12 02 01 01   ................",
          "2993: |   3984: 06 0e 03 00 12 02 01 01 06 0d 03 00 12 02 01 01   ................",
          "2994: |   4000: 06 0c 03 00 12 02 01 01 06 0b 03 00 12 02 01 01   ................",
          "2995: |   4016: 06 0a 03 00 12 02 01 01 06 09 03 00 12 03 01 01   ................",
          "2996: |   4032: 06 08 03 00 12 03 01 01 06 07 03 00 12 03 01 01   ................",
          "2997: |   4048: 06 06 03 00 12 01 01 01 06 05 03 00 12 01 01 01   ................",
          "2998: |   4064: 06 04 03 00 12 01 01 01 06 03 03 00 12 06 01 01   ................",
          "2999: |   4080: 06 02 03 00 12 06 01 01 06 01 03 00 12 06 01 01   ................",
          "3000: | page 7 offset 24576",
          "3001: |      0: 0a 00 00 00 01 0f f4 00 0f f4 00 00 00 00 00 00   ................",
          "3002: |   4080: 00 00 00 00 0b 03 1b 01 76 65 72 73 69 6f 6e 04   ........version.",
          "3003: | page 8 offset 28672",
          "3004: |      0: 0d 00 00 00 03 0f d6 00 0f f4 0f e9 0f d6 00 00   ................",
          "3005: |   4048: 00 00 00 00 00 00 11 03 02 2b 69 6e 74 65 67 72   .........+integr",
          "3006: |   4064: 69 74 79 2d 63 68 65 63 6b 09 02 02 1b 72 65 62   ity-check....reb",
          "3007: |   4080: 75 69 6c 64 0a 01 02 1d 6f 70 74 69 6d 69 7a 65   uild....optimize",
          "3008: | end timeout-2ca5b0658c98.db",
          "3009: }]} {}",
          "3011: do_catchsql_test 27.1 {",
          "3012:   DELETE FROM t1 WHERE a MATCH 'fts*';",
          "3013: } {1 {database disk image is malformed}}",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: d0e943d9574c7cab1af4a0fe753a0b5f91ea0e884b91a85b13239144b71f067c",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}