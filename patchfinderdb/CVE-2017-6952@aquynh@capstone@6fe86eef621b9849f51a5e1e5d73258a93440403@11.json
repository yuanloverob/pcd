{
  "cve_id": "CVE-2017-6952",
  "cve_desc": "Integer overflow in the cs_winkernel_malloc function in winkernel_mm.c in Capstone 3.0.4 and earlier allows attackers to cause a denial of service (heap-based buffer overflow in a kernel driver) or possibly have unspecified other impact via a large value.",
  "repo": "aquynh/capstone",
  "patch_hash": "6fe86eef621b9849f51a5e1e5d73258a93440403",
  "patch_info": {
    "commit_hash": "6fe86eef621b9849f51a5e1e5d73258a93440403",
    "repo": "aquynh/capstone",
    "commit_url": "https://github.com/aquynh/capstone/commit/6fe86eef621b9849f51a5e1e5d73258a93440403",
    "files": [
      "windows/winkernel_mm.c"
    ],
    "message": "provide a validity check to prevent against Integer overflow conditions (#870)\n\n* provide a validity check to prevent against Integer overflow conditions\n\n* fix some style issues.",
    "before_after_code_files": [
      "windows/winkernel_mm.c||windows/winkernel_mm.c"
    ]
  },
  "patch_diff": {
    "windows/winkernel_mm.c||windows/winkernel_mm.c": [
      "File: windows/winkernel_mm.c -> windows/winkernel_mm.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "4: #include \"winkernel_mm.h\"",
      "5: #include <ntddk.h>",
      "8: static const ULONG CS_WINKERNEL_POOL_TAG = 'kwsC';",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6: #include <Ntintsafe.h>",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "35: #pragma prefast(suppress : 30030)  // Allocating executable POOL_TYPE memory",
      "38:  if (!block) {",
      "39:   return NULL;",
      "40:  }",
      "",
      "[Removed Lines]",
      "36:  CS_WINKERNEL_MEMBLOCK *block = (CS_WINKERNEL_MEMBLOCK *)ExAllocatePoolWithTag(",
      "37:    NonPagedPool, size + sizeof(CS_WINKERNEL_MEMBLOCK), CS_WINKERNEL_POOL_TAG);",
      "",
      "[Added Lines]",
      "37:  size_t number_of_bytes = 0;",
      "38:  CS_WINKERNEL_MEMBLOCK *block = NULL;",
      "42:  if (!NT_SUCCESS(RtlSizeTAdd(size, sizeof(CS_WINKERNEL_MEMBLOCK), &number_of_bytes))) {",
      "43:   return NULL;",
      "44:  }",
      "45:  block = (CS_WINKERNEL_MEMBLOCK *)ExAllocatePoolWithTag(",
      "46:    NonPagedPool, number_of_bytes, CS_WINKERNEL_POOL_TAG);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "6fab6cf7c44834aa8d139091cab879908380abac",
      "candidate_info": {
        "commit_hash": "6fab6cf7c44834aa8d139091cab879908380abac",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/6fab6cf7c44834aa8d139091cab879908380abac",
        "files": [
          "cstool/cstool.c"
        ],
        "message": "cstool: convert space to tab",
        "before_after_code_files": [
          "cstool/cstool.c||cstool/cstool.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "cstool/cstool.c||cstool/cstool.c": [
          "File: cstool/cstool.c -> cstool/cstool.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: static uint8_t char_to_hexnum(char c)",
          "23: {",
          "24:  if (c >= '0' && c <= '9') {",
          "26:  }",
          "28:  if (c >= 'a' && c <= 'f') {",
          "",
          "[Removed Lines]",
          "25:         return (uint8_t)(c - '0');",
          "",
          "[Added Lines]",
          "25:   return (uint8_t)(c - '0');",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "38: static uint8_t *preprocess(char *code, size_t *size)",
          "39: {",
          "41:  uint8_t high, low;",
          "42:  uint8_t *result;",
          "",
          "[Removed Lines]",
          "40:     size_t i = 0, j = 0;",
          "",
          "[Added Lines]",
          "40:  size_t i = 0, j = 0;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "123:  uint64_t address = 0;",
          "124:  cs_insn *insn;",
          "125:  cs_err err;",
          "130:  if (argc != 3 && argc != 4 && argc != 5) {",
          "131:   usage(argv[0]);",
          "132:   return -1;",
          "133:  }",
          "175:  if (!strcmp(mode, \"arm\")) {",
          "178:  }",
          "180:  if (!strcmp(mode, \"armb\")) {",
          "183:  }",
          "185:  if (!strcmp(mode, \"arml\")) {",
          "188:  }",
          "190:  if (!strcmp(mode, \"thumb\")) {",
          "193:  }",
          "195:  if (!strcmp(mode, \"thumbbe\")) {",
          "198:  }",
          "200:  if (!strcmp(mode, \"thumble\")) {",
          "203:  }",
          "205:  if (!strcmp(mode, \"arm64\")) {",
          "208:  }",
          "210:  if (!strcmp(mode, \"mips\")) {",
          "213:  }",
          "215:  if (!strcmp(mode, \"mipsbe\")) {",
          "218:  }",
          "220:  if (!strcmp(mode, \"mips64\")) {",
          "223:  }",
          "225:  if (!strcmp(mode, \"mips64be\")) {",
          "228:  }",
          "230:  if (!strcmp(mode, \"x16\")) {",
          "234:  }",
          "236:  if (!strcmp(mode, \"x32\")) {",
          "240:  }",
          "242:  if (!strcmp(mode, \"x64\")) {",
          "245:   err = cs_open(CS_ARCH_X86, CS_MODE_64, &handle);",
          "246:  }",
          "248:  if (!strcmp(mode, \"x16att\")) {",
          "254:   }",
          "255:  }",
          "257:  if (!strcmp(mode,\"x32att\")) {",
          "260:   err = cs_open(CS_ARCH_X86, CS_MODE_32, &handle);",
          "261:   if (!err) {",
          "262:    cs_option(handle, CS_OPT_SYNTAX, CS_OPT_SYNTAX_ATT);",
          "",
          "[Removed Lines]",
          "126:     cs_mode md;",
          "127:     char *arch;",
          "128:     bool debug_flag = false;",
          "135:     if (!strcmp(argv[1], \"-d\")) {",
          "136:         if (argc == 3) {",
          "137:             usage(argv[0]);",
          "138:             return -1;",
          "139:         }",
          "140:         debug_flag = true;",
          "141:         mode = argv[2];",
          "142:         assembly = preprocess(argv[3], &size);",
          "143:         if (argc == 5) {",
          "144:             char *temp;",
          "145:             address = strtoull(argv[4], &temp, 16);",
          "146:             if (temp == argv[4] || *temp != '\\0' || errno == ERANGE) {",
          "147:                 printf(\"ERROR: invalid address argument, quit!\\n\");",
          "148:                 return -2;",
          "149:             }",
          "150:         }",
          "151:     } else {",
          "152:         if (argc == 5) {",
          "153:             usage(argv[0]);",
          "154:             return -1;",
          "155:         }",
          "157:         mode = argv[1];",
          "158:         assembly = preprocess(argv[2], &size);",
          "159:         if (assembly == NULL) {",
          "160:             printf(\"ERROR: invalid assembler-string argument, quit!\\n\");",
          "161:             return -3;",
          "162:         }",
          "164:         if (argc == 4) {",
          "166:             char *temp;",
          "167:             address = strtoull(argv[3], &temp, 16);",
          "168:             if (temp == argv[3] || *temp != '\\0' || errno == ERANGE) {",
          "169:                 printf(\"ERROR: invalid address argument, quit!\\n\");",
          "170:                 return -2;",
          "171:             }",
          "172:         }",
          "173:     }",
          "176:         arch = \"arm\";",
          "177:         err = cs_open(CS_ARCH_ARM, CS_MODE_ARM, &handle);",
          "181:         arch = \"arm\";",
          "182:         err = cs_open(CS_ARCH_ARM, CS_MODE_ARM + CS_MODE_BIG_ENDIAN, &handle);",
          "186:         arch = \"arm\";",
          "187:         err = cs_open(CS_ARCH_ARM, CS_MODE_ARM + CS_MODE_LITTLE_ENDIAN, &handle);",
          "191:         arch = \"arm\";",
          "192:         err = cs_open(CS_ARCH_ARM, CS_MODE_THUMB + CS_MODE_LITTLE_ENDIAN, &handle);",
          "196:         arch = \"arm\";",
          "197:         err = cs_open(CS_ARCH_ARM, CS_MODE_THUMB + CS_MODE_BIG_ENDIAN, &handle);",
          "201:         arch = \"arm\";",
          "202:         err = cs_open(CS_ARCH_ARM, CS_MODE_ARM + CS_MODE_LITTLE_ENDIAN, &handle);",
          "206:         arch = \"arm64\";",
          "207:         err = cs_open(CS_ARCH_ARM64, CS_MODE_LITTLE_ENDIAN, &handle);",
          "211:         arch = \"mips\";",
          "212:         err = cs_open(CS_ARCH_MIPS, CS_MODE_MIPS32 + CS_MODE_LITTLE_ENDIAN, &handle);",
          "216:         arch = \"mips\";",
          "217:         err = cs_open(CS_ARCH_MIPS, CS_MODE_MIPS32 + CS_MODE_BIG_ENDIAN, &handle);",
          "221:         arch = \"mips\";",
          "222:         err = cs_open(CS_ARCH_MIPS, CS_MODE_MIPS64 + CS_MODE_BIG_ENDIAN, &handle);",
          "226:         arch = \"mips\";",
          "227:         err = cs_open(CS_ARCH_MIPS, CS_MODE_MIPS64 + CS_MODE_BIG_ENDIAN, &handle);",
          "231:         md = CS_MODE_16;",
          "232:         arch = \"x86\";",
          "233:         err = cs_open(CS_ARCH_X86, CS_MODE_16, &handle);",
          "237:         md = CS_MODE_32;",
          "238:         arch = \"x86\";",
          "239:         err = cs_open(CS_ARCH_X86, CS_MODE_32, &handle);",
          "243:         md = CS_MODE_64;",
          "244:         arch = \"x86\";",
          "249:         md = CS_MODE_16;",
          "250:         arch = \"x86\";",
          "251:         err = cs_open(CS_ARCH_X86, CS_MODE_16, &handle);",
          "252:         if (!err) {",
          "253:             cs_option(handle, CS_OPT_SYNTAX, CS_OPT_SYNTAX_ATT);",
          "258:         md = CS_MODE_32;",
          "259:         arch = \"x86\";",
          "",
          "[Added Lines]",
          "126:  cs_mode md;",
          "127:  char *arch;",
          "128:  bool debug_flag = false;",
          "135:  if (!strcmp(argv[1], \"-d\")) {",
          "136:    if (argc == 3) {",
          "137:     usage(argv[0]);",
          "138:     return -1;",
          "139:  }",
          "140:   debug_flag = true;",
          "141:   mode = argv[2];",
          "142:   assembly = preprocess(argv[3], &size);",
          "143:   if (argc == 5) {",
          "144:    char *temp;",
          "145:    address = strtoull(argv[4], &temp, 16);",
          "146:    if (temp == argv[4] || *temp != '\\0' || errno == ERANGE) {",
          "147:     printf(\"ERROR: invalid address argument, quit!\\n\");",
          "148:     return -2;",
          "149:    }",
          "150:   }",
          "151:  } else {",
          "152:   if (argc == 5) {",
          "153:    usage(argv[0]);",
          "154:    return -1;",
          "155:   }",
          "157:   mode = argv[1];",
          "158:   assembly = preprocess(argv[2], &size);",
          "159:   if (assembly == NULL) {",
          "160:    printf(\"ERROR: invalid assembler-string argument, quit!\\n\");",
          "161:    return -3;",
          "162:   }",
          "164:   if (argc == 4) {",
          "166:    char *temp;",
          "167:    address = strtoull(argv[3], &temp, 16);",
          "168:    if (temp == argv[3] || *temp != '\\0' || errno == ERANGE) {",
          "169:     printf(\"ERROR: invalid address argument, quit!\\n\");",
          "170:     return -2;",
          "171:    }",
          "172:   }",
          "173:  }",
          "176:   arch = \"arm\";",
          "177:   err = cs_open(CS_ARCH_ARM, CS_MODE_ARM, &handle);",
          "181:   arch = \"arm\";",
          "182:   err = cs_open(CS_ARCH_ARM, CS_MODE_ARM + CS_MODE_BIG_ENDIAN, &handle);",
          "186:   arch = \"arm\";",
          "187:   err = cs_open(CS_ARCH_ARM, CS_MODE_ARM + CS_MODE_LITTLE_ENDIAN, &handle);",
          "191:   arch = \"arm\";",
          "192:   err = cs_open(CS_ARCH_ARM, CS_MODE_THUMB + CS_MODE_LITTLE_ENDIAN, &handle);",
          "196:   arch = \"arm\";",
          "197:   err = cs_open(CS_ARCH_ARM, CS_MODE_THUMB + CS_MODE_BIG_ENDIAN, &handle);",
          "201:   arch = \"arm\";",
          "202:   err = cs_open(CS_ARCH_ARM, CS_MODE_ARM + CS_MODE_LITTLE_ENDIAN, &handle);",
          "206:   arch = \"arm64\";",
          "207:   err = cs_open(CS_ARCH_ARM64, CS_MODE_LITTLE_ENDIAN, &handle);",
          "211:   arch = \"mips\";",
          "212:   err = cs_open(CS_ARCH_MIPS, CS_MODE_MIPS32 + CS_MODE_LITTLE_ENDIAN, &handle);",
          "216:   arch = \"mips\";",
          "217:   err = cs_open(CS_ARCH_MIPS, CS_MODE_MIPS32 + CS_MODE_BIG_ENDIAN, &handle);",
          "221:   arch = \"mips\";",
          "222:   err = cs_open(CS_ARCH_MIPS, CS_MODE_MIPS64 + CS_MODE_BIG_ENDIAN, &handle);",
          "226:   arch = \"mips\";",
          "227:   err = cs_open(CS_ARCH_MIPS, CS_MODE_MIPS64 + CS_MODE_BIG_ENDIAN, &handle);",
          "231:   md = CS_MODE_16;",
          "232:   arch = \"x86\";",
          "233:   err = cs_open(CS_ARCH_X86, CS_MODE_16, &handle);",
          "237:   md = CS_MODE_32;",
          "238:   arch = \"x86\";",
          "239:   err = cs_open(CS_ARCH_X86, CS_MODE_32, &handle);",
          "243:   md = CS_MODE_64;",
          "244:   arch = \"x86\";",
          "249:   md = CS_MODE_16;",
          "250:   arch = \"x86\";",
          "251:   err = cs_open(CS_ARCH_X86, CS_MODE_16, &handle);",
          "252:   if (!err) {",
          "253:    cs_option(handle, CS_OPT_SYNTAX, CS_OPT_SYNTAX_ATT);",
          "258:   md = CS_MODE_32;",
          "259:   arch = \"x86\";",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "264:  }",
          "266:  if (!strcmp(mode,\"x64att\")) {",
          "269:   err = cs_open(CS_ARCH_X86, CS_MODE_64, &handle);",
          "270:   if (!err) {",
          "271:    cs_option(handle, CS_OPT_SYNTAX, CS_OPT_SYNTAX_ATT);",
          "",
          "[Removed Lines]",
          "267:         md = CS_MODE_64;",
          "268:         arch = \"x86\";",
          "",
          "[Added Lines]",
          "267:   md = CS_MODE_64;",
          "268:   arch = \"x86\";",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "273:  }",
          "275:  if (!strcmp(mode,\"ppc64\")) {",
          "277:   err = cs_open(CS_ARCH_PPC, CS_MODE_64+CS_MODE_LITTLE_ENDIAN, &handle);",
          "278:  }",
          "280:  if (!strcmp(mode,\"ppc64be\")) {",
          "283:  }",
          "285:  if (!strcmp(mode,\"sparc\")) {",
          "287:   err = cs_open(CS_ARCH_SPARC, CS_MODE_BIG_ENDIAN, &handle);",
          "288:  }",
          "290:  if (!strcmp(mode, \"systemz\") || !strcmp(mode, \"sysz\") || !strcmp(mode, \"s390x\")) {",
          "292:   err = cs_open(CS_ARCH_SYSZ, CS_MODE_BIG_ENDIAN, &handle);",
          "293:  }",
          "295:  if (!strcmp(mode,\"xcore\")) {",
          "297:   err = cs_open(CS_ARCH_XCORE, CS_MODE_BIG_ENDIAN, &handle);",
          "298:  }",
          "",
          "[Removed Lines]",
          "276:         arch = \"ppc\";",
          "281:         arch = \"ppc\";",
          "282:         err = cs_open(CS_ARCH_PPC,CS_MODE_64+CS_MODE_BIG_ENDIAN, &handle);",
          "286:         arch = \"sparc\";",
          "291:         arch = \"sysz\";",
          "296:         arch = \"xcore\";",
          "",
          "[Added Lines]",
          "276:   arch = \"ppc\";",
          "281:   arch = \"ppc\";",
          "282:   err = cs_open(CS_ARCH_PPC,CS_MODE_64+CS_MODE_BIG_ENDIAN, &handle);",
          "286:   arch = \"sparc\";",
          "291:   arch = \"sysz\";",
          "296:   arch = \"xcore\";",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "303:   return -1;",
          "304:  }",
          "311:  if (count > 0) {",
          "312:   size_t i;",
          "",
          "[Removed Lines]",
          "306:     if (debug_flag) {",
          "307:         cs_option(handle, CS_OPT_DETAIL, CS_OPT_ON);",
          "308:     }",
          "310:     count = cs_disasm(handle, assembly, size, address, 0, &insn);",
          "",
          "[Added Lines]",
          "306:  if (debug_flag) {",
          "307:   cs_option(handle, CS_OPT_DETAIL, CS_OPT_ON);",
          "308:  }",
          "310:  count = cs_disasm(handle, assembly, size, address, 0, &insn);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "325:     }",
          "326:    }",
          "327:    printf(\"  %s\\t%s\\n\", insn[i].mnemonic, insn[i].op_str);",
          "361:   }",
          "362:   cs_free(insn, count);",
          "363:  } else {",
          "",
          "[Removed Lines]",
          "328:             if (debug_flag) {",
          "329:                 if (!strcmp(arch, \"x86\")) {",
          "330:                     print_insn_detail_x86(handle, md, &insn[i]);",
          "331:                 }",
          "333:                 if (!strcmp(arch, \"arm\")) {",
          "334:                     print_insn_detail_arm(handle, &insn[i]);",
          "335:                 }",
          "337:                 if (!strcmp(arch,\"arm64\")) {",
          "338:                     print_insn_detail_arm64(handle,&insn[i]);",
          "339:                 }",
          "341:                 if (!strcmp(arch, \"mips\")) {",
          "342:                     print_insn_detail_mips(handle, &insn[i]);",
          "343:                 }",
          "345:                 if (!strcmp(arch, \"ppc\")) {",
          "346:                     print_insn_detail_ppc(handle, &insn[i]);",
          "347:                 }",
          "349:                 if (!strcmp(arch, \"sparc\")) {",
          "350:                     print_insn_detail_sparc(handle, &insn[i]);",
          "351:                 }",
          "353:                 if (!strcmp(arch, \"sysz\")) {",
          "354:                     print_insn_detail_sysz(handle, &insn[i]);",
          "355:                 }",
          "357:                 if (!strcmp(arch, \"xcore\")) {",
          "358:                     print_insn_detail_xcore(handle, &insn[i]);",
          "359:                 }",
          "360:             }",
          "",
          "[Added Lines]",
          "328:    if (debug_flag) {",
          "329:     if (!strcmp(arch, \"x86\")) {",
          "330:      print_insn_detail_x86(handle, md, &insn[i]);",
          "331:     }",
          "333:     if (!strcmp(arch, \"arm\")) {",
          "334:      print_insn_detail_arm(handle, &insn[i]);",
          "335:     }",
          "337:     if (!strcmp(arch,\"arm64\")) {",
          "338:      print_insn_detail_arm64(handle,&insn[i]);",
          "339:     }",
          "341:     if (!strcmp(arch, \"mips\")) {",
          "342:      print_insn_detail_mips(handle, &insn[i]);",
          "343:     }",
          "345:     if (!strcmp(arch, \"ppc\")) {",
          "346:      print_insn_detail_ppc(handle, &insn[i]);",
          "347:     }",
          "349:     if (!strcmp(arch, \"sparc\")) {",
          "350:      print_insn_detail_sparc(handle, &insn[i]);",
          "351:     }",
          "353:     if (!strcmp(arch, \"sysz\")) {",
          "354:      print_insn_detail_sysz(handle, &insn[i]);",
          "355:     }",
          "357:     if (!strcmp(arch, \"xcore\")) {",
          "358:      print_insn_detail_xcore(handle, &insn[i]);",
          "359:     }",
          "360:    }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a3a79587eb8611e47fd26a72607ba25d87a5ed8b",
      "candidate_info": {
        "commit_hash": "a3a79587eb8611e47fd26a72607ba25d87a5ed8b",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/a3a79587eb8611e47fd26a72607ba25d87a5ed8b",
        "files": [
          "windowsce/make_windowsce7-armv7.bat",
          "windowsce/make_windowsce8-armv7.bat"
        ],
        "message": "Updated build scripts for Windows CE.",
        "before_after_code_files": [
          "windowsce/make_windowsce7-armv7.bat||windowsce/make_windowsce7-armv7.bat",
          "windowsce/make_windowsce8-armv7.bat||windowsce/make_windowsce8-armv7.bat"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "windowsce/make_windowsce7-armv7.bat||windowsce/make_windowsce7-armv7.bat": [
          "File: windowsce/make_windowsce7-armv7.bat -> windowsce/make_windowsce7-armv7.bat",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: set SHARED=1",
          "18: set DIET_MODE=0",
          "19: set X86_REDUCE=0",
          "20: set X86_ATT_DISABLE=0",
          "22: set DISASM_ARCH_LIST=ARM ARM64 M68K MIPS POWERPC SPARC SYSZ X86 XCORE",
          "27: rem ***************************************************************************",
          "28: rem *                              SANITY CHECKS                              *",
          "",
          "[Removed Lines]",
          "21: set USE_SYS_DYN_MEM=0",
          "23: set DISASM_ARCH_DIRS=ARM AARCH64 M68K MIPS POWERPC SPARC SystemZ X86 XCORE",
          "24: rem set DISASM_ARCH_LIST=ARM",
          "25: rem set DISASM_ARCH_DIRS=ARM",
          "",
          "[Added Lines]",
          "19: set USE_SYS_DYN_MEM=1",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "127: set SOURCES=",
          "128: for %%f in (%SOURCES_ROOT%\\*.c) do set SOURCES=!SOURCES! %%f",
          "131: rem ***************************************************************************",
          "132: rem *                           COMPILATION COMMANDS                          *",
          "",
          "[Removed Lines]",
          "129: for %%a in (%DISASM_ARCH_DIRS%) do for %%f in (%SOURCES_ROOT%\\arch\\%%a\\*.c) do set SOURCES=!SOURCES! %%f",
          "",
          "[Added Lines]",
          "126: for /d %%a in (%SOURCES_ROOT%\\arch\\*) do for %%f in (%%a\\*.c) do set SOURCES=!SOURCES! %%f",
          "",
          "---------------"
        ],
        "windowsce/make_windowsce8-armv7.bat||windowsce/make_windowsce8-armv7.bat": [
          "File: windowsce/make_windowsce8-armv7.bat -> windowsce/make_windowsce8-armv7.bat",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: set SHARED=1",
          "18: set DIET_MODE=0",
          "19: set X86_REDUCE=0",
          "20: set X86_ATT_DISABLE=0",
          "22: set DISASM_ARCH_LIST=ARM ARM64 M68K MIPS POWERPC SPARC SYSZ X86 XCORE",
          "27: rem ***************************************************************************",
          "28: rem *                              SANITY CHECKS                              *",
          "",
          "[Removed Lines]",
          "21: set USE_SYS_DYN_MEM=0",
          "23: set DISASM_ARCH_DIRS=ARM AARCH64 M68K MIPS POWERPC SPARC SystemZ X86 XCORE",
          "24: rem set DISASM_ARCH_LIST=ARM",
          "25: rem set DISASM_ARCH_DIRS=ARM",
          "",
          "[Added Lines]",
          "19: set USE_SYS_DYN_MEM=1",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "127: set SOURCES=",
          "128: for %%f in (%SOURCES_ROOT%\\*.c) do set SOURCES=!SOURCES! %%f",
          "131: rem ***************************************************************************",
          "132: rem *                           COMPILATION COMMANDS                          *",
          "",
          "[Removed Lines]",
          "129: for %%a in (%DISASM_ARCH_DIRS%) do for %%f in (%SOURCES_ROOT%\\arch\\%%a\\*.c) do set SOURCES=!SOURCES! %%f",
          "",
          "[Added Lines]",
          "126: for /d %%a in (%SOURCES_ROOT%\\arch\\*) do for %%f in (%%a\\*.c) do set SOURCES=!SOURCES! %%f",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b5d366784a5bbdf657afef07bb6675d940769b48",
      "candidate_info": {
        "commit_hash": "b5d366784a5bbdf657afef07bb6675d940769b48",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/b5d366784a5bbdf657afef07bb6675d940769b48",
        "files": [
          "bindings/java/capstone/Arm64_const.java",
          "bindings/ocaml/arm64_const.ml",
          "bindings/python/capstone/arm64_const.py"
        ],
        "message": "bindings: update after #1064",
        "before_after_code_files": [
          "bindings/javcapstone/Arm64_const.java||bindings/java/capstone/Arm64_const.java",
          "bindings/ocaml/arm64_const.ml||bindings/ocaml/arm64_const.ml",
          "bindings/python/capstone/arm64_const.py||bindings/python/capstone/arm64_const.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "bindings/javcapstone/Arm64_const.java||bindings/java/capstone/Arm64_const.java": [
          "File: bindings/javcapstone/Arm64_const.java -> bindings/java/capstone/Arm64_const.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "573:  public static final int ARM64_REG_IP0 = ARM64_REG_X16;",
          "574:  public static final int ARM64_REG_IP1 = ARM64_REG_X17;",
          "",
          "---------------"
        ],
        "bindings/ocaml/arm64_const.ml||bindings/ocaml/arm64_const.ml": [
          "File: bindings/ocaml/arm64_const.ml -> bindings/ocaml/arm64_const.ml",
          "--- Hunk 1 ---",
          "[Context before]",
          "567: let _ARM64_REG_ENDING = 260;;",
          "569: (* alias registers *)",
          "572: let _ARM64_REG_FP = _ARM64_REG_X29;;",
          "573: let _ARM64_REG_LR = _ARM64_REG_X30;;",
          "",
          "[Removed Lines]",
          "570: let _ARM64_REG_IP1 = _ARM64_REG_X16;;",
          "571: let _ARM64_REG_IP0 = _ARM64_REG_X17;;",
          "",
          "[Added Lines]",
          "570: let _ARM64_REG_IP0 = _ARM64_REG_X16;;",
          "571: let _ARM64_REG_IP1 = _ARM64_REG_X17;;",
          "",
          "---------------"
        ],
        "bindings/python/capstone/arm64_const.py||bindings/python/capstone/arm64_const.py": [
          "File: bindings/python/capstone/arm64_const.py -> bindings/python/capstone/arm64_const.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "567: ARM64_REG_ENDING = 260",
          "569: # alias registers",
          "572: ARM64_REG_FP = ARM64_REG_X29",
          "573: ARM64_REG_LR = ARM64_REG_X30",
          "",
          "[Removed Lines]",
          "570: ARM64_REG_IP1 = ARM64_REG_X16",
          "571: ARM64_REG_IP0 = ARM64_REG_X17",
          "",
          "[Added Lines]",
          "570: ARM64_REG_IP0 = ARM64_REG_X16",
          "571: ARM64_REG_IP1 = ARM64_REG_X17",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2729f3bb33c27d5fee0dbaa689bc030606c30ccd",
      "candidate_info": {
        "commit_hash": "2729f3bb33c27d5fee0dbaa689bc030606c30ccd",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/2729f3bb33c27d5fee0dbaa689bc030606c30ccd",
        "files": [
          "arch/AArch64/AArch64InstPrinter.c",
          "arch/ARM/ARMInstPrinter.c",
          "cs.c",
          "tests/test_arm.c",
          "tests/test_arm64.c"
        ],
        "message": "fix #681",
        "before_after_code_files": [
          "arch/AArch64/AArch64InstPrinter.c||arch/AArch64/AArch64InstPrinter.c",
          "arch/ARM/ARMInstPrinter.c||arch/ARM/ARMInstPrinter.c",
          "cs.c||cs.c",
          "tests/test_arm.c||tests/test_arm.c",
          "tests/test_arm64.c||tests/test_arm64.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "arch/AArch64/AArch64InstPrinter.c||arch/AArch64/AArch64InstPrinter.c": [
          "File: arch/AArch64/AArch64InstPrinter.c -> arch/AArch64/AArch64InstPrinter.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1037:  double FPImm = MCOperand_isFPImm(MO) ? MCOperand_getFPImm(MO) : AArch64_AM_getFPImmFloat((int)MCOperand_getImm(MO));",
          "1040:  SStream_concat(O, \"#%.8f\", FPImm);",
          "1041:  if (MI->csh->detail) {",
          "1042:   MI->flat_insn->detail->arm64.operands[MI->flat_insn->detail->arm64.op_count].type = ARM64_OP_FP;",
          "1043:   MI->flat_insn->detail->arm64.operands[MI->flat_insn->detail->arm64.op_count].fp = FPImm;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1040: #if defined(_KERNEL_MODE)",
          "1042:  SStream_concat(O, \"#<float_point_unsupported>\");",
          "1043: #else",
          "1045: #endif",
          "",
          "---------------"
        ],
        "arch/ARM/ARMInstPrinter.c||arch/ARM/ARMInstPrinter.c": [
          "File: arch/ARM/ARMInstPrinter.c -> arch/ARM/ARMInstPrinter.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2103: static void printFPImmOperand(MCInst *MI, unsigned OpNum, SStream *O)",
          "2104: {",
          "2105:  MCOperand *MO = MCInst_getOperand(MI, OpNum);",
          "2106:  SStream_concat(O, \"#%e\", getFPImmFloat((unsigned int)MCOperand_getImm(MO)));",
          "2107:  if (MI->csh->detail) {",
          "2108:   MI->flat_insn->detail->arm.operands[MI->flat_insn->detail->arm.op_count].type = ARM_OP_FP;",
          "2109:   MI->flat_insn->detail->arm.operands[MI->flat_insn->detail->arm.op_count].fp = getFPImmFloat((unsigned int)MCOperand_getImm(MO));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2107: #if defined(_KERNEL_MODE)",
          "2109:  SStream_concat(O, \"#<float_point_unsupported>\");",
          "2110: #else",
          "2112: #endif",
          "",
          "---------------"
        ],
        "cs.c||cs.c": [
          "File: cs.c -> cs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: #include \"windows\\winkernel_mm.h\"",
          "22: #endif",
          "24: #if !defined(CAPSTONE_HAS_OSXKERNEL) && !defined(CAPSTONE_DIET) && !defined(_KERNEL_MODE)",
          "25: #define INSN_CACHE_SIZE 32",
          "26: #else",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25: #if defined(_KERNEL_MODE) && !defined(CAPSTONE_DIET)",
          "26: #if defined(CAPSTONE_HAS_ARM) || defined(CAPSTONE_HAS_ARM64)",
          "27: #define CAPSTONE_STR_INTERNAL(x) #x",
          "28: #define CAPSTONE_STR(x) CAPSTONE_STR_INTERNAL(x)",
          "29: #define CAPSTONE_MSVC_WRANING_PREFIX __FILE__ \"(\"CAPSTONE_STR(__LINE__)\") : warning message : \"",
          "31: #pragma message(CAPSTONE_MSVC_WRANING_PREFIX \"Windows driver does not support full features for selected architecture(s). Define CAPSTONE_DIET to compile Capstone with only supported features. See issue #681 for details.\")",
          "33: #undef CAPSTONE_MSVC_WRANING_PREFIX",
          "34: #undef CAPSTONE_STR",
          "35: #undef CAPSTONE_STR_INTERNAL",
          "36: #endif",
          "37: #endif // defined(_KERNEL_MODE) && !defined(CAPSTONE_DIET)",
          "",
          "---------------"
        ],
        "tests/test_arm.c||tests/test_arm.c": [
          "File: tests/test_arm.c -> tests/test_arm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "56:     printf(\"\\t\\toperands[%u].type: IMM = 0x%x\\n\", i, op->imm);",
          "57:     break;",
          "58:    case ARM_OP_FP:",
          "59:     printf(\"\\t\\toperands[%u].type: FP = %f\\n\", i, op->fp);",
          "60:     break;",
          "61:    case ARM_OP_MEM:",
          "62:     printf(\"\\t\\toperands[%u].type: MEM\\n\", i);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "59: #if defined(_KERNEL_MODE)",
          "61:     printf(\"\\t\\toperands[%u].type: FP = <float_point_unsupported>\\n\", i);",
          "62: #else",
          "64: #endif",
          "",
          "---------------"
        ],
        "tests/test_arm64.c||tests/test_arm64.c": [
          "File: tests/test_arm64.c -> tests/test_arm64.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "54:     printf(\"\\t\\toperands[%u].type: IMM = 0x%\" PRIx64 \"\\n\", i, op->imm);",
          "55:     break;",
          "56:    case ARM64_OP_FP:",
          "57:     printf(\"\\t\\toperands[%u].type: FP = %f\\n\", i, op->fp);",
          "58:     break;",
          "59:    case ARM64_OP_MEM:",
          "60:     printf(\"\\t\\toperands[%u].type: MEM\\n\", i);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "57: #if defined(_KERNEL_MODE)",
          "59:     printf(\"\\t\\toperands[%u].type: FP = <float_point_unsupported>\\n\", i);",
          "60: #else",
          "62: #endif",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9f78ef2f7072c316377fa4bd8abf5c569fb3ff01",
      "candidate_info": {
        "commit_hash": "9f78ef2f7072c316377fa4bd8abf5c569fb3ff01",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/9f78ef2f7072c316377fa4bd8abf5c569fb3ff01",
        "files": [
          "bindings/python/prebuilt/.gitkeep",
          "bindings/python/setup.py"
        ],
        "message": "Add ability to copy prebuilt libraries from prebuilt directory during python build",
        "before_after_code_files": [
          "bindings/python/setup.py||bindings/python/setup.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "bindings/python/setup.py||bindings/python/setup.py": [
          "File: bindings/python/setup.py -> bindings/python/setup.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "120:     # copy public headers",
          "121:     shutil.copytree(os.path.join(BUILD_DIR, 'include', 'capstone'), os.path.join(HEADERS_DIR, 'capstone'))",
          "123:     os.chdir(BUILD_DIR)",
          "125:     # platform description refers at https://docs.python.org/2/library/sys.html#sys.platform",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "123:     # if prebuilt libraries are available, use those and cancel build",
          "124:     if os.path.exists(os.path.join(ROOT_DIR, 'prebuilt', LIBRARY_FILE)) and \\",
          "125:             (not STATIC_LIBRARY_FILE or os.path.exists(os.path.join(ROOT_DIR, 'prebuilt', STATIC_LIBRARY_FILE))):",
          "126:         shutil.copy(os.path.join(ROOT_DIR, 'prebuilt', LIBRARY_FILE), LIBS_DIR)",
          "127:         if STATIC_LIBRARY_FILE is not None:",
          "128:             shutil.copy(os.path.join(ROOT_DIR, 'prebuilt', STATIC_LIBRARY_FILE), LIBS_DIR)",
          "129:         return",
          "",
          "---------------"
        ]
      }
    }
  ]
}