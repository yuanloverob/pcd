{
  "cve_id": "CVE-2021-20223",
  "cve_desc": "",
  "repo": "sqlite/sqlite",
  "patch_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
  "patch_info": {
    "commit_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "files": [
      "ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Prevent fts5 tokenizer unicode61 from considering '\\0' to be a token characters, even if other characters of class \"Cc\" are.\n\nFossilOrigin-Name: b7b7bde9b7a03665e3691c6d51118965f216d2dfb1617f138b9f9e60e418ed2f",
    "before_after_code_files": [
      "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
      "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c"
    ],
    "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test": [
      "File: ext/fts5/test/fts5tok1.test -> ext/fts5/test/fts5tok1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:   SELECT * FROM t4;",
      "112: } {1 {SQL logic error}}",
      "115: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114: #-------------------------------------------------------------------------",
      "115: # Embedded 0x00 characters.",
      "116: #",
      "117: reset_db",
      "118: do_execsql_test 3.1.0 {",
      "119:   CREATE VIRTUAL TABLE t1 USING fts5(z);",
      "120:   CREATE VIRTUAL TABLE tt USING fts5vocab(t1, 'instance');",
      "121:   INSERT INTO t1 VALUES('abc' || char(0) || 'def');",
      "122:   SELECT * FROM tt;",
      "123: } { abc 1 z 0 def 1 z 1 }",
      "124: do_execsql_test 3.1.1 {",
      "125:   SELECT hex(z) FROM t1;",
      "126: } {61626300646566}",
      "127: do_execsql_test 3.1.2 {",
      "128:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "129: } {}",
      "131: do_execsql_test 3.2.0 {",
      "132:   CREATE VIRTUAL TABLE t2 USING fts5(z,",
      "133:       tokenize=\"unicode61 categories 'L* N* Co Cc'\"",
      "134:   );",
      "135:   CREATE VIRTUAL TABLE tu USING fts5vocab(t2, 'instance');",
      "137:   INSERT INTO t2 VALUES('abc' || char(0) || 'def');",
      "138:   SELECT * FROM tu;",
      "139: } { abc 1 z 0 def 1 z 1 }",
      "141: do_execsql_test 3.2.1 {",
      "142:   SELECT hex(z) FROM t1;",
      "143: } {61626300646566}",
      "145: do_execsql_test 3.2.2 {",
      "146:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "147: } {}",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 0e7e113d9f2c929c1f8a85e2cfad8e2e60f0e8770212b5e5320fb2a2c42911f8",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b945bcdaf178eabb320aa4609a31ec74233e3115",
      "candidate_info": {
        "commit_hash": "b945bcdaf178eabb320aa4609a31ec74233e3115",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/b945bcdaf178eabb320aa4609a31ec74233e3115",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/main.c",
          "src/resolve.c",
          "src/shell.c.in",
          "src/sqlite.h.in",
          "src/sqliteInt.h"
        ],
        "message": "Experimental branch with new sqlite3_db_config() options that could possible enhance security for applications reading potentially compromised database files.\n\nFossilOrigin-Name: 96a2db2612f2e47bbec0e374a242820c88f03c42ccbf8467abccaef41469bae2",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/main.c||src/main.c",
          "src/resolve.c||src/resolve.c",
          "src/shell.c.in||src/shell.c.in",
          "src/sqlite.h.in||src/sqlite.h.in",
          "src/sqliteInt.h||src/sqliteInt.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 3bd095a53119c368fe30e539983588b27957203344cf427405b9a64784b8eba7",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/main.c||src/main.c": [
          "File: src/main.c -> src/main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "852:         { SQLITE_DBCONFIG_DQS_DDL,               SQLITE_DqsDDL         },",
          "853:         { SQLITE_DBCONFIG_DQS_DML,               SQLITE_DqsDML         },",
          "854:         { SQLITE_DBCONFIG_LEGACY_FILE_FORMAT,    SQLITE_LegacyFileFmt  },",
          "855:       };",
          "856:       unsigned int i;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "855:         { SQLITE_DBCONFIG_UNSAFE_FUNC_IN_VIEW,   SQLITE_UnsafeInView   },",
          "856:         { SQLITE_DBCONFIG_VTAB_IN_VIEW,          SQLITE_VtabInView     },",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3082:                  | SQLITE_EnableTrigger",
          "3083:                  | SQLITE_EnableView",
          "3084:                  | SQLITE_CacheSpill",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3087:                  | SQLITE_UnsafeInView",
          "3088:                  | SQLITE_VtabInView",
          "",
          "---------------"
        ],
        "src/resolve.c||src/resolve.c": [
          "File: src/resolve.c -> src/resolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "863:           ExprSetProperty(pExpr,EP_ConstFunc);",
          "864:         }",
          "865:         if( (pDef->funcFlags & SQLITE_FUNC_CONSTANT)==0 ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "864:         }else{",
          "865:           if( ExprHasProperty(pExpr, EP_Indirect)",
          "866:            && !IN_RENAME_OBJECT",
          "867:            && (pParse->db->flags & SQLITE_UnsafeInView)==0",
          "868:           ){",
          "871:             sqlite3ErrorMsg(pParse, \"%s() prohibited in triggers and views\",",
          "872:                             pDef->zName);",
          "873:           }",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "7159:       const char *zName;",
          "7160:       int op;",
          "7161:     } aDbConfig[] = {",
          "7162:         { \"enable_fkey\",        SQLITE_DBCONFIG_ENABLE_FKEY           },",
          "7163:         { \"enable_trigger\",     SQLITE_DBCONFIG_ENABLE_TRIGGER        },",
          "7164:         { \"enable_view\",        SQLITE_DBCONFIG_ENABLE_VIEW           },",
          "7165:         { \"fts3_tokenizer\",     SQLITE_DBCONFIG_ENABLE_FTS3_TOKENIZER },",
          "7166:         { \"load_extension\",     SQLITE_DBCONFIG_ENABLE_LOAD_EXTENSION },",
          "7167:         { \"no_ckpt_on_close\",   SQLITE_DBCONFIG_NO_CKPT_ON_CLOSE      },",
          "7170:         { \"reset_database\",     SQLITE_DBCONFIG_RESET_DATABASE        },",
          "7172:         { \"writable_schema\",    SQLITE_DBCONFIG_WRITABLE_SCHEMA       },",
          "7177:     };",
          "7178:     int ii, v;",
          "7179:     open_db(p, 0);",
          "",
          "[Removed Lines]",
          "7168:         { \"enable_qpsg\",        SQLITE_DBCONFIG_ENABLE_QPSG           },",
          "7169:         { \"trigger_eqp\",        SQLITE_DBCONFIG_TRIGGER_EQP           },",
          "7171:         { \"defensive\",          SQLITE_DBCONFIG_DEFENSIVE             },",
          "7173:         { \"legacy_alter_table\", SQLITE_DBCONFIG_LEGACY_ALTER_TABLE    },",
          "7174:         { \"dqs_dml\",            SQLITE_DBCONFIG_DQS_DML               },",
          "7175:         { \"dqs_ddl\",            SQLITE_DBCONFIG_DQS_DDL               },",
          "7176:         { \"legacy_file_format\", SQLITE_DBCONFIG_LEGACY_FILE_FORMAT    },",
          "",
          "[Added Lines]",
          "7162:         { \"defensive\",          SQLITE_DBCONFIG_DEFENSIVE             },",
          "7163:         { \"dqs_ddl\",            SQLITE_DBCONFIG_DQS_DDL               },",
          "7164:         { \"dqs_dml\",            SQLITE_DBCONFIG_DQS_DML               },",
          "7166:         { \"enable_qpsg\",        SQLITE_DBCONFIG_ENABLE_QPSG           },",
          "7170:         { \"legacy_alter_table\", SQLITE_DBCONFIG_LEGACY_ALTER_TABLE    },",
          "7171:         { \"legacy_file_format\", SQLITE_DBCONFIG_LEGACY_FILE_FORMAT    },",
          "7175:         { \"trigger_eqp\",        SQLITE_DBCONFIG_TRIGGER_EQP           },",
          "7176:         { \"unsafe_func_in_view\",SQLITE_DBCONFIG_UNSAFE_FUNC_IN_VIEW   },",
          "7177:         { \"vtab_in_view\",       SQLITE_DBCONFIG_VTAB_IN_VIEW          },",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "7183:         sqlite3_db_config(p->db, aDbConfig[ii].op, booleanValue(azArg[2]), 0);",
          "7184:       }",
          "7185:       sqlite3_db_config(p->db, aDbConfig[ii].op, -1, &v);",
          "7187:       if( nArg>1 ) break;",
          "7188:     }",
          "7189:     if( nArg>1 && ii==ArraySize(aDbConfig) ){",
          "",
          "[Removed Lines]",
          "7186:       utf8_printf(p->out, \"%18s %s\\n\", aDbConfig[ii].zName, v ? \"on\" : \"off\");",
          "",
          "[Added Lines]",
          "7188:       utf8_printf(p->out, \"%19s %s\\n\", aDbConfig[ii].zName, v ? \"on\" : \"off\");",
          "",
          "---------------"
        ],
        "src/sqlite.h.in||src/sqlite.h.in": [
          "File: src/sqlite.h.in -> src/sqlite.h.in"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1144: #define MASKBIT(n)   (((Bitmask)1)<<(n))",
          "1145: #define MASKBIT32(n) (((unsigned int)1)<<(n))",
          "1146: #define ALLBITS      ((Bitmask)-1)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1145: #define MASKBIT64(n) (((u64)1)<<(n))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1526: #define SCHEMA_ENC(db) ((db)->aDb[0].pSchema->enc)",
          "1527: #define ENC(db)        ((db)->enc)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1535: #define HI(X)  ((u64)(X)<<32)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1552: #define SQLITE_UnsafeInView   0x00000080  /* Allow functions with side-effect",
          "1554: #define SQLITE_VtabInView     0x00000100  /* Allow views and triggers to access",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1575: #ifdef SQLITE_DEBUG",
          "",
          "[Removed Lines]",
          "1574: #define HI(X)  ((u64)(X)<<32)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4ec4dd701ffa459a68c0382e102df86160c10039",
      "candidate_info": {
        "commit_hash": "4ec4dd701ffa459a68c0382e102df86160c10039",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/4ec4dd701ffa459a68c0382e102df86160c10039",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/sqliteInt.h"
        ],
        "message": "Remove unused macros formerly used to define built-in aggregate functions.\n\nFossilOrigin-Name: 3ef0d44edd0354cda9b6237f992cb67a2170ee8f1f464b1f38ac36e3a133bc71",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/sqliteInt.h||src/sqliteInt.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: c6af9f655b73200ecc0c4189698e421af6ca584babdc76e73a36d468b2eea1f9",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h"
        ]
      }
    },
    {
      "candidate_hash": "aaa5ba0609cfcf1b78c5806497b5620b76b8730d",
      "candidate_info": {
        "commit_hash": "aaa5ba0609cfcf1b78c5806497b5620b76b8730d",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/aaa5ba0609cfcf1b78c5806497b5620b76b8730d",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/select.c"
        ],
        "message": "Fix an incorrect assert() added by check-in [fa58aad48a788802]. Problem found by dbsqlfuzz.\n\nFossilOrigin-Name: a17b29f08c888301911c35096899f10d24192c8ecec467cddde5401b6bd1903f",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/select.c||src/select.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: e5fd8b50500f9225e435ef5afee98e3c2cccd22785f99c718d7e6c9b5b653c56",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5757: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "5758:   rc = sqlite3WindowRewrite(pParse, p);",
          "5759:   if( rc ){",
          "5761:     goto select_end;",
          "5762:   }",
          "5763: #if SELECTTRACE_ENABLED",
          "",
          "[Removed Lines]",
          "5760:     assert( pParse->nErr>0 );",
          "",
          "[Added Lines]",
          "5760:     assert( db->mallocFailed || pParse->nErr>0 );",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "86f477edaa17767b39c7bae5b67cac8580f7a8c1",
      "candidate_info": {
        "commit_hash": "86f477edaa17767b39c7bae5b67cac8580f7a8c1",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/86f477edaa17767b39c7bae5b67cac8580f7a8c1",
        "files": [
          "ext/fts5/fts5_expr.c",
          "ext/fts5/fts5_storage.c",
          "ext/fts5/test/fts5corrupt3.test",
          "ext/fts5/test/fts5delete.test",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Catch fts5 index corruption caused by issuing 'delete' commands with incorrect data earlier in some cases. Also fix a couple of test script problems.\n\nFossilOrigin-Name: b79f19edfd33c2a75f936c352668e14e81f35acf4f07edc27a21f941a7304b38",
        "before_after_code_files": [
          "ext/fts5/fts5_expr.c||ext/fts5/fts5_expr.c",
          "ext/fts5/fts5_storage.c||ext/fts5/fts5_storage.c",
          "ext/fts5/test/fts5corrupt3.test||ext/fts5/test/fts5corrupt3.test",
          "ext/fts5/test/fts5delete.test||ext/fts5/test/fts5delete.test",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts5/fts5_expr.c||ext/fts5/fts5_expr.c": [
          "File: ext/fts5/fts5_expr.c -> ext/fts5/fts5_expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2409:             pConfig->azCol[pColset->aiCol[ii]], ii==pColset->nCol-1 ? \"\" : \" \"",
          "2410:         );",
          "2411:       }",
          "2413:       if( zRet==0 ) return 0;",
          "2414:     }",
          "",
          "[Removed Lines]",
          "2412:       zRet = fts5PrintfAppend(zRet, \"%s : \", pColset->nCol>1 ? \"}\" : \"\");",
          "",
          "[Added Lines]",
          "2412:       if( zRet ){",
          "2413:         zRet = fts5PrintfAppend(zRet, \"%s : \", pColset->nCol>1 ? \"}\" : \"\");",
          "2414:       }",
          "",
          "---------------"
        ],
        "ext/fts5/fts5_storage.c||ext/fts5/fts5_storage.c": [
          "File: ext/fts5/fts5_storage.c -> ext/fts5/fts5_storage.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "429:           zText, nText, (void*)&ctx, fts5StorageInsertCallback",
          "430:       );",
          "431:       p->aTotalSize[iCol-1] -= (i64)ctx.szCol;",
          "432:     }",
          "433:   }",
          "436:   rc2 = sqlite3_reset(pSeek);",
          "437:   if( rc==SQLITE_OK ) rc = rc2;",
          "",
          "[Removed Lines]",
          "434:   p->nTotalRow--;",
          "",
          "[Added Lines]",
          "432:       if( p->aTotalSize[iCol-1]<0 ){",
          "433:         rc = FTS5_CORRUPT;",
          "434:       }",
          "437:   if( rc==SQLITE_OK && p->nTotalRow<1 ){",
          "438:     rc = FTS5_CORRUPT;",
          "439:   }else{",
          "440:     p->nTotalRow--;",
          "441:   }",
          "",
          "---------------"
        ],
        "ext/fts5/test/fts5corrupt3.test||ext/fts5/test/fts5corrupt3.test": [
          "File: ext/fts5/test/fts5corrupt3.test -> ext/fts5/test/fts5corrupt3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "9692: do_catchsql_test 65.1 {",
          "9693:   SELECT ( MATCH (t1,591)) FROM t1 WHERE t1 MATCH 'e*e\u0178'",
          "9696: #-------------------------------------------------------------------------",
          "9697: #",
          "",
          "[Removed Lines]",
          "9694: } {1 {database disk image is malformed}}",
          "",
          "[Added Lines]",
          "9694: } {1 {malformed database schema (t2) - invalid rootpage}}",
          "",
          "---------------"
        ],
        "ext/fts5/test/fts5delete.test||ext/fts5/test/fts5delete.test": [
          "File: ext/fts5/test/fts5delete.test -> ext/fts5/test/fts5delete.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "50:   }",
          "51: } {}",
          "53: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "53: #-------------------------------------------------------------------------",
          "54: reset_db",
          "55: do_execsql_test 2.0 {",
          "56:   CREATE TABLE test (",
          "57:       id INTEGER PRIMARY KEY,",
          "58:       name TEXT,",
          "59:       value TEXT",
          "60:   );",
          "61:   CREATE VIRTUAL TABLE test_idx USING fts5(",
          "62:       name, content=test, content_rowid=id",
          "63:   );",
          "64: }",
          "66: do_catchsql_test 2.1 {",
          "67:   INSERT INTO test_idx (test_idx, rowid, name) VALUES('delete', 1, 'quick');",
          "68: } {1 {database disk image is malformed}}",
          "70: do_catchsql_test 2.2 {",
          "71:   INSERT INTO test_idx(rowid, name) VALUES(123, 'one one one');",
          "72:   INSERT INTO test_idx (test_idx, rowid, name) VALUES('delete', 123, 'one');",
          "73:   INSERT INTO test_idx (test_idx, rowid, name) VALUES('delete', 123, 'one');",
          "74: } {1 {database disk image is malformed}}",
          "76: do_execsql_test 2.3 {",
          "77:   DROP TABLE test_idx;",
          "78:   CREATE VIRTUAL TABLE test_idx USING fts5(",
          "79:       name, content=test, content_rowid=id",
          "80:   );",
          "82:   INSERT INTO test_idx(rowid, name) VALUES(123, 'one one one');",
          "83:   INSERT INTO test_idx(rowid, name) VALUES(124, 'two two two');",
          "84:   INSERT INTO test_idx(rowid, name) VALUES(125, 'two two two');",
          "85:   INSERT INTO test_idx (test_idx, rowid, name) VALUES('delete', 123, 'one');",
          "86:   INSERT INTO test_idx (test_idx, rowid, name) VALUES('delete', 123, 'one');",
          "87:   INSERT INTO test_idx (test_idx, rowid, name) VALUES('delete', 123, 'one');",
          "88: }",
          "90: do_catchsql_test 2.4 {",
          "91:   SELECT rowid FROM test_idx WHERE test_idx MATCH 'two' ORDER BY rank;",
          "92: } {1 {database disk image is malformed}}",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 6d1ab0403c2855b595f5d294305f41f56a7a93503f2a58d1b1d12431d480704e",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d49c0c83efc44876de33a05e5cfe522c47dda954",
      "candidate_info": {
        "commit_hash": "d49c0c83efc44876de33a05e5cfe522c47dda954",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/d49c0c83efc44876de33a05e5cfe522c47dda954",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/os_unix.c"
        ],
        "message": "Improve performance of wal-mode locking on unix in cases where there are hundreds of connections to a single database within the same process.\n\nFossilOrigin-Name: a1c19eea8f141b89a0921da0724096feb21a772ef6654f164e2c36ebf9f7871e",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/os_unix.c||src/os_unix.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: fc0856dccfab273d50457052fa3c6da768d0eb2504ad04d9540da4e3222fc829",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/os_unix.c||src/os_unix.c": [
          "File: src/os_unix.c -> src/os_unix.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4795:   return rc;",
          "4796: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4806: #ifdef SQLITE_DEBUG",
          "4807: static int assertLockingArrayOk(unixShmNode *pShmNode){",
          "4808:   unixShm *pX;",
          "4809:   int aLock[SQLITE_SHM_NLOCK];",
          "4810:   assert( sqlite3_mutex_held(pShmNode->pShmMutex) );",
          "4812:   memset(aLock, 0, sizeof(aLock));",
          "4813:   for(pX=pShmNode->pFirst; pX; pX=pX->pNext){",
          "4814:     int i;",
          "4815:     for(i=0; i<SQLITE_SHM_NLOCK; i++){",
          "4816:       if( pX->exclMask & (1<<i) ){",
          "4817:         assert( aLock[i]==0 );",
          "4818:         aLock[i] = -1;",
          "4819:       }else if( pX->sharedMask & (1<<i) ){",
          "4820:         assert( aLock[i]>=0 );",
          "4821:         aLock[i]++;",
          "4822:       }",
          "4823:     }",
          "4824:   }",
          "4826:   assert( 0==memcmp(pShmNode->aLock, aLock, sizeof(aLock)) );",
          "4827:   return (memcmp(pShmNode->aLock, aLock, sizeof(aLock))==0);",
          "4828: }",
          "4829: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4811: ){",
          "4819:   assert( pShmNode==pDbFd->pInode->pShmNode );",
          "4820:   assert( pShmNode->pInode==pDbFd->pInode );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4850:   int *aLock = pShmNode->aLock;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4853:   mask = (1<<(ofst+n)) - (1<<ofst);",
          "4854:   assert( n>1 || mask==(1<<ofst) );",
          "4855:   sqlite3_mutex_enter(pShmNode->pShmMutex);",
          "4856:   if( flags & SQLITE_SHM_UNLOCK ){",
          "4878:   }else if( flags & SQLITE_SHM_SHARED ){",
          "4887:         rc = SQLITE_BUSY;",
          "4896:         rc = unixShmSystemLock(pDbFd, F_RDLCK, ofst+UNIX_SHM_BASE, n);",
          "4899:       }",
          "4905:     }",
          "4906:   }else{",
          "4912:         rc = SQLITE_BUSY;",
          "4913:         break;",
          "4914:       }",
          "4915:     }",
          "4920:     if( rc==SQLITE_OK ){",
          "4921:       rc = unixShmSystemLock(pDbFd, F_WRLCK, ofst+UNIX_SHM_BASE, n);",
          "4922:       if( rc==SQLITE_OK ){",
          "4923:         assert( (p->sharedMask & mask)==0 );",
          "4924:         p->exclMask |= mask;",
          "4925:       }",
          "4926:     }",
          "4927:   }",
          "4928:   sqlite3_mutex_leave(pShmNode->pShmMutex);",
          "4929:   OSTRACE((\"SHM-LOCK shmid-%d, pid-%d got %03x,%03x\\n\",",
          "4930:            p->id, osGetpid(0), p->sharedMask, p->exclMask));",
          "",
          "[Removed Lines]",
          "4860:     for(pX=pShmNode->pFirst; pX; pX=pX->pNext){",
          "4861:       if( pX==p ) continue;",
          "4862:       assert( (pX->exclMask & (p->exclMask|p->sharedMask))==0 );",
          "4863:       allMask |= pX->sharedMask;",
          "4864:     }",
          "4867:     if( (mask & allMask)==0 ){",
          "4868:       rc = unixShmSystemLock(pDbFd, F_UNLCK, ofst+UNIX_SHM_BASE, n);",
          "4869:     }else{",
          "4870:       rc = SQLITE_OK;",
          "4871:     }",
          "4874:     if( rc==SQLITE_OK ){",
          "4875:       p->exclMask &= ~mask;",
          "4876:       p->sharedMask &= ~mask;",
          "4877:     }",
          "4885:     for(pX=pShmNode->pFirst; pX; pX=pX->pNext){",
          "4886:       if( (pX->exclMask & mask)!=0 ){",
          "4888:         break;",
          "4889:       }",
          "4890:       allShared |= pX->sharedMask;",
          "4891:     }",
          "4894:     if( rc==SQLITE_OK ){",
          "4895:       if( (allShared & mask)==0 ){",
          "4897:       }else{",
          "4898:         rc = SQLITE_OK;",
          "4900:     }",
          "4903:     if( rc==SQLITE_OK ){",
          "4904:       p->sharedMask |= mask;",
          "4910:     for(pX=pShmNode->pFirst; pX; pX=pX->pNext){",
          "4911:       if( (pX->exclMask & mask)!=0 || (pX->sharedMask & mask)!=0 ){",
          "",
          "[Added Lines]",
          "4889:   assert( assertLockingArrayOk(pShmNode) );",
          "4891:     if( (p->exclMask|p->sharedMask) & mask ){",
          "4892:       int ii;",
          "4893:       int bUnlock = 1;",
          "4895:       for(ii=ofst; ii<ofst+n; ii++){",
          "4896:         if( aLock[ii]>((p->sharedMask & (1<<ii)) ? 1 : 0) ){",
          "4897:           bUnlock = 0;",
          "4898:         }",
          "4899:       }",
          "4901:       if( bUnlock ){",
          "4902:         rc = unixShmSystemLock(pDbFd, F_UNLCK, ofst+UNIX_SHM_BASE, n);",
          "4903:         if( rc==SQLITE_OK ){",
          "4904:           memset(&aLock[ofst], 0, sizeof(int)*n);",
          "4905:         }",
          "4906:       }else if( p->sharedMask & (1<<ofst) ){",
          "4907:         assert( n==1 && aLock[ofst]>1 );",
          "4908:         aLock[ofst]--;",
          "4909:       }",
          "4912:       if( rc==SQLITE_OK ){",
          "4913:         p->exclMask &= ~mask;",
          "4914:         p->sharedMask &= ~mask;",
          "4915:       }",
          "4916:     }",
          "4918:     assert( n==1 );",
          "4919:     assert( (p->exclMask & (1<<ofst))==0 );",
          "4920:     if( (p->sharedMask & mask)==0 ){",
          "4921:       if( aLock[ofst]<0 ){",
          "4923:       }else if( aLock[ofst]==0 ){",
          "4928:       if( rc==SQLITE_OK ){",
          "4929:         p->sharedMask |= mask;",
          "4930:         aLock[ofst]++;",
          "4931:       }",
          "4936:     int ii;",
          "4937:     for(ii=ofst; ii<ofst+n; ii++){",
          "4938:       assert( (p->sharedMask & mask)==0 );",
          "4939:       if( (p->exclMask & (1<<ii))==0 && aLock[ii] ){",
          "4952:         for(ii=ofst; ii<ofst+n; ii++){",
          "4953:           aLock[ii] = -1;",
          "4954:         }",
          "4958:   assert( assertLockingArrayOk(pShmNode) );",
          "",
          "---------------"
        ]
      }
    }
  ]
}