{
  "cve_id": "CVE-2013-0850",
  "cve_desc": "The decode_slice_header function in libavcodec/h264.c in FFmpeg before 1.1 allows remote attackers to have an unspecified impact via crafted H.264 data, which triggers an out-of-bounds array access.",
  "repo": "FFmpeg/FFmpeg",
  "patch_hash": "d6c184880ee2e09fd68c0ae217173832cee5afc1",
  "patch_info": {
    "commit_hash": "d6c184880ee2e09fd68c0ae217173832cee5afc1",
    "repo": "FFmpeg/FFmpeg",
    "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/d6c184880ee2e09fd68c0ae217173832cee5afc1",
    "files": [
      "libavcodec/h264.c"
    ],
    "message": "h264: correct ref count check and limit, fix out of array accesses.\n\nFound-by: Mateusz \"j00ru\" Jurczyk and Gynvael Coldwind\nSigned-off-by: Michael Niedermayer <michaelni@gmx.at>",
    "before_after_code_files": [
      "libavcodec/h264.c||libavcodec/h264.c"
    ]
  },
  "patch_diff": {
    "libavcodec/h264.c||libavcodec/h264.c": [
      "File: libavcodec/h264.c -> libavcodec/h264.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2935:                 h->ref_count[1] = get_ue_golomb(&s->gb) + 1;",
      "2936:             else",
      "2939:         }",
      "2941:         if (h->ref_count[0]-1 > max[0] || h->ref_count[1]-1 > max[1]){",
      "",
      "[Removed Lines]",
      "2938:                 max[1] = 31;",
      "",
      "[Added Lines]",
      "2938:                 h->ref_count[1] = 1;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "c82d6e05da0898c45ae915fb808e175f6a4ec7e5",
      "candidate_info": {
        "commit_hash": "c82d6e05da0898c45ae915fb808e175f6a4ec7e5",
        "repo": "FFmpeg/FFmpeg",
        "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/c82d6e05da0898c45ae915fb808e175f6a4ec7e5",
        "files": [
          "libavcodec/h264.c"
        ],
        "message": "h264: correct ref count check and limit, fix out of array accesses.\n\nFound-by: Mateusz \"j00ru\" Jurczyk and Gynvael Coldwind\nSigned-off-by: Michael Niedermayer <michaelni@gmx.at>\n(cherry picked from commit d6c184880ee2e09fd68c0ae217173832cee5afc1)",
        "before_after_code_files": [
          "libavcodec/h264.c||libavcodec/h264.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "libavcodec/h264.c||libavcodec/h264.c"
          ],
          "candidate": [
            "libavcodec/h264.c||libavcodec/h264.c"
          ]
        }
      },
      "candidate_diff": {
        "libavcodec/h264.c||libavcodec/h264.c": [
          "File: libavcodec/h264.c -> libavcodec/h264.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2922:                 h->ref_count[1] = get_ue_golomb(&s->gb) + 1;",
          "2923:             else",
          "2926:         }",
          "2928:         if (h->ref_count[0]-1 > max[0] || h->ref_count[1]-1 > max[1]){",
          "",
          "[Removed Lines]",
          "2925:                 max[1] = 31;",
          "",
          "[Added Lines]",
          "2925:                 h->ref_count[1] = 1;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8d9fd58113fa2953269252575bf5f1edce41e550",
      "candidate_info": {
        "commit_hash": "8d9fd58113fa2953269252575bf5f1edce41e550",
        "repo": "FFmpeg/FFmpeg",
        "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/8d9fd58113fa2953269252575bf5f1edce41e550",
        "files": [
          "libavcodec/h264.c"
        ],
        "message": "h264: Fix maximum reference count check for non-b frames\n\nBelow fixes the maximum reference count check for second reference list in\nnon-B frames.  There is nothing to prohibit full (field sized) reference\nlist in this case as far as I can tell, and this fixes several syntax-test\nfiles here (this is a regression caused when this check was made more\nstringent by\nhttp://git.videolan.org/?p=ffmpeg.git;a=commit;h=dc9ce40069bde3d28f8d0b3e5bd733ae255fecb5)\n\nProbably a silly corner case seldom seen irl, but thought I'd pass along\nin case there was interest in correcting the check.\n\n---------------\n\nh264: Fix maximum reference count check for non-b frames; full range is\ntechnically ok\n\nSigned-off-by: Michael Niedermayer <michaelni@gmx.at>",
        "before_after_code_files": [
          "libavcodec/h264.c||libavcodec/h264.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libavcodec/h264.c||libavcodec/h264.c"
          ],
          "candidate": [
            "libavcodec/h264.c||libavcodec/h264.c"
          ]
        }
      },
      "candidate_diff": {
        "libavcodec/h264.c||libavcodec/h264.c": [
          "File: libavcodec/h264.c -> libavcodec/h264.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3383:     h->ref_count[1] = h->pps.ref_count[1];",
          "3385:     if (h->slice_type_nos != AV_PICTURE_TYPE_I) {",
          "3388:         if (h->slice_type_nos == AV_PICTURE_TYPE_B)",
          "3389:             h->direct_spatial_mv_pred = get_bits1(&s->gb);",
          "",
          "[Removed Lines]",
          "3386:         unsigned max = s->picture_structure == PICT_FRAME ? 15 : 31;",
          "",
          "[Added Lines]",
          "3386:         unsigned max[2];",
          "3387:         max[0] = max[1] = s->picture_structure == PICT_FRAME ? 15 : 31;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3393:             h->ref_count[0] = get_ue_golomb(&s->gb) + 1;",
          "3394:             if (h->slice_type_nos == AV_PICTURE_TYPE_B)",
          "3395:                 h->ref_count[1] = get_ue_golomb(&s->gb) + 1;",
          "3396:         }",
          "3400:             h->ref_count[0] = h->ref_count[1] = 1;",
          "3401:             return AVERROR_INVALIDDATA;",
          "3402:         }",
          "",
          "[Removed Lines]",
          "3398:         if (h->ref_count[0]-1 > max || h->ref_count[1]-1 > max){",
          "3399:             av_log(h->s.avctx, AV_LOG_ERROR, \"reference overflow\\n\");",
          "",
          "[Added Lines]",
          "3397:             else",
          "3399:                 max[1] = 31;",
          "3402:         if (h->ref_count[0]-1 > max[0] || h->ref_count[1]-1 > max[1]){",
          "3403:             av_log(h->s.avctx, AV_LOG_ERROR, \"reference overflow %u > %u or %u > %u\\n\", h->ref_count[0]-1, max[0], h->ref_count[1]-1, max[1]);",
          "",
          "---------------"
        ]
      }
    }
  ]
}