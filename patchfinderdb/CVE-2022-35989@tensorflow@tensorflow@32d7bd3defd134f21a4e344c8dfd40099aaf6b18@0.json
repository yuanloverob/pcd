{
  "cve_id": "CVE-2022-35989",
  "cve_desc": "TensorFlow is an open source platform for machine learning. When `MaxPool` receives a window size input array `ksize` with dimensions greater than its input tensor `input`, the GPU kernel gives a `CHECK` fail that can be used to trigger a denial of service attack. We have patched the issue in GitHub commit 32d7bd3defd134f21a4e344c8dfd40099aaf6b18. The fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range. There are no known workarounds for this issue.",
  "repo": "tensorflow/tensorflow",
  "patch_hash": "32d7bd3defd134f21a4e344c8dfd40099aaf6b18",
  "patch_info": {
    "commit_hash": "32d7bd3defd134f21a4e344c8dfd40099aaf6b18",
    "repo": "tensorflow/tensorflow",
    "commit_url": "https://github.com/tensorflow/tensorflow/commit/32d7bd3defd134f21a4e344c8dfd40099aaf6b18",
    "files": [
      "tensorflow/core/kernels/maxpooling_op.cc",
      "tensorflow/python/kernel_tests/nn_ops/pooling_ops_test.py"
    ],
    "message": "Fix MaxPool crash on GPU for invalid filter size.\n\nIf the filter size exceeds the input size by one for `VALID` padding,\nreturn an empty tensor. This is consistent with XLA.\n\nPiperOrigin-RevId: 462684864",
    "before_after_code_files": [
      "tensorflow/core/kernels/maxpooling_op.cc||tensorflow/core/kernels/maxpooling_op.cc",
      "tensorflow/python/kernel_tests/nn_ops/pooling_ops_test.py||tensorflow/python/kernel_tests/nn_ops/pooling_ops_test.py"
    ]
  },
  "patch_diff": {
    "tensorflow/core/kernels/maxpooling_op.cc||tensorflow/core/kernels/maxpooling_op.cc": [
      "File: tensorflow/core/kernels/maxpooling_op.cc -> tensorflow/core/kernels/maxpooling_op.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "1268:         ShapeFromFormat(data_format_, params.tensor_in_batch, params.out_height,",
      "1269:                         params.out_width, params.depth);",
      "1272:     constexpr bool is_int8x4 = std::is_same<T, qint8>::value;",
      "1273:     OP_REQUIRES(context, (is_int8x4 == (data_format_ == FORMAT_NCHW_VECT_C)),",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1272:     if (out_shape.num_elements() == 0) {",
      "1273:       Tensor* output = nullptr;",
      "1274:       OP_REQUIRES_OK(context, context->allocate_output(0, out_shape, &output));",
      "1275:       return;",
      "1276:     }",
      "",
      "---------------"
    ],
    "tensorflow/python/kernel_tests/nn_ops/pooling_ops_test.py||tensorflow/python/kernel_tests/nn_ops/pooling_ops_test.py": [
      "File: tensorflow/python/kernel_tests/nn_ops/pooling_ops_test.py -> tensorflow/python/kernel_tests/nn_ops/pooling_ops_test.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "772:         expected=[],",
      "775:   # Tests for DepthwiseMaxPooling on CPU only.",
      "776:   @parameterized.parameters(",
      "777:       GetTestConfigsDicts(",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "775:   @parameterized.parameters(",
      "776:       GetTestConfigsDicts(nn_ops.max_pool, gen_nn_ops.max_pool_v2))",
      "777:   @test_util.run_deprecated_v1",
      "778:   def testMaxPoolInvalidFilterSize(self, **kwargs):",
      "779:     with self.cached_session(use_gpu=test.is_gpu_available()):",
      "780:       t = constant_op.constant(1.0, shape=[1, 1, 1, 1])",
      "781:       with self.assertRaisesRegex(",
      "782:           (errors_impl.InvalidArgumentError, ValueError),",
      "783:           \"Negative dimension size\"):",
      "784:         t = self.evaluate(",
      "785:             nn_ops.max_pool(t, ksize=[1, 1, 2, 1], strides=1, padding=\"VALID\"))",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "bc967a05b534c498789ec7810cfd3e72973d0650",
      "candidate_info": {
        "commit_hash": "bc967a05b534c498789ec7810cfd3e72973d0650",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/bc967a05b534c498789ec7810cfd3e72973d0650",
        "files": [
          "tensorflow/core/kernels/maxpooling_op.cc",
          "tensorflow/python/kernel_tests/pooling_ops_test.py"
        ],
        "message": "Fix MaxPool crash on GPU for invalid filter size.\n\nIf the filter size exceeds the input size by one for `VALID` padding,\nreturn an empty tensor. This is consistent with XLA.\n\nPiperOrigin-RevId: 462684864",
        "before_after_code_files": [
          "tensorflow/core/kernels/maxpooling_op.cc||tensorflow/core/kernels/maxpooling_op.cc",
          "tensorflow/python/kernel_tests/pooling_ops_test.py||tensorflow/python/kernel_tests/pooling_ops_test.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/maxpooling_op.cc||tensorflow/core/kernels/maxpooling_op.cc"
          ],
          "candidate": [
            "tensorflow/core/kernels/maxpooling_op.cc||tensorflow/core/kernels/maxpooling_op.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/maxpooling_op.cc||tensorflow/core/kernels/maxpooling_op.cc": [
          "File: tensorflow/core/kernels/maxpooling_op.cc -> tensorflow/core/kernels/maxpooling_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "1268:         ShapeFromFormat(data_format_, params.tensor_in_batch, params.out_height,",
          "1269:                         params.out_width, params.depth);",
          "1272:     constexpr bool is_int8x4 = std::is_same<T, qint8>::value;",
          "1273:     OP_REQUIRES(context, (is_int8x4 == (data_format_ == FORMAT_NCHW_VECT_C)),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1272:     if (out_shape.num_elements() == 0) {",
          "1273:       Tensor* output = nullptr;",
          "1274:       OP_REQUIRES_OK(context, context->allocate_output(0, out_shape, &output));",
          "1275:       return;",
          "1276:     }",
          "",
          "---------------"
        ],
        "tensorflow/python/kernel_tests/pooling_ops_test.py||tensorflow/python/kernel_tests/pooling_ops_test.py": [
          "File: tensorflow/python/kernel_tests/pooling_ops_test.py -> tensorflow/python/kernel_tests/pooling_ops_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "775:         expected=[],",
          "778:   # Tests for DepthwiseMaxPooling on CPU only.",
          "779:   @parameterized.parameters(",
          "780:       GetTestConfigsDicts(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "778:   @parameterized.parameters(",
          "779:       GetTestConfigsDicts(nn_ops.max_pool, gen_nn_ops.max_pool_v2))",
          "780:   @test_util.run_deprecated_v1",
          "781:   def testMaxPoolInvalidFilterSize(self, **kwargs):",
          "782:     with self.cached_session(use_gpu=test.is_gpu_available()):",
          "783:       t = constant_op.constant(1.0, shape=[1, 1, 1, 1])",
          "784:       with self.assertRaisesRegex(",
          "785:           (errors_impl.InvalidArgumentError, ValueError),",
          "786:           \"Negative dimension size\"):",
          "787:         t = self.evaluate(",
          "788:             nn_ops.max_pool(t, ksize=[1, 1, 2, 1], strides=1, padding=\"VALID\"))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f44c62973385b84df909d09e123a6851c6d1eb75",
      "candidate_info": {
        "commit_hash": "f44c62973385b84df909d09e123a6851c6d1eb75",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/f44c62973385b84df909d09e123a6851c6d1eb75",
        "files": [
          "tensorflow/core/kernels/maxpooling_op.cc",
          "tensorflow/python/kernel_tests/nn_ops/pooling_ops_test.py"
        ],
        "message": "Fix MaxPool crash on GPU for invalid filter size.\n\nIf the filter size exceeds the input size by one for `VALID` padding,\nreturn an empty tensor. This is consistent with XLA.\n\nPiperOrigin-RevId: 462684864",
        "before_after_code_files": [
          "tensorflow/core/kernels/maxpooling_op.cc||tensorflow/core/kernels/maxpooling_op.cc",
          "tensorflow/python/kernel_tests/nn_ops/pooling_ops_test.py||tensorflow/python/kernel_tests/nn_ops/pooling_ops_test.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/maxpooling_op.cc||tensorflow/core/kernels/maxpooling_op.cc",
            "tensorflow/python/kernel_tests/nn_ops/pooling_ops_test.py||tensorflow/python/kernel_tests/nn_ops/pooling_ops_test.py"
          ],
          "candidate": [
            "tensorflow/core/kernels/maxpooling_op.cc||tensorflow/core/kernels/maxpooling_op.cc",
            "tensorflow/python/kernel_tests/nn_ops/pooling_ops_test.py||tensorflow/python/kernel_tests/nn_ops/pooling_ops_test.py"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/maxpooling_op.cc||tensorflow/core/kernels/maxpooling_op.cc": [
          "File: tensorflow/core/kernels/maxpooling_op.cc -> tensorflow/core/kernels/maxpooling_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "1268:         ShapeFromFormat(data_format_, params.tensor_in_batch, params.out_height,",
          "1269:                         params.out_width, params.depth);",
          "1272:     constexpr bool is_int8x4 = std::is_same<T, qint8>::value;",
          "1273:     OP_REQUIRES(context, (is_int8x4 == (data_format_ == FORMAT_NCHW_VECT_C)),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1272:     if (out_shape.num_elements() == 0) {",
          "1273:       Tensor* output = nullptr;",
          "1274:       OP_REQUIRES_OK(context, context->allocate_output(0, out_shape, &output));",
          "1275:       return;",
          "1276:     }",
          "",
          "---------------"
        ],
        "tensorflow/python/kernel_tests/nn_ops/pooling_ops_test.py||tensorflow/python/kernel_tests/nn_ops/pooling_ops_test.py": [
          "File: tensorflow/python/kernel_tests/nn_ops/pooling_ops_test.py -> tensorflow/python/kernel_tests/nn_ops/pooling_ops_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "772:         expected=[],",
          "775:   # Tests for DepthwiseMaxPooling on CPU only.",
          "776:   @parameterized.parameters(",
          "777:       GetTestConfigsDicts(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "775:   @parameterized.parameters(",
          "776:       GetTestConfigsDicts(nn_ops.max_pool, gen_nn_ops.max_pool_v2))",
          "777:   @test_util.run_deprecated_v1",
          "778:   def testMaxPoolInvalidFilterSize(self, **kwargs):",
          "779:     with self.cached_session(use_gpu=test.is_gpu_available()):",
          "780:       t = constant_op.constant(1.0, shape=[1, 1, 1, 1])",
          "781:       with self.assertRaisesRegex(",
          "782:           (errors_impl.InvalidArgumentError, ValueError),",
          "783:           \"Negative dimension size\"):",
          "784:         t = self.evaluate(",
          "785:             nn_ops.max_pool(t, ksize=[1, 1, 2, 1], strides=1, padding=\"VALID\"))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "36dd5ec5ba978563bc7a5b25bcd49ff339c35dfa",
      "candidate_info": {
        "commit_hash": "36dd5ec5ba978563bc7a5b25bcd49ff339c35dfa",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/36dd5ec5ba978563bc7a5b25bcd49ff339c35dfa",
        "files": [
          "tensorflow/core/kernels/maxpooling_op.cc",
          "tensorflow/python/kernel_tests/nn_ops/pooling_ops_test.py"
        ],
        "message": "Fix MaxPool crash on GPU for invalid filter size.\n\nIf the filter size exceeds the input size by one for `VALID` padding,\nreturn an empty tensor. This is consistent with XLA.\n\nPiperOrigin-RevId: 462684864",
        "before_after_code_files": [
          "tensorflow/core/kernels/maxpooling_op.cc||tensorflow/core/kernels/maxpooling_op.cc",
          "tensorflow/python/kernel_tests/nn_ops/pooling_ops_test.py||tensorflow/python/kernel_tests/nn_ops/pooling_ops_test.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/maxpooling_op.cc||tensorflow/core/kernels/maxpooling_op.cc",
            "tensorflow/python/kernel_tests/nn_ops/pooling_ops_test.py||tensorflow/python/kernel_tests/nn_ops/pooling_ops_test.py"
          ],
          "candidate": [
            "tensorflow/core/kernels/maxpooling_op.cc||tensorflow/core/kernels/maxpooling_op.cc",
            "tensorflow/python/kernel_tests/nn_ops/pooling_ops_test.py||tensorflow/python/kernel_tests/nn_ops/pooling_ops_test.py"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/maxpooling_op.cc||tensorflow/core/kernels/maxpooling_op.cc": [
          "File: tensorflow/core/kernels/maxpooling_op.cc -> tensorflow/core/kernels/maxpooling_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "1268:         ShapeFromFormat(data_format_, params.tensor_in_batch, params.out_height,",
          "1269:                         params.out_width, params.depth);",
          "1272:     constexpr bool is_int8x4 = std::is_same<T, qint8>::value;",
          "1273:     OP_REQUIRES(context, (is_int8x4 == (data_format_ == FORMAT_NCHW_VECT_C)),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1272:     if (out_shape.num_elements() == 0) {",
          "1273:       Tensor* output = nullptr;",
          "1274:       OP_REQUIRES_OK(context, context->allocate_output(0, out_shape, &output));",
          "1275:       return;",
          "1276:     }",
          "",
          "---------------"
        ],
        "tensorflow/python/kernel_tests/nn_ops/pooling_ops_test.py||tensorflow/python/kernel_tests/nn_ops/pooling_ops_test.py": [
          "File: tensorflow/python/kernel_tests/nn_ops/pooling_ops_test.py -> tensorflow/python/kernel_tests/nn_ops/pooling_ops_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "772:         expected=[],",
          "775:   # Tests for DepthwiseMaxPooling on CPU only.",
          "776:   @parameterized.parameters(",
          "777:       GetTestConfigsDicts(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "775:   @parameterized.parameters(",
          "776:       GetTestConfigsDicts(nn_ops.max_pool, gen_nn_ops.max_pool_v2))",
          "777:   @test_util.run_deprecated_v1",
          "778:   def testMaxPoolInvalidFilterSize(self, **kwargs):",
          "779:     with self.cached_session(use_gpu=test.is_gpu_available()):",
          "780:       t = constant_op.constant(1.0, shape=[1, 1, 1, 1])",
          "781:       with self.assertRaisesRegex(",
          "782:           (errors_impl.InvalidArgumentError, ValueError),",
          "783:           \"Negative dimension size\"):",
          "784:         t = self.evaluate(",
          "785:             nn_ops.max_pool(t, ksize=[1, 1, 2, 1], strides=1, padding=\"VALID\"))",
          "",
          "---------------"
        ]
      }
    }
  ]
}