{
  "cve_id": "CVE-2018-14351",
  "cve_desc": "An issue was discovered in Mutt before 1.10.1 and NeoMutt before 2018-07-16. imap/command.c mishandles a long IMAP status mailbox literal count size.",
  "repo": "neomutt/neomutt",
  "patch_hash": "3c49c44be9b459d9c616bcaef6eb5d51298c1741",
  "patch_info": {
    "commit_hash": "3c49c44be9b459d9c616bcaef6eb5d51298c1741",
    "repo": "neomutt/neomutt",
    "commit_url": "https://github.com/neomutt/neomutt/commit/3c49c44be9b459d9c616bcaef6eb5d51298c1741",
    "files": [
      "imap/command.c"
    ],
    "message": "Ensure litlen isn't larger than our mailbox",
    "before_after_code_files": [
      "imap/command.c||imap/command.c"
    ]
  },
  "patch_diff": {
    "imap/command.c||imap/command.c": [
      "File: imap/command.c -> imap/command.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "635:       idata->status = IMAP_FATAL;",
      "636:       return;",
      "637:     }",
      "638:     mailbox = idata->buf;",
      "639:     s = mailbox + litlen;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "639:     if (strlen(idata->buf) < litlen)",
      "640:     {",
      "641:       mutt_debug(1, \"Error parsing STATUS mailbox\\n\");",
      "642:       return;",
      "643:     }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "98e30df8b57a14458ca100bfef97f45022fb910e",
      "candidate_info": {
        "commit_hash": "98e30df8b57a14458ca100bfef97f45022fb910e",
        "repo": "neomutt/neomutt",
        "commit_url": "https://github.com/neomutt/neomutt/commit/98e30df8b57a14458ca100bfef97f45022fb910e",
        "files": [
          "imap/auth.c",
          "imap/auth.h",
          "imap/auth_anon.c",
          "imap/auth_cram.c",
          "imap/auth_gss.c",
          "imap/auth_login.c",
          "imap/auth_oauth.c",
          "imap/auth_plain.c",
          "imap/auth_sasl.c",
          "imap/browse.c",
          "imap/command.c",
          "imap/imap.c",
          "imap/imap_private.h",
          "imap/message.c",
          "imap/message.h",
          "imap/utf7.c",
          "imap/util.c"
        ],
        "message": "imap: tidy data naming",
        "before_after_code_files": [
          "imap/auth.c||imap/auth.c",
          "imap/auth.h||imap/auth.h",
          "imap/auth_anon.c||imap/auth_anon.c",
          "imap/auth_cram.c||imap/auth_cram.c",
          "imap/auth_gss.c||imap/auth_gss.c",
          "imap/auth_login.c||imap/auth_login.c",
          "imap/auth_oauth.c||imap/auth_oauth.c",
          "imap/auth_plain.c||imap/auth_plain.c",
          "imap/auth_sasl.c||imap/auth_sasl.c",
          "imap/browse.c||imap/browse.c",
          "imap/command.c||imap/command.c",
          "imap/imap.c||imap/imap.c",
          "imap/imap_private.h||imap/imap_private.h",
          "imap/message.c||imap/message.c",
          "imap/message.h||imap/message.h",
          "imap/utf7.c||imap/utf7.c",
          "imap/util.c||imap/util.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "imap/command.c||imap/command.c"
          ],
          "candidate": [
            "imap/command.c||imap/command.c"
          ]
        }
      },
      "candidate_diff": {
        "imap/auth.c||imap/auth.c": [
          "File: imap/auth.c -> imap/auth.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "68: {",
          "69:   int r = IMAP_AUTH_FAILURE;",
          "",
          "[Removed Lines]",
          "67: int imap_authenticate(struct ImapData *idata)",
          "",
          "[Added Lines]",
          "67: int imap_authenticate(struct ImapMboxData *mdata)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "91:         const struct ImapAuth *auth = &imap_authenticators[i];",
          "92:         if (!auth->method || (mutt_str_strcasecmp(auth->method, method) == 0))",
          "93:         {",
          "95:           if (r == IMAP_AUTH_SUCCESS)",
          "96:           {",
          "97:             FREE(&methods);",
          "",
          "[Removed Lines]",
          "94:           r = auth->authenticate(idata, method);",
          "",
          "[Added Lines]",
          "94:           r = auth->authenticate(mdata, method);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "111:     for (size_t i = 0; i < mutt_array_size(imap_authenticators); ++i)",
          "112:     {",
          "114:       if (r == IMAP_AUTH_SUCCESS)",
          "115:         return r;",
          "116:     }",
          "",
          "[Removed Lines]",
          "113:       r = imap_authenticators[i].authenticate(idata, NULL);",
          "",
          "[Added Lines]",
          "113:       r = imap_authenticators[i].authenticate(mdata, NULL);",
          "",
          "---------------"
        ],
        "imap/auth.h||imap/auth.h": [
          "File: imap/auth.h -> imap/auth.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: #ifndef MUTT_IMAP_AUTH_H",
          "27: #define MUTT_IMAP_AUTH_H",
          "",
          "[Removed Lines]",
          "29: struct ImapData;",
          "",
          "[Added Lines]",
          "29: struct ImapMboxData;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "44: struct ImapAuth",
          "45: {",
          "50:   const char *method;",
          "51: };",
          "55: #ifndef USE_SASL",
          "58: #endif",
          "60: #ifdef USE_GSS",
          "62: #endif",
          "63: #ifdef USE_SASL",
          "65: #endif",
          "",
          "[Removed Lines]",
          "47:   enum ImapAuthRes (*authenticate)(struct ImapData *idata, const char *method);",
          "54: enum ImapAuthRes imap_auth_plain(struct ImapData *idata, const char *method);",
          "56: enum ImapAuthRes imap_auth_anon(struct ImapData *idata, const char *method);",
          "57: enum ImapAuthRes imap_auth_cram_md5(struct ImapData *idata, const char *method);",
          "59: enum ImapAuthRes imap_auth_login(struct ImapData *idata, const char *method);",
          "61: enum ImapAuthRes imap_auth_gss(struct ImapData *idata, const char *method);",
          "64: enum ImapAuthRes imap_auth_sasl(struct ImapData *idata, const char *method);",
          "66: enum ImapAuthRes imap_auth_oauth(struct ImapData *idata, const char *method);",
          "",
          "[Added Lines]",
          "47:   enum ImapAuthRes (*authenticate)(struct ImapMboxData *mdata, const char *method);",
          "54: enum ImapAuthRes imap_auth_plain(struct ImapMboxData *mdata, const char *method);",
          "56: enum ImapAuthRes imap_auth_anon(struct ImapMboxData *mdata, const char *method);",
          "57: enum ImapAuthRes imap_auth_cram_md5(struct ImapMboxData *mdata, const char *method);",
          "59: enum ImapAuthRes imap_auth_login(struct ImapMboxData *mdata, const char *method);",
          "61: enum ImapAuthRes imap_auth_gss(struct ImapMboxData *mdata, const char *method);",
          "64: enum ImapAuthRes imap_auth_sasl(struct ImapMboxData *mdata, const char *method);",
          "66: enum ImapAuthRes imap_auth_oauth(struct ImapMboxData *mdata, const char *method);",
          "",
          "---------------"
        ],
        "imap/auth_anon.c||imap/auth_anon.c": [
          "File: imap/auth_anon.c -> imap/auth_anon.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "46: {",
          "47:   int rc;",
          "50:     return IMAP_AUTH_UNAVAIL;",
          "53:     return IMAP_AUTH_FAILURE;",
          "56:     return IMAP_AUTH_UNAVAIL;",
          "58:   mutt_message(_(\"Authenticating (anonymous)...\"));",
          "62:   do",
          "64:   while (rc == IMAP_CMD_CONTINUE);",
          "66:   if (rc != IMAP_CMD_RESPOND)",
          "",
          "[Removed Lines]",
          "45: enum ImapAuthRes imap_auth_anon(struct ImapData *idata, const char *method)",
          "49:   if (!mutt_bit_isset(idata->capabilities, AUTH_ANON))",
          "52:   if (mutt_account_getuser(&idata->conn->account) < 0)",
          "55:   if (idata->conn->account.user[0] != '\\0')",
          "60:   imap_cmd_start(idata, \"AUTHENTICATE ANONYMOUS\");",
          "63:     rc = imap_cmd_step(idata);",
          "",
          "[Added Lines]",
          "45: enum ImapAuthRes imap_auth_anon(struct ImapMboxData *mdata, const char *method)",
          "49:   if (!mutt_bit_isset(mdata->capabilities, AUTH_ANON))",
          "52:   if (mutt_account_getuser(&mdata->conn->account) < 0)",
          "55:   if (mdata->conn->account.user[0] != '\\0')",
          "60:   imap_cmd_start(mdata, \"AUTHENTICATE ANONYMOUS\");",
          "63:     rc = imap_cmd_step(mdata);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "69:     goto bail;",
          "70:   }",
          "74:   do",
          "76:   while (rc == IMAP_CMD_CONTINUE);",
          "78:   if (rc != IMAP_CMD_OK)",
          "",
          "[Removed Lines]",
          "75:     rc = imap_cmd_step(idata);",
          "",
          "[Added Lines]",
          "75:     rc = imap_cmd_step(mdata);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "81:     goto bail;",
          "82:   }",
          "85:     return IMAP_AUTH_SUCCESS;",
          "87: bail:",
          "",
          "[Removed Lines]",
          "84:   if (imap_code(idata->buf))",
          "",
          "[Added Lines]",
          "84:   if (imap_code(mdata->buf))",
          "",
          "---------------"
        ],
        "imap/auth_cram.c||imap/auth_cram.c": [
          "File: imap/auth_cram.c -> imap/auth_cram.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "99: {",
          "100:   char ibuf[LONG_STRING * 2], obuf[LONG_STRING];",
          "101:   unsigned char hmac_response[MD5_DIGEST_LEN];",
          "102:   int len;",
          "103:   int rc;",
          "106:     return IMAP_AUTH_UNAVAIL;",
          "108:   mutt_message(_(\"Authenticating (CRAM-MD5)...\"));",
          "112:     return IMAP_AUTH_FAILURE;",
          "114:     return IMAP_AUTH_FAILURE;",
          "",
          "[Removed Lines]",
          "98: enum ImapAuthRes imap_auth_cram_md5(struct ImapData *idata, const char *method)",
          "105:   if (!mutt_bit_isset(idata->capabilities, ACRAM_MD5))",
          "111:   if (mutt_account_getlogin(&idata->conn->account) < 0)",
          "113:   if (mutt_account_getpass(&idata->conn->account) < 0)",
          "116:   imap_cmd_start(idata, \"AUTHENTICATE CRAM-MD5\");",
          "",
          "[Added Lines]",
          "98: enum ImapAuthRes imap_auth_cram_md5(struct ImapMboxData *mdata, const char *method)",
          "105:   if (!mutt_bit_isset(mdata->capabilities, ACRAM_MD5))",
          "111:   if (mutt_account_getlogin(&mdata->conn->account) < 0)",
          "113:   if (mutt_account_getpass(&mdata->conn->account) < 0)",
          "116:   imap_cmd_start(mdata, \"AUTHENTICATE CRAM-MD5\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "124:   do",
          "126:   while (rc == IMAP_CMD_CONTINUE);",
          "128:   if (rc != IMAP_CMD_RESPOND)",
          "",
          "[Removed Lines]",
          "125:     rc = imap_cmd_step(idata);",
          "",
          "[Added Lines]",
          "125:     rc = imap_cmd_step(mdata);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "131:     goto bail;",
          "132:   }",
          "135:   if (len == -1)",
          "136:   {",
          "137:     mutt_debug(1, \"Error decoding base64 response.\\n\");",
          "",
          "[Removed Lines]",
          "134:   len = mutt_b64_decode(idata->buf + 2, obuf, sizeof(obuf));",
          "",
          "[Added Lines]",
          "134:   len = mutt_b64_decode(mdata->buf + 2, obuf, sizeof(obuf));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "158:   mutt_md5_toascii(hmac_response, obuf + off);",
          "159:   mutt_debug(2, \"CRAM response: %s\\n\", obuf);",
          "",
          "[Removed Lines]",
          "155:   hmac_md5(idata->conn->account.pass, obuf, hmac_response);",
          "157:   int off = snprintf(obuf, sizeof(obuf), \"%s \", idata->conn->account.user);",
          "",
          "[Added Lines]",
          "155:   hmac_md5(mdata->conn->account.pass, obuf, hmac_response);",
          "157:   int off = snprintf(obuf, sizeof(obuf), \"%s \", mdata->conn->account.user);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "163:   mutt_b64_encode(obuf, strlen(obuf), ibuf, sizeof(ibuf) - 2);",
          "164:   mutt_str_strcat(ibuf, sizeof(ibuf), \"\\r\\n\");",
          "167:   do",
          "169:   while (rc == IMAP_CMD_CONTINUE);",
          "171:   if (rc != IMAP_CMD_OK)",
          "",
          "[Removed Lines]",
          "165:   mutt_socket_send(idata->conn, ibuf);",
          "168:     rc = imap_cmd_step(idata);",
          "",
          "[Added Lines]",
          "165:   mutt_socket_send(mdata->conn, ibuf);",
          "168:     rc = imap_cmd_step(mdata);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "174:     goto bail;",
          "175:   }",
          "178:     return IMAP_AUTH_SUCCESS;",
          "180: bail:",
          "",
          "[Removed Lines]",
          "177:   if (imap_code(idata->buf))",
          "",
          "[Added Lines]",
          "177:   if (imap_code(mdata->buf))",
          "",
          "---------------"
        ],
        "imap/auth_gss.c||imap/auth_gss.c": [
          "File: imap/auth_gss.c -> imap/auth_gss.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "110: {",
          "111:   gss_buffer_desc request_buf, send_token;",
          "112:   gss_buffer_t sec_token;",
          "",
          "[Removed Lines]",
          "109: enum ImapAuthRes imap_auth_gss(struct ImapData *idata, const char *method)",
          "",
          "[Added Lines]",
          "109: enum ImapAuthRes imap_auth_gss(struct ImapMboxData *mdata, const char *method)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "121:   unsigned long buf_size;",
          "122:   int rc;",
          "125:     return IMAP_AUTH_UNAVAIL;",
          "128:     return IMAP_AUTH_FAILURE;",
          "132:   request_buf.value = buf1;",
          "133:   request_buf.length = strlen(buf1);",
          "134:   maj_stat = gss_import_name(&min_stat, &request_buf, gss_nt_service_name, &target_name);",
          "",
          "[Removed Lines]",
          "124:   if (!mutt_bit_isset(idata->capabilities, AGSSAPI))",
          "127:   if (mutt_account_getuser(&idata->conn->account) < 0)",
          "131:   snprintf(buf1, sizeof(buf1), \"imap@%s\", idata->conn->account.host);",
          "",
          "[Added Lines]",
          "124:   if (!mutt_bit_isset(mdata->capabilities, AGSSAPI))",
          "127:   if (mutt_account_getuser(&mdata->conn->account) < 0)",
          "131:   snprintf(buf1, sizeof(buf1), \"imap@%s\", mdata->conn->account.host);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "165:   mutt_message(_(\"Authenticating (GSSAPI)...\"));",
          "170:   do",
          "172:   while (rc == IMAP_CMD_CONTINUE);",
          "174:   if (rc != IMAP_CMD_RESPOND)",
          "",
          "[Removed Lines]",
          "167:   imap_cmd_start(idata, \"AUTHENTICATE GSSAPI\");",
          "171:     rc = imap_cmd_step(idata);",
          "",
          "[Added Lines]",
          "167:   imap_cmd_start(mdata, \"AUTHENTICATE GSSAPI\");",
          "171:     rc = imap_cmd_step(mdata);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "183:   mutt_b64_encode(send_token.value, send_token.length, buf1, sizeof(buf1) - 2);",
          "184:   gss_release_buffer(&min_stat, &send_token);",
          "185:   mutt_str_strcat(buf1, sizeof(buf1), \"\\r\\n\");",
          "188:   while (maj_stat == GSS_S_CONTINUE_NEEDED)",
          "189:   {",
          "191:     do",
          "193:     while (rc == IMAP_CMD_CONTINUE);",
          "195:     if (rc != IMAP_CMD_RESPOND)",
          "",
          "[Removed Lines]",
          "186:   mutt_socket_send(idata->conn, buf1);",
          "192:       rc = imap_cmd_step(idata);",
          "",
          "[Added Lines]",
          "186:   mutt_socket_send(mdata->conn, buf1);",
          "192:       rc = imap_cmd_step(mdata);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "199:       goto bail;",
          "200:     }",
          "203:     request_buf.value = buf2;",
          "204:     sec_token = &request_buf;",
          "",
          "[Removed Lines]",
          "202:     request_buf.length = mutt_b64_decode(idata->buf + 2, buf2, sizeof(buf2));",
          "",
          "[Added Lines]",
          "202:     request_buf.length = mutt_b64_decode(mdata->buf + 2, buf2, sizeof(buf2));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "219:     mutt_b64_encode(send_token.value, send_token.length, buf1, sizeof(buf1) - 2);",
          "220:     gss_release_buffer(&min_stat, &send_token);",
          "221:     mutt_str_strcat(buf1, sizeof(buf1), \"\\r\\n\");",
          "223:   }",
          "225:   gss_release_name(&min_stat, &target_name);",
          "228:   do",
          "230:   while (rc == IMAP_CMD_CONTINUE);",
          "232:   if (rc != IMAP_CMD_RESPOND)",
          "",
          "[Removed Lines]",
          "222:     mutt_socket_send(idata->conn, buf1);",
          "229:     rc = imap_cmd_step(idata);",
          "",
          "[Added Lines]",
          "222:     mutt_socket_send(mdata->conn, buf1);",
          "229:     rc = imap_cmd_step(mdata);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "234:     mutt_debug(1, \"#2 Error receiving server response.\\n\");",
          "235:     goto bail;",
          "236:   }",
          "238:   request_buf.value = buf2;",
          "240:   maj_stat = gss_unwrap(&min_stat, context, &request_buf, &send_token, &cflags, &quality);",
          "",
          "[Removed Lines]",
          "237:   request_buf.length = mutt_b64_decode(idata->buf + 2, buf2, sizeof(buf2));",
          "",
          "[Added Lines]",
          "237:   request_buf.length = mutt_b64_decode(mdata->buf + 2, buf2, sizeof(buf2));",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "271:   memcpy(buf1, &buf_size, 4);",
          "272:   buf1[0] = GSS_AUTH_P_NONE;",
          "275:   request_buf.value = buf1;",
          "277:   maj_stat = gss_wrap(&min_stat, context, 0, GSS_C_QOP_DEFAULT, &request_buf,",
          "278:                       &cflags, &send_token);",
          "279:   if (maj_stat != GSS_S_COMPLETE)",
          "",
          "[Removed Lines]",
          "274:   strncpy(buf1 + 4, idata->conn->account.user, sizeof(buf1) - 4);",
          "276:   request_buf.length = 4 + strlen(idata->conn->account.user);",
          "",
          "[Added Lines]",
          "274:   strncpy(buf1 + 4, mdata->conn->account.user, sizeof(buf1) - 4);",
          "276:   request_buf.length = 4 + strlen(mdata->conn->account.user);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "283:   }",
          "285:   mutt_b64_encode(send_token.value, send_token.length, buf1, sizeof(buf1) - 2);",
          "287:   mutt_str_strcat(buf1, sizeof(buf1), \"\\r\\n\");",
          "291:   do",
          "293:   while (rc == IMAP_CMD_CONTINUE);",
          "294:   if (rc == IMAP_CMD_RESPOND)",
          "295:   {",
          "296:     mutt_debug(1, \"Unexpected server continuation request.\\n\");",
          "297:     goto err_abort_cmd;",
          "298:   }",
          "300:   {",
          "302:     mutt_debug(2, \"Releasing GSS credentials\\n\");",
          "",
          "[Removed Lines]",
          "286:   mutt_debug(2, \"Requesting authorisation as %s\\n\", idata->conn->account.user);",
          "288:   mutt_socket_send(idata->conn, buf1);",
          "292:     rc = imap_cmd_step(idata);",
          "299:   if (imap_code(idata->buf))",
          "",
          "[Added Lines]",
          "286:   mutt_debug(2, \"Requesting authorisation as %s\\n\", mdata->conn->account.user);",
          "288:   mutt_socket_send(mdata->conn, buf1);",
          "292:     rc = imap_cmd_step(mdata);",
          "299:   if (imap_code(mdata->buf))",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "316:     goto bail;",
          "318: err_abort_cmd:",
          "320:   do",
          "322:   while (rc == IMAP_CMD_CONTINUE);",
          "324: bail:",
          "",
          "[Removed Lines]",
          "319:   mutt_socket_send(idata->conn, \"*\\r\\n\");",
          "321:     rc = imap_cmd_step(idata);",
          "",
          "[Added Lines]",
          "319:   mutt_socket_send(mdata->conn, \"*\\r\\n\");",
          "321:     rc = imap_cmd_step(mdata);",
          "",
          "---------------"
        ],
        "imap/auth_login.c||imap/auth_login.c": [
          "File: imap/auth_login.c -> imap/auth_login.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "46: {",
          "47:   char q_user[SHORT_STRING], q_pass[SHORT_STRING];",
          "48:   char buf[STRING];",
          "49:   int rc;",
          "52:   {",
          "53:     mutt_message(_(\"LOGIN disabled on this server\"));",
          "54:     return IMAP_AUTH_UNAVAIL;",
          "55:   }",
          "58:     return IMAP_AUTH_FAILURE;",
          "60:     return IMAP_AUTH_FAILURE;",
          "62:   mutt_message(_(\"Logging in...\"));",
          "70:   if (DebugLevel < IMAP_LOG_PASS)",
          "73:   snprintf(buf, sizeof(buf), \"LOGIN %s %s\", q_user, q_pass);",
          "76:   if (!rc)",
          "77:   {",
          "",
          "[Removed Lines]",
          "45: enum ImapAuthRes imap_auth_login(struct ImapData *idata, const char *method)",
          "51:   if (mutt_bit_isset(idata->capabilities, LOGINDISABLED))",
          "57:   if (mutt_account_getuser(&idata->conn->account) < 0)",
          "59:   if (mutt_account_getpass(&idata->conn->account) < 0)",
          "64:   imap_quote_string(q_user, sizeof(q_user), idata->conn->account.user, false);",
          "65:   imap_quote_string(q_pass, sizeof(q_pass), idata->conn->account.pass, false);",
          "71:     mutt_debug(2, \"Sending LOGIN command for %s...\\n\", idata->conn->account.user);",
          "74:   rc = imap_exec(idata, buf, IMAP_CMD_FAIL_OK | IMAP_CMD_PASS);",
          "",
          "[Added Lines]",
          "45: enum ImapAuthRes imap_auth_login(struct ImapMboxData *mdata, const char *method)",
          "51:   if (mutt_bit_isset(mdata->capabilities, LOGINDISABLED))",
          "57:   if (mutt_account_getuser(&mdata->conn->account) < 0)",
          "59:   if (mutt_account_getpass(&mdata->conn->account) < 0)",
          "64:   imap_quote_string(q_user, sizeof(q_user), mdata->conn->account.user, false);",
          "65:   imap_quote_string(q_pass, sizeof(q_pass), mdata->conn->account.pass, false);",
          "71:     mutt_debug(2, \"Sending LOGIN command for %s...\\n\", mdata->conn->account.user);",
          "74:   rc = imap_exec(mdata, buf, IMAP_CMD_FAIL_OK | IMAP_CMD_PASS);",
          "",
          "---------------"
        ],
        "imap/auth_oauth.c||imap/auth_oauth.c": [
          "File: imap/auth_oauth.c -> imap/auth_oauth.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "48: {",
          "49:   char *ibuf = NULL;",
          "50:   char *oauthbearer = NULL;",
          "",
          "[Removed Lines]",
          "47: enum ImapAuthRes imap_auth_oauth(struct ImapData *idata, const char *method)",
          "",
          "[Added Lines]",
          "47: enum ImapAuthRes imap_auth_oauth(struct ImapMboxData *mdata, const char *method)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "52:   int rc;",
          "57:   {",
          "58:     return IMAP_AUTH_UNAVAIL;",
          "59:   }",
          "",
          "[Removed Lines]",
          "55:   if (!mutt_bit_isset(idata->capabilities, AUTH_OAUTHBEARER) ||",
          "56:       !mutt_bit_isset(idata->capabilities, SASL_IR) || !idata->conn->ssf)",
          "",
          "[Added Lines]",
          "55:   if (!mutt_bit_isset(mdata->capabilities, AUTH_OAUTHBEARER) ||",
          "56:       !mutt_bit_isset(mdata->capabilities, SASL_IR) || !mdata->conn->ssf)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "61:   mutt_message(_(\"Authenticating (OAUTHBEARER)...\"));",
          "65:   if (!oauthbearer)",
          "66:     return IMAP_AUTH_FAILURE;",
          "",
          "[Removed Lines]",
          "64:   oauthbearer = mutt_account_getoauthbearer(&idata->conn->account);",
          "",
          "[Added Lines]",
          "64:   oauthbearer = mutt_account_getoauthbearer(&mdata->conn->account);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "77:   FREE(&oauthbearer);",
          "78:   FREE(&ibuf);",
          "",
          "[Removed Lines]",
          "75:   rc = imap_exec(idata, ibuf, IMAP_CMD_FAIL_OK | IMAP_CMD_PASS);",
          "",
          "[Added Lines]",
          "75:   rc = imap_exec(mdata, ibuf, IMAP_CMD_FAIL_OK | IMAP_CMD_PASS);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "87:   }",
          "89:   if (!rc)",
          "",
          "[Removed Lines]",
          "85:     mutt_socket_send(idata->conn, \"\\001\");",
          "86:     rc = imap_exec(idata, ibuf, IMAP_CMD_FAIL_OK);",
          "",
          "[Added Lines]",
          "85:     mutt_socket_send(mdata->conn, \"\\001\");",
          "86:     rc = imap_exec(mdata, ibuf, IMAP_CMD_FAIL_OK);",
          "",
          "---------------"
        ],
        "imap/auth_plain.c||imap/auth_plain.c": [
          "File: imap/auth_plain.c -> imap/auth_plain.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "46: {",
          "47:   int rc = IMAP_CMD_CONTINUE;",
          "48:   enum ImapAuthRes res = IMAP_AUTH_SUCCESS;",
          "49:   static const char auth_plain_cmd[] = \"AUTHENTICATE PLAIN\";",
          "50:   char buf[STRING] = { 0 };",
          "53:     return IMAP_AUTH_FAILURE;",
          "55:     return IMAP_AUTH_FAILURE;",
          "57:   mutt_message(_(\"Logging in...\"));",
          "64:   {",
          "66:   }",
          "67:   else",
          "68:   {",
          "71:     buf[sizeof(auth_plain_cmd) - 1] = '\\0';",
          "73:     while (rc == IMAP_CMD_CONTINUE)",
          "74:     {",
          "76:     }",
          "77:     if (rc == IMAP_CMD_RESPOND)",
          "78:     {",
          "79:       mutt_str_strcat(buf + sizeof(auth_plain_cmd),",
          "80:                       sizeof(buf) - sizeof(auth_plain_cmd), \"\\r\\n\");",
          "82:     }",
          "83:   }",
          "85:   while (rc == IMAP_CMD_CONTINUE)",
          "86:   {",
          "88:   }",
          "90:   if (rc == IMAP_CMD_BAD)",
          "",
          "[Removed Lines]",
          "45: enum ImapAuthRes imap_auth_plain(struct ImapData *idata, const char *method)",
          "52:   if (mutt_account_getuser(&idata->conn->account) < 0)",
          "54:   if (mutt_account_getpass(&idata->conn->account) < 0)",
          "60:   mutt_sasl_plain_msg(buf, sizeof(buf), auth_plain_cmd, idata->conn->account.user,",
          "61:                       idata->conn->account.user, idata->conn->account.pass);",
          "63:   if (mutt_bit_isset(idata->capabilities, SASL_IR))",
          "65:     imap_cmd_start(idata, buf);",
          "72:     imap_cmd_start(idata, buf);",
          "75:       rc = imap_cmd_step(idata);",
          "81:       mutt_socket_send(idata->conn, buf + sizeof(auth_plain_cmd));",
          "87:     rc = imap_cmd_step(idata);",
          "",
          "[Added Lines]",
          "45: enum ImapAuthRes imap_auth_plain(struct ImapMboxData *mdata, const char *method)",
          "52:   if (mutt_account_getuser(&mdata->conn->account) < 0)",
          "54:   if (mutt_account_getpass(&mdata->conn->account) < 0)",
          "60:   mutt_sasl_plain_msg(buf, sizeof(buf), auth_plain_cmd, mdata->conn->account.user,",
          "61:                       mdata->conn->account.user, mdata->conn->account.pass);",
          "63:   if (mutt_bit_isset(mdata->capabilities, SASL_IR))",
          "65:     imap_cmd_start(mdata, buf);",
          "72:     imap_cmd_start(mdata, buf);",
          "75:       rc = imap_cmd_step(mdata);",
          "81:       mutt_socket_send(mdata->conn, buf + sizeof(auth_plain_cmd));",
          "87:     rc = imap_cmd_step(mdata);",
          "",
          "---------------"
        ],
        "imap/auth_sasl.c||imap/auth_sasl.c": [
          "File: imap/auth_sasl.c -> imap/auth_sasl.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "50: {",
          "51:   sasl_conn_t *saslconn = NULL;",
          "52:   sasl_interact_t *interaction = NULL;",
          "",
          "[Removed Lines]",
          "49: enum ImapAuthRes imap_auth_sasl(struct ImapData *idata, const char *method)",
          "",
          "[Added Lines]",
          "49: enum ImapAuthRes imap_auth_sasl(struct ImapMboxData *mdata, const char *method)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "58:   unsigned int len = 0, olen = 0;",
          "59:   bool client_start;",
          "62:   {",
          "63:     mutt_debug(1, \"Error allocating SASL connection.\\n\");",
          "64:     return IMAP_AUTH_FAILURE;",
          "",
          "[Removed Lines]",
          "61:   if (mutt_sasl_client_new(idata->conn, &saslconn) < 0)",
          "",
          "[Added Lines]",
          "61:   if (mutt_sasl_client_new(mdata->conn, &saslconn) < 0)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "70:   if (!method)",
          "71:   {",
          "80:       return IMAP_AUTH_FAILURE;",
          "85:     {",
          "86:       rc = sasl_client_start(saslconn, \"AUTH=ANONYMOUS\", NULL, &pc, &olen, &mech);",
          "87:     }",
          "88:   }",
          "89:   else if ((mutt_str_strcasecmp(\"login\", method) == 0) &&",
          "91:   {",
          "93:     return IMAP_AUTH_UNAVAIL;",
          "",
          "[Removed Lines]",
          "72:     method = idata->capstr;",
          "79:     if (mutt_account_getuser(&idata->conn->account) < 0)",
          "82:     if (mutt_bit_isset(idata->capabilities, AUTH_ANON) &&",
          "83:         (!idata->conn->account.user[0] ||",
          "84:          (mutt_str_strncmp(idata->conn->account.user, \"anonymous\", 9) == 0)))",
          "90:            !strstr(NONULL(idata->capstr), \"AUTH=LOGIN\"))",
          "",
          "[Added Lines]",
          "72:     method = mdata->capstr;",
          "79:     if (mutt_account_getuser(&mdata->conn->account) < 0)",
          "82:     if (mutt_bit_isset(mdata->capabilities, AUTH_ANON) &&",
          "83:         (!mdata->conn->account.user[0] ||",
          "84:          (mutt_str_strncmp(mdata->conn->account.user, \"anonymous\", 9) == 0)))",
          "90:            !strstr(NONULL(mdata->capstr), \"AUTH=LOGIN\"))",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "126:   buf = mutt_mem_malloc(bufsize);",
          "128:   snprintf(buf, bufsize, \"AUTHENTICATE %s\", mech);",
          "130:   {",
          "131:     len = mutt_str_strlen(buf);",
          "132:     buf[len++] = ' ';",
          "",
          "[Removed Lines]",
          "129:   if (mutt_bit_isset(idata->capabilities, SASL_IR) && client_start)",
          "",
          "[Added Lines]",
          "129:   if (mutt_bit_isset(mdata->capabilities, SASL_IR) && client_start)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "138:     client_start = false;",
          "139:     olen = 0;",
          "140:   }",
          "142:   irc = IMAP_CMD_CONTINUE;",
          "145:   while (rc == SASL_CONTINUE || olen > 0)",
          "146:   {",
          "147:     do",
          "149:     while (irc == IMAP_CMD_CONTINUE);",
          "151:     if (irc == IMAP_CMD_BAD || irc == IMAP_CMD_NO)",
          "",
          "[Removed Lines]",
          "141:   imap_cmd_start(idata, buf);",
          "148:       irc = imap_cmd_step(idata);",
          "",
          "[Added Lines]",
          "141:   imap_cmd_start(mdata, buf);",
          "148:       irc = imap_cmd_step(mdata);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "154:     if (irc == IMAP_CMD_RESPOND)",
          "155:     {",
          "158:       {",
          "159:         buf[0] = '\\0';",
          "160:         len = 0;",
          "161:       }",
          "162:       else",
          "163:       {",
          "165:         if (len > bufsize)",
          "166:         {",
          "167:           bufsize = len;",
          "",
          "[Removed Lines]",
          "157:       if (idata->buf[1] == '\\0')",
          "164:         len = strlen(idata->buf + 2);",
          "",
          "[Added Lines]",
          "157:       if (mdata->buf[1] == '\\0')",
          "164:         len = strlen(mdata->buf + 2);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "169:         }",
          "173:         {",
          "174:           mutt_debug(1, \"error base64-decoding server response.\\n\");",
          "175:           goto bail;",
          "",
          "[Removed Lines]",
          "172:         if (sasl_decode64(idata->buf + 2, len, buf, bufsize - 1, &len) != SASL_OK)",
          "",
          "[Added Lines]",
          "172:         if (sasl_decode64(mdata->buf + 2, len, buf, bufsize - 1, &len) != SASL_OK)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "210:     if (irc == IMAP_CMD_RESPOND)",
          "211:     {",
          "212:       mutt_str_strfcpy(buf + olen, \"\\r\\n\", bufsize - olen);",
          "214:     }",
          "217:     if (rc < 0)",
          "218:     {",
          "220:       mutt_debug(1, \"sasl_client_step error %d\\n\", rc);",
          "221:     }",
          "",
          "[Removed Lines]",
          "213:       mutt_socket_send(idata->conn, buf);",
          "219:       mutt_socket_send(idata->conn, \"*\\r\\n\");",
          "",
          "[Added Lines]",
          "213:       mutt_socket_send(mdata->conn, buf);",
          "219:       mutt_socket_send(mdata->conn, \"*\\r\\n\");",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "226:   while (irc != IMAP_CMD_OK)",
          "227:   {",
          "229:     if (irc != IMAP_CMD_CONTINUE)",
          "230:       break;",
          "231:   }",
          "",
          "[Removed Lines]",
          "228:     irc = imap_cmd_step(idata);",
          "",
          "[Added Lines]",
          "228:     irc = imap_cmd_step(mdata);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "233:   if (rc != SASL_OK)",
          "234:     goto bail;",
          "237:   {",
          "239:     FREE(&buf);",
          "240:     return IMAP_AUTH_SUCCESS;",
          "241:   }",
          "",
          "[Removed Lines]",
          "236:   if (imap_code(idata->buf))",
          "238:     mutt_sasl_setup_conn(idata->conn, saslconn);",
          "",
          "[Added Lines]",
          "236:   if (imap_code(mdata->buf))",
          "238:     mutt_sasl_setup_conn(mdata->conn, saslconn);",
          "",
          "---------------"
        ],
        "imap/browse.c||imap/browse.c": [
          "File: imap/browse.c -> imap/browse.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "146:                                   struct BrowserState *state, bool isparent)",
          "147: {",
          "148:   struct ImapList list;",
          "",
          "[Removed Lines]",
          "145: static int browse_add_list_result(struct ImapData *idata, const char *cmd,",
          "",
          "[Added Lines]",
          "145: static int browse_add_list_result(struct ImapMboxData *mdata, const char *cmd,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "155:     return -1;",
          "156:   }",
          "161:   do",
          "162:   {",
          "163:     list.name = NULL;",
          "166:     if (rc == IMAP_CMD_CONTINUE && list.name)",
          "167:     {",
          "",
          "[Removed Lines]",
          "158:   imap_cmd_start(idata, cmd);",
          "159:   idata->cmdtype = IMAP_CT_LIST;",
          "160:   idata->cmddata = &list;",
          "164:     rc = imap_cmd_step(idata);",
          "",
          "[Added Lines]",
          "158:   imap_cmd_start(mdata, cmd);",
          "159:   mdata->cmdtype = IMAP_CT_LIST;",
          "160:   mdata->cmddata = &list;",
          "164:     rc = imap_cmd_step(mdata);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "173:         add_folder(list.delim, list.name, list.noselect, list.noinferiors, state, isparent);",
          "174:     }",
          "175:   } while (rc == IMAP_CMD_CONTINUE);",
          "178:   FREE(&mx.mbox);",
          "179:   return (rc == IMAP_CMD_OK) ? 0 : -1;",
          "",
          "[Removed Lines]",
          "176:   idata->cmddata = NULL;",
          "",
          "[Added Lines]",
          "176:   mdata->cmddata = NULL;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "191: int imap_browse(char *path, struct BrowserState *state)",
          "192: {",
          "194:   struct ImapList list;",
          "195:   char buf[PATH_MAX];",
          "196:   char mbox[PATH_MAX];",
          "",
          "[Removed Lines]",
          "193:   struct ImapData *idata = NULL;",
          "",
          "[Added Lines]",
          "193:   struct ImapMboxData *mdata = NULL;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "212:   ImapCheckSubscribed = false;",
          "213:   mutt_str_strfcpy(list_cmd, ImapListSubscribed ? \"LSUB\" : \"LIST\", sizeof(list_cmd));",
          "217:     goto fail;",
          "219:   mutt_message(_(\"Getting folder list...\"));",
          "",
          "[Removed Lines]",
          "215:   idata = imap_conn_find(&(mx.account), 0);",
          "216:   if (!idata)",
          "",
          "[Added Lines]",
          "215:   mdata = imap_conn_find(&(mx.account), 0);",
          "216:   if (!mdata)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "222:   if (mx.mbox && mx.mbox[0] != '\\0')",
          "223:   {",
          "225:     n = mutt_str_strlen(mbox);",
          "226:   }",
          "227:   else",
          "",
          "[Removed Lines]",
          "224:     imap_fix_path(idata, mx.mbox, mbox, sizeof(mbox));",
          "",
          "[Added Lines]",
          "224:     imap_fix_path(mdata, mx.mbox, mbox, sizeof(mbox));",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "241:     snprintf(buf, sizeof(buf), \"%s \\\"\\\" %s\", list_cmd, munged_mbox);",
          "245:     do",
          "246:     {",
          "247:       list.name = 0;",
          "249:       if (rc == IMAP_CMD_CONTINUE && list.name)",
          "250:       {",
          "251:         if (!list.noinferiors && list.name[0] &&",
          "",
          "[Removed Lines]",
          "240:     imap_munge_mbox_name(idata, munged_mbox, sizeof(munged_mbox), mbox);",
          "242:     imap_cmd_start(idata, buf);",
          "243:     idata->cmdtype = IMAP_CT_LIST;",
          "244:     idata->cmddata = &list;",
          "248:       rc = imap_cmd_step(idata);",
          "",
          "[Added Lines]",
          "240:     imap_munge_mbox_name(mdata, munged_mbox, sizeof(munged_mbox), mbox);",
          "242:     imap_cmd_start(mdata, buf);",
          "243:     mdata->cmdtype = IMAP_CT_LIST;",
          "244:     mdata->cmddata = &list;",
          "248:       rc = imap_cmd_step(mdata);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "256:         }",
          "257:       }",
          "258:     } while (rc == IMAP_CMD_CONTINUE);",
          "262:     if (mbox[n - 1] == list.delim)",
          "",
          "[Removed Lines]",
          "259:     idata->cmddata = NULL;",
          "",
          "[Added Lines]",
          "259:     mdata->cmddata = NULL;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "305:     {",
          "306:       char relpath[2];",
          "309:       if (showparents)",
          "311:       if (!state->folder)",
          "312:       {",
          "313:         imap_qualify_path(buf, sizeof(buf), &mx, relpath);",
          "",
          "[Removed Lines]",
          "308:       snprintf(relpath, sizeof(relpath), \"%c\", n < 0 ? '\\0' : idata->delim);",
          "310:         add_folder(idata->delim, relpath, true, false, state, true);",
          "",
          "[Added Lines]",
          "308:       snprintf(relpath, sizeof(relpath), \"%c\", n < 0 ? '\\0' : mdata->delim);",
          "310:         add_folder(mdata->delim, relpath, true, false, state, true);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "326:   mutt_debug(3, \"Quoting mailbox scan: %s -> \", mbox);",
          "327:   snprintf(buf, sizeof(buf), \"%s%%\", mbox);",
          "329:   mutt_debug(3, \"%s\\n\", munged_mbox);",
          "330:   snprintf(buf, sizeof(buf), \"%s \\\"\\\" %s\", list_cmd, munged_mbox);",
          "332:     goto fail;",
          "334:   if (state->entrylen == 0)",
          "",
          "[Removed Lines]",
          "328:   imap_munge_mbox_name(idata, munged_mbox, sizeof(munged_mbox), buf);",
          "331:   if (browse_add_list_result(idata, buf, state, false))",
          "",
          "[Added Lines]",
          "328:   imap_munge_mbox_name(mdata, munged_mbox, sizeof(munged_mbox), buf);",
          "331:   if (browse_add_list_result(mdata, buf, state, false))",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "363: int imap_mailbox_create(const char *folder)",
          "364: {",
          "366:   struct ImapMbox mx;",
          "367:   char buf[PATH_MAX];",
          "368:   short n;",
          "",
          "[Removed Lines]",
          "365:   struct ImapData *idata = NULL;",
          "",
          "[Added Lines]",
          "365:   struct ImapMboxData *mdata = NULL;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "373:     return -1;",
          "374:   }",
          "378:   {",
          "379:     mutt_debug(1, \"Couldn't find open connection to %s\\n\", mx.account.host);",
          "380:     goto fail;",
          "",
          "[Removed Lines]",
          "376:   idata = imap_conn_find(&mx.account, MUTT_IMAP_CONN_NONEW);",
          "377:   if (!idata)",
          "",
          "[Added Lines]",
          "376:   mdata = imap_conn_find(&mx.account, MUTT_IMAP_CONN_NONEW);",
          "377:   if (!mdata)",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "386:   n = mutt_str_strlen(buf);",
          "388:   {",
          "390:     buf[n] = '\\0';",
          "391:   }",
          "",
          "[Removed Lines]",
          "387:   if (n && (n < sizeof(buf) - 1) && (buf[n - 1] != idata->delim))",
          "389:     buf[n++] = idata->delim;",
          "",
          "[Added Lines]",
          "387:   if (n && (n < sizeof(buf) - 1) && (buf[n - 1] != mdata->delim))",
          "389:     buf[n++] = mdata->delim;",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "399:     goto fail;",
          "400:   }",
          "403:     goto fail;",
          "405:   mutt_message(_(\"Mailbox created\"));",
          "",
          "[Removed Lines]",
          "402:   if (imap_create_mailbox(idata, buf) < 0)",
          "",
          "[Added Lines]",
          "402:   if (imap_create_mailbox(mdata, buf) < 0)",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "424: int imap_mailbox_rename(const char *mailbox)",
          "425: {",
          "427:   struct ImapMbox mx;",
          "428:   char buf[PATH_MAX];",
          "429:   char newname[PATH_MAX];",
          "",
          "[Removed Lines]",
          "426:   struct ImapData *idata = NULL;",
          "",
          "[Added Lines]",
          "426:   struct ImapMboxData *mdata = NULL;",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "434:     return -1;",
          "435:   }",
          "439:   {",
          "440:     mutt_debug(1, \"Couldn't find open connection to %s\\n\", mx.account.host);",
          "441:     goto fail;",
          "",
          "[Removed Lines]",
          "437:   idata = imap_conn_find(&mx.account, MUTT_IMAP_CONN_NONEW);",
          "438:   if (!idata)",
          "",
          "[Added Lines]",
          "437:   mdata = imap_conn_find(&mx.account, MUTT_IMAP_CONN_NONEW);",
          "438:   if (!mdata)",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "459:     goto fail;",
          "460:   }",
          "465:   {",
          "467:     goto fail;",
          "468:   }",
          "",
          "[Removed Lines]",
          "462:   imap_fix_path(idata, newname, buf, sizeof(buf));",
          "464:   if (imap_rename_mailbox(idata, &mx, buf) < 0)",
          "466:     mutt_error(_(\"Rename failed: %s\"), imap_get_qualifier(idata->buf));",
          "",
          "[Added Lines]",
          "462:   imap_fix_path(mdata, newname, buf, sizeof(buf));",
          "464:   if (imap_rename_mailbox(mdata, &mx, buf) < 0)",
          "466:     mutt_error(_(\"Rename failed: %s\"), imap_get_qualifier(mdata->buf));",
          "",
          "---------------"
        ],
        "imap/command.c||imap/command.c": [
          "File: imap/command.c -> imap/command.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "85: {",
          "87:     return true;",
          "89:   return false;",
          "",
          "[Removed Lines]",
          "84: static bool cmd_queue_full(struct ImapData *idata)",
          "86:   if ((idata->nextcmd + 1) % idata->cmdslots == idata->lastcmd)",
          "",
          "[Added Lines]",
          "84: static bool cmd_queue_full(struct ImapMboxData *mdata)",
          "86:   if ((mdata->nextcmd + 1) % mdata->cmdslots == mdata->lastcmd)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "99: {",
          "100:   struct ImapCommand *cmd = NULL;",
          "103:   {",
          "104:     mutt_debug(3, \"IMAP command queue full\\n\");",
          "105:     return NULL;",
          "106:   }",
          "115:   cmd->state = IMAP_CMD_NEW;",
          "",
          "[Removed Lines]",
          "98: static struct ImapCommand *cmd_new(struct ImapData *idata)",
          "102:   if (cmd_queue_full(idata))",
          "108:   cmd = idata->cmds + idata->nextcmd;",
          "109:   idata->nextcmd = (idata->nextcmd + 1) % idata->cmdslots;",
          "111:   snprintf(cmd->seq, sizeof(cmd->seq), \"a%04u\", idata->seqno++);",
          "112:   if (idata->seqno > 9999)",
          "113:     idata->seqno = 0;",
          "",
          "[Added Lines]",
          "98: static struct ImapCommand *cmd_new(struct ImapMboxData *mdata)",
          "102:   if (cmd_queue_full(mdata))",
          "108:   cmd = mdata->cmds + mdata->nextcmd;",
          "109:   mdata->nextcmd = (mdata->nextcmd + 1) % mdata->cmdslots;",
          "111:   snprintf(cmd->seq, sizeof(cmd->seq), \"a%04u\", mdata->seqno++);",
          "112:   if (mdata->seqno > 9999)",
          "113:     mdata->seqno = 0;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "131: {",
          "133:   {",
          "134:     mutt_debug(3, \"Draining IMAP command pipeline\\n\");",
          "138:     if (rc < 0 && rc != -2)",
          "139:       return rc;",
          "140:   }",
          "143:   if (!cmd)",
          "144:     return IMAP_CMD_BAD;",
          "147:     return IMAP_CMD_BAD;",
          "149:   return 0;",
          "150: }",
          "157: {",
          "161:   {",
          "167:   }",
          "171:   {",
          "174:       mutt_clear_error();",
          "176:   }",
          "177: }",
          "188: {",
          "189:   int rc;",
          "192:   {",
          "194:     return -1;",
          "195:   }",
          "198:     return rc;",
          "200:   if (flags & IMAP_CMD_QUEUE)",
          "201:     return 0;",
          "204:     return IMAP_CMD_BAD;",
          "207:                           (flags & IMAP_CMD_PASS) ? IMAP_LOG_PASS : IMAP_LOG_CMD);",
          "214:   return (rc < 0) ? IMAP_CMD_BAD : 0;",
          "215: }",
          "",
          "[Removed Lines]",
          "130: static int cmd_queue(struct ImapData *idata, const char *cmdstr, int flags)",
          "132:   if (cmd_queue_full(idata))",
          "136:     const int rc = imap_exec(idata, NULL, IMAP_CMD_FAIL_OK | (flags & IMAP_CMD_POLL));",
          "142:   struct ImapCommand *cmd = cmd_new(idata);",
          "146:   if (mutt_buffer_printf(idata->cmdbuf, \"%s %s\\r\\n\", cmd->seq, cmdstr) < 0)",
          "156: static void cmd_handle_fatal(struct ImapData *idata)",
          "158:   idata->status = IMAP_FATAL;",
          "160:   if ((idata->state >= IMAP_SELECTED) && (idata->reopen & IMAP_REOPEN_ALLOW))",
          "162:     mx_fastclose_mailbox(idata->ctx);",
          "163:     mutt_socket_close(idata->conn);",
          "164:     mutt_error(_(\"Mailbox %s@%s closed\"), idata->conn->account.login,",
          "165:                idata->conn->account.host);",
          "166:     idata->state = IMAP_DISCONNECTED;",
          "169:   imap_close_connection(idata);",
          "170:   if (!idata->recovering)",
          "172:     idata->recovering = true;",
          "173:     if (imap_conn_find(&idata->conn->account, 0))",
          "175:     idata->recovering = false;",
          "187: static int cmd_start(struct ImapData *idata, const char *cmdstr, int flags)",
          "191:   if (idata->status == IMAP_FATAL)",
          "193:     cmd_handle_fatal(idata);",
          "197:   if (cmdstr && ((rc = cmd_queue(idata, cmdstr, flags)) < 0))",
          "203:   if (idata->cmdbuf->dptr == idata->cmdbuf->data)",
          "206:   rc = mutt_socket_send_d(idata->conn, idata->cmdbuf->data,",
          "208:   idata->cmdbuf->dptr = idata->cmdbuf->data;",
          "211:   if (idata->state == IMAP_IDLE)",
          "212:     idata->state = IMAP_SELECTED;",
          "",
          "[Added Lines]",
          "130: static int cmd_queue(struct ImapMboxData *mdata, const char *cmdstr, int flags)",
          "132:   if (cmd_queue_full(mdata))",
          "136:     const int rc = imap_exec(mdata, NULL, IMAP_CMD_FAIL_OK | (flags & IMAP_CMD_POLL));",
          "142:   struct ImapCommand *cmd = cmd_new(mdata);",
          "146:   if (mutt_buffer_printf(mdata->cmdbuf, \"%s %s\\r\\n\", cmd->seq, cmdstr) < 0)",
          "156: static void cmd_handle_fatal(struct ImapMboxData *mdata)",
          "158:   mdata->status = IMAP_FATAL;",
          "160:   if ((mdata->state >= IMAP_SELECTED) && (mdata->reopen & IMAP_REOPEN_ALLOW))",
          "162:     mx_fastclose_mailbox(mdata->ctx);",
          "163:     mutt_socket_close(mdata->conn);",
          "164:     mutt_error(_(\"Mailbox %s@%s closed\"), mdata->conn->account.login,",
          "165:                mdata->conn->account.host);",
          "166:     mdata->state = IMAP_DISCONNECTED;",
          "169:   imap_close_connection(mdata);",
          "170:   if (!mdata->recovering)",
          "172:     mdata->recovering = true;",
          "173:     if (imap_conn_find(&mdata->conn->account, 0))",
          "175:     mdata->recovering = false;",
          "187: static int cmd_start(struct ImapMboxData *mdata, const char *cmdstr, int flags)",
          "191:   if (mdata->status == IMAP_FATAL)",
          "193:     cmd_handle_fatal(mdata);",
          "197:   if (cmdstr && ((rc = cmd_queue(mdata, cmdstr, flags)) < 0))",
          "203:   if (mdata->cmdbuf->dptr == mdata->cmdbuf->data)",
          "206:   rc = mutt_socket_send_d(mdata->conn, mdata->cmdbuf->data,",
          "208:   mdata->cmdbuf->dptr = mdata->cmdbuf->data;",
          "211:   if (mdata->state == IMAP_IDLE)",
          "212:     mdata->state = IMAP_SELECTED;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "244: {",
          "245:   unsigned int exp_msn;",
          "246:   struct Email *e = NULL;",
          "248:   mutt_debug(2, \"Handling EXPUNGE\\n\");",
          "251:     return;",
          "254:   if (e)",
          "255:   {",
          "",
          "[Removed Lines]",
          "243: static void cmd_parse_expunge(struct ImapData *idata, const char *s)",
          "250:   if (mutt_str_atoui(s, &exp_msn) < 0 || exp_msn < 1 || exp_msn > idata->max_msn)",
          "253:   e = idata->msn_index[exp_msn - 1];",
          "",
          "[Added Lines]",
          "243: static void cmd_parse_expunge(struct ImapMboxData *mdata, const char *s)",
          "250:   if (mutt_str_atoui(s, &exp_msn) < 0 || exp_msn < 1 || exp_msn > mdata->max_msn)",
          "253:   e = mdata->msn_index[exp_msn - 1];",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "261:   }",
          "265:   {",
          "267:     if (e)",
          "268:       HEADER_DATA(e)->msn--;",
          "270:   }",
          "276: }",
          "287: {",
          "288:   bool earlier = false;",
          "289:   int rc;",
          "",
          "[Removed Lines]",
          "264:   for (unsigned int cur = exp_msn; cur < idata->max_msn; cur++)",
          "266:     e = idata->msn_index[cur];",
          "269:     idata->msn_index[cur - 1] = e;",
          "272:   idata->msn_index[idata->max_msn - 1] = NULL;",
          "273:   idata->max_msn--;",
          "275:   idata->reopen |= IMAP_EXPUNGE_PENDING;",
          "286: static void cmd_parse_vanished(struct ImapData *idata, char *s)",
          "",
          "[Added Lines]",
          "264:   for (unsigned int cur = exp_msn; cur < mdata->max_msn; cur++)",
          "266:     e = mdata->msn_index[cur];",
          "269:     mdata->msn_index[cur - 1] = e;",
          "272:   mdata->msn_index[mdata->max_msn - 1] = NULL;",
          "273:   mdata->max_msn--;",
          "275:   mdata->reopen |= IMAP_EXPUNGE_PENDING;",
          "286: static void cmd_parse_vanished(struct ImapMboxData *mdata, char *s)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "318:   while ((rc = mutt_seqset_iterator_next(iter, &uid)) == 0)",
          "319:   {",
          "321:     if (!e)",
          "322:       continue;",
          "",
          "[Removed Lines]",
          "320:     struct Email *e = mutt_hash_int_find(idata->uid_hash, uid);",
          "",
          "[Added Lines]",
          "320:     struct Email *e = mutt_hash_int_find(mdata->uid_hash, uid);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "329:     e->index = INT_MAX;",
          "330:     HEADER_DATA(e)->msn = 0;",
          "333:     {",
          "334:       mutt_debug(1, \"VANISHED: msn for UID %u is incorrect.\\n\", uid);",
          "335:       continue;",
          "336:     }",
          "338:     {",
          "339:       mutt_debug(1, \"VANISHED: msn_index for UID %u is incorrect.\\n\", uid);",
          "340:       continue;",
          "341:     }",
          "345:     if (!earlier)",
          "346:     {",
          "349:       {",
          "351:         if (e)",
          "352:           HEADER_DATA(e)->msn--;",
          "354:       }",
          "358:     }",
          "359:   }",
          "361:   if (rc < 0)",
          "362:     mutt_debug(1, \"VANISHED: illegal seqset %s\\n\", s);",
          "366:   mutt_seqset_iterator_free(&iter);",
          "367: }",
          "379: {",
          "380:   unsigned int msn, uid;",
          "381:   struct Email *e = NULL;",
          "",
          "[Removed Lines]",
          "332:     if ((exp_msn < 1) || (exp_msn > idata->max_msn))",
          "337:     if (idata->msn_index[exp_msn - 1] != e)",
          "343:     idata->msn_index[exp_msn - 1] = NULL;",
          "348:       for (unsigned int cur = exp_msn; cur < idata->max_msn; cur++)",
          "350:         e = idata->msn_index[cur];",
          "353:         idata->msn_index[cur - 1] = e;",
          "356:       idata->msn_index[idata->max_msn - 1] = NULL;",
          "357:       idata->max_msn--;",
          "364:   idata->reopen |= IMAP_EXPUNGE_PENDING;",
          "378: static void cmd_parse_fetch(struct ImapData *idata, char *s)",
          "",
          "[Added Lines]",
          "332:     if ((exp_msn < 1) || (exp_msn > mdata->max_msn))",
          "337:     if (mdata->msn_index[exp_msn - 1] != e)",
          "343:     mdata->msn_index[exp_msn - 1] = NULL;",
          "348:       for (unsigned int cur = exp_msn; cur < mdata->max_msn; cur++)",
          "350:         e = mdata->msn_index[cur];",
          "353:         mdata->msn_index[cur - 1] = e;",
          "356:       mdata->msn_index[mdata->max_msn - 1] = NULL;",
          "357:       mdata->max_msn--;",
          "364:   mdata->reopen |= IMAP_EXPUNGE_PENDING;",
          "378: static void cmd_parse_fetch(struct ImapMboxData *mdata, char *s)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "391:     return;",
          "392:   }",
          "395:   {",
          "396:     mutt_debug(3, \"Skipping FETCH response - MSN %u out of range\\n\", msn);",
          "397:     return;",
          "398:   }",
          "401:   if (!e || !e->active)",
          "402:   {",
          "403:     mutt_debug(3, \"Skipping FETCH response - MSN %u not in msn_index\\n\", msn);",
          "",
          "[Removed Lines]",
          "394:   if ((msn < 1) || (msn > idata->max_msn))",
          "400:   e = idata->msn_index[msn - 1];",
          "",
          "[Added Lines]",
          "394:   if ((msn < 1) || (msn > mdata->max_msn))",
          "400:   e = mdata->msn_index[msn - 1];",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "495:   if (flags)",
          "496:   {",
          "498:     if (server_changes)",
          "499:     {",
          "501:       if (e->changed)",
          "503:       else",
          "505:     }",
          "506:   }",
          "507: }",
          "515: {",
          "516:   mutt_debug(3, \"Handling CAPABILITY\\n\");",
          "",
          "[Removed Lines]",
          "497:     imap_set_flags(idata, e, flags, &server_changes);",
          "502:         idata->reopen |= IMAP_EXPUNGE_PENDING;",
          "504:         idata->check_status = IMAP_FLAGS_PENDING;",
          "514: static void cmd_parse_capability(struct ImapData *idata, char *s)",
          "",
          "[Added Lines]",
          "497:     imap_set_flags(mdata, e, flags, &server_changes);",
          "502:         mdata->reopen |= IMAP_EXPUNGE_PENDING;",
          "504:         mdata->check_status = IMAP_FLAGS_PENDING;",
          "514: static void cmd_parse_capability(struct ImapMboxData *mdata, char *s)",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "519:   char *bracket = strchr(s, ']');",
          "520:   if (bracket)",
          "527:   while (*s)",
          "528:   {",
          "",
          "[Removed Lines]",
          "522:   FREE(&idata->capstr);",
          "523:   idata->capstr = mutt_str_strdup(s);",
          "525:   memset(idata->capabilities, 0, sizeof(idata->capabilities));",
          "",
          "[Added Lines]",
          "522:   FREE(&mdata->capstr);",
          "523:   mdata->capstr = mutt_str_strdup(s);",
          "525:   memset(mdata->capabilities, 0, sizeof(mdata->capabilities));",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "530:     {",
          "531:       if (mutt_str_word_casecmp(Capabilities[i], s) == 0)",
          "532:       {",
          "534:         mutt_debug(4, \" Found capability \\\"%s\\\": %d\\n\", Capabilities[i], i);",
          "535:         break;",
          "536:       }",
          "",
          "[Removed Lines]",
          "533:         mutt_bit_set(idata->capabilities, i);",
          "",
          "[Added Lines]",
          "533:         mutt_bit_set(mdata->capabilities, i);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "548: {",
          "549:   struct ImapList *list = NULL;",
          "550:   struct ImapList lb;",
          "552:   unsigned int litlen;",
          "556:   else",
          "557:     list = &lb;",
          "",
          "[Removed Lines]",
          "547: static void cmd_parse_list(struct ImapData *idata, char *s)",
          "554:   if (idata->cmddata && idata->cmdtype == IMAP_CT_LIST)",
          "555:     list = idata->cmddata;",
          "",
          "[Added Lines]",
          "547: static void cmd_parse_list(struct ImapMboxData *mdata, char *s)",
          "554:   if (mdata->cmddata && mdata->cmdtype == IMAP_CT_LIST)",
          "555:     list = mdata->cmddata;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "596:   if (imap_get_literal_count(s, &litlen) == 0)",
          "597:   {",
          "599:     {",
          "601:       return;",
          "602:     }",
          "604:   }",
          "605:   else",
          "606:   {",
          "608:     list->name = s;",
          "609:   }",
          "611:   if (list->name[0] == '\\0')",
          "612:   {",
          "615:   }",
          "616: }",
          "624: {",
          "625:   char buf[STRING];",
          "626:   char errstr[STRING];",
          "",
          "[Removed Lines]",
          "598:     if (imap_cmd_step(idata) != IMAP_CMD_CONTINUE)",
          "600:       idata->status = IMAP_FATAL;",
          "603:     list->name = idata->buf;",
          "607:     imap_unmunge_mbox_name(idata, s);",
          "613:     idata->delim = list->delim;",
          "614:     mutt_debug(3, \"Root delimiter: %c\\n\", idata->delim);",
          "623: static void cmd_parse_lsub(struct ImapData *idata, char *s)",
          "",
          "[Added Lines]",
          "598:     if (imap_cmd_step(mdata) != IMAP_CMD_CONTINUE)",
          "600:       mdata->status = IMAP_FATAL;",
          "603:     list->name = mdata->buf;",
          "607:     imap_unmunge_mbox_name(mdata, s);",
          "613:     mdata->delim = list->delim;",
          "614:     mutt_debug(3, \"Root delimiter: %c\\n\", mdata->delim);",
          "623: static void cmd_parse_lsub(struct ImapMboxData *mdata, char *s)",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "628:   struct Url url;",
          "629:   struct ImapList list;",
          "632:   {",
          "635:     return;",
          "636:   }",
          "638:   if (!ImapCheckSubscribed)",
          "639:     return;",
          "646:   if (!list.name || list.noselect)",
          "647:     return;",
          "",
          "[Removed Lines]",
          "631:   if (idata->cmddata && idata->cmdtype == IMAP_CT_LIST)",
          "634:     cmd_parse_list(idata, s);",
          "641:   idata->cmdtype = IMAP_CT_LIST;",
          "642:   idata->cmddata = &list;",
          "643:   cmd_parse_list(idata, s);",
          "644:   idata->cmddata = NULL;",
          "",
          "[Added Lines]",
          "631:   if (mdata->cmddata && mdata->cmdtype == IMAP_CT_LIST)",
          "634:     cmd_parse_list(mdata, s);",
          "641:   mdata->cmdtype = IMAP_CT_LIST;",
          "642:   mdata->cmddata = &list;",
          "643:   cmd_parse_list(mdata, s);",
          "644:   mdata->cmddata = NULL;",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "649:   mutt_debug(3, \"Subscribing to %s\\n\", list.name);",
          "651:   mutt_str_strfcpy(buf, \"mailboxes \\\"\", sizeof(buf));",
          "654:   imap_quote_string(errstr, sizeof(errstr), list.name, true);",
          "655:   url.path = errstr + 1;",
          "",
          "[Removed Lines]",
          "652:   mutt_account_tourl(&idata->conn->account, &url);",
          "",
          "[Added Lines]",
          "652:   mutt_account_tourl(&mdata->conn->account, &url);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "676: {",
          "677:   mutt_debug(2, \"Handling MYRIGHTS\\n\");",
          "",
          "[Removed Lines]",
          "675: static void cmd_parse_myrights(struct ImapData *idata, const char *s)",
          "",
          "[Added Lines]",
          "675: static void cmd_parse_myrights(struct ImapMboxData *mdata, const char *s)",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "680:   s = imap_next_word((char *) s);",
          "685:   while (*s && !isspace((unsigned char) *s))",
          "686:   {",
          "687:     switch (*s)",
          "688:     {",
          "689:       case 'a':",
          "691:         break;",
          "692:       case 'e':",
          "694:         break;",
          "695:       case 'i':",
          "697:         break;",
          "698:       case 'k':",
          "700:         break;",
          "701:       case 'l':",
          "703:         break;",
          "704:       case 'p':",
          "706:         break;",
          "707:       case 'r':",
          "709:         break;",
          "710:       case 's':",
          "712:         break;",
          "713:       case 't':",
          "715:         break;",
          "716:       case 'w':",
          "718:         break;",
          "719:       case 'x':",
          "721:         break;",
          "724:       case 'c':",
          "727:         break;",
          "728:       case 'd':",
          "731:         break;",
          "732:       default:",
          "733:         mutt_debug(1, \"Unknown right: %c\\n\", *s);",
          "",
          "[Removed Lines]",
          "683:   memset(idata->ctx->mailbox->rights, 0, sizeof(idata->ctx->mailbox->rights));",
          "690:         mutt_bit_set(idata->ctx->mailbox->rights, MUTT_ACL_ADMIN);",
          "693:         mutt_bit_set(idata->ctx->mailbox->rights, MUTT_ACL_EXPUNGE);",
          "696:         mutt_bit_set(idata->ctx->mailbox->rights, MUTT_ACL_INSERT);",
          "699:         mutt_bit_set(idata->ctx->mailbox->rights, MUTT_ACL_CREATE);",
          "702:         mutt_bit_set(idata->ctx->mailbox->rights, MUTT_ACL_LOOKUP);",
          "705:         mutt_bit_set(idata->ctx->mailbox->rights, MUTT_ACL_POST);",
          "708:         mutt_bit_set(idata->ctx->mailbox->rights, MUTT_ACL_READ);",
          "711:         mutt_bit_set(idata->ctx->mailbox->rights, MUTT_ACL_SEEN);",
          "714:         mutt_bit_set(idata->ctx->mailbox->rights, MUTT_ACL_DELETE);",
          "717:         mutt_bit_set(idata->ctx->mailbox->rights, MUTT_ACL_WRITE);",
          "720:         mutt_bit_set(idata->ctx->mailbox->rights, MUTT_ACL_DELMX);",
          "725:         mutt_bit_set(idata->ctx->mailbox->rights, MUTT_ACL_CREATE);",
          "726:         mutt_bit_set(idata->ctx->mailbox->rights, MUTT_ACL_DELMX);",
          "729:         mutt_bit_set(idata->ctx->mailbox->rights, MUTT_ACL_DELETE);",
          "730:         mutt_bit_set(idata->ctx->mailbox->rights, MUTT_ACL_EXPUNGE);",
          "",
          "[Added Lines]",
          "683:   memset(mdata->ctx->mailbox->rights, 0, sizeof(mdata->ctx->mailbox->rights));",
          "690:         mutt_bit_set(mdata->ctx->mailbox->rights, MUTT_ACL_ADMIN);",
          "693:         mutt_bit_set(mdata->ctx->mailbox->rights, MUTT_ACL_EXPUNGE);",
          "696:         mutt_bit_set(mdata->ctx->mailbox->rights, MUTT_ACL_INSERT);",
          "699:         mutt_bit_set(mdata->ctx->mailbox->rights, MUTT_ACL_CREATE);",
          "702:         mutt_bit_set(mdata->ctx->mailbox->rights, MUTT_ACL_LOOKUP);",
          "705:         mutt_bit_set(mdata->ctx->mailbox->rights, MUTT_ACL_POST);",
          "708:         mutt_bit_set(mdata->ctx->mailbox->rights, MUTT_ACL_READ);",
          "711:         mutt_bit_set(mdata->ctx->mailbox->rights, MUTT_ACL_SEEN);",
          "714:         mutt_bit_set(mdata->ctx->mailbox->rights, MUTT_ACL_DELETE);",
          "717:         mutt_bit_set(mdata->ctx->mailbox->rights, MUTT_ACL_WRITE);",
          "720:         mutt_bit_set(mdata->ctx->mailbox->rights, MUTT_ACL_DELMX);",
          "725:         mutt_bit_set(mdata->ctx->mailbox->rights, MUTT_ACL_CREATE);",
          "726:         mutt_bit_set(mdata->ctx->mailbox->rights, MUTT_ACL_DELMX);",
          "729:         mutt_bit_set(mdata->ctx->mailbox->rights, MUTT_ACL_DELETE);",
          "730:         mutt_bit_set(mdata->ctx->mailbox->rights, MUTT_ACL_EXPUNGE);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "745: {",
          "746:   unsigned int uid;",
          "747:   struct Email *e = NULL;",
          "",
          "[Removed Lines]",
          "744: static void cmd_parse_search(struct ImapData *idata, const char *s)",
          "",
          "[Added Lines]",
          "744: static void cmd_parse_search(struct ImapMboxData *mdata, const char *s)",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "752:   {",
          "753:     if (mutt_str_atoui(s, &uid) < 0)",
          "754:       continue;",
          "756:     if (e)",
          "757:       e->matched = true;",
          "758:   }",
          "",
          "[Removed Lines]",
          "755:     e = mutt_hash_int_find(idata->uid_hash, uid);",
          "",
          "[Added Lines]",
          "755:     e = mutt_hash_int_find(mdata->uid_hash, uid);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "770: {",
          "771:   char *value = NULL;",
          "772:   struct ImapMbox mx;",
          "",
          "[Removed Lines]",
          "769: static void cmd_parse_status(struct ImapData *idata, char *s)",
          "",
          "[Added Lines]",
          "769: static void cmd_parse_status(struct ImapMboxData *mdata, char *s)",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "782:   if (imap_get_literal_count(mailbox, &litlen) == 0)",
          "783:   {",
          "785:     {",
          "787:       return;",
          "788:     }",
          "791:     {",
          "792:       mutt_debug(1, \"Error parsing STATUS mailbox\\n\");",
          "793:       return;",
          "794:     }",
          "797:     s = mailbox + litlen;",
          "799:     s++;",
          "",
          "[Removed Lines]",
          "784:     if (imap_cmd_step(idata) != IMAP_CMD_CONTINUE)",
          "786:       idata->status = IMAP_FATAL;",
          "790:     if (strlen(idata->buf) < litlen)",
          "796:     mailbox = idata->buf;",
          "",
          "[Added Lines]",
          "784:     if (imap_cmd_step(mdata) != IMAP_CMD_CONTINUE)",
          "786:       mdata->status = IMAP_FATAL;",
          "790:     if (strlen(mdata->buf) < litlen)",
          "796:     mailbox = mdata->buf;",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "803:   {",
          "804:     s = imap_next_word(mailbox);",
          "807:   }",
          "810:   olduv = status->uidvalidity;",
          "811:   oldun = status->uidnext;",
          "",
          "[Removed Lines]",
          "806:     imap_unmunge_mbox_name(idata, mailbox);",
          "809:   status = imap_mboxcache_get(idata, mailbox, 1);",
          "",
          "[Added Lines]",
          "806:     imap_unmunge_mbox_name(mdata, mailbox);",
          "809:   status = imap_mboxcache_get(mdata, mailbox, 1);",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "851:              status->messages, status->recent, status->unseen);",
          "855:   {",
          "857:     return;",
          "858:   }",
          "",
          "[Removed Lines]",
          "854:   if (idata->cmddata && idata->cmdtype == IMAP_CT_STATUS)",
          "856:     memcpy(idata->cmddata, status, sizeof(struct ImapStatus));",
          "",
          "[Added Lines]",
          "854:   if (mdata->cmddata && mdata->cmdtype == IMAP_CT_STATUS)",
          "856:     memcpy(mdata->cmddata, status, sizeof(struct ImapStatus));",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "872:       continue;",
          "873:     }",
          "876:     {",
          "877:       if (mx.mbox)",
          "878:       {",
          "879:         value = mutt_str_strdup(mx.mbox);",
          "881:         FREE(&mx.mbox);",
          "882:       }",
          "883:       else",
          "",
          "[Removed Lines]",
          "875:     if (imap_account_match(&idata->conn->account, &mx.account))",
          "880:         imap_fix_path(idata, mx.mbox, value, mutt_str_strlen(value) + 1);",
          "",
          "[Added Lines]",
          "875:     if (imap_account_match(&mdata->conn->account, &mx.account))",
          "880:         imap_fix_path(mdata, mx.mbox, value, mutt_str_strlen(value) + 1);",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "945: {",
          "946:   mutt_debug(2, \"Handling ENABLED\\n\");",
          "",
          "[Removed Lines]",
          "944: static void cmd_parse_enabled(struct ImapData *idata, const char *s)",
          "",
          "[Added Lines]",
          "944: static void cmd_parse_enabled(struct ImapMboxData *mdata, const char *s)",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "950:     if ((mutt_str_strncasecmp(s, \"UTF8=ACCEPT\", 11) == 0) ||",
          "951:         (mutt_str_strncasecmp(s, \"UTF8=ONLY\", 9) == 0))",
          "952:     {",
          "954:     }",
          "955:     if (mutt_str_strncasecmp(s, \"QRESYNC\", 7) == 0)",
          "957:   }",
          "958: }",
          "967: {",
          "968:   unsigned int count = 0;",
          "970:   char *pn = imap_next_word(s);",
          "973:   {",
          "974:     pn = s;",
          "975:     s = imap_next_word(s);",
          "",
          "[Removed Lines]",
          "953:       idata->unicode = 1;",
          "956:       idata->qresync = 1;",
          "966: static int cmd_handle_untagged(struct ImapData *idata)",
          "969:   char *s = imap_next_word(idata->buf);",
          "972:   if ((idata->state >= IMAP_SELECTED) && isdigit((unsigned char) *s))",
          "",
          "[Added Lines]",
          "953:       mdata->unicode = 1;",
          "956:       mdata->qresync = 1;",
          "966: static int cmd_handle_untagged(struct ImapMboxData *mdata)",
          "969:   char *s = imap_next_word(mdata->buf);",
          "972:   if ((mdata->state >= IMAP_SELECTED) && isdigit((unsigned char) *s))",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "987:         mutt_debug(1, \"Malformed EXISTS: '%s'\\n\", pn);",
          "988:       }",
          "991:       {",
          "",
          "[Removed Lines]",
          "990:       if (!(idata->reopen & IMAP_EXPUNGE_PENDING) && count < idata->max_msn)",
          "",
          "[Added Lines]",
          "990:       if (!(mdata->reopen & IMAP_EXPUNGE_PENDING) && count < mdata->max_msn)",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "996:       }",
          "1000:         mutt_debug(3, \"superfluous EXISTS message.\\n\");",
          "1001:       else",
          "1002:       {",
          "1004:         {",
          "1007:         }",
          "1009:       }",
          "1010:     }",
          "1012:     else if (mutt_str_strncasecmp(\"EXPUNGE\", s, 7) == 0)",
          "1014:     else if (mutt_str_strncasecmp(\"FETCH\", s, 5) == 0)",
          "1016:   }",
          "1019:   else if (mutt_str_strncasecmp(\"CAPABILITY\", s, 10) == 0)",
          "1021:   else if (mutt_str_strncasecmp(\"OK [CAPABILITY\", s, 14) == 0)",
          "1023:   else if (mutt_str_strncasecmp(\"OK [CAPABILITY\", pn, 14) == 0)",
          "1025:   else if (mutt_str_strncasecmp(\"LIST\", s, 4) == 0)",
          "1027:   else if (mutt_str_strncasecmp(\"LSUB\", s, 4) == 0)",
          "1029:   else if (mutt_str_strncasecmp(\"MYRIGHTS\", s, 8) == 0)",
          "1031:   else if (mutt_str_strncasecmp(\"SEARCH\", s, 6) == 0)",
          "1033:   else if (mutt_str_strncasecmp(\"STATUS\", s, 6) == 0)",
          "1035:   else if (mutt_str_strncasecmp(\"ENABLED\", s, 7) == 0)",
          "1037:   else if (mutt_str_strncasecmp(\"BYE\", s, 3) == 0)",
          "1038:   {",
          "1039:     mutt_debug(2, \"Handling BYE\\n\");",
          "1043:       return 0;",
          "1046:     s += 3;",
          "1047:     SKIPWS(s);",
          "1048:     mutt_error(\"%s\", s);",
          "1051:     return -1;",
          "1052:   }",
          "",
          "[Removed Lines]",
          "999:       else if (count == idata->max_msn)",
          "1003:         if (!(idata->reopen & IMAP_EXPUNGE_PENDING))",
          "1005:           mutt_debug(2, \"New mail in %s - %d messages total.\\n\", idata->mbox_name, count);",
          "1006:           idata->reopen |= IMAP_NEWMAIL_PENDING;",
          "1008:         idata->new_mail_count = count;",
          "1013:       cmd_parse_expunge(idata, pn);",
          "1015:       cmd_parse_fetch(idata, pn);",
          "1017:   else if ((idata->state >= IMAP_SELECTED) && (mutt_str_strncasecmp(\"VANISHED\", s, 8) == 0))",
          "1018:     cmd_parse_vanished(idata, pn);",
          "1020:     cmd_parse_capability(idata, s);",
          "1022:     cmd_parse_capability(idata, pn);",
          "1024:     cmd_parse_capability(idata, imap_next_word(pn));",
          "1026:     cmd_parse_list(idata, s);",
          "1028:     cmd_parse_lsub(idata, s);",
          "1030:     cmd_parse_myrights(idata, s);",
          "1032:     cmd_parse_search(idata, s);",
          "1034:     cmd_parse_status(idata, s);",
          "1036:     cmd_parse_enabled(idata, s);",
          "1042:     if (idata->status == IMAP_BYE)",
          "1049:     cmd_handle_fatal(idata);",
          "",
          "[Added Lines]",
          "999:       else if (count == mdata->max_msn)",
          "1003:         if (!(mdata->reopen & IMAP_EXPUNGE_PENDING))",
          "1005:           mutt_debug(2, \"New mail in %s - %d messages total.\\n\", mdata->mbox_name, count);",
          "1006:           mdata->reopen |= IMAP_NEWMAIL_PENDING;",
          "1008:         mdata->new_mail_count = count;",
          "1013:       cmd_parse_expunge(mdata, pn);",
          "1015:       cmd_parse_fetch(mdata, pn);",
          "1017:   else if ((mdata->state >= IMAP_SELECTED) && (mutt_str_strncasecmp(\"VANISHED\", s, 8) == 0))",
          "1018:     cmd_parse_vanished(mdata, pn);",
          "1020:     cmd_parse_capability(mdata, s);",
          "1022:     cmd_parse_capability(mdata, pn);",
          "1024:     cmd_parse_capability(mdata, imap_next_word(pn));",
          "1026:     cmd_parse_list(mdata, s);",
          "1028:     cmd_parse_lsub(mdata, s);",
          "1030:     cmd_parse_myrights(mdata, s);",
          "1032:     cmd_parse_search(mdata, s);",
          "1034:     cmd_parse_status(mdata, s);",
          "1036:     cmd_parse_enabled(mdata, s);",
          "1042:     if (mdata->status == IMAP_BYE)",
          "1049:     cmd_handle_fatal(mdata);",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "1074: {",
          "1076: }",
          "1088: {",
          "1089:   size_t len = 0;",
          "1090:   int c;",
          "",
          "[Removed Lines]",
          "1073: int imap_cmd_start(struct ImapData *idata, const char *cmdstr)",
          "1075:   return cmd_start(idata, cmdstr, 0);",
          "1087: int imap_cmd_step(struct ImapData *idata)",
          "",
          "[Added Lines]",
          "1073: int imap_cmd_start(struct ImapMboxData *mdata, const char *cmdstr)",
          "1075:   return cmd_start(mdata, cmdstr, 0);",
          "1087: int imap_cmd_step(struct ImapMboxData *mdata)",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "1092:   int stillrunning = 0;",
          "1093:   struct ImapCommand *cmd = NULL;",
          "1096:   {",
          "1098:     return IMAP_CMD_BAD;",
          "1099:   }",
          "",
          "[Removed Lines]",
          "1095:   if (idata->status == IMAP_FATAL)",
          "1097:     cmd_handle_fatal(idata);",
          "",
          "[Added Lines]",
          "1095:   if (mdata->status == IMAP_FATAL)",
          "1097:     cmd_handle_fatal(mdata);",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "1103:   do",
          "1104:   {",
          "1106:     {",
          "1110:     }",
          "1113:     if (len)",
          "1114:       len--;",
          "1116:     if (c <= 0)",
          "1117:     {",
          "1118:       mutt_debug(1, \"Error reading server response.\\n\");",
          "1120:       return IMAP_CMD_BAD;",
          "1121:     }",
          "",
          "[Removed Lines]",
          "1105:     if (len == idata->blen)",
          "1107:       mutt_mem_realloc(&idata->buf, idata->blen + IMAP_CMD_BUFSIZE);",
          "1108:       idata->blen = idata->blen + IMAP_CMD_BUFSIZE;",
          "1109:       mutt_debug(3, \"grew buffer to %u bytes\\n\", idata->blen);",
          "1115:     c = mutt_socket_readln(idata->buf + len, idata->blen - len, idata->conn);",
          "1119:       cmd_handle_fatal(idata);",
          "",
          "[Added Lines]",
          "1105:     if (len == mdata->blen)",
          "1107:       mutt_mem_realloc(&mdata->buf, mdata->blen + IMAP_CMD_BUFSIZE);",
          "1108:       mdata->blen = mdata->blen + IMAP_CMD_BUFSIZE;",
          "1109:       mutt_debug(3, \"grew buffer to %u bytes\\n\", mdata->blen);",
          "1115:     c = mutt_socket_readln(mdata->buf + len, mdata->blen - len, mdata->conn);",
          "1119:       cmd_handle_fatal(mdata);",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "1132:   {",
          "1136:   }",
          "1144:   {",
          "1145:     return IMAP_CMD_BAD;",
          "1146:   }",
          "1150:     return IMAP_CMD_RESPOND;",
          "",
          "[Removed Lines]",
          "1128:   while (len == idata->blen);",
          "1131:   if ((idata->blen > IMAP_CMD_BUFSIZE) && (len <= IMAP_CMD_BUFSIZE))",
          "1133:     mutt_mem_realloc(&idata->buf, IMAP_CMD_BUFSIZE);",
          "1134:     idata->blen = IMAP_CMD_BUFSIZE;",
          "1135:     mutt_debug(3, \"shrank buffer to %u bytes\\n\", idata->blen);",
          "1138:   idata->lastread = time(NULL);",
          "1141:   if (((mutt_str_strncmp(idata->buf, \"* \", 2) == 0) ||",
          "1142:        (mutt_str_strncmp(imap_next_word(idata->buf), \"OK [\", 4) == 0)) &&",
          "1143:       cmd_handle_untagged(idata))",
          "1149:   if (idata->buf[0] == '+')",
          "",
          "[Added Lines]",
          "1128:   while (len == mdata->blen);",
          "1131:   if ((mdata->blen > IMAP_CMD_BUFSIZE) && (len <= IMAP_CMD_BUFSIZE))",
          "1133:     mutt_mem_realloc(&mdata->buf, IMAP_CMD_BUFSIZE);",
          "1134:     mdata->blen = IMAP_CMD_BUFSIZE;",
          "1135:     mutt_debug(3, \"shrank buffer to %u bytes\\n\", mdata->blen);",
          "1138:   mdata->lastread = time(NULL);",
          "1141:   if (((mutt_str_strncmp(mdata->buf, \"* \", 2) == 0) ||",
          "1142:        (mutt_str_strncmp(imap_next_word(mdata->buf), \"OK [\", 4) == 0)) &&",
          "1143:       cmd_handle_untagged(mdata))",
          "1149:   if (mdata->buf[0] == '+')",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "1162:   rc = IMAP_CMD_OK;",
          "1164:   do",
          "1165:   {",
          "1167:     if (cmd->state == IMAP_CMD_NEW)",
          "1168:     {",
          "1170:       {",
          "1171:         if (!stillrunning)",
          "1172:         {",
          "1175:         }",
          "1179:         rc = cmd->state;",
          "",
          "[Removed Lines]",
          "1163:   c = idata->lastcmd;",
          "1166:     cmd = &idata->cmds[c];",
          "1169:       if (mutt_str_strncmp(idata->buf, cmd->seq, SEQLEN) == 0)",
          "1174:           idata->lastcmd = (idata->lastcmd + 1) % idata->cmdslots;",
          "1176:         cmd->state = cmd_status(idata->buf);",
          "",
          "[Added Lines]",
          "1163:   c = mdata->lastcmd;",
          "1166:     cmd = &mdata->cmds[c];",
          "1169:       if (mutt_str_strncmp(mdata->buf, cmd->seq, SEQLEN) == 0)",
          "1174:           mdata->lastcmd = (mdata->lastcmd + 1) % mdata->cmdslots;",
          "1176:         cmd->state = cmd_status(mdata->buf);",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "1182:         stillrunning++;",
          "1183:     }",
          "1188:   if (stillrunning)",
          "1189:     rc = IMAP_CMD_CONTINUE;",
          "1190:   else",
          "1191:   {",
          "1192:     mutt_debug(3, \"IMAP queue drained\\n\");",
          "1194:   }",
          "1196:   return rc;",
          "",
          "[Removed Lines]",
          "1185:     c = (c + 1) % idata->cmdslots;",
          "1186:   } while (c != idata->nextcmd);",
          "1193:     imap_cmd_finish(idata);",
          "",
          "[Added Lines]",
          "1185:     c = (c + 1) % mdata->cmdslots;",
          "1186:   } while (c != mdata->nextcmd);",
          "1193:     imap_cmd_finish(mdata);",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "1217: {",
          "1218:   static const char *notrailer = \"\";",
          "1221:   if (!s)",
          "1222:   {",
          "",
          "[Removed Lines]",
          "1216: const char *imap_cmd_trailer(struct ImapData *idata)",
          "1219:   const char *s = idata->buf;",
          "",
          "[Added Lines]",
          "1216: const char *imap_cmd_trailer(struct ImapMboxData *mdata)",
          "1219:   const char *s = mdata->buf;",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "1229:              (mutt_str_strncasecmp(s, \"NO\", 2) != 0) &&",
          "1230:              (mutt_str_strncasecmp(s, \"BAD\", 3) != 0)))",
          "1231:   {",
          "1233:     return notrailer;",
          "1234:   }",
          "",
          "[Removed Lines]",
          "1232:     mutt_debug(2, \"not a command completion: %s\\n\", idata->buf);",
          "",
          "[Added Lines]",
          "1232:     mutt_debug(2, \"not a command completion: %s\\n\", mdata->buf);",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "1262: {",
          "1263:   int rc;",
          "1266:   if (rc < 0)",
          "1267:   {",
          "1269:     return -1;",
          "1270:   }",
          "",
          "[Removed Lines]",
          "1261: int imap_exec(struct ImapData *idata, const char *cmdstr, int flags)",
          "1265:   rc = cmd_start(idata, cmdstr, flags);",
          "1268:     cmd_handle_fatal(idata);",
          "",
          "[Added Lines]",
          "1261: int imap_exec(struct ImapMboxData *mdata, const char *cmdstr, int flags)",
          "1265:   rc = cmd_start(mdata, cmdstr, flags);",
          "1268:     cmd_handle_fatal(mdata);",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "1273:     return 0;",
          "1275:   if ((flags & IMAP_CMD_POLL) && (ImapPollTimeout > 0) &&",
          "1277:   {",
          "1280:     return -1;",
          "1281:   }",
          "1284:   mutt_sig_allow_interrupt(1);",
          "1285:   do",
          "1287:   while (rc == IMAP_CMD_CONTINUE);",
          "1288:   mutt_sig_allow_interrupt(0);",
          "",
          "[Removed Lines]",
          "1276:       (mutt_socket_poll(idata->conn, ImapPollTimeout)) == 0)",
          "1278:     mutt_error(_(\"Connection to %s timed out\"), idata->conn->account.host);",
          "1279:     cmd_handle_fatal(idata);",
          "1286:     rc = imap_cmd_step(idata);",
          "",
          "[Added Lines]",
          "1276:       (mutt_socket_poll(mdata->conn, ImapPollTimeout)) == 0)",
          "1278:     mutt_error(_(\"Connection to %s timed out\"), mdata->conn->account.host);",
          "1279:     cmd_handle_fatal(mdata);",
          "1286:     rc = imap_cmd_step(mdata);",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "1293:   if (rc != IMAP_CMD_OK)",
          "1294:   {",
          "1296:       return -2;",
          "1299:     return -1;",
          "1300:   }",
          "",
          "[Removed Lines]",
          "1295:     if ((flags & IMAP_CMD_FAIL_OK) && idata->status != IMAP_FATAL)",
          "1298:     mutt_debug(1, \"command failed: %s\\n\", idata->buf);",
          "",
          "[Added Lines]",
          "1295:     if ((flags & IMAP_CMD_FAIL_OK) && mdata->status != IMAP_FATAL)",
          "1298:     mutt_debug(1, \"command failed: %s\\n\", mdata->buf);",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "1315: {",
          "1317:   {",
          "1319:     return;",
          "1320:   }",
          "1323:     return;",
          "1326:   {",
          "1331:     {",
          "1333:       mutt_debug(2, \"Fetching new mail\\n\");",
          "1338:     }",
          "1340:     {",
          "1341:       mutt_debug(2, \"Expunging mailbox\\n\");",
          "1347:           ~(IMAP_EXPUNGE_PENDING | IMAP_NEWMAIL_PENDING | IMAP_EXPUNGE_EXPECTED);",
          "1348:     }",
          "1349:   }",
          "1352: }",
          "1361: {",
          "1362:   int rc;",
          "1365:   {",
          "1367:     return -1;",
          "1368:   }",
          "1371:   {",
          "1374:     return -1;",
          "1375:   }",
          "1377:   do",
          "1379:   while (rc == IMAP_CMD_CONTINUE);",
          "1381:   if (rc == IMAP_CMD_RESPOND)",
          "1382:   {",
          "1387:     rc = IMAP_CMD_OK;",
          "1388:   }",
          "1389:   if (rc != IMAP_CMD_OK)",
          "",
          "[Removed Lines]",
          "1314: void imap_cmd_finish(struct ImapData *idata)",
          "1316:   if (idata->status == IMAP_FATAL)",
          "1318:     cmd_handle_fatal(idata);",
          "1322:   if (!(idata->state >= IMAP_SELECTED) || idata->ctx->mailbox->closing)",
          "1325:   if (idata->reopen & IMAP_REOPEN_ALLOW)",
          "1327:     unsigned int count = idata->new_mail_count;",
          "1329:     if (!(idata->reopen & IMAP_EXPUNGE_PENDING) &&",
          "1330:         (idata->reopen & IMAP_NEWMAIL_PENDING) && count > idata->max_msn)",
          "1336:       idata->check_status = IMAP_NEWMAIL_PENDING;",
          "1337:       imap_read_headers(idata, idata->max_msn + 1, count, false);",
          "1339:     else if (idata->reopen & IMAP_EXPUNGE_PENDING)",
          "1342:       imap_expunge_mailbox(idata);",
          "1344:       if ((idata->reopen & IMAP_EXPUNGE_PENDING) && !(idata->reopen & IMAP_EXPUNGE_EXPECTED))",
          "1345:         idata->check_status = IMAP_EXPUNGE_PENDING;",
          "1346:       idata->reopen &=",
          "1351:   idata->status = false;",
          "1360: int imap_cmd_idle(struct ImapData *idata)",
          "1364:   if (cmd_start(idata, \"IDLE\", IMAP_CMD_POLL) < 0)",
          "1366:     cmd_handle_fatal(idata);",
          "1370:   if ((ImapPollTimeout > 0) && (mutt_socket_poll(idata->conn, ImapPollTimeout)) == 0)",
          "1372:     mutt_error(_(\"Connection to %s timed out\"), idata->conn->account.host);",
          "1373:     cmd_handle_fatal(idata);",
          "1378:     rc = imap_cmd_step(idata);",
          "1384:     idata->state = IMAP_IDLE;",
          "1386:     mutt_buffer_printf(idata->cmdbuf, \"DONE\\r\\n\");",
          "",
          "[Added Lines]",
          "1314: void imap_cmd_finish(struct ImapMboxData *mdata)",
          "1316:   if (mdata->status == IMAP_FATAL)",
          "1318:     cmd_handle_fatal(mdata);",
          "1322:   if (!(mdata->state >= IMAP_SELECTED) || mdata->ctx->mailbox->closing)",
          "1325:   if (mdata->reopen & IMAP_REOPEN_ALLOW)",
          "1327:     unsigned int count = mdata->new_mail_count;",
          "1329:     if (!(mdata->reopen & IMAP_EXPUNGE_PENDING) &&",
          "1330:         (mdata->reopen & IMAP_NEWMAIL_PENDING) && count > mdata->max_msn)",
          "1336:       mdata->check_status = IMAP_NEWMAIL_PENDING;",
          "1337:       imap_read_headers(mdata, mdata->max_msn + 1, count, false);",
          "1339:     else if (mdata->reopen & IMAP_EXPUNGE_PENDING)",
          "1342:       imap_expunge_mailbox(mdata);",
          "1344:       if ((mdata->reopen & IMAP_EXPUNGE_PENDING) && !(mdata->reopen & IMAP_EXPUNGE_EXPECTED))",
          "1345:         mdata->check_status = IMAP_EXPUNGE_PENDING;",
          "1346:       mdata->reopen &=",
          "1351:   mdata->status = false;",
          "1360: int imap_cmd_idle(struct ImapMboxData *mdata)",
          "1364:   if (cmd_start(mdata, \"IDLE\", IMAP_CMD_POLL) < 0)",
          "1366:     cmd_handle_fatal(mdata);",
          "1370:   if ((ImapPollTimeout > 0) && (mutt_socket_poll(mdata->conn, ImapPollTimeout)) == 0)",
          "1372:     mutt_error(_(\"Connection to %s timed out\"), mdata->conn->account.host);",
          "1373:     cmd_handle_fatal(mdata);",
          "1378:     rc = imap_cmd_step(mdata);",
          "1384:     mdata->state = IMAP_IDLE;",
          "1386:     mutt_buffer_printf(mdata->cmdbuf, \"DONE\\r\\n\");",
          "",
          "---------------"
        ],
        "imap/imap.c||imap/imap.c": [
          "File: imap/imap.c -> imap/imap.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "78: {",
          "80:   {",
          "82:     return -1;",
          "83:   }",
          "87:   {",
          "88:     mutt_error(",
          "89:         _(\"This IMAP server is ancient. NeoMutt does not work with it.\"));",
          "",
          "[Removed Lines]",
          "77: static int check_capabilities(struct ImapData *idata)",
          "79:   if (imap_exec(idata, \"CAPABILITY\", 0) != 0)",
          "81:     imap_error(\"check_capabilities\", idata->buf);",
          "85:   if (!(mutt_bit_isset(idata->capabilities, IMAP4) ||",
          "86:         mutt_bit_isset(idata->capabilities, IMAP4REV1)))",
          "",
          "[Added Lines]",
          "77: static int check_capabilities(struct ImapMboxData *mdata)",
          "79:   if (imap_exec(mdata, \"CAPABILITY\", 0) != 0)",
          "81:     imap_error(\"check_capabilities\", mdata->buf);",
          "85:   if (!(mutt_bit_isset(mdata->capabilities, IMAP4) ||",
          "86:         mutt_bit_isset(mdata->capabilities, IMAP4REV1)))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "160:                      const char *str, char *flags, size_t flsize)",
          "161: {",
          "164:       mutt_str_strcat(flags, flsize, str);",
          "165: }",
          "",
          "[Removed Lines]",
          "159: static void set_flag(struct ImapData *idata, int aclbit, int flag,",
          "162:   if (mutt_bit_isset(idata->ctx->mailbox->rights, aclbit))",
          "163:     if (flag && imap_has_flag(&idata->flags, str))",
          "",
          "[Added Lines]",
          "159: static void set_flag(struct ImapMboxData *mdata, int aclbit, int flag,",
          "162:   if (mutt_bit_isset(mdata->ctx->mailbox->rights, aclbit))",
          "163:     if (flag && imap_has_flag(&mdata->flags, str))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "181:                         bool changed, bool invert, int *pos)",
          "182: {",
          "185:   int n;",
          "186:   bool started = false;",
          "190:        n++)",
          "191:   {",
          "",
          "[Removed Lines]",
          "180: static int make_msg_set(struct ImapData *idata, struct Buffer *buf, int flag,",
          "187:   struct Email **emails = idata->ctx->mailbox->hdrs;",
          "189:   for (n = *pos; n < idata->ctx->mailbox->msg_count && buf->dptr - buf->data < IMAP_MAX_CMDLEN;",
          "",
          "[Added Lines]",
          "180: static int make_msg_set(struct ImapMboxData *mdata, struct Buffer *buf, int flag,",
          "187:   struct Email **emails = mdata->ctx->mailbox->hdrs;",
          "189:   for (n = *pos; n < mdata->ctx->mailbox->msg_count && buf->dptr - buf->data < IMAP_MAX_CMDLEN;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "241:           mutt_buffer_printf(buf, \",%u\", HEADER_DATA(emails[n])->uid);",
          "242:       }",
          "245:         mutt_buffer_printf(buf, \":%u\", HEADER_DATA(emails[n])->uid);",
          "246:     }",
          "250:     {",
          "251:       if (HEADER_DATA(emails[n - 1])->uid > setstart)",
          "252:         mutt_buffer_printf(buf, \":%u\", HEADER_DATA(emails[n - 1])->uid);",
          "",
          "[Removed Lines]",
          "244:       else if (n == idata->ctx->mailbox->msg_count - 1)",
          "249:     else if (setstart && (emails[n]->active || n == idata->ctx->mailbox->msg_count - 1))",
          "",
          "[Added Lines]",
          "244:       else if (n == mdata->ctx->mailbox->msg_count - 1)",
          "249:     else if (setstart && (emails[n]->active || n == mdata->ctx->mailbox->msg_count - 1))",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "270: static bool compare_flags_for_copy(struct Email *e)",
          "271: {",
          "275:     return true;",
          "277:     return true;",
          "279:     return true;",
          "281:     return true;",
          "283:   return false;",
          "",
          "[Removed Lines]",
          "272:   struct ImapHeaderData *hd = e->data;",
          "274:   if (e->read != hd->read)",
          "276:   if (e->old != hd->old)",
          "278:   if (e->flagged != hd->flagged)",
          "280:   if (e->replied != hd->replied)",
          "",
          "[Added Lines]",
          "272:   struct ImapEmailData *edata = e->data;",
          "274:   if (e->read != edata->read)",
          "276:   if (e->old != edata->old)",
          "278:   if (e->flagged != edata->flagged)",
          "280:   if (e->replied != edata->replied)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "296: {",
          "297:   int count = 0;",
          "298:   int rc;",
          "299:   char buf[LONG_STRING];",
          "302:     return -1;",
          "305:     return 0;",
          "308:     return 0;",
          "310:   snprintf(buf, sizeof(buf), \"+FLAGS.SILENT (%s)\", name);",
          "312:   if (rc < 0)",
          "313:     return rc;",
          "314:   count += rc;",
          "316:   buf[0] = '-';",
          "318:   if (rc < 0)",
          "319:     return rc;",
          "320:   count += rc;",
          "",
          "[Removed Lines]",
          "295: static int sync_helper(struct ImapData *idata, int right, int flag, const char *name)",
          "301:   if (!idata->ctx)",
          "304:   if (!mutt_bit_isset(idata->ctx->mailbox->rights, right))",
          "307:   if (right == MUTT_ACL_WRITE && !imap_has_flag(&idata->flags, name))",
          "311:   rc = imap_exec_msgset(idata, \"UID STORE\", buf, flag, true, false);",
          "317:   rc = imap_exec_msgset(idata, \"UID STORE\", buf, flag, true, true);",
          "",
          "[Added Lines]",
          "295: static int sync_helper(struct ImapMboxData *mdata, int right, int flag, const char *name)",
          "301:   if (!mdata->ctx)",
          "304:   if (!mutt_bit_isset(mdata->ctx->mailbox->rights, right))",
          "307:   if (right == MUTT_ACL_WRITE && !imap_has_flag(&mdata->flags, name))",
          "311:   rc = imap_exec_msgset(mdata, \"UID STORE\", buf, flag, true, false);",
          "317:   rc = imap_exec_msgset(mdata, \"UID STORE\", buf, flag, true, true);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "338: {",
          "339:   struct ImapMbox mx;",
          "",
          "[Removed Lines]",
          "337: static int get_mailbox(const char *path, struct ImapData **hidata, char *buf, size_t buflen)",
          "",
          "[Added Lines]",
          "337: static int get_mailbox(const char *path, struct ImapMboxData **hidata, char *buf, size_t buflen)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "489:         break;",
          "490:       case MUTT_SERVERSEARCH:",
          "491:       {",
          "494:         {",
          "495:           mutt_error(_(\"Server-side custom search not supported: %s\"), pat->p.str);",
          "496:           return -1;",
          "",
          "[Removed Lines]",
          "492:         struct ImapData *idata = mailbox->data;",
          "493:         if (!mutt_bit_isset(idata->capabilities, X_GM_EXT1))",
          "",
          "[Added Lines]",
          "492:         struct ImapMboxData *mdata = mailbox->data;",
          "493:         if (!mutt_bit_isset(mdata->capabilities, X_GM_EXT1))",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "598: int imap_access(const char *path)",
          "599: {",
          "601:   struct ImapMbox mx;",
          "602:   char buf[LONG_STRING];",
          "603:   char mailbox[LONG_STRING];",
          "",
          "[Removed Lines]",
          "600:   struct ImapData *idata = NULL;",
          "",
          "[Added Lines]",
          "600:   struct ImapMboxData *mdata = NULL;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "607:   if (imap_parse_path(path, &mx))",
          "608:     return -1;",
          "612:   {",
          "613:     FREE(&mx.mbox);",
          "614:     return -1;",
          "615:   }",
          "618:   if (!*mailbox)",
          "619:     mutt_str_strfcpy(mailbox, \"INBOX\", sizeof(mailbox));",
          "623:   {",
          "624:     FREE(&mx.mbox);",
          "625:     return 0;",
          "626:   }",
          "627:   FREE(&mx.mbox);",
          "630:   {",
          "631:     mutt_debug(3, \"found %s in cache\\n\", mailbox);",
          "632:     return 0;",
          "633:   }",
          "638:     snprintf(buf, sizeof(buf), \"STATUS %s (UIDVALIDITY)\", mbox);",
          "640:     snprintf(buf, sizeof(buf), \"STATUS %s (UID-VALIDITY)\", mbox);",
          "641:   else",
          "642:   {",
          "",
          "[Removed Lines]",
          "610:   idata = imap_conn_find(&mx.account, ImapPassive ? MUTT_IMAP_CONN_NONEW : 0);",
          "611:   if (!idata)",
          "617:   imap_fix_path(idata, mx.mbox, mailbox, sizeof(mailbox));",
          "622:   if (mutt_str_strcmp(idata->mbox_name, mx.mbox) == 0)",
          "629:   if (imap_mboxcache_get(idata, mailbox, false))",
          "635:   imap_munge_mbox_name(idata, mbox, sizeof(mbox), mailbox);",
          "637:   if (mutt_bit_isset(idata->capabilities, IMAP4REV1))",
          "639:   else if (mutt_bit_isset(idata->capabilities, STATUS))",
          "",
          "[Added Lines]",
          "610:   mdata = imap_conn_find(&mx.account, ImapPassive ? MUTT_IMAP_CONN_NONEW : 0);",
          "611:   if (!mdata)",
          "617:   imap_fix_path(mdata, mx.mbox, mailbox, sizeof(mailbox));",
          "622:   if (mutt_str_strcmp(mdata->mbox_name, mx.mbox) == 0)",
          "629:   if (imap_mboxcache_get(mdata, mailbox, false))",
          "635:   imap_munge_mbox_name(mdata, mbox, sizeof(mbox), mailbox);",
          "637:   if (mutt_bit_isset(mdata->capabilities, IMAP4REV1))",
          "639:   else if (mutt_bit_isset(mdata->capabilities, STATUS))",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "644:     return -1;",
          "645:   }",
          "648:   if (rc < 0)",
          "649:   {",
          "650:     mutt_debug(1, \"Can't check STATUS of %s\\n\", mbox);",
          "",
          "[Removed Lines]",
          "647:   rc = imap_exec(idata, buf, IMAP_CMD_FAIL_OK);",
          "",
          "[Added Lines]",
          "647:   rc = imap_exec(mdata, buf, IMAP_CMD_FAIL_OK);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "665: {",
          "666:   char buf[LONG_STRING], mbox[LONG_STRING];",
          "669:   snprintf(buf, sizeof(buf), \"CREATE %s\", mbox);",
          "672:   {",
          "674:     return -1;",
          "675:   }",
          "",
          "[Removed Lines]",
          "664: int imap_create_mailbox(struct ImapData *idata, char *mailbox)",
          "668:   imap_munge_mbox_name(idata, mbox, sizeof(mbox), mailbox);",
          "671:   if (imap_exec(idata, buf, 0) != 0)",
          "673:     mutt_error(_(\"CREATE failed: %s\"), imap_cmd_trailer(idata));",
          "",
          "[Added Lines]",
          "664: int imap_create_mailbox(struct ImapMboxData *mdata, char *mailbox)",
          "668:   imap_munge_mbox_name(mdata, mbox, sizeof(mbox), mailbox);",
          "671:   if (imap_exec(mdata, buf, 0) != 0)",
          "673:     mutt_error(_(\"CREATE failed: %s\"), imap_cmd_trailer(mdata));",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "689: {",
          "690:   char oldmbox[LONG_STRING];",
          "691:   char newmbox[LONG_STRING];",
          "692:   char buf[LONG_STRING];",
          "697:   snprintf(buf, sizeof(buf), \"RENAME %s %s\", oldmbox, newmbox);",
          "700:     return -1;",
          "702:   return 0;",
          "",
          "[Removed Lines]",
          "688: int imap_rename_mailbox(struct ImapData *idata, struct ImapMbox *mx, const char *newname)",
          "694:   imap_munge_mbox_name(idata, oldmbox, sizeof(oldmbox), mx->mbox);",
          "695:   imap_munge_mbox_name(idata, newmbox, sizeof(newmbox), newname);",
          "699:   if (imap_exec(idata, buf, 0) != 0)",
          "",
          "[Added Lines]",
          "688: int imap_rename_mailbox(struct ImapMboxData *mdata, struct ImapMbox *mx, const char *newname)",
          "694:   imap_munge_mbox_name(mdata, oldmbox, sizeof(oldmbox), mx->mbox);",
          "695:   imap_munge_mbox_name(mdata, newmbox, sizeof(newmbox), newname);",
          "699:   if (imap_exec(mdata, buf, 0) != 0)",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "712: int imap_delete_mailbox(struct Mailbox *mailbox, struct ImapMbox *mx)",
          "713: {",
          "714:   char buf[PATH_MAX], mbox[PATH_MAX];",
          "717:   if (!mailbox || !mailbox->data)",
          "718:   {",
          "721:     {",
          "722:       FREE(&mx->mbox);",
          "723:       return -1;",
          "",
          "[Removed Lines]",
          "715:   struct ImapData *idata = NULL;",
          "719:     idata = imap_conn_find(&mx->account, ImapPassive ? MUTT_IMAP_CONN_NONEW : 0);",
          "720:     if (!idata)",
          "",
          "[Added Lines]",
          "715:   struct ImapMboxData *mdata = NULL;",
          "719:     mdata = imap_conn_find(&mx->account, ImapPassive ? MUTT_IMAP_CONN_NONEW : 0);",
          "720:     if (!mdata)",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "725:   }",
          "726:   else",
          "727:   {",
          "729:   }",
          "732:   snprintf(buf, sizeof(buf), \"DELETE %s\", mbox);",
          "735:     return -1;",
          "737:   return 0;",
          "",
          "[Removed Lines]",
          "728:     idata = mailbox->data;",
          "731:   imap_munge_mbox_name(idata, mbox, sizeof(mbox), mx->mbox);",
          "734:   if (imap_exec(idata, buf, 0) != 0)",
          "",
          "[Added Lines]",
          "728:     mdata = mailbox->data;",
          "731:   imap_munge_mbox_name(mdata, mbox, sizeof(mbox), mx->mbox);",
          "734:   if (imap_exec(mdata, buf, 0) != 0)",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "752:     {",
          "753:       TAILQ_REMOVE(head, np, entries);",
          "754:       mutt_message(_(\"Closing connection to %s...\"), np->account.host);",
          "756:       mutt_clear_error();",
          "757:       mutt_socket_free(np);",
          "758:     }",
          "",
          "[Removed Lines]",
          "755:       imap_logout((struct ImapData **) (void *) &np->data);",
          "",
          "[Added Lines]",
          "755:       imap_logout((struct ImapMboxData **) (void *) &np->data);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "777:                       struct Progress *pbar)",
          "778: {",
          "779:   char c;",
          "",
          "[Removed Lines]",
          "776: int imap_read_literal(FILE *fp, struct ImapData *idata, unsigned long bytes,",
          "",
          "[Added Lines]",
          "776: int imap_read_literal(FILE *fp, struct ImapMboxData *mdata, unsigned long bytes,",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "788:   for (unsigned long pos = 0; pos < bytes; pos++)",
          "789:   {",
          "791:     {",
          "792:       mutt_debug(1, \"error during read, %ld bytes read\\n\", pos);",
          "795:       mutt_buffer_free(&buf);",
          "796:       return -1;",
          "",
          "[Removed Lines]",
          "790:     if (mutt_socket_readchar(idata->conn, &c) != 1)",
          "793:       idata->status = IMAP_FATAL;",
          "",
          "[Added Lines]",
          "790:     if (mutt_socket_readchar(mdata->conn, &c) != 1)",
          "793:       mdata->status = IMAP_FATAL;",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "835: {",
          "836:   struct Email *e = NULL;",
          "837:   int cacheno;",
          "838:   short old_sort;",
          "840: #ifdef USE_HCACHE",
          "842: #endif",
          "844:   old_sort = Sort;",
          "845:   Sort = SORT_ORDER;",
          "849:   {",
          "852:     if (e->index == INT_MAX)",
          "853:     {",
          "854:       mutt_debug(2, \"Expunging message UID %u.\\n\", HEADER_DATA(e)->uid);",
          "856:       e->active = false;",
          "860: #ifdef USE_HCACHE",
          "862: #endif",
          "865:       cacheno = HEADER_DATA(e)->uid % IMAP_CACHE_LEN;",
          "868:       {",
          "871:       }",
          "876:     }",
          "877:     else",
          "878:     {",
          "",
          "[Removed Lines]",
          "834: void imap_expunge_mailbox(struct ImapData *idata)",
          "841:   idata->hcache = imap_hcache_open(idata, NULL);",
          "846:   mutt_sort_headers(idata->ctx, false);",
          "848:   for (int i = 0; i < idata->ctx->mailbox->msg_count; i++)",
          "850:     e = idata->ctx->mailbox->hdrs[i];",
          "857:       idata->ctx->mailbox->size -= e->content->length;",
          "859:       imap_cache_del(idata, e);",
          "861:       imap_hcache_del(idata, HEADER_DATA(e)->uid);",
          "866:       if (idata->cache[cacheno].uid == HEADER_DATA(e)->uid &&",
          "867:           idata->cache[cacheno].path)",
          "869:         unlink(idata->cache[cacheno].path);",
          "870:         FREE(&idata->cache[cacheno].path);",
          "873:       mutt_hash_int_delete(idata->uid_hash, HEADER_DATA(e)->uid, e);",
          "875:       imap_free_header_data((struct ImapHeaderData **) &e->data);",
          "",
          "[Added Lines]",
          "834: void imap_expunge_mailbox(struct ImapMboxData *mdata)",
          "841:   mdata->hcache = imap_hcache_open(mdata, NULL);",
          "846:   mutt_sort_headers(mdata->ctx, false);",
          "848:   for (int i = 0; i < mdata->ctx->mailbox->msg_count; i++)",
          "850:     e = mdata->ctx->mailbox->hdrs[i];",
          "857:       mdata->ctx->mailbox->size -= e->content->length;",
          "859:       imap_cache_del(mdata, e);",
          "861:       imap_hcache_del(mdata, HEADER_DATA(e)->uid);",
          "866:       if (mdata->cache[cacheno].uid == HEADER_DATA(e)->uid &&",
          "867:           mdata->cache[cacheno].path)",
          "869:         unlink(mdata->cache[cacheno].path);",
          "870:         FREE(&mdata->cache[cacheno].path);",
          "873:       mutt_hash_int_delete(mdata->uid_hash, HEADER_DATA(e)->uid, e);",
          "875:       imap_free_email_data((struct ImapEmailData **) &e->data);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "898:   }",
          "900: #ifdef USE_HCACHE",
          "902: #endif",
          "907:   Sort = old_sort;",
          "909: }",
          "",
          "[Removed Lines]",
          "901:   imap_hcache_close(idata);",
          "906:   mx_update_tables(idata->ctx, false);",
          "908:   mutt_sort_headers(idata->ctx, true);",
          "",
          "[Added Lines]",
          "901:   imap_hcache_close(mdata);",
          "906:   mx_update_tables(mdata->ctx, false);",
          "908:   mutt_sort_headers(mdata->ctx, true);",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "922: {",
          "923:   struct Connection *conn = NULL;",
          "924:   struct ConnAccount *creds = NULL;",
          "926:   bool new = false;",
          "928:   while ((conn = mutt_conn_find(conn, account)))",
          "",
          "[Removed Lines]",
          "921: struct ImapData *imap_conn_find(const struct ConnAccount *account, int flags)",
          "925:   struct ImapData *idata = NULL;",
          "",
          "[Added Lines]",
          "921: struct ImapMboxData *imap_conn_find(const struct ConnAccount *account, int flags)",
          "925:   struct ImapMboxData *mdata = NULL;",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "932:     else",
          "933:       memcpy(&conn->account, creds, sizeof(struct ConnAccount));",
          "936:     if (flags & MUTT_IMAP_CONN_NONEW)",
          "937:     {",
          "939:       {",
          "941:         mutt_socket_free(conn);",
          "942:         return NULL;",
          "943:       }",
          "945:         continue;",
          "946:     }",
          "948:       continue;",
          "950:       continue;",
          "951:     break;",
          "952:   }",
          "953:   if (!conn)",
          "957:   {",
          "961:     {",
          "962:       mutt_socket_free(conn);",
          "963:       return NULL;",
          "964:     }",
          "968:     new = true;",
          "969:   }",
          "974:   {",
          "976:     {",
          "979:       new = true;",
          "982:     }",
          "983:     else",
          "985:   }",
          "987:   {",
          "998:     {",
          "1000:       if (ImapQResync)",
          "1002:     }",
          "1010:   }",
          "1013: }",
          "1022: {",
          "1023:   char buf[LONG_STRING];",
          "1026:     return -1;",
          "1031:   {",
          "1033:     return -1;",
          "1034:   }",
          "1037:   {",
          "1040:     {",
          "1041:       goto bail;",
          "1042:     }",
          "1043: #ifdef USE_SSL",
          "1046:     {",
          "1047:       int rc;",
          "",
          "[Removed Lines]",
          "935:     idata = conn->data;",
          "938:       if (!idata)",
          "944:       else if (idata->state < IMAP_AUTHENTICATED)",
          "947:     if (flags & MUTT_IMAP_CONN_NOSELECT && idata && idata->state >= IMAP_SELECTED)",
          "949:     if (idata && idata->status == IMAP_FATAL)",
          "956:   if (!idata)",
          "959:     idata = imap_new_idata();",
          "960:     if (!idata)",
          "966:     conn->data = idata;",
          "967:     idata->conn = conn;",
          "971:   if (idata->state == IMAP_DISCONNECTED)",
          "972:     imap_open_connection(idata);",
          "973:   if (idata->state == IMAP_CONNECTED)",
          "975:     if (imap_authenticate(idata) == IMAP_AUTH_SUCCESS)",
          "977:       idata->state = IMAP_AUTHENTICATED;",
          "978:       FREE(&idata->capstr);",
          "980:       if (idata->conn->ssf)",
          "981:         mutt_debug(2, \"Communication encrypted at %d bits\\n\", idata->conn->ssf);",
          "984:       mutt_account_unsetpass(&idata->conn->account);",
          "986:   if (new && idata->state == IMAP_AUTHENTICATED)",
          "989:     imap_exec(idata, \"CAPABILITY\", IMAP_CMD_QUEUE);",
          "992:     if (mutt_bit_isset(idata->capabilities, ENABLE))",
          "993:       imap_exec(idata, \"ENABLE UTF8=ACCEPT\", IMAP_CMD_QUEUE);",
          "997:     if (mutt_bit_isset(idata->capabilities, QRESYNC))",
          "999:       mutt_bit_set(idata->capabilities, CONDSTORE);",
          "1001:         imap_exec(idata, \"ENABLE QRESYNC\", IMAP_CMD_QUEUE);",
          "1005:     idata->delim = '/';",
          "1006:     imap_exec(idata, \"LIST \\\"\\\" \\\"\\\"\", IMAP_CMD_QUEUE);",
          "1009:     imap_exec(idata, NULL, IMAP_CMD_FAIL_OK);",
          "1012:   return idata;",
          "1021: int imap_open_connection(struct ImapData *idata)",
          "1025:   if (mutt_socket_open(idata->conn) < 0)",
          "1028:   idata->state = IMAP_CONNECTED;",
          "1030:   if (imap_cmd_step(idata) != IMAP_CMD_OK)",
          "1032:     imap_close_connection(idata);",
          "1036:   if (mutt_str_strncasecmp(\"* OK\", idata->buf, 4) == 0)",
          "1038:     if ((mutt_str_strncasecmp(\"* OK [CAPABILITY\", idata->buf, 16) != 0) &&",
          "1039:         check_capabilities(idata))",
          "1045:     if (!idata->conn->ssf && (SslForceTls || mutt_bit_isset(idata->capabilities, STARTTLS)))",
          "",
          "[Added Lines]",
          "935:     mdata = conn->data;",
          "938:       if (!mdata)",
          "944:       else if (mdata->state < IMAP_AUTHENTICATED)",
          "947:     if (flags & MUTT_IMAP_CONN_NOSELECT && mdata && mdata->state >= IMAP_SELECTED)",
          "949:     if (mdata && mdata->status == IMAP_FATAL)",
          "956:   if (!mdata)",
          "959:     mdata = imap_new_idata();",
          "960:     if (!mdata)",
          "966:     conn->data = mdata;",
          "967:     mdata->conn = conn;",
          "971:   if (mdata->state == IMAP_DISCONNECTED)",
          "972:     imap_open_connection(mdata);",
          "973:   if (mdata->state == IMAP_CONNECTED)",
          "975:     if (imap_authenticate(mdata) == IMAP_AUTH_SUCCESS)",
          "977:       mdata->state = IMAP_AUTHENTICATED;",
          "978:       FREE(&mdata->capstr);",
          "980:       if (mdata->conn->ssf)",
          "981:         mutt_debug(2, \"Communication encrypted at %d bits\\n\", mdata->conn->ssf);",
          "984:       mutt_account_unsetpass(&mdata->conn->account);",
          "986:   if (new && mdata->state == IMAP_AUTHENTICATED)",
          "989:     imap_exec(mdata, \"CAPABILITY\", IMAP_CMD_QUEUE);",
          "992:     if (mutt_bit_isset(mdata->capabilities, ENABLE))",
          "993:       imap_exec(mdata, \"ENABLE UTF8=ACCEPT\", IMAP_CMD_QUEUE);",
          "997:     if (mutt_bit_isset(mdata->capabilities, QRESYNC))",
          "999:       mutt_bit_set(mdata->capabilities, CONDSTORE);",
          "1001:         imap_exec(mdata, \"ENABLE QRESYNC\", IMAP_CMD_QUEUE);",
          "1005:     mdata->delim = '/';",
          "1006:     imap_exec(mdata, \"LIST \\\"\\\" \\\"\\\"\", IMAP_CMD_QUEUE);",
          "1009:     imap_exec(mdata, NULL, IMAP_CMD_FAIL_OK);",
          "1012:   return mdata;",
          "1021: int imap_open_connection(struct ImapMboxData *mdata)",
          "1025:   if (mutt_socket_open(mdata->conn) < 0)",
          "1028:   mdata->state = IMAP_CONNECTED;",
          "1030:   if (imap_cmd_step(mdata) != IMAP_CMD_OK)",
          "1032:     imap_close_connection(mdata);",
          "1036:   if (mutt_str_strncasecmp(\"* OK\", mdata->buf, 4) == 0)",
          "1038:     if ((mutt_str_strncasecmp(\"* OK [CAPABILITY\", mdata->buf, 16) != 0) &&",
          "1039:         check_capabilities(mdata))",
          "1045:     if (!mdata->conn->ssf && (SslForceTls || mutt_bit_isset(mdata->capabilities, STARTTLS)))",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1055:       }",
          "1056:       if (rc == MUTT_YES)",
          "1057:       {",
          "1059:         if (rc == -1)",
          "1060:           goto bail;",
          "1061:         if (rc != -2)",
          "1062:         {",
          "1064:           {",
          "1065:             mutt_error(_(\"Could not negotiate TLS connection\"));",
          "1066:             goto err_close_conn;",
          "",
          "[Removed Lines]",
          "1058:         rc = imap_exec(idata, \"STARTTLS\", IMAP_CMD_FAIL_OK);",
          "1063:           if (mutt_ssl_starttls(idata->conn))",
          "",
          "[Added Lines]",
          "1058:         rc = imap_exec(mdata, \"STARTTLS\", IMAP_CMD_FAIL_OK);",
          "1063:           if (mutt_ssl_starttls(mdata->conn))",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1068:           else",
          "1069:           {",
          "1072:               goto bail;",
          "1073:           }",
          "1074:         }",
          "1075:       }",
          "1076:     }",
          "1079:     {",
          "1080:       mutt_error(_(\"Encrypted connection unavailable\"));",
          "1081:       goto err_close_conn;",
          "1082:     }",
          "1083: #endif",
          "1084:   }",
          "1086:   {",
          "1089:       goto bail;",
          "1091:   }",
          "1092:   else",
          "1093:   {",
          "",
          "[Removed Lines]",
          "1071:             if (imap_exec(idata, \"CAPABILITY\", 0))",
          "1078:     if (SslForceTls && !idata->conn->ssf)",
          "1085:   else if (mutt_str_strncasecmp(\"* PREAUTH\", idata->buf, 9) == 0)",
          "1087:     idata->state = IMAP_AUTHENTICATED;",
          "1088:     if (check_capabilities(idata) != 0)",
          "1090:     FREE(&idata->capstr);",
          "",
          "[Added Lines]",
          "1071:             if (imap_exec(mdata, \"CAPABILITY\", 0))",
          "1078:     if (SslForceTls && !mdata->conn->ssf)",
          "1085:   else if (mutt_str_strncasecmp(\"* PREAUTH\", mdata->buf, 9) == 0)",
          "1087:     mdata->state = IMAP_AUTHENTICATED;",
          "1088:     if (check_capabilities(mdata) != 0)",
          "1090:     FREE(&mdata->capstr);",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "1100: #ifdef USE_SSL",
          "1101: err_close_conn:",
          "1103: #endif",
          "1104: bail:",
          "1106:   return -1;",
          "1107: }",
          "1114: {",
          "1116:   {",
          "1119:   }",
          "1125: }",
          "1132: {",
          "1138:   {",
          "1140:       ;",
          "1141:   }",
          "1145: }",
          "",
          "[Removed Lines]",
          "1102:   imap_close_connection(idata);",
          "1105:   FREE(&idata->capstr);",
          "1113: void imap_close_connection(struct ImapData *idata)",
          "1115:   if (idata->state != IMAP_DISCONNECTED)",
          "1117:     mutt_socket_close(idata->conn);",
          "1118:     idata->state = IMAP_DISCONNECTED;",
          "1120:   idata->seqno = false;",
          "1121:   idata->nextcmd = false;",
          "1122:   idata->lastcmd = false;",
          "1123:   idata->status = false;",
          "1124:   memset(idata->cmds, 0, sizeof(struct ImapCommand) * idata->cmdslots);",
          "1131: void imap_logout(struct ImapData **idata)",
          "1135:   (*idata)->status = IMAP_BYE;",
          "1136:   imap_cmd_start(*idata, \"LOGOUT\");",
          "1137:   if (ImapPollTimeout <= 0 || mutt_socket_poll((*idata)->conn, ImapPollTimeout) != 0)",
          "1139:     while (imap_cmd_step(*idata) == IMAP_CMD_CONTINUE)",
          "1143:   mutt_socket_close((*idata)->conn);",
          "1144:   imap_free_idata(idata);",
          "",
          "[Added Lines]",
          "1102:   imap_close_connection(mdata);",
          "1105:   FREE(&mdata->capstr);",
          "1113: void imap_close_connection(struct ImapMboxData *mdata)",
          "1115:   if (mdata->state != IMAP_DISCONNECTED)",
          "1117:     mutt_socket_close(mdata->conn);",
          "1118:     mdata->state = IMAP_DISCONNECTED;",
          "1120:   mdata->seqno = false;",
          "1121:   mdata->nextcmd = false;",
          "1122:   mdata->lastcmd = false;",
          "1123:   mdata->status = false;",
          "1124:   memset(mdata->cmds, 0, sizeof(struct ImapCommand) * mdata->cmdslots);",
          "1131: void imap_logout(struct ImapMboxData **mdata)",
          "1135:   (*mdata)->status = IMAP_BYE;",
          "1136:   imap_cmd_start(*mdata, \"LOGOUT\");",
          "1137:   if (ImapPollTimeout <= 0 || mutt_socket_poll((*mdata)->conn, ImapPollTimeout) != 0)",
          "1139:     while (imap_cmd_step(*mdata) == IMAP_CMD_CONTINUE)",
          "1143:   mutt_socket_close((*mdata)->conn);",
          "1144:   imap_free_idata(mdata);",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "1190:                      int flag, bool changed, bool invert)",
          "1191: {",
          "1192:   struct Email **emails = NULL;",
          "",
          "[Removed Lines]",
          "1189: int imap_exec_msgset(struct ImapData *idata, const char *pre, const char *post,",
          "",
          "[Added Lines]",
          "1189: int imap_exec_msgset(struct ImapMboxData *mdata, const char *pre, const char *post,",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "1203:   oldsort = Sort;",
          "1204:   if (Sort != SORT_ORDER)",
          "1205:   {",
          "1212:     Sort = SORT_ORDER;",
          "1214:           sizeof(struct Email *), mutt_get_sort_func(SORT_ORDER));",
          "1215:   }",
          "",
          "[Removed Lines]",
          "1206:     emails = idata->ctx->mailbox->hdrs;",
          "1207:     idata->ctx->mailbox->hdrs =",
          "1208:         mutt_mem_malloc(idata->ctx->mailbox->msg_count * sizeof(struct Email *));",
          "1209:     memcpy(idata->ctx->mailbox->hdrs, emails,",
          "1210:            idata->ctx->mailbox->msg_count * sizeof(struct Email *));",
          "1213:     qsort(idata->ctx->mailbox->hdrs, idata->ctx->mailbox->msg_count,",
          "",
          "[Added Lines]",
          "1206:     emails = mdata->ctx->mailbox->hdrs;",
          "1207:     mdata->ctx->mailbox->hdrs =",
          "1208:         mutt_mem_malloc(mdata->ctx->mailbox->msg_count * sizeof(struct Email *));",
          "1209:     memcpy(mdata->ctx->mailbox->hdrs, emails,",
          "1210:            mdata->ctx->mailbox->msg_count * sizeof(struct Email *));",
          "1213:     qsort(mdata->ctx->mailbox->hdrs, mdata->ctx->mailbox->msg_count,",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "1220:   {",
          "1221:     cmd->dptr = cmd->data;",
          "1222:     mutt_buffer_printf(cmd, \"%s \", pre);",
          "1224:     if (rc > 0)",
          "1225:     {",
          "1226:       mutt_buffer_printf(cmd, \" %s\", post);",
          "1228:       {",
          "1229:         rc = -1;",
          "1230:         goto out;",
          "",
          "[Removed Lines]",
          "1223:     rc = make_msg_set(idata, cmd, flag, changed, invert, &pos);",
          "1227:       if (imap_exec(idata, cmd->data, IMAP_CMD_QUEUE))",
          "",
          "[Added Lines]",
          "1223:     rc = make_msg_set(mdata, cmd, flag, changed, invert, &pos);",
          "1227:       if (imap_exec(mdata, cmd->data, IMAP_CMD_QUEUE))",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "1240:   if (oldsort != Sort)",
          "1241:   {",
          "1242:     Sort = oldsort;",
          "1245:   }",
          "1247:   return rc;",
          "",
          "[Removed Lines]",
          "1243:     FREE(&idata->ctx->mailbox->hdrs);",
          "1244:     idata->ctx->mailbox->hdrs = emails;",
          "",
          "[Added Lines]",
          "1243:     FREE(&mdata->ctx->mailbox->hdrs);",
          "1244:     mdata->ctx->mailbox->hdrs = emails;",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "1266:                                struct Buffer *cmd, int *err_continue)",
          "1267: {",
          "1268:   char flags[LONG_STRING];",
          "",
          "[Removed Lines]",
          "1265: int imap_sync_message_for_copy(struct ImapData *idata, struct Email *e,",
          "",
          "[Added Lines]",
          "1265: int imap_sync_message_for_copy(struct ImapMboxData *mdata, struct Email *e,",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "1284:   flags[0] = '\\0';",
          "1291:            sizeof(flags));",
          "1294:   {",
          "1296:     if (HEADER_DATA(e)->flags_system)",
          "",
          "[Removed Lines]",
          "1286:   set_flag(idata, MUTT_ACL_SEEN, e->read, \"\\\\Seen \", flags, sizeof(flags));",
          "1287:   set_flag(idata, MUTT_ACL_WRITE, e->old, \"Old \", flags, sizeof(flags));",
          "1288:   set_flag(idata, MUTT_ACL_WRITE, e->flagged, \"\\\\Flagged \", flags, sizeof(flags));",
          "1289:   set_flag(idata, MUTT_ACL_WRITE, e->replied, \"\\\\Answered \", flags, sizeof(flags));",
          "1290:   set_flag(idata, MUTT_ACL_DELETE, HEADER_DATA(e)->deleted, \"\\\\Deleted \", flags,",
          "1293:   if (mutt_bit_isset(idata->ctx->mailbox->rights, MUTT_ACL_WRITE))",
          "",
          "[Added Lines]",
          "1286:   set_flag(mdata, MUTT_ACL_SEEN, e->read, \"\\\\Seen \", flags, sizeof(flags));",
          "1287:   set_flag(mdata, MUTT_ACL_WRITE, e->old, \"Old \", flags, sizeof(flags));",
          "1288:   set_flag(mdata, MUTT_ACL_WRITE, e->flagged, \"\\\\Flagged \", flags, sizeof(flags));",
          "1289:   set_flag(mdata, MUTT_ACL_WRITE, e->replied, \"\\\\Answered \", flags, sizeof(flags));",
          "1290:   set_flag(mdata, MUTT_ACL_DELETE, HEADER_DATA(e)->deleted, \"\\\\Deleted \", flags,",
          "1293:   if (mutt_bit_isset(mdata->ctx->mailbox->rights, MUTT_ACL_WRITE))",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "1311:   if (!*flags)",
          "1312:   {",
          "1318:              flags, sizeof(flags));",
          "1322:         HEADER_DATA(e)->flags_remote)",
          "1323:       mutt_str_strcat(flags, sizeof(flags), HEADER_DATA(e)->flags_remote);",
          "",
          "[Removed Lines]",
          "1313:     set_flag(idata, MUTT_ACL_SEEN, 1, \"\\\\Seen \", flags, sizeof(flags));",
          "1314:     set_flag(idata, MUTT_ACL_WRITE, 1, \"Old \", flags, sizeof(flags));",
          "1315:     set_flag(idata, MUTT_ACL_WRITE, 1, \"\\\\Flagged \", flags, sizeof(flags));",
          "1316:     set_flag(idata, MUTT_ACL_WRITE, 1, \"\\\\Answered \", flags, sizeof(flags));",
          "1317:     set_flag(idata, MUTT_ACL_DELETE, !HEADER_DATA(e)->deleted, \"\\\\Deleted \",",
          "1321:     if (mutt_bit_isset(idata->ctx->mailbox->rights, MUTT_ACL_WRITE) &&",
          "",
          "[Added Lines]",
          "1313:     set_flag(mdata, MUTT_ACL_SEEN, 1, \"\\\\Seen \", flags, sizeof(flags));",
          "1314:     set_flag(mdata, MUTT_ACL_WRITE, 1, \"Old \", flags, sizeof(flags));",
          "1315:     set_flag(mdata, MUTT_ACL_WRITE, 1, \"\\\\Flagged \", flags, sizeof(flags));",
          "1316:     set_flag(mdata, MUTT_ACL_WRITE, 1, \"\\\\Answered \", flags, sizeof(flags));",
          "1317:     set_flag(mdata, MUTT_ACL_DELETE, !HEADER_DATA(e)->deleted, \"\\\\Deleted \",",
          "1321:     if (mutt_bit_isset(mdata->ctx->mailbox->rights, MUTT_ACL_WRITE) &&",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "1341:       (*err_continue != MUTT_YES))",
          "1342:   {",
          "1344:     if (*err_continue != MUTT_YES)",
          "1345:     {",
          "1346:       e->active = true;",
          "",
          "[Removed Lines]",
          "1340:   if (*flags && (imap_exec(idata, cmd->data, 0) != 0) && err_continue &&",
          "",
          "[Added Lines]",
          "1340:   if (*flags && (imap_exec(mdata, cmd->data, 0) != 0) && err_continue &&",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "1384: {",
          "1387:   int result = 0;",
          "1392:   {",
          "1394:       return -1;",
          "1395:   }",
          "1397:   {",
          "1399:     {",
          "1401:       {",
          "1402:         mutt_debug(1, \"Error reading IDLE response\\n\");",
          "1403:         return -1;",
          "",
          "[Removed Lines]",
          "1383: int imap_check(struct ImapData *idata, bool force)",
          "1390:   if (!force && ImapIdle && mutt_bit_isset(idata->capabilities, IDLE) &&",
          "1391:       (idata->state != IMAP_IDLE || time(NULL) >= idata->lastread + ImapKeepalive))",
          "1393:     if (imap_cmd_idle(idata) < 0)",
          "1396:   if (idata->state == IMAP_IDLE)",
          "1398:     while ((result = mutt_socket_poll(idata->conn, 0)) > 0)",
          "1400:       if (imap_cmd_step(idata) != IMAP_CMD_CONTINUE)",
          "",
          "[Added Lines]",
          "1383: int imap_check(struct ImapMboxData *mdata, bool force)",
          "1390:   if (!force && ImapIdle && mutt_bit_isset(mdata->capabilities, IDLE) &&",
          "1391:       (mdata->state != IMAP_IDLE || time(NULL) >= mdata->lastread + ImapKeepalive))",
          "1393:     if (imap_cmd_idle(mdata) < 0)",
          "1396:   if (mdata->state == IMAP_IDLE)",
          "1398:     while ((result = mutt_socket_poll(mdata->conn, 0)) > 0)",
          "1400:       if (imap_cmd_step(mdata) != IMAP_CMD_CONTINUE)",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "1406:     if (result < 0)",
          "1407:     {",
          "1408:       mutt_debug(1, \"Poll failed, disabling IDLE\\n\");",
          "1410:     }",
          "1411:   }",
          "1415:   {",
          "1416:     return -1;",
          "1417:   }",
          "1424:     result = MUTT_REOPENED;",
          "1426:     result = MUTT_NEW_MAIL;",
          "1428:     result = MUTT_FLAGS;",
          "1432:   return result;",
          "1433: }",
          "",
          "[Removed Lines]",
          "1409:       mutt_bit_unset(idata->capabilities, IDLE);",
          "1413:   if ((force || (idata->state != IMAP_IDLE && time(NULL) >= idata->lastread + Timeout)) &&",
          "1414:       imap_exec(idata, \"NOOP\", IMAP_CMD_POLL) != 0)",
          "1421:   imap_cmd_finish(idata);",
          "1423:   if (idata->check_status & IMAP_EXPUNGE_PENDING)",
          "1425:   else if (idata->check_status & IMAP_NEWMAIL_PENDING)",
          "1427:   else if (idata->check_status & IMAP_FLAGS_PENDING)",
          "1430:   idata->check_status = 0;",
          "",
          "[Added Lines]",
          "1409:       mutt_bit_unset(mdata->capabilities, IDLE);",
          "1413:   if ((force || (mdata->state != IMAP_IDLE && time(NULL) >= mdata->lastread + Timeout)) &&",
          "1414:       imap_exec(mdata, \"NOOP\", IMAP_CMD_POLL) != 0)",
          "1421:   imap_cmd_finish(mdata);",
          "1423:   if (mdata->check_status & IMAP_EXPUNGE_PENDING)",
          "1425:   else if (mdata->check_status & IMAP_NEWMAIL_PENDING)",
          "1427:   else if (mdata->check_status & IMAP_FLAGS_PENDING)",
          "1430:   mdata->check_status = 0;",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "1444: int imap_mailbox_check(bool check_stats)",
          "1445: {",
          "1448:   char name[LONG_STRING];",
          "1449:   char command[LONG_STRING];",
          "1450:   char munged[LONG_STRING];",
          "",
          "[Removed Lines]",
          "1446:   struct ImapData *idata = NULL;",
          "1447:   struct ImapData *lastdata = NULL;",
          "",
          "[Added Lines]",
          "1446:   struct ImapMboxData *mdata = NULL;",
          "1447:   struct ImapMboxData *lastdata = NULL;",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "1463:     if (np->m->magic != MUTT_IMAP)",
          "1464:       continue;",
          "1467:     {",
          "1468:       np->m->has_new = false;",
          "1469:       continue;",
          "",
          "[Removed Lines]",
          "1466:     if (get_mailbox(np->m->path, &idata, name, sizeof(name)) < 0)",
          "",
          "[Added Lines]",
          "1466:     if (get_mailbox(np->m->path, &mdata, name, sizeof(name)) < 0)",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "1477:     {",
          "1478:       np->m->has_new = false;",
          "1479:       continue;",
          "1480:     }",
          "1484:     {",
          "1485:       mutt_debug(2, \"Server doesn't support STATUS\\n\");",
          "1486:       continue;",
          "1487:     }",
          "1490:     {",
          "",
          "[Removed Lines]",
          "1476:     if (idata->mbox_name && (imap_mxcmp(name, idata->mbox_name) == 0))",
          "1482:     if (!mutt_bit_isset(idata->capabilities, IMAP4REV1) &&",
          "1483:         !mutt_bit_isset(idata->capabilities, STATUS))",
          "1489:     if (lastdata && idata != lastdata)",
          "",
          "[Added Lines]",
          "1476:     if (mdata->mbox_name && (imap_mxcmp(name, mdata->mbox_name) == 0))",
          "1482:     if (!mutt_bit_isset(mdata->capabilities, IMAP4REV1) &&",
          "1483:         !mutt_bit_isset(mdata->capabilities, STATUS))",
          "1489:     if (lastdata && mdata != lastdata)",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "1497:     }",
          "1499:     if (!lastdata)",
          "1503:     if (check_stats)",
          "1504:     {",
          "1505:       snprintf(command, sizeof(command),",
          "",
          "[Removed Lines]",
          "1500:       lastdata = idata;",
          "1502:     imap_munge_mbox_name(idata, munged, sizeof(munged), name);",
          "",
          "[Added Lines]",
          "1500:       lastdata = mdata;",
          "1502:     imap_munge_mbox_name(mdata, munged, sizeof(munged), name);",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "1511:                \"STATUS %s (UIDNEXT UIDVALIDITY UNSEEN RECENT)\", munged);",
          "1512:     }",
          "1515:     {",
          "1516:       mutt_debug(1, \"Error queueing command\\n\");",
          "1517:       return 0;",
          "",
          "[Removed Lines]",
          "1514:     if (imap_exec(idata, command, IMAP_CMD_QUEUE | IMAP_CMD_POLL) < 0)",
          "",
          "[Added Lines]",
          "1514:     if (imap_exec(mdata, command, IMAP_CMD_QUEUE | IMAP_CMD_POLL) < 0)",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "1548: {",
          "1549:   static int queued = 0;",
          "1552:   char buf[LONG_STRING];",
          "1553:   char mbox[LONG_STRING];",
          "1554:   struct ImapStatus *status = NULL;",
          "1557:     return -1;",
          "1567:   {",
          "1569:     snprintf(buf, sizeof(buf), \"STATUS %s (%s)\", mbox, \"MESSAGES\");",
          "1571:   }",
          "1572:   else",
          "1573:   {",
          "",
          "[Removed Lines]",
          "1551:   struct ImapData *idata = NULL;",
          "1556:   if (get_mailbox(path, &idata, buf, sizeof(buf)) < 0)",
          "1563:   if (idata->ctx && !imap_mxcmp(buf, idata->mbox_name))",
          "1564:     return idata->ctx->mailbox->msg_count;",
          "1565:   else if (mutt_bit_isset(idata->capabilities, IMAP4REV1) ||",
          "1566:            mutt_bit_isset(idata->capabilities, STATUS))",
          "1568:     imap_munge_mbox_name(idata, mbox, sizeof(mbox), buf);",
          "1570:     imap_unmunge_mbox_name(idata, mbox);",
          "",
          "[Added Lines]",
          "1551:   struct ImapMboxData *mdata = NULL;",
          "1556:   if (get_mailbox(path, &mdata, buf, sizeof(buf)) < 0)",
          "1563:   if (mdata->ctx && !imap_mxcmp(buf, mdata->mbox_name))",
          "1564:     return mdata->ctx->mailbox->msg_count;",
          "1565:   else if (mutt_bit_isset(mdata->capabilities, IMAP4REV1) ||",
          "1566:            mutt_bit_isset(mdata->capabilities, STATUS))",
          "1568:     imap_munge_mbox_name(mdata, mbox, sizeof(mbox), buf);",
          "1570:     imap_unmunge_mbox_name(mdata, mbox);",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "1579:   if (queue)",
          "1580:   {",
          "1582:     queued = 1;",
          "1583:     return 0;",
          "1584:   }",
          "1585:   else if (!queued)",
          "1588:   queued = 0;",
          "1590:   if (status)",
          "1591:     return status->messages;",
          "",
          "[Removed Lines]",
          "1581:     imap_exec(idata, buf, IMAP_CMD_QUEUE);",
          "1586:     imap_exec(idata, buf, 0);",
          "1589:   status = imap_mboxcache_get(idata, mbox, false);",
          "",
          "[Added Lines]",
          "1581:     imap_exec(mdata, buf, IMAP_CMD_QUEUE);",
          "1586:     imap_exec(mdata, buf, 0);",
          "1589:   status = imap_mboxcache_get(mdata, mbox, false);",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "1608: {",
          "1609:   struct ImapStatus *status = NULL;",
          "1610:   struct ListNode *np = NULL;",
          "1612:   {",
          "1613:     status = (struct ImapStatus *) np->data;",
          "",
          "[Removed Lines]",
          "1607: struct ImapStatus *imap_mboxcache_get(struct ImapData *idata, const char *mbox, bool create)",
          "1611:   STAILQ_FOREACH(np, &idata->mboxcache, entries)",
          "",
          "[Added Lines]",
          "1607: struct ImapStatus *imap_mboxcache_get(struct ImapMboxData *mdata, const char *mbox, bool create)",
          "1611:   STAILQ_FOREACH(np, &mdata->mboxcache, entries)",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "1622:   {",
          "1623:     struct ImapStatus *scache = mutt_mem_calloc(1, sizeof(struct ImapStatus));",
          "1624:     scache->name = (char *) mbox;",
          "1627:     status->name = mutt_str_strdup(mbox);",
          "1628:   }",
          "1630: #ifdef USE_HCACHE",
          "1632:   if (hc)",
          "1633:   {",
          "1634:     void *uidvalidity = mutt_hcache_fetch_raw(hc, \"/UIDVALIDITY\", 12);",
          "",
          "[Removed Lines]",
          "1625:     mutt_list_insert_tail(&idata->mboxcache, (char *) scache);",
          "1626:     status = imap_mboxcache_get(idata, mbox, false);",
          "1631:   header_cache_t *hc = imap_hcache_open(idata, mbox);",
          "",
          "[Added Lines]",
          "1625:     mutt_list_insert_tail(&mdata->mboxcache, (char *) scache);",
          "1626:     status = imap_mboxcache_get(mdata, mbox, false);",
          "1631:   header_cache_t *hc = imap_hcache_open(mdata, mbox);",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "1642:         mutt_hcache_free(hc, &uidnext);",
          "1643:         mutt_hcache_free(hc, (void **) &modseq);",
          "1644:         mutt_hcache_close(hc);",
          "1646:       }",
          "1647:       status->uidvalidity = *(unsigned int *) uidvalidity;",
          "1648:       status->uidnext = uidnext ? *(unsigned int *) uidnext : 0;",
          "",
          "[Removed Lines]",
          "1645:         return imap_mboxcache_get(idata, mbox, true);",
          "",
          "[Added Lines]",
          "1645:         return imap_mboxcache_get(mdata, mbox, true);",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "1668: {",
          "1669:   struct ImapStatus *status = NULL;",
          "1671:   struct ListNode *np = NULL;",
          "1673:   {",
          "1674:     status = (struct ImapStatus *) np->data;",
          "1675:     FREE(&status->name);",
          "1676:   }",
          "1679: }",
          "",
          "[Removed Lines]",
          "1667: void imap_mboxcache_free(struct ImapData *idata)",
          "1672:   STAILQ_FOREACH(np, &idata->mboxcache, entries)",
          "1678:   mutt_list_free(&idata->mboxcache);",
          "",
          "[Added Lines]",
          "1667: void imap_mboxcache_free(struct ImapMboxData *mdata)",
          "1672:   STAILQ_FOREACH(np, &mdata->mboxcache, entries)",
          "1678:   mutt_list_free(&mdata->mboxcache);",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "1688: int imap_search(struct Mailbox *mailbox, const struct Pattern *pat)",
          "1689: {",
          "1690:   struct Buffer buf;",
          "1692:   for (int i = 0; i < mailbox->msg_count; i++)",
          "1693:     mailbox->hdrs[i]->matched = false;",
          "",
          "[Removed Lines]",
          "1691:   struct ImapData *idata = mailbox->data;",
          "",
          "[Added Lines]",
          "1691:   struct ImapMboxData *mdata = mailbox->data;",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "1702:     FREE(&buf.data);",
          "1703:     return -1;",
          "1704:   }",
          "1706:   {",
          "1707:     FREE(&buf.data);",
          "1708:     return -1;",
          "",
          "[Removed Lines]",
          "1705:   if (imap_exec(idata, buf.data, 0) < 0)",
          "",
          "[Added Lines]",
          "1705:   if (imap_exec(mdata, buf.data, 0) < 0)",
          "",
          "---------------",
          "--- Hunk 49 ---",
          "[Context before]",
          "1722: int imap_subscribe(char *path, bool subscribe)",
          "1723: {",
          "1725:   char buf[LONG_STRING];",
          "1726:   char mbox[LONG_STRING];",
          "1727:   char errstr[STRING];",
          "",
          "[Removed Lines]",
          "1724:   struct ImapData *idata = NULL;",
          "",
          "[Added Lines]",
          "1724:   struct ImapMboxData *mdata = NULL;",
          "",
          "---------------",
          "--- Hunk 50 ---",
          "[Context before]",
          "1734:     mutt_error(_(\"Bad mailbox name\"));",
          "1735:     return -1;",
          "1736:   }",
          "1739:     goto fail;",
          "1742:   if (!*buf)",
          "1743:     mutt_str_strfcpy(buf, \"INBOX\", sizeof(buf));",
          "",
          "[Removed Lines]",
          "1737:   idata = imap_conn_find(&(mx.account), 0);",
          "1738:   if (!idata)",
          "1741:   imap_fix_path(idata, mx.mbox, buf, sizeof(buf));",
          "",
          "[Added Lines]",
          "1737:   mdata = imap_conn_find(&(mx.account), 0);",
          "1738:   if (!mdata)",
          "1741:   imap_fix_path(mdata, mx.mbox, buf, sizeof(buf));",
          "",
          "---------------",
          "--- Hunk 51 ---",
          "[Context before]",
          "1759:     mutt_message(_(\"Subscribing to %s...\"), buf);",
          "1760:   else",
          "1761:     mutt_message(_(\"Unsubscribing from %s...\"), buf);",
          "1764:   snprintf(buf, sizeof(buf), \"%sSUBSCRIBE %s\", subscribe ? \"\" : \"UN\", mbox);",
          "1767:     goto fail;",
          "1770:   if (subscribe)",
          "1771:     mutt_message(_(\"Subscribed to %s\"), mx.mbox);",
          "1772:   else",
          "",
          "[Removed Lines]",
          "1762:   imap_munge_mbox_name(idata, mbox, sizeof(mbox), buf);",
          "1766:   if (imap_exec(idata, buf, 0) < 0)",
          "1769:   imap_unmunge_mbox_name(idata, mx.mbox);",
          "",
          "[Added Lines]",
          "1762:   imap_munge_mbox_name(mdata, mbox, sizeof(mbox), buf);",
          "1766:   if (imap_exec(mdata, buf, 0) < 0)",
          "1769:   imap_unmunge_mbox_name(mdata, mx.mbox);",
          "",
          "---------------",
          "--- Hunk 52 ---",
          "[Context before]",
          "1793: int imap_complete(char *buf, size_t buflen, char *path)",
          "1794: {",
          "1796:   char list[LONG_STRING];",
          "1797:   char tmp[LONG_STRING];",
          "1798:   struct ImapList listresp;",
          "",
          "[Removed Lines]",
          "1795:   struct ImapData *idata = NULL;",
          "",
          "[Added Lines]",
          "1795:   struct ImapMboxData *mdata = NULL;",
          "",
          "---------------",
          "--- Hunk 53 ---",
          "[Context before]",
          "1816:   {",
          "1817:     FREE(&mx.mbox);",
          "1818:     mutt_str_strfcpy(buf, path, buflen);",
          "",
          "[Removed Lines]",
          "1814:   idata = imap_conn_find(&(mx.account), MUTT_IMAP_CONN_NONEW);",
          "1815:   if (!idata)",
          "",
          "[Added Lines]",
          "1814:   mdata = imap_conn_find(&(mx.account), MUTT_IMAP_CONN_NONEW);",
          "1815:   if (!mdata)",
          "",
          "---------------",
          "--- Hunk 54 ---",
          "[Context before]",
          "1824:   if (mx.mbox && mx.mbox[0])",
          "1826:   else",
          "1827:     list[0] = '\\0';",
          "1830:   snprintf(tmp, sizeof(tmp), \"%s \\\"\\\" \\\"%s%%\\\"\", ImapListSubscribed ? \"LSUB\" : \"LIST\", list);",
          "1835:   mutt_str_strfcpy(completion, mx.mbox, sizeof(completion));",
          "1838:   do",
          "1839:   {",
          "1840:     listresp.name = NULL;",
          "1843:     if (rc == IMAP_CMD_CONTINUE && listresp.name)",
          "1844:     {",
          "",
          "[Removed Lines]",
          "1825:     imap_fix_path(idata, mx.mbox, list, sizeof(list));",
          "1832:   imap_cmd_start(idata, tmp);",
          "1836:   idata->cmdtype = IMAP_CT_LIST;",
          "1837:   idata->cmddata = &listresp;",
          "1841:     rc = imap_cmd_step(idata);",
          "",
          "[Added Lines]",
          "1825:     imap_fix_path(mdata, mx.mbox, list, sizeof(list));",
          "1832:   imap_cmd_start(mdata, tmp);",
          "1836:   mdata->cmdtype = IMAP_CT_LIST;",
          "1837:   mdata->cmddata = &listresp;",
          "1841:     rc = imap_cmd_step(mdata);",
          "",
          "---------------",
          "--- Hunk 55 ---",
          "[Context before]",
          "1863:       completions++;",
          "1864:     }",
          "1865:   } while (rc == IMAP_CMD_CONTINUE);",
          "1868:   if (completions)",
          "1869:   {",
          "",
          "[Removed Lines]",
          "1866:   idata->cmddata = NULL;",
          "",
          "[Added Lines]",
          "1866:   mdata->cmddata = NULL;",
          "",
          "---------------",
          "--- Hunk 56 ---",
          "[Context before]",
          "1897:   struct Buffer *sync_cmd = NULL;",
          "1898:   int err_continue = MUTT_NO;",
          "1902:   if (imap_parse_path(dest, &mx))",
          "1903:   {",
          "",
          "[Removed Lines]",
          "1900:   struct ImapData *idata = mailbox->data;",
          "",
          "[Added Lines]",
          "1900:   struct ImapMboxData *mdata = mailbox->data;",
          "",
          "---------------",
          "--- Hunk 57 ---",
          "[Context before]",
          "1906:   }",
          "1910:   {",
          "1911:     mutt_debug(3, \"%s not same server as %s\\n\", dest, mailbox->path);",
          "1912:     return 1;",
          "1913:   }",
          "1916:   if (!*mbox)",
          "1917:     mutt_str_strfcpy(mbox, \"INBOX\", sizeof(mbox));",
          "1920:   sync_cmd = mutt_buffer_new();",
          "1921:   for (int i = 0; i < mailbox->msg_count; i++)",
          "",
          "[Removed Lines]",
          "1909:   if (mutt_account_match(&(idata->conn->account), &(mx.account)) == 0)",
          "1915:   imap_fix_path(idata, mx.mbox, mbox, sizeof(mbox));",
          "1918:   imap_munge_mbox_name(idata, mmbox, sizeof(mmbox), mbox);",
          "",
          "[Added Lines]",
          "1909:   if (mutt_account_match(&(mdata->conn->account), &(mx.account)) == 0)",
          "1915:   imap_fix_path(mdata, mx.mbox, mbox, sizeof(mbox));",
          "1918:   imap_munge_mbox_name(mdata, mmbox, sizeof(mmbox), mbox);",
          "",
          "---------------",
          "--- Hunk 58 ---",
          "[Context before]",
          "1923:     if (mailbox->hdrs[i]->active && mailbox->hdrs[i]->changed &&",
          "1924:         mailbox->hdrs[i]->deleted && !mailbox->hdrs[i]->purge)",
          "1925:     {",
          "1927:       if (rc < 0)",
          "1928:       {",
          "1929:         mutt_debug(1, \"could not sync\\n\");",
          "",
          "[Removed Lines]",
          "1926:       rc = imap_sync_message_for_copy(idata, mailbox->hdrs[i], sync_cmd, &err_continue);",
          "",
          "[Added Lines]",
          "1926:       rc = imap_sync_message_for_copy(mdata, mailbox->hdrs[i], sync_cmd, &err_continue);",
          "",
          "---------------",
          "--- Hunk 59 ---",
          "[Context before]",
          "1936:   do",
          "1937:   {",
          "1939:     if (!rc)",
          "1940:     {",
          "1941:       mutt_debug(1, \"No messages to trash\\n\");",
          "",
          "[Removed Lines]",
          "1938:     rc = imap_exec_msgset(idata, \"UID COPY\", mmbox, MUTT_TRASH, false, false);",
          "",
          "[Added Lines]",
          "1938:     rc = imap_exec_msgset(mdata, \"UID COPY\", mmbox, MUTT_TRASH, false, false);",
          "",
          "---------------",
          "--- Hunk 60 ---",
          "[Context before]",
          "1954:     }",
          "1958:     if (rc == -2)",
          "1959:     {",
          "1960:       if (triedcreate)",
          "",
          "[Removed Lines]",
          "1957:     rc = imap_exec(idata, NULL, IMAP_CMD_FAIL_OK);",
          "",
          "[Added Lines]",
          "1957:     rc = imap_exec(mdata, NULL, IMAP_CMD_FAIL_OK);",
          "",
          "---------------",
          "--- Hunk 61 ---",
          "[Context before]",
          "1963:         break;",
          "1964:       }",
          "1967:         break;",
          "1968:       mutt_debug(3, \"server suggests TRYCREATE\\n\");",
          "1969:       snprintf(prompt, sizeof(prompt), _(\"Create %s?\"), mbox);",
          "",
          "[Removed Lines]",
          "1966:       if (mutt_str_strncasecmp(imap_get_qualifier(idata->buf), \"[TRYCREATE]\", 11) != 0)",
          "",
          "[Added Lines]",
          "1966:       if (mutt_str_strncasecmp(imap_get_qualifier(mdata->buf), \"[TRYCREATE]\", 11) != 0)",
          "",
          "---------------",
          "--- Hunk 62 ---",
          "[Context before]",
          "1972:         mutt_clear_error();",
          "1973:         goto out;",
          "1974:       }",
          "1976:         break;",
          "1977:       triedcreate = true;",
          "1978:     }",
          "",
          "[Removed Lines]",
          "1975:       if (imap_create_mailbox(idata, mbox) < 0)",
          "",
          "[Added Lines]",
          "1975:       if (imap_create_mailbox(mdata, mbox) < 0)",
          "",
          "---------------",
          "--- Hunk 63 ---",
          "[Context before]",
          "1981:   if (rc != 0)",
          "1982:   {",
          "1984:     goto out;",
          "1985:   }",
          "",
          "[Removed Lines]",
          "1983:     imap_error(\"imap_fast_trash\", idata->buf);",
          "",
          "[Added Lines]",
          "1983:     imap_error(\"imap_fast_trash\", mdata->buf);",
          "",
          "---------------",
          "--- Hunk 64 ---",
          "[Context before]",
          "2008:   int oldsort;",
          "2009:   int rc;",
          "2014:   {",
          "2015:     mutt_debug(2, \"no mailbox selected\\n\");",
          "2016:     return -1;",
          "",
          "[Removed Lines]",
          "2011:   struct ImapData *idata = ctx->mailbox->data;",
          "2013:   if (idata->state < IMAP_SELECTED)",
          "",
          "[Added Lines]",
          "2011:   struct ImapMboxData *mdata = ctx->mailbox->data;",
          "2013:   if (mdata->state < IMAP_SELECTED)",
          "",
          "---------------",
          "--- Hunk 65 ---",
          "[Context before]",
          "2021:   imap_allow_reopen(ctx);",
          "2024:   if (rc != 0)",
          "2025:     return rc;",
          "2028:   if (expunge && mutt_bit_isset(ctx->mailbox->rights, MUTT_ACL_DELETE))",
          "2029:   {",
          "2031:                           MUTT_DELETED, true, false);",
          "2032:     if (rc < 0)",
          "2033:     {",
          "",
          "[Removed Lines]",
          "2023:   rc = imap_check(idata, false);",
          "2030:     rc = imap_exec_msgset(idata, \"UID STORE\", \"+FLAGS.SILENT (\\\\Deleted)\",",
          "",
          "[Added Lines]",
          "2023:   rc = imap_check(mdata, false);",
          "2030:     rc = imap_exec_msgset(mdata, \"UID STORE\", \"+FLAGS.SILENT (\\\\Deleted)\",",
          "",
          "---------------",
          "--- Hunk 66 ---",
          "[Context before]",
          "2049:   }",
          "2051: #ifdef USE_HCACHE",
          "2053: #endif",
          "",
          "[Removed Lines]",
          "2052:   idata->hcache = imap_hcache_open(idata, NULL);",
          "",
          "[Added Lines]",
          "2052:   mdata->hcache = imap_hcache_open(mdata, NULL);",
          "",
          "---------------",
          "--- Hunk 67 ---",
          "[Context before]",
          "2060:     if (e->deleted)",
          "2061:     {",
          "2063: #ifdef USE_HCACHE",
          "2065: #endif",
          "2066:     }",
          "2068:     if (e->active && e->changed)",
          "2069:     {",
          "2070: #ifdef USE_HCACHE",
          "2072: #endif",
          "",
          "[Removed Lines]",
          "2062:       imap_cache_del(idata, e);",
          "2064:       imap_hcache_del(idata, HEADER_DATA(e)->uid);",
          "2071:       imap_hcache_put(idata, e);",
          "",
          "[Added Lines]",
          "2062:       imap_cache_del(mdata, e);",
          "2064:       imap_hcache_del(mdata, HEADER_DATA(e)->uid);",
          "2071:       imap_hcache_put(mdata, e);",
          "",
          "---------------",
          "--- Hunk 68 ---",
          "[Context before]",
          "2092:   }",
          "2094: #ifdef USE_HCACHE",
          "2096: #endif",
          "",
          "[Removed Lines]",
          "2095:   imap_hcache_close(idata);",
          "",
          "[Added Lines]",
          "2095:   imap_hcache_close(mdata);",
          "",
          "---------------",
          "--- Hunk 69 ---",
          "[Context before]",
          "2109:           mutt_get_sort_func(SORT_ORDER));",
          "2110:   }",
          "2113:   if (rc >= 0)",
          "2115:   if (rc >= 0)",
          "2117:   if (rc >= 0)",
          "2119:   if (rc >= 0)",
          "2122:   if (oldsort != Sort)",
          "2123:   {",
          "",
          "[Removed Lines]",
          "2112:   rc = sync_helper(idata, MUTT_ACL_DELETE, MUTT_DELETED, \"\\\\Deleted\");",
          "2114:     rc |= sync_helper(idata, MUTT_ACL_WRITE, MUTT_FLAG, \"\\\\Flagged\");",
          "2116:     rc |= sync_helper(idata, MUTT_ACL_WRITE, MUTT_OLD, \"Old\");",
          "2118:     rc |= sync_helper(idata, MUTT_ACL_SEEN, MUTT_READ, \"\\\\Seen\");",
          "2120:     rc |= sync_helper(idata, MUTT_ACL_WRITE, MUTT_REPLIED, \"\\\\Answered\");",
          "",
          "[Added Lines]",
          "2112:   rc = sync_helper(mdata, MUTT_ACL_DELETE, MUTT_DELETED, \"\\\\Deleted\");",
          "2114:     rc |= sync_helper(mdata, MUTT_ACL_WRITE, MUTT_FLAG, \"\\\\Flagged\");",
          "2116:     rc |= sync_helper(mdata, MUTT_ACL_WRITE, MUTT_OLD, \"Old\");",
          "2118:     rc |= sync_helper(mdata, MUTT_ACL_SEEN, MUTT_READ, \"\\\\Seen\");",
          "2120:     rc |= sync_helper(mdata, MUTT_ACL_WRITE, MUTT_REPLIED, \"\\\\Answered\");",
          "",
          "---------------",
          "--- Hunk 70 ---",
          "[Context before]",
          "2130:   if (rc > 0)",
          "2132:       rc = -1;",
          "2134:   if (rc < 0)",
          "",
          "[Removed Lines]",
          "2131:     if (imap_exec(idata, NULL, 0) != IMAP_CMD_OK)",
          "",
          "[Added Lines]",
          "2131:     if (imap_exec(mdata, NULL, 0) != IMAP_CMD_OK)",
          "",
          "---------------",
          "--- Hunk 71 ---",
          "[Context before]",
          "2138:       if (mutt_yesorno(_(\"Error saving flags. Close anyway?\"), 0) == MUTT_YES)",
          "2139:       {",
          "2140:         rc = 0;",
          "2142:         goto out;",
          "2143:       }",
          "2144:     }",
          "",
          "[Removed Lines]",
          "2141:         idata->state = IMAP_AUTHENTICATED;",
          "",
          "[Added Lines]",
          "2141:         mdata->state = IMAP_AUTHENTICATED;",
          "",
          "---------------",
          "--- Hunk 72 ---",
          "[Context before]",
          "2167:   {",
          "2168:     mutt_message(_(\"Expunging messages from server...\"));",
          "2172:     {",
          "2175:       rc = -1;",
          "2176:       goto out;",
          "2177:     }",
          "2179:   }",
          "2181:   if (expunge && ctx->mailbox->closing)",
          "2182:   {",
          "2185:   }",
          "2187:   if (MessageCacheClean)",
          "2190:   rc = 0;",
          "",
          "[Removed Lines]",
          "2170:     idata->reopen |= IMAP_EXPUNGE_EXPECTED;",
          "2171:     if (imap_exec(idata, \"EXPUNGE\", 0) != 0)",
          "2173:       idata->reopen &= ~IMAP_EXPUNGE_EXPECTED;",
          "2174:       imap_error(_(\"imap_sync_mailbox: EXPUNGE failed\"), idata->buf);",
          "2178:     idata->reopen &= ~IMAP_EXPUNGE_EXPECTED;",
          "2183:     imap_exec(idata, \"CLOSE\", IMAP_CMD_QUEUE);",
          "2184:     idata->state = IMAP_AUTHENTICATED;",
          "2188:     imap_cache_clean(idata);",
          "",
          "[Added Lines]",
          "2170:     mdata->reopen |= IMAP_EXPUNGE_EXPECTED;",
          "2171:     if (imap_exec(mdata, \"EXPUNGE\", 0) != 0)",
          "2173:       mdata->reopen &= ~IMAP_EXPUNGE_EXPECTED;",
          "2174:       imap_error(_(\"imap_sync_mailbox: EXPUNGE failed\"), mdata->buf);",
          "2178:     mdata->reopen &= ~IMAP_EXPUNGE_EXPECTED;",
          "2183:     imap_exec(mdata, \"CLOSE\", IMAP_CMD_QUEUE);",
          "2184:     mdata->state = IMAP_AUTHENTICATED;",
          "2188:     imap_cache_clean(mdata);",
          "",
          "---------------",
          "--- Hunk 73 ---",
          "[Context before]",
          "2204: static int imap_mbox_open(struct Context *ctx)",
          "2205: {",
          "2207:   struct ImapStatus *status = NULL;",
          "2208:   char buf[PATH_MAX];",
          "2209:   char bufout[PATH_MAX];",
          "",
          "[Removed Lines]",
          "2206:   struct ImapData *idata = NULL;",
          "",
          "[Added Lines]",
          "2206:   struct ImapMboxData *mdata = NULL;",
          "",
          "---------------",
          "--- Hunk 74 ---",
          "[Context before]",
          "2219:   }",
          "2224:     goto fail_noidata;",
          "2226:     goto fail;",
          "2233:   if (!*buf)",
          "2234:     mutt_str_strfcpy(buf, \"INBOX\", sizeof(buf));",
          "2239:   mutt_str_strfcpy(ctx->mailbox->path, buf, sizeof(ctx->mailbox->path));",
          "2240:   mutt_str_strfcpy(ctx->mailbox->realpath, ctx->mailbox->path,",
          "2241:                    sizeof(ctx->mailbox->realpath));",
          "2256:   {",
          "2257:     snprintf(bufout, sizeof(bufout), \"MYRIGHTS %s\", buf);",
          "2259:   }",
          "2261:   else",
          "2262:   {",
          "2271:   }",
          "2273:   pmx.mbox = NULL;",
          "",
          "[Removed Lines]",
          "2222:   idata = imap_conn_find(&(mx.account), MUTT_IMAP_CONN_NOSELECT);",
          "2223:   if (!idata)",
          "2225:   if (idata->state < IMAP_AUTHENTICATED)",
          "2229:   ctx->mailbox->data = idata;",
          "2232:   imap_fix_path(idata, mx.mbox, buf, sizeof(buf));",
          "2235:   FREE(&(idata->mbox_name));",
          "2236:   idata->mbox_name = mutt_str_strdup(buf);",
          "2237:   imap_qualify_path(buf, sizeof(buf), &mx, idata->mbox_name);",
          "2243:   idata->ctx = ctx;",
          "2246:   idata->status = false;",
          "2247:   memset(idata->ctx->mailbox->rights, 0, sizeof(idata->ctx->mailbox->rights));",
          "2248:   idata->new_mail_count = 0;",
          "2249:   idata->max_msn = 0;",
          "2251:   mutt_message(_(\"Selecting %s...\"), idata->mbox_name);",
          "2252:   imap_munge_mbox_name(idata, buf, sizeof(buf), idata->mbox_name);",
          "2255:   if (mutt_bit_isset(idata->capabilities, ACL))",
          "2258:     imap_exec(idata, bufout, IMAP_CMD_QUEUE);",
          "2263:     mutt_bit_set(idata->ctx->mailbox->rights, MUTT_ACL_LOOKUP);",
          "2264:     mutt_bit_set(idata->ctx->mailbox->rights, MUTT_ACL_READ);",
          "2265:     mutt_bit_set(idata->ctx->mailbox->rights, MUTT_ACL_SEEN);",
          "2266:     mutt_bit_set(idata->ctx->mailbox->rights, MUTT_ACL_WRITE);",
          "2267:     mutt_bit_set(idata->ctx->mailbox->rights, MUTT_ACL_INSERT);",
          "2268:     mutt_bit_set(idata->ctx->mailbox->rights, MUTT_ACL_POST);",
          "2269:     mutt_bit_set(idata->ctx->mailbox->rights, MUTT_ACL_CREATE);",
          "2270:     mutt_bit_set(idata->ctx->mailbox->rights, MUTT_ACL_DELETE);",
          "",
          "[Added Lines]",
          "2222:   mdata = imap_conn_find(&(mx.account), MUTT_IMAP_CONN_NOSELECT);",
          "2223:   if (!mdata)",
          "2225:   if (mdata->state < IMAP_AUTHENTICATED)",
          "2229:   ctx->mailbox->data = mdata;",
          "2232:   imap_fix_path(mdata, mx.mbox, buf, sizeof(buf));",
          "2235:   FREE(&(mdata->mbox_name));",
          "2236:   mdata->mbox_name = mutt_str_strdup(buf);",
          "2237:   imap_qualify_path(buf, sizeof(buf), &mx, mdata->mbox_name);",
          "2243:   mdata->ctx = ctx;",
          "2246:   mdata->status = false;",
          "2247:   memset(mdata->ctx->mailbox->rights, 0, sizeof(mdata->ctx->mailbox->rights));",
          "2248:   mdata->new_mail_count = 0;",
          "2249:   mdata->max_msn = 0;",
          "2251:   mutt_message(_(\"Selecting %s...\"), mdata->mbox_name);",
          "2252:   imap_munge_mbox_name(mdata, buf, sizeof(buf), mdata->mbox_name);",
          "2255:   if (mutt_bit_isset(mdata->capabilities, ACL))",
          "2258:     imap_exec(mdata, bufout, IMAP_CMD_QUEUE);",
          "2263:     mutt_bit_set(mdata->ctx->mailbox->rights, MUTT_ACL_LOOKUP);",
          "2264:     mutt_bit_set(mdata->ctx->mailbox->rights, MUTT_ACL_READ);",
          "2265:     mutt_bit_set(mdata->ctx->mailbox->rights, MUTT_ACL_SEEN);",
          "2266:     mutt_bit_set(mdata->ctx->mailbox->rights, MUTT_ACL_WRITE);",
          "2267:     mutt_bit_set(mdata->ctx->mailbox->rights, MUTT_ACL_INSERT);",
          "2268:     mutt_bit_set(mdata->ctx->mailbox->rights, MUTT_ACL_POST);",
          "2269:     mutt_bit_set(mdata->ctx->mailbox->rights, MUTT_ACL_CREATE);",
          "2270:     mutt_bit_set(mdata->ctx->mailbox->rights, MUTT_ACL_DELETE);",
          "",
          "---------------",
          "--- Hunk 75 ---",
          "[Context before]",
          "2279:   FREE(&pmx.mbox);",
          "2281:   if (ImapCheckSubscribed)",
          "2284: #ifdef USE_HCACHE",
          "2286:     condstore = \" (CONDSTORE)\";",
          "2287:   else",
          "2288: #endif",
          "",
          "[Removed Lines]",
          "2282:     imap_exec(idata, \"LSUB \\\"\\\" \\\"*\\\"\", IMAP_CMD_QUEUE);",
          "2285:   if (mutt_bit_isset(idata->capabilities, CONDSTORE) && ImapCondStore)",
          "",
          "[Added Lines]",
          "2282:     imap_exec(mdata, \"LSUB \\\"\\\" \\\"*\\\"\", IMAP_CMD_QUEUE);",
          "2285:   if (mutt_bit_isset(mdata->capabilities, CONDSTORE) && ImapCondStore)",
          "",
          "---------------",
          "--- Hunk 76 ---",
          "[Context before]",
          "2291:   snprintf(bufout, sizeof(bufout), \"%s %s%s\",",
          "2292:            ctx->mailbox->readonly ? \"EXAMINE\" : \"SELECT\", buf, condstore);",
          "2300:   do",
          "2301:   {",
          "2302:     char *pc = NULL;",
          "2305:     if (rc != IMAP_CMD_CONTINUE)",
          "2306:       break;",
          "2312:     if (mutt_str_strncasecmp(\"FLAGS\", pc, 5) == 0)",
          "2313:     {",
          "2316:       {",
          "2317:         mutt_debug(3, \"Getting mailbox FLAGS\\n\");",
          "2319:         if (!pc)",
          "2320:           goto fail;",
          "2321:       }",
          "",
          "[Removed Lines]",
          "2294:   idata->state = IMAP_SELECTED;",
          "2296:   imap_cmd_start(idata, bufout);",
          "2298:   status = imap_mboxcache_get(idata, idata->mbox_name, true);",
          "2304:     rc = imap_cmd_step(idata);",
          "2308:     pc = idata->buf + 2;",
          "2315:       if (STAILQ_EMPTY(&idata->flags))",
          "2318:         pc = get_flags(&idata->flags, pc);",
          "",
          "[Added Lines]",
          "2294:   mdata->state = IMAP_SELECTED;",
          "2296:   imap_cmd_start(mdata, bufout);",
          "2298:   status = imap_mboxcache_get(mdata, mdata->mbox_name, true);",
          "2304:     rc = imap_cmd_step(mdata);",
          "2308:     pc = mdata->buf + 2;",
          "2315:       if (STAILQ_EMPTY(&mdata->flags))",
          "2318:         pc = get_flags(&mdata->flags, pc);",
          "",
          "---------------",
          "--- Hunk 77 ---",
          "[Context before]",
          "2325:     {",
          "2326:       mutt_debug(3, \"Getting mailbox PERMANENTFLAGS\\n\");",
          "2330:       pc += 13;",
          "2332:       if (!pc)",
          "2333:         goto fail;",
          "2334:     }",
          "",
          "[Removed Lines]",
          "2328:       mutt_list_free(&idata->flags);",
          "2331:       pc = get_flags(&(idata->flags), pc);",
          "",
          "[Added Lines]",
          "2328:       mutt_list_free(&mdata->flags);",
          "2331:       pc = get_flags(&(mdata->flags), pc);",
          "",
          "---------------",
          "--- Hunk 78 ---",
          "[Context before]",
          "2338:       mutt_debug(3, \"Getting mailbox UIDVALIDITY\\n\");",
          "2339:       pc += 3;",
          "2340:       pc = imap_next_word(pc);",
          "2342:         goto fail;",
          "2344:     }",
          "2345:     else if (mutt_str_strncasecmp(\"OK [UIDNEXT\", pc, 11) == 0)",
          "2346:     {",
          "2347:       mutt_debug(3, \"Getting mailbox UIDNEXT\\n\");",
          "2348:       pc += 3;",
          "2349:       pc = imap_next_word(pc);",
          "2351:         goto fail;",
          "2353:     }",
          "2354:     else if (mutt_str_strncasecmp(\"OK [HIGHESTMODSEQ\", pc, 17) == 0)",
          "2355:     {",
          "2356:       mutt_debug(3, \"Getting mailbox HIGHESTMODSEQ\\n\");",
          "2357:       pc += 3;",
          "2358:       pc = imap_next_word(pc);",
          "2360:         goto fail;",
          "2362:     }",
          "2363:     else if (mutt_str_strncasecmp(\"OK [NOMODSEQ\", pc, 12) == 0)",
          "2364:     {",
          "2365:       mutt_debug(3, \"Mailbox has NOMODSEQ set\\n\");",
          "2367:     }",
          "2368:     else",
          "2369:     {",
          "2370:       pc = imap_next_word(pc);",
          "2371:       if (mutt_str_strncasecmp(\"EXISTS\", pc, 6) == 0)",
          "2372:       {",
          "2375:       }",
          "2376:     }",
          "2377:   } while (rc == IMAP_CMD_CONTINUE);",
          "2379:   if (rc == IMAP_CMD_NO)",
          "2380:   {",
          "2383:     mutt_error(\"%s\", s);",
          "2384:     goto fail;",
          "",
          "[Removed Lines]",
          "2341:       if (mutt_str_atoui(pc, &idata->uid_validity) < 0)",
          "2343:       status->uidvalidity = idata->uid_validity;",
          "2350:       if (mutt_str_atoui(pc, &idata->uidnext) < 0)",
          "2352:       status->uidnext = idata->uidnext;",
          "2359:       if (mutt_str_atoull(pc, &idata->modseq) < 0)",
          "2361:       status->modseq = idata->modseq;",
          "2366:       status->modseq = idata->modseq = 0;",
          "2373:         count = idata->new_mail_count;",
          "2374:         idata->new_mail_count = 0;",
          "",
          "[Added Lines]",
          "2341:       if (mutt_str_atoui(pc, &mdata->uid_validity) < 0)",
          "2343:       status->uidvalidity = mdata->uid_validity;",
          "2350:       if (mutt_str_atoui(pc, &mdata->uidnext) < 0)",
          "2352:       status->uidnext = mdata->uidnext;",
          "2359:       if (mutt_str_atoull(pc, &mdata->modseq) < 0)",
          "2361:       status->modseq = mdata->modseq;",
          "2366:       status->modseq = mdata->modseq = 0;",
          "2373:         count = mdata->new_mail_count;",
          "2374:         mdata->new_mail_count = 0;",
          "",
          "---------------",
          "--- Hunk 79 ---",
          "[Context before]",
          "2388:     goto fail;",
          "2393:   {",
          "2394:     mutt_debug(2, \"Mailbox is read-only.\\n\");",
          "2395:     ctx->mailbox->readonly = true;",
          "",
          "[Removed Lines]",
          "2391:   if ((mutt_str_strncasecmp(imap_get_qualifier(idata->buf), \"[READ-ONLY]\", 11) == 0) &&",
          "2392:       !mutt_bit_isset(idata->capabilities, ACL))",
          "",
          "[Added Lines]",
          "2391:   if ((mutt_str_strncasecmp(imap_get_qualifier(mdata->buf), \"[READ-ONLY]\", 11) == 0) &&",
          "2392:       !mutt_bit_isset(mdata->capabilities, ACL))",
          "",
          "---------------",
          "--- Hunk 80 ---",
          "[Context before]",
          "2399:   if (DebugLevel > 2)",
          "2400:   {",
          "2402:       mutt_debug(3, \"No folder flags found\\n\");",
          "2403:     else",
          "2404:     {",
          "",
          "[Removed Lines]",
          "2401:     if (STAILQ_EMPTY(&idata->flags))",
          "",
          "[Added Lines]",
          "2401:     if (STAILQ_EMPTY(&mdata->flags))",
          "",
          "---------------",
          "--- Hunk 81 ---",
          "[Context before]",
          "2406:       struct Buffer flag_buffer;",
          "2407:       mutt_buffer_init(&flag_buffer);",
          "2408:       mutt_buffer_printf(&flag_buffer, \"Mailbox flags: \");",
          "2410:       {",
          "2411:         mutt_buffer_printf(&flag_buffer, \"[%s] \", np->data);",
          "2412:       }",
          "",
          "[Removed Lines]",
          "2409:       STAILQ_FOREACH(np, &idata->flags, entries)",
          "",
          "[Added Lines]",
          "2409:       STAILQ_FOREACH(np, &mdata->flags, entries)",
          "",
          "---------------",
          "--- Hunk 82 ---",
          "[Context before]",
          "2415:     }",
          "2416:   }",
          "2422:   {",
          "2423:     ctx->mailbox->readonly = true;",
          "2424:   }",
          "",
          "[Removed Lines]",
          "2418:   if (!(mutt_bit_isset(idata->ctx->mailbox->rights, MUTT_ACL_DELETE) ||",
          "2419:         mutt_bit_isset(idata->ctx->mailbox->rights, MUTT_ACL_SEEN) ||",
          "2420:         mutt_bit_isset(idata->ctx->mailbox->rights, MUTT_ACL_WRITE) ||",
          "2421:         mutt_bit_isset(idata->ctx->mailbox->rights, MUTT_ACL_INSERT)))",
          "",
          "[Added Lines]",
          "2418:   if (!(mutt_bit_isset(mdata->ctx->mailbox->rights, MUTT_ACL_DELETE) ||",
          "2419:         mutt_bit_isset(mdata->ctx->mailbox->rights, MUTT_ACL_SEEN) ||",
          "2420:         mutt_bit_isset(mdata->ctx->mailbox->rights, MUTT_ACL_WRITE) ||",
          "2421:         mutt_bit_isset(mdata->ctx->mailbox->rights, MUTT_ACL_INSERT)))",
          "",
          "---------------",
          "--- Hunk 83 ---",
          "[Context before]",
          "2428:   ctx->mailbox->v2r = mutt_mem_calloc(count, sizeof(int));",
          "2429:   ctx->mailbox->msg_count = 0;",
          "2432:   {",
          "2433:     mutt_error(_(\"Error opening mailbox\"));",
          "2434:     goto fail;",
          "",
          "[Removed Lines]",
          "2431:   if (count && (imap_read_headers(idata, 1, count, true) < 0))",
          "",
          "[Added Lines]",
          "2431:   if (count && (imap_read_headers(mdata, 1, count, true) < 0))",
          "",
          "---------------",
          "--- Hunk 84 ---",
          "[Context before]",
          "2439:   return 0;",
          "2441: fail:",
          "2444: fail_noidata:",
          "2445:   FREE(&mx.mbox);",
          "2446:   return -1;",
          "",
          "[Removed Lines]",
          "2442:   if (idata->state == IMAP_SELECTED)",
          "2443:     idata->state = IMAP_AUTHENTICATED;",
          "",
          "[Added Lines]",
          "2442:   if (mdata->state == IMAP_SELECTED)",
          "2443:     mdata->state = IMAP_AUTHENTICATED;",
          "",
          "---------------",
          "--- Hunk 85 ---",
          "[Context before]",
          "2452: static int imap_mbox_open_append(struct Context *ctx, int flags)",
          "2453: {",
          "2455:   char mailbox[PATH_MAX];",
          "2456:   struct ImapMbox mx;",
          "2457:   int rc;",
          "",
          "[Removed Lines]",
          "2454:   struct ImapData *idata = NULL;",
          "",
          "[Added Lines]",
          "2454:   struct ImapMboxData *mdata = NULL;",
          "",
          "---------------",
          "--- Hunk 86 ---",
          "[Context before]",
          "2467:   {",
          "2468:     FREE(&mx.mbox);",
          "2469:     return -1;",
          "2470:   }",
          "2475:   if (!*mailbox)",
          "2476:     mutt_str_strfcpy(mailbox, \"INBOX\", sizeof(mailbox));",
          "2477:   FREE(&mx.mbox);",
          "",
          "[Removed Lines]",
          "2465:   idata = imap_conn_find(&(mx.account), 0);",
          "2466:   if (!idata)",
          "2472:   ctx->mailbox->data = idata;",
          "2474:   imap_fix_path(idata, mx.mbox, mailbox, sizeof(mailbox));",
          "",
          "[Added Lines]",
          "2465:   mdata = imap_conn_find(&(mx.account), 0);",
          "2466:   if (!mdata)",
          "2472:   ctx->mailbox->data = mdata;",
          "2474:   imap_fix_path(mdata, mx.mbox, mailbox, sizeof(mailbox));",
          "",
          "---------------",
          "--- Hunk 87 ---",
          "[Context before]",
          "2488:   if (Confirmcreate && mutt_yesorno(buf, 1) != MUTT_YES)",
          "2489:     return -1;",
          "2492:     return -1;",
          "2494:   return 0;",
          "",
          "[Removed Lines]",
          "2491:   if (imap_create_mailbox(idata, mailbox) < 0)",
          "",
          "[Added Lines]",
          "2491:   if (imap_create_mailbox(mdata, mailbox) < 0)",
          "",
          "---------------",
          "--- Hunk 88 ---",
          "[Context before]",
          "2520: static int imap_mbox_close(struct Context *ctx)",
          "2521: {",
          "2525:     return 0;",
          "2536:   {",
          "2538:     {",
          "2541:       if (!ctx->deleted)",
          "2544:     }",
          "2556:     for (int i = 0; i < IMAP_CACHE_LEN; i++)",
          "2557:     {",
          "2559:       {",
          "2562:       }",
          "2563:     }",
          "2566:   }",
          "",
          "[Removed Lines]",
          "2522:   struct ImapData *idata = ctx->mailbox->data;",
          "2524:   if (!idata)",
          "2535:   if (ctx == idata->ctx)",
          "2537:     if (idata->status != IMAP_FATAL && idata->state >= IMAP_SELECTED)",
          "2542:         imap_exec(idata, \"CLOSE\", IMAP_CMD_QUEUE);",
          "2543:       idata->state = IMAP_AUTHENTICATED;",
          "2546:     idata->reopen &= IMAP_REOPEN_ALLOW;",
          "2547:     FREE(&(idata->mbox_name));",
          "2548:     mutt_list_free(&idata->flags);",
          "2549:     idata->ctx = NULL;",
          "2551:     mutt_hash_destroy(&idata->uid_hash);",
          "2552:     FREE(&idata->msn_index);",
          "2553:     idata->msn_index_size = 0;",
          "2554:     idata->max_msn = 0;",
          "2558:       if (idata->cache[i].path)",
          "2560:         unlink(idata->cache[i].path);",
          "2561:         FREE(&idata->cache[i].path);",
          "2565:     mutt_bcache_close(&idata->bcache);",
          "",
          "[Added Lines]",
          "2522:   struct ImapMboxData *mdata = ctx->mailbox->data;",
          "2524:   if (!mdata)",
          "2535:   if (ctx == mdata->ctx)",
          "2537:     if (mdata->status != IMAP_FATAL && mdata->state >= IMAP_SELECTED)",
          "2542:         imap_exec(mdata, \"CLOSE\", IMAP_CMD_QUEUE);",
          "2543:       mdata->state = IMAP_AUTHENTICATED;",
          "2546:     mdata->reopen &= IMAP_REOPEN_ALLOW;",
          "2547:     FREE(&(mdata->mbox_name));",
          "2548:     mutt_list_free(&mdata->flags);",
          "2549:     mdata->ctx = NULL;",
          "2551:     mutt_hash_destroy(&mdata->uid_hash);",
          "2552:     FREE(&mdata->msn_index);",
          "2553:     mdata->msn_index_size = 0;",
          "2554:     mdata->max_msn = 0;",
          "2558:       if (mdata->cache[i].path)",
          "2560:         unlink(mdata->cache[i].path);",
          "2561:         FREE(&mdata->cache[i].path);",
          "2565:     mutt_bcache_close(&mdata->bcache);",
          "",
          "---------------",
          "--- Hunk 89 ---",
          "[Context before]",
          "2570:   {",
          "2572:     if (ctx->mailbox->hdrs[i] && ctx->mailbox->hdrs[i]->data)",
          "2574:   }",
          "2576:   return 0;",
          "",
          "[Removed Lines]",
          "2573:       imap_free_header_data((struct ImapHeaderData **) &(ctx->mailbox->hdrs[i]->data));",
          "",
          "[Added Lines]",
          "2573:       imap_free_email_data((struct ImapEmailData **) &(ctx->mailbox->hdrs[i]->data));",
          "",
          "---------------",
          "--- Hunk 90 ---",
          "[Context before]",
          "2601: {",
          "2602:   char *new = NULL;",
          "2603:   char *checker = NULL;",
          "2608:   {",
          "2609:     mutt_error(_(\"IMAP server doesn't support custom flags\"));",
          "2610:     return -1;",
          "",
          "[Removed Lines]",
          "2604:   struct ImapData *idata = ctx->mailbox->data;",
          "2607:   if (!imap_has_flag(&idata->flags, NULL))",
          "",
          "[Added Lines]",
          "2604:   struct ImapMboxData *mdata = ctx->mailbox->data;",
          "2607:   if (!imap_has_flag(&mdata->flags, NULL))",
          "",
          "---------------",
          "--- Hunk 91 ---",
          "[Context before]",
          "2688:   struct Buffer *cmd = NULL;",
          "2689:   char uid[11];",
          "2693:   if (*buf == '\\0')",
          "2694:     buf = NULL;",
          "2697:     return 0;",
          "2699:   snprintf(uid, sizeof(uid), \"%u\", HEADER_DATA(e)->uid);",
          "",
          "[Removed Lines]",
          "2691:   struct ImapData *idata = ctx->mailbox->data;",
          "2696:   if (!mutt_bit_isset(idata->ctx->mailbox->rights, MUTT_ACL_WRITE))",
          "",
          "[Added Lines]",
          "2691:   struct ImapMboxData *mdata = ctx->mailbox->data;",
          "2696:   if (!mutt_bit_isset(mdata->ctx->mailbox->rights, MUTT_ACL_WRITE))",
          "",
          "---------------",
          "--- Hunk 92 ---",
          "[Context before]",
          "2720:     {",
          "2721:       mutt_buffer_free(&cmd);",
          "2722:       return -1;",
          "",
          "[Removed Lines]",
          "2719:     if (imap_exec(idata, cmd->data, 0) != 0)",
          "",
          "[Added Lines]",
          "2719:     if (imap_exec(mdata, cmd->data, 0) != 0)",
          "",
          "---------------",
          "--- Hunk 93 ---",
          "[Context before]",
          "2741:     mutt_buffer_addstr(cmd, buf);",
          "2742:     mutt_buffer_addstr(cmd, \")\");",
          "2745:     {",
          "2746:       mutt_debug(1, \"fail to add new flags\\n\");",
          "2747:       mutt_buffer_free(&cmd);",
          "",
          "[Removed Lines]",
          "2744:     if (imap_exec(idata, cmd->data, 0) != 0)",
          "",
          "[Added Lines]",
          "2744:     if (imap_exec(mdata, cmd->data, 0) != 0)",
          "",
          "---------------"
        ],
        "imap/imap_private.h||imap/imap_private.h": [
          "File: imap/imap_private.h -> imap/imap_private.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: struct ConnAccount;",
          "36: struct Context;",
          "37: struct Email;",
          "39: struct ImapMbox;",
          "40: struct Message;",
          "41: struct Progress;",
          "",
          "[Removed Lines]",
          "38: struct ImapHeaderData;",
          "",
          "[Added Lines]",
          "38: struct ImapEmailData;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "202: };",
          "210: {",
          "211:   struct Connection *conn;",
          "212:   bool recovering;",
          "",
          "[Removed Lines]",
          "209: struct ImapData",
          "",
          "[Added Lines]",
          "209: struct ImapMboxData",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "298:                      int flag, bool changed, bool invert);",
          "306: bool imap_has_flag(struct ListHead *flag_list, const char *flag);",
          "315: bool imap_code(const char *s);",
          "326: int imap_append_message(struct Context *ctx, struct Message *msg);",
          "328: int imap_msg_open(struct Context *ctx, struct Message *msg, int msgno);",
          "",
          "[Removed Lines]",
          "292: int imap_check(struct ImapData *idata, bool force);",
          "293: int imap_create_mailbox(struct ImapData *idata, char *mailbox);",
          "294: int imap_rename_mailbox(struct ImapData *idata, struct ImapMbox *mx, const char *newname);",
          "295: struct ImapStatus *imap_mboxcache_get(struct ImapData *idata, const char *mbox, bool create);",
          "296: void imap_mboxcache_free(struct ImapData *idata);",
          "297: int imap_exec_msgset(struct ImapData *idata, const char *pre, const char *post,",
          "299: int imap_open_connection(struct ImapData *idata);",
          "300: void imap_close_connection(struct ImapData *idata);",
          "301: struct ImapData *imap_conn_find(const struct ConnAccount *account, int flags);",
          "302: int imap_read_literal(FILE *fp, struct ImapData *idata, unsigned long bytes, struct Progress *pbar);",
          "303: void imap_expunge_mailbox(struct ImapData *idata);",
          "304: void imap_logout(struct ImapData **idata);",
          "305: int imap_sync_message_for_copy(struct ImapData *idata, struct Email *e, struct Buffer *cmd, int *err_continue);",
          "309: int imap_authenticate(struct ImapData *idata);",
          "312: int imap_cmd_start(struct ImapData *idata, const char *cmdstr);",
          "313: int imap_cmd_step(struct ImapData *idata);",
          "314: void imap_cmd_finish(struct ImapData *idata);",
          "316: const char *imap_cmd_trailer(struct ImapData *idata);",
          "317: int imap_exec(struct ImapData *idata, const char *cmdstr, int flags);",
          "318: int imap_cmd_idle(struct ImapData *idata);",
          "321: void imap_free_header_data(struct ImapHeaderData **data);",
          "322: int imap_read_headers(struct ImapData *idata, unsigned int msn_begin, unsigned int msn_end, bool initial_download);",
          "323: char *imap_set_flags(struct ImapData *idata, struct Email *e, char *s, int *server_changes);",
          "324: int imap_cache_del(struct ImapData *idata, struct Email *e);",
          "325: int imap_cache_clean(struct ImapData *idata);",
          "",
          "[Added Lines]",
          "292: int imap_check(struct ImapMboxData *mdata, bool force);",
          "293: int imap_create_mailbox(struct ImapMboxData *mdata, char *mailbox);",
          "294: int imap_rename_mailbox(struct ImapMboxData *mdata, struct ImapMbox *mx, const char *newname);",
          "295: struct ImapStatus *imap_mboxcache_get(struct ImapMboxData *mdata, const char *mbox, bool create);",
          "296: void imap_mboxcache_free(struct ImapMboxData *mdata);",
          "297: int imap_exec_msgset(struct ImapMboxData *mdata, const char *pre, const char *post,",
          "299: int imap_open_connection(struct ImapMboxData *mdata);",
          "300: void imap_close_connection(struct ImapMboxData *mdata);",
          "301: struct ImapMboxData *imap_conn_find(const struct ConnAccount *account, int flags);",
          "302: int imap_read_literal(FILE *fp, struct ImapMboxData *mdata, unsigned long bytes, struct Progress *pbar);",
          "303: void imap_expunge_mailbox(struct ImapMboxData *mdata);",
          "304: void imap_logout(struct ImapMboxData **mdata);",
          "305: int imap_sync_message_for_copy(struct ImapMboxData *mdata, struct Email *e, struct Buffer *cmd, int *err_continue);",
          "309: int imap_authenticate(struct ImapMboxData *mdata);",
          "312: int imap_cmd_start(struct ImapMboxData *mdata, const char *cmdstr);",
          "313: int imap_cmd_step(struct ImapMboxData *mdata);",
          "314: void imap_cmd_finish(struct ImapMboxData *mdata);",
          "316: const char *imap_cmd_trailer(struct ImapMboxData *mdata);",
          "317: int imap_exec(struct ImapMboxData *mdata, const char *cmdstr, int flags);",
          "318: int imap_cmd_idle(struct ImapMboxData *mdata);",
          "321: void imap_free_email_data(struct ImapEmailData **data);",
          "322: int imap_read_headers(struct ImapMboxData *mdata, unsigned int msn_begin, unsigned int msn_end, bool initial_download);",
          "323: char *imap_set_flags(struct ImapMboxData *mdata, struct Email *e, char *s, int *server_changes);",
          "324: int imap_cache_del(struct ImapMboxData *mdata, struct Email *e);",
          "325: int imap_cache_clean(struct ImapMboxData *mdata);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "333: #ifdef USE_HCACHE",
          "342: #endif",
          "344: int imap_continue(const char *msg, const char *resp);",
          "345: void imap_error(const char *where, const char *msg);",
          "350: int imap_get_literal_count(const char *buf, unsigned int *bytes);",
          "351: char *imap_get_qualifier(char *buf);",
          "352: int imap_mxcmp(const char *mx1, const char *mx2);",
          "",
          "[Removed Lines]",
          "334: header_cache_t *imap_hcache_open(struct ImapData *idata, const char *path);",
          "335: void imap_hcache_close(struct ImapData *idata);",
          "336: struct Email *imap_hcache_get(struct ImapData *idata, unsigned int uid);",
          "337: int imap_hcache_put(struct ImapData *idata, struct Email *e);",
          "338: int imap_hcache_del(struct ImapData *idata, unsigned int uid);",
          "339: int imap_hcache_store_uid_seqset(struct ImapData *idata);",
          "340: int imap_hcache_clear_uid_seqset(struct ImapData *idata);",
          "341: char *imap_hcache_get_uid_seqset(struct ImapData *idata);",
          "346: struct ImapData *imap_new_idata(void);",
          "347: void imap_free_idata(struct ImapData **idata);",
          "348: char *imap_fix_path(struct ImapData *idata, const char *mailbox, char *path, size_t plen);",
          "349: void imap_cachepath(struct ImapData *idata, const char *mailbox, char *dest, size_t dlen);",
          "",
          "[Added Lines]",
          "334: header_cache_t *imap_hcache_open(struct ImapMboxData *mdata, const char *path);",
          "335: void imap_hcache_close(struct ImapMboxData *mdata);",
          "336: struct Email *imap_hcache_get(struct ImapMboxData *mdata, unsigned int uid);",
          "337: int imap_hcache_put(struct ImapMboxData *mdata, struct Email *e);",
          "338: int imap_hcache_del(struct ImapMboxData *mdata, unsigned int uid);",
          "339: int imap_hcache_store_uid_seqset(struct ImapMboxData *mdata);",
          "340: int imap_hcache_clear_uid_seqset(struct ImapMboxData *mdata);",
          "341: char *imap_hcache_get_uid_seqset(struct ImapMboxData *mdata);",
          "346: struct ImapMboxData *imap_new_idata(void);",
          "347: void imap_free_idata(struct ImapMboxData **mdata);",
          "348: char *imap_fix_path(struct ImapMboxData *mdata, const char *mailbox, char *path, size_t plen);",
          "349: void imap_cachepath(struct ImapMboxData *mdata, const char *mailbox, char *dest, size_t dlen);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "354: void imap_qualify_path(char *buf, size_t buflen, struct ImapMbox *mx, char *path);",
          "355: void imap_quote_string(char *dest, size_t dlen, const char *src, bool quote_backtick);",
          "356: void imap_unquote_string(char *s);",
          "359: struct SeqsetIterator *mutt_seqset_iterator_new(const char *seqset);",
          "360: int mutt_seqset_iterator_next(struct SeqsetIterator *iter, unsigned int *next);",
          "361: void mutt_seqset_iterator_free(struct SeqsetIterator **p_iter);",
          "",
          "[Removed Lines]",
          "357: void imap_munge_mbox_name(struct ImapData *idata, char *dest, size_t dlen, const char *src);",
          "358: void imap_unmunge_mbox_name(struct ImapData *idata, char *s);",
          "",
          "[Added Lines]",
          "357: void imap_munge_mbox_name(struct ImapMboxData *mdata, char *dest, size_t dlen, const char *src);",
          "358: void imap_unmunge_mbox_name(struct ImapMboxData *mdata, char *s);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "363: void imap_get_parent(const char *mbox, char delim, char *buf, size_t buflen);",
          "368: void imap_allow_reopen(struct Context *ctx);",
          "369: void imap_disallow_reopen(struct Context *ctx);",
          "",
          "[Removed Lines]",
          "366: void imap_utf_encode(struct ImapData *idata, char **s);",
          "367: void imap_utf_decode(struct ImapData *idata, char **s);",
          "",
          "[Added Lines]",
          "366: void imap_utf_encode(struct ImapMboxData *mdata, char **s);",
          "367: void imap_utf_decode(struct ImapMboxData *mdata, char **s);",
          "",
          "---------------"
        ],
        "imap/message.c||imap/message.c": [
          "File: imap/message.c -> imap/message.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "68: char *ImapHeaders; ///< Config: (imap) Additional email headers to download when getting index",
          "75: {",
          "78: }",
          "88: {",
          "89:   char mailbox[PATH_MAX];",
          "97: }",
          "107: {",
          "109:     return NULL;",
          "112:   char id[64];",
          "115: }",
          "125: {",
          "127:     return NULL;",
          "130:   char id[64];",
          "133: }",
          "143: {",
          "145:     return -1;",
          "148:   char id[64];",
          "152: }",
          "",
          "[Removed Lines]",
          "74: static struct ImapHeaderData *new_header_data(void)",
          "76:   struct ImapHeaderData *d = mutt_mem_calloc(1, sizeof(struct ImapHeaderData));",
          "77:   return d;",
          "87: static struct BodyCache *msg_cache_open(struct ImapData *idata)",
          "91:   if (idata->bcache)",
          "92:     return idata->bcache;",
          "94:   imap_cachepath(idata, idata->mbox_name, mailbox, sizeof(mailbox));",
          "96:   return mutt_bcache_open(&idata->conn->account, mailbox);",
          "106: static FILE *msg_cache_get(struct ImapData *idata, struct Email *e)",
          "108:   if (!idata || !e)",
          "111:   idata->bcache = msg_cache_open(idata);",
          "113:   snprintf(id, sizeof(id), \"%u-%u\", idata->uid_validity, HEADER_DATA(e)->uid);",
          "114:   return mutt_bcache_get(idata->bcache, id);",
          "124: static FILE *msg_cache_put(struct ImapData *idata, struct Email *e)",
          "126:   if (!idata || !e)",
          "129:   idata->bcache = msg_cache_open(idata);",
          "131:   snprintf(id, sizeof(id), \"%u-%u\", idata->uid_validity, HEADER_DATA(e)->uid);",
          "132:   return mutt_bcache_put(idata->bcache, id);",
          "142: static int msg_cache_commit(struct ImapData *idata, struct Email *e)",
          "144:   if (!idata || !e)",
          "147:   idata->bcache = msg_cache_open(idata);",
          "149:   snprintf(id, sizeof(id), \"%u-%u\", idata->uid_validity, HEADER_DATA(e)->uid);",
          "151:   return mutt_bcache_commit(idata->bcache, id);",
          "",
          "[Added Lines]",
          "74: static struct ImapEmailData *new_header_data(void)",
          "76:   return mutt_mem_calloc(1, sizeof(struct ImapEmailData));",
          "86: static struct BodyCache *msg_cache_open(struct ImapMboxData *mdata)",
          "90:   if (mdata->bcache)",
          "91:     return mdata->bcache;",
          "93:   imap_cachepath(mdata, mdata->mbox_name, mailbox, sizeof(mailbox));",
          "95:   return mutt_bcache_open(&mdata->conn->account, mailbox);",
          "105: static FILE *msg_cache_get(struct ImapMboxData *mdata, struct Email *e)",
          "107:   if (!mdata || !e)",
          "110:   mdata->bcache = msg_cache_open(mdata);",
          "112:   snprintf(id, sizeof(id), \"%u-%u\", mdata->uid_validity, HEADER_DATA(e)->uid);",
          "113:   return mutt_bcache_get(mdata->bcache, id);",
          "123: static FILE *msg_cache_put(struct ImapMboxData *mdata, struct Email *e)",
          "125:   if (!mdata || !e)",
          "128:   mdata->bcache = msg_cache_open(mdata);",
          "130:   snprintf(id, sizeof(id), \"%u-%u\", mdata->uid_validity, HEADER_DATA(e)->uid);",
          "131:   return mutt_bcache_put(mdata->bcache, id);",
          "141: static int msg_cache_commit(struct ImapMboxData *mdata, struct Email *e)",
          "143:   if (!mdata || !e)",
          "146:   mdata->bcache = msg_cache_open(mdata);",
          "148:   snprintf(id, sizeof(id), \"%u-%u\", mdata->uid_validity, HEADER_DATA(e)->uid);",
          "150:   return mutt_bcache_commit(mdata->bcache, id);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "158: static int msg_cache_clean_cb(const char *id, struct BodyCache *bcache, void *data)",
          "159: {",
          "160:   unsigned int uv, uid;",
          "163:   if (sscanf(id, \"%u-%u\", &uv, &uid) != 2)",
          "164:     return 0;",
          "168:     mutt_bcache_del(bcache, id);",
          "170:   return 0;",
          "",
          "[Removed Lines]",
          "161:   struct ImapData *idata = data;",
          "167:   if (uv != idata->uid_validity || !mutt_hash_int_find(idata->uid_hash, uid))",
          "",
          "[Added Lines]",
          "160:   struct ImapMboxData *mdata = data;",
          "166:   if (uv != mdata->uid_validity || !mutt_hash_int_find(mdata->uid_hash, uid))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "180: static char *msg_parse_flags(struct ImapHeader *h, char *s)",
          "181: {",
          "185:   if (mutt_str_strncasecmp(\"FLAGS\", s, 5) != 0)",
          "",
          "[Removed Lines]",
          "182:   struct ImapHeaderData *hd = h->data;",
          "",
          "[Added Lines]",
          "181:   struct ImapEmailData *edata = h->data;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "196:   }",
          "197:   s++;",
          "209:   while (*s && *s != ')')",
          "",
          "[Removed Lines]",
          "199:   FREE(&hd->flags_system);",
          "200:   FREE(&hd->flags_remote);",
          "202:   hd->deleted = false;",
          "203:   hd->flagged = false;",
          "204:   hd->replied = false;",
          "205:   hd->read = false;",
          "206:   hd->old = false;",
          "",
          "[Added Lines]",
          "198:   FREE(&edata->flags_system);",
          "199:   FREE(&edata->flags_remote);",
          "201:   edata->deleted = false;",
          "202:   edata->flagged = false;",
          "203:   edata->replied = false;",
          "204:   edata->read = false;",
          "205:   edata->old = false;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "211:     if (mutt_str_strncasecmp(\"\\\\deleted\", s, 8) == 0)",
          "212:     {",
          "213:       s += 8;",
          "215:     }",
          "216:     else if (mutt_str_strncasecmp(\"\\\\flagged\", s, 8) == 0)",
          "217:     {",
          "218:       s += 8;",
          "220:     }",
          "221:     else if (mutt_str_strncasecmp(\"\\\\answered\", s, 9) == 0)",
          "222:     {",
          "223:       s += 9;",
          "225:     }",
          "226:     else if (mutt_str_strncasecmp(\"\\\\seen\", s, 5) == 0)",
          "227:     {",
          "228:       s += 5;",
          "230:     }",
          "231:     else if (mutt_str_strncasecmp(\"\\\\recent\", s, 7) == 0)",
          "232:       s += 7;",
          "233:     else if (mutt_str_strncasecmp(\"old\", s, 3) == 0)",
          "234:     {",
          "235:       s += 3;",
          "237:     }",
          "238:     else",
          "239:     {",
          "",
          "[Removed Lines]",
          "214:       hd->deleted = true;",
          "219:       hd->flagged = true;",
          "224:       hd->replied = true;",
          "229:       hd->read = true;",
          "236:       hd->old = MarkOld ? true : false;",
          "",
          "[Added Lines]",
          "213:       edata->deleted = true;",
          "218:       edata->flagged = true;",
          "223:       edata->replied = true;",
          "228:       edata->read = true;",
          "235:       edata->old = MarkOld ? true : false;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "251:       if (is_system_keyword)",
          "254:       else",
          "258:     }",
          "",
          "[Removed Lines]",
          "252:         mutt_str_append_item(&hd->flags_system, flag_word, ' ');",
          "255:         mutt_str_append_item(&hd->flags_remote, flag_word, ' ');",
          "",
          "[Added Lines]",
          "251:         mutt_str_append_item(&edata->flags_system, flag_word, ' ');",
          "254:         mutt_str_append_item(&edata->flags_remote, flag_word, ' ');",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "395:   int parse_rc;",
          "399:   if (buf[0] != '*')",
          "400:     return rc;",
          "",
          "[Removed Lines]",
          "397:   struct ImapData *idata = mailbox->data;",
          "",
          "[Added Lines]",
          "396:   struct ImapMboxData *mdata = mailbox->data;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "426:   if (imap_get_literal_count(buf, &bytes) == 0)",
          "427:   {",
          "435:       return rc;",
          "438:       return rc;",
          "439:   }",
          "",
          "[Removed Lines]",
          "428:     imap_read_literal(fp, idata, bytes, NULL);",
          "434:     if (imap_cmd_step(idata) != IMAP_CMD_CONTINUE)",
          "437:     if (msg_parse_fetch(h, idata->buf) == -1)",
          "",
          "[Added Lines]",
          "427:     imap_read_literal(fp, mdata, bytes, NULL);",
          "433:     if (imap_cmd_step(mdata) != IMAP_CMD_CONTINUE)",
          "436:     if (msg_parse_fetch(h, mdata->buf) == -1)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "472: {",
          "473:   bool abort = false;",
          "",
          "[Removed Lines]",
          "471: static bool query_abort_header_download(struct ImapData *idata)",
          "",
          "[Added Lines]",
          "470: static bool query_abort_header_download(struct ImapMboxData *mdata)",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "477:   if (mutt_yesorno(_(\"Abort download and close mailbox?\"), MUTT_YES) == MUTT_YES)",
          "478:   {",
          "479:     abort = true;",
          "481:   }",
          "482:   SigInt = 0;",
          "",
          "[Removed Lines]",
          "480:     imap_close_connection(idata);",
          "",
          "[Added Lines]",
          "479:     imap_close_connection(mdata);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "495: {",
          "496:   size_t new_size;",
          "499:     return;",
          "",
          "[Removed Lines]",
          "494: static void alloc_msn_index(struct ImapData *idata, size_t msn_count)",
          "498:   if (msn_count <= idata->msn_index_size)",
          "",
          "[Added Lines]",
          "493: static void alloc_msn_index(struct ImapMboxData *mdata, size_t msn_count)",
          "497:   if (msn_count <= mdata->msn_index_size)",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "511:   new_size = msn_count + 25;",
          "515:   else",
          "516:   {",
          "520:   }",
          "523: }",
          "534: {",
          "537: }",
          "",
          "[Removed Lines]",
          "513:   if (!idata->msn_index)",
          "514:     idata->msn_index = mutt_mem_calloc(new_size, sizeof(struct Email *));",
          "517:     mutt_mem_realloc(&idata->msn_index, sizeof(struct Email *) * new_size);",
          "518:     memset(idata->msn_index + idata->msn_index_size, 0,",
          "519:            sizeof(struct Email *) * (new_size - idata->msn_index_size));",
          "522:   idata->msn_index_size = new_size;",
          "533: static void imap_alloc_uid_hash(struct ImapData *idata, unsigned int msn_count)",
          "535:   if (!idata->uid_hash)",
          "536:     idata->uid_hash = mutt_hash_int_create(MAX(6 * msn_count / 5, 30), 0);",
          "",
          "[Added Lines]",
          "512:   if (!mdata->msn_index)",
          "513:     mdata->msn_index = mutt_mem_calloc(new_size, sizeof(struct Email *));",
          "516:     mutt_mem_realloc(&mdata->msn_index, sizeof(struct Email *) * new_size);",
          "517:     memset(mdata->msn_index + mdata->msn_index_size, 0,",
          "518:            sizeof(struct Email *) * (new_size - mdata->msn_index_size));",
          "521:   mdata->msn_index_size = new_size;",
          "532: static void imap_alloc_uid_hash(struct ImapMboxData *mdata, unsigned int msn_count)",
          "534:   if (!mdata->uid_hash)",
          "535:     mdata->uid_hash = mutt_hash_int_create(MAX(6 * msn_count / 5, 30), 0);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "554:                                   unsigned int msn_begin, unsigned int msn_end)",
          "555: {",
          "556:   int chunks = 0;",
          "",
          "[Removed Lines]",
          "553: static void imap_fetch_msn_seqset(struct Buffer *b, struct ImapData *idata,",
          "",
          "[Added Lines]",
          "552: static void imap_fetch_msn_seqset(struct Buffer *b, struct ImapMboxData *mdata,",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "561:   for (unsigned int msn = msn_begin; msn <= (msn_end + 1); msn++)",
          "562:   {",
          "564:     {",
          "565:       switch (state)",
          "566:       {",
          "",
          "[Removed Lines]",
          "563:     if ((msn <= msn_end) && !idata->msn_index[msn - 1])",
          "",
          "[Added Lines]",
          "562:     if ((msn <= msn_end) && !mdata->msn_index[msn - 1])",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "659:                                           unsigned int msn_end, unsigned int uidnext,",
          "660:                                           bool store_flag_updates, bool eval_condstore)",
          "661: {",
          "662:   struct Progress progress;",
          "663:   char buf[LONG_STRING];",
          "666:   int idx = ctx->mailbox->msg_count;",
          "",
          "[Removed Lines]",
          "658: static int read_headers_normal_eval_cache(struct ImapData *idata,",
          "665:   struct Context *ctx = idata->ctx;",
          "",
          "[Added Lines]",
          "657: static int read_headers_normal_eval_cache(struct ImapMboxData *mdata,",
          "664:   struct Context *ctx = mdata->ctx;",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "675:   snprintf(buf, sizeof(buf), \"UID FETCH 1:%u (UID%s)\", uidnext - 1,",
          "676:            eval_condstore ? \"\" : \" FLAGS\");",
          "680:   int rc = IMAP_CMD_CONTINUE;",
          "681:   int mfhrc = 0;",
          "682:   struct ImapHeader h;",
          "683:   for (int msgno = 1; rc == IMAP_CMD_CONTINUE; msgno++)",
          "684:   {",
          "686:       return -1;",
          "688:     mutt_progress_update(&progress, msgno, -1);",
          "690:     memset(&h, 0, sizeof(h));",
          "692:     do",
          "693:     {",
          "695:       if (rc != IMAP_CMD_CONTINUE)",
          "696:         break;",
          "699:       if (mfhrc < 0)",
          "700:         continue;",
          "",
          "[Removed Lines]",
          "678:   imap_cmd_start(idata, buf);",
          "685:     if (SigInt && query_abort_header_download(idata))",
          "691:     h.data = mutt_mem_calloc(1, sizeof(struct ImapHeaderData));",
          "694:       rc = imap_cmd_step(idata);",
          "698:       mfhrc = msg_fetch_header(ctx->mailbox, &h, idata->buf, NULL);",
          "",
          "[Added Lines]",
          "677:   imap_cmd_start(mdata, buf);",
          "684:     if (SigInt && query_abort_header_download(mdata))",
          "690:     h.data = mutt_mem_calloc(1, sizeof(struct ImapEmailData));",
          "693:       rc = imap_cmd_step(mdata);",
          "697:       mfhrc = msg_fetch_header(ctx->mailbox, &h, mdata->buf, NULL);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "713:         continue;",
          "714:       }",
          "717:       {",
          "718:         mutt_debug(2, \"skipping hcache FETCH for duplicate message %d\\n\", h.data->msn);",
          "719:         continue;",
          "720:       }",
          "723:       if (ctx->mailbox->hdrs[idx])",
          "724:       {",
          "729:         ctx->mailbox->hdrs[idx]->index = idx;",
          "",
          "[Removed Lines]",
          "716:       if (idata->msn_index[h.data->msn - 1])",
          "722:       ctx->mailbox->hdrs[idx] = imap_hcache_get(idata, h.data->uid);",
          "725:         idata->max_msn = MAX(idata->max_msn, h.data->msn);",
          "726:         idata->msn_index[h.data->msn - 1] = ctx->mailbox->hdrs[idx];",
          "727:         mutt_hash_int_insert(idata->uid_hash, h.data->uid, ctx->mailbox->hdrs[idx]);",
          "",
          "[Added Lines]",
          "715:       if (mdata->msn_index[h.data->msn - 1])",
          "721:       ctx->mailbox->hdrs[idx] = imap_hcache_get(mdata, h.data->uid);",
          "724:         mdata->max_msn = MAX(mdata->max_msn, h.data->msn);",
          "725:         mdata->msn_index[h.data->msn - 1] = ctx->mailbox->hdrs[idx];",
          "726:         mutt_hash_int_insert(mdata->uid_hash, h.data->uid, ctx->mailbox->hdrs[idx]);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "762:         if (!eval_condstore && store_flag_updates)",
          "765:         h.data = NULL;",
          "766:         idx++;",
          "767:       }",
          "768:     } while (mfhrc == -1);",
          "772:     if ((mfhrc < -1) || ((rc != IMAP_CMD_CONTINUE) && (rc != IMAP_CMD_OK)))",
          "773:       return -1;",
          "",
          "[Removed Lines]",
          "763:           imap_hcache_put(idata, ctx->mailbox->hdrs[idx]);",
          "770:     imap_free_header_data(&h.data);",
          "",
          "[Added Lines]",
          "762:           imap_hcache_put(mdata, ctx->mailbox->hdrs[idx]);",
          "769:     imap_free_email_data(&h.data);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "792: {",
          "793:   int rc;",
          "794:   unsigned int uid = 0;",
          "796:   mutt_debug(2, \"Reading uid seqset from header cache\\n\");",
          "798:   unsigned int msn = 1;",
          "800:   struct SeqsetIterator *iter = mutt_seqset_iterator_new(uid_seqset);",
          "",
          "[Removed Lines]",
          "791: static int read_headers_qresync_eval_cache(struct ImapData *idata, char *uid_seqset)",
          "797:   struct Context *ctx = idata->ctx;",
          "",
          "[Added Lines]",
          "790: static int read_headers_qresync_eval_cache(struct ImapMboxData *mdata, char *uid_seqset)",
          "796:   struct Context *ctx = mdata->ctx;",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "805:   {",
          "812:     if (e)",
          "813:     {",
          "817:       if (ctx->mailbox->msg_count >= ctx->mailbox->hdrmax)",
          "818:         mx_alloc_memory(ctx->mailbox);",
          "823:       e->index = ctx->mailbox->msg_count;",
          "824:       e->active = true;",
          "825:       e->changed = false;",
          "836:       ctx->mailbox->size += e->content->length;",
          "837:       ctx->mailbox->hdrs[ctx->mailbox->msg_count++] = e;",
          "",
          "[Removed Lines]",
          "808:     if (msn > idata->msn_index_size)",
          "809:       alloc_msn_index(idata, msn);",
          "811:     struct Email *e = imap_hcache_get(idata, uid);",
          "814:       idata->max_msn = MAX(idata->max_msn, msn);",
          "815:       idata->msn_index[msn - 1] = e;",
          "820:       struct ImapHeaderData *ihd = mutt_mem_calloc(1, sizeof(struct ImapHeaderData));",
          "821:       e->data = ihd;",
          "826:       ihd->read = e->read;",
          "827:       ihd->old = e->old;",
          "828:       ihd->deleted = e->deleted;",
          "829:       ihd->flagged = e->flagged;",
          "830:       ihd->replied = e->replied;",
          "832:       ihd->msn = msn;",
          "833:       ihd->uid = uid;",
          "834:       mutt_hash_int_insert(idata->uid_hash, uid, e);",
          "",
          "[Added Lines]",
          "807:     if (msn > mdata->msn_index_size)",
          "808:       alloc_msn_index(mdata, msn);",
          "810:     struct Email *e = imap_hcache_get(mdata, uid);",
          "813:       mdata->max_msn = MAX(mdata->max_msn, msn);",
          "814:       mdata->msn_index[msn - 1] = e;",
          "819:       struct ImapEmailData *edata = mutt_mem_calloc(1, sizeof(struct ImapEmailData));",
          "820:       e->data = edata;",
          "825:       edata->read = e->read;",
          "826:       edata->old = e->old;",
          "827:       edata->deleted = e->deleted;",
          "828:       edata->flagged = e->flagged;",
          "829:       edata->replied = e->replied;",
          "831:       edata->msn = msn;",
          "832:       edata->uid = uid;",
          "833:       mutt_hash_int_insert(mdata->uid_hash, uid, e);",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "861:                                                   unsigned int msn_end, unsigned int uidnext,",
          "862:                                                   unsigned long long hc_modseq, bool eval_qresync)",
          "863: {",
          "",
          "[Removed Lines]",
          "860: static int read_headers_condstore_qresync_updates(struct ImapData *idata,",
          "",
          "[Added Lines]",
          "859: static int read_headers_condstore_qresync_updates(struct ImapMboxData *mdata,",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "865:   char buf[LONG_STRING];",
          "866:   unsigned int header_msn = 0;",
          "871:   mutt_progress_init(&progress, _(\"Fetching flag updates...\"),",
          "",
          "[Removed Lines]",
          "868:   struct Context *ctx = idata->ctx;",
          "",
          "[Added Lines]",
          "867:   struct Context *ctx = mdata->ctx;",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "874:   snprintf(buf, sizeof(buf), \"UID FETCH 1:%u (FLAGS) (CHANGEDSINCE %llu%s)\",",
          "875:            uidnext - 1, hc_modseq, eval_qresync ? \" VANISHED\" : \"\");",
          "879:   int rc = IMAP_CMD_CONTINUE;",
          "880:   for (int msgno = 1; rc == IMAP_CMD_CONTINUE; msgno++)",
          "881:   {",
          "883:       return -1;",
          "885:     mutt_progress_update(&progress, msgno, -1);",
          "889:     if (rc != IMAP_CMD_CONTINUE)",
          "890:       break;",
          "895:     if (fetch_buf[0] != '*')",
          "896:       continue;",
          "",
          "[Removed Lines]",
          "877:   imap_cmd_start(idata, buf);",
          "882:     if (SigInt && query_abort_header_download(idata))",
          "888:     rc = imap_cmd_step(idata);",
          "894:     char *fetch_buf = idata->buf;",
          "",
          "[Added Lines]",
          "876:   imap_cmd_start(mdata, buf);",
          "881:     if (SigInt && query_abort_header_download(mdata))",
          "887:     rc = imap_cmd_step(mdata);",
          "893:     char *fetch_buf = mdata->buf;",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "899:     if (!isdigit((unsigned char) *fetch_buf) || (mutt_str_atoui(fetch_buf, &header_msn) < 0))",
          "900:       continue;",
          "903:     {",
          "904:       mutt_debug(1, \"skipping CONDSTORE flag update for unknown message number %u\\n\", header_msn);",
          "905:       continue;",
          "906:     }",
          "909:   }",
          "914:   ctx->mailbox->changed = false;",
          "918:   {",
          "923:   }",
          "925:   return 0;",
          "",
          "[Removed Lines]",
          "902:     if ((header_msn < 1) || (header_msn > msn_end) || !idata->msn_index[header_msn - 1])",
          "908:     imap_hcache_put(idata, idata->msn_index[header_msn - 1]);",
          "913:   idata->check_status &= ~IMAP_FLAGS_PENDING;",
          "917:   if (idata->reopen & IMAP_EXPUNGE_PENDING)",
          "919:     imap_hcache_close(idata);",
          "920:     imap_expunge_mailbox(idata);",
          "921:     idata->hcache = imap_hcache_open(idata, NULL);",
          "922:     idata->reopen &= ~IMAP_EXPUNGE_PENDING;",
          "",
          "[Added Lines]",
          "901:     if ((header_msn < 1) || (header_msn > msn_end) || !mdata->msn_index[header_msn - 1])",
          "907:     imap_hcache_put(mdata, mdata->msn_index[header_msn - 1]);",
          "912:   mdata->check_status &= ~IMAP_FLAGS_PENDING;",
          "916:   if (mdata->reopen & IMAP_EXPUNGE_PENDING)",
          "918:     imap_hcache_close(mdata);",
          "919:     imap_expunge_mailbox(mdata);",
          "920:     mdata->hcache = imap_hcache_open(mdata, NULL);",
          "921:     mdata->reopen &= ~IMAP_EXPUNGE_PENDING;",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "941:                                   unsigned int msn_end, bool evalhc,",
          "942:                                   unsigned int *maxuid, bool initial_download)",
          "943: {",
          "",
          "[Removed Lines]",
          "940: static int read_headers_fetch_new(struct ImapData *idata, unsigned int msn_begin,",
          "",
          "[Added Lines]",
          "939: static int read_headers_fetch_new(struct ImapMboxData *mdata, unsigned int msn_begin,",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "953:       \"CONTENT-DESCRIPTION IN-REPLY-TO REPLY-TO LINES LIST-POST X-LABEL \"",
          "954:       \"X-ORIGINAL-TO\";",
          "957:   int idx = ctx->mailbox->msg_count;",
          "960:   {",
          "961:     safe_asprintf(&hdrreq, \"BODY.PEEK[HEADER.FIELDS (%s%s%s)]\", want_headers,",
          "962:                   ImapHeaders ? \" \" : \"\", NONULL(ImapHeaders));",
          "963:   }",
          "965:   {",
          "966:     safe_asprintf(&hdrreq, \"RFC822.HEADER.LINES (%s%s%s)\", want_headers,",
          "967:                   ImapHeaders ? \" \" : \"\", NONULL(ImapHeaders));",
          "",
          "[Removed Lines]",
          "956:   struct Context *ctx = idata->ctx;",
          "959:   if (mutt_bit_isset(idata->capabilities, IMAP4REV1))",
          "964:   else if (mutt_bit_isset(idata->capabilities, IMAP4))",
          "",
          "[Added Lines]",
          "955:   struct Context *ctx = mdata->ctx;",
          "958:   if (mutt_bit_isset(mdata->capabilities, IMAP4REV1))",
          "963:   else if (mutt_bit_isset(mdata->capabilities, IMAP4))",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "993:     {",
          "995:       evalhc = false;",
          "997:     }",
          "998:     else",
          "999:       mutt_buffer_printf(b, \"%u:%u\", msn_begin, msn_end);",
          "",
          "[Removed Lines]",
          "996:       imap_fetch_msn_seqset(b, idata, msn_begin, msn_end);",
          "",
          "[Added Lines]",
          "995:       imap_fetch_msn_seqset(b, mdata, msn_begin, msn_end);",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "1001:     fetch_msn_end = msn_end;",
          "1002:     char *cmd = NULL;",
          "1003:     safe_asprintf(&cmd, \"FETCH %s (UID FLAGS INTERNALDATE RFC822.SIZE %s)\", b->data, hdrreq);",
          "1005:     FREE(&cmd);",
          "1006:     mutt_buffer_free(&b);",
          "1008:     rc = IMAP_CMD_CONTINUE;",
          "1009:     for (int msgno = msn_begin; rc == IMAP_CMD_CONTINUE; msgno++)",
          "1010:     {",
          "1012:         goto bail;",
          "1014:       mutt_progress_update(&progress, msgno, -1);",
          "",
          "[Removed Lines]",
          "1004:     imap_cmd_start(idata, cmd);",
          "1011:       if (initial_download && SigInt && query_abort_header_download(idata))",
          "",
          "[Added Lines]",
          "1003:     imap_cmd_start(mdata, cmd);",
          "1010:       if (initial_download && SigInt && query_abort_header_download(mdata))",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "1024:       do",
          "1025:       {",
          "1027:         if (rc != IMAP_CMD_CONTINUE)",
          "1028:           break;",
          "1031:         if (mfhrc < 0)",
          "1032:           continue;",
          "",
          "[Removed Lines]",
          "1026:         rc = imap_cmd_step(idata);",
          "1030:         mfhrc = msg_fetch_header(ctx->mailbox, &h, idata->buf, fp);",
          "",
          "[Added Lines]",
          "1025:         rc = imap_cmd_step(mdata);",
          "1029:         mfhrc = msg_fetch_header(ctx->mailbox, &h, mdata->buf, fp);",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "1048:         }",
          "1052:         {",
          "1053:           mutt_debug(2, \"skipping FETCH response for duplicate message %d\\n\",",
          "1054:                      h.data->msn);",
          "",
          "[Removed Lines]",
          "1051:         if (idata->msn_index[h.data->msn - 1])",
          "",
          "[Added Lines]",
          "1050:         if (mdata->msn_index[h.data->msn - 1])",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "1058:         ctx->mailbox->hdrs[idx] = mutt_email_new();",
          "1064:         ctx->mailbox->hdrs[idx]->index = idx;",
          "",
          "[Removed Lines]",
          "1060:         idata->max_msn = MAX(idata->max_msn, h.data->msn);",
          "1061:         idata->msn_index[h.data->msn - 1] = ctx->mailbox->hdrs[idx];",
          "1062:         mutt_hash_int_insert(idata->uid_hash, h.data->uid, ctx->mailbox->hdrs[idx]);",
          "",
          "[Added Lines]",
          "1059:         mdata->max_msn = MAX(mdata->max_msn, h.data->msn);",
          "1060:         mdata->msn_index[h.data->msn - 1] = ctx->mailbox->hdrs[idx];",
          "1061:         mutt_hash_int_insert(mdata->uid_hash, h.data->uid, ctx->mailbox->hdrs[idx]);",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "1090:         ctx->mailbox->size += h.content_length;",
          "1092: #ifdef USE_HCACHE",
          "1096:         ctx->mailbox->msg_count++;",
          "",
          "[Removed Lines]",
          "1093:         imap_hcache_put(idata, ctx->mailbox->hdrs[idx]);",
          "",
          "[Added Lines]",
          "1092:         imap_hcache_put(mdata, ctx->mailbox->hdrs[idx]);",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "1099:         idx++;",
          "1100:       } while (mfhrc == -1);",
          "1104:       if ((mfhrc < -1) || ((rc != IMAP_CMD_CONTINUE) && (rc != IMAP_CMD_OK)))",
          "1105:         goto bail;",
          "",
          "[Removed Lines]",
          "1102:       imap_free_header_data(&h.data);",
          "",
          "[Added Lines]",
          "1101:       imap_free_email_data(&h.data);",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "1115:     {",
          "1120:       while (msn_end > ctx->mailbox->hdrmax)",
          "1121:         mx_alloc_memory(ctx->mailbox);",
          "1125:     }",
          "1126:   }",
          "",
          "[Removed Lines]",
          "1114:     if (idata->reopen & IMAP_NEWMAIL_PENDING)",
          "1117:       fetch_msn_end = idata->max_msn;",
          "1118:       msn_begin = idata->max_msn + 1;",
          "1119:       msn_end = idata->new_mail_count;",
          "1122:       alloc_msn_index(idata, msn_end);",
          "1123:       idata->reopen &= ~IMAP_NEWMAIL_PENDING;",
          "1124:       idata->new_mail_count = 0;",
          "",
          "[Added Lines]",
          "1113:     if (mdata->reopen & IMAP_NEWMAIL_PENDING)",
          "1116:       fetch_msn_end = mdata->max_msn;",
          "1117:       msn_begin = mdata->max_msn + 1;",
          "1118:       msn_end = mdata->new_mail_count;",
          "1121:       alloc_msn_index(mdata, msn_end);",
          "1122:       mdata->reopen &= ~IMAP_NEWMAIL_PENDING;",
          "1123:       mdata->new_mail_count = 0;",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "1151:                       unsigned int msn_end, bool initial_download)",
          "1152: {",
          "1153:   struct ImapStatus *status = NULL;",
          "",
          "[Removed Lines]",
          "1150: int imap_read_headers(struct ImapData *idata, unsigned int msn_begin,",
          "",
          "[Added Lines]",
          "1149: int imap_read_headers(struct ImapMboxData *mdata, unsigned int msn_begin,",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "1169:   char *uid_seqset = NULL;",
          "1175:   while (msn_end > ctx->mailbox->hdrmax)",
          "1176:     mx_alloc_memory(ctx->mailbox);",
          "1180:   oldmsgcount = ctx->mailbox->msg_count;",
          "1184: #ifdef USE_HCACHE",
          "1188:   {",
          "1191:     if (puidnext)",
          "1192:     {",
          "1193:       uidnext = *(unsigned int *) puidnext;",
          "1195:     }",
          "1198:     {",
          "1200:         has_condstore = true;",
          "1207:         has_qresync = true;",
          "1208:     }",
          "1211:     {",
          "1212:       evalhc = true;",
          "1214:       if (pmodseq)",
          "1215:       {",
          "1216:         hc_modseq = *pmodseq;",
          "1218:       }",
          "1219:       if (hc_modseq)",
          "1220:       {",
          "1221:         if (has_qresync)",
          "1222:         {",
          "1224:           if (uid_seqset)",
          "1225:             eval_qresync = true;",
          "1226:         }",
          "",
          "[Removed Lines]",
          "1172:   struct Context *ctx = idata->ctx;",
          "1177:   alloc_msn_index(idata, msn_end);",
          "1178:   imap_alloc_uid_hash(idata, msn_end);",
          "1181:   idata->reopen &= ~(IMAP_REOPEN_ALLOW | IMAP_NEWMAIL_PENDING);",
          "1182:   idata->new_mail_count = 0;",
          "1185:   idata->hcache = imap_hcache_open(idata, NULL);",
          "1187:   if (idata->hcache && initial_download)",
          "1189:     uid_validity = mutt_hcache_fetch_raw(idata->hcache, \"/UIDVALIDITY\", 12);",
          "1190:     puidnext = mutt_hcache_fetch_raw(idata->hcache, \"/UIDNEXT\", 8);",
          "1194:       mutt_hcache_free(idata->hcache, &puidnext);",
          "1197:     if (idata->modseq)",
          "1199:       if (mutt_bit_isset(idata->capabilities, CONDSTORE) && ImapCondStore)",
          "1206:       if (idata->qresync)",
          "1210:     if (uid_validity && uidnext && (*(unsigned int *) uid_validity == idata->uid_validity))",
          "1213:       pmodseq = mutt_hcache_fetch_raw(idata->hcache, \"/MODSEQ\", 7);",
          "1217:         mutt_hcache_free(idata->hcache, (void **) &pmodseq);",
          "1223:           uid_seqset = imap_hcache_get_uid_seqset(idata);",
          "",
          "[Added Lines]",
          "1171:   struct Context *ctx = mdata->ctx;",
          "1176:   alloc_msn_index(mdata, msn_end);",
          "1177:   imap_alloc_uid_hash(mdata, msn_end);",
          "1180:   mdata->reopen &= ~(IMAP_REOPEN_ALLOW | IMAP_NEWMAIL_PENDING);",
          "1181:   mdata->new_mail_count = 0;",
          "1184:   mdata->hcache = imap_hcache_open(mdata, NULL);",
          "1186:   if (mdata->hcache && initial_download)",
          "1188:     uid_validity = mutt_hcache_fetch_raw(mdata->hcache, \"/UIDVALIDITY\", 12);",
          "1189:     puidnext = mutt_hcache_fetch_raw(mdata->hcache, \"/UIDNEXT\", 8);",
          "1193:       mutt_hcache_free(mdata->hcache, &puidnext);",
          "1196:     if (mdata->modseq)",
          "1198:       if (mutt_bit_isset(mdata->capabilities, CONDSTORE) && ImapCondStore)",
          "1205:       if (mdata->qresync)",
          "1209:     if (uid_validity && uidnext && (*(unsigned int *) uid_validity == mdata->uid_validity))",
          "1212:       pmodseq = mutt_hcache_fetch_raw(mdata->hcache, \"/MODSEQ\", 7);",
          "1216:         mutt_hcache_free(mdata->hcache, (void **) &pmodseq);",
          "1222:           uid_seqset = imap_hcache_get_uid_seqset(mdata);",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "1229:           eval_condstore = true;",
          "1230:       }",
          "1231:     }",
          "1233:   }",
          "1234:   if (evalhc)",
          "1235:   {",
          "1236:     if (eval_qresync)",
          "1237:     {",
          "1239:         goto bail;",
          "1240:     }",
          "1241:     else",
          "1242:     {",
          "1244:                                          eval_condstore) < 0)",
          "1245:         goto bail;",
          "1246:     }",
          "1249:     {",
          "1251:                                                  hc_modseq, eval_qresync) < 0)",
          "1252:       {",
          "1253:         goto bail;",
          "",
          "[Removed Lines]",
          "1232:     mutt_hcache_free(idata->hcache, &uid_validity);",
          "1238:       if (read_headers_qresync_eval_cache(idata, uid_seqset) < 0)",
          "1243:       if (read_headers_normal_eval_cache(idata, msn_end, uidnext, has_condstore || has_qresync,",
          "1248:     if ((eval_condstore || eval_qresync) && (hc_modseq != idata->modseq))",
          "1250:       if (read_headers_condstore_qresync_updates(idata, msn_end, uidnext,",
          "",
          "[Added Lines]",
          "1231:     mutt_hcache_free(mdata->hcache, &uid_validity);",
          "1237:       if (read_headers_qresync_eval_cache(mdata, uid_seqset) < 0)",
          "1242:       if (read_headers_normal_eval_cache(mdata, msn_end, uidnext, has_condstore || has_qresync,",
          "1247:     if ((eval_condstore || eval_qresync) && (hc_modseq != mdata->modseq))",
          "1249:       if (read_headers_condstore_qresync_updates(mdata, msn_end, uidnext,",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "1258:     while (msn_begin <= msn_end)",
          "1259:     {",
          "1261:         break;",
          "1262:       msn_begin++;",
          "1263:     }",
          "1264:   }",
          "1268:     goto bail;",
          "1271:       (status->uidnext < maxuid + 1))",
          "1272:   {",
          "1273:     status->uidnext = maxuid + 1;",
          "1274:   }",
          "1276: #ifdef USE_HCACHE",
          "1280:   {",
          "1283:   }",
          "1285:   {",
          "1288:   }",
          "",
          "[Removed Lines]",
          "1260:       if (!idata->msn_index[msn_begin - 1])",
          "1267:   if (read_headers_fetch_new(idata, msn_begin, msn_end, evalhc, &maxuid, initial_download) < 0)",
          "1270:   if (maxuid && (status = imap_mboxcache_get(idata, idata->mbox_name, 0)) &&",
          "1277:   mutt_hcache_store_raw(idata->hcache, \"/UIDVALIDITY\", 12, &idata->uid_validity,",
          "1278:                         sizeof(idata->uid_validity));",
          "1279:   if (maxuid && idata->uidnext < maxuid + 1)",
          "1281:     mutt_debug(2, \"Overriding UIDNEXT: %u -> %u\\n\", idata->uidnext, maxuid + 1);",
          "1282:     idata->uidnext = maxuid + 1;",
          "1284:   if (idata->uidnext > 1)",
          "1286:     mutt_hcache_store_raw(idata->hcache, \"/UIDNEXT\", 8, &idata->uidnext,",
          "1287:                           sizeof(idata->uidnext));",
          "",
          "[Added Lines]",
          "1259:       if (!mdata->msn_index[msn_begin - 1])",
          "1266:   if (read_headers_fetch_new(mdata, msn_begin, msn_end, evalhc, &maxuid, initial_download) < 0)",
          "1269:   if (maxuid && (status = imap_mboxcache_get(mdata, mdata->mbox_name, 0)) &&",
          "1276:   mutt_hcache_store_raw(mdata->hcache, \"/UIDVALIDITY\", 12, &mdata->uid_validity,",
          "1277:                         sizeof(mdata->uid_validity));",
          "1278:   if (maxuid && mdata->uidnext < maxuid + 1)",
          "1280:     mutt_debug(2, \"Overriding UIDNEXT: %u -> %u\\n\", mdata->uidnext, maxuid + 1);",
          "1281:     mdata->uidnext = maxuid + 1;",
          "1283:   if (mdata->uidnext > 1)",
          "1285:     mutt_hcache_store_raw(mdata->hcache, \"/UIDNEXT\", 8, &mdata->uidnext,",
          "1286:                           sizeof(mdata->uidnext));",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "1296:   {",
          "1297:     if (has_condstore || has_qresync)",
          "1298:     {",
          "1301:     }",
          "1302:     else",
          "1305:     if (has_qresync)",
          "1307:     else",
          "1309:   }",
          "",
          "[Removed Lines]",
          "1299:       mutt_hcache_store_raw(idata->hcache, \"/MODSEQ\", 7, &idata->modseq,",
          "1300:                             sizeof(idata->modseq));",
          "1303:       mutt_hcache_delete(idata->hcache, \"/MODSEQ\", 7);",
          "1306:       imap_hcache_store_uid_seqset(idata);",
          "1308:       imap_hcache_clear_uid_seqset(idata);",
          "",
          "[Added Lines]",
          "1298:       mutt_hcache_store_raw(mdata->hcache, \"/MODSEQ\", 7, &mdata->modseq,",
          "1299:                             sizeof(mdata->modseq));",
          "1302:       mutt_hcache_delete(mdata->hcache, \"/MODSEQ\", 7);",
          "1305:       imap_hcache_store_uid_seqset(mdata);",
          "1307:       imap_hcache_clear_uid_seqset(mdata);",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "1317:     mx_update_context(ctx, ctx->mailbox->msg_count - oldmsgcount);",
          "1318:   }",
          "1322:   retval = msn_end;",
          "1324: bail:",
          "1325: #ifdef USE_HCACHE",
          "1327:   FREE(&uid_seqset);",
          "",
          "[Removed Lines]",
          "1320:   idata->reopen |= IMAP_REOPEN_ALLOW;",
          "1326:   imap_hcache_close(idata);",
          "",
          "[Added Lines]",
          "1319:   mdata->reopen |= IMAP_REOPEN_ALLOW;",
          "1325:   imap_hcache_close(mdata);",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "1352:   struct ImapMbox mx;",
          "1353:   int rc;",
          "1357:   if (imap_parse_path(ctx->mailbox->path, &mx))",
          "1358:     return -1;",
          "1361:   if (!*mailbox)",
          "1362:     mutt_str_strfcpy(mailbox, \"INBOX\", sizeof(mailbox));",
          "",
          "[Removed Lines]",
          "1355:   struct ImapData *idata = ctx->mailbox->data;",
          "1360:   imap_fix_path(idata, mx.mbox, mailbox, sizeof(mailbox));",
          "",
          "[Added Lines]",
          "1354:   struct ImapMboxData *mdata = ctx->mailbox->data;",
          "1359:   imap_fix_path(mdata, mx.mbox, mailbox, sizeof(mailbox));",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "1386:   mutt_progress_init(&progressbar, _(\"Uploading message...\"),",
          "1387:                      MUTT_PROGRESS_SIZE, NetInc, len);",
          "1390:   mutt_date_make_imap(internaldate, sizeof(internaldate), msg->received);",
          "1392:   imap_flags[0] = 0;",
          "",
          "[Removed Lines]",
          "1389:   imap_munge_mbox_name(idata, mbox, sizeof(mbox), mailbox);",
          "",
          "[Added Lines]",
          "1388:   imap_munge_mbox_name(mdata, mbox, sizeof(mbox), mailbox);",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "1404:   snprintf(buf, sizeof(buf), \"APPEND %s (%s) \\\"%s\\\" {%lu}\", mbox,",
          "1405:            imap_flags + 1, internaldate, (unsigned long) len);",
          "1409:   do",
          "1411:   while (rc == IMAP_CMD_CONTINUE);",
          "1413:   if (rc != IMAP_CMD_RESPOND)",
          "1414:   {",
          "1418:     SKIPWS(pc);",
          "1419:     pc = imap_next_word(pc);",
          "1420:     mutt_error(\"%s\", pc);",
          "",
          "[Removed Lines]",
          "1407:   imap_cmd_start(idata, buf);",
          "1410:     rc = imap_cmd_step(idata);",
          "1415:     mutt_debug(1, \"#1 command failed: %s\\n\", idata->buf);",
          "1417:     char *pc = idata->buf + SEQLEN;",
          "",
          "[Added Lines]",
          "1406:   imap_cmd_start(mdata, buf);",
          "1409:     rc = imap_cmd_step(mdata);",
          "1414:     mutt_debug(1, \"#1 command failed: %s\\n\", mdata->buf);",
          "1416:     char *pc = mdata->buf + SEQLEN;",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "1432:     if (len > sizeof(buf) - 3)",
          "1433:     {",
          "1434:       sent += len;",
          "1436:       mutt_progress_update(&progressbar, sent, -1);",
          "1437:     }",
          "1438:   }",
          "1440:   if (len)",
          "1444:   mutt_file_fclose(&fp);",
          "1446:   do",
          "1448:   while (rc == IMAP_CMD_CONTINUE);",
          "1451:   {",
          "1454:     SKIPWS(pc);",
          "1455:     pc = imap_next_word(pc);",
          "1456:     mutt_error(\"%s\", pc);",
          "",
          "[Removed Lines]",
          "1435:       flush_buffer(buf, &len, idata->conn);",
          "1441:     flush_buffer(buf, &len, idata->conn);",
          "1443:   mutt_socket_send(idata->conn, \"\\r\\n\");",
          "1447:     rc = imap_cmd_step(idata);",
          "1450:   if (!imap_code(idata->buf))",
          "1452:     mutt_debug(1, \"#2 command failed: %s\\n\", idata->buf);",
          "1453:     char *pc = idata->buf + SEQLEN;",
          "",
          "[Added Lines]",
          "1434:       flush_buffer(buf, &len, mdata->conn);",
          "1440:     flush_buffer(buf, &len, mdata->conn);",
          "1442:   mutt_socket_send(mdata->conn, \"\\r\\n\");",
          "1446:     rc = imap_cmd_step(mdata);",
          "1449:   if (!imap_code(mdata->buf))",
          "1451:     mutt_debug(1, \"#2 command failed: %s\\n\", mdata->buf);",
          "1452:     char *pc = mdata->buf + SEQLEN;",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "1486:   int err_continue = MUTT_NO;",
          "1487:   int triedcreate = 0;",
          "1491:   if (imap_parse_path(dest, &mx))",
          "1492:   {",
          "",
          "[Removed Lines]",
          "1489:   struct ImapData *idata = ctx->mailbox->data;",
          "",
          "[Added Lines]",
          "1488:   struct ImapMboxData *mdata = ctx->mailbox->data;",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "1495:   }",
          "1499:   {",
          "1500:     mutt_debug(3, \"%s not same server as %s\\n\", dest, ctx->mailbox->path);",
          "1501:     return 1;",
          "",
          "[Removed Lines]",
          "1498:   if (mutt_account_match(&(idata->conn->account), &(mx.account)) == 0)",
          "",
          "[Added Lines]",
          "1497:   if (mutt_account_match(&(mdata->conn->account), &(mx.account)) == 0)",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "1507:     return 1;",
          "1508:   }",
          "1511:   if (!*mbox)",
          "1512:     mutt_str_strfcpy(mbox, \"INBOX\", sizeof(mbox));",
          "1516:   do",
          "",
          "[Removed Lines]",
          "1510:   imap_fix_path(idata, mx.mbox, mbox, sizeof(mbox));",
          "1513:   imap_munge_mbox_name(idata, mmbox, sizeof(mmbox), mbox);",
          "",
          "[Added Lines]",
          "1509:   imap_fix_path(mdata, mx.mbox, mbox, sizeof(mbox));",
          "1512:   imap_munge_mbox_name(mdata, mmbox, sizeof(mmbox), mbox);",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "1538:         if (ctx->mailbox->hdrs[i]->active && ctx->mailbox->hdrs[i]->changed)",
          "1539:         {",
          "1541:                                           &sync_cmd, &err_continue);",
          "1542:           if (rc < 0)",
          "1543:           {",
          "",
          "[Removed Lines]",
          "1540:           rc = imap_sync_message_for_copy(idata, ctx->mailbox->hdrs[i],",
          "",
          "[Added Lines]",
          "1539:           rc = imap_sync_message_for_copy(mdata, ctx->mailbox->hdrs[i],",
          "",
          "---------------",
          "--- Hunk 49 ---",
          "[Context before]",
          "1547:         }",
          "1548:       }",
          "1551:       if (!rc)",
          "1552:       {",
          "1553:         mutt_debug(1, \"No messages tagged\\n\");",
          "",
          "[Removed Lines]",
          "1550:       rc = imap_exec_msgset(idata, \"UID COPY\", mmbox, MUTT_TAG, false, false);",
          "",
          "[Added Lines]",
          "1549:       rc = imap_exec_msgset(mdata, \"UID COPY\", mmbox, MUTT_TAG, false, false);",
          "",
          "---------------",
          "--- Hunk 50 ---",
          "[Context before]",
          "1573:       if (e->active && e->changed)",
          "1574:       {",
          "1576:         if (rc < 0)",
          "1577:         {",
          "1578:           mutt_debug(1, \"#2 could not sync\\n\");",
          "1579:           goto out;",
          "1580:         }",
          "1581:       }",
          "1583:       if (rc < 0)",
          "1584:       {",
          "1585:         mutt_debug(1, \"#2 could not queue copy\\n\");",
          "",
          "[Removed Lines]",
          "1575:         rc = imap_sync_message_for_copy(idata, e, &sync_cmd, &err_continue);",
          "1582:       rc = imap_exec(idata, cmd.data, IMAP_CMD_QUEUE);",
          "",
          "[Added Lines]",
          "1574:         rc = imap_sync_message_for_copy(mdata, e, &sync_cmd, &err_continue);",
          "1581:       rc = imap_exec(mdata, cmd.data, IMAP_CMD_QUEUE);",
          "",
          "---------------",
          "--- Hunk 51 ---",
          "[Context before]",
          "1588:     }",
          "1592:     if (rc == -2)",
          "1593:     {",
          "1594:       if (triedcreate)",
          "",
          "[Removed Lines]",
          "1591:     rc = imap_exec(idata, NULL, IMAP_CMD_FAIL_OK);",
          "",
          "[Added Lines]",
          "1590:     rc = imap_exec(mdata, NULL, IMAP_CMD_FAIL_OK);",
          "",
          "---------------",
          "--- Hunk 52 ---",
          "[Context before]",
          "1597:         break;",
          "1598:       }",
          "1601:         break;",
          "1602:       mutt_debug(3, \"server suggests TRYCREATE\\n\");",
          "1603:       snprintf(prompt, sizeof(prompt), _(\"Create %s?\"), mbox);",
          "",
          "[Removed Lines]",
          "1600:       if (mutt_str_strncasecmp(imap_get_qualifier(idata->buf), \"[TRYCREATE]\", 11) != 0)",
          "",
          "[Added Lines]",
          "1599:       if (mutt_str_strncasecmp(imap_get_qualifier(mdata->buf), \"[TRYCREATE]\", 11) != 0)",
          "",
          "---------------",
          "--- Hunk 53 ---",
          "[Context before]",
          "1606:         mutt_clear_error();",
          "1607:         goto out;",
          "1608:       }",
          "1610:         break;",
          "1611:       triedcreate = 1;",
          "1612:     }",
          "",
          "[Removed Lines]",
          "1609:       if (imap_create_mailbox(idata, mbox) < 0)",
          "",
          "[Added Lines]",
          "1608:       if (imap_create_mailbox(mdata, mbox) < 0)",
          "",
          "---------------",
          "--- Hunk 54 ---",
          "[Context before]",
          "1615:   if (rc != 0)",
          "1616:   {",
          "1618:     goto out;",
          "1619:   }",
          "",
          "[Removed Lines]",
          "1617:     imap_error(\"imap_copy_messages\", idata->buf);",
          "",
          "[Added Lines]",
          "1616:     imap_error(\"imap_copy_messages\", mdata->buf);",
          "",
          "---------------",
          "--- Hunk 55 ---",
          "[Context before]",
          "1666: {",
          "1668:     return -1;",
          "1671:   char id[64];",
          "1674: }",
          "1682: {",
          "1686:   return 0;",
          "1687: }",
          "1694: {",
          "1695:   if (!data || !*data)",
          "1696:     return;",
          "",
          "[Removed Lines]",
          "1665: int imap_cache_del(struct ImapData *idata, struct Email *e)",
          "1667:   if (!idata || !e)",
          "1670:   idata->bcache = msg_cache_open(idata);",
          "1672:   snprintf(id, sizeof(id), \"%u-%u\", idata->uid_validity, HEADER_DATA(e)->uid);",
          "1673:   return mutt_bcache_del(idata->bcache, id);",
          "1681: int imap_cache_clean(struct ImapData *idata)",
          "1683:   idata->bcache = msg_cache_open(idata);",
          "1684:   mutt_bcache_list(idata->bcache, msg_cache_clean_cb, idata);",
          "1693: void imap_free_header_data(struct ImapHeaderData **data)",
          "",
          "[Added Lines]",
          "1664: int imap_cache_del(struct ImapMboxData *mdata, struct Email *e)",
          "1666:   if (!mdata || !e)",
          "1669:   mdata->bcache = msg_cache_open(mdata);",
          "1671:   snprintf(id, sizeof(id), \"%u-%u\", mdata->uid_validity, HEADER_DATA(e)->uid);",
          "1672:   return mutt_bcache_del(mdata->bcache, id);",
          "1680: int imap_cache_clean(struct ImapMboxData *mdata)",
          "1682:   mdata->bcache = msg_cache_open(mdata);",
          "1683:   mutt_bcache_list(mdata->bcache, msg_cache_clean_cb, mdata);",
          "1692: void imap_free_email_data(struct ImapEmailData **data)",
          "",
          "---------------",
          "--- Hunk 56 ---",
          "[Context before]",
          "1723: {",
          "1725:   struct ImapHeader newh = { 0 };",
          "1727:   bool readonly;",
          "1728:   int local_changes;",
          "1730:   local_changes = e->changed;",
          "1737:   mutt_debug(2, \"parsing FLAGS\\n\");",
          "1738:   s = msg_parse_flags(&newh, s);",
          "",
          "[Removed Lines]",
          "1722: char *imap_set_flags(struct ImapData *idata, struct Email *e, char *s, int *server_changes)",
          "1724:   struct Context *ctx = idata->ctx;",
          "1726:   struct ImapHeaderData old_hd;",
          "1732:   struct ImapHeaderData *hd = e->data;",
          "1733:   newh.data = hd;",
          "1735:   memcpy(&old_hd, hd, sizeof(old_hd));",
          "",
          "[Added Lines]",
          "1721: char *imap_set_flags(struct ImapMboxData *mdata, struct Email *e, char *s, int *server_changes)",
          "1723:   struct Context *ctx = mdata->ctx;",
          "1725:   struct ImapEmailData old_edata;",
          "1731:   struct ImapEmailData *edata = e->data;",
          "1732:   newh.data = edata;",
          "1734:   memcpy(&old_edata, edata, sizeof(old_edata));",
          "",
          "---------------",
          "--- Hunk 57 ---",
          "[Context before]",
          "1740:     return NULL;",
          "",
          "[Removed Lines]",
          "1743:   driver_tags_replace(&e->tags, mutt_str_strdup(hd->flags_remote));",
          "",
          "[Added Lines]",
          "1742:   driver_tags_replace(&e->tags, mutt_str_strdup(edata->flags_remote));",
          "",
          "---------------",
          "--- Hunk 58 ---",
          "[Context before]",
          "1750:   ctx->mailbox->readonly = false;",
          "1757:   set_changed_flag(ctx, e, local_changes, server_changes, MUTT_READ,",
          "1759:   set_changed_flag(ctx, e, local_changes, server_changes, MUTT_DELETE,",
          "1761:   set_changed_flag(ctx, e, local_changes, server_changes, MUTT_FLAG,",
          "1763:   set_changed_flag(ctx, e, local_changes, server_changes, MUTT_REPLIED,",
          "",
          "[Removed Lines]",
          "1755:   set_changed_flag(ctx, e, local_changes, server_changes, MUTT_OLD, old_hd.old,",
          "1756:                    hd->old, e->old);",
          "1758:                    old_hd.read, hd->read, e->read);",
          "1760:                    old_hd.deleted, hd->deleted, e->deleted);",
          "1762:                    old_hd.flagged, hd->flagged, e->flagged);",
          "1764:                    old_hd.replied, hd->replied, e->replied);",
          "",
          "[Added Lines]",
          "1754:   set_changed_flag(ctx, e, local_changes, server_changes, MUTT_OLD,",
          "1755:                    old_edata.old, edata->old, e->old);",
          "1757:                    old_edata.read, edata->read, e->read);",
          "1759:                    old_edata.deleted, edata->deleted, e->deleted);",
          "1761:                    old_edata.flagged, edata->flagged, e->flagged);",
          "1763:                    old_edata.replied, edata->replied, e->replied);",
          "",
          "---------------",
          "--- Hunk 59 ---",
          "[Context before]",
          "1796:   bool fetched = false;",
          "1797:   int output_progress;",
          "1800:   struct Email *e = ctx->mailbox->hdrs[msgno];",
          "1803:   if (msg->fp)",
          "1804:   {",
          "1805:     if (HEADER_DATA(e)->parsed)",
          "",
          "[Removed Lines]",
          "1799:   struct ImapData *idata = ctx->mailbox->data;",
          "1802:   msg->fp = msg_cache_get(idata, e);",
          "",
          "[Added Lines]",
          "1798:   struct ImapMboxData *mdata = ctx->mailbox->data;",
          "1801:   msg->fp = msg_cache_get(mdata, e);",
          "",
          "---------------",
          "--- Hunk 60 ---",
          "[Context before]",
          "1813:   cacheno = HEADER_DATA(e)->uid % IMAP_CACHE_LEN;",
          "1816:   if (cache->path)",
          "1817:   {",
          "",
          "[Removed Lines]",
          "1814:   cache = &idata->cache[cacheno];",
          "",
          "[Added Lines]",
          "1813:   cache = &mdata->cache[cacheno];",
          "",
          "---------------",
          "--- Hunk 61 ---",
          "[Context before]",
          "1831:   if (output_progress)",
          "1832:     mutt_message(_(\"Fetching message...\"));",
          "1835:   if (!msg->fp)",
          "1836:   {",
          "1837:     cache->uid = HEADER_DATA(e)->uid;",
          "",
          "[Removed Lines]",
          "1834:   msg->fp = msg_cache_put(idata, e);",
          "",
          "[Added Lines]",
          "1833:   msg->fp = msg_cache_put(mdata, e);",
          "",
          "---------------",
          "--- Hunk 62 ---",
          "[Context before]",
          "1851:   e->active = false;",
          "1853:   snprintf(buf, sizeof(buf), \"UID FETCH %u %s\", HEADER_DATA(e)->uid,",
          "1855:                 (ImapPeek ? \"BODY.PEEK[]\" : \"BODY[]\") :",
          "1856:                 \"RFC822\"));",
          "1859:   do",
          "1860:   {",
          "1862:     if (rc != IMAP_CMD_CONTINUE)",
          "1863:       break;",
          "1866:     pc = imap_next_word(pc);",
          "1867:     pc = imap_next_word(pc);",
          "",
          "[Removed Lines]",
          "1854:            (mutt_bit_isset(idata->capabilities, IMAP4REV1) ?",
          "1858:   imap_cmd_start(idata, buf);",
          "1861:     rc = imap_cmd_step(idata);",
          "1865:     pc = idata->buf;",
          "",
          "[Added Lines]",
          "1853:            (mutt_bit_isset(mdata->capabilities, IMAP4REV1) ?",
          "1857:   imap_cmd_start(mdata, buf);",
          "1860:     rc = imap_cmd_step(mdata);",
          "1864:     pc = mdata->buf;",
          "",
          "---------------",
          "--- Hunk 63 ---",
          "[Context before]",
          "1898:             mutt_progress_init(&progressbar, _(\"Fetching message...\"),",
          "1899:                                MUTT_PROGRESS_SIZE, NetInc, bytes);",
          "1900:           }",
          "1902:                                 output_progress ? &progressbar : NULL) < 0)",
          "1903:           {",
          "1904:             goto bail;",
          "1905:           }",
          "1908:           if (rc != IMAP_CMD_CONTINUE)",
          "1909:             goto bail;",
          "1912:           fetched = true;",
          "1913:         }",
          "",
          "[Removed Lines]",
          "1901:           if (imap_read_literal(msg->fp, idata, bytes,",
          "1907:           rc = imap_cmd_step(idata);",
          "1910:           pc = idata->buf;",
          "",
          "[Added Lines]",
          "1900:           if (imap_read_literal(msg->fp, mdata, bytes,",
          "1906:           rc = imap_cmd_step(mdata);",
          "1909:           pc = mdata->buf;",
          "",
          "---------------",
          "--- Hunk 64 ---",
          "[Context before]",
          "1918:         else if ((mutt_str_strncasecmp(\"FLAGS\", pc, 5) == 0) && !e->changed)",
          "1919:         {",
          "1921:           if (!pc)",
          "1922:             goto bail;",
          "1923:         }",
          "",
          "[Removed Lines]",
          "1920:           pc = imap_set_flags(idata, e, pc, NULL);",
          "",
          "[Added Lines]",
          "1919:           pc = imap_set_flags(mdata, e, pc, NULL);",
          "",
          "---------------",
          "--- Hunk 65 ---",
          "[Context before]",
          "1938:   if (rc != IMAP_CMD_OK)",
          "1939:     goto bail;",
          "1942:     goto bail;",
          "1946: parsemsg:",
          "",
          "[Removed Lines]",
          "1941:   if (!fetched || !imap_code(idata->buf))",
          "1944:   msg_cache_commit(idata, e);",
          "",
          "[Added Lines]",
          "1940:   if (!fetched || !imap_code(mdata->buf))",
          "1943:   msg_cache_commit(mdata, e);",
          "",
          "---------------",
          "--- Hunk 66 ---",
          "[Context before]",
          "1983:   if (!retried && ((e->lines == 0) || (e->content->length == 0)))",
          "1984:   {",
          "1986:     retried = true;",
          "1987:     goto parsemsg;",
          "1988:   }",
          "",
          "[Removed Lines]",
          "1985:     imap_cache_del(idata, e);",
          "",
          "[Added Lines]",
          "1984:     imap_cache_del(mdata, e);",
          "",
          "---------------",
          "--- Hunk 67 ---",
          "[Context before]",
          "1992: bail:",
          "1993:   mutt_file_fclose(&msg->fp);",
          "1995:   if (cache->path)",
          "1996:   {",
          "1997:     unlink(cache->path);",
          "",
          "[Removed Lines]",
          "1994:   imap_cache_del(idata, e);",
          "",
          "[Added Lines]",
          "1993:   imap_cache_del(mdata, e);",
          "",
          "---------------"
        ],
        "imap/message.h||imap/message.h": [
          "File: imap/message.h -> imap/message.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: #include \"email/lib.h\"",
          "37: {",
          "39:   bool read : 1;",
          "",
          "[Removed Lines]",
          "36: struct ImapHeaderData",
          "",
          "[Added Lines]",
          "36: struct ImapEmailData",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "57: struct ImapHeader",
          "58: {",
          "61:   time_t received;",
          "62:   long content_length;",
          "63: };",
          "",
          "[Removed Lines]",
          "59:   struct ImapHeaderData *data;",
          "65: #define HEADER_DATA(ph) ((struct ImapHeaderData *) ((ph)->data))",
          "",
          "[Added Lines]",
          "59:   struct ImapEmailData *data;",
          "65: #define HEADER_DATA(ph) ((struct ImapEmailData *) ((ph)->data))",
          "",
          "---------------"
        ],
        "imap/utf7.c||imap/utf7.c": [
          "File: imap/utf7.c -> imap/utf7.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "318: {",
          "319:   if (!Charset || !s)",
          "320:     return;",
          "",
          "[Removed Lines]",
          "317: void imap_utf_encode(struct ImapData *idata, char **s)",
          "",
          "[Added Lines]",
          "317: void imap_utf_encode(struct ImapMboxData *mdata, char **s)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "323:   if (t && (mutt_ch_convert_string(&t, Charset, \"utf-8\", 0) == 0))",
          "324:   {",
          "325:     FREE(s);",
          "328:     else",
          "",
          "[Removed Lines]",
          "326:     if (idata->unicode)",
          "",
          "[Added Lines]",
          "326:     if (mdata->unicode)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "340: {",
          "341:   if (!Charset)",
          "342:     return;",
          "344:   char *t = NULL;",
          "347:     t = mutt_str_strdup(*s);",
          "348:   else",
          "349:     t = utf7_to_utf8(*s, strlen(*s), 0, 0);",
          "",
          "[Removed Lines]",
          "339: void imap_utf_decode(struct ImapData *idata, char **s)",
          "346:   if (idata->unicode)",
          "",
          "[Added Lines]",
          "339: void imap_utf_decode(struct ImapMboxData *mdata, char **s)",
          "346:   if (mdata->unicode)",
          "",
          "---------------"
        ],
        "imap/util.c||imap/util.c": [
          "File: imap/util.c -> imap/util.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "81: int imap_expand_path(char *buf, size_t buflen)",
          "82: {",
          "83:   struct ImapMbox mx;",
          "85:   struct Url url;",
          "86:   char fixedpath[LONG_STRING];",
          "87:   int rc;",
          "",
          "[Removed Lines]",
          "84:   struct ImapData *idata = NULL;",
          "",
          "[Added Lines]",
          "84:   struct ImapMboxData *mdata = NULL;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "89:   if (imap_parse_path(buf, &mx) < 0)",
          "90:     return -1;",
          "93:   mutt_account_tourl(&mx.account, &url);",
          "95:   url.path = fixedpath;",
          "97:   rc = url_tostring(&url, buf, buflen, U_DECODE_PASSWD);",
          "",
          "[Removed Lines]",
          "92:   idata = imap_conn_find(&mx.account, MUTT_IMAP_CONN_NONEW);",
          "94:   imap_fix_path(idata, mx.mbox, fixedpath, sizeof(fixedpath));",
          "",
          "[Added Lines]",
          "92:   mdata = imap_conn_find(&mx.account, MUTT_IMAP_CONN_NONEW);",
          "94:   imap_fix_path(mdata, mx.mbox, fixedpath, sizeof(fixedpath));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "156: void imap_get_parent_path(const char *path, char *buf, size_t buflen)",
          "157: {",
          "158:   struct ImapMbox mx;",
          "160:   char mbox[LONG_STRING] = \"\";",
          "162:   if (imap_parse_path(path, &mx) < 0)",
          "",
          "[Removed Lines]",
          "159:   struct ImapData *idata = NULL;",
          "",
          "[Added Lines]",
          "159:   struct ImapMboxData *mdata = NULL;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "165:     return;",
          "166:   }",
          "170:   {",
          "171:     mutt_str_strfcpy(buf, path, buflen);",
          "172:     return;",
          "173:   }",
          "182:   imap_qualify_path(buf, buflen, &mx, mbox);",
          "",
          "[Removed Lines]",
          "168:   idata = imap_conn_find(&mx.account, MUTT_IMAP_CONN_NONEW);",
          "169:   if (!idata)",
          "176:   imap_fix_path(idata, mx.mbox, mbox, sizeof(mbox));",
          "179:   imap_get_parent(mbox, idata->delim, mbox, sizeof(mbox));",
          "",
          "[Added Lines]",
          "168:   mdata = imap_conn_find(&mx.account, MUTT_IMAP_CONN_NONEW);",
          "169:   if (!mdata)",
          "176:   imap_fix_path(mdata, mx.mbox, mbox, sizeof(mbox));",
          "179:   imap_get_parent(mbox, mdata->delim, mbox, sizeof(mbox));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "193: void imap_clean_path(char *path, size_t plen)",
          "194: {",
          "195:   struct ImapMbox mx;",
          "197:   char mbox[LONG_STRING] = \"\";",
          "199:   if (imap_parse_path(path, &mx) < 0)",
          "200:     return;",
          "204:     return;",
          "210:   imap_qualify_path(path, plen, &mx, mbox);",
          "",
          "[Removed Lines]",
          "196:   struct ImapData *idata = NULL;",
          "202:   idata = imap_conn_find(&mx.account, MUTT_IMAP_CONN_NONEW);",
          "203:   if (!idata)",
          "207:   imap_fix_path(idata, mx.mbox, mbox, sizeof(mbox));",
          "",
          "[Added Lines]",
          "196:   struct ImapMboxData *mdata = NULL;",
          "202:   mdata = imap_conn_find(&mx.account, MUTT_IMAP_CONN_NONEW);",
          "203:   if (!mdata)",
          "207:   imap_fix_path(mdata, mx.mbox, mbox, sizeof(mbox));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "223: {",
          "224:   int first = 1, state = 0;",
          "225:   bool match = false;",
          "226:   unsigned int cur_uid = 0, last_uid = 0;",
          "227:   unsigned int range_begin = 0, range_end = 0;",
          "230:   {",
          "231:     match = false;",
          "233:     {",
          "235:       cur_uid = cur_header ? HEADER_DATA(cur_header)->uid : 0;",
          "236:       if (!state || (cur_uid && ((cur_uid - 1) == last_uid)))",
          "237:         match = true;",
          "",
          "[Removed Lines]",
          "222: static void imap_msn_index_to_uid_seqset(struct Buffer *b, struct ImapData *idata)",
          "229:   for (unsigned int msn = 1; msn <= idata->max_msn + 1; msn++)",
          "232:     if (msn <= idata->max_msn)",
          "234:       struct Email *cur_header = idata->msn_index[msn - 1];",
          "",
          "[Added Lines]",
          "222: static void imap_msn_index_to_uid_seqset(struct Buffer *b, struct ImapMboxData *mdata)",
          "229:   for (unsigned int msn = 1; msn <= mdata->max_msn + 1; msn++)",
          "232:     if (msn <= mdata->max_msn)",
          "234:       struct Email *cur_header = mdata->msn_index[msn - 1];",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "291: {",
          "292:   struct ImapMbox mx;",
          "293:   struct Url url;",
          "",
          "[Removed Lines]",
          "290: header_cache_t *imap_hcache_open(struct ImapData *idata, const char *path)",
          "",
          "[Added Lines]",
          "290: header_cache_t *imap_hcache_open(struct ImapMboxData *mdata, const char *path)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "295:   char mbox[PATH_MAX];",
          "297:   if (path)",
          "299:   else",
          "300:   {",
          "302:       return NULL;",
          "305:     FREE(&mx.mbox);",
          "306:   }",
          "",
          "[Removed Lines]",
          "298:     imap_cachepath(idata, path, mbox, sizeof(mbox));",
          "301:     if (!idata->ctx || imap_parse_path(idata->ctx->mailbox->path, &mx) < 0)",
          "304:     imap_cachepath(idata, mx.mbox, mbox, sizeof(mbox));",
          "",
          "[Added Lines]",
          "298:     imap_cachepath(mdata, path, mbox, sizeof(mbox));",
          "301:     if (!mdata->ctx || imap_parse_path(mdata->ctx->mailbox->path, &mx) < 0)",
          "304:     imap_cachepath(mdata, mx.mbox, mbox, sizeof(mbox));",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "311:   if ((len > 3) && (strcmp(mbox + len - 3, \"/..\") == 0))",
          "312:     return NULL;",
          "315:   url.path = mbox;",
          "316:   url_tostring(&url, cachepath, sizeof(cachepath), U_PATH);",
          "",
          "[Removed Lines]",
          "314:   mutt_account_tourl(&idata->conn->account, &url);",
          "",
          "[Added Lines]",
          "314:   mutt_account_tourl(&mdata->conn->account, &url);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "326: {",
          "328:     return;",
          "332: }",
          "342: {",
          "343:   char key[16];",
          "344:   void *uv = NULL;",
          "345:   struct Email *e = NULL;",
          "348:     return NULL;",
          "350:   sprintf(key, \"/%u\", uid);",
          "352:   if (uv)",
          "353:   {",
          "355:       e = mutt_hcache_restore(uv);",
          "356:     else",
          "357:       mutt_debug(3, \"hcache uidvalidity mismatch: %u\\n\", *(unsigned int *) uv);",
          "359:   }",
          "361:   return e;",
          "",
          "[Removed Lines]",
          "325: void imap_hcache_close(struct ImapData *idata)",
          "327:   if (!idata->hcache)",
          "330:   mutt_hcache_close(idata->hcache);",
          "331:   idata->hcache = NULL;",
          "341: struct Email *imap_hcache_get(struct ImapData *idata, unsigned int uid)",
          "347:   if (!idata->hcache)",
          "351:   uv = mutt_hcache_fetch(idata->hcache, key, imap_hcache_keylen(key));",
          "354:     if (*(unsigned int *) uv == idata->uid_validity)",
          "358:     mutt_hcache_free(idata->hcache, &uv);",
          "",
          "[Added Lines]",
          "325: void imap_hcache_close(struct ImapMboxData *mdata)",
          "327:   if (!mdata->hcache)",
          "330:   mutt_hcache_close(mdata->hcache);",
          "331:   mdata->hcache = NULL;",
          "341: struct Email *imap_hcache_get(struct ImapMboxData *mdata, unsigned int uid)",
          "347:   if (!mdata->hcache)",
          "351:   uv = mutt_hcache_fetch(mdata->hcache, key, imap_hcache_keylen(key));",
          "354:     if (*(unsigned int *) uv == mdata->uid_validity)",
          "358:     mutt_hcache_free(mdata->hcache, &uv);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "372: {",
          "373:   char key[16];",
          "376:     return -1;",
          "378:   sprintf(key, \"/%u\", HEADER_DATA(e)->uid);",
          "380: }",
          "390: {",
          "391:   char key[16];",
          "394:     return -1;",
          "396:   sprintf(key, \"/%u\", uid);",
          "398: }",
          "407: {",
          "409:     return -1;",
          "411:   struct Buffer *b = mutt_buffer_new();",
          "413:   mutt_buffer_increase_size(b, HUGE_STRING);",
          "416:   size_t seqset_size = b->dptr - b->data;",
          "417:   if (seqset_size == 0)",
          "418:     b->data[0] = '\\0';",
          "421:   mutt_debug(5, \"Stored /UIDSEQSET %s\\n\", b->data);",
          "422:   mutt_buffer_free(&b);",
          "423:   return rc;",
          "",
          "[Removed Lines]",
          "371: int imap_hcache_put(struct ImapData *idata, struct Email *e)",
          "375:   if (!idata->hcache)",
          "379:   return mutt_hcache_store(idata->hcache, key, imap_hcache_keylen(key), e, idata->uid_validity);",
          "389: int imap_hcache_del(struct ImapData *idata, unsigned int uid)",
          "393:   if (!idata->hcache)",
          "397:   return mutt_hcache_delete(idata->hcache, key, imap_hcache_keylen(key));",
          "406: int imap_hcache_store_uid_seqset(struct ImapData *idata)",
          "408:   if (!idata->hcache)",
          "414:   imap_msn_index_to_uid_seqset(b, idata);",
          "420:   int rc = mutt_hcache_store_raw(idata->hcache, \"/UIDSEQSET\", 10, b->data, seqset_size + 1);",
          "",
          "[Added Lines]",
          "371: int imap_hcache_put(struct ImapMboxData *mdata, struct Email *e)",
          "375:   if (!mdata->hcache)",
          "379:   return mutt_hcache_store(mdata->hcache, key, imap_hcache_keylen(key), e, mdata->uid_validity);",
          "389: int imap_hcache_del(struct ImapMboxData *mdata, unsigned int uid)",
          "393:   if (!mdata->hcache)",
          "397:   return mutt_hcache_delete(mdata->hcache, key, imap_hcache_keylen(key));",
          "406: int imap_hcache_store_uid_seqset(struct ImapMboxData *mdata)",
          "408:   if (!mdata->hcache)",
          "414:   imap_msn_index_to_uid_seqset(b, mdata);",
          "420:   int rc = mutt_hcache_store_raw(mdata->hcache, \"/UIDSEQSET\", 10, b->data, seqset_size + 1);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "433: {",
          "435:     return -1;",
          "438: }",
          "447: {",
          "449:     return NULL;",
          "452:   char *seqset = mutt_str_strdup(hc_seqset);",
          "454:   mutt_debug(5, \"Retrieved /UIDSEQSET %s\\n\", NONULL(seqset));",
          "456:   return seqset;",
          "",
          "[Removed Lines]",
          "432: int imap_hcache_clear_uid_seqset(struct ImapData *idata)",
          "434:   if (!idata->hcache)",
          "437:   return mutt_hcache_delete(idata->hcache, \"/UIDSEQSET\", 10);",
          "446: char *imap_hcache_get_uid_seqset(struct ImapData *idata)",
          "448:   if (!idata->hcache)",
          "451:   char *hc_seqset = mutt_hcache_fetch_raw(idata->hcache, \"/UIDSEQSET\", 10);",
          "453:   mutt_hcache_free(idata->hcache, (void **) &hc_seqset);",
          "",
          "[Added Lines]",
          "432: int imap_hcache_clear_uid_seqset(struct ImapMboxData *mdata)",
          "434:   if (!mdata->hcache)",
          "437:   return mutt_hcache_delete(mdata->hcache, \"/UIDSEQSET\", 10);",
          "446: char *imap_hcache_get_uid_seqset(struct ImapMboxData *mdata)",
          "448:   if (!mdata->hcache)",
          "451:   char *hc_seqset = mutt_hcache_fetch_raw(mdata->hcache, \"/UIDSEQSET\", 10);",
          "453:   mutt_hcache_free(mdata->hcache, (void **) &hc_seqset);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "702: }",
          "710: {",
          "721: }",
          "728: {",
          "730:     return;",
          "740: }",
          "",
          "[Removed Lines]",
          "709: struct ImapData *imap_new_idata(void)",
          "711:   struct ImapData *idata = mutt_mem_calloc(1, sizeof(struct ImapData));",
          "713:   idata->cmdbuf = mutt_buffer_new();",
          "714:   idata->cmdslots = ImapPipelineDepth + 2;",
          "715:   idata->cmds = mutt_mem_calloc(idata->cmdslots, sizeof(*idata->cmds));",
          "717:   STAILQ_INIT(&idata->flags);",
          "718:   STAILQ_INIT(&idata->mboxcache);",
          "720:   return idata;",
          "727: void imap_free_idata(struct ImapData **idata)",
          "729:   if (!idata)",
          "732:   FREE(&(*idata)->capstr);",
          "733:   mutt_list_free(&(*idata)->flags);",
          "734:   imap_mboxcache_free(*idata);",
          "735:   mutt_buffer_free(&(*idata)->cmdbuf);",
          "736:   FREE(&(*idata)->buf);",
          "737:   mutt_bcache_close(&(*idata)->bcache);",
          "738:   FREE(&(*idata)->cmds);",
          "739:   FREE(idata);",
          "",
          "[Added Lines]",
          "709: struct ImapMboxData *imap_new_idata(void)",
          "711:   struct ImapMboxData *mdata = mutt_mem_calloc(1, sizeof(struct ImapMboxData));",
          "713:   mdata->cmdbuf = mutt_buffer_new();",
          "714:   mdata->cmdslots = ImapPipelineDepth + 2;",
          "715:   mdata->cmds = mutt_mem_calloc(mdata->cmdslots, sizeof(*mdata->cmds));",
          "717:   STAILQ_INIT(&mdata->flags);",
          "718:   STAILQ_INIT(&mdata->mboxcache);",
          "720:   return mdata;",
          "727: void imap_free_idata(struct ImapMboxData **mdata)",
          "729:   if (!mdata)",
          "732:   FREE(&(*mdata)->capstr);",
          "733:   mutt_list_free(&(*mdata)->flags);",
          "734:   imap_mboxcache_free(*mdata);",
          "735:   mutt_buffer_free(&(*mdata)->cmdbuf);",
          "736:   FREE(&(*mdata)->buf);",
          "737:   mutt_bcache_close(&(*mdata)->bcache);",
          "738:   FREE(&(*mdata)->cmds);",
          "739:   FREE(mdata);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "757: {",
          "758:   int i = 0;",
          "759:   char delim = '\\0';",
          "764:   while (mailbox && *mailbox && i < plen - 1)",
          "765:   {",
          "766:     if ((ImapDelimChars && strchr(ImapDelimChars, *mailbox)) || (delim && *mailbox == delim))",
          "767:     {",
          "770:         delim = *mailbox;",
          "772:       while (*mailbox && ((ImapDelimChars && strchr(ImapDelimChars, *mailbox)) ||",
          "",
          "[Removed Lines]",
          "756: char *imap_fix_path(struct ImapData *idata, const char *mailbox, char *path, size_t plen)",
          "761:   if (idata)",
          "762:     delim = idata->delim;",
          "769:       if (!idata)",
          "",
          "[Added Lines]",
          "756: char *imap_fix_path(struct ImapMboxData *mdata, const char *mailbox, char *path, size_t plen)",
          "761:   if (mdata)",
          "762:     delim = mdata->delim;",
          "769:       if (!mdata)",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "801: {",
          "802:   char *s = NULL;",
          "803:   const char *p = mailbox;",
          "805:   for (s = dest; p && *p && dlen; dlen--)",
          "806:   {",
          "808:     {",
          "",
          "[Removed Lines]",
          "800: void imap_cachepath(struct ImapData *idata, const char *mailbox, char *dest, size_t dlen)",
          "807:     if (*p == idata->delim)",
          "",
          "[Added Lines]",
          "800: void imap_cachepath(struct ImapMboxData *mdata, const char *mailbox, char *dest, size_t dlen)",
          "807:     if (*p == mdata->delim)",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1003: {",
          "1004:   char *buf = mutt_str_strdup(src);",
          "1007:   imap_quote_string(dest, dlen, buf, false);",
          "",
          "[Removed Lines]",
          "1002: void imap_munge_mbox_name(struct ImapData *idata, char *dest, size_t dlen, const char *src)",
          "1005:   imap_utf_encode(idata, &buf);",
          "",
          "[Added Lines]",
          "1002: void imap_munge_mbox_name(struct ImapMboxData *mdata, char *dest, size_t dlen, const char *src)",
          "1005:   imap_utf_encode(mdata, &buf);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1020: {",
          "1021:   imap_unquote_string(s);",
          "1023:   char *buf = mutt_str_strdup(s);",
          "1024:   if (buf)",
          "1025:   {",
          "1027:     strncpy(s, buf, strlen(s));",
          "1028:   }",
          "",
          "[Removed Lines]",
          "1019: void imap_unmunge_mbox_name(struct ImapData *idata, char *s)",
          "1026:     imap_utf_decode(idata, &buf);",
          "",
          "[Added Lines]",
          "1019: void imap_unmunge_mbox_name(struct ImapMboxData *mdata, char *s)",
          "1026:     imap_utf_decode(mdata, &buf);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1036: void imap_keepalive(void)",
          "1037: {",
          "1038:   struct Connection *conn = NULL;",
          "1040:   time_t now = time(NULL);",
          "1042:   TAILQ_FOREACH(conn, mutt_socket_head(), entries)",
          "1043:   {",
          "1044:     if (conn->account.type == MUTT_ACCT_TYPE_IMAP)",
          "1045:     {",
          "1048:       {",
          "1050:       }",
          "1051:     }",
          "1052:   }",
          "",
          "[Removed Lines]",
          "1039:   struct ImapData *idata = NULL;",
          "1046:       idata = conn->data;",
          "1047:       if (idata->state >= IMAP_AUTHENTICATED && now >= idata->lastread + ImapKeepalive)",
          "1049:         imap_check(idata, true);",
          "",
          "[Added Lines]",
          "1039:   struct ImapMboxData *mdata = NULL;",
          "1046:       mdata = conn->data;",
          "1047:       if (mdata->state >= IMAP_AUTHENTICATED && now >= mdata->lastread + ImapKeepalive)",
          "1049:         imap_check(mdata, true);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1108: void imap_allow_reopen(struct Context *ctx)",
          "1109: {",
          "1111:   if (!ctx || !ctx->mailbox->data || ctx->mailbox->magic != MUTT_IMAP)",
          "1112:     return;",
          "1117: }",
          "",
          "[Removed Lines]",
          "1110:   struct ImapData *idata = NULL;",
          "1114:   idata = ctx->mailbox->data;",
          "1115:   if (idata->ctx == ctx)",
          "1116:     idata->reopen |= IMAP_REOPEN_ALLOW;",
          "",
          "[Added Lines]",
          "1110:   struct ImapMboxData *mdata = NULL;",
          "1114:   mdata = ctx->mailbox->data;",
          "1115:   if (mdata->ctx == ctx)",
          "1116:     mdata->reopen |= IMAP_REOPEN_ALLOW;",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1123: void imap_disallow_reopen(struct Context *ctx)",
          "1124: {",
          "1126:   if (!ctx || !ctx->mailbox->data || ctx->mailbox->magic != MUTT_IMAP)",
          "1127:     return;",
          "1132: }",
          "",
          "[Removed Lines]",
          "1125:   struct ImapData *idata = NULL;",
          "1129:   idata = ctx->mailbox->data;",
          "1130:   if (idata->ctx == ctx)",
          "1131:     idata->reopen &= ~IMAP_REOPEN_ALLOW;",
          "",
          "[Added Lines]",
          "1125:   struct ImapMboxData *mdata = NULL;",
          "1129:   mdata = ctx->mailbox->data;",
          "1130:   if (mdata->ctx == ctx)",
          "1131:     mdata->reopen &= ~IMAP_REOPEN_ALLOW;",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1140: int imap_account_match(const struct ConnAccount *a1, const struct ConnAccount *a2)",
          "1141: {",
          "1144:   const struct ConnAccount *a1_canon = a1_idata ? &a1_idata->conn->account : a1;",
          "1145:   const struct ConnAccount *a2_canon = a2_idata ? &a2_idata->conn->account : a2;",
          "",
          "[Removed Lines]",
          "1142:   struct ImapData *a1_idata = imap_conn_find(a1, MUTT_IMAP_CONN_NONEW);",
          "1143:   struct ImapData *a2_idata = imap_conn_find(a2, MUTT_IMAP_CONN_NONEW);",
          "",
          "[Added Lines]",
          "1142:   struct ImapMboxData *a1_idata = imap_conn_find(a1, MUTT_IMAP_CONN_NONEW);",
          "1143:   struct ImapMboxData *a2_idata = imap_conn_find(a2, MUTT_IMAP_CONN_NONEW);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a67009c07079c977f9628edbe61f899294e7ce1a",
      "candidate_info": {
        "commit_hash": "a67009c07079c977f9628edbe61f899294e7ce1a",
        "repo": "neomutt/neomutt",
        "commit_url": "https://github.com/neomutt/neomutt/commit/a67009c07079c977f9628edbe61f899294e7ce1a",
        "files": [
          "imap/auth.c",
          "imap/auth.h",
          "imap/auth_anon.c",
          "imap/auth_cram.c",
          "imap/auth_gss.c",
          "imap/auth_login.c",
          "imap/auth_oauth.c",
          "imap/auth_plain.c",
          "imap/auth_sasl.c",
          "imap/browse.c",
          "imap/command.c",
          "imap/imap.c",
          "imap/imap_private.h",
          "imap/message.c",
          "imap/utf7.c",
          "imap/util.c"
        ],
        "message": "ImapAccountData\n\nEven though it's attached to a Mailbox, this is Account data.",
        "before_after_code_files": [
          "imap/auth.c||imap/auth.c",
          "imap/auth.h||imap/auth.h",
          "imap/auth_anon.c||imap/auth_anon.c",
          "imap/auth_cram.c||imap/auth_cram.c",
          "imap/auth_gss.c||imap/auth_gss.c",
          "imap/auth_login.c||imap/auth_login.c",
          "imap/auth_oauth.c||imap/auth_oauth.c",
          "imap/auth_plain.c||imap/auth_plain.c",
          "imap/auth_sasl.c||imap/auth_sasl.c",
          "imap/browse.c||imap/browse.c",
          "imap/command.c||imap/command.c",
          "imap/imap.c||imap/imap.c",
          "imap/imap_private.h||imap/imap_private.h",
          "imap/message.c||imap/message.c",
          "imap/utf7.c||imap/utf7.c",
          "imap/util.c||imap/util.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "imap/command.c||imap/command.c"
          ],
          "candidate": [
            "imap/command.c||imap/command.c"
          ]
        }
      },
      "candidate_diff": {
        "imap/auth.c||imap/auth.c": [
          "File: imap/auth.c -> imap/auth.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "68: {",
          "69:   int r = IMAP_AUTH_FAILURE;",
          "",
          "[Removed Lines]",
          "67: int imap_authenticate(struct ImapMboxData *mdata)",
          "",
          "[Added Lines]",
          "67: int imap_authenticate(struct ImapAccountData *adata)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "91:         const struct ImapAuth *auth = &imap_authenticators[i];",
          "92:         if (!auth->method || (mutt_str_strcasecmp(auth->method, method) == 0))",
          "93:         {",
          "95:           if (r == IMAP_AUTH_SUCCESS)",
          "96:           {",
          "97:             FREE(&methods);",
          "",
          "[Removed Lines]",
          "94:           r = auth->authenticate(mdata, method);",
          "",
          "[Added Lines]",
          "94:           r = auth->authenticate(adata, method);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "111:     for (size_t i = 0; i < mutt_array_size(imap_authenticators); ++i)",
          "112:     {",
          "114:       if (r == IMAP_AUTH_SUCCESS)",
          "115:         return r;",
          "116:     }",
          "",
          "[Removed Lines]",
          "113:       r = imap_authenticators[i].authenticate(mdata, NULL);",
          "",
          "[Added Lines]",
          "113:       r = imap_authenticators[i].authenticate(adata, NULL);",
          "",
          "---------------"
        ],
        "imap/auth.h||imap/auth.h": [
          "File: imap/auth.h -> imap/auth.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: #ifndef MUTT_IMAP_AUTH_H",
          "27: #define MUTT_IMAP_AUTH_H",
          "",
          "[Removed Lines]",
          "29: struct ImapMboxData;",
          "",
          "[Added Lines]",
          "29: struct ImapAccountData;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "44: struct ImapAuth",
          "45: {",
          "50:   const char *method;",
          "51: };",
          "55: #ifndef USE_SASL",
          "58: #endif",
          "60: #ifdef USE_GSS",
          "62: #endif",
          "63: #ifdef USE_SASL",
          "65: #endif",
          "",
          "[Removed Lines]",
          "47:   enum ImapAuthRes (*authenticate)(struct ImapMboxData *mdata, const char *method);",
          "54: enum ImapAuthRes imap_auth_plain(struct ImapMboxData *mdata, const char *method);",
          "56: enum ImapAuthRes imap_auth_anon(struct ImapMboxData *mdata, const char *method);",
          "57: enum ImapAuthRes imap_auth_cram_md5(struct ImapMboxData *mdata, const char *method);",
          "59: enum ImapAuthRes imap_auth_login(struct ImapMboxData *mdata, const char *method);",
          "61: enum ImapAuthRes imap_auth_gss(struct ImapMboxData *mdata, const char *method);",
          "64: enum ImapAuthRes imap_auth_sasl(struct ImapMboxData *mdata, const char *method);",
          "66: enum ImapAuthRes imap_auth_oauth(struct ImapMboxData *mdata, const char *method);",
          "",
          "[Added Lines]",
          "47:   enum ImapAuthRes (*authenticate)(struct ImapAccountData *adata, const char *method);",
          "54: enum ImapAuthRes imap_auth_plain(struct ImapAccountData *adata, const char *method);",
          "56: enum ImapAuthRes imap_auth_anon(struct ImapAccountData *adata, const char *method);",
          "57: enum ImapAuthRes imap_auth_cram_md5(struct ImapAccountData *adata, const char *method);",
          "59: enum ImapAuthRes imap_auth_login(struct ImapAccountData *adata, const char *method);",
          "61: enum ImapAuthRes imap_auth_gss(struct ImapAccountData *adata, const char *method);",
          "64: enum ImapAuthRes imap_auth_sasl(struct ImapAccountData *adata, const char *method);",
          "66: enum ImapAuthRes imap_auth_oauth(struct ImapAccountData *adata, const char *method);",
          "",
          "---------------"
        ],
        "imap/auth_anon.c||imap/auth_anon.c": [
          "File: imap/auth_anon.c -> imap/auth_anon.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "46: {",
          "47:   int rc;",
          "50:     return IMAP_AUTH_UNAVAIL;",
          "53:     return IMAP_AUTH_FAILURE;",
          "56:     return IMAP_AUTH_UNAVAIL;",
          "58:   mutt_message(_(\"Authenticating (anonymous)...\"));",
          "62:   do",
          "64:   while (rc == IMAP_CMD_CONTINUE);",
          "66:   if (rc != IMAP_CMD_RESPOND)",
          "",
          "[Removed Lines]",
          "45: enum ImapAuthRes imap_auth_anon(struct ImapMboxData *mdata, const char *method)",
          "49:   if (!mutt_bit_isset(mdata->capabilities, AUTH_ANON))",
          "52:   if (mutt_account_getuser(&mdata->conn->account) < 0)",
          "55:   if (mdata->conn->account.user[0] != '\\0')",
          "60:   imap_cmd_start(mdata, \"AUTHENTICATE ANONYMOUS\");",
          "63:     rc = imap_cmd_step(mdata);",
          "",
          "[Added Lines]",
          "45: enum ImapAuthRes imap_auth_anon(struct ImapAccountData *adata, const char *method)",
          "49:   if (!mutt_bit_isset(adata->capabilities, AUTH_ANON))",
          "52:   if (mutt_account_getuser(&adata->conn->account) < 0)",
          "55:   if (adata->conn->account.user[0] != '\\0')",
          "60:   imap_cmd_start(adata, \"AUTHENTICATE ANONYMOUS\");",
          "63:     rc = imap_cmd_step(adata);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "69:     goto bail;",
          "70:   }",
          "74:   do",
          "76:   while (rc == IMAP_CMD_CONTINUE);",
          "78:   if (rc != IMAP_CMD_OK)",
          "",
          "[Removed Lines]",
          "75:     rc = imap_cmd_step(mdata);",
          "",
          "[Added Lines]",
          "75:     rc = imap_cmd_step(adata);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "81:     goto bail;",
          "82:   }",
          "85:     return IMAP_AUTH_SUCCESS;",
          "87: bail:",
          "",
          "[Removed Lines]",
          "84:   if (imap_code(mdata->buf))",
          "",
          "[Added Lines]",
          "84:   if (imap_code(adata->buf))",
          "",
          "---------------"
        ],
        "imap/auth_cram.c||imap/auth_cram.c": [
          "File: imap/auth_cram.c -> imap/auth_cram.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "99: {",
          "100:   char ibuf[LONG_STRING * 2], obuf[LONG_STRING];",
          "101:   unsigned char hmac_response[MD5_DIGEST_LEN];",
          "102:   int len;",
          "103:   int rc;",
          "106:     return IMAP_AUTH_UNAVAIL;",
          "108:   mutt_message(_(\"Authenticating (CRAM-MD5)...\"));",
          "112:     return IMAP_AUTH_FAILURE;",
          "114:     return IMAP_AUTH_FAILURE;",
          "",
          "[Removed Lines]",
          "98: enum ImapAuthRes imap_auth_cram_md5(struct ImapMboxData *mdata, const char *method)",
          "105:   if (!mutt_bit_isset(mdata->capabilities, ACRAM_MD5))",
          "111:   if (mutt_account_getlogin(&mdata->conn->account) < 0)",
          "113:   if (mutt_account_getpass(&mdata->conn->account) < 0)",
          "116:   imap_cmd_start(mdata, \"AUTHENTICATE CRAM-MD5\");",
          "",
          "[Added Lines]",
          "98: enum ImapAuthRes imap_auth_cram_md5(struct ImapAccountData *adata, const char *method)",
          "105:   if (!mutt_bit_isset(adata->capabilities, ACRAM_MD5))",
          "111:   if (mutt_account_getlogin(&adata->conn->account) < 0)",
          "113:   if (mutt_account_getpass(&adata->conn->account) < 0)",
          "116:   imap_cmd_start(adata, \"AUTHENTICATE CRAM-MD5\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "124:   do",
          "126:   while (rc == IMAP_CMD_CONTINUE);",
          "128:   if (rc != IMAP_CMD_RESPOND)",
          "",
          "[Removed Lines]",
          "125:     rc = imap_cmd_step(mdata);",
          "",
          "[Added Lines]",
          "125:     rc = imap_cmd_step(adata);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "131:     goto bail;",
          "132:   }",
          "135:   if (len == -1)",
          "136:   {",
          "137:     mutt_debug(1, \"Error decoding base64 response.\\n\");",
          "",
          "[Removed Lines]",
          "134:   len = mutt_b64_decode(mdata->buf + 2, obuf, sizeof(obuf));",
          "",
          "[Added Lines]",
          "134:   len = mutt_b64_decode(adata->buf + 2, obuf, sizeof(obuf));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "158:   mutt_md5_toascii(hmac_response, obuf + off);",
          "159:   mutt_debug(2, \"CRAM response: %s\\n\", obuf);",
          "",
          "[Removed Lines]",
          "155:   hmac_md5(mdata->conn->account.pass, obuf, hmac_response);",
          "157:   int off = snprintf(obuf, sizeof(obuf), \"%s \", mdata->conn->account.user);",
          "",
          "[Added Lines]",
          "155:   hmac_md5(adata->conn->account.pass, obuf, hmac_response);",
          "157:   int off = snprintf(obuf, sizeof(obuf), \"%s \", adata->conn->account.user);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "163:   mutt_b64_encode(obuf, strlen(obuf), ibuf, sizeof(ibuf) - 2);",
          "164:   mutt_str_strcat(ibuf, sizeof(ibuf), \"\\r\\n\");",
          "167:   do",
          "169:   while (rc == IMAP_CMD_CONTINUE);",
          "171:   if (rc != IMAP_CMD_OK)",
          "",
          "[Removed Lines]",
          "165:   mutt_socket_send(mdata->conn, ibuf);",
          "168:     rc = imap_cmd_step(mdata);",
          "",
          "[Added Lines]",
          "165:   mutt_socket_send(adata->conn, ibuf);",
          "168:     rc = imap_cmd_step(adata);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "174:     goto bail;",
          "175:   }",
          "178:     return IMAP_AUTH_SUCCESS;",
          "180: bail:",
          "",
          "[Removed Lines]",
          "177:   if (imap_code(mdata->buf))",
          "",
          "[Added Lines]",
          "177:   if (imap_code(adata->buf))",
          "",
          "---------------"
        ],
        "imap/auth_gss.c||imap/auth_gss.c": [
          "File: imap/auth_gss.c -> imap/auth_gss.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "110: {",
          "111:   gss_buffer_desc request_buf, send_token;",
          "112:   gss_buffer_t sec_token;",
          "",
          "[Removed Lines]",
          "109: enum ImapAuthRes imap_auth_gss(struct ImapMboxData *mdata, const char *method)",
          "",
          "[Added Lines]",
          "109: enum ImapAuthRes imap_auth_gss(struct ImapAccountData *adata, const char *method)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "121:   unsigned long buf_size;",
          "122:   int rc;",
          "125:     return IMAP_AUTH_UNAVAIL;",
          "128:     return IMAP_AUTH_FAILURE;",
          "132:   request_buf.value = buf1;",
          "133:   request_buf.length = strlen(buf1);",
          "134:   maj_stat = gss_import_name(&min_stat, &request_buf, gss_nt_service_name, &target_name);",
          "",
          "[Removed Lines]",
          "124:   if (!mutt_bit_isset(mdata->capabilities, AGSSAPI))",
          "127:   if (mutt_account_getuser(&mdata->conn->account) < 0)",
          "131:   snprintf(buf1, sizeof(buf1), \"imap@%s\", mdata->conn->account.host);",
          "",
          "[Added Lines]",
          "124:   if (!mutt_bit_isset(adata->capabilities, AGSSAPI))",
          "127:   if (mutt_account_getuser(&adata->conn->account) < 0)",
          "131:   snprintf(buf1, sizeof(buf1), \"imap@%s\", adata->conn->account.host);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "165:   mutt_message(_(\"Authenticating (GSSAPI)...\"));",
          "170:   do",
          "172:   while (rc == IMAP_CMD_CONTINUE);",
          "174:   if (rc != IMAP_CMD_RESPOND)",
          "",
          "[Removed Lines]",
          "167:   imap_cmd_start(mdata, \"AUTHENTICATE GSSAPI\");",
          "171:     rc = imap_cmd_step(mdata);",
          "",
          "[Added Lines]",
          "167:   imap_cmd_start(adata, \"AUTHENTICATE GSSAPI\");",
          "171:     rc = imap_cmd_step(adata);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "183:   mutt_b64_encode(send_token.value, send_token.length, buf1, sizeof(buf1) - 2);",
          "184:   gss_release_buffer(&min_stat, &send_token);",
          "185:   mutt_str_strcat(buf1, sizeof(buf1), \"\\r\\n\");",
          "188:   while (maj_stat == GSS_S_CONTINUE_NEEDED)",
          "189:   {",
          "191:     do",
          "193:     while (rc == IMAP_CMD_CONTINUE);",
          "195:     if (rc != IMAP_CMD_RESPOND)",
          "",
          "[Removed Lines]",
          "186:   mutt_socket_send(mdata->conn, buf1);",
          "192:       rc = imap_cmd_step(mdata);",
          "",
          "[Added Lines]",
          "186:   mutt_socket_send(adata->conn, buf1);",
          "192:       rc = imap_cmd_step(adata);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "199:       goto bail;",
          "200:     }",
          "203:     request_buf.value = buf2;",
          "204:     sec_token = &request_buf;",
          "",
          "[Removed Lines]",
          "202:     request_buf.length = mutt_b64_decode(mdata->buf + 2, buf2, sizeof(buf2));",
          "",
          "[Added Lines]",
          "202:     request_buf.length = mutt_b64_decode(adata->buf + 2, buf2, sizeof(buf2));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "219:     mutt_b64_encode(send_token.value, send_token.length, buf1, sizeof(buf1) - 2);",
          "220:     gss_release_buffer(&min_stat, &send_token);",
          "221:     mutt_str_strcat(buf1, sizeof(buf1), \"\\r\\n\");",
          "223:   }",
          "225:   gss_release_name(&min_stat, &target_name);",
          "228:   do",
          "230:   while (rc == IMAP_CMD_CONTINUE);",
          "232:   if (rc != IMAP_CMD_RESPOND)",
          "",
          "[Removed Lines]",
          "222:     mutt_socket_send(mdata->conn, buf1);",
          "229:     rc = imap_cmd_step(mdata);",
          "",
          "[Added Lines]",
          "222:     mutt_socket_send(adata->conn, buf1);",
          "229:     rc = imap_cmd_step(adata);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "234:     mutt_debug(1, \"#2 Error receiving server response.\\n\");",
          "235:     goto bail;",
          "236:   }",
          "238:   request_buf.value = buf2;",
          "240:   maj_stat = gss_unwrap(&min_stat, context, &request_buf, &send_token, &cflags, &quality);",
          "",
          "[Removed Lines]",
          "237:   request_buf.length = mutt_b64_decode(mdata->buf + 2, buf2, sizeof(buf2));",
          "",
          "[Added Lines]",
          "237:   request_buf.length = mutt_b64_decode(adata->buf + 2, buf2, sizeof(buf2));",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "271:   memcpy(buf1, &buf_size, 4);",
          "272:   buf1[0] = GSS_AUTH_P_NONE;",
          "275:   request_buf.value = buf1;",
          "277:   maj_stat = gss_wrap(&min_stat, context, 0, GSS_C_QOP_DEFAULT, &request_buf,",
          "278:                       &cflags, &send_token);",
          "279:   if (maj_stat != GSS_S_COMPLETE)",
          "",
          "[Removed Lines]",
          "274:   strncpy(buf1 + 4, mdata->conn->account.user, sizeof(buf1) - 4);",
          "276:   request_buf.length = 4 + strlen(mdata->conn->account.user);",
          "",
          "[Added Lines]",
          "274:   strncpy(buf1 + 4, adata->conn->account.user, sizeof(buf1) - 4);",
          "276:   request_buf.length = 4 + strlen(adata->conn->account.user);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "283:   }",
          "285:   mutt_b64_encode(send_token.value, send_token.length, buf1, sizeof(buf1) - 2);",
          "287:   mutt_str_strcat(buf1, sizeof(buf1), \"\\r\\n\");",
          "291:   do",
          "293:   while (rc == IMAP_CMD_CONTINUE);",
          "294:   if (rc == IMAP_CMD_RESPOND)",
          "295:   {",
          "296:     mutt_debug(1, \"Unexpected server continuation request.\\n\");",
          "297:     goto err_abort_cmd;",
          "298:   }",
          "300:   {",
          "302:     mutt_debug(2, \"Releasing GSS credentials\\n\");",
          "",
          "[Removed Lines]",
          "286:   mutt_debug(2, \"Requesting authorisation as %s\\n\", mdata->conn->account.user);",
          "288:   mutt_socket_send(mdata->conn, buf1);",
          "292:     rc = imap_cmd_step(mdata);",
          "299:   if (imap_code(mdata->buf))",
          "",
          "[Added Lines]",
          "286:   mutt_debug(2, \"Requesting authorisation as %s\\n\", adata->conn->account.user);",
          "288:   mutt_socket_send(adata->conn, buf1);",
          "292:     rc = imap_cmd_step(adata);",
          "299:   if (imap_code(adata->buf))",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "316:     goto bail;",
          "318: err_abort_cmd:",
          "320:   do",
          "322:   while (rc == IMAP_CMD_CONTINUE);",
          "324: bail:",
          "",
          "[Removed Lines]",
          "319:   mutt_socket_send(mdata->conn, \"*\\r\\n\");",
          "321:     rc = imap_cmd_step(mdata);",
          "",
          "[Added Lines]",
          "319:   mutt_socket_send(adata->conn, \"*\\r\\n\");",
          "321:     rc = imap_cmd_step(adata);",
          "",
          "---------------"
        ],
        "imap/auth_login.c||imap/auth_login.c": [
          "File: imap/auth_login.c -> imap/auth_login.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "46: {",
          "47:   char q_user[STRING], q_pass[STRING];",
          "48:   char buf[LONG_STRING];",
          "49:   int rc;",
          "52:   {",
          "53:     mutt_message(_(\"LOGIN disabled on this server\"));",
          "54:     return IMAP_AUTH_UNAVAIL;",
          "55:   }",
          "58:     return IMAP_AUTH_FAILURE;",
          "60:     return IMAP_AUTH_FAILURE;",
          "62:   mutt_message(_(\"Logging in...\"));",
          "70:   if (DebugLevel < IMAP_LOG_PASS)",
          "73:   snprintf(buf, sizeof(buf), \"LOGIN %s %s\", q_user, q_pass);",
          "76:   if (!rc)",
          "77:   {",
          "",
          "[Removed Lines]",
          "45: enum ImapAuthRes imap_auth_login(struct ImapMboxData *mdata, const char *method)",
          "51:   if (mutt_bit_isset(mdata->capabilities, LOGINDISABLED))",
          "57:   if (mutt_account_getuser(&mdata->conn->account) < 0)",
          "59:   if (mutt_account_getpass(&mdata->conn->account) < 0)",
          "64:   imap_quote_string(q_user, sizeof(q_user), mdata->conn->account.user, false);",
          "65:   imap_quote_string(q_pass, sizeof(q_pass), mdata->conn->account.pass, false);",
          "71:     mutt_debug(2, \"Sending LOGIN command for %s...\\n\", mdata->conn->account.user);",
          "74:   rc = imap_exec(mdata, buf, IMAP_CMD_FAIL_OK | IMAP_CMD_PASS);",
          "",
          "[Added Lines]",
          "45: enum ImapAuthRes imap_auth_login(struct ImapAccountData *adata, const char *method)",
          "51:   if (mutt_bit_isset(adata->capabilities, LOGINDISABLED))",
          "57:   if (mutt_account_getuser(&adata->conn->account) < 0)",
          "59:   if (mutt_account_getpass(&adata->conn->account) < 0)",
          "64:   imap_quote_string(q_user, sizeof(q_user), adata->conn->account.user, false);",
          "65:   imap_quote_string(q_pass, sizeof(q_pass), adata->conn->account.pass, false);",
          "71:     mutt_debug(2, \"Sending LOGIN command for %s...\\n\", adata->conn->account.user);",
          "74:   rc = imap_exec(adata, buf, IMAP_CMD_FAIL_OK | IMAP_CMD_PASS);",
          "",
          "---------------"
        ],
        "imap/auth_oauth.c||imap/auth_oauth.c": [
          "File: imap/auth_oauth.c -> imap/auth_oauth.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "48: {",
          "49:   char *ibuf = NULL;",
          "50:   char *oauthbearer = NULL;",
          "",
          "[Removed Lines]",
          "47: enum ImapAuthRes imap_auth_oauth(struct ImapMboxData *mdata, const char *method)",
          "",
          "[Added Lines]",
          "47: enum ImapAuthRes imap_auth_oauth(struct ImapAccountData *adata, const char *method)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "52:   int rc;",
          "57:   {",
          "58:     return IMAP_AUTH_UNAVAIL;",
          "59:   }",
          "",
          "[Removed Lines]",
          "55:   if (!mutt_bit_isset(mdata->capabilities, AUTH_OAUTHBEARER) ||",
          "56:       !mutt_bit_isset(mdata->capabilities, SASL_IR) || !mdata->conn->ssf)",
          "",
          "[Added Lines]",
          "55:   if (!mutt_bit_isset(adata->capabilities, AUTH_OAUTHBEARER) ||",
          "56:       !mutt_bit_isset(adata->capabilities, SASL_IR) || !adata->conn->ssf)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "61:   mutt_message(_(\"Authenticating (OAUTHBEARER)...\"));",
          "65:   if (!oauthbearer)",
          "66:     return IMAP_AUTH_FAILURE;",
          "",
          "[Removed Lines]",
          "64:   oauthbearer = mutt_account_getoauthbearer(&mdata->conn->account);",
          "",
          "[Added Lines]",
          "64:   oauthbearer = mutt_account_getoauthbearer(&adata->conn->account);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "77:   FREE(&oauthbearer);",
          "78:   FREE(&ibuf);",
          "",
          "[Removed Lines]",
          "75:   rc = imap_exec(mdata, ibuf, IMAP_CMD_FAIL_OK | IMAP_CMD_PASS);",
          "",
          "[Added Lines]",
          "75:   rc = imap_exec(adata, ibuf, IMAP_CMD_FAIL_OK | IMAP_CMD_PASS);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "87:   }",
          "89:   if (!rc)",
          "",
          "[Removed Lines]",
          "85:     mutt_socket_send(mdata->conn, \"\\001\");",
          "86:     rc = imap_exec(mdata, ibuf, IMAP_CMD_FAIL_OK);",
          "",
          "[Added Lines]",
          "85:     mutt_socket_send(adata->conn, \"\\001\");",
          "86:     rc = imap_exec(adata, ibuf, IMAP_CMD_FAIL_OK);",
          "",
          "---------------"
        ],
        "imap/auth_plain.c||imap/auth_plain.c": [
          "File: imap/auth_plain.c -> imap/auth_plain.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "46: {",
          "47:   int rc = IMAP_CMD_CONTINUE;",
          "48:   enum ImapAuthRes res = IMAP_AUTH_SUCCESS;",
          "49:   static const char auth_plain_cmd[] = \"AUTHENTICATE PLAIN\";",
          "50:   char buf[STRING] = { 0 };",
          "53:     return IMAP_AUTH_FAILURE;",
          "55:     return IMAP_AUTH_FAILURE;",
          "57:   mutt_message(_(\"Logging in...\"));",
          "64:   {",
          "66:   }",
          "67:   else",
          "68:   {",
          "71:     buf[sizeof(auth_plain_cmd) - 1] = '\\0';",
          "73:     while (rc == IMAP_CMD_CONTINUE)",
          "74:     {",
          "76:     }",
          "77:     if (rc == IMAP_CMD_RESPOND)",
          "78:     {",
          "79:       mutt_str_strcat(buf + sizeof(auth_plain_cmd),",
          "80:                       sizeof(buf) - sizeof(auth_plain_cmd), \"\\r\\n\");",
          "82:     }",
          "83:   }",
          "85:   while (rc == IMAP_CMD_CONTINUE)",
          "86:   {",
          "88:   }",
          "90:   if (rc == IMAP_CMD_BAD)",
          "",
          "[Removed Lines]",
          "45: enum ImapAuthRes imap_auth_plain(struct ImapMboxData *mdata, const char *method)",
          "52:   if (mutt_account_getuser(&mdata->conn->account) < 0)",
          "54:   if (mutt_account_getpass(&mdata->conn->account) < 0)",
          "60:   mutt_sasl_plain_msg(buf, sizeof(buf), auth_plain_cmd, mdata->conn->account.user,",
          "61:                       mdata->conn->account.user, mdata->conn->account.pass);",
          "63:   if (mutt_bit_isset(mdata->capabilities, SASL_IR))",
          "65:     imap_cmd_start(mdata, buf);",
          "72:     imap_cmd_start(mdata, buf);",
          "75:       rc = imap_cmd_step(mdata);",
          "81:       mutt_socket_send(mdata->conn, buf + sizeof(auth_plain_cmd));",
          "87:     rc = imap_cmd_step(mdata);",
          "",
          "[Added Lines]",
          "45: enum ImapAuthRes imap_auth_plain(struct ImapAccountData *adata, const char *method)",
          "52:   if (mutt_account_getuser(&adata->conn->account) < 0)",
          "54:   if (mutt_account_getpass(&adata->conn->account) < 0)",
          "60:   mutt_sasl_plain_msg(buf, sizeof(buf), auth_plain_cmd, adata->conn->account.user,",
          "61:                       adata->conn->account.user, adata->conn->account.pass);",
          "63:   if (mutt_bit_isset(adata->capabilities, SASL_IR))",
          "65:     imap_cmd_start(adata, buf);",
          "72:     imap_cmd_start(adata, buf);",
          "75:       rc = imap_cmd_step(adata);",
          "81:       mutt_socket_send(adata->conn, buf + sizeof(auth_plain_cmd));",
          "87:     rc = imap_cmd_step(adata);",
          "",
          "---------------"
        ],
        "imap/auth_sasl.c||imap/auth_sasl.c": [
          "File: imap/auth_sasl.c -> imap/auth_sasl.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "50: {",
          "51:   sasl_conn_t *saslconn = NULL;",
          "52:   sasl_interact_t *interaction = NULL;",
          "",
          "[Removed Lines]",
          "49: enum ImapAuthRes imap_auth_sasl(struct ImapMboxData *mdata, const char *method)",
          "",
          "[Added Lines]",
          "49: enum ImapAuthRes imap_auth_sasl(struct ImapAccountData *adata, const char *method)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "58:   unsigned int len = 0, olen = 0;",
          "59:   bool client_start;",
          "62:   {",
          "63:     mutt_debug(1, \"Error allocating SASL connection.\\n\");",
          "64:     return IMAP_AUTH_FAILURE;",
          "",
          "[Removed Lines]",
          "61:   if (mutt_sasl_client_new(mdata->conn, &saslconn) < 0)",
          "",
          "[Added Lines]",
          "61:   if (mutt_sasl_client_new(adata->conn, &saslconn) < 0)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "70:   if (!method)",
          "71:   {",
          "80:       return IMAP_AUTH_FAILURE;",
          "85:     {",
          "86:       rc = sasl_client_start(saslconn, \"AUTH=ANONYMOUS\", NULL, &pc, &olen, &mech);",
          "87:     }",
          "88:   }",
          "89:   else if ((mutt_str_strcasecmp(\"login\", method) == 0) &&",
          "91:   {",
          "93:     return IMAP_AUTH_UNAVAIL;",
          "",
          "[Removed Lines]",
          "72:     method = mdata->capstr;",
          "79:     if (mutt_account_getuser(&mdata->conn->account) < 0)",
          "82:     if (mutt_bit_isset(mdata->capabilities, AUTH_ANON) &&",
          "83:         (!mdata->conn->account.user[0] ||",
          "84:          (mutt_str_strncmp(mdata->conn->account.user, \"anonymous\", 9) == 0)))",
          "90:            !strstr(NONULL(mdata->capstr), \"AUTH=LOGIN\"))",
          "",
          "[Added Lines]",
          "72:     method = adata->capstr;",
          "79:     if (mutt_account_getuser(&adata->conn->account) < 0)",
          "82:     if (mutt_bit_isset(adata->capabilities, AUTH_ANON) &&",
          "83:         (!adata->conn->account.user[0] ||",
          "84:          (mutt_str_strncmp(adata->conn->account.user, \"anonymous\", 9) == 0)))",
          "90:            !strstr(NONULL(adata->capstr), \"AUTH=LOGIN\"))",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "126:   buf = mutt_mem_malloc(bufsize);",
          "128:   snprintf(buf, bufsize, \"AUTHENTICATE %s\", mech);",
          "130:   {",
          "131:     len = mutt_str_strlen(buf);",
          "132:     buf[len++] = ' ';",
          "",
          "[Removed Lines]",
          "129:   if (mutt_bit_isset(mdata->capabilities, SASL_IR) && client_start)",
          "",
          "[Added Lines]",
          "129:   if (mutt_bit_isset(adata->capabilities, SASL_IR) && client_start)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "138:     client_start = false;",
          "139:     olen = 0;",
          "140:   }",
          "142:   irc = IMAP_CMD_CONTINUE;",
          "145:   while (rc == SASL_CONTINUE || olen > 0)",
          "146:   {",
          "147:     do",
          "149:     while (irc == IMAP_CMD_CONTINUE);",
          "151:     if (irc == IMAP_CMD_BAD || irc == IMAP_CMD_NO)",
          "",
          "[Removed Lines]",
          "141:   imap_cmd_start(mdata, buf);",
          "148:       irc = imap_cmd_step(mdata);",
          "",
          "[Added Lines]",
          "141:   imap_cmd_start(adata, buf);",
          "148:       irc = imap_cmd_step(adata);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "154:     if (irc == IMAP_CMD_RESPOND)",
          "155:     {",
          "158:       {",
          "159:         buf[0] = '\\0';",
          "160:         len = 0;",
          "161:       }",
          "162:       else",
          "163:       {",
          "165:         if (len > bufsize)",
          "166:         {",
          "167:           bufsize = len;",
          "",
          "[Removed Lines]",
          "157:       if (mdata->buf[1] == '\\0')",
          "164:         len = strlen(mdata->buf + 2);",
          "",
          "[Added Lines]",
          "157:       if (adata->buf[1] == '\\0')",
          "164:         len = strlen(adata->buf + 2);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "169:         }",
          "173:         {",
          "174:           mutt_debug(1, \"error base64-decoding server response.\\n\");",
          "175:           goto bail;",
          "",
          "[Removed Lines]",
          "172:         if (sasl_decode64(mdata->buf + 2, len, buf, bufsize - 1, &len) != SASL_OK)",
          "",
          "[Added Lines]",
          "172:         if (sasl_decode64(adata->buf + 2, len, buf, bufsize - 1, &len) != SASL_OK)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "210:     if (irc == IMAP_CMD_RESPOND)",
          "211:     {",
          "212:       mutt_str_strfcpy(buf + olen, \"\\r\\n\", bufsize - olen);",
          "214:     }",
          "217:     if (rc < 0)",
          "218:     {",
          "220:       mutt_debug(1, \"sasl_client_step error %d\\n\", rc);",
          "221:     }",
          "",
          "[Removed Lines]",
          "213:       mutt_socket_send(mdata->conn, buf);",
          "219:       mutt_socket_send(mdata->conn, \"*\\r\\n\");",
          "",
          "[Added Lines]",
          "213:       mutt_socket_send(adata->conn, buf);",
          "219:       mutt_socket_send(adata->conn, \"*\\r\\n\");",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "226:   while (irc != IMAP_CMD_OK)",
          "227:   {",
          "229:     if (irc != IMAP_CMD_CONTINUE)",
          "230:       break;",
          "231:   }",
          "",
          "[Removed Lines]",
          "228:     irc = imap_cmd_step(mdata);",
          "",
          "[Added Lines]",
          "228:     irc = imap_cmd_step(adata);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "233:   if (rc != SASL_OK)",
          "234:     goto bail;",
          "237:   {",
          "239:     FREE(&buf);",
          "240:     return IMAP_AUTH_SUCCESS;",
          "241:   }",
          "",
          "[Removed Lines]",
          "236:   if (imap_code(mdata->buf))",
          "238:     mutt_sasl_setup_conn(mdata->conn, saslconn);",
          "",
          "[Added Lines]",
          "236:   if (imap_code(adata->buf))",
          "238:     mutt_sasl_setup_conn(adata->conn, saslconn);",
          "",
          "---------------"
        ],
        "imap/browse.c||imap/browse.c": [
          "File: imap/browse.c -> imap/browse.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "146:                                   struct BrowserState *state, bool isparent)",
          "147: {",
          "148:   struct ImapList list;",
          "",
          "[Removed Lines]",
          "145: static int browse_add_list_result(struct ImapMboxData *mdata, const char *cmd,",
          "",
          "[Added Lines]",
          "145: static int browse_add_list_result(struct ImapAccountData *adata, const char *cmd,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "155:     return -1;",
          "156:   }",
          "161:   do",
          "162:   {",
          "163:     list.name = NULL;",
          "166:     if (rc == IMAP_CMD_CONTINUE && list.name)",
          "167:     {",
          "",
          "[Removed Lines]",
          "158:   imap_cmd_start(mdata, cmd);",
          "159:   mdata->cmdtype = IMAP_CT_LIST;",
          "160:   mdata->cmddata = &list;",
          "164:     rc = imap_cmd_step(mdata);",
          "",
          "[Added Lines]",
          "158:   imap_cmd_start(adata, cmd);",
          "159:   adata->cmdtype = IMAP_CT_LIST;",
          "160:   adata->cmddata = &list;",
          "164:     rc = imap_cmd_step(adata);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "173:         add_folder(list.delim, list.name, list.noselect, list.noinferiors, state, isparent);",
          "174:     }",
          "175:   } while (rc == IMAP_CMD_CONTINUE);",
          "178:   FREE(&mx.mbox);",
          "179:   return (rc == IMAP_CMD_OK) ? 0 : -1;",
          "",
          "[Removed Lines]",
          "176:   mdata->cmddata = NULL;",
          "",
          "[Added Lines]",
          "176:   adata->cmddata = NULL;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "191: int imap_browse(char *path, struct BrowserState *state)",
          "192: {",
          "194:   struct ImapList list;",
          "195:   char buf[PATH_MAX];",
          "196:   char mbox[PATH_MAX];",
          "",
          "[Removed Lines]",
          "193:   struct ImapMboxData *mdata = NULL;",
          "",
          "[Added Lines]",
          "193:   struct ImapAccountData *adata = NULL;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "212:   ImapCheckSubscribed = false;",
          "213:   mutt_str_strfcpy(list_cmd, ImapListSubscribed ? \"LSUB\" : \"LIST\", sizeof(list_cmd));",
          "217:     goto fail;",
          "219:   mutt_message(_(\"Getting folder list...\"));",
          "",
          "[Removed Lines]",
          "215:   mdata = imap_conn_find(&(mx.account), 0);",
          "216:   if (!mdata)",
          "",
          "[Added Lines]",
          "215:   adata = imap_conn_find(&(mx.account), 0);",
          "216:   if (!adata)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "222:   if (mx.mbox && mx.mbox[0] != '\\0')",
          "223:   {",
          "225:     n = mutt_str_strlen(mbox);",
          "226:   }",
          "227:   else",
          "",
          "[Removed Lines]",
          "224:     imap_fix_path(mdata, mx.mbox, mbox, sizeof(mbox));",
          "",
          "[Added Lines]",
          "224:     imap_fix_path(adata, mx.mbox, mbox, sizeof(mbox));",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "241:     snprintf(buf, sizeof(buf), \"%s \\\"\\\" %s\", list_cmd, munged_mbox);",
          "245:     do",
          "246:     {",
          "247:       list.name = 0;",
          "249:       if (rc == IMAP_CMD_CONTINUE && list.name)",
          "250:       {",
          "251:         if (!list.noinferiors && list.name[0] &&",
          "",
          "[Removed Lines]",
          "240:     imap_munge_mbox_name(mdata, munged_mbox, sizeof(munged_mbox), mbox);",
          "242:     imap_cmd_start(mdata, buf);",
          "243:     mdata->cmdtype = IMAP_CT_LIST;",
          "244:     mdata->cmddata = &list;",
          "248:       rc = imap_cmd_step(mdata);",
          "",
          "[Added Lines]",
          "240:     imap_munge_mbox_name(adata, munged_mbox, sizeof(munged_mbox), mbox);",
          "242:     imap_cmd_start(adata, buf);",
          "243:     adata->cmdtype = IMAP_CT_LIST;",
          "244:     adata->cmddata = &list;",
          "248:       rc = imap_cmd_step(adata);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "256:         }",
          "257:       }",
          "258:     } while (rc == IMAP_CMD_CONTINUE);",
          "262:     if (mbox[n - 1] == list.delim)",
          "",
          "[Removed Lines]",
          "259:     mdata->cmddata = NULL;",
          "",
          "[Added Lines]",
          "259:     adata->cmddata = NULL;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "305:     {",
          "306:       char relpath[2];",
          "309:       if (showparents)",
          "311:       if (!state->folder)",
          "312:       {",
          "313:         imap_qualify_path(buf, sizeof(buf), &mx, relpath);",
          "",
          "[Removed Lines]",
          "308:       snprintf(relpath, sizeof(relpath), \"%c\", n < 0 ? '\\0' : mdata->delim);",
          "310:         add_folder(mdata->delim, relpath, true, false, state, true);",
          "",
          "[Added Lines]",
          "308:       snprintf(relpath, sizeof(relpath), \"%c\", n < 0 ? '\\0' : adata->delim);",
          "310:         add_folder(adata->delim, relpath, true, false, state, true);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "326:   mutt_debug(3, \"Quoting mailbox scan: %s -> \", mbox);",
          "327:   snprintf(buf, sizeof(buf), \"%s%%\", mbox);",
          "329:   mutt_debug(3, \"%s\\n\", munged_mbox);",
          "330:   snprintf(buf, sizeof(buf), \"%s \\\"\\\" %s\", list_cmd, munged_mbox);",
          "332:     goto fail;",
          "334:   if (state->entrylen == 0)",
          "",
          "[Removed Lines]",
          "328:   imap_munge_mbox_name(mdata, munged_mbox, sizeof(munged_mbox), buf);",
          "331:   if (browse_add_list_result(mdata, buf, state, false))",
          "",
          "[Added Lines]",
          "328:   imap_munge_mbox_name(adata, munged_mbox, sizeof(munged_mbox), buf);",
          "331:   if (browse_add_list_result(adata, buf, state, false))",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "363: int imap_mailbox_create(const char *folder)",
          "364: {",
          "366:   struct ImapMbox mx;",
          "367:   char buf[PATH_MAX];",
          "368:   short n;",
          "",
          "[Removed Lines]",
          "365:   struct ImapMboxData *mdata = NULL;",
          "",
          "[Added Lines]",
          "365:   struct ImapAccountData *adata = NULL;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "373:     return -1;",
          "374:   }",
          "378:   {",
          "379:     mutt_debug(1, \"Couldn't find open connection to %s\\n\", mx.account.host);",
          "380:     goto fail;",
          "",
          "[Removed Lines]",
          "376:   mdata = imap_conn_find(&mx.account, MUTT_IMAP_CONN_NONEW);",
          "377:   if (!mdata)",
          "",
          "[Added Lines]",
          "376:   adata = imap_conn_find(&mx.account, MUTT_IMAP_CONN_NONEW);",
          "377:   if (!adata)",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "386:   n = mutt_str_strlen(buf);",
          "388:   {",
          "390:     buf[n] = '\\0';",
          "391:   }",
          "",
          "[Removed Lines]",
          "387:   if (n && (n < sizeof(buf) - 1) && (buf[n - 1] != mdata->delim))",
          "389:     buf[n++] = mdata->delim;",
          "",
          "[Added Lines]",
          "387:   if (n && (n < sizeof(buf) - 1) && (buf[n - 1] != adata->delim))",
          "389:     buf[n++] = adata->delim;",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "399:     goto fail;",
          "400:   }",
          "403:     goto fail;",
          "405:   mutt_message(_(\"Mailbox created\"));",
          "",
          "[Removed Lines]",
          "402:   if (imap_create_mailbox(mdata, buf) < 0)",
          "",
          "[Added Lines]",
          "402:   if (imap_create_mailbox(adata, buf) < 0)",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "424: int imap_mailbox_rename(const char *mailbox)",
          "425: {",
          "427:   struct ImapMbox mx;",
          "428:   char buf[PATH_MAX];",
          "429:   char newname[PATH_MAX];",
          "",
          "[Removed Lines]",
          "426:   struct ImapMboxData *mdata = NULL;",
          "",
          "[Added Lines]",
          "426:   struct ImapAccountData *adata = NULL;",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "434:     return -1;",
          "435:   }",
          "439:   {",
          "440:     mutt_debug(1, \"Couldn't find open connection to %s\\n\", mx.account.host);",
          "441:     goto fail;",
          "",
          "[Removed Lines]",
          "437:   mdata = imap_conn_find(&mx.account, MUTT_IMAP_CONN_NONEW);",
          "438:   if (!mdata)",
          "",
          "[Added Lines]",
          "437:   adata = imap_conn_find(&mx.account, MUTT_IMAP_CONN_NONEW);",
          "438:   if (!adata)",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "459:     goto fail;",
          "460:   }",
          "465:   {",
          "467:     goto fail;",
          "468:   }",
          "",
          "[Removed Lines]",
          "462:   imap_fix_path(mdata, newname, buf, sizeof(buf));",
          "464:   if (imap_rename_mailbox(mdata, &mx, buf) < 0)",
          "466:     mutt_error(_(\"Rename failed: %s\"), imap_get_qualifier(mdata->buf));",
          "",
          "[Added Lines]",
          "462:   imap_fix_path(adata, newname, buf, sizeof(buf));",
          "464:   if (imap_rename_mailbox(adata, &mx, buf) < 0)",
          "466:     mutt_error(_(\"Rename failed: %s\"), imap_get_qualifier(adata->buf));",
          "",
          "---------------"
        ],
        "imap/command.c||imap/command.c": [
          "File: imap/command.c -> imap/command.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "85: {",
          "87:     return true;",
          "89:   return false;",
          "",
          "[Removed Lines]",
          "84: static bool cmd_queue_full(struct ImapMboxData *mdata)",
          "86:   if ((mdata->nextcmd + 1) % mdata->cmdslots == mdata->lastcmd)",
          "",
          "[Added Lines]",
          "84: static bool cmd_queue_full(struct ImapAccountData *adata)",
          "86:   if ((adata->nextcmd + 1) % adata->cmdslots == adata->lastcmd)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "99: {",
          "100:   struct ImapCommand *cmd = NULL;",
          "103:   {",
          "104:     mutt_debug(3, \"IMAP command queue full\\n\");",
          "105:     return NULL;",
          "106:   }",
          "115:   cmd->state = IMAP_CMD_NEW;",
          "",
          "[Removed Lines]",
          "98: static struct ImapCommand *cmd_new(struct ImapMboxData *mdata)",
          "102:   if (cmd_queue_full(mdata))",
          "108:   cmd = mdata->cmds + mdata->nextcmd;",
          "109:   mdata->nextcmd = (mdata->nextcmd + 1) % mdata->cmdslots;",
          "111:   snprintf(cmd->seq, sizeof(cmd->seq), \"a%04u\", mdata->seqno++);",
          "112:   if (mdata->seqno > 9999)",
          "113:     mdata->seqno = 0;",
          "",
          "[Added Lines]",
          "98: static struct ImapCommand *cmd_new(struct ImapAccountData *adata)",
          "102:   if (cmd_queue_full(adata))",
          "108:   cmd = adata->cmds + adata->nextcmd;",
          "109:   adata->nextcmd = (adata->nextcmd + 1) % adata->cmdslots;",
          "111:   snprintf(cmd->seq, sizeof(cmd->seq), \"a%04u\", adata->seqno++);",
          "112:   if (adata->seqno > 9999)",
          "113:     adata->seqno = 0;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "131: {",
          "133:   {",
          "134:     mutt_debug(3, \"Draining IMAP command pipeline\\n\");",
          "138:     if (rc < 0 && rc != -2)",
          "139:       return rc;",
          "140:   }",
          "143:   if (!cmd)",
          "144:     return IMAP_CMD_BAD;",
          "147:     return IMAP_CMD_BAD;",
          "149:   return 0;",
          "150: }",
          "157: {",
          "161:   {",
          "167:   }",
          "171:   {",
          "174:       mutt_clear_error();",
          "176:   }",
          "177: }",
          "188: {",
          "189:   int rc;",
          "192:   {",
          "194:     return -1;",
          "195:   }",
          "198:     return rc;",
          "200:   if (flags & IMAP_CMD_QUEUE)",
          "201:     return 0;",
          "204:     return IMAP_CMD_BAD;",
          "207:                           (flags & IMAP_CMD_PASS) ? IMAP_LOG_PASS : IMAP_LOG_CMD);",
          "214:   return (rc < 0) ? IMAP_CMD_BAD : 0;",
          "215: }",
          "",
          "[Removed Lines]",
          "130: static int cmd_queue(struct ImapMboxData *mdata, const char *cmdstr, int flags)",
          "132:   if (cmd_queue_full(mdata))",
          "136:     const int rc = imap_exec(mdata, NULL, IMAP_CMD_FAIL_OK | (flags & IMAP_CMD_POLL));",
          "142:   struct ImapCommand *cmd = cmd_new(mdata);",
          "146:   if (mutt_buffer_printf(mdata->cmdbuf, \"%s %s\\r\\n\", cmd->seq, cmdstr) < 0)",
          "156: static void cmd_handle_fatal(struct ImapMboxData *mdata)",
          "158:   mdata->status = IMAP_FATAL;",
          "160:   if ((mdata->state >= IMAP_SELECTED) && (mdata->reopen & IMAP_REOPEN_ALLOW))",
          "162:     mx_fastclose_mailbox(mdata->ctx);",
          "163:     mutt_socket_close(mdata->conn);",
          "164:     mutt_error(_(\"Mailbox %s@%s closed\"), mdata->conn->account.login,",
          "165:                mdata->conn->account.host);",
          "166:     mdata->state = IMAP_DISCONNECTED;",
          "169:   imap_close_connection(mdata);",
          "170:   if (!mdata->recovering)",
          "172:     mdata->recovering = true;",
          "173:     if (imap_conn_find(&mdata->conn->account, 0))",
          "175:     mdata->recovering = false;",
          "187: static int cmd_start(struct ImapMboxData *mdata, const char *cmdstr, int flags)",
          "191:   if (mdata->status == IMAP_FATAL)",
          "193:     cmd_handle_fatal(mdata);",
          "197:   if (cmdstr && ((rc = cmd_queue(mdata, cmdstr, flags)) < 0))",
          "203:   if (mdata->cmdbuf->dptr == mdata->cmdbuf->data)",
          "206:   rc = mutt_socket_send_d(mdata->conn, mdata->cmdbuf->data,",
          "208:   mdata->cmdbuf->dptr = mdata->cmdbuf->data;",
          "211:   if (mdata->state == IMAP_IDLE)",
          "212:     mdata->state = IMAP_SELECTED;",
          "",
          "[Added Lines]",
          "130: static int cmd_queue(struct ImapAccountData *adata, const char *cmdstr, int flags)",
          "132:   if (cmd_queue_full(adata))",
          "136:     const int rc = imap_exec(adata, NULL, IMAP_CMD_FAIL_OK | (flags & IMAP_CMD_POLL));",
          "142:   struct ImapCommand *cmd = cmd_new(adata);",
          "146:   if (mutt_buffer_printf(adata->cmdbuf, \"%s %s\\r\\n\", cmd->seq, cmdstr) < 0)",
          "156: static void cmd_handle_fatal(struct ImapAccountData *adata)",
          "158:   adata->status = IMAP_FATAL;",
          "160:   if ((adata->state >= IMAP_SELECTED) && (adata->reopen & IMAP_REOPEN_ALLOW))",
          "162:     mx_fastclose_mailbox(adata->ctx);",
          "163:     mutt_socket_close(adata->conn);",
          "164:     mutt_error(_(\"Mailbox %s@%s closed\"), adata->conn->account.login,",
          "165:                adata->conn->account.host);",
          "166:     adata->state = IMAP_DISCONNECTED;",
          "169:   imap_close_connection(adata);",
          "170:   if (!adata->recovering)",
          "172:     adata->recovering = true;",
          "173:     if (imap_conn_find(&adata->conn->account, 0))",
          "175:     adata->recovering = false;",
          "187: static int cmd_start(struct ImapAccountData *adata, const char *cmdstr, int flags)",
          "191:   if (adata->status == IMAP_FATAL)",
          "193:     cmd_handle_fatal(adata);",
          "197:   if (cmdstr && ((rc = cmd_queue(adata, cmdstr, flags)) < 0))",
          "203:   if (adata->cmdbuf->dptr == adata->cmdbuf->data)",
          "206:   rc = mutt_socket_send_d(adata->conn, adata->cmdbuf->data,",
          "208:   adata->cmdbuf->dptr = adata->cmdbuf->data;",
          "211:   if (adata->state == IMAP_IDLE)",
          "212:     adata->state = IMAP_SELECTED;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "244: {",
          "245:   unsigned int exp_msn;",
          "246:   struct Email *e = NULL;",
          "248:   mutt_debug(2, \"Handling EXPUNGE\\n\");",
          "251:     return;",
          "254:   if (e)",
          "255:   {",
          "",
          "[Removed Lines]",
          "243: static void cmd_parse_expunge(struct ImapMboxData *mdata, const char *s)",
          "250:   if (mutt_str_atoui(s, &exp_msn) < 0 || exp_msn < 1 || exp_msn > mdata->max_msn)",
          "253:   e = mdata->msn_index[exp_msn - 1];",
          "",
          "[Added Lines]",
          "243: static void cmd_parse_expunge(struct ImapAccountData *adata, const char *s)",
          "250:   if (mutt_str_atoui(s, &exp_msn) < 0 || exp_msn < 1 || exp_msn > adata->max_msn)",
          "253:   e = adata->msn_index[exp_msn - 1];",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "261:   }",
          "265:   {",
          "267:     if (e)",
          "268:       IMAP_EDATA(e)->msn--;",
          "270:   }",
          "276: }",
          "287: {",
          "288:   bool earlier = false;",
          "289:   int rc;",
          "",
          "[Removed Lines]",
          "264:   for (unsigned int cur = exp_msn; cur < mdata->max_msn; cur++)",
          "266:     e = mdata->msn_index[cur];",
          "269:     mdata->msn_index[cur - 1] = e;",
          "272:   mdata->msn_index[mdata->max_msn - 1] = NULL;",
          "273:   mdata->max_msn--;",
          "275:   mdata->reopen |= IMAP_EXPUNGE_PENDING;",
          "286: static void cmd_parse_vanished(struct ImapMboxData *mdata, char *s)",
          "",
          "[Added Lines]",
          "264:   for (unsigned int cur = exp_msn; cur < adata->max_msn; cur++)",
          "266:     e = adata->msn_index[cur];",
          "269:     adata->msn_index[cur - 1] = e;",
          "272:   adata->msn_index[adata->max_msn - 1] = NULL;",
          "273:   adata->max_msn--;",
          "275:   adata->reopen |= IMAP_EXPUNGE_PENDING;",
          "286: static void cmd_parse_vanished(struct ImapAccountData *adata, char *s)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "318:   while ((rc = mutt_seqset_iterator_next(iter, &uid)) == 0)",
          "319:   {",
          "321:     if (!e)",
          "322:       continue;",
          "",
          "[Removed Lines]",
          "320:     struct Email *e = mutt_hash_int_find(mdata->uid_hash, uid);",
          "",
          "[Added Lines]",
          "320:     struct Email *e = mutt_hash_int_find(adata->uid_hash, uid);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "329:     e->index = INT_MAX;",
          "330:     IMAP_EDATA(e)->msn = 0;",
          "333:     {",
          "334:       mutt_debug(1, \"VANISHED: msn for UID %u is incorrect.\\n\", uid);",
          "335:       continue;",
          "336:     }",
          "338:     {",
          "339:       mutt_debug(1, \"VANISHED: msn_index for UID %u is incorrect.\\n\", uid);",
          "340:       continue;",
          "341:     }",
          "345:     if (!earlier)",
          "346:     {",
          "349:       {",
          "351:         if (e)",
          "352:           IMAP_EDATA(e)->msn--;",
          "354:       }",
          "358:     }",
          "359:   }",
          "361:   if (rc < 0)",
          "362:     mutt_debug(1, \"VANISHED: illegal seqset %s\\n\", s);",
          "366:   mutt_seqset_iterator_free(&iter);",
          "367: }",
          "379: {",
          "380:   unsigned int msn, uid;",
          "381:   struct Email *e = NULL;",
          "",
          "[Removed Lines]",
          "332:     if ((exp_msn < 1) || (exp_msn > mdata->max_msn))",
          "337:     if (mdata->msn_index[exp_msn - 1] != e)",
          "343:     mdata->msn_index[exp_msn - 1] = NULL;",
          "348:       for (unsigned int cur = exp_msn; cur < mdata->max_msn; cur++)",
          "350:         e = mdata->msn_index[cur];",
          "353:         mdata->msn_index[cur - 1] = e;",
          "356:       mdata->msn_index[mdata->max_msn - 1] = NULL;",
          "357:       mdata->max_msn--;",
          "364:   mdata->reopen |= IMAP_EXPUNGE_PENDING;",
          "378: static void cmd_parse_fetch(struct ImapMboxData *mdata, char *s)",
          "",
          "[Added Lines]",
          "332:     if ((exp_msn < 1) || (exp_msn > adata->max_msn))",
          "337:     if (adata->msn_index[exp_msn - 1] != e)",
          "343:     adata->msn_index[exp_msn - 1] = NULL;",
          "348:       for (unsigned int cur = exp_msn; cur < adata->max_msn; cur++)",
          "350:         e = adata->msn_index[cur];",
          "353:         adata->msn_index[cur - 1] = e;",
          "356:       adata->msn_index[adata->max_msn - 1] = NULL;",
          "357:       adata->max_msn--;",
          "364:   adata->reopen |= IMAP_EXPUNGE_PENDING;",
          "378: static void cmd_parse_fetch(struct ImapAccountData *adata, char *s)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "391:     return;",
          "392:   }",
          "395:   {",
          "396:     mutt_debug(3, \"Skipping FETCH response - MSN %u out of range\\n\", msn);",
          "397:     return;",
          "398:   }",
          "401:   if (!e || !e->active)",
          "402:   {",
          "403:     mutt_debug(3, \"Skipping FETCH response - MSN %u not in msn_index\\n\", msn);",
          "",
          "[Removed Lines]",
          "394:   if ((msn < 1) || (msn > mdata->max_msn))",
          "400:   e = mdata->msn_index[msn - 1];",
          "",
          "[Added Lines]",
          "394:   if ((msn < 1) || (msn > adata->max_msn))",
          "400:   e = adata->msn_index[msn - 1];",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "495:   if (flags)",
          "496:   {",
          "498:     if (server_changes)",
          "499:     {",
          "501:       if (e->changed)",
          "503:       else",
          "505:     }",
          "506:   }",
          "507: }",
          "515: {",
          "516:   mutt_debug(3, \"Handling CAPABILITY\\n\");",
          "",
          "[Removed Lines]",
          "497:     imap_set_flags(mdata, e, flags, &server_changes);",
          "502:         mdata->reopen |= IMAP_EXPUNGE_PENDING;",
          "504:         mdata->check_status = IMAP_FLAGS_PENDING;",
          "514: static void cmd_parse_capability(struct ImapMboxData *mdata, char *s)",
          "",
          "[Added Lines]",
          "497:     imap_set_flags(adata, e, flags, &server_changes);",
          "502:         adata->reopen |= IMAP_EXPUNGE_PENDING;",
          "504:         adata->check_status = IMAP_FLAGS_PENDING;",
          "514: static void cmd_parse_capability(struct ImapAccountData *adata, char *s)",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "519:   char *bracket = strchr(s, ']');",
          "520:   if (bracket)",
          "527:   while (*s)",
          "528:   {",
          "",
          "[Removed Lines]",
          "522:   FREE(&mdata->capstr);",
          "523:   mdata->capstr = mutt_str_strdup(s);",
          "525:   memset(mdata->capabilities, 0, sizeof(mdata->capabilities));",
          "",
          "[Added Lines]",
          "522:   FREE(&adata->capstr);",
          "523:   adata->capstr = mutt_str_strdup(s);",
          "525:   memset(adata->capabilities, 0, sizeof(adata->capabilities));",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "530:     {",
          "531:       if (mutt_str_word_casecmp(Capabilities[i], s) == 0)",
          "532:       {",
          "534:         mutt_debug(4, \" Found capability \\\"%s\\\": %d\\n\", Capabilities[i], i);",
          "535:         break;",
          "536:       }",
          "",
          "[Removed Lines]",
          "533:         mutt_bit_set(mdata->capabilities, i);",
          "",
          "[Added Lines]",
          "533:         mutt_bit_set(adata->capabilities, i);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "548: {",
          "549:   struct ImapList *list = NULL;",
          "550:   struct ImapList lb;",
          "552:   unsigned int litlen;",
          "556:   else",
          "557:     list = &lb;",
          "",
          "[Removed Lines]",
          "547: static void cmd_parse_list(struct ImapMboxData *mdata, char *s)",
          "554:   if (mdata->cmddata && mdata->cmdtype == IMAP_CT_LIST)",
          "555:     list = mdata->cmddata;",
          "",
          "[Added Lines]",
          "547: static void cmd_parse_list(struct ImapAccountData *adata, char *s)",
          "554:   if (adata->cmddata && adata->cmdtype == IMAP_CT_LIST)",
          "555:     list = adata->cmddata;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "596:   if (imap_get_literal_count(s, &litlen) == 0)",
          "597:   {",
          "599:     {",
          "601:       return;",
          "602:     }",
          "604:   }",
          "605:   else",
          "606:   {",
          "608:     list->name = s;",
          "609:   }",
          "611:   if (list->name[0] == '\\0')",
          "612:   {",
          "615:   }",
          "616: }",
          "624: {",
          "625:   char buf[STRING];",
          "626:   char errstr[STRING];",
          "",
          "[Removed Lines]",
          "598:     if (imap_cmd_step(mdata) != IMAP_CMD_CONTINUE)",
          "600:       mdata->status = IMAP_FATAL;",
          "603:     list->name = mdata->buf;",
          "607:     imap_unmunge_mbox_name(mdata, s);",
          "613:     mdata->delim = list->delim;",
          "614:     mutt_debug(3, \"Root delimiter: %c\\n\", mdata->delim);",
          "623: static void cmd_parse_lsub(struct ImapMboxData *mdata, char *s)",
          "",
          "[Added Lines]",
          "598:     if (imap_cmd_step(adata) != IMAP_CMD_CONTINUE)",
          "600:       adata->status = IMAP_FATAL;",
          "603:     list->name = adata->buf;",
          "607:     imap_unmunge_mbox_name(adata, s);",
          "613:     adata->delim = list->delim;",
          "614:     mutt_debug(3, \"Root delimiter: %c\\n\", adata->delim);",
          "623: static void cmd_parse_lsub(struct ImapAccountData *adata, char *s)",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "628:   struct Url url;",
          "629:   struct ImapList list;",
          "632:   {",
          "635:     return;",
          "636:   }",
          "638:   if (!ImapCheckSubscribed)",
          "639:     return;",
          "646:   if (!list.name || list.noselect)",
          "647:     return;",
          "",
          "[Removed Lines]",
          "631:   if (mdata->cmddata && mdata->cmdtype == IMAP_CT_LIST)",
          "634:     cmd_parse_list(mdata, s);",
          "641:   mdata->cmdtype = IMAP_CT_LIST;",
          "642:   mdata->cmddata = &list;",
          "643:   cmd_parse_list(mdata, s);",
          "644:   mdata->cmddata = NULL;",
          "",
          "[Added Lines]",
          "631:   if (adata->cmddata && adata->cmdtype == IMAP_CT_LIST)",
          "634:     cmd_parse_list(adata, s);",
          "641:   adata->cmdtype = IMAP_CT_LIST;",
          "642:   adata->cmddata = &list;",
          "643:   cmd_parse_list(adata, s);",
          "644:   adata->cmddata = NULL;",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "649:   mutt_debug(3, \"Subscribing to %s\\n\", list.name);",
          "651:   mutt_str_strfcpy(buf, \"mailboxes \\\"\", sizeof(buf));",
          "654:   imap_quote_string(errstr, sizeof(errstr), list.name, true);",
          "655:   url.path = errstr + 1;",
          "",
          "[Removed Lines]",
          "652:   mutt_account_tourl(&mdata->conn->account, &url);",
          "",
          "[Added Lines]",
          "652:   mutt_account_tourl(&adata->conn->account, &url);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "676: {",
          "677:   mutt_debug(2, \"Handling MYRIGHTS\\n\");",
          "",
          "[Removed Lines]",
          "675: static void cmd_parse_myrights(struct ImapMboxData *mdata, const char *s)",
          "",
          "[Added Lines]",
          "675: static void cmd_parse_myrights(struct ImapAccountData *adata, const char *s)",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "680:   s = imap_next_word((char *) s);",
          "685:   while (*s && !isspace((unsigned char) *s))",
          "686:   {",
          "687:     switch (*s)",
          "688:     {",
          "689:       case 'a':",
          "691:         break;",
          "692:       case 'e':",
          "694:         break;",
          "695:       case 'i':",
          "697:         break;",
          "698:       case 'k':",
          "700:         break;",
          "701:       case 'l':",
          "703:         break;",
          "704:       case 'p':",
          "706:         break;",
          "707:       case 'r':",
          "709:         break;",
          "710:       case 's':",
          "712:         break;",
          "713:       case 't':",
          "715:         break;",
          "716:       case 'w':",
          "718:         break;",
          "719:       case 'x':",
          "721:         break;",
          "724:       case 'c':",
          "727:         break;",
          "728:       case 'd':",
          "731:         break;",
          "732:       default:",
          "733:         mutt_debug(1, \"Unknown right: %c\\n\", *s);",
          "",
          "[Removed Lines]",
          "683:   memset(mdata->ctx->mailbox->rights, 0, sizeof(mdata->ctx->mailbox->rights));",
          "690:         mutt_bit_set(mdata->ctx->mailbox->rights, MUTT_ACL_ADMIN);",
          "693:         mutt_bit_set(mdata->ctx->mailbox->rights, MUTT_ACL_EXPUNGE);",
          "696:         mutt_bit_set(mdata->ctx->mailbox->rights, MUTT_ACL_INSERT);",
          "699:         mutt_bit_set(mdata->ctx->mailbox->rights, MUTT_ACL_CREATE);",
          "702:         mutt_bit_set(mdata->ctx->mailbox->rights, MUTT_ACL_LOOKUP);",
          "705:         mutt_bit_set(mdata->ctx->mailbox->rights, MUTT_ACL_POST);",
          "708:         mutt_bit_set(mdata->ctx->mailbox->rights, MUTT_ACL_READ);",
          "711:         mutt_bit_set(mdata->ctx->mailbox->rights, MUTT_ACL_SEEN);",
          "714:         mutt_bit_set(mdata->ctx->mailbox->rights, MUTT_ACL_DELETE);",
          "717:         mutt_bit_set(mdata->ctx->mailbox->rights, MUTT_ACL_WRITE);",
          "720:         mutt_bit_set(mdata->ctx->mailbox->rights, MUTT_ACL_DELMX);",
          "725:         mutt_bit_set(mdata->ctx->mailbox->rights, MUTT_ACL_CREATE);",
          "726:         mutt_bit_set(mdata->ctx->mailbox->rights, MUTT_ACL_DELMX);",
          "729:         mutt_bit_set(mdata->ctx->mailbox->rights, MUTT_ACL_DELETE);",
          "730:         mutt_bit_set(mdata->ctx->mailbox->rights, MUTT_ACL_EXPUNGE);",
          "",
          "[Added Lines]",
          "683:   memset(adata->ctx->mailbox->rights, 0, sizeof(adata->ctx->mailbox->rights));",
          "690:         mutt_bit_set(adata->ctx->mailbox->rights, MUTT_ACL_ADMIN);",
          "693:         mutt_bit_set(adata->ctx->mailbox->rights, MUTT_ACL_EXPUNGE);",
          "696:         mutt_bit_set(adata->ctx->mailbox->rights, MUTT_ACL_INSERT);",
          "699:         mutt_bit_set(adata->ctx->mailbox->rights, MUTT_ACL_CREATE);",
          "702:         mutt_bit_set(adata->ctx->mailbox->rights, MUTT_ACL_LOOKUP);",
          "705:         mutt_bit_set(adata->ctx->mailbox->rights, MUTT_ACL_POST);",
          "708:         mutt_bit_set(adata->ctx->mailbox->rights, MUTT_ACL_READ);",
          "711:         mutt_bit_set(adata->ctx->mailbox->rights, MUTT_ACL_SEEN);",
          "714:         mutt_bit_set(adata->ctx->mailbox->rights, MUTT_ACL_DELETE);",
          "717:         mutt_bit_set(adata->ctx->mailbox->rights, MUTT_ACL_WRITE);",
          "720:         mutt_bit_set(adata->ctx->mailbox->rights, MUTT_ACL_DELMX);",
          "725:         mutt_bit_set(adata->ctx->mailbox->rights, MUTT_ACL_CREATE);",
          "726:         mutt_bit_set(adata->ctx->mailbox->rights, MUTT_ACL_DELMX);",
          "729:         mutt_bit_set(adata->ctx->mailbox->rights, MUTT_ACL_DELETE);",
          "730:         mutt_bit_set(adata->ctx->mailbox->rights, MUTT_ACL_EXPUNGE);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "745: {",
          "746:   unsigned int uid;",
          "747:   struct Email *e = NULL;",
          "",
          "[Removed Lines]",
          "744: static void cmd_parse_search(struct ImapMboxData *mdata, const char *s)",
          "",
          "[Added Lines]",
          "744: static void cmd_parse_search(struct ImapAccountData *adata, const char *s)",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "752:   {",
          "753:     if (mutt_str_atoui(s, &uid) < 0)",
          "754:       continue;",
          "756:     if (e)",
          "757:       e->matched = true;",
          "758:   }",
          "",
          "[Removed Lines]",
          "755:     e = mutt_hash_int_find(mdata->uid_hash, uid);",
          "",
          "[Added Lines]",
          "755:     e = mutt_hash_int_find(adata->uid_hash, uid);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "770: {",
          "771:   char *value = NULL;",
          "772:   struct ImapMbox mx;",
          "",
          "[Removed Lines]",
          "769: static void cmd_parse_status(struct ImapMboxData *mdata, char *s)",
          "",
          "[Added Lines]",
          "769: static void cmd_parse_status(struct ImapAccountData *adata, char *s)",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "782:   if (imap_get_literal_count(mailbox, &litlen) == 0)",
          "783:   {",
          "785:     {",
          "787:       return;",
          "788:     }",
          "791:     {",
          "792:       mutt_debug(1, \"Error parsing STATUS mailbox\\n\");",
          "793:       return;",
          "794:     }",
          "797:     s = mailbox + litlen;",
          "799:     s++;",
          "",
          "[Removed Lines]",
          "784:     if (imap_cmd_step(mdata) != IMAP_CMD_CONTINUE)",
          "786:       mdata->status = IMAP_FATAL;",
          "790:     if (strlen(mdata->buf) < litlen)",
          "796:     mailbox = mdata->buf;",
          "",
          "[Added Lines]",
          "784:     if (imap_cmd_step(adata) != IMAP_CMD_CONTINUE)",
          "786:       adata->status = IMAP_FATAL;",
          "790:     if (strlen(adata->buf) < litlen)",
          "796:     mailbox = adata->buf;",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "803:   {",
          "804:     s = imap_next_word(mailbox);",
          "807:   }",
          "810:   olduv = status->uidvalidity;",
          "811:   oldun = status->uidnext;",
          "",
          "[Removed Lines]",
          "806:     imap_unmunge_mbox_name(mdata, mailbox);",
          "809:   status = imap_mboxcache_get(mdata, mailbox, 1);",
          "",
          "[Added Lines]",
          "806:     imap_unmunge_mbox_name(adata, mailbox);",
          "809:   status = imap_mboxcache_get(adata, mailbox, 1);",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "851:              status->messages, status->recent, status->unseen);",
          "855:   {",
          "857:     return;",
          "858:   }",
          "",
          "[Removed Lines]",
          "854:   if (mdata->cmddata && mdata->cmdtype == IMAP_CT_STATUS)",
          "856:     memcpy(mdata->cmddata, status, sizeof(struct ImapStatus));",
          "",
          "[Added Lines]",
          "854:   if (adata->cmddata && adata->cmdtype == IMAP_CT_STATUS)",
          "856:     memcpy(adata->cmddata, status, sizeof(struct ImapStatus));",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "872:       continue;",
          "873:     }",
          "876:     {",
          "877:       if (mx.mbox)",
          "878:       {",
          "879:         value = mutt_str_strdup(mx.mbox);",
          "881:         FREE(&mx.mbox);",
          "882:       }",
          "883:       else",
          "",
          "[Removed Lines]",
          "875:     if (imap_account_match(&mdata->conn->account, &mx.account))",
          "880:         imap_fix_path(mdata, mx.mbox, value, mutt_str_strlen(value) + 1);",
          "",
          "[Added Lines]",
          "875:     if (imap_account_match(&adata->conn->account, &mx.account))",
          "880:         imap_fix_path(adata, mx.mbox, value, mutt_str_strlen(value) + 1);",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "945: {",
          "946:   mutt_debug(2, \"Handling ENABLED\\n\");",
          "",
          "[Removed Lines]",
          "944: static void cmd_parse_enabled(struct ImapMboxData *mdata, const char *s)",
          "",
          "[Added Lines]",
          "944: static void cmd_parse_enabled(struct ImapAccountData *adata, const char *s)",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "950:     if ((mutt_str_strncasecmp(s, \"UTF8=ACCEPT\", 11) == 0) ||",
          "951:         (mutt_str_strncasecmp(s, \"UTF8=ONLY\", 9) == 0))",
          "952:     {",
          "954:     }",
          "955:     if (mutt_str_strncasecmp(s, \"QRESYNC\", 7) == 0)",
          "957:   }",
          "958: }",
          "967: {",
          "968:   unsigned int count = 0;",
          "970:   char *pn = imap_next_word(s);",
          "973:   {",
          "974:     pn = s;",
          "975:     s = imap_next_word(s);",
          "",
          "[Removed Lines]",
          "953:       mdata->unicode = true;",
          "956:       mdata->qresync = true;",
          "966: static int cmd_handle_untagged(struct ImapMboxData *mdata)",
          "969:   char *s = imap_next_word(mdata->buf);",
          "972:   if ((mdata->state >= IMAP_SELECTED) && isdigit((unsigned char) *s))",
          "",
          "[Added Lines]",
          "953:       adata->unicode = true;",
          "956:       adata->qresync = true;",
          "966: static int cmd_handle_untagged(struct ImapAccountData *adata)",
          "969:   char *s = imap_next_word(adata->buf);",
          "972:   if ((adata->state >= IMAP_SELECTED) && isdigit((unsigned char) *s))",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "987:         mutt_debug(1, \"Malformed EXISTS: '%s'\\n\", pn);",
          "988:       }",
          "991:       {",
          "",
          "[Removed Lines]",
          "990:       if (!(mdata->reopen & IMAP_EXPUNGE_PENDING) && count < mdata->max_msn)",
          "",
          "[Added Lines]",
          "990:       if (!(adata->reopen & IMAP_EXPUNGE_PENDING) && count < adata->max_msn)",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "996:       }",
          "1000:         mutt_debug(3, \"superfluous EXISTS message.\\n\");",
          "1001:       else",
          "1002:       {",
          "1004:         {",
          "1007:         }",
          "1009:       }",
          "1010:     }",
          "1012:     else if (mutt_str_strncasecmp(\"EXPUNGE\", s, 7) == 0)",
          "1014:     else if (mutt_str_strncasecmp(\"FETCH\", s, 5) == 0)",
          "1016:   }",
          "1019:   else if (mutt_str_strncasecmp(\"CAPABILITY\", s, 10) == 0)",
          "1021:   else if (mutt_str_strncasecmp(\"OK [CAPABILITY\", s, 14) == 0)",
          "1023:   else if (mutt_str_strncasecmp(\"OK [CAPABILITY\", pn, 14) == 0)",
          "1025:   else if (mutt_str_strncasecmp(\"LIST\", s, 4) == 0)",
          "1027:   else if (mutt_str_strncasecmp(\"LSUB\", s, 4) == 0)",
          "1029:   else if (mutt_str_strncasecmp(\"MYRIGHTS\", s, 8) == 0)",
          "1031:   else if (mutt_str_strncasecmp(\"SEARCH\", s, 6) == 0)",
          "1033:   else if (mutt_str_strncasecmp(\"STATUS\", s, 6) == 0)",
          "1035:   else if (mutt_str_strncasecmp(\"ENABLED\", s, 7) == 0)",
          "1037:   else if (mutt_str_strncasecmp(\"BYE\", s, 3) == 0)",
          "1038:   {",
          "1039:     mutt_debug(2, \"Handling BYE\\n\");",
          "1043:       return 0;",
          "1046:     s += 3;",
          "1047:     SKIPWS(s);",
          "1048:     mutt_error(\"%s\", s);",
          "1051:     return -1;",
          "1052:   }",
          "",
          "[Removed Lines]",
          "999:       else if (count == mdata->max_msn)",
          "1003:         if (!(mdata->reopen & IMAP_EXPUNGE_PENDING))",
          "1005:           mutt_debug(2, \"New mail in %s - %d messages total.\\n\", mdata->mbox_name, count);",
          "1006:           mdata->reopen |= IMAP_NEWMAIL_PENDING;",
          "1008:         mdata->new_mail_count = count;",
          "1013:       cmd_parse_expunge(mdata, pn);",
          "1015:       cmd_parse_fetch(mdata, pn);",
          "1017:   else if ((mdata->state >= IMAP_SELECTED) && (mutt_str_strncasecmp(\"VANISHED\", s, 8) == 0))",
          "1018:     cmd_parse_vanished(mdata, pn);",
          "1020:     cmd_parse_capability(mdata, s);",
          "1022:     cmd_parse_capability(mdata, pn);",
          "1024:     cmd_parse_capability(mdata, imap_next_word(pn));",
          "1026:     cmd_parse_list(mdata, s);",
          "1028:     cmd_parse_lsub(mdata, s);",
          "1030:     cmd_parse_myrights(mdata, s);",
          "1032:     cmd_parse_search(mdata, s);",
          "1034:     cmd_parse_status(mdata, s);",
          "1036:     cmd_parse_enabled(mdata, s);",
          "1042:     if (mdata->status == IMAP_BYE)",
          "1049:     cmd_handle_fatal(mdata);",
          "",
          "[Added Lines]",
          "999:       else if (count == adata->max_msn)",
          "1003:         if (!(adata->reopen & IMAP_EXPUNGE_PENDING))",
          "1005:           mutt_debug(2, \"New mail in %s - %d messages total.\\n\", adata->mbox_name, count);",
          "1006:           adata->reopen |= IMAP_NEWMAIL_PENDING;",
          "1008:         adata->new_mail_count = count;",
          "1013:       cmd_parse_expunge(adata, pn);",
          "1015:       cmd_parse_fetch(adata, pn);",
          "1017:   else if ((adata->state >= IMAP_SELECTED) && (mutt_str_strncasecmp(\"VANISHED\", s, 8) == 0))",
          "1018:     cmd_parse_vanished(adata, pn);",
          "1020:     cmd_parse_capability(adata, s);",
          "1022:     cmd_parse_capability(adata, pn);",
          "1024:     cmd_parse_capability(adata, imap_next_word(pn));",
          "1026:     cmd_parse_list(adata, s);",
          "1028:     cmd_parse_lsub(adata, s);",
          "1030:     cmd_parse_myrights(adata, s);",
          "1032:     cmd_parse_search(adata, s);",
          "1034:     cmd_parse_status(adata, s);",
          "1036:     cmd_parse_enabled(adata, s);",
          "1042:     if (adata->status == IMAP_BYE)",
          "1049:     cmd_handle_fatal(adata);",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "1074: {",
          "1076: }",
          "1088: {",
          "1089:   size_t len = 0;",
          "1090:   int c;",
          "",
          "[Removed Lines]",
          "1073: int imap_cmd_start(struct ImapMboxData *mdata, const char *cmdstr)",
          "1075:   return cmd_start(mdata, cmdstr, 0);",
          "1087: int imap_cmd_step(struct ImapMboxData *mdata)",
          "",
          "[Added Lines]",
          "1073: int imap_cmd_start(struct ImapAccountData *adata, const char *cmdstr)",
          "1075:   return cmd_start(adata, cmdstr, 0);",
          "1087: int imap_cmd_step(struct ImapAccountData *adata)",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "1092:   int stillrunning = 0;",
          "1093:   struct ImapCommand *cmd = NULL;",
          "1096:   {",
          "1098:     return IMAP_CMD_BAD;",
          "1099:   }",
          "",
          "[Removed Lines]",
          "1095:   if (mdata->status == IMAP_FATAL)",
          "1097:     cmd_handle_fatal(mdata);",
          "",
          "[Added Lines]",
          "1095:   if (adata->status == IMAP_FATAL)",
          "1097:     cmd_handle_fatal(adata);",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "1103:   do",
          "1104:   {",
          "1106:     {",
          "1110:     }",
          "1113:     if (len)",
          "1114:       len--;",
          "1116:     if (c <= 0)",
          "1117:     {",
          "1118:       mutt_debug(1, \"Error reading server response.\\n\");",
          "1120:       return IMAP_CMD_BAD;",
          "1121:     }",
          "",
          "[Removed Lines]",
          "1105:     if (len == mdata->blen)",
          "1107:       mutt_mem_realloc(&mdata->buf, mdata->blen + IMAP_CMD_BUFSIZE);",
          "1108:       mdata->blen = mdata->blen + IMAP_CMD_BUFSIZE;",
          "1109:       mutt_debug(3, \"grew buffer to %u bytes\\n\", mdata->blen);",
          "1115:     c = mutt_socket_readln(mdata->buf + len, mdata->blen - len, mdata->conn);",
          "1119:       cmd_handle_fatal(mdata);",
          "",
          "[Added Lines]",
          "1105:     if (len == adata->blen)",
          "1107:       mutt_mem_realloc(&adata->buf, adata->blen + IMAP_CMD_BUFSIZE);",
          "1108:       adata->blen = adata->blen + IMAP_CMD_BUFSIZE;",
          "1109:       mutt_debug(3, \"grew buffer to %u bytes\\n\", adata->blen);",
          "1115:     c = mutt_socket_readln(adata->buf + len, adata->blen - len, adata->conn);",
          "1119:       cmd_handle_fatal(adata);",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "1132:   {",
          "1136:   }",
          "1144:   {",
          "1145:     return IMAP_CMD_BAD;",
          "1146:   }",
          "1150:     return IMAP_CMD_RESPOND;",
          "",
          "[Removed Lines]",
          "1128:   while (len == mdata->blen);",
          "1131:   if ((mdata->blen > IMAP_CMD_BUFSIZE) && (len <= IMAP_CMD_BUFSIZE))",
          "1133:     mutt_mem_realloc(&mdata->buf, IMAP_CMD_BUFSIZE);",
          "1134:     mdata->blen = IMAP_CMD_BUFSIZE;",
          "1135:     mutt_debug(3, \"shrank buffer to %u bytes\\n\", mdata->blen);",
          "1138:   mdata->lastread = time(NULL);",
          "1141:   if (((mutt_str_strncmp(mdata->buf, \"* \", 2) == 0) ||",
          "1142:        (mutt_str_strncmp(imap_next_word(mdata->buf), \"OK [\", 4) == 0)) &&",
          "1143:       cmd_handle_untagged(mdata))",
          "1149:   if (mdata->buf[0] == '+')",
          "",
          "[Added Lines]",
          "1128:   while (len == adata->blen);",
          "1131:   if ((adata->blen > IMAP_CMD_BUFSIZE) && (len <= IMAP_CMD_BUFSIZE))",
          "1133:     mutt_mem_realloc(&adata->buf, IMAP_CMD_BUFSIZE);",
          "1134:     adata->blen = IMAP_CMD_BUFSIZE;",
          "1135:     mutt_debug(3, \"shrank buffer to %u bytes\\n\", adata->blen);",
          "1138:   adata->lastread = time(NULL);",
          "1141:   if (((mutt_str_strncmp(adata->buf, \"* \", 2) == 0) ||",
          "1142:        (mutt_str_strncmp(imap_next_word(adata->buf), \"OK [\", 4) == 0)) &&",
          "1143:       cmd_handle_untagged(adata))",
          "1149:   if (adata->buf[0] == '+')",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "1162:   rc = IMAP_CMD_OK;",
          "1164:   do",
          "1165:   {",
          "1167:     if (cmd->state == IMAP_CMD_NEW)",
          "1168:     {",
          "1170:       {",
          "1171:         if (!stillrunning)",
          "1172:         {",
          "1175:         }",
          "1179:         rc = cmd->state;",
          "",
          "[Removed Lines]",
          "1163:   c = mdata->lastcmd;",
          "1166:     cmd = &mdata->cmds[c];",
          "1169:       if (mutt_str_strncmp(mdata->buf, cmd->seq, SEQLEN) == 0)",
          "1174:           mdata->lastcmd = (mdata->lastcmd + 1) % mdata->cmdslots;",
          "1176:         cmd->state = cmd_status(mdata->buf);",
          "",
          "[Added Lines]",
          "1163:   c = adata->lastcmd;",
          "1166:     cmd = &adata->cmds[c];",
          "1169:       if (mutt_str_strncmp(adata->buf, cmd->seq, SEQLEN) == 0)",
          "1174:           adata->lastcmd = (adata->lastcmd + 1) % adata->cmdslots;",
          "1176:         cmd->state = cmd_status(adata->buf);",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "1182:         stillrunning++;",
          "1183:     }",
          "1188:   if (stillrunning)",
          "1189:     rc = IMAP_CMD_CONTINUE;",
          "1190:   else",
          "1191:   {",
          "1192:     mutt_debug(3, \"IMAP queue drained\\n\");",
          "1194:   }",
          "1196:   return rc;",
          "",
          "[Removed Lines]",
          "1185:     c = (c + 1) % mdata->cmdslots;",
          "1186:   } while (c != mdata->nextcmd);",
          "1193:     imap_cmd_finish(mdata);",
          "",
          "[Added Lines]",
          "1185:     c = (c + 1) % adata->cmdslots;",
          "1186:   } while (c != adata->nextcmd);",
          "1193:     imap_cmd_finish(adata);",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "1217: {",
          "1218:   static const char *notrailer = \"\";",
          "1221:   if (!s)",
          "1222:   {",
          "",
          "[Removed Lines]",
          "1216: const char *imap_cmd_trailer(struct ImapMboxData *mdata)",
          "1219:   const char *s = mdata->buf;",
          "",
          "[Added Lines]",
          "1216: const char *imap_cmd_trailer(struct ImapAccountData *adata)",
          "1219:   const char *s = adata->buf;",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "1229:              (mutt_str_strncasecmp(s, \"NO\", 2) != 0) &&",
          "1230:              (mutt_str_strncasecmp(s, \"BAD\", 3) != 0)))",
          "1231:   {",
          "1233:     return notrailer;",
          "1234:   }",
          "",
          "[Removed Lines]",
          "1232:     mutt_debug(2, \"not a command completion: %s\\n\", mdata->buf);",
          "",
          "[Added Lines]",
          "1232:     mutt_debug(2, \"not a command completion: %s\\n\", adata->buf);",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "1262: {",
          "1263:   int rc;",
          "1266:   if (rc < 0)",
          "1267:   {",
          "1269:     return -1;",
          "1270:   }",
          "",
          "[Removed Lines]",
          "1261: int imap_exec(struct ImapMboxData *mdata, const char *cmdstr, int flags)",
          "1265:   rc = cmd_start(mdata, cmdstr, flags);",
          "1268:     cmd_handle_fatal(mdata);",
          "",
          "[Added Lines]",
          "1261: int imap_exec(struct ImapAccountData *adata, const char *cmdstr, int flags)",
          "1265:   rc = cmd_start(adata, cmdstr, flags);",
          "1268:     cmd_handle_fatal(adata);",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "1273:     return 0;",
          "1275:   if ((flags & IMAP_CMD_POLL) && (ImapPollTimeout > 0) &&",
          "1277:   {",
          "1280:     return -1;",
          "1281:   }",
          "1284:   mutt_sig_allow_interrupt(1);",
          "1285:   do",
          "1287:   while (rc == IMAP_CMD_CONTINUE);",
          "1288:   mutt_sig_allow_interrupt(0);",
          "",
          "[Removed Lines]",
          "1276:       (mutt_socket_poll(mdata->conn, ImapPollTimeout)) == 0)",
          "1278:     mutt_error(_(\"Connection to %s timed out\"), mdata->conn->account.host);",
          "1279:     cmd_handle_fatal(mdata);",
          "1286:     rc = imap_cmd_step(mdata);",
          "",
          "[Added Lines]",
          "1276:       (mutt_socket_poll(adata->conn, ImapPollTimeout)) == 0)",
          "1278:     mutt_error(_(\"Connection to %s timed out\"), adata->conn->account.host);",
          "1279:     cmd_handle_fatal(adata);",
          "1286:     rc = imap_cmd_step(adata);",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "1293:   if (rc != IMAP_CMD_OK)",
          "1294:   {",
          "1296:       return -2;",
          "1299:     return -1;",
          "1300:   }",
          "",
          "[Removed Lines]",
          "1295:     if ((flags & IMAP_CMD_FAIL_OK) && mdata->status != IMAP_FATAL)",
          "1298:     mutt_debug(1, \"command failed: %s\\n\", mdata->buf);",
          "",
          "[Added Lines]",
          "1295:     if ((flags & IMAP_CMD_FAIL_OK) && adata->status != IMAP_FATAL)",
          "1298:     mutt_debug(1, \"command failed: %s\\n\", adata->buf);",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "1315: {",
          "1317:   {",
          "1319:     return;",
          "1320:   }",
          "1323:     return;",
          "1326:   {",
          "1331:     {",
          "1333:       mutt_debug(2, \"Fetching new mail\\n\");",
          "1338:     }",
          "1340:     {",
          "1341:       mutt_debug(2, \"Expunging mailbox\\n\");",
          "1347:           ~(IMAP_EXPUNGE_PENDING | IMAP_NEWMAIL_PENDING | IMAP_EXPUNGE_EXPECTED);",
          "1348:     }",
          "1349:   }",
          "1352: }",
          "1361: {",
          "1362:   int rc;",
          "1365:   {",
          "1367:     return -1;",
          "1368:   }",
          "1371:   {",
          "1374:     return -1;",
          "1375:   }",
          "1377:   do",
          "1379:   while (rc == IMAP_CMD_CONTINUE);",
          "1381:   if (rc == IMAP_CMD_RESPOND)",
          "1382:   {",
          "1387:     rc = IMAP_CMD_OK;",
          "1388:   }",
          "1389:   if (rc != IMAP_CMD_OK)",
          "",
          "[Removed Lines]",
          "1314: void imap_cmd_finish(struct ImapMboxData *mdata)",
          "1316:   if (mdata->status == IMAP_FATAL)",
          "1318:     cmd_handle_fatal(mdata);",
          "1322:   if (!(mdata->state >= IMAP_SELECTED) || mdata->ctx->mailbox->closing)",
          "1325:   if (mdata->reopen & IMAP_REOPEN_ALLOW)",
          "1327:     unsigned int count = mdata->new_mail_count;",
          "1329:     if (!(mdata->reopen & IMAP_EXPUNGE_PENDING) &&",
          "1330:         (mdata->reopen & IMAP_NEWMAIL_PENDING) && count > mdata->max_msn)",
          "1336:       mdata->check_status = IMAP_NEWMAIL_PENDING;",
          "1337:       imap_read_headers(mdata, mdata->max_msn + 1, count, false);",
          "1339:     else if (mdata->reopen & IMAP_EXPUNGE_PENDING)",
          "1342:       imap_expunge_mailbox(mdata);",
          "1344:       if ((mdata->reopen & IMAP_EXPUNGE_PENDING) && !(mdata->reopen & IMAP_EXPUNGE_EXPECTED))",
          "1345:         mdata->check_status = IMAP_EXPUNGE_PENDING;",
          "1346:       mdata->reopen &=",
          "1351:   mdata->status = 0;",
          "1360: int imap_cmd_idle(struct ImapMboxData *mdata)",
          "1364:   if (cmd_start(mdata, \"IDLE\", IMAP_CMD_POLL) < 0)",
          "1366:     cmd_handle_fatal(mdata);",
          "1370:   if ((ImapPollTimeout > 0) && (mutt_socket_poll(mdata->conn, ImapPollTimeout)) == 0)",
          "1372:     mutt_error(_(\"Connection to %s timed out\"), mdata->conn->account.host);",
          "1373:     cmd_handle_fatal(mdata);",
          "1378:     rc = imap_cmd_step(mdata);",
          "1384:     mdata->state = IMAP_IDLE;",
          "1386:     mutt_buffer_printf(mdata->cmdbuf, \"DONE\\r\\n\");",
          "",
          "[Added Lines]",
          "1314: void imap_cmd_finish(struct ImapAccountData *adata)",
          "1316:   if (adata->status == IMAP_FATAL)",
          "1318:     cmd_handle_fatal(adata);",
          "1322:   if (!(adata->state >= IMAP_SELECTED) || adata->ctx->mailbox->closing)",
          "1325:   if (adata->reopen & IMAP_REOPEN_ALLOW)",
          "1327:     unsigned int count = adata->new_mail_count;",
          "1329:     if (!(adata->reopen & IMAP_EXPUNGE_PENDING) &&",
          "1330:         (adata->reopen & IMAP_NEWMAIL_PENDING) && count > adata->max_msn)",
          "1336:       adata->check_status = IMAP_NEWMAIL_PENDING;",
          "1337:       imap_read_headers(adata, adata->max_msn + 1, count, false);",
          "1339:     else if (adata->reopen & IMAP_EXPUNGE_PENDING)",
          "1342:       imap_expunge_mailbox(adata);",
          "1344:       if ((adata->reopen & IMAP_EXPUNGE_PENDING) && !(adata->reopen & IMAP_EXPUNGE_EXPECTED))",
          "1345:         adata->check_status = IMAP_EXPUNGE_PENDING;",
          "1346:       adata->reopen &=",
          "1351:   adata->status = 0;",
          "1360: int imap_cmd_idle(struct ImapAccountData *adata)",
          "1364:   if (cmd_start(adata, \"IDLE\", IMAP_CMD_POLL) < 0)",
          "1366:     cmd_handle_fatal(adata);",
          "1370:   if ((ImapPollTimeout > 0) && (mutt_socket_poll(adata->conn, ImapPollTimeout)) == 0)",
          "1372:     mutt_error(_(\"Connection to %s timed out\"), adata->conn->account.host);",
          "1373:     cmd_handle_fatal(adata);",
          "1378:     rc = imap_cmd_step(adata);",
          "1384:     adata->state = IMAP_IDLE;",
          "1386:     mutt_buffer_printf(adata->cmdbuf, \"DONE\\r\\n\");",
          "",
          "---------------"
        ],
        "imap/imap.c||imap/imap.c": [
          "File: imap/imap.c -> imap/imap.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "78: {",
          "80:   {",
          "82:     return -1;",
          "83:   }",
          "87:   {",
          "88:     mutt_error(",
          "89:         _(\"This IMAP server is ancient. NeoMutt does not work with it.\"));",
          "",
          "[Removed Lines]",
          "77: static int check_capabilities(struct ImapMboxData *mdata)",
          "79:   if (imap_exec(mdata, \"CAPABILITY\", 0) != 0)",
          "81:     imap_error(\"check_capabilities\", mdata->buf);",
          "85:   if (!(mutt_bit_isset(mdata->capabilities, IMAP4) ||",
          "86:         mutt_bit_isset(mdata->capabilities, IMAP4REV1)))",
          "",
          "[Added Lines]",
          "77: static int check_capabilities(struct ImapAccountData *adata)",
          "79:   if (imap_exec(adata, \"CAPABILITY\", 0) != 0)",
          "81:     imap_error(\"check_capabilities\", adata->buf);",
          "85:   if (!(mutt_bit_isset(adata->capabilities, IMAP4) ||",
          "86:         mutt_bit_isset(adata->capabilities, IMAP4REV1)))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "160:                      const char *str, char *flags, size_t flsize)",
          "161: {",
          "164:       mutt_str_strcat(flags, flsize, str);",
          "165: }",
          "",
          "[Removed Lines]",
          "159: static void set_flag(struct ImapMboxData *mdata, int aclbit, int flag,",
          "162:   if (mutt_bit_isset(mdata->ctx->mailbox->rights, aclbit))",
          "163:     if (flag && imap_has_flag(&mdata->flags, str))",
          "",
          "[Added Lines]",
          "159: static void set_flag(struct ImapAccountData *adata, int aclbit, int flag,",
          "162:   if (mutt_bit_isset(adata->ctx->mailbox->rights, aclbit))",
          "163:     if (flag && imap_has_flag(&adata->flags, str))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "181:                         int flag, bool changed, bool invert, int *pos)",
          "182: {",
          "185:   int n;",
          "186:   bool started = false;",
          "190:        n++)",
          "191:   {",
          "",
          "[Removed Lines]",
          "180: static int make_msg_set(struct ImapMboxData *mdata, struct Buffer *buf,",
          "187:   struct Email **emails = mdata->ctx->mailbox->hdrs;",
          "189:   for (n = *pos; n < mdata->ctx->mailbox->msg_count && buf->dptr - buf->data < IMAP_MAX_CMDLEN;",
          "",
          "[Added Lines]",
          "180: static int make_msg_set(struct ImapAccountData *adata, struct Buffer *buf,",
          "187:   struct Email **emails = adata->ctx->mailbox->hdrs;",
          "189:   for (n = *pos; n < adata->ctx->mailbox->msg_count && buf->dptr - buf->data < IMAP_MAX_CMDLEN;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "241:           mutt_buffer_printf(buf, \",%u\", IMAP_EDATA(emails[n])->uid);",
          "242:       }",
          "245:         mutt_buffer_printf(buf, \":%u\", IMAP_EDATA(emails[n])->uid);",
          "246:     }",
          "250:     {",
          "251:       if (IMAP_EDATA(emails[n - 1])->uid > setstart)",
          "252:         mutt_buffer_printf(buf, \":%u\", IMAP_EDATA(emails[n - 1])->uid);",
          "",
          "[Removed Lines]",
          "244:       else if (n == mdata->ctx->mailbox->msg_count - 1)",
          "249:     else if (setstart && (emails[n]->active || n == mdata->ctx->mailbox->msg_count - 1))",
          "",
          "[Added Lines]",
          "244:       else if (n == adata->ctx->mailbox->msg_count - 1)",
          "249:     else if (setstart && (emails[n]->active || n == adata->ctx->mailbox->msg_count - 1))",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "296: {",
          "297:   int count = 0;",
          "298:   int rc;",
          "299:   char buf[LONG_STRING];",
          "302:     return -1;",
          "305:     return 0;",
          "308:     return 0;",
          "310:   snprintf(buf, sizeof(buf), \"+FLAGS.SILENT (%s)\", name);",
          "312:   if (rc < 0)",
          "313:     return rc;",
          "314:   count += rc;",
          "316:   buf[0] = '-';",
          "318:   if (rc < 0)",
          "319:     return rc;",
          "320:   count += rc;",
          "",
          "[Removed Lines]",
          "295: static int sync_helper(struct ImapMboxData *mdata, int right, int flag, const char *name)",
          "301:   if (!mdata->ctx)",
          "304:   if (!mutt_bit_isset(mdata->ctx->mailbox->rights, right))",
          "307:   if (right == MUTT_ACL_WRITE && !imap_has_flag(&mdata->flags, name))",
          "311:   rc = imap_exec_msgset(mdata, \"UID STORE\", buf, flag, true, false);",
          "317:   rc = imap_exec_msgset(mdata, \"UID STORE\", buf, flag, true, true);",
          "",
          "[Added Lines]",
          "295: static int sync_helper(struct ImapAccountData *adata, int right, int flag, const char *name)",
          "301:   if (!adata->ctx)",
          "304:   if (!mutt_bit_isset(adata->ctx->mailbox->rights, right))",
          "307:   if (right == MUTT_ACL_WRITE && !imap_has_flag(&adata->flags, name))",
          "311:   rc = imap_exec_msgset(adata, \"UID STORE\", buf, flag, true, false);",
          "317:   rc = imap_exec_msgset(adata, \"UID STORE\", buf, flag, true, true);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "338: {",
          "339:   struct ImapMbox mx;",
          "",
          "[Removed Lines]",
          "337: static int get_mailbox(const char *path, struct ImapMboxData **hidata, char *buf, size_t buflen)",
          "",
          "[Added Lines]",
          "337: static int get_mailbox(const char *path, struct ImapAccountData **hidata, char *buf, size_t buflen)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "490:         break;",
          "491:       case MUTT_SERVERSEARCH:",
          "492:       {",
          "495:         {",
          "496:           mutt_error(_(\"Server-side custom search not supported: %s\"), pat->p.str);",
          "497:           return -1;",
          "",
          "[Removed Lines]",
          "493:         struct ImapMboxData *mdata = mailbox->data;",
          "494:         if (!mutt_bit_isset(mdata->capabilities, X_GM_EXT1))",
          "",
          "[Added Lines]",
          "493:         struct ImapAccountData *adata = mailbox->data;",
          "494:         if (!mutt_bit_isset(adata->capabilities, X_GM_EXT1))",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "599: int imap_access(const char *path)",
          "600: {",
          "602:   struct ImapMbox mx;",
          "603:   char buf[LONG_STRING * 2];",
          "604:   char mailbox[LONG_STRING];",
          "",
          "[Removed Lines]",
          "601:   struct ImapMboxData *mdata = NULL;",
          "",
          "[Added Lines]",
          "601:   struct ImapAccountData *adata = NULL;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "608:   if (imap_parse_path(path, &mx))",
          "609:     return -1;",
          "613:   {",
          "614:     FREE(&mx.mbox);",
          "615:     return -1;",
          "616:   }",
          "619:   if (!*mailbox)",
          "620:     mutt_str_strfcpy(mailbox, \"INBOX\", sizeof(mailbox));",
          "624:   {",
          "625:     FREE(&mx.mbox);",
          "626:     return 0;",
          "627:   }",
          "628:   FREE(&mx.mbox);",
          "631:   {",
          "632:     mutt_debug(3, \"found %s in cache\\n\", mailbox);",
          "633:     return 0;",
          "634:   }",
          "639:     snprintf(buf, sizeof(buf), \"STATUS %s (UIDVALIDITY)\", mbox);",
          "641:     snprintf(buf, sizeof(buf), \"STATUS %s (UID-VALIDITY)\", mbox);",
          "642:   else",
          "643:   {",
          "",
          "[Removed Lines]",
          "611:   mdata = imap_conn_find(&mx.account, ImapPassive ? MUTT_IMAP_CONN_NONEW : 0);",
          "612:   if (!mdata)",
          "618:   imap_fix_path(mdata, mx.mbox, mailbox, sizeof(mailbox));",
          "623:   if (mutt_str_strcmp(mdata->mbox_name, mx.mbox) == 0)",
          "630:   if (imap_mboxcache_get(mdata, mailbox, false))",
          "636:   imap_munge_mbox_name(mdata, mbox, sizeof(mbox), mailbox);",
          "638:   if (mutt_bit_isset(mdata->capabilities, IMAP4REV1))",
          "640:   else if (mutt_bit_isset(mdata->capabilities, STATUS))",
          "",
          "[Added Lines]",
          "611:   adata = imap_conn_find(&mx.account, ImapPassive ? MUTT_IMAP_CONN_NONEW : 0);",
          "612:   if (!adata)",
          "618:   imap_fix_path(adata, mx.mbox, mailbox, sizeof(mailbox));",
          "623:   if (mutt_str_strcmp(adata->mbox_name, mx.mbox) == 0)",
          "630:   if (imap_mboxcache_get(adata, mailbox, false))",
          "636:   imap_munge_mbox_name(adata, mbox, sizeof(mbox), mailbox);",
          "638:   if (mutt_bit_isset(adata->capabilities, IMAP4REV1))",
          "640:   else if (mutt_bit_isset(adata->capabilities, STATUS))",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "645:     return -1;",
          "646:   }",
          "649:   if (rc < 0)",
          "650:   {",
          "651:     mutt_debug(1, \"Can't check STATUS of %s\\n\", mbox);",
          "",
          "[Removed Lines]",
          "648:   rc = imap_exec(mdata, buf, IMAP_CMD_FAIL_OK);",
          "",
          "[Added Lines]",
          "648:   rc = imap_exec(adata, buf, IMAP_CMD_FAIL_OK);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "666: {",
          "667:   char buf[LONG_STRING * 2], mbox[LONG_STRING];",
          "670:   snprintf(buf, sizeof(buf), \"CREATE %s\", mbox);",
          "673:   {",
          "675:     return -1;",
          "676:   }",
          "",
          "[Removed Lines]",
          "665: int imap_create_mailbox(struct ImapMboxData *mdata, char *mailbox)",
          "669:   imap_munge_mbox_name(mdata, mbox, sizeof(mbox), mailbox);",
          "672:   if (imap_exec(mdata, buf, 0) != 0)",
          "674:     mutt_error(_(\"CREATE failed: %s\"), imap_cmd_trailer(mdata));",
          "",
          "[Added Lines]",
          "665: int imap_create_mailbox(struct ImapAccountData *adata, char *mailbox)",
          "669:   imap_munge_mbox_name(adata, mbox, sizeof(mbox), mailbox);",
          "672:   if (imap_exec(adata, buf, 0) != 0)",
          "674:     mutt_error(_(\"CREATE failed: %s\"), imap_cmd_trailer(adata));",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "690: {",
          "691:   char oldmbox[LONG_STRING];",
          "692:   char newmbox[LONG_STRING];",
          "693:   int rc = 0;",
          "698:   struct Buffer *b = mutt_buffer_alloc(LONG_STRING);",
          "699:   mutt_buffer_printf(b, \"RENAME %s %s\", oldmbox, newmbox);",
          "702:     rc = -1;",
          "704:   mutt_buffer_free(&b);",
          "",
          "[Removed Lines]",
          "689: int imap_rename_mailbox(struct ImapMboxData *mdata, struct ImapMbox *mx, const char *newname)",
          "695:   imap_munge_mbox_name(mdata, oldmbox, sizeof(oldmbox), mx->mbox);",
          "696:   imap_munge_mbox_name(mdata, newmbox, sizeof(newmbox), newname);",
          "701:   if (imap_exec(mdata, b->data, 0) != 0)",
          "",
          "[Added Lines]",
          "689: int imap_rename_mailbox(struct ImapAccountData *adata, struct ImapMbox *mx, const char *newname)",
          "695:   imap_munge_mbox_name(adata, oldmbox, sizeof(oldmbox), mx->mbox);",
          "696:   imap_munge_mbox_name(adata, newmbox, sizeof(newmbox), newname);",
          "701:   if (imap_exec(adata, b->data, 0) != 0)",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "716: int imap_delete_mailbox(struct Mailbox *mailbox, struct ImapMbox *mx)",
          "717: {",
          "718:   char buf[PATH_MAX], mbox[PATH_MAX];",
          "721:   if (!mailbox || !mailbox->data)",
          "722:   {",
          "725:     {",
          "726:       FREE(&mx->mbox);",
          "727:       return -1;",
          "",
          "[Removed Lines]",
          "719:   struct ImapMboxData *mdata = NULL;",
          "723:     mdata = imap_conn_find(&mx->account, ImapPassive ? MUTT_IMAP_CONN_NONEW : 0);",
          "724:     if (!mdata)",
          "",
          "[Added Lines]",
          "719:   struct ImapAccountData *adata = NULL;",
          "723:     adata = imap_conn_find(&mx->account, ImapPassive ? MUTT_IMAP_CONN_NONEW : 0);",
          "724:     if (!adata)",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "729:   }",
          "730:   else",
          "731:   {",
          "733:   }",
          "736:   snprintf(buf, sizeof(buf), \"DELETE %s\", mbox);",
          "739:     return -1;",
          "741:   return 0;",
          "",
          "[Removed Lines]",
          "732:     mdata = mailbox->data;",
          "735:   imap_munge_mbox_name(mdata, mbox, sizeof(mbox), mx->mbox);",
          "738:   if (imap_exec(mdata, buf, 0) != 0)",
          "",
          "[Added Lines]",
          "732:     adata = mailbox->data;",
          "735:   imap_munge_mbox_name(adata, mbox, sizeof(mbox), mx->mbox);",
          "738:   if (imap_exec(adata, buf, 0) != 0)",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "756:     {",
          "757:       TAILQ_REMOVE(head, np, entries);",
          "758:       mutt_message(_(\"Closing connection to %s...\"), np->account.host);",
          "760:       mutt_clear_error();",
          "761:       mutt_socket_free(np);",
          "762:     }",
          "",
          "[Removed Lines]",
          "759:       imap_logout((struct ImapMboxData **) (void *) &np->data);",
          "",
          "[Added Lines]",
          "759:       imap_logout((struct ImapAccountData **) (void *) &np->data);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "781:                       struct Progress *pbar)",
          "782: {",
          "783:   char c;",
          "",
          "[Removed Lines]",
          "780: int imap_read_literal(FILE *fp, struct ImapMboxData *mdata, unsigned long bytes,",
          "",
          "[Added Lines]",
          "780: int imap_read_literal(FILE *fp, struct ImapAccountData *adata, unsigned long bytes,",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "792:   for (unsigned long pos = 0; pos < bytes; pos++)",
          "793:   {",
          "795:     {",
          "796:       mutt_debug(1, \"error during read, %ld bytes read\\n\", pos);",
          "799:       mutt_buffer_free(&buf);",
          "800:       return -1;",
          "",
          "[Removed Lines]",
          "794:     if (mutt_socket_readchar(mdata->conn, &c) != 1)",
          "797:       mdata->status = IMAP_FATAL;",
          "",
          "[Added Lines]",
          "794:     if (mutt_socket_readchar(adata->conn, &c) != 1)",
          "797:       adata->status = IMAP_FATAL;",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "839: {",
          "840:   struct Email *e = NULL;",
          "841:   int cacheno;",
          "842:   short old_sort;",
          "844: #ifdef USE_HCACHE",
          "846: #endif",
          "848:   old_sort = Sort;",
          "849:   Sort = SORT_ORDER;",
          "853:   {",
          "856:     if (e->index == INT_MAX)",
          "857:     {",
          "858:       mutt_debug(2, \"Expunging message UID %u.\\n\", IMAP_EDATA(e)->uid);",
          "860:       e->active = false;",
          "864: #ifdef USE_HCACHE",
          "866: #endif",
          "869:       cacheno = IMAP_EDATA(e)->uid % IMAP_CACHE_LEN;",
          "872:       {",
          "875:       }",
          "879:       imap_free_emaildata((void **) &e->data);",
          "880:     }",
          "",
          "[Removed Lines]",
          "838: void imap_expunge_mailbox(struct ImapMboxData *mdata)",
          "845:   mdata->hcache = imap_hcache_open(mdata, NULL);",
          "850:   mutt_sort_headers(mdata->ctx, false);",
          "852:   for (int i = 0; i < mdata->ctx->mailbox->msg_count; i++)",
          "854:     e = mdata->ctx->mailbox->hdrs[i];",
          "861:       mdata->ctx->mailbox->size -= e->content->length;",
          "863:       imap_cache_del(mdata, e);",
          "865:       imap_hcache_del(mdata, IMAP_EDATA(e)->uid);",
          "870:       if (mdata->cache[cacheno].uid == IMAP_EDATA(e)->uid &&",
          "871:           mdata->cache[cacheno].path)",
          "873:         unlink(mdata->cache[cacheno].path);",
          "874:         FREE(&mdata->cache[cacheno].path);",
          "877:       mutt_hash_int_delete(mdata->uid_hash, IMAP_EDATA(e)->uid, e);",
          "",
          "[Added Lines]",
          "838: void imap_expunge_mailbox(struct ImapAccountData *adata)",
          "845:   adata->hcache = imap_hcache_open(adata, NULL);",
          "850:   mutt_sort_headers(adata->ctx, false);",
          "852:   for (int i = 0; i < adata->ctx->mailbox->msg_count; i++)",
          "854:     e = adata->ctx->mailbox->hdrs[i];",
          "861:       adata->ctx->mailbox->size -= e->content->length;",
          "863:       imap_cache_del(adata, e);",
          "865:       imap_hcache_del(adata, IMAP_EDATA(e)->uid);",
          "870:       if (adata->cache[cacheno].uid == IMAP_EDATA(e)->uid &&",
          "871:           adata->cache[cacheno].path)",
          "873:         unlink(adata->cache[cacheno].path);",
          "874:         FREE(&adata->cache[cacheno].path);",
          "877:       mutt_hash_int_delete(adata->uid_hash, IMAP_EDATA(e)->uid, e);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "902:   }",
          "904: #ifdef USE_HCACHE",
          "906: #endif",
          "911:   Sort = old_sort;",
          "913: }",
          "",
          "[Removed Lines]",
          "905:   imap_hcache_close(mdata);",
          "910:   mx_update_tables(mdata->ctx, false);",
          "912:   mutt_sort_headers(mdata->ctx, true);",
          "",
          "[Added Lines]",
          "905:   imap_hcache_close(adata);",
          "910:   mx_update_tables(adata->ctx, false);",
          "912:   mutt_sort_headers(adata->ctx, true);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "926: {",
          "927:   struct Connection *conn = NULL;",
          "928:   struct ConnAccount *creds = NULL;",
          "930:   bool new = false;",
          "932:   while ((conn = mutt_conn_find(conn, account)))",
          "",
          "[Removed Lines]",
          "925: struct ImapMboxData *imap_conn_find(const struct ConnAccount *account, int flags)",
          "929:   struct ImapMboxData *mdata = NULL;",
          "",
          "[Added Lines]",
          "925: struct ImapAccountData *imap_conn_find(const struct ConnAccount *account, int flags)",
          "929:   struct ImapAccountData *adata = NULL;",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "936:     else",
          "937:       memcpy(&conn->account, creds, sizeof(struct ConnAccount));",
          "940:     if (flags & MUTT_IMAP_CONN_NONEW)",
          "941:     {",
          "943:       {",
          "945:         mutt_socket_free(conn);",
          "946:         return NULL;",
          "947:       }",
          "949:         continue;",
          "950:     }",
          "952:       continue;",
          "954:       continue;",
          "955:     break;",
          "956:   }",
          "",
          "[Removed Lines]",
          "939:     mdata = conn->data;",
          "942:       if (!mdata)",
          "948:       else if (mdata->state < IMAP_AUTHENTICATED)",
          "951:     if (flags & MUTT_IMAP_CONN_NOSELECT && mdata && mdata->state >= IMAP_SELECTED)",
          "953:     if (mdata && mdata->status == IMAP_FATAL)",
          "",
          "[Added Lines]",
          "939:     adata = conn->data;",
          "942:       if (!adata)",
          "948:       else if (adata->state < IMAP_AUTHENTICATED)",
          "951:     if (flags & MUTT_IMAP_CONN_NOSELECT && adata && adata->state >= IMAP_SELECTED)",
          "953:     if (adata && adata->status == IMAP_FATAL)",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "962:   {",
          "967:     new = true;",
          "968:   }",
          "973:   {",
          "975:     {",
          "978:       new = true;",
          "981:     }",
          "982:     else",
          "984:   }",
          "986:   {",
          "997:     {",
          "999:       if (ImapQResync)",
          "1001:     }",
          "1009:   }",
          "1012:     return NULL;",
          "1015: }",
          "1024: {",
          "1025:   char buf[LONG_STRING];",
          "1028:     return -1;",
          "1033:   {",
          "1035:     return -1;",
          "1036:   }",
          "1039:   {",
          "1042:     {",
          "1043:       goto bail;",
          "1044:     }",
          "1045: #ifdef USE_SSL",
          "1048:     {",
          "1049:       int rc;",
          "",
          "[Removed Lines]",
          "961:   if (!mdata)",
          "964:     mdata = imap_mdata_new();",
          "965:     conn->data = mdata;",
          "966:     mdata->conn = conn;",
          "970:   if (mdata->state == IMAP_DISCONNECTED)",
          "971:     imap_open_connection(mdata);",
          "972:   if (mdata->state == IMAP_CONNECTED)",
          "974:     if (imap_authenticate(mdata) == IMAP_AUTH_SUCCESS)",
          "976:       mdata->state = IMAP_AUTHENTICATED;",
          "977:       FREE(&mdata->capstr);",
          "979:       if (mdata->conn->ssf)",
          "980:         mutt_debug(2, \"Communication encrypted at %d bits\\n\", mdata->conn->ssf);",
          "983:       mutt_account_unsetpass(&mdata->conn->account);",
          "985:   if (new && mdata->state == IMAP_AUTHENTICATED)",
          "988:     imap_exec(mdata, \"CAPABILITY\", IMAP_CMD_QUEUE);",
          "991:     if (mutt_bit_isset(mdata->capabilities, ENABLE))",
          "992:       imap_exec(mdata, \"ENABLE UTF8=ACCEPT\", IMAP_CMD_QUEUE);",
          "996:     if (mutt_bit_isset(mdata->capabilities, QRESYNC))",
          "998:       mutt_bit_set(mdata->capabilities, CONDSTORE);",
          "1000:         imap_exec(mdata, \"ENABLE QRESYNC\", IMAP_CMD_QUEUE);",
          "1004:     mdata->delim = '/';",
          "1005:     imap_exec(mdata, \"LIST \\\"\\\" \\\"\\\"\", IMAP_CMD_QUEUE);",
          "1008:     imap_exec(mdata, NULL, IMAP_CMD_FAIL_OK);",
          "1011:   if (mdata->state < IMAP_AUTHENTICATED)",
          "1014:   return mdata;",
          "1023: int imap_open_connection(struct ImapMboxData *mdata)",
          "1027:   if (mutt_socket_open(mdata->conn) < 0)",
          "1030:   mdata->state = IMAP_CONNECTED;",
          "1032:   if (imap_cmd_step(mdata) != IMAP_CMD_OK)",
          "1034:     imap_close_connection(mdata);",
          "1038:   if (mutt_str_strncasecmp(\"* OK\", mdata->buf, 4) == 0)",
          "1040:     if ((mutt_str_strncasecmp(\"* OK [CAPABILITY\", mdata->buf, 16) != 0) &&",
          "1041:         check_capabilities(mdata))",
          "1047:     if (!mdata->conn->ssf && (SslForceTls || mutt_bit_isset(mdata->capabilities, STARTTLS)))",
          "",
          "[Added Lines]",
          "961:   if (!adata)",
          "964:     adata = imap_adata_new();",
          "965:     conn->data = adata;",
          "966:     adata->conn = conn;",
          "970:   if (adata->state == IMAP_DISCONNECTED)",
          "971:     imap_open_connection(adata);",
          "972:   if (adata->state == IMAP_CONNECTED)",
          "974:     if (imap_authenticate(adata) == IMAP_AUTH_SUCCESS)",
          "976:       adata->state = IMAP_AUTHENTICATED;",
          "977:       FREE(&adata->capstr);",
          "979:       if (adata->conn->ssf)",
          "980:         mutt_debug(2, \"Communication encrypted at %d bits\\n\", adata->conn->ssf);",
          "983:       mutt_account_unsetpass(&adata->conn->account);",
          "985:   if (new && adata->state == IMAP_AUTHENTICATED)",
          "988:     imap_exec(adata, \"CAPABILITY\", IMAP_CMD_QUEUE);",
          "991:     if (mutt_bit_isset(adata->capabilities, ENABLE))",
          "992:       imap_exec(adata, \"ENABLE UTF8=ACCEPT\", IMAP_CMD_QUEUE);",
          "996:     if (mutt_bit_isset(adata->capabilities, QRESYNC))",
          "998:       mutt_bit_set(adata->capabilities, CONDSTORE);",
          "1000:         imap_exec(adata, \"ENABLE QRESYNC\", IMAP_CMD_QUEUE);",
          "1004:     adata->delim = '/';",
          "1005:     imap_exec(adata, \"LIST \\\"\\\" \\\"\\\"\", IMAP_CMD_QUEUE);",
          "1008:     imap_exec(adata, NULL, IMAP_CMD_FAIL_OK);",
          "1011:   if (adata->state < IMAP_AUTHENTICATED)",
          "1014:   return adata;",
          "1023: int imap_open_connection(struct ImapAccountData *adata)",
          "1027:   if (mutt_socket_open(adata->conn) < 0)",
          "1030:   adata->state = IMAP_CONNECTED;",
          "1032:   if (imap_cmd_step(adata) != IMAP_CMD_OK)",
          "1034:     imap_close_connection(adata);",
          "1038:   if (mutt_str_strncasecmp(\"* OK\", adata->buf, 4) == 0)",
          "1040:     if ((mutt_str_strncasecmp(\"* OK [CAPABILITY\", adata->buf, 16) != 0) &&",
          "1041:         check_capabilities(adata))",
          "1047:     if (!adata->conn->ssf && (SslForceTls || mutt_bit_isset(adata->capabilities, STARTTLS)))",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1057:       }",
          "1058:       if (rc == MUTT_YES)",
          "1059:       {",
          "1061:         if (rc == -1)",
          "1062:           goto bail;",
          "1063:         if (rc != -2)",
          "1064:         {",
          "1066:           {",
          "1067:             mutt_error(_(\"Could not negotiate TLS connection\"));",
          "1068:             goto err_close_conn;",
          "",
          "[Removed Lines]",
          "1060:         rc = imap_exec(mdata, \"STARTTLS\", IMAP_CMD_FAIL_OK);",
          "1065:           if (mutt_ssl_starttls(mdata->conn))",
          "",
          "[Added Lines]",
          "1060:         rc = imap_exec(adata, \"STARTTLS\", IMAP_CMD_FAIL_OK);",
          "1065:           if (mutt_ssl_starttls(adata->conn))",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1070:           else",
          "1071:           {",
          "1074:               goto bail;",
          "1075:           }",
          "1076:         }",
          "1077:       }",
          "1078:     }",
          "1081:     {",
          "1082:       mutt_error(_(\"Encrypted connection unavailable\"));",
          "1083:       goto err_close_conn;",
          "1084:     }",
          "1085: #endif",
          "1086:   }",
          "1088:   {",
          "1091:       goto bail;",
          "1093:   }",
          "1094:   else",
          "1095:   {",
          "",
          "[Removed Lines]",
          "1073:             if (imap_exec(mdata, \"CAPABILITY\", 0))",
          "1080:     if (SslForceTls && !mdata->conn->ssf)",
          "1087:   else if (mutt_str_strncasecmp(\"* PREAUTH\", mdata->buf, 9) == 0)",
          "1089:     mdata->state = IMAP_AUTHENTICATED;",
          "1090:     if (check_capabilities(mdata) != 0)",
          "1092:     FREE(&mdata->capstr);",
          "",
          "[Added Lines]",
          "1073:             if (imap_exec(adata, \"CAPABILITY\", 0))",
          "1080:     if (SslForceTls && !adata->conn->ssf)",
          "1087:   else if (mutt_str_strncasecmp(\"* PREAUTH\", adata->buf, 9) == 0)",
          "1089:     adata->state = IMAP_AUTHENTICATED;",
          "1090:     if (check_capabilities(adata) != 0)",
          "1092:     FREE(&adata->capstr);",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "1102: #ifdef USE_SSL",
          "1103: err_close_conn:",
          "1105: #endif",
          "1106: bail:",
          "1108:   return -1;",
          "1109: }",
          "1116: {",
          "1118:   {",
          "1121:   }",
          "1127: }",
          "1134: {",
          "1140:   {",
          "1142:       ;",
          "1143:   }",
          "1147: }",
          "",
          "[Removed Lines]",
          "1104:   imap_close_connection(mdata);",
          "1107:   FREE(&mdata->capstr);",
          "1115: void imap_close_connection(struct ImapMboxData *mdata)",
          "1117:   if (mdata->state != IMAP_DISCONNECTED)",
          "1119:     mutt_socket_close(mdata->conn);",
          "1120:     mdata->state = IMAP_DISCONNECTED;",
          "1122:   mdata->seqno = false;",
          "1123:   mdata->nextcmd = false;",
          "1124:   mdata->lastcmd = false;",
          "1125:   mdata->status = false;",
          "1126:   memset(mdata->cmds, 0, sizeof(struct ImapCommand) * mdata->cmdslots);",
          "1133: void imap_logout(struct ImapMboxData **mdata)",
          "1137:   (*mdata)->status = IMAP_BYE;",
          "1138:   imap_cmd_start(*mdata, \"LOGOUT\");",
          "1139:   if (ImapPollTimeout <= 0 || mutt_socket_poll((*mdata)->conn, ImapPollTimeout) != 0)",
          "1141:     while (imap_cmd_step(*mdata) == IMAP_CMD_CONTINUE)",
          "1145:   mutt_socket_close((*mdata)->conn);",
          "1146:   imap_mdata_free(mdata);",
          "",
          "[Added Lines]",
          "1104:   imap_close_connection(adata);",
          "1107:   FREE(&adata->capstr);",
          "1115: void imap_close_connection(struct ImapAccountData *adata)",
          "1117:   if (adata->state != IMAP_DISCONNECTED)",
          "1119:     mutt_socket_close(adata->conn);",
          "1120:     adata->state = IMAP_DISCONNECTED;",
          "1122:   adata->seqno = false;",
          "1123:   adata->nextcmd = false;",
          "1124:   adata->lastcmd = false;",
          "1125:   adata->status = false;",
          "1126:   memset(adata->cmds, 0, sizeof(struct ImapCommand) * adata->cmdslots);",
          "1133: void imap_logout(struct ImapAccountData **adata)",
          "1137:   (*adata)->status = IMAP_BYE;",
          "1138:   imap_cmd_start(*adata, \"LOGOUT\");",
          "1139:   if (ImapPollTimeout <= 0 || mutt_socket_poll((*adata)->conn, ImapPollTimeout) != 0)",
          "1141:     while (imap_cmd_step(*adata) == IMAP_CMD_CONTINUE)",
          "1145:   mutt_socket_close((*adata)->conn);",
          "1146:   imap_adata_free(adata);",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "1192:                      const char *post, int flag, bool changed, bool invert)",
          "1193: {",
          "1194:   struct Email **emails = NULL;",
          "",
          "[Removed Lines]",
          "1191: int imap_exec_msgset(struct ImapMboxData *mdata, const char *pre,",
          "",
          "[Added Lines]",
          "1191: int imap_exec_msgset(struct ImapAccountData *adata, const char *pre,",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "1205:   oldsort = Sort;",
          "1206:   if (Sort != SORT_ORDER)",
          "1207:   {",
          "1214:     Sort = SORT_ORDER;",
          "1216:           sizeof(struct Email *), mutt_get_sort_func(SORT_ORDER));",
          "1217:   }",
          "",
          "[Removed Lines]",
          "1208:     emails = mdata->ctx->mailbox->hdrs;",
          "1209:     mdata->ctx->mailbox->hdrs =",
          "1210:         mutt_mem_malloc(mdata->ctx->mailbox->msg_count * sizeof(struct Email *));",
          "1211:     memcpy(mdata->ctx->mailbox->hdrs, emails,",
          "1212:            mdata->ctx->mailbox->msg_count * sizeof(struct Email *));",
          "1215:     qsort(mdata->ctx->mailbox->hdrs, mdata->ctx->mailbox->msg_count,",
          "",
          "[Added Lines]",
          "1208:     emails = adata->ctx->mailbox->hdrs;",
          "1209:     adata->ctx->mailbox->hdrs =",
          "1210:         mutt_mem_malloc(adata->ctx->mailbox->msg_count * sizeof(struct Email *));",
          "1211:     memcpy(adata->ctx->mailbox->hdrs, emails,",
          "1212:            adata->ctx->mailbox->msg_count * sizeof(struct Email *));",
          "1215:     qsort(adata->ctx->mailbox->hdrs, adata->ctx->mailbox->msg_count,",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "1222:   {",
          "1223:     cmd->dptr = cmd->data;",
          "1224:     mutt_buffer_printf(cmd, \"%s \", pre);",
          "1226:     if (rc > 0)",
          "1227:     {",
          "1228:       mutt_buffer_printf(cmd, \" %s\", post);",
          "1230:       {",
          "1231:         rc = -1;",
          "1232:         goto out;",
          "",
          "[Removed Lines]",
          "1225:     rc = make_msg_set(mdata, cmd, flag, changed, invert, &pos);",
          "1229:       if (imap_exec(mdata, cmd->data, IMAP_CMD_QUEUE))",
          "",
          "[Added Lines]",
          "1225:     rc = make_msg_set(adata, cmd, flag, changed, invert, &pos);",
          "1229:       if (imap_exec(adata, cmd->data, IMAP_CMD_QUEUE))",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "1242:   if (oldsort != Sort)",
          "1243:   {",
          "1244:     Sort = oldsort;",
          "1247:   }",
          "1249:   return rc;",
          "",
          "[Removed Lines]",
          "1245:     FREE(&mdata->ctx->mailbox->hdrs);",
          "1246:     mdata->ctx->mailbox->hdrs = emails;",
          "",
          "[Added Lines]",
          "1245:     FREE(&adata->ctx->mailbox->hdrs);",
          "1246:     adata->ctx->mailbox->hdrs = emails;",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "1268:                                struct Buffer *cmd, int *err_continue)",
          "1269: {",
          "1270:   char flags[LONG_STRING];",
          "",
          "[Removed Lines]",
          "1267: int imap_sync_message_for_copy(struct ImapMboxData *mdata, struct Email *e,",
          "",
          "[Added Lines]",
          "1267: int imap_sync_message_for_copy(struct ImapAccountData *adata, struct Email *e,",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "1286:   flags[0] = '\\0';",
          "1293:            sizeof(flags));",
          "1296:   {",
          "1298:     if (IMAP_EDATA(e)->flags_system)",
          "",
          "[Removed Lines]",
          "1288:   set_flag(mdata, MUTT_ACL_SEEN, e->read, \"\\\\Seen \", flags, sizeof(flags));",
          "1289:   set_flag(mdata, MUTT_ACL_WRITE, e->old, \"Old \", flags, sizeof(flags));",
          "1290:   set_flag(mdata, MUTT_ACL_WRITE, e->flagged, \"\\\\Flagged \", flags, sizeof(flags));",
          "1291:   set_flag(mdata, MUTT_ACL_WRITE, e->replied, \"\\\\Answered \", flags, sizeof(flags));",
          "1292:   set_flag(mdata, MUTT_ACL_DELETE, IMAP_EDATA(e)->deleted, \"\\\\Deleted \", flags,",
          "1295:   if (mutt_bit_isset(mdata->ctx->mailbox->rights, MUTT_ACL_WRITE))",
          "",
          "[Added Lines]",
          "1288:   set_flag(adata, MUTT_ACL_SEEN, e->read, \"\\\\Seen \", flags, sizeof(flags));",
          "1289:   set_flag(adata, MUTT_ACL_WRITE, e->old, \"Old \", flags, sizeof(flags));",
          "1290:   set_flag(adata, MUTT_ACL_WRITE, e->flagged, \"\\\\Flagged \", flags, sizeof(flags));",
          "1291:   set_flag(adata, MUTT_ACL_WRITE, e->replied, \"\\\\Answered \", flags, sizeof(flags));",
          "1292:   set_flag(adata, MUTT_ACL_DELETE, IMAP_EDATA(e)->deleted, \"\\\\Deleted \", flags,",
          "1295:   if (mutt_bit_isset(adata->ctx->mailbox->rights, MUTT_ACL_WRITE))",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "1313:   if (!*flags)",
          "1314:   {",
          "1320:              flags, sizeof(flags));",
          "1324:         IMAP_EDATA(e)->flags_remote)",
          "1325:       mutt_str_strcat(flags, sizeof(flags), IMAP_EDATA(e)->flags_remote);",
          "",
          "[Removed Lines]",
          "1315:     set_flag(mdata, MUTT_ACL_SEEN, 1, \"\\\\Seen \", flags, sizeof(flags));",
          "1316:     set_flag(mdata, MUTT_ACL_WRITE, 1, \"Old \", flags, sizeof(flags));",
          "1317:     set_flag(mdata, MUTT_ACL_WRITE, 1, \"\\\\Flagged \", flags, sizeof(flags));",
          "1318:     set_flag(mdata, MUTT_ACL_WRITE, 1, \"\\\\Answered \", flags, sizeof(flags));",
          "1319:     set_flag(mdata, MUTT_ACL_DELETE, !IMAP_EDATA(e)->deleted, \"\\\\Deleted \",",
          "1323:     if (mutt_bit_isset(mdata->ctx->mailbox->rights, MUTT_ACL_WRITE) &&",
          "",
          "[Added Lines]",
          "1315:     set_flag(adata, MUTT_ACL_SEEN, 1, \"\\\\Seen \", flags, sizeof(flags));",
          "1316:     set_flag(adata, MUTT_ACL_WRITE, 1, \"Old \", flags, sizeof(flags));",
          "1317:     set_flag(adata, MUTT_ACL_WRITE, 1, \"\\\\Flagged \", flags, sizeof(flags));",
          "1318:     set_flag(adata, MUTT_ACL_WRITE, 1, \"\\\\Answered \", flags, sizeof(flags));",
          "1319:     set_flag(adata, MUTT_ACL_DELETE, !IMAP_EDATA(e)->deleted, \"\\\\Deleted \",",
          "1323:     if (mutt_bit_isset(adata->ctx->mailbox->rights, MUTT_ACL_WRITE) &&",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "1343:       (*err_continue != MUTT_YES))",
          "1344:   {",
          "1346:     if (*err_continue != MUTT_YES)",
          "1347:     {",
          "1348:       e->active = true;",
          "",
          "[Removed Lines]",
          "1342:   if (*flags && (imap_exec(mdata, cmd->data, 0) != 0) && err_continue &&",
          "",
          "[Added Lines]",
          "1342:   if (*flags && (imap_exec(adata, cmd->data, 0) != 0) && err_continue &&",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "1386: {",
          "1389:   int result = 0;",
          "1394:   {",
          "1396:       return -1;",
          "1397:   }",
          "1399:   {",
          "1401:     {",
          "1403:       {",
          "1404:         mutt_debug(1, \"Error reading IDLE response\\n\");",
          "1405:         return -1;",
          "",
          "[Removed Lines]",
          "1385: int imap_check(struct ImapMboxData *mdata, bool force)",
          "1392:   if (!force && ImapIdle && mutt_bit_isset(mdata->capabilities, IDLE) &&",
          "1393:       (mdata->state != IMAP_IDLE || time(NULL) >= mdata->lastread + ImapKeepalive))",
          "1395:     if (imap_cmd_idle(mdata) < 0)",
          "1398:   if (mdata->state == IMAP_IDLE)",
          "1400:     while ((result = mutt_socket_poll(mdata->conn, 0)) > 0)",
          "1402:       if (imap_cmd_step(mdata) != IMAP_CMD_CONTINUE)",
          "",
          "[Added Lines]",
          "1385: int imap_check(struct ImapAccountData *adata, bool force)",
          "1392:   if (!force && ImapIdle && mutt_bit_isset(adata->capabilities, IDLE) &&",
          "1393:       (adata->state != IMAP_IDLE || time(NULL) >= adata->lastread + ImapKeepalive))",
          "1395:     if (imap_cmd_idle(adata) < 0)",
          "1398:   if (adata->state == IMAP_IDLE)",
          "1400:     while ((result = mutt_socket_poll(adata->conn, 0)) > 0)",
          "1402:       if (imap_cmd_step(adata) != IMAP_CMD_CONTINUE)",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "1408:     if (result < 0)",
          "1409:     {",
          "1410:       mutt_debug(1, \"Poll failed, disabling IDLE\\n\");",
          "1412:     }",
          "1413:   }",
          "1417:   {",
          "1418:     return -1;",
          "1419:   }",
          "1426:     result = MUTT_REOPENED;",
          "1428:     result = MUTT_NEW_MAIL;",
          "1430:     result = MUTT_FLAGS;",
          "1434:   return result;",
          "1435: }",
          "",
          "[Removed Lines]",
          "1411:       mutt_bit_unset(mdata->capabilities, IDLE);",
          "1415:   if ((force || (mdata->state != IMAP_IDLE && time(NULL) >= mdata->lastread + Timeout)) &&",
          "1416:       imap_exec(mdata, \"NOOP\", IMAP_CMD_POLL) != 0)",
          "1423:   imap_cmd_finish(mdata);",
          "1425:   if (mdata->check_status & IMAP_EXPUNGE_PENDING)",
          "1427:   else if (mdata->check_status & IMAP_NEWMAIL_PENDING)",
          "1429:   else if (mdata->check_status & IMAP_FLAGS_PENDING)",
          "1432:   mdata->check_status = 0;",
          "",
          "[Added Lines]",
          "1411:       mutt_bit_unset(adata->capabilities, IDLE);",
          "1415:   if ((force || (adata->state != IMAP_IDLE && time(NULL) >= adata->lastread + Timeout)) &&",
          "1416:       imap_exec(adata, \"NOOP\", IMAP_CMD_POLL) != 0)",
          "1423:   imap_cmd_finish(adata);",
          "1425:   if (adata->check_status & IMAP_EXPUNGE_PENDING)",
          "1427:   else if (adata->check_status & IMAP_NEWMAIL_PENDING)",
          "1429:   else if (adata->check_status & IMAP_FLAGS_PENDING)",
          "1432:   adata->check_status = 0;",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "1446: int imap_mailbox_check(bool check_stats)",
          "1447: {",
          "1450:   char name[LONG_STRING];",
          "1451:   char command[LONG_STRING * 2];",
          "1452:   char munged[LONG_STRING];",
          "",
          "[Removed Lines]",
          "1448:   struct ImapMboxData *mdata = NULL;",
          "1449:   struct ImapMboxData *lastdata = NULL;",
          "",
          "[Added Lines]",
          "1448:   struct ImapAccountData *adata = NULL;",
          "1449:   struct ImapAccountData *lastdata = NULL;",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "1465:     if (np->m->magic != MUTT_IMAP)",
          "1466:       continue;",
          "1469:     {",
          "1470:       np->m->has_new = false;",
          "1471:       continue;",
          "",
          "[Removed Lines]",
          "1468:     if (get_mailbox(np->m->path, &mdata, name, sizeof(name)) < 0)",
          "",
          "[Added Lines]",
          "1468:     if (get_mailbox(np->m->path, &adata, name, sizeof(name)) < 0)",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "1479:     {",
          "1480:       np->m->has_new = false;",
          "1481:       continue;",
          "1482:     }",
          "1486:     {",
          "1487:       mutt_debug(2, \"Server doesn't support STATUS\\n\");",
          "1488:       continue;",
          "1489:     }",
          "1492:     {",
          "",
          "[Removed Lines]",
          "1478:     if (mdata->mbox_name && (imap_mxcmp(name, mdata->mbox_name) == 0))",
          "1484:     if (!mutt_bit_isset(mdata->capabilities, IMAP4REV1) &&",
          "1485:         !mutt_bit_isset(mdata->capabilities, STATUS))",
          "1491:     if (lastdata && mdata != lastdata)",
          "",
          "[Added Lines]",
          "1478:     if (adata->mbox_name && (imap_mxcmp(name, adata->mbox_name) == 0))",
          "1484:     if (!mutt_bit_isset(adata->capabilities, IMAP4REV1) &&",
          "1485:         !mutt_bit_isset(adata->capabilities, STATUS))",
          "1491:     if (lastdata && adata != lastdata)",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "1499:     }",
          "1501:     if (!lastdata)",
          "1505:     if (check_stats)",
          "1506:     {",
          "1507:       snprintf(command, sizeof(command),",
          "",
          "[Removed Lines]",
          "1502:       lastdata = mdata;",
          "1504:     imap_munge_mbox_name(mdata, munged, sizeof(munged), name);",
          "",
          "[Added Lines]",
          "1502:       lastdata = adata;",
          "1504:     imap_munge_mbox_name(adata, munged, sizeof(munged), name);",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "1513:                \"STATUS %s (UIDNEXT UIDVALIDITY UNSEEN RECENT)\", munged);",
          "1514:     }",
          "1517:     {",
          "1518:       mutt_debug(1, \"Error queueing command\\n\");",
          "1519:       return 0;",
          "",
          "[Removed Lines]",
          "1516:     if (imap_exec(mdata, command, IMAP_CMD_QUEUE | IMAP_CMD_POLL) < 0)",
          "",
          "[Added Lines]",
          "1516:     if (imap_exec(adata, command, IMAP_CMD_QUEUE | IMAP_CMD_POLL) < 0)",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "1550: {",
          "1551:   static int queued = 0;",
          "1554:   char buf[LONG_STRING * 2];",
          "1555:   char mbox[LONG_STRING];",
          "1556:   struct ImapStatus *status = NULL;",
          "1559:     return -1;",
          "1569:   {",
          "1571:     snprintf(buf, sizeof(buf), \"STATUS %s (%s)\", mbox, \"MESSAGES\");",
          "1573:   }",
          "1574:   else",
          "1575:   {",
          "",
          "[Removed Lines]",
          "1553:   struct ImapMboxData *mdata = NULL;",
          "1558:   if (get_mailbox(path, &mdata, buf, sizeof(buf)) < 0)",
          "1565:   if (mdata->ctx && !imap_mxcmp(buf, mdata->mbox_name))",
          "1566:     return mdata->ctx->mailbox->msg_count;",
          "1567:   else if (mutt_bit_isset(mdata->capabilities, IMAP4REV1) ||",
          "1568:            mutt_bit_isset(mdata->capabilities, STATUS))",
          "1570:     imap_munge_mbox_name(mdata, mbox, sizeof(mbox), buf);",
          "1572:     imap_unmunge_mbox_name(mdata, mbox);",
          "",
          "[Added Lines]",
          "1553:   struct ImapAccountData *adata = NULL;",
          "1558:   if (get_mailbox(path, &adata, buf, sizeof(buf)) < 0)",
          "1565:   if (adata->ctx && !imap_mxcmp(buf, adata->mbox_name))",
          "1566:     return adata->ctx->mailbox->msg_count;",
          "1567:   else if (mutt_bit_isset(adata->capabilities, IMAP4REV1) ||",
          "1568:            mutt_bit_isset(adata->capabilities, STATUS))",
          "1570:     imap_munge_mbox_name(adata, mbox, sizeof(mbox), buf);",
          "1572:     imap_unmunge_mbox_name(adata, mbox);",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "1581:   if (queue)",
          "1582:   {",
          "1584:     queued = 1;",
          "1585:     return 0;",
          "1586:   }",
          "1587:   else if (!queued)",
          "1590:   queued = 0;",
          "1592:   if (status)",
          "1593:     return status->messages;",
          "",
          "[Removed Lines]",
          "1583:     imap_exec(mdata, buf, IMAP_CMD_QUEUE);",
          "1588:     imap_exec(mdata, buf, 0);",
          "1591:   status = imap_mboxcache_get(mdata, mbox, false);",
          "",
          "[Added Lines]",
          "1583:     imap_exec(adata, buf, IMAP_CMD_QUEUE);",
          "1588:     imap_exec(adata, buf, 0);",
          "1591:   status = imap_mboxcache_get(adata, mbox, false);",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "1610: {",
          "1611:   struct ImapStatus *status = NULL;",
          "1612:   struct ListNode *np = NULL;",
          "1614:   {",
          "1615:     status = (struct ImapStatus *) np->data;",
          "",
          "[Removed Lines]",
          "1609: struct ImapStatus *imap_mboxcache_get(struct ImapMboxData *mdata, const char *mbox, bool create)",
          "1613:   STAILQ_FOREACH(np, &mdata->mboxcache, entries)",
          "",
          "[Added Lines]",
          "1609: struct ImapStatus *imap_mboxcache_get(struct ImapAccountData *adata, const char *mbox, bool create)",
          "1613:   STAILQ_FOREACH(np, &adata->mboxcache, entries)",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "1624:   {",
          "1625:     struct ImapStatus *scache = mutt_mem_calloc(1, sizeof(struct ImapStatus));",
          "1626:     scache->name = (char *) mbox;",
          "1629:     status->name = mutt_str_strdup(mbox);",
          "1630:   }",
          "1632: #ifdef USE_HCACHE",
          "1634:   if (hc)",
          "1635:   {",
          "1636:     void *uidvalidity = mutt_hcache_fetch_raw(hc, \"/UIDVALIDITY\", 12);",
          "",
          "[Removed Lines]",
          "1627:     mutt_list_insert_tail(&mdata->mboxcache, (char *) scache);",
          "1628:     status = imap_mboxcache_get(mdata, mbox, false);",
          "1633:   header_cache_t *hc = imap_hcache_open(mdata, mbox);",
          "",
          "[Added Lines]",
          "1627:     mutt_list_insert_tail(&adata->mboxcache, (char *) scache);",
          "1628:     status = imap_mboxcache_get(adata, mbox, false);",
          "1633:   header_cache_t *hc = imap_hcache_open(adata, mbox);",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "1644:         mutt_hcache_free(hc, &uidnext);",
          "1645:         mutt_hcache_free(hc, (void **) &modseq);",
          "1646:         mutt_hcache_close(hc);",
          "1648:       }",
          "1649:       status->uidvalidity = *(unsigned int *) uidvalidity;",
          "1650:       status->uidnext = uidnext ? *(unsigned int *) uidnext : 0;",
          "",
          "[Removed Lines]",
          "1647:         return imap_mboxcache_get(mdata, mbox, true);",
          "",
          "[Added Lines]",
          "1647:         return imap_mboxcache_get(adata, mbox, true);",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "1670: {",
          "1671:   struct ImapStatus *status = NULL;",
          "1673:   struct ListNode *np = NULL;",
          "1675:   {",
          "1676:     status = (struct ImapStatus *) np->data;",
          "1677:     FREE(&status->name);",
          "1678:   }",
          "1681: }",
          "",
          "[Removed Lines]",
          "1669: void imap_mboxcache_free(struct ImapMboxData *mdata)",
          "1674:   STAILQ_FOREACH(np, &mdata->mboxcache, entries)",
          "1680:   mutt_list_free(&mdata->mboxcache);",
          "",
          "[Added Lines]",
          "1669: void imap_mboxcache_free(struct ImapAccountData *adata)",
          "1674:   STAILQ_FOREACH(np, &adata->mboxcache, entries)",
          "1680:   mutt_list_free(&adata->mboxcache);",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "1690: int imap_search(struct Mailbox *mailbox, const struct Pattern *pat)",
          "1691: {",
          "1692:   struct Buffer buf;",
          "1694:   for (int i = 0; i < mailbox->msg_count; i++)",
          "1695:     mailbox->hdrs[i]->matched = false;",
          "",
          "[Removed Lines]",
          "1693:   struct ImapMboxData *mdata = mailbox->data;",
          "",
          "[Added Lines]",
          "1693:   struct ImapAccountData *adata = mailbox->data;",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "1704:     FREE(&buf.data);",
          "1705:     return -1;",
          "1706:   }",
          "1708:   {",
          "1709:     FREE(&buf.data);",
          "1710:     return -1;",
          "",
          "[Removed Lines]",
          "1707:   if (imap_exec(mdata, buf.data, 0) < 0)",
          "",
          "[Added Lines]",
          "1707:   if (imap_exec(adata, buf.data, 0) < 0)",
          "",
          "---------------",
          "--- Hunk 49 ---",
          "[Context before]",
          "1724: int imap_subscribe(char *path, bool subscribe)",
          "1725: {",
          "1727:   char buf[LONG_STRING * 2];",
          "1728:   char mbox[LONG_STRING];",
          "1729:   char errstr[STRING];",
          "",
          "[Removed Lines]",
          "1726:   struct ImapMboxData *mdata = NULL;",
          "",
          "[Added Lines]",
          "1726:   struct ImapAccountData *adata = NULL;",
          "",
          "---------------",
          "--- Hunk 50 ---",
          "[Context before]",
          "1736:     mutt_error(_(\"Bad mailbox name\"));",
          "1737:     return -1;",
          "1738:   }",
          "1741:     goto fail;",
          "1744:   if (!*buf)",
          "1745:     mutt_str_strfcpy(buf, \"INBOX\", sizeof(buf));",
          "",
          "[Removed Lines]",
          "1739:   mdata = imap_conn_find(&(mx.account), 0);",
          "1740:   if (!mdata)",
          "1743:   imap_fix_path(mdata, mx.mbox, buf, sizeof(buf));",
          "",
          "[Added Lines]",
          "1739:   adata = imap_conn_find(&(mx.account), 0);",
          "1740:   if (!adata)",
          "1743:   imap_fix_path(adata, mx.mbox, buf, sizeof(buf));",
          "",
          "---------------",
          "--- Hunk 51 ---",
          "[Context before]",
          "1761:     mutt_message(_(\"Subscribing to %s...\"), buf);",
          "1762:   else",
          "1763:     mutt_message(_(\"Unsubscribing from %s...\"), buf);",
          "1766:   snprintf(buf, sizeof(buf), \"%sSUBSCRIBE %s\", subscribe ? \"\" : \"UN\", mbox);",
          "1769:     goto fail;",
          "1772:   if (subscribe)",
          "1773:     mutt_message(_(\"Subscribed to %s\"), mx.mbox);",
          "1774:   else",
          "",
          "[Removed Lines]",
          "1764:   imap_munge_mbox_name(mdata, mbox, sizeof(mbox), buf);",
          "1768:   if (imap_exec(mdata, buf, 0) < 0)",
          "1771:   imap_unmunge_mbox_name(mdata, mx.mbox);",
          "",
          "[Added Lines]",
          "1764:   imap_munge_mbox_name(adata, mbox, sizeof(mbox), buf);",
          "1768:   if (imap_exec(adata, buf, 0) < 0)",
          "1771:   imap_unmunge_mbox_name(adata, mx.mbox);",
          "",
          "---------------",
          "--- Hunk 52 ---",
          "[Context before]",
          "1795: int imap_complete(char *buf, size_t buflen, char *path)",
          "1796: {",
          "1798:   char list[LONG_STRING];",
          "1799:   char tmp[LONG_STRING * 2];",
          "1800:   struct ImapList listresp;",
          "",
          "[Removed Lines]",
          "1797:   struct ImapMboxData *mdata = NULL;",
          "",
          "[Added Lines]",
          "1797:   struct ImapAccountData *adata = NULL;",
          "",
          "---------------",
          "--- Hunk 53 ---",
          "[Context before]",
          "1818:   {",
          "1819:     FREE(&mx.mbox);",
          "1820:     mutt_str_strfcpy(buf, path, buflen);",
          "",
          "[Removed Lines]",
          "1816:   mdata = imap_conn_find(&(mx.account), MUTT_IMAP_CONN_NONEW);",
          "1817:   if (!mdata)",
          "",
          "[Added Lines]",
          "1816:   adata = imap_conn_find(&(mx.account), MUTT_IMAP_CONN_NONEW);",
          "1817:   if (!adata)",
          "",
          "---------------",
          "--- Hunk 54 ---",
          "[Context before]",
          "1826:   if (mx.mbox && mx.mbox[0])",
          "1828:   else",
          "1829:     list[0] = '\\0';",
          "1832:   snprintf(tmp, sizeof(tmp), \"%s \\\"\\\" \\\"%s%%\\\"\", ImapListSubscribed ? \"LSUB\" : \"LIST\", list);",
          "1837:   mutt_str_strfcpy(completion, mx.mbox, sizeof(completion));",
          "1840:   do",
          "1841:   {",
          "1842:     listresp.name = NULL;",
          "1845:     if (rc == IMAP_CMD_CONTINUE && listresp.name)",
          "1846:     {",
          "",
          "[Removed Lines]",
          "1827:     imap_fix_path(mdata, mx.mbox, list, sizeof(list));",
          "1834:   imap_cmd_start(mdata, tmp);",
          "1838:   mdata->cmdtype = IMAP_CT_LIST;",
          "1839:   mdata->cmddata = &listresp;",
          "1843:     rc = imap_cmd_step(mdata);",
          "",
          "[Added Lines]",
          "1827:     imap_fix_path(adata, mx.mbox, list, sizeof(list));",
          "1834:   imap_cmd_start(adata, tmp);",
          "1838:   adata->cmdtype = IMAP_CT_LIST;",
          "1839:   adata->cmddata = &listresp;",
          "1843:     rc = imap_cmd_step(adata);",
          "",
          "---------------",
          "--- Hunk 55 ---",
          "[Context before]",
          "1865:       completions++;",
          "1866:     }",
          "1867:   } while (rc == IMAP_CMD_CONTINUE);",
          "1870:   if (completions)",
          "1871:   {",
          "",
          "[Removed Lines]",
          "1868:   mdata->cmddata = NULL;",
          "",
          "[Added Lines]",
          "1868:   adata->cmddata = NULL;",
          "",
          "---------------",
          "--- Hunk 56 ---",
          "[Context before]",
          "1899:   struct Buffer *sync_cmd = NULL;",
          "1900:   int err_continue = MUTT_NO;",
          "1904:   if (imap_parse_path(dest, &mx))",
          "1905:   {",
          "",
          "[Removed Lines]",
          "1902:   struct ImapMboxData *mdata = mailbox->data;",
          "",
          "[Added Lines]",
          "1902:   struct ImapAccountData *adata = mailbox->data;",
          "",
          "---------------",
          "--- Hunk 57 ---",
          "[Context before]",
          "1908:   }",
          "1912:   {",
          "1913:     mutt_debug(3, \"%s not same server as %s\\n\", dest, mailbox->path);",
          "1914:     return 1;",
          "1915:   }",
          "1918:   if (!*mbox)",
          "1919:     mutt_str_strfcpy(mbox, \"INBOX\", sizeof(mbox));",
          "1922:   sync_cmd = mutt_buffer_new();",
          "1923:   for (int i = 0; i < mailbox->msg_count; i++)",
          "",
          "[Removed Lines]",
          "1911:   if (!mutt_account_match(&(mdata->conn->account), &(mx.account)))",
          "1917:   imap_fix_path(mdata, mx.mbox, mbox, sizeof(mbox));",
          "1920:   imap_munge_mbox_name(mdata, mmbox, sizeof(mmbox), mbox);",
          "",
          "[Added Lines]",
          "1911:   if (!mutt_account_match(&(adata->conn->account), &(mx.account)))",
          "1917:   imap_fix_path(adata, mx.mbox, mbox, sizeof(mbox));",
          "1920:   imap_munge_mbox_name(adata, mmbox, sizeof(mmbox), mbox);",
          "",
          "---------------",
          "--- Hunk 58 ---",
          "[Context before]",
          "1925:     if (mailbox->hdrs[i]->active && mailbox->hdrs[i]->changed &&",
          "1926:         mailbox->hdrs[i]->deleted && !mailbox->hdrs[i]->purge)",
          "1927:     {",
          "1929:       if (rc < 0)",
          "1930:       {",
          "1931:         mutt_debug(1, \"could not sync\\n\");",
          "",
          "[Removed Lines]",
          "1928:       rc = imap_sync_message_for_copy(mdata, mailbox->hdrs[i], sync_cmd, &err_continue);",
          "",
          "[Added Lines]",
          "1928:       rc = imap_sync_message_for_copy(adata, mailbox->hdrs[i], sync_cmd, &err_continue);",
          "",
          "---------------",
          "--- Hunk 59 ---",
          "[Context before]",
          "1938:   do",
          "1939:   {",
          "1941:     if (!rc)",
          "1942:     {",
          "1943:       mutt_debug(1, \"No messages to trash\\n\");",
          "",
          "[Removed Lines]",
          "1940:     rc = imap_exec_msgset(mdata, \"UID COPY\", mmbox, MUTT_TRASH, false, false);",
          "",
          "[Added Lines]",
          "1940:     rc = imap_exec_msgset(adata, \"UID COPY\", mmbox, MUTT_TRASH, false, false);",
          "",
          "---------------",
          "--- Hunk 60 ---",
          "[Context before]",
          "1956:     }",
          "1960:     if (rc == -2)",
          "1961:     {",
          "1962:       if (triedcreate)",
          "",
          "[Removed Lines]",
          "1959:     rc = imap_exec(mdata, NULL, IMAP_CMD_FAIL_OK);",
          "",
          "[Added Lines]",
          "1959:     rc = imap_exec(adata, NULL, IMAP_CMD_FAIL_OK);",
          "",
          "---------------",
          "--- Hunk 61 ---",
          "[Context before]",
          "1965:         break;",
          "1966:       }",
          "1969:         break;",
          "1970:       mutt_debug(3, \"server suggests TRYCREATE\\n\");",
          "1971:       snprintf(prompt, sizeof(prompt), _(\"Create %s?\"), mbox);",
          "",
          "[Removed Lines]",
          "1968:       if (mutt_str_strncasecmp(imap_get_qualifier(mdata->buf), \"[TRYCREATE]\", 11) != 0)",
          "",
          "[Added Lines]",
          "1968:       if (mutt_str_strncasecmp(imap_get_qualifier(adata->buf), \"[TRYCREATE]\", 11) != 0)",
          "",
          "---------------",
          "--- Hunk 62 ---",
          "[Context before]",
          "1974:         mutt_clear_error();",
          "1975:         goto out;",
          "1976:       }",
          "1978:         break;",
          "1979:       triedcreate = true;",
          "1980:     }",
          "",
          "[Removed Lines]",
          "1977:       if (imap_create_mailbox(mdata, mbox) < 0)",
          "",
          "[Added Lines]",
          "1977:       if (imap_create_mailbox(adata, mbox) < 0)",
          "",
          "---------------",
          "--- Hunk 63 ---",
          "[Context before]",
          "1983:   if (rc != 0)",
          "1984:   {",
          "1986:     goto out;",
          "1987:   }",
          "",
          "[Removed Lines]",
          "1985:     imap_error(\"imap_fast_trash\", mdata->buf);",
          "",
          "[Added Lines]",
          "1985:     imap_error(\"imap_fast_trash\", adata->buf);",
          "",
          "---------------",
          "--- Hunk 64 ---",
          "[Context before]",
          "2010:   int oldsort;",
          "2011:   int rc;",
          "2016:   {",
          "2017:     mutt_debug(2, \"no mailbox selected\\n\");",
          "2018:     return -1;",
          "",
          "[Removed Lines]",
          "2013:   struct ImapMboxData *mdata = ctx->mailbox->data;",
          "2015:   if (mdata->state < IMAP_SELECTED)",
          "",
          "[Added Lines]",
          "2013:   struct ImapAccountData *adata = ctx->mailbox->data;",
          "2015:   if (adata->state < IMAP_SELECTED)",
          "",
          "---------------",
          "--- Hunk 65 ---",
          "[Context before]",
          "2023:   imap_allow_reopen(ctx);",
          "2026:   if (rc != 0)",
          "2027:     return rc;",
          "2030:   if (expunge && mutt_bit_isset(ctx->mailbox->rights, MUTT_ACL_DELETE))",
          "2031:   {",
          "2033:                           MUTT_DELETED, true, false);",
          "2034:     if (rc < 0)",
          "2035:     {",
          "",
          "[Removed Lines]",
          "2025:   rc = imap_check(mdata, false);",
          "2032:     rc = imap_exec_msgset(mdata, \"UID STORE\", \"+FLAGS.SILENT (\\\\Deleted)\",",
          "",
          "[Added Lines]",
          "2025:   rc = imap_check(adata, false);",
          "2032:     rc = imap_exec_msgset(adata, \"UID STORE\", \"+FLAGS.SILENT (\\\\Deleted)\",",
          "",
          "---------------",
          "--- Hunk 66 ---",
          "[Context before]",
          "2051:   }",
          "2053: #ifdef USE_HCACHE",
          "2055: #endif",
          "",
          "[Removed Lines]",
          "2054:   mdata->hcache = imap_hcache_open(mdata, NULL);",
          "",
          "[Added Lines]",
          "2054:   adata->hcache = imap_hcache_open(adata, NULL);",
          "",
          "---------------",
          "--- Hunk 67 ---",
          "[Context before]",
          "2062:     if (e->deleted)",
          "2063:     {",
          "2065: #ifdef USE_HCACHE",
          "2067: #endif",
          "2068:     }",
          "2070:     if (e->active && e->changed)",
          "2071:     {",
          "2072: #ifdef USE_HCACHE",
          "2074: #endif",
          "",
          "[Removed Lines]",
          "2064:       imap_cache_del(mdata, e);",
          "2066:       imap_hcache_del(mdata, IMAP_EDATA(e)->uid);",
          "2073:       imap_hcache_put(mdata, e);",
          "",
          "[Added Lines]",
          "2064:       imap_cache_del(adata, e);",
          "2066:       imap_hcache_del(adata, IMAP_EDATA(e)->uid);",
          "2073:       imap_hcache_put(adata, e);",
          "",
          "---------------",
          "--- Hunk 68 ---",
          "[Context before]",
          "2094:   }",
          "2096: #ifdef USE_HCACHE",
          "2098: #endif",
          "",
          "[Removed Lines]",
          "2097:   imap_hcache_close(mdata);",
          "",
          "[Added Lines]",
          "2097:   imap_hcache_close(adata);",
          "",
          "---------------",
          "--- Hunk 69 ---",
          "[Context before]",
          "2111:           mutt_get_sort_func(SORT_ORDER));",
          "2112:   }",
          "2115:   if (rc >= 0)",
          "2117:   if (rc >= 0)",
          "2119:   if (rc >= 0)",
          "2121:   if (rc >= 0)",
          "2124:   if (oldsort != Sort)",
          "2125:   {",
          "",
          "[Removed Lines]",
          "2114:   rc = sync_helper(mdata, MUTT_ACL_DELETE, MUTT_DELETED, \"\\\\Deleted\");",
          "2116:     rc |= sync_helper(mdata, MUTT_ACL_WRITE, MUTT_FLAG, \"\\\\Flagged\");",
          "2118:     rc |= sync_helper(mdata, MUTT_ACL_WRITE, MUTT_OLD, \"Old\");",
          "2120:     rc |= sync_helper(mdata, MUTT_ACL_SEEN, MUTT_READ, \"\\\\Seen\");",
          "2122:     rc |= sync_helper(mdata, MUTT_ACL_WRITE, MUTT_REPLIED, \"\\\\Answered\");",
          "",
          "[Added Lines]",
          "2114:   rc = sync_helper(adata, MUTT_ACL_DELETE, MUTT_DELETED, \"\\\\Deleted\");",
          "2116:     rc |= sync_helper(adata, MUTT_ACL_WRITE, MUTT_FLAG, \"\\\\Flagged\");",
          "2118:     rc |= sync_helper(adata, MUTT_ACL_WRITE, MUTT_OLD, \"Old\");",
          "2120:     rc |= sync_helper(adata, MUTT_ACL_SEEN, MUTT_READ, \"\\\\Seen\");",
          "2122:     rc |= sync_helper(adata, MUTT_ACL_WRITE, MUTT_REPLIED, \"\\\\Answered\");",
          "",
          "---------------",
          "--- Hunk 70 ---",
          "[Context before]",
          "2132:   if (rc > 0)",
          "2134:       rc = -1;",
          "2136:   if (rc < 0)",
          "",
          "[Removed Lines]",
          "2133:     if (imap_exec(mdata, NULL, 0) != IMAP_CMD_OK)",
          "",
          "[Added Lines]",
          "2133:     if (imap_exec(adata, NULL, 0) != IMAP_CMD_OK)",
          "",
          "---------------",
          "--- Hunk 71 ---",
          "[Context before]",
          "2140:       if (mutt_yesorno(_(\"Error saving flags. Close anyway?\"), 0) == MUTT_YES)",
          "2141:       {",
          "2142:         rc = 0;",
          "2144:         goto out;",
          "2145:       }",
          "2146:     }",
          "",
          "[Removed Lines]",
          "2143:         mdata->state = IMAP_AUTHENTICATED;",
          "",
          "[Added Lines]",
          "2143:         adata->state = IMAP_AUTHENTICATED;",
          "",
          "---------------",
          "--- Hunk 72 ---",
          "[Context before]",
          "2169:   {",
          "2170:     mutt_message(_(\"Expunging messages from server...\"));",
          "2174:     {",
          "2177:       rc = -1;",
          "2178:       goto out;",
          "2179:     }",
          "2181:   }",
          "2183:   if (expunge && ctx->mailbox->closing)",
          "2184:   {",
          "2187:   }",
          "2189:   if (MessageCacheClean)",
          "2192:   rc = 0;",
          "",
          "[Removed Lines]",
          "2172:     mdata->reopen |= IMAP_EXPUNGE_EXPECTED;",
          "2173:     if (imap_exec(mdata, \"EXPUNGE\", 0) != 0)",
          "2175:       mdata->reopen &= ~IMAP_EXPUNGE_EXPECTED;",
          "2176:       imap_error(_(\"imap_sync_mailbox: EXPUNGE failed\"), mdata->buf);",
          "2180:     mdata->reopen &= ~IMAP_EXPUNGE_EXPECTED;",
          "2185:     imap_exec(mdata, \"CLOSE\", IMAP_CMD_QUEUE);",
          "2186:     mdata->state = IMAP_AUTHENTICATED;",
          "2190:     imap_cache_clean(mdata);",
          "",
          "[Added Lines]",
          "2172:     adata->reopen |= IMAP_EXPUNGE_EXPECTED;",
          "2173:     if (imap_exec(adata, \"EXPUNGE\", 0) != 0)",
          "2175:       adata->reopen &= ~IMAP_EXPUNGE_EXPECTED;",
          "2176:       imap_error(_(\"imap_sync_mailbox: EXPUNGE failed\"), adata->buf);",
          "2180:     adata->reopen &= ~IMAP_EXPUNGE_EXPECTED;",
          "2185:     imap_exec(adata, \"CLOSE\", IMAP_CMD_QUEUE);",
          "2186:     adata->state = IMAP_AUTHENTICATED;",
          "2190:     imap_cache_clean(adata);",
          "",
          "---------------",
          "--- Hunk 73 ---",
          "[Context before]",
          "2206: static int imap_mbox_open(struct Context *ctx)",
          "2207: {",
          "2209:   struct ImapStatus *status = NULL;",
          "2210:   char buf[PATH_MAX];",
          "2211:   char bufout[PATH_MAX];",
          "",
          "[Removed Lines]",
          "2208:   struct ImapMboxData *mdata = NULL;",
          "",
          "[Added Lines]",
          "2208:   struct ImapAccountData *adata = NULL;",
          "",
          "---------------",
          "--- Hunk 74 ---",
          "[Context before]",
          "2221:   }",
          "2226:     goto fail_noidata;",
          "2228:     goto fail;",
          "2235:   if (!*buf)",
          "2236:     mutt_str_strfcpy(buf, \"INBOX\", sizeof(buf));",
          "2241:   mutt_str_strfcpy(ctx->mailbox->path, buf, sizeof(ctx->mailbox->path));",
          "2242:   mutt_str_strfcpy(ctx->mailbox->realpath, ctx->mailbox->path,",
          "2243:                    sizeof(ctx->mailbox->realpath));",
          "2258:   {",
          "2259:     snprintf(bufout, sizeof(bufout), \"MYRIGHTS %s\", buf);",
          "2261:   }",
          "2263:   else",
          "2264:   {",
          "2273:   }",
          "2275:   pmx.mbox = NULL;",
          "",
          "[Removed Lines]",
          "2224:   mdata = imap_conn_find(&(mx.account), MUTT_IMAP_CONN_NOSELECT);",
          "2225:   if (!mdata)",
          "2227:   if (mdata->state < IMAP_AUTHENTICATED)",
          "2231:   ctx->mailbox->data = mdata;",
          "2234:   imap_fix_path(mdata, mx.mbox, buf, sizeof(buf));",
          "2237:   FREE(&(mdata->mbox_name));",
          "2238:   mdata->mbox_name = mutt_str_strdup(buf);",
          "2239:   imap_qualify_path(buf, sizeof(buf), &mx, mdata->mbox_name);",
          "2245:   mdata->ctx = ctx;",
          "2248:   mdata->status = false;",
          "2249:   memset(mdata->ctx->mailbox->rights, 0, sizeof(mdata->ctx->mailbox->rights));",
          "2250:   mdata->new_mail_count = 0;",
          "2251:   mdata->max_msn = 0;",
          "2253:   mutt_message(_(\"Selecting %s...\"), mdata->mbox_name);",
          "2254:   imap_munge_mbox_name(mdata, buf, sizeof(buf), mdata->mbox_name);",
          "2257:   if (mutt_bit_isset(mdata->capabilities, ACL))",
          "2260:     imap_exec(mdata, bufout, IMAP_CMD_QUEUE);",
          "2265:     mutt_bit_set(mdata->ctx->mailbox->rights, MUTT_ACL_LOOKUP);",
          "2266:     mutt_bit_set(mdata->ctx->mailbox->rights, MUTT_ACL_READ);",
          "2267:     mutt_bit_set(mdata->ctx->mailbox->rights, MUTT_ACL_SEEN);",
          "2268:     mutt_bit_set(mdata->ctx->mailbox->rights, MUTT_ACL_WRITE);",
          "2269:     mutt_bit_set(mdata->ctx->mailbox->rights, MUTT_ACL_INSERT);",
          "2270:     mutt_bit_set(mdata->ctx->mailbox->rights, MUTT_ACL_POST);",
          "2271:     mutt_bit_set(mdata->ctx->mailbox->rights, MUTT_ACL_CREATE);",
          "2272:     mutt_bit_set(mdata->ctx->mailbox->rights, MUTT_ACL_DELETE);",
          "",
          "[Added Lines]",
          "2224:   adata = imap_conn_find(&(mx.account), MUTT_IMAP_CONN_NOSELECT);",
          "2225:   if (!adata)",
          "2227:   if (adata->state < IMAP_AUTHENTICATED)",
          "2231:   ctx->mailbox->data = adata;",
          "2234:   imap_fix_path(adata, mx.mbox, buf, sizeof(buf));",
          "2237:   FREE(&(adata->mbox_name));",
          "2238:   adata->mbox_name = mutt_str_strdup(buf);",
          "2239:   imap_qualify_path(buf, sizeof(buf), &mx, adata->mbox_name);",
          "2245:   adata->ctx = ctx;",
          "2248:   adata->status = false;",
          "2249:   memset(adata->ctx->mailbox->rights, 0, sizeof(adata->ctx->mailbox->rights));",
          "2250:   adata->new_mail_count = 0;",
          "2251:   adata->max_msn = 0;",
          "2253:   mutt_message(_(\"Selecting %s...\"), adata->mbox_name);",
          "2254:   imap_munge_mbox_name(adata, buf, sizeof(buf), adata->mbox_name);",
          "2257:   if (mutt_bit_isset(adata->capabilities, ACL))",
          "2260:     imap_exec(adata, bufout, IMAP_CMD_QUEUE);",
          "2265:     mutt_bit_set(adata->ctx->mailbox->rights, MUTT_ACL_LOOKUP);",
          "2266:     mutt_bit_set(adata->ctx->mailbox->rights, MUTT_ACL_READ);",
          "2267:     mutt_bit_set(adata->ctx->mailbox->rights, MUTT_ACL_SEEN);",
          "2268:     mutt_bit_set(adata->ctx->mailbox->rights, MUTT_ACL_WRITE);",
          "2269:     mutt_bit_set(adata->ctx->mailbox->rights, MUTT_ACL_INSERT);",
          "2270:     mutt_bit_set(adata->ctx->mailbox->rights, MUTT_ACL_POST);",
          "2271:     mutt_bit_set(adata->ctx->mailbox->rights, MUTT_ACL_CREATE);",
          "2272:     mutt_bit_set(adata->ctx->mailbox->rights, MUTT_ACL_DELETE);",
          "",
          "---------------",
          "--- Hunk 75 ---",
          "[Context before]",
          "2281:   FREE(&pmx.mbox);",
          "2283:   if (ImapCheckSubscribed)",
          "2286: #ifdef USE_HCACHE",
          "2288:     condstore = \" (CONDSTORE)\";",
          "2289:   else",
          "2290: #endif",
          "",
          "[Removed Lines]",
          "2284:     imap_exec(mdata, \"LSUB \\\"\\\" \\\"*\\\"\", IMAP_CMD_QUEUE);",
          "2287:   if (mutt_bit_isset(mdata->capabilities, CONDSTORE) && ImapCondStore)",
          "",
          "[Added Lines]",
          "2284:     imap_exec(adata, \"LSUB \\\"\\\" \\\"*\\\"\", IMAP_CMD_QUEUE);",
          "2287:   if (mutt_bit_isset(adata->capabilities, CONDSTORE) && ImapCondStore)",
          "",
          "---------------",
          "--- Hunk 76 ---",
          "[Context before]",
          "2293:   snprintf(bufout, sizeof(bufout), \"%s %s%s\",",
          "2294:            ctx->mailbox->readonly ? \"EXAMINE\" : \"SELECT\", buf, condstore);",
          "2302:   do",
          "2303:   {",
          "2304:     char *pc = NULL;",
          "2307:     if (rc != IMAP_CMD_CONTINUE)",
          "2308:       break;",
          "2314:     if (mutt_str_strncasecmp(\"FLAGS\", pc, 5) == 0)",
          "2315:     {",
          "2318:       {",
          "2319:         mutt_debug(3, \"Getting mailbox FLAGS\\n\");",
          "2321:         if (!pc)",
          "2322:           goto fail;",
          "2323:       }",
          "",
          "[Removed Lines]",
          "2296:   mdata->state = IMAP_SELECTED;",
          "2298:   imap_cmd_start(mdata, bufout);",
          "2300:   status = imap_mboxcache_get(mdata, mdata->mbox_name, true);",
          "2306:     rc = imap_cmd_step(mdata);",
          "2310:     pc = mdata->buf + 2;",
          "2317:       if (STAILQ_EMPTY(&mdata->flags))",
          "2320:         pc = get_flags(&mdata->flags, pc);",
          "",
          "[Added Lines]",
          "2296:   adata->state = IMAP_SELECTED;",
          "2298:   imap_cmd_start(adata, bufout);",
          "2300:   status = imap_mboxcache_get(adata, adata->mbox_name, true);",
          "2306:     rc = imap_cmd_step(adata);",
          "2310:     pc = adata->buf + 2;",
          "2317:       if (STAILQ_EMPTY(&adata->flags))",
          "2320:         pc = get_flags(&adata->flags, pc);",
          "",
          "---------------",
          "--- Hunk 77 ---",
          "[Context before]",
          "2327:     {",
          "2328:       mutt_debug(3, \"Getting mailbox PERMANENTFLAGS\\n\");",
          "2332:       pc += 13;",
          "2334:       if (!pc)",
          "2335:         goto fail;",
          "2336:     }",
          "",
          "[Removed Lines]",
          "2330:       mutt_list_free(&mdata->flags);",
          "2333:       pc = get_flags(&(mdata->flags), pc);",
          "",
          "[Added Lines]",
          "2330:       mutt_list_free(&adata->flags);",
          "2333:       pc = get_flags(&(adata->flags), pc);",
          "",
          "---------------",
          "--- Hunk 78 ---",
          "[Context before]",
          "2340:       mutt_debug(3, \"Getting mailbox UIDVALIDITY\\n\");",
          "2341:       pc += 3;",
          "2342:       pc = imap_next_word(pc);",
          "2344:         goto fail;",
          "2346:     }",
          "2347:     else if (mutt_str_strncasecmp(\"OK [UIDNEXT\", pc, 11) == 0)",
          "2348:     {",
          "2349:       mutt_debug(3, \"Getting mailbox UIDNEXT\\n\");",
          "2350:       pc += 3;",
          "2351:       pc = imap_next_word(pc);",
          "2353:         goto fail;",
          "2355:     }",
          "2356:     else if (mutt_str_strncasecmp(\"OK [HIGHESTMODSEQ\", pc, 17) == 0)",
          "2357:     {",
          "2358:       mutt_debug(3, \"Getting mailbox HIGHESTMODSEQ\\n\");",
          "2359:       pc += 3;",
          "2360:       pc = imap_next_word(pc);",
          "2362:         goto fail;",
          "2364:     }",
          "2365:     else if (mutt_str_strncasecmp(\"OK [NOMODSEQ\", pc, 12) == 0)",
          "2366:     {",
          "2367:       mutt_debug(3, \"Mailbox has NOMODSEQ set\\n\");",
          "2369:     }",
          "2370:     else",
          "2371:     {",
          "2372:       pc = imap_next_word(pc);",
          "2373:       if (mutt_str_strncasecmp(\"EXISTS\", pc, 6) == 0)",
          "2374:       {",
          "2377:       }",
          "2378:     }",
          "2379:   } while (rc == IMAP_CMD_CONTINUE);",
          "2381:   if (rc == IMAP_CMD_NO)",
          "2382:   {",
          "2385:     mutt_error(\"%s\", s);",
          "2386:     goto fail;",
          "",
          "[Removed Lines]",
          "2343:       if (mutt_str_atoui(pc, &mdata->uid_validity) < 0)",
          "2345:       status->uidvalidity = mdata->uid_validity;",
          "2352:       if (mutt_str_atoui(pc, &mdata->uidnext) < 0)",
          "2354:       status->uidnext = mdata->uidnext;",
          "2361:       if (mutt_str_atoull(pc, &mdata->modseq) < 0)",
          "2363:       status->modseq = mdata->modseq;",
          "2368:       status->modseq = mdata->modseq = 0;",
          "2375:         count = mdata->new_mail_count;",
          "2376:         mdata->new_mail_count = 0;",
          "",
          "[Added Lines]",
          "2343:       if (mutt_str_atoui(pc, &adata->uid_validity) < 0)",
          "2345:       status->uidvalidity = adata->uid_validity;",
          "2352:       if (mutt_str_atoui(pc, &adata->uidnext) < 0)",
          "2354:       status->uidnext = adata->uidnext;",
          "2361:       if (mutt_str_atoull(pc, &adata->modseq) < 0)",
          "2363:       status->modseq = adata->modseq;",
          "2368:       status->modseq = adata->modseq = 0;",
          "2375:         count = adata->new_mail_count;",
          "2376:         adata->new_mail_count = 0;",
          "",
          "---------------",
          "--- Hunk 79 ---",
          "[Context before]",
          "2390:     goto fail;",
          "2395:   {",
          "2396:     mutt_debug(2, \"Mailbox is read-only.\\n\");",
          "2397:     ctx->mailbox->readonly = true;",
          "",
          "[Removed Lines]",
          "2393:   if ((mutt_str_strncasecmp(imap_get_qualifier(mdata->buf), \"[READ-ONLY]\", 11) == 0) &&",
          "2394:       !mutt_bit_isset(mdata->capabilities, ACL))",
          "",
          "[Added Lines]",
          "2393:   if ((mutt_str_strncasecmp(imap_get_qualifier(adata->buf), \"[READ-ONLY]\", 11) == 0) &&",
          "2394:       !mutt_bit_isset(adata->capabilities, ACL))",
          "",
          "---------------",
          "--- Hunk 80 ---",
          "[Context before]",
          "2401:   if (DebugLevel > 2)",
          "2402:   {",
          "2404:       mutt_debug(3, \"No folder flags found\\n\");",
          "2405:     else",
          "2406:     {",
          "",
          "[Removed Lines]",
          "2403:     if (STAILQ_EMPTY(&mdata->flags))",
          "",
          "[Added Lines]",
          "2403:     if (STAILQ_EMPTY(&adata->flags))",
          "",
          "---------------",
          "--- Hunk 81 ---",
          "[Context before]",
          "2408:       struct Buffer flag_buffer;",
          "2409:       mutt_buffer_init(&flag_buffer);",
          "2410:       mutt_buffer_printf(&flag_buffer, \"Mailbox flags: \");",
          "2412:       {",
          "2413:         mutt_buffer_printf(&flag_buffer, \"[%s] \", np->data);",
          "2414:       }",
          "",
          "[Removed Lines]",
          "2411:       STAILQ_FOREACH(np, &mdata->flags, entries)",
          "",
          "[Added Lines]",
          "2411:       STAILQ_FOREACH(np, &adata->flags, entries)",
          "",
          "---------------",
          "--- Hunk 82 ---",
          "[Context before]",
          "2417:     }",
          "2418:   }",
          "2424:   {",
          "2425:     ctx->mailbox->readonly = true;",
          "2426:   }",
          "",
          "[Removed Lines]",
          "2420:   if (!(mutt_bit_isset(mdata->ctx->mailbox->rights, MUTT_ACL_DELETE) ||",
          "2421:         mutt_bit_isset(mdata->ctx->mailbox->rights, MUTT_ACL_SEEN) ||",
          "2422:         mutt_bit_isset(mdata->ctx->mailbox->rights, MUTT_ACL_WRITE) ||",
          "2423:         mutt_bit_isset(mdata->ctx->mailbox->rights, MUTT_ACL_INSERT)))",
          "",
          "[Added Lines]",
          "2420:   if (!(mutt_bit_isset(adata->ctx->mailbox->rights, MUTT_ACL_DELETE) ||",
          "2421:         mutt_bit_isset(adata->ctx->mailbox->rights, MUTT_ACL_SEEN) ||",
          "2422:         mutt_bit_isset(adata->ctx->mailbox->rights, MUTT_ACL_WRITE) ||",
          "2423:         mutt_bit_isset(adata->ctx->mailbox->rights, MUTT_ACL_INSERT)))",
          "",
          "---------------",
          "--- Hunk 83 ---",
          "[Context before]",
          "2430:   ctx->mailbox->v2r = mutt_mem_calloc(count, sizeof(int));",
          "2431:   ctx->mailbox->msg_count = 0;",
          "2434:   {",
          "2435:     mutt_error(_(\"Error opening mailbox\"));",
          "2436:     goto fail;",
          "",
          "[Removed Lines]",
          "2433:   if (count && (imap_read_headers(mdata, 1, count, true) < 0))",
          "",
          "[Added Lines]",
          "2433:   if (count && (imap_read_headers(adata, 1, count, true) < 0))",
          "",
          "---------------",
          "--- Hunk 84 ---",
          "[Context before]",
          "2441:   return 0;",
          "2443: fail:",
          "2446: fail_noidata:",
          "2447:   FREE(&mx.mbox);",
          "2448:   return -1;",
          "",
          "[Removed Lines]",
          "2444:   if (mdata->state == IMAP_SELECTED)",
          "2445:     mdata->state = IMAP_AUTHENTICATED;",
          "",
          "[Added Lines]",
          "2444:   if (adata->state == IMAP_SELECTED)",
          "2445:     adata->state = IMAP_AUTHENTICATED;",
          "",
          "---------------",
          "--- Hunk 85 ---",
          "[Context before]",
          "2454: static int imap_mbox_open_append(struct Context *ctx, int flags)",
          "2455: {",
          "2457:   char mailbox[PATH_MAX];",
          "2458:   struct ImapMbox mx;",
          "2459:   int rc;",
          "",
          "[Removed Lines]",
          "2456:   struct ImapMboxData *mdata = NULL;",
          "",
          "[Added Lines]",
          "2456:   struct ImapAccountData *adata = NULL;",
          "",
          "---------------",
          "--- Hunk 86 ---",
          "[Context before]",
          "2469:   {",
          "2470:     FREE(&mx.mbox);",
          "2471:     return -1;",
          "2472:   }",
          "2477:   if (!*mailbox)",
          "2478:     mutt_str_strfcpy(mailbox, \"INBOX\", sizeof(mailbox));",
          "2479:   FREE(&mx.mbox);",
          "",
          "[Removed Lines]",
          "2467:   mdata = imap_conn_find(&(mx.account), 0);",
          "2468:   if (!mdata)",
          "2474:   ctx->mailbox->data = mdata;",
          "2476:   imap_fix_path(mdata, mx.mbox, mailbox, sizeof(mailbox));",
          "",
          "[Added Lines]",
          "2467:   adata = imap_conn_find(&(mx.account), 0);",
          "2468:   if (!adata)",
          "2474:   ctx->mailbox->data = adata;",
          "2476:   imap_fix_path(adata, mx.mbox, mailbox, sizeof(mailbox));",
          "",
          "---------------",
          "--- Hunk 87 ---",
          "[Context before]",
          "2490:   if (Confirmcreate && mutt_yesorno(buf, 1) != MUTT_YES)",
          "2491:     return -1;",
          "2494:     return -1;",
          "2496:   return 0;",
          "",
          "[Removed Lines]",
          "2493:   if (imap_create_mailbox(mdata, mailbox) < 0)",
          "",
          "[Added Lines]",
          "2493:   if (imap_create_mailbox(adata, mailbox) < 0)",
          "",
          "---------------",
          "--- Hunk 88 ---",
          "[Context before]",
          "2524: static int imap_mbox_close(struct Context *ctx)",
          "2525: {",
          "2529:     return 0;",
          "2540:   {",
          "2542:     {",
          "2545:       if (!ctx->deleted)",
          "2548:     }",
          "2560:     for (int i = 0; i < IMAP_CACHE_LEN; i++)",
          "2561:     {",
          "2563:       {",
          "2566:       }",
          "2567:     }",
          "2570:   }",
          "2572:   return 0;",
          "",
          "[Removed Lines]",
          "2526:   struct ImapMboxData *mdata = ctx->mailbox->data;",
          "2528:   if (!mdata)",
          "2539:   if (ctx == mdata->ctx)",
          "2541:     if (mdata->status != IMAP_FATAL && mdata->state >= IMAP_SELECTED)",
          "2546:         imap_exec(mdata, \"CLOSE\", IMAP_CMD_QUEUE);",
          "2547:       mdata->state = IMAP_AUTHENTICATED;",
          "2550:     mdata->reopen &= IMAP_REOPEN_ALLOW;",
          "2551:     FREE(&(mdata->mbox_name));",
          "2552:     mutt_list_free(&mdata->flags);",
          "2553:     mdata->ctx = NULL;",
          "2555:     mutt_hash_destroy(&mdata->uid_hash);",
          "2556:     FREE(&mdata->msn_index);",
          "2557:     mdata->msn_index_size = 0;",
          "2558:     mdata->max_msn = 0;",
          "2562:       if (mdata->cache[i].path)",
          "2564:         unlink(mdata->cache[i].path);",
          "2565:         FREE(&mdata->cache[i].path);",
          "2569:     mutt_bcache_close(&mdata->bcache);",
          "",
          "[Added Lines]",
          "2526:   struct ImapAccountData *adata = ctx->mailbox->data;",
          "2528:   if (!adata)",
          "2539:   if (ctx == adata->ctx)",
          "2541:     if (adata->status != IMAP_FATAL && adata->state >= IMAP_SELECTED)",
          "2546:         imap_exec(adata, \"CLOSE\", IMAP_CMD_QUEUE);",
          "2547:       adata->state = IMAP_AUTHENTICATED;",
          "2550:     adata->reopen &= IMAP_REOPEN_ALLOW;",
          "2551:     FREE(&(adata->mbox_name));",
          "2552:     mutt_list_free(&adata->flags);",
          "2553:     adata->ctx = NULL;",
          "2555:     mutt_hash_destroy(&adata->uid_hash);",
          "2556:     FREE(&adata->msn_index);",
          "2557:     adata->msn_index_size = 0;",
          "2558:     adata->max_msn = 0;",
          "2562:       if (adata->cache[i].path)",
          "2564:         unlink(adata->cache[i].path);",
          "2565:         FREE(&adata->cache[i].path);",
          "2569:     mutt_bcache_close(&adata->bcache);",
          "",
          "---------------",
          "--- Hunk 89 ---",
          "[Context before]",
          "2597: {",
          "2598:   char *new = NULL;",
          "2599:   char *checker = NULL;",
          "2604:   {",
          "2605:     mutt_error(_(\"IMAP server doesn't support custom flags\"));",
          "2606:     return -1;",
          "",
          "[Removed Lines]",
          "2600:   struct ImapMboxData *mdata = ctx->mailbox->data;",
          "2603:   if (!imap_has_flag(&mdata->flags, NULL))",
          "",
          "[Added Lines]",
          "2600:   struct ImapAccountData *adata = ctx->mailbox->data;",
          "2603:   if (!imap_has_flag(&adata->flags, NULL))",
          "",
          "---------------",
          "--- Hunk 90 ---",
          "[Context before]",
          "2684:   struct Buffer *cmd = NULL;",
          "2685:   char uid[11];",
          "2689:   if (*buf == '\\0')",
          "2690:     buf = NULL;",
          "2693:     return 0;",
          "2695:   snprintf(uid, sizeof(uid), \"%u\", IMAP_EDATA(e)->uid);",
          "",
          "[Removed Lines]",
          "2687:   struct ImapMboxData *mdata = ctx->mailbox->data;",
          "2692:   if (!mutt_bit_isset(mdata->ctx->mailbox->rights, MUTT_ACL_WRITE))",
          "",
          "[Added Lines]",
          "2687:   struct ImapAccountData *adata = ctx->mailbox->data;",
          "2692:   if (!mutt_bit_isset(adata->ctx->mailbox->rights, MUTT_ACL_WRITE))",
          "",
          "---------------",
          "--- Hunk 91 ---",
          "[Context before]",
          "2716:     {",
          "2717:       mutt_buffer_free(&cmd);",
          "2718:       return -1;",
          "",
          "[Removed Lines]",
          "2715:     if (imap_exec(mdata, cmd->data, 0) != 0)",
          "",
          "[Added Lines]",
          "2715:     if (imap_exec(adata, cmd->data, 0) != 0)",
          "",
          "---------------",
          "--- Hunk 92 ---",
          "[Context before]",
          "2737:     mutt_buffer_addstr(cmd, buf);",
          "2738:     mutt_buffer_addstr(cmd, \")\");",
          "2741:     {",
          "2742:       mutt_debug(1, \"fail to add new flags\\n\");",
          "2743:       mutt_buffer_free(&cmd);",
          "",
          "[Removed Lines]",
          "2740:     if (imap_exec(mdata, cmd->data, 0) != 0)",
          "",
          "[Added Lines]",
          "2740:     if (imap_exec(adata, cmd->data, 0) != 0)",
          "",
          "---------------"
        ],
        "imap/imap_private.h||imap/imap_private.h": [
          "File: imap/imap_private.h -> imap/imap_private.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "202: };",
          "210: {",
          "211:   struct Connection *conn;",
          "212:   bool recovering;",
          "",
          "[Removed Lines]",
          "209: struct ImapMboxData",
          "",
          "[Added Lines]",
          "209: struct ImapAccountData",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "295:                      int flag, bool changed, bool invert);",
          "303: bool imap_has_flag(struct ListHead *flag_list, const char *flag);",
          "312: bool imap_code(const char *s);",
          "318: void imap_free_emaildata(void **data);",
          "323: int imap_append_message(struct Context *ctx, struct Message *msg);",
          "325: int imap_msg_open(struct Context *ctx, struct Message *msg, int msgno);",
          "",
          "[Removed Lines]",
          "289: int imap_check(struct ImapMboxData *mdata, bool force);",
          "290: int imap_create_mailbox(struct ImapMboxData *mdata, char *mailbox);",
          "291: int imap_rename_mailbox(struct ImapMboxData *mdata, struct ImapMbox *mx, const char *newname);",
          "292: struct ImapStatus *imap_mboxcache_get(struct ImapMboxData *mdata, const char *mbox, bool create);",
          "293: void imap_mboxcache_free(struct ImapMboxData *mdata);",
          "294: int imap_exec_msgset(struct ImapMboxData *mdata, const char *pre, const char *post,",
          "296: int imap_open_connection(struct ImapMboxData *mdata);",
          "297: void imap_close_connection(struct ImapMboxData *mdata);",
          "298: struct ImapMboxData *imap_conn_find(const struct ConnAccount *account, int flags);",
          "299: int imap_read_literal(FILE *fp, struct ImapMboxData *mdata, unsigned long bytes, struct Progress *pbar);",
          "300: void imap_expunge_mailbox(struct ImapMboxData *mdata);",
          "301: void imap_logout(struct ImapMboxData **mdata);",
          "302: int imap_sync_message_for_copy(struct ImapMboxData *mdata, struct Email *e, struct Buffer *cmd, int *err_continue);",
          "306: int imap_authenticate(struct ImapMboxData *mdata);",
          "309: int imap_cmd_start(struct ImapMboxData *mdata, const char *cmdstr);",
          "310: int imap_cmd_step(struct ImapMboxData *mdata);",
          "311: void imap_cmd_finish(struct ImapMboxData *mdata);",
          "313: const char *imap_cmd_trailer(struct ImapMboxData *mdata);",
          "314: int imap_exec(struct ImapMboxData *mdata, const char *cmdstr, int flags);",
          "315: int imap_cmd_idle(struct ImapMboxData *mdata);",
          "319: int imap_read_headers(struct ImapMboxData *mdata, unsigned int msn_begin, unsigned int msn_end, bool initial_download);",
          "320: char *imap_set_flags(struct ImapMboxData *mdata, struct Email *e, char *s, int *server_changes);",
          "321: int imap_cache_del(struct ImapMboxData *mdata, struct Email *e);",
          "322: int imap_cache_clean(struct ImapMboxData *mdata);",
          "",
          "[Added Lines]",
          "289: int imap_check(struct ImapAccountData *adata, bool force);",
          "290: int imap_create_mailbox(struct ImapAccountData *adata, char *mailbox);",
          "291: int imap_rename_mailbox(struct ImapAccountData *adata, struct ImapMbox *mx, const char *newname);",
          "292: struct ImapStatus *imap_mboxcache_get(struct ImapAccountData *adata, const char *mbox, bool create);",
          "293: void imap_mboxcache_free(struct ImapAccountData *adata);",
          "294: int imap_exec_msgset(struct ImapAccountData *adata, const char *pre, const char *post,",
          "296: int imap_open_connection(struct ImapAccountData *adata);",
          "297: void imap_close_connection(struct ImapAccountData *adata);",
          "298: struct ImapAccountData *imap_conn_find(const struct ConnAccount *account, int flags);",
          "299: int imap_read_literal(FILE *fp, struct ImapAccountData *adata, unsigned long bytes, struct Progress *pbar);",
          "300: void imap_expunge_mailbox(struct ImapAccountData *adata);",
          "301: void imap_logout(struct ImapAccountData **adata);",
          "302: int imap_sync_message_for_copy(struct ImapAccountData *adata, struct Email *e, struct Buffer *cmd, int *err_continue);",
          "306: int imap_authenticate(struct ImapAccountData *adata);",
          "309: int imap_cmd_start(struct ImapAccountData *adata, const char *cmdstr);",
          "310: int imap_cmd_step(struct ImapAccountData *adata);",
          "311: void imap_cmd_finish(struct ImapAccountData *adata);",
          "313: const char *imap_cmd_trailer(struct ImapAccountData *adata);",
          "314: int imap_exec(struct ImapAccountData *adata, const char *cmdstr, int flags);",
          "315: int imap_cmd_idle(struct ImapAccountData *adata);",
          "319: int imap_read_headers(struct ImapAccountData *adata, unsigned int msn_begin, unsigned int msn_end, bool initial_download);",
          "320: char *imap_set_flags(struct ImapAccountData *adata, struct Email *e, char *s, int *server_changes);",
          "321: int imap_cache_del(struct ImapAccountData *adata, struct Email *e);",
          "322: int imap_cache_clean(struct ImapAccountData *adata);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "330: #ifdef USE_HCACHE",
          "339: #endif",
          "341: int imap_continue(const char *msg, const char *resp);",
          "342: void imap_error(const char *where, const char *msg);",
          "345: struct ImapAccountData *imap_adata_new(void);",
          "349: int imap_get_literal_count(const char *buf, unsigned int *bytes);",
          "350: char *imap_get_qualifier(char *buf);",
          "351: int imap_mxcmp(const char *mx1, const char *mx2);",
          "",
          "[Removed Lines]",
          "331: header_cache_t *imap_hcache_open(struct ImapMboxData *mdata, const char *path);",
          "332: void imap_hcache_close(struct ImapMboxData *mdata);",
          "333: struct Email *imap_hcache_get(struct ImapMboxData *mdata, unsigned int uid);",
          "334: int imap_hcache_put(struct ImapMboxData *mdata, struct Email *e);",
          "335: int imap_hcache_del(struct ImapMboxData *mdata, unsigned int uid);",
          "336: int imap_hcache_store_uid_seqset(struct ImapMboxData *mdata);",
          "337: int imap_hcache_clear_uid_seqset(struct ImapMboxData *mdata);",
          "338: char *imap_hcache_get_uid_seqset(struct ImapMboxData *mdata);",
          "343: struct ImapMboxData *imap_mdata_new(void);",
          "344: void imap_mdata_free(struct ImapMboxData **mdata);",
          "346: void imap_adata_free(void **adata);",
          "347: char *imap_fix_path(struct ImapMboxData *mdata, const char *mailbox, char *path, size_t plen);",
          "348: void imap_cachepath(struct ImapMboxData *mdata, const char *mailbox, char *dest, size_t dlen);",
          "",
          "[Added Lines]",
          "331: header_cache_t *imap_hcache_open(struct ImapAccountData *adata, const char *path);",
          "332: void imap_hcache_close(struct ImapAccountData *adata);",
          "333: struct Email *imap_hcache_get(struct ImapAccountData *adata, unsigned int uid);",
          "334: int imap_hcache_put(struct ImapAccountData *adata, struct Email *e);",
          "335: int imap_hcache_del(struct ImapAccountData *adata, unsigned int uid);",
          "336: int imap_hcache_store_uid_seqset(struct ImapAccountData *adata);",
          "337: int imap_hcache_clear_uid_seqset(struct ImapAccountData *adata);",
          "338: char *imap_hcache_get_uid_seqset(struct ImapAccountData *adata);",
          "344: void imap_adata_free(struct ImapAccountData **adata);",
          "345: char *imap_fix_path(struct ImapAccountData *adata, const char *mailbox, char *path, size_t plen);",
          "346: void imap_cachepath(struct ImapAccountData *adata, const char *mailbox, char *dest, size_t dlen);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "353: void imap_qualify_path(char *buf, size_t buflen, struct ImapMbox *mx, char *path);",
          "354: void imap_quote_string(char *dest, size_t dlen, const char *src, bool quote_backtick);",
          "355: void imap_unquote_string(char *s);",
          "358: struct SeqsetIterator *mutt_seqset_iterator_new(const char *seqset);",
          "359: int mutt_seqset_iterator_next(struct SeqsetIterator *iter, unsigned int *next);",
          "360: void mutt_seqset_iterator_free(struct SeqsetIterator **p_iter);",
          "",
          "[Removed Lines]",
          "356: void imap_munge_mbox_name(struct ImapMboxData *mdata, char *dest, size_t dlen, const char *src);",
          "357: void imap_unmunge_mbox_name(struct ImapMboxData *mdata, char *s);",
          "",
          "[Added Lines]",
          "354: void imap_munge_mbox_name(struct ImapAccountData *adata, char *dest, size_t dlen, const char *src);",
          "355: void imap_unmunge_mbox_name(struct ImapAccountData *adata, char *s);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "362: void imap_get_parent(const char *mbox, char delim, char *buf, size_t buflen);",
          "367: void imap_allow_reopen(struct Context *ctx);",
          "368: void imap_disallow_reopen(struct Context *ctx);",
          "",
          "[Removed Lines]",
          "365: void imap_utf_encode(struct ImapMboxData *mdata, char **s);",
          "366: void imap_utf_decode(struct ImapMboxData *mdata, char **s);",
          "",
          "[Added Lines]",
          "363: void imap_utf_encode(struct ImapAccountData *adata, char **s);",
          "364: void imap_utf_decode(struct ImapAccountData *adata, char **s);",
          "",
          "---------------"
        ],
        "imap/message.c||imap/message.c": [
          "File: imap/message.c -> imap/message.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "87: {",
          "88:   char mailbox[PATH_MAX];",
          "96: }",
          "106: {",
          "108:     return NULL;",
          "111:   char id[64];",
          "114: }",
          "124: {",
          "126:     return NULL;",
          "129:   char id[64];",
          "132: }",
          "142: {",
          "144:     return -1;",
          "147:   char id[64];",
          "151: }",
          "",
          "[Removed Lines]",
          "86: static struct BodyCache *msg_cache_open(struct ImapMboxData *mdata)",
          "90:   if (mdata->bcache)",
          "91:     return mdata->bcache;",
          "93:   imap_cachepath(mdata, mdata->mbox_name, mailbox, sizeof(mailbox));",
          "95:   return mutt_bcache_open(&mdata->conn->account, mailbox);",
          "105: static FILE *msg_cache_get(struct ImapMboxData *mdata, struct Email *e)",
          "107:   if (!mdata || !e)",
          "110:   mdata->bcache = msg_cache_open(mdata);",
          "112:   snprintf(id, sizeof(id), \"%u-%u\", mdata->uid_validity, IMAP_EDATA(e)->uid);",
          "113:   return mutt_bcache_get(mdata->bcache, id);",
          "123: static FILE *msg_cache_put(struct ImapMboxData *mdata, struct Email *e)",
          "125:   if (!mdata || !e)",
          "128:   mdata->bcache = msg_cache_open(mdata);",
          "130:   snprintf(id, sizeof(id), \"%u-%u\", mdata->uid_validity, IMAP_EDATA(e)->uid);",
          "131:   return mutt_bcache_put(mdata->bcache, id);",
          "141: static int msg_cache_commit(struct ImapMboxData *mdata, struct Email *e)",
          "143:   if (!mdata || !e)",
          "146:   mdata->bcache = msg_cache_open(mdata);",
          "148:   snprintf(id, sizeof(id), \"%u-%u\", mdata->uid_validity, IMAP_EDATA(e)->uid);",
          "150:   return mutt_bcache_commit(mdata->bcache, id);",
          "",
          "[Added Lines]",
          "86: static struct BodyCache *msg_cache_open(struct ImapAccountData *adata)",
          "90:   if (adata->bcache)",
          "91:     return adata->bcache;",
          "93:   imap_cachepath(adata, adata->mbox_name, mailbox, sizeof(mailbox));",
          "95:   return mutt_bcache_open(&adata->conn->account, mailbox);",
          "105: static FILE *msg_cache_get(struct ImapAccountData *adata, struct Email *e)",
          "107:   if (!adata || !e)",
          "110:   adata->bcache = msg_cache_open(adata);",
          "112:   snprintf(id, sizeof(id), \"%u-%u\", adata->uid_validity, IMAP_EDATA(e)->uid);",
          "113:   return mutt_bcache_get(adata->bcache, id);",
          "123: static FILE *msg_cache_put(struct ImapAccountData *adata, struct Email *e)",
          "125:   if (!adata || !e)",
          "128:   adata->bcache = msg_cache_open(adata);",
          "130:   snprintf(id, sizeof(id), \"%u-%u\", adata->uid_validity, IMAP_EDATA(e)->uid);",
          "131:   return mutt_bcache_put(adata->bcache, id);",
          "141: static int msg_cache_commit(struct ImapAccountData *adata, struct Email *e)",
          "143:   if (!adata || !e)",
          "146:   adata->bcache = msg_cache_open(adata);",
          "148:   snprintf(id, sizeof(id), \"%u-%u\", adata->uid_validity, IMAP_EDATA(e)->uid);",
          "150:   return mutt_bcache_commit(adata->bcache, id);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "157: static int msg_cache_clean_cb(const char *id, struct BodyCache *bcache, void *data)",
          "158: {",
          "159:   unsigned int uv, uid;",
          "162:   if (sscanf(id, \"%u-%u\", &uv, &uid) != 2)",
          "163:     return 0;",
          "167:     mutt_bcache_del(bcache, id);",
          "169:   return 0;",
          "",
          "[Removed Lines]",
          "160:   struct ImapMboxData *mdata = data;",
          "166:   if (uv != mdata->uid_validity || !mutt_hash_int_find(mdata->uid_hash, uid))",
          "",
          "[Added Lines]",
          "160:   struct ImapAccountData *adata = data;",
          "166:   if (uv != adata->uid_validity || !mutt_hash_int_find(adata->uid_hash, uid))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "394:   int parse_rc;",
          "398:   if (buf[0] != '*')",
          "399:     return rc;",
          "",
          "[Removed Lines]",
          "396:   struct ImapMboxData *mdata = mailbox->data;",
          "",
          "[Added Lines]",
          "396:   struct ImapAccountData *adata = mailbox->data;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "425:   if (imap_get_literal_count(buf, &bytes) == 0)",
          "426:   {",
          "434:       return rc;",
          "437:       return rc;",
          "438:   }",
          "",
          "[Removed Lines]",
          "427:     imap_read_literal(fp, mdata, bytes, NULL);",
          "433:     if (imap_cmd_step(mdata) != IMAP_CMD_CONTINUE)",
          "436:     if (msg_parse_fetch(h, mdata->buf) == -1)",
          "",
          "[Added Lines]",
          "427:     imap_read_literal(fp, adata, bytes, NULL);",
          "433:     if (imap_cmd_step(adata) != IMAP_CMD_CONTINUE)",
          "436:     if (msg_parse_fetch(h, adata->buf) == -1)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "471: {",
          "472:   bool abort = false;",
          "",
          "[Removed Lines]",
          "470: static bool query_abort_header_download(struct ImapMboxData *mdata)",
          "",
          "[Added Lines]",
          "470: static bool query_abort_header_download(struct ImapAccountData *adata)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "476:   if (mutt_yesorno(_(\"Abort download and close mailbox?\"), MUTT_YES) == MUTT_YES)",
          "477:   {",
          "478:     abort = true;",
          "480:   }",
          "481:   SigInt = 0;",
          "",
          "[Removed Lines]",
          "479:     imap_close_connection(mdata);",
          "",
          "[Added Lines]",
          "479:     imap_close_connection(adata);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "494: {",
          "495:   size_t new_size;",
          "498:     return;",
          "",
          "[Removed Lines]",
          "493: static void alloc_msn_index(struct ImapMboxData *mdata, size_t msn_count)",
          "497:   if (msn_count <= mdata->msn_index_size)",
          "",
          "[Added Lines]",
          "493: static void alloc_msn_index(struct ImapAccountData *adata, size_t msn_count)",
          "497:   if (msn_count <= adata->msn_index_size)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "510:   new_size = msn_count + 25;",
          "514:   else",
          "515:   {",
          "519:   }",
          "522: }",
          "533: {",
          "536: }",
          "",
          "[Removed Lines]",
          "512:   if (!mdata->msn_index)",
          "513:     mdata->msn_index = mutt_mem_calloc(new_size, sizeof(struct Email *));",
          "516:     mutt_mem_realloc(&mdata->msn_index, sizeof(struct Email *) * new_size);",
          "517:     memset(mdata->msn_index + mdata->msn_index_size, 0,",
          "518:            sizeof(struct Email *) * (new_size - mdata->msn_index_size));",
          "521:   mdata->msn_index_size = new_size;",
          "532: static void imap_alloc_uid_hash(struct ImapMboxData *mdata, unsigned int msn_count)",
          "534:   if (!mdata->uid_hash)",
          "535:     mdata->uid_hash = mutt_hash_int_create(MAX(6 * msn_count / 5, 30), 0);",
          "",
          "[Added Lines]",
          "512:   if (!adata->msn_index)",
          "513:     adata->msn_index = mutt_mem_calloc(new_size, sizeof(struct Email *));",
          "516:     mutt_mem_realloc(&adata->msn_index, sizeof(struct Email *) * new_size);",
          "517:     memset(adata->msn_index + adata->msn_index_size, 0,",
          "518:            sizeof(struct Email *) * (new_size - adata->msn_index_size));",
          "521:   adata->msn_index_size = new_size;",
          "532: static void imap_alloc_uid_hash(struct ImapAccountData *adata, unsigned int msn_count)",
          "534:   if (!adata->uid_hash)",
          "535:     adata->uid_hash = mutt_hash_int_create(MAX(6 * msn_count / 5, 30), 0);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "553:                                   unsigned int msn_begin, unsigned int msn_end)",
          "554: {",
          "555:   int chunks = 0;",
          "",
          "[Removed Lines]",
          "552: static void imap_fetch_msn_seqset(struct Buffer *b, struct ImapMboxData *mdata,",
          "",
          "[Added Lines]",
          "552: static void imap_fetch_msn_seqset(struct Buffer *b, struct ImapAccountData *adata,",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "560:   for (unsigned int msn = msn_begin; msn <= (msn_end + 1); msn++)",
          "561:   {",
          "563:     {",
          "564:       switch (state)",
          "565:       {",
          "",
          "[Removed Lines]",
          "562:     if ((msn <= msn_end) && !mdata->msn_index[msn - 1])",
          "",
          "[Added Lines]",
          "562:     if ((msn <= msn_end) && !adata->msn_index[msn - 1])",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "658:                                           unsigned int msn_end, unsigned int uidnext,",
          "659:                                           bool store_flag_updates, bool eval_condstore)",
          "660: {",
          "661:   struct Progress progress;",
          "662:   char buf[LONG_STRING];",
          "665:   int idx = ctx->mailbox->msg_count;",
          "",
          "[Removed Lines]",
          "657: static int read_headers_normal_eval_cache(struct ImapMboxData *mdata,",
          "664:   struct Context *ctx = mdata->ctx;",
          "",
          "[Added Lines]",
          "657: static int read_headers_normal_eval_cache(struct ImapAccountData *adata,",
          "664:   struct Context *ctx = adata->ctx;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "674:   snprintf(buf, sizeof(buf), \"UID FETCH 1:%u (UID%s)\", uidnext - 1,",
          "675:            eval_condstore ? \"\" : \" FLAGS\");",
          "679:   int rc = IMAP_CMD_CONTINUE;",
          "680:   int mfhrc = 0;",
          "681:   struct ImapHeader h;",
          "682:   for (int msgno = 1; rc == IMAP_CMD_CONTINUE; msgno++)",
          "683:   {",
          "685:       return -1;",
          "687:     mutt_progress_update(&progress, msgno, -1);",
          "",
          "[Removed Lines]",
          "677:   imap_cmd_start(mdata, buf);",
          "684:     if (SigInt && query_abort_header_download(mdata))",
          "",
          "[Added Lines]",
          "677:   imap_cmd_start(adata, buf);",
          "684:     if (SigInt && query_abort_header_download(adata))",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "690:     h.data = new_emaildata();",
          "691:     do",
          "692:     {",
          "694:       if (rc != IMAP_CMD_CONTINUE)",
          "695:         break;",
          "698:       if (mfhrc < 0)",
          "699:         continue;",
          "",
          "[Removed Lines]",
          "693:       rc = imap_cmd_step(mdata);",
          "697:       mfhrc = msg_fetch_header(ctx->mailbox, &h, mdata->buf, NULL);",
          "",
          "[Added Lines]",
          "693:       rc = imap_cmd_step(adata);",
          "697:       mfhrc = msg_fetch_header(ctx->mailbox, &h, adata->buf, NULL);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "712:         continue;",
          "713:       }",
          "716:       {",
          "717:         mutt_debug(2, \"skipping hcache FETCH for duplicate message %d\\n\", h.data->msn);",
          "718:         continue;",
          "719:       }",
          "722:       if (ctx->mailbox->hdrs[idx])",
          "723:       {",
          "728:         ctx->mailbox->hdrs[idx]->index = idx;",
          "",
          "[Removed Lines]",
          "715:       if (mdata->msn_index[h.data->msn - 1])",
          "721:       ctx->mailbox->hdrs[idx] = imap_hcache_get(mdata, h.data->uid);",
          "724:         mdata->max_msn = MAX(mdata->max_msn, h.data->msn);",
          "725:         mdata->msn_index[h.data->msn - 1] = ctx->mailbox->hdrs[idx];",
          "726:         mutt_hash_int_insert(mdata->uid_hash, h.data->uid, ctx->mailbox->hdrs[idx]);",
          "",
          "[Added Lines]",
          "715:       if (adata->msn_index[h.data->msn - 1])",
          "721:       ctx->mailbox->hdrs[idx] = imap_hcache_get(adata, h.data->uid);",
          "724:         adata->max_msn = MAX(adata->max_msn, h.data->msn);",
          "725:         adata->msn_index[h.data->msn - 1] = ctx->mailbox->hdrs[idx];",
          "726:         mutt_hash_int_insert(adata->uid_hash, h.data->uid, ctx->mailbox->hdrs[idx]);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "761:         if (!eval_condstore && store_flag_updates)",
          "764:         h.data = NULL;",
          "765:         idx++;",
          "",
          "[Removed Lines]",
          "762:           imap_hcache_put(mdata, ctx->mailbox->hdrs[idx]);",
          "",
          "[Added Lines]",
          "762:           imap_hcache_put(adata, ctx->mailbox->hdrs[idx]);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "791: {",
          "792:   int rc;",
          "793:   unsigned int uid = 0;",
          "795:   mutt_debug(2, \"Reading uid seqset from header cache\\n\");",
          "797:   unsigned int msn = 1;",
          "799:   struct SeqsetIterator *iter = mutt_seqset_iterator_new(uid_seqset);",
          "",
          "[Removed Lines]",
          "790: static int read_headers_qresync_eval_cache(struct ImapMboxData *mdata, char *uid_seqset)",
          "796:   struct Context *ctx = mdata->ctx;",
          "",
          "[Added Lines]",
          "790: static int read_headers_qresync_eval_cache(struct ImapAccountData *adata, char *uid_seqset)",
          "796:   struct Context *ctx = adata->ctx;",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "804:   {",
          "811:     if (e)",
          "812:     {",
          "816:       if (ctx->mailbox->msg_count >= ctx->mailbox->hdrmax)",
          "817:         mx_alloc_memory(ctx->mailbox);",
          "",
          "[Removed Lines]",
          "807:     if (msn > mdata->msn_index_size)",
          "808:       alloc_msn_index(mdata, msn);",
          "810:     struct Email *e = imap_hcache_get(mdata, uid);",
          "813:       mdata->max_msn = MAX(mdata->max_msn, msn);",
          "814:       mdata->msn_index[msn - 1] = e;",
          "",
          "[Added Lines]",
          "807:     if (msn > adata->msn_index_size)",
          "808:       alloc_msn_index(adata, msn);",
          "810:     struct Email *e = imap_hcache_get(adata, uid);",
          "813:       adata->max_msn = MAX(adata->max_msn, msn);",
          "814:       adata->msn_index[msn - 1] = e;",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "832:       edata->msn = msn;",
          "833:       edata->uid = uid;",
          "836:       ctx->mailbox->size += e->content->length;",
          "837:       ctx->mailbox->hdrs[ctx->mailbox->msg_count++] = e;",
          "",
          "[Removed Lines]",
          "834:       mutt_hash_int_insert(mdata->uid_hash, uid, e);",
          "",
          "[Added Lines]",
          "834:       mutt_hash_int_insert(adata->uid_hash, uid, e);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "861:                                                   unsigned int msn_end, unsigned int uidnext,",
          "862:                                                   unsigned long long hc_modseq, bool eval_qresync)",
          "863: {",
          "",
          "[Removed Lines]",
          "860: static int read_headers_condstore_qresync_updates(struct ImapMboxData *mdata,",
          "",
          "[Added Lines]",
          "860: static int read_headers_condstore_qresync_updates(struct ImapAccountData *adata,",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "865:   char buf[LONG_STRING];",
          "866:   unsigned int header_msn = 0;",
          "871:   mutt_progress_init(&progress, _(\"Fetching flag updates...\"),",
          "",
          "[Removed Lines]",
          "868:   struct Context *ctx = mdata->ctx;",
          "",
          "[Added Lines]",
          "868:   struct Context *ctx = adata->ctx;",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "874:   snprintf(buf, sizeof(buf), \"UID FETCH 1:%u (FLAGS) (CHANGEDSINCE %llu%s)\",",
          "875:            uidnext - 1, hc_modseq, eval_qresync ? \" VANISHED\" : \"\");",
          "879:   int rc = IMAP_CMD_CONTINUE;",
          "880:   for (int msgno = 1; rc == IMAP_CMD_CONTINUE; msgno++)",
          "881:   {",
          "883:       return -1;",
          "885:     mutt_progress_update(&progress, msgno, -1);",
          "889:     if (rc != IMAP_CMD_CONTINUE)",
          "890:       break;",
          "895:     if (fetch_buf[0] != '*')",
          "896:       continue;",
          "",
          "[Removed Lines]",
          "877:   imap_cmd_start(mdata, buf);",
          "882:     if (SigInt && query_abort_header_download(mdata))",
          "888:     rc = imap_cmd_step(mdata);",
          "894:     char *fetch_buf = mdata->buf;",
          "",
          "[Added Lines]",
          "877:   imap_cmd_start(adata, buf);",
          "882:     if (SigInt && query_abort_header_download(adata))",
          "888:     rc = imap_cmd_step(adata);",
          "894:     char *fetch_buf = adata->buf;",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "899:     if (!isdigit((unsigned char) *fetch_buf) || (mutt_str_atoui(fetch_buf, &header_msn) < 0))",
          "900:       continue;",
          "903:     {",
          "904:       mutt_debug(1, \"skipping CONDSTORE flag update for unknown message number %u\\n\", header_msn);",
          "905:       continue;",
          "906:     }",
          "909:   }",
          "914:   ctx->mailbox->changed = false;",
          "918:   {",
          "923:   }",
          "925:   return 0;",
          "",
          "[Removed Lines]",
          "902:     if ((header_msn < 1) || (header_msn > msn_end) || !mdata->msn_index[header_msn - 1])",
          "908:     imap_hcache_put(mdata, mdata->msn_index[header_msn - 1]);",
          "913:   mdata->check_status &= ~IMAP_FLAGS_PENDING;",
          "917:   if (mdata->reopen & IMAP_EXPUNGE_PENDING)",
          "919:     imap_hcache_close(mdata);",
          "920:     imap_expunge_mailbox(mdata);",
          "921:     mdata->hcache = imap_hcache_open(mdata, NULL);",
          "922:     mdata->reopen &= ~IMAP_EXPUNGE_PENDING;",
          "",
          "[Added Lines]",
          "902:     if ((header_msn < 1) || (header_msn > msn_end) || !adata->msn_index[header_msn - 1])",
          "908:     imap_hcache_put(adata, adata->msn_index[header_msn - 1]);",
          "913:   adata->check_status &= ~IMAP_FLAGS_PENDING;",
          "917:   if (adata->reopen & IMAP_EXPUNGE_PENDING)",
          "919:     imap_hcache_close(adata);",
          "920:     imap_expunge_mailbox(adata);",
          "921:     adata->hcache = imap_hcache_open(adata, NULL);",
          "922:     adata->reopen &= ~IMAP_EXPUNGE_PENDING;",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "941:                                   unsigned int msn_end, bool evalhc,",
          "942:                                   unsigned int *maxuid, bool initial_download)",
          "943: {",
          "",
          "[Removed Lines]",
          "940: static int read_headers_fetch_new(struct ImapMboxData *mdata, unsigned int msn_begin,",
          "",
          "[Added Lines]",
          "940: static int read_headers_fetch_new(struct ImapAccountData *adata, unsigned int msn_begin,",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "953:       \"CONTENT-DESCRIPTION IN-REPLY-TO REPLY-TO LINES LIST-POST X-LABEL \"",
          "954:       \"X-ORIGINAL-TO\";",
          "957:   int idx = ctx->mailbox->msg_count;",
          "960:   {",
          "961:     safe_asprintf(&hdrreq, \"BODY.PEEK[HEADER.FIELDS (%s%s%s)]\", want_headers,",
          "962:                   ImapHeaders ? \" \" : \"\", NONULL(ImapHeaders));",
          "963:   }",
          "965:   {",
          "966:     safe_asprintf(&hdrreq, \"RFC822.HEADER.LINES (%s%s%s)\", want_headers,",
          "967:                   ImapHeaders ? \" \" : \"\", NONULL(ImapHeaders));",
          "",
          "[Removed Lines]",
          "956:   struct Context *ctx = mdata->ctx;",
          "959:   if (mutt_bit_isset(mdata->capabilities, IMAP4REV1))",
          "964:   else if (mutt_bit_isset(mdata->capabilities, IMAP4))",
          "",
          "[Added Lines]",
          "956:   struct Context *ctx = adata->ctx;",
          "959:   if (mutt_bit_isset(adata->capabilities, IMAP4REV1))",
          "964:   else if (mutt_bit_isset(adata->capabilities, IMAP4))",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "993:     {",
          "995:       evalhc = false;",
          "997:     }",
          "998:     else",
          "999:       mutt_buffer_printf(b, \"%u:%u\", msn_begin, msn_end);",
          "",
          "[Removed Lines]",
          "996:       imap_fetch_msn_seqset(b, mdata, msn_begin, msn_end);",
          "",
          "[Added Lines]",
          "996:       imap_fetch_msn_seqset(b, adata, msn_begin, msn_end);",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "1001:     fetch_msn_end = msn_end;",
          "1002:     char *cmd = NULL;",
          "1003:     safe_asprintf(&cmd, \"FETCH %s (UID FLAGS INTERNALDATE RFC822.SIZE %s)\", b->data, hdrreq);",
          "1005:     FREE(&cmd);",
          "1006:     mutt_buffer_free(&b);",
          "1008:     rc = IMAP_CMD_CONTINUE;",
          "1009:     for (int msgno = msn_begin; rc == IMAP_CMD_CONTINUE; msgno++)",
          "1010:     {",
          "1012:         goto bail;",
          "1014:       mutt_progress_update(&progress, msgno, -1);",
          "",
          "[Removed Lines]",
          "1004:     imap_cmd_start(mdata, cmd);",
          "1011:       if (initial_download && SigInt && query_abort_header_download(mdata))",
          "",
          "[Added Lines]",
          "1004:     imap_cmd_start(adata, cmd);",
          "1011:       if (initial_download && SigInt && query_abort_header_download(adata))",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "1024:       do",
          "1025:       {",
          "1027:         if (rc != IMAP_CMD_CONTINUE)",
          "1028:           break;",
          "1031:         if (mfhrc < 0)",
          "1032:           continue;",
          "",
          "[Removed Lines]",
          "1026:         rc = imap_cmd_step(mdata);",
          "1030:         mfhrc = msg_fetch_header(ctx->mailbox, &h, mdata->buf, fp);",
          "",
          "[Added Lines]",
          "1026:         rc = imap_cmd_step(adata);",
          "1030:         mfhrc = msg_fetch_header(ctx->mailbox, &h, adata->buf, fp);",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "1048:         }",
          "1052:         {",
          "1053:           mutt_debug(2, \"skipping FETCH response for duplicate message %d\\n\",",
          "1054:                      h.data->msn);",
          "",
          "[Removed Lines]",
          "1051:         if (mdata->msn_index[h.data->msn - 1])",
          "",
          "[Added Lines]",
          "1051:         if (adata->msn_index[h.data->msn - 1])",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "1058:         ctx->mailbox->hdrs[idx] = mutt_email_new();",
          "1064:         ctx->mailbox->hdrs[idx]->index = idx;",
          "",
          "[Removed Lines]",
          "1060:         mdata->max_msn = MAX(mdata->max_msn, h.data->msn);",
          "1061:         mdata->msn_index[h.data->msn - 1] = ctx->mailbox->hdrs[idx];",
          "1062:         mutt_hash_int_insert(mdata->uid_hash, h.data->uid, ctx->mailbox->hdrs[idx]);",
          "",
          "[Added Lines]",
          "1060:         adata->max_msn = MAX(adata->max_msn, h.data->msn);",
          "1061:         adata->msn_index[h.data->msn - 1] = ctx->mailbox->hdrs[idx];",
          "1062:         mutt_hash_int_insert(adata->uid_hash, h.data->uid, ctx->mailbox->hdrs[idx]);",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "1090:         ctx->mailbox->size += h.content_length;",
          "1092: #ifdef USE_HCACHE",
          "1096:         ctx->mailbox->msg_count++;",
          "",
          "[Removed Lines]",
          "1093:         imap_hcache_put(mdata, ctx->mailbox->hdrs[idx]);",
          "",
          "[Added Lines]",
          "1093:         imap_hcache_put(adata, ctx->mailbox->hdrs[idx]);",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "1115:     {",
          "1120:       while (msn_end > ctx->mailbox->hdrmax)",
          "1121:         mx_alloc_memory(ctx->mailbox);",
          "1125:     }",
          "1126:   }",
          "",
          "[Removed Lines]",
          "1114:     if (mdata->reopen & IMAP_NEWMAIL_PENDING)",
          "1117:       fetch_msn_end = mdata->max_msn;",
          "1118:       msn_begin = mdata->max_msn + 1;",
          "1119:       msn_end = mdata->new_mail_count;",
          "1122:       alloc_msn_index(mdata, msn_end);",
          "1123:       mdata->reopen &= ~IMAP_NEWMAIL_PENDING;",
          "1124:       mdata->new_mail_count = 0;",
          "",
          "[Added Lines]",
          "1114:     if (adata->reopen & IMAP_NEWMAIL_PENDING)",
          "1117:       fetch_msn_end = adata->max_msn;",
          "1118:       msn_begin = adata->max_msn + 1;",
          "1119:       msn_end = adata->new_mail_count;",
          "1122:       alloc_msn_index(adata, msn_end);",
          "1123:       adata->reopen &= ~IMAP_NEWMAIL_PENDING;",
          "1124:       adata->new_mail_count = 0;",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "1151:                       unsigned int msn_end, bool initial_download)",
          "1152: {",
          "1153:   struct ImapStatus *status = NULL;",
          "",
          "[Removed Lines]",
          "1150: int imap_read_headers(struct ImapMboxData *mdata, unsigned int msn_begin,",
          "",
          "[Added Lines]",
          "1150: int imap_read_headers(struct ImapAccountData *adata, unsigned int msn_begin,",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "1169:   char *uid_seqset = NULL;",
          "1175:   while (msn_end > ctx->mailbox->hdrmax)",
          "1176:     mx_alloc_memory(ctx->mailbox);",
          "1180:   oldmsgcount = ctx->mailbox->msg_count;",
          "1184: #ifdef USE_HCACHE",
          "1188:   {",
          "1191:     if (puidnext)",
          "1192:     {",
          "1193:       uidnext = *(unsigned int *) puidnext;",
          "1195:     }",
          "1198:     {",
          "1200:         has_condstore = true;",
          "1207:         has_qresync = true;",
          "1208:     }",
          "1211:     {",
          "1212:       evalhc = true;",
          "1214:       if (pmodseq)",
          "1215:       {",
          "1216:         hc_modseq = *pmodseq;",
          "1218:       }",
          "1219:       if (hc_modseq)",
          "1220:       {",
          "1221:         if (has_qresync)",
          "1222:         {",
          "1224:           if (uid_seqset)",
          "1225:             eval_qresync = true;",
          "1226:         }",
          "",
          "[Removed Lines]",
          "1172:   struct Context *ctx = mdata->ctx;",
          "1177:   alloc_msn_index(mdata, msn_end);",
          "1178:   imap_alloc_uid_hash(mdata, msn_end);",
          "1181:   mdata->reopen &= ~(IMAP_REOPEN_ALLOW | IMAP_NEWMAIL_PENDING);",
          "1182:   mdata->new_mail_count = 0;",
          "1185:   mdata->hcache = imap_hcache_open(mdata, NULL);",
          "1187:   if (mdata->hcache && initial_download)",
          "1189:     uid_validity = mutt_hcache_fetch_raw(mdata->hcache, \"/UIDVALIDITY\", 12);",
          "1190:     puidnext = mutt_hcache_fetch_raw(mdata->hcache, \"/UIDNEXT\", 8);",
          "1194:       mutt_hcache_free(mdata->hcache, &puidnext);",
          "1197:     if (mdata->modseq)",
          "1199:       if (mutt_bit_isset(mdata->capabilities, CONDSTORE) && ImapCondStore)",
          "1206:       if (mdata->qresync)",
          "1210:     if (uid_validity && uidnext && (*(unsigned int *) uid_validity == mdata->uid_validity))",
          "1213:       pmodseq = mutt_hcache_fetch_raw(mdata->hcache, \"/MODSEQ\", 7);",
          "1217:         mutt_hcache_free(mdata->hcache, (void **) &pmodseq);",
          "1223:           uid_seqset = imap_hcache_get_uid_seqset(mdata);",
          "",
          "[Added Lines]",
          "1172:   struct Context *ctx = adata->ctx;",
          "1177:   alloc_msn_index(adata, msn_end);",
          "1178:   imap_alloc_uid_hash(adata, msn_end);",
          "1181:   adata->reopen &= ~(IMAP_REOPEN_ALLOW | IMAP_NEWMAIL_PENDING);",
          "1182:   adata->new_mail_count = 0;",
          "1185:   adata->hcache = imap_hcache_open(adata, NULL);",
          "1187:   if (adata->hcache && initial_download)",
          "1189:     uid_validity = mutt_hcache_fetch_raw(adata->hcache, \"/UIDVALIDITY\", 12);",
          "1190:     puidnext = mutt_hcache_fetch_raw(adata->hcache, \"/UIDNEXT\", 8);",
          "1194:       mutt_hcache_free(adata->hcache, &puidnext);",
          "1197:     if (adata->modseq)",
          "1199:       if (mutt_bit_isset(adata->capabilities, CONDSTORE) && ImapCondStore)",
          "1206:       if (adata->qresync)",
          "1210:     if (uid_validity && uidnext && (*(unsigned int *) uid_validity == adata->uid_validity))",
          "1213:       pmodseq = mutt_hcache_fetch_raw(adata->hcache, \"/MODSEQ\", 7);",
          "1217:         mutt_hcache_free(adata->hcache, (void **) &pmodseq);",
          "1223:           uid_seqset = imap_hcache_get_uid_seqset(adata);",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "1229:           eval_condstore = true;",
          "1230:       }",
          "1231:     }",
          "1233:   }",
          "1234:   if (evalhc)",
          "1235:   {",
          "1236:     if (eval_qresync)",
          "1237:     {",
          "1239:         goto bail;",
          "1240:     }",
          "1241:     else",
          "1242:     {",
          "1244:                                          eval_condstore) < 0)",
          "1245:         goto bail;",
          "1246:     }",
          "1249:     {",
          "1251:                                                  hc_modseq, eval_qresync) < 0)",
          "1252:       {",
          "1253:         goto bail;",
          "",
          "[Removed Lines]",
          "1232:     mutt_hcache_free(mdata->hcache, &uid_validity);",
          "1238:       if (read_headers_qresync_eval_cache(mdata, uid_seqset) < 0)",
          "1243:       if (read_headers_normal_eval_cache(mdata, msn_end, uidnext, has_condstore || has_qresync,",
          "1248:     if ((eval_condstore || eval_qresync) && (hc_modseq != mdata->modseq))",
          "1250:       if (read_headers_condstore_qresync_updates(mdata, msn_end, uidnext,",
          "",
          "[Added Lines]",
          "1232:     mutt_hcache_free(adata->hcache, &uid_validity);",
          "1238:       if (read_headers_qresync_eval_cache(adata, uid_seqset) < 0)",
          "1243:       if (read_headers_normal_eval_cache(adata, msn_end, uidnext, has_condstore || has_qresync,",
          "1248:     if ((eval_condstore || eval_qresync) && (hc_modseq != adata->modseq))",
          "1250:       if (read_headers_condstore_qresync_updates(adata, msn_end, uidnext,",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "1258:     while (msn_begin <= msn_end)",
          "1259:     {",
          "1261:         break;",
          "1262:       msn_begin++;",
          "1263:     }",
          "1264:   }",
          "1268:     goto bail;",
          "1271:       (status->uidnext < maxuid + 1))",
          "1272:   {",
          "1273:     status->uidnext = maxuid + 1;",
          "1274:   }",
          "1276: #ifdef USE_HCACHE",
          "1280:   {",
          "1283:   }",
          "1285:   {",
          "1288:   }",
          "",
          "[Removed Lines]",
          "1260:       if (!mdata->msn_index[msn_begin - 1])",
          "1267:   if (read_headers_fetch_new(mdata, msn_begin, msn_end, evalhc, &maxuid, initial_download) < 0)",
          "1270:   if (maxuid && (status = imap_mboxcache_get(mdata, mdata->mbox_name, 0)) &&",
          "1277:   mutt_hcache_store_raw(mdata->hcache, \"/UIDVALIDITY\", 12, &mdata->uid_validity,",
          "1278:                         sizeof(mdata->uid_validity));",
          "1279:   if (maxuid && mdata->uidnext < maxuid + 1)",
          "1281:     mutt_debug(2, \"Overriding UIDNEXT: %u -> %u\\n\", mdata->uidnext, maxuid + 1);",
          "1282:     mdata->uidnext = maxuid + 1;",
          "1284:   if (mdata->uidnext > 1)",
          "1286:     mutt_hcache_store_raw(mdata->hcache, \"/UIDNEXT\", 8, &mdata->uidnext,",
          "1287:                           sizeof(mdata->uidnext));",
          "",
          "[Added Lines]",
          "1260:       if (!adata->msn_index[msn_begin - 1])",
          "1267:   if (read_headers_fetch_new(adata, msn_begin, msn_end, evalhc, &maxuid, initial_download) < 0)",
          "1270:   if (maxuid && (status = imap_mboxcache_get(adata, adata->mbox_name, 0)) &&",
          "1277:   mutt_hcache_store_raw(adata->hcache, \"/UIDVALIDITY\", 12, &adata->uid_validity,",
          "1278:                         sizeof(adata->uid_validity));",
          "1279:   if (maxuid && adata->uidnext < maxuid + 1)",
          "1281:     mutt_debug(2, \"Overriding UIDNEXT: %u -> %u\\n\", adata->uidnext, maxuid + 1);",
          "1282:     adata->uidnext = maxuid + 1;",
          "1284:   if (adata->uidnext > 1)",
          "1286:     mutt_hcache_store_raw(adata->hcache, \"/UIDNEXT\", 8, &adata->uidnext,",
          "1287:                           sizeof(adata->uidnext));",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "1296:   {",
          "1297:     if (has_condstore || has_qresync)",
          "1298:     {",
          "1301:     }",
          "1302:     else",
          "1305:     if (has_qresync)",
          "1307:     else",
          "1309:   }",
          "",
          "[Removed Lines]",
          "1299:       mutt_hcache_store_raw(mdata->hcache, \"/MODSEQ\", 7, &mdata->modseq,",
          "1300:                             sizeof(mdata->modseq));",
          "1303:       mutt_hcache_delete(mdata->hcache, \"/MODSEQ\", 7);",
          "1306:       imap_hcache_store_uid_seqset(mdata);",
          "1308:       imap_hcache_clear_uid_seqset(mdata);",
          "",
          "[Added Lines]",
          "1299:       mutt_hcache_store_raw(adata->hcache, \"/MODSEQ\", 7, &adata->modseq,",
          "1300:                             sizeof(adata->modseq));",
          "1303:       mutt_hcache_delete(adata->hcache, \"/MODSEQ\", 7);",
          "1306:       imap_hcache_store_uid_seqset(adata);",
          "1308:       imap_hcache_clear_uid_seqset(adata);",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "1317:     mx_update_context(ctx, ctx->mailbox->msg_count - oldmsgcount);",
          "1318:   }",
          "1322:   retval = msn_end;",
          "1324: bail:",
          "1325: #ifdef USE_HCACHE",
          "1327:   FREE(&uid_seqset);",
          "",
          "[Removed Lines]",
          "1320:   mdata->reopen |= IMAP_REOPEN_ALLOW;",
          "1326:   imap_hcache_close(mdata);",
          "",
          "[Added Lines]",
          "1320:   adata->reopen |= IMAP_REOPEN_ALLOW;",
          "1326:   imap_hcache_close(adata);",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "1352:   struct ImapMbox mx;",
          "1353:   int rc;",
          "1357:   if (imap_parse_path(ctx->mailbox->path, &mx))",
          "1358:     return -1;",
          "1361:   if (!*mailbox)",
          "1362:     mutt_str_strfcpy(mailbox, \"INBOX\", sizeof(mailbox));",
          "",
          "[Removed Lines]",
          "1355:   struct ImapMboxData *mdata = ctx->mailbox->data;",
          "1360:   imap_fix_path(mdata, mx.mbox, mailbox, sizeof(mailbox));",
          "",
          "[Added Lines]",
          "1355:   struct ImapAccountData *adata = ctx->mailbox->data;",
          "1360:   imap_fix_path(adata, mx.mbox, mailbox, sizeof(mailbox));",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "1386:   mutt_progress_init(&progressbar, _(\"Uploading message...\"),",
          "1387:                      MUTT_PROGRESS_SIZE, NetInc, len);",
          "1390:   mutt_date_make_imap(internaldate, sizeof(internaldate), msg->received);",
          "1392:   imap_flags[0] = 0;",
          "",
          "[Removed Lines]",
          "1389:   imap_munge_mbox_name(mdata, mbox, sizeof(mbox), mailbox);",
          "",
          "[Added Lines]",
          "1389:   imap_munge_mbox_name(adata, mbox, sizeof(mbox), mailbox);",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "1404:   snprintf(buf, sizeof(buf), \"APPEND %s (%s) \\\"%s\\\" {%lu}\", mbox,",
          "1405:            imap_flags + 1, internaldate, (unsigned long) len);",
          "1409:   do",
          "1411:   while (rc == IMAP_CMD_CONTINUE);",
          "1413:   if (rc != IMAP_CMD_RESPOND)",
          "1414:   {",
          "1418:     SKIPWS(pc);",
          "1419:     pc = imap_next_word(pc);",
          "1420:     mutt_error(\"%s\", pc);",
          "",
          "[Removed Lines]",
          "1407:   imap_cmd_start(mdata, buf);",
          "1410:     rc = imap_cmd_step(mdata);",
          "1415:     mutt_debug(1, \"#1 command failed: %s\\n\", mdata->buf);",
          "1417:     char *pc = mdata->buf + SEQLEN;",
          "",
          "[Added Lines]",
          "1407:   imap_cmd_start(adata, buf);",
          "1410:     rc = imap_cmd_step(adata);",
          "1415:     mutt_debug(1, \"#1 command failed: %s\\n\", adata->buf);",
          "1417:     char *pc = adata->buf + SEQLEN;",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "1432:     if (len > sizeof(buf) - 3)",
          "1433:     {",
          "1434:       sent += len;",
          "1436:       mutt_progress_update(&progressbar, sent, -1);",
          "1437:     }",
          "1438:   }",
          "1440:   if (len)",
          "1444:   mutt_file_fclose(&fp);",
          "1446:   do",
          "1448:   while (rc == IMAP_CMD_CONTINUE);",
          "1451:   {",
          "1454:     SKIPWS(pc);",
          "1455:     pc = imap_next_word(pc);",
          "1456:     mutt_error(\"%s\", pc);",
          "",
          "[Removed Lines]",
          "1435:       flush_buffer(buf, &len, mdata->conn);",
          "1441:     flush_buffer(buf, &len, mdata->conn);",
          "1443:   mutt_socket_send(mdata->conn, \"\\r\\n\");",
          "1447:     rc = imap_cmd_step(mdata);",
          "1450:   if (!imap_code(mdata->buf))",
          "1452:     mutt_debug(1, \"#2 command failed: %s\\n\", mdata->buf);",
          "1453:     char *pc = mdata->buf + SEQLEN;",
          "",
          "[Added Lines]",
          "1435:       flush_buffer(buf, &len, adata->conn);",
          "1441:     flush_buffer(buf, &len, adata->conn);",
          "1443:   mutt_socket_send(adata->conn, \"\\r\\n\");",
          "1447:     rc = imap_cmd_step(adata);",
          "1450:   if (!imap_code(adata->buf))",
          "1452:     mutt_debug(1, \"#2 command failed: %s\\n\", adata->buf);",
          "1453:     char *pc = adata->buf + SEQLEN;",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "1486:   int err_continue = MUTT_NO;",
          "1487:   int triedcreate = 0;",
          "1491:   if (imap_parse_path(dest, &mx))",
          "1492:   {",
          "",
          "[Removed Lines]",
          "1489:   struct ImapMboxData *mdata = ctx->mailbox->data;",
          "",
          "[Added Lines]",
          "1489:   struct ImapAccountData *adata = ctx->mailbox->data;",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "1495:   }",
          "1499:   {",
          "1500:     mutt_debug(3, \"%s not same server as %s\\n\", dest, ctx->mailbox->path);",
          "1501:     return 1;",
          "",
          "[Removed Lines]",
          "1498:   if (!mutt_account_match(&(mdata->conn->account), &(mx.account)))",
          "",
          "[Added Lines]",
          "1498:   if (!mutt_account_match(&(adata->conn->account), &(mx.account)))",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "1507:     return 1;",
          "1508:   }",
          "1511:   if (!*mbox)",
          "1512:     mutt_str_strfcpy(mbox, \"INBOX\", sizeof(mbox));",
          "1516:   do",
          "",
          "[Removed Lines]",
          "1510:   imap_fix_path(mdata, mx.mbox, mbox, sizeof(mbox));",
          "1513:   imap_munge_mbox_name(mdata, mmbox, sizeof(mmbox), mbox);",
          "",
          "[Added Lines]",
          "1510:   imap_fix_path(adata, mx.mbox, mbox, sizeof(mbox));",
          "1513:   imap_munge_mbox_name(adata, mmbox, sizeof(mmbox), mbox);",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "1538:         if (ctx->mailbox->hdrs[i]->active && ctx->mailbox->hdrs[i]->changed)",
          "1539:         {",
          "1541:                                           &sync_cmd, &err_continue);",
          "1542:           if (rc < 0)",
          "1543:           {",
          "",
          "[Removed Lines]",
          "1540:           rc = imap_sync_message_for_copy(mdata, ctx->mailbox->hdrs[i],",
          "",
          "[Added Lines]",
          "1540:           rc = imap_sync_message_for_copy(adata, ctx->mailbox->hdrs[i],",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "1547:         }",
          "1548:       }",
          "1551:       if (!rc)",
          "1552:       {",
          "1553:         mutt_debug(1, \"No messages tagged\\n\");",
          "",
          "[Removed Lines]",
          "1550:       rc = imap_exec_msgset(mdata, \"UID COPY\", mmbox, MUTT_TAG, false, false);",
          "",
          "[Added Lines]",
          "1550:       rc = imap_exec_msgset(adata, \"UID COPY\", mmbox, MUTT_TAG, false, false);",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "1573:       if (e->active && e->changed)",
          "1574:       {",
          "1576:         if (rc < 0)",
          "1577:         {",
          "1578:           mutt_debug(1, \"#2 could not sync\\n\");",
          "1579:           goto out;",
          "1580:         }",
          "1581:       }",
          "1583:       if (rc < 0)",
          "1584:       {",
          "1585:         mutt_debug(1, \"#2 could not queue copy\\n\");",
          "",
          "[Removed Lines]",
          "1575:         rc = imap_sync_message_for_copy(mdata, e, &sync_cmd, &err_continue);",
          "1582:       rc = imap_exec(mdata, cmd.data, IMAP_CMD_QUEUE);",
          "",
          "[Added Lines]",
          "1575:         rc = imap_sync_message_for_copy(adata, e, &sync_cmd, &err_continue);",
          "1582:       rc = imap_exec(adata, cmd.data, IMAP_CMD_QUEUE);",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "1588:     }",
          "1592:     if (rc == -2)",
          "1593:     {",
          "1594:       if (triedcreate)",
          "",
          "[Removed Lines]",
          "1591:     rc = imap_exec(mdata, NULL, IMAP_CMD_FAIL_OK);",
          "",
          "[Added Lines]",
          "1591:     rc = imap_exec(adata, NULL, IMAP_CMD_FAIL_OK);",
          "",
          "---------------",
          "--- Hunk 49 ---",
          "[Context before]",
          "1597:         break;",
          "1598:       }",
          "1601:         break;",
          "1602:       mutt_debug(3, \"server suggests TRYCREATE\\n\");",
          "1603:       snprintf(prompt, sizeof(prompt), _(\"Create %s?\"), mbox);",
          "",
          "[Removed Lines]",
          "1600:       if (mutt_str_strncasecmp(imap_get_qualifier(mdata->buf), \"[TRYCREATE]\", 11) != 0)",
          "",
          "[Added Lines]",
          "1600:       if (mutt_str_strncasecmp(imap_get_qualifier(adata->buf), \"[TRYCREATE]\", 11) != 0)",
          "",
          "---------------",
          "--- Hunk 50 ---",
          "[Context before]",
          "1606:         mutt_clear_error();",
          "1607:         goto out;",
          "1608:       }",
          "1610:         break;",
          "1611:       triedcreate = 1;",
          "1612:     }",
          "",
          "[Removed Lines]",
          "1609:       if (imap_create_mailbox(mdata, mbox) < 0)",
          "",
          "[Added Lines]",
          "1609:       if (imap_create_mailbox(adata, mbox) < 0)",
          "",
          "---------------",
          "--- Hunk 51 ---",
          "[Context before]",
          "1615:   if (rc != 0)",
          "1616:   {",
          "1618:     goto out;",
          "1619:   }",
          "",
          "[Removed Lines]",
          "1617:     imap_error(\"imap_copy_messages\", mdata->buf);",
          "",
          "[Added Lines]",
          "1617:     imap_error(\"imap_copy_messages\", adata->buf);",
          "",
          "---------------",
          "--- Hunk 52 ---",
          "[Context before]",
          "1666: {",
          "1668:     return -1;",
          "1671:   char id[64];",
          "1674: }",
          "1682: {",
          "1686:   return 0;",
          "1687: }",
          "",
          "[Removed Lines]",
          "1665: int imap_cache_del(struct ImapMboxData *mdata, struct Email *e)",
          "1667:   if (!mdata || !e)",
          "1670:   mdata->bcache = msg_cache_open(mdata);",
          "1672:   snprintf(id, sizeof(id), \"%u-%u\", mdata->uid_validity, IMAP_EDATA(e)->uid);",
          "1673:   return mutt_bcache_del(mdata->bcache, id);",
          "1681: int imap_cache_clean(struct ImapMboxData *mdata)",
          "1683:   mdata->bcache = msg_cache_open(mdata);",
          "1684:   mutt_bcache_list(mdata->bcache, msg_cache_clean_cb, mdata);",
          "",
          "[Added Lines]",
          "1665: int imap_cache_del(struct ImapAccountData *adata, struct Email *e)",
          "1667:   if (!adata || !e)",
          "1670:   adata->bcache = msg_cache_open(adata);",
          "1672:   snprintf(id, sizeof(id), \"%u-%u\", adata->uid_validity, IMAP_EDATA(e)->uid);",
          "1673:   return mutt_bcache_del(adata->bcache, id);",
          "1681: int imap_cache_clean(struct ImapAccountData *adata)",
          "1683:   adata->bcache = msg_cache_open(adata);",
          "1684:   mutt_bcache_list(adata->bcache, msg_cache_clean_cb, adata);",
          "",
          "---------------",
          "--- Hunk 53 ---",
          "[Context before]",
          "1724: {",
          "1726:   struct ImapHeader newh = { 0 };",
          "1727:   struct ImapEmailData old_edata;",
          "1728:   bool readonly;",
          "",
          "[Removed Lines]",
          "1723: char *imap_set_flags(struct ImapMboxData *mdata, struct Email *e, char *s, int *server_changes)",
          "1725:   struct Context *ctx = mdata->ctx;",
          "",
          "[Added Lines]",
          "1723: char *imap_set_flags(struct ImapAccountData *adata, struct Email *e, char *s, int *server_changes)",
          "1725:   struct Context *ctx = adata->ctx;",
          "",
          "---------------",
          "--- Hunk 54 ---",
          "[Context before]",
          "1797:   bool fetched = false;",
          "1798:   int output_progress;",
          "1801:   struct Email *e = ctx->mailbox->hdrs[msgno];",
          "1804:   if (msg->fp)",
          "1805:   {",
          "1806:     if (IMAP_EDATA(e)->parsed)",
          "",
          "[Removed Lines]",
          "1800:   struct ImapMboxData *mdata = ctx->mailbox->data;",
          "1803:   msg->fp = msg_cache_get(mdata, e);",
          "",
          "[Added Lines]",
          "1800:   struct ImapAccountData *adata = ctx->mailbox->data;",
          "1803:   msg->fp = msg_cache_get(adata, e);",
          "",
          "---------------",
          "--- Hunk 55 ---",
          "[Context before]",
          "1814:   cacheno = IMAP_EDATA(e)->uid % IMAP_CACHE_LEN;",
          "1817:   if (cache->path)",
          "1818:   {",
          "",
          "[Removed Lines]",
          "1815:   cache = &mdata->cache[cacheno];",
          "",
          "[Added Lines]",
          "1815:   cache = &adata->cache[cacheno];",
          "",
          "---------------",
          "--- Hunk 56 ---",
          "[Context before]",
          "1832:   if (output_progress)",
          "1833:     mutt_message(_(\"Fetching message...\"));",
          "1836:   if (!msg->fp)",
          "1837:   {",
          "1838:     cache->uid = IMAP_EDATA(e)->uid;",
          "",
          "[Removed Lines]",
          "1835:   msg->fp = msg_cache_put(mdata, e);",
          "",
          "[Added Lines]",
          "1835:   msg->fp = msg_cache_put(adata, e);",
          "",
          "---------------",
          "--- Hunk 57 ---",
          "[Context before]",
          "1852:   e->active = false;",
          "1854:   snprintf(buf, sizeof(buf), \"UID FETCH %u %s\", IMAP_EDATA(e)->uid,",
          "1856:                 (ImapPeek ? \"BODY.PEEK[]\" : \"BODY[]\") :",
          "1857:                 \"RFC822\"));",
          "1860:   do",
          "1861:   {",
          "1863:     if (rc != IMAP_CMD_CONTINUE)",
          "1864:       break;",
          "1867:     pc = imap_next_word(pc);",
          "1868:     pc = imap_next_word(pc);",
          "",
          "[Removed Lines]",
          "1855:            (mutt_bit_isset(mdata->capabilities, IMAP4REV1) ?",
          "1859:   imap_cmd_start(mdata, buf);",
          "1862:     rc = imap_cmd_step(mdata);",
          "1866:     pc = mdata->buf;",
          "",
          "[Added Lines]",
          "1855:            (mutt_bit_isset(adata->capabilities, IMAP4REV1) ?",
          "1859:   imap_cmd_start(adata, buf);",
          "1862:     rc = imap_cmd_step(adata);",
          "1866:     pc = adata->buf;",
          "",
          "---------------",
          "--- Hunk 58 ---",
          "[Context before]",
          "1899:             mutt_progress_init(&progressbar, _(\"Fetching message...\"),",
          "1900:                                MUTT_PROGRESS_SIZE, NetInc, bytes);",
          "1901:           }",
          "1903:                                 output_progress ? &progressbar : NULL) < 0)",
          "1904:           {",
          "1905:             goto bail;",
          "1906:           }",
          "1909:           if (rc != IMAP_CMD_CONTINUE)",
          "1910:             goto bail;",
          "1913:           fetched = true;",
          "1914:         }",
          "",
          "[Removed Lines]",
          "1902:           if (imap_read_literal(msg->fp, mdata, bytes,",
          "1908:           rc = imap_cmd_step(mdata);",
          "1911:           pc = mdata->buf;",
          "",
          "[Added Lines]",
          "1902:           if (imap_read_literal(msg->fp, adata, bytes,",
          "1908:           rc = imap_cmd_step(adata);",
          "1911:           pc = adata->buf;",
          "",
          "---------------",
          "--- Hunk 59 ---",
          "[Context before]",
          "1919:         else if ((mutt_str_strncasecmp(\"FLAGS\", pc, 5) == 0) && !e->changed)",
          "1920:         {",
          "1922:           if (!pc)",
          "1923:             goto bail;",
          "1924:         }",
          "",
          "[Removed Lines]",
          "1921:           pc = imap_set_flags(mdata, e, pc, NULL);",
          "",
          "[Added Lines]",
          "1921:           pc = imap_set_flags(adata, e, pc, NULL);",
          "",
          "---------------",
          "--- Hunk 60 ---",
          "[Context before]",
          "1939:   if (rc != IMAP_CMD_OK)",
          "1940:     goto bail;",
          "1943:     goto bail;",
          "1947: parsemsg:",
          "",
          "[Removed Lines]",
          "1942:   if (!fetched || !imap_code(mdata->buf))",
          "1945:   msg_cache_commit(mdata, e);",
          "",
          "[Added Lines]",
          "1942:   if (!fetched || !imap_code(adata->buf))",
          "1945:   msg_cache_commit(adata, e);",
          "",
          "---------------",
          "--- Hunk 61 ---",
          "[Context before]",
          "1984:   if (!retried && ((e->lines == 0) || (e->content->length == 0)))",
          "1985:   {",
          "1987:     retried = true;",
          "1988:     goto parsemsg;",
          "1989:   }",
          "",
          "[Removed Lines]",
          "1986:     imap_cache_del(mdata, e);",
          "",
          "[Added Lines]",
          "1986:     imap_cache_del(adata, e);",
          "",
          "---------------",
          "--- Hunk 62 ---",
          "[Context before]",
          "1993: bail:",
          "1994:   mutt_file_fclose(&msg->fp);",
          "1996:   if (cache->path)",
          "1997:   {",
          "1998:     unlink(cache->path);",
          "",
          "[Removed Lines]",
          "1995:   imap_cache_del(mdata, e);",
          "",
          "[Added Lines]",
          "1995:   imap_cache_del(adata, e);",
          "",
          "---------------"
        ],
        "imap/utf7.c||imap/utf7.c": [
          "File: imap/utf7.c -> imap/utf7.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "318: {",
          "319:   if (!Charset || !s)",
          "320:     return;",
          "",
          "[Removed Lines]",
          "317: void imap_utf_encode(struct ImapMboxData *mdata, char **s)",
          "",
          "[Added Lines]",
          "317: void imap_utf_encode(struct ImapAccountData *adata, char **s)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "323:   if (t && (mutt_ch_convert_string(&t, Charset, \"utf-8\", 0) == 0))",
          "324:   {",
          "325:     FREE(s);",
          "328:     else",
          "",
          "[Removed Lines]",
          "326:     if (mdata->unicode)",
          "",
          "[Added Lines]",
          "326:     if (adata->unicode)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "340: {",
          "341:   if (!Charset)",
          "342:     return;",
          "344:   char *t = NULL;",
          "347:     t = mutt_str_strdup(*s);",
          "348:   else",
          "349:     t = utf7_to_utf8(*s, strlen(*s), 0, 0);",
          "",
          "[Removed Lines]",
          "339: void imap_utf_decode(struct ImapMboxData *mdata, char **s)",
          "346:   if (mdata->unicode)",
          "",
          "[Added Lines]",
          "339: void imap_utf_decode(struct ImapAccountData *adata, char **s)",
          "346:   if (adata->unicode)",
          "",
          "---------------"
        ],
        "imap/util.c||imap/util.c": [
          "File: imap/util.c -> imap/util.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "81: int imap_expand_path(char *buf, size_t buflen)",
          "82: {",
          "83:   struct ImapMbox mx;",
          "85:   struct Url url;",
          "86:   char fixedpath[LONG_STRING];",
          "87:   int rc;",
          "",
          "[Removed Lines]",
          "84:   struct ImapMboxData *mdata = NULL;",
          "",
          "[Added Lines]",
          "84:   struct ImapAccountData *adata = NULL;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "89:   if (imap_parse_path(buf, &mx) < 0)",
          "90:     return -1;",
          "93:   mutt_account_tourl(&mx.account, &url);",
          "95:   url.path = fixedpath;",
          "97:   rc = url_tostring(&url, buf, buflen, U_DECODE_PASSWD);",
          "",
          "[Removed Lines]",
          "92:   mdata = imap_conn_find(&mx.account, MUTT_IMAP_CONN_NONEW);",
          "94:   imap_fix_path(mdata, mx.mbox, fixedpath, sizeof(fixedpath));",
          "",
          "[Added Lines]",
          "92:   adata = imap_conn_find(&mx.account, MUTT_IMAP_CONN_NONEW);",
          "94:   imap_fix_path(adata, mx.mbox, fixedpath, sizeof(fixedpath));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "156: void imap_get_parent_path(const char *path, char *buf, size_t buflen)",
          "157: {",
          "158:   struct ImapMbox mx;",
          "160:   char mbox[LONG_STRING] = \"\";",
          "162:   if (imap_parse_path(path, &mx) < 0)",
          "",
          "[Removed Lines]",
          "159:   struct ImapMboxData *mdata = NULL;",
          "",
          "[Added Lines]",
          "159:   struct ImapAccountData *adata = NULL;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "165:     return;",
          "166:   }",
          "170:   {",
          "171:     mutt_str_strfcpy(buf, path, buflen);",
          "172:     return;",
          "173:   }",
          "182:   imap_qualify_path(buf, buflen, &mx, mbox);",
          "",
          "[Removed Lines]",
          "168:   mdata = imap_conn_find(&mx.account, MUTT_IMAP_CONN_NONEW);",
          "169:   if (!mdata)",
          "176:   imap_fix_path(mdata, mx.mbox, mbox, sizeof(mbox));",
          "179:   imap_get_parent(mbox, mdata->delim, mbox, sizeof(mbox));",
          "",
          "[Added Lines]",
          "168:   adata = imap_conn_find(&mx.account, MUTT_IMAP_CONN_NONEW);",
          "169:   if (!adata)",
          "176:   imap_fix_path(adata, mx.mbox, mbox, sizeof(mbox));",
          "179:   imap_get_parent(mbox, adata->delim, mbox, sizeof(mbox));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "193: void imap_clean_path(char *path, size_t plen)",
          "194: {",
          "195:   struct ImapMbox mx;",
          "197:   char mbox[LONG_STRING] = \"\";",
          "199:   if (imap_parse_path(path, &mx) < 0)",
          "200:     return;",
          "204:     return;",
          "210:   imap_qualify_path(path, plen, &mx, mbox);",
          "",
          "[Removed Lines]",
          "196:   struct ImapMboxData *mdata = NULL;",
          "202:   mdata = imap_conn_find(&mx.account, MUTT_IMAP_CONN_NONEW);",
          "203:   if (!mdata)",
          "207:   imap_fix_path(mdata, mx.mbox, mbox, sizeof(mbox));",
          "",
          "[Added Lines]",
          "196:   struct ImapAccountData *adata = NULL;",
          "202:   adata = imap_conn_find(&mx.account, MUTT_IMAP_CONN_NONEW);",
          "203:   if (!adata)",
          "207:   imap_fix_path(adata, mx.mbox, mbox, sizeof(mbox));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "223: {",
          "224:   int first = 1, state = 0;",
          "225:   unsigned int cur_uid = 0, last_uid = 0;",
          "226:   unsigned int range_begin = 0, range_end = 0;",
          "229:   {",
          "230:     bool match = false;",
          "232:     {",
          "234:       cur_uid = cur_header ? IMAP_EDATA(cur_header)->uid : 0;",
          "235:       if (!state || (cur_uid && ((cur_uid - 1) == last_uid)))",
          "236:         match = true;",
          "",
          "[Removed Lines]",
          "222: static void imap_msn_index_to_uid_seqset(struct Buffer *b, struct ImapMboxData *mdata)",
          "228:   for (unsigned int msn = 1; msn <= mdata->max_msn + 1; msn++)",
          "231:     if (msn <= mdata->max_msn)",
          "233:       struct Email *cur_header = mdata->msn_index[msn - 1];",
          "",
          "[Added Lines]",
          "222: static void imap_msn_index_to_uid_seqset(struct Buffer *b, struct ImapAccountData *adata)",
          "228:   for (unsigned int msn = 1; msn <= adata->max_msn + 1; msn++)",
          "231:     if (msn <= adata->max_msn)",
          "233:       struct Email *cur_header = adata->msn_index[msn - 1];",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "290: {",
          "291:   struct ImapMbox mx;",
          "292:   struct Url url;",
          "",
          "[Removed Lines]",
          "289: header_cache_t *imap_hcache_open(struct ImapMboxData *mdata, const char *path)",
          "",
          "[Added Lines]",
          "289: header_cache_t *imap_hcache_open(struct ImapAccountData *adata, const char *path)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "294:   char mbox[PATH_MAX];",
          "296:   if (path)",
          "298:   else",
          "299:   {",
          "301:       return NULL;",
          "304:     FREE(&mx.mbox);",
          "305:   }",
          "",
          "[Removed Lines]",
          "297:     imap_cachepath(mdata, path, mbox, sizeof(mbox));",
          "300:     if (!mdata->ctx || imap_parse_path(mdata->ctx->mailbox->path, &mx) < 0)",
          "303:     imap_cachepath(mdata, mx.mbox, mbox, sizeof(mbox));",
          "",
          "[Added Lines]",
          "297:     imap_cachepath(adata, path, mbox, sizeof(mbox));",
          "300:     if (!adata->ctx || imap_parse_path(adata->ctx->mailbox->path, &mx) < 0)",
          "303:     imap_cachepath(adata, mx.mbox, mbox, sizeof(mbox));",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "310:   if ((len > 3) && (strcmp(mbox + len - 3, \"/..\") == 0))",
          "311:     return NULL;",
          "314:   url.path = mbox;",
          "315:   url_tostring(&url, cachepath, sizeof(cachepath), U_PATH);",
          "",
          "[Removed Lines]",
          "313:   mutt_account_tourl(&mdata->conn->account, &url);",
          "",
          "[Added Lines]",
          "313:   mutt_account_tourl(&adata->conn->account, &url);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "325: {",
          "327:     return;",
          "331: }",
          "341: {",
          "342:   char key[16];",
          "343:   void *uv = NULL;",
          "344:   struct Email *e = NULL;",
          "347:     return NULL;",
          "349:   sprintf(key, \"/%u\", uid);",
          "351:   if (uv)",
          "352:   {",
          "354:       e = mutt_hcache_restore(uv);",
          "355:     else",
          "356:       mutt_debug(3, \"hcache uidvalidity mismatch: %u\\n\", *(unsigned int *) uv);",
          "358:   }",
          "360:   return e;",
          "",
          "[Removed Lines]",
          "324: void imap_hcache_close(struct ImapMboxData *mdata)",
          "326:   if (!mdata->hcache)",
          "329:   mutt_hcache_close(mdata->hcache);",
          "330:   mdata->hcache = NULL;",
          "340: struct Email *imap_hcache_get(struct ImapMboxData *mdata, unsigned int uid)",
          "346:   if (!mdata->hcache)",
          "350:   uv = mutt_hcache_fetch(mdata->hcache, key, imap_hcache_keylen(key));",
          "353:     if (*(unsigned int *) uv == mdata->uid_validity)",
          "357:     mutt_hcache_free(mdata->hcache, &uv);",
          "",
          "[Added Lines]",
          "324: void imap_hcache_close(struct ImapAccountData *adata)",
          "326:   if (!adata->hcache)",
          "329:   mutt_hcache_close(adata->hcache);",
          "330:   adata->hcache = NULL;",
          "340: struct Email *imap_hcache_get(struct ImapAccountData *adata, unsigned int uid)",
          "346:   if (!adata->hcache)",
          "350:   uv = mutt_hcache_fetch(adata->hcache, key, imap_hcache_keylen(key));",
          "353:     if (*(unsigned int *) uv == adata->uid_validity)",
          "357:     mutt_hcache_free(adata->hcache, &uv);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "371: {",
          "372:   char key[16];",
          "375:     return -1;",
          "377:   sprintf(key, \"/%u\", IMAP_EDATA(e)->uid);",
          "379: }",
          "389: {",
          "390:   char key[16];",
          "393:     return -1;",
          "395:   sprintf(key, \"/%u\", uid);",
          "397: }",
          "406: {",
          "408:     return -1;",
          "410:   struct Buffer *b = mutt_buffer_new();",
          "412:   mutt_buffer_increase_size(b, HUGE_STRING);",
          "415:   size_t seqset_size = b->dptr - b->data;",
          "416:   if (seqset_size == 0)",
          "417:     b->data[0] = '\\0';",
          "420:   mutt_debug(5, \"Stored /UIDSEQSET %s\\n\", b->data);",
          "421:   mutt_buffer_free(&b);",
          "422:   return rc;",
          "",
          "[Removed Lines]",
          "370: int imap_hcache_put(struct ImapMboxData *mdata, struct Email *e)",
          "374:   if (!mdata->hcache)",
          "378:   return mutt_hcache_store(mdata->hcache, key, imap_hcache_keylen(key), e, mdata->uid_validity);",
          "388: int imap_hcache_del(struct ImapMboxData *mdata, unsigned int uid)",
          "392:   if (!mdata->hcache)",
          "396:   return mutt_hcache_delete(mdata->hcache, key, imap_hcache_keylen(key));",
          "405: int imap_hcache_store_uid_seqset(struct ImapMboxData *mdata)",
          "407:   if (!mdata->hcache)",
          "413:   imap_msn_index_to_uid_seqset(b, mdata);",
          "419:   int rc = mutt_hcache_store_raw(mdata->hcache, \"/UIDSEQSET\", 10, b->data, seqset_size + 1);",
          "",
          "[Added Lines]",
          "370: int imap_hcache_put(struct ImapAccountData *adata, struct Email *e)",
          "374:   if (!adata->hcache)",
          "378:   return mutt_hcache_store(adata->hcache, key, imap_hcache_keylen(key), e, adata->uid_validity);",
          "388: int imap_hcache_del(struct ImapAccountData *adata, unsigned int uid)",
          "392:   if (!adata->hcache)",
          "396:   return mutt_hcache_delete(adata->hcache, key, imap_hcache_keylen(key));",
          "405: int imap_hcache_store_uid_seqset(struct ImapAccountData *adata)",
          "407:   if (!adata->hcache)",
          "413:   imap_msn_index_to_uid_seqset(b, adata);",
          "419:   int rc = mutt_hcache_store_raw(adata->hcache, \"/UIDSEQSET\", 10, b->data, seqset_size + 1);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "432: {",
          "434:     return -1;",
          "437: }",
          "446: {",
          "448:     return NULL;",
          "451:   char *seqset = mutt_str_strdup(hc_seqset);",
          "453:   mutt_debug(5, \"Retrieved /UIDSEQSET %s\\n\", NONULL(seqset));",
          "455:   return seqset;",
          "",
          "[Removed Lines]",
          "431: int imap_hcache_clear_uid_seqset(struct ImapMboxData *mdata)",
          "433:   if (!mdata->hcache)",
          "436:   return mutt_hcache_delete(mdata->hcache, \"/UIDSEQSET\", 10);",
          "445: char *imap_hcache_get_uid_seqset(struct ImapMboxData *mdata)",
          "447:   if (!mdata->hcache)",
          "450:   char *hc_seqset = mutt_hcache_fetch_raw(mdata->hcache, \"/UIDSEQSET\", 10);",
          "452:   mutt_hcache_free(mdata->hcache, (void **) &hc_seqset);",
          "",
          "[Added Lines]",
          "431: int imap_hcache_clear_uid_seqset(struct ImapAccountData *adata)",
          "433:   if (!adata->hcache)",
          "436:   return mutt_hcache_delete(adata->hcache, \"/UIDSEQSET\", 10);",
          "445: char *imap_hcache_get_uid_seqset(struct ImapAccountData *adata)",
          "447:   if (!adata->hcache)",
          "450:   char *hc_seqset = mutt_hcache_fetch_raw(adata->hcache, \"/UIDSEQSET\", 10);",
          "452:   mutt_hcache_free(adata->hcache, (void **) &hc_seqset);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "701: }",
          "708: {",
          "719: }",
          "726: {",
          "728:     return;",
          "738: }",
          "",
          "[Removed Lines]",
          "707: struct ImapMboxData *imap_mdata_new(void)",
          "709:   struct ImapMboxData *mdata = mutt_mem_calloc(1, sizeof(struct ImapMboxData));",
          "711:   mdata->cmdbuf = mutt_buffer_new();",
          "712:   mdata->cmdslots = ImapPipelineDepth + 2;",
          "713:   mdata->cmds = mutt_mem_calloc(mdata->cmdslots, sizeof(*mdata->cmds));",
          "715:   STAILQ_INIT(&mdata->flags);",
          "716:   STAILQ_INIT(&mdata->mboxcache);",
          "718:   return mdata;",
          "725: void imap_mdata_free(struct ImapMboxData **mdata)",
          "727:   if (!mdata)",
          "730:   FREE(&(*mdata)->capstr);",
          "731:   mutt_list_free(&(*mdata)->flags);",
          "732:   imap_mboxcache_free(*mdata);",
          "733:   mutt_buffer_free(&(*mdata)->cmdbuf);",
          "734:   FREE(&(*mdata)->buf);",
          "735:   mutt_bcache_close(&(*mdata)->bcache);",
          "736:   FREE(&(*mdata)->cmds);",
          "737:   FREE(mdata);",
          "",
          "[Added Lines]",
          "707: struct ImapAccountData *imap_adata_new(void)",
          "709:   struct ImapAccountData *adata = mutt_mem_calloc(1, sizeof(struct ImapAccountData));",
          "711:   adata->cmdbuf = mutt_buffer_new();",
          "712:   adata->cmdslots = ImapPipelineDepth + 2;",
          "713:   adata->cmds = mutt_mem_calloc(adata->cmdslots, sizeof(*adata->cmds));",
          "715:   STAILQ_INIT(&adata->flags);",
          "716:   STAILQ_INIT(&adata->mboxcache);",
          "718:   return adata;",
          "725: void imap_adata_free(struct ImapAccountData **adata)",
          "727:   if (!adata)",
          "730:   FREE(&(*adata)->capstr);",
          "731:   mutt_list_free(&(*adata)->flags);",
          "732:   imap_mboxcache_free(*adata);",
          "733:   mutt_buffer_free(&(*adata)->cmdbuf);",
          "734:   FREE(&(*adata)->buf);",
          "735:   mutt_bcache_close(&(*adata)->bcache);",
          "736:   FREE(&(*adata)->cmds);",
          "737:   FREE(adata);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "755: {",
          "756:   int i = 0;",
          "757:   char delim = '\\0';",
          "762:   while (mailbox && *mailbox && i < plen - 1)",
          "763:   {",
          "764:     if ((ImapDelimChars && strchr(ImapDelimChars, *mailbox)) || (delim && *mailbox == delim))",
          "765:     {",
          "768:         delim = *mailbox;",
          "770:       while (*mailbox && ((ImapDelimChars && strchr(ImapDelimChars, *mailbox)) ||",
          "",
          "[Removed Lines]",
          "754: char *imap_fix_path(struct ImapMboxData *mdata, const char *mailbox, char *path, size_t plen)",
          "759:   if (mdata)",
          "760:     delim = mdata->delim;",
          "767:       if (!mdata)",
          "",
          "[Added Lines]",
          "754: char *imap_fix_path(struct ImapAccountData *adata, const char *mailbox, char *path, size_t plen)",
          "759:   if (adata)",
          "760:     delim = adata->delim;",
          "767:       if (!adata)",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "799: {",
          "800:   char *s = NULL;",
          "801:   const char *p = mailbox;",
          "803:   for (s = dest; p && *p && dlen; dlen--)",
          "804:   {",
          "806:     {",
          "",
          "[Removed Lines]",
          "798: void imap_cachepath(struct ImapMboxData *mdata, const char *mailbox, char *dest, size_t dlen)",
          "805:     if (*p == mdata->delim)",
          "",
          "[Added Lines]",
          "798: void imap_cachepath(struct ImapAccountData *adata, const char *mailbox, char *dest, size_t dlen)",
          "805:     if (*p == adata->delim)",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1001: {",
          "1002:   char *buf = mutt_str_strdup(src);",
          "1005:   imap_quote_string(dest, dlen, buf, false);",
          "",
          "[Removed Lines]",
          "1000: void imap_munge_mbox_name(struct ImapMboxData *mdata, char *dest, size_t dlen, const char *src)",
          "1003:   imap_utf_encode(mdata, &buf);",
          "",
          "[Added Lines]",
          "1000: void imap_munge_mbox_name(struct ImapAccountData *adata, char *dest, size_t dlen, const char *src)",
          "1003:   imap_utf_encode(adata, &buf);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1018: {",
          "1019:   imap_unquote_string(s);",
          "1021:   char *buf = mutt_str_strdup(s);",
          "1022:   if (buf)",
          "1023:   {",
          "1025:     strncpy(s, buf, strlen(s));",
          "1026:   }",
          "",
          "[Removed Lines]",
          "1017: void imap_unmunge_mbox_name(struct ImapMboxData *mdata, char *s)",
          "1024:     imap_utf_decode(mdata, &buf);",
          "",
          "[Added Lines]",
          "1017: void imap_unmunge_mbox_name(struct ImapAccountData *adata, char *s)",
          "1024:     imap_utf_decode(adata, &buf);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1034: void imap_keepalive(void)",
          "1035: {",
          "1036:   struct Connection *conn = NULL;",
          "1038:   time_t now = time(NULL);",
          "1040:   TAILQ_FOREACH(conn, mutt_socket_head(), entries)",
          "1041:   {",
          "1042:     if (conn->account.type == MUTT_ACCT_TYPE_IMAP)",
          "1043:     {",
          "1046:       {",
          "1048:       }",
          "1049:     }",
          "1050:   }",
          "",
          "[Removed Lines]",
          "1037:   struct ImapMboxData *mdata = NULL;",
          "1044:       mdata = conn->data;",
          "1045:       if (mdata->state >= IMAP_AUTHENTICATED && now >= mdata->lastread + ImapKeepalive)",
          "1047:         imap_check(mdata, true);",
          "",
          "[Added Lines]",
          "1037:   struct ImapAccountData *adata = NULL;",
          "1044:       adata = conn->data;",
          "1045:       if (adata->state >= IMAP_AUTHENTICATED && now >= adata->lastread + ImapKeepalive)",
          "1047:         imap_check(adata, true);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1106: void imap_allow_reopen(struct Context *ctx)",
          "1107: {",
          "1109:   if (!ctx || !ctx->mailbox->data || ctx->mailbox->magic != MUTT_IMAP)",
          "1110:     return;",
          "1115: }",
          "",
          "[Removed Lines]",
          "1108:   struct ImapMboxData *mdata = NULL;",
          "1112:   mdata = ctx->mailbox->data;",
          "1113:   if (mdata->ctx == ctx)",
          "1114:     mdata->reopen |= IMAP_REOPEN_ALLOW;",
          "",
          "[Added Lines]",
          "1108:   struct ImapAccountData *adata = NULL;",
          "1112:   adata = ctx->mailbox->data;",
          "1113:   if (adata->ctx == ctx)",
          "1114:     adata->reopen |= IMAP_REOPEN_ALLOW;",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1121: void imap_disallow_reopen(struct Context *ctx)",
          "1122: {",
          "1124:   if (!ctx || !ctx->mailbox || !ctx->mailbox->data || ctx->mailbox->magic != MUTT_IMAP)",
          "1125:     return;",
          "1130: }",
          "",
          "[Removed Lines]",
          "1123:   struct ImapMboxData *mdata = NULL;",
          "1127:   mdata = ctx->mailbox->data;",
          "1128:   if (mdata->ctx == ctx)",
          "1129:     mdata->reopen &= ~IMAP_REOPEN_ALLOW;",
          "",
          "[Added Lines]",
          "1123:   struct ImapAccountData *adata = NULL;",
          "1127:   adata = ctx->mailbox->data;",
          "1128:   if (adata->ctx == ctx)",
          "1129:     adata->reopen &= ~IMAP_REOPEN_ALLOW;",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1138: bool imap_account_match(const struct ConnAccount *a1, const struct ConnAccount *a2)",
          "1139: {",
          "1142:   const struct ConnAccount *a1_canon = a1_idata ? &a1_idata->conn->account : a1;",
          "1143:   const struct ConnAccount *a2_canon = a2_idata ? &a2_idata->conn->account : a2;",
          "",
          "[Removed Lines]",
          "1140:   struct ImapMboxData *a1_idata = imap_conn_find(a1, MUTT_IMAP_CONN_NONEW);",
          "1141:   struct ImapMboxData *a2_idata = imap_conn_find(a2, MUTT_IMAP_CONN_NONEW);",
          "",
          "[Added Lines]",
          "1140:   struct ImapAccountData *a1_idata = imap_conn_find(a1, MUTT_IMAP_CONN_NONEW);",
          "1141:   struct ImapAccountData *a2_idata = imap_conn_find(a2, MUTT_IMAP_CONN_NONEW);",
          "",
          "---------------"
        ]
      }
    }
  ]
}