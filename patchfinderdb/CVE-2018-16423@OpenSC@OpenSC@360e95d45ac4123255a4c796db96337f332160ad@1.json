{
  "cve_id": "CVE-2018-16423",
  "cve_desc": "A double free when handling responses from a smartcard in sc_file_set_sec_attr in libopensc/sc.c in OpenSC before 0.19.0-rc1 could be used by attackers able to supply crafted smartcards to cause a denial of service (application crash) or possibly have unspecified other impact.",
  "repo": "OpenSC/OpenSC",
  "patch_hash": "360e95d45ac4123255a4c796db96337f332160ad",
  "patch_info": {
    "commit_hash": "360e95d45ac4123255a4c796db96337f332160ad",
    "repo": "OpenSC/OpenSC",
    "commit_url": "https://github.com/OpenSC/OpenSC/commit/360e95d45ac4123255a4c796db96337f332160ad",
    "files": [
      "src/libopensc/card-cac.c",
      "src/libopensc/card-epass2003.c",
      "src/libopensc/card-muscle.c",
      "src/libopensc/card-tcos.c",
      "src/libopensc/pkcs15-esteid.c",
      "src/libopensc/pkcs15-gemsafeV1.c",
      "src/libopensc/pkcs15-sc-hsm.c",
      "src/libopensc/sc.c",
      "src/tools/cryptoflex-tool.c",
      "src/tools/egk-tool.c",
      "src/tools/util.c"
    ],
    "message": "fixed out of bounds writes\n\nThanks to Eric Sesterhenn from X41 D-SEC GmbH\nfor reporting the problems.",
    "before_after_code_files": [
      "src/libopensc/card-cac.c||src/libopensc/card-cac.c",
      "src/libopensc/card-epass2003.c||src/libopensc/card-epass2003.c",
      "src/libopensc/card-muscle.c||src/libopensc/card-muscle.c",
      "src/libopensc/card-tcos.c||src/libopensc/card-tcos.c",
      "src/libopensc/pkcs15-esteid.c||src/libopensc/pkcs15-esteid.c",
      "src/libopensc/pkcs15-gemsafeV1.c||src/libopensc/pkcs15-gemsafeV1.c",
      "src/libopensc/pkcs15-sc-hsm.c||src/libopensc/pkcs15-sc-hsm.c",
      "src/libopensc/sc.c||src/libopensc/sc.c",
      "src/tools/cryptoflex-tool.c||src/tools/cryptoflex-tool.c",
      "src/tools/egk-tool.c||src/tools/egk-tool.c",
      "src/tools/util.c||src/tools/util.c"
    ]
  },
  "patch_diff": {
    "src/libopensc/card-cac.c||src/libopensc/card-cac.c": [
      "File: src/libopensc/card-cac.c -> src/libopensc/card-cac.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "794:         }",
      "795:  if (priv->cac_id_len) {",
      "796:   serial->len = MIN(priv->cac_id_len, SC_MAX_SERIALNR);",
      "798:   SC_FUNC_RETURN(card->ctx, SC_LOG_DEBUG_NORMAL, SC_SUCCESS);",
      "799:  }",
      "800:  SC_FUNC_RETURN(card->ctx, SC_LOG_DEBUG_NORMAL, SC_ERROR_FILE_NOT_FOUND);",
      "",
      "[Removed Lines]",
      "797:   memcpy(serial->value, priv->cac_id, priv->cac_id_len);",
      "",
      "[Added Lines]",
      "797:   memcpy(serial->value, priv->cac_id, serial->len);",
      "",
      "---------------"
    ],
    "src/libopensc/card-epass2003.c||src/libopensc/card-epass2003.c": [
      "File: src/libopensc/card-epass2003.c -> src/libopensc/card-epass2003.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "951:  while (0x80 != plaintext[cipher_len - 2] && (cipher_len - 2 > 0))",
      "952:   cipher_len--;",
      "955:   return -1;",
      "957:  memcpy(out, plaintext, cipher_len - 2);",
      "",
      "[Removed Lines]",
      "954:  if (2 == cipher_len)",
      "",
      "[Added Lines]",
      "954:  if (2 == cipher_len || *out_len < cipher_len - 2)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "977:  r = sc_check_sw(card, sm->sw1, sm->sw2);",
      "978:  if (r == SC_SUCCESS) {",
      "979:   if (exdata->sm) {",
      "980:    if (0 != decrypt_response(card, sm->resp, sm->resplen, plain->resp, &len))",
      "981:     return SC_ERROR_CARD_CMD_FAILED;",
      "982:   }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "980:    len = plain->resplen;",
      "",
      "---------------"
    ],
    "src/libopensc/card-muscle.c||src/libopensc/card-muscle.c": [
      "File: src/libopensc/card-muscle.c -> src/libopensc/card-muscle.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "518:  mscfs_check_cache(priv->fs);",
      "520:  for(x = 0; x < fs->cache.size; x++) {",
      "522:   sc_debug(card->ctx, SC_LOG_DEBUG_NORMAL,",
      "523:    \"FILE: %02X%02X%02X%02X\\n\",",
      "524:    oid[0],oid[1],oid[2],oid[3]);",
      "",
      "[Removed Lines]",
      "521:   u8* oid= fs->cache.array[x].objectId.id;",
      "",
      "[Added Lines]",
      "521:   u8* oid = fs->cache.array[x].objectId.id;",
      "522:   if (bufLen < 2)",
      "523:    break;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "527:    buf[1] = oid[3];",
      "529:    buf += 2;",
      "531:   }",
      "532:  }",
      "533:  return count;",
      "",
      "[Removed Lines]",
      "530:    count+=2;",
      "",
      "[Added Lines]",
      "532:    count += 2;",
      "533:    bufLen -= 2;",
      "",
      "---------------"
    ],
    "src/libopensc/card-tcos.c||src/libopensc/card-tcos.c": [
      "File: src/libopensc/card-tcos.c -> src/libopensc/card-tcos.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "408:  file->path = *in_path;",
      "410:  for(i=2; i+1<apdu.resplen && i+1+apdu.resp[i+1]<apdu.resplen; i+=2+apdu.resp[i+1]){",
      "412:   unsigned char type=apdu.resp[i], *d=apdu.resp+i+2;",
      "414:   switch (type) {",
      "",
      "[Removed Lines]",
      "411:   int j, len=apdu.resp[i+1];",
      "",
      "[Added Lines]",
      "411:   size_t j, len=apdu.resp[i+1];",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "432:    file->id = (d[0]<<8) | d[1];",
      "433:    break;",
      "434:   case 0x84:",
      "437:    break;",
      "438:   case 0x86:",
      "439:    sc_file_set_sec_attr(file, d, len);",
      "",
      "[Removed Lines]",
      "435:    memcpy(file->name, d, len);",
      "436:    file->namelen = len;",
      "",
      "[Added Lines]",
      "435:    file->namelen = MIN(sizeof file->name, len);",
      "436:    memcpy(file->name, d, file->namelen);",
      "",
      "---------------"
    ],
    "src/libopensc/pkcs15-esteid.c||src/libopensc/pkcs15-esteid.c": [
      "File: src/libopensc/pkcs15-esteid.c -> src/libopensc/pkcs15-esteid.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "80:  r = sc_read_record (card, SC_ESTEID_PD_DOCUMENT_NR, buff, sizeof(buff), SC_RECORD_BY_REC_NR);",
      "81:  SC_TEST_RET(card->ctx, SC_LOG_DEBUG_NORMAL, r, \"read document number failed\");",
      "83:  set_string (&p15card->tokeninfo->serial_number, (const char *) buff);",
      "85:  p15card->tokeninfo->flags = SC_PKCS15_TOKEN_PRN_GENERATION",
      "",
      "[Removed Lines]",
      "82:  buff[r] = '\\0';",
      "",
      "[Added Lines]",
      "82:  buff[MIN((size_t) r, (sizeof buff)-1)] = '\\0';",
      "",
      "---------------"
    ],
    "src/libopensc/pkcs15-gemsafeV1.c||src/libopensc/pkcs15-gemsafeV1.c": [
      "File: src/libopensc/pkcs15-gemsafeV1.c -> src/libopensc/pkcs15-gemsafeV1.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "212:   if (ibuf[ind+1] == 0xFE) {",
      "213:    gemsafe_prkeys[i].ref = ibuf[ind+4];",
      "214:    sc_log(card->ctx, \"Key container %d is allocated and uses key_ref %d\",",
      "",
      "[Removed Lines]",
      "211:  while (ibuf[ind] == 0x01) {",
      "",
      "[Added Lines]",
      "211:  while (ibuf[ind] == 0x01 && i < gemsafe_cert_max) {",
      "",
      "---------------"
    ],
    "src/libopensc/pkcs15-sc-hsm.c||src/libopensc/pkcs15-sc-hsm.c": [
      "File: src/libopensc/pkcs15-sc-hsm.c -> src/libopensc/pkcs15-sc-hsm.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "837:   r = read_file(p15card, (u8 *) \"\\x2F\\x02\", efbin, &len, 1);",
      "838:   LOG_TEST_RET(card->ctx, r, \"Skipping optional EF.C_DevAut\");",
      "846:   }",
      "848:   ptr = efbin;",
      "",
      "[Removed Lines]",
      "841:   ptr = realloc(priv->EF_C_DevAut, len);",
      "842:   if (ptr) {",
      "843:    memcpy(ptr, efbin, len);",
      "844:    priv->EF_C_DevAut = ptr;",
      "845:    priv->EF_C_DevAut_len = len;",
      "",
      "[Added Lines]",
      "840:   if (len > 0) {",
      "842:    ptr = realloc(priv->EF_C_DevAut, len);",
      "843:    if (ptr) {",
      "844:     memcpy(ptr, efbin, len);",
      "845:     priv->EF_C_DevAut = ptr;",
      "846:     priv->EF_C_DevAut_len = len;",
      "847:    }",
      "",
      "---------------"
    ],
    "src/libopensc/sc.c||src/libopensc/sc.c": [
      "File: src/libopensc/sc.c -> src/libopensc/sc.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "628:   return SC_ERROR_INVALID_ARGUMENTS;",
      "629:  }",
      "632:   if (file->sec_attr != NULL)",
      "633:    free(file->sec_attr);",
      "634:   file->sec_attr = NULL;",
      "",
      "[Removed Lines]",
      "631:  if (sec_attr == NULL) {",
      "",
      "[Added Lines]",
      "631:  if (sec_attr == NULL || sec_attr_len) {",
      "",
      "---------------"
    ],
    "src/tools/cryptoflex-tool.c||src/tools/cryptoflex-tool.c": [
      "File: src/tools/cryptoflex-tool.c -> src/tools/cryptoflex-tool.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "21: #include \"config.h\"",
      "23: #include \"libopensc/sc-ossl-compat.h\"",
      "24: #include <openssl/bn.h>",
      "25: #include <openssl/rsa.h>",
      "26: #include <openssl/x509.h>",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "24: #include \"libopensc/internal.h\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "331:   fprintf(stderr, \"Unable to select public key file: %s\\n\", sc_strerror(r));",
      "332:   return 2;",
      "333:  }",
      "335:  sc_file_free(file);",
      "336:  r = sc_read_binary(card, 0, buf, bufsize, 0);",
      "337:  if (r < 0) {",
      "",
      "[Removed Lines]",
      "334:  bufsize = file->size;",
      "",
      "[Added Lines]",
      "335:  bufsize = MIN(file->size, sizeof buf);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "382:  e = sc_file_get_acl_entry(file, SC_AC_OP_READ);",
      "383:  if (e == NULL || e->method == SC_AC_NEVER)",
      "384:   return 10;",
      "386:  sc_file_free(file);",
      "387:  r = sc_read_binary(card, 0, buf, bufsize, 0);",
      "388:  if (r < 0) {",
      "",
      "[Removed Lines]",
      "385:  bufsize = file->size;",
      "",
      "[Added Lines]",
      "386:  bufsize = MIN(file->size, sizeof buf);",
      "",
      "---------------"
    ],
    "src/tools/egk-tool.c||src/tools/egk-tool.c": [
      "File: src/tools/egk-tool.c -> src/tools/egk-tool.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "149:   goto err;",
      "150:  }",
      "153:  p = realloc(*data, len);",
      "154:  if (!p) {",
      "155:   goto err;",
      "",
      "[Removed Lines]",
      "152:  len = file ? file->size : 4096;",
      "",
      "[Added Lines]",
      "152:  len = file && file->size > 0 ? file->size : 4096;",
      "",
      "---------------"
    ],
    "src/tools/util.c||src/tools/util.c": [
      "File: src/tools/util.c -> src/tools/util.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "339:    strcpy(buf, \"????\");",
      "340:    break;",
      "341:   }",
      "344:   e = e->next;",
      "345:  }",
      "347:  return line;",
      "348: }",
      "",
      "[Removed Lines]",
      "342:   strcat(line, buf);",
      "343:   strcat(line, \" \");",
      "",
      "[Added Lines]",
      "342:   strncat(line, buf, sizeof line);",
      "343:   strncat(line, \" \", sizeof line);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "92a98cb3bb1719b0100b033aae1c3c1f2679e7c8",
      "candidate_info": {
        "commit_hash": "92a98cb3bb1719b0100b033aae1c3c1f2679e7c8",
        "repo": "OpenSC/OpenSC",
        "commit_url": "https://github.com/OpenSC/OpenSC/commit/92a98cb3bb1719b0100b033aae1c3c1f2679e7c8",
        "files": [
          "src/libopensc/card-mcrd.c"
        ],
        "message": "mcrd: converted assert to proper error handling",
        "before_after_code_files": [
          "src/libopensc/card-mcrd.c||src/libopensc/card-mcrd.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/OpenSC/OpenSC/pull/1447"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/libopensc/card-mcrd.c||src/libopensc/card-mcrd.c": [
          "File: src/libopensc/card-mcrd.c -> src/libopensc/card-mcrd.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "149:  struct mcrd_priv_data *priv = DRVDATA(card);",
          "150:  struct df_info_s *dfi;",
          "154:  if (!priv->curpathlen) {",
          "155:   sc_log(ctx, \"no current path to find the df_info\\n\");",
          "",
          "[Removed Lines]",
          "152:  assert(!priv->is_ef);",
          "",
          "[Added Lines]",
          "152:  if(!(!priv->is_ef))",
          "153:   return NULL;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "202:  int r;",
          "203:  u8 sbuf[SC_MAX_APDU_BUFFER_SIZE];",
          "206:  sc_format_apdu(card, &apdu, SC_APDU_CASE_3_SHORT, 0x22, 0x41, 0xA4);",
          "208:  sbuf[0] = 0x83;",
          "",
          "[Removed Lines]",
          "205:  assert(card != NULL);",
          "",
          "[Added Lines]",
          "206:  if(!(card != NULL))",
          "207:   return SC_ERROR_INTERNAL;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "220:  sc_apdu_t apdu;",
          "221:  int r;",
          "222:  u8 sbuf[SC_MAX_APDU_BUFFER_SIZE];",
          "225:  sc_format_apdu(card, &apdu, SC_APDU_CASE_3_SHORT, 0x22, 0x41, 0xB6);",
          "",
          "[Removed Lines]",
          "223:  assert(card != NULL);",
          "",
          "[Added Lines]",
          "225:  if(!(card != NULL))",
          "226:   return SC_ERROR_INTERNAL;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "242:  int r;",
          "243:  u8 sbuf[SC_MAX_APDU_BUFFER_SIZE];",
          "244:  u8 keyref_data[SC_ESTEID_KEYREF_FILE_RECLEN];",
          "247:  sc_format_apdu(card, &apdu, SC_APDU_CASE_3_SHORT, 0x22, 0x41, 0xB8);",
          "",
          "[Removed Lines]",
          "245:  assert(card != NULL);",
          "",
          "[Added Lines]",
          "248:  if(!(card != NULL))",
          "249:   return SC_ERROR_INTERNAL;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "957:  SC_FUNC_CALLED(card->ctx, SC_LOG_DEBUG_VERBOSE);",
          "961:  if (pathlen && *pathptr == 0x3FFF) {",
          "962:   pathlen--;",
          "",
          "[Removed Lines]",
          "959:  assert(!priv->curpathlen || priv->curpath[0] == MFID);",
          "",
          "[Added Lines]",
          "963:  if (!(!priv->curpathlen || priv->curpath[0] == MFID))",
          "964:   return SC_ERROR_INTERNAL;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "998:        we need to get the FCI, so we have",
          "1001:     priv->curpathlen--;",
          "1002:     priv->is_ef = 0;",
          "1003:     r = select_down(card, pathptr + pathlen - 1, 1,",
          "",
          "[Removed Lines]",
          "1000:     assert(priv->curpathlen > 1);",
          "",
          "[Added Lines]",
          "1005:     if (!(priv->curpathlen > 1))",
          "1006:      return SC_ERROR_INTERNAL;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1022:    priv->is_ef = 0;",
          "1023:   }",
          "1024:   if (priv->is_ef) {",
          "1026:    priv->curpathlen--;",
          "1027:    priv->is_ef = 0;",
          "1028:   }",
          "",
          "[Removed Lines]",
          "1025:    assert(priv->curpathlen > 1);",
          "",
          "[Added Lines]",
          "1031:    if(!(priv->curpathlen > 1))",
          "1032:     return SC_ERROR_INTERNAL;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1041:  SC_FUNC_CALLED(card->ctx, SC_LOG_DEBUG_VERBOSE);",
          "1045:  if (pathlen > 1)",
          "1046:   return SC_ERROR_INVALID_ARGUMENTS;",
          "",
          "[Removed Lines]",
          "1043:  assert(!priv->curpathlen || priv->curpath[0] == MFID);",
          "",
          "[Added Lines]",
          "1050:  if (!(!priv->curpathlen || priv->curpath[0] == MFID))",
          "1051:   return SC_ERROR_INTERNAL;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1057:    r = SC_ERROR_INTERNAL;",
          "1058:   } else {",
          "1060:    priv->curpathlen--;",
          "1061:    priv->is_ef = 0;",
          "1062:    r = select_down(card, pathptr, 1, 0, file);",
          "",
          "[Removed Lines]",
          "1059:    assert(priv->curpathlen > 1);",
          "",
          "[Added Lines]",
          "1067:    if (!(priv->curpathlen > 1))",
          "1068:     return SC_ERROR_INTERNAL;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1081:    priv->is_ef = 0;",
          "1082:   }",
          "1083:   if (priv->is_ef) {",
          "1085:    priv->curpathlen--;",
          "1086:    priv->is_ef = 0;",
          "1087:   }",
          "",
          "[Removed Lines]",
          "1084:    assert(priv->curpathlen > 1);",
          "",
          "[Added Lines]",
          "1093:    if (!(priv->curpathlen > 1))",
          "1094:     return SC_ERROR_INTERNAL;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1209:  u8 *p;",
          "1210:  int r, locked = 0;",
          "1213:  SC_FUNC_CALLED(card->ctx, SC_LOG_DEBUG_NORMAL);",
          "",
          "[Removed Lines]",
          "1212:  assert(card != NULL && env != NULL);",
          "",
          "[Added Lines]",
          "1222:  if (!(card != NULL && env != NULL))",
          "1223:   return SC_ERROR_INTERNAL;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "78f005533818e5920a563bb5949c1a647d786090",
      "candidate_info": {
        "commit_hash": "78f005533818e5920a563bb5949c1a647d786090",
        "repo": "OpenSC/OpenSC",
        "commit_url": "https://github.com/OpenSC/OpenSC/commit/78f005533818e5920a563bb5949c1a647d786090",
        "files": [
          "src/libopensc/pkcs15-tcos.c"
        ],
        "message": "fixed uninitialized use of variable",
        "before_after_code_files": [
          "src/libopensc/pkcs15-tcos.c||src/libopensc/pkcs15-tcos.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/OpenSC/OpenSC/pull/1447"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/libopensc/pkcs15-tcos.c||src/libopensc/pkcs15-tcos.c": [
          "File: src/libopensc/pkcs15-tcos.c -> src/libopensc/pkcs15-tcos.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "132:   int i, rec_no=0;",
          "133:   if(prkey_info.path.len>=2) prkey_info.path.len-=2;",
          "134:   sc_append_file_id(&prkey_info.path, 0x5349);",
          "136:    sc_debug(ctx, SC_LOG_DEBUG_NORMAL,",
          "137:     \"Select(%s) failed\\n\",",
          "138:     sc_print_path(&prkey_info.path));",
          "",
          "[Removed Lines]",
          "135:   if(sc_select_file(card, &prkey_info.path, NULL)!=SC_SUCCESS || !f->prop_attr){",
          "",
          "[Added Lines]",
          "135:   if(sc_select_file(card, &prkey_info.path, NULL)!=SC_SUCCESS){",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5ec26573da7e6f21364d40c5c74962ef60a07000",
      "candidate_info": {
        "commit_hash": "5ec26573da7e6f21364d40c5c74962ef60a07000",
        "repo": "OpenSC/OpenSC",
        "commit_url": "https://github.com/OpenSC/OpenSC/commit/5ec26573da7e6f21364d40c5c74962ef60a07000",
        "files": [
          "src/libopensc/card-coolkey.c"
        ],
        "message": "coolkey: Do not overflow allocated buffer",
        "before_after_code_files": [
          "src/libopensc/card-coolkey.c||src/libopensc/card-coolkey.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/OpenSC/OpenSC/pull/1447"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/libopensc/card-coolkey.c||src/libopensc/card-coolkey.c": [
          "File: src/libopensc/card-coolkey.c -> src/libopensc/card-coolkey.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1129:  do {",
          "1130:   ulong2bebytes(&params.offset[0], offset);",
          "1131:   params.length = MIN(left, COOLKEY_MAX_CHUNK_SIZE);",
          "1133:   r = coolkey_apdu_io(card, COOLKEY_CLASS, COOLKEY_INS_READ_OBJECT, 0, 0,",
          "1134:    (u8 *)&params, sizeof(params), &out_ptr, &len, nonce, nonce_size);",
          "1135:   if (r < 0) {",
          "",
          "[Removed Lines]",
          "1132:   len = left+2;",
          "",
          "[Added Lines]",
          "1132:   len = left;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d5d15105dd4cc91e54c86efbd75f07c6f21bb281",
      "candidate_info": {
        "commit_hash": "d5d15105dd4cc91e54c86efbd75f07c6f21bb281",
        "repo": "OpenSC/OpenSC",
        "commit_url": "https://github.com/OpenSC/OpenSC/commit/d5d15105dd4cc91e54c86efbd75f07c6f21bb281",
        "files": [
          "src/libopensc/card-cac.c"
        ],
        "message": "cac: Ignore end of content errors (#7)\n\nThe CAC buffers are split to separate TL and V buffers so we need to ignore this error",
        "before_after_code_files": [
          "src/libopensc/card-cac.c||src/libopensc/card-cac.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/OpenSC/OpenSC/pull/1447"
        ],
        "olp_code_files": {
          "patch": [
            "src/libopensc/card-cac.c||src/libopensc/card-cac.c"
          ],
          "candidate": [
            "src/libopensc/card-cac.c||src/libopensc/card-cac.c"
          ]
        }
      },
      "candidate_diff": {
        "src/libopensc/card-cac.c||src/libopensc/card-cac.c": [
          "File: src/libopensc/card-cac.c -> src/libopensc/card-cac.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "637:     val_len -= len, tlv_len -= len, val_ptr += len, tlv_ptr += len) {",
          "639:    tl_start = tl_ptr;",
          "641:     break;",
          "642:    tl_head_len = (tl_ptr - tl_start);",
          "643:    sc_simpletlv_put_tag(tag, len, tlv_ptr, tlv_len, &tlv_ptr);",
          "",
          "[Removed Lines]",
          "640:    if (sc_simpletlv_read_tag(&tl_ptr, tl_len, &tag, &len) != SC_SUCCESS)",
          "",
          "[Added Lines]",
          "640:    r = sc_simpletlv_read_tag(&tl_ptr, tl_len, &tag, &len);",
          "641:    if (r != SC_SUCCESS && r != SC_ERROR_TLV_END_OF_CONTENTS)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "648:    if (val_len < len) {",
          "649:     len = val_len;",
          "650:    }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "650:     sc_log(card->ctx, \"Received too long value %\"SC_FORMAT_LEN_SIZE_T\"u, \"",
          "651:         \"while only %\"SC_FORMAT_LEN_SIZE_T\"u left. Truncating\", len, val_len);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "667:   for (tl_ptr = tl, val_ptr = val; tl_len >= 2;",
          "668:       val_len -= len, val_ptr += len, tl_len -= tl_head_len) {",
          "669:    tl_start = tl_ptr;",
          "671:     break;",
          "672:    tl_head_len = tl_ptr - tl_start;",
          "676:     break;",
          "678:    if (tag == CAC_TAG_CERTIFICATE) {",
          "679:     cert_len = len;",
          "",
          "[Removed Lines]",
          "670:    if (sc_simpletlv_read_tag(&tl_ptr, tl_len, &tag, &len) != SC_SUCCESS)",
          "675:    if (val_len < len)",
          "",
          "[Added Lines]",
          "673:    r = sc_simpletlv_read_tag(&tl_ptr, tl_len, &tag, &len);",
          "674:    if (r != SC_SUCCESS && r != SC_ERROR_TLV_END_OF_CONTENTS)",
          "679:    if (val_len < len) {",
          "680:     sc_log(card->ctx, \"Read incomplete value %\"SC_FORMAT_LEN_SIZE_T\"u, \"",
          "681:         \"while only %\"SC_FORMAT_LEN_SIZE_T\"u left\", len, val_len);",
          "683:    }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "687:    if (tag == CAC_TAG_MSCUID) {",
          "688:     sc_log_hex(card->ctx, \"MSCUID\", val_ptr, len);",
          "689:    }",
          "693:   }",
          "695:   if ((cert_type & 0x3) == 1) {",
          "",
          "[Removed Lines]",
          "690:    if ((val_len < len) || (tl_len < tl_head_len)) {",
          "691:     break;",
          "692:    }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5807368ed44a6feb78e6107eaa2f337d474a8d36",
      "candidate_info": {
        "commit_hash": "5807368ed44a6feb78e6107eaa2f337d474a8d36",
        "repo": "OpenSC/OpenSC",
        "commit_url": "https://github.com/OpenSC/OpenSC/commit/5807368ed44a6feb78e6107eaa2f337d474a8d36",
        "files": [
          "src/libopensc/card-cac.c"
        ],
        "message": "fixed bad memory access",
        "before_after_code_files": [
          "src/libopensc/card-cac.c||src/libopensc/card-cac.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/OpenSC/OpenSC/pull/1447"
        ],
        "olp_code_files": {
          "patch": [
            "src/libopensc/card-cac.c||src/libopensc/card-cac.c"
          ],
          "candidate": [
            "src/libopensc/card-cac.c||src/libopensc/card-cac.c"
          ]
        }
      },
      "candidate_diff": {
        "src/libopensc/card-cac.c||src/libopensc/card-cac.c": [
          "File: src/libopensc/card-cac.c -> src/libopensc/card-cac.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1390:  }",
          "1391:  sc_mem_clear(path, sizeof(sc_path_t));",
          "1392:  memcpy(path->aid.value, &val->rid, sizeof(val->rid));",
          "1394:  path->aid.len = sizeof(val->rid) + sizeof(val->applicationID);",
          "1396:  path->len = sizeof(val->objectID);",
          "1397:  path->type = SC_PATH_TYPE_FILE_ID;",
          "1398:  sc_debug(card->ctx, SC_LOG_DEBUG_VERBOSE,",
          "",
          "[Removed Lines]",
          "1393:  memcpy(&path->aid.value[5], &val->applicationID, sizeof(val->applicationID));",
          "1395:  memcpy(path->value, &val->objectID, sizeof(val->objectID));",
          "",
          "[Added Lines]",
          "1393:  memcpy(&path->aid.value[5], val->applicationID, sizeof(val->applicationID));",
          "1395:  memcpy(path->value, val->objectID, sizeof(val->objectID));",
          "",
          "---------------"
        ]
      }
    }
  ]
}