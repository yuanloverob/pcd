{
  "cve_id": "CVE-2021-20223",
  "cve_desc": "",
  "repo": "sqlite/sqlite",
  "patch_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
  "patch_info": {
    "commit_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "files": [
      "ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Prevent fts5 tokenizer unicode61 from considering '\\0' to be a token characters, even if other characters of class \"Cc\" are.\n\nFossilOrigin-Name: b7b7bde9b7a03665e3691c6d51118965f216d2dfb1617f138b9f9e60e418ed2f",
    "before_after_code_files": [
      "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
      "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c"
    ],
    "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test": [
      "File: ext/fts5/test/fts5tok1.test -> ext/fts5/test/fts5tok1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:   SELECT * FROM t4;",
      "112: } {1 {SQL logic error}}",
      "115: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114: #-------------------------------------------------------------------------",
      "115: # Embedded 0x00 characters.",
      "116: #",
      "117: reset_db",
      "118: do_execsql_test 3.1.0 {",
      "119:   CREATE VIRTUAL TABLE t1 USING fts5(z);",
      "120:   CREATE VIRTUAL TABLE tt USING fts5vocab(t1, 'instance');",
      "121:   INSERT INTO t1 VALUES('abc' || char(0) || 'def');",
      "122:   SELECT * FROM tt;",
      "123: } { abc 1 z 0 def 1 z 1 }",
      "124: do_execsql_test 3.1.1 {",
      "125:   SELECT hex(z) FROM t1;",
      "126: } {61626300646566}",
      "127: do_execsql_test 3.1.2 {",
      "128:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "129: } {}",
      "131: do_execsql_test 3.2.0 {",
      "132:   CREATE VIRTUAL TABLE t2 USING fts5(z,",
      "133:       tokenize=\"unicode61 categories 'L* N* Co Cc'\"",
      "134:   );",
      "135:   CREATE VIRTUAL TABLE tu USING fts5vocab(t2, 'instance');",
      "137:   INSERT INTO t2 VALUES('abc' || char(0) || 'def');",
      "138:   SELECT * FROM tu;",
      "139: } { abc 1 z 0 def 1 z 1 }",
      "141: do_execsql_test 3.2.1 {",
      "142:   SELECT hex(z) FROM t1;",
      "143: } {61626300646566}",
      "145: do_execsql_test 3.2.2 {",
      "146:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "147: } {}",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 0e7e113d9f2c929c1f8a85e2cfad8e2e60f0e8770212b5e5320fb2a2c42911f8",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "646975c521f3d857b449f441b5b586e7124b499c",
      "candidate_info": {
        "commit_hash": "646975c521f3d857b449f441b5b586e7124b499c",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/646975c521f3d857b449f441b5b586e7124b499c",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/alter.c"
        ],
        "message": "Clean up the ExprList that holds the names of columns in a CTE before checking for unused references in the ALTER TABLE implementation.\n\nFossilOrigin-Name: 8223e79f987feda5c8e51ec52cec6798cca16d070b10558939e2888ca1a25b8e",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/alter.c||src/alter.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 0271491438ad2a985aeff355173a8d0f1e5813954c82147bc68cb26cca5804c8",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/alter.c||src/alter.c": [
          "File: src/alter.c -> src/alter.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "742: static void renameWalkWith(Walker *pWalker, Select *pSelect){",
          "744:     int i;",
          "747:       NameContext sNC;",
          "748:       memset(&sNC, 0, sizeof(sNC));",
          "749:       sNC.pParse = pWalker->pParse;",
          "750:       sqlite3SelectPrep(sNC.pParse, p, &sNC);",
          "751:       sqlite3WalkSelect(pWalker, p);",
          "752:     }",
          "753:   }",
          "754: }",
          "",
          "[Removed Lines]",
          "743:   if( pSelect->pWith ){",
          "745:     for(i=0; i<pSelect->pWith->nCte; i++){",
          "746:       Select *p = pSelect->pWith->a[i].pSelect;",
          "",
          "[Added Lines]",
          "743:   With *pWith = pSelect->pWith;",
          "744:   if( pWith ){",
          "746:     for(i=0; i<pWith->nCte; i++){",
          "747:       Select *p = pWith->a[i].pSelect;",
          "753:       sqlite3RenameExprlistUnmap(pWalker->pParse, pWith->a[i].pCols);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d8f2d46cbc9925e034a68aaaf60aad788d9373c1",
      "candidate_info": {
        "commit_hash": "d8f2d46cbc9925e034a68aaaf60aad788d9373c1",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/d8f2d46cbc9925e034a68aaaf60aad788d9373c1",
        "files": [
          "ext/misc/zipfile.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Fix the zipfile() function in the zipfile extension so that it is able to deal with goofy filenames that contain embedded zeros.\n\nFossilOrigin-Name: cc0fb00a128fd0773db5ff7891f7aa577a3671d570166d2cbb30df922344adcf",
        "before_after_code_files": [
          "ext/misc/zipfile.c||ext/misc/zipfile.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/misc/zipfile.c||ext/misc/zipfile.c": [
          "File: ext/misc/zipfile.c -> ext/misc/zipfile.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1632:         zFree = sqlite3_mprintf(\"%s/\", zPath);",
          "1633:         if( zFree==0 ){ rc = SQLITE_NOMEM; }",
          "1634:         zPath = (const char*)zFree;",
          "1636:       }",
          "1637:     }",
          "",
          "[Removed Lines]",
          "1635:         nPath++;",
          "",
          "[Added Lines]",
          "1635:         nPath = (int)strlen(zPath);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2033:   }else{",
          "2034:     if( zName[nName-1]!='/' ){",
          "2035:       zName = zFree = sqlite3_mprintf(\"%s/\", zName);",
          "2037:       if( zName==0 ){",
          "2038:         rc = SQLITE_NOMEM;",
          "2039:         goto zipfile_step_out;",
          "2040:       }",
          "2041:     }else{",
          "2042:       while( nName>1 && zName[nName-2]=='/' ) nName--;",
          "2043:     }",
          "",
          "[Removed Lines]",
          "2036:       nName++;",
          "",
          "[Added Lines]",
          "2040:       nName = (int)strlen(zName);",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 4c50afafce8416369f89477ba7fe7d9b047399a5ee5754c73d0e67bbea8d877c",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a513e591ae72d296d68a8d84eec80d72bc2f2bd9",
      "candidate_info": {
        "commit_hash": "a513e591ae72d296d68a8d84eec80d72bc2f2bd9",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/a513e591ae72d296d68a8d84eec80d72bc2f2bd9",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/treeview.c"
        ],
        "message": "Debugging enhancment:  Show the Expr.y.pTab pointer on TK_COLUMN nodes of an expression tree in the treeview.\n\nFossilOrigin-Name: 64154ac450e4366d18e7e867841877a69c1f978d3ba9b8754cc133248966731d",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/treeview.c||src/treeview.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 0b9d8a1202c4220fd2ef299b6194533c1bf4018a0cd2d13da7e22c1a7de05ffa",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/treeview.c||src/treeview.c": [
          "File: src/treeview.c -> src/treeview.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "432:         sqlite3TreeViewLine(pView, \"COLUMN(%d)%s%s\",",
          "433:                                     pExpr->iColumn, zFlgs, zOp2);",
          "434:       }else{",
          "437:       }",
          "438:       if( ExprHasProperty(pExpr, EP_FixedCol) ){",
          "439:         sqlite3TreeViewExpr(pView, pExpr->pLeft, 0);",
          "",
          "[Removed Lines]",
          "435:         sqlite3TreeViewLine(pView, \"{%d:%d}%s\",",
          "436:                              pExpr->iTable, pExpr->iColumn, zFlgs);",
          "",
          "[Added Lines]",
          "435:         sqlite3TreeViewLine(pView, \"{%d:%d} pTab=%p%s\",",
          "436:                         pExpr->iTable, pExpr->iColumn,",
          "437:                         pExpr->y.pTab, zFlgs);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "278b0517d88d4150830a4ee2c628a55da40d186d",
      "candidate_info": {
        "commit_hash": "278b0517d88d4150830a4ee2c628a55da40d186d",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/278b0517d88d4150830a4ee2c628a55da40d186d",
        "files": [
          "ext/misc/cksumvfs.c",
          "manifest",
          "manifest.uuid",
          "src/sqlite.h.in",
          "src/wal.c"
        ],
        "message": "Add the SQLITE_FCNTL_CKPT_START file-control and use it to optimize the cksumvfs extension.\n\nFossilOrigin-Name: efdecb13091316aeac2722f58577cb0314e008e857f2816a2a222bac0a83e9e1",
        "before_after_code_files": [
          "ext/misc/cksumvfs.c||ext/misc/cksumvfs.c",
          "manifest.uuid||manifest.uuid",
          "src/sqlite.h.in||src/sqlite.h.in",
          "src/wal.c||src/wal.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/misc/cksumvfs.c||ext/misc/cksumvfs.c": [
          "File: ext/misc/cksumvfs.c -> ext/misc/cksumvfs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "366:   return pFile->pMethods->xClose(pFile);",
          "367: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "374: static void cksmSetFlags(CksmFile *p, int hasCorrectReserveSize){",
          "375:   if( hasCorrectReserveSize!=p->computeCksm ){",
          "376:     p->computeCksm = p->verifyCksm = hasCorrectReserveSize;",
          "377:     if( p->pPartner ){",
          "378:       p->pPartner->verifyCksm = hasCorrectReserveSize;",
          "379:       p->pPartner->computeCksm = hasCorrectReserveSize;",
          "380:     }",
          "381:   }",
          "382: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "383:     if( iOfst==0 && iAmt>=100 && memcmp(zBuf,\"SQLite format 3\",16)==0 ){",
          "384:       u8 *d = (u8*)zBuf;",
          "385:       char hasCorrectReserveSize = (d[20]==8);",
          "389:     }",
          "398:     ){",
          "399:       u8 cksum[8];",
          "400:       cksmCompute((u8*)zBuf, iAmt-8, cksum);",
          "",
          "[Removed Lines]",
          "386:       if( hasCorrectReserveSize!=p->computeCksm ){",
          "387:         p->computeCksm = p->verifyCksm = hasCorrectReserveSize;",
          "388:       }",
          "",
          "[Added Lines]",
          "401:       cksmSetFlags(p, hasCorrectReserveSize);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "423:   if( iOfst==0 && iAmt>=100 && memcmp(zBuf,\"SQLite format 3\",16)==0 ){",
          "424:     u8 *d = (u8*)zBuf;",
          "425:     char hasCorrectReserveSize = (d[20]==8);",
          "429:   }",
          "",
          "[Removed Lines]",
          "426:     if( hasCorrectReserveSize!=p->computeCksm ){",
          "427:       p->computeCksm = p->verifyCksm = hasCorrectReserveSize;",
          "428:     }",
          "",
          "[Added Lines]",
          "440:     cksmSetFlags(p, hasCorrectReserveSize);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "437:     cksmCompute((u8*)zBuf, iAmt-8, ((u8*)zBuf)+iAmt-8);",
          "438:   }",
          "439:   return pFile->pMethods->xWrite(pFile, zBuf, iAmt, iOfst);",
          "",
          "[Removed Lines]",
          "436:   if( iAmt>=512 && p->computeCksm ){",
          "",
          "[Added Lines]",
          "448:   if( iAmt>=512",
          "449:    && p->computeCksm",
          "450:    && !p->inCkpt",
          "451:   ){",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "510:         }else{",
          "511:           p->verifyCksm = 0;",
          "512:         }",
          "513:       }",
          "514:       azArg[0] = sqlite3_mprintf(\"%d\",p->verifyCksm);",
          "515:       return SQLITE_OK;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "528:         if( p->pPartner ) p->pPartner->verifyCksm = p->verifyCksm;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "519:       return SQLITE_OK;",
          "520:     }",
          "521:   }",
          "522:   rc = pFile->pMethods->xFileControl(pFile, op, pArg);",
          "523:   if( rc==SQLITE_OK && op==SQLITE_FCNTL_VFSNAME ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "537:   }else if( op==SQLITE_FCNTL_CKPT_START || op==SQLITE_FCNTL_CKPT_DONE ){",
          "538:     p->inCkpt = op==SQLITE_FCNTL_CKPT_START;",
          "539:     if( p->pPartner ) p->pPartner->inCkpt = p->inCkpt;",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 812547525d35df975f40cbbeb604cc9cd2dec809c1ca083cbb139fe59ffa1d73",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/sqlite.h.in||src/sqlite.h.in": [
          "File: src/sqlite.h.in -> src/sqlite.h.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "1155: #define SQLITE_FCNTL_SIZE_LIMIT             36",
          "1156: #define SQLITE_FCNTL_CKPT_DONE              37",
          "1157: #define SQLITE_FCNTL_RESERVE_BYTES          38",
          "1160: #define SQLITE_GET_LOCKPROXYFILE      SQLITE_FCNTL_GET_LOCKPROXYFILE",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1163: #define SQLITE_FCNTL_CKPT_START             39",
          "",
          "---------------"
        ],
        "src/wal.c||src/wal.c": [
          "File: src/wal.c -> src/wal.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1868:       if( rc==SQLITE_OK ){",
          "1869:         i64 nReq = ((i64)mxPage * szPage);",
          "1871:         rc = sqlite3OsFileSize(pWal->pDbFd, &nSize);",
          "1872:         if( rc==SQLITE_OK && nSize<nReq ){",
          "1873:           sqlite3OsFileControlHint(pWal->pDbFd, SQLITE_FCNTL_SIZE_HINT, &nReq);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1871:         sqlite3OsFileControl(pWal->pDbFd, SQLITE_FCNTL_CKPT_START, 0);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1895:         rc = sqlite3OsWrite(pWal->pDbFd, zBuf, szPage, iOffset);",
          "1896:         if( rc!=SQLITE_OK ) break;",
          "1897:       }",
          "1900:       if( rc==SQLITE_OK ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1899:       sqlite3OsFileControl(pWal->pDbFd, SQLITE_FCNTL_CKPT_DONE, 0);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1906:             rc = sqlite3OsSync(pWal->pDbFd, CKPT_SYNC_FLAGS(sync_flags));",
          "1907:           }",
          "1908:         }",
          "1913:         if( rc==SQLITE_OK ){",
          "1914:           pInfo->nBackfill = mxSafeFrame;",
          "1915:         }",
          "",
          "[Removed Lines]",
          "1909:         if( rc==SQLITE_OK ){",
          "1910:           rc = sqlite3OsFileControl(pWal->pDbFd, SQLITE_FCNTL_CKPT_DONE, 0);",
          "1911:           if( rc==SQLITE_NOTFOUND ) rc = SQLITE_OK;",
          "1912:         }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cdfadc79484ad4ea8e3a5dfe0f635f3ad5f03b7e",
      "candidate_info": {
        "commit_hash": "cdfadc79484ad4ea8e3a5dfe0f635f3ad5f03b7e",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/cdfadc79484ad4ea8e3a5dfe0f635f3ad5f03b7e",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/main.c"
        ],
        "message": "Minor changes for consistency between sqlite3_filename_wal() and sqlite3_filename_journal().\n\nFossilOrigin-Name: 9a70ff43a7b6848a71d5049f5a4ae24e3eb8a83d5c6651f5a9937abf03b3eccf",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/main.c||src/main.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: bcb43d11c4d0be36888c9e968ccdf85e7d7fccd72a29866f85c014e0562d4b93",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/main.c||src/main.c": [
          "File: src/main.c -> src/main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4335:   return sqlite3_uri_parameter(zFilename - 3, \"\\003\");",
          "4336: }",
          "4337: const char *sqlite3_filename_journal(const char *zFilename){",
          "4339: }",
          "4340: const char *sqlite3_filename_wal(const char *zFilename){",
          "4341:   return sqlite3_uri_parameter(startOfNameList(zFilename), \"\\002\");",
          "",
          "[Removed Lines]",
          "4338:   return sqlite3_uri_parameter(startOfNameList(zFilename), \"\\001\");",
          "",
          "[Added Lines]",
          "4338:   const char *z = sqlite3_uri_parameter(startOfNameList(zFilename), \"\\001\");",
          "4339:   return ALWAYS(z) && z[0] ? z : 0;",
          "",
          "---------------"
        ]
      }
    }
  ]
}