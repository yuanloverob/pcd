{
  "cve_id": "CVE-2014-8483",
  "cve_desc": "The blowfishECB function in core/cipher.cpp in Quassel IRC 0.10.0 allows remote attackers to cause a denial of service (out-of-bounds read) via a malformed string.",
  "repo": "quassel/quassel",
  "patch_hash": "8b5ecd226f9208af3074b33d3b7cf5e14f55b138",
  "patch_info": {
    "commit_hash": "8b5ecd226f9208af3074b33d3b7cf5e14f55b138",
    "repo": "quassel/quassel",
    "commit_url": "https://github.com/quassel/quassel/commit/8b5ecd226f9208af3074b33d3b7cf5e14f55b138",
    "files": [
      "src/core/cipher.cpp"
    ],
    "message": "Check for invalid input in encrypted buffers\n\nThe ECB Blowfish decryption function assumed that encrypted input would\nalways come in blocks of 12 characters, as specified. However, buggy\nclients or annoying people may not adhere to that assumption, causing\nthe core to crash while trying to process the invalid base64 input.\n\nWith this commit we make sure that we're not overstepping the bounds of\nthe input string while decoding it; instead we bail out early and display\nthe original input. Fixes #1314.\n\nThanks to Tucos for finding that one!",
    "before_after_code_files": [
      "src/core/cipher.cpp||src/core/cipher.cpp"
    ]
  },
  "patch_diff": {
    "src/core/cipher.cpp||src/core/cipher.cpp": [
      "File: src/core/cipher.cpp -> src/core/cipher.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "364:     }",
      "365:     else",
      "366:     {",
      "367:         temp = b64ToByte(temp);",
      "368:         while ((temp.length() % 8) != 0) temp.append('\\0');",
      "369:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "368:         if ((temp.length() % 12) != 0)",
      "369:             return cipherText;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "376:     if (!cipher.ok())",
      "377:         return cipherText;",
      "380:         temp2 = byteToB64(temp2);",
      "382:     return temp2;",
      "383: }",
      "",
      "[Removed Lines]",
      "379:     if (direction)",
      "",
      "[Added Lines]",
      "383:     if (direction) {",
      "385:         if ((temp2.length() % 8) != 0)",
      "386:             return cipherText;",
      "389:     }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "6b2d80b85a521392b3a34c902ab8ef85899f9cb6",
      "candidate_info": {
        "commit_hash": "6b2d80b85a521392b3a34c902ab8ef85899f9cb6",
        "repo": "quassel/quassel",
        "commit_url": "https://github.com/quassel/quassel/commit/6b2d80b85a521392b3a34c902ab8ef85899f9cb6",
        "files": [
          "src/core/cipher.cpp"
        ],
        "message": "Check for invalid input in encrypted buffers\n\nThe ECB Blowfish decryption function assumed that encrypted input would\nalways come in blocks of 12 characters, as specified. However, buggy\nclients or annoying people may not adhere to that assumption, causing\nthe core to crash while trying to process the invalid base64 input.\n\nWith this commit we make sure that we're not overstepping the bounds of\nthe input string while decoding it; instead we bail out early and display\nthe original input. Fixes #1314.\n\nThanks to Tucos for finding that one!",
        "before_after_code_files": [
          "src/core/cipher.cpp||src/core/cipher.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/core/cipher.cpp||src/core/cipher.cpp"
          ],
          "candidate": [
            "src/core/cipher.cpp||src/core/cipher.cpp"
          ]
        }
      },
      "candidate_diff": {
        "src/core/cipher.cpp||src/core/cipher.cpp": [
          "File: src/core/cipher.cpp -> src/core/cipher.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "364:     }",
          "365:     else",
          "366:     {",
          "367:         temp = b64ToByte(temp);",
          "368:         while ((temp.length() % 8) != 0) temp.append('\\0');",
          "369:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "368:         if ((temp.length() % 12) != 0)",
          "369:             return cipherText;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "376:     if (!cipher.ok())",
          "377:         return cipherText;",
          "380:         temp2 = byteToB64(temp2);",
          "382:     return temp2;",
          "383: }",
          "",
          "[Removed Lines]",
          "379:     if (direction)",
          "",
          "[Added Lines]",
          "383:     if (direction) {",
          "385:         if ((temp2.length() % 8) != 0)",
          "386:             return cipherText;",
          "389:     }",
          "",
          "---------------"
        ]
      }
    }
  ]
}