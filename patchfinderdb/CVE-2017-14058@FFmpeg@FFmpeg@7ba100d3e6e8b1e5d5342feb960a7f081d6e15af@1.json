{
  "cve_id": "CVE-2017-14058",
  "cve_desc": "In FFmpeg 2.4 and 3.3.3, the read_data function in libavformat/hls.c does not restrict reload attempts for an insufficient list, which allows remote attackers to cause a denial of service (infinite loop).",
  "repo": "FFmpeg/FFmpeg",
  "patch_hash": "7ba100d3e6e8b1e5d5342feb960a7f081d6e15af",
  "patch_info": {
    "commit_hash": "7ba100d3e6e8b1e5d5342feb960a7f081d6e15af",
    "repo": "FFmpeg/FFmpeg",
    "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/7ba100d3e6e8b1e5d5342feb960a7f081d6e15af",
    "files": [
      "doc/demuxers.texi",
      "libavformat/hls.c"
    ],
    "message": "avformat/hls: Fix DoS due to infinite loop\n\nFixes: loop.m3u\n\nThe default max iteration count of 1000 is arbitrary and ideas for a better solution are welcome\n\nFound-by: Xiaohei and Wangchu from Alibaba Security Team\n\nPrevious version reviewed-by: Steven Liu <lingjiujianke@gmail.com>\nSigned-off-by: Michael Niedermayer <michael@niedermayer.cc>\n(cherry picked from commit 7ec414892ddcad88313848494b6fc5f437c9ca4a)\nSigned-off-by: Michael Niedermayer <michael@niedermayer.cc>",
    "before_after_code_files": [
      "libavformat/hls.c||libavformat/hls.c"
    ]
  },
  "patch_diff": {
    "libavformat/hls.c||libavformat/hls.c": [
      "File: libavformat/hls.c -> libavformat/hls.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "181:     char *cookies;                       ///< holds HTTP cookie values set in either the initial response or as an AVOption to the HTTP protocol context",
      "182:     char *headers;                       ///< holds HTTP headers set as an AVOption to the HTTP protocol context",
      "183:     char *allowed_extensions;",
      "184: } HLSContext;",
      "186: static int read_chomp_line(AVIOContext *s, char *buf, int maxlen)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "184:     int max_reload;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1042:     HLSContext *c = v->parent->priv_data;",
      "1043:     int ret, i;",
      "1044:     int just_opened = 0;",
      "1046: restart:",
      "1047:     if (!v->needed)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1046:     int reload_count = 0;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1072:         reload_interval = default_reload_interval(v);",
      "1074: reload:",
      "1075:         if (!v->finished &&",
      "1076:             av_gettime() - v->last_load_time >= reload_interval) {",
      "1077:             if ((ret = parse_playlist(c, v->url, v, NULL)) < 0) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1077:         reload_count++;",
      "1078:         if (reload_count > c->max_reload)",
      "1079:             return AVERROR_EOF;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1747:         OFFSET(allowed_extensions), AV_OPT_TYPE_STRING,",
      "1748:         {.str = \"3gp,aac,avi,flac,mkv,m3u8,m4a,m4s,m4v,mpg,mov,mp2,mp3,mp4,mpeg,mpegts,ogg,ogv,oga,ts,vob,wav\"},",
      "1749:         INT_MIN, INT_MAX, FLAGS},",
      "1750:     {NULL}",
      "1751: };",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1755:     {\"max_reload\", \"Maximum number of times a insufficient list is attempted to be reloaded\",",
      "1756:         OFFSET(max_reload), AV_OPT_TYPE_INT, {.i64 = 1000}, 0, INT_MAX, FLAGS},",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b9fa2a86e6ddb26d3104521c4d54a6e5ded92a25",
      "candidate_info": {
        "commit_hash": "b9fa2a86e6ddb26d3104521c4d54a6e5ded92a25",
        "repo": "FFmpeg/FFmpeg",
        "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/b9fa2a86e6ddb26d3104521c4d54a6e5ded92a25",
        "files": [
          "doc/demuxers.texi",
          "libavformat/hls.c"
        ],
        "message": "avformat/hls: Fix DoS due to infinite loop\n\nFixes: loop.m3u\n\nThe default max iteration count of 1000 is arbitrary and ideas for a better solution are welcome\n\nFound-by: Xiaohei and Wangchu from Alibaba Security Team\n\nPrevious version reviewed-by: Steven Liu <lingjiujianke@gmail.com>\nSigned-off-by: Michael Niedermayer <michael@niedermayer.cc>\n(cherry picked from commit 7ec414892ddcad88313848494b6fc5f437c9ca4a)\nSigned-off-by: Michael Niedermayer <michael@niedermayer.cc>",
        "before_after_code_files": [
          "libavformat/hls.c||libavformat/hls.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "libavformat/hls.c||libavformat/hls.c"
          ],
          "candidate": [
            "libavformat/hls.c||libavformat/hls.c"
          ]
        }
      },
      "candidate_diff": {
        "libavformat/hls.c||libavformat/hls.c": [
          "File: libavformat/hls.c -> libavformat/hls.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "201:     AVDictionary *avio_opts;",
          "202:     int strict_std_compliance;",
          "203:     char *allowed_extensions;",
          "204: } HLSContext;",
          "206: static int read_chomp_line(AVIOContext *s, char *buf, int maxlen)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "204:     int max_reload;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1254:     HLSContext *c = v->parent->priv_data;",
          "1255:     int ret, i;",
          "1256:     int just_opened = 0;",
          "1258: restart:",
          "1259:     if (!v->needed)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1258:     int reload_count = 0;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1285:         reload_interval = default_reload_interval(v);",
          "1287: reload:",
          "1288:         if (!v->finished &&",
          "1289:             av_gettime_relative() - v->last_load_time >= reload_interval) {",
          "1290:             if ((ret = parse_playlist(c, v->url, v, NULL)) < 0) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1290:         reload_count++;",
          "1291:         if (reload_count > c->max_reload)",
          "1292:             return AVERROR_EOF;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2021:         OFFSET(allowed_extensions), AV_OPT_TYPE_STRING,",
          "2022:         {.str = \"3gp,aac,avi,flac,mkv,m3u8,m4a,m4s,m4v,mpg,mov,mp2,mp3,mp4,mpeg,mpegts,ogg,ogv,oga,ts,vob,wav\"},",
          "2023:         INT_MIN, INT_MAX, FLAGS},",
          "2024:     {NULL}",
          "2025: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2029:     {\"max_reload\", \"Maximum number of times a insufficient list is attempted to be reloaded\",",
          "2030:         OFFSET(max_reload), AV_OPT_TYPE_INT, {.i64 = 1000}, 0, INT_MAX, FLAGS},",
          "",
          "---------------"
        ]
      }
    }
  ]
}