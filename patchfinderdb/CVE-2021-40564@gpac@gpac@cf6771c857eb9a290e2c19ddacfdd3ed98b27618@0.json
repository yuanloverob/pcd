{
  "cve_id": "CVE-2021-40564",
  "cve_desc": "A Segmentation fault caused by null pointer dereference vulnerability eists in Gpac through 1.0.2 via the avc_parse_slice function in av_parsers.c when using mp4box, which causes a denial of service.",
  "repo": "gpac/gpac",
  "patch_hash": "cf6771c857eb9a290e2c19ddacfdd3ed98b27618",
  "patch_info": {
    "commit_hash": "cf6771c857eb9a290e2c19ddacfdd3ed98b27618",
    "repo": "gpac/gpac",
    "commit_url": "https://github.com/gpac/gpac/commit/cf6771c857eb9a290e2c19ddacfdd3ed98b27618",
    "files": [
      "src/media_tools/av_parsers.c"
    ],
    "message": "fixed #1898",
    "before_after_code_files": [
      "src/media_tools/av_parsers.c||src/media_tools/av_parsers.c"
    ]
  },
  "patch_diff": {
    "src/media_tools/av_parsers.c||src/media_tools/av_parsers.c": [
      "File: src/media_tools/av_parsers.c -> src/media_tools/av_parsers.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "4705:  }",
      "4707:  if (nb_lead) {",
      "4708:   val = gf_bs_read_int(bs, nb_lead);",
      "4710:   bits += nb_lead;",
      "4711:  }",
      "",
      "[Removed Lines]",
      "4709:   val += (1 << nb_lead) - 1;",
      "",
      "[Added Lines]",
      "4708:   u32 leads=1;",
      "4710:   leads <<= nb_lead;",
      "4711:   leads -= 1;",
      "4712:   val += leads;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "5671:  if (si->slice_type > 9) return -1;",
      "5673:  pps_id = gf_bs_read_ue_log(bs, \"pps_id\");",
      "5675:  si->pps = &avc->pps[pps_id];",
      "5676:  if (!si->pps->slice_group_count) return -2;",
      "5677:  si->sps = &avc->sps[si->pps->sps_id];",
      "",
      "[Removed Lines]",
      "5674:  if (pps_id > 255) return -1;",
      "",
      "[Added Lines]",
      "5678:  if ((pps_id<0) || (pps_id > 255)) return -1;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "020ca151321a9692a28e63c88f1dbbe9deca9813",
      "candidate_info": {
        "commit_hash": "020ca151321a9692a28e63c88f1dbbe9deca9813",
        "repo": "gpac/gpac",
        "commit_url": "https://github.com/gpac/gpac/commit/020ca151321a9692a28e63c88f1dbbe9deca9813",
        "files": [
          "src/media_tools/av_parsers.c",
          "testsuite"
        ],
        "message": "cleanup of exp-golomb read for safer eos detection",
        "before_after_code_files": [
          "src/media_tools/av_parsers.c||src/media_tools/av_parsers.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/media_tools/av_parsers.c||src/media_tools/av_parsers.c"
          ],
          "candidate": [
            "src/media_tools/av_parsers.c||src/media_tools/av_parsers.c"
          ]
        }
      },
      "candidate_diff": {
        "src/media_tools/av_parsers.c||src/media_tools/av_parsers.c": [
          "File: src/media_tools/av_parsers.c -> src/media_tools/av_parsers.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4680: #ifndef GPAC_DISABLE_AV_PARSERS",
          "4702: u32 gf_bs_read_ue_log_idx3(GF_BitStream *bs, const char *fname, s32 idx1, s32 idx2, s32 idx3)",
          "4703: {",
          "4717:    return 0;",
          "4718:   }",
          "4721:  }",
          "4726:  if (fname) {",
          "4728:  }",
          "4729:  return val;",
          "4730: }",
          "4731: #define gf_bs_read_ue_log_idx2(_bs, _fname, _idx1, _idx2) gf_bs_read_ue_log_idx3(_bs, _fname, (s32) _idx1, (s32) _idx2, -1)",
          "4732: #define gf_bs_read_ue_log_idx(_bs, _fname, _idx) gf_bs_read_ue_log_idx3(_bs, _fname, (s32) _idx, -1, -1)",
          "4733: #define gf_bs_read_ue_log(_bs, _fname) gf_bs_read_ue_log_idx3(_bs, _fname, -1, -1, -1)",
          "",
          "[Removed Lines]",
          "4683: static u8 avc_golomb_bits[256] = {",
          "4684:  8, 7, 6, 6, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 3,",
          "4685:  3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2,",
          "4686:  2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,",
          "4687:  2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1,",
          "4688:  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,",
          "4689:  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,",
          "4690:  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,",
          "4691:  1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,",
          "4692:  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,",
          "4693:  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,",
          "4694:  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,",
          "4695:  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,",
          "4696:  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,",
          "4697:  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,",
          "4698:  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,",
          "4699:  0",
          "4700: };",
          "4704:  u8 coded;",
          "4705:  u32 val;",
          "4706:  u32 bits = 0, read = 0;",
          "4707:  while (1) {",
          "4708:   u32 nb_bits = gf_bs_bits_available(bs);",
          "4709:   if (nb_bits>8) nb_bits = 8;",
          "4711:   read = gf_bs_peek_bits(bs, 8, 0);",
          "4712:   if (read) break;",
          "4714:   if (!gf_bs_available(bs)) {",
          "4716:    GF_LOG(GF_LOG_DEBUG, GF_LOG_CODING, (\"[AVC/HEVC] Not enough bits in bitstream !!\\n\"));",
          "4719:   gf_bs_read_int(bs, 8);",
          "4720:   bits += 8;",
          "4722:  coded = avc_golomb_bits[read];",
          "4723:  gf_bs_read_int(bs, coded);",
          "4724:  bits += coded;",
          "4725:  val = gf_bs_read_int(bs, bits + 1) - 1;",
          "4727:   gf_bs_log_idx(bs, bits+1, fname, val, idx1, idx2, idx3);",
          "",
          "[Added Lines]",
          "4684:  u32 val=0, code;",
          "4685:  s32 nb_lead = -1;",
          "4686:  u32 bits = 0;",
          "4687:  for (code=0; !code; nb_lead++) {",
          "4688:   if (nb_lead>=32) {",
          "4691:    if (!gf_bs_available(bs)) {",
          "4692:     GF_LOG(GF_LOG_ERROR, GF_LOG_CODING, (\"[Core] exp-golomb read failed, not enough bits in bitstream !\\n\"));",
          "4693:    } else {",
          "4694:     GF_LOG(GF_LOG_ERROR, GF_LOG_CODING, (\"[Core] corrupted exp-golomb code, %d leading zeros, max 31 allowed !\\n\", nb_lead));",
          "4695:    }",
          "4699:   code = gf_bs_read_int(bs, 1);",
          "4700:   bits++;",
          "4701:  }",
          "4703:  if (nb_lead) {",
          "4704:   val = gf_bs_read_int(bs, nb_lead);",
          "4705:   val += (1 << nb_lead) - 1;",
          "4706:   bits += nb_lead;",
          "4710:   gf_bs_log_idx(bs, bits, fname, val, idx1, idx2, idx3);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "31423d2a7a3a993a6ad343429c50d6ae334a462a",
      "candidate_info": {
        "commit_hash": "31423d2a7a3a993a6ad343429c50d6ae334a462a",
        "repo": "gpac/gpac",
        "commit_url": "https://github.com/gpac/gpac/commit/31423d2a7a3a993a6ad343429c50d6ae334a462a",
        "files": [
          "applications/mp4box/fileimport.c",
          "include/gpac/internal/media_dev.h",
          "share/doc/man/gpac-filters.1",
          "share/doc/man/gpac.1",
          "share/doc/man/mp4box.1",
          "share/doc/man/mp4client.1",
          "src/filters/hevcmerge.c",
          "src/filters/hevcsplit.c",
          "src/filters/inspect.c",
          "src/filters/isoffin_read.c",
          "src/filters/reframe_nalu.c",
          "src/media_tools/av_parsers.c",
          "src/utils/bitstream.c",
          "testsuite"
        ],
        "message": "added logging to avparsers and exposed them in inspect analyse mode",
        "before_after_code_files": [
          "applications/mp4box/fileimport.c||applications/mp4box/fileimport.c",
          "include/gpac/internal/media_dev.h||include/gpac/internal/media_dev.h",
          "src/filters/hevcmerge.c||src/filters/hevcmerge.c",
          "src/filters/hevcsplit.c||src/filters/hevcsplit.c",
          "src/filters/inspect.c||src/filters/inspect.c",
          "src/filters/isoffin_read.c||src/filters/isoffin_read.c",
          "src/filters/reframe_nalu.c||src/filters/reframe_nalu.c",
          "src/media_tools/av_parsers.c||src/media_tools/av_parsers.c",
          "src/utils/bitstream.c||src/utils/bitstream.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/media_tools/av_parsers.c||src/media_tools/av_parsers.c"
          ],
          "candidate": [
            "src/media_tools/av_parsers.c||src/media_tools/av_parsers.c"
          ]
        }
      },
      "candidate_diff": {
        "applications/mp4box/fileimport.c||applications/mp4box/fileimport.c": [
          "File: applications/mp4box/fileimport.c -> applications/mp4box/fileimport.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "215:   }",
          "216:  }",
          "217:  fprintf(stderr, \"\\n\");",
          "219:  if (!found && trackID) fprintf(stderr, \"Cannot find track %d in file\\n\", trackID);",
          "220: }",
          "",
          "[Removed Lines]",
          "218:  fprintf(stderr, \"For more details, use `gpac -i %s inspect[:deep][:analyze]`\\n\", gf_file_basename(inName));",
          "",
          "[Added Lines]",
          "218:  fprintf(stderr, \"For more details, use `gpac -i %s inspect[:deep][:analyze=on|bs]`\\n\", gf_file_basename(inName));",
          "",
          "---------------"
        ],
        "include/gpac/internal/media_dev.h||include/gpac/internal/media_dev.h": [
          "File: include/gpac/internal/media_dev.h -> include/gpac/internal/media_dev.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "63: u32 gf_media_nalu_emulation_bytes_remove_count(const u8 *buffer, u32 nal_size);",
          "64: u32 gf_media_nalu_remove_emulation_bytes(const u8 *buffer_src, u8 *buffer_dst, u32 nal_size);",
          "71: enum",
          "72: {",
          "",
          "[Removed Lines]",
          "66: u32 gf_bs_get_ue(GF_BitStream *bs);",
          "67: s32 gf_bs_get_se(GF_BitStream *bs);",
          "68: void gf_bs_set_ue(GF_BitStream *bs, u32 num);",
          "69: void gf_bs_set_se(GF_BitStream *bs, s32 num);",
          "",
          "[Added Lines]",
          "66: u32 gf_bs_read_ue(GF_BitStream *bs);",
          "67: s32 gf_bs_read_se(GF_BitStream *bs);",
          "68: void gf_bs_write_ue(GF_BitStream *bs, u32 num);",
          "69: void gf_bs_write_se(GF_BitStream *bs, s32 num);",
          "",
          "---------------"
        ],
        "src/filters/hevcmerge.c||src/filters/hevcmerge.c": [
          "File: src/filters/hevcmerge.c -> src/filters/hevcmerge.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "157:  gf_bs_write_int(ctx->bs_nal_out, gf_bs_read_int(ctx->bs_nal_in, 16), 16);",
          "160:  gf_bs_write_int(ctx->bs_nal_out, gf_bs_read_int(ctx->bs_nal_in, 7), 7); //from dependent_slice_segments_enabled_flag to cabac_init_present_flag",
          "164:  gf_bs_write_int(ctx->bs_nal_out, gf_bs_read_int(ctx->bs_nal_in, 2), 2); //from constrained_intra_pred_flag to transform_skip_enabled_flag",
          "165:  cu_qp_delta_enabled_flag = gf_bs_read_int(ctx->bs_nal_in, 1); //cu_qp_delta_enabled_flag",
          "166:  gf_bs_write_int(ctx->bs_nal_out, cu_qp_delta_enabled_flag, 1); //",
          "167:  if (cu_qp_delta_enabled_flag)",
          "171:  gf_bs_write_int(ctx->bs_nal_out, gf_bs_read_int(ctx->bs_nal_in, 4), 4); // from pps_slice_chroma_qp_offsets_present_flag to transquant_bypass_enabled_flag",
          "174:  gf_bs_read_int(ctx->bs_nal_in, 1);",
          "175:  gf_bs_write_int(ctx->bs_nal_out, 1, 1);",
          "176:  gf_bs_write_int(ctx->bs_nal_out, gf_bs_read_int(ctx->bs_nal_in, 1), 1);//entropy_coding_sync_enabled_flag",
          "179:  if (ctx->enable_multi_rows) {",
          "180:   u32 nb_rows = ctx->nb_rows - 1;",
          "181:   assert(ctx->nb_rows);",
          "183:  } else {",
          "185:  }",
          "186:  gf_bs_write_int(ctx->bs_nal_out, 0, 1);  //uniform_spacing_flag",
          "",
          "[Removed Lines]",
          "158:  gf_bs_set_ue(ctx->bs_nal_out, gf_bs_get_ue(ctx->bs_nal_in)); //pps_pic_parameter_set_id",
          "159:  gf_bs_set_ue(ctx->bs_nal_out, gf_bs_get_ue(ctx->bs_nal_in)); //pps_seq_parameter_set_id",
          "161:  gf_bs_set_ue(ctx->bs_nal_out, gf_bs_get_ue(ctx->bs_nal_in)); //num_ref_idx_l0_default_active_minus1",
          "162:  gf_bs_set_ue(ctx->bs_nal_out, gf_bs_get_ue(ctx->bs_nal_in)); //num_ref_idx_l1_default_active_minus1",
          "163:  gf_bs_set_se(ctx->bs_nal_out, gf_bs_get_se(ctx->bs_nal_in)); //init_qp_minus26",
          "168:   gf_bs_set_ue(ctx->bs_nal_out, gf_bs_get_ue(ctx->bs_nal_in)); // diff_cu_qp_delta_depth",
          "169:  gf_bs_set_se(ctx->bs_nal_out, gf_bs_get_se(ctx->bs_nal_in)); // pps_cb_qp_offset",
          "170:  gf_bs_set_se(ctx->bs_nal_out, gf_bs_get_se(ctx->bs_nal_in)); // pps_cr_qp_offset",
          "177:  gf_bs_set_ue(ctx->bs_nal_out, ctx->nb_cols-1);//write num_tile_columns_minus1",
          "182:   gf_bs_set_ue(ctx->bs_nal_out, nb_rows);",
          "184:   gf_bs_set_ue(ctx->bs_nal_out, 0);//num_tile_rows_minus1",
          "",
          "[Added Lines]",
          "158:  gf_bs_write_ue(ctx->bs_nal_out, gf_bs_read_ue(ctx->bs_nal_in)); //pps_pic_parameter_set_id",
          "159:  gf_bs_write_ue(ctx->bs_nal_out, gf_bs_read_ue(ctx->bs_nal_in)); //pps_seq_parameter_set_id",
          "161:  gf_bs_write_ue(ctx->bs_nal_out, gf_bs_read_ue(ctx->bs_nal_in)); //num_ref_idx_l0_default_active_minus1",
          "162:  gf_bs_write_ue(ctx->bs_nal_out, gf_bs_read_ue(ctx->bs_nal_in)); //num_ref_idx_l1_default_active_minus1",
          "163:  gf_bs_write_se(ctx->bs_nal_out, gf_bs_read_se(ctx->bs_nal_in)); //init_qp_minus26",
          "168:   gf_bs_write_ue(ctx->bs_nal_out, gf_bs_read_ue(ctx->bs_nal_in)); // diff_cu_qp_delta_depth",
          "169:  gf_bs_write_se(ctx->bs_nal_out, gf_bs_read_se(ctx->bs_nal_in)); // pps_cb_qp_offset",
          "170:  gf_bs_write_se(ctx->bs_nal_out, gf_bs_read_se(ctx->bs_nal_in)); // pps_cr_qp_offset",
          "177:  gf_bs_write_ue(ctx->bs_nal_out, ctx->nb_cols-1);//write num_tile_columns_minus1",
          "182:   gf_bs_write_ue(ctx->bs_nal_out, nb_rows);",
          "184:   gf_bs_write_ue(ctx->bs_nal_out, 0);//num_tile_rows_minus1",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "189:  {",
          "190:   u32 i;",
          "191:   for (i = 0; i < ctx->nb_cols-1; i++)",
          "195:   if (ctx->enable_multi_rows && (ctx->nb_rows>1))  {",
          "",
          "[Removed Lines]",
          "192:    gf_bs_set_ue(ctx->bs_nal_out, (ctx->grid[i].width / ctx->max_CU_width - 1));",
          "",
          "[Added Lines]",
          "192:    gf_bs_write_ue(ctx->bs_nal_out, (ctx->grid[i].width / ctx->max_CU_width - 1));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "201:     HEVCTilePidCtx *tile = gf_list_get(ctx->ordered_pids, i);",
          "203:     if (tile->pos_col) continue;",
          "205:     nb_rows--;",
          "206:     if (!nb_rows) break;",
          "207:    }",
          "",
          "[Removed Lines]",
          "204:     gf_bs_set_ue(ctx->bs_nal_out, (tile->height / ctx->max_CU_width - 1)); // row_height_minus1[i]",
          "",
          "[Added Lines]",
          "204:     gf_bs_write_ue(ctx->bs_nal_out, (tile->height / ctx->max_CU_width - 1)); // row_height_minus1[i]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "301:   gf_bs_write_int(ctx->bs_nal_out, gf_bs_read_int(ctx->bs_nal_in, 1), 1);",
          "302:  }",
          "307:  pps = &hevc->pps[pps_id];",
          "308:  sps = &hevc->sps[pps->sps_id];",
          "",
          "[Removed Lines]",
          "304:  pps_id = gf_bs_get_ue(ctx->bs_nal_in);",
          "305:  gf_bs_set_ue(ctx->bs_nal_out, pps_id);",
          "",
          "[Added Lines]",
          "304:  pps_id = gf_bs_read_ue(ctx->bs_nal_in);",
          "305:  gf_bs_write_ue(ctx->bs_nal_out, pps_id);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "331:  }",
          "333:  new_slice_qp_delta = hevc->s_info.pps->pic_init_qp_minus26 + hevc->s_info.slice_qp_delta - ctx->base_pps_init_qp_delta_minus26;",
          "338:  while (num_entry_point_start != (gf_bs_get_position(ctx->bs_nal_in) - 1) * 8 + gf_bs_get_bit_position(ctx->bs_nal_in)) {",
          "339:   gf_bs_write_int(ctx->bs_nal_out, gf_bs_read_int(ctx->bs_nal_in, 1), 1);",
          "340:  }",
          "345:  if (pps->slice_segment_header_extension_present_flag)",
          "",
          "[Removed Lines]",
          "334:  gf_bs_set_se(ctx->bs_nal_out, new_slice_qp_delta);",
          "335:  gf_bs_get_se(ctx->bs_nal_in);",
          "342:  gf_bs_set_ue(ctx->bs_nal_out, 0);",
          "",
          "[Added Lines]",
          "334:  gf_bs_write_se(ctx->bs_nal_out, new_slice_qp_delta);",
          "335:  gf_bs_read_se(ctx->bs_nal_in);",
          "342:  gf_bs_write_ue(ctx->bs_nal_out, 0);",
          "",
          "---------------"
        ],
        "src/filters/hevcsplit.c||src/filters/hevcsplit.c": [
          "File: src/filters/hevcsplit.c -> src/filters/hevcsplit.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "295:   hevc_write_profile_tier_level(bs_in, bs_out, 1, max_sub_layers_minus1);",
          "296:  }",
          "300:  if (multiLayerExtSpsFlag) {",
          "301:   u8 update_rep_format_flag = gf_bs_read_int(bs_in, 1);",
          "",
          "[Removed Lines]",
          "298:  gf_bs_set_ue(bs_out, gf_bs_get_ue(bs_in)); //copy sps_id",
          "",
          "[Added Lines]",
          "298:  gf_bs_write_ue(bs_out, gf_bs_read_ue(bs_in)); //copy sps_id",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "305:   }",
          "306:  }",
          "307:  else {",
          "310:   if (chroma_format_idc == 3)",
          "311:    gf_bs_write_int(bs_out, gf_bs_read_int(bs_in, 1), 1); // copy separate_colour_plane_flag",
          "320:   conformance_window_flag = gf_bs_read_int(bs_in, 1);",
          "",
          "[Removed Lines]",
          "308:   chroma_format_idc = gf_bs_get_ue(bs_in);",
          "309:   gf_bs_set_ue(bs_out, chroma_format_idc);",
          "316:   gf_bs_set_ue(bs_out, width);",
          "317:   gf_bs_set_ue(bs_out, height);",
          "",
          "[Added Lines]",
          "308:   chroma_format_idc = gf_bs_read_ue(bs_in);",
          "309:   gf_bs_write_ue(bs_out, chroma_format_idc);",
          "316:   gf_bs_write_ue(bs_out, width);",
          "317:   gf_bs_write_ue(bs_out, height);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "325:   if (conformance_window_flag)",
          "326:   {",
          "331:   }",
          "332:  }",
          "",
          "[Removed Lines]",
          "327:    gf_bs_get_ue(bs_in);",
          "328:    gf_bs_get_ue(bs_in);",
          "329:    gf_bs_get_ue(bs_in);",
          "330:    gf_bs_get_ue(bs_in);",
          "",
          "[Added Lines]",
          "327:    gf_bs_read_ue(bs_in);",
          "328:    gf_bs_read_ue(bs_in);",
          "329:    gf_bs_read_ue(bs_in);",
          "330:    gf_bs_read_ue(bs_in);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "377:  gf_bs_write_int(ctx->bs_nal_out, gf_bs_read_int(ctx->bs_nal_in, 16), 16);",
          "380:  gf_bs_write_int(ctx->bs_nal_out, gf_bs_read_int(ctx->bs_nal_in, 7), 7); //from dependent_slice_segments_enabled_flag to cabac_init_present_flag",
          "384:  gf_bs_write_int(ctx->bs_nal_out, gf_bs_read_int(ctx->bs_nal_in, 2), 2); //from constrained_intra_pred_flag to transform_skip_enabled_flag",
          "385:  cu_qp_delta_enabled_flag = gf_bs_read_int(ctx->bs_nal_in, 1); //cu_qp_delta_enabled_flag",
          "386:  gf_bs_write_int(ctx->bs_nal_out, cu_qp_delta_enabled_flag, 1); //",
          "387:  if (cu_qp_delta_enabled_flag)",
          "391:  gf_bs_write_int(ctx->bs_nal_out, gf_bs_read_int(ctx->bs_nal_in, 4), 4); // from pps_slice_chroma_qp_offsets_present_flag to transquant_bypass_enabled_flag",
          "393:  tiles_enabled_flag = gf_bs_read_int(ctx->bs_nal_in, 1); // tiles_enabled_flag",
          "",
          "[Removed Lines]",
          "378:  gf_bs_set_ue(ctx->bs_nal_out, gf_bs_get_ue(ctx->bs_nal_in)); //pps_pic_parameter_set_id",
          "379:  gf_bs_set_ue(ctx->bs_nal_out, gf_bs_get_ue(ctx->bs_nal_in)); //pps_seq_parameter_set_id",
          "381:  gf_bs_set_ue(ctx->bs_nal_out, gf_bs_get_ue(ctx->bs_nal_in)); //num_ref_idx_l0_default_active_minus1",
          "382:  gf_bs_set_ue(ctx->bs_nal_out, gf_bs_get_ue(ctx->bs_nal_in)); //num_ref_idx_l1_default_active_minus1",
          "383:  gf_bs_set_se(ctx->bs_nal_out, gf_bs_get_se(ctx->bs_nal_in)); //init_qp_minus26",
          "388:   gf_bs_set_ue(ctx->bs_nal_out, gf_bs_get_ue(ctx->bs_nal_in)); // diff_cu_qp_delta_depth",
          "389:  gf_bs_set_se(ctx->bs_nal_out, gf_bs_get_se(ctx->bs_nal_in)); // pps_cb_qp_offset",
          "390:  gf_bs_set_se(ctx->bs_nal_out, gf_bs_get_se(ctx->bs_nal_in)); // pps_cr_qp_offset",
          "",
          "[Added Lines]",
          "378:  gf_bs_write_ue(ctx->bs_nal_out, gf_bs_read_ue(ctx->bs_nal_in)); //pps_pic_parameter_set_id",
          "379:  gf_bs_write_ue(ctx->bs_nal_out, gf_bs_read_ue(ctx->bs_nal_in)); //pps_seq_parameter_set_id",
          "381:  gf_bs_write_ue(ctx->bs_nal_out, gf_bs_read_ue(ctx->bs_nal_in)); //num_ref_idx_l0_default_active_minus1",
          "382:  gf_bs_write_ue(ctx->bs_nal_out, gf_bs_read_ue(ctx->bs_nal_in)); //num_ref_idx_l1_default_active_minus1",
          "383:  gf_bs_write_se(ctx->bs_nal_out, gf_bs_read_se(ctx->bs_nal_in)); //init_qp_minus26",
          "388:   gf_bs_write_ue(ctx->bs_nal_out, gf_bs_read_ue(ctx->bs_nal_in)); // diff_cu_qp_delta_depth",
          "389:  gf_bs_write_se(ctx->bs_nal_out, gf_bs_read_se(ctx->bs_nal_in)); // pps_cb_qp_offset",
          "390:  gf_bs_write_se(ctx->bs_nal_out, gf_bs_read_se(ctx->bs_nal_in)); // pps_cr_qp_offset",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "399:  if (tiles_enabled_flag) {",
          "402:   u8 uniform_spacing_flag = gf_bs_read_int(ctx->bs_nal_in, 1);",
          "404:   if (!uniform_spacing_flag) {",
          "405:    for (i = 0; i < num_tile_columns_minus1; i++)",
          "407:    for (i = 0; i < num_tile_rows_minus1; i++)",
          "409:   }",
          "410:   gf_bs_read_int(ctx->bs_nal_in, 1);",
          "411:  }",
          "",
          "[Removed Lines]",
          "400:   u32 num_tile_columns_minus1 = gf_bs_get_ue(ctx->bs_nal_in);",
          "401:   u32 num_tile_rows_minus1 = gf_bs_get_ue(ctx->bs_nal_in);",
          "406:     gf_bs_get_ue(ctx->bs_nal_in);",
          "408:     gf_bs_get_ue(ctx->bs_nal_in);",
          "",
          "[Added Lines]",
          "400:   u32 num_tile_columns_minus1 = gf_bs_read_ue(ctx->bs_nal_in);",
          "401:   u32 num_tile_rows_minus1 = gf_bs_read_ue(ctx->bs_nal_in);",
          "406:     gf_bs_read_ue(ctx->bs_nal_in);",
          "408:     gf_bs_read_ue(ctx->bs_nal_in);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "495:   gf_bs_write_int(ctx->bs_nal_out, gf_bs_read_int(ctx->bs_nal_in, 1), 1);",
          "496:  }",
          "501:  pps = &hevc->pps[pps_id];",
          "502:  sps = &hevc->sps[pps->sps_id];",
          "",
          "[Removed Lines]",
          "498:  pps_id = gf_bs_get_ue(ctx->bs_nal_in);      //pps_id",
          "499:  gf_bs_set_ue(ctx->bs_nal_out, pps_id);",
          "",
          "[Added Lines]",
          "498:  pps_id = gf_bs_read_ue(ctx->bs_nal_in);      //pps_id",
          "499:  gf_bs_write_ue(ctx->bs_nal_out, pps_id);",
          "",
          "---------------"
        ],
        "src/filters/inspect.c||src/filters/inspect.c": [
          "File: src/filters/inspect.c -> src/filters/inspect.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "50:  GF_M4VParser *mv124_state;",
          "51:  GF_M4VDecSpecInfo dsi;",
          "52: #endif",
          "54:  GF_BitStream *bs;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "53:  GF_VPConfig *vpcc;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "63:  u32 tmcd_flags;",
          "64:  u32 tmcd_fpt;",
          "67: } PidCtx;",
          "69: enum",
          "",
          "[Removed Lines]",
          "66:  Bool buffer_done;",
          "",
          "[Added Lines]",
          "68:  Bool buffer_done, no_analysis;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "86:  INSPECT_TEST_NOBR",
          "87: };",
          "89: typedef struct",
          "90: {",
          "91:  u32 mode;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "91: enum",
          "92: {",
          "93:  INSPECT_ANALYZE_OFF=0,",
          "94:  INSPECT_ANALYZE_ON,",
          "95:  INSPECT_ANALYZE_BS,",
          "96:  INSPECT_ANALYZE_BS_BITS,",
          "97: };",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "94:  Bool deep;",
          "95:  char *log;",
          "96:  char *fmt;",
          "98:  Double speed, start;",
          "99:  u32 test;",
          "100:  GF_Fraction dur;",
          "",
          "[Removed Lines]",
          "97:  Bool props, hdr, allp, info, pcr, analyze, xml;",
          "",
          "[Added Lines]",
          "107:  u32 analyze;",
          "108:  Bool props, hdr, allp, info, pcr, xml;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "110:  Bool args_updated;",
          "111: } GF_InspectCtx;",
          "113: #define DUMP_ATT_STR(_name, _val) if (ctx->xml) { \\",
          "114:   gf_fprintf(dump, \" %s=\\\"%s\\\"\", _name, _val); \\",
          "115:  } else { \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "125: GF_Err gf_bs_set_logger(GF_BitStream *bs, void (*on_bs_log)(void *udta, const char *field_name, u32 nb_bits, u64 field_val, s32 idx1, s32 idx2, s32 idx3), void *udta);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "253:  return \"Unknown\";",
          "254: }",
          "256: static void dump_sei(FILE *dump, GF_BitStream *bs, Bool is_hevc)",
          "257: {",
          "258:  u32 i;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "271: typedef struct",
          "272: {",
          "273:  FILE *dump;",
          "274:  Bool dump_bits;",
          "275: } InspectLogCbk;",
          "277: static void inspect_log_bs(Bool is_nalu, void *udta, const char *field_name, u32 nb_bits, u64 field_val, s32 idx1, s32 idx2, s32 idx3)",
          "278: {",
          "279:  InspectLogCbk *cbk = (InspectLogCbk*)udta;",
          "281:  if (!nb_bits)",
          "282:   return;",
          "284:  if (is_nalu)",
          "285:   gf_fprintf(cbk->dump, \"\\\"\");",
          "287:  gf_fprintf(cbk->dump, \" %s\", field_name);",
          "288:  if (idx1>=0) {",
          "289:   gf_fprintf(cbk->dump, \"_%d\", idx1);",
          "290:   if (idx2>=0) {",
          "291:    gf_fprintf(cbk->dump, \"_%d\", idx2);",
          "292:    if (idx3>=0) {",
          "293:     gf_fprintf(cbk->dump, \"_%d\", idx3);",
          "294:    }",
          "295:   }",
          "296:  }",
          "297:  gf_fprintf(cbk->dump, \"=\\\"\"LLD, field_val);",
          "298:  if (cbk->dump_bits && ((s32) nb_bits > 1) )",
          "299:   gf_fprintf(cbk->dump, \"(%u)\", nb_bits);",
          "301:  if (!is_nalu)",
          "302:   gf_fprintf(cbk->dump, \"\\\"\");",
          "303: }",
          "305: static void shifted_bs_log(void *udta, const char *field_name, u32 nb_bits, u64 field_val, s32 idx1, s32 idx2, s32 idx3)",
          "306: {",
          "307:  inspect_log_bs(GF_TRUE, udta, field_name, nb_bits, field_val, idx1, idx2, idx3);",
          "308: }",
          "309: static void regular_bs_log(void *udta, const char *field_name, u32 nb_bits, u64 field_val, s32 idx1, s32 idx2, s32 idx3)",
          "310: {",
          "311:  inspect_log_bs(GF_FALSE, udta, field_name, nb_bits, field_val, idx1, idx2, idx3);",
          "312: }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "287:  }",
          "288: }",
          "291: {",
          "292:  s32 res = 0;",
          "293:  u8 type, nal_ref_idc;",
          "",
          "[Removed Lines]",
          "290: static void gf_inspect_dump_nalu_internal(FILE *dump, u8 *ptr, u32 ptr_size, Bool is_svc, HEVCState *hevc, AVCState *avc, VVCState *vvc, u32 nalh_size, Bool dump_crc, Bool is_encrypted, PidCtx *pctx)",
          "",
          "[Added Lines]",
          "350: static void gf_inspect_dump_nalu_internal(FILE *dump, u8 *ptr, u32 ptr_size, Bool is_svc, HEVCState *hevc, AVCState *avc, VVCState *vvc, u32 nalh_size, Bool dump_crc, Bool is_encrypted, u32 full_bs_dump, PidCtx *pctx)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "296:  s8 sample_offset;",
          "297:  u32 data_offset, data_size;",
          "298:  s32 idx;",
          "301:  if (!ptr_size) {",
          "302:   gf_fprintf(dump, \"error=\\\"invalid nal size 0\\\"/>\\n\");",
          "",
          "[Removed Lines]",
          "299:  GF_BitStream *bs;",
          "",
          "[Added Lines]",
          "359:  InspectLogCbk lcbk;",
          "360:  GF_BitStream *bs = NULL;",
          "363:  if (full_bs_dump<INSPECT_ANALYZE_BS)",
          "364:   full_bs_dump = 0;",
          "365:  else {",
          "366:   lcbk.dump = dump;",
          "367:   lcbk.dump_bits = full_bs_dump==INSPECT_ANALYZE_BS_BITS ? GF_TRUE : GF_FALSE;",
          "368:  }",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "308:  if (hevc) {",
          "309: #ifndef GPAC_DISABLE_HEVC",
          "310:   if (ptr_size==1) {",
          "311:    gf_fprintf(dump, \"error=\\\"invalid nal size 1\\\"/>\\n\");",
          "312:    return;",
          "313:   }",
          "318:   switch (type) {",
          "319:   case GF_HEVC_NALU_SLICE_TRAIL_N:",
          "",
          "[Removed Lines]",
          "314:   res = gf_hevc_parse_nalu(ptr, ptr_size, hevc, &type, &temporal_id, &quality_id);",
          "316:   gf_fprintf(dump, \"code=\\\"%d\\\" type=\\\"\", type);",
          "",
          "[Added Lines]",
          "385:   if (full_bs_dump) {",
          "386:    if (pctx) {",
          "387:     if (!pctx->bs)",
          "388:      pctx->bs = gf_bs_new(ptr, ptr_size, GF_BITSTREAM_READ);",
          "389:     else",
          "390:      gf_bs_reassign_buffer(pctx->bs, ptr, ptr_size);",
          "391:     bs = pctx->bs;",
          "392:    } else {",
          "393:     bs = gf_bs_new(ptr, ptr_size, GF_BITSTREAM_READ);",
          "394:    }",
          "395:    if (full_bs_dump)",
          "396:     gf_bs_set_logger(bs, regular_bs_log, &lcbk);",
          "397:    res = gf_hevc_parse_nalu_bs(bs, hevc, &type, &temporal_id, &quality_id);",
          "398:   } else {",
          "399:    bs = NULL;",
          "400:    res = gf_hevc_parse_nalu(ptr, ptr_size, hevc, &type, &temporal_id, &quality_id);",
          "401:    gf_fprintf(dump, \"code=\\\"%d\\\"\", type);",
          "402:   }",
          "404:   if (res==-1) {",
          "405:    gf_fprintf(dump, \" status=\\\"error parsing\\\"\", type);",
          "406:   }",
          "407:   gf_fprintf(dump, \" type=\\\"\", type);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "368:   case GF_HEVC_NALU_VID_PARAM:",
          "369:    gf_fputs(\"Video Parameter Set\", dump);",
          "370:    idx = gf_hevc_read_vps(ptr, ptr_size, hevc);",
          "371:    if (idx<0) gf_fprintf(dump, \"\\\" vps_id=\\\"PARSING FAILURE\");",
          "372:    else gf_fprintf(dump, \"\\\" vps_id=\\\"%d\", idx);",
          "373:    break;",
          "374:   case GF_HEVC_NALU_SEQ_PARAM:",
          "376:    gf_fputs(\"Sequence Parameter Set\", dump);",
          "459:    }",
          "460:    break;",
          "461:   case GF_HEVC_NALU_PIC_PARAM:",
          "463:    gf_fputs(\"Picture Parameter Set\", dump);",
          "518:     }",
          "521:    }",
          "522:    break;",
          "523:   case GF_HEVC_NALU_ACCESS_UNIT:",
          "",
          "[Removed Lines]",
          "375:    idx = gf_hevc_read_sps(ptr, ptr_size, hevc);",
          "377:    if (idx<0) gf_fprintf(dump, \"\\\" sps_id=\\\"PARSING FAILURE\");",
          "378:    else {",
          "379:     HEVC_SPS *sps= &hevc->sps[idx];",
          "380:     gf_fprintf(dump, \"\\\" sps_id=\\\"%d\", idx);",
          "381:     if (gf_sys_is_test_mode()) break;",
          "383:     gf_fprintf(dump, \"\\\" aspect_ratio_info_present_flag=\\\"%d\", sps->aspect_ratio_info_present_flag);",
          "384:     gf_fprintf(dump, \"\\\" bit_depth_chroma=\\\"%d\", sps->bit_depth_chroma);",
          "385:     gf_fprintf(dump, \"\\\" bit_depth_luma=\\\"%d\", sps->bit_depth_luma);",
          "386:     gf_fprintf(dump, \"\\\" chroma_format_idc=\\\"%d\", sps->chroma_format_idc);",
          "387:     gf_fprintf(dump, \"\\\" colour_description_present_flag=\\\"%d\", sps->colour_description_present_flag);",
          "388:     gf_fprintf(dump, \"\\\" colour_primaries=\\\"%d\", sps->colour_primaries);",
          "389:     gf_fprintf(dump, \"\\\" cw_flag=\\\"%d\", sps->cw_flag);",
          "390:     if (sps->cw_flag) {",
          "391:      gf_fprintf(dump, \"\\\" cw_bottom=\\\"%d\", sps->cw_bottom);",
          "392:      gf_fprintf(dump, \"\\\" cw_top=\\\"%d\", sps->cw_top);",
          "393:      gf_fprintf(dump, \"\\\" cw_left=\\\"%d\", sps->cw_left);",
          "394:      gf_fprintf(dump, \"\\\" cw_right=\\\"%d\", sps->cw_right);",
          "395:     }",
          "396:     gf_fprintf(dump, \"\\\" height=\\\"%d\", sps->height);",
          "397:     gf_fprintf(dump, \"\\\" width=\\\"%d\", sps->width);",
          "398:     gf_fprintf(dump, \"\\\" log2_max_pic_order_cnt_lsb=\\\"%d\", sps->log2_max_pic_order_cnt_lsb);",
          "399:     gf_fprintf(dump, \"\\\" long_term_ref_pics_present_flag=\\\"%d\", sps->long_term_ref_pics_present_flag);",
          "400:     gf_fprintf(dump, \"\\\" matrix_coeffs=\\\"%d\", sps->matrix_coeffs);",
          "401:     gf_fprintf(dump, \"\\\" max_CU_depth=\\\"%d\", sps->max_CU_depth);",
          "402:     gf_fprintf(dump, \"\\\" max_CU_width=\\\"%d\", sps->max_CU_width);",
          "403:     gf_fprintf(dump, \"\\\" max_CU_height=\\\"%d\", sps->max_CU_height);",
          "404:     gf_fprintf(dump, \"\\\" num_long_term_ref_pic_sps=\\\"%d\", sps->num_long_term_ref_pic_sps);",
          "405:     gf_fprintf(dump, \"\\\" num_short_term_ref_pic_sets=\\\"%d\", sps->num_short_term_ref_pic_sets);",
          "406:     gf_fprintf(dump, \"\\\" has_timing_info=\\\"%d\", sps->has_timing_info);",
          "407:     if (sps->has_timing_info) {",
          "408:      gf_fprintf(dump, \"\\\" time_scale=\\\"%d\", sps->time_scale);",
          "409:      gf_fprintf(dump, \"\\\" num_ticks_poc_diff_one_minus1=\\\"%d\", sps->num_ticks_poc_diff_one_minus1);",
          "410:      gf_fprintf(dump, \"\\\" num_units_in_tick=\\\"%d\", sps->num_units_in_tick);",
          "411:      gf_fprintf(dump, \"\\\" poc_proportional_to_timing_flag=\\\"%d\", sps->poc_proportional_to_timing_flag);",
          "412:     }",
          "413:     gf_fprintf(dump, \"\\\" rep_format_idx=\\\"%d\", sps->rep_format_idx);",
          "414:     gf_fprintf(dump, \"\\\" sample_adaptive_offset_enabled_flag=\\\"%d\", sps->sample_adaptive_offset_enabled_flag);",
          "415:     gf_fprintf(dump, \"\\\" sar_idc=\\\"%d\", sps->sar_idc);",
          "416:     gf_fprintf(dump, \"\\\" separate_colour_plane_flag=\\\"%d\", sps->separate_colour_plane_flag);",
          "417:     gf_fprintf(dump, \"\\\" temporal_mvp_enable_flag=\\\"%d\", sps->temporal_mvp_enable_flag);",
          "418:     gf_fprintf(dump, \"\\\" transfer_characteristic=\\\"%d\", sps->transfer_characteristic);",
          "419:     gf_fprintf(dump, \"\\\" video_full_range_flag=\\\"%d\", sps->video_full_range_flag);",
          "420:     gf_fprintf(dump, \"\\\" sps_ext_or_max_sub_layers_minus1=\\\"%d\", sps->sps_ext_or_max_sub_layers_minus1);",
          "421:     gf_fprintf(dump, \"\\\" max_sub_layers_minus1=\\\"%d\", sps->max_sub_layers_minus1);",
          "422:     gf_fprintf(dump, \"\\\" update_rep_format_flag=\\\"%d\", sps->update_rep_format_flag);",
          "423:     gf_fprintf(dump, \"\\\" sub_layer_ordering_info_present_flag=\\\"%d\", sps->sub_layer_ordering_info_present_flag);",
          "424:     gf_fprintf(dump, \"\\\" scaling_list_enable_flag=\\\"%d\", sps->scaling_list_enable_flag);",
          "425:     gf_fprintf(dump, \"\\\" infer_scaling_list_flag=\\\"%d\", sps->infer_scaling_list_flag);",
          "426:     gf_fprintf(dump, \"\\\" scaling_list_ref_layer_id=\\\"%d\", sps->scaling_list_ref_layer_id);",
          "427:     gf_fprintf(dump, \"\\\" scaling_list_data_present_flag=\\\"%d\", sps->scaling_list_data_present_flag);",
          "428:     gf_fprintf(dump, \"\\\" asymmetric_motion_partitions_enabled_flag=\\\"%d\", sps->asymmetric_motion_partitions_enabled_flag);",
          "429:     gf_fprintf(dump, \"\\\" pcm_enabled_flag=\\\"%d\", sps->pcm_enabled_flag);",
          "430:     gf_fprintf(dump, \"\\\" strong_intra_smoothing_enable_flag=\\\"%d\", sps->strong_intra_smoothing_enable_flag);",
          "431:     gf_fprintf(dump, \"\\\" vui_parameters_present_flag=\\\"%d\", sps->vui_parameters_present_flag);",
          "432:     gf_fprintf(dump, \"\\\" log2_diff_max_min_luma_coding_block_size=\\\"%d\", sps->log2_diff_max_min_luma_coding_block_size);",
          "433:     gf_fprintf(dump, \"\\\" log2_min_transform_block_size=\\\"%d\", sps->log2_min_transform_block_size);",
          "434:     gf_fprintf(dump, \"\\\" log2_min_luma_coding_block_size=\\\"%d\", sps->log2_min_luma_coding_block_size);",
          "435:     gf_fprintf(dump, \"\\\" log2_max_transform_block_size=\\\"%d\", sps->log2_max_transform_block_size);",
          "436:     gf_fprintf(dump, \"\\\" max_transform_hierarchy_depth_inter=\\\"%d\", sps->max_transform_hierarchy_depth_inter);",
          "437:     gf_fprintf(dump, \"\\\" max_transform_hierarchy_depth_intra=\\\"%d\", sps->max_transform_hierarchy_depth_intra);",
          "438:     gf_fprintf(dump, \"\\\" pcm_sample_bit_depth_luma_minus1=\\\"%d\", sps->pcm_sample_bit_depth_luma_minus1);",
          "439:     gf_fprintf(dump, \"\\\" pcm_sample_bit_depth_chroma_minus1=\\\"%d\", sps->pcm_sample_bit_depth_chroma_minus1);",
          "440:     gf_fprintf(dump, \"\\\" pcm_loop_filter_disable_flag=\\\"%d\", sps->pcm_loop_filter_disable_flag);",
          "441:     gf_fprintf(dump, \"\\\" log2_min_pcm_luma_coding_block_size_minus3=\\\"%d\", sps->log2_min_pcm_luma_coding_block_size_minus3);",
          "442:     gf_fprintf(dump, \"\\\" log2_diff_max_min_pcm_luma_coding_block_size=\\\"%d\", sps->log2_diff_max_min_pcm_luma_coding_block_size);",
          "443:     gf_fprintf(dump, \"\\\" overscan_info_present=\\\"%d\", sps->overscan_info_present);",
          "444:     gf_fprintf(dump, \"\\\" overscan_appropriate=\\\"%d\", sps->overscan_appropriate);",
          "445:     gf_fprintf(dump, \"\\\" video_signal_type_present_flag=\\\"%d\", sps->video_signal_type_present_flag);",
          "446:     gf_fprintf(dump, \"\\\" video_format=\\\"%d\", sps->video_format);",
          "447:     gf_fprintf(dump, \"\\\" chroma_loc_info_present_flag=\\\"%d\", sps->chroma_loc_info_present_flag);",
          "448:     gf_fprintf(dump, \"\\\" chroma_sample_loc_type_top_field=\\\"%d\", sps->chroma_sample_loc_type_top_field);",
          "449:     gf_fprintf(dump, \"\\\" chroma_sample_loc_type_bottom_field=\\\"%d\", sps->chroma_sample_loc_type_bottom_field);",
          "450:     gf_fprintf(dump, \"\\\" neutra_chroma_indication_flag=\\\"%d\", sps->neutra_chroma_indication_flag);",
          "451:     gf_fprintf(dump, \"\\\" field_seq_flag=\\\"%d\", sps->field_seq_flag);",
          "452:     gf_fprintf(dump, \"\\\" frame_field_info_present_flag=\\\"%d\", sps->frame_field_info_present_flag);",
          "453:     gf_fprintf(dump, \"\\\" default_display_window_flag=\\\"%d\", sps->default_display_window_flag);",
          "454:     gf_fprintf(dump, \"\\\" left_offset=\\\"%d\", sps->left_offset);",
          "455:     gf_fprintf(dump, \"\\\" right_offset=\\\"%d\", sps->right_offset);",
          "456:     gf_fprintf(dump, \"\\\" top_offset=\\\"%d\", sps->top_offset);",
          "457:     gf_fprintf(dump, \"\\\" bottom_offset=\\\"%d\", sps->bottom_offset);",
          "458:     gf_fprintf(dump, \"\\\" hrd_parameters_present_flag=\\\"%d\", sps->hrd_parameters_present_flag);",
          "462:    idx = gf_hevc_read_pps(ptr, ptr_size, hevc);",
          "464:    if (idx<0) gf_fprintf(dump, \"\\\" pps_id=\\\"PARSING FAILURE\");",
          "465:    else {",
          "466:     HEVC_PPS *pps= &hevc->pps[idx];",
          "467:     gf_fprintf(dump, \"\\\" pps_id=\\\"%d\", idx);",
          "469:     if (gf_sys_is_test_mode()) break;",
          "471:     gf_fprintf(dump, \"\\\" cabac_init_present_flag=\\\"%d\", pps->cabac_init_present_flag);",
          "472:     gf_fprintf(dump, \"\\\" dependent_slice_segments_enabled_flag=\\\"%d\", pps->dependent_slice_segments_enabled_flag);",
          "473:     gf_fprintf(dump, \"\\\" entropy_coding_sync_enabled_flag=\\\"%d\", pps->entropy_coding_sync_enabled_flag);",
          "474:     gf_fprintf(dump, \"\\\" lists_modification_present_flag=\\\"%d\", pps->lists_modification_present_flag);",
          "475:     gf_fprintf(dump, \"\\\" loop_filter_across_slices_enabled_flag=\\\"%d\", pps->loop_filter_across_slices_enabled_flag);",
          "476:     gf_fprintf(dump, \"\\\" loop_filter_across_tiles_enabled_flag=\\\"%d\", pps->loop_filter_across_tiles_enabled_flag);",
          "477:     gf_fprintf(dump, \"\\\" num_extra_slice_header_bits=\\\"%d\", pps->num_extra_slice_header_bits);",
          "478:     gf_fprintf(dump, \"\\\" num_ref_idx_l0_default_active=\\\"%d\", pps->num_ref_idx_l0_default_active);",
          "479:     gf_fprintf(dump, \"\\\" num_ref_idx_l1_default_active=\\\"%d\", pps->num_ref_idx_l1_default_active);",
          "480:     gf_fprintf(dump, \"\\\" tiles_enabled_flag=\\\"%d\", pps->tiles_enabled_flag);",
          "481:     if (pps->tiles_enabled_flag) {",
          "482:      gf_fprintf(dump, \"\\\" uniform_spacing_flag=\\\"%d\", pps->uniform_spacing_flag);",
          "483:      if (!pps->uniform_spacing_flag) {",
          "484:       u32 k;",
          "485:       gf_fprintf(dump, \"\\\" num_tile_columns=\\\"%d\", pps->num_tile_columns);",
          "486:       gf_fprintf(dump, \"\\\" num_tile_rows=\\\"%d\", pps->num_tile_rows);",
          "487:       gf_fprintf(dump, \"\\\" colomns_width=\\\"\");",
          "488:       for (k=0; k<pps->num_tile_columns-1; k++)",
          "489:        gf_fprintf(dump, \"%d \", pps->column_width[k]);",
          "490:       gf_fprintf(dump, \"\\\" rows_height=\\\"\");",
          "491:       for (k=0; k<pps->num_tile_rows-1; k++)",
          "492:        gf_fprintf(dump, \"%d \", pps->row_height[k]);",
          "493:      }",
          "494:     }",
          "495:     gf_fprintf(dump, \"\\\" output_flag_present_flag=\\\"%d\", pps->output_flag_present_flag);",
          "496:     gf_fprintf(dump, \"\\\" pic_init_qp_minus26=\\\"%d\", pps->pic_init_qp_minus26);",
          "497:     gf_fprintf(dump, \"\\\" slice_chroma_qp_offsets_present_flag=\\\"%d\", pps->slice_chroma_qp_offsets_present_flag);",
          "498:     gf_fprintf(dump, \"\\\" slice_segment_header_extension_present_flag=\\\"%d\", pps->slice_segment_header_extension_present_flag);",
          "499:     gf_fprintf(dump, \"\\\" weighted_pred_flag=\\\"%d\", pps->weighted_pred_flag);",
          "500:     gf_fprintf(dump, \"\\\" weighted_bipred_flag=\\\"%d\", pps->weighted_bipred_flag);",
          "502:     gf_fprintf(dump, \"\\\" sign_data_hiding_flag=\\\"%d\", pps->sign_data_hiding_flag);",
          "503:     gf_fprintf(dump, \"\\\" constrained_intra_pred_flag=\\\"%d\", pps->constrained_intra_pred_flag);",
          "504:     gf_fprintf(dump, \"\\\" transform_skip_enabled_flag=\\\"%d\", pps->transform_skip_enabled_flag);",
          "505:     gf_fprintf(dump, \"\\\" cu_qp_delta_enabled_flag=\\\"%d\", pps->cu_qp_delta_enabled_flag);",
          "506:     if (pps->cu_qp_delta_enabled_flag)",
          "507:      gf_fprintf(dump, \"\\\" diff_cu_qp_delta_depth=\\\"%d\", pps->diff_cu_qp_delta_depth);",
          "508:     gf_fprintf(dump, \"\\\" transquant_bypass_enable_flag=\\\"%d\", pps->transquant_bypass_enable_flag);",
          "509:     gf_fprintf(dump, \"\\\" pic_cb_qp_offset=\\\"%d\", pps->pic_cb_qp_offset);",
          "510:     gf_fprintf(dump, \"\\\" pic_cr_qp_offset=\\\"%d\", pps->pic_cr_qp_offset);",
          "512:     gf_fprintf(dump, \"\\\" deblocking_filter_control_present_flag=\\\"%d\", pps->deblocking_filter_control_present_flag);",
          "513:     if (pps->deblocking_filter_control_present_flag) {",
          "514:      gf_fprintf(dump, \"\\\" deblocking_filter_override_enabled_flag=\\\"%d\", pps->deblocking_filter_override_enabled_flag);",
          "515:      gf_fprintf(dump, \"\\\" pic_disable_deblocking_filter_flag=\\\"%d\", pps->pic_disable_deblocking_filter_flag);",
          "516:      gf_fprintf(dump, \"\\\" beta_offset_div2=\\\"%d\", pps->beta_offset_div2);",
          "517:      gf_fprintf(dump, \"\\\" tc_offset_div2=\\\"%d\", pps->tc_offset_div2);",
          "519:     gf_fprintf(dump, \"\\\" pic_scaling_list_data_present_flag=\\\"%d\", pps->pic_scaling_list_data_present_flag);",
          "520:     gf_fprintf(dump, \"\\\" log2_parallel_merge_level_minus2=\\\"%d\", pps->log2_parallel_merge_level_minus2);",
          "",
          "[Added Lines]",
          "461:    if (full_bs_dump) break;",
          "468:    if (full_bs_dump) break;",
          "469:    idx = gf_hevc_read_sps(ptr, ptr_size, hevc);",
          "470:    if (idx<0) {",
          "471:     gf_fprintf(dump, \"\\\" sps_id=\\\"PARSING FAILURE\");",
          "472:     break;",
          "473:    }",
          "474:    {",
          "475:    HEVC_SPS *sps= &hevc->sps[idx];",
          "476:    gf_fprintf(dump, \"\\\" sps_id=\\\"%d\", idx);",
          "477:    if (gf_sys_is_test_mode()) break;",
          "479:    gf_fprintf(dump, \"\\\" aspect_ratio_info_present_flag=\\\"%d\", sps->aspect_ratio_info_present_flag);",
          "480:    gf_fprintf(dump, \"\\\" bit_depth_chroma=\\\"%d\", sps->bit_depth_chroma);",
          "481:    gf_fprintf(dump, \"\\\" bit_depth_luma=\\\"%d\", sps->bit_depth_luma);",
          "482:    gf_fprintf(dump, \"\\\" chroma_format_idc=\\\"%d\", sps->chroma_format_idc);",
          "483:    gf_fprintf(dump, \"\\\" colour_description_present_flag=\\\"%d\", sps->colour_description_present_flag);",
          "484:    gf_fprintf(dump, \"\\\" colour_primaries=\\\"%d\", sps->colour_primaries);",
          "485:    gf_fprintf(dump, \"\\\" cw_flag=\\\"%d\", sps->cw_flag);",
          "486:    if (sps->cw_flag) {",
          "487:     gf_fprintf(dump, \"\\\" cw_bottom=\\\"%d\", sps->cw_bottom);",
          "488:     gf_fprintf(dump, \"\\\" cw_top=\\\"%d\", sps->cw_top);",
          "489:     gf_fprintf(dump, \"\\\" cw_left=\\\"%d\", sps->cw_left);",
          "490:     gf_fprintf(dump, \"\\\" cw_right=\\\"%d\", sps->cw_right);",
          "491:    }",
          "492:    gf_fprintf(dump, \"\\\" height=\\\"%d\", sps->height);",
          "493:    gf_fprintf(dump, \"\\\" width=\\\"%d\", sps->width);",
          "494:    gf_fprintf(dump, \"\\\" log2_max_pic_order_cnt_lsb=\\\"%d\", sps->log2_max_pic_order_cnt_lsb);",
          "495:    gf_fprintf(dump, \"\\\" long_term_ref_pics_present_flag=\\\"%d\", sps->long_term_ref_pics_present_flag);",
          "496:    gf_fprintf(dump, \"\\\" matrix_coeffs=\\\"%d\", sps->matrix_coeffs);",
          "497:    gf_fprintf(dump, \"\\\" max_CU_depth=\\\"%d\", sps->max_CU_depth);",
          "498:    gf_fprintf(dump, \"\\\" max_CU_width=\\\"%d\", sps->max_CU_width);",
          "499:    gf_fprintf(dump, \"\\\" max_CU_height=\\\"%d\", sps->max_CU_height);",
          "500:    gf_fprintf(dump, \"\\\" num_long_term_ref_pic_sps=\\\"%d\", sps->num_long_term_ref_pic_sps);",
          "501:    gf_fprintf(dump, \"\\\" num_short_term_ref_pic_sets=\\\"%d\", sps->num_short_term_ref_pic_sets);",
          "502:    gf_fprintf(dump, \"\\\" has_timing_info=\\\"%d\", sps->has_timing_info);",
          "503:    if (sps->has_timing_info) {",
          "504:     gf_fprintf(dump, \"\\\" time_scale=\\\"%d\", sps->time_scale);",
          "505:     gf_fprintf(dump, \"\\\" num_ticks_poc_diff_one_minus1=\\\"%d\", sps->num_ticks_poc_diff_one_minus1);",
          "506:     gf_fprintf(dump, \"\\\" num_units_in_tick=\\\"%d\", sps->num_units_in_tick);",
          "507:     gf_fprintf(dump, \"\\\" poc_proportional_to_timing_flag=\\\"%d\", sps->poc_proportional_to_timing_flag);",
          "508:    }",
          "509:    gf_fprintf(dump, \"\\\" rep_format_idx=\\\"%d\", sps->rep_format_idx);",
          "510:    gf_fprintf(dump, \"\\\" sample_adaptive_offset_enabled_flag=\\\"%d\", sps->sample_adaptive_offset_enabled_flag);",
          "511:    gf_fprintf(dump, \"\\\" sar_idc=\\\"%d\", sps->sar_idc);",
          "512:    gf_fprintf(dump, \"\\\" separate_colour_plane_flag=\\\"%d\", sps->separate_colour_plane_flag);",
          "513:    gf_fprintf(dump, \"\\\" temporal_mvp_enable_flag=\\\"%d\", sps->temporal_mvp_enable_flag);",
          "514:    gf_fprintf(dump, \"\\\" transfer_characteristic=\\\"%d\", sps->transfer_characteristic);",
          "515:    gf_fprintf(dump, \"\\\" video_full_range_flag=\\\"%d\", sps->video_full_range_flag);",
          "516:    gf_fprintf(dump, \"\\\" sps_ext_or_max_sub_layers_minus1=\\\"%d\", sps->sps_ext_or_max_sub_layers_minus1);",
          "517:    gf_fprintf(dump, \"\\\" max_sub_layers_minus1=\\\"%d\", sps->max_sub_layers_minus1);",
          "518:    gf_fprintf(dump, \"\\\" update_rep_format_flag=\\\"%d\", sps->update_rep_format_flag);",
          "519:    gf_fprintf(dump, \"\\\" sub_layer_ordering_info_present_flag=\\\"%d\", sps->sub_layer_ordering_info_present_flag);",
          "520:    gf_fprintf(dump, \"\\\" scaling_list_enable_flag=\\\"%d\", sps->scaling_list_enable_flag);",
          "521:    gf_fprintf(dump, \"\\\" infer_scaling_list_flag=\\\"%d\", sps->infer_scaling_list_flag);",
          "522:    gf_fprintf(dump, \"\\\" scaling_list_ref_layer_id=\\\"%d\", sps->scaling_list_ref_layer_id);",
          "523:    gf_fprintf(dump, \"\\\" scaling_list_data_present_flag=\\\"%d\", sps->scaling_list_data_present_flag);",
          "524:    gf_fprintf(dump, \"\\\" asymmetric_motion_partitions_enabled_flag=\\\"%d\", sps->asymmetric_motion_partitions_enabled_flag);",
          "525:    gf_fprintf(dump, \"\\\" pcm_enabled_flag=\\\"%d\", sps->pcm_enabled_flag);",
          "526:    gf_fprintf(dump, \"\\\" strong_intra_smoothing_enable_flag=\\\"%d\", sps->strong_intra_smoothing_enable_flag);",
          "527:    gf_fprintf(dump, \"\\\" vui_parameters_present_flag=\\\"%d\", sps->vui_parameters_present_flag);",
          "528:    gf_fprintf(dump, \"\\\" log2_diff_max_min_luma_coding_block_size=\\\"%d\", sps->log2_diff_max_min_luma_coding_block_size);",
          "529:    gf_fprintf(dump, \"\\\" log2_min_transform_block_size=\\\"%d\", sps->log2_min_transform_block_size);",
          "530:    gf_fprintf(dump, \"\\\" log2_min_luma_coding_block_size=\\\"%d\", sps->log2_min_luma_coding_block_size);",
          "531:    gf_fprintf(dump, \"\\\" log2_max_transform_block_size=\\\"%d\", sps->log2_max_transform_block_size);",
          "532:    gf_fprintf(dump, \"\\\" max_transform_hierarchy_depth_inter=\\\"%d\", sps->max_transform_hierarchy_depth_inter);",
          "533:    gf_fprintf(dump, \"\\\" max_transform_hierarchy_depth_intra=\\\"%d\", sps->max_transform_hierarchy_depth_intra);",
          "534:    gf_fprintf(dump, \"\\\" pcm_sample_bit_depth_luma_minus1=\\\"%d\", sps->pcm_sample_bit_depth_luma_minus1);",
          "535:    gf_fprintf(dump, \"\\\" pcm_sample_bit_depth_chroma_minus1=\\\"%d\", sps->pcm_sample_bit_depth_chroma_minus1);",
          "536:    gf_fprintf(dump, \"\\\" pcm_loop_filter_disable_flag=\\\"%d\", sps->pcm_loop_filter_disable_flag);",
          "537:    gf_fprintf(dump, \"\\\" log2_min_pcm_luma_coding_block_size_minus3=\\\"%d\", sps->log2_min_pcm_luma_coding_block_size_minus3);",
          "538:    gf_fprintf(dump, \"\\\" log2_diff_max_min_pcm_luma_coding_block_size=\\\"%d\", sps->log2_diff_max_min_pcm_luma_coding_block_size);",
          "539:    gf_fprintf(dump, \"\\\" overscan_info_present=\\\"%d\", sps->overscan_info_present);",
          "540:    gf_fprintf(dump, \"\\\" overscan_appropriate=\\\"%d\", sps->overscan_appropriate);",
          "541:    gf_fprintf(dump, \"\\\" video_signal_type_present_flag=\\\"%d\", sps->video_signal_type_present_flag);",
          "542:    gf_fprintf(dump, \"\\\" video_format=\\\"%d\", sps->video_format);",
          "543:    gf_fprintf(dump, \"\\\" chroma_loc_info_present_flag=\\\"%d\", sps->chroma_loc_info_present_flag);",
          "544:    gf_fprintf(dump, \"\\\" chroma_sample_loc_type_top_field=\\\"%d\", sps->chroma_sample_loc_type_top_field);",
          "545:    gf_fprintf(dump, \"\\\" chroma_sample_loc_type_bottom_field=\\\"%d\", sps->chroma_sample_loc_type_bottom_field);",
          "546:    gf_fprintf(dump, \"\\\" neutra_chroma_indication_flag=\\\"%d\", sps->neutra_chroma_indication_flag);",
          "547:    gf_fprintf(dump, \"\\\" field_seq_flag=\\\"%d\", sps->field_seq_flag);",
          "548:    gf_fprintf(dump, \"\\\" frame_field_info_present_flag=\\\"%d\", sps->frame_field_info_present_flag);",
          "549:    gf_fprintf(dump, \"\\\" default_display_window_flag=\\\"%d\", sps->default_display_window_flag);",
          "550:    gf_fprintf(dump, \"\\\" left_offset=\\\"%d\", sps->left_offset);",
          "551:    gf_fprintf(dump, \"\\\" right_offset=\\\"%d\", sps->right_offset);",
          "552:    gf_fprintf(dump, \"\\\" top_offset=\\\"%d\", sps->top_offset);",
          "553:    gf_fprintf(dump, \"\\\" bottom_offset=\\\"%d\", sps->bottom_offset);",
          "554:    gf_fprintf(dump, \"\\\" hrd_parameters_present_flag=\\\"%d\", sps->hrd_parameters_present_flag);",
          "559:    if (full_bs_dump) break;",
          "560:    idx = gf_hevc_read_pps(ptr, ptr_size, hevc);",
          "561:    if (idx<0) {",
          "562:     gf_fprintf(dump, \"\\\" pps_id=\\\"PARSING FAILURE\");",
          "563:     break;",
          "564:    }",
          "565:    {",
          "566:    HEVC_PPS *pps= &hevc->pps[idx];",
          "567:    gf_fprintf(dump, \"\\\" pps_id=\\\"%d\", idx);",
          "569:    if (gf_sys_is_test_mode()) break;",
          "571:    gf_fprintf(dump, \"\\\" cabac_init_present_flag=\\\"%d\", pps->cabac_init_present_flag);",
          "572:    gf_fprintf(dump, \"\\\" dependent_slice_segments_enabled_flag=\\\"%d\", pps->dependent_slice_segments_enabled_flag);",
          "573:    gf_fprintf(dump, \"\\\" entropy_coding_sync_enabled_flag=\\\"%d\", pps->entropy_coding_sync_enabled_flag);",
          "574:    gf_fprintf(dump, \"\\\" lists_modification_present_flag=\\\"%d\", pps->lists_modification_present_flag);",
          "575:    gf_fprintf(dump, \"\\\" loop_filter_across_slices_enabled_flag=\\\"%d\", pps->loop_filter_across_slices_enabled_flag);",
          "576:    gf_fprintf(dump, \"\\\" loop_filter_across_tiles_enabled_flag=\\\"%d\", pps->loop_filter_across_tiles_enabled_flag);",
          "577:    gf_fprintf(dump, \"\\\" num_extra_slice_header_bits=\\\"%d\", pps->num_extra_slice_header_bits);",
          "578:    gf_fprintf(dump, \"\\\" num_ref_idx_l0_default_active=\\\"%d\", pps->num_ref_idx_l0_default_active);",
          "579:    gf_fprintf(dump, \"\\\" num_ref_idx_l1_default_active=\\\"%d\", pps->num_ref_idx_l1_default_active);",
          "580:    gf_fprintf(dump, \"\\\" tiles_enabled_flag=\\\"%d\", pps->tiles_enabled_flag);",
          "581:    if (pps->tiles_enabled_flag) {",
          "582:     gf_fprintf(dump, \"\\\" uniform_spacing_flag=\\\"%d\", pps->uniform_spacing_flag);",
          "583:     if (!pps->uniform_spacing_flag) {",
          "584:      u32 k;",
          "585:      gf_fprintf(dump, \"\\\" num_tile_columns=\\\"%d\", pps->num_tile_columns);",
          "586:      gf_fprintf(dump, \"\\\" num_tile_rows=\\\"%d\", pps->num_tile_rows);",
          "587:      gf_fprintf(dump, \"\\\" colomns_width=\\\"\");",
          "588:      for (k=0; k<pps->num_tile_columns-1; k++)",
          "589:       gf_fprintf(dump, \"%d \", pps->column_width[k]);",
          "590:      gf_fprintf(dump, \"\\\" rows_height=\\\"\");",
          "591:      for (k=0; k<pps->num_tile_rows-1; k++)",
          "592:       gf_fprintf(dump, \"%d \", pps->row_height[k]);",
          "594:    }",
          "595:    gf_fprintf(dump, \"\\\" output_flag_present_flag=\\\"%d\", pps->output_flag_present_flag);",
          "596:    gf_fprintf(dump, \"\\\" pic_init_qp_minus26=\\\"%d\", pps->pic_init_qp_minus26);",
          "597:    gf_fprintf(dump, \"\\\" slice_chroma_qp_offsets_present_flag=\\\"%d\", pps->slice_chroma_qp_offsets_present_flag);",
          "598:    gf_fprintf(dump, \"\\\" slice_segment_header_extension_present_flag=\\\"%d\", pps->slice_segment_header_extension_present_flag);",
          "599:    gf_fprintf(dump, \"\\\" weighted_pred_flag=\\\"%d\", pps->weighted_pred_flag);",
          "600:    gf_fprintf(dump, \"\\\" weighted_bipred_flag=\\\"%d\", pps->weighted_bipred_flag);",
          "602:    gf_fprintf(dump, \"\\\" sign_data_hiding_flag=\\\"%d\", pps->sign_data_hiding_flag);",
          "603:    gf_fprintf(dump, \"\\\" constrained_intra_pred_flag=\\\"%d\", pps->constrained_intra_pred_flag);",
          "604:    gf_fprintf(dump, \"\\\" transform_skip_enabled_flag=\\\"%d\", pps->transform_skip_enabled_flag);",
          "605:    gf_fprintf(dump, \"\\\" cu_qp_delta_enabled_flag=\\\"%d\", pps->cu_qp_delta_enabled_flag);",
          "606:    if (pps->cu_qp_delta_enabled_flag)",
          "607:     gf_fprintf(dump, \"\\\" diff_cu_qp_delta_depth=\\\"%d\", pps->diff_cu_qp_delta_depth);",
          "608:    gf_fprintf(dump, \"\\\" transquant_bypass_enable_flag=\\\"%d\", pps->transquant_bypass_enable_flag);",
          "609:    gf_fprintf(dump, \"\\\" pic_cb_qp_offset=\\\"%d\", pps->pic_cb_qp_offset);",
          "610:    gf_fprintf(dump, \"\\\" pic_cr_qp_offset=\\\"%d\", pps->pic_cr_qp_offset);",
          "612:    gf_fprintf(dump, \"\\\" deblocking_filter_control_present_flag=\\\"%d\", pps->deblocking_filter_control_present_flag);",
          "613:    if (pps->deblocking_filter_control_present_flag) {",
          "614:     gf_fprintf(dump, \"\\\" deblocking_filter_override_enabled_flag=\\\"%d\", pps->deblocking_filter_override_enabled_flag);",
          "615:     gf_fprintf(dump, \"\\\" pic_disable_deblocking_filter_flag=\\\"%d\", pps->pic_disable_deblocking_filter_flag);",
          "616:     gf_fprintf(dump, \"\\\" beta_offset_div2=\\\"%d\", pps->beta_offset_div2);",
          "617:     gf_fprintf(dump, \"\\\" tc_offset_div2=\\\"%d\", pps->tc_offset_div2);",
          "618:    }",
          "619:    gf_fprintf(dump, \"\\\" pic_scaling_list_data_present_flag=\\\"%d\", pps->pic_scaling_list_data_present_flag);",
          "620:    gf_fprintf(dump, \"\\\" log2_parallel_merge_level_minus2=\\\"%d\", pps->log2_parallel_merge_level_minus2);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "585:   }",
          "586:   gf_fputs(\"\\\"\", dump);",
          "589:    gf_fprintf(dump, \" slice=\\\"%s\\\" poc=\\\"%d\\\"\", (hevc->s_info.slice_type==GF_HEVC_SLICE_TYPE_I) ? \"I\" : (hevc->s_info.slice_type==GF_HEVC_SLICE_TYPE_P) ? \"P\" : (hevc->s_info.slice_type==GF_HEVC_SLICE_TYPE_B) ? \"B\" : \"Unknown\", hevc->s_info.poc);",
          "590:    gf_fprintf(dump, \" first_slice_in_pic=\\\"%d\\\"\", hevc->s_info.first_slice_segment_in_pic_flag);",
          "591:    gf_fprintf(dump, \" dependent_slice_segment=\\\"%d\\\"\", hevc->s_info.dependent_slice_segment_flag);",
          "",
          "[Removed Lines]",
          "588:   if (type < GF_HEVC_NALU_VID_PARAM) {",
          "",
          "[Added Lines]",
          "688:   if (!full_bs_dump && (type < GF_HEVC_NALU_VID_PARAM)) {",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "597:     gf_fprintf(dump, \" slice_type=\\\"%d\\\"\", hevc->s_info.slice_type);",
          "598:    }",
          "599:   }",
          "603:   if ((type == GF_HEVC_NALU_SEI_PREFIX) || (type == GF_HEVC_NALU_SEI_SUFFIX)) {",
          "604:    gf_fprintf(dump, \">\\n\");",
          "",
          "[Removed Lines]",
          "601:   gf_fprintf(dump, \" layer_id=\\\"%d\\\" temporal_id=\\\"%d\\\"\", quality_id, temporal_id);",
          "",
          "[Added Lines]",
          "700:   if (!full_bs_dump)",
          "701:    gf_fprintf(dump, \" layer_id=\\\"%d\\\" temporal_id=\\\"%d\\\"\", quality_id, temporal_id);",
          "703:   if (bs) {",
          "704:    if (!pctx)",
          "705:     gf_bs_del(bs);",
          "706:    else",
          "707:     gf_bs_set_logger(bs, NULL, NULL);",
          "708:   }",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "626:  }",
          "628:  if (vvc) {",
          "636:   }",
          "641:   switch (type) {",
          "642:   case GF_VVC_NALU_SLICE_TRAIL:",
          "643:    gf_fprintf(dump, \"Slice_TRAIL\");",
          "",
          "[Removed Lines]",
          "629:   u32 forb_zero = (ptr[0] & 0x80) ? 1 : 0;",
          "630:   u32 res_zero = (ptr[0] & 0x40) ? 1 : 0;",
          "631:   u8 lid = (ptr[0] & 0x3F);",
          "632:   u8 tid = (ptr[1] & 0x7);",
          "633:   if (forb_zero || res_zero || !tid) {",
          "634:    gf_fprintf(dump, \"error=\\\"invalid header (forb %d res_zero %d tid %d)\\\"/>\\n\", forb_zero, res_zero, tid);",
          "635:    return;",
          "637:   tid -= 1;",
          "638:   type = ptr[1]>>3;",
          "639:   res = gf_media_vvc_parse_nalu(ptr, ptr_size, vvc, &type, &lid, &tid);",
          "640:   gf_fprintf(dump, \"code=\\\"%d\\\" temporalid=\\\"%d\\\" layerid=\\\"%d\\\" type=\\\"\", type, tid, lid);",
          "",
          "[Added Lines]",
          "735:   u8 lid, tid;",
          "737:   if (full_bs_dump) {",
          "738:    if (pctx) {",
          "739:     if (!pctx->bs)",
          "740:      pctx->bs = gf_bs_new(ptr, ptr_size, GF_BITSTREAM_READ);",
          "741:     else",
          "742:      gf_bs_reassign_buffer(pctx->bs, ptr, ptr_size);",
          "743:     bs = pctx->bs;",
          "744:    } else {",
          "745:     bs = gf_bs_new(ptr, ptr_size, GF_BITSTREAM_READ);",
          "746:    }",
          "747:    if (full_bs_dump)",
          "748:     gf_bs_set_logger(bs, regular_bs_log, &lcbk);",
          "749:    res = gf_media_vvc_parse_nalu_bs(bs, vvc, &type, &lid, &tid);",
          "750:   } else {",
          "751:    bs = NULL;",
          "752:    u32 forb_zero = (ptr[0] & 0x80) ? 1 : 0;",
          "753:    u32 res_zero = (ptr[0] & 0x40) ? 1 : 0;",
          "754:    lid = (ptr[0] & 0x3F);",
          "755:    tid = (ptr[1] & 0x7);",
          "756:    if (forb_zero || res_zero || !tid) {",
          "757:     gf_fprintf(dump, \"error=\\\"invalid header (forb %d res_zero %d tid %d)\\\"/>\\n\", forb_zero, res_zero, tid);",
          "758:     return;",
          "759:    }",
          "760:    tid -= 1;",
          "761:    type = ptr[1]>>3;",
          "763:    res = gf_media_vvc_parse_nalu(ptr, ptr_size, vvc, &type, &lid, &tid);",
          "764:    gf_fprintf(dump, \"code=\\\"%d\\\" temporalid=\\\"%d\\\" layerid=\\\"%d\\\"\", type, tid, lid);",
          "765:   }",
          "766:   if (res==-1) {",
          "767:    gf_fprintf(dump, \" status=\\\"error parsing\\\"\", type);",
          "770:   gf_fprintf(dump, \" type=\\\"\");",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "671:    break;",
          "672:   case GF_VVC_NALU_VID_PARAM:",
          "673:    gf_fprintf(dump, \"VideoParameterSet\");",
          "675:     u32 j;",
          "676:     VVC_VPS *vps = &vvc->vps[vvc->last_parsed_vps_id];",
          "677:     gf_fprintf(dump, \"\\\" id=\\\"%d\\\" num_ptl=\\\"%d\\\" max_layers=\\\"%d\\\" max_sublayers=\\\"%d\", vps->id, vps->num_ptl, vps->max_layers, vps->max_sub_layers);",
          "",
          "[Removed Lines]",
          "674:    if (res>=0) {",
          "",
          "[Added Lines]",
          "804:    if ((res>=0) && !full_bs_dump) {",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "691:    break;",
          "692:   case GF_VVC_NALU_SEQ_PARAM:",
          "693:    gf_fprintf(dump, \"SequenceParameterSet\");",
          "695:     VVC_SPS *sps = &vvc->sps[vvc->last_parsed_sps_id];",
          "697:     gf_fprintf(dump, \"\\\" id=\\\"%d\\\" vps_id=\\\"%d\\\" max_sublayers=\\\"%d\\\" chroma_idc=\\\"%d\\\" bit_depth=\\\"%d\\\" CTBsizeY=\\\"%d\\\" gdr_enabled=\\\"%d\\\" ref_pic_sampling=\\\"%d\\\" subpic_info_present=\\\"%d\\\" poc_msb_cycle_flag=\\\"%d\", sps->id, sps->vps_id, sps->max_sublayers, sps->chroma_format_idc, sps->bitdepth, 1<<sps->log2_ctu_size, sps->gdr_enabled, sps->ref_pic_resampling, sps->subpic_info_present, sps->poc_msb_cycle_flag);",
          "",
          "[Removed Lines]",
          "694:    if (res>=0) {",
          "",
          "[Added Lines]",
          "824:    if ((res>=0) && !full_bs_dump) {",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "716:    break;",
          "717:   case GF_VVC_NALU_PIC_PARAM:",
          "718:    gf_fprintf(dump, \"PictureParameterSet\");",
          "720:     VVC_PPS *pps = &vvc->pps[vvc->last_parsed_pps_id];",
          "721:     gf_fprintf(dump, \"\\\" id=\\\"%d\\\" sps_id=\\\"%d\\\" width=\\\"%d\\\" height=\\\"%d\\\" mixed_nal_types=\\\"%d\\\" conf_window=\\\"%d\", pps->id, pps->sps_id, pps->width, pps->height, pps->mixed_nal_types, pps->conf_window);",
          "",
          "[Removed Lines]",
          "719:    if (res>=0) {",
          "",
          "[Added Lines]",
          "849:    if ((res>=0) && !full_bs_dump) {",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "770:   gf_fprintf(dump, \"\\\"\");",
          "774:    if (type!=GF_VVC_NALU_PIC_HEADER)",
          "775:     gf_fprintf(dump, \" picture_header_in_slice_header_flag=\\\"%d\\\"\", vvc->s_info.picture_header_in_slice_header_flag);",
          "",
          "[Removed Lines]",
          "773:   if (res>=0) {",
          "",
          "[Added Lines]",
          "903:   if ((res>=0) && !full_bs_dump) {",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "787:     gf_fprintf(dump, \" slice_type=\\\"%d\\\"\", vvc->s_info.slice_type);",
          "788:   }",
          "791:   if ((type == GF_VVC_NALU_SEI_PREFIX) || (type == GF_VVC_NALU_SEI_SUFFIX)) {",
          "792:    gf_fprintf(dump, \">\\n\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "920:   if (bs) {",
          "921:    if (!pctx)",
          "922:     gf_bs_del(bs);",
          "923:    else",
          "924:     gf_bs_set_logger(bs, NULL, NULL);",
          "925:   }",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "812:  type = ptr[0] & 0x1F;",
          "813:  nal_ref_idc = ptr[0] & 0x60;",
          "814:  nal_ref_idc>>=5;",
          "816:  res = -2;",
          "818:  if (pctx) {",
          "",
          "[Removed Lines]",
          "815:  gf_fprintf(dump, \"code=\\\"%d\\\" type=\\\"\", type);",
          "",
          "[Added Lines]",
          "951:  if (! full_bs_dump)",
          "952:   gf_fprintf(dump, \"code=\\\"%d\\\" \", type);",
          "954:  gf_fprintf(dump, \"type=\\\"\");",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "824:  } else {",
          "825:   bs = gf_bs_new(ptr, ptr_size, GF_BITSTREAM_READ);",
          "826:  }",
          "827:  switch (type) {",
          "828:  case GF_AVC_NALU_NON_IDR_SLICE:",
          "829:   gf_fputs(\"Non IDR slice\", dump);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "967:  if (full_bs_dump)",
          "968:   gf_bs_set_logger(bs, shifted_bs_log, &lcbk);",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "851:   gf_fputs(\"SequenceParameterSet\", dump);",
          "852:   if (is_encrypted) break;",
          "853:   idx = gf_avc_read_sps_bs(bs, avc, 0, NULL);",
          "856:   gf_fprintf(dump, \"\\\" frame_mbs_only_flag=\\\"%d\", avc->sps->frame_mbs_only_flag);",
          "857:   gf_fprintf(dump, \"\\\" mb_adaptive_frame_field_flag=\\\"%d\", avc->sps->mb_adaptive_frame_field_flag);",
          "858:   gf_fprintf(dump, \"\\\" vui_parameters_present_flag=\\\"%d\", avc->sps->vui_parameters_present_flag);",
          "",
          "[Removed Lines]",
          "854:   if (idx<0) gf_fprintf(dump, \"\\\" sps_id=\\\"PARSING FAILURE\");",
          "855:   else gf_fprintf(dump, \"\\\" sps_id=\\\"%d\", idx);",
          "",
          "[Added Lines]",
          "997:   if (idx<0) {",
          "998:    gf_fprintf(dump, \"\\\" sps_id=\\\"PARSING FAILURE\");",
          "999:    break;",
          "1000:   }",
          "1001:   if (full_bs_dump) break;",
          "1002:   gf_fprintf(dump, \"\\\" sps_id=\\\"%d\", idx);",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "891:   gf_fputs(\"PictureParameterSet\", dump);",
          "892:   if (is_encrypted) break;",
          "893:   idx = gf_avc_read_pps_bs(bs, avc);",
          "896:   gf_fprintf(dump, \"\\\" entropy_coding_mode_flag=\\\"%d\", avc->pps[idx].entropy_coding_mode_flag);",
          "897:   if (gf_sys_is_test_mode()) break;",
          "898:   gf_fprintf(dump, \"\\\" deblocking_filter_control_present_flag=\\\"%d\", avc->pps[idx].deblocking_filter_control_present_flag);",
          "",
          "[Removed Lines]",
          "894:   if (idx<0) gf_fprintf(dump, \"\\\" pps_id=\\\"PARSING FAILURE\\\" \");",
          "895:   else gf_fprintf(dump, \"\\\" pps_id=\\\"%d\\\" sps_id=\\\"%d\", idx, avc->pps[idx].sps_id);",
          "",
          "[Added Lines]",
          "1041:   if (idx<0) {",
          "1042:    gf_fprintf(dump, \"\\\" pps_id=\\\"PARSING FAILURE\\\" \");",
          "1043:    break;",
          "1044:   }",
          "1045:   if (full_bs_dump) break;",
          "1046:   gf_fprintf(dump, \"\\\" pps_id=\\\"%d\\\" sps_id=\\\"%d\", idx, avc->pps[idx].sps_id);",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "910:  case GF_AVC_NALU_ACCESS_UNIT:",
          "911:   gf_fputs(\"AccessUnit delimiter\", dump);",
          "912:   if (is_encrypted) break;",
          "913:   gf_fprintf(dump, \"\\\" primary_pic_type=\\\"%d\", gf_bs_read_u8(bs) >> 5);",
          "914:   break;",
          "915:  case GF_AVC_NALU_END_OF_SEQ:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1064:   if (full_bs_dump) break;",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "932:   if (is_encrypted) break;",
          "933:   idx = gf_avc_read_sps_bs(bs, avc, 1, NULL);",
          "934:   assert (idx >= 0);",
          "935:   gf_fprintf(dump, \"\\\" sps_id=\\\"%d\", idx - GF_SVC_SSPS_ID_SHIFT);",
          "936:   break;",
          "937:  case GF_AVC_NALU_SLICE_AUX:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1087:   if (full_bs_dump) break;",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "967:  }",
          "968:  gf_fputs(\"\\\"\", dump);",
          "975:  }",
          "977:  if (res == -1)",
          "",
          "[Removed Lines]",
          "970:  if (nal_ref_idc) {",
          "971:   gf_fprintf(dump, \" nal_ref_idc=\\\"%d\\\"\", nal_ref_idc);",
          "972:  }",
          "973:  if (res>=0) {",
          "974:   gf_fprintf(dump, \" poc=\\\"%d\\\" pps_id=\\\"%d\\\" field_pic_flag=\\\"%d\\\"\", avc->s_info.poc, avc->s_info.pps->id, (int)avc->s_info.field_pic_flag);",
          "",
          "[Added Lines]",
          "1123:  if (!full_bs_dump) {",
          "1124:   if (nal_ref_idc) {",
          "1125:    gf_fprintf(dump, \" nal_ref_idc=\\\"%d\\\"\", nal_ref_idc);",
          "1126:   }",
          "1127:   if (res>=0) {",
          "1128:    gf_fprintf(dump, \" poc=\\\"%d\\\" pps_id=\\\"%d\\\" field_pic_flag=\\\"%d\\\"\", avc->s_info.poc, avc->s_info.pps->id, (int)avc->s_info.field_pic_flag);",
          "1129:   }",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "980:  if (!is_encrypted && (type == GF_AVC_NALU_SEI)) {",
          "981:   gf_fprintf(dump, \">\\n\");",
          "982:   dump_sei(dump, bs, GF_FALSE);",
          "983:   gf_fprintf(dump, \"</NALU>\\n\");",
          "984:  } else {",
          "985:   gf_fprintf(dump, \"/>\\n\");",
          "986:  }",
          "988: }",
          "990: GF_EXPORT",
          "991: void gf_inspect_dump_nalu(FILE *dump, u8 *ptr, u32 ptr_size, Bool is_svc, HEVCState *hevc, AVCState *avc, VVCState *vvc, u32 nalh_size, Bool dump_crc, Bool is_encrypted)",
          "992: {",
          "994: }",
          "996: static void av1_dump_tile(FILE *dump, u32 idx, AV1Tile *tile)",
          "",
          "[Removed Lines]",
          "987:  if (bs && !pctx) gf_bs_del(bs);",
          "993:  gf_inspect_dump_nalu_internal(dump, ptr, ptr_size, is_svc, hevc, avc, vvc, nalh_size, dump_crc, is_encrypted, NULL);",
          "",
          "[Added Lines]",
          "1137:   gf_bs_set_logger(bs, NULL, NULL);",
          "1144:  if (bs) {",
          "1145:   if (!pctx)",
          "1146:    gf_bs_del(bs);",
          "1147:   else",
          "1148:    gf_bs_set_logger(bs, NULL, NULL);",
          "1149:  }",
          "1155:  gf_inspect_dump_nalu_internal(dump, ptr, ptr_size, is_svc, hevc, avc, vvc, nalh_size, dump_crc, is_encrypted, 0, NULL);",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "998:  gf_fprintf(dump, \"     <Tile number=\\\"%d\\\" start=\\\"%d\\\" size=\\\"%d\\\"/>\\n\", idx, tile->obu_start_offset, tile->size);",
          "999: }",
          "1003: {",
          "1004: #define DUMP_OBU_INT(_v) gf_fprintf(dump, #_v\"=\\\"%d\\\" \", av1->_v);",
          "1005: #define DUMP_OBU_INT2(_n, _v) gf_fprintf(dump, _n\"=\\\"%d\\\" \", _v);",
          "1008:  if (dump_crc && (obu_length<0xFFFFFFFFUL))",
          "1009:   gf_fprintf(dump, \"crc=\\\"%u\\\" \", gf_crc_32(obu, (u32) obu_length) );",
          "1010:  switch (obu_type) {",
          "1011:  case OBU_SEQUENCE_HEADER:",
          "1012:   DUMP_OBU_INT(width)",
          "1013:   DUMP_OBU_INT(height)",
          "1014:   DUMP_OBU_INT(bit_depth)",
          "",
          "[Removed Lines]",
          "1001: GF_EXPORT",
          "1002: void gf_inspect_dump_obu(FILE *dump, AV1State *av1, u8 *obu, u64 obu_length, ObuType obu_type, u64 obu_size, u32 hdr_size, Bool dump_crc)",
          "1007:  gf_fprintf(dump, \"   <OBU size=\\\"\"LLU\"\\\" type=\\\"%s\\\" header_size=\\\"%d\\\" has_size_field=\\\"%d\\\" has_ext=\\\"%d\\\" temporalID=\\\"%d\\\" spatialID=\\\"%d\\\" \", obu_size, gf_av1_get_obu_name(obu_type), hdr_size, av1->obu_has_size_field, av1->obu_extension_flag, av1->temporal_id , av1->spatial_id);",
          "",
          "[Added Lines]",
          "1163: static u64 gf_inspect_dump_obu_internal(FILE *dump, AV1State *av1, u8 *obu, u64 obu_length, ObuType obu_type, u64 obu_size, u32 hdr_size, Bool dump_crc, PidCtx *pctx, u32 full_dump)",
          "1165:  if (pctx) {",
          "1166:   InspectLogCbk lcbk;",
          "1168:   if (full_dump>=INSPECT_ANALYZE_BS) {",
          "1169:    lcbk.dump = dump;",
          "1170:    lcbk.dump_bits = (full_dump==INSPECT_ANALYZE_BS_BITS) ? GF_TRUE : GF_FALSE;",
          "1171:    gf_bs_set_logger(pctx->bs, regular_bs_log, &lcbk);",
          "1173:    gf_fprintf(dump, \"   <OBU\");",
          "1174:   }",
          "1175:   gf_av1_parse_obu(pctx->bs, &obu_type, &obu_size, &hdr_size, pctx->av1_state);",
          "1178:   if (full_dump>=INSPECT_ANALYZE_BS) {",
          "1179:    gf_bs_set_logger(pctx->bs, NULL, NULL);",
          "1180:   } else {",
          "1181:    full_dump = 0;",
          "1182:   }",
          "1183:  }",
          "1185:  if (!full_dump) {",
          "1186:   gf_fprintf(dump, \"   <OBU\");",
          "1187:  }",
          "1193:  gf_fprintf(dump, \" size=\\\"\"LLU\"\\\" type=\\\"%s\\\" header_size=\\\"%d\\\" \", obu_size, gf_av1_get_obu_name(obu_type), hdr_size);",
          "1195:  if (!full_dump) {",
          "1196:   gf_fprintf(dump, \"has_size_field=\\\"%d\\\" has_ext=\\\"%d\\\" temporalID=\\\"%d\\\" spatialID=\\\"%d\\\" \", av1->obu_has_size_field, av1->obu_extension_flag, av1->temporal_id , av1->spatial_id);",
          "1197:  }",
          "1203:   if (full_dump) break;",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "1024:   break;",
          "1025:  case OBU_FRAME_HEADER:",
          "1026:  case OBU_FRAME:",
          "1032:   }",
          "1047:  case OBU_TILE_GROUP:",
          "1048:   if (av1->frame_state.nb_tiles_in_obu) {",
          "",
          "[Removed Lines]",
          "1027:   if (av1->frame_id_numbers_present_flag) {",
          "1028:    DUMP_OBU_INT2(\"delta_frame_id_length_minus_2\", av1->delta_frame_id_length_minus_2)",
          "1029:   }",
          "1030:   if (av1->reduced_still_picture_header) {",
          "1031:    DUMP_OBU_INT(reduced_still_picture_header)",
          "1033:   DUMP_OBU_INT2(\"uncompressed_header_bytes\", av1->frame_state.uncompressed_header_bytes);",
          "1034:   if (av1->frame_state.uncompressed_header_bytes) {",
          "1035:    if (av1->frame_state.frame_type==AV1_KEY_FRAME) gf_fprintf(dump, \"frame_type=\\\"key\\\" \");",
          "1036:    else if (av1->frame_state.frame_type==AV1_INTER_FRAME) gf_fprintf(dump, \"frame_type=\\\"inter\\\" \");",
          "1037:    else if (av1->frame_state.frame_type==AV1_INTRA_ONLY_FRAME) gf_fprintf(dump, \"frame_type=\\\"intra_only\\\" \");",
          "1038:    else if (av1->frame_state.frame_type==AV1_SWITCH_FRAME) gf_fprintf(dump, \"frame_type=\\\"switch\\\" \");",
          "1039:    gf_fprintf(dump, \"refresh_frame_flags=\\\"%d\\\" \", av1->frame_state.refresh_frame_flags);",
          "1041:    DUMP_OBU_INT2(\"show_frame\", av1->frame_state.show_frame);",
          "1042:    DUMP_OBU_INT2(\"show_existing_frame\", av1->frame_state.show_existing_frame);",
          "1043:   }",
          "1044:   if (obu_type==OBU_FRAME_HEADER)",
          "1045:    break;",
          "",
          "[Added Lines]",
          "1219:   if (!full_dump) {",
          "1220:    if (av1->frame_id_numbers_present_flag) {",
          "1221:     DUMP_OBU_INT2(\"delta_frame_id_length_minus_2\", av1->delta_frame_id_length_minus_2)",
          "1222:    }",
          "1223:    if (av1->reduced_still_picture_header) {",
          "1224:     DUMP_OBU_INT(reduced_still_picture_header)",
          "1225:    }",
          "1226:    DUMP_OBU_INT2(\"uncompressed_header_bytes\", av1->frame_state.uncompressed_header_bytes);",
          "1227:    if (av1->frame_state.uncompressed_header_bytes) {",
          "1228:     if (av1->frame_state.frame_type==AV1_KEY_FRAME) gf_fprintf(dump, \"frame_type=\\\"key\\\" \");",
          "1229:     else if (av1->frame_state.frame_type==AV1_INTER_FRAME) gf_fprintf(dump, \"frame_type=\\\"inter\\\" \");",
          "1230:     else if (av1->frame_state.frame_type==AV1_INTRA_ONLY_FRAME) gf_fprintf(dump, \"frame_type=\\\"intra_only\\\" \");",
          "1231:     else if (av1->frame_state.frame_type==AV1_SWITCH_FRAME) gf_fprintf(dump, \"frame_type=\\\"switch\\\" \");",
          "1232:     gf_fprintf(dump, \"refresh_frame_flags=\\\"%d\\\" \", av1->frame_state.refresh_frame_flags);",
          "1234:     DUMP_OBU_INT2(\"show_frame\", av1->frame_state.show_frame);",
          "1235:     DUMP_OBU_INT2(\"show_existing_frame\", av1->frame_state.show_existing_frame);",
          "1236:    }",
          "1237:    if (obu_type==OBU_FRAME_HEADER)",
          "1238:     break;",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "1063:  }",
          "1064:  if (obu_type != OBU_TILE_GROUP)",
          "1065:   gf_fprintf(dump, \"/>\\n\");",
          "1066: }",
          "1068: static void gf_inspect_dump_prores_internal(FILE *dump, u8 *ptr, u64 frame_size, Bool dump_crc, PidCtx *pctx)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1261:  return obu_size;",
          "1262: }",
          "1264: GF_EXPORT",
          "1265: void gf_inspect_dump_obu(FILE *dump, AV1State *av1, u8 *obu, u64 obu_length, ObuType obu_type, u64 obu_size, u32 hdr_size, Bool dump_crc)",
          "1266: {",
          "1267:  gf_inspect_dump_obu_internal(dump, av1, obu, obu_length, obu_type, obu_size, hdr_size, dump_crc, NULL, 0);",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "1399:    gf_free(pctx->av1_state);",
          "1400:   }",
          "1401: #endif",
          "1402:   if (pctx->bs) gf_bs_del(pctx->bs);",
          "1403:   gf_free(pctx);",
          "1404:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1604:   if (pctx->vpcc) gf_odf_vp_cfg_del(pctx->vpcc);",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "1998:  gf_fprintf(dump, \" time=\\\"%s%02d:%02d:%02d:%02d\\\"/>\\n\", neg ? \"-\" : \"\", h, m, s, f);",
          "1999: }",
          "2001: static void inspect_dump_packet(GF_InspectCtx *ctx, FILE *dump, GF_FilterPacket *pck, u32 pid_idx, u64 pck_num, PidCtx *pctx)",
          "2002: {",
          "2003:  u32 idx=0, size, sap;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2204: static void inspect_dump_vpx(GF_InspectCtx *ctx, FILE *dump, u8 *ptr, u64 frame_size, Bool dump_crc, PidCtx *pctx, u32 vpversion)",
          "2205: {",
          "2206:  GF_Err e;",
          "2207:  Bool key_frame = GF_FALSE;",
          "2208:  u32 width = 0, height = 0, renderWidth, renderHeight;",
          "2209:  u32 num_frames_in_superframe = 0, superframe_index_size = 0, i = 0;",
          "2210:  u32 frame_sizes[VP9_MAX_FRAMES_IN_SUPERFRAME];",
          "2211:  gf_bs_reassign_buffer(pctx->bs, ptr, frame_size);",
          "2212:  InspectLogCbk lcbk;",
          "2214:  if (ctx->analyze>=INSPECT_ANALYZE_BS) {",
          "2215:   lcbk.dump = dump;",
          "2216:   lcbk.dump_bits = ctx->analyze==INSPECT_ANALYZE_BS_BITS ? GF_TRUE : GF_FALSE;",
          "2217:   gf_bs_set_logger(pctx->bs, regular_bs_log, &lcbk);",
          "2218:  }",
          "2221:  e = gf_media_vp9_parse_superframe(pctx->bs, frame_size, &num_frames_in_superframe, frame_sizes, &superframe_index_size);",
          "2223:  gf_fprintf(dump, \"<VP%d%sFrame\", vpversion, superframe_index_size ? \"Super\" : \"\");",
          "2224:  if (e) {",
          "2225:   gf_fprintf(dump, \" status=\\\"error parsing superframe\\\"/>\\n\");",
          "2226:   gf_bs_set_logger(pctx->bs, NULL, NULL);",
          "2227:   return;",
          "2228:  }",
          "2229:  if (superframe_index_size)",
          "2230:   gf_fprintf(dump, \" nb_frames=\\\"%u\\\" index_size=\\\"%u\\\">\\n\", num_frames_in_superframe, superframe_index_size);",
          "2231:  else {",
          "2232:   assert(num_frames_in_superframe==1);",
          "2233:  }",
          "2234:  for (i = 0; i < num_frames_in_superframe; ++i) {",
          "2235:   u64 pos2 = gf_bs_get_position(pctx->bs);",
          "2237:   if (superframe_index_size)",
          "2238:    gf_fprintf(dump, \"<VP%dFrame\", vpversion);",
          "2240:   gf_fprintf(dump, \" size=\\\"%u\\\"\", frame_sizes[i]);",
          "2241:   if (gf_media_vp9_parse_sample(pctx->bs, pctx->vpcc, &key_frame, &width, &height, &renderWidth, &renderHeight) != GF_OK) {",
          "2242:    gf_fprintf(dump, \" status=\\\"error parsing frame\\\"/>\\n\");",
          "2243:    goto exit;",
          "2244:   }",
          "2245:   gf_fprintf(dump, \" key_frame=\\\"%u\\\" width=\\\"%u\\\" height=\\\"%u\\\" renderWidth=\\\"%u\\\" renderHeight=\\\"%u\\\"\", key_frame, width, height, renderWidth, renderHeight);",
          "2246:   e = gf_bs_seek(pctx->bs, pos2 + frame_sizes[i]);",
          "2247:   if (e) {",
          "2248:    gf_fprintf(dump, \" status=\\\"error seeking %s (offset \"LLU\")\\\"/>\\n\", gf_error_to_string(e), pos2 + frame_sizes[i]);",
          "2249:    goto exit;",
          "2250:   }",
          "2252:   gf_fprintf(dump, \"/>\\n\");",
          "2253:  }",
          "2255: exit:",
          "2256:  if (superframe_index_size)",
          "2257:   gf_fprintf(dump, \"</VP%dSuperFrame>\\n\", vpversion);",
          "2258:  gf_bs_set_logger(pctx->bs, NULL, NULL);",
          "2259: }",
          "2261: static void inspect_dump_ac3_eac3(GF_InspectCtx *ctx, FILE *dump, u8 *ptr, u64 frame_size, Bool dump_crc, PidCtx *pctx, Bool is_ec3)",
          "2262: {",
          "2263:  GF_AC3Header hdr;",
          "2264:  InspectLogCbk lcbk;",
          "2266:  if (!pctx->bs) pctx->bs = gf_bs_new(ptr, frame_size, GF_BITSTREAM_READ);",
          "2267:  else gf_bs_reassign_buffer(pctx->bs, ptr, frame_size);",
          "2269:  if (ctx->analyze>=INSPECT_ANALYZE_BS) {",
          "2270:   lcbk.dump = dump;",
          "2271:   lcbk.dump_bits = ctx->analyze==INSPECT_ANALYZE_BS_BITS ? GF_TRUE : GF_FALSE;",
          "2272:   gf_bs_set_logger(pctx->bs, regular_bs_log, &lcbk);",
          "2273:  }",
          "2274:  gf_fprintf(dump, \"<%sSample \", is_ec3 ? \"EC3\" : \"AC3\");",
          "2275:  memset(&hdr, 0, sizeof(GF_AC3Header));",
          "2276:  gf_ac3_parser_bs(pctx->bs, &hdr, GF_TRUE);",
          "2277:  if (ctx->analyze<INSPECT_ANALYZE_BS) {",
          "2278:   gf_fprintf(dump, \"bitrate=\\\"%u\\\" channels=\\\"%u\\\" framesize=\\\"%u\\\"\", hdr.bitrate, hdr.channels, hdr.framesize);",
          "2279:   if (hdr.is_ec3) {",
          "2280:    gf_fprintf(dump, \" nb_streams=\\\"%u\\\" \", hdr.nb_streams);",
          "2281:   }",
          "2282:  }",
          "2284:  gf_fprintf(dump, \"/>\\n\");",
          "2285:  gf_bs_set_logger(pctx->bs, NULL, NULL);",
          "2286: }",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "2184:     break;",
          "2185:    } else {",
          "2186:     gf_fprintf(dump, \"   <NALU size=\\\"%d\\\" \", nal_size);",
          "2188:    }",
          "2189:    idx++;",
          "2190:    data += nal_size;",
          "",
          "[Removed Lines]",
          "2187:     gf_inspect_dump_nalu_internal(dump, data, nal_size, pctx->has_svcc ? 1 : 0, pctx->hevc_state, pctx->avc_state, pctx->vvc_state, pctx->nalu_size_length, ctx->crc, pctx->is_cenc_protected, pctx);",
          "",
          "[Added Lines]",
          "2474:     gf_inspect_dump_nalu_internal(dump, data, nal_size, pctx->has_svcc ? 1 : 0, pctx->hevc_state, pctx->avc_state, pctx->vvc_state, pctx->nalu_size_length, ctx->crc, pctx->is_cenc_protected, ctx->analyze, pctx);",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "2193:  } else if (pctx->av1_state) {",
          "2194:   gf_bs_reassign_buffer(pctx->bs, data, size);",
          "2195:   while (size) {",
          "2201:    if (obu_size > size) {",
          "2202:     gf_fprintf(dump, \"   <!-- OBU is corrupted: size is %d but only %d remains -->\\n\", (u32) obu_size, size);",
          "2203:     break;",
          "2204:    }",
          "2207:    data += obu_size;",
          "2208:    size -= (u32)obu_size;",
          "2209:    idx++;",
          "",
          "[Removed Lines]",
          "2196:    ObuType obu_type;",
          "2197:    u64 obu_size;",
          "2198:    u32 hdr_size;",
          "2199:    gf_av1_parse_obu(pctx->bs, &obu_type, &obu_size, &hdr_size, pctx->av1_state);",
          "2206:    gf_inspect_dump_obu(dump, pctx->av1_state, (char *) data, obu_size, obu_type, obu_size, hdr_size, ctx->crc);",
          "",
          "[Added Lines]",
          "2483:    ObuType obu_type = 0;",
          "2484:    u64 obu_size = 0;",
          "2485:    u32 hdr_size = 0;",
          "2488:    obu_size = gf_inspect_dump_obu_internal(dump, pctx->av1_state, (char *) data, obu_size, obu_type, obu_size, hdr_size, ctx->crc, pctx, ctx->analyze);",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "2265:   case GF_CODECID_MHAS:",
          "2266:    gf_inspect_dump_mhas(dump, (char *) data, size, ctx->crc, pctx);",
          "2267:    break;",
          "2269:   }",
          "2270:  }",
          "2271: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2555:   case GF_CODECID_VP8:",
          "2556:    inspect_dump_vpx(ctx, dump, (char *) data, size, ctx->crc, pctx, 8);",
          "2557:    break;",
          "2558:   case GF_CODECID_VP9:",
          "2559:    inspect_dump_vpx(ctx, dump, (char *) data, size, ctx->crc, pctx, 9);",
          "2560:    break;",
          "2561:   case GF_CODECID_AC3:",
          "2562:    inspect_dump_ac3_eac3(ctx, dump, (char *) data, size, ctx->crc, pctx, 0);",
          "2563:    break;",
          "2564:   case GF_CODECID_EAC3:",
          "2565:    inspect_dump_ac3_eac3(ctx, dump, (char *) data, size, ctx->crc, pctx, 1);",
          "2566:    break;",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "2278:   for (i=0; i<gf_list_count(arr); i++) {\\",
          "2279:    slc = gf_list_get(arr, i);\\",
          "2280:    gf_fprintf(dump, \"   <NALU size=\\\"%d\\\" \", slc->size);\\",
          "2282:   }\\",
          "2283:   gf_fprintf(dump, \"  </%sArray>\\n\", name);\\",
          "2284:  }\\",
          "",
          "[Removed Lines]",
          "2281:    gf_inspect_dump_nalu_internal(dump, slc->data, slc->size, _is_svc, pctx->hevc_state, pctx->avc_state, pctx->vvc_state, nalh_size, ctx->crc, GF_FALSE, pctx);\\",
          "",
          "[Added Lines]",
          "2579:    gf_inspect_dump_nalu_internal(dump, slc->data, slc->size, _is_svc, pctx->hevc_state, pctx->avc_state, pctx->vvc_state, nalh_size, ctx->crc, GF_FALSE, ctx->analyze, pctx);\\",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "2308:   gf_m4v_parser_del(pctx->mv124_state);",
          "2309:   pctx->mv124_state = NULL;",
          "2310:  }",
          "2311: }",
          "2312: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2609:  if (pctx->vpcc) gf_odf_vp_cfg_del(pctx->vpcc);",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "2600:   idx = 1;",
          "2601:   for (i=0; i<gf_list_count(pctx->av1_state->config->obu_array); i++) {",
          "2605:    GF_AV1_OBUArrayEntry *obu = gf_list_get(pctx->av1_state->config->obu_array, i);",
          "2607:    if (!pctx->bs)",
          "2609:    else",
          "2610:     gf_bs_reassign_buffer(pctx->bs, (const u8 *)obu->obu, (u32) obu->obu_length);",
          "2614:    idx++;",
          "2615:   }",
          "2616: #endif",
          "",
          "[Removed Lines]",
          "2602:    ObuType obu_type;",
          "2603:    u64 obu_size;",
          "2604:    u32 hdr_size;",
          "2608:     pctx->bs = gf_bs_new((const u8 *)obu->obu, (u32) obu->obu_length, GF_BITSTREAM_READ);",
          "2612:    gf_av1_parse_obu(pctx->bs, &obu_type, &obu_size, &hdr_size, pctx->av1_state);",
          "2613:    gf_inspect_dump_obu(dump, pctx->av1_state, (char*)obu->obu, obu->obu_length, obu_type, obu_size, hdr_size, ctx->crc);",
          "",
          "[Added Lines]",
          "2901:    ObuType obu_type=0;",
          "2902:    u64 obu_size = 0;",
          "2903:    u32 hdr_size = 0;",
          "2907:     pctx->bs = gf_bs_new((const u8 *) obu->obu, (u32) obu->obu_length, GF_BITSTREAM_READ);",
          "2911:    gf_inspect_dump_obu_internal(dump, pctx->av1_state, (char*)obu->obu, obu->obu_length, obu_type, obu_size, hdr_size, ctx->crc, pctx, ctx->analyze);",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "2657:    gf_fputc(dsi->value.data.ptr[i], dump);",
          "2658:   }",
          "2659:   gf_fprintf(dump, \"\\n </XMLTextConfig>\\n\");",
          "2662:  case GF_CODECID_SUBS_TEXT:",
          "2663:  case GF_CODECID_META_TEXT:",
          "2664:   if (!dsi) {",
          "",
          "[Removed Lines]",
          "2660:   gf_fprintf(dump, \"/>\\n\");",
          "2661:   return;",
          "",
          "[Added Lines]",
          "2958:   break;",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "2672:   }",
          "2673:   gf_fprintf(dump, \"]]>\\n\");",
          "2674:   gf_fprintf(dump, \" </TextConfig>\\n\");",
          "2677:  case GF_CODECID_APCH:",
          "2678:  case GF_CODECID_APCN:",
          "2679:  case GF_CODECID_APCS:",
          "",
          "[Removed Lines]",
          "2675:   gf_fprintf(dump, \"/>\\n\");",
          "2676:   return;",
          "",
          "[Added Lines]",
          "2972:   break;",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "2684:   return;",
          "2685:  case GF_CODECID_MPHA:",
          "2686:  case GF_CODECID_MHAS:",
          "2687:   if (dsi) {",
          "2689:    if (!pctx->bs)",
          "2690:     pctx->bs = gf_bs_new(dsi->value.data.ptr, dsi->value.data.size, GF_BITSTREAM_READ);",
          "2691:    else",
          "2692:     gf_bs_reassign_buffer(pctx->bs, dsi->value.data.ptr, dsi->value.data.size);",
          "2705:    }",
          "2706:    gf_fprintf(dump, \"/>\\n\");",
          "2707:   }",
          "2708:   gf_fprintf(dump, \"/>\\n\");",
          "2709:   return;",
          "2710:  default:",
          "2712:   gf_fprintf(dump, \"/>\\n\");",
          "2713:   return;",
          "2714:  }",
          "",
          "[Removed Lines]",
          "2688:    u16 size;",
          "2694:    gf_fprintf(dump, \" <MPEGHAudioConfig\");",
          "2695:    gf_fprintf(dump, \" version=\\\"%d\\\"\", gf_bs_read_u8(pctx->bs) );",
          "2696:    gf_fprintf(dump, \" ProfileLevelIndication=\\\"%d\\\"\", gf_bs_read_u8(pctx->bs) );",
          "2697:    gf_fprintf(dump, \" ReferenceChannelLayout=\\\"%d\\\"\", gf_bs_read_u8(pctx->bs) );",
          "2698:    size = gf_bs_read_u16(pctx->bs);",
          "2699:    if (size) {",
          "2700:     gf_fprintf(dump, \">\\n\");",
          "2701:     dump_mha_config(dump, pctx->bs, \"  \");",
          "2702:     gf_fprintf(dump, \" </MPEGHAudioConfig>\\n\");",
          "2703:    } else {",
          "2704:     gf_fprintf(dump, \"/>\\n\");",
          "2711:   GF_LOG(GF_LOG_WARNING, GF_LOG_AUTHOR, (\"[Inspect] bitstream analysis for codec %s not supported\\n\", gf_codecid_name(pctx->codec_id)));",
          "",
          "[Added Lines]",
          "2983:   if (!dsi) {",
          "2984:    gf_fprintf(dump, \"/>\\n\");",
          "2985:    return;",
          "2986:   }",
          "2987:   {",
          "2988:   u16 size;",
          "2989:   if (!pctx->bs)",
          "2990:    pctx->bs = gf_bs_new(dsi->value.data.ptr, dsi->value.data.size, GF_BITSTREAM_READ);",
          "2991:   else",
          "2992:    gf_bs_reassign_buffer(pctx->bs, dsi->value.data.ptr, dsi->value.data.size);",
          "2994:   gf_fprintf(dump, \" <MPEGHAudioConfig\");",
          "2995:   gf_fprintf(dump, \" version=\\\"%d\\\"\", gf_bs_read_u8(pctx->bs) );",
          "2996:   gf_fprintf(dump, \" ProfileLevelIndication=\\\"%d\\\"\", gf_bs_read_u8(pctx->bs) );",
          "2997:   gf_fprintf(dump, \" ReferenceChannelLayout=\\\"%d\\\"\", gf_bs_read_u8(pctx->bs) );",
          "2998:   size = gf_bs_read_u16(pctx->bs);",
          "2999:   if (size) {",
          "3000:    gf_fprintf(dump, \">\\n\");",
          "3001:    dump_mha_config(dump, pctx->bs, \"  \");",
          "3002:    gf_fprintf(dump, \" </MPEGHAudioConfig>\\n\");",
          "3003:   } else {",
          "3004:    gf_fprintf(dump, \"/>\\n\");",
          "3005:   }",
          "3006:   gf_fprintf(dump, \"/>\\n\");",
          "3007:   }",
          "3008:   break;",
          "3009:  case GF_CODECID_VP8:",
          "3010:  case GF_CODECID_VP9:",
          "3011:   if (!dsi) {",
          "3012:    gf_fprintf(dump, \"/>\\n\");",
          "3013:    return;",
          "3014:   }",
          "3016: #ifndef GPAC_DISABLE_AV_PARSERS",
          "3017:   inspect_reset_parsers(pctx, NULL);",
          "3018: #endif",
          "3020:   pctx->vpcc = gf_odf_vp_cfg_read(dsi->value.data.ptr, dsi->value.data.size);",
          "3021:   gf_fprintf(dump, \">\\n\");",
          "3022:   if (pctx->vpcc) {",
          "3023:    u32 v = (pctx->codec_id==GF_CODECID_VP9) ? 9 : 8;",
          "3024:    gf_fprintf(dump, \"<VP%dConfiguration profile=\\\"%d\\\" level=\\\"%d\\\" bit_depth=\\\"%u\\\" chroma_subsampling=\\\"%u\\\" colour_primaries=\\\"%u\\\" transfer_characteristics=\\\"%u\\\" matrix_coefficients=\\\"%u\\\" video_full_range=\\\"%u\\\"\", v,",
          "3025:     pctx->vpcc->profile, pctx->vpcc->level, pctx->vpcc->bit_depth, pctx->vpcc->chroma_subsampling, pctx->vpcc->colour_primaries, pctx->vpcc->transfer_characteristics, pctx->vpcc->matrix_coefficients, pctx->vpcc->video_fullRange_flag",
          "3026:    );",
          "3027:    if (pctx->vpcc->codec_initdata && pctx->vpcc->codec_initdata_size) {",
          "3028:     gf_fprintf(dump, \" init_data=\\\"\");",
          "3029:     for (idx=0; idx<pctx->vpcc->codec_initdata_size; idx++)",
          "3030:      gf_fprintf(dump, \"%02X\", (unsigned char) pctx->vpcc->codec_initdata[idx]);",
          "3031:     gf_fprintf(dump, \"\\\"\");",
          "3032:    }",
          "3033:    gf_fprintf(dump, \"/>\\n\");",
          "3034:   }",
          "3035:   break;",
          "3037:  case GF_CODECID_AAC_MPEG4:",
          "3038:  case GF_CODECID_AAC_MPEG2_MP:",
          "3039:  case GF_CODECID_AAC_MPEG2_LCP:",
          "3040:  case GF_CODECID_AAC_MPEG2_SSRP:",
          "3041:  case GF_CODECID_USAC:",
          "3042:   if (!pctx->no_analysis) {",
          "3043:    pctx->no_analysis = GF_TRUE;",
          "3044:    GF_LOG(GF_LOG_WARNING, GF_LOG_AUTHOR, (\"[Inspect] bitstream analysis for codec %s not supported, only configuration is\\n\", gf_codecid_name(pctx->codec_id)));",
          "3045:   }",
          "3047:    GF_M4ADecSpecInfo acfg;",
          "3048:    InspectLogCbk lcbk;",
          "3050:    gf_fprintf(dump, \">\\n\");",
          "3051:    gf_fprintf(dump, \"<MPEG4AudioConfiguration\");",
          "3058:    if (ctx->analyze>=INSPECT_ANALYZE_BS) {",
          "3059:     lcbk.dump = dump;",
          "3060:     lcbk.dump_bits = (ctx->analyze==INSPECT_ANALYZE_BS_BITS) ? GF_TRUE : GF_FALSE;",
          "3061:     gf_bs_set_logger(pctx->bs, regular_bs_log, &lcbk);",
          "3062:    }",
          "3064:    gf_m4a_parse_config(pctx->bs, &acfg, GF_TRUE);",
          "3065:    if (ctx->analyze<INSPECT_ANALYZE_BS) {",
          "3066:     gf_fprintf(dump, \"base_object_type=\\\"%u\\\" sample_rate=\\\"%u\\\" channels=\\\"%u\\\" \", acfg.base_object_type, acfg.base_sr, acfg.nb_chan);",
          "3067:     if (acfg.has_sbr)",
          "3068:      gf_fprintf(dump, \"sbr_sample_rate=\\\"%u\\\" \", acfg.sbr_sr);",
          "3069:     if (acfg.has_ps)",
          "3070:      gf_fprintf(dump, \"parametricStereo=\\\"yes\\\" \");",
          "3072:    if (acfg.comments[0])",
          "3073:     gf_fprintf(dump, \"comments=\\\"%s\\\" \", acfg.comments);",
          "3075:   } else {",
          "3076:    gf_fprintf(dump, \"/>\\n\");",
          "3077:    return;",
          "3079:   break;",
          "3080:  case GF_CODECID_AC3:",
          "3081:  case GF_CODECID_EAC3:",
          "3086:   if (!pctx->no_analysis) {",
          "3087:    pctx->no_analysis = GF_TRUE;",
          "3088:    GF_LOG(GF_LOG_WARNING, GF_LOG_AUTHOR, (\"[Inspect] bitstream analysis for codec %s not supported\\n\", gf_codecid_name(pctx->codec_id)));",
          "3089:   }",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "2796:    if (ctx->is_prober) {",
          "2797:     nb_done++;",
          "2798:    } else {",
          "2800:     if (ctx->fmt) {",
          "2801:      inspect_dump_packet_fmt(ctx, pctx->tmp, pck, pctx, pctx->pck_num);",
          "2802:     } else {",
          "",
          "[Removed Lines]",
          "2799:     GF_LOG(GF_LOG_DEBUG, GF_LOG_AUTHOR, (\"[Inspec] PID %d (codec %s) dump packet CTS \"LLU\"\\n\", pctx->idx, gf_codecid_name(pctx->codec_id), gf_filter_pck_get_cts(pck) ));",
          "",
          "[Added Lines]",
          "3176:     GF_LOG(GF_LOG_DEBUG, GF_LOG_AUTHOR, (\"[Inspect] PID %d (codec %s) dump packet CTS \"LLU\"\\n\", pctx->idx, gf_codecid_name(pctx->codec_id), gf_filter_pck_get_cts(pck) ));",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "2816:     GF_FilterEvent evt;",
          "2817:     GF_FEVT_INIT(evt, GF_FEVT_STOP, pctx->src_pid);",
          "2820:     gf_filter_pid_drop_packet(pctx->src_pid);",
          "2822:     gf_filter_pid_send_event(pctx->src_pid, &evt);",
          "",
          "[Removed Lines]",
          "2819:     GF_LOG(GF_LOG_INFO, GF_LOG_AUTHOR, (\"[Inspec] PID %d (codec %s) done dumping, aborting\\n\", pctx->idx, gf_codecid_name(pctx->codec_id) ));",
          "",
          "[Added Lines]",
          "3196:     GF_LOG(GF_LOG_INFO, GF_LOG_AUTHOR, (\"[Inspect] PID %d (codec %s) done dumping, aborting\\n\", pctx->idx, gf_codecid_name(pctx->codec_id) ));",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "3010:   return GF_OK;",
          "3011:  }",
          "3013:  if (!ctx->log) return GF_BAD_PARAM;",
          "3014:  if (!strcmp(ctx->log, \"stderr\")) ctx->dump = stderr;",
          "3015:  else if (!strcmp(ctx->log, \"stdout\")) ctx->dump = stdout;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3390: #ifdef GPAC_DISABLE_AVPARSE_LOGS",
          "3391:  if (ctx->analyze>=INSPECT_ANALYZE_BS) {",
          "3392:   GF_LOG(GF_LOG_ERROR, GF_LOG_AUTHOR, (\"[Inspect] Bitstream logging is disable in this build\\n\"));",
          "3393:   return GF_NOT_SUPPORTED;",
          "3394:  }",
          "3395: #endif",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "3017:  else {",
          "3018:   ctx->dump = gf_fopen(ctx->log, \"wt\");",
          "3019:   if (!ctx->dump) {",
          "3021:    return GF_IO_ERR;",
          "3022:   }",
          "3023:  }",
          "",
          "[Removed Lines]",
          "3020:    GF_LOG(GF_LOG_ERROR, GF_LOG_AUTHOR, (\"[Inspec] Failed to open file %s\\n\", ctx->log));",
          "",
          "[Added Lines]",
          "3404:    GF_LOG(GF_LOG_ERROR, GF_LOG_AUTHOR, (\"[Inspect] Failed to open file %s\\n\", ctx->log));",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "3083:  { OFFS(speed), \"set playback command speed. If speed is negative and start is 0, start is set to -1\", GF_PROP_DOUBLE, \"1.0\", NULL, 0},",
          "3084:  { OFFS(start), \"set playback start offset. Negative value means percent of media dur with -1 <=> dur\", GF_PROP_DOUBLE, \"0.0\", NULL, 0},",
          "3085:  { OFFS(dur), \"set inspect duration\", GF_PROP_FRACTION, \"0/0\", NULL, 0},",
          "3087:  { OFFS(xml), \"use xml formatting (implied if (-analyze]() is set) and disable [-fmt]()\", GF_PROP_BOOL, \"false\", NULL, GF_FS_ARG_UPDATE},",
          "3088:  { OFFS(crc), \"dump crc of NALU/OBU/... when analyzing\", GF_PROP_BOOL, \"false\", NULL, GF_FS_ARG_UPDATE},",
          "3089:  { OFFS(fftmcd), \"consider timecodes use ffmpeg-compatible signaling rather than QT compliant one\", GF_PROP_BOOL, \"false\", NULL, GF_FS_ARG_HINT_EXPERT|GF_FS_ARG_UPDATE},",
          "",
          "[Removed Lines]",
          "3086:  { OFFS(analyze), \"analyze sample content (NALU, OBU)\", GF_PROP_BOOL, \"false\", NULL, GF_FS_ARG_HINT_ADVANCED|GF_FS_ARG_UPDATE},",
          "",
          "[Added Lines]",
          "3470:  { OFFS(analyze), \"analyze sample content (NALU, OBU)\"",
          "3471:  \"- off: no analyzing\\n\"",
          "3472:  \"- on: simple analyzing\\n\"",
          "3473:  \"- bs: log bitstream syntax (all elements read from bitstream)\\n\"",
          "3474:  \"- full: log bitstream syntax and bit sizes signaled as `(N)` after field value, except 1-bit fields (ommited)\", GF_PROP_UINT, \"off\", \"off|on|bs|full\", GF_FS_ARG_HINT_ADVANCED|GF_FS_ARG_UPDATE},",
          "",
          "---------------"
        ],
        "src/filters/isoffin_read.c||src/filters/isoffin_read.c": [
          "File: src/filters/isoffin_read.c -> src/filters/isoffin_read.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1479:  \"- 4CC: declares first track with matching 4CC for handler type\", GF_PROP_STRING, NULL, NULL, GF_FS_ARG_HINT_EXPERT},",
          "1480:  { OFFS(stsd), \"only extract sample mapped to the given sample desciption index. 0 means no filter\", GF_PROP_UINT, \"0\", NULL, GF_FS_ARG_HINT_EXPERT},",
          "1481:  { OFFS(mov), \"pointer to a read/edit ISOBMF file used internally by importers and exporters\", GF_PROP_POINTER, NULL, NULL, GF_FS_ARG_HINT_HIDE},",
          "1483:  { OFFS(catseg), \"append the given segment to the movie at init time (only local file supported)\", GF_PROP_STRING, NULL, NULL, GF_FS_ARG_HINT_HIDE},",
          "1484:  { OFFS(nocrypt), \"signal encrypted tracks as non encrypted (mostly used for export)\", GF_PROP_BOOL, NULL, NULL, GF_FS_ARG_HINT_ADVANCED},",
          "1485:  { OFFS(mstore_size), \"target buffer size in bytes\", GF_PROP_UINT, \"1000000\", NULL, GF_FS_ARG_HINT_EXPERT},",
          "",
          "[Removed Lines]",
          "1482:  { OFFS(analyze), \"skip reformat of decoder config and SEI and dispatch all NAL in input order - shall only be used with inspect filter analyze mode!\", GF_PROP_BOOL, \"false\", NULL, GF_FS_ARG_HINT_HIDE},",
          "",
          "[Added Lines]",
          "1482:  { OFFS(analyze), \"skip reformat of decoder config and SEI and dispatch all NAL in input order - shall only be used with inspect filter analyze mode!\", GF_PROP_UINT, \"off\", \"off|on|bs|full\", GF_FS_ARG_HINT_HIDE},",
          "",
          "---------------"
        ],
        "src/filters/reframe_nalu.c||src/filters/reframe_nalu.c": [
          "File: src/filters/reframe_nalu.c -> src/filters/reframe_nalu.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3866:  { OFFS(deps), \"import samples dependencies information\", GF_PROP_BOOL, \"false\", NULL, GF_FS_ARG_HINT_EXPERT},",
          "3867:  { OFFS(seirw), \"rewrite AVC sei messages for ISOBMFF constraints\", GF_PROP_BOOL, \"true\", NULL, GF_FS_ARG_HINT_EXPERT},",
          "3868:  { OFFS(audelim), \"keep Access Unit delimiter in payload\", GF_PROP_BOOL, \"false\", NULL, GF_FS_ARG_HINT_EXPERT},",
          "3870:  {0}",
          "3871: };",
          "",
          "[Removed Lines]",
          "3869:  { OFFS(analyze), \"skip reformat of decoder config and SEI and dispatch all NAL in input order - shall only be used with inspect filter analyze mode!\", GF_PROP_BOOL, \"false\", NULL, GF_FS_ARG_HINT_HIDE},",
          "",
          "[Added Lines]",
          "3869:  { OFFS(analyze), \"skip reformat of decoder config and SEI and dispatch all NAL in input order - shall only be used with inspect filter analyze mode!\", GF_PROP_UINT, \"off\", \"off|on|bs|full\", GF_FS_ARG_HINT_HIDE},",
          "",
          "---------------"
        ],
        "src/media_tools/av_parsers.c||src/media_tools/av_parsers.c": [
          "File: src/media_tools/av_parsers.c -> src/media_tools/av_parsers.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "33: #include <gpac/internal/ogg.h>",
          "34: #endif",
          "36: static const struct {",
          "37:  u32 w, h;",
          "38: } std_par[] =",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "39: #ifndef GPAC_DISABLE_AVPARSE_LOGS",
          "40: void gf_bs_log_idx(GF_BitStream *bs, u32 nBits, const char *fname, s64 val, s32 idx1, s32 idx2, s32 idx3);",
          "42: #define gf_bs_log(_bs, _nBits, _fname, _val) gf_bs_log_idx(_bs, _nBits, _fname, _val, -1, -1, -1)",
          "44: u32 gf_bs_read_int_log_idx3(GF_BitStream *bs, u32 nBits, const char *fname, s32 idx1, s32 idx2, s32 idx3)",
          "45: {",
          "46:  u32 val = gf_bs_read_int(bs, nBits);",
          "47:  gf_bs_log_idx(bs, nBits, fname, val, idx1, idx2, idx3);",
          "48:  return val;",
          "49: }",
          "51: #define gf_bs_read_int_log(_bs, _nBits, _fname) gf_bs_read_int_log_idx3(_bs, _nBits, _fname, -1, -1, -1)",
          "52: #define gf_bs_read_int_log_idx(_bs, _nBits, _fname, _idx) gf_bs_read_int_log_idx3(_bs, _nBits, _fname, _idx, -1, -1)",
          "53: #define gf_bs_read_int_log_idx2(_bs, _nBits, _fname, _idx1, _idx2) gf_bs_read_int_log_idx3(_bs, _nBits, _fname, (s32) _idx1, (s32) _idx2, -1)",
          "56: #else",
          "58: #define gf_bs_log(_bs, _nBits, _fname, _val)",
          "59: #define gf_bs_log_idx(_bs, _nBits, _fname, _val, _idx1, _idx2, _idx3)",
          "61: #define gf_bs_read_int_log(_bs, _nbb, _f) gf_bs_read_int(_bs, _nbb)",
          "62: #define gf_bs_read_int_log_idx(_bs, _nbb, _f, _idx) gf_bs_read_int(_bs, _nbb)",
          "63: #define gf_bs_read_int_log_idx2(_bs, _nbb, _f, _idx1, _idx2) gf_bs_read_int(_bs, _nbb)",
          "64: #define gf_bs_read_int_log_idx3(_bs, _nbb, _f, _idx1, _idx2, _idx3) gf_bs_read_int(_bs, _nbb)",
          "66: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1087: {",
          "1088:  u32 channel_configuration = 0;",
          "1089:  memset(cfg, 0, sizeof(GF_M4ADecSpecInfo));",
          "1092:  if (cfg->base_object_type == 31) {",
          "1094:  }",
          "1096:  if (cfg->base_sr_index == 0x0F) {",
          "1098:  }",
          "1099:  else {",
          "1100:   cfg->base_sr = GF_M4ASampleRates[cfg->base_sr_index];",
          "1101:  }",
          "1105:  if (channel_configuration) {",
          "1106:   cfg->nb_chan = GF_M4ANumChannels[channel_configuration - 1];",
          "",
          "[Removed Lines]",
          "1090:  cfg->base_object_type = gf_bs_read_int(bs, 5);",
          "1093:   cfg->base_object_type = 32 + gf_bs_read_int(bs, 6);",
          "1095:  cfg->base_sr_index = gf_bs_read_int(bs, 4);",
          "1097:   cfg->base_sr = gf_bs_read_int(bs, 24);",
          "1103:  channel_configuration = gf_bs_read_int(bs, 4);",
          "",
          "[Added Lines]",
          "1125:  cfg->base_object_type = gf_bs_read_int_log(bs, 5, \"base_object_type\");",
          "1128:   cfg->base_object_type = 32 + gf_bs_read_int_log(bs, 6, \"extended_base_object_type\");",
          "1130:  cfg->base_sr_index = gf_bs_read_int_log(bs, 4, \"base_samplerate_index\");",
          "1132:   cfg->base_sr = gf_bs_read_int_log(bs, 24, \"base_samplerate\");",
          "1138:  channel_configuration = gf_bs_read_int_log(bs, 4, \"channel_configuration\");",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1112:    cfg->nb_chan = 1;",
          "1113:   }",
          "1114:   cfg->has_sbr = GF_TRUE;",
          "1116:   if (cfg->sbr_sr_index == 0x0F) {",
          "1118:   }",
          "1119:   else {",
          "1120:    cfg->sbr_sr = GF_M4ASampleRates[cfg->sbr_sr_index];",
          "1121:   }",
          "1123:  }",
          "",
          "[Removed Lines]",
          "1115:   cfg->sbr_sr_index = gf_bs_read_int(bs, 4);",
          "1117:    cfg->sbr_sr = gf_bs_read_int(bs, 24);",
          "1122:   cfg->sbr_object_type = gf_bs_read_int(bs, 5);",
          "",
          "[Added Lines]",
          "1150:   cfg->sbr_sr_index = gf_bs_read_int_log(bs, 4, \"sbr_samplerate_index\");",
          "1152:    cfg->sbr_sr = gf_bs_read_int_log(bs, 24, \"sbr_samplerate\");",
          "1157:   cfg->sbr_object_type = gf_bs_read_int_log(bs, 5, \"sbr_object_type\");",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1139:  case 42:",
          "1140:  {",
          "1141:   Bool ext_flag;",
          "1149:   if (!channel_configuration) {",
          "1150:    u32 i, cpe_channels=0;",
          "1151:    cfg->program_config_element_present = 1;",
          "1162:    if (cfg->mono_mixdown_present) {",
          "1164:    }",
          "1166:    if (cfg->stereo_mixdown_present) {",
          "1168:    }",
          "1170:    if (cfg->matrix_mixdown_idx_present) {",
          "1173:    }",
          "1174:    for (i = 0; i < cfg->num_front_channel_elements; i++) {",
          "1177:     if (cfg->front_element_is_cpe[i]) cpe_channels++;",
          "1178:    }",
          "1179:    for (i = 0; i < cfg->num_side_channel_elements; i++) {",
          "1182:     if (cfg->side_element_is_cpe[i]) cpe_channels++;",
          "1183:    }",
          "1184:    for (i = 0; i < cfg->num_back_channel_elements; i++) {",
          "1187:     if (cfg->back_element_is_cpe[i]) cpe_channels++;",
          "1188:    }",
          "1189:    for (i = 0; i < cfg->num_lfe_channel_elements; i++) {",
          "1191:    }",
          "1192:    for (i = 0; i < cfg->num_assoc_data_elements; i++) {",
          "1194:    }",
          "1196:    for (i = 0; i < cfg->num_valid_cc_elements; i++) {",
          "1199:    }",
          "1200:    gf_bs_align(bs);",
          "1202:    gf_bs_read_data(bs, (char *)cfg->comments, cfg->comment_field_bytes);",
          "1204:    cfg->nb_chan = cfg->num_front_channel_elements + cfg->num_back_channel_elements + cfg->num_side_channel_elements + cfg->num_lfe_channel_elements;",
          "",
          "[Removed Lines]",
          "1145:   if (gf_bs_read_int(bs, 1))",
          "1147:   ext_flag = gf_bs_read_int(bs, 1);",
          "1152:    cfg->element_instance_tag = gf_bs_read_int(bs, 4);",
          "1153:    cfg->object_type = gf_bs_read_int(bs, 2);",
          "1154:    cfg->sampling_frequency_index = gf_bs_read_int(bs, 4);",
          "1155:    cfg->num_front_channel_elements = gf_bs_read_int(bs, 4);",
          "1156:    cfg->num_side_channel_elements = gf_bs_read_int(bs, 4);",
          "1157:    cfg->num_back_channel_elements = gf_bs_read_int(bs, 4);",
          "1158:    cfg->num_lfe_channel_elements = gf_bs_read_int(bs, 2);",
          "1159:    cfg->num_assoc_data_elements = gf_bs_read_int(bs, 3);",
          "1160:    cfg->num_valid_cc_elements = gf_bs_read_int(bs, 4);",
          "1161:    cfg->mono_mixdown_present = (Bool)gf_bs_read_int(bs, 1);",
          "1163:     cfg->mono_mixdown_element_number = gf_bs_read_int(bs, 4);",
          "1165:    cfg->stereo_mixdown_present = gf_bs_read_int(bs, 1);",
          "1167:     cfg->stereo_mixdown_element_number = gf_bs_read_int(bs, 4);",
          "1169:    cfg->matrix_mixdown_idx_present = gf_bs_read_int(bs, 1);",
          "1171:     cfg->matrix_mixdown_idx = gf_bs_read_int(bs, 2);",
          "1172:     cfg->pseudo_surround_enable = gf_bs_read_int(bs, 1);",
          "1175:     cfg->front_element_is_cpe[i] = gf_bs_read_int(bs, 1);",
          "1176:     cfg->front_element_tag_select[i] = gf_bs_read_int(bs, 4);",
          "1180:     cfg->side_element_is_cpe[i] = gf_bs_read_int(bs, 1);",
          "1181:     cfg->side_element_tag_select[i] = gf_bs_read_int(bs, 4);",
          "1185:     cfg->back_element_is_cpe[i] = gf_bs_read_int(bs, 1);",
          "1186:     cfg->back_element_tag_select[i] = gf_bs_read_int(bs, 4);",
          "1190:     cfg->lfe_element_tag_select[i] = gf_bs_read_int(bs, 4);",
          "1193:     cfg->assoc_data_element_tag_select[i] = gf_bs_read_int(bs, 4);",
          "1197:     cfg->cc_element_is_ind_sw[i] = gf_bs_read_int(bs, 1);",
          "1198:     cfg->valid_cc_element_tag_select[i] = gf_bs_read_int(bs, 4);",
          "1201:    cfg->comment_field_bytes = gf_bs_read_int(bs, 8);",
          "",
          "[Added Lines]",
          "1177:   gf_bs_read_int_log(bs, 1, \"frame_length_flag\");",
          "1178:   if (gf_bs_read_int_log(bs, 1, \"depends_on_core_coder\"))",
          "1179:    gf_bs_read_int_log(bs, 14, \"delay\");",
          "1180:   ext_flag = gf_bs_read_int_log(bs, 1, \"extension_flag\");",
          "1185:    cfg->element_instance_tag = gf_bs_read_int_log(bs, 4, \"element_instance_tag\");",
          "1186:    cfg->object_type = gf_bs_read_int_log(bs, 2, \"object_type\");",
          "1187:    cfg->sampling_frequency_index = gf_bs_read_int_log(bs, 4, \"sampling_frequency_index\");",
          "1188:    cfg->num_front_channel_elements = gf_bs_read_int_log(bs, 4, \"num_front_channel_elements\");",
          "1189:    cfg->num_side_channel_elements = gf_bs_read_int_log(bs, 4, \"num_side_channel_elements\");",
          "1190:    cfg->num_back_channel_elements = gf_bs_read_int_log(bs, 4, \"num_back_channel_elements\");",
          "1191:    cfg->num_lfe_channel_elements = gf_bs_read_int_log(bs, 2, \"num_lfe_channel_elements\");",
          "1192:    cfg->num_assoc_data_elements = gf_bs_read_int_log(bs, 3, \"num_assoc_data_elements\");",
          "1193:    cfg->num_valid_cc_elements = gf_bs_read_int_log(bs, 4, \"num_valid_cc_elements\");",
          "1194:    cfg->mono_mixdown_present = (Bool)gf_bs_read_int_log(bs, 1, \"mono_mixdown_present\");",
          "1196:     cfg->mono_mixdown_element_number = gf_bs_read_int_log(bs, 4, \"mono_mixdown_element_number\");",
          "1198:    cfg->stereo_mixdown_present = gf_bs_read_int_log(bs, 1, \"stereo_mixdown_present\");",
          "1200:     cfg->stereo_mixdown_element_number = gf_bs_read_int_log(bs, 4, \"stereo_mixdown_element_number\");",
          "1202:    cfg->matrix_mixdown_idx_present = gf_bs_read_int_log(bs, 1, \"matrix_mixdown_idx_present\");",
          "1204:     cfg->matrix_mixdown_idx = gf_bs_read_int_log(bs, 2, \"matrix_mixdown_idx\");",
          "1205:     cfg->pseudo_surround_enable = gf_bs_read_int_log(bs, 1, \"pseudo_surround_enable\");",
          "1208:     cfg->front_element_is_cpe[i] = gf_bs_read_int_log_idx(bs, 1, \"front_element_is_cpe\", i);",
          "1209:     cfg->front_element_tag_select[i] = gf_bs_read_int_log_idx(bs, 4, \"front_element_tag_select\", i);",
          "1213:     cfg->side_element_is_cpe[i] = gf_bs_read_int_log_idx(bs, 1, \"side_element_is_cpe\", i);",
          "1214:     cfg->side_element_tag_select[i] = gf_bs_read_int_log_idx(bs, 4, \"side_element_tag_select\", i);",
          "1218:     cfg->back_element_is_cpe[i] = gf_bs_read_int_log_idx(bs, 1, \"back_element_is_cpe\", i);",
          "1219:     cfg->back_element_tag_select[i] = gf_bs_read_int_log_idx(bs, 4, \"back_element_tag_select\", i);",
          "1223:     cfg->lfe_element_tag_select[i] = gf_bs_read_int_log_idx(bs, 4, \"lfe_element_tag_select\", i);",
          "1226:     cfg->assoc_data_element_tag_select[i] = gf_bs_read_int_log_idx(bs, 4, \"assoc_data_element_tag_select\", i);",
          "1230:     cfg->cc_element_is_ind_sw[i] = gf_bs_read_int_log_idx(bs, 1, \"cc_element_is_ind_sw\", i);",
          "1231:     cfg->valid_cc_element_tag_select[i] = gf_bs_read_int_log_idx(bs, 4, \"valid_cc_element_tag_select\", i);",
          "1234:    cfg->comment_field_bytes = gf_bs_read_int_log(bs, 8, \"comment_field_bytes\");",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1206:   }",
          "1208:   if ((cfg->base_object_type == 6) || (cfg->base_object_type == 20)) {",
          "1210:   }",
          "1211:   if (ext_flag) {",
          "1212:    if (cfg->base_object_type == 22) {",
          "1215:    }",
          "1216:    if ((cfg->base_object_type == 17)",
          "1217:     || (cfg->base_object_type == 19)",
          "1218:     || (cfg->base_object_type == 20)",
          "1219:     || (cfg->base_object_type == 23)",
          "1224:    }",
          "1226:   }",
          "1227:  }",
          "1228:  break;",
          "",
          "[Removed Lines]",
          "1209:    gf_bs_read_int(bs, 3);",
          "1213:     gf_bs_read_int(bs, 5);",
          "1214:     gf_bs_read_int(bs, 11);",
          "1220:     ) {",
          "1221:     gf_bs_read_int(bs, 1);",
          "1222:     gf_bs_read_int(bs, 1);",
          "1223:     gf_bs_read_int(bs, 1);",
          "",
          "[Added Lines]",
          "1242:    gf_bs_read_int_log(bs, 3, \"layerN\");",
          "1246:     gf_bs_read_int_log(bs, 5, \"numOfSubFrame\");",
          "1247:     gf_bs_read_int_log(bs, 11, \"layer_length\");",
          "1253:    ) {",
          "1254:     gf_bs_read_int_log(bs, 1, \"aacSectionDataResilienceFlag\");",
          "1255:     gf_bs_read_int_log(bs, 1, \"aacScalefactorDataResilienceFlag\");",
          "1256:     gf_bs_read_int_log(bs, 1, \"aacSpectralDataResilienceFlag\");",
          "1258:    gf_bs_read_int_log(bs, 1, \"extensionFlag3\");",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1240:  case 26:",
          "1241:  case 27:",
          "1242:  {",
          "1244:   if ((epConfig == 2) || (epConfig == 3)) {",
          "1245:   }",
          "1246:   if (epConfig == 3) {",
          "1248:   }",
          "1249:  }",
          "1250:  break;",
          "",
          "[Removed Lines]",
          "1243:   u32 epConfig = gf_bs_read_int(bs, 2);",
          "1247:    gf_bs_read_int(bs, 1);",
          "",
          "[Added Lines]",
          "1276:   u32 epConfig = gf_bs_read_int_log(bs, 2, \"epConfig\");",
          "1280:    gf_bs_read_int_log(bs, 1, \"directMapping\");",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1254:   while (gf_bs_available(bs) >= 2) {",
          "1255:    u32 sync = gf_bs_peek_bits(bs, 11, 0);",
          "1256:    if (sync == 0x2b7) {",
          "1260:     if (cfg->has_sbr) {",
          "1262:      if (cfg->sbr_sr_index == 0x0F) {",
          "1264:      }",
          "1265:      else {",
          "1266:       cfg->sbr_sr = GF_M4ASampleRates[cfg->sbr_sr_index];",
          "",
          "[Removed Lines]",
          "1257:     gf_bs_read_int(bs, 11);",
          "1258:     cfg->sbr_object_type = gf_bs_read_int(bs, 5);",
          "1259:     cfg->has_sbr = gf_bs_read_int(bs, 1);",
          "1261:      cfg->sbr_sr_index = gf_bs_read_int(bs, 4);",
          "1263:       cfg->sbr_sr = gf_bs_read_int(bs, 24);",
          "",
          "[Added Lines]",
          "1290:     gf_bs_read_int_log(bs, 11, \"syncExtensionType\");",
          "1291:     cfg->sbr_object_type = gf_bs_read_int_log(bs, 5, \"extensionAudioObjectType \");",
          "1292:     cfg->has_sbr = gf_bs_read_int_log(bs, 1, \"sbrPresentFlag\");",
          "1294:      cfg->sbr_sr_index = gf_bs_read_int_log(bs, 4, \"extensionSamplingFrequencyIndex\");",
          "1296:       cfg->sbr_sr = gf_bs_read_int_log(bs, 24, \"extensionSamplingFrequency\");",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1268:     }",
          "1269:    }",
          "1270:    else if (sync == 0x548) {",
          "1273:     if (cfg->has_ps)",
          "1274:      cfg->nb_chan = 1;",
          "1275:    }",
          "",
          "[Removed Lines]",
          "1271:     gf_bs_read_int(bs, 11);",
          "1272:     cfg->has_ps = gf_bs_read_int(bs, 1);",
          "",
          "[Added Lines]",
          "1304:     gf_bs_read_int_log(bs, 11, \"syncExtensionType\");",
          "1305:     cfg->has_ps = gf_bs_read_int_log(bs, 1, \"hasParametricStereo\");",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1487: {",
          "1489:  Bool extra_bit;",
          "1490:  int w = (u32)(log(n) / log(2)) + 1;",
          "1491:  u32 m = (1 << w) - n;",
          "1492:  assert(w < 32);",
          "1493:  v = gf_bs_read_int(bs, w - 1);",
          "1495:   return v;",
          "1496:  extra_bit = gf_bs_read_int(bs, 1);",
          "1498: }",
          "1500: static void av1_color_config(GF_BitStream *bs, AV1State *state)",
          "1501: {",
          "1503:  state->bit_depth = 8;",
          "1504:  if (state->config->seq_profile == 2 && state->config->high_bitdepth) {",
          "1506:   state->bit_depth = state->config->twelve_bit ? 12 : 10;",
          "1507:  }",
          "1508:  else if (state->config->seq_profile <= 2) {",
          "",
          "[Removed Lines]",
          "1486: static u32 av1_read_ns(GF_BitStream *bs, u32 n)",
          "1488:  u32 v;",
          "1494:  if (v < m)",
          "1497:  return (v << 1) - m + extra_bit;",
          "1502:  state->config->high_bitdepth = gf_bs_read_int(bs, 1);",
          "1505:   state->config->twelve_bit = gf_bs_read_int(bs, 1);",
          "",
          "[Added Lines]",
          "1519: static u32 av1_read_ns(GF_BitStream *bs, u32 n, const char *fname)",
          "1521:  u32 v, res;",
          "1527:  if (v < m) {",
          "1528:   if (fname) {",
          "1529:    gf_bs_log(bs, w-1, fname, v);",
          "1530:   }",
          "1532:  }",
          "1534:  res = (v << 1) - m + extra_bit;",
          "1535:  if (fname) {",
          "1536:   gf_bs_log(bs, w, fname, res);",
          "1537:  }",
          "1538:  return res;",
          "1543:  state->config->high_bitdepth = gf_bs_read_int_log(bs, 1, \"high_bitdepth\");",
          "1546:   state->config->twelve_bit = gf_bs_read_int_log(bs, 1, \"twelve_bit\");",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1514:   state->config->monochrome = GF_FALSE;",
          "1515:  }",
          "1516:  else {",
          "1518:  }",
          "1521:  if (state->color_description_present_flag) {",
          "1525:  }",
          "1526:  else {",
          "1527:   state->color_primaries = 2/*CP_UNSPECIFIED*/;",
          "",
          "[Removed Lines]",
          "1517:   state->config->monochrome = gf_bs_read_int(bs, 1);",
          "1520:  state->color_description_present_flag = gf_bs_read_int(bs, 1);",
          "1522:   state->color_primaries = gf_bs_read_int(bs, 8);",
          "1523:   state->transfer_characteristics = gf_bs_read_int(bs, 8);",
          "1524:   state->matrix_coefficients = gf_bs_read_int(bs, 8);",
          "",
          "[Added Lines]",
          "1558:   state->config->monochrome = gf_bs_read_int_log(bs, 1, \"monochrome\");",
          "1561:  state->color_description_present_flag = gf_bs_read_int_log(bs, 1, \"color_description_present_flag\");",
          "1563:   state->color_primaries = gf_bs_read_int_log(bs, 8, \"color_primaries\");",
          "1564:   state->transfer_characteristics = gf_bs_read_int_log(bs, 8, \"transfer_characteristics\");",
          "1565:   state->matrix_coefficients = gf_bs_read_int_log(bs, 8, \"matrix_coefficients\");",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1529:   state->matrix_coefficients = 2/*MC_UNSPECIFIED*/;",
          "1530:  }",
          "1531:  if (state->config->monochrome) {",
          "1533:   state->config->chroma_subsampling_x = GF_TRUE;",
          "1534:   state->config->chroma_subsampling_y = GF_TRUE;",
          "1535:   state->config->chroma_sample_position = 0/*CSP_UNKNOWN*/;",
          "",
          "[Removed Lines]",
          "1532:   state->color_range = gf_bs_read_int(bs, 1);",
          "",
          "[Added Lines]",
          "1573:   state->color_range = gf_bs_read_int_log(bs, 1, \"color_range\");",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1547:   state->config->chroma_subsampling_x = GF_FALSE;",
          "1548:   state->config->chroma_subsampling_y = GF_FALSE;",
          "1551:   if (state->config->seq_profile == 0) {",
          "1552:    state->config->chroma_subsampling_x = GF_TRUE;",
          "1553:    state->config->chroma_subsampling_y = GF_TRUE;",
          "",
          "[Removed Lines]",
          "1550:   state->color_range = gf_bs_read_int(bs, 1);",
          "",
          "[Added Lines]",
          "1591:   state->color_range = gf_bs_read_int_log(bs, 1, \"color_range\");",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1558:   }",
          "1559:   else {",
          "1560:    if (state->bit_depth == 12) {",
          "1562:     if (state->config->chroma_subsampling_x)",
          "1564:     else",
          "1565:      state->config->chroma_subsampling_y = GF_FALSE;",
          "1566:    }",
          "",
          "[Removed Lines]",
          "1561:     state->config->chroma_subsampling_x = gf_bs_read_int(bs, 1);",
          "1563:      state->config->chroma_subsampling_y = gf_bs_read_int(bs, 1);",
          "",
          "[Added Lines]",
          "1602:     state->config->chroma_subsampling_x = gf_bs_read_int_log(bs, 1, \"chroma_subsampling_x\");",
          "1604:      state->config->chroma_subsampling_y = gf_bs_read_int_log(bs, 1, \"chroma_subsampling_y\");",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1570:    }",
          "1571:   }",
          "1572:   if (state->config->chroma_subsampling_x && state->config->chroma_subsampling_y) {",
          "1574:   }",
          "1575:  }",
          "1577: }",
          "1581:  u8 leadingZeros = 0;",
          "1582:  while (1) {",
          "1583:   Bool done = gf_bs_read_int(bs, 1);",
          "",
          "[Removed Lines]",
          "1573:    state->config->chroma_sample_position = gf_bs_read_int(bs, 2);",
          "1576:  state->separate_uv_delta_q = gf_bs_read_int(bs, 1);",
          "1580: static u32 uvlc(GF_BitStream *bs) {",
          "",
          "[Added Lines]",
          "1614:    state->config->chroma_sample_position = gf_bs_read_int_log(bs, 2, \"chroma_sample_position\");",
          "1617:  state->separate_uv_delta_q = gf_bs_read_int_log(bs, 1, \"separate_uv_delta_q\");",
          "1621: static u32 av1_uvlc(GF_BitStream *bs, const char *fname)",
          "1622: {",
          "1623:  u32 res;",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1588:  if (leadingZeros >= 32) {",
          "1589:   return 0xFFFFFFFF;",
          "1590:  }",
          "1592: }",
          "1594: static void timing_info(GF_BitStream *bs, AV1State *state) {",
          "1595:  u32 time_scale = 0;",
          "1599:  if (state->equal_picture_interval) {",
          "1601:   state->tb_num = (num_ticks_per_picture_minus_1 + 1);",
          "1602:   state->tb_den = time_scale;",
          "1603:  }",
          "",
          "[Removed Lines]",
          "1591:  return gf_bs_read_int(bs, leadingZeros) + (1 << leadingZeros) - 1;",
          "1597:  time_scale = gf_bs_read_int(bs, 32);",
          "1598:  state->equal_picture_interval = gf_bs_read_int(bs, 1);",
          "1600:   u32 num_ticks_per_picture_minus_1 = uvlc(bs);",
          "",
          "[Added Lines]",
          "1634:  res = gf_bs_read_int(bs, leadingZeros) + (1 << leadingZeros) - 1;",
          "1635:  gf_bs_log(bs, 2*leadingZeros, fname, res);",
          "1636:  return res;",
          "1642:  time_scale = gf_bs_read_int_log(bs, 32, \"time_scale\");",
          "1643:  state->equal_picture_interval = gf_bs_read_int_log(bs, 1, \"equal_picture_interval\");",
          "1645:   u32 num_ticks_per_picture_minus_1 = av1_uvlc(bs, \"num_ticks_per_picture_minus_1\");",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1608: }",
          "1610: static void decoder_model_info(AV1State *state, GF_BitStream *bs) {",
          "1615: }",
          "1617: static void operating_parameters_info(GF_BitStream *bs, const u8 idx, const u8 buffer_delay_length_minus_1) {",
          "1618:  const u8 n = buffer_delay_length_minus_1 + 1;",
          "1622: }",
          "1624: static void av1_parse_sequence_header_obu(GF_BitStream *bs, AV1State *state)",
          "1625: {",
          "1626:  u8 buffer_delay_length_minus_1 = 0;",
          "1627:  state->frame_state.seen_seq_header = GF_TRUE;",
          "1631:  if (state->reduced_still_picture_header) {",
          "1634:   state->operating_points_count = 1;",
          "1636:  }",
          "1637:  else {",
          "1638:   u8 i = 0;",
          "1639:   Bool initial_display_delay_present_flag;",
          "1641:   if (timing_info_present_flag) {",
          "1642:    timing_info(bs, state);",
          "1644:    if (state->decoder_model_info_present_flag) {",
          "1645:     decoder_model_info(state, bs);",
          "1646:    }",
          "",
          "[Removed Lines]",
          "1611:  state->buffer_delay_length = 1 + gf_bs_read_int(bs, 5);",
          "1613:  state->buffer_removal_time_length = gf_bs_read_int(bs, 5);",
          "1614:  state->frame_presentation_time_length = 1 + gf_bs_read_int(bs, 5);",
          "1628:  state->config->seq_profile = gf_bs_read_int(bs, 3);",
          "1629:  state->still_picture = gf_bs_read_int(bs, 1);",
          "1630:  state->reduced_still_picture_header = gf_bs_read_int(bs, 1);",
          "1635:   state->config->seq_level_idx_0 = gf_bs_read_int(bs, 5);",
          "1640:   Bool timing_info_present_flag = gf_bs_read_int(bs, 1);",
          "1643:    state->decoder_model_info_present_flag = gf_bs_read_int(bs, 1);",
          "",
          "[Added Lines]",
          "1656:  state->buffer_delay_length = 1 + gf_bs_read_int_log(bs, 5, \"buffer_delay_length_minus1\");",
          "1657:  gf_bs_read_int_log(bs, 32, \"num_units_in_decoding_tick\");",
          "1658:  state->buffer_removal_time_length = gf_bs_read_int_log(bs, 5, \"buffer_removal_time_length\");",
          "1659:  state->frame_presentation_time_length = 1 + gf_bs_read_int_log(bs, 5, \"frame_presentation_time_length_minus1\");",
          "1664:  gf_bs_read_int_log(bs, n, \"decoder_buffer_delay\");",
          "1665:  gf_bs_read_int_log(bs, n, \"encoder_buffer_delay\");",
          "1666:  gf_bs_read_int_log(bs, 1, \"low_delay_mode_flag\");",
          "1673:  state->config->seq_profile = gf_bs_read_int_log(bs, 3, \"seq_profile\");",
          "1674:  state->still_picture = gf_bs_read_int_log(bs, 1, \"still_picture\");",
          "1675:  state->reduced_still_picture_header = gf_bs_read_int_log(bs, 1, \"reduced_still_picture_header\");",
          "1680:   state->config->seq_level_idx_0 = gf_bs_read_int_log(bs, 5, \"seq_level_idx_0\");",
          "1685:   Bool timing_info_present_flag = gf_bs_read_int_log(bs, 1, \"timing_info_present_flag\");",
          "1688:    state->decoder_model_info_present_flag = gf_bs_read_int_log(bs, 1, \"decoder_model_info_present_flag\");",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1648:   else {",
          "1649:    state->decoder_model_info_present_flag = GF_FALSE;",
          "1650:   }",
          "1653:   for (i = 0; i < state->operating_points_count; i++) {",
          "1654:    u8 seq_level_idx_i, seq_tier = 0;",
          "1659:    if (i == 0) state->config->seq_level_idx_0 = seq_level_idx_i;",
          "1661:    if (seq_level_idx_i > 7) {",
          "1663:    }",
          "1664:    if (i == 0) state->config->seq_tier_0 = seq_tier;",
          "1666:    if (state->decoder_model_info_present_flag) {",
          "1668:     if (state->decoder_model_present_for_this_op[i]) {",
          "1669:      operating_parameters_info(bs, i, buffer_delay_length_minus_1);",
          "1670:     }",
          "",
          "[Removed Lines]",
          "1651:   initial_display_delay_present_flag = gf_bs_read_int(bs, 1);",
          "1652:   state->operating_points_count = 1 + gf_bs_read_int(bs, 5);",
          "1656:    state->operating_point_idc[i] = gf_bs_read_int(bs, 12);",
          "1658:    seq_level_idx_i = gf_bs_read_int(bs, 5);",
          "1662:     seq_tier = gf_bs_read_int(bs, 1);",
          "1667:     state->decoder_model_present_for_this_op[i] = gf_bs_read_int(bs, 1);",
          "",
          "[Added Lines]",
          "1696:   initial_display_delay_present_flag = gf_bs_read_int_log(bs, 1, \"initial_display_delay_present_flag\");",
          "1697:   state->operating_points_count = 1 + gf_bs_read_int_log(bs, 5, \"operating_points_count_minus1\");",
          "1701:    state->operating_point_idc[i] = gf_bs_read_int_log_idx(bs, 12, \"operating_point_idc\", i);",
          "1703:    seq_level_idx_i = gf_bs_read_int_log_idx(bs, 5, \"seq_level_idx\", i);",
          "1707:     seq_tier = gf_bs_read_int_log_idx(bs, 1, \"seq_tier\", i);",
          "1712:     state->decoder_model_present_for_this_op[i] = gf_bs_read_int_log_idx(bs, 1, \"decoder_model_present_for_this_op\", i);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1673:     state->decoder_model_present_for_this_op[i] = 0;",
          "1674:    }",
          "1675:    if (initial_display_delay_present_flag) {",
          "1678:     }",
          "1679:    }",
          "1680:   }",
          "",
          "[Removed Lines]",
          "1676:     if (gf_bs_read_int(bs, 1) /*initial_display_delay_present_for_this_op[i]*/) {",
          "",
          "[Added Lines]",
          "1721:     if (gf_bs_read_int_log_idx(bs, 1, \"initial_display_delay_present_for_this_op\", i) ) {",
          "1722:      gf_bs_read_int_log_idx(bs, 4, \"initial_display_delay_minus1\", i);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1684:  state->OperatingPointIdc = 0;//TODO: operating_point_idc[operatingPoint];",
          "1690:  state->frame_id_numbers_present_flag = GF_FALSE;",
          "1691:  if (!state->reduced_still_picture_header) {",
          "1693:  }",
          "1694:  if (state->frame_id_numbers_present_flag) {",
          "1697:  }",
          "1701:  if (state->reduced_still_picture_header) {",
          "1703:   enable_masked_compound = 0;",
          "",
          "[Removed Lines]",
          "1686:  state->frame_width_bits_minus_1 = gf_bs_read_int(bs, 4);",
          "1687:  state->frame_height_bits_minus_1 = gf_bs_read_int(bs, 4);",
          "1688:  state->width = gf_bs_read_int(bs, state->frame_width_bits_minus_1 + 1) + 1;",
          "1689:  state->height = gf_bs_read_int(bs, state->frame_height_bits_minus_1 + 1) + 1;",
          "1692:   state->frame_id_numbers_present_flag = gf_bs_read_int(bs, 1);",
          "1695:   state->delta_frame_id_length_minus_2 = gf_bs_read_int(bs, 4);",
          "1696:   state->additional_frame_id_length_minus_1 = gf_bs_read_int(bs, 3);",
          "1698:  state->use_128x128_superblock = gf_bs_read_int(bs, 1);",
          "",
          "[Added Lines]",
          "1731:  state->frame_width_bits_minus_1 = gf_bs_read_int_log(bs, 4, \"frame_width_bits_minus1\");",
          "1732:  state->frame_height_bits_minus_1 = gf_bs_read_int_log(bs, 4, \"frame_height_bits_minus1\");",
          "1733:  state->width = gf_bs_read_int_log(bs, state->frame_width_bits_minus_1 + 1, \"width_minus1\") + 1;",
          "1734:  state->height = gf_bs_read_int_log(bs, state->frame_height_bits_minus_1 + 1, \"height_minus1\") + 1;",
          "1737:   state->frame_id_numbers_present_flag = gf_bs_read_int_log(bs, 1, \"frame_id_numbers_present_flag\");",
          "1740:   state->delta_frame_id_length_minus_2 = gf_bs_read_int_log(bs, 4, \"delta_frame_id_length_minus2\");",
          "1741:   state->additional_frame_id_length_minus_1 = gf_bs_read_int_log(bs, 3, \"additional_frame_id_length_minus1\");",
          "1743:  state->use_128x128_superblock = gf_bs_read_int_log(bs, 1, \"use_128x128_superblock\");",
          "1744:  gf_bs_read_int_log(bs, 1, \"enable_filter_intra\");",
          "1745:  gf_bs_read_int_log(bs, 1, \"enable_intra_edge_filter\");",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1712:  }",
          "1713:  else {",
          "1714:   Bool seq_choose_screen_content_tools;",
          "1720:   if (state->enable_order_hint) {",
          "1723:   }",
          "1724:   else {",
          "1727:   }",
          "1729:   state->seq_force_screen_content_tools = 0;",
          "1730:   if (seq_choose_screen_content_tools) {",
          "1731:    state->seq_force_screen_content_tools = 2/*SELECT_SCREEN_CONTENT_TOOLS*/;",
          "1732:   }",
          "1733:   else {",
          "1735:   }",
          "1737:   state->seq_force_integer_mv = 0;",
          "1738:   if (state->seq_force_screen_content_tools > 0) {",
          "1740:    if (seq_choose_integer_mv) {",
          "1741:     state->seq_force_integer_mv = 2/*SELECT_INTEGER_MV*/;",
          "1742:    }",
          "1743:    else {",
          "1745:    }",
          "1746:   }",
          "1747:   else {",
          "1748:    state->seq_force_integer_mv = 2/*SELECT_INTEGER_MV*/;",
          "1749:   }",
          "1750:   if (state->enable_order_hint) {",
          "1752:    state->OrderHintBits = order_hint_bits_minus_1 + 1;",
          "1753:   }",
          "1754:   else {",
          "",
          "[Removed Lines]",
          "1717:   state->enable_warped_motion = gf_bs_read_int(bs, 1);",
          "1719:   state->enable_order_hint = gf_bs_read_int(bs, 1);",
          "1722:    state->enable_ref_frame_mvs = gf_bs_read_int(bs, 1);",
          "1728:   seq_choose_screen_content_tools = gf_bs_read_int(bs, 1);",
          "1734:    state->seq_force_screen_content_tools = gf_bs_read_int(bs, 1);",
          "1739:    const Bool seq_choose_integer_mv = gf_bs_read_int(bs, 1);",
          "1744:     state->seq_force_integer_mv = gf_bs_read_int(bs, 1);",
          "1751:    u8 order_hint_bits_minus_1 = gf_bs_read_int(bs, 3);",
          "",
          "[Added Lines]",
          "1760:   gf_bs_read_int_log(bs, 1, \"enable_interintra_compound\");",
          "1761:   gf_bs_read_int_log(bs, 1, \"enable_masked_compound\");",
          "1762:   state->enable_warped_motion = gf_bs_read_int_log(bs, 1, \"enable_warped_motion\");",
          "1763:   gf_bs_read_int_log(bs, 1, \"enable_dual_filter\");",
          "1764:   state->enable_order_hint = gf_bs_read_int_log(bs, 1, \"enable_order_hint\");",
          "1766:    gf_bs_read_int_log(bs, 1, \"enable_jnt_comp\");",
          "1767:    state->enable_ref_frame_mvs = gf_bs_read_int_log(bs, 1, \"enable_ref_frame_mvs\");",
          "1773:   seq_choose_screen_content_tools = gf_bs_read_int_log(bs, 1, \"seq_choose_screen_content_tools\");",
          "1779:    state->seq_force_screen_content_tools = gf_bs_read_int_log(bs, 1, \"seq_force_screen_content_tools\");",
          "1784:    const Bool seq_choose_integer_mv = gf_bs_read_int_log(bs, 1, \"seq_choose_integer_mv\");",
          "1789:     state->seq_force_integer_mv = gf_bs_read_int_log(bs, 1, \"seq_force_integer_mv\");",
          "1796:    u8 order_hint_bits_minus_1 = gf_bs_read_int_log(bs, 3, \"order_hint_bits_minus1\");",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1756:   }",
          "1757:  }",
          "1762:  av1_color_config(bs, state);",
          "1764: }",
          "",
          "[Removed Lines]",
          "1759:  state->enable_superres = gf_bs_read_int(bs, 1);",
          "1760:  state->enable_cdef = gf_bs_read_int(bs, 1);",
          "1761:  state->enable_restoration = gf_bs_read_int(bs, 1);",
          "1763:  state->film_grain_params_present = gf_bs_read_int(bs, 1);",
          "",
          "[Added Lines]",
          "1804:  state->enable_superres = gf_bs_read_int_log(bs, 1, \"enable_superres\");",
          "1805:  state->enable_cdef = gf_bs_read_int_log(bs, 1, \"enable_cdef\");",
          "1806:  state->enable_restoration = gf_bs_read_int_log(bs, 1, \"enable_restoration\");",
          "1808:  state->film_grain_params_present = gf_bs_read_int_log(bs, 1, \"film_grain_params_present\");",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1882:  return e;",
          "1883: }",
          "1885: static Bool vp9_frame_sync_code(GF_BitStream *bs)",
          "1886: {",
          "1888:  if (val != 0x49)",
          "1889:   return GF_FALSE;",
          "1892:  if (val != 0x83)",
          "1893:   return GF_FALSE;",
          "1896:  if (val != 0x42)",
          "1897:   return GF_FALSE;",
          "",
          "[Removed Lines]",
          "1887:  u8 val = gf_bs_read_int(bs, 8);",
          "1891:  val = gf_bs_read_int(bs, 8);",
          "1895:  val = gf_bs_read_int(bs, 8);",
          "",
          "[Added Lines]",
          "1933:  u8 val = gf_bs_read_int_log(bs, 8, \"syncbyte1\");",
          "1937:  val = gf_bs_read_int_log(bs, 8, \"syncbyte2\");",
          "1941:  val = gf_bs_read_int_log(bs, 8, \"syncbyte3\");",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1919:  VP9_color_space color_space;",
          "1921:  if (vp9_cfg->profile >= 2) {",
          "1923:   vp9_cfg->bit_depth = ten_or_twelve_bit ? 12 : 10;",
          "1924:  }",
          "1925:  else {",
          "1926:   vp9_cfg->bit_depth = 8;",
          "1927:  }",
          "1930:  vp9_cfg->colour_primaries = VP9_CS_to_23001_8_colour_primaries[color_space];",
          "1931:  vp9_cfg->transfer_characteristics = VP9_CS_to_23001_8_transfer_characteristics[color_space];",
          "1932:  vp9_cfg->matrix_coefficients = VP9_CS_to_23001_8_matrix_coefficients[color_space];",
          "1933:  if (color_space != CS_RGB) {",
          "1935:   if (vp9_cfg->profile == 1 || vp9_cfg->profile == 3) {",
          "1936:    u8 subsampling_x, subsampling_y, subsampling_xy_to_chroma_subsampling[2][2] = { {3, 0}, {2, 0} };",
          "1939:    vp9_cfg->chroma_subsampling = subsampling_xy_to_chroma_subsampling[subsampling_x][subsampling_y];",
          "1941:    if (reserved_zero) {",
          "1942:     GF_LOG(GF_LOG_ERROR, GF_LOG_CODING, (\"[VP9] color config reserved zero (1) is not zero.\\n\"));",
          "1943:     return GF_NON_COMPLIANT_BITSTREAM;",
          "",
          "[Removed Lines]",
          "1922:   Bool ten_or_twelve_bit = gf_bs_read_int(bs, 1);",
          "1929:  color_space = gf_bs_read_int(bs, 3);",
          "1934:   vp9_cfg->video_fullRange_flag = gf_bs_read_int(bs, 1);",
          "1937:    subsampling_x = gf_bs_read_int(bs, 1);",
          "1938:    subsampling_y = gf_bs_read_int(bs, 1);",
          "1940:    Bool reserved_zero = gf_bs_read_int(bs, 1);",
          "",
          "[Added Lines]",
          "1968:   Bool ten_or_twelve_bit = gf_bs_read_int_log(bs, 1, \"ten_or_twelve_bit\");",
          "1975:  color_space = gf_bs_read_int_log(bs, 3, \"color_space\");",
          "1980:   vp9_cfg->video_fullRange_flag = gf_bs_read_int_log(bs, 1, \"video_fullRange_flag\");",
          "1983:    subsampling_x = gf_bs_read_int_log(bs, 1, \"subsampling_x\");",
          "1984:    subsampling_y = gf_bs_read_int_log(bs, 1, \"subsampling_x\");",
          "1986:    Bool reserved_zero = gf_bs_read_int_log(bs, 1, \"reserved_zero\");",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1951:   vp9_cfg->video_fullRange_flag = GF_TRUE;",
          "1952:   if (vp9_cfg->profile == 1 || vp9_cfg->profile == 3) {",
          "1953:    vp9_cfg->chroma_subsampling = 3;",
          "1955:    if (reserved_zero) {",
          "1956:     GF_LOG(GF_LOG_ERROR, GF_LOG_CODING, (\"[VP9] color config reserved zero (2) is not zero.\\n\"));",
          "1957:     return GF_NON_COMPLIANT_BITSTREAM;",
          "",
          "[Removed Lines]",
          "1954:    Bool reserved_zero = gf_bs_read_int(bs, 1);",
          "",
          "[Added Lines]",
          "2000:    Bool reserved_zero = gf_bs_read_int_log(bs, 1, \"reserved_zero\");",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "1973: static void vp9_frame_size(GF_BitStream *bs, int *FrameWidth, int *FrameHeight, int *Sb64Cols, int *Sb64Rows)",
          "1974: {",
          "1977:  if (frame_width_minus_1 + 1 != *FrameWidth || frame_height_minus_1 + 1 != *FrameHeight) {",
          "1978:   if (*FrameWidth || *FrameHeight)",
          "1979:    GF_LOG(GF_LOG_WARNING, GF_LOG_CONTAINER, (\"[VP9] inconsistent frame dimensions: previous was %dx%d, new one is %dx%d.\\n\", *FrameWidth, *FrameHeight, frame_width_minus_1 + 1, frame_height_minus_1 + 1));",
          "",
          "[Removed Lines]",
          "1975:  int frame_width_minus_1 = gf_bs_read_int(bs, 16);",
          "1976:  int frame_height_minus_1 = gf_bs_read_int(bs, 16);",
          "",
          "[Added Lines]",
          "2021:  int frame_width_minus_1 = gf_bs_read_int_log(bs, 16, \"frame_width_minus_1\");",
          "2022:  int frame_height_minus_1 = gf_bs_read_int_log(bs, 16, \"frame_height_minus_1\");",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "1986: static void vp9_render_size(GF_BitStream *bs, int FrameWidth, int FrameHeight, int *renderWidth, int *renderHeight)",
          "1987: {",
          "1989:  if (render_and_frame_size_different == 1) {",
          "1994:  }",
          "",
          "[Removed Lines]",
          "1988:  Bool render_and_frame_size_different = gf_bs_read_int(bs, 1);",
          "1990:   int render_width_minus_1 = gf_bs_read_int(bs, 16);",
          "1991:   int render_height_minus_1 = gf_bs_read_int(bs, 16);",
          "",
          "[Added Lines]",
          "2034:  Bool render_and_frame_size_different = gf_bs_read_int_log(bs, 1, \"render_and_frame_size_different\");",
          "2036:   int render_width_minus_1 = gf_bs_read_int_log(bs, 16, \"render_width_minus_1\");",
          "2037:   int render_height_minus_1 = gf_bs_read_int_log(bs, 16, \"render_height_minus_1\");",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "1998:  }",
          "1999: }",
          "2002:  s64 value = gf_bs_read_int(bs, n);",
          "2003:  Bool sign = gf_bs_read_int(bs, 1);",
          "2005: }",
          "2007: static void vp9_loop_filter_params(GF_BitStream *bs)",
          "2008: {",
          "2012:  if (loop_filter_delta_enabled == 1) {",
          "2014:   if (loop_filter_delta_update == GF_TRUE) {",
          "2015:    int i;",
          "2016:    for (i = 0; i < 4; i++) {",
          "2018:     if (update_ref_delta == GF_TRUE)",
          "2020:    }",
          "2021:    for (i = 0; i < 2; i++) {",
          "2023:     if (update_mode_delta == GF_TRUE)",
          "2025:    }",
          "2026:   }",
          "2027:  }",
          "",
          "[Removed Lines]",
          "2001: static s64 vp9_s(GF_BitStream *bs, int n) {",
          "2004:  return sign ? -value : value;",
          "2011:  Bool loop_filter_delta_enabled = gf_bs_read_int(bs, 1);",
          "2013:   Bool loop_filter_delta_update = gf_bs_read_int(bs, 1);",
          "2017:     Bool update_ref_delta = gf_bs_read_int(bs, 1);",
          "2022:     Bool update_mode_delta = gf_bs_read_int(bs, 1);",
          "",
          "[Added Lines]",
          "2047: static s64 vp9_s(GF_BitStream *bs, int n, const char *fname, u32 idx) {",
          "2050:  if (sign) value = -value;",
          "2051:  gf_bs_log_idx(bs, n+1, fname, value, idx, -1, -1);",
          "2052:  return value;",
          "2059:  Bool loop_filter_delta_enabled = gf_bs_read_int_log(bs, 1, \"loop_filter_delta_enabled\");",
          "2061:   Bool loop_filter_delta_update = gf_bs_read_int_log(bs, 1, \"loop_filter_delta_update\");",
          "2065:     Bool update_ref_delta = gf_bs_read_int_log_idx(bs, 1, \"update_ref_delta\", i);",
          "2067:      vp9_s(bs, 6, \"loop_filter_ref_deltas\", i);",
          "2070:     Bool update_mode_delta = gf_bs_read_int_log_idx(bs, 1, \"update_mode_delta\", i);",
          "2072:      vp9_s(bs, 6, \"loop_filter_mode_deltas\", i);",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "2043: static void vp9_segmentation_params(GF_BitStream *bs)",
          "2044: {",
          "2046:  if (segmentation_enabled == 1) {",
          "2047:   int i;",
          "2049:   if (segmentation_update_map) {",
          "2050:    for (i = 0; i < 7; i++)",
          "2055:   }",
          "2057:   if (segmentation_update_data == 1) {",
          "2059:    for (i = 0; i < VP9_MAX_SEGMENTS; i++) {",
          "2060:     int j;",
          "2061:     for (j = 0; j < VP9_SEG_LVL_MAX; j++) {",
          "2065:      if (feature_enabled) {",
          "2066:       int bits_to_read = segmentation_feature_bits[j];",
          "2068:       if (segmentation_feature_signed[j] == 1) {",
          "2072:       }",
          "",
          "[Removed Lines]",
          "2045:  Bool segmentation_enabled = gf_bs_read_int(bs, 1);",
          "2048:   Bool segmentation_update_map = gf_bs_read_int(bs, 1);",
          "2056:   Bool segmentation_update_data = gf_bs_read_int(bs, 1);",
          "2063:      Bool feature_enabled = gf_bs_read_int(bs, 1);",
          "",
          "[Added Lines]",
          "2093:  Bool segmentation_enabled = gf_bs_read_int_log(bs, 1, \"segmentation_enabled\");",
          "2096:   Bool segmentation_update_map = gf_bs_read_int_log(bs, 1, \"segmentation_update_map\");",
          "2104:   Bool segmentation_update_data = gf_bs_read_int_log(bs, 1, \"segmentation_update_data\");",
          "2111:      Bool feature_enabled = gf_bs_read_int_log(bs, 1, \"feature_enabled\");",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "2101:  int maxLog2TileCols = calc_max_log2_tile_cols(Sb64Cols);",
          "2102:  int tile_cols_log2 = minLog2TileCols;",
          "2103:  while (tile_cols_log2 < maxLog2TileCols) {",
          "2105:   if (increment_tile_cols_log2)",
          "2106:    tile_cols_log2++;",
          "2107:   else",
          "2108:    break;",
          "2109:  }",
          "2111:  if (tile_rows_log2) {",
          "2114:  }",
          "2115: }",
          "",
          "[Removed Lines]",
          "2104:   Bool increment_tile_cols_log2 = gf_bs_read_int(bs, 1);",
          "2110:  tile_rows_log2 = gf_bs_read_int(bs, 1);",
          "",
          "[Added Lines]",
          "2152:   Bool increment_tile_cols_log2 = gf_bs_read_int_log(bs, 1, \"increment_tile_cols_log2\");",
          "2158:  tile_rows_log2 = gf_bs_read_int_log(bs, 1, \"tile_rows_log2\");",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "2120:  Bool found_ref;",
          "2121:  int i;",
          "2122:  for (i = 0; i < 3; i++) {",
          "2124:   if (found_ref) {",
          "",
          "[Removed Lines]",
          "2123:   found_ref = gf_bs_read_int(bs, 1);",
          "",
          "[Added Lines]",
          "2171:   found_ref = gf_bs_read_int_log(bs, 1, \"found_ref\");",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "2140: static void vp9_read_interpolation_filter(GF_BitStream *bs)",
          "2141: {",
          "2143:  if (!is_filter_switchable) {",
          "2145:  }",
          "2146: }",
          "",
          "[Removed Lines]",
          "2142:  Bool is_filter_switchable = gf_bs_read_int(bs, 1);",
          "",
          "[Added Lines]",
          "2190:  Bool is_filter_switchable = gf_bs_read_int_log(bs, 1, \"is_filter_switchable\");",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "2158:  assert(bs && key_frame);",
          "2164:  vp9_cfg->profile = (profile_high_bit << 1) + profile_low_bit;",
          "2165:  if (vp9_cfg->profile == 3) {",
          "2167:   if (reserved_zero) {",
          "2168:    GF_LOG(GF_LOG_ERROR, GF_LOG_CODING, (\"[VP9] uncompressed header reserved zero is not zero.\\n\"));",
          "2169:    return GF_NON_COMPLIANT_BITSTREAM;",
          "2170:   }",
          "2171:  }",
          "2174:  if (show_existing_frame == GF_TRUE) {",
          "2176:   return GF_OK;",
          "2177:  }",
          "2182:  if (frame_type == VP9_KEY_FRAME) {",
          "2183:   if (!vp9_frame_sync_code(bs))",
          "2184:    return GF_NON_COMPLIANT_BITSTREAM;",
          "",
          "[Removed Lines]",
          "2162:  profile_low_bit = gf_bs_read_int(bs, 1);",
          "2163:  profile_high_bit = gf_bs_read_int(bs, 1);",
          "2166:   Bool reserved_zero = gf_bs_read_int(bs, 1);",
          "2173:  show_existing_frame = gf_bs_read_int(bs, 1);",
          "2179:  frame_type = gf_bs_read_int(bs, 1);",
          "2180:  show_frame = gf_bs_read_int(bs, 1);",
          "2181:  error_resilient_mode = gf_bs_read_int(bs, 1);",
          "",
          "[Added Lines]",
          "2210:  profile_low_bit = gf_bs_read_int_log(bs, 1, \"profile_low_bit\");",
          "2211:  profile_high_bit = gf_bs_read_int_log(bs, 1, \"profile_high_bit\");",
          "2214:   Bool reserved_zero = gf_bs_read_int_log(bs, 1, \"reserved_zero\");",
          "2221:  show_existing_frame = gf_bs_read_int_log(bs, 1, \"show_existing_frame\");",
          "2227:  frame_type = gf_bs_read_int_log(bs, 1, \"frame_type\");",
          "2228:  show_frame = gf_bs_read_int_log(bs, 1, \"show_frame\");",
          "2229:  error_resilient_mode = gf_bs_read_int_log(bs, 1, \"error_resilient_mode\");",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "2197:   if (show_frame == GF_FALSE) {",
          "2199:   }",
          "2200:   FrameIsIntra = intra_only;",
          "2202:   if (error_resilient_mode == GF_FALSE) {",
          "2204:   }",
          "2206:   if (intra_only == GF_TRUE) {",
          "",
          "[Removed Lines]",
          "2198:    intra_only = gf_bs_read_int(bs, 1);",
          "",
          "[Added Lines]",
          "2246:    intra_only = gf_bs_read_int_log(bs, 1, \"intra_only\");",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "2219:     vp9_cfg->chroma_subsampling = 0;",
          "2220:     vp9_cfg->bit_depth = 8;",
          "2221:    }",
          "2223:    vp9_frame_size(bs, FrameWidth, FrameHeight, &Sb64Cols, &Sb64Rows);",
          "2224:    vp9_render_size(bs, *FrameWidth, *FrameHeight, renderWidth, renderHeight);",
          "2225:   }",
          "2226:   else {",
          "2228:    u8 ref_frame_idx[3];",
          "2229:    for (i = 0; i < 3; i++) {",
          "2232:    }",
          "2233:    vp9_frame_size_with_refs(bs, refresh_frame_flags, ref_frame_idx, vp9_cfg->RefFrameWidth, vp9_cfg->RefFrameHeight, FrameWidth, FrameHeight, renderWidth, renderHeight, &Sb64Cols, &Sb64Rows);",
          "2235:    vp9_read_interpolation_filter(bs);",
          "2236:   }",
          "2237:  }",
          "2239:  if (error_resilient_mode == 0) {",
          "2242:  }",
          "2245:  if (FrameIsIntra || error_resilient_mode) {",
          "",
          "[Removed Lines]",
          "2222:    refresh_frame_flags = gf_bs_read_int(bs, 8);",
          "2227:    refresh_frame_flags = gf_bs_read_int(bs, 8);",
          "2230:     ref_frame_idx[i] = gf_bs_read_int(bs, 3);",
          "",
          "[Added Lines]",
          "2270:    refresh_frame_flags = gf_bs_read_int_log(bs, 8, \"refresh_frame_flags\");",
          "2275:    refresh_frame_flags = gf_bs_read_int_log(bs, 8, \"refresh_frame_flags\");",
          "2278:     ref_frame_idx[i] = gf_bs_read_int_log_idx(bs, 3, \"ref_frame_idx\", i);",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "2713:  return k;",
          "2714: }",
          "2717:  u32 i = 0;",
          "2718:  u64 t = 0;",
          "2719:  for (i = 0; i < n; i++) {",
          "2720:   u8 byte = gf_bs_read_int(bs, 8);",
          "2721:   t += (byte << (i * 8));",
          "2722:  }",
          "2723:  return t;",
          "2724: }",
          "",
          "[Removed Lines]",
          "2716: static u64 aom_av1_le(GF_BitStream *bs, u32 n) {",
          "",
          "[Added Lines]",
          "2764: static u64 aom_av1_le(GF_BitStream *bs, u32 n, const char *name) {",
          "2771:  gf_bs_log(bs, n*8, name, t);",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "2739:  u32 maxLog2tileCols = aom_av1_tile_log2(1, MIN(sbCols, AV1_MAX_TILE_COLS));",
          "2740:  u32 maxLog2tileRows = aom_av1_tile_log2(1, MIN(sbRows, AV1_MAX_TILE_ROWS));",
          "2741:  u32 minLog2Tiles = MAX(minLog2tileCols, aom_av1_tile_log2(maxTileAreaSb, sbRows * sbCols));",
          "2743:  if (uniform_tile_spacing_flag) {",
          "2744:   u32 startSb, tileWidthSb, tileHeightSb, minLog2tileRows;",
          "2745:   state->tileColsLog2 = minLog2tileCols;",
          "2746:   while (state->tileColsLog2 < maxLog2tileCols) {",
          "2748:    if (increment_tile_cols_log2 == 1)",
          "2749:     state->tileColsLog2++;",
          "2750:    else",
          "",
          "[Removed Lines]",
          "2742:  Bool uniform_tile_spacing_flag = gf_bs_read_int(bs, 1);",
          "2747:    Bool increment_tile_cols_log2 = gf_bs_read_int(bs, 1);",
          "",
          "[Added Lines]",
          "2791:  Bool uniform_tile_spacing_flag = gf_bs_read_int_log(bs, 1, \"uniform_tile_spacing_flag\");",
          "2796:    Bool increment_tile_cols_log2 = gf_bs_read_int_log(bs, 1, \"increment_tile_cols_log2\");",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "2760:   minLog2tileRows = MAX((int)(minLog2Tiles - state->tileColsLog2), 0);",
          "2761:   state->tileRowsLog2 = minLog2tileRows;",
          "2762:   while (state->tileRowsLog2 < maxLog2tileRows) {",
          "2764:    if (increment_tile_rows_log2 == 1)",
          "2765:     state->tileRowsLog2++;",
          "2766:    else",
          "",
          "[Removed Lines]",
          "2763:    Bool increment_tile_rows_log2 = gf_bs_read_int(bs, 1);",
          "",
          "[Added Lines]",
          "2812:    Bool increment_tile_rows_log2 = gf_bs_read_int_log(bs, 1, \"increment_tile_rows_log2\");",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "2780:   startSb = 0;",
          "2781:   for (i = 0; startSb < sbCols; i++) {",
          "2782:    u32 maxWidth = MIN((int)(sbCols - startSb), maxTileWidthSb);",
          "2784:    u32 sizeSb = width_in_sbs_minus_1 + 1;",
          "2785:    widestTileSb = MAX(sizeSb, widestTileSb);",
          "2786:    startSb += sizeSb;",
          "",
          "[Removed Lines]",
          "2783:    u32 width_in_sbs_minus_1 = av1_read_ns(bs, maxWidth);",
          "",
          "[Added Lines]",
          "2832:    u32 width_in_sbs_minus_1 = av1_read_ns(bs, maxWidth, \"width_in_sbs_minus_1\");",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "2801:   startSb = 0;",
          "2802:   for (i = 0; startSb < sbRows; i++) {",
          "2803:    u32 maxHeight = MIN((int)(sbRows - startSb), maxTileHeightSb);",
          "2805:    u32 sizeSb = height_in_sbs_minus_1 + 1;",
          "2806:    startSb += sizeSb;",
          "2807:   }",
          "",
          "[Removed Lines]",
          "2804:    u32 height_in_sbs_minus_1 = av1_read_ns(bs, maxHeight);",
          "",
          "[Added Lines]",
          "2853:    u32 height_in_sbs_minus_1 = av1_read_ns(bs, maxHeight, \"height_in_sbs_minus_1\");",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "2810:   state->tileRowsLog2 = aom_av1_tile_log2(1, state->tileRows);",
          "2811:  }",
          "2812:  if (state->tileColsLog2 > 0 || state->tileRowsLog2 > 0) {",
          "2815:  }",
          "2816: }",
          "",
          "[Removed Lines]",
          "2814:   state->tile_size_bytes = gf_bs_read_int(bs, 2) + 1;",
          "",
          "[Added Lines]",
          "2862:   gf_bs_read_int_log(bs, state->tileRowsLog2 + state->tileColsLog2, \"context_update_tile_id\");",
          "2863:   state->tile_size_bytes = gf_bs_read_int_log(bs, 2, \"tile_size_bytes_minus1\") + 1;",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "2821:  Bool use_superres;",
          "2823:  if (state->enable_superres) {",
          "2825:  }",
          "2826:  else {",
          "2827:   use_superres = GF_FALSE;",
          "2828:  }",
          "2829:  if (use_superres) {",
          "2831:   SuperresDenom = coded_denom + AV1_SUPERRES_DENOM_MIN;",
          "2832:  }",
          "2833:  else {",
          "",
          "[Removed Lines]",
          "2824:   use_superres = gf_bs_read_int(bs, 1);",
          "2830:   u8 coded_denom = gf_bs_read_int(bs, AV1_SUPERRES_DENOM_BITS);",
          "",
          "[Added Lines]",
          "2873:   use_superres = gf_bs_read_int_log(bs, 1, \"use_superres\");",
          "2879:   u8 coded_denom = gf_bs_read_int_log(bs, AV1_SUPERRES_DENOM_BITS, \"coded_denom\");",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "2842:  if (frame_size_override_flag) {",
          "2843:   u32 frame_width_minus_1, frame_height_minus_1;",
          "2844:   u8 n = state->frame_width_bits_minus_1 + 1;",
          "2846:   n = state->frame_height_bits_minus_1 + 1;",
          "2848:   state->width = frame_width_minus_1 + 1;",
          "2849:   state->height = frame_height_minus_1 + 1;",
          "2850:  }",
          "",
          "[Removed Lines]",
          "2845:   frame_width_minus_1 = gf_bs_read_int(bs, n);",
          "2847:   frame_height_minus_1 = gf_bs_read_int(bs, n);",
          "",
          "[Added Lines]",
          "2894:   frame_width_minus_1 = gf_bs_read_int_log(bs, n, \"frame_width_minus_1\");",
          "2896:   frame_height_minus_1 = gf_bs_read_int_log(bs, n, \"frame_height_minus_1\");",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "2855: static void av1_render_size(GF_BitStream *bs)",
          "2856: {",
          "2858:  if (render_and_frame_size_different == GF_TRUE) {",
          "2863:  }",
          "",
          "[Removed Lines]",
          "2857:  Bool render_and_frame_size_different = gf_bs_read_int(bs, 1);",
          "",
          "[Added Lines]",
          "2906:  Bool render_and_frame_size_different = gf_bs_read_int_log(bs, 1, \"render_and_frame_size_different_flag\");",
          "2908:   gf_bs_read_int_log(bs, 16, \"render_width_minus_1\");",
          "2909:   gf_bs_read_int_log(bs, 16, \"render_height_minus_1\");",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "2870: static void read_interpolation_filter(GF_BitStream *bs)",
          "2871: {",
          "2873:  if (!is_filter_switchable) {",
          "2875:  }",
          "2876: }",
          "",
          "[Removed Lines]",
          "2872:  Bool is_filter_switchable = gf_bs_read_int(bs, 1);",
          "",
          "[Added Lines]",
          "2921:  Bool is_filter_switchable = gf_bs_read_int_log(bs, 1, \"is_filter_switchable\");",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "2880:  Bool found_ref = GF_FALSE;",
          "2881:  u32 i = 0;",
          "2882:  for (i = 0; i < AV1_REFS_PER_FRAME; i++) {",
          "2884:   if (found_ref == 1) {",
          "2885: #if 0",
          "2886:    UpscaledWidth = RefUpscaledWidth[ref_frame_idx[i]];",
          "",
          "[Removed Lines]",
          "2883:   found_ref = gf_bs_read_int(bs, 1);",
          "",
          "[Added Lines]",
          "2932:   found_ref = gf_bs_read_int_log_idx(bs, 1, \"found_ref\", i);",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "2902:  }",
          "2903: }",
          "2906: {",
          "2908:  s32 delta_q = 0;",
          "2909:  if (delta_coded) {",
          "2910:   u32 signMask = 1 << (7 - 1);",
          "2912:   if (delta_q & signMask)",
          "2913:    delta_q = delta_q - 2 * signMask;",
          "2914:  }",
          "",
          "[Removed Lines]",
          "2905: static s32 av1_delta_q(GF_BitStream *bs)",
          "2907:  Bool delta_coded = gf_bs_read_int(bs, 1);",
          "2911:   delta_q = gf_bs_read_int(bs, 7);",
          "",
          "[Added Lines]",
          "2954: static s32 av1_delta_q(GF_BitStream *bs, const char *name_flag, const char *name)",
          "2956:  Bool delta_coded = gf_bs_read_int_log(bs, 1, name_flag);",
          "2960:   delta_q = gf_bs_read_int_log(bs, 7, name);",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "2976:   s32 b2 = i ? k + i - 1 : k;",
          "2977:   s32 a = 1 << b2;",
          "2978:   if (numSyms <= mk + 3 * a) {",
          "2980:    return subexp_final_bits + mk;",
          "2981:   }",
          "2982:   else {",
          "",
          "[Removed Lines]",
          "2979:    s32 subexp_final_bits = av1_read_ns(bs, numSyms - mk);",
          "",
          "[Added Lines]",
          "3028:    s32 subexp_final_bits = av1_read_ns(bs, numSyms - mk, NULL);",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "3262:   frame_state->show_existing_frame = 0;",
          "3263:  }",
          "3264:  else {",
          "3266:   if (frame_state->show_existing_frame == GF_TRUE) {",
          "3268:    frame_state->frame_type = state->RefFrameType[frame_state->frame_to_show_map_idx];",
          "3270:    if (state->decoder_model_info_present_flag && !state->equal_picture_interval) {",
          "3272:    }",
          "3274:    frame_state->refresh_frame_flags = 0;",
          "3275:    if (state->frame_id_numbers_present_flag) {",
          "3277:    }",
          "3278:    if (frame_state->frame_type == AV1_KEY_FRAME) {",
          "3279:     frame_state->refresh_frame_flags = AV1_ALL_FRAMES;",
          "",
          "[Removed Lines]",
          "3265:   frame_state->show_existing_frame = gf_bs_read_int(bs, 1);",
          "3267:    frame_state->frame_to_show_map_idx = gf_bs_read_int(bs, 3);",
          "",
          "[Added Lines]",
          "3314:   frame_state->show_existing_frame = gf_bs_read_int_log(bs, 1, \"show_existing_frame\");",
          "3316:    frame_state->frame_to_show_map_idx = gf_bs_read_int_log(bs, 3, \"frame_to_show_map_idx\");",
          "3320:     gf_bs_read_int_log(bs, state->frame_presentation_time_length, \"frame_presentation_time\");",
          "3325:     gf_bs_read_int_log(bs, idLen, \"display_frame_id\");",
          "",
          "---------------",
          "--- Hunk 49 ---",
          "[Context before]",
          "3285:    return;",
          "3286:   }",
          "3288:   FrameIsIntra = (frame_state->frame_type == AV1_INTRA_ONLY_FRAME || frame_state->frame_type == AV1_KEY_FRAME);",
          "3290:   if (frame_state->is_first_frame) {",
          "3291:    frame_state->key_frame = frame_state->seen_seq_header && frame_state->show_frame && frame_state->frame_type == AV1_KEY_FRAME && frame_state->seen_frame_header;",
          "3292:   }",
          "3293:   if (frame_state->show_frame && state->decoder_model_info_present_flag && !state->equal_picture_interval) {",
          "3295:   }",
          "3296:   if (frame_state->show_frame) {",
          "3297:    showable_frame = frame_state->frame_type != AV1_KEY_FRAME;",
          "3299:   }",
          "3300:   else {",
          "3302:   }",
          "3303:   if (frame_state->frame_type == AV1_SWITCH_FRAME || (frame_state->frame_type == AV1_KEY_FRAME && frame_state->show_frame))",
          "3304:    error_resilient_mode = GF_TRUE;",
          "3305:   else",
          "3307:  }",
          "3309:  if ((frame_state->frame_type == AV1_KEY_FRAME) && frame_state->show_frame) {",
          "",
          "[Removed Lines]",
          "3287:   frame_state->frame_type = gf_bs_read_int(bs, 2);",
          "3289:   frame_state->show_frame = gf_bs_read_int(bs, 1);",
          "3301:    showable_frame = gf_bs_read_int(bs, 1);",
          "3306:    error_resilient_mode = gf_bs_read_int(bs, 1);",
          "",
          "[Added Lines]",
          "3336:   frame_state->frame_type = gf_bs_read_int_log(bs, 2, \"frame_type\");",
          "3338:   frame_state->show_frame = gf_bs_read_int_log(bs, 1, \"show_frame\");",
          "3343:    gf_bs_read_int_log(bs, state->frame_presentation_time_length, \"frame_presentation_time\");",
          "3350:    showable_frame = gf_bs_read_int_log(bs, 1, \"showable_frame\");",
          "3355:    error_resilient_mode = gf_bs_read_int_log(bs, 1, \"error_resilient_mode\");",
          "",
          "---------------",
          "--- Hunk 50 ---",
          "[Context before]",
          "3317:   }",
          "3318:  }",
          "3321:  if (state->seq_force_screen_content_tools == 2/*SELECT_SCREEN_CONTENT_TOOLS*/) {",
          "3323:  }",
          "3324:  else {",
          "3325:   allow_screen_content_tools = state->seq_force_screen_content_tools;",
          "3326:  }",
          "3327:  if (allow_screen_content_tools) {",
          "3328:   if (state->seq_force_integer_mv == 2/*SELECT_INTEGER_MV*/) {",
          "3330:   }",
          "3331:   else {",
          "3332:    force_integer_mv = state->seq_force_integer_mv;",
          "",
          "[Removed Lines]",
          "3320:  disable_cdf_update = gf_bs_read_int(bs, 1);",
          "3322:   allow_screen_content_tools = gf_bs_read_int(bs, 1);",
          "3329:    force_integer_mv = gf_bs_read_int(bs, 1);",
          "",
          "[Added Lines]",
          "3369:  disable_cdf_update = gf_bs_read_int_log(bs, 1, \"disable_cdf_update\");",
          "3371:   allow_screen_content_tools = gf_bs_read_int_log(bs, 1, \"allow_screen_content_tools\");",
          "3378:    force_integer_mv = gf_bs_read_int_log(bs, 1, \"force_integer_mv\");",
          "",
          "---------------",
          "--- Hunk 51 ---",
          "[Context before]",
          "3339:   force_integer_mv = 1;",
          "3340:  }",
          "3341:  if (state->frame_id_numbers_present_flag) {",
          "3343:  }",
          "3344:  if (frame_state->frame_type == AV1_SWITCH_FRAME)",
          "3345:   frame_size_override_flag = GF_TRUE;",
          "3346:  else if (state->reduced_still_picture_header)",
          "3347:   frame_size_override_flag = GF_FALSE;",
          "3348:  else",
          "3351:  frame_state->order_hint = gf_bs_read_int(bs, state->OrderHintBits);",
          "3352:  if (FrameIsIntra || error_resilient_mode) {",
          "3353:   primary_ref_frame = AV1_PRIMARY_REF_NONE;",
          "3354:  }",
          "3355:  else {",
          "3357:  }",
          "3359:  if (state->decoder_model_info_present_flag) {",
          "3361:   if (buffer_removal_time_present_flag) {",
          "3362:    u32 opNum;",
          "3363:    for (opNum = 0; opNum < state->operating_points_count; opNum++) {",
          "",
          "[Removed Lines]",
          "3349:   frame_size_override_flag = gf_bs_read_int(bs, 1);",
          "3356:   primary_ref_frame = gf_bs_read_int(bs, 3);",
          "3360:   u8 buffer_removal_time_present_flag = gf_bs_read_int(bs, 1);",
          "",
          "[Added Lines]",
          "3391:   gf_bs_read_int_log(bs, idLen, \"current_frame_id\");",
          "3398:   frame_size_override_flag = gf_bs_read_int_log(bs, 1, \"frame_size_override_flag\");",
          "3405:   primary_ref_frame = gf_bs_read_int_log(bs, 3, \"primary_ref_frame\");",
          "3409:   u8 buffer_removal_time_present_flag = gf_bs_read_int_log(bs, 1, \"buffer_removal_time_present_flag\");",
          "",
          "---------------",
          "--- Hunk 52 ---",
          "[Context before]",
          "3366:      u8 inTemporalLayer = (opPtIdc >> state->temporal_id) & 1;",
          "3367:      u8 inSpatialLayer = (opPtIdc >> (state->spatial_id + 8)) & 1;",
          "3368:      if (opPtIdc == 0 || (inTemporalLayer && inSpatialLayer)) {",
          "3370:      }",
          "3371:     }",
          "3372:    }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3418:       gf_bs_read_int_log_idx(bs, state->buffer_removal_time_length, \"buffer_removal_time\", opNum);",
          "",
          "---------------",
          "--- Hunk 53 ---",
          "[Context before]",
          "3377:   frame_state->refresh_frame_flags = AV1_ALL_FRAMES;",
          "3378:  }",
          "3379:  else {",
          "3381:  }",
          "3382:  if (!FrameIsIntra || frame_state->refresh_frame_flags != AV1_ALL_FRAMES) {",
          "3383:   if (error_resilient_mode && state->enable_order_hint) {",
          "3384:    u32 i = 0;",
          "3385:    for (i = 0; i < AV1_NUM_REF_FRAMES; i++) {",
          "3387:     if (ref_order_hint != state->RefOrderHint[i]) {",
          "3388:      state->RefValid[i] = 0;",
          "3389:     }",
          "",
          "[Removed Lines]",
          "3380:   frame_state->refresh_frame_flags = gf_bs_read_int(bs, 8);",
          "3386:     u8 ref_order_hint = gf_bs_read_int(bs, state->OrderHintBits);",
          "",
          "[Added Lines]",
          "3429:   frame_state->refresh_frame_flags = gf_bs_read_int_log(bs, 8, \"refresh_frame_flags\");",
          "3435:     u8 ref_order_hint = gf_bs_read_int_log_idx(bs, state->OrderHintBits, \"ref_order_hint\", i);",
          "",
          "---------------",
          "--- Hunk 54 ---",
          "[Context before]",
          "3397:   av1_frame_size(bs, state, frame_size_override_flag);",
          "3398:   av1_render_size(bs);",
          "3399:   if (allow_screen_content_tools && state->UpscaledWidth == state->width) {",
          "3401:   }",
          "3402:  }",
          "3403:  else {",
          "",
          "[Removed Lines]",
          "3400:    allow_intrabc = gf_bs_read_int(bs, 1);",
          "",
          "[Added Lines]",
          "3449:    allow_intrabc = gf_bs_read_int_log(bs, 1, \"allow_intrabc\");",
          "",
          "---------------",
          "--- Hunk 55 ---",
          "[Context before]",
          "3405:    av1_frame_size(bs, state, frame_size_override_flag);",
          "3406:    av1_render_size(bs);",
          "3407:    if (allow_screen_content_tools && state->UpscaledWidth == state->width) {",
          "3409:    }",
          "3410:   }",
          "3411:   else {",
          "3412:    u32 i = 0;",
          "3413:    Bool frame_refs_short_signaling = GF_FALSE;",
          "3414:    if (state->enable_order_hint) {",
          "3416:     if (frame_refs_short_signaling) {",
          "3419:      av1_set_frame_refs(state, last_frame_idx, gold_frame_idx, ref_frame_idx);",
          "3420:     }",
          "3421:    }",
          "3422:    for (i = 0; i < AV1_REFS_PER_FRAME; i++) {",
          "3423:     if (!frame_refs_short_signaling)",
          "3426:     if (state->frame_id_numbers_present_flag) {",
          "3427:      u32 n = state->delta_frame_id_length_minus_2 + 2;",
          "3431:     }",
          "",
          "[Removed Lines]",
          "3408:     allow_intrabc = gf_bs_read_int(bs, 1);",
          "3415:     frame_refs_short_signaling = gf_bs_read_int(bs, 1);",
          "3417:      u8 last_frame_idx = gf_bs_read_int(bs, 3);",
          "3418:      u8 gold_frame_idx = gf_bs_read_int(bs, 3);",
          "3424:      ref_frame_idx[i] = gf_bs_read_int(bs, 3);",
          "",
          "[Added Lines]",
          "3457:     allow_intrabc = gf_bs_read_int_log(bs, 1, \"allow_intrabc\");",
          "3464:     frame_refs_short_signaling = gf_bs_read_int_log(bs, 1, \"frame_refs_short_signaling\");",
          "3466:      u8 last_frame_idx = gf_bs_read_int_log(bs, 3, \"last_frame_idx\");",
          "3467:      u8 gold_frame_idx = gf_bs_read_int_log(bs, 3, \"gold_frame_idx\");",
          "3473:      ref_frame_idx[i] = gf_bs_read_int_log_idx(bs, 3, \"ref_frame_idx\", i);",
          "",
          "---------------",
          "--- Hunk 56 ---",
          "[Context before]",
          "3439:    }",
          "3440:    frame_state->allow_high_precision_mv = 0;",
          "3441:    if (!force_integer_mv) {",
          "3443:    }",
          "3445:    read_interpolation_filter(bs);",
          "3448:    if (!(error_resilient_mode || !state->enable_ref_frame_mvs)) {",
          "3450:    }",
          "3451:   }",
          "3452:  }",
          "",
          "[Removed Lines]",
          "3442:     frame_state->allow_high_precision_mv = gf_bs_read_int(bs, 1);",
          "",
          "[Added Lines]",
          "3491:     frame_state->allow_high_precision_mv = gf_bs_read_int_log(bs, 1, \"allow_high_precision_mv\");",
          "3496:    gf_bs_read_int_log(bs, 1, \"is_motion_mode_switchable\");",
          "3498:     gf_bs_read_int_log(bs, 1, \"use_ref_frame_mvs\");",
          "",
          "---------------",
          "--- Hunk 57 ---",
          "[Context before]",
          "3471:  }",
          "3473:  if (!(state->reduced_still_picture_header || disable_cdf_update))",
          "3476:  if (primary_ref_frame == AV1_PRIMARY_REF_NONE) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3523:   gf_bs_read_int_log(bs, 1, \"disable_frame_end_update_cdf\");",
          "",
          "---------------",
          "--- Hunk 58 ---",
          "[Context before]",
          "3489:  s32 DeltaQUAc = 0;",
          "3490:  s32 DeltaQVDc = 0;",
          "3491:  s32 DeltaQVAc = 0;",
          "3493:  if (!state->config->monochrome) {",
          "3494:   u8 diff_uv_delta = 0;",
          "3495:   if (state->separate_uv_delta_q)",
          "3496:    diff_uv_delta = gf_bs_read_int(bs, 1);",
          "3500:   if (diff_uv_delta) {",
          "3503:   }",
          "3504:  }",
          "3508:   if (!state->separate_uv_delta_q) {",
          "3510:   }",
          "3511:  }",
          "",
          "[Removed Lines]",
          "3492:  s32 DeltaQYDc = av1_delta_q(bs);",
          "3498:   DeltaQUDc = av1_delta_q(bs);",
          "3499:   DeltaQUAc = av1_delta_q(bs);",
          "3501:    DeltaQVDc = av1_delta_q(bs);",
          "3502:    DeltaQVAc = av1_delta_q(bs);",
          "3505:  if (/*using_qmatrix*/gf_bs_read_int(bs, 1)) {",
          "",
          "[Added Lines]",
          "3541:  s32 DeltaQYDc = av1_delta_q(bs, \"DeltaQYDc_coded\", \"DeltaQYDc\");",
          "3547:   DeltaQUDc = av1_delta_q(bs, \"DeltaQUDc_coded\", \"DeltaQUDc\");",
          "3548:   DeltaQUAc = av1_delta_q(bs, \"DeltaQUAc_coded\", \"DeltaQUAc\");",
          "3550:    DeltaQVDc = av1_delta_q(bs, \"DeltaQVDc_coded\", \"DeltaQVDc\");",
          "3551:    DeltaQVAc = av1_delta_q(bs, \"DeltaQVAc_coded\", \"DeltaQVAc\");",
          "3554:  if (gf_bs_read_int_log(bs, 1, \"using_qmatrix\")) {",
          "3555:   gf_bs_read_int_log(bs, 4, \"qm_y\");",
          "3556:   gf_bs_read_int_log(bs, 4, \"qm_u\");",
          "3558:    gf_bs_read_int_log(bs, 4, \"qm_v\");",
          "",
          "---------------",
          "--- Hunk 59 ---",
          "[Context before]",
          "3514:  s32 seg_features_SEG_LVL_ALT_Q[8] = { 0,0,0,0,0,0,0,0 };",
          "3518:  if (segmentation_enabled) {",
          "3520:   u8 segmentation_update_data = 1;",
          "3521:   if (primary_ref_frame != AV1_PRIMARY_REF_NONE) {",
          "3523:    if (segmentation_update_map == 1)",
          "3526:   }",
          "3527:   if (segmentation_update_data == 1) {",
          "3528:    u32 i, j;",
          "3529:    for (i = 0; i < 8/*=MAX_SEGMENTS*/; i++) {",
          "3530:     for (j = 0; j < 8 /*=SEG_LVL_MAX*/; j++) {",
          "3532:       s32 val;",
          "3533:       u32 bitsToRead = Segmentation_Feature_Bits[j];",
          "3535:       if (!j) seg_features_SEG_LVL_ALT_Q_enabled[i] = 1;",
          "3537:       if (Segmentation_Feature_Signed[j] == 1) {",
          "3539:       }",
          "3540:       else {",
          "3542:       }",
          "3543:       if (!j) seg_features_SEG_LVL_ALT_Q[i] = val;",
          "3544:      }",
          "",
          "[Removed Lines]",
          "3517:  u8 segmentation_enabled = gf_bs_read_int(bs, 1);",
          "3522:    u8 segmentation_update_map = gf_bs_read_int(bs, 1);",
          "3525:    segmentation_update_data = gf_bs_read_int(bs, 1);",
          "3531:      if (/*feature_enabled = */gf_bs_read_int(bs, 1) == 1) {",
          "3538:        val = gf_bs_read_int(bs, 1 + bitsToRead);",
          "3541:        val = gf_bs_read_int(bs, bitsToRead);",
          "",
          "[Added Lines]",
          "3566:  u8 segmentation_enabled = gf_bs_read_int_log(bs, 1, \"segmentation_enabled\");",
          "3571:    u8 segmentation_update_map = gf_bs_read_int_log(bs, 1, \"segmentation_update_map\");",
          "3573:     gf_bs_read_int_log(bs, 1, \"segmentation_temporal_update\");",
          "3574:    segmentation_update_data = gf_bs_read_int_log(bs, 1, \"segmentation_update_data\");",
          "3580:      if (/*feature_enabled = */gf_bs_read_int_log_idx2(bs, 1, \"feature_enabled\", i, j) == 1) {",
          "3587:        val = gf_bs_read_int_log_idx2(bs, 1 + bitsToRead, \"signed_feature_value\", i, j);",
          "3590:        val = gf_bs_read_int_log_idx2(bs, bitsToRead, \"feature_value\", i, j);",
          "",
          "---------------",
          "--- Hunk 60 ---",
          "[Context before]",
          "3554:  u8 delta_q_present = 0;",
          "3555:  if (base_q_idx > 0) {",
          "3557:  }",
          "3558:  if (delta_q_present) {",
          "3560:  }",
          "",
          "[Removed Lines]",
          "3556:   delta_q_present = gf_bs_read_int(bs, 1);",
          "",
          "[Added Lines]",
          "3605:   delta_q_present = gf_bs_read_int_log(bs, 1, \"delta_q_present\");",
          "3608:   gf_bs_read_int_log(bs, 2, \"delta_q_res\");",
          "",
          "---------------",
          "--- Hunk 61 ---",
          "[Context before]",
          "3566:  if (delta_q_present) {",
          "3567:   if (!allow_intrabc) {",
          "3569:   }",
          "3570:   if (delta_lf_present) {",
          "3573:   }",
          "3574:  }",
          "",
          "[Removed Lines]",
          "3568:    delta_lf_present = gf_bs_read_int(bs, 1);",
          "",
          "[Added Lines]",
          "3617:    delta_lf_present = gf_bs_read_int_log(bs, 1, \"delta_lf_present\");",
          "3620:    gf_bs_read_int_log(bs, 2, \"delta_lf_res\");",
          "3621:    gf_bs_read_int_log(bs, 1, \"delta_lf_multi\");",
          "",
          "---------------",
          "--- Hunk 62 ---",
          "[Context before]",
          "3587:  if (!CodedLossless && !allow_intrabc) {",
          "3590:   if (!state->config->monochrome) {",
          "3591:    if (loop_filter_level_0 || loop_filter_level_1) {",
          "3594:    }",
          "3595:   }",
          "3598:   if (loop_filter_delta_enabled == 1) {",
          "3600:    if (loop_filter_delta_update) {",
          "3601:     u32 i;",
          "3602:     for (i = 0; i < 8/*TOTAL_REFS_PER_FRAME*/; i++) {",
          "3604:      if (update_ref_delta == 1) {",
          "3606:      }",
          "3607:     }",
          "3608:     for (i = 0; i < 2; i++) {",
          "3610:      if (update_mode_delta) {",
          "3612:      }",
          "3613:     }",
          "3614:    }",
          "",
          "[Removed Lines]",
          "3588:   u8 loop_filter_level_0 = gf_bs_read_int(bs, 6);",
          "3589:   u8 loop_filter_level_1 = gf_bs_read_int(bs, 6);",
          "3597:   u8 loop_filter_delta_enabled = gf_bs_read_int(bs, 1);",
          "3599:    u8 loop_filter_delta_update = gf_bs_read_int(bs, 1);",
          "3603:      u8 update_ref_delta = gf_bs_read_int(bs, 1);",
          "3609:      u8 update_mode_delta = gf_bs_read_int(bs, 1);",
          "",
          "[Added Lines]",
          "3637:   u8 loop_filter_level_0 = gf_bs_read_int_log(bs, 6, \"loop_filter_level_0\");",
          "3638:   u8 loop_filter_level_1 = gf_bs_read_int_log(bs, 6, \"loop_filter_level_1\");",
          "3641:     gf_bs_read_int_log(bs, 6, \"loop_filter_level_2\");",
          "3642:     gf_bs_read_int_log(bs, 6, \"loop_filter_level_3\");",
          "3645:   gf_bs_read_int_log(bs, 3, \"loop_filter_sharpness\");",
          "3646:   u8 loop_filter_delta_enabled = gf_bs_read_int_log(bs, 1, \"loop_filter_delta_enabled\");",
          "3648:    u8 loop_filter_delta_update = gf_bs_read_int_log(bs, 1, \"loop_filter_delta_update\");",
          "3652:      u8 update_ref_delta = gf_bs_read_int_log_idx(bs, 1, \"update_ref_delta\", i);",
          "3654:       gf_bs_read_int_log_idx(bs, 1 + 6, \"loop_filter_ref_deltas\", i);",
          "3658:      u8 update_mode_delta = gf_bs_read_int_log_idx(bs, 1, \"update_mode_delta\", i);",
          "3660:       gf_bs_read_int_log_idx(bs, 1 + 6, \"loop_filter_mode_deltas\", i);",
          "",
          "---------------",
          "--- Hunk 63 ---",
          "[Context before]",
          "3616:  }",
          "3618:  if (!CodedLossless && !allow_intrabc && state->enable_cdef) {",
          "3621:   u32 i, num_cd = 1 << cdef_bits;",
          "3622:   for (i = 0; i < num_cd; i++) {",
          "3625:    if (!state->config->monochrome) {",
          "3628:    }",
          "3629:   }",
          "3630:  }",
          "",
          "[Removed Lines]",
          "3620:   u8 cdef_bits = gf_bs_read_int(bs, 2);",
          "",
          "[Added Lines]",
          "3668:   gf_bs_read_int_log(bs, 2, \"cdef_damping_minus_3\");",
          "3669:   u8 cdef_bits = gf_bs_read_int_log(bs, 2, \"cdef_bits\");",
          "3672:    gf_bs_read_int_log_idx(bs, 4, \"cdef_y_pri_strength\", i);",
          "3673:    gf_bs_read_int_log_idx(bs, 2, \"cdef_y_sec_strength\", i);",
          "3675:     gf_bs_read_int_log_idx(bs, 4, \"cdef_uv_pri_strength\", i);",
          "3676:     gf_bs_read_int_log_idx(bs, 2, \"cdef_uv_sec_strength\", i);",
          "",
          "---------------",
          "--- Hunk 64 ---",
          "[Context before]",
          "3635:   u8 UsesLr = 0;",
          "3636:   u8 usesChromaLr = 0;",
          "3637:   for (i = 0; i < nb_planes; i++) {",
          "3640:    if (lr_type != AV1_RESTORE_NONE) {",
          "3641:     UsesLr = 1;",
          "",
          "[Removed Lines]",
          "3638:    u8 lr_type = gf_bs_read_int(bs, 2);",
          "",
          "[Added Lines]",
          "3687:    u8 lr_type = gf_bs_read_int_log_idx(bs, 2, \"lr_type\", i);",
          "",
          "---------------",
          "--- Hunk 65 ---",
          "[Context before]",
          "3646:   }",
          "3647:   if (UsesLr) {",
          "3648:    if (state->use_128x128_superblock) {",
          "3650:    }",
          "3651:    else {",
          "3653:     if (lr_unit_shift) {",
          "3656:     }",
          "3657:    }",
          "3658:    if (state->config->chroma_subsampling_x && state->config->chroma_subsampling_y && usesChromaLr) {",
          "3660:    }",
          "3661:   }",
          "3662:  }",
          "",
          "[Removed Lines]",
          "3652:     u8 lr_unit_shift = gf_bs_read_int(bs, 1);",
          "",
          "[Added Lines]",
          "3698:     gf_bs_read_int_log(bs, 1, \"lr_unit_shift_minus_1\");",
          "3701:     u8 lr_unit_shift = gf_bs_read_int_log(bs, 1, \"lr_unit_shift\");",
          "3703:      gf_bs_read_int_log(bs, 1, \"lr_unit_extra_shift\");",
          "3708:     gf_bs_read_int_log(bs, 1, \"lr_uv_shift\");",
          "",
          "---------------",
          "--- Hunk 66 ---",
          "[Context before]",
          "3664:  if (CodedLossless == 1) {",
          "3665:  }",
          "3666:  else {",
          "3668:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3716:   gf_bs_read_int_log(bs, 1, \"tx_mode_select\");",
          "",
          "---------------",
          "--- Hunk 67 ---",
          "[Context before]",
          "3672:  if (FrameIsIntra) {",
          "3673:  }",
          "3674:  else {",
          "3676:  }",
          "",
          "[Removed Lines]",
          "3675:   reference_select = gf_bs_read_int(bs, 1);",
          "",
          "[Added Lines]",
          "3724:   reference_select = gf_bs_read_int_log(bs, 1, \"reference_select\");",
          "",
          "---------------",
          "--- Hunk 68 ---",
          "[Context before]",
          "3731:   }",
          "3732:  }",
          "3733:  if (skipModeAllowed) {",
          "3735:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3783:   gf_bs_read_int_log(bs, 1, \"skip_mode_present\");",
          "",
          "---------------",
          "--- Hunk 69 ---",
          "[Context before]",
          "3740:  }",
          "3741:  else {",
          "3743:  }",
          "3748:  u32 ref;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3791:   gf_bs_read_int_log(bs, 1, \"allow_warped_motion\");",
          "3794:  gf_bs_read_int_log(bs, 1, \"reduced_tx\");",
          "",
          "---------------",
          "--- Hunk 70 ---",
          "[Context before]",
          "3756:   u32 refs;",
          "3757:   for (refs = AV1_LAST_FRAME; refs <= AV1_ALTREF_FRAME; refs++) {",
          "3758:    u8 type = AV1_GMC_IDENTITY;",
          "3760:    if (is_global) {",
          "3762:     if (is_rot_zoom) {",
          "3763:      type = AV1_GMC_ROTZOOM;",
          "3764:     }",
          "3765:     else {",
          "3767:      type = is_trans ? AV1_GMC_TRANSLATION : AV1_GMC_AFFINE;",
          "3769:     }",
          "",
          "[Removed Lines]",
          "3759:    Bool is_global = gf_bs_read_int(bs, 1);",
          "3761:     Bool is_rot_zoom = gf_bs_read_int(bs, 1);",
          "3766:      Bool is_trans = gf_bs_read_int(bs, 1);",
          "",
          "[Added Lines]",
          "3808:    Bool is_global = gf_bs_read_int_log_idx(bs, 1, \"is_global\", refs);",
          "3810:     Bool is_rot_zoom = gf_bs_read_int_log_idx(bs, 1, \"is_rot_zoom\", refs);",
          "3815:      Bool is_trans = gf_bs_read_int_log_idx(bs, 1, \"is_translation\", refs);",
          "",
          "---------------",
          "--- Hunk 71 ---",
          "[Context before]",
          "3793:  if (!state->film_grain_params_present || (!state->frame_state.show_frame && !showable_frame)) {",
          "3794:  }",
          "3795:  else {",
          "3797:   if (apply_grain) {",
          "3799:    u8 update_grain = 1;",
          "3800:    if (state->frame_state.frame_type == AV1_INTER_FRAME) {",
          "3802:    }",
          "3803:    if (!update_grain) {",
          "3805:    }",
          "3806:    else {",
          "3808:     for (i = 0; i < num_y_points; i++) {",
          "3811:     }",
          "3812:     u8 chroma_scaling_from_luma = 0;",
          "3815:     u8 num_cb_points = 0;",
          "3816:     u8 num_cr_points = 0;",
          "",
          "[Removed Lines]",
          "3796:   u8 apply_grain = gf_bs_read_int(bs, 1);",
          "3801:     update_grain = gf_bs_read_int(bs, 1);",
          "3807:     u32 i, num_y_points = gf_bs_read_int(bs, 4);",
          "3813:     if (!state->config->monochrome) chroma_scaling_from_luma = gf_bs_read_int(bs, 1);",
          "",
          "[Added Lines]",
          "3845:   u8 apply_grain = gf_bs_read_int_log(bs, 1, \"apply_grain\");",
          "3847:    gf_bs_read_int_log(bs, 16, \"grain_seed\");",
          "3850:     update_grain = gf_bs_read_int_log(bs, 1, \"update_grain\");",
          "3853:     gf_bs_read_int_log(bs, 3, \"film_grain_params_ref_idx\");",
          "3856:     u32 i, num_y_points = gf_bs_read_int_log(bs, 4, \"num_y_points\");",
          "3858:      gf_bs_read_int_log_idx(bs, 8, \"point_y_value\", i);",
          "3859:      gf_bs_read_int_log_idx(bs, 8, \"point_y_scaling\", i);",
          "3862:     if (!state->config->monochrome)",
          "3863:      chroma_scaling_from_luma = gf_bs_read_int_log(bs, 1, \"chroma_scaling_from_luma\");",
          "",
          "---------------",
          "--- Hunk 72 ---",
          "[Context before]",
          "3819:      ) {",
          "3820:     }",
          "3821:     else {",
          "3823:      for (i = 0; i < num_cb_points; i++) {",
          "3826:      }",
          "3828:      for (i = 0; i < num_cr_points; i++) {",
          "3831:      }",
          "3832:     }",
          "3835:     u16 numPosLuma = 2 * ar_coeff_lag * (ar_coeff_lag + 1);",
          "3836:     u16 numPosChroma = numPosLuma;",
          "3837:     if (num_y_points) {",
          "3838:      numPosChroma = numPosLuma + 1;",
          "3839:      for (i = 0; i < numPosLuma; i++) {",
          "3841:      }",
          "3842:     }",
          "3843:     if (chroma_scaling_from_luma || num_cb_points) {",
          "3844:      for (i = 0; i < numPosChroma; i++) {",
          "3846:      }",
          "3847:     }",
          "3848:     if (chroma_scaling_from_luma || num_cr_points) {",
          "3849:      for (i = 0; i < numPosChroma; i++) {",
          "3851:      }",
          "3852:     }",
          "3855:     if (num_cb_points) {",
          "3859:     }",
          "3860:     if (num_cr_points) {",
          "3864:     }",
          "3867:    }",
          "3868:   }",
          "3869:  }",
          "",
          "[Removed Lines]",
          "3822:      num_cb_points = gf_bs_read_int(bs, 4);",
          "3827:      num_cr_points = gf_bs_read_int(bs, 4);",
          "3834:     u8 ar_coeff_lag = gf_bs_read_int(bs, 2);",
          "",
          "[Added Lines]",
          "3872:      num_cb_points = gf_bs_read_int_log(bs, 4, \"num_cb_points\");",
          "3874:       gf_bs_read_int_log_idx(bs, 8, \"point_cb_value\", i);",
          "3875:       gf_bs_read_int_log_idx(bs, 8, \"point_cb_scaling\", i);",
          "3877:      num_cr_points = gf_bs_read_int_log(bs, 4, \"num_cr_points\");",
          "3879:       gf_bs_read_int_log_idx(bs, 8, \"point_cr_value\", i);",
          "3880:       gf_bs_read_int_log_idx(bs, 8, \"point_cr_scaling\", i);",
          "3883:     gf_bs_read_int_log(bs, 2, \"grain_scaling_minus_8\");",
          "3884:     u8 ar_coeff_lag = gf_bs_read_int_log(bs, 2, \"ar_coeff_lag\");",
          "3890:       gf_bs_read_int_log_idx(bs, 8, \"ar_coeffs_y_plus_128\", i);",
          "3895:       gf_bs_read_int_log_idx(bs, 8, \"ar_coeffs_cb_plus_128\", i);",
          "3900:       gf_bs_read_int_log_idx(bs, 8, \"ar_coeffs_cr_plus_128\", i);",
          "3903:     gf_bs_read_int_log(bs, 2, \"ar_coeff_shift_minus_6\");",
          "3904:     gf_bs_read_int_log(bs, 2, \"grain_scale_shift\");",
          "3906:      gf_bs_read_int_log(bs, 8, \"cb_mult\");",
          "3907:      gf_bs_read_int_log(bs, 8, \"cb_luma_mult\");",
          "3908:      gf_bs_read_int_log(bs, 9, \"cb_offset\");",
          "3911:      gf_bs_read_int_log(bs, 8, \"cr_mult\");",
          "3912:      gf_bs_read_int_log(bs, 8, \"cr_luma_mult\");",
          "3913:      gf_bs_read_int_log(bs, 9, \"cr_offset\");",
          "3915:     gf_bs_read_int_log(bs, 1, \"overlap_flag\");",
          "3916:     gf_bs_read_int_log(bs, 1, \"clip_to_restricted_range\");",
          "",
          "---------------",
          "--- Hunk 73 ---",
          "[Context before]",
          "3965:    tile_size = (u32)(obu_size - (pos - obu_start));",
          "3966:   }",
          "3967:   else {",
          "3969:    pos = gf_bs_get_position(bs);",
          "3970:    tile_start_offset = (u32)(pos - obu_start);",
          "3971:    tile_size = (u32)(tile_size_minus_1 + 1/* + state->tile_size_bytes*/);",
          "",
          "[Removed Lines]",
          "3968:    u64 tile_size_minus_1 = aom_av1_le(bs, state->tile_size_bytes);",
          "",
          "[Added Lines]",
          "4018:    u64 tile_size_minus_1 = aom_av1_le(bs, state->tile_size_bytes, \"tile_size_minus_1\");",
          "",
          "---------------",
          "--- Hunk 74 ---",
          "[Context before]",
          "4629:  0",
          "4630: };",
          "4633: {",
          "4634:  u8 coded;",
          "4635:  u32 bits = 0, read = 0;",
          "4636:  while (1) {",
          "4637:   read = gf_bs_peek_bits(bs, 8, 0);",
          "",
          "[Removed Lines]",
          "4632: u32 gf_bs_get_ue(GF_BitStream *bs)",
          "",
          "[Added Lines]",
          "4682: u32 gf_bs_read_ue_log_idx3(GF_BitStream *bs, const char *fname, s32 idx1, s32 idx2, s32 idx3)",
          "4685:  u32 val;",
          "",
          "---------------",
          "--- Hunk 75 ---",
          "[Context before]",
          "4648:  coded = avc_golomb_bits[read];",
          "4649:  gf_bs_read_int(bs, coded);",
          "4650:  bits += coded;",
          "4652: }",
          "4655: {",
          "4657:  if ((v & 0x1) == 0) return (s32)(0 - (v >> 1));",
          "4658:  return (v + 1) >> 1;",
          "4659: }",
          "4662:  s32 length = 1;",
          "4663:  s32 temp = ++num;",
          "",
          "[Removed Lines]",
          "4651:  return gf_bs_read_int(bs, bits + 1) - 1;",
          "4654: s32 gf_bs_get_se(GF_BitStream *bs)",
          "4656:  u32 v = gf_bs_get_ue(bs);",
          "4661: void gf_bs_set_ue(GF_BitStream *bs, u32 num) {",
          "",
          "[Added Lines]",
          "4702:  val = gf_bs_read_int(bs, bits + 1) - 1;",
          "4703:  if (fname) {",
          "4704:   gf_bs_log_idx(bs, bits+1, fname, val, idx1, idx2, idx3);",
          "4705:  }",
          "4706:  return val;",
          "4708: #define gf_bs_read_ue_log_idx2(_bs, _fname, _idx1, _idx2) gf_bs_read_ue_log_idx3(_bs, _fname, (s32) _idx1, (s32) _idx2, -1)",
          "4709: #define gf_bs_read_ue_log_idx(_bs, _fname, _idx) gf_bs_read_ue_log_idx3(_bs, _fname, (s32) _idx, -1, -1)",
          "4710: #define gf_bs_read_ue_log(_bs, _fname) gf_bs_read_ue_log_idx3(_bs, _fname, -1, -1, -1)",
          "4713: u32 gf_bs_read_ue(GF_BitStream *bs)",
          "4715:  return gf_bs_read_ue_log(bs, NULL);",
          "4716: }",
          "4718: s32 gf_bs_read_se(GF_BitStream *bs)",
          "4719: {",
          "4720:  u32 v = gf_bs_read_ue(bs);",
          "4725: s32 gf_bs_read_se_log_idx2(GF_BitStream *bs, const char *fname, s32 idx1, s32 idx2)",
          "4726: {",
          "4727:  s32 res = gf_bs_read_se(bs);",
          "4728:  if (fname)",
          "4729:   gf_bs_log_idx(bs, -1, fname, res, idx1, idx2, -1);",
          "4730:  return res;",
          "4731: }",
          "4732: #define gf_bs_read_se_log_idx(_bs, _fname, _idx) gf_bs_read_se_log_idx2(_bs, _fname, (s32) _idx, -1)",
          "4733: #define gf_bs_read_se_log(_bs, _fname) gf_bs_read_se_log_idx2(_bs, _fname, -1, -1)",
          "4737: void gf_bs_write_ue(GF_BitStream *bs, u32 num) {",
          "",
          "---------------",
          "--- Hunk 76 ---",
          "[Context before]",
          "4671:  gf_bs_write_int(bs, num, (length + 1) >> 1);",
          "4672: }",
          "4675: {",
          "4676:  u32 v;",
          "4677:  if (num <= 0)",
          "",
          "[Removed Lines]",
          "4674: void gf_bs_set_se(GF_BitStream *bs, s32 num)",
          "",
          "[Added Lines]",
          "4750: void gf_bs_write_se(GF_BitStream *bs, s32 num)",
          "",
          "---------------",
          "--- Hunk 77 ---",
          "[Context before]",
          "4679:  else",
          "4680:   v = (num << 1) - 1;",
          "4683: }",
          "4685: u32 gf_media_nalu_is_start_code(GF_BitStream *bs)",
          "",
          "[Removed Lines]",
          "4682:  gf_bs_set_ue(bs, v);",
          "",
          "[Added Lines]",
          "4758:  gf_bs_write_ue(bs, v);",
          "",
          "---------------",
          "--- Hunk 78 ---",
          "[Context before]",
          "4837: {",
          "4838:  int i, cpb_cnt_minus1;",
          "4841:  if (cpb_cnt_minus1 > 31)",
          "4842:   GF_LOG(GF_LOG_WARNING, GF_LOG_CODING, (\"[avc-h264] invalid cpb_cnt_minus1 value: %d (expected in [0;31])\\n\", cpb_cnt_minus1));",
          "4847:  for (i = 0; i <= cpb_cnt_minus1; i++) {",
          "4857:  return;",
          "4858: }",
          "",
          "[Removed Lines]",
          "4851:  }",
          "",
          "[Added Lines]",
          "4916:  cpb_cnt_minus1 = gf_bs_read_ue_log(bs, \"cpb_cnt_minus1\");",
          "4919:  gf_bs_read_int_log(bs, 4, \"bit_rate_scale\");",
          "4920:  gf_bs_read_int_log(bs, 4, \"cpb_size_scale\");",
          "4924:   gf_bs_read_ue_log_idx(bs, \"bit_rate_value_minus1\", i);",
          "4925:   gf_bs_read_ue_log_idx(bs, \"cpb_size_value_minus1\", i);",
          "4926:   gf_bs_read_int_log_idx(bs, 1, \"cbr_flag\", i);",
          "4927:  }",
          "4928:  gf_bs_read_int_log(bs, 5, \"initial_cpb_removal_delay_length_minus1\");",
          "4929:  hrd->cpb_removal_delay_length_minus1 = gf_bs_read_int_log(bs, 5, \"cpb_removal_delay_length_minus1\");",
          "4930:  hrd->dpb_output_delay_length_minus1 = gf_bs_read_int_log(bs, 5, \"dpb_output_delay_length_minus1\");",
          "4931:  hrd->time_offset_length = gf_bs_read_int_log(bs, 5, \"time_offset_length\");",
          "",
          "---------------",
          "--- Hunk 79 ---",
          "[Context before]",
          "5016:  }",
          "5018:  if (!nal_hdr) {",
          "5020:  }",
          "5025:  if (pcomp & 0x3)",
          "5026:   return -1;",
          "5031:  by subset SPS. According to the SVC standard, subset SPS can have the same sps_id",
          "5034:  if (sps_id >= 32) {",
          "5035:   return -1;",
          "5036:  }",
          "",
          "[Removed Lines]",
          "5021:  profile_idc = gf_bs_read_int(bs, 8);",
          "5023:  pcomp = gf_bs_read_int(bs, 8);",
          "5028:  level_idc = gf_bs_read_int(bs, 8);",
          "5033:  sps_id = gf_bs_get_ue(bs) + GF_SVC_SSPS_ID_SHIFT * subseq_sps;",
          "",
          "[Added Lines]",
          "5094:   gf_bs_read_int_log(bs, 1, \"forbidden_zero_bit\");",
          "5095:   gf_bs_read_int_log(bs, 2, \"nal_ref_idc\");",
          "5096:   gf_bs_read_int_log(bs, 5, \"nal_unit_type\");",
          "5098:  profile_idc = gf_bs_read_int_log(bs, 8, \"profile_idc\");",
          "5100:  pcomp = gf_bs_read_int_log(bs, 8, \"profile_compatibility\");",
          "5105:  level_idc = gf_bs_read_int_log(bs, 8, \"level_idc\");",
          "5110:  sps_id = gf_bs_read_ue_log(bs, \"sps_id\") + GF_SVC_SSPS_ID_SHIFT * subseq_sps;",
          "",
          "---------------",
          "--- Hunk 80 ---",
          "[Context before]",
          "5057:  case 86:",
          "5058:  case 118:",
          "5059:  case 128:",
          "5061:   sps->ChromaArrayType = chroma_format_idc;",
          "5062:   if (chroma_format_idc == 3) {",
          "5065:    Depending on the value of separate_colour_plane_flag, the value of the variable ChromaArrayType is assigned as follows.",
          "5066:    \\96 If separate_colour_plane_flag is equal to 0, ChromaArrayType is set equal to chroma_format_idc.",
          "",
          "[Removed Lines]",
          "5060:   chroma_format_idc = gf_bs_get_ue(bs);",
          "5063:    separate_colour_plane_flag = gf_bs_read_int(bs, 1);",
          "",
          "[Added Lines]",
          "5137:   chroma_format_idc = gf_bs_read_ue_log(bs, \"chroma_format_idc\");",
          "5140:    separate_colour_plane_flag = gf_bs_read_int_log(bs, 1, \"separate_colour_plane_flag\");",
          "",
          "---------------",
          "--- Hunk 81 ---",
          "[Context before]",
          "5069:    if (separate_colour_plane_flag) sps->ChromaArrayType = 0;",
          "5070:   }",
          "5076:    u32 k;",
          "5077:    for (k = 0; k < 8; k++) {",
          "5079:      u32 z, last = 8, next = 8;",
          "5080:      u32 sl = k < 6 ? 16 : 64;",
          "5081:      for (z = 0; z < sl; z++) {",
          "5082:       if (next) {",
          "5084:        next = (last + delta + 256) % 256;",
          "5085:       }",
          "5086:       last = next ? next : last;",
          "",
          "[Removed Lines]",
          "5071:   luma_bd = gf_bs_get_ue(bs);",
          "5072:   chroma_bd = gf_bs_get_ue(bs);",
          "5075:   if (gf_bs_read_int(bs, 1)) {",
          "5078:     if (gf_bs_read_int(bs, 1)) {",
          "5083:        s32 delta = gf_bs_get_se(bs);",
          "",
          "[Added Lines]",
          "5148:   luma_bd = gf_bs_read_ue_log(bs, \"luma_bit_depth\");",
          "5149:   chroma_bd = gf_bs_read_ue_log(bs, \"chroma_bit_depth\");",
          "5152:   if (gf_bs_read_int_log(bs, 1, \"seq_scaling_matrix_present_flag\")) {",
          "5155:     if (gf_bs_read_int_log_idx(bs, 1, \"seq_scaling_list_present_flag\", k)) {",
          "5160:        s32 delta = gf_bs_read_se(bs);",
          "",
          "---------------",
          "--- Hunk 82 ---",
          "[Context before]",
          "5094:  sps->profile_idc = profile_idc;",
          "5095:  sps->level_idc = level_idc;",
          "5096:  sps->prof_compat = pcomp;",
          "5099:  sps->chroma_format = chroma_format_idc;",
          "5100:  sps->luma_bit_depth_m8 = luma_bd;",
          "5101:  sps->chroma_bit_depth_m8 = chroma_bd;",
          "5103:  if (sps->poc_type == 0) {",
          "5105:  }",
          "5106:  else if (sps->poc_type == 1) {",
          "5111:   if (sps->poc_cycle_length > GF_ARRAY_LENGTH(sps->offset_for_ref_frame)) {",
          "5112:    GF_LOG(GF_LOG_ERROR, GF_LOG_CODING, (\"[avc-h264] offset_for_ref_frame overflow from poc_cycle_length\\n\"));",
          "5113:    return -1;",
          "5114:   }",
          "5116:  }",
          "5117:  if (sps->poc_type > 2) {",
          "5118:   return -1;",
          "5119:  }",
          "5127:  sps->width = mb_width * 16;",
          "5128:  sps->height = (2 - sps->frame_mbs_only_flag) * mb_height * 16;",
          "5134:   int CropUnitX, CropUnitY, SubWidthC = -1, SubHeightC = -1;",
          "5136:   if (chroma_format_idc == 1) {",
          "",
          "[Removed Lines]",
          "5097:  sps->log2_max_frame_num = gf_bs_get_ue(bs) + 4;",
          "5098:  sps->poc_type = gf_bs_get_ue(bs);",
          "5104:   sps->log2_max_poc_lsb = gf_bs_get_ue(bs) + 4;",
          "5107:   sps->delta_pic_order_always_zero_flag = gf_bs_read_int(bs, 1);",
          "5108:   sps->offset_for_non_ref_pic = gf_bs_get_se(bs);",
          "5109:   sps->offset_for_top_to_bottom_field = gf_bs_get_se(bs);",
          "5110:   sps->poc_cycle_length = gf_bs_get_ue(bs);",
          "5115:   for (i = 0; i < sps->poc_cycle_length; i++) sps->offset_for_ref_frame[i] = gf_bs_get_se(bs);",
          "5120:  sps->max_num_ref_frames = gf_bs_get_ue(bs);",
          "5121:  sps->gaps_in_frame_num_value_allowed_flag = gf_bs_read_int(bs, 1);",
          "5122:  mb_width = gf_bs_get_ue(bs) + 1;",
          "5123:  mb_height = gf_bs_get_ue(bs) + 1;",
          "5125:  sps->frame_mbs_only_flag = gf_bs_read_int(bs, 1);",
          "5130:  if (!sps->frame_mbs_only_flag) sps->mb_adaptive_frame_field_flag = gf_bs_read_int(bs, 1);",
          "",
          "[Added Lines]",
          "5174:  sps->log2_max_frame_num = gf_bs_read_ue_log(bs, \"log2_max_frame_num\") + 4;",
          "5175:  sps->poc_type = gf_bs_read_ue_log(bs, \"poc_type\");",
          "5181:   sps->log2_max_poc_lsb = gf_bs_read_ue_log(bs, \"log2_max_poc_lsb\") + 4;",
          "5184:   sps->delta_pic_order_always_zero_flag = gf_bs_read_int_log(bs, 1, \"delta_pic_order_always_zero_flag\");",
          "5185:   sps->offset_for_non_ref_pic = gf_bs_read_se_log(bs, \"offset_for_non_ref_pic\");",
          "5186:   sps->offset_for_top_to_bottom_field = gf_bs_read_se_log(bs, \"offset_for_top_to_bottom_field\");",
          "5187:   sps->poc_cycle_length = gf_bs_read_ue_log(bs, \"poc_cycle_length\");",
          "5192:   for (i = 0; i < sps->poc_cycle_length; i++)",
          "5193:    sps->offset_for_ref_frame[i] = gf_bs_read_se_log_idx(bs, \"offset_for_ref_frame\", i);",
          "5198:  sps->max_num_ref_frames = gf_bs_read_ue_log(bs, \"max_num_ref_frames\");",
          "5199:  sps->gaps_in_frame_num_value_allowed_flag = gf_bs_read_int_log(bs, 1, \"gaps_in_frame_num_value_allowed_flag\");",
          "5200:  mb_width = gf_bs_read_ue_log(bs, \"pic_width_in_mbs_minus1\") + 1;",
          "5201:  mb_height = gf_bs_read_ue_log(bs, \"pic_height_in_map_units_minus1\") + 1;",
          "5203:  sps->frame_mbs_only_flag = gf_bs_read_int_log(bs, 1, \"frame_mbs_only_flag\");",
          "5208:  if (!sps->frame_mbs_only_flag) sps->mb_adaptive_frame_field_flag = gf_bs_read_int_log(bs, 1, \"mb_adaptive_frame_field_flag\");",
          "5209:  gf_bs_read_int_log(bs, 1, \"direct_8x8_inference_flag\");",
          "5211:  if (gf_bs_read_int_log(bs, 1, \"frame_cropping_flag\")) {",
          "",
          "---------------",
          "--- Hunk 83 ---",
          "[Context before]",
          "5153:    CropUnitY = SubHeightC * (2 - sps->frame_mbs_only_flag);",
          "5154:   }",
          "5161:   sps->width -= CropUnitX * (cl + cr);",
          "5162:   sps->height -= CropUnitY * (ct + cb);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5234:   cl = gf_bs_read_ue_log(bs, \"frame_crop_left_offset\");",
          "5235:   cr = gf_bs_read_ue_log(bs, \"frame_crop_right_offset\");",
          "5236:   ct = gf_bs_read_ue_log(bs, \"frame_crop_top_offset\");",
          "5237:   cb = gf_bs_read_ue_log(bs, \"frame_crop_bottom_offset\");",
          "",
          "---------------",
          "--- Hunk 84 ---",
          "[Context before]",
          "5175:  }",
          "5178:  if (sps->vui_parameters_present_flag) {",
          "5180:   if (sps->vui.aspect_ratio_info_present_flag) {",
          "5182:    if (aspect_ratio_idc == 255) {",
          "5185:    }",
          "5186:    else if (aspect_ratio_idc < GF_ARRAY_LENGTH(avc_hevc_sar) ) {",
          "5187:     sps->vui.par_num = avc_hevc_sar[aspect_ratio_idc].w;",
          "",
          "[Removed Lines]",
          "5177:  sps->vui_parameters_present_flag = gf_bs_read_int(bs, 1);",
          "5179:   sps->vui.aspect_ratio_info_present_flag = gf_bs_read_int(bs, 1);",
          "5181:    s32 aspect_ratio_idc = gf_bs_read_int(bs, 8);",
          "",
          "[Added Lines]",
          "5255:  sps->vui_parameters_present_flag = gf_bs_read_int_log(bs, 1, \"vui_parameters_present_flag\");",
          "5257:   sps->vui.aspect_ratio_info_present_flag = gf_bs_read_int_log(bs, 1, \"aspect_ratio_info_present_flag\");",
          "5259:    s32 aspect_ratio_idc = gf_bs_read_int_log(bs, 8, \"aspect_ratio_idc\");",
          "5261:     sps->vui.par_num = gf_bs_read_int_log(bs, 16, \"aspect_ratio_num\");",
          "5262:     sps->vui.par_den = gf_bs_read_int_log(bs, 16, \"aspect_ratio_den\");",
          "",
          "---------------",
          "--- Hunk 85 ---",
          "[Context before]",
          "5191:     GF_LOG(GF_LOG_WARNING, GF_LOG_CODING, (\"[avc-h264] Unknown aspect_ratio_idc: your video may have a wrong aspect ratio. Contact the GPAC team!\\n\"));",
          "5192:    }",
          "5193:   }",
          "5195:   if (sps->vui.overscan_info_present_flag)",
          "5199:   sps->vui.video_format = 5;",
          "",
          "[Removed Lines]",
          "5194:   sps->vui.overscan_info_present_flag = gf_bs_read_int(bs, 1);",
          "",
          "[Added Lines]",
          "5272:   sps->vui.overscan_info_present_flag = gf_bs_read_int_log(bs, 1, \"overscan_info_present_flag\");",
          "5274:    gf_bs_read_int_log(bs, 1, \"overscan_appropriate_flag\");",
          "",
          "---------------",
          "--- Hunk 86 ---",
          "[Context before]",
          "5201:   sps->vui.transfer_characteristics = 2;",
          "5202:   sps->vui.matrix_coefficients = 2;",
          "5205:   if (sps->vui.video_signal_type_present_flag) {",
          "5209:    if (sps->vui.colour_description_present_flag) {",
          "5213:    }",
          "5214:   }",
          "5219:   }",
          "5222:   if (sps->vui.timing_info_present_flag) {",
          "5226:   }",
          "5229:   if (sps->vui.nal_hrd_parameters_present_flag)",
          "5230:    avc_parse_hrd_parameters(bs, &sps->vui.hrd);",
          "5233:   if (sps->vui.vcl_hrd_parameters_present_flag)",
          "5234:    avc_parse_hrd_parameters(bs, &sps->vui.hrd);",
          "5236:   if (sps->vui.nal_hrd_parameters_present_flag || sps->vui.vcl_hrd_parameters_present_flag)",
          "5240:  }",
          "",
          "[Removed Lines]",
          "5204:   sps->vui.video_signal_type_present_flag = gf_bs_read_int(bs, 1);",
          "5206:    sps->vui.video_format = gf_bs_read_int(bs, 3);",
          "5207:    sps->vui.video_full_range_flag = gf_bs_read_int(bs, 1);",
          "5208:    sps->vui.colour_description_present_flag = gf_bs_read_int(bs, 1);",
          "5210:     sps->vui.colour_primaries = gf_bs_read_int(bs, 8);",
          "5211:     sps->vui.transfer_characteristics = gf_bs_read_int(bs, 8);",
          "5212:     sps->vui.matrix_coefficients = gf_bs_read_int(bs, 8);",
          "5221:   sps->vui.timing_info_present_flag = gf_bs_read_int(bs, 1);",
          "5223:    sps->vui.num_units_in_tick = gf_bs_read_int(bs, 32);",
          "5224:    sps->vui.time_scale = gf_bs_read_int(bs, 32);",
          "5225:    sps->vui.fixed_frame_rate_flag = gf_bs_read_int(bs, 1);",
          "5228:   sps->vui.nal_hrd_parameters_present_flag = gf_bs_read_int(bs, 1);",
          "5232:   sps->vui.vcl_hrd_parameters_present_flag = gf_bs_read_int(bs, 1);",
          "5237:    sps->vui.low_delay_hrd_flag = gf_bs_read_int(bs, 1);",
          "5239:   sps->vui.pic_struct_present_flag = gf_bs_read_int(bs, 1);",
          "",
          "[Added Lines]",
          "5282:   sps->vui.video_signal_type_present_flag = gf_bs_read_int_log(bs, 1, \"video_signal_type_present_flag\");",
          "5284:    sps->vui.video_format = gf_bs_read_int_log(bs, 3, \"video_format\");",
          "5285:    sps->vui.video_full_range_flag = gf_bs_read_int_log(bs, 1, \"video_full_range_flag\");",
          "5286:    sps->vui.colour_description_present_flag = gf_bs_read_int_log(bs, 1, \"colour_description_present_flag\");",
          "5288:     sps->vui.colour_primaries = gf_bs_read_int_log(bs, 8, \"colour_primaries\");",
          "5289:     sps->vui.transfer_characteristics = gf_bs_read_int_log(bs, 8, \"transfer_characteristics\");",
          "5290:     sps->vui.matrix_coefficients = gf_bs_read_int_log(bs, 8, \"matrix_coefficients\");",
          "5294:   if (gf_bs_read_int_log(bs, 1, \"chroma_location_info_present_flag\")) {",
          "5295:    gf_bs_read_ue_log(bs, \"chroma_sample_location_type_top_field\");",
          "5296:    gf_bs_read_ue_log(bs, \"chroma_sample_location_type_bottom_field\");",
          "5299:   sps->vui.timing_info_present_flag = gf_bs_read_int_log(bs, 1, \"timing_info_present_flag\");",
          "5301:    sps->vui.num_units_in_tick = gf_bs_read_int_log(bs, 32, \"num_units_in_tick\");",
          "5302:    sps->vui.time_scale = gf_bs_read_int_log(bs, 32, \"time_scale\");",
          "5303:    sps->vui.fixed_frame_rate_flag = gf_bs_read_int_log(bs, 1, \"fixed_frame_rate_flag\");",
          "5306:   sps->vui.nal_hrd_parameters_present_flag = gf_bs_read_int_log(bs, 1, \"nal_hrd_parameters_present_flag\");",
          "5310:   sps->vui.vcl_hrd_parameters_present_flag = gf_bs_read_int_log(bs, 1, \"vcl_hrd_parameters_present_flag\");",
          "5315:    sps->vui.low_delay_hrd_flag = gf_bs_read_int_log(bs, 1, \"low_delay_hrd_flag\");",
          "5317:   sps->vui.pic_struct_present_flag = gf_bs_read_int_log(bs, 1, \"pic_struct_present_flag\");",
          "",
          "---------------",
          "--- Hunk 87 ---",
          "[Context before]",
          "5245:    u8 extended_spatial_scalability_idc;",
          "5250:    if (sps->ChromaArrayType == 1 || sps->ChromaArrayType == 2) {",
          "5252:    }",
          "5253:    if (sps->ChromaArrayType == 1) {",
          "5255:    }",
          "5256:    if (extended_spatial_scalability_idc == 1) {",
          "5257:     if (sps->ChromaArrayType > 0) {",
          "5260:     }",
          "5265:    }",
          "5268:    }",
          "5275:     for (i = 0; i <= vui_ext_num_entries_minus1; i++) {",
          "5276:      u8 vui_ext_nal_hrd_parameters_present_flag, vui_ext_vcl_hrd_parameters_present_flag, vui_ext_timing_info_present_flag;",
          "5281:      if (vui_ext_timing_info_present_flag) {",
          "5285:      }",
          "5287:      if (vui_ext_nal_hrd_parameters_present_flag) {",
          "5289:      }",
          "5291:      if (vui_ext_vcl_hrd_parameters_present_flag) {",
          "5293:      }",
          "5294:      if (vui_ext_nal_hrd_parameters_present_flag || vui_ext_vcl_hrd_parameters_present_flag) {",
          "5296:      }",
          "5298:     }",
          "5299:    }",
          "5300:   }",
          "",
          "[Removed Lines]",
          "5249:    extended_spatial_scalability_idc = gf_bs_read_int(bs, 2);",
          "5266:    if (/*seq_tcoeff_level_prediction_flag*/gf_bs_read_int(bs, 1)) {",
          "5272:    if (gf_bs_read_int(bs, 1)) {",
          "5273:     u32 vui_ext_num_entries_minus1 = gf_bs_get_ue(bs);",
          "5280:      vui_ext_timing_info_present_flag = gf_bs_read_int(bs, 1);",
          "5286:      vui_ext_nal_hrd_parameters_present_flag = gf_bs_read_int(bs, 1);",
          "5290:      vui_ext_vcl_hrd_parameters_present_flag = gf_bs_read_int(bs, 1);",
          "",
          "[Added Lines]",
          "5326:    gf_bs_read_int_log(bs, 1, \"inter_layer_deblocking_filter_control_present_flag\");",
          "5327:    extended_spatial_scalability_idc = gf_bs_read_int_log(bs, 2, \"extended_spatial_scalability_idc\");",
          "5329:     gf_bs_read_int_log(bs, 1, \"chroma_phase_x_plus1_flag\");",
          "5332:     gf_bs_read_int_log(bs, 2, \"chroma_phase_y_plus1\");",
          "5336:      gf_bs_read_int_log(bs, 1, \"seq_ref_layer_chroma_phase_x_plus1_flag\");",
          "5337:      gf_bs_read_int_log(bs, 2, \"seq_ref_layer_chroma_phase_y_plus1\");",
          "5339:     gf_bs_read_se_log(bs, \"seq_scaled_ref_layer_left_offset\");",
          "5340:     gf_bs_read_se_log(bs, \"seq_scaled_ref_layer_top_offset\");",
          "5341:     gf_bs_read_se_log(bs, \"seq_scaled_ref_layer_right_offset\");",
          "5342:     gf_bs_read_se_log(bs, \"seq_scaled_ref_layer_bottom_offset\");",
          "5344:    if (gf_bs_read_int_log(bs, 1, \"seq_tcoeff_level_prediction_flag\")) {",
          "5345:     gf_bs_read_int_log(bs, 1, \"adaptive_tcoeff_level_prediction_flag\");",
          "5347:    gf_bs_read_int_log(bs, 1, \"slice_header_restriction_flag\");",
          "5349:    if (gf_bs_read_int_log(bs, 1, \"svc_vui_parameters_present\")) {",
          "5350:     u32 vui_ext_num_entries_minus1 = gf_bs_read_ue_log(bs, \"vui_ext_num_entries_minus1\");",
          "5354:      gf_bs_read_int_log(bs, 3, \"vui_ext_dependency_id\");",
          "5355:      gf_bs_read_int_log(bs, 4, \"vui_ext_quality_id\");",
          "5356:      gf_bs_read_int_log(bs, 3, \"vui_ext_temporal_id\");",
          "5357:      vui_ext_timing_info_present_flag = gf_bs_read_int_log(bs, 1, \"vui_ext_timing_info_present_flag\");",
          "5359:       gf_bs_read_int_log(bs, 32, \"vui_ext_num_units_in_tick\");",
          "5360:       gf_bs_read_int_log(bs, 32, \"vui_ext_time_scale\");",
          "5361:       gf_bs_read_int_log(bs, 1, \"vui_ext_fixed_frame_rate_flag\");",
          "5363:      vui_ext_nal_hrd_parameters_present_flag = gf_bs_read_int_log(bs, 1, \"vui_ext_nal_hrd_parameters_present_flag\");",
          "5367:      vui_ext_vcl_hrd_parameters_present_flag = gf_bs_read_int_log(bs, 1, \"vui_ext_vcl_hrd_parameters_present_flag\");",
          "5372:       gf_bs_read_int_log(bs, 1, \"vui_ext_low_delay_hrd_flag\");",
          "5374:      gf_bs_read_int_log(bs, 1, \"vui_ext_pic_struct_present_flag\");",
          "",
          "---------------",
          "--- Hunk 88 ---",
          "[Context before]",
          "5303:    return sps_id;",
          "5304:   }",
          "5307:    GF_LOG(GF_LOG_WARNING, GF_LOG_CODING, (\"[avc-h264] skipping parsing end of Subset SPS (additional_extension2)\\n\"));",
          "5308:    return sps_id;",
          "5309:   }",
          "",
          "[Removed Lines]",
          "5306:   if (gf_bs_read_int(bs, 1)) {",
          "",
          "[Added Lines]",
          "5383:   if (gf_bs_read_int_log(bs, 1, \"additional_extension2\")) {",
          "",
          "---------------",
          "--- Hunk 89 ---",
          "[Context before]",
          "5358:  gf_bs_enable_emulation_byte_removal(bs, GF_TRUE);",
          "5360:  if (!nal_hdr) {",
          "5362:  }",
          "5364:  if (pps_id >= 255) {",
          "5365:   return -1;",
          "5366:  }",
          "",
          "[Removed Lines]",
          "5363:  pps_id = gf_bs_get_ue(bs);",
          "",
          "[Added Lines]",
          "5438:   gf_bs_read_int_log(bs, 1, \"forbidden_zero_bit\");",
          "5439:   gf_bs_read_int_log(bs, 2, \"nal_ref_idc\");",
          "5440:   gf_bs_read_int_log(bs, 5, \"nal_unit_type\");",
          "5442:  pps_id = gf_bs_read_ue_log(bs, \"pps_id\");",
          "",
          "---------------",
          "--- Hunk 90 ---",
          "[Context before]",
          "5368:  pps->id = pps_id;",
          "5370:  if (!pps->status) pps->status = 1;",
          "5372:  if (pps->sps_id >= 32) {",
          "5373:   pps->sps_id = 0;",
          "5374:   return -1;",
          "",
          "[Removed Lines]",
          "5371:  pps->sps_id = gf_bs_get_ue(bs);",
          "",
          "[Added Lines]",
          "5450:  pps->sps_id = gf_bs_read_ue_log(bs, \"sps_id\");",
          "",
          "---------------",
          "--- Hunk 91 ---",
          "[Context before]",
          "5379:  }",
          "5385:  if (pps->slice_group_count > 1) {",
          "5386:   u32 iGroup;",
          "5388:   if (pps->mb_slice_group_map_type == 0) {",
          "5389:    for (iGroup = 0; iGroup <= pps->slice_group_count - 1; iGroup++)",
          "5391:   }",
          "5392:   else if (pps->mb_slice_group_map_type == 2) {",
          "5393:    for (iGroup = 0; iGroup < pps->slice_group_count - 1; iGroup++) {",
          "5396:    }",
          "5397:   }",
          "5398:   else if (pps->mb_slice_group_map_type == 3 || pps->mb_slice_group_map_type == 4 || pps->mb_slice_group_map_type == 5) {",
          "5401:   }",
          "5402:   else if (pps->mb_slice_group_map_type == 6) {",
          "5403:    u32 i;",
          "5405:    for (i = 0; i <= pps->pic_size_in_map_units_minus1; i++) {",
          "5407:    }",
          "5408:   }",
          "5409:  }",
          "5414:  if ((pps->ref_count[0] > 32) || (pps->ref_count[1] > 32)) goto exit;",
          "5426:  return pps_id;",
          "5427: }",
          "",
          "[Removed Lines]",
          "5382:  pps->entropy_coding_mode_flag = gf_bs_read_int(bs, 1);",
          "5383:  pps->pic_order_present = gf_bs_read_int(bs, 1);",
          "5384:  pps->slice_group_count = gf_bs_get_ue(bs) + 1;",
          "5387:   pps->mb_slice_group_map_type = gf_bs_get_ue(bs);",
          "5404:    pps->pic_size_in_map_units_minus1 = gf_bs_get_ue(bs);",
          "5410:  pps->num_ref_idx_l0_default_active_minus1 = gf_bs_get_ue(bs);",
          "5411:  pps->num_ref_idx_l1_default_active_minus1 = gf_bs_get_ue(bs);",
          "5417:  pps->weighted_pred_flag = gf_bs_read_int(bs, 1);",
          "5422:  pps->deblocking_filter_control_present_flag = gf_bs_read_int(bs, 1);",
          "5424:  pps->redundant_pic_cnt_present = gf_bs_read_int(bs, 1);",
          "",
          "[Added Lines]",
          "5461:  pps->entropy_coding_mode_flag = gf_bs_read_int_log(bs, 1, \"entropy_coding_mode_flag\");",
          "5462:  pps->pic_order_present = gf_bs_read_int_log(bs, 1, \"pic_order_present\");",
          "5463:  pps->slice_group_count = gf_bs_read_ue_log(bs, \"slice_group_count_minus1\") + 1;",
          "5466:   pps->mb_slice_group_map_type = gf_bs_read_ue_log(bs, \"mb_slice_group_map_type\");",
          "5469:     gf_bs_read_ue_log_idx(bs, \"run_length_minus1\", iGroup);",
          "5473:     gf_bs_read_ue_log_idx(bs, \"top_left\", iGroup);",
          "5474:     gf_bs_read_ue_log_idx(bs, \"bottom_right\", iGroup);",
          "5478:    gf_bs_read_int_log(bs, 1, \"slice_group_change_direction_flag\");",
          "5479:    gf_bs_read_ue_log(bs, \"slice_group_change_rate_minus1\");",
          "5483:    pps->pic_size_in_map_units_minus1 = gf_bs_read_ue_log(bs, \"pic_size_in_map_units_minus1\");",
          "5485:     gf_bs_read_int_log_idx(bs, (u32)ceil(log(pps->slice_group_count) / log(2)), \"slice_group_id\", i);",
          "5489:  pps->num_ref_idx_l0_default_active_minus1 = gf_bs_read_ue_log(bs, \"num_ref_idx_l0_default_active_minus1\");",
          "5490:  pps->num_ref_idx_l1_default_active_minus1 = gf_bs_read_ue_log(bs, \"num_ref_idx_l1_default_active_minus1\");",
          "5496:  pps->weighted_pred_flag = gf_bs_read_int_log(bs, 1, \"weighted_pred_flag\");",
          "5497:  gf_bs_read_int_log(bs, 2, \"weighted_bipred_idc\");",
          "5498:  gf_bs_read_se_log(bs, \"init_qp_minus26\");",
          "5499:  gf_bs_read_se_log(bs, \"init_qs_minus26\");",
          "5500:  gf_bs_read_se_log(bs, \"chroma_qp_index_offset\");",
          "5501:  pps->deblocking_filter_control_present_flag = gf_bs_read_int_log(bs, 1, \"deblocking_filter_control_present_flag\");",
          "5502:  gf_bs_read_int_log(bs, 1, \"constrained_intra_pred\");",
          "5503:  pps->redundant_pic_cnt_present = gf_bs_read_int_log(bs, 1, \"redundant_pic_cnt_present\");",
          "",
          "---------------",
          "--- Hunk 92 ---",
          "[Context before]",
          "5467: static s32 SVC_ReadNal_header_extension(GF_BitStream *bs, SVC_NALUHeader *NalHeader)",
          "5468: {",
          "5480:  return 1;",
          "5481: }",
          "5483: static void ref_pic_list_modification(GF_BitStream *bs, u32 slice_type) {",
          "5484:  if (slice_type % 5 != 2 && slice_type % 5 != 4) {",
          "5487:    do {",
          "5489:     if (modification_of_pic_nums_idc == 0 || modification_of_pic_nums_idc == 1) {",
          "5491:     }",
          "5492:     else if (modification_of_pic_nums_idc == 2) {",
          "5494:     }",
          "5495:    } while ((modification_of_pic_nums_idc != 3) && gf_bs_available(bs));",
          "5496:   }",
          "5497:  }",
          "5498:  if (slice_type % 5 == 1) {",
          "5501:    do {",
          "5503:     if (modification_of_pic_nums_idc == 0 || modification_of_pic_nums_idc == 1) {",
          "5505:     }",
          "5506:     else if (modification_of_pic_nums_idc == 2) {",
          "5508:     }",
          "5509:    } while ((modification_of_pic_nums_idc != 3) && gf_bs_available(bs));",
          "5510:   }",
          "5511:  }",
          "",
          "[Removed Lines]",
          "5469:  gf_bs_read_int(bs, 1); //reserved_one_bits",
          "5470:  NalHeader->idr_pic_flag = gf_bs_read_int(bs, 1); //idr_flag",
          "5471:  NalHeader->priority_id = gf_bs_read_int(bs, 6); //priority_id",
          "5472:  gf_bs_read_int(bs, 1); //no_inter_layer_pred_flag",
          "5473:  NalHeader->dependency_id = gf_bs_read_int(bs, 3); //DependencyId",
          "5474:  NalHeader->quality_id = gf_bs_read_int(bs, 4); //quality_id",
          "5475:  NalHeader->temporal_id = gf_bs_read_int(bs, 3); //temporal_id",
          "5476:  gf_bs_read_int(bs, 1); //use_ref_base_pic_flag",
          "5477:  gf_bs_read_int(bs, 1); //discardable_flag",
          "5478:  gf_bs_read_int(bs, 1); //output_flag",
          "5479:  gf_bs_read_int(bs, 2); //reserved_three_2bits",
          "5485:   if (/*ref_pic_list_modification_flag_l0*/ gf_bs_read_int(bs, 1)) {",
          "5486:    u32 modification_of_pic_nums_idc;",
          "5488:     modification_of_pic_nums_idc = gf_bs_get_ue(bs);",
          "5499:   if (/*ref_pic_list_modification_flag_l1*/ gf_bs_read_int(bs, 1)) {",
          "5500:    u32 modification_of_pic_nums_idc;",
          "5502:     modification_of_pic_nums_idc = gf_bs_get_ue(bs);",
          "",
          "[Added Lines]",
          "5548:  gf_bs_read_int_log(bs, 1, \"reserved_one_bit\");",
          "5549:  NalHeader->idr_pic_flag = gf_bs_read_int_log(bs, 1, \"idr_flag\");",
          "5550:  NalHeader->priority_id = gf_bs_read_int_log(bs, 6, \"priority_id\");",
          "5551:  gf_bs_read_int_log(bs, 1, \"no_inter_layer_pred_flag\");",
          "5552:  NalHeader->dependency_id = gf_bs_read_int_log(bs, 3, \"DependencyId\");",
          "5553:  NalHeader->quality_id = gf_bs_read_int_log(bs, 4, \"quality_id\");",
          "5554:  NalHeader->temporal_id = gf_bs_read_int_log(bs, 3, \"temporal_id\");",
          "5555:  gf_bs_read_int_log(bs, 1, \"use_ref_base_pic_flag\");",
          "5556:  gf_bs_read_int_log(bs, 1, \"discardable_flag\");",
          "5557:  gf_bs_read_int_log(bs, 1, \"output_flag\");",
          "5558:  gf_bs_read_int_log(bs, 2, \"reserved_three_2bits\");",
          "5564:   if (gf_bs_read_int_log(bs, 1, \"ref_pic_list_modification_flag_l0\")) {",
          "5565:    u32 idx=0, modification_of_pic_nums_idc;",
          "5567:     modification_of_pic_nums_idc = gf_bs_read_ue_log_idx(bs, \"modification_of_pic_nums_idc\", idx);",
          "5569:      gf_bs_read_ue_log_idx(bs, \"abs_diff_pic_num_minus1\", idx);",
          "5572:      gf_bs_read_ue_log_idx(bs, \"long_term_pic_num\", idx);",
          "5574:     idx++;",
          "5579:   if (gf_bs_read_int_log(bs, 1, \"ref_pic_list_modification_flag_l1\")) {",
          "5580:    u32 idx=0, modification_of_pic_nums_idc;",
          "5582:     modification_of_pic_nums_idc = gf_bs_read_ue_log_idx(bs, \"modification_of_pic_nums_idc\", idx);",
          "5584:      gf_bs_read_ue_log_idx(bs, \"abs_diff_pic_num_minus1\", idx);",
          "5587:      gf_bs_read_ue_log_idx(bs, \"long_term_pic_num\", idx);",
          "5589:     idx++;",
          "",
          "---------------",
          "--- Hunk 93 ---",
          "[Context before]",
          "5514: static void pred_weight_table(GF_BitStream *bs, u32 slice_type, u32 ChromaArrayType, u32 num_ref_idx_l0_active_minus1, u32 num_ref_idx_l1_active_minus1) {",
          "5515:  u32 i, j;",
          "5517:  if (ChromaArrayType != 0) {",
          "5519:  }",
          "5520:  for (i = 0; i <= num_ref_idx_l0_active_minus1; i++) {",
          "5524:   }",
          "5525:   if (ChromaArrayType != 0) {",
          "5527:     for (j = 0; j < 2; j++) {",
          "5530:     }",
          "5531:   }",
          "5532:  }",
          "5533:  if (slice_type % 5 == 1) {",
          "5534:   for (i = 0; i <= num_ref_idx_l1_active_minus1; i++) {",
          "5538:    }",
          "5539:    if (ChromaArrayType != 0) {",
          "5541:      for (j = 0; j < 2; j++) {",
          "5544:      }",
          "5545:     }",
          "5546:    }",
          "",
          "[Removed Lines]",
          "5521:   if (/*luma_weight_l0_flag*/ gf_bs_read_int(bs, 1)) {",
          "5526:    if (/*chroma_weight_l0_flag*/ gf_bs_read_int(bs, 1))",
          "5535:    if (/*luma_weight_l1_flag*/ gf_bs_read_int(bs, 1)) {",
          "5540:     if (/*chroma_weight_l1_flag*/ gf_bs_read_int(bs, 1)) {",
          "",
          "[Added Lines]",
          "5597:  gf_bs_read_ue_log(bs, \"luma_log2_weight_denom\");",
          "5599:   gf_bs_read_ue_log(bs, \"chroma_log2_weight_denom\");",
          "5602:   if (gf_bs_read_int_log_idx(bs, 1, \"luma_weight_l0_flag\", i)) {",
          "5603:    gf_bs_read_se_log_idx(bs, \"luma_weight_l0\", i);",
          "5604:    gf_bs_read_se_log_idx(bs, \"luma_offset_l0\", i);",
          "5607:    if (gf_bs_read_int_log_idx(bs, 1, \"chroma_weight_l0_flag\", i))",
          "5609:      gf_bs_read_se_log_idx2(bs, \"chroma_weight_l0\", i, j);",
          "5610:      gf_bs_read_se_log_idx2(bs, \"chroma_offset_l0\", i, j);",
          "5616:    if (gf_bs_read_int_log_idx(bs, 1, \"luma_weight_l1_flag\", i)) {",
          "5617:     gf_bs_read_se_log_idx(bs, \"luma_weight_l1\", i);",
          "5618:     gf_bs_read_se_log_idx(bs, \"luma_offset_l1\", i);",
          "5621:     if (gf_bs_read_int_log_idx(bs, 1, \"chroma_weight_l1_flag\", i)) {",
          "5623:       gf_bs_read_se_log_idx2(bs, \"chroma_weight_l1\", i, j);",
          "5624:       gf_bs_read_se_log_idx2(bs, \"chroma_offset_l1\", i, j);",
          "",
          "---------------",
          "--- Hunk 94 ---",
          "[Context before]",
          "5551: static void dec_ref_pic_marking(GF_BitStream *bs, Bool IdrPicFlag) {",
          "5552:  if (IdrPicFlag) {",
          "5555:  }",
          "5556:  else {",
          "5559:    do {",
          "5561:     if (memory_management_control_operation == 1 || memory_management_control_operation == 3)",
          "5563:     if (memory_management_control_operation == 2)",
          "5565:     if (memory_management_control_operation == 3 || memory_management_control_operation == 6)",
          "5567:     if (memory_management_control_operation == 4)",
          "5569:    } while (memory_management_control_operation != 0);",
          "5570:   }",
          "5571:  }",
          "",
          "[Removed Lines]",
          "5557:   if (/*adaptive_ref_pic_marking_mode_flag*/ gf_bs_read_int(bs, 1)) {",
          "5558:    u32 memory_management_control_operation;",
          "5560:     memory_management_control_operation = gf_bs_get_ue(bs);",
          "",
          "[Added Lines]",
          "5634:   gf_bs_read_int_log(bs, 1, \"no_output_of_prior_pics_flag\");",
          "5635:   gf_bs_read_int_log(bs, 1, \"long_term_reference_flag\");",
          "5638:   if (gf_bs_read_int_log(bs, 1, \"adaptive_ref_pic_marking_mode_flag\")) {",
          "5639:    u32 idx=0, memory_management_control_operation;",
          "5641:     memory_management_control_operation = gf_bs_read_ue_log_idx(bs, \"memory_management_control_operation\", idx);",
          "5643:      gf_bs_read_ue_log_idx(bs, \"difference_of_pic_nums_minus1\", idx);",
          "5645:      gf_bs_read_ue_log_idx(bs, \"long_term_pic_num\", idx);",
          "5647:      gf_bs_read_ue_log_idx(bs, \"long_term_frame_idx\", idx);",
          "5649:      gf_bs_read_ue_log_idx(bs, \"max_long_term_frame_idx_plus1\", idx);",
          "5650:     idx++;",
          "",
          "---------------",
          "--- Hunk 95 ---",
          "[Context before]",
          "5576:  s32 pps_id, num_ref_idx_l0_active_minus1 = 0, num_ref_idx_l1_active_minus1 = 0;",
          "5581:  if (si->slice_type > 9) return -1;",
          "5584:  if (pps_id > 255) return -1;",
          "5585:  si->pps = &avc->pps[pps_id];",
          "5586:  if (!si->pps->slice_group_count) return -2;",
          "",
          "[Removed Lines]",
          "5580:  si->slice_type = gf_bs_get_ue(bs);",
          "5583:  pps_id = gf_bs_get_ue(bs);",
          "",
          "[Added Lines]",
          "5661:  gf_bs_read_ue_log(bs, \"first_mb_in_slice\");",
          "5662:  si->slice_type = gf_bs_read_ue_log(bs, \"slice_type\");",
          "5665:  pps_id = gf_bs_read_ue_log(bs, \"pps_id\");",
          "",
          "---------------",
          "--- Hunk 96 ---",
          "[Context before]",
          "5589:  avc->sps_active_idx = si->pps->sps_id;",
          "5590:  avc->pps_active_idx = pps_id;",
          "5594:  si->field_pic_flag = 0;",
          "5595:  si->bottom_field_flag = 0;",
          "5596:  if (!si->sps->frame_mbs_only_flag) {",
          "5598:   if (si->field_pic_flag)",
          "5600:  }",
          "5602:  if ((si->nal_unit_type == GF_AVC_NALU_IDR_SLICE) || svc_idr_flag)",
          "5605:  if (si->sps->poc_type == 0) {",
          "5607:   if (si->pps->pic_order_present && !si->field_pic_flag) {",
          "5609:   }",
          "5610:  }",
          "5611:  else if ((si->sps->poc_type == 1) && !si->sps->delta_pic_order_always_zero_flag) {",
          "5613:   if ((si->pps->pic_order_present == 1) && !si->field_pic_flag)",
          "5615:  }",
          "5617:  if (si->pps->redundant_pic_cnt_present) {",
          "5619:  }",
          "5621:  if (si->slice_type % 5 == GF_AVC_TYPE_B) {",
          "5623:  }",
          "5625:  num_ref_idx_l0_active_minus1 = si->pps->num_ref_idx_l0_default_active_minus1;",
          "5626:  num_ref_idx_l1_active_minus1 = si->pps->num_ref_idx_l1_default_active_minus1;",
          "5628:  if (si->slice_type % 5 == GF_AVC_TYPE_P || si->slice_type % 5 == GF_AVC_TYPE_SP || si->slice_type % 5 == GF_AVC_TYPE_B) {",
          "5630:   if (num_ref_idx_active_override_flag) {",
          "5632:    if (si->slice_type % 5 == GF_AVC_TYPE_B) {",
          "5634:    }",
          "5635:   }",
          "5636:  }",
          "",
          "[Removed Lines]",
          "5592:  si->frame_num = gf_bs_read_int(bs, si->sps->log2_max_frame_num);",
          "5597:   si->field_pic_flag = gf_bs_read_int(bs, 1);",
          "5599:    si->bottom_field_flag = gf_bs_read_int(bs, 1);",
          "5603:   si->idr_pic_id = gf_bs_get_ue(bs);",
          "5606:   si->poc_lsb = gf_bs_read_int(bs, si->sps->log2_max_poc_lsb);",
          "5608:    si->delta_poc_bottom = gf_bs_get_se(bs);",
          "5612:   si->delta_poc[0] = gf_bs_get_se(bs);",
          "5614:    si->delta_poc[1] = gf_bs_get_se(bs);",
          "5618:   si->redundant_pic_cnt = gf_bs_get_ue(bs);",
          "5629:   Bool num_ref_idx_active_override_flag = gf_bs_read_int(bs, 1);",
          "5631:    num_ref_idx_l0_active_minus1 = gf_bs_get_ue(bs);",
          "5633:     num_ref_idx_l1_active_minus1 = gf_bs_get_ue(bs);",
          "",
          "[Added Lines]",
          "5674:  si->frame_num = gf_bs_read_int_log(bs, si->sps->log2_max_frame_num, \"frame_num\");",
          "5679:   si->field_pic_flag = gf_bs_read_int_log(bs, 1, \"field_pic_flag\");",
          "5681:    si->bottom_field_flag = gf_bs_read_int_log(bs, 1, \"bottom_field_flag\");",
          "5685:   si->idr_pic_id = gf_bs_read_ue_log(bs, \"idr_pic_id\");",
          "5688:   si->poc_lsb = gf_bs_read_int_log(bs, si->sps->log2_max_poc_lsb, \"poc_lsb\");",
          "5690:    si->delta_poc_bottom = gf_bs_read_se_log(bs, \"poc_lsb\");",
          "5694:   si->delta_poc[0] = gf_bs_read_se_log(bs, \"delta_poc0\");",
          "5696:    si->delta_poc[1] = gf_bs_read_se_log(bs, \"delta_poc1\");",
          "5700:   si->redundant_pic_cnt = gf_bs_read_ue_log(bs, \"redundant_pic_cnt\");",
          "5704:   gf_bs_read_int_log(bs, 1, \"direct_spatial_mv_pred_flag\");",
          "5711:   Bool num_ref_idx_active_override_flag = gf_bs_read_int_log(bs, 1, \"num_ref_idx_active_override_flag\");",
          "5713:    num_ref_idx_l0_active_minus1 = gf_bs_read_ue_log(bs, \"num_ref_idx_l0_active_minus1\");",
          "5715:     num_ref_idx_l1_active_minus1 = gf_bs_read_ue_log(bs, \"num_ref_idx_l1_active_minus1\");",
          "",
          "---------------",
          "--- Hunk 97 ---",
          "[Context before]",
          "5655:  }",
          "5657:  if (si->pps->entropy_coding_mode_flag && si->slice_type % 5 != GF_AVC_TYPE_I && si->slice_type % 5 != GF_AVC_TYPE_SI) {",
          "5659:  }",
          "5662:  if (si->slice_type % 5 == GF_AVC_TYPE_SP || si->slice_type % 5 == GF_AVC_TYPE_SI) {",
          "5663:   if (si->slice_type % 5 == GF_AVC_TYPE_SP) {",
          "5665:   }",
          "5667:  }",
          "5669:  if (si->pps->deblocking_filter_control_present_flag) {",
          "5673:   }",
          "5674:  }",
          "5676:  if (si->pps->slice_group_count > 1 && si->pps->mb_slice_group_map_type >= 3 && si->pps->mb_slice_group_map_type <= 5) {",
          "5678:  }",
          "5680:  return 0;",
          "5681: }",
          "",
          "[Removed Lines]",
          "5670:   if (/*disable_deblocking_filter_idc*/ gf_bs_get_ue(bs) != 1) {",
          "",
          "[Added Lines]",
          "5740:   gf_bs_read_ue_log(bs, \"cabac_init_idc\");",
          "5746:    gf_bs_read_int_log(bs, 1, \"sp_for_switch_flag\");",
          "5748:   gf_bs_read_se_log(bs, \"slice_qs_delta\");",
          "5752:   if (gf_bs_read_ue_log(bs, \"disable_deblocking_filter_idc\") != 1) {",
          "5753:    gf_bs_read_se_log(bs, \"slice_alpha_c0_offset_div2\");",
          "5754:    gf_bs_read_se_log(bs, \"slice_beta_offset_div2\");",
          "5759:   gf_bs_read_int_log(bs, (u32)ceil(log1p((si->pps->pic_size_in_map_units_minus1 + 1) / (si->pps->slice_group_change_rate_minus1 + 1) ) / log(2)), \"slice_group_change_cycle\");",
          "",
          "---------------",
          "--- Hunk 98 ---",
          "[Context before]",
          "5686:  s32 pps_id;",
          "5691:  if (si->slice_type > 9) return -1;",
          "5694:  if (pps_id > 255)",
          "5695:   return -1;",
          "5696:  si->pps = &avc->pps[pps_id];",
          "",
          "[Removed Lines]",
          "5690:  si->slice_type = gf_bs_get_ue(bs);",
          "5693:  pps_id = gf_bs_get_ue(bs);",
          "",
          "[Added Lines]",
          "5770:  gf_bs_read_ue_log(bs, \"first_mb_in_slice\");",
          "5771:  si->slice_type = gf_bs_read_ue_log(bs, \"slice_type\");",
          "5774:  pps_id = gf_bs_read_ue_log(bs, \"pps_id\");",
          "",
          "---------------",
          "--- Hunk 99 ---",
          "[Context before]",
          "5701:  if (!si->sps->log2_max_frame_num)",
          "5702:   return -2;",
          "5706:  si->field_pic_flag = 0;",
          "5707:  if (si->sps->frame_mbs_only_flag) {",
          "5709:  }",
          "5710:  else {",
          "5713:  }",
          "5714:  if (si->nal_unit_type == GF_AVC_NALU_IDR_SLICE || si->NalHeader.idr_pic_flag)",
          "5717:  if (si->sps->poc_type == 0) {",
          "5719:   if (si->pps->pic_order_present && !si->field_pic_flag) {",
          "5721:   }",
          "5722:  }",
          "5723:  else if ((si->sps->poc_type == 1) && !si->sps->delta_pic_order_always_zero_flag) {",
          "5725:   if ((si->pps->pic_order_present == 1) && !si->field_pic_flag)",
          "5727:  }",
          "5728:  if (si->pps->redundant_pic_cnt_present) {",
          "5730:  }",
          "5731:  return 0;",
          "5732: }",
          "",
          "[Removed Lines]",
          "5704:  si->frame_num = gf_bs_read_int(bs, si->sps->log2_max_frame_num);",
          "5711:   si->field_pic_flag = gf_bs_read_int(bs, 1);",
          "5712:   if (si->field_pic_flag) si->bottom_field_flag = gf_bs_read_int(bs, 1);",
          "5715:   si->idr_pic_id = gf_bs_get_ue(bs);",
          "5718:   si->poc_lsb = gf_bs_read_int(bs, si->sps->log2_max_poc_lsb);",
          "5720:    si->delta_poc_bottom = gf_bs_get_se(bs);",
          "5724:   si->delta_poc[0] = gf_bs_get_se(bs);",
          "5726:    si->delta_poc[1] = gf_bs_get_se(bs);",
          "5729:   si->redundant_pic_cnt = gf_bs_get_ue(bs);",
          "",
          "[Added Lines]",
          "5785:  si->frame_num = gf_bs_read_int_log(bs, si->sps->log2_max_frame_num, \"frame_num\");",
          "5792:   si->field_pic_flag = gf_bs_read_int_log(bs, 1, \"field_pic_flag\");",
          "5793:   if (si->field_pic_flag) si->bottom_field_flag = gf_bs_read_int_log(bs, 1, \"bottom_field_flag\");",
          "5796:   si->idr_pic_id = gf_bs_read_ue_log(bs, \"idr_pic_id\");",
          "5799:   si->poc_lsb = gf_bs_read_int_log(bs, si->sps->log2_max_poc_lsb, \"poc_lsb\");",
          "5801:    si->delta_poc_bottom = gf_bs_read_se_log(bs, \"delta_poc_bottom\");",
          "5805:   si->delta_poc[0] = gf_bs_read_se_log(bs, \"delta_poc0\");",
          "5807:    si->delta_poc[1] = gf_bs_read_se_log(bs, \"delta_poc1\");",
          "5810:   si->redundant_pic_cnt = gf_bs_read_ue_log(bs, \"redundant_pic_cnt\");",
          "",
          "---------------",
          "--- Hunk 100 ---",
          "[Context before]",
          "5736: {",
          "5737:  AVCSeiRecoveryPoint *rp = &avc->sei.recovery_point;",
          "5743:  rp->valid = 1;",
          "5745:  return 0;",
          "",
          "[Removed Lines]",
          "5739:  rp->frame_cnt = gf_bs_get_ue(bs);",
          "5740:  rp->exact_match_flag = gf_bs_read_int(bs, 1);",
          "5741:  rp->broken_link_flag = gf_bs_read_int(bs, 1);",
          "5742:  rp->changing_slice_group_idc = gf_bs_read_int(bs, 2);",
          "",
          "[Added Lines]",
          "5820:  rp->frame_cnt = gf_bs_read_ue_log(bs, \"frame_cnt\");",
          "5821:  rp->exact_match_flag = gf_bs_read_int_log(bs, 1, \"exact_match_flag\");",
          "5822:  rp->broken_link_flag = gf_bs_read_int_log(bs, 1, \"broken_link_flag\");",
          "5823:  rp->changing_slice_group_idc = gf_bs_read_int_log(bs, 2, \"changing_slice_group_idc\");",
          "",
          "---------------",
          "--- Hunk 101 ---",
          "[Context before]",
          "5758:   return 1;",
          "5759:  }",
          "5763:  }",
          "5766:  if (avc->sps[sps_id].vui.pic_struct_present_flag) {",
          "5767:   int i;",
          "5769:   if (pt->pic_struct > 8) {",
          "5770:    GF_LOG(GF_LOG_ERROR, GF_LOG_CODING, (\"[avc-h264] invalid pic_struct value %d\\n\", pt->pic_struct));",
          "5771:    return 1;",
          "5772:   }",
          "5774:   for (i = 0; i < NumClockTS[pt->pic_struct]; i++) {",
          "5776:     Bool full_timestamp_flag;",
          "5784:     if (full_timestamp_flag) {",
          "5788:     }",
          "5789:     else {",
          "5796:        }",
          "5797:       }",
          "5798:      }",
          "5799:      if (avc->sps[sps_id].vui.hrd.time_offset_length > 0)",
          "5801:     }",
          "5802:    }",
          "5803:   }",
          "",
          "[Removed Lines]",
          "5768:   pt->pic_struct = gf_bs_read_int(bs, 4);",
          "",
          "[Added Lines]",
          "5842:   gf_bs_read_int_log(bs, 1 + avc->sps[sps_id].vui.hrd.cpb_removal_delay_length_minus1, \"cpb_removal_delay_minus1\");",
          "5843:   gf_bs_read_int_log(bs, 1 + avc->sps[sps_id].vui.hrd.dpb_output_delay_length_minus1, \"dpb_output_delay_minus1\");",
          "5849:   pt->pic_struct = gf_bs_read_int_log(bs, 4, \"pic_struct\");",
          "5856:    if (gf_bs_read_int_log_idx(bs, 1, \"clock_timestamp_flag\", i)) {",
          "5858:     gf_bs_read_int_log_idx(bs, 2, \"ct_type\", i);",
          "5859:     gf_bs_read_int_log_idx(bs, 1, \"nuit_field_based_flag\", i);",
          "5860:     gf_bs_read_int_log_idx(bs, 5, \"counting_type\", i);",
          "5861:     full_timestamp_flag = gf_bs_read_int_log_idx(bs, 1, \"full_timestamp_flag\", i);",
          "5862:     gf_bs_read_int_log_idx(bs, 1, \"discontinuity_flag\", i);",
          "5863:     gf_bs_read_int_log_idx(bs, 1, \"cnt_dropped_flag\", i);",
          "5864:     gf_bs_read_int_log_idx(bs, 8, \"n_frames\", i);",
          "5866:      gf_bs_read_int_log_idx(bs, 6, \"seconds_value\", i);",
          "5867:      gf_bs_read_int_log_idx(bs, 6, \"minutes_value\", i);",
          "5868:      gf_bs_read_int_log_idx(bs, 5, \"hours_value\", i);",
          "5871:      if (gf_bs_read_int_log_idx(bs, 1, \"seconds_flag\", i)) {",
          "5872:       gf_bs_read_int_log_idx(bs, 6, \"seconds_value\", i);",
          "5873:       if (gf_bs_read_int_log_idx(bs, 1, \"minutes_flag\", i)) {",
          "5874:        gf_bs_read_int_log_idx(bs, 6, \"minutes_value\", i);",
          "5875:        if (gf_bs_read_int_log_idx(bs, 1, \"hours_flag\", i)) {",
          "5876:         gf_bs_read_int_log_idx(bs, 5, \"hours_value\", i);",
          "5881:       gf_bs_read_int_log_idx(bs, avc->sps[sps_id].vui.hrd.time_offset_length, \"time_offset\", i);",
          "",
          "---------------",
          "--- Hunk 102 ---",
          "[Context before]",
          "6066:   if (avc->last_ps_idx < 0) return -1;",
          "6067:   return 0;",
          "6068:  case GF_AVC_NALU_SEQ_PARAM_EXT:",
          "6070:   if (avc->last_ps_idx < 0) return -1;",
          "6071:   return 0;",
          "",
          "[Removed Lines]",
          "6069:   avc->last_ps_idx = (s32) gf_bs_get_ue(bs);",
          "",
          "[Added Lines]",
          "6150:   avc->last_ps_idx = (s32) gf_bs_read_ue(bs);",
          "",
          "---------------",
          "--- Hunk 103 ---",
          "[Context before]",
          "6576:  }",
          "6577: }",
          "6580: {",
          "6581:  u32 i;",
          "6582:  Bool inter_ref_pic_set_prediction_flag = 0;",
          "6583:  if (idx_rps != 0)",
          "6586:  if (inter_ref_pic_set_prediction_flag) {",
          "6587:   HEVC_ReferencePictureSets *ref_ps, *rps;",
          "",
          "[Removed Lines]",
          "6579: static Bool parse_short_term_ref_pic_set(GF_BitStream *bs, HEVC_SPS *sps, u32 idx_rps)",
          "6584:   inter_ref_pic_set_prediction_flag = gf_bs_read_int(bs, 1);",
          "",
          "[Added Lines]",
          "6660: static Bool hevc_parse_short_term_ref_pic_set(GF_BitStream *bs, HEVC_SPS *sps, u32 idx_rps)",
          "6665:   inter_ref_pic_set_prediction_flag = gf_bs_read_int_log_idx(bs, 1, \"inter_ref_pic_set_prediction_flag\", idx_rps);",
          "",
          "---------------",
          "--- Hunk 104 ---",
          "[Context before]",
          "6592:   s32 deltaRPS;",
          "6593:   u32 k = 0, k0 = 0, k1 = 0;",
          "6594:   if (idx_rps == sps->num_short_term_ref_pic_sets)",
          "6597:   assert(delta_idx_minus1 <= idx_rps - 1);",
          "6598:   ref_idx = idx_rps - 1 - delta_idx_minus1;",
          "6601:   deltaRPS = (1 - (delta_rps_sign << 1)) * (abs_delta_rps_minus1 + 1);",
          "6603:   rps = &sps->rps[idx_rps];",
          "",
          "[Removed Lines]",
          "6595:    delta_idx_minus1 = gf_bs_get_ue(bs);",
          "6599:   delta_rps_sign = gf_bs_read_int(bs, 1);",
          "6600:   abs_delta_rps_minus1 = gf_bs_get_ue(bs);",
          "",
          "[Added Lines]",
          "6676:    delta_idx_minus1 = gf_bs_read_ue_log_idx(bs, \"delta_idx_minus1\", idx_rps);",
          "6680:   delta_rps_sign = gf_bs_read_int_log_idx(bs, 1, \"delta_rps_sign\", idx_rps);",
          "6681:   abs_delta_rps_minus1 = gf_bs_read_ue_log_idx(bs, \"abs_delta_rps_minus1\", idx_rps);",
          "",
          "---------------",
          "--- Hunk 105 ---",
          "[Context before]",
          "6605:   nb_ref_pics = ref_ps->num_negative_pics + ref_ps->num_positive_pics;",
          "6606:   for (i = 0; i <= nb_ref_pics; i++) {",
          "6607:    s32 ref_idc;",
          "6609:    ref_idc = used_by_curr_pic_flag ? 1 : 0;",
          "6610:    if (!used_by_curr_pic_flag) {",
          "6612:     ref_idc = used_by_curr_pic_flag << 1;",
          "6613:    }",
          "6614:    if ((ref_idc == 1) || (ref_idc == 2)) {",
          "",
          "[Removed Lines]",
          "6608:    s32 used_by_curr_pic_flag = gf_bs_read_int(bs, 1);",
          "6611:     used_by_curr_pic_flag = gf_bs_read_int(bs, 1);",
          "",
          "[Added Lines]",
          "6689:    s32 used_by_curr_pic_flag = gf_bs_read_int_log_idx2(bs, 1, \"used_by_curr_pic_flag\", idx_rps, i);",
          "6692:     used_by_curr_pic_flag = gf_bs_read_int_log_idx2(bs, 1, \"used_by_curr_pic_flag\", idx_rps, i);",
          "",
          "---------------",
          "--- Hunk 106 ---",
          "[Context before]",
          "6629:  }",
          "6630:  else {",
          "6631:   s32 prev = 0, poc;",
          "6634:   if (sps->rps[idx_rps].num_negative_pics > 16)",
          "6635:    return GF_FALSE;",
          "6636:   if (sps->rps[idx_rps].num_positive_pics > 16)",
          "6637:    return GF_FALSE;",
          "6638:   for (i = 0; i < sps->rps[idx_rps].num_negative_pics; i++) {",
          "6640:    poc = prev - delta_poc_s0_minus1 - 1;",
          "6641:    prev = poc;",
          "6642:    sps->rps[idx_rps].delta_poc[i] = poc;",
          "6644:   }",
          "6645:   for (i = 0; i < sps->rps[idx_rps].num_positive_pics; i++) {",
          "6647:    poc = prev + delta_poc_s1_minus1 + 1;",
          "6648:    prev = poc;",
          "6649:    sps->rps[idx_rps].delta_poc[i] = poc;",
          "6651:   }",
          "6652:  }",
          "6653:  return GF_TRUE;",
          "",
          "[Removed Lines]",
          "6632:   sps->rps[idx_rps].num_negative_pics = gf_bs_get_ue(bs);",
          "6633:   sps->rps[idx_rps].num_positive_pics = gf_bs_get_ue(bs);",
          "6639:    u32 delta_poc_s0_minus1 = gf_bs_get_ue(bs);",
          "6646:    u32 delta_poc_s1_minus1 = gf_bs_get_ue(bs);",
          "",
          "[Added Lines]",
          "6713:   sps->rps[idx_rps].num_negative_pics = gf_bs_read_ue_log_idx(bs, \"num_negative_pics\", idx_rps);",
          "6714:   sps->rps[idx_rps].num_positive_pics = gf_bs_read_ue_log_idx(bs, \"num_positive_pics\", idx_rps);",
          "6720:    u32 delta_poc_s0_minus1 = gf_bs_read_ue_log_idx2(bs, \"delta_poc_s0_minus1\", idx_rps, i);",
          "6724:    gf_bs_read_int_log_idx2(bs, 1, \"delta_poc_s0_minus1\", idx_rps, i);",
          "6727:    u32 delta_poc_s1_minus1 = gf_bs_read_ue_log_idx2(bs, \"delta_poc_s1_minus1\" , idx_rps, i);",
          "6731:    gf_bs_read_int_log_idx2(bs, 1, \"used_by_curr_pic_s1_flag\", idx_rps, i);",
          "",
          "---------------",
          "--- Hunk 107 ---",
          "[Context before]",
          "6663:  num_ref_idx = num_ref_idx_l0_active;",
          "6666:  if (ChromaArrayType != 0)",
          "6669: parse_weights:",
          "6670:  for (i = 0; i < num_ref_idx; i++) {",
          "6673:   chroma_weights[i] = 0;",
          "6674:  }",
          "6675:  if (ChromaArrayType != 0) {",
          "6676:   for (i = 0; i < num_ref_idx; i++) {",
          "6678:   }",
          "6679:  }",
          "6680:  for (i = 0; i < num_ref_idx; i++) {",
          "6681:   if (luma_weights[i]) {",
          "6684:   }",
          "6685:   if (chroma_weights[i]) {",
          "6691:   }",
          "6692:  }",
          "",
          "[Removed Lines]",
          "6671:   luma_weights[i] = gf_bs_read_int(bs, 1);",
          "6677:    chroma_weights[i] = gf_bs_read_int(bs, 1);",
          "",
          "[Added Lines]",
          "6746:  gf_bs_read_ue_log(bs, \"luma_log2_weight_denom\");",
          "6748:   gf_bs_read_se_log(bs, \"delta_chroma_log2_weight_denom\");",
          "6752:   luma_weights[i] = gf_bs_read_int_log_idx(bs, 1, \"luma_weights\", i);",
          "6758:    chroma_weights[i] = gf_bs_read_int_log_idx(bs, 1, \"chroma_weights\", i);",
          "6763:    gf_bs_read_se_log_idx(bs, \"delta_luma_weight_l0\", i);",
          "6764:    gf_bs_read_se_log_idx(bs, \"luma_offset_l0\", i);",
          "6767:    gf_bs_read_se_log_idx(bs, \"delta_chroma_weight_l0_0\", i);",
          "6768:    gf_bs_read_se_log_idx(bs, \"delta_chroma_offset_l0_0\", i);",
          "6770:    gf_bs_read_se_log_idx(bs, \"delta_chroma_weight_l0_1\", i);",
          "6771:    gf_bs_read_se_log_idx(bs, \"delta_chroma_offset_l0_1\", i);",
          "",
          "---------------",
          "--- Hunk 108 ---",
          "[Context before]",
          "6703: Bool ref_pic_lists_modification(GF_BitStream *bs, u32 slice_type, u32 num_ref_idx_l0_active, u32 num_ref_idx_l1_active)",
          "6704: {",
          "6707:  if (ref_pic_list_modification_flag_l0) {",
          "6709:    list_entry_l0[i] = *//*gf_bs_read_int(bs, (u32)ceil(log(getNumPicTotalCurr())/log(2)));",
          "",
          "[Removed Lines]",
          "6706:  Bool ref_pic_list_modification_flag_l0 = gf_bs_read_int(bs, 1);",
          "",
          "[Added Lines]",
          "6787:  Bool ref_pic_list_modification_flag_l0 = gf_bs_read_int_log(bs, 1, \"ref_pic_list_modification_flag_l0\");",
          "",
          "---------------",
          "--- Hunk 109 ---",
          "[Context before]",
          "6711:   return GF_FALSE;",
          "6712:  }",
          "6713:  if (slice_type == GF_HEVC_SLICE_TYPE_B) {",
          "6715:   if (ref_pic_list_modification_flag_l1) {",
          "6717:     list_entry_l1[i] = *//*gf_bs_read_int(bs, (u32)ceil(log(getNumPicTotalCurr()) / log(2)));",
          "",
          "[Removed Lines]",
          "6714:   Bool ref_pic_list_modification_flag_l1 = gf_bs_read_int(bs, 1);",
          "",
          "[Added Lines]",
          "6795:   Bool ref_pic_list_modification_flag_l1 = gf_bs_read_int_log(bs, 1, \"ref_pic_list_modification_flag_l1\");",
          "",
          "---------------",
          "--- Hunk 110 ---",
          "[Context before]",
          "6734:  Bool RapPicFlag = GF_FALSE;",
          "6735:  Bool IDRPicFlag = GF_FALSE;",
          "6739:  switch (si->nal_unit_type) {",
          "6740:  case GF_HEVC_NALU_SLICE_IDR_W_DLP:",
          "",
          "[Removed Lines]",
          "6737:  si->first_slice_segment_in_pic_flag = gf_bs_read_int(bs, 1);",
          "",
          "[Added Lines]",
          "6818:  si->first_slice_segment_in_pic_flag = gf_bs_read_int_log(bs, 1, \"first_slice_segment_in_pic_flag\");",
          "",
          "---------------",
          "--- Hunk 111 ---",
          "[Context before]",
          "6751:  }",
          "6753:  if (RapPicFlag) {",
          "6755:  }",
          "6758:  if (pps_id >= 64)",
          "6759:   return -1;",
          "",
          "[Removed Lines]",
          "6757:  pps_id = gf_bs_get_ue(bs);",
          "",
          "[Added Lines]",
          "6835:   gf_bs_read_int_log(bs, 1, \"no_output_of_prior_pics_flag\");",
          "6838:  pps_id = gf_bs_read_ue_log(bs, \"pps_id\");",
          "",
          "---------------",
          "--- Hunk 112 ---",
          "[Context before]",
          "6764:  si->pps = pps;",
          "6766:  if (!si->first_slice_segment_in_pic_flag && pps->dependent_slice_segments_enabled_flag) {",
          "6768:  }",
          "6769:  else {",
          "6770:   si->dependent_slice_segment_flag = GF_FALSE;",
          "6771:  }",
          "6773:  if (!si->first_slice_segment_in_pic_flag) {",
          "6775:  }",
          "6776:  else {",
          "6777:   si->slice_segment_address = 0;",
          "",
          "[Removed Lines]",
          "6767:   si->dependent_slice_segment_flag = gf_bs_read_int(bs, 1);",
          "6774:   si->slice_segment_address = gf_bs_read_int(bs, sps->bitsSliceSegmentAddress);",
          "",
          "[Added Lines]",
          "6848:   si->dependent_slice_segment_flag = gf_bs_read_int_log(bs, 1, \"dependent_slice_segment_flag\");",
          "6855:   si->slice_segment_address = gf_bs_read_int_log(bs, sps->bitsSliceSegmentAddress, \"slice_segment_address\");",
          "",
          "---------------",
          "--- Hunk 113 ---",
          "[Context before]",
          "6785:   Bool slice_deblocking_filter_disabled_flag = 0;",
          "6792:   if (pps->output_flag_present_flag)",
          "6795:   if (sps->separate_colour_plane_flag == 1)",
          "6798:   if (IDRPicFlag) {",
          "6799:    si->poc_lsb = 0;",
          "",
          "[Removed Lines]",
          "6788:   gf_bs_read_int(bs, pps->num_extra_slice_header_bits);",
          "6790:   si->slice_type = gf_bs_get_ue(bs);",
          "",
          "[Added Lines]",
          "6869:   gf_bs_read_int_log(bs, pps->num_extra_slice_header_bits, \"slice_reserved_undetermined_flag\");",
          "6871:   si->slice_type = gf_bs_read_ue_log(bs, \"slice_type\");",
          "6874:    gf_bs_read_int_log(bs, 1, \"pic_output_flag\");",
          "6877:    gf_bs_read_int_log(bs, 2, \"colour_plane_id\");",
          "",
          "---------------",
          "--- Hunk 114 ---",
          "[Context before]",
          "6804:   }",
          "6805:   else {",
          "6809:    if (!hevc->full_slice_header_parse) return 0;",
          "6813:     if (!ret)",
          "6814:      return -1;",
          "6815:    }",
          "",
          "[Removed Lines]",
          "6806:    si->poc_lsb = gf_bs_read_int(bs, sps->log2_max_pic_order_cnt_lsb);",
          "6811:    if (/*short_term_ref_pic_set_sps_flag =*/gf_bs_read_int(bs, 1) == 0) {",
          "6812:     Bool ret = parse_short_term_ref_pic_set(bs, sps, sps->num_short_term_ref_pic_sets);",
          "",
          "[Added Lines]",
          "6887:    si->poc_lsb = gf_bs_read_int_log(bs, sps->log2_max_pic_order_cnt_lsb, \"poc_lsb\");",
          "6892:    if (gf_bs_read_int_log(bs, 1, \"short_term_ref_pic_set_sps_flag\") == 0) {",
          "6893:     Bool ret = hevc_parse_short_term_ref_pic_set(bs, sps, sps->num_short_term_ref_pic_sets);",
          "",
          "---------------",
          "--- Hunk 115 ---",
          "[Context before]",
          "6819:     while ((u32)(1 << numbits) < sps->num_short_term_ref_pic_sets)",
          "6820:      numbits++;",
          "6821:     if (numbits > 0)",
          "6825:    }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6903:      gf_bs_read_int_log(bs, numbits, \"short_term_ref_pic_set_idx\");",
          "",
          "---------------",
          "--- Hunk 116 ---",
          "[Context before]",
          "6831:     memset(DeltaPocMsbCycleLt, 0, sizeof(u8) * 32);",
          "6833:     if (sps->num_long_term_ref_pic_sps > 0) {",
          "6835:     }",
          "6838:     for (i = 0; i < num_long_term_sps + num_long_term_pics; i++) {",
          "6839:      if (i < num_long_term_sps) {",
          "6840:       if (sps->num_long_term_ref_pic_sps > 1)",
          "6842:      }",
          "6843:      else {",
          "6846:      }",
          "6848:       if (i == 0 || i == num_long_term_sps)",
          "6850:       else",
          "6852:      }",
          "6853:     }",
          "6854:    }",
          "6855:    if (sps->temporal_mvp_enable_flag)",
          "6857:   }",
          "6858:   if (sps->sample_adaptive_offset_enabled_flag) {",
          "6859:    u32 ChromaArrayType = sps->separate_colour_plane_flag ? 0 : sps->chroma_format_idc;",
          "6861:    if (ChromaArrayType != 0)",
          "6863:   }",
          "6865:   if (si->slice_type == GF_HEVC_SLICE_TYPE_P || si->slice_type == GF_HEVC_SLICE_TYPE_B) {",
          "",
          "[Removed Lines]",
          "6834:      num_long_term_sps = gf_bs_get_ue(bs);",
          "6836:     num_long_term_pics = gf_bs_get_ue(bs);",
          "6847:      if (/*delta_poc_msb_present_flag[ i ] = */ gf_bs_read_int(bs, 1)) {",
          "6849:        DeltaPocMsbCycleLt[i] = gf_bs_get_ue(bs);",
          "6851:        DeltaPocMsbCycleLt[i] = gf_bs_get_ue(bs) + DeltaPocMsbCycleLt[i - 1];",
          "6856:     slice_temporal_mvp_enabled_flag = gf_bs_read_int(bs, 1);",
          "6860:    slice_sao_luma_flag = gf_bs_read_int(bs, 1);",
          "6862:     slice_sao_chroma_flag = gf_bs_read_int(bs, 1);",
          "",
          "[Added Lines]",
          "6915:      num_long_term_sps = gf_bs_read_ue_log(bs, \"num_long_term_sps\");",
          "6917:     num_long_term_pics = gf_bs_read_ue_log(bs, \"num_long_term_pics\");",
          "6922:        gf_bs_read_int_log_idx(bs, gf_get_bit_size(sps->num_long_term_ref_pic_sps), \"lt_idx_sps\", i);",
          "6925:       gf_bs_read_int_log_idx(bs, sps->log2_max_pic_order_cnt_lsb, \"PocLsbLt\", i);",
          "6926:       gf_bs_read_int_log_idx(bs, 1, \"UsedByCurrPicLt\", i);",
          "6928:      if (gf_bs_read_int_log_idx(bs, 1, \"delta_poc_msb_present_flag\", i)) {",
          "6930:        DeltaPocMsbCycleLt[i] = gf_bs_read_ue_log_idx(bs, \"DeltaPocMsbCycleLt\", i);",
          "6932:        DeltaPocMsbCycleLt[i] = gf_bs_read_ue_log_idx(bs, \"DeltaPocMsbCycleLt\", i) + DeltaPocMsbCycleLt[i - 1];",
          "6937:     slice_temporal_mvp_enabled_flag = gf_bs_read_int_log(bs, 1, \"slice_temporal_mvp_enabled_flag\");",
          "6941:    slice_sao_luma_flag = gf_bs_read_int_log(bs, 1, \"slice_sao_luma_flag\");",
          "6943:     slice_sao_chroma_flag = gf_bs_read_int_log(bs, 1, \"slice_sao_chroma_flag\");",
          "",
          "---------------",
          "--- Hunk 117 ---",
          "[Context before]",
          "6869:    if (si->slice_type == GF_HEVC_SLICE_TYPE_B)",
          "6870:     num_ref_idx_l1_active = pps->num_ref_idx_l1_default_active;",
          "6874:     if (si->slice_type == GF_HEVC_SLICE_TYPE_B)",
          "6876:    }",
          "6878:    if (pps->lists_modification_present_flag /*TODO: && NumPicTotalCurr > 1*/) {",
          "",
          "[Removed Lines]",
          "6872:    if ( /*num_ref_idx_active_override_flag =*/gf_bs_read_int(bs, 1)) {",
          "6873:     num_ref_idx_l0_active = 1 + gf_bs_get_ue(bs);",
          "6875:      num_ref_idx_l1_active = 1 + gf_bs_get_ue(bs);",
          "",
          "[Added Lines]",
          "6953:    if (gf_bs_read_int_log(bs, 1, \"num_ref_idx_active_override_flag\")) {",
          "6954:     num_ref_idx_l0_active = 1 + gf_bs_read_ue_log(bs, \"num_ref_idx_l0_active\");",
          "6956:      num_ref_idx_l1_active = 1 + gf_bs_read_ue_log(bs, \"num_ref_idx_l1_active\");",
          "",
          "---------------",
          "--- Hunk 118 ---",
          "[Context before]",
          "6883:    }",
          "6885:    if (si->slice_type == GF_HEVC_SLICE_TYPE_B)",
          "6887:    if (pps->cabac_init_present_flag)",
          "6890:    if (slice_temporal_mvp_enabled_flag) {",
          "6892:     Bool collocated_from_l0_flag = 1;",
          "6893:     if (si->slice_type == GF_HEVC_SLICE_TYPE_B)",
          "6896:     if ((collocated_from_l0_flag && (num_ref_idx_l0_active > 1))",
          "6897:      || (!collocated_from_l0_flag && (num_ref_idx_l1_active > 1))",
          "6900:     }",
          "6901:    }",
          "",
          "[Removed Lines]",
          "6894:      collocated_from_l0_flag = gf_bs_read_int(bs, 1);",
          "6898:      ) {",
          "",
          "[Added Lines]",
          "6967:     gf_bs_read_int_log(bs, 1, \"mvd_l1_zero_flag\");",
          "6969:     gf_bs_read_int_log(bs, 1, \"cabac_init_flag\");",
          "6975:      collocated_from_l0_flag = gf_bs_read_int_log(bs, 1, \"collocated_from_l0_flag\");",
          "6979:     ) {",
          "6980:      gf_bs_read_ue_log(bs, \"collocated_ref_idx\");",
          "",
          "---------------",
          "--- Hunk 119 ---",
          "[Context before]",
          "6905:     ) {",
          "6906:     hevc_pred_weight_table(bs, hevc, si, pps, sps, num_ref_idx_l0_active, num_ref_idx_l1_active);",
          "6907:    }",
          "6909:   }",
          "6910:   si->slice_qp_delta_start_bits = (s32) (gf_bs_get_position(bs) - 1) * 8 + gf_bs_get_bit_position(bs);",
          "6913:   if (pps->slice_chroma_qp_offsets_present_flag) {",
          "6916:   }",
          "6917:   if (pps->deblocking_filter_override_enabled_flag) {",
          "6919:   }",
          "6921:   if (deblocking_filter_override_flag) {",
          "6923:    if (!slice_deblocking_filter_disabled_flag) {",
          "6926:    }",
          "6927:   }",
          "6928:   if (pps->loop_filter_across_slices_enabled_flag",
          "6929:    && (slice_sao_luma_flag || slice_sao_chroma_flag || !slice_deblocking_filter_disabled_flag)",
          "6932:   }",
          "6933:  }",
          "",
          "[Removed Lines]",
          "6918:    deblocking_filter_override_flag = gf_bs_read_int(bs, 1);",
          "6922:    slice_deblocking_filter_disabled_flag = gf_bs_read_int(bs, 1);",
          "6930:    ) {",
          "",
          "[Added Lines]",
          "6989:    gf_bs_read_ue_log(bs, \"five_minus_max_num_merge_cand\");",
          "6992:   si->slice_qp_delta = gf_bs_read_se_log(bs, \"slice_qp_delta\");",
          "6995:    gf_bs_read_se_log(bs, \"slice_cb_qp_offset\");",
          "6996:    gf_bs_read_se_log(bs, \"slice_cr_qp_offset\");",
          "6999:    deblocking_filter_override_flag = gf_bs_read_int_log(bs, 1, \"deblocking_filter_override_flag\");",
          "7003:    slice_deblocking_filter_disabled_flag = gf_bs_read_int_log(bs, 1, \"slice_deblocking_filter_disabled_flag\");",
          "7005:     gf_bs_read_se_log(bs, \"slice_beta_offset_div2\");",
          "7006:     gf_bs_read_se_log(bs, \"slice_tc_offset_div2\");",
          "7011:   ) {",
          "7012:    gf_bs_read_int_log(bs, 1, \"slice_loop_filter_across_slices_enabled_flag\");",
          "",
          "---------------",
          "--- Hunk 120 ---",
          "[Context before]",
          "6940:  si->entry_point_start_bits = ((u32)gf_bs_get_position(bs) - 1) * 8 + gf_bs_get_bit_position(bs);",
          "6942:  if (pps->tiles_enabled_flag || pps->entropy_coding_sync_enabled_flag) {",
          "6944:   if (num_entry_point_offsets > 0) {",
          "6946:    u32 segments = offset >> 4;",
          "6947:    s32 remain = (offset & 15);",
          "",
          "[Removed Lines]",
          "6943:   u32 num_entry_point_offsets = gf_bs_get_ue(bs);",
          "6945:    u32 offset = gf_bs_get_ue(bs) + 1;",
          "",
          "[Added Lines]",
          "7024:   u32 num_entry_point_offsets = gf_bs_read_ue_log(bs, \"num_entry_point_offsets\");",
          "7026:    u32 offset = gf_bs_read_ue_log(bs, \"offset\") + 1;",
          "",
          "---------------",
          "--- Hunk 121 ---",
          "[Context before]",
          "6962:  }",
          "6964:  if (pps->slice_segment_header_extension_present_flag) {",
          "6966:   while (size_ext) {",
          "6967:    gf_bs_read_int(bs, 8);",
          "6968:    size_ext--;",
          "",
          "[Removed Lines]",
          "6965:   u32 size_ext = gf_bs_get_ue(bs);",
          "",
          "[Added Lines]",
          "7046:   u32 size_ext = gf_bs_read_ue_log(bs, \"size_ext\");",
          "",
          "---------------",
          "--- Hunk 122 ---",
          "[Context before]",
          "6972:  si->header_size_bits = (gf_bs_get_position(bs) - 1) * 8 + gf_bs_get_bit_position(bs); // av_parser.c modified on 16 jan. 2019",
          "6975:   GF_LOG(GF_LOG_WARNING, GF_LOG_CODING, (\"Error parsing slice header: byte_align not found at end of header !\\n\"));",
          "6976:  }",
          "",
          "[Removed Lines]",
          "6974:  if (gf_bs_read_int(bs, 1) == 0) {",
          "",
          "[Added Lines]",
          "7055:  if (gf_bs_read_int_log(bs, 1, \"byte_align\") == 0) {",
          "",
          "---------------",
          "--- Hunk 123 ---",
          "[Context before]",
          "7075: static Bool hevc_parse_nal_header(GF_BitStream *bs, u8 *nal_unit_type, u8 *temporal_id, u8 *layer_id)",
          "7076: {",
          "7077:  u32 val;",
          "7079:  if (val) return GF_FALSE;",
          "7082:  if (nal_unit_type) *nal_unit_type = val;",
          "7085:  if (layer_id) *layer_id = val;",
          "7088:  if (!val)",
          "7089:   return GF_FALSE;",
          "7090:  val -= 1;",
          "",
          "[Removed Lines]",
          "7078:  val = gf_bs_read_int(bs, 1);",
          "7081:  val = gf_bs_read_int(bs, 6);",
          "7084:  val = gf_bs_read_int(bs, 6);",
          "7087:  val = gf_bs_read_int(bs, 3);",
          "",
          "[Added Lines]",
          "7159:  val = gf_bs_read_int_log(bs, 1, \"forbidden_zero\");",
          "7162:  val = gf_bs_read_int_log(bs, 6, \"nuh_type\");",
          "7165:  val = gf_bs_read_int_log(bs, 6, \"layerID\");",
          "7168:  val = gf_bs_read_int_log(bs, 3, \"temporalID\");",
          "",
          "---------------",
          "--- Hunk 124 ---",
          "[Context before]",
          "7093: }",
          "7097: {",
          "7098:  u32 i;",
          "7099:  if (ProfilePresentFlag) {",
          "7110:   ptl->general_reserved_44bits = gf_bs_read_long_int(bs, 44);",
          "7111:  }",
          "7113:  for (i = 0; i < MaxNumSubLayersMinus1; i++) {",
          "7116:  }",
          "7117:  if (MaxNumSubLayersMinus1 > 0) {",
          "7118:   for (i = MaxNumSubLayersMinus1; i < 8; i++) {",
          "",
          "[Removed Lines]",
          "7096: void profile_tier_level(GF_BitStream *bs, Bool ProfilePresentFlag, u8 MaxNumSubLayersMinus1, HEVC_ProfileTierLevel *ptl)",
          "7100:   ptl->profile_space = gf_bs_read_int(bs, 2);",
          "7101:   ptl->tier_flag = gf_bs_read_int(bs, 1);",
          "7102:   ptl->profile_idc = gf_bs_read_int(bs, 5);",
          "7104:   ptl->profile_compatibility_flag = gf_bs_read_int(bs, 32);",
          "7106:   ptl->general_progressive_source_flag = gf_bs_read_int(bs, 1);",
          "7107:   ptl->general_interlaced_source_flag = gf_bs_read_int(bs, 1);",
          "7108:   ptl->general_non_packed_constraint_flag = gf_bs_read_int(bs, 1);",
          "7109:   ptl->general_frame_only_constraint_flag = gf_bs_read_int(bs, 1);",
          "7112:  ptl->level_idc = gf_bs_read_int(bs, 8);",
          "7114:   ptl->sub_ptl[i].profile_present_flag = gf_bs_read_int(bs, 1);",
          "7115:   ptl->sub_ptl[i].level_present_flag = gf_bs_read_int(bs, 1);",
          "",
          "[Added Lines]",
          "7177: void hevc_profile_tier_level(GF_BitStream *bs, Bool ProfilePresentFlag, u8 MaxNumSubLayersMinus1, HEVC_ProfileTierLevel *ptl, u32 idx)",
          "7181:   ptl->profile_space = gf_bs_read_int_log_idx(bs, 2, \"profile_space\", idx);",
          "7182:   ptl->tier_flag = gf_bs_read_int_log_idx(bs, 1, \"tier_flag\", idx);",
          "7183:   ptl->profile_idc = gf_bs_read_int_log_idx(bs, 5, \"profile_idc\", idx);",
          "7185:   ptl->profile_compatibility_flag = gf_bs_read_int_log_idx(bs, 32, \"profile_compatibility_flag\", idx);",
          "7187:   ptl->general_progressive_source_flag = gf_bs_read_int_log_idx(bs, 1, \"general_progressive_source_flag\", idx);",
          "7188:   ptl->general_interlaced_source_flag = gf_bs_read_int_log_idx(bs, 1, \"general_interlaced_source_flag\", idx);",
          "7189:   ptl->general_non_packed_constraint_flag = gf_bs_read_int_log_idx(bs, 1, \"general_non_packed_constraint_flag\", idx);",
          "7190:   ptl->general_frame_only_constraint_flag = gf_bs_read_int_log_idx(bs, 1, \"general_frame_only_constraint_flag\", idx);",
          "7193:  ptl->level_idc = gf_bs_read_int_log(bs, 8, \"level_idc\");",
          "7195:   ptl->sub_ptl[i].profile_present_flag = gf_bs_read_int_log_idx2(bs, 1, \"profile_present_flag\", idx, i);",
          "7196:   ptl->sub_ptl[i].level_present_flag = gf_bs_read_int_log_idx2(bs, 1, \"level_present_flag\", idx, i);",
          "",
          "---------------",
          "--- Hunk 125 ---",
          "[Context before]",
          "7123:  for (i = 0; i < MaxNumSubLayersMinus1; i++) {",
          "7124:   if (ptl->sub_ptl[i].profile_present_flag) {",
          "7134:   }",
          "7135:   if (ptl->sub_ptl[i].level_present_flag)",
          "7137:  }",
          "7138: }",
          "",
          "[Removed Lines]",
          "7125:    ptl->sub_ptl[i].profile_space = gf_bs_read_int(bs, 2);",
          "7126:    ptl->sub_ptl[i].tier_flag = gf_bs_read_int(bs, 1);",
          "7127:    ptl->sub_ptl[i].profile_idc = gf_bs_read_int(bs, 5);",
          "7128:    ptl->sub_ptl[i].profile_compatibility_flag = gf_bs_read_int(bs, 32);",
          "7136:    ptl->sub_ptl[i].level_idc = gf_bs_read_int(bs, 8);",
          "",
          "[Added Lines]",
          "7206:    ptl->sub_ptl[i].profile_space = gf_bs_read_int_log_idx2(bs, 2, \"sublayer_profile_space\", idx, i);",
          "7207:    ptl->sub_ptl[i].tier_flag = gf_bs_read_int_log_idx2(bs, 1, \"sublayer_tier_flag\", idx, i);",
          "7208:    ptl->sub_ptl[i].profile_idc = gf_bs_read_int_log_idx2(bs, 5, \"sublayer_profile_idc\", idx, i);",
          "7209:    ptl->sub_ptl[i].profile_compatibility_flag = gf_bs_read_int_log_idx2(bs, 32, \"sublayer_profile_compatibility_flag\", idx, i);",
          "7217:    ptl->sub_ptl[i].level_idc = gf_bs_read_int_log_idx2(bs, 8, \"sublayer_level_idc\", idx, i);",
          "",
          "---------------",
          "--- Hunk 126 ---",
          "[Context before]",
          "7174:  return numViews;",
          "7175: }",
          "7178: {",
          "7179:  u8 chroma_bitdepth_present_flag;",
          "7183:  if (chroma_bitdepth_present_flag) {",
          "7186:   if (fmt->chroma_format_idc == 3)",
          "7190:  }",
          "7196:  }",
          "7197: }",
          "",
          "[Removed Lines]",
          "7177: static void lhvc_parse_rep_format(HEVC_RepFormat *fmt, GF_BitStream *bs)",
          "7180:  fmt->pic_width_luma_samples = gf_bs_read_int(bs, 16);",
          "7181:  fmt->pic_height_luma_samples = gf_bs_read_int(bs, 16);",
          "7182:  chroma_bitdepth_present_flag = gf_bs_read_int(bs, 1);",
          "7184:   fmt->chroma_format_idc = gf_bs_read_int(bs, 2);",
          "7187:    fmt->separate_colour_plane_flag = gf_bs_read_int(bs, 1);",
          "7188:   fmt->bit_depth_luma = 8 + gf_bs_read_int(bs, 4);",
          "7189:   fmt->bit_depth_chroma = 8 + gf_bs_read_int(bs, 4);",
          "7191:  if (/*conformance_window_vps_flag*/ gf_bs_read_int(bs, 1)) {",
          "",
          "[Added Lines]",
          "7258: static void lhvc_parse_rep_format(HEVC_RepFormat *fmt, GF_BitStream *bs, u32 idx)",
          "7261:  fmt->pic_width_luma_samples = gf_bs_read_int_log_idx(bs, 16, \"pic_width_luma_samples\", idx);",
          "7262:  fmt->pic_height_luma_samples = gf_bs_read_int_log_idx(bs, 16, \"pic_height_luma_samples\", idx);",
          "7263:  chroma_bitdepth_present_flag = gf_bs_read_int_log_idx(bs, 1, \"chroma_bitdepth_present_flag\", idx);",
          "7265:   fmt->chroma_format_idc = gf_bs_read_int_log_idx(bs, 2, \"chroma_format_idc\", idx);",
          "7268:    fmt->separate_colour_plane_flag = gf_bs_read_int_log_idx(bs, 1, \"separate_colour_plane_flag\", idx);",
          "7269:   fmt->bit_depth_luma = 8 + gf_bs_read_int_log_idx(bs, 4, \"bit_depth_luma_minus8\", idx);",
          "7270:   fmt->bit_depth_chroma = 8 + gf_bs_read_int_log_idx(bs, 4, \"bit_depth_chroma_minus8\", idx);",
          "7272:  if (gf_bs_read_int_log_idx(bs, 1, \"conformance_window_vps_flag\", idx)) {",
          "7273:   gf_bs_read_ue_log_idx(bs, \"conf_win_vps_left_offset\", idx);",
          "7274:   gf_bs_read_ue_log_idx(bs, \"conf_win_vps_right_offset\", idx);",
          "7275:   gf_bs_read_ue_log_idx(bs, \"conf_win_vps_top_offset\", idx);",
          "7276:   gf_bs_read_ue_log_idx(bs, \"conf_win_vps_bottom_offset\", idx);",
          "",
          "---------------",
          "--- Hunk 127 ---",
          "[Context before]",
          "7220:  vps->vps_extension_found = 1;",
          "7221:  if ((vps->max_layers > 1) && vps->base_layer_internal_flag)",
          "7225:  num_scalability_types = 0;",
          "7226:  for (i = 0; i < 16; i++) {",
          "7228:   num_scalability_types += vps->scalability_mask[i];",
          "7229:  }",
          "7230:  if (num_scalability_types >= 16) {",
          "",
          "[Removed Lines]",
          "7222:   profile_tier_level(bs, 0, vps->max_sub_layers - 1, &vps->ext_ptl[0]);",
          "7224:  splitting_flag = gf_bs_read_int(bs, 1);",
          "7227:   vps->scalability_mask[i] = gf_bs_read_int(bs, 1);",
          "",
          "[Added Lines]",
          "7303:   hevc_profile_tier_level(bs, 0, vps->max_sub_layers - 1, &vps->ext_ptl[0], 0);",
          "7305:  splitting_flag = gf_bs_read_int_log(bs, 1, \"splitting_flag\");",
          "7308:   vps->scalability_mask[i] = gf_bs_read_int_log_idx(bs, 1, \"scalability_mask\", i);",
          "",
          "---------------",
          "--- Hunk 128 ---",
          "[Context before]",
          "7232:  }",
          "7233:  dimension_id_len[0] = 0;",
          "7234:  for (i = 0; i < (num_scalability_types - splitting_flag); i++) {",
          "7236:  }",
          "7238:  if (splitting_flag) {",
          "",
          "[Removed Lines]",
          "7235:   dimension_id_len[i] = 1 + gf_bs_read_int(bs, 3);",
          "",
          "[Added Lines]",
          "7316:   dimension_id_len[i] = 1 + gf_bs_read_int_log_idx(bs, 3, \"dimension_id_len_minus1\", i);",
          "",
          "---------------",
          "--- Hunk 129 ---",
          "[Context before]",
          "7245:   dim_bit_offset[num_scalability_types] = 6;",
          "7246:  }",
          "7249:  vps->layer_id_in_nuh[0] = 0;",
          "7250:  vps->layer_id_in_vps[0] = 0;",
          "7251:  for (i = 1; i < vps->max_layers; i++) {",
          "7252:   if (vps_nuh_layer_id_present_flag) {",
          "7254:   }",
          "7255:   else {",
          "7256:    vps->layer_id_in_nuh[i] = i;",
          "",
          "[Removed Lines]",
          "7248:  vps_nuh_layer_id_present_flag = gf_bs_read_int(bs, 1);",
          "7253:    vps->layer_id_in_nuh[i] = gf_bs_read_int(bs, 6);",
          "",
          "[Added Lines]",
          "7329:  vps_nuh_layer_id_present_flag = gf_bs_read_int_log(bs, 1, \"vps_nuh_layer_id_present_flag\");",
          "7334:    vps->layer_id_in_nuh[i] = gf_bs_read_int_log_idx(bs, 6, \"layer_id_in_nuh\", i);",
          "",
          "---------------",
          "--- Hunk 130 ---",
          "[Context before]",
          "7260:   if (!splitting_flag) {",
          "7261:    for (j = 0; j < num_scalability_types; j++) {",
          "7263:    }",
          "7264:   }",
          "7265:  }",
          "",
          "[Removed Lines]",
          "7262:     vps->dimension_id[i][j] = gf_bs_read_int(bs, dimension_id_len[j]);",
          "",
          "[Added Lines]",
          "7343:     vps->dimension_id[i][j] = gf_bs_read_int_log_idx2(bs, dimension_id_len[j], \"dimension_id\", i, j);",
          "",
          "---------------",
          "--- Hunk 131 ---",
          "[Context before]",
          "7274:    vps->dimension_id[0][j] = 0;",
          "7275:  }",
          "7278:  if (view_id_len > 0) {",
          "7279:   for (i = 0; i < lhvc_get_num_views(vps); i++) {",
          "7281:   }",
          "7282:  }",
          "7284:  for (i = 1; i < vps->max_layers; i++) {",
          "7285:   for (j = 0; j < i; j++) {",
          "7287:   }",
          "7288:  }",
          "",
          "[Removed Lines]",
          "7277:  view_id_len = gf_bs_read_int(bs, 4);",
          "7286:    vps->direct_dependency_flag[i][j] = gf_bs_read_int(bs, 1);",
          "",
          "[Added Lines]",
          "7358:  view_id_len = gf_bs_read_int_log(bs, 4, \"view_id_len\");",
          "7361:    gf_bs_read_int_log_idx(bs, view_id_len, \"view_id_val\", i);",
          "7367:    vps->direct_dependency_flag[i][j] = gf_bs_read_int_log_idx(bs, 1, \"direct_dependency_flag\", i);",
          "",
          "---------------",
          "--- Hunk 132 ---",
          "[Context before]",
          "7342:  num_add_layer_set = 0;",
          "7343:  if (num_indepentdent_layers > 1)",
          "7346:  for (i = 0; i < num_add_layer_set; i++)",
          "7347:   for (j = 1; j < num_indepentdent_layers; j++) {",
          "7348:    nb_bits = 1;",
          "7349:    while ((1 << nb_bits) < (num_layers_in_tree_partition[j] + 1))",
          "7350:     nb_bits++;",
          "7352:   }",
          "7356:   for (i = 0; i < vps->max_layers; i++) {",
          "7358:   }",
          "7359:  }",
          "7362:   for (i = 0; i < (vps->max_layers - 1); i++) {",
          "7363:    for (j = i + 1; j < vps->max_layers; j++) {",
          "7364:     if (vps->direct_dependency_flag[j][i])",
          "7366:    }",
          "7367:   }",
          "7368:  }",
          "7372:  if (vps->num_profile_tier_level > MAX_LHVC_LAYERS) {",
          "7373:   GF_LOG(GF_LOG_ERROR, GF_LOG_CODING, (\"[HEVC] Wrong number of PTLs in VPS %d\\n\", vps->num_profile_tier_level));",
          "7374:   vps->num_profile_tier_level = 1;",
          "",
          "[Removed Lines]",
          "7344:   num_add_layer_set = gf_bs_get_ue(bs);",
          "7355:  if (/*vps_sub_layers_max_minus1_present_flag*/gf_bs_read_int(bs, 1)) {",
          "7361:  if (/*max_tid_ref_present_flag = */gf_bs_read_int(bs, 1)) {",
          "7371:  vps->num_profile_tier_level = 1 + gf_bs_get_ue(bs);",
          "",
          "[Added Lines]",
          "7425:   num_add_layer_set = gf_bs_read_ue_log(bs, \"num_add_layer_set\");",
          "7432:    gf_bs_read_int_log_idx2(bs, nb_bits, \"highest_layer_idx_plus1\", i, j);",
          "7436:  if (gf_bs_read_int_log(bs, 1, \"vps_sub_layers_max_minus1_present_flag\")) {",
          "7438:    gf_bs_read_int_log_idx(bs, 3, \"sub_layers_vps_max_minus1\", i);",
          "7442:  if (gf_bs_read_int_log(bs, 1, \"max_tid_ref_present_flag\")) {",
          "7446:      gf_bs_read_int_log_idx2(bs, 3, \"max_tid_il_ref_pics_plus1\", i, j);",
          "7450:  gf_bs_read_int_log(bs, 1, \"default_ref_layers_active_flag\");",
          "7452:  vps->num_profile_tier_level = 1 + gf_bs_read_ue_log(bs, \"num_profile_tier_level\");",
          "",
          "---------------",
          "--- Hunk 133 ---",
          "[Context before]",
          "7376:  }",
          "7378:  for (i = vps->base_layer_internal_flag ? 2 : 1; i < vps->num_profile_tier_level; i++) {",
          "7381:  }",
          "7383:  NumLayerSets = vps->num_layer_sets + num_add_layer_set;",
          "7384:  num_add_olss = 0;",
          "7386:  if (NumLayerSets > 1) {",
          "7389:   default_output_layer_idc = default_output_layer_idc < 2 ? default_output_layer_idc : 2;",
          "7390:  }",
          "7391:  vps->num_output_layer_sets = num_add_olss + NumLayerSets;",
          "",
          "[Removed Lines]",
          "7379:   Bool vps_profile_present_flag = gf_bs_read_int(bs, 1);",
          "7380:   profile_tier_level(bs, vps_profile_present_flag, vps->max_sub_layers - 1, &vps->ext_ptl[i - 1]);",
          "7387:   num_add_olss = gf_bs_get_ue(bs);",
          "7388:   default_output_layer_idc = gf_bs_read_int(bs, 2);",
          "",
          "[Added Lines]",
          "7460:   Bool vps_profile_present_flag = gf_bs_read_int_log_idx(bs, 1, \"vps_profile_present_flag\", i);",
          "7461:   hevc_profile_tier_level(bs, vps_profile_present_flag, vps->max_sub_layers - 1, &vps->ext_ptl[i - 1], i-1);",
          "7468:   num_add_olss = gf_bs_read_ue_log(bs, \"num_add_olss\");",
          "7469:   default_output_layer_idc = gf_bs_read_int_log(bs, 2, \"default_output_layer_idc\");",
          "",
          "---------------",
          "--- Hunk 134 ---",
          "[Context before]",
          "7399:    nb_bits = 1;",
          "7400:    while ((1 << nb_bits) < (NumLayerSets - 1))",
          "7401:     nb_bits++;",
          "7403:   }",
          "7404:   else",
          "7405:    layer_set_idx_for_ols_minus1[i] = 0;",
          "",
          "[Removed Lines]",
          "7402:    layer_set_idx_for_ols_minus1[i] = gf_bs_read_int(bs, nb_bits);",
          "",
          "[Added Lines]",
          "7483:    layer_set_idx_for_ols_minus1[i] = gf_bs_read_int_log_idx(bs, nb_bits, \"layer_set_idx_for_ols_minus1\", i);",
          "",
          "---------------",
          "--- Hunk 135 ---",
          "[Context before]",
          "7408:   if ((i > (vps->num_layer_sets - 1)) || (default_output_layer_idc == 2)) {",
          "7409:    for (j = 0; j < vps->num_layers_in_id_list[ols_ids_to_ls_idx]; j++)",
          "7411:   }",
          "7413:   if ((default_output_layer_idc == 0) || (default_output_layer_idc == 1)) {",
          "",
          "[Removed Lines]",
          "7410:     vps->output_layer_flag[i][j] = gf_bs_read_int(bs, 1);",
          "",
          "[Added Lines]",
          "7491:     vps->output_layer_flag[i][j] = gf_bs_read_int_log_idx2(bs, 1, \"output_layer_flag\", i, j);",
          "",
          "---------------",
          "--- Hunk 136 ---",
          "[Context before]",
          "7451:    nb_bits++;",
          "7452:   for (j = 0; j < vps->num_layers_in_id_list[ols_ids_to_ls_idx]; j++)",
          "7453:    if (vps->necessary_layers_flag[i][j] && vps->num_profile_tier_level)",
          "7455:    else",
          "7456:     vps->profile_tier_level_idx[i][j] = 0;",
          "",
          "[Removed Lines]",
          "7454:     vps->profile_tier_level_idx[i][j] = gf_bs_read_int(bs, nb_bits);",
          "",
          "[Added Lines]",
          "7535:     vps->profile_tier_level_idx[i][j] = gf_bs_read_int_log_idx2(bs, nb_bits, \"profile_tier_level_idx\", i, j);",
          "",
          "---------------",
          "--- Hunk 137 ---",
          "[Context before]",
          "7464:    }",
          "7465:   }",
          "7466:   if (nb_output_layers_in_output_layer_set[i] == 1 && ols_highest_output_layer_id[i] > 0)",
          "7468:  }",
          "7471:  if (vps->num_rep_formats > 16) {",
          "7472:   GF_LOG(GF_LOG_ERROR, GF_LOG_CODING, (\"[HEVC] Wrong number of rep formats in VPS %d\\n\", vps->num_rep_formats));",
          "7473:   vps->num_rep_formats = 0;",
          "",
          "[Removed Lines]",
          "7467:    vps->alt_output_layer_flag[i] = gf_bs_read_int(bs, 1);",
          "7470:  vps->num_rep_formats = 1 + gf_bs_get_ue(bs);",
          "",
          "[Added Lines]",
          "7548:    vps->alt_output_layer_flag[i] = gf_bs_read_int_log_idx(bs, 1, \"alt_output_layer_flag\", i);",
          "7551:  vps->num_rep_formats = 1 + gf_bs_read_ue_log(bs, \"num_rep_formats_minus1\");",
          "",
          "---------------",
          "--- Hunk 138 ---",
          "[Context before]",
          "7475:  }",
          "7477:  for (i = 0; i < vps->num_rep_formats; i++) {",
          "7479:  }",
          "7480:  if (vps->num_rep_formats > 1)",
          "7482:  else",
          "7483:   rep_format_idx_present_flag = 0;",
          "",
          "[Removed Lines]",
          "7478:   lhvc_parse_rep_format(&vps->rep_formats[i], bs);",
          "7481:   rep_format_idx_present_flag = gf_bs_read_int(bs, 1);",
          "",
          "[Added Lines]",
          "7559:   lhvc_parse_rep_format(&vps->rep_formats[i], bs, i);",
          "7562:   rep_format_idx_present_flag = gf_bs_read_int_log(bs, 1, \"rep_format_idx_present_flag\");",
          "",
          "---------------",
          "--- Hunk 139 ---",
          "[Context before]",
          "7488:   nb_bits++;",
          "7489:  for (i = vps->base_layer_internal_flag ? 1 : 0; i < vps->max_layers; i++) {",
          "7490:   if (rep_format_idx_present_flag) {",
          "7492:   }",
          "7493:   else {",
          "7494:    vps->rep_format_idx[i] = i < vps->num_rep_formats - 1 ? i : vps->num_rep_formats - 1;",
          "",
          "[Removed Lines]",
          "7491:    vps->rep_format_idx[i] = gf_bs_read_int(bs, nb_bits);",
          "",
          "[Added Lines]",
          "7572:    vps->rep_format_idx[i] = gf_bs_read_int_log_idx(bs, nb_bits, \"rep_format_idx\", i);",
          "",
          "---------------",
          "--- Hunk 140 ---",
          "[Context before]",
          "7499:  return GF_TRUE;",
          "7500: }",
          "7503: {",
          "7504:  u32 i;",
          "7505:  if (!gf_bs_available(bs)) return;",
          "7507:  for (i = 0; i <= cpb_cnt; i++) {",
          "7510:   if (sub_pic_hrd_params_present_flag) {",
          "7513:   }",
          "7515:  }",
          "7516: }",
          "7519: {",
          "7520:  int i;",
          "7521:  Bool nal_hrd_parameters_present_flag = GF_FALSE;",
          "7522:  Bool vcl_hrd_parameters_present_flag = GF_FALSE;",
          "7523:  Bool sub_pic_hrd_params_present_flag = GF_FALSE;",
          "7524:  if (commonInfPresentFlag) {",
          "7527:   if (nal_hrd_parameters_present_flag || vcl_hrd_parameters_present_flag) {",
          "7529:    if (sub_pic_hrd_params_present_flag) {",
          "7534:    }",
          "7537:    if (sub_pic_hrd_params_present_flag) {",
          "7539:    }",
          "7543:   }",
          "7544:  }",
          "7545:  for (i = 0; i <= maxNumSubLayersMinus1; i++) {",
          "7547:   Bool fixed_pic_rate_within_cvs_flag_i = GF_TRUE;",
          "7548:   Bool low_delay_hrd_flag_i = GF_FALSE;",
          "7549:   u32 cpb_cnt_minus1_i = 0;",
          "7550:   if (!fixed_pic_rate_general_flag_i) {",
          "7552:   }",
          "7553:   if (fixed_pic_rate_within_cvs_flag_i)",
          "7555:   else",
          "7557:   if (!low_delay_hrd_flag_i) {",
          "7559:   }",
          "7560:   if (nal_hrd_parameters_present_flag) {",
          "7562:   }",
          "7563:   if (vcl_hrd_parameters_present_flag) {",
          "7565:   }",
          "7566:  }",
          "7567: }",
          "",
          "[Removed Lines]",
          "7502: static void sub_layer_hrd_parameters(GF_BitStream *bs, int subLayerId, u32 cpb_cnt, Bool sub_pic_hrd_params_present_flag)",
          "7518: static void hevc_parse_hrd_parameters(GF_BitStream *bs, Bool commonInfPresentFlag, int maxNumSubLayersMinus1)",
          "7525:   nal_hrd_parameters_present_flag = gf_bs_read_int(bs, 1);",
          "7526:   vcl_hrd_parameters_present_flag = gf_bs_read_int(bs, 1);",
          "7528:    sub_pic_hrd_params_present_flag = gf_bs_read_int(bs, 1);",
          "7546:   Bool fixed_pic_rate_general_flag_i = gf_bs_read_int(bs, 1);",
          "7551:    fixed_pic_rate_within_cvs_flag_i = gf_bs_read_int(bs, 1);",
          "7556:    low_delay_hrd_flag_i = gf_bs_read_int(bs, 1);",
          "7558:    cpb_cnt_minus1_i = gf_bs_get_ue(bs);",
          "7561:    sub_layer_hrd_parameters(bs, i, cpb_cnt_minus1_i, sub_pic_hrd_params_present_flag);",
          "7564:    sub_layer_hrd_parameters(bs, i, cpb_cnt_minus1_i, sub_pic_hrd_params_present_flag);",
          "",
          "[Added Lines]",
          "7583: static void sub_layer_hrd_parameters(GF_BitStream *bs, int subLayerId, u32 cpb_cnt, Bool sub_pic_hrd_params_present_flag, u32 idx1, u32 idx2)",
          "7589:   gf_bs_read_ue_log_idx3(bs, \"bit_rate_value_minus1\", idx1, idx2, i);",
          "7590:   gf_bs_read_ue_log_idx3(bs, \"cpb_size_value_minus1\", idx1, idx2, i);",
          "7592:    gf_bs_read_ue_log_idx3(bs, \"cpb_size_du_value_minus1\", idx1, idx2, i);",
          "7593:    gf_bs_read_ue_log_idx3(bs, \"bit_rate_du_value_minus1\", idx1, idx2, i);",
          "7595:   gf_bs_read_int_log_idx3(bs, 1, \"cbr_flag\", idx1, idx2, i);",
          "7599: static void hevc_parse_hrd_parameters(GF_BitStream *bs, Bool commonInfPresentFlag, int maxNumSubLayersMinus1, u32 idx)",
          "7607:   nal_hrd_parameters_present_flag = gf_bs_read_int_log_idx(bs, 1, \"nal_hrd_parameters_present_flag\", idx);",
          "7608:   vcl_hrd_parameters_present_flag = gf_bs_read_int_log_idx(bs, 1, \"vcl_hrd_parameters_present_flag\", idx);",
          "7610:    sub_pic_hrd_params_present_flag = gf_bs_read_int_log_idx(bs, 1, \"sub_pic_hrd_params_present_flag\", idx);",
          "7612:     gf_bs_read_int_log_idx(bs, 8, \"tick_divisor_minus2\", idx);",
          "7613:     gf_bs_read_int_log_idx(bs, 5, \"du_cpb_removal_delay_increment_length_minus1\", idx);",
          "7614:     gf_bs_read_int_log_idx(bs, 1, \"sub_pic_cpb_params_in_pic_timing_sei_flag\", idx);",
          "7615:     gf_bs_read_int_log_idx(bs, 5, \"dpb_output_delay_du_length_minus1\", idx);",
          "7617:    gf_bs_read_int_log_idx(bs, 4, \"bit_rate_scale\", idx);",
          "7618:    gf_bs_read_int_log_idx(bs, 4, \"cpb_size_scale\", idx);",
          "7620:     gf_bs_read_int_log_idx(bs, 4, \"cpb_size_du_scale\", idx);",
          "7622:    gf_bs_read_int_log_idx(bs, 5, \"initial_cpb_removal_delay_length_minus1\", idx);",
          "7623:    gf_bs_read_int_log_idx(bs, 5, \"au_cpb_removal_delay_length_minus1\", idx);",
          "7624:    gf_bs_read_int_log_idx(bs, 5, \"dpb_output_delay_length_minus1\", idx);",
          "7628:   Bool fixed_pic_rate_general_flag_i = gf_bs_read_int_log_idx(bs, 1, \"fixed_pic_rate_general_flag\", idx);",
          "7633:    fixed_pic_rate_within_cvs_flag_i = gf_bs_read_int_log_idx(bs, 1, \"fixed_pic_rate_within_cvs_flag\", idx);",
          "7636:    gf_bs_read_ue_log_idx(bs, \"elemental_duration_in_tc_minus1\", idx);",
          "7638:    low_delay_hrd_flag_i = gf_bs_read_int_log_idx(bs, 1, \"low_delay_hrd_flag\", idx);",
          "7640:    cpb_cnt_minus1_i = gf_bs_read_ue_log_idx(bs, \"cpb_cnt_minus1\", idx);",
          "7643:    sub_layer_hrd_parameters(bs, i, cpb_cnt_minus1_i, sub_pic_hrd_params_present_flag, idx, i);",
          "7646:    sub_layer_hrd_parameters(bs, i, cpb_cnt_minus1_i, sub_pic_hrd_params_present_flag, idx, i);",
          "",
          "---------------",
          "--- Hunk 141 ---",
          "[Context before]",
          "7575:  u8 layer_id_included_flag[MAX_LHVC_LAYERS][64];",
          "7580:  if (vps_id >= 16) return -1;",
          "",
          "[Removed Lines]",
          "7578:  vps_id = gf_bs_read_int(bs, 4);",
          "",
          "[Added Lines]",
          "7660:  vps_id = gf_bs_read_int_log(bs, 4, \"vps_id\");",
          "",
          "---------------",
          "--- Hunk 142 ---",
          "[Context before]",
          "7586:   vps->state = 1;",
          "7587:  }",
          "7592:  if (vps->max_layers > MAX_LHVC_LAYERS) {",
          "7593:   GF_LOG(GF_LOG_ERROR, GF_LOG_CODING, (\"[HEVC] sorry, %d layers in VPS but only %d supported\\n\", vps->max_layers, MAX_LHVC_LAYERS));",
          "7594:   return -1;",
          "7595:  }",
          "7602:  for (i = (vps_sub_layer_ordering_info_present_flag ? 0 : vps->max_sub_layers - 1); i < vps->max_sub_layers; i++) {",
          "7606:  }",
          "7608:  if (vps->max_layer_id > MAX_LHVC_LAYERS) {",
          "7609:   GF_LOG(GF_LOG_ERROR, GF_LOG_CODING, (\"[HEVC] VPS max layer ID %u but GPAC only supports %u\\n\", vps->max_layer_id, MAX_LHVC_LAYERS));",
          "7610:   return -1;",
          "7611:  }",
          "7613:  if (vps->num_layer_sets > MAX_LHVC_LAYERS) {",
          "7614:   GF_LOG(GF_LOG_ERROR, GF_LOG_CODING, (\"[HEVC] Wrong number of layer sets in VPS %d\\n\", vps->num_layer_sets));",
          "7615:   return -1;",
          "7616:  }",
          "7617:  for (i = 1; i < vps->num_layer_sets; i++) {",
          "7618:   for (j = 0; j <= vps->max_layer_id; j++) {",
          "7620:   }",
          "7621:  }",
          "7622:  vps->num_layers_in_id_list[0] = 1;",
          "",
          "[Removed Lines]",
          "7589:  vps->base_layer_internal_flag = gf_bs_read_int(bs, 1);",
          "7590:  vps->base_layer_available_flag = gf_bs_read_int(bs, 1);",
          "7591:  vps->max_layers = 1 + gf_bs_read_int(bs, 6);",
          "7596:  vps->max_sub_layers = gf_bs_read_int(bs, 3) + 1;",
          "7597:  vps->temporal_id_nesting = gf_bs_read_int(bs, 1);",
          "7599:  profile_tier_level(bs, 1, vps->max_sub_layers - 1, &vps->ptl);",
          "7601:  vps_sub_layer_ordering_info_present_flag = gf_bs_read_int(bs, 1);",
          "7607:  vps->max_layer_id = gf_bs_read_int(bs, 6);",
          "7612:  vps->num_layer_sets = gf_bs_get_ue(bs) + 1;",
          "7619:    layer_id_included_flag[i][j] = gf_bs_read_int(bs, 1);",
          "",
          "[Added Lines]",
          "7671:  vps->base_layer_internal_flag = gf_bs_read_int_log(bs, 1, \"base_layer_internal_flag\");",
          "7672:  vps->base_layer_available_flag = gf_bs_read_int_log(bs, 1, \"base_layer_available_flag\");",
          "7673:  vps->max_layers = 1 + gf_bs_read_int_log(bs, 6, \"max_layers_minus1\");",
          "7678:  vps->max_sub_layers = gf_bs_read_int_log(bs, 3, \"max_sub_layers_minus1\") + 1;",
          "7679:  vps->temporal_id_nesting = gf_bs_read_int_log(bs, 1, \"temporal_id_nesting\");",
          "7680:  gf_bs_read_int_log(bs, 16, \"vps_reserved_ffff_16bits\");",
          "7681:  hevc_profile_tier_level(bs, 1, vps->max_sub_layers - 1, &vps->ptl, 0);",
          "7683:  vps_sub_layer_ordering_info_present_flag = gf_bs_read_int_log(bs, 1, \"vps_sub_layer_ordering_info_present_flag\");",
          "7685:   gf_bs_read_ue_log_idx(bs, \"vps_max_dec_pic_buffering_minus1\", i);",
          "7686:   gf_bs_read_ue_log_idx(bs, \"vps_max_num_reorder_pics\", i);",
          "7687:   gf_bs_read_ue_log_idx(bs, \"vps_max_latency_increase_plus1\", i);",
          "7689:  vps->max_layer_id = gf_bs_read_int_log(bs, 6, \"max_layer_id\");",
          "7694:  vps->num_layer_sets = gf_bs_read_ue_log(bs, \"num_layer_sets_minus1\") + 1;",
          "7701:    layer_id_included_flag[i][j] = gf_bs_read_int_log_idx2(bs, 1, \"layer_id_included_flag\", i, j);",
          "",
          "---------------",
          "--- Hunk 143 ---",
          "[Context before]",
          "7632:   }",
          "7633:   vps->num_layers_in_id_list[i] = n;",
          "7634:  }",
          "7636:   u32 vps_num_hrd_parameters;",
          "7641:   }",
          "7643:   for (i = 0; i < vps_num_hrd_parameters; i++) {",
          "7644:    Bool cprms_present_flag = GF_TRUE;",
          "7646:    if (i > 0)",
          "7649:   }",
          "7650:  }",
          "7651:  if (stop_at_vps_ext) {",
          "7652:   return vps_id;",
          "7653:  }",
          "7656:  if (vps_extension_flag) {",
          "7657:   Bool res;",
          "7658:   gf_bs_align(bs);",
          "",
          "[Removed Lines]",
          "7635:  if (/*vps_timing_info_present_flag*/gf_bs_read_int(bs, 1)) {",
          "7639:   if (/*vps_poc_proportional_to_timing_flag*/gf_bs_read_int(bs, 1)) {",
          "7642:   vps_num_hrd_parameters = gf_bs_get_ue(bs);",
          "7647:     cprms_present_flag = gf_bs_read_int(bs, 1);",
          "7648:    hevc_parse_hrd_parameters(bs, cprms_present_flag, vps->max_sub_layers - 1);",
          "7655:  vps_extension_flag = gf_bs_read_int(bs, 1);",
          "",
          "[Added Lines]",
          "7717:  if (gf_bs_read_int_log(bs, 1, \"vps_timing_info_present_flag\")) {",
          "7719:   gf_bs_read_int_log(bs, 32, \"vps_num_units_in_tick\");",
          "7720:   gf_bs_read_int_log(bs, 32, \"vps_time_scale\");",
          "7721:   if (gf_bs_read_int_log(bs, 1, \"vps_poc_proportional_to_timing_flag\")) {",
          "7722:    gf_bs_read_ue_log(bs, \"vps_num_ticks_poc_diff_one_minus1\");",
          "7724:   vps_num_hrd_parameters = gf_bs_read_ue_log(bs, \"vps_num_hrd_parameters\");",
          "7727:    gf_bs_read_ue_log_idx(bs, \"hrd_layer_set_idx\", i);",
          "7729:     cprms_present_flag = gf_bs_read_int_log(bs, 1, \"cprms_present_flag\");",
          "7730:    hevc_parse_hrd_parameters(bs, cprms_present_flag, vps->max_sub_layers - 1, i);",
          "7737:  vps_extension_flag = gf_bs_read_int_log(bs, 1, \"vps_extension_flag\");",
          "",
          "---------------",
          "--- Hunk 144 ---",
          "[Context before]",
          "7661:    GF_LOG(GF_LOG_ERROR, GF_LOG_CODING, (\"[HEVC] Failed to parse VPS extensions\\n\"));",
          "7662:    return -1;",
          "7663:   }",
          "7665: #if 0",
          "7666:    while (gf_bs_available(bs)) {",
          "",
          "[Removed Lines]",
          "7664:   if (/*vps_extension2_flag*/gf_bs_read_int(bs, 1)) {",
          "",
          "[Added Lines]",
          "7746:   if (gf_bs_read_int_log(bs, 1, \"vps_extension2_flag\")) {",
          "",
          "---------------",
          "--- Hunk 145 ---",
          "[Context before]",
          "7762:  u32 i, sizeId, matrixId;",
          "7763:  for (sizeId = 0; sizeId < 4; sizeId++) {",
          "7764:   for (matrixId = 0; matrixId < 6; matrixId += (sizeId == 3) ? 3 : 1) {",
          "7766:    if (!scaling_list_pred_mode_flag_sizeId_matrixId) {",
          "7768:    }",
          "7769:    else {",
          "7771:     u32 coefNum = MIN(64, (1 << (4 + (sizeId << 1))));",
          "7772:     if (sizeId > 1) {",
          "7774:     }",
          "7775:     for (i = 0; i < coefNum; i++) {",
          "7777:     }",
          "7778:    }",
          "7779:   }",
          "",
          "[Removed Lines]",
          "7765:    u32 scaling_list_pred_mode_flag_sizeId_matrixId = gf_bs_read_int(bs, 1);",
          "",
          "[Added Lines]",
          "7847:    u32 idx = sizeId*100 + 10*matrixId;",
          "7848:    u32 scaling_list_pred_mode_flag_sizeId_matrixId = gf_bs_read_int_log_idx(bs, 1, \"scaling_list_pred_mode_flag_sizeId_matrixId\", idx);",
          "7850:     gf_bs_read_ue_log_idx(bs, \"scaling_list_pred_matrix_id_delta\", idx);",
          "7856:      gf_bs_read_se_log_idx(bs, \"scaling_list_dc_coef_minus8\", idx);",
          "7859:      gf_bs_read_se_log_idx2(bs, \"scaling_list_delta_coef\", idx, i);",
          "",
          "---------------",
          "--- Hunk 146 ---",
          "[Context before]",
          "7804:  if (vui_flag_pos) *vui_flag_pos = 0;",
          "7808:  if (vps_id >= 16) {",
          "7809:   return -1;",
          "7810:  }",
          "",
          "[Removed Lines]",
          "7807:  vps_id = gf_bs_read_int(bs, 4);",
          "",
          "[Added Lines]",
          "7890:  vps_id = gf_bs_read_int_log(bs, 4, \"vps_id\");",
          "",
          "---------------",
          "--- Hunk 147 ---",
          "[Context before]",
          "7812:  max_sub_layers_minus1 = 0;",
          "7813:  sps_ext_or_max_sub_layers_minus1 = 0;",
          "7814:  if (layer_id == 0)",
          "7816:  else",
          "7818:  multiLayerExtSpsFlag = (layer_id != 0) && (sps_ext_or_max_sub_layers_minus1 == 7);",
          "7819:  if (!multiLayerExtSpsFlag) {",
          "7822:  }",
          "7825:  if ((sps_id < 0) || (sps_id >= 16)) {",
          "7826:   return -1;",
          "7827:  }",
          "",
          "[Removed Lines]",
          "7815:   max_sub_layers_minus1 = gf_bs_read_int(bs, 3);",
          "7817:   sps_ext_or_max_sub_layers_minus1 = gf_bs_read_int(bs, 3);",
          "7821:   profile_tier_level(bs, 1, max_sub_layers_minus1, &ptl);",
          "7824:  sps_id = gf_bs_get_ue(bs);",
          "",
          "[Added Lines]",
          "7898:   max_sub_layers_minus1 = gf_bs_read_int_log(bs, 3, \"max_sub_layers_minus1\");",
          "7900:   sps_ext_or_max_sub_layers_minus1 = gf_bs_read_int_log(bs, 3, \"sps_ext_or_max_sub_layers_minus1\");",
          "7903:   gf_bs_read_int_log(bs, 1, \"temporal_id_nesting_flag\");",
          "7904:   hevc_profile_tier_level(bs, 1, max_sub_layers_minus1, &ptl, 0);",
          "7907:  sps_id = gf_bs_read_ue_log(bs, \"sps_id\");",
          "",
          "---------------",
          "--- Hunk 148 ---",
          "[Context before]",
          "7846:  if (multiLayerExtSpsFlag) {",
          "7848:   if (sps->update_rep_format_flag) {",
          "7850:   }",
          "7851:   else {",
          "7852:    sps->rep_format_idx = vps->rep_format_idx[layer_id];",
          "",
          "[Removed Lines]",
          "7847:   sps->update_rep_format_flag = gf_bs_read_int(bs, 1);",
          "7849:    sps->rep_format_idx = gf_bs_read_int(bs, 8);",
          "",
          "[Added Lines]",
          "7930:   sps->update_rep_format_flag = gf_bs_read_int_log(bs, 1, \"update_rep_format_flag\");",
          "7932:    sps->rep_format_idx = gf_bs_read_int_log(bs, 8, \"rep_format_idx\");",
          "",
          "---------------",
          "--- Hunk 149 ---",
          "[Context before]",
          "7862:   sps->ptl = vps->ext_ptl[0];",
          "7863:  }",
          "7864:  else {",
          "7866:   if (sps->chroma_format_idc == 3)",
          "7871:    u32 SubWidthC, SubHeightC;",
          "7873:    if (sps->chroma_format_idc == 1) {",
          "",
          "[Removed Lines]",
          "7865:   sps->chroma_format_idc = gf_bs_get_ue(bs);",
          "7867:    sps->separate_colour_plane_flag = gf_bs_read_int(bs, 1);",
          "7868:   sps->width = gf_bs_get_ue(bs);",
          "7869:   sps->height = gf_bs_get_ue(bs);",
          "7870:   if ((sps->cw_flag = gf_bs_read_int(bs, 1))) {",
          "",
          "[Added Lines]",
          "7948:   sps->chroma_format_idc = gf_bs_read_ue_log(bs, \"chroma_format_idc\");",
          "7950:    sps->separate_colour_plane_flag = gf_bs_read_int_log(bs, 1, \"separate_colour_plane_flag\");",
          "7951:   sps->width = gf_bs_read_ue_log(bs, \"width\");",
          "7952:   sps->height = gf_bs_read_ue_log(bs, \"height\");",
          "7953:   if ((sps->cw_flag = gf_bs_read_int_log(bs, 1, \"conformance_window_flag\"))) {",
          "",
          "---------------",
          "--- Hunk 150 ---",
          "[Context before]",
          "7881:     SubWidthC = SubHeightC = 1;",
          "7882:    }",
          "7889:    sps->width -= SubWidthC * (sps->cw_left + sps->cw_right);",
          "7890:    sps->height -= SubHeightC * (sps->cw_top + sps->cw_bottom);",
          "7891:   }",
          "7894:  }",
          "7898:  if (!multiLayerExtSpsFlag) {",
          "7900:   for (i = sps->sub_layer_ordering_info_present_flag ? 0 : sps->max_sub_layers_minus1; i <= sps->max_sub_layers_minus1; i++) {",
          "7904:   }",
          "7905:  }",
          "7909:  sps->max_CU_width = (1 << (sps->log2_min_luma_coding_block_size + sps->log2_diff_max_min_luma_coding_block_size));",
          "7910:  sps->max_CU_height = (1 << (sps->log2_min_luma_coding_block_size + sps->log2_diff_max_min_luma_coding_block_size));",
          "7915:  depth = 0;",
          "7918:  while ((u32)(sps->max_CU_width >> sps->log2_diff_max_min_luma_coding_block_size) > (u32)(1 << (sps->log2_min_transform_block_size + depth)))",
          "7919:  {",
          "7920:   depth++;",
          "",
          "[Removed Lines]",
          "7884:    sps->cw_left = gf_bs_get_ue(bs);",
          "7885:    sps->cw_right = gf_bs_get_ue(bs);",
          "7886:    sps->cw_top = gf_bs_get_ue(bs);",
          "7887:    sps->cw_bottom = gf_bs_get_ue(bs);",
          "7892:   sps->bit_depth_luma = 8 + gf_bs_get_ue(bs);",
          "7893:   sps->bit_depth_chroma = 8 + gf_bs_get_ue(bs);",
          "7896:  sps->log2_max_pic_order_cnt_lsb = 4 + gf_bs_get_ue(bs);",
          "7899:   sps->sub_layer_ordering_info_present_flag = gf_bs_read_int(bs, 1);",
          "7907:  sps->log2_min_luma_coding_block_size = 3 + gf_bs_get_ue(bs);",
          "7908:  sps->log2_diff_max_min_luma_coding_block_size = gf_bs_get_ue(bs);",
          "7912:  sps->log2_min_transform_block_size = 2 + gf_bs_get_ue(bs);",
          "7913:  sps->log2_max_transform_block_size = sps->log2_min_transform_block_size  + gf_bs_get_ue(bs);",
          "7916:  sps->max_transform_hierarchy_depth_inter = gf_bs_get_ue(bs);",
          "7917:  sps->max_transform_hierarchy_depth_intra = gf_bs_get_ue(bs);",
          "",
          "[Added Lines]",
          "7967:    sps->cw_left = gf_bs_read_ue_log(bs, \"conformance_window_left\");",
          "7968:    sps->cw_right = gf_bs_read_ue_log(bs, \"conformance_window_right\");",
          "7969:    sps->cw_top = gf_bs_read_ue_log(bs, \"conformance_window_top\");",
          "7970:    sps->cw_bottom = gf_bs_read_ue_log(bs, \"conformance_window_bottom\");",
          "7975:   sps->bit_depth_luma = 8 + gf_bs_read_ue_log(bs, \"bit_depth_luma_minus8\");",
          "7976:   sps->bit_depth_chroma = 8 + gf_bs_read_ue_log(bs, \"bit_depth_chroma_minus8\");",
          "7979:  sps->log2_max_pic_order_cnt_lsb = 4 + gf_bs_read_ue_log(bs, \"log2_max_pic_order_cnt_lsb_minus4\");",
          "7982:   sps->sub_layer_ordering_info_present_flag = gf_bs_read_int_log(bs, 1, \"sub_layer_ordering_info_present_flag\");",
          "7984:    gf_bs_read_ue_log_idx(bs, \"max_dec_pic_buffering\", i);",
          "7985:    gf_bs_read_ue_log_idx(bs, \"num_reorder_pics\", i);",
          "7986:    gf_bs_read_ue_log_idx(bs, \"max_latency_increase\", i);",
          "7990:  sps->log2_min_luma_coding_block_size = 3 + gf_bs_read_ue_log(bs, \"log2_min_luma_coding_block_size_minus3\");",
          "7991:  sps->log2_diff_max_min_luma_coding_block_size = gf_bs_read_ue_log(bs, \"log2_diff_max_min_luma_coding_block_size\");",
          "7995:  sps->log2_min_transform_block_size = 2 + gf_bs_read_ue_log(bs, \"log2_min_transform_block_size_minus2\");",
          "7996:  sps->log2_max_transform_block_size = sps->log2_min_transform_block_size  + gf_bs_read_ue_log(bs, \"log2_max_transform_block_size\");",
          "7999:  sps->max_transform_hierarchy_depth_inter = gf_bs_read_ue_log(bs, \"max_transform_hierarchy_depth_inter\");",
          "8000:  sps->max_transform_hierarchy_depth_intra = gf_bs_read_ue_log(bs, \"max_transform_hierarchy_depth_intra\");",
          "",
          "---------------",
          "--- Hunk 151 ---",
          "[Context before]",
          "7927:   sps->bitsSliceSegmentAddress++;",
          "7928:  }",
          "7931:  if (sps->scaling_list_enable_flag) {",
          "7932:   sps->infer_scaling_list_flag = 0;",
          "7933:   sps->scaling_list_ref_layer_id = 0;",
          "7934:   if (multiLayerExtSpsFlag) {",
          "7936:   }",
          "7937:   if (sps->infer_scaling_list_flag) {",
          "7939:   }",
          "7940:   else {",
          "7942:    if (sps->scaling_list_data_present_flag) {",
          "7943:     hevc_scaling_list_data(bs);",
          "7944:    }",
          "7945:   }",
          "7946:  }",
          "7955:  }",
          "7957:  if (sps->num_short_term_ref_pic_sets > 64) {",
          "7958:   GF_LOG(GF_LOG_ERROR, GF_LOG_CODING, (\"[HEVC] Invalid number of short term reference picture sets %d\\n\", sps->num_short_term_ref_pic_sets));",
          "7959:   return -1;",
          "7960:  }",
          "7962:  for (i = 0; i < sps->num_short_term_ref_pic_sets; i++) {",
          "7965:   if (!ret) {",
          "7966:    GF_LOG(GF_LOG_ERROR, GF_LOG_CODING, (\"[HEVC] Invalid short_term_ref_pic_set\\n\"));",
          "7967:    return -1;",
          "7968:   }",
          "7969:  }",
          "7971:  if (sps->long_term_ref_pics_present_flag) {",
          "7973:   for (i = 0; i < sps->num_long_term_ref_pic_sps; i++) {",
          "7976:   }",
          "7977:  }",
          "7981:  if (vui_flag_pos)",
          "7986:   if (sps->aspect_ratio_info_present_flag) {",
          "7988:    if (sps->sar_idc == 255) {",
          "7991:    }",
          "7992:    else if (sps->sar_idc < 17) {",
          "7993:     sps->sar_width = hevc_sar[sps->sar_idc].w;",
          "",
          "[Removed Lines]",
          "7930:  sps->scaling_list_enable_flag = gf_bs_read_int(bs, 1);",
          "7935:    sps->infer_scaling_list_flag = gf_bs_read_int(bs, 1);",
          "7938:    sps->scaling_list_ref_layer_id = gf_bs_read_int(bs, 6);",
          "7941:    sps->scaling_list_data_present_flag = gf_bs_read_int(bs, 1);",
          "7947:  sps->asymmetric_motion_partitions_enabled_flag = gf_bs_read_int(bs, 1);",
          "7948:  sps->sample_adaptive_offset_enabled_flag = gf_bs_read_int(bs, 1);",
          "7949:  if ( (sps->pcm_enabled_flag = gf_bs_read_int(bs, 1)) ) {",
          "7950:   sps->pcm_sample_bit_depth_luma_minus1 = gf_bs_read_int(bs, 4);",
          "7951:   sps->pcm_sample_bit_depth_chroma_minus1 = gf_bs_read_int(bs, 4);",
          "7952:   sps->log2_min_pcm_luma_coding_block_size_minus3 = gf_bs_get_ue(bs);",
          "7953:   sps->log2_diff_max_min_pcm_luma_coding_block_size = gf_bs_get_ue(bs);",
          "7954:   sps->pcm_loop_filter_disable_flag = gf_bs_read_int(bs, 1);",
          "7956:  sps->num_short_term_ref_pic_sets = gf_bs_get_ue(bs);",
          "7963:   Bool ret = parse_short_term_ref_pic_set(bs, sps, i);",
          "7970:  sps->long_term_ref_pics_present_flag = gf_bs_read_int(bs, 1);",
          "7972:   sps->num_long_term_ref_pic_sps = gf_bs_get_ue(bs);",
          "7978:  sps->temporal_mvp_enable_flag = gf_bs_read_int(bs, 1);",
          "7979:  sps->strong_intra_smoothing_enable_flag = gf_bs_read_int(bs, 1);",
          "7984:  if ((sps->vui_parameters_present_flag = gf_bs_read_int(bs, 1)) ) {",
          "7985:   sps->aspect_ratio_info_present_flag = gf_bs_read_int(bs, 1);",
          "7987:    sps->sar_idc = gf_bs_read_int(bs, 8);",
          "7989:     sps->sar_width = gf_bs_read_int(bs, 16);",
          "7990:     sps->sar_height = gf_bs_read_int(bs, 16);",
          "",
          "[Added Lines]",
          "8013:  sps->scaling_list_enable_flag = gf_bs_read_int_log(bs, 1, \"scaling_list_enable_flag\");",
          "8018:    sps->infer_scaling_list_flag = gf_bs_read_int_log(bs, 1, \"infer_scaling_list_flag\");",
          "8021:    sps->scaling_list_ref_layer_id = gf_bs_read_int_log(bs, 6, \"scaling_list_ref_layer_id\");",
          "8024:    sps->scaling_list_data_present_flag = gf_bs_read_int_log(bs, 1, \"scaling_list_data_present_flag\");",
          "8030:  sps->asymmetric_motion_partitions_enabled_flag = gf_bs_read_int_log(bs, 1, \"asymmetric_motion_partitions_enabled_flag\");",
          "8031:  sps->sample_adaptive_offset_enabled_flag = gf_bs_read_int_log(bs, 1, \"sample_adaptive_offset_enabled_flag\");",
          "8032:  if ( (sps->pcm_enabled_flag = gf_bs_read_int_log(bs, 1, \"pcm_enabled_flag\")) ) {",
          "8033:   sps->pcm_sample_bit_depth_luma_minus1 = gf_bs_read_int_log(bs, 4, \"pcm_sample_bit_depth_luma_minus1\");",
          "8034:   sps->pcm_sample_bit_depth_chroma_minus1 = gf_bs_read_int_log(bs, 4, \"pcm_sample_bit_depth_chroma_minus1\");",
          "8035:   sps->log2_min_pcm_luma_coding_block_size_minus3 = gf_bs_read_ue_log(bs, \"log2_min_pcm_luma_coding_block_size_minus3\");",
          "8036:   sps->log2_diff_max_min_pcm_luma_coding_block_size = gf_bs_read_ue_log(bs, \"log2_diff_max_min_pcm_luma_coding_block_size\");",
          "8037:   sps->pcm_loop_filter_disable_flag = gf_bs_read_int_log(bs, 1, \"pcm_loop_filter_disable_flag\");",
          "8039:  sps->num_short_term_ref_pic_sets = gf_bs_read_ue_log(bs, \"num_short_term_ref_pic_sets\");",
          "8046:   Bool ret = hevc_parse_short_term_ref_pic_set(bs, sps, i);",
          "8053:  sps->long_term_ref_pics_present_flag = gf_bs_read_int_log(bs, 1, \"long_term_ref_pics_present_flag\");",
          "8055:   sps->num_long_term_ref_pic_sps = gf_bs_read_ue_log(bs, \"num_long_term_ref_pic_sps\");",
          "8057:    gf_bs_read_int_log_idx(bs, sps->log2_max_pic_order_cnt_lsb, \"lt_ref_pic_poc_lsb_sps\", i);",
          "8058:    gf_bs_read_int_log_idx(bs, 1, \"used_by_curr_pic_lt_sps_flag\", i);",
          "8061:  sps->temporal_mvp_enable_flag = gf_bs_read_int_log(bs, 1, \"temporal_mvp_enable_flag\");",
          "8062:  sps->strong_intra_smoothing_enable_flag = gf_bs_read_int_log(bs, 1, \"strong_intra_smoothing_enable_flag\");",
          "8067:  if ((sps->vui_parameters_present_flag = gf_bs_read_int_log(bs, 1, \"vui_parameters_present_flag\")) ) {",
          "8068:   sps->aspect_ratio_info_present_flag = gf_bs_read_int_log(bs, 1, \"aspect_ratio_info_present_flag\");",
          "8070:    sps->sar_idc = gf_bs_read_int_log(bs, 8, \"aspect_ratio_idc\");",
          "8072:     sps->sar_width = gf_bs_read_int_log(bs, 16, \"aspect_ratio_width\");",
          "8073:     sps->sar_height = gf_bs_read_int_log(bs, 16, \"aspect_ratio_height\");",
          "",
          "---------------",
          "--- Hunk 152 ---",
          "[Context before]",
          "7995:    }",
          "7996:   }",
          "8002:   if (sps->video_signal_type_present_flag) {",
          "8009:    }",
          "8010:   }",
          "8015:   }",
          "8026:   }",
          "8029:   if (sps->has_timing_info) {",
          "8033:    if (sps->poc_proportional_to_timing_flag)",
          "8037:     return sps_id;",
          "8038:    }",
          "8039:   }",
          "8050:   }",
          "8051:  }",
          "8054: #if 0",
          "8055:   while (gf_bs_available(bs)) {",
          "",
          "[Removed Lines]",
          "7998:   if ((sps->overscan_info_present = gf_bs_read_int(bs, 1)))",
          "7999:    sps->overscan_appropriate = gf_bs_read_int(bs, 1);",
          "8001:   sps->video_signal_type_present_flag = gf_bs_read_int(bs, 1);",
          "8003:    sps->video_format = gf_bs_read_int(bs, 3);",
          "8004:    sps->video_full_range_flag = gf_bs_read_int(bs, 1);",
          "8005:    if ((sps->colour_description_present_flag = gf_bs_read_int(bs, 1))) {",
          "8006:     sps->colour_primaries = gf_bs_read_int(bs, 8);",
          "8007:     sps->transfer_characteristic = gf_bs_read_int(bs, 8);",
          "8008:     sps->matrix_coeffs = gf_bs_read_int(bs, 8);",
          "8012:   if ((sps->chroma_loc_info_present_flag = gf_bs_read_int(bs, 1))) {",
          "8013:    sps->chroma_sample_loc_type_top_field = gf_bs_get_ue(bs);",
          "8014:    sps->chroma_sample_loc_type_bottom_field = gf_bs_get_ue(bs);",
          "8017:   sps->neutra_chroma_indication_flag = gf_bs_read_int(bs, 1);",
          "8018:   sps->field_seq_flag = gf_bs_read_int(bs, 1);",
          "8019:   sps->frame_field_info_present_flag = gf_bs_read_int(bs, 1);",
          "8021:   if ((sps->default_display_window_flag = gf_bs_read_int(bs, 1))) {",
          "8022:    sps->left_offset = gf_bs_get_ue(bs);",
          "8023:    sps->right_offset = gf_bs_get_ue(bs);",
          "8024:    sps->top_offset = gf_bs_get_ue(bs);",
          "8025:    sps->bottom_offset = gf_bs_get_ue(bs);",
          "8028:   sps->has_timing_info = gf_bs_read_int(bs, 1);",
          "8030:    sps->num_units_in_tick = gf_bs_read_int(bs, 32);",
          "8031:    sps->time_scale = gf_bs_read_int(bs, 32);",
          "8032:    sps->poc_proportional_to_timing_flag = gf_bs_read_int(bs, 1);",
          "8034:     sps->num_ticks_poc_diff_one_minus1 = gf_bs_get_ue(bs);",
          "8035:    if ((sps->hrd_parameters_present_flag = gf_bs_read_int(bs, 1))) {",
          "8041:   if (/*bitstream_restriction_flag=*/gf_bs_read_int(bs, 1)) {",
          "8053:  if (/*sps_extension_flag*/gf_bs_read_int(bs, 1)) {",
          "",
          "[Added Lines]",
          "8081:   if ((sps->overscan_info_present = gf_bs_read_int_log(bs, 1, \"overscan_info_present\")))",
          "8082:    sps->overscan_appropriate = gf_bs_read_int_log(bs, 1, \"overscan_appropriate\");",
          "8084:   sps->video_signal_type_present_flag = gf_bs_read_int_log(bs, 1, \"video_signal_type_present_flag\");",
          "8086:    sps->video_format = gf_bs_read_int_log(bs, 3, \"video_format\");",
          "8087:    sps->video_full_range_flag = gf_bs_read_int_log(bs, 1, \"video_full_range_flag\");",
          "8088:    if ((sps->colour_description_present_flag = gf_bs_read_int_log(bs, 1, \"colour_description_present_flag\"))) {",
          "8089:     sps->colour_primaries = gf_bs_read_int_log(bs, 8, \"colour_primaries\");",
          "8090:     sps->transfer_characteristic = gf_bs_read_int_log(bs, 8, \"transfer_characteristic\");",
          "8091:     sps->matrix_coeffs = gf_bs_read_int_log(bs, 8, \"matrix_coefficients\");",
          "8095:   if ((sps->chroma_loc_info_present_flag = gf_bs_read_int_log(bs, 1, \"chroma_loc_info_present_flag\"))) {",
          "8096:    sps->chroma_sample_loc_type_top_field = gf_bs_read_ue_log(bs, \"chroma_sample_loc_type_top_field\");",
          "8097:    sps->chroma_sample_loc_type_bottom_field = gf_bs_read_ue_log(bs, \"chroma_sample_loc_type_bottom_field\");",
          "8100:   sps->neutra_chroma_indication_flag = gf_bs_read_int_log(bs, 1, \"neutra_chroma_indication_flag\");",
          "8101:   sps->field_seq_flag = gf_bs_read_int_log(bs, 1, \"field_seq_flag\");",
          "8102:   sps->frame_field_info_present_flag = gf_bs_read_int_log(bs, 1, \"frame_field_info_present_flag\");",
          "8104:   if ((sps->default_display_window_flag = gf_bs_read_int_log(bs, 1, \"default_display_window_flag\"))) {",
          "8105:    sps->left_offset = gf_bs_read_ue_log(bs, \"display_window_left_offset\");",
          "8106:    sps->right_offset = gf_bs_read_ue_log(bs, \"display_window_right_offset\");",
          "8107:    sps->top_offset = gf_bs_read_ue_log(bs, \"display_window_top_offset\");",
          "8108:    sps->bottom_offset = gf_bs_read_ue_log(bs, \"display_window_bottom_offset\");",
          "8111:   sps->has_timing_info = gf_bs_read_int_log(bs, 1, \"has_timing_info\");",
          "8113:    sps->num_units_in_tick = gf_bs_read_int_log(bs, 32, \"num_units_in_tick\");",
          "8114:    sps->time_scale = gf_bs_read_int_log(bs, 32, \"time_scale\");",
          "8115:    sps->poc_proportional_to_timing_flag = gf_bs_read_int_log(bs, 1, \"poc_proportional_to_timing_flag\");",
          "8117:     sps->num_ticks_poc_diff_one_minus1 = gf_bs_read_ue_log(bs, \"num_ticks_poc_diff_one_minus1\");",
          "8118:    if ((sps->hrd_parameters_present_flag = gf_bs_read_int_log(bs, 1, \"hrd_parameters_present_flag\"))) {",
          "8124:   if (gf_bs_read_int_log(bs, 1, \"bitstream_restriction_flag\")) {",
          "8125:    gf_bs_read_int_log(bs, 1, \"tiles_fixed_structure_flag\");",
          "8126:    gf_bs_read_int_log(bs, 1, \"motion_vectors_over_pic_boundaries_flag\");",
          "8127:    gf_bs_read_int_log(bs, 1, \"restricted_ref_pic_lists_flag\");",
          "8128:    gf_bs_read_ue_log(bs, \"min_spatial_segmentation_idc\");",
          "8129:    gf_bs_read_ue_log(bs, \"max_bytes_per_pic_denom\");",
          "8130:    gf_bs_read_ue_log(bs, \"max_bits_per_min_cu_denom\");",
          "8131:    gf_bs_read_ue_log(bs, \"log2_max_mv_length_horizontal\");",
          "8132:    gf_bs_read_ue_log(bs, \"log2_max_mv_length_vertical\");",
          "8136:  if (gf_bs_read_int_log(bs, 1, \"sps_extension_flag\")) {",
          "",
          "---------------",
          "--- Hunk 153 ---",
          "[Context before]",
          "8107:  HEVC_PPS *pps;",
          "8112:  if ((pps_id < 0) || (pps_id >= 64)) {",
          "8113:   GF_LOG(GF_LOG_ERROR, GF_LOG_CODING, (\"[HEVC] wrong PPS ID %d in PPS\\n\", pps_id));",
          "",
          "[Removed Lines]",
          "8110:  pps_id = gf_bs_get_ue(bs);",
          "",
          "[Added Lines]",
          "8193:  pps_id = gf_bs_read_ue_log(bs, \"pps_id\");",
          "",
          "---------------",
          "--- Hunk 154 ---",
          "[Context before]",
          "8119:   pps->id = pps_id;",
          "8120:   pps->state = 1;",
          "8121:  }",
          "8123:  if (pps->sps_id >= 16) {",
          "8124:   GF_LOG(GF_LOG_ERROR, GF_LOG_CODING, (\"[HEVC] wrong SPS ID %d in PPS\\n\", pps->sps_id));",
          "8125:   pps->sps_id=0;",
          "8126:   return -1;",
          "8127:  }",
          "8151:  if (pps->tiles_enabled_flag) {",
          "8155:   if (!pps->uniform_spacing_flag) {",
          "8156:    for (i = 0; i < pps->num_tile_columns - 1; i++) {",
          "8158:    }",
          "8159:    for (i = 0; i < pps->num_tile_rows - 1; i++) {",
          "8161:    }",
          "8162:   }",
          "8164:  }",
          "8171:   }",
          "8172:  }",
          "8174:   hevc_scaling_list_data(bs);",
          "8175:  }",
          "8180: #if 0",
          "8181:   while (gf_bs_available(bs)) {",
          "",
          "[Removed Lines]",
          "8122:  pps->sps_id = gf_bs_get_ue(bs);",
          "8129:  pps->dependent_slice_segments_enabled_flag = gf_bs_read_int(bs, 1);",
          "8131:  pps->output_flag_present_flag = gf_bs_read_int(bs, 1);",
          "8132:  pps->num_extra_slice_header_bits = gf_bs_read_int(bs, 3);",
          "8133:  pps->sign_data_hiding_flag = gf_bs_read_int(bs, 1);",
          "8134:  pps->cabac_init_present_flag = gf_bs_read_int(bs, 1);",
          "8135:  pps->num_ref_idx_l0_default_active = 1 + gf_bs_get_ue(bs);",
          "8136:  pps->num_ref_idx_l1_default_active = 1 + gf_bs_get_ue(bs);",
          "8137:  pps->pic_init_qp_minus26 = gf_bs_get_se(bs);",
          "8138:  pps->constrained_intra_pred_flag = gf_bs_read_int(bs, 1);",
          "8139:  pps->transform_skip_enabled_flag = gf_bs_read_int(bs, 1);",
          "8140:  if ((pps->cu_qp_delta_enabled_flag = gf_bs_read_int(bs, 1)))",
          "8141:   pps->diff_cu_qp_delta_depth = gf_bs_get_ue(bs);",
          "8143:  pps->pic_cb_qp_offset = gf_bs_get_se(bs);",
          "8144:  pps->pic_cr_qp_offset = gf_bs_get_se(bs);",
          "8145:  pps->slice_chroma_qp_offsets_present_flag = gf_bs_read_int(bs, 1);",
          "8146:  pps->weighted_pred_flag = gf_bs_read_int(bs, 1);",
          "8147:  pps->weighted_bipred_flag = gf_bs_read_int(bs, 1);",
          "8148:  pps->transquant_bypass_enable_flag = gf_bs_read_int(bs, 1);",
          "8149:  pps->tiles_enabled_flag = gf_bs_read_int(bs, 1);",
          "8150:  pps->entropy_coding_sync_enabled_flag = gf_bs_read_int(bs, 1);",
          "8152:   pps->num_tile_columns = 1 + gf_bs_get_ue(bs);",
          "8153:   pps->num_tile_rows = 1 + gf_bs_get_ue(bs);",
          "8154:   pps->uniform_spacing_flag = gf_bs_read_int(bs, 1);",
          "8157:     pps->column_width[i] = 1 + gf_bs_get_ue(bs);",
          "8160:     pps->row_height[i] = 1 + gf_bs_get_ue(bs);",
          "8163:   pps->loop_filter_across_tiles_enabled_flag = gf_bs_read_int(bs, 1);",
          "8165:  pps->loop_filter_across_slices_enabled_flag = gf_bs_read_int(bs, 1);",
          "8166:  if ((pps->deblocking_filter_control_present_flag = gf_bs_read_int(bs, 1))) {",
          "8167:   pps->deblocking_filter_override_enabled_flag = gf_bs_read_int(bs, 1);",
          "8168:   if (! (pps->pic_disable_deblocking_filter_flag = gf_bs_read_int(bs, 1))) {",
          "8169:    pps->beta_offset_div2 = gf_bs_get_se(bs);",
          "8170:    pps->tc_offset_div2 = gf_bs_get_se(bs);",
          "8173:  if ((pps->pic_scaling_list_data_present_flag = gf_bs_read_int(bs, 1))) {",
          "8176:  pps->lists_modification_present_flag = gf_bs_read_int(bs, 1);",
          "8177:  pps->log2_parallel_merge_level_minus2 = gf_bs_get_ue(bs);",
          "8178:  pps->slice_segment_header_extension_present_flag = gf_bs_read_int(bs, 1);",
          "8179:  if ( /*pps_extension_flag= */gf_bs_read_int(bs, 1)) {",
          "",
          "[Added Lines]",
          "8205:  pps->sps_id = gf_bs_read_ue_log(bs, \"sps_id\");",
          "8212:  pps->dependent_slice_segments_enabled_flag = gf_bs_read_int_log(bs, 1, \"dependent_slice_segments_enabled_flag\");",
          "8214:  pps->output_flag_present_flag = gf_bs_read_int_log(bs, 1, \"output_flag_present_flag\");",
          "8215:  pps->num_extra_slice_header_bits = gf_bs_read_int_log(bs, 3, \"num_extra_slice_header_bits\");",
          "8216:  pps->sign_data_hiding_flag = gf_bs_read_int_log(bs, 1, \"sign_data_hiding_flag\");",
          "8217:  pps->cabac_init_present_flag = gf_bs_read_int_log(bs, 1, \"cabac_init_present_flag\");",
          "8218:  pps->num_ref_idx_l0_default_active = 1 + gf_bs_read_ue_log(bs, \"num_ref_idx_l0_default_active\");",
          "8219:  pps->num_ref_idx_l1_default_active = 1 + gf_bs_read_ue_log(bs, \"num_ref_idx_l1_default_active\");",
          "8220:  pps->pic_init_qp_minus26 = gf_bs_read_se_log(bs, \"pic_init_qp_minus26\");",
          "8221:  pps->constrained_intra_pred_flag = gf_bs_read_int_log(bs, 1, \"constrained_intra_pred_flag\");",
          "8222:  pps->transform_skip_enabled_flag = gf_bs_read_int_log(bs, 1, \"transform_skip_enabled_flag\");",
          "8223:  if ((pps->cu_qp_delta_enabled_flag = gf_bs_read_int_log(bs, 1, \"cu_qp_delta_enabled_flag\")))",
          "8224:   pps->diff_cu_qp_delta_depth = gf_bs_read_ue_log(bs, \"diff_cu_qp_delta_depth\");",
          "8226:  pps->pic_cb_qp_offset = gf_bs_read_se_log(bs, \"pic_cb_qp_offset\");",
          "8227:  pps->pic_cr_qp_offset = gf_bs_read_se_log(bs, \"pic_cr_qp_offset\");",
          "8228:  pps->slice_chroma_qp_offsets_present_flag = gf_bs_read_int_log(bs, 1, \"slice_chroma_qp_offsets_present_flag\");",
          "8229:  pps->weighted_pred_flag = gf_bs_read_int_log(bs, 1, \"weighted_pred_flag\");",
          "8230:  pps->weighted_bipred_flag = gf_bs_read_int_log(bs, 1, \"weighted_bipred_flag\");",
          "8231:  pps->transquant_bypass_enable_flag = gf_bs_read_int_log(bs, 1, \"transquant_bypass_enable_flag\");",
          "8232:  pps->tiles_enabled_flag = gf_bs_read_int_log(bs, 1, \"tiles_enabled_flag\");",
          "8233:  pps->entropy_coding_sync_enabled_flag = gf_bs_read_int_log(bs, 1, \"entropy_coding_sync_enabled_flag\");",
          "8235:   pps->num_tile_columns = 1 + gf_bs_read_ue_log(bs, \"num_tile_columns_minus1\");",
          "8236:   pps->num_tile_rows = 1 + gf_bs_read_ue_log(bs, \"num_tile_rows_minus1\");",
          "8237:   pps->uniform_spacing_flag = gf_bs_read_int_log(bs, 1, \"uniform_spacing_flag\");",
          "8240:     pps->column_width[i] = 1 + gf_bs_read_ue_log_idx(bs, \"column_width_minus1\", i);",
          "8243:     pps->row_height[i] = 1 + gf_bs_read_ue_log_idx(bs, \"row_height_minus1\", i);",
          "8246:   pps->loop_filter_across_tiles_enabled_flag = gf_bs_read_int_log(bs, 1, \"loop_filter_across_tiles_enabled_flag\");",
          "8248:  pps->loop_filter_across_slices_enabled_flag = gf_bs_read_int_log(bs, 1, \"loop_filter_across_slices_enabled_flag\");",
          "8249:  if ((pps->deblocking_filter_control_present_flag = gf_bs_read_int_log(bs, 1, \"deblocking_filter_control_present_flag\"))) {",
          "8250:   pps->deblocking_filter_override_enabled_flag = gf_bs_read_int_log(bs, 1, \"deblocking_filter_override_enabled_flag\");",
          "8251:   if (! (pps->pic_disable_deblocking_filter_flag = gf_bs_read_int_log(bs, 1, \"pic_disable_deblocking_filter_flag\"))) {",
          "8252:    pps->beta_offset_div2 = gf_bs_read_se_log(bs, \"beta_offset_div2\");",
          "8253:    pps->tc_offset_div2 = gf_bs_read_se_log(bs, \"tc_offset_div2\");",
          "8256:  if ((pps->pic_scaling_list_data_present_flag = gf_bs_read_int_log(bs, 1, \"pic_scaling_list_data_present_flag\"))) {",
          "8259:  pps->lists_modification_present_flag = gf_bs_read_int_log(bs, 1, \"lists_modification_present_flag\");",
          "8260:  pps->log2_parallel_merge_level_minus2 = gf_bs_read_ue_log(bs, \"log2_parallel_merge_level_minus2\");",
          "8261:  pps->slice_segment_header_extension_present_flag = gf_bs_read_int_log(bs, 1, \"slice_segment_header_extension_present_flag\");",
          "8262:  if (gf_bs_read_int_log(bs, 1, \"pps_extension_flag\")) {",
          "",
          "---------------",
          "--- Hunk 155 ---",
          "[Context before]",
          "8575:   GF_LOG(GF_LOG_ERROR, GF_LOG_CODING, (\"[AC3] Wrong sync word detected (0x%X - expecting 0x0B77).\\n\", syncword));",
          "8576:   return GF_FALSE;",
          "8577:  }",
          "8584:  if (frmsizecod >= 2 * sizeof(ac3_sizecod_to_bitrate) / sizeof(u32))",
          "8585:   return GF_FALSE;",
          "",
          "[Removed Lines]",
          "8578:  gf_bs_read_u16(bs); //crc1",
          "8579:  fscod = gf_bs_read_int(bs, 2);",
          "8580:  frmsizecod = gf_bs_read_int(bs, 6);",
          "8581:  bsid = gf_bs_read_int(bs, 5);",
          "8582:  bsmod = gf_bs_read_int(bs, 3);",
          "8583:  ac3_mod = gf_bs_read_int(bs, 3);",
          "",
          "[Added Lines]",
          "8661:  gf_bs_read_int_log(bs, 16, \"crc1\");",
          "8662:  fscod = gf_bs_read_int_log(bs, 2, \"fscod\");",
          "8663:  frmsizecod = gf_bs_read_int_log(bs, 6, \"frmsizecod\");",
          "8664:  bsid = gf_bs_read_int_log(bs, 5, \"bsid\");",
          "8665:  bsmod = gf_bs_read_int_log(bs, 3, \"bsmod\");",
          "8666:  ac3_mod = gf_bs_read_int_log(bs, 3, \"ac3_mod\");",
          "",
          "---------------",
          "--- Hunk 156 ---",
          "[Context before]",
          "8624:   return GF_FALSE;",
          "8626:  hdr->channels = ac3_mod_to_chans[ac3_mod];",
          "8632:   hdr->channels += 1;",
          "8633:   hdr->streams[0].lfon = 1;",
          "8634:  }",
          "",
          "[Removed Lines]",
          "8627:  if ((ac3_mod & 0x1) && (ac3_mod != 1)) gf_bs_read_int(bs, 2);",
          "8628:  if (ac3_mod & 0x4) gf_bs_read_int(bs, 2);",
          "8629:  if (ac3_mod == 0x2) gf_bs_read_int(bs, 2);",
          "8631:  if (gf_bs_read_int(bs, 1)) {",
          "",
          "[Added Lines]",
          "8710:  if ((ac3_mod & 0x1) && (ac3_mod != 1)) gf_bs_read_int_log(bs, 2, \"cmixlev\");",
          "8711:  if (ac3_mod & 0x4) gf_bs_read_int_log(bs, 2, \"surmixlev\");",
          "8712:  if (ac3_mod == 0x2) gf_bs_read_int_log(bs, 2, \"dsurmod\");",
          "8714:  if (gf_bs_read_int_log(bs, 1, \"lfeon\")) {",
          "",
          "---------------",
          "--- Hunk 157 ---",
          "[Context before]",
          "8663:   return GF_FALSE;",
          "8664:  }",
          "8669:  if ((strmtyp!=0x1) && ((hdr->substreams >> substreamid) & 0x1)) {",
          "8670:   hdr->framesize = framesize;",
          "",
          "[Removed Lines]",
          "8666:  strmtyp = gf_bs_read_int(bs, 2);",
          "8667:  substreamid = gf_bs_read_int(bs, 3);",
          "",
          "[Added Lines]",
          "8749:  strmtyp = gf_bs_read_int_log(bs, 2, \"strmtyp\");",
          "8750:  substreamid = gf_bs_read_int_log(bs, 3, \"substreamid\");",
          "",
          "---------------",
          "--- Hunk 158 ---",
          "[Context before]",
          "8672:   return GF_TRUE;",
          "8673:  }",
          "8676:  framesize += 2 * (1 + frmsiz);",
          "8678:  if (fscod == 0x3) {",
          "8680:   numblkscod += 6;",
          "8681:  }",
          "8682:  else {",
          "8684:  }",
          "8685:  assert(numblkscod <= 9);",
          "",
          "[Removed Lines]",
          "8675:  frmsiz = gf_bs_read_int(bs, 11);",
          "8677:  fscod = gf_bs_read_int(bs, 2);",
          "8679:   fscod = gf_bs_read_int(bs, 2);",
          "8683:   numblkscod += gf_bs_read_int(bs, 2);",
          "",
          "[Added Lines]",
          "8758:  frmsiz = gf_bs_read_int_log(bs, 11, \"frmsiz\");",
          "8760:  fscod = gf_bs_read_int_log(bs, 2, \"fscod\");",
          "8762:   fscod = gf_bs_read_int_log(bs, 2, \"fscod2\");",
          "8766:   numblkscod += gf_bs_read_int_log(bs, 2, \"numblkscod\");",
          "",
          "---------------",
          "--- Hunk 159 ---",
          "[Context before]",
          "8716:   return GF_FALSE;",
          "8717:  }",
          "8722:  if (!substreamid && (bsid != 16/*E-AC3*/))",
          "8723:   return GF_FALSE;",
          "8727:  }",
          "8728:  if (ac3_mod==0) {",
          "8732:   }",
          "8733:  }",
          "8734:  chanmap = 0;",
          "8735:  if (strmtyp==0x1) {",
          "8738:   }",
          "8739:  }",
          "",
          "[Removed Lines]",
          "8719:  ac3_mod = gf_bs_read_int(bs, 3);",
          "8720:  lfon = gf_bs_read_int(bs, 1);",
          "8721:  bsid = gf_bs_read_int(bs, 5);",
          "8725:  if (/*compre=*/gf_bs_read_int(bs, 1)) {",
          "8730:   if (/*compr2e=*/gf_bs_read_int(bs, 1)) {",
          "8736:   if (/*chanmape=*/gf_bs_read_int(bs, 1)) {",
          "8737:    chanmap = gf_bs_read_int(bs, 16);",
          "",
          "[Added Lines]",
          "8802:  ac3_mod = gf_bs_read_int_log(bs, 3, \"ac3_mod\");",
          "8803:  lfon = gf_bs_read_int_log(bs, 1, \"lfon\");",
          "8804:  bsid = gf_bs_read_int_log(bs, 5, \"bsid\");",
          "8807:  gf_bs_read_int_log(bs, 5, \"dialnorm\");",
          "8808:  if (gf_bs_read_int_log(bs, 1, \"compre\")) {",
          "8809:   gf_bs_read_int_log(bs, 8, \"compr\");",
          "8812:   gf_bs_read_int_log(bs, 5, \"dialnorm2\");",
          "8813:   if (gf_bs_read_int_log(bs, 1, \"compr2e\")) {",
          "8814:    gf_bs_read_int_log(bs, 8, \"compr2\");",
          "8819:   if (gf_bs_read_int_log(bs, 1, \"chanmape\")) {",
          "8820:    chanmap = gf_bs_read_int_log(bs, 16, \"chanmap\");",
          "",
          "---------------",
          "--- Hunk 160 ---",
          "[Context before]",
          "9199: static Bool vvc_parse_nal_header(GF_BitStream *bs, u8 *nal_unit_type, u8 *temporal_id, u8 *layer_id)",
          "9200: {",
          "9201:  u32 val;",
          "9203:  if (val) return GF_FALSE;",
          "9205:  if (val) return GF_FALSE;",
          "9208:  if (layer_id) *layer_id = val;",
          "9211:  if (nal_unit_type) *nal_unit_type = val;",
          "9214:  if (!val) return GF_FALSE;",
          "9215:  val -= 1;",
          "9216:  if (temporal_id) *temporal_id = val;",
          "9217:  return GF_TRUE;",
          "9218: }",
          "9221: {",
          "9222:  u32 i;",
          "9223:  if (ptl->pt_present) {",
          "9226:  }",
          "9231:  if (ptl->pt_present) {",
          "9234:   if (ptl->gci_present) {",
          "9235:    u8 res;",
          "9236:    ptl->gci[0] = 0x80;",
          "",
          "[Removed Lines]",
          "9202:  val = gf_bs_read_int(bs, 1);",
          "9204:  val = gf_bs_read_int(bs, 1);",
          "9207:  val = gf_bs_read_int(bs, 6);",
          "9210:  val = gf_bs_read_int(bs, 5);",
          "9213:  val = gf_bs_read_int(bs, 3);",
          "9220: static void vvc_profile_tier_level(GF_BitStream *bs, VVC_ProfileTierLevel *ptl)",
          "9224:   ptl->general_profile_idc = gf_bs_read_int(bs, 7);",
          "9225:   ptl->general_tier_flag = gf_bs_read_int(bs, 1);",
          "9227:  ptl->general_level_idc = gf_bs_read_int(bs, 8);",
          "9228:  ptl->frame_only_constraint = gf_bs_read_int(bs, 1);",
          "9229:  ptl->multilayer_enabled = gf_bs_read_int(bs, 1);",
          "9233:   ptl->gci_present = gf_bs_read_int(bs, 1);",
          "",
          "[Added Lines]",
          "9285:  val = gf_bs_read_int_log(bs, 1, \"forbidden_zero\");",
          "9287:  val = gf_bs_read_int_log(bs, 1, \"resevred0\");",
          "9290:  val = gf_bs_read_int_log(bs, 6, \"layerID\");",
          "9293:  val = gf_bs_read_int_log(bs, 5, \"nuh_type\");",
          "9296:  val = gf_bs_read_int_log(bs, 3, \"temporalID\");",
          "9303: static void vvc_profile_tier_level(GF_BitStream *bs, VVC_ProfileTierLevel *ptl, u32 idx)",
          "9307:   ptl->general_profile_idc = gf_bs_read_int_log_idx(bs, 7, \"general_profile_idc\", idx);",
          "9308:   ptl->general_tier_flag = gf_bs_read_int_log_idx(bs, 1, \"general_tier_flag\", idx);",
          "9310:  ptl->general_level_idc = gf_bs_read_int_log_idx(bs, 8, \"general_level_idc\", idx);",
          "9311:  ptl->frame_only_constraint = gf_bs_read_int_log_idx(bs, 1, \"frame_only_constraint\", idx);",
          "9312:  ptl->multilayer_enabled = gf_bs_read_int_log_idx(bs, 1, \"multilayer_enabled\", idx);",
          "9316:   ptl->gci_present = gf_bs_read_int_log_idx(bs, 1, \"gci_present\", idx);",
          "",
          "---------------",
          "--- Hunk 161 ---",
          "[Context before]",
          "9246:   }",
          "9247:  }",
          "9248:  for (i=ptl->ptl_max_tid; i>0; i--) {",
          "9250:  }",
          "9251:  gf_bs_align(bs);",
          "9252:  for (i=ptl->ptl_max_tid; i>0; i--) {",
          "9253:   if (ptl->sub_ptl[i-1].level_present_flag)",
          "9255:  }",
          "9256:  if (ptl->pt_present) {",
          "9258:   for (i=0; i<ptl->num_sub_profiles; i++) {",
          "9260:   }",
          "9261:  }",
          "9262: }",
          "",
          "[Removed Lines]",
          "9249:   ptl->sub_ptl[i-1].level_present_flag = gf_bs_read_int(bs, 1);",
          "9254:    ptl->sub_ptl[i-1].sublayer_level_idc = gf_bs_read_u8(bs);",
          "9257:   ptl->num_sub_profiles = gf_bs_read_u8(bs);",
          "9259:    ptl->sub_profile_idc[i] = gf_bs_read_u32(bs);",
          "",
          "[Added Lines]",
          "9332:   ptl->sub_ptl[i-1].level_present_flag = gf_bs_read_int_log_idx2(bs, 1, \"level_present_flag\", idx, i);",
          "9337:    ptl->sub_ptl[i-1].sublayer_level_idc = gf_bs_read_int_log_idx2(bs, 8, \"sublayer_level_idc\", idx, i);",
          "9340:   ptl->num_sub_profiles = gf_bs_read_int_log_idx(bs, 8, \"num_sub_profiles\", idx);",
          "9342:    ptl->sub_profile_idc[i] = gf_bs_read_int_log_idx2(bs, 32, \"sub_profile_idc\", idx, i);",
          "",
          "---------------",
          "--- Hunk 162 ---",
          "[Context before]",
          "9269:  Bool vps_default_ptl_dpb_hrd_max_tid_flag=0;",
          "9273:  if (vps_id >= 16) return -1;",
          "9274:  if (!vps_id) {",
          "9275:   GF_LOG(GF_LOG_ERROR, GF_LOG_CODING, (\"[VVC] VPS ID 0 is forbidden\\n\"));",
          "",
          "[Removed Lines]",
          "9272:  vps_id = gf_bs_read_int(bs, 4);",
          "",
          "[Added Lines]",
          "9355:  vps_id = gf_bs_read_int_log(bs, 4, \"vps_id\");",
          "",
          "---------------",
          "--- Hunk 163 ---",
          "[Context before]",
          "9280:   vps->id = vps_id;",
          "9281:   vps->state = 1;",
          "9282:  }",
          "9284:  if (vps->max_layers > MAX_LHVC_LAYERS) {",
          "9285:   GF_LOG(GF_LOG_ERROR, GF_LOG_CODING, (\"[VVC] sorry, %d layers in VPS but only %d supported\\n\", vps->max_layers, MAX_LHVC_LAYERS));",
          "9286:   return -1;",
          "9287:  }",
          "9290:  if ((vps->max_layers>1) && (vps->max_sub_layers>1))",
          "9293:  if (vps->max_layers>1)",
          "9296:  for (i=0; i<vps->max_layers; i++) {",
          "9298:   if (layer_id>vps->max_layer_id) vps->max_layer_id = layer_id;",
          "9299:   if (i && !vps->all_layers_independent) {",
          "9301:    if (!layer_indep) {",
          "9303:     for (j=0; j<i; j++) {",
          "9305:      if (vps_max_tid_ref_present_flag && vps_direct_ref_layer_flag) {",
          "9307:      }",
          "9308:     }",
          "9309:    }",
          "",
          "[Removed Lines]",
          "9283:  vps->max_layers = 1 + gf_bs_read_int(bs, 6);",
          "9288:  vps->max_sub_layers = gf_bs_read_int(bs, 3) + 1;",
          "9291:   vps_default_ptl_dpb_hrd_max_tid_flag = gf_bs_read_int(bs, 1);",
          "9294:   vps->all_layers_independent = gf_bs_read_int(bs, 1);",
          "9297:   u32 layer_id = gf_bs_read_int(bs, 6);",
          "9300:    Bool layer_indep = gf_bs_read_int(bs, 1);",
          "9302:     Bool vps_max_tid_ref_present_flag = gf_bs_read_int(bs, 1);",
          "9304:      Bool vps_direct_ref_layer_flag = gf_bs_read_int(bs, 1);",
          "",
          "[Added Lines]",
          "9366:  vps->max_layers = 1 + gf_bs_read_int_log(bs, 6, \"max_layers\");",
          "9371:  vps->max_sub_layers = gf_bs_read_int_log(bs, 3, \"max_sub_layers_minus1\") + 1;",
          "9374:   vps_default_ptl_dpb_hrd_max_tid_flag = gf_bs_read_int_log(bs, 1, \"vps_default_ptl_dpb_hrd_max_tid_flag\");",
          "9377:   vps->all_layers_independent = gf_bs_read_int_log(bs, 1, \"all_layers_independent\");",
          "9380:   u32 layer_id = gf_bs_read_int_log_idx(bs, 6, \"layer_id\", i);",
          "9383:    Bool layer_indep = gf_bs_read_int_log_idx(bs, 1, \"layer_independent\", i);",
          "9385:     Bool vps_max_tid_ref_present_flag = gf_bs_read_int_log_idx(bs, 1, \"vps_max_tid_ref_present_flag\", i);",
          "9387:      Bool vps_direct_ref_layer_flag = gf_bs_read_int_log_idx2(bs, 1, \"vps_direct_ref_layer_flag\", i, j);",
          "9389:       gf_bs_read_int_log_idx2(bs, 3, \"vps_max_tid_il_ref_pics_plus1\", i, j);",
          "",
          "---------------",
          "--- Hunk 164 ---",
          "[Context before]",
          "9312:  vps->num_ptl = 1;",
          "9313:  if (vps->max_layers > 1) {",
          "9314:   if (vps->all_layers_independent) {",
          "9316:   }",
          "9317:   if (!vps->each_layer_is_ols) {",
          "9318:    u32 vps_ols_mode_idc = 2;",
          "9319:    if (!vps->all_layers_independent) {",
          "9321:    }",
          "9322:    if (vps_ols_mode_idc==2) {",
          "9324:     for (i=0; i<vps_num_output_layer_sets; i++) {",
          "9325:      for (j=0; j<vps->max_layers; j++) {",
          "9327:      }",
          "9328:     }",
          "9329:    }",
          "9330:   }",
          "9332:  }",
          "9333:  vps->ptl[0].pt_present = 1;",
          "9334:  for (i=0; i<vps->num_ptl; i++) {",
          "9335:   if (i)",
          "9337:   if (!vps_default_ptl_dpb_hrd_max_tid_flag)",
          "9339:   else",
          "9340:    vps->ptl[i].ptl_max_tid = vps->max_sub_layers - 1;;",
          "9341:  }",
          "",
          "[Removed Lines]",
          "9315:    vps->each_layer_is_ols = gf_bs_read_int(bs, 1);",
          "9320:     vps_ols_mode_idc = gf_bs_read_int(bs, 2);",
          "9323:     u8 vps_num_output_layer_sets = 2 + gf_bs_read_int(bs, 8);",
          "9326:       gf_bs_read_int(bs, 1);",
          "9331:   vps->num_ptl = 1 + gf_bs_read_int(bs, 8);",
          "9336:    vps->ptl[i].pt_present = gf_bs_read_int(bs, 1);",
          "9338:    vps->ptl[i].ptl_max_tid = gf_bs_read_int(bs, 3);",
          "",
          "[Added Lines]",
          "9398:    vps->each_layer_is_ols = gf_bs_read_int_log(bs, 1, \"each_layer_is_ols\");",
          "9403:     vps_ols_mode_idc = gf_bs_read_int_log(bs, 2, \"vps_ols_mode_idc\");",
          "9406:     u8 vps_num_output_layer_sets = 2 + gf_bs_read_int_log(bs, 8, \"vps_num_output_layer_sets_minus2\");",
          "9409:       gf_bs_read_int_log_idx2(bs, 1, \"vps_ols_output_layer_flag\", i, j);",
          "9414:   vps->num_ptl = 1 + gf_bs_read_int_log(bs, 8, \"num_ptl_minus1\");",
          "9419:    vps->ptl[i].pt_present = gf_bs_read_int_log_idx(bs, 1, \"pt_present\", i);",
          "9421:    vps->ptl[i].ptl_max_tid = gf_bs_read_int_log_idx(bs, 3, \"ptl_max_tid\", i);",
          "",
          "---------------",
          "--- Hunk 165 ---",
          "[Context before]",
          "9343:  gf_bs_align(bs);",
          "9345:  for (i=0; i<vps->num_ptl; i++) {",
          "9347:  }",
          "",
          "[Removed Lines]",
          "9346:   vvc_profile_tier_level(bs, &vps->ptl[i]);",
          "",
          "[Added Lines]",
          "9429:   vvc_profile_tier_level(bs, &vps->ptl[i], i);",
          "",
          "---------------",
          "--- Hunk 166 ---",
          "[Context before]",
          "9361:  if (vui_flag_pos) *vui_flag_pos = 0;",
          "9364:  if (sps_id >= 16) {",
          "9365:   return -1;",
          "9366:  }",
          "9368:  if (vps_id >= 16) {",
          "9369:   return -1;",
          "9370:  }",
          "",
          "[Removed Lines]",
          "9363:  sps_id = gf_bs_read_int(bs, 4);",
          "9367:  vps_id = gf_bs_read_int(bs, 4);",
          "",
          "[Added Lines]",
          "9446:  sps_id = gf_bs_read_int_log(bs, 4, \"sps_id\");",
          "9450:  vps_id = gf_bs_read_int_log(bs, 4, \"vps_id\");",
          "",
          "---------------",
          "--- Hunk 167 ---",
          "[Context before]",
          "9381:   sps->id = sps_id;",
          "9382:   sps->vps_id = vps_id;",
          "9383:  }",
          "9387:  CtbSizeY = 1<<sps->log2_ctu_size;",
          "9390:  if (sps_ptl_dpb_hrd_params_present_flag) {",
          "9391:   VVC_ProfileTierLevel ptl, *p_ptl;",
          "9392:   if (sps->vps_id) {",
          "",
          "[Removed Lines]",
          "9384:  sps->max_sublayers = 1 + gf_bs_read_int(bs, 3);",
          "9385:  sps->chroma_format_idc = gf_bs_read_int(bs, 2);",
          "9386:  sps->log2_ctu_size = 5 + gf_bs_read_int(bs, 2);",
          "9389:  sps_ptl_dpb_hrd_params_present_flag = gf_bs_read_int(bs, 1);",
          "",
          "[Added Lines]",
          "9467:  sps->max_sublayers = 1 + gf_bs_read_int_log(bs, 3, \"max_sublayers_minus1\");",
          "9468:  sps->chroma_format_idc = gf_bs_read_int_log(bs, 2, \"chroma_format_idc\");",
          "9469:  sps->log2_ctu_size = 5 + gf_bs_read_int_log(bs, 2, \"log2_ctu_size_minus5\");",
          "9472:  sps_ptl_dpb_hrd_params_present_flag = gf_bs_read_int_log(bs, 1, \"sps_ptl_dpb_hrd_params_present_flag\");",
          "",
          "---------------",
          "--- Hunk 168 ---",
          "[Context before]",
          "9397:   memset(p_ptl, 0, sizeof(VVC_ProfileTierLevel));",
          "9398:   p_ptl->pt_present = 1;",
          "9399:   p_ptl->ptl_max_tid = sps->max_sublayers;",
          "9401:  }",
          "9404:  if (sps->ref_pic_resampling)",
          "9409:  if (sps->conf_window) {",
          "9414:  }",
          "9416:  if (sps->subpic_info_present) {",
          "9418:   if (sps->nb_subpics>1) {",
          "9419:    u32 tmpWidthVal, tmpHeightVal;",
          "9423:    tmpWidthVal = (sps->width + CtbSizeY-1) / CtbSizeY;",
          "9424:    tmpWidthVal = gf_get_bit_size(tmpWidthVal);",
          "",
          "[Removed Lines]",
          "9400:   vvc_profile_tier_level(bs, p_ptl);",
          "9402:  sps->gdr_enabled = gf_bs_read_int(bs, 1);",
          "9403:  sps->ref_pic_resampling = gf_bs_read_int(bs, 1);",
          "9405:   sps->res_change_in_clvs = gf_bs_read_int(bs, 1);",
          "9406:  sps->width = gf_bs_get_ue(bs);",
          "9407:  sps->height = gf_bs_get_ue(bs);",
          "9408:  sps->conf_window = gf_bs_read_int(bs, 1);",
          "9410:   sps->cw_left = gf_bs_get_ue(bs);",
          "9411:   sps->cw_right = gf_bs_get_ue(bs);",
          "9412:   sps->cw_top = gf_bs_get_ue(bs);",
          "9413:   sps->cw_bottom = gf_bs_get_ue(bs);",
          "9415:  sps->subpic_info_present = gf_bs_read_int(bs, 1);",
          "9417:   sps->nb_subpics = 1 + gf_bs_get_ue(bs);",
          "9420:    sps->independent_subpic_flags = gf_bs_read_int(bs, 1);",
          "9421:    sps->subpic_same_size = gf_bs_read_int(bs, 1);",
          "",
          "[Added Lines]",
          "9483:   vvc_profile_tier_level(bs, p_ptl, 0);",
          "9485:  sps->gdr_enabled = gf_bs_read_int_log(bs, 1, \"gdr_enabled\");",
          "9486:  sps->ref_pic_resampling = gf_bs_read_int_log(bs, 1, \"ref_pic_resampling\");",
          "9488:   sps->res_change_in_clvs = gf_bs_read_int_log(bs, 1, \"res_change_in_clvs\");",
          "9489:  sps->width = gf_bs_read_ue_log(bs, \"width\");",
          "9490:  sps->height = gf_bs_read_ue_log(bs, \"height\");",
          "9491:  sps->conf_window = gf_bs_read_int_log(bs, 1, \"conformance_window_present_flag\");",
          "9493:   sps->cw_left = gf_bs_read_ue_log(bs, \"conformance_window_left\");",
          "9494:   sps->cw_right = gf_bs_read_ue_log(bs, \"conformance_window_right\");",
          "9495:   sps->cw_top = gf_bs_read_ue_log(bs, \"conformance_window_top\");",
          "9496:   sps->cw_bottom = gf_bs_read_ue_log(bs, \"conformance_window_bottom\");",
          "9498:  sps->subpic_info_present = gf_bs_read_int_log(bs, 1, \"subpic_info_present\");",
          "9500:   sps->nb_subpics = 1 + gf_bs_read_ue_log(bs, \"nb_subpics_minus1\");",
          "9503:    sps->independent_subpic_flags = gf_bs_read_int_log(bs, 1, \"independent_subpic_flags\");",
          "9504:    sps->subpic_same_size = gf_bs_read_int_log(bs, 1, \"subpic_same_size\");",
          "",
          "---------------",
          "--- Hunk 169 ---",
          "[Context before]",
          "9428:    for (i=0; i<sps->nb_subpics; i++) {",
          "9429:     if( !sps->subpic_same_size || !i) {",
          "9434:     }",
          "9435:     if (!sps->independent_subpic_flags) {",
          "9438:     }",
          "9439:    }",
          "9442:    if (sps->subpicid_mapping_explicit) {",
          "9444:     if (sps->subpicid_mapping_present) {",
          "9445:      for (i=0; i<sps->nb_subpics; i++) {",
          "9447:      }",
          "9448:     }",
          "9449:    }",
          "9450:   }",
          "9451:  }",
          "9460:  for (i=0; i<sps_num_extra_ph_bits; i++) {",
          "9462:    sps->ph_num_extra_bits++;",
          "9463:  }",
          "9465:  for (i=0; i<sps_num_extra_sh_bits; i++) {",
          "9467:    sps->sh_num_extra_bits++;",
          "9468:  }",
          "",
          "[Removed Lines]",
          "9430:      if (i && (sps->width > CtbSizeY)) gf_bs_read_int(bs, tmpWidthVal);",
          "9431:      if (i && (sps->height > CtbSizeY)) gf_bs_read_int(bs, tmpHeightVal);",
          "9432:      if ((i+1 < sps->nb_subpics) && (sps->width > CtbSizeY)) gf_bs_read_int(bs, tmpWidthVal);",
          "9433:      if ((i+1 < sps->nb_subpics) && (sps->height > CtbSizeY)) gf_bs_read_int(bs, tmpHeightVal);",
          "9436:      gf_bs_read_int(bs, 1);",
          "9437:      gf_bs_read_int(bs, 1);",
          "9440:    sps->subpicid_len = gf_bs_get_ue(bs) + 1;",
          "9441:    sps->subpicid_mapping_explicit = gf_bs_read_int(bs, 1);",
          "9443:     sps->subpicid_mapping_present = gf_bs_read_int(bs, 1);",
          "9446:       gf_bs_get_ue(bs);",
          "9452:  sps->bitdepth = gf_bs_get_ue(bs) + 8;",
          "9455:  sps->log2_max_poc_lsb = 4 + gf_bs_read_int(bs, 4);",
          "9456:  if ((sps->poc_msb_cycle_flag = gf_bs_read_int(bs, 1)))",
          "9457:   sps->poc_msb_cycle_len = 1 + gf_bs_get_ue(bs);",
          "9459:  u8 sps_num_extra_ph_bits = 8 * gf_bs_read_int(bs, 2);",
          "9461:   if (gf_bs_read_int(bs, 1))",
          "9464:  u8 sps_num_extra_sh_bits = 8 * gf_bs_read_int(bs, 2);",
          "9466:   if (gf_bs_read_int(bs, 1))",
          "",
          "[Added Lines]",
          "9513:      if (i && (sps->width > CtbSizeY))",
          "9514:       gf_bs_read_int_log(bs, tmpWidthVal, \"subpic_ctu_top_left_x\");",
          "9515:      if (i && (sps->height > CtbSizeY))",
          "9516:       gf_bs_read_int_log(bs, tmpHeightVal, \"subpic_ctu_top_left_y\");",
          "9517:      if ((i+1 < sps->nb_subpics) && (sps->width > CtbSizeY))",
          "9518:       gf_bs_read_int_log(bs, tmpWidthVal, \"subpic_width_minus1\");",
          "9519:      if ((i+1 < sps->nb_subpics) && (sps->height > CtbSizeY))",
          "9520:       gf_bs_read_int_log(bs, tmpHeightVal, \"subpic_height_minus1\");",
          "9523:      gf_bs_read_int_log(bs, 1, \"subpic_treated_as_pic_flag\");",
          "9524:      gf_bs_read_int_log(bs, 1, \"loop_filter_across_subpic_enabled_flag\");",
          "9527:    sps->subpicid_len = gf_bs_read_ue_log(bs, \"subpic_id_len_minus1\") + 1;",
          "9528:    sps->subpicid_mapping_explicit = gf_bs_read_int_log(bs, 1, \"subpic_id_mapping_explicitly_signalled_flag\");",
          "9530:     sps->subpicid_mapping_present = gf_bs_read_int_log(bs, 1, \"subpic_id_mapping_present_flag\");",
          "9533:       gf_bs_read_ue_log(bs, \"subpic_id\");",
          "9539:  sps->bitdepth = gf_bs_read_ue_log(bs, \"bitdepth_minus8\") + 8;",
          "9540:  gf_bs_read_int_log(bs, 1, \"entropy_coding_sync_enabled_flag\");",
          "9541:  gf_bs_read_int_log(bs, 1, \"entry_point_offsets_present_flag\");",
          "9542:  sps->log2_max_poc_lsb = 4 + gf_bs_read_int_log(bs, 4, \"log2_max_poc_lsb_minus4\");",
          "9543:  if ((sps->poc_msb_cycle_flag = gf_bs_read_int_log(bs, 1, \"poc_msb_cycle_flag\")))",
          "9544:   sps->poc_msb_cycle_len = 1 + gf_bs_read_ue_log(bs, \"poc_msb_cycle_len_minus1\");",
          "9546:  u8 sps_num_extra_ph_bits = 8 * gf_bs_read_int_log(bs, 2, \"sps_num_extra_ph_bytes\");",
          "9548:   if (gf_bs_read_int_log_idx(bs, 1, \"extra_ph_bit_present_flag\", 1))",
          "9551:  u8 sps_num_extra_sh_bits = 8 * gf_bs_read_int_log(bs, 2, \"num_extra_sh_bytes\");",
          "9553:   if (gf_bs_read_int_log_idx(bs, 1, \"extra_sh_bit_present_flag\", i))",
          "",
          "---------------",
          "--- Hunk 170 ---",
          "[Context before]",
          "9479:  VVC_PPS *pps;",
          "9484:  if ((pps_id < 0) || (pps_id >= 64)) {",
          "9485:   GF_LOG(GF_LOG_ERROR, GF_LOG_CODING, (\"[VVC] wrong PPS ID %d in PPS\\n\", pps_id));",
          "",
          "[Removed Lines]",
          "9482:  pps_id = gf_bs_read_int(bs, 6);",
          "",
          "[Added Lines]",
          "9569:  pps_id = gf_bs_read_int_log(bs, 6, \"pps_id\");",
          "",
          "---------------",
          "--- Hunk 171 ---",
          "[Context before]",
          "9491:   pps->id = pps_id;",
          "9492:   pps->state = 1;",
          "9493:  }",
          "9495:  if (pps->sps_id >= 16) {",
          "9496:   GF_LOG(GF_LOG_ERROR, GF_LOG_CODING, (\"[VVC] wrong SPS ID %d in PPS\\n\", pps->sps_id));",
          "9497:   pps->sps_id=0;",
          "9498:   return -1;",
          "9499:  }",
          "9505:  if (pps->conf_window) {",
          "9510:  }",
          "9521:  if (pps->subpic_id_mapping_present_flag) {",
          "9522:   u32 pps_subpic_id_len, pps_num_subpics=0;",
          "9523:   if (!pps->no_pic_partition_flag) {",
          "9525:   }",
          "9527:   for (i=0; i<pps_num_subpics; i++) {",
          "9529:   }",
          "9530:  }",
          "9531:  if (!pps->no_pic_partition_flag) {",
          "9535:   for (i=0; i<num_exp_tile_columns; i++)",
          "9537:   for (i=0; i<num_exp_tile_rows; i++)",
          "9540:   return pps_id;",
          "9541:  }",
          "",
          "[Removed Lines]",
          "9494:  pps->sps_id = gf_bs_read_int(bs, 4);",
          "9501:  pps->mixed_nal_types = gf_bs_read_int(bs, 1);",
          "9502:  pps->width = gf_bs_get_ue(bs);",
          "9503:  pps->height = gf_bs_get_ue(bs);",
          "9504:  pps->conf_window = gf_bs_read_int(bs, 1);",
          "9506:   pps->cw_left = gf_bs_get_ue(bs);",
          "9507:   pps->cw_right = gf_bs_get_ue(bs);",
          "9508:   pps->cw_top = gf_bs_get_ue(bs);",
          "9509:   pps->cw_bottom = gf_bs_get_ue(bs);",
          "9512:  if (gf_bs_read_int(bs, 1)) {",
          "9513:   gf_bs_get_se(bs);",
          "9514:   gf_bs_get_se(bs);",
          "9515:   gf_bs_get_se(bs);",
          "9516:   gf_bs_get_se(bs);",
          "9517:  }",
          "9518:  pps->output_flag_present_flag = gf_bs_read_int(bs, 1);",
          "9519:  pps->no_pic_partition_flag = gf_bs_read_int(bs, 1);",
          "9520:  pps->subpic_id_mapping_present_flag = gf_bs_read_int(bs, 1);",
          "9524:    pps_num_subpics = 1+gf_bs_get_ue(bs);",
          "9526:   pps_subpic_id_len = 1 + gf_bs_get_ue(bs);",
          "9528:    gf_bs_read_int(bs, pps_subpic_id_len);",
          "9533:   u32 num_exp_tile_columns = 1 + gf_bs_get_ue(bs);",
          "9534:   u32 num_exp_tile_rows = 1 + gf_bs_get_ue(bs);",
          "9536:    gf_bs_get_ue(bs);",
          "9538:    gf_bs_get_ue(bs);",
          "",
          "[Added Lines]",
          "9581:  pps->sps_id = gf_bs_read_int_log(bs, 4, \"sps_id\");",
          "9588:  pps->mixed_nal_types = gf_bs_read_int_log(bs, 1, \"mixed_nal_types\");",
          "9589:  pps->width = gf_bs_read_ue_log(bs, \"width\");",
          "9590:  pps->height = gf_bs_read_ue_log(bs, \"height\");",
          "9591:  pps->conf_window = gf_bs_read_int_log(bs, 1, \"conformance_window_flag\");",
          "9593:   pps->cw_left = gf_bs_read_ue_log(bs, \"conf_win_left_offset\");",
          "9594:   pps->cw_right = gf_bs_read_ue_log(bs, \"conf_win_right_offset\");",
          "9595:   pps->cw_top = gf_bs_read_ue_log(bs, \"conf_win_top_offset\");",
          "9596:   pps->cw_bottom = gf_bs_read_ue_log(bs, \"conf_win_bottom_offset\");",
          "9599:  if (gf_bs_read_int_log(bs, 1, \"scaling_window_explicit_signalling_flag\")) {",
          "9600:   gf_bs_read_se_log(bs, \"scaling_win_left_offset\");",
          "9601:   gf_bs_read_se_log(bs, \"scaling_win_right_offset\");",
          "9602:   gf_bs_read_se_log(bs, \"scaling_win_top_offset\");",
          "9603:   gf_bs_read_se_log(bs, \"scaling_win_bottom_offset\");",
          "9604:  }",
          "9605:  pps->output_flag_present_flag = gf_bs_read_int_log(bs, 1, \"output_flag_present_flag\");",
          "9606:  pps->no_pic_partition_flag = gf_bs_read_int_log(bs, 1, \"no_pic_partition_flag\");",
          "9607:  pps->subpic_id_mapping_present_flag = gf_bs_read_int_log(bs, 1, \"subpic_id_mapping_present_flag\");",
          "9611:    pps_num_subpics = 1+gf_bs_read_ue_log(bs, \"pps_num_subpics_minus1\");",
          "9613:   pps_subpic_id_len = 1 + gf_bs_read_ue(bs);",
          "9615:    gf_bs_read_int_log_idx(bs, pps_subpic_id_len, \"subpic_id\", i);",
          "9619:   gf_bs_read_int_log(bs, 2, \"pps_log2_ctu_size_minus5\");",
          "9620:   u32 num_exp_tile_columns = 1 + gf_bs_read_ue_log(bs, \"num_exp_tile_columns_minus1\");",
          "9621:   u32 num_exp_tile_rows = 1 + gf_bs_read_ue_log(bs, \"num_exp_tile_rows_minus1\");",
          "9623:    gf_bs_read_ue_log_idx(bs, \"tile_column_width_minus1\", i);",
          "9625:    gf_bs_read_ue_log_idx(bs, \"tile_row_height_minus1\", i);",
          "",
          "---------------",
          "--- Hunk 172 ---",
          "[Context before]",
          "9551: {",
          "9552:  u32 pps_id;",
          "9556:  if (si->irap_or_gdr_pic)",
          "9562:  if (pps_id >= 64)",
          "9563:   return -1;",
          "9564:  si->pps = &vvc->pps[pps_id];",
          "9565:  si->sps = &vvc->sps[si->pps->sps_id];",
          "9568:  si->recovery_point_valid = 0;",
          "9569:  si->gdr_recovery_count = 0;",
          "9570:  if (si->gdr_pic) {",
          "9571:   si->recovery_point_valid = 1;",
          "9573:  }",
          "9576:  if (si->sps->poc_msb_cycle_flag) {",
          "9579:   }",
          "9580:  }",
          "",
          "[Removed Lines]",
          "9554:  si->irap_or_gdr_pic = gf_bs_read_int(bs, 1);",
          "9555:  si->non_ref_pic = gf_bs_read_int(bs, 1);",
          "9557:   si->gdr_pic = gf_bs_read_int(bs, 1);",
          "9558:  if ((si->inter_slice_allowed_flag = gf_bs_read_int(bs, 1)))",
          "9559:   si->intra_slice_allowed_flag = gf_bs_read_int(bs, 1);",
          "9561:  pps_id = gf_bs_get_ue(bs);",
          "9566:  si->poc_lsb = gf_bs_read_int(bs, si->sps->log2_max_poc_lsb);",
          "9572:   si->gdr_recovery_count = gf_bs_get_ue(bs);",
          "9574:  gf_bs_read_int(bs, si->sps->ph_num_extra_bits);",
          "9577:   if ( (si->poc_msb_cycle_present_flag = gf_bs_read_int(bs, 1))) {",
          "9578:    si->poc_msb_cycle = gf_bs_read_int(bs, si->sps->poc_msb_cycle_len);",
          "",
          "[Added Lines]",
          "9642:  si->irap_or_gdr_pic = gf_bs_read_int_log(bs, 1, \"irap_or_gdr_pic\");",
          "9643:  si->non_ref_pic = gf_bs_read_int_log(bs, 1, \"non_ref_pic\");",
          "9645:   si->gdr_pic = gf_bs_read_int_log(bs, 1, \"gdr_pic\");",
          "9646:  if ((si->inter_slice_allowed_flag = gf_bs_read_int_log(bs, 1, \"inter_slice_allowed_flag\")))",
          "9647:   si->intra_slice_allowed_flag = gf_bs_read_int_log(bs, 1, \"intra_slice_allowed_flag\");",
          "9649:  pps_id = gf_bs_read_ue_log(bs, \"pps_id\");",
          "9654:  si->poc_lsb = gf_bs_read_int_log(bs, si->sps->log2_max_poc_lsb, \"poc_lsb\");",
          "9660:   si->gdr_recovery_count = gf_bs_read_ue_log(bs, \"gdr_recovery_count\");",
          "9662:  gf_bs_read_int_log(bs, si->sps->ph_num_extra_bits, \"ph_extra_bits\");",
          "9665:   if ( (si->poc_msb_cycle_present_flag = gf_bs_read_int_log(bs, 1, \"poc_msb_cycle_present_flag\"))) {",
          "9666:    si->poc_msb_cycle = gf_bs_read_int_log(bs, si->sps->poc_msb_cycle_len, \"poc_msb_cycle\");",
          "",
          "---------------",
          "--- Hunk 173 ---",
          "[Context before]",
          "9586: {",
          "9590:  if (si->picture_header_in_slice_header_flag) {",
          "9591:   GF_LOG(GF_LOG_INFO, GF_LOG_CODING, (\"[VVC] Picture header in slice header incomplete support, cannot guess slice type\\n\"));",
          "9592:   return vvc_parse_picture_header(bs, vvc, si);",
          "9593:  }",
          "9594:  if (!si->sps) return -1;",
          "9595:  si->slice_type = GF_VVC_SLICE_TYPE_I;",
          "9599:  }",
          "",
          "[Removed Lines]",
          "9589:  si->picture_header_in_slice_header_flag = gf_bs_read_int(bs, 1);",
          "9596:  if (/*)sps_subpic_info_present_flag*/gf_bs_read_int(bs, 1)) {",
          "",
          "[Added Lines]",
          "9677:  si->picture_header_in_slice_header_flag = gf_bs_read_int_log(bs, 1, \"picture_header_in_slice_header_flag\");",
          "9684:  if (gf_bs_read_int_log(bs, 1, \"sps_subpic_info_present_flag\")) {",
          "9685:   gf_bs_read_int_log(bs, si->sps->subpicid_len, \"subpic_id\");",
          "",
          "---------------",
          "--- Hunk 174 ---",
          "[Context before]",
          "9602:   GF_LOG(GF_LOG_WARNING, GF_LOG_CODING, (\"[VVC] tiling parsing not supported - patch welcome\\n\"));",
          "9603:   return 0;",
          "9604:  }",
          "9607:   if( !pps_rect_slice_flag  &&  NumTilesInPic \u2212 sh_slice_address > 1 )",
          "9608:   sh_num_tiles_in_slice_minus1",
          "",
          "[Removed Lines]",
          "9605:  gf_bs_read_int(bs, si->sps->sh_num_extra_bits);",
          "",
          "[Added Lines]",
          "9693:  gf_bs_read_int_log(bs, si->sps->sh_num_extra_bits, \"num_extra_bits\");",
          "",
          "---------------",
          "--- Hunk 175 ---",
          "[Context before]",
          "9612:  if (si->inter_slice_allowed_flag )",
          "9616:  return 0;",
          "9617: }",
          "",
          "[Removed Lines]",
          "9613:   si->slice_type = gf_bs_read_int(bs, 2);",
          "",
          "[Added Lines]",
          "9701:   si->slice_type = gf_bs_read_int_log(bs, 2, \"slice_type\");",
          "",
          "---------------",
          "--- Hunk 176 ---",
          "[Context before]",
          "9718:   break;",
          "9719:  case GF_VVC_NALU_APS_PREFIX:",
          "9722:   ret = 0;",
          "9723:   break;",
          "9724:  default:",
          "",
          "[Removed Lines]",
          "9721:   vvc->last_parsed_aps_id = gf_bs_read_int(bs, 8);",
          "",
          "[Added Lines]",
          "9808:   vvc->last_parsed_aps_id = gf_bs_read_int_log(bs, 8, \"aps_id\");",
          "",
          "---------------"
        ],
        "src/utils/bitstream.c||src/utils/bitstream.c": [
          "File: src/utils/bitstream.c -> src/utils/bitstream.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "73:  u8 *cache_read;",
          "74:  u32 cache_read_size, cache_read_pos, cache_read_alloc;",
          "76: };",
          "78: GF_Err gf_bs_reassign_buffer(GF_BitStream *bs, const u8 *buffer, u64 BufferSize)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "76:  void (*on_log)(void *udta, const char *field_name, u32 nb_bits, u64 field_val, s32 idx1, s32 idx2, s32 idx3);",
          "77:  void *log_udta;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1659:  return GF_IO_ERR;",
          "1660: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1665: GF_Err gf_bs_set_logger(GF_BitStream *bs, void (*on_bs_log)(void *udta, const char *field_name, u32 nb_bits, u64 field_val, s32 idx1, s32 idx2, s32 idx3), void *udta)",
          "1666: {",
          "1667:  if (!bs) return GF_BAD_PARAM;",
          "1668:  bs->on_log = on_bs_log;",
          "1669:  bs->log_udta = udta;",
          "1670:  return GF_OK;",
          "1671: }",
          "1673: #ifndef GPAC_DISABLE_AVPARSE_LOGS",
          "1674: void gf_bs_log_idx(GF_BitStream *bs, u32 nBits, const char *fname, s64 val, s32 idx1, s32 idx2, s32 idx3)",
          "1675: {",
          "1676:  assert(bs);",
          "1677:  if (bs->on_log) bs->on_log(bs->log_udta, fname, nBits, val, idx1, idx2, idx3);",
          "1678: }",
          "1679: #endif",
          "",
          "---------------"
        ]
      }
    }
  ]
}