{
  "cve_id": "CVE-2021-39191",
  "cve_desc": "mod_auth_openidc is an authentication/authorization module for the Apache 2.x HTTP server that functions as an OpenID Connect Relying Party, authenticating users against an OpenID Connect Provider. In versions prior to 2.4.9.4, the 3rd-party init SSO functionality of mod_auth_openidc was reported to be vulnerable to an open redirect attack by supplying a crafted URL in the `target_link_uri` parameter. A patch in version 2.4.9.4 made it so that the `OIDCRedirectURLsAllowed` setting must be applied to the `target_link_uri` parameter. There are no known workarounds aside from upgrading to a patched version.",
  "repo": "zmartzone/mod_auth_openidc",
  "patch_hash": "03e6bfb446f4e3f27c003d30d6a433e5dd8e2b3d",
  "patch_info": {
    "commit_hash": "03e6bfb446f4e3f27c003d30d6a433e5dd8e2b3d",
    "repo": "zmartzone/mod_auth_openidc",
    "commit_url": "https://github.com/zmartzone/mod_auth_openidc/commit/03e6bfb446f4e3f27c003d30d6a433e5dd8e2b3d",
    "files": [
      "AUTHORS",
      "ChangeLog",
      "auth_openidc.conf",
      "configure.ac",
      "src/mod_auth_openidc.c"
    ],
    "message": "apply OIDCRedirectURLsAllowed setting to target_link_uri\n\ncloses #672; thanks @Meheni\nrelease 2.4.9.4\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
    "before_after_code_files": [
      "auth_openidc.conf||auth_openidc.conf",
      "configure.ac||configure.ac",
      "src/mod_auth_openidc.c||src/mod_auth_openidc.c"
    ]
  },
  "patch_diff": {
    "auth_openidc.conf||auth_openidc.conf": [
      "File: auth_openidc.conf -> auth_openidc.conf",
      "--- Hunk 1 ---",
      "[Context before]",
      "918: #OIDCStateInputHeaders [none|user-agent|x-forwarded-for|both]",
      "920: # Define one or more regular expressions that specify URLs (or domains) allowed for post logout and",
      "923: #   OIDCRedirectURLsAllowed ^https://www.example.com ^https://(\\w+).example.org ^https://example.net/app",
      "924: # or:",
      "925: #   OIDCRedirectURLsAllowed ^https://www.example.com/logout$ ^https://www.example.com/app/return_to$",
      "",
      "[Removed Lines]",
      "921: # other redirects such as the \"return_to\" value on refresh token requests, and the \"login_uri\" value",
      "922: # on session management based logins through the OP iframe, e.g.:",
      "",
      "[Added Lines]",
      "921: # other redirects such as the \"return_to\" value on refresh token requests, the \"login_uri\" value",
      "922: # on session management based logins through the OP iframe, and the \"target_link_uri\" parameter in",
      "923: # 3rd-party initiated logins, e.g.:",
      "",
      "---------------"
    ],
    "configure.ac||configure.ac": [
      "File: configure.ac -> configure.ac",
      "--- Hunk 1 ---",
      "[Context before]",
      "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
      "",
      "[Removed Lines]",
      "1: AC_INIT([mod_auth_openidc],[2.4.9.3],[hans.zandbelt@zmartzone.eu])",
      "",
      "[Added Lines]",
      "1: AC_INIT([mod_auth_openidc],[2.4.9.4],[hans.zandbelt@zmartzone.eu])",
      "",
      "---------------"
    ],
    "src/mod_auth_openidc.c||src/mod_auth_openidc.c": [
      "File: src/mod_auth_openidc.c -> src/mod_auth_openidc.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2457:  return TRUE;",
      "2458: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2460: #define OIDC_MAX_URL_LENGTH 8192 * 2",
      "2462: static apr_byte_t oidc_validate_redirect_url(request_rec *r, oidc_cfg *c,",
      "2463:   const char *redirect_to_url, apr_byte_t restrict_to_host, char **err_str,",
      "2464:   char **err_desc) {",
      "2465:  apr_uri_t uri;",
      "2466:  const char *c_host = NULL;",
      "2467:  apr_hash_index_t *hi = NULL;",
      "2468:  size_t i = 0;",
      "2469:  char *url = apr_pstrndup(r->pool, redirect_to_url, OIDC_MAX_URL_LENGTH);",
      "2472:  for (i = 0; i < strlen(url); i++)",
      "2473:   if (url[i] == '\\\\')",
      "2474:    url[i] = '/';",
      "2476:  if (apr_uri_parse(r->pool, url, &uri) != APR_SUCCESS) {",
      "2479:   oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
      "2480:   return FALSE;",
      "2481:  }",
      "2483:  if (c->redirect_urls_allowed != NULL) {",
      "2484:   for (hi = apr_hash_first(NULL, c->redirect_urls_allowed); hi; hi =",
      "2485:     apr_hash_next(hi)) {",
      "2486:    apr_hash_this(hi, (const void**) &c_host, NULL, NULL);",
      "2487:    if (oidc_util_regexp_first_match(r->pool, url, c_host,",
      "2488:      NULL, err_str) == TRUE)",
      "2489:     break;",
      "2490:   }",
      "2491:   if (hi == NULL) {",
      "2494:      apr_psprintf(r->pool,",
      "2495:        \"value does not match the list of allowed redirect URLs: %s\",",
      "2496:        url);",
      "2497:    oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
      "2498:    return FALSE;",
      "2499:   }",
      "2500:  } else if ((uri.hostname != NULL) && (restrict_to_host == TRUE)) {",
      "2501:   c_host = oidc_get_current_url_host(r);",
      "2502:   if ((strstr(c_host, uri.hostname) == NULL)",
      "2503:     || (strstr(uri.hostname, c_host) == NULL)) {",
      "2506:      apr_psprintf(r->pool,",
      "2507:        \"URL value \\\"%s\\\" does not match the hostname of the current request \\\"%s\\\"\",",
      "2508:        apr_uri_unparse(r->pool, &uri, 0), c_host);",
      "2509:    oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
      "2510:    return FALSE;",
      "2511:   }",
      "2512:  }",
      "2514:  if ((uri.hostname == NULL) && (strstr(url, \"/\") != url)) {",
      "2517:     apr_psprintf(r->pool,",
      "2518:       \"No hostname was parsed and it does not seem to be relative, i.e starting with '/': %s\",",
      "2519:       url);",
      "2520:   oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
      "2521:   return FALSE;",
      "2522:  } else if ((uri.hostname == NULL) && (strstr(url, \"//\") == url)) {",
      "2525:     \"No hostname was parsed and starting with '//': %s\", url);",
      "2526:   oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
      "2527:   return FALSE;",
      "2528:  } else if ((uri.hostname == NULL) && (strstr(url, \"/\\\\\") == url)) {",
      "2531:     \"No hostname was parsed and starting with '/\\\\': %s\", url);",
      "2532:   oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
      "2533:   return FALSE;",
      "2534:  }",
      "2537:  if (((strstr(url, \"\\n\") != NULL) || strstr(url, \"\\r\") != NULL)) {",
      "2540:     apr_psprintf(r->pool,",
      "2541:       \"URL value \\\"%s\\\" contains illegal \\\"\\n\\\" or \\\"\\r\\\" character(s)\",",
      "2542:       url);",
      "2543:   oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
      "2544:   return FALSE;",
      "2545:  }",
      "2547:  return TRUE;",
      "2548: }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "2469:  oidc_provider_t *provider = NULL;",
      "2471:  oidc_util_get_request_parameter(r, OIDC_DISC_OP_PARAM, &issuer);",
      "2472:  oidc_util_get_request_parameter(r, OIDC_DISC_USER_PARAM, &user);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2560:  char *error_str = NULL;",
      "2561:  char *error_description = NULL;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "2519:     HTTP_UNAUTHORIZED);",
      "2520:  }",
      "2523:  if (c->metadata_dir == NULL) {",
      "2524:   if ((oidc_provider_static_config(r, c, &provider) == TRUE)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2615:  if (oidc_validate_redirect_url(r, c, target_link_uri, TRUE, &error_str,",
      "2616:    &error_description) == FALSE) {",
      "2617:   return oidc_util_html_send_error(r, c->error_template, error_str,",
      "2618:     error_description,",
      "2619:     HTTP_UNAUTHORIZED);",
      "2620:  }",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "2947:  return rc;",
      "2948: }",
      "",
      "[Removed Lines]",
      "2950: #define OIDC_MAX_URL_LENGTH 8192 * 2",
      "2952: static apr_byte_t oidc_validate_redirect_url(request_rec *r, oidc_cfg *c,",
      "2953:   const char *redirect_to_url, apr_byte_t restrict_to_host, char **err_str,",
      "2954:   char **err_desc) {",
      "2955:  apr_uri_t uri;",
      "2956:  const char *c_host = NULL;",
      "2957:  apr_hash_index_t *hi = NULL;",
      "2958:  size_t i = 0;",
      "2959:  char *url = apr_pstrndup(r->pool, redirect_to_url, OIDC_MAX_URL_LENGTH);",
      "2962:  for (i = 0; i < strlen(url); i++)",
      "2963:   if (url[i] == '\\\\')",
      "2964:    url[i] = '/';",
      "2966:  if (apr_uri_parse(r->pool, url, &uri) != APR_SUCCESS) {",
      "2969:   oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
      "2970:   return FALSE;",
      "2971:  }",
      "2973:  if (c->redirect_urls_allowed != NULL) {",
      "2974:   for (hi = apr_hash_first(NULL, c->redirect_urls_allowed); hi; hi =",
      "2975:     apr_hash_next(hi)) {",
      "2976:    apr_hash_this(hi, (const void**) &c_host, NULL, NULL);",
      "2977:    if (oidc_util_regexp_first_match(r->pool, url, c_host,",
      "2978:      NULL, err_str) == TRUE)",
      "2979:     break;",
      "2980:   }",
      "2981:   if (hi == NULL) {",
      "2984:      apr_psprintf(r->pool,",
      "2985:        \"value does not match the list of allowed redirect URLs: %s\",",
      "2986:        url);",
      "2987:    oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
      "2988:    return FALSE;",
      "2989:   }",
      "2990:  } else if ((uri.hostname != NULL) && (restrict_to_host == TRUE)) {",
      "2991:   c_host = oidc_get_current_url_host(r);",
      "2992:   if ((strstr(c_host, uri.hostname) == NULL)",
      "2993:     || (strstr(uri.hostname, c_host) == NULL)) {",
      "2996:      apr_psprintf(r->pool,",
      "2997:        \"URL value \\\"%s\\\" does not match the hostname of the current request \\\"%s\\\"\",",
      "2998:        apr_uri_unparse(r->pool, &uri, 0), c_host);",
      "2999:    oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
      "3000:    return FALSE;",
      "3001:   }",
      "3002:  }",
      "3004:  if ((uri.hostname == NULL) && (strstr(url, \"/\") != url)) {",
      "3007:     apr_psprintf(r->pool,",
      "3008:       \"No hostname was parsed and it does not seem to be relative, i.e starting with '/': %s\",",
      "3009:       url);",
      "3010:   oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
      "3011:   return FALSE;",
      "3012:  } else if ((uri.hostname == NULL) && (strstr(url, \"//\") == url)) {",
      "3015:     \"No hostname was parsed and starting with '//': %s\", url);",
      "3016:   oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
      "3017:   return FALSE;",
      "3018:  } else if ((uri.hostname == NULL) && (strstr(url, \"/\\\\\") == url)) {",
      "3021:     \"No hostname was parsed and starting with '/\\\\': %s\", url);",
      "3022:   oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
      "3023:   return FALSE;",
      "3024:  }",
      "3027:  if (((strstr(url, \"\\n\") != NULL) || strstr(url, \"\\r\") != NULL)) {",
      "3030:     apr_psprintf(r->pool,",
      "3031:       \"URL value \\\"%s\\\" contains illegal \\\"\\n\\\" or \\\"\\r\\\" character(s)\",",
      "3032:       url);",
      "3033:   oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
      "3034:   return FALSE;",
      "3035:  }",
      "3037:  return TRUE;",
      "3038: }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "26b81f1189cf8650f85c75a1e1a750ac8c116bac",
      "candidate_info": {
        "commit_hash": "26b81f1189cf8650f85c75a1e1a750ac8c116bac",
        "repo": "zmartzone/mod_auth_openidc",
        "commit_url": "https://github.com/zmartzone/mod_auth_openidc/commit/26b81f1189cf8650f85c75a1e1a750ac8c116bac",
        "files": [
          "src/mod_auth_openidc.c"
        ],
        "message": "fix for ipv6 hosts if logout url is set",
        "before_after_code_files": [
          "src/mod_auth_openidc.c||src/mod_auth_openidc.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/mod_auth_openidc.c||src/mod_auth_openidc.c"
          ],
          "candidate": [
            "src/mod_auth_openidc.c||src/mod_auth_openidc.c"
          ]
        }
      },
      "candidate_diff": {
        "src/mod_auth_openidc.c||src/mod_auth_openidc.c": [
          "File: src/mod_auth_openidc.c -> src/mod_auth_openidc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2455:  apr_hash_index_t *hi = NULL;",
          "2456:  size_t i = 0;",
          "2457:  char *url = apr_pstrndup(r->pool, redirect_to_url, OIDC_MAX_URL_LENGTH);",
          "2460:  for (i = 0; i < strlen(url); i++)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2458:  char *url_ipv6_aware = NULL;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2487:   }",
          "2488:  } else if ((uri.hostname != NULL) && (restrict_to_host == TRUE)) {",
          "2489:   c_host = oidc_get_current_url_host(r, c->x_forwarded_headers);",
          "2494:      apr_psprintf(r->pool,",
          "",
          "[Removed Lines]",
          "2490:   if ((strstr(c_host, uri.hostname) == NULL)",
          "2491:     || (strstr(uri.hostname, c_host) == NULL)) {",
          "",
          "[Added Lines]",
          "2493:    url_ipv6_aware = apr_pstrcat(r->pool, \"[\", uri.hostname, \"]\", NULL);",
          "2494:   } else {",
          "2495:    url_ipv6_aware = uri.hostname;",
          "2496:   }",
          "2498:   if ((strstr(c_host, url_ipv6_aware) == NULL)",
          "2499:    || (strstr(url_ipv6_aware, c_host) == NULL)) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "22901c2ab4247576c8e537f8ba1ac2042022504b",
      "candidate_info": {
        "commit_hash": "22901c2ab4247576c8e537f8ba1ac2042022504b",
        "repo": "zmartzone/mod_auth_openidc",
        "commit_url": "https://github.com/zmartzone/mod_auth_openidc/commit/22901c2ab4247576c8e537f8ba1ac2042022504b",
        "files": [
          "ChangeLog",
          "configure.ac",
          "src/config.c"
        ],
        "message": "config check on OIDCCryptoPassphrase in OAuth 2.0 RS setup; closes #494\n\nrequired when cache encryption is enabled; bump to 2.4.5rc2\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "src/config.c||src/config.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac"
          ],
          "candidate": [
            "configure.ac||configure.ac"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.5rc1],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.5rc2],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------"
        ],
        "src/config.c||src/config.c": [
          "File: src/config.c -> src/config.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2299:  }",
          "2301:  return OK;",
          "2302: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2301:  if ((c->cache_encrypt == 1) && (c->crypto_passphrase == NULL))",
          "2302:   return oidc_check_config_error(s, OIDCCryptoPassphrase);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "99373b612c4074610c46b22392070d2a5b508780",
      "candidate_info": {
        "commit_hash": "99373b612c4074610c46b22392070d2a5b508780",
        "repo": "zmartzone/mod_auth_openidc",
        "commit_url": "https://github.com/zmartzone/mod_auth_openidc/commit/99373b612c4074610c46b22392070d2a5b508780",
        "files": [
          "ChangeLog",
          "auth_openidc.conf",
          "configure.ac",
          "src/config.c",
          "src/mod_auth_openidc.c",
          "src/mod_auth_openidc.h",
          "src/parse.c",
          "src/parse.h",
          "src/session.c"
        ],
        "message": "allow storing the id_token in a client-cookie based session\n\nsee #812 and #888; bump to 2.4.11.4rc1\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "auth_openidc.conf||auth_openidc.conf",
          "configure.ac||configure.ac",
          "src/config.c||src/config.c",
          "src/mod_auth_openidc.c||src/mod_auth_openidc.c",
          "src/mod_auth_openidc.h||src/mod_auth_openidc.h",
          "src/parse.c||src/parse.c",
          "src/parse.h||src/parse.h",
          "src/session.c||src/session.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "auth_openidc.conf||auth_openidc.conf",
            "configure.ac||configure.ac",
            "src/mod_auth_openidc.c||src/mod_auth_openidc.c"
          ],
          "candidate": [
            "auth_openidc.conf||auth_openidc.conf",
            "configure.ac||configure.ac",
            "src/mod_auth_openidc.c||src/mod_auth_openidc.c"
          ]
        }
      },
      "candidate_diff": {
        "auth_openidc.conf||auth_openidc.conf": [
          "File: auth_openidc.conf -> auth_openidc.conf",
          "--- Hunk 1 ---",
          "[Context before]",
          "565: # A suffix \":persistent\" can be added if you want to use a persistent cookie that survives browser restarts",
          "566: # instead of a session cookie that is tied to the lifetime of the browser session.",
          "567: # The \"expires\" value of the persistent cookie is controlled by the OIDCSessionInactivityTimeout setting.",
          "568: # When not defined the default \"server-cache\" is used.",
          "571: # Fallback to \"OIDCSessionType client-cookie\" when \"OIDCSessionType server-cache\" is set and the primary",
          "572: # cache mechanism (e.g. memcache or redis) fails. Note that this will come at a cost of:",
          "",
          "[Removed Lines]",
          "569: #OIDCSessionType server-cache[:persistent]|client-cookie[:persistent]",
          "",
          "[Added Lines]",
          "568: # A suffix \":store_id_token\" can be added to \"client-cookie\" if you want the id_token to be stored",
          "569: # in the session to be used as id_token_hint in a logout request to the OP later.",
          "571: #OIDCSessionType server-cache[:persistent] | client-cookie[:persistent | :store_id_token | :persistent:store_id_token ]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "752: # \"claims\" :     the claims in the id_token are passed in individual headers/environment variables",
          "753: # \"payload\" :    the payload of the id_token is passed as a JSON object in the \"OIDC_id_token_payload\" header/environment variable",
          "754: # \"serialized\" : the complete id_token is passed in compact serialized format in the \"OIDC_id_token\" header/environment variable",
          "757: # When not defined the default \"claims\" is used.",
          "758: #OIDCPassIDTokenAs [claims|payload|serialized]+",
          "",
          "[Removed Lines]",
          "755: # Note that when OIDCSessionType client-cookie is set, the id_token itself is not stored in the session/cookie and as such",
          "756: # the headers for the \"payload\" and \"serialized\" option will not be created.",
          "",
          "[Added Lines]",
          "757: # Note that when OIDCSessionType client-cookie is set, the id_token itself is not stored in the session/cookie (unless explicitly",
          "758: # configured to do so) and as such the header for the \"serialized\" option will not be set.",
          "",
          "---------------"
        ],
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.11.4rc0],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.11.4rc1],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------"
        ],
        "src/config.c||src/config.c": [
          "File: src/config.c -> src/config.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "157: #define OIDC_DEFAULT_STATE_COOKIE_PREFIX \"mod_auth_openidc_state_\"",
          "159: #define OIDC_DEFAULT_X_FORWARDED_HEADERS 0",
          "161: #define OIDCProviderMetadataURL                \"OIDCProviderMetadataURL\"",
          "162: #define OIDCProviderIssuer                     \"OIDCProviderIssuer\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "161: #define OIDC_DEFAULT_STORE_ID_TOKEN TRUE",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "527:  oidc_cfg *cfg = (oidc_cfg*) ap_get_module_config(cmd->server->module_config,",
          "528:    &auth_openidc_module);",
          "529:  const char *rv = oidc_parse_session_type(cmd->pool, arg, &cfg->session_type,",
          "531:  return OIDC_CONFIG_DIR_RV(cmd, rv);",
          "532: }",
          "",
          "[Removed Lines]",
          "530:    &cfg->persistent_session_cookie);",
          "",
          "[Added Lines]",
          "532:    &cfg->persistent_session_cookie, &cfg->store_id_token);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1455:  c->session_type = OIDC_DEFAULT_SESSION_TYPE;",
          "1456:  c->session_cache_fallback_to_cookie = OIDC_CONFIG_POS_INT_UNSET;",
          "1457:  c->persistent_session_cookie = 0;",
          "1458:  c->session_cookie_chunk_size =",
          "1459:    OIDC_DEFAULT_SESSION_CLIENT_COOKIE_CHUNK_SIZE;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1460:  c->store_id_token = OIDC_DEFAULT_STORE_ID_TOKEN;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1894:    add->persistent_session_cookie != 0 ?",
          "1895:      add->persistent_session_cookie :",
          "1896:      base->persistent_session_cookie;",
          "1897:  c->session_cookie_chunk_size =",
          "1898:    add->session_cookie_chunk_size",
          "1899:    != OIDC_DEFAULT_SESSION_CLIENT_COOKIE_CHUNK_SIZE ?",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1900:  c->store_id_token =",
          "1901:    add->store_id_token != OIDC_DEFAULT_STORE_ID_TOKEN ?",
          "1902:      add->store_id_token :",
          "1903:      base->store_id_token;",
          "",
          "---------------"
        ],
        "src/mod_auth_openidc.c||src/mod_auth_openidc.c": [
          "File: src/mod_auth_openidc.c -> src/mod_auth_openidc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1071:  if (s_id_token != NULL) {",
          "1074:    oidc_session_set_idtoken(r, session, s_id_token);",
          "1076:   oidc_jwt_t *id_token_jwt = NULL;",
          "",
          "[Removed Lines]",
          "1073:   if (c->session_type != OIDC_SESSION_TYPE_CLIENT_COOKIE)",
          "",
          "[Added Lines]",
          "1073:   if (c->store_id_token == TRUE)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1492:  }",
          "1494:  if ((cfg->pass_idtoken_as & OIDC_PASS_IDTOKEN_AS_SERIALIZED)) {",
          "1499:    oidc_util_set_app_info(r, OIDC_APP_INFO_ID_TOKEN, s_id_token,",
          "1502:   } else {",
          "1505:   }",
          "1506:  }",
          "",
          "[Removed Lines]",
          "1495:   if (cfg->session_type != OIDC_SESSION_TYPE_CLIENT_COOKIE) {",
          "1497:    const char *s_id_token = oidc_session_get_idtoken(r, session);",
          "1500:      OIDC_DEFAULT_HEADER_PREFIX, pass_headers, pass_envvars,",
          "1501:      pass_base64url);",
          "1503:    oidc_error(r,",
          "1504:      \"session type \\\"client-cookie\\\" does not allow storing/passing the id_token; use \\\"\" OIDCSessionType \" server-cache\\\" for that\");",
          "",
          "[Added Lines]",
          "1496:   s_id_token = oidc_session_get_idtoken(r, session);",
          "1497:   if (s_id_token) {",
          "1500:            OIDC_DEFAULT_HEADER_PREFIX, pass_headers, pass_envvars, pass_base64url);",
          "1502:    oidc_warn(r, \"id_token was not found in the session so it cannot be passed on\");",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1707:  oidc_session_set_idtoken_claims(r, session,",
          "1708:    id_token_jwt->payload.value.str);",
          "1712:   oidc_session_set_idtoken(r, session, id_token);",
          "1713:  }",
          "",
          "[Removed Lines]",
          "1710:  if (c->session_type != OIDC_SESSION_TYPE_CLIENT_COOKIE) {",
          "",
          "[Added Lines]",
          "1708:  if (c->store_id_token == TRUE) {",
          "",
          "---------------"
        ],
        "src/mod_auth_openidc.h||src/mod_auth_openidc.h": [
          "File: src/mod_auth_openidc.h -> src/mod_auth_openidc.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "392:  int session_type;",
          "394:  int persistent_session_cookie;",
          "396:  int session_cookie_chunk_size;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "396:  apr_byte_t store_id_token;",
          "",
          "---------------"
        ],
        "src/parse.c||src/parse.c": [
          "File: src/parse.c -> src/parse.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "297: #define OIDC_SESSION_TYPE_SERVER_CACHE_STR  \"server-cache\"",
          "298: #define OIDC_SESSION_TYPE_CLIENT_COOKIE_STR \"client-cookie\"",
          "299: #define OIDC_SESSION_TYPE_PERSISTENT        \"persistent\"",
          "300: #define OIDC_SESSION_TYPE_SEPARATOR         \":\"",
          "307:  static char *options[] =",
          "308:  {",
          "309:    OIDC_SESSION_TYPE_SERVER_CACHE_STR,",
          "310:    OIDC_SESSION_TYPE_SERVER_CACHE_STR OIDC_SESSION_TYPE_SEPARATOR OIDC_SESSION_TYPE_PERSISTENT,",
          "311:    OIDC_SESSION_TYPE_CLIENT_COOKIE_STR,",
          "312:    OIDC_SESSION_TYPE_CLIENT_COOKIE_STR OIDC_SESSION_TYPE_SEPARATOR OIDC_SESSION_TYPE_PERSISTENT,",
          "313:    NULL };",
          "314:  const char *rv = oidc_valid_string_option(pool, arg, options);",
          "315:  if (rv != NULL)",
          "",
          "[Removed Lines]",
          "305: const char *oidc_parse_session_type(apr_pool_t *pool, const char *arg,",
          "306:   int *type, int *persistent) {",
          "",
          "[Added Lines]",
          "300: #define OIDC_SESSION_TYPE_STORE_ID_TOKEN    \"store_id_token\"",
          "306: const char* oidc_parse_session_type(apr_pool_t *pool, const char *arg, int *type, int *persistent,",
          "307:   apr_byte_t *store_id_token) {",
          "314:    OIDC_SESSION_TYPE_CLIENT_COOKIE_STR OIDC_SESSION_TYPE_SEPARATOR OIDC_SESSION_TYPE_STORE_ID_TOKEN,",
          "315:    OIDC_SESSION_TYPE_CLIENT_COOKIE_STR OIDC_SESSION_TYPE_SEPARATOR OIDC_SESSION_TYPE_PERSISTENT OIDC_SESSION_TYPE_SEPARATOR OIDC_SESSION_TYPE_STORE_ID_TOKEN,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "319:  char *p = strstr(s, OIDC_SESSION_TYPE_SEPARATOR);",
          "321:  if (p) {",
          "324:  }",
          "326:  if (apr_strnatcmp(s, OIDC_SESSION_TYPE_SERVER_CACHE_STR) == 0) {",
          "328:  } else if (apr_strnatcmp(s, OIDC_SESSION_TYPE_CLIENT_COOKIE_STR) == 0) {",
          "330:  }",
          "331:  return NULL;",
          "332: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "326:   p++;",
          "336:  if (p) {",
          "337:   if (apr_strnatcmp(p, OIDC_SESSION_TYPE_PERSISTENT) == 0) {",
          "339:   } else if (apr_strnatcmp(p, OIDC_SESSION_TYPE_STORE_ID_TOKEN) == 0) {",
          "342:   } else if (apr_strnatcmp(p, OIDC_SESSION_TYPE_SEPARATOR OIDC_SESSION_TYPE_PERSISTENT OIDC_SESSION_TYPE_SEPARATOR OIDC_SESSION_TYPE_STORE_ID_TOKEN)",
          "343:     == 0) {",
          "347:   }",
          "348:  }",
          "",
          "---------------"
        ],
        "src/parse.h||src/parse.h": [
          "File: src/parse.h -> src/parse.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "90: const char *oidc_parse_boolean(apr_pool_t *pool, const char *arg, int *bool_value);",
          "92: const char *oidc_parse_cache_type(apr_pool_t *pool, const char *arg, oidc_cache_t **type);",
          "94: const char *oidc_parse_cache_shm_entry_size_max(apr_pool_t *pool, const char *arg, int *int_value);",
          "95: const char *oidc_parse_session_inactivity_timeout(apr_pool_t *pool, const char *arg, int *int_value);",
          "96: const char *oidc_parse_session_max_duration(apr_pool_t *pool, const char *arg, int *int_value);",
          "",
          "[Removed Lines]",
          "93: const char *oidc_parse_session_type(apr_pool_t *pool, const char *arg, int *type, int *persistent);",
          "",
          "[Added Lines]",
          "93: const char *oidc_parse_session_type(apr_pool_t *pool, const char *arg, int *type, int *persistent, apr_byte_t *store_id_token);",
          "",
          "---------------"
        ],
        "src/session.c||src/session.c": [
          "File: src/session.c -> src/session.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "591: void oidc_session_set_idtoken(request_rec *r, oidc_session_t *z,",
          "592:   const char *s_id_token) {",
          "593:  oidc_session_set(r, z, OIDC_SESSION_KEY_IDTOKEN, s_id_token);",
          "594: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "593:  oidc_debug(r, \"storing id_token in the session\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6369c9aad477b0ec57a038e2248fc0cdd1227bcf",
      "candidate_info": {
        "commit_hash": "6369c9aad477b0ec57a038e2248fc0cdd1227bcf",
        "repo": "zmartzone/mod_auth_openidc",
        "commit_url": "https://github.com/zmartzone/mod_auth_openidc/commit/6369c9aad477b0ec57a038e2248fc0cdd1227bcf",
        "files": [
          "ChangeLog",
          "configure.ac",
          "src/util.c",
          "test/test.c"
        ],
        "message": "don't printout JSON errors about NULL characters in error log\n\nto prevent attacks through log access; also restrict printout of JSON\nparsing errors to 4096 bytes to prevent DoS\n\nthanks Christian Fries of Ruhr-University Bochum; bump to 2.4.5rc6\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "src/util.c||src/util.c",
          "test/test.c||test/test.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac"
          ],
          "candidate": [
            "configure.ac||configure.ac"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.5rc5],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.5rc6],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------"
        ],
        "src/util.c||src/util.c": [
          "File: src/util.c -> src/util.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1297:  return FALSE;",
          "1298: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1300: #define OIDC_JSON_MAX_ERROR_STR 4096",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1313:  if (*json == NULL) {",
          "1317:   return FALSE;",
          "1318:  }",
          "",
          "[Removed Lines]",
          "1315:   oidc_error(r, \"JSON parsing returned an error: %s (%s)\",",
          "1316:     json_error.text, str);",
          "",
          "[Added Lines]",
          "1317:   if (json_error_code(&json_error) == json_error_null_character) {",
          "1318:    oidc_error(r, \"JSON parsing returned an error: %s\",",
          "1319:      json_error.text);",
          "1320:   } else {",
          "1321:    oidc_error(r, \"JSON parsing returned an error: %s (%s)\",",
          "1322:      json_error.text, apr_pstrndup(r->pool, str, OIDC_JSON_MAX_ERROR_STR));",
          "1323:   }",
          "",
          "---------------"
        ],
        "test/test.c||test/test.c": [
          "File: test/test.c -> test/test.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1487: #endif",
          "1489: static char * all_tests(apr_pool_t *pool, request_rec *r) {",
          "1490:  char *message;",
          "1491:  TST_RUN(test_public_key_parse, pool);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1490: static char * test_decode_json_object(request_rec *r) {",
          "1491:  apr_byte_t rc = FALSE;",
          "1492:  json_t *json = NULL;",
          "1493:  rc = oidc_util_decode_json_object(r, \"nojson\", &json);",
          "1494:  TST_ASSERT(\"test invalid JSON\", rc == FALSE);",
          "1495:  rc = oidc_util_decode_json_object(r, \"{ \\\"n\\\": \\\"\\\\u0000<?php echo 'Hello' ?>\\\"}\", &json);",
          "1496:  TST_ASSERT(\"test JSON with NULL value\", rc == FALSE);",
          "1497:  rc = oidc_util_decode_json_object(r, \"tmjcbnuvyrtygbtbyizkfuabiddgixcvnvupjuwnvxznpspmjaqrlpgmggixxovrpwntkvsvxjtkjjggnevyfyemdrlxtnmzjstmjuyquyyjzzwsfrazgzbdojkcfaeiqawltqsiwwzzgpiikpqoxixhsqtnfbchrcgxbgiaynkscvbvfnpuddrpjbgdtxxlebrswrtukzxqyyfrmwrrtfhcxhjfdoswjzvcchlufkqdaiqakvhyssegikcdkxvqxjrxukllhjduhokudtmhkqhqjheedxnlpbtybpwwogynneilkyffixdchdcjopxtdnhgsinwwktpqxfhmlfwucbtlbojaatocwqxsivdwwxrscsviwtllrqakzyogvseiackzzkkioactssxcglqqgavcpxmfokufechkdjkwbvdcnyboqbinbitixuqxeafdhrzndljsnqdlvxwvzggltmelmdcfouthhhzjuehfoejfyjvrpakmgmhaigkidmpmjtwrgezmwyvkgirhkxwrakbaizldjrcjbwieewdnxmrlgcmnuvhidvkqdokguvphmzywgqgfuwshouxcadbtkoxesyoqikuotloiowjpvztunkguyyrnbmsnwbpghharmvkoqjjoanbejbwdlewiebwkzsuxpxozqzteuozboxdaukiwbqduhdhdlgiewmgeeqwtgyvhexcsdthriprrxvpuqvlcgqlldpnjdtbcuxncoikjxxistytsdlzdmtevmxhoafdcwqqixzxnxnrcoqlkwosdxsktgdejqsopuzaqourcixwktuwjzqagtdjheqgkpeavaoxpechkkdxcrwdtuxvdwpyjgjtsgppnoudyjyslwzxcqtbeqdtppeoelefkumpaamkxjnmdbuzotdzjrwzjspgabxczvxiuogvtmkmvxitdezsrqskorsybwndftfoqrylgsnhetyksfjdctmmarhtxpjukhwxhzjorxgnbpskdzgmskiumcsyquuwknrmkvdxhwgztbbbgiogeynlertjprolkavghiatjaddwlacrlibdnbbhykaqepwujqkmylnnqcfmxqanfvxgmitmsgwotolcwqrxgaftsryrmvlnabnouwqubtocwhkerhvsyzgirkitehbpcvitmjndqwerqopsdhwenihhkybemtmrafhcqbbfrfhemzvklvzxykkczjdokblktoxknolzxgblsjplggysbutvddygjgaqntcavbopwanbdvijawdwuepvzcaoesbkdaaqevbaupyokttlgcplpfijaubzphwutmslimkdxtrgwrfhhvdygznabvhvfhhpuuzwkhaxurnnqrmrhmddkckxzrmzxavvfpyuagjfyjorlfwprlpmwyjbtyzidvabtjckfqesnumqddnrdkunxljarqxcokikkqvrwxfedfumbadugcvzigbdulrcmzihpepztbplwrcvunyrhlwdutawmroajvomwtnbntcdgeqnyjxqlgjcdkaxlezmrldewjvyfjljeskmebuepmbzlhludyzwfnjomfnbgdcseqvqdlxrsuyyakdfsssiobahylumrwzsztpwxvfxyqfhtubamboeykqjltmpdjzhrsdjfebwjhlsyrafmvhefyddxhkchaqxptrqewevrnqftswhhxezdxyowtstejeexrgiujxbxvrvukotxdtlbgdpmorbaglozcmkzyrgnsjauxybuwvozcatacoyrvuxpiqkppoiogpuiykdpxkefxvqwutsbdeerbhztiidxqxsahcbbbrhlqwwnstpsefwtunismgvhbcpholzedkivglyjoperxpfavaxqohcxrcmnfvlzqtflrslurdbxnyoswimovpteleifarnhrivasnxetxnwyumoiwomilmnmpnpfekpwiwpmlqumkfagjbxpswraxctsyvsfspoesfhfdifcexfknbbszjfznpwkftkescltnmmodctjmkwdlrgorauknioeqexwwqdkdhdielfewwenuhsosehfksfaybktumfaprcjgvgenfdffbgduawryrvlbphdjsryjzpspymqhflowqzvesljaasfjvheeqikfocyxuopsgsojcqmyfkwkspnspjewmsxljvezucnpuobfqblakqwbixswbbtuboneixdjhdbzdckkcarsswtutwhkjijwdtsyjirdcibtavigjnehntnpdpdugwryxybsqoboayifiwxyuiqlbjksjpuhwdglymyisjdhkovwexkroooorosiudclbrldesiolbrbeusyrpuuypioziymwdguquitxuiaxeayabeccbrislwinxxyumylbncyshsywkzdyqoaqtwbulnseynghoomiypzefykoexnzhwdcqoctptqabzbuiwxyahaptodtufofabylxtlggldckhuicuqdbueuuoknehkkuypnjwqfhocshmofgbmokiuxvcdonwuwqbjxgdukuubswwvxxqugjxnngnbnvtcophhamvbcuxdfkqubfiftrtfyljjulmansvnhnaoczrmxlqokbovddmpydamzicfzkmwcgecljucaezvhrcssupxkleiximldarmtszakjuficulnaefldyogmnavrfscsptejaexghcrqtnluzmxvxrixxgjtyujoruzzzrfgtymtfsdyrmhvvggyeeykdaglptsuqmqbknimmxnuftjjolcvhpdumqehmyevqlsotrsldgedxmuablgarjfwoqyuakqxbqewdlsfkamxrteaebqwwcsupefoshtwlghkqtqjddikfrwjilzuqfwpcxalauddfotnwlsdwpxynlqjpfcuodeyubenztxsjwxycrdhlluauutfrvgqzacvnfawqibftocxrksltmjvlnyjfeagoxpcepioattazmuuklhjxhpbughkmyjdgrxwqwdafgbnerlhlngeqojhjuvwwmqdradedjuugcqzkfozddctctckaqoruksjsqjpzdbvmocutxpnacbkihboujejmjdhorkpyzubhaxpksjfpzmwauwxkwyjisfsqdjdkvsifgxjygclbdtzultcejefyephhhgbazkqqdvhtkkllyopdcsnbqjcpyvienhqqkwyxfvjrgsymuxxsejqerumcldjuitavdgogcsvjgbwllaijavuaeqxvndvzyrlmmzrhijywctihqizqmjfosrddqqdyilnfzyvwkkqgnnhlajqgdsnhhzpphfjtkeafxlgaarcfdapicfmukyyzvbgoatibulenkkwtyrnzgbmcytazrieabuerwkxoffzuohdhqqhfbxqmqestunudduaywtrmdmbvidyvterebgvxwbhlbsqmghcktujvhfwmhralmodiywvyzvurzghwcpxqtzwmhnderhpognxnynmrfraklflrgppszmuxtwddrkzvqyvvmhlwcnzmspekcwhphabtmzdgvfyrvdzimpxbrkjbntiixkgxhepzqrugnmjyfbkcacbdgxbhraauoagihygwkiikuyximjjdnvslnfaouofwgdacnndhramvxazuzksploibonvneeixkykpwjmrlwkvbesxaklqkoaulskwdfstelqxyyrpvnzkjcmhvxbjvbmrgdoyiwlzubaovirtciwcptmrdggpcgtxptkfwjsnhbxprqjiezncmmypjfbgljzrawwdikhoaqggoizoixpnykwyotofdrduvgfcwxvzjuacxolorrfpunnkzltgbdkztiwjctjedtupmckbjajwcjnkbmywilylfhckksaowsbvhnktfeklaekpflbtsqpyxhrcwmjjgnqtmoumvcswredhtexnaojzjagrvwcieizjfvvmzzxmzwwvqthmrqvtviuyiqffjdpqmeknhwylmteliysiaenkhkiuojxdwscvtacbwfixhrcaxlfeakidxgrmgitrmrzdzhwjyazzikrclajgksENDxxxx\", &json);",
          "1498:  TST_ASSERT(\"test invalid long JSON\", rc == FALSE);",
          "1499:  rc = oidc_util_decode_json_object(r, \"{}\", &json);",
          "1500:  TST_ASSERT(\"test valid JSON\", rc == TRUE);",
          "1501:  json_decref(json);",
          "1502:  return 0;",
          "1503: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1519:  TST_RUN(test_current_url, r);",
          "1520:  TST_RUN(test_accept, r);",
          "1522: #if MODULE_MAGIC_NUMBER_MAJOR >= 20100714",
          "1523:  TST_RUN(test_authz_worker, r);",
          "1524: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1538:  TST_RUN(test_decode_json_object, r);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "883f8115e967de31ad2ba0419c54588530c9b0df",
      "candidate_info": {
        "commit_hash": "883f8115e967de31ad2ba0419c54588530c9b0df",
        "repo": "zmartzone/mod_auth_openidc",
        "commit_url": "https://github.com/zmartzone/mod_auth_openidc/commit/883f8115e967de31ad2ba0419c54588530c9b0df",
        "files": [
          "AUTHORS",
          "ChangeLog",
          "configure.ac",
          "src/mod_auth_openidc.c"
        ],
        "message": "add no Cache-Control headers to logout request response; see #846\n\nthanks @blackwhiser1; bump to 2.4.11.2rc1\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "src/mod_auth_openidc.c||src/mod_auth_openidc.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac",
            "src/mod_auth_openidc.c||src/mod_auth_openidc.c"
          ],
          "candidate": [
            "configure.ac||configure.ac",
            "src/mod_auth_openidc.c||src/mod_auth_openidc.c"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.11.2rc0],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.11.2rc1],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------"
        ],
        "src/mod_auth_openidc.c||src/mod_auth_openidc.c": [
          "File: src/mod_auth_openidc.c -> src/mod_auth_openidc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2832:     \"<p>Logged Out</p>\", OK);",
          "2833:  }",
          "2836:  if (url == NULL)",
          "2837:   return oidc_util_html_send(r, \"Logged Out\", NULL, NULL,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2835:  oidc_util_hdr_err_out_add(r, OIDC_HTTP_HDR_CACHE_CONTROL,",
          "2836:    \"no-cache, no-store\");",
          "2837:  oidc_util_hdr_err_out_add(r, OIDC_HTTP_HDR_PRAGMA, \"no-cache\");",
          "",
          "---------------"
        ]
      }
    }
  ]
}