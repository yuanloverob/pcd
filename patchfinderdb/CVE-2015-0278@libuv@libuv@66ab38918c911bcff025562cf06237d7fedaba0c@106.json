{
  "cve_id": "CVE-2015-0278",
  "cve_desc": "libuv before 0.10.34 does not properly drop group privileges, which allows context-dependent attackers to gain privileges via unspecified vectors.",
  "repo": "libuv/libuv",
  "patch_hash": "66ab38918c911bcff025562cf06237d7fedaba0c",
  "patch_info": {
    "commit_hash": "66ab38918c911bcff025562cf06237d7fedaba0c",
    "repo": "libuv/libuv",
    "commit_url": "https://github.com/libuv/libuv/commit/66ab38918c911bcff025562cf06237d7fedaba0c",
    "files": [
      "src/unix/process.c"
    ],
    "message": "unix: call setgoups before calling setuid/setgid\n\nPartial fix for #1093",
    "before_after_code_files": [
      "src/unix/process.c||src/unix/process.c"
    ]
  },
  "patch_diff": {
    "src/unix/process.c||src/unix/process.c": [
      "File: src/unix/process.c -> src/unix/process.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "330:     _exit(127);",
      "331:   }",
      "333:   if ((options->flags & UV_PROCESS_SETGID) && setgid(options->gid)) {",
      "334:     uv__write_int(error_fd, -errno);",
      "335:     perror(\"setgid()\");",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "333:   if (options->flags & (UV_PROCESS_SETUID | UV_PROCESS_SETGID)) {",
      "341:     SAVE_ERRNO(setgroups(0, NULL));",
      "342:   }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "742dadcb7154cc7bb89c0c228a223b767a36cf0d",
      "candidate_info": {
        "commit_hash": "742dadcb7154cc7bb89c0c228a223b767a36cf0d",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/742dadcb7154cc7bb89c0c228a223b767a36cf0d",
        "files": [
          "ChangeLog",
          "src/version.c"
        ],
        "message": "2013.08.25, Version 0.11.10 (Unstable)\n\n* windows: Re-implement uv_fs_stat. The st_ctime field now contains the\n  change time, not the creation time, like on unix systems. st_dev,\n  st_ino, st_blocks and st_blksize are now also filled out. (Bert\n  Belder)\n\n* linux: fix setsockopt(SO_REUSEPORT) error handling (Ben Noordhuis)\n\n* windows: report uv_process_t exit code correctly (Bert Belder)\n\n* windows: make uv_fs_chmod() report errors correctly (Bert Belder)\n\n* windows: make some more NT apis available for libuv's internal use\n  (Bert Belder)\n\n* windows: squelch some compiler warnings (Bert Belder)",
        "before_after_code_files": [
          "src/version.c||src/version.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/version.c||src/version.c": [
          "File: src/version.c -> src/version.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: #define UV_VERSION_MAJOR 0",
          "33: #define UV_VERSION_MINOR 11",
          "34: #define UV_VERSION_PATCH 10",
          "38: #define UV_VERSION  ((UV_VERSION_MAJOR << 16) | \\",
          "",
          "[Removed Lines]",
          "35: #define UV_VERSION_IS_RELEASE 0",
          "",
          "[Added Lines]",
          "35: #define UV_VERSION_IS_RELEASE 1",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fd45f876ff912869007aac15298919c1865a9548",
      "candidate_info": {
        "commit_hash": "fd45f876ff912869007aac15298919c1865a9548",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/fd45f876ff912869007aac15298919c1865a9548",
        "files": [
          "Makefile.am",
          "checksparse.sh",
          "include/uv-darwin.h",
          "include/uv-linux.h",
          "include/uv-win.h",
          "src/uv-common.c",
          "test/test-ip6-addr.c",
          "test/test-list.h",
          "uv.gyp"
        ],
        "message": "linux,darwin,win: link-local IPv6 addresses\n\nModified uv_ip6_addr() to fill sin6_scope_id for link-local addresses.\n\nFixes #271\n\nConflicts:\n\tbuild.mk",
        "before_after_code_files": [
          "Makefile.am||Makefile.am",
          "checksparse.sh||checksparse.sh",
          "include/uv-darwin.h||include/uv-darwin.h",
          "include/uv-linux.h||include/uv-linux.h",
          "include/uv-win.h||include/uv-win.h",
          "src/uv-common.c||src/uv-common.c",
          "test/test-ip6-addr.c||test/test-ip6-addr.c",
          "test/test-list.h||test/test-list.h",
          "uv.gyp||uv.gyp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Makefile.am||Makefile.am": [
          "File: Makefile.am -> Makefile.am",
          "--- Hunk 1 ---",
          "[Context before]",
          "85:                          test/test-getsockname.c \\",
          "86:                          test/test-hrtime.c \\",
          "87:                          test/test-idle.c \\",
          "88:                          test/test-ipc-send-recv.c \\",
          "89:                          test/test-ipc.c \\",
          "90:                          test/test-list.h \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "88:                          test/test-ip6-addr.c \\",
          "",
          "---------------"
        ],
        "checksparse.sh||checksparse.sh": [
          "File: checksparse.sh -> checksparse.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "106: test/test-getsockname.c",
          "107: test/test-hrtime.c",
          "108: test/test-idle.c",
          "109: test/test-ipc-send-recv.c",
          "110: test/test-ipc.c",
          "111: test/test-loop-handles.c",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "109: test/test-ip6-addr.c",
          "",
          "---------------"
        ],
        "include/uv-darwin.h||include/uv-darwin.h": [
          "File: include/uv-darwin.h -> include/uv-darwin.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "59: #define UV_HAVE_KQUEUE 1",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "61: #define UV_PLATFORM_HAS_IP6_LINK_LOCAL_ADDRESS",
          "",
          "---------------"
        ],
        "include/uv-linux.h||include/uv-linux.h": [
          "File: include/uv-linux.h -> include/uv-linux.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "31:   void* watchers[2];                                                          \\",
          "32:   int wd;                                                                     \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "34: #define UV_PLATFORM_HAS_IP6_LINK_LOCAL_ADDRESS",
          "",
          "---------------"
        ],
        "include/uv-win.h||include/uv-win.h": [
          "File: include/uv-win.h -> include/uv-win.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "582:     char* utf8Buffer, size_t utf8Size);",
          "583: int uv_utf8_to_utf16(const char* utf8Buffer, WCHAR* utf16Buffer,",
          "584:     size_t utf16Size);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "586: #define UV_PLATFORM_HAS_IP6_LINK_LOCAL_ADDRESS",
          "",
          "---------------"
        ],
        "src/uv-common.c||src/uv-common.c": [
          "File: src/uv-common.c -> src/uv-common.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: #define XX(uc, lc) case UV_##uc: return sizeof(uv_##lc##_t);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "31: #if defined(UV_PLATFORM_HAS_IP6_LINK_LOCAL_ADDRESS) && !defined(_WIN32)",
          "33: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "174: struct sockaddr_in6 uv_ip6_addr(const char* ip, int port) {",
          "175:   struct sockaddr_in6 addr;",
          "177:   memset(&addr, 0, sizeof(struct sockaddr_in6));",
          "179:   addr.sin6_family = AF_INET6;",
          "180:   addr.sin6_port = htons(port);",
          "181:   uv_inet_pton(AF_INET6, ip, &addr.sin6_addr);",
          "183:   return addr;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "179:   char address_part[40];",
          "180:   size_t address_part_size;",
          "181:   const char* zone_index;",
          "188: #if defined(UV_PLATFORM_HAS_IP6_LINK_LOCAL_ADDRESS)",
          "189:   zone_index = strchr(ip, '%');",
          "190:   if (zone_index != NULL) {",
          "191:     address_part_size = sizeof(address_part);",
          "192:     assert((unsigned)(zone_index - ip) < address_part_size);",
          "193:     strncpy(address_part, ip, zone_index - ip);",
          "194:     address_part[address_part_size - 1] = '\\0';",
          "196:     ip = address_part;",
          "200: #ifdef _WIN32",
          "201:     addr.sin6_scope_id = atoi(zone_index);",
          "202: #else",
          "203:     addr.sin6_scope_id = if_nametoindex(zone_index);",
          "204: #endif",
          "205:   }",
          "206: #endif",
          "",
          "---------------"
        ],
        "test/test-ip6-addr.c||test/test-ip6-addr.c": [
          "File: test/test-ip6-addr.c -> test/test-ip6-addr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: #include \"uv.h\"",
          "23: #include \"task.h\"",
          "25: #include <stdio.h>",
          "26: #include <string.h>",
          "28: #ifdef __linux__",
          "29: # include <sys/socket.h>",
          "30: # include <net/if.h>",
          "31: #endif",
          "33: typedef void (*iface_info_cb)(const char* ip6_addr, const char* device_name,",
          "34:     unsigned iface_index);",
          "36: void call_iface_info_cb(iface_info_cb iface_cb,",
          "37:                         char const* iface_name,",
          "38:                         struct sockaddr_in6 const* address) {",
          "39:   char string_address[INET6_ADDRSTRLEN];",
          "40:   uv_err_t result;",
          "42:   result = uv_inet_ntop(AF_INET6,",
          "43:                         &address->sin6_addr,",
          "44:                         string_address,",
          "45:                         INET6_ADDRSTRLEN);",
          "46:   ASSERT(result.code == UV_OK);",
          "48:   iface_cb(string_address, iface_name, address->sin6_scope_id);",
          "49: }",
          "52: void foreach_ip6_interface(iface_info_cb iface_cb) {",
          "53:   uv_err_t result;",
          "54:   int count, ix;",
          "55:   uv_interface_address_t* addresses;",
          "57:   result = uv_interface_addresses(&addresses, &count);",
          "58:   ASSERT(result.code == UV_OK);",
          "60:   for (ix = 0; ix < count; ix++) {",
          "61:     if (addresses[ix].address.address4.sin_family != AF_INET6)",
          "62:       continue;",
          "64:     call_iface_info_cb(iface_cb,",
          "65:                        addresses[ix].name,",
          "66:                        &addresses[ix].address.address6);",
          "67:   }",
          "69:   uv_free_interface_addresses(addresses, count);",
          "70: }",
          "73: void test_ip6_addr_scope(const char* ip6_addr,",
          "74:                          const char* device_name,",
          "75:                          unsigned iface_index) {",
          "77:   char scoped_addr[128];",
          "78:   struct sockaddr_in6 addr;",
          "81:   if (strncmp(ip6_addr, \"fe80::\", 6) != 0) return;",
          "83: #ifdef _WIN32",
          "84:   sprintf(scoped_addr, \"%s%%%d\", ip6_addr, iface_index);",
          "85: #else",
          "86:   sprintf(scoped_addr, \"%s%%%s\", ip6_addr, device_name);",
          "87: #endif",
          "89:   LOGF(\"Testing link-local address %s (iface_index: 0x%02x, device_name: %s)\\n\",",
          "90:        scoped_addr,",
          "91:        iface_index,",
          "92:        device_name);",
          "94:   addr = uv_ip6_addr(scoped_addr, TEST_PORT);",
          "96:   LOGF(\"Got scope_id 0x%02x\\n\", addr.sin6_scope_id);",
          "97:   ASSERT(iface_index == addr.sin6_scope_id);",
          "98: }",
          "101: TEST_IMPL(ip6_addr_link_local) {",
          "102: #ifdef UV_PLATFORM_HAS_IP6_LINK_LOCAL_ADDRESS",
          "103:   foreach_ip6_interface(&test_ip6_addr_scope);",
          "104:   return 0;",
          "105: #else",
          "106:   RETURN_SKIP(\"Qualified link-local addresses are not supported.\");",
          "107: #endif",
          "108: }",
          "",
          "---------------"
        ],
        "test/test-list.h||test/test-list.h": [
          "File: test/test-list.h -> test/test-list.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "211: TEST_DECLARE   (poll_duplex)",
          "212: TEST_DECLARE   (poll_unidirectional)",
          "213: TEST_DECLARE   (poll_close)",
          "214: #ifdef _WIN32",
          "215: TEST_DECLARE   (spawn_detect_pipe_name_collisions_on_windows)",
          "216: TEST_DECLARE   (argument_escaping)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "214: TEST_DECLARE   (ip6_addr_link_local)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "499:   TEST_ENTRY  (strlcpy)",
          "500:   TEST_ENTRY  (strlcat)",
          "501:   TEST_ENTRY  (dlerror)",
          "502: #if 0",
          "504:   TEST_ENTRY  (fail_always)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "503:   TEST_ENTRY  (ip6_addr_link_local)",
          "",
          "---------------"
        ],
        "uv.gyp||uv.gyp": [
          "File: uv.gyp -> uv.gyp",
          "--- Hunk 1 ---",
          "[Context before]",
          "378:         'test/test-udp-multicast-join.c',",
          "379:         'test/test-dlerror.c',",
          "380:         'test/test-udp-multicast-ttl.c',",
          "381:       ],",
          "382:       'conditions': [",
          "383:         [ 'OS==\"win\"', {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "381:         'test/test-ip6-addr.c',",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fabafd6236e976580a2153aa1dfc985af400feee",
      "candidate_info": {
        "commit_hash": "fabafd6236e976580a2153aa1dfc985af400feee",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/fabafd6236e976580a2153aa1dfc985af400feee",
        "files": [
          "src/win/tcp.c",
          "src/win/tty.c",
          "src/win/udp.c"
        ],
        "message": "windows: make sure sockets and handles are reset on close\n\nSet the socket to INVALID_SOCKET foir TCP and UDP handles and\nthe handle to INVALID_HANDLE_VALUE on TTY handles after closing them.",
        "before_after_code_files": [
          "src/win/tcp.c||src/win/tcp.c",
          "src/win/tty.c||src/win/tty.c",
          "src/win/udp.c||src/win/udp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/win/tcp.c||src/win/tcp.c": [
          "File: src/win/tcp.c -> src/win/tcp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "197:     if (!(handle->flags & UV_HANDLE_TCP_SOCKET_CLOSED)) {",
          "198:       closesocket(handle->socket);",
          "199:       handle->flags |= UV_HANDLE_TCP_SOCKET_CLOSED;",
          "200:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "199:       handle->socket = INVALID_SOCKET;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1369:   if (close_socket) {",
          "1370:     closesocket(tcp->socket);",
          "1371:     tcp->flags |= UV_HANDLE_TCP_SOCKET_CLOSED;",
          "1372:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1372:     tcp->socket = INVALID_SOCKET;",
          "",
          "---------------"
        ],
        "src/win/tty.c||src/win/tty.c": [
          "File: src/win/tty.c -> src/win/tty.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1903:   if (handle->flags & UV_HANDLE_READING)",
          "1904:     uv_tty_read_stop(handle);",
          "1906:   handle->flags &= ~(UV_HANDLE_READABLE | UV_HANDLE_WRITABLE);",
          "1907:   uv__handle_closing(handle);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1906:   handle->handle = INVALID_HANDLE_VALUE;",
          "",
          "---------------"
        ],
        "src/win/udp.c||src/win/udp.c": [
          "File: src/win/udp.c -> src/win/udp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "144: void uv_udp_close(uv_loop_t* loop, uv_udp_t* handle) {",
          "145:   uv_udp_recv_stop(handle);",
          "146:   closesocket(handle->socket);",
          "148:   uv__handle_closing(handle);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "147:   handle->socket = INVALID_SOCKET;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ede83188f333f2adb45cb3db9d32f94f4f0aef70",
      "candidate_info": {
        "commit_hash": "ede83188f333f2adb45cb3db9d32f94f4f0aef70",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/ede83188f333f2adb45cb3db9d32f94f4f0aef70",
        "files": [
          "test/task.h",
          "test/test-fs-event.c",
          "test/test-fs.c",
          "test/test-spawn.c"
        ],
        "message": "test: don't use S_IREAD and S_IWRITE\n\nThey're BSD-isms and obsolete ones at that. Replace with S_IRUSR and\nS_IWUSR. Alias as _S_IREAD and _S_IWRITE on Windows because the '90s\nnever ended in Redmond, WA.",
        "before_after_code_files": [
          "test/task.h||test/task.h",
          "test/test-fs-event.c||test/test-fs-event.c",
          "test/test-fs.c||test/test-fs.c",
          "test/test-spawn.c||test/test-spawn.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/task.h||test/task.h": [
          "File: test/task.h -> test/task.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "43: # define TEST_PIPENAME_2 \"/tmp/uv-test-sock2\"",
          "44: #endif",
          "46: #define ARRAY_SIZE(a) (sizeof(a) / sizeof((a)[0]))",
          "48: #define container_of(ptr, type, member) \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "46: #ifdef _WIN32",
          "47: # include <io.h>",
          "48: # ifndef S_IRUSR",
          "49: #  define S_IRUSR _S_IREAD",
          "50: # endif",
          "51: # ifndef S_IWUSR",
          "52: #  define S_IWUSR _S_IWRITE",
          "53: # endif",
          "54: #endif",
          "",
          "---------------"
        ],
        "test/test-fs-event.c||test/test-fs-event.c": [
          "File: test/test-fs-event.c -> test/test-fs-event.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "56:   uv_fs_t req;",
          "58:   r = uv_fs_open(loop, &req, name, O_WRONLY | O_CREAT,",
          "60:   ASSERT(r != -1);",
          "61:   file = r;",
          "62:   uv_fs_req_cleanup(&req);",
          "",
          "[Removed Lines]",
          "59:       S_IWRITE | S_IREAD, NULL);",
          "",
          "[Added Lines]",
          "59:       S_IWUSR | S_IRUSR, NULL);",
          "",
          "---------------"
        ],
        "test/test-fs.c||test/test-fs.c": [
          "File: test/test-fs.c -> test/test-fs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "600:   loop = uv_default_loop();",
          "602:   r = uv_fs_open(loop, &open_req1, \"test_file\", O_WRONLY | O_CREAT,",
          "604:   ASSERT(r == 0);",
          "605:   uv_run(loop, UV_RUN_DEFAULT);",
          "",
          "[Removed Lines]",
          "603:       S_IREAD | S_IWRITE, create_cb);",
          "",
          "[Added Lines]",
          "603:       S_IRUSR | S_IWUSR, create_cb);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "663:   loop = uv_default_loop();",
          "665:   r = uv_fs_open(loop, &open_req1, \"test_file\", O_WRONLY | O_CREAT,",
          "667:   ASSERT(r != -1);",
          "668:   ASSERT(open_req1.result != -1);",
          "669:   uv_fs_req_cleanup(&open_req1);",
          "",
          "[Removed Lines]",
          "666:       S_IWRITE | S_IREAD, NULL);",
          "",
          "[Added Lines]",
          "666:       S_IWUSR | S_IRUSR, NULL);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "758:   r = uv_fs_open(loop, &open_req1, \"test_dir/file1\", O_WRONLY | O_CREAT,",
          "760:   ASSERT(r != -1);",
          "761:   uv_fs_req_cleanup(&open_req1);",
          "762:   r = uv_fs_close(loop, &close_req, open_req1.result, NULL);",
          "",
          "[Removed Lines]",
          "759:       S_IWRITE | S_IREAD, NULL);",
          "",
          "[Added Lines]",
          "759:       S_IWUSR | S_IRUSR, NULL);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "764:   uv_fs_req_cleanup(&close_req);",
          "766:   r = uv_fs_open(loop, &open_req1, \"test_dir/file2\", O_WRONLY | O_CREAT,",
          "768:   ASSERT(r != -1);",
          "769:   uv_fs_req_cleanup(&open_req1);",
          "770:   r = uv_fs_close(loop, &close_req, open_req1.result, NULL);",
          "",
          "[Removed Lines]",
          "767:       S_IWRITE | S_IREAD, NULL);",
          "",
          "[Added Lines]",
          "767:       S_IWUSR | S_IRUSR, NULL);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "840:   unlink(\"test_file\");",
          "841:   unlink(\"test_file2\");",
          "844:   ASSERT(f != -1);",
          "846:   r = write(f, \"begin\\n\", 6);",
          "",
          "[Removed Lines]",
          "843:   f = open(\"test_file\", O_WRONLY | O_CREAT, S_IWRITE | S_IREAD);",
          "",
          "[Added Lines]",
          "843:   f = open(\"test_file\", O_WRONLY | O_CREAT, S_IWUSR | S_IRUSR);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "862:   uv_fs_req_cleanup(&open_req1);",
          "864:   r = uv_fs_open(loop, &open_req2, \"test_file2\", O_WRONLY | O_CREAT,",
          "866:   ASSERT(r != -1);",
          "867:   ASSERT(open_req2.result != -1);",
          "868:   uv_fs_req_cleanup(&open_req2);",
          "",
          "[Removed Lines]",
          "865:       S_IWRITE | S_IREAD, NULL);",
          "",
          "[Added Lines]",
          "865:       S_IWUSR | S_IRUSR, NULL);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "909:   loop = uv_default_loop();",
          "911:   r = uv_fs_open(loop, &req, \"test_file\", O_RDWR | O_CREAT,",
          "913:   ASSERT(r != -1);",
          "914:   ASSERT(req.result != -1);",
          "915:   file = req.result;",
          "",
          "[Removed Lines]",
          "912:       S_IWRITE | S_IREAD, NULL);",
          "",
          "[Added Lines]",
          "912:       S_IWUSR | S_IRUSR, NULL);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1003:   loop = uv_default_loop();",
          "1005:   r = uv_fs_open(loop, &req, \"test_file\", O_RDWR | O_CREAT,",
          "1007:   ASSERT(r != -1);",
          "1008:   ASSERT(req.result != -1);",
          "1009:   file = req.result;",
          "",
          "[Removed Lines]",
          "1006:       S_IWRITE | S_IREAD, NULL);",
          "",
          "[Added Lines]",
          "1006:       S_IWUSR | S_IRUSR, NULL);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1100:   loop = uv_default_loop();",
          "1102:   r = uv_fs_open(loop, &req, \"test_file\", O_RDWR | O_CREAT,",
          "1104:   ASSERT(r != -1);",
          "1105:   ASSERT(req.result != -1);",
          "1106:   file = req.result;",
          "",
          "[Removed Lines]",
          "1103:       S_IWRITE | S_IREAD, NULL);",
          "",
          "[Added Lines]",
          "1103:       S_IWUSR | S_IRUSR, NULL);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1166:   loop = uv_default_loop();",
          "1168:   r = uv_fs_open(loop, &req, \"test_file\", O_RDWR | O_CREAT,",
          "1170:   ASSERT(r != -1);",
          "1171:   ASSERT(req.result != -1);",
          "1172:   file = req.result;",
          "",
          "[Removed Lines]",
          "1169:       S_IWRITE | S_IREAD, NULL);",
          "",
          "[Added Lines]",
          "1169:       S_IWUSR | S_IRUSR, NULL);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1274:   loop = uv_default_loop();",
          "1276:   r = uv_fs_open(loop, &req, \"test_file\", O_RDWR | O_CREAT,",
          "1278:   ASSERT(r != -1);",
          "1279:   ASSERT(req.result != -1);",
          "1280:   file = req.result;",
          "",
          "[Removed Lines]",
          "1277:       S_IWRITE | S_IREAD, NULL);",
          "",
          "[Added Lines]",
          "1277:       S_IWUSR | S_IRUSR, NULL);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1439:   uv_fs_req_cleanup(&req);",
          "1441:   r = uv_fs_open(loop, &open_req1, \"test_dir/file1\", O_WRONLY | O_CREAT,",
          "1443:   ASSERT(r != -1);",
          "1444:   uv_fs_req_cleanup(&open_req1);",
          "1445:   r = uv_fs_close(loop, &close_req, open_req1.result, NULL);",
          "",
          "[Removed Lines]",
          "1442:       S_IWRITE | S_IREAD, NULL);",
          "",
          "[Added Lines]",
          "1442:       S_IWUSR | S_IRUSR, NULL);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1447:   uv_fs_req_cleanup(&close_req);",
          "1449:   r = uv_fs_open(loop, &open_req1, \"test_dir/file2\", O_WRONLY | O_CREAT,",
          "1451:   ASSERT(r != -1);",
          "1452:   uv_fs_req_cleanup(&open_req1);",
          "1453:   r = uv_fs_close(loop, &close_req, open_req1.result, NULL);",
          "",
          "[Removed Lines]",
          "1450:       S_IWRITE | S_IREAD, NULL);",
          "",
          "[Added Lines]",
          "1450:       S_IWUSR | S_IRUSR, NULL);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1504:   loop = uv_default_loop();",
          "1505:   unlink(path);",
          "1506:   r = uv_fs_open(loop, &req, path, O_RDWR | O_CREAT,",
          "1508:   ASSERT(r != -1);",
          "1509:   ASSERT(req.result != -1);",
          "1510:   uv_fs_req_cleanup(&req);",
          "",
          "[Removed Lines]",
          "1507:       S_IWRITE | S_IREAD, NULL);",
          "",
          "[Added Lines]",
          "1507:       S_IWUSR | S_IRUSR, NULL);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1589:   loop = uv_default_loop();",
          "1590:   unlink(path);",
          "1591:   r = uv_fs_open(loop, &req, path, O_RDWR | O_CREAT,",
          "1593:   ASSERT(r != -1);",
          "1594:   ASSERT(req.result != -1);",
          "1595:   uv_fs_req_cleanup(&req);",
          "",
          "[Removed Lines]",
          "1592:       S_IWRITE | S_IREAD, NULL);",
          "",
          "[Added Lines]",
          "1592:       S_IWUSR | S_IRUSR, NULL);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1747:   loop = uv_default_loop();",
          "1749:   r = uv_fs_open(loop, &open_req1, \"test_file\", O_WRONLY | O_CREAT,",
          "1751:   ASSERT(r != -1);",
          "1752:   ASSERT(open_req1.result != -1);",
          "1753:   uv_fs_req_cleanup(&open_req1);",
          "",
          "[Removed Lines]",
          "1750:       S_IWRITE | S_IREAD, NULL);",
          "",
          "[Added Lines]",
          "1750:       S_IWUSR | S_IRUSR, NULL);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1779:   ASSERT(close_req.result != -1);",
          "1780:   uv_fs_req_cleanup(&close_req);",
          "1783:   ASSERT(r != -1);",
          "1784:   ASSERT(open_req1.result != -1);",
          "1785:   uv_fs_req_cleanup(&open_req1);",
          "",
          "[Removed Lines]",
          "1782:   r = uv_fs_open(loop, &open_req1, \"test_file\", O_RDONLY, S_IREAD, NULL);",
          "",
          "[Added Lines]",
          "1782:   r = uv_fs_open(loop, &open_req1, \"test_file\", O_RDONLY, S_IRUSR, NULL);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1817:   loop = uv_default_loop();",
          "1819:   r = uv_fs_open(loop, &open_req1, \"test_file\", O_WRONLY | O_CREAT,",
          "1821:   ASSERT(r != -1);",
          "1822:   ASSERT(open_req1.result != -1);",
          "1823:   uv_fs_req_cleanup(&open_req1);",
          "",
          "[Removed Lines]",
          "1820:       S_IWRITE | S_IREAD, NULL);",
          "",
          "[Added Lines]",
          "1820:       S_IWUSR | S_IRUSR, NULL);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1834:   uv_fs_req_cleanup(&close_req);",
          "1836:   r = uv_fs_open(loop, &open_req1, \"test_file2\", O_WRONLY | O_CREAT,",
          "1838:   ASSERT(r != -1);",
          "1839:   ASSERT(open_req1.result != -1);",
          "1840:   uv_fs_req_cleanup(&open_req1);",
          "",
          "[Removed Lines]",
          "1837:       S_IWRITE | S_IREAD, NULL);",
          "",
          "[Added Lines]",
          "1837:       S_IWUSR | S_IRUSR, NULL);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1885:   loop = uv_default_loop();",
          "1887:   r = uv_fs_open(loop, &open_req1, \"test_file\", O_WRONLY | O_CREAT,",
          "1889:   ASSERT(r != -1);",
          "1890:   ASSERT(open_req1.result != -1);",
          "1891:   uv_fs_req_cleanup(&open_req1);",
          "",
          "[Removed Lines]",
          "1888:       S_IWRITE | S_IREAD, NULL);",
          "",
          "[Added Lines]",
          "1888:       S_IWUSR | S_IRUSR, NULL);",
          "",
          "---------------"
        ],
        "test/test-spawn.c||test/test-spawn.c": [
          "File: test/test-spawn.c -> test/test-spawn.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "222:   init_process_options(\"spawn_helper2\", exit_cb);",
          "224:   r = uv_fs_open(uv_default_loop(), &fs_req, \"stdout_file\", O_CREAT | O_RDWR,",
          "226:   ASSERT(r != -1);",
          "227:   uv_fs_req_cleanup(&fs_req);",
          "",
          "[Removed Lines]",
          "225:       S_IREAD | S_IWRITE, NULL);",
          "",
          "[Added Lines]",
          "225:       S_IRUSR | S_IWUSR, NULL);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4018f726150f060e73d578a48a7d24914e06d899",
      "candidate_info": {
        "commit_hash": "4018f726150f060e73d578a48a7d24914e06d899",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/4018f726150f060e73d578a48a7d24914e06d899",
        "files": [
          "src/unix/internal.h",
          "src/unix/stream.c"
        ],
        "message": "osx: pass const handle pointer to uv___stream_fd\n\nuv___stream_fd does not modify passed parameter, so non-const\npointer is not required here.",
        "before_after_code_files": [
          "src/unix/internal.h||src/unix/internal.h",
          "src/unix/stream.c||src/unix/stream.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/unix/internal.h||src/unix/internal.h": [
          "File: src/unix/internal.h -> src/unix/internal.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "241: uv_handle_type uv__handle_type(int fd);",
          "243: #if defined(__APPLE__)",
          "246: #else",
          "247: #define uv__stream_fd(handle) ((handle)->io_watcher.fd)",
          "",
          "[Removed Lines]",
          "244: int uv___stream_fd(uv_stream_t* handle);",
          "245: #define uv__stream_fd(handle) (uv___stream_fd((uv_stream_t*) (handle)))",
          "",
          "[Added Lines]",
          "244: int uv___stream_fd(const uv_stream_t* handle);",
          "245: #define uv__stream_fd(handle) (uv___stream_fd((const uv_stream_t*) (handle)))",
          "",
          "---------------"
        ],
        "src/unix/stream.c||src/unix/stream.c": [
          "File: src/unix/stream.c -> src/unix/stream.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1484: #if defined(__APPLE__)",
          "1488:   assert(handle->type == UV_TCP ||",
          "1489:          handle->type == UV_TTY ||",
          "",
          "[Removed Lines]",
          "1485: int uv___stream_fd(uv_stream_t* handle) {",
          "1486:   uv__stream_select_t* s;",
          "",
          "[Added Lines]",
          "1485: int uv___stream_fd(const uv_stream_t* handle) {",
          "1486:   const uv__stream_select_t* s;",
          "",
          "---------------"
        ]
      }
    }
  ]
}