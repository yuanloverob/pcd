{
  "cve_id": "CVE-2019-20218",
  "cve_desc": "selectExpander in select.c in SQLite 3.30.1 proceeds with WITH stack unwinding even after a parsing error.",
  "repo": "sqlite/sqlite",
  "patch_hash": "a6c1a71cde082e09750465d5675699062922e387",
  "patch_info": {
    "commit_hash": "a6c1a71cde082e09750465d5675699062922e387",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/a6c1a71cde082e09750465d5675699062922e387",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/altertab3.test"
    ],
    "message": "Do not attempt to unwind the WITH stack in the Parse object following an error. This fixes a separate case to [de6e6d68].\n\nFossilOrigin-Name: d29edef93451cc67a5d69c1cce1b1832d9ca8fff1f600afdd51338b74d077b92",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/altertab3.test||test/altertab3.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 597896ed0ae9e2960a8f39576bd7f77a11dccc1da84b6a44ebb5c38d90ebc330",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "4982:     return WRC_Abort;",
      "4983:   }",
      "",
      "[Removed Lines]",
      "4981:   if( db->mallocFailed || sqliteProcessJoin(pParse, p) ){",
      "",
      "[Added Lines]",
      "4981:   if( pParse->nErr || db->mallocFailed || sqliteProcessJoin(pParse, p) ){",
      "",
      "---------------"
    ],
    "test/altertab3.test||test/altertab3.test": [
      "File: test/altertab3.test -> test/altertab3.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "531:   ALTER TABLE t1 RENAME TO t1x;",
      "532: } {1 {error in trigger r1: no such table: main.t2}}",
      "534: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "534: #------------------------------------------------------------------------",
      "535: #",
      "536: reset_db",
      "537: do_execsql_test 23.1 {",
      "538:   CREATE TABLE v0 (a);",
      "539:   CREATE VIEW v2 (v3) AS",
      "540:     WITH x1 AS (SELECT * FROM v2)",
      "541:     SELECT v3 AS x, v3 AS y FROM v2;",
      "542: }",
      "544: do_catchsql_test 23.2 {",
      "545:   SELECT * FROM v2",
      "546: } {1 {view v2 is circularly defined}}",
      "548: db close",
      "549: sqlite3 db test.db",
      "551: do_catchsql_test 23.3 {",
      "552:   ALTER TABLE v0 RENAME TO t3 ;",
      "553: } {1 {error in view v2: view v2 is circularly defined}}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "af5a2e166dfce85cfa195a9e48b2786b9a9e51b7",
      "candidate_info": {
        "commit_hash": "af5a2e166dfce85cfa195a9e48b2786b9a9e51b7",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/af5a2e166dfce85cfa195a9e48b2786b9a9e51b7",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in"
        ],
        "message": "Improvements to the help text in the CLI.\n\nFossilOrigin-Name: 919fec91dac4cb0d5f67404d4f47a65f353d752f5da0aa7b071bf3caf19e0522",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: f11c89595dc65f89be6df62830c8cddd3933acfd4baaecd348ecd99e71db5831",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "3452:   \".archive ...             Manage SQL archives\",",
          "3453:   \"   Each command must have exactly one of the following options:\",",
          "3454:   \"     -c, --create               Create a new archive\",",
          "3456:   \"     -i, --insert               Like -u but always add even if mtime unchanged\",",
          "3457:   \"     -t, --list                 List contents of archive\",",
          "3458:   \"     -x, --extract              Extract files from archive\",",
          "",
          "[Removed Lines]",
          "3455:   \"     -u, --update               Add files or update files with newer mtime\",",
          "",
          "[Added Lines]",
          "3455:   \"     -u, --update               Add files or update files with changed mtime\",",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "16fd04cdbe01c2cd9f90383592555bae7f4d9927",
      "candidate_info": {
        "commit_hash": "16fd04cdbe01c2cd9f90383592555bae7f4d9927",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/16fd04cdbe01c2cd9f90383592555bae7f4d9927",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/tokenize.c",
          "src/update.c",
          "test/normalize.test"
        ],
        "message": "Enhancements to SQL query normalization for UPDATE statements.\n\nFossilOrigin-Name: bba975c7af3de9aeb5c62fb8b05d61b96e4ecd0b030008442bbdd345e1e5f134",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/tokenize.c||src/tokenize.c",
          "src/update.c||src/update.c",
          "test/normalize.test||test/normalize.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: eea1e7aa57e74c4329003f4550168e2aed9e33d2301a3ba84b10781a9cebbc1b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/tokenize.c||src/tokenize.c": [
          "File: src/tokenize.c -> src/tokenize.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "801:       }",
          "802:       case TK_RP: {",
          "803:         if( iStartIN>0 && nParen==nParenAtIN ){",
          "805:           pStr->nChar = iStartIN+1;",
          "806:           sqlite3_str_append(pStr, \"?,?,?\", 5);",
          "807:           iStartIN = 0;",
          "",
          "[Removed Lines]",
          "804:           assert( pStr->nChar>=iStartIN );",
          "",
          "[Added Lines]",
          "804:           assert( pStr->nChar>=(u32)iStartIN );",
          "",
          "---------------"
        ],
        "src/update.c||src/update.c": [
          "File: src/update.c -> src/update.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "289:   sNC.uNC.pUpsert = pUpsert;",
          "290:   sNC.ncFlags = NC_UUpsert;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "293:   v = sqlite3GetVdbe(pParse);",
          "294:   if( v==0 ) goto update_cleanup;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "386:     memset(aToOpen, 1, nIdx+1);",
          "387:   }",
          "392:   if( pParse->nested==0 ) sqlite3VdbeCountChanges(v);",
          "393:   sqlite3BeginWriteOperation(pParse, pTrigger || hasFK, iDb);",
          "",
          "[Removed Lines]",
          "390:   v = sqlite3GetVdbe(pParse);",
          "391:   if( v==0 ) goto update_cleanup;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/normalize.test||test/normalize.test": [
          "File: test/normalize.test -> test/normalize.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "347:   {SELECT x FROM t1 WHERE x IN ([x] IS NOT NULL, NULL, 1, 'a', \"b\", x'00');}",
          "348:   0x2",
          "349:   {0 {SELECT x FROM t1 WHERE x IN(x IS NOT NULL,?,?,?,b,?);}}",
          "350: } {",
          "351:   do_test $tnum {",
          "352:     set code [catch {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "351:   800",
          "352:   {ATTACH \"normalize800.db\" AS somefile;}",
          "353:   0x2",
          "354:   {0 {ATTACH\"normalize800.db\"AS somefile;}}",
          "356:   810",
          "357:   {ATTACH DATABASE \"normalize810.db\" AS somefile;}",
          "358:   0x2",
          "359:   {0 {ATTACH DATABASE\"normalize810.db\"AS somefile;}}",
          "361:   900",
          "362:   {INSERT INTO t1 (x) VALUES(\"sl1\"), (1), (\"sl2\"), ('i');}",
          "363:   0x2",
          "364:   {0 {INSERT INTO t1(x)VALUES(?),(?),(?),(?);}}",
          "366:   910",
          "367:   {UPDATE t1 SET x = \"sl1\" WHERE x IN (1, \"sl2\", 'i');}",
          "368:   0x2",
          "369:   {0 {UPDATE t1 SET x=?WHERE x IN(?,?,?);}}",
          "371:   920",
          "372:   {UPDATE t1 SET x = \"y\" WHERE x IN (1, \"sl1\", 'i');}",
          "373:   0x2",
          "374:   {0 {UPDATE t1 SET x=y WHERE x IN(?,?,?);}}",
          "376:   930",
          "377:   {DELETE FROM t1 WHERE x IN (1, \"sl1\", 'i');}",
          "378:   0x2",
          "379:   {0 {DELETE FROM t1 WHERE x IN(?,?,?);}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "04fcef00eed718bcaea0ef6c9172500a27a1052e",
      "candidate_info": {
        "commit_hash": "04fcef00eed718bcaea0ef6c9172500a27a1052e",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/04fcef00eed718bcaea0ef6c9172500a27a1052e",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/insert.c",
          "test/insert.test"
        ],
        "message": "Fix a corner-case for the logic that cause an insert of a NULL into an INTEGER PRIMARY KEY column to be converted into a valid integer key, when the NULL results from a CASE expression that lacks an ELSE clause.\n\nFossilOrigin-Name: 9a425051e7ba59e797636f5cf32b5f6efafdb21c8d5300e099b8008b829c1439",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/insert.c||src/insert.c",
          "test/insert.test||test/insert.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 10ffc1fe006a1766ff2f1ffc6129786afb86b6b1f8d3a17334e8ecb838d37b9c",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/insert.c||src/insert.c": [
          "File: src/insert.c -> src/insert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "953:       }else if( pSelect ){",
          "954:         sqlite3VdbeAddOp2(v, OP_Copy, regFromSelect+ipkColumn, regRowid);",
          "955:       }else{",
          "961:           appendFlag = 1;",
          "966:         }",
          "967:       }",
          "",
          "[Removed Lines]",
          "956:         VdbeOp *pOp;",
          "957:         sqlite3ExprCode(pParse, pList->a[ipkColumn].pExpr, regRowid);",
          "958:         pOp = sqlite3VdbeGetOp(v, -1);",
          "959:         assert( pOp!=0 );",
          "960:         if( pOp->opcode==OP_Null && !IsVirtual(pTab) ){",
          "962:           pOp->opcode = OP_NewRowid;",
          "963:           pOp->p1 = iDataCur;",
          "964:           pOp->p2 = regRowid;",
          "965:           pOp->p3 = regAutoinc;",
          "",
          "[Added Lines]",
          "956:         Expr *pIpk = pList->a[ipkColumn].pExpr;",
          "957:         if( pIpk->op==TK_NULL && !IsVirtual(pTab) ){",
          "958:           sqlite3VdbeAddOp3(v, OP_NewRowid, iDataCur, regRowid, regAutoinc);",
          "960:         }else{",
          "961:           sqlite3ExprCode(pParse, pList->a[ipkColumn].pExpr, regRowid);",
          "",
          "---------------"
        ],
        "test/insert.test||test/insert.test": [
          "File: test/insert.test -> test/insert.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "449:   SELECT * FROM t13 ORDER BY +b;",
          "450: } {2 0 6 2 1 5}",
          "452: integrity_check insert-99.0",
          "454: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "452: # 2019-01-17.  From the chromium fuzzer.",
          "453: #",
          "454: do_execsql_test insert-14.1 {",
          "455:   DROP TABLE IF EXISTS t14;",
          "456:   CREATE TABLE t14(x INTEGER PRIMARY KEY);",
          "457:   INSERT INTO t14 VALUES(CASE WHEN 1 THEN null END);",
          "458:   SELECT x FROM t14;",
          "459: } {1}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9443dbc493612588608e5cc6d3c46891c1c8025e",
      "candidate_info": {
        "commit_hash": "9443dbc493612588608e5cc6d3c46891c1c8025e",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/9443dbc493612588608e5cc6d3c46891c1c8025e",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in"
        ],
        "message": "Improve the \".recover\" command so that it handles intkey pages linked into non-intkey b-trees, and vice-versa, better.\n\nFossilOrigin-Name: 9c458acba5a100a76148a3efb78ea9f57b85751e80788e4532694bd8976608a0",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: becaaa4d29d17ad613f2a120f0b173e53403b3de26f22beaf83f66ebf369bf60",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "6740:   );",
          "6741:   shellPrepare(pState->db, &rc,",
          "6742:       \"SELECT max(field), group_concat(shell_escape_crnl(quote(value)), ', ')\"",
          "6743:       \"FROM sqlite_dbdata WHERE pgno = ? AND field != ?\"",
          "6744:       \"GROUP BY cell\", &pCells",
          "6745:   );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6743:       \", min(field) \"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "6758:     int bNoop = 0;",
          "6759:     RecoverTable *pTab;",
          "6761:     pTab = recoverFindTable(pState, &rc, iRoot, bIntkey, nCol, &bNoop);",
          "6762:     if( bNoop || rc ) continue;",
          "6763:     if( pTab==0 ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6762:     assert( bIntkey==0 || bIntkey==1 );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "6779:       sqlite3_bind_int(pCells, 1, iPgno);",
          "6780:       while( rc==SQLITE_OK && SQLITE_ROW==sqlite3_step(pCells) ){",
          "6781:         int nField = sqlite3_column_int(pCells, 0);",
          "6782:         const char *zVal = (const char*)sqlite3_column_text(pCells, 1);",
          "6784:         nField = nField+1;",
          "6786:           raw_printf(pState->out,",
          "6787:               \"INSERT INTO %s VALUES(%d, %d, %d, %s%s%s);\\n\",",
          "6790:           );",
          "6791:         }else{",
          "6792:           raw_printf(pState->out, \"INSERT INTO %s(%s) VALUES( %s );\\n\",",
          "6794:           );",
          "6795:         }",
          "6796:       }",
          "",
          "[Removed Lines]",
          "6785:         if( pTab==pOrphan ){",
          "6788:               pTab->zQuoted, iRoot, iPgno, nField,",
          "6789:               bIntkey ? \"\" : \"NULL, \", zVal, pTab->azlCol[nField]",
          "6793:               pTab->zQuoted, pTab->azlCol[nField], zVal",
          "",
          "[Added Lines]",
          "6784:         int iMin = sqlite3_column_int(pCells, 2);",
          "6787:         RecoverTable *pTab2 = pTab;",
          "6788:         if( pTab!=pOrphan && (iMin<0)!=bIntkey ){",
          "6789:           if( pOrphan==0 ){",
          "6790:             pOrphan = recoverOrphanTable(pState, &rc, zLostAndFound, nOrphan);",
          "6791:           }",
          "6792:           pTab2 = pOrphan;",
          "6793:           if( pTab2==0 ) break;",
          "6794:         }",
          "6797:         if( pTab2==pOrphan ){",
          "6800:               pTab2->zQuoted, iRoot, iPgno, nField,",
          "6801:               iMin<0 ? \"\" : \"NULL, \", zVal, pTab2->azlCol[nField]",
          "6805:               pTab2->zQuoted, pTab2->azlCol[nField], zVal",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "12fe9a0d2512ebbbcc9c492af187ff76404b913e",
      "candidate_info": {
        "commit_hash": "12fe9a0d2512ebbbcc9c492af187ff76404b913e",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/12fe9a0d2512ebbbcc9c492af187ff76404b913e",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c",
          "test/fuzzdata8.db"
        ],
        "message": "Fix an assert() that might not be true if the database file is corrupt.\n\nFossilOrigin-Name: f2d400db4dbfb05e2540178ed3662f97f8c57a95f8129886c7081c35e53adf0d",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 0abace8a7aecca01c8677d07f3ec1bafb289ceffe5bcd60284701a7bf813f415",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "8261:   }",
          "8262:   assert( sqlite3PagerIswriteable(pChild->pDbPage) );",
          "8263:   assert( sqlite3PagerIswriteable(pRoot->pDbPage) );",
          "8266:   TRACE((\"BALANCE: copy root %d into %d\\n\", pRoot->pgno, pChild->pgno));",
          "",
          "[Removed Lines]",
          "8264:   assert( pChild->nCell==pRoot->nCell );",
          "",
          "[Added Lines]",
          "8264:   assert( pChild->nCell==pRoot->nCell || CORRUPT_DB );",
          "",
          "---------------"
        ]
      }
    }
  ]
}