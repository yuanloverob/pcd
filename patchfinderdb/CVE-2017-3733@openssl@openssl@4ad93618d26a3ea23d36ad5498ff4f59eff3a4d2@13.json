{
  "cve_id": "CVE-2017-3733",
  "cve_desc": "During a renegotiation handshake if the Encrypt-Then-Mac extension is negotiated where it was not in the original handshake (or vice-versa) then this can cause OpenSSL 1.1.0 before 1.1.0e to crash (dependent on ciphersuite). Both clients and servers are affected.",
  "repo": "openssl/openssl",
  "patch_hash": "4ad93618d26a3ea23d36ad5498ff4f59eff3a4d2",
  "patch_info": {
    "commit_hash": "4ad93618d26a3ea23d36ad5498ff4f59eff3a4d2",
    "repo": "openssl/openssl",
    "commit_url": "https://github.com/openssl/openssl/commit/4ad93618d26a3ea23d36ad5498ff4f59eff3a4d2",
    "files": [
      "include/openssl/ssl3.h",
      "ssl/record/rec_layer_s3.c",
      "ssl/record/ssl3_record.c",
      "ssl/ssl_locl.h",
      "ssl/t1_enc.c",
      "ssl/t1_lib.c"
    ],
    "message": "Don't change the state of the ETM flags until CCS processing\n\nChanging the ciphersuite during a renegotiation can result in a crash\nleading to a DoS attack. ETM has not been implemented in 1.1.0 for DTLS\nso this is TLS only.\n\nThe problem is caused by changing the flag indicating whether to use ETM\nor not immediately on negotiation of ETM, rather than at CCS. Therefore,\nduring a renegotiation, if the ETM state is changing (usually due to a\nchange of ciphersuite), then an error/crash will occur.\n\nDue to the fact that there are separate CCS messages for read and write\nwe actually now need two flags to determine whether to use ETM or not.\n\nCVE-2017-3733\n\nReviewed-by: Richard Levitte <levitte@openssl.org>",
    "before_after_code_files": [
      "include/openssl/ssl3.h||include/openssl/ssl3.h",
      "ssl/record/rec_layer_s3.c||ssl/record/rec_layer_s3.c",
      "ssl/record/ssl3_record.c||ssl/record/ssl3_record.c",
      "ssl/ssl_locl.h||ssl/ssl_locl.h",
      "ssl/t1_enc.c||ssl/t1_enc.c",
      "ssl/t1_lib.c||ssl/t1_lib.c"
    ]
  },
  "patch_diff": {
    "include/openssl/ssl3.h||include/openssl/ssl3.h": [
      "File: include/openssl/ssl3.h -> include/openssl/ssl3.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "264: # define TLS1_FLAGS_SKIP_CERT_VERIFY             0x0010",
      "270: # define TLS1_FLAGS_RECEIVED_EXTMS               0x0200",
      "272: # define SSL3_MT_HELLO_REQUEST                   0",
      "273: # define SSL3_MT_CLIENT_HELLO                    1",
      "274: # define SSL3_MT_SERVER_HELLO                    2",
      "",
      "[Removed Lines]",
      "267: # define TLS1_FLAGS_ENCRYPT_THEN_MAC             0x0100",
      "",
      "[Added Lines]",
      "267: # define TLS1_FLAGS_ENCRYPT_THEN_MAC_READ        0x0100",
      "268: # define TLS1_FLAGS_ENCRYPT_THEN_MAC             TLS1_FLAGS_ENCRYPT_THEN_MAC_READ",
      "273: # define TLS1_FLAGS_ENCRYPT_THEN_MAC_WRITE       0x0400",
      "",
      "---------------"
    ],
    "ssl/record/rec_layer_s3.c||ssl/record/rec_layer_s3.c": [
      "File: ssl/record/rec_layer_s3.c -> ssl/record/rec_layer_s3.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "395:     if (type == SSL3_RT_APPLICATION_DATA &&",
      "396:         u_len >= 4 * (max_send_fragment = s->max_send_fragment) &&",
      "397:         s->compress == NULL && s->msg_callback == NULL &&",
      "399:         EVP_CIPHER_flags(EVP_CIPHER_CTX_cipher(s->enc_write_ctx)) &",
      "400:         EVP_CIPH_FLAG_TLS1_1_MULTIBLOCK) {",
      "401:         unsigned char aad[13];",
      "",
      "[Removed Lines]",
      "398:         !SSL_USE_ETM(s) && SSL_USE_EXPLICIT_IV(s) &&",
      "",
      "[Added Lines]",
      "398:         !SSL_WRITE_ETM(s) && SSL_USE_EXPLICIT_IV(s) &&",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "795:             if (s->method->ssl3_enc->mac(s, &wr[j],",
      "796:                                          &(outbuf[j][wr[j].length + eivlen]),",
      "797:                                          1) < 0)",
      "",
      "[Removed Lines]",
      "794:         if (!SSL_USE_ETM(s) && mac_size != 0) {",
      "",
      "[Added Lines]",
      "794:         if (!SSL_WRITE_ETM(s) && mac_size != 0) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "814:         goto err;",
      "816:     for (j = 0; j < numpipes; j++) {",
      "818:             if (s->method->ssl3_enc->mac(s, &wr[j],",
      "819:                                          outbuf[j] + wr[j].length, 1) < 0)",
      "820:                 goto err;",
      "",
      "[Removed Lines]",
      "817:         if (SSL_USE_ETM(s) && mac_size != 0) {",
      "",
      "[Added Lines]",
      "817:         if (SSL_WRITE_ETM(s) && mac_size != 0) {",
      "",
      "---------------"
    ],
    "ssl/record/ssl3_record.c||ssl/record/ssl3_record.c": [
      "File: ssl/record/ssl3_record.c -> ssl/record/ssl3_record.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "350:         unsigned char *mac;",
      "351:         mac_size = EVP_MD_CTX_size(s->read_hash);",
      "352:         OPENSSL_assert(mac_size <= EVP_MAX_MD_SIZE);",
      "",
      "[Removed Lines]",
      "349:     if (SSL_USE_ETM(s) && s->read_hash) {",
      "",
      "[Added Lines]",
      "349:     if (SSL_READ_ETM(s) && s->read_hash) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "394:     if ((sess != NULL) &&",
      "395:         (s->enc_read_ctx != NULL) &&",
      "398:         unsigned char *mac = NULL;",
      "399:         unsigned char mac_tmp[EVP_MAX_MD_SIZE];",
      "",
      "[Removed Lines]",
      "396:         (EVP_MD_CTX_md(s->read_hash) != NULL) && !SSL_USE_ETM(s)) {",
      "",
      "[Added Lines]",
      "396:         (!SSL_READ_ETM(s) && EVP_MD_CTX_md(s->read_hash) != NULL)) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "823:         }",
      "825:         ret = 1;",
      "827:             mac_size = EVP_MD_CTX_size(s->read_hash);",
      "828:         if ((bs != 1) && !send) {",
      "829:             int tmpret;",
      "",
      "[Removed Lines]",
      "826:         if (!SSL_USE_ETM(s) && EVP_MD_CTX_md(s->read_hash) != NULL)",
      "",
      "[Added Lines]",
      "826:         if (!SSL_READ_ETM(s) && EVP_MD_CTX_md(s->read_hash) != NULL)",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "997:     header[11] = (rec->length) >> 8;",
      "998:     header[12] = (rec->length) & 0xff;",
      "1001:         EVP_CIPHER_CTX_mode(ssl->enc_read_ctx) == EVP_CIPH_CBC_MODE &&",
      "1002:         ssl3_cbc_record_digest_supported(mac_ctx)) {",
      "",
      "[Removed Lines]",
      "1000:     if (!send && !SSL_USE_ETM(ssl) &&",
      "",
      "[Added Lines]",
      "1000:     if (!send && !SSL_READ_ETM(ssl) &&",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1022:             EVP_MD_CTX_free(hmac);",
      "1023:             return -1;",
      "1024:         }",
      "1026:             if (!tls_fips_digest_extra(ssl->enc_read_ctx,",
      "1027:                                        mac_ctx, rec->input,",
      "1028:                                        rec->length, rec->orig_len)) {",
      "",
      "[Removed Lines]",
      "1025:         if (!send && !SSL_USE_ETM(ssl) && FIPS_mode())",
      "",
      "[Added Lines]",
      "1025:         if (!send && !SSL_READ_ETM(ssl) && FIPS_mode())",
      "",
      "---------------"
    ],
    "ssl/ssl_locl.h||ssl/ssl_locl.h": [
      "File: ssl/ssl_locl.h -> ssl/ssl_locl.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "378: # define SSL_CLIENT_USE_SIGALGS(s)        \\",
      "379:     SSL_CLIENT_USE_TLS1_2_CIPHERS(s)",
      "384: # define SSL_PKEY_RSA_ENC        0",
      "",
      "[Removed Lines]",
      "381: # define SSL_USE_ETM(s) (s->s3->flags & TLS1_FLAGS_ENCRYPT_THEN_MAC)",
      "",
      "[Added Lines]",
      "381: # define SSL_READ_ETM(s) (s->s3->flags & TLS1_FLAGS_ENCRYPT_THEN_MAC_READ)",
      "382: # define SSL_WRITE_ETM(s) (s->s3->flags & TLS1_FLAGS_ENCRYPT_THEN_MAC_WRITE)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1111:     unsigned char *alpn_client_proto_list;",
      "1112:     unsigned alpn_client_proto_list_len;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1116:     int tlsext_use_etm;",
      "",
      "---------------"
    ],
    "ssl/t1_enc.c||ssl/t1_enc.c": [
      "File: ssl/t1_enc.c -> ssl/t1_enc.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "130: #endif",
      "132:     if (which & SSL3_CC_READ) {",
      "133:         if (s->s3->tmp.new_cipher->algorithm2 & TLS1_STREAM_MAC)",
      "134:             s->mac_flags |= SSL_MAC_FLAG_READ_MAC_STREAM;",
      "135:         else",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "133:         if (s->tlsext_use_etm)",
      "134:             s->s3->flags |= TLS1_FLAGS_ENCRYPT_THEN_MAC_READ;",
      "135:         else",
      "136:             s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC_READ;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "168:         mac_secret = &(s->s3->read_mac_secret[0]);",
      "169:         mac_secret_size = &(s->s3->read_mac_secret_size);",
      "170:     } else {",
      "171:         if (s->s3->tmp.new_cipher->algorithm2 & TLS1_STREAM_MAC)",
      "172:             s->mac_flags |= SSL_MAC_FLAG_WRITE_MAC_STREAM;",
      "173:         else",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "176:         if (s->tlsext_use_etm)",
      "177:             s->s3->flags |= TLS1_FLAGS_ENCRYPT_THEN_MAC_WRITE;",
      "178:         else",
      "179:             s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC_WRITE;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "367:     if (s->s3->tmp.key_block_length != 0)",
      "368:         return (1);",
      "373:         SSLerr(SSL_F_TLS1_SETUP_KEY_BLOCK, SSL_R_CIPHER_OR_HASH_UNAVAILABLE);",
      "374:         return (0);",
      "375:     }",
      "",
      "[Removed Lines]",
      "370:     if (!ssl_cipher_get_evp",
      "371:         (s->session, &c, &hash, &mac_type, &mac_secret_size, &comp,",
      "372:          SSL_USE_ETM(s))) {",
      "",
      "[Added Lines]",
      "380:     if (!ssl_cipher_get_evp(s->session, &c, &hash, &mac_type, &mac_secret_size,",
      "381:                             &comp, s->tlsext_use_etm)) {",
      "",
      "---------------"
    ],
    "ssl/t1_lib.c||ssl/t1_lib.c": [
      "File: ssl/t1_lib.c -> ssl/t1_lib.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1674: #endif",
      "1675:     if (!custom_ext_add(s, 1, &ret, limit, al))",
      "1676:         return NULL;",
      "",
      "[Removed Lines]",
      "1677:     if (s->s3->flags & TLS1_FLAGS_ENCRYPT_THEN_MAC) {",
      "",
      "[Added Lines]",
      "1677:     if (s->tlsext_use_etm) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1683:             || s->s3->tmp.new_cipher->algorithm_enc == SSL_RC4",
      "1684:             || s->s3->tmp.new_cipher->algorithm_enc == SSL_eGOST2814789CNT",
      "1685:             || s->s3->tmp.new_cipher->algorithm_enc == SSL_eGOST2814789CNT12)",
      "1687:         else {",
      "",
      "[Removed Lines]",
      "1686:             s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC;",
      "",
      "[Added Lines]",
      "1686:             s->tlsext_use_etm = 0;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1917:     OPENSSL_free(s->s3->tmp.peer_sigalgs);",
      "1918:     s->s3->tmp.peer_sigalgs = NULL;",
      "1921: #ifndef OPENSSL_NO_SRP",
      "1922:     OPENSSL_free(s->srp_ctx.login);",
      "",
      "[Removed Lines]",
      "1919:     s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC;",
      "",
      "[Added Lines]",
      "1919:     s->tlsext_use_etm = 0;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "2264:         }",
      "2265: #endif",
      "2266:         else if (type == TLSEXT_TYPE_encrypt_then_mac)",
      "",
      "[Removed Lines]",
      "2267:             s->s3->flags |= TLS1_FLAGS_ENCRYPT_THEN_MAC;",
      "",
      "[Added Lines]",
      "2267:             s->tlsext_use_etm = 1;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "2366:                              SSL_DTLSEXT_HB_DONT_SEND_REQUESTS);",
      "2367: #endif",
      "2371:     s->s3->flags &= ~TLS1_FLAGS_RECEIVED_EXTMS;",
      "",
      "[Removed Lines]",
      "2369:     s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC;",
      "",
      "[Added Lines]",
      "2369:     s->tlsext_use_etm = 0;",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "2586:             if (s->s3->tmp.new_cipher->algorithm_mac != SSL_AEAD",
      "2587:                 && s->s3->tmp.new_cipher->algorithm_enc != SSL_RC4)",
      "2589:         } else if (type == TLSEXT_TYPE_extended_master_secret) {",
      "2590:             s->s3->flags |= TLS1_FLAGS_RECEIVED_EXTMS;",
      "2591:             if (!s->hit)",
      "",
      "[Removed Lines]",
      "2588:                 s->s3->flags |= TLS1_FLAGS_ENCRYPT_THEN_MAC;",
      "",
      "[Added Lines]",
      "2588:                 s->tlsext_use_etm = 1;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b5c8f42c9b9fce5d1b14866306e7a11e16275942",
      "candidate_info": {
        "commit_hash": "b5c8f42c9b9fce5d1b14866306e7a11e16275942",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/b5c8f42c9b9fce5d1b14866306e7a11e16275942",
        "files": [
          "doc/ssl/SSL_COMP_add_compression_method.pod",
          "include/openssl/ssl.h",
          "ssl/ssl_ciph.c",
          "test/ssltest_old.c",
          "util/libssl.num"
        ],
        "message": "Remove a hack from ssl_test_old\n\nssl_test_old was reaching inside the SSL structure and changing the internal\nBIO values. This is completely unneccessary, and was causing an abort in the\ntest when enabling TLSv1.3.\n\nI also removed the need for ssl_test_old to include ssl_locl.h. This\nrequired the addition of some missing accessors for SSL_COMP name and id\nfields.\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(cherry picked from commit e304d3e20f45243f9e643607edfe4db49c329596)",
        "before_after_code_files": [
          "include/openssl/ssl.h||include/openssl/ssl.h",
          "ssl/ssl_ciph.c||ssl/ssl_ciph.c",
          "test/ssltest_old.c||test/ssltest_old.c",
          "util/libssl.num||util/libssl.num"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/openssl/ssl.h||include/openssl/ssl.h": [
          "File: include/openssl/ssl.h -> include/openssl/ssl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1777: __owur const COMP_METHOD *SSL_get_current_compression(SSL *s);",
          "1778: __owur const COMP_METHOD *SSL_get_current_expansion(SSL *s);",
          "1779: __owur const char *SSL_COMP_get_name(const COMP_METHOD *comp);",
          "1780: STACK_OF(SSL_COMP) *SSL_COMP_get_compression_methods(void);",
          "1781: __owur STACK_OF(SSL_COMP) *SSL_COMP_set0_compression_methods(STACK_OF(SSL_COMP)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1780: __owur const char *SSL_COMP_get0_name(const SSL_COMP *comp);",
          "1781: __owur int SSL_COMP_get_id(const SSL_COMP *comp);",
          "",
          "---------------"
        ],
        "ssl/ssl_ciph.c||ssl/ssl_ciph.c": [
          "File: ssl/ssl_ciph.c -> ssl/ssl_ciph.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1868: #endif",
          "1869: }",
          "1872: int ssl_cipher_get_cert_index(const SSL_CIPHER *c)",
          "1873: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1871: const char *SSL_COMP_get0_name(const SSL_COMP *comp)",
          "1872: {",
          "1873: #ifndef OPENSSL_NO_COMP",
          "1874:     return comp->name;",
          "1875: #else",
          "1876:     return NULL;",
          "1877: #endif",
          "1878: }",
          "1880: int SSL_COMP_get_id(const SSL_COMP *comp)",
          "1881: {",
          "1882: #ifndef OPENSSL_NO_COMP",
          "1883:     return comp->id;",
          "1884: #else",
          "1885:     return -1;",
          "1886: #endif",
          "1887: }",
          "",
          "---------------"
        ],
        "test/ssltest_old.c||test/ssltest_old.c": [
          "File: test/ssltest_old.c -> test/ssltest_old.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "92: # include <openssl/ct.h>",
          "93: #endif",
          "",
          "[Removed Lines]",
          "95: #include \"../ssl/ssl_locl.h\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1421:         printf(\"Available compression methods:\");",
          "1422:         for (j = 0; j < n; j++) {",
          "1423:             SSL_COMP *c = sk_SSL_COMP_value(ssl_comp_methods, j);",
          "1425:         }",
          "1426:         printf(\"\\n\");",
          "1427:     }",
          "",
          "[Removed Lines]",
          "1424:             printf(\"  %s:%d\", c->name, c->id);",
          "",
          "[Added Lines]",
          "1422:             printf(\"  %s:%d\", SSL_COMP_get0_name(c), SSL_COMP_get_id(c));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2664:     SSL_set_max_send_fragment(c_ssl, max_frag);",
          "2665:     BIO_set_ssl(c_bio, c_ssl, BIO_NOCLOSE);",
          "2667:     SSL_set_accept_state(s_ssl);",
          "2668:     SSL_set_bio(s_ssl, c_to_s, s_to_c);",
          "2669:     SSL_set_max_send_fragment(s_ssl, max_frag);",
          "2670:     BIO_set_ssl(s_bio, s_ssl, BIO_NOCLOSE);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2669:     if (!BIO_up_ref(c_to_s)) {",
          "2671:         c_to_s = NULL;",
          "2672:         s_to_c = NULL;",
          "2673:         goto err;",
          "2674:     }",
          "2675:     if (!BIO_up_ref(s_to_c)) {",
          "2677:         s_to_c = NULL;",
          "2678:         goto err;",
          "2679:     }",
          "2685:     c_to_s = NULL;",
          "2686:     s_to_c = NULL;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2878:     }",
          "2879:     ret = 0;",
          "2880:  err:",
          "2898:     BIO_free(c_to_s);",
          "2899:     BIO_free(s_to_c);",
          "2900:     BIO_free_all(c_bio);",
          "",
          "[Removed Lines]",
          "2889:     if (s_ssl != NULL) {",
          "2890:         s_ssl->rbio = NULL;",
          "2891:         s_ssl->wbio = NULL;",
          "2892:     }",
          "2893:     if (c_ssl != NULL) {",
          "2894:         c_ssl->rbio = NULL;",
          "2895:         c_ssl->wbio = NULL;",
          "2896:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "util/libssl.num||util/libssl.num": [
          "File: util/libssl.num -> util/libssl.num",
          "--- Hunk 1 ---",
          "[Context before]",
          "403: SSL_SESSION_get0_cipher                 404 1_1_0 EXIST::FUNCTION:",
          "404: SSL_SESSION_get0_id_context             405 1_1_0 EXIST::FUNCTION:",
          "405: SSL_SESSION_set1_id                     406 1_1_0 EXIST::FUNCTION:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "406: SSL_COMP_get_id                         412 1_1_0d EXIST::FUNCTION:",
          "407: SSL_COMP_get0_name                      413 1_1_0d EXIST::FUNCTION:",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cc0a813f23136fb1f1aff8bf4cdc831ae3d360d4",
      "candidate_info": {
        "commit_hash": "cc0a813f23136fb1f1aff8bf4cdc831ae3d360d4",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/cc0a813f23136fb1f1aff8bf4cdc831ae3d360d4",
        "files": [
          "crypto/pkcs12/p12_mutl.c"
        ],
        "message": "Fix memory leak in pkcs12 -export\n\nReviewed-by: Andy Polyakov <appro@openssl.org>\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2676)\n(cherry picked from commit 1b8f19379a521ec11ce37e12316dd3edc0acfb82)",
        "before_after_code_files": [
          "crypto/pkcs12/p12_mutl.c||crypto/pkcs12/p12_mutl.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/pkcs12/p12_mutl.c||crypto/pkcs12/p12_mutl.c": [
          "File: crypto/pkcs12/p12_mutl.c -> crypto/pkcs12/p12_mutl.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "204: {",
          "205:     X509_ALGOR *macalg;",
          "207:     if ((p12->mac = PKCS12_MAC_DATA_new()) == NULL)",
          "208:         return PKCS12_ERROR;",
          "209:     if (iter > 1) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "207:     PKCS12_MAC_DATA_free(p12->mac);",
          "208:     p12->mac = NULL;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "52c0c4d13e8220f19eb2b205dc0c30508c4a51a9",
      "candidate_info": {
        "commit_hash": "52c0c4d13e8220f19eb2b205dc0c30508c4a51a9",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/52c0c4d13e8220f19eb2b205dc0c30508c4a51a9",
        "files": [
          "crypto/asn1/a_strnid.c"
        ],
        "message": "Annotate ASN.1 attributes of the jurisdictionCountryName NID\n\nEV Guidelines section 9.2.5 says jurisdictionCountryName follows the\nsame ASN.1 encoding rules as countryName.\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\nReviewed-by: Richard Levitte <levitte@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/3284)\n(cherry picked from commit e8d542121b10158c1bdd5fbe02e0d17c59470cae)",
        "before_after_code_files": [
          "crypto/asn1/a_strnid.c||crypto/asn1/a_strnid.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/asn1/a_strnid.c||crypto/asn1/a_strnid.c": [
          "File: crypto/asn1/a_strnid.c -> crypto/asn1/a_strnid.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "149:     {NID_ms_csp_name, -1, -1, B_ASN1_BMPSTRING, STABLE_NO_MASK},",
          "150:     {NID_rfc822Mailbox, 1, ub_rfc822_mailbox, B_ASN1_IA5STRING,",
          "151:      STABLE_NO_MASK},",
          "152:     {NID_INN, 1, 12, B_ASN1_NUMERICSTRING, STABLE_NO_MASK},",
          "153:     {NID_OGRN, 1, 13, B_ASN1_NUMERICSTRING, STABLE_NO_MASK},",
          "154:     {NID_SNILS, 1, 11, B_ASN1_NUMERICSTRING, STABLE_NO_MASK}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "152:     {NID_jurisdictionCountryName, 2, 2, B_ASN1_PRINTABLESTRING, STABLE_NO_MASK},",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "70b9063cd24904fd3d0b83173c51fdcf34085967",
      "candidate_info": {
        "commit_hash": "70b9063cd24904fd3d0b83173c51fdcf34085967",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/70b9063cd24904fd3d0b83173c51fdcf34085967",
        "files": [
          "apps/enc.c",
          "apps/s_cb.c",
          "apps/s_client.c",
          "crypto/asn1/x_int64.c",
          "e_os.h"
        ],
        "message": "e_os.h: omit PRIu64.\n\nPRIu64 is error-prone with BIO_printf, so introduce and stick to custom\nplatform-neutral macro. 'll' allows to print 64-bit values on *all*\nsupported platforms, but it's problematic with -Wformat -Werror. Hence\nuse 'l' in identifiable LP64 cases.\n\nReviewed-by: Richard Levitte <levitte@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/3148)",
        "before_after_code_files": [
          "apps/enc.c||apps/enc.c",
          "apps/s_cb.c||apps/s_cb.c",
          "apps/s_client.c||apps/s_client.c",
          "crypto/asn1/x_int64.c||crypto/asn1/x_int64.c",
          "e_os.h||e_os.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "apps/enc.c||apps/enc.c": [
          "File: apps/enc.c -> apps/enc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "549:     ret = 0;",
          "550:     if (verbose) {",
          "553:     }",
          "554:  end:",
          "555:     ERR_print_errors(bio_err);",
          "",
          "[Removed Lines]",
          "551:         BIO_printf(bio_err, \"bytes read   :%8\"PRIu64\"\\n\", BIO_number_read(in));",
          "552:         BIO_printf(bio_err, \"bytes written:%8\"PRIu64\"\\n\", BIO_number_written(out));",
          "",
          "[Added Lines]",
          "551:         BIO_printf(bio_err, \"bytes read   :%8\"BIO_PRI64\"u\\n\", BIO_number_read(in));",
          "552:         BIO_printf(bio_err, \"bytes written:%8\"BIO_PRI64\"u\\n\", BIO_number_written(out));",
          "",
          "---------------"
        ],
        "apps/s_cb.c||apps/s_cb.c": [
          "File: apps/s_cb.c -> apps/s_cb.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1002:     int ilen = (int) outlen;",
          "1004:     if (outlen < len || ilen < 0 || outlen != (size_t)ilen) {",
          "1006:                    opt_getprog(), (uint64_t)len);",
          "1007:         exit(1);",
          "1008:     }",
          "",
          "[Removed Lines]",
          "1005:         BIO_printf(bio_err, \"%s: %\" PRIu64 \"-byte buffer too large to hexencode\\n\",",
          "",
          "[Added Lines]",
          "1005:         BIO_printf(bio_err, \"%s: %\"BIO_PRI64\"u-byte buffer too large to hexencode\\n\",",
          "",
          "---------------"
        ],
        "apps/s_client.c||apps/s_client.c": [
          "File: apps/s_client.c -> apps/s_client.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2615: #endif",
          "2617:         BIO_printf(bio,",
          "2620:                    BIO_number_read(SSL_get_rbio(s)),",
          "2621:                    BIO_number_written(SSL_get_wbio(s)));",
          "2622:     }",
          "",
          "[Removed Lines]",
          "2618:                    \"---\\nSSL handshake has read %\" PRIu64",
          "2619:                    \" bytes and written %\" PRIu64 \" bytes\\n\",",
          "",
          "[Added Lines]",
          "2618:                    \"---\\nSSL handshake has read %\"BIO_PRI64\"u\"",
          "2619:                    \" bytes and written %\"BIO_PRI64\"u bytes\\n\",",
          "",
          "---------------"
        ],
        "crypto/asn1/x_int64.c||crypto/asn1/x_int64.c": [
          "File: crypto/asn1/x_int64.c -> crypto/asn1/x_int64.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "79:                         int indent, const ASN1_PCTX *pctx)",
          "80: {",
          "81:     if ((it->size & INTxx_FLAG_SIGNED) == INTxx_FLAG_SIGNED)",
          "84: }",
          "",
          "[Removed Lines]",
          "82:         return BIO_printf(out, \"%jd\\n\", *(int64_t *)pval);",
          "83:     return BIO_printf(out, \"%ju\\n\", *(uint64_t *)pval);",
          "",
          "[Added Lines]",
          "82:         return BIO_printf(out, \"%\"BIO_PRI64\"d\\n\", *(int64_t *)pval);",
          "83:     return BIO_printf(out, \"%\"BIO_PRI64\"u\\n\", *(uint64_t *)pval);",
          "",
          "---------------"
        ],
        "e_os.h||e_os.h": [
          "File: e_os.h -> e_os.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: # endif",
          "45: # endif",
          "47: # if !defined(NDEBUG) && !defined(OPENSSL_NO_STDIO)",
          "",
          "[Removed Lines]",
          "36: # if defined(OPENSSL_SYS_UEFI)",
          "37: #  define PRIu64 \"Lu\"",
          "38: # endif",
          "39: # ifndef PRIu64",
          "40: #  ifdef SIXTY_FOUR_BIT_LONG",
          "41: #   define PRIu64 \"lu\"",
          "42: #  else",
          "43: #   define PRIu64 \"llu\"",
          "44: #  endif",
          "",
          "[Added Lines]",
          "35: # if defined(__LP64__) || (defined(__SIZEOF_LONG__) && __SIZEOF_LONG__==8)",
          "36: #  define BIO_PRI64 \"l\"     /* 'll' does work \"universally\", but 'l' is",
          "38: # else",
          "39: #  define BIO_PRI64 \"ll\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5d0634a93bdc18e753d641c4563cb18f685e148f",
      "candidate_info": {
        "commit_hash": "5d0634a93bdc18e753d641c4563cb18f685e148f",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/5d0634a93bdc18e753d641c4563cb18f685e148f",
        "files": [
          "crypto/asn1/a_digest.c",
          "crypto/asn1/tasn_new.c",
          "crypto/evp/pmeth_lib.c",
          "crypto/ex_data.c",
          "crypto/x509/x_name.c",
          "ssl/statem/statem_srvr.c"
        ],
        "message": "Combined patch against OpenSSL_1_1_0-stable branch for the following issues:\n\nFixed a memory leak in ASN1_digest and ASN1_item_digest.\nReworked error handling in asn1_item_embed_new.\nFixed error handling in int_ctx_new and EVP_PKEY_CTX_dup.\nFixed a memory leak in CRYPTO_free_ex_data.\nReworked error handing in x509_name_ex_d2i, x509_name_encode and x509_name_canon.\nCheck for null pointer in tls_process_cert_verify.\n\nFixes #2103 #2104 #2105 #2109 #2111 #2115\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\nReviewed-by: Richard Levitte <levitte@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2163)",
        "before_after_code_files": [
          "crypto/asn1/a_digest.c||crypto/asn1/a_digest.c",
          "crypto/asn1/tasn_new.c||crypto/asn1/tasn_new.c",
          "crypto/evp/pmeth_lib.c||crypto/evp/pmeth_lib.c",
          "crypto/ex_data.c||crypto/ex_data.c",
          "crypto/x509/x_name.c||crypto/x509/x_name.c",
          "ssl/statem/statem_srvr.c||ssl/statem/statem_srvr.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/asn1/a_digest.c||crypto/asn1/a_digest.c": [
          "File: crypto/asn1/a_digest.c -> crypto/asn1/a_digest.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "37:     p = str;",
          "38:     i2d(data, &p);",
          "41:         return 0;",
          "42:     OPENSSL_free(str);",
          "43:     return (1);",
          "44: }",
          "",
          "[Removed Lines]",
          "40:     if (!EVP_Digest(str, i, md, len, type, NULL))",
          "",
          "[Added Lines]",
          "40:     if (!EVP_Digest(str, i, md, len, type, NULL)) {",
          "41:         OPENSSL_free(str);",
          "43:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "55:     if (!str)",
          "56:         return (0);",
          "59:         return 0;",
          "60:     OPENSSL_free(str);",
          "61:     return (1);",
          "62: }",
          "",
          "[Removed Lines]",
          "58:     if (!EVP_Digest(str, i, md, len, type, NULL))",
          "",
          "[Added Lines]",
          "60:     if (!EVP_Digest(str, i, md, len, type, NULL)) {",
          "61:         OPENSSL_free(str);",
          "63:     }",
          "",
          "---------------"
        ],
        "crypto/asn1/tasn_new.c||crypto/asn1/tasn_new.c": [
          "File: crypto/asn1/tasn_new.c -> crypto/asn1/tasn_new.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "100:         }",
          "101:         asn1_set_choice_selector(pval, -1, it);",
          "102:         if (asn1_cb && !asn1_cb(ASN1_OP_NEW_POST, pval, it, NULL))",
          "104:         break;",
          "106:     case ASN1_ITYPE_NDEF_SEQUENCE:",
          "",
          "[Removed Lines]",
          "103:             goto auxerr;",
          "",
          "[Added Lines]",
          "103:             goto auxerr2;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "125:         }",
          "127:         if (asn1_do_lock(pval, 0, it) < 0)",
          "129:         asn1_enc_init(pval, it);",
          "130:         for (i = 0, tt = it->templates; i < it->tcount; tt++, i++) {",
          "131:             pseqval = asn1_get_field_ptr(pval, tt);",
          "132:             if (!asn1_template_new(pseqval, tt))",
          "134:         }",
          "135:         if (asn1_cb && !asn1_cb(ASN1_OP_NEW_POST, pval, it, NULL))",
          "137:         break;",
          "138:     }",
          "139: #ifndef OPENSSL_NO_CRYPTO_MDEBUG",
          "",
          "[Removed Lines]",
          "128:             goto memerr;",
          "133:                 goto memerr;",
          "136:             goto auxerr;",
          "",
          "[Added Lines]",
          "128:             goto memerr2;",
          "133:                 goto memerr2;",
          "136:             goto auxerr2;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "141: #endif",
          "142:     return 1;",
          "144:  memerr:",
          "145:     ASN1err(ASN1_F_ASN1_ITEM_EMBED_NEW, ERR_R_MALLOC_FAILURE);",
          "146: #ifndef OPENSSL_NO_CRYPTO_MDEBUG",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "144:  memerr2:",
          "145:     ASN1_item_ex_free(pval, it);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "148: #endif",
          "149:     return 0;",
          "151:  auxerr:",
          "152:     ASN1err(ASN1_F_ASN1_ITEM_EMBED_NEW, ASN1_R_AUX_ERROR);",
          "154: #ifndef OPENSSL_NO_CRYPTO_MDEBUG",
          "155:     OPENSSL_mem_debug_pop();",
          "156: #endif",
          "",
          "[Removed Lines]",
          "153:     ASN1_item_ex_free(pval, it);",
          "",
          "[Added Lines]",
          "153:  auxerr2:",
          "154:     ASN1_item_ex_free(pval, it);",
          "",
          "---------------"
        ],
        "crypto/evp/pmeth_lib.c||crypto/evp/pmeth_lib.c": [
          "File: crypto/evp/pmeth_lib.c -> crypto/evp/pmeth_lib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "134:     if (pmeth->init) {",
          "135:         if (pmeth->init(ret) <= 0) {",
          "136:             EVP_PKEY_CTX_free(ret);",
          "137:             return NULL;",
          "138:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "136:             ret->pmeth = NULL;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "258:     if (pctx->pmeth->copy(rctx, pctx) > 0)",
          "259:         return rctx;",
          "261:     EVP_PKEY_CTX_free(rctx);",
          "262:     return NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "262:     rctx->pmeth = NULL;",
          "",
          "---------------"
        ],
        "crypto/ex_data.c||crypto/ex_data.c": [
          "File: crypto/ex_data.c -> crypto/ex_data.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "307:     int mx, i;",
          "308:     EX_CALLBACKS *ip;",
          "309:     void *ptr;",
          "310:     EX_CALLBACK *stack[10];",
          "311:     EX_CALLBACK **storage = NULL;",
          "313:     if ((ip = get_and_lock(class_index)) == NULL)",
          "316:     mx = sk_EX_CALLBACK_num(ip->meth);",
          "317:     if (mx > 0) {",
          "",
          "[Removed Lines]",
          "314:         return;",
          "",
          "[Added Lines]",
          "310:     EX_CALLBACK *f;",
          "315:         goto err;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "325:     }",
          "326:     CRYPTO_THREAD_unlock(ex_data_lock);",
          "332:     for (i = 0; i < mx; i++) {",
          "334:             ptr = CRYPTO_get_ex_data(ad, i);",
          "337:         }",
          "338:     }",
          "340:     if (storage != stack)",
          "341:         OPENSSL_free(storage);",
          "342:     sk_void_free(ad->sk);",
          "343:     ad->sk = NULL;",
          "344: }",
          "",
          "[Removed Lines]",
          "328:     if (mx > 0 && storage == NULL) {",
          "329:         CRYPTOerr(CRYPTO_F_CRYPTO_FREE_EX_DATA, ERR_R_MALLOC_FAILURE);",
          "330:         return;",
          "331:     }",
          "333:         if (storage[i] && storage[i]->free_func) {",
          "335:             storage[i]->free_func(obj, ptr, ad, i,",
          "336:                                   storage[i]->argl, storage[i]->argp);",
          "",
          "[Added Lines]",
          "330:         if (storage != NULL)",
          "331:             f = storage[i];",
          "332:         else {",
          "333:             CRYPTO_THREAD_write_lock(ex_data_lock);",
          "334:             f = sk_EX_CALLBACK_value(ip->meth, i);",
          "335:             CRYPTO_THREAD_unlock(ex_data_lock);",
          "336:         }",
          "337:         if (f != NULL && f->free_func != NULL) {",
          "339:             f->free_func(obj, ptr, ad, i, f->argl, f->argp);",
          "345:  err:",
          "",
          "---------------"
        ],
        "crypto/x509/x_name.c||crypto/x509/x_name.c": [
          "File: crypto/x509/x_name.c -> crypto/x509/x_name.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "126: }",
          "129: {",
          "131: }",
          "133: static int x509_name_ex_d2i(ASN1_VALUE **val,",
          "",
          "[Removed Lines]",
          "128: static void name_entry_stack_free(STACK_OF(X509_NAME_ENTRY) *ents)",
          "130:     sk_X509_NAME_ENTRY_pop_free(ents, X509_NAME_ENTRY_free);",
          "",
          "[Added Lines]",
          "128: static void local_sk_X509_NAME_ENTRY_free(STACK_OF(X509_NAME_ENTRY) *ne)",
          "130:     sk_X509_NAME_ENTRY_free(ne);",
          "131: }",
          "133: static void local_sk_X509_NAME_ENTRY_pop_free(STACK_OF(X509_NAME_ENTRY) *ne)",
          "134: {",
          "135:     sk_X509_NAME_ENTRY_pop_free(ne, X509_NAME_ENTRY_free);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "180:             entry->set = i;",
          "181:             if (!sk_X509_NAME_ENTRY_push(nm.x->entries, entry))",
          "182:                 goto err;",
          "183:         }",
          "184:     }",
          "192:     ret = x509_name_canon(nm.x);",
          "193:     if (!ret)",
          "194:         goto err;",
          "195:     nm.x->modified = 0;",
          "198:     return ret;",
          "200:  err:",
          "210:     ASN1err(ASN1_F_X509_NAME_EX_D2I, ERR_R_NESTED_ASN1_ERROR);",
          "211:     return 0;",
          "212: }",
          "",
          "[Removed Lines]",
          "190:     sk_STACK_OF_X509_NAME_ENTRY_pop_free(intname.s, sk_X509_NAME_ENTRY_free);",
          "191:     intname.s = NULL;",
          "205:     if (intname.s != NULL) {",
          "206:         sk_X509_NAME_ENTRY_zero(nm.x->entries);",
          "207:         sk_STACK_OF_X509_NAME_ENTRY_pop_free(intname.s, name_entry_stack_free);",
          "208:     }",
          "209:     X509_NAME_free(nm.x);",
          "",
          "[Added Lines]",
          "188:             sk_X509_NAME_ENTRY_set(entries, j, NULL);",
          "194:     sk_STACK_OF_X509_NAME_ENTRY_pop_free(intname.s,",
          "195:                                          local_sk_X509_NAME_ENTRY_free);",
          "202:     if (nm.x != NULL)",
          "203:         X509_NAME_free(nm.x);",
          "204:     sk_STACK_OF_X509_NAME_ENTRY_pop_free(intname.s,",
          "205:                                          local_sk_X509_NAME_ENTRY_pop_free);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "232:     return ret;",
          "233: }",
          "245: static int x509_name_encode(X509_NAME *a)",
          "246: {",
          "247:     union {",
          "",
          "[Removed Lines]",
          "235: static void local_sk_X509_NAME_ENTRY_free(STACK_OF(X509_NAME_ENTRY) *ne)",
          "236: {",
          "237:     sk_X509_NAME_ENTRY_free(ne);",
          "238: }",
          "240: static void local_sk_X509_NAME_ENTRY_pop_free(STACK_OF(X509_NAME_ENTRY) *ne)",
          "241: {",
          "242:     sk_X509_NAME_ENTRY_pop_free(ne, X509_NAME_ENTRY_free);",
          "243: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "264:             entries = sk_X509_NAME_ENTRY_new_null();",
          "265:             if (!entries)",
          "266:                 goto memerr;",
          "268:                 goto memerr;",
          "269:             set = entry->set;",
          "270:         }",
          "271:         if (!sk_X509_NAME_ENTRY_push(entries, entry))",
          "",
          "[Removed Lines]",
          "267:             if (!sk_STACK_OF_X509_NAME_ENTRY_push(intname.s, entries))",
          "",
          "[Added Lines]",
          "253:             if (!sk_STACK_OF_X509_NAME_ENTRY_push(intname.s, entries)) {",
          "254:                 sk_X509_NAME_ENTRY_free(entries);",
          "256:             }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "333:             entries = sk_X509_NAME_ENTRY_new_null();",
          "334:             if (!entries)",
          "335:                 goto err;",
          "337:                 goto err;",
          "338:             set = entry->set;",
          "339:         }",
          "340:         tmpentry = X509_NAME_ENTRY_new();",
          "",
          "[Removed Lines]",
          "336:             if (!sk_STACK_OF_X509_NAME_ENTRY_push(intname, entries))",
          "",
          "[Added Lines]",
          "324:             if (!sk_STACK_OF_X509_NAME_ENTRY_push(intname, entries)) {",
          "325:                 sk_X509_NAME_ENTRY_free(entries);",
          "327:             }",
          "",
          "---------------"
        ],
        "ssl/statem/statem_srvr.c||ssl/statem/statem_srvr.c": [
          "File: ssl/statem/statem_srvr.c -> ssl/statem/statem_srvr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2716:     peer = s->session->peer;",
          "2717:     pkey = X509_get0_pubkey(peer);",
          "2718:     type = X509_certificate_type(peer, pkey);",
          "2720:     if (!(type & EVP_PKT_SIGN)) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2718:     if (pkey == NULL) {",
          "2719:         al = SSL_AD_INTERNAL_ERROR;",
          "2720:         goto f_err;",
          "2721:     }",
          "",
          "---------------"
        ]
      }
    }
  ]
}