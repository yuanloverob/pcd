{
  "cve_id": "CVE-2016-6512",
  "cve_desc": "epan/dissectors/packet-wap.c in Wireshark 2.x before 2.0.5 omits an overflow check in the tvb_get_guintvar function, which allows remote attackers to cause a denial of service (infinite loop) via a crafted packet, related to the MMSE, WAP, WBXML, and WSP dissectors.",
  "repo": "wireshark/wireshark",
  "patch_hash": "2193bea3212d74e2a907152055e27d409b59485e",
  "patch_info": {
    "commit_hash": "2193bea3212d74e2a907152055e27d409b59485e",
    "repo": "wireshark/wireshark",
    "commit_url": "https://github.com/wireshark/wireshark/commit/2193bea3212d74e2a907152055e27d409b59485e",
    "files": [
      "epan/dissectors/packet-mmse.c",
      "epan/dissectors/packet-wap.c",
      "epan/dissectors/packet-wap.h",
      "epan/dissectors/packet-wbxml.c",
      "epan/dissectors/packet-wsp.c"
    ],
    "message": "WAP: check that tvb_get_guintvar does not overflow\n\nBug: 12661\nChange-Id: I2ef857d6be6595fd89f3dbb8d41c1c70d550ad93\nReviewed-on: https://code.wireshark.org/review/16665\nReviewed-by: Pascal Quantin <pascal.quantin@gmail.com>\nTested-by: Pascal Quantin <pascal.quantin@gmail.com>\nReviewed-by: Michael Mann <mmann78@netscape.net>\nReviewed-by: Anders Broman <a.broman58@gmail.com>",
    "before_after_code_files": [
      "epan/dissectors/packet-mmse.c||epan/dissectors/packet-mmse.c",
      "epan/dissectors/packet-wap.c||epan/dissectors/packet-wap.c",
      "epan/dissectors/packet-wap.h||epan/dissectors/packet-wap.h",
      "epan/dissectors/packet-wbxml.c||epan/dissectors/packet-wbxml.c",
      "epan/dissectors/packet-wsp.c||epan/dissectors/packet-wsp.c"
    ]
  },
  "patch_diff": {
    "epan/dissectors/packet-mmse.c||epan/dissectors/packet-mmse.c": [
      "File: epan/dissectors/packet-mmse.c -> epan/dissectors/packet-mmse.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "37: #include <epan/packet.h>",
      "38: #include <epan/to_str.h>",
      "39: #include <epan/strutil.h>",
      "40: #include \"packet-wap.h\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "38: #include <epan/expert.h>",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "248: static gint ett_mmse                    = -1;",
      "249: static gint ett_mmse_hdr_details        = -1;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "252: static expert_field ei_mmse_oversized_uintvar = EI_INIT;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "486: static guint",
      "488: {",
      "489:     guint        field;",
      "",
      "[Removed Lines]",
      "487: get_value_length(tvbuff_t *tvb, guint offset, guint *byte_count)",
      "",
      "[Added Lines]",
      "491: get_value_length(tvbuff_t *tvb, guint offset, guint *byte_count, packet_info *pinfo)",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "492:     if (field < 31)",
      "496:         (*byte_count)++;",
      "497:     }",
      "498:     return field;",
      "",
      "[Removed Lines]",
      "495:         field = tvb_get_guintvar(tvb, offset, byte_count);",
      "",
      "[Added Lines]",
      "499:         field = tvb_get_guintvar(tvb, offset, byte_count, pinfo, &ei_mmse_oversized_uintvar);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "513: static guint",
      "515: {",
      "516:     guint        field;",
      "517:     guint        length;",
      "",
      "[Removed Lines]",
      "514: get_encoded_strval(tvbuff_t *tvb, guint offset, const char **strval)",
      "",
      "[Added Lines]",
      "518: get_encoded_strval(tvbuff_t *tvb, guint offset, const char **strval, packet_info *pinfo)",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "520:     field = tvb_get_guint8(tvb, offset);",
      "522:     if (field < 32) {",
      "524:         if (length < 2) {",
      "526:         } else {",
      "",
      "[Removed Lines]",
      "523:         length = get_value_length(tvb, offset, &count);",
      "",
      "[Added Lines]",
      "527:         length = get_value_length(tvb, offset, &count, pinfo);",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "774:                     }",
      "775:                     break;",
      "778:                     if (tree) {",
      "779:                         proto_tree_add_string(mmse_tree, hf_mmse_bcc, tvb,",
      "780:                                 offset - 1, length + 1, strval);",
      "",
      "[Removed Lines]",
      "777:                     length = get_encoded_strval(tvb, offset, &strval);",
      "",
      "[Added Lines]",
      "781:                     length = get_encoded_strval(tvb, offset, &strval, pinfo);",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "782:                     offset += length;",
      "783:                     break;",
      "786:                     if (tree) {",
      "787:                         proto_tree_add_string(mmse_tree, hf_mmse_cc, tvb,",
      "788:                                 offset - 1, length + 1, strval);",
      "",
      "[Removed Lines]",
      "785:                     length = get_encoded_strval(tvb, offset, &strval);",
      "",
      "[Added Lines]",
      "789:                     length = get_encoded_strval(tvb, offset, &strval, pinfo);",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "796:                         if (length == 0x1F) {",
      "797:                             guint length_len = 0;",
      "798:                             length = tvb_get_guintvar(tvb, offset + 1,",
      "800:                             length += 1 + length_len;",
      "801:                         } else {",
      "802:                             length += 1;",
      "",
      "[Removed Lines]",
      "799:                                     &length_len);",
      "",
      "[Added Lines]",
      "803:                                     &length_len, pinfo, &ei_mmse_oversized_uintvar);",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "845:                     field = tvb_get_guint8(tvb, offset + count);",
      "846:                     if (tree) {",
      "847:                         guint            tval;",
      "",
      "[Removed Lines]",
      "844:                     length = get_value_length(tvb, offset, &count);",
      "",
      "[Added Lines]",
      "848:                     length = get_value_length(tvb, offset, &count, pinfo);",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "874:                     field = tvb_get_guint8(tvb, offset + count);",
      "875:                     if (tree) {",
      "876:                         guint            tval;",
      "",
      "[Removed Lines]",
      "873:                     length = get_value_length(tvb, offset, &count);",
      "",
      "[Added Lines]",
      "877:                     length = get_value_length(tvb, offset, &count, pinfo);",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "901:                     if (tree) {",
      "902:                         field = tvb_get_guint8(tvb, offset + count);",
      "903:                         if (field == 0x81) {",
      "",
      "[Removed Lines]",
      "900:                     length = get_value_length(tvb, offset, &count);",
      "",
      "[Added Lines]",
      "904:                     length = get_value_length(tvb, offset, &count, pinfo);",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "906:                                     \"<insert address>\");",
      "907:                         } else {",
      "908:                             (void) get_encoded_strval(tvb, offset + count + 1,",
      "910:                             proto_tree_add_string(mmse_tree, hf_mmse_from, tvb,",
      "911:                                     offset-1, length + count + 1, strval);",
      "912:                         }",
      "",
      "[Removed Lines]",
      "909:                                                       &strval);",
      "",
      "[Added Lines]",
      "913:                                                       &strval, pinfo);",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "992:                         if (length == 0x1F) {",
      "993:                             guint length_len = 0;",
      "994:                             length = tvb_get_guintvar(tvb, offset + 1,",
      "996:                             length += 1 + length_len;",
      "997:                         } else {",
      "998:                             length += 1;",
      "",
      "[Removed Lines]",
      "995:                                     &length_len);",
      "",
      "[Added Lines]",
      "999:                                     &length_len, pinfo, &ei_mmse_oversized_uintvar);",
      "",
      "---------------",
      "--- Hunk 15 ---",
      "[Context before]",
      "1004:                                     \"<Undecoded value for m-mbox-delete-conf>\");",
      "1005:                         }",
      "1006:                     } else {",
      "1008:                         if (tree) {",
      "1009:                             proto_tree_add_string(mmse_tree,",
      "1010:                                     hf_mmse_response_text, tvb, offset - 1,",
      "",
      "[Removed Lines]",
      "1007:                         length = get_encoded_strval(tvb, offset, &strval);",
      "",
      "[Added Lines]",
      "1011:                         length = get_encoded_strval(tvb, offset, &strval, pinfo);",
      "",
      "---------------",
      "--- Hunk 16 ---",
      "[Context before]",
      "1028:                     }",
      "1029:                     break;",
      "1032:                     if (tree) {",
      "1033:                         proto_tree_add_string(mmse_tree, hf_mmse_subject, tvb,",
      "1034:                                 offset - 1, length + 1, strval);",
      "",
      "[Removed Lines]",
      "1031:                     length = get_encoded_strval(tvb, offset, &strval);",
      "",
      "[Added Lines]",
      "1035:                     length = get_encoded_strval(tvb, offset, &strval, pinfo);",
      "",
      "---------------",
      "--- Hunk 17 ---",
      "[Context before]",
      "1036:                     offset += length;",
      "1037:                     break;",
      "1040:                     if (tree) {",
      "1041:                         proto_tree_add_string(mmse_tree, hf_mmse_to, tvb,",
      "1042:                                 offset - 1, length + 1, strval);",
      "",
      "[Removed Lines]",
      "1039:                     length = get_encoded_strval(tvb, offset, &strval);",
      "",
      "[Added Lines]",
      "1043:                     length = get_encoded_strval(tvb, offset, &strval, pinfo);",
      "",
      "---------------",
      "--- Hunk 18 ---",
      "[Context before]",
      "1061:                         if (length == 0x1F) {",
      "1062:                             guint length_len = 0;",
      "1063:                             length = tvb_get_guintvar(tvb, offset + 1,",
      "1065:                             length += 1 + length_len;",
      "1066:                         } else {",
      "1067:                             length += 1;",
      "",
      "[Removed Lines]",
      "1064:                                     &length_len);",
      "",
      "[Added Lines]",
      "1068:                                     &length_len, pinfo, &ei_mmse_oversized_uintvar);",
      "",
      "---------------",
      "--- Hunk 19 ---",
      "[Context before]",
      "1074:                         }",
      "1075:                     } else {",
      "1078:                         if (tree) {",
      "1079:                             proto_tree_add_string(mmse_tree,",
      "1080:                                     hf_mmse_retrieve_text, tvb, offset - 1,",
      "",
      "[Removed Lines]",
      "1077:                         length = get_encoded_strval(tvb, offset, &strval);",
      "",
      "[Added Lines]",
      "1081:                         length = get_encoded_strval(tvb, offset, &strval, pinfo);",
      "",
      "---------------",
      "--- Hunk 20 ---",
      "[Context before]",
      "1106:                     field = tvb_get_guint8(tvb, offset + count);",
      "1107:                     if (tree) {",
      "1108:                         guint            tval;",
      "",
      "[Removed Lines]",
      "1105:                     length = get_value_length(tvb, offset, &count);",
      "",
      "[Added Lines]",
      "1109:                     length = get_value_length(tvb, offset, &count, pinfo);",
      "",
      "---------------",
      "--- Hunk 21 ---",
      "[Context before]",
      "1144:                     break;",
      "1145:                 case MM_PREV_SENT_BY_HDR:",
      "1148:                     if (tree) {",
      "1149:                         guint32 fwd_count, count1, count2;",
      "1150:                         proto_tree *subtree = NULL;",
      "",
      "[Removed Lines]",
      "1147:                     length = get_value_length(tvb, offset, &count);",
      "",
      "[Added Lines]",
      "1151:                     length = get_value_length(tvb, offset, &count, pinfo);",
      "",
      "---------------",
      "--- Hunk 22 ---",
      "[Context before]",
      "1154:                             &count1);",
      "1156:                         count2 = get_encoded_strval(tvb,",
      "1159:                         tii = proto_tree_add_string_format(mmse_tree,",
      "1160:                                 hf_mmse_prev_sent_by,",
      "",
      "[Removed Lines]",
      "1157:                                 offset + count + count1, &strval);",
      "",
      "[Added Lines]",
      "1161:                                 offset + count + count1, &strval, pinfo);",
      "",
      "---------------",
      "--- Hunk 23 ---",
      "[Context before]",
      "1175:                     break;",
      "1176:                 case MM_PREV_SENT_DATE_HDR:",
      "1179:                     if (tree) {",
      "1180:                         guint32 fwd_count, count1, count2;",
      "1181:                         guint            tval;",
      "",
      "[Removed Lines]",
      "1178:                     length = get_value_length(tvb, offset, &count);",
      "",
      "[Added Lines]",
      "1182:                     length = get_value_length(tvb, offset, &count, pinfo);",
      "",
      "---------------",
      "--- Hunk 24 ---",
      "[Context before]",
      "1243:                                 guint length_len = 0;",
      "1244:                                 length = 1 + tvb_get_guintvar(tvb, offset + 1,",
      "1246:                                 length += length_len;",
      "1248:                                 length = 1 + tvb_get_guint8(tvb, offset);",
      "",
      "[Removed Lines]",
      "1245:                                         &length_len);",
      "",
      "[Added Lines]",
      "1249:                                         &length_len, pinfo, &ei_mmse_oversized_uintvar);",
      "",
      "---------------",
      "--- Hunk 25 ---",
      "[Context before]",
      "1647:         &ett_mmse_hdr_details,",
      "1648:     };",
      "1651:     proto_mmse = proto_register_protocol(\"MMS Message Encapsulation\",",
      "1652:                                          \"MMSE\", \"mmse\");",
      "1655:     proto_register_field_array(proto_mmse, hf, array_length(hf));",
      "1656:     proto_register_subtree_array(ett, array_length(ett));",
      "1657: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1654:     static ei_register_info ei[] = {",
      "1655:         { &ei_mmse_oversized_uintvar, { \"mmse.oversized_uintvar\", PI_MALFORMED, PI_ERROR, \"Uintvar is oversized\", EXPFILL }}",
      "1656:     };",
      "1658:     expert_module_t* expert_mmse;",
      "1668:     expert_mmse = expert_register_protocol(proto_mmse);",
      "1669:     expert_register_field_array(expert_mmse, ei, array_length(ei));",
      "",
      "---------------"
    ],
    "epan/dissectors/packet-wap.c||epan/dissectors/packet-wap.c": [
      "File: epan/dissectors/packet-wap.c -> epan/dissectors/packet-wap.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "40: guint",
      "42: {",
      "43:     guint value   = 0;",
      "44:     guint octet;",
      "",
      "[Removed Lines]",
      "41: tvb_get_guintvar (tvbuff_t *tvb, guint offset, guint *octetCount)",
      "",
      "[Added Lines]",
      "41: tvb_get_guintvar (tvbuff_t *tvb, guint offset, guint *octetCount, packet_info *pinfo, expert_field *ei)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "70: #endif",
      "71:     }",
      "73:     if (octetCount != NULL)",
      "74:     {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "73:     if (counter > 5) {",
      "74:         proto_tree_add_expert(NULL, pinfo, ei, tvb, offset, counter);",
      "75:         value = 0;",
      "76:     }",
      "",
      "---------------"
    ],
    "epan/dissectors/packet-wap.h||epan/dissectors/packet-wap.h": [
      "File: epan/dissectors/packet-wap.h -> epan/dissectors/packet-wap.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "31: #include <glib.h>",
      "32: #include <epan/packet.h>",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "33: #include <epan/expert.h>",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "72: guint tvb_get_guintvar (tvbuff_t *, guint , guint *);",
      "",
      "[Added Lines]",
      "73: guint tvb_get_guintvar (tvbuff_t *, guint , guint *, packet_info *, expert_field *);",
      "",
      "---------------"
    ],
    "epan/dissectors/packet-wbxml.c||epan/dissectors/packet-wbxml.c": [
      "File: epan/dissectors/packet-wbxml.c -> epan/dissectors/packet-wbxml.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "177: static expert_field ei_wbxml_data_not_shown = EI_INIT;",
      "178: static expert_field ei_wbxml_content_type_not_supported = EI_INIT;",
      "179: static expert_field ei_wbxml_content_type_disabled = EI_INIT;",
      "182: static gboolean skip_wbxml_token_mapping = FALSE;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "180: static expert_field ei_wbxml_oversized_uintvar = EI_INIT;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "272: static char *",
      "273: default_opaque_binary_tag(tvbuff_t *tvb, guint32 offset,",
      "275: {",
      "277:  char *str = wmem_strdup_printf(wmem_packet_scope(), \"(%u bytes of opaque data)\", data_len);",
      "279:  return str;",
      "",
      "[Removed Lines]",
      "269: typedef char * (* opaque_token_func_ptr)(tvbuff_t *, guint32, guint8, guint8, guint32 *);",
      "270: typedef char * (* opaque_literal_func_ptr)(tvbuff_t *, guint32, const char *, guint8, guint32 *);",
      "274:      guint8 token _U_, guint8 codepage _U_, guint32 *length)",
      "276:  guint32 data_len = tvb_get_guintvar(tvb, offset, length);",
      "",
      "[Added Lines]",
      "270: typedef char * (* opaque_token_func_ptr)(tvbuff_t *, guint32, guint8, guint8, guint32 *, packet_info *);",
      "271: typedef char * (* opaque_literal_func_ptr)(tvbuff_t *, guint32, const char *, guint8, guint32 *, packet_info *);",
      "275:      guint8 token _U_, guint8 codepage _U_, guint32 *length, packet_info *pinfo)",
      "277:  guint32 data_len = tvb_get_guintvar(tvb, offset, length, pinfo, &ei_wbxml_oversized_uintvar);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "282: static char *",
      "283: default_opaque_literal_tag(tvbuff_t *tvb, guint32 offset,",
      "285: {",
      "287:  char *str = wmem_strdup_printf(wmem_packet_scope(), \"(%u bytes of opaque data)\", data_len);",
      "289:  return str;",
      "",
      "[Removed Lines]",
      "284:       const char *token _U_, guint8 codepage _U_, guint32 *length)",
      "286:  guint32 data_len = tvb_get_guintvar(tvb, offset, length);",
      "",
      "[Added Lines]",
      "285:       const char *token _U_, guint8 codepage _U_, guint32 *length, packet_info *pinfo)",
      "287:  guint32 data_len = tvb_get_guintvar(tvb, offset, length, pinfo, &ei_wbxml_oversized_uintvar);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "292: static char *",
      "293: default_opaque_binary_attr(tvbuff_t *tvb, guint32 offset,",
      "295: {",
      "297:  char *str = wmem_strdup_printf(wmem_packet_scope(), \"(%u bytes of opaque data)\", data_len);",
      "299:  return str;",
      "",
      "[Removed Lines]",
      "294:       guint8 token _U_, guint8 codepage _U_, guint32 *length)",
      "296:  guint32 data_len = tvb_get_guintvar(tvb, offset, length);",
      "",
      "[Added Lines]",
      "295:       guint8 token _U_, guint8 codepage _U_, guint32 *length, packet_info *pinfo)",
      "297:  guint32 data_len = tvb_get_guintvar(tvb, offset, length, pinfo, &ei_wbxml_oversized_uintvar);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "302: static char *",
      "303: default_opaque_literal_attr(tvbuff_t *tvb, guint32 offset,",
      "305: {",
      "307:  char *str = wmem_strdup_printf(wmem_packet_scope(), \"(%u bytes of opaque data)\", data_len);",
      "309:  return str;",
      "",
      "[Removed Lines]",
      "304:        const char *token _U_, guint8 codepage _U_, guint32 *length)",
      "306:  guint32 data_len = tvb_get_guintvar(tvb, offset, length);",
      "",
      "[Added Lines]",
      "305:        const char *token _U_, guint8 codepage _U_, guint32 *length, packet_info *pinfo)",
      "307:  guint32 data_len = tvb_get_guintvar(tvb, offset, length, pinfo, &ei_wbxml_oversized_uintvar);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "445: static char *",
      "446: wv_csp10_opaque_binary_tag(tvbuff_t *tvb, guint32 offset,",
      "448: {",
      "450:  char *str = NULL;",
      "452:  switch (codepage) {",
      "",
      "[Removed Lines]",
      "447:       guint8 token, guint8 codepage, guint32 *length)",
      "449:  guint32 data_len = tvb_get_guintvar(tvb, offset, length);",
      "",
      "[Added Lines]",
      "448:       guint8 token, guint8 codepage, guint32 *length, packet_info *pinfo)",
      "450:  guint32 data_len = tvb_get_guintvar(tvb, offset, length, pinfo, &ei_wbxml_oversized_uintvar);",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "508: static char *",
      "509: wv_csp10_opaque_literal_tag(tvbuff_t *tvb, guint32 offset,",
      "511: {",
      "513:  char *str = NULL;",
      "515:  if ( token && ( (strcmp(token, \"Code\") == 0)",
      "",
      "[Removed Lines]",
      "510:        const char *token, guint8 codepage _U_, guint32 *length)",
      "512:  guint32 data_len = tvb_get_guintvar(tvb, offset, length);",
      "",
      "[Added Lines]",
      "511:        const char *token, guint8 codepage _U_, guint32 *length, packet_info *pinfo)",
      "513:  guint32 data_len = tvb_get_guintvar(tvb, offset, length, pinfo, &ei_wbxml_oversized_uintvar);",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "543: static char *",
      "544: wv_csp11_opaque_binary_tag(tvbuff_t *tvb, guint32 offset,",
      "546: {",
      "548:  char *str = NULL;",
      "550:  switch (codepage) {",
      "",
      "[Removed Lines]",
      "545:       guint8 token, guint8 codepage, guint32 *length)",
      "547:  guint32 data_len = tvb_get_guintvar(tvb, offset, length);",
      "",
      "[Added Lines]",
      "546:       guint8 token, guint8 codepage, guint32 *length, packet_info *pinfo)",
      "548:  guint32 data_len = tvb_get_guintvar(tvb, offset, length, pinfo, &ei_wbxml_oversized_uintvar);",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "615: static char *",
      "616: wv_csp11_opaque_literal_tag(tvbuff_t *tvb, guint32 offset,",
      "618: {",
      "620:  char *str = NULL;",
      "622:  if ( token && ( (strcmp(token, \"Code\") == 0)",
      "",
      "[Removed Lines]",
      "617:        const char *token, guint8 codepage _U_, guint32 *length)",
      "619:  guint32 data_len = tvb_get_guintvar(tvb, offset, length);",
      "",
      "[Added Lines]",
      "618:        const char *token, guint8 codepage _U_, guint32 *length, packet_info *pinfo)",
      "620:  guint32 data_len = tvb_get_guintvar(tvb, offset, length, pinfo, &ei_wbxml_oversized_uintvar);",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "652: static char *",
      "653: wv_csp12_opaque_binary_tag(tvbuff_t *tvb, guint32 offset,",
      "655: {",
      "657:  char *str = NULL;",
      "659:  switch (codepage) {",
      "",
      "[Removed Lines]",
      "654:       guint8 token, guint8 codepage, guint32 *length)",
      "656:  guint32 data_len = tvb_get_guintvar(tvb, offset, length);",
      "",
      "[Added Lines]",
      "655:       guint8 token, guint8 codepage, guint32 *length, packet_info *pinfo)",
      "657:  guint32 data_len = tvb_get_guintvar(tvb, offset, length, pinfo, &ei_wbxml_oversized_uintvar);",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "735: static char *",
      "736: wv_csp12_opaque_literal_tag(tvbuff_t *tvb, guint32 offset,",
      "738: {",
      "740:  char *str = NULL;",
      "742:  if ( token && ( (strcmp(token, \"Code\") == 0)",
      "",
      "[Removed Lines]",
      "737:        const char *token, guint8 codepage _U_, guint32 *length)",
      "739:  guint32 data_len = tvb_get_guintvar(tvb, offset, length);",
      "",
      "[Added Lines]",
      "738:        const char *token, guint8 codepage _U_, guint32 *length, packet_info *pinfo)",
      "740:  guint32 data_len = tvb_get_guintvar(tvb, offset, length, pinfo, &ei_wbxml_oversized_uintvar);",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "773: static char *",
      "774: wv_csp13_opaque_binary_tag(tvbuff_t *tvb, guint32 offset,",
      "776: {",
      "778:  char *str = NULL;",
      "780:  switch (codepage)",
      "",
      "[Removed Lines]",
      "775:       guint8 token, guint8 codepage, guint32 *length)",
      "777:  guint32 data_len = tvb_get_guintvar(tvb, offset, length);",
      "",
      "[Added Lines]",
      "776:       guint8 token, guint8 codepage, guint32 *length, packet_info *pinfo)",
      "778:  guint32 data_len = tvb_get_guintvar(tvb, offset, length, pinfo, &ei_wbxml_oversized_uintvar);",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "912: static char *",
      "913: wv_csp13_opaque_literal_tag(tvbuff_t *tvb, guint32 offset,",
      "915: {",
      "917:  char *str = NULL;",
      "919:  if ( token && ( (strcmp(token, \"Code\") == 0)",
      "",
      "[Removed Lines]",
      "914:        const char *token, guint8 codepage _U_, guint32 *length)",
      "916:  guint32 data_len = tvb_get_guintvar(tvb, offset, length);",
      "",
      "[Added Lines]",
      "915:        const char *token, guint8 codepage _U_, guint32 *length, packet_info *pinfo)",
      "917:  guint32 data_len = tvb_get_guintvar(tvb, offset, length, pinfo, &ei_wbxml_oversized_uintvar);",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "970: static char *",
      "971: sic10_opaque_literal_attr(tvbuff_t *tvb, guint32 offset,",
      "973: {",
      "975:  char *str = NULL;",
      "977:  if ( token && ( (strcmp(token, \"created\") == 0)",
      "",
      "[Removed Lines]",
      "972:      const char *token, guint8 codepage _U_, guint32 *length)",
      "974:  guint32 data_len = tvb_get_guintvar(tvb, offset, length);",
      "",
      "[Added Lines]",
      "973:      const char *token, guint8 codepage _U_, guint32 *length, packet_info *pinfo)",
      "975:  guint32 data_len = tvb_get_guintvar(tvb, offset, length, pinfo, &ei_wbxml_oversized_uintvar);",
      "",
      "---------------",
      "--- Hunk 15 ---",
      "[Context before]",
      "990: static char *",
      "991: sic10_opaque_binary_attr(tvbuff_t *tvb, guint32 offset,",
      "993: {",
      "995:  char *str = NULL;",
      "997:  switch (codepage) {",
      "",
      "[Removed Lines]",
      "992:     guint8 token, guint8 codepage, guint32 *length)",
      "994:  guint32 data_len = tvb_get_guintvar(tvb, offset, length);",
      "",
      "[Added Lines]",
      "993:     guint8 token, guint8 codepage, guint32 *length, packet_info *pinfo)",
      "995:  guint32 data_len = tvb_get_guintvar(tvb, offset, length, pinfo, &ei_wbxml_oversized_uintvar);",
      "",
      "---------------",
      "--- Hunk 16 ---",
      "[Context before]",
      "1020: static char *",
      "1021: emnc10_opaque_literal_attr(tvbuff_t *tvb, guint32 offset,",
      "1023: {",
      "1025:  char *str = NULL;",
      "1027:  if ( token && (strcmp(token, \"timestamp\") == 0) )",
      "",
      "[Removed Lines]",
      "1022:       const char *token, guint8 codepage _U_, guint32 *length)",
      "1024:  guint32 data_len = tvb_get_guintvar(tvb, offset, length);",
      "",
      "[Added Lines]",
      "1023:       const char *token, guint8 codepage _U_, guint32 *length, packet_info *pinfo)",
      "1025:  guint32 data_len = tvb_get_guintvar(tvb, offset, length, pinfo, &ei_wbxml_oversized_uintvar);",
      "",
      "---------------",
      "--- Hunk 17 ---",
      "[Context before]",
      "1039: static char *",
      "1040: emnc10_opaque_binary_attr(tvbuff_t *tvb, guint32 offset,",
      "1042: {",
      "1044:  char *str = NULL;",
      "1046:  switch (codepage) {",
      "",
      "[Removed Lines]",
      "1041:      guint8 token, guint8 codepage, guint32 *length)",
      "1043:  guint32 data_len = tvb_get_guintvar(tvb, offset, length);",
      "",
      "[Added Lines]",
      "1042:      guint8 token, guint8 codepage, guint32 *length, packet_info *pinfo)",
      "1044:  guint32 data_len = tvb_get_guintvar(tvb, offset, length, pinfo, &ei_wbxml_oversized_uintvar);",
      "",
      "---------------",
      "--- Hunk 18 ---",
      "[Context before]",
      "7052: static guint32",
      "7054:         guint32 offset, guint32 str_tbl, guint8 level, guint8 *codepage_attr,",
      "7055:         const wbxml_decoding *map)",
      "7056: {",
      "",
      "[Removed Lines]",
      "7053: parse_wbxml_attribute_list_defined (proto_tree *tree, tvbuff_t *tvb,",
      "",
      "[Added Lines]",
      "7054: parse_wbxml_attribute_list_defined (proto_tree *tree, tvbuff_t *tvb, packet_info *pinfo,",
      "",
      "---------------",
      "--- Hunk 19 ---",
      "[Context before]",
      "7091:       level, off - offset));",
      "7092:    return (off - offset);",
      "7095:    proto_tree_add_uint_format(tree, hf_wbxml_entity, tvb, off, 1+len, ent,",
      "7096:           \"  %3d |  Attr | A %3d    | ENTITY                          |     %s'&#%u;'\",",
      "7097:           level, *codepage_attr, Indent (level), ent);",
      "",
      "[Removed Lines]",
      "7094:    ent = tvb_get_guintvar (tvb, off+1, &len);",
      "",
      "[Added Lines]",
      "7095:    ent = tvb_get_guintvar (tvb, off+1, &len, pinfo, &ei_wbxml_oversized_uintvar);",
      "",
      "---------------",
      "--- Hunk 20 ---",
      "[Context before]",
      "7113:    str_len = tvb_strsize (tvb, str_tbl+idx);",
      "7114:    attr_save_known = 0;",
      "7115:    attr_save_literal = tvb_format_text (tvb,",
      "",
      "[Removed Lines]",
      "7112:    idx = tvb_get_guintvar (tvb, off+1, &len);",
      "",
      "[Added Lines]",
      "7113:    idx = tvb_get_guintvar (tvb, off+1, &len, pinfo, &ei_wbxml_oversized_uintvar);",
      "",
      "---------------",
      "--- Hunk 21 ---",
      "[Context before]",
      "7141:    {",
      "7142:     char *s;",
      "7143:     if (map != NULL) {",
      "",
      "[Removed Lines]",
      "7140:    idx = tvb_get_guintvar (tvb, off+1, &len);",
      "",
      "[Added Lines]",
      "7141:    idx = tvb_get_guintvar (tvb, off+1, &len, pinfo, &ei_wbxml_oversized_uintvar);",
      "",
      "---------------",
      "--- Hunk 22 ---",
      "[Context before]",
      "7158:    off += 1+len;",
      "7159:    break;",
      "7162:    str_len = tvb_strsize (tvb, str_tbl+idx);",
      "7163:    str = tvb_format_text (tvb, str_tbl+idx, str_len-1);",
      "7164:    proto_tree_add_string_format(tree, hf_wbxml_str_t, tvb, off, 1+len, str,",
      "",
      "[Removed Lines]",
      "7161:    idx = tvb_get_guintvar (tvb, off+1, &len);",
      "",
      "[Added Lines]",
      "7162:    idx = tvb_get_guintvar (tvb, off+1, &len, pinfo, &ei_wbxml_oversized_uintvar);",
      "",
      "---------------",
      "--- Hunk 23 ---",
      "[Context before]",
      "7185:       if (map->opaque_binary_attr) {",
      "7186:        tmp_str = map->opaque_binary_attr(tvb, off + 1,",
      "7188:       } else {",
      "7189:        tmp_str = default_opaque_binary_attr(tvb, off + 1,",
      "7191:       }",
      "7193:       if (map->opaque_literal_tag) {",
      "7194:        tmp_str = map->opaque_literal_attr(tvb, off + 1,",
      "7196:       } else {",
      "7197:        tmp_str = default_opaque_literal_attr(tvb, off + 1,",
      "7199:       }",
      "7200:      }",
      "7201:      proto_tree_add_bytes_format(tree, hf_wbxml_opaque_data, tvb, off, 1 + len, NULL,",
      "",
      "[Removed Lines]",
      "7187:                attr_save_known, *codepage_attr, &len);",
      "7190:            attr_save_known, *codepage_attr, &len);",
      "7195:                 attr_save_literal, *codepage_attr, &len);",
      "7198:             attr_save_literal, *codepage_attr, &len);",
      "",
      "[Added Lines]",
      "7188:                attr_save_known, *codepage_attr, &len, pinfo);",
      "7191:            attr_save_known, *codepage_attr, &len, pinfo);",
      "7196:                 attr_save_literal, *codepage_attr, &len, pinfo);",
      "7199:             attr_save_literal, *codepage_attr, &len, pinfo);",
      "",
      "---------------",
      "--- Hunk 24 ---",
      "[Context before]",
      "7203:             level, *codepage_attr, Indent (level), tmp_str);",
      "7204:      off += 1 + len;",
      "7205:     } else {",
      "7207:      proto_tree_add_bytes_format(tree, hf_wbxml_opaque_data, tvb, off, 1 + len + idx, NULL,",
      "7208:             \"  %3d |  Attr | A %3d    | OPAQUE (Opaque data)            |       %s(%u bytes of opaque data)\",",
      "7209:             level, *codepage_attr, Indent (level), idx);",
      "",
      "[Removed Lines]",
      "7206:      idx = tvb_get_guintvar (tvb, off+1, &len);",
      "",
      "[Added Lines]",
      "7207:      idx = tvb_get_guintvar (tvb, off+1, &len, pinfo, &ei_wbxml_oversized_uintvar);",
      "",
      "---------------",
      "--- Hunk 25 ---",
      "[Context before]",
      "7287: static guint32",
      "7289:     guint32 str_tbl, guint8 *level, guint8 *codepage_stag, guint8 *codepage_attr,",
      "7290:     const wbxml_decoding *map)",
      "7291: {",
      "",
      "[Removed Lines]",
      "7288: parse_wbxml_tag_defined (proto_tree *tree, tvbuff_t *tvb, guint32 offset,",
      "",
      "[Added Lines]",
      "7289: parse_wbxml_tag_defined (proto_tree *tree, tvbuff_t *tvb, packet_info *pinfo, guint32 offset,",
      "",
      "---------------",
      "--- Hunk 26 ---",
      "[Context before]",
      "7339:    DebugLog((\"STAG: level = %u, Return: len = %u\\n\", *level, off - offset));",
      "7340:    return (off - offset);",
      "7343:    proto_tree_add_uint_format(tree, hf_wbxml_entity, tvb, off, 1+len, ent,",
      "7344:           \"  %3d | Tag   | T %3d    | ENTITY                          | %s'&#%u;'\",",
      "",
      "[Removed Lines]",
      "7342:    ent = tvb_get_guintvar (tvb, off+1, &len);",
      "",
      "[Added Lines]",
      "7343:    ent = tvb_get_guintvar (tvb, off+1, &len, pinfo, &ei_wbxml_oversized_uintvar);",
      "",
      "---------------",
      "--- Hunk 27 ---",
      "[Context before]",
      "7372:    proto_tree_add_none_format(tree, hf_wbxml_pi_xml, tvb, off, 1,",
      "7373:           \"  %3d | Tag   | T %3d    | PI (XML Processing Instruction) | %s<?xml\",",
      "7376:           str_tbl, *level, codepage_attr, map);",
      "7378:    off += len;",
      "",
      "[Removed Lines]",
      "7375:    len = parse_wbxml_attribute_list_defined (tree, tvb, off,",
      "",
      "[Added Lines]",
      "7376:    len = parse_wbxml_attribute_list_defined (tree, tvb, pinfo, off,",
      "",
      "---------------",
      "--- Hunk 28 ---",
      "[Context before]",
      "7395:    {",
      "7396:     char *s;",
      "7397:     if (map)",
      "",
      "[Removed Lines]",
      "7394:    idx = tvb_get_guintvar (tvb, off+1, &len);",
      "",
      "[Added Lines]",
      "7395:    idx = tvb_get_guintvar (tvb, off+1, &len, pinfo, &ei_wbxml_oversized_uintvar);",
      "",
      "---------------",
      "--- Hunk 29 ---",
      "[Context before]",
      "7413:    off += 1+len;",
      "7414:    break;",
      "7417:    str_len = tvb_strsize (tvb, str_tbl+idx);",
      "7418:    str = tvb_format_text (tvb, str_tbl+idx, str_len-1);",
      "7419:    proto_tree_add_string_format(tree, hf_wbxml_str_t, tvb, off, 1+len, str,",
      "",
      "[Removed Lines]",
      "7416:    idx = tvb_get_guintvar (tvb, off+1, &len);",
      "",
      "[Added Lines]",
      "7417:    idx = tvb_get_guintvar (tvb, off+1, &len, pinfo, &ei_wbxml_oversized_uintvar);",
      "",
      "---------------",
      "--- Hunk 30 ---",
      "[Context before]",
      "7440:       if (map->opaque_binary_tag) {",
      "7441:        tmp_str = map->opaque_binary_tag(tvb, off + 1,",
      "7443:       } else {",
      "7444:        tmp_str = default_opaque_binary_tag(tvb, off + 1,",
      "7446:       }",
      "7448:       if (map->opaque_literal_tag) {",
      "7449:        tmp_str = map->opaque_literal_tag(tvb, off + 1,",
      "7451:       } else {",
      "7452:        tmp_str = default_opaque_literal_tag(tvb, off + 1,",
      "7454:       }",
      "7455:      }",
      "7456:      proto_tree_add_bytes_format(tree, hf_wbxml_opaque_data, tvb, off, 1 + len, NULL,",
      "",
      "[Removed Lines]",
      "7442:                tag_save_known, *codepage_stag, &len);",
      "7445:            tag_save_known, *codepage_stag, &len);",
      "7450:                 tag_save_literal, *codepage_stag, &len);",
      "7453:             tag_save_literal, *codepage_stag, &len);",
      "",
      "[Added Lines]",
      "7443:                tag_save_known, *codepage_stag, &len, pinfo);",
      "7446:            tag_save_known, *codepage_stag, &len, pinfo);",
      "7451:                 tag_save_literal, *codepage_stag, &len, pinfo);",
      "7454:             tag_save_literal, *codepage_stag, &len, pinfo);",
      "",
      "---------------",
      "--- Hunk 31 ---",
      "[Context before]",
      "7459:      off += 1 + len;",
      "7460:     } else {",
      "7462:      proto_tree_add_bytes_format(tree, hf_wbxml_opaque_data, tvb, off, 1 + len + idx, NULL,",
      "7463:            \"  %3d | Tag   | T %3d    | OPAQUE (Opaque data)            | %s(%u bytes of opaque data)\",",
      "",
      "[Removed Lines]",
      "7461:      idx = tvb_get_guintvar (tvb, off+1, &len);",
      "",
      "[Added Lines]",
      "7462:      idx = tvb_get_guintvar (tvb, off+1, &len, pinfo, &ei_wbxml_oversized_uintvar);",
      "",
      "---------------",
      "--- Hunk 32 ---",
      "[Context before]",
      "7494:    tag_len = 0;",
      "7496:     DebugLog((\"STAG: LITERAL tag (peek = 0x%02X, off = %u) - TableRef follows!\\n\", peek, off));",
      "7498:     str_len = tvb_strsize (tvb, str_tbl+idx);",
      "7499:     tag_new_literal = (const gchar*)tvb_get_ptr (tvb, str_tbl+idx, str_len);",
      "",
      "[Removed Lines]",
      "7497:     idx = tvb_get_guintvar (tvb, off+1, &tag_len);",
      "",
      "[Added Lines]",
      "7498:     idx = tvb_get_guintvar (tvb, off+1, &tag_len, pinfo, &ei_wbxml_oversized_uintvar);",
      "",
      "---------------",
      "--- Hunk 33 ---",
      "[Context before]",
      "7524:      (*level)++;",
      "7526:                level, codepage_stag, codepage_attr, map);",
      "7527:      off += len;",
      "",
      "[Removed Lines]",
      "7525:      len = parse_wbxml_tag_defined (tree, tvb, off, str_tbl,",
      "",
      "[Added Lines]",
      "7526:      len = parse_wbxml_tag_defined (tree, tvb, pinfo, off, str_tbl,",
      "",
      "---------------",
      "--- Hunk 34 ---",
      "[Context before]",
      "7551:        off += 1 + tag_len;",
      "7552:       }",
      "7554:              off, str_tbl, *level, codepage_attr, map);",
      "7556:       off += len;",
      "",
      "[Removed Lines]",
      "7553:       len = parse_wbxml_attribute_list_defined (tree, tvb,",
      "",
      "[Added Lines]",
      "7554:       len = parse_wbxml_attribute_list_defined (tree, tvb, pinfo,",
      "",
      "---------------",
      "--- Hunk 35 ---",
      "[Context before]",
      "7599:              Indent (*level), tag_new_literal);",
      "7601:       off++;",
      "7603:              off, str_tbl, *level, codepage_attr, map);",
      "7605:       off += len;",
      "",
      "[Removed Lines]",
      "7602:       len = parse_wbxml_attribute_list_defined (tree, tvb,",
      "",
      "[Added Lines]",
      "7603:       len = parse_wbxml_attribute_list_defined (tree, tvb, pinfo,",
      "",
      "---------------",
      "--- Hunk 36 ---",
      "[Context before]",
      "7618:              \"  %3d | Tag   | T %3d    | LITERAL_A  (Literal Tag)   (A.) | %s<%s\",",
      "7620:       off += 1 + tag_len;",
      "7622:              off, str_tbl, *level, codepage_attr, map);",
      "7624:       off += len;",
      "",
      "[Removed Lines]",
      "7621:       len = parse_wbxml_attribute_list_defined (tree, tvb,",
      "",
      "[Added Lines]",
      "7622:       len = parse_wbxml_attribute_list_defined (tree, tvb, pinfo,",
      "",
      "---------------",
      "--- Hunk 37 ---",
      "[Context before]",
      "7725:  if (! publicid) {",
      "7728:   publicid_len += len;",
      "7729:  }",
      "7730:  offset = 1 + publicid_len;",
      "",
      "[Removed Lines]",
      "7724:  publicid = tvb_get_guintvar(tvb, 1, &publicid_len);",
      "7727:   publicid_index = tvb_get_guintvar (tvb, 1+publicid_len, &len);",
      "",
      "[Added Lines]",
      "7725:  publicid = tvb_get_guintvar(tvb, 1, &publicid_len, pinfo, &ei_wbxml_oversized_uintvar);",
      "7728:   publicid_index = tvb_get_guintvar (tvb, 1+publicid_len, &len, pinfo, &ei_wbxml_oversized_uintvar);",
      "",
      "---------------",
      "--- Hunk 38 ---",
      "[Context before]",
      "7743:   offset += charset_len;",
      "7744:   break;",
      "",
      "[Removed Lines]",
      "7742:   charset = tvb_get_guintvar (tvb, offset, &charset_len);",
      "",
      "[Added Lines]",
      "7743:   charset = tvb_get_guintvar (tvb, offset, &charset_len, pinfo, &ei_wbxml_oversized_uintvar);",
      "",
      "---------------",
      "--- Hunk 39 ---",
      "[Context before]",
      "7749:  }",
      "",
      "[Removed Lines]",
      "7752:  tvb_get_guintvar (tvb, offset, &str_tbl_len_len);",
      "",
      "[Added Lines]",
      "7753:  tvb_get_guintvar (tvb, offset, &str_tbl_len_len, pinfo, &ei_wbxml_oversized_uintvar);",
      "",
      "---------------",
      "--- Hunk 40 ---",
      "[Context before]",
      "7797:   offset += charset_len;",
      "7798:  }",
      "",
      "[Removed Lines]",
      "7800:  str_tbl_len = tvb_get_guintvar (tvb, offset, &len);",
      "",
      "[Added Lines]",
      "7801:  str_tbl_len = tvb_get_guintvar (tvb, offset, &len, pinfo, &ei_wbxml_oversized_uintvar);",
      "",
      "---------------",
      "--- Hunk 41 ---",
      "[Context before]",
      "7858:  len = parse_wbxml_tag_defined (tag_tree,",
      "7860:        &codepage_attr, content_map);",
      "7861: }",
      "",
      "[Removed Lines]",
      "7859:        tvb, offset, str_tbl, &level, &codepage_stag,",
      "",
      "[Added Lines]",
      "7860:        tvb, pinfo, offset, str_tbl, &level, &codepage_stag,",
      "",
      "---------------",
      "--- Hunk 42 ---",
      "[Context before]",
      "8105:   { &ei_wbxml_data_not_shown, { \"wbxml.data_not_shown\", PI_PROTOCOL, PI_NOTE, \"Data representation not shown (edit WBXML preferences to show)\", EXPFILL }},",
      "8106:   { &ei_wbxml_content_type_not_supported, { \"wbxml.content_type.not_supported\", PI_UNDECODED, PI_WARN, \"Rendering of this content type not (yet) supported\", EXPFILL }},",
      "8107:   { &ei_wbxml_content_type_disabled, { \"wbxml.content_type.disabled\", PI_PROTOCOL, PI_NOTE, \"Rendering of this content type has been disabled (edit WBXML preferences to enable)\", EXPFILL }},",
      "8108:  };",
      "8110:  expert_module_t* expert_wbxml;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "8109:   { &ei_wbxml_oversized_uintvar, { \"wbxml.oversized_uintvar\", PI_MALFORMED, PI_ERROR, \"Uintvar is oversized\", EXPFILL }}",
      "",
      "---------------"
    ],
    "epan/dissectors/packet-wsp.c||epan/dissectors/packet-wsp.c": [
      "File: epan/dissectors/packet-wsp.c -> epan/dissectors/packet-wsp.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "380: static expert_field ei_hdr_x_wap_tod = EI_INIT;",
      "381: static expert_field ei_wsp_trailing_quote = EI_INIT;",
      "382: static expert_field ei_wsp_header_invalid = EI_INIT;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "383: static expert_field ei_wsp_oversized_uintvar = EI_INIT;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1291: #define is_uri_value(x)             is_text_string(x)",
      "1293: #define get_uintvar_integer(val,tvb,start,len,ok) \\",
      "1295:     if (len>5) ok = FALSE; else ok = TRUE;",
      "1296: #define get_short_integer(val,tvb,start,len,ok) \\",
      "1297:     val = tvb_get_guint8(tvb,start); \\",
      "",
      "[Removed Lines]",
      "1294:     val = tvb_get_guintvar(tvb,start,&len); \\",
      "",
      "[Added Lines]",
      "1295:     val = tvb_get_guintvar(tvb,start,&len, pinfo, &ei_wsp_oversized_uintvar); \\",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1439:     } else { /* val_start points to 1st byte of length field */ \\",
      "1440:         if (val_id == 0x1F) { /* Value Length = guintvar */ \\",
      "1442:             val_len_len++; /* 0x1F length indicator byte */ \\",
      "1443:         } else { /* Short length followed by Len data octets */ \\",
      "1444:             val_len = tvb_get_guint8(tvb, offset); \\",
      "",
      "[Removed Lines]",
      "1441:             val_len = tvb_get_guintvar(tvb, val_start + 1, &val_len_len); \\",
      "",
      "[Added Lines]",
      "1442:             val_len = tvb_get_guintvar(tvb, val_start + 1, &val_len_len, pinfo, &ei_wsp_oversized_uintvar); \\",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "4529:             tvb, 0, 1, version);",
      "4533:     proto_tree_add_uint(subtree, hf_sir_app_id_list_len,",
      "4534:             tvb, 1, len, val_len);",
      "4535:     offset = 1 + len;",
      "",
      "[Removed Lines]",
      "4532:     val_len = tvb_get_guintvar(tvb, 1, &len);",
      "",
      "[Added Lines]",
      "4533:     val_len = tvb_get_guintvar(tvb, 1, &len, pinfo, &ei_wsp_oversized_uintvar);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "4539:     offset += val_len;",
      "4543:     proto_tree_add_uint(subtree, hf_sir_wsp_contact_points_len,",
      "4544:             tvb, offset, len, val_len);",
      "4545:     offset += len;",
      "",
      "[Removed Lines]",
      "4542:     val_len = tvb_get_guintvar(tvb, offset, &len);",
      "",
      "[Added Lines]",
      "4543:     val_len = tvb_get_guintvar(tvb, offset, &len, pinfo, &ei_wsp_oversized_uintvar);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "4554:     offset += val_len;",
      "4558:     proto_tree_add_uint(subtree, hf_sir_contact_points_len,",
      "4559:             tvb, offset, len, val_len);",
      "4560:     offset += len;",
      "",
      "[Removed Lines]",
      "4557:     val_len = tvb_get_guintvar(tvb, offset, &len);",
      "",
      "[Added Lines]",
      "4558:     val_len = tvb_get_guintvar(tvb, offset, &len, pinfo, &ei_wsp_oversized_uintvar);",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "4565:     offset += val_len;",
      "4569:     proto_tree_add_uint(subtree, hf_sir_protocol_options_len,",
      "4570:             tvb, offset, len, val_len);",
      "4571:     offset += len;",
      "",
      "[Removed Lines]",
      "4568:     val_len = tvb_get_guintvar(tvb, offset, &len);",
      "",
      "[Added Lines]",
      "4569:     val_len = tvb_get_guintvar(tvb, offset, &len, pinfo, &ei_wsp_oversized_uintvar);",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "4575:     val_len_save = val_len;",
      "4576:     for (i = 0; i < val_len_save; i++) {",
      "4578:         proto_tree_add_uint(subtree, hf_sir_protocol_options,",
      "4579:                 tvb, offset, len, val_len);",
      "4580:         offset += len;",
      "4581:     }",
      "4585:     proto_tree_add_uint(subtree, hf_sir_prov_url_len,",
      "4586:             tvb, offset, len, val_len);",
      "4587:     offset += len;",
      "",
      "[Removed Lines]",
      "4577:         val_len = tvb_get_guintvar(tvb, offset, &len);",
      "4584:     val_len = tvb_get_guintvar(tvb, offset, &len);",
      "",
      "[Added Lines]",
      "4578:         val_len = tvb_get_guintvar(tvb, offset, &len, pinfo, &ei_wsp_oversized_uintvar);",
      "4585:     val_len = tvb_get_guintvar(tvb, offset, &len, pinfo, &ei_wsp_oversized_uintvar);",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "4591:     offset += val_len;",
      "4595:     proto_tree_add_uint(subtree, hf_sir_cpi_tag_len,",
      "4596:             tvb, offset, len, val_len);",
      "4597:     offset += len;",
      "",
      "[Removed Lines]",
      "4594:     val_len = tvb_get_guintvar(tvb, offset, &len);",
      "",
      "[Added Lines]",
      "4595:     val_len = tvb_get_guintvar(tvb, offset, &len, pinfo, &ei_wsp_oversized_uintvar);",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "4706:                 offset++;",
      "4707:             } else {",
      "4710:                 proto_tree_add_uint (wsp_tree,",
      "4711:                         hf_wsp_server_session_id,",
      "4712:                         tvb, offset, count, value);",
      "",
      "[Removed Lines]",
      "4709:                 value = tvb_get_guintvar (tvb, offset, &count);",
      "",
      "[Added Lines]",
      "4710:                 value = tvb_get_guintvar (tvb, offset, &count, pinfo, &ei_wsp_oversized_uintvar);",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "4714:                 offset += count;",
      "4715:             }",
      "4718:             proto_tree_add_uint (wsp_tree, hf_capabilities_length,",
      "4719:                     tvb, offset, count, capabilityLength);",
      "4720:             offset += count;",
      "",
      "[Removed Lines]",
      "4717:             capabilityLength = tvb_get_guintvar (tvb, offset, &count);",
      "",
      "[Added Lines]",
      "4718:             capabilityLength = tvb_get_guintvar (tvb, offset, &count, pinfo, &ei_wsp_oversized_uintvar);",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "4722:             if (pdut != WSP_PDU_RESUME)",
      "4723:             {",
      "4726:                 proto_tree_add_uint (wsp_tree, hf_wsp_header_length,",
      "4727:                         tvb, offset, count, headerLength);",
      "4728:                 offset += count;",
      "",
      "[Removed Lines]",
      "4725:                 headerLength = tvb_get_guintvar (tvb, offset, &count);",
      "",
      "[Added Lines]",
      "4726:                 headerLength = tvb_get_guintvar (tvb, offset, &count, pinfo, &ei_wsp_oversized_uintvar);",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "4759:         case WSP_PDU_SUSPEND:",
      "4760:             if (tree) {",
      "4763:                 proto_tree_add_uint (wsp_tree,",
      "4764:                         hf_wsp_server_session_id,",
      "4765:                         tvb, offset, count, value);",
      "",
      "[Removed Lines]",
      "4762:                 value = tvb_get_guintvar (tvb, offset, &count);",
      "",
      "[Added Lines]",
      "4763:                 value = tvb_get_guintvar (tvb, offset, &count, pinfo, &ei_wsp_oversized_uintvar);",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "4774:         case WSP_PDU_TRACE:",
      "4778:             nextOffset = offset + count;",
      "4779:             add_uri (wsp_tree, pinfo, tvb, offset, nextOffset, proto_ti);",
      "4780:             if (tree) {",
      "",
      "[Removed Lines]",
      "4777:             value = tvb_get_guintvar (tvb, offset, &count);",
      "",
      "[Added Lines]",
      "4778:             value = tvb_get_guintvar (tvb, offset, &count, pinfo, &ei_wsp_oversized_uintvar);",
      "",
      "---------------",
      "--- Hunk 15 ---",
      "[Context before]",
      "4788:         case WSP_PDU_PUT:",
      "4789:             uriStart = offset;",
      "4792:             headerStart = uriStart+count;",
      "4795:             offset = headerStart + count;",
      "4797:             add_uri (wsp_tree, pinfo, tvb, uriStart, offset, proto_ti);",
      "",
      "[Removed Lines]",
      "4791:             uriLength = tvb_get_guintvar (tvb, offset, &count);",
      "4794:             headersLength = tvb_get_guintvar (tvb, headerStart, &count);",
      "",
      "[Added Lines]",
      "4792:             uriLength = tvb_get_guintvar (tvb, offset, &count, pinfo, &ei_wsp_oversized_uintvar);",
      "4795:             headersLength = tvb_get_guintvar (tvb, headerStart, &count, pinfo, &ei_wsp_oversized_uintvar);",
      "",
      "---------------",
      "--- Hunk 16 ---",
      "[Context before]",
      "4870:         case WSP_PDU_REPLY:",
      "4873:             headerStart = offset + count + 1;",
      "4874:             {",
      "4875:                 guint8 reply_status = tvb_get_guint8(tvb, offset);",
      "",
      "[Removed Lines]",
      "4872:             headersLength = tvb_get_guintvar (tvb, offset+1, &count);",
      "",
      "[Added Lines]",
      "4873:             headersLength = tvb_get_guintvar (tvb, offset+1, &count, pinfo, &ei_wsp_oversized_uintvar);",
      "",
      "---------------",
      "--- Hunk 17 ---",
      "[Context before]",
      "4960:         case WSP_PDU_PUSH:",
      "4961:         case WSP_PDU_CONFIRMEDPUSH:",
      "4964:             headerStart = offset + count;",
      "4966:             proto_tree_add_uint (wsp_tree, hf_wsp_header_length,",
      "",
      "[Removed Lines]",
      "4963:             headersLength = tvb_get_guintvar (tvb, offset, &count);",
      "",
      "[Added Lines]",
      "4964:             headersLength = tvb_get_guintvar (tvb, offset, &count, pinfo, &ei_wsp_oversized_uintvar);",
      "",
      "---------------",
      "--- Hunk 18 ---",
      "[Context before]",
      "5095:         guint URILenOffset, guint URIOffset, proto_item *proto_ti)",
      "5096: {",
      "5097:     guint  count  = 0;",
      "5099:     gchar *str;",
      "5101:     proto_tree_add_uint (tree, hf_wsp_header_uri_len,",
      "",
      "[Removed Lines]",
      "5098:     guint  uriLen = tvb_get_guintvar (tvb, URILenOffset, &count);",
      "",
      "[Added Lines]",
      "5099:     guint  uriLen = tvb_get_guintvar (tvb, URILenOffset, &count, pinfo, &ei_wsp_oversized_uintvar);",
      "",
      "---------------",
      "--- Hunk 19 ---",
      "[Context before]",
      "5187:         capaLen = capaValueLen + len;",
      "5189:         cap_subtree = proto_tree_add_subtree(wsp_capabilities, tvb, offset, capaLen, ett_capabilities_entry, &cap_item, \"Capability\");",
      "",
      "[Removed Lines]",
      "5186:         capaValueLen = tvb_get_guintvar(tvb, offset, &len);",
      "",
      "[Added Lines]",
      "5187:         capaValueLen = tvb_get_guintvar(tvb, offset, &len, pinfo, &ei_wsp_oversized_uintvar);",
      "",
      "---------------",
      "--- Hunk 20 ---",
      "[Context before]",
      "5245:         switch (peek) {",
      "5246:             case WSP_CAPA_CLIENT_SDU_SIZE:",
      "5248:                 proto_tree_add_uint(cap_subtree, hf_capa_client_sdu_size,",
      "5249:                         tvb, offset, len, value);",
      "5250:                 break;",
      "5251:             case WSP_CAPA_SERVER_SDU_SIZE:",
      "5253:                 proto_tree_add_uint(cap_subtree, hf_capa_server_sdu_size,",
      "5254:                         tvb, offset, len, value);",
      "5255:                 break;",
      "",
      "[Removed Lines]",
      "5247:                 value = tvb_get_guintvar(tvb, offset, &len);",
      "5252:                 value = tvb_get_guintvar(tvb, offset, &len);",
      "",
      "[Added Lines]",
      "5248:                 value = tvb_get_guintvar(tvb, offset, &len, pinfo, &ei_wsp_oversized_uintvar);",
      "5253:                 value = tvb_get_guintvar(tvb, offset, &len, pinfo, &ei_wsp_oversized_uintvar);",
      "",
      "---------------",
      "--- Hunk 21 ---",
      "[Context before]",
      "5352:                         tvb, capaStart, capaLen, ENC_NA);",
      "5353:                 break;",
      "5354:             case WSP_CAPA_CLIENT_MESSAGE_SIZE:",
      "5356:                 proto_tree_add_uint(cap_subtree, hf_capa_client_message_size,",
      "5357:                         tvb, offset, len, value);",
      "5358:                 break;",
      "5359:             case WSP_CAPA_SERVER_MESSAGE_SIZE:",
      "5361:                 proto_tree_add_uint(cap_subtree, hf_capa_server_message_size,",
      "5362:                         tvb, offset, len, value);",
      "5363:                 break;",
      "",
      "[Removed Lines]",
      "5355:                 value = tvb_get_guintvar(tvb, offset, &len);",
      "5360:                 value = tvb_get_guintvar(tvb, offset, &len);",
      "",
      "[Added Lines]",
      "5356:                 value = tvb_get_guintvar(tvb, offset, &len, pinfo, &ei_wsp_oversized_uintvar);",
      "5361:                 value = tvb_get_guintvar(tvb, offset, &len, pinfo, &ei_wsp_oversized_uintvar);",
      "",
      "---------------",
      "--- Hunk 22 ---",
      "[Context before]",
      "5490:     heur_dtbl_entry_t       *hdtbl_entry;",
      "5493:     offset += count;",
      "5494:     if (nEntries)",
      "5495:     {",
      "",
      "[Removed Lines]",
      "5492:     nEntries = tvb_get_guintvar (tvb, offset, &count);",
      "",
      "[Added Lines]",
      "5493:     nEntries = tvb_get_guintvar (tvb, offset, &count, pinfo, &ei_wsp_oversized_uintvar);",
      "",
      "---------------",
      "--- Hunk 23 ---",
      "[Context before]",
      "5499:     while (nEntries--)",
      "5500:     {",
      "5501:         part_start = offset;",
      "5503:         offset += count;",
      "5505:         offset += count;",
      "5507:         ti = proto_tree_add_uint(sub_tree, hf_wsp_mpart, tvb, part_start,",
      "",
      "[Removed Lines]",
      "5502:         HeadersLen = tvb_get_guintvar (tvb, offset, &count);",
      "5504:         DataLen = tvb_get_guintvar (tvb, offset, &count);",
      "",
      "[Added Lines]",
      "5503:         HeadersLen = tvb_get_guintvar (tvb, offset, &count, pinfo, &ei_wsp_oversized_uintvar);",
      "5505:         DataLen = tvb_get_guintvar (tvb, offset, &count, pinfo, &ei_wsp_oversized_uintvar);",
      "",
      "---------------",
      "--- Hunk 24 ---",
      "[Context before]",
      "7157:       { &ei_wsp_undecoded_parameter, { \"wsp.undecoded_parameter\", PI_UNDECODED, PI_WARN, \"Invalid parameter value\", EXPFILL }},",
      "7158:       { &ei_wsp_trailing_quote, { \"wsp.trailing_quote\", PI_PROTOCOL, PI_WARN, \"Quoted-string value has been encoded with a trailing quote\", EXPFILL }},",
      "7159:       { &ei_wsp_header_invalid, { \"wsp.header_invalid\", PI_MALFORMED, PI_ERROR, \"Malformed header\", EXPFILL }},",
      "7160:     };",
      "7162:     expert_module_t* expert_wsp;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "7161:       { &ei_wsp_oversized_uintvar, { \"wsp.oversized_uintvar\", PI_MALFORMED, PI_ERROR, \"Uintvar is oversized\", EXPFILL }}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b9a7fc1b90711d66c32550a320ac386704825b88",
      "candidate_info": {
        "commit_hash": "b9a7fc1b90711d66c32550a320ac386704825b88",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/b9a7fc1b90711d66c32550a320ac386704825b88",
        "files": [
          "epan/dissectors/packet-wbxml.c"
        ],
        "message": "WBXML: limit the recursion level\n\nBug: 12663\nChange-Id: Ibbab2f20f4eda9f42ea0ea5e88dcf553cce1b55c\nReviewed-on: https://code.wireshark.org/review/16670\nReviewed-by: Pascal Quantin <pascal.quantin@gmail.com>\nPetri-Dish: Pascal Quantin <pascal.quantin@gmail.com>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Anders Broman <a.broman58@gmail.com>\n(cherry picked from commit 347f071f1b9180563c28b0f3d0627b91eb456c72)\nReviewed-on: https://code.wireshark.org/review/16687",
        "before_after_code_files": [
          "epan/dissectors/packet-wbxml.c||epan/dissectors/packet-wbxml.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-wbxml.c||epan/dissectors/packet-wbxml.c"
          ],
          "candidate": [
            "epan/dissectors/packet-wbxml.c||epan/dissectors/packet-wbxml.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-wbxml.c||epan/dissectors/packet-wbxml.c": [
          "File: epan/dissectors/packet-wbxml.c -> epan/dissectors/packet-wbxml.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "178: static expert_field ei_wbxml_content_type_not_supported = EI_INIT;",
          "179: static expert_field ei_wbxml_content_type_disabled = EI_INIT;",
          "180: static expert_field ei_wbxml_oversized_uintvar = EI_INIT;",
          "183: static gboolean skip_wbxml_token_mapping = FALSE;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "181: static expert_field ei_wbxml_too_much_recursion = EI_INIT;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "7309:            The initial state is FALSE.",
          "7312:  DebugLog((\"parse_wbxml_tag_defined (level = %u, offset = %u)\\n\", *level, offset));",
          "7313:  while (off < tvb_len) {",
          "7314:   peek = tvb_get_guint8 (tvb, off);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7313:  if (*level == 255) {",
          "7314:   proto_tree_add_expert(tree, pinfo, &ei_wbxml_too_much_recursion, tvb, offset, tvb_captured_length_remaining(tvb, offset));",
          "7315:   return tvb_len;",
          "7316:  }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "8106:   { &ei_wbxml_data_not_shown, { \"wbxml.data_not_shown\", PI_PROTOCOL, PI_NOTE, \"Data representation not shown (edit WBXML preferences to show)\", EXPFILL }},",
          "8107:   { &ei_wbxml_content_type_not_supported, { \"wbxml.content_type.not_supported\", PI_UNDECODED, PI_WARN, \"Rendering of this content type not (yet) supported\", EXPFILL }},",
          "8108:   { &ei_wbxml_content_type_disabled, { \"wbxml.content_type.disabled\", PI_PROTOCOL, PI_NOTE, \"Rendering of this content type has been disabled (edit WBXML preferences to enable)\", EXPFILL }},",
          "8110:  };",
          "8112:  expert_module_t* expert_wbxml;",
          "",
          "[Removed Lines]",
          "8109:   { &ei_wbxml_oversized_uintvar, { \"wbxml.oversized_uintvar\", PI_MALFORMED, PI_ERROR, \"Uintvar is oversized\", EXPFILL }}",
          "",
          "[Added Lines]",
          "8114:   { &ei_wbxml_oversized_uintvar, { \"wbxml.oversized_uintvar\", PI_MALFORMED, PI_ERROR, \"Uintvar is oversized\", EXPFILL }},",
          "8115:   { &ei_wbxml_too_much_recursion, { \"wbxml.too_much_recursion\", PI_UNDECODED, PI_WARN, \"Too much recursion\", EXPFILL }}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b1160350fe63d38550436e92674d0a3fe1bda1ed",
      "candidate_info": {
        "commit_hash": "b1160350fe63d38550436e92674d0a3fe1bda1ed",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/b1160350fe63d38550436e92674d0a3fe1bda1ed",
        "files": [
          "epan/dissectors/packet-wbxml.c"
        ],
        "message": "WBXML: limit the recursion level\n\nBug: 12663\nChange-Id: Ibbab2f20f4eda9f42ea0ea5e88dcf553cce1b55c\nReviewed-on: https://code.wireshark.org/review/16670\nReviewed-by: Pascal Quantin <pascal.quantin@gmail.com>\nPetri-Dish: Pascal Quantin <pascal.quantin@gmail.com>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Anders Broman <a.broman58@gmail.com>\n(cherry picked from commit 347f071f1b9180563c28b0f3d0627b91eb456c72)\nReviewed-on: https://code.wireshark.org/review/16689",
        "before_after_code_files": [
          "epan/dissectors/packet-wbxml.c||epan/dissectors/packet-wbxml.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-wbxml.c||epan/dissectors/packet-wbxml.c"
          ],
          "candidate": [
            "epan/dissectors/packet-wbxml.c||epan/dissectors/packet-wbxml.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-wbxml.c||epan/dissectors/packet-wbxml.c": [
          "File: epan/dissectors/packet-wbxml.c -> epan/dissectors/packet-wbxml.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "176: static expert_field ei_wbxml_content_type_not_supported = EI_INIT;",
          "177: static expert_field ei_wbxml_content_type_disabled = EI_INIT;",
          "178: static expert_field ei_wbxml_oversized_uintvar = EI_INIT;",
          "181: static gboolean skip_wbxml_token_mapping = FALSE;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "179: static expert_field ei_wbxml_too_much_recursion = EI_INIT;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "7306:                  The initial state is FALSE.",
          "7309:  DebugLog((\"parse_wbxml_tag_defined (level = %u, offset = %u)\\n\", *level, offset));",
          "7310:  while (off < tvb_len) {",
          "7311:   peek = tvb_get_guint8 (tvb, off);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7310:  if (*level == 255) {",
          "7311:   proto_tree_add_expert(tree, pinfo, &ei_wbxml_too_much_recursion, tvb, offset, tvb_captured_length_remaining(tvb, offset));",
          "7312:   return tvb_len;",
          "7313:  }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "8100:   { &ei_wbxml_data_not_shown, { \"wbxml.data_not_shown\", PI_PROTOCOL, PI_NOTE, \"Data representation not shown (edit WBXML preferences to show)\", EXPFILL }},",
          "8101:   { &ei_wbxml_content_type_not_supported, { \"wbxml.content_type.not_supported\", PI_UNDECODED, PI_WARN, \"Rendering of this content type not (yet) supported\", EXPFILL }},",
          "8102:   { &ei_wbxml_content_type_disabled, { \"wbxml.content_type.disabled\", PI_PROTOCOL, PI_NOTE, \"Rendering of this content type has been disabled (edit WBXML preferences to enable)\", EXPFILL }},",
          "8104:  };",
          "8106:  expert_module_t* expert_wbxml;",
          "",
          "[Removed Lines]",
          "8103:   { &ei_wbxml_oversized_uintvar, { \"wbxml.oversized_uintvar\", PI_MALFORMED, PI_ERROR, \"Uintvar is oversized\", EXPFILL }}",
          "",
          "[Added Lines]",
          "8108:   { &ei_wbxml_oversized_uintvar, { \"wbxml.oversized_uintvar\", PI_MALFORMED, PI_ERROR, \"Uintvar is oversized\", EXPFILL }},",
          "8109:   { &ei_wbxml_too_much_recursion, { \"wbxml.too_much_recursion\", PI_UNDECODED, PI_WARN, \"Too much recursion\", EXPFILL }}",
          "",
          "---------------"
        ]
      }
    }
  ]
}