{
  "cve_id": "CVE-2013-4358",
  "cve_desc": "libavcodec/h264.c in FFmpeg before 0.11.4 allows remote attackers to cause a denial of service (crash) via vectors related to alternating bit depths in H.264 data.",
  "repo": "FFmpeg/FFmpeg",
  "patch_hash": "072be3e8969f24113d599444be4d6a0ed04a6602",
  "patch_info": {
    "commit_hash": "072be3e8969f24113d599444be4d6a0ed04a6602",
    "repo": "FFmpeg/FFmpeg",
    "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/072be3e8969f24113d599444be4d6a0ed04a6602",
    "files": [
      "libavcodec/h264.c",
      "libavcodec/h264.h",
      "libavcodec/h264_ps.c"
    ],
    "message": "h264: set parameters from SPS whenever it changes\n\nFixes a crash in the fuzzed sample sample_varPAR.avi_s26638 with\nalternating bit depths.",
    "before_after_code_files": [
      "libavcodec/h264.c||libavcodec/h264.c",
      "libavcodec/h264.h||libavcodec/h264.h",
      "libavcodec/h264_ps.c||libavcodec/h264_ps.c"
    ]
  },
  "patch_diff": {
    "libavcodec/h264.c||libavcodec/h264.c": [
      "File: libavcodec/h264.c -> libavcodec/h264.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2340:     return profile;",
      "2341: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2343: static int h264_set_parameter_from_sps(H264Context *h)",
      "2344: {",
      "2345:     MpegEncContext *s = &h->s;",
      "2347:     if (s->flags & CODEC_FLAG_LOW_DELAY ||",
      "2348:         (h->sps.bitstream_restriction_flag &&",
      "2349:          !h->sps.num_reorder_frames)) {",
      "2350:         if (s->avctx->has_b_frames > 1 || h->delayed_pic[0])",
      "2351:             av_log(h->s.avctx, AV_LOG_WARNING, \"Delayed frames seen. \"",
      "2352:                    \"Reenabling low delay requires a codec flush.\\n\");",
      "2353:         else",
      "2354:             s->low_delay = 1;",
      "2355:     }",
      "2357:     if (s->avctx->has_b_frames < 2)",
      "2358:         s->avctx->has_b_frames = !s->low_delay;",
      "2360:     if (s->avctx->bits_per_raw_sample != h->sps.bit_depth_luma ||",
      "2361:         h->cur_chroma_format_idc      != h->sps.chroma_format_idc) {",
      "2362:         if (s->avctx->codec &&",
      "2363:             s->avctx->codec->capabilities & CODEC_CAP_HWACCEL_VDPAU &&",
      "2364:             (h->sps.bit_depth_luma != 8 || h->sps.chroma_format_idc > 1)) {",
      "2365:             av_log(s->avctx, AV_LOG_ERROR,",
      "2366:                    \"VDPAU decoding does not support video colorspace.\\n\");",
      "2367:             return AVERROR_INVALIDDATA;",
      "2368:         }",
      "2369:         if (h->sps.bit_depth_luma >= 8 && h->sps.bit_depth_luma <= 10) {",
      "2370:             s->avctx->bits_per_raw_sample = h->sps.bit_depth_luma;",
      "2371:             h->cur_chroma_format_idc      = h->sps.chroma_format_idc;",
      "2372:             h->pixel_shift                = h->sps.bit_depth_luma > 8;",
      "2374:             ff_h264dsp_init(&h->h264dsp, h->sps.bit_depth_luma,",
      "2375:                             h->sps.chroma_format_idc);",
      "2376:             ff_h264_pred_init(&h->hpc, s->codec_id, h->sps.bit_depth_luma,",
      "2377:                               h->sps.chroma_format_idc);",
      "2378:             s->dsp.dct_bits = h->sps.bit_depth_luma > 8 ? 32 : 16;",
      "2379:             ff_dsputil_init(&s->dsp, s->avctx);",
      "2380:         } else {",
      "2381:             av_log(s->avctx, AV_LOG_ERROR, \"Unsupported bit depth: %d\\n\",",
      "2382:                    h->sps.bit_depth_luma);",
      "2383:             return AVERROR_INVALIDDATA;",
      "2384:         }",
      "2385:     }",
      "2386:     return 0;",
      "2387: }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "2356:     MpegEncContext *const s0 = &h0->s;",
      "2357:     unsigned int first_mb_in_slice;",
      "2358:     unsigned int pps_id;",
      "2360:     unsigned int slice_type, tmp, i, j;",
      "2361:     int default_ref_list_done = 0;",
      "2362:     int last_pic_structure, last_pic_droppable;",
      "",
      "[Removed Lines]",
      "2359:     int num_ref_idx_active_override_flag, max_refs;",
      "",
      "[Added Lines]",
      "2405:     int num_ref_idx_active_override_flag, max_refs, ret;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "2432:                h->pps.sps_id);",
      "2433:         return -1;",
      "2434:     }",
      "2437:     s->avctx->profile = ff_h264_get_profile(&h->sps);",
      "2438:     s->avctx->level   = h->sps.level_idc;",
      "",
      "[Removed Lines]",
      "2435:     h->sps = *h0->sps_buffers[h->pps.sps_id];",
      "",
      "[Added Lines]",
      "2482:     if (h->pps.sps_id != h->current_sps_id ||",
      "2483:         h0->sps_buffers[h->pps.sps_id]->new) {",
      "2484:         h0->sps_buffers[h->pps.sps_id]->new = 0;",
      "2486:         h->current_sps_id = h->pps.sps_id;",
      "2487:         h->sps            = *h0->sps_buffers[h->pps.sps_id];",
      "2489:         if ((ret = h264_set_parameter_from_sps(h)) < 0)",
      "2490:             return ret;",
      "2491:     }",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "3878:                     ff_h264_decode_seq_parameter_set(h);",
      "3879:                 }",
      "3926:                 }",
      "3927:                 break;",
      "3928:             case NAL_PPS:",
      "",
      "[Removed Lines]",
      "3881:                 if (s->flags & CODEC_FLAG_LOW_DELAY ||",
      "3882:                     (h->sps.bitstream_restriction_flag &&",
      "3883:                      !h->sps.num_reorder_frames)) {",
      "3884:                     if (s->avctx->has_b_frames > 1 || h->delayed_pic[0])",
      "3885:                         av_log(avctx, AV_LOG_WARNING, \"Delayed frames seen \"",
      "3886:                                \"reenabling low delay requires a codec \"",
      "3887:                                \"flush.\\n\");",
      "3888:                         else",
      "3889:                             s->low_delay = 1;",
      "3890:                 }",
      "3892:                 if (avctx->has_b_frames < 2)",
      "3893:                     avctx->has_b_frames = !s->low_delay;",
      "3895:                 if (avctx->bits_per_raw_sample != h->sps.bit_depth_luma ||",
      "3896:                     h->cur_chroma_format_idc   != h->sps.chroma_format_idc) {",
      "3897:                     if (s->avctx->codec &&",
      "3898:                         s->avctx->codec->capabilities & CODEC_CAP_HWACCEL_VDPAU",
      "3899:                         && (h->sps.bit_depth_luma != 8 ||",
      "3900:                             h->sps.chroma_format_idc > 1)) {",
      "3901:                         av_log(avctx, AV_LOG_ERROR,",
      "3902:                                \"VDPAU decoding does not support video \"",
      "3903:                                \"colorspace\\n\");",
      "3904:                         buf_index = -1;",
      "3905:                         goto end;",
      "3906:                     }",
      "3907:                     if (h->sps.bit_depth_luma >= 8 && h->sps.bit_depth_luma <= 10) {",
      "3908:                         avctx->bits_per_raw_sample = h->sps.bit_depth_luma;",
      "3909:                         h->cur_chroma_format_idc   = h->sps.chroma_format_idc;",
      "3910:                         h->pixel_shift             = h->sps.bit_depth_luma > 8;",
      "3912:                         ff_h264dsp_init(&h->h264dsp, h->sps.bit_depth_luma,",
      "3913:                                         h->sps.chroma_format_idc);",
      "3914:                         ff_h264_pred_init(&h->hpc, s->codec_id,",
      "3915:                                           h->sps.bit_depth_luma,",
      "3916:                                           h->sps.chroma_format_idc);",
      "3917:                         s->dsp.dct_bits = h->sps.bit_depth_luma > 8 ? 32 : 16;",
      "3918:                         ff_dsputil_init(&s->dsp, s->avctx);",
      "3919:                     } else {",
      "3920:                         av_log(avctx, AV_LOG_ERROR,",
      "3921:                                \"Unsupported bit depth: %d\\n\",",
      "3922:                                h->sps.bit_depth_luma);",
      "3923:                         buf_index = -1;",
      "3924:                         goto end;",
      "3925:                     }",
      "",
      "[Added Lines]",
      "3937:                 if (h264_set_parameter_from_sps(h) < 0) {",
      "3938:                     buf_index = -1;",
      "3939:                     goto end;",
      "",
      "---------------"
    ],
    "libavcodec/h264.h||libavcodec/h264.h": [
      "File: libavcodec/h264.h -> libavcodec/h264.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "203:     int bit_depth_chroma;                 ///< bit_depth_chroma_minus8 + 8",
      "204:     int residual_color_transform_flag;    ///< residual_colour_transform_flag",
      "205:     int constraint_set_flags;             ///< constraint_set[0-3]_flag",
      "206: } SPS;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "206:     int new;                              ///< flag to keep track if the decoder context needs re-init due to changed SPS",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "329:     int emu_edge_width;",
      "330:     int emu_edge_height;",
      "332:     SPS sps; ///< current sps",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "333:     unsigned current_sps_id; ///< id of the current SPS",
      "",
      "---------------"
    ],
    "libavcodec/h264_ps.c||libavcodec/h264_ps.c": [
      "File: libavcodec/h264_ps.c -> libavcodec/h264_ps.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "459:                sps->timing_info_present_flag ? sps->time_scale : 0",
      "460:                );",
      "461:     }",
      "463:     av_free(h->sps_buffers[sps_id]);",
      "466:     return 0;",
      "467: fail:",
      "468:     av_free(sps);",
      "",
      "[Removed Lines]",
      "464:     h->sps_buffers[sps_id]= sps;",
      "465:     h->sps = *sps;",
      "",
      "[Added Lines]",
      "462:     sps->new = 1;",
      "465:     h->sps_buffers[sps_id] = sps;",
      "466:     h->sps                 = *sps;",
      "467:     h->current_sps_id      = sps_id;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "6f4404b24bcf59ab29cd4b57995d374a578f51a7",
      "candidate_info": {
        "commit_hash": "6f4404b24bcf59ab29cd4b57995d374a578f51a7",
        "repo": "FFmpeg/FFmpeg",
        "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/6f4404b24bcf59ab29cd4b57995d374a578f51a7",
        "files": [
          "libavcodec/h264.c",
          "libavcodec/h264.h",
          "libavcodec/h264_ps.c"
        ],
        "message": "h264: set parameters from SPS whenever it changes\n\nFixes a crash in the fuzzed sample sample_varPAR.avi_s26638 with\nalternating bit depths.",
        "before_after_code_files": [
          "libavcodec/h264.c||libavcodec/h264.c",
          "libavcodec/h264.h||libavcodec/h264.h",
          "libavcodec/h264_ps.c||libavcodec/h264_ps.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "libavcodec/h264.c||libavcodec/h264.c",
            "libavcodec/h264.h||libavcodec/h264.h",
            "libavcodec/h264_ps.c||libavcodec/h264_ps.c"
          ],
          "candidate": [
            "libavcodec/h264.c||libavcodec/h264.c",
            "libavcodec/h264.h||libavcodec/h264.h",
            "libavcodec/h264_ps.c||libavcodec/h264_ps.c"
          ]
        }
      },
      "candidate_diff": {
        "libavcodec/h264.c||libavcodec/h264.c": [
          "File: libavcodec/h264.c -> libavcodec/h264.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2623:     return profile;",
          "2624: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2626: static int h264_set_parameter_from_sps(H264Context *h)",
          "2627: {",
          "2628:     MpegEncContext *s = &h->s;",
          "2630:     if (s->flags & CODEC_FLAG_LOW_DELAY ||",
          "2631:         (h->sps.bitstream_restriction_flag &&",
          "2632:          !h->sps.num_reorder_frames)) {",
          "2633:         if (s->avctx->has_b_frames > 1 || h->delayed_pic[0])",
          "2634:             av_log(h->s.avctx, AV_LOG_WARNING, \"Delayed frames seen. \"",
          "2635:                    \"Reenabling low delay requires a codec flush.\\n\");",
          "2636:         else",
          "2637:             s->low_delay = 1;",
          "2638:     }",
          "2640:     if (s->avctx->has_b_frames < 2)",
          "2641:         s->avctx->has_b_frames = !s->low_delay;",
          "2643:     if (s->avctx->bits_per_raw_sample != h->sps.bit_depth_luma ||",
          "2644:         h->cur_chroma_format_idc      != h->sps.chroma_format_idc) {",
          "2645:         if (s->avctx->codec &&",
          "2646:             s->avctx->codec->capabilities & CODEC_CAP_HWACCEL_VDPAU &&",
          "2647:             (h->sps.bit_depth_luma != 8 || h->sps.chroma_format_idc > 1)) {",
          "2648:             av_log(s->avctx, AV_LOG_ERROR,",
          "2649:                    \"VDPAU decoding does not support video colorspace.\\n\");",
          "2650:             return AVERROR_INVALIDDATA;",
          "2651:         }",
          "2652:         if (h->sps.bit_depth_luma >= 8 && h->sps.bit_depth_luma <= 10) {",
          "2653:             s->avctx->bits_per_raw_sample = h->sps.bit_depth_luma;",
          "2654:             h->cur_chroma_format_idc      = h->sps.chroma_format_idc;",
          "2655:             h->pixel_shift                = h->sps.bit_depth_luma > 8;",
          "2657:             ff_h264dsp_init(&h->h264dsp, h->sps.bit_depth_luma,",
          "2658:                             h->sps.chroma_format_idc);",
          "2659:             ff_h264_pred_init(&h->hpc, s->codec_id, h->sps.bit_depth_luma,",
          "2660:                               h->sps.chroma_format_idc);",
          "2661:             s->dsp.dct_bits = h->sps.bit_depth_luma > 8 ? 32 : 16;",
          "2662:             dsputil_init(&s->dsp, s->avctx);",
          "2663:         } else {",
          "2664:             av_log(s->avctx, AV_LOG_ERROR, \"Unsupported bit depth: %d\\n\",",
          "2665:                    h->sps.bit_depth_luma);",
          "2666:             return AVERROR_INVALIDDATA;",
          "2667:         }",
          "2668:     }",
          "2669:     return 0;",
          "2670: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2640:     int num_ref_idx_active_override_flag;",
          "2641:     unsigned int slice_type, tmp, i, j;",
          "2642:     int default_ref_list_done = 0;",
          "2646:     if((s->avctx->flags2 & CODEC_FLAG2_FAST) && !h->nal_ref_idc && !h->pixel_shift){",
          "",
          "[Removed Lines]",
          "2643:     int last_pic_structure, last_pic_dropable;",
          "",
          "[Added Lines]",
          "2689:     int last_pic_structure, last_pic_dropable, ret;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2712:         av_log(h->s.avctx, AV_LOG_ERROR, \"non-existing SPS %u referenced\\n\", h->pps.sps_id);",
          "2713:         return -1;",
          "2714:     }",
          "2717:     s->avctx->profile = ff_h264_get_profile(&h->sps);",
          "2718:     s->avctx->level   = h->sps.level_idc;",
          "",
          "[Removed Lines]",
          "2715:     h->sps = *h0->sps_buffers[h->pps.sps_id];",
          "",
          "[Added Lines]",
          "2762:     if (h->pps.sps_id != h->current_sps_id ||",
          "2763:         h0->sps_buffers[h->pps.sps_id]->new) {",
          "2764:         h0->sps_buffers[h->pps.sps_id]->new = 0;",
          "2766:         h->current_sps_id = h->pps.sps_id;",
          "2767:         h->sps            = *h0->sps_buffers[h->pps.sps_id];",
          "2769:         if ((ret = h264_set_parameter_from_sps(h)) < 0)",
          "2770:             return ret;",
          "2771:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "4071:                 ff_h264_decode_seq_parameter_set(h);",
          "4072:             }",
          "4104:             }",
          "4105:             break;",
          "4106:         case NAL_PPS:",
          "",
          "[Removed Lines]",
          "4074:             if (s->flags & CODEC_FLAG_LOW_DELAY ||",
          "4075:                 (h->sps.bitstream_restriction_flag &&",
          "4076:                  !h->sps.num_reorder_frames)) {",
          "4077:                 if (s->avctx->has_b_frames > 1 || h->delayed_pic[0])",
          "4078:                     av_log(avctx, AV_LOG_WARNING, \"Delayed frames seen \"",
          "4079:                            \"reenabling low delay requires a codec \"",
          "4080:                            \"flush.\\n\");",
          "4081:                 else",
          "4082:                     s->low_delay = 1;",
          "4083:             }",
          "4085:             if(avctx->has_b_frames < 2)",
          "4086:                 avctx->has_b_frames= !s->low_delay;",
          "4088:             if (avctx->bits_per_raw_sample != h->sps.bit_depth_luma ||",
          "4089:                 h->cur_chroma_format_idc != h->sps.chroma_format_idc) {",
          "4090:                 if (h->sps.bit_depth_luma >= 8 && h->sps.bit_depth_luma <= 10) {",
          "4091:                     avctx->bits_per_raw_sample = h->sps.bit_depth_luma;",
          "4092:                     h->cur_chroma_format_idc = h->sps.chroma_format_idc;",
          "4093:                     h->pixel_shift = h->sps.bit_depth_luma > 8;",
          "4095:                     ff_h264dsp_init(&h->h264dsp, h->sps.bit_depth_luma, h->sps.chroma_format_idc);",
          "4096:                     ff_h264_pred_init(&h->hpc, s->codec_id, h->sps.bit_depth_luma, h->sps.chroma_format_idc);",
          "4097:                     s->dsp.dct_bits = h->sps.bit_depth_luma > 8 ? 32 : 16;",
          "4098:                     dsputil_init(&s->dsp, s->avctx);",
          "4099:                 } else {",
          "4100:                     av_log(avctx, AV_LOG_ERROR, \"Unsupported bit depth: %d\\n\", h->sps.bit_depth_luma);",
          "4101:                     buf_index = -1;",
          "4102:                     goto end;",
          "4103:                 }",
          "",
          "[Added Lines]",
          "4130:             if (h264_set_parameter_from_sps(h) < 0) {",
          "4131:                 buf_index = -1;",
          "4132:                 goto end;",
          "",
          "---------------"
        ],
        "libavcodec/h264.h||libavcodec/h264.h": [
          "File: libavcodec/h264.h -> libavcodec/h264.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "204:     int bit_depth_chroma;              ///< bit_depth_chroma_minus8 + 8",
          "205:     int residual_color_transform_flag; ///< residual_colour_transform_flag",
          "206:     int constraint_set_flags;          ///< constraint_set[0-3]_flag",
          "207: }SPS;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "207:     int new;                           ///< flag to keep track if the decoder context needs re-init due to changed SPS",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "330:     int emu_edge_width;",
          "331:     int emu_edge_height;",
          "333:     SPS sps; ///< current sps",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "334:     unsigned current_sps_id; ///< id of the current SPS",
          "",
          "---------------"
        ],
        "libavcodec/h264_ps.c||libavcodec/h264_ps.c": [
          "File: libavcodec/h264_ps.c -> libavcodec/h264_ps.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "469:                sps->timing_info_present_flag ? sps->time_scale : 0",
          "470:                );",
          "471:     }",
          "473:     av_free(h->sps_buffers[sps_id]);",
          "476:     return 0;",
          "477: fail:",
          "478:     av_free(sps);",
          "",
          "[Removed Lines]",
          "474:     h->sps_buffers[sps_id]= sps;",
          "475:     h->sps = *sps;",
          "",
          "[Added Lines]",
          "472:     sps->new = 1;",
          "475:     h->sps_buffers[sps_id] = sps;",
          "476:     h->sps                 = *sps;",
          "477:     h->current_sps_id      = sps_id;",
          "",
          "---------------"
        ]
      }
    }
  ]
}