{
  "cve_id": "CVE-2019-14857",
  "cve_desc": "A flaw was found in mod_auth_openidc before version 2.4.0.1. An open redirect issue exists in URLs with trailing slashes similar to CVE-2019-3877 in mod_auth_mellon.",
  "repo": "zmartzone/mod_auth_openidc",
  "patch_hash": "5c15dfb08106c2451c2c44ce7ace6813c216ba75",
  "patch_info": {
    "commit_hash": "5c15dfb08106c2451c2c44ce7ace6813c216ba75",
    "repo": "zmartzone/mod_auth_openidc",
    "commit_url": "https://github.com/zmartzone/mod_auth_openidc/commit/5c15dfb08106c2451c2c44ce7ace6813c216ba75",
    "files": [
      "AUTHORS",
      "ChangeLog",
      "configure.ac",
      "src/mod_auth_openidc.c"
    ],
    "message": "improve validation of the post-logout URL; closes #449\n\n- to avoid an open redirect; thanks AIMOTO Norihito\n- release 2.4.0.1\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
    "before_after_code_files": [
      "configure.ac||configure.ac",
      "src/mod_auth_openidc.c||src/mod_auth_openidc.c"
    ]
  },
  "patch_diff": {
    "configure.ac||configure.ac": [
      "File: configure.ac -> configure.ac",
      "--- Hunk 1 ---",
      "[Context before]",
      "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
      "",
      "[Removed Lines]",
      "1: AC_INIT([mod_auth_openidc],[2.4.0],[hans.zandbelt@zmartzone.eu])",
      "",
      "[Added Lines]",
      "1: AC_INIT([mod_auth_openidc],[2.4.0.1],[hans.zandbelt@zmartzone.eu])",
      "",
      "---------------"
    ],
    "src/mod_auth_openidc.c||src/mod_auth_openidc.c": [
      "File: src/mod_auth_openidc.c -> src/mod_auth_openidc.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3024:  return rc;",
      "3025: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "3027: static apr_byte_t oidc_validate_post_logout_url(request_rec *r, const char *url,",
      "3028:   char **err_str, char **err_desc) {",
      "3029:  apr_uri_t uri;",
      "3030:  const char *c_host = NULL;",
      "3032:  if (apr_uri_parse(r->pool, url, &uri) != APR_SUCCESS) {",
      "3035:   oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
      "3036:   return FALSE;",
      "3037:  }",
      "3039:  c_host = oidc_get_current_url_host(r);",
      "3040:  if ((uri.hostname != NULL)",
      "3041:    && ((strstr(c_host, uri.hostname) == NULL)",
      "3042:      || (strstr(uri.hostname, c_host) == NULL))) {",
      "3045:     apr_psprintf(r->pool,",
      "3046:       \"logout value \\\"%s\\\" does not match the hostname of the current request \\\"%s\\\"\",",
      "3047:       apr_uri_unparse(r->pool, &uri, 0), c_host);",
      "3048:   oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
      "3049:   return FALSE;",
      "3050:  } else if (strstr(url, \"/\") != url) {",
      "3053:     apr_psprintf(r->pool,",
      "3054:       \"No hostname was parsed and it does not seem to be relative, i.e starting with '/': %s\",",
      "3055:       url);",
      "3056:   oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
      "3057:   return FALSE;",
      "3058:  }",
      "3061:  if (((strstr(url, \"\\n\") != NULL) || strstr(url, \"\\r\") != NULL)) {",
      "3064:     apr_psprintf(r->pool,",
      "3065:       \"logout value \\\"%s\\\" contains illegal \\\"\\n\\\" or \\\"\\r\\\" character(s)\",",
      "3066:       url);",
      "3067:   oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
      "3068:   return FALSE;",
      "3069:  }",
      "3071:  return TRUE;",
      "3072: }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "3033:  oidc_provider_t *provider = NULL;",
      "3035:  char *url = NULL;",
      "3036:  oidc_util_get_request_parameter(r, OIDC_REDIRECT_URI_REQUEST_LOGOUT, &url);",
      "3038:  oidc_debug(r, \"enter (url=%s)\", url);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "3083:  char *error_str = NULL;",
      "3084:  char *error_description = NULL;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "3050:  } else {",
      "3091:   }",
      "3092:  }",
      "",
      "[Removed Lines]",
      "3054:   const char *error_description = NULL;",
      "3055:   apr_uri_t uri;",
      "3057:   if (apr_uri_parse(r->pool, url, &uri) != APR_SUCCESS) {",
      "3058:    const char *error_description = apr_psprintf(r->pool,",
      "3059:      \"Logout URL malformed: %s\", url);",
      "3060:    oidc_error(r, \"%s\", error_description);",
      "3061:    return oidc_util_html_send_error(r, c->error_template,",
      "3062:      \"Malformed URL\", error_description,",
      "3063:      HTTP_INTERNAL_SERVER_ERROR);",
      "3065:   }",
      "3067:   const char *c_host = oidc_get_current_url_host(r);",
      "3068:   if ((uri.hostname != NULL)",
      "3069:     && ((strstr(c_host, uri.hostname) == NULL)",
      "3070:       || (strstr(uri.hostname, c_host) == NULL))) {",
      "3071:    error_description =",
      "3072:      apr_psprintf(r->pool,",
      "3073:        \"logout value \\\"%s\\\" does not match the hostname of the current request \\\"%s\\\"\",",
      "3074:        apr_uri_unparse(r->pool, &uri, 0), c_host);",
      "3075:    oidc_error(r, \"%s\", error_description);",
      "3076:    return oidc_util_html_send_error(r, c->error_template,",
      "3077:      \"Invalid Request\", error_description,",
      "3078:      HTTP_INTERNAL_SERVER_ERROR);",
      "3079:   }",
      "3082:   if (((strstr(url, \"\\n\") != NULL) || strstr(url, \"\\r\") != NULL)) {",
      "3083:    error_description =",
      "3084:      apr_psprintf(r->pool,",
      "3085:        \"logout value \\\"%s\\\" contains illegal \\\"\\n\\\" or \\\"\\r\\\" character(s)\",",
      "3086:        url);",
      "3087:    oidc_error(r, \"%s\", error_description);",
      "3088:    return oidc_util_html_send_error(r, c->error_template,",
      "3089:      \"Invalid Request\", error_description,",
      "3090:      HTTP_INTERNAL_SERVER_ERROR);",
      "",
      "[Added Lines]",
      "3103:   if (oidc_validate_post_logout_url(r, url, &error_str,",
      "3104:     &error_description) == FALSE) {",
      "3105:    return oidc_util_html_send_error(r, c->error_template, error_str,",
      "3106:      error_description,",
      "3107:      HTTP_BAD_REQUEST);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "ce37080c6aea30aabae8b4a9b4eea7808445cc8e",
      "candidate_info": {
        "commit_hash": "ce37080c6aea30aabae8b4a9b4eea7808445cc8e",
        "repo": "zmartzone/mod_auth_openidc",
        "commit_url": "https://github.com/zmartzone/mod_auth_openidc/commit/ce37080c6aea30aabae8b4a9b4eea7808445cc8e",
        "files": [
          "ChangeLog",
          "configure.ac",
          "src/mod_auth_openidc.c"
        ],
        "message": "2.4.0.2 oops\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "src/mod_auth_openidc.c||src/mod_auth_openidc.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac",
            "src/mod_auth_openidc.c||src/mod_auth_openidc.c"
          ],
          "candidate": [
            "configure.ac||configure.ac",
            "src/mod_auth_openidc.c||src/mod_auth_openidc.c"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.0.1],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.0.2],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------"
        ],
        "src/mod_auth_openidc.c||src/mod_auth_openidc.c": [
          "File: src/mod_auth_openidc.c -> src/mod_auth_openidc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3047:       apr_uri_unparse(r->pool, &uri, 0), c_host);",
          "3048:   oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
          "3049:   return FALSE;",
          "3053:     apr_psprintf(r->pool,",
          "",
          "[Removed Lines]",
          "3050:  } else if (strstr(url, \"/\") != url) {",
          "",
          "[Added Lines]",
          "3050:  } else if ((uri.hostname == NULL) && (strstr(url, \"/\") != url)) {",
          "",
          "---------------"
        ]
      }
    }
  ]
}