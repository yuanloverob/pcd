{
  "cve_id": "CVE-2017-3733",
  "cve_desc": "During a renegotiation handshake if the Encrypt-Then-Mac extension is negotiated where it was not in the original handshake (or vice-versa) then this can cause OpenSSL 1.1.0 before 1.1.0e to crash (dependent on ciphersuite). Both clients and servers are affected.",
  "repo": "openssl/openssl",
  "patch_hash": "4ad93618d26a3ea23d36ad5498ff4f59eff3a4d2",
  "patch_info": {
    "commit_hash": "4ad93618d26a3ea23d36ad5498ff4f59eff3a4d2",
    "repo": "openssl/openssl",
    "commit_url": "https://github.com/openssl/openssl/commit/4ad93618d26a3ea23d36ad5498ff4f59eff3a4d2",
    "files": [
      "include/openssl/ssl3.h",
      "ssl/record/rec_layer_s3.c",
      "ssl/record/ssl3_record.c",
      "ssl/ssl_locl.h",
      "ssl/t1_enc.c",
      "ssl/t1_lib.c"
    ],
    "message": "Don't change the state of the ETM flags until CCS processing\n\nChanging the ciphersuite during a renegotiation can result in a crash\nleading to a DoS attack. ETM has not been implemented in 1.1.0 for DTLS\nso this is TLS only.\n\nThe problem is caused by changing the flag indicating whether to use ETM\nor not immediately on negotiation of ETM, rather than at CCS. Therefore,\nduring a renegotiation, if the ETM state is changing (usually due to a\nchange of ciphersuite), then an error/crash will occur.\n\nDue to the fact that there are separate CCS messages for read and write\nwe actually now need two flags to determine whether to use ETM or not.\n\nCVE-2017-3733\n\nReviewed-by: Richard Levitte <levitte@openssl.org>",
    "before_after_code_files": [
      "include/openssl/ssl3.h||include/openssl/ssl3.h",
      "ssl/record/rec_layer_s3.c||ssl/record/rec_layer_s3.c",
      "ssl/record/ssl3_record.c||ssl/record/ssl3_record.c",
      "ssl/ssl_locl.h||ssl/ssl_locl.h",
      "ssl/t1_enc.c||ssl/t1_enc.c",
      "ssl/t1_lib.c||ssl/t1_lib.c"
    ]
  },
  "patch_diff": {
    "include/openssl/ssl3.h||include/openssl/ssl3.h": [
      "File: include/openssl/ssl3.h -> include/openssl/ssl3.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "264: # define TLS1_FLAGS_SKIP_CERT_VERIFY             0x0010",
      "270: # define TLS1_FLAGS_RECEIVED_EXTMS               0x0200",
      "272: # define SSL3_MT_HELLO_REQUEST                   0",
      "273: # define SSL3_MT_CLIENT_HELLO                    1",
      "274: # define SSL3_MT_SERVER_HELLO                    2",
      "",
      "[Removed Lines]",
      "267: # define TLS1_FLAGS_ENCRYPT_THEN_MAC             0x0100",
      "",
      "[Added Lines]",
      "267: # define TLS1_FLAGS_ENCRYPT_THEN_MAC_READ        0x0100",
      "268: # define TLS1_FLAGS_ENCRYPT_THEN_MAC             TLS1_FLAGS_ENCRYPT_THEN_MAC_READ",
      "273: # define TLS1_FLAGS_ENCRYPT_THEN_MAC_WRITE       0x0400",
      "",
      "---------------"
    ],
    "ssl/record/rec_layer_s3.c||ssl/record/rec_layer_s3.c": [
      "File: ssl/record/rec_layer_s3.c -> ssl/record/rec_layer_s3.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "395:     if (type == SSL3_RT_APPLICATION_DATA &&",
      "396:         u_len >= 4 * (max_send_fragment = s->max_send_fragment) &&",
      "397:         s->compress == NULL && s->msg_callback == NULL &&",
      "399:         EVP_CIPHER_flags(EVP_CIPHER_CTX_cipher(s->enc_write_ctx)) &",
      "400:         EVP_CIPH_FLAG_TLS1_1_MULTIBLOCK) {",
      "401:         unsigned char aad[13];",
      "",
      "[Removed Lines]",
      "398:         !SSL_USE_ETM(s) && SSL_USE_EXPLICIT_IV(s) &&",
      "",
      "[Added Lines]",
      "398:         !SSL_WRITE_ETM(s) && SSL_USE_EXPLICIT_IV(s) &&",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "795:             if (s->method->ssl3_enc->mac(s, &wr[j],",
      "796:                                          &(outbuf[j][wr[j].length + eivlen]),",
      "797:                                          1) < 0)",
      "",
      "[Removed Lines]",
      "794:         if (!SSL_USE_ETM(s) && mac_size != 0) {",
      "",
      "[Added Lines]",
      "794:         if (!SSL_WRITE_ETM(s) && mac_size != 0) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "814:         goto err;",
      "816:     for (j = 0; j < numpipes; j++) {",
      "818:             if (s->method->ssl3_enc->mac(s, &wr[j],",
      "819:                                          outbuf[j] + wr[j].length, 1) < 0)",
      "820:                 goto err;",
      "",
      "[Removed Lines]",
      "817:         if (SSL_USE_ETM(s) && mac_size != 0) {",
      "",
      "[Added Lines]",
      "817:         if (SSL_WRITE_ETM(s) && mac_size != 0) {",
      "",
      "---------------"
    ],
    "ssl/record/ssl3_record.c||ssl/record/ssl3_record.c": [
      "File: ssl/record/ssl3_record.c -> ssl/record/ssl3_record.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "350:         unsigned char *mac;",
      "351:         mac_size = EVP_MD_CTX_size(s->read_hash);",
      "352:         OPENSSL_assert(mac_size <= EVP_MAX_MD_SIZE);",
      "",
      "[Removed Lines]",
      "349:     if (SSL_USE_ETM(s) && s->read_hash) {",
      "",
      "[Added Lines]",
      "349:     if (SSL_READ_ETM(s) && s->read_hash) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "394:     if ((sess != NULL) &&",
      "395:         (s->enc_read_ctx != NULL) &&",
      "398:         unsigned char *mac = NULL;",
      "399:         unsigned char mac_tmp[EVP_MAX_MD_SIZE];",
      "",
      "[Removed Lines]",
      "396:         (EVP_MD_CTX_md(s->read_hash) != NULL) && !SSL_USE_ETM(s)) {",
      "",
      "[Added Lines]",
      "396:         (!SSL_READ_ETM(s) && EVP_MD_CTX_md(s->read_hash) != NULL)) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "823:         }",
      "825:         ret = 1;",
      "827:             mac_size = EVP_MD_CTX_size(s->read_hash);",
      "828:         if ((bs != 1) && !send) {",
      "829:             int tmpret;",
      "",
      "[Removed Lines]",
      "826:         if (!SSL_USE_ETM(s) && EVP_MD_CTX_md(s->read_hash) != NULL)",
      "",
      "[Added Lines]",
      "826:         if (!SSL_READ_ETM(s) && EVP_MD_CTX_md(s->read_hash) != NULL)",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "997:     header[11] = (rec->length) >> 8;",
      "998:     header[12] = (rec->length) & 0xff;",
      "1001:         EVP_CIPHER_CTX_mode(ssl->enc_read_ctx) == EVP_CIPH_CBC_MODE &&",
      "1002:         ssl3_cbc_record_digest_supported(mac_ctx)) {",
      "",
      "[Removed Lines]",
      "1000:     if (!send && !SSL_USE_ETM(ssl) &&",
      "",
      "[Added Lines]",
      "1000:     if (!send && !SSL_READ_ETM(ssl) &&",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1022:             EVP_MD_CTX_free(hmac);",
      "1023:             return -1;",
      "1024:         }",
      "1026:             if (!tls_fips_digest_extra(ssl->enc_read_ctx,",
      "1027:                                        mac_ctx, rec->input,",
      "1028:                                        rec->length, rec->orig_len)) {",
      "",
      "[Removed Lines]",
      "1025:         if (!send && !SSL_USE_ETM(ssl) && FIPS_mode())",
      "",
      "[Added Lines]",
      "1025:         if (!send && !SSL_READ_ETM(ssl) && FIPS_mode())",
      "",
      "---------------"
    ],
    "ssl/ssl_locl.h||ssl/ssl_locl.h": [
      "File: ssl/ssl_locl.h -> ssl/ssl_locl.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "378: # define SSL_CLIENT_USE_SIGALGS(s)        \\",
      "379:     SSL_CLIENT_USE_TLS1_2_CIPHERS(s)",
      "384: # define SSL_PKEY_RSA_ENC        0",
      "",
      "[Removed Lines]",
      "381: # define SSL_USE_ETM(s) (s->s3->flags & TLS1_FLAGS_ENCRYPT_THEN_MAC)",
      "",
      "[Added Lines]",
      "381: # define SSL_READ_ETM(s) (s->s3->flags & TLS1_FLAGS_ENCRYPT_THEN_MAC_READ)",
      "382: # define SSL_WRITE_ETM(s) (s->s3->flags & TLS1_FLAGS_ENCRYPT_THEN_MAC_WRITE)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1111:     unsigned char *alpn_client_proto_list;",
      "1112:     unsigned alpn_client_proto_list_len;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1116:     int tlsext_use_etm;",
      "",
      "---------------"
    ],
    "ssl/t1_enc.c||ssl/t1_enc.c": [
      "File: ssl/t1_enc.c -> ssl/t1_enc.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "130: #endif",
      "132:     if (which & SSL3_CC_READ) {",
      "133:         if (s->s3->tmp.new_cipher->algorithm2 & TLS1_STREAM_MAC)",
      "134:             s->mac_flags |= SSL_MAC_FLAG_READ_MAC_STREAM;",
      "135:         else",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "133:         if (s->tlsext_use_etm)",
      "134:             s->s3->flags |= TLS1_FLAGS_ENCRYPT_THEN_MAC_READ;",
      "135:         else",
      "136:             s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC_READ;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "168:         mac_secret = &(s->s3->read_mac_secret[0]);",
      "169:         mac_secret_size = &(s->s3->read_mac_secret_size);",
      "170:     } else {",
      "171:         if (s->s3->tmp.new_cipher->algorithm2 & TLS1_STREAM_MAC)",
      "172:             s->mac_flags |= SSL_MAC_FLAG_WRITE_MAC_STREAM;",
      "173:         else",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "176:         if (s->tlsext_use_etm)",
      "177:             s->s3->flags |= TLS1_FLAGS_ENCRYPT_THEN_MAC_WRITE;",
      "178:         else",
      "179:             s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC_WRITE;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "367:     if (s->s3->tmp.key_block_length != 0)",
      "368:         return (1);",
      "373:         SSLerr(SSL_F_TLS1_SETUP_KEY_BLOCK, SSL_R_CIPHER_OR_HASH_UNAVAILABLE);",
      "374:         return (0);",
      "375:     }",
      "",
      "[Removed Lines]",
      "370:     if (!ssl_cipher_get_evp",
      "371:         (s->session, &c, &hash, &mac_type, &mac_secret_size, &comp,",
      "372:          SSL_USE_ETM(s))) {",
      "",
      "[Added Lines]",
      "380:     if (!ssl_cipher_get_evp(s->session, &c, &hash, &mac_type, &mac_secret_size,",
      "381:                             &comp, s->tlsext_use_etm)) {",
      "",
      "---------------"
    ],
    "ssl/t1_lib.c||ssl/t1_lib.c": [
      "File: ssl/t1_lib.c -> ssl/t1_lib.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1674: #endif",
      "1675:     if (!custom_ext_add(s, 1, &ret, limit, al))",
      "1676:         return NULL;",
      "",
      "[Removed Lines]",
      "1677:     if (s->s3->flags & TLS1_FLAGS_ENCRYPT_THEN_MAC) {",
      "",
      "[Added Lines]",
      "1677:     if (s->tlsext_use_etm) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1683:             || s->s3->tmp.new_cipher->algorithm_enc == SSL_RC4",
      "1684:             || s->s3->tmp.new_cipher->algorithm_enc == SSL_eGOST2814789CNT",
      "1685:             || s->s3->tmp.new_cipher->algorithm_enc == SSL_eGOST2814789CNT12)",
      "1687:         else {",
      "",
      "[Removed Lines]",
      "1686:             s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC;",
      "",
      "[Added Lines]",
      "1686:             s->tlsext_use_etm = 0;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1917:     OPENSSL_free(s->s3->tmp.peer_sigalgs);",
      "1918:     s->s3->tmp.peer_sigalgs = NULL;",
      "1921: #ifndef OPENSSL_NO_SRP",
      "1922:     OPENSSL_free(s->srp_ctx.login);",
      "",
      "[Removed Lines]",
      "1919:     s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC;",
      "",
      "[Added Lines]",
      "1919:     s->tlsext_use_etm = 0;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "2264:         }",
      "2265: #endif",
      "2266:         else if (type == TLSEXT_TYPE_encrypt_then_mac)",
      "",
      "[Removed Lines]",
      "2267:             s->s3->flags |= TLS1_FLAGS_ENCRYPT_THEN_MAC;",
      "",
      "[Added Lines]",
      "2267:             s->tlsext_use_etm = 1;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "2366:                              SSL_DTLSEXT_HB_DONT_SEND_REQUESTS);",
      "2367: #endif",
      "2371:     s->s3->flags &= ~TLS1_FLAGS_RECEIVED_EXTMS;",
      "",
      "[Removed Lines]",
      "2369:     s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC;",
      "",
      "[Added Lines]",
      "2369:     s->tlsext_use_etm = 0;",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "2586:             if (s->s3->tmp.new_cipher->algorithm_mac != SSL_AEAD",
      "2587:                 && s->s3->tmp.new_cipher->algorithm_enc != SSL_RC4)",
      "2589:         } else if (type == TLSEXT_TYPE_extended_master_secret) {",
      "2590:             s->s3->flags |= TLS1_FLAGS_RECEIVED_EXTMS;",
      "2591:             if (!s->hit)",
      "",
      "[Removed Lines]",
      "2588:                 s->s3->flags |= TLS1_FLAGS_ENCRYPT_THEN_MAC;",
      "",
      "[Added Lines]",
      "2588:                 s->tlsext_use_etm = 1;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "6fc37bee4a5f81d8f00e6ad45865b6b697163f06",
      "candidate_info": {
        "commit_hash": "6fc37bee4a5f81d8f00e6ad45865b6b697163f06",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/6fc37bee4a5f81d8f00e6ad45865b6b697163f06",
        "files": [
          "crypto/asn1/a_int.c"
        ],
        "message": "asn1/a_int.c: clean up asn1_get_int64.\n\nTrouble was that integer negation wasn't producing *formally* correct\nresult in platform-neutral sense. Formally correct thing to do is\n-(int64_t)u, but this triggers undefined behaviour for one value that\nwould still be representable in ASN.1. The trigger was masked with\n(int64_t)(0-u), but this is formally inappropriate for values other\nthan the problematic one. [Also reorder branches to favour most-likely\npaths and harmonize asn1_string_set_int64 with asn1_get_int64].]\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/3231)\n\n(cherry picked from commit 786b6a45fbecc068d0fb8b05252a9228e0661c63)",
        "before_after_code_files": [
          "crypto/asn1/a_int.c||crypto/asn1/a_int.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/asn1/a_int.c||crypto/asn1/a_int.c": [
          "File: crypto/asn1/a_int.c -> crypto/asn1/a_int.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "229: }",
          "240: static int asn1_get_int64(int64_t *pr, const unsigned char *b, size_t blen,",
          "",
          "[Removed Lines]",
          "236: #define ABS_INT64_MIN \\",
          "237:     ((uint64_t)INT64_MAX + (uint64_t)(-(INT64_MIN + INT64_MAX)))",
          "",
          "[Added Lines]",
          "235: #define ABS_INT64_MIN ((uint64_t)INT64_MAX + (-(INT64_MIN + INT64_MAX)))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "244:     if (asn1_get_uint64(&r, b, blen) == 0)",
          "245:         return 0;",
          "246:     if (neg) {",
          "248:             ASN1err(ASN1_F_ASN1_GET_INT64, ASN1_R_TOO_SMALL);",
          "249:             return 0;",
          "250:         }",
          "252:     } else {",
          "254:             ASN1err(ASN1_F_ASN1_GET_INT64, ASN1_R_TOO_LARGE);",
          "255:             return 0;",
          "256:         }",
          "258:     }",
          "259:     return 1;",
          "260: }",
          "",
          "[Removed Lines]",
          "247:         if (r > ABS_INT64_MIN) {",
          "253:         if (r > INT64_MAX) {",
          "",
          "[Added Lines]",
          "245:         if (r <= INT64_MAX) {",
          "249:         } else if (r == ABS_INT64_MIN) {",
          "253:         } else {",
          "258:         if (r <= INT64_MAX) {",
          "260:         } else {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "320:     a->type = itype;",
          "321:     if (r < 0) {",
          "323:         a->type |= V_ASN1_NEG;",
          "324:     } else {",
          "325:         off = asn1_put_uint64(tbuf, r);",
          "",
          "[Removed Lines]",
          "322:         off = asn1_put_uint64(tbuf, -r);",
          "",
          "[Added Lines]",
          "333:         off = asn1_put_uint64(tbuf, 0 - (uint64_t)r);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d1257342e7dfcdb9e80d199396c58286c9056c1c",
      "candidate_info": {
        "commit_hash": "d1257342e7dfcdb9e80d199396c58286c9056c1c",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/d1257342e7dfcdb9e80d199396c58286c9056c1c",
        "files": [
          "crypto/evp/e_aes.c"
        ],
        "message": "Don't use magic numbers in aes_ocb_cipher()\n\nLots of references to 16 replaced by AES_BLOCK_SIZE. Also a few other style\ntweaks in that function\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2275)\n(cherry picked from commit 0ba5a9eaa0a6ae7fc25ee70eefc1f4fbdaf09483)",
        "before_after_code_files": [
          "crypto/evp/e_aes.c||crypto/evp/e_aes.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/evp/e_aes.c||crypto/evp/e_aes.c": [
          "File: crypto/evp/e_aes.c -> crypto/evp/e_aes.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2536:     if (!octx->key_set)",
          "2537:         return -1;",
          "",
          "[Removed Lines]",
          "2539:     if (in) {",
          "",
          "[Added Lines]",
          "2539:     if (in != NULL) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2561:             unsigned int remaining;",
          "2564:             if (remaining > len) {",
          "2565:                 memcpy(buf + (*buf_len), in, len);",
          "",
          "[Removed Lines]",
          "2560:         if (*buf_len) {",
          "2563:             remaining = 16 - (*buf_len);",
          "",
          "[Added Lines]",
          "2560:         if (*buf_len > 0) {",
          "2563:             remaining = AES_BLOCK_SIZE - (*buf_len);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2574:             len -= remaining;",
          "2575:             in += remaining;",
          "2576:             if (out == NULL) {",
          "2578:                     return -1;",
          "2579:             } else if (EVP_CIPHER_CTX_encrypting(ctx)) {",
          "2581:                     return -1;",
          "2582:             } else {",
          "2584:                     return -1;",
          "2585:             }",
          "2588:         }",
          "",
          "[Removed Lines]",
          "2577:                 if (!CRYPTO_ocb128_aad(&octx->ocb, buf, 16))",
          "2580:                 if (!CRYPTO_ocb128_encrypt(&octx->ocb, buf, out, 16))",
          "2583:                 if (!CRYPTO_ocb128_decrypt(&octx->ocb, buf, out, 16))",
          "2586:             written_len = 16;",
          "2591:         trailing_len = len % 16;",
          "",
          "[Added Lines]",
          "2577:                 if (!CRYPTO_ocb128_aad(&octx->ocb, buf, AES_BLOCK_SIZE))",
          "2580:                 if (!CRYPTO_ocb128_encrypt(&octx->ocb, buf, out,",
          "2581:                                            AES_BLOCK_SIZE))",
          "2584:                 if (!CRYPTO_ocb128_decrypt(&octx->ocb, buf, out,",
          "2585:                                            AES_BLOCK_SIZE))",
          "2588:             written_len = AES_BLOCK_SIZE;",
          "2593:         trailing_len = len % AES_BLOCK_SIZE;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2611:         }",
          "2615:             memcpy(buf, in, trailing_len);",
          "2617:         }",
          "",
          "[Removed Lines]",
          "2614:         if (trailing_len) {",
          "",
          "[Added Lines]",
          "2616:         if (trailing_len > 0) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2626:             if (EVP_CIPHER_CTX_encrypting(ctx)) {",
          "2627:                 if (!CRYPTO_ocb128_encrypt(&octx->ocb, octx->data_buf, out,",
          "2628:                                            octx->data_buf_len))",
          "",
          "[Removed Lines]",
          "2625:         if (octx->data_buf_len) {",
          "",
          "[Added Lines]",
          "2627:         if (octx->data_buf_len > 0) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2635:             written_len = octx->data_buf_len;",
          "2636:             octx->data_buf_len = 0;",
          "2637:         }",
          "2639:             if (!CRYPTO_ocb128_aad",
          "2640:                 (&octx->ocb, octx->aad_buf, octx->aad_buf_len))",
          "2641:                 return -1;",
          "",
          "[Removed Lines]",
          "2638:         if (octx->aad_buf_len) {",
          "",
          "[Added Lines]",
          "2640:         if (octx->aad_buf_len > 0) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f5c1ee58c1cc246dc2f0b9b50f40c659fc302ad0",
      "candidate_info": {
        "commit_hash": "f5c1ee58c1cc246dc2f0b9b50f40c659fc302ad0",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/f5c1ee58c1cc246dc2f0b9b50f40c659fc302ad0",
        "files": [
          "include/openssl/x509v3.h"
        ],
        "message": "Document what EXFLAG_SET is for in x509v3.h\n\nReviewed-by: Kurt Roeckx <kurt@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2314)\n(cherry picked from commit 2d60c923141e7853c268364f26195343a5e995bf)",
        "before_after_code_files": [
          "include/openssl/x509v3.h||include/openssl/x509v3.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/openssl/x509v3.h||include/openssl/x509v3.h": [
          "File: include/openssl/x509v3.h -> include/openssl/x509v3.h"
        ]
      }
    },
    {
      "candidate_hash": "7b6c15ef62b8b0e4552f586184f4e90bf07d3c23",
      "candidate_info": {
        "commit_hash": "7b6c15ef62b8b0e4552f586184f4e90bf07d3c23",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/7b6c15ef62b8b0e4552f586184f4e90bf07d3c23",
        "files": [
          "crypto/poly1305/asm/poly1305-armv8.pl"
        ],
        "message": "poly1305/asm/poly1305-armv8.pl: ilp32-specific poly1305_init fix.\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(cherry picked from commit a25cef89fdf40c738f7e7a456f285217dc41fd6b)",
        "before_after_code_files": [
          "crypto/poly1305/asm/poly1305-armv8.pl||crypto/poly1305/asm/poly1305-armv8.pl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/poly1305/asm/poly1305-armv8.pl||crypto/poly1305/asm/poly1305-armv8.pl": [
          "File: crypto/poly1305/asm/poly1305-armv8.pl -> crypto/poly1305/asm/poly1305-armv8.pl",
          "--- Hunk 1 ---",
          "[Context before]",
          "100:  csel $d0,$d0,$r0,eq",
          "101:  csel $d1,$d1,$r1,eq",
          "103:  stp $d0,$d1,[$len]",
          "105:  mov x0,#1",
          "106: .Lno_key:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "103: #ifdef __ILP32__",
          "104:  stp w12,w13,[$len]",
          "105: #else",
          "107: #endif",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3c55aec6e9f68ec45162e85434d2911fa67e8f15",
      "candidate_info": {
        "commit_hash": "3c55aec6e9f68ec45162e85434d2911fa67e8f15",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/3c55aec6e9f68ec45162e85434d2911fa67e8f15",
        "files": [
          "crypto/bn/bn_intern.c"
        ],
        "message": "Don't call memcpy with NULL as source\n\nCalling it with lenght 0 and NULL as source is undefined behaviour.\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\nGH: #2089\n(cherry picked from commit eeab356c298248108b82157ef51172ba040646f7)",
        "before_after_code_files": [
          "crypto/bn/bn_intern.c||crypto/bn/bn_intern.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/bn/bn_intern.c||crypto/bn/bn_intern.c": [
          "File: crypto/bn/bn_intern.c -> crypto/bn/bn_intern.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "167:         return 0;",
          "169:     memset(out, 0, sizeof(*out) * size);",
          "171:     return 1;",
          "172: }",
          "",
          "[Removed Lines]",
          "170:     memcpy(out, in->d, sizeof(*out) * in->top);",
          "",
          "[Added Lines]",
          "170:     if (in->d != NULL)",
          "171:         memcpy(out, in->d, sizeof(*out) * in->top);",
          "",
          "---------------"
        ]
      }
    }
  ]
}