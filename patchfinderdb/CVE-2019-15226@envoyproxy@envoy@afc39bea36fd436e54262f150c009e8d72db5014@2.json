{
  "cve_id": "CVE-2019-15226",
  "cve_desc": "Upon receiving each incoming request header data, Envoy will iterate over existing request headers to verify that the total size of the headers stays below a maximum limit. The implementation in versions 1.10.0 through 1.11.1 for HTTP/1.x traffic and all versions of Envoy for HTTP/2 traffic had O(n^2) performance characteristics. A remote attacker may craft a request that stays below the maximum request header size but consists of many thousands of small headers to consume CPU and result in a denial-of-service attack.",
  "repo": "envoyproxy/envoy",
  "patch_hash": "afc39bea36fd436e54262f150c009e8d72db5014",
  "patch_info": {
    "commit_hash": "afc39bea36fd436e54262f150c009e8d72db5014",
    "repo": "envoyproxy/envoy",
    "commit_url": "https://github.com/envoyproxy/envoy/commit/afc39bea36fd436e54262f150c009e8d72db5014",
    "files": [
      "docs/root/intro/version_history.rst",
      "include/envoy/access_log/access_log.h",
      "include/envoy/http/header_map.h",
      "source/common/http/conn_manager_impl.cc",
      "source/common/http/header_map_impl.cc",
      "source/common/http/header_map_impl.h",
      "source/common/http/http1/codec_impl.cc",
      "source/common/http/http2/codec_impl.cc",
      "source/common/router/router.cc",
      "source/extensions/access_loggers/common/access_log_base.h",
      "source/extensions/access_loggers/grpc/http_grpc_access_log_impl.cc",
      "source/extensions/filters/common/expr/context.cc",
      "source/extensions/filters/http/rbac/rbac_filter.cc",
      "test/common/http/conn_manager_impl_test.cc",
      "test/common/http/header_map_impl_speed_test.cc",
      "test/common/http/header_map_impl_test.cc",
      "test/common/http/http2/codec_impl_test.cc",
      "test/integration/http2_integration_test.cc",
      "test/integration/http_integration.cc",
      "test/integration/http_integration.h",
      "test/integration/protocol_integration_test.cc"
    ],
    "message": "Track byteSize of HeaderMap internally.\n\nIntroduces a cached byte size updated internally in HeaderMap. The value\nis stored as an optional, and is cleared whenever a non-const pointer or\nreference to a HeaderEntry is accessed. The cached value can be set with\nrefreshByteSize() which performs an iteration over the HeaderMap to sum\nthe size of each key and value in the HeaderMap.\n\nSigned-off-by: Asra Ali <asraa@google.com>",
    "before_after_code_files": [
      "include/envoy/access_log/access_log.h||include/envoy/access_log/access_log.h",
      "include/envoy/http/header_map.h||include/envoy/http/header_map.h",
      "source/common/http/conn_manager_impl.cc||source/common/http/conn_manager_impl.cc",
      "source/common/http/header_map_impl.cc||source/common/http/header_map_impl.cc",
      "source/common/http/header_map_impl.h||source/common/http/header_map_impl.h",
      "source/common/http/http1/codec_impl.cc||source/common/http/http1/codec_impl.cc",
      "source/common/http/http2/codec_impl.cc||source/common/http/http2/codec_impl.cc",
      "source/common/router/router.cc||source/common/router/router.cc",
      "source/extensions/access_loggers/common/access_log_base.h||source/extensions/access_loggers/common/access_log_base.h",
      "source/extensions/access_loggers/grpc/http_grpc_access_log_impl.cc||source/extensions/access_loggers/grpc/http_grpc_access_log_impl.cc",
      "source/extensions/filters/common/expr/context.cc||source/extensions/filters/common/expr/context.cc",
      "source/extensions/filters/http/rbac/rbac_filter.cc||source/extensions/filters/http/rbac/rbac_filter.cc",
      "test/common/http/conn_manager_impl_test.cc||test/common/http/conn_manager_impl_test.cc",
      "test/common/http/header_map_impl_speed_test.cc||test/common/http/header_map_impl_speed_test.cc",
      "test/common/http/header_map_impl_test.cc||test/common/http/header_map_impl_test.cc",
      "test/common/http/http2/codec_impl_test.cc||test/common/http/http2/codec_impl_test.cc",
      "test/integration/http2_integration_test.cc||test/integration/http2_integration_test.cc",
      "test/integration/http_integration.cc||test/integration/http_integration.cc",
      "test/integration/http_integration.h||test/integration/http_integration.h",
      "test/integration/protocol_integration_test.cc||test/integration/protocol_integration_test.cc"
    ]
  },
  "patch_diff": {
    "include/envoy/access_log/access_log.h||include/envoy/access_log/access_log.h": [
      "File: include/envoy/access_log/access_log.h -> include/envoy/access_log/access_log.h"
    ],
    "include/envoy/http/header_map.h||include/envoy/http/header_map.h": [
      "File: include/envoy/http/header_map.h -> include/envoy/http/header_map.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "457:   virtual void setReferenceKey(const LowerCaseString& key, const std::string& value) PURE;",
      "",
      "[Removed Lines]",
      "462:   virtual uint64_t byteSize() const PURE;",
      "",
      "[Added Lines]",
      "473:   virtual absl::optional<uint64_t> byteSize() const PURE;",
      "484:   virtual uint64_t refreshByteSize() PURE;",
      "494:   virtual uint64_t byteSizeInternal() const PURE;",
      "",
      "---------------"
    ],
    "source/common/http/conn_manager_impl.cc||source/common/http/conn_manager_impl.cc": [
      "File: source/common/http/conn_manager_impl.cc -> source/common/http/conn_manager_impl.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "506:   }",
      "508:   connection_manager_.stats_.named_.downstream_rq_active_.dec();",
      "509:   for (const AccessLog::InstanceSharedPtr& access_log : connection_manager_.config_.accessLogs()) {",
      "510:     access_log->log(request_headers_.get(), response_headers_.get(), response_trailers_.get(),",
      "511:                     stream_info_);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "512:   if (request_headers_ != nullptr) {",
      "513:     request_headers_->refreshByteSize();",
      "514:   }",
      "515:   if (response_headers_ != nullptr) {",
      "516:     response_headers_->refreshByteSize();",
      "517:   }",
      "518:   if (response_trailers_ != nullptr) {",
      "519:     response_trailers_->refreshByteSize();",
      "520:   }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "719:     }",
      "720:   }",
      "",
      "[Removed Lines]",
      "722:   ASSERT(connection_manager_.config_.maxRequestHeadersKb() > 0);",
      "723:   if (request_headers_->byteSize() > (connection_manager_.config_.maxRequestHeadersKb() * 1024)) {",
      "724:     sendLocalReply(Grpc::Common::hasGrpcContentType(*request_headers_),",
      "725:                    Code::RequestHeaderFieldsTooLarge, \"\", nullptr, is_head_request_, absl::nullopt,",
      "726:                    StreamInfo::ResponseCodeDetails::get().RequestHeadersTooLarge);",
      "727:     return;",
      "728:   }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "source/common/http/header_map_impl.cc||source/common/http/header_map_impl.cc": [
      "File: source/common/http/header_map_impl.cc -> source/common/http/header_map_impl.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "295:   }",
      "296: };",
      "299:   if (data.empty()) {",
      "301:   }",
      "302:   if (!header.empty()) {",
      "303:     header.append(\",\", 1);",
      "304:   }",
      "305:   header.append(data.data(), data.size());",
      "306: }",
      "308: HeaderMapImpl::HeaderMapImpl() { memset(&inline_headers_, 0, sizeof(inline_headers_)); }",
      "",
      "[Removed Lines]",
      "298: void HeaderMapImpl::appendToHeader(HeaderString& header, absl::string_view data) {",
      "300:     return;",
      "",
      "[Added Lines]",
      "298: uint64_t HeaderMapImpl::appendToHeader(HeaderString& header, absl::string_view data) {",
      "300:     return 0;",
      "302:   uint64_t byte_size = 0;",
      "305:     byte_size += 1;",
      "308:   return data.size() + byte_size;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "319:   }",
      "320: }",
      "322: void HeaderMapImpl::copyFrom(const HeaderMap& header_map) {",
      "323:   header_map.iterate(",
      "324:       [](const HeaderEntry& header, void* context) -> HeaderMap::Iterate {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "325: void HeaderMapImpl::addSize(uint64_t size) {",
      "327:   if (cached_byte_size_.has_value()) {",
      "328:     cached_byte_size_.value() += size;",
      "329:   }",
      "330: }",
      "332: void HeaderMapImpl::subtractSize(uint64_t size) {",
      "333:   if (cached_byte_size_.has_value()) {",
      "334:     ASSERT(cached_byte_size_ >= size);",
      "335:     cached_byte_size_.value() -= size;",
      "336:   }",
      "337: }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "359:     if (*ref_lookup_response.entry_ == nullptr) {",
      "360:       maybeCreateInline(ref_lookup_response.entry_, *ref_lookup_response.key_, std::move(value));",
      "361:     } else {",
      "363:       value.clear();",
      "364:     }",
      "365:   } else {",
      "366:     std::list<HeaderEntryImpl>::iterator i = headers_.insert(std::move(key), std::move(value));",
      "367:     i->entry_ = i;",
      "368:   }",
      "",
      "[Removed Lines]",
      "362:       appendToHeader((*ref_lookup_response.entry_)->value(), value.getStringView());",
      "",
      "[Added Lines]",
      "379:       const uint64_t added_size =",
      "380:           appendToHeader((*ref_lookup_response.entry_)->value(), value.getStringView());",
      "381:       addSize(added_size);",
      "385:     addSize(key.size() + value.size());",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "374:   auto* entry = getExistingInline(key.getStringView());",
      "375:   if (entry != nullptr) {",
      "377:     key.clear();",
      "378:     value.clear();",
      "379:   } else {",
      "",
      "[Removed Lines]",
      "376:     appendToHeader(entry->value(), value.getStringView());",
      "",
      "[Added Lines]",
      "396:     const uint64_t added_size = appendToHeader(entry->value(), value.getStringView());",
      "397:     addSize(added_size);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "408:   if (entry != nullptr) {",
      "409:     char buf[32];",
      "410:     StringUtil::itoa(buf, sizeof(buf), value);",
      "412:     return;",
      "413:   }",
      "414:   HeaderString new_key;",
      "",
      "[Removed Lines]",
      "411:     appendToHeader(entry->value(), buf);",
      "",
      "[Added Lines]",
      "432:     const uint64_t added_size = appendToHeader(entry->value(), buf);",
      "433:     addSize(added_size);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "423: void HeaderMapImpl::addCopy(const LowerCaseString& key, const std::string& value) {",
      "424:   auto* entry = getExistingInline(key.get());",
      "425:   if (entry != nullptr) {",
      "427:     return;",
      "428:   }",
      "429:   HeaderString new_key;",
      "",
      "[Removed Lines]",
      "426:     appendToHeader(entry->value(), value);",
      "",
      "[Added Lines]",
      "448:     const uint64_t added_size = appendToHeader(entry->value(), value);",
      "449:     addSize(added_size);",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "451:   ASSERT(new_value.empty()); // NOLINT(bugprone-use-after-move)",
      "452: }",
      "455:   uint64_t byte_size = 0;",
      "456:   for (const HeaderEntryImpl& header : headers_) {",
      "457:     byte_size += header.key().size();",
      "458:     byte_size += header.value().size();",
      "459:   }",
      "461:   return byte_size;",
      "462: }",
      "",
      "[Removed Lines]",
      "454: uint64_t HeaderMapImpl::byteSize() const {",
      "",
      "[Added Lines]",
      "477: absl::optional<uint64_t> HeaderMapImpl::byteSize() const { return cached_byte_size_; }",
      "479: uint64_t HeaderMapImpl::refreshByteSize() {",
      "480:   if (!cached_byte_size_.has_value()) {",
      "483:     cached_byte_size_ = byteSizeInternal();",
      "484:   }",
      "485:   return cached_byte_size_.value();",
      "486: }",
      "488: uint64_t HeaderMapImpl::byteSizeInternal() const {",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "474: HeaderEntry* HeaderMapImpl::get(const LowerCaseString& key) {",
      "475:   for (HeaderEntryImpl& header : headers_) {",
      "476:     if (header.key() == key.get().c_str()) {",
      "477:       return &header;",
      "478:     }",
      "479:   }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "511:       cached_byte_size_.reset();",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "528:   } else {",
      "529:     for (auto i = headers_.begin(); i != headers_.end();) {",
      "530:       if (i->key() == key.get().c_str()) {",
      "531:         i = headers_.erase(i);",
      "532:       } else {",
      "533:         ++i;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "566:         subtractSize(i->key().size() + i->value().size());",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "537: }",
      "539: void HeaderMapImpl::removePrefix(const LowerCaseString& prefix) {",
      "541:     bool to_remove = absl::StartsWith(entry.key().getStringView(), prefix.get());",
      "542:     if (to_remove) {",
      "",
      "[Removed Lines]",
      "540:   headers_.remove_if([&](const HeaderEntryImpl& entry) {",
      "",
      "[Added Lines]",
      "576:   headers_.remove_if([&prefix, this](const HeaderEntryImpl& entry) {",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "546:       if (cb) {",
      "547:         StaticLookupResponse ref_lookup_response = cb(*this);",
      "548:         if (ref_lookup_response.entry_) {",
      "550:         }",
      "551:       }",
      "552:     }",
      "553:     return to_remove;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "585:           const uint32_t key_value_size = (*ref_lookup_response.entry_)->key().size() +",
      "586:                                           (*ref_lookup_response.entry_)->value().size();",
      "587:           subtractSize(key_value_size);",
      "590:       } else {",
      "591:         subtractSize(entry.key().size() + entry.value().size());",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "571: HeaderMapImpl::HeaderEntryImpl& HeaderMapImpl::maybeCreateInline(HeaderEntryImpl** entry,",
      "572:                                                                  const LowerCaseString& key) {",
      "573:   if (*entry) {",
      "574:     return **entry;",
      "575:   }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "614:   cached_byte_size_.reset();",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "588:     return **entry;",
      "589:   }",
      "591:   std::list<HeaderEntryImpl>::iterator i = headers_.insert(key, std::move(value));",
      "592:   i->entry_ = i;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "633:   addSize(key.get().size() + value.size());",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "609:   }",
      "611:   HeaderEntryImpl* entry = *ptr_to_entry;",
      "613:   headers_.erase(entry->entry_);",
      "614: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "655:   const uint64_t size_to_subtract = entry->entry_->key().size() + entry->entry_->value().size();",
      "656:   subtractSize(size_to_subtract);",
      "",
      "---------------"
    ],
    "source/common/http/header_map_impl.h||source/common/http/header_map_impl.h": [
      "File: source/common/http/header_map_impl.h -> source/common/http/header_map_impl.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "20: #define DEFINE_INLINE_HEADER_FUNCS(name)                                                           \\",
      "21: public:                                                                                            \\",
      "22:   const HeaderEntry* name() const override { return inline_headers_.name##_; }                     \\",
      "24:   HeaderEntry& insert##name() override {                                                           \\",
      "25:     return maybeCreateInline(&inline_headers_.name##_, Headers::get().name);                       \\",
      "26:   }                                                                                                \\",
      "27:   void remove##name() override { removeInline(&inline_headers_.name##_); }",
      "",
      "[Removed Lines]",
      "23:   HeaderEntry* name() override { return inline_headers_.name##_; }                                 \\",
      "",
      "[Added Lines]",
      "28:   HeaderEntry* name() override {                                                                   \\",
      "29:     cached_byte_size_.reset();                                                                     \\",
      "30:     return inline_headers_.name##_;                                                                \\",
      "31:   }                                                                                                \\",
      "33:     cached_byte_size_.reset();                                                                     \\",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "48:   HeaderMapImpl();",
      "49:   explicit HeaderMapImpl(",
      "",
      "[Removed Lines]",
      "46:   static void appendToHeader(HeaderString& header, absl::string_view data);",
      "",
      "[Added Lines]",
      "55:   static uint64_t appendToHeader(HeaderString& header, absl::string_view data);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "71:   void addCopy(const LowerCaseString& key, const std::string& value) override;",
      "72:   void setReference(const LowerCaseString& key, const std::string& value) override;",
      "73:   void setReferenceKey(const LowerCaseString& key, const std::string& value) override;",
      "75:   const HeaderEntry* get(const LowerCaseString& key) const override;",
      "76:   HeaderEntry* get(const LowerCaseString& key) override;",
      "77:   void iterate(ConstIterateCb cb, void* context) const override;",
      "",
      "[Removed Lines]",
      "74:   uint64_t byteSize() const override;",
      "",
      "[Added Lines]",
      "83:   absl::optional<uint64_t> byteSize() const override;",
      "84:   uint64_t refreshByteSize() override;",
      "85:   uint64_t byteSizeInternal() const override;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "195:   HeaderEntryImpl* getExistingInline(absl::string_view key);",
      "197:   void removeInline(HeaderEntryImpl** entry);",
      "199:   AllInlineHeaders inline_headers_;",
      "200:   HeaderList headers_;",
      "202:   ALL_INLINE_HEADERS(DEFINE_INLINE_HEADER_FUNCS)",
      "203: };",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "209:   void addSize(uint64_t size);",
      "210:   void subtractSize(uint64_t size);",
      "217:   absl::optional<uint64_t> cached_byte_size_ = 0;",
      "",
      "---------------"
    ],
    "source/common/http/http1/codec_impl.cc||source/common/http/http1/codec_impl.cc": [
      "File: source/common/http/http1/codec_impl.cc -> source/common/http/http1/codec_impl.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "460:   header_parsing_state_ = HeaderParsingState::Value;",
      "461:   current_header_value_.append(data, length);",
      "465:   if (total > (max_request_headers_kb_ * 1024)) {",
      "466:     error_code_ = Http::Code::RequestHeaderFieldsTooLarge;",
      "467:     sendProtocolError();",
      "",
      "[Removed Lines]",
      "463:   const uint32_t total =",
      "464:       current_header_field_.size() + current_header_value_.size() + current_header_map_->byteSize();",
      "",
      "[Added Lines]",
      "464:   ASSERT(current_header_map_->byteSize().has_value());",
      "465:   const uint32_t total = current_header_field_.size() + current_header_value_.size() +",
      "466:                          current_header_map_->byteSize().value();",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "472: int ConnectionImpl::onHeadersCompleteBase() {",
      "473:   ENVOY_CONN_LOG(trace, \"headers complete\", connection_);",
      "474:   completeLastHeader();",
      "475:   if (!(parser_.http_major == 1 && parser_.http_minor == 1)) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "479:   ASSERT(current_header_map_->byteSize().has_value() &&",
      "480:          current_header_map_->byteSize() == current_header_map_->byteSizeInternal());",
      "",
      "---------------"
    ],
    "source/common/http/http2/codec_impl.cc||source/common/http/http2/codec_impl.cc": [
      "File: source/common/http/http2/codec_impl.cc -> source/common/http/http2/codec_impl.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "510:   switch (frame->hd.type) {",
      "511:   case NGHTTP2_HEADERS: {",
      "512:     stream->remote_end_stream_ = frame->hd.flags & NGHTTP2_FLAG_END_STREAM;",
      "513:     if (!stream->cookies_.empty()) {",
      "514:       HeaderString key(Headers::get().Cookie);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "514:     ASSERT(stream->headers_->byteSize().has_value() &&",
      "515:            stream->headers_->byteSize().value() == stream->headers_->byteSizeInternal());",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "620:   case NGHTTP2_HEADERS:",
      "621:   case NGHTTP2_DATA: {",
      "622:     StreamImpl* stream = getStream(frame->hd.stream_id);",
      "623:     stream->local_end_stream_sent_ = frame->hd.flags & NGHTTP2_FLAG_END_STREAM;",
      "624:     break;",
      "625:   }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "627:     if (stream->headers_) {",
      "630:       ASSERT(stream->headers_->byteSize().has_value() &&",
      "631:              stream->headers_->byteSize().value() == stream->headers_->byteSizeInternal());",
      "632:     }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "808:     stats_.headers_cb_no_stream_.inc();",
      "809:     return 0;",
      "810:   }",
      "812:   stream->saveHeader(std::move(name), std::move(value));",
      "815:     stats_.header_overflow_.inc();",
      "816:     return NGHTTP2_ERR_TEMPORAL_CALLBACK_FAILURE;",
      "",
      "[Removed Lines]",
      "813:   if (stream->headers_->byteSize() > max_request_headers_kb_ * 1024) {",
      "",
      "[Added Lines]",
      "823:   ASSERT(stream->headers_->byteSize().has_value());",
      "824:   if (stream->headers_->byteSize().value() > max_request_headers_kb_ * 1024) {",
      "",
      "---------------"
    ],
    "source/common/router/router.cc||source/common/router/router.cc": [
      "File: source/common/router/router.cc -> source/common/router/router.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "1399:   stream_info_.setUpstreamTiming(upstream_timing_);",
      "1400:   stream_info_.onRequestComplete();",
      "1401:   for (const auto& upstream_log : parent_.config_.upstream_logs_) {",
      "1402:     upstream_log->log(parent_.downstream_headers_, upstream_headers_.get(),",
      "1403:                       upstream_trailers_.get(), stream_info_);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1404:   if (upstream_headers_ != nullptr) {",
      "1405:     upstream_headers_->refreshByteSize();",
      "1406:   }",
      "1407:   if (upstream_trailers_ != nullptr) {",
      "1408:     upstream_trailers_->refreshByteSize();",
      "1409:   }",
      "",
      "---------------"
    ],
    "source/extensions/access_loggers/common/access_log_base.h||source/extensions/access_loggers/common/access_log_base.h": [
      "File: source/extensions/access_loggers/common/access_log_base.h -> source/extensions/access_loggers/common/access_log_base.h"
    ],
    "source/extensions/access_loggers/grpc/http_grpc_access_log_impl.cc||source/extensions/access_loggers/grpc/http_grpc_access_log_impl.cc": [
      "File: source/extensions/access_loggers/grpc/http_grpc_access_log_impl.cc -> source/extensions/access_loggers/grpc/http_grpc_access_log_impl.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "95:     request_properties->set_original_path(",
      "96:         std::string(request_headers.EnvoyOriginalPath()->value().getStringView()));",
      "97:   }",
      "99:   request_properties->set_request_body_bytes(stream_info.bytesReceived());",
      "100:   if (request_headers.Method() != nullptr) {",
      "101:     envoy::api::v2::core::RequestMethod method =",
      "",
      "[Removed Lines]",
      "98:   request_properties->set_request_headers_bytes(request_headers.byteSize());",
      "",
      "[Added Lines]",
      "98:   request_properties->set_request_headers_bytes(request_headers.byteSize().value());",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "123:   if (stream_info.responseCodeDetails()) {",
      "124:     response_properties->set_response_code_details(stream_info.responseCodeDetails().value());",
      "125:   }",
      "127:   response_properties->set_response_body_bytes(stream_info.bytesSent());",
      "128:   if (!response_headers_to_log_.empty()) {",
      "129:     auto* logged_headers = response_properties->mutable_response_headers();",
      "",
      "[Removed Lines]",
      "126:   response_properties->set_response_headers_bytes(response_headers.byteSize());",
      "",
      "[Added Lines]",
      "126:   response_properties->set_response_headers_bytes(response_headers.byteSize().value());",
      "",
      "---------------"
    ],
    "source/extensions/filters/common/expr/context.cc||source/extensions/filters/common/expr/context.cc": [
      "File: source/extensions/filters/common/expr/context.cc -> source/extensions/filters/common/expr/context.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "79:     } else if (value == UserAgent) {",
      "80:       return convertHeaderEntry(headers_.value_->UserAgent());",
      "81:     } else if (value == TotalSize) {",
      "83:     }",
      "84:   }",
      "85:   return {};",
      "",
      "[Removed Lines]",
      "82:       return CelValue::CreateInt64(info_.bytesReceived() + headers_.value_->byteSize());",
      "",
      "[Added Lines]",
      "82:       return CelValue::CreateInt64(info_.bytesReceived() + headers_.value_->byteSize().value());",
      "",
      "---------------"
    ],
    "source/extensions/filters/http/rbac/rbac_filter.cc||source/extensions/filters/http/rbac/rbac_filter.cc": [
      "File: source/extensions/filters/http/rbac/rbac_filter.cc -> source/extensions/filters/http/rbac/rbac_filter.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "76:   if (shadow_engine != nullptr) {",
      "77:     std::string shadow_resp_code =",
      "78:         Filters::Common::RBAC::DynamicMetadataKeysSingleton::get().EngineResultAllowed;",
      "79:     if (shadow_engine->allowed(*callbacks_->connection(), headers, callbacks_->streamInfo(),",
      "80:                                &effective_policy_id)) {",
      "81:       ENVOY_LOG(debug, \"shadow allowed\");",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "82:     headers.refreshByteSize();",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "105:   const auto engine =",
      "106:       config_->engine(callbacks_->route(), Filters::Common::RBAC::EnforcementMode::Enforced);",
      "107:   if (engine != nullptr) {",
      "108:     if (engine->allowed(*callbacks_->connection(), headers, callbacks_->streamInfo(), nullptr)) {",
      "109:       ENVOY_LOG(debug, \"enforced allowed\");",
      "110:       config_->stats().allowed_.inc();",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "115:     headers.refreshByteSize();",
      "",
      "---------------"
    ],
    "test/common/http/conn_manager_impl_test.cc||test/common/http/conn_manager_impl_test.cc": [
      "File: test/common/http/conn_manager_impl_test.cc -> test/common/http/conn_manager_impl_test.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "4409:   EXPECT_EQ(1U, stats_.named_.downstream_cx_overload_disable_keepalive_.value());",
      "4410: }",
      "4457: TEST_F(HttpConnectionManagerImplTest, TestStopAllIterationAndBufferOnDecodingPathFirstFilter) {",
      "4458:   setup(false, \"envoy-custom-server\", false);",
      "4459:   setUpEncoderAndDecoder(true, true);",
      "",
      "[Removed Lines]",
      "4412: TEST_F(HttpConnectionManagerImplTest, OverlyLongHeadersRejected) {",
      "4413:   setup(false, \"\");",
      "4415:   std::string response_code;",
      "4416:   std::string response_body;",
      "4417:   EXPECT_CALL(*codec_, dispatch(_)).WillOnce(Invoke([&](Buffer::Instance&) -> void {",
      "4418:     StreamDecoder* decoder = &conn_manager_->newStream(response_encoder_);",
      "4419:     HeaderMapPtr headers{",
      "4420:         new TestHeaderMapImpl{{\":authority\", \"host\"}, {\":path\", \"/\"}, {\":method\", \"GET\"}}};",
      "4421:     headers->addCopy(LowerCaseString(\"Foo\"), std::string(60 * 1024, 'a'));",
      "4423:     EXPECT_CALL(response_encoder_, encodeHeaders(_, true))",
      "4424:         .WillOnce(Invoke([&response_code](const HeaderMap& headers, bool) -> void {",
      "4425:           response_code = std::string(headers.Status()->value().getStringView());",
      "4426:         }));",
      "4427:     decoder->decodeHeaders(std::move(headers), true);",
      "4428:     conn_manager_->newStream(response_encoder_);",
      "4429:   }));",
      "4431:   Buffer::OwnedImpl fake_input(\"1234\");",
      "4432:   conn_manager_->onData(fake_input, false); // kick off request",
      "4434:   EXPECT_EQ(\"431\", response_code);",
      "4435:   EXPECT_EQ(\"\", response_body);",
      "4436: }",
      "4438: TEST_F(HttpConnectionManagerImplTest, OverlyLongHeadersAcceptedIfConfigured) {",
      "4439:   max_request_headers_kb_ = 62;",
      "4440:   setup(false, \"\");",
      "4442:   EXPECT_CALL(*codec_, dispatch(_)).WillOnce(Invoke([&](Buffer::Instance&) -> void {",
      "4443:     StreamDecoder* decoder = &conn_manager_->newStream(response_encoder_);",
      "4444:     HeaderMapPtr headers{",
      "4445:         new TestHeaderMapImpl{{\":authority\", \"host\"}, {\":path\", \"/\"}, {\":method\", \"GET\"}}};",
      "4446:     headers->addCopy(LowerCaseString(\"Foo\"), std::string(60 * 1024, 'a'));",
      "4448:     EXPECT_CALL(response_encoder_, encodeHeaders(_, _)).Times(0);",
      "4449:     decoder->decodeHeaders(std::move(headers), true);",
      "4450:     conn_manager_->newStream(response_encoder_);",
      "4451:   }));",
      "4453:   Buffer::OwnedImpl fake_input(\"1234\");",
      "4454:   conn_manager_->onData(fake_input, false); // kick off request",
      "4455: }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "test/common/http/header_map_impl_speed_test.cc||test/common/http/header_map_impl_speed_test.cc": [
      "File: test/common/http/header_map_impl_speed_test.cc -> test/common/http/header_map_impl_speed_test.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "104:   addDummyHeaders(headers, state.range(0));",
      "105:   uint64_t size = 0;",
      "106:   for (auto _ : state) {",
      "108:   }",
      "109:   benchmark::DoNotOptimize(size);",
      "110: }",
      "",
      "[Removed Lines]",
      "107:     size += headers.byteSize();",
      "",
      "[Added Lines]",
      "107:     size += headers.byteSize().value();",
      "",
      "---------------"
    ],
    "test/common/http/header_map_impl_test.cc||test/common/http/header_map_impl_test.cc": [
      "File: test/common/http/header_map_impl_test.cc -> test/common/http/header_map_impl_test.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "366:   HeaderMapImpl headers;",
      "367:   EXPECT_TRUE(headers.empty());",
      "368:   EXPECT_EQ(0, headers.size());",
      "369:   EXPECT_EQ(nullptr, headers.Host());",
      "370:   headers.insertHost().value(std::string(\"hello\"));",
      "371:   EXPECT_FALSE(headers.empty());",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "369:   EXPECT_EQ(headers.byteSize().value(), 0);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "375:   EXPECT_EQ(\"hello\", headers.get(Headers::get().Host)->value().getStringView());",
      "376: }",
      "378: TEST(HeaderMapImplTest, MoveIntoInline) {",
      "379:   HeaderMapImpl headers;",
      "380:   HeaderString key;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "380: uint64_t countBytesForTest(const HeaderMapImpl& headers) {",
      "381:   uint64_t byte_size = 0;",
      "382:   headers.iterate(",
      "383:       [](const Http::HeaderEntry& header, void* context) -> Http::HeaderMap::Iterate {",
      "384:         auto* byte_size = static_cast<uint64_t*>(context);",
      "386:         return Http::HeaderMap::Iterate::Continue;",
      "387:       },",
      "388:       &byte_size);",
      "389:   return byte_size;",
      "390: }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "392:   headers.addViaMove(std::move(key2), std::move(value2));",
      "393:   EXPECT_EQ(\"cache-control\", headers.CacheControl()->key().getStringView());",
      "394:   EXPECT_EQ(\"hello,there\", headers.CacheControl()->value().getStringView());",
      "395: }",
      "397: TEST(HeaderMapImplTest, Remove) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "409:   EXPECT_EQ(headers.refreshByteSize(), countBytesForTest(headers));",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "401:   LowerCaseString static_key(\"hello\");",
      "402:   std::string ref_value(\"value\");",
      "403:   headers.addReference(static_key, ref_value);",
      "404:   EXPECT_EQ(\"value\", headers.get(static_key)->value().getStringView());",
      "405:   EXPECT_EQ(HeaderString::Type::Reference, headers.get(static_key)->value().type());",
      "406:   EXPECT_EQ(1UL, headers.size());",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "419:   EXPECT_EQ(headers.byteSize().value(), countBytesForTest(headers));",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "409:   EXPECT_EQ(nullptr, headers.get(static_key));",
      "410:   EXPECT_EQ(0UL, headers.size());",
      "411:   EXPECT_TRUE(headers.empty());",
      "414:   headers.insertContentLength().value(5);",
      "415:   EXPECT_EQ(\"5\", headers.ContentLength()->value().getStringView());",
      "416:   EXPECT_EQ(1UL, headers.size());",
      "417:   EXPECT_FALSE(headers.empty());",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "428:   EXPECT_EQ(headers.refreshByteSize(), 0);",
      "432:   EXPECT_EQ(headers.refreshByteSize(), countBytesForTest(headers));",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "419:   EXPECT_EQ(nullptr, headers.ContentLength());",
      "420:   EXPECT_EQ(0UL, headers.size());",
      "421:   EXPECT_TRUE(headers.empty());",
      "424:   headers.insertContentLength().value(5);",
      "425:   EXPECT_EQ(\"5\", headers.ContentLength()->value().getStringView());",
      "426:   EXPECT_EQ(1UL, headers.size());",
      "427:   EXPECT_FALSE(headers.empty());",
      "428:   headers.remove(Headers::get().ContentLength);",
      "429:   EXPECT_EQ(nullptr, headers.ContentLength());",
      "430:   EXPECT_EQ(0UL, headers.size());",
      "431:   EXPECT_TRUE(headers.empty());",
      "432: }",
      "434: TEST(HeaderMapImplTest, RemoveRegex) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "440:   EXPECT_EQ(headers.refreshByteSize(), countBytesForTest(headers));",
      "447:   EXPECT_EQ(headers.refreshByteSize(), countBytesForTest(headers));",
      "452:   EXPECT_EQ(headers.refreshByteSize(), 0);",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "446:   headers.addReference(key3, \"value\");",
      "447:   headers.addReference(key4, \"value\");",
      "448:   headers.addReference(key5, \"value\");",
      "451:   headers.removePrefix(LowerCaseString(\"x-prefix-\"));",
      "452:   EXPECT_EQ(nullptr, headers.get(key1));",
      "453:   EXPECT_NE(nullptr, headers.get(key2));",
      "454:   EXPECT_EQ(nullptr, headers.get(key3));",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "470:   EXPECT_EQ(headers.byteSize().value(), countBytesForTest(headers));",
      "474:   EXPECT_EQ(headers.byteSize().value(), countBytesForTest(headers));",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "456:   EXPECT_EQ(nullptr, headers.get(key5));",
      "459:   headers.removePrefix(LowerCaseString(\"\"));",
      "460:   EXPECT_EQ(nullptr, headers.get(key2));",
      "461:   EXPECT_EQ(nullptr, headers.get(key4));",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "482:   headers.refreshByteSize();",
      "484:   EXPECT_EQ(headers.byteSize().value(), 0);",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "465:   EXPECT_EQ(\"5\", headers.ContentLength()->value().getStringView());",
      "466:   EXPECT_EQ(1UL, headers.size());",
      "467:   EXPECT_FALSE(headers.empty());",
      "468:   headers.removePrefix(LowerCaseString(\"content\"));",
      "469:   EXPECT_EQ(nullptr, headers.ContentLength());",
      "470: }",
      "472: TEST(HeaderMapImplTest, SetRemovesAllValues) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "493:   EXPECT_EQ(headers.refreshByteSize(), countBytesForTest(headers));",
      "496:   EXPECT_EQ(headers.refreshByteSize(), 0);",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "484:   headers.addReference(key2, ref_value2);",
      "485:   headers.addReference(key1, ref_value3);",
      "486:   headers.addReference(key1, ref_value4);",
      "488:   using MockCb = testing::MockFunction<void(const std::string&, const std::string&)>;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "514:   EXPECT_EQ(headers.byteSize().value(), countBytesForTest(headers));",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "531:     const std::string bar(\"bar\");",
      "532:     headers.addReference(Headers::get().ContentLength, foo);",
      "533:     headers.addReference(Headers::get().ContentLength, bar);",
      "534:     EXPECT_EQ(\"foo,bar\", headers.ContentLength()->value().getStringView());",
      "535:     EXPECT_EQ(1UL, headers.size());",
      "536:   }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "562:     EXPECT_EQ(headers.byteSize().value(), countBytesForTest(headers));",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "538:     HeaderMapImpl headers;",
      "539:     headers.addReferenceKey(Headers::get().ContentLength, \"foo\");",
      "540:     headers.addReferenceKey(Headers::get().ContentLength, \"bar\");",
      "541:     EXPECT_EQ(\"foo,bar\", headers.ContentLength()->value().getStringView());",
      "542:     EXPECT_EQ(1UL, headers.size());",
      "543:   }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "570:     EXPECT_EQ(headers.byteSize().value(), countBytesForTest(headers));",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "545:     HeaderMapImpl headers;",
      "546:     headers.addReferenceKey(Headers::get().ContentLength, 5);",
      "547:     headers.addReferenceKey(Headers::get().ContentLength, 6);",
      "548:     EXPECT_EQ(\"5,6\", headers.ContentLength()->value().getStringView());",
      "549:     EXPECT_EQ(1UL, headers.size());",
      "550:   }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "578:     EXPECT_EQ(headers.byteSize().value(), countBytesForTest(headers));",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "553:     const std::string foo(\"foo\");",
      "554:     headers.addReference(Headers::get().ContentLength, foo);",
      "555:     headers.addReferenceKey(Headers::get().ContentLength, 6);",
      "556:     EXPECT_EQ(\"foo,6\", headers.ContentLength()->value().getStringView());",
      "557:     EXPECT_EQ(1UL, headers.size());",
      "558:   }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "587:     EXPECT_EQ(headers.byteSize().value(), countBytesForTest(headers));",
      "",
      "---------------",
      "--- Hunk 15 ---",
      "[Context before]",
      "568:   headers.addReference(set_cookie, foo);",
      "569:   headers.addReference(set_cookie, bar);",
      "570:   EXPECT_EQ(2UL, headers.size());",
      "572:   std::vector<absl::string_view> out;",
      "573:   Http::HeaderUtility::getAllOfHeader(headers, \"set-cookie\", out);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "603:   EXPECT_EQ(headers.byteSize().value(), countBytesForTest(headers));",
      "",
      "---------------",
      "--- Hunk 16 ---",
      "[Context before]",
      "580:   HeaderMapImpl headers;",
      "581:   headers.setReferenceKey(Headers::get().ContentType, \"blah\");",
      "582:   headers.setReferenceKey(Headers::get().ContentType, \"text/html\");",
      "583:   EXPECT_EQ(\"text/html\", headers.ContentType()->value().getStringView());",
      "584:   EXPECT_EQ(1UL, headers.size());",
      "585: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "616:   EXPECT_EQ(headers.byteSize().value(), countBytesForTest(headers));",
      "",
      "---------------",
      "--- Hunk 17 ---",
      "[Context before]",
      "588:   HeaderMapImpl headers;",
      "589:   LowerCaseString foo(\"hello\");",
      "590:   headers.addReferenceKey(foo, \"world\");",
      "591:   EXPECT_NE(\"world\", headers.get(foo)->value().getStringView().data());",
      "592:   EXPECT_EQ(\"world\", headers.get(foo)->value().getStringView());",
      "593: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "625:   EXPECT_EQ(headers.byteSize().value(), countBytesForTest(headers));",
      "",
      "---------------",
      "--- Hunk 18 ---",
      "[Context before]",
      "596:   HeaderMapImpl headers;",
      "597:   LowerCaseString foo(\"hello\");",
      "598:   headers.setReferenceKey(foo, \"world\");",
      "599:   EXPECT_NE(\"world\", headers.get(foo)->value().getStringView().data());",
      "600:   EXPECT_EQ(\"world\", headers.get(foo)->value().getStringView());",
      "602:   headers.setReferenceKey(foo, \"monde\");",
      "603:   EXPECT_NE(\"monde\", headers.get(foo)->value().getStringView().data());",
      "604:   EXPECT_EQ(\"monde\", headers.get(foo)->value().getStringView());",
      "605: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "634:   EXPECT_EQ(headers.byteSize().value(), countBytesForTest(headers));",
      "637:   headers.refreshByteSize();",
      "640:   EXPECT_EQ(headers.byteSize().value(), countBytesForTest(headers));",
      "",
      "---------------",
      "--- Hunk 19 ---",
      "[Context before]",
      "611:   std::unique_ptr<LowerCaseString> lcKeyPtr(new LowerCaseString(\"hello\"));",
      "612:   headers.addCopy(*lcKeyPtr, \"world\");",
      "614:   const HeaderString& value = headers.get(*lcKeyPtr)->value();",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "651:   EXPECT_EQ(headers.byteSize().value(), countBytesForTest(headers));",
      "",
      "---------------",
      "--- Hunk 20 ---",
      "[Context before]",
      "632:   headers.remove(LowerCaseString(\"hello\"));",
      "636:   lcKeyPtr = std::make_unique<LowerCaseString>(std::string(\"he\") + \"llo\");",
      "637:   EXPECT_STREQ(\"hello\", lcKeyPtr->get().c_str());",
      "639:   headers.addCopy(*lcKeyPtr, 42);",
      "641:   const HeaderString& value3 = headers.get(*lcKeyPtr)->value();",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "672:   headers.refreshByteSize();",
      "674:   EXPECT_EQ(headers.byteSize().value(), 0);",
      "681:   headers.refreshByteSize();",
      "683:   EXPECT_EQ(headers.byteSize().value(), countBytesForTest(headers));",
      "",
      "---------------",
      "--- Hunk 21 ---",
      "[Context before]",
      "662:   headers.addCopy(cache_control, \"max-age=1345\");",
      "663:   EXPECT_EQ(\"max-age=1345\", headers.get(cache_control)->value().getStringView());",
      "664:   EXPECT_EQ(\"max-age=1345\", headers.CacheControl()->value().getStringView());",
      "665:   headers.addCopy(cache_control, \"public\");",
      "666:   EXPECT_EQ(\"max-age=1345,public\", headers.get(cache_control)->value().getStringView());",
      "667:   headers.addCopy(cache_control, \"\");",
      "668:   EXPECT_EQ(\"max-age=1345,public\", headers.get(cache_control)->value().getStringView());",
      "669:   headers.addCopy(cache_control, 123);",
      "670:   EXPECT_EQ(\"max-age=1345,public,123\", headers.get(cache_control)->value().getStringView());",
      "671:   headers.addCopy(cache_control, std::numeric_limits<uint64_t>::max());",
      "672:   EXPECT_EQ(\"max-age=1345,public,123,18446744073709551615\",",
      "673:             headers.get(cache_control)->value().getStringView());",
      "674: }",
      "676: TEST(HeaderMapImplTest, Equality) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "709:   EXPECT_EQ(headers.refreshByteSize(), countBytesForTest(headers));",
      "711:   EXPECT_EQ(headers.refreshByteSize(), countBytesForTest(headers));",
      "714:   EXPECT_EQ(headers.refreshByteSize(), countBytesForTest(headers));",
      "717:   EXPECT_EQ(headers.refreshByteSize(), countBytesForTest(headers));",
      "722:   EXPECT_EQ(headers.refreshByteSize(), countBytesForTest(headers));",
      "",
      "---------------",
      "--- Hunk 22 ---",
      "[Context before]",
      "690:   LowerCaseString static_key(\"\\x90hello\");",
      "691:   std::string ref_value(\"value\");",
      "692:   headers.addReference(static_key, ref_value);",
      "693:   EXPECT_EQ(\"value\", headers.get(static_key)->value().getStringView());",
      "694: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "742:   EXPECT_EQ(headers.byteSize().value(), countBytesForTest(headers));",
      "",
      "---------------",
      "--- Hunk 23 ---",
      "[Context before]",
      "844:   {",
      "845:     LowerCaseString foo(\"hello\");",
      "846:     Http::TestHeaderMapImpl headers{};",
      "847:     EXPECT_EQ(0UL, headers.size());",
      "848:     EXPECT_TRUE(headers.empty());",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "897:     EXPECT_EQ(headers.refreshByteSize(), 0);",
      "",
      "---------------"
    ],
    "test/common/http/http2/codec_impl_test.cc||test/common/http/http2/codec_impl_test.cc": [
      "File: test/common/http/http2/codec_impl_test.cc -> test/common/http/http2/codec_impl_test.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "1090:   TestHeaderMapImpl request_headers;",
      "1091:   HttpTestUtility::addDefaultHeaders(request_headers);",
      "1092:   std::string key = \"big\";",
      "1093:   uint32_t head_room = 77;",
      "1094:   uint32_t long_string_length =",
      "1096:   std::string long_string = std::string(long_string_length, 'q');",
      "1097:   request_headers.addCopy(key, long_string);",
      "1104:   EXPECT_CALL(request_decoder_, decodeHeaders_(_, _));",
      "1105:   request_encoder_->encodeHeaders(request_headers, true);",
      "",
      "[Removed Lines]",
      "1095:       codec_limit_kb * 1024 - request_headers.byteSize() - key.length() - head_room;",
      "1102:   ASSERT_EQ(request_headers.byteSize() + head_room, codec_limit_kb * 1024);",
      "",
      "[Added Lines]",
      "1093:   request_headers.refreshByteSize();",
      "1097:       codec_limit_kb * 1024 - request_headers.byteSize().value() - key.length() - head_room;",
      "1104:   ASSERT_EQ(request_headers.byteSize().value() + head_room, codec_limit_kb * 1024);",
      "",
      "---------------"
    ],
    "test/integration/http2_integration_test.cc||test/integration/http2_integration_test.cc": [
      "File: test/integration/http2_integration_test.cc -> test/integration/http2_integration_test.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "65: TEST_P(Http2IntegrationTest, RetryAttemptCount) { testRetryAttemptCountHeader(); }",
      "67: static std::string response_metadata_filter = R\"EOF(",
      "68: name: response-metadata-filter",
      "69: config: {}",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "67: TEST_P(Http2IntegrationTest, LargeRequestTrailersRejected) { testLargeRequestTrailers(66, 60); }",
      "",
      "---------------"
    ],
    "test/integration/http_integration.cc||test/integration/http_integration.cc": [
      "File: test/integration/http_integration.cc -> test/integration/http_integration.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "261: IntegrationStreamDecoderPtr HttpIntegrationTest::sendRequestAndWaitForResponse(",
      "262:     const Http::TestHeaderMapImpl& request_headers, uint32_t request_body_size,",
      "264:   ASSERT(codec_client_ != nullptr);",
      "266:   IntegrationStreamDecoderPtr response;",
      "",
      "[Removed Lines]",
      "263:     const Http::TestHeaderMapImpl& response_headers, uint32_t response_size, int upstream_index) {",
      "",
      "[Added Lines]",
      "263:     const Http::TestHeaderMapImpl& response_headers, uint32_t response_size, int upstream_index,",
      "264:     std::chrono::milliseconds time) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "269:   } else {",
      "270:     response = codec_client_->makeHeaderOnlyRequest(request_headers);",
      "271:   }",
      "274:   upstream_request_->encodeHeaders(response_headers, response_size == 0);",
      "",
      "[Removed Lines]",
      "272:   waitForNextUpstreamRequest(upstream_index);",
      "",
      "[Added Lines]",
      "273:   waitForNextUpstreamRequest(upstream_index, time);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "333: }",
      "335: uint64_t",
      "337:   uint64_t upstream_with_request;",
      "339:   if (!fake_upstream_connection_) {",
      "",
      "[Removed Lines]",
      "336: HttpIntegrationTest::waitForNextUpstreamRequest(const std::vector<uint64_t>& upstream_indices) {",
      "",
      "[Added Lines]",
      "337: HttpIntegrationTest::waitForNextUpstreamRequest(const std::vector<uint64_t>& upstream_indices,",
      "338:                                                 std::chrono::milliseconds connection_wait_timeout) {",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "361:   return upstream_with_request;",
      "362: }",
      "366: }",
      "368: void HttpIntegrationTest::checkSimpleRequestSuccess(uint64_t expected_request_size,",
      "",
      "[Removed Lines]",
      "364: void HttpIntegrationTest::waitForNextUpstreamRequest(uint64_t upstream_index) {",
      "365:   waitForNextUpstreamRequest(std::vector<uint64_t>({upstream_index}));",
      "",
      "[Added Lines]",
      "366: void HttpIntegrationTest::waitForNextUpstreamRequest(",
      "367:     uint64_t upstream_index, std::chrono::milliseconds connection_wait_timeout) {",
      "368:   waitForNextUpstreamRequest(std::vector<uint64_t>({upstream_index}), connection_wait_timeout);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "916:   }",
      "917: }",
      "919: void HttpIntegrationTest::testDownstreamResetBeforeResponseComplete() {",
      "920:   initialize();",
      "921:   codec_client_ = makeHttpConnection(lookupPort(\"http\"));",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "922: void HttpIntegrationTest::testLargeRequestTrailers(uint32_t size, uint32_t max_size) {",
      "927:   config_helper_.addConfigModifier(",
      "928:       [&](envoy::config::filter::network::http_connection_manager::v2::HttpConnectionManager& hcm)",
      "929:           -> void { hcm.mutable_max_request_headers_kb()->set_value(max_size); });",
      "930:   max_request_headers_kb_ = max_size;",
      "931:   Http::TestHeaderMapImpl request_trailers{{\"trailer\", \"trailer\"}};",
      "932:   request_trailers.addCopy(\"big\", std::string(size * 1024, 'a'));",
      "934:   initialize();",
      "936:   codec_client_ = makeHttpConnection(lookupPort(\"http\"));",
      "937:   fake_upstreams_[0]->set_allow_unexpected_disconnects(true);",
      "939:   auto encoder_decoder = codec_client_->startRequest(default_request_headers_);",
      "940:   request_encoder_ = &encoder_decoder.first;",
      "941:   auto response = std::move(encoder_decoder.second);",
      "942:   codec_client_->sendData(*request_encoder_, 10, false);",
      "943:   codec_client_->sendTrailers(*request_encoder_, request_trailers);",
      "945:   if (size >= max_size && downstream_protocol_ == Http::CodecClient::Type::HTTP2) {",
      "948:     response->waitForReset();",
      "949:     codec_client_->close();",
      "950:     EXPECT_FALSE(response->complete());",
      "952:   } else {",
      "953:     waitForNextUpstreamRequest();",
      "954:     upstream_request_->encodeHeaders(default_response_headers_, true);",
      "955:     response->waitForEndStream();",
      "956:     EXPECT_TRUE(response->complete());",
      "957:   }",
      "958: }",
      "960: void HttpIntegrationTest::testManyRequestHeaders(std::chrono::milliseconds time) {",
      "961:   config_helper_.addConfigModifier(",
      "962:       [&](envoy::config::filter::network::http_connection_manager::v2::HttpConnectionManager& hcm)",
      "963:           -> void { hcm.mutable_max_request_headers_kb()->set_value(96); });",
      "964:   max_request_headers_kb_ = 96;",
      "966:   Http::TestHeaderMapImpl big_headers{",
      "967:       {\":method\", \"GET\"}, {\":path\", \"/test/long/url\"}, {\":scheme\", \"http\"}, {\":authority\", \"host\"}};",
      "969:   for (int i = 0; i < 20000; i++) {",
      "970:     big_headers.addCopy(std::to_string(i), std::string(0, 'a'));",
      "971:   }",
      "972:   initialize();",
      "974:   codec_client_ = makeHttpConnection(lookupPort(\"http\"));",
      "976:   auto response =",
      "977:       sendRequestAndWaitForResponse(big_headers, 0, default_response_headers_, 0, 0, time);",
      "979:   EXPECT_TRUE(response->complete());",
      "980:   EXPECT_EQ(\"200\", response->headers().Status()->value().getStringView());",
      "981: }",
      "",
      "---------------"
    ],
    "test/integration/http_integration.h||test/integration/http_integration.h": [
      "File: test/integration/http_integration.h -> test/integration/http_integration.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "139:   void cleanupUpstreamAndDownstream();",
      "",
      "[Removed Lines]",
      "125:   IntegrationStreamDecoderPtr",
      "126:   sendRequestAndWaitForResponse(const Http::TestHeaderMapImpl& request_headers,",
      "127:                                 uint32_t request_body_size,",
      "128:                                 const Http::TestHeaderMapImpl& response_headers,",
      "129:                                 uint32_t response_body_size, int upstream_index = 0);",
      "135:   uint64_t waitForNextUpstreamRequest(const std::vector<uint64_t>& upstream_indices);",
      "136:   void waitForNextUpstreamRequest(uint64_t upstream_index = 0);",
      "",
      "[Added Lines]",
      "125:   IntegrationStreamDecoderPtr sendRequestAndWaitForResponse(",
      "126:       const Http::TestHeaderMapImpl& request_headers, uint32_t request_body_size,",
      "127:       const Http::TestHeaderMapImpl& response_headers, uint32_t response_body_size,",
      "128:       int upstream_index = 0, std::chrono::milliseconds time = TestUtility::DefaultTimeout);",
      "134:   uint64_t waitForNextUpstreamRequest(",
      "135:       const std::vector<uint64_t>& upstream_indices,",
      "136:       std::chrono::milliseconds connection_wait_timeout = TestUtility::DefaultTimeout);",
      "137:   void waitForNextUpstreamRequest(",
      "138:       uint64_t upstream_index = 0,",
      "139:       std::chrono::milliseconds connection_wait_timeout = TestUtility::DefaultTimeout);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "185:   void testRouterUpstreamResponseBeforeRequestComplete();",
      "187:   void testTwoRequests(bool force_network_backup = false);",
      "188:   void testLargeRequestHeaders(uint32_t size, uint32_t max_size = 60);",
      "190:   void testAddEncodedTrailers();",
      "191:   void testRetry();",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "191:   void testLargeHeaders(Http::TestHeaderMapImpl request_headers,",
      "192:                         Http::TestHeaderMapImpl request_trailers, uint32_t size, uint32_t max_size);",
      "194:   void testLargeRequestTrailers(uint32_t size, uint32_t max_size = 60);",
      "195:   void testManyRequestHeaders(std::chrono::milliseconds time = TestUtility::DefaultTimeout);",
      "",
      "---------------"
    ],
    "test/integration/protocol_integration_test.cc||test/integration/protocol_integration_test.cc": [
      "File: test/integration/protocol_integration_test.cc -> test/integration/protocol_integration_test.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "576:   EXPECT_EQ(\"200\", response->headers().Status()->value().getStringView());",
      "577: }",
      "579: TEST_P(DownstreamProtocolIntegrationTest, InvalidContentLength) {",
      "580:   initialize();",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "580: TEST_P(DownstreamProtocolIntegrationTest, LargeCookieParsingConcatenated) {",
      "581:   initialize();",
      "583:   codec_client_ = makeHttpConnection(lookupPort(\"http\"));",
      "584:   Http::TestHeaderMapImpl request_headers{{\":method\", \"POST\"},",
      "585:                                           {\":path\", \"/test/long/url\"},",
      "586:                                           {\":scheme\", \"http\"},",
      "587:                                           {\":authority\", \"host\"},",
      "588:                                           {\"content-length\", \"0\"}};",
      "589:   std::vector<std::string> cookie_pieces;",
      "590:   for (int i = 0; i < 7000; i++) {",
      "591:     cookie_pieces.push_back(fmt::sprintf(\"a%x=b\", i));",
      "592:   }",
      "593:   request_headers.addCopy(\"cookie\", absl::StrJoin(cookie_pieces, \"; \"));",
      "594:   auto response = sendRequestAndWaitForResponse(request_headers, 0, default_response_headers_, 0);",
      "596:   ASSERT_TRUE(response->complete());",
      "597:   EXPECT_EQ(\"200\", response->headers().Status()->value().getStringView());",
      "598: }",
      "601: TEST_P(DownstreamProtocolIntegrationTest, LargeCookieParsingMany) {",
      "602:   initialize();",
      "604:   codec_client_ = makeHttpConnection(lookupPort(\"http\"));",
      "605:   Http::TestHeaderMapImpl request_headers{{\":method\", \"POST\"},",
      "606:                                           {\":path\", \"/test/long/url\"},",
      "607:                                           {\":scheme\", \"http\"},",
      "608:                                           {\":authority\", \"host\"},",
      "609:                                           {\"content-length\", \"0\"}};",
      "610:   for (int i = 0; i < 2000; i++) {",
      "611:     request_headers.addCopy(\"cookie\", fmt::sprintf(\"a%x=b\", i));",
      "612:   }",
      "613:   auto response = sendRequestAndWaitForResponse(request_headers, 0, default_response_headers_, 0);",
      "615:   ASSERT_TRUE(response->complete());",
      "616:   EXPECT_EQ(\"200\", response->headers().Status()->value().getStringView());",
      "617: }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "850:   testLargeRequestHeaders(95, 96);",
      "851: }",
      "855: TEST_P(DownstreamProtocolIntegrationTest, testDecodeHeadersReturnsStopAll) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "893: TEST_P(DownstreamProtocolIntegrationTest, ManyRequestHeadersTimeout) {",
      "895:   testManyRequestHeaders(std::chrono::milliseconds(5000));",
      "896: }",
      "898: TEST_P(DownstreamProtocolIntegrationTest, LargeRequestTrailersAccepted) {",
      "899:   testLargeRequestTrailers(60, 96);",
      "900: }",
      "902: TEST_P(DownstreamProtocolIntegrationTest, LargeRequestTrailersRejected) {",
      "903:   testLargeRequestTrailers(66, 60);",
      "904: }",
      "906: TEST_P(DownstreamProtocolIntegrationTest, ManyTrailerHeaders) {",
      "907:   config_helper_.addConfigModifier(",
      "908:       [&](envoy::config::filter::network::http_connection_manager::v2::HttpConnectionManager& hcm)",
      "909:           -> void { hcm.mutable_max_request_headers_kb()->set_value(96); });",
      "911:   Http::TestHeaderMapImpl request_trailers{};",
      "912:   for (int i = 0; i < 20000; i++) {",
      "913:     request_trailers.addCopy(std::to_string(i), \"\");",
      "914:   }",
      "916:   initialize();",
      "917:   codec_client_ = makeHttpConnection(lookupPort(\"http\"));",
      "918:   auto encoder_decoder =",
      "919:       codec_client_->startRequest(Http::TestHeaderMapImpl{{\":method\", \"POST\"},",
      "920:                                                           {\":path\", \"/test/long/url\"},",
      "921:                                                           {\":scheme\", \"http\"},",
      "922:                                                           {\":authority\", \"host\"}});",
      "923:   request_encoder_ = &encoder_decoder.first;",
      "924:   auto response = std::move(encoder_decoder.second);",
      "925:   codec_client_->sendTrailers(*request_encoder_, request_trailers);",
      "926:   waitForNextUpstreamRequest();",
      "927:   upstream_request_->encodeHeaders(default_response_headers_, true);",
      "928:   response->waitForEndStream();",
      "930:   EXPECT_TRUE(upstream_request_->complete());",
      "931:   EXPECT_TRUE(response->complete());",
      "932:   EXPECT_EQ(\"200\", response->headers().Status()->value().getStringView());",
      "933: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "7b834b56bb4981bae46271c92e723313c179abe0",
      "candidate_info": {
        "commit_hash": "7b834b56bb4981bae46271c92e723313c179abe0",
        "repo": "envoyproxy/envoy",
        "commit_url": "https://github.com/envoyproxy/envoy/commit/7b834b56bb4981bae46271c92e723313c179abe0",
        "files": [
          "include/envoy/http/codec.h",
          "source/common/http/conn_manager_impl.cc",
          "source/common/http/http1/codec_impl.cc",
          "source/common/http/http1/codec_impl.h",
          "test/common/http/http1/codec_impl_test.cc",
          "test/integration/integration_test.cc"
        ],
        "message": "http: adding response code details for downstream HTTP/1.1 codec errors (#9286)\n\nAlso adding a fix to Connect header rejection where the codec sent a protocol error without throwing an exception.\n\nRisk Level: Medium (minimal tweaks to data plane code)\nTesting: new unit tests, integration test\nDocs Changes: n/a\nRelease Notes: n/a\nSigned-off-by: Alyssa Wilk <alyssar@chromium.org>",
        "before_after_code_files": [
          "include/envoy/http/codec.h||include/envoy/http/codec.h",
          "source/common/http/conn_manager_impl.cc||source/common/http/conn_manager_impl.cc",
          "source/common/http/http1/codec_impl.cc||source/common/http/http1/codec_impl.cc",
          "source/common/http/http1/codec_impl.h||source/common/http/http1/codec_impl.h",
          "test/common/http/http1/codec_impl_test.cc||test/common/http/http1/codec_impl_test.cc",
          "test/integration/integration_test.cc||test/integration/integration_test.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "source/common/http/conn_manager_impl.cc||source/common/http/conn_manager_impl.cc",
            "source/common/http/http1/codec_impl.cc||source/common/http/http1/codec_impl.cc"
          ],
          "candidate": [
            "source/common/http/conn_manager_impl.cc||source/common/http/conn_manager_impl.cc",
            "source/common/http/http1/codec_impl.cc||source/common/http/http1/codec_impl.cc"
          ]
        }
      },
      "candidate_diff": {
        "include/envoy/http/codec.h||include/envoy/http/codec.h": [
          "File: include/envoy/http/codec.h -> include/envoy/http/codec.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "205:   virtual uint32_t bufferLimit() PURE;",
          "206: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "214:   virtual absl::string_view responseDetails() { return \"\"; }",
          "",
          "---------------"
        ],
        "source/common/http/conn_manager_impl.cc||source/common/http/conn_manager_impl.cc": [
          "File: source/common/http/conn_manager_impl.cc -> source/common/http/conn_manager_impl.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "380:     stream.onResetStream(StreamResetReason::ConnectionTermination, absl::string_view());",
          "381:     if (response_flag.has_value()) {",
          "382:       stream.stream_info_.setResponseFlag(response_flag.value());",
          "383:     }",
          "384:   }",
          "385: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "383:       if (*response_flag == StreamInfo::ResponseFlag::DownstreamProtocolError) {",
          "384:         stream.stream_info_.setResponseCodeDetails(",
          "385:             stream.response_encoder_->getStream().responseDetails());",
          "386:       }",
          "",
          "---------------"
        ],
        "source/common/http/http1/codec_impl.cc||source/common/http/http1/codec_impl.cc": [
          "File: source/common/http/http1/codec_impl.cc -> source/common/http/http1/codec_impl.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: namespace Http1 {",
          "25: namespace {",
          "27: const StringUtil::CaseUnorderedSet& caseUnorderdSetContainingUpgradeAndHttp2Settings() {",
          "28:   CONSTRUCT_ON_FIRST_USE(StringUtil::CaseUnorderedSet,",
          "29:                          Http::Headers::get().ConnectionValues.Upgrade,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27: struct Http1ResponseCodeDetailValues {",
          "28:   const absl::string_view TooManyHeaders = \"http1.too_many_headers\";",
          "29:   const absl::string_view HeadersTooLarge = \"http1.headers_too_large\";",
          "30:   const absl::string_view HttpCodecError = \"http1.codec_error\";",
          "31:   const absl::string_view InvalidCharacters = \"http1.invalid_characters\";",
          "32:   const absl::string_view ConnectionHeaderSanitization = \"http1.connection_header_rejected\";",
          "33:   const absl::string_view InvalidUrl = \"http1.invalid_url\";",
          "34: };",
          "36: using Http1ResponseCodeDetails = ConstSingleton<Http1ResponseCodeDetailValues>;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "382:   if (current_header_map_->size() > max_headers_count_) {",
          "383:     error_code_ = Http::Code::RequestHeaderFieldsTooLarge;",
          "385:     throw CodecProtocolException(\"headers size exceeds limit\");",
          "386:   }",
          "",
          "[Removed Lines]",
          "384:     sendProtocolError();",
          "",
          "[Added Lines]",
          "395:     sendProtocolError(Http1ResponseCodeDetails::get().TooManyHeaders);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "442: size_t ConnectionImpl::dispatchSlice(const char* slice, size_t len) {",
          "443:   ssize_t rc = http_parser_execute(&parser_, &settings_, slice, len);",
          "444:   if (HTTP_PARSER_ERRNO(&parser_) != HPE_OK && HTTP_PARSER_ERRNO(&parser_) != HPE_PAUSED) {",
          "446:     throw CodecProtocolException(\"http/1.1 protocol error: \" +",
          "447:                                  std::string(http_errno_name(HTTP_PARSER_ERRNO(&parser_))));",
          "448:   }",
          "",
          "[Removed Lines]",
          "445:     sendProtocolError();",
          "",
          "[Added Lines]",
          "456:     sendProtocolError(Http1ResponseCodeDetails::get().HttpCodecError);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "477:     if (!Http::HeaderUtility::headerIsValid(header_value)) {",
          "478:       ENVOY_CONN_LOG(debug, \"invalid header value: {}\", connection_, header_value);",
          "479:       error_code_ = Http::Code::BadRequest;",
          "481:       throw CodecProtocolException(\"http/1.1 protocol error: header value contains invalid chars\");",
          "482:     }",
          "483:   } else if (header_value.find('\\0') != absl::string_view::npos) {",
          "",
          "[Removed Lines]",
          "480:       sendProtocolError();",
          "",
          "[Added Lines]",
          "491:       sendProtocolError(Http1ResponseCodeDetails::get().InvalidCharacters);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "496:   if (total > (max_headers_kb_ * 1024)) {",
          "498:     error_code_ = Http::Code::RequestHeaderFieldsTooLarge;",
          "500:     throw CodecProtocolException(\"headers size exceeds limit\");",
          "501:   }",
          "502: }",
          "",
          "[Removed Lines]",
          "499:     sendProtocolError();",
          "",
          "[Added Lines]",
          "510:     sendProtocolError(Http1ResponseCodeDetails::get().HeadersTooLarge);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "539:       ENVOY_CONN_LOG(debug, \"Invalid nominated headers in Connection: {}\", connection_,",
          "540:                      header_value);",
          "541:       error_code_ = Http::Code::BadRequest;",
          "543:     }",
          "544:   }",
          "",
          "[Removed Lines]",
          "542:       sendProtocolError();",
          "",
          "[Added Lines]",
          "553:       sendProtocolError(Http1ResponseCodeDetails::get().ConnectionHeaderSanitization);",
          "554:       throw CodecProtocolException(\"Invalid nominated headers in Connection.\");",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "628:   Utility::Url absolute_url;",
          "629:   if (!absolute_url.initialize(active_request_->request_url_.getStringView())) {",
          "631:     throw CodecProtocolException(\"http/1.1 protocol error: invalid url in request line\");",
          "632:   }",
          "",
          "[Removed Lines]",
          "630:     sendProtocolError();",
          "",
          "[Added Lines]",
          "642:     sendProtocolError(Http1ResponseCodeDetails::get().InvalidUrl);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "734:   active_request_.reset();",
          "735: }",
          "",
          "[Removed Lines]",
          "737: void ServerConnectionImpl::sendProtocolError() {",
          "",
          "[Added Lines]",
          "749: void ServerConnectionImpl::sendProtocolError(absl::string_view details) {",
          "750:   if (active_request_) {",
          "751:     active_request_->response_encoder_.setDetails(details);",
          "752:   }",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "871:   }",
          "872: }",
          "874: void ClientConnectionImpl::onAboveHighWatermark() {",
          "876:   ASSERT(!pending_responses_.empty());",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "889: void ClientConnectionImpl::sendProtocolError(absl::string_view details) {",
          "890:   if (request_encoder_) {",
          "891:     request_encoder_->setDetails(details);",
          "892:   }",
          "893: }",
          "",
          "---------------"
        ],
        "source/common/http/http1/codec_impl.h||source/common/http/http1/codec_impl.h": [
          "File: source/common/http/http1/codec_impl.h -> source/common/http/http1/codec_impl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "60:   void resetStream(StreamResetReason reason) override;",
          "61:   void readDisable(bool disable) override;",
          "62:   uint32_t bufferLimit() override;",
          "64:   void isResponseToHeadRequest(bool value) { is_response_to_head_request_ = value; }",
          "66: protected:",
          "67:   StreamEncoderImpl(ConnectionImpl& connection, HeaderKeyFormatter* header_key_formatter);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "63:   absl::string_view responseDetails() override { return details_; }",
          "66:   void setDetails(absl::string_view details) { details_ = details; }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "101:   bool processing_100_continue_ : 1;",
          "102:   bool is_response_to_head_request_ : 1;",
          "103:   bool is_content_length_allowed_ : 1;",
          "104: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "106:   absl::string_view details_;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "285:   virtual void sendProtocolError() PURE;",
          "",
          "[Added Lines]",
          "288:   virtual void sendProtocolError(absl::string_view details = \"\") PURE;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "355:   void onBody(const char* data, size_t length) override;",
          "356:   void onMessageComplete() override;",
          "357:   void onResetStream(StreamResetReason reason) override;",
          "359:   void onAboveHighWatermark() override;",
          "360:   void onBelowLowWatermark() override;",
          "",
          "[Removed Lines]",
          "358:   void sendProtocolError() override;",
          "",
          "[Added Lines]",
          "361:   void sendProtocolError(absl::string_view details) override;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "395:   void onBody(const char* data, size_t length) override;",
          "396:   void onMessageComplete() override;",
          "397:   void onResetStream(StreamResetReason reason) override;",
          "399:   void onAboveHighWatermark() override;",
          "400:   void onBelowLowWatermark() override;",
          "",
          "[Removed Lines]",
          "398:   void sendProtocolError() override {}",
          "",
          "[Added Lines]",
          "401:   void sendProtocolError(absl::string_view details) override;",
          "",
          "---------------"
        ],
        "test/common/http/http1/codec_impl_test.cc||test/common/http/http1/codec_impl_test.cc": [
          "File: test/common/http/http1/codec_impl_test.cc -> test/common/http/http1/codec_impl_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "58:   void expectHeadersTest(Protocol p, bool allow_absolute_url, Buffer::OwnedImpl& buffer,",
          "59:                          TestHeaderMapImpl& expected_headers);",
          "62:   void testRequestHeadersAccepted(std::string header_string);",
          "",
          "[Removed Lines]",
          "60:   void expect400(Protocol p, bool allow_absolute_url, Buffer::OwnedImpl& buffer);",
          "61:   void testRequestHeadersExceedLimit(std::string header_string);",
          "",
          "[Added Lines]",
          "60:   void expect400(Protocol p, bool allow_absolute_url, Buffer::OwnedImpl& buffer,",
          "61:                  absl::string_view details = \"\");",
          "62:   void testRequestHeadersExceedLimit(std::string header_string, absl::string_view details = \"\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "87: };",
          "89: void Http1ServerConnectionImplTest::expect400(Protocol p, bool allow_absolute_url,",
          "91:   InSequence sequence;",
          "93:   std::string output;",
          "",
          "[Removed Lines]",
          "90:                                               Buffer::OwnedImpl& buffer) {",
          "",
          "[Added Lines]",
          "91:                                               Buffer::OwnedImpl& buffer,",
          "92:                                               absl::string_view details) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "101:   }",
          "103:   Http::MockStreamDecoder decoder;",
          "106:   EXPECT_THROW(codec_->dispatch(buffer), CodecProtocolException);",
          "107:   EXPECT_EQ(\"HTTP/1.1 400 Bad Request\\r\\ncontent-length: 0\\r\\nconnection: close\\r\\n\\r\\n\", output);",
          "108:   EXPECT_EQ(p, codec_->protocol());",
          "109: }",
          "111: void Http1ServerConnectionImplTest::expectHeadersTest(Protocol p, bool allow_absolute_url,",
          "",
          "[Removed Lines]",
          "104:   EXPECT_CALL(callbacks_, newStream(_, _)).WillOnce(ReturnRef(decoder));",
          "",
          "[Added Lines]",
          "106:   Http::StreamEncoder* response_encoder = nullptr;",
          "107:   EXPECT_CALL(callbacks_, newStream(_, _))",
          "108:       .WillOnce(Invoke([&](Http::StreamEncoder& encoder, bool) -> Http::StreamDecoder& {",
          "109:         response_encoder = &encoder;",
          "110:         return decoder;",
          "111:       }));",
          "116:   if (!details.empty()) {",
          "117:     EXPECT_EQ(details, response_encoder->getStream().responseDetails());",
          "118:   }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "130:   EXPECT_EQ(p, codec_->protocol());",
          "131: }",
          "134:   initialize();",
          "136:   std::string exception_reason;",
          "",
          "[Removed Lines]",
          "133: void Http1ServerConnectionImplTest::testRequestHeadersExceedLimit(std::string header_string) {",
          "",
          "[Added Lines]",
          "143: void Http1ServerConnectionImplTest::testRequestHeadersExceedLimit(std::string header_string,",
          "144:                                                                   absl::string_view details) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "146:   codec_->dispatch(buffer);",
          "147:   buffer = Buffer::OwnedImpl(header_string + \"\\r\\n\");",
          "148:   EXPECT_THROW_WITH_MESSAGE(codec_->dispatch(buffer), EnvoyException, \"headers size exceeds limit\");",
          "149: }",
          "151: void Http1ServerConnectionImplTest::testRequestHeadersAccepted(std::string header_string) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "160:   if (!details.empty()) {",
          "161:     EXPECT_EQ(details, response_encoder->getStream().responseDetails());",
          "162:   }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "325:   Buffer::OwnedImpl buffer(\"GET www.somewhere.com HTTP/1.1\\r\\nHost: bah\\r\\n\\r\\n\");",
          "327: }",
          "329: TEST_F(Http1ServerConnectionImplTest, Http11AbsolutePathNoSlash) {",
          "",
          "[Removed Lines]",
          "326:   expect400(Protocol::Http11, true, buffer);",
          "",
          "[Added Lines]",
          "340:   expect400(Protocol::Http11, true, buffer, \"http1.codec_error\");",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "339:   initialize();",
          "341:   Buffer::OwnedImpl buffer(\"GET * HTTP/1.1\\r\\nHost: bah\\r\\n\\r\\n\");",
          "343: }",
          "345: TEST_F(Http1ServerConnectionImplTest, Http11AbsolutePortTooLarge) {",
          "",
          "[Removed Lines]",
          "342:   expect400(Protocol::Http11, true, buffer);",
          "",
          "[Added Lines]",
          "356:   expect400(Protocol::Http11, true, buffer, \"http1.invalid_url\");",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "349:   expect400(Protocol::Http11, true, buffer);",
          "350: }",
          "352: TEST_F(Http1ServerConnectionImplTest, Http11RelativeOnly) {",
          "353:   initialize();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "366: TEST_F(Http1ServerConnectionImplTest, SketchyConnectionHeader) {",
          "367:   initialize();",
          "369:   Buffer::OwnedImpl buffer(",
          "370:       \"GET / HTTP/1.1\\r\\nHost: bah\\r\\nConnection: a,b,c,d,e,f,g,h,i,j,k,l,m\\r\\n\\r\\n\");",
          "371:   expect400(Protocol::Http11, true, buffer, \"http1.connection_header_rejected\");",
          "372: }",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "474:   initialize();",
          "476:   Http::MockStreamDecoder decoder;",
          "479:   Buffer::OwnedImpl buffer(",
          "480:       absl::StrCat(\"GET / HTTP/1.1\\r\\nHOST: h.com\\r\\nfoo: \", std::string(1, 3), \"\\r\\n\"));",
          "481:   EXPECT_THROW_WITH_MESSAGE(codec_->dispatch(buffer), CodecProtocolException,",
          "482:                             \"http/1.1 protocol error: header value contains invalid chars\");",
          "483: }",
          "",
          "[Removed Lines]",
          "477:   EXPECT_CALL(callbacks_, newStream(_, _)).WillOnce(ReturnRef(decoder));",
          "",
          "[Added Lines]",
          "499:   Http::StreamEncoder* response_encoder = nullptr;",
          "500:   EXPECT_CALL(callbacks_, newStream(_, _))",
          "501:       .WillOnce(Invoke([&](Http::StreamEncoder& encoder, bool) -> Http::StreamDecoder& {",
          "502:         response_encoder = &encoder;",
          "503:         return decoder;",
          "504:       }));",
          "509:   EXPECT_EQ(\"http1.invalid_characters\", response_encoder->getStream().responseDetails());",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1403: TEST_F(Http1ServerConnectionImplTest, ManyRequestHeadersRejected) {",
          "1406: }",
          "1408: TEST_F(Http1ServerConnectionImplTest, LargeRequestHeadersSplitRejected) {",
          "",
          "[Removed Lines]",
          "1405:   testRequestHeadersExceedLimit(createHeaderFragment(101));",
          "",
          "[Added Lines]",
          "1432:   testRequestHeadersExceedLimit(createHeaderFragment(101), \"http1.too_many_headers\");",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1429:   buffer = Buffer::OwnedImpl(fmt::format(\"big: {}\\r\\n\", long_string));",
          "1430:   EXPECT_THROW_WITH_MESSAGE(codec_->dispatch(buffer), EnvoyException, \"headers size exceeds limit\");",
          "1431: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1458:   EXPECT_EQ(\"http1.headers_too_large\", response_encoder->getStream().responseDetails());",
          "",
          "---------------"
        ],
        "test/integration/integration_test.cc||test/integration/integration_test.cc": [
          "File: test/integration/integration_test.cc -> test/integration/integration_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "336: }",
          "338: TEST_P(IntegrationTest, MissingDelimiter) {",
          "339:   initialize();",
          "340:   std::string response;",
          "341:   sendRawHttpAndWaitForResponse(lookupPort(\"http\"),",
          "342:                                 \"GET / HTTP/1.1\\r\\nHost: host\\r\\nfoo bar\\r\\n\\r\\n\", &response);",
          "343:   EXPECT_EQ(\"HTTP/1.1 400 Bad Request\\r\\ncontent-length: 0\\r\\nconnection: close\\r\\n\\r\\n\", response);",
          "344: }",
          "346: TEST_P(IntegrationTest, InvalidCharacterInFirstline) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "339:   useAccessLog(\"%RESPONSE_CODE_DETAILS%\");",
          "345:   EXPECT_THAT(waitForAccessLog(access_log_name_), HasSubstr(\"http1.codec_error\"));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "261d4438c0690f127c9f4a7690da3e8377a51fd6",
      "candidate_info": {
        "commit_hash": "261d4438c0690f127c9f4a7690da3e8377a51fd6",
        "repo": "envoyproxy/envoy",
        "commit_url": "https://github.com/envoyproxy/envoy/commit/261d4438c0690f127c9f4a7690da3e8377a51fd6",
        "files": [
          "source/extensions/access_loggers/grpc/BUILD",
          "source/extensions/access_loggers/grpc/grpc_access_log_impl.cc",
          "source/extensions/access_loggers/grpc/grpc_access_log_impl.h",
          "source/extensions/access_loggers/grpc/grpc_access_log_proto_descriptors.cc",
          "source/extensions/access_loggers/grpc/grpc_access_log_proto_descriptors.h",
          "source/extensions/access_loggers/grpc/grpc_access_log_utils.cc",
          "source/extensions/access_loggers/grpc/grpc_access_log_utils.h",
          "source/extensions/access_loggers/grpc/http_config.cc",
          "source/extensions/access_loggers/grpc/http_config.h",
          "source/extensions/access_loggers/grpc/http_grpc_access_log_impl.cc",
          "source/extensions/access_loggers/grpc/http_grpc_access_log_impl.h",
          "source/extensions/access_loggers/http_grpc/BUILD",
          "source/extensions/access_loggers/http_grpc/config.cc",
          "source/extensions/access_loggers/http_grpc/config.h",
          "source/extensions/access_loggers/http_grpc/grpc_access_log_impl.cc",
          "source/extensions/access_loggers/http_grpc/grpc_access_log_impl.h",
          "source/extensions/access_loggers/http_grpc/grpc_access_log_proto_descriptors.cc",
          "source/extensions/access_loggers/http_grpc/grpc_access_log_proto_descriptors.h",
          "source/extensions/extensions_build_config.bzl",
          "test/extensions/access_loggers/grpc/BUILD",
          "test/extensions/access_loggers/grpc/grpc_access_log_impl_test.cc",
          "test/extensions/access_loggers/grpc/grpc_access_log_utils_test.cc",
          "test/extensions/access_loggers/grpc/http_config_test.cc",
          "test/extensions/access_loggers/grpc/http_grpc_access_log_impl_test.cc",
          "test/extensions/access_loggers/grpc/http_grpc_access_log_integration_test.cc",
          "test/extensions/access_loggers/http_grpc/BUILD",
          "test/extensions/access_loggers/http_grpc/config_test.cc",
          "test/extensions/access_loggers/http_grpc/grpc_access_log_impl_test.cc",
          "test/extensions/access_loggers/http_grpc/grpc_access_log_integration_test.cc",
          "tools/check_format.py"
        ],
        "message": "grpc access logger: refactor common gRPC ALS out (#7879)\n\nDescription:\nIn preparation to implement TCP gRPC Access Logger.\n\nRisk Level: Low (refactoring only)\nTesting: CI\nDocs Changes: N/A\nRelease Notes: N/A\n\nSigned-off-by: Lizan Zhou <lizan@tetrate.io>",
        "before_after_code_files": [
          "source/extensions/access_loggers/grpc/grpc_access_log_impl.cc||source/extensions/access_loggers/grpc/grpc_access_log_impl.cc",
          "source/extensions/access_loggers/http_grpc/grpc_access_log_impl.h||source/extensions/access_loggers/grpc/grpc_access_log_impl.h",
          "source/extensions/access_loggers/http_grpc/grpc_access_log_proto_descriptors.cc||source/extensions/access_loggers/grpc/grpc_access_log_proto_descriptors.cc",
          "source/extensions/access_loggers/grpc/grpc_access_log_utils.cc||source/extensions/access_loggers/grpc/grpc_access_log_utils.cc",
          "source/extensions/access_loggers/grpc/grpc_access_log_utils.h||source/extensions/access_loggers/grpc/grpc_access_log_utils.h",
          "source/extensions/access_loggers/http_grpc/config.cc||source/extensions/access_loggers/grpc/http_config.cc",
          "source/extensions/access_loggers/http_grpc/config.h||source/extensions/access_loggers/grpc/http_config.h",
          "source/extensions/access_loggers/grpc/http_grpc_access_log_impl.cc||source/extensions/access_loggers/grpc/http_grpc_access_log_impl.cc",
          "source/extensions/access_loggers/grpc/http_grpc_access_log_impl.h||source/extensions/access_loggers/grpc/http_grpc_access_log_impl.h",
          "source/extensions/access_loggers/http_grpc/grpc_access_log_impl.cc||source/extensions/access_loggers/http_grpc/grpc_access_log_impl.cc",
          "source/extensions/extensions_build_config.bzl||source/extensions/extensions_build_config.bzl",
          "test/extensions/access_loggers/grpc/grpc_access_log_impl_test.cc||test/extensions/access_loggers/grpc/grpc_access_log_impl_test.cc",
          "test/extensions/access_loggers/grpc/grpc_access_log_utils_test.cc||test/extensions/access_loggers/grpc/grpc_access_log_utils_test.cc",
          "test/extensions/access_loggers/http_grpc/config_test.cc||test/extensions/access_loggers/grpc/http_config_test.cc",
          "test/extensions/access_loggers/http_grpc/grpc_access_log_impl_test.cc||test/extensions/access_loggers/grpc/http_grpc_access_log_impl_test.cc",
          "tools/check_format.py||tools/check_format.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "source/extensions/access_loggers/grpc/http_grpc_access_log_impl.cc||source/extensions/access_loggers/grpc/http_grpc_access_log_impl.cc"
          ],
          "candidate": [
            "source/extensions/access_loggers/grpc/http_grpc_access_log_impl.cc||source/extensions/access_loggers/grpc/http_grpc_access_log_impl.cc"
          ]
        }
      },
      "candidate_diff": {
        "source/extensions/access_loggers/grpc/grpc_access_log_impl.cc||source/extensions/access_loggers/grpc/grpc_access_log_impl.cc": [
          "File: source/extensions/access_loggers/grpc/grpc_access_log_impl.cc -> source/extensions/access_loggers/grpc/grpc_access_log_impl.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #include \"extensions/access_loggers/grpc/grpc_access_log_impl.h\"",
          "3: #include \"envoy/upstream/upstream.h\"",
          "5: #include \"common/common/assert.h\"",
          "6: #include \"common/network/utility.h\"",
          "7: #include \"common/stream_info/utility.h\"",
          "9: namespace Envoy {",
          "10: namespace Extensions {",
          "11: namespace AccessLoggers {",
          "12: namespace GrpcCommon {",
          "14: void GrpcAccessLoggerImpl::LocalStream::onRemoteClose(Grpc::Status::GrpcStatus,",
          "15:                                                       const std::string&) {",
          "16:   ASSERT(parent_.stream_ != absl::nullopt);",
          "17:   if (parent_.stream_->stream_ != nullptr) {",
          "20:     parent_.stream_.reset();",
          "21:   }",
          "22: }",
          "24: GrpcAccessLoggerImpl::GrpcAccessLoggerImpl(Grpc::RawAsyncClientPtr&& client, std::string log_name,",
          "25:                                            std::chrono::milliseconds buffer_flush_interval_msec,",
          "26:                                            uint64_t buffer_size_bytes,",
          "27:                                            Event::Dispatcher& dispatcher,",
          "28:                                            const LocalInfo::LocalInfo& local_info)",
          "29:     : client_(std::move(client)), log_name_(log_name),",
          "30:       buffer_flush_interval_msec_(buffer_flush_interval_msec),",
          "31:       flush_timer_(dispatcher.createTimer([this]() {",
          "32:         flush();",
          "33:         flush_timer_->enableTimer(buffer_flush_interval_msec_);",
          "34:       })),",
          "35:       buffer_size_bytes_(buffer_size_bytes), local_info_(local_info) {",
          "36:   flush_timer_->enableTimer(buffer_flush_interval_msec_);",
          "37: }",
          "39: void GrpcAccessLoggerImpl::log(envoy::data::accesslog::v2::HTTPAccessLogEntry&& entry) {",
          "40:   approximate_message_size_bytes_ += entry.ByteSizeLong();",
          "41:   message_.mutable_http_logs()->add_log_entry()->Swap(&entry);",
          "42:   if (approximate_message_size_bytes_ >= buffer_size_bytes_) {",
          "43:     flush();",
          "44:   }",
          "45: }",
          "47: void GrpcAccessLoggerImpl::flush() {",
          "48:   if (!message_.has_http_logs()) {",
          "50:     return;",
          "51:   }",
          "53:   if (stream_ == absl::nullopt) {",
          "54:     stream_.emplace(*this);",
          "55:   }",
          "57:   if (stream_->stream_ == nullptr) {",
          "58:     stream_->stream_ =",
          "59:         client_->start(*Protobuf::DescriptorPool::generated_pool()->FindMethodByName(",
          "60:                            \"envoy.service.accesslog.v2.AccessLogService.StreamAccessLogs\"),",
          "63:     auto* identifier = message_.mutable_identifier();",
          "65:     identifier->set_log_name(log_name_);",
          "66:   }",
          "68:   if (stream_->stream_ != nullptr) {",
          "69:     stream_->stream_->sendMessage(message_, false);",
          "70:   } else {",
          "72:     stream_.reset();",
          "73:   }",
          "76:   approximate_message_size_bytes_ = 0;",
          "77:   message_.Clear();",
          "78: }",
          "80: GrpcAccessLoggerCacheImpl::GrpcAccessLoggerCacheImpl(Grpc::AsyncClientManager& async_client_manager,",
          "81:                                                      Stats::Scope& scope,",
          "82:                                                      ThreadLocal::SlotAllocator& tls,",
          "83:                                                      const LocalInfo::LocalInfo& local_info)",
          "84:     : async_client_manager_(async_client_manager), scope_(scope), tls_slot_(tls.allocateSlot()),",
          "85:       local_info_(local_info) {",
          "86:   tls_slot_->set(",
          "87:       [](Event::Dispatcher& dispatcher) { return std::make_shared<ThreadLocalCache>(dispatcher); });",
          "88: }",
          "90: GrpcAccessLoggerSharedPtr GrpcAccessLoggerCacheImpl::getOrCreateLogger(",
          "91:     const envoy::config::accesslog::v2::CommonGrpcAccessLogConfig& config) {",
          "93:   auto& cache = tls_slot_->getTyped<ThreadLocalCache>();",
          "95:   const std::size_t cache_key = MessageUtil::hash(config);",
          "96:   const auto it = cache.access_loggers_.find(cache_key);",
          "97:   if (it != cache.access_loggers_.end()) {",
          "98:     return it->second;",
          "99:   }",
          "100:   const Grpc::AsyncClientFactoryPtr factory =",
          "101:       async_client_manager_.factoryForGrpcService(config.grpc_service(), scope_, false);",
          "102:   const GrpcAccessLoggerSharedPtr logger = std::make_shared<GrpcAccessLoggerImpl>(",
          "103:       factory->create(), config.log_name(),",
          "104:       std::chrono::milliseconds(PROTOBUF_GET_MS_OR_DEFAULT(config, buffer_flush_interval, 1000)),",
          "105:       PROTOBUF_GET_WRAPPED_OR_DEFAULT(config, buffer_size_bytes, 16384), cache.dispatcher_,",
          "106:       local_info_);",
          "107:   cache.access_loggers_.emplace(cache_key, logger);",
          "108:   return logger;",
          "109: }",
          "111: } // namespace GrpcCommon",
          "112: } // namespace AccessLoggers",
          "113: } // namespace Extensions",
          "114: } // namespace Envoy",
          "",
          "---------------"
        ],
        "source/extensions/access_loggers/http_grpc/grpc_access_log_impl.h||source/extensions/access_loggers/grpc/grpc_access_log_impl.h": [
          "File: source/extensions/access_loggers/http_grpc/grpc_access_log_impl.h -> source/extensions/access_loggers/grpc/grpc_access_log_impl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: namespace Envoy {",
          "20: namespace Extensions {",
          "21: namespace AccessLoggers {",
          "",
          "[Removed Lines]",
          "22: namespace HttpGrpc {",
          "",
          "[Added Lines]",
          "22: namespace GrpcCommon {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "127:   const LocalInfo::LocalInfo& local_info_;",
          "128: };",
          "168: } // namespace AccessLoggers",
          "169: } // namespace Extensions",
          "",
          "[Removed Lines]",
          "133: class HttpGrpcAccessLog : public Common::ImplBase {",
          "134: public:",
          "135:   HttpGrpcAccessLog(AccessLog::FilterPtr&& filter,",
          "136:                     envoy::config::accesslog::v2::HttpGrpcAccessLogConfig config,",
          "137:                     ThreadLocal::SlotAllocator& tls,",
          "138:                     GrpcAccessLoggerCacheSharedPtr access_logger_cache);",
          "140:   static void responseFlagsToAccessLogResponseFlags(",
          "141:       envoy::data::accesslog::v2::AccessLogCommon& common_access_log,",
          "142:       const StreamInfo::StreamInfo& stream_info);",
          "144: private:",
          "148:   struct ThreadLocalLogger : public ThreadLocal::ThreadLocalObject {",
          "149:     ThreadLocalLogger(GrpcAccessLoggerSharedPtr logger);",
          "151:     const GrpcAccessLoggerSharedPtr logger_;",
          "152:   };",
          "155:   void emitLog(const Http::HeaderMap& request_headers, const Http::HeaderMap& response_headers,",
          "156:                const Http::HeaderMap& response_trailers,",
          "157:                const StreamInfo::StreamInfo& stream_info) override;",
          "159:   const envoy::config::accesslog::v2::HttpGrpcAccessLogConfig config_;",
          "160:   const ThreadLocal::SlotPtr tls_slot_;",
          "161:   const GrpcAccessLoggerCacheSharedPtr access_logger_cache_;",
          "162:   std::vector<Http::LowerCaseString> request_headers_to_log_;",
          "163:   std::vector<Http::LowerCaseString> response_headers_to_log_;",
          "164:   std::vector<Http::LowerCaseString> response_trailers_to_log_;",
          "165: };",
          "167: } // namespace HttpGrpc",
          "170: } // namespace Envoy",
          "",
          "[Added Lines]",
          "130: } // namespace GrpcCommon",
          "133: } // namespace Envoy",
          "",
          "---------------"
        ],
        "source/extensions/access_loggers/http_grpc/grpc_access_log_proto_descriptors.cc||source/extensions/access_loggers/grpc/grpc_access_log_proto_descriptors.cc": [
          "File: source/extensions/access_loggers/http_grpc/grpc_access_log_proto_descriptors.cc -> source/extensions/access_loggers/grpc/grpc_access_log_proto_descriptors.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: #include \"envoy/service/accesslog/v2/als.pb.h\"",
          "",
          "[Removed Lines]",
          "1: #include \"extensions/access_loggers/http_grpc/grpc_access_log_proto_descriptors.h\"",
          "",
          "[Added Lines]",
          "1: #include \"extensions/access_loggers/grpc/grpc_access_log_proto_descriptors.h\"",
          "",
          "---------------"
        ],
        "source/extensions/access_loggers/grpc/grpc_access_log_utils.cc||source/extensions/access_loggers/grpc/grpc_access_log_utils.cc": [
          "File: source/extensions/access_loggers/grpc/grpc_access_log_utils.cc -> source/extensions/access_loggers/grpc/grpc_access_log_utils.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #include \"extensions/access_loggers/grpc/grpc_access_log_utils.h\"",
          "3: #include \"envoy/upstream/upstream.h\"",
          "5: #include \"common/network/utility.h\"",
          "7: namespace Envoy {",
          "8: namespace Extensions {",
          "9: namespace AccessLoggers {",
          "10: namespace GrpcCommon {",
          "12: namespace {",
          "14: using namespace envoy::data::accesslog::v2;",
          "18: TLSProperties_TLSVersion tlsVersionStringToEnum(const std::string& tls_version) {",
          "19:   if (tls_version == \"TLSv1\") {",
          "20:     return TLSProperties_TLSVersion_TLSv1;",
          "21:   } else if (tls_version == \"TLSv1.1\") {",
          "22:     return TLSProperties_TLSVersion_TLSv1_1;",
          "23:   } else if (tls_version == \"TLSv1.2\") {",
          "24:     return TLSProperties_TLSVersion_TLSv1_2;",
          "25:   } else if (tls_version == \"TLSv1.3\") {",
          "26:     return TLSProperties_TLSVersion_TLSv1_3;",
          "27:   }",
          "29:   return TLSProperties_TLSVersion_VERSION_UNSPECIFIED;",
          "30: }",
          "32: } // namespace",
          "34: void Utility::responseFlagsToAccessLogResponseFlags(",
          "35:     envoy::data::accesslog::v2::AccessLogCommon& common_access_log,",
          "36:     const StreamInfo::StreamInfo& stream_info) {",
          "38:   static_assert(StreamInfo::ResponseFlag::LastFlag == 0x20000,",
          "39:                 \"A flag has been added. Fix this code.\");",
          "41:   if (stream_info.hasResponseFlag(StreamInfo::ResponseFlag::FailedLocalHealthCheck)) {",
          "42:     common_access_log.mutable_response_flags()->set_failed_local_healthcheck(true);",
          "43:   }",
          "45:   if (stream_info.hasResponseFlag(StreamInfo::ResponseFlag::NoHealthyUpstream)) {",
          "46:     common_access_log.mutable_response_flags()->set_no_healthy_upstream(true);",
          "47:   }",
          "49:   if (stream_info.hasResponseFlag(StreamInfo::ResponseFlag::UpstreamRequestTimeout)) {",
          "50:     common_access_log.mutable_response_flags()->set_upstream_request_timeout(true);",
          "51:   }",
          "53:   if (stream_info.hasResponseFlag(StreamInfo::ResponseFlag::LocalReset)) {",
          "54:     common_access_log.mutable_response_flags()->set_local_reset(true);",
          "55:   }",
          "57:   if (stream_info.hasResponseFlag(StreamInfo::ResponseFlag::UpstreamRemoteReset)) {",
          "58:     common_access_log.mutable_response_flags()->set_upstream_remote_reset(true);",
          "59:   }",
          "61:   if (stream_info.hasResponseFlag(StreamInfo::ResponseFlag::UpstreamConnectionFailure)) {",
          "62:     common_access_log.mutable_response_flags()->set_upstream_connection_failure(true);",
          "63:   }",
          "65:   if (stream_info.hasResponseFlag(StreamInfo::ResponseFlag::UpstreamConnectionTermination)) {",
          "66:     common_access_log.mutable_response_flags()->set_upstream_connection_termination(true);",
          "67:   }",
          "69:   if (stream_info.hasResponseFlag(StreamInfo::ResponseFlag::UpstreamOverflow)) {",
          "70:     common_access_log.mutable_response_flags()->set_upstream_overflow(true);",
          "71:   }",
          "73:   if (stream_info.hasResponseFlag(StreamInfo::ResponseFlag::NoRouteFound)) {",
          "74:     common_access_log.mutable_response_flags()->set_no_route_found(true);",
          "75:   }",
          "77:   if (stream_info.hasResponseFlag(StreamInfo::ResponseFlag::DelayInjected)) {",
          "78:     common_access_log.mutable_response_flags()->set_delay_injected(true);",
          "79:   }",
          "81:   if (stream_info.hasResponseFlag(StreamInfo::ResponseFlag::FaultInjected)) {",
          "82:     common_access_log.mutable_response_flags()->set_fault_injected(true);",
          "83:   }",
          "85:   if (stream_info.hasResponseFlag(StreamInfo::ResponseFlag::RateLimited)) {",
          "86:     common_access_log.mutable_response_flags()->set_rate_limited(true);",
          "87:   }",
          "89:   if (stream_info.hasResponseFlag(StreamInfo::ResponseFlag::UnauthorizedExternalService)) {",
          "90:     common_access_log.mutable_response_flags()->mutable_unauthorized_details()->set_reason(",
          "91:         envoy::data::accesslog::v2::ResponseFlags_Unauthorized_Reason::",
          "92:             ResponseFlags_Unauthorized_Reason_EXTERNAL_SERVICE);",
          "93:   }",
          "95:   if (stream_info.hasResponseFlag(StreamInfo::ResponseFlag::RateLimitServiceError)) {",
          "96:     common_access_log.mutable_response_flags()->set_rate_limit_service_error(true);",
          "97:   }",
          "99:   if (stream_info.hasResponseFlag(StreamInfo::ResponseFlag::DownstreamConnectionTermination)) {",
          "100:     common_access_log.mutable_response_flags()->set_downstream_connection_termination(true);",
          "101:   }",
          "103:   if (stream_info.hasResponseFlag(StreamInfo::ResponseFlag::UpstreamRetryLimitExceeded)) {",
          "104:     common_access_log.mutable_response_flags()->set_upstream_retry_limit_exceeded(true);",
          "105:   }",
          "107:   if (stream_info.hasResponseFlag(StreamInfo::ResponseFlag::StreamIdleTimeout)) {",
          "108:     common_access_log.mutable_response_flags()->set_stream_idle_timeout(true);",
          "109:   }",
          "111:   if (stream_info.hasResponseFlag(StreamInfo::ResponseFlag::InvalidEnvoyRequestHeaders)) {",
          "112:     common_access_log.mutable_response_flags()->set_invalid_envoy_request_headers(true);",
          "113:   }",
          "114: }",
          "116: void Utility::extractCommonAccessLogProperties(",
          "117:     envoy::data::accesslog::v2::AccessLogCommon& common_access_log,",
          "118:     const StreamInfo::StreamInfo& stream_info) {",
          "119:   if (stream_info.downstreamRemoteAddress() != nullptr) {",
          "120:     Network::Utility::addressToProtobufAddress(",
          "123:   }",
          "124:   if (stream_info.downstreamLocalAddress() != nullptr) {",
          "125:     Network::Utility::addressToProtobufAddress(",
          "128:   }",
          "129:   if (stream_info.downstreamSslConnection() != nullptr) {",
          "130:     auto* tls_properties = common_access_log.mutable_tls_properties();",
          "131:     const auto* downstream_ssl_connection = stream_info.downstreamSslConnection();",
          "133:     tls_properties->set_tls_sni_hostname(stream_info.requestedServerName());",
          "135:     auto* local_properties = tls_properties->mutable_local_certificate_properties();",
          "136:     for (const auto& uri_san : downstream_ssl_connection->uriSanLocalCertificate()) {",
          "137:       auto* local_san = local_properties->add_subject_alt_name();",
          "138:       local_san->set_uri(uri_san);",
          "139:     }",
          "140:     local_properties->set_subject(downstream_ssl_connection->subjectLocalCertificate());",
          "142:     auto* peer_properties = tls_properties->mutable_peer_certificate_properties();",
          "143:     for (const auto& uri_san : downstream_ssl_connection->uriSanPeerCertificate()) {",
          "144:       auto* peer_san = peer_properties->add_subject_alt_name();",
          "145:       peer_san->set_uri(uri_san);",
          "146:     }",
          "148:     peer_properties->set_subject(downstream_ssl_connection->subjectPeerCertificate());",
          "149:     tls_properties->set_tls_session_id(downstream_ssl_connection->sessionId());",
          "150:     tls_properties->set_tls_version(",
          "151:         tlsVersionStringToEnum(downstream_ssl_connection->tlsVersion()));",
          "153:     auto* local_tls_cipher_suite = tls_properties->mutable_tls_cipher_suite();",
          "154:     local_tls_cipher_suite->set_value(downstream_ssl_connection->ciphersuiteId());",
          "155:   }",
          "156:   common_access_log.mutable_start_time()->MergeFrom(",
          "157:       Protobuf::util::TimeUtil::NanosecondsToTimestamp(",
          "158:           std::chrono::duration_cast<std::chrono::nanoseconds>(",
          "159:               stream_info.startTime().time_since_epoch())",
          "160:               .count()));",
          "162:   absl::optional<std::chrono::nanoseconds> dur = stream_info.lastDownstreamRxByteReceived();",
          "163:   if (dur) {",
          "164:     common_access_log.mutable_time_to_last_rx_byte()->MergeFrom(",
          "165:         Protobuf::util::TimeUtil::NanosecondsToDuration(dur.value().count()));",
          "166:   }",
          "168:   dur = stream_info.firstUpstreamTxByteSent();",
          "169:   if (dur) {",
          "170:     common_access_log.mutable_time_to_first_upstream_tx_byte()->MergeFrom(",
          "171:         Protobuf::util::TimeUtil::NanosecondsToDuration(dur.value().count()));",
          "172:   }",
          "174:   dur = stream_info.lastUpstreamTxByteSent();",
          "175:   if (dur) {",
          "176:     common_access_log.mutable_time_to_last_upstream_tx_byte()->MergeFrom(",
          "177:         Protobuf::util::TimeUtil::NanosecondsToDuration(dur.value().count()));",
          "178:   }",
          "180:   dur = stream_info.firstUpstreamRxByteReceived();",
          "181:   if (dur) {",
          "182:     common_access_log.mutable_time_to_first_upstream_rx_byte()->MergeFrom(",
          "183:         Protobuf::util::TimeUtil::NanosecondsToDuration(dur.value().count()));",
          "184:   }",
          "186:   dur = stream_info.lastUpstreamRxByteReceived();",
          "187:   if (dur) {",
          "188:     common_access_log.mutable_time_to_last_upstream_rx_byte()->MergeFrom(",
          "189:         Protobuf::util::TimeUtil::NanosecondsToDuration(dur.value().count()));",
          "190:   }",
          "192:   dur = stream_info.firstDownstreamTxByteSent();",
          "193:   if (dur) {",
          "194:     common_access_log.mutable_time_to_first_downstream_tx_byte()->MergeFrom(",
          "195:         Protobuf::util::TimeUtil::NanosecondsToDuration(dur.value().count()));",
          "196:   }",
          "198:   dur = stream_info.lastDownstreamTxByteSent();",
          "199:   if (dur) {",
          "200:     common_access_log.mutable_time_to_last_downstream_tx_byte()->MergeFrom(",
          "201:         Protobuf::util::TimeUtil::NanosecondsToDuration(dur.value().count()));",
          "202:   }",
          "204:   if (stream_info.upstreamHost() != nullptr) {",
          "205:     Network::Utility::addressToProtobufAddress(",
          "208:     common_access_log.set_upstream_cluster(stream_info.upstreamHost()->cluster().name());",
          "209:   }",
          "211:   if (!stream_info.getRouteName().empty()) {",
          "212:     common_access_log.set_route_name(stream_info.getRouteName());",
          "213:   }",
          "215:   if (stream_info.upstreamLocalAddress() != nullptr) {",
          "216:     Network::Utility::addressToProtobufAddress(*stream_info.upstreamLocalAddress(),",
          "218:   }",
          "219:   responseFlagsToAccessLogResponseFlags(common_access_log, stream_info);",
          "220:   if (!stream_info.upstreamTransportFailureReason().empty()) {",
          "221:     common_access_log.set_upstream_transport_failure_reason(",
          "222:         stream_info.upstreamTransportFailureReason());",
          "223:   }",
          "224:   if (stream_info.dynamicMetadata().filter_metadata_size() > 0) {",
          "225:     common_access_log.mutable_metadata()->MergeFrom(stream_info.dynamicMetadata());",
          "226:   }",
          "227: }",
          "229: } // namespace GrpcCommon",
          "230: } // namespace AccessLoggers",
          "231: } // namespace Extensions",
          "232: } // namespace Envoy",
          "",
          "---------------"
        ],
        "source/extensions/access_loggers/grpc/grpc_access_log_utils.h||source/extensions/access_loggers/grpc/grpc_access_log_utils.h": [
          "File: source/extensions/access_loggers/grpc/grpc_access_log_utils.h -> source/extensions/access_loggers/grpc/grpc_access_log_utils.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #pragma once",
          "3: #include \"envoy/data/accesslog/v2/accesslog.pb.h\"",
          "4: #include \"envoy/stream_info/stream_info.h\"",
          "6: namespace Envoy {",
          "7: namespace Extensions {",
          "8: namespace AccessLoggers {",
          "9: namespace GrpcCommon {",
          "11: class Utility {",
          "12: public:",
          "13:   static void",
          "14:   extractCommonAccessLogProperties(envoy::data::accesslog::v2::AccessLogCommon& common_access_log,",
          "15:                                    const StreamInfo::StreamInfo& stream_info);",
          "17:   static void responseFlagsToAccessLogResponseFlags(",
          "18:       envoy::data::accesslog::v2::AccessLogCommon& common_access_log,",
          "19:       const StreamInfo::StreamInfo& stream_info);",
          "20: };",
          "22: } // namespace GrpcCommon",
          "23: } // namespace AccessLoggers",
          "24: } // namespace Extensions",
          "25: } // namespace Envoy",
          "",
          "---------------"
        ],
        "source/extensions/access_loggers/http_grpc/config.cc||source/extensions/access_loggers/grpc/http_config.cc": [
          "File: source/extensions/access_loggers/http_grpc/config.cc -> source/extensions/access_loggers/grpc/http_config.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: #include \"envoy/config/accesslog/v2/als.pb.validate.h\"",
          "4: #include \"envoy/config/filter/accesslog/v2/accesslog.pb.validate.h\"",
          "",
          "[Removed Lines]",
          "1: #include \"extensions/access_loggers/http_grpc/config.h\"",
          "",
          "[Added Lines]",
          "1: #include \"extensions/access_loggers/grpc/http_config.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "10: #include \"common/grpc/async_client_impl.h\"",
          "11: #include \"common/protobuf/protobuf.h\"",
          "15: #include \"extensions/access_loggers/well_known_names.h\"",
          "17: namespace Envoy {",
          "",
          "[Removed Lines]",
          "13: #include \"extensions/access_loggers/http_grpc/grpc_access_log_impl.h\"",
          "14: #include \"extensions/access_loggers/http_grpc/grpc_access_log_proto_descriptors.h\"",
          "",
          "[Added Lines]",
          "13: #include \"extensions/access_loggers/grpc/grpc_access_log_proto_descriptors.h\"",
          "14: #include \"extensions/access_loggers/grpc/http_grpc_access_log_impl.h\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "31:   const auto& proto_config = MessageUtil::downcastAndValidate<",
          "32:       const envoy::config::accesslog::v2::HttpGrpcAccessLogConfig&>(config);",
          "35:           SINGLETON_MANAGER_REGISTERED_NAME(grpc_access_logger_cache), [&context] {",
          "37:                 context.clusterManager().grpcAsyncClientManager(), context.scope(),",
          "38:                 context.threadLocal(), context.localInfo());",
          "39:           });",
          "",
          "[Removed Lines]",
          "33:   std::shared_ptr<GrpcAccessLoggerCache> grpc_access_logger_cache =",
          "34:       context.singletonManager().getTyped<GrpcAccessLoggerCache>(",
          "36:             return std::make_shared<GrpcAccessLoggerCacheImpl>(",
          "",
          "[Added Lines]",
          "33:   std::shared_ptr<GrpcCommon::GrpcAccessLoggerCache> grpc_access_logger_cache =",
          "34:       context.singletonManager().getTyped<GrpcCommon::GrpcAccessLoggerCache>(",
          "36:             return std::make_shared<GrpcCommon::GrpcAccessLoggerCacheImpl>(",
          "",
          "---------------"
        ],
        "source/extensions/access_loggers/http_grpc/config.h||source/extensions/access_loggers/grpc/http_config.h": [
          "File: source/extensions/access_loggers/http_grpc/config.h -> source/extensions/access_loggers/grpc/http_config.h"
        ],
        "source/extensions/access_loggers/grpc/http_grpc_access_log_impl.cc||source/extensions/access_loggers/grpc/http_grpc_access_log_impl.cc": [
          "File: source/extensions/access_loggers/grpc/http_grpc_access_log_impl.cc -> source/extensions/access_loggers/grpc/http_grpc_access_log_impl.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #include \"extensions/access_loggers/grpc/http_grpc_access_log_impl.h\"",
          "3: #include \"common/common/assert.h\"",
          "4: #include \"common/network/utility.h\"",
          "5: #include \"common/stream_info/utility.h\"",
          "7: #include \"extensions/access_loggers/grpc/grpc_access_log_utils.h\"",
          "9: namespace Envoy {",
          "10: namespace Extensions {",
          "11: namespace AccessLoggers {",
          "12: namespace HttpGrpc {",
          "14: HttpGrpcAccessLog::ThreadLocalLogger::ThreadLocalLogger(",
          "15:     GrpcCommon::GrpcAccessLoggerSharedPtr logger)",
          "16:     : logger_(std::move(logger)) {}",
          "18: HttpGrpcAccessLog::HttpGrpcAccessLog(AccessLog::FilterPtr&& filter,",
          "19:                                      envoy::config::accesslog::v2::HttpGrpcAccessLogConfig config,",
          "20:                                      ThreadLocal::SlotAllocator& tls,",
          "21:                                      GrpcCommon::GrpcAccessLoggerCacheSharedPtr access_logger_cache)",
          "22:     : Common::ImplBase(std::move(filter)), config_(std::move(config)),",
          "23:       tls_slot_(tls.allocateSlot()), access_logger_cache_(std::move(access_logger_cache)) {",
          "24:   for (const auto& header : config_.additional_request_headers_to_log()) {",
          "25:     request_headers_to_log_.emplace_back(header);",
          "26:   }",
          "28:   for (const auto& header : config_.additional_response_headers_to_log()) {",
          "29:     response_headers_to_log_.emplace_back(header);",
          "30:   }",
          "32:   for (const auto& header : config_.additional_response_trailers_to_log()) {",
          "33:     response_trailers_to_log_.emplace_back(header);",
          "34:   }",
          "36:   tls_slot_->set([this](Event::Dispatcher&) {",
          "37:     return std::make_shared<ThreadLocalLogger>(",
          "38:         access_logger_cache_->getOrCreateLogger(config_.common_config()));",
          "39:   });",
          "40: }",
          "42: void HttpGrpcAccessLog::emitLog(const Http::HeaderMap& request_headers,",
          "43:                                 const Http::HeaderMap& response_headers,",
          "44:                                 const Http::HeaderMap& response_trailers,",
          "45:                                 const StreamInfo::StreamInfo& stream_info) {",
          "48:   envoy::data::accesslog::v2::HTTPAccessLogEntry log_entry;",
          "49:   GrpcCommon::Utility::extractCommonAccessLogProperties(*log_entry.mutable_common_properties(),",
          "50:                                                         stream_info);",
          "52:   if (stream_info.protocol()) {",
          "53:     switch (stream_info.protocol().value()) {",
          "54:     case Http::Protocol::Http10:",
          "55:       log_entry.set_protocol_version(envoy::data::accesslog::v2::HTTPAccessLogEntry::HTTP10);",
          "56:       break;",
          "57:     case Http::Protocol::Http11:",
          "58:       log_entry.set_protocol_version(envoy::data::accesslog::v2::HTTPAccessLogEntry::HTTP11);",
          "59:       break;",
          "60:     case Http::Protocol::Http2:",
          "61:       log_entry.set_protocol_version(envoy::data::accesslog::v2::HTTPAccessLogEntry::HTTP2);",
          "62:       break;",
          "63:     }",
          "64:   }",
          "68:   auto* request_properties = log_entry.mutable_request();",
          "69:   if (request_headers.Scheme() != nullptr) {",
          "70:     request_properties->set_scheme(std::string(request_headers.Scheme()->value().getStringView()));",
          "71:   }",
          "72:   if (request_headers.Host() != nullptr) {",
          "73:     request_properties->set_authority(std::string(request_headers.Host()->value().getStringView()));",
          "74:   }",
          "75:   if (request_headers.Path() != nullptr) {",
          "76:     request_properties->set_path(std::string(request_headers.Path()->value().getStringView()));",
          "77:   }",
          "78:   if (request_headers.UserAgent() != nullptr) {",
          "79:     request_properties->set_user_agent(",
          "80:         std::string(request_headers.UserAgent()->value().getStringView()));",
          "81:   }",
          "82:   if (request_headers.Referer() != nullptr) {",
          "83:     request_properties->set_referer(",
          "84:         std::string(request_headers.Referer()->value().getStringView()));",
          "85:   }",
          "86:   if (request_headers.ForwardedFor() != nullptr) {",
          "87:     request_properties->set_forwarded_for(",
          "88:         std::string(request_headers.ForwardedFor()->value().getStringView()));",
          "89:   }",
          "90:   if (request_headers.RequestId() != nullptr) {",
          "91:     request_properties->set_request_id(",
          "92:         std::string(request_headers.RequestId()->value().getStringView()));",
          "93:   }",
          "94:   if (request_headers.EnvoyOriginalPath() != nullptr) {",
          "95:     request_properties->set_original_path(",
          "96:         std::string(request_headers.EnvoyOriginalPath()->value().getStringView()));",
          "97:   }",
          "98:   request_properties->set_request_headers_bytes(request_headers.byteSize());",
          "99:   request_properties->set_request_body_bytes(stream_info.bytesReceived());",
          "100:   if (request_headers.Method() != nullptr) {",
          "101:     envoy::api::v2::core::RequestMethod method =",
          "102:         envoy::api::v2::core::RequestMethod::METHOD_UNSPECIFIED;",
          "103:     envoy::api::v2::core::RequestMethod_Parse(",
          "104:         std::string(request_headers.Method()->value().getStringView()), &method);",
          "105:     request_properties->set_request_method(method);",
          "106:   }",
          "107:   if (!request_headers_to_log_.empty()) {",
          "108:     auto* logged_headers = request_properties->mutable_request_headers();",
          "110:     for (const auto& header : request_headers_to_log_) {",
          "111:       const Http::HeaderEntry* entry = request_headers.get(header);",
          "112:       if (entry != nullptr) {",
          "113:         logged_headers->insert({header.get(), std::string(entry->value().getStringView())});",
          "114:       }",
          "115:     }",
          "116:   }",
          "119:   auto* response_properties = log_entry.mutable_response();",
          "120:   if (stream_info.responseCode()) {",
          "121:     response_properties->mutable_response_code()->set_value(stream_info.responseCode().value());",
          "122:   }",
          "123:   if (stream_info.responseCodeDetails()) {",
          "124:     response_properties->set_response_code_details(stream_info.responseCodeDetails().value());",
          "125:   }",
          "126:   response_properties->set_response_headers_bytes(response_headers.byteSize());",
          "127:   response_properties->set_response_body_bytes(stream_info.bytesSent());",
          "128:   if (!response_headers_to_log_.empty()) {",
          "129:     auto* logged_headers = response_properties->mutable_response_headers();",
          "131:     for (const auto& header : response_headers_to_log_) {",
          "132:       const Http::HeaderEntry* entry = response_headers.get(header);",
          "133:       if (entry != nullptr) {",
          "134:         logged_headers->insert({header.get(), std::string(entry->value().getStringView())});",
          "135:       }",
          "136:     }",
          "137:   }",
          "139:   if (!response_trailers_to_log_.empty()) {",
          "140:     auto* logged_headers = response_properties->mutable_response_trailers();",
          "142:     for (const auto& header : response_trailers_to_log_) {",
          "143:       const Http::HeaderEntry* entry = response_trailers.get(header);",
          "144:       if (entry != nullptr) {",
          "145:         logged_headers->insert({header.get(), std::string(entry->value().getStringView())});",
          "146:       }",
          "147:     }",
          "148:   }",
          "150:   tls_slot_->getTyped<ThreadLocalLogger>().logger_->log(std::move(log_entry));",
          "151: }",
          "153: } // namespace HttpGrpc",
          "154: } // namespace AccessLoggers",
          "155: } // namespace Extensions",
          "156: } // namespace Envoy",
          "",
          "---------------"
        ],
        "source/extensions/access_loggers/grpc/http_grpc_access_log_impl.h||source/extensions/access_loggers/grpc/http_grpc_access_log_impl.h": [
          "File: source/extensions/access_loggers/grpc/http_grpc_access_log_impl.h -> source/extensions/access_loggers/grpc/http_grpc_access_log_impl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #pragma once",
          "3: #include <unordered_map>",
          "4: #include <vector>",
          "6: #include \"envoy/config/accesslog/v2/als.pb.h\"",
          "7: #include \"envoy/config/filter/accesslog/v2/accesslog.pb.h\"",
          "8: #include \"envoy/grpc/async_client.h\"",
          "9: #include \"envoy/grpc/async_client_manager.h\"",
          "10: #include \"envoy/local_info/local_info.h\"",
          "11: #include \"envoy/service/accesslog/v2/als.pb.h\"",
          "12: #include \"envoy/singleton/instance.h\"",
          "13: #include \"envoy/thread_local/thread_local.h\"",
          "15: #include \"common/grpc/typed_async_client.h\"",
          "17: #include \"extensions/access_loggers/common/access_log_base.h\"",
          "18: #include \"extensions/access_loggers/grpc/grpc_access_log_impl.h\"",
          "20: namespace Envoy {",
          "21: namespace Extensions {",
          "22: namespace AccessLoggers {",
          "23: namespace HttpGrpc {",
          "30: class HttpGrpcAccessLog : public Common::ImplBase {",
          "31: public:",
          "32:   HttpGrpcAccessLog(AccessLog::FilterPtr&& filter,",
          "33:                     envoy::config::accesslog::v2::HttpGrpcAccessLogConfig config,",
          "34:                     ThreadLocal::SlotAllocator& tls,",
          "35:                     GrpcCommon::GrpcAccessLoggerCacheSharedPtr access_logger_cache);",
          "37: private:",
          "41:   struct ThreadLocalLogger : public ThreadLocal::ThreadLocalObject {",
          "42:     ThreadLocalLogger(GrpcCommon::GrpcAccessLoggerSharedPtr logger);",
          "44:     const GrpcCommon::GrpcAccessLoggerSharedPtr logger_;",
          "45:   };",
          "48:   void emitLog(const Http::HeaderMap& request_headers, const Http::HeaderMap& response_headers,",
          "49:                const Http::HeaderMap& response_trailers,",
          "50:                const StreamInfo::StreamInfo& stream_info) override;",
          "52:   const envoy::config::accesslog::v2::HttpGrpcAccessLogConfig config_;",
          "53:   const ThreadLocal::SlotPtr tls_slot_;",
          "54:   const GrpcCommon::GrpcAccessLoggerCacheSharedPtr access_logger_cache_;",
          "55:   std::vector<Http::LowerCaseString> request_headers_to_log_;",
          "56:   std::vector<Http::LowerCaseString> response_headers_to_log_;",
          "57:   std::vector<Http::LowerCaseString> response_trailers_to_log_;",
          "58: };",
          "60: } // namespace HttpGrpc",
          "61: } // namespace AccessLoggers",
          "62: } // namespace Extensions",
          "63: } // namespace Envoy",
          "",
          "---------------"
        ],
        "source/extensions/access_loggers/http_grpc/grpc_access_log_impl.cc||source/extensions/access_loggers/http_grpc/grpc_access_log_impl.cc": [
          "File: source/extensions/access_loggers/http_grpc/grpc_access_log_impl.cc -> source/extensions/access_loggers/http_grpc/grpc_access_log_impl.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "source/extensions/extensions_build_config.bzl||source/extensions/extensions_build_config.bzl": [
          "File: source/extensions/extensions_build_config.bzl -> source/extensions/extensions_build_config.bzl",
          "--- Hunk 1 ---",
          "[Context before]",
          "5:     #",
          "7:     \"envoy.access_loggers.file\":                        \"//source/extensions/access_loggers/file:config\",",
          "10:     #",
          "11:     # Clusters",
          "",
          "[Removed Lines]",
          "8:     \"envoy.access_loggers.http_grpc\":                   \"//source/extensions/access_loggers/http_grpc:config\",",
          "",
          "[Added Lines]",
          "8:     \"envoy.access_loggers.http_grpc\":                   \"//source/extensions/access_loggers/grpc:http_config\",",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "148:     #",
          "150:     \"envoy.access_loggers.file\":                        \"//source/extensions/access_loggers/file:config\",",
          "153:     #",
          "154:     # gRPC Credentials Plugins",
          "",
          "[Removed Lines]",
          "151:     #\"envoy.access_loggers.http_grpc\":                   \"//source/extensions/access_loggers/http_grpc:config\",",
          "",
          "[Added Lines]",
          "151:     #\"envoy.access_loggers.http_grpc\":                   \"//source/extensions/access_loggers/grpc:http_config\",",
          "",
          "---------------"
        ],
        "test/extensions/access_loggers/grpc/grpc_access_log_impl_test.cc||test/extensions/access_loggers/grpc/grpc_access_log_impl_test.cc": [
          "File: test/extensions/access_loggers/grpc/grpc_access_log_impl_test.cc -> test/extensions/access_loggers/grpc/grpc_access_log_impl_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #include <memory>",
          "3: #include \"common/buffer/zero_copy_input_stream_impl.h\"",
          "4: #include \"common/network/address_impl.h\"",
          "6: #include \"extensions/access_loggers/grpc/http_grpc_access_log_impl.h\"",
          "8: #include \"test/mocks/access_log/mocks.h\"",
          "9: #include \"test/mocks/grpc/mocks.h\"",
          "10: #include \"test/mocks/local_info/mocks.h\"",
          "11: #include \"test/mocks/ssl/mocks.h\"",
          "12: #include \"test/mocks/stream_info/mocks.h\"",
          "13: #include \"test/mocks/thread_local/mocks.h\"",
          "15: using testing::_;",
          "16: using testing::InSequence;",
          "17: using testing::Invoke;",
          "18: using testing::NiceMock;",
          "19: using testing::Return;",
          "21: namespace Envoy {",
          "22: namespace Extensions {",
          "23: namespace AccessLoggers {",
          "24: namespace GrpcCommon {",
          "25: namespace {",
          "27: constexpr std::chrono::milliseconds FlushInterval(10);",
          "29: class GrpcAccessLoggerImplTest : public testing::Test {",
          "30: public:",
          "31:   using MockAccessLogStream = Grpc::MockAsyncStream;",
          "32:   using AccessLogCallbacks =",
          "33:       Grpc::AsyncStreamCallbacks<envoy::service::accesslog::v2::StreamAccessLogsResponse>;",
          "35:   void initLogger(std::chrono::milliseconds buffer_flush_interval_msec, size_t buffer_size_bytes) {",
          "36:     timer_ = new Event::MockTimer(&dispatcher_);",
          "37:     EXPECT_CALL(*timer_, enableTimer(buffer_flush_interval_msec));",
          "38:     logger_ = std::make_unique<GrpcAccessLoggerImpl>(Grpc::RawAsyncClientPtr{async_client_},",
          "39:                                                      log_name_, buffer_flush_interval_msec,",
          "40:                                                      buffer_size_bytes, dispatcher_, local_info_);",
          "41:   }",
          "43:   void expectStreamStart(MockAccessLogStream& stream, AccessLogCallbacks** callbacks_to_set) {",
          "44:     EXPECT_CALL(*async_client_, startRaw(_, _, _))",
          "45:         .WillOnce(Invoke([&stream, callbacks_to_set](absl::string_view, absl::string_view,",
          "46:                                                      Grpc::RawAsyncStreamCallbacks& callbacks) {",
          "48:           return &stream;",
          "49:         }));",
          "50:   }",
          "52:   void expectStreamMessage(MockAccessLogStream& stream, const std::string& expected_message_yaml) {",
          "53:     envoy::service::accesslog::v2::StreamAccessLogsMessage expected_message;",
          "54:     TestUtility::loadFromYaml(expected_message_yaml, expected_message);",
          "55:     EXPECT_CALL(stream, sendMessageRaw_(_, false))",
          "56:         .WillOnce(Invoke([expected_message](Buffer::InstancePtr& request, bool) {",
          "57:           envoy::service::accesslog::v2::StreamAccessLogsMessage message;",
          "58:           Buffer::ZeroCopyInputStreamImpl request_stream(std::move(request));",
          "59:           EXPECT_TRUE(message.ParseFromZeroCopyStream(&request_stream));",
          "60:           EXPECT_EQ(message.DebugString(), expected_message.DebugString());",
          "61:         }));",
          "62:   }",
          "64:   std::string log_name_ = \"test_log_name\";",
          "65:   LocalInfo::MockLocalInfo local_info_;",
          "66:   Event::MockTimer* timer_ = nullptr;",
          "67:   Event::MockDispatcher dispatcher_;",
          "68:   Grpc::MockAsyncClient* async_client_{new Grpc::MockAsyncClient};",
          "69:   std::unique_ptr<GrpcAccessLoggerImpl> logger_;",
          "70: };",
          "73: TEST_F(GrpcAccessLoggerImplTest, BasicFlow) {",
          "74:   InSequence s;",
          "75:   initLogger(FlushInterval, 0);",
          "78:   MockAccessLogStream stream;",
          "79:   AccessLogCallbacks* callbacks;",
          "80:   expectStreamStart(stream, &callbacks);",
          "81:   EXPECT_CALL(local_info_, node());",
          "82:   expectStreamMessage(stream, R\"EOF(",
          "83: identifier:",
          "84:   node:",
          "85:     id: node_name",
          "86:     cluster: cluster_name",
          "87:     locality:",
          "88:       zone: zone_name",
          "89:   log_name: test_log_name",
          "90: http_logs:",
          "91:   log_entry:",
          "92:     request:",
          "93:       path: /test/path1",
          "94: )EOF\");",
          "95:   envoy::data::accesslog::v2::HTTPAccessLogEntry entry;",
          "96:   entry.mutable_request()->set_path(\"/test/path1\");",
          "97:   logger_->log(envoy::data::accesslog::v2::HTTPAccessLogEntry(entry));",
          "99:   expectStreamMessage(stream, R\"EOF(",
          "100: http_logs:",
          "101:   log_entry:",
          "102:     request:",
          "103:       path: /test/path2",
          "104: )EOF\");",
          "105:   entry.mutable_request()->set_path(\"/test/path2\");",
          "106:   logger_->log(envoy::data::accesslog::v2::HTTPAccessLogEntry(entry));",
          "109:   callbacks->onReceiveMessage(",
          "110:       std::make_unique<envoy::service::accesslog::v2::StreamAccessLogsResponse>());",
          "113:   callbacks->onRemoteClose(Grpc::Status::Internal, \"bad\");",
          "114:   expectStreamStart(stream, &callbacks);",
          "115:   EXPECT_CALL(local_info_, node());",
          "116:   expectStreamMessage(stream, R\"EOF(",
          "117: identifier:",
          "118:   node:",
          "119:     id: node_name",
          "120:     cluster: cluster_name",
          "121:     locality:",
          "122:       zone: zone_name",
          "123:   log_name: test_log_name",
          "124: http_logs:",
          "125:   log_entry:",
          "126:     request:",
          "127:       path: /test/path3",
          "128: )EOF\");",
          "129:   entry.mutable_request()->set_path(\"/test/path3\");",
          "130:   logger_->log(envoy::data::accesslog::v2::HTTPAccessLogEntry(entry));",
          "131: }",
          "134: TEST_F(GrpcAccessLoggerImplTest, StreamFailure) {",
          "135:   InSequence s;",
          "136:   initLogger(FlushInterval, 0);",
          "138:   EXPECT_CALL(*async_client_, startRaw(_, _, _))",
          "139:       .WillOnce(Invoke(",
          "140:           [](absl::string_view, absl::string_view, Grpc::RawAsyncStreamCallbacks& callbacks) {",
          "141:             callbacks.onRemoteClose(Grpc::Status::Internal, \"bad\");",
          "142:             return nullptr;",
          "143:           }));",
          "144:   EXPECT_CALL(local_info_, node());",
          "145:   envoy::data::accesslog::v2::HTTPAccessLogEntry entry;",
          "146:   logger_->log(envoy::data::accesslog::v2::HTTPAccessLogEntry(entry));",
          "147: }",
          "150: TEST_F(GrpcAccessLoggerImplTest, Batching) {",
          "151:   InSequence s;",
          "152:   initLogger(FlushInterval, 100);",
          "154:   MockAccessLogStream stream;",
          "155:   AccessLogCallbacks* callbacks;",
          "156:   expectStreamStart(stream, &callbacks);",
          "157:   EXPECT_CALL(local_info_, node());",
          "158:   const std::string path1(30, '1');",
          "159:   const std::string path2(30, '2');",
          "160:   const std::string path3(80, '3');",
          "161:   expectStreamMessage(stream, fmt::format(R\"EOF(",
          "162: identifier:",
          "163:   node:",
          "164:     id: node_name",
          "165:     cluster: cluster_name",
          "166:     locality:",
          "167:       zone: zone_name",
          "168:   log_name: test_log_name",
          "169: http_logs:",
          "170:   log_entry:",
          "171:   - request:",
          "172:       path: \"{}\"",
          "173:   - request:",
          "174:       path: \"{}\"",
          "175:   - request:",
          "176:       path: \"{}\"",
          "177: )EOF\",",
          "178:                                           path1, path2, path3));",
          "179:   envoy::data::accesslog::v2::HTTPAccessLogEntry entry;",
          "180:   entry.mutable_request()->set_path(path1);",
          "181:   logger_->log(envoy::data::accesslog::v2::HTTPAccessLogEntry(entry));",
          "182:   entry.mutable_request()->set_path(path2);",
          "183:   logger_->log(envoy::data::accesslog::v2::HTTPAccessLogEntry(entry));",
          "184:   entry.mutable_request()->set_path(path3);",
          "185:   logger_->log(envoy::data::accesslog::v2::HTTPAccessLogEntry(entry));",
          "187:   const std::string path4(120, '4');",
          "188:   expectStreamMessage(stream, fmt::format(R\"EOF(",
          "189: http_logs:",
          "190:   log_entry:",
          "191:     request:",
          "192:       path: \"{}\"",
          "193: )EOF\",",
          "194:                                           path4));",
          "195:   entry.mutable_request()->set_path(path4);",
          "196:   logger_->log(envoy::data::accesslog::v2::HTTPAccessLogEntry(entry));",
          "197: }",
          "200: TEST_F(GrpcAccessLoggerImplTest, Flushing) {",
          "201:   InSequence s;",
          "202:   initLogger(FlushInterval, 100);",
          "205:   EXPECT_CALL(*timer_, enableTimer(FlushInterval));",
          "206:   timer_->invokeCallback();",
          "208:   envoy::data::accesslog::v2::HTTPAccessLogEntry entry;",
          "210:   entry.mutable_request()->set_path(\"/test/path1\");",
          "211:   logger_->log(envoy::data::accesslog::v2::HTTPAccessLogEntry(entry));",
          "213:   MockAccessLogStream stream;",
          "214:   AccessLogCallbacks* callbacks;",
          "215:   expectStreamStart(stream, &callbacks);",
          "216:   EXPECT_CALL(local_info_, node());",
          "217:   expectStreamMessage(stream, fmt::format(R\"EOF(",
          "218:   identifier:",
          "219:     node:",
          "220:       id: node_name",
          "221:       cluster: cluster_name",
          "222:       locality:",
          "223:         zone: zone_name",
          "224:     log_name: test_log_name",
          "225:   http_logs:",
          "226:     log_entry:",
          "227:     - request:",
          "228:         path: /test/path1",
          "229:   )EOF\"));",
          "230:   EXPECT_CALL(*timer_, enableTimer(FlushInterval));",
          "231:   timer_->invokeCallback();",
          "234:   EXPECT_CALL(*timer_, enableTimer(FlushInterval));",
          "235:   timer_->invokeCallback();",
          "236: }",
          "238: class GrpcAccessLoggerCacheImplTest : public testing::Test {",
          "239: public:",
          "240:   GrpcAccessLoggerCacheImplTest() {",
          "241:     logger_cache_ = std::make_unique<GrpcAccessLoggerCacheImpl>(async_client_manager_, scope_, tls_,",
          "242:                                                                 local_info_);",
          "243:   }",
          "245:   void expectClientCreation() {",
          "246:     factory_ = new Grpc::MockAsyncClientFactory;",
          "247:     async_client_ = new Grpc::MockAsyncClient;",
          "248:     EXPECT_CALL(async_client_manager_, factoryForGrpcService(_, _, false))",
          "249:         .WillOnce(Invoke([this](const envoy::api::v2::core::GrpcService&, Stats::Scope&, bool) {",
          "250:           EXPECT_CALL(*factory_, create()).WillOnce(Invoke([this] {",
          "251:             return Grpc::RawAsyncClientPtr{async_client_};",
          "252:           }));",
          "253:           return Grpc::AsyncClientFactoryPtr{factory_};",
          "254:         }));",
          "255:   }",
          "257:   LocalInfo::MockLocalInfo local_info_;",
          "258:   NiceMock<ThreadLocal::MockInstance> tls_;",
          "259:   Grpc::MockAsyncClientManager async_client_manager_;",
          "260:   Grpc::MockAsyncClient* async_client_ = nullptr;",
          "261:   Grpc::MockAsyncClientFactory* factory_ = nullptr;",
          "262:   std::unique_ptr<GrpcAccessLoggerCacheImpl> logger_cache_;",
          "263:   NiceMock<Stats::MockIsolatedStatsStore> scope_;",
          "264: };",
          "266: TEST_F(GrpcAccessLoggerCacheImplTest, Deduplication) {",
          "267:   InSequence s;",
          "269:   ::envoy::config::accesslog::v2::CommonGrpcAccessLogConfig config;",
          "270:   config.set_log_name(\"log-1\");",
          "271:   config.mutable_grpc_service()->mutable_envoy_grpc()->set_cluster_name(\"cluster-1\");",
          "273:   expectClientCreation();",
          "274:   GrpcAccessLoggerSharedPtr logger1 = logger_cache_->getOrCreateLogger(config);",
          "275:   EXPECT_EQ(logger1, logger_cache_->getOrCreateLogger(config));",
          "278:   config.set_log_name(\"log-2\");",
          "279:   expectClientCreation();",
          "280:   EXPECT_NE(logger1, logger_cache_->getOrCreateLogger(config));",
          "282:   config.set_log_name(\"log-1\");",
          "283:   EXPECT_EQ(logger1, logger_cache_->getOrCreateLogger(config));",
          "286:   config.mutable_grpc_service()->mutable_envoy_grpc()->set_cluster_name(\"cluster-2\");",
          "287:   expectClientCreation();",
          "288:   EXPECT_NE(logger1, logger_cache_->getOrCreateLogger(config));",
          "289: }",
          "291: } // namespace",
          "292: } // namespace GrpcCommon",
          "293: } // namespace AccessLoggers",
          "294: } // namespace Extensions",
          "295: } // namespace Envoy",
          "",
          "---------------"
        ],
        "test/extensions/access_loggers/grpc/grpc_access_log_utils_test.cc||test/extensions/access_loggers/grpc/grpc_access_log_utils_test.cc": [
          "File: test/extensions/access_loggers/grpc/grpc_access_log_utils_test.cc -> test/extensions/access_loggers/grpc/grpc_access_log_utils_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #include \"envoy/data/accesslog/v2/accesslog.pb.h\"",
          "3: #include \"extensions/access_loggers/grpc/grpc_access_log_utils.h\"",
          "5: #include \"test/mocks/stream_info/mocks.h\"",
          "7: namespace Envoy {",
          "8: namespace Extensions {",
          "9: namespace AccessLoggers {",
          "10: namespace GrpcCommon {",
          "11: namespace {",
          "13: using testing::_;",
          "14: using testing::Return;",
          "16: TEST(UtilityResponseFlagsToAccessLogResponseFlagsTest, All) {",
          "17:   NiceMock<StreamInfo::MockStreamInfo> stream_info;",
          "18:   ON_CALL(stream_info, hasResponseFlag(_)).WillByDefault(Return(true));",
          "19:   envoy::data::accesslog::v2::AccessLogCommon common_access_log;",
          "20:   Utility::responseFlagsToAccessLogResponseFlags(common_access_log, stream_info);",
          "22:   envoy::data::accesslog::v2::AccessLogCommon common_access_log_expected;",
          "23:   common_access_log_expected.mutable_response_flags()->set_failed_local_healthcheck(true);",
          "24:   common_access_log_expected.mutable_response_flags()->set_no_healthy_upstream(true);",
          "25:   common_access_log_expected.mutable_response_flags()->set_upstream_request_timeout(true);",
          "26:   common_access_log_expected.mutable_response_flags()->set_local_reset(true);",
          "27:   common_access_log_expected.mutable_response_flags()->set_upstream_remote_reset(true);",
          "28:   common_access_log_expected.mutable_response_flags()->set_upstream_connection_failure(true);",
          "29:   common_access_log_expected.mutable_response_flags()->set_upstream_connection_termination(true);",
          "30:   common_access_log_expected.mutable_response_flags()->set_upstream_overflow(true);",
          "31:   common_access_log_expected.mutable_response_flags()->set_no_route_found(true);",
          "32:   common_access_log_expected.mutable_response_flags()->set_delay_injected(true);",
          "33:   common_access_log_expected.mutable_response_flags()->set_fault_injected(true);",
          "34:   common_access_log_expected.mutable_response_flags()->set_rate_limited(true);",
          "35:   common_access_log_expected.mutable_response_flags()->mutable_unauthorized_details()->set_reason(",
          "36:       envoy::data::accesslog::v2::ResponseFlags_Unauthorized_Reason::",
          "37:           ResponseFlags_Unauthorized_Reason_EXTERNAL_SERVICE);",
          "38:   common_access_log_expected.mutable_response_flags()->set_rate_limit_service_error(true);",
          "39:   common_access_log_expected.mutable_response_flags()->set_downstream_connection_termination(true);",
          "40:   common_access_log_expected.mutable_response_flags()->set_upstream_retry_limit_exceeded(true);",
          "41:   common_access_log_expected.mutable_response_flags()->set_stream_idle_timeout(true);",
          "42:   common_access_log_expected.mutable_response_flags()->set_invalid_envoy_request_headers(true);",
          "44:   EXPECT_EQ(common_access_log_expected.DebugString(), common_access_log.DebugString());",
          "45: }",
          "47: } // namespace",
          "48: } // namespace GrpcCommon",
          "49: } // namespace AccessLoggers",
          "50: } // namespace Extensions",
          "51: } // namespace Envoy",
          "",
          "---------------"
        ],
        "test/extensions/access_loggers/http_grpc/config_test.cc||test/extensions/access_loggers/grpc/http_config_test.cc": [
          "File: test/extensions/access_loggers/http_grpc/config_test.cc -> test/extensions/access_loggers/grpc/http_config_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: #include \"envoy/server/access_log_config.h\"",
          "3: #include \"envoy/stats/scope.h\"",
          "6: #include \"extensions/access_loggers/well_known_names.h\"",
          "8: #include \"test/mocks/server/mocks.h\"",
          "",
          "[Removed Lines]",
          "5: #include \"extensions/access_loggers/http_grpc/grpc_access_log_impl.h\"",
          "",
          "[Added Lines]",
          "5: #include \"extensions/access_loggers/grpc/http_grpc_access_log_impl.h\"",
          "",
          "---------------"
        ],
        "test/extensions/access_loggers/http_grpc/grpc_access_log_impl_test.cc||test/extensions/access_loggers/grpc/http_grpc_access_log_impl_test.cc": [
          "File: test/extensions/access_loggers/http_grpc/grpc_access_log_impl_test.cc -> test/extensions/access_loggers/grpc/http_grpc_access_log_impl_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: #include \"common/buffer/zero_copy_input_stream_impl.h\"",
          "4: #include \"common/network/address_impl.h\"",
          "8: #include \"test/mocks/access_log/mocks.h\"",
          "9: #include \"test/mocks/grpc/mocks.h\"",
          "",
          "[Removed Lines]",
          "6: #include \"extensions/access_loggers/http_grpc/grpc_access_log_impl.h\"",
          "",
          "[Added Lines]",
          "6: #include \"extensions/access_loggers/grpc/http_grpc_access_log_impl.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "25: namespace HttpGrpc {",
          "26: namespace {",
          "293: public:",
          "295:   MOCK_METHOD1(log, void(envoy::data::accesslog::v2::HTTPAccessLogEntry&& entry));",
          "296: };",
          "299: public:",
          "301:   MOCK_METHOD1(getOrCreateLogger,",
          "303:                    const ::envoy::config::accesslog::v2::CommonGrpcAccessLogConfig& config));",
          "304: };",
          "",
          "[Removed Lines]",
          "28: constexpr std::chrono::milliseconds FlushInterval(10);",
          "30: class GrpcAccessLoggerImplTest : public testing::Test {",
          "31: public:",
          "32:   using MockAccessLogStream = Grpc::MockAsyncStream;",
          "33:   using AccessLogCallbacks =",
          "34:       Grpc::AsyncStreamCallbacks<envoy::service::accesslog::v2::StreamAccessLogsResponse>;",
          "36:   void initLogger(std::chrono::milliseconds buffer_flush_interval_msec, size_t buffer_size_bytes) {",
          "37:     timer_ = new Event::MockTimer(&dispatcher_);",
          "38:     EXPECT_CALL(*timer_, enableTimer(buffer_flush_interval_msec));",
          "39:     logger_ = std::make_unique<GrpcAccessLoggerImpl>(Grpc::RawAsyncClientPtr{async_client_},",
          "40:                                                      log_name_, buffer_flush_interval_msec,",
          "41:                                                      buffer_size_bytes, dispatcher_, local_info_);",
          "42:   }",
          "44:   void expectStreamStart(MockAccessLogStream& stream, AccessLogCallbacks** callbacks_to_set) {",
          "45:     EXPECT_CALL(*async_client_, startRaw(_, _, _))",
          "46:         .WillOnce(Invoke([&stream, callbacks_to_set](absl::string_view, absl::string_view,",
          "47:                                                      Grpc::RawAsyncStreamCallbacks& callbacks) {",
          "49:           return &stream;",
          "50:         }));",
          "51:   }",
          "53:   void expectStreamMessage(MockAccessLogStream& stream, const std::string& expected_message_yaml) {",
          "54:     envoy::service::accesslog::v2::StreamAccessLogsMessage expected_message;",
          "55:     TestUtility::loadFromYaml(expected_message_yaml, expected_message);",
          "56:     EXPECT_CALL(stream, sendMessageRaw_(_, false))",
          "57:         .WillOnce(Invoke([expected_message](Buffer::InstancePtr& request, bool) {",
          "58:           envoy::service::accesslog::v2::StreamAccessLogsMessage message;",
          "59:           Buffer::ZeroCopyInputStreamImpl request_stream(std::move(request));",
          "60:           EXPECT_TRUE(message.ParseFromZeroCopyStream(&request_stream));",
          "61:           EXPECT_EQ(message.DebugString(), expected_message.DebugString());",
          "62:         }));",
          "63:   }",
          "65:   std::string log_name_ = \"test_log_name\";",
          "66:   LocalInfo::MockLocalInfo local_info_;",
          "67:   Event::MockTimer* timer_ = nullptr;",
          "68:   Event::MockDispatcher dispatcher_;",
          "69:   Grpc::MockAsyncClient* async_client_{new Grpc::MockAsyncClient};",
          "70:   std::unique_ptr<GrpcAccessLoggerImpl> logger_;",
          "71: };",
          "74: TEST_F(GrpcAccessLoggerImplTest, BasicFlow) {",
          "75:   InSequence s;",
          "76:   initLogger(FlushInterval, 0);",
          "79:   MockAccessLogStream stream;",
          "80:   AccessLogCallbacks* callbacks;",
          "81:   expectStreamStart(stream, &callbacks);",
          "82:   EXPECT_CALL(local_info_, node());",
          "83:   expectStreamMessage(stream, R\"EOF(",
          "84: identifier:",
          "85:   node:",
          "86:     id: node_name",
          "87:     cluster: cluster_name",
          "88:     locality:",
          "89:       zone: zone_name",
          "90:   log_name: test_log_name",
          "91: http_logs:",
          "92:   log_entry:",
          "93:     request:",
          "94:       path: /test/path1",
          "95: )EOF\");",
          "96:   envoy::data::accesslog::v2::HTTPAccessLogEntry entry;",
          "97:   entry.mutable_request()->set_path(\"/test/path1\");",
          "98:   logger_->log(envoy::data::accesslog::v2::HTTPAccessLogEntry(entry));",
          "100:   expectStreamMessage(stream, R\"EOF(",
          "101: http_logs:",
          "102:   log_entry:",
          "103:     request:",
          "104:       path: /test/path2",
          "105: )EOF\");",
          "106:   entry.mutable_request()->set_path(\"/test/path2\");",
          "107:   logger_->log(envoy::data::accesslog::v2::HTTPAccessLogEntry(entry));",
          "110:   callbacks->onReceiveMessage(",
          "111:       std::make_unique<envoy::service::accesslog::v2::StreamAccessLogsResponse>());",
          "114:   callbacks->onRemoteClose(Grpc::Status::Internal, \"bad\");",
          "115:   expectStreamStart(stream, &callbacks);",
          "116:   EXPECT_CALL(local_info_, node());",
          "117:   expectStreamMessage(stream, R\"EOF(",
          "118: identifier:",
          "119:   node:",
          "120:     id: node_name",
          "121:     cluster: cluster_name",
          "122:     locality:",
          "123:       zone: zone_name",
          "124:   log_name: test_log_name",
          "125: http_logs:",
          "126:   log_entry:",
          "127:     request:",
          "128:       path: /test/path3",
          "129: )EOF\");",
          "130:   entry.mutable_request()->set_path(\"/test/path3\");",
          "131:   logger_->log(envoy::data::accesslog::v2::HTTPAccessLogEntry(entry));",
          "132: }",
          "135: TEST_F(GrpcAccessLoggerImplTest, StreamFailure) {",
          "136:   InSequence s;",
          "137:   initLogger(FlushInterval, 0);",
          "139:   EXPECT_CALL(*async_client_, startRaw(_, _, _))",
          "140:       .WillOnce(Invoke(",
          "141:           [](absl::string_view, absl::string_view, Grpc::RawAsyncStreamCallbacks& callbacks) {",
          "142:             callbacks.onRemoteClose(Grpc::Status::Internal, \"bad\");",
          "143:             return nullptr;",
          "144:           }));",
          "145:   EXPECT_CALL(local_info_, node());",
          "146:   envoy::data::accesslog::v2::HTTPAccessLogEntry entry;",
          "147:   logger_->log(envoy::data::accesslog::v2::HTTPAccessLogEntry(entry));",
          "148: }",
          "151: TEST_F(GrpcAccessLoggerImplTest, Batching) {",
          "152:   InSequence s;",
          "153:   initLogger(FlushInterval, 100);",
          "155:   MockAccessLogStream stream;",
          "156:   AccessLogCallbacks* callbacks;",
          "157:   expectStreamStart(stream, &callbacks);",
          "158:   EXPECT_CALL(local_info_, node());",
          "159:   const std::string path1(30, '1');",
          "160:   const std::string path2(30, '2');",
          "161:   const std::string path3(80, '3');",
          "162:   expectStreamMessage(stream, fmt::format(R\"EOF(",
          "163: identifier:",
          "164:   node:",
          "165:     id: node_name",
          "166:     cluster: cluster_name",
          "167:     locality:",
          "168:       zone: zone_name",
          "169:   log_name: test_log_name",
          "170: http_logs:",
          "171:   log_entry:",
          "172:   - request:",
          "173:       path: \"{}\"",
          "174:   - request:",
          "175:       path: \"{}\"",
          "176:   - request:",
          "177:       path: \"{}\"",
          "178: )EOF\",",
          "179:                                           path1, path2, path3));",
          "180:   envoy::data::accesslog::v2::HTTPAccessLogEntry entry;",
          "181:   entry.mutable_request()->set_path(path1);",
          "182:   logger_->log(envoy::data::accesslog::v2::HTTPAccessLogEntry(entry));",
          "183:   entry.mutable_request()->set_path(path2);",
          "184:   logger_->log(envoy::data::accesslog::v2::HTTPAccessLogEntry(entry));",
          "185:   entry.mutable_request()->set_path(path3);",
          "186:   logger_->log(envoy::data::accesslog::v2::HTTPAccessLogEntry(entry));",
          "188:   const std::string path4(120, '4');",
          "189:   expectStreamMessage(stream, fmt::format(R\"EOF(",
          "190: http_logs:",
          "191:   log_entry:",
          "192:     request:",
          "193:       path: \"{}\"",
          "194: )EOF\",",
          "195:                                           path4));",
          "196:   entry.mutable_request()->set_path(path4);",
          "197:   logger_->log(envoy::data::accesslog::v2::HTTPAccessLogEntry(entry));",
          "198: }",
          "201: TEST_F(GrpcAccessLoggerImplTest, Flushing) {",
          "202:   InSequence s;",
          "203:   initLogger(FlushInterval, 100);",
          "206:   EXPECT_CALL(*timer_, enableTimer(FlushInterval));",
          "207:   timer_->invokeCallback();",
          "209:   envoy::data::accesslog::v2::HTTPAccessLogEntry entry;",
          "211:   entry.mutable_request()->set_path(\"/test/path1\");",
          "212:   logger_->log(envoy::data::accesslog::v2::HTTPAccessLogEntry(entry));",
          "214:   MockAccessLogStream stream;",
          "215:   AccessLogCallbacks* callbacks;",
          "216:   expectStreamStart(stream, &callbacks);",
          "217:   EXPECT_CALL(local_info_, node());",
          "218:   expectStreamMessage(stream, fmt::format(R\"EOF(",
          "219:   identifier:",
          "220:     node:",
          "221:       id: node_name",
          "222:       cluster: cluster_name",
          "223:       locality:",
          "224:         zone: zone_name",
          "225:     log_name: test_log_name",
          "226:   http_logs:",
          "227:     log_entry:",
          "228:     - request:",
          "229:         path: /test/path1",
          "230:   )EOF\"));",
          "231:   EXPECT_CALL(*timer_, enableTimer(FlushInterval));",
          "232:   timer_->invokeCallback();",
          "235:   EXPECT_CALL(*timer_, enableTimer(FlushInterval));",
          "236:   timer_->invokeCallback();",
          "237: }",
          "239: class GrpcAccessLoggerCacheImplTest : public testing::Test {",
          "240: public:",
          "241:   GrpcAccessLoggerCacheImplTest() {",
          "242:     logger_cache_ = std::make_unique<GrpcAccessLoggerCacheImpl>(async_client_manager_, scope_, tls_,",
          "243:                                                                 local_info_);",
          "244:   }",
          "246:   void expectClientCreation() {",
          "247:     factory_ = new Grpc::MockAsyncClientFactory;",
          "248:     async_client_ = new Grpc::MockAsyncClient;",
          "249:     EXPECT_CALL(async_client_manager_, factoryForGrpcService(_, _, false))",
          "250:         .WillOnce(Invoke([this](const envoy::api::v2::core::GrpcService&, Stats::Scope&, bool) {",
          "251:           EXPECT_CALL(*factory_, create()).WillOnce(Invoke([this] {",
          "252:             return Grpc::RawAsyncClientPtr{async_client_};",
          "253:           }));",
          "254:           return Grpc::AsyncClientFactoryPtr{factory_};",
          "255:         }));",
          "256:   }",
          "258:   LocalInfo::MockLocalInfo local_info_;",
          "259:   NiceMock<ThreadLocal::MockInstance> tls_;",
          "260:   Grpc::MockAsyncClientManager async_client_manager_;",
          "261:   Grpc::MockAsyncClient* async_client_ = nullptr;",
          "262:   Grpc::MockAsyncClientFactory* factory_ = nullptr;",
          "263:   std::unique_ptr<GrpcAccessLoggerCacheImpl> logger_cache_;",
          "264:   NiceMock<Stats::MockIsolatedStatsStore> scope_;",
          "265: };",
          "267: TEST_F(GrpcAccessLoggerCacheImplTest, Deduplication) {",
          "268:   InSequence s;",
          "270:   ::envoy::config::accesslog::v2::CommonGrpcAccessLogConfig config;",
          "271:   config.set_log_name(\"log-1\");",
          "272:   config.mutable_grpc_service()->mutable_envoy_grpc()->set_cluster_name(\"cluster-1\");",
          "274:   expectClientCreation();",
          "275:   GrpcAccessLoggerSharedPtr logger1 = logger_cache_->getOrCreateLogger(config);",
          "276:   EXPECT_EQ(logger1, logger_cache_->getOrCreateLogger(config));",
          "279:   config.set_log_name(\"log-2\");",
          "280:   expectClientCreation();",
          "281:   EXPECT_NE(logger1, logger_cache_->getOrCreateLogger(config));",
          "283:   config.set_log_name(\"log-1\");",
          "284:   EXPECT_EQ(logger1, logger_cache_->getOrCreateLogger(config));",
          "287:   config.mutable_grpc_service()->mutable_envoy_grpc()->set_cluster_name(\"cluster-2\");",
          "288:   expectClientCreation();",
          "289:   EXPECT_NE(logger1, logger_cache_->getOrCreateLogger(config));",
          "290: }",
          "292: class MockGrpcAccessLogger : public GrpcAccessLogger {",
          "298: class MockGrpcAccessLoggerCache : public GrpcAccessLoggerCache {",
          "302:                GrpcAccessLoggerSharedPtr(",
          "",
          "[Added Lines]",
          "28: class MockGrpcAccessLogger : public GrpcCommon::GrpcAccessLogger {",
          "34: class MockGrpcAccessLoggerCache : public GrpcCommon::GrpcAccessLoggerCache {",
          "38:                GrpcCommon::GrpcAccessLoggerSharedPtr(",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "863:   }",
          "864: }",
          "897: TEST_F(HttpGrpcAccessLogTest, LogWithRequestMethod) {",
          "898:   InSequence s;",
          "899:   expectLogRequestMethod(\"GET\");",
          "",
          "[Removed Lines]",
          "866: TEST(responseFlagsToAccessLogResponseFlagsTest, All) {",
          "867:   NiceMock<StreamInfo::MockStreamInfo> stream_info;",
          "868:   ON_CALL(stream_info, hasResponseFlag(_)).WillByDefault(Return(true));",
          "869:   envoy::data::accesslog::v2::AccessLogCommon common_access_log;",
          "870:   HttpGrpcAccessLog::responseFlagsToAccessLogResponseFlags(common_access_log, stream_info);",
          "872:   envoy::data::accesslog::v2::AccessLogCommon common_access_log_expected;",
          "873:   common_access_log_expected.mutable_response_flags()->set_failed_local_healthcheck(true);",
          "874:   common_access_log_expected.mutable_response_flags()->set_no_healthy_upstream(true);",
          "875:   common_access_log_expected.mutable_response_flags()->set_upstream_request_timeout(true);",
          "876:   common_access_log_expected.mutable_response_flags()->set_local_reset(true);",
          "877:   common_access_log_expected.mutable_response_flags()->set_upstream_remote_reset(true);",
          "878:   common_access_log_expected.mutable_response_flags()->set_upstream_connection_failure(true);",
          "879:   common_access_log_expected.mutable_response_flags()->set_upstream_connection_termination(true);",
          "880:   common_access_log_expected.mutable_response_flags()->set_upstream_overflow(true);",
          "881:   common_access_log_expected.mutable_response_flags()->set_no_route_found(true);",
          "882:   common_access_log_expected.mutable_response_flags()->set_delay_injected(true);",
          "883:   common_access_log_expected.mutable_response_flags()->set_fault_injected(true);",
          "884:   common_access_log_expected.mutable_response_flags()->set_rate_limited(true);",
          "885:   common_access_log_expected.mutable_response_flags()->mutable_unauthorized_details()->set_reason(",
          "886:       envoy::data::accesslog::v2::ResponseFlags_Unauthorized_Reason::",
          "887:           ResponseFlags_Unauthorized_Reason_EXTERNAL_SERVICE);",
          "888:   common_access_log_expected.mutable_response_flags()->set_rate_limit_service_error(true);",
          "889:   common_access_log_expected.mutable_response_flags()->set_downstream_connection_termination(true);",
          "890:   common_access_log_expected.mutable_response_flags()->set_upstream_retry_limit_exceeded(true);",
          "891:   common_access_log_expected.mutable_response_flags()->set_stream_idle_timeout(true);",
          "892:   common_access_log_expected.mutable_response_flags()->set_invalid_envoy_request_headers(true);",
          "894:   EXPECT_EQ(common_access_log_expected.DebugString(), common_access_log.DebugString());",
          "895: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tools/check_format.py||tools/check_format.py": [
          "File: tools/check_format.py -> tools/check_format.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "136:   \"extensions/stat_sinks/common\",",
          "137:   \"extensions/stat_sinks/common/statsd\",",
          "138:   \"extensions/health_checkers/redis\",",
          "140:   \"extensions/access_loggers/file\",",
          "141:   \"extensions/common/tap\",",
          "142:   \"extensions/transport_sockets/raw_buffer\",",
          "",
          "[Removed Lines]",
          "139:   \"extensions/access_loggers/http_grpc\",",
          "",
          "[Added Lines]",
          "139:   \"extensions/access_loggers/grpc\",",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9dd666d841133fbba40940af0a424f7d82a6b0f1",
      "candidate_info": {
        "commit_hash": "9dd666d841133fbba40940af0a424f7d82a6b0f1",
        "repo": "envoyproxy/envoy",
        "commit_url": "https://github.com/envoyproxy/envoy/commit/9dd666d841133fbba40940af0a424f7d82a6b0f1",
        "files": [
          "source/common/http/header_map_impl.cc",
          "source/common/http/header_map_impl.h",
          "test/common/http/header_map_impl_test.cc"
        ],
        "message": "http: Header-map updating remove_if to an O(n) operation for lazy-headermap (#13390)\n\nSigned-off-by: Adi Suissa-Peleg <adip@google.com>",
        "before_after_code_files": [
          "source/common/http/header_map_impl.cc||source/common/http/header_map_impl.cc",
          "source/common/http/header_map_impl.h||source/common/http/header_map_impl.h",
          "test/common/http/header_map_impl_test.cc||test/common/http/header_map_impl_test.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "source/common/http/header_map_impl.cc||source/common/http/header_map_impl.cc",
            "source/common/http/header_map_impl.h||source/common/http/header_map_impl.h",
            "test/common/http/header_map_impl_test.cc||test/common/http/header_map_impl_test.cc"
          ],
          "candidate": [
            "source/common/http/header_map_impl.cc||source/common/http/header_map_impl.cc",
            "source/common/http/header_map_impl.h||source/common/http/header_map_impl.h",
            "test/common/http/header_map_impl_test.cc||test/common/http/header_map_impl_test.cc"
          ]
        }
      },
      "candidate_diff": {
        "source/common/http/header_map_impl.cc||source/common/http/header_map_impl.cc": [
          "File: source/common/http/header_map_impl.cc -> source/common/http/header_map_impl.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "548: size_t HeaderMapImpl::removeIf(const HeaderMap::HeaderMatchPredicate& predicate) {",
          "549:   const size_t old_size = headers_.size();",
          "551:     const bool to_remove = predicate(entry);",
          "552:     if (to_remove) {",
          "",
          "[Removed Lines]",
          "550:   headers_.remove_if([&predicate, this](const HeaderEntryImpl& entry) {",
          "",
          "[Added Lines]",
          "550:   headers_.removeIf([&predicate, this](const HeaderEntryImpl& entry) {",
          "",
          "---------------"
        ],
        "source/common/http/header_map_impl.h||source/common/http/header_map_impl.h": [
          "File: source/common/http/header_map_impl.h -> source/common/http/header_map_impl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "222:       return headers_.erase(i);",
          "223:     }",
          "260:           }",
          "261:         }",
          "264:     }",
          "",
          "[Removed Lines]",
          "225:     template <class UnaryPredicate> void remove_if(UnaryPredicate p) {",
          "226:       headers_.remove_if([&](const HeaderEntryImpl& entry) {",
          "227:         const bool to_remove = p(entry);",
          "228:         if (to_remove) {",
          "229:           if (pseudo_headers_end_ == entry.entry_) {",
          "230:             pseudo_headers_end_++;",
          "231:           }",
          "232:           if (!lazy_map_.empty()) {",
          "233:             ASSERT(lazy_map_.find(entry.key().getStringView()) != lazy_map_.end());",
          "234:             auto& values_vec = lazy_map_[entry.key().getStringView()];",
          "235:             if (values_vec.size() == 1) {",
          "239:               lazy_map_.erase(entry.key().getStringView());",
          "240:             } else {",
          "255:               const auto remove_pos =",
          "256:                   std::remove_if(values_vec.begin(), values_vec.end(),",
          "257:                                  [&](HeaderNode it) { return it == entry.entry_; });",
          "258:               values_vec.erase(remove_pos, values_vec.end());",
          "259:             }",
          "262:         return to_remove;",
          "263:       });",
          "",
          "[Added Lines]",
          "225:     template <class UnaryPredicate> void removeIf(UnaryPredicate p) {",
          "226:       if (!lazy_map_.empty()) {",
          "229:         for (auto map_it = lazy_map_.begin(); map_it != lazy_map_.end();) {",
          "230:           auto& values_vec = map_it->second;",
          "231:           ASSERT(!values_vec.empty());",
          "236:           const auto remove_pos =",
          "237:               std::remove_if(values_vec.begin(), values_vec.end(), [&](HeaderNode it) {",
          "238:                 if (p(*(it->entry_))) {",
          "240:                   if (pseudo_headers_end_ == it->entry_) {",
          "241:                     pseudo_headers_end_++;",
          "242:                   }",
          "243:                   headers_.erase(it);",
          "244:                   return true;",
          "245:                 }",
          "246:                 return false;",
          "247:               });",
          "248:           values_vec.erase(remove_pos, values_vec.end());",
          "251:           if (values_vec.empty()) {",
          "252:             lazy_map_.erase(map_it++);",
          "253:           } else {",
          "254:             map_it++;",
          "257:       } else {",
          "260:         headers_.remove_if([&](const HeaderEntryImpl& entry) {",
          "261:           const bool to_remove = p(entry);",
          "262:           if (to_remove) {",
          "263:             if (pseudo_headers_end_ == entry.entry_) {",
          "264:               pseudo_headers_end_++;",
          "265:             }",
          "266:           }",
          "267:           return to_remove;",
          "268:         });",
          "269:       }",
          "",
          "---------------"
        ],
        "test/common/http/header_map_impl_test.cc||test/common/http/header_map_impl_test.cc": [
          "File: test/common/http/header_map_impl_test.cc -> test/common/http/header_map_impl_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "360: Http::RegisterCustomInlineHeader<Http::CustomInlineHeaderRegistry::Type::RequestHeaders>",
          "361:     custom_header_1_copy(Http::LowerCaseString{\"foo_custom_header\"});",
          "365:   TestRequestHeaderMapImpl headers;",
          "366:   EXPECT_EQ(custom_header_1.handle(), custom_header_1_copy.handle());",
          "367:   EXPECT_EQ(nullptr, headers.getInline(custom_header_1.handle()));",
          "",
          "[Removed Lines]",
          "364: TEST(HeaderMapImplTest, CustomRegisteredHeaders) {",
          "",
          "[Added Lines]",
          "363: class HeaderMapImplTest : public testing::TestWithParam<uint32_t> {",
          "364: public:",
          "365:   HeaderMapImplTest() {",
          "367:     Runtime::LoaderSingleton::getExisting()->mergeValues(",
          "368:         {{\"envoy.http.headermap.lazy_map_min_size\", absl::StrCat(GetParam())}});",
          "369:   }",
          "371:   static std::string testParamsToString(const ::testing::TestParamInfo<uint32_t>& params) {",
          "372:     return absl::StrCat(params.param);",
          "373:   }",
          "375:   TestScopedRuntime runtime;",
          "376: };",
          "378: INSTANTIATE_TEST_SUITE_P(HeaderMapThreshold, HeaderMapImplTest,",
          "379:                          testing::Values(0, 1, std::numeric_limits<uint32_t>::max()),",
          "380:                          HeaderMapImplTest::testParamsToString);",
          "383: TEST_P(HeaderMapImplTest, CustomRegisteredHeaders) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "381:   EXPECT_EQ(header_map->get(Headers::get().name)->value().getStringView(), #name);",
          "385:   {",
          "386:     auto header_map = RequestHeaderMapImpl::create();",
          "387:     INLINE_REQ_HEADERS(TEST_INLINE_HEADER_FUNCS)",
          "",
          "[Removed Lines]",
          "384: TEST(HeaderMapImplTest, AllInlineHeaders) {",
          "",
          "[Added Lines]",
          "403: TEST_P(HeaderMapImplTest, AllInlineHeaders) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "401:   }",
          "402: }",
          "405:   TestRequestHeaderMapImpl headers;",
          "406:   EXPECT_TRUE(headers.empty());",
          "407:   EXPECT_EQ(0, headers.size());",
          "",
          "[Removed Lines]",
          "404: TEST(HeaderMapImplTest, InlineInsert) {",
          "",
          "[Added Lines]",
          "423: TEST_P(HeaderMapImplTest, InlineInsert) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "414:   EXPECT_EQ(\"hello\", headers.get(Headers::get().Host)->value().getStringView());",
          "415: }",
          "418:   {",
          "419:     TestRequestHeaderMapImpl headers;",
          "",
          "[Removed Lines]",
          "417: TEST(HeaderMapImplTest, InlineAppend) {",
          "",
          "[Added Lines]",
          "436: TEST_P(HeaderMapImplTest, InlineAppend) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "460:   }",
          "461: }",
          "464:   TestRequestHeaderMapImpl headers;",
          "465:   HeaderString key;",
          "466:   key.setCopy(Headers::get().EnvoyRetryOn.get());",
          "",
          "[Removed Lines]",
          "463: TEST(HeaderMapImplTest, MoveIntoInline) {",
          "",
          "[Added Lines]",
          "482: TEST_P(HeaderMapImplTest, MoveIntoInline) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "479:   EXPECT_EQ(\"hello,there\", headers.getEnvoyRetryOnValue());",
          "480: }",
          "483:   TestRequestHeaderMapImpl headers;",
          "",
          "[Removed Lines]",
          "482: TEST(HeaderMapImplTest, Remove) {",
          "",
          "[Added Lines]",
          "501: TEST_P(HeaderMapImplTest, Remove) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "521:   EXPECT_EQ(0UL, headers.remove(Headers::get().ContentLength));",
          "522: }",
          "525:   TestRequestHeaderMapImpl headers;",
          "526:   headers.setHost(\"foo\");",
          "527:   EXPECT_EQ(\"foo\", headers.get_(\"host\"));",
          "",
          "[Removed Lines]",
          "524: TEST(HeaderMapImplTest, RemoveHost) {",
          "",
          "[Added Lines]",
          "543: TEST_P(HeaderMapImplTest, RemoveHost) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "535:   EXPECT_EQ(nullptr, headers.Host());",
          "536: }",
          "539:   LowerCaseString key1 = LowerCaseString(\"X-postfix-foo\");",
          "540:   LowerCaseString key2 = LowerCaseString(\"X-postfix-\");",
          "541:   LowerCaseString key3 = LowerCaseString(\"x-postfix-eep\");",
          "",
          "[Removed Lines]",
          "538: TEST(HeaderMapImplTest, RemoveIf) {",
          "",
          "[Added Lines]",
          "557: TEST_P(HeaderMapImplTest, RemoveIf) {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "578:   }",
          "579: }",
          "583:   LowerCaseString key1 = LowerCaseString(\"X-prefix-foo\");",
          "584:   LowerCaseString key3 = LowerCaseString(\"X-Prefix-\");",
          "",
          "[Removed Lines]",
          "581: TEST(HeaderMapImplTest, RemovePrefix) {",
          "",
          "[Added Lines]",
          "600: TEST_P(HeaderMapImplTest, RemovePrefix) {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "630:   }",
          "631: };",
          "634:   TestRequestHeaderMapImpl headers;",
          "636:   LowerCaseString key1(\"hello\");",
          "",
          "[Removed Lines]",
          "633: TEST(HeaderMapImplTest, SetRemovesAllValues) {",
          "",
          "[Added Lines]",
          "652: TEST_P(HeaderMapImplTest, SetRemovesAllValues) {",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "671:   }",
          "672: }",
          "675:   {",
          "676:     TestRequestHeaderMapImpl headers;",
          "677:     const std::string foo(\"foo\");",
          "",
          "[Removed Lines]",
          "674: TEST(HeaderMapImplTest, DoubleInlineAdd) {",
          "",
          "[Added Lines]",
          "693: TEST_P(HeaderMapImplTest, DoubleInlineAdd) {",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "711:   TestRequestHeaderMapImpl headers;",
          "712:   const std::string foo(\"foo\");",
          "713:   const std::string bar(\"bar\");",
          "",
          "[Removed Lines]",
          "710: TEST(HeaderMapImplTest, DoubleCookieAdd) {",
          "",
          "[Added Lines]",
          "729: TEST_P(HeaderMapImplTest, DoubleCookieAdd) {",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "723:   ASSERT_EQ(out[1], \"bar\");",
          "724: }",
          "727:   TestRequestHeaderMapImpl headers;",
          "728:   headers.setReferenceKey(Headers::get().ContentType, \"blah\");",
          "729:   headers.setReferenceKey(Headers::get().ContentType, \"text/html\");",
          "",
          "[Removed Lines]",
          "726: TEST(HeaderMapImplTest, DoubleInlineSet) {",
          "",
          "[Added Lines]",
          "745: TEST_P(HeaderMapImplTest, DoubleInlineSet) {",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "731:   EXPECT_EQ(1UL, headers.size());",
          "732: }",
          "735:   TestRequestHeaderMapImpl headers;",
          "736:   LowerCaseString foo(\"hello\");",
          "737:   headers.addReferenceKey(foo, \"world\");",
          "",
          "[Removed Lines]",
          "734: TEST(HeaderMapImplTest, AddReferenceKey) {",
          "",
          "[Added Lines]",
          "753: TEST_P(HeaderMapImplTest, AddReferenceKey) {",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "739:   EXPECT_EQ(\"world\", headers.get(foo)->value().getStringView());",
          "740: }",
          "743:   TestRequestHeaderMapImpl headers;",
          "744:   LowerCaseString foo(\"hello\");",
          "745:   headers.setReferenceKey(foo, \"world\");",
          "",
          "[Removed Lines]",
          "742: TEST(HeaderMapImplTest, SetReferenceKey) {",
          "",
          "[Added Lines]",
          "761: TEST_P(HeaderMapImplTest, SetReferenceKey) {",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "751:   EXPECT_EQ(\"monde\", headers.get(foo)->value().getStringView());",
          "752: }",
          "756:   Runtime::LoaderSingleton::getExisting()->mergeValues(",
          "757:       {{\"envoy.reloadable_features.http_set_copy_replace_all_headers\", \"false\"}});",
          "",
          "[Removed Lines]",
          "754: TEST(HeaderMapImplTest, SetCopyOldBehavior) {",
          "755:   TestScopedRuntime runtime;",
          "",
          "[Added Lines]",
          "773: TEST_P(HeaderMapImplTest, SetCopyOldBehavior) {",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "800:   EXPECT_EQ(headers.getPathValue(), \"/foo\");",
          "801: }",
          "804:   TestRequestHeaderMapImpl headers;",
          "805:   LowerCaseString foo(\"hello\");",
          "806:   headers.setCopy(foo, \"world\");",
          "",
          "[Removed Lines]",
          "803: TEST(HeaderMapImplTest, SetCopyNewBehavior) {",
          "",
          "[Added Lines]",
          "821: TEST_P(HeaderMapImplTest, SetCopyNewBehavior) {",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "844:   EXPECT_EQ(headers.getPathValue(), \"/foo\");",
          "845: }",
          "848:   TestRequestHeaderMapImpl headers;",
          "",
          "[Removed Lines]",
          "847: TEST(HeaderMapImplTest, AddCopy) {",
          "",
          "[Added Lines]",
          "865: TEST_P(HeaderMapImplTest, AddCopy) {",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "915:             headers.get(envoy_retry_on)->value().getStringView());",
          "916: }",
          "919:   TestRequestHeaderMapImpl headers1;",
          "920:   TestRequestHeaderMapImpl headers2;",
          "921:   EXPECT_EQ(headers1, headers2);",
          "",
          "[Removed Lines]",
          "918: TEST(HeaderMapImplTest, Equality) {",
          "",
          "[Added Lines]",
          "936: TEST_P(HeaderMapImplTest, Equality) {",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "927:   EXPECT_FALSE(headers1 == headers2);",
          "928: }",
          "931:   TestRequestHeaderMapImpl headers;",
          "932:   LowerCaseString static_key(\"\\x90hello\");",
          "933:   std::string ref_value(\"value\");",
          "",
          "[Removed Lines]",
          "930: TEST(HeaderMapImplTest, LargeCharInHeader) {",
          "",
          "[Added Lines]",
          "948: TEST_P(HeaderMapImplTest, LargeCharInHeader) {",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "935:   EXPECT_EQ(\"value\", headers.get(static_key)->value().getStringView());",
          "936: }",
          "939:   TestRequestHeaderMapImpl headers;",
          "940:   headers.addCopy(LowerCaseString(\"hello\"), \"world\");",
          "941:   headers.addCopy(LowerCaseString(\"foo\"), \"xxx\");",
          "",
          "[Removed Lines]",
          "938: TEST(HeaderMapImplTest, Iterate) {",
          "",
          "[Added Lines]",
          "956: TEST_P(HeaderMapImplTest, Iterate) {",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "952:   headers.iterate(cb.asIterateCb());",
          "953: }",
          "956:   TestRequestHeaderMapImpl headers;",
          "957:   headers.addCopy(LowerCaseString(\"hello\"), \"world\");",
          "958:   headers.addCopy(LowerCaseString(\"foo\"), \"bar\");",
          "",
          "[Removed Lines]",
          "955: TEST(HeaderMapImplTest, IterateReverse) {",
          "",
          "[Added Lines]",
          "973: TEST_P(HeaderMapImplTest, IterateReverse) {",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "975:   });",
          "976: }",
          "979:   {",
          "980:     auto headers = TestRequestHeaderMapImpl({{Headers::get().Path.get(), \"/\"}, {\"hello\", \"world\"}});",
          "981:     EXPECT_EQ(\"/\", headers.get(LowerCaseString(\":path\"))->value().getStringView());",
          "",
          "[Removed Lines]",
          "978: TEST(HeaderMapImplTest, Get) {",
          "",
          "[Added Lines]",
          "996: TEST_P(HeaderMapImplTest, Get) {",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "996:   }",
          "997: }",
          "1000:   std::vector<std::pair<LowerCaseString, std::string>> iter_headers{",
          "1001:       {LowerCaseString(Headers::get().Path), \"/\"}, {LowerCaseString(\"hello\"), \"world\"}};",
          "1002:   auto headers = createHeaderMap<RequestHeaderMapImpl>(iter_headers.cbegin(), iter_headers.cend());",
          "",
          "[Removed Lines]",
          "999: TEST(HeaderMapImplTest, CreateHeaderMapFromIterator) {",
          "",
          "[Added Lines]",
          "1017: TEST_P(HeaderMapImplTest, CreateHeaderMapFromIterator) {",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "1005:   EXPECT_EQ(nullptr, headers->get(LowerCaseString(\"foo\")));",
          "1006: }",
          "1009:   std::array<std::string, 2> keys{Headers::get().Path.get(), \"hello\"};",
          "1010:   std::array<std::string, 2> values{\"/\", \"world\"};",
          "",
          "[Removed Lines]",
          "1008: TEST(HeaderMapImplTest, TestHeaderList) {",
          "",
          "[Added Lines]",
          "1026: TEST_P(HeaderMapImplTest, TestHeaderList) {",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "1023:   EXPECT_THAT(to_string_views(header_list.values()), ElementsAre(\"/\", \"world\"));",
          "1024: }",
          "1028:   {",
          "1029:     TestRequestHeaderMapImpl headers;",
          "",
          "[Removed Lines]",
          "1026: TEST(HeaderMapImplTest, TestAppendHeader) {",
          "",
          "[Added Lines]",
          "1044: TEST_P(HeaderMapImplTest, TestAppendHeader) {",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "1086:                \"Trying to allocate overly large headers.\");",
          "1087: }",
          "1090:   HeaderAndValueCb cb;",
          "1092:   {",
          "",
          "[Removed Lines]",
          "1089: TEST(HeaderMapImplTest, PseudoHeaderOrder) {",
          "",
          "[Added Lines]",
          "1107: TEST_P(HeaderMapImplTest, PseudoHeaderOrder) {",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "1239:   TestRequestHeaderMapImpl foo;",
          "1240:   foo.addCopy(LowerCaseString(\"foo\"), \"bar\");",
          "1241:   auto headers = std::make_unique<TestRequestHeaderMapImpl>(foo);",
          "",
          "[Removed Lines]",
          "1238: TEST(HeaderMapImplTest, TestRequestHeaderMapImplCopy) {",
          "",
          "[Added Lines]",
          "1256: TEST_P(HeaderMapImplTest, TestRequestHeaderMapImplCopy) {",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "1249: }",
          "1253:   TestRequestHeaderMapImpl request_headers{{\"host\", \"foo\"}};",
          "1254:   EXPECT_EQ(request_headers.size(), 1);",
          "1255:   EXPECT_EQ(request_headers.get_(\":authority\"), \"foo\");",
          "",
          "[Removed Lines]",
          "1252: TEST(HeaderMapImplTest, HostHeader) {",
          "",
          "[Added Lines]",
          "1270: TEST_P(HeaderMapImplTest, HostHeader) {",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "1267:   EXPECT_EQ(response_trailers.get_(\"host\"), \"foo\");",
          "1268: }",
          "1271:   TestRequestHeaderMapImpl foo;",
          "1272:   foo.addCopy(LowerCaseString(\":path\"), \"GET\");",
          "1273:   EXPECT_EQ(foo.size(), 1);",
          "1274:   EXPECT_TRUE(foo.Path() != nullptr);",
          "1275: }",
          "1278:   TestRequestHeaderMapImpl headers;",
          "1279:   LowerCaseString static_key(\"hello\");",
          "1280:   std::string ref_value(\"value\");",
          "",
          "[Removed Lines]",
          "1270: TEST(HeaderMapImplTest, TestInlineHeaderAdd) {",
          "1277: TEST(HeaderMapImplTest, ClearHeaderMap) {",
          "",
          "[Added Lines]",
          "1288: TEST_P(HeaderMapImplTest, TestInlineHeaderAdd) {",
          "1295: TEST_P(HeaderMapImplTest, ClearHeaderMap) {",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "1316: }",
          "1320:   {",
          "1321:     TestRequestHeaderMapImpl headers;",
          "1322:     std::string foo = \"foo\";",
          "",
          "[Removed Lines]",
          "1319: TEST(HeaderMapImplTest, InlineHeaderByteSize) {",
          "",
          "[Added Lines]",
          "1337: TEST_P(HeaderMapImplTest, InlineHeaderByteSize) {",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "1370:   }",
          "1371: }",
          "1374:   EXPECT_TRUE(validHeaderString(\"abc\"));",
          "1375:   EXPECT_FALSE(validHeaderString(absl::string_view(\"a\\000bc\", 4)));",
          "1376:   EXPECT_FALSE(validHeaderString(\"abc\\n\"));",
          "",
          "[Removed Lines]",
          "1373: TEST(HeaderMapImplTest, ValidHeaderString) {",
          "",
          "[Added Lines]",
          "1391: TEST_P(HeaderMapImplTest, ValidHeaderString) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c63c1e83989a10512546d67df44629029d1be23c",
      "candidate_info": {
        "commit_hash": "c63c1e83989a10512546d67df44629029d1be23c",
        "repo": "envoyproxy/envoy",
        "commit_url": "https://github.com/envoyproxy/envoy/commit/c63c1e83989a10512546d67df44629029d1be23c",
        "files": [
          "api/envoy/api/v2/route/route.proto",
          "api/envoy/api/v3alpha/route/route.proto",
          "docs/root/intro/version_history.rst",
          "include/envoy/router/router.h",
          "source/common/http/async_client_impl.h",
          "source/common/router/config_impl.cc",
          "source/common/router/config_impl.h",
          "source/common/router/router.cc",
          "source/common/router/router.h",
          "test/common/http/async_client_impl_test.cc",
          "test/common/router/config_impl_test.cc",
          "test/common/router/router_test.cc",
          "test/integration/protocol_integration_test.cc",
          "test/mocks/router/mocks.cc",
          "test/mocks/router/mocks.h"
        ],
        "message": "router: adding a knob to configure a cap on buffering for shadowing/retries (#8574)\n\nSigned-off-by: Alyssa Wilk <alyssar@chromium.org>",
        "before_after_code_files": [
          "api/envoy/api/v2/route/route.proto||api/envoy/api/v2/route/route.proto",
          "api/envoy/api/v3alpha/route/route.proto||api/envoy/api/v3alpha/route/route.proto",
          "include/envoy/router/router.h||include/envoy/router/router.h",
          "source/common/http/async_client_impl.h||source/common/http/async_client_impl.h",
          "source/common/router/config_impl.cc||source/common/router/config_impl.cc",
          "source/common/router/config_impl.h||source/common/router/config_impl.h",
          "source/common/router/router.cc||source/common/router/router.cc",
          "source/common/router/router.h||source/common/router/router.h",
          "test/common/http/async_client_impl_test.cc||test/common/http/async_client_impl_test.cc",
          "test/common/router/config_impl_test.cc||test/common/router/config_impl_test.cc",
          "test/common/router/router_test.cc||test/common/router/router_test.cc",
          "test/integration/protocol_integration_test.cc||test/integration/protocol_integration_test.cc",
          "test/mocks/router/mocks.cc||test/mocks/router/mocks.cc",
          "test/mocks/router/mocks.h||test/mocks/router/mocks.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "source/common/router/router.cc||source/common/router/router.cc",
            "test/integration/protocol_integration_test.cc||test/integration/protocol_integration_test.cc"
          ],
          "candidate": [
            "source/common/router/router.cc||source/common/router/router.cc",
            "test/integration/protocol_integration_test.cc||test/integration/protocol_integration_test.cc"
          ]
        }
      },
      "candidate_diff": {
        "api/envoy/api/v2/route/route.proto||api/envoy/api/v2/route/route.proto": [
          "File: api/envoy/api/v2/route/route.proto -> api/envoy/api/v2/route/route.proto",
          "--- Hunk 1 ---",
          "[Context before]",
          "147:   HedgePolicy hedge_policy = 17;",
          "148: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "152:   google.protobuf.UInt32Value per_request_buffer_limit_bytes = 18;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "232:   Tracing tracing = 15;",
          "233: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "242:   google.protobuf.UInt32Value per_request_buffer_limit_bytes = 16;",
          "",
          "---------------"
        ],
        "api/envoy/api/v3alpha/route/route.proto||api/envoy/api/v3alpha/route/route.proto": [
          "File: api/envoy/api/v3alpha/route/route.proto -> api/envoy/api/v3alpha/route/route.proto",
          "--- Hunk 1 ---",
          "[Context before]",
          "147:   HedgePolicy hedge_policy = 17;",
          "148: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "152:   google.protobuf.UInt32Value per_request_buffer_limit_bytes = 18;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "232:   Tracing tracing = 15;",
          "233: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "242:   google.protobuf.UInt32Value per_request_buffer_limit_bytes = 16;",
          "",
          "---------------"
        ],
        "include/envoy/router/router.h||include/envoy/router/router.h": [
          "File: include/envoy/router/router.h -> include/envoy/router/router.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "438:   virtual bool includeAttemptCount() const PURE;",
          "439: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "448:   virtual uint32_t retryShadowBufferLimit() const PURE;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "613:   virtual const RetryPolicy& retryPolicy() const PURE;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "632:   virtual uint32_t retryShadowBufferLimit() const PURE;",
          "",
          "---------------"
        ],
        "source/common/http/async_client_impl.h||source/common/http/async_client_impl.h": [
          "File: source/common/http/async_client_impl.h -> source/common/http/async_client_impl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "186:       return nullptr;",
          "187:     }",
          "188:     bool includeAttemptCount() const override { return false; }",
          "190:     static const NullRateLimitPolicy rate_limit_policy_;",
          "191:     static const NullConfig route_configuration_;",
          "192:   };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "189:     uint32_t retryShadowBufferLimit() const override {",
          "190:       return std::numeric_limits<uint32_t>::max();",
          "191:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "224:     }",
          "225:     const Router::RateLimitPolicy& rateLimitPolicy() const override { return rate_limit_policy_; }",
          "226:     const Router::RetryPolicy& retryPolicy() const override { return retry_policy_; }",
          "227:     const Router::ShadowPolicy& shadowPolicy() const override { return shadow_policy_; }",
          "228:     std::chrono::milliseconds timeout() const override {",
          "229:       if (timeout_) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "229:     uint32_t retryShadowBufferLimit() const override {",
          "230:       return std::numeric_limits<uint32_t>::max();",
          "231:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "390:   bool send_xff_{true};",
          "392:   friend class AsyncClientImpl;",
          "394: };",
          "396: class AsyncRequestImpl final : public AsyncClient::Request,",
          "",
          "[Removed Lines]",
          "393:   friend class AsyncClientImplRouteTest;",
          "",
          "[Added Lines]",
          "398:   friend class AsyncClientImplUnitTest;",
          "",
          "---------------"
        ],
        "source/common/router/config_impl.cc||source/common/router/config_impl.cc": [
          "File: source/common/router/config_impl.cc -> source/common/router/config_impl.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "274:                                                       route.request_headers_to_remove())),",
          "275:       response_headers_parser_(HeaderParser::configure(route.response_headers_to_add(),",
          "276:                                                        route.response_headers_to_remove())),",
          "277:       metadata_(route.metadata()), typed_metadata_(route.metadata()),",
          "278:       match_grpc_(route.match().has_grpc()), opaque_config_(parseOpaqueConfig(route)),",
          "279:       decorator_(parseDecorator(route)), route_tracing_(parseRouteTracing(route)),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "277:       retry_shadow_buffer_limit_(PROTOBUF_GET_WRAPPED_OR_DEFAULT(",
          "278:           route, per_request_buffer_limit_bytes, vhost.retryShadowBufferLimit())),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "874:                                                        virtual_host.response_headers_to_remove())),",
          "875:       per_filter_configs_(virtual_host.typed_per_filter_config(), virtual_host.per_filter_config(),",
          "876:                           factory_context, validator),",
          "877:       include_attempt_count_(virtual_host.include_request_attempt_count()),",
          "878:       virtual_cluster_catch_all_(stat_name_pool_) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "879:       retry_shadow_buffer_limit_(PROTOBUF_GET_WRAPPED_OR_DEFAULT(",
          "880:           virtual_host, per_request_buffer_limit_bytes, std::numeric_limits<uint32_t>::max())),",
          "",
          "---------------"
        ],
        "source/common/router/config_impl.h||source/common/router/config_impl.h": [
          "File: source/common/router/config_impl.h -> source/common/router/config_impl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "177:   const absl::optional<envoy::api::v2::route::HedgePolicy>& hedgePolicy() const {",
          "178:     return hedge_policy_;",
          "179:   }",
          "181: private:",
          "182:   enum class SslRequirements { NONE, EXTERNAL_ONLY, ALL };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "180:   uint32_t retryShadowBufferLimit() const override { return retry_shadow_buffer_limit_; }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "217:   HeaderParserPtr request_headers_parser_;",
          "218:   HeaderParserPtr response_headers_parser_;",
          "219:   PerFilterConfigs per_filter_configs_;",
          "220:   const bool include_attempt_count_;",
          "221:   absl::optional<envoy::api::v2::route::RetryPolicy> retry_policy_;",
          "222:   absl::optional<envoy::api::v2::route::HedgePolicy> hedge_policy_;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "221:   uint32_t retry_shadow_buffer_limit_{std::numeric_limits<uint32_t>::max()};",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "408:   Upstream::ResourcePriority priority() const override { return priority_; }",
          "409:   const RateLimitPolicy& rateLimitPolicy() const override { return rate_limit_policy_; }",
          "410:   const RetryPolicy& retryPolicy() const override { return retry_policy_; }",
          "411:   const ShadowPolicy& shadowPolicy() const override { return shadow_policy_; }",
          "412:   const VirtualCluster* virtualCluster(const Http::HeaderMap& headers) const override {",
          "413:     return vhost_.virtualClusterFromEntries(headers);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "413:   uint32_t retryShadowBufferLimit() const override { return retry_shadow_buffer_limit_; }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "501:     Upstream::ResourcePriority priority() const override { return parent_->priority(); }",
          "502:     const RateLimitPolicy& rateLimitPolicy() const override { return parent_->rateLimitPolicy(); }",
          "503:     const RetryPolicy& retryPolicy() const override { return parent_->retryPolicy(); }",
          "504:     const ShadowPolicy& shadowPolicy() const override { return parent_->shadowPolicy(); }",
          "505:     std::chrono::milliseconds timeout() const override { return parent_->timeout(); }",
          "506:     absl::optional<std::chrono::milliseconds> idleTimeout() const override {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "507:     uint32_t retryShadowBufferLimit() const override { return parent_->retryShadowBufferLimit(); }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "672:   TlsContextMatchCriteriaConstPtr tls_context_match_criteria_;",
          "673:   HeaderParserPtr request_headers_parser_;",
          "674:   HeaderParserPtr response_headers_parser_;",
          "675:   envoy::api::v2::core::Metadata metadata_;",
          "676:   Envoy::Config::TypedMetadataImpl<HttpRouteTypedMetadataFactory> typed_metadata_;",
          "677:   const bool match_grpc_;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "679:   uint32_t retry_shadow_buffer_limit_{std::numeric_limits<uint32_t>::max()};",
          "",
          "---------------"
        ],
        "source/common/router/router.cc||source/common/router/router.cc": [
          "File: source/common/router/router.cc -> source/common/router/router.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "408:   route_entry_ = route_->routeEntry();",
          "409:   callbacks_->streamInfo().setRouteName(route_entry_->routeName());",
          "410:   if (debug_config && debug_config->append_cluster_) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "411:   retry_shadow_buffer_limit_ =",
          "412:       std::min(retry_shadow_buffer_limit_, route_entry_->retryShadowBufferLimit());",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "588:   ASSERT(upstream_requests_.size() == 1);",
          "590:   bool buffering = (retry_state_ && retry_state_->enabled()) || do_shadowing_;",
          "594:     cluster_->stats().retry_or_shadow_abandoned_.inc();",
          "595:     retry_state_.reset();",
          "",
          "[Removed Lines]",
          "591:   if (buffering && buffer_limit_ > 0 &&",
          "592:       getLength(callbacks_->decodingBuffer()) + data.length() > buffer_limit_) {",
          "",
          "[Added Lines]",
          "595:   if (buffering &&",
          "596:       getLength(callbacks_->decodingBuffer()) + data.length() > retry_shadow_buffer_limit_) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "652: }",
          "654: void Filter::cleanup() {",
          "",
          "[Removed Lines]",
          "651:   buffer_limit_ = callbacks_->decoderBufferLimit();",
          "",
          "[Added Lines]",
          "658:   if (callbacks_->decoderBufferLimit() != 0) {",
          "659:     retry_shadow_buffer_limit_ = callbacks_->decoderBufferLimit();",
          "660:   }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1475:       buffered_request_body_ = std::make_unique<Buffer::WatermarkBuffer>(",
          "1476:           [this]() -> void { this->enableDataFromDownstream(); },",
          "1477:           [this]() -> void { this->disableDataFromDownstream(); });",
          "1479:     }",
          "1481:     buffered_request_body_->move(data);",
          "",
          "[Removed Lines]",
          "1478:       buffered_request_body_->setWatermarks(parent_.buffer_limit_);",
          "",
          "[Added Lines]",
          "1487:       buffered_request_body_->setWatermarks(parent_.callbacks_->decoderBufferLimit());",
          "",
          "---------------"
        ],
        "source/common/router/router.h||source/common/router/router.h": [
          "File: source/common/router/router.h -> source/common/router/router.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "572:   Http::HeaderMap* downstream_headers_{};",
          "573:   Http::HeaderMap* downstream_trailers_{};",
          "574:   MonotonicTime downstream_request_complete_time_;",
          "576:   MetadataMatchCriteriaConstPtr metadata_match_;",
          "577:   std::function<void(Http::HeaderMap&)> modify_headers_;",
          "",
          "[Removed Lines]",
          "575:   uint32_t buffer_limit_{0};",
          "",
          "[Added Lines]",
          "575:   uint32_t retry_shadow_buffer_limit_{std::numeric_limits<uint32_t>::max()};",
          "",
          "---------------"
        ],
        "test/common/http/async_client_impl_test.cc||test/common/http/async_client_impl_test.cc": [
          "File: test/common/http/async_client_impl_test.cc -> test/common/http/async_client_impl_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "1183: } // namespace",
          "1187: public:",
          "1189:       \"foo\", absl::nullopt,",
          "1190:       Protobuf::RepeatedPtrField<envoy::api::v2::route::RouteAction::HashPolicy>()};",
          "1191: };",
          "1212:   EXPECT_EQ(nullptr,",
          "1216:   EXPECT_EQ(Router::InternalRedirectAction::PassThrough,",
          "1225: }",
          "1227: } // namespace Http",
          "",
          "[Removed Lines]",
          "1186: class AsyncClientImplRouteTest : public testing::Test {",
          "1188:   AsyncStreamImpl::RouteImpl route_impl{",
          "1194: TEST_F(AsyncClientImplRouteTest, All) {",
          "1195:   EXPECT_EQ(nullptr, route_impl.decorator());",
          "1196:   EXPECT_EQ(nullptr, route_impl.tracingConfig());",
          "1197:   EXPECT_EQ(nullptr, route_impl.perFilterConfig(\"\"));",
          "1198:   EXPECT_EQ(Code::InternalServerError, route_impl.routeEntry()->clusterNotFoundResponseCode());",
          "1199:   EXPECT_EQ(nullptr, route_impl.routeEntry()->corsPolicy());",
          "1200:   EXPECT_EQ(nullptr, route_impl.routeEntry()->hashPolicy());",
          "1201:   EXPECT_EQ(1, route_impl.routeEntry()->hedgePolicy().initialRequests());",
          "1202:   EXPECT_EQ(0, route_impl.routeEntry()->hedgePolicy().additionalRequestChance().numerator());",
          "1203:   EXPECT_FALSE(route_impl.routeEntry()->hedgePolicy().hedgeOnPerTryTimeout());",
          "1204:   EXPECT_EQ(nullptr, route_impl.routeEntry()->metadataMatchCriteria());",
          "1205:   EXPECT_TRUE(route_impl.routeEntry()->rateLimitPolicy().empty());",
          "1206:   EXPECT_TRUE(route_impl.routeEntry()->rateLimitPolicy().getApplicableRateLimit(0).empty());",
          "1207:   EXPECT_EQ(absl::nullopt, route_impl.routeEntry()->idleTimeout());",
          "1208:   EXPECT_EQ(absl::nullopt, route_impl.routeEntry()->grpcTimeoutOffset());",
          "1209:   EXPECT_TRUE(route_impl.routeEntry()->opaqueConfig().empty());",
          "1210:   EXPECT_TRUE(route_impl.routeEntry()->includeVirtualHostRateLimits());",
          "1211:   EXPECT_TRUE(route_impl.routeEntry()->metadata().filter_metadata().empty());",
          "1213:             route_impl.routeEntry()->typedMetadata().get<Config::TypedMetadata::Object>(\"bar\"));",
          "1214:   EXPECT_EQ(nullptr, route_impl.routeEntry()->perFilterConfig(\"bar\"));",
          "1215:   EXPECT_TRUE(route_impl.routeEntry()->upgradeMap().empty());",
          "1217:             route_impl.routeEntry()->internalRedirectAction());",
          "1218:   EXPECT_TRUE(route_impl.routeEntry()->shadowPolicy().runtimeKey().empty());",
          "1219:   EXPECT_EQ(0, route_impl.routeEntry()->shadowPolicy().defaultValue().numerator());",
          "1220:   EXPECT_TRUE(route_impl.routeEntry()->virtualHost().rateLimitPolicy().empty());",
          "1221:   EXPECT_EQ(nullptr, route_impl.routeEntry()->virtualHost().corsPolicy());",
          "1222:   EXPECT_EQ(nullptr, route_impl.routeEntry()->virtualHost().perFilterConfig(\"bar\"));",
          "1223:   EXPECT_FALSE(route_impl.routeEntry()->virtualHost().includeAttemptCount());",
          "1224:   EXPECT_FALSE(route_impl.routeEntry()->virtualHost().routeConfig().usesVhds());",
          "",
          "[Added Lines]",
          "1187: class AsyncClientImplUnitTest : public testing::Test {",
          "1189:   AsyncStreamImpl::RouteImpl route_impl_{",
          "1192:   AsyncStreamImpl::NullVirtualHost vhost_;",
          "1193:   AsyncStreamImpl::NullConfig config_;",
          "1197: TEST_F(AsyncClientImplUnitTest, RouteImplInitTest) {",
          "1198:   EXPECT_EQ(nullptr, route_impl_.decorator());",
          "1199:   EXPECT_EQ(nullptr, route_impl_.tracingConfig());",
          "1200:   EXPECT_EQ(nullptr, route_impl_.perFilterConfig(\"\"));",
          "1201:   EXPECT_EQ(Code::InternalServerError, route_impl_.routeEntry()->clusterNotFoundResponseCode());",
          "1202:   EXPECT_EQ(nullptr, route_impl_.routeEntry()->corsPolicy());",
          "1203:   EXPECT_EQ(nullptr, route_impl_.routeEntry()->hashPolicy());",
          "1204:   EXPECT_EQ(1, route_impl_.routeEntry()->hedgePolicy().initialRequests());",
          "1205:   EXPECT_EQ(0, route_impl_.routeEntry()->hedgePolicy().additionalRequestChance().numerator());",
          "1206:   EXPECT_FALSE(route_impl_.routeEntry()->hedgePolicy().hedgeOnPerTryTimeout());",
          "1207:   EXPECT_EQ(nullptr, route_impl_.routeEntry()->metadataMatchCriteria());",
          "1208:   EXPECT_TRUE(route_impl_.routeEntry()->rateLimitPolicy().empty());",
          "1209:   EXPECT_TRUE(route_impl_.routeEntry()->rateLimitPolicy().getApplicableRateLimit(0).empty());",
          "1210:   EXPECT_EQ(absl::nullopt, route_impl_.routeEntry()->idleTimeout());",
          "1211:   EXPECT_EQ(absl::nullopt, route_impl_.routeEntry()->grpcTimeoutOffset());",
          "1212:   EXPECT_TRUE(route_impl_.routeEntry()->opaqueConfig().empty());",
          "1213:   EXPECT_TRUE(route_impl_.routeEntry()->includeVirtualHostRateLimits());",
          "1214:   EXPECT_TRUE(route_impl_.routeEntry()->metadata().filter_metadata().empty());",
          "1216:             route_impl_.routeEntry()->typedMetadata().get<Config::TypedMetadata::Object>(\"bar\"));",
          "1217:   EXPECT_EQ(nullptr, route_impl_.routeEntry()->perFilterConfig(\"bar\"));",
          "1218:   EXPECT_TRUE(route_impl_.routeEntry()->upgradeMap().empty());",
          "1220:             route_impl_.routeEntry()->internalRedirectAction());",
          "1221:   EXPECT_TRUE(route_impl_.routeEntry()->shadowPolicy().runtimeKey().empty());",
          "1222:   EXPECT_EQ(0, route_impl_.routeEntry()->shadowPolicy().defaultValue().numerator());",
          "1223:   EXPECT_TRUE(route_impl_.routeEntry()->virtualHost().rateLimitPolicy().empty());",
          "1224:   EXPECT_EQ(nullptr, route_impl_.routeEntry()->virtualHost().corsPolicy());",
          "1225:   EXPECT_EQ(nullptr, route_impl_.routeEntry()->virtualHost().perFilterConfig(\"bar\"));",
          "1226:   EXPECT_FALSE(route_impl_.routeEntry()->virtualHost().includeAttemptCount());",
          "1227:   EXPECT_FALSE(route_impl_.routeEntry()->virtualHost().routeConfig().usesVhds());",
          "1228:   EXPECT_EQ(nullptr, route_impl_.routeEntry()->tlsContextMatchCriteria());",
          "1229: }",
          "1231: TEST_F(AsyncClientImplUnitTest, NullConfig) {",
          "1232:   EXPECT_FALSE(config_.mostSpecificHeaderMutationsWins());",
          "1233: }",
          "1235: TEST_F(AsyncClientImplUnitTest, NullVirtualHost) {",
          "1236:   EXPECT_EQ(std::numeric_limits<uint32_t>::max(), vhost_.retryShadowBufferLimit());",
          "",
          "---------------"
        ],
        "test/common/router/config_impl_test.cc||test/common/router/config_impl_test.cc": [
          "File: test/common/router/config_impl_test.cc -> test/common/router/config_impl_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "2833: name: RetryVirtualHostLevel",
          "2834: virtual_hosts:",
          "2835: - domains: [www.lyft.com]",
          "2836:   name: www",
          "2837:   retry_policy: {num_retries: 3, per_try_timeout: 1s, retry_on: '5xx,gateway-error,connect-failure,reset'}",
          "2838:   routes:",
          "2839:   - match: {prefix: /foo}",
          "2840:     route:",
          "2841:       cluster: www",
          "2842:       retry_policy: {retry_on: connect-failure}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2836:   per_request_buffer_limit_bytes: 8",
          "2841:     per_request_buffer_limit_bytes: 7",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2863:                 ->routeEntry()",
          "2864:                 ->retryPolicy()",
          "2865:                 .retryOn());",
          "2868:   EXPECT_EQ(std::chrono::milliseconds(1000),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2868:   EXPECT_EQ(7U, config.route(genHeaders(\"www.lyft.com\", \"/foo\", \"GET\"), 0)",
          "2869:                     ->routeEntry()",
          "2870:                     ->retryShadowBufferLimit());",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2895:                 ->routeEntry()",
          "2896:                 ->retryPolicy()",
          "2897:                 .retryOn());",
          "2898: }",
          "2900: TEST_F(RouteMatcherTest, GrpcRetry) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2903:   EXPECT_EQ(8U, config.route(genHeaders(\"www.lyft.com\", \"/\", \"GET\"), 0)",
          "2904:                     ->routeEntry()",
          "2905:                     ->retryShadowBufferLimit());",
          "",
          "---------------"
        ],
        "test/common/router/router_test.cc||test/common/router/router_test.cc": [
          "File: test/common/router/router_test.cc -> test/common/router/router_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "2367:   Http::TestHeaderMapImpl headers{{\"x-envoy-retry-on\", \"5xx\"}, {\"x-envoy-internal\", \"true\"}};",
          "2368:   HttpTestUtility::addDefaultHeaders(headers);",
          "2371:   router_.retry_state_->expectResetRetry();",
          "2372:   EXPECT_CALL(cm_.conn_pool_.host_->outlier_detector_,",
          "",
          "[Removed Lines]",
          "2369:   router_.decodeHeaders(headers, true);",
          "",
          "[Added Lines]",
          "2369:   router_.decodeHeaders(headers, false);",
          "2370:   EXPECT_CALL(*router_.retry_state_, enabled()).WillOnce(Return(true));",
          "2371:   EXPECT_CALL(callbacks_, addDecodedData(_, _)).Times(1);",
          "2372:   Buffer::OwnedImpl body(\"test body\");",
          "2373:   router_.decodeData(body, true);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2396:   EXPECT_TRUE(verifyHostUpstreamStats(1, 1));",
          "2397: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2403: TEST_F(RouterTest, NoRetryWithBodyLimit) {",
          "2404:   NiceMock<Http::MockStreamEncoder> encoder1;",
          "2405:   Http::StreamDecoder* response_decoder = nullptr;",
          "2406:   EXPECT_CALL(cm_.conn_pool_, newStream(_, _))",
          "2407:       .WillOnce(Invoke([&](Http::StreamDecoder& decoder, Http::ConnectionPool::Callbacks& callbacks)",
          "2408:                            -> Http::ConnectionPool::Cancellable* {",
          "2409:         response_decoder = &decoder;",
          "2410:         callbacks.onPoolReady(encoder1, cm_.conn_pool_.host_, upstream_stream_info_);",
          "2411:         return nullptr;",
          "2412:       }));",
          "2415:   EXPECT_CALL(callbacks_.route_->route_entry_, retryShadowBufferLimit()).WillOnce(Return(0));",
          "2416:   Http::TestHeaderMapImpl headers{{\"x-envoy-retry-on\", \"5xx\"}, {\"x-envoy-internal\", \"true\"}};",
          "2417:   HttpTestUtility::addDefaultHeaders(headers);",
          "2418:   router_.decodeHeaders(headers, false);",
          "2420:   EXPECT_CALL(*router_.retry_state_, enabled()).WillOnce(Return(true));",
          "2421:   EXPECT_CALL(callbacks_, addDecodedData(_, _)).Times(0);",
          "2422:   Buffer::OwnedImpl body(\"t\");",
          "2423:   router_.decodeData(body, false);",
          "2425:   Http::HeaderMapPtr response_headers(new Http::TestHeaderMapImpl{{\":status\", \"200\"}});",
          "2426:   response_decoder->decodeHeaders(std::move(response_headers), true);",
          "2427: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4367: }",
          "4369: TEST_F(WatermarkTest, FilterWatermarks) {",
          "4371:   router_.setDecoderFilterCallbacks(callbacks_);",
          "4373:   sendRequest(false, false);",
          "",
          "[Removed Lines]",
          "4370:   EXPECT_CALL(callbacks_, decoderBufferLimit()).WillOnce(Return(10));",
          "",
          "[Added Lines]",
          "4400:   EXPECT_CALL(callbacks_, decoderBufferLimit()).Times(3).WillRepeatedly(Return(10));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "4407: TEST_F(WatermarkTest, RetryRequestNotComplete) {",
          "4409:   router_.setDecoderFilterCallbacks(callbacks_);",
          "4410:   NiceMock<Http::MockStreamEncoder> encoder1;",
          "4411:   Http::StreamDecoder* response_decoder = nullptr;",
          "",
          "[Removed Lines]",
          "4408:   EXPECT_CALL(callbacks_, decoderBufferLimit()).WillOnce(Return(10));",
          "",
          "[Added Lines]",
          "4438:   EXPECT_CALL(callbacks_, decoderBufferLimit()).Times(2).WillRepeatedly(Return(10));",
          "",
          "---------------"
        ],
        "test/integration/protocol_integration_test.cc||test/integration/protocol_integration_test.cc": [
          "File: test/integration/protocol_integration_test.cc -> test/integration/protocol_integration_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "469:   EXPECT_EQ(\"503\", response->headers().Status()->value().getStringView());",
          "470: }",
          "474: TEST_P(DownstreamProtocolIntegrationTest, HittingDecoderFilterLimit) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "473: TEST_P(ProtocolIntegrationTest, RetryHittingRouteLimits) {",
          "474:   auto host = config_helper_.createVirtualHost(\"nobody.com\", \"/\");",
          "475:   host.mutable_per_request_buffer_limit_bytes()->set_value(0);",
          "476:   config_helper_.addVirtualHost(host);",
          "477:   initialize();",
          "478:   codec_client_ = makeHttpConnection(lookupPort(\"http\"));",
          "480:   auto response =",
          "481:       codec_client_->makeRequestWithBody(Http::TestHeaderMapImpl{{\":method\", \"POST\"},",
          "482:                                                                  {\":path\", \"/\"},",
          "483:                                                                  {\":scheme\", \"http\"},",
          "484:                                                                  {\":authority\", \"nobody.com\"},",
          "485:                                                                  {\"x-forwarded-for\", \"10.0.0.1\"},",
          "486:                                                                  {\"x-envoy-retry-on\", \"5xx\"}},",
          "487:                                          1);",
          "488:   waitForNextUpstreamRequest();",
          "490:   upstream_request_->encodeHeaders(Http::TestHeaderMapImpl{{\":status\", \"503\"}}, true);",
          "492:   response->waitForEndStream();",
          "493:   EXPECT_TRUE(upstream_request_->complete());",
          "494:   EXPECT_EQ(1U, upstream_request_->bodyLength());",
          "496:   EXPECT_TRUE(response->complete());",
          "497:   EXPECT_EQ(\"503\", response->headers().Status()->value().getStringView());",
          "498: }",
          "",
          "---------------"
        ],
        "test/mocks/router/mocks.cc||test/mocks/router/mocks.cc": [
          "File: test/mocks/router/mocks.cc -> test/mocks/router/mocks.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "81:   ON_CALL(*this, opaqueConfig()).WillByDefault(ReturnRef(opaque_config_));",
          "82:   ON_CALL(*this, rateLimitPolicy()).WillByDefault(ReturnRef(rate_limit_policy_));",
          "83:   ON_CALL(*this, retryPolicy()).WillByDefault(ReturnRef(retry_policy_));",
          "84:   ON_CALL(*this, shadowPolicy()).WillByDefault(ReturnRef(shadow_policy_));",
          "85:   ON_CALL(*this, timeout()).WillByDefault(Return(std::chrono::milliseconds(10)));",
          "86:   ON_CALL(*this, virtualCluster(_)).WillByDefault(Return(&virtual_cluster_));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "84:   ON_CALL(*this, retryShadowBufferLimit())",
          "85:       .WillByDefault(Return(std::numeric_limits<uint32_t>::max()));",
          "",
          "---------------"
        ],
        "test/mocks/router/mocks.h||test/mocks/router/mocks.h": [
          "File: test/mocks/router/mocks.h -> test/mocks/router/mocks.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "230:   MOCK_CONST_METHOD0(includeAttemptCount, bool());",
          "231:   MOCK_METHOD0(retryPriority, Upstream::RetryPrioritySharedPtr());",
          "232:   MOCK_METHOD0(retryHostPredicate, Upstream::RetryHostPredicateSharedPtr());",
          "234:   Stats::StatName statName() const override {",
          "235:     stat_name_ = std::make_unique<Stats::StatNameManagedStorage>(name(), *symbol_table_);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "233:   MOCK_CONST_METHOD0(retryShadowBufferLimit, uint32_t());",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "308:   MOCK_CONST_METHOD0(priority, Upstream::ResourcePriority());",
          "309:   MOCK_CONST_METHOD0(rateLimitPolicy, const RateLimitPolicy&());",
          "310:   MOCK_CONST_METHOD0(retryPolicy, const RetryPolicy&());",
          "311:   MOCK_CONST_METHOD0(shadowPolicy, const ShadowPolicy&());",
          "312:   MOCK_CONST_METHOD0(timeout, std::chrono::milliseconds());",
          "313:   MOCK_CONST_METHOD0(idleTimeout, absl::optional<std::chrono::milliseconds>());",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "312:   MOCK_CONST_METHOD0(retryShadowBufferLimit, uint32_t());",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9be85fbc561c373875a0102dddf9baf5a86543c1",
      "candidate_info": {
        "commit_hash": "9be85fbc561c373875a0102dddf9baf5a86543c1",
        "repo": "envoyproxy/envoy",
        "commit_url": "https://github.com/envoyproxy/envoy/commit/9be85fbc561c373875a0102dddf9baf5a86543c1",
        "files": [
          "include/envoy/http/header_map.h",
          "source/common/http/header_map_impl.cc",
          "source/common/http/header_map_impl.h",
          "source/common/http/headers.h",
          "source/common/http/utility.cc",
          "source/common/http/utility.h",
          "test/common/http/header_map_impl_test.cc",
          "test/extensions/filters/http/ext_authz/ext_authz_test.cc",
          "test/integration/http_integration.cc",
          "test/mocks/http/stream_decoder.cc",
          "test/mocks/http/stream_encoder.cc",
          "test/test_common/utility.h"
        ],
        "message": "http: split header methods (#10252)\n\nThis commit finalizes the header interface split by actually\nmoving the O(1) headers to their appropriate location. This will\nprovide a good base for our future decisions on what to do with\nthe code moving forward.\n\nSigned-off-by: Matt Klein <mklein@lyft.com",
        "before_after_code_files": [
          "include/envoy/http/header_map.h||include/envoy/http/header_map.h",
          "source/common/http/header_map_impl.cc||source/common/http/header_map_impl.cc",
          "source/common/http/header_map_impl.h||source/common/http/header_map_impl.h",
          "source/common/http/headers.h||source/common/http/headers.h",
          "source/common/http/utility.cc||source/common/http/utility.cc",
          "source/common/http/utility.h||source/common/http/utility.h",
          "test/common/http/header_map_impl_test.cc||test/common/http/header_map_impl_test.cc",
          "test/extensions/filters/http/ext_authz/ext_authz_test.cc||test/extensions/filters/http/ext_authz/ext_authz_test.cc",
          "test/integration/http_integration.cc||test/integration/http_integration.cc",
          "test/mocks/http/stream_decoder.cc||test/mocks/http/stream_decoder.cc",
          "test/mocks/http/stream_encoder.cc||test/mocks/http/stream_encoder.cc",
          "test/test_common/utility.h||test/test_common/utility.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "include/envoy/http/header_map.h||include/envoy/http/header_map.h",
            "source/common/http/header_map_impl.cc||source/common/http/header_map_impl.cc",
            "source/common/http/header_map_impl.h||source/common/http/header_map_impl.h",
            "test/common/http/header_map_impl_test.cc||test/common/http/header_map_impl_test.cc",
            "test/integration/http_integration.cc||test/integration/http_integration.cc"
          ],
          "candidate": [
            "include/envoy/http/header_map.h||include/envoy/http/header_map.h",
            "source/common/http/header_map_impl.cc||source/common/http/header_map_impl.cc",
            "source/common/http/header_map_impl.h||source/common/http/header_map_impl.h",
            "test/common/http/header_map_impl_test.cc||test/common/http/header_map_impl_test.cc",
            "test/integration/http_integration.cc||test/integration/http_integration.cc"
          ]
        }
      },
      "candidate_diff": {
        "include/envoy/http/header_map.h||include/envoy/http/header_map.h": [
          "File: include/envoy/http/header_map.h -> include/envoy/http/header_map.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "264: };",
          "272:   HEADER_FUNC(Accept)                                                                              \\",
          "273:   HEADER_FUNC(AcceptEncoding)                                                                      \\",
          "275:   HEADER_FUNC(AccessControlRequestMethod)                                                          \\",
          "282:   HEADER_FUNC(Authorization)                                                                       \\",
          "284:   HEADER_FUNC(ClientTraceId)                                                                       \\",
          "290:   HEADER_FUNC(EnvoyAttemptCount)                                                                   \\",
          "293:   HEADER_FUNC(EnvoyDownstreamServiceCluster)                                                       \\",
          "294:   HEADER_FUNC(EnvoyDownstreamServiceNode)                                                          \\",
          "295:   HEADER_FUNC(EnvoyExpectedRequestTimeoutMs)                                                       \\",
          "296:   HEADER_FUNC(EnvoyExternalAddress)                                                                \\",
          "297:   HEADER_FUNC(EnvoyForceTrace)                                                                     \\",
          "298:   HEADER_FUNC(EnvoyHedgeOnPerTryTimeout)                                                           \\",
          "300:   HEADER_FUNC(EnvoyInternalRequest)                                                                \\",
          "301:   HEADER_FUNC(EnvoyIpTags)                                                                         \\",
          "302:   HEADER_FUNC(EnvoyMaxRetries)                                                                     \\",
          "307:   HEADER_FUNC(EnvoyRetryOn)                                                                        \\",
          "308:   HEADER_FUNC(EnvoyRetryGrpcOn)                                                                    \\",
          "309:   HEADER_FUNC(EnvoyRetriableStatusCodes)                                                           \\",
          "310:   HEADER_FUNC(EnvoyRetriableHeaderNames)                                                           \\",
          "311:   HEADER_FUNC(EnvoyUpstreamAltStatName)                                                            \\",
          "314:   HEADER_FUNC(EnvoyUpstreamRequestPerTryTimeoutMs)                                                 \\",
          "315:   HEADER_FUNC(EnvoyUpstreamRequestTimeoutAltResponse)                                              \\",
          "316:   HEADER_FUNC(EnvoyUpstreamRequestTimeoutMs)                                                       \\",
          "319:   HEADER_FUNC(Expect)                                                                              \\",
          "320:   HEADER_FUNC(ForwardedClientCert)                                                                 \\",
          "321:   HEADER_FUNC(ForwardedFor)                                                                        \\",
          "322:   HEADER_FUNC(ForwardedProto)                                                                      \\",
          "323:   HEADER_FUNC(GrpcAcceptEncoding)                                                                  \\",
          "326:   HEADER_FUNC(GrpcTimeout)                                                                         \\",
          "327:   HEADER_FUNC(Host)                                                                                \\",
          "331:   HEADER_FUNC(Method)                                                                              \\",
          "334:   HEADER_FUNC(OtSpanContext)                                                                       \\",
          "335:   HEADER_FUNC(Path)                                                                                \\",
          "336:   HEADER_FUNC(Protocol)                                                                            \\",
          "338:   HEADER_FUNC(Referer)                                                                             \\",
          "340:   HEADER_FUNC(Scheme)                                                                              \\",
          "341:   HEADER_FUNC(Server)                                                                              \\",
          "342:   HEADER_FUNC(Status)                                                                              \\",
          "344:   HEADER_FUNC(TransferEncoding)                                                                    \\",
          "345:   HEADER_FUNC(Upgrade)                                                                             \\",
          "348:   HEADER_FUNC(Via)",
          "",
          "[Removed Lines]",
          "271: #define ALL_INLINE_HEADERS(HEADER_FUNC)                                                            \\",
          "274:   HEADER_FUNC(AccessControlRequestHeaders)                                                         \\",
          "276:   HEADER_FUNC(AccessControlAllowOrigin)                                                            \\",
          "277:   HEADER_FUNC(AccessControlAllowHeaders)                                                           \\",
          "278:   HEADER_FUNC(AccessControlAllowMethods)                                                           \\",
          "279:   HEADER_FUNC(AccessControlAllowCredentials)                                                       \\",
          "280:   HEADER_FUNC(AccessControlExposeHeaders)                                                          \\",
          "281:   HEADER_FUNC(AccessControlMaxAge)                                                                 \\",
          "283:   HEADER_FUNC(CacheControl)                                                                        \\",
          "285:   HEADER_FUNC(Connection)                                                                          \\",
          "286:   HEADER_FUNC(ContentEncoding)                                                                     \\",
          "287:   HEADER_FUNC(ContentLength)                                                                       \\",
          "288:   HEADER_FUNC(ContentType)                                                                         \\",
          "289:   HEADER_FUNC(Date)                                                                                \\",
          "291:   HEADER_FUNC(EnvoyDegraded)                                                                       \\",
          "292:   HEADER_FUNC(EnvoyDecoratorOperation)                                                             \\",
          "299:   HEADER_FUNC(EnvoyImmediateHealthCheckFail)                                                       \\",
          "303:   HEADER_FUNC(EnvoyOriginalPath)                                                                   \\",
          "304:   HEADER_FUNC(EnvoyOriginalUrl)                                                                    \\",
          "305:   HEADER_FUNC(EnvoyOverloaded)                                                                     \\",
          "306:   HEADER_FUNC(EnvoyRateLimited)                                                                    \\",
          "312:   HEADER_FUNC(EnvoyUpstreamCanary)                                                                 \\",
          "313:   HEADER_FUNC(EnvoyUpstreamHealthCheckedCluster)                                                   \\",
          "317:   HEADER_FUNC(EnvoyUpstreamServiceTime)                                                            \\",
          "318:   HEADER_FUNC(Etag)                                                                                \\",
          "324:   HEADER_FUNC(GrpcMessage)                                                                         \\",
          "325:   HEADER_FUNC(GrpcStatus)                                                                          \\",
          "328:   HEADER_FUNC(KeepAlive)                                                                           \\",
          "329:   HEADER_FUNC(LastModified)                                                                        \\",
          "330:   HEADER_FUNC(Location)                                                                            \\",
          "332:   HEADER_FUNC(NoChunks)                                                                            \\",
          "333:   HEADER_FUNC(Origin)                                                                              \\",
          "337:   HEADER_FUNC(ProxyConnection)                                                                     \\",
          "339:   HEADER_FUNC(RequestId)                                                                           \\",
          "343:   HEADER_FUNC(TE)                                                                                  \\",
          "346:   HEADER_FUNC(UserAgent)                                                                           \\",
          "347:   HEADER_FUNC(Vary)                                                                                \\",
          "",
          "[Added Lines]",
          "271: #define INLINE_REQ_HEADERS(HEADER_FUNC)                                                            \\",
          "291:   HEADER_FUNC(EnvoyOriginalPath)                                                                   \\",
          "292:   HEADER_FUNC(EnvoyOriginalUrl)                                                                    \\",
          "306:   HEADER_FUNC(Origin)                                                                              \\",
          "311:   HEADER_FUNC(TE)                                                                                  \\",
          "312:   HEADER_FUNC(UserAgent)",
          "317: #define INLINE_RESP_HEADERS(HEADER_FUNC)                                                           \\",
          "318:   HEADER_FUNC(AccessControlAllowCredentials)                                                       \\",
          "319:   HEADER_FUNC(AccessControlAllowHeaders)                                                           \\",
          "320:   HEADER_FUNC(AccessControlAllowMethods)                                                           \\",
          "321:   HEADER_FUNC(AccessControlAllowOrigin)                                                            \\",
          "322:   HEADER_FUNC(AccessControlExposeHeaders)                                                          \\",
          "323:   HEADER_FUNC(AccessControlMaxAge)                                                                 \\",
          "324:   HEADER_FUNC(ContentEncoding)                                                                     \\",
          "325:   HEADER_FUNC(Date)                                                                                \\",
          "326:   HEADER_FUNC(Etag)                                                                                \\",
          "327:   HEADER_FUNC(EnvoyDegraded)                                                                       \\",
          "328:   HEADER_FUNC(EnvoyImmediateHealthCheckFail)                                                       \\",
          "329:   HEADER_FUNC(EnvoyOverloaded)                                                                     \\",
          "330:   HEADER_FUNC(EnvoyRateLimited)                                                                    \\",
          "331:   HEADER_FUNC(EnvoyUpstreamCanary)                                                                 \\",
          "332:   HEADER_FUNC(EnvoyUpstreamHealthCheckedCluster)                                                   \\",
          "333:   HEADER_FUNC(EnvoyUpstreamServiceTime)                                                            \\",
          "334:   HEADER_FUNC(Location)                                                                            \\",
          "337:   HEADER_FUNC(Vary)",
          "342: #define INLINE_REQ_RESP_HEADERS(HEADER_FUNC)                                                       \\",
          "343:   HEADER_FUNC(CacheControl)                                                                        \\",
          "344:   HEADER_FUNC(Connection)                                                                          \\",
          "345:   HEADER_FUNC(ContentLength)                                                                       \\",
          "346:   HEADER_FUNC(ContentType)                                                                         \\",
          "347:   HEADER_FUNC(EnvoyDecoratorOperation)                                                             \\",
          "348:   HEADER_FUNC(KeepAlive)                                                                           \\",
          "349:   HEADER_FUNC(NoChunks)                                                                            \\",
          "350:   HEADER_FUNC(ProxyConnection)                                                                     \\",
          "351:   HEADER_FUNC(RequestId)                                                                           \\",
          "359: #define INLINE_RESP_HEADERS_TRAILERS(HEADER_FUNC)                                                  \\",
          "360:   HEADER_FUNC(GrpcMessage)                                                                         \\",
          "361:   HEADER_FUNC(GrpcStatus)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "377: public:",
          "378:   virtual ~HeaderMap() = default;",
          "",
          "[Removed Lines]",
          "380:   ALL_INLINE_HEADERS(DEFINE_INLINE_HEADER)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "610:     headers.dumpState(os);",
          "611:     return os;",
          "612:   }",
          "621: };",
          "623: using HeaderMapPtr = std::unique_ptr<HeaderMap>;",
          "",
          "[Removed Lines]",
          "614: protected:",
          "620:   virtual void verifyByteSize() {}",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "634: using RequestHeaderMapPtr = std::unique_ptr<RequestHeaderMap>;",
          "",
          "[Removed Lines]",
          "630: class RequestOrResponseHeaderMap : public virtual HeaderMap {};",
          "633: class RequestHeaderMap : public RequestOrResponseHeaderMap {};",
          "",
          "[Added Lines]",
          "633: class RequestOrResponseHeaderMap : public virtual HeaderMap {",
          "634: public:",
          "635:   INLINE_REQ_RESP_HEADERS(DEFINE_INLINE_HEADER)",
          "636: };",
          "639: class RequestHeaderMap : public RequestOrResponseHeaderMap {",
          "640: public:",
          "641:   INLINE_REQ_HEADERS(DEFINE_INLINE_HEADER)",
          "642: };",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "638: using RequestTrailerMapPtr = std::unique_ptr<RequestTrailerMap>;",
          "645: using ResponseHeaderMapPtr = std::unique_ptr<ResponseHeaderMap>;",
          "",
          "[Removed Lines]",
          "641: class ResponseHeaderOrTrailerMap : public virtual HeaderMap {};",
          "644: class ResponseHeaderMap : public RequestOrResponseHeaderMap, public ResponseHeaderOrTrailerMap {};",
          "",
          "[Added Lines]",
          "650: class ResponseHeaderOrTrailerMap : public virtual HeaderMap {",
          "651: public:",
          "652:   INLINE_RESP_HEADERS_TRAILERS(DEFINE_INLINE_HEADER)",
          "653: };",
          "656: class ResponseHeaderMap : public RequestOrResponseHeaderMap, public ResponseHeaderOrTrailerMap {",
          "657: public:",
          "658:   INLINE_RESP_HEADERS(DEFINE_INLINE_HEADER)",
          "659: };",
          "",
          "---------------"
        ],
        "source/common/http/header_map_impl.cc||source/common/http/header_map_impl.cc": [
          "File: source/common/http/header_map_impl.cc -> source/common/http/header_map_impl.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "184: }",
          "186: #define INLINE_HEADER_STATIC_MAP_ENTRY(name)                                                       \\",
          "188:     return {&h.inline_headers_.name##_, &Headers::get().name};                                     \\",
          "189:   });",
          "203:     return {&h.inline_headers_.Host_, &Headers::get().Host};",
          "204:   });",
          "205: }",
          "209: }",
          "211: uint64_t HeaderMapImpl::appendToHeader(HeaderString& header, absl::string_view data,",
          "212:                                        absl::string_view delimiter) {",
          "213:   if (data.empty()) {",
          "",
          "[Removed Lines]",
          "187:   add(Headers::get().name.get().c_str(), [](HeaderMapImpl& h) -> StaticLookupResponse {            \\",
          "191: HeaderMapImpl::StaticLookupTable::StaticLookupTable() {",
          "192:   ALL_INLINE_HEADERS(INLINE_HEADER_STATIC_MAP_ENTRY)",
          "193: }",
          "195: const HeaderMapImpl::StaticLookupTable& HeaderMapImpl::staticLookupTable() const {",
          "196:   return ConstSingleton<StaticLookupTable>::get();",
          "197: }",
          "199: RequestHeaderMapImpl::RequestHeaderStaticLookupTable::RequestHeaderStaticLookupTable()",
          "200:     : StaticLookupTable() {",
          "202:   add(Headers::get().HostLegacy.get().c_str(), [](HeaderMapImpl& h) -> StaticLookupResponse {",
          "207: const HeaderMapImpl::StaticLookupTable& RequestHeaderMapImpl::staticLookupTable() const {",
          "208:   return ConstSingleton<RequestHeaderStaticLookupTable>::get();",
          "",
          "[Added Lines]",
          "187:   add(Headers::get().name.get().c_str(), [](HeaderMapType& h) -> StaticLookupResponse {            \\",
          "191: template <> HeaderMapImpl::StaticLookupTable<RequestHeaderMapImpl>::StaticLookupTable() {",
          "192:   INLINE_REQ_HEADERS(INLINE_HEADER_STATIC_MAP_ENTRY)",
          "193:   INLINE_REQ_RESP_HEADERS(INLINE_HEADER_STATIC_MAP_ENTRY)",
          "196:   add(Headers::get().HostLegacy.get().c_str(), [](HeaderMapType& h) -> StaticLookupResponse {",
          "201: template <> HeaderMapImpl::StaticLookupTable<ResponseHeaderMapImpl>::StaticLookupTable() {",
          "202:   INLINE_RESP_HEADERS(INLINE_HEADER_STATIC_MAP_ENTRY)",
          "203:   INLINE_REQ_RESP_HEADERS(INLINE_HEADER_STATIC_MAP_ENTRY)",
          "204:   INLINE_RESP_HEADERS_TRAILERS(INLINE_HEADER_STATIC_MAP_ENTRY)",
          "207: template <>",
          "208: HeaderMapImpl::StaticLookupTable<ResponseTrailerMapImpl>::StaticLookupTable(){",
          "209:     INLINE_RESP_HEADERS_TRAILERS(INLINE_HEADER_STATIC_MAP_ENTRY)}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "222:   return data.size() + byte_size;",
          "223: }",
          "227: void HeaderMapImpl::initFromInitList(",
          "229:     const std::initializer_list<std::pair<LowerCaseString, std::string>>& values) {",
          "230:   for (auto& value : values) {",
          "231:     HeaderString key_string;",
          "",
          "[Removed Lines]",
          "225: HeaderMapImpl::HeaderMapImpl() { inline_headers_.clear(); }",
          "228:     HeaderMapImpl& new_header_map,",
          "",
          "[Added Lines]",
          "226:     HeaderMap& new_header_map,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "234:     value_string.setCopy(value.second.c_str(), value.second.size());",
          "235:     new_header_map.addViaMove(std::move(key_string), std::move(value_string));",
          "236:   }",
          "238: }",
          "240: void HeaderMapImpl::updateSize(uint64_t from_size, uint64_t to_size) {",
          "",
          "[Removed Lines]",
          "237:   new_header_map.verifyByteSize();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "250:   cached_byte_size_ -= size;",
          "251: }",
          "254:   header_map.iterate(",
          "255:       [](const HeaderEntry& header, void* context) -> HeaderMap::Iterate {",
          "",
          "[Removed Lines]",
          "253: void HeaderMapImpl::copyFrom(HeaderMapImpl& lhs, const HeaderMap& header_map) {",
          "",
          "[Added Lines]",
          "250: void HeaderMapImpl::copyFrom(HeaderMap& lhs, const HeaderMap& header_map) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "259:         HeaderString value_string;",
          "260:         value_string.setCopy(header.value().getStringView());",
          "264:         return HeaderMap::Iterate::Continue;",
          "265:       },",
          "266:       &lhs);",
          "268: }",
          "270: namespace {",
          "",
          "[Removed Lines]",
          "262:         static_cast<HeaderMapImpl*>(context)->addViaMove(std::move(key_string),",
          "263:                                                          std::move(value_string));",
          "267:   lhs.verifyByteSize();",
          "",
          "[Added Lines]",
          "259:         static_cast<HeaderMap*>(context)->addViaMove(std::move(key_string),",
          "260:                                                      std::move(value_string));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "302: bool HeaderMapImpl::operator!=(const HeaderMap& rhs) const { return !operator==(rhs); }",
          "304: void HeaderMapImpl::insertByKey(HeaderString&& key, HeaderString&& value) {",
          "307:     key.clear();",
          "311:     } else {",
          "312:       const uint64_t added_size =",
          "314:       addSize(added_size);",
          "315:       value.clear();",
          "316:     }",
          "",
          "[Removed Lines]",
          "305:   EntryCb cb = staticLookupTable().find(key.getStringView());",
          "306:   if (cb) {",
          "308:     StaticLookupResponse ref_lookup_response = cb(*this);",
          "309:     if (*ref_lookup_response.entry_ == nullptr) {",
          "310:       maybeCreateInline(ref_lookup_response.entry_, *ref_lookup_response.key_, std::move(value));",
          "313:           appendToHeader((*ref_lookup_response.entry_)->value(), value.getStringView());",
          "",
          "[Added Lines]",
          "301:   auto lookup = staticLookup(key.getStringView());",
          "302:   if (lookup.has_value()) {",
          "304:     if (*lookup.value().entry_ == nullptr) {",
          "305:       maybeCreateInline(lookup.value().entry_, *lookup.value().key_, std::move(value));",
          "308:           appendToHeader((*lookup.value().entry_)->value(), value.getStringView());",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "333:   } else {",
          "334:     insertByKey(std::move(key), std::move(value));",
          "335:   }",
          "337: }",
          "339: void HeaderMapImpl::addReference(const LowerCaseString& key, absl::string_view value) {",
          "340:   HeaderString ref_key(key);",
          "341:   HeaderString ref_value(value);",
          "342:   addViaMove(std::move(ref_key), std::move(ref_value));",
          "344: }",
          "346: void HeaderMapImpl::addReferenceKey(const LowerCaseString& key, uint64_t value) {",
          "",
          "[Removed Lines]",
          "336:   verifyByteSize();",
          "343:   verifyByteSize();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "349:   new_value.setInteger(value);",
          "350:   insertByKey(std::move(ref_key), std::move(new_value));",
          "351:   ASSERT(new_value.empty()); // NOLINT(bugprone-use-after-move)",
          "353: }",
          "355: void HeaderMapImpl::addReferenceKey(const LowerCaseString& key, absl::string_view value) {",
          "",
          "[Removed Lines]",
          "352:   verifyByteSize();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "358:   new_value.setCopy(value);",
          "359:   insertByKey(std::move(ref_key), std::move(new_value));",
          "360:   ASSERT(new_value.empty()); // NOLINT(bugprone-use-after-move)",
          "362: }",
          "364: void HeaderMapImpl::addCopy(const LowerCaseString& key, uint64_t value) {",
          "",
          "[Removed Lines]",
          "361:   verifyByteSize();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "377:   insertByKey(std::move(new_key), std::move(new_value));",
          "378:   ASSERT(new_key.empty());   // NOLINT(bugprone-use-after-move)",
          "379:   ASSERT(new_value.empty()); // NOLINT(bugprone-use-after-move)",
          "381: }",
          "383: void HeaderMapImpl::addCopy(const LowerCaseString& key, absl::string_view value) {",
          "",
          "[Removed Lines]",
          "380:   verifyByteSize();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "394:   insertByKey(std::move(new_key), std::move(new_value));",
          "395:   ASSERT(new_key.empty());   // NOLINT(bugprone-use-after-move)",
          "396:   ASSERT(new_value.empty()); // NOLINT(bugprone-use-after-move)",
          "398: }",
          "400: void HeaderMapImpl::appendCopy(const LowerCaseString& key, absl::string_view value) {",
          "",
          "[Removed Lines]",
          "397:   verifyByteSize();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "406:   } else {",
          "407:     addCopy(key, value);",
          "408:   }",
          "411: }",
          "413: void HeaderMapImpl::setReference(const LowerCaseString& key, absl::string_view value) {",
          "",
          "[Removed Lines]",
          "410:   verifyByteSize();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "415:   HeaderString ref_value(value);",
          "416:   remove(key);",
          "417:   insertByKey(std::move(ref_key), std::move(ref_value));",
          "419: }",
          "421: void HeaderMapImpl::setReferenceKey(const LowerCaseString& key, absl::string_view value) {",
          "",
          "[Removed Lines]",
          "418:   verifyByteSize();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "425:   remove(key);",
          "426:   insertByKey(std::move(ref_key), std::move(new_value));",
          "427:   ASSERT(new_value.empty()); // NOLINT(bugprone-use-after-move)",
          "429: }",
          "431: void HeaderMapImpl::setCopy(const LowerCaseString& key, absl::string_view value) {",
          "",
          "[Removed Lines]",
          "428:   verifyByteSize();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "438:   } else {",
          "439:     addCopy(key, value);",
          "440:   }",
          "442: }",
          "444: uint64_t HeaderMapImpl::byteSize() const { return cached_byte_size_; }",
          "",
          "[Removed Lines]",
          "441:   verifyByteSize();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "492: HeaderMap::Lookup HeaderMapImpl::lookup(const LowerCaseString& key,",
          "493:                                         const HeaderEntry** entry) const {",
          "504:     if (*entry) {",
          "505:       return Lookup::Found;",
          "506:     } else {",
          "",
          "[Removed Lines]",
          "494:   EntryCb cb = staticLookupTable().find(key.get());",
          "495:   if (cb) {",
          "502:     StaticLookupResponse ref_lookup_response = cb(const_cast<HeaderMapImpl&>(*this));",
          "",
          "[Added Lines]",
          "484:   auto lookup = const_cast<HeaderMapImpl*>(this)->staticLookup(key.get());",
          "485:   if (lookup.has_value()) {",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "513: }",
          "515: void HeaderMapImpl::clear() {",
          "517:   headers_.clear();",
          "518:   cached_byte_size_ = 0;",
          "519: }",
          "521: void HeaderMapImpl::remove(const LowerCaseString& key) {",
          "526:   } else {",
          "527:     for (auto i = headers_.begin(); i != headers_.end();) {",
          "528:       if (i->key() == key.get().c_str()) {",
          "",
          "[Removed Lines]",
          "516:   inline_headers_.clear();",
          "522:   EntryCb cb = staticLookupTable().find(key.get());",
          "523:   if (cb) {",
          "524:     StaticLookupResponse ref_lookup_response = cb(*this);",
          "525:     removeInline(ref_lookup_response.entry_);",
          "",
          "[Added Lines]",
          "499:   clearInline();",
          "505:   auto lookup = staticLookup(key.get());",
          "506:   if (lookup.has_value()) {",
          "507:     removeInline(lookup.value().entry_);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "533:       }",
          "534:     }",
          "535:   }",
          "537: }",
          "539: void HeaderMapImpl::removePrefix(const LowerCaseString& prefix) {",
          "",
          "[Removed Lines]",
          "536:   verifyByteSize();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "542:     if (to_remove) {",
          "551:           subtractSize(key_value_size);",
          "553:         }",
          "554:       } else {",
          "555:         subtractSize(entry.key().size() + entry.value().size());",
          "",
          "[Removed Lines]",
          "545:       EntryCb cb = staticLookupTable().find(entry.key().getStringView());",
          "546:       if (cb) {",
          "547:         StaticLookupResponse ref_lookup_response = cb(*this);",
          "548:         if (ref_lookup_response.entry_) {",
          "549:           const uint32_t key_value_size = (*ref_lookup_response.entry_)->key().size() +",
          "550:                                           (*ref_lookup_response.entry_)->value().size();",
          "",
          "[Added Lines]",
          "526:       auto lookup = staticLookup(entry.key().getStringView());",
          "527:       if (lookup.has_value()) {",
          "528:         if (lookup.value().entry_) {",
          "529:           const uint32_t key_value_size =",
          "530:               (*lookup.value().entry_)->key().size() + (*lookup.value().entry_)->value().size();",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "557:     }",
          "558:     return to_remove;",
          "559:   });",
          "561: }",
          "563: void HeaderMapImpl::dumpState(std::ostream& os, int indent_level) const {",
          "",
          "[Removed Lines]",
          "560:   verifyByteSize();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "603: }",
          "605: HeaderMapImpl::HeaderEntryImpl* HeaderMapImpl::getExistingInline(absl::string_view key) {",
          "610:   }",
          "611:   return nullptr;",
          "612: }",
          "",
          "[Removed Lines]",
          "606:   EntryCb cb = staticLookupTable().find(key);",
          "607:   if (cb) {",
          "608:     StaticLookupResponse ref_lookup_response = cb(*this);",
          "609:     return *ref_lookup_response.entry_;",
          "",
          "[Added Lines]",
          "585:   auto lookup = staticLookup(key);",
          "586:   if (lookup.has_value()) {",
          "587:     return *lookup.value().entry_;",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "621:   subtractSize(size_to_subtract);",
          "623:   headers_.erase(entry->entry_);",
          "625: }",
          "627: } // namespace Http",
          "",
          "[Removed Lines]",
          "624:   verifyByteSize();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "source/common/http/header_map_impl.h||source/common/http/header_map_impl.h": [
          "File: source/common/http/header_map_impl.h -> source/common/http/header_map_impl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "25:   void append##name(absl::string_view data, absl::string_view delimiter) override {                \\",
          "26:     HeaderEntry& entry = maybeCreateInline(&inline_headers_.name##_, Headers::get().name);         \\",
          "27:     addSize(HeaderMapImpl::appendToHeader(entry.value(), data, delimiter));                        \\",
          "29:   }                                                                                                \\",
          "30:   void setReference##name(absl::string_view value) override {                                      \\",
          "31:     HeaderEntry& entry = maybeCreateInline(&inline_headers_.name##_, Headers::get().name);         \\",
          "32:     updateSize(entry.value().size(), value.size());                                                \\",
          "33:     entry.value().setReference(value);                                                             \\",
          "35:   }                                                                                                \\",
          "36:   void set##name(absl::string_view value) override {                                               \\",
          "37:     HeaderEntry& entry = maybeCreateInline(&inline_headers_.name##_, Headers::get().name);         \\",
          "38:     updateSize(entry.value().size(), value.size());                                                \\",
          "39:     entry.value().setCopy(value);                                                                  \\",
          "41:   }                                                                                                \\",
          "42:   void set##name(uint64_t value) override {                                                        \\",
          "43:     HeaderEntry& entry = maybeCreateInline(&inline_headers_.name##_, Headers::get().name);         \\",
          "44:     subtractSize(inline_headers_.name##_->value().size());                                         \\",
          "45:     entry.value().setInteger(value);                                                               \\",
          "46:     addSize(inline_headers_.name##_->value().size());                                              \\",
          "48:   }                                                                                                \\",
          "49:   void remove##name() override { removeInline(&inline_headers_.name##_); }",
          "",
          "[Removed Lines]",
          "28:     verifyByteSize();                                                                              \\",
          "34:     verifyByteSize();                                                                              \\",
          "40:     verifyByteSize();                                                                              \\",
          "47:     verifyByteSize();                                                                              \\",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "62: class HeaderMapImpl : public virtual HeaderMap, NonCopyable {",
          "63: public:",
          "68:   static void",
          "70:                    const std::initializer_list<std::pair<LowerCaseString, std::string>>& values);",
          "",
          "[Removed Lines]",
          "64:   HeaderMapImpl();",
          "67:   static void copyFrom(HeaderMapImpl& lhs, const HeaderMap& rhs);",
          "69:   initFromInitList(HeaderMapImpl& new_header_map,",
          "",
          "[Added Lines]",
          "62:   static void copyFrom(HeaderMap& lhs, const HeaderMap& rhs);",
          "64:   initFromInitList(HeaderMap& new_header_map,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "124:     HeaderEntryImpl** entry_;",
          "125:     const LowerCaseString* key_;",
          "126:   };",
          "137:   };",
          "",
          "[Removed Lines]",
          "127:   using EntryCb = StaticLookupResponse (*)(HeaderMapImpl&);",
          "128:   struct StaticLookupTable : public TrieLookupTable<EntryCb> {",
          "129:     StaticLookupTable();",
          "130:   };",
          "131:   virtual const StaticLookupTable& staticLookupTable() const;",
          "133:   struct AllInlineHeaders {",
          "134:     void clear() { memset(this, 0, sizeof(*this)); }",
          "136:     ALL_INLINE_HEADERS(DEFINE_INLINE_HEADER_STRUCT)",
          "",
          "[Added Lines]",
          "126:   template <class T>",
          "127:   struct StaticLookupTable : public TrieLookupTable<StaticLookupResponse (*)(T&)> {",
          "128:     using HeaderMapType = T;",
          "130:     StaticLookupTable();",
          "132:     static absl::optional<StaticLookupResponse> lookup(T& header_map, absl::string_view key) {",
          "133:       auto entry = ConstSingleton<StaticLookupTable>::get().find(key);",
          "134:       if (entry != nullptr) {",
          "135:         return entry(header_map);",
          "136:       } else {",
          "137:         return absl::nullopt;",
          "138:       }",
          "139:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "216:   void updateSize(uint64_t from_size, uint64_t to_size);",
          "217:   void addSize(uint64_t size);",
          "218:   void subtractSize(uint64_t size);",
          "221:   HeaderList headers_;",
          "223:   uint64_t cached_byte_size_ = 0;",
          "228: };",
          "235: class RequestHeaderMapImpl : public HeaderMapImpl, public RequestHeaderMap {",
          "236: protected:",
          "239:   };",
          "241: };",
          "242: class RequestTrailerMapImpl : public HeaderMapImpl, public RequestTrailerMap {};",
          "246: template <class T>",
          "247: std::unique_ptr<T>",
          "",
          "[Removed Lines]",
          "220:   AllInlineHeaders inline_headers_;",
          "224:   ALL_INLINE_HEADERS(DEFINE_INLINE_HEADER_FUNCS)",
          "227:   friend class RequestHeaderMapImpl;",
          "237:   struct RequestHeaderStaticLookupTable : public StaticLookupTable {",
          "238:     RequestHeaderStaticLookupTable();",
          "240:   const StaticLookupTable& staticLookupTable() const override;",
          "243: class ResponseHeaderMapImpl : public HeaderMapImpl, public ResponseHeaderMap {};",
          "244: class ResponseTrailerMapImpl : public HeaderMapImpl, public ResponseTrailerMap {};",
          "",
          "[Added Lines]",
          "222:   virtual absl::optional<StaticLookupResponse> staticLookup(absl::string_view) {",
          "224:     return absl::nullopt;",
          "225:   }",
          "226:   virtual void clearInline() {",
          "228:   }",
          "239: public:",
          "240:   INLINE_REQ_HEADERS(DEFINE_INLINE_HEADER_FUNCS)",
          "241:   INLINE_REQ_RESP_HEADERS(DEFINE_INLINE_HEADER_FUNCS)",
          "249:   struct AllInlineHeaders {",
          "250:     AllInlineHeaders() { clear(); }",
          "251:     void clear() { memset(this, 0, sizeof(*this)); }",
          "253:     INLINE_REQ_HEADERS(DEFINE_INLINE_HEADER_STRUCT)",
          "254:     INLINE_REQ_RESP_HEADERS(DEFINE_INLINE_HEADER_STRUCT)",
          "257:   absl::optional<StaticLookupResponse> staticLookup(absl::string_view key) override {",
          "258:     return StaticLookupTable<RequestHeaderMapImpl>::lookup(*this, key);",
          "259:   }",
          "260:   void clearInline() override { inline_headers_.clear(); }",
          "262:   AllInlineHeaders inline_headers_;",
          "264:   friend class HeaderMapImpl;",
          "269: class ResponseHeaderMapImpl : public HeaderMapImpl, public ResponseHeaderMap {",
          "270: public:",
          "271:   INLINE_RESP_HEADERS(DEFINE_INLINE_HEADER_FUNCS)",
          "272:   INLINE_REQ_RESP_HEADERS(DEFINE_INLINE_HEADER_FUNCS)",
          "273:   INLINE_RESP_HEADERS_TRAILERS(DEFINE_INLINE_HEADER_FUNCS)",
          "275: protected:",
          "281:   struct AllInlineHeaders {",
          "282:     AllInlineHeaders() { clear(); }",
          "283:     void clear() { memset(this, 0, sizeof(*this)); }",
          "285:     INLINE_RESP_HEADERS(DEFINE_INLINE_HEADER_STRUCT)",
          "286:     INLINE_REQ_RESP_HEADERS(DEFINE_INLINE_HEADER_STRUCT)",
          "287:     INLINE_RESP_HEADERS_TRAILERS(DEFINE_INLINE_HEADER_STRUCT)",
          "288:   };",
          "290:   absl::optional<StaticLookupResponse> staticLookup(absl::string_view key) override {",
          "291:     return StaticLookupTable<ResponseHeaderMapImpl>::lookup(*this, key);",
          "292:   }",
          "293:   void clearInline() override { inline_headers_.clear(); }",
          "295:   AllInlineHeaders inline_headers_;",
          "297:   friend class HeaderMapImpl;",
          "298: };",
          "300: class ResponseTrailerMapImpl : public HeaderMapImpl, public ResponseTrailerMap {",
          "301: public:",
          "302:   INLINE_RESP_HEADERS_TRAILERS(DEFINE_INLINE_HEADER_FUNCS)",
          "304: protected:",
          "310:   struct AllInlineHeaders {",
          "311:     AllInlineHeaders() { clear(); }",
          "312:     void clear() { memset(this, 0, sizeof(*this)); }",
          "314:     INLINE_RESP_HEADERS_TRAILERS(DEFINE_INLINE_HEADER_STRUCT)",
          "315:   };",
          "317:   absl::optional<StaticLookupResponse> staticLookup(absl::string_view key) override {",
          "318:     return StaticLookupTable<ResponseTrailerMapImpl>::lookup(*this, key);",
          "319:   }",
          "320:   void clearInline() override { inline_headers_.clear(); }",
          "322:   AllInlineHeaders inline_headers_;",
          "324:   friend class HeaderMapImpl;",
          "325: };",
          "",
          "---------------"
        ],
        "source/common/http/headers.h||source/common/http/headers.h": [
          "File: source/common/http/headers.h -> source/common/http/headers.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "52:   const LowerCaseString Accept{\"accept\"};",
          "53:   const LowerCaseString AcceptEncoding{\"accept-encoding\"};",
          "55:   const LowerCaseString AccessControlRequestMethod{\"access-control-request-method\"};",
          "56:   const LowerCaseString AccessControlAllowOrigin{\"access-control-allow-origin\"};",
          "57:   const LowerCaseString AccessControlAllowHeaders{\"access-control-allow-headers\"};",
          "",
          "[Removed Lines]",
          "54:   const LowerCaseString AccessControlRequestHeaders{\"access-control-request-headers\"};",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "132:   const LowerCaseString HostLegacy{\"host\"};",
          "133:   const LowerCaseString Http2Settings{\"http2-settings\"};",
          "134:   const LowerCaseString KeepAlive{\"keep-alive\"};",
          "136:   const LowerCaseString Location{\"location\"};",
          "137:   const LowerCaseString Method{\":method\"};",
          "138:   const LowerCaseString NoChunks{\":no-chunks\"}; // Illegal pseudo-header used internally.",
          "",
          "[Removed Lines]",
          "135:   const LowerCaseString LastModified{\"last-modified\"};",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "source/common/http/utility.cc||source/common/http/utility.cc": [
          "File: source/common/http/utility.cc -> source/common/http/utility.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "212:   return cookie_value;",
          "213: }",
          "216:   const HeaderEntry* header = headers.Status();",
          "217:   uint64_t response_code;",
          "218:   if (!header || !absl::SimpleAtoi(headers.Status()->value().getStringView(), &response_code)) {",
          "",
          "[Removed Lines]",
          "215: uint64_t Utility::getResponseStatus(const HeaderMap& headers) {",
          "",
          "[Added Lines]",
          "215: uint64_t Utility::getResponseStatus(const ResponseHeaderMap& headers) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "221:   return response_code;",
          "222: }",
          "227:   return (headers.Connection() && headers.Upgrade() &&",
          "",
          "[Removed Lines]",
          "224: bool Utility::isUpgrade(const HeaderMap& headers) {",
          "",
          "[Added Lines]",
          "224: bool Utility::isUpgrade(const RequestOrResponseHeaderMap& headers) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "229:                                            Http::Headers::get().ConnectionValues.Upgrade.c_str()));",
          "230: }",
          "233:   return headers.Method() &&",
          "234:          headers.Method()->value().getStringView() == Http::Headers::get().MethodValues.Connect &&",
          "235:          headers.Protocol() && !headers.Protocol()->value().empty();",
          "",
          "[Removed Lines]",
          "232: bool Utility::isH2UpgradeRequest(const HeaderMap& headers) {",
          "",
          "[Added Lines]",
          "232: bool Utility::isH2UpgradeRequest(const RequestHeaderMap& headers) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "393:   }",
          "394: }",
          "397:   static const size_t MAX_ALLOWED_NOMINATED_HEADERS = 10;",
          "398:   static const size_t MAX_ALLOWED_TE_VALUE_SIZE = 256;",
          "",
          "[Removed Lines]",
          "396: bool Utility::sanitizeConnectionHeader(Http::HeaderMap& headers) {",
          "",
          "[Added Lines]",
          "396: bool Utility::sanitizeConnectionHeader(Http::RequestHeaderMap& headers) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "602:   NOT_REACHED_GCOVR_EXCL_LINE;",
          "603: }",
          "606:   ASSERT(Utility::isUpgrade(headers));",
          "608:   const HeaderString& upgrade = headers.Upgrade()->value();",
          "",
          "[Removed Lines]",
          "605: void Utility::transformUpgradeRequestFromH1toH2(HeaderMap& headers) {",
          "",
          "[Added Lines]",
          "605: void Utility::transformUpgradeRequestFromH1toH2(RequestHeaderMap& headers) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "618:   }",
          "619: }",
          "622:   if (getResponseStatus(headers) == 101) {",
          "623:     headers.setStatus(200);",
          "624:   }",
          "",
          "[Removed Lines]",
          "621: void Utility::transformUpgradeResponseFromH1toH2(HeaderMap& headers) {",
          "",
          "[Added Lines]",
          "621: void Utility::transformUpgradeResponseFromH1toH2(ResponseHeaderMap& headers) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "630:   }",
          "631: }",
          "634:   ASSERT(Utility::isH2UpgradeRequest(headers));",
          "636:   const HeaderString& protocol = headers.Protocol()->value();",
          "",
          "[Removed Lines]",
          "633: void Utility::transformUpgradeRequestFromH2toH1(HeaderMap& headers) {",
          "",
          "[Added Lines]",
          "633: void Utility::transformUpgradeRequestFromH2toH1(RequestHeaderMap& headers) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "640:   headers.removeProtocol();",
          "641: }",
          "644:   if (getResponseStatus(headers) == 200) {",
          "645:     headers.setUpgrade(upgrade);",
          "646:     headers.setReferenceConnection(Http::Headers::get().ConnectionValues.Upgrade);",
          "",
          "[Removed Lines]",
          "643: void Utility::transformUpgradeResponseFromH2toH1(HeaderMap& headers, absl::string_view upgrade) {",
          "",
          "[Added Lines]",
          "643: void Utility::transformUpgradeResponseFromH2toH1(ResponseHeaderMap& headers,",
          "644:                                                  absl::string_view upgrade) {",
          "",
          "---------------"
        ],
        "source/common/http/utility.h||source/common/http/utility.h": [
          "File: source/common/http/utility.h -> source/common/http/utility.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "143: uint64_t getResponseStatus(const HeaderMap& headers);",
          "",
          "[Added Lines]",
          "143: uint64_t getResponseStatus(const ResponseHeaderMap& headers);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "151: bool isUpgrade(const HeaderMap& headers);",
          "156: bool isH2UpgradeRequest(const HeaderMap& headers);",
          "",
          "[Added Lines]",
          "151: bool isUpgrade(const RequestOrResponseHeaderMap& headers);",
          "156: bool isH2UpgradeRequest(const RequestHeaderMap& headers);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "241: bool sanitizeConnectionHeader(Http::HeaderMap& headers);",
          "",
          "[Added Lines]",
          "241: bool sanitizeConnectionHeader(Http::RequestHeaderMap& headers);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "281: void transformUpgradeRequestFromH1toH2(HeaderMap& headers);",
          "288: void transformUpgradeResponseFromH1toH2(HeaderMap& headers);",
          "295: void transformUpgradeRequestFromH2toH1(HeaderMap& headers);",
          "302: void transformUpgradeResponseFromH2toH1(HeaderMap& headers, absl::string_view upgrade);",
          "",
          "[Added Lines]",
          "281: void transformUpgradeRequestFromH1toH2(RequestHeaderMap& headers);",
          "288: void transformUpgradeResponseFromH1toH2(ResponseHeaderMap& headers);",
          "295: void transformUpgradeRequestFromH2toH1(RequestHeaderMap& headers);",
          "302: void transformUpgradeResponseFromH2toH1(ResponseHeaderMap& headers, absl::string_view upgrade);",
          "",
          "---------------"
        ],
        "test/common/http/header_map_impl_test.cc||test/common/http/header_map_impl_test.cc": [
          "File: test/common/http/header_map_impl_test.cc -> test/common/http/header_map_impl_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "14: namespace Envoy {",
          "15: namespace Http {",
          "22: TEST(HeaderStringTest, All) {",
          "24:   {",
          "",
          "[Removed Lines]",
          "17: class VerifiedHeaderMapImpl : public HeaderMapImpl {",
          "18: public:",
          "19:   void verifyByteSize() override { verifyByteSizeInternalForTest(); }",
          "20: };",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "343:   }",
          "344: }",
          "346: TEST(HeaderMapImplTest, InlineInsert) {",
          "348:   EXPECT_TRUE(headers.empty());",
          "349:   EXPECT_EQ(0, headers.size());",
          "350:   EXPECT_EQ(nullptr, headers.Host());",
          "",
          "[Removed Lines]",
          "347:   VerifiedHeaderMapImpl headers;",
          "",
          "[Added Lines]",
          "341: #define TEST_INLINE_HEADER_FUNCS(name)                                                             \\",
          "342:   header_map.addCopy(Headers::get().name, #name);                                                  \\",
          "343:   EXPECT_EQ(header_map.name()->value().getStringView(), #name);                                    \\",
          "344:   header_map.remove##name();                                                                       \\",
          "345:   EXPECT_EQ(nullptr, header_map.name());                                                           \\",
          "346:   header_map.set##name(#name);                                                                     \\",
          "347:   EXPECT_EQ(header_map.get(Headers::get().name)->value().getStringView(), #name);",
          "350: TEST(HeaderMapImplTest, AllInlineHeaders) {",
          "351:   {",
          "352:     RequestHeaderMapImpl header_map;",
          "353:     INLINE_REQ_HEADERS(TEST_INLINE_HEADER_FUNCS)",
          "354:     INLINE_REQ_RESP_HEADERS(TEST_INLINE_HEADER_FUNCS)",
          "355:   }",
          "356:   {",
          "358:   } {",
          "359:     ResponseHeaderMapImpl header_map;",
          "360:     INLINE_RESP_HEADERS(TEST_INLINE_HEADER_FUNCS)",
          "361:     INLINE_REQ_RESP_HEADERS(TEST_INLINE_HEADER_FUNCS)",
          "362:     INLINE_RESP_HEADERS_TRAILERS(TEST_INLINE_HEADER_FUNCS)",
          "363:   }",
          "364:   {",
          "365:     ResponseTrailerMapImpl header_map;",
          "366:     INLINE_RESP_HEADERS_TRAILERS(TEST_INLINE_HEADER_FUNCS)",
          "367:   }",
          "368: }",
          "371:   TestRequestHeaderMapImpl headers;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "359: TEST(HeaderMapImplTest, InlineAppend) {",
          "360:   {",
          "363:     headers.setVia(\"\");",
          "364:     headers.appendVia(\"1.0 fred\", \",\");",
          "",
          "[Removed Lines]",
          "361:     VerifiedHeaderMapImpl headers;",
          "",
          "[Added Lines]",
          "385:     TestRequestHeaderMapImpl headers;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "368:   }",
          "369:   {",
          "372:     headers.appendVia(\"1.0 fred\", \",\");",
          "373:     EXPECT_EQ(headers.Via()->value().getStringView(), \"1.0 fred\");",
          "374:     headers.appendVia(\"1.1 nowhere.com\", \",\");",
          "",
          "[Removed Lines]",
          "371:     VerifiedHeaderMapImpl headers;",
          "",
          "[Added Lines]",
          "395:     TestRequestHeaderMapImpl headers;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "376:   }",
          "377:   {",
          "380:     headers.setVia(\"\");",
          "381:     headers.appendVia(\"1.0 fred\", \", \");",
          "382:     EXPECT_EQ(headers.Via()->value().getStringView(), \"1.0 fred\");",
          "",
          "[Removed Lines]",
          "379:     VerifiedHeaderMapImpl headers;",
          "",
          "[Added Lines]",
          "403:     TestRequestHeaderMapImpl headers;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "385:   }",
          "386:   {",
          "389:     headers.appendVia(\"1.0 fred\", \",\");",
          "390:     headers.appendVia(\"1.1 nowhere.com\", \",\");",
          "391:     EXPECT_EQ(headers.Via()->value().getStringView(), \"1.0 fred,1.1 nowhere.com\");",
          "",
          "[Removed Lines]",
          "388:     VerifiedHeaderMapImpl headers;",
          "",
          "[Added Lines]",
          "412:     TestRequestHeaderMapImpl headers;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "394:   }",
          "395:   {",
          "398:     headers.setGrpcTimeout(42);",
          "399:     EXPECT_EQ(headers.GrpcTimeout()->value().getStringView(), \"42\");",
          "400:     headers.appendGrpcTimeout(\"s\", \"\");",
          "",
          "[Removed Lines]",
          "397:     VerifiedHeaderMapImpl headers;",
          "",
          "[Added Lines]",
          "421:     TestRequestHeaderMapImpl headers;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "403: }",
          "405: TEST(HeaderMapImplTest, MoveIntoInline) {",
          "407:   HeaderString key;",
          "408:   key.setCopy(Headers::get().CacheControl.get());",
          "409:   HeaderString value;",
          "",
          "[Removed Lines]",
          "406:   VerifiedHeaderMapImpl headers;",
          "",
          "[Added Lines]",
          "430:   TestRequestHeaderMapImpl headers;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "422: }",
          "424: TEST(HeaderMapImplTest, Remove) {",
          "428:   LowerCaseString static_key(\"hello\");",
          "",
          "[Removed Lines]",
          "425:   VerifiedHeaderMapImpl headers;",
          "",
          "[Added Lines]",
          "449:   TestRequestHeaderMapImpl headers;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "467:   LowerCaseString key2 = LowerCaseString(\" x-prefix-foo\");",
          "468:   LowerCaseString key4 = LowerCaseString(\"y-x-prefix-foo\");",
          "471:   headers.addReference(key1, \"value\");",
          "472:   headers.addReference(key2, \"value\");",
          "473:   headers.addReference(key3, \"value\");",
          "",
          "[Removed Lines]",
          "470:   VerifiedHeaderMapImpl headers;",
          "",
          "[Added Lines]",
          "494:   TestRequestHeaderMapImpl headers;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "497: }",
          "499: TEST(HeaderMapImplTest, SetRemovesAllValues) {",
          "502:   LowerCaseString key1(\"hello\");",
          "503:   LowerCaseString key2(\"olleh\");",
          "",
          "[Removed Lines]",
          "500:   VerifiedHeaderMapImpl headers;",
          "",
          "[Added Lines]",
          "524:   TestHeaderMapImpl headers;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "554: TEST(HeaderMapImplTest, DoubleInlineAdd) {",
          "555:   {",
          "557:     const std::string foo(\"foo\");",
          "558:     const std::string bar(\"bar\");",
          "559:     headers.addReference(Headers::get().ContentLength, foo);",
          "",
          "[Removed Lines]",
          "556:     VerifiedHeaderMapImpl headers;",
          "",
          "[Added Lines]",
          "580:     TestRequestHeaderMapImpl headers;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "562:     EXPECT_EQ(1UL, headers.size());",
          "563:   }",
          "564:   {",
          "566:     headers.addReferenceKey(Headers::get().ContentLength, \"foo\");",
          "567:     headers.addReferenceKey(Headers::get().ContentLength, \"bar\");",
          "568:     EXPECT_EQ(\"foo,bar\", headers.ContentLength()->value().getStringView());",
          "569:     EXPECT_EQ(1UL, headers.size());",
          "570:   }",
          "571:   {",
          "573:     headers.addReferenceKey(Headers::get().ContentLength, 5);",
          "574:     headers.addReferenceKey(Headers::get().ContentLength, 6);",
          "575:     EXPECT_EQ(\"5,6\", headers.ContentLength()->value().getStringView());",
          "576:     EXPECT_EQ(1UL, headers.size());",
          "577:   }",
          "578:   {",
          "580:     const std::string foo(\"foo\");",
          "581:     headers.addReference(Headers::get().ContentLength, foo);",
          "582:     headers.addReferenceKey(Headers::get().ContentLength, 6);",
          "",
          "[Removed Lines]",
          "565:     VerifiedHeaderMapImpl headers;",
          "572:     VerifiedHeaderMapImpl headers;",
          "579:     VerifiedHeaderMapImpl headers;",
          "",
          "[Added Lines]",
          "589:     TestRequestHeaderMapImpl headers;",
          "596:     TestRequestHeaderMapImpl headers;",
          "603:     TestRequestHeaderMapImpl headers;",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "590: TEST(HeaderMapImplTest, DoubleCookieAdd) {",
          "592:   const std::string foo(\"foo\");",
          "593:   const std::string bar(\"bar\");",
          "594:   const LowerCaseString& set_cookie = Http::Headers::get().SetCookie;",
          "",
          "[Removed Lines]",
          "591:   VerifiedHeaderMapImpl headers;",
          "",
          "[Added Lines]",
          "615:   TestHeaderMapImpl headers;",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "604: }",
          "606: TEST(HeaderMapImplTest, DoubleInlineSet) {",
          "608:   headers.setReferenceKey(Headers::get().ContentType, \"blah\");",
          "609:   headers.setReferenceKey(Headers::get().ContentType, \"text/html\");",
          "610:   EXPECT_EQ(\"text/html\", headers.ContentType()->value().getStringView());",
          "",
          "[Removed Lines]",
          "607:   VerifiedHeaderMapImpl headers;",
          "",
          "[Added Lines]",
          "631:   TestRequestHeaderMapImpl headers;",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "612: }",
          "614: TEST(HeaderMapImplTest, AddReferenceKey) {",
          "616:   LowerCaseString foo(\"hello\");",
          "617:   headers.addReferenceKey(foo, \"world\");",
          "618:   EXPECT_NE(\"world\", headers.get(foo)->value().getStringView().data());",
          "",
          "[Removed Lines]",
          "615:   VerifiedHeaderMapImpl headers;",
          "",
          "[Added Lines]",
          "639:   TestHeaderMapImpl headers;",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "620: }",
          "622: TEST(HeaderMapImplTest, SetReferenceKey) {",
          "624:   LowerCaseString foo(\"hello\");",
          "625:   headers.setReferenceKey(foo, \"world\");",
          "626:   EXPECT_NE(\"world\", headers.get(foo)->value().getStringView().data());",
          "",
          "[Removed Lines]",
          "623:   VerifiedHeaderMapImpl headers;",
          "",
          "[Added Lines]",
          "647:   TestHeaderMapImpl headers;",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "632: }",
          "634: TEST(HeaderMapImplTest, SetCopy) {",
          "636:   LowerCaseString foo(\"hello\");",
          "637:   headers.setCopy(foo, \"world\");",
          "638:   EXPECT_EQ(\"world\", headers.get(foo)->value().getStringView());",
          "",
          "[Removed Lines]",
          "635:   VerifiedHeaderMapImpl headers;",
          "",
          "[Added Lines]",
          "659:   TestRequestHeaderMapImpl headers;",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "684: }",
          "686: TEST(HeaderMapImplTest, AddCopy) {",
          "690:   std::unique_ptr<LowerCaseString> lcKeyPtr(new LowerCaseString(\"hello\"));",
          "",
          "[Removed Lines]",
          "687:   VerifiedHeaderMapImpl headers;",
          "",
          "[Added Lines]",
          "711:   TestRequestHeaderMapImpl headers;",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "755: }",
          "757: TEST(HeaderMapImplTest, Equality) {",
          "760:   EXPECT_EQ(headers1, headers2);",
          "762:   headers1.addCopy(LowerCaseString(\"hello\"), \"world\");",
          "",
          "[Removed Lines]",
          "758:   VerifiedHeaderMapImpl headers1;",
          "759:   VerifiedHeaderMapImpl headers2;",
          "",
          "[Added Lines]",
          "782:   TestHeaderMapImpl headers1;",
          "783:   TestHeaderMapImpl headers2;",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "767: }",
          "769: TEST(HeaderMapImplTest, LargeCharInHeader) {",
          "771:   LowerCaseString static_key(\"\\x90hello\");",
          "772:   std::string ref_value(\"value\");",
          "773:   headers.addReference(static_key, ref_value);",
          "",
          "[Removed Lines]",
          "770:   VerifiedHeaderMapImpl headers;",
          "",
          "[Added Lines]",
          "794:   TestHeaderMapImpl headers;",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "775: }",
          "777: TEST(HeaderMapImplTest, Iterate) {",
          "779:   headers.addCopy(LowerCaseString(\"hello\"), \"world\");",
          "780:   headers.addCopy(LowerCaseString(\"foo\"), \"xxx\");",
          "781:   headers.addCopy(LowerCaseString(\"world\"), \"hello\");",
          "",
          "[Removed Lines]",
          "778:   VerifiedHeaderMapImpl headers;",
          "",
          "[Added Lines]",
          "802:   TestHeaderMapImpl headers;",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "799: }",
          "801: TEST(HeaderMapImplTest, IterateReverse) {",
          "803:   headers.addCopy(LowerCaseString(\"hello\"), \"world\");",
          "804:   headers.addCopy(LowerCaseString(\"foo\"), \"bar\");",
          "805:   LowerCaseString world_key(\"world\");",
          "",
          "[Removed Lines]",
          "802:   VerifiedHeaderMapImpl headers;",
          "",
          "[Added Lines]",
          "826:   TestHeaderMapImpl headers;",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "826: }",
          "828: TEST(HeaderMapImplTest, Lookup) {",
          "830:   headers.addCopy(LowerCaseString(\"hello\"), \"world\");",
          "831:   headers.setContentLength(5);",
          "",
          "[Removed Lines]",
          "829:   VerifiedHeaderMapImpl headers;",
          "",
          "[Added Lines]",
          "853:   TestRequestHeaderMapImpl headers;",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "855: TEST(HeaderMapImplTest, Get) {",
          "856:   {",
          "858:         {{Headers::get().Path, \"/\"}, {LowerCaseString(\"hello\"), \"world\"}});",
          "859:     EXPECT_EQ(\"/\", headers->get(LowerCaseString(\":path\"))->value().getStringView());",
          "860:     EXPECT_EQ(\"world\", headers->get(LowerCaseString(\"hello\"))->value().getStringView());",
          "",
          "[Removed Lines]",
          "857:     auto headers = createHeaderMap<VerifiedHeaderMapImpl>(",
          "",
          "[Added Lines]",
          "881:     auto headers = createHeaderMap<TestHeaderMapImpl>(",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "862:   }",
          "864:   {",
          "866:         {{Headers::get().Path, \"/\"}, {LowerCaseString(\"hello\"), \"world\"}});",
          "869:     EXPECT_EQ(\"/new_path\", headers->get(LowerCaseString(\":path\"))->value().getStringView());",
          "871:     headers->setReferenceKey(foo, \"world2\");",
          "872:     EXPECT_EQ(\"world2\", headers->get(foo)->value().getStringView());",
          "873:     EXPECT_EQ(nullptr, headers->get(LowerCaseString(\"foo\")));",
          "",
          "[Removed Lines]",
          "865:     auto headers = createHeaderMap<VerifiedHeaderMapImpl>(",
          "868:     headers->setReferenceKey(LowerCaseString(\":path\"), \"/new_path\");",
          "870:     LowerCaseString foo(\"hello\");",
          "",
          "[Added Lines]",
          "889:     auto headers = createHeaderMap<TestHeaderMapImpl>(",
          "892:     const LowerCaseString path(\":path\");",
          "893:     headers->setReferenceKey(path, \"/new_path\");",
          "895:     const LowerCaseString foo(\"hello\");",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "877: TEST(HeaderMapImplTest, TestAppendHeader) {",
          "879:   {",
          "881:     LowerCaseString foo(\"key1\");",
          "882:     headers.addCopy(foo, \"some;\");",
          "883:     headers.appendCopy(foo, \"test\");",
          "",
          "[Removed Lines]",
          "880:     VerifiedHeaderMapImpl headers;",
          "",
          "[Added Lines]",
          "905:     TestHeaderMapImpl headers;",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "888:   {",
          "890:     LowerCaseString key2(\"key2\");",
          "891:     headers.appendCopy(key2, \"my tag data\");",
          "892:     EXPECT_EQ(headers.get(key2)->value().getStringView(), \"my tag data\");",
          "",
          "[Removed Lines]",
          "889:     VerifiedHeaderMapImpl headers;",
          "",
          "[Added Lines]",
          "914:     TestHeaderMapImpl headers;",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "896:   {",
          "898:     LowerCaseString key3(\"key3\");",
          "899:     headers.addCopy(key3, \"empty\");",
          "900:     headers.appendCopy(key3, \"\");",
          "",
          "[Removed Lines]",
          "897:     VerifiedHeaderMapImpl headers;",
          "",
          "[Added Lines]",
          "922:     TestHeaderMapImpl headers;",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "905:   {",
          "907:     const std::string empty;",
          "908:     headers.setPath(empty);",
          "",
          "[Removed Lines]",
          "906:     VerifiedHeaderMapImpl headers;",
          "",
          "[Added Lines]",
          "931:     TestRequestHeaderMapImpl headers;",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "914:   }",
          "916:   {",
          "918:     headers.addCopy(Headers::get().Via, \"1.0 fred\");",
          "919:     EXPECT_EQ(headers.Via()->value().getStringView(), \"1.0 fred\");",
          "920:     headers.appendCopy(Headers::get().Via, \"1.1 p.example.net\");",
          "",
          "[Removed Lines]",
          "917:     VerifiedHeaderMapImpl headers;",
          "",
          "[Added Lines]",
          "942:     TestRequestHeaderMapImpl headers;",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "925:   }",
          "926: }",
          "929:   HeaderString value;",
          "930:   value.setCopy(\"some;\");",
          "931:   EXPECT_DEATH_LOG_TO_STDERR(value.append(nullptr, std::numeric_limits<uint32_t>::max()),",
          "",
          "[Removed Lines]",
          "928: TEST(HeaderMapImplDeathTest, TestHeaderLengthChecks) {",
          "",
          "[Added Lines]",
          "953: TEST(TestHeaderMapImplDeathTest, TestHeaderLengthChecks) {",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "945:   {",
          "946:     LowerCaseString foo(\"hello\");",
          "948:     EXPECT_EQ(0UL, headers.size());",
          "949:     EXPECT_TRUE(headers.empty());",
          "",
          "[Removed Lines]",
          "947:     Http::VerifiedHeaderMapImpl headers{};",
          "",
          "[Added Lines]",
          "972:     Http::TestHeaderMapImpl headers{};",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "1100:   {",
          "1108:     InSequence seq;",
          "1109:     EXPECT_CALL(cb, Call(\":method\", \"GET\"));",
          "",
          "[Removed Lines]",
          "1101:     auto headers =",
          "1102:         createHeaderMap<VerifiedHeaderMapImpl>({{Headers::get().ContentType, \"text/plain\"},",
          "1103:                                                 {Headers::get().Method, \"GET\"},",
          "1104:                                                 {Headers::get().Path, \"/\"},",
          "1105:                                                 {LowerCaseString(\"hello\"), \"world\"},",
          "1106:                                                 {Headers::get().Host, \"host\"}});",
          "",
          "[Added Lines]",
          "1126:     auto headers = createHeaderMap<TestHeaderMapImpl>({{Headers::get().ContentType, \"text/plain\"},",
          "1127:                                                        {Headers::get().Method, \"GET\"},",
          "1128:                                                        {Headers::get().Path, \"/\"},",
          "1129:                                                        {LowerCaseString(\"hello\"), \"world\"},",
          "1130:                                                        {Headers::get().Host, \"host\"}});",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "1125:   {",
          "1133:     InSequence seq;",
          "1134:     EXPECT_CALL(cb, Call(\":path\", \"/\"));",
          "",
          "[Removed Lines]",
          "1126:     auto headers =",
          "1127:         createHeaderMap<VerifiedHeaderMapImpl>({{Headers::get().Path, \"/\"},",
          "1128:                                                 {Headers::get().ContentType, \"text/plain\"},",
          "1129:                                                 {Headers::get().Method, \"GET\"},",
          "1130:                                                 {LowerCaseString(\"hello\"), \"world\"},",
          "1131:                                                 {Headers::get().Host, \"host\"}});",
          "",
          "[Added Lines]",
          "1150:     auto headers = createHeaderMap<TestHeaderMapImpl>({{Headers::get().Path, \"/\"},",
          "1151:                                                        {Headers::get().ContentType, \"text/plain\"},",
          "1152:                                                        {Headers::get().Method, \"GET\"},",
          "1153:                                                        {LowerCaseString(\"hello\"), \"world\"},",
          "1154:                                                        {Headers::get().Host, \"host\"}});",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "1183: }",
          "1185: TEST(HeaderMapImplTest, TestInlineHeaderAdd) {",
          "1187:   foo.addCopy(LowerCaseString(\":path\"), \"GET\");",
          "1188:   EXPECT_EQ(foo.size(), 1);",
          "1189:   EXPECT_TRUE(foo.Path() != nullptr);",
          "1190: }",
          "1192: TEST(HeaderMapImplTest, ClearHeaderMap) {",
          "1194:   LowerCaseString static_key(\"hello\");",
          "1195:   std::string ref_value(\"value\");",
          "",
          "[Removed Lines]",
          "1186:   VerifiedHeaderMapImpl foo;",
          "1193:   VerifiedHeaderMapImpl headers;",
          "",
          "[Added Lines]",
          "1209:   TestRequestHeaderMapImpl foo;",
          "1216:   TestRequestHeaderMapImpl headers;",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "1234: TEST(HeaderMapImplTest, InlineHeaderByteSize) {",
          "1235:   {",
          "1237:     std::string foo = \"foo\";",
          "1238:     headers.setHost(foo);",
          "1239:     EXPECT_EQ(headers.byteSize(), 13);",
          "1240:   }",
          "1241:   {",
          "1244:     std::string foo = \"foo\";",
          "1245:     headers.setHost(foo);",
          "1246:     std::string big_foo = \"big_foo\";",
          "",
          "[Removed Lines]",
          "1236:     VerifiedHeaderMapImpl headers;",
          "1243:     VerifiedHeaderMapImpl headers;",
          "",
          "[Added Lines]",
          "1259:     TestRequestHeaderMapImpl headers;",
          "1266:     TestRequestHeaderMapImpl headers;",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "1249:   }",
          "1250:   {",
          "1253:     std::string foo = \"foo\";",
          "1254:     headers.setHost(foo);",
          "1255:     std::string big_foo = \"big_foo\";",
          "",
          "[Removed Lines]",
          "1252:     VerifiedHeaderMapImpl headers;",
          "",
          "[Added Lines]",
          "1275:     TestRequestHeaderMapImpl headers;",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "1260:   }",
          "1261:   {",
          "1264:     uint64_t status = 200;",
          "1265:     headers.setStatus(status);",
          "1266:     EXPECT_EQ(headers.byteSize(), 10);",
          "",
          "[Removed Lines]",
          "1263:     VerifiedHeaderMapImpl headers;",
          "",
          "[Added Lines]",
          "1286:     TestResponseHeaderMapImpl headers;",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "1272:   }",
          "1273:   {",
          "1276:     uint64_t status = 200;",
          "1277:     headers.setStatus(status);",
          "1278:     EXPECT_EQ(headers.byteSize(), 10);",
          "",
          "[Removed Lines]",
          "1275:     VerifiedHeaderMapImpl headers;",
          "",
          "[Added Lines]",
          "1298:     TestResponseHeaderMapImpl headers;",
          "",
          "---------------"
        ],
        "test/extensions/filters/http/ext_authz/ext_authz_test.cc||test/extensions/filters/http/ext_authz/ext_authz_test.cc": [
          "File: test/extensions/filters/http/ext_authz/ext_authz_test.cc -> test/extensions/filters/http/ext_authz/ext_authz_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "1244:                          {Http::LowerCaseString{\"bar\"}, \"foo\"},",
          "1245:                          {Http::LowerCaseString{\"set-cookie\"}, \"cookie1=value\"},",
          "1246:                          {Http::LowerCaseString{\"set-cookie\"}, \"cookie2=value\"},",
          "1249:   Filters::Common::ExtAuthz::ResponsePtr response_ptr =",
          "1250:       std::make_unique<Filters::Common::ExtAuthz::Response>(response);",
          "",
          "[Removed Lines]",
          "1247:                          {Http::LowerCaseString{\"accept-encoding\"}, \"gzip\"},",
          "1248:                          {Http::LowerCaseString{\"accept-encoding\"}, \"deflate\"}};",
          "",
          "[Added Lines]",
          "1247:                          {Http::LowerCaseString{\"accept-encoding\"}, \"gzip,deflate\"}};",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1265:                                                    {\"bar\", \"foo\"},",
          "1266:                                                    {\"set-cookie\", \"cookie1=value\"},",
          "1267:                                                    {\"set-cookie\", \"cookie2=value\"},",
          "1270:   Http::HeaderMap* saved_headers;",
          "1271:   EXPECT_CALL(filter_callbacks_, encodeHeaders_(HeaderMapEqualRef(&response_headers), false))",
          "1272:       .WillOnce(Invoke([&](Http::HeaderMap& headers, bool) {",
          "",
          "[Removed Lines]",
          "1268:                                                    {\"accept-encoding\", \"gzip\"},",
          "1269:                                                    {\"accept-encoding\", \"deflate\"}};",
          "",
          "[Added Lines]",
          "1267:                                                    {\"accept-encoding\", \"gzip,deflate\"}};",
          "",
          "---------------"
        ],
        "test/integration/http_integration.cc||test/integration/http_integration.cc": [
          "File: test/integration/http_integration.cc -> test/integration/http_integration.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "1022:             max_request_headers_count_);",
          "1023:       });",
          "1028:   for (int i = 0; i < 20000; i++) {",
          "1030:   }",
          "1031:   initialize();",
          "1033:   codec_client_ = makeHttpConnection(lookupPort(\"http\"));",
          "1035:   auto response =",
          "1038:   EXPECT_TRUE(response->complete());",
          "1039:   EXPECT_EQ(\"200\", response->headers().Status()->value().getStringView());",
          "",
          "[Removed Lines]",
          "1025:   Http::TestRequestHeaderMapImpl big_headers{",
          "1026:       {\":method\", \"GET\"}, {\":path\", \"/test/long/url\"}, {\":scheme\", \"http\"}, {\":authority\", \"host\"}};",
          "1029:     big_headers.addCopy(Http::LowerCaseString(std::to_string(i)), std::string(0, 'a'));",
          "1036:       sendRequestAndWaitForResponse(big_headers, 0, default_response_headers_, 0, 0, time);",
          "",
          "[Added Lines]",
          "1025:   auto big_headers = Http::createHeaderMap<Http::RequestHeaderMapImpl>(",
          "1026:       {{Http::Headers::get().Method, \"GET\"},",
          "1027:        {Http::Headers::get().Path, \"/test/long/url\"},",
          "1028:        {Http::Headers::get().Scheme, \"http\"},",
          "1029:        {Http::Headers::get().Host, \"host\"}});",
          "1032:     big_headers->addCopy(Http::LowerCaseString(std::to_string(i)), std::string(0, 'a'));",
          "1039:       sendRequestAndWaitForResponse(*big_headers, 0, default_response_headers_, 0, 0, time);",
          "",
          "---------------"
        ],
        "test/mocks/http/stream_decoder.cc||test/mocks/http/stream_decoder.cc": [
          "File: test/mocks/http/stream_decoder.cc -> test/mocks/http/stream_decoder.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: MockRequestDecoder::MockRequestDecoder() {",
          "13:   ON_CALL(*this, decodeHeaders_(_, _)).WillByDefault(Invoke([](RequestHeaderMapPtr& headers, bool) {",
          "20:     ASSERT(headers->Method() != nullptr);",
          "",
          "[Removed Lines]",
          "17:     ASSERT(headers->Status() == nullptr);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "25: MockResponseDecoder::MockResponseDecoder() {",
          "26:   ON_CALL(*this, decodeHeaders_(_, _))",
          "36: }",
          "37: MockResponseDecoder::~MockResponseDecoder() = default;",
          "",
          "[Removed Lines]",
          "27:       .WillByDefault(Invoke([](ResponseHeaderMapPtr& headers, bool) {",
          "31:         ASSERT(headers->Status() != nullptr);",
          "32:         ASSERT(headers->Path() == nullptr);",
          "33:         ASSERT(headers->Method() == nullptr);",
          "34:         ASSERT(headers->Host() == nullptr);",
          "35:       }));",
          "",
          "[Added Lines]",
          "23:       .WillByDefault(Invoke(",
          "24:           [](ResponseHeaderMapPtr& headers, bool) { ASSERT(headers->Status() != nullptr); }));",
          "",
          "---------------"
        ],
        "test/mocks/http/stream_encoder.cc||test/mocks/http/stream_encoder.cc": [
          "File: test/mocks/http/stream_encoder.cc -> test/mocks/http/stream_encoder.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "15: MockRequestEncoder::MockRequestEncoder() {",
          "16:   ON_CALL(*this, encodeHeaders(_, _))",
          "17:       .WillByDefault(Invoke([](const RequestHeaderMap& headers, bool) {",
          "24:         ASSERT(headers.Method() != nullptr);",
          "",
          "[Removed Lines]",
          "21:         ASSERT(headers.Status() == nullptr);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "30:   ON_CALL(*this, encodeHeaders(_, _))",
          "31:       .WillByDefault(Invoke([](const ResponseHeaderMap& headers, bool) {",
          "35:         ASSERT(headers.Status() != nullptr);",
          "39:       }));",
          "40: }",
          "41: MockResponseEncoder::~MockResponseEncoder() = default;",
          "",
          "[Removed Lines]",
          "36:         ASSERT(headers.Path() == nullptr);",
          "37:         ASSERT(headers.Method() == nullptr);",
          "38:         ASSERT(headers.Host() == nullptr);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/test_common/utility.h||test/test_common/utility.h": [
          "File: test/test_common/utility.h -> test/test_common/utility.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "628:   const HeaderEntry* name() const override { return header_map_.name(); }                          \\",
          "629:   void append##name(absl::string_view data, absl::string_view delimiter) override {                \\",
          "630:     header_map_.append##name(data, delimiter);                                                     \\",
          "631:   }                                                                                                \\",
          "632:   void setReference##name(absl::string_view value) override {                                      \\",
          "633:     header_map_.setReference##name(value);                                                         \\",
          "634:   }                                                                                                \\",
          "",
          "[Removed Lines]",
          "635:   void set##name(absl::string_view value) override { header_map_.set##name(value); }               \\",
          "636:   void set##name(uint64_t value) override { header_map_.set##name(value); }                        \\",
          "637:   void remove##name() override { header_map_.remove##name(); }",
          "",
          "[Added Lines]",
          "631:     header_map_.verifyByteSizeInternalForTest();                                                   \\",
          "635:     header_map_.verifyByteSizeInternalForTest();                                                   \\",
          "637:   void set##name(absl::string_view value) override {                                               \\",
          "638:     header_map_.set##name(value);                                                                  \\",
          "639:     header_map_.verifyByteSizeInternalForTest();                                                   \\",
          "640:   }                                                                                                \\",
          "641:   void set##name(uint64_t value) override {                                                        \\",
          "642:     header_map_.set##name(value);                                                                  \\",
          "643:     header_map_.verifyByteSizeInternalForTest();                                                   \\",
          "644:   }                                                                                                \\",
          "645:   void remove##name() override {                                                                   \\",
          "646:     header_map_.remove##name();                                                                    \\",
          "647:     header_map_.verifyByteSizeInternalForTest();                                                   \\",
          "648:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "650:     for (auto& value : values) {",
          "651:       header_map_.addCopy(LowerCaseString(value.first), value.second);",
          "652:     }",
          "653:   }",
          "654:   TestHeaderMapImplBase(const TestHeaderMapImplBase& rhs)",
          "655:       : TestHeaderMapImplBase(rhs.header_map_) {}",
          "657:   TestHeaderMapImplBase& operator=(const TestHeaderMapImplBase& rhs) {",
          "658:     if (this == &rhs) {",
          "659:       return *this;",
          "660:     }",
          "661:     clear();",
          "662:     HeaderMapImpl::copyFrom(header_map_, rhs);",
          "663:     return *this;",
          "664:   }",
          "",
          "[Removed Lines]",
          "656:   TestHeaderMapImplBase(const HeaderMap& rhs) { HeaderMapImpl::copyFrom(header_map_, rhs); }",
          "",
          "[Added Lines]",
          "664:     header_map_.verifyByteSizeInternalForTest();",
          "668:   TestHeaderMapImplBase(const HeaderMap& rhs) {",
          "669:     HeaderMapImpl::copyFrom(header_map_, rhs);",
          "670:     header_map_.verifyByteSizeInternalForTest();",
          "671:   }",
          "678:     header_map_.verifyByteSizeInternalForTest();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "685:   bool operator!=(const HeaderMap& rhs) const override { return header_map_.operator!=(rhs); }",
          "686:   void addViaMove(HeaderString&& key, HeaderString&& value) override {",
          "687:     header_map_.addViaMove(std::move(key), std::move(value));",
          "688:   }",
          "689:   void addReference(const LowerCaseString& key, absl::string_view value) override {",
          "690:     header_map_.addReference(key, value);",
          "691:   }",
          "692:   void addReferenceKey(const LowerCaseString& key, uint64_t value) override {",
          "693:     header_map_.addReferenceKey(key, value);",
          "694:   }",
          "695:   void addReferenceKey(const LowerCaseString& key, absl::string_view value) override {",
          "696:     header_map_.addReferenceKey(key, value);",
          "697:   }",
          "698:   void addCopy(const LowerCaseString& key, uint64_t value) override {",
          "699:     header_map_.addCopy(key, value);",
          "700:   }",
          "701:   void addCopy(const LowerCaseString& key, absl::string_view value) override {",
          "702:     header_map_.addCopy(key, value);",
          "703:   }",
          "704:   void appendCopy(const LowerCaseString& key, absl::string_view value) override {",
          "705:     header_map_.appendCopy(key, value);",
          "706:   }",
          "707:   void setReference(const LowerCaseString& key, absl::string_view value) override {",
          "708:     header_map_.setReference(key, value);",
          "709:   }",
          "710:   void setReferenceKey(const LowerCaseString& key, absl::string_view value) override {",
          "711:     header_map_.setReferenceKey(key, value);",
          "712:   }",
          "713:   void setCopy(const LowerCaseString& key, absl::string_view value) override {",
          "714:     header_map_.setCopy(key, value);",
          "715:   }",
          "716:   uint64_t byteSize() const override { return header_map_.byteSize(); }",
          "717:   const HeaderEntry* get(const LowerCaseString& key) const override { return header_map_.get(key); }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "704:     header_map_.verifyByteSizeInternalForTest();",
          "708:     header_map_.verifyByteSizeInternalForTest();",
          "712:     header_map_.verifyByteSizeInternalForTest();",
          "716:     header_map_.verifyByteSizeInternalForTest();",
          "720:     header_map_.verifyByteSizeInternalForTest();",
          "724:     header_map_.verifyByteSizeInternalForTest();",
          "728:     header_map_.verifyByteSizeInternalForTest();",
          "732:     header_map_.verifyByteSizeInternalForTest();",
          "739:     header_map_.verifyByteSizeInternalForTest();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "724:   HeaderMap::Lookup lookup(const LowerCaseString& key, const HeaderEntry** entry) const override {",
          "725:     return header_map_.lookup(key, entry);",
          "726:   }",
          "730:   size_t size() const override { return header_map_.size(); }",
          "731:   bool empty() const override { return header_map_.empty(); }",
          "732:   void dumpState(std::ostream& os, int indent_level = 0) const override {",
          "733:     header_map_.dumpState(os, indent_level);",
          "734:   }",
          "739:   Impl header_map_;",
          "740: };",
          "",
          "[Removed Lines]",
          "727:   void clear() override { header_map_.clear(); }",
          "728:   void remove(const LowerCaseString& key) override { header_map_.remove(key); }",
          "729:   void removePrefix(const LowerCaseString& key) override { header_map_.removePrefix(key); }",
          "735:   void verifyByteSize() override { header_map_.verifyByteSizeInternalForTest(); }",
          "737:   ALL_INLINE_HEADERS(DEFINE_TEST_INLINE_HEADER_FUNCS)",
          "",
          "[Added Lines]",
          "752:   void clear() override {",
          "753:     header_map_.clear();",
          "754:     header_map_.verifyByteSizeInternalForTest();",
          "755:   }",
          "756:   void remove(const LowerCaseString& key) override {",
          "757:     header_map_.remove(key);",
          "758:     header_map_.verifyByteSizeInternalForTest();",
          "759:   }",
          "760:   void removePrefix(const LowerCaseString& key) override {",
          "761:     header_map_.removePrefix(key);",
          "762:     header_map_.verifyByteSizeInternalForTest();",
          "763:   }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "745: using TestHeaderMapImpl = TestHeaderMapImplBase<HeaderMap, HeaderMapImpl>;",
          "747: using TestRequestTrailerMapImpl = TestHeaderMapImplBase<RequestTrailerMap, RequestTrailerMapImpl>;",
          "",
          "[Removed Lines]",
          "746: using TestRequestHeaderMapImpl = TestHeaderMapImplBase<RequestHeaderMap, RequestHeaderMapImpl>;",
          "748: using TestResponseHeaderMapImpl = TestHeaderMapImplBase<ResponseHeaderMap, ResponseHeaderMapImpl>;",
          "749: using TestResponseTrailerMapImpl =",
          "750:     TestHeaderMapImplBase<ResponseTrailerMap, ResponseTrailerMapImpl>;",
          "",
          "[Added Lines]",
          "778: class TestRequestHeaderMapImpl",
          "779:     : public TestHeaderMapImplBase<RequestHeaderMap, RequestHeaderMapImpl> {",
          "780: public:",
          "781:   using TestHeaderMapImplBase::TestHeaderMapImplBase;",
          "783:   INLINE_REQ_HEADERS(DEFINE_TEST_INLINE_HEADER_FUNCS)",
          "784:   INLINE_REQ_RESP_HEADERS(DEFINE_TEST_INLINE_HEADER_FUNCS)",
          "785: };",
          "789: class TestResponseHeaderMapImpl",
          "790:     : public TestHeaderMapImplBase<ResponseHeaderMap, ResponseHeaderMapImpl> {",
          "791: public:",
          "792:   using TestHeaderMapImplBase::TestHeaderMapImplBase;",
          "794:   INLINE_RESP_HEADERS(DEFINE_TEST_INLINE_HEADER_FUNCS)",
          "795:   INLINE_REQ_RESP_HEADERS(DEFINE_TEST_INLINE_HEADER_FUNCS)",
          "796:   INLINE_RESP_HEADERS_TRAILERS(DEFINE_TEST_INLINE_HEADER_FUNCS)",
          "797: };",
          "799: class TestResponseTrailerMapImpl",
          "800:     : public TestHeaderMapImplBase<ResponseTrailerMap, ResponseTrailerMapImpl> {",
          "801: public:",
          "802:   using TestHeaderMapImplBase::TestHeaderMapImplBase;",
          "804:   INLINE_RESP_HEADERS_TRAILERS(DEFINE_TEST_INLINE_HEADER_FUNCS)",
          "805: };",
          "",
          "---------------"
        ]
      }
    }
  ]
}