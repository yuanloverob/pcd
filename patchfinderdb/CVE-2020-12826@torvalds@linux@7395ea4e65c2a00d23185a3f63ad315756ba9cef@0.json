{
  "cve_id": "CVE-2020-12826",
  "cve_desc": "A signal access-control issue was discovered in the Linux kernel before 5.6.5, aka CID-7395ea4e65c2. Because exec_id in include/linux/sched.h is only 32 bits, an integer overflow can interfere with a do_notify_parent protection mechanism. A child process can send an arbitrary signal to a parent process in a different security domain. Exploitation limitations include the amount of elapsed time before an integer overflow occurs, and the lack of scenarios where signals to a parent process present a substantial operational threat.",
  "repo": "torvalds/linux",
  "patch_hash": "7395ea4e65c2a00d23185a3f63ad315756ba9cef",
  "patch_info": {
    "commit_hash": "7395ea4e65c2a00d23185a3f63ad315756ba9cef",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/7395ea4e65c2a00d23185a3f63ad315756ba9cef",
    "files": [
      "fs/exec.c",
      "include/linux/sched.h",
      "kernel/signal.c"
    ],
    "message": "signal: Extend exec_id to 64bits\n\ncommit d1e7fd6462ca9fc76650fbe6ca800e35b24267da upstream.\n\nReplace the 32bit exec_id with a 64bit exec_id to make it impossible\nto wrap the exec_id counter.  With care an attacker can cause exec_id\nwrap and send arbitrary signals to a newly exec'd parent.  This\nbypasses the signal sending checks if the parent changes their\ncredentials during exec.\n\nThe severity of this problem can been seen that in my limited testing\nof a 32bit exec_id it can take as little as 19s to exec 65536 times.\nWhich means that it can take as little as 14 days to wrap a 32bit\nexec_id.  Adam Zabrocki has succeeded wrapping the self_exe_id in 7\ndays.  Even my slower timing is in the uptime of a typical server.\nWhich means self_exec_id is simply a speed bump today, and if exec\ngets noticably faster self_exec_id won't even be a speed bump.\n\nExtending self_exec_id to 64bits introduces a problem on 32bit\narchitectures where reading self_exec_id is no longer atomic and can\ntake two read instructions.  Which means that is is possible to hit\na window where the read value of exec_id does not match the written\nvalue.  So with very lucky timing after this change this still\nremains expoiltable.\n\nI have updated the update of exec_id on exec to use WRITE_ONCE\nand the read of exec_id in do_notify_parent to use READ_ONCE\nto make it clear that there is no locking between these two\nlocations.\n\nLink: https://lore.kernel.org/kernel-hardening/20200324215049.GA3710@pi3.com.pl\nFixes: 2.3.23pre2\nCc: stable@vger.kernel.org\nSigned-off-by: \"Eric W. Biederman\" <ebiederm@xmission.com>\nSigned-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>",
    "before_after_code_files": [
      "fs/exec.c||fs/exec.c",
      "include/linux/sched.h||include/linux/sched.h",
      "kernel/signal.c||kernel/signal.c"
    ]
  },
  "patch_diff": {
    "fs/exec.c||fs/exec.c": [
      "File: fs/exec.c -> fs/exec.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1390:  flush_signal_handlers(current, 0);",
      "1391: }",
      "1392: EXPORT_SYMBOL(setup_new_exec);",
      "",
      "[Removed Lines]",
      "1389:  current->self_exec_id++;",
      "",
      "[Added Lines]",
      "1389:  WRITE_ONCE(current->self_exec_id, current->self_exec_id + 1);",
      "",
      "---------------"
    ],
    "include/linux/sched.h||include/linux/sched.h": [
      "File: include/linux/sched.h -> include/linux/sched.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "939:  struct seccomp   seccomp;",
      "946:  spinlock_t   alloc_lock;",
      "",
      "[Removed Lines]",
      "942:  u32    parent_exec_id;",
      "943:  u32    self_exec_id;",
      "",
      "[Added Lines]",
      "942:  u64    parent_exec_id;",
      "943:  u64    self_exec_id;",
      "",
      "---------------"
    ],
    "kernel/signal.c||kernel/signal.c": [
      "File: kernel/signal.c -> kernel/signal.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1935:    sig = SIGCHLD;",
      "1936:  }",
      "",
      "[Removed Lines]",
      "1934:   if (tsk->parent_exec_id != tsk->parent->self_exec_id)",
      "",
      "[Added Lines]",
      "1934:   if (tsk->parent_exec_id != READ_ONCE(tsk->parent->self_exec_id))",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "d1e7fd6462ca9fc76650fbe6ca800e35b24267da",
      "candidate_info": {
        "commit_hash": "d1e7fd6462ca9fc76650fbe6ca800e35b24267da",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/d1e7fd6462ca9fc76650fbe6ca800e35b24267da",
        "files": [
          "fs/exec.c",
          "include/linux/sched.h",
          "kernel/signal.c"
        ],
        "message": "signal: Extend exec_id to 64bits\n\nReplace the 32bit exec_id with a 64bit exec_id to make it impossible\nto wrap the exec_id counter.  With care an attacker can cause exec_id\nwrap and send arbitrary signals to a newly exec'd parent.  This\nbypasses the signal sending checks if the parent changes their\ncredentials during exec.\n\nThe severity of this problem can been seen that in my limited testing\nof a 32bit exec_id it can take as little as 19s to exec 65536 times.\nWhich means that it can take as little as 14 days to wrap a 32bit\nexec_id.  Adam Zabrocki has succeeded wrapping the self_exe_id in 7\ndays.  Even my slower timing is in the uptime of a typical server.\nWhich means self_exec_id is simply a speed bump today, and if exec\ngets noticably faster self_exec_id won't even be a speed bump.\n\nExtending self_exec_id to 64bits introduces a problem on 32bit\narchitectures where reading self_exec_id is no longer atomic and can\ntake two read instructions.  Which means that is is possible to hit\na window where the read value of exec_id does not match the written\nvalue.  So with very lucky timing after this change this still\nremains expoiltable.\n\nI have updated the update of exec_id on exec to use WRITE_ONCE\nand the read of exec_id in do_notify_parent to use READ_ONCE\nto make it clear that there is no locking between these two\nlocations.\n\nLink: https://lore.kernel.org/kernel-hardening/20200324215049.GA3710@pi3.com.pl\nFixes: 2.3.23pre2\nCc: stable@vger.kernel.org\nSigned-off-by: \"Eric W. Biederman\" <ebiederm@xmission.com>",
        "before_after_code_files": [
          "fs/exec.c||fs/exec.c",
          "include/linux/sched.h||include/linux/sched.h",
          "kernel/signal.c||kernel/signal.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "fs/exec.c||fs/exec.c",
            "include/linux/sched.h||include/linux/sched.h",
            "kernel/signal.c||kernel/signal.c"
          ],
          "candidate": [
            "fs/exec.c||fs/exec.c",
            "include/linux/sched.h||include/linux/sched.h",
            "kernel/signal.c||kernel/signal.c"
          ]
        }
      },
      "candidate_diff": {
        "fs/exec.c||fs/exec.c": [
          "File: fs/exec.c -> fs/exec.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1417:  flush_signal_handlers(current, 0);",
          "1418: }",
          "1419: EXPORT_SYMBOL(setup_new_exec);",
          "",
          "[Removed Lines]",
          "1416:  current->self_exec_id++;",
          "",
          "[Added Lines]",
          "1416:  WRITE_ONCE(current->self_exec_id, current->self_exec_id + 1);",
          "",
          "---------------"
        ],
        "include/linux/sched.h||include/linux/sched.h": [
          "File: include/linux/sched.h -> include/linux/sched.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "939:  struct seccomp   seccomp;",
          "946:  spinlock_t   alloc_lock;",
          "",
          "[Removed Lines]",
          "942:  u32    parent_exec_id;",
          "943:  u32    self_exec_id;",
          "",
          "[Added Lines]",
          "942:  u64    parent_exec_id;",
          "943:  u64    self_exec_id;",
          "",
          "---------------"
        ],
        "kernel/signal.c||kernel/signal.c": [
          "File: kernel/signal.c -> kernel/signal.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1930:    sig = SIGCHLD;",
          "1931:  }",
          "",
          "[Removed Lines]",
          "1929:   if (tsk->parent_exec_id != tsk->parent->self_exec_id)",
          "",
          "[Added Lines]",
          "1929:   if (tsk->parent_exec_id != READ_ONCE(tsk->parent->self_exec_id))",
          "",
          "---------------"
        ]
      }
    }
  ]
}