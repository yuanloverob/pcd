{
  "cve_id": "CVE-2019-19603",
  "cve_desc": "SQLite 3.30.1 mishandles certain SELECT statements with a nonexistent VIEW, leading to an application crash.",
  "repo": "sqlite/sqlite",
  "patch_hash": "527cbd4a104cb93bf3994b3dd3619a6299a78b13",
  "patch_info": {
    "commit_hash": "527cbd4a104cb93bf3994b3dd3619a6299a78b13",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/527cbd4a104cb93bf3994b3dd3619a6299a78b13",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/build.c",
      "src/sqliteInt.h",
      "test/altertab.test"
    ],
    "message": "Do not allow CREATE TABLE or CREATE VIEW of an object with a name that looks like a shadow table name.\n\nFossilOrigin-Name: 6aef58b629d89955f85f65191ba2be67b2adfac4f0327fe9a7141cb2705dbc00",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/build.c||src/build.c",
      "src/sqliteInt.h||src/sqliteInt.h",
      "test/altertab.test||test/altertab.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 8ad34d36a141fa8f5d9bd784dfeb892c983897a6dc6b867607cc668508acf944",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/build.c||src/build.c": [
      "File: src/build.c -> src/build.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "856:       }",
      "857:     }",
      "858:   }else{",
      "861:     ){",
      "862:       sqlite3ErrorMsg(pParse, \"object name reserved for internal use: %s\",",
      "863:                       zName);",
      "864:       return SQLITE_ERROR;",
      "865:     }",
      "866:   }",
      "867:   return SQLITE_OK;",
      "868: }",
      "",
      "[Removed Lines]",
      "859:     if( pParse->nested==0",
      "860:      && 0==sqlite3StrNICmp(zName, \"sqlite_\", 7)",
      "",
      "[Added Lines]",
      "859:     if( (pParse->nested==0 && 0==sqlite3StrNICmp(zName, \"sqlite_\", 7))",
      "860:      || (sqlite3ReadOnlyShadowTables(db) && sqlite3ShadowTableName(db, zName))",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "2132: static int isShadowTableName(sqlite3 *db, char *zName){",
      "",
      "[Added Lines]",
      "2133: int sqlite3ShadowTableName(sqlite3 *db, const char *zName){",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "2147:   if( pMod->pModule->xShadowName==0 ) return 0;",
      "2148:   return pMod->pModule->xShadowName(zTail+1);",
      "2149: }",
      "",
      "[Removed Lines]",
      "2150: #else",
      "2151: # define isShadowTableName(x,y) 0",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "2190:   p = pParse->pNewTable;",
      "2191:   if( p==0 ) return;",
      "2194:     p->tabFlags |= TF_Shadow;",
      "2195:   }",
      "",
      "[Removed Lines]",
      "2193:   if( pSelect==0 && isShadowTableName(db, p->zName) ){",
      "",
      "[Added Lines]",
      "2192:   if( pSelect==0 && sqlite3ShadowTableName(db, p->zName) ){",
      "",
      "---------------"
    ],
    "src/sqliteInt.h||src/sqliteInt.h": [
      "File: src/sqliteInt.h -> src/sqliteInt.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "4548: #  define sqlite3VtabInSync(db) ((db)->nVTrans>0 && (db)->aVTrans==0)",
      "4549: #endif",
      "4550: int sqlite3ReadOnlyShadowTables(sqlite3 *db);",
      "4551: int sqlite3VtabEponymousTableInit(Parse*,Module*);",
      "4552: void sqlite3VtabEponymousTableClear(sqlite3*,Module*);",
      "4553: void sqlite3VtabMakeWritable(Parse*,Table*);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4551: #ifndef SQLITE_OMIT_VIRTUALTABLE",
      "4552:   int sqlite3ShadowTableName(sqlite3 *db, const char *zName);",
      "4553: #else",
      "4554: # define sqlite3ShadowTableName(A,B) 0",
      "4555: #endif",
      "",
      "---------------"
    ],
    "test/altertab.test||test/altertab.test": [
      "File: test/altertab.test -> test/altertab.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "547:   } {1 {table y1_segments may not be modified}}",
      "549:   do_catchsql_test 16.20 {",
      "554:     DROP TABLE y1_segments;",
      "555:   } {1 {table y1_segments may not be dropped}}",
      "557:   do_execsql_test 16.30 {",
      "558:     ALTER TABLE y1 RENAME TO z1;",
      "559:   }",
      "",
      "[Removed Lines]",
      "550:     ALTER TABLE y1_segments RENAME TO abc;",
      "551:   } {1 {table y1_segments may not be altered}}",
      "553:   do_catchsql_test 16.21 {",
      "",
      "[Added Lines]",
      "553:   do_catchsql_test 16.20 {",
      "554:     ALTER TABLE y1_segments RENAME TO abc;",
      "555:   } {1 {table y1_segments may not be altered}}",
      "556:   sqlite3_db_config db DEFENSIVE 0",
      "557:   do_catchsql_test 16.22 {",
      "558:     ALTER TABLE y1_segments RENAME TO abc;",
      "559:   } {0 {}}",
      "560:   sqlite3_db_config db DEFENSIVE 1",
      "561:   do_catchsql_test 16.23 {",
      "562:     CREATE TABLE y1_segments AS SELECT * FROM abc;",
      "563:   } {1 {object name reserved for internal use: y1_segments}}",
      "564:   do_catchsql_test 16.24 {",
      "565:     CREATE VIEW y1_segments AS SELECT * FROM abc;",
      "566:   } {1 {object name reserved for internal use: y1_segments}}",
      "567:   sqlite3_db_config db DEFENSIVE 0",
      "568:   do_catchsql_test 16.25 {",
      "569:     ALTER TABLE abc RENAME TO y1_segments;",
      "570:   } {0 {}}",
      "571:   sqlite3_db_config db DEFENSIVE 1",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "e4f90b7075ba778fe60e77d75eed8e16914a0bc4",
      "candidate_info": {
        "commit_hash": "e4f90b7075ba778fe60e77d75eed8e16914a0bc4",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e4f90b7075ba778fe60e77d75eed8e16914a0bc4",
        "files": [
          "ext/misc/series.c",
          "manifest",
          "manifest.uuid",
          "src/where.c"
        ],
        "message": "Update the generate_series() table-valued function to make use of the new SQLITE_CONSTRAINT return from xBestIndex.\n\nFossilOrigin-Name: 4372ad644dda5a1fa46b6b6070092320c835439b41f598cbc041e9deef786988",
        "before_after_code_files": [
          "ext/misc/series.c||ext/misc/series.c",
          "manifest.uuid||manifest.uuid",
          "src/where.c||src/where.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/misc/series.c||ext/misc/series.c": [
          "File: ext/misc/series.c -> ext/misc/series.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "313:   sqlite3_vtab *tab,",
          "314:   sqlite3_index_info *pIdxInfo",
          "315: ){",
          "323:   const struct sqlite3_index_constraint *pConstraint;",
          "324:   pConstraint = pIdxInfo->aConstraint;",
          "325:   for(i=0; i<pIdxInfo->nConstraint; i++, pConstraint++){",
          "341:     }",
          "342:   }",
          "350:   }",
          "354:   }",
          "355:   if( (idxNum & 3)==3 ){",
          "",
          "[Removed Lines]",
          "326:     if( pConstraint->usable==0 ) continue;",
          "327:     if( pConstraint->op!=SQLITE_INDEX_CONSTRAINT_EQ ) continue;",
          "328:     switch( pConstraint->iColumn ){",
          "329:       case SERIES_COLUMN_START:",
          "330:         startIdx = i;",
          "331:         idxNum |= 1;",
          "332:         break;",
          "333:       case SERIES_COLUMN_STOP:",
          "334:         stopIdx = i;",
          "335:         idxNum |= 2;",
          "336:         break;",
          "337:       case SERIES_COLUMN_STEP:",
          "338:         stepIdx = i;",
          "339:         idxNum |= 4;",
          "340:         break;",
          "343:   if( startIdx>=0 ){",
          "344:     pIdxInfo->aConstraintUsage[startIdx].argvIndex = ++nArg;",
          "345:     pIdxInfo->aConstraintUsage[startIdx].omit= !SQLITE_SERIES_CONSTRAINT_VERIFY;",
          "346:   }",
          "347:   if( stopIdx>=0 ){",
          "348:     pIdxInfo->aConstraintUsage[stopIdx].argvIndex = ++nArg;",
          "349:     pIdxInfo->aConstraintUsage[stopIdx].omit = !SQLITE_SERIES_CONSTRAINT_VERIFY;",
          "351:   if( stepIdx>=0 ){",
          "352:     pIdxInfo->aConstraintUsage[stepIdx].argvIndex = ++nArg;",
          "353:     pIdxInfo->aConstraintUsage[stepIdx].omit = !SQLITE_SERIES_CONSTRAINT_VERIFY;",
          "",
          "[Added Lines]",
          "325:   assert( SERIES_COLUMN_STOP == SERIES_COLUMN_START+1 );",
          "326:   assert( SERIES_COLUMN_STEP == SERIES_COLUMN_START+2 );",
          "327:   aIdx[0] = aIdx[1] = aIdx[2] = -1;",
          "332:     if( pConstraint->iColumn<SERIES_COLUMN_START ) continue;",
          "333:     iCol = pConstraint->iColumn - SERIES_COLUMN_START;",
          "334:     iMask = 1 << iCol;",
          "335:     if( pConstraint->usable==0 ){",
          "336:       unusableMask |=  iMask;",
          "337:       continue;",
          "338:     }else if( pConstraint->op==SQLITE_INDEX_CONSTRAINT_EQ ){",
          "339:       idxNum |= iMask;",
          "340:       aIdx[iCol] = i;",
          "343:   for(i=0; i<3; i++){",
          "344:     if( (j = aIdx[i])>=0 ){",
          "345:       pIdxInfo->aConstraintUsage[j].argvIndex = ++nArg;",
          "346:       pIdxInfo->aConstraintUsage[j].omit = !SQLITE_SERIES_CONSTRAINT_VERIFY;",
          "347:     }",
          "349:   if( (unusableMask & ~idxNum)!=0 ){",
          "353:     return SQLITE_CONSTRAINT;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "369:     pIdxInfo->estimatedRows = 2147483647;",
          "370:   }",
          "371:   pIdxInfo->idxNum = idxNum;",
          "",
          "[Removed Lines]",
          "368:     pIdxInfo->estimatedCost = (double)2147483647;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: d584a0cb512815945ef06ee3b5ebadbf2a543b008487f6d098e1e8ab79f61d2d",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3143:       return SQLITE_OK;",
          "3144:     }",
          "3145:     return rc;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3143:       WHERETRACE(0xffff, (\"  ^^^^--- non-viable plan rejected!\\n\"));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b7de827137526de97424f5f1202a6c3bfa35a914",
      "candidate_info": {
        "commit_hash": "b7de827137526de97424f5f1202a6c3bfa35a914",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/b7de827137526de97424f5f1202a6c3bfa35a914",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbeapi.c"
        ],
        "message": "Small performance increase in sqlite3_step() for the common case where it returns SQLITE_ROW.\n\nFossilOrigin-Name: 893448265299f4c70c32c8e92ea66f8d33c1c213b21701f73fa3815514cd5ef6",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbeapi.c||src/vdbeapi.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 70fe8ec2ae3099b8773834c7ac2e56768addbecd57956ac523e71a7dc264049c",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbeapi.c||src/vdbeapi.c": [
          "File: src/vdbeapi.c -> src/vdbeapi.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "629:     db->nVdbeExec--;",
          "630:   }",
          "632: #ifndef SQLITE_OMIT_TRACE",
          "635: #endif",
          "642:     }",
          "643:   }",
          "",
          "[Removed Lines]",
          "634:   if( rc!=SQLITE_ROW ) checkProfileCallback(db, p);",
          "637:   if( rc==SQLITE_DONE && db->autoCommit ){",
          "638:     assert( p->rc==SQLITE_OK );",
          "639:     p->rc = doWalCallbacks(db);",
          "640:     if( p->rc!=SQLITE_OK ){",
          "641:       rc = SQLITE_ERROR;",
          "",
          "[Added Lines]",
          "632:   if( rc!=SQLITE_ROW ){",
          "635:     checkProfileCallback(db, p);",
          "638:     if( rc==SQLITE_DONE && db->autoCommit ){",
          "639:       assert( p->rc==SQLITE_OK );",
          "640:       p->rc = doWalCallbacks(db);",
          "641:       if( p->rc!=SQLITE_OK ){",
          "642:         rc = SQLITE_ERROR;",
          "643:       }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9a2782293c37d360382296558c358d60929d0744",
      "candidate_info": {
        "commit_hash": "9a2782293c37d360382296558c358d60929d0744",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/9a2782293c37d360382296558c358d60929d0744",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/date.c",
          "src/func.c",
          "src/util.c",
          "src/vdbe.c",
          "src/vdbemem.c",
          "test/cast.test",
          "test/e_expr.test",
          "test/tkt-a8a0d2996a.test"
        ],
        "message": "When casting string values into numeric and the string has a prefix that looks like a number but total string is not a well-formed number, then take extra care that the result is either integer or real depending on what the prefix looks like.  Fix for tickets [e8bedb2a184001] and [4c2d7639f076aa].\n\nFossilOrigin-Name: 67a68af5578f08d2be2e48cf4fd12a6cf35a09c47d259deda81950f7ee1f02f7",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/date.c||src/date.c",
          "src/func.c||src/func.c",
          "src/util.c||src/util.c",
          "src/vdbe.c||src/vdbe.c",
          "src/vdbemem.c||src/vdbemem.c",
          "test/cast.test||test/cast.test",
          "test/e_expr.test||test/e_expr.test",
          "test/tkt-a8a0d2996a.test||test/tkt-a8a0d2996a.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: efbf31b82e6e16fda88d8cea54202a8593ff52f2267a44dba828704818162e66",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/date.c||src/date.c": [
          "File: src/date.c -> src/date.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "388:     return 0;",
          "389:   }else if( sqlite3StrICmp(zDate,\"now\")==0 && sqlite3NotPureFunc(context) ){",
          "390:     return setDateTimeToCurrent(context, p);",
          "392:     setRawDateNumber(p, r);",
          "393:     return 0;",
          "394:   }",
          "",
          "[Removed Lines]",
          "391:   }else if( sqlite3AtoF(zDate, &r, sqlite3Strlen30(zDate), SQLITE_UTF8) ){",
          "",
          "[Added Lines]",
          "391:   }else if( sqlite3AtoF(zDate, &r, sqlite3Strlen30(zDate), SQLITE_UTF8)>0 ){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "724:       if( sqlite3_strnicmp(z, \"weekday \", 8)==0",
          "726:                && (n=(int)r)==r && n>=0 && r<7 ){",
          "727:         sqlite3_int64 Z;",
          "728:         computeYMD_HMS(p);",
          "",
          "[Removed Lines]",
          "725:                && sqlite3AtoF(&z[8], &r, sqlite3Strlen30(&z[8]), SQLITE_UTF8)",
          "",
          "[Added Lines]",
          "725:                && sqlite3AtoF(&z[8], &r, sqlite3Strlen30(&z[8]), SQLITE_UTF8)>0",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "781:       double rRounder;",
          "782:       int i;",
          "783:       for(n=1; z[n] && z[n]!=':' && !sqlite3Isspace(z[n]); n++){}",
          "785:         rc = 1;",
          "786:         break;",
          "787:       }",
          "",
          "[Removed Lines]",
          "784:       if( !sqlite3AtoF(z, &r, n, SQLITE_UTF8) ){",
          "",
          "[Added Lines]",
          "784:       if( sqlite3AtoF(z, &r, n, SQLITE_UTF8)<=0 ){",
          "",
          "---------------"
        ],
        "src/func.c||src/func.c": [
          "File: src/func.c -> src/func.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "397:       sqlite3_result_error_nomem(context);",
          "398:       return;",
          "399:     }",
          "401:       assert( sqlite3_strglob(\"*Inf\", zBuf)==0 );",
          "402:       r = zBuf[0]=='-' ? -HUGE_VAL : +HUGE_VAL;",
          "403:     }",
          "",
          "[Removed Lines]",
          "400:     if( !sqlite3AtoF(zBuf, &r, sqlite3Strlen30(zBuf), SQLITE_UTF8) ){",
          "",
          "[Added Lines]",
          "400:     if( sqlite3AtoF(zBuf, &r, sqlite3Strlen30(zBuf), SQLITE_UTF8)<=0 ){",
          "",
          "---------------"
        ],
        "src/util.c||src/util.c": [
          "File: src/util.c -> src/util.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "560: #else",
          "561:   return !sqlite3Atoi64(z, pResult, length, enc);",
          "",
          "[Removed Lines]",
          "559:   return z==zEnd && nDigit>0 && eValid && eType>0 ? eType : 0;",
          "",
          "[Added Lines]",
          "561:   if( z==zEnd && nDigit>0 && eValid && eType>0 ){",
          "562:     return eType;",
          "563:   }else if( eType>=2 && (eType==3 || eValid) ){",
          "564:     return -1;",
          "565:   }else{",
          "566:     return 0;",
          "567:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "659:   }",
          "660:   rc = 0;",
          "664:     rc = 1;",
          "666:     int jj = i;",
          "",
          "[Removed Lines]",
          "663:   ){",
          "",
          "[Added Lines]",
          "671:     rc = -1;",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "321:   int rc;",
          "322:   assert( (pRec->flags & (MEM_Str|MEM_Int|MEM_Real|MEM_IntReal))==MEM_Str );",
          "323:   rc = sqlite3AtoF(pRec->z, &rValue, pRec->n, enc);",
          "325:   if( rc==1 && alsoAnInt(pRec, rValue, &pRec->u.i) ){",
          "326:     pRec->flags |= MEM_Int;",
          "327:   }else{",
          "",
          "[Removed Lines]",
          "324:   if( rc==0 ) return;",
          "",
          "[Added Lines]",
          "324:   if( rc<=0 ) return;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "424: static u16 SQLITE_NOINLINE computeNumericType(Mem *pMem){",
          "425:   assert( (pMem->flags & (MEM_Int|MEM_Real|MEM_IntReal))==0 );",
          "426:   assert( (pMem->flags & (MEM_Str|MEM_Blob))!=0 );",
          "427:   ExpandBlob(pMem);",
          "432:     return MEM_Int;",
          "433:   }",
          "434:   return MEM_Real;",
          "",
          "[Removed Lines]",
          "428:   if( sqlite3AtoF(pMem->z, &pMem->u.r, pMem->n, pMem->enc)==0 ){",
          "429:     return 0;",
          "430:   }",
          "431:   if( sqlite3Atoi64(pMem->z, &pMem->u.i, pMem->n, pMem->enc)==0 ){",
          "",
          "[Added Lines]",
          "425:   int rc;",
          "426:   sqlite3_int64 ix;",
          "430:   rc = sqlite3AtoF(pMem->z, &pMem->u.r, pMem->n, pMem->enc);",
          "431:   if( rc<=0 ){",
          "432:     if( rc==0 && sqlite3Atoi64(pMem->z, &ix, pMem->n, pMem->enc)<=1 ){",
          "433:       pMem->u.i = ix;",
          "434:       return MEM_Int;",
          "435:     }else{",
          "436:       return MEM_Real;",
          "437:     }",
          "438:   }else if( rc==1 && sqlite3Atoi64(pMem->z, &ix, pMem->n, pMem->enc)==0 ){",
          "439:     pMem->u.i = ix;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1608:   if( (type1 & type2 & MEM_Int)!=0 ){",
          "1609:     iA = pIn1->u.i;",
          "1610:     iB = pIn2->u.i;",
          "1612:     switch( pOp->opcode ){",
          "1613:       case OP_Add:       if( sqlite3AddInt64(&iB,iA) ) goto fp_math;  break;",
          "1614:       case OP_Subtract:  if( sqlite3SubInt64(&iB,iA) ) goto fp_math;  break;",
          "",
          "[Removed Lines]",
          "1611:     bIntint = 1;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1631:   }else if( (flags & MEM_Null)!=0 ){",
          "1632:     goto arithmetic_result_is_null;",
          "1633:   }else{",
          "1635: fp_math:",
          "1636:     rA = sqlite3VdbeRealValue(pIn1);",
          "1637:     rB = sqlite3VdbeRealValue(pIn2);",
          "",
          "[Removed Lines]",
          "1634:     bIntint = 0;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1663:     }",
          "1664:     pOut->u.r = rB;",
          "1665:     MemSetTypeFlag(pOut, MEM_Real);",
          "1669: #endif",
          "1670:   }",
          "1671:   break;",
          "",
          "[Removed Lines]",
          "1666:     if( ((type1|type2)&(MEM_Real|MEM_IntReal))==0 && !bIntint ){",
          "1667:       sqlite3VdbeIntegerAffinity(pOut);",
          "1668:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbemem.c||src/vdbemem.c": [
          "File: src/vdbemem.c -> src/vdbemem.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "717:   testcase( pMem->flags & MEM_Null );",
          "718:   if( (pMem->flags & (MEM_Int|MEM_Real|MEM_IntReal|MEM_Null))==0 ){",
          "719:     int rc;",
          "720:     assert( (pMem->flags & (MEM_Blob|MEM_Str))!=0 );",
          "721:     assert( pMem->db==0 || sqlite3_mutex_held(pMem->db->mutex) );",
          "730:         MemSetTypeFlag(pMem, MEM_Int);",
          "731:       }else{",
          "732:         MemSetTypeFlag(pMem, MEM_Real);",
          "733:       }",
          "734:     }",
          "735:   }",
          "736:   assert( (pMem->flags & (MEM_Int|MEM_Real|MEM_IntReal|MEM_Null))!=0 );",
          "",
          "[Removed Lines]",
          "722:     rc = sqlite3Atoi64(pMem->z, &pMem->u.i, pMem->n, pMem->enc);",
          "723:     if( rc==0 ){",
          "724:       MemSetTypeFlag(pMem, MEM_Int);",
          "725:     }else{",
          "726:       i64 i = pMem->u.i;",
          "727:       sqlite3AtoF(pMem->z, &pMem->u.r, pMem->n, pMem->enc);",
          "728:       if( rc==1 && sqlite3RealSameAsInt(pMem->u.r, i) ){",
          "729:         pMem->u.i = i;",
          "",
          "[Added Lines]",
          "720:     sqlite3_int64 ix;",
          "723:     rc = sqlite3AtoF(pMem->z, &pMem->u.r, pMem->n, pMem->enc);",
          "724:     if( rc<=0 ){",
          "725:       if( rc==0 && sqlite3Atoi64(pMem->z, &ix, pMem->n, pMem->enc)<=1 ){",
          "726:         pMem->u.i = ix;",
          "731:     }else if( rc==1 && sqlite3Atoi64(pMem->z, &ix, pMem->n, pMem->enc)==0 ){",
          "732:       pMem->u.i = ix;",
          "733:       MemSetTypeFlag(pMem, MEM_Int);",
          "734:     }else{",
          "735:       MemSetTypeFlag(pMem, MEM_Real);",
          "",
          "---------------"
        ],
        "test/cast.test||test/cast.test": [
          "File: test/cast.test -> test/cast.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "388:   SELECT * FROM t1;",
          "389: } {9000000000000000001 9000000000000000001 9000000000000000001 9000000000000000001}",
          "391: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "391: # 2019-06-07",
          "392: # https://www.sqlite.org/src/info/4c2d7639f076aa7c",
          "393: do_execsql_test case-7.1 {",
          "394:   SELECT CAST('-' AS NUMERIC);",
          "395: } {0}",
          "396: do_execsql_test case-7.2 {",
          "397:   SELECT CAST('-0' AS NUMERIC);",
          "398: } {0}",
          "399: do_execsql_test case-7.3 {",
          "400:   SELECT CAST('+' AS NUMERIC);",
          "401: } {0}",
          "402: do_execsql_test case-7.4 {",
          "403:   SELECT CAST('/' AS NUMERIC);",
          "404: } {0}",
          "406: # 2019-06-07",
          "407: # https://www.sqlite.org/src/info/e8bedb2a184001bb",
          "408: do_execsql_test case-7.10 {",
          "409:   SELECT '' - 2851427734582196970;",
          "410: } {-2851427734582196970}",
          "411: do_execsql_test case-7.11 {",
          "412:   SELECT 0 - 2851427734582196970;",
          "413: } {-2851427734582196970}",
          "414: do_execsql_test case-7.12 {",
          "415:   SELECT '' - 1;",
          "416: } {-1}",
          "",
          "---------------"
        ],
        "test/e_expr.test||test/e_expr.test": [
          "File: test/e_expr.test -> test/e_expr.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1650: # is lossless and reversible.",
          "1651: #",
          "1652: do_expr_test e_expr-32.1.1 { CAST('45'   AS NUMERIC)  } integer 45",
          "1654: do_expr_test e_expr-32.1.3 { CAST('45.2' AS NUMERIC)  } real 45.2",
          "1655: do_expr_test e_expr-32.1.4 { CAST('11abc' AS NUMERIC) } integer 11",
          "1656: do_expr_test e_expr-32.1.5 { CAST('11.1abc' AS NUMERIC) } real 11.1",
          "",
          "[Removed Lines]",
          "1653: do_expr_test e_expr-32.1.2 { CAST('45.0' AS NUMERIC)  } integer 45",
          "",
          "[Added Lines]",
          "1653: do_expr_test e_expr-32.1.2 { CAST('45.0' AS NUMERIC)  } real 45.0",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1701:  integer 9000000000000000001 \\",
          "1702:  integer 9000000000000000001 \\",
          "1703:  integer 9000000000000000001 \\",
          "1705:  integer 9223372036854775807 \\",
          "1706:  integer 9223372036854775807 \\",
          "1707:  integer 9223372036854775807 \\",
          "1708:  real 9.22337203685478e+18 \\",
          "1709:  real 9.22337203685478e+18 \\",
          "1714: ]",
          "1716: # EVIDENCE-OF: R-64550-29191 Note that the result from casting any",
          "",
          "[Removed Lines]",
          "1704:  integer 9000000000000000001 \\",
          "1710:  integer 9223372036854775807 \\",
          "1711:  integer 9223372036854775807 \\",
          "1712:  integer -5 \\",
          "1713:  integer -5 \\",
          "",
          "[Added Lines]",
          "1704:  real 9.0e+18 \\",
          "1710:  real 9.22337203685478e+18 \\",
          "1711:  real 9.22337203685478e+18 \\",
          "1712:  real -5.0 \\",
          "1713:  real -5.0 \\",
          "",
          "---------------"
        ],
        "test/tkt-a8a0d2996a.test||test/tkt-a8a0d2996a.test": [
          "File: test/tkt-a8a0d2996a.test -> test/tkt-a8a0d2996a.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "84: } {104.5}",
          "85: do_execsql_test 4.4 {",
          "86:   SELECT '-9223372036854775807x'-'1x';",
          "88: do_execsql_test 4.5 {",
          "89:   SELECT '9223372036854775806x'+'1x';",
          "91: do_execsql_test 4.6 {",
          "95: finish_test",
          "",
          "[Removed Lines]",
          "87: } {-9.22337203685478e+18}",
          "90: } {9.22337203685478e+18}",
          "92:   SELECT '1234x'/'10y';",
          "93: } {123.4}",
          "",
          "[Added Lines]",
          "87: } {-9223372036854775808}",
          "90: } {9223372036854775807}",
          "92:   SELECT '1234x'/'10y', '1234x'/'10.y', '1234x'/'1e1y';",
          "93: } {123 123.4 123.4}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4db4b5b4fe62fc9055209e4341d33ed3dd20d70f",
      "candidate_info": {
        "commit_hash": "4db4b5b4fe62fc9055209e4341d33ed3dd20d70f",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/4db4b5b4fe62fc9055209e4341d33ed3dd20d70f",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/parse.y",
          "test/pragma4.test"
        ],
        "message": "Avoid including the comment in the output of \"PRAGMA table_info\" in situations where there is a comment following a DEFAULT value within a CREATE TABLE statement.\n\nFossilOrigin-Name: d91095ba7130e974f0c95334760c679a31479b07a3d458e15994a24eee474752",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/parse.y||src/parse.y",
          "test/pragma4.test||test/pragma4.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: a0f5eb5c79cc33b7224f3421d2baa02a2a19eb9d6eaa8117dda4a1878b229cb5",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/parse.y||src/parse.y": [
          "File: src/parse.y -> src/parse.y",
          "--- Hunk 1 ---",
          "[Context before]",
          "301:   assert( yyLookahead!=YYNOCODE );",
          "302:   A = yyLookaheadToken.z;",
          "303: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "304: scantok(A) ::= . {",
          "305:   assert( yyLookahead!=YYNOCODE );",
          "306:   A = yyLookaheadToken;",
          "307: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "308: carglist ::= carglist ccons.",
          "309: carglist ::= .",
          "310: ccons ::= CONSTRAINT nm(X).           {pParse->constraintName = X;}",
          "313: ccons ::= DEFAULT LP(A) expr(X) RP(Z).",
          "314:                             {sqlite3AddDefaultValue(pParse,X,A.z+1,Z.z);}",
          "318:   Expr *p = sqlite3PExpr(pParse, TK_UMINUS, X, 0);",
          "320: }",
          "322:   Expr *p = tokenExpr(pParse, TK_STRING, X);",
          "323:   if( p ){",
          "324:     sqlite3ExprIdToTrueFalse(p);",
          "",
          "[Removed Lines]",
          "311: ccons ::= DEFAULT scanpt(A) term(X) scanpt(Z).",
          "312:                             {sqlite3AddDefaultValue(pParse,X,A,Z);}",
          "315: ccons ::= DEFAULT PLUS(A) term(X) scanpt(Z).",
          "316:                             {sqlite3AddDefaultValue(pParse,X,A.z,Z);}",
          "317: ccons ::= DEFAULT MINUS(A) term(X) scanpt(Z).      {",
          "319:   sqlite3AddDefaultValue(pParse,p,A.z,Z);",
          "321: ccons ::= DEFAULT scanpt id(X).       {",
          "",
          "[Added Lines]",
          "315: ccons ::= DEFAULT scantok(A) term(X).",
          "316:                             {sqlite3AddDefaultValue(pParse,X,A.z,&A.z[A.n]);}",
          "319: ccons ::= DEFAULT PLUS(A) scantok(Z) term(X).",
          "320:                             {sqlite3AddDefaultValue(pParse,X,A.z,&Z.z[Z.n]);}",
          "321: ccons ::= DEFAULT MINUS(A) scantok(Z) term(X). {",
          "323:   sqlite3AddDefaultValue(pParse,p,A.z,&Z.z[Z.n]);",
          "325: ccons ::= DEFAULT scantok id(X).       {",
          "",
          "---------------"
        ],
        "test/pragma4.test||test/pragma4.test": [
          "File: test/pragma4.test -> test/pragma4.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "249:   pragma foreign_key_check('c2')",
          "250: } {1 {no such table: c2}}",
          "252: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "252: do_execsql_test 5.0 {",
          "253:   CREATE TABLE t4(a DEFAULT 'abc' /* comment */, b DEFAULT -1 -- comment",
          "255:   );",
          "256:   PRAGMA table_info = t4;",
          "257: } {",
          "258:   0 a {} 0 'abc' 0 1 b {} 0 -1 0 2 c {} 0 +4.0 0",
          "259: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1e7c00e695ff7fe8ab92e34e5793636b6cf3f420",
      "candidate_info": {
        "commit_hash": "1e7c00e695ff7fe8ab92e34e5793636b6cf3f420",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/1e7c00e695ff7fe8ab92e34e5793636b6cf3f420",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/insert.c",
          "test/without_rowid1.test"
        ],
        "message": "Fix the xferCompatibleIndex() function so that it recognizes that a PRIMARY KEY index for a WITHOUT ROWID table is different from a UNIQUE constraint index on the primary key.  Ticket [302027baf1374498]\n\nFossilOrigin-Name: 34f64f11ca481996b1ff1686bdc5e278946635b6856cd1fe2355fce8e298e0f8",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/insert.c||src/insert.c",
          "test/without_rowid1.test||test/without_rowid1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 104a2beb57037f9353ffa77096aae0eb64e4682e667f31623bfd3d064dd8d881",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/insert.c||src/insert.c": [
          "File: src/insert.c -> src/insert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2367:   int i;",
          "2368:   assert( pDest && pSrc );",
          "2369:   assert( pDest->pTable!=pSrc->pTable );",
          "2372:   }",
          "2373:   if( pDest->onError!=pSrc->onError ){",
          "",
          "[Removed Lines]",
          "2370:   if( pDest->nKeyCol!=pSrc->nKeyCol ){",
          "",
          "[Added Lines]",
          "2370:   if( pDest->nKeyCol!=pSrc->nKeyCol || pDest->nColumn!=pSrc->nColumn ){",
          "",
          "---------------"
        ],
        "test/without_rowid1.test||test/without_rowid1.test": [
          "File: test/without_rowid1.test -> test/without_rowid1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "430:   PRAGMA integrity_check;",
          "431: } {ok}",
          "434: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "433: # 2019-11-07 ticket https://www.sqlite.org/src/info/302027baf1374498",
          "434: # The xferCompatibleIndex() function confuses a PRIMARY KEY index",
          "435: # with a UNIQUE index.",
          "436: #",
          "437: do_execsql_test 13.10 {",
          "438:   DROP TABLE IF EXISTS t0;",
          "439:   DROP TABLE IF EXISTS t1;",
          "440:   CREATE TABLE t0(",
          "441:     c0,",
          "442:     c1 UNIQUE,",
          "443:     PRIMARY KEY(c1, c1)",
          "444:   ) WITHOUT ROWID;",
          "445:   INSERT INTO t0(c0,c1) VALUES('abc','xyz');",
          "446:   CREATE TABLE t1(",
          "447:     c0,",
          "448:     c1 UNIQUE,",
          "449:     PRIMARY KEY(c1, c1)",
          "450:   ) WITHOUT ROWID;",
          "451:   INSERT INTO t1 SELECT * FROM t0;",
          "452:   PRAGMA integrity_check;",
          "453:   SELECT * FROM t0, t1;",
          "454: } {ok abc xyz abc xyz}",
          "",
          "---------------"
        ]
      }
    }
  ]
}