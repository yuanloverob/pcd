{
  "cve_id": "CVE-2020-26759",
  "cve_desc": "clickhouse-driver before 0.1.5 allows a malicious clickhouse server to trigger a crash or execute arbitrary code (on a database client) via a crafted server response, due to a buffer overflow.",
  "repo": "mymarilyn/clickhouse-driver",
  "patch_hash": "d708ed548e1d6f254ba81a21de8ba543a53b5598",
  "patch_info": {
    "commit_hash": "d708ed548e1d6f254ba81a21de8ba543a53b5598",
    "repo": "mymarilyn/clickhouse-driver",
    "commit_url": "https://github.com/mymarilyn/clickhouse-driver/commit/d708ed548e1d6f254ba81a21de8ba543a53b5598",
    "files": [
      "clickhouse_driver/varint.c",
      "clickhouse_driver/varint.pyx",
      "tests/test_varint.py"
    ],
    "message": "Fix read_varint overflow",
    "before_after_code_files": [
      "clickhouse_driver/varint.c||clickhouse_driver/varint.c",
      "clickhouse_driver/varint.pyx||clickhouse_driver/varint.pyx",
      "tests/test_varint.py||tests/test_varint.py"
    ]
  },
  "patch_diff": {
    "clickhouse_driver/varint.c||clickhouse_driver/varint.c": [
      "File: clickhouse_driver/varint.c -> clickhouse_driver/varint.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1064: static void __Pyx_AddTraceback(const char *funcname, int c_line,",
      "1065:                                int py_line, const char *filename);",
      "1071: static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);",
      "",
      "[Removed Lines]",
      "1068: static CYTHON_INLINE unsigned char __Pyx_PyInt_As_unsigned_char(PyObject *);",
      "",
      "[Added Lines]",
      "1068: static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_PY_LONG_LONG(unsigned PY_LONG_LONG value);",
      "1071: static CYTHON_INLINE unsigned PY_LONG_LONG __Pyx_PyInt_As_unsigned_PY_LONG_LONG(PyObject *);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1196: static const char __pyx_k_number[] = \"number\";",
      "1197: static const char __pyx_k_result[] = \"result\";",
      "1198: static const char __pyx_k_num_buf[] = \"num_buf\";",
      "1200: static const char __pyx_k_read_one[] = \"read_one\";",
      "1201: static const char __pyx_k_read_varint[] = \"read_varint\";",
      "1202: static const char __pyx_k_write_varint[] = \"write_varint\";",
      "1203: static const char __pyx_k_cline_in_traceback[] = \"cline_in_traceback\";",
      "",
      "[Removed Lines]",
      "1199: static const char __pyx_k_towrite[] = \"towrite\";",
      "",
      "[Added Lines]",
      "1203: static const char __pyx_k_to_write[] = \"to_write\";",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1218: static PyObject *__pyx_n_s_result;",
      "1219: static PyObject *__pyx_n_s_shift;",
      "1220: static PyObject *__pyx_n_s_test;",
      "1222: static PyObject *__pyx_n_s_write;",
      "1223: static PyObject *__pyx_n_s_write_varint;",
      "1226: static PyObject *__pyx_tuple_;",
      "1227: static PyObject *__pyx_tuple__3;",
      "",
      "[Removed Lines]",
      "1221: static PyObject *__pyx_n_s_towrite;",
      "",
      "[Added Lines]",
      "1224: static PyObject *__pyx_n_s_to_write;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1242: static char __pyx_doc_17clickhouse_driver_6varint_write_varint[] = \"\\n    Writes integer of variable length using LEB128.\\n    \";",
      "1243: static PyMethodDef __pyx_mdef_17clickhouse_driver_6varint_1write_varint = {\"write_varint\", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_17clickhouse_driver_6varint_1write_varint, METH_VARARGS|METH_KEYWORDS, __pyx_doc_17clickhouse_driver_6varint_write_varint};",
      "1244: static PyObject *__pyx_pw_17clickhouse_driver_6varint_1write_varint(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {",
      "1246:   PyObject *__pyx_v_buf = 0;",
      "1247:   PyObject *__pyx_r = 0;",
      "1248:   __Pyx_RefNannyDeclarations",
      "",
      "[Removed Lines]",
      "1245:   Py_ssize_t __pyx_v_number;",
      "",
      "[Added Lines]",
      "1248:   unsigned PY_LONG_LONG __pyx_v_number;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1282:       values[0] = PyTuple_GET_ITEM(__pyx_args, 0);",
      "1283:       values[1] = PyTuple_GET_ITEM(__pyx_args, 1);",
      "1284:     }",
      "1286:     __pyx_v_buf = values[1];",
      "1287:   }",
      "1288:   goto __pyx_L4_argument_unpacking_done;",
      "",
      "[Removed Lines]",
      "1285:     __pyx_v_number = __Pyx_PyIndex_AsSsize_t(values[0]); if (unlikely((__pyx_v_number == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 4, __pyx_L3_error)",
      "",
      "[Added Lines]",
      "1288:     __pyx_v_number = __Pyx_PyInt_As_unsigned_PY_LONG_LONG(values[0]); if (unlikely((__pyx_v_number == (unsigned PY_LONG_LONG)-1) && PyErr_Occurred())) __PYX_ERR(0, 4, __pyx_L3_error)",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "1300:   return __pyx_r;",
      "1301: }",
      "1306:   unsigned char __pyx_v_num_buf[32];",
      "1307:   PyObject *__pyx_r = NULL;",
      "1308:   __Pyx_RefNannyDeclarations",
      "",
      "[Removed Lines]",
      "1303: static PyObject *__pyx_pf_17clickhouse_driver_6varint_write_varint(CYTHON_UNUSED PyObject *__pyx_self, Py_ssize_t __pyx_v_number, PyObject *__pyx_v_buf) {",
      "1304:   Py_ssize_t __pyx_v_i;",
      "1305:   unsigned char __pyx_v_towrite;",
      "",
      "[Added Lines]",
      "1306: static PyObject *__pyx_pf_17clickhouse_driver_6varint_write_varint(CYTHON_UNUSED PyObject *__pyx_self, unsigned PY_LONG_LONG __pyx_v_number, PyObject *__pyx_v_buf) {",
      "1307:   unsigned char __pyx_v_to_write;",
      "1308:   unsigned char __pyx_v_i;",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "1323:   __pyx_v_i = 0;",
      "1332:   while (1) {",
      "1350:     __pyx_v_number = (__pyx_v_number >> 7);",
      "1359:     __pyx_t_1 = (__pyx_v_number != 0);",
      "1360:     if (__pyx_t_1) {",
      "1378:       __pyx_v_i = (__pyx_v_i + 1);",
      "1387:       goto __pyx_L5;",
      "1388:     }",
      "1407:       __pyx_v_i = (__pyx_v_i + 1);",
      "",
      "[Removed Lines]",
      "1341:     __pyx_v_towrite = (__pyx_v_number & 0x7f);",
      "1369:       (__pyx_v_num_buf[__pyx_v_i]) = (__pyx_v_towrite | 0x80);",
      "1398:       (__pyx_v_num_buf[__pyx_v_i]) = __pyx_v_towrite;",
      "",
      "[Added Lines]",
      "1344:     __pyx_v_to_write = (__pyx_v_number & 0x7f);",
      "1372:       (__pyx_v_num_buf[__pyx_v_i]) = (__pyx_v_to_write | 0x80);",
      "1401:       (__pyx_v_num_buf[__pyx_v_i]) = __pyx_v_to_write;",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "1419:   }",
      "1420:   __pyx_L4_break:;",
      "1430:   __Pyx_GOTREF(__pyx_t_3);",
      "1432:   __Pyx_GOTREF(__pyx_t_4);",
      "1433:   __pyx_t_5 = NULL;",
      "1434:   if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {",
      "",
      "[Removed Lines]",
      "1429:   __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_buf, __pyx_n_s_write); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 26, __pyx_L1_error)",
      "1431:   __pyx_t_4 = PyBytes_FromStringAndSize(((char *)__pyx_v_num_buf), __pyx_v_i); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 26, __pyx_L1_error)",
      "",
      "[Added Lines]",
      "1432:   __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_buf, __pyx_n_s_write); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 25, __pyx_L1_error)",
      "1434:   __pyx_t_4 = PyBytes_FromStringAndSize(((char *)__pyx_v_num_buf), __pyx_v_i); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 25, __pyx_L1_error)",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "1443:   __pyx_t_2 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4);",
      "1444:   __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;",
      "1445:   __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;",
      "1447:   __Pyx_GOTREF(__pyx_t_2);",
      "1448:   __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;",
      "1449:   __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;",
      "",
      "[Removed Lines]",
      "1446:   if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 26, __pyx_L1_error)",
      "",
      "[Added Lines]",
      "1449:   if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 25, __pyx_L1_error)",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "1496: }",
      "1498: static PyObject *__pyx_pf_17clickhouse_driver_6varint_2read_varint(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_f) {",
      "1502:   PyObject *__pyx_v_read_one = NULL;",
      "1503:   PyObject *__pyx_r = NULL;",
      "1504:   __Pyx_RefNannyDeclarations",
      "1505:   PyObject *__pyx_t_1 = NULL;",
      "1506:   PyObject *__pyx_t_2 = NULL;",
      "1507:   PyObject *__pyx_t_3 = NULL;",
      "1509:   int __pyx_t_5;",
      "1510:   __Pyx_RefNannySetupContext(\"read_varint\", 0);",
      "1519:   __pyx_v_shift = 0;",
      "1528:   __pyx_v_result = 0;",
      "1538:   __Pyx_GOTREF(__pyx_t_1);",
      "1539:   __pyx_v_read_one = __pyx_t_1;",
      "1540:   __pyx_t_1 = 0;",
      "",
      "[Removed Lines]",
      "1499:   Py_ssize_t __pyx_v_shift;",
      "1500:   Py_ssize_t __pyx_v_result;",
      "1501:   unsigned char __pyx_v_i;",
      "1508:   unsigned char __pyx_t_4;",
      "1537:   __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_f, __pyx_n_s_read_one); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 37, __pyx_L1_error)",
      "",
      "[Added Lines]",
      "1502:   unsigned char __pyx_v_shift;",
      "1503:   unsigned PY_LONG_LONG __pyx_v_i;",
      "1504:   unsigned PY_LONG_LONG __pyx_v_result;",
      "1511:   unsigned PY_LONG_LONG __pyx_t_4;",
      "1540:   __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_f, __pyx_n_s_read_one); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 35, __pyx_L1_error)",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "1568:     }",
      "1569:     __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);",
      "1570:     __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;",
      "1572:     __Pyx_GOTREF(__pyx_t_1);",
      "1573:     __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;",
      "1575:     __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;",
      "1576:     __pyx_v_i = __pyx_t_4;",
      "",
      "[Removed Lines]",
      "1571:     if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 40, __pyx_L1_error)",
      "1574:     __pyx_t_4 = __Pyx_PyInt_As_unsigned_char(__pyx_t_1); if (unlikely((__pyx_t_4 == (unsigned char)-1) && PyErr_Occurred())) __PYX_ERR(0, 40, __pyx_L1_error)",
      "",
      "[Added Lines]",
      "1574:     if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 38, __pyx_L1_error)",
      "1577:     __pyx_t_4 = __Pyx_PyInt_As_unsigned_PY_LONG_LONG(__pyx_t_1); if (unlikely((__pyx_t_4 == (unsigned PY_LONG_LONG)-1) && PyErr_Occurred())) __PYX_ERR(0, 38, __pyx_L1_error)",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "1623:   }",
      "1624:   __pyx_L4_break:;",
      "1631:   __Pyx_XDECREF(__pyx_r);",
      "1633:   __Pyx_GOTREF(__pyx_t_1);",
      "1634:   __pyx_r = __pyx_t_1;",
      "1635:   __pyx_t_1 = 0;",
      "1636:   goto __pyx_L0;",
      "",
      "[Removed Lines]",
      "1632:   __pyx_t_1 = PyInt_FromSsize_t(__pyx_v_result); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 46, __pyx_L1_error)",
      "",
      "[Added Lines]",
      "1635:   __pyx_t_1 = __Pyx_PyInt_From_unsigned_PY_LONG_LONG(__pyx_v_result); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 44, __pyx_L1_error)",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "1718:   {&__pyx_n_s_result, __pyx_k_result, sizeof(__pyx_k_result), 0, 0, 1, 1},",
      "1719:   {&__pyx_n_s_shift, __pyx_k_shift, sizeof(__pyx_k_shift), 0, 0, 1, 1},",
      "1720:   {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},",
      "1722:   {&__pyx_n_s_write, __pyx_k_write, sizeof(__pyx_k_write), 0, 0, 1, 1},",
      "1723:   {&__pyx_n_s_write_varint, __pyx_k_write_varint, sizeof(__pyx_k_write_varint), 0, 0, 1, 1},",
      "1724:   {0, 0, 0, 0, 0, 0, 0}",
      "",
      "[Removed Lines]",
      "1721:   {&__pyx_n_s_towrite, __pyx_k_towrite, sizeof(__pyx_k_towrite), 0, 0, 1, 1},",
      "",
      "[Added Lines]",
      "1724:   {&__pyx_n_s_to_write, __pyx_k_to_write, sizeof(__pyx_k_to_write), 0, 0, 1, 1},",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "1742:   __Pyx_GOTREF(__pyx_tuple_);",
      "1743:   __Pyx_GIVEREF(__pyx_tuple_);",
      "1744:   __pyx_codeobj__2 = (PyObject*)__Pyx_PyCode_New(2, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple_, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_clickhouse_driver_varint_pyx, __pyx_n_s_write_varint, 4, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__2)) __PYX_ERR(0, 4, __pyx_L1_error)",
      "1754:   __Pyx_GOTREF(__pyx_tuple__3);",
      "1755:   __Pyx_GIVEREF(__pyx_tuple__3);",
      "1757:   __Pyx_RefNannyFinishContext();",
      "1758:   return 0;",
      "1759:   __pyx_L1_error:;",
      "",
      "[Removed Lines]",
      "1741:   __pyx_tuple_ = PyTuple_Pack(5, __pyx_n_s_number, __pyx_n_s_buf, __pyx_n_s_i, __pyx_n_s_towrite, __pyx_n_s_num_buf); if (unlikely(!__pyx_tuple_)) __PYX_ERR(0, 4, __pyx_L1_error)",
      "1753:   __pyx_tuple__3 = PyTuple_Pack(5, __pyx_n_s_f, __pyx_n_s_shift, __pyx_n_s_result, __pyx_n_s_i, __pyx_n_s_read_one); if (unlikely(!__pyx_tuple__3)) __PYX_ERR(0, 29, __pyx_L1_error)",
      "1756:   __pyx_codeobj__4 = (PyObject*)__Pyx_PyCode_New(1, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__3, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_clickhouse_driver_varint_pyx, __pyx_n_s_read_varint, 29, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__4)) __PYX_ERR(0, 29, __pyx_L1_error)",
      "",
      "[Added Lines]",
      "1744:   __pyx_tuple_ = PyTuple_Pack(5, __pyx_n_s_number, __pyx_n_s_buf, __pyx_n_s_to_write, __pyx_n_s_i, __pyx_n_s_num_buf); if (unlikely(!__pyx_tuple_)) __PYX_ERR(0, 4, __pyx_L1_error)",
      "1756:   __pyx_tuple__3 = PyTuple_Pack(5, __pyx_n_s_f, __pyx_n_s_shift, __pyx_n_s_i, __pyx_n_s_result, __pyx_n_s_read_one); if (unlikely(!__pyx_tuple__3)) __PYX_ERR(0, 28, __pyx_L1_error)",
      "1759:   __pyx_codeobj__4 = (PyObject*)__Pyx_PyCode_New(1, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__3, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_clickhouse_driver_varint_pyx, __pyx_n_s_read_varint, 28, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__4)) __PYX_ERR(0, 28, __pyx_L1_error)",
      "",
      "---------------",
      "--- Hunk 15 ---",
      "[Context before]",
      "2067:   if (PyDict_SetItem(__pyx_d, __pyx_n_s_write_varint, __pyx_t_1) < 0) __PYX_ERR(0, 4, __pyx_L1_error)",
      "2068:   __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;",
      "2078:   __Pyx_GOTREF(__pyx_t_1);",
      "2080:   __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;",
      "",
      "[Removed Lines]",
      "2077:   __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_17clickhouse_driver_6varint_3read_varint, NULL, __pyx_n_s_clickhouse_driver_varint); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 29, __pyx_L1_error)",
      "2079:   if (PyDict_SetItem(__pyx_d, __pyx_n_s_read_varint, __pyx_t_1) < 0) __PYX_ERR(0, 29, __pyx_L1_error)",
      "",
      "[Added Lines]",
      "2080:   __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_17clickhouse_driver_6varint_3read_varint, NULL, __pyx_n_s_clickhouse_driver_varint); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 28, __pyx_L1_error)",
      "2082:   if (PyDict_SetItem(__pyx_d, __pyx_n_s_read_varint, __pyx_t_1) < 0) __PYX_ERR(0, 28, __pyx_L1_error)",
      "",
      "---------------",
      "--- Hunk 16 ---",
      "[Context before]",
      "2900:         return (target_type) value;\\",
      "2901:     }",
      "2906:     const int is_unsigned = neg_one > const_zero;",
      "2907: #if PY_MAJOR_VERSION < 3",
      "2908:     if (likely(PyInt_Check(x))) {",
      "2911:         } else {",
      "2912:             long val = PyInt_AS_LONG(x);",
      "2913:             if (is_unsigned && unlikely(val < 0)) {",
      "2914:                 goto raise_neg_overflow;",
      "2915:             }",
      "2917:         }",
      "2918:     } else",
      "2919: #endif",
      "",
      "[Removed Lines]",
      "2904: static CYTHON_INLINE unsigned char __Pyx_PyInt_As_unsigned_char(PyObject *x) {",
      "2905:     const unsigned char neg_one = (unsigned char) ((unsigned char) 0 - (unsigned char) 1), const_zero = (unsigned char) 0;",
      "2909:         if (sizeof(unsigned char) < sizeof(long)) {",
      "2910:             __PYX_VERIFY_RETURN_INT(unsigned char, long, PyInt_AS_LONG(x))",
      "2916:             return (unsigned char) val;",
      "",
      "[Added Lines]",
      "2907: static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_PY_LONG_LONG(unsigned PY_LONG_LONG value) {",
      "2908:     const unsigned PY_LONG_LONG neg_one = (unsigned PY_LONG_LONG) ((unsigned PY_LONG_LONG) 0 - (unsigned PY_LONG_LONG) 1), const_zero = (unsigned PY_LONG_LONG) 0;",
      "2909:     const int is_unsigned = neg_one > const_zero;",
      "2910:     if (is_unsigned) {",
      "2911:         if (sizeof(unsigned PY_LONG_LONG) < sizeof(long)) {",
      "2912:             return PyInt_FromLong((long) value);",
      "2913:         } else if (sizeof(unsigned PY_LONG_LONG) <= sizeof(unsigned long)) {",
      "2914:             return PyLong_FromUnsignedLong((unsigned long) value);",
      "2915: #ifdef HAVE_LONG_LONG",
      "2916:         } else if (sizeof(unsigned PY_LONG_LONG) <= sizeof(unsigned PY_LONG_LONG)) {",
      "2917:             return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);",
      "2918: #endif",
      "2919:         }",
      "2920:     } else {",
      "2921:         if (sizeof(unsigned PY_LONG_LONG) <= sizeof(long)) {",
      "2922:             return PyInt_FromLong((long) value);",
      "2923: #ifdef HAVE_LONG_LONG",
      "2924:         } else if (sizeof(unsigned PY_LONG_LONG) <= sizeof(PY_LONG_LONG)) {",
      "2925:             return PyLong_FromLongLong((PY_LONG_LONG) value);",
      "2926: #endif",
      "2927:         }",
      "2928:     }",
      "2929:     {",
      "2930:         int one = 1; int little = (int)*(unsigned char *)&one;",
      "2931:         unsigned char *bytes = (unsigned char *)&value;",
      "2932:         return _PyLong_FromByteArray(bytes, sizeof(unsigned PY_LONG_LONG),",
      "2933:                                      little, !is_unsigned);",
      "2934:     }",
      "2935: }",
      "2938: static CYTHON_INLINE unsigned PY_LONG_LONG __Pyx_PyInt_As_unsigned_PY_LONG_LONG(PyObject *x) {",
      "2939:     const unsigned PY_LONG_LONG neg_one = (unsigned PY_LONG_LONG) ((unsigned PY_LONG_LONG) 0 - (unsigned PY_LONG_LONG) 1), const_zero = (unsigned PY_LONG_LONG) 0;",
      "2943:         if (sizeof(unsigned PY_LONG_LONG) < sizeof(long)) {",
      "2944:             __PYX_VERIFY_RETURN_INT(unsigned PY_LONG_LONG, long, PyInt_AS_LONG(x))",
      "2950:             return (unsigned PY_LONG_LONG) val;",
      "",
      "---------------",
      "--- Hunk 17 ---",
      "[Context before]",
      "2922: #if CYTHON_USE_PYLONG_INTERNALS",
      "2923:             const digit* digits = ((PyLongObject*)x)->ob_digit;",
      "2924:             switch (Py_SIZE(x)) {",
      "2927:                 case 2:",
      "2929:                         if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {",
      "2933:                         }",
      "2934:                     }",
      "2935:                     break;",
      "2936:                 case 3:",
      "2938:                         if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {",
      "2942:                         }",
      "2943:                     }",
      "2944:                     break;",
      "2945:                 case 4:",
      "2947:                         if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {",
      "2951:                         }",
      "2952:                     }",
      "2953:                     break;",
      "",
      "[Removed Lines]",
      "2925:                 case  0: return (unsigned char) 0;",
      "2926:                 case  1: __PYX_VERIFY_RETURN_INT(unsigned char, digit, digits[0])",
      "2928:                     if (8 * sizeof(unsigned char) > 1 * PyLong_SHIFT) {",
      "2930:                             __PYX_VERIFY_RETURN_INT(unsigned char, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))",
      "2931:                         } else if (8 * sizeof(unsigned char) >= 2 * PyLong_SHIFT) {",
      "2932:                             return (unsigned char) (((((unsigned char)digits[1]) << PyLong_SHIFT) | (unsigned char)digits[0]));",
      "2937:                     if (8 * sizeof(unsigned char) > 2 * PyLong_SHIFT) {",
      "2939:                             __PYX_VERIFY_RETURN_INT(unsigned char, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))",
      "2940:                         } else if (8 * sizeof(unsigned char) >= 3 * PyLong_SHIFT) {",
      "2941:                             return (unsigned char) (((((((unsigned char)digits[2]) << PyLong_SHIFT) | (unsigned char)digits[1]) << PyLong_SHIFT) | (unsigned char)digits[0]));",
      "2946:                     if (8 * sizeof(unsigned char) > 3 * PyLong_SHIFT) {",
      "2948:                             __PYX_VERIFY_RETURN_INT(unsigned char, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))",
      "2949:                         } else if (8 * sizeof(unsigned char) >= 4 * PyLong_SHIFT) {",
      "2950:                             return (unsigned char) (((((((((unsigned char)digits[3]) << PyLong_SHIFT) | (unsigned char)digits[2]) << PyLong_SHIFT) | (unsigned char)digits[1]) << PyLong_SHIFT) | (unsigned char)digits[0]));",
      "",
      "[Added Lines]",
      "2959:                 case  0: return (unsigned PY_LONG_LONG) 0;",
      "2960:                 case  1: __PYX_VERIFY_RETURN_INT(unsigned PY_LONG_LONG, digit, digits[0])",
      "2962:                     if (8 * sizeof(unsigned PY_LONG_LONG) > 1 * PyLong_SHIFT) {",
      "2964:                             __PYX_VERIFY_RETURN_INT(unsigned PY_LONG_LONG, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))",
      "2965:                         } else if (8 * sizeof(unsigned PY_LONG_LONG) >= 2 * PyLong_SHIFT) {",
      "2966:                             return (unsigned PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));",
      "2971:                     if (8 * sizeof(unsigned PY_LONG_LONG) > 2 * PyLong_SHIFT) {",
      "2973:                             __PYX_VERIFY_RETURN_INT(unsigned PY_LONG_LONG, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))",
      "2974:                         } else if (8 * sizeof(unsigned PY_LONG_LONG) >= 3 * PyLong_SHIFT) {",
      "2975:                             return (unsigned PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));",
      "2980:                     if (8 * sizeof(unsigned PY_LONG_LONG) > 3 * PyLong_SHIFT) {",
      "2982:                             __PYX_VERIFY_RETURN_INT(unsigned PY_LONG_LONG, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))",
      "2983:                         } else if (8 * sizeof(unsigned PY_LONG_LONG) >= 4 * PyLong_SHIFT) {",
      "2984:                             return (unsigned PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));",
      "",
      "---------------",
      "--- Hunk 18 ---",
      "[Context before]",
      "2961:             {",
      "2962:                 int result = PyObject_RichCompareBool(x, Py_False, Py_LT);",
      "2963:                 if (unlikely(result < 0))",
      "2965:                 if (unlikely(result == 1))",
      "2966:                     goto raise_neg_overflow;",
      "2967:             }",
      "2968: #endif",
      "2971: #ifdef HAVE_LONG_LONG",
      "2974: #endif",
      "2975:             }",
      "2976:         } else {",
      "2977: #if CYTHON_USE_PYLONG_INTERNALS",
      "2978:             const digit* digits = ((PyLongObject*)x)->ob_digit;",
      "2979:             switch (Py_SIZE(x)) {",
      "2983:                 case -2:",
      "2985:                         if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {",
      "2989:                         }",
      "2990:                     }",
      "2991:                     break;",
      "2992:                 case 2:",
      "2994:                         if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {",
      "2998:                         }",
      "2999:                     }",
      "3000:                     break;",
      "3001:                 case -3:",
      "3003:                         if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {",
      "3007:                         }",
      "3008:                     }",
      "3009:                     break;",
      "3010:                 case 3:",
      "3012:                         if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {",
      "3016:                         }",
      "3017:                     }",
      "3018:                     break;",
      "3019:                 case -4:",
      "3021:                         if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {",
      "3025:                         }",
      "3026:                     }",
      "3027:                     break;",
      "3028:                 case 4:",
      "3030:                         if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {",
      "3034:                         }",
      "3035:                     }",
      "3036:                     break;",
      "3037:             }",
      "3038: #endif",
      "3041: #ifdef HAVE_LONG_LONG",
      "3044: #endif",
      "3045:             }",
      "3046:         }",
      "",
      "[Removed Lines]",
      "2964:                     return (unsigned char) -1;",
      "2969:             if (sizeof(unsigned char) <= sizeof(unsigned long)) {",
      "2970:                 __PYX_VERIFY_RETURN_INT_EXC(unsigned char, unsigned long, PyLong_AsUnsignedLong(x))",
      "2972:             } else if (sizeof(unsigned char) <= sizeof(unsigned PY_LONG_LONG)) {",
      "2973:                 __PYX_VERIFY_RETURN_INT_EXC(unsigned char, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))",
      "2980:                 case  0: return (unsigned char) 0;",
      "2981:                 case -1: __PYX_VERIFY_RETURN_INT(unsigned char, sdigit, (sdigit) (-(sdigit)digits[0]))",
      "2982:                 case  1: __PYX_VERIFY_RETURN_INT(unsigned char,  digit, +digits[0])",
      "2984:                     if (8 * sizeof(unsigned char) - 1 > 1 * PyLong_SHIFT) {",
      "2986:                             __PYX_VERIFY_RETURN_INT(unsigned char, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))",
      "2987:                         } else if (8 * sizeof(unsigned char) - 1 > 2 * PyLong_SHIFT) {",
      "2988:                             return (unsigned char) (((unsigned char)-1)*(((((unsigned char)digits[1]) << PyLong_SHIFT) | (unsigned char)digits[0])));",
      "2993:                     if (8 * sizeof(unsigned char) > 1 * PyLong_SHIFT) {",
      "2995:                             __PYX_VERIFY_RETURN_INT(unsigned char, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))",
      "2996:                         } else if (8 * sizeof(unsigned char) - 1 > 2 * PyLong_SHIFT) {",
      "2997:                             return (unsigned char) ((((((unsigned char)digits[1]) << PyLong_SHIFT) | (unsigned char)digits[0])));",
      "3002:                     if (8 * sizeof(unsigned char) - 1 > 2 * PyLong_SHIFT) {",
      "3004:                             __PYX_VERIFY_RETURN_INT(unsigned char, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))",
      "3005:                         } else if (8 * sizeof(unsigned char) - 1 > 3 * PyLong_SHIFT) {",
      "3006:                             return (unsigned char) (((unsigned char)-1)*(((((((unsigned char)digits[2]) << PyLong_SHIFT) | (unsigned char)digits[1]) << PyLong_SHIFT) | (unsigned char)digits[0])));",
      "3011:                     if (8 * sizeof(unsigned char) > 2 * PyLong_SHIFT) {",
      "3013:                             __PYX_VERIFY_RETURN_INT(unsigned char, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))",
      "3014:                         } else if (8 * sizeof(unsigned char) - 1 > 3 * PyLong_SHIFT) {",
      "3015:                             return (unsigned char) ((((((((unsigned char)digits[2]) << PyLong_SHIFT) | (unsigned char)digits[1]) << PyLong_SHIFT) | (unsigned char)digits[0])));",
      "3020:                     if (8 * sizeof(unsigned char) - 1 > 3 * PyLong_SHIFT) {",
      "3022:                             __PYX_VERIFY_RETURN_INT(unsigned char, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))",
      "3023:                         } else if (8 * sizeof(unsigned char) - 1 > 4 * PyLong_SHIFT) {",
      "3024:                             return (unsigned char) (((unsigned char)-1)*(((((((((unsigned char)digits[3]) << PyLong_SHIFT) | (unsigned char)digits[2]) << PyLong_SHIFT) | (unsigned char)digits[1]) << PyLong_SHIFT) | (unsigned char)digits[0])));",
      "3029:                     if (8 * sizeof(unsigned char) > 3 * PyLong_SHIFT) {",
      "3031:                             __PYX_VERIFY_RETURN_INT(unsigned char, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))",
      "3032:                         } else if (8 * sizeof(unsigned char) - 1 > 4 * PyLong_SHIFT) {",
      "3033:                             return (unsigned char) ((((((((((unsigned char)digits[3]) << PyLong_SHIFT) | (unsigned char)digits[2]) << PyLong_SHIFT) | (unsigned char)digits[1]) << PyLong_SHIFT) | (unsigned char)digits[0])));",
      "3039:             if (sizeof(unsigned char) <= sizeof(long)) {",
      "3040:                 __PYX_VERIFY_RETURN_INT_EXC(unsigned char, long, PyLong_AsLong(x))",
      "3042:             } else if (sizeof(unsigned char) <= sizeof(PY_LONG_LONG)) {",
      "3043:                 __PYX_VERIFY_RETURN_INT_EXC(unsigned char, PY_LONG_LONG, PyLong_AsLongLong(x))",
      "",
      "[Added Lines]",
      "2998:                     return (unsigned PY_LONG_LONG) -1;",
      "3003:             if (sizeof(unsigned PY_LONG_LONG) <= sizeof(unsigned long)) {",
      "3004:                 __PYX_VERIFY_RETURN_INT_EXC(unsigned PY_LONG_LONG, unsigned long, PyLong_AsUnsignedLong(x))",
      "3006:             } else if (sizeof(unsigned PY_LONG_LONG) <= sizeof(unsigned PY_LONG_LONG)) {",
      "3007:                 __PYX_VERIFY_RETURN_INT_EXC(unsigned PY_LONG_LONG, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))",
      "3014:                 case  0: return (unsigned PY_LONG_LONG) 0;",
      "3015:                 case -1: __PYX_VERIFY_RETURN_INT(unsigned PY_LONG_LONG, sdigit, (sdigit) (-(sdigit)digits[0]))",
      "3016:                 case  1: __PYX_VERIFY_RETURN_INT(unsigned PY_LONG_LONG,  digit, +digits[0])",
      "3018:                     if (8 * sizeof(unsigned PY_LONG_LONG) - 1 > 1 * PyLong_SHIFT) {",
      "3020:                             __PYX_VERIFY_RETURN_INT(unsigned PY_LONG_LONG, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))",
      "3021:                         } else if (8 * sizeof(unsigned PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {",
      "3022:                             return (unsigned PY_LONG_LONG) (((unsigned PY_LONG_LONG)-1)*(((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0])));",
      "3027:                     if (8 * sizeof(unsigned PY_LONG_LONG) > 1 * PyLong_SHIFT) {",
      "3029:                             __PYX_VERIFY_RETURN_INT(unsigned PY_LONG_LONG, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))",
      "3030:                         } else if (8 * sizeof(unsigned PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {",
      "3031:                             return (unsigned PY_LONG_LONG) ((((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0])));",
      "3036:                     if (8 * sizeof(unsigned PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {",
      "3038:                             __PYX_VERIFY_RETURN_INT(unsigned PY_LONG_LONG, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))",
      "3039:                         } else if (8 * sizeof(unsigned PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {",
      "3040:                             return (unsigned PY_LONG_LONG) (((unsigned PY_LONG_LONG)-1)*(((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0])));",
      "3045:                     if (8 * sizeof(unsigned PY_LONG_LONG) > 2 * PyLong_SHIFT) {",
      "3047:                             __PYX_VERIFY_RETURN_INT(unsigned PY_LONG_LONG, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))",
      "3048:                         } else if (8 * sizeof(unsigned PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {",
      "3049:                             return (unsigned PY_LONG_LONG) ((((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0])));",
      "3054:                     if (8 * sizeof(unsigned PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {",
      "3056:                             __PYX_VERIFY_RETURN_INT(unsigned PY_LONG_LONG, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))",
      "3057:                         } else if (8 * sizeof(unsigned PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {",
      "3058:                             return (unsigned PY_LONG_LONG) (((unsigned PY_LONG_LONG)-1)*(((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0])));",
      "3063:                     if (8 * sizeof(unsigned PY_LONG_LONG) > 3 * PyLong_SHIFT) {",
      "3065:                             __PYX_VERIFY_RETURN_INT(unsigned PY_LONG_LONG, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))",
      "3066:                         } else if (8 * sizeof(unsigned PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {",
      "3067:                             return (unsigned PY_LONG_LONG) ((((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0])));",
      "3073:             if (sizeof(unsigned PY_LONG_LONG) <= sizeof(long)) {",
      "3074:                 __PYX_VERIFY_RETURN_INT_EXC(unsigned PY_LONG_LONG, long, PyLong_AsLong(x))",
      "3076:             } else if (sizeof(unsigned PY_LONG_LONG) <= sizeof(PY_LONG_LONG)) {",
      "3077:                 __PYX_VERIFY_RETURN_INT_EXC(unsigned PY_LONG_LONG, PY_LONG_LONG, PyLong_AsLongLong(x))",
      "",
      "---------------",
      "--- Hunk 19 ---",
      "[Context before]",
      "3049:             PyErr_SetString(PyExc_RuntimeError,",
      "3050:                             \"_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers\");",
      "3051: #else",
      "3053:             PyObject *v = __Pyx_PyNumber_IntOrLong(x);",
      "3054:  #if PY_MAJOR_VERSION < 3",
      "3055:             if (likely(v) && !PyLong_Check(v)) {",
      "",
      "[Removed Lines]",
      "3052:             unsigned char val;",
      "",
      "[Added Lines]",
      "3086:             unsigned PY_LONG_LONG val;",
      "",
      "---------------",
      "--- Hunk 20 ---",
      "[Context before]",
      "3069:                     return val;",
      "3070:             }",
      "3071: #endif",
      "3073:         }",
      "3074:     } else {",
      "3076:         PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);",
      "3079:         Py_DECREF(tmp);",
      "3080:         return val;",
      "3081:     }",
      "3082: raise_overflow:",
      "3083:     PyErr_SetString(PyExc_OverflowError,",
      "3086: raise_neg_overflow:",
      "3087:     PyErr_SetString(PyExc_OverflowError,",
      "3090: }",
      "",
      "[Removed Lines]",
      "3072:             return (unsigned char) -1;",
      "3075:         unsigned char val;",
      "3077:         if (!tmp) return (unsigned char) -1;",
      "3078:         val = __Pyx_PyInt_As_unsigned_char(tmp);",
      "3084:         \"value too large to convert to unsigned char\");",
      "3085:     return (unsigned char) -1;",
      "3088:         \"can't convert negative value to unsigned char\");",
      "3089:     return (unsigned char) -1;",
      "",
      "[Added Lines]",
      "3106:             return (unsigned PY_LONG_LONG) -1;",
      "3109:         unsigned PY_LONG_LONG val;",
      "3111:         if (!tmp) return (unsigned PY_LONG_LONG) -1;",
      "3112:         val = __Pyx_PyInt_As_unsigned_PY_LONG_LONG(tmp);",
      "3118:         \"value too large to convert to unsigned PY_LONG_LONG\");",
      "3119:     return (unsigned PY_LONG_LONG) -1;",
      "3122:         \"can't convert negative value to unsigned PY_LONG_LONG\");",
      "3123:     return (unsigned PY_LONG_LONG) -1;",
      "",
      "---------------"
    ],
    "clickhouse_driver/varint.pyx||clickhouse_driver/varint.pyx": [
      "File: clickhouse_driver/varint.pyx -> clickhouse_driver/varint.pyx",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: from cpython cimport Py_INCREF, PyBytes_FromStringAndSize",
      "5:     \"\"\"",
      "6:     Writes integer of variable length using LEB128.",
      "7:     \"\"\"",
      "13:     cdef unsigned char num_buf[32]",
      "15:     while True:",
      "17:         number >>= 7",
      "18:         if number:",
      "20:             i += 1",
      "21:         else:",
      "23:             i += 1",
      "24:             break",
      "",
      "[Removed Lines]",
      "4: def write_varint(Py_ssize_t number, buf):",
      "8:     cdef Py_ssize_t i = 0",
      "9:     cdef unsigned char towrite",
      "10:     # Py_ssize_t checks integer on function call and",
      "11:     # raises OverflowError if integer overflows Py_ssize_t.",
      "12:     # Long enough for handling Py_ssize_t.",
      "16:         towrite = number & 0x7f",
      "19:             num_buf[i] = towrite | 0x80",
      "22:             num_buf[i] = towrite",
      "",
      "[Added Lines]",
      "4: def write_varint(unsigned long long number, buf):",
      "8:     cdef unsigned char to_write, i = 0",
      "9:     # unsigned PY_LONG_LONG checks integer on function call and",
      "10:     # raises OverflowError if integer overflows unsigned PY_LONG_LONG.",
      "11:     # Long enough for handling unsigned PY_LONG_LONG.",
      "15:         to_write = number & 0x7f",
      "18:             num_buf[i] = to_write | 0x80",
      "21:             num_buf[i] = to_write",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "30:     \"\"\"",
      "31:     Reads integer of variable length using LEB128.",
      "32:     \"\"\"",
      "37:     read_one = f.read_one",
      "",
      "[Removed Lines]",
      "33:     cdef Py_ssize_t shift = 0",
      "34:     cdef Py_ssize_t result = 0",
      "35:     cdef unsigned char i",
      "",
      "[Added Lines]",
      "32:     cdef unsigned char shift = 0",
      "33:     cdef unsigned long long i, result = 0",
      "",
      "---------------"
    ],
    "tests/test_varint.py||tests/test_varint.py": [
      "File: tests/test_varint.py -> tests/test_varint.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: from io import BytesIO",
      "2: from unittest import TestCase",
      "4: from clickhouse_driver.varint import read_varint, write_varint",
      "7: class VarIntTestCase(TestCase):",
      "8:     def test_check_not_negative(self):",
      "9:         n = 0x9FFFFFFF",
      "11:         buf = BytesIO()",
      "12:         write_varint(n, buf)",
      "13:         val = buf.getvalue()",
      "14:         self.assertEqual(b'\\xFF\\xFF\\xFF\\xFF\\t', val)",
      "16:         buf = BytesIO(val)",
      "17:         buf.read_one = lambda: ord(buf.read(1))",
      "18:         m = read_varint(buf)",
      "19:         self.assertEqual(m, n)",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "84e8429e27d61b81c5217bf2116b98ebd50e7b0f",
      "candidate_info": {
        "commit_hash": "84e8429e27d61b81c5217bf2116b98ebd50e7b0f",
        "repo": "mymarilyn/clickhouse-driver",
        "commit_url": "https://github.com/mymarilyn/clickhouse-driver/commit/84e8429e27d61b81c5217bf2116b98ebd50e7b0f",
        "files": [
          ".flake8",
          "clickhouse_driver/block.py",
          "clickhouse_driver/blockstreamprofileinfo.py",
          "clickhouse_driver/bufferedreader.c",
          "clickhouse_driver/clientinfo.py",
          "clickhouse_driver/columns/stringcolumn.c",
          "clickhouse_driver/columns/stringcolumn.pyx",
          "clickhouse_driver/connection.py",
          "clickhouse_driver/progress.py",
          "clickhouse_driver/reader.py",
          "clickhouse_driver/settings/types.py",
          "clickhouse_driver/streams/native.py",
          "clickhouse_driver/varint.c",
          "clickhouse_driver/varint.pyx",
          "clickhouse_driver/writer.py",
          "setup.py"
        ],
        "message": "Cythonization varint",
        "before_after_code_files": [
          "clickhouse_driver/block.py||clickhouse_driver/block.py",
          "clickhouse_driver/blockstreamprofileinfo.py||clickhouse_driver/blockstreamprofileinfo.py",
          "clickhouse_driver/bufferedreader.c||clickhouse_driver/bufferedreader.c",
          "clickhouse_driver/clientinfo.py||clickhouse_driver/clientinfo.py",
          "clickhouse_driver/columns/stringcolumn.c||clickhouse_driver/columns/stringcolumn.c",
          "clickhouse_driver/columns/stringcolumn.pyx||clickhouse_driver/columns/stringcolumn.pyx",
          "clickhouse_driver/connection.py||clickhouse_driver/connection.py",
          "clickhouse_driver/progress.py||clickhouse_driver/progress.py",
          "clickhouse_driver/reader.py||clickhouse_driver/reader.py",
          "clickhouse_driver/settings/types.py||clickhouse_driver/settings/types.py",
          "clickhouse_driver/streams/native.py||clickhouse_driver/streams/native.py",
          "clickhouse_driver/varint.c||clickhouse_driver/varint.c",
          "clickhouse_driver/varint.pyx||clickhouse_driver/varint.pyx",
          "clickhouse_driver/writer.py||clickhouse_driver/writer.py",
          "setup.py||setup.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "clickhouse_driver/varint.c||clickhouse_driver/varint.c",
            "clickhouse_driver/varint.pyx||clickhouse_driver/varint.pyx"
          ],
          "candidate": [
            "clickhouse_driver/varint.c||clickhouse_driver/varint.c",
            "clickhouse_driver/varint.pyx||clickhouse_driver/varint.pyx"
          ]
        }
      },
      "candidate_diff": {
        "clickhouse_driver/block.py||clickhouse_driver/block.py": [
          "File: clickhouse_driver/block.py -> clickhouse_driver/block.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: from itertools import chain",
          "3: from .reader import read_varint, read_binary_uint8, read_binary_int32",
          "7: class BlockInfo(object):",
          "",
          "[Removed Lines]",
          "4: from .writer import write_varint, write_binary_uint8, write_binary_int32",
          "",
          "[Added Lines]",
          "4: from .varint import write_varint",
          "5: from .writer import write_binary_uint8, write_binary_int32",
          "",
          "---------------"
        ],
        "clickhouse_driver/blockstreamprofileinfo.py||clickhouse_driver/blockstreamprofileinfo.py": [
          "File: clickhouse_driver/blockstreamprofileinfo.py -> clickhouse_driver/blockstreamprofileinfo.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: class BlockStreamProfileInfo(object):",
          "",
          "[Removed Lines]",
          "1: from .reader import read_varint, read_binary_uint8",
          "",
          "[Added Lines]",
          "1: from .reader import read_binary_uint8",
          "2: from .varint import read_varint",
          "",
          "---------------"
        ],
        "clickhouse_driver/bufferedreader.c||clickhouse_driver/bufferedreader.c": [
          "File: clickhouse_driver/bufferedreader.c -> clickhouse_driver/bufferedreader.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: #elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)",
          "21:     #error Cython requires Python 2.6+ or Python 3.3+.",
          "22: #else",
          "25: #define CYTHON_FUTURE_DIVISION 1",
          "26: #include <stddef.h>",
          "27: #ifndef offsetof",
          "",
          "[Removed Lines]",
          "23: #define CYTHON_ABI \"0_29_12\"",
          "24: #define CYTHON_HEX_VERSION 0x001D0CF0",
          "",
          "[Added Lines]",
          "23: #define CYTHON_ABI \"0_29_13\"",
          "24: #define CYTHON_HEX_VERSION 0x001D0DF0",
          "",
          "---------------"
        ],
        "clickhouse_driver/clientinfo.py||clickhouse_driver/clientinfo.py": [
          "File: clickhouse_driver/clientinfo.py -> clickhouse_driver/clientinfo.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: from . import defines",
          "5: from . import errors",
          "9: class ClientInfo(object):",
          "",
          "[Removed Lines]",
          "6: from .writer import write_binary_str, write_varint, write_binary_uint8",
          "",
          "[Added Lines]",
          "6: from .varint import write_varint",
          "7: from .writer import write_binary_str, write_binary_uint8",
          "",
          "---------------"
        ],
        "clickhouse_driver/columns/stringcolumn.c||clickhouse_driver/columns/stringcolumn.c": [
          "File: clickhouse_driver/columns/stringcolumn.c -> clickhouse_driver/columns/stringcolumn.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: #define PY_SSIZE_T_CLEAN",
          "4: #include \"Python.h\"",
          "5: #ifndef Py_PYTHON_H",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4: {",
          "5:     \"distutils\": {",
          "6:         \"depends\": [],",
          "7:         \"name\": \"clickhouse_driver.columns.stringcolumn\",",
          "8:         \"sources\": [",
          "9:             \"clickhouse_driver/columns/stringcolumn.pyx\"",
          "10:         ]",
          "11:     },",
          "12:     \"module_name\": \"clickhouse_driver.columns.stringcolumn\"",
          "13: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "9: #else",
          "10: #define CYTHON_ABI \"0_29_13\"",
          "11: #define CYTHON_HEX_VERSION 0x001D0DF0",
          "13: #include <stddef.h>",
          "14: #ifndef offsetof",
          "15:   #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )",
          "",
          "[Removed Lines]",
          "12: #define CYTHON_FUTURE_DIVISION 0",
          "",
          "[Added Lines]",
          "25: #define CYTHON_FUTURE_DIVISION 1",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1151: static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals);",
          "1161: static CYTHON_INLINE PyObject* __Pyx_PyObject_GetSlice(",
          "1162:         PyObject* obj, Py_ssize_t cstart, Py_ssize_t cstop,",
          "",
          "[Removed Lines]",
          "1154: #if PY_MAJOR_VERSION >= 3",
          "1155: #define __Pyx_PyString_Equals __Pyx_PyUnicode_Equals",
          "1156: #else",
          "1157: #define __Pyx_PyString_Equals __Pyx_PyBytes_Equals",
          "1158: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1439: static const char __pyx_k_kwargs[] = \"kwargs\";",
          "1440: static const char __pyx_k_length[] = \"length\";",
          "1441: static const char __pyx_k_module[] = \"__module__\";",
          "1443: static const char __pyx_k_buf_pos[] = \"buf_pos\";",
          "1444: static const char __pyx_k_ch_type[] = \"ch_type\";",
          "1445: static const char __pyx_k_context[] = \"context\";",
          "",
          "[Removed Lines]",
          "1442: static const char __pyx_k_writer[] = \"writer\";",
          "",
          "[Added Lines]",
          "1448: static const char __pyx_k_varint[] = \"varint\";",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1494: static PyObject *__pyx_n_s_ByteString_write_items;",
          "1495: static PyObject *__pyx_n_s_Column;",
          "1496: static PyObject *__pyx_n_s_FixedString;",
          "1497: static PyObject *__pyx_n_s_FixedString___init;",
          "1498: static PyObject *__pyx_n_s_FixedString_read_items;",
          "1499: static PyObject *__pyx_n_s_FixedString_write_items;",
          "1500: static PyObject *__pyx_n_s_MemoryError;",
          "1501: static PyObject *__pyx_n_s_String;",
          "1502: static PyObject *__pyx_n_s_String_prepare_null;",
          "1503: static PyObject *__pyx_n_s_String_read_items;",
          "1504: static PyObject *__pyx_n_s_String_write_items;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1503: static PyObject *__pyx_n_u_FixedString;",
          "1509: static PyObject *__pyx_n_u_String;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1506: static PyObject *__pyx_n_s_UnicodeDecodeError;",
          "1507: static PyObject *__pyx_n_s__2;",
          "1508: static PyObject *__pyx_kp_b__2;",
          "1509: static PyObject *__pyx_n_s_base;",
          "1510: static PyObject *__pyx_n_s_buf;",
          "1511: static PyObject *__pyx_n_s_buf_pos;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1517: static PyObject *__pyx_kp_u__2;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1519: static PyObject *__pyx_n_s_codecs;",
          "1520: static PyObject *__pyx_n_s_column_options;",
          "1521: static PyObject *__pyx_n_s_compat;",
          "1523: static PyObject *__pyx_n_s_create_string_column;",
          "1524: static PyObject *__pyx_n_s_data;",
          "1525: static PyObject *__pyx_n_s_data_ptr;",
          "",
          "[Removed Lines]",
          "1522: static PyObject *__pyx_n_s_context;",
          "",
          "[Added Lines]",
          "1531: static PyObject *__pyx_n_u_context;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1556: static PyObject *__pyx_n_s_spec;",
          "1557: static PyObject *__pyx_n_s_string_types;",
          "1558: static PyObject *__pyx_n_s_strings_as_bytes;",
          "1559: static PyObject *__pyx_n_s_super;",
          "1560: static PyObject *__pyx_n_s_test;",
          "1561: static PyObject *__pyx_n_s_utf_8_encode;",
          "1562: static PyObject *__pyx_n_s_util;",
          "1563: static PyObject *__pyx_n_s_value;",
          "1564: static PyObject *__pyx_n_s_value_len;",
          "1565: static PyObject *__pyx_n_s_write;",
          "1566: static PyObject *__pyx_n_s_write_items;",
          "1567: static PyObject *__pyx_n_s_write_varint;",
          "",
          "[Removed Lines]",
          "1568: static PyObject *__pyx_n_s_writer;",
          "",
          "[Added Lines]",
          "1568: static PyObject *__pyx_n_u_strings_as_bytes;",
          "1575: static PyObject *__pyx_n_s_varint;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "4382:   __Pyx_GOTREF(__pyx_t_1);",
          "4383:   __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_client_settings); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 150, __pyx_L1_error)",
          "4384:   __Pyx_GOTREF(__pyx_t_2);",
          "",
          "[Removed Lines]",
          "4381:   __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_v_column_options, __pyx_n_s_context); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 150, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "4391:   __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_v_column_options, __pyx_n_u_context); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 150, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "4397:   __Pyx_GOTREF(__pyx_t_2);",
          "4398:   __pyx_v_strings_as_bytes = __pyx_t_2;",
          "4399:   __pyx_t_2 = 0;",
          "",
          "[Removed Lines]",
          "4396:   __pyx_t_2 = __Pyx_PyObject_Dict_GetItem(__pyx_v_client_settings, __pyx_n_s_strings_as_bytes); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 151, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "4406:   __pyx_t_2 = __Pyx_PyObject_Dict_GetItem(__pyx_v_client_settings, __pyx_n_u_strings_as_bytes); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 151, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "4409:   if (__pyx_t_3) {",
          "",
          "[Removed Lines]",
          "4408:   __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_v_spec, __pyx_n_s_String, Py_EQ)); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 153, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "4418:   __pyx_t_3 = (__Pyx_PyUnicode_Equals(__pyx_v_spec, __pyx_n_u_String, Py_EQ)); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 153, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "4612:   {&__pyx_n_s_ByteString_write_items, __pyx_k_ByteString_write_items, sizeof(__pyx_k_ByteString_write_items), 0, 0, 1, 1},",
          "4613:   {&__pyx_n_s_Column, __pyx_k_Column, sizeof(__pyx_k_Column), 0, 0, 1, 1},",
          "4614:   {&__pyx_n_s_FixedString, __pyx_k_FixedString, sizeof(__pyx_k_FixedString), 0, 0, 1, 1},",
          "4615:   {&__pyx_n_s_FixedString___init, __pyx_k_FixedString___init, sizeof(__pyx_k_FixedString___init), 0, 0, 1, 1},",
          "4616:   {&__pyx_n_s_FixedString_read_items, __pyx_k_FixedString_read_items, sizeof(__pyx_k_FixedString_read_items), 0, 0, 1, 1},",
          "4617:   {&__pyx_n_s_FixedString_write_items, __pyx_k_FixedString_write_items, sizeof(__pyx_k_FixedString_write_items), 0, 0, 1, 1},",
          "4618:   {&__pyx_n_s_MemoryError, __pyx_k_MemoryError, sizeof(__pyx_k_MemoryError), 0, 0, 1, 1},",
          "4619:   {&__pyx_n_s_String, __pyx_k_String, sizeof(__pyx_k_String), 0, 0, 1, 1},",
          "4620:   {&__pyx_n_s_String_prepare_null, __pyx_k_String_prepare_null, sizeof(__pyx_k_String_prepare_null), 0, 0, 1, 1},",
          "4621:   {&__pyx_n_s_String_read_items, __pyx_k_String_read_items, sizeof(__pyx_k_String_read_items), 0, 0, 1, 1},",
          "4622:   {&__pyx_n_s_String_write_items, __pyx_k_String_write_items, sizeof(__pyx_k_String_write_items), 0, 0, 1, 1},",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4625:   {&__pyx_n_u_FixedString, __pyx_k_FixedString, sizeof(__pyx_k_FixedString), 0, 1, 0, 1},",
          "4631:   {&__pyx_n_u_String, __pyx_k_String, sizeof(__pyx_k_String), 0, 1, 0, 1},",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "4624:   {&__pyx_n_s_UnicodeDecodeError, __pyx_k_UnicodeDecodeError, sizeof(__pyx_k_UnicodeDecodeError), 0, 0, 1, 1},",
          "4625:   {&__pyx_n_s__2, __pyx_k__2, sizeof(__pyx_k__2), 0, 0, 1, 1},",
          "4626:   {&__pyx_kp_b__2, __pyx_k__2, sizeof(__pyx_k__2), 0, 0, 0, 0},",
          "4627:   {&__pyx_n_s_base, __pyx_k_base, sizeof(__pyx_k_base), 0, 0, 1, 1},",
          "4628:   {&__pyx_n_s_buf, __pyx_k_buf, sizeof(__pyx_k_buf), 0, 0, 1, 1},",
          "4629:   {&__pyx_n_s_buf_pos, __pyx_k_buf_pos, sizeof(__pyx_k_buf_pos), 0, 0, 1, 1},",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4639:   {&__pyx_kp_u__2, __pyx_k__2, sizeof(__pyx_k__2), 0, 1, 0, 0},",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "4637:   {&__pyx_n_s_codecs, __pyx_k_codecs, sizeof(__pyx_k_codecs), 0, 0, 1, 1},",
          "4638:   {&__pyx_n_s_column_options, __pyx_k_column_options, sizeof(__pyx_k_column_options), 0, 0, 1, 1},",
          "4639:   {&__pyx_n_s_compat, __pyx_k_compat, sizeof(__pyx_k_compat), 0, 0, 1, 1},",
          "4641:   {&__pyx_n_s_create_string_column, __pyx_k_create_string_column, sizeof(__pyx_k_create_string_column), 0, 0, 1, 1},",
          "4642:   {&__pyx_n_s_data, __pyx_k_data, sizeof(__pyx_k_data), 0, 0, 1, 1},",
          "4643:   {&__pyx_n_s_data_ptr, __pyx_k_data_ptr, sizeof(__pyx_k_data_ptr), 0, 0, 1, 1},",
          "",
          "[Removed Lines]",
          "4640:   {&__pyx_n_s_context, __pyx_k_context, sizeof(__pyx_k_context), 0, 0, 1, 1},",
          "",
          "[Added Lines]",
          "4653:   {&__pyx_n_u_context, __pyx_k_context, sizeof(__pyx_k_context), 0, 1, 0, 1},",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "4674:   {&__pyx_n_s_spec, __pyx_k_spec, sizeof(__pyx_k_spec), 0, 0, 1, 1},",
          "4675:   {&__pyx_n_s_string_types, __pyx_k_string_types, sizeof(__pyx_k_string_types), 0, 0, 1, 1},",
          "4676:   {&__pyx_n_s_strings_as_bytes, __pyx_k_strings_as_bytes, sizeof(__pyx_k_strings_as_bytes), 0, 0, 1, 1},",
          "4677:   {&__pyx_n_s_super, __pyx_k_super, sizeof(__pyx_k_super), 0, 0, 1, 1},",
          "4678:   {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},",
          "4679:   {&__pyx_n_s_utf_8_encode, __pyx_k_utf_8_encode, sizeof(__pyx_k_utf_8_encode), 0, 0, 1, 1},",
          "4680:   {&__pyx_n_s_util, __pyx_k_util, sizeof(__pyx_k_util), 0, 0, 1, 1},",
          "4681:   {&__pyx_n_s_value, __pyx_k_value, sizeof(__pyx_k_value), 0, 0, 1, 1},",
          "4682:   {&__pyx_n_s_value_len, __pyx_k_value_len, sizeof(__pyx_k_value_len), 0, 0, 1, 1},",
          "4683:   {&__pyx_n_s_write, __pyx_k_write, sizeof(__pyx_k_write), 0, 0, 1, 1},",
          "4684:   {&__pyx_n_s_write_items, __pyx_k_write_items, sizeof(__pyx_k_write_items), 0, 0, 1, 1},",
          "4685:   {&__pyx_n_s_write_varint, __pyx_k_write_varint, sizeof(__pyx_k_write_varint), 0, 0, 1, 1},",
          "4687:   {0, 0, 0, 0, 0, 0, 0}",
          "4688: };",
          "4689: static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(void) {",
          "",
          "[Removed Lines]",
          "4686:   {&__pyx_n_s_writer, __pyx_k_writer, sizeof(__pyx_k_writer), 0, 0, 1, 1},",
          "",
          "[Added Lines]",
          "4690:   {&__pyx_n_u_strings_as_bytes, __pyx_k_strings_as_bytes, sizeof(__pyx_k_strings_as_bytes), 0, 1, 0, 1},",
          "4697:   {&__pyx_n_s_varint, __pyx_k_varint, sizeof(__pyx_k_varint), 0, 0, 1, 1},",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "5183:   __Pyx_INCREF(__pyx_n_s_write_varint);",
          "5184:   __Pyx_GIVEREF(__pyx_n_s_write_varint);",
          "5185:   PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_write_varint);",
          "5187:   __Pyx_GOTREF(__pyx_t_1);",
          "5188:   __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;",
          "5189:   __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_write_varint); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 11, __pyx_L1_error)",
          "",
          "[Removed Lines]",
          "5186:   __pyx_t_1 = __Pyx_Import(__pyx_n_s_writer, __pyx_t_2, 2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 11, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "5200:   __pyx_t_1 = __Pyx_Import(__pyx_n_s_varint, __pyx_t_2, 2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 11, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "5246:   __Pyx_INCREF(__pyx_n_s_utf_8_encode);",
          "5247:   __Pyx_GIVEREF(__pyx_n_s_utf_8_encode);",
          "5248:   PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_utf_8_encode);",
          "5250:   __Pyx_GOTREF(__pyx_t_2);",
          "5251:   __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;",
          "5252:   __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_utf_8_encode); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 15, __pyx_L1_error)",
          "",
          "[Removed Lines]",
          "5249:   __pyx_t_2 = __Pyx_Import(__pyx_n_s_codecs, __pyx_t_1, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 15, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "5263:   __pyx_t_2 = __Pyx_Import(__pyx_n_s_codecs, __pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 15, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "5284:   if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_ch_type, __pyx_n_s_String) < 0) __PYX_ERR(0, 19, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "5298:   if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_ch_type, __pyx_n_u_String) < 0) __PYX_ERR(0, 19, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "5308:   if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_null_value, __pyx_n_s__2) < 0) __PYX_ERR(0, 21, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "5322:   if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_null_value, __pyx_kp_u__2) < 0) __PYX_ERR(0, 21, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "5354:   __Pyx_GOTREF(__pyx_t_5);",
          "5355:   if (PyDict_SetItem(__pyx_d, __pyx_n_s_String, __pyx_t_5) < 0) __PYX_ERR(0, 18, __pyx_L1_error)",
          "5356:   __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;",
          "",
          "[Removed Lines]",
          "5353:   __pyx_t_5 = __Pyx_Py3ClassCreate(__pyx_t_2, __pyx_n_s_String, __pyx_t_1, __pyx_t_3, NULL, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 18, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "5367:   __pyx_t_5 = __Pyx_Py3ClassCreate(__pyx_t_2, __pyx_n_s_String, __pyx_t_1, __pyx_t_3, NULL, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 18, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "5439:   __Pyx_GOTREF(__pyx_t_5);",
          "5440:   if (PyDict_SetItem(__pyx_d, __pyx_n_s_ByteString, __pyx_t_5) < 0) __PYX_ERR(0, 44, __pyx_L1_error)",
          "5441:   __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;",
          "",
          "[Removed Lines]",
          "5438:   __pyx_t_5 = __Pyx_Py3ClassCreate(__pyx_t_1, __pyx_n_s_ByteString, __pyx_t_2, __pyx_t_3, NULL, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 44, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "5452:   __pyx_t_5 = __Pyx_Py3ClassCreate(__pyx_t_1, __pyx_n_s_ByteString, __pyx_t_2, __pyx_t_3, NULL, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 44, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "5472:   if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_ch_type, __pyx_n_s_FixedString) < 0) __PYX_ERR(0, 58, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "5486:   if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_ch_type, __pyx_n_u_FixedString) < 0) __PYX_ERR(0, 58, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "5518:   __Pyx_GOTREF(__pyx_t_5);",
          "5519:   if (PyDict_SetItem(__pyx_d, __pyx_n_s_FixedString, __pyx_t_5) < 0) __PYX_ERR(0, 57, __pyx_L1_error)",
          "5520:   __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;",
          "",
          "[Removed Lines]",
          "5517:   __pyx_t_5 = __Pyx_Py3ClassCreate(__pyx_t_2, __pyx_n_s_FixedString, __pyx_t_1, __pyx_t_3, NULL, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 57, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "5531:   __pyx_t_5 = __Pyx_Py3ClassCreate(__pyx_t_2, __pyx_n_s_FixedString, __pyx_t_1, __pyx_t_3, NULL, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 57, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "5603:   __Pyx_GOTREF(__pyx_t_5);",
          "5604:   if (PyDict_SetItem(__pyx_d, __pyx_n_s_ByteFixedString, __pyx_t_5) < 0) __PYX_ERR(0, 114, __pyx_L1_error)",
          "5605:   __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;",
          "",
          "[Removed Lines]",
          "5602:   __pyx_t_5 = __Pyx_Py3ClassCreate(__pyx_t_1, __pyx_n_s_ByteFixedString, __pyx_t_2, __pyx_t_3, NULL, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 114, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "5616:   __pyx_t_5 = __Pyx_Py3ClassCreate(__pyx_t_1, __pyx_n_s_ByteFixedString, __pyx_t_2, __pyx_t_3, NULL, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 114, __pyx_L1_error)",
          "",
          "---------------"
        ],
        "clickhouse_driver/columns/stringcolumn.pyx||clickhouse_driver/columns/stringcolumn.pyx": [
          "File: clickhouse_driver/columns/stringcolumn.pyx -> clickhouse_driver/columns/stringcolumn.pyx",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: from libc.string cimport memcpy",
          "10: from .. import errors",
          "12: from ..util import compat",
          "13: from .base import Column",
          "",
          "[Removed Lines]",
          "11: from ..writer import write_varint",
          "",
          "[Added Lines]",
          "11: from ..varint import write_varint",
          "",
          "---------------"
        ],
        "clickhouse_driver/connection.py||clickhouse_driver/connection.py": [
          "File: clickhouse_driver/connection.py -> clickhouse_driver/connection.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: from .progress import Progress",
          "17: from .protocol import Compression, ClientPacketTypes, ServerPacketTypes",
          "18: from .queryprocessingstage import QueryProcessingStage",
          "20: from .readhelpers import read_exception",
          "21: from .settings.writer import write_settings",
          "25: logger = logging.getLogger(__name__)",
          "",
          "[Removed Lines]",
          "19: from .reader import read_varint, read_binary_str",
          "22: from .writer import write_varint, write_binary_str",
          "",
          "[Added Lines]",
          "19: from .reader import read_binary_str",
          "22: from .varint import write_varint, read_varint",
          "23: from .writer import write_binary_str",
          "",
          "---------------"
        ],
        "clickhouse_driver/progress.py||clickhouse_driver/progress.py": [
          "File: clickhouse_driver/progress.py -> clickhouse_driver/progress.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: from . import defines",
          "5: class Progress(object):",
          "",
          "[Removed Lines]",
          "2: from .reader import read_varint",
          "",
          "[Added Lines]",
          "2: from .varint import read_varint",
          "",
          "---------------"
        ],
        "clickhouse_driver/reader.py||clickhouse_driver/reader.py": [
          "File: clickhouse_driver/reader.py -> clickhouse_driver/reader.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: from struct import Struct",
          "4: def read_binary_str(buf):",
          "5:     length = read_varint(buf)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3: from .varint import read_varint",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "19:     return buf.read(length)",
          "39: def read_binary_int(buf, fmt):",
          "40:     \"\"\"",
          "41:     Reads int from buffer with provided format.",
          "",
          "[Removed Lines]",
          "22: def read_varint(f):",
          "23:     \"\"\"",
          "24:     Reads integer of variable length using LEB128.",
          "25:     \"\"\"",
          "26:     shift = 0",
          "27:     result = 0",
          "29:     while True:",
          "30:         i = f.read_one()",
          "31:         result |= (i & 0x7f) << shift",
          "32:         shift += 7",
          "33:         if i < 0x80:",
          "34:             break",
          "36:     return result",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "clickhouse_driver/settings/types.py||clickhouse_driver/settings/types.py": [
          "File: clickhouse_driver/settings/types.py -> clickhouse_driver/settings/types.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: class SettingType(object):",
          "",
          "[Removed Lines]",
          "2: from ..writer import write_binary_str, write_varint",
          "",
          "[Added Lines]",
          "2: from ..varint import write_varint",
          "3: from ..writer import write_binary_str",
          "",
          "---------------"
        ],
        "clickhouse_driver/streams/native.py||clickhouse_driver/streams/native.py": [
          "File: clickhouse_driver/streams/native.py -> clickhouse_driver/streams/native.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: from ..block import Block, BlockInfo",
          "2: from ..columns.service import read_column, write_column",
          "5: from .. import defines",
          "",
          "[Removed Lines]",
          "3: from ..reader import read_varint, read_binary_str",
          "4: from ..writer import write_varint, write_binary_str",
          "",
          "[Added Lines]",
          "3: from ..reader import read_binary_str",
          "4: from ..varint import write_varint, read_varint",
          "5: from ..writer import write_binary_str",
          "",
          "---------------"
        ],
        "clickhouse_driver/varint.c||clickhouse_driver/varint.c": [
          "File: clickhouse_driver/varint.c -> clickhouse_driver/varint.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4: {",
          "5:     \"distutils\": {",
          "6:         \"depends\": [],",
          "7:         \"name\": \"clickhouse_driver.varint\",",
          "8:         \"sources\": [",
          "9:             \"clickhouse_driver/varint.pyx\"",
          "10:         ]",
          "11:     },",
          "12:     \"module_name\": \"clickhouse_driver.varint\"",
          "13: }",
          "16: #define PY_SSIZE_T_CLEAN",
          "17: #include \"Python.h\"",
          "18: #ifndef Py_PYTHON_H",
          "19:     #error Python headers needed to compile C extensions, please install development version of Python.",
          "20: #elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)",
          "21:     #error Cython requires Python 2.6+ or Python 3.3+.",
          "22: #else",
          "23: #define CYTHON_ABI \"0_29_13\"",
          "24: #define CYTHON_HEX_VERSION 0x001D0DF0",
          "25: #define CYTHON_FUTURE_DIVISION 1",
          "26: #include <stddef.h>",
          "27: #ifndef offsetof",
          "28:   #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )",
          "29: #endif",
          "30: #if !defined(WIN32) && !defined(MS_WINDOWS)",
          "31:   #ifndef __stdcall",
          "32:     #define __stdcall",
          "33:   #endif",
          "34:   #ifndef __cdecl",
          "35:     #define __cdecl",
          "36:   #endif",
          "37:   #ifndef __fastcall",
          "38:     #define __fastcall",
          "39:   #endif",
          "40: #endif",
          "41: #ifndef DL_IMPORT",
          "42:   #define DL_IMPORT(t) t",
          "43: #endif",
          "44: #ifndef DL_EXPORT",
          "45:   #define DL_EXPORT(t) t",
          "46: #endif",
          "47: #define __PYX_COMMA ,",
          "48: #ifndef HAVE_LONG_LONG",
          "49:   #if PY_VERSION_HEX >= 0x02070000",
          "50:     #define HAVE_LONG_LONG",
          "51:   #endif",
          "52: #endif",
          "53: #ifndef PY_LONG_LONG",
          "54:   #define PY_LONG_LONG LONG_LONG",
          "55: #endif",
          "56: #ifndef Py_HUGE_VAL",
          "57:   #define Py_HUGE_VAL HUGE_VAL",
          "58: #endif",
          "59: #ifdef PYPY_VERSION",
          "60:   #define CYTHON_COMPILING_IN_PYPY 1",
          "61:   #define CYTHON_COMPILING_IN_PYSTON 0",
          "62:   #define CYTHON_COMPILING_IN_CPYTHON 0",
          "63:   #undef CYTHON_USE_TYPE_SLOTS",
          "64:   #define CYTHON_USE_TYPE_SLOTS 0",
          "65:   #undef CYTHON_USE_PYTYPE_LOOKUP",
          "66:   #define CYTHON_USE_PYTYPE_LOOKUP 0",
          "67:   #if PY_VERSION_HEX < 0x03050000",
          "68:     #undef CYTHON_USE_ASYNC_SLOTS",
          "69:     #define CYTHON_USE_ASYNC_SLOTS 0",
          "70:   #elif !defined(CYTHON_USE_ASYNC_SLOTS)",
          "71:     #define CYTHON_USE_ASYNC_SLOTS 1",
          "72:   #endif",
          "73:   #undef CYTHON_USE_PYLIST_INTERNALS",
          "74:   #define CYTHON_USE_PYLIST_INTERNALS 0",
          "75:   #undef CYTHON_USE_UNICODE_INTERNALS",
          "76:   #define CYTHON_USE_UNICODE_INTERNALS 0",
          "77:   #undef CYTHON_USE_UNICODE_WRITER",
          "78:   #define CYTHON_USE_UNICODE_WRITER 0",
          "79:   #undef CYTHON_USE_PYLONG_INTERNALS",
          "80:   #define CYTHON_USE_PYLONG_INTERNALS 0",
          "81:   #undef CYTHON_AVOID_BORROWED_REFS",
          "82:   #define CYTHON_AVOID_BORROWED_REFS 1",
          "83:   #undef CYTHON_ASSUME_SAFE_MACROS",
          "84:   #define CYTHON_ASSUME_SAFE_MACROS 0",
          "85:   #undef CYTHON_UNPACK_METHODS",
          "86:   #define CYTHON_UNPACK_METHODS 0",
          "87:   #undef CYTHON_FAST_THREAD_STATE",
          "88:   #define CYTHON_FAST_THREAD_STATE 0",
          "89:   #undef CYTHON_FAST_PYCALL",
          "90:   #define CYTHON_FAST_PYCALL 0",
          "91:   #undef CYTHON_PEP489_MULTI_PHASE_INIT",
          "92:   #define CYTHON_PEP489_MULTI_PHASE_INIT 0",
          "93:   #undef CYTHON_USE_TP_FINALIZE",
          "94:   #define CYTHON_USE_TP_FINALIZE 0",
          "95:   #undef CYTHON_USE_DICT_VERSIONS",
          "96:   #define CYTHON_USE_DICT_VERSIONS 0",
          "97:   #undef CYTHON_USE_EXC_INFO_STACK",
          "98:   #define CYTHON_USE_EXC_INFO_STACK 0",
          "99: #elif defined(PYSTON_VERSION)",
          "100:   #define CYTHON_COMPILING_IN_PYPY 0",
          "101:   #define CYTHON_COMPILING_IN_PYSTON 1",
          "102:   #define CYTHON_COMPILING_IN_CPYTHON 0",
          "103:   #ifndef CYTHON_USE_TYPE_SLOTS",
          "104:     #define CYTHON_USE_TYPE_SLOTS 1",
          "105:   #endif",
          "106:   #undef CYTHON_USE_PYTYPE_LOOKUP",
          "107:   #define CYTHON_USE_PYTYPE_LOOKUP 0",
          "108:   #undef CYTHON_USE_ASYNC_SLOTS",
          "109:   #define CYTHON_USE_ASYNC_SLOTS 0",
          "110:   #undef CYTHON_USE_PYLIST_INTERNALS",
          "111:   #define CYTHON_USE_PYLIST_INTERNALS 0",
          "112:   #ifndef CYTHON_USE_UNICODE_INTERNALS",
          "113:     #define CYTHON_USE_UNICODE_INTERNALS 1",
          "114:   #endif",
          "115:   #undef CYTHON_USE_UNICODE_WRITER",
          "116:   #define CYTHON_USE_UNICODE_WRITER 0",
          "117:   #undef CYTHON_USE_PYLONG_INTERNALS",
          "118:   #define CYTHON_USE_PYLONG_INTERNALS 0",
          "119:   #ifndef CYTHON_AVOID_BORROWED_REFS",
          "120:     #define CYTHON_AVOID_BORROWED_REFS 0",
          "121:   #endif",
          "122:   #ifndef CYTHON_ASSUME_SAFE_MACROS",
          "123:     #define CYTHON_ASSUME_SAFE_MACROS 1",
          "124:   #endif",
          "125:   #ifndef CYTHON_UNPACK_METHODS",
          "126:     #define CYTHON_UNPACK_METHODS 1",
          "127:   #endif",
          "128:   #undef CYTHON_FAST_THREAD_STATE",
          "129:   #define CYTHON_FAST_THREAD_STATE 0",
          "130:   #undef CYTHON_FAST_PYCALL",
          "131:   #define CYTHON_FAST_PYCALL 0",
          "132:   #undef CYTHON_PEP489_MULTI_PHASE_INIT",
          "133:   #define CYTHON_PEP489_MULTI_PHASE_INIT 0",
          "134:   #undef CYTHON_USE_TP_FINALIZE",
          "135:   #define CYTHON_USE_TP_FINALIZE 0",
          "136:   #undef CYTHON_USE_DICT_VERSIONS",
          "137:   #define CYTHON_USE_DICT_VERSIONS 0",
          "138:   #undef CYTHON_USE_EXC_INFO_STACK",
          "139:   #define CYTHON_USE_EXC_INFO_STACK 0",
          "140: #else",
          "141:   #define CYTHON_COMPILING_IN_PYPY 0",
          "142:   #define CYTHON_COMPILING_IN_PYSTON 0",
          "143:   #define CYTHON_COMPILING_IN_CPYTHON 1",
          "144:   #ifndef CYTHON_USE_TYPE_SLOTS",
          "145:     #define CYTHON_USE_TYPE_SLOTS 1",
          "146:   #endif",
          "147:   #if PY_VERSION_HEX < 0x02070000",
          "148:     #undef CYTHON_USE_PYTYPE_LOOKUP",
          "149:     #define CYTHON_USE_PYTYPE_LOOKUP 0",
          "150:   #elif !defined(CYTHON_USE_PYTYPE_LOOKUP)",
          "151:     #define CYTHON_USE_PYTYPE_LOOKUP 1",
          "152:   #endif",
          "153:   #if PY_MAJOR_VERSION < 3",
          "154:     #undef CYTHON_USE_ASYNC_SLOTS",
          "155:     #define CYTHON_USE_ASYNC_SLOTS 0",
          "156:   #elif !defined(CYTHON_USE_ASYNC_SLOTS)",
          "157:     #define CYTHON_USE_ASYNC_SLOTS 1",
          "158:   #endif",
          "159:   #if PY_VERSION_HEX < 0x02070000",
          "160:     #undef CYTHON_USE_PYLONG_INTERNALS",
          "161:     #define CYTHON_USE_PYLONG_INTERNALS 0",
          "162:   #elif !defined(CYTHON_USE_PYLONG_INTERNALS)",
          "163:     #define CYTHON_USE_PYLONG_INTERNALS 1",
          "164:   #endif",
          "165:   #ifndef CYTHON_USE_PYLIST_INTERNALS",
          "166:     #define CYTHON_USE_PYLIST_INTERNALS 1",
          "167:   #endif",
          "168:   #ifndef CYTHON_USE_UNICODE_INTERNALS",
          "169:     #define CYTHON_USE_UNICODE_INTERNALS 1",
          "170:   #endif",
          "171:   #if PY_VERSION_HEX < 0x030300F0",
          "172:     #undef CYTHON_USE_UNICODE_WRITER",
          "173:     #define CYTHON_USE_UNICODE_WRITER 0",
          "174:   #elif !defined(CYTHON_USE_UNICODE_WRITER)",
          "175:     #define CYTHON_USE_UNICODE_WRITER 1",
          "176:   #endif",
          "177:   #ifndef CYTHON_AVOID_BORROWED_REFS",
          "178:     #define CYTHON_AVOID_BORROWED_REFS 0",
          "179:   #endif",
          "180:   #ifndef CYTHON_ASSUME_SAFE_MACROS",
          "181:     #define CYTHON_ASSUME_SAFE_MACROS 1",
          "182:   #endif",
          "183:   #ifndef CYTHON_UNPACK_METHODS",
          "184:     #define CYTHON_UNPACK_METHODS 1",
          "185:   #endif",
          "186:   #ifndef CYTHON_FAST_THREAD_STATE",
          "187:     #define CYTHON_FAST_THREAD_STATE 1",
          "188:   #endif",
          "189:   #ifndef CYTHON_FAST_PYCALL",
          "190:     #define CYTHON_FAST_PYCALL 1",
          "191:   #endif",
          "192:   #ifndef CYTHON_PEP489_MULTI_PHASE_INIT",
          "193:     #define CYTHON_PEP489_MULTI_PHASE_INIT (PY_VERSION_HEX >= 0x03050000)",
          "194:   #endif",
          "195:   #ifndef CYTHON_USE_TP_FINALIZE",
          "196:     #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1)",
          "197:   #endif",
          "198:   #ifndef CYTHON_USE_DICT_VERSIONS",
          "199:     #define CYTHON_USE_DICT_VERSIONS (PY_VERSION_HEX >= 0x030600B1)",
          "200:   #endif",
          "201:   #ifndef CYTHON_USE_EXC_INFO_STACK",
          "202:     #define CYTHON_USE_EXC_INFO_STACK (PY_VERSION_HEX >= 0x030700A3)",
          "203:   #endif",
          "204: #endif",
          "205: #if !defined(CYTHON_FAST_PYCCALL)",
          "206: #define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)",
          "207: #endif",
          "208: #if CYTHON_USE_PYLONG_INTERNALS",
          "209:   #include \"longintrepr.h\"",
          "210:   #undef SHIFT",
          "211:   #undef BASE",
          "212:   #undef MASK",
          "213:   #ifdef SIZEOF_VOID_P",
          "214:     enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };",
          "215:   #endif",
          "216: #endif",
          "217: #ifndef __has_attribute",
          "218:   #define __has_attribute(x) 0",
          "219: #endif",
          "220: #ifndef __has_cpp_attribute",
          "221:   #define __has_cpp_attribute(x) 0",
          "222: #endif",
          "223: #ifndef CYTHON_RESTRICT",
          "224:   #if defined(__GNUC__)",
          "225:     #define CYTHON_RESTRICT __restrict__",
          "226:   #elif defined(_MSC_VER) && _MSC_VER >= 1400",
          "227:     #define CYTHON_RESTRICT __restrict",
          "228:   #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L",
          "229:     #define CYTHON_RESTRICT restrict",
          "230:   #else",
          "231:     #define CYTHON_RESTRICT",
          "232:   #endif",
          "233: #endif",
          "234: #ifndef CYTHON_UNUSED",
          "235: # if defined(__GNUC__)",
          "236: #   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))",
          "237: #     define CYTHON_UNUSED __attribute__ ((__unused__))",
          "238: #   else",
          "239: #     define CYTHON_UNUSED",
          "240: #   endif",
          "241: # elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))",
          "242: #   define CYTHON_UNUSED __attribute__ ((__unused__))",
          "243: # else",
          "244: #   define CYTHON_UNUSED",
          "245: # endif",
          "246: #endif",
          "247: #ifndef CYTHON_MAYBE_UNUSED_VAR",
          "248: #  if defined(__cplusplus)",
          "249:      template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }",
          "250: #  else",
          "251: #    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)",
          "252: #  endif",
          "253: #endif",
          "254: #ifndef CYTHON_NCP_UNUSED",
          "255: # if CYTHON_COMPILING_IN_CPYTHON",
          "256: #  define CYTHON_NCP_UNUSED",
          "257: # else",
          "258: #  define CYTHON_NCP_UNUSED CYTHON_UNUSED",
          "259: # endif",
          "260: #endif",
          "261: #define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)",
          "262: #ifdef _MSC_VER",
          "263:     #ifndef _MSC_STDINT_H_",
          "264:         #if _MSC_VER < 1300",
          "265:            typedef unsigned char     uint8_t;",
          "266:            typedef unsigned int      uint32_t;",
          "267:         #else",
          "268:            typedef unsigned __int8   uint8_t;",
          "269:            typedef unsigned __int32  uint32_t;",
          "270:         #endif",
          "271:     #endif",
          "272: #else",
          "273:    #include <stdint.h>",
          "274: #endif",
          "275: #ifndef CYTHON_FALLTHROUGH",
          "276:   #if defined(__cplusplus) && __cplusplus >= 201103L",
          "277:     #if __has_cpp_attribute(fallthrough)",
          "278:       #define CYTHON_FALLTHROUGH [[fallthrough]]",
          "279:     #elif __has_cpp_attribute(clang::fallthrough)",
          "280:       #define CYTHON_FALLTHROUGH [[clang::fallthrough]]",
          "281:     #elif __has_cpp_attribute(gnu::fallthrough)",
          "282:       #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]",
          "283:     #endif",
          "284:   #endif",
          "285:   #ifndef CYTHON_FALLTHROUGH",
          "286:     #if __has_attribute(fallthrough)",
          "287:       #define CYTHON_FALLTHROUGH __attribute__((fallthrough))",
          "288:     #else",
          "289:       #define CYTHON_FALLTHROUGH",
          "290:     #endif",
          "291:   #endif",
          "292:   #if defined(__clang__ ) && defined(__apple_build_version__)",
          "293:     #if __apple_build_version__ < 7000000",
          "294:       #undef  CYTHON_FALLTHROUGH",
          "295:       #define CYTHON_FALLTHROUGH",
          "296:     #endif",
          "297:   #endif",
          "298: #endif",
          "300: #ifndef CYTHON_INLINE",
          "301:   #if defined(__clang__)",
          "302:     #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))",
          "303:   #elif defined(__GNUC__)",
          "304:     #define CYTHON_INLINE __inline__",
          "305:   #elif defined(_MSC_VER)",
          "306:     #define CYTHON_INLINE __inline",
          "307:   #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L",
          "308:     #define CYTHON_INLINE inline",
          "309:   #else",
          "310:     #define CYTHON_INLINE",
          "311:   #endif",
          "312: #endif",
          "314: #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)",
          "315:   #define Py_OptimizeFlag 0",
          "316: #endif",
          "317: #define __PYX_BUILD_PY_SSIZE_T \"n\"",
          "318: #define CYTHON_FORMAT_SSIZE_T \"z\"",
          "319: #if PY_MAJOR_VERSION < 3",
          "320:   #define __Pyx_BUILTIN_MODULE_NAME \"__builtin__\"",
          "321:   #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\\",
          "322:           PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)",
          "323:   #define __Pyx_DefaultClassType PyClass_Type",
          "324: #else",
          "325:   #define __Pyx_BUILTIN_MODULE_NAME \"builtins\"",
          "326: #if PY_VERSION_HEX >= 0x030800A4 && PY_VERSION_HEX < 0x030800B2",
          "327:   #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\\",
          "328:           PyCode_New(a, 0, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)",
          "329: #else",
          "330:   #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\\",
          "331:           PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)",
          "332: #endif",
          "333:   #define __Pyx_DefaultClassType PyType_Type",
          "334: #endif",
          "335: #ifndef Py_TPFLAGS_CHECKTYPES",
          "336:   #define Py_TPFLAGS_CHECKTYPES 0",
          "337: #endif",
          "338: #ifndef Py_TPFLAGS_HAVE_INDEX",
          "339:   #define Py_TPFLAGS_HAVE_INDEX 0",
          "340: #endif",
          "341: #ifndef Py_TPFLAGS_HAVE_NEWBUFFER",
          "342:   #define Py_TPFLAGS_HAVE_NEWBUFFER 0",
          "343: #endif",
          "344: #ifndef Py_TPFLAGS_HAVE_FINALIZE",
          "345:   #define Py_TPFLAGS_HAVE_FINALIZE 0",
          "346: #endif",
          "347: #ifndef METH_STACKLESS",
          "348:   #define METH_STACKLESS 0",
          "349: #endif",
          "350: #if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)",
          "351:   #ifndef METH_FASTCALL",
          "352:      #define METH_FASTCALL 0x80",
          "353:   #endif",
          "354:   typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);",
          "355:   typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,",
          "356:                                                           Py_ssize_t nargs, PyObject *kwnames);",
          "357: #else",
          "358:   #define __Pyx_PyCFunctionFast _PyCFunctionFast",
          "359:   #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords",
          "360: #endif",
          "361: #if CYTHON_FAST_PYCCALL",
          "362: #define __Pyx_PyFastCFunction_Check(func)\\",
          "363:     ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)))))",
          "364: #else",
          "365: #define __Pyx_PyFastCFunction_Check(func) 0",
          "366: #endif",
          "367: #if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)",
          "368:   #define PyObject_Malloc(s)   PyMem_Malloc(s)",
          "369:   #define PyObject_Free(p)     PyMem_Free(p)",
          "370:   #define PyObject_Realloc(p)  PyMem_Realloc(p)",
          "371: #endif",
          "372: #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030400A1",
          "373:   #define PyMem_RawMalloc(n)           PyMem_Malloc(n)",
          "374:   #define PyMem_RawRealloc(p, n)       PyMem_Realloc(p, n)",
          "375:   #define PyMem_RawFree(p)             PyMem_Free(p)",
          "376: #endif",
          "377: #if CYTHON_COMPILING_IN_PYSTON",
          "378:   #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)",
          "379:   #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)",
          "380: #else",
          "381:   #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)",
          "382:   #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)",
          "383: #endif",
          "384: #if !CYTHON_FAST_THREAD_STATE || PY_VERSION_HEX < 0x02070000",
          "385:   #define __Pyx_PyThreadState_Current PyThreadState_GET()",
          "386: #elif PY_VERSION_HEX >= 0x03060000",
          "387:   #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()",
          "388: #elif PY_VERSION_HEX >= 0x03000000",
          "389:   #define __Pyx_PyThreadState_Current PyThreadState_GET()",
          "390: #else",
          "391:   #define __Pyx_PyThreadState_Current _PyThreadState_Current",
          "392: #endif",
          "393: #if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)",
          "394: #include \"pythread.h\"",
          "395: #define Py_tss_NEEDS_INIT 0",
          "396: typedef int Py_tss_t;",
          "397: static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {",
          "399:   return 0;",
          "400: }",
          "401: static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {",
          "402:   Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));",
          "404:   return key;",
          "405: }",
          "406: static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {",
          "407:   PyObject_Free(key);",
          "408: }",
          "409: static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {",
          "410:   return *key != Py_tss_NEEDS_INIT;",
          "411: }",
          "412: static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {",
          "413:   PyThread_delete_key(*key);",
          "415: }",
          "416: static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {",
          "417:   return PyThread_set_key_value(*key, value);",
          "418: }",
          "419: static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {",
          "420:   return PyThread_get_key_value(*key);",
          "421: }",
          "422: #endif",
          "423: #if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)",
          "424: #define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))",
          "425: #else",
          "426: #define __Pyx_PyDict_NewPresized(n)  PyDict_New()",
          "427: #endif",
          "428: #if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION",
          "429:   #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)",
          "430:   #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)",
          "431: #else",
          "432:   #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)",
          "433:   #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)",
          "434: #endif",
          "435: #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1 && CYTHON_USE_UNICODE_INTERNALS",
          "436: #define __Pyx_PyDict_GetItemStr(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)",
          "437: #else",
          "438: #define __Pyx_PyDict_GetItemStr(dict, name)  PyDict_GetItem(dict, name)",
          "439: #endif",
          "440: #if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)",
          "441:   #define CYTHON_PEP393_ENABLED 1",
          "442:   #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\\",
          "443:                                               0 : _PyUnicode_Ready((PyObject *)(op)))",
          "444:   #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)",
          "445:   #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)",
          "446:   #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)",
          "447:   #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)",
          "448:   #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)",
          "449:   #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)",
          "450:   #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)",
          "451:   #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))",
          "452: #else",
          "453:   #define CYTHON_PEP393_ENABLED 0",
          "454:   #define PyUnicode_1BYTE_KIND  1",
          "455:   #define PyUnicode_2BYTE_KIND  2",
          "456:   #define PyUnicode_4BYTE_KIND  4",
          "457:   #define __Pyx_PyUnicode_READY(op)       (0)",
          "458:   #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)",
          "459:   #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))",
          "460:   #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)",
          "461:   #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))",
          "462:   #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))",
          "463:   #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))",
          "464:   #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)",
          "465:   #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))",
          "466: #endif",
          "467: #if CYTHON_COMPILING_IN_PYPY",
          "468:   #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)",
          "469:   #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)",
          "470: #else",
          "471:   #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)",
          "472:   #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\\",
          "473:       PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))",
          "474: #endif",
          "475: #if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)",
          "476:   #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)",
          "477: #endif",
          "478: #if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)",
          "479:   #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)",
          "480: #endif",
          "481: #if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)",
          "482:   #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, \"__format__\", \"O\", fmt)",
          "483: #endif",
          "484: #define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None || (PyString_Check(b) && !PyString_CheckExact(b)))) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))",
          "485: #define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))",
          "486: #if PY_MAJOR_VERSION >= 3",
          "487:   #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)",
          "488: #else",
          "489:   #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)",
          "490: #endif",
          "491: #if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)",
          "492:   #define PyObject_ASCII(o)            PyObject_Repr(o)",
          "493: #endif",
          "494: #if PY_MAJOR_VERSION >= 3",
          "495:   #define PyBaseString_Type            PyUnicode_Type",
          "496:   #define PyStringObject               PyUnicodeObject",
          "497:   #define PyString_Type                PyUnicode_Type",
          "498:   #define PyString_Check               PyUnicode_Check",
          "499:   #define PyString_CheckExact          PyUnicode_CheckExact",
          "500:   #define PyObject_Unicode             PyObject_Str",
          "501: #endif",
          "502: #if PY_MAJOR_VERSION >= 3",
          "503:   #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)",
          "504:   #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)",
          "505: #else",
          "506:   #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))",
          "507:   #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))",
          "508: #endif",
          "509: #ifndef PySet_CheckExact",
          "510:   #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)",
          "511: #endif",
          "512: #if CYTHON_ASSUME_SAFE_MACROS",
          "513:   #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)",
          "514: #else",
          "515:   #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)",
          "516: #endif",
          "517: #if PY_MAJOR_VERSION >= 3",
          "518:   #define PyIntObject                  PyLongObject",
          "519:   #define PyInt_Type                   PyLong_Type",
          "520:   #define PyInt_Check(op)              PyLong_Check(op)",
          "521:   #define PyInt_CheckExact(op)         PyLong_CheckExact(op)",
          "522:   #define PyInt_FromString             PyLong_FromString",
          "523:   #define PyInt_FromUnicode            PyLong_FromUnicode",
          "524:   #define PyInt_FromLong               PyLong_FromLong",
          "525:   #define PyInt_FromSize_t             PyLong_FromSize_t",
          "526:   #define PyInt_FromSsize_t            PyLong_FromSsize_t",
          "527:   #define PyInt_AsLong                 PyLong_AsLong",
          "528:   #define PyInt_AS_LONG                PyLong_AS_LONG",
          "529:   #define PyInt_AsSsize_t              PyLong_AsSsize_t",
          "530:   #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask",
          "531:   #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask",
          "532:   #define PyNumber_Int                 PyNumber_Long",
          "533: #endif",
          "534: #if PY_MAJOR_VERSION >= 3",
          "535:   #define PyBoolObject                 PyLongObject",
          "536: #endif",
          "537: #if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY",
          "538:   #ifndef PyUnicode_InternFromString",
          "539:     #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)",
          "540:   #endif",
          "541: #endif",
          "542: #if PY_VERSION_HEX < 0x030200A4",
          "543:   typedef long Py_hash_t;",
          "544:   #define __Pyx_PyInt_FromHash_t PyInt_FromLong",
          "545:   #define __Pyx_PyInt_AsHash_t   PyInt_AsLong",
          "546: #else",
          "547:   #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t",
          "548:   #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t",
          "549: #endif",
          "550: #if PY_MAJOR_VERSION >= 3",
          "551:   #define __Pyx_PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : (Py_INCREF(func), func))",
          "552: #else",
          "553:   #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)",
          "554: #endif",
          "555: #if CYTHON_USE_ASYNC_SLOTS",
          "556:   #if PY_VERSION_HEX >= 0x030500B1",
          "557:     #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods",
          "558:     #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)",
          "559:   #else",
          "560:     #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))",
          "561:   #endif",
          "562: #else",
          "563:   #define __Pyx_PyType_AsAsync(obj) NULL",
          "564: #endif",
          "565: #ifndef __Pyx_PyAsyncMethodsStruct",
          "566:     typedef struct {",
          "567:         unaryfunc am_await;",
          "568:         unaryfunc am_aiter;",
          "569:         unaryfunc am_anext;",
          "570:     } __Pyx_PyAsyncMethodsStruct;",
          "571: #endif",
          "573: #if defined(WIN32) || defined(MS_WINDOWS)",
          "574:   #define _USE_MATH_DEFINES",
          "575: #endif",
          "576: #include <math.h>",
          "577: #ifdef NAN",
          "578: #define __PYX_NAN() ((float) NAN)",
          "579: #else",
          "580: static CYTHON_INLINE float __PYX_NAN() {",
          "581:   float value;",
          "582:   memset(&value, 0xFF, sizeof(value));",
          "583:   return value;",
          "584: }",
          "585: #endif",
          "586: #if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)",
          "587: #define __Pyx_truncl trunc",
          "588: #else",
          "589: #define __Pyx_truncl truncl",
          "590: #endif",
          "593: #define __PYX_ERR(f_index, lineno, Ln_error) \\",
          "594: { \\",
          "595:   __pyx_filename = __pyx_f[f_index]; __pyx_lineno = lineno; __pyx_clineno = __LINE__; goto Ln_error; \\",
          "596: }",
          "598: #ifndef __PYX_EXTERN_C",
          "599:   #ifdef __cplusplus",
          "600:     #define __PYX_EXTERN_C extern \"C\"",
          "601:   #else",
          "602:     #define __PYX_EXTERN_C extern",
          "603:   #endif",
          "604: #endif",
          "606: #define __PYX_HAVE__clickhouse_driver__varint",
          "607: #define __PYX_HAVE_API__clickhouse_driver__varint",
          "609: #include <string.h>",
          "610: #include <stdio.h>",
          "611: #include \"pythread.h\"",
          "612: #ifdef _OPENMP",
          "613: #include <omp.h>",
          "616: #if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)",
          "617: #define CYTHON_WITHOUT_ASSERTIONS",
          "618: #endif",
          "620: typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;",
          "621:                 const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;",
          "623: #define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0",
          "624: #define __PYX_DEFAULT_STRING_ENCODING_IS_UTF8 0",
          "625: #define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT (PY_MAJOR_VERSION >= 3 && __PYX_DEFAULT_STRING_ENCODING_IS_UTF8)",
          "626: #define __PYX_DEFAULT_STRING_ENCODING \"\"",
          "627: #define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString",
          "628: #define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize",
          "629: #define __Pyx_uchar_cast(c) ((unsigned char)c)",
          "630: #define __Pyx_long_cast(x) ((long)x)",
          "631: #define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\\",
          "632:     (sizeof(type) < sizeof(Py_ssize_t))  ||\\",
          "633:     (sizeof(type) > sizeof(Py_ssize_t) &&\\",
          "634:           likely(v < (type)PY_SSIZE_T_MAX ||\\",
          "635:                  v == (type)PY_SSIZE_T_MAX)  &&\\",
          "636:           (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\\",
          "637:                                 v == (type)PY_SSIZE_T_MIN)))  ||\\",
          "638:     (sizeof(type) == sizeof(Py_ssize_t) &&\\",
          "639:           (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\\",
          "640:                                v == (type)PY_SSIZE_T_MAX)))  )",
          "641: static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {",
          "642:     return (size_t) i < (size_t) limit;",
          "643: }",
          "644: #if defined (__cplusplus) && __cplusplus >= 201103L",
          "645:     #include <cstdlib>",
          "646:     #define __Pyx_sst_abs(value) std::abs(value)",
          "647: #elif SIZEOF_INT >= SIZEOF_SIZE_T",
          "648:     #define __Pyx_sst_abs(value) abs(value)",
          "649: #elif SIZEOF_LONG >= SIZEOF_SIZE_T",
          "650:     #define __Pyx_sst_abs(value) labs(value)",
          "651: #elif defined (_MSC_VER)",
          "652:     #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))",
          "653: #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L",
          "654:     #define __Pyx_sst_abs(value) llabs(value)",
          "655: #elif defined (__GNUC__)",
          "656:     #define __Pyx_sst_abs(value) __builtin_llabs(value)",
          "657: #else",
          "658:     #define __Pyx_sst_abs(value) ((value<0) ? -value : value)",
          "659: #endif",
          "660: static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);",
          "661: static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);",
          "662: #define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))",
          "663: #define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)",
          "664: #define __Pyx_PyBytes_FromString        PyBytes_FromString",
          "665: #define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize",
          "666: static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);",
          "667: #if PY_MAJOR_VERSION < 3",
          "668:     #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString",
          "669:     #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize",
          "670: #else",
          "671:     #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString",
          "672:     #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize",
          "673: #endif",
          "674: #define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))",
          "675: #define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))",
          "676: #define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))",
          "677: #define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))",
          "678: #define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))",
          "679: #define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))",
          "680: #define __Pyx_PyObject_AsWritableString(s)    ((char*) __Pyx_PyObject_AsString(s))",
          "681: #define __Pyx_PyObject_AsWritableSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))",
          "682: #define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))",
          "683: #define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))",
          "684: #define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))",
          "685: #define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)",
          "686: #define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)",
          "687: #define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)",
          "688: #define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)",
          "689: #define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)",
          "690: static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u) {",
          "691:     const Py_UNICODE *u_end = u;",
          "692:     while (*u_end++) ;",
          "693:     return (size_t)(u_end - u - 1);",
          "694: }",
          "695: #define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))",
          "696: #define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode",
          "697: #define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode",
          "698: #define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)",
          "699: #define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)",
          "700: static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);",
          "701: static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);",
          "702: static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);",
          "703: static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);",
          "704: #define __Pyx_PySequence_Tuple(obj)\\",
          "705:     (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))",
          "706: static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);",
          "707: static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);",
          "708: #if CYTHON_ASSUME_SAFE_MACROS",
          "709: #define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))",
          "710: #else",
          "711: #define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)",
          "712: #endif",
          "713: #define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))",
          "714: #if PY_MAJOR_VERSION >= 3",
          "715: #define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))",
          "716: #else",
          "717: #define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))",
          "718: #endif",
          "719: #define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))",
          "720: #if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII",
          "721: static int __Pyx_sys_getdefaultencoding_not_ascii;",
          "722: static int __Pyx_init_sys_getdefaultencoding_params(void) {",
          "723:     PyObject* sys;",
          "724:     PyObject* default_encoding = NULL;",
          "725:     PyObject* ascii_chars_u = NULL;",
          "726:     PyObject* ascii_chars_b = NULL;",
          "727:     const char* default_encoding_c;",
          "728:     sys = PyImport_ImportModule(\"sys\");",
          "729:     if (!sys) goto bad;",
          "730:     default_encoding = PyObject_CallMethod(sys, (char*) \"getdefaultencoding\", NULL);",
          "731:     Py_DECREF(sys);",
          "732:     if (!default_encoding) goto bad;",
          "733:     default_encoding_c = PyBytes_AsString(default_encoding);",
          "734:     if (!default_encoding_c) goto bad;",
          "735:     if (strcmp(default_encoding_c, \"ascii\") == 0) {",
          "736:         __Pyx_sys_getdefaultencoding_not_ascii = 0;",
          "737:     } else {",
          "738:         char ascii_chars[128];",
          "739:         int c;",
          "740:         for (c = 0; c < 128; c++) {",
          "741:             ascii_chars[c] = c;",
          "742:         }",
          "743:         __Pyx_sys_getdefaultencoding_not_ascii = 1;",
          "744:         ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);",
          "745:         if (!ascii_chars_u) goto bad;",
          "746:         ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);",
          "747:         if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {",
          "748:             PyErr_Format(",
          "749:                 PyExc_ValueError,",
          "750:                 \"This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.\",",
          "751:                 default_encoding_c);",
          "752:             goto bad;",
          "753:         }",
          "754:         Py_DECREF(ascii_chars_u);",
          "755:         Py_DECREF(ascii_chars_b);",
          "756:     }",
          "757:     Py_DECREF(default_encoding);",
          "758:     return 0;",
          "759: bad:",
          "760:     Py_XDECREF(default_encoding);",
          "761:     Py_XDECREF(ascii_chars_u);",
          "762:     Py_XDECREF(ascii_chars_b);",
          "763:     return -1;",
          "764: }",
          "765: #endif",
          "766: #if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3",
          "767: #define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)",
          "768: #else",
          "769: #define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)",
          "770: #if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT",
          "771: static char* __PYX_DEFAULT_STRING_ENCODING;",
          "772: static int __Pyx_init_sys_getdefaultencoding_params(void) {",
          "773:     PyObject* sys;",
          "774:     PyObject* default_encoding = NULL;",
          "775:     char* default_encoding_c;",
          "776:     sys = PyImport_ImportModule(\"sys\");",
          "777:     if (!sys) goto bad;",
          "778:     default_encoding = PyObject_CallMethod(sys, (char*) (const char*) \"getdefaultencoding\", NULL);",
          "779:     Py_DECREF(sys);",
          "780:     if (!default_encoding) goto bad;",
          "781:     default_encoding_c = PyBytes_AsString(default_encoding);",
          "782:     if (!default_encoding_c) goto bad;",
          "783:     __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c) + 1);",
          "784:     if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;",
          "785:     strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);",
          "786:     Py_DECREF(default_encoding);",
          "787:     return 0;",
          "788: bad:",
          "789:     Py_XDECREF(default_encoding);",
          "790:     return -1;",
          "791: }",
          "792: #endif",
          "793: #endif",
          "797: #if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))",
          "798:   #define likely(x)   __builtin_expect(!!(x), 1)",
          "799:   #define unlikely(x) __builtin_expect(!!(x), 0)",
          "801:   #define likely(x)   (x)",
          "802:   #define unlikely(x) (x)",
          "804: static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }",
          "806: static PyObject *__pyx_m = NULL;",
          "807: static PyObject *__pyx_d;",
          "808: static PyObject *__pyx_b;",
          "809: static PyObject *__pyx_cython_runtime = NULL;",
          "810: static PyObject *__pyx_empty_tuple;",
          "811: static PyObject *__pyx_empty_bytes;",
          "812: static PyObject *__pyx_empty_unicode;",
          "813: static int __pyx_lineno;",
          "814: static int __pyx_clineno = 0;",
          "815: static const char * __pyx_cfilenm= __FILE__;",
          "816: static const char *__pyx_filename;",
          "819: static const char *__pyx_f[] = {",
          "820:   \"clickhouse_driver/varint.pyx\",",
          "821:   \"type.pxd\",",
          "822:   \"bool.pxd\",",
          "823:   \"complex.pxd\",",
          "824: };",
          "830: #ifndef CYTHON_REFNANNY",
          "831:   #define CYTHON_REFNANNY 0",
          "832: #endif",
          "833: #if CYTHON_REFNANNY",
          "834:   typedef struct {",
          "835:     void (*INCREF)(void*, PyObject*, int);",
          "836:     void (*DECREF)(void*, PyObject*, int);",
          "837:     void (*GOTREF)(void*, PyObject*, int);",
          "838:     void (*GIVEREF)(void*, PyObject*, int);",
          "839:     void* (*SetupContext)(const char*, int, const char*);",
          "840:     void (*FinishContext)(void**);",
          "841:   } __Pyx_RefNannyAPIStruct;",
          "842:   static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;",
          "843:   static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);",
          "844:   #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;",
          "845: #ifdef WITH_THREAD",
          "846:   #define __Pyx_RefNannySetupContext(name, acquire_gil)\\",
          "847:           if (acquire_gil) {\\",
          "848:               PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\\",
          "849:               __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\\",
          "850:               PyGILState_Release(__pyx_gilstate_save);\\",
          "851:           } else {\\",
          "852:               __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\\",
          "853:           }",
          "854: #else",
          "855:   #define __Pyx_RefNannySetupContext(name, acquire_gil)\\",
          "856:           __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)",
          "857: #endif",
          "858:   #define __Pyx_RefNannyFinishContext()\\",
          "859:           __Pyx_RefNanny->FinishContext(&__pyx_refnanny)",
          "860:   #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)",
          "861:   #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)",
          "862:   #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)",
          "863:   #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)",
          "864:   #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)",
          "865:   #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)",
          "866:   #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)",
          "867:   #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)",
          "868: #else",
          "869:   #define __Pyx_RefNannyDeclarations",
          "870:   #define __Pyx_RefNannySetupContext(name, acquire_gil)",
          "871:   #define __Pyx_RefNannyFinishContext()",
          "872:   #define __Pyx_INCREF(r) Py_INCREF(r)",
          "873:   #define __Pyx_DECREF(r) Py_DECREF(r)",
          "874:   #define __Pyx_GOTREF(r)",
          "875:   #define __Pyx_GIVEREF(r)",
          "876:   #define __Pyx_XINCREF(r) Py_XINCREF(r)",
          "877:   #define __Pyx_XDECREF(r) Py_XDECREF(r)",
          "878:   #define __Pyx_XGOTREF(r)",
          "879:   #define __Pyx_XGIVEREF(r)",
          "880: #endif",
          "881: #define __Pyx_XDECREF_SET(r, v) do {\\",
          "882:         PyObject *tmp = (PyObject *) r;\\",
          "883:         r = v; __Pyx_XDECREF(tmp);\\",
          "884:     } while (0)",
          "885: #define __Pyx_DECREF_SET(r, v) do {\\",
          "886:         PyObject *tmp = (PyObject *) r;\\",
          "887:         r = v; __Pyx_DECREF(tmp);\\",
          "888:     } while (0)",
          "889: #define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)",
          "890: #define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)",
          "893: static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,",
          "894:     Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);",
          "897: static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);",
          "900: static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\\",
          "901:     PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\\",
          "902:     const char* function_name);",
          "905: #if CYTHON_USE_TYPE_SLOTS",
          "906: static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);",
          "907: #else",
          "908: #define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)",
          "909: #endif",
          "912: #if CYTHON_FAST_PYCCALL",
          "913: static CYTHON_INLINE PyObject *__Pyx_PyCFunction_FastCall(PyObject *func, PyObject **args, Py_ssize_t nargs);",
          "914: #else",
          "915: #define __Pyx_PyCFunction_FastCall(func, args, nargs)  (assert(0), NULL)",
          "916: #endif",
          "919: #if CYTHON_FAST_PYCALL",
          "920: #define __Pyx_PyFunction_FastCall(func, args, nargs)\\",
          "921:     __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)",
          "922: #if 1 || PY_VERSION_HEX < 0x030600B1",
          "923: static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs);",
          "924: #else",
          "925: #define __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs) _PyFunction_FastCallDict(func, args, nargs, kwargs)",
          "926: #endif",
          "927: #define __Pyx_BUILD_ASSERT_EXPR(cond)\\",
          "928:     (sizeof(char [1 - 2*!(cond)]) - 1)",
          "929: #ifndef Py_MEMBER_SIZE",
          "930: #define Py_MEMBER_SIZE(type, member) sizeof(((type *)0)->member)",
          "931: #endif",
          "932:   static size_t __pyx_pyframe_localsplus_offset = 0;",
          "933:   #include \"frameobject.h\"",
          "934:   #define __Pxy_PyFrame_Initialize_Offsets()\\",
          "935:     ((void)__Pyx_BUILD_ASSERT_EXPR(sizeof(PyFrameObject) == offsetof(PyFrameObject, f_localsplus) + Py_MEMBER_SIZE(PyFrameObject, f_localsplus)),\\",
          "936:      (void)(__pyx_pyframe_localsplus_offset = ((size_t)PyFrame_Type.tp_basicsize) - Py_MEMBER_SIZE(PyFrameObject, f_localsplus)))",
          "937:   #define __Pyx_PyFrame_GetLocalsplus(frame)\\",
          "938:     (assert(__pyx_pyframe_localsplus_offset), (PyObject **)(((char *)(frame)) + __pyx_pyframe_localsplus_offset))",
          "939: #endif",
          "942: #if CYTHON_COMPILING_IN_CPYTHON",
          "943: static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);",
          "944: #else",
          "945: #define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)",
          "946: #endif",
          "949: static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2);",
          "952: #if CYTHON_COMPILING_IN_CPYTHON",
          "953: static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);",
          "954: #endif",
          "957: static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);",
          "960: #if CYTHON_COMPILING_IN_CPYTHON",
          "961: static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);",
          "962: #else",
          "963: #define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)",
          "964: #endif",
          "967: #ifndef __PYX_HAVE_RT_ImportType_proto",
          "968: #define __PYX_HAVE_RT_ImportType_proto",
          "969: enum __Pyx_ImportType_CheckSize {",
          "970:    __Pyx_ImportType_CheckSize_Error = 0,",
          "971:    __Pyx_ImportType_CheckSize_Warn = 1,",
          "972:    __Pyx_ImportType_CheckSize_Ignore = 2",
          "973: };",
          "974: static PyTypeObject *__Pyx_ImportType(PyObject* module, const char *module_name, const char *class_name, size_t size, enum __Pyx_ImportType_CheckSize check_size);",
          "975: #endif",
          "978: #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS",
          "979: #define __PYX_DICT_VERSION_INIT  ((PY_UINT64_T) -1)",
          "980: #define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)",
          "981: #define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\\",
          "982:     (version_var) = __PYX_GET_DICT_VERSION(dict);\\",
          "983:     (cache_var) = (value);",
          "984: #define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\\",
          "985:     static PY_UINT64_T __pyx_dict_version = 0;\\",
          "986:     static PyObject *__pyx_dict_cached_value = NULL;\\",
          "987:     if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\\",
          "988:         (VAR) = __pyx_dict_cached_value;\\",
          "989:     } else {\\",
          "990:         (VAR) = __pyx_dict_cached_value = (LOOKUP);\\",
          "991:         __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\\",
          "992:     }\\",
          "993: }",
          "994: static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj);",
          "995: static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj);",
          "996: static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version);",
          "997: #else",
          "998: #define __PYX_GET_DICT_VERSION(dict)  (0)",
          "999: #define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)",
          "1000: #define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);",
          "1001: #endif",
          "1004: #if CYTHON_FAST_THREAD_STATE",
          "1005: #define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;",
          "1006: #define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;",
          "1007: #define __Pyx_PyErr_Occurred()  __pyx_tstate->curexc_type",
          "1008: #else",
          "1009: #define __Pyx_PyThreadState_declare",
          "1010: #define __Pyx_PyThreadState_assign",
          "1011: #define __Pyx_PyErr_Occurred()  PyErr_Occurred()",
          "1012: #endif",
          "1015: #if CYTHON_FAST_THREAD_STATE",
          "1016: #define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)",
          "1017: #define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)",
          "1018: #define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)",
          "1019: #define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)",
          "1020: #define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)",
          "1021: static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);",
          "1022: static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);",
          "1023: #if CYTHON_COMPILING_IN_CPYTHON",
          "1024: #define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))",
          "1025: #else",
          "1026: #define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)",
          "1027: #endif",
          "1028: #else",
          "1029: #define __Pyx_PyErr_Clear() PyErr_Clear()",
          "1030: #define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)",
          "1031: #define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)",
          "1032: #define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)",
          "1033: #define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)",
          "1034: #define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)",
          "1035: #define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)",
          "1036: #define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)",
          "1037: #endif",
          "1040: #ifdef CYTHON_CLINE_IN_TRACEBACK",
          "1041: #define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)",
          "1042: #else",
          "1043: static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);",
          "1044: #endif",
          "1047: typedef struct {",
          "1048:     PyCodeObject* code_object;",
          "1049:     int code_line;",
          "1050: } __Pyx_CodeObjectCacheEntry;",
          "1051: struct __Pyx_CodeObjectCache {",
          "1052:     int count;",
          "1053:     int max_count;",
          "1054:     __Pyx_CodeObjectCacheEntry* entries;",
          "1055: };",
          "1056: static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};",
          "1057: static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);",
          "1058: static PyCodeObject *__pyx_find_code_object(int code_line);",
          "1059: static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);",
          "1062: static void __Pyx_AddTraceback(const char *funcname, int c_line,",
          "1063:                                int py_line, const char *filename);",
          "1066: static CYTHON_INLINE unsigned char __Pyx_PyInt_As_unsigned_char(PyObject *);",
          "1069: static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);",
          "1072: static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);",
          "1075: static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);",
          "1078: #if CYTHON_COMPILING_IN_CPYTHON",
          "1079: #define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)",
          "1080: static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);",
          "1081: static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);",
          "1082: static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);",
          "1083: #else",
          "1084: #define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)",
          "1085: #define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)",
          "1086: #define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))",
          "1087: #endif",
          "1088: #define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)",
          "1091: static int __Pyx_check_binary_version(void);",
          "1094: static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);",
          "1102: static PyTypeObject *__pyx_ptype_7cpython_4type_type = 0;",
          "1135: static PyTypeObject *__pyx_ptype_7cpython_4bool_bool = 0;",
          "1144: static PyTypeObject *__pyx_ptype_7cpython_7complex_complex = 0;",
          "1181: #define __Pyx_MODULE_NAME \"clickhouse_driver.varint\"",
          "1182: extern int __pyx_module_is_main_clickhouse_driver__varint;",
          "1183: int __pyx_module_is_main_clickhouse_driver__varint = 0;",
          "1186: static const char __pyx_k_f[] = \"f\";",
          "1187: static const char __pyx_k_i[] = \"i\";",
          "1188: static const char __pyx_k_buf[] = \"buf\";",
          "1189: static const char __pyx_k_main[] = \"__main__\";",
          "1190: static const char __pyx_k_name[] = \"__name__\";",
          "1191: static const char __pyx_k_test[] = \"__test__\";",
          "1192: static const char __pyx_k_shift[] = \"shift\";",
          "1193: static const char __pyx_k_write[] = \"write\";",
          "1194: static const char __pyx_k_number[] = \"number\";",
          "1195: static const char __pyx_k_result[] = \"result\";",
          "1196: static const char __pyx_k_num_buf[] = \"num_buf\";",
          "1197: static const char __pyx_k_towrite[] = \"towrite\";",
          "1198: static const char __pyx_k_read_one[] = \"read_one\";",
          "1199: static const char __pyx_k_read_varint[] = \"read_varint\";",
          "1200: static const char __pyx_k_write_varint[] = \"write_varint\";",
          "1201: static const char __pyx_k_cline_in_traceback[] = \"cline_in_traceback\";",
          "1202: static const char __pyx_k_clickhouse_driver_varint[] = \"clickhouse_driver.varint\";",
          "1203: static const char __pyx_k_clickhouse_driver_varint_pyx[] = \"clickhouse_driver/varint.pyx\";",
          "1204: static PyObject *__pyx_n_s_buf;",
          "1205: static PyObject *__pyx_n_s_clickhouse_driver_varint;",
          "1206: static PyObject *__pyx_kp_s_clickhouse_driver_varint_pyx;",
          "1207: static PyObject *__pyx_n_s_cline_in_traceback;",
          "1208: static PyObject *__pyx_n_s_f;",
          "1209: static PyObject *__pyx_n_s_i;",
          "1210: static PyObject *__pyx_n_s_main;",
          "1211: static PyObject *__pyx_n_s_name;",
          "1212: static PyObject *__pyx_n_s_num_buf;",
          "1213: static PyObject *__pyx_n_s_number;",
          "1214: static PyObject *__pyx_n_s_read_one;",
          "1215: static PyObject *__pyx_n_s_read_varint;",
          "1216: static PyObject *__pyx_n_s_result;",
          "1217: static PyObject *__pyx_n_s_shift;",
          "1218: static PyObject *__pyx_n_s_test;",
          "1219: static PyObject *__pyx_n_s_towrite;",
          "1220: static PyObject *__pyx_n_s_write;",
          "1221: static PyObject *__pyx_n_s_write_varint;",
          "1224: static PyObject *__pyx_tuple_;",
          "1225: static PyObject *__pyx_tuple__3;",
          "1226: static PyObject *__pyx_codeobj__2;",
          "1227: static PyObject *__pyx_codeobj__4;",
          "1240: static char __pyx_doc_17clickhouse_driver_6varint_write_varint[] = \"\\n    Writes integer of variable length using LEB128.\\n    \";",
          "1241: static PyMethodDef __pyx_mdef_17clickhouse_driver_6varint_1write_varint = {\"write_varint\", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_17clickhouse_driver_6varint_1write_varint, METH_VARARGS|METH_KEYWORDS, __pyx_doc_17clickhouse_driver_6varint_write_varint};",
          "1242: static PyObject *__pyx_pw_17clickhouse_driver_6varint_1write_varint(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {",
          "1243:   Py_ssize_t __pyx_v_number;",
          "1244:   PyObject *__pyx_v_buf = 0;",
          "1245:   PyObject *__pyx_r = 0;",
          "1246:   __Pyx_RefNannyDeclarations",
          "1247:   __Pyx_RefNannySetupContext(\"write_varint (wrapper)\", 0);",
          "1248:   {",
          "1249:     static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_number,&__pyx_n_s_buf,0};",
          "1250:     PyObject* values[2] = {0,0};",
          "1251:     if (unlikely(__pyx_kwds)) {",
          "1252:       Py_ssize_t kw_args;",
          "1253:       const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);",
          "1254:       switch (pos_args) {",
          "1255:         case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);",
          "1256:         CYTHON_FALLTHROUGH;",
          "1257:         case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);",
          "1258:         CYTHON_FALLTHROUGH;",
          "1259:         case  0: break;",
          "1260:         default: goto __pyx_L5_argtuple_error;",
          "1261:       }",
          "1262:       kw_args = PyDict_Size(__pyx_kwds);",
          "1263:       switch (pos_args) {",
          "1264:         case  0:",
          "1265:         if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_number)) != 0)) kw_args--;",
          "1266:         else goto __pyx_L5_argtuple_error;",
          "1267:         CYTHON_FALLTHROUGH;",
          "1268:         case  1:",
          "1269:         if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_buf)) != 0)) kw_args--;",
          "1270:         else {",
          "1271:           __Pyx_RaiseArgtupleInvalid(\"write_varint\", 1, 2, 2, 1); __PYX_ERR(0, 4, __pyx_L3_error)",
          "1272:         }",
          "1273:       }",
          "1274:       if (unlikely(kw_args > 0)) {",
          "1275:         if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, \"write_varint\") < 0)) __PYX_ERR(0, 4, __pyx_L3_error)",
          "1276:       }",
          "1277:     } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {",
          "1278:       goto __pyx_L5_argtuple_error;",
          "1279:     } else {",
          "1280:       values[0] = PyTuple_GET_ITEM(__pyx_args, 0);",
          "1281:       values[1] = PyTuple_GET_ITEM(__pyx_args, 1);",
          "1282:     }",
          "1283:     __pyx_v_number = __Pyx_PyIndex_AsSsize_t(values[0]); if (unlikely((__pyx_v_number == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 4, __pyx_L3_error)",
          "1284:     __pyx_v_buf = values[1];",
          "1285:   }",
          "1286:   goto __pyx_L4_argument_unpacking_done;",
          "1287:   __pyx_L5_argtuple_error:;",
          "1288:   __Pyx_RaiseArgtupleInvalid(\"write_varint\", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 4, __pyx_L3_error)",
          "1289:   __pyx_L3_error:;",
          "1290:   __Pyx_AddTraceback(\"clickhouse_driver.varint.write_varint\", __pyx_clineno, __pyx_lineno, __pyx_filename);",
          "1291:   __Pyx_RefNannyFinishContext();",
          "1292:   return NULL;",
          "1293:   __pyx_L4_argument_unpacking_done:;",
          "1294:   __pyx_r = __pyx_pf_17clickhouse_driver_6varint_write_varint(__pyx_self, __pyx_v_number, __pyx_v_buf);",
          "1297:   __Pyx_RefNannyFinishContext();",
          "1298:   return __pyx_r;",
          "1299: }",
          "1301: static PyObject *__pyx_pf_17clickhouse_driver_6varint_write_varint(CYTHON_UNUSED PyObject *__pyx_self, Py_ssize_t __pyx_v_number, PyObject *__pyx_v_buf) {",
          "1302:   Py_ssize_t __pyx_v_i;",
          "1303:   unsigned char __pyx_v_towrite;",
          "1304:   unsigned char __pyx_v_num_buf[32];",
          "1305:   PyObject *__pyx_r = NULL;",
          "1306:   __Pyx_RefNannyDeclarations",
          "1307:   int __pyx_t_1;",
          "1308:   PyObject *__pyx_t_2 = NULL;",
          "1309:   PyObject *__pyx_t_3 = NULL;",
          "1310:   PyObject *__pyx_t_4 = NULL;",
          "1311:   PyObject *__pyx_t_5 = NULL;",
          "1312:   __Pyx_RefNannySetupContext(\"write_varint\", 0);",
          "1321:   __pyx_v_i = 0;",
          "1330:   while (1) {",
          "1339:     __pyx_v_towrite = (__pyx_v_number & 0x7f);",
          "1348:     __pyx_v_number = (__pyx_v_number >> 7);",
          "1357:     __pyx_t_1 = (__pyx_v_number != 0);",
          "1358:     if (__pyx_t_1) {",
          "1367:       (__pyx_v_num_buf[__pyx_v_i]) = (__pyx_v_towrite | 0x80);",
          "1376:       __pyx_v_i = (__pyx_v_i + 1);",
          "1385:       goto __pyx_L5;",
          "1386:     }",
          "1396:       (__pyx_v_num_buf[__pyx_v_i]) = __pyx_v_towrite;",
          "1405:       __pyx_v_i = (__pyx_v_i + 1);",
          "1414:       goto __pyx_L4_break;",
          "1415:     }",
          "1416:     __pyx_L5:;",
          "1417:   }",
          "1418:   __pyx_L4_break:;",
          "1427:   __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_buf, __pyx_n_s_write); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 26, __pyx_L1_error)",
          "1428:   __Pyx_GOTREF(__pyx_t_3);",
          "1429:   __pyx_t_4 = PyBytes_FromStringAndSize(((char *)__pyx_v_num_buf), __pyx_v_i); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 26, __pyx_L1_error)",
          "1430:   __Pyx_GOTREF(__pyx_t_4);",
          "1431:   __pyx_t_5 = NULL;",
          "1432:   if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {",
          "1433:     __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);",
          "1434:     if (likely(__pyx_t_5)) {",
          "1435:       PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);",
          "1436:       __Pyx_INCREF(__pyx_t_5);",
          "1437:       __Pyx_INCREF(function);",
          "1438:       __Pyx_DECREF_SET(__pyx_t_3, function);",
          "1439:     }",
          "1440:   }",
          "1441:   __pyx_t_2 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4);",
          "1442:   __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;",
          "1443:   __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;",
          "1444:   if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 26, __pyx_L1_error)",
          "1445:   __Pyx_GOTREF(__pyx_t_2);",
          "1446:   __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;",
          "1447:   __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;",
          "1458:   __pyx_r = Py_None; __Pyx_INCREF(Py_None);",
          "1459:   goto __pyx_L0;",
          "1460:   __pyx_L1_error:;",
          "1461:   __Pyx_XDECREF(__pyx_t_2);",
          "1462:   __Pyx_XDECREF(__pyx_t_3);",
          "1463:   __Pyx_XDECREF(__pyx_t_4);",
          "1464:   __Pyx_XDECREF(__pyx_t_5);",
          "1465:   __Pyx_AddTraceback(\"clickhouse_driver.varint.write_varint\", __pyx_clineno, __pyx_lineno, __pyx_filename);",
          "1466:   __pyx_r = NULL;",
          "1467:   __pyx_L0:;",
          "1468:   __Pyx_XGIVEREF(__pyx_r);",
          "1469:   __Pyx_RefNannyFinishContext();",
          "1470:   return __pyx_r;",
          "1471: }",
          "1483: static char __pyx_doc_17clickhouse_driver_6varint_2read_varint[] = \"\\n    Reads integer of variable length using LEB128.\\n    \";",
          "1484: static PyMethodDef __pyx_mdef_17clickhouse_driver_6varint_3read_varint = {\"read_varint\", (PyCFunction)__pyx_pw_17clickhouse_driver_6varint_3read_varint, METH_O, __pyx_doc_17clickhouse_driver_6varint_2read_varint};",
          "1485: static PyObject *__pyx_pw_17clickhouse_driver_6varint_3read_varint(PyObject *__pyx_self, PyObject *__pyx_v_f) {",
          "1486:   PyObject *__pyx_r = 0;",
          "1487:   __Pyx_RefNannyDeclarations",
          "1488:   __Pyx_RefNannySetupContext(\"read_varint (wrapper)\", 0);",
          "1489:   __pyx_r = __pyx_pf_17clickhouse_driver_6varint_2read_varint(__pyx_self, ((PyObject *)__pyx_v_f));",
          "1492:   __Pyx_RefNannyFinishContext();",
          "1493:   return __pyx_r;",
          "1494: }",
          "1496: static PyObject *__pyx_pf_17clickhouse_driver_6varint_2read_varint(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_f) {",
          "1497:   Py_ssize_t __pyx_v_shift;",
          "1498:   Py_ssize_t __pyx_v_result;",
          "1499:   unsigned char __pyx_v_i;",
          "1500:   PyObject *__pyx_r = NULL;",
          "1501:   __Pyx_RefNannyDeclarations",
          "1502:   PyObject *__pyx_t_1 = NULL;",
          "1503:   PyObject *__pyx_t_2 = NULL;",
          "1504:   PyObject *__pyx_t_3 = NULL;",
          "1505:   unsigned char __pyx_t_4;",
          "1506:   int __pyx_t_5;",
          "1507:   __Pyx_RefNannySetupContext(\"read_varint\", 0);",
          "1516:   __pyx_v_shift = 0;",
          "1525:   __pyx_v_result = 0;",
          "1534:   while (1) {",
          "1543:     __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_f, __pyx_n_s_read_one); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 38, __pyx_L1_error)",
          "1544:     __Pyx_GOTREF(__pyx_t_2);",
          "1545:     __pyx_t_3 = NULL;",
          "1546:     if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {",
          "1547:       __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);",
          "1548:       if (likely(__pyx_t_3)) {",
          "1549:         PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);",
          "1550:         __Pyx_INCREF(__pyx_t_3);",
          "1551:         __Pyx_INCREF(function);",
          "1552:         __Pyx_DECREF_SET(__pyx_t_2, function);",
          "1553:       }",
          "1554:     }",
          "1555:     __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);",
          "1556:     __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;",
          "1557:     if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 38, __pyx_L1_error)",
          "1558:     __Pyx_GOTREF(__pyx_t_1);",
          "1559:     __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;",
          "1560:     __pyx_t_4 = __Pyx_PyInt_As_unsigned_char(__pyx_t_1); if (unlikely((__pyx_t_4 == (unsigned char)-1) && PyErr_Occurred())) __PYX_ERR(0, 38, __pyx_L1_error)",
          "1561:     __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;",
          "1562:     __pyx_v_i = __pyx_t_4;",
          "1571:     __pyx_v_result = (__pyx_v_result | ((__pyx_v_i & 0x7f) << __pyx_v_shift));",
          "1580:     __pyx_v_shift = (__pyx_v_shift + 7);",
          "1589:     __pyx_t_5 = ((__pyx_v_i < 0x80) != 0);",
          "1590:     if (__pyx_t_5) {",
          "1599:       goto __pyx_L4_break;",
          "1608:     }",
          "1609:   }",
          "1610:   __pyx_L4_break:;",
          "1617:   __Pyx_XDECREF(__pyx_r);",
          "1618:   __pyx_t_1 = PyInt_FromSsize_t(__pyx_v_result); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 44, __pyx_L1_error)",
          "1619:   __Pyx_GOTREF(__pyx_t_1);",
          "1620:   __pyx_r = __pyx_t_1;",
          "1621:   __pyx_t_1 = 0;",
          "1622:   goto __pyx_L0;",
          "1633:   __pyx_L1_error:;",
          "1634:   __Pyx_XDECREF(__pyx_t_1);",
          "1635:   __Pyx_XDECREF(__pyx_t_2);",
          "1636:   __Pyx_XDECREF(__pyx_t_3);",
          "1637:   __Pyx_AddTraceback(\"clickhouse_driver.varint.read_varint\", __pyx_clineno, __pyx_lineno, __pyx_filename);",
          "1638:   __pyx_r = NULL;",
          "1639:   __pyx_L0:;",
          "1640:   __Pyx_XGIVEREF(__pyx_r);",
          "1641:   __Pyx_RefNannyFinishContext();",
          "1642:   return __pyx_r;",
          "1643: }",
          "1645: static PyMethodDef __pyx_methods[] = {",
          "1646:   {0, 0, 0, 0}",
          "1647: };",
          "1649: #if PY_MAJOR_VERSION >= 3",
          "1650: #if CYTHON_PEP489_MULTI_PHASE_INIT",
          "1653: static PyModuleDef_Slot __pyx_moduledef_slots[] = {",
          "1654:   {Py_mod_create, (void*)__pyx_pymod_create},",
          "1655:   {Py_mod_exec, (void*)__pyx_pymod_exec_varint},",
          "1656:   {0, NULL}",
          "1657: };",
          "1658: #endif",
          "1660: static struct PyModuleDef __pyx_moduledef = {",
          "1661:     PyModuleDef_HEAD_INIT,",
          "1662:     \"varint\",",
          "1664:   #if CYTHON_PEP489_MULTI_PHASE_INIT",
          "1666:   #else",
          "1668:   #endif",
          "1669:     __pyx_methods /* m_methods */,",
          "1670:   #if CYTHON_PEP489_MULTI_PHASE_INIT",
          "1672:   #else",
          "1674:   #endif",
          "1678: };",
          "1679: #endif",
          "1680: #ifndef CYTHON_SMALL_CODE",
          "1681: #if defined(__clang__)",
          "1682:     #define CYTHON_SMALL_CODE",
          "1683: #elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))",
          "1684:     #define CYTHON_SMALL_CODE __attribute__((cold))",
          "1685: #else",
          "1686:     #define CYTHON_SMALL_CODE",
          "1687: #endif",
          "1688: #endif",
          "1690: static __Pyx_StringTabEntry __pyx_string_tab[] = {",
          "1691:   {&__pyx_n_s_buf, __pyx_k_buf, sizeof(__pyx_k_buf), 0, 0, 1, 1},",
          "1692:   {&__pyx_n_s_clickhouse_driver_varint, __pyx_k_clickhouse_driver_varint, sizeof(__pyx_k_clickhouse_driver_varint), 0, 0, 1, 1},",
          "1693:   {&__pyx_kp_s_clickhouse_driver_varint_pyx, __pyx_k_clickhouse_driver_varint_pyx, sizeof(__pyx_k_clickhouse_driver_varint_pyx), 0, 0, 1, 0},",
          "1694:   {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},",
          "1695:   {&__pyx_n_s_f, __pyx_k_f, sizeof(__pyx_k_f), 0, 0, 1, 1},",
          "1696:   {&__pyx_n_s_i, __pyx_k_i, sizeof(__pyx_k_i), 0, 0, 1, 1},",
          "1697:   {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},",
          "1698:   {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},",
          "1699:   {&__pyx_n_s_num_buf, __pyx_k_num_buf, sizeof(__pyx_k_num_buf), 0, 0, 1, 1},",
          "1700:   {&__pyx_n_s_number, __pyx_k_number, sizeof(__pyx_k_number), 0, 0, 1, 1},",
          "1701:   {&__pyx_n_s_read_one, __pyx_k_read_one, sizeof(__pyx_k_read_one), 0, 0, 1, 1},",
          "1702:   {&__pyx_n_s_read_varint, __pyx_k_read_varint, sizeof(__pyx_k_read_varint), 0, 0, 1, 1},",
          "1703:   {&__pyx_n_s_result, __pyx_k_result, sizeof(__pyx_k_result), 0, 0, 1, 1},",
          "1704:   {&__pyx_n_s_shift, __pyx_k_shift, sizeof(__pyx_k_shift), 0, 0, 1, 1},",
          "1705:   {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},",
          "1706:   {&__pyx_n_s_towrite, __pyx_k_towrite, sizeof(__pyx_k_towrite), 0, 0, 1, 1},",
          "1707:   {&__pyx_n_s_write, __pyx_k_write, sizeof(__pyx_k_write), 0, 0, 1, 1},",
          "1708:   {&__pyx_n_s_write_varint, __pyx_k_write_varint, sizeof(__pyx_k_write_varint), 0, 0, 1, 1},",
          "1709:   {0, 0, 0, 0, 0, 0, 0}",
          "1710: };",
          "1711: static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(void) {",
          "1712:   return 0;",
          "1713: }",
          "1715: static CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(void) {",
          "1716:   __Pyx_RefNannyDeclarations",
          "1717:   __Pyx_RefNannySetupContext(\"__Pyx_InitCachedConstants\", 0);",
          "1726:   __pyx_tuple_ = PyTuple_Pack(5, __pyx_n_s_number, __pyx_n_s_buf, __pyx_n_s_i, __pyx_n_s_towrite, __pyx_n_s_num_buf); if (unlikely(!__pyx_tuple_)) __PYX_ERR(0, 4, __pyx_L1_error)",
          "1727:   __Pyx_GOTREF(__pyx_tuple_);",
          "1728:   __Pyx_GIVEREF(__pyx_tuple_);",
          "1729:   __pyx_codeobj__2 = (PyObject*)__Pyx_PyCode_New(2, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple_, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_clickhouse_driver_varint_pyx, __pyx_n_s_write_varint, 4, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__2)) __PYX_ERR(0, 4, __pyx_L1_error)",
          "1738:   __pyx_tuple__3 = PyTuple_Pack(4, __pyx_n_s_f, __pyx_n_s_shift, __pyx_n_s_result, __pyx_n_s_i); if (unlikely(!__pyx_tuple__3)) __PYX_ERR(0, 29, __pyx_L1_error)",
          "1739:   __Pyx_GOTREF(__pyx_tuple__3);",
          "1740:   __Pyx_GIVEREF(__pyx_tuple__3);",
          "1741:   __pyx_codeobj__4 = (PyObject*)__Pyx_PyCode_New(1, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__3, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_clickhouse_driver_varint_pyx, __pyx_n_s_read_varint, 29, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__4)) __PYX_ERR(0, 29, __pyx_L1_error)",
          "1742:   __Pyx_RefNannyFinishContext();",
          "1743:   return 0;",
          "1744:   __pyx_L1_error:;",
          "1745:   __Pyx_RefNannyFinishContext();",
          "1746:   return -1;",
          "1747: }",
          "1749: static CYTHON_SMALL_CODE int __Pyx_InitGlobals(void) {",
          "1750:   if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 1, __pyx_L1_error);",
          "1751:   return 0;",
          "1752:   __pyx_L1_error:;",
          "1753:   return -1;",
          "1754: }",
          "1764: static int __Pyx_modinit_global_init_code(void) {",
          "1765:   __Pyx_RefNannyDeclarations",
          "1766:   __Pyx_RefNannySetupContext(\"__Pyx_modinit_global_init_code\", 0);",
          "1768:   __Pyx_RefNannyFinishContext();",
          "1769:   return 0;",
          "1770: }",
          "1772: static int __Pyx_modinit_variable_export_code(void) {",
          "1773:   __Pyx_RefNannyDeclarations",
          "1774:   __Pyx_RefNannySetupContext(\"__Pyx_modinit_variable_export_code\", 0);",
          "1776:   __Pyx_RefNannyFinishContext();",
          "1777:   return 0;",
          "1778: }",
          "1780: static int __Pyx_modinit_function_export_code(void) {",
          "1781:   __Pyx_RefNannyDeclarations",
          "1782:   __Pyx_RefNannySetupContext(\"__Pyx_modinit_function_export_code\", 0);",
          "1784:   __Pyx_RefNannyFinishContext();",
          "1785:   return 0;",
          "1786: }",
          "1788: static int __Pyx_modinit_type_init_code(void) {",
          "1789:   __Pyx_RefNannyDeclarations",
          "1790:   __Pyx_RefNannySetupContext(\"__Pyx_modinit_type_init_code\", 0);",
          "1792:   __Pyx_RefNannyFinishContext();",
          "1793:   return 0;",
          "1794: }",
          "1796: static int __Pyx_modinit_type_import_code(void) {",
          "1797:   __Pyx_RefNannyDeclarations",
          "1798:   PyObject *__pyx_t_1 = NULL;",
          "1799:   __Pyx_RefNannySetupContext(\"__Pyx_modinit_type_import_code\", 0);",
          "1801:   __pyx_t_1 = PyImport_ImportModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 9, __pyx_L1_error)",
          "1802:   __Pyx_GOTREF(__pyx_t_1);",
          "1803:   __pyx_ptype_7cpython_4type_type = __Pyx_ImportType(__pyx_t_1, __Pyx_BUILTIN_MODULE_NAME, \"type\",",
          "1804:   #if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x050B0000",
          "1805:   sizeof(PyTypeObject),",
          "1806:   #else",
          "1807:   sizeof(PyHeapTypeObject),",
          "1808:   #endif",
          "1809:   __Pyx_ImportType_CheckSize_Warn);",
          "1810:    if (!__pyx_ptype_7cpython_4type_type) __PYX_ERR(1, 9, __pyx_L1_error)",
          "1811:   __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;",
          "1812:   __pyx_t_1 = PyImport_ImportModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 8, __pyx_L1_error)",
          "1813:   __Pyx_GOTREF(__pyx_t_1);",
          "1814:   __pyx_ptype_7cpython_4bool_bool = __Pyx_ImportType(__pyx_t_1, __Pyx_BUILTIN_MODULE_NAME, \"bool\", sizeof(PyBoolObject), __Pyx_ImportType_CheckSize_Warn);",
          "1815:    if (!__pyx_ptype_7cpython_4bool_bool) __PYX_ERR(2, 8, __pyx_L1_error)",
          "1816:   __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;",
          "1817:   __pyx_t_1 = PyImport_ImportModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 15, __pyx_L1_error)",
          "1818:   __Pyx_GOTREF(__pyx_t_1);",
          "1819:   __pyx_ptype_7cpython_7complex_complex = __Pyx_ImportType(__pyx_t_1, __Pyx_BUILTIN_MODULE_NAME, \"complex\", sizeof(PyComplexObject), __Pyx_ImportType_CheckSize_Warn);",
          "1820:    if (!__pyx_ptype_7cpython_7complex_complex) __PYX_ERR(3, 15, __pyx_L1_error)",
          "1821:   __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;",
          "1822:   __Pyx_RefNannyFinishContext();",
          "1823:   return 0;",
          "1824:   __pyx_L1_error:;",
          "1825:   __Pyx_XDECREF(__pyx_t_1);",
          "1826:   __Pyx_RefNannyFinishContext();",
          "1827:   return -1;",
          "1828: }",
          "1830: static int __Pyx_modinit_variable_import_code(void) {",
          "1831:   __Pyx_RefNannyDeclarations",
          "1832:   __Pyx_RefNannySetupContext(\"__Pyx_modinit_variable_import_code\", 0);",
          "1834:   __Pyx_RefNannyFinishContext();",
          "1835:   return 0;",
          "1836: }",
          "1838: static int __Pyx_modinit_function_import_code(void) {",
          "1839:   __Pyx_RefNannyDeclarations",
          "1840:   __Pyx_RefNannySetupContext(\"__Pyx_modinit_function_import_code\", 0);",
          "1842:   __Pyx_RefNannyFinishContext();",
          "1843:   return 0;",
          "1844: }",
          "1847: #if PY_MAJOR_VERSION < 3",
          "1848: #ifdef CYTHON_NO_PYINIT_EXPORT",
          "1849: #define __Pyx_PyMODINIT_FUNC void",
          "1850: #else",
          "1851: #define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC",
          "1852: #endif",
          "1853: #else",
          "1854: #ifdef CYTHON_NO_PYINIT_EXPORT",
          "1855: #define __Pyx_PyMODINIT_FUNC PyObject *",
          "1856: #else",
          "1857: #define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC",
          "1858: #endif",
          "1859: #endif",
          "1862: #if PY_MAJOR_VERSION < 3",
          "1864: __Pyx_PyMODINIT_FUNC initvarint(void)",
          "1865: #else",
          "1867: __Pyx_PyMODINIT_FUNC PyInit_varint(void)",
          "1868: #if CYTHON_PEP489_MULTI_PHASE_INIT",
          "1869: {",
          "1870:   return PyModuleDef_Init(&__pyx_moduledef);",
          "1871: }",
          "1872: static CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {",
          "1873:     #if PY_VERSION_HEX >= 0x030700A1",
          "1874:     static PY_INT64_T main_interpreter_id = -1;",
          "1875:     PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);",
          "1876:     if (main_interpreter_id == -1) {",
          "1877:         main_interpreter_id = current_id;",
          "1878:         return (unlikely(current_id == -1)) ? -1 : 0;",
          "1879:     } else if (unlikely(main_interpreter_id != current_id))",
          "1880:     #else",
          "1881:     static PyInterpreterState *main_interpreter = NULL;",
          "1882:     PyInterpreterState *current_interpreter = PyThreadState_Get()->interp;",
          "1883:     if (!main_interpreter) {",
          "1884:         main_interpreter = current_interpreter;",
          "1885:     } else if (unlikely(main_interpreter != current_interpreter))",
          "1886:     #endif",
          "1887:     {",
          "1888:         PyErr_SetString(",
          "1889:             PyExc_ImportError,",
          "1890:             \"Interpreter change detected - this module can only be loaded into one interpreter per process.\");",
          "1891:         return -1;",
          "1892:     }",
          "1893:     return 0;",
          "1894: }",
          "1895: static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name, int allow_none) {",
          "1896:     PyObject *value = PyObject_GetAttrString(spec, from_name);",
          "1897:     int result = 0;",
          "1898:     if (likely(value)) {",
          "1899:         if (allow_none || value != Py_None) {",
          "1900:             result = PyDict_SetItemString(moddict, to_name, value);",
          "1901:         }",
          "1902:         Py_DECREF(value);",
          "1903:     } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {",
          "1904:         PyErr_Clear();",
          "1905:     } else {",
          "1906:         result = -1;",
          "1907:     }",
          "1908:     return result;",
          "1909: }",
          "1910: static CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, CYTHON_UNUSED PyModuleDef *def) {",
          "1911:     PyObject *module = NULL, *moddict, *modname;",
          "1912:     if (__Pyx_check_single_interpreter())",
          "1913:         return NULL;",
          "1914:     if (__pyx_m)",
          "1915:         return __Pyx_NewRef(__pyx_m);",
          "1916:     modname = PyObject_GetAttrString(spec, \"name\");",
          "1917:     if (unlikely(!modname)) goto bad;",
          "1918:     module = PyModule_NewObject(modname);",
          "1919:     Py_DECREF(modname);",
          "1920:     if (unlikely(!module)) goto bad;",
          "1921:     moddict = PyModule_GetDict(module);",
          "1922:     if (unlikely(!moddict)) goto bad;",
          "1923:     if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, \"loader\", \"__loader__\", 1) < 0)) goto bad;",
          "1924:     if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, \"origin\", \"__file__\", 1) < 0)) goto bad;",
          "1925:     if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, \"parent\", \"__package__\", 1) < 0)) goto bad;",
          "1926:     if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, \"submodule_search_locations\", \"__path__\", 0) < 0)) goto bad;",
          "1927:     return module;",
          "1928: bad:",
          "1929:     Py_XDECREF(module);",
          "1930:     return NULL;",
          "1931: }",
          "1934: static CYTHON_SMALL_CODE int __pyx_pymod_exec_varint(PyObject *__pyx_pyinit_module)",
          "1935: #endif",
          "1936: #endif",
          "1937: {",
          "1938:   PyObject *__pyx_t_1 = NULL;",
          "1939:   __Pyx_RefNannyDeclarations",
          "1940:   #if CYTHON_PEP489_MULTI_PHASE_INIT",
          "1941:   if (__pyx_m) {",
          "1942:     if (__pyx_m == __pyx_pyinit_module) return 0;",
          "1943:     PyErr_SetString(PyExc_RuntimeError, \"Module 'varint' has already been imported. Re-initialisation is not supported.\");",
          "1944:     return -1;",
          "1945:   }",
          "1946:   #elif PY_MAJOR_VERSION >= 3",
          "1947:   if (__pyx_m) return __Pyx_NewRef(__pyx_m);",
          "1948:   #endif",
          "1949:   #if CYTHON_REFNANNY",
          "1950: __Pyx_RefNanny = __Pyx_RefNannyImportAPI(\"refnanny\");",
          "1951: if (!__Pyx_RefNanny) {",
          "1952:   PyErr_Clear();",
          "1953:   __Pyx_RefNanny = __Pyx_RefNannyImportAPI(\"Cython.Runtime.refnanny\");",
          "1954:   if (!__Pyx_RefNanny)",
          "1955:       Py_FatalError(\"failed to import 'refnanny' module\");",
          "1956: }",
          "1957: #endif",
          "1958:   __Pyx_RefNannySetupContext(\"__Pyx_PyMODINIT_FUNC PyInit_varint(void)\", 0);",
          "1959:   if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 1, __pyx_L1_error)",
          "1960:   #ifdef __Pxy_PyFrame_Initialize_Offsets",
          "1961:   __Pxy_PyFrame_Initialize_Offsets();",
          "1962:   #endif",
          "1963:   __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)",
          "1964:   __pyx_empty_bytes = PyBytes_FromStringAndSize(\"\", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)",
          "1965:   __pyx_empty_unicode = PyUnicode_FromStringAndSize(\"\", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)",
          "1966:   #ifdef __Pyx_CyFunction_USED",
          "1967:   if (__pyx_CyFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)",
          "1968:   #endif",
          "1969:   #ifdef __Pyx_FusedFunction_USED",
          "1970:   if (__pyx_FusedFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)",
          "1971:   #endif",
          "1972:   #ifdef __Pyx_Coroutine_USED",
          "1973:   if (__pyx_Coroutine_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)",
          "1974:   #endif",
          "1975:   #ifdef __Pyx_Generator_USED",
          "1976:   if (__pyx_Generator_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)",
          "1977:   #endif",
          "1978:   #ifdef __Pyx_AsyncGen_USED",
          "1979:   if (__pyx_AsyncGen_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)",
          "1980:   #endif",
          "1981:   #ifdef __Pyx_StopAsyncIteration_USED",
          "1982:   if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)",
          "1983:   #endif",
          "1986:   #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS",
          "1988:   PyEval_InitThreads();",
          "1989:   #endif",
          "1990:   #endif",
          "1992:   #if CYTHON_PEP489_MULTI_PHASE_INIT",
          "1993:   __pyx_m = __pyx_pyinit_module;",
          "1994:   Py_INCREF(__pyx_m);",
          "1995:   #else",
          "1996:   #if PY_MAJOR_VERSION < 3",
          "1997:   __pyx_m = Py_InitModule4(\"varint\", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);",
          "1998:   #else",
          "1999:   __pyx_m = PyModule_Create(&__pyx_moduledef);",
          "2000:   #endif",
          "2001:   if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)",
          "2002:   #endif",
          "2003:   __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)",
          "2004:   Py_INCREF(__pyx_d);",
          "2005:   __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)",
          "2006:   Py_INCREF(__pyx_b);",
          "2007:   __pyx_cython_runtime = PyImport_AddModule((char *) \"cython_runtime\"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(0, 1, __pyx_L1_error)",
          "2008:   Py_INCREF(__pyx_cython_runtime);",
          "2009:   if (PyObject_SetAttrString(__pyx_m, \"__builtins__\", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error);",
          "2011:   if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)",
          "2012:   #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)",
          "2013:   if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)",
          "2014:   #endif",
          "2015:   if (__pyx_module_is_main_clickhouse_driver__varint) {",
          "2016:     if (PyObject_SetAttr(__pyx_m, __pyx_n_s_name, __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)",
          "2017:   }",
          "2018:   #if PY_MAJOR_VERSION >= 3",
          "2019:   {",
          "2020:     PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)",
          "2021:     if (!PyDict_GetItemString(modules, \"clickhouse_driver.varint\")) {",
          "2022:       if (unlikely(PyDict_SetItemString(modules, \"clickhouse_driver.varint\", __pyx_m) < 0)) __PYX_ERR(0, 1, __pyx_L1_error)",
          "2023:     }",
          "2024:   }",
          "2025:   #endif",
          "2027:   if (__Pyx_InitCachedBuiltins() < 0) goto __pyx_L1_error;",
          "2029:   if (__Pyx_InitCachedConstants() < 0) goto __pyx_L1_error;",
          "2031:   (void)__Pyx_modinit_global_init_code();",
          "2032:   (void)__Pyx_modinit_variable_export_code();",
          "2033:   (void)__Pyx_modinit_function_export_code();",
          "2034:   (void)__Pyx_modinit_type_init_code();",
          "2035:   if (unlikely(__Pyx_modinit_type_import_code() != 0)) goto __pyx_L1_error;",
          "2036:   (void)__Pyx_modinit_variable_import_code();",
          "2037:   (void)__Pyx_modinit_function_import_code();",
          "2039:   #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)",
          "2040:   if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)",
          "2041:   #endif",
          "2050:   __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_17clickhouse_driver_6varint_1write_varint, NULL, __pyx_n_s_clickhouse_driver_varint); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)",
          "2051:   __Pyx_GOTREF(__pyx_t_1);",
          "2052:   if (PyDict_SetItem(__pyx_d, __pyx_n_s_write_varint, __pyx_t_1) < 0) __PYX_ERR(0, 4, __pyx_L1_error)",
          "2053:   __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;",
          "2062:   __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_17clickhouse_driver_6varint_3read_varint, NULL, __pyx_n_s_clickhouse_driver_varint); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 29, __pyx_L1_error)",
          "2063:   __Pyx_GOTREF(__pyx_t_1);",
          "2064:   if (PyDict_SetItem(__pyx_d, __pyx_n_s_read_varint, __pyx_t_1) < 0) __PYX_ERR(0, 29, __pyx_L1_error)",
          "2065:   __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;",
          "2072:   __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)",
          "2073:   __Pyx_GOTREF(__pyx_t_1);",
          "2074:   if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_1) < 0) __PYX_ERR(0, 1, __pyx_L1_error)",
          "2075:   __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;",
          "2079:   goto __pyx_L0;",
          "2080:   __pyx_L1_error:;",
          "2081:   __Pyx_XDECREF(__pyx_t_1);",
          "2082:   if (__pyx_m) {",
          "2083:     if (__pyx_d) {",
          "2084:       __Pyx_AddTraceback(\"init clickhouse_driver.varint\", __pyx_clineno, __pyx_lineno, __pyx_filename);",
          "2085:     }",
          "2086:     Py_CLEAR(__pyx_m);",
          "2087:   } else if (!PyErr_Occurred()) {",
          "2088:     PyErr_SetString(PyExc_ImportError, \"init clickhouse_driver.varint\");",
          "2089:   }",
          "2090:   __pyx_L0:;",
          "2091:   __Pyx_RefNannyFinishContext();",
          "2092:   #if CYTHON_PEP489_MULTI_PHASE_INIT",
          "2093:   return (__pyx_m != NULL) ? 0 : -1;",
          "2094:   #elif PY_MAJOR_VERSION >= 3",
          "2095:   return __pyx_m;",
          "2096:   #else",
          "2097:   return;",
          "2098:   #endif",
          "2099: }",
          "2103: #if CYTHON_REFNANNY",
          "2104: static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {",
          "2105:     PyObject *m = NULL, *p = NULL;",
          "2106:     void *r = NULL;",
          "2107:     m = PyImport_ImportModule(modname);",
          "2108:     if (!m) goto end;",
          "2109:     p = PyObject_GetAttrString(m, \"RefNannyAPI\");",
          "2110:     if (!p) goto end;",
          "2111:     r = PyLong_AsVoidPtr(p);",
          "2112: end:",
          "2113:     Py_XDECREF(p);",
          "2114:     Py_XDECREF(m);",
          "2115:     return (__Pyx_RefNannyAPIStruct *)r;",
          "2116: }",
          "2117: #endif",
          "2120: static void __Pyx_RaiseArgtupleInvalid(",
          "2121:     const char* func_name,",
          "2122:     int exact,",
          "2123:     Py_ssize_t num_min,",
          "2124:     Py_ssize_t num_max,",
          "2125:     Py_ssize_t num_found)",
          "2126: {",
          "2127:     Py_ssize_t num_expected;",
          "2128:     const char *more_or_less;",
          "2129:     if (num_found < num_min) {",
          "2130:         num_expected = num_min;",
          "2131:         more_or_less = \"at least\";",
          "2132:     } else {",
          "2133:         num_expected = num_max;",
          "2134:         more_or_less = \"at most\";",
          "2135:     }",
          "2136:     if (exact) {",
          "2137:         more_or_less = \"exactly\";",
          "2138:     }",
          "2139:     PyErr_Format(PyExc_TypeError,",
          "2140:                  \"%.200s() takes %.8s %\" CYTHON_FORMAT_SSIZE_T \"d positional argument%.1s (%\" CYTHON_FORMAT_SSIZE_T \"d given)\",",
          "2141:                  func_name, more_or_less, num_expected,",
          "2142:                  (num_expected == 1) ? \"\" : \"s\", num_found);",
          "2143: }",
          "2146: static void __Pyx_RaiseDoubleKeywordsError(",
          "2147:     const char* func_name,",
          "2148:     PyObject* kw_name)",
          "2149: {",
          "2150:     PyErr_Format(PyExc_TypeError,",
          "2151:         #if PY_MAJOR_VERSION >= 3",
          "2152:         \"%s() got multiple values for keyword argument '%U'\", func_name, kw_name);",
          "2153:         #else",
          "2154:         \"%s() got multiple values for keyword argument '%s'\", func_name,",
          "2155:         PyString_AsString(kw_name));",
          "2156:         #endif",
          "2157: }",
          "2160: static int __Pyx_ParseOptionalKeywords(",
          "2161:     PyObject *kwds,",
          "2162:     PyObject **argnames[],",
          "2163:     PyObject *kwds2,",
          "2164:     PyObject *values[],",
          "2165:     Py_ssize_t num_pos_args,",
          "2166:     const char* function_name)",
          "2167: {",
          "2168:     PyObject *key = 0, *value = 0;",
          "2169:     Py_ssize_t pos = 0;",
          "2170:     PyObject*** name;",
          "2171:     PyObject*** first_kw_arg = argnames + num_pos_args;",
          "2172:     while (PyDict_Next(kwds, &pos, &key, &value)) {",
          "2173:         name = first_kw_arg;",
          "2174:         while (*name && (**name != key)) name++;",
          "2175:         if (*name) {",
          "2176:             values[name-argnames] = value;",
          "2177:             continue;",
          "2178:         }",
          "2179:         name = first_kw_arg;",
          "2180:         #if PY_MAJOR_VERSION < 3",
          "2181:         if (likely(PyString_CheckExact(key)) || likely(PyString_Check(key))) {",
          "2182:             while (*name) {",
          "2183:                 if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))",
          "2184:                         && _PyString_Eq(**name, key)) {",
          "2185:                     values[name-argnames] = value;",
          "2186:                     break;",
          "2187:                 }",
          "2188:                 name++;",
          "2189:             }",
          "2190:             if (*name) continue;",
          "2191:             else {",
          "2192:                 PyObject*** argname = argnames;",
          "2193:                 while (argname != first_kw_arg) {",
          "2194:                     if ((**argname == key) || (",
          "2195:                             (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))",
          "2196:                              && _PyString_Eq(**argname, key))) {",
          "2197:                         goto arg_passed_twice;",
          "2198:                     }",
          "2199:                     argname++;",
          "2200:                 }",
          "2201:             }",
          "2202:         } else",
          "2203:         #endif",
          "2204:         if (likely(PyUnicode_Check(key))) {",
          "2205:             while (*name) {",
          "2206:                 int cmp = (**name == key) ? 0 :",
          "2207:                 #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3",
          "2208:                     (PyUnicode_GET_SIZE(**name) != PyUnicode_GET_SIZE(key)) ? 1 :",
          "2209:                 #endif",
          "2210:                     PyUnicode_Compare(**name, key);",
          "2211:                 if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;",
          "2212:                 if (cmp == 0) {",
          "2213:                     values[name-argnames] = value;",
          "2214:                     break;",
          "2215:                 }",
          "2216:                 name++;",
          "2217:             }",
          "2218:             if (*name) continue;",
          "2219:             else {",
          "2220:                 PyObject*** argname = argnames;",
          "2221:                 while (argname != first_kw_arg) {",
          "2222:                     int cmp = (**argname == key) ? 0 :",
          "2223:                     #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3",
          "2224:                         (PyUnicode_GET_SIZE(**argname) != PyUnicode_GET_SIZE(key)) ? 1 :",
          "2225:                     #endif",
          "2226:                         PyUnicode_Compare(**argname, key);",
          "2227:                     if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;",
          "2228:                     if (cmp == 0) goto arg_passed_twice;",
          "2229:                     argname++;",
          "2230:                 }",
          "2231:             }",
          "2232:         } else",
          "2233:             goto invalid_keyword_type;",
          "2234:         if (kwds2) {",
          "2235:             if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;",
          "2236:         } else {",
          "2237:             goto invalid_keyword;",
          "2238:         }",
          "2239:     }",
          "2240:     return 0;",
          "2241: arg_passed_twice:",
          "2242:     __Pyx_RaiseDoubleKeywordsError(function_name, key);",
          "2243:     goto bad;",
          "2244: invalid_keyword_type:",
          "2245:     PyErr_Format(PyExc_TypeError,",
          "2246:         \"%.200s() keywords must be strings\", function_name);",
          "2247:     goto bad;",
          "2248: invalid_keyword:",
          "2249:     PyErr_Format(PyExc_TypeError,",
          "2250:     #if PY_MAJOR_VERSION < 3",
          "2251:         \"%.200s() got an unexpected keyword argument '%.200s'\",",
          "2252:         function_name, PyString_AsString(key));",
          "2253:     #else",
          "2254:         \"%s() got an unexpected keyword argument '%U'\",",
          "2255:         function_name, key);",
          "2256:     #endif",
          "2257: bad:",
          "2258:     return -1;",
          "2259: }",
          "2262: #if CYTHON_USE_TYPE_SLOTS",
          "2263: static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {",
          "2264:     PyTypeObject* tp = Py_TYPE(obj);",
          "2265:     if (likely(tp->tp_getattro))",
          "2266:         return tp->tp_getattro(obj, attr_name);",
          "2267: #if PY_MAJOR_VERSION < 3",
          "2268:     if (likely(tp->tp_getattr))",
          "2269:         return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));",
          "2270: #endif",
          "2271:     return PyObject_GetAttr(obj, attr_name);",
          "2272: }",
          "2273: #endif",
          "2276: #if CYTHON_FAST_PYCCALL",
          "2277: static CYTHON_INLINE PyObject * __Pyx_PyCFunction_FastCall(PyObject *func_obj, PyObject **args, Py_ssize_t nargs) {",
          "2278:     PyCFunctionObject *func = (PyCFunctionObject*)func_obj;",
          "2279:     PyCFunction meth = PyCFunction_GET_FUNCTION(func);",
          "2280:     PyObject *self = PyCFunction_GET_SELF(func);",
          "2281:     int flags = PyCFunction_GET_FLAGS(func);",
          "2282:     assert(PyCFunction_Check(func));",
          "2283:     assert(METH_FASTCALL == (flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)));",
          "2284:     assert(nargs >= 0);",
          "2285:     assert(nargs == 0 || args != NULL);",
          "2287:        because it may clear it (directly or indirectly) and so the",
          "2289:     assert(!PyErr_Occurred());",
          "2290:     if ((PY_VERSION_HEX < 0x030700A0) || unlikely(flags & METH_KEYWORDS)) {",
          "2291:         return (*((__Pyx_PyCFunctionFastWithKeywords)(void*)meth)) (self, args, nargs, NULL);",
          "2292:     } else {",
          "2293:         return (*((__Pyx_PyCFunctionFast)(void*)meth)) (self, args, nargs);",
          "2294:     }",
          "2295: }",
          "2296: #endif",
          "2299: #if CYTHON_FAST_PYCALL",
          "2300: static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,",
          "2301:                                                PyObject *globals) {",
          "2302:     PyFrameObject *f;",
          "2303:     PyThreadState *tstate = __Pyx_PyThreadState_Current;",
          "2304:     PyObject **fastlocals;",
          "2305:     Py_ssize_t i;",
          "2306:     PyObject *result;",
          "2307:     assert(globals != NULL);",
          "2309:        PyFrame_New() that doesn't take locals, but does",
          "2310:        take builtins without sanity checking them.",
          "2312:     assert(tstate != NULL);",
          "2313:     f = PyFrame_New(tstate, co, globals, NULL);",
          "2314:     if (f == NULL) {",
          "2315:         return NULL;",
          "2316:     }",
          "2317:     fastlocals = __Pyx_PyFrame_GetLocalsplus(f);",
          "2318:     for (i = 0; i < na; i++) {",
          "2319:         Py_INCREF(*args);",
          "2320:         fastlocals[i] = *args++;",
          "2321:     }",
          "2322:     result = PyEval_EvalFrameEx(f,0);",
          "2323:     ++tstate->recursion_depth;",
          "2324:     Py_DECREF(f);",
          "2325:     --tstate->recursion_depth;",
          "2326:     return result;",
          "2327: }",
          "2328: #if 1 || PY_VERSION_HEX < 0x030600B1",
          "2329: static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs) {",
          "2330:     PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);",
          "2331:     PyObject *globals = PyFunction_GET_GLOBALS(func);",
          "2332:     PyObject *argdefs = PyFunction_GET_DEFAULTS(func);",
          "2333:     PyObject *closure;",
          "2334: #if PY_MAJOR_VERSION >= 3",
          "2335:     PyObject *kwdefs;",
          "2336: #endif",
          "2337:     PyObject *kwtuple, **k;",
          "2338:     PyObject **d;",
          "2339:     Py_ssize_t nd;",
          "2340:     Py_ssize_t nk;",
          "2341:     PyObject *result;",
          "2342:     assert(kwargs == NULL || PyDict_Check(kwargs));",
          "2343:     nk = kwargs ? PyDict_Size(kwargs) : 0;",
          "2344:     if (Py_EnterRecursiveCall((char*)\" while calling a Python object\")) {",
          "2345:         return NULL;",
          "2346:     }",
          "2347:     if (",
          "2348: #if PY_MAJOR_VERSION >= 3",
          "2349:             co->co_kwonlyargcount == 0 &&",
          "2350: #endif",
          "2351:             likely(kwargs == NULL || nk == 0) &&",
          "2352:             co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {",
          "2353:         if (argdefs == NULL && co->co_argcount == nargs) {",
          "2354:             result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);",
          "2355:             goto done;",
          "2356:         }",
          "2357:         else if (nargs == 0 && argdefs != NULL",
          "2358:                  && co->co_argcount == Py_SIZE(argdefs)) {",
          "2361:             args = &PyTuple_GET_ITEM(argdefs, 0);",
          "2362:             result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);",
          "2363:             goto done;",
          "2364:         }",
          "2365:     }",
          "2366:     if (kwargs != NULL) {",
          "2367:         Py_ssize_t pos, i;",
          "2368:         kwtuple = PyTuple_New(2 * nk);",
          "2369:         if (kwtuple == NULL) {",
          "2370:             result = NULL;",
          "2371:             goto done;",
          "2372:         }",
          "2373:         k = &PyTuple_GET_ITEM(kwtuple, 0);",
          "2374:         pos = i = 0;",
          "2375:         while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {",
          "2376:             Py_INCREF(k[i]);",
          "2377:             Py_INCREF(k[i+1]);",
          "2378:             i += 2;",
          "2379:         }",
          "2380:         nk = i / 2;",
          "2381:     }",
          "2382:     else {",
          "2383:         kwtuple = NULL;",
          "2384:         k = NULL;",
          "2385:     }",
          "2386:     closure = PyFunction_GET_CLOSURE(func);",
          "2387: #if PY_MAJOR_VERSION >= 3",
          "2388:     kwdefs = PyFunction_GET_KW_DEFAULTS(func);",
          "2389: #endif",
          "2390:     if (argdefs != NULL) {",
          "2391:         d = &PyTuple_GET_ITEM(argdefs, 0);",
          "2392:         nd = Py_SIZE(argdefs);",
          "2393:     }",
          "2394:     else {",
          "2395:         d = NULL;",
          "2396:         nd = 0;",
          "2397:     }",
          "2398: #if PY_MAJOR_VERSION >= 3",
          "2399:     result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,",
          "2400:                                args, (int)nargs,",
          "2401:                                k, (int)nk,",
          "2402:                                d, (int)nd, kwdefs, closure);",
          "2403: #else",
          "2404:     result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,",
          "2405:                                args, (int)nargs,",
          "2406:                                k, (int)nk,",
          "2407:                                d, (int)nd, closure);",
          "2408: #endif",
          "2409:     Py_XDECREF(kwtuple);",
          "2410: done:",
          "2411:     Py_LeaveRecursiveCall();",
          "2412:     return result;",
          "2413: }",
          "2414: #endif",
          "2415: #endif",
          "2418: #if CYTHON_COMPILING_IN_CPYTHON",
          "2419: static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {",
          "2420:     PyObject *result;",
          "2421:     ternaryfunc call = func->ob_type->tp_call;",
          "2422:     if (unlikely(!call))",
          "2423:         return PyObject_Call(func, arg, kw);",
          "2424:     if (unlikely(Py_EnterRecursiveCall((char*)\" while calling a Python object\")))",
          "2425:         return NULL;",
          "2426:     result = (*call)(func, arg, kw);",
          "2427:     Py_LeaveRecursiveCall();",
          "2428:     if (unlikely(!result) && unlikely(!PyErr_Occurred())) {",
          "2429:         PyErr_SetString(",
          "2430:             PyExc_SystemError,",
          "2431:             \"NULL result without error in PyObject_Call\");",
          "2432:     }",
          "2433:     return result;",
          "2434: }",
          "2435: #endif",
          "2438: static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2) {",
          "2439:     PyObject *args, *result = NULL;",
          "2440:     #if CYTHON_FAST_PYCALL",
          "2441:     if (PyFunction_Check(function)) {",
          "2442:         PyObject *args[2] = {arg1, arg2};",
          "2443:         return __Pyx_PyFunction_FastCall(function, args, 2);",
          "2444:     }",
          "2445:     #endif",
          "2446:     #if CYTHON_FAST_PYCCALL",
          "2447:     if (__Pyx_PyFastCFunction_Check(function)) {",
          "2448:         PyObject *args[2] = {arg1, arg2};",
          "2449:         return __Pyx_PyCFunction_FastCall(function, args, 2);",
          "2450:     }",
          "2451:     #endif",
          "2452:     args = PyTuple_New(2);",
          "2453:     if (unlikely(!args)) goto done;",
          "2454:     Py_INCREF(arg1);",
          "2455:     PyTuple_SET_ITEM(args, 0, arg1);",
          "2456:     Py_INCREF(arg2);",
          "2457:     PyTuple_SET_ITEM(args, 1, arg2);",
          "2458:     Py_INCREF(function);",
          "2459:     result = __Pyx_PyObject_Call(function, args, NULL);",
          "2460:     Py_DECREF(args);",
          "2461:     Py_DECREF(function);",
          "2462: done:",
          "2463:     return result;",
          "2464: }",
          "2467: #if CYTHON_COMPILING_IN_CPYTHON",
          "2468: static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {",
          "2469:     PyObject *self, *result;",
          "2470:     PyCFunction cfunc;",
          "2471:     cfunc = PyCFunction_GET_FUNCTION(func);",
          "2472:     self = PyCFunction_GET_SELF(func);",
          "2473:     if (unlikely(Py_EnterRecursiveCall((char*)\" while calling a Python object\")))",
          "2474:         return NULL;",
          "2475:     result = cfunc(self, arg);",
          "2476:     Py_LeaveRecursiveCall();",
          "2477:     if (unlikely(!result) && unlikely(!PyErr_Occurred())) {",
          "2478:         PyErr_SetString(",
          "2479:             PyExc_SystemError,",
          "2480:             \"NULL result without error in PyObject_Call\");",
          "2481:     }",
          "2482:     return result;",
          "2483: }",
          "2484: #endif",
          "2487: #if CYTHON_COMPILING_IN_CPYTHON",
          "2488: static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {",
          "2489:     PyObject *result;",
          "2490:     PyObject *args = PyTuple_New(1);",
          "2491:     if (unlikely(!args)) return NULL;",
          "2492:     Py_INCREF(arg);",
          "2493:     PyTuple_SET_ITEM(args, 0, arg);",
          "2494:     result = __Pyx_PyObject_Call(func, args, NULL);",
          "2495:     Py_DECREF(args);",
          "2496:     return result;",
          "2497: }",
          "2498: static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {",
          "2499: #if CYTHON_FAST_PYCALL",
          "2500:     if (PyFunction_Check(func)) {",
          "2501:         return __Pyx_PyFunction_FastCall(func, &arg, 1);",
          "2502:     }",
          "2503: #endif",
          "2504:     if (likely(PyCFunction_Check(func))) {",
          "2505:         if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {",
          "2506:             return __Pyx_PyObject_CallMethO(func, arg);",
          "2507: #if CYTHON_FAST_PYCCALL",
          "2508:         } else if (PyCFunction_GET_FLAGS(func) & METH_FASTCALL) {",
          "2509:             return __Pyx_PyCFunction_FastCall(func, &arg, 1);",
          "2510: #endif",
          "2511:         }",
          "2512:     }",
          "2513:     return __Pyx__PyObject_CallOneArg(func, arg);",
          "2514: }",
          "2515: #else",
          "2516: static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {",
          "2517:     PyObject *result;",
          "2518:     PyObject *args = PyTuple_Pack(1, arg);",
          "2519:     if (unlikely(!args)) return NULL;",
          "2520:     result = __Pyx_PyObject_Call(func, args, NULL);",
          "2521:     Py_DECREF(args);",
          "2522:     return result;",
          "2523: }",
          "2524: #endif",
          "2527: #if CYTHON_COMPILING_IN_CPYTHON",
          "2528: static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {",
          "2529: #if CYTHON_FAST_PYCALL",
          "2530:     if (PyFunction_Check(func)) {",
          "2531:         return __Pyx_PyFunction_FastCall(func, NULL, 0);",
          "2532:     }",
          "2533: #endif",
          "2534: #ifdef __Pyx_CyFunction_USED",
          "2535:     if (likely(PyCFunction_Check(func) || __Pyx_CyFunction_Check(func)))",
          "2536: #else",
          "2537:     if (likely(PyCFunction_Check(func)))",
          "2538: #endif",
          "2539:     {",
          "2540:         if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {",
          "2541:             return __Pyx_PyObject_CallMethO(func, NULL);",
          "2542:         }",
          "2543:     }",
          "2544:     return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);",
          "2545: }",
          "2546: #endif",
          "2549: #ifndef __PYX_HAVE_RT_ImportType",
          "2550: #define __PYX_HAVE_RT_ImportType",
          "2551: static PyTypeObject *__Pyx_ImportType(PyObject *module, const char *module_name, const char *class_name,",
          "2552:     size_t size, enum __Pyx_ImportType_CheckSize check_size)",
          "2553: {",
          "2554:     PyObject *result = 0;",
          "2555:     char warning[200];",
          "2556:     Py_ssize_t basicsize;",
          "2557: #ifdef Py_LIMITED_API",
          "2558:     PyObject *py_basicsize;",
          "2559: #endif",
          "2560:     result = PyObject_GetAttrString(module, class_name);",
          "2561:     if (!result)",
          "2562:         goto bad;",
          "2563:     if (!PyType_Check(result)) {",
          "2564:         PyErr_Format(PyExc_TypeError,",
          "2565:             \"%.200s.%.200s is not a type object\",",
          "2566:             module_name, class_name);",
          "2567:         goto bad;",
          "2568:     }",
          "2569: #ifndef Py_LIMITED_API",
          "2570:     basicsize = ((PyTypeObject *)result)->tp_basicsize;",
          "2571: #else",
          "2572:     py_basicsize = PyObject_GetAttrString(result, \"__basicsize__\");",
          "2573:     if (!py_basicsize)",
          "2574:         goto bad;",
          "2575:     basicsize = PyLong_AsSsize_t(py_basicsize);",
          "2576:     Py_DECREF(py_basicsize);",
          "2577:     py_basicsize = 0;",
          "2578:     if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())",
          "2579:         goto bad;",
          "2580: #endif",
          "2581:     if ((size_t)basicsize < size) {",
          "2582:         PyErr_Format(PyExc_ValueError,",
          "2583:             \"%.200s.%.200s size changed, may indicate binary incompatibility. \"",
          "2584:             \"Expected %zd from C header, got %zd from PyObject\",",
          "2585:             module_name, class_name, size, basicsize);",
          "2586:         goto bad;",
          "2587:     }",
          "2588:     if (check_size == __Pyx_ImportType_CheckSize_Error && (size_t)basicsize != size) {",
          "2589:         PyErr_Format(PyExc_ValueError,",
          "2590:             \"%.200s.%.200s size changed, may indicate binary incompatibility. \"",
          "2591:             \"Expected %zd from C header, got %zd from PyObject\",",
          "2592:             module_name, class_name, size, basicsize);",
          "2593:         goto bad;",
          "2594:     }",
          "2595:     else if (check_size == __Pyx_ImportType_CheckSize_Warn && (size_t)basicsize > size) {",
          "2596:         PyOS_snprintf(warning, sizeof(warning),",
          "2597:             \"%s.%s size changed, may indicate binary incompatibility. \"",
          "2598:             \"Expected %zd from C header, got %zd from PyObject\",",
          "2599:             module_name, class_name, size, basicsize);",
          "2600:         if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;",
          "2601:     }",
          "2602:     return (PyTypeObject *)result;",
          "2603: bad:",
          "2604:     Py_XDECREF(result);",
          "2605:     return NULL;",
          "2606: }",
          "2607: #endif",
          "2610: #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS",
          "2611: static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj) {",
          "2612:     PyObject *dict = Py_TYPE(obj)->tp_dict;",
          "2613:     return likely(dict) ? __PYX_GET_DICT_VERSION(dict) : 0;",
          "2614: }",
          "2615: static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj) {",
          "2616:     PyObject **dictptr = NULL;",
          "2617:     Py_ssize_t offset = Py_TYPE(obj)->tp_dictoffset;",
          "2618:     if (offset) {",
          "2619: #if CYTHON_COMPILING_IN_CPYTHON",
          "2620:         dictptr = (likely(offset > 0)) ? (PyObject **) ((char *)obj + offset) : _PyObject_GetDictPtr(obj);",
          "2621: #else",
          "2622:         dictptr = _PyObject_GetDictPtr(obj);",
          "2623: #endif",
          "2624:     }",
          "2625:     return (dictptr && *dictptr) ? __PYX_GET_DICT_VERSION(*dictptr) : 0;",
          "2626: }",
          "2627: static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version) {",
          "2628:     PyObject *dict = Py_TYPE(obj)->tp_dict;",
          "2629:     if (unlikely(!dict) || unlikely(tp_dict_version != __PYX_GET_DICT_VERSION(dict)))",
          "2630:         return 0;",
          "2631:     return obj_dict_version == __Pyx_get_object_dict_version(obj);",
          "2632: }",
          "2633: #endif",
          "2636: #if CYTHON_FAST_THREAD_STATE",
          "2637: static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {",
          "2638:     PyObject *tmp_type, *tmp_value, *tmp_tb;",
          "2639:     tmp_type = tstate->curexc_type;",
          "2640:     tmp_value = tstate->curexc_value;",
          "2641:     tmp_tb = tstate->curexc_traceback;",
          "2642:     tstate->curexc_type = type;",
          "2643:     tstate->curexc_value = value;",
          "2644:     tstate->curexc_traceback = tb;",
          "2645:     Py_XDECREF(tmp_type);",
          "2646:     Py_XDECREF(tmp_value);",
          "2647:     Py_XDECREF(tmp_tb);",
          "2648: }",
          "2649: static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {",
          "2653:     tstate->curexc_type = 0;",
          "2654:     tstate->curexc_value = 0;",
          "2655:     tstate->curexc_traceback = 0;",
          "2656: }",
          "2657: #endif",
          "2660: #ifndef CYTHON_CLINE_IN_TRACEBACK",
          "2661: static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line) {",
          "2662:     PyObject *use_cline;",
          "2663:     PyObject *ptype, *pvalue, *ptraceback;",
          "2664: #if CYTHON_COMPILING_IN_CPYTHON",
          "2665:     PyObject **cython_runtime_dict;",
          "2666: #endif",
          "2667:     if (unlikely(!__pyx_cython_runtime)) {",
          "2668:         return c_line;",
          "2669:     }",
          "2670:     __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);",
          "2671: #if CYTHON_COMPILING_IN_CPYTHON",
          "2672:     cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);",
          "2673:     if (likely(cython_runtime_dict)) {",
          "2674:         __PYX_PY_DICT_LOOKUP_IF_MODIFIED(",
          "2675:             use_cline, *cython_runtime_dict,",
          "2676:             __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback))",
          "2677:     } else",
          "2678: #endif",
          "2679:     {",
          "2680:       PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);",
          "2681:       if (use_cline_obj) {",
          "2682:         use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;",
          "2683:         Py_DECREF(use_cline_obj);",
          "2684:       } else {",
          "2685:         PyErr_Clear();",
          "2686:         use_cline = NULL;",
          "2687:       }",
          "2688:     }",
          "2689:     if (!use_cline) {",
          "2690:         c_line = 0;",
          "2691:         PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);",
          "2692:     }",
          "2693:     else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {",
          "2694:         c_line = 0;",
          "2695:     }",
          "2696:     __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);",
          "2697:     return c_line;",
          "2698: }",
          "2699: #endif",
          "2702: static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {",
          "2703:     int start = 0, mid = 0, end = count - 1;",
          "2704:     if (end >= 0 && code_line > entries[end].code_line) {",
          "2705:         return count;",
          "2706:     }",
          "2707:     while (start < end) {",
          "2708:         mid = start + (end - start) / 2;",
          "2709:         if (code_line < entries[mid].code_line) {",
          "2710:             end = mid;",
          "2711:         } else if (code_line > entries[mid].code_line) {",
          "2712:              start = mid + 1;",
          "2713:         } else {",
          "2714:             return mid;",
          "2715:         }",
          "2716:     }",
          "2717:     if (code_line <= entries[mid].code_line) {",
          "2718:         return mid;",
          "2719:     } else {",
          "2720:         return mid + 1;",
          "2721:     }",
          "2722: }",
          "2723: static PyCodeObject *__pyx_find_code_object(int code_line) {",
          "2724:     PyCodeObject* code_object;",
          "2725:     int pos;",
          "2726:     if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {",
          "2727:         return NULL;",
          "2728:     }",
          "2729:     pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);",
          "2730:     if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {",
          "2731:         return NULL;",
          "2732:     }",
          "2733:     code_object = __pyx_code_cache.entries[pos].code_object;",
          "2734:     Py_INCREF(code_object);",
          "2735:     return code_object;",
          "2736: }",
          "2737: static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {",
          "2738:     int pos, i;",
          "2739:     __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;",
          "2740:     if (unlikely(!code_line)) {",
          "2741:         return;",
          "2742:     }",
          "2743:     if (unlikely(!entries)) {",
          "2744:         entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));",
          "2745:         if (likely(entries)) {",
          "2746:             __pyx_code_cache.entries = entries;",
          "2747:             __pyx_code_cache.max_count = 64;",
          "2748:             __pyx_code_cache.count = 1;",
          "2749:             entries[0].code_line = code_line;",
          "2750:             entries[0].code_object = code_object;",
          "2751:             Py_INCREF(code_object);",
          "2752:         }",
          "2753:         return;",
          "2754:     }",
          "2755:     pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);",
          "2756:     if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {",
          "2757:         PyCodeObject* tmp = entries[pos].code_object;",
          "2758:         entries[pos].code_object = code_object;",
          "2759:         Py_DECREF(tmp);",
          "2760:         return;",
          "2761:     }",
          "2762:     if (__pyx_code_cache.count == __pyx_code_cache.max_count) {",
          "2763:         int new_max = __pyx_code_cache.max_count + 64;",
          "2764:         entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(",
          "2765:             __pyx_code_cache.entries, (size_t)new_max*sizeof(__Pyx_CodeObjectCacheEntry));",
          "2766:         if (unlikely(!entries)) {",
          "2767:             return;",
          "2768:         }",
          "2769:         __pyx_code_cache.entries = entries;",
          "2770:         __pyx_code_cache.max_count = new_max;",
          "2771:     }",
          "2772:     for (i=__pyx_code_cache.count; i>pos; i--) {",
          "2773:         entries[i] = entries[i-1];",
          "2774:     }",
          "2775:     entries[pos].code_line = code_line;",
          "2776:     entries[pos].code_object = code_object;",
          "2777:     __pyx_code_cache.count++;",
          "2778:     Py_INCREF(code_object);",
          "2779: }",
          "2782: #include \"compile.h\"",
          "2783: #include \"frameobject.h\"",
          "2784: #include \"traceback.h\"",
          "2785: static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(",
          "2786:             const char *funcname, int c_line,",
          "2787:             int py_line, const char *filename) {",
          "2788:     PyCodeObject *py_code = 0;",
          "2789:     PyObject *py_srcfile = 0;",
          "2790:     PyObject *py_funcname = 0;",
          "2791:     #if PY_MAJOR_VERSION < 3",
          "2792:     py_srcfile = PyString_FromString(filename);",
          "2793:     #else",
          "2794:     py_srcfile = PyUnicode_FromString(filename);",
          "2795:     #endif",
          "2796:     if (!py_srcfile) goto bad;",
          "2797:     if (c_line) {",
          "2798:         #if PY_MAJOR_VERSION < 3",
          "2799:         py_funcname = PyString_FromFormat( \"%s (%s:%d)\", funcname, __pyx_cfilenm, c_line);",
          "2800:         #else",
          "2801:         py_funcname = PyUnicode_FromFormat( \"%s (%s:%d)\", funcname, __pyx_cfilenm, c_line);",
          "2802:         #endif",
          "2803:     }",
          "2804:     else {",
          "2805:         #if PY_MAJOR_VERSION < 3",
          "2806:         py_funcname = PyString_FromString(funcname);",
          "2807:         #else",
          "2808:         py_funcname = PyUnicode_FromString(funcname);",
          "2809:         #endif",
          "2810:     }",
          "2811:     if (!py_funcname) goto bad;",
          "2812:     py_code = __Pyx_PyCode_New(",
          "2813:         0,",
          "2814:         0,",
          "2815:         0,",
          "2816:         0,",
          "2817:         0,",
          "2826:         py_line,",
          "2828:     );",
          "2829:     Py_DECREF(py_srcfile);",
          "2830:     Py_DECREF(py_funcname);",
          "2831:     return py_code;",
          "2832: bad:",
          "2833:     Py_XDECREF(py_srcfile);",
          "2834:     Py_XDECREF(py_funcname);",
          "2835:     return NULL;",
          "2836: }",
          "2837: static void __Pyx_AddTraceback(const char *funcname, int c_line,",
          "2838:                                int py_line, const char *filename) {",
          "2839:     PyCodeObject *py_code = 0;",
          "2840:     PyFrameObject *py_frame = 0;",
          "2841:     PyThreadState *tstate = __Pyx_PyThreadState_Current;",
          "2842:     if (c_line) {",
          "2843:         c_line = __Pyx_CLineForTraceback(tstate, c_line);",
          "2844:     }",
          "2845:     py_code = __pyx_find_code_object(c_line ? -c_line : py_line);",
          "2846:     if (!py_code) {",
          "2847:         py_code = __Pyx_CreateCodeObjectForTraceback(",
          "2848:             funcname, c_line, py_line, filename);",
          "2849:         if (!py_code) goto bad;",
          "2850:         __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);",
          "2851:     }",
          "2852:     py_frame = PyFrame_New(",
          "2857:     );",
          "2858:     if (!py_frame) goto bad;",
          "2859:     __Pyx_PyFrame_SetLineNumber(py_frame, py_line);",
          "2860:     PyTraceBack_Here(py_frame);",
          "2861: bad:",
          "2862:     Py_XDECREF(py_code);",
          "2863:     Py_XDECREF(py_frame);",
          "2864: }",
          "2867: #define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\\",
          "2868:     __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)",
          "2869: #define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\\",
          "2870:     __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)",
          "2871: #define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\\",
          "2872:     {\\",
          "2873:         func_type value = func_value;\\",
          "2874:         if (sizeof(target_type) < sizeof(func_type)) {\\",
          "2875:             if (unlikely(value != (func_type) (target_type) value)) {\\",
          "2876:                 func_type zero = 0;\\",
          "2877:                 if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\\",
          "2878:                     return (target_type) -1;\\",
          "2879:                 if (is_unsigned && unlikely(value < zero))\\",
          "2880:                     goto raise_neg_overflow;\\",
          "2881:                 else\\",
          "2882:                     goto raise_overflow;\\",
          "2883:             }\\",
          "2884:         }\\",
          "2885:         return (target_type) value;\\",
          "2886:     }",
          "2889: static CYTHON_INLINE unsigned char __Pyx_PyInt_As_unsigned_char(PyObject *x) {",
          "2890:     const unsigned char neg_one = (unsigned char) ((unsigned char) 0 - (unsigned char) 1), const_zero = (unsigned char) 0;",
          "2891:     const int is_unsigned = neg_one > const_zero;",
          "2892: #if PY_MAJOR_VERSION < 3",
          "2893:     if (likely(PyInt_Check(x))) {",
          "2894:         if (sizeof(unsigned char) < sizeof(long)) {",
          "2895:             __PYX_VERIFY_RETURN_INT(unsigned char, long, PyInt_AS_LONG(x))",
          "2896:         } else {",
          "2897:             long val = PyInt_AS_LONG(x);",
          "2898:             if (is_unsigned && unlikely(val < 0)) {",
          "2899:                 goto raise_neg_overflow;",
          "2900:             }",
          "2901:             return (unsigned char) val;",
          "2902:         }",
          "2903:     } else",
          "2904: #endif",
          "2905:     if (likely(PyLong_Check(x))) {",
          "2906:         if (is_unsigned) {",
          "2907: #if CYTHON_USE_PYLONG_INTERNALS",
          "2908:             const digit* digits = ((PyLongObject*)x)->ob_digit;",
          "2909:             switch (Py_SIZE(x)) {",
          "2910:                 case  0: return (unsigned char) 0;",
          "2911:                 case  1: __PYX_VERIFY_RETURN_INT(unsigned char, digit, digits[0])",
          "2912:                 case 2:",
          "2913:                     if (8 * sizeof(unsigned char) > 1 * PyLong_SHIFT) {",
          "2914:                         if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {",
          "2915:                             __PYX_VERIFY_RETURN_INT(unsigned char, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))",
          "2916:                         } else if (8 * sizeof(unsigned char) >= 2 * PyLong_SHIFT) {",
          "2917:                             return (unsigned char) (((((unsigned char)digits[1]) << PyLong_SHIFT) | (unsigned char)digits[0]));",
          "2918:                         }",
          "2919:                     }",
          "2920:                     break;",
          "2921:                 case 3:",
          "2922:                     if (8 * sizeof(unsigned char) > 2 * PyLong_SHIFT) {",
          "2923:                         if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {",
          "2924:                             __PYX_VERIFY_RETURN_INT(unsigned char, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))",
          "2925:                         } else if (8 * sizeof(unsigned char) >= 3 * PyLong_SHIFT) {",
          "2926:                             return (unsigned char) (((((((unsigned char)digits[2]) << PyLong_SHIFT) | (unsigned char)digits[1]) << PyLong_SHIFT) | (unsigned char)digits[0]));",
          "2927:                         }",
          "2928:                     }",
          "2929:                     break;",
          "2930:                 case 4:",
          "2931:                     if (8 * sizeof(unsigned char) > 3 * PyLong_SHIFT) {",
          "2932:                         if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {",
          "2933:                             __PYX_VERIFY_RETURN_INT(unsigned char, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))",
          "2934:                         } else if (8 * sizeof(unsigned char) >= 4 * PyLong_SHIFT) {",
          "2935:                             return (unsigned char) (((((((((unsigned char)digits[3]) << PyLong_SHIFT) | (unsigned char)digits[2]) << PyLong_SHIFT) | (unsigned char)digits[1]) << PyLong_SHIFT) | (unsigned char)digits[0]));",
          "2936:                         }",
          "2937:                     }",
          "2938:                     break;",
          "2939:             }",
          "2940: #endif",
          "2941: #if CYTHON_COMPILING_IN_CPYTHON",
          "2942:             if (unlikely(Py_SIZE(x) < 0)) {",
          "2943:                 goto raise_neg_overflow;",
          "2944:             }",
          "2945: #else",
          "2946:             {",
          "2947:                 int result = PyObject_RichCompareBool(x, Py_False, Py_LT);",
          "2948:                 if (unlikely(result < 0))",
          "2949:                     return (unsigned char) -1;",
          "2950:                 if (unlikely(result == 1))",
          "2951:                     goto raise_neg_overflow;",
          "2952:             }",
          "2953: #endif",
          "2954:             if (sizeof(unsigned char) <= sizeof(unsigned long)) {",
          "2955:                 __PYX_VERIFY_RETURN_INT_EXC(unsigned char, unsigned long, PyLong_AsUnsignedLong(x))",
          "2956: #ifdef HAVE_LONG_LONG",
          "2957:             } else if (sizeof(unsigned char) <= sizeof(unsigned PY_LONG_LONG)) {",
          "2958:                 __PYX_VERIFY_RETURN_INT_EXC(unsigned char, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))",
          "2959: #endif",
          "2960:             }",
          "2961:         } else {",
          "2962: #if CYTHON_USE_PYLONG_INTERNALS",
          "2963:             const digit* digits = ((PyLongObject*)x)->ob_digit;",
          "2964:             switch (Py_SIZE(x)) {",
          "2965:                 case  0: return (unsigned char) 0;",
          "2966:                 case -1: __PYX_VERIFY_RETURN_INT(unsigned char, sdigit, (sdigit) (-(sdigit)digits[0]))",
          "2967:                 case  1: __PYX_VERIFY_RETURN_INT(unsigned char,  digit, +digits[0])",
          "2968:                 case -2:",
          "2969:                     if (8 * sizeof(unsigned char) - 1 > 1 * PyLong_SHIFT) {",
          "2970:                         if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {",
          "2971:                             __PYX_VERIFY_RETURN_INT(unsigned char, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))",
          "2972:                         } else if (8 * sizeof(unsigned char) - 1 > 2 * PyLong_SHIFT) {",
          "2973:                             return (unsigned char) (((unsigned char)-1)*(((((unsigned char)digits[1]) << PyLong_SHIFT) | (unsigned char)digits[0])));",
          "2974:                         }",
          "2975:                     }",
          "2976:                     break;",
          "2977:                 case 2:",
          "2978:                     if (8 * sizeof(unsigned char) > 1 * PyLong_SHIFT) {",
          "2979:                         if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {",
          "2980:                             __PYX_VERIFY_RETURN_INT(unsigned char, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))",
          "2981:                         } else if (8 * sizeof(unsigned char) - 1 > 2 * PyLong_SHIFT) {",
          "2982:                             return (unsigned char) ((((((unsigned char)digits[1]) << PyLong_SHIFT) | (unsigned char)digits[0])));",
          "2983:                         }",
          "2984:                     }",
          "2985:                     break;",
          "2986:                 case -3:",
          "2987:                     if (8 * sizeof(unsigned char) - 1 > 2 * PyLong_SHIFT) {",
          "2988:                         if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {",
          "2989:                             __PYX_VERIFY_RETURN_INT(unsigned char, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))",
          "2990:                         } else if (8 * sizeof(unsigned char) - 1 > 3 * PyLong_SHIFT) {",
          "2991:                             return (unsigned char) (((unsigned char)-1)*(((((((unsigned char)digits[2]) << PyLong_SHIFT) | (unsigned char)digits[1]) << PyLong_SHIFT) | (unsigned char)digits[0])));",
          "2992:                         }",
          "2993:                     }",
          "2994:                     break;",
          "2995:                 case 3:",
          "2996:                     if (8 * sizeof(unsigned char) > 2 * PyLong_SHIFT) {",
          "2997:                         if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {",
          "2998:                             __PYX_VERIFY_RETURN_INT(unsigned char, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))",
          "2999:                         } else if (8 * sizeof(unsigned char) - 1 > 3 * PyLong_SHIFT) {",
          "3000:                             return (unsigned char) ((((((((unsigned char)digits[2]) << PyLong_SHIFT) | (unsigned char)digits[1]) << PyLong_SHIFT) | (unsigned char)digits[0])));",
          "3001:                         }",
          "3002:                     }",
          "3003:                     break;",
          "3004:                 case -4:",
          "3005:                     if (8 * sizeof(unsigned char) - 1 > 3 * PyLong_SHIFT) {",
          "3006:                         if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {",
          "3007:                             __PYX_VERIFY_RETURN_INT(unsigned char, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))",
          "3008:                         } else if (8 * sizeof(unsigned char) - 1 > 4 * PyLong_SHIFT) {",
          "3009:                             return (unsigned char) (((unsigned char)-1)*(((((((((unsigned char)digits[3]) << PyLong_SHIFT) | (unsigned char)digits[2]) << PyLong_SHIFT) | (unsigned char)digits[1]) << PyLong_SHIFT) | (unsigned char)digits[0])));",
          "3010:                         }",
          "3011:                     }",
          "3012:                     break;",
          "3013:                 case 4:",
          "3014:                     if (8 * sizeof(unsigned char) > 3 * PyLong_SHIFT) {",
          "3015:                         if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {",
          "3016:                             __PYX_VERIFY_RETURN_INT(unsigned char, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))",
          "3017:                         } else if (8 * sizeof(unsigned char) - 1 > 4 * PyLong_SHIFT) {",
          "3018:                             return (unsigned char) ((((((((((unsigned char)digits[3]) << PyLong_SHIFT) | (unsigned char)digits[2]) << PyLong_SHIFT) | (unsigned char)digits[1]) << PyLong_SHIFT) | (unsigned char)digits[0])));",
          "3019:                         }",
          "3020:                     }",
          "3021:                     break;",
          "3022:             }",
          "3023: #endif",
          "3024:             if (sizeof(unsigned char) <= sizeof(long)) {",
          "3025:                 __PYX_VERIFY_RETURN_INT_EXC(unsigned char, long, PyLong_AsLong(x))",
          "3026: #ifdef HAVE_LONG_LONG",
          "3027:             } else if (sizeof(unsigned char) <= sizeof(PY_LONG_LONG)) {",
          "3028:                 __PYX_VERIFY_RETURN_INT_EXC(unsigned char, PY_LONG_LONG, PyLong_AsLongLong(x))",
          "3029: #endif",
          "3030:             }",
          "3031:         }",
          "3032:         {",
          "3033: #if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)",
          "3034:             PyErr_SetString(PyExc_RuntimeError,",
          "3035:                             \"_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers\");",
          "3036: #else",
          "3037:             unsigned char val;",
          "3038:             PyObject *v = __Pyx_PyNumber_IntOrLong(x);",
          "3039:  #if PY_MAJOR_VERSION < 3",
          "3040:             if (likely(v) && !PyLong_Check(v)) {",
          "3041:                 PyObject *tmp = v;",
          "3042:                 v = PyNumber_Long(tmp);",
          "3043:                 Py_DECREF(tmp);",
          "3044:             }",
          "3045:  #endif",
          "3046:             if (likely(v)) {",
          "3047:                 int one = 1; int is_little = (int)*(unsigned char *)&one;",
          "3048:                 unsigned char *bytes = (unsigned char *)&val;",
          "3049:                 int ret = _PyLong_AsByteArray((PyLongObject *)v,",
          "3050:                                               bytes, sizeof(val),",
          "3051:                                               is_little, !is_unsigned);",
          "3052:                 Py_DECREF(v);",
          "3053:                 if (likely(!ret))",
          "3054:                     return val;",
          "3055:             }",
          "3056: #endif",
          "3057:             return (unsigned char) -1;",
          "3058:         }",
          "3059:     } else {",
          "3060:         unsigned char val;",
          "3061:         PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);",
          "3062:         if (!tmp) return (unsigned char) -1;",
          "3063:         val = __Pyx_PyInt_As_unsigned_char(tmp);",
          "3064:         Py_DECREF(tmp);",
          "3065:         return val;",
          "3066:     }",
          "3067: raise_overflow:",
          "3068:     PyErr_SetString(PyExc_OverflowError,",
          "3069:         \"value too large to convert to unsigned char\");",
          "3070:     return (unsigned char) -1;",
          "3071: raise_neg_overflow:",
          "3072:     PyErr_SetString(PyExc_OverflowError,",
          "3073:         \"can't convert negative value to unsigned char\");",
          "3074:     return (unsigned char) -1;",
          "3075: }",
          "3078: static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {",
          "3079:     const long neg_one = (long) ((long) 0 - (long) 1), const_zero = (long) 0;",
          "3080:     const int is_unsigned = neg_one > const_zero;",
          "3081:     if (is_unsigned) {",
          "3082:         if (sizeof(long) < sizeof(long)) {",
          "3083:             return PyInt_FromLong((long) value);",
          "3084:         } else if (sizeof(long) <= sizeof(unsigned long)) {",
          "3085:             return PyLong_FromUnsignedLong((unsigned long) value);",
          "3086: #ifdef HAVE_LONG_LONG",
          "3087:         } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {",
          "3088:             return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);",
          "3089: #endif",
          "3090:         }",
          "3091:     } else {",
          "3092:         if (sizeof(long) <= sizeof(long)) {",
          "3093:             return PyInt_FromLong((long) value);",
          "3094: #ifdef HAVE_LONG_LONG",
          "3095:         } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {",
          "3096:             return PyLong_FromLongLong((PY_LONG_LONG) value);",
          "3097: #endif",
          "3098:         }",
          "3099:     }",
          "3100:     {",
          "3101:         int one = 1; int little = (int)*(unsigned char *)&one;",
          "3102:         unsigned char *bytes = (unsigned char *)&value;",
          "3103:         return _PyLong_FromByteArray(bytes, sizeof(long),",
          "3104:                                      little, !is_unsigned);",
          "3105:     }",
          "3106: }",
          "3109: static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {",
          "3110:     const long neg_one = (long) ((long) 0 - (long) 1), const_zero = (long) 0;",
          "3111:     const int is_unsigned = neg_one > const_zero;",
          "3112: #if PY_MAJOR_VERSION < 3",
          "3113:     if (likely(PyInt_Check(x))) {",
          "3114:         if (sizeof(long) < sizeof(long)) {",
          "3115:             __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))",
          "3116:         } else {",
          "3117:             long val = PyInt_AS_LONG(x);",
          "3118:             if (is_unsigned && unlikely(val < 0)) {",
          "3119:                 goto raise_neg_overflow;",
          "3120:             }",
          "3121:             return (long) val;",
          "3122:         }",
          "3123:     } else",
          "3124: #endif",
          "3125:     if (likely(PyLong_Check(x))) {",
          "3126:         if (is_unsigned) {",
          "3127: #if CYTHON_USE_PYLONG_INTERNALS",
          "3128:             const digit* digits = ((PyLongObject*)x)->ob_digit;",
          "3129:             switch (Py_SIZE(x)) {",
          "3130:                 case  0: return (long) 0;",
          "3131:                 case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])",
          "3132:                 case 2:",
          "3133:                     if (8 * sizeof(long) > 1 * PyLong_SHIFT) {",
          "3134:                         if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {",
          "3135:                             __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))",
          "3136:                         } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {",
          "3137:                             return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));",
          "3138:                         }",
          "3139:                     }",
          "3140:                     break;",
          "3141:                 case 3:",
          "3142:                     if (8 * sizeof(long) > 2 * PyLong_SHIFT) {",
          "3143:                         if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {",
          "3144:                             __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))",
          "3145:                         } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {",
          "3146:                             return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));",
          "3147:                         }",
          "3148:                     }",
          "3149:                     break;",
          "3150:                 case 4:",
          "3151:                     if (8 * sizeof(long) > 3 * PyLong_SHIFT) {",
          "3152:                         if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {",
          "3153:                             __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))",
          "3154:                         } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {",
          "3155:                             return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));",
          "3156:                         }",
          "3157:                     }",
          "3158:                     break;",
          "3159:             }",
          "3160: #endif",
          "3161: #if CYTHON_COMPILING_IN_CPYTHON",
          "3162:             if (unlikely(Py_SIZE(x) < 0)) {",
          "3163:                 goto raise_neg_overflow;",
          "3164:             }",
          "3165: #else",
          "3166:             {",
          "3167:                 int result = PyObject_RichCompareBool(x, Py_False, Py_LT);",
          "3168:                 if (unlikely(result < 0))",
          "3169:                     return (long) -1;",
          "3170:                 if (unlikely(result == 1))",
          "3171:                     goto raise_neg_overflow;",
          "3172:             }",
          "3173: #endif",
          "3174:             if (sizeof(long) <= sizeof(unsigned long)) {",
          "3175:                 __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))",
          "3176: #ifdef HAVE_LONG_LONG",
          "3177:             } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {",
          "3178:                 __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))",
          "3179: #endif",
          "3180:             }",
          "3181:         } else {",
          "3182: #if CYTHON_USE_PYLONG_INTERNALS",
          "3183:             const digit* digits = ((PyLongObject*)x)->ob_digit;",
          "3184:             switch (Py_SIZE(x)) {",
          "3185:                 case  0: return (long) 0;",
          "3186:                 case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))",
          "3187:                 case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])",
          "3188:                 case -2:",
          "3189:                     if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {",
          "3190:                         if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {",
          "3191:                             __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))",
          "3192:                         } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {",
          "3193:                             return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));",
          "3194:                         }",
          "3195:                     }",
          "3196:                     break;",
          "3197:                 case 2:",
          "3198:                     if (8 * sizeof(long) > 1 * PyLong_SHIFT) {",
          "3199:                         if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {",
          "3200:                             __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))",
          "3201:                         } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {",
          "3202:                             return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));",
          "3203:                         }",
          "3204:                     }",
          "3205:                     break;",
          "3206:                 case -3:",
          "3207:                     if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {",
          "3208:                         if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {",
          "3209:                             __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))",
          "3210:                         } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {",
          "3211:                             return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));",
          "3212:                         }",
          "3213:                     }",
          "3214:                     break;",
          "3215:                 case 3:",
          "3216:                     if (8 * sizeof(long) > 2 * PyLong_SHIFT) {",
          "3217:                         if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {",
          "3218:                             __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))",
          "3219:                         } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {",
          "3220:                             return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));",
          "3221:                         }",
          "3222:                     }",
          "3223:                     break;",
          "3224:                 case -4:",
          "3225:                     if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {",
          "3226:                         if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {",
          "3227:                             __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))",
          "3228:                         } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {",
          "3229:                             return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));",
          "3230:                         }",
          "3231:                     }",
          "3232:                     break;",
          "3233:                 case 4:",
          "3234:                     if (8 * sizeof(long) > 3 * PyLong_SHIFT) {",
          "3235:                         if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {",
          "3236:                             __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))",
          "3237:                         } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {",
          "3238:                             return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));",
          "3239:                         }",
          "3240:                     }",
          "3241:                     break;",
          "3242:             }",
          "3243: #endif",
          "3244:             if (sizeof(long) <= sizeof(long)) {",
          "3245:                 __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))",
          "3246: #ifdef HAVE_LONG_LONG",
          "3247:             } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {",
          "3248:                 __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))",
          "3249: #endif",
          "3250:             }",
          "3251:         }",
          "3252:         {",
          "3253: #if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)",
          "3254:             PyErr_SetString(PyExc_RuntimeError,",
          "3255:                             \"_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers\");",
          "3256: #else",
          "3257:             long val;",
          "3258:             PyObject *v = __Pyx_PyNumber_IntOrLong(x);",
          "3259:  #if PY_MAJOR_VERSION < 3",
          "3260:             if (likely(v) && !PyLong_Check(v)) {",
          "3261:                 PyObject *tmp = v;",
          "3262:                 v = PyNumber_Long(tmp);",
          "3263:                 Py_DECREF(tmp);",
          "3264:             }",
          "3265:  #endif",
          "3266:             if (likely(v)) {",
          "3267:                 int one = 1; int is_little = (int)*(unsigned char *)&one;",
          "3268:                 unsigned char *bytes = (unsigned char *)&val;",
          "3269:                 int ret = _PyLong_AsByteArray((PyLongObject *)v,",
          "3270:                                               bytes, sizeof(val),",
          "3271:                                               is_little, !is_unsigned);",
          "3272:                 Py_DECREF(v);",
          "3273:                 if (likely(!ret))",
          "3274:                     return val;",
          "3275:             }",
          "3276: #endif",
          "3277:             return (long) -1;",
          "3278:         }",
          "3279:     } else {",
          "3280:         long val;",
          "3281:         PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);",
          "3282:         if (!tmp) return (long) -1;",
          "3283:         val = __Pyx_PyInt_As_long(tmp);",
          "3284:         Py_DECREF(tmp);",
          "3285:         return val;",
          "3286:     }",
          "3287: raise_overflow:",
          "3288:     PyErr_SetString(PyExc_OverflowError,",
          "3289:         \"value too large to convert to long\");",
          "3290:     return (long) -1;",
          "3291: raise_neg_overflow:",
          "3292:     PyErr_SetString(PyExc_OverflowError,",
          "3293:         \"can't convert negative value to long\");",
          "3294:     return (long) -1;",
          "3295: }",
          "3298: static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {",
          "3299:     const int neg_one = (int) ((int) 0 - (int) 1), const_zero = (int) 0;",
          "3300:     const int is_unsigned = neg_one > const_zero;",
          "3301: #if PY_MAJOR_VERSION < 3",
          "3302:     if (likely(PyInt_Check(x))) {",
          "3303:         if (sizeof(int) < sizeof(long)) {",
          "3304:             __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))",
          "3305:         } else {",
          "3306:             long val = PyInt_AS_LONG(x);",
          "3307:             if (is_unsigned && unlikely(val < 0)) {",
          "3308:                 goto raise_neg_overflow;",
          "3309:             }",
          "3310:             return (int) val;",
          "3311:         }",
          "3312:     } else",
          "3313: #endif",
          "3314:     if (likely(PyLong_Check(x))) {",
          "3315:         if (is_unsigned) {",
          "3316: #if CYTHON_USE_PYLONG_INTERNALS",
          "3317:             const digit* digits = ((PyLongObject*)x)->ob_digit;",
          "3318:             switch (Py_SIZE(x)) {",
          "3319:                 case  0: return (int) 0;",
          "3320:                 case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])",
          "3321:                 case 2:",
          "3322:                     if (8 * sizeof(int) > 1 * PyLong_SHIFT) {",
          "3323:                         if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {",
          "3324:                             __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))",
          "3325:                         } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {",
          "3326:                             return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));",
          "3327:                         }",
          "3328:                     }",
          "3329:                     break;",
          "3330:                 case 3:",
          "3331:                     if (8 * sizeof(int) > 2 * PyLong_SHIFT) {",
          "3332:                         if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {",
          "3333:                             __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))",
          "3334:                         } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {",
          "3335:                             return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));",
          "3336:                         }",
          "3337:                     }",
          "3338:                     break;",
          "3339:                 case 4:",
          "3340:                     if (8 * sizeof(int) > 3 * PyLong_SHIFT) {",
          "3341:                         if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {",
          "3342:                             __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))",
          "3343:                         } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {",
          "3344:                             return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));",
          "3345:                         }",
          "3346:                     }",
          "3347:                     break;",
          "3348:             }",
          "3349: #endif",
          "3350: #if CYTHON_COMPILING_IN_CPYTHON",
          "3351:             if (unlikely(Py_SIZE(x) < 0)) {",
          "3352:                 goto raise_neg_overflow;",
          "3353:             }",
          "3354: #else",
          "3355:             {",
          "3356:                 int result = PyObject_RichCompareBool(x, Py_False, Py_LT);",
          "3357:                 if (unlikely(result < 0))",
          "3358:                     return (int) -1;",
          "3359:                 if (unlikely(result == 1))",
          "3360:                     goto raise_neg_overflow;",
          "3361:             }",
          "3362: #endif",
          "3363:             if (sizeof(int) <= sizeof(unsigned long)) {",
          "3364:                 __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))",
          "3365: #ifdef HAVE_LONG_LONG",
          "3366:             } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {",
          "3367:                 __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))",
          "3368: #endif",
          "3369:             }",
          "3370:         } else {",
          "3371: #if CYTHON_USE_PYLONG_INTERNALS",
          "3372:             const digit* digits = ((PyLongObject*)x)->ob_digit;",
          "3373:             switch (Py_SIZE(x)) {",
          "3374:                 case  0: return (int) 0;",
          "3375:                 case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))",
          "3376:                 case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])",
          "3377:                 case -2:",
          "3378:                     if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {",
          "3379:                         if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {",
          "3380:                             __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))",
          "3381:                         } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {",
          "3382:                             return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));",
          "3383:                         }",
          "3384:                     }",
          "3385:                     break;",
          "3386:                 case 2:",
          "3387:                     if (8 * sizeof(int) > 1 * PyLong_SHIFT) {",
          "3388:                         if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {",
          "3389:                             __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))",
          "3390:                         } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {",
          "3391:                             return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));",
          "3392:                         }",
          "3393:                     }",
          "3394:                     break;",
          "3395:                 case -3:",
          "3396:                     if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {",
          "3397:                         if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {",
          "3398:                             __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))",
          "3399:                         } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {",
          "3400:                             return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));",
          "3401:                         }",
          "3402:                     }",
          "3403:                     break;",
          "3404:                 case 3:",
          "3405:                     if (8 * sizeof(int) > 2 * PyLong_SHIFT) {",
          "3406:                         if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {",
          "3407:                             __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))",
          "3408:                         } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {",
          "3409:                             return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));",
          "3410:                         }",
          "3411:                     }",
          "3412:                     break;",
          "3413:                 case -4:",
          "3414:                     if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {",
          "3415:                         if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {",
          "3416:                             __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))",
          "3417:                         } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {",
          "3418:                             return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));",
          "3419:                         }",
          "3420:                     }",
          "3421:                     break;",
          "3422:                 case 4:",
          "3423:                     if (8 * sizeof(int) > 3 * PyLong_SHIFT) {",
          "3424:                         if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {",
          "3425:                             __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))",
          "3426:                         } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {",
          "3427:                             return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));",
          "3428:                         }",
          "3429:                     }",
          "3430:                     break;",
          "3431:             }",
          "3432: #endif",
          "3433:             if (sizeof(int) <= sizeof(long)) {",
          "3434:                 __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))",
          "3435: #ifdef HAVE_LONG_LONG",
          "3436:             } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {",
          "3437:                 __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))",
          "3438: #endif",
          "3439:             }",
          "3440:         }",
          "3441:         {",
          "3442: #if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)",
          "3443:             PyErr_SetString(PyExc_RuntimeError,",
          "3444:                             \"_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers\");",
          "3445: #else",
          "3446:             int val;",
          "3447:             PyObject *v = __Pyx_PyNumber_IntOrLong(x);",
          "3448:  #if PY_MAJOR_VERSION < 3",
          "3449:             if (likely(v) && !PyLong_Check(v)) {",
          "3450:                 PyObject *tmp = v;",
          "3451:                 v = PyNumber_Long(tmp);",
          "3452:                 Py_DECREF(tmp);",
          "3453:             }",
          "3454:  #endif",
          "3455:             if (likely(v)) {",
          "3456:                 int one = 1; int is_little = (int)*(unsigned char *)&one;",
          "3457:                 unsigned char *bytes = (unsigned char *)&val;",
          "3458:                 int ret = _PyLong_AsByteArray((PyLongObject *)v,",
          "3459:                                               bytes, sizeof(val),",
          "3460:                                               is_little, !is_unsigned);",
          "3461:                 Py_DECREF(v);",
          "3462:                 if (likely(!ret))",
          "3463:                     return val;",
          "3464:             }",
          "3465: #endif",
          "3466:             return (int) -1;",
          "3467:         }",
          "3468:     } else {",
          "3469:         int val;",
          "3470:         PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);",
          "3471:         if (!tmp) return (int) -1;",
          "3472:         val = __Pyx_PyInt_As_int(tmp);",
          "3473:         Py_DECREF(tmp);",
          "3474:         return val;",
          "3475:     }",
          "3476: raise_overflow:",
          "3477:     PyErr_SetString(PyExc_OverflowError,",
          "3478:         \"value too large to convert to int\");",
          "3479:     return (int) -1;",
          "3480: raise_neg_overflow:",
          "3481:     PyErr_SetString(PyExc_OverflowError,",
          "3482:         \"can't convert negative value to int\");",
          "3483:     return (int) -1;",
          "3484: }",
          "3487: #if CYTHON_COMPILING_IN_CPYTHON",
          "3488: static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {",
          "3489:     while (a) {",
          "3490:         a = a->tp_base;",
          "3491:         if (a == b)",
          "3492:             return 1;",
          "3493:     }",
          "3494:     return b == &PyBaseObject_Type;",
          "3495: }",
          "3496: static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {",
          "3497:     PyObject *mro;",
          "3498:     if (a == b) return 1;",
          "3499:     mro = a->tp_mro;",
          "3500:     if (likely(mro)) {",
          "3501:         Py_ssize_t i, n;",
          "3502:         n = PyTuple_GET_SIZE(mro);",
          "3503:         for (i = 0; i < n; i++) {",
          "3504:             if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)",
          "3505:                 return 1;",
          "3506:         }",
          "3507:         return 0;",
          "3508:     }",
          "3509:     return __Pyx_InBases(a, b);",
          "3510: }",
          "3511: #if PY_MAJOR_VERSION == 2",
          "3512: static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {",
          "3513:     PyObject *exception, *value, *tb;",
          "3514:     int res;",
          "3515:     __Pyx_PyThreadState_declare",
          "3516:     __Pyx_PyThreadState_assign",
          "3517:     __Pyx_ErrFetch(&exception, &value, &tb);",
          "3518:     res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;",
          "3519:     if (unlikely(res == -1)) {",
          "3520:         PyErr_WriteUnraisable(err);",
          "3521:         res = 0;",
          "3522:     }",
          "3523:     if (!res) {",
          "3524:         res = PyObject_IsSubclass(err, exc_type2);",
          "3525:         if (unlikely(res == -1)) {",
          "3526:             PyErr_WriteUnraisable(err);",
          "3527:             res = 0;",
          "3528:         }",
          "3529:     }",
          "3530:     __Pyx_ErrRestore(exception, value, tb);",
          "3531:     return res;",
          "3532: }",
          "3533: #else",
          "3534: static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {",
          "3535:     int res = exc_type1 ? __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type1) : 0;",
          "3536:     if (!res) {",
          "3537:         res = __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);",
          "3538:     }",
          "3539:     return res;",
          "3540: }",
          "3541: #endif",
          "3542: static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {",
          "3543:     Py_ssize_t i, n;",
          "3544:     assert(PyExceptionClass_Check(exc_type));",
          "3545:     n = PyTuple_GET_SIZE(tuple);",
          "3546: #if PY_MAJOR_VERSION >= 3",
          "3547:     for (i=0; i<n; i++) {",
          "3548:         if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;",
          "3549:     }",
          "3550: #endif",
          "3551:     for (i=0; i<n; i++) {",
          "3552:         PyObject *t = PyTuple_GET_ITEM(tuple, i);",
          "3553:         #if PY_MAJOR_VERSION < 3",
          "3554:         if (likely(exc_type == t)) return 1;",
          "3555:         #endif",
          "3556:         if (likely(PyExceptionClass_Check(t))) {",
          "3557:             if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;",
          "3558:         } else {",
          "3559:         }",
          "3560:     }",
          "3561:     return 0;",
          "3562: }",
          "3563: static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {",
          "3564:     if (likely(err == exc_type)) return 1;",
          "3565:     if (likely(PyExceptionClass_Check(err))) {",
          "3566:         if (likely(PyExceptionClass_Check(exc_type))) {",
          "3567:             return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);",
          "3568:         } else if (likely(PyTuple_Check(exc_type))) {",
          "3569:             return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);",
          "3570:         } else {",
          "3571:         }",
          "3572:     }",
          "3573:     return PyErr_GivenExceptionMatches(err, exc_type);",
          "3574: }",
          "3575: static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {",
          "3576:     assert(PyExceptionClass_Check(exc_type1));",
          "3577:     assert(PyExceptionClass_Check(exc_type2));",
          "3578:     if (likely(err == exc_type1 || err == exc_type2)) return 1;",
          "3579:     if (likely(PyExceptionClass_Check(err))) {",
          "3580:         return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);",
          "3581:     }",
          "3582:     return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));",
          "3583: }",
          "3584: #endif",
          "3587: static int __Pyx_check_binary_version(void) {",
          "3588:     char ctversion[4], rtversion[4];",
          "3589:     PyOS_snprintf(ctversion, 4, \"%d.%d\", PY_MAJOR_VERSION, PY_MINOR_VERSION);",
          "3590:     PyOS_snprintf(rtversion, 4, \"%s\", Py_GetVersion());",
          "3591:     if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {",
          "3592:         char message[200];",
          "3593:         PyOS_snprintf(message, sizeof(message),",
          "3594:                       \"compiletime version %s of module '%.100s' \"",
          "3595:                       \"does not match runtime version %s\",",
          "3596:                       ctversion, __Pyx_MODULE_NAME, rtversion);",
          "3597:         return PyErr_WarnEx(NULL, message, 1);",
          "3598:     }",
          "3599:     return 0;",
          "3600: }",
          "3603: static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {",
          "3604:     while (t->p) {",
          "3605:         #if PY_MAJOR_VERSION < 3",
          "3606:         if (t->is_unicode) {",
          "3608:         } else if (t->intern) {",
          "3610:         } else {",
          "3612:         }",
          "3613:         #else",
          "3614:         if (t->is_unicode | t->is_str) {",
          "3615:             if (t->intern) {",
          "3617:             } else if (t->encoding) {",
          "3619:             } else {",
          "3621:             }",
          "3622:         } else {",
          "3624:         }",
          "3625:         #endif",
          "3626:         if (!*t->p)",
          "3627:             return -1;",
          "3628:         if (PyObject_Hash(*t->p) == -1)",
          "3629:             return -1;",
          "3630:         ++t;",
          "3631:     }",
          "3632:     return 0;",
          "3633: }",
          "3635: static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {",
          "3636:     return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));",
          "3637: }",
          "3638: static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {",
          "3639:     Py_ssize_t ignore;",
          "3640:     return __Pyx_PyObject_AsStringAndSize(o, &ignore);",
          "3641: }",
          "3642: #if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT",
          "3643: #if !CYTHON_PEP393_ENABLED",
          "3644: static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {",
          "3645:     char* defenc_c;",
          "3646:     PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);",
          "3647:     if (!defenc) return NULL;",
          "3648:     defenc_c = PyBytes_AS_STRING(defenc);",
          "3649: #if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII",
          "3650:     {",
          "3651:         char* end = defenc_c + PyBytes_GET_SIZE(defenc);",
          "3652:         char* c;",
          "3653:         for (c = defenc_c; c < end; c++) {",
          "3654:             if ((unsigned char) (*c) >= 128) {",
          "3655:                 PyUnicode_AsASCIIString(o);",
          "3656:                 return NULL;",
          "3657:             }",
          "3658:         }",
          "3659:     }",
          "3660: #endif",
          "3662:     return defenc_c;",
          "3663: }",
          "3664: #else",
          "3665: static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {",
          "3666:     if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;",
          "3667: #if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII",
          "3668:     if (likely(PyUnicode_IS_ASCII(o))) {",
          "3670:         return PyUnicode_AsUTF8(o);",
          "3671:     } else {",
          "3672:         PyUnicode_AsASCIIString(o);",
          "3673:         return NULL;",
          "3674:     }",
          "3675: #else",
          "3676:     return PyUnicode_AsUTF8AndSize(o, length);",
          "3677: #endif",
          "3678: }",
          "3679: #endif",
          "3680: #endif",
          "3681: static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {",
          "3682: #if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT",
          "3683:     if (",
          "3684: #if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII",
          "3685:             __Pyx_sys_getdefaultencoding_not_ascii &&",
          "3686: #endif",
          "3687:             PyUnicode_Check(o)) {",
          "3688:         return __Pyx_PyUnicode_AsStringAndSize(o, length);",
          "3689:     } else",
          "3690: #endif",
          "3691: #if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))",
          "3692:     if (PyByteArray_Check(o)) {",
          "3694:         return PyByteArray_AS_STRING(o);",
          "3695:     } else",
          "3696: #endif",
          "3697:     {",
          "3698:         char* result;",
          "3699:         int r = PyBytes_AsStringAndSize(o, &result, length);",
          "3700:         if (unlikely(r < 0)) {",
          "3701:             return NULL;",
          "3702:         } else {",
          "3703:             return result;",
          "3704:         }",
          "3705:     }",
          "3706: }",
          "3707: static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {",
          "3708:    int is_true = x == Py_True;",
          "3709:    if (is_true | (x == Py_False) | (x == Py_None)) return is_true;",
          "3710:    else return PyObject_IsTrue(x);",
          "3711: }",
          "3712: static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {",
          "3713:     int retval;",
          "3714:     if (unlikely(!x)) return -1;",
          "3715:     retval = __Pyx_PyObject_IsTrue(x);",
          "3716:     Py_DECREF(x);",
          "3717:     return retval;",
          "3718: }",
          "3719: static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {",
          "3720: #if PY_MAJOR_VERSION >= 3",
          "3721:     if (PyLong_Check(result)) {",
          "3722:         if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,",
          "3723:                 \"__int__ returned non-int (type %.200s).  \"",
          "3724:                 \"The ability to return an instance of a strict subclass of int \"",
          "3725:                 \"is deprecated, and may be removed in a future version of Python.\",",
          "3726:                 Py_TYPE(result)->tp_name)) {",
          "3727:             Py_DECREF(result);",
          "3728:             return NULL;",
          "3729:         }",
          "3730:         return result;",
          "3731:     }",
          "3732: #endif",
          "3733:     PyErr_Format(PyExc_TypeError,",
          "3734:                  \"__%.4s__ returned non-%.4s (type %.200s)\",",
          "3735:                  type_name, type_name, Py_TYPE(result)->tp_name);",
          "3736:     Py_DECREF(result);",
          "3737:     return NULL;",
          "3738: }",
          "3739: static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {",
          "3740: #if CYTHON_USE_TYPE_SLOTS",
          "3741:   PyNumberMethods *m;",
          "3742: #endif",
          "3743:   const char *name = NULL;",
          "3744:   PyObject *res = NULL;",
          "3745: #if PY_MAJOR_VERSION < 3",
          "3746:   if (likely(PyInt_Check(x) || PyLong_Check(x)))",
          "3747: #else",
          "3748:   if (likely(PyLong_Check(x)))",
          "3749: #endif",
          "3750:     return __Pyx_NewRef(x);",
          "3751: #if CYTHON_USE_TYPE_SLOTS",
          "3752:   m = Py_TYPE(x)->tp_as_number;",
          "3753:   #if PY_MAJOR_VERSION < 3",
          "3754:   if (m && m->nb_int) {",
          "3755:     name = \"int\";",
          "3756:     res = m->nb_int(x);",
          "3757:   }",
          "3758:   else if (m && m->nb_long) {",
          "3759:     name = \"long\";",
          "3760:     res = m->nb_long(x);",
          "3761:   }",
          "3762:   #else",
          "3763:   if (likely(m && m->nb_int)) {",
          "3764:     name = \"int\";",
          "3765:     res = m->nb_int(x);",
          "3766:   }",
          "3767:   #endif",
          "3768: #else",
          "3769:   if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {",
          "3770:     res = PyNumber_Int(x);",
          "3771:   }",
          "3772: #endif",
          "3773:   if (likely(res)) {",
          "3774: #if PY_MAJOR_VERSION < 3",
          "3775:     if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {",
          "3776: #else",
          "3777:     if (unlikely(!PyLong_CheckExact(res))) {",
          "3778: #endif",
          "3779:         return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);",
          "3780:     }",
          "3781:   }",
          "3782:   else if (!PyErr_Occurred()) {",
          "3783:     PyErr_SetString(PyExc_TypeError,",
          "3784:                     \"an integer is required\");",
          "3785:   }",
          "3786:   return res;",
          "3787: }",
          "3788: static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {",
          "3789:   Py_ssize_t ival;",
          "3790:   PyObject *x;",
          "3791: #if PY_MAJOR_VERSION < 3",
          "3792:   if (likely(PyInt_CheckExact(b))) {",
          "3793:     if (sizeof(Py_ssize_t) >= sizeof(long))",
          "3794:         return PyInt_AS_LONG(b);",
          "3795:     else",
          "3796:         return PyInt_AsSsize_t(b);",
          "3797:   }",
          "3798: #endif",
          "3799:   if (likely(PyLong_CheckExact(b))) {",
          "3800:     #if CYTHON_USE_PYLONG_INTERNALS",
          "3801:     const digit* digits = ((PyLongObject*)b)->ob_digit;",
          "3802:     const Py_ssize_t size = Py_SIZE(b);",
          "3803:     if (likely(__Pyx_sst_abs(size) <= 1)) {",
          "3804:         ival = likely(size) ? digits[0] : 0;",
          "3805:         if (size == -1) ival = -ival;",
          "3806:         return ival;",
          "3807:     } else {",
          "3808:       switch (size) {",
          "3809:          case 2:",
          "3810:            if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {",
          "3811:              return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));",
          "3812:            }",
          "3813:            break;",
          "3814:          case -2:",
          "3815:            if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {",
          "3816:              return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));",
          "3817:            }",
          "3818:            break;",
          "3819:          case 3:",
          "3820:            if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {",
          "3821:              return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));",
          "3822:            }",
          "3823:            break;",
          "3824:          case -3:",
          "3825:            if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {",
          "3826:              return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));",
          "3827:            }",
          "3828:            break;",
          "3829:          case 4:",
          "3830:            if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {",
          "3831:              return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));",
          "3832:            }",
          "3833:            break;",
          "3834:          case -4:",
          "3835:            if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {",
          "3836:              return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));",
          "3837:            }",
          "3838:            break;",
          "3839:       }",
          "3840:     }",
          "3841:     #endif",
          "3842:     return PyLong_AsSsize_t(b);",
          "3843:   }",
          "3844:   x = PyNumber_Index(b);",
          "3845:   if (!x) return -1;",
          "3846:   ival = PyInt_AsSsize_t(x);",
          "3847:   Py_DECREF(x);",
          "3848:   return ival;",
          "3849: }",
          "3850: static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {",
          "3851:   return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);",
          "3852: }",
          "3853: static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {",
          "3854:     return PyInt_FromSize_t(ival);",
          "3855: }",
          "",
          "---------------"
        ],
        "clickhouse_driver/varint.pyx||clickhouse_driver/varint.pyx": [
          "File: clickhouse_driver/varint.pyx -> clickhouse_driver/varint.pyx",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: from cpython cimport Py_INCREF, PyBytes_FromStringAndSize",
          "4: def write_varint(Py_ssize_t number, buf):",
          "5:     \"\"\"",
          "6:     Writes integer of variable length using LEB128.",
          "7:     \"\"\"",
          "8:     cdef Py_ssize_t i = 0",
          "9:     cdef unsigned char towrite",
          "10:     # Py_ssize_t checks integer on function call and",
          "11:     # raises OverflowError if integer overflows Py_ssize_t.",
          "12:     # Long enough for handling Py_ssize_t.",
          "13:     cdef unsigned char num_buf[32]",
          "15:     while True:",
          "16:         towrite = number & 0x7f",
          "17:         number >>= 7",
          "18:         if number:",
          "19:             num_buf[i] = towrite | 0x80",
          "20:             i += 1",
          "21:         else:",
          "22:             num_buf[i] = towrite",
          "23:             i += 1",
          "24:             break",
          "26:     buf.write(PyBytes_FromStringAndSize(<char *>num_buf, i))",
          "29: def read_varint(f):",
          "30:     \"\"\"",
          "31:     Reads integer of variable length using LEB128.",
          "32:     \"\"\"",
          "33:     cdef Py_ssize_t shift = 0",
          "34:     cdef Py_ssize_t result = 0",
          "35:     cdef unsigned char i",
          "37:     while True:",
          "38:         i = f.read_one()",
          "39:         result |= (i & 0x7f) << shift",
          "40:         shift += 7",
          "41:         if i < 0x80:",
          "42:             break",
          "44:     return result",
          "",
          "---------------"
        ],
        "clickhouse_driver/writer.py||clickhouse_driver/writer.py": [
          "File: clickhouse_driver/writer.py -> clickhouse_driver/writer.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import struct",
          "3: from .util import compat",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3: from .varint import write_varint",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "38:     buf.write(text)",
          "55: def write_binary_int(number, buf, fmt):",
          "56:     \"\"\"",
          "57:     Writes int from buffer with provided format.",
          "",
          "[Removed Lines]",
          "41: def write_varint(number, buf):",
          "42:     \"\"\"",
          "43:     Writes integer of variable length using LEB128.",
          "44:     \"\"\"",
          "45:     while True:",
          "46:         towrite = number & 0x7f",
          "47:         number >>= 7",
          "48:         if number:",
          "49:             buf.write(_byte(towrite | 0x80))",
          "50:         else:",
          "51:             buf.write(_byte(towrite))",
          "52:             break",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "setup.py||setup.py": [
          "File: setup.py -> setup.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "43:     Extension(",
          "44:         'clickhouse_driver.columns.stringcolumn',",
          "45:         ['clickhouse_driver/columns/stringcolumn' + ext]",
          "46:     )",
          "47: ]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "46:     ),",
          "47:     Extension(",
          "48:         'clickhouse_driver.varint',",
          "49:         ['clickhouse_driver/varint' + ext]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "73209b1481d1bbd0a40cbbb317e29879f25db770",
      "candidate_info": {
        "commit_hash": "73209b1481d1bbd0a40cbbb317e29879f25db770",
        "repo": "mymarilyn/clickhouse-driver",
        "commit_url": "https://github.com/mymarilyn/clickhouse-driver/commit/73209b1481d1bbd0a40cbbb317e29879f25db770",
        "files": [
          "clickhouse_driver/bufferedreader.c",
          "clickhouse_driver/bufferedreader.pyx",
          "clickhouse_driver/bufferedwriter.c",
          "clickhouse_driver/bufferedwriter.pyx",
          "clickhouse_driver/columns/stringcolumn.c",
          "clickhouse_driver/columns/stringcolumn.pyx",
          "clickhouse_driver/varint.c",
          "clickhouse_driver/varint.pyx",
          "docs/types.rst",
          "tests/columns/test_fixedstring.py",
          "tests/columns/test_string.py"
        ],
        "message": "Fix segfault on passing string as bytes",
        "before_after_code_files": [
          "clickhouse_driver/bufferedreader.c||clickhouse_driver/bufferedreader.c",
          "clickhouse_driver/bufferedreader.pyx||clickhouse_driver/bufferedreader.pyx",
          "clickhouse_driver/bufferedwriter.c||clickhouse_driver/bufferedwriter.c",
          "clickhouse_driver/bufferedwriter.pyx||clickhouse_driver/bufferedwriter.pyx",
          "clickhouse_driver/columns/stringcolumn.c||clickhouse_driver/columns/stringcolumn.c",
          "clickhouse_driver/columns/stringcolumn.pyx||clickhouse_driver/columns/stringcolumn.pyx",
          "clickhouse_driver/varint.c||clickhouse_driver/varint.c",
          "clickhouse_driver/varint.pyx||clickhouse_driver/varint.pyx",
          "tests/columns/test_fixedstring.py||tests/columns/test_fixedstring.py",
          "tests/columns/test_string.py||tests/columns/test_string.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "clickhouse_driver/varint.c||clickhouse_driver/varint.c",
            "clickhouse_driver/varint.pyx||clickhouse_driver/varint.pyx"
          ],
          "candidate": [
            "clickhouse_driver/varint.c||clickhouse_driver/varint.c",
            "clickhouse_driver/varint.pyx||clickhouse_driver/varint.pyx"
          ]
        }
      },
      "candidate_diff": {
        "clickhouse_driver/bufferedreader.c||clickhouse_driver/bufferedreader.c": [
          "File: clickhouse_driver/bufferedreader.c -> clickhouse_driver/bufferedreader.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1850:     }",
          "1851:     __pyx_t_3 = PySequence_GetSlice(__pyx_v_self->buffer, __pyx_v_t, __pyx_v_self->position); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 32, __pyx_L1_error)",
          "1852:     __Pyx_GOTREF(__pyx_t_3);",
          "1855:     goto __pyx_L0;",
          "",
          "[Removed Lines]",
          "1853:     __pyx_r = __pyx_t_3;",
          "1854:     __pyx_t_3 = 0;",
          "",
          "[Added Lines]",
          "1853:     __pyx_t_4 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyBytes_Type)), __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 32, __pyx_L1_error)",
          "1854:     __Pyx_GOTREF(__pyx_t_4);",
          "1855:     __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;",
          "1856:     __pyx_r = __pyx_t_4;",
          "1857:     __pyx_t_4 = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1864:   }",
          "",
          "[Removed Lines]",
          "1873:   __pyx_t_3 = __pyx_v_self->buffer;",
          "1874:   __Pyx_INCREF(__pyx_t_3);",
          "1875:   __pyx_v_buffer_ptr = PyByteArray_AsString(__pyx_t_3);",
          "1876:   __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;",
          "",
          "[Added Lines]",
          "1876:   __pyx_t_4 = __pyx_v_self->buffer;",
          "1877:   __Pyx_INCREF(__pyx_t_4);",
          "1878:   __pyx_v_buffer_ptr = PyByteArray_AsString(__pyx_t_4);",
          "1879:   __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1885:   __pyx_t_3 = __Pyx_PyObject_CallNoArg(((PyObject *)(&PyBytes_Type))); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 36, __pyx_L1_error)",
          "1886:   __Pyx_GOTREF(__pyx_t_3);",
          "1887:   __pyx_v_rv = ((PyObject*)__pyx_t_3);",
          "1888:   __pyx_t_3 = 0;",
          "",
          "[Added Lines]",
          "1888:   __pyx_t_4 = __Pyx_PyObject_CallNoArg(((PyObject *)(&PyBytes_Type))); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 36, __pyx_L1_error)",
          "1889:   __Pyx_GOTREF(__pyx_t_4);",
          "1890:   __pyx_v_rv = ((PyObject*)__pyx_t_4);",
          "1891:   __pyx_t_4 = 0;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1920:       __pyx_t_5 = NULL;",
          "1923:         if (likely(__pyx_t_5)) {",
          "1925:           __Pyx_INCREF(__pyx_t_5);",
          "1926:           __Pyx_INCREF(function);",
          "1928:         }",
          "1929:       }",
          "1931:       __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;",
          "1935:       __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;",
          "",
          "[Removed Lines]",
          "1918:       __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_read_into_buffer); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 40, __pyx_L1_error)",
          "1919:       __Pyx_GOTREF(__pyx_t_4);",
          "1921:       if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {",
          "1922:         __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);",
          "1924:           PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);",
          "1927:           __Pyx_DECREF_SET(__pyx_t_4, function);",
          "1930:       __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_4);",
          "1932:       if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 40, __pyx_L1_error)",
          "1933:       __Pyx_GOTREF(__pyx_t_3);",
          "1934:       __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;",
          "",
          "[Added Lines]",
          "1921:       __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_read_into_buffer); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 40, __pyx_L1_error)",
          "1922:       __Pyx_GOTREF(__pyx_t_3);",
          "1924:       if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {",
          "1925:         __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);",
          "1927:           PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);",
          "1930:           __Pyx_DECREF_SET(__pyx_t_3, function);",
          "1933:       __pyx_t_4 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_3);",
          "1935:       if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 40, __pyx_L1_error)",
          "1936:       __Pyx_GOTREF(__pyx_t_4);",
          "1938:       __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1944:       __pyx_t_3 = __pyx_v_self->buffer;",
          "1945:       __Pyx_INCREF(__pyx_t_3);",
          "1946:       __pyx_v_buffer_ptr = PyByteArray_AsString(__pyx_t_3);",
          "1947:       __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;",
          "",
          "[Added Lines]",
          "1947:       __pyx_t_4 = __pyx_v_self->buffer;",
          "1948:       __Pyx_INCREF(__pyx_t_4);",
          "1949:       __pyx_v_buffer_ptr = PyByteArray_AsString(__pyx_t_4);",
          "1950:       __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1993:     __Pyx_GOTREF(__pyx_t_4);",
          "",
          "[Removed Lines]",
          "1990:     __pyx_t_3 = PyBytes_FromStringAndSize((&(__pyx_v_buffer_ptr[__pyx_v_self->position])), __pyx_v_read_bytes); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 45, __pyx_L1_error)",
          "1991:     __Pyx_GOTREF(__pyx_t_3);",
          "1992:     __pyx_t_4 = PyNumber_InPlaceAdd(__pyx_v_rv, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 45, __pyx_L1_error)",
          "1994:     __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;",
          "1995:     __Pyx_DECREF_SET(__pyx_v_rv, ((PyObject*)__pyx_t_4));",
          "1996:     __pyx_t_4 = 0;",
          "",
          "[Added Lines]",
          "1993:     __pyx_t_4 = PyBytes_FromStringAndSize((&(__pyx_v_buffer_ptr[__pyx_v_self->position])), __pyx_v_read_bytes); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 45, __pyx_L1_error)",
          "1995:     __pyx_t_3 = PyNumber_InPlaceAdd(__pyx_v_rv, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 45, __pyx_L1_error)",
          "1996:     __Pyx_GOTREF(__pyx_t_3);",
          "1997:     __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;",
          "1998:     __Pyx_DECREF_SET(__pyx_v_rv, ((PyObject*)__pyx_t_3));",
          "1999:     __pyx_t_3 = 0;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2024:   __Pyx_XDECREF(__pyx_r);",
          "2029:   goto __pyx_L0;",
          "",
          "[Removed Lines]",
          "2025:   __pyx_t_4 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyByteArray_Type)), __pyx_v_rv); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 51, __pyx_L1_error)",
          "2026:   __Pyx_GOTREF(__pyx_t_4);",
          "2027:   __pyx_r = __pyx_t_4;",
          "2028:   __pyx_t_4 = 0;",
          "",
          "[Added Lines]",
          "2028:   __Pyx_INCREF(__pyx_v_rv);",
          "2029:   __pyx_r = __pyx_v_rv;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "2341:   __pyx_v_c_string_size = 0;",
          "",
          "[Added Lines]",
          "2342:   __pyx_v_c_string_size = 0x400;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2415:   __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_builtin_object); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 85, __pyx_L1_error)",
          "2416:   __Pyx_GOTREF(__pyx_t_1);",
          "2417:   __pyx_v_rv = __pyx_t_1;",
          "2418:   __pyx_t_1 = 0;",
          "",
          "[Removed Lines]",
          "2427:   __pyx_v_c_string = ((char *)PyMem_Realloc(__pyx_v_c_string, __pyx_v_c_string_size));",
          "",
          "[Added Lines]",
          "2428:   __pyx_t_2 = (__pyx_v_c_encoding != 0);",
          "2429:   if (__pyx_t_2) {",
          "2438:     __pyx_v_c_string = ((char *)PyMem_Realloc(NULL, __pyx_v_c_string_size));",
          "2447:   }",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2467:       __pyx_t_2 = ((__pyx_v_self->position == __pyx_v_self->current_buffer_size) != 0);",
          "2468:       if (__pyx_t_2) {",
          "2478:         __Pyx_GOTREF(__pyx_t_3);",
          "2479:         __pyx_t_4 = NULL;",
          "2480:         if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {",
          "",
          "[Removed Lines]",
          "2477:         __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_read_into_buffer); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 94, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "2497:         __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_read_into_buffer); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 96, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2488:         }",
          "2489:         __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_3);",
          "2490:         __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;",
          "2492:         __Pyx_GOTREF(__pyx_t_1);",
          "2493:         __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;",
          "2494:         __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;",
          "",
          "[Removed Lines]",
          "2491:         if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 94, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "2511:         if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 96, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "2560:       __pyx_t_2 = ((__pyx_v_b < 0x80) != 0);",
          "2561:       if (__pyx_t_2) {",
          "",
          "[Removed Lines]",
          "2570:         goto __pyx_L7_break;",
          "",
          "[Added Lines]",
          "2590:         goto __pyx_L8_break;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "2588:       __pyx_v_shift = (__pyx_v_shift + 7);",
          "2589:     }",
          "",
          "[Removed Lines]",
          "2590:     __pyx_L7_break:;",
          "",
          "[Added Lines]",
          "2610:     __pyx_L8_break:;",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "2599:     __pyx_v_right = (__pyx_v_self->position + __pyx_v_size);",
          "2608:     __pyx_t_2 = (__pyx_v_c_encoding != 0);",
          "2609:     if (__pyx_t_2) {",
          "2618:       __pyx_t_2 = (((__pyx_v_size + 1) > __pyx_v_c_string_size) != 0);",
          "2619:       if (__pyx_t_2) {",
          "2637:         __pyx_t_2 = ((__pyx_v_c_string == NULL) != 0);",
          "2638:         if (unlikely(__pyx_t_2)) {",
          "2674:       }",
          "2683:       (__pyx_v_c_string[__pyx_v_size]) = 0;",
          "",
          "[Removed Lines]",
          "2628:         __pyx_v_c_string = ((char *)PyMem_Realloc(__pyx_v_c_string, (__pyx_v_size + 1)));",
          "2647:           PyErr_NoMemory(); __PYX_ERR(0, 114, __pyx_L1_error)",
          "2656:         }",
          "2665:         __pyx_v_c_string_size = (__pyx_v_size + 1);",
          "",
          "[Added Lines]",
          "2648:         __pyx_v_c_string_size = (__pyx_v_size + 1);",
          "2657:         __pyx_v_c_string = ((char *)PyMem_Realloc(__pyx_v_c_string, __pyx_v_c_string_size));",
          "2676:           PyErr_NoMemory(); __PYX_ERR(0, 117, __pyx_L1_error)",
          "2685:         }",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "2730:         (void)(memcpy((&(__pyx_v_c_string[__pyx_v_bytes_read])), (&(__pyx_v_buffer_ptr[__pyx_v_self->position])), (__pyx_v_self->current_buffer_size - __pyx_v_self->position)));",
          "2740:       }",
          "",
          "[Removed Lines]",
          "2739:         goto __pyx_L14;",
          "",
          "[Added Lines]",
          "2759:         goto __pyx_L15;",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "2759:         __Pyx_GOTREF(__pyx_t_1);",
          "2760:         __Pyx_DECREF_SET(__pyx_v_rv, __pyx_t_1);",
          "2761:         __pyx_t_1 = 0;",
          "2762:       }",
          "",
          "[Removed Lines]",
          "2758:         __pyx_t_1 = PyBytes_FromStringAndSize((&(__pyx_v_buffer_ptr[__pyx_v_self->position])), (__pyx_v_self->current_buffer_size - __pyx_v_self->position)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 127, __pyx_L1_error)",
          "2763:       __pyx_L14:;",
          "",
          "[Added Lines]",
          "2778:         __pyx_t_1 = PyBytes_FromStringAndSize((&(__pyx_v_buffer_ptr[__pyx_v_self->position])), (__pyx_v_self->current_buffer_size - __pyx_v_self->position)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 129, __pyx_L1_error)",
          "2783:       __pyx_L15:;",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "2792:         __pyx_v_self->position = (__pyx_v_size - __pyx_v_bytes_read);",
          "2802:         __Pyx_GOTREF(__pyx_t_3);",
          "2803:         __pyx_t_4 = NULL;",
          "2804:         if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {",
          "",
          "[Removed Lines]",
          "2801:         __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_read_into_buffer); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 137, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "2821:         __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_read_into_buffer); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 139, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "2812:         }",
          "2813:         __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_3);",
          "2814:         __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;",
          "2816:         __Pyx_GOTREF(__pyx_t_1);",
          "2817:         __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;",
          "2818:         __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;",
          "",
          "[Removed Lines]",
          "2815:         if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 137, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "2835:         if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 139, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "2873:           (void)(memcpy((&(__pyx_v_c_string[__pyx_v_bytes_read])), __pyx_v_buffer_ptr, __pyx_v_self->position));",
          "2883:         }",
          "",
          "[Removed Lines]",
          "2882:           goto __pyx_L17;",
          "",
          "[Added Lines]",
          "2902:           goto __pyx_L18;",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "2902:           __Pyx_GOTREF(__pyx_t_1);",
          "2912:           __Pyx_GOTREF(__pyx_t_3);",
          "2913:           __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;",
          "2914:           __Pyx_DECREF_SET(__pyx_v_rv, __pyx_t_3);",
          "2915:           __pyx_t_3 = 0;",
          "2916:         }",
          "",
          "[Removed Lines]",
          "2901:           __pyx_t_1 = PyBytes_FromStringAndSize(__pyx_v_buffer_ptr, __pyx_v_self->position); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 149, __pyx_L1_error)",
          "2911:           __pyx_t_3 = PyNumber_InPlaceAdd(__pyx_v_rv, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 149, __pyx_L1_error)",
          "2917:         __pyx_L17:;",
          "",
          "[Added Lines]",
          "2921:           __pyx_t_1 = PyBytes_FromStringAndSize(__pyx_v_buffer_ptr, __pyx_v_self->position); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 151, __pyx_L1_error)",
          "2931:           __pyx_t_3 = PyNumber_InPlaceAdd(__pyx_v_rv, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 151, __pyx_L1_error)",
          "2937:         __pyx_L18:;",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "2926:         __pyx_v_bytes_read = (__pyx_v_bytes_read + __pyx_v_self->position);",
          "2927:       }",
          "2937:     }",
          "",
          "[Removed Lines]",
          "2936:       goto __pyx_L13;",
          "",
          "[Added Lines]",
          "2956:       goto __pyx_L14;",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "2957:         (void)(memcpy(__pyx_v_c_string, (&(__pyx_v_buffer_ptr[__pyx_v_self->position])), __pyx_v_size));",
          "2967:       }",
          "",
          "[Removed Lines]",
          "2966:         goto __pyx_L18;",
          "",
          "[Added Lines]",
          "2986:         goto __pyx_L19;",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "2986:         __Pyx_GOTREF(__pyx_t_3);",
          "2987:         __Pyx_DECREF_SET(__pyx_v_rv, __pyx_t_3);",
          "2988:         __pyx_t_3 = 0;",
          "2989:       }",
          "",
          "[Removed Lines]",
          "2985:         __pyx_t_3 = PyBytes_FromStringAndSize((&(__pyx_v_buffer_ptr[__pyx_v_self->position])), __pyx_v_size); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 158, __pyx_L1_error)",
          "2990:       __pyx_L18:;",
          "",
          "[Added Lines]",
          "3005:         __pyx_t_3 = PyBytes_FromStringAndSize((&(__pyx_v_buffer_ptr[__pyx_v_self->position])), __pyx_v_size); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 160, __pyx_L1_error)",
          "3010:       __pyx_L19:;",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "2999:       __pyx_v_self->position = __pyx_v_right;",
          "3000:     }",
          "",
          "[Removed Lines]",
          "3001:     __pyx_L13:;",
          "",
          "[Added Lines]",
          "3021:     __pyx_L14:;",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "3026:         __Pyx_XGOTREF(__pyx_t_14);",
          "3037:           __Pyx_GOTREF(__pyx_t_3);",
          "3038:           __Pyx_DECREF_SET(__pyx_v_rv, __pyx_t_3);",
          "3039:           __pyx_t_3 = 0;",
          "",
          "[Removed Lines]",
          "3036:           __pyx_t_3 = __Pyx_decode_c_string(__pyx_v_c_string, 0, __pyx_v_size, __pyx_v_c_encoding, NULL, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 165, __pyx_L20_error)",
          "",
          "[Added Lines]",
          "3056:           __pyx_t_3 = __Pyx_decode_c_string(__pyx_v_c_string, 0, __pyx_v_size, __pyx_v_c_encoding, NULL, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 167, __pyx_L21_error)",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "3049:         __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;",
          "3050:         __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;",
          "3051:         __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;",
          "3054:         __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;",
          "3055:         __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;",
          "3056:         __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;",
          "",
          "[Removed Lines]",
          "3052:         goto __pyx_L27_try_end;",
          "3053:         __pyx_L20_error:;",
          "",
          "[Added Lines]",
          "3072:         goto __pyx_L28_try_end;",
          "3073:         __pyx_L21_error:;",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "3065:         __pyx_t_15 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_UnicodeDecodeError);",
          "3066:         if (__pyx_t_15) {",
          "3067:           __Pyx_AddTraceback(\"clickhouse_driver.bufferedreader.BufferedReader.read_strings\", __pyx_clineno, __pyx_lineno, __pyx_filename);",
          "3069:           __Pyx_GOTREF(__pyx_t_3);",
          "3070:           __Pyx_GOTREF(__pyx_t_1);",
          "3071:           __Pyx_GOTREF(__pyx_t_4);",
          "3081:           __Pyx_GOTREF(__pyx_t_16);",
          "3082:           __Pyx_DECREF_SET(__pyx_v_rv, __pyx_t_16);",
          "3083:           __pyx_t_16 = 0;",
          "3084:           __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;",
          "3085:           __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;",
          "3086:           __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;",
          "3088:         }",
          "",
          "[Removed Lines]",
          "3068:           if (__Pyx_GetException(&__pyx_t_3, &__pyx_t_1, &__pyx_t_4) < 0) __PYX_ERR(0, 166, __pyx_L22_except_error)",
          "3080:           __pyx_t_16 = PyBytes_FromStringAndSize(__pyx_v_c_string, __pyx_v_size); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 167, __pyx_L22_except_error)",
          "3087:           goto __pyx_L21_exception_handled;",
          "3089:         goto __pyx_L22_except_error;",
          "3090:         __pyx_L22_except_error:;",
          "",
          "[Added Lines]",
          "3088:           if (__Pyx_GetException(&__pyx_t_3, &__pyx_t_1, &__pyx_t_4) < 0) __PYX_ERR(0, 168, __pyx_L23_except_error)",
          "3100:           __pyx_t_16 = PyBytes_FromStringAndSize(__pyx_v_c_string, __pyx_v_size); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 169, __pyx_L23_except_error)",
          "3107:           goto __pyx_L22_exception_handled;",
          "3109:         goto __pyx_L23_except_error;",
          "3110:         __pyx_L23_except_error:;",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "3101:         __Pyx_XGIVEREF(__pyx_t_14);",
          "3102:         __Pyx_ExceptionReset(__pyx_t_12, __pyx_t_13, __pyx_t_14);",
          "3103:         goto __pyx_L1_error;",
          "3105:         __Pyx_XGIVEREF(__pyx_t_12);",
          "3106:         __Pyx_XGIVEREF(__pyx_t_13);",
          "3107:         __Pyx_XGIVEREF(__pyx_t_14);",
          "3108:         __Pyx_ExceptionReset(__pyx_t_12, __pyx_t_13, __pyx_t_14);",
          "3110:       }",
          "",
          "[Removed Lines]",
          "3104:         __pyx_L21_exception_handled:;",
          "3109:         __pyx_L27_try_end:;",
          "",
          "[Added Lines]",
          "3124:         __pyx_L22_exception_handled:;",
          "3129:         __pyx_L28_try_end:;",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "3787:         case  1:",
          "3788:         if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_bufsize)) != 0)) kw_args--;",
          "3789:         else {",
          "3791:         }",
          "3792:       }",
          "3793:       if (unlikely(kw_args > 0)) {",
          "3795:       }",
          "3796:     } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {",
          "3797:       goto __pyx_L5_argtuple_error;",
          "",
          "[Removed Lines]",
          "3790:           __Pyx_RaiseArgtupleInvalid(\"__init__\", 1, 2, 2, 1); __PYX_ERR(0, 181, __pyx_L3_error)",
          "3794:         if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, \"__init__\") < 0)) __PYX_ERR(0, 181, __pyx_L3_error)",
          "",
          "[Added Lines]",
          "3810:           __Pyx_RaiseArgtupleInvalid(\"__init__\", 1, 2, 2, 1); __PYX_ERR(0, 183, __pyx_L3_error)",
          "3814:         if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, \"__init__\") < 0)) __PYX_ERR(0, 183, __pyx_L3_error)",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "3804:   }",
          "3805:   goto __pyx_L4_argument_unpacking_done;",
          "3806:   __pyx_L5_argtuple_error:;",
          "3808:   __pyx_L3_error:;",
          "3809:   __Pyx_AddTraceback(\"clickhouse_driver.bufferedreader.BufferedSocketReader.__init__\", __pyx_clineno, __pyx_lineno, __pyx_filename);",
          "3810:   __Pyx_RefNannyFinishContext();",
          "",
          "[Removed Lines]",
          "3807:   __Pyx_RaiseArgtupleInvalid(\"__init__\", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 181, __pyx_L3_error)",
          "",
          "[Added Lines]",
          "3827:   __Pyx_RaiseArgtupleInvalid(\"__init__\", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 183, __pyx_L3_error)",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "3838:   __Pyx_DECREF(__pyx_v_self->sock);",
          "3839:   __pyx_v_self->sock = __pyx_v_sock;",
          "3849:   __Pyx_GOTREF(__pyx_t_2);",
          "3850:   __Pyx_INCREF(((PyObject *)__pyx_ptype_17clickhouse_driver_14bufferedreader_BufferedSocketReader));",
          "3851:   __Pyx_GIVEREF(((PyObject *)__pyx_ptype_17clickhouse_driver_14bufferedreader_BufferedSocketReader));",
          "",
          "[Removed Lines]",
          "3848:   __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 183, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "3868:   __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 185, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "3853:   __Pyx_INCREF(((PyObject *)__pyx_v_self));",
          "3854:   __Pyx_GIVEREF(((PyObject *)__pyx_v_self));",
          "3855:   PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_self));",
          "3857:   __Pyx_GOTREF(__pyx_t_3);",
          "3858:   __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;",
          "3860:   __Pyx_GOTREF(__pyx_t_2);",
          "3861:   __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;",
          "3862:   __pyx_t_3 = NULL;",
          "",
          "[Removed Lines]",
          "3856:   __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_super, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 183, __pyx_L1_error)",
          "3859:   __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_init); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 183, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "3876:   __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_super, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 185, __pyx_L1_error)",
          "3879:   __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_init); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 185, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "3871:   }",
          "3872:   __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_v_bufsize) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_bufsize);",
          "3873:   __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;",
          "3875:   __Pyx_GOTREF(__pyx_t_1);",
          "3876:   __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;",
          "3877:   __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;",
          "",
          "[Removed Lines]",
          "3874:   if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 183, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "3894:   if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 185, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "3929:   int __pyx_t_5;",
          "3930:   __Pyx_RefNannySetupContext(\"read_into_buffer\", 0);",
          "3940:   __Pyx_GOTREF(__pyx_t_2);",
          "3941:   __pyx_t_3 = NULL;",
          "3942:   if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {",
          "",
          "[Removed Lines]",
          "3939:   __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->sock, __pyx_n_s_recv_into); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 186, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "3959:   __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->sock, __pyx_n_s_recv_into); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 188, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "3950:   }",
          "3951:   __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_v_self->__pyx_base.buffer) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_self->__pyx_base.buffer);",
          "3952:   __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;",
          "3954:   __Pyx_GOTREF(__pyx_t_1);",
          "3955:   __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;",
          "3957:   __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;",
          "3958:   __pyx_v_self->__pyx_base.current_buffer_size = __pyx_t_4;",
          "",
          "[Removed Lines]",
          "3953:   if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 186, __pyx_L1_error)",
          "3956:   __pyx_t_4 = __Pyx_PyIndex_AsSsize_t(__pyx_t_1); if (unlikely((__pyx_t_4 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 186, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "3973:   if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 188, __pyx_L1_error)",
          "3976:   __pyx_t_4 = __Pyx_PyIndex_AsSsize_t(__pyx_t_1); if (unlikely((__pyx_t_4 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 188, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "3967:   __pyx_t_5 = ((__pyx_v_self->__pyx_base.current_buffer_size == 0) != 0);",
          "3968:   if (unlikely(__pyx_t_5)) {",
          "3978:     __Pyx_GOTREF(__pyx_t_1);",
          "3979:     __Pyx_Raise(__pyx_t_1, 0, 0, 0);",
          "3980:     __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;",
          "",
          "[Removed Lines]",
          "3977:     __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_EOFError, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 189, __pyx_L1_error)",
          "3981:     __PYX_ERR(0, 189, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "3997:     __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_EOFError, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 191, __pyx_L1_error)",
          "4001:     __PYX_ERR(0, 191, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "4362:         case  1:",
          "4363:         if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_bufsize)) != 0)) kw_args--;",
          "4364:         else {",
          "4366:         }",
          "4367:       }",
          "4368:       if (unlikely(kw_args > 0)) {",
          "4370:       }",
          "4371:     } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {",
          "4372:       goto __pyx_L5_argtuple_error;",
          "",
          "[Removed Lines]",
          "4365:           __Pyx_RaiseArgtupleInvalid(\"__init__\", 1, 2, 2, 1); __PYX_ERR(0, 195, __pyx_L3_error)",
          "4369:         if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, \"__init__\") < 0)) __PYX_ERR(0, 195, __pyx_L3_error)",
          "",
          "[Added Lines]",
          "4385:           __Pyx_RaiseArgtupleInvalid(\"__init__\", 1, 2, 2, 1); __PYX_ERR(0, 197, __pyx_L3_error)",
          "4389:         if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, \"__init__\") < 0)) __PYX_ERR(0, 197, __pyx_L3_error)",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "4379:   }",
          "4380:   goto __pyx_L4_argument_unpacking_done;",
          "4381:   __pyx_L5_argtuple_error:;",
          "4383:   __pyx_L3_error:;",
          "4384:   __Pyx_AddTraceback(\"clickhouse_driver.bufferedreader.CompressedBufferedReader.__init__\", __pyx_clineno, __pyx_lineno, __pyx_filename);",
          "4385:   __Pyx_RefNannyFinishContext();",
          "",
          "[Removed Lines]",
          "4382:   __Pyx_RaiseArgtupleInvalid(\"__init__\", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 195, __pyx_L3_error)",
          "",
          "[Added Lines]",
          "4402:   __Pyx_RaiseArgtupleInvalid(\"__init__\", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 197, __pyx_L3_error)",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "4413:   __Pyx_DECREF(__pyx_v_self->read_block);",
          "4414:   __pyx_v_self->read_block = __pyx_v_read_block;",
          "4424:   __Pyx_GOTREF(__pyx_t_2);",
          "4425:   __Pyx_INCREF(((PyObject *)__pyx_ptype_17clickhouse_driver_14bufferedreader_CompressedBufferedReader));",
          "4426:   __Pyx_GIVEREF(((PyObject *)__pyx_ptype_17clickhouse_driver_14bufferedreader_CompressedBufferedReader));",
          "",
          "[Removed Lines]",
          "4423:   __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 197, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "4443:   __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 199, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "4428:   __Pyx_INCREF(((PyObject *)__pyx_v_self));",
          "4429:   __Pyx_GIVEREF(((PyObject *)__pyx_v_self));",
          "4430:   PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_self));",
          "4432:   __Pyx_GOTREF(__pyx_t_3);",
          "4433:   __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;",
          "4435:   __Pyx_GOTREF(__pyx_t_2);",
          "4436:   __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;",
          "4437:   __pyx_t_3 = NULL;",
          "",
          "[Removed Lines]",
          "4431:   __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_super, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 197, __pyx_L1_error)",
          "4434:   __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_init); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 197, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "4451:   __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_super, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 199, __pyx_L1_error)",
          "4454:   __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_init); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 199, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "4446:   }",
          "4447:   __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_v_bufsize) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_bufsize);",
          "4448:   __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;",
          "4450:   __Pyx_GOTREF(__pyx_t_1);",
          "4451:   __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;",
          "4452:   __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;",
          "",
          "[Removed Lines]",
          "4449:   if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 197, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "4469:   if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 199, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "4524:   }",
          "4525:   __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);",
          "4526:   __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;",
          "4528:   __Pyx_GOTREF(__pyx_t_1);",
          "4529:   __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;",
          "4531:   __Pyx_GOTREF(__pyx_t_2);",
          "4532:   __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;",
          "4533:   __Pyx_GIVEREF(__pyx_t_2);",
          "",
          "[Removed Lines]",
          "4527:   if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 200, __pyx_L1_error)",
          "4530:   __pyx_t_2 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyByteArray_Type)), __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 200, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "4547:   if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 202, __pyx_L1_error)",
          "4550:   __pyx_t_2 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyByteArray_Type)), __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 202, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "4547:   __Pyx_INCREF(__pyx_t_2);",
          "4548:   if (unlikely(__pyx_t_2 == Py_None)) {",
          "4549:     PyErr_SetString(PyExc_TypeError, \"object of type 'NoneType' has no len()\");",
          "4551:   }",
          "4553:   __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;",
          "4554:   __pyx_v_self->__pyx_base.current_buffer_size = __pyx_t_4;",
          "",
          "[Removed Lines]",
          "4550:     __PYX_ERR(0, 201, __pyx_L1_error)",
          "4552:   __pyx_t_4 = PyByteArray_GET_SIZE(__pyx_t_2); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(0, 201, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "4570:     __PYX_ERR(0, 203, __pyx_L1_error)",
          "4572:   __pyx_t_4 = PyByteArray_GET_SIZE(__pyx_t_2); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(0, 203, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "4562:   __pyx_t_5 = ((__pyx_v_self->__pyx_base.current_buffer_size == 0) != 0);",
          "4563:   if (unlikely(__pyx_t_5)) {",
          "4571:     __Pyx_GOTREF(__pyx_t_2);",
          "4572:     __Pyx_Raise(__pyx_t_2, 0, 0, 0);",
          "4573:     __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;",
          "",
          "[Removed Lines]",
          "4570:     __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_EOFError, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 204, __pyx_L1_error)",
          "4574:     __PYX_ERR(0, 204, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "4590:     __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_EOFError, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 206, __pyx_L1_error)",
          "4594:     __PYX_ERR(0, 206, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "6654:   __pyx_builtin_super = __Pyx_GetBuiltinName(__pyx_n_s_super); if (!__pyx_builtin_super) __PYX_ERR(0, 20, __pyx_L1_error)",
          "6655:   __pyx_builtin_NotImplementedError = __Pyx_GetBuiltinName(__pyx_n_s_NotImplementedError); if (!__pyx_builtin_NotImplementedError) __PYX_ERR(0, 23, __pyx_L1_error)",
          "6656:   __pyx_builtin_object = __Pyx_GetBuiltinName(__pyx_n_s_object); if (!__pyx_builtin_object) __PYX_ERR(0, 85, __pyx_L1_error)",
          "6661:   return 0;",
          "6662:   __pyx_L1_error:;",
          "6663:   return -1;",
          "",
          "[Removed Lines]",
          "6657:   __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(0, 88, __pyx_L1_error)",
          "6658:   __pyx_builtin_MemoryError = __Pyx_GetBuiltinName(__pyx_n_s_MemoryError); if (!__pyx_builtin_MemoryError) __PYX_ERR(0, 114, __pyx_L1_error)",
          "6659:   __pyx_builtin_UnicodeDecodeError = __Pyx_GetBuiltinName(__pyx_n_s_UnicodeDecodeError); if (!__pyx_builtin_UnicodeDecodeError) __PYX_ERR(0, 166, __pyx_L1_error)",
          "6660:   __pyx_builtin_EOFError = __Pyx_GetBuiltinName(__pyx_n_s_EOFError); if (!__pyx_builtin_EOFError) __PYX_ERR(0, 189, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "6677:   __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(0, 90, __pyx_L1_error)",
          "6678:   __pyx_builtin_MemoryError = __Pyx_GetBuiltinName(__pyx_n_s_MemoryError); if (!__pyx_builtin_MemoryError) __PYX_ERR(0, 117, __pyx_L1_error)",
          "6679:   __pyx_builtin_UnicodeDecodeError = __Pyx_GetBuiltinName(__pyx_n_s_UnicodeDecodeError); if (!__pyx_builtin_UnicodeDecodeError) __PYX_ERR(0, 168, __pyx_L1_error)",
          "6680:   __pyx_builtin_EOFError = __Pyx_GetBuiltinName(__pyx_n_s_EOFError); if (!__pyx_builtin_EOFError) __PYX_ERR(0, 191, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "6667:   __Pyx_RefNannyDeclarations",
          "6668:   __Pyx_RefNannySetupContext(\"__Pyx_InitCachedConstants\", 0);",
          "6678:   __Pyx_GOTREF(__pyx_tuple_);",
          "6679:   __Pyx_GIVEREF(__pyx_tuple_);",
          "",
          "[Removed Lines]",
          "6677:   __pyx_tuple_ = PyTuple_Pack(1, __pyx_kp_u_Unexpected_EOF_while_reading_byt); if (unlikely(!__pyx_tuple_)) __PYX_ERR(0, 189, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "6697:   __pyx_tuple_ = PyTuple_Pack(1, __pyx_kp_u_Unexpected_EOF_while_reading_byt); if (unlikely(!__pyx_tuple_)) __PYX_ERR(0, 191, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "6759:   if (__Pyx_setup_reduce((PyObject*)&__pyx_type_17clickhouse_driver_14bufferedreader_BufferedReader) < 0) __PYX_ERR(0, 10, __pyx_L1_error)",
          "6760:   __pyx_ptype_17clickhouse_driver_14bufferedreader_BufferedReader = &__pyx_type_17clickhouse_driver_14bufferedreader_BufferedReader;",
          "6761:   __pyx_type_17clickhouse_driver_14bufferedreader_BufferedSocketReader.tp_base = __pyx_ptype_17clickhouse_driver_14bufferedreader_BufferedReader;",
          "6763:   #if PY_VERSION_HEX < 0x030800B1",
          "6764:   __pyx_type_17clickhouse_driver_14bufferedreader_BufferedSocketReader.tp_print = 0;",
          "6765:   #endif",
          "6766:   if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_17clickhouse_driver_14bufferedreader_BufferedSocketReader.tp_dictoffset && __pyx_type_17clickhouse_driver_14bufferedreader_BufferedSocketReader.tp_getattro == PyObject_GenericGetAttr)) {",
          "6767:     __pyx_type_17clickhouse_driver_14bufferedreader_BufferedSocketReader.tp_getattro = __Pyx_PyObject_GenericGetAttr;",
          "6768:   }",
          "6771:   __pyx_ptype_17clickhouse_driver_14bufferedreader_BufferedSocketReader = &__pyx_type_17clickhouse_driver_14bufferedreader_BufferedSocketReader;",
          "6772:   __pyx_type_17clickhouse_driver_14bufferedreader_CompressedBufferedReader.tp_base = __pyx_ptype_17clickhouse_driver_14bufferedreader_BufferedReader;",
          "6774:   #if PY_VERSION_HEX < 0x030800B1",
          "6775:   __pyx_type_17clickhouse_driver_14bufferedreader_CompressedBufferedReader.tp_print = 0;",
          "6776:   #endif",
          "6777:   if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_17clickhouse_driver_14bufferedreader_CompressedBufferedReader.tp_dictoffset && __pyx_type_17clickhouse_driver_14bufferedreader_CompressedBufferedReader.tp_getattro == PyObject_GenericGetAttr)) {",
          "6778:     __pyx_type_17clickhouse_driver_14bufferedreader_CompressedBufferedReader.tp_getattro = __Pyx_PyObject_GenericGetAttr;",
          "6779:   }",
          "6782:   __pyx_ptype_17clickhouse_driver_14bufferedreader_CompressedBufferedReader = &__pyx_type_17clickhouse_driver_14bufferedreader_CompressedBufferedReader;",
          "6783:   __Pyx_RefNannyFinishContext();",
          "6784:   return 0;",
          "",
          "[Removed Lines]",
          "6762:   if (PyType_Ready(&__pyx_type_17clickhouse_driver_14bufferedreader_BufferedSocketReader) < 0) __PYX_ERR(0, 178, __pyx_L1_error)",
          "6769:   if (PyObject_SetAttr(__pyx_m, __pyx_n_s_BufferedSocketReader, (PyObject *)&__pyx_type_17clickhouse_driver_14bufferedreader_BufferedSocketReader) < 0) __PYX_ERR(0, 178, __pyx_L1_error)",
          "6770:   if (__Pyx_setup_reduce((PyObject*)&__pyx_type_17clickhouse_driver_14bufferedreader_BufferedSocketReader) < 0) __PYX_ERR(0, 178, __pyx_L1_error)",
          "6773:   if (PyType_Ready(&__pyx_type_17clickhouse_driver_14bufferedreader_CompressedBufferedReader) < 0) __PYX_ERR(0, 192, __pyx_L1_error)",
          "6780:   if (PyObject_SetAttr(__pyx_m, __pyx_n_s_CompressedBufferedReader, (PyObject *)&__pyx_type_17clickhouse_driver_14bufferedreader_CompressedBufferedReader) < 0) __PYX_ERR(0, 192, __pyx_L1_error)",
          "6781:   if (__Pyx_setup_reduce((PyObject*)&__pyx_type_17clickhouse_driver_14bufferedreader_CompressedBufferedReader) < 0) __PYX_ERR(0, 192, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "6782:   if (PyType_Ready(&__pyx_type_17clickhouse_driver_14bufferedreader_BufferedSocketReader) < 0) __PYX_ERR(0, 180, __pyx_L1_error)",
          "6789:   if (PyObject_SetAttr(__pyx_m, __pyx_n_s_BufferedSocketReader, (PyObject *)&__pyx_type_17clickhouse_driver_14bufferedreader_BufferedSocketReader) < 0) __PYX_ERR(0, 180, __pyx_L1_error)",
          "6790:   if (__Pyx_setup_reduce((PyObject*)&__pyx_type_17clickhouse_driver_14bufferedreader_BufferedSocketReader) < 0) __PYX_ERR(0, 180, __pyx_L1_error)",
          "6793:   if (PyType_Ready(&__pyx_type_17clickhouse_driver_14bufferedreader_CompressedBufferedReader) < 0) __PYX_ERR(0, 194, __pyx_L1_error)",
          "6800:   if (PyObject_SetAttr(__pyx_m, __pyx_n_s_CompressedBufferedReader, (PyObject *)&__pyx_type_17clickhouse_driver_14bufferedreader_CompressedBufferedReader) < 0) __PYX_ERR(0, 194, __pyx_L1_error)",
          "6801:   if (__Pyx_setup_reduce((PyObject*)&__pyx_type_17clickhouse_driver_14bufferedreader_CompressedBufferedReader) < 0) __PYX_ERR(0, 194, __pyx_L1_error)",
          "",
          "---------------"
        ],
        "clickhouse_driver/bufferedreader.pyx||clickhouse_driver/bufferedreader.pyx": [
          "File: clickhouse_driver/bufferedreader.pyx -> clickhouse_driver/bufferedreader.pyx",
          "--- Hunk 1 ---",
          "[Context before]",
          "29:         if next_position < self.current_buffer_size:",
          "30:             t = self.position",
          "31:             self.position = next_position",
          "34:         cdef char* buffer_ptr = PyByteArray_AsString(self.buffer)",
          "35:         cdef Py_ssize_t read_bytes",
          "",
          "[Removed Lines]",
          "32:             return self.buffer[t:self.position]",
          "",
          "[Added Lines]",
          "32:             return bytes(self.buffer[t:self.position])",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "48:             self.position += read_bytes",
          "49:             unread -= read_bytes",
          "53:     def read_one(self):",
          "54:         if self.position == self.current_buffer_size:",
          "",
          "[Removed Lines]",
          "51:         return bytearray(rv)",
          "",
          "[Added Lines]",
          "51:         return rv",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "77:         # String for decode vars.",
          "78:         cdef char *c_string = NULL",
          "80:         cdef char *c_encoding = NULL",
          "81:         if encoding:",
          "82:             encoding = encoding.encode('utf-8')",
          "83:             c_encoding = encoding",
          "85:         cdef object rv = object()",
          "88:         for i in range(n_items):",
          "89:             shift = size = 0",
          "",
          "[Removed Lines]",
          "79:         cdef Py_ssize_t c_string_size = 0, large_str_bytes",
          "86:         c_string = <char *> PyMem_Realloc(c_string, c_string_size)",
          "",
          "[Added Lines]",
          "79:         cdef Py_ssize_t c_string_size = 1024",
          "86:         # String for decode vars.",
          "87:         if c_encoding:",
          "88:             c_string = <char *> PyMem_Realloc(NULL, c_string_size)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "110:             if c_encoding:",
          "111:                 if size + 1 > c_string_size:",
          "113:                     if c_string is NULL:",
          "114:                         raise MemoryError()",
          "116:                 c_string[size] = 0",
          "117:                 bytes_read = 0",
          "",
          "[Removed Lines]",
          "112:                     c_string = <char *> PyMem_Realloc(c_string, size + 1)",
          "115:                     c_string_size = size + 1",
          "",
          "[Added Lines]",
          "114:                     c_string_size = size + 1",
          "115:                     c_string = <char *> PyMem_Realloc(c_string, c_string_size)",
          "",
          "---------------"
        ],
        "clickhouse_driver/bufferedwriter.c||clickhouse_driver/bufferedwriter.c": [
          "File: clickhouse_driver/bufferedwriter.c -> clickhouse_driver/bufferedwriter.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1387: static PyObject *__pyx_builtin_MemoryError;",
          "1388: static PyObject *__pyx_builtin_super;",
          "1389: static PyObject *__pyx_builtin_NotImplementedError;",
          "1390: static const char __pyx_k_new[] = \"__new__\";",
          "1391: static const char __pyx_k_dict[] = \"__dict__\";",
          "1392: static const char __pyx_k_init[] = \"__init__\";",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1388: static PyObject *__pyx_builtin_ValueError;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1411: static const char __pyx_k_setstate[] = \"__setstate__\";",
          "1412: static const char __pyx_k_pyx_state[] = \"__pyx_state\";",
          "1413: static const char __pyx_k_reduce_ex[] = \"__reduce_ex__\";",
          "1414: static const char __pyx_k_compressor[] = \"compressor\";",
          "1415: static const char __pyx_k_pyx_result[] = \"__pyx_result\";",
          "1416: static const char __pyx_k_pyx_vtable[] = \"__pyx_vtable__\";",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1413: static const char __pyx_k_ValueError[] = \"ValueError\";",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1427: static const char __pyx_k_cline_in_traceback[] = \"cline_in_traceback\";",
          "1428: static const char __pyx_k_NotImplementedError[] = \"NotImplementedError\";",
          "1429: static const char __pyx_k_BufferedSocketWriter[] = \"BufferedSocketWriter\";",
          "1430: static const char __pyx_k_CompressedBufferedWriter[] = \"CompressedBufferedWriter\";",
          "1431: static const char __pyx_k_pyx_unpickle_BufferedWriter[] = \"__pyx_unpickle_BufferedWriter\";",
          "1432: static const char __pyx_k_pyx_unpickle_BufferedSocketWri[] = \"__pyx_unpickle_BufferedSocketWriter\";",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1430: static const char __pyx_k_bytes_object_expected[] = \"bytes object expected\";",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1444: static PyObject *__pyx_n_s_MemoryError;",
          "1445: static PyObject *__pyx_n_s_NotImplementedError;",
          "1446: static PyObject *__pyx_n_s_PickleError;",
          "1447: static PyObject *__pyx_n_s_bufsize;",
          "1448: static PyObject *__pyx_n_s_clickhouse_driver_bufferedwriter;",
          "1449: static PyObject *__pyx_n_s_cline_in_traceback;",
          "1450: static PyObject *__pyx_n_s_compressor;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1448: static PyObject *__pyx_n_s_ValueError;",
          "1450: static PyObject *__pyx_kp_u_bytes_object_expected;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1510: static PyObject *__pyx_int_39656716;",
          "1511: static PyObject *__pyx_int_62583983;",
          "1512: static PyObject *__pyx_tuple_;",
          "",
          "[Removed Lines]",
          "1513: static PyObject *__pyx_tuple__3;",
          "1514: static PyObject *__pyx_tuple__5;",
          "1515: static PyObject *__pyx_codeobj__2;",
          "1516: static PyObject *__pyx_codeobj__4;",
          "1517: static PyObject *__pyx_codeobj__6;",
          "",
          "[Added Lines]",
          "1516: static PyObject *__pyx_tuple__2;",
          "1517: static PyObject *__pyx_tuple__4;",
          "1518: static PyObject *__pyx_tuple__6;",
          "1519: static PyObject *__pyx_codeobj__3;",
          "1520: static PyObject *__pyx_codeobj__5;",
          "1521: static PyObject *__pyx_codeobj__7;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1551:         else goto __pyx_L5_argtuple_error;",
          "1552:       }",
          "1553:       if (unlikely(kw_args > 0)) {",
          "1555:       }",
          "1556:     } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {",
          "1557:       goto __pyx_L5_argtuple_error;",
          "1558:     } else {",
          "1559:       values[0] = PyTuple_GET_ITEM(__pyx_args, 0);",
          "1560:     }",
          "1562:   }",
          "1563:   goto __pyx_L4_argument_unpacking_done;",
          "1564:   __pyx_L5_argtuple_error:;",
          "1566:   __pyx_L3_error:;",
          "1567:   __Pyx_AddTraceback(\"clickhouse_driver.bufferedwriter.BufferedWriter.__init__\", __pyx_clineno, __pyx_lineno, __pyx_filename);",
          "1568:   __Pyx_RefNannyFinishContext();",
          "",
          "[Removed Lines]",
          "1554:         if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, \"__init__\") < 0)) __PYX_ERR(0, 13, __pyx_L3_error)",
          "1561:     __pyx_v_bufsize = __Pyx_PyIndex_AsSsize_t(values[0]); if (unlikely((__pyx_v_bufsize == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 13, __pyx_L3_error)",
          "1565:   __Pyx_RaiseArgtupleInvalid(\"__init__\", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 13, __pyx_L3_error)",
          "",
          "[Added Lines]",
          "1558:         if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, \"__init__\") < 0)) __PYX_ERR(0, 12, __pyx_L3_error)",
          "1565:     __pyx_v_bufsize = __Pyx_PyIndex_AsSsize_t(values[0]); if (unlikely((__pyx_v_bufsize == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 12, __pyx_L3_error)",
          "1569:   __Pyx_RaiseArgtupleInvalid(\"__init__\", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 12, __pyx_L3_error)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1603:   __pyx_t_1 = ((!(__pyx_v_self->buffer != 0)) != 0);",
          "1604:   if (unlikely(__pyx_t_1)) {",
          "",
          "[Removed Lines]",
          "1613:     PyErr_NoMemory(); __PYX_ERR(0, 16, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "1617:     PyErr_NoMemory(); __PYX_ERR(0, 15, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1640:   __pyx_v_self->buffer_size = __pyx_v_bufsize;",
          "1650:   __Pyx_GOTREF(__pyx_t_3);",
          "1651:   __Pyx_INCREF(((PyObject *)__pyx_ptype_17clickhouse_driver_14bufferedwriter_BufferedWriter));",
          "1652:   __Pyx_GIVEREF(((PyObject *)__pyx_ptype_17clickhouse_driver_14bufferedwriter_BufferedWriter));",
          "",
          "[Removed Lines]",
          "1649:   __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 21, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "1653:   __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 20, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1654:   __Pyx_INCREF(((PyObject *)__pyx_v_self));",
          "1655:   __Pyx_GIVEREF(((PyObject *)__pyx_v_self));",
          "1656:   PyTuple_SET_ITEM(__pyx_t_3, 1, ((PyObject *)__pyx_v_self));",
          "1658:   __Pyx_GOTREF(__pyx_t_4);",
          "1659:   __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;",
          "1661:   __Pyx_GOTREF(__pyx_t_3);",
          "1662:   __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;",
          "1663:   __pyx_t_4 = NULL;",
          "",
          "[Removed Lines]",
          "1657:   __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_super, __pyx_t_3, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 21, __pyx_L1_error)",
          "1660:   __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_init); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 21, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "1661:   __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_super, __pyx_t_3, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 20, __pyx_L1_error)",
          "1664:   __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_init); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 20, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1672:   }",
          "1673:   __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_3);",
          "1674:   __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;",
          "1676:   __Pyx_GOTREF(__pyx_t_2);",
          "1677:   __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;",
          "1678:   __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;",
          "",
          "[Removed Lines]",
          "1675:   if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 21, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "1679:   if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 20, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1769:     if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {",
          "1770:       PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));",
          "1771:       #endif",
          "1773:       __Pyx_GOTREF(__pyx_t_1);",
          "1774:       if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_17clickhouse_driver_14bufferedwriter_14BufferedWriter_5write_into_stream)) {",
          "1775:         __Pyx_XDECREF(__pyx_r);",
          "",
          "[Removed Lines]",
          "1772:       __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_write_into_stream); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 26, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "1776:       __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_write_into_stream); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 25, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1786:         }",
          "1787:         __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_3);",
          "1788:         __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;",
          "1790:         __Pyx_GOTREF(__pyx_t_2);",
          "1791:         __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;",
          "1792:         __pyx_r = __pyx_t_2;",
          "",
          "[Removed Lines]",
          "1789:         if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 26, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "1793:         if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 25, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1817:   __Pyx_Raise(__pyx_builtin_NotImplementedError, 0, 0, 0);",
          "",
          "[Removed Lines]",
          "1818:   __PYX_ERR(0, 27, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "1822:   __PYX_ERR(0, 26, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1858:   PyObject *__pyx_t_1 = NULL;",
          "1859:   __Pyx_RefNannySetupContext(\"write_into_stream\", 0);",
          "1860:   __Pyx_XDECREF(__pyx_r);",
          "1862:   __Pyx_GOTREF(__pyx_t_1);",
          "1863:   __pyx_r = __pyx_t_1;",
          "1864:   __pyx_t_1 = 0;",
          "",
          "[Removed Lines]",
          "1861:   __pyx_t_1 = __pyx_f_17clickhouse_driver_14bufferedwriter_14BufferedWriter_write_into_stream(__pyx_v_self, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 26, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "1865:   __pyx_t_1 = __pyx_f_17clickhouse_driver_14bufferedwriter_14BufferedWriter_write_into_stream(__pyx_v_self, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 25, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1896:   PyObject *__pyx_t_3 = NULL;",
          "1897:   PyObject *__pyx_t_4 = NULL;",
          "1898:   Py_ssize_t __pyx_t_5;",
          "1901:   Py_ssize_t __pyx_t_8;",
          "1902:   Py_ssize_t __pyx_t_9;",
          "1903:   __Pyx_RefNannySetupContext(\"write\", 0);",
          "",
          "[Removed Lines]",
          "1899:   int __pyx_t_6;",
          "1900:   char *__pyx_t_7;",
          "",
          "[Added Lines]",
          "1903:   char *__pyx_t_6;",
          "1904:   int __pyx_t_7;",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1910:     if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {",
          "1911:       PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));",
          "1912:       #endif",
          "1914:       __Pyx_GOTREF(__pyx_t_1);",
          "1915:       if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_17clickhouse_driver_14bufferedwriter_14BufferedWriter_7write)) {",
          "1916:         __Pyx_XDECREF(__pyx_r);",
          "",
          "[Removed Lines]",
          "1913:       __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_write); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 29, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "1917:       __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_write); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 28, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1927:         }",
          "1928:         __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_4, __pyx_v_data) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_data);",
          "1929:         __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;",
          "1931:         __Pyx_GOTREF(__pyx_t_2);",
          "1932:         __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;",
          "1933:         __pyx_r = __pyx_t_2;",
          "",
          "[Removed Lines]",
          "1930:         if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 29, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "1934:         if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 28, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1958:   __pyx_v_written = 0;",
          "1968:   __pyx_v_data_len = __pyx_t_5;",
          "2019:   while (1) {",
          "",
          "[Removed Lines]",
          "1967:   __pyx_t_5 = PyObject_Length(__pyx_v_data); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1))) __PYX_ERR(0, 32, __pyx_L1_error)",
          "1977:   __pyx_t_6 = (PyBytes_Check(__pyx_v_data) != 0);",
          "1978:   if (__pyx_t_6) {",
          "1987:     __pyx_t_7 = PyBytes_AsString(__pyx_v_data); if (unlikely(__pyx_t_7 == ((char *)NULL))) __PYX_ERR(0, 36, __pyx_L1_error)",
          "1988:     __pyx_v_c_data = __pyx_t_7;",
          "1997:     goto __pyx_L3;",
          "1998:   }",
          "2008:     __pyx_v_c_data = PyByteArray_AsString(__pyx_v_data);",
          "2009:   }",
          "2010:   __pyx_L3:;",
          "2020:     __pyx_t_6 = ((__pyx_v_written < __pyx_v_data_len) != 0);",
          "2021:     if (!__pyx_t_6) break;",
          "",
          "[Added Lines]",
          "1971:   __pyx_t_5 = PyObject_Length(__pyx_v_data); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1))) __PYX_ERR(0, 31, __pyx_L1_error)",
          "1981:   __pyx_t_6 = PyBytes_AsString(__pyx_v_data); if (unlikely(__pyx_t_6 == ((char *)NULL))) __PYX_ERR(0, 34, __pyx_L1_error)",
          "1982:   __pyx_v_c_data = __pyx_t_6;",
          "1992:     __pyx_t_7 = ((__pyx_v_written < __pyx_v_data_len) != 0);",
          "1993:     if (!__pyx_t_7) break;",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "2046:     (void)(memcpy((&(__pyx_v_self->buffer[__pyx_v_self->position])), (&(__pyx_v_c_data[__pyx_v_written])), __pyx_v_size));",
          "2066:       __Pyx_GOTREF(__pyx_t_1);",
          "2067:       __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;",
          "",
          "[Removed Lines]",
          "2055:     __pyx_t_6 = ((__pyx_v_self->position == __pyx_v_self->buffer_size) != 0);",
          "2056:     if (__pyx_t_6) {",
          "2065:       __pyx_t_1 = ((struct __pyx_vtabstruct_17clickhouse_driver_14bufferedwriter_BufferedWriter *)__pyx_v_self->__pyx_vtab)->write_into_stream(__pyx_v_self, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 45, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "2027:     __pyx_t_7 = ((__pyx_v_self->position == __pyx_v_self->buffer_size) != 0);",
          "2028:     if (__pyx_t_7) {",
          "2037:       __pyx_t_1 = ((struct __pyx_vtabstruct_17clickhouse_driver_14bufferedwriter_BufferedWriter *)__pyx_v_self->__pyx_vtab)->write_into_stream(__pyx_v_self, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 41, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "2137:   PyObject *__pyx_t_1 = NULL;",
          "2138:   __Pyx_RefNannySetupContext(\"write\", 0);",
          "2139:   __Pyx_XDECREF(__pyx_r);",
          "2141:   __Pyx_GOTREF(__pyx_t_1);",
          "2142:   __pyx_r = __pyx_t_1;",
          "2143:   __pyx_t_1 = 0;",
          "",
          "[Removed Lines]",
          "2140:   __pyx_t_1 = __pyx_f_17clickhouse_driver_14bufferedwriter_14BufferedWriter_write(__pyx_v_self, __pyx_v_data, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 29, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "2112:   __pyx_t_1 = __pyx_f_17clickhouse_driver_14bufferedwriter_14BufferedWriter_write(__pyx_v_self, __pyx_v_data, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 28, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "2181:   PyObject *__pyx_t_1 = NULL;",
          "2182:   __Pyx_RefNannySetupContext(\"flush\", 0);",
          "2192:   __Pyx_GOTREF(__pyx_t_1);",
          "2193:   __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;",
          "",
          "[Removed Lines]",
          "2191:   __pyx_t_1 = ((struct __pyx_vtabstruct_17clickhouse_driver_14bufferedwriter_BufferedWriter *)__pyx_v_self->__pyx_vtab)->write_into_stream(__pyx_v_self, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 51, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "2163:   __pyx_t_1 = ((struct __pyx_vtabstruct_17clickhouse_driver_14bufferedwriter_BufferedWriter *)__pyx_v_self->__pyx_vtab)->write_into_stream(__pyx_v_self, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 47, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "2257:         }",
          "2258:       }",
          "2259:       if (unlikely(kw_args > 0)) {",
          "2261:       }",
          "2262:     } else {",
          "2263:       switch (PyTuple_GET_SIZE(__pyx_args)) {",
          "",
          "[Removed Lines]",
          "2260:         if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, \"write_strings\") < 0)) __PYX_ERR(0, 53, __pyx_L3_error)",
          "",
          "[Added Lines]",
          "2232:         if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, \"write_strings\") < 0)) __PYX_ERR(0, 49, __pyx_L3_error)",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "2273:   }",
          "2274:   goto __pyx_L4_argument_unpacking_done;",
          "2275:   __pyx_L5_argtuple_error:;",
          "2277:   __pyx_L3_error:;",
          "2278:   __Pyx_AddTraceback(\"clickhouse_driver.bufferedwriter.BufferedWriter.write_strings\", __pyx_clineno, __pyx_lineno, __pyx_filename);",
          "2279:   __Pyx_RefNannyFinishContext();",
          "",
          "[Removed Lines]",
          "2276:   __Pyx_RaiseArgtupleInvalid(\"write_strings\", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 53, __pyx_L3_error)",
          "",
          "[Added Lines]",
          "2248:   __Pyx_RaiseArgtupleInvalid(\"write_strings\", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 49, __pyx_L3_error)",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "2314:   __pyx_t_1 = (__pyx_v_encoding != Py_None);",
          "2315:   __pyx_v_do_encode = __pyx_t_1;",
          "2324:   if (likely(PyList_CheckExact(__pyx_v_items)) || PyTuple_CheckExact(__pyx_v_items)) {",
          "2325:     __pyx_t_2 = __pyx_v_items; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;",
          "2326:     __pyx_t_4 = NULL;",
          "2327:   } else {",
          "2329:     __Pyx_GOTREF(__pyx_t_2);",
          "2331:   }",
          "2332:   for (;;) {",
          "2333:     if (likely(!__pyx_t_4)) {",
          "2334:       if (likely(PyList_CheckExact(__pyx_t_2))) {",
          "2335:         if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;",
          "2336:         #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS",
          "2338:         #else",
          "2340:         __Pyx_GOTREF(__pyx_t_5);",
          "2341:         #endif",
          "2342:       } else {",
          "2343:         if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;",
          "2344:         #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS",
          "2346:         #else",
          "2348:         __Pyx_GOTREF(__pyx_t_5);",
          "2349:         #endif",
          "2350:       }",
          "",
          "[Removed Lines]",
          "2328:     __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_v_items); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 56, __pyx_L1_error)",
          "2330:     __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 56, __pyx_L1_error)",
          "2337:         __pyx_t_5 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 56, __pyx_L1_error)",
          "2339:         __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 56, __pyx_L1_error)",
          "2345:         __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 56, __pyx_L1_error)",
          "2347:         __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 56, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "2300:     __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_v_items); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 52, __pyx_L1_error)",
          "2302:     __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 52, __pyx_L1_error)",
          "2309:         __pyx_t_5 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 52, __pyx_L1_error)",
          "2311:         __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 52, __pyx_L1_error)",
          "2317:         __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 52, __pyx_L1_error)",
          "2319:         __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 52, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "2354:         PyObject* exc_type = PyErr_Occurred();",
          "2355:         if (exc_type) {",
          "2356:           if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();",
          "2358:         }",
          "2359:         break;",
          "2360:       }",
          "",
          "[Removed Lines]",
          "2357:           else __PYX_ERR(0, 56, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "2329:           else __PYX_ERR(0, 52, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "2363:     __Pyx_XDECREF_SET(__pyx_v_value, __pyx_t_5);",
          "2364:     __pyx_t_5 = 0;",
          "2374:     if (__pyx_t_1) {",
          "2394:         __Pyx_GOTREF(__pyx_t_6);",
          "2395:         __pyx_t_7 = NULL;",
          "2396:         if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {",
          "",
          "[Removed Lines]",
          "2373:     __pyx_t_1 = (__pyx_v_do_encode != 0);",
          "2383:       __pyx_t_1 = ((!(PyBytes_Check(__pyx_v_value) != 0)) != 0);",
          "2384:       if (__pyx_t_1) {",
          "2393:         __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_value, __pyx_n_s_encode); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 59, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "2345:     __pyx_t_1 = ((!(PyBytes_Check(__pyx_v_value) != 0)) != 0);",
          "2355:       __pyx_t_1 = (__pyx_v_do_encode != 0);",
          "2356:       if (likely(__pyx_t_1)) {",
          "2365:         __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_value, __pyx_n_s_encode); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 55, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "2404:         }",
          "2405:         __pyx_t_5 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_7, __pyx_v_encoding) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_v_encoding);",
          "2406:         __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;",
          "2408:         __Pyx_GOTREF(__pyx_t_5);",
          "2409:         __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;",
          "2410:         __Pyx_DECREF_SET(__pyx_v_value, __pyx_t_5);",
          "2411:         __pyx_t_5 = 0;",
          "2420:       }",
          "2429:     }",
          "2439:     __Pyx_GOTREF(__pyx_t_6);",
          "2442:     __Pyx_GOTREF(__pyx_t_7);",
          "2443:     __pyx_t_9 = NULL;",
          "2444:     __pyx_t_10 = 0;",
          "",
          "[Removed Lines]",
          "2407:         if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 59, __pyx_L1_error)",
          "2438:     __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_write_varint); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 61, __pyx_L1_error)",
          "2440:     __pyx_t_8 = PyObject_Length(__pyx_v_value); if (unlikely(__pyx_t_8 == ((Py_ssize_t)-1))) __PYX_ERR(0, 61, __pyx_L1_error)",
          "2441:     __pyx_t_7 = PyInt_FromSsize_t(__pyx_t_8); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 61, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "2379:         if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 55, __pyx_L1_error)",
          "2392:         goto __pyx_L6;",
          "2403:         __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 57, __pyx_L1_error)",
          "2404:         __Pyx_GOTREF(__pyx_t_5);",
          "2405:         __Pyx_Raise(__pyx_t_5, 0, 0, 0);",
          "2406:         __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;",
          "2407:         __PYX_ERR(0, 57, __pyx_L1_error)",
          "2408:       }",
          "2409:       __pyx_L6:;",
          "2427:     __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_write_varint); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 59, __pyx_L1_error)",
          "2429:     __pyx_t_8 = PyObject_Length(__pyx_v_value); if (unlikely(__pyx_t_8 == ((Py_ssize_t)-1))) __PYX_ERR(0, 59, __pyx_L1_error)",
          "2430:     __pyx_t_7 = PyInt_FromSsize_t(__pyx_t_8); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 59, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "2455:     #if CYTHON_FAST_PYCALL",
          "2456:     if (PyFunction_Check(__pyx_t_6)) {",
          "2457:       PyObject *__pyx_temp[3] = {__pyx_t_9, __pyx_t_7, ((PyObject *)__pyx_v_self)};",
          "2459:       __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;",
          "2460:       __Pyx_GOTREF(__pyx_t_5);",
          "2461:       __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;",
          "",
          "[Removed Lines]",
          "2458:       __pyx_t_5 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_10, 2+__pyx_t_10); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 61, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "2447:       __pyx_t_5 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_10, 2+__pyx_t_10); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 59, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "2464:     #if CYTHON_FAST_PYCCALL",
          "2465:     if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {",
          "2466:       PyObject *__pyx_temp[3] = {__pyx_t_9, __pyx_t_7, ((PyObject *)__pyx_v_self)};",
          "2468:       __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;",
          "2469:       __Pyx_GOTREF(__pyx_t_5);",
          "2470:       __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;",
          "2471:     } else",
          "2472:     #endif",
          "2473:     {",
          "2475:       __Pyx_GOTREF(__pyx_t_11);",
          "2476:       if (__pyx_t_9) {",
          "2477:         __Pyx_GIVEREF(__pyx_t_9); PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_9); __pyx_t_9 = NULL;",
          "",
          "[Removed Lines]",
          "2467:       __pyx_t_5 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_10, 2+__pyx_t_10); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 61, __pyx_L1_error)",
          "2474:       __pyx_t_11 = PyTuple_New(2+__pyx_t_10); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 61, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "2456:       __pyx_t_5 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_10, 2+__pyx_t_10); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 59, __pyx_L1_error)",
          "2463:       __pyx_t_11 = PyTuple_New(2+__pyx_t_10); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 59, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "2482:       __Pyx_GIVEREF(((PyObject *)__pyx_v_self));",
          "2483:       PyTuple_SET_ITEM(__pyx_t_11, 1+__pyx_t_10, ((PyObject *)__pyx_v_self));",
          "2484:       __pyx_t_7 = 0;",
          "2486:       __Pyx_GOTREF(__pyx_t_5);",
          "2487:       __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;",
          "2488:     }",
          "2489:     __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;",
          "2490:     __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;",
          "2500:     __Pyx_GOTREF(__pyx_t_5);",
          "2501:     __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;",
          "2510:   }",
          "2511:   __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;",
          "",
          "[Removed Lines]",
          "2485:       __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_11, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 61, __pyx_L1_error)",
          "2499:     __pyx_t_5 = ((struct __pyx_vtabstruct_17clickhouse_driver_14bufferedwriter_BufferedWriter *)__pyx_v_self->__pyx_vtab)->write(__pyx_v_self, __pyx_v_value, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 62, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "2474:       __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_11, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 59, __pyx_L1_error)",
          "2488:     __pyx_t_5 = ((struct __pyx_vtabstruct_17clickhouse_driver_14bufferedwriter_BufferedWriter *)__pyx_v_self->__pyx_vtab)->write(__pyx_v_self, __pyx_v_value, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 60, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "2876:         case  1:",
          "2877:         if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_bufsize)) != 0)) kw_args--;",
          "2878:         else {",
          "2880:         }",
          "2881:       }",
          "2882:       if (unlikely(kw_args > 0)) {",
          "2884:       }",
          "2885:     } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {",
          "2886:       goto __pyx_L5_argtuple_error;",
          "",
          "[Removed Lines]",
          "2879:           __Pyx_RaiseArgtupleInvalid(\"__init__\", 1, 2, 2, 1); __PYX_ERR(0, 68, __pyx_L3_error)",
          "2883:         if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, \"__init__\") < 0)) __PYX_ERR(0, 68, __pyx_L3_error)",
          "",
          "[Added Lines]",
          "2868:           __Pyx_RaiseArgtupleInvalid(\"__init__\", 1, 2, 2, 1); __PYX_ERR(0, 66, __pyx_L3_error)",
          "2872:         if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, \"__init__\") < 0)) __PYX_ERR(0, 66, __pyx_L3_error)",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "2893:   }",
          "2894:   goto __pyx_L4_argument_unpacking_done;",
          "2895:   __pyx_L5_argtuple_error:;",
          "2897:   __pyx_L3_error:;",
          "2898:   __Pyx_AddTraceback(\"clickhouse_driver.bufferedwriter.BufferedSocketWriter.__init__\", __pyx_clineno, __pyx_lineno, __pyx_filename);",
          "2899:   __Pyx_RefNannyFinishContext();",
          "",
          "[Removed Lines]",
          "2896:   __Pyx_RaiseArgtupleInvalid(\"__init__\", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 68, __pyx_L3_error)",
          "",
          "[Added Lines]",
          "2885:   __Pyx_RaiseArgtupleInvalid(\"__init__\", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 66, __pyx_L3_error)",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "2927:   __Pyx_DECREF(__pyx_v_self->sock);",
          "2928:   __pyx_v_self->sock = __pyx_v_sock;",
          "2938:   __Pyx_GOTREF(__pyx_t_2);",
          "2939:   __Pyx_INCREF(((PyObject *)__pyx_ptype_17clickhouse_driver_14bufferedwriter_BufferedSocketWriter));",
          "2940:   __Pyx_GIVEREF(((PyObject *)__pyx_ptype_17clickhouse_driver_14bufferedwriter_BufferedSocketWriter));",
          "",
          "[Removed Lines]",
          "2937:   __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 70, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "2926:   __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 68, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "2942:   __Pyx_INCREF(((PyObject *)__pyx_v_self));",
          "2943:   __Pyx_GIVEREF(((PyObject *)__pyx_v_self));",
          "2944:   PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_self));",
          "2946:   __Pyx_GOTREF(__pyx_t_3);",
          "2947:   __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;",
          "2949:   __Pyx_GOTREF(__pyx_t_2);",
          "2950:   __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;",
          "2951:   __pyx_t_3 = NULL;",
          "",
          "[Removed Lines]",
          "2945:   __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_super, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 70, __pyx_L1_error)",
          "2948:   __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_init); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 70, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "2934:   __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_super, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 68, __pyx_L1_error)",
          "2937:   __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_init); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 68, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "2960:   }",
          "2961:   __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_v_bufsize) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_bufsize);",
          "2962:   __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;",
          "2964:   __Pyx_GOTREF(__pyx_t_1);",
          "2965:   __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;",
          "2966:   __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;",
          "",
          "[Removed Lines]",
          "2963:   if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 70, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "2952:   if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 68, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "3013:     if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {",
          "3014:       PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));",
          "3015:       #endif",
          "3017:       __Pyx_GOTREF(__pyx_t_1);",
          "3018:       if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_17clickhouse_driver_14bufferedwriter_20BufferedSocketWriter_3write_into_stream)) {",
          "3019:         __Pyx_XDECREF(__pyx_r);",
          "",
          "[Removed Lines]",
          "3016:       __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_write_into_stream); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 72, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "3005:       __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_write_into_stream); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 70, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "3030:         }",
          "3031:         __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_3);",
          "3032:         __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;",
          "3034:         __Pyx_GOTREF(__pyx_t_2);",
          "3035:         __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;",
          "3036:         __pyx_r = __pyx_t_2;",
          "",
          "[Removed Lines]",
          "3033:         if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 72, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "3022:         if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 70, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "3051:     #endif",
          "3052:   }",
          "3062:   __Pyx_GOTREF(__pyx_t_2);",
          "3072:   __Pyx_GOTREF(__pyx_t_3);",
          "3073:   __pyx_t_4 = NULL;",
          "3074:   if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {",
          "",
          "[Removed Lines]",
          "3061:   __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->sock, __pyx_n_s_sendall); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 73, __pyx_L1_error)",
          "3071:   __pyx_t_3 = PyBytes_FromStringAndSize(__pyx_v_self->__pyx_base.buffer, __pyx_v_self->__pyx_base.position); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 74, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "3050:   __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->sock, __pyx_n_s_sendall); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 71, __pyx_L1_error)",
          "3060:   __pyx_t_3 = PyBytes_FromStringAndSize(__pyx_v_self->__pyx_base.buffer, __pyx_v_self->__pyx_base.position); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 72, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "3083:   __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3);",
          "3084:   __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;",
          "3085:   __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;",
          "3087:   __Pyx_GOTREF(__pyx_t_1);",
          "3088:   __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;",
          "3089:   __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;",
          "",
          "[Removed Lines]",
          "3086:   if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 73, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "3075:   if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 71, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "3140:   PyObject *__pyx_t_1 = NULL;",
          "3141:   __Pyx_RefNannySetupContext(\"write_into_stream\", 0);",
          "3142:   __Pyx_XDECREF(__pyx_r);",
          "3144:   __Pyx_GOTREF(__pyx_t_1);",
          "3145:   __pyx_r = __pyx_t_1;",
          "3146:   __pyx_t_1 = 0;",
          "",
          "[Removed Lines]",
          "3143:   __pyx_t_1 = __pyx_f_17clickhouse_driver_14bufferedwriter_20BufferedSocketWriter_write_into_stream(__pyx_v_self, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 72, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "3132:   __pyx_t_1 = __pyx_f_17clickhouse_driver_14bufferedwriter_20BufferedSocketWriter_write_into_stream(__pyx_v_self, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 70, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "3500:         case  1:",
          "3501:         if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_bufsize)) != 0)) kw_args--;",
          "3502:         else {",
          "3504:         }",
          "3505:       }",
          "3506:       if (unlikely(kw_args > 0)) {",
          "3508:       }",
          "3509:     } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {",
          "3510:       goto __pyx_L5_argtuple_error;",
          "",
          "[Removed Lines]",
          "3503:           __Pyx_RaiseArgtupleInvalid(\"__init__\", 1, 2, 2, 1); __PYX_ERR(0, 82, __pyx_L3_error)",
          "3507:         if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, \"__init__\") < 0)) __PYX_ERR(0, 82, __pyx_L3_error)",
          "",
          "[Added Lines]",
          "3492:           __Pyx_RaiseArgtupleInvalid(\"__init__\", 1, 2, 2, 1); __PYX_ERR(0, 80, __pyx_L3_error)",
          "3496:         if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, \"__init__\") < 0)) __PYX_ERR(0, 80, __pyx_L3_error)",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "3517:   }",
          "3518:   goto __pyx_L4_argument_unpacking_done;",
          "3519:   __pyx_L5_argtuple_error:;",
          "3521:   __pyx_L3_error:;",
          "3522:   __Pyx_AddTraceback(\"clickhouse_driver.bufferedwriter.CompressedBufferedWriter.__init__\", __pyx_clineno, __pyx_lineno, __pyx_filename);",
          "3523:   __Pyx_RefNannyFinishContext();",
          "",
          "[Removed Lines]",
          "3520:   __Pyx_RaiseArgtupleInvalid(\"__init__\", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 82, __pyx_L3_error)",
          "",
          "[Added Lines]",
          "3509:   __Pyx_RaiseArgtupleInvalid(\"__init__\", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 80, __pyx_L3_error)",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "3551:   __Pyx_DECREF(__pyx_v_self->compressor);",
          "3552:   __pyx_v_self->compressor = __pyx_v_compressor;",
          "3562:   __Pyx_GOTREF(__pyx_t_2);",
          "3563:   __Pyx_INCREF(((PyObject *)__pyx_ptype_17clickhouse_driver_14bufferedwriter_CompressedBufferedWriter));",
          "3564:   __Pyx_GIVEREF(((PyObject *)__pyx_ptype_17clickhouse_driver_14bufferedwriter_CompressedBufferedWriter));",
          "",
          "[Removed Lines]",
          "3561:   __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 84, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "3550:   __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 82, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "3566:   __Pyx_INCREF(((PyObject *)__pyx_v_self));",
          "3567:   __Pyx_GIVEREF(((PyObject *)__pyx_v_self));",
          "3568:   PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_self));",
          "3570:   __Pyx_GOTREF(__pyx_t_3);",
          "3571:   __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;",
          "3573:   __Pyx_GOTREF(__pyx_t_2);",
          "3574:   __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;",
          "3575:   __pyx_t_3 = NULL;",
          "",
          "[Removed Lines]",
          "3569:   __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_super, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 84, __pyx_L1_error)",
          "3572:   __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_init); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 84, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "3558:   __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_super, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 82, __pyx_L1_error)",
          "3561:   __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_init); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 82, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "3584:   }",
          "3585:   __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_v_bufsize) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_bufsize);",
          "3586:   __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;",
          "3588:   __Pyx_GOTREF(__pyx_t_1);",
          "3589:   __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;",
          "3590:   __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;",
          "",
          "[Removed Lines]",
          "3587:   if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 84, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "3576:   if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 82, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "3637:     if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {",
          "3638:       PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));",
          "3639:       #endif",
          "3641:       __Pyx_GOTREF(__pyx_t_1);",
          "3642:       if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_17clickhouse_driver_14bufferedwriter_24CompressedBufferedWriter_3write_into_stream)) {",
          "3643:         __Pyx_XDECREF(__pyx_r);",
          "",
          "[Removed Lines]",
          "3640:       __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_write_into_stream); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 86, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "3629:       __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_write_into_stream); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 84, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "3654:         }",
          "3655:         __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_3);",
          "3656:         __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;",
          "3658:         __Pyx_GOTREF(__pyx_t_2);",
          "3659:         __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;",
          "3660:         __pyx_r = __pyx_t_2;",
          "",
          "[Removed Lines]",
          "3657:         if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 86, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "3646:         if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 84, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "3675:     #endif",
          "3676:   }",
          "3686:   __Pyx_GOTREF(__pyx_t_2);",
          "3696:   __Pyx_GOTREF(__pyx_t_3);",
          "3697:   __pyx_t_4 = NULL;",
          "3698:   if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {",
          "",
          "[Removed Lines]",
          "3685:   __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->compressor, __pyx_n_s_write); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 87, __pyx_L1_error)",
          "3695:   __pyx_t_3 = PyBytes_FromStringAndSize(__pyx_v_self->__pyx_base.buffer, __pyx_v_self->__pyx_base.position); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 88, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "3674:   __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->compressor, __pyx_n_s_write); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 85, __pyx_L1_error)",
          "3684:   __pyx_t_3 = PyBytes_FromStringAndSize(__pyx_v_self->__pyx_base.buffer, __pyx_v_self->__pyx_base.position); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 86, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 49 ---",
          "[Context before]",
          "3707:   __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3);",
          "3708:   __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;",
          "3709:   __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;",
          "3711:   __Pyx_GOTREF(__pyx_t_1);",
          "3712:   __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;",
          "3713:   __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;",
          "",
          "[Removed Lines]",
          "3710:   if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 87, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "3699:   if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 85, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 50 ---",
          "[Context before]",
          "3764:   PyObject *__pyx_t_1 = NULL;",
          "3765:   __Pyx_RefNannySetupContext(\"write_into_stream\", 0);",
          "3766:   __Pyx_XDECREF(__pyx_r);",
          "3768:   __Pyx_GOTREF(__pyx_t_1);",
          "3769:   __pyx_r = __pyx_t_1;",
          "3770:   __pyx_t_1 = 0;",
          "",
          "[Removed Lines]",
          "3767:   __pyx_t_1 = __pyx_f_17clickhouse_driver_14bufferedwriter_24CompressedBufferedWriter_write_into_stream(__pyx_v_self, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 86, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "3756:   __pyx_t_1 = __pyx_f_17clickhouse_driver_14bufferedwriter_24CompressedBufferedWriter_write_into_stream(__pyx_v_self, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 84, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 51 ---",
          "[Context before]",
          "3807:   PyObject *__pyx_t_1 = NULL;",
          "3808:   __Pyx_RefNannySetupContext(\"flush\", 0);",
          "3816:   __Pyx_GOTREF(__pyx_t_1);",
          "3817:   __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;",
          "",
          "[Removed Lines]",
          "3815:   __pyx_t_1 = ((struct __pyx_vtabstruct_17clickhouse_driver_14bufferedwriter_CompressedBufferedWriter *)__pyx_v_self->__pyx_base.__pyx_vtab)->__pyx_base.write_into_stream(((struct __pyx_obj_17clickhouse_driver_14bufferedwriter_BufferedWriter *)__pyx_v_self), 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 93, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "3804:   __pyx_t_1 = ((struct __pyx_vtabstruct_17clickhouse_driver_14bufferedwriter_CompressedBufferedWriter *)__pyx_v_self->__pyx_base.__pyx_vtab)->__pyx_base.write_into_stream(((struct __pyx_obj_17clickhouse_driver_14bufferedwriter_BufferedWriter *)__pyx_v_self), 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 91, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 52 ---",
          "[Context before]",
          "5790:   {&__pyx_n_s_MemoryError, __pyx_k_MemoryError, sizeof(__pyx_k_MemoryError), 0, 0, 1, 1},",
          "5791:   {&__pyx_n_s_NotImplementedError, __pyx_k_NotImplementedError, sizeof(__pyx_k_NotImplementedError), 0, 0, 1, 1},",
          "5792:   {&__pyx_n_s_PickleError, __pyx_k_PickleError, sizeof(__pyx_k_PickleError), 0, 0, 1, 1},",
          "5793:   {&__pyx_n_s_bufsize, __pyx_k_bufsize, sizeof(__pyx_k_bufsize), 0, 0, 1, 1},",
          "5794:   {&__pyx_n_s_clickhouse_driver_bufferedwriter, __pyx_k_clickhouse_driver_bufferedwriter, sizeof(__pyx_k_clickhouse_driver_bufferedwriter), 0, 0, 1, 1},",
          "5795:   {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},",
          "5796:   {&__pyx_n_s_compressor, __pyx_k_compressor, sizeof(__pyx_k_compressor), 0, 0, 1, 1},",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5782:   {&__pyx_n_s_ValueError, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},",
          "5784:   {&__pyx_kp_u_bytes_object_expected, __pyx_k_bytes_object_expected, sizeof(__pyx_k_bytes_object_expected), 0, 1, 0, 0},",
          "",
          "---------------",
          "--- Hunk 53 ---",
          "[Context before]",
          "5832:   {0, 0, 0, 0, 0, 0, 0}",
          "5833: };",
          "5834: static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(void) {",
          "5838:   return 0;",
          "5839:   __pyx_L1_error:;",
          "5840:   return -1;",
          "",
          "[Removed Lines]",
          "5835:   __pyx_builtin_MemoryError = __Pyx_GetBuiltinName(__pyx_n_s_MemoryError); if (!__pyx_builtin_MemoryError) __PYX_ERR(0, 16, __pyx_L1_error)",
          "5836:   __pyx_builtin_super = __Pyx_GetBuiltinName(__pyx_n_s_super); if (!__pyx_builtin_super) __PYX_ERR(0, 21, __pyx_L1_error)",
          "5837:   __pyx_builtin_NotImplementedError = __Pyx_GetBuiltinName(__pyx_n_s_NotImplementedError); if (!__pyx_builtin_NotImplementedError) __PYX_ERR(0, 27, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "5826:   __pyx_builtin_MemoryError = __Pyx_GetBuiltinName(__pyx_n_s_MemoryError); if (!__pyx_builtin_MemoryError) __PYX_ERR(0, 15, __pyx_L1_error)",
          "5827:   __pyx_builtin_super = __Pyx_GetBuiltinName(__pyx_n_s_super); if (!__pyx_builtin_super) __PYX_ERR(0, 20, __pyx_L1_error)",
          "5828:   __pyx_builtin_NotImplementedError = __Pyx_GetBuiltinName(__pyx_n_s_NotImplementedError); if (!__pyx_builtin_NotImplementedError) __PYX_ERR(0, 26, __pyx_L1_error)",
          "5829:   __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) __PYX_ERR(0, 57, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 54 ---",
          "[Context before]",
          "5844:   __Pyx_RefNannyDeclarations",
          "5845:   __Pyx_RefNannySetupContext(\"__Pyx_InitCachedConstants\", 0);",
          "5864:   __Pyx_RefNannyFinishContext();",
          "5865:   return 0;",
          "5866:   __pyx_L1_error:;",
          "",
          "[Removed Lines]",
          "5852:   __pyx_tuple_ = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_pyx_PickleError, __pyx_n_s_pyx_result); if (unlikely(!__pyx_tuple_)) __PYX_ERR(1, 1, __pyx_L1_error)",
          "5853:   __Pyx_GOTREF(__pyx_tuple_);",
          "5854:   __Pyx_GIVEREF(__pyx_tuple_);",
          "5855:   __pyx_codeobj__2 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple_, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_BufferedWriter, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__2)) __PYX_ERR(1, 1, __pyx_L1_error)",
          "5856:   __pyx_tuple__3 = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_pyx_PickleError, __pyx_n_s_pyx_result); if (unlikely(!__pyx_tuple__3)) __PYX_ERR(1, 1, __pyx_L1_error)",
          "5857:   __Pyx_GOTREF(__pyx_tuple__3);",
          "5858:   __Pyx_GIVEREF(__pyx_tuple__3);",
          "5859:   __pyx_codeobj__4 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__3, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_BufferedSocketWri, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__4)) __PYX_ERR(1, 1, __pyx_L1_error)",
          "5860:   __pyx_tuple__5 = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_pyx_PickleError, __pyx_n_s_pyx_result); if (unlikely(!__pyx_tuple__5)) __PYX_ERR(1, 1, __pyx_L1_error)",
          "5861:   __Pyx_GOTREF(__pyx_tuple__5);",
          "5862:   __Pyx_GIVEREF(__pyx_tuple__5);",
          "5863:   __pyx_codeobj__6 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__5, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_CompressedBuffere, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__6)) __PYX_ERR(1, 1, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "5846:   __pyx_tuple_ = PyTuple_Pack(1, __pyx_kp_u_bytes_object_expected); if (unlikely(!__pyx_tuple_)) __PYX_ERR(0, 57, __pyx_L1_error)",
          "5847:   __Pyx_GOTREF(__pyx_tuple_);",
          "5848:   __Pyx_GIVEREF(__pyx_tuple_);",
          "5855:   __pyx_tuple__2 = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_pyx_PickleError, __pyx_n_s_pyx_result); if (unlikely(!__pyx_tuple__2)) __PYX_ERR(1, 1, __pyx_L1_error)",
          "5856:   __Pyx_GOTREF(__pyx_tuple__2);",
          "5857:   __Pyx_GIVEREF(__pyx_tuple__2);",
          "5858:   __pyx_codeobj__3 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__2, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_BufferedWriter, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__3)) __PYX_ERR(1, 1, __pyx_L1_error)",
          "5859:   __pyx_tuple__4 = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_pyx_PickleError, __pyx_n_s_pyx_result); if (unlikely(!__pyx_tuple__4)) __PYX_ERR(1, 1, __pyx_L1_error)",
          "5860:   __Pyx_GOTREF(__pyx_tuple__4);",
          "5861:   __Pyx_GIVEREF(__pyx_tuple__4);",
          "5862:   __pyx_codeobj__5 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__4, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_BufferedSocketWri, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__5)) __PYX_ERR(1, 1, __pyx_L1_error)",
          "5863:   __pyx_tuple__6 = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_pyx_PickleError, __pyx_n_s_pyx_result); if (unlikely(!__pyx_tuple__6)) __PYX_ERR(1, 1, __pyx_L1_error)",
          "5864:   __Pyx_GOTREF(__pyx_tuple__6);",
          "5865:   __Pyx_GIVEREF(__pyx_tuple__6);",
          "5866:   __pyx_codeobj__7 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__6, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_CompressedBuffere, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__7)) __PYX_ERR(1, 1, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 55 ---",
          "[Context before]",
          "5917:   __pyx_vtabptr_17clickhouse_driver_14bufferedwriter_BufferedWriter = &__pyx_vtable_17clickhouse_driver_14bufferedwriter_BufferedWriter;",
          "5918:   __pyx_vtable_17clickhouse_driver_14bufferedwriter_BufferedWriter.write_into_stream = (PyObject *(*)(struct __pyx_obj_17clickhouse_driver_14bufferedwriter_BufferedWriter *, int __pyx_skip_dispatch))__pyx_f_17clickhouse_driver_14bufferedwriter_14BufferedWriter_write_into_stream;",
          "5919:   __pyx_vtable_17clickhouse_driver_14bufferedwriter_BufferedWriter.write = (PyObject *(*)(struct __pyx_obj_17clickhouse_driver_14bufferedwriter_BufferedWriter *, PyObject *, int __pyx_skip_dispatch))__pyx_f_17clickhouse_driver_14bufferedwriter_14BufferedWriter_write;",
          "5921:   #if PY_VERSION_HEX < 0x030800B1",
          "5922:   __pyx_type_17clickhouse_driver_14bufferedwriter_BufferedWriter.tp_print = 0;",
          "5923:   #endif",
          "5924:   if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_17clickhouse_driver_14bufferedwriter_BufferedWriter.tp_dictoffset && __pyx_type_17clickhouse_driver_14bufferedwriter_BufferedWriter.tp_getattro == PyObject_GenericGetAttr)) {",
          "5925:     __pyx_type_17clickhouse_driver_14bufferedwriter_BufferedWriter.tp_getattro = __Pyx_PyObject_GenericGetAttr;",
          "5926:   }",
          "5930:   __pyx_ptype_17clickhouse_driver_14bufferedwriter_BufferedWriter = &__pyx_type_17clickhouse_driver_14bufferedwriter_BufferedWriter;",
          "5931:   __pyx_vtabptr_17clickhouse_driver_14bufferedwriter_BufferedSocketWriter = &__pyx_vtable_17clickhouse_driver_14bufferedwriter_BufferedSocketWriter;",
          "5932:   __pyx_vtable_17clickhouse_driver_14bufferedwriter_BufferedSocketWriter.__pyx_base = *__pyx_vtabptr_17clickhouse_driver_14bufferedwriter_BufferedWriter;",
          "5933:   __pyx_vtable_17clickhouse_driver_14bufferedwriter_BufferedSocketWriter.__pyx_base.write_into_stream = (PyObject *(*)(struct __pyx_obj_17clickhouse_driver_14bufferedwriter_BufferedWriter *, int __pyx_skip_dispatch))__pyx_f_17clickhouse_driver_14bufferedwriter_20BufferedSocketWriter_write_into_stream;",
          "5934:   __pyx_type_17clickhouse_driver_14bufferedwriter_BufferedSocketWriter.tp_base = __pyx_ptype_17clickhouse_driver_14bufferedwriter_BufferedWriter;",
          "5936:   #if PY_VERSION_HEX < 0x030800B1",
          "5937:   __pyx_type_17clickhouse_driver_14bufferedwriter_BufferedSocketWriter.tp_print = 0;",
          "5938:   #endif",
          "5939:   if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_17clickhouse_driver_14bufferedwriter_BufferedSocketWriter.tp_dictoffset && __pyx_type_17clickhouse_driver_14bufferedwriter_BufferedSocketWriter.tp_getattro == PyObject_GenericGetAttr)) {",
          "5940:     __pyx_type_17clickhouse_driver_14bufferedwriter_BufferedSocketWriter.tp_getattro = __Pyx_PyObject_GenericGetAttr;",
          "5941:   }",
          "5945:   __pyx_ptype_17clickhouse_driver_14bufferedwriter_BufferedSocketWriter = &__pyx_type_17clickhouse_driver_14bufferedwriter_BufferedSocketWriter;",
          "5946:   __pyx_vtabptr_17clickhouse_driver_14bufferedwriter_CompressedBufferedWriter = &__pyx_vtable_17clickhouse_driver_14bufferedwriter_CompressedBufferedWriter;",
          "5947:   __pyx_vtable_17clickhouse_driver_14bufferedwriter_CompressedBufferedWriter.__pyx_base = *__pyx_vtabptr_17clickhouse_driver_14bufferedwriter_BufferedWriter;",
          "5948:   __pyx_vtable_17clickhouse_driver_14bufferedwriter_CompressedBufferedWriter.__pyx_base.write_into_stream = (PyObject *(*)(struct __pyx_obj_17clickhouse_driver_14bufferedwriter_BufferedWriter *, int __pyx_skip_dispatch))__pyx_f_17clickhouse_driver_14bufferedwriter_24CompressedBufferedWriter_write_into_stream;",
          "5949:   __pyx_type_17clickhouse_driver_14bufferedwriter_CompressedBufferedWriter.tp_base = __pyx_ptype_17clickhouse_driver_14bufferedwriter_BufferedWriter;",
          "5951:   #if PY_VERSION_HEX < 0x030800B1",
          "5952:   __pyx_type_17clickhouse_driver_14bufferedwriter_CompressedBufferedWriter.tp_print = 0;",
          "5953:   #endif",
          "5954:   if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_17clickhouse_driver_14bufferedwriter_CompressedBufferedWriter.tp_dictoffset && __pyx_type_17clickhouse_driver_14bufferedwriter_CompressedBufferedWriter.tp_getattro == PyObject_GenericGetAttr)) {",
          "5955:     __pyx_type_17clickhouse_driver_14bufferedwriter_CompressedBufferedWriter.tp_getattro = __Pyx_PyObject_GenericGetAttr;",
          "5956:   }",
          "5960:   __pyx_ptype_17clickhouse_driver_14bufferedwriter_CompressedBufferedWriter = &__pyx_type_17clickhouse_driver_14bufferedwriter_CompressedBufferedWriter;",
          "5961:   __Pyx_RefNannyFinishContext();",
          "5962:   return 0;",
          "",
          "[Removed Lines]",
          "5920:   if (PyType_Ready(&__pyx_type_17clickhouse_driver_14bufferedwriter_BufferedWriter) < 0) __PYX_ERR(0, 9, __pyx_L1_error)",
          "5927:   if (__Pyx_SetVtable(__pyx_type_17clickhouse_driver_14bufferedwriter_BufferedWriter.tp_dict, __pyx_vtabptr_17clickhouse_driver_14bufferedwriter_BufferedWriter) < 0) __PYX_ERR(0, 9, __pyx_L1_error)",
          "5928:   if (PyObject_SetAttr(__pyx_m, __pyx_n_s_BufferedWriter, (PyObject *)&__pyx_type_17clickhouse_driver_14bufferedwriter_BufferedWriter) < 0) __PYX_ERR(0, 9, __pyx_L1_error)",
          "5929:   if (__Pyx_setup_reduce((PyObject*)&__pyx_type_17clickhouse_driver_14bufferedwriter_BufferedWriter) < 0) __PYX_ERR(0, 9, __pyx_L1_error)",
          "5935:   if (PyType_Ready(&__pyx_type_17clickhouse_driver_14bufferedwriter_BufferedSocketWriter) < 0) __PYX_ERR(0, 65, __pyx_L1_error)",
          "5942:   if (__Pyx_SetVtable(__pyx_type_17clickhouse_driver_14bufferedwriter_BufferedSocketWriter.tp_dict, __pyx_vtabptr_17clickhouse_driver_14bufferedwriter_BufferedSocketWriter) < 0) __PYX_ERR(0, 65, __pyx_L1_error)",
          "5943:   if (PyObject_SetAttr(__pyx_m, __pyx_n_s_BufferedSocketWriter, (PyObject *)&__pyx_type_17clickhouse_driver_14bufferedwriter_BufferedSocketWriter) < 0) __PYX_ERR(0, 65, __pyx_L1_error)",
          "5944:   if (__Pyx_setup_reduce((PyObject*)&__pyx_type_17clickhouse_driver_14bufferedwriter_BufferedSocketWriter) < 0) __PYX_ERR(0, 65, __pyx_L1_error)",
          "5950:   if (PyType_Ready(&__pyx_type_17clickhouse_driver_14bufferedwriter_CompressedBufferedWriter) < 0) __PYX_ERR(0, 79, __pyx_L1_error)",
          "5957:   if (__Pyx_SetVtable(__pyx_type_17clickhouse_driver_14bufferedwriter_CompressedBufferedWriter.tp_dict, __pyx_vtabptr_17clickhouse_driver_14bufferedwriter_CompressedBufferedWriter) < 0) __PYX_ERR(0, 79, __pyx_L1_error)",
          "5958:   if (PyObject_SetAttr(__pyx_m, __pyx_n_s_CompressedBufferedWriter, (PyObject *)&__pyx_type_17clickhouse_driver_14bufferedwriter_CompressedBufferedWriter) < 0) __PYX_ERR(0, 79, __pyx_L1_error)",
          "5959:   if (__Pyx_setup_reduce((PyObject*)&__pyx_type_17clickhouse_driver_14bufferedwriter_CompressedBufferedWriter) < 0) __PYX_ERR(0, 79, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "5923:   if (PyType_Ready(&__pyx_type_17clickhouse_driver_14bufferedwriter_BufferedWriter) < 0) __PYX_ERR(0, 8, __pyx_L1_error)",
          "5930:   if (__Pyx_SetVtable(__pyx_type_17clickhouse_driver_14bufferedwriter_BufferedWriter.tp_dict, __pyx_vtabptr_17clickhouse_driver_14bufferedwriter_BufferedWriter) < 0) __PYX_ERR(0, 8, __pyx_L1_error)",
          "5931:   if (PyObject_SetAttr(__pyx_m, __pyx_n_s_BufferedWriter, (PyObject *)&__pyx_type_17clickhouse_driver_14bufferedwriter_BufferedWriter) < 0) __PYX_ERR(0, 8, __pyx_L1_error)",
          "5932:   if (__Pyx_setup_reduce((PyObject*)&__pyx_type_17clickhouse_driver_14bufferedwriter_BufferedWriter) < 0) __PYX_ERR(0, 8, __pyx_L1_error)",
          "5938:   if (PyType_Ready(&__pyx_type_17clickhouse_driver_14bufferedwriter_BufferedSocketWriter) < 0) __PYX_ERR(0, 63, __pyx_L1_error)",
          "5945:   if (__Pyx_SetVtable(__pyx_type_17clickhouse_driver_14bufferedwriter_BufferedSocketWriter.tp_dict, __pyx_vtabptr_17clickhouse_driver_14bufferedwriter_BufferedSocketWriter) < 0) __PYX_ERR(0, 63, __pyx_L1_error)",
          "5946:   if (PyObject_SetAttr(__pyx_m, __pyx_n_s_BufferedSocketWriter, (PyObject *)&__pyx_type_17clickhouse_driver_14bufferedwriter_BufferedSocketWriter) < 0) __PYX_ERR(0, 63, __pyx_L1_error)",
          "5947:   if (__Pyx_setup_reduce((PyObject*)&__pyx_type_17clickhouse_driver_14bufferedwriter_BufferedSocketWriter) < 0) __PYX_ERR(0, 63, __pyx_L1_error)",
          "5953:   if (PyType_Ready(&__pyx_type_17clickhouse_driver_14bufferedwriter_CompressedBufferedWriter) < 0) __PYX_ERR(0, 77, __pyx_L1_error)",
          "5960:   if (__Pyx_SetVtable(__pyx_type_17clickhouse_driver_14bufferedwriter_CompressedBufferedWriter.tp_dict, __pyx_vtabptr_17clickhouse_driver_14bufferedwriter_CompressedBufferedWriter) < 0) __PYX_ERR(0, 77, __pyx_L1_error)",
          "5961:   if (PyObject_SetAttr(__pyx_m, __pyx_n_s_CompressedBufferedWriter, (PyObject *)&__pyx_type_17clickhouse_driver_14bufferedwriter_CompressedBufferedWriter) < 0) __PYX_ERR(0, 77, __pyx_L1_error)",
          "5962:   if (__Pyx_setup_reduce((PyObject*)&__pyx_type_17clickhouse_driver_14bufferedwriter_CompressedBufferedWriter) < 0) __PYX_ERR(0, 77, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 56 ---",
          "[Context before]",
          "6213:   if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)",
          "6214:   #endif",
          "6224:   __Pyx_GOTREF(__pyx_t_1);",
          "6225:   __Pyx_INCREF(__pyx_n_s_write_varint);",
          "6226:   __Pyx_GIVEREF(__pyx_n_s_write_varint);",
          "6227:   PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_write_varint);",
          "6229:   __Pyx_GOTREF(__pyx_t_2);",
          "6230:   __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;",
          "6232:   __Pyx_GOTREF(__pyx_t_1);",
          "6234:   __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;",
          "6235:   __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;",
          "",
          "[Removed Lines]",
          "6223:   __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 6, __pyx_L1_error)",
          "6228:   __pyx_t_2 = __Pyx_Import(__pyx_n_s_varint, __pyx_t_1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 6, __pyx_L1_error)",
          "6231:   __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_write_varint); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 6, __pyx_L1_error)",
          "6233:   if (PyDict_SetItem(__pyx_d, __pyx_n_s_write_varint, __pyx_t_1) < 0) __PYX_ERR(0, 6, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "6226:   __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5, __pyx_L1_error)",
          "6231:   __pyx_t_2 = __Pyx_Import(__pyx_n_s_varint, __pyx_t_1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 5, __pyx_L1_error)",
          "6234:   __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_write_varint); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5, __pyx_L1_error)",
          "6236:   if (PyDict_SetItem(__pyx_d, __pyx_n_s_write_varint, __pyx_t_1) < 0) __PYX_ERR(0, 5, __pyx_L1_error)",
          "",
          "---------------"
        ],
        "clickhouse_driver/bufferedwriter.pyx||clickhouse_driver/bufferedwriter.pyx": [
          "File: clickhouse_driver/bufferedwriter.pyx -> clickhouse_driver/bufferedwriter.pyx",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: from cpython cimport PyMem_Malloc, PyMem_Free, PyBytes_AsString, \\",
          "2:     PyBytes_Check, PyBytes_FromStringAndSize",
          "4: from libc.string cimport memcpy",
          "6: from .varint import write_varint",
          "",
          "[Removed Lines]",
          "3: from cpython.bytearray cimport PyByteArray_AsString",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "32:         cdef Py_ssize_t data_len = len(data)",
          "33:         cdef char* c_data",
          "40:         while written < data_len:",
          "41:             size = min(data_len - written, self.buffer_size - self.position)",
          "",
          "[Removed Lines]",
          "35:         if PyBytes_Check(data):",
          "36:             c_data = PyBytes_AsString(data)",
          "37:         else:",
          "38:             c_data = PyByteArray_AsString(data)",
          "",
          "[Added Lines]",
          "34:         c_data = PyBytes_AsString(data)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "54:         cdef int do_encode = encoding is not None",
          "56:         for value in items:",
          "59:                     value = value.encode(encoding)",
          "61:             write_varint(len(value), self)",
          "62:             self.write(value)",
          "",
          "[Removed Lines]",
          "57:             if do_encode:",
          "58:                 if not PyBytes_Check(value):",
          "",
          "[Added Lines]",
          "53:             if not PyBytes_Check(value):",
          "54:                 if do_encode:",
          "56:                 else:",
          "57:                     raise ValueError('bytes object expected')",
          "",
          "---------------"
        ],
        "clickhouse_driver/columns/stringcolumn.c||clickhouse_driver/columns/stringcolumn.c": [
          "File: clickhouse_driver/columns/stringcolumn.c -> clickhouse_driver/columns/stringcolumn.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1664:   PyObject *__pyx_t_2 = NULL;",
          "1665:   __Pyx_RefNannySetupContext(\"__defaults__\", 0);",
          "1666:   __Pyx_XDECREF(__pyx_r);",
          "1668:   __Pyx_GOTREF(__pyx_t_1);",
          "1669:   __Pyx_INCREF(__Pyx_CyFunction_Defaults(__pyx_defaults, __pyx_self)->__pyx_arg_encoding);",
          "1670:   __Pyx_GIVEREF(__Pyx_CyFunction_Defaults(__pyx_defaults, __pyx_self)->__pyx_arg_encoding);",
          "1671:   PyTuple_SET_ITEM(__pyx_t_1, 0, __Pyx_CyFunction_Defaults(__pyx_defaults, __pyx_self)->__pyx_arg_encoding);",
          "1673:   __Pyx_GOTREF(__pyx_t_2);",
          "1674:   __Pyx_GIVEREF(__pyx_t_1);",
          "1675:   PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);",
          "",
          "[Removed Lines]",
          "1667:   __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 24, __pyx_L1_error)",
          "1672:   __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 24, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "1665:   __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 22, __pyx_L1_error)",
          "1670:   __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 22, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1734:         }",
          "1735:       }",
          "1736:       if (unlikely(kw_args > 0)) {",
          "1738:       }",
          "1739:     } else {",
          "1740:       switch (PyTuple_GET_SIZE(__pyx_args)) {",
          "",
          "[Removed Lines]",
          "1737:         if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_kwargs, values, pos_args, \"__init__\") < 0)) __PYX_ERR(0, 24, __pyx_L3_error)",
          "",
          "[Added Lines]",
          "1735:         if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_kwargs, values, pos_args, \"__init__\") < 0)) __PYX_ERR(0, 22, __pyx_L3_error)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1750:   }",
          "1751:   goto __pyx_L4_argument_unpacking_done;",
          "1752:   __pyx_L5_argtuple_error:;",
          "1754:   __pyx_L3_error:;",
          "1755:   __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;",
          "1756:   __Pyx_AddTraceback(\"clickhouse_driver.columns.stringcolumn.String.__init__\", __pyx_clineno, __pyx_lineno, __pyx_filename);",
          "",
          "[Removed Lines]",
          "1753:   __Pyx_RaiseArgtupleInvalid(\"__init__\", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 24, __pyx_L3_error)",
          "",
          "[Added Lines]",
          "1751:   __Pyx_RaiseArgtupleInvalid(\"__init__\", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 22, __pyx_L3_error)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1772:   PyObject *__pyx_t_2 = NULL;",
          "1773:   __Pyx_RefNannySetupContext(\"__init__\", 0);",
          "1792:   __Pyx_GOTREF(__pyx_t_1);",
          "1794:   __Pyx_GOTREF(__pyx_t_2);",
          "1795:   __Pyx_GIVEREF(__pyx_t_1);",
          "1796:   PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);",
          "",
          "[Removed Lines]",
          "1782:   if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_encoding, __pyx_v_encoding) < 0) __PYX_ERR(0, 25, __pyx_L1_error)",
          "1791:   __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_String); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 26, __pyx_L1_error)",
          "1793:   __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 26, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "1780:   if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_encoding, __pyx_v_encoding) < 0) __PYX_ERR(0, 23, __pyx_L1_error)",
          "1789:   __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_String); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 24, __pyx_L1_error)",
          "1791:   __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 24, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1798:   __Pyx_GIVEREF(__pyx_v_self);",
          "1799:   PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_self);",
          "1800:   __pyx_t_1 = 0;",
          "1802:   __Pyx_GOTREF(__pyx_t_1);",
          "1803:   __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;",
          "1805:   __Pyx_GOTREF(__pyx_t_2);",
          "1806:   __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;",
          "1808:   __Pyx_GOTREF(__pyx_t_1);",
          "1809:   __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;",
          "1810:   __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;",
          "",
          "[Removed Lines]",
          "1801:   __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_super, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 26, __pyx_L1_error)",
          "1804:   __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_init); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 26, __pyx_L1_error)",
          "1807:   __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_empty_tuple, __pyx_v_kwargs); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 26, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "1799:   __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_super, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 24, __pyx_L1_error)",
          "1802:   __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_init); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 24, __pyx_L1_error)",
          "1805:   __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_empty_tuple, __pyx_v_kwargs); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 24, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1874:         case  1:",
          "1875:         if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_items)) != 0)) kw_args--;",
          "1876:         else {",
          "1878:         }",
          "1879:         CYTHON_FALLTHROUGH;",
          "1880:         case  2:",
          "1881:         if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_buf)) != 0)) kw_args--;",
          "1882:         else {",
          "1884:         }",
          "1885:       }",
          "1886:       if (unlikely(kw_args > 0)) {",
          "1888:       }",
          "1889:     } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {",
          "1890:       goto __pyx_L5_argtuple_error;",
          "",
          "[Removed Lines]",
          "1877:           __Pyx_RaiseArgtupleInvalid(\"write_items\", 1, 3, 3, 1); __PYX_ERR(0, 28, __pyx_L3_error)",
          "1883:           __Pyx_RaiseArgtupleInvalid(\"write_items\", 1, 3, 3, 2); __PYX_ERR(0, 28, __pyx_L3_error)",
          "1887:         if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, \"write_items\") < 0)) __PYX_ERR(0, 28, __pyx_L3_error)",
          "",
          "[Added Lines]",
          "1875:           __Pyx_RaiseArgtupleInvalid(\"write_items\", 1, 3, 3, 1); __PYX_ERR(0, 26, __pyx_L3_error)",
          "1881:           __Pyx_RaiseArgtupleInvalid(\"write_items\", 1, 3, 3, 2); __PYX_ERR(0, 26, __pyx_L3_error)",
          "1885:         if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, \"write_items\") < 0)) __PYX_ERR(0, 26, __pyx_L3_error)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1899:   }",
          "1900:   goto __pyx_L4_argument_unpacking_done;",
          "1901:   __pyx_L5_argtuple_error:;",
          "1903:   __pyx_L3_error:;",
          "1904:   __Pyx_AddTraceback(\"clickhouse_driver.columns.stringcolumn.String.write_items\", __pyx_clineno, __pyx_lineno, __pyx_filename);",
          "1905:   __Pyx_RefNannyFinishContext();",
          "",
          "[Removed Lines]",
          "1902:   __Pyx_RaiseArgtupleInvalid(\"write_items\", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 28, __pyx_L3_error)",
          "",
          "[Added Lines]",
          "1900:   __Pyx_RaiseArgtupleInvalid(\"write_items\", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 26, __pyx_L3_error)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1921:   PyObject *__pyx_t_4 = NULL;",
          "1922:   __Pyx_RefNannySetupContext(\"write_items\", 0);",
          "1932:   __Pyx_GOTREF(__pyx_t_1);",
          "1934:   __Pyx_GOTREF(__pyx_t_2);",
          "1935:   __Pyx_INCREF(__pyx_v_items);",
          "1936:   __Pyx_GIVEREF(__pyx_v_items);",
          "1937:   PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_items);",
          "1939:   __Pyx_GOTREF(__pyx_t_3);",
          "1941:   __Pyx_GOTREF(__pyx_t_4);",
          "1943:   __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;",
          "1945:   __Pyx_GOTREF(__pyx_t_4);",
          "1946:   __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;",
          "1947:   __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;",
          "1948:   __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;",
          "1949:   __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;",
          "",
          "[Removed Lines]",
          "1931:   __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_buf, __pyx_n_s_write_strings); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 29, __pyx_L1_error)",
          "1933:   __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 29, __pyx_L1_error)",
          "1938:   __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 29, __pyx_L1_error)",
          "1940:   __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_encoding); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 29, __pyx_L1_error)",
          "1942:   if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_encoding, __pyx_t_4) < 0) __PYX_ERR(0, 29, __pyx_L1_error)",
          "1944:   __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 29, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "1929:   __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_buf, __pyx_n_s_write_strings); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 27, __pyx_L1_error)",
          "1931:   __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 27, __pyx_L1_error)",
          "1936:   __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 27, __pyx_L1_error)",
          "1938:   __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_encoding); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 27, __pyx_L1_error)",
          "1940:   if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_encoding, __pyx_t_4) < 0) __PYX_ERR(0, 27, __pyx_L1_error)",
          "1942:   __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 27, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2015:         case  1:",
          "2016:         if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n_items)) != 0)) kw_args--;",
          "2017:         else {",
          "2019:         }",
          "2020:         CYTHON_FALLTHROUGH;",
          "2021:         case  2:",
          "2022:         if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_buf)) != 0)) kw_args--;",
          "2023:         else {",
          "2025:         }",
          "2026:       }",
          "2027:       if (unlikely(kw_args > 0)) {",
          "2029:       }",
          "2030:     } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {",
          "2031:       goto __pyx_L5_argtuple_error;",
          "",
          "[Removed Lines]",
          "2018:           __Pyx_RaiseArgtupleInvalid(\"read_items\", 1, 3, 3, 1); __PYX_ERR(0, 31, __pyx_L3_error)",
          "2024:           __Pyx_RaiseArgtupleInvalid(\"read_items\", 1, 3, 3, 2); __PYX_ERR(0, 31, __pyx_L3_error)",
          "2028:         if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, \"read_items\") < 0)) __PYX_ERR(0, 31, __pyx_L3_error)",
          "",
          "[Added Lines]",
          "2016:           __Pyx_RaiseArgtupleInvalid(\"read_items\", 1, 3, 3, 1); __PYX_ERR(0, 29, __pyx_L3_error)",
          "2022:           __Pyx_RaiseArgtupleInvalid(\"read_items\", 1, 3, 3, 2); __PYX_ERR(0, 29, __pyx_L3_error)",
          "2026:         if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, \"read_items\") < 0)) __PYX_ERR(0, 29, __pyx_L3_error)",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2040:   }",
          "2041:   goto __pyx_L4_argument_unpacking_done;",
          "2042:   __pyx_L5_argtuple_error:;",
          "2044:   __pyx_L3_error:;",
          "2045:   __Pyx_AddTraceback(\"clickhouse_driver.columns.stringcolumn.String.read_items\", __pyx_clineno, __pyx_lineno, __pyx_filename);",
          "2046:   __Pyx_RefNannyFinishContext();",
          "",
          "[Removed Lines]",
          "2043:   __Pyx_RaiseArgtupleInvalid(\"read_items\", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 31, __pyx_L3_error)",
          "",
          "[Added Lines]",
          "2041:   __Pyx_RaiseArgtupleInvalid(\"read_items\", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 29, __pyx_L3_error)",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2072:   __Pyx_XDECREF(__pyx_r);",
          "2074:   __Pyx_GOTREF(__pyx_t_1);",
          "2076:   __Pyx_GOTREF(__pyx_t_2);",
          "2077:   __Pyx_INCREF(__pyx_v_n_items);",
          "2078:   __Pyx_GIVEREF(__pyx_v_n_items);",
          "2079:   PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_n_items);",
          "2081:   __Pyx_GOTREF(__pyx_t_3);",
          "2083:   __Pyx_GOTREF(__pyx_t_4);",
          "2085:   __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;",
          "2087:   __Pyx_GOTREF(__pyx_t_4);",
          "2088:   __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;",
          "2089:   __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;",
          "",
          "[Removed Lines]",
          "2073:   __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_buf, __pyx_n_s_read_strings); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 32, __pyx_L1_error)",
          "2075:   __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 32, __pyx_L1_error)",
          "2080:   __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 32, __pyx_L1_error)",
          "2082:   __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_encoding); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 32, __pyx_L1_error)",
          "2084:   if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_encoding, __pyx_t_4) < 0) __PYX_ERR(0, 32, __pyx_L1_error)",
          "2086:   __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 32, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "2071:   __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_buf, __pyx_n_s_read_strings); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 30, __pyx_L1_error)",
          "2073:   __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 30, __pyx_L1_error)",
          "2078:   __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 30, __pyx_L1_error)",
          "2080:   __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_encoding); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 30, __pyx_L1_error)",
          "2082:   if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_encoding, __pyx_t_4) < 0) __PYX_ERR(0, 30, __pyx_L1_error)",
          "2084:   __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 30, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "2157:         case  1:",
          "2158:         if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_items)) != 0)) kw_args--;",
          "2159:         else {",
          "2161:         }",
          "2162:         CYTHON_FALLTHROUGH;",
          "2163:         case  2:",
          "2164:         if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_buf)) != 0)) kw_args--;",
          "2165:         else {",
          "2167:         }",
          "2168:       }",
          "2169:       if (unlikely(kw_args > 0)) {",
          "2171:       }",
          "2172:     } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {",
          "2173:       goto __pyx_L5_argtuple_error;",
          "",
          "[Removed Lines]",
          "2160:           __Pyx_RaiseArgtupleInvalid(\"write_items\", 1, 3, 3, 1); __PYX_ERR(0, 39, __pyx_L3_error)",
          "2166:           __Pyx_RaiseArgtupleInvalid(\"write_items\", 1, 3, 3, 2); __PYX_ERR(0, 39, __pyx_L3_error)",
          "2170:         if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, \"write_items\") < 0)) __PYX_ERR(0, 39, __pyx_L3_error)",
          "",
          "[Added Lines]",
          "2158:           __Pyx_RaiseArgtupleInvalid(\"write_items\", 1, 3, 3, 1); __PYX_ERR(0, 37, __pyx_L3_error)",
          "2164:           __Pyx_RaiseArgtupleInvalid(\"write_items\", 1, 3, 3, 2); __PYX_ERR(0, 37, __pyx_L3_error)",
          "2168:         if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, \"write_items\") < 0)) __PYX_ERR(0, 37, __pyx_L3_error)",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "2182:   }",
          "2183:   goto __pyx_L4_argument_unpacking_done;",
          "2184:   __pyx_L5_argtuple_error:;",
          "2186:   __pyx_L3_error:;",
          "2187:   __Pyx_AddTraceback(\"clickhouse_driver.columns.stringcolumn.ByteString.write_items\", __pyx_clineno, __pyx_lineno, __pyx_filename);",
          "2188:   __Pyx_RefNannyFinishContext();",
          "",
          "[Removed Lines]",
          "2185:   __Pyx_RaiseArgtupleInvalid(\"write_items\", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 39, __pyx_L3_error)",
          "",
          "[Added Lines]",
          "2183:   __Pyx_RaiseArgtupleInvalid(\"write_items\", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 37, __pyx_L3_error)",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "2203:   PyObject *__pyx_t_3 = NULL;",
          "2204:   __Pyx_RefNannySetupContext(\"write_items\", 0);",
          "2214:   __Pyx_GOTREF(__pyx_t_2);",
          "2215:   __pyx_t_3 = NULL;",
          "2216:   if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {",
          "",
          "[Removed Lines]",
          "2213:   __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_buf, __pyx_n_s_write_strings); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 40, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "2211:   __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_buf, __pyx_n_s_write_strings); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 38, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "2224:   }",
          "2225:   __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_v_items) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_items);",
          "2226:   __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;",
          "2228:   __Pyx_GOTREF(__pyx_t_1);",
          "2229:   __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;",
          "2230:   __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;",
          "",
          "[Removed Lines]",
          "2227:   if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 40, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "2225:   if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 38, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "2295:         case  1:",
          "2296:         if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n_items)) != 0)) kw_args--;",
          "2297:         else {",
          "2299:         }",
          "2300:         CYTHON_FALLTHROUGH;",
          "2301:         case  2:",
          "2302:         if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_buf)) != 0)) kw_args--;",
          "2303:         else {",
          "2305:         }",
          "2306:       }",
          "2307:       if (unlikely(kw_args > 0)) {",
          "2309:       }",
          "2310:     } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {",
          "2311:       goto __pyx_L5_argtuple_error;",
          "",
          "[Removed Lines]",
          "2298:           __Pyx_RaiseArgtupleInvalid(\"read_items\", 1, 3, 3, 1); __PYX_ERR(0, 42, __pyx_L3_error)",
          "2304:           __Pyx_RaiseArgtupleInvalid(\"read_items\", 1, 3, 3, 2); __PYX_ERR(0, 42, __pyx_L3_error)",
          "2308:         if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, \"read_items\") < 0)) __PYX_ERR(0, 42, __pyx_L3_error)",
          "",
          "[Added Lines]",
          "2296:           __Pyx_RaiseArgtupleInvalid(\"read_items\", 1, 3, 3, 1); __PYX_ERR(0, 40, __pyx_L3_error)",
          "2302:           __Pyx_RaiseArgtupleInvalid(\"read_items\", 1, 3, 3, 2); __PYX_ERR(0, 40, __pyx_L3_error)",
          "2306:         if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, \"read_items\") < 0)) __PYX_ERR(0, 40, __pyx_L3_error)",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "2320:   }",
          "2321:   goto __pyx_L4_argument_unpacking_done;",
          "2322:   __pyx_L5_argtuple_error:;",
          "2324:   __pyx_L3_error:;",
          "2325:   __Pyx_AddTraceback(\"clickhouse_driver.columns.stringcolumn.ByteString.read_items\", __pyx_clineno, __pyx_lineno, __pyx_filename);",
          "2326:   __Pyx_RefNannyFinishContext();",
          "",
          "[Removed Lines]",
          "2323:   __Pyx_RaiseArgtupleInvalid(\"read_items\", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 42, __pyx_L3_error)",
          "",
          "[Added Lines]",
          "2321:   __Pyx_RaiseArgtupleInvalid(\"read_items\", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 40, __pyx_L3_error)",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "2351:   __Pyx_XDECREF(__pyx_r);",
          "2353:   __Pyx_GOTREF(__pyx_t_2);",
          "2354:   __pyx_t_3 = NULL;",
          "2355:   if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {",
          "",
          "[Removed Lines]",
          "2352:   __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_buf, __pyx_n_s_read_strings); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 43, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "2350:   __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_buf, __pyx_n_s_read_strings); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 41, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "2363:   }",
          "2364:   __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_v_n_items) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_n_items);",
          "2365:   __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;",
          "2367:   __Pyx_GOTREF(__pyx_t_1);",
          "2368:   __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;",
          "2369:   __pyx_r = __pyx_t_1;",
          "2370:   __pyx_t_1 = 0;",
          "2371:   goto __pyx_L0;",
          "",
          "[Removed Lines]",
          "2366:   if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 43, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "2364:   if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 41, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "2434:         case  1:",
          "2435:         if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_length)) != 0)) kw_args--;",
          "2436:         else {",
          "2438:         }",
          "2439:       }",
          "2440:       if (unlikely(kw_args > 0)) {",
          "2442:       }",
          "2443:     } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {",
          "2444:       goto __pyx_L5_argtuple_error;",
          "",
          "[Removed Lines]",
          "2437:           __Pyx_RaiseArgtupleInvalid(\"__init__\", 1, 2, 2, 1); __PYX_ERR(0, 49, __pyx_L3_error)",
          "2441:         if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_kwargs, values, pos_args, \"__init__\") < 0)) __PYX_ERR(0, 49, __pyx_L3_error)",
          "",
          "[Added Lines]",
          "2435:           __Pyx_RaiseArgtupleInvalid(\"__init__\", 1, 2, 2, 1); __PYX_ERR(0, 47, __pyx_L3_error)",
          "2439:         if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_kwargs, values, pos_args, \"__init__\") < 0)) __PYX_ERR(0, 47, __pyx_L3_error)",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "2451:   }",
          "2452:   goto __pyx_L4_argument_unpacking_done;",
          "2453:   __pyx_L5_argtuple_error:;",
          "2455:   __pyx_L3_error:;",
          "2456:   __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;",
          "2457:   __Pyx_AddTraceback(\"clickhouse_driver.columns.stringcolumn.FixedString.__init__\", __pyx_clineno, __pyx_lineno, __pyx_filename);",
          "",
          "[Removed Lines]",
          "2454:   __Pyx_RaiseArgtupleInvalid(\"__init__\", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 49, __pyx_L3_error)",
          "",
          "[Added Lines]",
          "2452:   __Pyx_RaiseArgtupleInvalid(\"__init__\", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 47, __pyx_L3_error)",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "2473:   PyObject *__pyx_t_2 = NULL;",
          "2474:   __Pyx_RefNannySetupContext(\"__init__\", 0);",
          "2493:   __Pyx_GOTREF(__pyx_t_1);",
          "2495:   __Pyx_GOTREF(__pyx_t_2);",
          "2496:   __Pyx_GIVEREF(__pyx_t_1);",
          "2497:   PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);",
          "",
          "[Removed Lines]",
          "2483:   if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_length, __pyx_v_length) < 0) __PYX_ERR(0, 50, __pyx_L1_error)",
          "2492:   __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_FixedString); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 51, __pyx_L1_error)",
          "2494:   __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 51, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "2481:   if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_length, __pyx_v_length) < 0) __PYX_ERR(0, 48, __pyx_L1_error)",
          "2490:   __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_FixedString); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 49, __pyx_L1_error)",
          "2492:   __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 49, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "2499:   __Pyx_GIVEREF(__pyx_v_self);",
          "2500:   PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_self);",
          "2501:   __pyx_t_1 = 0;",
          "2503:   __Pyx_GOTREF(__pyx_t_1);",
          "2504:   __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;",
          "2506:   __Pyx_GOTREF(__pyx_t_2);",
          "2507:   __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;",
          "2509:   __Pyx_GOTREF(__pyx_t_1);",
          "2510:   __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;",
          "2511:   __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;",
          "",
          "[Removed Lines]",
          "2502:   __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_super, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 51, __pyx_L1_error)",
          "2505:   __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_init); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 51, __pyx_L1_error)",
          "2508:   __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_empty_tuple, __pyx_v_kwargs); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 51, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "2500:   __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_super, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 49, __pyx_L1_error)",
          "2503:   __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_init); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 49, __pyx_L1_error)",
          "2506:   __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_empty_tuple, __pyx_v_kwargs); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 49, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "2575:         case  1:",
          "2576:         if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n_items)) != 0)) kw_args--;",
          "2577:         else {",
          "2579:         }",
          "2580:         CYTHON_FALLTHROUGH;",
          "2581:         case  2:",
          "2582:         if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_buf)) != 0)) kw_args--;",
          "2583:         else {",
          "2585:         }",
          "2586:       }",
          "2587:       if (unlikely(kw_args > 0)) {",
          "2589:       }",
          "2590:     } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {",
          "2591:       goto __pyx_L5_argtuple_error;",
          "",
          "[Removed Lines]",
          "2578:           __Pyx_RaiseArgtupleInvalid(\"read_items\", 1, 3, 3, 1); __PYX_ERR(0, 53, __pyx_L3_error)",
          "2584:           __Pyx_RaiseArgtupleInvalid(\"read_items\", 1, 3, 3, 2); __PYX_ERR(0, 53, __pyx_L3_error)",
          "2588:         if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, \"read_items\") < 0)) __PYX_ERR(0, 53, __pyx_L3_error)",
          "",
          "[Added Lines]",
          "2576:           __Pyx_RaiseArgtupleInvalid(\"read_items\", 1, 3, 3, 1); __PYX_ERR(0, 51, __pyx_L3_error)",
          "2582:           __Pyx_RaiseArgtupleInvalid(\"read_items\", 1, 3, 3, 2); __PYX_ERR(0, 51, __pyx_L3_error)",
          "2586:         if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, \"read_items\") < 0)) __PYX_ERR(0, 51, __pyx_L3_error)",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "2595:       values[2] = PyTuple_GET_ITEM(__pyx_args, 2);",
          "2596:     }",
          "2597:     __pyx_v_self = values[0];",
          "2599:     __pyx_v_buf = values[2];",
          "2600:   }",
          "2601:   goto __pyx_L4_argument_unpacking_done;",
          "2602:   __pyx_L5_argtuple_error:;",
          "2604:   __pyx_L3_error:;",
          "2605:   __Pyx_AddTraceback(\"clickhouse_driver.columns.stringcolumn.FixedString.read_items\", __pyx_clineno, __pyx_lineno, __pyx_filename);",
          "2606:   __Pyx_RefNannyFinishContext();",
          "",
          "[Removed Lines]",
          "2598:     __pyx_v_n_items = __Pyx_PyIndex_AsSsize_t(values[1]); if (unlikely((__pyx_v_n_items == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 53, __pyx_L3_error)",
          "2603:   __Pyx_RaiseArgtupleInvalid(\"read_items\", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 53, __pyx_L3_error)",
          "",
          "[Added Lines]",
          "2596:     __pyx_v_n_items = __Pyx_PyIndex_AsSsize_t(values[1]); if (unlikely((__pyx_v_n_items == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 51, __pyx_L3_error)",
          "2601:   __Pyx_RaiseArgtupleInvalid(\"read_items\", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 51, __pyx_L3_error)",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "2642:   int __pyx_t_14;",
          "2643:   __Pyx_RefNannySetupContext(\"read_items\", 0);",
          "2653:   __Pyx_GOTREF(__pyx_t_1);",
          "2655:   __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;",
          "2656:   __pyx_v_length = __pyx_t_2;",
          "2666:   __Pyx_GOTREF(__pyx_t_3);",
          "2668:   __Pyx_GOTREF(__pyx_t_4);",
          "2669:   __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;",
          "2670:   __pyx_t_3 = NULL;",
          "",
          "[Removed Lines]",
          "2652:   __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_length); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 54, __pyx_L1_error)",
          "2654:   __pyx_t_2 = __Pyx_PyIndex_AsSsize_t(__pyx_t_1); if (unlikely((__pyx_t_2 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 54, __pyx_L1_error)",
          "2665:   __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_encoding); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 55, __pyx_L1_error)",
          "2667:   __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_encode); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 55, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "2650:   __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_length); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 52, __pyx_L1_error)",
          "2652:   __pyx_t_2 = __Pyx_PyIndex_AsSsize_t(__pyx_t_1); if (unlikely((__pyx_t_2 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 52, __pyx_L1_error)",
          "2663:   __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_encoding); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 53, __pyx_L1_error)",
          "2665:   __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_encode); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 53, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "2679:   }",
          "2680:   __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_3, __pyx_kp_u_utf_8) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_kp_u_utf_8);",
          "2681:   __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;",
          "2683:   __Pyx_GOTREF(__pyx_t_1);",
          "2684:   __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;",
          "2685:   __pyx_v_encoding = __pyx_t_1;",
          "2686:   __pyx_t_1 = 0;",
          "2696:   __pyx_v_c_encoding = __pyx_t_5;",
          "2706:   __Pyx_GOTREF(__pyx_t_4);",
          "2708:   __Pyx_GOTREF(__pyx_t_3);",
          "2709:   __pyx_t_6 = NULL;",
          "2710:   if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {",
          "",
          "[Removed Lines]",
          "2682:   if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 55, __pyx_L1_error)",
          "2695:   __pyx_t_5 = __Pyx_PyObject_AsWritableString(__pyx_v_encoding); if (unlikely((!__pyx_t_5) && PyErr_Occurred())) __PYX_ERR(0, 56, __pyx_L1_error)",
          "2705:   __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_buf, __pyx_n_s_read); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 57, __pyx_L1_error)",
          "2707:   __pyx_t_3 = PyInt_FromSsize_t((__pyx_v_length * __pyx_v_n_items)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 57, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "2680:   if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 53, __pyx_L1_error)",
          "2693:   __pyx_t_5 = __Pyx_PyObject_AsWritableString(__pyx_v_encoding); if (unlikely((!__pyx_t_5) && PyErr_Occurred())) __PYX_ERR(0, 54, __pyx_L1_error)",
          "2703:   __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_buf, __pyx_n_s_read); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 55, __pyx_L1_error)",
          "2705:   __pyx_t_3 = PyInt_FromSsize_t((__pyx_v_length * __pyx_v_n_items)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 55, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "2719:   __pyx_t_1 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_6, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_3);",
          "2720:   __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;",
          "2721:   __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;",
          "2723:   __Pyx_GOTREF(__pyx_t_1);",
          "2724:   __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;",
          "2725:   __pyx_v_data = __pyx_t_1;",
          "2726:   __pyx_t_1 = 0;",
          "",
          "[Removed Lines]",
          "2722:   if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 57, __pyx_L1_error)",
          "2735:   __pyx_v_data_ptr = PyByteArray_AsString(__pyx_v_data);",
          "",
          "[Added Lines]",
          "2720:   if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 55, __pyx_L1_error)",
          "2733:   __pyx_t_5 = PyBytes_AsString(__pyx_v_data); if (unlikely(__pyx_t_5 == ((char *)NULL))) __PYX_ERR(0, 56, __pyx_L1_error)",
          "2734:   __pyx_v_data_ptr = __pyx_t_5;",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "2753:   __pyx_t_7 = ((!(__pyx_v_c_string != 0)) != 0);",
          "2754:   if (unlikely(__pyx_t_7)) {",
          "",
          "[Removed Lines]",
          "2763:     PyErr_NoMemory(); __PYX_ERR(0, 62, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "2762:     PyErr_NoMemory(); __PYX_ERR(0, 60, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "2781:   (__pyx_v_c_string[__pyx_v_length]) = 0;",
          "2791:   __Pyx_GOTREF(__pyx_t_1);",
          "2792:   __pyx_v_items = ((PyObject*)__pyx_t_1);",
          "2793:   __pyx_t_1 = 0;",
          "",
          "[Removed Lines]",
          "2790:   __pyx_t_1 = PyTuple_New(__pyx_v_n_items); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 65, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "2789:   __pyx_t_1 = PyTuple_New(__pyx_v_n_items); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 63, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "2867:       __Pyx_XGOTREF(__pyx_t_13);",
          "2878:         __Pyx_GOTREF(__pyx_t_1);",
          "2879:         __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_1);",
          "2880:         __pyx_t_1 = 0;",
          "",
          "[Removed Lines]",
          "2877:         __pyx_t_1 = __Pyx_decode_c_string(__pyx_v_c_string, 0, (__pyx_v_j + 1), __pyx_v_c_encoding, NULL, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 75, __pyx_L10_error)",
          "",
          "[Added Lines]",
          "2876:         __pyx_t_1 = __Pyx_decode_c_string(__pyx_v_c_string, 0, (__pyx_v_j + 1), __pyx_v_c_encoding, NULL, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 73, __pyx_L10_error)",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "2907:       __pyx_t_14 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_UnicodeDecodeError);",
          "2908:       if (__pyx_t_14) {",
          "2909:         __Pyx_AddTraceback(\"clickhouse_driver.columns.stringcolumn.FixedString.read_items\", __pyx_clineno, __pyx_lineno, __pyx_filename);",
          "2911:         __Pyx_GOTREF(__pyx_t_1);",
          "2912:         __Pyx_GOTREF(__pyx_t_4);",
          "2913:         __Pyx_GOTREF(__pyx_t_3);",
          "2923:         __Pyx_GOTREF(__pyx_t_6);",
          "2924:         __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_6);",
          "2925:         __pyx_t_6 = 0;",
          "",
          "[Removed Lines]",
          "2910:         if (__Pyx_GetException(&__pyx_t_1, &__pyx_t_4, &__pyx_t_3) < 0) __PYX_ERR(0, 76, __pyx_L12_except_error)",
          "2922:         __pyx_t_6 = PyBytes_FromStringAndSize(__pyx_v_c_string, __pyx_v_length); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 77, __pyx_L12_except_error)",
          "",
          "[Added Lines]",
          "2909:         if (__Pyx_GetException(&__pyx_t_1, &__pyx_t_4, &__pyx_t_3) < 0) __PYX_ERR(0, 74, __pyx_L12_except_error)",
          "2921:         __pyx_t_6 = PyBytes_FromStringAndSize(__pyx_v_c_string, __pyx_v_length); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 75, __pyx_L12_except_error)",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "3060:         case  1:",
          "3061:         if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_items)) != 0)) kw_args--;",
          "3062:         else {",
          "3064:         }",
          "3065:         CYTHON_FALLTHROUGH;",
          "3066:         case  2:",
          "3067:         if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_buf)) != 0)) kw_args--;",
          "3068:         else {",
          "3070:         }",
          "3071:       }",
          "3072:       if (unlikely(kw_args > 0)) {",
          "3074:       }",
          "3075:     } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {",
          "3076:       goto __pyx_L5_argtuple_error;",
          "",
          "[Removed Lines]",
          "3063:           __Pyx_RaiseArgtupleInvalid(\"write_items\", 1, 3, 3, 1); __PYX_ERR(0, 85, __pyx_L3_error)",
          "3069:           __Pyx_RaiseArgtupleInvalid(\"write_items\", 1, 3, 3, 2); __PYX_ERR(0, 85, __pyx_L3_error)",
          "3073:         if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, \"write_items\") < 0)) __PYX_ERR(0, 85, __pyx_L3_error)",
          "",
          "[Added Lines]",
          "3062:           __Pyx_RaiseArgtupleInvalid(\"write_items\", 1, 3, 3, 1); __PYX_ERR(0, 83, __pyx_L3_error)",
          "3068:           __Pyx_RaiseArgtupleInvalid(\"write_items\", 1, 3, 3, 2); __PYX_ERR(0, 83, __pyx_L3_error)",
          "3072:         if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, \"write_items\") < 0)) __PYX_ERR(0, 83, __pyx_L3_error)",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "3085:   }",
          "3086:   goto __pyx_L4_argument_unpacking_done;",
          "3087:   __pyx_L5_argtuple_error:;",
          "3089:   __pyx_L3_error:;",
          "3090:   __Pyx_AddTraceback(\"clickhouse_driver.columns.stringcolumn.FixedString.write_items\", __pyx_clineno, __pyx_lineno, __pyx_filename);",
          "3091:   __Pyx_RefNannyFinishContext();",
          "",
          "[Removed Lines]",
          "3088:   __Pyx_RaiseArgtupleInvalid(\"write_items\", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 85, __pyx_L3_error)",
          "",
          "[Added Lines]",
          "3087:   __Pyx_RaiseArgtupleInvalid(\"write_items\", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 83, __pyx_L3_error)",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "3130:   __pyx_v_buf_pos = 0;",
          "3140:   __Pyx_GOTREF(__pyx_t_1);",
          "3142:   __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;",
          "3143:   __pyx_v_length = __pyx_t_2;",
          "3153:   __pyx_v_items_buf_size = (__pyx_v_length * __pyx_t_2);",
          "3163:   __Pyx_GOTREF(__pyx_t_1);",
          "3164:   __pyx_v_encoding = __pyx_t_1;",
          "3165:   __pyx_t_1 = 0;",
          "",
          "[Removed Lines]",
          "3139:   __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_length); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 87, __pyx_L1_error)",
          "3141:   __pyx_t_2 = __Pyx_PyIndex_AsSsize_t(__pyx_t_1); if (unlikely((__pyx_t_2 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 87, __pyx_L1_error)",
          "3152:   __pyx_t_2 = PyObject_Length(__pyx_v_items); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(0, 88, __pyx_L1_error)",
          "3162:   __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_encoding); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 89, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "3138:   __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_length); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 85, __pyx_L1_error)",
          "3140:   __pyx_t_2 = __Pyx_PyIndex_AsSsize_t(__pyx_t_1); if (unlikely((__pyx_t_2 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 85, __pyx_L1_error)",
          "3151:   __pyx_t_2 = PyObject_Length(__pyx_v_items); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(0, 86, __pyx_L1_error)",
          "3161:   __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_encoding); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 87, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "3183:   __pyx_t_3 = ((!(__pyx_v_items_buf != 0)) != 0);",
          "3184:   if (unlikely(__pyx_t_3)) {",
          "",
          "[Removed Lines]",
          "3193:     PyErr_NoMemory(); __PYX_ERR(0, 94, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "3192:     PyErr_NoMemory(); __PYX_ERR(0, 92, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "3221:     __pyx_t_1 = __pyx_v_items; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;",
          "3222:     __pyx_t_4 = NULL;",
          "3223:   } else {",
          "3225:     __Pyx_GOTREF(__pyx_t_1);",
          "3227:   }",
          "3228:   for (;;) {",
          "3229:     if (likely(!__pyx_t_4)) {",
          "3230:       if (likely(PyList_CheckExact(__pyx_t_1))) {",
          "3231:         if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;",
          "3232:         #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS",
          "3234:         #else",
          "3236:         __Pyx_GOTREF(__pyx_t_5);",
          "3237:         #endif",
          "3238:       } else {",
          "3239:         if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;",
          "3240:         #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS",
          "3242:         #else",
          "3244:         __Pyx_GOTREF(__pyx_t_5);",
          "3245:         #endif",
          "3246:       }",
          "",
          "[Removed Lines]",
          "3224:     __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_items); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 98, __pyx_L1_error)",
          "3226:     __pyx_t_4 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 98, __pyx_L1_error)",
          "3233:         __pyx_t_5 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_5); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 98, __pyx_L1_error)",
          "3235:         __pyx_t_5 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 98, __pyx_L1_error)",
          "3241:         __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_5); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 98, __pyx_L1_error)",
          "3243:         __pyx_t_5 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 98, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "3223:     __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_items); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 96, __pyx_L1_error)",
          "3225:     __pyx_t_4 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 96, __pyx_L1_error)",
          "3232:         __pyx_t_5 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_5); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 96, __pyx_L1_error)",
          "3234:         __pyx_t_5 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 96, __pyx_L1_error)",
          "3240:         __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_5); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 96, __pyx_L1_error)",
          "3242:         __pyx_t_5 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 96, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "3250:         PyObject* exc_type = PyErr_Occurred();",
          "3251:         if (exc_type) {",
          "3252:           if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();",
          "3254:         }",
          "3255:         break;",
          "3256:       }",
          "",
          "[Removed Lines]",
          "3253:           else __PYX_ERR(0, 98, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "3252:           else __PYX_ERR(0, 96, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "3269:     __pyx_t_3 = ((!(PyBytes_Check(__pyx_v_value) != 0)) != 0);",
          "3270:     if (__pyx_t_3) {",
          "3280:       __Pyx_GOTREF(__pyx_t_6);",
          "3281:       __pyx_t_7 = NULL;",
          "3282:       if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {",
          "",
          "[Removed Lines]",
          "3279:       __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_value, __pyx_n_s_encode); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 100, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "3278:       __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_value, __pyx_n_s_encode); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 98, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "3290:       }",
          "3291:       __pyx_t_5 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_7, __pyx_v_encoding) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_v_encoding);",
          "3292:       __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;",
          "3294:       __Pyx_GOTREF(__pyx_t_5);",
          "3295:       __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;",
          "3296:       __Pyx_DECREF_SET(__pyx_v_value, __pyx_t_5);",
          "3297:       __pyx_t_5 = 0;",
          "",
          "[Removed Lines]",
          "3293:       if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 100, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "3292:       if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 98, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "3306:     }",
          "3316:     __pyx_v_value_len = __pyx_t_8;",
          "",
          "[Removed Lines]",
          "3315:     __pyx_t_8 = PyObject_Length(__pyx_v_value); if (unlikely(__pyx_t_8 == ((Py_ssize_t)-1))) __PYX_ERR(0, 102, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "3314:     __pyx_t_8 = PyObject_Length(__pyx_v_value); if (unlikely(__pyx_t_8 == ((Py_ssize_t)-1))) __PYX_ERR(0, 100, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "3325:     __pyx_t_3 = ((__pyx_v_length < __pyx_v_value_len) != 0);",
          "3326:     if (unlikely(__pyx_t_3)) {",
          "3336:       __Pyx_GOTREF(__pyx_t_6);",
          "3338:       __Pyx_GOTREF(__pyx_t_7);",
          "3339:       __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;",
          "3340:       __pyx_t_6 = NULL;",
          "",
          "[Removed Lines]",
          "3335:       __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_errors); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 104, __pyx_L1_error)",
          "3337:       __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_TooLargeStringSize); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 104, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "3334:       __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_errors); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 102, __pyx_L1_error)",
          "3336:       __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_TooLargeStringSize); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 102, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "3349:       }",
          "3350:       __pyx_t_5 = (__pyx_t_6) ? __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_6) : __Pyx_PyObject_CallNoArg(__pyx_t_7);",
          "3351:       __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;",
          "3353:       __Pyx_GOTREF(__pyx_t_5);",
          "3354:       __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;",
          "3355:       __Pyx_Raise(__pyx_t_5, 0, 0, 0);",
          "3356:       __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;",
          "",
          "[Removed Lines]",
          "3352:       if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 104, __pyx_L1_error)",
          "3357:       __PYX_ERR(0, 104, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "3351:       if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 102, __pyx_L1_error)",
          "3356:       __PYX_ERR(0, 102, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "3366:     }",
          "3376:     __pyx_v_c_value = __pyx_t_9;",
          "",
          "[Removed Lines]",
          "3375:     __pyx_t_9 = PyBytes_AsString(__pyx_v_value); if (unlikely(__pyx_t_9 == ((char *)NULL))) __PYX_ERR(0, 106, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "3374:     __pyx_t_9 = PyBytes_AsString(__pyx_v_value); if (unlikely(__pyx_t_9 == ((char *)NULL))) __PYX_ERR(0, 104, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "3403:   }",
          "3404:   __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;",
          "3414:   __Pyx_GOTREF(__pyx_t_5);",
          "3416:   __Pyx_GOTREF(__pyx_t_7);",
          "3417:   __pyx_t_6 = NULL;",
          "3418:   if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {",
          "",
          "[Removed Lines]",
          "3413:   __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_buf, __pyx_n_s_write); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 111, __pyx_L1_error)",
          "3415:   __pyx_t_7 = PyBytes_FromStringAndSize(__pyx_v_items_buf, __pyx_v_items_buf_size); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 111, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "3412:   __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_buf, __pyx_n_s_write); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 109, __pyx_L1_error)",
          "3414:   __pyx_t_7 = PyBytes_FromStringAndSize(__pyx_v_items_buf, __pyx_v_items_buf_size); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 109, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "3427:   __pyx_t_1 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_6, __pyx_t_7) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_7);",
          "3428:   __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;",
          "3429:   __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;",
          "3431:   __Pyx_GOTREF(__pyx_t_1);",
          "3432:   __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;",
          "3433:   __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;",
          "",
          "[Removed Lines]",
          "3430:   if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 111, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "3429:   if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 109, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "3510:         case  1:",
          "3511:         if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n_items)) != 0)) kw_args--;",
          "3512:         else {",
          "3514:         }",
          "3515:         CYTHON_FALLTHROUGH;",
          "3516:         case  2:",
          "3517:         if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_buf)) != 0)) kw_args--;",
          "3518:         else {",
          "3520:         }",
          "3521:       }",
          "3522:       if (unlikely(kw_args > 0)) {",
          "3524:       }",
          "3525:     } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {",
          "3526:       goto __pyx_L5_argtuple_error;",
          "",
          "[Removed Lines]",
          "3513:           __Pyx_RaiseArgtupleInvalid(\"read_items\", 1, 3, 3, 1); __PYX_ERR(0, 120, __pyx_L3_error)",
          "3519:           __Pyx_RaiseArgtupleInvalid(\"read_items\", 1, 3, 3, 2); __PYX_ERR(0, 120, __pyx_L3_error)",
          "3523:         if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, \"read_items\") < 0)) __PYX_ERR(0, 120, __pyx_L3_error)",
          "",
          "[Added Lines]",
          "3512:           __Pyx_RaiseArgtupleInvalid(\"read_items\", 1, 3, 3, 1); __PYX_ERR(0, 118, __pyx_L3_error)",
          "3518:           __Pyx_RaiseArgtupleInvalid(\"read_items\", 1, 3, 3, 2); __PYX_ERR(0, 118, __pyx_L3_error)",
          "3522:         if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, \"read_items\") < 0)) __PYX_ERR(0, 118, __pyx_L3_error)",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "3530:       values[2] = PyTuple_GET_ITEM(__pyx_args, 2);",
          "3531:     }",
          "3532:     __pyx_v_self = values[0];",
          "3534:     __pyx_v_buf = values[2];",
          "3535:   }",
          "3536:   goto __pyx_L4_argument_unpacking_done;",
          "3537:   __pyx_L5_argtuple_error:;",
          "3539:   __pyx_L3_error:;",
          "3540:   __Pyx_AddTraceback(\"clickhouse_driver.columns.stringcolumn.ByteFixedString.read_items\", __pyx_clineno, __pyx_lineno, __pyx_filename);",
          "3541:   __Pyx_RefNannyFinishContext();",
          "",
          "[Removed Lines]",
          "3533:     __pyx_v_n_items = __Pyx_PyIndex_AsSsize_t(values[1]); if (unlikely((__pyx_v_n_items == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 120, __pyx_L3_error)",
          "3538:   __Pyx_RaiseArgtupleInvalid(\"read_items\", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 120, __pyx_L3_error)",
          "",
          "[Added Lines]",
          "3532:     __pyx_v_n_items = __Pyx_PyIndex_AsSsize_t(values[1]); if (unlikely((__pyx_v_n_items == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 118, __pyx_L3_error)",
          "3537:   __Pyx_RaiseArgtupleInvalid(\"read_items\", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 118, __pyx_L3_error)",
          "",
          "---------------",
          "--- Hunk 49 ---",
          "[Context before]",
          "3562:   PyObject *__pyx_t_3 = NULL;",
          "3563:   PyObject *__pyx_t_4 = NULL;",
          "3564:   PyObject *__pyx_t_5 = NULL;",
          "3566:   Py_ssize_t __pyx_t_7;",
          "3567:   __Pyx_RefNannySetupContext(\"read_items\", 0);",
          "3577:   __Pyx_GOTREF(__pyx_t_1);",
          "3579:   __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;",
          "3580:   __pyx_v_length = __pyx_t_2;",
          "3590:   __Pyx_GOTREF(__pyx_t_3);",
          "3592:   __Pyx_GOTREF(__pyx_t_4);",
          "3593:   __pyx_t_5 = NULL;",
          "3594:   if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {",
          "",
          "[Removed Lines]",
          "3565:   Py_ssize_t __pyx_t_6;",
          "3576:   __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_length); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 122, __pyx_L1_error)",
          "3578:   __pyx_t_2 = __Pyx_PyIndex_AsSsize_t(__pyx_t_1); if (unlikely((__pyx_t_2 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 122, __pyx_L1_error)",
          "3589:   __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_buf, __pyx_n_s_read); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 123, __pyx_L1_error)",
          "3591:   __pyx_t_4 = PyInt_FromSsize_t((__pyx_v_length * __pyx_v_n_items)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 123, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "3564:   char *__pyx_t_6;",
          "3566:   Py_ssize_t __pyx_t_8;",
          "3576:   __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_length); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 120, __pyx_L1_error)",
          "3578:   __pyx_t_2 = __Pyx_PyIndex_AsSsize_t(__pyx_t_1); if (unlikely((__pyx_t_2 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 120, __pyx_L1_error)",
          "3589:   __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_buf, __pyx_n_s_read); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 121, __pyx_L1_error)",
          "3591:   __pyx_t_4 = PyInt_FromSsize_t((__pyx_v_length * __pyx_v_n_items)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 121, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 50 ---",
          "[Context before]",
          "3603:   __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4);",
          "3604:   __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;",
          "3605:   __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;",
          "3607:   __Pyx_GOTREF(__pyx_t_1);",
          "3608:   __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;",
          "3609:   __pyx_v_data = __pyx_t_1;",
          "3610:   __pyx_t_1 = 0;",
          "3629:   __Pyx_GOTREF(__pyx_t_1);",
          "3630:   __pyx_v_items = ((PyObject*)__pyx_t_1);",
          "3631:   __pyx_t_1 = 0;",
          "",
          "[Removed Lines]",
          "3606:   if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 123, __pyx_L1_error)",
          "3619:   __pyx_v_data_ptr = PyByteArray_AsString(__pyx_v_data);",
          "3628:   __pyx_t_1 = PyTuple_New(__pyx_v_n_items); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 126, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "3606:   if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 121, __pyx_L1_error)",
          "3619:   __pyx_t_6 = PyBytes_AsString(__pyx_v_data); if (unlikely(__pyx_t_6 == ((char *)NULL))) __PYX_ERR(0, 122, __pyx_L1_error)",
          "3620:   __pyx_v_data_ptr = __pyx_t_6;",
          "3629:   __pyx_t_1 = PyTuple_New(__pyx_v_n_items); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 124, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 51 ---",
          "[Context before]",
          "3640:   __pyx_t_2 = __pyx_v_n_items;",
          "3653:     __Pyx_GOTREF(__pyx_t_1);",
          "3654:     __Pyx_XDECREF_SET(__pyx_v_item, ((PyObject*)__pyx_t_1));",
          "3655:     __pyx_t_1 = 0;",
          "3664:     Py_INCREF(__pyx_v_item);",
          "3673:     PyTuple_SET_ITEM(__pyx_v_items, __pyx_v_i, __pyx_v_item);",
          "3674:   }",
          "",
          "[Removed Lines]",
          "3641:   __pyx_t_6 = __pyx_t_2;",
          "3642:   for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_6; __pyx_t_7+=1) {",
          "3643:     __pyx_v_i = __pyx_t_7;",
          "3652:     __pyx_t_1 = PyBytes_FromStringAndSize((&(__pyx_v_data_ptr[(__pyx_v_i * __pyx_v_length)])), __pyx_v_length); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 128, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "3642:   __pyx_t_7 = __pyx_t_2;",
          "3643:   for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=1) {",
          "3644:     __pyx_v_i = __pyx_t_8;",
          "3653:     __pyx_t_1 = PyBytes_FromStringAndSize((&(__pyx_v_data_ptr[(__pyx_v_i * __pyx_v_length)])), __pyx_v_length); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 126, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 52 ---",
          "[Context before]",
          "3753:         case  1:",
          "3754:         if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_items)) != 0)) kw_args--;",
          "3755:         else {",
          "3757:         }",
          "3758:         CYTHON_FALLTHROUGH;",
          "3759:         case  2:",
          "3760:         if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_buf)) != 0)) kw_args--;",
          "3761:         else {",
          "3763:         }",
          "3764:       }",
          "3765:       if (unlikely(kw_args > 0)) {",
          "3767:       }",
          "3768:     } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {",
          "3769:       goto __pyx_L5_argtuple_error;",
          "",
          "[Removed Lines]",
          "3756:           __Pyx_RaiseArgtupleInvalid(\"write_items\", 1, 3, 3, 1); __PYX_ERR(0, 134, __pyx_L3_error)",
          "3762:           __Pyx_RaiseArgtupleInvalid(\"write_items\", 1, 3, 3, 2); __PYX_ERR(0, 134, __pyx_L3_error)",
          "3766:         if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, \"write_items\") < 0)) __PYX_ERR(0, 134, __pyx_L3_error)",
          "",
          "[Added Lines]",
          "3757:           __Pyx_RaiseArgtupleInvalid(\"write_items\", 1, 3, 3, 1); __PYX_ERR(0, 131, __pyx_L3_error)",
          "3763:           __Pyx_RaiseArgtupleInvalid(\"write_items\", 1, 3, 3, 2); __PYX_ERR(0, 131, __pyx_L3_error)",
          "3767:         if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, \"write_items\") < 0)) __PYX_ERR(0, 131, __pyx_L3_error)",
          "",
          "---------------",
          "--- Hunk 53 ---",
          "[Context before]",
          "3778:   }",
          "3779:   goto __pyx_L4_argument_unpacking_done;",
          "3780:   __pyx_L5_argtuple_error:;",
          "3782:   __pyx_L3_error:;",
          "3783:   __Pyx_AddTraceback(\"clickhouse_driver.columns.stringcolumn.ByteFixedString.write_items\", __pyx_clineno, __pyx_lineno, __pyx_filename);",
          "3784:   __Pyx_RefNannyFinishContext();",
          "",
          "[Removed Lines]",
          "3781:   __Pyx_RaiseArgtupleInvalid(\"write_items\", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 134, __pyx_L3_error)",
          "",
          "[Added Lines]",
          "3782:   __Pyx_RaiseArgtupleInvalid(\"write_items\", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 131, __pyx_L3_error)",
          "",
          "---------------",
          "--- Hunk 54 ---",
          "[Context before]",
          "3822:   __pyx_v_buf_pos = 0;",
          "3832:   __Pyx_GOTREF(__pyx_t_1);",
          "3834:   __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;",
          "3835:   __pyx_v_length = __pyx_t_2;",
          "3845:   __pyx_v_items_buf_size = (__pyx_v_length * __pyx_t_2);",
          "",
          "[Removed Lines]",
          "3831:   __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_length); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 136, __pyx_L1_error)",
          "3833:   __pyx_t_2 = __Pyx_PyIndex_AsSsize_t(__pyx_t_1); if (unlikely((__pyx_t_2 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 136, __pyx_L1_error)",
          "3844:   __pyx_t_2 = PyObject_Length(__pyx_v_items); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(0, 137, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "3832:   __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_length); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 133, __pyx_L1_error)",
          "3834:   __pyx_t_2 = __Pyx_PyIndex_AsSsize_t(__pyx_t_1); if (unlikely((__pyx_t_2 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 133, __pyx_L1_error)",
          "3845:   __pyx_t_2 = PyObject_Length(__pyx_v_items); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(0, 134, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 55 ---",
          "[Context before]",
          "3863:   __pyx_t_3 = ((!(__pyx_v_items_buf != 0)) != 0);",
          "3864:   if (unlikely(__pyx_t_3)) {",
          "",
          "[Removed Lines]",
          "3873:     PyErr_NoMemory(); __PYX_ERR(0, 142, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "3874:     PyErr_NoMemory(); __PYX_ERR(0, 139, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 56 ---",
          "[Context before]",
          "3901:     __pyx_t_1 = __pyx_v_items; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;",
          "3902:     __pyx_t_4 = NULL;",
          "3903:   } else {",
          "3905:     __Pyx_GOTREF(__pyx_t_1);",
          "3907:   }",
          "3908:   for (;;) {",
          "3909:     if (likely(!__pyx_t_4)) {",
          "3910:       if (likely(PyList_CheckExact(__pyx_t_1))) {",
          "3911:         if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;",
          "3912:         #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS",
          "3914:         #else",
          "3916:         __Pyx_GOTREF(__pyx_t_5);",
          "3917:         #endif",
          "3918:       } else {",
          "3919:         if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;",
          "3920:         #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS",
          "3922:         #else",
          "3924:         __Pyx_GOTREF(__pyx_t_5);",
          "3925:         #endif",
          "3926:       }",
          "",
          "[Removed Lines]",
          "3904:     __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_items); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 146, __pyx_L1_error)",
          "3906:     __pyx_t_4 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 146, __pyx_L1_error)",
          "3913:         __pyx_t_5 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_5); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 146, __pyx_L1_error)",
          "3915:         __pyx_t_5 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 146, __pyx_L1_error)",
          "3921:         __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_5); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 146, __pyx_L1_error)",
          "3923:         __pyx_t_5 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 146, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "3905:     __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_items); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 143, __pyx_L1_error)",
          "3907:     __pyx_t_4 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 143, __pyx_L1_error)",
          "3914:         __pyx_t_5 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_5); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 143, __pyx_L1_error)",
          "3916:         __pyx_t_5 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 143, __pyx_L1_error)",
          "3922:         __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_5); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 143, __pyx_L1_error)",
          "3924:         __pyx_t_5 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 143, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 57 ---",
          "[Context before]",
          "3930:         PyObject* exc_type = PyErr_Occurred();",
          "3931:         if (exc_type) {",
          "3932:           if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();",
          "3934:         }",
          "3935:         break;",
          "3936:       }",
          "",
          "[Removed Lines]",
          "3933:           else __PYX_ERR(0, 146, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "3934:           else __PYX_ERR(0, 143, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 58 ---",
          "[Context before]",
          "3939:     __Pyx_XDECREF_SET(__pyx_v_value, __pyx_t_5);",
          "3940:     __pyx_t_5 = 0;",
          "3950:     __pyx_v_value_len = __pyx_t_6;",
          "",
          "[Removed Lines]",
          "3949:     __pyx_t_6 = PyObject_Length(__pyx_v_value); if (unlikely(__pyx_t_6 == ((Py_ssize_t)-1))) __PYX_ERR(0, 147, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "3950:     __pyx_t_6 = PyObject_Length(__pyx_v_value); if (unlikely(__pyx_t_6 == ((Py_ssize_t)-1))) __PYX_ERR(0, 144, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 59 ---",
          "[Context before]",
          "3959:     __pyx_t_3 = ((__pyx_v_length < __pyx_v_value_len) != 0);",
          "3960:     if (unlikely(__pyx_t_3)) {",
          "3970:       __Pyx_GOTREF(__pyx_t_7);",
          "3972:       __Pyx_GOTREF(__pyx_t_8);",
          "3973:       __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;",
          "3974:       __pyx_t_7 = NULL;",
          "",
          "[Removed Lines]",
          "3969:       __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_errors); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 149, __pyx_L1_error)",
          "3971:       __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_TooLargeStringSize); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 149, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "3970:       __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_errors); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 146, __pyx_L1_error)",
          "3972:       __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_TooLargeStringSize); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 146, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 60 ---",
          "[Context before]",
          "3983:       }",
          "3984:       __pyx_t_5 = (__pyx_t_7) ? __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_7) : __Pyx_PyObject_CallNoArg(__pyx_t_8);",
          "3985:       __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;",
          "3987:       __Pyx_GOTREF(__pyx_t_5);",
          "3988:       __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;",
          "3989:       __Pyx_Raise(__pyx_t_5, 0, 0, 0);",
          "3990:       __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;",
          "",
          "[Removed Lines]",
          "3986:       if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 149, __pyx_L1_error)",
          "3991:       __PYX_ERR(0, 149, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "3987:       if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 146, __pyx_L1_error)",
          "3992:       __PYX_ERR(0, 146, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 61 ---",
          "[Context before]",
          "4000:     }",
          "",
          "[Removed Lines]",
          "4009:     __pyx_t_3 = (PyBytes_Check(__pyx_v_value) != 0);",
          "4010:     if (__pyx_t_3) {",
          "4019:       __pyx_t_9 = PyBytes_AsString(__pyx_v_value); if (unlikely(__pyx_t_9 == ((char *)NULL))) __PYX_ERR(0, 152, __pyx_L1_error)",
          "4020:       __pyx_v_c_value = __pyx_t_9;",
          "4029:       goto __pyx_L7;",
          "4030:     }",
          "4040:       __pyx_v_c_value = PyByteArray_AsString(__pyx_v_value);",
          "4041:     }",
          "4042:     __pyx_L7:;",
          "",
          "[Added Lines]",
          "4010:     __pyx_t_9 = PyBytes_AsString(__pyx_v_value); if (unlikely(__pyx_t_9 == ((char *)NULL))) __PYX_ERR(0, 148, __pyx_L1_error)",
          "4011:     __pyx_v_c_value = __pyx_t_9;",
          "",
          "---------------",
          "--- Hunk 62 ---",
          "[Context before]",
          "4069:   }",
          "4070:   __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;",
          "4080:   __Pyx_GOTREF(__pyx_t_5);",
          "4082:   __Pyx_GOTREF(__pyx_t_8);",
          "4083:   __pyx_t_7 = NULL;",
          "4084:   if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {",
          "",
          "[Removed Lines]",
          "4079:   __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_buf, __pyx_n_s_write); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 159, __pyx_L1_error)",
          "4081:   __pyx_t_8 = PyBytes_FromStringAndSize(__pyx_v_items_buf, __pyx_v_items_buf_size); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 159, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "4048:   __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_buf, __pyx_n_s_write); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 153, __pyx_L1_error)",
          "4050:   __pyx_t_8 = PyBytes_FromStringAndSize(__pyx_v_items_buf, __pyx_v_items_buf_size); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 153, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 63 ---",
          "[Context before]",
          "4093:   __pyx_t_1 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_7, __pyx_t_8) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_8);",
          "4094:   __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;",
          "4095:   __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;",
          "4097:   __Pyx_GOTREF(__pyx_t_1);",
          "4098:   __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;",
          "4099:   __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;",
          "",
          "[Removed Lines]",
          "4096:   if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 159, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "4065:   if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 153, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 64 ---",
          "[Context before]",
          "4172:         case  1:",
          "4173:         if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_column_options)) != 0)) kw_args--;",
          "4174:         else {",
          "4176:         }",
          "4177:       }",
          "4178:       if (unlikely(kw_args > 0)) {",
          "4180:       }",
          "4181:     } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {",
          "4182:       goto __pyx_L5_argtuple_error;",
          "",
          "[Removed Lines]",
          "4175:           __Pyx_RaiseArgtupleInvalid(\"create_string_column\", 1, 2, 2, 1); __PYX_ERR(0, 164, __pyx_L3_error)",
          "4179:         if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, \"create_string_column\") < 0)) __PYX_ERR(0, 164, __pyx_L3_error)",
          "",
          "[Added Lines]",
          "4144:           __Pyx_RaiseArgtupleInvalid(\"create_string_column\", 1, 2, 2, 1); __PYX_ERR(0, 158, __pyx_L3_error)",
          "4148:         if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, \"create_string_column\") < 0)) __PYX_ERR(0, 158, __pyx_L3_error)",
          "",
          "---------------",
          "--- Hunk 65 ---",
          "[Context before]",
          "4189:   }",
          "4190:   goto __pyx_L4_argument_unpacking_done;",
          "4191:   __pyx_L5_argtuple_error:;",
          "4193:   __pyx_L3_error:;",
          "4194:   __Pyx_AddTraceback(\"clickhouse_driver.columns.stringcolumn.create_string_column\", __pyx_clineno, __pyx_lineno, __pyx_filename);",
          "4195:   __Pyx_RefNannyFinishContext();",
          "",
          "[Removed Lines]",
          "4192:   __Pyx_RaiseArgtupleInvalid(\"create_string_column\", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 164, __pyx_L3_error)",
          "",
          "[Added Lines]",
          "4161:   __Pyx_RaiseArgtupleInvalid(\"create_string_column\", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 158, __pyx_L3_error)",
          "",
          "---------------",
          "--- Hunk 66 ---",
          "[Context before]",
          "4219:   int __pyx_t_7;",
          "4220:   __Pyx_RefNannySetupContext(\"create_string_column\", 0);",
          "4230:   __Pyx_GOTREF(__pyx_t_1);",
          "4232:   __Pyx_GOTREF(__pyx_t_2);",
          "4233:   __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;",
          "4234:   __pyx_v_client_settings = __pyx_t_2;",
          "4235:   __pyx_t_2 = 0;",
          "4245:   __Pyx_GOTREF(__pyx_t_2);",
          "4246:   __pyx_v_strings_as_bytes = __pyx_t_2;",
          "4247:   __pyx_t_2 = 0;",
          "4257:   __Pyx_GOTREF(__pyx_t_1);",
          "4259:   __Pyx_GOTREF(__pyx_t_3);",
          "4261:   __Pyx_GOTREF(__pyx_t_4);",
          "4262:   __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;",
          "4263:   __pyx_t_3 = NULL;",
          "",
          "[Removed Lines]",
          "4229:   __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_v_column_options, __pyx_n_u_context); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 165, __pyx_L1_error)",
          "4231:   __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_client_settings); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 165, __pyx_L1_error)",
          "4244:   __pyx_t_2 = __Pyx_PyObject_Dict_GetItem(__pyx_v_client_settings, __pyx_n_u_strings_as_bytes); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 166, __pyx_L1_error)",
          "4256:   __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_client_settings, __pyx_n_s_get); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 167, __pyx_L1_error)",
          "4258:   __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_String); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 167, __pyx_L1_error)",
          "4260:   __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_default_encoding); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 167, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "4198:   __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_v_column_options, __pyx_n_u_context); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 159, __pyx_L1_error)",
          "4200:   __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_client_settings); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 159, __pyx_L1_error)",
          "4213:   __pyx_t_2 = __Pyx_PyObject_Dict_GetItem(__pyx_v_client_settings, __pyx_n_u_strings_as_bytes); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 160, __pyx_L1_error)",
          "4225:   __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_client_settings, __pyx_n_s_get); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 161, __pyx_L1_error)",
          "4227:   __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_String); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 161, __pyx_L1_error)",
          "4229:   __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_default_encoding); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 161, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 67 ---",
          "[Context before]",
          "4275:   #if CYTHON_FAST_PYCALL",
          "4276:   if (PyFunction_Check(__pyx_t_1)) {",
          "4277:     PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_n_u_strings_encoding, __pyx_t_4};",
          "4279:     __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;",
          "4280:     __Pyx_GOTREF(__pyx_t_2);",
          "4281:     __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;",
          "",
          "[Removed Lines]",
          "4278:     __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 167, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "4247:     __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 161, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 68 ---",
          "[Context before]",
          "4284:   #if CYTHON_FAST_PYCCALL",
          "4285:   if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {",
          "4286:     PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_n_u_strings_encoding, __pyx_t_4};",
          "4288:     __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;",
          "4289:     __Pyx_GOTREF(__pyx_t_2);",
          "4290:     __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;",
          "4291:   } else",
          "4292:   #endif",
          "4293:   {",
          "4295:     __Pyx_GOTREF(__pyx_t_6);",
          "4296:     if (__pyx_t_3) {",
          "4297:       __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_3); __pyx_t_3 = NULL;",
          "",
          "[Removed Lines]",
          "4287:     __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 167, __pyx_L1_error)",
          "4294:     __pyx_t_6 = PyTuple_New(2+__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 167, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "4256:     __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 161, __pyx_L1_error)",
          "4263:     __pyx_t_6 = PyTuple_New(2+__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 161, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 69 ---",
          "[Context before]",
          "4302:     __Pyx_GIVEREF(__pyx_t_4);",
          "4303:     PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_5, __pyx_t_4);",
          "4304:     __pyx_t_4 = 0;",
          "4306:     __Pyx_GOTREF(__pyx_t_2);",
          "4307:     __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;",
          "4308:   }",
          "",
          "[Removed Lines]",
          "4305:     __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 167, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "4274:     __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 161, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 70 ---",
          "[Context before]",
          "4310:   __pyx_v_encoding = __pyx_t_2;",
          "4311:   __pyx_t_2 = 0;",
          "4321:   if (__pyx_t_7) {",
          "4331:     if (__pyx_t_7) {",
          "4333:       __Pyx_GOTREF(__pyx_t_1);",
          "4334:       __pyx_t_2 = __pyx_t_1;",
          "4335:       __pyx_t_1 = 0;",
          "4336:     } else {",
          "4338:       __Pyx_GOTREF(__pyx_t_1);",
          "4339:       __pyx_t_2 = __pyx_t_1;",
          "4340:       __pyx_t_1 = 0;",
          "",
          "[Removed Lines]",
          "4320:   __pyx_t_7 = (__Pyx_PyUnicode_Equals(__pyx_v_spec, __pyx_n_u_String, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 169, __pyx_L1_error)",
          "4330:     __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_v_strings_as_bytes); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 170, __pyx_L1_error)",
          "4332:       __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_ByteString); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 170, __pyx_L1_error)",
          "4337:       __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_String); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 170, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "4289:   __pyx_t_7 = (__Pyx_PyUnicode_Equals(__pyx_v_spec, __pyx_n_u_String, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 163, __pyx_L1_error)",
          "4299:     __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_v_strings_as_bytes); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 164, __pyx_L1_error)",
          "4301:       __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_ByteString); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 164, __pyx_L1_error)",
          "4306:       __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_String); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 164, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 71 ---",
          "[Context before]",
          "4352:     __Pyx_XDECREF(__pyx_r);",
          "4354:     __Pyx_GOTREF(__pyx_t_1);",
          "4356:     __pyx_t_2 = __pyx_t_1;",
          "4357:     __pyx_t_1 = 0;",
          "4358:     if (unlikely(__pyx_v_column_options == Py_None)) {",
          "4359:       PyErr_SetString(PyExc_TypeError, \"argument after ** must be a mapping, not NoneType\");",
          "4361:     }",
          "4364:     __Pyx_GOTREF(__pyx_t_1);",
          "4365:     __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;",
          "4366:     __pyx_r = __pyx_t_1;",
          "4367:     __pyx_t_1 = 0;",
          "4368:     goto __pyx_L0;",
          "",
          "[Removed Lines]",
          "4353:     __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 171, __pyx_L1_error)",
          "4355:     if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_encoding, __pyx_v_encoding) < 0) __PYX_ERR(0, 171, __pyx_L1_error)",
          "4360:       __PYX_ERR(0, 171, __pyx_L1_error)",
          "4362:     if (__Pyx_MergeKeywords(__pyx_t_2, __pyx_v_column_options) < 0) __PYX_ERR(0, 171, __pyx_L1_error)",
          "4363:     __pyx_t_1 = __Pyx_PyObject_Call(__pyx_v_cls, __pyx_empty_tuple, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 171, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "4322:     __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 165, __pyx_L1_error)",
          "4324:     if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_encoding, __pyx_v_encoding) < 0) __PYX_ERR(0, 165, __pyx_L1_error)",
          "4329:       __PYX_ERR(0, 165, __pyx_L1_error)",
          "4331:     if (__Pyx_MergeKeywords(__pyx_t_2, __pyx_v_column_options) < 0) __PYX_ERR(0, 165, __pyx_L1_error)",
          "4332:     __pyx_t_1 = __Pyx_PyObject_Call(__pyx_v_cls, __pyx_empty_tuple, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 165, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 72 ---",
          "[Context before]",
          "4388:     __Pyx_GOTREF(__pyx_t_1);",
          "4390:     __Pyx_GOTREF(__pyx_t_2);",
          "4391:     __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;",
          "4392:     __pyx_v_length = __pyx_t_2;",
          "4393:     __pyx_t_2 = 0;",
          "4402:     if (__pyx_t_7) {",
          "4404:       __Pyx_GOTREF(__pyx_t_1);",
          "4405:       __pyx_t_2 = __pyx_t_1;",
          "4406:       __pyx_t_1 = 0;",
          "4407:     } else {",
          "4409:       __Pyx_GOTREF(__pyx_t_1);",
          "4410:       __pyx_t_2 = __pyx_t_1;",
          "4411:       __pyx_t_1 = 0;",
          "",
          "[Removed Lines]",
          "4387:     __pyx_t_1 = __Pyx_PyObject_GetSlice(__pyx_v_spec, 12, -1L, NULL, NULL, &__pyx_slice_, 1, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 173, __pyx_L1_error)",
          "4389:     __pyx_t_2 = __Pyx_PyNumber_Int(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 173, __pyx_L1_error)",
          "4401:     __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_v_strings_as_bytes); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 174, __pyx_L1_error)",
          "4403:       __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_ByteFixedString); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 174, __pyx_L1_error)",
          "4408:       __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_FixedString); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 174, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "4356:     __pyx_t_1 = __Pyx_PyObject_GetSlice(__pyx_v_spec, 12, -1L, NULL, NULL, &__pyx_slice_, 1, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 167, __pyx_L1_error)",
          "4358:     __pyx_t_2 = __Pyx_PyNumber_Int(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 167, __pyx_L1_error)",
          "4370:     __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_v_strings_as_bytes); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 168, __pyx_L1_error)",
          "4372:       __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_ByteFixedString); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 168, __pyx_L1_error)",
          "4377:       __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_FixedString); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 168, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 73 ---",
          "[Context before]",
          "4413:     __pyx_v_cls = __pyx_t_2;",
          "4414:     __pyx_t_2 = 0;",
          "4421:     __Pyx_XDECREF(__pyx_r);",
          "4423:     __Pyx_GOTREF(__pyx_t_2);",
          "4424:     __Pyx_INCREF(__pyx_v_length);",
          "4425:     __Pyx_GIVEREF(__pyx_v_length);",
          "4426:     PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_length);",
          "4428:     __Pyx_GOTREF(__pyx_t_6);",
          "4430:     __pyx_t_1 = __pyx_t_6;",
          "4431:     __pyx_t_6 = 0;",
          "4432:     if (unlikely(__pyx_v_column_options == Py_None)) {",
          "4433:       PyErr_SetString(PyExc_TypeError, \"argument after ** must be a mapping, not NoneType\");",
          "4435:     }",
          "4438:     __Pyx_GOTREF(__pyx_t_6);",
          "4439:     __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;",
          "4440:     __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;",
          "",
          "[Removed Lines]",
          "4422:     __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 175, __pyx_L1_error)",
          "4427:     __pyx_t_6 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 175, __pyx_L1_error)",
          "4429:     if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_encoding, __pyx_v_encoding) < 0) __PYX_ERR(0, 175, __pyx_L1_error)",
          "4434:       __PYX_ERR(0, 175, __pyx_L1_error)",
          "4436:     if (__Pyx_MergeKeywords(__pyx_t_1, __pyx_v_column_options) < 0) __PYX_ERR(0, 175, __pyx_L1_error)",
          "4437:     __pyx_t_6 = __Pyx_PyObject_Call(__pyx_v_cls, __pyx_t_2, __pyx_t_1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 175, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "4391:     __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 169, __pyx_L1_error)",
          "4396:     __pyx_t_6 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 169, __pyx_L1_error)",
          "4398:     if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_encoding, __pyx_v_encoding) < 0) __PYX_ERR(0, 169, __pyx_L1_error)",
          "4403:       __PYX_ERR(0, 169, __pyx_L1_error)",
          "4405:     if (__Pyx_MergeKeywords(__pyx_t_1, __pyx_v_column_options) < 0) __PYX_ERR(0, 169, __pyx_L1_error)",
          "4406:     __pyx_t_6 = __Pyx_PyObject_Call(__pyx_v_cls, __pyx_t_2, __pyx_t_1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 169, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 74 ---",
          "[Context before]",
          "4607:   {0, 0, 0, 0, 0, 0, 0}",
          "4608: };",
          "4609: static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(void) {",
          "4614:   return 0;",
          "4615:   __pyx_L1_error:;",
          "4616:   return -1;",
          "",
          "[Removed Lines]",
          "4610:   __pyx_builtin_super = __Pyx_GetBuiltinName(__pyx_n_s_super); if (!__pyx_builtin_super) __PYX_ERR(0, 26, __pyx_L1_error)",
          "4611:   __pyx_builtin_MemoryError = __Pyx_GetBuiltinName(__pyx_n_s_MemoryError); if (!__pyx_builtin_MemoryError) __PYX_ERR(0, 62, __pyx_L1_error)",
          "4612:   __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(0, 66, __pyx_L1_error)",
          "4613:   __pyx_builtin_UnicodeDecodeError = __Pyx_GetBuiltinName(__pyx_n_s_UnicodeDecodeError); if (!__pyx_builtin_UnicodeDecodeError) __PYX_ERR(0, 76, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "4579:   __pyx_builtin_super = __Pyx_GetBuiltinName(__pyx_n_s_super); if (!__pyx_builtin_super) __PYX_ERR(0, 24, __pyx_L1_error)",
          "4580:   __pyx_builtin_MemoryError = __Pyx_GetBuiltinName(__pyx_n_s_MemoryError); if (!__pyx_builtin_MemoryError) __PYX_ERR(0, 60, __pyx_L1_error)",
          "4581:   __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(0, 64, __pyx_L1_error)",
          "4582:   __pyx_builtin_UnicodeDecodeError = __Pyx_GetBuiltinName(__pyx_n_s_UnicodeDecodeError); if (!__pyx_builtin_UnicodeDecodeError) __PYX_ERR(0, 74, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 75 ---",
          "[Context before]",
          "4620:   __Pyx_RefNannyDeclarations",
          "4621:   __Pyx_RefNannySetupContext(\"__Pyx_InitCachedConstants\", 0);",
          "4631:   __Pyx_GOTREF(__pyx_slice_);",
          "4632:   __Pyx_GIVEREF(__pyx_slice_);",
          "4642:   __Pyx_GOTREF(__pyx_tuple__3);",
          "4643:   __Pyx_GIVEREF(__pyx_tuple__3);",
          "4654:   __Pyx_GOTREF(__pyx_tuple__5);",
          "4655:   __Pyx_GIVEREF(__pyx_tuple__5);",
          "4666:   __Pyx_GOTREF(__pyx_tuple__7);",
          "4667:   __Pyx_GIVEREF(__pyx_tuple__7);",
          "4678:   __Pyx_GOTREF(__pyx_tuple__9);",
          "4679:   __Pyx_GIVEREF(__pyx_tuple__9);",
          "4690:   __Pyx_GOTREF(__pyx_tuple__11);",
          "4691:   __Pyx_GIVEREF(__pyx_tuple__11);",
          "4702:   __Pyx_GOTREF(__pyx_tuple__13);",
          "4703:   __Pyx_GIVEREF(__pyx_tuple__13);",
          "4714:   __Pyx_GOTREF(__pyx_tuple__15);",
          "4715:   __Pyx_GIVEREF(__pyx_tuple__15);",
          "4726:   __Pyx_GOTREF(__pyx_tuple__17);",
          "4727:   __Pyx_GIVEREF(__pyx_tuple__17);",
          "4738:   __Pyx_GOTREF(__pyx_tuple__19);",
          "4739:   __Pyx_GIVEREF(__pyx_tuple__19);",
          "4750:   __Pyx_GOTREF(__pyx_tuple__21);",
          "4751:   __Pyx_GIVEREF(__pyx_tuple__21);",
          "4762:   __Pyx_GOTREF(__pyx_tuple__23);",
          "4763:   __Pyx_GIVEREF(__pyx_tuple__23);",
          "4765:   __Pyx_RefNannyFinishContext();",
          "4766:   return 0;",
          "4767:   __pyx_L1_error:;",
          "",
          "[Removed Lines]",
          "4630:   __pyx_slice_ = PySlice_New(__pyx_int_12, __pyx_int_neg_1, Py_None); if (unlikely(!__pyx_slice_)) __PYX_ERR(0, 173, __pyx_L1_error)",
          "4641:   __pyx_tuple__3 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_encoding, __pyx_n_s_kwargs); if (unlikely(!__pyx_tuple__3)) __PYX_ERR(0, 24, __pyx_L1_error)",
          "4644:   __pyx_codeobj__4 = (PyObject*)__Pyx_PyCode_New(2, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS|CO_VARKEYWORDS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__3, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_clickhouse_driver_columns_string_2, __pyx_n_s_init, 24, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__4)) __PYX_ERR(0, 24, __pyx_L1_error)",
          "4653:   __pyx_tuple__5 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_items, __pyx_n_s_buf); if (unlikely(!__pyx_tuple__5)) __PYX_ERR(0, 28, __pyx_L1_error)",
          "4656:   __pyx_codeobj__6 = (PyObject*)__Pyx_PyCode_New(3, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__5, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_clickhouse_driver_columns_string_2, __pyx_n_s_write_items, 28, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__6)) __PYX_ERR(0, 28, __pyx_L1_error)",
          "4665:   __pyx_tuple__7 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_n_items, __pyx_n_s_buf); if (unlikely(!__pyx_tuple__7)) __PYX_ERR(0, 31, __pyx_L1_error)",
          "4668:   __pyx_codeobj__8 = (PyObject*)__Pyx_PyCode_New(3, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__7, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_clickhouse_driver_columns_string_2, __pyx_n_s_read_items, 31, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__8)) __PYX_ERR(0, 31, __pyx_L1_error)",
          "4677:   __pyx_tuple__9 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_items, __pyx_n_s_buf); if (unlikely(!__pyx_tuple__9)) __PYX_ERR(0, 39, __pyx_L1_error)",
          "4680:   __pyx_codeobj__10 = (PyObject*)__Pyx_PyCode_New(3, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__9, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_clickhouse_driver_columns_string_2, __pyx_n_s_write_items, 39, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__10)) __PYX_ERR(0, 39, __pyx_L1_error)",
          "4689:   __pyx_tuple__11 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_n_items, __pyx_n_s_buf); if (unlikely(!__pyx_tuple__11)) __PYX_ERR(0, 42, __pyx_L1_error)",
          "4692:   __pyx_codeobj__12 = (PyObject*)__Pyx_PyCode_New(3, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__11, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_clickhouse_driver_columns_string_2, __pyx_n_s_read_items, 42, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__12)) __PYX_ERR(0, 42, __pyx_L1_error)",
          "4701:   __pyx_tuple__13 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_length, __pyx_n_s_kwargs); if (unlikely(!__pyx_tuple__13)) __PYX_ERR(0, 49, __pyx_L1_error)",
          "4704:   __pyx_codeobj__14 = (PyObject*)__Pyx_PyCode_New(2, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS|CO_VARKEYWORDS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__13, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_clickhouse_driver_columns_string_2, __pyx_n_s_init, 49, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__14)) __PYX_ERR(0, 49, __pyx_L1_error)",
          "4713:   __pyx_tuple__15 = PyTuple_Pack(13, __pyx_n_s_self, __pyx_n_s_n_items, __pyx_n_s_buf, __pyx_n_s_i, __pyx_n_s_j, __pyx_n_s_length, __pyx_n_s_encoding, __pyx_n_s_c_encoding, __pyx_n_s_data, __pyx_n_s_data_ptr, __pyx_n_s_c_string, __pyx_n_s_items, __pyx_n_s_item); if (unlikely(!__pyx_tuple__15)) __PYX_ERR(0, 53, __pyx_L1_error)",
          "4716:   __pyx_codeobj__16 = (PyObject*)__Pyx_PyCode_New(3, 0, 13, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__15, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_clickhouse_driver_columns_string_2, __pyx_n_s_read_items, 53, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__16)) __PYX_ERR(0, 53, __pyx_L1_error)",
          "4725:   __pyx_tuple__17 = PyTuple_Pack(11, __pyx_n_s_self, __pyx_n_s_items, __pyx_n_s_buf, __pyx_n_s_buf_pos, __pyx_n_s_length, __pyx_n_s_items_buf_size, __pyx_n_s_encoding, __pyx_n_s_c_value, __pyx_n_s_items_buf, __pyx_n_s_value, __pyx_n_s_value_len); if (unlikely(!__pyx_tuple__17)) __PYX_ERR(0, 85, __pyx_L1_error)",
          "4728:   __pyx_codeobj__18 = (PyObject*)__Pyx_PyCode_New(3, 0, 11, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__17, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_clickhouse_driver_columns_string_2, __pyx_n_s_write_items, 85, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__18)) __PYX_ERR(0, 85, __pyx_L1_error)",
          "4737:   __pyx_tuple__19 = PyTuple_Pack(9, __pyx_n_s_self, __pyx_n_s_n_items, __pyx_n_s_buf, __pyx_n_s_i, __pyx_n_s_length, __pyx_n_s_data, __pyx_n_s_data_ptr, __pyx_n_s_items, __pyx_n_s_item); if (unlikely(!__pyx_tuple__19)) __PYX_ERR(0, 120, __pyx_L1_error)",
          "4740:   __pyx_codeobj__20 = (PyObject*)__Pyx_PyCode_New(3, 0, 9, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__19, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_clickhouse_driver_columns_string_2, __pyx_n_s_read_items, 120, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__20)) __PYX_ERR(0, 120, __pyx_L1_error)",
          "4749:   __pyx_tuple__21 = PyTuple_Pack(10, __pyx_n_s_self, __pyx_n_s_items, __pyx_n_s_buf, __pyx_n_s_buf_pos, __pyx_n_s_length, __pyx_n_s_items_buf_size, __pyx_n_s_c_value, __pyx_n_s_items_buf, __pyx_n_s_value, __pyx_n_s_value_len); if (unlikely(!__pyx_tuple__21)) __PYX_ERR(0, 134, __pyx_L1_error)",
          "4752:   __pyx_codeobj__22 = (PyObject*)__Pyx_PyCode_New(3, 0, 10, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__21, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_clickhouse_driver_columns_string_2, __pyx_n_s_write_items, 134, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__22)) __PYX_ERR(0, 134, __pyx_L1_error)",
          "4761:   __pyx_tuple__23 = PyTuple_Pack(7, __pyx_n_s_spec, __pyx_n_s_column_options, __pyx_n_s_client_settings, __pyx_n_s_strings_as_bytes, __pyx_n_s_encoding, __pyx_n_s_cls, __pyx_n_s_length); if (unlikely(!__pyx_tuple__23)) __PYX_ERR(0, 164, __pyx_L1_error)",
          "4764:   __pyx_codeobj__24 = (PyObject*)__Pyx_PyCode_New(2, 0, 7, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__23, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_clickhouse_driver_columns_string_2, __pyx_n_s_create_string_column, 164, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__24)) __PYX_ERR(0, 164, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "4599:   __pyx_slice_ = PySlice_New(__pyx_int_12, __pyx_int_neg_1, Py_None); if (unlikely(!__pyx_slice_)) __PYX_ERR(0, 167, __pyx_L1_error)",
          "4610:   __pyx_tuple__3 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_encoding, __pyx_n_s_kwargs); if (unlikely(!__pyx_tuple__3)) __PYX_ERR(0, 22, __pyx_L1_error)",
          "4613:   __pyx_codeobj__4 = (PyObject*)__Pyx_PyCode_New(2, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS|CO_VARKEYWORDS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__3, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_clickhouse_driver_columns_string_2, __pyx_n_s_init, 22, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__4)) __PYX_ERR(0, 22, __pyx_L1_error)",
          "4622:   __pyx_tuple__5 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_items, __pyx_n_s_buf); if (unlikely(!__pyx_tuple__5)) __PYX_ERR(0, 26, __pyx_L1_error)",
          "4625:   __pyx_codeobj__6 = (PyObject*)__Pyx_PyCode_New(3, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__5, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_clickhouse_driver_columns_string_2, __pyx_n_s_write_items, 26, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__6)) __PYX_ERR(0, 26, __pyx_L1_error)",
          "4634:   __pyx_tuple__7 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_n_items, __pyx_n_s_buf); if (unlikely(!__pyx_tuple__7)) __PYX_ERR(0, 29, __pyx_L1_error)",
          "4637:   __pyx_codeobj__8 = (PyObject*)__Pyx_PyCode_New(3, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__7, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_clickhouse_driver_columns_string_2, __pyx_n_s_read_items, 29, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__8)) __PYX_ERR(0, 29, __pyx_L1_error)",
          "4646:   __pyx_tuple__9 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_items, __pyx_n_s_buf); if (unlikely(!__pyx_tuple__9)) __PYX_ERR(0, 37, __pyx_L1_error)",
          "4649:   __pyx_codeobj__10 = (PyObject*)__Pyx_PyCode_New(3, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__9, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_clickhouse_driver_columns_string_2, __pyx_n_s_write_items, 37, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__10)) __PYX_ERR(0, 37, __pyx_L1_error)",
          "4658:   __pyx_tuple__11 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_n_items, __pyx_n_s_buf); if (unlikely(!__pyx_tuple__11)) __PYX_ERR(0, 40, __pyx_L1_error)",
          "4661:   __pyx_codeobj__12 = (PyObject*)__Pyx_PyCode_New(3, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__11, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_clickhouse_driver_columns_string_2, __pyx_n_s_read_items, 40, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__12)) __PYX_ERR(0, 40, __pyx_L1_error)",
          "4670:   __pyx_tuple__13 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_length, __pyx_n_s_kwargs); if (unlikely(!__pyx_tuple__13)) __PYX_ERR(0, 47, __pyx_L1_error)",
          "4673:   __pyx_codeobj__14 = (PyObject*)__Pyx_PyCode_New(2, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS|CO_VARKEYWORDS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__13, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_clickhouse_driver_columns_string_2, __pyx_n_s_init, 47, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__14)) __PYX_ERR(0, 47, __pyx_L1_error)",
          "4682:   __pyx_tuple__15 = PyTuple_Pack(13, __pyx_n_s_self, __pyx_n_s_n_items, __pyx_n_s_buf, __pyx_n_s_i, __pyx_n_s_j, __pyx_n_s_length, __pyx_n_s_encoding, __pyx_n_s_c_encoding, __pyx_n_s_data, __pyx_n_s_data_ptr, __pyx_n_s_c_string, __pyx_n_s_items, __pyx_n_s_item); if (unlikely(!__pyx_tuple__15)) __PYX_ERR(0, 51, __pyx_L1_error)",
          "4685:   __pyx_codeobj__16 = (PyObject*)__Pyx_PyCode_New(3, 0, 13, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__15, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_clickhouse_driver_columns_string_2, __pyx_n_s_read_items, 51, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__16)) __PYX_ERR(0, 51, __pyx_L1_error)",
          "4694:   __pyx_tuple__17 = PyTuple_Pack(11, __pyx_n_s_self, __pyx_n_s_items, __pyx_n_s_buf, __pyx_n_s_buf_pos, __pyx_n_s_length, __pyx_n_s_items_buf_size, __pyx_n_s_encoding, __pyx_n_s_c_value, __pyx_n_s_items_buf, __pyx_n_s_value, __pyx_n_s_value_len); if (unlikely(!__pyx_tuple__17)) __PYX_ERR(0, 83, __pyx_L1_error)",
          "4697:   __pyx_codeobj__18 = (PyObject*)__Pyx_PyCode_New(3, 0, 11, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__17, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_clickhouse_driver_columns_string_2, __pyx_n_s_write_items, 83, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__18)) __PYX_ERR(0, 83, __pyx_L1_error)",
          "4706:   __pyx_tuple__19 = PyTuple_Pack(9, __pyx_n_s_self, __pyx_n_s_n_items, __pyx_n_s_buf, __pyx_n_s_i, __pyx_n_s_length, __pyx_n_s_data, __pyx_n_s_data_ptr, __pyx_n_s_items, __pyx_n_s_item); if (unlikely(!__pyx_tuple__19)) __PYX_ERR(0, 118, __pyx_L1_error)",
          "4709:   __pyx_codeobj__20 = (PyObject*)__Pyx_PyCode_New(3, 0, 9, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__19, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_clickhouse_driver_columns_string_2, __pyx_n_s_read_items, 118, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__20)) __PYX_ERR(0, 118, __pyx_L1_error)",
          "4718:   __pyx_tuple__21 = PyTuple_Pack(10, __pyx_n_s_self, __pyx_n_s_items, __pyx_n_s_buf, __pyx_n_s_buf_pos, __pyx_n_s_length, __pyx_n_s_items_buf_size, __pyx_n_s_c_value, __pyx_n_s_items_buf, __pyx_n_s_value, __pyx_n_s_value_len); if (unlikely(!__pyx_tuple__21)) __PYX_ERR(0, 131, __pyx_L1_error)",
          "4721:   __pyx_codeobj__22 = (PyObject*)__Pyx_PyCode_New(3, 0, 10, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__21, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_clickhouse_driver_columns_string_2, __pyx_n_s_write_items, 131, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__22)) __PYX_ERR(0, 131, __pyx_L1_error)",
          "4730:   __pyx_tuple__23 = PyTuple_Pack(7, __pyx_n_s_spec, __pyx_n_s_column_options, __pyx_n_s_client_settings, __pyx_n_s_strings_as_bytes, __pyx_n_s_encoding, __pyx_n_s_cls, __pyx_n_s_length); if (unlikely(!__pyx_tuple__23)) __PYX_ERR(0, 158, __pyx_L1_error)",
          "4733:   __pyx_codeobj__24 = (PyObject*)__Pyx_PyCode_New(2, 0, 7, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__23, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_clickhouse_driver_columns_string_2, __pyx_n_s_create_string_column, 158, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__24)) __PYX_ERR(0, 158, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 76 ---",
          "[Context before]",
          "5069:   if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)",
          "5070:   #endif",
          "5080:   __Pyx_GOTREF(__pyx_t_1);",
          "5081:   __Pyx_INCREF(__pyx_n_s_defines);",
          "5082:   __Pyx_GIVEREF(__pyx_n_s_defines);",
          "5083:   PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_defines);",
          "5085:   __Pyx_GOTREF(__pyx_t_2);",
          "5086:   __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;",
          "5088:   __Pyx_GOTREF(__pyx_t_1);",
          "5090:   __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;",
          "5091:   __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;",
          "5101:   __Pyx_GOTREF(__pyx_t_2);",
          "5102:   __Pyx_INCREF(__pyx_n_s_errors);",
          "5103:   __Pyx_GIVEREF(__pyx_n_s_errors);",
          "5104:   PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_errors);",
          "5106:   __Pyx_GOTREF(__pyx_t_1);",
          "5107:   __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;",
          "5109:   __Pyx_GOTREF(__pyx_t_2);",
          "5111:   __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;",
          "5112:   __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;",
          "5122:   __Pyx_GOTREF(__pyx_t_1);",
          "5123:   __Pyx_INCREF(__pyx_n_s_compat);",
          "5124:   __Pyx_GIVEREF(__pyx_n_s_compat);",
          "5125:   PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_compat);",
          "5127:   __Pyx_GOTREF(__pyx_t_2);",
          "5128:   __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;",
          "5130:   __Pyx_GOTREF(__pyx_t_1);",
          "5132:   __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;",
          "5133:   __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;",
          "5143:   __Pyx_GOTREF(__pyx_t_2);",
          "5144:   __Pyx_INCREF(__pyx_n_s_Column);",
          "5145:   __Pyx_GIVEREF(__pyx_n_s_Column);",
          "5146:   PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_Column);",
          "5148:   __Pyx_GOTREF(__pyx_t_1);",
          "5149:   __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;",
          "5151:   __Pyx_GOTREF(__pyx_t_2);",
          "5153:   __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;",
          "5154:   __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;",
          "5164:   __Pyx_GOTREF(__pyx_t_1);",
          "5166:   __Pyx_GOTREF(__pyx_t_2);",
          "5167:   __Pyx_GIVEREF(__pyx_t_1);",
          "5168:   PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);",
          "5169:   __pyx_t_1 = 0;",
          "5171:   __Pyx_GOTREF(__pyx_t_1);",
          "5173:   __Pyx_GOTREF(__pyx_t_3);",
          "5192:   __Pyx_GOTREF(__pyx_t_4);",
          "5194:   __Pyx_GOTREF(__pyx_t_5);",
          "5195:   __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;",
          "5197:   __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;",
          "5216:   __Pyx_GOTREF(__pyx_t_5);",
          "5218:   __Pyx_GOTREF(__pyx_t_4);",
          "5219:   __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;",
          "5221:   __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;",
          "5231:   __Pyx_GOTREF(__pyx_t_4);",
          "5233:   __pyx_t_5 = PyObject_GetItem(__pyx_t_3, __pyx_n_s_default_encoding);",
          "5234:   if (unlikely(!__pyx_t_5)) {",
          "5235:     PyErr_Clear();",
          "5236:     __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_default_encoding);",
          "5237:   }",
          "5239:   __Pyx_GOTREF(__pyx_t_5);",
          "5240:   __Pyx_CyFunction_Defaults(__pyx_defaults, __pyx_t_4)->__pyx_arg_encoding = __pyx_t_5;",
          "5241:   __Pyx_GIVEREF(__pyx_t_5);",
          "5242:   __pyx_t_5 = 0;",
          "5243:   __Pyx_CyFunction_SetDefaultsGetter(__pyx_t_4, __pyx_pf_17clickhouse_driver_7columns_12stringcolumn_2__defaults__);",
          "5245:   __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;",
          "5255:   __Pyx_GOTREF(__pyx_t_4);",
          "5257:   __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;",
          "5267:   __Pyx_GOTREF(__pyx_t_4);",
          "5269:   __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;",
          "5279:   __Pyx_GOTREF(__pyx_t_4);",
          "5281:   __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;",
          "5282:   __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;",
          "5283:   __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;",
          "5284:   __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;",
          "5294:   __Pyx_GOTREF(__pyx_t_2);",
          "5296:   __Pyx_GOTREF(__pyx_t_1);",
          "5297:   __Pyx_GIVEREF(__pyx_t_2);",
          "5298:   PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);",
          "5299:   __pyx_t_2 = 0;",
          "5301:   __Pyx_GOTREF(__pyx_t_2);",
          "5303:   __Pyx_GOTREF(__pyx_t_3);",
          "5313:   __Pyx_GOTREF(__pyx_t_4);",
          "5317:   __Pyx_INCREF(((PyObject *)(&PyBytes_Type)));",
          "5318:   __Pyx_GIVEREF(((PyObject *)(&PyBytes_Type)));",
          "5321:   __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;",
          "5340:   __Pyx_GOTREF(__pyx_t_4);",
          "5342:   __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;",
          "5352:   __Pyx_GOTREF(__pyx_t_4);",
          "5354:   __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;",
          "5364:   __Pyx_GOTREF(__pyx_t_4);",
          "5366:   __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;",
          "5367:   __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;",
          "5368:   __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;",
          "5369:   __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;",
          "5379:   __Pyx_GOTREF(__pyx_t_1);",
          "5381:   __Pyx_GOTREF(__pyx_t_2);",
          "5382:   __Pyx_GIVEREF(__pyx_t_1);",
          "5383:   PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);",
          "5384:   __pyx_t_1 = 0;",
          "5386:   __Pyx_GOTREF(__pyx_t_1);",
          "5388:   __Pyx_GOTREF(__pyx_t_3);",
          "5407:   __Pyx_GOTREF(__pyx_t_4);",
          "5409:   __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;",
          "5419:   __Pyx_GOTREF(__pyx_t_4);",
          "5421:   __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;",
          "5431:   __Pyx_GOTREF(__pyx_t_4);",
          "5433:   __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;",
          "5443:   __Pyx_GOTREF(__pyx_t_4);",
          "5445:   __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;",
          "5446:   __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;",
          "5447:   __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;",
          "5448:   __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;",
          "5458:   __Pyx_GOTREF(__pyx_t_2);",
          "5460:   __Pyx_GOTREF(__pyx_t_1);",
          "5461:   __Pyx_GIVEREF(__pyx_t_2);",
          "5462:   PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);",
          "5463:   __pyx_t_2 = 0;",
          "5465:   __Pyx_GOTREF(__pyx_t_2);",
          "5467:   __Pyx_GOTREF(__pyx_t_3);",
          "5477:   __Pyx_GOTREF(__pyx_t_4);",
          "5478:   __Pyx_INCREF(((PyObject *)(&PyByteArray_Type)));",
          "5479:   __Pyx_GIVEREF(((PyObject *)(&PyByteArray_Type)));",
          "",
          "[Removed Lines]",
          "5079:   __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 11, __pyx_L1_error)",
          "5084:   __pyx_t_2 = __Pyx_Import(__pyx_n_s__2, __pyx_t_1, 2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 11, __pyx_L1_error)",
          "5087:   __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_defines); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 11, __pyx_L1_error)",
          "5089:   if (PyDict_SetItem(__pyx_d, __pyx_n_s_defines, __pyx_t_1) < 0) __PYX_ERR(0, 11, __pyx_L1_error)",
          "5100:   __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 12, __pyx_L1_error)",
          "5105:   __pyx_t_1 = __Pyx_Import(__pyx_n_s__2, __pyx_t_2, 2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 12, __pyx_L1_error)",
          "5108:   __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_errors); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 12, __pyx_L1_error)",
          "5110:   if (PyDict_SetItem(__pyx_d, __pyx_n_s_errors, __pyx_t_2) < 0) __PYX_ERR(0, 12, __pyx_L1_error)",
          "5121:   __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 13, __pyx_L1_error)",
          "5126:   __pyx_t_2 = __Pyx_Import(__pyx_n_s_util, __pyx_t_1, 2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 13, __pyx_L1_error)",
          "5129:   __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_compat); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 13, __pyx_L1_error)",
          "5131:   if (PyDict_SetItem(__pyx_d, __pyx_n_s_compat, __pyx_t_1) < 0) __PYX_ERR(0, 13, __pyx_L1_error)",
          "5142:   __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 14, __pyx_L1_error)",
          "5147:   __pyx_t_1 = __Pyx_Import(__pyx_n_s_base, __pyx_t_2, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 14, __pyx_L1_error)",
          "5150:   __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_Column); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 14, __pyx_L1_error)",
          "5152:   if (PyDict_SetItem(__pyx_d, __pyx_n_s_Column, __pyx_t_2) < 0) __PYX_ERR(0, 14, __pyx_L1_error)",
          "5163:   __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_Column); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 17, __pyx_L1_error)",
          "5165:   __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 17, __pyx_L1_error)",
          "5170:   __pyx_t_1 = __Pyx_CalculateMetaclass(NULL, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 17, __pyx_L1_error)",
          "5172:   __pyx_t_3 = __Pyx_Py3MetaclassPrepare(__pyx_t_1, __pyx_t_2, __pyx_n_s_String, __pyx_n_s_String, (PyObject *) NULL, __pyx_n_s_clickhouse_driver_columns_string, (PyObject *) NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 17, __pyx_L1_error)",
          "5182:   if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_ch_type, __pyx_n_u_String) < 0) __PYX_ERR(0, 18, __pyx_L1_error)",
          "5191:   __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_compat); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 19, __pyx_L1_error)",
          "5193:   __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_string_types); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 19, __pyx_L1_error)",
          "5196:   if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_py_types, __pyx_t_5) < 0) __PYX_ERR(0, 19, __pyx_L1_error)",
          "5206:   if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_null_value, __pyx_kp_u__2) < 0) __PYX_ERR(0, 20, __pyx_L1_error)",
          "5215:   __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_defines); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 22, __pyx_L1_error)",
          "5217:   __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_STRINGS_ENCODING); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 22, __pyx_L1_error)",
          "5220:   if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_default_encoding, __pyx_t_4) < 0) __PYX_ERR(0, 22, __pyx_L1_error)",
          "5230:   __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_17clickhouse_driver_7columns_12stringcolumn_6String_1__init__, 0, __pyx_n_s_String___init, NULL, __pyx_n_s_clickhouse_driver_columns_string, __pyx_d, ((PyObject *)__pyx_codeobj__4)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 24, __pyx_L1_error)",
          "5232:   if (!__Pyx_CyFunction_InitDefaults(__pyx_t_4, sizeof(__pyx_defaults), 1)) __PYX_ERR(0, 24, __pyx_L1_error)",
          "5238:   if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 24, __pyx_L1_error)",
          "5244:   if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_init, __pyx_t_4) < 0) __PYX_ERR(0, 24, __pyx_L1_error)",
          "5254:   __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_17clickhouse_driver_7columns_12stringcolumn_6String_3write_items, 0, __pyx_n_s_String_write_items, NULL, __pyx_n_s_clickhouse_driver_columns_string, __pyx_d, ((PyObject *)__pyx_codeobj__6)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 28, __pyx_L1_error)",
          "5256:   if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_write_items, __pyx_t_4) < 0) __PYX_ERR(0, 28, __pyx_L1_error)",
          "5266:   __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_17clickhouse_driver_7columns_12stringcolumn_6String_5read_items, 0, __pyx_n_s_String_read_items, NULL, __pyx_n_s_clickhouse_driver_columns_string, __pyx_d, ((PyObject *)__pyx_codeobj__8)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 31, __pyx_L1_error)",
          "5268:   if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_read_items, __pyx_t_4) < 0) __PYX_ERR(0, 31, __pyx_L1_error)",
          "5278:   __pyx_t_4 = __Pyx_Py3ClassCreate(__pyx_t_1, __pyx_n_s_String, __pyx_t_2, __pyx_t_3, NULL, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 17, __pyx_L1_error)",
          "5280:   if (PyDict_SetItem(__pyx_d, __pyx_n_s_String, __pyx_t_4) < 0) __PYX_ERR(0, 17, __pyx_L1_error)",
          "5293:   __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_String); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 35, __pyx_L1_error)",
          "5295:   __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 35, __pyx_L1_error)",
          "5300:   __pyx_t_2 = __Pyx_CalculateMetaclass(NULL, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 35, __pyx_L1_error)",
          "5302:   __pyx_t_3 = __Pyx_Py3MetaclassPrepare(__pyx_t_2, __pyx_t_1, __pyx_n_s_ByteString, __pyx_n_s_ByteString, (PyObject *) NULL, __pyx_n_s_clickhouse_driver_columns_string, (PyObject *) NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 35, __pyx_L1_error)",
          "5312:   __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 36, __pyx_L1_error)",
          "5314:   __Pyx_INCREF(((PyObject *)(&PyByteArray_Type)));",
          "5315:   __Pyx_GIVEREF(((PyObject *)(&PyByteArray_Type)));",
          "5316:   PyTuple_SET_ITEM(__pyx_t_4, 0, ((PyObject *)(&PyByteArray_Type)));",
          "5319:   PyTuple_SET_ITEM(__pyx_t_4, 1, ((PyObject *)(&PyBytes_Type)));",
          "5320:   if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_py_types, __pyx_t_4) < 0) __PYX_ERR(0, 36, __pyx_L1_error)",
          "5330:   if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_null_value, __pyx_kp_b__2) < 0) __PYX_ERR(0, 37, __pyx_L1_error)",
          "5339:   __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_17clickhouse_driver_7columns_12stringcolumn_10ByteString_1write_items, 0, __pyx_n_s_ByteString_write_items, NULL, __pyx_n_s_clickhouse_driver_columns_string, __pyx_d, ((PyObject *)__pyx_codeobj__10)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 39, __pyx_L1_error)",
          "5341:   if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_write_items, __pyx_t_4) < 0) __PYX_ERR(0, 39, __pyx_L1_error)",
          "5351:   __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_17clickhouse_driver_7columns_12stringcolumn_10ByteString_3read_items, 0, __pyx_n_s_ByteString_read_items, NULL, __pyx_n_s_clickhouse_driver_columns_string, __pyx_d, ((PyObject *)__pyx_codeobj__12)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 42, __pyx_L1_error)",
          "5353:   if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_read_items, __pyx_t_4) < 0) __PYX_ERR(0, 42, __pyx_L1_error)",
          "5363:   __pyx_t_4 = __Pyx_Py3ClassCreate(__pyx_t_2, __pyx_n_s_ByteString, __pyx_t_1, __pyx_t_3, NULL, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 35, __pyx_L1_error)",
          "5365:   if (PyDict_SetItem(__pyx_d, __pyx_n_s_ByteString, __pyx_t_4) < 0) __PYX_ERR(0, 35, __pyx_L1_error)",
          "5378:   __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_String); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 46, __pyx_L1_error)",
          "5380:   __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 46, __pyx_L1_error)",
          "5385:   __pyx_t_1 = __Pyx_CalculateMetaclass(NULL, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 46, __pyx_L1_error)",
          "5387:   __pyx_t_3 = __Pyx_Py3MetaclassPrepare(__pyx_t_1, __pyx_t_2, __pyx_n_s_FixedString, __pyx_n_s_FixedString, (PyObject *) NULL, __pyx_n_s_clickhouse_driver_columns_string, (PyObject *) NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 46, __pyx_L1_error)",
          "5397:   if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_ch_type, __pyx_n_u_FixedString) < 0) __PYX_ERR(0, 47, __pyx_L1_error)",
          "5406:   __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_17clickhouse_driver_7columns_12stringcolumn_11FixedString_1__init__, 0, __pyx_n_s_FixedString___init, NULL, __pyx_n_s_clickhouse_driver_columns_string, __pyx_d, ((PyObject *)__pyx_codeobj__14)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 49, __pyx_L1_error)",
          "5408:   if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_init, __pyx_t_4) < 0) __PYX_ERR(0, 49, __pyx_L1_error)",
          "5418:   __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_17clickhouse_driver_7columns_12stringcolumn_11FixedString_3read_items, 0, __pyx_n_s_FixedString_read_items, NULL, __pyx_n_s_clickhouse_driver_columns_string, __pyx_d, ((PyObject *)__pyx_codeobj__16)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 53, __pyx_L1_error)",
          "5420:   if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_read_items, __pyx_t_4) < 0) __PYX_ERR(0, 53, __pyx_L1_error)",
          "5430:   __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_17clickhouse_driver_7columns_12stringcolumn_11FixedString_5write_items, 0, __pyx_n_s_FixedString_write_items, NULL, __pyx_n_s_clickhouse_driver_columns_string, __pyx_d, ((PyObject *)__pyx_codeobj__18)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 85, __pyx_L1_error)",
          "5432:   if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_write_items, __pyx_t_4) < 0) __PYX_ERR(0, 85, __pyx_L1_error)",
          "5442:   __pyx_t_4 = __Pyx_Py3ClassCreate(__pyx_t_1, __pyx_n_s_FixedString, __pyx_t_2, __pyx_t_3, NULL, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 46, __pyx_L1_error)",
          "5444:   if (PyDict_SetItem(__pyx_d, __pyx_n_s_FixedString, __pyx_t_4) < 0) __PYX_ERR(0, 46, __pyx_L1_error)",
          "5457:   __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_FixedString); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 116, __pyx_L1_error)",
          "5459:   __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 116, __pyx_L1_error)",
          "5464:   __pyx_t_2 = __Pyx_CalculateMetaclass(NULL, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 116, __pyx_L1_error)",
          "5466:   __pyx_t_3 = __Pyx_Py3MetaclassPrepare(__pyx_t_2, __pyx_t_1, __pyx_n_s_ByteFixedString, __pyx_n_s_ByteFixedString, (PyObject *) NULL, __pyx_n_s_clickhouse_driver_columns_string, (PyObject *) NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 116, __pyx_L1_error)",
          "5476:   __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 117, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "5048:   __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 9, __pyx_L1_error)",
          "5053:   __pyx_t_2 = __Pyx_Import(__pyx_n_s__2, __pyx_t_1, 2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 9, __pyx_L1_error)",
          "5056:   __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_defines); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 9, __pyx_L1_error)",
          "5058:   if (PyDict_SetItem(__pyx_d, __pyx_n_s_defines, __pyx_t_1) < 0) __PYX_ERR(0, 9, __pyx_L1_error)",
          "5069:   __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 10, __pyx_L1_error)",
          "5074:   __pyx_t_1 = __Pyx_Import(__pyx_n_s__2, __pyx_t_2, 2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 10, __pyx_L1_error)",
          "5077:   __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_errors); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 10, __pyx_L1_error)",
          "5079:   if (PyDict_SetItem(__pyx_d, __pyx_n_s_errors, __pyx_t_2) < 0) __PYX_ERR(0, 10, __pyx_L1_error)",
          "5090:   __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 11, __pyx_L1_error)",
          "5095:   __pyx_t_2 = __Pyx_Import(__pyx_n_s_util, __pyx_t_1, 2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 11, __pyx_L1_error)",
          "5098:   __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_compat); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 11, __pyx_L1_error)",
          "5100:   if (PyDict_SetItem(__pyx_d, __pyx_n_s_compat, __pyx_t_1) < 0) __PYX_ERR(0, 11, __pyx_L1_error)",
          "5111:   __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 12, __pyx_L1_error)",
          "5116:   __pyx_t_1 = __Pyx_Import(__pyx_n_s_base, __pyx_t_2, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 12, __pyx_L1_error)",
          "5119:   __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_Column); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 12, __pyx_L1_error)",
          "5121:   if (PyDict_SetItem(__pyx_d, __pyx_n_s_Column, __pyx_t_2) < 0) __PYX_ERR(0, 12, __pyx_L1_error)",
          "5132:   __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_Column); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 15, __pyx_L1_error)",
          "5134:   __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 15, __pyx_L1_error)",
          "5139:   __pyx_t_1 = __Pyx_CalculateMetaclass(NULL, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 15, __pyx_L1_error)",
          "5141:   __pyx_t_3 = __Pyx_Py3MetaclassPrepare(__pyx_t_1, __pyx_t_2, __pyx_n_s_String, __pyx_n_s_String, (PyObject *) NULL, __pyx_n_s_clickhouse_driver_columns_string, (PyObject *) NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 15, __pyx_L1_error)",
          "5151:   if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_ch_type, __pyx_n_u_String) < 0) __PYX_ERR(0, 16, __pyx_L1_error)",
          "5160:   __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_compat); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 17, __pyx_L1_error)",
          "5162:   __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_string_types); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 17, __pyx_L1_error)",
          "5165:   if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_py_types, __pyx_t_5) < 0) __PYX_ERR(0, 17, __pyx_L1_error)",
          "5175:   if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_null_value, __pyx_kp_u__2) < 0) __PYX_ERR(0, 18, __pyx_L1_error)",
          "5184:   __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_defines); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 20, __pyx_L1_error)",
          "5186:   __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_STRINGS_ENCODING); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 20, __pyx_L1_error)",
          "5189:   if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_default_encoding, __pyx_t_4) < 0) __PYX_ERR(0, 20, __pyx_L1_error)",
          "5199:   __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_17clickhouse_driver_7columns_12stringcolumn_6String_1__init__, 0, __pyx_n_s_String___init, NULL, __pyx_n_s_clickhouse_driver_columns_string, __pyx_d, ((PyObject *)__pyx_codeobj__4)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 22, __pyx_L1_error)",
          "5201:   if (!__Pyx_CyFunction_InitDefaults(__pyx_t_4, sizeof(__pyx_defaults), 1)) __PYX_ERR(0, 22, __pyx_L1_error)",
          "5207:   if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 22, __pyx_L1_error)",
          "5213:   if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_init, __pyx_t_4) < 0) __PYX_ERR(0, 22, __pyx_L1_error)",
          "5223:   __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_17clickhouse_driver_7columns_12stringcolumn_6String_3write_items, 0, __pyx_n_s_String_write_items, NULL, __pyx_n_s_clickhouse_driver_columns_string, __pyx_d, ((PyObject *)__pyx_codeobj__6)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 26, __pyx_L1_error)",
          "5225:   if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_write_items, __pyx_t_4) < 0) __PYX_ERR(0, 26, __pyx_L1_error)",
          "5235:   __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_17clickhouse_driver_7columns_12stringcolumn_6String_5read_items, 0, __pyx_n_s_String_read_items, NULL, __pyx_n_s_clickhouse_driver_columns_string, __pyx_d, ((PyObject *)__pyx_codeobj__8)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 29, __pyx_L1_error)",
          "5237:   if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_read_items, __pyx_t_4) < 0) __PYX_ERR(0, 29, __pyx_L1_error)",
          "5247:   __pyx_t_4 = __Pyx_Py3ClassCreate(__pyx_t_1, __pyx_n_s_String, __pyx_t_2, __pyx_t_3, NULL, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 15, __pyx_L1_error)",
          "5249:   if (PyDict_SetItem(__pyx_d, __pyx_n_s_String, __pyx_t_4) < 0) __PYX_ERR(0, 15, __pyx_L1_error)",
          "5262:   __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_String); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 33, __pyx_L1_error)",
          "5264:   __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 33, __pyx_L1_error)",
          "5269:   __pyx_t_2 = __Pyx_CalculateMetaclass(NULL, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 33, __pyx_L1_error)",
          "5271:   __pyx_t_3 = __Pyx_Py3MetaclassPrepare(__pyx_t_2, __pyx_t_1, __pyx_n_s_ByteString, __pyx_n_s_ByteString, (PyObject *) NULL, __pyx_n_s_clickhouse_driver_columns_string, (PyObject *) NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 33, __pyx_L1_error)",
          "5281:   __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 34, __pyx_L1_error)",
          "5285:   PyTuple_SET_ITEM(__pyx_t_4, 0, ((PyObject *)(&PyBytes_Type)));",
          "5286:   if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_py_types, __pyx_t_4) < 0) __PYX_ERR(0, 34, __pyx_L1_error)",
          "5296:   if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_null_value, __pyx_kp_b__2) < 0) __PYX_ERR(0, 35, __pyx_L1_error)",
          "5305:   __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_17clickhouse_driver_7columns_12stringcolumn_10ByteString_1write_items, 0, __pyx_n_s_ByteString_write_items, NULL, __pyx_n_s_clickhouse_driver_columns_string, __pyx_d, ((PyObject *)__pyx_codeobj__10)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 37, __pyx_L1_error)",
          "5307:   if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_write_items, __pyx_t_4) < 0) __PYX_ERR(0, 37, __pyx_L1_error)",
          "5317:   __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_17clickhouse_driver_7columns_12stringcolumn_10ByteString_3read_items, 0, __pyx_n_s_ByteString_read_items, NULL, __pyx_n_s_clickhouse_driver_columns_string, __pyx_d, ((PyObject *)__pyx_codeobj__12)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 40, __pyx_L1_error)",
          "5319:   if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_read_items, __pyx_t_4) < 0) __PYX_ERR(0, 40, __pyx_L1_error)",
          "5329:   __pyx_t_4 = __Pyx_Py3ClassCreate(__pyx_t_2, __pyx_n_s_ByteString, __pyx_t_1, __pyx_t_3, NULL, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 33, __pyx_L1_error)",
          "5331:   if (PyDict_SetItem(__pyx_d, __pyx_n_s_ByteString, __pyx_t_4) < 0) __PYX_ERR(0, 33, __pyx_L1_error)",
          "5344:   __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_String); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 44, __pyx_L1_error)",
          "5346:   __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 44, __pyx_L1_error)",
          "5351:   __pyx_t_1 = __Pyx_CalculateMetaclass(NULL, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 44, __pyx_L1_error)",
          "5353:   __pyx_t_3 = __Pyx_Py3MetaclassPrepare(__pyx_t_1, __pyx_t_2, __pyx_n_s_FixedString, __pyx_n_s_FixedString, (PyObject *) NULL, __pyx_n_s_clickhouse_driver_columns_string, (PyObject *) NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 44, __pyx_L1_error)",
          "5363:   if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_ch_type, __pyx_n_u_FixedString) < 0) __PYX_ERR(0, 45, __pyx_L1_error)",
          "5372:   __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_17clickhouse_driver_7columns_12stringcolumn_11FixedString_1__init__, 0, __pyx_n_s_FixedString___init, NULL, __pyx_n_s_clickhouse_driver_columns_string, __pyx_d, ((PyObject *)__pyx_codeobj__14)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 47, __pyx_L1_error)",
          "5374:   if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_init, __pyx_t_4) < 0) __PYX_ERR(0, 47, __pyx_L1_error)",
          "5384:   __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_17clickhouse_driver_7columns_12stringcolumn_11FixedString_3read_items, 0, __pyx_n_s_FixedString_read_items, NULL, __pyx_n_s_clickhouse_driver_columns_string, __pyx_d, ((PyObject *)__pyx_codeobj__16)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 51, __pyx_L1_error)",
          "5386:   if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_read_items, __pyx_t_4) < 0) __PYX_ERR(0, 51, __pyx_L1_error)",
          "5396:   __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_17clickhouse_driver_7columns_12stringcolumn_11FixedString_5write_items, 0, __pyx_n_s_FixedString_write_items, NULL, __pyx_n_s_clickhouse_driver_columns_string, __pyx_d, ((PyObject *)__pyx_codeobj__18)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 83, __pyx_L1_error)",
          "5398:   if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_write_items, __pyx_t_4) < 0) __PYX_ERR(0, 83, __pyx_L1_error)",
          "5408:   __pyx_t_4 = __Pyx_Py3ClassCreate(__pyx_t_1, __pyx_n_s_FixedString, __pyx_t_2, __pyx_t_3, NULL, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 44, __pyx_L1_error)",
          "5410:   if (PyDict_SetItem(__pyx_d, __pyx_n_s_FixedString, __pyx_t_4) < 0) __PYX_ERR(0, 44, __pyx_L1_error)",
          "5423:   __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_FixedString); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 114, __pyx_L1_error)",
          "5425:   __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 114, __pyx_L1_error)",
          "5430:   __pyx_t_2 = __Pyx_CalculateMetaclass(NULL, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 114, __pyx_L1_error)",
          "5432:   __pyx_t_3 = __Pyx_Py3MetaclassPrepare(__pyx_t_2, __pyx_t_1, __pyx_n_s_ByteFixedString, __pyx_n_s_ByteFixedString, (PyObject *) NULL, __pyx_n_s_clickhouse_driver_columns_string, (PyObject *) NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 114, __pyx_L1_error)",
          "5442:   __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 115, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 77 ---",
          "[Context before]",
          "5481:   __Pyx_INCREF(((PyObject *)(&PyBytes_Type)));",
          "5482:   __Pyx_GIVEREF(((PyObject *)(&PyBytes_Type)));",
          "5483:   PyTuple_SET_ITEM(__pyx_t_4, 1, ((PyObject *)(&PyBytes_Type)));",
          "5485:   __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;",
          "5504:   __Pyx_GOTREF(__pyx_t_4);",
          "5506:   __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;",
          "5516:   __Pyx_GOTREF(__pyx_t_4);",
          "5518:   __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;",
          "5528:   __Pyx_GOTREF(__pyx_t_4);",
          "5530:   __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;",
          "5531:   __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;",
          "5532:   __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;",
          "5533:   __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;",
          "5543:   __Pyx_GOTREF(__pyx_t_1);",
          "5545:   __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;",
          "5552:   __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)",
          "5553:   __Pyx_GOTREF(__pyx_t_1);",
          "",
          "[Removed Lines]",
          "5484:   if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_py_types, __pyx_t_4) < 0) __PYX_ERR(0, 117, __pyx_L1_error)",
          "5494:   if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_null_value, __pyx_kp_b__2) < 0) __PYX_ERR(0, 118, __pyx_L1_error)",
          "5503:   __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_17clickhouse_driver_7columns_12stringcolumn_15ByteFixedString_1read_items, 0, __pyx_n_s_ByteFixedString_read_items, NULL, __pyx_n_s_clickhouse_driver_columns_string, __pyx_d, ((PyObject *)__pyx_codeobj__20)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 120, __pyx_L1_error)",
          "5505:   if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_read_items, __pyx_t_4) < 0) __PYX_ERR(0, 120, __pyx_L1_error)",
          "5515:   __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_17clickhouse_driver_7columns_12stringcolumn_15ByteFixedString_3write_items, 0, __pyx_n_s_ByteFixedString_write_items, NULL, __pyx_n_s_clickhouse_driver_columns_string, __pyx_d, ((PyObject *)__pyx_codeobj__22)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 134, __pyx_L1_error)",
          "5517:   if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_write_items, __pyx_t_4) < 0) __PYX_ERR(0, 134, __pyx_L1_error)",
          "5527:   __pyx_t_4 = __Pyx_Py3ClassCreate(__pyx_t_2, __pyx_n_s_ByteFixedString, __pyx_t_1, __pyx_t_3, NULL, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 116, __pyx_L1_error)",
          "5529:   if (PyDict_SetItem(__pyx_d, __pyx_n_s_ByteFixedString, __pyx_t_4) < 0) __PYX_ERR(0, 116, __pyx_L1_error)",
          "5542:   __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_17clickhouse_driver_7columns_12stringcolumn_1create_string_column, NULL, __pyx_n_s_clickhouse_driver_columns_string); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 164, __pyx_L1_error)",
          "5544:   if (PyDict_SetItem(__pyx_d, __pyx_n_s_create_string_column, __pyx_t_1) < 0) __PYX_ERR(0, 164, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "5450:   if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_py_types, __pyx_t_4) < 0) __PYX_ERR(0, 115, __pyx_L1_error)",
          "5460:   if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_null_value, __pyx_kp_b__2) < 0) __PYX_ERR(0, 116, __pyx_L1_error)",
          "5469:   __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_17clickhouse_driver_7columns_12stringcolumn_15ByteFixedString_1read_items, 0, __pyx_n_s_ByteFixedString_read_items, NULL, __pyx_n_s_clickhouse_driver_columns_string, __pyx_d, ((PyObject *)__pyx_codeobj__20)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 118, __pyx_L1_error)",
          "5471:   if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_read_items, __pyx_t_4) < 0) __PYX_ERR(0, 118, __pyx_L1_error)",
          "5481:   __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_17clickhouse_driver_7columns_12stringcolumn_15ByteFixedString_3write_items, 0, __pyx_n_s_ByteFixedString_write_items, NULL, __pyx_n_s_clickhouse_driver_columns_string, __pyx_d, ((PyObject *)__pyx_codeobj__22)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 131, __pyx_L1_error)",
          "5483:   if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_write_items, __pyx_t_4) < 0) __PYX_ERR(0, 131, __pyx_L1_error)",
          "5493:   __pyx_t_4 = __Pyx_Py3ClassCreate(__pyx_t_2, __pyx_n_s_ByteFixedString, __pyx_t_1, __pyx_t_3, NULL, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 114, __pyx_L1_error)",
          "5495:   if (PyDict_SetItem(__pyx_d, __pyx_n_s_ByteFixedString, __pyx_t_4) < 0) __PYX_ERR(0, 114, __pyx_L1_error)",
          "5508:   __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_17clickhouse_driver_7columns_12stringcolumn_1create_string_column, NULL, __pyx_n_s_clickhouse_driver_columns_string); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 158, __pyx_L1_error)",
          "5510:   if (PyDict_SetItem(__pyx_d, __pyx_n_s_create_string_column, __pyx_t_1) < 0) __PYX_ERR(0, 158, __pyx_L1_error)",
          "",
          "---------------"
        ],
        "clickhouse_driver/columns/stringcolumn.pyx||clickhouse_driver/columns/stringcolumn.pyx": [
          "File: clickhouse_driver/columns/stringcolumn.pyx -> clickhouse_driver/columns/stringcolumn.pyx",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: from cpython cimport Py_INCREF, PyBytes_AsString, PyBytes_FromStringAndSize, \\",
          "2:     PyBytes_Check",
          "5: # Using python's versions of pure c memory management functions for",
          "6: # proper memory statistics count.",
          "7: from cpython.mem cimport PyMem_Malloc, PyMem_Realloc, PyMem_Free",
          "",
          "[Removed Lines]",
          "3: from cpython.bytearray cimport PyByteArray_AsString, \\",
          "4:     PyByteArray_FromStringAndSize",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "35: class ByteString(String):",
          "37:     null_value = b''",
          "39:     def write_items(self, items, buf):",
          "",
          "[Removed Lines]",
          "36:     py_types = (bytearray, bytes)",
          "",
          "[Added Lines]",
          "34:     py_types = (bytes, )",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "55:         encoding = self.encoding.encode('utf-8')",
          "56:         cdef char* c_encoding = encoding",
          "57:         data = buf.read(length * n_items)",
          "60:         cdef char* c_string = <char *>PyMem_Malloc(length + 1)",
          "61:         if not c_string:",
          "",
          "[Removed Lines]",
          "58:         cdef char* data_ptr = PyByteArray_AsString(data)",
          "",
          "[Added Lines]",
          "56:         cdef char* data_ptr = PyBytes_AsString(data)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "121:         cdef Py_ssize_t i",
          "122:         cdef Py_ssize_t length = self.length",
          "123:         data = buf.read(length * n_items)",
          "126:         items = PyTuple_New(n_items)",
          "127:         for i in range(n_items):",
          "128:             item = PyBytes_FromStringAndSize(&data_ptr[i * length], length)",
          "129:             Py_INCREF(item)",
          "130:             PyTuple_SET_ITEM(items, i, item)",
          "132:         return items",
          "134:     def write_items(self, items, buf):",
          "",
          "[Removed Lines]",
          "124:         cdef char* data_ptr = PyByteArray_AsString(data)",
          "",
          "[Added Lines]",
          "122:         cdef char* data_ptr = PyBytes_AsString(data)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "148:             if length < value_len:",
          "149:                 raise errors.TooLargeStringSize()",
          "156:             memcpy(&items_buf[buf_pos], c_value, value_len)",
          "157:             buf_pos += length",
          "",
          "[Removed Lines]",
          "151:             if PyBytes_Check(value):",
          "152:                 c_value = PyBytes_AsString(value)",
          "153:             else:",
          "154:                 c_value = PyByteArray_AsString(value)",
          "",
          "[Added Lines]",
          "148:             c_value = PyBytes_AsString(value)",
          "",
          "---------------"
        ],
        "clickhouse_driver/varint.c||clickhouse_driver/varint.c": [
          "File: clickhouse_driver/varint.c -> clickhouse_driver/varint.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1499:   Py_ssize_t __pyx_v_shift;",
          "1500:   Py_ssize_t __pyx_v_result;",
          "1501:   unsigned char __pyx_v_i;",
          "1502:   PyObject *__pyx_r = NULL;",
          "1503:   __Pyx_RefNannyDeclarations",
          "1504:   PyObject *__pyx_t_1 = NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1502:   PyObject *__pyx_v_read_one = NULL;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1536:   while (1) {",
          "1548:     if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {",
          "1549:       __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);",
          "1550:       if (likely(__pyx_t_3)) {",
          "",
          "[Removed Lines]",
          "1545:     __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_f, __pyx_n_s_read_one); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 38, __pyx_L1_error)",
          "1546:     __Pyx_GOTREF(__pyx_t_2);",
          "1547:     __pyx_t_3 = NULL;",
          "",
          "[Added Lines]",
          "1537:   __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_f, __pyx_n_s_read_one); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 37, __pyx_L1_error)",
          "1538:   __Pyx_GOTREF(__pyx_t_1);",
          "1539:   __pyx_v_read_one = __pyx_t_1;",
          "1540:   __pyx_t_1 = 0;",
          "1558:     __Pyx_INCREF(__pyx_v_read_one);",
          "1559:     __pyx_t_2 = __pyx_v_read_one; __pyx_t_3 = NULL;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1556:     }",
          "1557:     __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);",
          "1558:     __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;",
          "1560:     __Pyx_GOTREF(__pyx_t_1);",
          "1561:     __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;",
          "1563:     __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;",
          "1564:     __pyx_v_i = __pyx_t_4;",
          "1573:     __pyx_v_result = (__pyx_v_result | ((__pyx_v_i & 0x7f) << __pyx_v_shift));",
          "",
          "[Removed Lines]",
          "1559:     if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 38, __pyx_L1_error)",
          "1562:     __pyx_t_4 = __Pyx_PyInt_As_unsigned_char(__pyx_t_1); if (unlikely((__pyx_t_4 == (unsigned char)-1) && PyErr_Occurred())) __PYX_ERR(0, 38, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "1571:     if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 40, __pyx_L1_error)",
          "1574:     __pyx_t_4 = __Pyx_PyInt_As_unsigned_char(__pyx_t_1); if (unlikely((__pyx_t_4 == (unsigned char)-1) && PyErr_Occurred())) __PYX_ERR(0, 40, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1611:   }",
          "1612:   __pyx_L4_break:;",
          "1619:   __Pyx_XDECREF(__pyx_r);",
          "1621:   __Pyx_GOTREF(__pyx_t_1);",
          "1622:   __pyx_r = __pyx_t_1;",
          "1623:   __pyx_t_1 = 0;",
          "",
          "[Removed Lines]",
          "1620:   __pyx_t_1 = PyInt_FromSsize_t(__pyx_v_result); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 44, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "1632:   __pyx_t_1 = PyInt_FromSsize_t(__pyx_v_result); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 46, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1639:   __Pyx_AddTraceback(\"clickhouse_driver.varint.read_varint\", __pyx_clineno, __pyx_lineno, __pyx_filename);",
          "1640:   __pyx_r = NULL;",
          "1641:   __pyx_L0:;",
          "1642:   __Pyx_XGIVEREF(__pyx_r);",
          "1643:   __Pyx_RefNannyFinishContext();",
          "1644:   return __pyx_r;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1654:   __Pyx_XDECREF(__pyx_v_read_one);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1741:   __Pyx_GOTREF(__pyx_tuple__3);",
          "1742:   __Pyx_GIVEREF(__pyx_tuple__3);",
          "1744:   __Pyx_RefNannyFinishContext();",
          "1745:   return 0;",
          "1746:   __pyx_L1_error:;",
          "",
          "[Removed Lines]",
          "1740:   __pyx_tuple__3 = PyTuple_Pack(4, __pyx_n_s_f, __pyx_n_s_shift, __pyx_n_s_result, __pyx_n_s_i); if (unlikely(!__pyx_tuple__3)) __PYX_ERR(0, 29, __pyx_L1_error)",
          "1743:   __pyx_codeobj__4 = (PyObject*)__Pyx_PyCode_New(1, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__3, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_clickhouse_driver_varint_pyx, __pyx_n_s_read_varint, 29, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__4)) __PYX_ERR(0, 29, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "1753:   __pyx_tuple__3 = PyTuple_Pack(5, __pyx_n_s_f, __pyx_n_s_shift, __pyx_n_s_result, __pyx_n_s_i, __pyx_n_s_read_one); if (unlikely(!__pyx_tuple__3)) __PYX_ERR(0, 29, __pyx_L1_error)",
          "1756:   __pyx_codeobj__4 = (PyObject*)__Pyx_PyCode_New(1, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__3, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_clickhouse_driver_varint_pyx, __pyx_n_s_read_varint, 29, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__4)) __PYX_ERR(0, 29, __pyx_L1_error)",
          "",
          "---------------"
        ],
        "clickhouse_driver/varint.pyx||clickhouse_driver/varint.pyx": [
          "File: clickhouse_driver/varint.pyx -> clickhouse_driver/varint.pyx",
          "--- Hunk 1 ---",
          "[Context before]",
          "34:     cdef Py_ssize_t result = 0",
          "35:     cdef unsigned char i",
          "37:     while True:",
          "39:         result |= (i & 0x7f) << shift",
          "40:         shift += 7",
          "41:         if i < 0x80:",
          "",
          "[Removed Lines]",
          "38:         i = f.read_one()",
          "",
          "[Added Lines]",
          "37:     read_one = f.read_one",
          "40:         i = read_one()",
          "",
          "---------------"
        ],
        "tests/columns/test_fixedstring.py||tests/columns/test_fixedstring.py": [
          "File: tests/columns/test_fixedstring.py -> tests/columns/test_fixedstring.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: class FixedStringTestCase(BaseTestCase):",
          "10:     def test_simple(self):",
          "13:         data = [('a', ), ('bb', ), ('ccc', ), ('dddd', ), ('\u044f', )]",
          "15:             self.client.execute(",
          "16:                 'INSERT INTO test (a) VALUES', data",
          "17:             )",
          "",
          "[Removed Lines]",
          "11:         columns = 'a FixedString(4)'",
          "14:         with self.create_table(columns):",
          "",
          "[Added Lines]",
          "12:         with self.create_table('a FixedString(4)'):",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "32:             self.assertEqual(inserted, data)",
          "34:     def test_non_utf(self):",
          "37:         data = [('\u044f\u043d\u0434\u0435\u043a\u0441'.encode('koi8-r'), )]",
          "39:             self.client.execute(",
          "40:                 'INSERT INTO test (a) VALUES', data",
          "41:             )",
          "",
          "[Removed Lines]",
          "35:         columns = 'a FixedString(6)'",
          "38:         with self.create_table(columns):",
          "",
          "[Added Lines]",
          "34:         with self.create_table('a FixedString(6)'):",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "82:             self.assertEqual(inserted, data)",
          "84:     def test_null_byte_in_the_middle(self):",
          "87:         data = [('test\\0test', )]",
          "89:             self.client.execute(",
          "90:                 'INSERT INTO test (a) VALUES', data",
          "91:             )",
          "",
          "[Removed Lines]",
          "85:         columns = 'a FixedString(9)'",
          "88:         with self.create_table(columns):",
          "",
          "[Added Lines]",
          "82:         with self.create_table('a FixedString(9)'):",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "95:             self.assertEqual(inserted, data)",
          "97:     def test_empty(self):",
          "100:         data = [('',)]",
          "102:             self.client.execute(",
          "103:                 'INSERT INTO test (a) VALUES', data",
          "104:             )",
          "",
          "[Removed Lines]",
          "98:         columns = 'a FixedString(5)'",
          "101:         with self.create_table(columns):",
          "",
          "[Added Lines]",
          "93:         with self.create_table('a FixedString(5)'):",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "107:             inserted = self.client.execute(query)",
          "108:             self.assertEqual(inserted, data)",
          "117:         data = [(('\u044f\u043d\u0434\u0435\u043a\u0441'), ), (('test'), )]",
          "119:             self.client.execute(",
          "121:             )",
          "123:             query = 'SELECT * FROM test'",
          "",
          "[Removed Lines]",
          "111: class CustomEncodingFixedStringTestCase(BaseTestCase):",
          "112:     client_kwargs = {'settings': {'strings_encoding': 'cp1251'}}",
          "114:     def test_decoded(self):",
          "115:         columns = 'a FixedString(10)'",
          "118:         with self.create_table(columns):",
          "120:                 'INSERT INTO test (a) VALUES', data",
          "",
          "[Added Lines]",
          "102:     def test_custom_encoding(self):",
          "103:         settings = {'strings_encoding': 'cp1251'}",
          "106:         with self.create_table('a FixedString(10)'):",
          "108:                 'INSERT INTO test (a) VALUES', data, settings=settings",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "128:                 'test\\\\0\\\\0\\\\0\\\\0\\\\0\\\\0\\n'",
          "129:             )",
          "132:             self.assertEqual(inserted, data)",
          "133:             self.assertIsInstance(inserted[0][0], text_type)",
          "134:             self.assertIsInstance(inserted[1][0], text_type)",
          "137: class ByteFixedStringTestCase(BaseTestCase):",
          "138:     client_kwargs = {'settings': {'strings_as_bytes': True}}",
          "",
          "[Removed Lines]",
          "131:             inserted = self.client.execute(query)",
          "",
          "[Added Lines]",
          "119:             inserted = self.client.execute(query, settings=settings)",
          "124:     def test_not_supported_types(self):",
          "125:         datas = [",
          "126:             [(bytearray(b'asd'), )],",
          "127:             [(123, )]",
          "128:         ]",
          "129:         with self.create_table('a String'):",
          "130:             for data in datas:",
          "131:                 with self.assertRaises(errors.TypeMismatchError) as e:",
          "132:                     self.client.execute(",
          "133:                         'INSERT INTO test (a) VALUES', data,",
          "134:                         types_check=True",
          "135:                     )",
          "137:                 self.assertIn('for column \"a\"', str(e.exception))",
          "139:                 with self.assertRaises(AttributeError):",
          "140:                     self.client.execute(",
          "141:                         'INSERT INTO test (a) VALUES', data",
          "142:                     )",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "155:                 )",
          "157:     def test_not_decoded(self):",
          "160:         data = [",
          "162:             (bytes('test'.encode('cp1251')), ),",
          "163:         ]",
          "165:             self.client.execute(",
          "166:                 'INSERT INTO test (a) VALUES', data",
          "167:             )",
          "",
          "[Removed Lines]",
          "158:         columns = 'a FixedString(8)'",
          "161:             (bytearray('\u044f\u043d\u0434\u0435\u043a\u0441'.encode('cp1251')), ),",
          "164:         with self.create_table(columns):",
          "",
          "[Added Lines]",
          "167:             (bytes('\u044f\u043d\u0434\u0435\u043a\u0441'.encode('cp1251')), ),",
          "170:         with self.create_table('a FixedString(8)'):",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "205:             inserted = self.client.execute(query)",
          "206:             self.assertEqual(inserted, data)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "214:     def test_not_supported_types(self):",
          "215:         datas = [",
          "216:             [('asd', )],",
          "217:             [(bytearray(b'asd'), )],",
          "218:             [(123, )]",
          "219:         ]",
          "220:         with self.create_table('a String'):",
          "221:             for data in datas:",
          "222:                 with self.assertRaises(errors.TypeMismatchError) as e:",
          "223:                     self.client.execute(",
          "224:                         'INSERT INTO test (a) VALUES', data,",
          "225:                         types_check=True",
          "226:                     )",
          "228:                 self.assertIn('for column \"a\"', str(e.exception))",
          "230:                 with self.assertRaises(ValueError) as e:",
          "231:                     self.client.execute(",
          "232:                         'INSERT INTO test (a) VALUES', data",
          "233:                     )",
          "235:                 self.assertIn('bytes object expected', str(e.exception))",
          "",
          "---------------"
        ],
        "tests/columns/test_string.py||tests/columns/test_string.py": [
          "File: tests/columns/test_string.py -> tests/columns/test_string.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: class StringTestCase(BaseTestCase):",
          "10:     def test_unicode(self):",
          "13:         data = [('\u044f\u043d\u0434\u0435\u043a\u0441', )]",
          "15:             self.client.execute(",
          "16:                 'INSERT INTO test (a) VALUES', data",
          "17:             )",
          "",
          "[Removed Lines]",
          "11:         columns = 'a String'",
          "14:         with self.create_table(columns):",
          "",
          "[Added Lines]",
          "12:         with self.create_table('a String'):",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "24:             self.assertEqual(inserted, data)",
          "26:     def test_non_utf(self):",
          "29:         data = [('\u044f\u043d\u0434\u0435\u043a\u0441'.encode('koi8-r'), )]",
          "31:             self.client.execute(",
          "32:                 'INSERT INTO test (a) VALUES', data",
          "33:             )",
          "",
          "[Removed Lines]",
          "27:         columns = 'a String'",
          "30:         with self.create_table(columns):",
          "",
          "[Added Lines]",
          "26:         with self.create_table('a String'):",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "40:             self.assertEqual(inserted, data)",
          "42:     def test_null_byte_in_the_middle(self):",
          "45:         data = [('a\\x00b', )]",
          "47:             self.client.execute(",
          "48:                 'INSERT INTO test (a) VALUES', data",
          "49:             )",
          "",
          "[Removed Lines]",
          "43:         columns = 'a String'",
          "46:         with self.create_table(columns):",
          "",
          "[Added Lines]",
          "40:         with self.create_table('a String'):",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "70:             self.assertEqual(inserted, data)",
          "72:     def test_buffer_reader(self):",
          "75:         data = [('a' * 300, )] * 300",
          "77:             self.client.execute(",
          "78:                 'INSERT INTO test (a) VALUES', data",
          "79:             )",
          "",
          "[Removed Lines]",
          "73:         columns = 'a String'",
          "76:         with self.create_table(columns):",
          "",
          "[Added Lines]",
          "68:         with self.create_table('a String'):",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "84:             self.assertEqual(inserted, data)",
          "86:     def test_compressed_client(self):",
          "89:         with self.created_client(compression=True) as client:",
          "90:             data = [('a' * 300, )]",
          "92:                 client.execute(",
          "93:                     'INSERT INTO test (a) VALUES', data",
          "94:                 )",
          "",
          "[Removed Lines]",
          "87:         columns = 'a String'",
          "91:             with self.create_table(columns):",
          "",
          "[Added Lines]",
          "81:             with self.create_table('a String'):",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "98:                 inserted = client.execute(query)",
          "99:                 self.assertEqual(inserted, data)",
          "102: class ByteStringTestCase(BaseTestCase):",
          "103:     client_kwargs = {'settings': {'strings_as_bytes': True}}",
          "105:     def test_not_decoded(self):",
          "108:         data = [",
          "110:             (bytes('test'.encode('cp1251')), ),",
          "111:         ]",
          "113:             self.client.execute(",
          "114:                 'INSERT INTO test (a) VALUES', data",
          "115:             )",
          "",
          "[Removed Lines]",
          "106:         columns = 'a String'",
          "109:             (bytearray('\u044f\u043d\u0434\u0435\u043a\u0441'.encode('cp1251')), ),",
          "112:         with self.create_table(columns):",
          "",
          "[Added Lines]",
          "91:     def test_custom_encoding(self):",
          "92:         settings = {'strings_encoding': 'cp1251'}",
          "94:         data = [(('\u044f\u043d\u0434\u0435\u043a\u0441'), ), (('test'), )]",
          "95:         with self.create_table('a String'):",
          "96:             self.client.execute(",
          "97:                 'INSERT INTO test (a) VALUES', data, settings=settings",
          "98:             )",
          "100:             query = 'SELECT * FROM test'",
          "101:             inserted = self.emit_cli(query, encoding='cp1251')",
          "102:             self.assertEqual(inserted, '\u044f\u043d\u0434\u0435\u043a\u0441\\ntest\\n')",
          "104:             inserted = self.client.execute(query, settings=settings)",
          "105:             self.assertEqual(inserted, data)",
          "106:             self.assertIsInstance(inserted[0][0], text_type)",
          "107:             self.assertIsInstance(inserted[1][0], text_type)",
          "109:     def test_not_supported_types(self):",
          "110:         datas = [",
          "111:             [(bytearray(b'asd'), )],",
          "112:             [(123, )]",
          "113:         ]",
          "114:         with self.create_table('a String'):",
          "115:             for data in datas:",
          "116:                 with self.assertRaises(errors.TypeMismatchError) as e:",
          "117:                     self.client.execute(",
          "118:                         'INSERT INTO test (a) VALUES', data,",
          "119:                         types_check=True",
          "120:                     )",
          "122:                 self.assertIn('for column \"a\"', str(e.exception))",
          "124:                 with self.assertRaises(AttributeError):",
          "125:                     self.client.execute(",
          "126:                         'INSERT INTO test (a) VALUES', data",
          "127:                     )",
          "135:             (bytes('\u044f\u043d\u0434\u0435\u043a\u0441'.encode('cp1251')), ),",
          "138:         with self.create_table('a String'):",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "123:             self.assertIsInstance(inserted[0][0], bytes)",
          "124:             self.assertIsInstance(inserted[1][0], bytes)",
          "139:     def test_nullable(self):",
          "140:         with self.create_table('a Nullable(String)'):",
          "141:             data = [(None, ), (b'test', ), (None, ), (b'nullable', )]",
          "",
          "[Removed Lines]",
          "126:     def test_not_decoded_bytearray_expected(self):",
          "127:         columns = 'a String'",
          "129:         data = [('asd', )]",
          "130:         with self.create_table(columns):",
          "131:             with self.assertRaises(errors.TypeMismatchError) as e:",
          "132:                 self.client.execute(",
          "133:                     'INSERT INTO test (a) VALUES', data,",
          "134:                     types_check=True",
          "135:                 )",
          "137:             self.assertIn('for column \"a\"', str(e.exception))",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "150:             inserted = self.client.execute(query)",
          "151:             self.assertEqual(inserted, data)",
          "",
          "[Removed Lines]",
          "154: class CustomEncodingStringTestCase(BaseTestCase):",
          "155:     client_kwargs = {'settings': {'strings_encoding': 'cp1251'}}",
          "157:     def test_decoded(self):",
          "158:         columns = 'a String'",
          "160:         data = [(('\u044f\u043d\u0434\u0435\u043a\u0441'), ), (('test'), )]",
          "161:         with self.create_table(columns):",
          "162:             self.client.execute(",
          "163:                 'INSERT INTO test (a) VALUES', data",
          "164:             )",
          "166:             query = 'SELECT * FROM test'",
          "167:             inserted = self.emit_cli(query, encoding='cp1251')",
          "168:             self.assertEqual(inserted, '\u044f\u043d\u0434\u0435\u043a\u0441\\ntest\\n')",
          "170:             inserted = self.client.execute(query)",
          "171:             self.assertEqual(inserted, data)",
          "172:             self.assertIsInstance(inserted[0][0], text_type)",
          "173:             self.assertIsInstance(inserted[1][0], text_type)",
          "",
          "[Added Lines]",
          "166:     def test_not_supported_types(self):",
          "167:         datas = [",
          "168:             [('asd', )],",
          "169:             [(bytearray(b'asd'), )],",
          "170:             [(123, )]",
          "171:         ]",
          "172:         with self.create_table('a String'):",
          "173:             for data in datas:",
          "174:                 with self.assertRaises(errors.TypeMismatchError) as e:",
          "175:                     self.client.execute(",
          "176:                         'INSERT INTO test (a) VALUES', data,",
          "177:                         types_check=True",
          "178:                     )",
          "180:                 self.assertIn('for column \"a\"', str(e.exception))",
          "182:                 with self.assertRaises(ValueError) as e:",
          "183:                     self.client.execute(",
          "184:                         'INSERT INTO test (a) VALUES', data",
          "185:                     )",
          "187:                 self.assertIn('bytes object expected', str(e.exception))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3507d73b39b74372af8cc68f1bfc1f1b3f166e67",
      "candidate_info": {
        "commit_hash": "3507d73b39b74372af8cc68f1bfc1f1b3f166e67",
        "repo": "mymarilyn/clickhouse-driver",
        "commit_url": "https://github.com/mymarilyn/clickhouse-driver/commit/3507d73b39b74372af8cc68f1bfc1f1b3f166e67",
        "files": [
          "clickhouse_driver/bufferedwriter.c",
          "clickhouse_driver/bufferedwriter.pyx",
          "clickhouse_driver/varint.c",
          "clickhouse_driver/varint.pyx"
        ],
        "message": "String insertion 50% speed optimization",
        "before_after_code_files": [
          "clickhouse_driver/bufferedwriter.c||clickhouse_driver/bufferedwriter.c",
          "clickhouse_driver/bufferedwriter.pyx||clickhouse_driver/bufferedwriter.pyx",
          "clickhouse_driver/varint.c||clickhouse_driver/varint.c",
          "clickhouse_driver/varint.pyx||clickhouse_driver/varint.pyx"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "clickhouse_driver/varint.c||clickhouse_driver/varint.c",
            "clickhouse_driver/varint.pyx||clickhouse_driver/varint.pyx"
          ],
          "candidate": [
            "clickhouse_driver/varint.c||clickhouse_driver/varint.c",
            "clickhouse_driver/varint.pyx||clickhouse_driver/varint.pyx"
          ]
        }
      },
      "candidate_diff": {
        "clickhouse_driver/bufferedwriter.c||clickhouse_driver/bufferedwriter.c": [
          "File: clickhouse_driver/bufferedwriter.c -> clickhouse_driver/bufferedwriter.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1435: static const char __pyx_k_pyx_vtable[] = \"__pyx_vtable__\";",
          "1436: static const char __pyx_k_MemoryError[] = \"MemoryError\";",
          "1437: static const char __pyx_k_PickleError[] = \"PickleError\";",
          "1438: static const char __pyx_k_pyx_checksum[] = \"__pyx_checksum\";",
          "1439: static const char __pyx_k_stringsource[] = \"stringsource\";",
          "1441: static const char __pyx_k_reduce_cython[] = \"__reduce_cython__\";",
          "1442: static const char __pyx_k_BufferedWriter[] = \"BufferedWriter\";",
          "1443: static const char __pyx_k_pyx_PickleError[] = \"__pyx_PickleError\";",
          "",
          "[Removed Lines]",
          "1440: static const char __pyx_k_write_varint[] = \"write_varint\";",
          "",
          "[Added Lines]",
          "1438: static const char __pyx_k_make_varint[] = \"make_varint\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1484: static PyObject *__pyx_n_s_items;",
          "1485: static PyObject *__pyx_n_s_length;",
          "1486: static PyObject *__pyx_n_s_main;",
          "1487: static PyObject *__pyx_n_s_name;",
          "1488: static PyObject *__pyx_n_s_new;",
          "1489: static PyObject *__pyx_n_s_pickle;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1487: static PyObject *__pyx_n_s_make_varint;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1511: static PyObject *__pyx_n_s_write;",
          "1512: static PyObject *__pyx_n_s_write_fixed_strings_as_bytes;",
          "1513: static PyObject *__pyx_n_s_write_into_stream;",
          "",
          "[Removed Lines]",
          "1514: static PyObject *__pyx_n_s_write_varint;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1586:         else goto __pyx_L5_argtuple_error;",
          "1587:       }",
          "1588:       if (unlikely(kw_args > 0)) {",
          "1590:       }",
          "1591:     } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {",
          "1592:       goto __pyx_L5_argtuple_error;",
          "1593:     } else {",
          "1594:       values[0] = PyTuple_GET_ITEM(__pyx_args, 0);",
          "1595:     }",
          "1597:   }",
          "1598:   goto __pyx_L4_argument_unpacking_done;",
          "1599:   __pyx_L5_argtuple_error:;",
          "1601:   __pyx_L3_error:;",
          "1602:   __Pyx_AddTraceback(\"clickhouse_driver.bufferedwriter.BufferedWriter.__init__\", __pyx_clineno, __pyx_lineno, __pyx_filename);",
          "1603:   __Pyx_RefNannyFinishContext();",
          "",
          "[Removed Lines]",
          "1589:         if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, \"__init__\") < 0)) __PYX_ERR(0, 13, __pyx_L3_error)",
          "1596:     __pyx_v_bufsize = __Pyx_PyInt_As_unsigned_PY_LONG_LONG(values[0]); if (unlikely((__pyx_v_bufsize == (unsigned PY_LONG_LONG)-1) && PyErr_Occurred())) __PYX_ERR(0, 13, __pyx_L3_error)",
          "1600:   __Pyx_RaiseArgtupleInvalid(\"__init__\", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 13, __pyx_L3_error)",
          "",
          "[Added Lines]",
          "1589:         if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, \"__init__\") < 0)) __PYX_ERR(0, 14, __pyx_L3_error)",
          "1596:     __pyx_v_bufsize = __Pyx_PyInt_As_unsigned_PY_LONG_LONG(values[0]); if (unlikely((__pyx_v_bufsize == (unsigned PY_LONG_LONG)-1) && PyErr_Occurred())) __PYX_ERR(0, 14, __pyx_L3_error)",
          "1600:   __Pyx_RaiseArgtupleInvalid(\"__init__\", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 14, __pyx_L3_error)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1641:   __pyx_t_1 = ((!(__pyx_v_self->buffer != 0)) != 0);",
          "1642:   if (unlikely(__pyx_t_1)) {",
          "",
          "[Removed Lines]",
          "1651:     PyErr_NoMemory(); __PYX_ERR(0, 16, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "1651:     PyErr_NoMemory(); __PYX_ERR(0, 17, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1678:   __pyx_v_self->buffer_size = __pyx_v_bufsize;",
          "1688:   __Pyx_GOTREF(__pyx_t_3);",
          "1689:   __Pyx_INCREF(((PyObject *)__pyx_ptype_17clickhouse_driver_14bufferedwriter_BufferedWriter));",
          "1690:   __Pyx_GIVEREF(((PyObject *)__pyx_ptype_17clickhouse_driver_14bufferedwriter_BufferedWriter));",
          "",
          "[Removed Lines]",
          "1687:   __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 21, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "1687:   __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 22, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1692:   __Pyx_INCREF(((PyObject *)__pyx_v_self));",
          "1693:   __Pyx_GIVEREF(((PyObject *)__pyx_v_self));",
          "1694:   PyTuple_SET_ITEM(__pyx_t_3, 1, ((PyObject *)__pyx_v_self));",
          "1696:   __Pyx_GOTREF(__pyx_t_4);",
          "1697:   __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;",
          "1699:   __Pyx_GOTREF(__pyx_t_3);",
          "1700:   __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;",
          "1701:   __pyx_t_4 = NULL;",
          "",
          "[Removed Lines]",
          "1695:   __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_super, __pyx_t_3, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 21, __pyx_L1_error)",
          "1698:   __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_init); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 21, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "1695:   __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_super, __pyx_t_3, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 22, __pyx_L1_error)",
          "1698:   __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_init); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 22, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1710:   }",
          "1711:   __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_3);",
          "1712:   __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;",
          "1714:   __Pyx_GOTREF(__pyx_t_2);",
          "1715:   __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;",
          "1716:   __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;",
          "",
          "[Removed Lines]",
          "1713:   if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 21, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "1713:   if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 22, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1810:     if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {",
          "1811:       PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));",
          "1812:       #endif",
          "1814:       __Pyx_GOTREF(__pyx_t_1);",
          "1815:       if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_17clickhouse_driver_14bufferedwriter_14BufferedWriter_5write_into_stream)) {",
          "1816:         __Pyx_XDECREF(__pyx_r);",
          "",
          "[Removed Lines]",
          "1813:       __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_write_into_stream); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 26, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "1813:       __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_write_into_stream); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 27, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1827:         }",
          "1828:         __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_3);",
          "1829:         __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;",
          "1831:         __Pyx_GOTREF(__pyx_t_2);",
          "1832:         __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;",
          "1833:         __pyx_r = __pyx_t_2;",
          "",
          "[Removed Lines]",
          "1830:         if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 26, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "1830:         if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 27, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1858:   __Pyx_Raise(__pyx_builtin_NotImplementedError, 0, 0, 0);",
          "",
          "[Removed Lines]",
          "1859:   __PYX_ERR(0, 27, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "1859:   __PYX_ERR(0, 28, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1902:   int __pyx_clineno = 0;",
          "1903:   __Pyx_RefNannySetupContext(\"write_into_stream\", 0);",
          "1904:   __Pyx_XDECREF(__pyx_r);",
          "1906:   __Pyx_GOTREF(__pyx_t_1);",
          "1907:   __pyx_r = __pyx_t_1;",
          "1908:   __pyx_t_1 = 0;",
          "",
          "[Removed Lines]",
          "1905:   __pyx_t_1 = __pyx_f_17clickhouse_driver_14bufferedwriter_14BufferedWriter_write_into_stream(__pyx_v_self, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 26, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "1905:   __pyx_t_1 = __pyx_f_17clickhouse_driver_14bufferedwriter_14BufferedWriter_write_into_stream(__pyx_v_self, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 27, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1919:   return __pyx_r;",
          "1920: }",
          "1931: static PyObject *__pyx_f_17clickhouse_driver_14bufferedwriter_14BufferedWriter_write(struct __pyx_obj_17clickhouse_driver_14bufferedwriter_BufferedWriter *__pyx_v_self, PyObject *__pyx_v_data, int __pyx_skip_dispatch) {",
          "1933:   unsigned PY_LONG_LONG __pyx_v_size;",
          "1934:   unsigned PY_LONG_LONG __pyx_v_data_len;",
          "1935:   char *__pyx_v_c_data;",
          "1936:   PyObject *__pyx_r = NULL;",
          "",
          "[Removed Lines]",
          "1932:   unsigned PY_LONG_LONG __pyx_v_written;",
          "",
          "[Added Lines]",
          "1933:   unsigned PY_LONG_LONG __pyx_v_written;",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1939:   PyObject *__pyx_t_2 = NULL;",
          "1940:   PyObject *__pyx_t_3 = NULL;",
          "1941:   PyObject *__pyx_t_4 = NULL;",
          "1945:   unsigned PY_LONG_LONG __pyx_t_8;",
          "1948:   int __pyx_lineno = 0;",
          "1949:   const char *__pyx_filename = NULL;",
          "1950:   int __pyx_clineno = 0;",
          "",
          "[Removed Lines]",
          "1942:   Py_ssize_t __pyx_t_5;",
          "1943:   char *__pyx_t_6;",
          "1944:   int __pyx_t_7;",
          "1946:   unsigned PY_LONG_LONG __pyx_t_9;",
          "1947:   unsigned PY_LONG_LONG __pyx_t_10;",
          "",
          "[Added Lines]",
          "1942:   int __pyx_t_5;",
          "1943:   unsigned PY_LONG_LONG __pyx_t_6;",
          "1944:   unsigned PY_LONG_LONG __pyx_t_7;",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1958:     if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {",
          "1959:       PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));",
          "1960:       #endif",
          "1962:       __Pyx_GOTREF(__pyx_t_1);",
          "1963:       if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_17clickhouse_driver_14bufferedwriter_14BufferedWriter_7write)) {",
          "1964:         __Pyx_XDECREF(__pyx_r);",
          "",
          "[Removed Lines]",
          "1961:       __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_write); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 29, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "1959:       __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_write); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 30, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1975:         }",
          "1976:         __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_4, __pyx_v_data) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_data);",
          "1977:         __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;",
          "1979:         __Pyx_GOTREF(__pyx_t_2);",
          "1980:         __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;",
          "1981:         __pyx_r = __pyx_t_2;",
          "",
          "[Removed Lines]",
          "1978:         if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 29, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "1976:         if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 30, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1996:     #endif",
          "1997:   }",
          "2006:   __pyx_v_written = 0;",
          "2035:   while (1) {",
          "2050:     } else {",
          "2052:     }",
          "",
          "[Removed Lines]",
          "2015:   __pyx_t_5 = PyObject_Length(__pyx_v_data); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1))) __PYX_ERR(0, 32, __pyx_L1_error)",
          "2016:   __pyx_v_data_len = __pyx_t_5;",
          "2025:   __pyx_t_6 = PyBytes_AsString(__pyx_v_data); if (unlikely(__pyx_t_6 == ((char *)NULL))) __PYX_ERR(0, 35, __pyx_L1_error)",
          "2026:   __pyx_v_c_data = __pyx_t_6;",
          "2036:     __pyx_t_7 = ((__pyx_v_written < __pyx_v_data_len) != 0);",
          "2037:     if (!__pyx_t_7) break;",
          "2046:     __pyx_t_8 = (__pyx_v_self->buffer_size - __pyx_v_self->position);",
          "2047:     __pyx_t_9 = (__pyx_v_data_len - __pyx_v_written);",
          "2048:     if (((__pyx_t_8 < __pyx_t_9) != 0)) {",
          "2049:       __pyx_t_10 = __pyx_t_8;",
          "2051:       __pyx_t_10 = __pyx_t_9;",
          "2053:     __pyx_v_size = __pyx_t_10;",
          "",
          "[Added Lines]",
          "2013:   __pyx_v_data_len = PyBytes_GET_SIZE(__pyx_v_data);",
          "2022:   __pyx_v_c_data = PyBytes_AS_STRING(__pyx_v_data);",
          "2032:     __pyx_t_5 = ((__pyx_v_written < __pyx_v_data_len) != 0);",
          "2033:     if (!__pyx_t_5) break;",
          "2042:     __pyx_t_6 = (__pyx_v_self->buffer_size - __pyx_v_self->position);",
          "2043:     __pyx_t_7 = (__pyx_v_data_len - __pyx_v_written);",
          "2044:     if (((__pyx_t_6 < __pyx_t_7) != 0)) {",
          "2045:       __pyx_t_8 = __pyx_t_6;",
          "2047:       __pyx_t_8 = __pyx_t_7;",
          "2049:     __pyx_v_size = __pyx_t_8;",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "2062:     (void)(memcpy((&(__pyx_v_self->buffer[__pyx_v_self->position])), (&(__pyx_v_c_data[__pyx_v_written])), __pyx_v_size));",
          "2082:       __Pyx_GOTREF(__pyx_t_1);",
          "2083:       __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;",
          "",
          "[Removed Lines]",
          "2071:     __pyx_t_7 = ((__pyx_v_self->position == __pyx_v_self->buffer_size) != 0);",
          "2072:     if (__pyx_t_7) {",
          "2081:       __pyx_t_1 = ((struct __pyx_vtabstruct_17clickhouse_driver_14bufferedwriter_BufferedWriter *)__pyx_v_self->__pyx_vtab)->write_into_stream(__pyx_v_self, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 42, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "2067:     __pyx_t_5 = ((__pyx_v_self->position == __pyx_v_self->buffer_size) != 0);",
          "2068:     if (__pyx_t_5) {",
          "2077:       __pyx_t_1 = ((struct __pyx_vtabstruct_17clickhouse_driver_14bufferedwriter_BufferedWriter *)__pyx_v_self->__pyx_vtab)->write_into_stream(__pyx_v_self, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 40, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "2156:   int __pyx_clineno = 0;",
          "2157:   __Pyx_RefNannySetupContext(\"write\", 0);",
          "2158:   __Pyx_XDECREF(__pyx_r);",
          "2160:   __Pyx_GOTREF(__pyx_t_1);",
          "2161:   __pyx_r = __pyx_t_1;",
          "2162:   __pyx_t_1 = 0;",
          "",
          "[Removed Lines]",
          "2159:   __pyx_t_1 = __pyx_f_17clickhouse_driver_14bufferedwriter_14BufferedWriter_write(__pyx_v_self, __pyx_v_data, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 29, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "2155:   __pyx_t_1 = __pyx_f_17clickhouse_driver_14bufferedwriter_14BufferedWriter_write(__pyx_v_self, __pyx_v_data, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 30, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "2203:   int __pyx_clineno = 0;",
          "2204:   __Pyx_RefNannySetupContext(\"flush\", 0);",
          "2214:   __Pyx_GOTREF(__pyx_t_1);",
          "2215:   __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;",
          "",
          "[Removed Lines]",
          "2213:   __pyx_t_1 = ((struct __pyx_vtabstruct_17clickhouse_driver_14bufferedwriter_BufferedWriter *)__pyx_v_self->__pyx_vtab)->write_into_stream(__pyx_v_self, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 48, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "2209:   __pyx_t_1 = ((struct __pyx_vtabstruct_17clickhouse_driver_14bufferedwriter_BufferedWriter *)__pyx_v_self->__pyx_vtab)->write_into_stream(__pyx_v_self, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 46, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "2282:         }",
          "2283:       }",
          "2284:       if (unlikely(kw_args > 0)) {",
          "2286:       }",
          "2287:     } else {",
          "2288:       switch (PyTuple_GET_SIZE(__pyx_args)) {",
          "",
          "[Removed Lines]",
          "2285:         if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, \"write_strings\") < 0)) __PYX_ERR(0, 50, __pyx_L3_error)",
          "",
          "[Added Lines]",
          "2281:         if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, \"write_strings\") < 0)) __PYX_ERR(0, 48, __pyx_L3_error)",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "2298:   }",
          "2299:   goto __pyx_L4_argument_unpacking_done;",
          "2300:   __pyx_L5_argtuple_error:;",
          "2302:   __pyx_L3_error:;",
          "2303:   __Pyx_AddTraceback(\"clickhouse_driver.bufferedwriter.BufferedWriter.write_strings\", __pyx_clineno, __pyx_lineno, __pyx_filename);",
          "2304:   __Pyx_RefNannyFinishContext();",
          "",
          "[Removed Lines]",
          "2301:   __Pyx_RaiseArgtupleInvalid(\"write_strings\", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 50, __pyx_L3_error)",
          "",
          "[Added Lines]",
          "2297:   __Pyx_RaiseArgtupleInvalid(\"write_strings\", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 48, __pyx_L3_error)",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "2323:   PyObject *__pyx_t_5 = NULL;",
          "2324:   PyObject *__pyx_t_6 = NULL;",
          "2325:   PyObject *__pyx_t_7 = NULL;",
          "2330:   int __pyx_lineno = 0;",
          "2331:   const char *__pyx_filename = NULL;",
          "2332:   int __pyx_clineno = 0;",
          "2333:   __Pyx_RefNannySetupContext(\"write_strings\", 0);",
          "",
          "[Removed Lines]",
          "2326:   Py_ssize_t __pyx_t_8;",
          "2327:   PyObject *__pyx_t_9 = NULL;",
          "2328:   int __pyx_t_10;",
          "2329:   PyObject *__pyx_t_11 = NULL;",
          "",
          "[Added Lines]",
          "2322:   PyObject *__pyx_t_8 = NULL;",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "2353:     __pyx_t_2 = __pyx_v_items; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;",
          "2354:     __pyx_t_4 = NULL;",
          "2355:   } else {",
          "2357:     __Pyx_GOTREF(__pyx_t_2);",
          "2359:   }",
          "2360:   for (;;) {",
          "2361:     if (likely(!__pyx_t_4)) {",
          "2362:       if (likely(PyList_CheckExact(__pyx_t_2))) {",
          "2363:         if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;",
          "2364:         #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS",
          "2366:         #else",
          "2368:         __Pyx_GOTREF(__pyx_t_5);",
          "2369:         #endif",
          "2370:       } else {",
          "2371:         if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;",
          "2372:         #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS",
          "2374:         #else",
          "2376:         __Pyx_GOTREF(__pyx_t_5);",
          "2377:         #endif",
          "2378:       }",
          "",
          "[Removed Lines]",
          "2356:     __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_v_items); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 53, __pyx_L1_error)",
          "2358:     __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 53, __pyx_L1_error)",
          "2365:         __pyx_t_5 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 53, __pyx_L1_error)",
          "2367:         __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 53, __pyx_L1_error)",
          "2373:         __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 53, __pyx_L1_error)",
          "2375:         __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 53, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "2349:     __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_v_items); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 51, __pyx_L1_error)",
          "2351:     __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 51, __pyx_L1_error)",
          "2358:         __pyx_t_5 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 51, __pyx_L1_error)",
          "2360:         __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 51, __pyx_L1_error)",
          "2366:         __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 51, __pyx_L1_error)",
          "2368:         __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 51, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "2382:         PyObject* exc_type = PyErr_Occurred();",
          "2383:         if (exc_type) {",
          "2384:           if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();",
          "2386:         }",
          "2387:         break;",
          "2388:       }",
          "",
          "[Removed Lines]",
          "2385:           else __PYX_ERR(0, 53, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "2378:           else __PYX_ERR(0, 51, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "2411:       __pyx_t_1 = (__pyx_v_do_encode != 0);",
          "2412:       if (likely(__pyx_t_1)) {",
          "2422:         __Pyx_GOTREF(__pyx_t_6);",
          "2423:         __pyx_t_7 = NULL;",
          "2424:         if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {",
          "",
          "[Removed Lines]",
          "2421:         __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_value, __pyx_n_s_encode); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 56, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "2414:         __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_value, __pyx_n_s_encode); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 54, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "2432:         }",
          "2433:         __pyx_t_5 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_7, __pyx_v_encoding) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_v_encoding);",
          "2434:         __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;",
          "2436:         __Pyx_GOTREF(__pyx_t_5);",
          "2437:         __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;",
          "2438:         __Pyx_DECREF_SET(__pyx_v_value, __pyx_t_5);",
          "2439:         __pyx_t_5 = 0;",
          "",
          "[Removed Lines]",
          "2435:         if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 56, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "2428:         if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 54, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "2448:         goto __pyx_L6;",
          "2449:       }",
          "2460:         __Pyx_GOTREF(__pyx_t_5);",
          "2461:         __Pyx_Raise(__pyx_t_5, 0, 0, 0);",
          "2462:         __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;",
          "2464:       }",
          "2465:       __pyx_L6:;",
          "",
          "[Removed Lines]",
          "2459:         __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 58, __pyx_L1_error)",
          "2463:         __PYX_ERR(0, 58, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "2452:         __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 56, __pyx_L1_error)",
          "2456:         __PYX_ERR(0, 56, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "2474:     }",
          "2484:     __Pyx_GOTREF(__pyx_t_6);",
          "2487:     __Pyx_GOTREF(__pyx_t_7);",
          "2490:     if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {",
          "2493:         PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);",
          "2495:         __Pyx_INCREF(function);",
          "2496:         __Pyx_DECREF_SET(__pyx_t_6, function);",
          "2523:       }",
          "2533:     }",
          "2534:     __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;",
          "2535:     __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;",
          "",
          "[Removed Lines]",
          "2483:     __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_write_varint); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 60, __pyx_L1_error)",
          "2485:     __pyx_t_8 = PyObject_Length(__pyx_v_value); if (unlikely(__pyx_t_8 == ((Py_ssize_t)-1))) __PYX_ERR(0, 60, __pyx_L1_error)",
          "2486:     __pyx_t_7 = PyInt_FromSsize_t(__pyx_t_8); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 60, __pyx_L1_error)",
          "2488:     __pyx_t_9 = NULL;",
          "2489:     __pyx_t_10 = 0;",
          "2491:       __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_6);",
          "2492:       if (likely(__pyx_t_9)) {",
          "2494:         __Pyx_INCREF(__pyx_t_9);",
          "2497:         __pyx_t_10 = 1;",
          "2498:       }",
          "2499:     }",
          "2500:     #if CYTHON_FAST_PYCALL",
          "2501:     if (PyFunction_Check(__pyx_t_6)) {",
          "2502:       PyObject *__pyx_temp[3] = {__pyx_t_9, __pyx_t_7, ((PyObject *)__pyx_v_self)};",
          "2503:       __pyx_t_5 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_10, 2+__pyx_t_10); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 60, __pyx_L1_error)",
          "2504:       __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;",
          "2505:       __Pyx_GOTREF(__pyx_t_5);",
          "2506:       __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;",
          "2507:     } else",
          "2508:     #endif",
          "2509:     #if CYTHON_FAST_PYCCALL",
          "2510:     if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {",
          "2511:       PyObject *__pyx_temp[3] = {__pyx_t_9, __pyx_t_7, ((PyObject *)__pyx_v_self)};",
          "2512:       __pyx_t_5 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_10, 2+__pyx_t_10); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 60, __pyx_L1_error)",
          "2513:       __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;",
          "2514:       __Pyx_GOTREF(__pyx_t_5);",
          "2515:       __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;",
          "2516:     } else",
          "2517:     #endif",
          "2518:     {",
          "2519:       __pyx_t_11 = PyTuple_New(2+__pyx_t_10); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 60, __pyx_L1_error)",
          "2520:       __Pyx_GOTREF(__pyx_t_11);",
          "2521:       if (__pyx_t_9) {",
          "2522:         __Pyx_GIVEREF(__pyx_t_9); PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_9); __pyx_t_9 = NULL;",
          "2524:       __Pyx_GIVEREF(__pyx_t_7);",
          "2525:       PyTuple_SET_ITEM(__pyx_t_11, 0+__pyx_t_10, __pyx_t_7);",
          "2526:       __Pyx_INCREF(((PyObject *)__pyx_v_self));",
          "2527:       __Pyx_GIVEREF(((PyObject *)__pyx_v_self));",
          "2528:       PyTuple_SET_ITEM(__pyx_t_11, 1+__pyx_t_10, ((PyObject *)__pyx_v_self));",
          "2529:       __pyx_t_7 = 0;",
          "2530:       __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_11, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 60, __pyx_L1_error)",
          "2531:       __Pyx_GOTREF(__pyx_t_5);",
          "2532:       __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;",
          "2544:     __pyx_t_5 = ((struct __pyx_vtabstruct_17clickhouse_driver_14bufferedwriter_BufferedWriter *)__pyx_v_self->__pyx_vtab)->write(__pyx_v_self, __pyx_v_value, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 61, __pyx_L1_error)",
          "2545:     __Pyx_GOTREF(__pyx_t_5);",
          "2546:     __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;",
          "",
          "[Added Lines]",
          "2476:     __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_make_varint); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 58, __pyx_L1_error)",
          "2478:     __pyx_t_7 = PyInt_FromSsize_t(PyBytes_GET_SIZE(__pyx_v_value)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 58, __pyx_L1_error)",
          "2480:     __pyx_t_8 = NULL;",
          "2482:       __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_6);",
          "2483:       if (likely(__pyx_t_8)) {",
          "2485:         __Pyx_INCREF(__pyx_t_8);",
          "2490:     __pyx_t_5 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_8, __pyx_t_7) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_7);",
          "2491:     __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;",
          "2492:     __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;",
          "2493:     if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 58, __pyx_L1_error)",
          "2494:     __Pyx_GOTREF(__pyx_t_5);",
          "2496:     __pyx_t_6 = ((struct __pyx_vtabstruct_17clickhouse_driver_14bufferedwriter_BufferedWriter *)__pyx_v_self->__pyx_vtab)->write(__pyx_v_self, __pyx_t_5, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 58, __pyx_L1_error)",
          "2497:     __Pyx_GOTREF(__pyx_t_6);",
          "2499:     __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;",
          "2508:     __pyx_t_6 = ((struct __pyx_vtabstruct_17clickhouse_driver_14bufferedwriter_BufferedWriter *)__pyx_v_self->__pyx_vtab)->write(__pyx_v_self, __pyx_v_value, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 59, __pyx_L1_error)",
          "2509:     __Pyx_GOTREF(__pyx_t_6);",
          "2510:     __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "2571:   __Pyx_XDECREF(__pyx_t_5);",
          "2572:   __Pyx_XDECREF(__pyx_t_6);",
          "2573:   __Pyx_XDECREF(__pyx_t_7);",
          "2576:   __Pyx_AddTraceback(\"clickhouse_driver.bufferedwriter.BufferedWriter.write_strings\", __pyx_clineno, __pyx_lineno, __pyx_filename);",
          "2577:   __pyx_r = NULL;",
          "2578:   __pyx_L0:;",
          "",
          "[Removed Lines]",
          "2574:   __Pyx_XDECREF(__pyx_t_9);",
          "2575:   __Pyx_XDECREF(__pyx_t_11);",
          "",
          "[Added Lines]",
          "2538:   __Pyx_XDECREF(__pyx_t_8);",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "2624:         case  1:",
          "2625:         if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_length)) != 0)) kw_args--;",
          "2626:         else {",
          "2628:         }",
          "2629:       }",
          "2630:       if (unlikely(kw_args > 0)) {",
          "2632:       }",
          "2633:     } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {",
          "2634:       goto __pyx_L5_argtuple_error;",
          "",
          "[Removed Lines]",
          "2627:           __Pyx_RaiseArgtupleInvalid(\"write_fixed_strings_as_bytes\", 1, 2, 2, 1); __PYX_ERR(0, 63, __pyx_L3_error)",
          "2631:         if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, \"write_fixed_strings_as_bytes\") < 0)) __PYX_ERR(0, 63, __pyx_L3_error)",
          "",
          "[Added Lines]",
          "2590:           __Pyx_RaiseArgtupleInvalid(\"write_fixed_strings_as_bytes\", 1, 2, 2, 1); __PYX_ERR(0, 61, __pyx_L3_error)",
          "2594:         if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, \"write_fixed_strings_as_bytes\") < 0)) __PYX_ERR(0, 61, __pyx_L3_error)",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "2637:       values[1] = PyTuple_GET_ITEM(__pyx_args, 1);",
          "2638:     }",
          "2639:     __pyx_v_items = values[0];",
          "2641:   }",
          "2642:   goto __pyx_L4_argument_unpacking_done;",
          "2643:   __pyx_L5_argtuple_error:;",
          "2645:   __pyx_L3_error:;",
          "2646:   __Pyx_AddTraceback(\"clickhouse_driver.bufferedwriter.BufferedWriter.write_fixed_strings_as_bytes\", __pyx_clineno, __pyx_lineno, __pyx_filename);",
          "2647:   __Pyx_RefNannyFinishContext();",
          "",
          "[Removed Lines]",
          "2640:     __pyx_v_length = __Pyx_PyIndex_AsSsize_t(values[1]); if (unlikely((__pyx_v_length == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 63, __pyx_L3_error)",
          "2644:   __Pyx_RaiseArgtupleInvalid(\"write_fixed_strings_as_bytes\", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 63, __pyx_L3_error)",
          "",
          "[Added Lines]",
          "2603:     __pyx_v_length = __Pyx_PyIndex_AsSsize_t(values[1]); if (unlikely((__pyx_v_length == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 61, __pyx_L3_error)",
          "2607:   __Pyx_RaiseArgtupleInvalid(\"write_fixed_strings_as_bytes\", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 61, __pyx_L3_error)",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "2687:   __pyx_v_buf_pos = 0;",
          "2697:   __pyx_v_items_buf_size = (__pyx_v_length * __pyx_t_1);",
          "",
          "[Removed Lines]",
          "2696:   __pyx_t_1 = PyObject_Length(__pyx_v_items); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 65, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "2659:   __pyx_t_1 = PyObject_Length(__pyx_v_items); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 63, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "2715:   __pyx_t_2 = ((!(__pyx_v_items_buf != 0)) != 0);",
          "2716:   if (unlikely(__pyx_t_2)) {",
          "",
          "[Removed Lines]",
          "2725:     PyErr_NoMemory(); __PYX_ERR(0, 70, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "2688:     PyErr_NoMemory(); __PYX_ERR(0, 68, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "2753:     __pyx_t_3 = __pyx_v_items; __Pyx_INCREF(__pyx_t_3); __pyx_t_1 = 0;",
          "2754:     __pyx_t_4 = NULL;",
          "2755:   } else {",
          "2757:     __Pyx_GOTREF(__pyx_t_3);",
          "2759:   }",
          "2760:   for (;;) {",
          "2761:     if (likely(!__pyx_t_4)) {",
          "2762:       if (likely(PyList_CheckExact(__pyx_t_3))) {",
          "2763:         if (__pyx_t_1 >= PyList_GET_SIZE(__pyx_t_3)) break;",
          "2764:         #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS",
          "2766:         #else",
          "2768:         __Pyx_GOTREF(__pyx_t_5);",
          "2769:         #endif",
          "2770:       } else {",
          "2771:         if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_3)) break;",
          "2772:         #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS",
          "2774:         #else",
          "2776:         __Pyx_GOTREF(__pyx_t_5);",
          "2777:         #endif",
          "2778:       }",
          "",
          "[Removed Lines]",
          "2756:     __pyx_t_1 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_v_items); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 74, __pyx_L1_error)",
          "2758:     __pyx_t_4 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 74, __pyx_L1_error)",
          "2765:         __pyx_t_5 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_1); __Pyx_INCREF(__pyx_t_5); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(0, 74, __pyx_L1_error)",
          "2767:         __pyx_t_5 = PySequence_ITEM(__pyx_t_3, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 74, __pyx_L1_error)",
          "2773:         __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_1); __Pyx_INCREF(__pyx_t_5); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(0, 74, __pyx_L1_error)",
          "2775:         __pyx_t_5 = PySequence_ITEM(__pyx_t_3, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 74, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "2719:     __pyx_t_1 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_v_items); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 72, __pyx_L1_error)",
          "2721:     __pyx_t_4 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 72, __pyx_L1_error)",
          "2728:         __pyx_t_5 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_1); __Pyx_INCREF(__pyx_t_5); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(0, 72, __pyx_L1_error)",
          "2730:         __pyx_t_5 = PySequence_ITEM(__pyx_t_3, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 72, __pyx_L1_error)",
          "2736:         __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_1); __Pyx_INCREF(__pyx_t_5); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(0, 72, __pyx_L1_error)",
          "2738:         __pyx_t_5 = PySequence_ITEM(__pyx_t_3, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 72, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "2782:         PyObject* exc_type = PyErr_Occurred();",
          "2783:         if (exc_type) {",
          "2784:           if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();",
          "2786:         }",
          "2787:         break;",
          "2788:       }",
          "",
          "[Removed Lines]",
          "2785:           else __PYX_ERR(0, 74, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "2748:           else __PYX_ERR(0, 72, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "2791:     __Pyx_XDECREF_SET(__pyx_v_value, __pyx_t_5);",
          "2792:     __pyx_t_5 = 0;",
          "2802:     __pyx_v_value_len = __pyx_t_6;",
          "",
          "[Removed Lines]",
          "2801:     __pyx_t_6 = PyObject_Length(__pyx_v_value); if (unlikely(__pyx_t_6 == ((Py_ssize_t)-1))) __PYX_ERR(0, 75, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "2764:     __pyx_t_6 = PyObject_Length(__pyx_v_value); if (unlikely(__pyx_t_6 == ((Py_ssize_t)-1))) __PYX_ERR(0, 73, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "2811:     __pyx_t_2 = ((__pyx_v_length < __pyx_v_value_len) != 0);",
          "2812:     if (unlikely(__pyx_t_2)) {",
          "2822:       __Pyx_GOTREF(__pyx_t_7);",
          "2824:       __Pyx_GOTREF(__pyx_t_8);",
          "2825:       __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;",
          "2826:       __pyx_t_7 = NULL;",
          "",
          "[Removed Lines]",
          "2821:       __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_errors); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 77, __pyx_L1_error)",
          "2823:       __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_TooLargeStringSize); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 77, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "2784:       __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_errors); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 75, __pyx_L1_error)",
          "2786:       __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_TooLargeStringSize); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 75, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "2835:       }",
          "2836:       __pyx_t_5 = (__pyx_t_7) ? __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_7) : __Pyx_PyObject_CallNoArg(__pyx_t_8);",
          "2837:       __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;",
          "2839:       __Pyx_GOTREF(__pyx_t_5);",
          "2840:       __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;",
          "2841:       __Pyx_Raise(__pyx_t_5, 0, 0, 0);",
          "2842:       __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;",
          "",
          "[Removed Lines]",
          "2838:       if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 77, __pyx_L1_error)",
          "2843:       __PYX_ERR(0, 77, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "2801:       if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 75, __pyx_L1_error)",
          "2806:       __PYX_ERR(0, 75, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "2852:     }",
          "2862:     __pyx_v_c_value = __pyx_t_9;",
          "",
          "[Removed Lines]",
          "2861:     __pyx_t_9 = PyBytes_AsString(__pyx_v_value); if (unlikely(__pyx_t_9 == ((char *)NULL))) __PYX_ERR(0, 79, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "2824:     __pyx_t_9 = PyBytes_AsString(__pyx_v_value); if (unlikely(__pyx_t_9 == ((char *)NULL))) __PYX_ERR(0, 77, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "2889:   }",
          "2890:   __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;",
          "2900:   __Pyx_GOTREF(__pyx_t_3);",
          "2902:   __Pyx_GOTREF(__pyx_t_5);",
          "2903:   __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;",
          "2904:   __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;",
          "",
          "[Removed Lines]",
          "2899:   __pyx_t_3 = PyBytes_FromStringAndSize(__pyx_v_items_buf, __pyx_v_items_buf_size); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 84, __pyx_L1_error)",
          "2901:   __pyx_t_5 = ((struct __pyx_vtabstruct_17clickhouse_driver_14bufferedwriter_BufferedWriter *)__pyx_v_self->__pyx_vtab)->write(__pyx_v_self, __pyx_t_3, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 84, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "2862:   __pyx_t_3 = PyBytes_FromStringAndSize(__pyx_v_items_buf, __pyx_v_items_buf_size); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 82, __pyx_L1_error)",
          "2864:   __pyx_t_5 = ((struct __pyx_vtabstruct_17clickhouse_driver_14bufferedwriter_BufferedWriter *)__pyx_v_self->__pyx_vtab)->write(__pyx_v_self, __pyx_t_3, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 82, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "2983:         case  1:",
          "2984:         if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_length)) != 0)) kw_args--;",
          "2985:         else {",
          "2987:         }",
          "2988:         CYTHON_FALLTHROUGH;",
          "2989:         case  2:",
          "",
          "[Removed Lines]",
          "2986:           __Pyx_RaiseArgtupleInvalid(\"write_fixed_strings\", 0, 2, 3, 1); __PYX_ERR(0, 88, __pyx_L3_error)",
          "",
          "[Added Lines]",
          "2949:           __Pyx_RaiseArgtupleInvalid(\"write_fixed_strings\", 0, 2, 3, 1); __PYX_ERR(0, 86, __pyx_L3_error)",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "2993:         }",
          "2994:       }",
          "2995:       if (unlikely(kw_args > 0)) {",
          "2997:       }",
          "2998:     } else {",
          "2999:       switch (PyTuple_GET_SIZE(__pyx_args)) {",
          "",
          "[Removed Lines]",
          "2996:         if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, \"write_fixed_strings\") < 0)) __PYX_ERR(0, 88, __pyx_L3_error)",
          "",
          "[Added Lines]",
          "2959:         if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, \"write_fixed_strings\") < 0)) __PYX_ERR(0, 86, __pyx_L3_error)",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "3006:       }",
          "3007:     }",
          "3008:     __pyx_v_items = values[0];",
          "3010:     __pyx_v_encoding = values[2];",
          "3011:   }",
          "3012:   goto __pyx_L4_argument_unpacking_done;",
          "3013:   __pyx_L5_argtuple_error:;",
          "3015:   __pyx_L3_error:;",
          "3016:   __Pyx_AddTraceback(\"clickhouse_driver.bufferedwriter.BufferedWriter.write_fixed_strings\", __pyx_clineno, __pyx_lineno, __pyx_filename);",
          "3017:   __Pyx_RefNannyFinishContext();",
          "",
          "[Removed Lines]",
          "3009:     __pyx_v_length = __Pyx_PyIndex_AsSsize_t(values[1]); if (unlikely((__pyx_v_length == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 88, __pyx_L3_error)",
          "3014:   __Pyx_RaiseArgtupleInvalid(\"write_fixed_strings\", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 88, __pyx_L3_error)",
          "",
          "[Added Lines]",
          "2972:     __pyx_v_length = __Pyx_PyIndex_AsSsize_t(values[1]); if (unlikely((__pyx_v_length == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 86, __pyx_L3_error)",
          "2977:   __Pyx_RaiseArgtupleInvalid(\"write_fixed_strings\", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 86, __pyx_L3_error)",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "3061:   __pyx_t_2 = (__pyx_t_1 != 0);",
          "3062:   if (__pyx_t_2) {",
          "3072:     __Pyx_GOTREF(__pyx_t_4);",
          "3074:     __Pyx_GOTREF(__pyx_t_5);",
          "3075:     __pyx_t_6 = NULL;",
          "3076:     __pyx_t_7 = 0;",
          "",
          "[Removed Lines]",
          "3071:     __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_write_fixed_strings_as_bytes); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 90, __pyx_L1_error)",
          "3073:     __pyx_t_5 = PyInt_FromSsize_t(__pyx_v_length); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 90, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "3034:     __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_write_fixed_strings_as_bytes); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 88, __pyx_L1_error)",
          "3036:     __pyx_t_5 = PyInt_FromSsize_t(__pyx_v_length); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 88, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "3087:     #if CYTHON_FAST_PYCALL",
          "3088:     if (PyFunction_Check(__pyx_t_4)) {",
          "3089:       PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_v_items, __pyx_t_5};",
          "3091:       __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;",
          "3092:       __Pyx_GOTREF(__pyx_t_3);",
          "3093:       __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;",
          "",
          "[Removed Lines]",
          "3090:       __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 90, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "3053:       __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 88, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "3096:     #if CYTHON_FAST_PYCCALL",
          "3097:     if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {",
          "3098:       PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_v_items, __pyx_t_5};",
          "3100:       __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;",
          "3101:       __Pyx_GOTREF(__pyx_t_3);",
          "3102:       __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;",
          "3103:     } else",
          "3104:     #endif",
          "3105:     {",
          "3107:       __Pyx_GOTREF(__pyx_t_8);",
          "3108:       if (__pyx_t_6) {",
          "3109:         __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_6); __pyx_t_6 = NULL;",
          "",
          "[Removed Lines]",
          "3099:       __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 90, __pyx_L1_error)",
          "3106:       __pyx_t_8 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 90, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "3062:       __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 88, __pyx_L1_error)",
          "3069:       __pyx_t_8 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 88, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "3114:       __Pyx_GIVEREF(__pyx_t_5);",
          "3115:       PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_7, __pyx_t_5);",
          "3116:       __pyx_t_5 = 0;",
          "3118:       __Pyx_GOTREF(__pyx_t_3);",
          "3119:       __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;",
          "3120:     }",
          "3121:     __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;",
          "3122:     __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;",
          "",
          "[Removed Lines]",
          "3117:       __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_8, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 90, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "3080:       __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_8, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 88, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 49 ---",
          "[Context before]",
          "3151:   __pyx_v_buf_pos = 0;",
          "3161:   __pyx_v_items_buf_size = (__pyx_v_length * __pyx_t_9);",
          "",
          "[Removed Lines]",
          "3160:   __pyx_t_9 = PyObject_Length(__pyx_v_items); if (unlikely(__pyx_t_9 == ((Py_ssize_t)-1))) __PYX_ERR(0, 94, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "3123:   __pyx_t_9 = PyObject_Length(__pyx_v_items); if (unlikely(__pyx_t_9 == ((Py_ssize_t)-1))) __PYX_ERR(0, 92, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 50 ---",
          "[Context before]",
          "3179:   __pyx_t_2 = ((!(__pyx_v_items_buf != 0)) != 0);",
          "3180:   if (unlikely(__pyx_t_2)) {",
          "",
          "[Removed Lines]",
          "3189:     PyErr_NoMemory(); __PYX_ERR(0, 99, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "3152:     PyErr_NoMemory(); __PYX_ERR(0, 97, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 51 ---",
          "[Context before]",
          "3217:     __pyx_t_3 = __pyx_v_items; __Pyx_INCREF(__pyx_t_3); __pyx_t_9 = 0;",
          "3218:     __pyx_t_10 = NULL;",
          "3219:   } else {",
          "3221:     __Pyx_GOTREF(__pyx_t_3);",
          "3223:   }",
          "3224:   for (;;) {",
          "3225:     if (likely(!__pyx_t_10)) {",
          "3226:       if (likely(PyList_CheckExact(__pyx_t_3))) {",
          "3227:         if (__pyx_t_9 >= PyList_GET_SIZE(__pyx_t_3)) break;",
          "3228:         #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS",
          "3230:         #else",
          "3232:         __Pyx_GOTREF(__pyx_t_4);",
          "3233:         #endif",
          "3234:       } else {",
          "3235:         if (__pyx_t_9 >= PyTuple_GET_SIZE(__pyx_t_3)) break;",
          "3236:         #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS",
          "3238:         #else",
          "3240:         __Pyx_GOTREF(__pyx_t_4);",
          "3241:         #endif",
          "3242:       }",
          "",
          "[Removed Lines]",
          "3220:     __pyx_t_9 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_v_items); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 103, __pyx_L1_error)",
          "3222:     __pyx_t_10 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 103, __pyx_L1_error)",
          "3229:         __pyx_t_4 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_9); __Pyx_INCREF(__pyx_t_4); __pyx_t_9++; if (unlikely(0 < 0)) __PYX_ERR(0, 103, __pyx_L1_error)",
          "3231:         __pyx_t_4 = PySequence_ITEM(__pyx_t_3, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 103, __pyx_L1_error)",
          "3237:         __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_9); __Pyx_INCREF(__pyx_t_4); __pyx_t_9++; if (unlikely(0 < 0)) __PYX_ERR(0, 103, __pyx_L1_error)",
          "3239:         __pyx_t_4 = PySequence_ITEM(__pyx_t_3, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 103, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "3183:     __pyx_t_9 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_v_items); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 101, __pyx_L1_error)",
          "3185:     __pyx_t_10 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 101, __pyx_L1_error)",
          "3192:         __pyx_t_4 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_9); __Pyx_INCREF(__pyx_t_4); __pyx_t_9++; if (unlikely(0 < 0)) __PYX_ERR(0, 101, __pyx_L1_error)",
          "3194:         __pyx_t_4 = PySequence_ITEM(__pyx_t_3, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 101, __pyx_L1_error)",
          "3200:         __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_9); __Pyx_INCREF(__pyx_t_4); __pyx_t_9++; if (unlikely(0 < 0)) __PYX_ERR(0, 101, __pyx_L1_error)",
          "3202:         __pyx_t_4 = PySequence_ITEM(__pyx_t_3, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 101, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 52 ---",
          "[Context before]",
          "3246:         PyObject* exc_type = PyErr_Occurred();",
          "3247:         if (exc_type) {",
          "3248:           if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();",
          "3250:         }",
          "3251:         break;",
          "3252:       }",
          "",
          "[Removed Lines]",
          "3249:           else __PYX_ERR(0, 103, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "3212:           else __PYX_ERR(0, 101, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 53 ---",
          "[Context before]",
          "3265:     __pyx_t_2 = ((!(PyBytes_Check(__pyx_v_value) != 0)) != 0);",
          "3266:     if (__pyx_t_2) {",
          "3276:       __Pyx_GOTREF(__pyx_t_8);",
          "3277:       __pyx_t_5 = NULL;",
          "3278:       if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {",
          "",
          "[Removed Lines]",
          "3275:       __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_value, __pyx_n_s_encode); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 105, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "3238:       __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_value, __pyx_n_s_encode); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 103, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 54 ---",
          "[Context before]",
          "3286:       }",
          "3287:       __pyx_t_4 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_8, __pyx_t_5, __pyx_v_encoding) : __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_v_encoding);",
          "3288:       __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;",
          "3290:       __Pyx_GOTREF(__pyx_t_4);",
          "3291:       __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;",
          "3292:       __Pyx_DECREF_SET(__pyx_v_value, __pyx_t_4);",
          "3293:       __pyx_t_4 = 0;",
          "",
          "[Removed Lines]",
          "3289:       if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 105, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "3252:       if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 103, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 55 ---",
          "[Context before]",
          "3302:     }",
          "3312:     __pyx_v_value_len = __pyx_t_11;",
          "",
          "[Removed Lines]",
          "3311:     __pyx_t_11 = PyObject_Length(__pyx_v_value); if (unlikely(__pyx_t_11 == ((Py_ssize_t)-1))) __PYX_ERR(0, 107, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "3274:     __pyx_t_11 = PyObject_Length(__pyx_v_value); if (unlikely(__pyx_t_11 == ((Py_ssize_t)-1))) __PYX_ERR(0, 105, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 56 ---",
          "[Context before]",
          "3321:     __pyx_t_2 = ((__pyx_v_length < __pyx_v_value_len) != 0);",
          "3322:     if (unlikely(__pyx_t_2)) {",
          "3332:       __Pyx_GOTREF(__pyx_t_8);",
          "3334:       __Pyx_GOTREF(__pyx_t_5);",
          "3335:       __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;",
          "3336:       __pyx_t_8 = NULL;",
          "",
          "[Removed Lines]",
          "3331:       __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_errors); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 109, __pyx_L1_error)",
          "3333:       __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_TooLargeStringSize); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 109, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "3294:       __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_errors); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 107, __pyx_L1_error)",
          "3296:       __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_TooLargeStringSize); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 107, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 57 ---",
          "[Context before]",
          "3345:       }",
          "3346:       __pyx_t_4 = (__pyx_t_8) ? __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_8) : __Pyx_PyObject_CallNoArg(__pyx_t_5);",
          "3347:       __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;",
          "3349:       __Pyx_GOTREF(__pyx_t_4);",
          "3350:       __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;",
          "3351:       __Pyx_Raise(__pyx_t_4, 0, 0, 0);",
          "3352:       __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;",
          "",
          "[Removed Lines]",
          "3348:       if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 109, __pyx_L1_error)",
          "3353:       __PYX_ERR(0, 109, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "3311:       if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 107, __pyx_L1_error)",
          "3316:       __PYX_ERR(0, 107, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 58 ---",
          "[Context before]",
          "3362:     }",
          "3372:     __pyx_v_c_value = __pyx_t_12;",
          "",
          "[Removed Lines]",
          "3371:     __pyx_t_12 = PyBytes_AsString(__pyx_v_value); if (unlikely(__pyx_t_12 == ((char *)NULL))) __PYX_ERR(0, 111, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "3334:     __pyx_t_12 = PyBytes_AsString(__pyx_v_value); if (unlikely(__pyx_t_12 == ((char *)NULL))) __PYX_ERR(0, 109, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 59 ---",
          "[Context before]",
          "3399:   }",
          "3400:   __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;",
          "3410:   __Pyx_GOTREF(__pyx_t_3);",
          "3412:   __Pyx_GOTREF(__pyx_t_4);",
          "3413:   __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;",
          "3414:   __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;",
          "",
          "[Removed Lines]",
          "3409:   __pyx_t_3 = PyBytes_FromStringAndSize(__pyx_v_items_buf, __pyx_v_items_buf_size); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 116, __pyx_L1_error)",
          "3411:   __pyx_t_4 = ((struct __pyx_vtabstruct_17clickhouse_driver_14bufferedwriter_BufferedWriter *)__pyx_v_self->__pyx_vtab)->write(__pyx_v_self, __pyx_t_3, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 116, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "3372:   __pyx_t_3 = PyBytes_FromStringAndSize(__pyx_v_items_buf, __pyx_v_items_buf_size); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 114, __pyx_L1_error)",
          "3374:   __pyx_t_4 = ((struct __pyx_vtabstruct_17clickhouse_driver_14bufferedwriter_BufferedWriter *)__pyx_v_self->__pyx_vtab)->write(__pyx_v_self, __pyx_t_3, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 114, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 60 ---",
          "[Context before]",
          "3796:         case  1:",
          "3797:         if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_bufsize)) != 0)) kw_args--;",
          "3798:         else {",
          "3800:         }",
          "3801:       }",
          "3802:       if (unlikely(kw_args > 0)) {",
          "3804:       }",
          "3805:     } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {",
          "3806:       goto __pyx_L5_argtuple_error;",
          "",
          "[Removed Lines]",
          "3799:           __Pyx_RaiseArgtupleInvalid(\"__init__\", 1, 2, 2, 1); __PYX_ERR(0, 124, __pyx_L3_error)",
          "3803:         if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, \"__init__\") < 0)) __PYX_ERR(0, 124, __pyx_L3_error)",
          "",
          "[Added Lines]",
          "3762:           __Pyx_RaiseArgtupleInvalid(\"__init__\", 1, 2, 2, 1); __PYX_ERR(0, 122, __pyx_L3_error)",
          "3766:         if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, \"__init__\") < 0)) __PYX_ERR(0, 122, __pyx_L3_error)",
          "",
          "---------------",
          "--- Hunk 61 ---",
          "[Context before]",
          "3813:   }",
          "3814:   goto __pyx_L4_argument_unpacking_done;",
          "3815:   __pyx_L5_argtuple_error:;",
          "3817:   __pyx_L3_error:;",
          "3818:   __Pyx_AddTraceback(\"clickhouse_driver.bufferedwriter.BufferedSocketWriter.__init__\", __pyx_clineno, __pyx_lineno, __pyx_filename);",
          "3819:   __Pyx_RefNannyFinishContext();",
          "",
          "[Removed Lines]",
          "3816:   __Pyx_RaiseArgtupleInvalid(\"__init__\", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 124, __pyx_L3_error)",
          "",
          "[Added Lines]",
          "3779:   __Pyx_RaiseArgtupleInvalid(\"__init__\", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 122, __pyx_L3_error)",
          "",
          "---------------",
          "--- Hunk 62 ---",
          "[Context before]",
          "3850:   __Pyx_DECREF(__pyx_v_self->sock);",
          "3851:   __pyx_v_self->sock = __pyx_v_sock;",
          "3861:   __Pyx_GOTREF(__pyx_t_2);",
          "3862:   __Pyx_INCREF(((PyObject *)__pyx_ptype_17clickhouse_driver_14bufferedwriter_BufferedSocketWriter));",
          "3863:   __Pyx_GIVEREF(((PyObject *)__pyx_ptype_17clickhouse_driver_14bufferedwriter_BufferedSocketWriter));",
          "",
          "[Removed Lines]",
          "3860:   __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 126, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "3823:   __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 124, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 63 ---",
          "[Context before]",
          "3865:   __Pyx_INCREF(((PyObject *)__pyx_v_self));",
          "3866:   __Pyx_GIVEREF(((PyObject *)__pyx_v_self));",
          "3867:   PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_self));",
          "3869:   __Pyx_GOTREF(__pyx_t_3);",
          "3870:   __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;",
          "3872:   __Pyx_GOTREF(__pyx_t_2);",
          "3873:   __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;",
          "3874:   __pyx_t_3 = NULL;",
          "",
          "[Removed Lines]",
          "3868:   __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_super, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 126, __pyx_L1_error)",
          "3871:   __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_init); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 126, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "3831:   __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_super, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 124, __pyx_L1_error)",
          "3834:   __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_init); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 124, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 64 ---",
          "[Context before]",
          "3883:   }",
          "3884:   __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_v_bufsize) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_bufsize);",
          "3885:   __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;",
          "3887:   __Pyx_GOTREF(__pyx_t_1);",
          "3888:   __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;",
          "3889:   __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;",
          "",
          "[Removed Lines]",
          "3886:   if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 126, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "3849:   if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 124, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 65 ---",
          "[Context before]",
          "3939:     if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {",
          "3940:       PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));",
          "3941:       #endif",
          "3943:       __Pyx_GOTREF(__pyx_t_1);",
          "3944:       if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_17clickhouse_driver_14bufferedwriter_20BufferedSocketWriter_3write_into_stream)) {",
          "3945:         __Pyx_XDECREF(__pyx_r);",
          "",
          "[Removed Lines]",
          "3942:       __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_write_into_stream); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 128, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "3905:       __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_write_into_stream); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 126, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 66 ---",
          "[Context before]",
          "3956:         }",
          "3957:         __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_3);",
          "3958:         __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;",
          "3960:         __Pyx_GOTREF(__pyx_t_2);",
          "3961:         __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;",
          "3962:         __pyx_r = __pyx_t_2;",
          "",
          "[Removed Lines]",
          "3959:         if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 128, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "3922:         if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 126, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 67 ---",
          "[Context before]",
          "3977:     #endif",
          "3978:   }",
          "3988:   __Pyx_GOTREF(__pyx_t_2);",
          "3998:   __Pyx_GOTREF(__pyx_t_3);",
          "3999:   __pyx_t_4 = NULL;",
          "4000:   if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {",
          "",
          "[Removed Lines]",
          "3987:   __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->sock, __pyx_n_s_sendall); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 129, __pyx_L1_error)",
          "3997:   __pyx_t_3 = PyBytes_FromStringAndSize(__pyx_v_self->__pyx_base.buffer, __pyx_v_self->__pyx_base.position); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 130, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "3950:   __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->sock, __pyx_n_s_sendall); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 127, __pyx_L1_error)",
          "3960:   __pyx_t_3 = PyBytes_FromStringAndSize(__pyx_v_self->__pyx_base.buffer, __pyx_v_self->__pyx_base.position); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 128, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 68 ---",
          "[Context before]",
          "4009:   __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3);",
          "4010:   __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;",
          "4011:   __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;",
          "4013:   __Pyx_GOTREF(__pyx_t_1);",
          "4014:   __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;",
          "4015:   __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;",
          "",
          "[Removed Lines]",
          "4012:   if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 129, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "3975:   if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 127, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 69 ---",
          "[Context before]",
          "4069:   int __pyx_clineno = 0;",
          "4070:   __Pyx_RefNannySetupContext(\"write_into_stream\", 0);",
          "4071:   __Pyx_XDECREF(__pyx_r);",
          "4073:   __Pyx_GOTREF(__pyx_t_1);",
          "4074:   __pyx_r = __pyx_t_1;",
          "4075:   __pyx_t_1 = 0;",
          "",
          "[Removed Lines]",
          "4072:   __pyx_t_1 = __pyx_f_17clickhouse_driver_14bufferedwriter_20BufferedSocketWriter_write_into_stream(__pyx_v_self, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 128, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "4035:   __pyx_t_1 = __pyx_f_17clickhouse_driver_14bufferedwriter_20BufferedSocketWriter_write_into_stream(__pyx_v_self, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 126, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 70 ---",
          "[Context before]",
          "4438:         case  1:",
          "4439:         if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_bufsize)) != 0)) kw_args--;",
          "4440:         else {",
          "4442:         }",
          "4443:       }",
          "4444:       if (unlikely(kw_args > 0)) {",
          "4446:       }",
          "4447:     } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {",
          "4448:       goto __pyx_L5_argtuple_error;",
          "",
          "[Removed Lines]",
          "4441:           __Pyx_RaiseArgtupleInvalid(\"__init__\", 1, 2, 2, 1); __PYX_ERR(0, 138, __pyx_L3_error)",
          "4445:         if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, \"__init__\") < 0)) __PYX_ERR(0, 138, __pyx_L3_error)",
          "",
          "[Added Lines]",
          "4404:           __Pyx_RaiseArgtupleInvalid(\"__init__\", 1, 2, 2, 1); __PYX_ERR(0, 136, __pyx_L3_error)",
          "4408:         if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, \"__init__\") < 0)) __PYX_ERR(0, 136, __pyx_L3_error)",
          "",
          "---------------",
          "--- Hunk 71 ---",
          "[Context before]",
          "4455:   }",
          "4456:   goto __pyx_L4_argument_unpacking_done;",
          "4457:   __pyx_L5_argtuple_error:;",
          "4459:   __pyx_L3_error:;",
          "4460:   __Pyx_AddTraceback(\"clickhouse_driver.bufferedwriter.CompressedBufferedWriter.__init__\", __pyx_clineno, __pyx_lineno, __pyx_filename);",
          "4461:   __Pyx_RefNannyFinishContext();",
          "",
          "[Removed Lines]",
          "4458:   __Pyx_RaiseArgtupleInvalid(\"__init__\", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 138, __pyx_L3_error)",
          "",
          "[Added Lines]",
          "4421:   __Pyx_RaiseArgtupleInvalid(\"__init__\", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 136, __pyx_L3_error)",
          "",
          "---------------",
          "--- Hunk 72 ---",
          "[Context before]",
          "4492:   __Pyx_DECREF(__pyx_v_self->compressor);",
          "4493:   __pyx_v_self->compressor = __pyx_v_compressor;",
          "4503:   __Pyx_GOTREF(__pyx_t_2);",
          "4504:   __Pyx_INCREF(((PyObject *)__pyx_ptype_17clickhouse_driver_14bufferedwriter_CompressedBufferedWriter));",
          "4505:   __Pyx_GIVEREF(((PyObject *)__pyx_ptype_17clickhouse_driver_14bufferedwriter_CompressedBufferedWriter));",
          "",
          "[Removed Lines]",
          "4502:   __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 140, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "4465:   __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 138, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 73 ---",
          "[Context before]",
          "4507:   __Pyx_INCREF(((PyObject *)__pyx_v_self));",
          "4508:   __Pyx_GIVEREF(((PyObject *)__pyx_v_self));",
          "4509:   PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_self));",
          "4511:   __Pyx_GOTREF(__pyx_t_3);",
          "4512:   __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;",
          "4514:   __Pyx_GOTREF(__pyx_t_2);",
          "4515:   __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;",
          "4516:   __pyx_t_3 = NULL;",
          "",
          "[Removed Lines]",
          "4510:   __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_super, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 140, __pyx_L1_error)",
          "4513:   __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_init); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 140, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "4473:   __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_super, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 138, __pyx_L1_error)",
          "4476:   __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_init); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 138, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 74 ---",
          "[Context before]",
          "4525:   }",
          "4526:   __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_v_bufsize) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_bufsize);",
          "4527:   __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;",
          "4529:   __Pyx_GOTREF(__pyx_t_1);",
          "4530:   __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;",
          "4531:   __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;",
          "",
          "[Removed Lines]",
          "4528:   if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 140, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "4491:   if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 138, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 75 ---",
          "[Context before]",
          "4581:     if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {",
          "4582:       PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));",
          "4583:       #endif",
          "4585:       __Pyx_GOTREF(__pyx_t_1);",
          "4586:       if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_17clickhouse_driver_14bufferedwriter_24CompressedBufferedWriter_3write_into_stream)) {",
          "4587:         __Pyx_XDECREF(__pyx_r);",
          "",
          "[Removed Lines]",
          "4584:       __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_write_into_stream); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 142, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "4547:       __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_write_into_stream); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 140, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 76 ---",
          "[Context before]",
          "4598:         }",
          "4599:         __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_3);",
          "4600:         __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;",
          "4602:         __Pyx_GOTREF(__pyx_t_2);",
          "4603:         __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;",
          "4604:         __pyx_r = __pyx_t_2;",
          "",
          "[Removed Lines]",
          "4601:         if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 142, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "4564:         if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 140, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 77 ---",
          "[Context before]",
          "4619:     #endif",
          "4620:   }",
          "4630:   __Pyx_GOTREF(__pyx_t_2);",
          "4640:   __Pyx_GOTREF(__pyx_t_3);",
          "4641:   __pyx_t_4 = NULL;",
          "4642:   if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {",
          "",
          "[Removed Lines]",
          "4629:   __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->compressor, __pyx_n_s_write); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 143, __pyx_L1_error)",
          "4639:   __pyx_t_3 = PyBytes_FromStringAndSize(__pyx_v_self->__pyx_base.buffer, __pyx_v_self->__pyx_base.position); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 144, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "4592:   __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->compressor, __pyx_n_s_write); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 141, __pyx_L1_error)",
          "4602:   __pyx_t_3 = PyBytes_FromStringAndSize(__pyx_v_self->__pyx_base.buffer, __pyx_v_self->__pyx_base.position); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 142, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 78 ---",
          "[Context before]",
          "4651:   __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3);",
          "4652:   __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;",
          "4653:   __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;",
          "4655:   __Pyx_GOTREF(__pyx_t_1);",
          "4656:   __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;",
          "4657:   __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;",
          "",
          "[Removed Lines]",
          "4654:   if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 143, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "4617:   if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 141, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 79 ---",
          "[Context before]",
          "4711:   int __pyx_clineno = 0;",
          "4712:   __Pyx_RefNannySetupContext(\"write_into_stream\", 0);",
          "4713:   __Pyx_XDECREF(__pyx_r);",
          "4715:   __Pyx_GOTREF(__pyx_t_1);",
          "4716:   __pyx_r = __pyx_t_1;",
          "4717:   __pyx_t_1 = 0;",
          "",
          "[Removed Lines]",
          "4714:   __pyx_t_1 = __pyx_f_17clickhouse_driver_14bufferedwriter_24CompressedBufferedWriter_write_into_stream(__pyx_v_self, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 142, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "4677:   __pyx_t_1 = __pyx_f_17clickhouse_driver_14bufferedwriter_24CompressedBufferedWriter_write_into_stream(__pyx_v_self, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 140, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 80 ---",
          "[Context before]",
          "4757:   int __pyx_clineno = 0;",
          "4758:   __Pyx_RefNannySetupContext(\"flush\", 0);",
          "4766:   __Pyx_GOTREF(__pyx_t_1);",
          "4767:   __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;",
          "",
          "[Removed Lines]",
          "4765:   __pyx_t_1 = ((struct __pyx_vtabstruct_17clickhouse_driver_14bufferedwriter_CompressedBufferedWriter *)__pyx_v_self->__pyx_base.__pyx_vtab)->__pyx_base.write_into_stream(((struct __pyx_obj_17clickhouse_driver_14bufferedwriter_BufferedWriter *)__pyx_v_self), 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 149, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "4728:   __pyx_t_1 = ((struct __pyx_vtabstruct_17clickhouse_driver_14bufferedwriter_CompressedBufferedWriter *)__pyx_v_self->__pyx_base.__pyx_vtab)->__pyx_base.write_into_stream(((struct __pyx_obj_17clickhouse_driver_14bufferedwriter_BufferedWriter *)__pyx_v_self), 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 147, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 81 ---",
          "[Context before]",
          "6796:   {&__pyx_n_s_items, __pyx_k_items, sizeof(__pyx_k_items), 0, 0, 1, 1},",
          "6797:   {&__pyx_n_s_length, __pyx_k_length, sizeof(__pyx_k_length), 0, 0, 1, 1},",
          "6798:   {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},",
          "6799:   {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},",
          "6800:   {&__pyx_n_s_new, __pyx_k_new, sizeof(__pyx_k_new), 0, 0, 1, 1},",
          "6801:   {&__pyx_n_s_pickle, __pyx_k_pickle, sizeof(__pyx_k_pickle), 0, 0, 1, 1},",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6762:   {&__pyx_n_s_make_varint, __pyx_k_make_varint, sizeof(__pyx_k_make_varint), 0, 0, 1, 1},",
          "",
          "---------------",
          "--- Hunk 82 ---",
          "[Context before]",
          "6823:   {&__pyx_n_s_write, __pyx_k_write, sizeof(__pyx_k_write), 0, 0, 1, 1},",
          "6824:   {&__pyx_n_s_write_fixed_strings_as_bytes, __pyx_k_write_fixed_strings_as_bytes, sizeof(__pyx_k_write_fixed_strings_as_bytes), 0, 0, 1, 1},",
          "6825:   {&__pyx_n_s_write_into_stream, __pyx_k_write_into_stream, sizeof(__pyx_k_write_into_stream), 0, 0, 1, 1},",
          "6827:   {0, 0, 0, 0, 0, 0, 0}",
          "6828: };",
          "6829: static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(void) {",
          "6834:   return 0;",
          "6835:   __pyx_L1_error:;",
          "6836:   return -1;",
          "",
          "[Removed Lines]",
          "6826:   {&__pyx_n_s_write_varint, __pyx_k_write_varint, sizeof(__pyx_k_write_varint), 0, 0, 1, 1},",
          "6830:   __pyx_builtin_MemoryError = __Pyx_GetBuiltinName(__pyx_n_s_MemoryError); if (!__pyx_builtin_MemoryError) __PYX_ERR(0, 16, __pyx_L1_error)",
          "6831:   __pyx_builtin_super = __Pyx_GetBuiltinName(__pyx_n_s_super); if (!__pyx_builtin_super) __PYX_ERR(0, 21, __pyx_L1_error)",
          "6832:   __pyx_builtin_NotImplementedError = __Pyx_GetBuiltinName(__pyx_n_s_NotImplementedError); if (!__pyx_builtin_NotImplementedError) __PYX_ERR(0, 27, __pyx_L1_error)",
          "6833:   __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) __PYX_ERR(0, 58, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "6793:   __pyx_builtin_MemoryError = __Pyx_GetBuiltinName(__pyx_n_s_MemoryError); if (!__pyx_builtin_MemoryError) __PYX_ERR(0, 17, __pyx_L1_error)",
          "6794:   __pyx_builtin_super = __Pyx_GetBuiltinName(__pyx_n_s_super); if (!__pyx_builtin_super) __PYX_ERR(0, 22, __pyx_L1_error)",
          "6795:   __pyx_builtin_NotImplementedError = __Pyx_GetBuiltinName(__pyx_n_s_NotImplementedError); if (!__pyx_builtin_NotImplementedError) __PYX_ERR(0, 28, __pyx_L1_error)",
          "6796:   __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) __PYX_ERR(0, 56, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 83 ---",
          "[Context before]",
          "6840:   __Pyx_RefNannyDeclarations",
          "6841:   __Pyx_RefNannySetupContext(\"__Pyx_InitCachedConstants\", 0);",
          "6851:   __Pyx_GOTREF(__pyx_tuple_);",
          "6852:   __Pyx_GIVEREF(__pyx_tuple_);",
          "",
          "[Removed Lines]",
          "6850:   __pyx_tuple_ = PyTuple_Pack(1, __pyx_kp_u_bytes_object_expected); if (unlikely(!__pyx_tuple_)) __PYX_ERR(0, 58, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "6813:   __pyx_tuple_ = PyTuple_Pack(1, __pyx_kp_u_bytes_object_expected); if (unlikely(!__pyx_tuple_)) __PYX_ERR(0, 56, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 84 ---",
          "[Context before]",
          "6927:   __pyx_vtabptr_17clickhouse_driver_14bufferedwriter_BufferedWriter = &__pyx_vtable_17clickhouse_driver_14bufferedwriter_BufferedWriter;",
          "6928:   __pyx_vtable_17clickhouse_driver_14bufferedwriter_BufferedWriter.write_into_stream = (PyObject *(*)(struct __pyx_obj_17clickhouse_driver_14bufferedwriter_BufferedWriter *, int __pyx_skip_dispatch))__pyx_f_17clickhouse_driver_14bufferedwriter_14BufferedWriter_write_into_stream;",
          "6929:   __pyx_vtable_17clickhouse_driver_14bufferedwriter_BufferedWriter.write = (PyObject *(*)(struct __pyx_obj_17clickhouse_driver_14bufferedwriter_BufferedWriter *, PyObject *, int __pyx_skip_dispatch))__pyx_f_17clickhouse_driver_14bufferedwriter_14BufferedWriter_write;",
          "6931:   #if PY_VERSION_HEX < 0x030800B1",
          "6932:   __pyx_type_17clickhouse_driver_14bufferedwriter_BufferedWriter.tp_print = 0;",
          "6933:   #endif",
          "6934:   if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_17clickhouse_driver_14bufferedwriter_BufferedWriter.tp_dictoffset && __pyx_type_17clickhouse_driver_14bufferedwriter_BufferedWriter.tp_getattro == PyObject_GenericGetAttr)) {",
          "6935:     __pyx_type_17clickhouse_driver_14bufferedwriter_BufferedWriter.tp_getattro = __Pyx_PyObject_GenericGetAttr;",
          "6936:   }",
          "6940:   __pyx_ptype_17clickhouse_driver_14bufferedwriter_BufferedWriter = &__pyx_type_17clickhouse_driver_14bufferedwriter_BufferedWriter;",
          "6941:   __pyx_vtabptr_17clickhouse_driver_14bufferedwriter_BufferedSocketWriter = &__pyx_vtable_17clickhouse_driver_14bufferedwriter_BufferedSocketWriter;",
          "6942:   __pyx_vtable_17clickhouse_driver_14bufferedwriter_BufferedSocketWriter.__pyx_base = *__pyx_vtabptr_17clickhouse_driver_14bufferedwriter_BufferedWriter;",
          "6943:   __pyx_vtable_17clickhouse_driver_14bufferedwriter_BufferedSocketWriter.__pyx_base.write_into_stream = (PyObject *(*)(struct __pyx_obj_17clickhouse_driver_14bufferedwriter_BufferedWriter *, int __pyx_skip_dispatch))__pyx_f_17clickhouse_driver_14bufferedwriter_20BufferedSocketWriter_write_into_stream;",
          "6944:   __pyx_type_17clickhouse_driver_14bufferedwriter_BufferedSocketWriter.tp_base = __pyx_ptype_17clickhouse_driver_14bufferedwriter_BufferedWriter;",
          "6946:   #if PY_VERSION_HEX < 0x030800B1",
          "6947:   __pyx_type_17clickhouse_driver_14bufferedwriter_BufferedSocketWriter.tp_print = 0;",
          "6948:   #endif",
          "6949:   if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_17clickhouse_driver_14bufferedwriter_BufferedSocketWriter.tp_dictoffset && __pyx_type_17clickhouse_driver_14bufferedwriter_BufferedSocketWriter.tp_getattro == PyObject_GenericGetAttr)) {",
          "6950:     __pyx_type_17clickhouse_driver_14bufferedwriter_BufferedSocketWriter.tp_getattro = __Pyx_PyObject_GenericGetAttr;",
          "6951:   }",
          "6955:   __pyx_ptype_17clickhouse_driver_14bufferedwriter_BufferedSocketWriter = &__pyx_type_17clickhouse_driver_14bufferedwriter_BufferedSocketWriter;",
          "6956:   __pyx_vtabptr_17clickhouse_driver_14bufferedwriter_CompressedBufferedWriter = &__pyx_vtable_17clickhouse_driver_14bufferedwriter_CompressedBufferedWriter;",
          "6957:   __pyx_vtable_17clickhouse_driver_14bufferedwriter_CompressedBufferedWriter.__pyx_base = *__pyx_vtabptr_17clickhouse_driver_14bufferedwriter_BufferedWriter;",
          "6958:   __pyx_vtable_17clickhouse_driver_14bufferedwriter_CompressedBufferedWriter.__pyx_base.write_into_stream = (PyObject *(*)(struct __pyx_obj_17clickhouse_driver_14bufferedwriter_BufferedWriter *, int __pyx_skip_dispatch))__pyx_f_17clickhouse_driver_14bufferedwriter_24CompressedBufferedWriter_write_into_stream;",
          "6959:   __pyx_type_17clickhouse_driver_14bufferedwriter_CompressedBufferedWriter.tp_base = __pyx_ptype_17clickhouse_driver_14bufferedwriter_BufferedWriter;",
          "6961:   #if PY_VERSION_HEX < 0x030800B1",
          "6962:   __pyx_type_17clickhouse_driver_14bufferedwriter_CompressedBufferedWriter.tp_print = 0;",
          "6963:   #endif",
          "6964:   if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_17clickhouse_driver_14bufferedwriter_CompressedBufferedWriter.tp_dictoffset && __pyx_type_17clickhouse_driver_14bufferedwriter_CompressedBufferedWriter.tp_getattro == PyObject_GenericGetAttr)) {",
          "6965:     __pyx_type_17clickhouse_driver_14bufferedwriter_CompressedBufferedWriter.tp_getattro = __Pyx_PyObject_GenericGetAttr;",
          "6966:   }",
          "6970:   __pyx_ptype_17clickhouse_driver_14bufferedwriter_CompressedBufferedWriter = &__pyx_type_17clickhouse_driver_14bufferedwriter_CompressedBufferedWriter;",
          "6971:   __Pyx_RefNannyFinishContext();",
          "6972:   return 0;",
          "",
          "[Removed Lines]",
          "6930:   if (PyType_Ready(&__pyx_type_17clickhouse_driver_14bufferedwriter_BufferedWriter) < 0) __PYX_ERR(0, 9, __pyx_L1_error)",
          "6937:   if (__Pyx_SetVtable(__pyx_type_17clickhouse_driver_14bufferedwriter_BufferedWriter.tp_dict, __pyx_vtabptr_17clickhouse_driver_14bufferedwriter_BufferedWriter) < 0) __PYX_ERR(0, 9, __pyx_L1_error)",
          "6938:   if (PyObject_SetAttr(__pyx_m, __pyx_n_s_BufferedWriter, (PyObject *)&__pyx_type_17clickhouse_driver_14bufferedwriter_BufferedWriter) < 0) __PYX_ERR(0, 9, __pyx_L1_error)",
          "6939:   if (__Pyx_setup_reduce((PyObject*)&__pyx_type_17clickhouse_driver_14bufferedwriter_BufferedWriter) < 0) __PYX_ERR(0, 9, __pyx_L1_error)",
          "6945:   if (PyType_Ready(&__pyx_type_17clickhouse_driver_14bufferedwriter_BufferedSocketWriter) < 0) __PYX_ERR(0, 121, __pyx_L1_error)",
          "6952:   if (__Pyx_SetVtable(__pyx_type_17clickhouse_driver_14bufferedwriter_BufferedSocketWriter.tp_dict, __pyx_vtabptr_17clickhouse_driver_14bufferedwriter_BufferedSocketWriter) < 0) __PYX_ERR(0, 121, __pyx_L1_error)",
          "6953:   if (PyObject_SetAttr(__pyx_m, __pyx_n_s_BufferedSocketWriter, (PyObject *)&__pyx_type_17clickhouse_driver_14bufferedwriter_BufferedSocketWriter) < 0) __PYX_ERR(0, 121, __pyx_L1_error)",
          "6954:   if (__Pyx_setup_reduce((PyObject*)&__pyx_type_17clickhouse_driver_14bufferedwriter_BufferedSocketWriter) < 0) __PYX_ERR(0, 121, __pyx_L1_error)",
          "6960:   if (PyType_Ready(&__pyx_type_17clickhouse_driver_14bufferedwriter_CompressedBufferedWriter) < 0) __PYX_ERR(0, 135, __pyx_L1_error)",
          "6967:   if (__Pyx_SetVtable(__pyx_type_17clickhouse_driver_14bufferedwriter_CompressedBufferedWriter.tp_dict, __pyx_vtabptr_17clickhouse_driver_14bufferedwriter_CompressedBufferedWriter) < 0) __PYX_ERR(0, 135, __pyx_L1_error)",
          "6968:   if (PyObject_SetAttr(__pyx_m, __pyx_n_s_CompressedBufferedWriter, (PyObject *)&__pyx_type_17clickhouse_driver_14bufferedwriter_CompressedBufferedWriter) < 0) __PYX_ERR(0, 135, __pyx_L1_error)",
          "6969:   if (__Pyx_setup_reduce((PyObject*)&__pyx_type_17clickhouse_driver_14bufferedwriter_CompressedBufferedWriter) < 0) __PYX_ERR(0, 135, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "6893:   if (PyType_Ready(&__pyx_type_17clickhouse_driver_14bufferedwriter_BufferedWriter) < 0) __PYX_ERR(0, 10, __pyx_L1_error)",
          "6900:   if (__Pyx_SetVtable(__pyx_type_17clickhouse_driver_14bufferedwriter_BufferedWriter.tp_dict, __pyx_vtabptr_17clickhouse_driver_14bufferedwriter_BufferedWriter) < 0) __PYX_ERR(0, 10, __pyx_L1_error)",
          "6901:   if (PyObject_SetAttr(__pyx_m, __pyx_n_s_BufferedWriter, (PyObject *)&__pyx_type_17clickhouse_driver_14bufferedwriter_BufferedWriter) < 0) __PYX_ERR(0, 10, __pyx_L1_error)",
          "6902:   if (__Pyx_setup_reduce((PyObject*)&__pyx_type_17clickhouse_driver_14bufferedwriter_BufferedWriter) < 0) __PYX_ERR(0, 10, __pyx_L1_error)",
          "6908:   if (PyType_Ready(&__pyx_type_17clickhouse_driver_14bufferedwriter_BufferedSocketWriter) < 0) __PYX_ERR(0, 119, __pyx_L1_error)",
          "6915:   if (__Pyx_SetVtable(__pyx_type_17clickhouse_driver_14bufferedwriter_BufferedSocketWriter.tp_dict, __pyx_vtabptr_17clickhouse_driver_14bufferedwriter_BufferedSocketWriter) < 0) __PYX_ERR(0, 119, __pyx_L1_error)",
          "6916:   if (PyObject_SetAttr(__pyx_m, __pyx_n_s_BufferedSocketWriter, (PyObject *)&__pyx_type_17clickhouse_driver_14bufferedwriter_BufferedSocketWriter) < 0) __PYX_ERR(0, 119, __pyx_L1_error)",
          "6917:   if (__Pyx_setup_reduce((PyObject*)&__pyx_type_17clickhouse_driver_14bufferedwriter_BufferedSocketWriter) < 0) __PYX_ERR(0, 119, __pyx_L1_error)",
          "6923:   if (PyType_Ready(&__pyx_type_17clickhouse_driver_14bufferedwriter_CompressedBufferedWriter) < 0) __PYX_ERR(0, 133, __pyx_L1_error)",
          "6930:   if (__Pyx_SetVtable(__pyx_type_17clickhouse_driver_14bufferedwriter_CompressedBufferedWriter.tp_dict, __pyx_vtabptr_17clickhouse_driver_14bufferedwriter_CompressedBufferedWriter) < 0) __PYX_ERR(0, 133, __pyx_L1_error)",
          "6931:   if (PyObject_SetAttr(__pyx_m, __pyx_n_s_CompressedBufferedWriter, (PyObject *)&__pyx_type_17clickhouse_driver_14bufferedwriter_CompressedBufferedWriter) < 0) __PYX_ERR(0, 133, __pyx_L1_error)",
          "6932:   if (__Pyx_setup_reduce((PyObject*)&__pyx_type_17clickhouse_driver_14bufferedwriter_CompressedBufferedWriter) < 0) __PYX_ERR(0, 133, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 85 ---",
          "[Context before]",
          "7231:   if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)",
          "7232:   #endif",
          "7242:   __Pyx_GOTREF(__pyx_t_1);",
          "7243:   __Pyx_INCREF(__pyx_n_s_errors);",
          "7244:   __Pyx_GIVEREF(__pyx_n_s_errors);",
          "7245:   PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_errors);",
          "7247:   __Pyx_GOTREF(__pyx_t_2);",
          "7248:   __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;",
          "7250:   __Pyx_GOTREF(__pyx_t_1);",
          "7252:   __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;",
          "7253:   __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;",
          "7263:   __Pyx_GOTREF(__pyx_t_2);",
          "7268:   __Pyx_GOTREF(__pyx_t_1);",
          "7269:   __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;",
          "7271:   __Pyx_GOTREF(__pyx_t_2);",
          "7273:   __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;",
          "7274:   __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;",
          "",
          "[Removed Lines]",
          "7241:   __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5, __pyx_L1_error)",
          "7246:   __pyx_t_2 = __Pyx_Import(__pyx_n_s__2, __pyx_t_1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 5, __pyx_L1_error)",
          "7249:   __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_errors); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5, __pyx_L1_error)",
          "7251:   if (PyDict_SetItem(__pyx_d, __pyx_n_s_errors, __pyx_t_1) < 0) __PYX_ERR(0, 5, __pyx_L1_error)",
          "7262:   __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 6, __pyx_L1_error)",
          "7264:   __Pyx_INCREF(__pyx_n_s_write_varint);",
          "7265:   __Pyx_GIVEREF(__pyx_n_s_write_varint);",
          "7266:   PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_write_varint);",
          "7267:   __pyx_t_1 = __Pyx_Import(__pyx_n_s_varint, __pyx_t_2, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 6, __pyx_L1_error)",
          "7270:   __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_write_varint); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 6, __pyx_L1_error)",
          "7272:   if (PyDict_SetItem(__pyx_d, __pyx_n_s_write_varint, __pyx_t_2) < 0) __PYX_ERR(0, 6, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "7204:   __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 6, __pyx_L1_error)",
          "7209:   __pyx_t_2 = __Pyx_Import(__pyx_n_s__2, __pyx_t_1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 6, __pyx_L1_error)",
          "7212:   __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_errors); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 6, __pyx_L1_error)",
          "7214:   if (PyDict_SetItem(__pyx_d, __pyx_n_s_errors, __pyx_t_1) < 0) __PYX_ERR(0, 6, __pyx_L1_error)",
          "7225:   __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 7, __pyx_L1_error)",
          "7227:   __Pyx_INCREF(__pyx_n_s_make_varint);",
          "7228:   __Pyx_GIVEREF(__pyx_n_s_make_varint);",
          "7229:   PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_make_varint);",
          "7230:   __pyx_t_1 = __Pyx_Import(__pyx_n_s_varint, __pyx_t_2, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 7, __pyx_L1_error)",
          "7233:   __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_make_varint); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 7, __pyx_L1_error)",
          "7235:   if (PyDict_SetItem(__pyx_d, __pyx_n_s_make_varint, __pyx_t_2) < 0) __PYX_ERR(0, 7, __pyx_L1_error)",
          "",
          "---------------"
        ],
        "clickhouse_driver/bufferedwriter.pyx||clickhouse_driver/bufferedwriter.pyx": [
          "File: clickhouse_driver/bufferedwriter.pyx -> clickhouse_driver/bufferedwriter.pyx",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: from cpython cimport PyMem_Malloc, PyMem_Free, PyBytes_AsString, \\",
          "3: from libc.string cimport memcpy, memset",
          "5: from . import errors",
          "9: cdef class BufferedWriter(object):",
          "",
          "[Removed Lines]",
          "2:     PyBytes_Check, PyBytes_FromStringAndSize",
          "6: from .varint import write_varint",
          "",
          "[Added Lines]",
          "2:     PyBytes_Check, PyBytes_FromStringAndSize, PyBytes_AS_STRING, \\",
          "3:     PyBytes_GET_SIZE",
          "7: from .varint import make_varint",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "27:         raise NotImplementedError",
          "29:     cpdef write(self, data):",
          "37:         while written < data_len:",
          "38:             size = min(data_len - written, self.buffer_size - self.position)",
          "",
          "[Removed Lines]",
          "30:         cdef unsigned long long written = 0",
          "31:         cdef unsigned long long to_write, size",
          "32:         cdef unsigned long long data_len = len(data)",
          "33:         cdef char* c_data",
          "35:         c_data = PyBytes_AsString(data)",
          "",
          "[Added Lines]",
          "31:         cdef unsigned long long size, written = 0",
          "32:         cdef unsigned long long data_len = PyBytes_GET_SIZE(data)",
          "33:         cdef char* c_data = PyBytes_AS_STRING(data)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "57:                 else:",
          "58:                     raise ValueError('bytes object expected')",
          "61:             self.write(value)",
          "63:     def write_fixed_strings_as_bytes(self, items, Py_ssize_t length):",
          "",
          "[Removed Lines]",
          "60:             write_varint(len(value), self)",
          "",
          "[Added Lines]",
          "58:             self.write(make_varint(PyBytes_GET_SIZE(value)))",
          "",
          "---------------"
        ],
        "clickhouse_driver/varint.c||clickhouse_driver/varint.c": [
          "File: clickhouse_driver/varint.c -> clickhouse_driver/varint.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1211: static const char __pyx_k_num_buf[] = \"num_buf\";",
          "1212: static const char __pyx_k_read_one[] = \"read_one\";",
          "1213: static const char __pyx_k_to_write[] = \"to_write\";",
          "1214: static const char __pyx_k_read_varint[] = \"read_varint\";",
          "1215: static const char __pyx_k_write_varint[] = \"write_varint\";",
          "1216: static const char __pyx_k_cline_in_traceback[] = \"cline_in_traceback\";",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1214: static const char __pyx_k_make_varint[] = \"make_varint\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1223: static PyObject *__pyx_n_s_f;",
          "1224: static PyObject *__pyx_n_s_i;",
          "1225: static PyObject *__pyx_n_s_main;",
          "1226: static PyObject *__pyx_n_s_name;",
          "1227: static PyObject *__pyx_n_s_num_buf;",
          "1228: static PyObject *__pyx_n_s_number;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1227: static PyObject *__pyx_n_s_make_varint;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1234: static PyObject *__pyx_n_s_to_write;",
          "1235: static PyObject *__pyx_n_s_write;",
          "1236: static PyObject *__pyx_n_s_write_varint;",
          "1239: static PyObject *__pyx_tuple_;",
          "1240: static PyObject *__pyx_tuple__3;",
          "1241: static PyObject *__pyx_codeobj__2;",
          "1242: static PyObject *__pyx_codeobj__4;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1244: static PyObject *__pyx_tuple__5;",
          "1247: static PyObject *__pyx_codeobj__6;",
          "1260: static char __pyx_doc_17clickhouse_driver_6varint_make_varint[] = \"\\n    Writes integer of variable length using LEB128.\\n    \";",
          "1261: static PyMethodDef __pyx_mdef_17clickhouse_driver_6varint_1make_varint = {\"make_varint\", (PyCFunction)__pyx_pw_17clickhouse_driver_6varint_1make_varint, METH_O, __pyx_doc_17clickhouse_driver_6varint_make_varint};",
          "1262: static PyObject *__pyx_pw_17clickhouse_driver_6varint_1make_varint(PyObject *__pyx_self, PyObject *__pyx_arg_number) {",
          "1263:   unsigned PY_LONG_LONG __pyx_v_number;",
          "1264:   int __pyx_lineno = 0;",
          "1265:   const char *__pyx_filename = NULL;",
          "1266:   int __pyx_clineno = 0;",
          "1267:   PyObject *__pyx_r = 0;",
          "1268:   __Pyx_RefNannyDeclarations",
          "1269:   __Pyx_RefNannySetupContext(\"make_varint (wrapper)\", 0);",
          "1270:   assert(__pyx_arg_number); {",
          "1271:     __pyx_v_number = __Pyx_PyInt_As_unsigned_PY_LONG_LONG(__pyx_arg_number); if (unlikely((__pyx_v_number == (unsigned PY_LONG_LONG)-1) && PyErr_Occurred())) __PYX_ERR(0, 4, __pyx_L3_error)",
          "1272:   }",
          "1273:   goto __pyx_L4_argument_unpacking_done;",
          "1274:   __pyx_L3_error:;",
          "1275:   __Pyx_AddTraceback(\"clickhouse_driver.varint.make_varint\", __pyx_clineno, __pyx_lineno, __pyx_filename);",
          "1276:   __Pyx_RefNannyFinishContext();",
          "1277:   return NULL;",
          "1278:   __pyx_L4_argument_unpacking_done:;",
          "1279:   __pyx_r = __pyx_pf_17clickhouse_driver_6varint_make_varint(__pyx_self, ((unsigned PY_LONG_LONG)__pyx_v_number));",
          "1282:   __Pyx_RefNannyFinishContext();",
          "1283:   return __pyx_r;",
          "1284: }",
          "1286: static PyObject *__pyx_pf_17clickhouse_driver_6varint_make_varint(CYTHON_UNUSED PyObject *__pyx_self, unsigned PY_LONG_LONG __pyx_v_number) {",
          "1287:   unsigned char __pyx_v_to_write;",
          "1288:   unsigned char __pyx_v_i;",
          "1289:   unsigned char __pyx_v_num_buf[32];",
          "1290:   PyObject *__pyx_r = NULL;",
          "1291:   __Pyx_RefNannyDeclarations",
          "1292:   int __pyx_t_1;",
          "1293:   PyObject *__pyx_t_2 = NULL;",
          "1294:   int __pyx_lineno = 0;",
          "1295:   const char *__pyx_filename = NULL;",
          "1296:   int __pyx_clineno = 0;",
          "1297:   __Pyx_RefNannySetupContext(\"make_varint\", 0);",
          "1306:   __pyx_v_i = 0;",
          "1315:   while (1) {",
          "1324:     __pyx_v_to_write = (__pyx_v_number & 0x7f);",
          "1333:     __pyx_v_number = (__pyx_v_number >> 7);",
          "1342:     __pyx_t_1 = (__pyx_v_number != 0);",
          "1343:     if (__pyx_t_1) {",
          "1352:       (__pyx_v_num_buf[__pyx_v_i]) = (__pyx_v_to_write | 0x80);",
          "1361:       __pyx_v_i = (__pyx_v_i + 1);",
          "1370:       goto __pyx_L5;",
          "1371:     }",
          "1381:       (__pyx_v_num_buf[__pyx_v_i]) = __pyx_v_to_write;",
          "1390:       __pyx_v_i = (__pyx_v_i + 1);",
          "1399:       goto __pyx_L4_break;",
          "1400:     }",
          "1401:     __pyx_L5:;",
          "1402:   }",
          "1403:   __pyx_L4_break:;",
          "1412:   __Pyx_XDECREF(__pyx_r);",
          "1413:   __pyx_t_2 = PyBytes_FromStringAndSize(((char *)__pyx_v_num_buf), __pyx_v_i); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 25, __pyx_L1_error)",
          "1414:   __Pyx_GOTREF(__pyx_t_2);",
          "1415:   __pyx_r = __pyx_t_2;",
          "1416:   __pyx_t_2 = 0;",
          "1417:   goto __pyx_L0;",
          "1428:   __pyx_L1_error:;",
          "1429:   __Pyx_XDECREF(__pyx_t_2);",
          "1430:   __Pyx_AddTraceback(\"clickhouse_driver.varint.make_varint\", __pyx_clineno, __pyx_lineno, __pyx_filename);",
          "1431:   __pyx_r = NULL;",
          "1432:   __pyx_L0:;",
          "1433:   __Pyx_XGIVEREF(__pyx_r);",
          "1434:   __Pyx_RefNannyFinishContext();",
          "1435:   return __pyx_r;",
          "1436: }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1258:   unsigned PY_LONG_LONG __pyx_v_number;",
          "1259:   PyObject *__pyx_v_buf = 0;",
          "1260:   int __pyx_lineno = 0;",
          "",
          "[Removed Lines]",
          "1255: static char __pyx_doc_17clickhouse_driver_6varint_write_varint[] = \"\\n    Writes integer of variable length using LEB128.\\n    \";",
          "1256: static PyMethodDef __pyx_mdef_17clickhouse_driver_6varint_1write_varint = {\"write_varint\", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_17clickhouse_driver_6varint_1write_varint, METH_VARARGS|METH_KEYWORDS, __pyx_doc_17clickhouse_driver_6varint_write_varint};",
          "1257: static PyObject *__pyx_pw_17clickhouse_driver_6varint_1write_varint(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {",
          "",
          "[Added Lines]",
          "1448: static char __pyx_doc_17clickhouse_driver_6varint_2write_varint[] = \"\\n    Writes integer of variable length using LEB128.\\n    \";",
          "1449: static PyMethodDef __pyx_mdef_17clickhouse_driver_6varint_3write_varint = {\"write_varint\", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_17clickhouse_driver_6varint_3write_varint, METH_VARARGS|METH_KEYWORDS, __pyx_doc_17clickhouse_driver_6varint_2write_varint};",
          "1450: static PyObject *__pyx_pw_17clickhouse_driver_6varint_3write_varint(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1286:         case  1:",
          "1287:         if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_buf)) != 0)) kw_args--;",
          "1288:         else {",
          "1290:         }",
          "1291:       }",
          "1292:       if (unlikely(kw_args > 0)) {",
          "1294:       }",
          "1295:     } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {",
          "1296:       goto __pyx_L5_argtuple_error;",
          "",
          "[Removed Lines]",
          "1289:           __Pyx_RaiseArgtupleInvalid(\"write_varint\", 1, 2, 2, 1); __PYX_ERR(0, 4, __pyx_L3_error)",
          "1293:         if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, \"write_varint\") < 0)) __PYX_ERR(0, 4, __pyx_L3_error)",
          "",
          "[Added Lines]",
          "1482:           __Pyx_RaiseArgtupleInvalid(\"write_varint\", 1, 2, 2, 1); __PYX_ERR(0, 28, __pyx_L3_error)",
          "1486:         if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, \"write_varint\") < 0)) __PYX_ERR(0, 28, __pyx_L3_error)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1298:       values[0] = PyTuple_GET_ITEM(__pyx_args, 0);",
          "1299:       values[1] = PyTuple_GET_ITEM(__pyx_args, 1);",
          "1300:     }",
          "1302:     __pyx_v_buf = values[1];",
          "1303:   }",
          "1304:   goto __pyx_L4_argument_unpacking_done;",
          "1305:   __pyx_L5_argtuple_error:;",
          "1307:   __pyx_L3_error:;",
          "1308:   __Pyx_AddTraceback(\"clickhouse_driver.varint.write_varint\", __pyx_clineno, __pyx_lineno, __pyx_filename);",
          "1309:   __Pyx_RefNannyFinishContext();",
          "1310:   return NULL;",
          "1311:   __pyx_L4_argument_unpacking_done:;",
          "1315:   __Pyx_RefNannyFinishContext();",
          "1316:   return __pyx_r;",
          "1317: }",
          "1320:   unsigned char __pyx_v_to_write;",
          "1321:   unsigned char __pyx_v_i;",
          "1322:   unsigned char __pyx_v_num_buf[32];",
          "",
          "[Removed Lines]",
          "1301:     __pyx_v_number = __Pyx_PyInt_As_unsigned_PY_LONG_LONG(values[0]); if (unlikely((__pyx_v_number == (unsigned PY_LONG_LONG)-1) && PyErr_Occurred())) __PYX_ERR(0, 4, __pyx_L3_error)",
          "1306:   __Pyx_RaiseArgtupleInvalid(\"write_varint\", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 4, __pyx_L3_error)",
          "1312:   __pyx_r = __pyx_pf_17clickhouse_driver_6varint_write_varint(__pyx_self, __pyx_v_number, __pyx_v_buf);",
          "1319: static PyObject *__pyx_pf_17clickhouse_driver_6varint_write_varint(CYTHON_UNUSED PyObject *__pyx_self, unsigned PY_LONG_LONG __pyx_v_number, PyObject *__pyx_v_buf) {",
          "",
          "[Added Lines]",
          "1494:     __pyx_v_number = __Pyx_PyInt_As_unsigned_PY_LONG_LONG(values[0]); if (unlikely((__pyx_v_number == (unsigned PY_LONG_LONG)-1) && PyErr_Occurred())) __PYX_ERR(0, 28, __pyx_L3_error)",
          "1499:   __Pyx_RaiseArgtupleInvalid(\"write_varint\", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 28, __pyx_L3_error)",
          "1505:   __pyx_r = __pyx_pf_17clickhouse_driver_6varint_2write_varint(__pyx_self, __pyx_v_number, __pyx_v_buf);",
          "1512: static PyObject *__pyx_pf_17clickhouse_driver_6varint_2write_varint(CYTHON_UNUSED PyObject *__pyx_self, unsigned PY_LONG_LONG __pyx_v_number, PyObject *__pyx_v_buf) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1438:   }",
          "1439:   __pyx_L4_break:;",
          "1449:   __Pyx_GOTREF(__pyx_t_3);",
          "1451:   __Pyx_GOTREF(__pyx_t_4);",
          "1452:   __pyx_t_5 = NULL;",
          "1453:   if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {",
          "",
          "[Removed Lines]",
          "1448:   __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_buf, __pyx_n_s_write); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 25, __pyx_L1_error)",
          "1450:   __pyx_t_4 = PyBytes_FromStringAndSize(((char *)__pyx_v_num_buf), __pyx_v_i); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 25, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "1641:   __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_buf, __pyx_n_s_write); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 49, __pyx_L1_error)",
          "1643:   __pyx_t_4 = PyBytes_FromStringAndSize(((char *)__pyx_v_num_buf), __pyx_v_i); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 49, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1462:   __pyx_t_2 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4);",
          "1463:   __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;",
          "1464:   __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;",
          "1466:   __Pyx_GOTREF(__pyx_t_2);",
          "1467:   __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;",
          "1468:   __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;",
          "",
          "[Removed Lines]",
          "1465:   if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 25, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "1658:   if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 49, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1507:   PyObject *__pyx_r = 0;",
          "1508:   __Pyx_RefNannyDeclarations",
          "1509:   __Pyx_RefNannySetupContext(\"read_varint (wrapper)\", 0);",
          "1513:   __Pyx_RefNannyFinishContext();",
          "1514:   return __pyx_r;",
          "1515: }",
          "1518:   unsigned char __pyx_v_shift;",
          "1519:   unsigned PY_LONG_LONG __pyx_v_i;",
          "1520:   unsigned PY_LONG_LONG __pyx_v_result;",
          "",
          "[Removed Lines]",
          "1504: static char __pyx_doc_17clickhouse_driver_6varint_2read_varint[] = \"\\n    Reads integer of variable length using LEB128.\\n    \";",
          "1505: static PyMethodDef __pyx_mdef_17clickhouse_driver_6varint_3read_varint = {\"read_varint\", (PyCFunction)__pyx_pw_17clickhouse_driver_6varint_3read_varint, METH_O, __pyx_doc_17clickhouse_driver_6varint_2read_varint};",
          "1506: static PyObject *__pyx_pw_17clickhouse_driver_6varint_3read_varint(PyObject *__pyx_self, PyObject *__pyx_v_f) {",
          "1510:   __pyx_r = __pyx_pf_17clickhouse_driver_6varint_2read_varint(__pyx_self, ((PyObject *)__pyx_v_f));",
          "1517: static PyObject *__pyx_pf_17clickhouse_driver_6varint_2read_varint(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_f) {",
          "",
          "[Added Lines]",
          "1697: static char __pyx_doc_17clickhouse_driver_6varint_4read_varint[] = \"\\n    Reads integer of variable length using LEB128.\\n    \";",
          "1698: static PyMethodDef __pyx_mdef_17clickhouse_driver_6varint_5read_varint = {\"read_varint\", (PyCFunction)__pyx_pw_17clickhouse_driver_6varint_5read_varint, METH_O, __pyx_doc_17clickhouse_driver_6varint_4read_varint};",
          "1699: static PyObject *__pyx_pw_17clickhouse_driver_6varint_5read_varint(PyObject *__pyx_self, PyObject *__pyx_v_f) {",
          "1703:   __pyx_r = __pyx_pf_17clickhouse_driver_6varint_4read_varint(__pyx_self, ((PyObject *)__pyx_v_f));",
          "1710: static PyObject *__pyx_pf_17clickhouse_driver_6varint_4read_varint(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_f) {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1550:   __pyx_v_result = 0;",
          "1560:   __Pyx_GOTREF(__pyx_t_1);",
          "1561:   __pyx_v_read_one = __pyx_t_1;",
          "1562:   __pyx_t_1 = 0;",
          "",
          "[Removed Lines]",
          "1559:   __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_f, __pyx_n_s_read_one); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 35, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "1752:   __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_f, __pyx_n_s_read_one); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 59, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1590:     }",
          "1591:     __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);",
          "1592:     __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;",
          "1594:     __Pyx_GOTREF(__pyx_t_1);",
          "1595:     __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;",
          "1597:     __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;",
          "1598:     __pyx_v_i = __pyx_t_4;",
          "",
          "[Removed Lines]",
          "1593:     if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 38, __pyx_L1_error)",
          "1596:     __pyx_t_4 = __Pyx_PyInt_As_unsigned_PY_LONG_LONG(__pyx_t_1); if (unlikely((__pyx_t_4 == (unsigned PY_LONG_LONG)-1) && PyErr_Occurred())) __PYX_ERR(0, 38, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "1786:     if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 62, __pyx_L1_error)",
          "1789:     __pyx_t_4 = __Pyx_PyInt_As_unsigned_PY_LONG_LONG(__pyx_t_1); if (unlikely((__pyx_t_4 == (unsigned PY_LONG_LONG)-1) && PyErr_Occurred())) __PYX_ERR(0, 62, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1645:   }",
          "1646:   __pyx_L4_break:;",
          "1653:   __Pyx_XDECREF(__pyx_r);",
          "1655:   __Pyx_GOTREF(__pyx_t_1);",
          "1656:   __pyx_r = __pyx_t_1;",
          "1657:   __pyx_t_1 = 0;",
          "1658:   goto __pyx_L0;",
          "",
          "[Removed Lines]",
          "1654:   __pyx_t_1 = __Pyx_PyInt_From_unsigned_PY_LONG_LONG(__pyx_v_result); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 44, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "1847:   __pyx_t_1 = __Pyx_PyInt_From_unsigned_PY_LONG_LONG(__pyx_v_result); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 68, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1732:   {&__pyx_n_s_f, __pyx_k_f, sizeof(__pyx_k_f), 0, 0, 1, 1},",
          "1733:   {&__pyx_n_s_i, __pyx_k_i, sizeof(__pyx_k_i), 0, 0, 1, 1},",
          "1734:   {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},",
          "1735:   {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},",
          "1736:   {&__pyx_n_s_num_buf, __pyx_k_num_buf, sizeof(__pyx_k_num_buf), 0, 0, 1, 1},",
          "1737:   {&__pyx_n_s_number, __pyx_k_number, sizeof(__pyx_k_number), 0, 0, 1, 1},",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1928:   {&__pyx_n_s_make_varint, __pyx_k_make_varint, sizeof(__pyx_k_make_varint), 0, 0, 1, 1},",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1764:   __Pyx_GOTREF(__pyx_tuple_);",
          "1765:   __Pyx_GIVEREF(__pyx_tuple_);",
          "1776:   __Pyx_GOTREF(__pyx_tuple__3);",
          "1777:   __Pyx_GIVEREF(__pyx_tuple__3);",
          "1779:   __Pyx_RefNannyFinishContext();",
          "1780:   return 0;",
          "1781:   __pyx_L1_error:;",
          "",
          "[Removed Lines]",
          "1763:   __pyx_tuple_ = PyTuple_Pack(5, __pyx_n_s_number, __pyx_n_s_buf, __pyx_n_s_to_write, __pyx_n_s_i, __pyx_n_s_num_buf); if (unlikely(!__pyx_tuple_)) __PYX_ERR(0, 4, __pyx_L1_error)",
          "1766:   __pyx_codeobj__2 = (PyObject*)__Pyx_PyCode_New(2, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple_, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_clickhouse_driver_varint_pyx, __pyx_n_s_write_varint, 4, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__2)) __PYX_ERR(0, 4, __pyx_L1_error)",
          "1775:   __pyx_tuple__3 = PyTuple_Pack(5, __pyx_n_s_f, __pyx_n_s_shift, __pyx_n_s_i, __pyx_n_s_result, __pyx_n_s_read_one); if (unlikely(!__pyx_tuple__3)) __PYX_ERR(0, 28, __pyx_L1_error)",
          "1778:   __pyx_codeobj__4 = (PyObject*)__Pyx_PyCode_New(1, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__3, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_clickhouse_driver_varint_pyx, __pyx_n_s_read_varint, 28, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__4)) __PYX_ERR(0, 28, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "1957:   __pyx_tuple_ = PyTuple_Pack(5, __pyx_n_s_number, __pyx_n_s_number, __pyx_n_s_to_write, __pyx_n_s_i, __pyx_n_s_num_buf); if (unlikely(!__pyx_tuple_)) __PYX_ERR(0, 4, __pyx_L1_error)",
          "1960:   __pyx_codeobj__2 = (PyObject*)__Pyx_PyCode_New(1, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple_, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_clickhouse_driver_varint_pyx, __pyx_n_s_make_varint, 4, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__2)) __PYX_ERR(0, 4, __pyx_L1_error)",
          "1969:   __pyx_tuple__3 = PyTuple_Pack(5, __pyx_n_s_number, __pyx_n_s_buf, __pyx_n_s_to_write, __pyx_n_s_i, __pyx_n_s_num_buf); if (unlikely(!__pyx_tuple__3)) __PYX_ERR(0, 28, __pyx_L1_error)",
          "1972:   __pyx_codeobj__4 = (PyObject*)__Pyx_PyCode_New(2, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__3, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_clickhouse_driver_varint_pyx, __pyx_n_s_write_varint, 28, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__4)) __PYX_ERR(0, 28, __pyx_L1_error)",
          "1981:   __pyx_tuple__5 = PyTuple_Pack(5, __pyx_n_s_f, __pyx_n_s_shift, __pyx_n_s_i, __pyx_n_s_result, __pyx_n_s_read_one); if (unlikely(!__pyx_tuple__5)) __PYX_ERR(0, 52, __pyx_L1_error)",
          "1982:   __Pyx_GOTREF(__pyx_tuple__5);",
          "1983:   __Pyx_GIVEREF(__pyx_tuple__5);",
          "1984:   __pyx_codeobj__6 = (PyObject*)__Pyx_PyCode_New(1, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__5, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_clickhouse_driver_varint_pyx, __pyx_n_s_read_varint, 52, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__6)) __PYX_ERR(0, 52, __pyx_L1_error)",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "2096:   __Pyx_GOTREF(__pyx_t_1);",
          "2098:   __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;",
          "2108:   __Pyx_GOTREF(__pyx_t_1);",
          "2110:   __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;",
          "",
          "[Removed Lines]",
          "2095:   __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_17clickhouse_driver_6varint_1write_varint, NULL, __pyx_n_s_clickhouse_driver_varint); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)",
          "2097:   if (PyDict_SetItem(__pyx_d, __pyx_n_s_write_varint, __pyx_t_1) < 0) __PYX_ERR(0, 4, __pyx_L1_error)",
          "2107:   __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_17clickhouse_driver_6varint_3read_varint, NULL, __pyx_n_s_clickhouse_driver_varint); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 28, __pyx_L1_error)",
          "2109:   if (PyDict_SetItem(__pyx_d, __pyx_n_s_read_varint, __pyx_t_1) < 0) __PYX_ERR(0, 28, __pyx_L1_error)",
          "",
          "[Added Lines]",
          "2301:   __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_17clickhouse_driver_6varint_1make_varint, NULL, __pyx_n_s_clickhouse_driver_varint); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)",
          "2303:   if (PyDict_SetItem(__pyx_d, __pyx_n_s_make_varint, __pyx_t_1) < 0) __PYX_ERR(0, 4, __pyx_L1_error)",
          "2313:   __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_17clickhouse_driver_6varint_3write_varint, NULL, __pyx_n_s_clickhouse_driver_varint); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 28, __pyx_L1_error)",
          "2314:   __Pyx_GOTREF(__pyx_t_1);",
          "2315:   if (PyDict_SetItem(__pyx_d, __pyx_n_s_write_varint, __pyx_t_1) < 0) __PYX_ERR(0, 28, __pyx_L1_error)",
          "2316:   __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;",
          "2325:   __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_17clickhouse_driver_6varint_5read_varint, NULL, __pyx_n_s_clickhouse_driver_varint); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 52, __pyx_L1_error)",
          "2327:   if (PyDict_SetItem(__pyx_d, __pyx_n_s_read_varint, __pyx_t_1) < 0) __PYX_ERR(0, 52, __pyx_L1_error)",
          "",
          "---------------"
        ],
        "clickhouse_driver/varint.pyx||clickhouse_driver/varint.pyx": [
          "File: clickhouse_driver/varint.pyx -> clickhouse_driver/varint.pyx",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: def write_varint(unsigned long long number, buf):",
          "",
          "[Removed Lines]",
          "1: from cpython cimport Py_INCREF, PyBytes_FromStringAndSize",
          "",
          "[Added Lines]",
          "1: from cpython cimport PyBytes_FromStringAndSize",
          "4: def make_varint(unsigned long long number):",
          "5:     \"\"\"",
          "6:     Writes integer of variable length using LEB128.",
          "7:     \"\"\"",
          "8:     cdef unsigned char to_write, i = 0",
          "9:     # unsigned PY_LONG_LONG checks integer on function call and",
          "10:     # raises OverflowError if integer overflows unsigned PY_LONG_LONG.",
          "11:     # Long enough for handling unsigned PY_LONG_LONG.",
          "12:     cdef unsigned char num_buf[32]",
          "14:     while True:",
          "15:         to_write = number & 0x7f",
          "16:         number >>= 7",
          "17:         if number:",
          "18:             num_buf[i] = to_write | 0x80",
          "19:             i += 1",
          "20:         else:",
          "21:             num_buf[i] = to_write",
          "22:             i += 1",
          "23:             break",
          "25:     return PyBytes_FromStringAndSize(<char *>num_buf, i)",
          "",
          "---------------"
        ]
      }
    }
  ]
}