{
  "cve_id": "CVE-2017-3733",
  "cve_desc": "During a renegotiation handshake if the Encrypt-Then-Mac extension is negotiated where it was not in the original handshake (or vice-versa) then this can cause OpenSSL 1.1.0 before 1.1.0e to crash (dependent on ciphersuite). Both clients and servers are affected.",
  "repo": "openssl/openssl",
  "patch_hash": "4ad93618d26a3ea23d36ad5498ff4f59eff3a4d2",
  "patch_info": {
    "commit_hash": "4ad93618d26a3ea23d36ad5498ff4f59eff3a4d2",
    "repo": "openssl/openssl",
    "commit_url": "https://github.com/openssl/openssl/commit/4ad93618d26a3ea23d36ad5498ff4f59eff3a4d2",
    "files": [
      "include/openssl/ssl3.h",
      "ssl/record/rec_layer_s3.c",
      "ssl/record/ssl3_record.c",
      "ssl/ssl_locl.h",
      "ssl/t1_enc.c",
      "ssl/t1_lib.c"
    ],
    "message": "Don't change the state of the ETM flags until CCS processing\n\nChanging the ciphersuite during a renegotiation can result in a crash\nleading to a DoS attack. ETM has not been implemented in 1.1.0 for DTLS\nso this is TLS only.\n\nThe problem is caused by changing the flag indicating whether to use ETM\nor not immediately on negotiation of ETM, rather than at CCS. Therefore,\nduring a renegotiation, if the ETM state is changing (usually due to a\nchange of ciphersuite), then an error/crash will occur.\n\nDue to the fact that there are separate CCS messages for read and write\nwe actually now need two flags to determine whether to use ETM or not.\n\nCVE-2017-3733\n\nReviewed-by: Richard Levitte <levitte@openssl.org>",
    "before_after_code_files": [
      "include/openssl/ssl3.h||include/openssl/ssl3.h",
      "ssl/record/rec_layer_s3.c||ssl/record/rec_layer_s3.c",
      "ssl/record/ssl3_record.c||ssl/record/ssl3_record.c",
      "ssl/ssl_locl.h||ssl/ssl_locl.h",
      "ssl/t1_enc.c||ssl/t1_enc.c",
      "ssl/t1_lib.c||ssl/t1_lib.c"
    ]
  },
  "patch_diff": {
    "include/openssl/ssl3.h||include/openssl/ssl3.h": [
      "File: include/openssl/ssl3.h -> include/openssl/ssl3.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "264: # define TLS1_FLAGS_SKIP_CERT_VERIFY             0x0010",
      "270: # define TLS1_FLAGS_RECEIVED_EXTMS               0x0200",
      "272: # define SSL3_MT_HELLO_REQUEST                   0",
      "273: # define SSL3_MT_CLIENT_HELLO                    1",
      "274: # define SSL3_MT_SERVER_HELLO                    2",
      "",
      "[Removed Lines]",
      "267: # define TLS1_FLAGS_ENCRYPT_THEN_MAC             0x0100",
      "",
      "[Added Lines]",
      "267: # define TLS1_FLAGS_ENCRYPT_THEN_MAC_READ        0x0100",
      "268: # define TLS1_FLAGS_ENCRYPT_THEN_MAC             TLS1_FLAGS_ENCRYPT_THEN_MAC_READ",
      "273: # define TLS1_FLAGS_ENCRYPT_THEN_MAC_WRITE       0x0400",
      "",
      "---------------"
    ],
    "ssl/record/rec_layer_s3.c||ssl/record/rec_layer_s3.c": [
      "File: ssl/record/rec_layer_s3.c -> ssl/record/rec_layer_s3.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "395:     if (type == SSL3_RT_APPLICATION_DATA &&",
      "396:         u_len >= 4 * (max_send_fragment = s->max_send_fragment) &&",
      "397:         s->compress == NULL && s->msg_callback == NULL &&",
      "399:         EVP_CIPHER_flags(EVP_CIPHER_CTX_cipher(s->enc_write_ctx)) &",
      "400:         EVP_CIPH_FLAG_TLS1_1_MULTIBLOCK) {",
      "401:         unsigned char aad[13];",
      "",
      "[Removed Lines]",
      "398:         !SSL_USE_ETM(s) && SSL_USE_EXPLICIT_IV(s) &&",
      "",
      "[Added Lines]",
      "398:         !SSL_WRITE_ETM(s) && SSL_USE_EXPLICIT_IV(s) &&",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "795:             if (s->method->ssl3_enc->mac(s, &wr[j],",
      "796:                                          &(outbuf[j][wr[j].length + eivlen]),",
      "797:                                          1) < 0)",
      "",
      "[Removed Lines]",
      "794:         if (!SSL_USE_ETM(s) && mac_size != 0) {",
      "",
      "[Added Lines]",
      "794:         if (!SSL_WRITE_ETM(s) && mac_size != 0) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "814:         goto err;",
      "816:     for (j = 0; j < numpipes; j++) {",
      "818:             if (s->method->ssl3_enc->mac(s, &wr[j],",
      "819:                                          outbuf[j] + wr[j].length, 1) < 0)",
      "820:                 goto err;",
      "",
      "[Removed Lines]",
      "817:         if (SSL_USE_ETM(s) && mac_size != 0) {",
      "",
      "[Added Lines]",
      "817:         if (SSL_WRITE_ETM(s) && mac_size != 0) {",
      "",
      "---------------"
    ],
    "ssl/record/ssl3_record.c||ssl/record/ssl3_record.c": [
      "File: ssl/record/ssl3_record.c -> ssl/record/ssl3_record.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "350:         unsigned char *mac;",
      "351:         mac_size = EVP_MD_CTX_size(s->read_hash);",
      "352:         OPENSSL_assert(mac_size <= EVP_MAX_MD_SIZE);",
      "",
      "[Removed Lines]",
      "349:     if (SSL_USE_ETM(s) && s->read_hash) {",
      "",
      "[Added Lines]",
      "349:     if (SSL_READ_ETM(s) && s->read_hash) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "394:     if ((sess != NULL) &&",
      "395:         (s->enc_read_ctx != NULL) &&",
      "398:         unsigned char *mac = NULL;",
      "399:         unsigned char mac_tmp[EVP_MAX_MD_SIZE];",
      "",
      "[Removed Lines]",
      "396:         (EVP_MD_CTX_md(s->read_hash) != NULL) && !SSL_USE_ETM(s)) {",
      "",
      "[Added Lines]",
      "396:         (!SSL_READ_ETM(s) && EVP_MD_CTX_md(s->read_hash) != NULL)) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "823:         }",
      "825:         ret = 1;",
      "827:             mac_size = EVP_MD_CTX_size(s->read_hash);",
      "828:         if ((bs != 1) && !send) {",
      "829:             int tmpret;",
      "",
      "[Removed Lines]",
      "826:         if (!SSL_USE_ETM(s) && EVP_MD_CTX_md(s->read_hash) != NULL)",
      "",
      "[Added Lines]",
      "826:         if (!SSL_READ_ETM(s) && EVP_MD_CTX_md(s->read_hash) != NULL)",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "997:     header[11] = (rec->length) >> 8;",
      "998:     header[12] = (rec->length) & 0xff;",
      "1001:         EVP_CIPHER_CTX_mode(ssl->enc_read_ctx) == EVP_CIPH_CBC_MODE &&",
      "1002:         ssl3_cbc_record_digest_supported(mac_ctx)) {",
      "",
      "[Removed Lines]",
      "1000:     if (!send && !SSL_USE_ETM(ssl) &&",
      "",
      "[Added Lines]",
      "1000:     if (!send && !SSL_READ_ETM(ssl) &&",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1022:             EVP_MD_CTX_free(hmac);",
      "1023:             return -1;",
      "1024:         }",
      "1026:             if (!tls_fips_digest_extra(ssl->enc_read_ctx,",
      "1027:                                        mac_ctx, rec->input,",
      "1028:                                        rec->length, rec->orig_len)) {",
      "",
      "[Removed Lines]",
      "1025:         if (!send && !SSL_USE_ETM(ssl) && FIPS_mode())",
      "",
      "[Added Lines]",
      "1025:         if (!send && !SSL_READ_ETM(ssl) && FIPS_mode())",
      "",
      "---------------"
    ],
    "ssl/ssl_locl.h||ssl/ssl_locl.h": [
      "File: ssl/ssl_locl.h -> ssl/ssl_locl.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "378: # define SSL_CLIENT_USE_SIGALGS(s)        \\",
      "379:     SSL_CLIENT_USE_TLS1_2_CIPHERS(s)",
      "384: # define SSL_PKEY_RSA_ENC        0",
      "",
      "[Removed Lines]",
      "381: # define SSL_USE_ETM(s) (s->s3->flags & TLS1_FLAGS_ENCRYPT_THEN_MAC)",
      "",
      "[Added Lines]",
      "381: # define SSL_READ_ETM(s) (s->s3->flags & TLS1_FLAGS_ENCRYPT_THEN_MAC_READ)",
      "382: # define SSL_WRITE_ETM(s) (s->s3->flags & TLS1_FLAGS_ENCRYPT_THEN_MAC_WRITE)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1111:     unsigned char *alpn_client_proto_list;",
      "1112:     unsigned alpn_client_proto_list_len;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1116:     int tlsext_use_etm;",
      "",
      "---------------"
    ],
    "ssl/t1_enc.c||ssl/t1_enc.c": [
      "File: ssl/t1_enc.c -> ssl/t1_enc.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "130: #endif",
      "132:     if (which & SSL3_CC_READ) {",
      "133:         if (s->s3->tmp.new_cipher->algorithm2 & TLS1_STREAM_MAC)",
      "134:             s->mac_flags |= SSL_MAC_FLAG_READ_MAC_STREAM;",
      "135:         else",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "133:         if (s->tlsext_use_etm)",
      "134:             s->s3->flags |= TLS1_FLAGS_ENCRYPT_THEN_MAC_READ;",
      "135:         else",
      "136:             s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC_READ;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "168:         mac_secret = &(s->s3->read_mac_secret[0]);",
      "169:         mac_secret_size = &(s->s3->read_mac_secret_size);",
      "170:     } else {",
      "171:         if (s->s3->tmp.new_cipher->algorithm2 & TLS1_STREAM_MAC)",
      "172:             s->mac_flags |= SSL_MAC_FLAG_WRITE_MAC_STREAM;",
      "173:         else",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "176:         if (s->tlsext_use_etm)",
      "177:             s->s3->flags |= TLS1_FLAGS_ENCRYPT_THEN_MAC_WRITE;",
      "178:         else",
      "179:             s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC_WRITE;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "367:     if (s->s3->tmp.key_block_length != 0)",
      "368:         return (1);",
      "373:         SSLerr(SSL_F_TLS1_SETUP_KEY_BLOCK, SSL_R_CIPHER_OR_HASH_UNAVAILABLE);",
      "374:         return (0);",
      "375:     }",
      "",
      "[Removed Lines]",
      "370:     if (!ssl_cipher_get_evp",
      "371:         (s->session, &c, &hash, &mac_type, &mac_secret_size, &comp,",
      "372:          SSL_USE_ETM(s))) {",
      "",
      "[Added Lines]",
      "380:     if (!ssl_cipher_get_evp(s->session, &c, &hash, &mac_type, &mac_secret_size,",
      "381:                             &comp, s->tlsext_use_etm)) {",
      "",
      "---------------"
    ],
    "ssl/t1_lib.c||ssl/t1_lib.c": [
      "File: ssl/t1_lib.c -> ssl/t1_lib.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1674: #endif",
      "1675:     if (!custom_ext_add(s, 1, &ret, limit, al))",
      "1676:         return NULL;",
      "",
      "[Removed Lines]",
      "1677:     if (s->s3->flags & TLS1_FLAGS_ENCRYPT_THEN_MAC) {",
      "",
      "[Added Lines]",
      "1677:     if (s->tlsext_use_etm) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1683:             || s->s3->tmp.new_cipher->algorithm_enc == SSL_RC4",
      "1684:             || s->s3->tmp.new_cipher->algorithm_enc == SSL_eGOST2814789CNT",
      "1685:             || s->s3->tmp.new_cipher->algorithm_enc == SSL_eGOST2814789CNT12)",
      "1687:         else {",
      "",
      "[Removed Lines]",
      "1686:             s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC;",
      "",
      "[Added Lines]",
      "1686:             s->tlsext_use_etm = 0;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1917:     OPENSSL_free(s->s3->tmp.peer_sigalgs);",
      "1918:     s->s3->tmp.peer_sigalgs = NULL;",
      "1921: #ifndef OPENSSL_NO_SRP",
      "1922:     OPENSSL_free(s->srp_ctx.login);",
      "",
      "[Removed Lines]",
      "1919:     s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC;",
      "",
      "[Added Lines]",
      "1919:     s->tlsext_use_etm = 0;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "2264:         }",
      "2265: #endif",
      "2266:         else if (type == TLSEXT_TYPE_encrypt_then_mac)",
      "",
      "[Removed Lines]",
      "2267:             s->s3->flags |= TLS1_FLAGS_ENCRYPT_THEN_MAC;",
      "",
      "[Added Lines]",
      "2267:             s->tlsext_use_etm = 1;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "2366:                              SSL_DTLSEXT_HB_DONT_SEND_REQUESTS);",
      "2367: #endif",
      "2371:     s->s3->flags &= ~TLS1_FLAGS_RECEIVED_EXTMS;",
      "",
      "[Removed Lines]",
      "2369:     s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC;",
      "",
      "[Added Lines]",
      "2369:     s->tlsext_use_etm = 0;",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "2586:             if (s->s3->tmp.new_cipher->algorithm_mac != SSL_AEAD",
      "2587:                 && s->s3->tmp.new_cipher->algorithm_enc != SSL_RC4)",
      "2589:         } else if (type == TLSEXT_TYPE_extended_master_secret) {",
      "2590:             s->s3->flags |= TLS1_FLAGS_RECEIVED_EXTMS;",
      "2591:             if (!s->hit)",
      "",
      "[Removed Lines]",
      "2588:                 s->s3->flags |= TLS1_FLAGS_ENCRYPT_THEN_MAC;",
      "",
      "[Added Lines]",
      "2588:                 s->tlsext_use_etm = 1;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "4b74b511131cf6703c82c25656bac7058d8ebe2f",
      "candidate_info": {
        "commit_hash": "4b74b511131cf6703c82c25656bac7058d8ebe2f",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/4b74b511131cf6703c82c25656bac7058d8ebe2f",
        "files": [
          "test/recipes/15-test_rsa.t"
        ],
        "message": "Don't run MSBLOB conversion tests when RSA or DSA are disabled\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2174)\n(cherry picked from commit d8594555ffaf98ada08b26ce3d1138f16bc029c5)",
        "before_after_code_files": [
          "test/recipes/15-test_rsa.t||test/recipes/15-test_rsa.t"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/recipes/15-test_rsa.t||test/recipes/15-test_rsa.t": [
          "File: test/recipes/15-test_rsa.t -> test/recipes/15-test_rsa.t",
          "--- Hunk 1 ---",
          "[Context before]",
          "34:      subtest 'rsa conversions -- private key PKCS#8' => sub {",
          "35:   tconversion(\"rsa\", srctop_file(\"test\",\"testrsa.pem\"), \"pkey\");",
          "36:      };",
          "37:      subtest 'rsa conversions -- public key' => sub {",
          "38:   tconversion(\"msb\", srctop_file(\"test\",\"testrsapub.pem\"), \"rsa\",",
          "39:        \"-pubin\", \"-pubout\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "37: }",
          "39:  SKIP: {",
          "40:      skip \"Skipping msblob conversion test\", 1",
          "41:   if disabled(\"rsa\") || disabled(\"dsa\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "23e6bf041bc5a5404cfa847dba1d2b2878e6f48c",
      "candidate_info": {
        "commit_hash": "23e6bf041bc5a5404cfa847dba1d2b2878e6f48c",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/23e6bf041bc5a5404cfa847dba1d2b2878e6f48c",
        "files": [
          "crypto/threads_pthread.c"
        ],
        "message": "Corrections according the review comments.\n\nUpdated indentations according project rules, renamed file-local define to the shorter version - USE_RWLOCK, fixed declaration after the if statement in CRYPTO_THREAD_lock_new().\nReviewed-by: Rich Salz <rsalz@openssl.org>\nReviewed-by: Richard Levitte <levitte@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/1981)\n(cherry picked from commit ec93a2921f6128ac931466ae171fba92a0eab45d)",
        "before_after_code_files": [
          "crypto/threads_pthread.c||crypto/threads_pthread.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/threads_pthread.c||crypto/threads_pthread.c": [
          "File: crypto/threads_pthread.c -> crypto/threads_pthread.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: #if defined(OPENSSL_THREADS) && !defined(CRYPTO_TDEBUG) && !defined(OPENSSL_SYS_WINDOWS)",
          "18: CRYPTO_RWLOCK *CRYPTO_THREAD_lock_new(void)",
          "19: {",
          "21:     CRYPTO_RWLOCK *lock = OPENSSL_zalloc(sizeof(pthread_rwlock_t));",
          "22:     if (lock == NULL)",
          "23:         return NULL;",
          "",
          "[Removed Lines]",
          "14: #ifdef PTHREAD_RWLOCK_INITIALIZER",
          "15:     #define OPENSSL_THREADS_HAVE_PTHREAD_RWLOCK",
          "16: #endif",
          "20: #ifdef OPENSSL_THREADS_HAVE_PTHREAD_RWLOCK",
          "",
          "[Added Lines]",
          "14: # ifdef PTHREAD_RWLOCK_INITIALIZER",
          "15: #  define USE_RWLOCK",
          "16: # endif",
          "20: # ifdef USE_RWLOCK",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "26:         OPENSSL_free(lock);",
          "27:         return NULL;",
          "28:     }",
          "30:     CRYPTO_RWLOCK *lock = OPENSSL_zalloc(sizeof(pthread_mutex_t));",
          "31:     if (lock == NULL)",
          "32:         return NULL;",
          "35:     pthread_mutexattr_init(&attr);",
          "36:     pthread_mutexattr_settype(&attr, PTHREAD_MUTEX_RECURSIVE);",
          "38:     if (pthread_mutex_init(lock, &attr) != 0) {",
          "39:         pthread_mutexattr_destroy(&attr);",
          "40:         OPENSSL_free(lock);",
          "41:         return NULL;",
          "42:     }",
          "44:     pthread_mutexattr_destroy(&attr);",
          "47:     return lock;",
          "48: }",
          "50: int CRYPTO_THREAD_read_lock(CRYPTO_RWLOCK *lock)",
          "51: {",
          "53:     if (pthread_rwlock_rdlock(lock) != 0)",
          "54:         return 0;",
          "56:     if (pthread_mutex_lock(lock) != 0)",
          "57:         return 0;",
          "60:     return 1;",
          "61: }",
          "63: int CRYPTO_THREAD_write_lock(CRYPTO_RWLOCK *lock)",
          "64: {",
          "66:     if (pthread_rwlock_wrlock(lock) != 0)",
          "67:         return 0;",
          "69:     if (pthread_mutex_lock(lock) != 0)",
          "70:         return 0;",
          "73:     return 1;",
          "74: }",
          "76: int CRYPTO_THREAD_unlock(CRYPTO_RWLOCK *lock)",
          "77: {",
          "79:     if (pthread_rwlock_unlock(lock) != 0)",
          "80:         return 0;",
          "82:     if (pthread_mutex_unlock(lock) != 0)",
          "83:         return 0;",
          "86:     return 1;",
          "87: }",
          "",
          "[Removed Lines]",
          "29: #else",
          "34:     pthread_mutexattr_t attr;",
          "45: #endif",
          "52: #ifdef OPENSSL_THREADS_HAVE_PTHREAD_RWLOCK",
          "55: #else",
          "58: #endif",
          "65: #ifdef OPENSSL_THREADS_HAVE_PTHREAD_RWLOCK",
          "68: #else",
          "71: #endif",
          "78: #ifdef OPENSSL_THREADS_HAVE_PTHREAD_RWLOCK",
          "81: #else",
          "84: #endif",
          "",
          "[Added Lines]",
          "29: # else",
          "30:     pthread_mutexattr_t attr;",
          "46: # endif",
          "53: # ifdef USE_RWLOCK",
          "56: # else",
          "59: # endif",
          "66: # ifdef USE_RWLOCK",
          "69: # else",
          "72: # endif",
          "79: # ifdef USE_RWLOCK",
          "82: # else",
          "85: # endif",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "91:     if (lock == NULL)",
          "92:         return;",
          "95:     pthread_rwlock_destroy(lock);",
          "97:     pthread_mutex_destroy(lock);",
          "99:     OPENSSL_free(lock);",
          "101:     return;",
          "",
          "[Removed Lines]",
          "94: #ifdef OPENSSL_THREADS_HAVE_PTHREAD_RWLOCK",
          "96: #else",
          "98: #endif",
          "",
          "[Added Lines]",
          "95: # ifdef USE_RWLOCK",
          "97: # else",
          "99: # endif",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6af62ee9af06d057f03ec2abc8b9dfd4ac11b16f",
      "candidate_info": {
        "commit_hash": "6af62ee9af06d057f03ec2abc8b9dfd4ac11b16f",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/6af62ee9af06d057f03ec2abc8b9dfd4ac11b16f",
        "files": [
          "crypto/evp/e_aes.c"
        ],
        "message": "Properly handle a partial block in OCB mode\n\nIf we have previously been passed a partial block in an \"Update\" call then\nmake sure we properly increment the output buffer when we use it.\n\nFixes #2273\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2275)\n(cherry picked from commit 7c12c7b61c5b37c9dff930ccc68421fb7de00271)",
        "before_after_code_files": [
          "crypto/evp/e_aes.c||crypto/evp/e_aes.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/evp/e_aes.c||crypto/evp/e_aes.c": [
          "File: crypto/evp/e_aes.c -> crypto/evp/e_aes.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2587:             }",
          "2588:             written_len = AES_BLOCK_SIZE;",
          "2590:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2590:             if (out != NULL)",
          "2591:                 out += AES_BLOCK_SIZE;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e15c45fb22eca69d0faffb91d4c501e11837d376",
      "candidate_info": {
        "commit_hash": "e15c45fb22eca69d0faffb91d4c501e11837d376",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/e15c45fb22eca69d0faffb91d4c501e11837d376",
        "files": [
          "engines/afalg/e_afalg.c"
        ],
        "message": "Fix a missing function prototype in AFALG engine\n\nReviewed-by: Richard Levitte <levitte@openssl.org>\n(cherry picked from commit a1fd1fb241069cc987d0d2cf13880bd16cada3c9)",
        "before_after_code_files": [
          "engines/afalg/e_afalg.c||engines/afalg/e_afalg.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "engines/afalg/e_afalg.c||engines/afalg/e_afalg.c": [
          "File: engines/afalg/e_afalg.c -> engines/afalg/e_afalg.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "28:     !defined(AF_ALG)",
          "29: # warning \"AFALG ENGINE requires Kernel Headers >= 4.1.0\"",
          "30: # warning \"Skipping Compilation of AFALG engine\"",
          "31: void engine_load_afalg_int(void)",
          "32: {",
          "33: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "31: void engine_load_afalg_int(void);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "38a041a092fe50c5a9c76ea4f21be89ed086a8de",
      "candidate_info": {
        "commit_hash": "38a041a092fe50c5a9c76ea4f21be89ed086a8de",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/38a041a092fe50c5a9c76ea4f21be89ed086a8de",
        "files": [
          "test/evp_test.c"
        ],
        "message": "Adjust in and in_len instead of donelen\n\nDon't use the temp variable donelen in the non-aad fragmented code path.\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2275)\n(cherry picked from commit ef055ec536a3c6e698dd9f45b41d57a32366b4fa)",
        "before_after_code_files": [
          "test/evp_test.c||test/evp_test.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/evp_test.c||test/evp_test.c": [
          "File: test/evp_test.c -> test/evp_test.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1012:     EVP_CIPHER_CTX_set_padding(ctx, 0);",
          "1013:     err = \"CIPHERUPDATE_ERROR\";",
          "1014:     tmplen = 0;",
          "1016:     if (!frag) {",
          "1018:         if (!EVP_CipherUpdate(ctx, tmp + out_misalign, &tmplen, in, in_len))",
          "",
          "[Removed Lines]",
          "1015:     donelen = 0;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1023:             if (!EVP_CipherUpdate(ctx, tmp + out_misalign, &chunklen, in, 1))",
          "1024:                 goto err;",
          "1025:             tmplen += chunklen;",
          "1027:         }",
          "1029:             if (!EVP_CipherUpdate(ctx, tmp + out_misalign + tmplen, &chunklen,",
          "1031:                 goto err;",
          "1032:             tmplen += chunklen;",
          "1034:         }",
          "1036:             if (!EVP_CipherUpdate(ctx, tmp + out_misalign + tmplen, &chunklen,",
          "1038:                 goto err;",
          "1039:             tmplen += chunklen;",
          "1040:         }",
          "",
          "[Removed Lines]",
          "1026:             donelen = 1;",
          "1028:         if (in_len > 2) {",
          "1030:                                   in + donelen, in_len - 2))",
          "1033:             donelen += in_len - 2;",
          "1035:         if (in_len > 1 ) {",
          "1037:                                   in + donelen, 1))",
          "",
          "[Added Lines]",
          "1025:             in++;",
          "1026:             in_len--;",
          "1028:         if (in_len > 1) {",
          "1030:                                   in, in_len - 1))",
          "1033:             in += in_len - 1;",
          "1034:             in_len = 1;",
          "1036:         if (in_len > 0 ) {",
          "1038:                                   in, 1))",
          "",
          "---------------"
        ]
      }
    }
  ]
}