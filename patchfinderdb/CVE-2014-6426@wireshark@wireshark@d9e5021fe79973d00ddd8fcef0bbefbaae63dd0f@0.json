{
  "cve_id": "CVE-2014-6426",
  "cve_desc": "The dissect_hip_tlv function in epan/dissectors/packet-hip.c in the HIP dissector in Wireshark 1.12.x before 1.12.1 does not properly handle a NULL tree, which allows remote attackers to cause a denial of service (infinite loop) via a crafted packet.",
  "repo": "wireshark/wireshark",
  "patch_hash": "d9e5021fe79973d00ddd8fcef0bbefbaae63dd0f",
  "patch_info": {
    "commit_hash": "d9e5021fe79973d00ddd8fcef0bbefbaae63dd0f",
    "repo": "wireshark/wireshark",
    "commit_url": "https://github.com/wireshark/wireshark/commit/d9e5021fe79973d00ddd8fcef0bbefbaae63dd0f",
    "files": [
      "epan/dissectors/packet-hip.c"
    ],
    "message": "hip: fix infinite loop in dissect_hip_tlv\n\nWe can't use tree_item == NULL to determine which branch of the previous if was\nhit, since proto_tree_add_item can return NULL when run without tree, which was\nleading to an infinite loop since we were never advancing the offset. Use the\nactual locator_type instead.\n\nIntroduced by either g3635d7bed70 or gebff85fdbb although neither of them\ndirectly touch this code path. I'm guess that g3635d7bed70 removed an if (tree)\nguard in some calling function which would have prevented this, but I haven't\nchecked. The bug would still have been there before, it just wouldn't have been\nhit because it's only present with a NULL tree. Somebody more familiar with the\nprotocol should probably go over a capture or two and make sure this isn't a\nsymptom of some other decoding gone awry in the recent changes.\n\nChange-Id: Ie1ce89b16ef667b437c0d99c25e3f3cb2504347d\nReviewed-on: https://code.wireshark.org/review/3564\nReviewed-by: Evan Huus <eapache@gmail.com>",
    "before_after_code_files": [
      "epan/dissectors/packet-hip.c||epan/dissectors/packet-hip.c"
    ]
  },
  "patch_diff": {
    "epan/dissectors/packet-hip.c||epan/dissectors/packet-hip.c": [
      "File: epan/dissectors/packet-hip.c -> epan/dissectors/packet-hip.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "662:                                 newoffset += (1 + tvb_get_guint8(tvb, newoffset + 2));",
      "663:                                 tlv_len -= (1 + tvb_get_guint8(tvb, newoffset + 2));",
      "664:                         }",
      "666:                                 ti_loc = proto_item_add_subtree(ti_loc, ett_hip_locator_data);",
      "668:                                 proto_tree_add_item(ti_loc, hf_hip_tlv_locator_traffic_type, tvb,",
      "",
      "[Removed Lines]",
      "665:                         if (ti_loc) {",
      "",
      "[Added Lines]",
      "665:                         if (locator_type <= 2) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "9069d7b74aee0ea950a833ac2c41ee955b0e85a4",
      "candidate_info": {
        "commit_hash": "9069d7b74aee0ea950a833ac2c41ee955b0e85a4",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/9069d7b74aee0ea950a833ac2c41ee955b0e85a4",
        "files": [
          "epan/dissectors/packet-hip.c"
        ],
        "message": "hip: fix infinite loop in dissect_hip_tlv\n\nWe can't use tree_item == NULL to determine which branch of the previous if was\nhit, since proto_tree_add_item can return NULL when run without tree, which was\nleading to an infinite loop since we were never advancing the offset. Use the\nactual locator_type instead.\n\nIntroduced by either g3635d7bed70 or gebff85fdbb although neither of them\ndirectly touch this code path. I'm guess that g3635d7bed70 removed an if (tree)\nguard in some calling function which would have prevented this, but I haven't\nchecked. The bug would still have been there before, it just wouldn't have been\nhit because it's only present with a NULL tree. Somebody more familiar with the\nprotocol should probably go over a capture or two and make sure this isn't a\nsymptom of some other decoding gone awry in the recent changes.\n\nChange-Id: Ie1ce89b16ef667b437c0d99c25e3f3cb2504347d\nReviewed-on: https://code.wireshark.org/review/3564\nReviewed-by: Evan Huus <eapache@gmail.com>\n(cherry picked from commit d9e5021fe79973d00ddd8fcef0bbefbaae63dd0f)\nReviewed-on: https://code.wireshark.org/review/3567",
        "before_after_code_files": [
          "epan/dissectors/packet-hip.c||epan/dissectors/packet-hip.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-hip.c||epan/dissectors/packet-hip.c"
          ],
          "candidate": [
            "epan/dissectors/packet-hip.c||epan/dissectors/packet-hip.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-hip.c||epan/dissectors/packet-hip.c": [
          "File: epan/dissectors/packet-hip.c -> epan/dissectors/packet-hip.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "661:                                 newoffset += (1 + tvb_get_guint8(tvb, newoffset + 2));",
          "662:                                 tlv_len -= (1 + tvb_get_guint8(tvb, newoffset + 2));",
          "663:                         }",
          "665:                                 ti_loc = proto_item_add_subtree(ti_loc, ett_hip_locator_data);",
          "667:                                 proto_tree_add_item(ti_loc, hf_hip_tlv_locator_traffic_type, tvb,",
          "",
          "[Removed Lines]",
          "664:                         if (ti_loc) {",
          "",
          "[Added Lines]",
          "664:                         if (locator_type <= 2) {",
          "",
          "---------------"
        ]
      }
    }
  ]
}