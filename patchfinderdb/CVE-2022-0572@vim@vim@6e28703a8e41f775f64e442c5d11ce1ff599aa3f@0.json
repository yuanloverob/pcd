{
  "cve_id": "CVE-2022-0572",
  "cve_desc": "Heap-based Buffer Overflow in GitHub repository vim/vim prior to 8.2.",
  "repo": "vim/vim",
  "patch_hash": "6e28703a8e41f775f64e442c5d11ce1ff599aa3f",
  "patch_info": {
    "commit_hash": "6e28703a8e41f775f64e442c5d11ce1ff599aa3f",
    "repo": "vim/vim",
    "commit_url": "https://github.com/vim/vim/commit/6e28703a8e41f775f64e442c5d11ce1ff599aa3f",
    "files": [
      "src/indent.c",
      "src/testdir/test_retab.vim",
      "src/version.c"
    ],
    "message": "patch 8.2.4359: crash when repeatedly using :retab\n\nProblem:    crash when repeatedly using :retab.\nSolution:   Bail out when the line is getting too long.",
    "before_after_code_files": [
      "src/indent.c||src/indent.c",
      "src/testdir/test_retab.vim||src/testdir/test_retab.vim",
      "src/version.c||src/version.c"
    ]
  },
  "patch_diff": {
    "src/indent.c||src/indent.c": [
      "File: src/indent.c -> src/indent.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1750:      if (ptr[col] == NUL)",
      "1751:   break;",
      "1752:      vcol += chartabsize(ptr + col, (colnr_T)vcol);",
      "1753:      if (has_mbyte)",
      "1754:   col += (*mb_ptr2len)(ptr + col);",
      "1755:      else",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1753:      if (vcol >= MAXCOL)",
      "1754:      {",
      "1755:   emsg(_(e_resulting_text_too_long));",
      "1756:   break;",
      "1757:      }",
      "",
      "---------------"
    ],
    "src/testdir/test_retab.vim||src/testdir/test_retab.vim": [
      "File: src/testdir/test_retab.vim -> src/testdir/test_retab.vim",
      "--- Hunk 1 ---",
      "[Context before]",
      "70:   call assert_equal(\"    a       b        c    \",         Retab('!', 3))",
      "71:   call assert_equal(\"    a       b        c    \",         Retab('',  5))",
      "72:   call assert_equal(\"    a       b        c    \",         Retab('!', 5))",
      "73: endfunc",
      "75: func Test_retab_error()",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "74:   set tabstop& expandtab&",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "80:   call assert_fails('ret 80000000000000000000', 'E475:')",
      "81: endfunc",
      "83: \" vim: shiftwidth=2 sts=2 expandtab",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "85: func Test_retab_endless()",
      "86:   new",
      "87:   call setline(1, \"\\t0\\t\")",
      "88:   let caught = 'no'",
      "89:   try",
      "90:     while 1",
      "91:       set ts=4000",
      "92:       retab 4",
      "93:     endwhile",
      "94:   catch /E1240/",
      "95:     let caught = 'yes'",
      "96:   endtry",
      "97:   bwipe!",
      "98:   set tabstop&",
      "99: endfunc",
      "",
      "---------------"
    ],
    "src/version.c||src/version.c": [
      "File: src/version.c -> src/version.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "751: static int included_patches[] =",
      "754:     4358,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "754:     4359,",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "93974239857318fe604e53abd41ffead04b7c657",
      "candidate_info": {
        "commit_hash": "93974239857318fe604e53abd41ffead04b7c657",
        "repo": "vim/vim",
        "commit_url": "https://github.com/vim/vim/commit/93974239857318fe604e53abd41ffead04b7c657",
        "files": [
          "src/testdir/test_retab.vim",
          "src/version.c"
        ],
        "message": "patch 8.2.5082: retab test fails\n\nProblem:    Retab test fails.\nSolution:   Disable the test for now.",
        "before_after_code_files": [
          "src/testdir/test_retab.vim||src/testdir/test_retab.vim",
          "src/version.c||src/version.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/testdir/test_retab.vim||src/testdir/test_retab.vim",
            "src/version.c||src/version.c"
          ],
          "candidate": [
            "src/testdir/test_retab.vim||src/testdir/test_retab.vim",
            "src/version.c||src/version.c"
          ]
        }
      },
      "candidate_diff": {
        "src/testdir/test_retab.vim||src/testdir/test_retab.vim": [
          "File: src/testdir/test_retab.vim -> src/testdir/test_retab.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "82:   call assert_fails('ret 80000000000000000000', 'E475:')",
          "83: endfunc",
          "86:   new",
          "87:   call setline(1, \"\\t0\\t\")",
          "88:   let caught = 'no'",
          "",
          "[Removed Lines]",
          "85: func Test_retab_endless()",
          "",
          "[Added Lines]",
          "85: \" FIXME: the try/catch does not catch the interrupt",
          "86: func FIXME_Test_retab_endless()",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "91:       set ts=4000",
          "92:       retab 4",
          "93:     endwhile",
          "96:   endtry",
          "97:   bwipe!",
          "98:   set tabstop&",
          "99: endfunc",
          "",
          "[Removed Lines]",
          "94:   catch /E1240/",
          "95:     let caught = 'yes'",
          "",
          "[Added Lines]",
          "95:   catch",
          "96:     let caught = v:exception",
          "98:   call assert_notequal('no', caught)",
          "",
          "---------------"
        ],
        "src/version.c||src/version.c": [
          "File: src/version.c -> src/version.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "735: static int included_patches[] =",
          "738:     5081,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "738:     5082,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "34f99584c73f91bcc8ca5236557a2a09335e1e43",
      "candidate_info": {
        "commit_hash": "34f99584c73f91bcc8ca5236557a2a09335e1e43",
        "repo": "vim/vim",
        "commit_url": "https://github.com/vim/vim/commit/34f99584c73f91bcc8ca5236557a2a09335e1e43",
        "files": [
          "src/indent.c",
          "src/testdir/test_retab.vim",
          "src/version.c"
        ],
        "message": "patch 8.2.5103: build fails with small features\n\nProblem:    Build fails with small features.\nSolution:   Add #ifdef.  Skip test on MS-Windows.",
        "before_after_code_files": [
          "src/indent.c||src/indent.c",
          "src/testdir/test_retab.vim||src/testdir/test_retab.vim",
          "src/version.c||src/version.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/indent.c||src/indent.c",
            "src/testdir/test_retab.vim||src/testdir/test_retab.vim",
            "src/version.c||src/version.c"
          ],
          "candidate": [
            "src/indent.c||src/indent.c",
            "src/testdir/test_retab.vim||src/testdir/test_retab.vim",
            "src/version.c||src/version.c"
          ]
        }
      },
      "candidate_diff": {
        "src/indent.c||src/indent.c": [
          "File: src/indent.c -> src/indent.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1783:   emsg(_(e_resulting_text_too_long));",
          "1786:   if (trylevel == 0)",
          "1787:       got_int = TRUE;",
          "1788:   break;",
          "1789:      }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1786: #ifdef FEAT_EVAL",
          "1788: #endif",
          "",
          "---------------"
        ],
        "src/testdir/test_retab.vim||src/testdir/test_retab.vim": [
          "File: src/testdir/test_retab.vim -> src/testdir/test_retab.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "105: endfunc",
          "107: func Test_nocatch_retab_endless()",
          "108:   \" not inside try/catch an interrupt is generated to get out of loops",
          "109:   new",
          "110:   call setline(1, \"\\t0\\t\")",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "108:   \" FIXME: why does this hang on MS-Windows?",
          "109:   CheckNotMSWindows",
          "",
          "---------------"
        ],
        "src/version.c||src/version.c": [
          "File: src/version.c -> src/version.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "735: static int included_patches[] =",
          "738:     5102,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "738:     5103,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "308660bd263367a4f1a75498cbd2e29cade47f4d",
      "candidate_info": {
        "commit_hash": "308660bd263367a4f1a75498cbd2e29cade47f4d",
        "repo": "vim/vim",
        "commit_url": "https://github.com/vim/vim/commit/308660bd263367a4f1a75498cbd2e29cade47f4d",
        "files": [
          "src/indent.c",
          "src/testdir/test_retab.vim",
          "src/version.c"
        ],
        "message": "patch 8.2.5108: retab test disabled because it hangs on MS-Windows\n\nProblem:    Retab test disabled because it hangs on MS-Windows.\nSolution:   Also set got_int at the other place a overlong text is detected.",
        "before_after_code_files": [
          "src/indent.c||src/indent.c",
          "src/testdir/test_retab.vim||src/testdir/test_retab.vim",
          "src/version.c||src/version.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/indent.c||src/indent.c",
            "src/testdir/test_retab.vim||src/testdir/test_retab.vim",
            "src/version.c||src/version.c"
          ],
          "candidate": [
            "src/indent.c||src/indent.c",
            "src/testdir/test_retab.vim||src/testdir/test_retab.vim",
            "src/version.c||src/version.c"
          ]
        }
      },
      "candidate_diff": {
        "src/indent.c||src/indent.c": [
          "File: src/indent.c -> src/indent.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1612:     return TRUE;",
          "1613: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1618:     static void",
          "1619: emsg_text_too_long(void)",
          "1620: {",
          "1621:     emsg(_(e_resulting_text_too_long));",
          "1622: #ifdef FEAT_EVAL",
          "1624:     if (trylevel == 0)",
          "1625: #endif",
          "1626:  got_int = TRUE;",
          "1627: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1749:    new_len = old_len - col + start_col + len + 1;",
          "1750:    if (new_len <= 0 || new_len >= MAXCOL)",
          "1751:    {",
          "1753:        break;",
          "1754:    }",
          "1755:    new_line = alloc(new_len);",
          "",
          "[Removed Lines]",
          "1752:        emsg(_(e_resulting_text_too_long));",
          "",
          "[Added Lines]",
          "1766:        emsg_text_too_long();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1780:      vcol += chartabsize(ptr + col, (colnr_T)vcol);",
          "1781:      if (vcol >= MAXCOL)",
          "1782:      {",
          "1790:   break;",
          "1791:      }",
          "1792:      if (has_mbyte)",
          "",
          "[Removed Lines]",
          "1783:   emsg(_(e_resulting_text_too_long));",
          "1786: #ifdef FEAT_EVAL",
          "1787:   if (trylevel == 0)",
          "1788: #endif",
          "1789:       got_int = TRUE;",
          "",
          "[Added Lines]",
          "1797:   emsg_text_too_long();",
          "",
          "---------------"
        ],
        "src/testdir/test_retab.vim||src/testdir/test_retab.vim": [
          "File: src/testdir/test_retab.vim -> src/testdir/test_retab.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "92: endfunc",
          "94: func Test_retab_endless()",
          "96:   call setline(1, \"\\t0\\t\")",
          "97:   let caught = 'no'",
          "98:   try",
          "",
          "[Removed Lines]",
          "95:   \" inside try/catch we catch the error message",
          "",
          "[Added Lines]",
          "95:   \" inside try/catch we can catch the error message",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "106: endfunc",
          "108: func Test_nocatch_retab_endless()",
          "116:   call setline(1, \"\\t0\\t\")",
          "117:   call assert_fails('call RetabLoop()', ['E1240:', 'Interrupted'])",
          "",
          "[Removed Lines]",
          "109:   \" FIXME: why does this hang on MS-Windows?  Is got_int reset somewhere?",
          "110:   if has('win32')",
          "111:     let g:skipped_reason = \"does not work on MS-Windows\"",
          "112:     return",
          "113:   endif",
          "115:   \" not inside try/catch an interrupt is generated to get out of loops",
          "",
          "[Added Lines]",
          "109:   \" when not inside try/catch an interrupt is generated to get out of loops",
          "",
          "---------------"
        ],
        "src/version.c||src/version.c": [
          "File: src/version.c -> src/version.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "735: static int included_patches[] =",
          "738:     5107,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "738:     5108,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8bea171f154845046239c61bdef50a8e0f12f643",
      "candidate_info": {
        "commit_hash": "8bea171f154845046239c61bdef50a8e0f12f643",
        "repo": "vim/vim",
        "commit_url": "https://github.com/vim/vim/commit/8bea171f154845046239c61bdef50a8e0f12f643",
        "files": [
          "src/indent.c",
          "src/testdir/runtest.vim",
          "src/testdir/test_retab.vim",
          "src/testing.c",
          "src/version.c"
        ],
        "message": "patch 8.2.5102: interrupt not caught in test\n\nProblem:    Interrupt not caught in test.\nSolution:   Consider an exception thrown in the current try/catch when got_int\n            is set.  Also catch early exit when not using try/catch.",
        "before_after_code_files": [
          "src/indent.c||src/indent.c",
          "src/testdir/runtest.vim||src/testdir/runtest.vim",
          "src/testdir/test_retab.vim||src/testdir/test_retab.vim",
          "src/testing.c||src/testing.c",
          "src/version.c||src/version.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/indent.c||src/indent.c",
            "src/testdir/test_retab.vim||src/testdir/test_retab.vim",
            "src/version.c||src/version.c"
          ],
          "candidate": [
            "src/indent.c||src/indent.c",
            "src/testdir/test_retab.vim||src/testdir/test_retab.vim",
            "src/version.c||src/version.c"
          ]
        }
      },
      "candidate_diff": {
        "src/indent.c||src/indent.c": [
          "File: src/indent.c -> src/indent.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1781:      if (vcol >= MAXCOL)",
          "1782:      {",
          "1783:   emsg(_(e_resulting_text_too_long));",
          "1786:   break;",
          "1787:      }",
          "1788:      if (has_mbyte)",
          "",
          "[Removed Lines]",
          "1785:   got_int = TRUE;",
          "",
          "[Added Lines]",
          "1786:   if (trylevel == 0)",
          "1787:       got_int = TRUE;",
          "",
          "---------------"
        ],
        "src/testdir/runtest.vim||src/testdir/runtest.vim": [
          "File: src/testdir/runtest.vim -> src/testdir/runtest.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "201:     endtry",
          "202:   endif",
          "204:   if a:test =~ 'Test_nocatch_'",
          "205:     \" Function handles errors itself.  This avoids skipping commands after the",
          "206:     \" error.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "204:   au VimLeavePre * call EarlyExit(g:testfunc)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "212:     endif",
          "213:   else",
          "214:     try",
          "216:       exe 'call ' . a:test",
          "218:     catch /^\\cskipped/",
          "219:       call add(s:messages, '    Skipped')",
          "220:       call add(s:skipped, 'SKIPPED ' . a:test . ': ' . substitute(v:exception, '^\\S*\\s\\+', '',  ''))",
          "",
          "[Removed Lines]",
          "215:       au VimLeavePre * call EarlyExit(g:testfunc)",
          "217:       au! VimLeavePre",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "222:       call add(v:errors, 'Caught exception in ' . a:test . ': ' . v:exception . ' @ ' . v:throwpoint)",
          "223:     endtry",
          "224:   endif",
          "226:   \" In case 'insertmode' was set and something went wrong, make sure it is",
          "227:   \" reset to avoid trouble with anything else.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "224:   au! VimLeavePre",
          "",
          "---------------"
        ],
        "src/testdir/test_retab.vim||src/testdir/test_retab.vim": [
          "File: src/testdir/test_retab.vim -> src/testdir/test_retab.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "82:   call assert_fails('ret 80000000000000000000', 'E475:')",
          "83: endfunc",
          "87:   new",
          "88:   call setline(1, \"\\t0\\t\")",
          "89:   let caught = 'no'",
          "90:   try",
          "96:     let caught = v:exception",
          "97:   endtry",
          "99:   bwipe!",
          "100:   set tabstop&",
          "101: endfunc",
          "",
          "[Removed Lines]",
          "85: \" FIXME: the try/catch does not catch the interrupt",
          "86: func FIXME_Test_retab_endless()",
          "91:     while 1",
          "92:       set ts=4000",
          "93:       retab 4",
          "94:     endwhile",
          "95:   catch",
          "98:   call assert_notequal('no', caught)",
          "",
          "[Added Lines]",
          "85: func RetabLoop()",
          "86:   while 1",
          "87:     set ts=4000",
          "88:     retab 4",
          "89:   endwhile",
          "90: endfunc",
          "92: func Test_retab_endless()",
          "93:   \" inside try/catch we catch the error message",
          "98:     call RetabLoop()",
          "99:   catch /E1240:/",
          "102:   call assert_match('E1240:', caught)",
          "103:   bwipe!",
          "104:   set tabstop&",
          "105: endfunc",
          "107: func Test_nocatch_retab_endless()",
          "108:   \" not inside try/catch an interrupt is generated to get out of loops",
          "109:   new",
          "110:   call setline(1, \"\\t0\\t\")",
          "111:   call assert_fails('call RetabLoop()', ['E1240:', 'Interrupted'])",
          "",
          "---------------"
        ],
        "src/testing.c||src/testing.c": [
          "File: src/testing.c -> src/testing.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "742:     suppress_errthrow = FALSE;",
          "743:     in_assert_fails = FALSE;",
          "744:     did_emsg = FALSE;",
          "745:     msg_col = 0;",
          "746:     need_wait_return = FALSE;",
          "747:     emsg_on_display = FALSE;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "745:     got_int = FALSE;",
          "",
          "---------------"
        ],
        "src/version.c||src/version.c": [
          "File: src/version.c -> src/version.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "735: static int included_patches[] =",
          "738:     5101,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "738:     5102,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a7ac4c9c395d64059437e37045fa0ad5f9fecb0b",
      "candidate_info": {
        "commit_hash": "a7ac4c9c395d64059437e37045fa0ad5f9fecb0b",
        "repo": "vim/vim",
        "commit_url": "https://github.com/vim/vim/commit/a7ac4c9c395d64059437e37045fa0ad5f9fecb0b",
        "files": [
          "src/indent.c",
          "src/version.c"
        ],
        "message": "patch 8.2.5080: when indenting gets out of hand it is hard to stop\n\nProblem:    When indenting gets out of hand it is hard to stop.\nSolution:   When line gets too long set got_int.",
        "before_after_code_files": [
          "src/indent.c||src/indent.c",
          "src/version.c||src/version.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/indent.c||src/indent.c",
            "src/version.c||src/version.c"
          ],
          "candidate": [
            "src/indent.c||src/indent.c",
            "src/version.c||src/version.c"
          ]
        }
      },
      "candidate_diff": {
        "src/indent.c||src/indent.c": [
          "File: src/indent.c -> src/indent.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1781:      if (vcol >= MAXCOL)",
          "1782:      {",
          "1783:   emsg(_(e_resulting_text_too_long));",
          "1784:   break;",
          "1785:      }",
          "1786:      if (has_mbyte)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1785:   got_int = TRUE;",
          "",
          "---------------"
        ],
        "src/version.c||src/version.c": [
          "File: src/version.c -> src/version.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "735: static int included_patches[] =",
          "738:     5079,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "738:     5080,",
          "",
          "---------------"
        ]
      }
    }
  ]
}