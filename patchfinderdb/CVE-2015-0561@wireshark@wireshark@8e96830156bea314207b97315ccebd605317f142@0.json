{
  "cve_id": "CVE-2015-0561",
  "cve_desc": "asn1/lpp/lpp.cnf in the LPP dissector in Wireshark 1.10.x before 1.10.12 and 1.12.x before 1.12.3 does not validate a certain index value, which allows remote attackers to cause a denial of service (out-of-bounds memory access and application crash) via a crafted packet.",
  "repo": "wireshark/wireshark",
  "patch_hash": "8e96830156bea314207b97315ccebd605317f142",
  "patch_info": {
    "commit_hash": "8e96830156bea314207b97315ccebd605317f142",
    "repo": "wireshark/wireshark",
    "commit_url": "https://github.com/wireshark/wireshark/commit/8e96830156bea314207b97315ccebd605317f142",
    "files": [
      "asn1/lpp/lpp.cnf",
      "epan/dissectors/packet-lpp.c"
    ],
    "message": "LPP: avoid doing an out of bound access in case the PER decoding gives an invalid value\n\nBug: 10773\nChange-Id: I4fcde84d7be1e42729b6ec0763064e9885951468\nReviewed-on: https://code.wireshark.org/review/5729\nReviewed-by: Pascal Quantin <pascal.quantin@gmail.com>",
    "before_after_code_files": [
      "asn1/lpp/lpp.cnf||asn1/lpp/lpp.cnf",
      "epan/dissectors/packet-lpp.c||epan/dissectors/packet-lpp.c"
    ]
  },
  "patch_diff": {
    "asn1/lpp/lpp.cnf||asn1/lpp/lpp.cnf": [
      "File: asn1/lpp/lpp.cnf -> asn1/lpp/lpp.cnf",
      "--- Hunk 1 ---",
      "[Context before]",
      "268: %(DEFAULT_BODY)s",
      "270: #.FN_FTR PeriodicalReportingCriteria/reportingInterval",
      "273: #.FN_BODY ReportingDuration VAL_PTR = &duration",
      "274:   guint32 duration;",
      "",
      "[Removed Lines]",
      "271:   proto_item_append_text(actx->created_item, \"%s\", interval[idx]);",
      "",
      "[Added Lines]",
      "271:   if (idx < 10) {",
      "272:     proto_item_append_text(actx->created_item, \"%s\", interval[idx]);",
      "273:   }",
      "",
      "---------------"
    ],
    "epan/dissectors/packet-lpp.c||epan/dissectors/packet-lpp.c": [
      "File: epan/dissectors/packet-lpp.c -> epan/dissectors/packet-lpp.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2902: static int",
      "2903: dissect_lpp_T_sbas_IDs(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
      "2905:   tvbuff_t *sbas_IDs_tvb = NULL;",
      "2906:   int len;",
      "",
      "[Removed Lines]",
      "2904: #line 1325 \"../../asn1/lpp/lpp.cnf\"",
      "",
      "[Added Lines]",
      "2904: #line 1327 \"../../asn1/lpp/lpp.cnf\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "3113: static int",
      "3114: dissect_lpp_T_gnss_ids(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
      "3116:   tvbuff_t *gnss_ids_tvb = NULL;",
      "3117:   int len;",
      "",
      "[Removed Lines]",
      "3115: #line 1299 \"../../asn1/lpp/lpp.cnf\"",
      "",
      "[Added Lines]",
      "3115: #line 1301 \"../../asn1/lpp/lpp.cnf\"",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "3192: static int",
      "3193: dissect_lpp_T_ionoModel(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
      "3195:   tvbuff_t *ionoModel_tvb = NULL;",
      "3196:   int len;",
      "",
      "[Removed Lines]",
      "3194: #line 1178 \"../../asn1/lpp/lpp.cnf\"",
      "",
      "[Added Lines]",
      "3194: #line 1180 \"../../asn1/lpp/lpp.cnf\"",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "3324: static int",
      "3325: dissect_lpp_T_clockModel(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
      "3327:   tvbuff_t *clockModel_tvb = NULL;",
      "3328:   int len;",
      "",
      "[Removed Lines]",
      "3326: #line 1195 \"../../asn1/lpp/lpp.cnf\"",
      "",
      "[Added Lines]",
      "3326: #line 1197 \"../../asn1/lpp/lpp.cnf\"",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "3361: static int",
      "3362: dissect_lpp_T_orbitModel(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
      "3364:   tvbuff_t *orbitModel_tvb = NULL;",
      "3365:   int len;",
      "",
      "[Removed Lines]",
      "3363: #line 1221 \"../../asn1/lpp/lpp.cnf\"",
      "",
      "[Added Lines]",
      "3363: #line 1223 \"../../asn1/lpp/lpp.cnf\"",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "3484: static int",
      "3485: dissect_lpp_T_almanacModel(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
      "3487:   tvbuff_t *almanacModel_tvb = NULL;",
      "3488:   int len;",
      "",
      "[Removed Lines]",
      "3486: #line 1247 \"../../asn1/lpp/lpp.cnf\"",
      "",
      "[Added Lines]",
      "3486: #line 1249 \"../../asn1/lpp/lpp.cnf\"",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "3538: static int",
      "3539: dissect_lpp_T_utc_Model(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
      "3541:   tvbuff_t *utc_Model_tvb = NULL;",
      "3542:   int len;",
      "",
      "[Removed Lines]",
      "3540: #line 1276 \"../../asn1/lpp/lpp.cnf\"",
      "",
      "[Added Lines]",
      "3540: #line 1278 \"../../asn1/lpp/lpp.cnf\"",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "3706: static int",
      "3707: dissect_lpp_T_otdoa_Mode(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
      "3709:   tvbuff_t *otdoa_Mode_tvb = NULL;",
      "3710:   int len;",
      "",
      "[Removed Lines]",
      "3708: #line 343 \"../../asn1/lpp/lpp.cnf\"",
      "",
      "[Added Lines]",
      "3708: #line 345 \"../../asn1/lpp/lpp.cnf\"",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "3855: static int",
      "3856: dissect_lpp_T_ecid_MeasSupported(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
      "3858:   tvbuff_t *ecid_MeasSupported_tvb = NULL;",
      "3859:   int len;",
      "",
      "[Removed Lines]",
      "3857: #line 1377 \"../../asn1/lpp/lpp.cnf\"",
      "",
      "[Added Lines]",
      "3857: #line 1379 \"../../asn1/lpp/lpp.cnf\"",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "4228:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
      "4229:                                                             0U, 4095U, NULL, FALSE);",
      "4232:   proto_item_append_text(actx->created_item, \" (days for glonass, weeks otherwise)\");",
      "",
      "[Removed Lines]",
      "4231: #line 1124 \"../../asn1/lpp/lpp.cnf\"",
      "",
      "[Added Lines]",
      "4231: #line 1126 \"../../asn1/lpp/lpp.cnf\"",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "4242:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
      "4243:                                                             0U, 255U, NULL, FALSE);",
      "4246:   proto_item_append_text(actx->created_item, \" (units of 15 mns for glonass, hours otherwise)\");",
      "",
      "[Removed Lines]",
      "4245: #line 1127 \"../../asn1/lpp/lpp.cnf\"",
      "",
      "[Added Lines]",
      "4245: #line 1129 \"../../asn1/lpp/lpp.cnf\"",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "4256:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
      "4257:                                                             0U, 15U, NULL, FALSE);",
      "4260:   proto_item_append_text(actx->created_item, \" (units of 30 mns for glonass, hours otherwise)\");",
      "",
      "[Removed Lines]",
      "4259: #line 1130 \"../../asn1/lpp/lpp.cnf\"",
      "",
      "[Added Lines]",
      "4259: #line 1132 \"../../asn1/lpp/lpp.cnf\"",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "4452:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
      "4453:                                                             0U, 3599U, NULL, FALSE);",
      "4456:   proto_item_append_text(actx->created_item, \" s\");",
      "",
      "[Removed Lines]",
      "4455: #line 1133 \"../../asn1/lpp/lpp.cnf\"",
      "",
      "[Added Lines]",
      "4455: #line 1135 \"../../asn1/lpp/lpp.cnf\"",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "4466:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
      "4467:                                                             0U, 999U, NULL, FALSE);",
      "4470:   proto_item_append_text(actx->created_item, \" ms\");",
      "",
      "[Removed Lines]",
      "4469: #line 1136 \"../../asn1/lpp/lpp.cnf\"",
      "",
      "[Added Lines]",
      "4469: #line 1138 \"../../asn1/lpp/lpp.cnf\"",
      "",
      "---------------",
      "--- Hunk 15 ---",
      "[Context before]",
      "4829: static int",
      "4830: dissect_lpp_T_notificationOfLeapSecond(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
      "4832:   tvbuff_t *notificationOfLeapSecond_tvb = NULL;",
      "4833:   offset = dissect_per_bit_string(tvb, offset, actx, tree, -1,",
      "4834:                                      2, 2, FALSE, &notificationOfLeapSecond_tvb, NULL);",
      "",
      "[Removed Lines]",
      "4831: #line 363 \"../../asn1/lpp/lpp.cnf\"",
      "",
      "[Added Lines]",
      "4831: #line 365 \"../../asn1/lpp/lpp.cnf\"",
      "",
      "---------------",
      "--- Hunk 16 ---",
      "[Context before]",
      "4840:   if (notificationOfLeapSecond_tvb) {",
      "4841:     actx->created_item = proto_tree_add_uint(tree, hf_index, notificationOfLeapSecond_tvb, 0, 1, tvb_get_bits8(notificationOfLeapSecond_tvb, 0, 2));",
      "4842:   }",
      "",
      "[Removed Lines]",
      "4839: #line 367 \"../../asn1/lpp/lpp.cnf\"",
      "",
      "[Added Lines]",
      "4839: #line 369 \"../../asn1/lpp/lpp.cnf\"",
      "",
      "---------------",
      "--- Hunk 17 ---",
      "[Context before]",
      "5513: static int",
      "5514: dissect_lpp_T_dataID(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
      "5516:   tvbuff_t *dataID_tvb = NULL;",
      "5517:   offset = dissect_per_bit_string(tvb, offset, actx, tree, -1,",
      "5518:                                      2, 2, FALSE, &dataID_tvb, NULL);",
      "",
      "[Removed Lines]",
      "5515: #line 381 \"../../asn1/lpp/lpp.cnf\"",
      "",
      "[Added Lines]",
      "5515: #line 383 \"../../asn1/lpp/lpp.cnf\"",
      "",
      "---------------",
      "--- Hunk 18 ---",
      "[Context before]",
      "5524:   if (dataID_tvb) {",
      "5525:     actx->created_item = proto_tree_add_uint(tree, hf_index, dataID_tvb, 0, 1, tvb_get_bits8(dataID_tvb, 0, 2));",
      "5526:   }",
      "",
      "[Removed Lines]",
      "5523: #line 385 \"../../asn1/lpp/lpp.cnf\"",
      "",
      "[Added Lines]",
      "5523: #line 387 \"../../asn1/lpp/lpp.cnf\"",
      "",
      "---------------",
      "--- Hunk 19 ---",
      "[Context before]",
      "5731:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
      "5732:                                                             -128, 127U, NULL, FALSE);",
      "5735:   proto_item_append_text(actx->created_item, \" s\");",
      "",
      "[Removed Lines]",
      "5734: #line 462 \"../../asn1/lpp/lpp.cnf\"",
      "",
      "[Added Lines]",
      "5734: #line 464 \"../../asn1/lpp/lpp.cnf\"",
      "",
      "---------------",
      "--- Hunk 20 ---",
      "[Context before]",
      "5779:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
      "5780:                                                             0U, 3599U, NULL, FALSE);",
      "5783:   proto_item_append_text(actx->created_item, \" s\");",
      "",
      "[Removed Lines]",
      "5782: #line 465 \"../../asn1/lpp/lpp.cnf\"",
      "",
      "[Added Lines]",
      "5782: #line 467 \"../../asn1/lpp/lpp.cnf\"",
      "",
      "---------------",
      "--- Hunk 21 ---",
      "[Context before]",
      "6334: static int",
      "6335: dissect_lpp_T_cnavMo(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
      "6337:   gint64 cnavMo;",
      "6338:   int curr_offset = offset;",
      "6339:   offset = dissect_per_constrained_integer_64b(tvb, offset, actx, tree, hf_index,",
      "",
      "[Removed Lines]",
      "6336: #line 684 \"../../asn1/lpp/lpp.cnf\"",
      "",
      "[Added Lines]",
      "6336: #line 686 \"../../asn1/lpp/lpp.cnf\"",
      "",
      "---------------",
      "--- Hunk 22 ---",
      "[Context before]",
      "6346:   PROTO_ITEM_SET_HIDDEN(actx->created_item);",
      "6347:   actx->created_item = proto_tree_add_int64_format_value(tree, hf_index, tvb, curr_offset>>3, (offset+7-curr_offset)>>3,",
      "6348:                                                          cnavMo, \"%e semi-circles (%\"G_GINT64_MODIFIER\"d)\",",
      "",
      "[Removed Lines]",
      "6345: #line 689 \"../../asn1/lpp/lpp.cnf\"",
      "",
      "[Added Lines]",
      "6345: #line 691 \"../../asn1/lpp/lpp.cnf\"",
      "",
      "---------------",
      "--- Hunk 23 ---",
      "[Context before]",
      "6357: static int",
      "6358: dissect_lpp_T_cnavE(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
      "6360:   guint64 cnavE;",
      "6361:   int curr_offset = offset;",
      "6362:   offset = dissect_per_constrained_integer_64b(tvb, offset, actx, tree, hf_index,",
      "",
      "[Removed Lines]",
      "6359: #line 698 \"../../asn1/lpp/lpp.cnf\"",
      "",
      "[Added Lines]",
      "6359: #line 700 \"../../asn1/lpp/lpp.cnf\"",
      "",
      "---------------",
      "--- Hunk 24 ---",
      "[Context before]",
      "6369:   PROTO_ITEM_SET_HIDDEN(actx->created_item);",
      "6370:   actx->created_item = proto_tree_add_uint64_format_value(tree, hf_index, tvb, curr_offset>>3, (offset+7-curr_offset)>>3,",
      "6371:                                                           cnavE, \"%e (%\"G_GINT64_MODIFIER\"u)\",",
      "",
      "[Removed Lines]",
      "6368: #line 703 \"../../asn1/lpp/lpp.cnf\"",
      "",
      "[Added Lines]",
      "6368: #line 705 \"../../asn1/lpp/lpp.cnf\"",
      "",
      "---------------",
      "--- Hunk 25 ---",
      "[Context before]",
      "6380: static int",
      "6381: dissect_lpp_T_cnavOmega(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
      "6383:   gint64 cnavOmega;",
      "6384:   int curr_offset = offset;",
      "6385:   offset = dissect_per_constrained_integer_64b(tvb, offset, actx, tree, hf_index,",
      "",
      "[Removed Lines]",
      "6382: #line 712 \"../../asn1/lpp/lpp.cnf\"",
      "",
      "[Added Lines]",
      "6382: #line 714 \"../../asn1/lpp/lpp.cnf\"",
      "",
      "---------------",
      "--- Hunk 26 ---",
      "[Context before]",
      "6392:   PROTO_ITEM_SET_HIDDEN(actx->created_item);",
      "6393:   actx->created_item = proto_tree_add_int64_format_value(tree, hf_index, tvb, curr_offset>>3, (offset+7-curr_offset)>>3,",
      "6394:                                                          cnavOmega, \"%e semi-circles (%\"G_GINT64_MODIFIER\"d)\",",
      "",
      "[Removed Lines]",
      "6391: #line 717 \"../../asn1/lpp/lpp.cnf\"",
      "",
      "[Added Lines]",
      "6391: #line 719 \"../../asn1/lpp/lpp.cnf\"",
      "",
      "---------------",
      "--- Hunk 27 ---",
      "[Context before]",
      "6403: static int",
      "6404: dissect_lpp_T_cnavOMEGA0(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
      "6406:   gint64 cnavOMEGA0;",
      "6407:   int curr_offset = offset;",
      "6408:   offset = dissect_per_constrained_integer_64b(tvb, offset, actx, tree, hf_index,",
      "",
      "[Removed Lines]",
      "6405: #line 726 \"../../asn1/lpp/lpp.cnf\"",
      "",
      "[Added Lines]",
      "6405: #line 728 \"../../asn1/lpp/lpp.cnf\"",
      "",
      "---------------",
      "--- Hunk 28 ---",
      "[Context before]",
      "6415:   PROTO_ITEM_SET_HIDDEN(actx->created_item);",
      "6416:   actx->created_item = proto_tree_add_int64_format_value(tree, hf_index, tvb, curr_offset>>3, (offset+7-curr_offset)>>3,",
      "6417:                                                          cnavOMEGA0, \"%e semi-circles (%\"G_GINT64_MODIFIER\"d)\",",
      "",
      "[Removed Lines]",
      "6414: #line 731 \"../../asn1/lpp/lpp.cnf\"",
      "",
      "[Added Lines]",
      "6414: #line 733 \"../../asn1/lpp/lpp.cnf\"",
      "",
      "---------------",
      "--- Hunk 29 ---",
      "[Context before]",
      "6426: static int",
      "6427: dissect_lpp_T_cnavIo(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
      "6429:   gint64 cnavIo;",
      "6430:   int curr_offset = offset;",
      "6431:   offset = dissect_per_constrained_integer_64b(tvb, offset, actx, tree, hf_index,",
      "",
      "[Removed Lines]",
      "6428: #line 743 \"../../asn1/lpp/lpp.cnf\"",
      "",
      "[Added Lines]",
      "6428: #line 745 \"../../asn1/lpp/lpp.cnf\"",
      "",
      "---------------",
      "--- Hunk 30 ---",
      "[Context before]",
      "6438:   PROTO_ITEM_SET_HIDDEN(actx->created_item);",
      "6439:   actx->created_item = proto_tree_add_int64_format_value(tree, hf_index, tvb, curr_offset>>3, (offset+7-curr_offset)>>3,",
      "6440:                                                          cnavIo, \"%e semi-circles (%\"G_GINT64_MODIFIER\"d)\",",
      "",
      "[Removed Lines]",
      "6437: #line 748 \"../../asn1/lpp/lpp.cnf\"",
      "",
      "[Added Lines]",
      "6437: #line 750 \"../../asn1/lpp/lpp.cnf\"",
      "",
      "---------------",
      "--- Hunk 31 ---",
      "[Context before]",
      "6483:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
      "6484:                                                             0U, 31U, NULL, FALSE);",
      "6487:   proto_item_append_text(actx->created_item, \" days\");",
      "",
      "[Removed Lines]",
      "6486: #line 778 \"../../asn1/lpp/lpp.cnf\"",
      "",
      "[Added Lines]",
      "6486: #line 780 \"../../asn1/lpp/lpp.cnf\"",
      "",
      "---------------",
      "--- Hunk 32 ---",
      "[Context before]",
      "6495: static int",
      "6496: dissect_lpp_T_gloP1(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
      "6498:   tvbuff_t *gloP1_tvb = NULL;",
      "6499:   offset = dissect_per_bit_string(tvb, offset, actx, tree, -1,",
      "6500:                                      2, 2, FALSE, &gloP1_tvb, NULL);",
      "",
      "[Removed Lines]",
      "6497: #line 781 \"../../asn1/lpp/lpp.cnf\"",
      "",
      "[Added Lines]",
      "6497: #line 783 \"../../asn1/lpp/lpp.cnf\"",
      "",
      "---------------",
      "--- Hunk 33 ---",
      "[Context before]",
      "6506:   if (gloP1_tvb) {",
      "6507:     actx->created_item = proto_tree_add_uint(tree, hf_index, gloP1_tvb, 0, 1, tvb_get_bits8(gloP1_tvb, 0, 2));",
      "6508:     proto_item_append_text(actx->created_item, \" mn\");",
      "",
      "[Removed Lines]",
      "6505: #line 785 \"../../asn1/lpp/lpp.cnf\"",
      "",
      "[Added Lines]",
      "6505: #line 787 \"../../asn1/lpp/lpp.cnf\"",
      "",
      "---------------",
      "--- Hunk 34 ---",
      "[Context before]",
      "6707:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
      "6708:                                                             0U, 3599U, NULL, FALSE);",
      "6711:   proto_item_append_text(actx->created_item, \" s\");",
      "",
      "[Removed Lines]",
      "6710: #line 851 \"../../asn1/lpp/lpp.cnf\"",
      "",
      "[Added Lines]",
      "6710: #line 853 \"../../asn1/lpp/lpp.cnf\"",
      "",
      "---------------",
      "--- Hunk 35 ---",
      "[Context before]",
      "6721:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
      "6722:                                                             0U, 999U, NULL, FALSE);",
      "6725:   proto_item_append_text(actx->created_item, \" ms\");",
      "",
      "[Removed Lines]",
      "6724: #line 854 \"../../asn1/lpp/lpp.cnf\"",
      "",
      "[Added Lines]",
      "6724: #line 856 \"../../asn1/lpp/lpp.cnf\"",
      "",
      "---------------",
      "--- Hunk 36 ---",
      "[Context before]",
      "6839:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
      "6840:                                                             0U, 127U, NULL, FALSE);",
      "6843:   proto_item_append_text(actx->created_item, \" ms\");",
      "",
      "[Removed Lines]",
      "6842: #line 872 \"../../asn1/lpp/lpp.cnf\"",
      "",
      "[Added Lines]",
      "6842: #line 874 \"../../asn1/lpp/lpp.cnf\"",
      "",
      "---------------",
      "--- Hunk 37 ---",
      "[Context before]",
      "6910:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
      "6911:                                                             0U, 100U, NULL, FALSE);",
      "6914:   proto_item_append_text(actx->created_item, \" %%\");",
      "",
      "[Removed Lines]",
      "6913: #line 857 \"../../asn1/lpp/lpp.cnf\"",
      "",
      "[Added Lines]",
      "6913: #line 859 \"../../asn1/lpp/lpp.cnf\"",
      "",
      "---------------",
      "--- Hunk 38 ---",
      "[Context before]",
      "7064:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
      "7065:                                                             1U, 1461U, NULL, FALSE);",
      "7068:   proto_item_append_text(actx->created_item, \" days\");",
      "",
      "[Removed Lines]",
      "7067: #line 974 \"../../asn1/lpp/lpp.cnf\"",
      "",
      "[Added Lines]",
      "7067: #line 976 \"../../asn1/lpp/lpp.cnf\"",
      "",
      "---------------",
      "--- Hunk 39 ---",
      "[Context before]",
      "7239:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
      "7240:                                                             0U, 255U, NULL, FALSE);",
      "7243:   proto_item_append_text(actx->created_item, \" weeks\");",
      "",
      "[Removed Lines]",
      "7242: #line 1031 \"../../asn1/lpp/lpp.cnf\"",
      "",
      "[Added Lines]",
      "7242: #line 1033 \"../../asn1/lpp/lpp.cnf\"",
      "",
      "---------------",
      "--- Hunk 40 ---",
      "[Context before]",
      "7253:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
      "7254:                                                             -128, 127U, NULL, FALSE);",
      "7257:   proto_item_append_text(actx->created_item, \" s\");",
      "",
      "[Removed Lines]",
      "7256: #line 1034 \"../../asn1/lpp/lpp.cnf\"",
      "",
      "[Added Lines]",
      "7256: #line 1036 \"../../asn1/lpp/lpp.cnf\"",
      "",
      "---------------",
      "--- Hunk 41 ---",
      "[Context before]",
      "7267:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
      "7268:                                                             0U, 255U, NULL, FALSE);",
      "7271:   proto_item_append_text(actx->created_item, \" weeks\");",
      "",
      "[Removed Lines]",
      "7270: #line 1037 \"../../asn1/lpp/lpp.cnf\"",
      "",
      "[Added Lines]",
      "7270: #line 1039 \"../../asn1/lpp/lpp.cnf\"",
      "",
      "---------------",
      "--- Hunk 42 ---",
      "[Context before]",
      "7281:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
      "7282:                                                             -128, 127U, NULL, FALSE);",
      "7285:   proto_item_append_text(actx->created_item, \" days\");",
      "",
      "[Removed Lines]",
      "7284: #line 1040 \"../../asn1/lpp/lpp.cnf\"",
      "",
      "[Added Lines]",
      "7284: #line 1042 \"../../asn1/lpp/lpp.cnf\"",
      "",
      "---------------",
      "--- Hunk 43 ---",
      "[Context before]",
      "7295:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
      "7296:                                                             -128, 127U, NULL, FALSE);",
      "7299:   proto_item_append_text(actx->created_item, \" s\");",
      "",
      "[Removed Lines]",
      "7298: #line 1043 \"../../asn1/lpp/lpp.cnf\"",
      "",
      "[Added Lines]",
      "7298: #line 1045 \"../../asn1/lpp/lpp.cnf\"",
      "",
      "---------------",
      "--- Hunk 44 ---",
      "[Context before]",
      "7330:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
      "7331:                                                             -128, 127U, NULL, FALSE);",
      "7334:   proto_item_append_text(actx->created_item, \" s\");",
      "",
      "[Removed Lines]",
      "7333: #line 1055 \"../../asn1/lpp/lpp.cnf\"",
      "",
      "[Added Lines]",
      "7333: #line 1057 \"../../asn1/lpp/lpp.cnf\"",
      "",
      "---------------",
      "--- Hunk 45 ---",
      "[Context before]",
      "7344:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
      "7345:                                                             0U, 8191U, NULL, FALSE);",
      "7348:   proto_item_append_text(actx->created_item, \" weeks\");",
      "",
      "[Removed Lines]",
      "7347: #line 1061 \"../../asn1/lpp/lpp.cnf\"",
      "",
      "[Added Lines]",
      "7347: #line 1063 \"../../asn1/lpp/lpp.cnf\"",
      "",
      "---------------",
      "--- Hunk 46 ---",
      "[Context before]",
      "7358:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
      "7359:                                                             0U, 255U, NULL, FALSE);",
      "7362:   proto_item_append_text(actx->created_item, \" weeks\");",
      "",
      "[Removed Lines]",
      "7361: #line 1064 \"../../asn1/lpp/lpp.cnf\"",
      "",
      "[Added Lines]",
      "7361: #line 1066 \"../../asn1/lpp/lpp.cnf\"",
      "",
      "---------------",
      "--- Hunk 47 ---",
      "[Context before]",
      "7372:   offset = dissect_per_bit_string(tvb, offset, actx, tree, hf_index,",
      "7373:                                      4, 4, FALSE, NULL, NULL);",
      "7376:   proto_item_append_text(actx->created_item, \" days\");",
      "",
      "[Removed Lines]",
      "7375: #line 1067 \"../../asn1/lpp/lpp.cnf\"",
      "",
      "[Added Lines]",
      "7375: #line 1069 \"../../asn1/lpp/lpp.cnf\"",
      "",
      "---------------",
      "--- Hunk 48 ---",
      "[Context before]",
      "7386:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
      "7387:                                                             -128, 127U, NULL, FALSE);",
      "7390:   proto_item_append_text(actx->created_item, \" s\");",
      "",
      "[Removed Lines]",
      "7389: #line 1070 \"../../asn1/lpp/lpp.cnf\"",
      "",
      "[Added Lines]",
      "7389: #line 1072 \"../../asn1/lpp/lpp.cnf\"",
      "",
      "---------------",
      "--- Hunk 49 ---",
      "[Context before]",
      "7422:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
      "7423:                                                             1U, 1461U, NULL, FALSE);",
      "7426:   proto_item_append_text(actx->created_item, \" days\");",
      "",
      "[Removed Lines]",
      "7425: #line 1073 \"../../asn1/lpp/lpp.cnf\"",
      "",
      "[Added Lines]",
      "7425: #line 1075 \"../../asn1/lpp/lpp.cnf\"",
      "",
      "---------------",
      "--- Hunk 50 ---",
      "[Context before]",
      "7434: static int",
      "7435: dissect_lpp_T_kp(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
      "7437:   tvbuff_t *kp_tvb = NULL;",
      "7438:   offset = dissect_per_bit_string(tvb, offset, actx, tree, -1,",
      "7439:                                      2, 2, FALSE, &kp_tvb, NULL);",
      "",
      "[Removed Lines]",
      "7436: #line 1085 \"../../asn1/lpp/lpp.cnf\"",
      "",
      "[Added Lines]",
      "7436: #line 1087 \"../../asn1/lpp/lpp.cnf\"",
      "",
      "---------------",
      "--- Hunk 51 ---",
      "[Context before]",
      "7445:   if (kp_tvb) {",
      "7446:     actx->created_item = proto_tree_add_uint(tree, hf_index, kp_tvb, 0, 1, tvb_get_bits8(kp_tvb, 0, 2));",
      "7447:   }",
      "",
      "[Removed Lines]",
      "7444: #line 1089 \"../../asn1/lpp/lpp.cnf\"",
      "",
      "[Added Lines]",
      "7444: #line 1091 \"../../asn1/lpp/lpp.cnf\"",
      "",
      "---------------",
      "--- Hunk 52 ---",
      "[Context before]",
      "7475:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
      "7476:                                                             0U, 255U, NULL, FALSE);",
      "7479:   proto_item_append_text(actx->created_item, \" weeks\");",
      "",
      "[Removed Lines]",
      "7478: #line 1106 \"../../asn1/lpp/lpp.cnf\"",
      "",
      "[Added Lines]",
      "7478: #line 1108 \"../../asn1/lpp/lpp.cnf\"",
      "",
      "---------------",
      "--- Hunk 53 ---",
      "[Context before]",
      "7489:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
      "7490:                                                             -128, 127U, NULL, FALSE);",
      "7493:   proto_item_append_text(actx->created_item, \" s\");",
      "",
      "[Removed Lines]",
      "7492: #line 1109 \"../../asn1/lpp/lpp.cnf\"",
      "",
      "[Added Lines]",
      "7492: #line 1111 \"../../asn1/lpp/lpp.cnf\"",
      "",
      "---------------",
      "--- Hunk 54 ---",
      "[Context before]",
      "7503:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
      "7504:                                                             0U, 255U, NULL, FALSE);",
      "7507:   proto_item_append_text(actx->created_item, \" weeks\");",
      "",
      "[Removed Lines]",
      "7506: #line 1112 \"../../asn1/lpp/lpp.cnf\"",
      "",
      "[Added Lines]",
      "7506: #line 1114 \"../../asn1/lpp/lpp.cnf\"",
      "",
      "---------------",
      "--- Hunk 55 ---",
      "[Context before]",
      "7517:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
      "7518:                                                             -128, 127U, NULL, FALSE);",
      "7521:   proto_item_append_text(actx->created_item, \" days\");",
      "",
      "[Removed Lines]",
      "7520: #line 1115 \"../../asn1/lpp/lpp.cnf\"",
      "",
      "[Added Lines]",
      "7520: #line 1117 \"../../asn1/lpp/lpp.cnf\"",
      "",
      "---------------",
      "--- Hunk 56 ---",
      "[Context before]",
      "7531:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
      "7532:                                                             -128, 127U, NULL, FALSE);",
      "7535:   proto_item_append_text(actx->created_item, \" s\");",
      "",
      "[Removed Lines]",
      "7534: #line 1118 \"../../asn1/lpp/lpp.cnf\"",
      "",
      "[Added Lines]",
      "7534: #line 1120 \"../../asn1/lpp/lpp.cnf\"",
      "",
      "---------------",
      "--- Hunk 57 ---",
      "[Context before]",
      "8304: static int",
      "8305: dissect_lpp_ReportingDuration(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
      "8307:   guint32 duration;",
      "8309:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
      "",
      "[Removed Lines]",
      "8306: #line 274 \"../../asn1/lpp/lpp.cnf\"",
      "",
      "[Added Lines]",
      "8306: #line 276 \"../../asn1/lpp/lpp.cnf\"",
      "",
      "---------------",
      "--- Hunk 58 ---",
      "[Context before]",
      "8388: #line 271 \"../../asn1/lpp/lpp.cnf\"",
      "8392:   return offset;",
      "",
      "[Removed Lines]",
      "8389:   proto_item_append_text(actx->created_item, \"%s\", interval[idx]);",
      "",
      "[Added Lines]",
      "8389:   if (idx < 10) {",
      "8390:     proto_item_append_text(actx->created_item, \"%s\", interval[idx]);",
      "8391:   }",
      "",
      "---------------",
      "--- Hunk 59 ---",
      "[Context before]",
      "8460:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
      "8461:                                                             1U, 128U, NULL, FALSE);",
      "8464:   proto_item_append_text(actx->created_item, \" s\");",
      "",
      "[Removed Lines]",
      "8463: #line 295 \"../../asn1/lpp/lpp.cnf\"",
      "",
      "[Added Lines]",
      "8465: #line 297 \"../../asn1/lpp/lpp.cnf\"",
      "",
      "---------------",
      "--- Hunk 60 ---",
      "[Context before]",
      "8588: static int",
      "8589: dissect_lpp_T_requestedMeasurements(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
      "8591:   tvbuff_t *requestedMeasurements_tvb = NULL;",
      "8592:   int len;",
      "",
      "[Removed Lines]",
      "8590: #line 1357 \"../../asn1/lpp/lpp.cnf\"",
      "",
      "[Added Lines]",
      "8592: #line 1359 \"../../asn1/lpp/lpp.cnf\"",
      "",
      "---------------",
      "--- Hunk 61 ---",
      "[Context before]",
      "9321:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
      "9322:                                                             0U, 3599999U, NULL, FALSE);",
      "9325:   proto_item_append_text(actx->created_item, \" ms\");",
      "",
      "[Removed Lines]",
      "9324: #line 1142 \"../../asn1/lpp/lpp.cnf\"",
      "",
      "[Added Lines]",
      "9326: #line 1144 \"../../asn1/lpp/lpp.cnf\"",
      "",
      "---------------",
      "--- Hunk 62 ---",
      "[Context before]",
      "9452:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
      "9453:                                                             0U, 127U, NULL, FALSE);",
      "9456:   proto_item_append_text(actx->created_item, \" ms\");",
      "",
      "[Removed Lines]",
      "9455: #line 1151 \"../../asn1/lpp/lpp.cnf\"",
      "",
      "[Added Lines]",
      "9457: #line 1153 \"../../asn1/lpp/lpp.cnf\"",
      "",
      "---------------",
      "--- Hunk 63 ---",
      "[Context before]",
      "9526:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
      "9527:                                                             0U, 127U, NULL, FALSE);",
      "9530:   proto_item_append_text(actx->created_item, \" ms\");",
      "",
      "[Removed Lines]",
      "9529: #line 1154 \"../../asn1/lpp/lpp.cnf\"",
      "",
      "[Added Lines]",
      "9531: #line 1156 \"../../asn1/lpp/lpp.cnf\"",
      "",
      "---------------",
      "--- Hunk 64 ---",
      "[Context before]",
      "9540:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
      "9541:                                                             0U, 63U, NULL, FALSE);",
      "9544:   proto_item_append_text(actx->created_item, \" dB-Hz\");",
      "",
      "[Removed Lines]",
      "9543: #line 1157 \"../../asn1/lpp/lpp.cnf\"",
      "",
      "[Added Lines]",
      "9545: #line 1159 \"../../asn1/lpp/lpp.cnf\"",
      "",
      "---------------",
      "--- Hunk 65 ---",
      "[Context before]",
      "9572:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
      "9573:                                                             0U, 127U, NULL, FALSE);",
      "9576:   proto_item_append_text(actx->created_item, \" ms\");",
      "",
      "[Removed Lines]",
      "9575: #line 1166 \"../../asn1/lpp/lpp.cnf\"",
      "",
      "[Added Lines]",
      "9577: #line 1168 \"../../asn1/lpp/lpp.cnf\"",
      "",
      "---------------",
      "--- Hunk 66 ---",
      "[Context before]",
      "9735: static int",
      "9736: dissect_lpp_T_error_Resolution(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
      "9738:   tvbuff_t *error_Resolution_tvb = NULL;",
      "9739:   offset = dissect_per_bit_string(tvb, offset, actx, tree, -1,",
      "9740:                                      2, 2, FALSE, &error_Resolution_tvb, NULL);",
      "",
      "[Removed Lines]",
      "9737: #line 307 \"../../asn1/lpp/lpp.cnf\"",
      "",
      "[Added Lines]",
      "9739: #line 309 \"../../asn1/lpp/lpp.cnf\"",
      "",
      "---------------",
      "--- Hunk 67 ---",
      "[Context before]",
      "9746:   if (error_Resolution_tvb) {",
      "9747:     actx->created_item = proto_tree_add_uint(tree, hf_index, error_Resolution_tvb, 0, 1, tvb_get_bits8(error_Resolution_tvb, 0, 2));",
      "9748:   }",
      "",
      "[Removed Lines]",
      "9745: #line 311 \"../../asn1/lpp/lpp.cnf\"",
      "",
      "[Added Lines]",
      "9747: #line 313 \"../../asn1/lpp/lpp.cnf\"",
      "",
      "---------------",
      "--- Hunk 68 ---",
      "[Context before]",
      "9756: static int",
      "9757: dissect_lpp_T_error_Value(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
      "9759:   tvbuff_t *error_Value_tvb = NULL;",
      "9760:   offset = dissect_per_bit_string(tvb, offset, actx, tree, -1,",
      "9761:                                      5, 5, FALSE, &error_Value_tvb, NULL);",
      "",
      "[Removed Lines]",
      "9758: #line 319 \"../../asn1/lpp/lpp.cnf\"",
      "",
      "[Added Lines]",
      "9760: #line 321 \"../../asn1/lpp/lpp.cnf\"",
      "",
      "---------------",
      "--- Hunk 69 ---",
      "[Context before]",
      "9767:   if (error_Value_tvb) {",
      "9768:     actx->created_item = proto_tree_add_uint(tree, hf_index, error_Value_tvb, 0, 1, tvb_get_bits8(error_Value_tvb, 0, 5));",
      "9769:   }",
      "",
      "[Removed Lines]",
      "9766: #line 323 \"../../asn1/lpp/lpp.cnf\"",
      "",
      "[Added Lines]",
      "9768: #line 325 \"../../asn1/lpp/lpp.cnf\"",
      "",
      "---------------",
      "--- Hunk 70 ---",
      "[Context before]",
      "9777: static int",
      "9778: dissect_lpp_T_error_NumSamples(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
      "9780:   tvbuff_t *error_NumSamples_tvb = NULL;",
      "9781:   offset = dissect_per_bit_string(tvb, offset, actx, tree, -1,",
      "9782:                                      3, 3, FALSE, &error_NumSamples_tvb, NULL);",
      "",
      "[Removed Lines]",
      "9779: #line 331 \"../../asn1/lpp/lpp.cnf\"",
      "",
      "[Added Lines]",
      "9781: #line 333 \"../../asn1/lpp/lpp.cnf\"",
      "",
      "---------------",
      "--- Hunk 71 ---",
      "[Context before]",
      "9788:   if (error_NumSamples_tvb) {",
      "9789:     actx->created_item = proto_tree_add_uint(tree, hf_index, error_NumSamples_tvb, 0, 1, tvb_get_bits8(error_NumSamples_tvb, 0, 3));",
      "9790:   }",
      "",
      "[Removed Lines]",
      "9787: #line 335 \"../../asn1/lpp/lpp.cnf\"",
      "",
      "[Added Lines]",
      "9789: #line 337 \"../../asn1/lpp/lpp.cnf\"",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "edc1a29b9efe9e4298a80550ac71a78abc8f0511",
      "candidate_info": {
        "commit_hash": "edc1a29b9efe9e4298a80550ac71a78abc8f0511",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/edc1a29b9efe9e4298a80550ac71a78abc8f0511",
        "files": [
          "asn1/lpp/lpp.cnf",
          "epan/dissectors/packet-lpp.c"
        ],
        "message": "LPP: avoid doing an out of bound access in case the PER decoding gives an invalid value\n\nBug: 10773\nChange-Id: I4fcde84d7be1e42729b6ec0763064e9885951468\nReviewed-on: https://code.wireshark.org/review/5729\nReviewed-by: Pascal Quantin <pascal.quantin@gmail.com>\n(cherry picked from commit 8e96830156bea314207b97315ccebd605317f142)\nReviewed-on: https://code.wireshark.org/review/5730",
        "before_after_code_files": [
          "asn1/lpp/lpp.cnf||asn1/lpp/lpp.cnf",
          "epan/dissectors/packet-lpp.c||epan/dissectors/packet-lpp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "asn1/lpp/lpp.cnf||asn1/lpp/lpp.cnf",
            "epan/dissectors/packet-lpp.c||epan/dissectors/packet-lpp.c"
          ],
          "candidate": [
            "asn1/lpp/lpp.cnf||asn1/lpp/lpp.cnf",
            "epan/dissectors/packet-lpp.c||epan/dissectors/packet-lpp.c"
          ]
        }
      },
      "candidate_diff": {
        "asn1/lpp/lpp.cnf||asn1/lpp/lpp.cnf": [
          "File: asn1/lpp/lpp.cnf -> asn1/lpp/lpp.cnf",
          "--- Hunk 1 ---",
          "[Context before]",
          "268: %(DEFAULT_BODY)s",
          "270: #.FN_FTR PeriodicalReportingCriteria/reportingInterval",
          "273: #.FN_BODY ReportingDuration VAL_PTR = &duration",
          "274:   guint32 duration;",
          "",
          "[Removed Lines]",
          "271:   proto_item_append_text(actx->created_item, \"%s\", interval[idx]);",
          "",
          "[Added Lines]",
          "271:   if (idx < 10) {",
          "272:     proto_item_append_text(actx->created_item, \"%s\", interval[idx]);",
          "273:   }",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-lpp.c||epan/dissectors/packet-lpp.c": [
          "File: epan/dissectors/packet-lpp.c -> epan/dissectors/packet-lpp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2901: static int",
          "2902: dissect_lpp_T_sbas_IDs(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "2904:   tvbuff_t *sbas_IDs_tvb = NULL;",
          "2905:   int len;",
          "",
          "[Removed Lines]",
          "2903: #line 1325 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "2903: #line 1327 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3112: static int",
          "3113: dissect_lpp_T_gnss_ids(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "3115:   tvbuff_t *gnss_ids_tvb = NULL;",
          "3116:   int len;",
          "",
          "[Removed Lines]",
          "3114: #line 1299 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "3114: #line 1301 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3191: static int",
          "3192: dissect_lpp_T_ionoModel(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "3194:   tvbuff_t *ionoModel_tvb = NULL;",
          "3195:   int len;",
          "",
          "[Removed Lines]",
          "3193: #line 1178 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "3193: #line 1180 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3323: static int",
          "3324: dissect_lpp_T_clockModel(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "3326:   tvbuff_t *clockModel_tvb = NULL;",
          "3327:   int len;",
          "",
          "[Removed Lines]",
          "3325: #line 1195 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "3325: #line 1197 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3360: static int",
          "3361: dissect_lpp_T_orbitModel(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "3363:   tvbuff_t *orbitModel_tvb = NULL;",
          "3364:   int len;",
          "",
          "[Removed Lines]",
          "3362: #line 1221 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "3362: #line 1223 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "3483: static int",
          "3484: dissect_lpp_T_almanacModel(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "3486:   tvbuff_t *almanacModel_tvb = NULL;",
          "3487:   int len;",
          "",
          "[Removed Lines]",
          "3485: #line 1247 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "3485: #line 1249 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "3537: static int",
          "3538: dissect_lpp_T_utc_Model(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "3540:   tvbuff_t *utc_Model_tvb = NULL;",
          "3541:   int len;",
          "",
          "[Removed Lines]",
          "3539: #line 1276 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "3539: #line 1278 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "3705: static int",
          "3706: dissect_lpp_T_otdoa_Mode(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "3708:   tvbuff_t *otdoa_Mode_tvb = NULL;",
          "3709:   int len;",
          "",
          "[Removed Lines]",
          "3707: #line 343 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "3707: #line 345 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "3838: static int",
          "3839: dissect_lpp_T_ecid_MeasSupported(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "3841:   tvbuff_t *ecid_MeasSupported_tvb = NULL;",
          "3842:   int len;",
          "",
          "[Removed Lines]",
          "3840: #line 1377 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "3840: #line 1379 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "4211:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "4212:                                                             0U, 4095U, NULL, FALSE);",
          "4215:   proto_item_append_text(actx->created_item, \" (days for glonass, weeks otherwise)\");",
          "",
          "[Removed Lines]",
          "4214: #line 1124 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "4214: #line 1126 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "4225:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "4226:                                                             0U, 255U, NULL, FALSE);",
          "4229:   proto_item_append_text(actx->created_item, \" (units of 15 mns for glonass, hours otherwise)\");",
          "",
          "[Removed Lines]",
          "4228: #line 1127 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "4228: #line 1129 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "4239:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "4240:                                                             0U, 15U, NULL, FALSE);",
          "4243:   proto_item_append_text(actx->created_item, \" (units of 30 mns for glonass, hours otherwise)\");",
          "",
          "[Removed Lines]",
          "4242: #line 1130 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "4242: #line 1132 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "4435:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "4436:                                                             0U, 3599U, NULL, FALSE);",
          "4439:   proto_item_append_text(actx->created_item, \" s\");",
          "",
          "[Removed Lines]",
          "4438: #line 1133 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "4438: #line 1135 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "4449:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "4450:                                                             0U, 999U, NULL, FALSE);",
          "4453:   proto_item_append_text(actx->created_item, \" ms\");",
          "",
          "[Removed Lines]",
          "4452: #line 1136 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "4452: #line 1138 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "4812: static int",
          "4813: dissect_lpp_T_notificationOfLeapSecond(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "4815:   tvbuff_t *notificationOfLeapSecond_tvb = NULL;",
          "4816:   offset = dissect_per_bit_string(tvb, offset, actx, tree, -1,",
          "4817:                                      2, 2, FALSE, &notificationOfLeapSecond_tvb, NULL);",
          "",
          "[Removed Lines]",
          "4814: #line 363 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "4814: #line 365 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "4823:   if (notificationOfLeapSecond_tvb) {",
          "4824:     actx->created_item = proto_tree_add_uint(tree, hf_index, notificationOfLeapSecond_tvb, 0, 1, tvb_get_bits8(notificationOfLeapSecond_tvb, 0, 2));",
          "4825:   }",
          "",
          "[Removed Lines]",
          "4822: #line 367 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "4822: #line 369 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "5496: static int",
          "5497: dissect_lpp_T_dataID(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "5499:   tvbuff_t *dataID_tvb = NULL;",
          "5500:   offset = dissect_per_bit_string(tvb, offset, actx, tree, -1,",
          "5501:                                      2, 2, FALSE, &dataID_tvb, NULL);",
          "",
          "[Removed Lines]",
          "5498: #line 381 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "5498: #line 383 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "5507:   if (dataID_tvb) {",
          "5508:     actx->created_item = proto_tree_add_uint(tree, hf_index, dataID_tvb, 0, 1, tvb_get_bits8(dataID_tvb, 0, 2));",
          "5509:   }",
          "",
          "[Removed Lines]",
          "5506: #line 385 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "5506: #line 387 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "5714:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "5715:                                                             -128, 127U, NULL, FALSE);",
          "5718:   proto_item_append_text(actx->created_item, \" s\");",
          "",
          "[Removed Lines]",
          "5717: #line 462 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "5717: #line 464 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "5762:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "5763:                                                             0U, 3599U, NULL, FALSE);",
          "5766:   proto_item_append_text(actx->created_item, \" s\");",
          "",
          "[Removed Lines]",
          "5765: #line 465 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "5765: #line 467 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "6317: static int",
          "6318: dissect_lpp_T_cnavMo(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "6320:   gint64 cnavMo;",
          "6321:   int curr_offset = offset;",
          "6322:   offset = dissect_per_constrained_integer_64b(tvb, offset, actx, tree, hf_index,",
          "",
          "[Removed Lines]",
          "6319: #line 684 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "6319: #line 686 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "6329:   PROTO_ITEM_SET_HIDDEN(actx->created_item);",
          "6330:   actx->created_item = proto_tree_add_int64_format_value(tree, hf_index, tvb, curr_offset>>3, (offset+7-curr_offset)>>3,",
          "6331:                                                          cnavMo, \"%e semi-circles (%\"G_GINT64_MODIFIER\"d)\",",
          "",
          "[Removed Lines]",
          "6328: #line 689 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "6328: #line 691 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "6340: static int",
          "6341: dissect_lpp_T_cnavE(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "6343:   guint64 cnavE;",
          "6344:   int curr_offset = offset;",
          "6345:   offset = dissect_per_constrained_integer_64b(tvb, offset, actx, tree, hf_index,",
          "",
          "[Removed Lines]",
          "6342: #line 698 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "6342: #line 700 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "6352:   PROTO_ITEM_SET_HIDDEN(actx->created_item);",
          "6353:   actx->created_item = proto_tree_add_uint64_format_value(tree, hf_index, tvb, curr_offset>>3, (offset+7-curr_offset)>>3,",
          "6354:                                                           cnavE, \"%e (%\"G_GINT64_MODIFIER\"u)\",",
          "",
          "[Removed Lines]",
          "6351: #line 703 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "6351: #line 705 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "6363: static int",
          "6364: dissect_lpp_T_cnavOmega(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "6366:   gint64 cnavOmega;",
          "6367:   int curr_offset = offset;",
          "6368:   offset = dissect_per_constrained_integer_64b(tvb, offset, actx, tree, hf_index,",
          "",
          "[Removed Lines]",
          "6365: #line 712 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "6365: #line 714 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "6375:   PROTO_ITEM_SET_HIDDEN(actx->created_item);",
          "6376:   actx->created_item = proto_tree_add_int64_format_value(tree, hf_index, tvb, curr_offset>>3, (offset+7-curr_offset)>>3,",
          "6377:                                                          cnavOmega, \"%e semi-circles (%\"G_GINT64_MODIFIER\"d)\",",
          "",
          "[Removed Lines]",
          "6374: #line 717 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "6374: #line 719 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "6386: static int",
          "6387: dissect_lpp_T_cnavOMEGA0(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "6389:   gint64 cnavOMEGA0;",
          "6390:   int curr_offset = offset;",
          "6391:   offset = dissect_per_constrained_integer_64b(tvb, offset, actx, tree, hf_index,",
          "",
          "[Removed Lines]",
          "6388: #line 726 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "6388: #line 728 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "6398:   PROTO_ITEM_SET_HIDDEN(actx->created_item);",
          "6399:   actx->created_item = proto_tree_add_int64_format_value(tree, hf_index, tvb, curr_offset>>3, (offset+7-curr_offset)>>3,",
          "6400:                                                          cnavOMEGA0, \"%e semi-circles (%\"G_GINT64_MODIFIER\"d)\",",
          "",
          "[Removed Lines]",
          "6397: #line 731 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "6397: #line 733 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "6409: static int",
          "6410: dissect_lpp_T_cnavIo(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "6412:   gint64 cnavIo;",
          "6413:   int curr_offset = offset;",
          "6414:   offset = dissect_per_constrained_integer_64b(tvb, offset, actx, tree, hf_index,",
          "",
          "[Removed Lines]",
          "6411: #line 743 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "6411: #line 745 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "6421:   PROTO_ITEM_SET_HIDDEN(actx->created_item);",
          "6422:   actx->created_item = proto_tree_add_int64_format_value(tree, hf_index, tvb, curr_offset>>3, (offset+7-curr_offset)>>3,",
          "6423:                                                          cnavIo, \"%e semi-circles (%\"G_GINT64_MODIFIER\"d)\",",
          "",
          "[Removed Lines]",
          "6420: #line 748 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "6420: #line 750 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "6466:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "6467:                                                             0U, 31U, NULL, FALSE);",
          "6470:   proto_item_append_text(actx->created_item, \" days\");",
          "",
          "[Removed Lines]",
          "6469: #line 778 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "6469: #line 780 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "6478: static int",
          "6479: dissect_lpp_T_gloP1(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "6481:   tvbuff_t *gloP1_tvb = NULL;",
          "6482:   offset = dissect_per_bit_string(tvb, offset, actx, tree, -1,",
          "6483:                                      2, 2, FALSE, &gloP1_tvb, NULL);",
          "",
          "[Removed Lines]",
          "6480: #line 781 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "6480: #line 783 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "6489:   if (gloP1_tvb) {",
          "6490:     actx->created_item = proto_tree_add_uint(tree, hf_index, gloP1_tvb, 0, 1, tvb_get_bits8(gloP1_tvb, 0, 2));",
          "6491:     proto_item_append_text(actx->created_item, \" mn\");",
          "",
          "[Removed Lines]",
          "6488: #line 785 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "6488: #line 787 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "6690:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "6691:                                                             0U, 3599U, NULL, FALSE);",
          "6694:   proto_item_append_text(actx->created_item, \" s\");",
          "",
          "[Removed Lines]",
          "6693: #line 851 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "6693: #line 853 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "6704:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "6705:                                                             0U, 999U, NULL, FALSE);",
          "6708:   proto_item_append_text(actx->created_item, \" ms\");",
          "",
          "[Removed Lines]",
          "6707: #line 854 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "6707: #line 856 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "6822:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "6823:                                                             0U, 127U, NULL, FALSE);",
          "6826:   proto_item_append_text(actx->created_item, \" ms\");",
          "",
          "[Removed Lines]",
          "6825: #line 872 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "6825: #line 874 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "6893:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "6894:                                                             0U, 100U, NULL, FALSE);",
          "6897:   proto_item_append_text(actx->created_item, \" %%\");",
          "",
          "[Removed Lines]",
          "6896: #line 857 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "6896: #line 859 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "7047:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "7048:                                                             1U, 1461U, NULL, FALSE);",
          "7051:   proto_item_append_text(actx->created_item, \" days\");",
          "",
          "[Removed Lines]",
          "7050: #line 974 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "7050: #line 976 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "7222:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "7223:                                                             0U, 255U, NULL, FALSE);",
          "7226:   proto_item_append_text(actx->created_item, \" weeks\");",
          "",
          "[Removed Lines]",
          "7225: #line 1031 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "7225: #line 1033 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "7236:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "7237:                                                             -128, 127U, NULL, FALSE);",
          "7240:   proto_item_append_text(actx->created_item, \" s\");",
          "",
          "[Removed Lines]",
          "7239: #line 1034 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "7239: #line 1036 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "7250:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "7251:                                                             0U, 255U, NULL, FALSE);",
          "7254:   proto_item_append_text(actx->created_item, \" weeks\");",
          "",
          "[Removed Lines]",
          "7253: #line 1037 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "7253: #line 1039 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "7264:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "7265:                                                             -128, 127U, NULL, FALSE);",
          "7268:   proto_item_append_text(actx->created_item, \" days\");",
          "",
          "[Removed Lines]",
          "7267: #line 1040 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "7267: #line 1042 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "7278:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "7279:                                                             -128, 127U, NULL, FALSE);",
          "7282:   proto_item_append_text(actx->created_item, \" s\");",
          "",
          "[Removed Lines]",
          "7281: #line 1043 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "7281: #line 1045 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "7313:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "7314:                                                             -128, 127U, NULL, FALSE);",
          "7317:   proto_item_append_text(actx->created_item, \" s\");",
          "",
          "[Removed Lines]",
          "7316: #line 1055 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "7316: #line 1057 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "7327:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "7328:                                                             0U, 8191U, NULL, FALSE);",
          "7331:   proto_item_append_text(actx->created_item, \" weeks\");",
          "",
          "[Removed Lines]",
          "7330: #line 1061 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "7330: #line 1063 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "7341:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "7342:                                                             0U, 255U, NULL, FALSE);",
          "7345:   proto_item_append_text(actx->created_item, \" weeks\");",
          "",
          "[Removed Lines]",
          "7344: #line 1064 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "7344: #line 1066 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "7355:   offset = dissect_per_bit_string(tvb, offset, actx, tree, hf_index,",
          "7356:                                      4, 4, FALSE, NULL, NULL);",
          "7359:   proto_item_append_text(actx->created_item, \" days\");",
          "",
          "[Removed Lines]",
          "7358: #line 1067 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "7358: #line 1069 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "7369:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "7370:                                                             -128, 127U, NULL, FALSE);",
          "7373:   proto_item_append_text(actx->created_item, \" s\");",
          "",
          "[Removed Lines]",
          "7372: #line 1070 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "7372: #line 1072 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 49 ---",
          "[Context before]",
          "7405:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "7406:                                                             1U, 1461U, NULL, FALSE);",
          "7409:   proto_item_append_text(actx->created_item, \" days\");",
          "",
          "[Removed Lines]",
          "7408: #line 1073 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "7408: #line 1075 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 50 ---",
          "[Context before]",
          "7417: static int",
          "7418: dissect_lpp_T_kp(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "7420:   tvbuff_t *kp_tvb = NULL;",
          "7421:   offset = dissect_per_bit_string(tvb, offset, actx, tree, -1,",
          "7422:                                      2, 2, FALSE, &kp_tvb, NULL);",
          "",
          "[Removed Lines]",
          "7419: #line 1085 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "7419: #line 1087 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 51 ---",
          "[Context before]",
          "7428:   if (kp_tvb) {",
          "7429:     actx->created_item = proto_tree_add_uint(tree, hf_index, kp_tvb, 0, 1, tvb_get_bits8(kp_tvb, 0, 2));",
          "7430:   }",
          "",
          "[Removed Lines]",
          "7427: #line 1089 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "7427: #line 1091 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 52 ---",
          "[Context before]",
          "7458:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "7459:                                                             0U, 255U, NULL, FALSE);",
          "7462:   proto_item_append_text(actx->created_item, \" weeks\");",
          "",
          "[Removed Lines]",
          "7461: #line 1106 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "7461: #line 1108 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 53 ---",
          "[Context before]",
          "7472:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "7473:                                                             -128, 127U, NULL, FALSE);",
          "7476:   proto_item_append_text(actx->created_item, \" s\");",
          "",
          "[Removed Lines]",
          "7475: #line 1109 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "7475: #line 1111 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 54 ---",
          "[Context before]",
          "7486:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "7487:                                                             0U, 255U, NULL, FALSE);",
          "7490:   proto_item_append_text(actx->created_item, \" weeks\");",
          "",
          "[Removed Lines]",
          "7489: #line 1112 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "7489: #line 1114 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 55 ---",
          "[Context before]",
          "7500:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "7501:                                                             -128, 127U, NULL, FALSE);",
          "7504:   proto_item_append_text(actx->created_item, \" days\");",
          "",
          "[Removed Lines]",
          "7503: #line 1115 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "7503: #line 1117 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 56 ---",
          "[Context before]",
          "7514:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "7515:                                                             -128, 127U, NULL, FALSE);",
          "7518:   proto_item_append_text(actx->created_item, \" s\");",
          "",
          "[Removed Lines]",
          "7517: #line 1118 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "7517: #line 1120 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 57 ---",
          "[Context before]",
          "8287: static int",
          "8288: dissect_lpp_ReportingDuration(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "8290:   guint32 duration;",
          "8292:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "",
          "[Removed Lines]",
          "8289: #line 274 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "8289: #line 276 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 58 ---",
          "[Context before]",
          "8371: #line 271 \"../../asn1/lpp/lpp.cnf\"",
          "8375:   return offset;",
          "",
          "[Removed Lines]",
          "8372:   proto_item_append_text(actx->created_item, \"%s\", interval[idx]);",
          "",
          "[Added Lines]",
          "8372:   if (idx < 10) {",
          "8373:     proto_item_append_text(actx->created_item, \"%s\", interval[idx]);",
          "8374:   }",
          "",
          "---------------",
          "--- Hunk 59 ---",
          "[Context before]",
          "8443:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "8444:                                                             1U, 128U, NULL, FALSE);",
          "8447:   proto_item_append_text(actx->created_item, \" s\");",
          "",
          "[Removed Lines]",
          "8446: #line 295 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "8448: #line 297 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 60 ---",
          "[Context before]",
          "8571: static int",
          "8572: dissect_lpp_T_requestedMeasurements(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "8574:   tvbuff_t *requestedMeasurements_tvb = NULL;",
          "8575:   int len;",
          "",
          "[Removed Lines]",
          "8573: #line 1357 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "8575: #line 1359 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 61 ---",
          "[Context before]",
          "9304:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "9305:                                                             0U, 3599999U, NULL, FALSE);",
          "9308:   proto_item_append_text(actx->created_item, \" ms\");",
          "",
          "[Removed Lines]",
          "9307: #line 1142 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "9309: #line 1144 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 62 ---",
          "[Context before]",
          "9435:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "9436:                                                             0U, 127U, NULL, FALSE);",
          "9439:   proto_item_append_text(actx->created_item, \" ms\");",
          "",
          "[Removed Lines]",
          "9438: #line 1151 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "9440: #line 1153 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 63 ---",
          "[Context before]",
          "9509:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "9510:                                                             0U, 127U, NULL, FALSE);",
          "9513:   proto_item_append_text(actx->created_item, \" ms\");",
          "",
          "[Removed Lines]",
          "9512: #line 1154 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "9514: #line 1156 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 64 ---",
          "[Context before]",
          "9523:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "9524:                                                             0U, 63U, NULL, FALSE);",
          "9527:   proto_item_append_text(actx->created_item, \" dB-Hz\");",
          "",
          "[Removed Lines]",
          "9526: #line 1157 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "9528: #line 1159 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 65 ---",
          "[Context before]",
          "9555:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "9556:                                                             0U, 127U, NULL, FALSE);",
          "9559:   proto_item_append_text(actx->created_item, \" ms\");",
          "",
          "[Removed Lines]",
          "9558: #line 1166 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "9560: #line 1168 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 66 ---",
          "[Context before]",
          "9718: static int",
          "9719: dissect_lpp_T_error_Resolution(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "9721:   tvbuff_t *error_Resolution_tvb = NULL;",
          "9722:   offset = dissect_per_bit_string(tvb, offset, actx, tree, -1,",
          "9723:                                      2, 2, FALSE, &error_Resolution_tvb, NULL);",
          "",
          "[Removed Lines]",
          "9720: #line 307 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "9722: #line 309 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 67 ---",
          "[Context before]",
          "9729:   if (error_Resolution_tvb) {",
          "9730:     actx->created_item = proto_tree_add_uint(tree, hf_index, error_Resolution_tvb, 0, 1, tvb_get_bits8(error_Resolution_tvb, 0, 2));",
          "9731:   }",
          "",
          "[Removed Lines]",
          "9728: #line 311 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "9730: #line 313 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 68 ---",
          "[Context before]",
          "9739: static int",
          "9740: dissect_lpp_T_error_Value(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "9742:   tvbuff_t *error_Value_tvb = NULL;",
          "9743:   offset = dissect_per_bit_string(tvb, offset, actx, tree, -1,",
          "9744:                                      5, 5, FALSE, &error_Value_tvb, NULL);",
          "",
          "[Removed Lines]",
          "9741: #line 319 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "9743: #line 321 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 69 ---",
          "[Context before]",
          "9750:   if (error_Value_tvb) {",
          "9751:     actx->created_item = proto_tree_add_uint(tree, hf_index, error_Value_tvb, 0, 1, tvb_get_bits8(error_Value_tvb, 0, 5));",
          "9752:   }",
          "",
          "[Removed Lines]",
          "9749: #line 323 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "9751: #line 325 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 70 ---",
          "[Context before]",
          "9760: static int",
          "9761: dissect_lpp_T_error_NumSamples(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "9763:   tvbuff_t *error_NumSamples_tvb = NULL;",
          "9764:   offset = dissect_per_bit_string(tvb, offset, actx, tree, -1,",
          "9765:                                      3, 3, FALSE, &error_NumSamples_tvb, NULL);",
          "",
          "[Removed Lines]",
          "9762: #line 331 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "9764: #line 333 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 71 ---",
          "[Context before]",
          "9771:   if (error_NumSamples_tvb) {",
          "9772:     actx->created_item = proto_tree_add_uint(tree, hf_index, error_NumSamples_tvb, 0, 1, tvb_get_bits8(error_NumSamples_tvb, 0, 3));",
          "9773:   }",
          "",
          "[Removed Lines]",
          "9770: #line 335 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "9772: #line 337 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1c14dd927d4db6d65522e190ca88e2580f59c0fb",
      "candidate_info": {
        "commit_hash": "1c14dd927d4db6d65522e190ca88e2580f59c0fb",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/1c14dd927d4db6d65522e190ca88e2580f59c0fb",
        "files": [
          "asn1/lpp/lpp.cnf",
          "epan/dissectors/packet-lpp.c"
        ],
        "message": "LPP: avoid doing an out of bound access in case the PER decoding gives an invalid value\n\nBug: 10773\nChange-Id: I4fcde84d7be1e42729b6ec0763064e9885951468\nReviewed-on: https://code.wireshark.org/review/5729\nReviewed-by: Pascal Quantin <pascal.quantin@gmail.com>\n(cherry picked from commit 8e96830156bea314207b97315ccebd605317f142)\nReviewed-on: https://code.wireshark.org/review/5730\n(cherry picked from commit edc1a29b9efe9e4298a80550ac71a78abc8f0511)\nReviewed-on: https://code.wireshark.org/review/6426\nReviewed-by: Balint Reczey <balint@balintreczey.hu>",
        "before_after_code_files": [
          "asn1/lpp/lpp.cnf||asn1/lpp/lpp.cnf",
          "epan/dissectors/packet-lpp.c||epan/dissectors/packet-lpp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "asn1/lpp/lpp.cnf||asn1/lpp/lpp.cnf",
            "epan/dissectors/packet-lpp.c||epan/dissectors/packet-lpp.c"
          ],
          "candidate": [
            "asn1/lpp/lpp.cnf||asn1/lpp/lpp.cnf",
            "epan/dissectors/packet-lpp.c||epan/dissectors/packet-lpp.c"
          ]
        }
      },
      "candidate_diff": {
        "asn1/lpp/lpp.cnf||asn1/lpp/lpp.cnf": [
          "File: asn1/lpp/lpp.cnf -> asn1/lpp/lpp.cnf",
          "--- Hunk 1 ---",
          "[Context before]",
          "268: %(DEFAULT_BODY)s",
          "270: #.FN_FTR PeriodicalReportingCriteria/reportingInterval",
          "273: #.FN_BODY ReportingDuration VAL_PTR = &duration",
          "274:   guint32 duration;",
          "",
          "[Removed Lines]",
          "271:   proto_item_append_text(actx->created_item, \"%s\", interval[idx]);",
          "",
          "[Added Lines]",
          "271:   if (idx < 10) {",
          "272:     proto_item_append_text(actx->created_item, \"%s\", interval[idx]);",
          "273:   }",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-lpp.c||epan/dissectors/packet-lpp.c": [
          "File: epan/dissectors/packet-lpp.c -> epan/dissectors/packet-lpp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2901: static int",
          "2902: dissect_lpp_T_sbas_IDs(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "2904:   tvbuff_t *sbas_IDs_tvb = NULL;",
          "2905:   int len;",
          "",
          "[Removed Lines]",
          "2903: #line 1325 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "2903: #line 1327 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3112: static int",
          "3113: dissect_lpp_T_gnss_ids(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "3115:   tvbuff_t *gnss_ids_tvb = NULL;",
          "3116:   int len;",
          "",
          "[Removed Lines]",
          "3114: #line 1299 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "3114: #line 1301 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3191: static int",
          "3192: dissect_lpp_T_ionoModel(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "3194:   tvbuff_t *ionoModel_tvb = NULL;",
          "3195:   int len;",
          "",
          "[Removed Lines]",
          "3193: #line 1178 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "3193: #line 1180 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3323: static int",
          "3324: dissect_lpp_T_clockModel(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "3326:   tvbuff_t *clockModel_tvb = NULL;",
          "3327:   int len;",
          "",
          "[Removed Lines]",
          "3325: #line 1195 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "3325: #line 1197 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3360: static int",
          "3361: dissect_lpp_T_orbitModel(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "3363:   tvbuff_t *orbitModel_tvb = NULL;",
          "3364:   int len;",
          "",
          "[Removed Lines]",
          "3362: #line 1221 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "3362: #line 1223 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "3483: static int",
          "3484: dissect_lpp_T_almanacModel(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "3486:   tvbuff_t *almanacModel_tvb = NULL;",
          "3487:   int len;",
          "",
          "[Removed Lines]",
          "3485: #line 1247 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "3485: #line 1249 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "3537: static int",
          "3538: dissect_lpp_T_utc_Model(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "3540:   tvbuff_t *utc_Model_tvb = NULL;",
          "3541:   int len;",
          "",
          "[Removed Lines]",
          "3539: #line 1276 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "3539: #line 1278 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "3705: static int",
          "3706: dissect_lpp_T_otdoa_Mode(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "3708:   tvbuff_t *otdoa_Mode_tvb = NULL;",
          "3709:   int len;",
          "",
          "[Removed Lines]",
          "3707: #line 343 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "3707: #line 345 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "3838: static int",
          "3839: dissect_lpp_T_ecid_MeasSupported(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "3841:   tvbuff_t *ecid_MeasSupported_tvb = NULL;",
          "3842:   int len;",
          "",
          "[Removed Lines]",
          "3840: #line 1377 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "3840: #line 1379 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "4211:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "4212:                                                             0U, 4095U, NULL, FALSE);",
          "4215:   proto_item_append_text(actx->created_item, \" (days for glonass, weeks otherwise)\");",
          "",
          "[Removed Lines]",
          "4214: #line 1124 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "4214: #line 1126 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "4225:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "4226:                                                             0U, 255U, NULL, FALSE);",
          "4229:   proto_item_append_text(actx->created_item, \" (units of 15 mns for glonass, hours otherwise)\");",
          "",
          "[Removed Lines]",
          "4228: #line 1127 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "4228: #line 1129 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "4239:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "4240:                                                             0U, 15U, NULL, FALSE);",
          "4243:   proto_item_append_text(actx->created_item, \" (units of 30 mns for glonass, hours otherwise)\");",
          "",
          "[Removed Lines]",
          "4242: #line 1130 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "4242: #line 1132 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "4435:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "4436:                                                             0U, 3599U, NULL, FALSE);",
          "4439:   proto_item_append_text(actx->created_item, \" s\");",
          "",
          "[Removed Lines]",
          "4438: #line 1133 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "4438: #line 1135 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "4449:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "4450:                                                             0U, 999U, NULL, FALSE);",
          "4453:   proto_item_append_text(actx->created_item, \" ms\");",
          "",
          "[Removed Lines]",
          "4452: #line 1136 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "4452: #line 1138 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "4812: static int",
          "4813: dissect_lpp_T_notificationOfLeapSecond(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "4815:   tvbuff_t *notificationOfLeapSecond_tvb = NULL;",
          "4816:   offset = dissect_per_bit_string(tvb, offset, actx, tree, -1,",
          "4817:                                      2, 2, FALSE, &notificationOfLeapSecond_tvb, NULL);",
          "",
          "[Removed Lines]",
          "4814: #line 363 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "4814: #line 365 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "4823:   if (notificationOfLeapSecond_tvb) {",
          "4824:     actx->created_item = proto_tree_add_uint(tree, hf_index, notificationOfLeapSecond_tvb, 0, 1, tvb_get_bits8(notificationOfLeapSecond_tvb, 0, 2));",
          "4825:   }",
          "",
          "[Removed Lines]",
          "4822: #line 367 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "4822: #line 369 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "5496: static int",
          "5497: dissect_lpp_T_dataID(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "5499:   tvbuff_t *dataID_tvb = NULL;",
          "5500:   offset = dissect_per_bit_string(tvb, offset, actx, tree, -1,",
          "5501:                                      2, 2, FALSE, &dataID_tvb, NULL);",
          "",
          "[Removed Lines]",
          "5498: #line 381 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "5498: #line 383 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "5507:   if (dataID_tvb) {",
          "5508:     actx->created_item = proto_tree_add_uint(tree, hf_index, dataID_tvb, 0, 1, tvb_get_bits8(dataID_tvb, 0, 2));",
          "5509:   }",
          "",
          "[Removed Lines]",
          "5506: #line 385 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "5506: #line 387 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "5714:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "5715:                                                             -128, 127U, NULL, FALSE);",
          "5718:   proto_item_append_text(actx->created_item, \" s\");",
          "",
          "[Removed Lines]",
          "5717: #line 462 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "5717: #line 464 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "5762:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "5763:                                                             0U, 3599U, NULL, FALSE);",
          "5766:   proto_item_append_text(actx->created_item, \" s\");",
          "",
          "[Removed Lines]",
          "5765: #line 465 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "5765: #line 467 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "6317: static int",
          "6318: dissect_lpp_T_cnavMo(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "6320:   gint64 cnavMo;",
          "6321:   int curr_offset = offset;",
          "6322:   offset = dissect_per_constrained_integer_64b(tvb, offset, actx, tree, hf_index,",
          "",
          "[Removed Lines]",
          "6319: #line 684 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "6319: #line 686 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "6329:   PROTO_ITEM_SET_HIDDEN(actx->created_item);",
          "6330:   actx->created_item = proto_tree_add_int64_format_value(tree, hf_index, tvb, curr_offset>>3, (offset+7-curr_offset)>>3,",
          "6331:                                                          cnavMo, \"%e semi-circles (%\"G_GINT64_MODIFIER\"d)\",",
          "",
          "[Removed Lines]",
          "6328: #line 689 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "6328: #line 691 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "6340: static int",
          "6341: dissect_lpp_T_cnavE(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "6343:   guint64 cnavE;",
          "6344:   int curr_offset = offset;",
          "6345:   offset = dissect_per_constrained_integer_64b(tvb, offset, actx, tree, hf_index,",
          "",
          "[Removed Lines]",
          "6342: #line 698 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "6342: #line 700 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "6352:   PROTO_ITEM_SET_HIDDEN(actx->created_item);",
          "6353:   actx->created_item = proto_tree_add_uint64_format_value(tree, hf_index, tvb, curr_offset>>3, (offset+7-curr_offset)>>3,",
          "6354:                                                           cnavE, \"%e (%\"G_GINT64_MODIFIER\"u)\",",
          "",
          "[Removed Lines]",
          "6351: #line 703 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "6351: #line 705 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "6363: static int",
          "6364: dissect_lpp_T_cnavOmega(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "6366:   gint64 cnavOmega;",
          "6367:   int curr_offset = offset;",
          "6368:   offset = dissect_per_constrained_integer_64b(tvb, offset, actx, tree, hf_index,",
          "",
          "[Removed Lines]",
          "6365: #line 712 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "6365: #line 714 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "6375:   PROTO_ITEM_SET_HIDDEN(actx->created_item);",
          "6376:   actx->created_item = proto_tree_add_int64_format_value(tree, hf_index, tvb, curr_offset>>3, (offset+7-curr_offset)>>3,",
          "6377:                                                          cnavOmega, \"%e semi-circles (%\"G_GINT64_MODIFIER\"d)\",",
          "",
          "[Removed Lines]",
          "6374: #line 717 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "6374: #line 719 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "6386: static int",
          "6387: dissect_lpp_T_cnavOMEGA0(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "6389:   gint64 cnavOMEGA0;",
          "6390:   int curr_offset = offset;",
          "6391:   offset = dissect_per_constrained_integer_64b(tvb, offset, actx, tree, hf_index,",
          "",
          "[Removed Lines]",
          "6388: #line 726 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "6388: #line 728 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "6398:   PROTO_ITEM_SET_HIDDEN(actx->created_item);",
          "6399:   actx->created_item = proto_tree_add_int64_format_value(tree, hf_index, tvb, curr_offset>>3, (offset+7-curr_offset)>>3,",
          "6400:                                                          cnavOMEGA0, \"%e semi-circles (%\"G_GINT64_MODIFIER\"d)\",",
          "",
          "[Removed Lines]",
          "6397: #line 731 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "6397: #line 733 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "6409: static int",
          "6410: dissect_lpp_T_cnavIo(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "6412:   gint64 cnavIo;",
          "6413:   int curr_offset = offset;",
          "6414:   offset = dissect_per_constrained_integer_64b(tvb, offset, actx, tree, hf_index,",
          "",
          "[Removed Lines]",
          "6411: #line 743 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "6411: #line 745 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "6421:   PROTO_ITEM_SET_HIDDEN(actx->created_item);",
          "6422:   actx->created_item = proto_tree_add_int64_format_value(tree, hf_index, tvb, curr_offset>>3, (offset+7-curr_offset)>>3,",
          "6423:                                                          cnavIo, \"%e semi-circles (%\"G_GINT64_MODIFIER\"d)\",",
          "",
          "[Removed Lines]",
          "6420: #line 748 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "6420: #line 750 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "6466:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "6467:                                                             0U, 31U, NULL, FALSE);",
          "6470:   proto_item_append_text(actx->created_item, \" days\");",
          "",
          "[Removed Lines]",
          "6469: #line 778 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "6469: #line 780 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "6478: static int",
          "6479: dissect_lpp_T_gloP1(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "6481:   tvbuff_t *gloP1_tvb = NULL;",
          "6482:   offset = dissect_per_bit_string(tvb, offset, actx, tree, -1,",
          "6483:                                      2, 2, FALSE, &gloP1_tvb, NULL);",
          "",
          "[Removed Lines]",
          "6480: #line 781 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "6480: #line 783 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "6489:   if (gloP1_tvb) {",
          "6490:     actx->created_item = proto_tree_add_uint(tree, hf_index, gloP1_tvb, 0, 1, tvb_get_bits8(gloP1_tvb, 0, 2));",
          "6491:     proto_item_append_text(actx->created_item, \" mn\");",
          "",
          "[Removed Lines]",
          "6488: #line 785 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "6488: #line 787 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "6690:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "6691:                                                             0U, 3599U, NULL, FALSE);",
          "6694:   proto_item_append_text(actx->created_item, \" s\");",
          "",
          "[Removed Lines]",
          "6693: #line 851 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "6693: #line 853 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "6704:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "6705:                                                             0U, 999U, NULL, FALSE);",
          "6708:   proto_item_append_text(actx->created_item, \" ms\");",
          "",
          "[Removed Lines]",
          "6707: #line 854 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "6707: #line 856 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "6822:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "6823:                                                             0U, 127U, NULL, FALSE);",
          "6826:   proto_item_append_text(actx->created_item, \" ms\");",
          "",
          "[Removed Lines]",
          "6825: #line 872 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "6825: #line 874 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "6893:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "6894:                                                             0U, 100U, NULL, FALSE);",
          "6897:   proto_item_append_text(actx->created_item, \" %%\");",
          "",
          "[Removed Lines]",
          "6896: #line 857 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "6896: #line 859 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "7047:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "7048:                                                             1U, 1461U, NULL, FALSE);",
          "7051:   proto_item_append_text(actx->created_item, \" days\");",
          "",
          "[Removed Lines]",
          "7050: #line 974 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "7050: #line 976 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "7222:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "7223:                                                             0U, 255U, NULL, FALSE);",
          "7226:   proto_item_append_text(actx->created_item, \" weeks\");",
          "",
          "[Removed Lines]",
          "7225: #line 1031 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "7225: #line 1033 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "7236:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "7237:                                                             -128, 127U, NULL, FALSE);",
          "7240:   proto_item_append_text(actx->created_item, \" s\");",
          "",
          "[Removed Lines]",
          "7239: #line 1034 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "7239: #line 1036 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "7250:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "7251:                                                             0U, 255U, NULL, FALSE);",
          "7254:   proto_item_append_text(actx->created_item, \" weeks\");",
          "",
          "[Removed Lines]",
          "7253: #line 1037 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "7253: #line 1039 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "7264:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "7265:                                                             -128, 127U, NULL, FALSE);",
          "7268:   proto_item_append_text(actx->created_item, \" days\");",
          "",
          "[Removed Lines]",
          "7267: #line 1040 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "7267: #line 1042 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "7278:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "7279:                                                             -128, 127U, NULL, FALSE);",
          "7282:   proto_item_append_text(actx->created_item, \" s\");",
          "",
          "[Removed Lines]",
          "7281: #line 1043 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "7281: #line 1045 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "7313:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "7314:                                                             -128, 127U, NULL, FALSE);",
          "7317:   proto_item_append_text(actx->created_item, \" s\");",
          "",
          "[Removed Lines]",
          "7316: #line 1055 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "7316: #line 1057 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "7327:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "7328:                                                             0U, 8191U, NULL, FALSE);",
          "7331:   proto_item_append_text(actx->created_item, \" weeks\");",
          "",
          "[Removed Lines]",
          "7330: #line 1061 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "7330: #line 1063 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "7341:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "7342:                                                             0U, 255U, NULL, FALSE);",
          "7345:   proto_item_append_text(actx->created_item, \" weeks\");",
          "",
          "[Removed Lines]",
          "7344: #line 1064 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "7344: #line 1066 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "7355:   offset = dissect_per_bit_string(tvb, offset, actx, tree, hf_index,",
          "7356:                                      4, 4, FALSE, NULL, NULL);",
          "7359:   proto_item_append_text(actx->created_item, \" days\");",
          "",
          "[Removed Lines]",
          "7358: #line 1067 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "7358: #line 1069 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "7369:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "7370:                                                             -128, 127U, NULL, FALSE);",
          "7373:   proto_item_append_text(actx->created_item, \" s\");",
          "",
          "[Removed Lines]",
          "7372: #line 1070 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "7372: #line 1072 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 49 ---",
          "[Context before]",
          "7405:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "7406:                                                             1U, 1461U, NULL, FALSE);",
          "7409:   proto_item_append_text(actx->created_item, \" days\");",
          "",
          "[Removed Lines]",
          "7408: #line 1073 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "7408: #line 1075 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 50 ---",
          "[Context before]",
          "7417: static int",
          "7418: dissect_lpp_T_kp(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "7420:   tvbuff_t *kp_tvb = NULL;",
          "7421:   offset = dissect_per_bit_string(tvb, offset, actx, tree, -1,",
          "7422:                                      2, 2, FALSE, &kp_tvb, NULL);",
          "",
          "[Removed Lines]",
          "7419: #line 1085 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "7419: #line 1087 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 51 ---",
          "[Context before]",
          "7428:   if (kp_tvb) {",
          "7429:     actx->created_item = proto_tree_add_uint(tree, hf_index, kp_tvb, 0, 1, tvb_get_bits8(kp_tvb, 0, 2));",
          "7430:   }",
          "",
          "[Removed Lines]",
          "7427: #line 1089 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "7427: #line 1091 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 52 ---",
          "[Context before]",
          "7458:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "7459:                                                             0U, 255U, NULL, FALSE);",
          "7462:   proto_item_append_text(actx->created_item, \" weeks\");",
          "",
          "[Removed Lines]",
          "7461: #line 1106 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "7461: #line 1108 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 53 ---",
          "[Context before]",
          "7472:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "7473:                                                             -128, 127U, NULL, FALSE);",
          "7476:   proto_item_append_text(actx->created_item, \" s\");",
          "",
          "[Removed Lines]",
          "7475: #line 1109 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "7475: #line 1111 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 54 ---",
          "[Context before]",
          "7486:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "7487:                                                             0U, 255U, NULL, FALSE);",
          "7490:   proto_item_append_text(actx->created_item, \" weeks\");",
          "",
          "[Removed Lines]",
          "7489: #line 1112 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "7489: #line 1114 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 55 ---",
          "[Context before]",
          "7500:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "7501:                                                             -128, 127U, NULL, FALSE);",
          "7504:   proto_item_append_text(actx->created_item, \" days\");",
          "",
          "[Removed Lines]",
          "7503: #line 1115 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "7503: #line 1117 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 56 ---",
          "[Context before]",
          "7514:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "7515:                                                             -128, 127U, NULL, FALSE);",
          "7518:   proto_item_append_text(actx->created_item, \" s\");",
          "",
          "[Removed Lines]",
          "7517: #line 1118 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "7517: #line 1120 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 57 ---",
          "[Context before]",
          "8287: static int",
          "8288: dissect_lpp_ReportingDuration(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "8290:   guint32 duration;",
          "8292:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "",
          "[Removed Lines]",
          "8289: #line 274 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "8289: #line 276 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 58 ---",
          "[Context before]",
          "8371: #line 271 \"../../asn1/lpp/lpp.cnf\"",
          "8375:   return offset;",
          "",
          "[Removed Lines]",
          "8372:   proto_item_append_text(actx->created_item, \"%s\", interval[idx]);",
          "",
          "[Added Lines]",
          "8372:   if (idx < 10) {",
          "8373:     proto_item_append_text(actx->created_item, \"%s\", interval[idx]);",
          "8374:   }",
          "",
          "---------------",
          "--- Hunk 59 ---",
          "[Context before]",
          "8443:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "8444:                                                             1U, 128U, NULL, FALSE);",
          "8447:   proto_item_append_text(actx->created_item, \" s\");",
          "",
          "[Removed Lines]",
          "8446: #line 295 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "8448: #line 297 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 60 ---",
          "[Context before]",
          "8571: static int",
          "8572: dissect_lpp_T_requestedMeasurements(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "8574:   tvbuff_t *requestedMeasurements_tvb = NULL;",
          "8575:   int len;",
          "",
          "[Removed Lines]",
          "8573: #line 1357 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "8575: #line 1359 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 61 ---",
          "[Context before]",
          "9304:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "9305:                                                             0U, 3599999U, NULL, FALSE);",
          "9308:   proto_item_append_text(actx->created_item, \" ms\");",
          "",
          "[Removed Lines]",
          "9307: #line 1142 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "9309: #line 1144 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 62 ---",
          "[Context before]",
          "9435:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "9436:                                                             0U, 127U, NULL, FALSE);",
          "9439:   proto_item_append_text(actx->created_item, \" ms\");",
          "",
          "[Removed Lines]",
          "9438: #line 1151 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "9440: #line 1153 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 63 ---",
          "[Context before]",
          "9509:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "9510:                                                             0U, 127U, NULL, FALSE);",
          "9513:   proto_item_append_text(actx->created_item, \" ms\");",
          "",
          "[Removed Lines]",
          "9512: #line 1154 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "9514: #line 1156 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 64 ---",
          "[Context before]",
          "9523:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "9524:                                                             0U, 63U, NULL, FALSE);",
          "9527:   proto_item_append_text(actx->created_item, \" dB-Hz\");",
          "",
          "[Removed Lines]",
          "9526: #line 1157 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "9528: #line 1159 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 65 ---",
          "[Context before]",
          "9555:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "9556:                                                             0U, 127U, NULL, FALSE);",
          "9559:   proto_item_append_text(actx->created_item, \" ms\");",
          "",
          "[Removed Lines]",
          "9558: #line 1166 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "9560: #line 1168 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 66 ---",
          "[Context before]",
          "9718: static int",
          "9719: dissect_lpp_T_error_Resolution(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "9721:   tvbuff_t *error_Resolution_tvb = NULL;",
          "9722:   offset = dissect_per_bit_string(tvb, offset, actx, tree, -1,",
          "9723:                                      2, 2, FALSE, &error_Resolution_tvb, NULL);",
          "",
          "[Removed Lines]",
          "9720: #line 307 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "9722: #line 309 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 67 ---",
          "[Context before]",
          "9729:   if (error_Resolution_tvb) {",
          "9730:     actx->created_item = proto_tree_add_uint(tree, hf_index, error_Resolution_tvb, 0, 1, tvb_get_bits8(error_Resolution_tvb, 0, 2));",
          "9731:   }",
          "",
          "[Removed Lines]",
          "9728: #line 311 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "9730: #line 313 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 68 ---",
          "[Context before]",
          "9739: static int",
          "9740: dissect_lpp_T_error_Value(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "9742:   tvbuff_t *error_Value_tvb = NULL;",
          "9743:   offset = dissect_per_bit_string(tvb, offset, actx, tree, -1,",
          "9744:                                      5, 5, FALSE, &error_Value_tvb, NULL);",
          "",
          "[Removed Lines]",
          "9741: #line 319 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "9743: #line 321 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 69 ---",
          "[Context before]",
          "9750:   if (error_Value_tvb) {",
          "9751:     actx->created_item = proto_tree_add_uint(tree, hf_index, error_Value_tvb, 0, 1, tvb_get_bits8(error_Value_tvb, 0, 5));",
          "9752:   }",
          "",
          "[Removed Lines]",
          "9749: #line 323 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "9751: #line 325 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 70 ---",
          "[Context before]",
          "9760: static int",
          "9761: dissect_lpp_T_error_NumSamples(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "9763:   tvbuff_t *error_NumSamples_tvb = NULL;",
          "9764:   offset = dissect_per_bit_string(tvb, offset, actx, tree, -1,",
          "9765:                                      3, 3, FALSE, &error_NumSamples_tvb, NULL);",
          "",
          "[Removed Lines]",
          "9762: #line 331 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "9764: #line 333 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 71 ---",
          "[Context before]",
          "9771:   if (error_NumSamples_tvb) {",
          "9772:     actx->created_item = proto_tree_add_uint(tree, hf_index, error_NumSamples_tvb, 0, 1, tvb_get_bits8(error_NumSamples_tvb, 0, 3));",
          "9773:   }",
          "",
          "[Removed Lines]",
          "9770: #line 335 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "9772: #line 337 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d2ba47392e4d4ef2ecb6bad75ed23a7469ddcf71",
      "candidate_info": {
        "commit_hash": "d2ba47392e4d4ef2ecb6bad75ed23a7469ddcf71",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/d2ba47392e4d4ef2ecb6bad75ed23a7469ddcf71",
        "files": [
          "asn1/lpp/lpp.cnf",
          "asn1/lppe/LPPe.asn",
          "asn1/lppe/lppe.cnf",
          "asn1/lppe/packet-lppe-template.c",
          "epan/dissectors/packet-lpp.c",
          "epan/dissectors/packet-lpp.h",
          "epan/dissectors/packet-lppe.c"
        ],
        "message": "Upgrade LPPe dissector to V1_1-20140108-C\n\nChange-Id: I1d5d4ed73825bb5cda0cc2e76e5000c38c50b601\nReviewed-on: https://code.wireshark.org/review/816\nReviewed-by: Pascal Quantin <pascal.quantin@gmail.com>",
        "before_after_code_files": [
          "asn1/lpp/lpp.cnf||asn1/lpp/lpp.cnf",
          "asn1/lppe/LPPe.asn||asn1/lppe/LPPe.asn",
          "asn1/lppe/lppe.cnf||asn1/lppe/lppe.cnf",
          "asn1/lppe/packet-lppe-template.c||asn1/lppe/packet-lppe-template.c",
          "epan/dissectors/packet-lpp.c||epan/dissectors/packet-lpp.c",
          "epan/dissectors/packet-lpp.h||epan/dissectors/packet-lpp.h",
          "epan/dissectors/packet-lppe.c||epan/dissectors/packet-lppe.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "asn1/lpp/lpp.cnf||asn1/lpp/lpp.cnf",
            "epan/dissectors/packet-lpp.c||epan/dissectors/packet-lpp.c"
          ],
          "candidate": [
            "asn1/lpp/lpp.cnf||asn1/lpp/lpp.cnf",
            "epan/dissectors/packet-lpp.c||epan/dissectors/packet-lpp.c"
          ]
        }
      },
      "candidate_diff": {
        "asn1/lpp/lpp.cnf||asn1/lpp/lpp.cnf": [
          "File: asn1/lpp/lpp.cnf -> asn1/lpp/lpp.cnf",
          "--- Hunk 1 ---",
          "[Context before]",
          "33: NetworkTime",
          "34: GNSS-ID-Bitmap",
          "35: ARFCN-ValueUTRA",
          "36: #.END",
          "38: #.PDU_NEW",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "36: GNSS-ReferenceTime",
          "37: LPP-Message",
          "38: Ellipsoid-PointWithUncertaintyCircle",
          "39: EllipsoidPointWithUncertaintyEllipse",
          "40: EllipsoidArc",
          "41: Polygon",
          "",
          "---------------"
        ],
        "asn1/lppe/LPPe.asn||asn1/lppe/LPPe.asn": [
          "File: asn1/lppe/LPPe.asn -> asn1/lppe/LPPe.asn",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: --",
          "1932: -- Added from LPP.asn",
          "1933: maxFreqLayers INTEGER ::= 3",
          "",
          "[Removed Lines]",
          "1: -- Open Mobile Alliance OMA-TS-LPPe V1_0-20110929-C",
          "4: OMA-LPPE DEFINITIONS AUTOMATIC TAGS ::=",
          "5: BEGIN",
          "7: -- asn2wrs does not seem to import integer constants maxFreqLayers)",
          "8: --IMPORTS GNSS-ID, GNSS-SignalID, GNSS-SignalIDs, GNSS-SystemTime, SV-ID,",
          "9: --ECID-SignalMeasurementInformation, CellGlobalIdGERAN, CellGlobalIdEUTRA-AndUTRA,",
          "10: --OTDOA-ReferenceCellInfo, OTDOA-NeighbourCellInfoElement, maxFreqLayers, ARFCN-ValueEUTRA,",
          "11: --Ellipsoid-Point, EllipsoidPointWithAltitude, EllipsoidPointWithAltitudeAndUncertaintyEllipsoid,",
          "12: --NetworkTime, GNSS-ID-Bitmap, ARFCN-ValueUTRA FROM LPP-PDU-Definitions;",
          "13: IMPORTS GNSS-ID, GNSS-SignalID, GNSS-SignalIDs, GNSS-SystemTime, SV-ID,",
          "14: ECID-SignalMeasurementInformation, CellGlobalIdGERAN, CellGlobalIdEUTRA-AndUTRA,",
          "15: OTDOA-ReferenceCellInfo, OTDOA-NeighbourCellInfoElement, ARFCN-ValueEUTRA,",
          "16: Ellipsoid-Point, EllipsoidPointWithAltitude, EllipsoidPointWithAltitudeAndUncertaintyEllipsoid,",
          "17: NetworkTime, GNSS-ID-Bitmap, ARFCN-ValueUTRA FROM LPP-PDU-Definitions;",
          "19: OMA-LPPe-MessageExtension ::= SEQUENCE {",
          "20:      lppeCompatibilityLevel                    OMA-LPPe-LPPeCompatibilityLevel,",
          "21:      lppeVersion                               OMA-LPPe-LPPeVersion,",
          "22:      lppeMode                                  OMA-LPPe-LPPeMode,",
          "23:      messageExtensionBody                      OMA-LPPe-MessageExtensionBody,",
          "24:      ...",
          "25: }",
          "27: OMA-LPPe-LPPeCompatibilityLevel ::= INTEGER (0..15)",
          "29: OMA-LPPe-LPPeVersion ::= SEQUENCE {",
          "30:      majorVersion              INTEGER(0..255),",
          "31:      minorVersion              INTEGER(0..255)",
          "32: }",
          "34: OMA-LPPe-LPPeMode ::= ENUMERATED {",
          "35:      normal,",
          "36:      reversed,",
          "37:      ...",
          "38: }",
          "41: OMA-LPPe-MessageExtensionBody ::= CHOICE {",
          "42:           requestCapabilities                 OMA-LPPe-RequestCapabilities,",
          "43:                                               --Shall only be used in the EPDU in LPP RequestCapabilities",
          "44:           provideCapabilities                 OMA-LPPe-ProvideCapabilities,",
          "45:                                               --Shall only be used in the EPDU in LPP ProvideCapabilities",
          "46:           requestAssistanceData               OMA-LPPe-RequestAssistanceData,",
          "47:                                               --Shall only be used in the EPDU in LPP RequestAssistanceData",
          "48:           provideAssistanceData               OMA-LPPe-ProvideAssistanceData,",
          "49:                                               --Shall only be used in the EPDU in LPP ProvideAssistanceData",
          "50:           requestLocationInformation  OMA-LPPe-RequestLocationInformation,",
          "51:                                               --Shall only be used in the EPDU in LPP RequestLocationInformation",
          "52:           provideLocationInformation  OMA-LPPe-ProvideLocationInformation,",
          "53:                                               --Shall only be used in the EPDU in LPP ProvideLocationInformation",
          "54:           error                               OMA-LPPe-Error, --Shall only be used in the EPDU in LPP Error",
          "55:           abort                               OMA-LPPe-Abort, --Shall only be used in the EPDU in LPP Abort",
          "56:           ...",
          "57: }",
          "59: OMA-LPPe-RequestCapabilities ::= SEQUENCE {",
          "60:      commonIEsRequestCapabilities                       OMA-LPPe-CommonIEsRequestCapabilities   OPTIONAL,",
          "61:      agnss-RequestCapabilities                          OMA-LPPe-AGNSS-RequestCapabilities                 OPTIONAL,",
          "62:      otdoa-RequestCapabilities                          OMA-LPPe-OTDOA-RequestCapabilities                 OPTIONAL,",
          "63:      eotd-RequestCapabilities                           OMA-LPPe-EOTD-RequestCapabilities                  OPTIONAL,",
          "64:      otdoa-utra-RequestCapabilities                     OMA-LPPe-OTDOA-UTRA-RequestCapabilities OPTIONAL,",
          "65:      ecid-lte-RequestCapabilities                       OMA-LPPe-ECID-LTE-RequestCapabilities   OPTIONAL,",
          "66:      ecid-gsm-RequestCapabilities                       OMA-LPPe-ECID-GSM-RequestCapabilities   OPTIONAL,",
          "67:      ecid-utra-RequestCapabilities                      OMA-LPPe-ECID-UTRA-RequestCapabilities  OPTIONAL,",
          "68:      wlan-ap-RequestCapabilities                       OMA-LPPe-WLAN-AP-RequestCapabilities              OPTIONAL,",
          "69:      ecid-wimax-RequestCapabilities                    OMA-LPPe-ECID-WiMax-RequestCapabilities OPTIONAL,",
          "70:      sensor-RequestCapabilities                        OMA-LPPe-Sensor-RequestCapabilities               OPTIONAL,",
          "71:      srn-RequestCapabilities                           OMA-LPPe-SRN-RequestCapabilities                  OPTIONAL,",
          "72:      ...",
          "73: }",
          "75: OMA-LPPe-ProvideCapabilities::= SEQUENCE {",
          "76:      commonIEsProvideCapabilities                      OMA-LPPe-CommonIEsProvideCapabilities                  OPTIONAL,",
          "77:      agnss-ProvideCapabilities                         OMA-LPPe-AGNSS-ProvideCapabilities                     OPTIONAL,",
          "78:      otdoa-ProvideCapabilities                         OMA-LPPe-OTDOA-ProvideCapabilities                     OPTIONAL,",
          "79:      eotd-ProvideCapabilities                          OMA-LPPe-EOTD-ProvideCapabilities                      OPTIONAL,",
          "80:      otdoa-utra-ProvideCapabilities                    OMA-LPPe-OTDOA-UTRA-ProvideCapabilities                OPTIONAL,",
          "81:      ecid-lte-ProvideCapabilities                      OMA-LPPe-ECID-LTE-ProvideCapabilities                  OPTIONAL,",
          "82:      ecid-gsm-ProvideCapabilities                      OMA-LPPe-ECID-GSM-ProvideCapabilities                  OPTIONAL,",
          "83:      ecid-utra-ProvideCapabilities                     OMA-LPPe-ECID-UTRA-ProvideCapabilities                 OPTIONAL,",
          "84:      wlan-ap-ProvideCapabilities                       OMA-LPPe-WLAN-AP-ProvideCapabilities                   OPTIONAL,",
          "85:      ecid-wimax-ProvideCapabilities                    OMA-LPPe-ECID-WiMax-ProvideCapabilities                OPTIONAL,",
          "86:      sensor-ProvideCapabilities                        OMA-LPPe-Sensor-ProvideCapabilities                    OPTIONAL,",
          "87:      srn-ProvideCapabilities                           OMA-LPPe-SRN-ProvideCapabilities                       OPTIONAL,",
          "88:      ...",
          "89: }",
          "91: OMA-LPPe-RequestAssistanceData ::= SEQUENCE {",
          "92:      commonIEsRequestAssistanceData                    OMA-LPPe-CommonIEsRequestAssistanceData                OPTIONAL,",
          "93:      agnss-RequestAssistanceData                       OMA-LPPe-AGNSS-RequestAssistanceData                   OPTIONAL,",
          "94:      otdoa-RequestAssistanceData                       OMA-LPPe-OTDOA-RequestAssistanceData                   OPTIONAL,",
          "95:      eotd-RequestAssistanceData                        OMA-LPPe-EOTD-RequestAssistanceData                    OPTIONAL,",
          "96:      otdoa-utra-RequestAssistanceData                  OMA-LPPe-OTDOA-UTRA-RequestAssistanceData   OPTIONAL,",
          "97:      ecid-lte-RequestAssistanceData                    OMA-LPPe-ECID-LTE-RequestAssistanceData                OPTIONAL,",
          "98:      ecid-gsm-RequestAssistanceData                    OMA-LPPe-ECID-GSM-RequestAssistanceData                OPTIONAL,",
          "99:      ecid-utra-RequestAssistanceData                   OMA-LPPe-ECID-UTRA-RequestAssistanceData               OPTIONAL,",
          "100:      wlan-ap-RequestAssistanceData                     OMA-LPPe-WLAN-AP-RequestAssistanceData                 OPTIONAL,",
          "101:      sensor-RequestAssistanceData                      OMA-LPPe-Sensor-RequestAssistanceData                  OPTIONAL,",
          "102:      srn-RequestAssistanceData                         OMA-LPPe-SRN-RequestAssistanceData                     OPTIONAL,",
          "103:      ...",
          "104: }",
          "106: OMA-LPPe-ProvideAssistanceData ::= SEQUENCE {",
          "107:      commonIEsProvideAssistanceData                    OMA-LPPe-CommonIEsProvideAssistanceData                OPTIONAL,",
          "108:      agnss-ProvideAssistanceData                       OMA-LPPe-AGNSS-ProvideAssistanceData                   OPTIONAL,",
          "109:      otdoa-ProvideAssistanceData                       OMA-LPPe-OTDOA-ProvideAssistanceData                   OPTIONAL,",
          "110:      eotd-ProvideAssistanceData                        OMA-LPPe-EOTD-ProvideAssistanceData                    OPTIONAL,",
          "111:      otdoa-utra-ProvideAssistanceData                  OMA-LPPe-OTDOA-UTRA-ProvideAssistanceData   OPTIONAL,",
          "112:      ecid-lte-ProvideAssistanceData                    OMA-LPPe-ECID-LTE-ProvideAssistanceData                OPTIONAL,",
          "113:      ecid-gsm-ProvideAssistanceData                    OMA-LPPe-ECID-GSM-ProvideAssistanceData                OPTIONAL,",
          "114:      ecid-utra-ProvideAssistanceData                   OMA-LPPe-ECID-UTRA-ProvideAssistanceData               OPTIONAL,",
          "115:      wlan-ap-ProvideAssistanceData                     OMA-LPPe-WLAN-AP-ProvideAssistanceData                 OPTIONAL,",
          "116:      sensor-ProvideAssistanceData                      OMA-LPPe-Sensor-ProvideAssistanceData                  OPTIONAL,",
          "117:      srn-ProvideAssistanceData                         OMA-LPPe-SRN-ProvideAssistanceData                     OPTIONAL,",
          "118:      ...",
          "119: }",
          "121: OMA-LPPe-RequestLocationInformation ::= SEQUENCE {",
          "122:      commonIEsRequestLocationInformation               OMA-LPPe-CommonIEsRequestLocationInformation                OPTIONAL,",
          "123:      agnss-RequestLocationInformation                  OMA-LPPe-AGNSS-RequestLocationInformation                   OPTIONAL,",
          "124:      otdoa-RequestLocationInformation                  OMA-LPPe-OTDOA-RequestLocationInformation                   OPTIONAL,",
          "125:      eotd-RequestLocationInformation                   OMA-LPPe-EOTD-RequestLocationInformation                    OPTIONAL,",
          "126:      otdoa-utra-RequestLocationInformation   OMA-LPPe-OTDOA-UTRA-RequestLocationInformation  OPTIONAL,",
          "127:      ecid-lte-RequestLocationInformation               OMA-LPPe-ECID-LTE-RequestLocationInformation                OPTIONAL,",
          "128:      ecid-gsm-RequestLocationInformation               OMA-LPPe-ECID-GSM-RequestLocationInformation                OPTIONAL,",
          "129:      ecid-utra-RequestLocationInformation              OMA-LPPe-ECID-UTRA-RequestLocationInformation   OPTIONAL,",
          "130:      wlan-ap-RequestLocationInformation                OMA-LPPe-WLAN-AP-RequestLocationInformation                 OPTIONAL,",
          "131:      ecid-wimax-RequestLocationInformation   OMA-LPPe-ECID-WiMax-RequestLocationInformation  OPTIONAL,",
          "132:      sensor-RequestLocationInformation                 OMA-LPPe-Sensor-RequestLocationInformation                  OPTIONAL,",
          "133:      srn-RequestLocationInformation                    OMA-LPPe-SRN-RequestLocationInformation                     OPTIONAL,",
          "134:      ...",
          "135: }",
          "137: OMA-LPPe-ProvideLocationInformation ::= SEQUENCE {",
          "138:      commonIEsProvideLocationInformation               OMA-LPPe-CommonIEsProvideLocationInformation                OPTIONAL,",
          "139:      agnss-ProvideLocationInformation                  OMA-LPPe-AGNSS-ProvideLocationInformation                   OPTIONAL,",
          "140:      otdoa-ProvideLocationInformation                  OMA-LPPe-OTDOA-ProvideLocationInformation                   OPTIONAL,",
          "141:      eotd-ProvideLocationInformation                   OMA-LPPe-EOTD-ProvideLocationInformation                    OPTIONAL,",
          "142:      otdoa-utra-ProvideLocationInformation   OMA-LPPe-OTDOA-UTRA-ProvideLocationInformation  OPTIONAL,",
          "143:      ecid-lte-ProvideLocationInformation               OMA-LPPe-ECID-LTE-ProvideLocationInformation                OPTIONAL,",
          "144:      ecid-gsm-ProvideLocationInformation               OMA-LPPe-ECID-GSM-ProvideLocationInformation                OPTIONAL,",
          "145:      ecid-utra-ProvideLocationInformation              OMA-LPPe-ECID-UTRA-ProvideLocationInformation   OPTIONAL,",
          "146:      wlan-ap-ProvideLocationInformastion               OMA-LPPe-WLAN-AP-ProvideLocationInformation                 OPTIONAL,",
          "147:      ecid-wimax-ProvideLocationInformastion  OMA-LPPe-ECID-WiMax-ProvideLocationInformation  OPTIONAL,",
          "148:      sensor-ProvideLocationInformation                 OMA-LPPe-Sensor-ProvideLocationInformation                  OPTIONAL,",
          "149:      srn-ProvideLocationInformation                    OMA-LPPe-SRN-ProvideLocationInformation                     OPTIONAL,",
          "150:      ...",
          "151: }",
          "153: OMA-LPPe-Abort ::= SEQUENCE {",
          "154:      commonIEsAbort            OMA-LPPe-CommonIEsAbort              OPTIONAL,",
          "155:      agnssAbort                OMA-LPPe-AGNSS-Abort                 OPTIONAL,",
          "156:      ...",
          "157: }",
          "159: OMA-LPPe-Error ::= SEQUENCE {",
          "160:      commonIEsError            OMA-LPPe-CommonIEsError              OPTIONAL,",
          "161:      ...",
          "162: }",
          "164: OMA-LPPe-AssistanceContainer-DataSerialNumber ::= SEQUENCE {",
          "165:      dataSerialNumber                INTEGER(0..4294967295),",
          "166:      ...",
          "167: }",
          "169: OMA-LPPe-AssistanceContainerID ::= SEQUENCE {",
          "170:      containerID               INTEGER (0..65535),",
          "171:      ...",
          "172: }",
          "174: OMA-LPPe-AssistanceContainerProvideList ::= SEQUENCE (SIZE(1.. maxAssistanceContainerList)) OF",
          "175:                                                                                        OMA-LPPe-AssistanceContainerProvide",
          "177: maxAssistanceContainerList INTEGER ::= 16",
          "178: OMA-LPPe-AssistanceContainerProvide ::= SEQUENCE  {",
          "179:      dataIdentifier                 OMA-LPPe-VendorOrOperatorAssistanceDataIdentifier,",
          "180:      checkOrUpdateOrError           ENUMERATED  {",
          "181:                                          targetHasLatestData,",
          "182:                                          targetDataNotLatest,",
          "183:                                          targetDataNotLatestButServerCannotProvideLatestData,",
          "184:                                          targetHasValidData,",
          "185:                                          targetDataInvalidButServerCannotProvideValidData,",
          "186:                                          serverHasRequestedDataButUnableToProvideTemporarily,",
          "187:                                          serverDoesNotHaveRequestedData,",
          "188:                                          serverDoesNotRecognizeRequestedData,",
          "189:                                          undefined,",
          "190:                                          ... }                                    OPTIONAL,    --Cond CheckorUpdate",
          "191:      dataResult                     CHOICE         {",
          "192:                                          simulationResult    INTEGER(0..5000),",
          "193:                                          data                     OMA-LPPe-AssistanceContainerData,",
          "194:                                           ...",
          "195:                                           }  OPTIONAL,",
          "196:      errorCode                      OMA-LPPe-AssistanceContainerProvideError                OPTIONAL,",
          "197:      ...",
          "198: }",
          "200: OMA-LPPe-AssistanceContainerData ::= SEQUENCE {",
          "201:      dataSerialNumber               OMA-LPPe-AssistanceContainer-DataSerialNumber                          OPTIONAL,",
          "202:      data                           OCTET STRING,",
          "203:      validityPeriod                 OMA-LPPe-ValidityPeriod                  OPTIONAL,",
          "204:      validityArea                   OMA-LPPe-ValidityArea                    OPTIONAL,",
          "205:      ...",
          "206: }",
          "208: OMA-LPPe-AssistanceContainerProvideError ::= SEQUENCE {",
          "209:      serverError          ENUMERATED { assistanceContainerUnknownDataIdentifier,",
          "210:                                           assistanceContainerUnknownDataSerialNumber,",
          "211:                                           assistanceContainerDataTemporarilyUnavailable,",
          "212:                                           assistanceContainerDataNoLongerSupported,",
          "213:                                           assistanceContainerVendorOrOperatorNotSupported,",
          "214:                                          ...} OPTIONAL,",
          "215:      ...",
          "216: }",
          "218: OMA-LPPe-AssistanceContainerRequestList ::= SEQUENCE (SIZE(1..maxAssistanceContainerList)) OF",
          "219:                                                                                                        OMA-LPPe-AssistanceContainerRequest",
          "221: OMA-LPPe-AssistanceContainerRequest ::= SEQUENCE  {",
          "222:       dataIdentifier                                   OMA-LPPe-VendorOrOperatorAssistanceDataIdentifier,",
          "223:       simulatedReq                                     BOOLEAN,",
          "224:       checkOrUpdateReq                                 OMA-LPPe-AssistanceContainerCheckOrUpdateReq                            OPTIONAL,",
          "225:       validityTimeRequest                         OMA-LPPe-ValidityPeriod                                           OPTIONAL,",
          "226:       proprietaryRequestParameters                OCTET STRING                                                      OPTIONAL,",
          "227:       ...",
          "228: }",
          "230: OMA-LPPe-AssistanceContainerCheckOrUpdateReq ::= SEQUENCE {",
          "231:       dataSerialNumber           OMA-LPPe-AssistanceContainer-DataSerialNumber,",
          "232:       checkLatest                ENUMERATED  {returnLatestIfCurrentNotLatest,",
          "233:                                                    returnUpdateOnlyIfCurrentInvalid,",
          "234:                                                    ... },",
          "235:       ...",
          "236: }",
          "238: OMA-LPPe-CellLocalIdGERAN ::= SEQUENCE {",
          "239:       locationAreaCode                 BIT STRING (SIZE (16)),",
          "240:       cellIdentity                     BIT STRING (SIZE (16)),",
          "241:       ...",
          "242: }",
          "244: OMA-LPPe-CellNonUniqueIDGERAN ::= SEQUENCE {",
          "245:       bsic            INTEGER (0..63),",
          "246:       bcch            INTEGER (0..1023),",
          "247:       ...",
          "248: }",
          "250: OMA-LPPe-CharArray ::= VisibleString(FROM (\"a\"..\"z\" | \"A\"..\"Z\" | \"0\"..\"9\" | \".-\"))(SIZE (1..31))",
          "252: OMA-LPPe-CivicLocation ::= SEQUENCE {",
          "253:       countryCode                           OCTET STRING (SIZE (2)),",
          "254:       civicAddressElementList               OMA-LPPe-CivicAddressElementList,",
          "255:       ...",
          "256: }",
          "258: OMA-LPPe-CivicAddressElementList ::= SEQUENCE (SIZE (1..128)) OF OMA-LPPe-CivicAddressElement",
          "260: OMA-LPPe-CivicAddressElement ::= SEQUENCE {",
          "261:      caType          INTEGER(0..511),",
          "262:      caValue         OCTET STRING (SIZE (1..256)),",
          "263:      ...",
          "264: }",
          "266: OMA-LPPe-Duration ::= SEQUENCE {",
          "267:      duration              INTEGER (1..63),",
          "268:      durationLSB           INTEGER (1..89) OPTIONAL,",
          "269:      ...",
          "270: }",
          "272: OMA-LPPe-FixedAccessTypes ::= BIT STRING {  cable                          (0),",
          "273:                                                            dsl             (1),",
          "274:                                                            lan             (2),",
          "275:                                                            pstn            (3),",
          "276:                                                            other           (4) } (SIZE(1..16))",
          "278: OMA-LPPe-HighAccuracy3Dposition ::= SEQUENCE {",
          "279:      latitude                         INTEGER(-2147483648..2147483647),",
          "280:      longitude                        INTEGER(-2147483648..2147483647),",
          "281:      cep                              INTEGER(0..255)                                  OPTIONAL,   --Cond NoEllipse",
          "282:      uncertainty-semimajor   INTEGER(0..255)                                           OPTIONAL,   --Cond NoCEP",
          "283:      uncertainty-semiminor   INTEGER(0..255)                                           OPTIONAL,   --Cond NoCEP",
          "284:      offset-angle                     INTEGER(0..179)                                  OPTIONAL,   --Cond NoCEP",
          "285:      confidenceHorizontal             INTEGER(0..99)                                   OPTIONAL,",
          "286:      altitude                         INTEGER(-64000..1280000),",
          "287:      uncertainty-altitude             INTEGER(0..255),",
          "288:      confidenceVertical               INTEGER(0..99)                                   OPTIONAL,",
          "289:      ...",
          "290: }",
          "292: OMA-LPPe-HighAccuracy3Dvelocity ::= SEQUENCE {",
          "293:       enu-origin                             OMA-LPPe-HighAccuracy3Dposition                   OPTIONAL,",
          "294:       east-component                         INTEGER(0..511),",
          "295:       negative-sign-east                     NULL                                              OPTIONAL,   --Cond West",
          "296:       north-component                        INTEGER(0..511),",
          "297:       negative-sign-north                    NULL                                              OPTIONAL,   --Cond South",
          "298:       up-component                           INTEGER(0..511),",
          "299:       negative-sign-up                       NULL                                              OPTIONAL,   --Cond Down",
          "300:       cep                                    INTEGER(0..255)                                   OPTIONAL,   --Cond NoEllipse",
          "301:       uncertainty-semimajor                  INTEGER(0..255)                                   OPTIONAL,   --Cond NoCEP,",
          "302:       uncertainty-semiminor                  INTEGER(0..255)                                   OPTIONAL,   --Cond NoCEP,",
          "303:       offset-angle                           INTEGER(0..179)                                   OPTIONAL,   --Cond NoCEP,",
          "304:       confidenceHorizontal                   INTEGER(0..99)                                    OPTIONAL,",
          "305:       uncertainty-up-component               INTEGER(0..255),",
          "306:       confidenceUp                           INTEGER(0..99)                                    OPTIONAL,",
          "307:       ...",
          "308: }",
          "310: OMA-LPPe-LocationInformationContainerID ::= SEQUENCE {",
          "311:       containerID                 INTEGER (0..65535),",
          "312:       ...",
          "313: }",
          "315: OMA-LPPe-LocationInformationContainer ::= SEQUENCE {",
          "316:       vendorOrOperatorID                                      OMA-LPPe-VendorOrOperatorID,",
          "317:       locationInformationContainerDataList                    OMA-LPPe-LocationInformationContainerDataList,",
          "318:       ...",
          "319: }",
          "321: OMA-LPPe-LocationInformationContainerDataList ::= SEQUENCE",
          "322:            (SIZE(1..maxLocationInformationContainerDataList)) OF OMA-LPPe-LocationInformationContainerData",
          "324: OMA-LPPe-LocationInformationContainerData ::= SEQUENCE {",
          "325:      containerID                 OMA-LPPe-LocationInformationContainerID,",
          "326:      containerData               OCTET STRING,",
          "327:      ...",
          "328: }",
          "330: OMA-LPPe-LocationInformationContainerRequest ::= SEQUENCE {",
          "331:      vendorOrOperatorID                                          OMA-LPPe-VendorOrOperatorID,",
          "332:      locationInformationContainerRequestList                     OMA-LPPe-LocationInformationContainerRequestList,",
          "333:      ...",
          "334: }",
          "336: OMA-LPPe-LocationInformationContainerRequestList ::= SEQUENCE",
          "337:                                                                  (SIZE (1.. maxLocationInformationContainerDataList)) OF",
          "338:                                                                             OMA-LPPe-LocationInformationContainerRequestItem",
          "340: maxLocationInformationContainerDataList INTEGER ::= 10",
          "342: OMA-LPPe-LocationInformationContainerRequestItem ::= SEQUENCE {",
          "343:      containerID                      OMA-LPPe-LocationInformationContainerID,",
          "344:      additionalInformation   OCTET STRING                                              OPTIONAL,",
          "345:      ...",
          "346: }",
          "348: OMA-LPPe-MapDataReference ::= SEQUENCE {",
          "349:      dataID                          OMA-LPPe-AssistanceContainerID,",
          "350:      mapReference                    OCTET STRING (SIZE (1..64)),",
          "351:      mapSize                         INTEGER (1..5000)              OPTIONAL,",
          "352:      ...",
          "353: }",
          "355: OMA-LPPe-Orientation ::= CHOICE {",
          "356:      eulerAngles          SEQUENCE {",
          "357:                                 alpha   INTEGER (0..359),",
          "358:                                 beta    INTEGER (0..180),",
          "359:                                 gamma   INTEGER (0..359),",
          "360:                                 ...",
          "361:                                 },",
          "362:      ...",
          "363: }",
          "365: OMA-LPPe-ReferencePoint ::= SEQUENCE {",
          "366:      referencePointUniqueID                          OMA-LPPe-ReferencePointUniqueID                OPTIONAL,",
          "367:      referencePointGeographicLocation                CHOICE {",
          "368:            location3D                                          EllipsoidPointWithAltitude,",
          "369:            location3DwithUncertainty                           EllipsoidPointWithAltitudeAndUncertaintyEllipsoid,",
          "370:            locationwithhighaccuracy                            OMA-LPPe-HighAccuracy3Dposition,",
          "371:           ...",
          "372:           }                                                                                               OPTIONAL,",
          "373:      referencePointCivicLocation                  OMA-LPPe-CivicLocation                                  OPTIONAL,",
          "374:      referencePointFloorLevel                     INTEGER (-20..235)                                      OPTIONAL,",
          "375:      relatedReferencePoints                       SEQUENCE (SIZE (1..8)) OF",
          "376:                                                        OMA-LPPe-ReferencePointRelationship                OPTIONAL,",
          "377:      mapDataInformation                           OMA-LPPe-MapDataInformation                             OPTIONAL,",
          "378:      ...",
          "379: }",
          "381: OMA-LPPe-MapDataInformation ::= SEQUENCE (SIZE (1..16)) OF OMA-LPPe-MapDataReferenceElement",
          "383: OMA-LPPe-MapDataReferenceElement ::= SEQUENCE {",
          "384:      mapDataUrl          CHOICE {",
          "385:           mapDataUrl                         OMA-LPPe-Uri,",
          "386:           mapDataRef                         OMA-LPPe-MapDataReference",
          "387:      },",
          "388:      mapProvider         CHOICE {",
          "389:           sameAsRefPointProvider             NULL,",
          "390:           notSameAsRefPointProvider   OMA-LPPe-VendorOrOperatorID,",
          "391:           ...",
          "392:      }                                                                                               OPTIONAL,",
          "393:      mapAssociation  CHOICE {",
          "394:           referencePointUniqueID             NULL,",
          "395:           otherID                            VisibleString (SIZE (1..64)),",
          "396:           mapOffset                          OMA-LPPe-RelativeLocation,",
          "397:           origin                             NULL,",
          "398:           ...",
          "399:      },",
          "400:      mapHorizontalOrientation                          INTEGER (0..359)                              OPTIONAL,",
          "401:      ...",
          "402: }",
          "404: OMA-LPPe-ReferencePointRelationship ::= SEQUENCE {",
          "405:      referencePointUniqueID             OMA-LPPe-ReferencePointUniqueID,",
          "406:      relativeLocation                   OMA-LPPe-RelativeLocation,",
          "407:      ...",
          "408: }",
          "410: OMA-LPPe-ReferencePointUniqueID ::= SEQUENCE {",
          "411:      providerID                 OMA-LPPe-VendorOrOperatorID,",
          "412:      providerAssignedID  OCTET STRING,",
          "413:      version                    INTEGER (1..64),",
          "414:      ...",
          "415: }",
          "417: OMA-LPPe-RelativeLocation ::= SEQUENCE {",
          "418:      units                           ENUMERATED {cm,dm, m10, ...}                                          OPTIONAL,",
          "419:      arc-second-units                ENUMERATED {as0-0003, as0-003, as0-03, as0-3, ...}  OPTIONAL,",
          "420:      relativeNorth                   INTEGER (-524288..524287),",
          "421:      relativeEast                    INTEGER (-524288..524287),",
          "422:      relativeAltitude                OMA-LPPe-RelativeAltitude                                             OPTIONAL,",
          "423:      horizontalUncertainty   OMA-LPPe-HorizontalUncertaintyAndConfidence                                   OPTIONAL,",
          "424:      ...",
          "425: }",
          "427: OMA-LPPe-HorizontalUncertaintyAndConfidence ::= SEQUENCE {",
          "428:      uncShape    CHOICE {",
          "429:                                 circle               INTEGER (0..127),",
          "430:                                 ellipse              SEQUENCE {",
          "431:                                      semimajor             INTEGER (0..127),",
          "432:                                      semiminor             INTEGER (0..127),",
          "433:                                      offsetAngle           INTEGER (0..179)",
          "434:                                 },",
          "435:                                 ...",
          "436:      },",
          "437:      confidence INTEGER (0..99) OPTIONAL,",
          "438:      ...",
          "439: }",
          "441: OMA-LPPe-RelativeAltitude ::= SEQUENCE {",
          "442:      geodeticRelativeAltitude             OMA-LPPe-GeodeticRelativeAltitude   OPTIONAL,",
          "443:      civicRelativeAltitude                OMA-LPPe-CivicRelativeAltitude                  OPTIONAL,",
          "444:      ...",
          "445: }",
          "447: OMA-LPPe-GeodeticRelativeAltitude ::= SEQUENCE {",
          "448:      geodetic-height-depth                INTEGER (-32768..32767),",
          "449:      geodetic-uncertainty-and-confidence OMA-LPPe-GeodeticUncertaintyAndConfidence   OPTIONAL,",
          "450:      ...",
          "451: }",
          "453: OMA-LPPe-GeodeticUncertaintyAndConfidence ::= SEQUENCE {",
          "454:      uncertainty          INTEGER (0..127),",
          "455:      confidence           INTEGER (0..99)                 OPTIONAL,",
          "456:      ...",
          "457: }",
          "459: OMA-LPPe-CivicRelativeAltitude ::= SEQUENCE {",
          "460:      civic-floors               INTEGER (-255..256),",
          "461:      civic-uncertainty-and-confidence    OMA-LPPe-CivicUncertaintyAndConfidence OPTIONAL,",
          "462:      ...",
          "463: }",
          "465: OMA-LPPe-CivicUncertaintyAndConfidence ::= SEQUENCE {",
          "466:      uncertainty           INTEGER (0..127),",
          "467:       confidence           INTEGER (0..99)                OPTIONAL,",
          "468:       ...",
          "469: }",
          "471: OMA-LPPe-Session-ID ::= SEQUENCE {",
          "472:       provider-ID                OMA-LPPe-VendorOrOperatorID,",
          "473:       server-ID                  OCTET STRING (SIZE(4)),",
          "474:       session-ID                 OCTET STRING (SIZE(4)),",
          "475:       ...",
          "476: }",
          "478: -- asn2wrs does not handle '%' in the resticted string",
          "479: --OMA-LPPe-Uri ::= VisibleString (FROM ( \"a\"..\"z\" | \"A\"..\"Z\" | \"0\"..\"9\" | \":\" | \"/\" | \"?\" | \"#\" | \"[\" |",
          "480: --\"]\" | \"@\" | \"!\" | \"$\" | \"&\" | \"'\" | \"(\" | \")\" | \"*\" | \"+\" | \",\" | \";\" | \"=\" | \"-\" | \".\" | \"_\" | \"~\" |",
          "481: --\"%\"  ))",
          "482: OMA-LPPe-Uri ::= VisibleString (FROM ( \"a\"..\"z\" | \"A\"..\"Z\" | \"0\"..\"9\" | \":\" | \"/\" | \"?\" | \"#\" | \"[\" |",
          "483: \"]\" | \"@\" | \"!\" | \"$\" | \"&\" | \"'\" | \"(\" | \")\" | \"*\" | \"+\" | \",\" | \";\" | \"=\" | \"-\" | \".\" | \"_\" | \"~\"))",
          "485: OMA-LPPe-ValidityArea ::= SEQUENCE {",
          "486:       regionSizeInv                    INTEGER (1..255),",
          "487:       areaWidth                        INTEGER (2..9180)                OPTIONAL,",
          "488:       codedLatOfNWCorner               INTEGER (0..4589),",
          "489:       codedLonOfNWCorner      INTEGER (0..9179),",
          "490:       rleList                          OMA-LPPe-RleList                 OPTIONAL,",
          "491:       ...",
          "492: }",
          "494: OMA-LPPe-RleList ::= SEQUENCE (SIZE(1..65535)) OF INTEGER (0..255)",
          "496: OMA-LPPe-ValidityPeriod ::= SEQUENCE {",
          "497:       beginTime             GNSS-SystemTime,",
          "498:       beginTimeAlt          INTEGER (0..2881)   OPTIONAL,",
          "499:       duration              INTEGER (1..2881),",
          "500:       ...",
          "501: }",
          "503: OMA-LPPe-VendorOrOperatorAssistanceDataIdentifier ::= SEQUENCE {",
          "504:       vendorOrOperatorID               OMA-LPPe-VendorOrOperatorID,",
          "505:       assistanceDataID                 OMA-LPPe-AssistanceContainerID,",
          "506:       ...",
          "507: }",
          "509: OMA-LPPe-VendorOrOperatorID ::= CHOICE {",
          "510:       standard-VendorOrOperatorID                      INTEGER(1..1024),",
          "511:       nonStandard-VendorOrOperatorID                   OMA-LPPe-NonStandard-VendorOrOperatorID,",
          "512:       ...",
          "513: }",
          "516: OMA-LPPe-NonStandard-VendorOrOperatorID ::= SEQUENCE {",
          "517:       encodedID                             INTEGER(0..65535),",
          "518:       visibleIdentification                 OMA-LPPe-CharArray  OPTIONAL,",
          "519:       ...",
          "520: }",
          "522: OMA-LPPe-WirelessAccessTypes ::= BIT STRING {   gsm                                (0),",
          "523:                                                                   utra             (1),",
          "524:                                                                   lte              (2),",
          "525:                                                                   wimax            (3),",
          "526:                                                                   wifi             (4),",
          "527:                                                                   other            (5) } (SIZE(1..16))",
          "529: OMA-LPPe-WLAN-AP-ID ::= SEQUENCE {",
          "530:      apMacAddress                    BIT STRING ( SIZE (48) ),",
          "531:      ...",
          "532: }",
          "534: OMA-LPPe-WLAN-AP-Type ::= ENUMERATED {",
          "535:      ieee802-11a,",
          "536:      ieee802-11b,",
          "537:      ieee802-11g,",
          "538:      ieee802-11n,",
          "539:      ...",
          "540: }",
          "542: OMA-LPPe-WLAN-AP-Type-List ::= BIT STRING {",
          "543:      ieee802-11a (0),",
          "544:      ieee802-11b (1),",
          "545:      ieee802-11g (2),",
          "546:      ieee802-11n (3) } (SIZE (1..16))",
          "548: OMA-LPPe-WLANFemtoCoverageArea ::= SEQUENCE {",
          "549:      truncation                 INTEGER(-127..128)                                                               OPTIONAL,",
          "550:      areaType                   ENUMERATED { gaussian, binaryDistribution, ...}                                  OPTIONAL,",
          "551:      confidence                 INTEGER (0..99),",
          "552:      componentList              SEQUENCE (SIZE (1..16)) OF OMA-LPPe-WLANFemtoCoverageAreaElement,",
          "553:      ...",
          "554: }",
          "556: OMA-LPPe-WLANFemtoCoverageAreaElement ::= SEQUENCE {",
          "557:      refPointAndArea            SEQUENCE {",
          "558:            referenceLocation   ENUMERATED  {antenna,",
          "559:                                                        referencePoint,",
          "560:                                                        ... },",
          "561:            referencePoint             OMA-LPPe-ReferencePointUniqueID                 OPTIONAL,",
          "562:            locationAndArea            OMA-LPPe-RelativeLocation,",
          "563:            ...",
          "564:            },",
          "565:      type                             ENUMERATED  {indoor (0),",
          "566:                                                        outdoor (1),",
          "567:                                                        mixed (2),",
          "568:                                                        ... }                          OPTIONAL,",
          "569:      weight                           INTEGER (0..100)                                OPTIONAL,",
          "570:      ...",
          "571: }",
          "573: OMA-LPPe-CommonIEsRequestCapabilities ::= SEQUENCE {",
          "574:      iP-Address-RequestCapabilities                             OMA-LPPe-IP-Address-RequestCapabilities                   OPTIONAL,",
          "575:      assistanceContainerSupportReq                              OMA-LPPe-AssistanceContainerSupportReq                    OPTIONAL,",
          "576:      locationInformationContainerSupportReq                     OMA-LPPe-LocationInformationContainerSupportReq",
          "577:                                                                                                                           OPTIONAL,",
          "578:      relativeLocationChange-RequestCapabilities  OMA-LPPe-RelativeLocationChange-RequestCapabilities",
          "579:                                                                                                                           OPTIONAL,",
          "580:      highAccuracyFormatCapabilitiesReq                          OMA-LPPe-HighAccuracyFormatCapabilitiesReq  OPTIONAL,",
          "581:      segmentedAssistanceData-ReqCapabilities                    OMA-LPPe-SegmentedAssistanceData-ReqCapabilities",
          "582:                                                                                                                           OPTIONAL,",
          "583:      referencePointCapabilitiesReq                              OMA-LPPe-ReferencePointCapabilitiesReq                    OPTIONAL,",
          "584:      scheduledLocation-RequestCapabilities                      OMA-LPPe-ScheduledLocation-RequestCapabilities",
          "585:                                                                                                                           OPTIONAL,",
          "586:      accessCapabilitiesReq                                      OMA-LPPe-AccessCapabilitiesReq                            OPTIONAL,",
          "587:      segmentedLocationInformation-ReqCapabilities",
          "588:                                                                 OMA-LPPe-SegmentedLocationInformation-ReqCapabilities",
          "589:                                                                                                                           OPTIONAL,",
          "590:      ...",
          "591: }",
          "593: OMA-LPPe-IP-Address-RequestCapabilities ::= SEQUENCE {",
          "594:      ...",
          "595: }",
          "597: OMA-LPPe-AssistanceContainerSupportReq ::= SEQUENCE {",
          "598:      vendorOrOperatorIDList                                     OMA-LPPe-VendorOrOperatorIDList                           OPTIONAL,",
          "599:      ...",
          "600: }",
          "602: OMA-LPPe-LocationInformationContainerSupportReq ::= SEQUENCE {",
          "603:      vendorOrOperatorIDList                                   OMA-LPPe-VendorOrOperatorIDList                          OPTIONAL,",
          "604:      ...",
          "605: }",
          "607: OMA-LPPe-VendorOrOperatorIDList ::= SEQUENCE (SIZE(1..maxVendorOrOperatorIDList)) OF",
          "608:                                                                                                   OMA-LPPe-VendorOrOperatorID",
          "610: maxVendorOrOperatorIDList   INTEGER ::= 32",
          "612: OMA-LPPe-RelativeLocationChange-RequestCapabilities ::= SEQUENCE {",
          "613:      ...",
          "614: }",
          "616: OMA-LPPe-HighAccuracyFormatCapabilitiesReq ::= SEQUENCE {",
          "617:      ...",
          "618: }",
          "619: OMA-LPPe-SegmentedAssistanceData-ReqCapabilities ::= SEQUENCE {",
          "620:      ...",
          "621: }",
          "623: OMA-LPPe-ReferencePointCapabilitiesReq ::= SEQUENCE {",
          "624:      referencePointProviderSupportListReq   SEQUENCE (SIZE (1..128)) OF",
          "625:                                                               OMA-LPPe-VendorOrOperatorID                        OPTIONAL,",
          "626:      ...",
          "627: }",
          "629: OMA-LPPe-ScheduledLocation-RequestCapabilities ::= SEQUENCE {",
          "630:      ...",
          "631: }",
          "633: OMA-LPPe-AccessCapabilitiesReq ::= SEQUENCE {",
          "634:      ...",
          "635: }",
          "637: OMA-LPPe-SegmentedLocationInformation-ReqCapabilities ::= SEQUENCE {",
          "638:      ...",
          "639: }",
          "641: OMA-LPPe-CommonIEsProvideCapabilities ::= SEQUENCE {",
          "642:       iP-Address-Capabilities                               OMA-LPPe-IP-Address-Capabilities                                  OPTIONAL,",
          "643:       assistanceContainerSupport                            OMA-LPPe-AssistanceContainerSupport                               OPTIONAL,",
          "644:       locationInformationContainerSupport                   OMA-LPPe-LocationInformationContainerSupport                      OPTIONAL,",
          "645:       relativeLocationChange-Capabilities                   OMA-LPPe-RelativeLocationChange-Capabilities                      OPTIONAL,",
          "646:       highAccuracyFormatCapabilities                        OMA-LPPe-HighAccuracyFormatCapabilities                           OPTIONAL,",
          "647:       segmentedAssistanceData-ProvideCapabs   OMA-LPPe-SegmentedAssistanceData-ProvideCapabs  OPTIONAL,",
          "648:       referencePointCapabilities                            OMA-LPPe-ReferencePointCapabilities                               OPTIONAL,",
          "649:       scheduledLocation-Capabilities                        OMA-LPPe-ScheduledLocation-Capabilities                           OPTIONAL,",
          "650:       accessCapabilities                                    OMA-LPPe-AccessCapabilities                                       OPTIONAL,",
          "651:       segmentedLocationInformation-ProvideCapabs",
          "652:                                                             OMA-LPPe-SegmentedLocationInformation-ProvideCapabs",
          "653:                                                                                                                               OPTIONAL,",
          "654:       ...",
          "655: }",
          "657: OMA-LPPe-IP-Address-Capabilities ::= SEQUENCE {",
          "658:       iP-Address-support              BIT STRING {          iPv4             (0),",
          "659:                                                             iPv6             (1),",
          "660:                                                             nat              (2) } (SIZE(1..8))               OPTIONAL,",
          "661:       ...",
          "662: }",
          "664: OMA-LPPe-AssistanceContainerSupport              ::=       SEQUENCE        (SIZE(1..maxVendorOrOperatorIDList))              OF",
          "665:                                                                OMA-LPPe-VendorOrOperatorAssistanceContainerList",
          "668: OMA-LPPe-VendorOrOperatorAssistanceContainerList ::= SEQUENCE {",
          "669:      vendorOrOperatorID                OMA-LPPe-VendorOrOperatorID,",
          "670:      assistanceContainerList           OMA-LPPe-AssistanceContainerList,",
          "671:      ...",
          "672: }",
          "674: OMA-LPPe-AssistanceContainerList ::= SEQUENCE (SIZE (1.. maxAssistanceContainerList))OF",
          "675:                                                                                        OMA-LPPe-AssistanceContainerID",
          "677: OMA-LPPe-LocationInformationContainerSupport   ::=   SEQUENCE   (SIZE(1..maxVendorOrOperatorIDList))   OF",
          "678:                                                      OMA-LPPe-VendorOrOperatorLocationInformationContainerList",
          "680: OMA-LPPe-VendorOrOperatorLocationInformationContainerList ::= SEQUENCE {",
          "681:      vendorOrOperatorID                          OMA-LPPe-VendorOrOperatorID,",
          "682:      locationInformationContainerList            OMA-LPPe-LocationInformationContainerList,",
          "683:      ...",
          "684: }",
          "686: OMA-LPPe-LocationInformationContainerList  ::=  SEQUENCE  (SIZE(1..maxLocationInformationContainerList))OF",
          "687:                                                                               OMA-LPPe-LocationInformationContainerID",
          "689: maxLocationInformationContainerList INTEGER ::= 64",
          "690: OMA-LPPe-RelativeLocationChange-Capabilities ::= SEQUENCE {",
          "691:      numberOfChanges         INTEGER (1..5)               OPTIONAL,",
          "692:      ...",
          "693: }",
          "695: OMA-LPPe-HighAccuracyFormatCapabilities ::= BIT STRING {                 hAposition(0),",
          "696:                                                                          hAvelocity(1) } (SIZE(1..8))",
          "698: OMA-LPPe-SegmentedAssistanceData-ProvideCapabs ::= SEQUENCE {",
          "699:      maxSegments        INTEGER (2..4096)            OPTIONAL,",
          "700:      maxSize            INTEGER (1..5000)            OPTIONAL,",
          "701:      minSize            INTEGER (1..5000)            OPTIONAL,",
          "702:      resume             NULL                         OPTIONAL,",
          "703:      ...",
          "704: }",
          "706: OMA-LPPe-ReferencePointCapabilities ::= SEQUENCE {",
          "707:      relativeLocationReportingSupport            BIT STRING {    geo                   (0),",
          "708:                                                                     civic              (1),",
          "709:                                                                     otherProviders  (2)  } (SIZE (1..8)),",
          "710:      referencePointProviderSupportList   SEQUENCE (SIZE (1..128)) OF",
          "711:                                                      OMA-LPPe-ReferencePointProviderSupportElement   OPTIONAL,",
          "712:      ...",
          "713: }",
          "715: OMA-LPPe-ReferencePointProviderSupportElement ::= SEQUENCE {",
          "716:      referencePointProvider                 OMA-LPPe-VendorOrOperatorID,",
          "717:      mapDataSupport                         SEQUENCE {",
          "718:                                                  mapDataFormat           OCTET STRING            OPTIONAL,",
          "719:                                                  ...",
          "720:                                                  }        OPTIONAL,",
          "721:      ...",
          "722: }",
          "724: OMA-LPPe-ScheduledLocation-Capabilities ::= SEQUENCE {",
          "725:      minimumWindow                INTEGER (1..1024)            OPTIONAL,",
          "726:      gnssTimeReference            GNSS-ID-Bitmap               OPTIONAL,",
          "727:      networkTimeReference         ENUMERATED {serving,",
          "728:                                                  servingOrNonServing,",
          "729:                                                  ... }         OPTIONAL,",
          "730:      ...",
          "731: }",
          "733: OMA-LPPe-AccessCapabilities ::= SEQUENCE {",
          "734:       accessTypeUnknown                     NULL                                         OPTIONAL,",
          "735:       fixedAccessTypes                      OMA-LPPe-FixedAccessTypes                    OPTIONAL,",
          "736:       wirelessAccessTypes                   OMA-LPPe-WirelessAccessTypes                 OPTIONAL,",
          "737:       ...",
          "738: }",
          "740: OMA-LPPe-SegmentedLocationInformation-ProvideCapabs ::= SEQUENCE {",
          "741:       maxSegments           INTEGER (2..4096)                OPTIONAL,",
          "742:       maxSize               INTEGER (1..5000)                OPTIONAL,",
          "743:       minSize               INTEGER (1..5000)                OPTIONAL,",
          "744:       resume                NULL                             OPTIONAL,",
          "745:       ...",
          "746: }",
          "748: OMA-LPPe-CommonIEsRequestAssistanceData ::= SEQUENCE  {",
          "749:       approximate-location                          EllipsoidPointWithAltitudeAndUncertaintyEllipsoid   OPTIONAL,",
          "750:       assistanceContainerRequestList  OMA-LPPe-AssistanceContainerRequestList                                                  OPTIONAL,",
          "751:       requestPeriodicADwithUpdate                   OMA-LPPe-RequestPeriodicADwithUpdate                                       OPTIONAL,",
          "752:                                                                                                   --Cond RequestPeriodicADWithUpdate",
          "753:       segmentedADpreference                         ENUMERATED {useBasic, useResume, ...}                                      OPTIONAL,",
          "754:       segmentedADResume                             OMA-LPPe-SegmentedADResume                                                 OPTIONAL,",
          "755:                                                                                          --Cond segmentedTransferResume",
          "756:      referencePointAssistanceReq               OMA-LPPe-ReferencePointAssistanceReq                                OPTIONAL,",
          "757:      ...",
          "758: }",
          "760: OMA-LPPe-RequestPeriodicADwithUpdate ::= SEQUENCE {",
          "761:      periodicAD-session-ID                     INTEGER (1..256),",
          "762:      typeOfADRequest           TypeOfADRequest,",
          "763:      ...",
          "764: }",
          "766: TypeOfADRequest ::= ENUMERATED {",
          "767:      initialRequest,",
          "768:      updateAndContinueIfUpdateFails,",
          "769:      updateAndAbortIfUpdateFails,",
          "770:      ...",
          "771: }",
          "773: OMA-LPPe-SegmentedADResume ::= SEQUENCE {",
          "774:      segmentedAD-session-ID                         OMA-LPPe-Session-ID,",
          "775:      next-segment-number             INTEGER (1..4096)",
          "776: }",
          "778: OMA-LPPe-ReferencePointAssistanceReq ::= SEQUENCE {",
          "779:      referencePointReq                    SEQUENCE (SIZE (1..16)) OF OMA-LPPe-ReferencePointAssistanceReqElement,",
          "780:      ...",
          "781: }",
          "783: OMA-LPPe-ReferencePointAssistanceReqElement ::= SEQUENCE {",
          "784:      referencePointProvider               OMA-LPPe-VendorOrOperatorID,",
          "785:      mapDataReq                           OCTET STRING                                   OPTIONAL,",
          "786:      ...",
          "787: }",
          "789: OMA-LPPe-CommonIEsProvideAssistanceData ::= SEQUENCE  {",
          "790:       assistanceContainerList                          OMA-LPPe-AssistanceContainerProvideList                     OPTIONAL,",
          "791:       providePeriodicADwithUpdate                      OMA-LPPe-ProvidePeriodicADwithUpdate                        OPTIONAL,",
          "792:                                                                                         --Cond ProvidePeriodicADWithUpdate,",
          "793:       segmentedADTransfer                              OMA-LPPe-SegmentedADTransfer                                OPTIONAL,",
          "794:                                                                                         --Cond segmentedTransferWithResume",
          "795:       default-reference-point                          OMA-LPPe-ReferencePoint                                     OPTIONAL,",
          "796:       ...",
          "797: }",
          "799: OMA-LPPe-ProvidePeriodicADwithUpdate ::= SEQUENCE {",
          "800:       periodicAD-session-ID                      INTEGER (1..256),",
          "801:       typeOfADProvide            OMA-LPPe-TypeOfADProvide,",
          "802:       ...",
          "803: }",
          "805: OMA-LPPe-TypeOfADProvide ::= ENUMERATED {",
          "806:       responseToInitialRequest,",
          "807:       providePeriodicAD,",
          "808:       responseToTargetUpdateRequest,",
          "809:       serverUpdate,",
          "810:       ...",
          "811: }",
          "813: OMA-LPPe-SegmentedADTransfer ::= SEQUENCE {",
          "814:       segmentedAD-session-ID                      OMA-LPPe-Session-ID,",
          "815:       segment-number              INTEGER (1..4096),",
          "816:       ...",
          "817: }",
          "819: OMA-LPPe-CommonIEsRequestLocationInformation ::= SEQUENCE  {",
          "820:       iP-Address-Request                                OMA-LPPe-IP-Address-Request                                              OPTIONAL,",
          "821:       locationInformationContainerRequest OMA-LPPe-LocationInformationContainerRequest                                           OPTIONAL,",
          "822:       requestPeriodicLocInfoWithUpdate                  OMA-LPPe-RequestPeriodicLocInfoWithUpdate                                OPTIONAL,",
          "823:                                                                                     --Cond RequestPeriodicLocInfoWithUpdate",
          "824:      relativeLocationChange-Request                OMA-LPPe-RelativeLocationChange-Request                           OPTIONAL,",
          "825:      localPositionRequest                          OMA-LPPe-LocalPositionRequest                                     OPTIONAL,",
          "826:      scheduledLocation-Request                     OMA-LPPe-ScheduledLocation-Request                                OPTIONAL,",
          "827:      accessTypeRequest                             OMA-LPPe-AccessTypeRequest                                        OPTIONAL,",
          "828:      segmentedLIpreference                         ENUMERATED {useBasic, useResume, ...}                             OPTIONAL,",
          "829:      segmentedLIResume                             OMA-LPPe-SegmentedLIResume                                        OPTIONAL,",
          "830:                                                                             --Cond segmentedTransferResume",
          "831:      ...",
          "832: }",
          "834: OMA-LPPe-IP-Address-Request ::= SEQUENCE {",
          "835:      ...",
          "836: }",
          "838: OMA-LPPe-RequestPeriodicLocInfoWithUpdate ::= SEQUENCE {",
          "839:      session-ID                          INTEGER (1..256),",
          "840:      typeOfLocInfoRequest                OMA-LPPe-TypeOfLocInfoRequest,",
          "841:      ...",
          "842: }",
          "844: OMA-LPPe-TypeOfLocInfoRequest ::= ENUMERATED {",
          "845:      initialRequest,",
          "846:      updateAndContinueIfUpdateFails,",
          "847:      updateAndAbortIfUpdateFails,",
          "848:      ...",
          "849: }",
          "851: OMA-LPPe-RelativeLocationChange-Request ::= SEQUENCE {",
          "852:      numberOfChanges          INTEGER (1..5)                 OPTIONAL,",
          "853:      ...",
          "854: }",
          "856: OMA-LPPe-LocalPositionRequest ::= SEQUENCE {",
          "857:      typeOfRequest                            ENUMERATED { localOptional, localMandatory, localOnly, ... },",
          "858:      referencePointReq                        SEQUENCE (SIZE (1..8)) OF",
          "859:                                                         OMA-LPPe-ReferencePointUniqueID                   OPTIONAL,",
          "860:      ...",
          "861: }",
          "863: OMA-LPPe-ScheduledLocation-Request ::= SEQUENCE {",
          "864:      gnssTime                 GNSS-SystemTime                OPTIONAL,           --Cond AtLeastOne",
          "865:      networkTime              NetworkTime                    OPTIONAL,           --Cond AtLeastOne",
          "866:      relativeTime             INTEGER (1..1024)              OPTIONAL,           --Cond AtLeastOne",
          "867:      windowSize               INTEGER (1..1024)              OPTIONAL,",
          "868:      ...",
          "869: }",
          "871: OMA-LPPe-AccessTypeRequest ::= SEQUENCE {",
          "872:      ...",
          "873: }",
          "875: OMA-LPPe-SegmentedLIResume ::= SEQUENCE {",
          "876:      segmentedLI-session-ID              INTEGER (1..256),",
          "877:      next-segment-number                 INTEGER (1..4096)}",
          "879: OMA-LPPe-CommonIEsProvideLocationInformation ::= SEQUENCE {",
          "880:      highAccuracy3Dposition                         OMA-LPPe-HighAccuracy3Dposition                           OPTIONAL,",
          "881:                                                                                     --Cond HighAccuracy",
          "882:      localPosition                                  OMA-LPPe-LocalPosition                                    OPTIONAL,",
          "883:      highAccuracy3Dvelocity                         OMA-LPPe-HighAccuracy3Dvelocity                           OPTIONAL,",
          "884:                                                                                     --Cond HighAccuracy",
          "885:      iP-Address-List                                OMA-LPPe-IP-Address-List                                  OPTIONAL,",
          "886:      locationInformationContainer                   OMA-LPPe-LocationInformationContainer                     OPTIONAL,",
          "887:      providePeriodicLocInfoWithUpdate               OMA-LPPe-ProvidePeriodicLocInfowithUpdate   OPTIONAL,",
          "888:                                                                                      --Cond ProvidePeriodicLocInfoWithUpdate",
          "889:      relativeLocationChangeList                     OMA-LPPe-RelativeLocationChangeList                       OPTIONAL,",
          "890:      scheduledLocation                              OMA-LPPe-ScheduledLocation                                OPTIONAL,",
          "891:                                                                                     --Cond ScheduledLocationRequested",
          "892:      accessTypes                                    OMA-LPPe-AccessTypes                                      OPTIONAL,",
          "893:      segmentedLITransfer                            OMA-LPPe-SegmentedLITransfer                              OPTIONAL,",
          "894:                                                                                     --Cond segmentedTransferWithResume",
          "895:      locationInformationTimeStamp                   OMA-LPPe-TimeStamp                                        OPTIONAL,",
          "896:      ...",
          "897: }",
          "899: OMA-LPPe-LocalPosition ::= SEQUENCE {",
          "900:      referencePoint                       OMA-LPPe-ReferencePointUniqueID,",
          "901:      subjectLocation                      OMA-LPPe-RelativeLocation                                      OPTIONAL,",
          "902:      ...",
          "903: }",
          "905: OMA-LPPe-IP-Address-List ::= SEQUENCE (SIZE (1..maxIPAddress)) OF OMA-LPPe-IP-Address",
          "907: maxIPAddress INTEGER ::= 5",
          "909: OMA-LPPe-IP-Address ::= SEQUENCE {",
          "910:      local-IP-Address          CHOICE  {",
          "911:           iPv4       BIT STRING (SIZE(32)),",
          "912:           iPv6       BIT STRING (SIZE(128)),",
          "913:           ...",
          "914:           },",
          "915:      bearer          OMA-LPPe-Bearer,",
          "916:      nat             BOOLEAN                   OPTIONAL,",
          "917:      ...",
          "918: }",
          "920: OMA-LPPe-Bearer ::= ENUMERATED {",
          "921:      unknown,",
          "922:      gsm,",
          "923:      utran,",
          "924:      lte,",
          "925:      wlan,",
          "926:      wimax,",
          "927:      dsl,",
          "928:      pktcable,",
          "929:      other,",
          "930:      ...",
          "931: }",
          "933: OMA-LPPe-ProvidePeriodicLocInfowithUpdate ::= SEQUENCE {",
          "934:      session-ID                        INTEGER (1..256),",
          "935:      typeOfLocInfoProvide              OMA-LPPe-TypeOfLocInfoProvide,",
          "936:      ...",
          "937: }",
          "939: OMA-LPPe-TypeOfLocInfoProvide ::= ENUMERATED {",
          "940:      responseToInitialRequest,",
          "941:      providePeriodicLocInfo,",
          "942:      responseToServerUpdateRequest,",
          "943:      targetUpdate,",
          "944:      ...",
          "945: }",
          "947: OMA-LPPe-RelativeLocationChangeList ::= SEQUENCE (SIZE (1..maxRelativeLocation)) OF",
          "948:                                                                                        OMA-LPPe-RelativeLocationChange",
          "950: OMA-LPPe-RelativeLocationChange ::= SEQUENCE {",
          "951:      relativeTime                      INTEGER (0..65535)           OPTIONAL,",
          "952:      transactionID                     INTEGER (0..255)             OPTIONAL,",
          "953:      relativeLocation                  OMA-LPPe-RelativeLocation,",
          "954:      ...",
          "955: }",
          "957: maxRelativeLocation          INTEGER ::= 5",
          "959: OMA-LPPe-ScheduledLocation ::= SEQUENCE {",
          "960:      disposition        ENUMERATED {withinWindow,",
          "961:                                        outsideWindowOrNoWindow,",
          "962:                                        notSupportedDueToNoCapability,",
          "963:                                        notSupportedDueToNoTimeReference,",
          "964:                                        notSupportedDueToConflictWithAnotherRequest,",
          "965:                                        notSupportedForOtherReasons,",
          "966:                                        ... },",
          "967:      actualWindow       SEQUENCE {",
          "968:           start         INTEGER (-512..511),",
          "969:           duration      INTEGER (0..2047)",
          "970:      }                                               OPTIONAL,",
          "971:      ...",
          "972: }",
          "974: OMA-LPPe-AccessTypes ::= SEQUENCE {",
          "975:      accessTypeUnknown                 NULL                                   OPTIONAL,",
          "976:      fixedAccessTypes                  OMA-LPPe-FixedAccessTypes              OPTIONAL,",
          "977:      wirelessAccessTypes               OMA-LPPe-WirelessAccessTypes           OPTIONAL,",
          "978:      ...",
          "979: }",
          "981: OMA-LPPe-SegmentedLITransfer ::= SEQUENCE {",
          "982:      segmentedLI-session-ID                 INTEGER (1..256),",
          "983:      segment-number          INTEGER (1..4096),",
          "984:      ...",
          "985: }",
          "987: OMA-LPPe-TimeStamp ::= CHOICE {",
          "988:      gnssTime                GNSS-SystemTime,",
          "989:      networkTime             NetworkTime,",
          "990:      relativeTime            INTEGER (0..1024),",
          "991:      ...",
          "992: }",
          "994: OMA-LPPe-CommonIEsAbort ::= SEQUENCE {",
          "995:       abortCause ENUMERATED   {periodicADsessionStop,",
          "996:                                    periodicADprocedureNotSupported,",
          "997:                                    periodicADprocedureNotAccepted,",
          "998:                                    periodicLocInfoSessionStop,",
          "999:                                    periodicLocInfoProcedureNotSupported,",
          "1000:                                    periodicLocInfoProcedureNotAccepted,",
          "1001:                                    ...",
          "1002:                                    }                                                        OPTIONAL,",
          "1003:       periodicSessionIDtoAbort                INTEGER (1..256)                              OPTIONAL,   --Cond periodicWithUpdate",
          "1004:       ...",
          "1005: }",
          "1007: OMA-LPPe-CommonIEsError ::= SEQUENCE {",
          "1008:      ...",
          "1009: }",
          "1011: OMA-LPPe-AGNSS-ProvideAssistanceData ::= SEQUENCE {",
          "1012:      commonAssistData                OMA-LPPe-AGNSS-CommonAssistData                      OPTIONAL,",
          "1013:      genericAssistData               OMA-LPPe-AGNSS-GenericAssistData                     OPTIONAL,",
          "1014:      error                           OMA-LPPe-AGNSS-Error                                 OPTIONAL,",
          "1015:      ...",
          "1016: }",
          "1018: OMA-LPPe-AGNSS-CommonAssistData::= SEQUENCE {",
          "1019:      ionosphericModel                     OMA-LPPe-AGNSS-IonosphericModel                       OPTIONAL,",
          "1020:      troposphereModel                     OMA-LPPe-AGNSS-TroposphereModel                      OPTIONAL,",
          "1021:      altitudeAssistance                   OMA-LPPe-AGNSS-AltitudeAssistanceList   OPTIONAL,",
          "1022:      solarRadiation                       OMA-LPPe-AGNSS-SolarRadiation                         OPTIONAL,",
          "1023:      ccpAssistCommonProvide               OMA-LPPe-AGNSS-CCPassistCommonProvide   OPTIONAL,",
          "1024:      ...",
          "1025: }",
          "1027: OMA-LPPe-AGNSS-GenericAssistData ::= SEQUENCE (SIZE (1..16)) OF OMA-LPPe-AGNSS-GenericAssistDataElement",
          "1029: OMA-LPPe-AGNSS-GenericAssistDataElement ::= SEQUENCE {",
          "1030:       gnss-ID                                    GNSS-ID,",
          "1031:       wideAreaIonoSurfacePerSVlist               OMA-LPPe-AGNSS-WideAreaIonoSurfacePerSVlist OPTIONAL,",
          "1032:       mechanicsForAllSVs                         OMA-LPPe-AGNSS-MechanicsForAllSVs                            OPTIONAL,",
          "1033:       dcbsForAllSVs                              OMA-LPPe-AGNSS-DCBsForAllSVs                                 OPTIONAL,",
          "1034:       navModelDegradationModel                   OMA-LPPe-AGNSS-NavModelDegradationModelList OPTIONAL,",
          "1035:       ccpAssistProvide                           OMA-LPPe-AGNSS-CCPassistGenericProvide                       OPTIONAL, --Cond CCP",
          "1036:       navModelList                               OMA-LPPe-AGNSS-NavModelList                            OPTIONAL,",
          "1037:       ...",
          "1038: }",
          "1040: OMA-LPPe-AGNSS-IonosphericModel ::= CHOICE {",
          "1041:       staticModels         SEQUENCE {",
          "1042:                                  localKlobucharModelList OMA-LPPe-AGNSS-LocalKlobucharModelList      OPTIONAL,",
          "1043:                                  ionoStormIndication              OMA-LPPe-AGNSS-IonoStormIndication                           OPTIONAL,",
          "1044:                                  ...",
          "1045:                                  },",
          "1046:       waIono               CHOICE {",
          "1047:                                  controlParameters   OMA-LPPe-AGNSS-WideAreaIonoSurfaceControlParametersProvide,",
          "1048:                                 commonProvide              OMA-LPPe-AGNSS-WideAreaIonoSurfaceCommon,",
          "1049:                                 ...",
          "1050:                                 },",
          "1051:      ...",
          "1052: }",
          "1054: OMA-LPPe-AGNSS-LocalKlobucharModelList ::= SEQUENCE (SIZE(1..16)) OF",
          "1055:                                                                  OMA-LPPe-AGNSS-LocalKlobucharModelElement",
          "1057: OMA-LPPe-AGNSS-LocalKlobucharModelElement ::= SEQUENCE {",
          "1058:      validityArea          OMA-LPPe-ValidityArea,",
          "1059:      klobucharModel  SEQUENCE (SIZE(1..8)) OF OMA-LPPe-AGNSS-LocalKlobucharModel,",
          "1060:      ...",
          "1061: }",
          "1063: OMA-LPPe-AGNSS-LocalKlobucharModel ::= SEQUENCE {",
          "1064:      validityPeriod  OMA-LPPe-ValidityPeriod,",
          "1065:      alfa0                 INTEGER (-128..127),",
          "1066:      alfa1                 INTEGER (-128..127),",
          "1067:      alfa2                 INTEGER (-128..127),",
          "1068:      alfa3                 INTEGER (-128..127),",
          "1069:      beta0                 INTEGER (-128..127),",
          "1070:      beta1                 INTEGER (-128..127),",
          "1071:      beta2                 INTEGER (-128..127),",
          "1072:      beta3                 INTEGER (-128..127),",
          "1073:      ...",
          "1074: }",
          "1076: OMA-LPPe-AGNSS-IonoStormIndication ::= SEQUENCE {",
          "1077:       area             OMA-LPPe-ValidityArea,",
          "1078:                                               --rleList shall not be included and is replaced by the stormList below",
          "1079:       stormList   OMA-LPPe-AGNSS-StormList,",
          "1080:       ...",
          "1081: }",
          "1083: OMA-LPPe-AGNSS-StormList ::= SEQUENCE (SIZE(1..16)) OF OMA-LPPe-AGNSS-StormElement",
          "1085: OMA-LPPe-AGNSS-StormElement ::= SEQUENCE {",
          "1086:       validityPeriod                               OMA-LPPe-ValidityPeriod,",
          "1087:       rleListIono                                  OMA-LPPe-AGNSS-RleListIono,",
          "1088:       ...",
          "1089: }",
          "1091: OMA-LPPe-AGNSS-RleListIono ::= SEQUENCE (SIZE(1..65535)) OF OMA-LPPe-AGNSS-RleIonoElement",
          "1093: OMA-LPPe-AGNSS-RleIonoElement ::= SEQUENCE {",
          "1094:       regionCount           INTEGER (0..255),",
          "1095:       ionoIndex             CHOICE {",
          "1096:                                        noaaScales            OMA-LPPe-AGNSS-NoaaScales,",
          "1097:                                        ...",
          "1098:                                        },",
          "1099:       ...",
          "1100: }",
          "1102: OMA-LPPe-AGNSS-NoaaScales ::=   ENUMERATED{ g1,g2, g3, g4, g5, unknown, none, ... }",
          "1104: OMA-LPPe-AGNSS-WideAreaIonoSurfaceControlParametersProvide ::= SEQUENCE {",
          "1105:       duration                         OMA-LPPe-Duration                OPTIONAL,   --Cond FirstOrDurModify",
          "1106:       rate                             INTEGER(1..64)                   OPTIONAL,   --Cond FirstOrRateModify",
          "1107:       referencePosition                Ellipsoid-Point                  OPTIONAL,   --Cond FirstOrPosModify",
          "1108:       validityArea                     OMA-LPPe-ValidityArea   OPTIONAL,   --Cond FirstOrAreaModify",
          "1109:       ...",
          "1110:  }",
          "1112: OMA-LPPe-AGNSS-WideAreaIonoSurfaceCommon ::= SEQUENCE {",
          "1113:       validityPeriod                                 OMA-LPPe-ValidityPeriod,",
          "1114:       ...",
          "1115:  }",
          "1117: OMA-LPPe-AGNSS-WideAreaIonoSurfacePerSVlist ::=",
          "1118:                                          SEQUENCE (SIZE (1..64)) OF OMA-LPPe-AGNSS-WideAreaIonoSurfacePerSVelement",
          "1120: OMA-LPPe-AGNSS-WideAreaIonoSurfacePerSVelement ::= SEQUENCE {",
          "1121:       svID       SV-ID,",
          "1122:       a0         INTEGER (0..8191),",
          "1123:       e1         INTEGER (-4096..4095),",
          "1124:       n1         INTEGER (-4096..4095),",
          "1125:       e2         INTEGER (-4096..4095) OPTIONAL, --Cond SecondOrder",
          "1126:       n2         INTEGER (-4096..4095) OPTIONAL, --Cond SecondOrder",
          "1127:       en         INTEGER (-4096..4095) OPTIONAL, --Cond SecondOrder",
          "1128:       ...",
          "1129: }",
          "1131: OMA-LPPe-AGNSS-TroposphereModel ::= SEQUENCE {",
          "1132:      troposphereDelayList                       OMA-LPPe-AGNSS-LocalTroposphereDelayList                         OPTIONAL,",
          "1133:      surfaceParametersList                      OMA-LPPe-AGNSS-LocalSurfaceParametersList                        OPTIONAL,",
          "1134:      ...",
          "1135: }",
          "1137: OMA-LPPe-AGNSS-LocalTroposphereDelayList ::= SEQUENCE (SIZE(1..8)) OF",
          "1138:                                                                            OMA-LPPe-AGNSS-LocalTroposphereDelayAreaElement",
          "1140: OMA-LPPe-AGNSS-LocalTroposphereDelayAreaElement ::= SEQUENCE {",
          "1141:      validityArea                          OMA-LPPe-ValidityArea,",
          "1142:      refAltitude                           INTEGER (-1000..8192)   OPTIONAL,",
          "1143:      gradientReferencePosition   Ellipsoid-Point                           OPTIONAL,",
          "1144:      delayList                             SEQUENCE (SIZE(1..8)) OF",
          "1145:                                                       OMA-LPPe-AGNSS-LocalTroposphereDelayTimeElement,",
          "1146:      ...",
          "1147: }",
          "1150: OMA-LPPe-AGNSS-LocalTroposphereDelayTimeElement ::= SEQUENCE {",
          "1151:      validityPeriod                        OMA-LPPe-ValidityPeriod,",
          "1152:      zh0                                   INTEGER (0..4095),",
          "1153:      eh                                    INTEGER (0..4095)               OPTIONAL,",
          "1154:      zw0                                   INTEGER (0..4095)               OPTIONAL,",
          "1155:      ew                                    INTEGER (0..4095)               OPTIONAL,",
          "1156:      gN                                    INTEGER (-8192..8191)   OPTIONAL,",
          "1157:       gE                                      INTEGER (-8192..8191)   OPTIONAL,",
          "1158:       mappingFunctionParameters   OMA-LPPe-AGNSS-MappingFunctionParameters,",
          "1159:       ...",
          "1160: }",
          "1162: OMA-LPPe-AGNSS-LocalSurfaceParametersList ::= SEQUENCE (SIZE(1..8)) OF",
          "1163:                                                                                 OMA-LPPe-AGNSS-LocalSurfaceParametersAreaElement",
          "1165: OMA-LPPe-AGNSS-LocalSurfaceParametersAreaElement ::= SEQUENCE {",
          "1166:      validityArea                           OMA-LPPe-ValidityArea,",
          "1167:      refAltitude                            INTEGER (-1000..8192)   OPTIONAL,",
          "1168:      gradientReferencePosition   Ellipsoid-Point                            OPTIONAL,",
          "1169:      parameterList                          SEQUENCE (SIZE(1..8)) OF",
          "1170:                                                       OMA-LPPe-AGNSS-LocalSurfaceParametersTimeElement,",
          "1171:      ...",
          "1172: }",
          "1174: OMA-LPPe-AGNSS-LocalSurfaceParametersTimeElement ::= SEQUENCE {",
          "1175:      validityPeriod                         OMA-LPPe-ValidityPeriod,",
          "1176:      pressure                               INTEGER (-1024..1023),",
          "1177:      pressureRate                           INTEGER (-128..127),",
          "1178:      gN-pressure                            INTEGER (-128..127)             OPTIONAL,",
          "1179:      gE-pressure                            INTEGER (-128..127)             OPTIONAL,",
          "1180:      temperature                            INTEGER (-64..63)               OPTIONAL,",
          "1181:      temperatureRate                        INTEGER (-16..16)               OPTIONAL,",
          "1182:      gN-temperature                         INTEGER (-8..7)                 OPTIONAL,",
          "1183:      gE-temperature                         INTEGER (-8..7)                 OPTIONAL,",
          "1184:      mappingFunctionParameters   OMA-LPPe-AGNSS-MappingFunctionParameters,",
          "1185:      ...",
          "1186: }",
          "1187:   OMA-LPPe-AGNSS-MappingFunctionParameters ::= SEQUENCE {",
          "1188:       ah                                      INTEGER (0..16383),",
          "1189:       bh                                      INTEGER (0..16383)                 OPTIONAL,",
          "1190:       ch                                      INTEGER (0..16383)                 OPTIONAL,",
          "1191:       aw                                      INTEGER (0..16383)                 OPTIONAL,",
          "1192:       bw                                      INTEGER (0..16383)                 OPTIONAL,",
          "1193:       cw                                      INTEGER (0..16383)                 OPTIONAL,",
          "1194:       ...",
          "1195:  }",
          "1197: OMA-LPPe-AGNSS-AltitudeAssistanceList ::= SEQUENCE  (SIZE(1..8)) OF",
          "1198:                                                                              OMA-LPPe-AGNSS-AltitudeAssistanceAreaElement",
          "1200: OMA-LPPe-AGNSS-AltitudeAssistanceAreaElement ::= SEQUENCE {",
          "1201:       validityArea                          OMA-LPPe-ValidityArea,",
          "1202:       gradientReferencePosition   EllipsoidPointWithAltitudeAndUncertaintyEllipsoid   OPTIONAL,",
          "1203:       refAltitude                           INTEGER (-1000..8192)                                                   OPTIONAL,",
          "1204:       pressureAssistanceList                SEQUENCE (SIZE(1..16)) OF OMA-LPPe-AGNSS-PressureAssistanceElement,",
          "1205:       ...",
          "1206: }",
          "1208: OMA-LPPe-AGNSS-PressureAssistanceElement ::= SEQUENCE{",
          "1209:       validityPeriod                        OMA-LPPe-ValidityPeriod,",
          "1210:       pressure                              INTEGER (-1024..1023),",
          "1211:       pressureRate                          INTEGER (-128..127)              OPTIONAL,",
          "1212:       gN                                    INTEGER (-128..127)              OPTIONAL,",
          "1213:       gE                                    INTEGER (-128..127)              OPTIONAL,",
          "1214:       ...",
          "1215: }",
          "1217: OMA-LPPe-AGNSS-SolarRadiation ::= SEQUENCE {",
          "1218:      solarRadiation                       INTEGER(1000..2000),",
          "1219:      ...",
          "1220: }",
          "1222: OMA-LPPe-AGNSS-MechanicsForAllSVs::= SEQUENCE (SIZE (1..64)) OF OMA-LPPe-AGNSS-MechanicsElement",
          "1225: OMA-LPPe-AGNSS-MechanicsElement ::= SEQUENCE {",
          "1226:      svid                                 SV-ID,",
          "1227:      mass                                 INTEGER(1..4095)                    OPTIONAL,",
          "1228:      effectiveReflectivityArea   INTEGER(1..511)                              OPTIONAL,",
          "1229:      pco                                  OMA-LPPe-AGNSS-PCOelement   OPTIONAL,",
          "1230:      svInfo                               SEQUENCE {",
          "1231:                                                svType          OMA-LPPe-AGNSS-SVtype,",
          "1232:                                                svNumber        INTEGER(0..1000),",
          "1233:                                                ...",
          "1234:                                                } OPTIONAL,",
          "1235:      ...",
          "1236: }",
          "1238: OMA-LPPe-AGNSS-PCOelement ::= SEQUENCE{",
          "1239:      xOffsetSBF                           INTEGER(-30000..30000),",
          "1240:      yOffsetSBF                           INTEGER(-30000..30000),",
          "1241:      zOffsetSBF                           INTEGER(-30000..30000),",
          "1242:      ...",
          "1243: }",
          "1245: OMA-LPPe-AGNSS-SVtype ::= ENUMERATED {",
          "1246:                                                gpsIIR, gpsIIRM, gpsIIF, gpsIII,",
          "1247:                                                glonassM, glonassK1, glonassK2, glonassKM,",
          "1248:                                                unknown,",
          "1249:                                                ...}",
          "1251: OMA-LPPe-AGNSS-DCBsForAllSVs ::= SEQUENCE (SIZE(1..64)) OF OMA-LPPe-AGNSS-DCBlistElement",
          "1254: OMA-LPPe-AGNSS-DCBlistElement ::= SEQUENCE {",
          "1255:      svid                  SV-ID,",
          "1256:      reference             SEQUENCE{",
          "1257:                                 signal  GNSS-SignalID,",
          "1258:                                 pd         ENUMERATED { pilot, data, notapplicable,  ... },",
          "1259:                                 ...",
          "1260:                                 },",
          "1261:      dcbList               OMA-LPPe-AGNSS-DCBlist,",
          "1262:      ...",
          "1263: }",
          "1265: OMA-LPPe-AGNSS-DCBlist ::= SEQUENCE (SIZE(1..16)) OF OMA-LPPe-AGNSS-DCBelement",
          "1267: OMA-LPPe-AGNSS-DCBelement ::= SEQUENCE {",
          "1268:      signal                           GNSS-SignalID,",
          "1269:      pd                               ENUMERATED{ pilot, data, notapplicable, ... },",
          "1270:      dcb                              INTEGER (-4096..4095),",
          "1271:      ...",
          "1272: }",
          "1274: OMA-LPPe-AGNSS-NavModelDegradationModelList ::= SEQUENCE (SIZE(1..64)) OF",
          "1275:                                                                              OMA-LPPe-AGNSS-NavModelDegradationModelElement",
          "1277: OMA-LPPe-AGNSS-NavModelDegradationModelElement ::= SEQUENCE {",
          "1278:       svid                                       SV-ID,",
          "1279:       clockDegradationModel                      OMA-LPPe-AGNSS-ClockModelDegradationModel,",
          "1280:       orbitDegradationModel                      OMA-LPPe-AGNSS-OrbitModelDegradationModel,",
          "1281:       ...",
          "1282:  }",
          "1284: OMA-LPPe-AGNSS-ClockModelDegradationModel ::= SEQUENCE {",
          "1285:       clockRMS0                                  INTEGER(0..31),",
          "1286:       clockRMS1                                  INTEGER(0..7)                          OPTIONAL,",
          "1287:       ...",
          "1288:  }",
          "1290: OMA-LPPe-AGNSS-OrbitModelDegradationModel ::= SEQUENCE {",
          "1291:       orbitRMS0                                  INTEGER(0..31),",
          "1292:       orbitRMS1                                  INTEGER(0..7)                          OPTIONAL,",
          "1293:       ...",
          "1294:  }",
          "1296: OMA-LPPe-AGNSS-CCPassistCommonProvide ::= CHOICE {",
          "1297:      ccpProvideCommonParameters                  OMA-LPPe-AGNSS-CCPprovideCommonParameters,",
          "1298:      ccpProvideControlParameters                 OMA-LPPe-AGNSS-CCPprovideControlParameters,",
          "1299:      ...",
          "1300: }",
          "1302: OMA-LPPe-AGNSS-CCPprovideCommonParameters ::= SEQUENCE {",
          "1303:      ccpReferenceTime                            GNSS-SystemTime,",
          "1304:      ...",
          "1305: }",
          "1307: OMA-LPPe-AGNSS-CCPprovideControlParameters ::= SEQUENCE {",
          "1308:      ccpSupportArea                   OMA-LPPe-AGNSS-CCPsupportArea                          OPTIONAL,",
          "1309:      ccpNeighborList                  OMA-LPPe-AGNSS-CCPreferenceStationList  OPTIONAL,",
          "1310:      duration                         OMA-LPPe-Duration                                      OPTIONAL, --Cond FirstOrDurModify",
          "1311:      rate                             INTEGER(1..64)                                         OPTIONAL, --Cond FirstOrRateModify",
          "1312:      ccpReferenceStationList OMA-LPPe-AGNSS-CCPreferenceStationList  OPTIONAL, --Cond FirstOrRefModify",
          "1313:      ...",
          "1314: }",
          "1316: OMA-LPPe-AGNSS-CCPsupportArea ::= SEQUENCE {",
          "1317:       areaDescription             OMA-LPPe-ValidityArea,",
          "1318:       signalSupport               SEQUENCE (SIZE(1..8)) OF OMA-LPPe-AGNSS-CCPsignalSupport,",
          "1319:       ...",
          "1320:  }",
          "1322: OMA-LPPe-AGNSS-CCPsignalSupport ::= SEQUENCE {",
          "1323:       gnss             GNSS-ID,",
          "1324:       signals          GNSS-SignalIDs,",
          "1325:       ...",
          "1326:  }",
          "1328: OMA-LPPe-AGNSS-CCPreferenceStationList ::= SEQUENCE (SIZE(0..maxReferenceStations)) OF",
          "1329:                                                                                 OMA-LPPe-AGNSS-CCPreferenceStationElement",
          "1331: OMA-LPPe-AGNSS-CCPreferenceStationElement ::= SEQUENCE {",
          "1332:      referenceStationID                   OMA-LPPe-AGNSS-CCPreferenceStationID,",
          "1333:      referenceStationLocation             OMA-LPPe-HighAccuracy3Dposition,",
          "1334:      antennaDescription                   OMA-LPPe-AGNSS-AntennaDescription                     OPTIONAL, --Cond IfPhysical",
          "1335:      ...",
          "1336: }",
          "1338: OMA-LPPe-AGNSS-CCPassistGenericProvide ::= SEQUENCE (SIZE(1..maxReferenceStations)) OF",
          "1339:                                                                           OMA-LPPe-AGNSS-CCPassistGenericProvideElement",
          "1341: OMA-LPPe-AGNSS-CCPassistGenericProvideElement::= SEQUENCE {",
          "1342:      referenceStationID  OMA-LPPe-AGNSS-CCPreferenceStationID,",
          "1343:      ccpPerSignalList           SEQUENCE (SIZE(1..8)) OF OMA-LPPe-AGNSS-CCPperSignalElement,",
          "1344:      ...",
          "1345: }",
          "1347: OMA-LPPe-AGNSS-CCPperSignalElement ::= SEQUENCE {",
          "1348:      signal-ID             GNSS-SignalID,",
          "1349:      ccpPerSVlist          SEQUENCE (SIZE(1..64)) OF OMA-LPPe-AGNSS-CCPperSVelement,",
          "1350:      ...",
          "1351: }",
          "1353: OMA-LPPe-AGNSS-CCPperSVelement::= SEQUENCE {",
          "1354:      svID                       SV-ID,",
          "1355:      integerCodePhase    INTEGER(0..255)                                  OPTIONAL, --Cond IfAvailable",
          "1356:      codePhase                  INTEGER(0.. 14989622),",
          "1357:      codePhaseError             OMA-LPPe-AGNSS-CodePhaseError   OPTIONAL, --Cond IfAvailable",
          "1358:      phaseRangeDelta            INTEGER(-524288.. 524287),",
          "1359:      phaseRangeRMSerror  INTEGER(0..127)                                  OPTIONAL, --Cond IfAvailable",
          "1360:      lockIndicator              BOOLEAN,",
          "1361:      ...",
          "1362: }",
          "1364: OMA-LPPe-AGNSS-CodePhaseError ::= CHOICE {",
          "1365:       codePhaseRMSError   INTEGER(0..63),",
          "1366:       cnr                          INTEGER(0..255),",
          "1367:       ...",
          "1368:  }",
          "1370: OMA-LPPe-AGNSS-NavModelList ::= SEQUENCE {",
          "1371:       coordinateBased              OMA-LPPe-AGNSS-NavModel-CoordinateBased OPTIONAL, --Cond ModelId-1",
          "1372:       ...",
          "1373: }",
          "1375: OMA-LPPe-AGNSS-NavModel-CoordinateBased ::= SEQUENCE {",
          "1376:      fixedInterval   SEQUENCE {",
          "1377:                                beginTime   GNSS-SystemTime,",
          "1378:                                interval       INTEGER(1..30),",
          "1379:                                ...",
          "1380:                                } OPTIONAL, --Cond FixedInterval",
          "1381:      bases                SEQUENCE {",
          "1382:                                baseForPosVel   INTEGER(-100000000..100000000)                     OPTIONAL,",
          "1383:                                baseForCcRate   OMA-LPPe-AGNSS-NavModel-BigNumber   OPTIONAL,",
          "1384:                                ...",
          "1385:                                }   OPTIONAL, --Cond DefaultsNotApplicable",
          "1386:      referencedTo         ENUMERATED { centerOfMass, antennaPhaseCenter, ... },",
          "1387:      pointList            SEQUENCE (SIZE (1..97)) OF OMA-LPPe-AGNSS-NavModel-CoordinateBasedElement,",
          "1388:      ...",
          "1389: }",
          "1391: OMA-LPPe-AGNSS-NavModel-CoordinateBasedElement::= SEQUENCE {",
          "1392:      time-of-record  GNSS-SystemTime               OPTIONAL, --Cond NoFixedInterval",
          "1393:      svIdList             SEQUENCE (SIZE (1..64)) OF OMA-LPPe-AGNSS-NavModel-PVTelement,",
          "1394:      ...",
          "1395: }",
          "1397: OMA-LPPe-AGNSS-NavModel-PVTelement ::= SEQUENCE {",
          "1398:      svID                      SV-ID,",
          "1399:      svClockOffset             OMA-LPPe-AGNSS-NavModel-BigNumber,",
          "1400:      ecefPositionX             OMA-LPPe-AGNSS-NavModel-BigNumber,",
          "1401:      ecefPositionY             OMA-LPPe-AGNSS-NavModel-BigNumber,",
          "1402:      ecefPositionZ             OMA-LPPe-AGNSS-NavModel-BigNumber,",
          "1403:      clockPosSTD               OMA-LPPe-AGNSS-NavModel-STDmatrix,",
          "1404:      rateRecord                SEQUENCE {",
          "1405:                                          svClockRate               OMA-LPPe-AGNSS-NavModel-BigNumber,",
          "1406:                                          ecefVelocityX             OMA-LPPe-AGNSS-NavModel-BigNumber,",
          "1407:                                          ecefVelocityY             OMA-LPPe-AGNSS-NavModel-BigNumber,",
          "1408:                                          ecefVelocityZ             OMA-LPPe-AGNSS-NavModel-BigNumber,",
          "1409:                                          clockRateVelSTD           OMA-LPPe-AGNSS-NavModel-STDmatrix,",
          "1410:                                          ...",
          "1411:                                          } OPTIONAL, --Cond RateAvailable",
          "1412:      ...",
          "1413: }",
          "1415: OMA-LPPe-AGNSS-NavModel-BigNumber::= SEQUENCE {",
          "1416:      msb       INTEGER(-1000000000..1000000000),",
          "1417:      lsb       INTEGER(1..100)                                OPTIONAL,",
          "1418:      ...",
          "1419: }",
          "1421: OMA-LPPe-AGNSS-NavModel-STDmatrix ::= SEQUENCE {",
          "1422:       e11        INTEGER(0..1000),",
          "1423:       e22        INTEGER(0..1000),",
          "1424:       e33        INTEGER(0..1000),",
          "1425:       e44        INTEGER(0..1000000),",
          "1426:       e12        INTEGER(0..10000000)    OPTIONAL, --Cond CrossTermAvailable",
          "1427:       e13        INTEGER(0..10000000)             OPTIONAL, --Cond CrossTermAvailable",
          "1428:       e14        INTEGER(0..10000000)             OPTIONAL, --Cond CrossTermAvailable",
          "1429:       e23        INTEGER(0..10000000)             OPTIONAL, --Cond CrossTermAvailable",
          "1430:       e24        INTEGER(0..10000000)             OPTIONAL, --Cond CrossTermAvailable",
          "1431:       e34        INTEGER(0..10000000)             OPTIONAL, --Cond CrossTermAvailable",
          "1432:       ...",
          "1433: }",
          "1435: OMA-LPPe-AGNSS-RequestAssistanceData ::= SEQUENCE {",
          "1436:       commonAssistDataReq                 OMA-LPPe-AGNSS-CommonAssistanceDataReq                            OPTIONAL,",
          "1437:      genericAssistDataReq            OMA-LPPe-AGNSS-GenericAssistanceDataReq                    OPTIONAL,",
          "1438:      ...",
          "1439: }",
          "1441: OMA-LPPe-AGNSS-CommonAssistanceDataReq ::= SEQUENCE {",
          "1442:      ionosphericModelReq                        OMA-LPPe-AGNSS-IonosphericModelReq                         OPTIONAL,",
          "1443:      troposphereModelReq                        OMA-LPPe-AGNSS-TroposphereModelReq                         OPTIONAL,",
          "1444:      altitudeAssistanceReq                      OMA-LPPe-AGNSS-AltitudeAssistanceReq                       OPTIONAL,",
          "1445:      solarRadiationRequest                      OMA-LPPe-AGNSS-SolarRadiationReq                           OPTIONAL,",
          "1446:      ccpRequestControlParameters                OMA-LPPe-AGNSS-CCPrequestControlParameters  OPTIONAL,",
          "1447:      ...",
          "1448: }",
          "1450: OMA-LPPe-AGNSS-GenericAssistanceDataReq ::= SEQUENCE (SIZE (1..16)) OF",
          "1451:                                                                                 OMA-LPPe-AGNSS-GenericAssistDataReqElement",
          "1453: OMA-LPPe-AGNSS-GenericAssistDataReqElement ::= SEQUENCE {",
          "1454:      gnss-ID                                    GNSS-ID,",
          "1455:      waIonoSurfaceReq                           OMA-LPPe-AGNSS-WaIonoSurfaceRequest OPTIONAL, --Cond WAiono",
          "1456:      mechanicsReq                               OMA-LPPe-AGNSS-MechanicsReq                                     OPTIONAL,",
          "1457:      dcbReq                                     OMA-LPPe-AGNSS-DCBreq                                           OPTIONAL,",
          "1458:      navModelDegradationModelReq                OMA-LPPe-AGNSS-NavModelDegradationModelReq                      OPTIONAL,",
          "1459:      ccpAssistGenericReq                        OMA-LPPe-AGNSS-CCPassistGenericReq  OPTIONAL, --Cond CCPreq",
          "1460:      navigationModelReq                         OMA-LPPe-AGNSS-NavigationModelReq                               OPTIONAL,",
          "1461:      ...",
          "1462: }",
          "1464: OMA-LPPe-AGNSS-IonosphericModelReq ::=  CHOICE {",
          "1465:       staticModels          SEQUENCE {",
          "1466:            ionoreq                     BIT STRING  {klobucharModel (0),",
          "1467:                                                        ionoStormWarning (1) } (SIZE  (1..8)),",
          "1468:            requestBeginTime            GNSS-SystemTime                  OPTIONAL,",
          "1469:            duration                    OMA-LPPe-Duration,",
          "1470:            ...",
          "1471:       },",
          "1472:       periodicModels  SEQUENCE {",
          "1473:            waIonoSurface               OMA-LPPe-AGNSS-WideAreaIonoSurfaceControlParametersRequest,",
          "1474:            ...",
          "1475:       },",
          "1476:       ...",
          "1477: }",
          "1479: OMA-LPPe-AGNSS-WideAreaIonoSurfaceControlParametersRequest ::=  SEQUENCE {",
          "1480:       duration                     OMA-LPPe-Duration   OPTIONAL,   --Cond FirstOrDurModify",
          "1481:       rate                         INTEGER(1..64)               OPTIONAL,   --Cond FirstOrRateModify",
          "1482:       ...",
          "1483:  }",
          "1485: OMA-LPPe-AGNSS-TroposphereModelReq ::=  SEQUENCE {",
          "1486:       troposphereModelReq                          BIT STRING  {delay (0),",
          "1487:                                                                      surface (1) }               (SIZE (1..8)),",
          "1488:       supportForMultipleGridPoints                 BOOLEAN,",
          "1489:       requestBeginTime                             GNSS-SystemTime                   OPTIONAL,",
          "1490:       duration                                     OMA-LPPe-Duration,",
          "1491:       ...",
          "1492:  }",
          "1494: OMA-LPPe-AGNSS-AltitudeAssistanceReq ::=    SEQUENCE {",
          "1495:       requestBeginTime                             GNSS-SystemTime                   OPTIONAL,",
          "1496:       duration                                     OMA-LPPe-Duration                 OPTIONAL,",
          "1497:       ...",
          "1498:  }",
          "1500: OMA-LPPe-AGNSS-SolarRadiationReq ::= SEQUENCE {",
          "1501:      ...",
          "1502: }",
          "1504: OMA-LPPe-AGNSS-WaIonoSurfaceRequest ::= SEQUENCE {",
          "1505:      ...",
          "1506: }",
          "1508: OMA-LPPe-AGNSS-NavModelDegradationModelReq ::= SEQUENCE {",
          "1509:      ...",
          "1510: }",
          "1512: OMA-LPPe-AGNSS-DCBreq ::= SEQUENCE {",
          "1513:      reference             SEQUENCE{",
          "1514:                                  signal  GNSS-SignalID,",
          "1515:                                  pd         ENUMERATED { pilot, data, notapplicable,  ... },",
          "1516:                                  ...",
          "1517:                                  }               OPTIONAL,",
          "1518:      ...",
          "1519: }",
          "1521: OMA-LPPe-AGNSS-MechanicsReq::= SEQUENCE {",
          "1522:       massRequest                                       BOOLEAN,",
          "1523:       effectiveReflectivityAreaRequest                  BOOLEAN,",
          "1524:       pcoRequest                                        BOOLEAN,",
          "1525:       svInfoRequest                                     BOOLEAN,",
          "1526:       ...",
          "1527: }",
          "1529: OMA-LPPe-AGNSS-CCPrequestControlParameters ::= SEQUENCE {",
          "1530:       ccpSupportAreaRequest                  NULL                       OPTIONAL,",
          "1531:       ccpNeighborListRequest                 NULL                       OPTIONAL,",
          "1532:       ccpCommonRequest                       SEQUENCE {",
          "1533:                             duration                    OMA-LPPe-Duration   OPTIONAL,   --Cond FirstOrDurModify",
          "1534:                             rate                        INTEGER(1..64)             OPTIONAL,   --Cond FirstOrRateModify",
          "1535:                            refStation                  CHOICE {",
          "1536:                                  posBasedReferenceStationRequest                  SEQUENCE {",
          "1537:                                       requestedReferenceStationLocation   OMA-LPPe-HighAccuracy3Dposition,",
          "1538:                                       qor                                               OMA-LPPe-AGNSS-QoR,",
          "1539:                                       ...",
          "1540:                                       },",
          "1541:                                  idBasedReferenceStationRequest                   OMA-LPPe-AGNSS-ReferenceStationIDlist,",
          "1542:                                  referenceStationKillList                         OMA-LPPe-AGNSS-ReferenceStationIDlist,",
          "1543:                                  ...",
          "1544:                                  } OPTIONAL, --Cond FirstOrRefModify",
          "1545:            ...",
          "1546:            },",
          "1547:      ...",
          "1548: }",
          "1551: OMA-LPPe-AGNSS-ReferenceStationIDlist ::= SEQUENCE  (SIZE(1..maxReferenceStations)) OF",
          "1552:                                                                                              OMA-LPPe-AGNSS-CCPreferenceStationID",
          "1554: OMA-LPPe-AGNSS-QoR ::=  ENUMERATED {m10, km1,km10,km100, ...}",
          "1556: OMA-LPPe-AGNSS-CCPassistGenericReq ::= SEQUENCE {",
          "1557:       ccpAssist-SignalsReq                           GNSS-SignalIDs,",
          "1558:       ...",
          "1559:  }",
          "1561: OMA-LPPe-AGNSS-NavigationModelReq ::= SEQUENCE {",
          "1562:       navModelID-PrefList               SEQUENCE (SIZE(1..8)) OF INTEGER(1..8) OPTIONAL,",
          "1563:       ...",
          "1564:  }",
          "1566: OMA-LPPe-AGNSS-ProvideLocationInformation ::= SEQUENCE {",
          "1567:       highAccuracyReferenceTime   GNSS-SystemTime                                                       OPTIONAL, --Cond HighAccuracy",
          "1568:       highAccuracyMeasurements                OMA-LPPe-AGNSS-HAgnssProvide                              OPTIONAL,",
          "1569:       ionosphereMeasurements                  OMA-LPPe-AGNSS-IonosphereMeasurements   OPTIONAL,",
          "1570:       localSurfaceMeasurements                OMA-LPPe-AGNSS-LocalSurfaceMeasurements OPTIONAL,",
          "1571:       error                                   OMA-LPPe-AGNSS-Error                                      OPTIONAL,",
          "1572:       ...",
          "1573:  }",
          "1575: OMA-LPPe-AGNSS-HAgnssProvide ::= CHOICE {",
          "1576:      controlParameters   SEQUENCE {",
          "1577:           duration                      OMA-LPPe-Duration,",
          "1578:           rate                          INTEGER(1..64),",
          "1579:           antennaDescription            OMA-LPPe-AGNSS-AntennaDescription                 OPTIONAL, --Cond HAantenna",
          "1580:           ...",
          "1581:      },",
          "1582:      measurements        SEQUENCE {",
          "1583:           position            EllipsoidPointWithAltitudeAndUncertaintyEllipsoid   OPTIONAL,",
          "1584:                                                                                                          --Cond NotForbidden",
          "1585:           referenceTime   GNSS-SystemTime,",
          "1586:           localPressure   SEQUENCE {",
          "1587:                                    pressure                      INTEGER(-1024..1023),",
          "1588:                                    pressureUncertainty           INTEGER(0..127),",
          "1589:                                    ...",
          "1590:                               } OPTIONAL, --Cond HApressure",
          "1591:           antennaOrientation            OMA-LPPe-Orientation                              OPTIONAL,                         --Cond HAantOrientation",
          "1592:           signalMeasurements            SEQUENCE (SIZE(1..16)) OF OMA-LPPe-AGNSS-HAgnssMeasurementElement,",
          "1593:           ...",
          "1594:           },",
          "1595:      ...",
          "1596: }",
          "1598: OMA-LPPe-AGNSS-HAgnssMeasurementElement::= SEQUENCE {",
          "1599:      gnss-ID                       GNSS-ID,",
          "1600:      haGNSSperSignalList           SEQUENCE (SIZE(1..8)) OF OMA-LPPe-HAgnssPerSignalElement,",
          "1601:      ...",
          "1602: }",
          "1604: OMA-LPPe-HAgnssPerSignalElement ::= SEQUENCE {",
          "1605:      signal-ID                     GNSS-SignalID,",
          "1606:      haGNSSperSVlist               SEQUENCE (SIZE(1..64)) OF OMA-LPPe-HAgnssPerSVelement,",
          "1607:      ...",
          "1608: }",
          "1611: OMA-LPPe-HAgnssPerSVelement ::= SEQUENCE {",
          "1612:      svID                     SV-ID,",
          "1613:      integerCodePhase    INTEGER (0..255)              OPTIONAL, --Cond IfAvailable",
          "1614:      codePhase                INTEGER (0..14989622),",
          "1615:      codePhaseRMSError   INTEGER (0..63),",
          "1616:      multipathDetection  ENUMERATED  {low,",
          "1617:                                               moderate,",
          "1618:                                               high,",
          "1619:                                               notMeasured,",
          "1620:                                                     ...},",
          "1621:       cnr                         INTEGER(0..255),",
          "1622:       adr                         INTEGER (0..536870911),",
          "1623:       adrRMSerror                 INTEGER (0..127),",
          "1624:       lockIndicator               BOOLEAN,",
          "1625:       ...",
          "1626: }",
          "1628: OMA-LPPe-AGNSS-IonosphereMeasurements ::= SEQUENCE {",
          "1629:       gnssTime                        GNSS-SystemTime,",
          "1630:       position                        EllipsoidPointWithAltitudeAndUncertaintyEllipsoid,",
          "1631:       tecPerSV                        OMA-LPPe-AGNSS-TECPerSV                           OPTIONAL,             --Cond TecPerSV",
          "1632:       tecAtZenith                     OMA-LPPe-AGNSS-TECAtZenith                        OPTIONAL,             --Cond ZenithTec",
          "1633:       ...",
          "1634: }",
          "1636: OMA-LPPe-AGNSS-TECPerSV ::= SEQUENCE (SIZE(1..64)) OF OMA-LPPe-AGNSS-TECPerSVElement",
          "1638: OMA-LPPe-AGNSS-TECPerSVElement ::= SEQUENCE {",
          "1639:       azimuth              INTEGER(0..359),",
          "1640:       elevation            INTEGER(0..90),",
          "1641:       tecValue             INTEGER(0..511),",
          "1642:       tecUncertainty  INTEGER(0..63),",
          "1643:       ...",
          "1644: }",
          "1646: OMA-LPPe-AGNSS-TECAtZenith ::= SEQUENCE {",
          "1647:       tecValueAtZenith                        INTEGER(0..511),",
          "1648:       tecUncertaintyAtZenith                  INTEGER(0..63),",
          "1649:       ...",
          "1650:  }",
          "1652: OMA-LPPe-AGNSS-LocalSurfaceMeasurements ::= SEQUENCE {",
          "1653:       gnssTime                           GNSS-SystemTime,",
          "1654:       position                           EllipsoidPointWithAltitudeAndUncertaintyEllipsoid,",
          "1655:       pressure                           INTEGER(-1024..1023),",
          "1656:       pressureUncertainty              INTEGER(0..127),",
          "1657:       temperatureMeasurement  SEQUENCE {",
          "1658:                                             temperature                      INTEGER(-64..63)            OPTIONAL,",
          "1659:                                             temperatureUncertainty  INTEGER(0..7)                        OPTIONAL,",
          "1660:                                             ...",
          "1661:                                             } OPTIONAL, --Cond TemperatureAvailable",
          "1662:       ...",
          "1663: }",
          "1665: OMA-LPPe-AGNSS-RequestLocationInformation ::= SEQUENCE {",
          "1666:       positioningInstructions               OMA-LPPe-AGNSS-PositioningInstructions                       OPTIONAL,",
          "1667:       ionosphereMeasurementsReq   BIT STRING  {tecPerSV(0),",
          "1668:                                                               zenithTEC(1) }(SIZE(1..8))                 OPTIONAL,",
          "1669:       localSurfaceMeasurementReq  OMA-LPPe-AGNSS-LocalSurfaceMeasurementReq   OPTIONAL,",
          "1670:       ...",
          "1671: }",
          "1673: OMA-LPPe-AGNSS-PositioningInstructions ::= SEQUENCE {",
          "1674:       highAccuracyMethodRequested                   BOOLEAN,",
          "1675:       haGNSSreq                          OMA-LPPe-AGNSS-HAgnssRequestControlParameters   OPTIONAL, --Cond HAgnssReq",
          "1676:       ...",
          "1677:  }",
          "1679: OMA-LPPe-AGNSS-LocalSurfaceMeasurementReq ::= SEQUENCE {",
          "1680:       ...",
          "1681:  }",
          "1683: OMA-LPPe-AGNSS-HAgnssRequestControlParameters ::= SEQUENCE {",
          "1684:       duration                                 OMA-LPPe-Duration   OPTIONAL,   --Cond FirstOrModify",
          "1685:       rate                                     INTEGER(1..63)               OPTIONAL,   --Cond FirstOrModify",
          "1686:       antennaInformationReq                 ENUMERATED {antennaDescriptionOnly,",
          "1687:                                                             antennaDescriptionAndOrientation,",
          "1688:                                                             ...}    OPTIONAL,",
          "1689:       pressureInformationReq                BOOLEAN,                                    --Cond FirstOrModify",
          "1690:       signalReqList                         SEQUENCE (SIZE(1..16)) OF",
          "1691:                                                        OMA-LPPe-AGNSS-HAgnssSignalReqElement   OPTIONAL, --Cond First",
          "1692:       ...",
          "1693: }",
          "1695: OMA-LPPe-AGNSS-HAgnssSignalReqElement ::= SEQUENCE {",
          "1696:       gnssID          GNSS-ID,",
          "1697:       signals         GNSS-SignalIDs,",
          "1698:       ...",
          "1699: }",
          "1701: OMA-LPPe-AGNSS-ProvideCapabilities ::= SEQUENCE {",
          "1702:       assistanceDataSupportList                        OMA-LPPe-AGNSS-AssistanceDataSupportList                               OPTIONAL,",
          "1703:       environmentObservationSupportList   OMA-LPPe-AGNSS-EnvironmentObservationSupportList    OPTIONAL,",
          "1704:       haGNSSsupport                                    OMA-LPPe-AGNSS-HAgnssSupport                                           OPTIONAL,",
          "1705:       ...",
          "1706: }",
          "1708: OMA-LPPe-AGNSS-AssistanceDataSupportList ::= SEQUENCE {",
          "1709:      commonAssistanceDataSupport               OMA-LPPe-AGNSS-CommonAssistanceDataSupport,",
          "1710:      genericAssistanceDataSupport              OMA-LPPe-AGNSS-GenericAssistanceDataSupport,",
          "1711:      ...",
          "1712: }",
          "1714: OMA-LPPe-AGNSS-EnvironmentObservationSupportList ::= SEQUENCE{",
          "1715:      ionosphereMeasurementSupport                    BIT STRING {tecPerSVsupport(0),",
          "1716:                                                                    zenithTecSupport(1) } (SIZE (1..8)),",
          "1717:      pressureMeasurementSupported                    BOOLEAN,",
          "1718:      temperatureMeasurementSupported                 BOOLEAN,",
          "1719:      ...",
          "1720: }",
          "1722: OMA-LPPe-AGNSS-CommonAssistanceDataSupport ::= SEQUENCE {",
          "1723:      ionosphericModelSupport              OMA-LPPe-AGNSS-IonosphericModelSupport  OPTIONAL, --Cond IonoSupport",
          "1724:      troposphereModelSupport              OMA-LPPe-AGNSS-TroposphereModelSupport  OPTIONAL, --Cond TropoSupport",
          "1725:      altitudeAssistanceSupport   OMA-LPPe-AGNSS-AltitudeAssistanceSupport",
          "1726:                                                                                     OPTIONAL, --Cond AltAssistSupport",
          "1727:      solarRadiationSupport                OMA-LPPe-AGNSS-SolarRadiationSupport",
          "1728:                                                                                     OPTIONAL, --Cond SolarRadiationSupport",
          "1729:      ccpSupport                           OMA-LPPe-AGNSS-CCPsupport                 OPTIONAL, --CCPsupport",
          "1730:      ...",
          "1731: }",
          "1733: OMA-LPPe-AGNSS-IonosphericModelSupport ::=  SEQUENCE {",
          "1734:       ionoModel             BIT STRING {    localKlobuchar                         (0),",
          "1735:                                                   ionoStormWarning                 (1),",
          "1736:                                                   wideAreaIonoSurface              (2) } (SIZE (1..8)),",
          "1737:       ...",
          "1738: }",
          "1740: OMA-LPPe-AGNSS-TroposphereModelSupport ::=  SEQUENCE {",
          "1741:       tropoModel                                  BIT STRING { localTroposphereDelay (0),",
          "1742:                                                                    surfaceParameters     (1) } (SIZE (1..8)),",
          "1743:       supportForMultipleGridPoints                BOOLEAN,",
          "1744:       ...",
          "1745: }",
          "1747: OMA-LPPe-AGNSS-AltitudeAssistanceSupport ::= SEQUENCE {",
          "1748:       ...",
          "1749: }",
          "1751: OMA-LPPe-AGNSS-SolarRadiationSupport ::= SEQUENCE {",
          "1752:       ...",
          "1753: }",
          "1755: OMA-LPPe-AGNSS-CCPsupport ::= SEQUENCE {",
          "1756:       supportAreaAssistanceSupported                     BOOLEAN,",
          "1757:       multiReferenceStationSupported                     BOOLEAN,",
          "1758:       ...",
          "1759: }",
          "1761: OMA-LPPe-AGNSS-GenericAssistanceDataSupport ::=",
          "1762:                                   SEQUENCE (SIZE (1..16)) OF OMA-LPPe-AGNSS-GenericAssistDataSupportElement",
          "1764: OMA-LPPe-AGNSS-GenericAssistDataSupportElement ::= SEQUENCE {",
          "1765:       gnss-ID                                                      GNSS-ID,",
          "1766:       mechnanicsSupport                                            OMA-LPPe-AGNSS-MechanicsSupport OPTIONAL,",
          "1767:                                                                                                                 --Cond MechSupport",
          "1768:       dcbSupport                                                   OMA-LPPe-AGNSS-DCBsupport                    OPTIONAL,",
          "1769:                                                                                                          --Cond DCBsupport",
          "1770:       navModelAccuracyModelDegradationSupport                      OMA-LPPe-AGNSS-NavModelAccuracyModelDegradationSupport",
          "1771:                                                                    OPTIONAL,                                    --Cond NavModDegrSupport",
          "1772:       ccpAssistanceSuppport                                              GNSS-SignalIDs  OPTIONAL,   --Cond CCPsupport",
          "1773:       navModelSupport                        OMA-LPPe-AGNSS-NavModelSupport                    OPTIONAL,   --Cond NavModSupport",
          "1774:       ...",
          "1775: }",
          "1777: OMA-LPPe-AGNSS-MechanicsSupport ::= SEQUENCE {",
          "1778:       ...",
          "1779: }",
          "1781: OMA-LPPe-AGNSS-DCBsupport ::= SEQUENCE {",
          "1782:       ...",
          "1783: }",
          "1785: OMA-LPPe-AGNSS-NavModelAccuracyModelDegradationSupport ::= SEQUENCE {",
          "1786:       ...",
          "1787: }",
          "1789: OMA-LPPe-AGNSS-NavModelSupport ::= SEQUENCE {",
          "1790:       navModelSupport             SEQUENCE (SIZE(1..8)) OF INTEGER(1..8)  OPTIONAL,",
          "1791:       ...",
          "1792: }",
          "1794: OMA-LPPe-AGNSS-HAgnssSupport ::= SEQUENCE {",
          "1795:      modeSupport                                     BIT STRING {ueBased (0), ueAssisted (1) } (SIZE(2)),",
          "1796:      haGNSSpressureInformationSupport                BOOLEAN,",
          "1797:      haGNSSantennaInformationSupport                 BIT STRING { antennaDescriptionSupported (0),",
          "1798:                                                                       antennaOrientationSupported (1)",
          "1799:                                                                       }  (SIZE(8)),",
          "1801:      haGNSSperGNSSsupport                            SEQUENCE (SIZE(1..8)) OF OMA-LPPe-AGNSS-HAgnssPerGNSSsupport,",
          "1802:      ...",
          "1803: }",
          "1805: OMA-LPPe-AGNSS-HAgnssPerGNSSsupport::= SEQUENCE {",
          "1806:      gnss-ID                         GNSS-ID,",
          "1807:      haGNSSsignalSupport             GNSS-SignalIDs,",
          "1808:      ...",
          "1809: }",
          "1811: OMA-LPPe-AGNSS-RequestCapabilities ::= SEQUENCE {",
          "1812:      assistanceDataSupportListReq                               NULL       OPTIONAL,",
          "1813:      environmentObservationSupportListReq                       NULL       OPTIONAL,",
          "1814:      haGNSSsupportReq                                           NULL       OPTIONAL,",
          "1815:      ...",
          "1816: }",
          "1818: OMA-LPPe-AGNSS-Error ::= CHOICE {",
          "1819:      agnss-locationServerErrorCauses                  OMA-LPPe-AGNSS-LocationServerErrorCauses,",
          "1820:      agnss-targetDeviceErrorCauses                    OMA-LPPe-AGNSS-TargetDeviceErrorCauses,",
          "1821:      ...",
          "1822: }",
          "1824: OMA-LPPe-AGNSS-LocationServerErrorCauses ::= SEQUENCE {",
          "1825:       waIonoErrorCauses  ENUMERATED {                 undefined,",
          "1826:                                                       waIonoNotSupportedByServer,",
          "1827:                                                       waIonoNotSupportedInTargetArea,",
          "1828:                                                       waIonoNotSupportedForAnyRequestedGNSS,",
          "1829:                                                       ...} OPTIONAL,",
          "1830:       ccpErrorCauses            ENUMERATED {          undefined,",
          "1831:                                                       ccpNotSupportedByServer,",
          "1832:                                                       ccpNotSupportedInTargetArea,",
          "1833:                                                       ccpNotSupportedForAnyRequestedSignal,",
          "1834:                                                       ccpQorCannotBeMet,",
          "1835:                                                       ccpUnableToModifyControlParameters,",
          "1836:                                                       ccpMultiReferenceStationNotSupported,",
          "1837:                                                       ccpNeighborListNotSupported,",
          "1838:                                                       ccpSupportAreaAssistanceNotSupported,",
          "1839:                                                       ...} OPTIONAL,",
          "1840:      ...",
          "1841: }",
          "1843: OMA-LPPe-AGNSS-TargetDeviceErrorCauses ::= SEQUENCE {",
          "1844:      highAccuracyErrorCauses                         ENUMERATED {         undefined,",
          "1845:                                                                           highAccuracyMethodNotSupported,",
          "1846:                                                                           ...} OPTIONAL,",
          "1847:      ionosphereMeasurementErrorCauses                ENUMERATED  {   undefined,",
          "1848:                                                                           ionosphereMeasurementsNotSupported,",
          "1849:                                                                          ionosphereMeasurementsNotAvailable,",
          "1850:                                                                           ...}       OPTIONAL,",
          "1851:      environmentObservationErrorCauses   ENUMERATED  {   undefined,",
          "1852:                                                                           surfaceMeasurementsNotSupported,",
          "1853:                                                                          surfaceMeasurementsNotAvailable,",
          "1854:                                                                           ...}       OPTIONAL,",
          "1855:      haGNSSerrorCauses                               ENUMERATED {         undefined,",
          "1856:                                                                           haGNSSnotSupportedByTarget,",
          "1857:                                                                           haGNSSunavailableForAllRequestedSignals,",
          "1858:                                                                           haGNSSantennaInformationNotSupported,",
          "1859:                                                                           haGNSSantennaInformationNotAvailable,",
          "1860:                                                                           haGNSSpressureInformationNotSupported,",
          "1861:                                                                           haGNSSpressureInformationNotAvailable,",
          "1862:                                                                           haGNSSunableToModifyControlParameters,",
          "1863:                                                                           ...} OPTIONAL,",
          "1864:      ...",
          "1865: }",
          "1867: OMA-LPPe-AGNSS-CCPreferenceStationID ::= SEQUENCE {",
          "1868:      stationID   INTEGER(0..65535),",
          "1869:      ...",
          "1870: }",
          "1872: maxReferenceStations INTEGER ::= 8",
          "1874: OMA-LPPe-AGNSS-AntennaDescription ::= SEQUENCE {",
          "1875:      antennaDescription              CHOICE {",
          "1876:                                            igsAntennaName            OMA-LPPe-CharArray,",
          "1877:                                            proprietaryName           OMA-LPPe-CharArray,",
          "1878:                                            ...",
          "1879:                                            },",
          "1880:      antennaSetupID                  INTEGER(0..255)                 OPTIONAL,",
          "1881:      antennaSerialNumber             OMA-LPPe-CharArray              OPTIONAL,",
          "1882:      ...",
          "1883: }",
          "1885: OMA-LPPe-AGNSS-Abort::= SEQUENCE {",
          "1886:      targetDeviceAbortCauses               SEQUENCE {",
          "1887:            ccpAbort    ENUMERATED  {   undefined,",
          "1888:                                                 ccpNotSupported,",
          "1889:                                                 ccpNotSupportedForProvidedSignals,",
          "1890:                                                 ... }      OPTIONAL,",
          "1891:            waIonoAbort ENUMERATED  {   undefined,",
          "1892:                                                 waIonoNotSupported,",
          "1893:                                                 waIonoNotSupportedForProvidedGNSSs,",
          "1894:                                                 ... } OPTIONAL,",
          "1895:            ...",
          "1896:            } OPTIONAL,",
          "1897:      ...",
          "1898: }",
          "1900: OMA-LPPe-OTDOA-ProvideAssistanceData ::= SEQUENCE {",
          "1901:      otdoa-ReferenceCellInfo                         OMA-LPPe-OTDOA-ReferenceCellInfo                          OPTIONAL,",
          "1902:      otdoa-NeighbourCellInfo                         OMA-LPPe-OTDOA-NeighbourCellInfoList                      OPTIONAL,",
          "1903:      otdoa-Error                                     OMA-LPPe-OTDOA-Error                                      OPTIONAL,",
          "1904:      ...",
          "1905: }",
          "1907: OMA-LPPe-OTDOA-ReferenceCellInfo ::= SEQUENCE {",
          "1908:      referenceCellInfo                    OTDOA-ReferenceCellInfo,",
          "1909:      positionCalculationInfoRef  OMA-LPPe-OTDOA-PositionCalculationInfoRef,",
          "1910:      ...",
          "1911: }",
          "1913: OMA-LPPe-OTDOA-PositionCalculationInfoRef ::= SEQUENCE {",
          "1914:      systemFrameNumber               BIT STRING (SIZE(10))                           OPTIONAL, --Cond driftRate",
          "1915:      rtdReferenceStd                 OMA-LPPe-OTDOA-RTDquality                       OPTIONAL,",
          "1916:      cellLocation                    SEQUENCE {",
          "1917:                                           reference-point            OMA-LPPe-ReferencePoint                   OPTIONAL,",
          "1918:                                           relative-location   OMA-LPPe-RelativeLocation                        OPTIONAL,",
          "1919:                                             ...",
          "1920:                                             },",
          "1921:      femtoCellInfo                    SEQUENCE {",
          "1922:                                                  location-reliability             INTEGER(1..100) OPTIONAL,",
          "1923:                                                  ...",
          "1924:                                                  }                                     OPTIONAL,   --Cond femto",
          "1926:      ...",
          "1927: }",
          "1929: OMA-LPPe-OTDOA-NeighbourCellInfoList ::= SEQUENCE (SIZE (1..maxFreqLayers)) OF",
          "1930:                                                                  OMA-LPPe-OTDOA-NeighbourFreqCellInfoList",
          "1935: OMA-LPPe-OTDOA-NeighbourFreqCellInfoList ::= SEQUENCE {",
          "1936:      neighbourCellInfoList-eNB   SEQUENCE (SIZE (1..maxLTEeNBs))  OF",
          "1937:                                                             OMA-LPPe-OTDOA-NeighbourCellInfoElement-eNB                       OPTIONAL,",
          "1938:      neighbourCellInfoList-HeNB  SEQUENCE (SIZE (1..maxLTEHeNBs)) OF",
          "1939:                                                             OMA-LPPe-OTDOA-NeighbourCellInfoElement-HeNB                      OPTIONAL,",
          "1940:      ...",
          "1941: }",
          "1943: OMA-LPPe-OTDOA-NeighbourCellInfoElement-eNB ::= SEQUENCE {",
          "1944:       relative-Location                            OMA-LPPe-RelativeLocation,",
          "1945:       otdoa-eNB-CellDataList                       SEQUENCE (SIZE (1..maxLTEMacroCells)) OF OMA-LPPe-OTDOA-CellData,",
          "1946:       ...",
          "1947: }",
          "1949: OMA-LPPe-OTDOA-NeighbourCellInfoElement-HeNB ::= SEQUENCE {",
          "1950:       relative-Location                            OMA-LPPe-RelativeLocation,",
          "1951:       location-reliability                         INTEGER (1..100)                              OPTIONAL,",
          "1952:       otdoa-HeNB-CellDataList                      OMA-LPPe-OTDOA-CellData,",
          "1953:       ...",
          "1954: }",
          "1956: OMA-LPPe-OTDOA-CellData  ::= SEQUENCE {",
          "1957:       otdoa-NeighbourCellInfoElement  OTDOA-NeighbourCellInfoElement,",
          "1958:       rtdInfo                                     SEQUENCE {",
          "1959:                                                               subframeOffset              INTEGER(0..10229)                OPTIONAL,",
          "1960:                                                               fineRTD                     INTEGER(0..99999),",
          "1961:                                                               fineRTDstd                  OMA-LPPe-OTDOA-RTDquality,",
          "1962:                                                               fineRTDdriftRate            INTEGER(-100..100)               OPTIONAL,",
          "1963:                                                               ...",
          "1964:                                                   },",
          "1965:       ...",
          "1966: }",
          "1968: OMA-LPPe-OTDOA-RTDquality ::= SEQUENCE {",
          "1969:      resolution                 ENUMERATED { ns-5, ns-10, ns-50, ns-100, ... },",
          "1970:      quality                    INTEGER (0..127),",
          "1971:      ...",
          "1972: }",
          "1974: OMA-LPPe-OTDOA-RequestAssistanceData ::= SEQUENCE {",
          "1975:      lteCell                               SEQUENCE {",
          "1976:                                                 physCellId            INTEGER(0..503),",
          "1977:                                                 eARFCN                ARFCN-ValueEUTRA,",
          "1978:                                                 ecgi                  CellGlobalIdEUTRA-AndUTRA                       OPTIONAL,",
          "1979:                                                 ...",
          "1980:                                            },",
          "1981:      requestedCells                        BIT STRING {",
          "1982:                                                       eNBs       (0),",
          "1983:                                                       heNBs   (1) }   (SIZE (1..8)),",
          "1984:      ...",
          "1985: }",
          "1987: OMA-LPPe-OTDOA-ProvideLocationInformation ::= SEQUENCE {",
          "1988:       otdoaLocationInformation                         OMA-LPPe-OTDOA-LocationInformation                           OPTIONAL,",
          "1989:       otdoaError                                       OMA-LPPe-OTDOA-Error                                        OPTIONAL,",
          "1990:       ...",
          "1991: }",
          "1993: OMA-LPPe-OTDOA-LocationInformation ::= SEQUENCE {",
          "1994:       systemFrameNumber               BIT STRING (SIZE (10)),",
          "1995:       physCellId                      INTEGER (0..503),",
          "1996:       cellGlobalId                    CellGlobalIdEUTRA-AndUTRA                         OPTIONAL,",
          "1997:       ...",
          "1998: }",
          "2000: OMA-LPPe-OTDOA-RequestLocationInformation ::= SEQUENCE {",
          "2001:            assistanceAvailability                                 BOOLEAN,",
          "2002:            ...",
          "2003: }",
          "2005: OMA-LPPe-OTDOA-ProvideCapabilities ::= SEQUENCE {",
          "2006:      eNodeB-AD-sup                         SEQUENCE { ... }                           OPTIONAL,",
          "2007:      home-eNodeB-AD-sup                    SEQUENCE { ... }                           OPTIONAL,",
          "2008:      ...",
          "2009: }",
          "2011: OMA-LPPe-OTDOA-RequestCapabilities ::= SEQUENCE {",
          "2012:      ...",
          "2013: }",
          "2015: OMA-LPPe-OTDOA-Error ::= CHOICE {",
          "2016:      locationServerErrorCauses                  OMA-LPPe-OTDOA-LocationServerErrorCauses,",
          "2017:      targetDeviceErrorCauses                    OMA-LPPe-OTDOA-TargetDeviceErrorCauses,",
          "2018:      ...",
          "2019: }",
          "2021: OMA-LPPe-OTDOA-LocationServerErrorCauses ::= SEQUENCE {",
          "2022:      cause           ENUMERATED  {   undefined,",
          "2023:                                           locationCalculationAssistanceDataNotSupported,",
          "2024:                                           locationCalculationAssistanceDataSupportedButCurrentlyNotAvailable,",
          "2025:                                           ...",
          "2026:                                      },",
          "2027:      ...",
          "2028: }",
          "2030: OMA-LPPe-OTDOA-TargetDeviceErrorCauses ::= SEQUENCE {",
          "2031:      cause           ENUMERATED {         undefined,",
          "2032:                                           there-were-not-enough-signals-received-for-ueBased-otdoa,",
          "2033:                                           location-calculation-assistance-data-missing,",
          "2034:                                           ...",
          "2035:                                      },",
          "2036:      ...",
          "2037: }",
          "2039: OMA-LPPe-EOTD-ProvideAssistanceData ::= SEQUENCE {",
          "2040:      referenceBTS                         OMA-LPPe-EOTD-ReferenceBTSForAssistance                   OPTIONAL,   --Cond NotError",
          "2041:      msrAssistDataList                    OMA-LPPe-EOTD-MsrAssistDataList                           OPTIONAL,",
          "2042:      systemInfoAssistDataList             OMA-LPPe-EOTD-SystemInfoAssistDataList                    OPTIONAL,",
          "2043:      eotdError                            OMA-LPPe-EOTD-Error                                       OPTIONAL,",
          "2044:      ...",
          "2045: }",
          "2047: OMA-LPPe-EOTD-ReferenceBTSForAssistance ::= SEQUENCE {",
          "2048:       bsicAndCarrier              OMA-LPPe-CellNonUniqueIDGERAN,",
          "2049:       timeSlotScheme              OMA-LPPe-EOTD-TimeSlotScheme,",
          "2050:       btsPosition                 CHOICE {",
          "2051:                  ellipsoidPoint                               Ellipsoid-Point,",
          "2052:                  ellipsoidPointWithAltitudeAndUncertaintyEllipsoid",
          "2053:                                                                          EllipsoidPointWithAltitudeAndUncertaintyEllipsoid,",
          "2054:                  ...",
          "2055:                  }          OPTIONAL,                         --Cond UE-based",
          "2056:       ...",
          "2057:  }",
          "2059: OMA-LPPe-EOTD-MsrAssistDataList ::= SEQUENCE (SIZE  (1..15)) OF OMA-LPPe-EOTD-MsrAssistBTS",
          "2061: OMA-LPPe-EOTD-MsrAssistBTS ::= SEQUENCE {",
          "2062:       bsicAndCarrier              OMA-LPPe-CellNonUniqueIDGERAN,",
          "2063:       multiFrameOffset            OMA-LPPe-EOTD-MultiFrameOffset,",
          "2064:       timeSlotScheme              OMA-LPPe-EOTD-TimeSlotScheme,",
          "2065:       roughRTD                    OMA-LPPe-EOTD-RoughRTD,",
          "2066:       expectedOTD                 OMA-LPPe-EOTD-ExpectedOTD,",
          "2067:       calcAssistanceBTS   OMA-LPPe-EOTD-CalcAssistanceBTS                           OPTIONAL,   --Cond UE-based",
          "2068:       ...",
          "2069: }",
          "2071: OMA-LPPe-EOTD-SystemInfoAssistDataList ::= SEQUENCE (SIZE (1..32)) OF OMA-LPPe-EOTD-SystemInfoAssistBTS",
          "2073: OMA-LPPe-EOTD-SystemInfoAssistBTS ::= CHOICE{",
          "2074:      notPresent                  NULL,",
          "2075:      present                     OMA-LPPe-EOTD-AssistBTSData",
          "2076: }",
          "2078: OMA-LPPe-EOTD-AssistBTSData ::= SEQUENCE {",
          "2079:      bsic                        INTEGER(0..63),",
          "2080:      multiFrameOffset            OMA-LPPe-EOTD-MultiFrameOffset,",
          "2081:      timeSlotScheme              OMA-LPPe-EOTD-TimeSlotScheme,",
          "2082:      roughRTD                    OMA-LPPe-EOTD-RoughRTD,",
          "2083:      expectedOTD                 OMA-LPPe-EOTD-ExpectedOTD                        OPTIONAL,",
          "2084:      calcAssistanceBTS   OMA-LPPe-EOTD-CalcAssistanceBTS                          OPTIONAL,   --Cond UE-based",
          "2085:      ...",
          "2086: }",
          "2088: OMA-LPPe-EOTD-CalcAssistanceBTS ::= SEQUENCE {",
          "2089:      fineRTD                     OMA-LPPe-EOTD-FineRTD,",
          "2090:      relativePos                 OMA-LPPe-EOTD-relativePos,",
          "2091:      ...",
          "2092: }",
          "2094: OMA-LPPe-EOTD-relativePos ::= SEQUENCE {",
          "2095:      relativeNorth               OMA-LPPe-EOTD-RelDistance,",
          "2096:      relativeEast                OMA-LPPe-EOTD-RelDistance,",
          "2097:      relativeAlt                 OMA-LPPe-EOTD-RelativeAlt                   OPTIONAL,",
          "2098:      ...",
          "2099: }",
          "2101: OMA-LPPe-EOTD-FineRTD ::= INTEGER(0..255)",
          "2103: OMA-LPPe-EOTD-RelDistance ::= INTEGER(-200000..200000)",
          "2105: OMA-LPPe-EOTD-RelativeAlt ::= INTEGER(-4000..4000)",
          "2107: OMA-LPPe-EOTD-RequestAssistanceData ::= SEQUENCE {",
          "2108:      eotdAssistanceReq                BIT STRING { ueAssisted (0), ueBased (1) },",
          "2109:      ...",
          "2110: }",
          "2112: OMA-LPPe-EOTD-ProvideLocationInformation ::= SEQUENCE {",
          "2113:      eotdMsrElement                   OMA-LPPe-EOTD-MsrElement                    OPTIONAL,",
          "2114:      eotdError                        OMA-LPPe-EOTD-Error                         OPTIONAL,",
          "2115:      ...",
          "2116: }",
          "2118: OMA-LPPe-EOTD-MsrElement ::= SEQUENCE {",
          "2119:      refFrameNumber                   INTEGER(0..42431),",
          "2120:      referenceTimeSlot                OMA-LPPe-EOTD-ModuloTimeSlot,",
          "2121:      toaMeasurementsOfRef             OMA-LPPe-EOTD-TOA-MeasurementsOfRef                                               OPTIONAL,",
          "2122:      stdResolution                    BIT STRING(SIZE(2)),",
          "2123:      taCorrection                     INTEGER(0..960)                                                                   OPTIONAL,",
          "2124:      otd-FirstSetMsrs                 SEQUENCE (SIZE(1..15)) OF OMA-LPPe-EOTD-MeasurementWithID   OPTIONAL,",
          "2125:      ...",
          "2126: }",
          "2128: OMA-LPPe-EOTD-TOA-MeasurementsOfRef ::= SEQUENCE {",
          "2129:      refQuality                       BIT STRING(SIZE(5)),",
          "2130:      numOfMeasurements                BIT STRING(SIZE(3)),",
          "2131:      ...",
          "2132: }",
          "2134: OMA-LPPe-EOTD-MeasurementWithID ::= SEQUENCE {",
          "2135:      neighborIdentity                OMA-LPPe-EOTD-NeighborIdentity,",
          "2136:      nborTimeSlot                    OMA-LPPe-EOTD-ModuloTimeSlot,",
          "2137:      eotdQuality                     OMA-LPPe-EOTD-EOTDQuality,",
          "2138:      otdValue                        OMA-LPPe-EOTD-OTDValue,",
          "2139:      ...",
          "2140: }",
          "2142: OMA-LPPe-EOTD-NeighborIdentity ::= CHOICE {",
          "2143:      bsicAndCarrier            OMA-LPPe-CellNonUniqueIDGERAN,",
          "2144:      ci                        OMA-LPPe-EOTD-CellID,",
          "2145:      multiFrameCarrier   OMA-LPPe-EOTD-MultiFrameCarrier,",
          "2146:      requestIndex              OMA-LPPe-EOTD-RequestIndex,",
          "2147:      systemInfoIndex           OMA-LPPe-EOTD-SystemInfoIndex,",
          "2148:      ciAndLac                  OMA-LPPe-CellLocalIdGERAN,",
          "2149:      ...",
          "2150: }",
          "2152: OMA-LPPe-EOTD-EOTDQuality ::= SEQUENCE {",
          "2153:      nbrOfMeasurements                    BIT STRING(SIZE(3)),",
          "2154:      stdOfEOTD                            BIT STRING(SIZE(5)),",
          "2155:      ...",
          "2156: }",
          "2158: OMA-LPPe-EOTD-OTDValue ::= INTEGER (0..39999)",
          "2160: OMA-LPPe-EOTD-CellID ::= INTEGER (0..65535)",
          "2162: OMA-LPPe-EOTD-RequestIndex ::= INTEGER (1..16)",
          "2163: OMA-LPPe-EOTD-SystemInfoIndex ::= INTEGER (1..32)",
          "2165: OMA-LPPe-EOTD-MultiFrameCarrier ::= SEQUENCE {",
          "2166:      bcchCarrier               OMA-LPPe-EOTD-BCCHCarrier,",
          "2167:      multiFrameOffset          OMA-LPPe-EOTD-MultiFrameOffset,",
          "2168:      ...",
          "2169: }",
          "2171: OMA-LPPe-EOTD-BCCHCarrier ::= INTEGER (0..1023)",
          "2173: OMA-LPPe-EOTD-RequestLocationInformation ::= SEQUENCE {",
          "2174:       ...",
          "2175: }",
          "2177: OMA-LPPe-EOTD-ProvideCapabilities ::= SEQUENCE {",
          "2178:       eotdSupport BIT STRING{ ueBased(0), ueAssisted(1) },",
          "2179:       ...",
          "2180: }",
          "2182: OMA-LPPe-EOTD-RequestCapabilities ::= SEQUENCE {",
          "2183:      ...",
          "2184: }",
          "2186: OMA-LPPe-EOTD-Error ::= CHOICE {",
          "2187:      locationServerErrorCauses                   OMA-LPPe-EOTD-LocationServerErrorCauses,",
          "2188:      targetDeviceErrorCauses                     OMA-LPPe-EOTD-TargetDeviceErrorCauses,",
          "2189:      ...",
          "2190: }",
          "2192: OMA-LPPe-EOTD-LocationServerErrorCauses ::= SEQUENCE {",
          "2193:      cause                 ENUMERATED{ undefined,",
          "2194:                                             assistanceDataForUEbasedEOTDnotAvailable,",
          "2195:                                             assistanceDataForUEassistedEOTDnotAvailable,",
          "2196:                                             ...},",
          "2197:      ...",
          "2198: }",
          "2200: OMA-LPPe-EOTD-TargetDeviceErrorCauses ::= SEQUENCE {",
          "2201:       cause                 ENUMERATED{ undefinedError,",
          "2202:                                              notEnoughBTsforEOTD,",
          "2203:                                              assistanceDataMissing,",
          "2204:                                              referenceCellNotServingCell,",
          "2205:                                              eotdMeasurementsNotSupported,",
          "2206:                                              eotdMeasurementsNotAvailable,",
          "2207:                                              uebasedEOTDnotSupported,",
          "2208:                                              ...},",
          "2209:       ...",
          "2210: }",
          "2212: OMA-LPPe-EOTD-TimeSlotScheme ::= ENUMERATED {",
          "2213:       equalLength (0),",
          "2214:       variousLength (1)",
          "2215: }",
          "2217: OMA-LPPe-EOTD-MultiFrameOffset ::= INTEGER (0..51)",
          "2219: OMA-LPPe-EOTD-RoughRTD ::= INTEGER (0..1250)",
          "2221: OMA-LPPe-EOTD-ExpectedOTD ::= SEQUENCE {",
          "2222:       expectedOTD                  INTEGER(0..1250),",
          "2223:       expOTDUncertainty   INTEGER(0..7),",
          "2224:       ...",
          "2225: }",
          "2227: OMA-LPPe-EOTD-ModuloTimeSlot ::= INTEGER(0..3)",
          "2229: OMA-LPPe-OTDOA-UTRA-ProvideAssistanceData ::= SEQUENCE {",
          "2230:      referenceCellInfo              OMA-LPPe-OTDOA-UTRA-ReferenceCellInfo   OPTIONAL,",
          "2231:      neigborCellList                OMA-LPPe-OTDOA-UTRA-NeighborCellList                OPTIONAL,",
          "2232:      otdoaUtraError                 OMA-LPPe-OTDOA-UTRA-Error                           OPTIONAL,",
          "2233:      ...",
          "2234: }",
          "2236: OMA-LPPe-OTDOA-UTRA-ReferenceCellInfo ::= SEQUENCE {",
          "2237:      sfn                            INTEGER(0..4095)                    OPTIONAL,",
          "2238:      modeSpecificInfo          CHOICE {",
          "2239:           fdd                       SEQUENCE {",
          "2240:                primaryCPICH-info                   OMA-LPPe-OTDOA-UTRA-PrimaryCPICH-Info",
          "2241:                },",
          "2242:           tdd                       SEQUENCE {",
          "2243:                cellAndChannelIdentity              OMA-LPPe-OTDOA-UTRA-CellAndChannelIdentity",
          "2244:                }",
          "2245:           },",
          "2246:      frequencyInfo                  OMA-LPPe-UTRA-FrequencyInfo                         OPTIONAL,",
          "2247:      refPosAssist                   OMA-LPPe-OTDOA-UTRA-RefPosAssist                    OPTIONAL,   --Cond UE-based",
          "2248:      ipdl-parameters                OMA-LPPe-OTDOA-UTRA-IPDL-Parameters                 OPTIONAL,",
          "2249:      ...",
          "2250: }",
          "2252: OMA-LPPe-OTDOA-UTRA-RefPosAssist ::= SEQUENCE {",
          "2253:      cellPosition                        CHOICE {",
          "2254:                ellipsoidPoint                      Ellipsoid-Point,",
          "2255:                ellipsoidPointWithAltitude  EllipsoidPointWithAltitude,",
          "2256:                ...",
          "2257:                },",
          "2258:      roundTripTime                          INTEGER (0..327  )                    OPTIONAL,",
          "2259:      roundTripTimeExtension                 INTEGER (0..70274)                    OPTIONAL,",
          "2260:      ...",
          "2261: }",
          "2263: OMA-LPPe-OTDOA-UTRA-NeighborCellList ::= SEQUENCE (SIZE (1..utra-maxCellMeas)) OF",
          "2264:                                                                                         OMA-LPPe-OTDOA-UTRA-NeighborCellInfo",
          "2266: OMA-LPPe-OTDOA-UTRA-NeighborCellInfo ::= SEQUENCE {",
          "2267:      modeSpecificInfo            CHOICE {",
          "2268:            fdd                        SEQUENCE {",
          "2269:                 primaryCPICH-info                      OMA-LPPe-OTDOA-UTRA-PrimaryCPICH-Info",
          "2270:                 },",
          "2271:            tdd                        SEQUENCE {",
          "2272:                 cellAndChannelIdentity                 OMA-LPPe-OTDOA-UTRA-CellAndChannelIdentity",
          "2273:                 }",
          "2274:            },",
          "2275:      frequencyInfo                               OMA-LPPe-UTRA-FrequencyInfo                                       OPTIONAL,",
          "2276:      ipdl-parameters                             OMA-LPPe-OTDOA-UTRA-IPDL-Parameters                               OPTIONAL,",
          "2277:      sfn-SFN-relTimeDifference                   OMA-LPPe-OTDOA-UTRA-SFN-SFN-RelTimeDifference1,",
          "2278:      sfn-offsetValidity                       OMA-LPPe-OTDOA-UTRA-SFN-OffsetValidity                        OPTIONAL,",
          "2279:      sfn-SFN-drift                            OMA-LPPe-OTDOA-UTRA-SFN-SFN-Drift                             OPTIONAL,",
          "2280:      searchWindowSize                         OMA-LPPe-OTDOA-UTRA-SearchWindowSize,",
          "2281:      positioningAssistance                    OMA-LPPe-OTDOA-UTRA-PositioningAssistance   OPTIONAL, --Cond UEbased",
          "2282:      ...",
          "2283: }",
          "2285: OMA-LPPe-OTDOA-UTRA-SFN-SFN-RelTimeDifference1 ::= SEQUENCE {",
          "2286:      sfn-offset                          INTEGER (0..4095),",
          "2287:      sfn-sfn-relTimeDifference   INTEGER (0..38399)",
          "2288: }",
          "2290: OMA-LPPe-OTDOA-UTRA-PositioningAssistance ::= SEQUENCE {",
          "2291:      relativeNorth                       INTEGER (-20000..20000),",
          "2292:      relativeEast                        INTEGER (-20000..20000),",
          "2293:      relativeAltitude                    INTEGER (-4000..4000)                         OPTIONAL,",
          "2294:      fineSFN-SFN                         OMA-LPPe-OTDOA-UTRA-fineSFN-SFN,",
          "2295:      roundTripTime                       INTEGER (0..327  )                            OPTIONAL,",
          "2296:      roundTripTimeExtension              INTEGER (0..70274)                            OPTIONAL,",
          "2297:      ...",
          "2298: }",
          "2300: utra-maxCellMeas    INTEGER ::= 32",
          "2302: OMA-LPPe-OTDOA-UTRA-SFN-OffsetValidity ::= ENUMERATED { false }",
          "2304: OMA-LPPe-OTDOA-UTRA-SFN-SFN-Drift ::= ENUMERATED {",
          "2305:                sfnsfndrift0, sfnsfndrift1, sfnsfndrift2,",
          "2306:                sfnsfndrift3, sfnsfndrift4, sfnsfndrift5,",
          "2307:                sfnsfndrift8, sfnsfndrift10, sfnsfndrift15,",
          "2308:                sfnsfndrift25, sfnsfndrift35, sfnsfndrift50,",
          "2309:                sfnsfndrift65, sfnsfndrift80, sfnsfndrift100,",
          "2310:                sfnsfndrift-1, sfnsfndrift-2, sfnsfndrift-3,",
          "2311:                sfnsfndrift-4, sfnsfndrift-5, sfnsfndrift-8,",
          "2312:                sfnsfndrift-10, sfnsfndrift-15, sfnsfndrift-25,",
          "2313:                sfnsfndrift-35, sfnsfndrift-50, sfnsfndrift-65,",
          "2314:                sfnsfndrift-80, sfnsfndrift-100,",
          "2315:                ... }",
          "2317: OMA-LPPe-OTDOA-UTRA-SearchWindowSize ::= ENUMERATED { c20, c40, c80, c160, c320,",
          "2318:                                                                     c640, c1280, moreThan1280, ... }",
          "2320: OMA-LPPe-OTDOA-UTRA-fineSFN-SFN ::= INTEGER (0..15)",
          "2322: OMA-LPPe-OTDOA-UTRA-IPDL-Parameters ::= SEQUENCE {",
          "2323:       modeSpecificInfo                 CHOICE {",
          "2324:            fdd                              SEQUENCE {",
          "2325:                  ip-spacing                       OMA-LPPe-OTDOA-UTRA-IP-Spacing,",
          "2326:                  ip-length                        OMA-LPPe-OTDOA-UTRA-IP-Length,",
          "2327:                  ip-Offset                        INTEGER (0..9),",
          "2328:                  seed                             INTEGER (0..63),",
          "2329:                  burstModeParameters              OMA-LPPe-OTDOA-UTRA-BurstModeParameters                      OPTIONAL",
          "2330:            },",
          "2331:            tdd                              SEQUENCE {",
          "2332:                  ip-spacing-tdd                   OMA-LPPe-OTDOA-UTRA-IP-Spacing-TDD,",
          "2333:                  ip-slot                          INTEGER (0..14),",
          "2334:                  ip-start                         INTEGER (0..4095),",
          "2335:                  ip-PCCPCH                        OMA-LPPe-OTDOA-UTRA-IP-PCCPCH                                OPTIONAL,",
          "2336:                 burstModeParameters            OMA-LPPe-OTDOA-UTRA-BurstModeParameters",
          "2337:            }",
          "2338:      }",
          "2339: }",
          "2341: OMA-LPPe-OTDOA-UTRA-IP-Spacing ::= ENUMERATED { e5, e7, e10, e15, e20, e30, e40, e50}",
          "2343: OMA-LPPe-OTDOA-UTRA-IP-Length ::= ENUMERATED {ipl5, ipl10}",
          "2345: OMA-LPPe-OTDOA-UTRA-IP-Spacing-TDD ::= ENUMERATED { e30, e40, e50, e70, e100 }",
          "2347: OMA-LPPe-OTDOA-UTRA-IP-PCCPCH ::= BOOLEAN",
          "2349: OMA-LPPe-OTDOA-UTRA-BurstModeParameters ::= SEQUENCE {",
          "2350:      burstStart                 INTEGER (0..15),",
          "2351:      burstLength                INTEGER (10..25),",
          "2352:      burstFreq                  INTEGER (1..16)",
          "2353: }",
          "2355: OMA-LPPe-OTDOA-UTRA-RequestAssistanceData ::= SEQUENCE {",
          "2356:      otdoaUtraAssistanceReq               BIT STRING { ueAssisted (0), ueBased (1) } (SIZE(1..8)),",
          "2357:      ...",
          "2358: }",
          "2360: OMA-LPPe-OTDOA-UTRA-ProvideLocationInformation ::= SEQUENCE {",
          "2361:      otdoaUtraMeasurement                      OMA-LPPe-OTDOA-UTRA-Measurement                      OPTIONAL,",
          "2362:      otdoaUtraError                            OMA-LPPe-OTDOA-UTRA-Error                            OPTIONAL,",
          "2363:      timeStampData                             OMA-LPPe-OTDOA-UTRA-TimeStampData                    OPTIONAL, --Cond UE-based",
          "2364:      ...",
          "2365: }",
          "2367: OMA-LPPe-OTDOA-UTRA-Measurement ::= SEQUENCE {",
          "2368:      sfn                             INTEGER (0..4095),",
          "2369:      modeSpecificInfoMeas            CHOICE {",
          "2370:           fdd                             SEQUENCE {",
          "2371:                 referenceCellIdentity                          OMA-LPPe-OTDOA-UTRA-PrimaryCPICH-Info,",
          "2372:                 ue-RX-TX-TimeDifferenceType2Info               OMA-LPPe-OTDOA-UTRA-UE-RX-TX-TimeDifferenceType2Info,",
          "2373:                 ...",
          "2374:                 },",
          "2375:           tdd                             SEQUENCE {",
          "2376:                 cellAndChannelIdentity                         OMA-LPPe-OTDOA-UTRA-CellAndChannelIdentity,",
          "2377:                 ...",
          "2378:                 }",
          "2379:      },",
          "2380:      neighborList                    OMA-LPPe-OTDOA-UTRA-NeighborList                    OPTIONAL,",
          "2381:      ...",
          "2382: }",
          "2384: OMA-LPPe-OTDOA-UTRA-UE-RX-TX-TimeDifferenceType2Info ::= SEQUENCE {",
          "2385:      ue-RX-TX-timeDifferenceType2                   OMA-LPPe-OTDOA-UTRA-TimeDifferenceType2,",
          "2386:      neighborQuality                                OMA-LPPe-OTDOA-UTRA-NeighborQuality",
          "2387: }",
          "2389: OMA-LPPe-OTDOA-UTRA-TimeDifferenceType2 ::= INTEGER (0..8191)",
          "2391: OMA-LPPe-OTDOA-UTRA-NeighborList ::= SEQUENCE (SIZE (1..utra-maxCellMeas)) OF",
          "2392:                                                          OMA-LPPe-OTDOA-UTRA-Neighbor",
          "2394: OMA-LPPe-OTDOA-UTRA-Neighbor ::= SEQUENCE {",
          "2395:      modeSpecificInfo          CHOICE {",
          "2396:           fdd                        SEQUENCE {",
          "2397:                 neighborIdentity                               OMA-LPPe-OTDOA-UTRA-PrimaryCPICH-Info   OPTIONAL,",
          "2398:                 ue-RX-TX-timeDifferenceType2Info",
          "2399:                                           OMA-LPPe-OTDOA-UTRA-UE-RX-TX-TimeDifferenceType2Info                     OPTIONAL,",
          "2400:                 ... },",
          "2401:           tdd                        SEQUENCE {",
          "2402:                 cellAndChannelIdentity              OMA-LPPe-OTDOA-UTRA-CellAndChannelIdentity  OPTIONAL,",
          "2403:                 uarfcn                              ARFCN-ValueUTRA                                           OPTIONAL,",
          "2404:                 ... }",
          "2405:      },",
          "2406:      neighborQuality                           OMA-LPPe-OTDOA-UTRA-NeighborQuality,",
          "2407:      sfn-sfn-ObsTimeDifference2                 OMA-LPPe-OTDOA-UTRA-SFN-SFN-ObsTimeDifference2,",
          "2408:      ...",
          "2409: }",
          "2411: OMA-LPPe-OTDOA-UTRA-NeighborQuality ::= SEQUENCE {",
          "2412:      quality                    OMA-LPPe-OTDOA-UTRA-Quality,",
          "2413:      ...",
          "2414: }",
          "2416: OMA-LPPe-OTDOA-UTRA-SFN-SFN-ObsTimeDifference2 ::= INTEGER (0..65535)",
          "2418: OMA-LPPe-OTDOA-UTRA-Quality ::= SEQUENCE {",
          "2419:      stdResolution                              BIT STRING (SIZE (2)),",
          "2420:      numberOfOTDOA-Measurements                 BIT STRING (SIZE (3)),",
          "2421:     stdOfOTDOA-Measurements                     BIT STRING (SIZE (5)),",
          "2422:      ...",
          "2423: }",
          "2425: OMA-LPPe-OTDOA-UTRA-TimeStampData ::= SEQUENCE {",
          "2426:      sfn                              INTEGER(0..4095),",
          "2427:      utraCellGlobalID                 CellGlobalIdEUTRA-AndUTRA,",
          "2428:      frequencyInfo                    OMA-LPPe-UTRA-FrequencyInfo                                  OPTIONAL,",
          "2429:      nonUniqueCellID                  CHOICE {",
          "2430:            primaryScramblingCode   OMA-LPPe-OTDOA-UTRA-PrimaryScramblingCode,  --FDD",
          "2431:            cellParametersId                 OMA-LPPe-OTDOA-UTRA-CellParametersID,   --TDD",
          "2432:            ...},",
          "2433:      ...",
          "2434: }",
          "2436: OMA-LPPe-OTDOA-UTRA-RequestLocationInformation ::= SEQUENCE {",
          "2437:       ...",
          "2438: }",
          "2440: OMA-LPPe-OTDOA-UTRA-ProvideCapabilities ::= SEQUENCE {",
          "2441:       ueBasedSupported           BOOLEAN,",
          "2442:       ueAssistedSupported BOOLEAN,",
          "2443:       ipdlSupported              BOOLEAN,",
          "2444:       ...",
          "2445: }",
          "2447: OMA-LPPe-OTDOA-UTRA-RequestCapabilities ::= SEQUENCE {",
          "2448:      ...",
          "2449: }",
          "2451: OMA-LPPe-OTDOA-UTRA-Error ::= CHOICE {",
          "2452:      locationServerErrorCauses                  OMA-LPPe-OTDOA-UTRA-LocationServerErrorCauses,",
          "2453:      targetDeviceErrorCauses                    OMA-LPPe-OTDOA-UTRA-TargetDeviceErrorCauses,",
          "2454:      ...",
          "2455: }",
          "2457: OMA-LPPe-OTDOA-UTRA-LocationServerErrorCauses ::= SEQUENCE {",
          "2458:      cause                 ENUMERATED{ undefinedError,",
          "2459:                                            assistanceDataForUEbasedOTDOAnotAvailable,",
          "2460:                                            assistanceDataForUEassistedOTDOAnotAvailable,",
          "2461:                                            ...},",
          "2462:      ...",
          "2463: }",
          "2465: OMA-LPPe-OTDOA-UTRA-TargetDeviceErrorCauses ::= SEQUENCE {",
          "2466:      cause                 ENUMERATED{ undefinedError,",
          "2467:                                            notEnoughOTDOA-cells,",
          "2468:                                            assistanceDataMissing,",
          "2469:                                            referenceCellNotServingCell,",
          "2470:                                            otdoaMeasurementsNotSupported,",
          "2471:                                            otdoaMeasurementsNotAvailable,",
          "2472:                                            uebasedOTDOAnotSupported,",
          "2473:                                            ...},",
          "2474:      ...",
          "2475: }",
          "2477: OMA-LPPe-OTDOA-UTRA-PrimaryCPICH-Info ::= SEQUENCE {",
          "2478:      primaryScramblingCode                  OMA-LPPe-OTDOA-UTRA-PrimaryScramblingCode",
          "2479: }",
          "2481: OMA-LPPe-OTDOA-UTRA-PrimaryScramblingCode ::= INTEGER (0..511)",
          "2483: OMA-LPPe-OTDOA-UTRA-CellAndChannelIdentity ::= SEQUENCE {",
          "2484:      burstType                   OMA-LPPe-OTDOA-UTRA-BurstType,",
          "2485:      midambleShift               OMA-LPPe-OTDOA-UTRA-MidambleShiftLong,",
          "2486:      timeslot                    OMA-LPPe-OTDOA-UTRA-TimeSlotNumber,",
          "2487:      cellParametersID            OMA-LPPe-OTDOA-UTRA-CellParametersID,",
          "2488:      ...",
          "2489: }",
          "2491: OMA-LPPe-OTDOA-UTRA-BurstType ::= ENUMERATED { type1, type2 }",
          "2493: OMA-LPPe-OTDOA-UTRA-MidambleShiftLong ::= INTEGER (0..15)",
          "2495: OMA-LPPe-OTDOA-UTRA-TimeSlotNumber ::= INTEGER (0..14)",
          "2497: OMA-LPPe-OTDOA-UTRA-CellParametersID ::= INTEGER (0..127)",
          "2499: OMA-LPPe-ECID-LTE-ProvideAssistanceData ::= SEQUENCE {",
          "2500:      ecid-LTE-NetworkData            SEQUENCE (SIZE (1..maxLTENetworks)) OF",
          "2501:                                                 OMA-LPPe-ECID-LTE-NetworkData                  OPTIONAL,",
          "2502:      ecid-LTE-Error                  OMA-LPPe-ECID-LTE-Error                                   OPTIONAL,",
          "2503:      ...",
          "2504: }",
          "2506: maxLTENetworks  INTEGER ::= 8",
          "2508: OMA-LPPe-ECID-LTE-NetworkData ::= SEQUENCE {",
          "2509:      plmn-Identity                   SEQUENCE {",
          "2510:                                           mcc        SEQUENCE (SIZE (3))             OF INTEGER (0..9),",
          "2511:                                           mnc        SEQUENCE (SIZE (2..3))  OF INTEGER (0..9),",
          "2512:                                           ...",
          "2513:                                      },",
          "2514:      multiple-PLMNs                  BOOLEAN,",
          "2515:      reference-location              OMA-LPPe-ReferencePoint              OPTIONAL,   --Cond eNBlocations",
          "2516:      ecid-lte-eNodeB-list            SEQUENCE (SIZE (1..maxLTEeNBs)) OF OMA-LPPe-ECID-LTE-eNodeBData,",
          "2517:      ecid-lte-HeNB-list              SEQUENCE (SIZE (1..maxLTEHeNBs)) OF OMA-LPPe-ECID-LTE-HeNBData  OPTIONAL,",
          "2518:      ...",
          "2519: }",
          "2521: maxLTEeNBs  INTEGER ::= 32",
          "2523: maxLTEHeNBs INTEGER ::= 128",
          "2525: OMA-LPPe-ECID-LTE-eNodeBData ::= SEQUENCE {",
          "2526:       relative-location                             OMA-LPPe-RelativeLocation                     OPTIONAL,",
          "2527:       ecid-lte-eNodeB-CellData                      SEQUENCE (SIZE (1..maxLTEMacroCells)) OF OMA-LPPe-ECID-LTE-CellData,",
          "2528:       ...",
          "2529: }",
          "2531: maxLTEMacroCells             INTEGER ::= 8",
          "2533: OMA-LPPe-ECID-LTE-HeNBData ::= SEQUENCE {",
          "2534:       relative-location                           OMA-LPPe-RelativeLocation                   OPTIONAL,",
          "2535:       location-reliability                        INTEGER (1..100)                            OPTIONAL,",
          "2536:       coverageArea                                OMA-LPPe-WLANFemtoCoverageArea  OPTIONAL,",
          "2537:       ecid-lte-HeNB-CellData                      OMA-LPPe-ECID-LTE-CellData,",
          "2538:       ...",
          "2539: }",
          "2541: OMA-LPPe-ECID-LTE-CellData ::= SEQUENCE {",
          "2542:       physCellId                                  INTEGER (0..503)                            OPTIONAL, --Cond AtLeastOne",
          "2543:       cellIdentity                                BIT STRING (SIZE (28))                      OPTIONAL, --Cond AtLeastOne",
          "2544:       dl-CarrierFreq                              ARFCN-ValueEUTRA,",
          "2545:       rs-transmit-power                           INTEGER (-127..128)                                          OPTIONAL,",
          "2546:       antennaPortConfig                           ENUMERATED {port1, ports2, ports4, ... }                     OPTIONAL,",
          "2547:       antenna-gain                                INTEGER (-127..128)                                          OPTIONAL,",
          "2548:       beam-width                                  INTEGER (1..360)                                             OPTIONAL,",
          "2549:       transmit-direction                          INTEGER (0..360)                                             OPTIONAL,",
          "2550:       frequency-accuracy                          INTEGER (0..100),",
          "2551:       ...",
          "2552: }",
          "2554: OMA-LPPe-ECID-LTE-RequestAssistanceData ::= SEQUENCE {",
          "2555:      eNBrequestedAD              BIT STRING  {   bslist                           (0),",
          "2556:                                                        bslocation                 (1),",
          "2557:                                                        transmit-power             (2),",
          "2558:                                                        antennaPortConfig   (3),",
          "2559:                                                        antenna-gain               (4),",
          "2560:                                                        beam-width                 (5),",
          "2561:                                                        transmit-direction  (6),",
          "2562:                                                        frequency-accuracy  (7),",
          "2563:                                                        non-serving                (8) } (SIZE(1..16)) OPTIONAL,",
          "2564:      heNBrequestedAD             BIT STRING  {   bslist                           (0),",
          "2565:                                                        bslocation                 (1),",
          "2566:                                                        locationreliability (2),",
          "2567:                                                        transmit-power             (3),",
          "2568:                                                        antennaPortConfig   (4),",
          "2569:                                                        frequency-accuracy  (5),",
          "2570:                                                        coveragearea               (6),",
          "2571:                                                        non-serving                (7) } (SIZE(1..16)) OPTIONAL,",
          "2572:      ...",
          "2573: }",
          "2575: OMA-LPPe-ECID-LTE-ProvideLocationInformation ::= SEQUENCE {",
          "2576:       ecid-LTE-CombinedLocationInformation                      SEQUENCE (SIZE (1..maxLTEECIDSize))",
          "2577:                                                             OF OMA-LPPe-ECID-LTE-LocationInformationList                      OPTIONAL,",
          "2578:      ecid-LTE-Error                                         OMA-LPPe-ECID-LTE-Error OPTIONAL,",
          "2579:      ...",
          "2580: }",
          "2582: OMA-LPPe-ECID-LTE-LocationInformationList ::= SEQUENCE {",
          "2583:      ecid-LTE-LocationInformation                OMA-LPPe-ECID-LTE-LocationInformation,",
          "2584:      relativeTimeStamp                           INTEGER (0..65535)                                     OPTIONAL,",
          "2585:      servingFlag                                 BOOLEAN,",
          "2586:      ...",
          "2587: }",
          "2589: maxLTEECIDSize  INTEGER ::= 64",
          "2591: OMA-LPPe-ECID-LTE-LocationInformation ::= SEQUENCE {",
          "2592:      lpp-ECID-SignalMeasurementInformation                        ECID-SignalMeasurementInformation,",
          "2593:      ...",
          "2594: }",
          "2596: OMA-LPPe-ECID-LTE-RequestLocationInformation ::= SEQUENCE {",
          "2597:      requestedMeasurements   BIT STRING {    rsrp                          (0),",
          "2598:                                                            rsrq            (1),",
          "2599:                                                            ueRxTx          (2),",
          "2600:                                                            non-serving (3),",
          "2601:                                                            historic        (4) } (SIZE(1..8)),",
          "2602:      ...",
          "2603: }",
          "2605: OMA-LPPe-ECID-LTE-ProvideCapabilities ::= SEQUENCE {",
          "2606:      ecid-lte-MeasSupported  BIT STRING  {rsrp                       (0),",
          "2607:                                                      rsrq            (1),",
          "2608:                                                      ueRxTx          (2),",
          "2609:                                                      non-serving (3),",
          "2610:                                                      historic        (4) } (SIZE(1..8)),",
          "2611:      ecid-lte-eNodeB-ADSupported BIT STRING  {bslist                                  (0),",
          "2612:                                                             bslocation               (1),",
          "2613:                                                             transmit-power           (2),",
          "2614:                                                             antennaPortConfig  (3),",
          "2615:                                                             antenna-gain             (4),",
          "2616:                                                             beam-width               (5),",
          "2617:                                                             transmit-direction (6),",
          "2618:                                                             frequency-accuracy (7),",
          "2619:                                                             non-serving              (8) } (SIZE(1..16)),",
          "2620:      ecid-utra-HeNB-ADSupported  BIT STRING  {bslist                                       (0),",
          "2621:                                                             bslocation                     (1),",
          "2622:                                                             locationreliability            (2),",
          "2623:                                                             transmit-power                 (3),",
          "2624:                                                             antennaPortConfig              (4),",
          "2625:                                                                   frequency-accuracy                 (5),",
          "2626:                                                                   coveragearea                       (6),",
          "2627:                                                                   non-serving                        (7) } (SIZE(1..16)),",
          "2628:       ...",
          "2629: }",
          "2631: OMA-LPPe-ECID-LTE-RequestCapabilities ::= SEQUENCE {",
          "2632:      ...",
          "2633: }",
          "2635: OMA-LPPe-ECID-LTE-Error ::= CHOICE {",
          "2636:      locationServerErrorCauses                 OMA-LPPe-ECID-LTE-LocationServerErrorCauses,",
          "2637:      targetDeviceErrorCauses                   OMA-LPPe-ECID-LTE-TargetDeviceErrorCauses,",
          "2638:      ...",
          "2639: }",
          "2641: OMA-LPPe-ECID-LTE-LocationServerErrorCauses ::= SEQUENCE {",
          "2642:      cause           ENUMERATED  {   undefined,",
          "2643:                                           requestedADNotAvailable,",
          "2644:                                           notAllrequestedADAvailable,",
          "2645:                                           ...",
          "2646:                                      },",
          "2647:      eNodeBMandatoryDataUnavailable                       NULL            OPTIONAL,",
          "2648:      eNodeBLocationsUnavailable                           NULL            OPTIONAL,",
          "2649:      eNodeBcellTransmitPowerUnavailable                   NULL            OPTIONAL,",
          "2650:      eNodeBcellAntennaPortConfigUnavailable  NULL                         OPTIONAL,",
          "2651:      eNodeBcallAntennaGainUnavailable                     NULL            OPTIONAL,",
          "2652:      eNodeBcellBeamWidthUnavailable                       NULL            OPTIONAL,",
          "2653:      eNodeBcellTransmitDirectionUnavailable  NULL                         OPTIONAL,",
          "2654:      eNodeBcellFrequencyAccuracyUnavailable  NULL                         OPTIONAL,",
          "2655:      eNodeBnonservingADUnavailable                        NULL            OPTIONAL,",
          "2656:      heNBMandatoryDataUnavailable                         NULL            OPTIONAL,",
          "2657:      heNBLocationUnavailable                              NULL            OPTIONAL,",
          "2658:      heNBLocationReliabilityUnavailable                   NULL            OPTIONAL,",
          "2659:      heNBcellTransmitPowerUnavailable                     NULL            OPTIONAL,",
          "2660:      heNBcellAntennaPortConfigUnavailable                 NULL            OPTIONAL,",
          "2661:      heNBcellFrequencyAccuracyUnavailable                 NULL            OPTIONAL,",
          "2662:      heNBCoverageAreaUnavailable                          NULL            OPTIONAL,",
          "2663:       heNBnonservingADUnavailable                           NULL             OPTIONAL,",
          "2664:       ...",
          "2665: }",
          "2667: OMA-LPPe-ECID-LTE-TargetDeviceErrorCauses ::= SEQUENCE {",
          "2668:       cause           ENUMERATED {undefined,",
          "2669:                                       requestedMeasurementsNotAvailable,",
          "2670:                                       notAllrequestedMeasurementsPossible,",
          "2671:                                       ...",
          "2672:                                       },",
          "2673:       rsrpMeasurementNotPossible                       NULL            OPTIONAL,",
          "2674:       rsrqMeasurementNotPossible                       NULL            OPTIONAL,",
          "2675:       ueRxTxMeasurementNotPossible                     NULL            OPTIONAL,",
          "2676:       non-servingMeasurementsNotAvailable NULL                         OPTIONAL,",
          "2677:       historicMeasurementsNotAvailable                 NULL            OPTIONAL,",
          "2678:       ...",
          "2679: }",
          "2681: OMA-LPPe-ECID-GSM-ProvideAssistanceData ::= SEQUENCE {",
          "2682:       ecid-gsm-NetworkData             SEQUENCE (SIZE (1..maxGSMNetworks))",
          "2683:                                                                         OF OMA-LPPe-ECID-GSM-NetworkData                        OPTIONAL,",
          "2684:       ecid-gsm-Error                   OMA-LPPe-ECID-GSM-Error OPTIONAL,",
          "2685:       ...",
          "2686: }",
          "2688: maxGSMNetworks  INTEGER ::= 8",
          "2690: OMA-LPPe-ECID-GSM-NetworkData ::= SEQUENCE {",
          "2691:       plmn-Identity              SEQUENCE {",
          "2692:                                        mcc        SEQUENCE (SIZE (3))              OF INTEGER (0..9),",
          "2693:                                        mnc        SEQUENCE (SIZE (2..3))  OF INTEGER (0..9)",
          "2694:                                        },",
          "2695:       reference-location  OMA-LPPe-ReferencePoint                       OPTIONAL,   --Cond BSlocations",
          "2696:       base-station-list   SEQUENCE (SIZE (1..maxGSMBaseStations)) OF OMA-LPPe-ECID-GSM-BaseStationData,",
          "2697:       ...",
          "2698: }",
          "2700: maxGSMBaseStations  INTEGER ::= 32",
          "2702: OMA-LPPe-ECID-GSM-BaseStationData ::= SEQUENCE {",
          "2703:      relative-location                           OMA-LPPe-RelativeLocation                   OPTIONAL,",
          "2704:      ecid-gsm-CellData                           SEQUENCE (SIZE (1..maxGSMCells)) OF OMA-LPPe-ECID-GSM-CellData,",
          "2705:      ...",
          "2706: }",
          "2708: maxGSMCells INTEGER ::= 8",
          "2710: OMA-LPPe-ECID-GSM-CellData ::= SEQUENCE {",
          "2711:      cellNonUniqueIDGERAN                        OMA-LPPe-CellNonUniqueIDGERAN   OPTIONAL, --Cond AtLeastOne",
          "2712:      cellLocalIDGERAN                            OMA-LPPe-CellLocalIdGERAN                   OPTIONAL, --Cond AtLeastOne",
          "2713:      transmit-power                              INTEGER (-127..128)                         OPTIONAL,",
          "2714:      antenna-gain                                INTEGER (-127..128)                         OPTIONAL,",
          "2715:      beam-width                                  INTEGER (1..360)                            OPTIONAL,",
          "2716:      transmit-direction                          INTEGER (0..360)                            OPTIONAL,",
          "2717:      frequency-accuracy                          INTEGER (0..100)                            OPTIONAL,",
          "2718:      ...",
          "2719: }",
          "2721: OMA-LPPe-ECID-GSM-RequestAssistanceData ::= SEQUENCE {",
          "2722:       requestedAD           BIT STRING  {   bslist                            (0),",
          "2723:                                                   bslocation                  (1),",
          "2724:                                                   transmit-power              (2),",
          "2725:                                                   antenna-gain                (3),",
          "2726:                                                   beam-width                  (4),",
          "2727:                                                   transmit-direction  (5),",
          "2728:                                                   frequency-accuracy  (6),",
          "2729:                                                   non-serving                 (7)",
          "2730:                                                    } (SIZE(1..16)),",
          "2731:       ...",
          "2732: }",
          "2734: OMA-LPPe-ECID-GSM-ProvideLocationInformation ::= SEQUENCE {",
          "2735:      ecid-GSM-CombinedLocationInformation                  SEQUENCE (SIZE (1..maxGSMECIDSize))",
          "2736:                                                            OF OMA-LPPe-ECID-GSM-LocationInformationList                    OPTIONAL,",
          "2737:      ecid-GSM-Error                                        OMA-LPPe-ECID-GSM-Error                                         OPTIONAL,",
          "2738:      ...",
          "2739: }",
          "2741: OMA-LPPe-ECID-GSM-LocationInformationList ::= SEQUENCE {",
          "2742:      ecid-GSM-LocationInformation               OMA-LPPe-ECID-GSM-LocationInformation,",
          "2743:      relativeTimeStamp                          INTEGER (0..65535)  OPTIONAL,",
          "2744:      servingFlag                                BOOLEAN,",
          "2745:      ...",
          "2746: }",
          "2748: maxGSMECIDSize  INTEGER ::= 64",
          "2750: OMA-LPPe-ECID-GSM-LocationInformation ::= SEQUENCE {",
          "2751:      cellGlobalIdGERAN               CellGlobalIdGERAN,",
          "2752:      rxLevel                         INTEGER (0..63)                            OPTIONAL,",
          "2753:      tA                              INTEGER(0..255)                            OPTIONAL,",
          "2754:      nMR-GERAN                       OMA-LPPe-NMR-GERAN                         OPTIONAL,",
          "2755:      ...",
          "2756: }",
          "2758: OMA-LPPe-NMR-GERAN ::= SEQUENCE (SIZE (1..15)) OF SEQUENCE {",
          "2759:       cellNonUniqueIDGERAN            OMA-LPPe-CellNonUniqueIDGERAN,",
          "2760:       cellLocalIDGERAN                OMA-LPPe-CellLocalIdGERAN                              OPTIONAL,",
          "2761:       rxLevel                         INTEGER (0..63),",
          "2762:       ...",
          "2763: }",
          "2765: OMA-LPPe-ECID-GSM-RequestLocationInformation ::= SEQUENCE {",
          "2766:       requestedMeasurements   BIT STRING {    rxLevel                        (0),",
          "2767:                                                             tA               (1),",
          "2768:                                                             nMR-GERAN   (2),",
          "2769:                                                             non-serving (3),",
          "2770:                                                             historic         (4) } (SIZE(1..8)),",
          "2771:       ...",
          "2772: }",
          "2774: OMA-LPPe-ECID-GSM-ProvideCapabilities ::= SEQUENCE {",
          "2775:       ecid-gsm-MeasSupported  BIT STRING {    rxLevel                          (0),",
          "2776:                                                               tA               (1),",
          "2777:                                                               nMR-GERAN   (2),",
          "2778:                                                               non-serving (3),",
          "2779:                                                               historic         (4) } (SIZE(1..8)),",
          "2780:       ecid-gsm-ADSupported              BIT STRING  { bslist                               (0),",
          "2781:                                                            bslocation                      (1),",
          "2782:                                                            transmit-power                  (2),",
          "2783:                                                            antenna-gain                    (3),",
          "2784:                                                            beam-width                      (4),",
          "2785:                                                            transmit-direction              (5),",
          "2786:                                                            frequency-accuracy              (6),",
          "2787:                                                            non-serving                     (7) } (SIZE(1..16)),",
          "2788:       ...",
          "2789: }",
          "2791: OMA-LPPe-ECID-GSM-RequestCapabilities ::= SEQUENCE {",
          "2792:       ...",
          "2793:  }",
          "2795: OMA-LPPe-ECID-GSM-Error ::= CHOICE {",
          "2796:       locationServerErrorCauses                     OMA-LPPe-ECID-GSM-LocationServerErrorCauses,",
          "2797:       targetDeviceErrorCauses                       OMA-LPPe-ECID-GSM-TargetDeviceErrorCauses,",
          "2798:       ...",
          "2799:  }",
          "2801: OMA-LPPe-ECID-GSM-LocationServerErrorCauses ::= SEQUENCE {",
          "2802:      cause           ENUMERATED  {   undefined,",
          "2803:                                            requestedADNotAvailable,",
          "2804:                                            notAllrequestedADAvailable,",
          "2805:                                            ...",
          "2806:                                      },",
          "2807:      mandatoryDataUnavailable                        NULL            OPTIONAL,",
          "2808:      bsLocationsUnavailable                          NULL            OPTIONAL,",
          "2809:      cellTransmitPowerUnavailable                    NULL            OPTIONAL,",
          "2810:      callAntennaGainUnavailable                      NULL            OPTIONAL,",
          "2811:      cellBeamWidthUnavailable                        NULL            OPTIONAL,",
          "2812:      cellTransmitDirectionUnavailable                NULL            OPTIONAL,",
          "2813:      cellFrequencyAccuracyUnavailable                NULL            OPTIONAL,",
          "2814:      nonservingADUnavailable                         NULL            OPTIONAL,",
          "2815:      ...",
          "2816: }",
          "2818: OMA-LPPe-ECID-GSM-TargetDeviceErrorCauses ::= SEQUENCE {",
          "2819:      cause           ENUMERATED {          undefined,",
          "2820:                                            requestedMeasurementsNotAvailable,",
          "2821:                                            notAllrequestedMeasurementsPossible,",
          "2822:                                            ...",
          "2823:                                      },",
          "2824:      rxLevelMeasurementNotPossible                   NULL            OPTIONAL,",
          "2825:      taMeasurementNotPossible                        NULL            OPTIONAL,",
          "2826:      nMRMeasurementNotPossible                       NULL            OPTIONAL,",
          "2827:      non-servingMeasurementsNotAvailable NULL                        OPTIONAL,",
          "2828:      historicMeasurementsNotAvailable                NULL            OPTIONAL,",
          "2829:      ...",
          "2830: }",
          "2832: OMA-LPPe-ECID-UTRA-ProvideAssistanceData ::= SEQUENCE {",
          "2833:      ecid-UTRA-NetworkData   SEQUENCE (SIZE (1..maxUTRANetworks))",
          "2834:                                                                     OF OMA-LPPe-ECID-UTRA-NetworkData                    OPTIONAL,",
          "2835:      ecid-UTRA-Error                 OMA-LPPe-ECID-UTRA-Error                                                            OPTIONAL,",
          "2836:      ...",
          "2837: }",
          "2839: maxUTRANetworks INTEGER ::= 8",
          "2841: OMA-LPPe-ECID-UTRA-NetworkData ::= SEQUENCE {",
          "2842:      plmn-Identity                   SEQUENCE {",
          "2843:                                           mcc        SEQUENCE (SIZE (3))            OF INTEGER (0..9),",
          "2844:                                           mnc        SEQUENCE (SIZE (2..3))  OF INTEGER (0..9)",
          "2845:                                      },",
          "2846:      multiple-PLMNs                  BOOLEAN,",
          "2847:      reference-location              OMA-LPPe-ReferencePoint              OPTIONAL,   --Cond nodeBlocations",
          "2848:      ecid-utra-nodeB-list            SEQUENCE (SIZE (1..maxUTRAnodeBs))",
          "2849:                                                                                OF OMA-LPPe-ECID-UTRA-NodeBData OPTIONAL,",
          "2850:      ecid-utra-HNB-list              SEQUENCE (SIZE (1..maxUTRAHNBs)) OF OMA-LPPe-ECID-UTRA-HNBData  OPTIONAL,",
          "2851:      ...",
          "2852: }",
          "2854: maxUTRAnodeBs   INTEGER ::= 32",
          "2856: maxUTRAHNBs          INTEGER ::= 128",
          "2858: OMA-LPPe-ECID-UTRA-NodeBData ::= SEQUENCE {",
          "2859:       relative-location                             OMA-LPPe-RelativeLocation                     OPTIONAL,",
          "2860:       ecid-utra-nodeB-CellData                      SEQUENCE (SIZE (1..maxUTRAMacroCells)) OF",
          "2861:                                                                                                              OMA-LPPe-ECID-UTRA-CellData,",
          "2862:       ...",
          "2863: }",
          "2865: maxUTRAMacroCells   INTEGER ::= 8",
          "2867: OMA-LPPe-ECID-UTRA-HNBData ::= SEQUENCE {",
          "2868:      relative-location                          OMA-LPPe-RelativeLocation                  OPTIONAL,",
          "2869:      location-reliability                       INTEGER (1..100)                         OPTIONAL,",
          "2870:      coverageArea                               OMA-LPPe-WLANFemtoCoverageArea  OPTIONAL,",
          "2871:      ecid-utra-HNB-CellData                     OMA-LPPe-ECID-UTRA-CellData,",
          "2872:      ...",
          "2873: }",
          "2875: OMA-LPPe-ECID-UTRA-CellData ::= SEQUENCE {",
          "2876:      cellIdentity                               BIT STRING (SIZE (32))  OPTIONAL, --Cond AtLeastOne",
          "2877:      modeSpecificInfo                           CHOICE {",
          "2878:                            fdd",
          "2879:                                 SEQUENCE {",
          "2880:                                     primaryCPICH-Scrambling-Code                OMA-LPPe-OTDOA-UTRA-PrimaryScramblingCode,",
          "2881:                                     primaryCPICH-Tx-Power                       INTEGER (-127..128)             OPTIONAL,",
          "2882:                                     uarfcn-dl                                   ARFCN-ValueUTRA,",
          "2883:                                      ...",
          "2884:                                      },",
          "2885:                            tdd",
          "2886:                                 SEQUENCE {",
          "2887:                                     cellParametersID                       OMA-LPPe-OTDOA-UTRA-CellParametersID,",
          "2888:                             primaryCCPCH-Tx-Power                          INTEGER (-127..128)                  OPTIONAL,",
          "2889:                                     uarfcn-nt                              ARFCN-ValueUTRA,",
          "2890:                                      ...",
          "2891:                                      }",
          "2892:            }   OPTIONAL, --Cond AtLeastOne",
          "2893:      antenna-gain                               INTEGER (-127..128)                        OPTIONAL,",
          "2894:      beam-width                                 INTEGER (1..360)                           OPTIONAL,",
          "2895:       transmit-direction                           INTEGER (0..360)                              OPTIONAL,",
          "2896:       frequency-accuracy                           INTEGER (0..100)                              OPTIONAL,",
          "2897:       ...",
          "2898: }",
          "2900: OMA-LPPe-ECID-UTRA-RequestAssistanceData ::= SEQUENCE {",
          "2901:       nBrequestedAD               BIT STRING  {   bslist                             (0),",
          "2902:                                                         bslocation                 (1),",
          "2903:                                                         transmit-power             (2),",
          "2904:                                                         antenna-gain               (3),",
          "2905:                                                         beam-width                 (4),",
          "2906:                                                         transmit-direction  (5),",
          "2907:                                                         frequency-accuracy  (6),",
          "2908:                                                         non-serving                (7) } (SIZE(1..16)) OPTIONAL,",
          "2909:       hNBrequestedAD             BIT STRING  {   bslist                            (0),",
          "2910:                                                         bslocation                 (1),",
          "2911:                                                         locationreliability (2),",
          "2912:                                                         transmit-power             (3),",
          "2913:                                                         frequency-accuracy  (4),",
          "2914:                                                         coveragearea               (5),",
          "2915:                                                         non-serving                (6) } (SIZE(1..16)) OPTIONAL,",
          "2916:       ...",
          "2917: }",
          "2919: OMA-LPPe-ECID-UTRA-ProvideLocationInformation ::= SEQUENCE {",
          "2920:      ecid-UTRA-CombinedLocationInformation                      SEQUENCE (SIZE (1..maxECIDUTRASize))",
          "2921:                                                            OF OMA-LPPe-ECID-UTRA-LocationInformationList   OPTIONAL,",
          "2922:      ecid-Error            OMA-LPPe-ECID-UTRA-Error             OPTIONAL,",
          "2923:      ...",
          "2924: }",
          "2926: OMA-LPPe-ECID-UTRA-LocationInformationList ::= SEQUENCE {",
          "2927:      ecid-utra-LocationInformation                    OMA-LPPe-ECID-UTRA-LocationInformation,",
          "2928:      relativeTimeStamp                                INTEGER (0..65535)  OPTIONAL,",
          "2929:      servingFlag                                      BOOLEAN,",
          "2930:      ...",
          "2931: }",
          "2933: maxECIDUTRASize INTEGER ::= 64",
          "2935: OMA-LPPe-ECID-UTRA-LocationInformation ::= SEQUENCE {",
          "2936:      cellGlobalIdUTRA                 CellGlobalIdEUTRA-AndUTRA,",
          "2937:      frequencyInfo                    OMA-LPPe-UTRA-FrequencyInfo                                     OPTIONAL,",
          "2938:      primaryScramblingCode   OMA-LPPe-OTDOA-UTRA-PrimaryScramblingCode                                OPTIONAL,   --Cond FDD",
          "2939:      measuredResultsList              OMA-LPPe-ECID-UTRA-MeasuredResultsList                          OPTIONAL,",
          "2940:      cellParametersId                 OMA-LPPe-OTDOA-UTRA-CellParametersID                            OPTIONAL,   --Cond TDD",
          "2941:      utratimingAdvance                OMA-LPPe-ECID-UTRA-UTRATimingAdvance                            OPTIONAL,   --Cond TDD",
          "2942:      ...",
          "2943: }",
          "2945: OMA-LPPe-ECID-UTRA-UTRATimingAdvance ::= SEQUENCE {",
          "2946:      tA                           INTEGER (0..8191),",
          "2947:      tAResolution                 OMA-LPPe-ECID-UTRA-TAResolution                      OPTIONAL,",
          "2948:      chipRate                     OMA-LPPe-ECID-UTRA-ChipRate                          OPTIONAL,",
          "2949:      ...",
          "2950: }",
          "2952: OMA-LPPe-ECID-UTRA-TAResolution ::= ENUMERATED {",
          "2953:      res1-0chip,",
          "2954:      res0-5chip,",
          "2955:      res0-125chip,",
          "2956:      ...",
          "2957: }",
          "2959: OMA-LPPe-ECID-UTRA-ChipRate ::= ENUMERATED {",
          "2960:      tdd128,",
          "2961:      tdd384,",
          "2962:      tdd768,",
          "2963:      ...",
          "2964: }",
          "2967: OMA-LPPe-UTRA-FrequencyInfo ::= SEQUENCE {",
          "2968:      modeSpecificInfo             OMA-LPPe-UTRA-ModeSpecificInfo,",
          "2969:      ...",
          "2970: }",
          "2972: OMA-LPPe-UTRA-ModeSpecificInfo ::= CHOICE {",
          "2973:      fdd           OMA-LPPe-UTRA-FrequencyInfoFDD,",
          "2974:      tdd           OMA-LPPe-UTRA-FrequencyInfoTDD,",
          "2975:      ...",
          "2976: }",
          "2978: OMA-LPPe-UTRA-FrequencyInfoFDD ::= SEQUENCE {",
          "2979:      uarfcn-UL          ARFCN-ValueUTRA         OPTIONAL,",
          "2980:      uarfcn-DL          ARFCN-ValueUTRA,",
          "2981:      ...}",
          "2983: OMA-LPPe-UTRA-FrequencyInfoTDD ::= SEQUENCE {",
          "2984:      uarfcn-Nt          ARFCN-ValueUTRA,",
          "2985:      ...",
          "2986: }",
          "2988: OMA-LPPe-ECID-UTRA-MeasuredResultsList ::= SEQUENCE (SIZE (1..maxFreq)) OF",
          "2989:                                                                                   OMA-LPPe-ECID-UTRA-MeasuredResults",
          "2991: OMA-LPPe-ECID-UTRA-MeasuredResults ::= SEQUENCE {",
          "2992:      frequencyInfo                     OMA-LPPe-UTRA-FrequencyInfo,",
          "2993:      utra-CarrierRSSI                  OMA-LPPe-ECID-UTRA-CarrierRSSI                            OPTIONAL,",
          "2994:      cellMeasuredResultsList           OMA-LPPe-ECID-UTRA-CellMeasuredResultsList                OPTIONAL,",
          "2995:      ...",
          "2996: }",
          "2998: OMA-LPPe-ECID-UTRA-CellMeasuredResultsList ::= SEQUENCE (SIZE (1..utra-maxCellMeas)) OF",
          "2999:                                                                               OMA-LPPe-ECID-UTRA-CellMeasuredResults",
          "3001: OMA-LPPe-ECID-UTRA-CarrierRSSI ::= INTEGER(0..127)",
          "3003: OMA-LPPe-ECID-UTRA-CellMeasuredResults ::= SEQUENCE {",
          "3004:      cellIdentity            BIT STRING (SIZE (32))            OPTIONAL,",
          "3005:      modeSpecificInfo        CHOICE",
          "3006:      {",
          "3007:           fdd",
          "3008:                    SEQUENCE {",
          "3009:                              primaryCPICH-Info   OMA-LPPe-OTDOA-UTRA-PrimaryScramblingCode,",
          "3010:                         cpich-Ec-N0         OMA-LPPe-ECID-UTRA-CPICH-Ec-N0                            OPTIONAL,",
          "3011:                         cpich-RSCP          OMA-LPPe-ECID-UTRA-CPICH-RSCP                             OPTIONAL,",
          "3012:                         pathloss            OMA-LPPe-ECID-UTRA-Pathloss                               OPTIONAL,",
          "3013:                              ...",
          "3014:                    },",
          "3015:           tdd",
          "3016:                       SEQUENCE {",
          "3017:                                  cellParametersID    OMA-LPPe-OTDOA-UTRA-CellParametersID,",
          "3018:                         primaryCCPCH-RSCP   OMA-LPPe-ECID-UTRA-PrimaryCCPCH-RSCP    OPTIONAL,",
          "3019:                         pathloss            OMA-LPPe-ECID-UTRA-Pathloss                                            OPTIONAL,",
          "3020:                                  ...",
          "3021:                       }",
          "3022:      },",
          "3023:      ...",
          "3024: }",
          "3026: OMA-LPPe-ECID-UTRA-PrimaryCCPCH-RSCP ::= INTEGER(0..127)",
          "3028: OMA-LPPe-ECID-UTRA-CPICH-Ec-N0 ::= INTEGER(0..63)",
          "3030: OMA-LPPe-ECID-UTRA-CPICH-RSCP ::= INTEGER(0..127)",
          "3032: OMA-LPPe-ECID-UTRA-Pathloss ::= INTEGER(46..173)",
          "3034: maxFreq INTEGER ::= 8",
          "3036: OMA-LPPe-ECID-UTRA-RequestLocationInformation ::= SEQUENCE {",
          "3037:      requestedMeasurements                  BIT STRING {         measuredResultsList                    (0),",
          "3038:                                                                  tdd-timingAdvance                      (1),",
          "3039:                                                                  mRL-utra-CarrierRSSI                   (2),",
          "3040:                                                                  mRL-FDD-cpich-Ec-N0                    (3),",
          "3041:                                                                  mRL-FDD-cpich-RSCP                     (4),",
          "3042:                                                                  mRL-FDD-pathloss                       (5),",
          "3043:                                                                  mRL-TDD-primaryCCPCH-RSCP   (6),",
          "3044:                                                                  mRL-TDD-pathloss                       (7),",
          "3045:                                                                  non-serving                            (8),",
          "3046:                                                                  historic                               (9) } (SIZE(1..16)),",
          "3047:            ...",
          "3048: }",
          "3050: OMA-LPPe-ECID-UTRA-ProvideCapabilities ::= SEQUENCE {",
          "3051:      ecid-utra-MeasSupported BIT STRING {                 measuredResultsList                        (0),",
          "3052:                                                                 tdd-timingAdvance                    (1),",
          "3053:                                                                 mRL-utra-CarrierRSSI                 (2),",
          "3054:                                                                 mRL-FDD-cpich-Ec-N0                  (3),",
          "3055:                                                                 mRL-FDD-cpich-RSCP                   (4),",
          "3056:                                                                 mRL-FDD-pathloss                     (5),",
          "3057:                                                                 mRL-TDD-primaryCCPCH-RSCP   (6),",
          "3058:                                                                 mRL-TDD-pathloss                     (7),",
          "3059:                                                                 non-serving                          (8),",
          "3060:                                                                 historic                             (9) } (SIZE(1..16)),",
          "3061:      ecid-utra-nodeB-ADSupported BIT STRING  { bslist                                     (0),",
          "3062:                                                             bslocation                    (1),",
          "3063:                                                             transmit-power                (2),",
          "3064:                                                             antenna-gain                  (3),",
          "3065:                                                             beam-width                    (4),",
          "3066:                                                             transmit-direction            (5),",
          "3067:                                                             frequency-accuracy            (6),",
          "3068:                                                             non-serving                   (7) } (SIZE(1..16)),",
          "3069:      ecid-utra-HNB-ADSupported   BIT STRING  { bslist                                     (0),",
          "3070:                                                             bslocation                    (1),",
          "3071:                                                             locationreliability   (2),",
          "3072:                                                             transmit-power                (3),",
          "3073:                                                             frequency-accuracy            (4),",
          "3074:                                                             coveragearea                  (5),",
          "3075:                                                             non-serving                   (6) } (SIZE(1..16)),",
          "3076:      ...",
          "3077: }",
          "3079: OMA-LPPe-ECID-UTRA-RequestCapabilities ::= SEQUENCE {",
          "3080:      ...",
          "3081: }",
          "3083: OMA-LPPe-ECID-UTRA-Error ::= CHOICE {",
          "3084:      locationServerErrorCauses                  OMA-LPPe-ECID-UTRA-LocationServerErrorCauses,",
          "3085:      targetDeviceErrorCauses                    OMA-LPPe-ECID-UTRA-TargetDeviceErrorCauses,",
          "3086:      ...",
          "3087: }",
          "3089: OMA-LPPe-ECID-UTRA-LocationServerErrorCauses ::= SEQUENCE {",
          "3090:      cause           ENUMERATED  {   undefined,",
          "3091:                                           requestedADNotAvailable,",
          "3092:                                           notAllrequestedADAvailable,",
          "3093:                                           ...",
          "3094:                                      },",
          "3095:      nodeBMandatoryDataUnavailable                        NULL            OPTIONAL,",
          "3096:      nodeBLocationUnavailable                             NULL            OPTIONAL,",
          "3097:      nodeBcellTransmitPowerUnavailable                    NULL            OPTIONAL,",
          "3098:      nodeBcallAntennaGainUnavailable                      NULL            OPTIONAL,",
          "3099:      nodeBcellBeamWidthUnavailable                        NULL            OPTIONAL,",
          "3100:      nodeBcellTransmitDirectionUnavailable   NULL                         OPTIONAL,",
          "3101:      nodeBcellFrequencyAccuracyUnavailable   NULL                         OPTIONAL,",
          "3102:      nodeBnonservingADUnavailable                         NULL            OPTIONAL,",
          "3103:      hNBMandatoryDataUnavailable                          NULL            OPTIONAL,",
          "3104:      hNBLocationUnavailable                               NULL            OPTIONAL,",
          "3105:      hNBLocationReliabilityUnavailable                    NULL            OPTIONAL,",
          "3106:      hNBcellTransmitPowerUnavailable                      NULL            OPTIONAL,",
          "3107:      hNBcellFrequencyAccuracyUnavailable                  NULL            OPTIONAL,",
          "3108:      hNBCoverageAreaUnavailable                           NULL            OPTIONAL,",
          "3109:      hNBnonservingADUnavailable                           NULL            OPTIONAL,",
          "3110:      ...",
          "3111: }",
          "3113: OMA-LPPe-ECID-UTRA-TargetDeviceErrorCauses ::= SEQUENCE {",
          "3114:      cause            ENUMERATED {         undefined,",
          "3115:                                            requestedMeasurementsNotAvailable,",
          "3116:                                            notAllrequestedMeasurementsPossible,",
          "3117:                                            ...",
          "3118:                                       },",
          "3119:      mRLMeasurementsNotPossible                                            NULL            OPTIONAL,",
          "3120:      tdd-timingAdvanceMeasurementNotPossible                               NULL            OPTIONAL,",
          "3121:      mRL-utra-CarrierRSSIMeasurementNotPossible                            NULL            OPTIONAL,",
          "3122:      mRL-FDD-cpich-Ec-N0MeasurementNotPossible                             NULL            OPTIONAL,",
          "3123:      mRL-FDD-cpich-RSCPMeasurementNotPossible                              NULL            OPTIONAL,",
          "3124:      mRL-FDD-pathlossMeasurementNotPossible                                NULL            OPTIONAL,",
          "3125:      mRL-TDD-primaryCCPCH-RSCPMeasurementNotPossible                       NULL            OPTIONAL,",
          "3126:      mRL-TDD-pathlossMeasurementNotPossible                                NULL            OPTIONAL,",
          "3127:      non-servingMeasurementsNotAvailable                                   NULL            OPTIONAL,",
          "3128:      historicMeasurementsNotAvailable                                      NULL            OPTIONAL,",
          "3129:      ...",
          "3130: }",
          "3132: OMA-LPPe-WLAN-AP-ProvideAssistanceData ::= SEQUENCE {",
          "3133:      wlan-DataSet        SEQUENCE (SIZE (1..maxWLANDataSets)) OF OMA-LPPe-WLAN-DataSet   OPTIONAL,",
          "3134:      wlan-AP-Error   OMA-LPPe-WLAN-AP-Error                                                               OPTIONAL,",
          "3135:      ...",
          "3136: }",
          "3138: maxWLANDataSets INTEGER ::= 8",
          "3140: OMA-LPPe-WLAN-DataSet ::= SEQUENCE {",
          "3141:      plmn-Identity                      SEQUENCE {",
          "3142:                                              mcc       SEQUENCE (SIZE (3))            OF INTEGER (0..9),",
          "3143:                                              mnc       SEQUENCE (SIZE (2..3))  OF INTEGER (0 ..9)",
          "3144:                                              }   OPTIONAL,",
          "3145:      reference-point                    OMA-LPPe-ReferencePoint             OPTIONAL,   --Cond APlocations",
          "3146:      supported-channels-11a             Supported-Channels-11a  OPTIONAL,",
          "3147:      supported-channels-11bg            Supported-Channels-11bg OPTIONAL,",
          "3148:      wlan-ap-list                       SEQUENCE (SIZE (1..maxWLANAPs)) OF OMA-LPPe-WLAN-AP-Data,",
          "3149:      ...",
          "3150: }",
          "3152: maxWLANAPs  INTEGER ::= 128",
          "3154: Supported-Channels-11a ::= SEQUENCE {",
          "3155:      ch34    BOOLEAN,",
          "3156:      ch36    BOOLEAN,",
          "3157:      ch38    BOOLEAN,",
          "3158:      ch40    BOOLEAN,",
          "3159:      ch42    BOOLEAN,",
          "3160:      ch44    BOOLEAN,",
          "3161:      ch46    BOOLEAN,",
          "3162:      ch48    BOOLEAN,",
          "3163:      ch52    BOOLEAN,",
          "3164:      ch56    BOOLEAN,",
          "3165:      ch60    BOOLEAN,",
          "3166:      ch64    BOOLEAN,",
          "3167:      ch149   BOOLEAN,",
          "3168:      ch153   BOOLEAN,",
          "3169:      ch157   BOOLEAN,",
          "3170:      ch161   BOOLEAN",
          "3171: }",
          "3173: Supported-Channels-11bg ::= SEQUENCE {",
          "3174:      ch1  BOOLEAN,",
          "3175:      ch2  BOOLEAN,",
          "3176:      ch3  BOOLEAN,",
          "3177:      ch4  BOOLEAN,",
          "3178:      ch5  BOOLEAN,",
          "3179:      ch6  BOOLEAN,",
          "3180:      ch7  BOOLEAN,",
          "3181:      ch8  BOOLEAN,",
          "3182:      ch9  BOOLEAN,",
          "3183:      ch10 BOOLEAN,",
          "3184:       ch11 BOOLEAN,",
          "3185:       ch12 BOOLEAN,",
          "3186:       ch13 BOOLEAN,",
          "3187:       ch14 BOOLEAN",
          "3188: }",
          "3190: OMA-LPPe-WLAN-AP-Data ::= SEQUENCE {",
          "3191:       wlan-ap-id                                  OMA-LPPe-WLAN-AP-ID,",
          "3192:       relative-location                           OMA-LPPe-RelativeLocation                    OPTIONAL,",
          "3193:       location-reliability                        INTEGER (1..100)                             OPTIONAL,",
          "3194:       wlan-ap-Type-Data                           SEQUENCE (SIZE (1..maxWLANTypes)) OF OMA-LPPe-WLAN-AP-Type-Data,",
          "3195:       coverageArea                                OMA-LPPe-WLANFemtoCoverageArea  OPTIONAL,   --Cond oneonly",
          "3196:       ...",
          "3197: }",
          "3199: maxWLANTypes          INTEGER ::= 5",
          "3201: OMA-LPPe-WLAN-AP-Type-Data ::= SEQUENCE {",
          "3202:       wlan-AP-Type                                 OMA-LPPe-WLAN-AP-Type,",
          "3203:       transmit-power                               INTEGER (-127..128)                     OPTIONAL,",
          "3204:       antenna-gain                                 INTEGER (-127..128)                     OPTIONAL,",
          "3205:       coverageArea                                 OMA-LPPe-WLANFemtoCoverageArea  OPTIONAL,   --Cond oneonly",
          "3206:       ...",
          "3207: }",
          "3209: OMA-LPPe-WLAN-AP-RequestAssistanceData ::= SEQUENCE {",
          "3210:      requestedAD           BIT STRING  {     aplist                               (0),",
          "3211:                                                    aplocation                     (1),",
          "3212:                                                    locationreliability   (2),",
          "3213:                                                    transmit-power                 (3),",
          "3214:                                                    antenna-gain                   (4),",
          "3215:                                                    coveragearea                   (5),",
          "3216:                                                    non-serving                    (6) } (SIZE(1..16)),",
          "3217:      requestedAPTypes            OMA-LPPe-WLAN-AP-Type-List,",
          "3218:      ...",
          "3219: }",
          "3221: OMA-LPPe-WLAN-AP-ProvideLocationInformation ::= SEQUENCE {",
          "3222:      wlan-AP-CombinedLocationInformation SEQUENCE (SIZE (1..maxWLANAPSize)) OF",
          "3223:                                                                  OMA-LPPe-WLAN-AP-LocationInformationList                     OPTIONAL,",
          "3224:      wlan-AP-Error                                     OMA-LPPe-WLAN-AP-Error                                                OPTIONAL,",
          "3225:      ...",
          "3226: }",
          "3228: OMA-LPPe-WLAN-AP-LocationInformationList ::= SEQUENCE {",
          "3229:      wlan-AP-LocationInformation                     OMA-LPPe-WLAN-AP-LocationInformation,",
          "3230:      relativeTimeStamp                               INTEGER (0..65535)  OPTIONAL,",
          "3231:      servingFlag                                     BOOLEAN,",
          "3232:      ...",
          "3233: }",
          "3235: maxWLANAPSize   INTEGER ::= 64",
          "3237: OMA-LPPe-WLAN-AP-LocationInformation ::= SEQUENCE {",
          "3238:      apMACAddress                    OMA-LPPe-WLAN-AP-ID,",
          "3239:      apSSID                          OCTET STRING (SIZE (1..32))               OPTIONAL,",
          "3240:      apSignaltoNoise                 INTEGER(-127..128)                        OPTIONAL,",
          "3241:      apDeviceType                    OMA-LPPe-WLAN-AP-Type                     OPTIONAL,",
          "3242:      apPHYtype                       OMA-LPPe-WLAN-AP-PHY-Type                 OPTIONAL,",
          "3243:      apSignalStrength                INTEGER(-127..128)                        OPTIONAL,",
          "3244:      apChannelFrequency              INTEGER(0..256)                           OPTIONAL,",
          "3245:      apRoundTripDelay                OMA-LPPe-WLAN-RTD                         OPTIONAL,",
          "3246:      ueTransmitPower                 INTEGER(-127..128)                        OPTIONAL,",
          "3247:      ueAntennaGain                   INTEGER (-127..128)                       OPTIONAL,",
          "3248:      apReportedLocation              OMA-LPPe-WLAN-ReportedLocation  OPTIONAL,",
          "3249:      ...",
          "3250: }",
          "3252: OMA-LPPe-WLAN-AP-PHY-Type ::= ENUMERATED {  unknown, any, fhss, dsss, irbaseband, ofdm, hrdsss, erp,",
          "3253:                                                           ht, ihv, ... }",
          "3255: OMA-LPPe-WLAN-RTD ::= SEQUENCE {",
          "3256:     rTDValue     INTEGER(0..16777215),",
          "3257:     rTDUnits     OMA-LPPe-WLAN-RTDUnits,",
          "3258:     rTDAccuracy  INTEGER(0..255)                   OPTIONAL,",
          "3259:     ...",
          "3260: }",
          "3262: OMA-LPPe-WLAN-RTDUnits ::= ENUMERATED {",
          "3263:     microseconds,",
          "3264:      hundredsofnanoseconds,",
          "3265:      tensofnanoseconds,",
          "3266:      nanoseconds,",
          "3267:      tenthsofnanoseconds,",
          "3268:      ...",
          "3269: }",
          "3271: OMA-LPPe-WLAN-ReportedLocation ::= SEQUENCE {",
          "3273:      locationDataLCI                          OMA-LPPe-WLAN-LocationDataLCI                       OPTIONAL,",
          "3274:      ...",
          "3275: }",
          "3278: OMA-LPPe-WLAN-LocationDataLCI ::= SEQUENCE {",
          "3279:      latitudeResolution             BIT STRING (SIZE (6)),",
          "3280:      latitude                       BIT STRING (SIZE (34)),",
          "3281:      longitudeResolution            BIT STRING (SIZE (6)),",
          "3282:      longitude                      BIT STRING (SIZE (34)),",
          "3283:      altitudeType                   BIT STRING (SIZE (4)),",
          "3284:      altitudeResolution             BIT STRING (SIZE (6)),",
          "3285:      altitude                       BIT STRING (SIZE (30)),",
          "3286:      datum                          BIT STRING (SIZE (8)),",
          "3287:      ...",
          "3288: }",
          "3290: OMA-LPPe-WLAN-AP-RequestLocationInformation ::= SEQUENCE {",
          "3291:       requestedMeasurements   BIT STRING {",
          "3292:                                                             apSSID           (0),",
          "3293:                                                             apSN             (1),",
          "3294:                                                             apDevType   (2),",
          "3295:                                                             apPhyType   (3),",
          "3296:                                                             apRSSI           (4),",
          "3297:                                                             apChanFreq  (5),",
          "3298:                                                             apRTD            (6),",
          "3299:                                                             ueTP             (7),",
          "3300:                                                             ueAG             (8),",
          "3301:                                                             apRepLoc         (9),",
          "3302:                                                             non-serving (10),",
          "3303:                                                             historic         (11) } (SIZE(1..16)),",
          "3304:       ...",
          "3305: }",
          "3307: OMA-LPPe-WLAN-AP-ProvideCapabilities ::= SEQUENCE {",
          "3308:      wlan-ecid-MeasSupported BIT STRING  {",
          "3309:                                                            apSSID          (0),",
          "3310:                                                            apSN            (1),",
          "3311:                                                            apDevType   (2),",
          "3312:                                                            apPhyType   (3),",
          "3313:                                                            apRSSI          (4),",
          "3314:                                                            apChanFreq  (5),",
          "3315:                                                            apRTD           (6),",
          "3316:                                                            ueTP            (7),",
          "3317:                                                            ueAG            (8),",
          "3318:                                                            apRepLoc        (9),",
          "3319:                                                            non-serving (10),",
          "3320:                                                            historic        (11) }  (SIZE(1..16)),",
          "3321:      wlan-types-Supported                OMA-LPPe-WLAN-AP-Type-List                  OPTIONAL,",
          "3322:      ap-Capability                         OMA-LPPe-WLAN-AP-Capability               OPTIONAL,",
          "3323:      wlan-ap-ADSupported BIT STRING  {aplist                                    (0),",
          "3324:                                                  aplocation                     (1),",
          "3325:                                                  locationreliability            (2),",
          "3326:                                                  transmit-power                 (3),",
          "3327:                                                  antenna-gain                   (4),",
          "3328:                                                  coveragearea                   (5),",
          "3329:                                                  non-serving                    (6) } (SIZE(1..16)),",
          "3330:      ...",
          "3331: }",
          "3333: OMA-LPPe-WLAN-AP-Capability ::= SEQUENCE {",
          "3334:      apMACAddress                    OMA-LPPe-WLAN-AP-ID,",
          "3335:      apTypes                         OMA-LPPe-WLAN-AP-Type-List,",
          "3336:      ...",
          "3337: }",
          "3339: OMA-LPPe-WLAN-AP-RequestCapabilities ::= SEQUENCE {",
          "3340:       ...",
          "3341: }",
          "3343: OMA-LPPe-WLAN-AP-Error ::= CHOICE {",
          "3344:       locationServerErrorCauses                   OMA-LPPe-WLAN-AP-LocationServerErrorCauses,",
          "3345:       targetDeviceErrorCauses                     OMA-LPPe-WLAN-AP-TargetDeviceErrorCauses,",
          "3346:       ...",
          "3347: }",
          "3349: OMA-LPPe-WLAN-AP-LocationServerErrorCauses ::= SEQUENCE {",
          "3350:      cause                                           ENUMERATED  {undefined,",
          "3351:                                                                      requestedADNotAvailable,",
          "3352:                                                                      notAllrequestedADAvailable,",
          "3353:                                                                      ...",
          "3354:                                                                      },",
          "3355:      apMandatoryDataUnavailable                      NULL            OPTIONAL,",
          "3356:      apLocationsUnavailable                          NULL            OPTIONAL,",
          "3357:      apLocationReliabilityUnavailable                NULL            OPTIONAL,",
          "3358:      apTransmitPowerUnavailable                      NULL            OPTIONAL,",
          "3359:      apAntennaGainUnavailable                        NULL            OPTIONAL,",
          "3360:      apCoverageAreaUnavailable                       NULL            OPTIONAL,",
          "3361:      nonservingADUnavailable                         NULL            OPTIONAL,",
          "3362:      ...",
          "3363: }",
          "3365: OMA-LPPe-WLAN-AP-TargetDeviceErrorCauses ::= SEQUENCE {",
          "3366:      cause                                                ENUMERATED {undefined,",
          "3367:                                                                           requestedMeasurementsNotAvailable,",
          "3368:                                                                           notAllrequestedMeasurementsPossible,",
          "3369:                                                                           ...",
          "3370:                                                                           },",
          "3371:      apSSIDnotAvailable                                   NULL            OPTIONAL,",
          "3372:      apSNMeasurementNotPossible                           NULL            OPTIONAL,",
          "3373:      apDevTypeNotAvailable                                NULL            OPTIONAL,",
          "3374:      apPhyTypeNotAvailable                                NULL            OPTIONAL,",
          "3375:      apRSSIMeasurementNotPossible                         NULL            OPTIONAL,",
          "3376:      apChanFreqNotAvailable                               NULL            OPTIONAL,",
          "3377:      apRTDMeasurementNotPossible                          NULL            OPTIONAL,",
          "3378:      ueTPNotAvailable                                     NULL            OPTIONAL,",
          "3379:      ueAGNotAvailable                                     NULL            OPTIONAL,",
          "3380:      apRecLocNotAvailable                                 NULL            OPTIONAL,",
          "3381:      non-servingMeasurementsNotAvailable                  NULL            OPTIONAL,",
          "3382:      historicMeasurementsNotAvailable                     NULL            OPTIONAL,",
          "3383:      ...",
          "3384: }",
          "3386: OMA-LPPe-ECID-WiMax-ProvideLocationInformation ::= SEQUENCE {",
          "3387:      ecid-wimax-CombinedLocationInformation  SEQUENCE (SIZE (1..maxWiMaxECIDSize)) OF",
          "3388:                                                                  OMA-LPPe-ECID-WiMax-LocationInformationList OPTIONAL,",
          "3389:      ecid-wimax-Error                                            OMA-LPPe-ECID-WiMax-Error                                  OPTIONAL,",
          "3390:      ...",
          "3391: }",
          "3393: OMA-LPPe-ECID-WiMax-LocationInformationList ::= SEQUENCE {",
          "3394:      ecid-wimax-LocationInformation                   OMA-LPPe-ECID-WiMax-LocationInformation,",
          "3395:      relativeTimeStamp                                INTEGER (0..65535)  OPTIONAL,",
          "3396:      servingFlag                                      BOOLEAN,",
          "3397:      ...",
          "3398: }",
          "3400: maxWiMaxECIDSize           INTEGER ::= 1264",
          "3402: OMA-LPPe-ECID-WiMax-LocationInformation ::= SEQUENCE {",
          "3403:      wimaxBsID            OMA-LPPe-ECID-WiMax-WimaxBsID,",
          "3404:      wimaxRTD             OMA-LPPe-ECID-WiMax-WimaxRTD                  OPTIONAL,",
          "3405:      wimaxNMRList         OMA-LPPe-ECID-WiMax-WimaxNMRList              OPTIONAL,",
          "3406:      ...",
          "3407: }",
          "3409: OMA-LPPe-ECID-WiMax-WimaxBsID ::= SEQUENCE {",
          "3410:     bsID-MSB              BIT STRING (SIZE(24))               OPTIONAL,",
          "3411:     bsID-LSB              BIT STRING (SIZE(24)),",
          "3412:      ...",
          "3413: }",
          "3415: OMA-LPPe-ECID-WiMax-WimaxRTD ::= SEQUENCE {",
          "3416:      rTD                  INTEGER (0..65535),",
          "3417:     rTDstd                INTEGER (0..1023)              OPTIONAL,",
          "3418:      ...",
          "3419: }",
          "3421: OMA-LPPe-ECID-WiMax-WimaxNMRList ::= SEQUENCE  (SIZE (1..maxWimaxBSMeas)) OF",
          "3422:                                                                                                   OMA-LPPe-ECID-WiMax-WimaxNMR",
          "3424: OMA-LPPe-ECID-WiMax-WimaxNMR ::= SEQUENCE {",
          "3425:      wimaxBsID            OMA-LPPe-ECID-WiMax-WimaxBsID,",
          "3426:      relDelay             INTEGER (-32768..32767)                       OPTIONAL,",
          "3427:      relDelaystd          INTEGER (0..1023)                             OPTIONAL,",
          "3428:      rSSI                 INTEGER (0..255)                              OPTIONAL,",
          "3429:      rSSIstd              INTEGER (0..63)                               OPTIONAL,",
          "3430:      bSTxPower            INTEGER (0..255)                              OPTIONAL,",
          "3431:      cINR                 INTEGER (0..255)                              OPTIONAL,",
          "3432:      cINRstd              INTEGER (0..63)                               OPTIONAL,",
          "3433:      bSLocation           OMA-LPPe-WLAN-ReportedLocation                OPTIONAL,",
          "3434:      ...",
          "3435: }",
          "3437: maxWimaxBSMeas INTEGER ::= 32",
          "3439: OMA-LPPe-ECID-WiMax-RequestLocationInformation ::= SEQUENCE {",
          "3440:       requestedMeasurements   BIT STRING {    rTD                                  (0),",
          "3441:                                                              rTDstd                (1),",
          "3442:                                                              nMR                   (2),",
          "3443:                                                              nMRrelDelay           (3),",
          "3444:                                                              nMRrelDelaystd  (4),",
          "3445:                                                              nMRrSSI               (5),",
          "3446:                                                              nMRrSSIstd            (6),",
          "3447:                                                              nMRbSTxPower          (7),",
          "3448:                                                              nMRcINR               (8),",
          "3449:                                                              nMRcINRstd            (9),",
          "3450:                                                              nMRbSLocation   (10),",
          "3451:                                                              non-serving           (11),",
          "3452:                                                              historic              (12) } (SIZE(1..16)),",
          "3453:            ...",
          "3454: }",
          "3456: OMA-LPPe-ECID-WiMax-ProvideCapabilities ::= SEQUENCE {",
          "3457:       ecid-wimax-MeasSupported              BIT STRING {    rTD                         (0),",
          "3458:                                                                   rTDstd                (1),",
          "3459:                                                                   nMR                   (2),",
          "3460:                                                                   nMRrelDelay           (3),",
          "3461:                                                                   nMRrelDelaystd  (4),",
          "3462:                                                                   nMRrSSI               (5),",
          "3463:                                                                   nMRrSSIstd            (6),",
          "3464:                                                                   nMRbSTxPower          (7),",
          "3465:                                                                   nMRcINR               (8),",
          "3466:                                                                   nMRcINRstd            (9),",
          "3467:                                                                   nMRbSLocation   (10),",
          "3468:                                                                   non-serving           (11),",
          "3469:                                                                   historic              (12) } (SIZE(1..16)),",
          "3470:       ...",
          "3471: }",
          "3473: OMA-LPPe-ECID-WiMax-RequestCapabilities ::= SEQUENCE {",
          "3474:       ...",
          "3475: }",
          "3477: OMA-LPPe-ECID-WiMax-Error ::= CHOICE {",
          "3478:       locationServerErrorCauses                    OMA-LPPe-ECID-WiMax-LocationServerErrorCauses,",
          "3479:       targetDeviceErrorCauses                      OMA-LPPe-ECID-WiMax-TargetDeviceErrorCauses,",
          "3480:       ...",
          "3481: }",
          "3483: OMA-LPPe-ECID-WiMax-LocationServerErrorCauses ::= SEQUENCE {",
          "3484:      cause            ENUMERATED  {undefined,",
          "3485:                                       ...",
          "3486:                                       },",
          "3487:      ...",
          "3488: }",
          "3490: OMA-LPPe-ECID-WiMax-TargetDeviceErrorCauses ::= SEQUENCE {",
          "3491:      cause                                                 ENUMERATED {          undefined,",
          "3492:                                                                                  requestedMeasurementsNotAvailable,",
          "3493:                                                                                  notAllrequestedMeasurementsPossible,",
          "3494:                                                                                  ...",
          "3495:                                                                            },",
          "3496:      rTDMeasurementNotPossible                             NULL            OPTIONAL,",
          "3497:      rTDstdMeasurementNotPossible                          NULL            OPTIONAL,",
          "3498:      nMRMeasurementNotPossible                             NULL            OPTIONAL,",
          "3499:      nMRrelDelayMeasurementNotPossible                     NULL            OPTIONAL,",
          "3500:      nMRrelDelaystdMeasurementNotPossible                  NULL            OPTIONAL,",
          "3501:      nMRrSSIMeasurementNotPossible                         NULL            OPTIONAL,",
          "3502:      nMRrSSIstdMeasurementNotPossible                      NULL            OPTIONAL,",
          "3503:      nMRbSTxPowerMeasurementNotPossible                    NULL            OPTIONAL,",
          "3504:      nMRcINRMeasurementNotPossible                         NULL            OPTIONAL,",
          "3505:      nMRcINRstdMeasurementNotPossible                      NULL            OPTIONAL,",
          "3506:      nMRbSLocationNotAvailable                             NULL            OPTIONAL,",
          "3507:      non-servingMeasurementsNotAvailable                   NULL            OPTIONAL,",
          "3508:      historicMeasurementsNotAvailable                      NULL            OPTIONAL,",
          "3509:      ...",
          "3510: }",
          "3512: OMA-LPPe-Sensor-ProvideAssistanceData ::= SEQUENCE {",
          "3513:      ...",
          "3514: }",
          "3516: OMA-LPPe-Sensor-RequestAssistanceData ::= SEQUENCE {",
          "3517:      ...",
          "3518: }",
          "3520: OMA-LPPe-Sensor-ProvideLocationInformation ::= SEQUENCE {",
          "3521:      motionStateList                  OMA-LPPe-Sensor-MotionStateList                  OPTIONAL,",
          "3522:      sensorError                      OMA-LPPe-Sensor-Error                            OPTIONAL,",
          "3523:      ...",
          "3524: }",
          "3526: OMA-LPPe-Sensor-MotionStateList ::= SEQUENCE (SIZE(1..8)) OF OMA-LPPe-Sensor-MotionStateElement",
          "3528: OMA-LPPe-Sensor-MotionStateElement ::= SEQUENCE {",
          "3529:      primaryMotionState              ENUMERATED{",
          "3530:                                           unknown,",
          "3531:                                           stationary,",
          "3532:                                           pedestrian,",
          "3533:                                           running,",
          "3534:                                           cycling,",
          "3535:                                           car,",
          "3536:                                           train,",
          "3537:                                           aeroplane,",
          "3538:                                           boat,",
          "3539:                                           fidgeting,",
          "3540:                                           ...",
          "3541:                                           },",
          "3542:      confidence                      INTEGER(0..99),",
          "3543:      secondaryMotionState            BIT STRING {",
          "3544:                                           stationary  (0),",
          "3545:                                           pedestrian  (1),",
          "3546:                                           running         (2),",
          "3547:                                           cycling         (3),",
          "3548:                                           car             (4),",
          "3549:                                           train           (5),",
          "3550:                                           aeroplane   (6),",
          "3551:                                           boat            (7),",
          "3552:                                           fidgeting   (8) } (SIZE(1..16)) OPTIONAL,",
          "3553:      ...",
          "3554: }",
          "3556: OMA-LPPe-Sensor-RequestLocationInformation ::= SEQUENCE {",
          "3557:       motionStateReq                    OMA-LPPe-Sensor-MotionStateRequest  OPTIONAL, --Cond MotionSateReq",
          "3558:       ...",
          "3559: }",
          "3561: OMA-LPPe-Sensor-MotionStateRequest ::= SEQUENCE {",
          "3562:       secondaryMotionStateRequest                   NULL       OPTIONAL,",
          "3563:       ...",
          "3564: }",
          "3566: OMA-LPPe-Sensor-ProvideCapabilities ::= SEQUENCE {",
          "3567:       motionStateSupport                                 NULL       OPTIONAL, --Cond MotionStateSupport",
          "3568:       secondarySupport                                   NULL       OPTIONAL, --Cond SecondarySupport",
          "3569:       ...",
          "3570: }",
          "3572: OMA-LPPe-Sensor-RequestCapabilities ::= SEQUENCE {",
          "3573:       ...",
          "3574: }",
          "3576: OMA-LPPe-Sensor-Error ::= CHOICE {",
          "3577:      targetError                OMA-LPPe-Sensor-TargetError,",
          "3578:      ...",
          "3579: }",
          "3581: OMA-LPPe-Sensor-TargetError ::= SEQUENCE {",
          "3582:      motionStateError           ENUMERATED { primaryMotionStateNotAvailable,",
          "3583:                                                  primaryMotionStateNotSupported,",
          "3584:                                                  ... }  OPTIONAL,",
          "3585:      secondaryMotionStateError   ENUMERATED { secondaryMotionStateNotAvailable,",
          "3586:                                                          secondaryMotionStateNotSupported,",
          "3587:                                                  ... }  OPTIONAL,",
          "3588:      ...",
          "3589: }",
          "3591: OMA-LPPe-SRN-ProvideAssistanceData ::= SEQUENCE {",
          "3592:      srnGroup    CHOICE {",
          "3593:            srnGroupList                    OMA-LPPe-SRN-SRNgroupList,",
          "3594:            srnGroupUpdateResponse  OMA-LPPe-SRN-SRNgroupUpdateResponse,",
          "3595:            ...",
          "3596:            }                                                                     OPTIONAL,",
          "3597:      antennaPattern                   OMA-LPPe-SRN-AntennaPattern                OPTIONAL,   --Cond AntennaPattReq",
          "3598:      srnError                         OMA-LPPe-SRN-Error                         OPTIONAL,",
          "3599:      ...",
          "3600: }",
          "3602: OMA-LPPe-SRN-SRNgroupList ::= SEQUENCE {",
          "3603:      incompleteFlag                   BOOLEAN,",
          "3604:      defaultReferencePoint   OMA-LPPe-ReferencePoint                                       OPTIONAL, --Cond IfNoRefPoint",
          "3605:      groupList                        SEQUENCE (SIZE (1..64)) OF OMA-LPPe-SRN-SRNgroup,",
          "3606:      ...",
          "3607:      }",
          "3609: OMA-LPPe-SRN-SRNgroup ::= SEQUENCE {",
          "3610:      srnGroupID                                 OMA-LPPe-SRN-SRNgroupUniqueID                                         OPTIONAL,",
          "3611:      defaultSRNtype                             OMA-LPPe-SRN-SRNtype                                                  OPTIONAL,",
          "3612:      referencePoint                             OMA-LPPe-ReferencePoint                                               OPTIONAL,",
          "3613:      globalOrientation                          NULL                                                                  OPTIONAL,",
          "3614:      srnsInGroupList                            SEQUENCE (SIZE (1..1024)) OF OMA-LPPe-SRN-SRNinfo,",
          "3615:      ...",
          "3616: }",
          "3618: OMA-LPPe-SRN-SRNinfo ::= SEQUENCE {",
          "3619:      srnID                            OMA-LPPe-SRN-SRNid,",
          "3620:      srnType                          OMA-LPPe-SRN-SRNtype                            OPTIONAL,   --Cond NotDefaultType",
          "3621:      relativePosition                 OMA-LPPe-RelativeLocation,",
          "3622:      orientation                      OMA-LPPe-Orientation                            OPTIONAL,",
          "3623:      ...",
          "3624: }",
          "3626: OMA-LPPe-SRN-SRNgroupUpdateResponse ::= SEQUENCE (SIZE (1..8)) OF",
          "3627:                                                                                 OMA-LPPe-SRN-SRNgroupUpdateResponseElement",
          "3629: OMA-LPPe-SRN-SRNgroupUpdateResponseElement ::= SEQUENCE {",
          "3630:       srnGroupID                  OMA-LPPe-SRN-SRNgroupUniqueID                                                   OPTIONAL,",
          "3631:      targetDataValidity  ENUMERATED{ targetDataValid,",
          "3632:                                                 targetDataInValidAndUpdatedDataWillBeProvided,",
          "3633:                                                 targetDataInValidButServerWillNotProvideNewData,",
          "3634:                                                 ...},",
          "3635:      updatedSRNgroup            OMA-LPPe-SRN-SRNgroup OPTIONAL, --Cond InvalidAndNewDataAvailable",
          "3636:      ...",
          "3637: }",
          "3639: OMA-LPPe-SRN-AntennaPattern ::= SEQUENCE (SIZE (1..8)) OF OMA-LPPe-SRN-AntennaPatternElement",
          "3641: OMA-LPPe-SRN-AntennaPatternElement::= SEQUENCE {",
          "3642:      identification             SEQUENCE {",
          "3643:                                                 vendorOrOperator                OMA-LPPe-VendorOrOperatorID,",
          "3644:                                                 antennaPatternID                INTEGER(0..65535),",
          "3645:                                                 ...",
          "3646:                                            },",
          "3647:      antennaData                CHOICE {",
          "3648:                                                 antennaPattern             OMA-LPPe-SRN-AntennaPatternForChannels,",
          "3649:                                                 antennaContainer           OCTET STRING,",
          "3650:                                                 ...",
          "3651:                                            },",
          "3652:      ...",
          "3653: }",
          "3655: OMA-LPPe-SRN-AntennaPatternForChannels ::= SEQUENCE {",
          "3656:      evenGrid                   SEQUENCE {",
          "3657:                                                 inAzimuth            INTEGER(1..200),",
          "3658:                                                 inElevation          INTEGER(1..150)",
          "3659:                                            } OPTIONAL, --Cond EvenGrid",
          "3660:      patternList                SEQUENCE (SIZE (1..maxChannels)) OF OMA-LPPe-SRN-ChannelResponse,",
          "3661:      ...",
          "3662: }",
          "3664: OMA-LPPe-SRN-ChannelResponse ::= SEQUENCE {",
          "3665:      channelNumber                    INTEGER(1..maxChannels),",
          "3666:      responseInElevation              SEQUENCE (SIZE (7..901)) OF OMA-LPPe-SRN-ResponseInElevation,",
          "3667:      ...",
          "3668: }",
          "3670: OMA-LPPe-SRN-ResponseInElevation ::= SEQUENCE {",
          "3671:      elevation                  INTEGER(0..900) OPTIONAL,   --Cond NotEven",
          "3672:      responseInAzimuth   SEQUENCE (SIZE (18..3601)) OF OMA-LPPe-SRN-ResponseInAzimuth,",
          "3673:      ...",
          "3674: }",
          "3676: OMA-LPPe-SRN-ResponseInAzimuth::= SEQUENCE {",
          "3677:      azimuth         INTEGER(0..3599)    OPTIONAL, --Cond NotEven",
          "3678:      response        OMA-LPPe-ComplexNumber,",
          "3679:      ...",
          "3680:      }",
          "3682: OMA-LPPe-ComplexNumber ::= SEQUENCE {",
          "3683:      amplitude   INTEGER(0..1000),",
          "3684:      phase           INTEGER(-1800..1799)",
          "3685: }",
          "3687: maxChannels INTEGER ::= 512",
          "3689: OMA-LPPe-SRN-RequestAssistanceData ::= SEQUENCE {",
          "3690:       srnGroup         CHOICE {",
          "3691:            srnGroupRequest                   OMA-LPPe-SRN-SRNgroupRequest,",
          "3692:            srnGroupUpdateRequest   OMA-LPPe-SRN-SRNgroupUpdateRequest,",
          "3693:            ...",
          "3694:       }   OPTIONAL,",
          "3695:       antennaPatternRequest   OMA-LPPe-SRN-AntennaPatternRequest                                 OPTIONAL,",
          "3696:       ...",
          "3697: }",
          "3699: OMA-LPPe-SRN-SRNgroupRequest ::= SEQUENCE {",
          "3700:       doNotProvideList           OMA-LPPe-SRN-SRNProvideList                            OPTIONAL,",
          "3701:       doProvideList              OMA-LPPe-SRN-SRNProvideList                            OPTIONAL,",
          "3702:       ...",
          "3703: }",
          "3705: OMA-LPPe-SRN-SRNProvideList ::= SEQUENCE {",
          "3706:       groupList             SEQUENCE (SIZE (1..256)) OF OMA-LPPe-SRN-SRNgroupUniqueID                               OPTIONAL,",
          "3707:       categoryList          SEQUENCE (SIZE (1..16))  OF OMA-LPPe-SRN-Category                                       OPTIONAL,",
          "3708:       ...",
          "3709: }",
          "3711: OMA-LPPe-SRN-SRNgroupUpdateRequest ::= SEQUENCE (SIZE (1..64)) OF",
          "3712:                                                                         OMA-LPPe-SRN-SRNgroupUpdateRequestElement",
          "3714: OMA-LPPe-SRN-SRNgroupUpdateRequestElement ::= SEQUENCE {",
          "3715:       srnGroupID                       OMA-LPPe-SRN-SRNgroupUniqueID,",
          "3716:       provideIndicationOnly   NULL    OPTIONAL,",
          "3717:       inTheGroup                       SEQUENCE (SIZE (1..1024)) OF OMA-LPPe-SRN-SRNid                         OPTIONAL,",
          "3718:       ...",
          "3719: }",
          "3721: OMA-LPPe-SRN-AntennaPatternRequest ::= SEQUENCE (SIZE (1..8)) OF",
          "3722:                                                                        OMA-LPPe-SRN-AntennaPatternRequestElement",
          "3724: OMA-LPPe-SRN-AntennaPatternRequestElement ::= SEQUENCE {",
          "3725:      antennaPatternID    SEQUENCE {",
          "3726:                                                  vendorOrOperator                 OMA-LPPe-VendorOrOperatorID,",
          "3727:                                                  antennaPatternID                 INTEGER(0..65535),",
          "3728:                                                  ...",
          "3729:                                             },",
          "3730:      ...",
          "3731: }",
          "3733: OMA-LPPe-SRN-ProvideLocationInformation ::= SEQUENCE {",
          "3734:      srnMeasurementList               SEQUENCE (SIZE (1..64)) OF OMA-LPPe-SRN-MeasurementElement  OPTIONAL,",
          "3735:      srnError                         OMA-LPPe-SRN-Error                                                                OPTIONAL,",
          "3736:      ...",
          "3737: }",
          "3739: OMA-LPPe-SRN-MeasurementElement ::= SEQUENCE {",
          "3740:       srnID                       OMA-LPPe-SRN-SRNid,",
          "3741:       srnCategory                 OMA-LPPe-SRN-Category                             OPTIONAL, --Cond IfKnown",
          "3742:       srnGroupID                  OMA-LPPe-SRN-SRNgroupUniqueID                     OPTIONAL, --Cond IfKnown",
          "3743:       measurementList             SEQUENCE (SIZE (1..64)) OF OMA-LPPe-SRN-srnMeasurementElement   OPTIONAL,",
          "3744:       ...",
          "3745: }",
          "3747: OMA-LPPe-SRN-srnMeasurementElement ::= SEQUENCE {",
          "3748:       relativeTimeStamp   INTEGER(0..1000)                         OPTIONAL,   --Cond IfNotFirst",
          "3749:       rssi                        INTEGER(-128..127)               OPTIONAL,",
          "3750:       rtd                         OMA-LPPe-WLAN-RTD                OPTIONAL,",
          "3751:       ...",
          "3752: }",
          "3754: OMA-LPPe-SRN-RequestLocationInformation ::= SEQUENCE {",
          "3755:      requestInfo           SEQUENCE (SIZE (1..16)) OF OMA-LPPe-SRN-ReqLocInfo-Category,",
          "3756:      ...",
          "3757: }",
          "3759: OMA-LPPe-SRN-ReqLocInfo-Category ::= SEQUENCE {",
          "3760:      category                        OMA-LPPe-SRN-Category,",
          "3761:      multipleMeasurements            ENUMERATED{ forbidden(0),",
          "3762:                                                      allowed(1),",
          "3763:                                                      requested(2), ... }                             OPTIONAL,",
          "3764:      allowedMeasurements             OMA-LPPe-SRN-MeasurementMask                                    OPTIONAL,",
          "3765:      historicMeasurementsRequested   NULL                                                            OPTIONAL,",
          "3766:      ...",
          "3767: }",
          "3769: OMA-LPPe-SRN-ProvideCapabilities ::= SEQUENCE {",
          "3770:      capabilitiesPerSRNCategory                 SEQUENCE (SIZE (1..16)) OF",
          "3771:                                                                 OMA-LPPe-SRN-ProvideCapabilitiesElement OPTIONAL,",
          "3772:      ...",
          "3773: }",
          "3775: OMA-LPPe-SRN-ProvideCapabilitiesElement::= SEQUENCE {",
          "3776:      srnCategory                                OMA-LPPe-SRN-Category,",
          "3777:      supportedMeasurements                      OMA-LPPe-SRN-MeasurementMask                                         OPTIONAL,",
          "3778:      supportedAssistanceData                    BIT STRING {",
          "3779:                                                      srnGroup (0),",
          "3780:                                                      antennaPattern (1) } (SIZE(1..16)),",
          "3781:      historicMeasurementsSupported   NULL                 OPTIONAL,",
          "3782:      ...",
          "3783: }",
          "3785: OMA-LPPe-SRN-RequestCapabilities ::= SEQUENCE {",
          "3786:       capabilitiesRequestedFor                SEQUENCE (SIZE (1..16)) OF OMA-LPPe-SRN-Category                                 OPTIONAL,",
          "3787:       ...",
          "3788: }",
          "3790: OMA-LPPe-SRN-Error ::= CHOICE {",
          "3791:      srnLocationServerErrorCauses               OMA-LPPe-SRN-LocationServerErrorCauses,",
          "3792:      srnTargetDeviceErrorCauses                 OMA-LPPe-SRN-TargetDeviceErrorCauses,",
          "3793:      ...",
          "3794: }",
          "3796: OMA-LPPe-SRN-LocationServerErrorCauses ::= SEQUENCE {",
          "3797:      groupErrors                ENUMERATED{           undefined,",
          "3798:                                                       someGroupOrCategoryOrSRNidUnknownOrUnsupported,",
          "3799:                                                       allGroupAndCategoryOrSRNidUnknownOrUnsupported,",
          "3800:                                                       noSRNgroupsNearby,",
          "3801:                                                       ...}                                                                  OPTIONAL,",
          "3802:      groupUpdateErrors   ENUMERATED {    undefined,",
          "3803:                                                       allSRNgroupIDsUnknown,",
          "3804:                                                       allSRNgroupIDsknownButSomeSRNgroupVersionsUnknown,",
          "3805:                                                       allSRNgroupIDsknownAndAllSRNgroupVersionsUnknown,",
          "3806:                                                       someSRNgroupIDsUnknown,",
          "3807:                                                       someSRNgroupVersionsUnknownAndAllSRNGroupVersionsUnknown,",
          "3808:                                                       someSRNgroupIDsAndSomeSRNgroupVersionsUnknown,",
          "3809:                                                       inTheGroupInformationDoesNotMatchWithGroupID,",
          "3810:                                                       ...}                                                                  OPTIONAL,",
          "3811:      srnAntennaErrors    ENUMERATED {    undefined,",
          "3812:                                                     someAntennaPatternIDsUnknown,",
          "3813:                                                     allAntennaPatternIDsUnknown,",
          "3814:                                                     ... }                                                                   OPTIONAL,",
          "3815:      ...",
          "3816: }",
          "3818: OMA-LPPe-SRN-TargetDeviceErrorCauses ::= SEQUENCE {",
          "3819:      srnErrorsPerCategory                   SEQUENCE (SIZE (1..16)) OF OMA-LPPe-SRN-TargetDeviceError,",
          "3820:      ...",
          "3821: }",
          "3823: OMA-LPPe-SRN-TargetDeviceError ::= SEQUENCE {",
          "3824:      category              OMA-LPPe-SRN-Category,",
          "3825:      srnErrors             ENUMERATED{ undefined,",
          "3826:                                             requestedMeasurementsNotAvailable,",
          "3827:                                             notAllrequestedMeasurementsPossible,",
          "3828:                                             categoryNotSupported,",
          "3829:                                              ...},",
          "3830:      rssiNotAvailable                                 NULL       OPTIONAL,",
          "3831:      rtdNotAvailable                                  NULL       OPTIONAL,",
          "3832:      multipleSetsNotAvailable                         NULL       OPTIONAL,",
          "3833:      historicMeasurementsNotAvailable                 NULL       OPTIONAL,",
          "3834:      ...",
          "3835: }",
          "3837: OMA-LPPe-SRN-SRNgroupUniqueID ::= SEQUENCE {",
          "3838:      providerID                  OMA-LPPe-VendorOrOperatorID,",
          "3839:      providerAssignedID  OCTET STRING,",
          "3840:      srnDataVersion              INTEGER (0..4294967295)                    OPTIONAL,",
          "3841:      ...",
          "3842: }",
          "3844: OMA-LPPe-SRN-SRNtype ::= SEQUENCE {",
          "3845:       srnCategory                      OMA-LPPe-SRN-Category,",
          "3846:       srnERP                           INTEGER(-300..500)                                                      OPTIONAL,",
          "3847:       srnAntennaInfo                   SEQUENCE {",
          "3848:                                                   antennaPatternID                 INTEGER(0..65535),",
          "3849:                                                   switchingPatternID               INTEGER(0..65535)                           OPTIONAL,",
          "3850:                                                   ...",
          "3851:                                                   }                                                            OPTIONAL,",
          "3852:       ...",
          "3853: }",
          "3855: OMA-LPPe-SRN-Category ::= SEQUENCE {",
          "3856:       srnTechnologyType                OMA-LPPe-SRN-Technologies,",
          "3857:       srnVendorInformation             SEQUENCE {",
          "3858:                                                   vendor                OMA-LPPe-VendorOrOperatorID,",
          "3859:                                                   vendorInfo            OCTET STRING                     OPTIONAL,",
          "3860:                                                   ...",
          "3861:                                                   }                                                      OPTIONAL,   --Cond other",
          "3862:       ...",
          "3863: }",
          "3865: OMA-LPPe-SRN-SRNid ::= SEQUENCE {",
          "3866:      srn-id           CHOICE {",
          "3867:                                       mac              BIT STRING(SIZE(48)),",
          "3868:                                       nfc              SEQUENCE {",
          "3869:                                                                   manufacturer                     BIT STRING(SIZE(8)),",
          "3870:                                                                   uniqueNumber                     BIT STRING(SIZE(48)),",
          "3871:                                                                   ...",
          "3872:                                                                   },",
          "3873:                                       mobileCode  SEQUENCE {",
          "3874:                                                                   registryID                       BIT STRING(SIZE(12)),",
          "3875:                                                                   remainingPart                    OCTET STRING(SIZE(1..1 )),",
          "3876:                                                                   resolutionIdentifier             OCTET STRING(SIZE(1..18)),",
          "3877:                                                                   ...",
          "3878:                                                                   },",
          "3879:                                       other            OCTET STRING,",
          "3880:                                       ...",
          "3881:                                  },",
          "3882:      ...",
          "3883: }",
          "3885: OMA-LPPe-SRN-Technologies ::= SEQUENCE {",
          "3886:       srnTechnologies             ENUMERATED{ bt, btle, nfc, mobileCode, other, ... },",
          "3887:       ...",
          "3888: }",
          "3890: OMA-LPPe-SRN-MeasurementMask ::= SEQUENCE {",
          "3891:       srnMeasurements                   BIT STRING {          rssi(0),",
          "3892:                                                               rtd (1) } (SIZE(1..16)),",
          "3893:       ...",
          "3894: }",
          "3896: END",
          "",
          "[Added Lines]",
          "1: -- Open Mobile Alliance OMA-TS-LPPe V1_1-20140108-C",
          "3: OMA-LPPE DEFINITIONS AUTOMATIC TAGS ::=",
          "4: BEGIN",
          "6: -- asn2wrs does not seem to import integer constants (maxFreqLayers)",
          "7: --IMPORTS GNSS-ID, GNSS-SignalID, GNSS-SignalIDs, GNSS-SystemTime, SV-ID,",
          "8: --ECID-SignalMeasurementInformation, CellGlobalIdGERAN, CellGlobalIdEUTRA-AndUTRA,",
          "9: --OTDOA-ReferenceCellInfo, OTDOA-NeighbourCellInfoElement, maxFreqLayers, ARFCN-ValueEUTRA,",
          "10: --Ellipsoid-Point, EllipsoidPointWithAltitude, EllipsoidPointWithAltitudeAndUncertaintyEllipsoid,",
          "11: --NetworkTime, GNSS-ID-Bitmap, ARFCN-ValueUTRA, GNSS-ReferenceTime, LPP-Message,",
          "12: --Ellipsoid-PointWithUncertaintyCircle, EllipsoidPointWithUncertaintyEllipse, EllipsoidArc, Polygon",
          "13: --FROM LPP-PDU-Definitions;",
          "14: IMPORTS GNSS-ID, GNSS-SignalID, GNSS-SignalIDs, GNSS-SystemTime, SV-ID,",
          "15: ECID-SignalMeasurementInformation, CellGlobalIdGERAN, CellGlobalIdEUTRA-AndUTRA,",
          "16: OTDOA-ReferenceCellInfo, OTDOA-NeighbourCellInfoElement, ARFCN-ValueEUTRA,",
          "17: Ellipsoid-Point, EllipsoidPointWithAltitude, EllipsoidPointWithAltitudeAndUncertaintyEllipsoid,",
          "18: NetworkTime, GNSS-ID-Bitmap, ARFCN-ValueUTRA, GNSS-ReferenceTime, LPP-Message,",
          "19: Ellipsoid-PointWithUncertaintyCircle, EllipsoidPointWithUncertaintyEllipse, EllipsoidArc, Polygon",
          "20: FROM LPP-PDU-Definitions;",
          "23: OMA-LPPe-MessageExtension ::= SEQUENCE {",
          "24:      lppeCompatibilityLevel                   OMA-LPPe-LPPeCompatibilityLevel,",
          "25:      lppeVersion                              OMA-LPPe-LPPeVersion,",
          "26:      lppeMode                                 OMA-LPPe-LPPeMode,",
          "27:      messageExtensionBody                     OMA-LPPe-MessageExtensionBody,",
          "28:      ...",
          "29: }",
          "31: OMA-LPPe-LPPeCompatibilityLevel ::= INTEGER (0..15)",
          "33: OMA-LPPe-LPPeVersion ::= SEQUENCE {",
          "34:      majorVersion              INTEGER(0..255),",
          "35:      minorVersion              INTEGER(0..255)",
          "36: }",
          "38: OMA-LPPe-LPPeMode ::= ENUMERATED {",
          "39:      normal,",
          "40:      reversed,",
          "41:      ...",
          "42: }",
          "45: OMA-LPPe-MessageExtensionBody ::= CHOICE {",
          "46:           requestCapabilities                 OMA-LPPe-RequestCapabilities,",
          "47:                                               --Shall only be used in the EPDU in LPP RequestCapabilities",
          "48:           provideCapabilities                 OMA-LPPe-ProvideCapabilities,",
          "49:                                               --Shall only be used in the EPDU in LPP ProvideCapabilities",
          "50:           requestAssistanceData               OMA-LPPe-RequestAssistanceData,",
          "51:                                               --Shall only be used in the EPDU in LPP RequestAssistanceData",
          "52:           provideAssistanceData               OMA-LPPe-ProvideAssistanceData,",
          "53:                                               --Shall only be used in the EPDU in LPP ProvideAssistanceData",
          "54:           requestLocationInformation  OMA-LPPe-RequestLocationInformation,",
          "55:                                               --Shall only be used in the EPDU in LPP RequestLocationInformation",
          "56:           provideLocationInformation  OMA-LPPe-ProvideLocationInformation,",
          "57:                                               --Shall only be used in the EPDU in LPP ProvideLocationInformation",
          "58:           error                               OMA-LPPe-Error, --Shall only be used in the EPDU in LPP Error",
          "59:           abort                               OMA-LPPe-Abort, --Shall only be used in the EPDU in LPP Abort",
          "60:           ...",
          "61: }",
          "64: OMA-LPPe-ver1-1-BroadcastContainer ::= SEQUENCE {",
          "65:      digitalSignature                OMA-LPPe-ver1-1-DigitalSignature               OPTIONAL,",
          "66:      messageContents                 OCTET STRING,",
          "67:      ...",
          "68: }",
          "69: --  the  messageContents  octet  string  contains  the  encoded  content  of  data  type  OMA-LPPe-ver1-1-BroadcastMessage",
          "71: OMA-LPPe-ver1-1-BroadcastMessage ::= SEQUENCE {",
          "72:      broadcastControlIEs             OMA-LPPe-ver1-1-BroadcastControlIEs,",
          "73:      cipheringIEs                    OMA-LPPe-ver1-1-CipheringIEs                        OPTIONAL,",
          "74:      broadcastMessage                OCTET STRING,",
          "75:      ...",
          "76: }",
          "77: -- broadcastMessage contains an unciphered LPP-Message as defined in [LPP] or a ciphered LPP-Message",
          "79: OMA-LPPe-ver1-1-BroadcastControlIEs ::= SEQUENCE {",
          "80:      serverID                             OMA-LPPe-ver1-1-ServerID,",
          "81:      messageID                            OCTET STRING (SIZE (4))                   OPTIONAL,",
          "82:      validity-time                        OMA-LPPe-ValidityPeriod                   OPTIONAL,       --Cond DigitalSignature",
          "83:      validity-area                        OMA-LPPe-ValidityArea                     OPTIONAL,",
          "84:      broadcastADTypes                     OMA-LPPe-ver1-1-BroadcastADTypes               OPTIONAL,",
          "85:      ...",
          "86: }",
          "88: OMA-LPPe-ver1-1-CipheringIEs ::= SEQUENCE {",
          "89:      cipherSetID                          OMA-LPPe-ver1-1-CipherSetID,",
          "90:      d0                                   BIT STRING (SIZE (1..128)),",
          "91:      ...",
          "92: }",
          "94: OMA-LPPe-ver1-1-DigitalSignature ::= SEQUENCE {",
          "95:      authenticationSetID                  OMA-LPPe-ver1-1-AuthenticationSetID,",
          "96:      signature                            BIT STRING (SIZE (2048)),",
          "97:      ...",
          "98: }",
          "101: OMA-LPPe-RequestCapabilities ::= SEQUENCE {",
          "102:       commonIEsRequestCapabilities                              OMA-LPPe-CommonIEsRequestCapabilities                     OPTIONAL,",
          "103:       agnss-RequestCapabilities                                 OMA-LPPe-AGNSS-RequestCapabilities                        OPTIONAL,",
          "104:       otdoa-RequestCapabilities                                 OMA-LPPe-OTDOA-RequestCapabilities                        OPTIONAL,",
          "105:      eotd-RequestCapabilities                        OMA-LPPe-EOTD-RequestCapabilities               OPTIONAL,",
          "106:      otdoa-utra-RequestCapabilities                  OMA-LPPe-OTDOA-UTRA-RequestCapabilities OPTIONAL,",
          "107:      ecid-lte-RequestCapabilities                    OMA-LPPe-ECID-LTE-RequestCapabilities           OPTIONAL,",
          "108:      ecid-gsm-RequestCapabilities                    OMA-LPPe-ECID-GSM-RequestCapabilities           OPTIONAL,",
          "109:      ecid-utra-RequestCapabilities                   OMA-LPPe-ECID-UTRA-RequestCapabilities  OPTIONAL,",
          "110:      wlan-ap-RequestCapabilities                     OMA-LPPe-WLAN-AP-RequestCapabilities            OPTIONAL,",
          "111:      ecid-wimax-RequestCapabilities                  OMA-LPPe-ECID-WiMax-RequestCapabilities OPTIONAL,",
          "112:      sensor-RequestCapabilities                      OMA-LPPe-Sensor-RequestCapabilities             OPTIONAL,",
          "113:      srn-RequestCapabilities                         OMA-LPPe-SRN-RequestCapabilities                OPTIONAL,",
          "114:      ...",
          "115: }",
          "118: OMA-LPPe-ProvideCapabilities::= SEQUENCE {",
          "119:      commonIEsProvideCapabilities                    OMA-LPPe-CommonIEsProvideCapabilities                OPTIONAL,",
          "120:      agnss-ProvideCapabilities                       OMA-LPPe-AGNSS-ProvideCapabilities                   OPTIONAL,",
          "121:      otdoa-ProvideCapabilities                       OMA-LPPe-OTDOA-ProvideCapabilities                   OPTIONAL,",
          "122:      eotd-ProvideCapabilities                        OMA-LPPe-EOTD-ProvideCapabilities                    OPTIONAL,",
          "123:      otdoa-utra-ProvideCapabilities                  OMA-LPPe-OTDOA-UTRA-ProvideCapabilities              OPTIONAL,",
          "124:      ecid-lte-ProvideCapabilities                    OMA-LPPe-ECID-LTE-ProvideCapabilities                OPTIONAL,",
          "125:      ecid-gsm-ProvideCapabilities                    OMA-LPPe-ECID-GSM-ProvideCapabilities                OPTIONAL,",
          "126:      ecid-utra-ProvideCapabilities                   OMA-LPPe-ECID-UTRA-ProvideCapabilities               OPTIONAL,",
          "127:      wlan-ap-ProvideCapabilities                     OMA-LPPe-WLAN-AP-ProvideCapabilities                 OPTIONAL,",
          "128:      ecid-wimax-ProvideCapabilities                  OMA-LPPe-ECID-WiMax-ProvideCapabilities              OPTIONAL,",
          "129:      sensor-ProvideCapabilities                      OMA-LPPe-Sensor-ProvideCapabilities                  OPTIONAL,",
          "130:      srn-ProvideCapabilities                         OMA-LPPe-SRN-ProvideCapabilities                     OPTIONAL,",
          "131:      ...",
          "132: }",
          "135: OMA-LPPe-RequestAssistanceData ::= SEQUENCE {",
          "136:      commonIEsRequestAssistanceData                  OMA-LPPe-CommonIEsRequestAssistanceData              OPTIONAL,",
          "137:      agnss-RequestAssistanceData                     OMA-LPPe-AGNSS-RequestAssistanceData                 OPTIONAL,",
          "138:      otdoa-RequestAssistanceData                     OMA-LPPe-OTDOA-RequestAssistanceData                 OPTIONAL,",
          "139:      eotd-RequestAssistanceData                      OMA-LPPe-EOTD-RequestAssistanceData                  OPTIONAL,",
          "140:      otdoa-utra-RequestAssistanceData                OMA-LPPe-OTDOA-UTRA-RequestAssistanceData            OPTIONAL,",
          "141:      ecid-lte-RequestAssistanceData                  OMA-LPPe-ECID-LTE-RequestAssistanceData              OPTIONAL,",
          "142:      ecid-gsm-RequestAssistanceData                  OMA-LPPe-ECID-GSM-RequestAssistanceData              OPTIONAL,",
          "143:      ecid-utra-RequestAssistanceData                 OMA-LPPe-ECID-UTRA-RequestAssistanceData             OPTIONAL,",
          "144:      wlan-ap-RequestAssistanceData                   OMA-LPPe-WLAN-AP-RequestAssistanceData               OPTIONAL,",
          "145:      sensor-RequestAssistanceData                    OMA-LPPe-Sensor-RequestAssistanceData                OPTIONAL,",
          "146:      srn-RequestAssistanceData                       OMA-LPPe-SRN-RequestAssistanceData                   OPTIONAL,",
          "147:      ...",
          "148: }",
          "151: OMA-LPPe-ProvideAssistanceData ::= SEQUENCE {",
          "152:      commonIEsProvideAssistanceData                  OMA-LPPe-CommonIEsProvideAssistanceData              OPTIONAL,",
          "153:      agnss-ProvideAssistanceData                     OMA-LPPe-AGNSS-ProvideAssistanceData                 OPTIONAL,",
          "154:      otdoa-ProvideAssistanceData                    OMA-LPPe-OTDOA-ProvideAssistanceData                 OPTIONAL,",
          "155:      eotd-ProvideAssistanceData                     OMA-LPPe-EOTD-ProvideAssistanceData                  OPTIONAL,",
          "156:      otdoa-utra-ProvideAssistanceData               OMA-LPPe-OTDOA-UTRA-ProvideAssistanceData            OPTIONAL,",
          "157:      ecid-lte-ProvideAssistanceData                 OMA-LPPe-ECID-LTE-ProvideAssistanceData              OPTIONAL,",
          "158:      ecid-gsm-ProvideAssistanceData                 OMA-LPPe-ECID-GSM-ProvideAssistanceData              OPTIONAL,",
          "159:      ecid-utra-ProvideAssistanceData                OMA-LPPe-ECID-UTRA-ProvideAssistanceData             OPTIONAL,",
          "160:      wlan-ap-ProvideAssistanceData                  OMA-LPPe-WLAN-AP-ProvideAssistanceData               OPTIONAL,",
          "161:      sensor-ProvideAssistanceData                   OMA-LPPe-Sensor-ProvideAssistanceData                OPTIONAL,",
          "162:      srn-ProvideAssistanceData                      OMA-LPPe-SRN-ProvideAssistanceData                   OPTIONAL,",
          "163:      ...",
          "164: }",
          "167: OMA-LPPe-RequestLocationInformation ::= SEQUENCE {",
          "168:      commonIEsRequestLocationInformation            OMA-LPPe-CommonIEsRequestLocationInformation              OPTIONAL,",
          "169:      agnss-RequestLocationInformation               OMA-LPPe-AGNSS-RequestLocationInformation                 OPTIONAL,",
          "170:      otdoa-RequestLocationInformation               OMA-LPPe-OTDOA-RequestLocationInformation                 OPTIONAL,",
          "171:      eotd-RequestLocationInformation                OMA-LPPe-EOTD-RequestLocationInformation                  OPTIONAL,",
          "172:      otdoa-utra-RequestLocationInformation          OMA-LPPe-OTDOA-UTRA-RequestLocationInformation  OPTIONAL,",
          "173:      ecid-lte-RequestLocationInformation            OMA-LPPe-ECID-LTE-RequestLocationInformation              OPTIONAL,",
          "174:      ecid-gsm-RequestLocationInformation            OMA-LPPe-ECID-GSM-RequestLocationInformation              OPTIONAL,",
          "175:      ecid-utra-RequestLocationInformation           OMA-LPPe-ECID-UTRA-RequestLocationInformation             OPTIONAL,",
          "176:      wlan-ap-RequestLocationInformation             OMA-LPPe-WLAN-AP-RequestLocationInformation               OPTIONAL,",
          "177:      ecid-wimax-RequestLocationInformation          OMA-LPPe-ECID-WiMax-RequestLocationInformation  OPTIONAL,",
          "178:      sensor-RequestLocationInformation              OMA-LPPe-Sensor-RequestLocationInformation                OPTIONAL,",
          "179:      srn-RequestLocationInformation                 OMA-LPPe-SRN-RequestLocationInformation                   OPTIONAL,",
          "180:      ...",
          "181: }",
          "184: OMA-LPPe-ProvideLocationInformation ::= SEQUENCE {",
          "185:      commonIEsProvideLocationInformation            OMA-LPPe-CommonIEsProvideLocationInformation              OPTIONAL,",
          "186:      agnss-ProvideLocationInformation               OMA-LPPe-AGNSS-ProvideLocationInformation                 OPTIONAL,",
          "187:      otdoa-ProvideLocationInformation               OMA-LPPe-OTDOA-ProvideLocationInformation                 OPTIONAL,",
          "188:      eotd-ProvideLocationInformation                OMA-LPPe-EOTD-ProvideLocationInformation                  OPTIONAL,",
          "189:      otdoa-utra-ProvideLocationInformation          OMA-LPPe-OTDOA-UTRA-ProvideLocationInformation  OPTIONAL,",
          "190:      ecid-lte-ProvideLocationInformation            OMA-LPPe-ECID-LTE-ProvideLocationInformation              OPTIONAL,",
          "191:      ecid-gsm-ProvideLocationInformation            OMA-LPPe-ECID-GSM-ProvideLocationInformation              OPTIONAL,",
          "192:      ecid-utra-ProvideLocationInformation           OMA-LPPe-ECID-UTRA-ProvideLocationInformation             OPTIONAL,",
          "193:      wlan-ap-ProvideLocationInformastion            OMA-LPPe-WLAN-AP-ProvideLocationInformation               OPTIONAL,",
          "194:      ecid-wimax-ProvideLocationInformastion  OMA-LPPe-ECID-WiMax-ProvideLocationInformation  OPTIONAL,",
          "195:      sensor-ProvideLocationInformation              OMA-LPPe-Sensor-ProvideLocationInformation                OPTIONAL,",
          "196:      srn-ProvideLocationInformation                 OMA-LPPe-SRN-ProvideLocationInformation                   OPTIONAL,",
          "197:      ...",
          "198: }",
          "201: OMA-LPPe-Abort ::= SEQUENCE {",
          "202:      commonIEsAbort          OMA-LPPe-CommonIEsAbort          OPTIONAL,",
          "203:      agnssAbort              OMA-LPPe-AGNSS-Abort             OPTIONAL,",
          "204:      ...",
          "205: }",
          "209: OMA-LPPe-Error ::= SEQUENCE {",
          "210:      commonIEsError           OMA-LPPe-CommonIEsError           OPTIONAL,",
          "211:      ...",
          "212: }",
          "216: OMA-LPPe-AssistanceContainer-DataSerialNumber ::= SEQUENCE {",
          "217:      dataSerialNumber             INTEGER(0..4294967295),",
          "218:      ...",
          "219: }",
          "222: OMA-LPPe-AssistanceContainerID ::= SEQUENCE {",
          "223:      containerID              INTEGER (0..65535),",
          "224:      ...",
          "225: }",
          "228: OMA-LPPe-AssistanceContainerProvideList ::= SEQUENCE (SIZE(1.. maxAssistanceContainerList)) OF",
          "229:                                                                                     OMA-LPPe-AssistanceContainerProvide",
          "231: maxAssistanceContainerList INTEGER ::= 16",
          "232: OMA-LPPe-AssistanceContainerProvide ::= SEQUENCE  {",
          "233:      dataIdentifier               OMA-LPPe-VendorOrOperatorAssistanceDataIdentifier,",
          "234:      checkOrUpdateOrError            ENUMERATED  {",
          "235:                                           targetHasLatestData,",
          "236:                                           targetDataNotLatest,",
          "237:                                           targetDataNotLatestButServerCannotProvideLatestData,",
          "238:                                           targetHasValidData,",
          "239:                                           targetDataInvalidButServerCannotProvideValidData,",
          "240:                                           serverHasRequestedDataButUnableToProvideTemporarily,",
          "241:                                           serverDoesNotHaveRequestedData,",
          "242:                                           serverDoesNotRecognizeRequestedData,",
          "243:                                           undefined,",
          "244:                                           ... }                                     OPTIONAL,    --Cond CheckorUpdate",
          "245:      dataResult                      CHOICE          {",
          "246:                                           simulationResult          INTEGER(0..5000),",
          "247:                                           data                      OMA-LPPe-AssistanceContainerData,",
          "248:                                            ...",
          "249:                                            }  OPTIONAL,",
          "250:      errorCode                       OMA-LPPe-AssistanceContainerProvideError                  OPTIONAL,",
          "251:      ...",
          "252: }",
          "254: OMA-LPPe-AssistanceContainerData ::= SEQUENCE {",
          "255:      dataSerialNumber                OMA-LPPe-AssistanceContainer-DataSerialNumber                            OPTIONAL,",
          "256:      data                            OCTET STRING,",
          "257:      validityPeriod                  OMA-LPPe-ValidityPeriod                   OPTIONAL,",
          "258:      validityArea                    OMA-LPPe-ValidityArea                     OPTIONAL,",
          "259:      ...",
          "260: }",
          "262: OMA-LPPe-AssistanceContainerProvideError ::= SEQUENCE {",
          "263:      serverError          ENUMERATED { assistanceContainerUnknownDataIdentifier,",
          "264:                                            assistanceContainerUnknownDataSerialNumber,",
          "265:                                            assistanceContainerDataTemporarilyUnavailable,",
          "266:                                            assistanceContainerDataNoLongerSupported,",
          "267:                                            assistanceContainerVendorOrOperatorNotSupported,",
          "268:                                           ...} OPTIONAL,",
          "269:      ...",
          "270: }",
          "274: OMA-LPPe-AssistanceContainerRequestList ::= SEQUENCE (SIZE(1..maxAssistanceContainerList)) OF",
          "275:                                                                                                OMA-LPPe-AssistanceContainerRequest",
          "277: OMA-LPPe-AssistanceContainerRequest ::= SEQUENCE  {",
          "278:       dataIdentifier                              OMA-LPPe-VendorOrOperatorAssistanceDataIdentifier,",
          "279:       simulatedReq                                BOOLEAN,",
          "280:       checkOrUpdateReq                            OMA-LPPe-AssistanceContainerCheckOrUpdateReq                        OPTIONAL,",
          "281:       validityTimeRequest                         OMA-LPPe-ValidityPeriod                                             OPTIONAL,",
          "282:       proprietaryRequestParameters                OCTET STRING                                                        OPTIONAL,",
          "283:       ...",
          "284: }",
          "286: OMA-LPPe-AssistanceContainerCheckOrUpdateReq ::= SEQUENCE {",
          "287:       dataSerialNumber            OMA-LPPe-AssistanceContainer-DataSerialNumber,",
          "288:       checkLatest                 ENUMERATED  {returnLatestIfCurrentNotLatest,",
          "289:                                                    returnUpdateOnlyIfCurrentInvalid,",
          "290:                                                    ... },",
          "291:       ...",
          "292: }",
          "296: OMA-LPPe-CellLocalIdGERAN ::= SEQUENCE {",
          "297:       locationAreaCode                 BIT STRING (SIZE (16)),",
          "298:       cellIdentity                     BIT STRING (SIZE (16)),",
          "299:       ...",
          "300: }",
          "303: OMA-LPPe-CellNonUniqueIDGERAN ::= SEQUENCE {",
          "304:      bsic            INTEGER (0..63),",
          "305:      bcch            INTEGER (0..1023),",
          "306:      ...",
          "307: }",
          "311: OMA-LPPe-CharArray ::= VisibleString(FROM (\"a\"..\"z\" | \"A\"..\"Z\" | \"0\"..\"9\" | \".-\"))(SIZE (1..31))",
          "314: OMA-LPPe-CivicLocation ::= SEQUENCE {",
          "315:      countryCode                          OCTET STRING (SIZE (2)),",
          "316:      civicAddressElementList              OMA-LPPe-CivicAddressElementList,",
          "317:      ...",
          "318: }",
          "320: OMA-LPPe-CivicAddressElementList ::= SEQUENCE (SIZE (1..128)) OF OMA-LPPe-CivicAddressElement",
          "322: OMA-LPPe-CivicAddressElement ::= SEQUENCE {",
          "323:      caType          INTEGER(0..511),",
          "324:      caValue         OCTET STRING (SIZE (1..256)),",
          "325:      ...",
          "326: }",
          "329: OMA-LPPe-Duration ::= SEQUENCE {",
          "330:      duration              INTEGER (1..63),",
          "331:      durationLSB           INTEGER (1..89) OPTIONAL,",
          "332:      ...",
          "333: }",
          "336: OMA-LPPe-FixedAccessTypes ::= BIT STRING {  cable                         (0),",
          "337:                                                           dsl             (1),",
          "338:                                                           lan             (2),",
          "339:                                                           pstn            (3),",
          "340:                                                           other           (4) } (SIZE(1..16))",
          "343: OMA-LPPe-ver1-1-GroundMorphologyModel  ::= SEQUENCE {",
          "344:      altitudeModel                        OMA-LPPe-ver1-1-AltitudeModel                                   OPTIONAL,",
          "345:      buildingsProfileModel                OMA-LPPe-ver1-1-BuildingsHeightModel                            OPTIONAL,",
          "346:      ...",
          "347:      }",
          "351: OMA-LPPe-ver1-1-AltitudeModel  ::= SEQUENCE {",
          "352:      northWestCorner                  Ellipsoid-Point, -- coordinates of North West corner of rectangle",
          "353:      northwestCornerAltitude          INTEGER (-500..9000), -- altitude of North West corner of rectangle",
          "354:      nrows                            INTEGER (2..1012), -- number of rows along West-East direction",
          "355:      ncols                            INTEGER (2..1012), -- number of columns along North-South direction",
          "356:      spanX                            INTEGER (6..14),",
          "357:      spanY                            INTEGER (6..14),",
          "358:      deltaAltUnits                    INTEGER (1..128), -- units in meter",
          "359:      altitudeGrid                     SEQUENCE SIZE (1..10000) OF DeltaAltitudes,",
          "360:      ...",
          "361:      }",
          "364: OMA-LPPe-ver1-1-BuildingsHeightModel  ::= SEQUENCE {",
          "365:      northWestCorner                  Ellipsoid-Point, -- coordinates of North West corner of rectangle",
          "366:      northwestCornerHeigth            INTEGER (0..500), -- hight of North West corner of rectangle",
          "367:      nrows                            INTEGER (2..1012), -- number of rows along West-East direction",
          "368:      ncols                            INTEGER (2..1012), -- number of columns along North-South direction",
          "369:      spanX                            INTEGER (6..14),",
          "370:      spanY                            INTEGER (6..14),",
          "371:      deltaHeigthUnits                 INTEGER (1..16), -- units in meter",
          "372:      buildingsHeigthGrid              SEQUENCE SIZE(1..10000) OF DeltaHeight,",
          "373:      ...",
          "374:      }",
          "377: DeltaAltitudes ::= SEQUENCE {",
          "378:      deltaAlt                INTEGER (-15..16), -- in units of deltaAltUnits",
          "379:      numGridPoints           INTEGER (0..255),",
          "380:      ...",
          "381:      }",
          "384: DeltaHeight ::= SEQUENCE {",
          "385:      deltaHeight             INTEGER (-15..16), -- in units of deltaHeightUnits",
          "386:      numGridPoints           INTEGER (0..255),",
          "387:      ...",
          "388:      }",
          "392: OMA-LPPe-ver1-1-CellGlobalID ::=                  CHOICE {",
          "393:                                              eUTRA           CellGlobalIdEUTRA-AndUTRA,",
          "394:                                              uTRA            CellGlobalIdEUTRA-AndUTRA,",
          "395:                                              gSM             CellGlobalIdGERAN,",
          "396:                                              ...",
          "397: }",
          "400: OMA-LPPe-HighAccuracy3Dposition ::= SEQUENCE {",
          "401:       latitude                         INTEGER(-2147483648..2147483647),",
          "402:       longitude                        INTEGER(-2147483648..2147483647),",
          "403:       cep                                    INTEGER(0..255)                                          OPTIONAL,   --Cond NoEllipse",
          "404:       uncertainty-semimajor                  INTEGER(0..255)                                          OPTIONAL,   --Cond NoCEP",
          "405:       uncertainty-semiminor                  INTEGER(0..255)                                          OPTIONAL,   --Cond NoCEP",
          "406:       offset-angle                           INTEGER(0..179)                                          OPTIONAL,   --Cond NoCEP",
          "407:       confidenceHorizontal                   INTEGER(0..99)                                           OPTIONAL,",
          "408:       altitude                               INTEGER(-64000..1280000),",
          "409:       uncertainty-altitude                   INTEGER(0..255),",
          "410:       confidenceVertical                     INTEGER(0..99)                                           OPTIONAL,",
          "411:       ...",
          "412: }",
          "416: OMA-LPPe-HighAccuracy3Dvelocity ::= SEQUENCE {",
          "417:       enu-origin                            OMA-LPPe-HighAccuracy3Dposition                   OPTIONAL,",
          "418:       east-component                        INTEGER(0..511),",
          "419:       negative-sign-east                    NULL                                              OPTIONAL,        --Cond West",
          "420:       north-component                       INTEGER(0..511),",
          "421:       negative-sign-north                   NULL                                              OPTIONAL,        --Cond South",
          "422:       up-component                          INTEGER(0..511),",
          "423:       negative-sign-up                      NULL                                              OPTIONAL,        --Cond Down",
          "424:       cep                                   INTEGER(0..255)                                   OPTIONAL,        --Cond NoEllipse",
          "425:       uncertainty-semimajor                 INTEGER(0..255)                                   OPTIONAL,        --Cond NoCEP,",
          "426:       uncertainty-semiminor                 INTEGER(0..255)                                   OPTIONAL,        --Cond NoCEP,",
          "427:       offset-angle                          INTEGER(0..179)                                   OPTIONAL,        --Cond NoCEP,",
          "428:       confidenceHorizontal                  INTEGER(0..99)                                    OPTIONAL,",
          "429:       uncertainty-up-component              INTEGER(0..255),",
          "430:        confidenceUp                                   INTEGER(0..99)                                               OPTIONAL,",
          "431:        ...",
          "432: }",
          "435: OMA-LPPe-LocationInformationContainerID ::= SEQUENCE {",
          "436:       containerID                 INTEGER (0..65535),",
          "437:       ...",
          "438: }",
          "441: OMA-LPPe-LocationInformationContainer ::= SEQUENCE {",
          "442:      vendorOrOperatorID                                 OMA-LPPe-VendorOrOperatorID,",
          "443:      locationInformationContainerDataList               OMA-LPPe-LocationInformationContainerDataList,",
          "444:      ...",
          "445: }",
          "447: OMA-LPPe-LocationInformationContainerDataList ::= SEQUENCE",
          "448:           (SIZE(1..maxLocationInformationContainerDataList)) OF OMA-LPPe-LocationInformationContainerData",
          "450: OMA-LPPe-LocationInformationContainerData ::= SEQUENCE {",
          "451:      containerID               OMA-LPPe-LocationInformationContainerID,",
          "452:      containerData             OCTET STRING,",
          "453:      ...",
          "454: }",
          "457: OMA-LPPe-LocationInformationContainerRequest ::= SEQUENCE {",
          "458:      vendorOrOperatorID                                      OMA-LPPe-VendorOrOperatorID,",
          "459:      locationInformationContainerRequestList                 OMA-LPPe-LocationInformationContainerRequestList,",
          "460:      ...",
          "461: }",
          "463: OMA-LPPe-LocationInformationContainerRequestList ::= SEQUENCE",
          "464:                                                              (SIZE (1.. maxLocationInformationContainerDataList)) OF",
          "465:                                                                         OMA-LPPe-LocationInformationContainerRequestItem",
          "467: maxLocationInformationContainerDataList INTEGER ::= 10",
          "469: OMA-LPPe-LocationInformationContainerRequestItem ::= SEQUENCE {",
          "470:      containerID                    OMA-LPPe-LocationInformationContainerID,",
          "471:      additionalInformation          OCTET STRING                                  OPTIONAL,",
          "472:      ...",
          "473: }",
          "476: OMA-LPPe-MapDataReference ::= SEQUENCE {",
          "477:      dataID                          OMA-LPPe-AssistanceContainerID,",
          "478:      mapReference                    OCTET STRING (SIZE (1..64)),",
          "479:      mapSize                         INTEGER (1..5000)               OPTIONAL,",
          "480:      ...",
          "481: }",
          "484: OMA-LPPe-Orientation ::= CHOICE {",
          "485:      eulerAngles           SEQUENCE {",
          "486:                                 alpha     INTEGER (0..359),",
          "487:                                 beta      INTEGER (0..180),",
          "488:                                 gamma     INTEGER (0..359),",
          "489:                                 ...",
          "490:                                 },",
          "491:      ...",
          "492: }",
          "495: OMA-LPPe-ReferencePoint ::= SEQUENCE {",
          "496:      referencePointUniqueID                       OMA-LPPe-ReferencePointUniqueID              OPTIONAL,",
          "497:      referencePointGeographicLocation             CHOICE {",
          "498:           location3D                                        EllipsoidPointWithAltitude,",
          "499:           location3DwithUncertainty                         EllipsoidPointWithAltitudeAndUncertaintyEllipsoid,",
          "500:           locationwithhighaccuracy                          OMA-LPPe-HighAccuracy3Dposition,",
          "501:           ...",
          "502:           }                                                                                              OPTIONAL,",
          "503:      referencePointCivicLocation                  OMA-LPPe-CivicLocation                                 OPTIONAL,",
          "504:      referencePointFloorLevel                     INTEGER (-20..235)                                     OPTIONAL,",
          "505:      relatedReferencePoints                       SEQUENCE (SIZE (1..8)) OF",
          "506:                                                        OMA-LPPe-ReferencePointRelationship               OPTIONAL,",
          "507:      mapDataInformation                           OMA-LPPe-MapDataInformation                            OPTIONAL,",
          "508:      ...",
          "509: }",
          "511: OMA-LPPe-MapDataInformation ::= SEQUENCE (SIZE (1..16)) OF OMA-LPPe-MapDataReferenceElement",
          "513: OMA-LPPe-MapDataReferenceElement ::= SEQUENCE {",
          "514:      mapDataUrl          CHOICE {",
          "515:           mapDataUrl                         OMA-LPPe-Uri,",
          "516:           mapDataRef                         OMA-LPPe-MapDataReference",
          "517:      },",
          "518:      mapProvider         CHOICE {",
          "519:           sameAsRefPointProvider             NULL,",
          "520:           notSameAsRefPointProvider          OMA-LPPe-VendorOrOperatorID,",
          "521:           ...",
          "522:      }                                                                                              OPTIONAL,",
          "523:      mapAssociation  CHOICE {",
          "524:           referencePointUniqueID             NULL,",
          "525:           otherID                            VisibleString (SIZE (1..64)),",
          "526:           mapOffset                          OMA-LPPe-RelativeLocation,",
          "527:           origin                             NULL,",
          "528:           ...",
          "529:      },",
          "530:      mapHorizontalOrientation                          INTEGER (0..359)                             OPTIONAL,",
          "531:      ...",
          "532: }",
          "534: OMA-LPPe-ReferencePointRelationship ::= SEQUENCE {",
          "535:      referencePointUniqueID             OMA-LPPe-ReferencePointUniqueID,",
          "536:      relativeLocation                   OMA-LPPe-RelativeLocation,",
          "537:      ...",
          "538: }",
          "541: OMA-LPPe-ReferencePointUniqueID ::= SEQUENCE {",
          "542:      providerID                OMA-LPPe-VendorOrOperatorID,",
          "543:      providerAssignedID  OCTET STRING,",
          "544:      version                   INTEGER (1..64),",
          "545:      ...",
          "546: }",
          "549: OMA-LPPe-RelativeLocation ::= SEQUENCE {",
          "550:      units                          ENUMERATED {cm,dm, m10, ...}                                       OPTIONAL,",
          "551:      arc-second-units               ENUMERATED {as0-0003, as0-003, as0-03, as0-3, ...}  OPTIONAL,",
          "552:      relativeNorth                  INTEGER (-524288..524287),",
          "553:      relativeEast                   INTEGER (-524288..524287),",
          "554:      relativeAltitude               OMA-LPPe-RelativeAltitude                                          OPTIONAL,",
          "555:      horizontalUncertainty          OMA-LPPe-HorizontalUncertaintyAndConfidence                        OPTIONAL,",
          "556:      ...",
          "557: }",
          "559: OMA-LPPe-HorizontalUncertaintyAndConfidence ::= SEQUENCE {",
          "560:      uncShape        CHOICE {",
          "561:                                circle              INTEGER (0..127),",
          "562:                                ellipse             SEQUENCE {",
          "563:                                     semimajor            INTEGER (0..127),",
          "564:                                     semiminor            INTEGER (0..127),",
          "565:                                     offsetAngle          INTEGER (0..179)",
          "566:                                },",
          "567:                                ...",
          "568:      },",
          "569:      confidence INTEGER (0..99) OPTIONAL,",
          "570:      ...",
          "571: }",
          "573: OMA-LPPe-RelativeAltitude ::= SEQUENCE {",
          "574:      geodeticRelativeAltitude             OMA-LPPe-GeodeticRelativeAltitude               OPTIONAL,",
          "575:      civicRelativeAltitude                OMA-LPPe-CivicRelativeAltitude                  OPTIONAL,",
          "576:      ...",
          "577: }",
          "579: OMA-LPPe-GeodeticRelativeAltitude ::= SEQUENCE {",
          "580:      geodetic-height-depth                INTEGER (-32768..32767),",
          "581:      geodetic-uncertainty-and-confidence OMA-LPPe-GeodeticUncertaintyAndConfidence                             OPTIONAL,",
          "582:      ...",
          "583: }",
          "585: OMA-LPPe-GeodeticUncertaintyAndConfidence ::= SEQUENCE {",
          "586:      uncertainty          INTEGER (0..127),",
          "587:      confidence           INTEGER (0..99)                 OPTIONAL,",
          "588:      ...",
          "589: }",
          "591: OMA-LPPe-CivicRelativeAltitude ::= SEQUENCE {",
          "592:      civic-floors               INTEGER (-255..256),",
          "593:      civic-uncertainty-and-confidence    OMA-LPPe-CivicUncertaintyAndConfidence OPTIONAL,",
          "594:      ...",
          "595: }",
          "597: OMA-LPPe-CivicUncertaintyAndConfidence ::= SEQUENCE {",
          "598:      uncertainty           INTEGER (0..127),",
          "599:       confidence           INTEGER (0..99)                OPTIONAL,",
          "600:       ...",
          "601: }",
          "604: OMA-LPPe-Session-ID ::= SEQUENCE {",
          "605:      provider-ID                OMA-LPPe-VendorOrOperatorID,",
          "606:      server-ID                  OCTET STRING (SIZE(4)),",
          "607:      session-ID                 OCTET STRING (SIZE(4)),",
          "608:      ...",
          "609: }",
          "612: -- asn2wrs does not handle '%' in the restricted string",
          "613: --OMA-LPPe-Uri ::= VisibleString (FROM ( \"a\"..\"z\" | \"A\"..\"Z\" | \"0\"..\"9\" | \":\" | \"/\" | \"?\" | \"#\" | \"[\" |",
          "614: --\"]\" | \"@\" | \"!\" | \"$\" | \"&\" | \"'\" | \"(\" | \")\" | \"*\" | \"+\" | \",\" | \";\" | \"=\" | \"-\" | \".\" | \"_\" | \"~\" |",
          "615: --\"%\"  ))",
          "616: OMA-LPPe-Uri ::= VisibleString (FROM ( \"a\"..\"z\" | \"A\"..\"Z\" | \"0\"..\"9\" | \":\" | \"/\" | \"?\" | \"#\" | \"[\" |",
          "617: \"]\" | \"@\" | \"!\" | \"$\" | \"&\" | \"'\" | \"(\" | \")\" | \"*\" | \"+\" | \",\" | \";\" | \"=\" | \"-\" | \".\" | \"_\" | \"~\"))",
          "620: OMA-LPPe-ver1-1-BroadcastSystemID ::= CHOICE {",
          "621:      standardSystemID                INTEGER (1..16),",
          "622:      proprietarySystemID             SEQUENCE        {",
          "623:                                                 vendorOrOperator                OMA-LPPe-VendorOrOperatorID,",
          "624:                                                 proprietarySystemID             INTEGER (1..16)",
          "625:                                            },",
          "626:      ...",
          "627: }",
          "630: OMA-LPPe-ver1-1-BroadcastADTypes ::= SEQUENCE {",
          "631:      lppLabels            SEQUENCE (SIZE (1..maxLPPLabelSets)) OF OMA-LPPe-ver1-1-LabelSet,",
          "632:      lppeLabels           SEQUENCE (SIZE (1..maxLPPeLabelSets)) OF OMA-LPPe-ver1-1-LabelSet,",
          "633:      ...",
          "634: }",
          "636: OMA-LPPe-ver1-1-LabelSet ::= SEQUENCE {",
          "637:      level1-element  SEQUENCE {",
          "638:                           level1-element-value          INTEGER (1..maxLevel1-element),",
          "639:                           level2-element  SEQUENCE {",
          "640:                                               level2-element-value           INTEGER (1..maxLevel2-element),",
          "641:                                               level3-element  SEQUENCE {",
          "642:                                                                   level3-element-value           INTEGER            (1..maxLevel3-element),",
          "643:                                                                   ...",
          "644:                                                                   }     OPTIONAL,",
          "645:                           ...",
          "646:                           }    OPTIONAL,",
          "647:      ...",
          "648:      }    OPTIONAL,",
          "649:      lastElements         BIT STRING (SIZE (1..maxFinal-element)),",
          "650:      additionalElements  ENUMERATED { none, all, ... }                       OPTIONAL,",
          "651:      ...",
          "652: }",
          "654: maxLevel1-element              INTEGER ::= 32",
          "656: maxLevel2-element              INTEGER ::= 32",
          "658: maxLevel3-element              INTEGER ::= 32",
          "660: maxFinal-element               INTEGER ::= 32",
          "662: maxLPPLabelSets                INTEGER ::= 64",
          "664: maxLPPeLabelSets               INTEGER ::= 128",
          "667: OMA-LPPe-ver1-1-AccessNetworkID ::= CHOICE {",
          "668:       gSMAccess              OMA-LPPe-ver1-1-MCC-MNC,",
          "669:       wCDMAAccess            OMA-LPPe-ver1-1-MCC-MNC,",
          "670:       lTEAccess              OMA-LPPe-ver1-1-MCC-MNC,",
          "671:       wiMaxAccess            OMA-LPPe-ver1-1-BSID,",
          "672:       wLANAccess             OMA-LPPe-WLAN-AP-ID,",
          "673:       ...",
          "674: }",
          "676: OMA-LPPe-ver1-1-MCC-MNC ::= SEQUENCE {",
          "677:       mcc        SEQUENCE (SIZE (3)) OF INTEGER (0..9),",
          "678:       mnc        SEQUENCE (SIZE (2..3)) OF INTEGER (0..9),",
          "679:       ...",
          "680: }",
          "682: OMA-LPPe-ver1-1-BSID ::= SEQUENCE {",
          "683:       bsID-MSB      BIT STRING (SIZE(24)),",
          "684:       bsID-LSB      BIT STRING (SIZE(24)),",
          "685:       ...",
          "686: }",
          "689: OMA-LPPe-ver1-1-AuthenticationSetID ::= INTEGER (0..255)",
          "692: OMA-LPPe-ver1-1-AuthenticationSet ::= SEQUENCE {",
          "693:      authenticationSetID              OMA-LPPe-ver1-1-AuthenticationSetID,",
          "694:      rsaPublicKey                     SEQUENCE         {",
          "695:                                             modulus              BIT STRING (SIZE (2048)),",
          "696:                                             exponent             BIT STRING (SIZE (2..2048))",
          "697:                                       },",
          "698:      saltLength                       INTEGER (0..32),",
          "699:      ...",
          "700: }",
          "703: OMA-LPPe-ver1-1-CipherSetID ::= INTEGER (0..65535)",
          "706: OMA-LPPe-ver1-1-CipherSet ::= SEQUENCE {",
          "707:      cipherSetID                      OMA-LPPe-ver1-1-CipherSetID,",
          "708:      cipherKey                        BIT STRING (SIZE (128)),",
          "709:      c0                               BIT STRING (SIZE (1..128)),",
          "710:      ...",
          "711: }",
          "714: OMA-LPPe-ver1-1-ServerID ::= SEQUENCE {",
          "715:      provider-ID                OMA-LPPe-VendorOrOperatorID,",
          "716:      server-ID                  OCTET STRING (SIZE(4)),",
          "717:      ...",
          "718: }",
          "721: OMA-LPPe-ValidityArea ::= SEQUENCE {",
          "722:      regionSizeInv                    INTEGER (1..255),",
          "723:      areaWidth                        INTEGER (2..9180)                OPTIONAL,",
          "724:      codedLatOfNWCorner               INTEGER (0..4589),",
          "725:      codedLonOfNWCorner               INTEGER (0..9179),",
          "726:      rleList                          OMA-LPPe-RleList                 OPTIONAL,",
          "727:      ...",
          "728: }",
          "730: OMA-LPPe-RleList ::= SEQUENCE (SIZE(1..65535)) OF INTEGER (0..255)",
          "733: OMA-LPPe-ValidityPeriod ::= SEQUENCE {",
          "734:      beginTime             GNSS-SystemTime,",
          "735:      beginTimeAlt          INTEGER (0..2881)           OPTIONAL,",
          "736:      duration              INTEGER (1..2881),",
          "737:      ...",
          "738: }",
          "741: OMA-LPPe-VendorOrOperatorAssistanceDataIdentifier ::= SEQUENCE {",
          "742:      vendorOrOperatorID              OMA-LPPe-VendorOrOperatorID,",
          "743:      assistanceDataID                OMA-LPPe-AssistanceContainerID,",
          "744:      ...",
          "745: }",
          "748: OMA-LPPe-VendorOrOperatorID ::= CHOICE {",
          "749:      standard-VendorOrOperatorID                     INTEGER(1..1024),",
          "750:      nonStandard-VendorOrOperatorID                  OMA-LPPe-NonStandard-VendorOrOperatorID,",
          "751:      ...",
          "752: }",
          "755: OMA-LPPe-NonStandard-VendorOrOperatorID ::= SEQUENCE {",
          "756:      encodedID                            INTEGER(0..65535),",
          "757:      visibleIdentification                OMA-LPPe-CharArray  OPTIONAL,",
          "758:      ...",
          "759: }",
          "762: OMA-LPPe-WirelessAccessTypes ::= BIT STRING {                     gsm             (0),",
          "763:                                                                  utra             (1),",
          "764:                                                                  lte              (2),",
          "765:                                                                  wimax            (3),",
          "766:                                                                  wifi             (4),",
          "767:                                                                  other            (5) } (SIZE(1..16))",
          "770: OMA-LPPe-WLAN-AP-ID ::= SEQUENCE {",
          "771:      apMacAddress                     BIT STRING ( SIZE (48) ),",
          "772:      ...",
          "773: }",
          "776: OMA-LPPe-WLAN-AP-Type ::= ENUMERATED {",
          "777:      ieee802-11a,",
          "778:      ieee802-11b,",
          "779:      ieee802-11g,",
          "780:      ieee802-11n,",
          "781:      ...,",
          "782:      ieee802-11ac,",
          "783:      ieee802-11ad",
          "784: }",
          "787: OMA-LPPe-WLAN-AP-Type-List ::= BIT STRING {",
          "788:      ieee802-11a (0),",
          "789:      ieee802-11b (1),",
          "790:      ieee802-11g (2),",
          "791:      ieee802-11n (3),",
          "792:      ieee802-11ac (4),",
          "793:      ieee802-11ad (5)} (SIZE (1..16))",
          "796: OMA-LPPe-WLANFemtoCoverageArea ::= SEQUENCE {",
          "797:      truncation               INTEGER(-127..128)                                                         OPTIONAL,",
          "798:      areaType                 ENUMERATED { gaussian, binaryDistribution, ...}                            OPTIONAL,",
          "799:      confidence               INTEGER (0..99),",
          "800:      componentList            SEQUENCE (SIZE (1..16)) OF OMA-LPPe-WLANFemtoCoverageAreaElement,",
          "801:      ...",
          "802: }",
          "804: OMA-LPPe-WLANFemtoCoverageAreaElement ::= SEQUENCE {",
          "805:      refPointAndArea          SEQUENCE {",
          "806:           referenceLocation        ENUMERATED  {antenna,",
          "807:                                                    referencePoint,",
          "808:                                                    ... },",
          "809:           referencePoint           OMA-LPPe-ReferencePointUniqueID              OPTIONAL,",
          "810:           locationAndArea          OMA-LPPe-RelativeLocation,",
          "811:           ...",
          "812:           },",
          "813:      type                          ENUMERATED  {indoor (0),",
          "814:                                                    outdoor (1),",
          "815:                                                    mixed (2),",
          "816:                                                    ... }                        OPTIONAL,",
          "817:       weight                           INTEGER (0..100)                                  OPTIONAL,",
          "818:       ...",
          "819: }",
          "822: OMA-LPPe-CommonIEsRequestCapabilities ::= SEQUENCE {",
          "823:       iP-Address-RequestCapabilities                               OMA-LPPe-IP-Address-RequestCapabilities                      OPTIONAL,",
          "824:       assistanceContainerSupportReq                                OMA-LPPe-AssistanceContainerSupportReq                       OPTIONAL,",
          "825:      locationInformationContainerSupportReq               OMA-LPPe-LocationInformationContainerSupportReq",
          "826:                                                                                                                OPTIONAL,",
          "827:      relativeLocationChange-RequestCapabilities  OMA-LPPe-RelativeLocationChange-RequestCapabilities",
          "828:                                                                                                                OPTIONAL,",
          "829:      highAccuracyFormatCapabilitiesReq                    OMA-LPPe-HighAccuracyFormatCapabilitiesReq  OPTIONAL,",
          "830:      segmentedAssistanceData-ReqCapabilities              OMA-LPPe-SegmentedAssistanceData-ReqCapabilities",
          "831:                                                                                                                OPTIONAL,",
          "832:      referencePointCapabilitiesReq                        OMA-LPPe-ReferencePointCapabilitiesReq               OPTIONAL,",
          "833:      scheduledLocation-RequestCapabilities                OMA-LPPe-ScheduledLocation-RequestCapabilities",
          "834:                                                                                                                OPTIONAL,",
          "835:      accessCapabilitiesReq                                OMA-LPPe-AccessCapabilitiesReq                       OPTIONAL,",
          "836:      segmentedLocationInformation-ReqCapabilities",
          "837:                                                           OMA-LPPe-SegmentedLocationInformation-ReqCapabilities",
          "838:                                                                                                                OPTIONAL,",
          "839:      ...,",
          "840: -- version 1.1 extension elements",
          "841:      ver1-1-localCellInformation-ReqCapabilities              OMA-LPPe-ver1-1-localCellInformation-ReqCapabilities",
          "842:      OPTIONAL,",
          "843:     ver1-1-broadcast-ReqCapabilities                          OMA-LPPe-ver1-1-broadcast-ReqCapabilities            OPTIONAL",
          "844: }",
          "846: OMA-LPPe-IP-Address-RequestCapabilities ::= SEQUENCE {",
          "847:      ...",
          "848: }",
          "850: OMA-LPPe-AssistanceContainerSupportReq ::= SEQUENCE {",
          "851:      vendorOrOperatorIDList                               OMA-LPPe-VendorOrOperatorIDList                      OPTIONAL,",
          "852:      ...",
          "853: }",
          "855: OMA-LPPe-LocationInformationContainerSupportReq ::= SEQUENCE {",
          "856:      vendorOrOperatorIDList                               OMA-LPPe-VendorOrOperatorIDList                      OPTIONAL,",
          "857:      ...",
          "858: }",
          "860: OMA-LPPe-VendorOrOperatorIDList ::= SEQUENCE (SIZE(1..maxVendorOrOperatorIDList)) OF",
          "861:                                                                                            OMA-LPPe-VendorOrOperatorID",
          "863: maxVendorOrOperatorIDList         INTEGER ::= 32",
          "865: OMA-LPPe-RelativeLocationChange-RequestCapabilities ::= SEQUENCE {",
          "866:      ...",
          "867: }",
          "869: OMA-LPPe-HighAccuracyFormatCapabilitiesReq ::= SEQUENCE {",
          "870:      ...",
          "871: }",
          "872: OMA-LPPe-SegmentedAssistanceData-ReqCapabilities ::= SEQUENCE {",
          "873:      ...",
          "874: }",
          "876: OMA-LPPe-ReferencePointCapabilitiesReq ::= SEQUENCE {",
          "877:      referencePointProviderSupportListReq   SEQUENCE (SIZE (1..128)) OF",
          "878:                                                           OMA-LPPe-VendorOrOperatorID                     OPTIONAL,",
          "879:      ...",
          "880: }",
          "882: OMA-LPPe-ScheduledLocation-RequestCapabilities ::= SEQUENCE {",
          "883:      ...",
          "884: }",
          "886: OMA-LPPe-AccessCapabilitiesReq ::= SEQUENCE {",
          "887:      ...",
          "888: }",
          "890: OMA-LPPe-SegmentedLocationInformation-ReqCapabilities ::= SEQUENCE {",
          "891:      ...",
          "892: }",
          "894: OMA-LPPe-ver1-1-localCellInformation-ReqCapabilities ::= SEQUENCE {",
          "895:      ...",
          "896: }",
          "898: OMA-LPPe-ver1-1-broadcast-ReqCapabilities ::= SEQUENCE {",
          "899:       broadcastSystems                  SEQUENCE (SIZE (1..16)) OF OMA-LPPe-ver1-1-BroadcastSystemID",
          "900:       OPTIONAL,",
          "901:       ...",
          "902: }",
          "905: OMA-LPPe-CommonIEsProvideCapabilities ::= SEQUENCE {",
          "906:      iP-Address-Capabilities                         OMA-LPPe-IP-Address-Capabilities                          OPTIONAL,",
          "907:      assistanceContainerSupport                      OMA-LPPe-AssistanceContainerSupport                       OPTIONAL,",
          "908:      locationInformationContainerSupport             OMA-LPPe-LocationInformationContainerSupport              OPTIONAL,",
          "909:      relativeLocationChange-Capabilities             OMA-LPPe-RelativeLocationChange-Capabilities              OPTIONAL,",
          "910:      highAccuracyFormatCapabilities                  OMA-LPPe-HighAccuracyFormatCapabilities                   OPTIONAL,",
          "911:      segmentedAssistanceData-ProvideCapabs           OMA-LPPe-SegmentedAssistanceData-ProvideCapabs  OPTIONAL,",
          "912:      referencePointCapabilities                      OMA-LPPe-ReferencePointCapabilities                       OPTIONAL,",
          "913:      scheduledLocation-Capabilities                  OMA-LPPe-ScheduledLocation-Capabilities                   OPTIONAL,",
          "914:      accessCapabilities                              OMA-LPPe-AccessCapabilities                               OPTIONAL,",
          "915:      segmentedLocationInformation-ProvideCapabs",
          "916:                                                      OMA-LPPe-SegmentedLocationInformation-ProvideCapabs",
          "917:                                                                                                                OPTIONAL,",
          "918:      ...,",
          "919: -- version 1.1 extension elements",
          "920:      ver1-1-localCellInformation-ProvideCapabilities OMA-LPPe-ver1-1-localCellInformation-ProvideCapabilities OPTIONAL,",
          "921:     ver1-1-broadcast-ProvideCapabilities                  OMA-LPPe-ver1-1-broadcast-ProvideCapabilities             OPTIONAL",
          "922: }",
          "924: OMA-LPPe-IP-Address-Capabilities ::= SEQUENCE {",
          "925:      iP-Address-support           BIT STRING {       iPv4           (0),",
          "926:                                                      iPv6           (1),",
          "927:                                                      nat            (2) } (SIZE(1..8))           OPTIONAL,",
          "928:      ...",
          "929: }",
          "932: OMA-LPPe-AssistanceContainerSupport              ::=       SEQUENCE        (SIZE(1..maxVendorOrOperatorIDList))             OF",
          "933:                                                                OMA-LPPe-VendorOrOperatorAssistanceContainerList",
          "936: OMA-LPPe-VendorOrOperatorAssistanceContainerList ::= SEQUENCE {",
          "937:      vendorOrOperatorID                OMA-LPPe-VendorOrOperatorID,",
          "938:      assistanceContainerList           OMA-LPPe-AssistanceContainerList,",
          "939:      ...",
          "940: }",
          "942: OMA-LPPe-AssistanceContainerList ::= SEQUENCE (SIZE(1.. maxAssistanceContainerList))OF",
          "943:                                                                                        OMA-LPPe-AssistanceContainerID",
          "945: OMA-LPPe-LocationInformationContainerSupport             ::=    SEQUENCE     (SIZE(1..maxVendorOrOperatorIDList))           OF",
          "946:                                                      OMA-LPPe-VendorOrOperatorLocationInformationContainerList",
          "948: OMA-LPPe-VendorOrOperatorLocationInformationContainerList ::= SEQUENCE {",
          "949:      vendorOrOperatorID                         OMA-LPPe-VendorOrOperatorID,",
          "950:      locationInformationContainerList           OMA-LPPe-LocationInformationContainerList,",
          "951:      ...",
          "952: }",
          "954: OMA-LPPe-LocationInformationContainerList  ::=  SEQUENCE  (SIZE(1..maxLocationInformationContainerList))OF",
          "955:                                                                              OMA-LPPe-LocationInformationContainerID",
          "957: maxLocationInformationContainerList INTEGER ::= 64",
          "958: OMA-LPPe-RelativeLocationChange-Capabilities ::= SEQUENCE {",
          "959:      numberOfChanges         INTEGER (1..5)               OPTIONAL,",
          "960:      ...",
          "961: }",
          "963: OMA-LPPe-HighAccuracyFormatCapabilities ::= BIT STRING {                 hAposition(0),",
          "964:                                                                         hAvelocity(1) } (SIZE(1..8))",
          "966: OMA-LPPe-SegmentedAssistanceData-ProvideCapabs ::= SEQUENCE {",
          "967:      maxSegments        INTEGER (2..4096)            OPTIONAL,",
          "968:      maxSize            INTEGER (1..5000)            OPTIONAL,",
          "969:      minSize            INTEGER (1..5000)            OPTIONAL,",
          "970:      resume             NULL                         OPTIONAL,",
          "971:      ...",
          "972: }",
          "974: OMA-LPPe-ReferencePointCapabilities ::= SEQUENCE {",
          "975:      relativeLocationReportingSupport           BIT STRING {       geo                 (0),",
          "976:                                                                    civic               (1),",
          "977:                                                                    otherProviders  (2)  } (SIZE (1..8)),",
          "978:      referencePointProviderSupportList   SEQUENCE (SIZE (1..128)) OF",
          "979:                                                      OMA-LPPe-ReferencePointProviderSupportElement             OPTIONAL,",
          "980:      ...",
          "981: }",
          "983: OMA-LPPe-ReferencePointProviderSupportElement ::= SEQUENCE {",
          "984:      referencePointProvider                OMA-LPPe-VendorOrOperatorID,",
          "985:      mapDataSupport                        SEQUENCE {",
          "986:                                                 mapDataFormat           OCTET STRING            OPTIONAL,",
          "987:                                                 ...",
          "988:                                                 }         OPTIONAL,",
          "989:      ...",
          "990: }",
          "992: OMA-LPPe-ScheduledLocation-Capabilities ::= SEQUENCE {",
          "993:      minimumWindow                INTEGER (1..1024)           OPTIONAL,",
          "994:      gnssTimeReference            GNSS-ID-Bitmap              OPTIONAL,",
          "995:      networkTimeReference         ENUMERATED {serving,",
          "996:                                                 servingOrNonServing,",
          "997:                                                 ... }         OPTIONAL,",
          "998:      ...",
          "999: }",
          "1001: OMA-LPPe-AccessCapabilities ::= SEQUENCE {",
          "1002:      accessTypeUnknown                NULL                                   OPTIONAL,",
          "1003:      fixedAccessTypes                 OMA-LPPe-FixedAccessTypes              OPTIONAL,",
          "1004:      wirelessAccessTypes              OMA-LPPe-WirelessAccessTypes           OPTIONAL,",
          "1005:      ...",
          "1006: }",
          "1008: OMA-LPPe-SegmentedLocationInformation-ProvideCapabs ::= SEQUENCE {",
          "1009:      maxSegments        INTEGER (2..4096)            OPTIONAL,",
          "1010:      maxSize            INTEGER (1..5000)            OPTIONAL,",
          "1011:      minSize            INTEGER (1..5000)            OPTIONAL,",
          "1012:      resume             NULL                         OPTIONAL,",
          "1013:      ...",
          "1014: }",
          "1016: OMA-LPPe-ver1-1-localCellInformation-ProvideCapabilities ::= SEQUENCE {",
          "1017:      localCellInformation-Support               BIT STRING {gnssTiming                 (0),",
          "1018:                                                                networkTiming           (1),",
          "1019:                                                                coverage                (2),",
          "1020:                                                               coordinates              (3),",
          "1021:                                                               frequencyAccuracy        (4)} (SIZE (1..16)),",
          "1022:      ...",
          "1023: }",
          "1025: OMA-LPPe-ver1-1-broadcast-ProvideCapabilities ::= SEQUENCE (SIZE (1..16)) OF OMA-LPPe-ver1-1-BroadcastSystem-Capabs",
          "1027: OMA-LPPe-ver1-1-BroadcastSystem-Capabs ::= SEQUENCE {",
          "1028:      broadcastSystemID            OMA-LPPe-ver1-1-BroadcastSystemID,",
          "1029:      broadcastADTypes             OMA-LPPe-ver1-1-BroadcastADTypes                OPTIONAL,",
          "1030:      point2pointAD                OMA-LPPe-ver1-1-point2pointAD                   OPTIONAL,",
          "1031:      ciphering                    OMA-LPPe-ver1-1-Ciphering                       OPTIONAL,",
          "1032:      authentication               OMA-LPPe-ver1-1-Authentication                  OPTIONAL,",
          "1033:     ...",
          "1034: }",
          "1036: OMA-LPPe-ver1-1-point2pointAD ::= SEQUENCE {",
          "1037:      ...",
          "1038: }",
          "1040: OMA-LPPe-ver1-1-Ciphering ::= SEQUENCE {",
          "1041:       ...",
          "1042: }",
          "1044: OMA-LPPe-ver1-1-Authentication ::= SEQUENCE {",
          "1045:       ...",
          "1046: }",
          "1050: OMA-LPPe-CommonIEsRequestAssistanceData ::= SEQUENCE  {",
          "1051:       approximate-location                          EllipsoidPointWithAltitudeAndUncertaintyEllipsoid                          OPTIONAL,",
          "1052:       assistanceContainerRequestList  OMA-LPPe-AssistanceContainerRequestList                                                  OPTIONAL,",
          "1053:       requestPeriodicADwithUpdate                   OMA-LPPe-RequestPeriodicADwithUpdate                                       OPTIONAL,",
          "1054:                                                                                                   --Cond RequestPeriodicADWithUpdate",
          "1055:       segmentedADpreference                         ENUMERATED {useBasic, useResume, ...}                                      OPTIONAL,",
          "1056:       segmentedADResume                             OMA-LPPe-SegmentedADResume                                                 OPTIONAL,",
          "1057:                                                                                                   --Cond segmentedTransferResume",
          "1058:       referencePointAssistanceReq                   OMA-LPPe-ReferencePointAssistanceReq                                       OPTIONAL,",
          "1059:       ...,",
          "1060: -- version 1.1 extension elements",
          "1061:       ver1-1-localCellInformationReq  OMA-LPPe-ver1-1-LocalCellInformationReq                                            OPTIONAL,",
          "1062:     ver1-1-BroadcastAssistanceDataReq                OMA-LPPe-ver1-1-BroadcastAssistanceDataReq               OPTIONAL,",
          "1063:      ver1-1-AccessNetwork                            OMA-LPPe-ver1-1-AccessNetworkID                     OPTIONAL,",
          "1064:      ver1-1-groundMorphologyModelReq                 OMA-LPPe-ver1-1-GroundMorphologyModelReq            OPTIONAL",
          "1065: }",
          "1067: OMA-LPPe-RequestPeriodicADwithUpdate ::= SEQUENCE {",
          "1068:      periodicAD-session-ID                 OCTET STRING (SIZE(4)),",
          "1069:      typeOfADRequest         TypeOfADRequest,",
          "1070:      ...",
          "1071: }",
          "1073: TypeOfADRequest ::= ENUMERATED {",
          "1074:      initialRequest,",
          "1075:      updateAndContinueIfUpdateFails,",
          "1076:      updateAndAbortIfUpdateFails,",
          "1077:      ...",
          "1078: }",
          "1080: OMA-LPPe-SegmentedADResume ::= SEQUENCE {",
          "1081:      segmentedAD-session-ID                     OMA-LPPe-Session-ID,",
          "1082:      next-segment-number          INTEGER (1..4096)",
          "1083: }",
          "1085: OMA-LPPe-ReferencePointAssistanceReq ::= SEQUENCE {",
          "1086:      referencePointReq                SEQUENCE (SIZE (1..16)) OF OMA-LPPe-ReferencePointAssistanceReqElement,",
          "1087:      ...",
          "1088: }",
          "1090: OMA-LPPe-ReferencePointAssistanceReqElement ::= SEQUENCE {",
          "1091:      referencePointProvider           OMA-LPPe-VendorOrOperatorID,",
          "1092:      mapDataReq                       OCTET STRING                               OPTIONAL,",
          "1093:      ...",
          "1094: }",
          "1096: OMA-LPPe-ver1-1-GroundMorphologyModelReq ::= SEQUENCE {",
          "1097:      modelsReq BIT STRING {altitude(0), buildings(1)}              (SIZE  (1..8)),",
          "1098:      refAreaParam                 SEQUENCE {",
          "1099:           northWestCorner         Ellipsoid-Point OPTIONAL,",
          "1100:           spanX                   INTEGER (6..14),",
          "1101:           spanY                   INTEGER (6..14),",
          "1102:           ...",
          "1103:           }             OPTIONAL,",
          "1104:      ...",
          "1105: }",
          "1108: OMA-LPPe-ver1-1-LocalCellInformationReq ::= SEQUENCE {",
          "1109:      localCellInformationReq               BIT STRING {gnssTiming                (0),",
          "1110:                                                           networkTiming          (1),",
          "1111:                                                           coverage               (2),",
          "1112:                                                           coordinates            (3),",
          "1113:                                                           frequencyAccuracy      (4)} (SIZE (1..16)),",
          "1114:      localCellID                           OMA-LPPe-ver1-1-CellGlobalID               OPTIONAL,       --     Cond      ver1-1cellVisible",
          "1115:      numberOfCells                         INTEGER (0..7)               OPTIONAL,",
          "1116:      ...",
          "1117: }",
          "1119: OMA-LPPe-ver1-1-BroadcastAssistanceDataReq ::= SEQUENCE {",
          "1120:      broadcastSystem         OMA-LPPe-ver1-1-BroadcastSystem            OPTIONAL,",
          "1121:      ...",
          "1122: }",
          "1124: OMA-LPPe-ver1-1-BroadcastSystem ::= SEQUENCE {",
          "1125:      broadcastSystemID            OMA-LPPe-ver1-1-BroadcastSystemID,",
          "1126:      cipherSets                   SEQUENCE (SIZE (1..16)) OF OMA-LPPe-ver1-1-CipherSetID  OPTIONAL,",
          "1127:      authenticationSets           SEQUENCE (SIZE(1..4)) OF OMA-LPPe-ver1-1-AuthenticationSetID                OPTIONAL,",
          "1128:      ...",
          "1129: }",
          "1132: OMA-LPPe-CommonIEsProvideAssistanceData ::= SEQUENCE  {",
          "1133:      assistanceContainerList                    OMA-LPPe-AssistanceContainerProvideList              OPTIONAL,",
          "1134:      providePeriodicADwithUpdate                OMA-LPPe-ProvidePeriodicADwithUpdate                 OPTIONAL,",
          "1135:                                                                              --Cond ProvidePeriodicADWithUpdate,",
          "1136:      segmentedADTransfer                        OMA-LPPe-SegmentedADTransfer                         OPTIONAL,",
          "1137:                                                                              --Cond segmentedTransferWithResume",
          "1138:      default-reference-point                    OMA-LPPe-ReferencePoint                              OPTIONAL,",
          "1139:      ...,",
          "1140: -- version 1.1 extension element",
          "1141:      ver1-1-localCellInformation                OMA-LPPe-ver1-1-LocalCellInformation                 OPTIONAL,",
          "1142:      ver1-1-BroadcastAssistanceData             OMA-LPPe-ver1-1-BroadcastAssistanceData              OPTIONAL,",
          "1143:      ver1-1-groundMorphologyModel               OMA-LPPe-ver1-1-GroundMorphologyModel                OPTIONAL",
          "1144: }",
          "1146: OMA-LPPe-ProvidePeriodicADwithUpdate ::= SEQUENCE {",
          "1147:      periodicAD-session-ID                 OCTET STRING (SIZE(4)),",
          "1148:      typeOfADProvide         OMA-LPPe-TypeOfADProvide,",
          "1149:      ...",
          "1150: }",
          "1152: OMA-LPPe-TypeOfADProvide ::= ENUMERATED {",
          "1153:      responseToInitialRequest,",
          "1154:      providePeriodicAD,",
          "1155:      responseToTargetUpdateRequest,",
          "1156:      serverUpdate,",
          "1157:      ...",
          "1158: }",
          "1160: OMA-LPPe-SegmentedADTransfer ::= SEQUENCE {",
          "1161:      segmentedAD-session-ID                OMA-LPPe-Session-ID,",
          "1162:      segment-number          INTEGER (1..4096),",
          "1163:      ...",
          "1164: }",
          "1166: OMA-LPPe-ver1-1-LocalCellInformation ::= SEQUENCE {",
          "1167:      ver1-1-timingInformation                   SEQUENCE (SIZE (1..maxCellSets)) OF GNSS-ReferenceTime",
          "1168:      OPTIONAL,",
          "1169:      ver1-1-other-CellInformation               SEQUENCE (SIZE (1..maxCells)) OF OMA-LPPe-ver1-1-CellInformation",
          "1170:      OPTIONAL,",
          "1171:      ...",
          "1172: }",
          "1174: maxCellSets INTEGER ::= 8",
          "1176: maxCells INTEGER ::= 128",
          "1178: OMA-LPPe-ver1-1-CellInformation ::= SEQUENCE {",
          "1179:      cellID                       OMA-LPPe-ver1-1-CellGlobalID,",
          "1180:      coverage                     CHOICE {",
          "1181:                                   circle        Ellipsoid-PointWithUncertaintyCircle,",
          "1182:                                   ellipse       EllipsoidPointWithUncertaintyEllipse,",
          "1183:                                   arc           EllipsoidArc,",
          "1184:                                   polygon       Polygon,",
          "1185:                                   ...",
          "1186:                                   }                            OPTIONAL,",
          "1187:      coordinates                  EllipsoidPointWithAltitudeAndUncertaintyEllipsoid             OPTIONAL,",
          "1188:      frequencyAccuracy            INTEGER (1..6)               OPTIONAL,",
          "1189:      ...",
          "1190: }",
          "1192: OMA-LPPe-ver1-1-BroadcastAssistanceData ::= SEQUENCE {",
          "1193:      broadcastSystem                OMA-LPPe-ver1-1-BroadcastSystemID,",
          "1194:      accessNetworks                 SEQUENCE (SIZE (1..16)) OF OMA-LPPe-ver1-1-AccessNetworkID,",
          "1195:      coverageArea                   CHOICE {",
          "1196:                                               circle          Ellipsoid-PointWithUncertaintyCircle,",
          "1197:                                               ellipse         EllipsoidPointWithUncertaintyEllipse,",
          "1198:                                               polygon         Polygon,",
          "1199:                                               ...",
          "1200:                                               }          OPTIONAL,",
          "1201:      broadcastADTypes               OMA-LPPe-ver1-1-BroadcastADTypes                   OPTIONAL,",
          "1202:      broadcastMode                       CHOICE {",
          "1203:                                                    unencapsulated            NULL,",
          "1204:                                                    encapsulated              OMA-LPPe-ver1-1-EncapsulatedMode,",
          "1205:                                                    ...",
          "1206:                                                    },",
          "1207:      ...",
          "1208: }",
          "1210: OMA-LPPe-ver1-1-EncapsulatedMode ::= SEQUENCE {",
          "1211:      serverID                            OMA-LPPe-ver1-1-ServerID,",
          "1212:      cipherSets                          SEQUENCE (SIZE (1..16)) OF OMA-LPPe-ver1-1-CipherSet                    OPTIONAL,",
          "1213:      authentication                      SEQUENCE (SIZE (1..4)) OF OMA-LPPe-ver1-1-AuthenticationSet OPTIONAL,",
          "1214:      ...",
          "1215: }",
          "1218: OMA-LPPe-CommonIEsRequestLocationInformation ::= SEQUENCE  {",
          "1219:      iP-Address-Request                          OMA-LPPe-IP-Address-Request                                    OPTIONAL,",
          "1220:      locationInformationContainerRequest OMA-LPPe-LocationInformationContainerRequest                           OPTIONAL,",
          "1221:      requestPeriodicLocInfoWithUpdate            OMA-LPPe-RequestPeriodicLocInfoWithUpdate                      OPTIONAL,",
          "1222:                                                                          --Cond RequestPeriodicLocInfoWithUpdate",
          "1223:      relativeLocationChange-Request              OMA-LPPe-RelativeLocationChange-Request                        OPTIONAL,",
          "1224:      localPositionRequest                        OMA-LPPe-LocalPositionRequest                                  OPTIONAL,",
          "1225:      scheduledLocation-Request                   OMA-LPPe-ScheduledLocation-Request                             OPTIONAL,",
          "1226:      accessTypeRequest                           OMA-LPPe-AccessTypeRequest                                     OPTIONAL,",
          "1227:      segmentedLIpreference                       ENUMERATED {useBasic, useResume, ...}                          OPTIONAL,",
          "1228:      segmentedLIResume                           OMA-LPPe-SegmentedLIResume                                     OPTIONAL,",
          "1229:                                                                          --Cond segmentedTransferResume",
          "1230:      ...",
          "1231: }",
          "1233: OMA-LPPe-IP-Address-Request ::= SEQUENCE {",
          "1234:      ...",
          "1235: }",
          "1237: OMA-LPPe-RequestPeriodicLocInfoWithUpdate ::= SEQUENCE {",
          "1238:      session-ID                        OCTET STRING (SIZE(4)),",
          "1239:      typeOfLocInfoRequest              OMA-LPPe-TypeOfLocInfoRequest,",
          "1240:      ...",
          "1241: }",
          "1243: OMA-LPPe-TypeOfLocInfoRequest ::= ENUMERATED {",
          "1244:      initialRequest,",
          "1245:      updateAndContinueIfUpdateFails,",
          "1246:      updateAndAbortIfUpdateFails,",
          "1247:      ...",
          "1248: }",
          "1250: OMA-LPPe-RelativeLocationChange-Request ::= SEQUENCE {",
          "1251:      numberOfChanges         INTEGER (1..5)                OPTIONAL,",
          "1252:      ...",
          "1253: }",
          "1255: OMA-LPPe-LocalPositionRequest ::= SEQUENCE {",
          "1256:      typeOfRequest                          ENUMERATED { localOptional, localMandatory, localOnly, ... },",
          "1257:      referencePointReq                      SEQUENCE (SIZE (1..8)) OF",
          "1258:                                                       OMA-LPPe-ReferencePointUniqueID                  OPTIONAL,",
          "1259:      ...",
          "1260: }",
          "1262: OMA-LPPe-ScheduledLocation-Request ::= SEQUENCE {",
          "1263:      gnssTime                GNSS-SystemTime               OPTIONAL,          --Cond AtLeastOne",
          "1264:      networkTime             NetworkTime                   OPTIONAL,          --Cond AtLeastOne",
          "1265:      relativeTime            INTEGER (1..1024)             OPTIONAL,          --Cond AtLeastOne",
          "1266:      windowSize              INTEGER (1..1024)             OPTIONAL,",
          "1267:      ...",
          "1268: }",
          "1270: OMA-LPPe-AccessTypeRequest ::= SEQUENCE {",
          "1271:      ...",
          "1272: }",
          "1274: OMA-LPPe-SegmentedLIResume ::= SEQUENCE {",
          "1275:      segmentedLI-session-ID            INTEGER (1..256),",
          "1276:      next-segment-number               INTEGER (1..4096)}",
          "1279: OMA-LPPe-CommonIEsProvideLocationInformation ::= SEQUENCE {",
          "1280:      highAccuracy3Dposition                       OMA-LPPe-HighAccuracy3Dposition                        OPTIONAL,",
          "1281:                                                                                 --Cond HighAccuracy",
          "1282:      localPosition                                OMA-LPPe-LocalPosition                                 OPTIONAL,",
          "1283:      highAccuracy3Dvelocity                       OMA-LPPe-HighAccuracy3Dvelocity                        OPTIONAL,",
          "1284:                                                                                 --Cond HighAccuracy",
          "1285:      iP-Address-List                              OMA-LPPe-IP-Address-List                               OPTIONAL,",
          "1286:      locationInformationContainer                 OMA-LPPe-LocationInformationContainer                  OPTIONAL,",
          "1287:      providePeriodicLocInfoWithUpdate             OMA-LPPe-ProvidePeriodicLocInfowithUpdate              OPTIONAL,",
          "1288:                                                                                  --Cond ProvidePeriodicLocInfoWithUpdate",
          "1289:      relativeLocationChangeList                   OMA-LPPe-RelativeLocationChangeList                    OPTIONAL,",
          "1290:      scheduledLocation                            OMA-LPPe-ScheduledLocation                             OPTIONAL,",
          "1291:                                                                                 --Cond ScheduledLocationRequested",
          "1292:      accessTypes                                  OMA-LPPe-AccessTypes                                   OPTIONAL,",
          "1293:      segmentedLITransfer                          OMA-LPPe-SegmentedLITransfer                           OPTIONAL,",
          "1294:                                                                                 --Cond segmentedTransferWithResume",
          "1295:      locationInformationTimeStamp                 OMA-LPPe-TimeStamp                                     OPTIONAL,",
          "1296:      ...,",
          "1297:      locationSource                               OMA-LPPe-LocationSource                                OPTIONAL",
          "1298:                                                                                 --Cond LocationSource",
          "1299: }",
          "1301: OMA-LPPe-LocalPosition ::= SEQUENCE {",
          "1302:      referencePoint                     OMA-LPPe-ReferencePointUniqueID,",
          "1303:      subjectLocation                    OMA-LPPe-RelativeLocation                                   OPTIONAL,",
          "1304:      ...",
          "1305: }",
          "1307: OMA-LPPe-IP-Address-List ::= SEQUENCE (SIZE (1..maxIPAddress)) OF OMA-LPPe-IP-Address",
          "1309: maxIPAddress INTEGER ::= 5",
          "1311: OMA-LPPe-IP-Address ::= SEQUENCE {",
          "1312:      local-IP-Address         CHOICE  {",
          "1313:           iPv4      BIT STRING (SIZE(32)),",
          "1314:           iPv6      BIT STRING (SIZE(128)),",
          "1315:           ...",
          "1316:           },",
          "1317:      bearer         OMA-LPPe-Bearer,",
          "1318:      nat            BOOLEAN                  OPTIONAL,",
          "1319:      ...",
          "1320: }",
          "1322: OMA-LPPe-Bearer ::= ENUMERATED {",
          "1323:      unknown,",
          "1324:      gsm,",
          "1325:      utran,",
          "1326:      lte,",
          "1327:      wlan,",
          "1328:      wimax,",
          "1329:      dsl,",
          "1330:      pktcable,",
          "1331:      other,",
          "1332:      ...",
          "1333: }",
          "1335: OMA-LPPe-ProvidePeriodicLocInfowithUpdate ::= SEQUENCE {",
          "1336:      session-ID                       OCTET STRING (SIZE(4)),",
          "1337:      typeOfLocInfoProvide             OMA-LPPe-TypeOfLocInfoProvide,",
          "1338:      ...",
          "1339: }",
          "1341: OMA-LPPe-TypeOfLocInfoProvide ::= ENUMERATED {",
          "1342:      responseToInitialRequest,",
          "1343:      providePeriodicLocInfo,",
          "1344:      responseToServerUpdateRequest,",
          "1345:      targetUpdate,",
          "1346:      ...",
          "1347: }",
          "1349: OMA-LPPe-RelativeLocationChangeList ::= SEQUENCE (SIZE (1..maxRelativeLocation)) OF",
          "1350:                                                                                        OMA-LPPe-RelativeLocationChange",
          "1352: OMA-LPPe-RelativeLocationChange ::= SEQUENCE {",
          "1353:      relativeTime                     INTEGER (0..65535)           OPTIONAL,",
          "1354:      transactionID                    INTEGER (0..255)             OPTIONAL,",
          "1355:      relativeLocation                 OMA-LPPe-RelativeLocation,",
          "1356:      ...",
          "1357: }",
          "1359: maxRelativeLocation          INTEGER ::= 5",
          "1361: OMA-LPPe-ScheduledLocation ::= SEQUENCE {",
          "1362:      disposition        ENUMERATED {withinWindow,",
          "1363:                                       outsideWindowOrNoWindow,",
          "1364:                                       notSupportedDueToNoCapability,",
          "1365:                                       notSupportedDueToNoTimeReference,",
          "1366:                                       notSupportedDueToConflictWithAnotherRequest,",
          "1367:                                       notSupportedForOtherReasons,",
          "1368:                                       ... },",
          "1369:      actualWindow       SEQUENCE {",
          "1370:           start         INTEGER (-512..511),",
          "1371:           duration      INTEGER (0..2047)",
          "1372:      }                                               OPTIONAL,",
          "1373:      ...",
          "1374: }",
          "1376: OMA-LPPe-AccessTypes ::= SEQUENCE {",
          "1377:      accessTypeUnknown                NULL                                   OPTIONAL,",
          "1378:      fixedAccessTypes                 OMA-LPPe-FixedAccessTypes              OPTIONAL,",
          "1379:      wirelessAccessTypes              OMA-LPPe-WirelessAccessTypes           OPTIONAL,",
          "1380:      ...",
          "1381: }",
          "1383: OMA-LPPe-SegmentedLITransfer ::= SEQUENCE {",
          "1384:      segmentedLI-session-ID                INTEGER (1..256),",
          "1385:      segment-number          INTEGER (1..4096),",
          "1386:      ...",
          "1387: }",
          "1389: OMA-LPPe-TimeStamp ::= CHOICE {",
          "1390:      gnssTime                GNSS-SystemTime,",
          "1391:      networkTime             NetworkTime,",
          "1392:      relativeTime            INTEGER (0..1024),",
          "1393:      ...",
          "1394: }",
          "1396: OMA-LPPe-LocationSource ::= SEQUENCE {",
          "1397:      agnss                   NULL     OPTIONAL,",
          "1398:      otdoa                   NULL     OPTIONAL,",
          "1399:      eotd                    NULL     OPTIONAL,",
          "1400:      otdoaUTRA               NULL     OPTIONAL,",
          "1401:      ecidLTE                     NULL       OPTIONAL,",
          "1402:      ecidGSM                     NULL       OPTIONAL,",
          "1403:      ecidUTRA                    NULL       OPTIONAL,",
          "1404:      wlanAP                      NULL       OPTIONAL,",
          "1405:      srn                         NULL       OPTIONAL,",
          "1406:      sensors                     NULL       OPTIONAL,",
          "1407:      ...",
          "1408: }",
          "1411: OMA-LPPe-CommonIEsAbort ::= SEQUENCE {",
          "1412:       abortCause ENUMERATED            {periodicADsessionStop,",
          "1413:                                   periodicADprocedureNotSupported,",
          "1414:                                   periodicADprocedureNotAccepted,",
          "1415:                                   periodicLocInfoSessionStop,",
          "1416:                                   periodicLocInfoProcedureNotSupported,",
          "1417:                                   periodicLocInfoProcedureNotAccepted,",
          "1418:                                   ...",
          "1419:                               }                                                 OPTIONAL,",
          "1420:      periodicSessionIDtoAbort           OCTET STRING (SIZE(4))                  OPTIONAL,   --Cond periodicWithUpdate",
          "1421:      ...",
          "1422: }",
          "1425: OMA-LPPe-CommonIEsError ::= SEQUENCE {",
          "1426:      ...",
          "1427: }",
          "1430: OMA-LPPe-AGNSS-ProvideAssistanceData ::= SEQUENCE {",
          "1431:      commonAssistData              OMA-LPPe-AGNSS-CommonAssistData                   OPTIONAL,",
          "1432:      genericAssistData             OMA-LPPe-AGNSS-GenericAssistData                  OPTIONAL,",
          "1433:      error                         OMA-LPPe-AGNSS-Error                              OPTIONAL,",
          "1434:      ...",
          "1435: }",
          "1438: OMA-LPPe-AGNSS-CommonAssistData::= SEQUENCE {",
          "1439:      ionosphericModel                   OMA-LPPe-AGNSS-IonosphericModel                   OPTIONAL,",
          "1440:      troposphereModel                   OMA-LPPe-AGNSS-TroposphereModel                   OPTIONAL,",
          "1441:      altitudeAssistance                 OMA-LPPe-AGNSS-AltitudeAssistanceList   OPTIONAL,",
          "1442:      solarRadiation                     OMA-LPPe-AGNSS-SolarRadiation                     OPTIONAL,",
          "1443:      ccpAssistCommonProvide             OMA-LPPe-AGNSS-CCPassistCommonProvide             OPTIONAL,",
          "1444:      ...",
          "1445: }",
          "1448: OMA-LPPe-AGNSS-GenericAssistData ::= SEQUENCE (SIZE (1..16)) OF OMA-LPPe-AGNSS-GenericAssistDataElement",
          "1450: OMA-LPPe-AGNSS-GenericAssistDataElement ::= SEQUENCE {",
          "1451:      gnss-ID                                  GNSS-ID,",
          "1452:      wideAreaIonoSurfacePerSVlist             OMA-LPPe-AGNSS-WideAreaIonoSurfacePerSVlist OPTIONAL,",
          "1453:      mechanicsForAllSVs                       OMA-LPPe-AGNSS-MechanicsForAllSVs                       OPTIONAL,",
          "1454:      dcbsForAllSVs                            OMA-LPPe-AGNSS-DCBsForAllSVs                            OPTIONAL,",
          "1455:      navModelDegradationModel                 OMA-LPPe-AGNSS-NavModelDegradationModelList OPTIONAL,",
          "1456:      ccpAssistProvide                         OMA-LPPe-AGNSS-CCPassistGenericProvide                  OPTIONAL, --Cond CCP",
          "1457:      navModelList                             OMA-LPPe-AGNSS-NavModelList                        OPTIONAL,",
          "1458:      ...",
          "1459: }",
          "1462: OMA-LPPe-AGNSS-IonosphericModel ::= CHOICE {",
          "1463:      staticModels         SEQUENCE {",
          "1464:                                localKlobucharModelList OMA-LPPe-AGNSS-LocalKlobucharModelList                         OPTIONAL,",
          "1465:                                ionoStormIndication           OMA-LPPe-AGNSS-IonoStormIndication                       OPTIONAL,",
          "1466:                                ...",
          "1467:                                },",
          "1468:      waIono               CHOICE {",
          "1469:                                controlParameters        OMA-LPPe-AGNSS-WideAreaIonoSurfaceControlParametersProvide,",
          "1470:                                commonProvide            OMA-LPPe-AGNSS-WideAreaIonoSurfaceCommon,",
          "1471:                                ...",
          "1472:                                },",
          "1473:      ...",
          "1474: }",
          "1477: OMA-LPPe-AGNSS-LocalKlobucharModelList ::= SEQUENCE (SIZE(1..16)) OF",
          "1478:                                                                 OMA-LPPe-AGNSS-LocalKlobucharModelElement",
          "1480: OMA-LPPe-AGNSS-LocalKlobucharModelElement ::= SEQUENCE {",
          "1481:      validityArea          OMA-LPPe-ValidityArea,",
          "1482:      klobucharModel  SEQUENCE (SIZE(1..8)) OF OMA-LPPe-AGNSS-LocalKlobucharModel,",
          "1483:      ...",
          "1484: }",
          "1486: OMA-LPPe-AGNSS-LocalKlobucharModel ::= SEQUENCE {",
          "1487:      validityPeriod  OMA-LPPe-ValidityPeriod,",
          "1488:      alfa0                 INTEGER (-128..127),",
          "1489:      alfa1                 INTEGER (-128..127),",
          "1490:      alfa2                 INTEGER (-128..127),",
          "1491:      alfa3                 INTEGER (-128..127),",
          "1492:      beta0                 INTEGER (-128..127),",
          "1493:      beta1                 INTEGER (-128..127),",
          "1494:      beta2                 INTEGER (-128..127),",
          "1495:      beta3                 INTEGER (-128..127),",
          "1496:      ...",
          "1497: }",
          "1501: OMA-LPPe-AGNSS-IonoStormIndication ::= SEQUENCE {",
          "1502:      area             OMA-LPPe-ValidityArea,",
          "1503:                                            --rleList shall not be included and is replaced by the stormList below",
          "1504:      stormList        OMA-LPPe-AGNSS-StormList,",
          "1505:      ...",
          "1506: }",
          "1508: OMA-LPPe-AGNSS-StormList ::= SEQUENCE (SIZE(1..16)) OF OMA-LPPe-AGNSS-StormElement",
          "1510: OMA-LPPe-AGNSS-StormElement ::= SEQUENCE {",
          "1511:      validityPeriod                             OMA-LPPe-ValidityPeriod,",
          "1512:      rleListIono                                OMA-LPPe-AGNSS-RleListIono,",
          "1513:      ...",
          "1514: }",
          "1516: OMA-LPPe-AGNSS-RleListIono ::= SEQUENCE (SIZE(1..65535)) OF OMA-LPPe-AGNSS-RleIonoElement",
          "1518: OMA-LPPe-AGNSS-RleIonoElement ::= SEQUENCE {",
          "1519:      regionCount           INTEGER (0..255),",
          "1520:      ionoIndex             CHOICE {",
          "1521:                                       noaaScales           OMA-LPPe-AGNSS-NoaaScales,",
          "1522:                                       ...",
          "1523:                                       },",
          "1524:      ...",
          "1525: }",
          "1527: OMA-LPPe-AGNSS-NoaaScales ::=   ENUMERATED{ g1,g2, g3, g4, g5, unknown, none, ... }",
          "1530: OMA-LPPe-AGNSS-WideAreaIonoSurfaceControlParametersProvide ::= SEQUENCE {",
          "1531:       duration                         OMA-LPPe-Duration                OPTIONAL,       --Cond FirstOrDurModify",
          "1532:       rate                             INTEGER(1..64)                   OPTIONAL,       --Cond FirstOrRateModify",
          "1533:       referencePosition                Ellipsoid-Point                  OPTIONAL,       --Cond FirstOrPosModify",
          "1534:       validityArea                     OMA-LPPe-ValidityArea            OPTIONAL,       --Cond FirstOrAreaModify",
          "1535:       ...",
          "1536: }",
          "1539: OMA-LPPe-AGNSS-WideAreaIonoSurfaceCommon ::= SEQUENCE {",
          "1540:       validityPeriod                                OMA-LPPe-ValidityPeriod,",
          "1541:       ...",
          "1542:  }",
          "1545: OMA-LPPe-AGNSS-WideAreaIonoSurfacePerSVlist ::=",
          "1546:                                         SEQUENCE (SIZE (1..64)) OF OMA-LPPe-AGNSS-WideAreaIonoSurfacePerSVelement",
          "1548: OMA-LPPe-AGNSS-WideAreaIonoSurfacePerSVelement ::= SEQUENCE {",
          "1549:       svID       SV-ID,",
          "1550:       a0         INTEGER (0..8191),",
          "1551:       e1         INTEGER (-4096..4095),",
          "1552:       n1         INTEGER (-4096..4095),",
          "1553:       e2         INTEGER (-4096..4095) OPTIONAL, --Cond SecondOrder",
          "1554:       n2         INTEGER (-4096..4095) OPTIONAL, --Cond SecondOrder",
          "1555:       en         INTEGER (-4096..4095) OPTIONAL, --Cond SecondOrder",
          "1556:       ...",
          "1557: }",
          "1560: OMA-LPPe-AGNSS-TroposphereModel ::= SEQUENCE {",
          "1561:      troposphereDelayList                      OMA-LPPe-AGNSS-LocalTroposphereDelayList                       OPTIONAL,",
          "1562:      surfaceParametersList                     OMA-LPPe-AGNSS-LocalSurfaceParametersList                      OPTIONAL,",
          "1563:      ...",
          "1564: }",
          "1567: OMA-LPPe-AGNSS-LocalTroposphereDelayList ::= SEQUENCE (SIZE(1..8)) OF",
          "1568:                                                                          OMA-LPPe-AGNSS-LocalTroposphereDelayAreaElement",
          "1570: OMA-LPPe-AGNSS-LocalTroposphereDelayAreaElement ::= SEQUENCE {",
          "1571:      validityArea                         OMA-LPPe-ValidityArea,",
          "1572:      refAltitude                          INTEGER (-1000..8192)          OPTIONAL,",
          "1573:      gradientReferencePosition            Ellipsoid-Point                OPTIONAL,",
          "1574:      delayList                            SEQUENCE (SIZE(1..8)) OF",
          "1575:                                                     OMA-LPPe-AGNSS-LocalTroposphereDelayTimeElement,",
          "1576:      ...",
          "1577: }",
          "1580: OMA-LPPe-AGNSS-LocalTroposphereDelayTimeElement ::= SEQUENCE {",
          "1581:      validityPeriod                       OMA-LPPe-ValidityPeriod,",
          "1582:      zh0                                  INTEGER (0..4095),",
          "1583:      eh                                   INTEGER (0..4095)              OPTIONAL,",
          "1584:      zw0                                  INTEGER (0..4095)              OPTIONAL,",
          "1585:      ew                                   INTEGER (0..4095)              OPTIONAL,",
          "1586:      gN                                   INTEGER (-8192..8191)          OPTIONAL,",
          "1587:      gE                                   INTEGER (-8192..8191)          OPTIONAL,",
          "1588:      mappingFunctionParameters            OMA-LPPe-AGNSS-MappingFunctionParameters,",
          "1589:      ...",
          "1590: }",
          "1593: OMA-LPPe-AGNSS-LocalSurfaceParametersList ::= SEQUENCE (SIZE(1..8)) OF",
          "1594:                                                                            OMA-LPPe-AGNSS-LocalSurfaceParametersAreaElement",
          "1596: OMA-LPPe-AGNSS-LocalSurfaceParametersAreaElement ::= SEQUENCE {",
          "1597:      validityArea                          OMA-LPPe-ValidityArea,",
          "1598:      refAltitude                           INTEGER (-1000..8192)           OPTIONAL,",
          "1599:      gradientReferencePosition             Ellipsoid-Point                 OPTIONAL,",
          "1600:      parameterList                         SEQUENCE (SIZE(1..8)) OF",
          "1601:                                                      OMA-LPPe-AGNSS-LocalSurfaceParametersTimeElement,",
          "1602:      ...",
          "1603: }",
          "1605: OMA-LPPe-AGNSS-LocalSurfaceParametersTimeElement ::= SEQUENCE {",
          "1606:      validityPeriod                        OMA-LPPe-ValidityPeriod,",
          "1607:      pressure                              INTEGER (-1024..1023),",
          "1608:      pressureRate                          INTEGER (-128..127),",
          "1609:      gN-pressure                           INTEGER (-128..127)             OPTIONAL,",
          "1610:      gE-pressure                           INTEGER (-128..127)             OPTIONAL,",
          "1611:      temperature                           INTEGER (-64..63)               OPTIONAL,",
          "1612:      temperatureRate                       INTEGER (-16..16)               OPTIONAL,",
          "1613:      gN-temperature                        INTEGER (-8..7)                 OPTIONAL,",
          "1614:      gE-temperature                        INTEGER (-8..7)                 OPTIONAL,",
          "1615:      mappingFunctionParameters             OMA-LPPe-AGNSS-MappingFunctionParameters,",
          "1616:      ...",
          "1617: }",
          "1620: OMA-LPPe-AGNSS-MappingFunctionParameters ::= SEQUENCE {",
          "1621:       ah                                     INTEGER (0..16383),",
          "1622:       bh                                     INTEGER (0..16383)               OPTIONAL,",
          "1623:       ch                                     INTEGER (0..16383)               OPTIONAL,",
          "1624:       aw                                    INTEGER (0..16383)               OPTIONAL,",
          "1625:       bw                                    INTEGER (0..16383)               OPTIONAL,",
          "1626:       cw                                    INTEGER (0..16383)               OPTIONAL,",
          "1627:       ...",
          "1628: }",
          "1631: OMA-LPPe-AGNSS-AltitudeAssistanceList ::= SEQUENCE (SIZE(1..8)) OF",
          "1632:                                                                              OMA-LPPe-AGNSS-AltitudeAssistanceAreaElement",
          "1634: OMA-LPPe-AGNSS-AltitudeAssistanceAreaElement ::= SEQUENCE {",
          "1635:       validityArea                          OMA-LPPe-ValidityArea,",
          "1636:       gradientReferencePosition             EllipsoidPointWithAltitudeAndUncertaintyEllipsoid                      OPTIONAL,",
          "1637:       refAltitude                           INTEGER (-1000..8192)                                                  OPTIONAL,",
          "1638:       pressureAssistanceList                SEQUENCE (SIZE(1..16)) OF OMA-LPPe-AGNSS-PressureAssistanceElement,",
          "1639:       ...",
          "1640: }",
          "1642: OMA-LPPe-AGNSS-PressureAssistanceElement ::= SEQUENCE{",
          "1643:       validityPeriod                        OMA-LPPe-ValidityPeriod,",
          "1644:       pressure                              INTEGER (-1024..1023),",
          "1645:       pressureRate                          INTEGER (-128..127)              OPTIONAL,",
          "1646:       gN                                    INTEGER (-128..127)              OPTIONAL,",
          "1647:       gE                                    INTEGER (-128..127)              OPTIONAL,",
          "1648:       ...",
          "1649: }",
          "1652: OMA-LPPe-AGNSS-SolarRadiation ::= SEQUENCE {",
          "1653:       solarRadiation                        INTEGER(1000..2000),",
          "1654:       ...",
          "1655: }",
          "1658: OMA-LPPe-AGNSS-MechanicsForAllSVs::= SEQUENCE (SIZE(1..64)) OF OMA-LPPe-AGNSS-MechanicsElement",
          "1661: OMA-LPPe-AGNSS-MechanicsElement ::= SEQUENCE {",
          "1662:       svid                                  SV-ID,",
          "1663:      mass                                 INTEGER(1..4095)                      OPTIONAL,",
          "1664:      effectiveReflectivityArea            INTEGER(1..511)                       OPTIONAL,",
          "1665:      pco                                  OMA-LPPe-AGNSS-PCOelement             OPTIONAL,",
          "1666:      svInfo                               SEQUENCE {",
          "1667:                                                 svType          OMA-LPPe-AGNSS-SVtype,",
          "1668:                                                 svNumber        INTEGER(0..1000),",
          "1669:                                                 ...",
          "1670:                                                 } OPTIONAL,",
          "1671:      ...",
          "1672: }",
          "1674: OMA-LPPe-AGNSS-PCOelement ::= SEQUENCE{",
          "1675:      xOffsetSBF                           INTEGER(-30000..30000),",
          "1676:      yOffsetSBF                           INTEGER(-30000..30000),",
          "1677:      zOffsetSBF                           INTEGER(-30000..30000),",
          "1678:      ...",
          "1679: }",
          "1681: OMA-LPPe-AGNSS-SVtype ::= ENUMERATED {",
          "1682:                                                 gpsIIR, gpsIIRM, gpsIIF, gpsIII,",
          "1683:                                                 glonassM, glonassK1, glonassK2, glonassKM,",
          "1684:                                                 unknown,",
          "1685:                                                 ...}",
          "1689: OMA-LPPe-AGNSS-DCBsForAllSVs ::= SEQUENCE (SIZE(1..64)) OF OMA-LPPe-AGNSS-DCBlistElement",
          "1692: OMA-LPPe-AGNSS-DCBlistElement ::= SEQUENCE {",
          "1693:      svid                 SV-ID,",
          "1694:      reference            SEQUENCE{",
          "1695:                                signal  GNSS-SignalID,",
          "1696:                                pd         ENUMERATED { pilot, data, notapplicable, ... },",
          "1697:                                ...",
          "1698:                                },",
          "1699:      dcbList              OMA-LPPe-AGNSS-DCBlist,",
          "1700:      ...",
          "1701:  }",
          "1703: OMA-LPPe-AGNSS-DCBlist ::= SEQUENCE (SIZE(1..16)) OF OMA-LPPe-AGNSS-DCBelement",
          "1705: OMA-LPPe-AGNSS-DCBelement ::= SEQUENCE {",
          "1706:      signal                          GNSS-SignalID,",
          "1707:      pd                              ENUMERATED{ pilot, data, notapplicable, ... },",
          "1708:      dcb                             INTEGER (-4096..4095),",
          "1709:      ...",
          "1710:  }",
          "1713: OMA-LPPe-AGNSS-NavModelDegradationModelList ::= SEQUENCE (SIZE(1..64)) OF",
          "1714:                                                                          OMA-LPPe-AGNSS-NavModelDegradationModelElement",
          "1716: OMA-LPPe-AGNSS-NavModelDegradationModelElement ::= SEQUENCE {",
          "1717:      svid                                      SV-ID,",
          "1718:      clockDegradationModel                     OMA-LPPe-AGNSS-ClockModelDegradationModel,",
          "1719:      orbitDegradationModel                     OMA-LPPe-AGNSS-OrbitModelDegradationModel,",
          "1720:      ...",
          "1721: }",
          "1723: OMA-LPPe-AGNSS-ClockModelDegradationModel ::= SEQUENCE {",
          "1724:       clockRMS0                                     INTEGER(0..31),",
          "1725:       clockRMS1                                     INTEGER(0..7)                            OPTIONAL,",
          "1726:       ...",
          "1727: }",
          "1729: OMA-LPPe-AGNSS-OrbitModelDegradationModel ::= SEQUENCE {",
          "1730:       orbitRMS0                                     INTEGER(0..31),",
          "1731:       orbitRMS1                                     INTEGER(0..7)                            OPTIONAL,",
          "1732:       ...",
          "1733: }",
          "1737: OMA-LPPe-AGNSS-CCPassistCommonProvide ::= CHOICE {",
          "1738:       ccpProvideCommonParameters                 OMA-LPPe-AGNSS-CCPprovideCommonParameters,",
          "1739:       ccpProvideControlParameters                OMA-LPPe-AGNSS-CCPprovideControlParameters,",
          "1740:       ...",
          "1741: }",
          "1743: OMA-LPPe-AGNSS-CCPprovideCommonParameters ::= SEQUENCE {",
          "1744:       ccpReferenceTime                           GNSS-SystemTime,",
          "1745:       ...",
          "1746: }",
          "1748: OMA-LPPe-AGNSS-CCPprovideControlParameters ::= SEQUENCE {",
          "1749:       ccpSupportArea                  OMA-LPPe-AGNSS-CCPsupportArea                          OPTIONAL,",
          "1750:       ccpNeighborList                 OMA-LPPe-AGNSS-CCPreferenceStationList  OPTIONAL,",
          "1751:       duration                        OMA-LPPe-Duration                                      OPTIONAL, --Cond FirstOrDurModify",
          "1752:       rate                            INTEGER(1..64)                                         OPTIONAL, --Cond FirstOrRateModify",
          "1753:       ccpReferenceStationList OMA-LPPe-AGNSS-CCPreferenceStationList  OPTIONAL, --Cond FirstOrRefModify",
          "1754:       ...",
          "1755: }",
          "1758: OMA-LPPe-AGNSS-CCPsupportArea ::= SEQUENCE {",
          "1759:       areaDescription            OMA-LPPe-ValidityArea,",
          "1760:       signalSupport              SEQUENCE (SIZE(1..8)) OF OMA-LPPe-AGNSS-CCPsignalSupport,",
          "1761:       ...",
          "1762: }",
          "1764: OMA-LPPe-AGNSS-CCPsignalSupport ::= SEQUENCE {",
          "1765:       gnss            GNSS-ID,",
          "1766:       signals         GNSS-SignalIDs,",
          "1767:       ...",
          "1768: }",
          "1771: OMA-LPPe-AGNSS-CCPreferenceStationList ::= SEQUENCE (SIZE(0..maxReferenceStations)) OF",
          "1772:                                                                                      OMA-LPPe-AGNSS-CCPreferenceStationElement",
          "1774: OMA-LPPe-AGNSS-CCPreferenceStationElement ::= SEQUENCE {",
          "1775:       referenceStationID                     OMA-LPPe-AGNSS-CCPreferenceStationID,",
          "1776:       referenceStationLocation               OMA-LPPe-HighAccuracy3Dposition,",
          "1777:       antennaDescription                     OMA-LPPe-AGNSS-AntennaDescription                        OPTIONAL, --Cond IfPhysical",
          "1778:       ...",
          "1779:  }",
          "1782: OMA-LPPe-AGNSS-CCPassistGenericProvide ::= SEQUENCE (SIZE(1..maxReferenceStations)) OF",
          "1783:                                                                          OMA-LPPe-AGNSS-CCPassistGenericProvideElement",
          "1785: OMA-LPPe-AGNSS-CCPassistGenericProvideElement::= SEQUENCE {",
          "1786:      referenceStationID  OMA-LPPe-AGNSS-CCPreferenceStationID,",
          "1787:      ccpPerSignalList          SEQUENCE (SIZE(1..8)) OF OMA-LPPe-AGNSS-CCPperSignalElement,",
          "1788:      ...",
          "1789: }",
          "1791: OMA-LPPe-AGNSS-CCPperSignalElement ::= SEQUENCE {",
          "1792:      signal-ID            GNSS-SignalID,",
          "1793:      ccpPerSVlist         SEQUENCE (SIZE(1..64)) OF OMA-LPPe-AGNSS-CCPperSVelement,",
          "1794:      ...",
          "1795: }",
          "1797: OMA-LPPe-AGNSS-CCPperSVelement::= SEQUENCE {",
          "1798:      svID                      SV-ID,",
          "1799:      integerCodePhase          INTEGER(0..255)                           OPTIONAL, --Cond IfAvailable",
          "1800:      codePhase                 INTEGER(0.. 14989622),",
          "1801:      codePhaseError            OMA-LPPe-AGNSS-CodePhaseError             OPTIONAL, --Cond IfAvailable",
          "1802:      phaseRangeDelta           INTEGER(-524288.. 524287),",
          "1803:      phaseRangeRMSerror  INTEGER(0..127)                                 OPTIONAL, --Cond IfAvailable",
          "1804:      lockIndicator             BOOLEAN,",
          "1805:      ...",
          "1806: }",
          "1808: OMA-LPPe-AGNSS-CodePhaseError ::= CHOICE {",
          "1809:      codePhaseRMSError   INTEGER(0..63),",
          "1810:      cnr                       INTEGER(0..255),",
          "1811:      ...",
          "1812: }",
          "1815: OMA-LPPe-AGNSS-NavModelList ::= SEQUENCE {",
          "1816:       coordinateBased            OMA-LPPe-AGNSS-NavModel-CoordinateBased OPTIONAL, --Cond ModelId-1",
          "1817:       ...",
          "1818: }",
          "1821: OMA-LPPe-AGNSS-NavModel-CoordinateBased ::= SEQUENCE {",
          "1822:       fixedInterval         SEQUENCE {",
          "1823:                                  beginTime        GNSS-SystemTime,",
          "1824:                                  interval         INTEGER(1..30),",
          "1825:                                  ...",
          "1826:                              } OPTIONAL, --Cond FixedInterval",
          "1827:      bases              SEQUENCE {",
          "1828:                              baseForPosVel       INTEGER(-100000000..100000000)              OPTIONAL,",
          "1829:                              baseForCcRate       OMA-LPPe-AGNSS-NavModel-BigNumber   OPTIONAL,",
          "1830:                              ...",
          "1831:                              }    OPTIONAL, --Cond DefaultsNotApplicable",
          "1832:      referencedTo       ENUMERATED { centerOfMass, antennaPhaseCenter, ... },",
          "1833:      pointList          SEQUENCE (SIZE (1..97)) OF OMA-LPPe-AGNSS-NavModel-CoordinateBasedElement,",
          "1834:      ...",
          "1835: }",
          "1837: OMA-LPPe-AGNSS-NavModel-CoordinateBasedElement::= SEQUENCE {",
          "1838:      time-of-record  GNSS-SystemTime             OPTIONAL, --Cond NoFixedInterval",
          "1839:      svIdList           SEQUENCE (SIZE (1..64)) OF OMA-LPPe-AGNSS-NavModel-PVTelement,",
          "1840:      ...",
          "1841: }",
          "1843: OMA-LPPe-AGNSS-NavModel-PVTelement ::= SEQUENCE {",
          "1844:      svID                    SV-ID,",
          "1845:      svClockOffset           OMA-LPPe-AGNSS-NavModel-BigNumber,",
          "1846:      ecefPositionX           OMA-LPPe-AGNSS-NavModel-BigNumber,",
          "1847:      ecefPositionY           OMA-LPPe-AGNSS-NavModel-BigNumber,",
          "1848:      ecefPositionZ           OMA-LPPe-AGNSS-NavModel-BigNumber,",
          "1849:      clockPosSTD             OMA-LPPe-AGNSS-NavModel-STDmatrix,",
          "1850:      rateRecord              SEQUENCE {",
          "1851:                                        svClockRate             OMA-LPPe-AGNSS-NavModel-BigNumber,",
          "1852:                                        ecefVelocityX           OMA-LPPe-AGNSS-NavModel-BigNumber,",
          "1853:                                        ecefVelocityY           OMA-LPPe-AGNSS-NavModel-BigNumber,",
          "1854:                                        ecefVelocityZ           OMA-LPPe-AGNSS-NavModel-BigNumber,",
          "1855:                                        clockRateVelSTD         OMA-LPPe-AGNSS-NavModel-STDmatrix,",
          "1856:                                        ...",
          "1857:                                        } OPTIONAL, --Cond RateAvailable",
          "1858:      ...",
          "1859: }",
          "1861: OMA-LPPe-AGNSS-NavModel-BigNumber::= SEQUENCE {",
          "1862:      msb       INTEGER(-1000000000..1000000000),",
          "1863:      lsb       INTEGER(1..100)                             OPTIONAL,",
          "1864:      ...",
          "1865: }",
          "1867: OMA-LPPe-AGNSS-NavModel-STDmatrix ::= SEQUENCE {",
          "1868:      e11       INTEGER(0..1000),",
          "1869:      e22       INTEGER(0..1000),",
          "1870:      e33       INTEGER(0..1000),",
          "1871:      e44       INTEGER(0..1000000),",
          "1872:      e12       INTEGER(0..10000000)         OPTIONAL, --Cond CrossTermAvailable",
          "1873:      e13       INTEGER(0..10000000)         OPTIONAL, --Cond CrossTermAvailable",
          "1874:      e14       INTEGER(0..10000000)         OPTIONAL, --Cond CrossTermAvailable",
          "1875:      e23       INTEGER(0..10000000)         OPTIONAL, --Cond CrossTermAvailable",
          "1876:      e24       INTEGER(0..10000000)         OPTIONAL, --Cond CrossTermAvailable",
          "1877:      e34       INTEGER(0..10000000)         OPTIONAL, --Cond CrossTermAvailable",
          "1878:      ...",
          "1879: }",
          "1882: OMA-LPPe-AGNSS-RequestAssistanceData ::= SEQUENCE {",
          "1883:       commonAssistDataReq                OMA-LPPe-AGNSS-CommonAssistanceDataReq                         OPTIONAL,",
          "1884:       genericAssistDataReq               OMA-LPPe-AGNSS-GenericAssistanceDataReq                        OPTIONAL,",
          "1885:       ...",
          "1886: }",
          "1889: OMA-LPPe-AGNSS-CommonAssistanceDataReq ::= SEQUENCE {",
          "1890:      ionosphericModelReq                       OMA-LPPe-AGNSS-IonosphericModelReq                        OPTIONAL,",
          "1891:      troposphereModelReq                       OMA-LPPe-AGNSS-TroposphereModelReq                        OPTIONAL,",
          "1892:      altitudeAssistanceReq                     OMA-LPPe-AGNSS-AltitudeAssistanceReq                      OPTIONAL,",
          "1893:      solarRadiationRequest                     OMA-LPPe-AGNSS-SolarRadiationReq                          OPTIONAL,",
          "1894:      ccpRequestControlParameters               OMA-LPPe-AGNSS-CCPrequestControlParameters  OPTIONAL,",
          "1895:      ...",
          "1896: }",
          "1899: OMA-LPPe-AGNSS-GenericAssistanceDataReq ::= SEQUENCE (SIZE (1..16)) OF",
          "1900:                                                                                OMA-LPPe-AGNSS-GenericAssistDataReqElement",
          "1902: OMA-LPPe-AGNSS-GenericAssistDataReqElement ::= SEQUENCE {",
          "1903:      gnss-ID                                   GNSS-ID,",
          "1904:      waIonoSurfaceReq                          OMA-LPPe-AGNSS-WaIonoSurfaceRequest OPTIONAL, --Cond WAiono",
          "1905:      mechanicsReq                              OMA-LPPe-AGNSS-MechanicsReq                                    OPTIONAL,",
          "1906:      dcbReq                                    OMA-LPPe-AGNSS-DCBreq                                          OPTIONAL,",
          "1907:      navModelDegradationModelReq               OMA-LPPe-AGNSS-NavModelDegradationModelReq                     OPTIONAL,",
          "1908:      ccpAssistGenericReq                       OMA-LPPe-AGNSS-CCPassistGenericReq  OPTIONAL, --Cond CCPreq",
          "1909:      navigationModelReq                        OMA-LPPe-AGNSS-NavigationModelReq                              OPTIONAL,",
          "1910:      ...",
          "1911: }",
          "1914: OMA-LPPe-AGNSS-IonosphericModelReq ::=  CHOICE {",
          "1915:      staticModels          SEQUENCE {",
          "1916:            ionoreq                    BIT STRING  {klobucharModel (0),",
          "1917:                                                      ionoStormWarning (1) } (SIZE  (1..8)),",
          "1918:            requestBeginTime           GNSS-SystemTime                 OPTIONAL,",
          "1919:            duration                   OMA-LPPe-Duration,",
          "1920:            ...",
          "1921:      },",
          "1922:      periodicModels  SEQUENCE {",
          "1923:            waIonoSurface              OMA-LPPe-AGNSS-WideAreaIonoSurfaceControlParametersRequest,",
          "1924:            ...",
          "1925:      },",
          "1926:      ...",
          "1927: }",
          "1930: OMA-LPPe-AGNSS-WideAreaIonoSurfaceControlParametersRequest ::=  SEQUENCE {",
          "1931:       duration                   OMA-LPPe-Duration   OPTIONAL,               --Cond FirstOrDurModify",
          "1932:       rate                       INTEGER(1..64)              OPTIONAL,       --Cond FirstOrRateModify",
          "1933:       ...",
          "1934: }",
          "1937: OMA-LPPe-AGNSS-TroposphereModelReq ::=  SEQUENCE {",
          "1938:       troposphereModelReq                         BIT STRING  {delay (0),",
          "1939:                                                                    surface (1) }              (SIZE (1..8)),",
          "1940:       supportForMultipleGridPoints                BOOLEAN,",
          "1941:       requestBeginTime                            GNSS-SystemTime                  OPTIONAL,",
          "1942:       duration                                    OMA-LPPe-Duration,",
          "1943:       ...",
          "1944:  }",
          "1947: OMA-LPPe-AGNSS-AltitudeAssistanceReq ::=                     SEQUENCE {",
          "1948:       requestBeginTime                            GNSS-SystemTime                  OPTIONAL,",
          "1949:       duration                                    OMA-LPPe-Duration                OPTIONAL,",
          "1950:       ...",
          "1951:  }",
          "1954: OMA-LPPe-AGNSS-SolarRadiationReq ::= SEQUENCE {",
          "1955:       ...",
          "1956:  }",
          "1959: OMA-LPPe-AGNSS-WaIonoSurfaceRequest ::= SEQUENCE {",
          "1960:      ...",
          "1961: }",
          "1964: OMA-LPPe-AGNSS-NavModelDegradationModelReq ::= SEQUENCE {",
          "1965:      ...",
          "1966: }",
          "1969: OMA-LPPe-AGNSS-DCBreq ::= SEQUENCE {",
          "1970:      reference            SEQUENCE{",
          "1971:                                signal  GNSS-SignalID,",
          "1972:                                pd        ENUMERATED { pilot, data, notapplicable, ... },",
          "1973:                                ...",
          "1974:                                }              OPTIONAL,",
          "1975:      ...",
          "1976: }",
          "1979: OMA-LPPe-AGNSS-MechanicsReq::= SEQUENCE {",
          "1980:      massRequest                                   BOOLEAN,",
          "1981:      effectiveReflectivityAreaRequest              BOOLEAN,",
          "1982:      pcoRequest                                    BOOLEAN,",
          "1983:      svInfoRequest                                 BOOLEAN,",
          "1984:      ...",
          "1985: }",
          "1988: OMA-LPPe-AGNSS-CCPrequestControlParameters ::= SEQUENCE {",
          "1989:      ccpSupportAreaRequest                NULL                      OPTIONAL,",
          "1990:      ccpNeighborListRequest               NULL                      OPTIONAL,",
          "1991:      ccpCommonRequest                     SEQUENCE {",
          "1992:                           duration                  OMA-LPPe-Duration         OPTIONAL,       --Cond FirstOrDurModify",
          "1993:                           rate                      INTEGER(1..64)            OPTIONAL,       --Cond FirstOrRateModify",
          "1994:                           refStation                CHOICE {",
          "1995:                                posBasedReferenceStationRequest                SEQUENCE {",
          "1996:                                      requestedReferenceStationLocation              OMA-LPPe-HighAccuracy3Dposition,",
          "1997:                                      qor                                            OMA-LPPe-AGNSS-QoR,",
          "1998:                                      ...",
          "1999:                                      },",
          "2000:                                idBasedReferenceStationRequest                 OMA-LPPe-AGNSS-ReferenceStationIDlist,",
          "2001:                                referenceStationKillList                       OMA-LPPe-AGNSS-ReferenceStationIDlist,",
          "2002:                                ...",
          "2003:                                } OPTIONAL, --Cond FirstOrRefModify",
          "2004:           ...",
          "2005:           },",
          "2006:      ...",
          "2007: }",
          "2010: OMA-LPPe-AGNSS-ReferenceStationIDlist ::= SEQUENCE (SIZE(1..maxReferenceStations)) OF",
          "2011:                                                                                          OMA-LPPe-AGNSS-CCPreferenceStationID",
          "2013: OMA-LPPe-AGNSS-QoR ::=  ENUMERATED {m10, km1,km10,km100, ...}",
          "2016: OMA-LPPe-AGNSS-CCPassistGenericReq ::= SEQUENCE {",
          "2017:       ccpAssist-SignalsReq                          GNSS-SignalIDs,",
          "2018:       ...",
          "2019: }",
          "2022: OMA-LPPe-AGNSS-NavigationModelReq ::= SEQUENCE {",
          "2023:       navModelID-PrefList              SEQUENCE (SIZE(1..8)) OF INTEGER(1..8) OPTIONAL,",
          "2024:       ...",
          "2025: }",
          "2028: OMA-LPPe-AGNSS-ProvideLocationInformation ::= SEQUENCE {",
          "2029:       highAccuracyReferenceTime              GNSS-SystemTime                                        OPTIONAL, --Cond HighAccuracy",
          "2030:       highAccuracyMeasurements               OMA-LPPe-AGNSS-HAgnssProvide                           OPTIONAL,",
          "2031:       ionosphereMeasurements                 OMA-LPPe-AGNSS-IonosphereMeasurements   OPTIONAL,",
          "2032:       localSurfaceMeasurements               OMA-LPPe-AGNSS-LocalSurfaceMeasurements OPTIONAL,",
          "2033:       error                                  OMA-LPPe-AGNSS-Error                                   OPTIONAL,",
          "2034:       ...",
          "2035: }",
          "2038: OMA-LPPe-AGNSS-HAgnssProvide ::= CHOICE {",
          "2039:      controlParameters       SEQUENCE {",
          "2040:           duration                     OMA-LPPe-Duration,",
          "2041:           rate                         INTEGER(1..64),",
          "2042:           antennaDescription           OMA-LPPe-AGNSS-AntennaDescription                OPTIONAL, --Cond HAantenna",
          "2043:           ...",
          "2044:      },",
          "2045:      measurements       SEQUENCE {",
          "2046:           position           EllipsoidPointWithAltitudeAndUncertaintyEllipsoid   OPTIONAL,",
          "2047:                                                                                                        --Cond NotForbidden",
          "2048:           referenceTime      GNSS-SystemTime,",
          "2049:           localPressure      SEQUENCE {",
          "2050:                                   pressure                      INTEGER(-1024..1023),",
          "2051:                                   pressureUncertainty          INTEGER(0..127),",
          "2052:                                   ...",
          "2053:                              } OPTIONAL, --Cond HApressure",
          "2054:           antennaOrientation           OMA-LPPe-Orientation         OPTIONAL, --Cond HAantOrientation",
          "2055:           signalMeasurements           SEQUENCE (SIZE(1..16)) OF OMA-LPPe-AGNSS-HAgnssMeasurementElement,",
          "2056:           ...",
          "2057:           },",
          "2058:      ...",
          "2059: }",
          "2061: OMA-LPPe-AGNSS-HAgnssMeasurementElement::= SEQUENCE {",
          "2062:      gnss-ID                      GNSS-ID,",
          "2063:      haGNSSperSignalList          SEQUENCE (SIZE(1..8)) OF OMA-LPPe-HAgnssPerSignalElement,",
          "2064:      ...",
          "2065: }",
          "2067: OMA-LPPe-HAgnssPerSignalElement ::= SEQUENCE {",
          "2068:      signal-ID                    GNSS-SignalID,",
          "2069:      haGNSSperSVlist              SEQUENCE (SIZE(1..64)) OF OMA-LPPe-HAgnssPerSVelement,",
          "2070:      ...",
          "2071: }",
          "2074: OMA-LPPe-HAgnssPerSVelement ::= SEQUENCE {",
          "2075:      svID                    SV-ID,",
          "2076:      integerCodePhase        INTEGER (0..255)         OPTIONAL, --Cond IfAvailable",
          "2077:      codePhase               INTEGER (0..14989622),",
          "2078:      codePhaseRMSError   INTEGER (0..63),",
          "2079:      multipathDetection  ENUMERATED  {low,",
          "2080:                                              moderate,",
          "2081:                                              high,",
          "2082:                                              notMeasured,",
          "2083:                                              ...},",
          "2084:      cnr                     INTEGER(0..255),",
          "2085:      adr                     INTEGER (0..536870911),",
          "2086:      adrRMSerror             INTEGER (0..127),",
          "2087:      lockIndicator           BOOLEAN,",
          "2088:       ...",
          "2089: }",
          "2092: OMA-LPPe-AGNSS-IonosphereMeasurements ::= SEQUENCE {",
          "2093:      gnssTime                        GNSS-SystemTime,",
          "2094:      position                        EllipsoidPointWithAltitudeAndUncertaintyEllipsoid,",
          "2095:      tecPerSV                        OMA-LPPe-AGNSS-TECPerSV                         OPTIONAL,             --Cond TecPerSV",
          "2096:      tecAtZenith                     OMA-LPPe-AGNSS-TECAtZenith                      OPTIONAL,             --Cond ZenithTec",
          "2097:      ...",
          "2098: }",
          "2100: OMA-LPPe-AGNSS-TECPerSV ::= SEQUENCE (SIZE(1..64)) OF OMA-LPPe-AGNSS-TECPerSVElement",
          "2102: OMA-LPPe-AGNSS-TECPerSVElement ::= SEQUENCE {",
          "2103:      azimuth               INTEGER(0..359),",
          "2104:      elevation             INTEGER(0..90),",
          "2105:      tecValue              INTEGER(0..511),",
          "2106:      tecUncertainty  INTEGER(0..63),",
          "2107:      ...",
          "2108: }",
          "2110: OMA-LPPe-AGNSS-TECAtZenith ::= SEQUENCE {",
          "2111:      tecValueAtZenith                      INTEGER(0..511),",
          "2112:      tecUncertaintyAtZenith                INTEGER(0..63),",
          "2113:      ...",
          "2114: }",
          "2117: OMA-LPPe-AGNSS-LocalSurfaceMeasurements ::= SEQUENCE {",
          "2118:       gnssTime                         GNSS-SystemTime,",
          "2119:       position                         EllipsoidPointWithAltitudeAndUncertaintyEllipsoid,",
          "2120:       pressure                         INTEGER(-1024..1023),",
          "2121:       pressureUncertainty              INTEGER(0..127),",
          "2122:       temperatureMeasurement  SEQUENCE {",
          "2123:                                              temperature                      INTEGER(-64..63)            OPTIONAL,",
          "2124:                                              temperatureUncertainty  INTEGER(0..7)                        OPTIONAL,",
          "2125:                                              ...",
          "2126:                                              } OPTIONAL, --Cond TemperatureAvailable",
          "2127:       ...",
          "2128: }",
          "2131: OMA-LPPe-AGNSS-RequestLocationInformation ::= SEQUENCE {",
          "2132:       positioningInstructions               OMA-LPPe-AGNSS-PositioningInstructions                       OPTIONAL,",
          "2133:       ionosphereMeasurementsReq             BIT STRING  {tecPerSV(0),",
          "2134:                                                               zenithTEC(1) }(SIZE(1..8))                 OPTIONAL,",
          "2135:       localSurfaceMeasurementReq  OMA-LPPe-AGNSS-LocalSurfaceMeasurementReq   OPTIONAL,",
          "2136:       ...",
          "2137: }",
          "2140: OMA-LPPe-AGNSS-PositioningInstructions ::= SEQUENCE {",
          "2141:       highAccuracyMethodRequested                   BOOLEAN,",
          "2142:       haGNSSreq                          OMA-LPPe-AGNSS-HAgnssRequestControlParameters                        OPTIONAL, --Cond HAgnssReq",
          "2143:       ...",
          "2144: }",
          "2147: OMA-LPPe-AGNSS-LocalSurfaceMeasurementReq ::= SEQUENCE {",
          "2148:      ...",
          "2149: }",
          "2152: OMA-LPPe-AGNSS-HAgnssRequestControlParameters ::= SEQUENCE {",
          "2153:      duration                              OMA-LPPe-Duration          OPTIONAL,   --Cond FirstOrModify",
          "2154:      rate                                  INTEGER(1..63)             OPTIONAL,       --Cond FirstOrModify",
          "2155:      antennaInformationReq                 ENUMERATED {antennaDescriptionOnly,",
          "2156:                                                            antennaDescriptionAndOrientation,",
          "2157:                                                            ...}       OPTIONAL,",
          "2158:      pressureInformationReq                BOOLEAN,                                   --Cond FirstOrModify",
          "2159:      signalReqList                         SEQUENCE (SIZE(1..16)) OF",
          "2160:                                                       OMA-LPPe-AGNSS-HAgnssSignalReqElement   OPTIONAL, --Cond First",
          "2161:      ...",
          "2162: }",
          "2164: OMA-LPPe-AGNSS-HAgnssSignalReqElement ::= SEQUENCE {",
          "2165:      gnssID           GNSS-ID,",
          "2166:      signals          GNSS-SignalIDs,",
          "2167:      ...",
          "2168: }",
          "2172: OMA-LPPe-AGNSS-ProvideCapabilities ::= SEQUENCE {",
          "2173:      assistanceDataSupportList                    OMA-LPPe-AGNSS-AssistanceDataSupportList                         OPTIONAL,",
          "2174:      environmentObservationSupportList            OMA-LPPe-AGNSS-EnvironmentObservationSupportList                 OPTIONAL,",
          "2175:      haGNSSsupport                                OMA-LPPe-AGNSS-HAgnssSupport                                     OPTIONAL,",
          "2176:      ...",
          "2177: }",
          "2179: OMA-LPPe-AGNSS-AssistanceDataSupportList ::= SEQUENCE {",
          "2180:      commonAssistanceDataSupport             OMA-LPPe-AGNSS-CommonAssistanceDataSupport,",
          "2181:      genericAssistanceDataSupport            OMA-LPPe-AGNSS-GenericAssistanceDataSupport,",
          "2182:      ...",
          "2183: }",
          "2186: OMA-LPPe-AGNSS-EnvironmentObservationSupportList ::= SEQUENCE{",
          "2187:      ionosphereMeasurementSupport                 BIT STRING {tecPerSVsupport(0),",
          "2188:                                                                 zenithTecSupport(1) } (SIZE (1..8)),",
          "2189:      pressureMeasurementSupported                 BOOLEAN,",
          "2190:      temperatureMeasurementSupported              BOOLEAN,",
          "2191:      ...",
          "2192: }",
          "2196: OMA-LPPe-AGNSS-CommonAssistanceDataSupport ::= SEQUENCE {",
          "2197:      ionosphericModelSupport            OMA-LPPe-AGNSS-IonosphericModelSupport  OPTIONAL, --Cond IonoSupport",
          "2198:      troposphereModelSupport            OMA-LPPe-AGNSS-TroposphereModelSupport  OPTIONAL, --Cond TropoSupport",
          "2199:      altitudeAssistanceSupport          OMA-LPPe-AGNSS-AltitudeAssistanceSupport",
          "2200:                                                                                 OPTIONAL, --Cond AltAssistSupport",
          "2201:      solarRadiationSupport              OMA-LPPe-AGNSS-SolarRadiationSupport",
          "2202:                                                                                 OPTIONAL, --Cond SolarRadiationSupport",
          "2203:      ccpSupport                         OMA-LPPe-AGNSS-CCPsupport               OPTIONAL, --CCPsupport",
          "2204:      ...",
          "2205: }",
          "2208: OMA-LPPe-AGNSS-IonosphericModelSupport ::=  SEQUENCE {",
          "2209:       ionoModel            BIT STRING {          localKlobuchar                   (0),",
          "2210:                                                  ionoStormWarning                 (1),",
          "2211:                                                  wideAreaIonoSurface              (2) } (SIZE (1..8)),",
          "2212:       ...",
          "2213: }",
          "2216: OMA-LPPe-AGNSS-TroposphereModelSupport ::=  SEQUENCE {",
          "2217:       tropoModel                                 BIT STRING { localTroposphereDelay (0),",
          "2218:                                                                    surfaceParameters     (1) } (SIZE (1..8)),",
          "2219:       supportForMultipleGridPoints               BOOLEAN,",
          "2220:       ...",
          "2221: }",
          "2224: OMA-LPPe-AGNSS-AltitudeAssistanceSupport ::= SEQUENCE {",
          "2225:      ...",
          "2226: }",
          "2229: OMA-LPPe-AGNSS-SolarRadiationSupport ::= SEQUENCE {",
          "2230:      ...",
          "2231: }",
          "2234: OMA-LPPe-AGNSS-CCPsupport ::= SEQUENCE {",
          "2235:      supportAreaAssistanceSupported                    BOOLEAN,",
          "2236:      multiReferenceStationSupported                    BOOLEAN,",
          "2237:      ...",
          "2238: }",
          "2241: OMA-LPPe-AGNSS-GenericAssistanceDataSupport ::=",
          "2242:                                 SEQUENCE (SIZE (1..16)) OF OMA-LPPe-AGNSS-GenericAssistDataSupportElement",
          "2244: OMA-LPPe-AGNSS-GenericAssistDataSupportElement ::= SEQUENCE {",
          "2245:      gnss-ID                                                    GNSS-ID,",
          "2246:      mechnanicsSupport                                          OMA-LPPe-AGNSS-MechanicsSupport OPTIONAL,",
          "2247:                                                                                                            --Cond MechSupport",
          "2248:      dcbSupport                                                 OMA-LPPe-AGNSS-DCBsupport                  OPTIONAL,",
          "2249:                                                                                                      --Cond DCBsupport",
          "2250:      navModelAccuracyModelDegradationSupport                    OMA-LPPe-AGNSS-NavModelAccuracyModelDegradationSupport",
          "2251:                                                                 OPTIONAL,                                  --Cond NavModDegrSupport",
          "2252:      ccpAssistanceSuppport                                           GNSS-SignalIDs  OPTIONAL,   --Cond CCPsupport",
          "2253:      navModelSupport                       OMA-LPPe-AGNSS-NavModelSupport                  OPTIONAL,   --Cond NavModSupport",
          "2254:      ...",
          "2255: }",
          "2258: OMA-LPPe-AGNSS-MechanicsSupport ::= SEQUENCE {",
          "2259:      ...",
          "2260: }",
          "2263: OMA-LPPe-AGNSS-DCBsupport ::= SEQUENCE {",
          "2264:      ...",
          "2265: }",
          "2268: OMA-LPPe-AGNSS-NavModelAccuracyModelDegradationSupport ::= SEQUENCE {",
          "2269:      ...",
          "2270: }",
          "2273: OMA-LPPe-AGNSS-NavModelSupport ::= SEQUENCE {",
          "2274:      navModelSupport           SEQUENCE (SIZE(1..8)) OF INTEGER(1..8)  OPTIONAL,",
          "2275:      ...",
          "2276: }",
          "2279: OMA-LPPe-AGNSS-HAgnssSupport ::= SEQUENCE {",
          "2280:      modeSupport                                    BIT STRING {ueBased (0), ueAssisted (1) } (SIZE(2)),",
          "2281:      haGNSSpressureInformationSupport               BOOLEAN,",
          "2282:      haGNSSantennaInformationSupport                BIT STRING { antennaDescriptionSupported (0),",
          "2283:                                                                      antennaOrientationSupported (1)",
          "2284:                                                                      }  (SIZE(8)),",
          "2286:      haGNSSperGNSSsupport                           SEQUENCE (SIZE(1..8)) OF OMA-LPPe-AGNSS-HAgnssPerGNSSsupport,",
          "2287:      ...",
          "2288: }",
          "2290: OMA-LPPe-AGNSS-HAgnssPerGNSSsupport::= SEQUENCE {",
          "2291:      gnss-ID                         GNSS-ID,",
          "2292:      haGNSSsignalSupport             GNSS-SignalIDs,",
          "2293:      ...",
          "2294: }",
          "2297: OMA-LPPe-AGNSS-RequestCapabilities ::= SEQUENCE {",
          "2298:      assistanceDataSupportListReq                              NULL       OPTIONAL,",
          "2299:      environmentObservationSupportListReq                      NULL       OPTIONAL,",
          "2300:      haGNSSsupportReq                                          NULL       OPTIONAL,",
          "2301:      ...",
          "2302: }",
          "2305: OMA-LPPe-AGNSS-Error ::= CHOICE {",
          "2306:      agnss-locationServerErrorCauses                 OMA-LPPe-AGNSS-LocationServerErrorCauses,",
          "2307:      agnss-targetDeviceErrorCauses                   OMA-LPPe-AGNSS-TargetDeviceErrorCauses,",
          "2308:      ...",
          "2309: }",
          "2312: OMA-LPPe-AGNSS-LocationServerErrorCauses ::= SEQUENCE {",
          "2313:       waIonoErrorCauses  ENUMERATED {             undefined,",
          "2314:                                                   waIonoNotSupportedByServer,",
          "2315:                                                   waIonoNotSupportedInTargetArea,",
          "2316:                                                   waIonoNotSupportedForAnyRequestedGNSS,",
          "2317:                                                   ...} OPTIONAL,",
          "2318:       ccpErrorCauses          ENUMERATED {        undefined,",
          "2319:                                                   ccpNotSupportedByServer,",
          "2320:                                                   ccpNotSupportedInTargetArea,",
          "2321:                                                   ccpNotSupportedForAnyRequestedSignal,",
          "2322:                                                   ccpQorCannotBeMet,",
          "2323:                                                   ccpUnableToModifyControlParameters,",
          "2324:                                                   ccpMultiReferenceStationNotSupported,",
          "2325:                                                   ccpNeighborListNotSupported,",
          "2326:                                                   ccpSupportAreaAssistanceNotSupported,",
          "2327:                                                   ...} OPTIONAL,",
          "2328:      ...",
          "2329: }",
          "2332: OMA-LPPe-AGNSS-TargetDeviceErrorCauses ::= SEQUENCE {",
          "2333:      highAccuracyErrorCauses                      ENUMERATED {        undefined,",
          "2334:                                                                       highAccuracyMethodNotSupported,",
          "2335:                                                                       ...} OPTIONAL,",
          "2336:      ionosphereMeasurementErrorCauses             ENUMERATED  {       undefined,",
          "2337:                                                                       ionosphereMeasurementsNotSupported,",
          "2338:                                                                       ionosphereMeasurementsNotAvailable,",
          "2339:                                                                       ...}       OPTIONAL,",
          "2340:      environmentObservationErrorCauses   ENUMERATED  {                undefined,",
          "2341:                                                                       surfaceMeasurementsNotSupported,",
          "2342:                                                                       surfaceMeasurementsNotAvailable,",
          "2343:                                                                       ...}       OPTIONAL,",
          "2344:      haGNSSerrorCauses                            ENUMERATED {        undefined,",
          "2345:                                                                       haGNSSnotSupportedByTarget,",
          "2346:                                                                       haGNSSunavailableForAllRequestedSignals,",
          "2347:                                                                       haGNSSantennaInformationNotSupported,",
          "2348:                                                                       haGNSSantennaInformationNotAvailable,",
          "2349:                                                                       haGNSSpressureInformationNotSupported,",
          "2350:                                                                       haGNSSpressureInformationNotAvailable,",
          "2351:                                                                       haGNSSunableToModifyControlParameters,",
          "2352:                                                                       ...} OPTIONAL,",
          "2353:      ...",
          "2354: }",
          "2357: OMA-LPPe-AGNSS-CCPreferenceStationID ::= SEQUENCE {",
          "2358:      stationID       INTEGER(0..65535),",
          "2359:      ...",
          "2360: }",
          "2362: maxReferenceStations INTEGER ::= 8",
          "2365: OMA-LPPe-AGNSS-AntennaDescription ::= SEQUENCE {",
          "2366:      antennaDescription              CHOICE {",
          "2367:                                           igsAntennaName             OMA-LPPe-CharArray,",
          "2368:                                           proprietaryName            OMA-LPPe-CharArray,",
          "2369:                                           ...",
          "2370:                                           },",
          "2371:      antennaSetupID                  INTEGER(0..255)                 OPTIONAL,",
          "2372:      antennaSerialNumber             OMA-LPPe-CharArray              OPTIONAL,",
          "2373:      ...",
          "2374: }",
          "2377: OMA-LPPe-AGNSS-Abort::= SEQUENCE {",
          "2378:      targetDeviceAbortCauses           SEQUENCE {",
          "2379:           ccpAbort       ENUMERATED  {      undefined,",
          "2380:                                             ccpNotSupported,",
          "2381:                                             ccpNotSupportedForProvidedSignals,",
          "2382:                                             ... }      OPTIONAL,",
          "2383:           waIonoAbort ENUMERATED  {         undefined,",
          "2384:                                             waIonoNotSupported,",
          "2385:                                             waIonoNotSupportedForProvidedGNSSs,",
          "2386:                                             ... } OPTIONAL,",
          "2387:           ...",
          "2388:           } OPTIONAL,",
          "2389:      ...",
          "2390: }",
          "2393: OMA-LPPe-OTDOA-ProvideAssistanceData ::= SEQUENCE {",
          "2394:      otdoa-ReferenceCellInfo                     OMA-LPPe-OTDOA-ReferenceCellInfo                      OPTIONAL,",
          "2395:      otdoa-NeighbourCellInfo                     OMA-LPPe-OTDOA-NeighbourCellInfoList                  OPTIONAL,",
          "2396:      otdoa-Error                                 OMA-LPPe-OTDOA-Error                                  OPTIONAL,",
          "2397:      ...",
          "2398: }",
          "2401: OMA-LPPe-OTDOA-ReferenceCellInfo ::= SEQUENCE {",
          "2402:      referenceCellInfo                 OTDOA-ReferenceCellInfo,",
          "2403:      positionCalculationInfoRef  OMA-LPPe-OTDOA-PositionCalculationInfoRef,",
          "2404:      ...",
          "2405: }",
          "2408: OMA-LPPe-OTDOA-PositionCalculationInfoRef ::= SEQUENCE {",
          "2409:       systemFrameNumber                BIT STRING (SIZE(10))                            OPTIONAL, --Cond driftRate",
          "2410:       rtdReferenceStd                  OMA-LPPe-OTDOA-RTDquality                        OPTIONAL,",
          "2411:       cellLocation                     SEQUENCE {",
          "2412:                                             reference-point             OMA-LPPe-ReferencePoint                     OPTIONAL,",
          "2413:                                             relative-location           OMA-LPPe-RelativeLocation                   OPTIONAL,",
          "2414:                                             ...",
          "2415:                                             },",
          "2416:       femtoCellInfo                    SEQUENCE {",
          "2417:                                                   location-reliability             INTEGER(1..100) OPTIONAL,",
          "2418:                                                   ...",
          "2419:                                                   }                                     OPTIONAL,        --Cond femto",
          "2421:       ...",
          "2422: }",
          "2425: OMA-LPPe-OTDOA-NeighbourCellInfoList ::= SEQUENCE (SIZE (1..maxFreqLayers)) OF",
          "2426:                                                                OMA-LPPe-OTDOA-NeighbourFreqCellInfoList",
          "2431: OMA-LPPe-OTDOA-NeighbourFreqCellInfoList ::= SEQUENCE {",
          "2432:      neighbourCellInfoList-eNB            SEQUENCE (SIZE (1..maxLTEeNBs))  OF",
          "2433:                                                           OMA-LPPe-OTDOA-NeighbourCellInfoElement-eNB                    OPTIONAL,",
          "2434:      neighbourCellInfoList-HeNB  SEQUENCE (SIZE (1..maxLTEHeNBs)) OF",
          "2435:                                                           OMA-LPPe-OTDOA-NeighbourCellInfoElement-HeNB                   OPTIONAL,",
          "2436:      ...",
          "2437: }",
          "2440: OMA-LPPe-OTDOA-NeighbourCellInfoElement-eNB ::= SEQUENCE {",
          "2441:      relative-Location                         OMA-LPPe-RelativeLocation,",
          "2442:      otdoa-eNB-CellDataList                    SEQUENCE (SIZE (1..maxLTEMacroCells)) OF OMA-LPPe-OTDOA-CellData,",
          "2443:      ...",
          "2444: }",
          "2447: OMA-LPPe-OTDOA-NeighbourCellInfoElement-HeNB ::= SEQUENCE {",
          "2448:    relative-Location                         OMA-LPPe-RelativeLocation,",
          "2449:    location-reliability                        INTEGER (1..100)                            OPTIONAL,",
          "2450:    otdoa-HeNB-CellDataList                     OMA-LPPe-OTDOA-CellData,",
          "2451:    ...",
          "2452: }",
          "2455: OMA-LPPe-OTDOA-CellData  ::= SEQUENCE {",
          "2456:      otdoa-NeighbourCellInfoElement  OTDOA-NeighbourCellInfoElement,",
          "2457:      rtdInfo                                     SEQUENCE {",
          "2458:                                                             subframeOffset             INTEGER(0..10229)                OPTIONAL,",
          "2459:                                                             fineRTD                    INTEGER(0..99999),",
          "2460:                                                             fineRTDstd                 OMA-LPPe-OTDOA-RTDquality,",
          "2461:                                                             fineRTDdriftRate           INTEGER(-100..100)               OPTIONAL,",
          "2462:                                                             ...",
          "2463:                                                  },",
          "2464:      ...",
          "2465: }",
          "2468: OMA-LPPe-OTDOA-RTDquality ::= SEQUENCE {",
          "2469:      resolution                 ENUMERATED { ns-5, ns-10, ns-50, ns-100, ... },",
          "2470:      quality                    INTEGER (0..127),",
          "2471:      ...",
          "2472: }",
          "2475: OMA-LPPe-OTDOA-RequestAssistanceData ::= SEQUENCE {",
          "2476:      lteCell                               SEQUENCE {",
          "2477:                                                 physCellId            INTEGER(0..503),",
          "2478:                                                 eARFCN                ARFCN-ValueEUTRA,",
          "2479:                                                 ecgi                  CellGlobalIdEUTRA-AndUTRA                       OPTIONAL,",
          "2480:                                                 ...",
          "2481:                                            },",
          "2482:      requestedCells                        BIT STRING {",
          "2483:                                                       eNBs       (0),",
          "2484:                                                       heNBs      (1) }     (SIZE (1..8)),",
          "2485:      ...",
          "2486: }",
          "2489: OMA-LPPe-OTDOA-ProvideLocationInformation ::= SEQUENCE {",
          "2490:      otdoaLocationInformation                       OMA-LPPe-OTDOA-LocationInformation                        OPTIONAL,",
          "2491:      otdoaError                                     OMA-LPPe-OTDOA-Error                                      OPTIONAL,",
          "2492:      ...",
          "2493: }",
          "2496: OMA-LPPe-OTDOA-LocationInformation ::= SEQUENCE {",
          "2497:      systemFrameNumber               BIT STRING (SIZE (10)),",
          "2498:      physCellId                      INTEGER (0..503),",
          "2499:      cellGlobalId                    CellGlobalIdEUTRA-AndUTRA                      OPTIONAL,",
          "2500:      ...",
          "2501: }",
          "2504: OMA-LPPe-OTDOA-RequestLocationInformation ::= SEQUENCE {",
          "2505:           assistanceAvailability                               BOOLEAN,",
          "2506:           ...",
          "2507: }",
          "2510: OMA-LPPe-OTDOA-ProvideCapabilities ::= SEQUENCE {",
          "2511:      eNodeB-AD-sup                        SEQUENCE { ... }                          OPTIONAL,",
          "2512:      home-eNodeB-AD-sup                   SEQUENCE { ... }                          OPTIONAL,",
          "2513:      ...",
          "2514: }",
          "2517: OMA-LPPe-OTDOA-RequestCapabilities ::= SEQUENCE {",
          "2518:      ...",
          "2519: }",
          "2522: OMA-LPPe-OTDOA-Error ::= CHOICE {",
          "2523:      locationServerErrorCauses                 OMA-LPPe-OTDOA-LocationServerErrorCauses,",
          "2524:      targetDeviceErrorCauses                   OMA-LPPe-OTDOA-TargetDeviceErrorCauses,",
          "2525:      ...",
          "2526: }",
          "2529: OMA-LPPe-OTDOA-LocationServerErrorCauses ::= SEQUENCE {",
          "2530:      cause          ENUMERATED  {        undefined,",
          "2531:                                          locationCalculationAssistanceDataNotSupported,",
          "2532:                                          locationCalculationAssistanceDataSupportedButCurrentlyNotAvailable,",
          "2533:                                          ...",
          "2534:                                     },",
          "2535:      ...",
          "2536: }",
          "2539: OMA-LPPe-OTDOA-TargetDeviceErrorCauses ::= SEQUENCE {",
          "2540:      cause          ENUMERATED {         undefined,",
          "2541:                                          there-were-not-enough-signals-received-for-ueBased-otdoa,",
          "2542:                                          location-calculation-assistance-data-missing,",
          "2543:                                          ...",
          "2544:                                     },",
          "2545:      ...",
          "2546: }",
          "2549: OMA-LPPe-EOTD-ProvideAssistanceData ::= SEQUENCE {",
          "2550:      referenceBTS                        OMA-LPPe-EOTD-ReferenceBTSForAssistance                 OPTIONAL,      --Cond NotError",
          "2551:      msrAssistDataList                   OMA-LPPe-EOTD-MsrAssistDataList                         OPTIONAL,",
          "2552:      systemInfoAssistDataList            OMA-LPPe-EOTD-SystemInfoAssistDataList                  OPTIONAL,",
          "2553:      eotdError                           OMA-LPPe-EOTD-Error                                     OPTIONAL,",
          "2554:      ...",
          "2555: }",
          "2558: OMA-LPPe-EOTD-ReferenceBTSForAssistance ::= SEQUENCE {",
          "2559:       bsicAndCarrier             OMA-LPPe-CellNonUniqueIDGERAN,",
          "2560:       timeSlotScheme             OMA-LPPe-EOTD-TimeSlotScheme,",
          "2561:       btsPosition                CHOICE {",
          "2562:                  ellipsoidPoint                             Ellipsoid-Point,",
          "2563:                  ellipsoidPointWithAltitudeAndUncertaintyEllipsoid",
          "2564:                                                                        EllipsoidPointWithAltitudeAndUncertaintyEllipsoid,",
          "2565:                  ...",
          "2566:                  }         OPTIONAL,                        --Cond UE-based",
          "2567:       ...",
          "2568:  }",
          "2571: OMA-LPPe-EOTD-MsrAssistDataList ::= SEQUENCE (SIZE (1..15)) OF OMA-LPPe-EOTD-MsrAssistBTS",
          "2573: OMA-LPPe-EOTD-MsrAssistBTS ::= SEQUENCE {",
          "2574:      bsicAndCarrier             OMA-LPPe-CellNonUniqueIDGERAN,",
          "2575:      multiFrameOffset           OMA-LPPe-EOTD-MultiFrameOffset,",
          "2576:      timeSlotScheme             OMA-LPPe-EOTD-TimeSlotScheme,",
          "2577:      roughRTD                   OMA-LPPe-EOTD-RoughRTD,",
          "2578:      expectedOTD                OMA-LPPe-EOTD-ExpectedOTD,",
          "2579:      calcAssistanceBTS          OMA-LPPe-EOTD-CalcAssistanceBTS                  OPTIONAL,       --Cond UE-based",
          "2580:      ...",
          "2581: }",
          "2584: OMA-LPPe-EOTD-SystemInfoAssistDataList ::= SEQUENCE (SIZE (1..32)) OF OMA-LPPe-EOTD-SystemInfoAssistBTS",
          "2586: OMA-LPPe-EOTD-SystemInfoAssistBTS ::= CHOICE{",
          "2587:      notPresent                 NULL,",
          "2588:      present                    OMA-LPPe-EOTD-AssistBTSData",
          "2589: }",
          "2591: OMA-LPPe-EOTD-AssistBTSData ::= SEQUENCE {",
          "2592:      bsic                       INTEGER(0..63),",
          "2593:      multiFrameOffset           OMA-LPPe-EOTD-MultiFrameOffset,",
          "2594:      timeSlotScheme             OMA-LPPe-EOTD-TimeSlotScheme,",
          "2595:      roughRTD                   OMA-LPPe-EOTD-RoughRTD,",
          "2596:      expectedOTD                OMA-LPPe-EOTD-ExpectedOTD                      OPTIONAL,",
          "2597:      calcAssistanceBTS          OMA-LPPe-EOTD-CalcAssistanceBTS                OPTIONAL,       --Cond UE-based",
          "2598:      ...",
          "2599: }",
          "2602: OMA-LPPe-EOTD-CalcAssistanceBTS ::= SEQUENCE {",
          "2603:      fineRTD                    OMA-LPPe-EOTD-FineRTD,",
          "2604:      relativePos                OMA-LPPe-EOTD-relativePos,",
          "2605:      ...",
          "2606: }",
          "2608: OMA-LPPe-EOTD-relativePos ::= SEQUENCE {",
          "2609:      relativeNorth              OMA-LPPe-EOTD-RelDistance,",
          "2610:       relativeEast               OMA-LPPe-EOTD-RelDistance,",
          "2611:       relativeAlt                OMA-LPPe-EOTD-RelativeAlt                   OPTIONAL,",
          "2612:       ...",
          "2613: }",
          "2615: OMA-LPPe-EOTD-FineRTD ::= INTEGER(0..255)",
          "2617: OMA-LPPe-EOTD-RelDistance ::= INTEGER(-200000..200000)",
          "2619: OMA-LPPe-EOTD-RelativeAlt ::= INTEGER(-4000..4000)",
          "2622: OMA-LPPe-EOTD-RequestAssistanceData ::= SEQUENCE {",
          "2623:       eotdAssistanceReq                BIT STRING { ueAssisted (0), ueBased (1) },",
          "2624:       ...",
          "2625: }",
          "2628: OMA-LPPe-EOTD-ProvideLocationInformation ::= SEQUENCE {",
          "2629:      eotdMsrElement                 OMA-LPPe-EOTD-MsrElement                 OPTIONAL,",
          "2630:      eotdError                      OMA-LPPe-EOTD-Error                      OPTIONAL,",
          "2631:      ...",
          "2632: }",
          "2636: OMA-LPPe-EOTD-MsrElement ::= SEQUENCE {",
          "2637:      refFrameNumber                 INTEGER(0..42431),",
          "2638:      referenceTimeSlot              OMA-LPPe-EOTD-ModuloTimeSlot,",
          "2639:      toaMeasurementsOfRef           OMA-LPPe-EOTD-TOA-MeasurementsOfRef                                          OPTIONAL,",
          "2640:      stdResolution                  BIT STRING(SIZE(2)),",
          "2641:      taCorrection                   INTEGER(0..960)                                                              OPTIONAL,",
          "2642:      otd-FirstSetMsrs               SEQUENCE (SIZE(1..15)) OF OMA-LPPe-EOTD-MeasurementWithID                    OPTIONAL,",
          "2643:      ...",
          "2644: }",
          "2647: OMA-LPPe-EOTD-TOA-MeasurementsOfRef ::= SEQUENCE {",
          "2648:      refQuality                     BIT STRING(SIZE(5)),",
          "2649:      numOfMeasurements              BIT STRING(SIZE(3)),",
          "2650:      ...",
          "2651: }",
          "2655: OMA-LPPe-EOTD-MeasurementWithID ::= SEQUENCE {",
          "2656:      neighborIdentity               OMA-LPPe-EOTD-NeighborIdentity,",
          "2657:      nborTimeSlot                   OMA-LPPe-EOTD-ModuloTimeSlot,",
          "2658:      eotdQuality                    OMA-LPPe-EOTD-EOTDQuality,",
          "2659:      otdValue                       OMA-LPPe-EOTD-OTDValue,",
          "2660:      ...",
          "2661: }",
          "2664: OMA-LPPe-EOTD-NeighborIdentity ::= CHOICE {",
          "2665:      bsicAndCarrier            OMA-LPPe-CellNonUniqueIDGERAN,",
          "2666:      ci                        OMA-LPPe-EOTD-CellID,",
          "2667:      multiFrameCarrier         OMA-LPPe-EOTD-MultiFrameCarrier,",
          "2668:      requestIndex              OMA-LPPe-EOTD-RequestIndex,",
          "2669:      systemInfoIndex           OMA-LPPe-EOTD-SystemInfoIndex,",
          "2670:      ciAndLac                  OMA-LPPe-CellLocalIdGERAN,",
          "2671:      ...",
          "2672: }",
          "2674: OMA-LPPe-EOTD-EOTDQuality ::= SEQUENCE {",
          "2675:      nbrOfMeasurements                   BIT STRING(SIZE(3)),",
          "2676:      stdOfEOTD                           BIT STRING(SIZE(5)),",
          "2677:      ...",
          "2678: }",
          "2680: OMA-LPPe-EOTD-OTDValue ::= INTEGER (0..39999)",
          "2682: OMA-LPPe-EOTD-CellID ::= INTEGER (0..65535)",
          "2684: OMA-LPPe-EOTD-RequestIndex ::= INTEGER (1..16)",
          "2685: OMA-LPPe-EOTD-SystemInfoIndex ::= INTEGER (1..32)",
          "2687: OMA-LPPe-EOTD-MultiFrameCarrier ::= SEQUENCE {",
          "2688:      bcchCarrier               OMA-LPPe-EOTD-BCCHCarrier,",
          "2689:      multiFrameOffset          OMA-LPPe-EOTD-MultiFrameOffset,",
          "2690:      ...",
          "2691: }",
          "2693: OMA-LPPe-EOTD-BCCHCarrier ::= INTEGER (0..1023)",
          "2696: OMA-LPPe-EOTD-RequestLocationInformation ::= SEQUENCE {",
          "2697:       ...",
          "2698: }",
          "2701: OMA-LPPe-EOTD-ProvideCapabilities ::= SEQUENCE {",
          "2702:      eotdSupport BIT STRING{ ueBased(0), ueAssisted(1) },",
          "2703:      ...",
          "2704: }",
          "2707: OMA-LPPe-EOTD-RequestCapabilities ::= SEQUENCE {",
          "2708:      ...",
          "2709: }",
          "2712: OMA-LPPe-EOTD-Error ::= CHOICE {",
          "2713:      locationServerErrorCauses                OMA-LPPe-EOTD-LocationServerErrorCauses,",
          "2714:      targetDeviceErrorCauses                  OMA-LPPe-EOTD-TargetDeviceErrorCauses,",
          "2715:      ...",
          "2716: }",
          "2719: OMA-LPPe-EOTD-LocationServerErrorCauses ::= SEQUENCE {",
          "2720:      cause               ENUMERATED{ undefined,",
          "2721:                                          assistanceDataForUEbasedEOTDnotAvailable,",
          "2722:                                          assistanceDataForUEassistedEOTDnotAvailable,",
          "2723:                                          ...},",
          "2724:      ...",
          "2725: }",
          "2728: OMA-LPPe-EOTD-TargetDeviceErrorCauses ::= SEQUENCE {",
          "2729:      cause                 ENUMERATED{ undefinedError,",
          "2730:                                            notEnoughBTsforEOTD,",
          "2731:                                            assistanceDataMissing,",
          "2732:                                            referenceCellNotServingCell,",
          "2733:                                            eotdMeasurementsNotSupported,",
          "2734:                                            eotdMeasurementsNotAvailable,",
          "2735:                                            uebasedEOTDnotSupported,",
          "2736:                                            ...},",
          "2737:      ...",
          "2738: }",
          "2741: OMA-LPPe-EOTD-TimeSlotScheme ::= ENUMERATED {",
          "2742:      equalLength (0),",
          "2743:      variousLength (1)",
          "2744: }",
          "2747: OMA-LPPe-EOTD-MultiFrameOffset ::= INTEGER (0..51)",
          "2750: OMA-LPPe-EOTD-RoughRTD ::= INTEGER (0..1250)",
          "2753: OMA-LPPe-EOTD-ExpectedOTD ::= SEQUENCE {",
          "2754:       expectedOTD                 INTEGER(0..1250),",
          "2755:       expOTDUncertainty           INTEGER(0..7),",
          "2756:       ...",
          "2757: }",
          "2760: OMA-LPPe-EOTD-ModuloTimeSlot ::= INTEGER(0..3)",
          "2763: OMA-LPPe-OTDOA-UTRA-ProvideAssistanceData ::= SEQUENCE {",
          "2764:      referenceCellInfo              OMA-LPPe-OTDOA-UTRA-ReferenceCellInfo               OPTIONAL,",
          "2765:      neigborCellList                OMA-LPPe-OTDOA-UTRA-NeighborCellList                OPTIONAL,",
          "2766:      otdoaUtraError                 OMA-LPPe-OTDOA-UTRA-Error                           OPTIONAL,",
          "2767:      ...",
          "2768: }",
          "2771: OMA-LPPe-OTDOA-UTRA-ReferenceCellInfo ::= SEQUENCE {",
          "2772:      sfn                            INTEGER(0..4095)                    OPTIONAL,",
          "2773:      modeSpecificInfo          CHOICE {",
          "2774:           fdd                       SEQUENCE {",
          "2775:                primaryCPICH-info                   OMA-LPPe-OTDOA-UTRA-PrimaryCPICH-Info",
          "2776:                },",
          "2777:           tdd                       SEQUENCE {",
          "2778:                cellAndChannelIdentity              OMA-LPPe-OTDOA-UTRA-CellAndChannelIdentity",
          "2779:                }",
          "2780:           },",
          "2781:      frequencyInfo                  OMA-LPPe-UTRA-FrequencyInfo                         OPTIONAL,",
          "2782:      refPosAssist                   OMA-LPPe-OTDOA-UTRA-RefPosAssist                    OPTIONAL,   --Cond UE-based",
          "2783:      ipdl-parameters                OMA-LPPe-OTDOA-UTRA-IPDL-Parameters                 OPTIONAL,",
          "2784:      ...",
          "2785: }",
          "2789: OMA-LPPe-OTDOA-UTRA-RefPosAssist ::= SEQUENCE {",
          "2790:      cellPosition                        CHOICE {",
          "2791:                ellipsoidPoint                      Ellipsoid-Point,",
          "2792:                ellipsoidPointWithAltitude  EllipsoidPointWithAltitude,",
          "2793:                ...",
          "2794:                },",
          "2795:      roundTripTime                       INTEGER (0..32766)                  OPTIONAL,",
          "2796:      roundTripTimeExtension              INTEGER (0..70274)                  OPTIONAL,",
          "2797:      ...",
          "2798: }",
          "2801: OMA-LPPe-OTDOA-UTRA-NeighborCellList ::= SEQUENCE (SIZE (1..utra-maxCellMeas)) OF",
          "2802:                                                                                   OMA-LPPe-OTDOA-UTRA-NeighborCellInfo",
          "2804: OMA-LPPe-OTDOA-UTRA-NeighborCellInfo ::= SEQUENCE {",
          "2805:      modeSpecificInfo          CHOICE {",
          "2806:           fdd                       SEQUENCE {",
          "2807:                primaryCPICH-info                   OMA-LPPe-OTDOA-UTRA-PrimaryCPICH-Info",
          "2808:                },",
          "2809:           tdd                       SEQUENCE {",
          "2810:                cellAndChannelIdentity              OMA-LPPe-OTDOA-UTRA-CellAndChannelIdentity",
          "2811:                }",
          "2812:           },",
          "2813:      frequencyInfo                            OMA-LPPe-UTRA-FrequencyInfo                                  OPTIONAL,",
          "2814:      ipdl-parameters                          OMA-LPPe-OTDOA-UTRA-IPDL-Parameters                          OPTIONAL,",
          "2815:      sfn-SFN-relTimeDifference                OMA-LPPe-OTDOA-UTRA-SFN-SFN-RelTimeDifference1,",
          "2816:      sfn-offsetValidity                       OMA-LPPe-OTDOA-UTRA-SFN-OffsetValidity                       OPTIONAL,",
          "2817:      sfn-SFN-drift                            OMA-LPPe-OTDOA-UTRA-SFN-SFN-Drift                            OPTIONAL,",
          "2818:      searchWindowSize                         OMA-LPPe-OTDOA-UTRA-SearchWindowSize,",
          "2819:      positioningAssistance                    OMA-LPPe-OTDOA-UTRA-PositioningAssistance   OPTIONAL, --Cond UEbased",
          "2820:      ...",
          "2821: }",
          "2823: OMA-LPPe-OTDOA-UTRA-SFN-SFN-RelTimeDifference1 ::= SEQUENCE {",
          "2824:      sfn-offset                          INTEGER (0..4095),",
          "2825:      sfn-sfn-relTimeDifference           INTEGER (0..38399)",
          "2826: }",
          "2828: OMA-LPPe-OTDOA-UTRA-PositioningAssistance ::= SEQUENCE {",
          "2829:      relativeNorth                       INTEGER (-20000..20000),",
          "2830:      relativeEast                        INTEGER (-20000..20000),",
          "2831:      relativeAltitude                    INTEGER (-4000..4000)                         OPTIONAL,",
          "2832:      fineSFN-SFN                          OMA-LPPe-OTDOA-UTRA-fineSFN-SFN,",
          "2833:      roundTripTime                        INTEGER (0..32766)                              OPTIONAL,",
          "2834:      roundTripTimeExtension               INTEGER (0..70274)                              OPTIONAL,",
          "2835:      ...",
          "2836: }",
          "2838: utra-maxCellMeas           INTEGER ::= 32",
          "2840: OMA-LPPe-OTDOA-UTRA-SFN-OffsetValidity ::= ENUMERATED { false }",
          "2842: OMA-LPPe-OTDOA-UTRA-SFN-SFN-Drift ::= ENUMERATED {",
          "2843:                 sfnsfndrift0, sfnsfndrift1, sfnsfndrift2,",
          "2844:                 sfnsfndrift3, sfnsfndrift4, sfnsfndrift5,",
          "2845:                 sfnsfndrift8, sfnsfndrift10, sfnsfndrift15,",
          "2846:                 sfnsfndrift25, sfnsfndrift35, sfnsfndrift50,",
          "2847:                 sfnsfndrift65, sfnsfndrift80, sfnsfndrift100,",
          "2848:                 sfnsfndrift-1, sfnsfndrift-2, sfnsfndrift-3,",
          "2849:                 sfnsfndrift-4, sfnsfndrift-5, sfnsfndrift-8,",
          "2850:                 sfnsfndrift-10, sfnsfndrift-15, sfnsfndrift-25,",
          "2851:                 sfnsfndrift-35, sfnsfndrift-50, sfnsfndrift-65,",
          "2852:                 sfnsfndrift-80, sfnsfndrift-100,",
          "2853:                 ... }",
          "2855: OMA-LPPe-OTDOA-UTRA-SearchWindowSize ::= ENUMERATED { c20, c40, c80, c160, c320,",
          "2856:                                                                       c640, c1280, moreThan1280, ... }",
          "2858: OMA-LPPe-OTDOA-UTRA-fineSFN-SFN ::= INTEGER (0..15)",
          "2861: OMA-LPPe-OTDOA-UTRA-IPDL-Parameters ::= SEQUENCE {",
          "2862:      modeSpecificInfo               CHOICE {",
          "2863:           fdd                            SEQUENCE {",
          "2864:                ip-spacing                     OMA-LPPe-OTDOA-UTRA-IP-Spacing,",
          "2865:                ip-length                      OMA-LPPe-OTDOA-UTRA-IP-Length,",
          "2866:                ip-Offset                      INTEGER (0..9),",
          "2867:                seed                           INTEGER (0..63),",
          "2868:                burstModeParameters            OMA-LPPe-OTDOA-UTRA-BurstModeParameters                 OPTIONAL",
          "2869:           },",
          "2870:           tdd                            SEQUENCE {",
          "2871:                ip-spacing-tdd                 OMA-LPPe-OTDOA-UTRA-IP-Spacing-TDD,",
          "2872:                ip-slot                        INTEGER (0..14),",
          "2873:                ip-start                       INTEGER (0..4095),",
          "2874:                ip-PCCPCH                      OMA-LPPe-OTDOA-UTRA-IP-PCCPCH                           OPTIONAL,",
          "2875:                burstModeParameters            OMA-LPPe-OTDOA-UTRA-BurstModeParameters",
          "2876:           }",
          "2877:      }",
          "2878: }",
          "2880: OMA-LPPe-OTDOA-UTRA-IP-Spacing ::= ENUMERATED { e5, e7, e10, e15, e20, e30, e40, e50}",
          "2882: OMA-LPPe-OTDOA-UTRA-IP-Length ::= ENUMERATED {ipl5, ipl10}",
          "2884: OMA-LPPe-OTDOA-UTRA-IP-Spacing-TDD ::= ENUMERATED { e30, e40, e50, e70, e100 }",
          "2886: OMA-LPPe-OTDOA-UTRA-IP-PCCPCH ::= BOOLEAN",
          "2888: OMA-LPPe-OTDOA-UTRA-BurstModeParameters ::= SEQUENCE {",
          "2889:      burstStart                INTEGER (0..15),",
          "2890:      burstLength               INTEGER (10..25),",
          "2891:      burstFreq                 INTEGER (1..16)",
          "2892: }",
          "2895: OMA-LPPe-OTDOA-UTRA-RequestAssistanceData ::= SEQUENCE {",
          "2896:      otdoaUtraAssistanceReq                BIT STRING { ueAssisted (0), ueBased (1) } (SIZE(1..8)),",
          "2897:      ...",
          "2898: }",
          "2901: OMA-LPPe-OTDOA-UTRA-ProvideLocationInformation ::= SEQUENCE {",
          "2902:      otdoaUtraMeasurement                       OMA-LPPe-OTDOA-UTRA-Measurement                      OPTIONAL,",
          "2903:      otdoaUtraError                             OMA-LPPe-OTDOA-UTRA-Error                            OPTIONAL,",
          "2904:      timeStampData                              OMA-LPPe-OTDOA-UTRA-TimeStampData                    OPTIONAL, --Cond UE-based",
          "2905:      ...",
          "2906: }",
          "2909: OMA-LPPe-OTDOA-UTRA-Measurement ::= SEQUENCE {",
          "2910:      sfn                          INTEGER (0..4095),",
          "2911:      modeSpecificInfoMeas         CHOICE {",
          "2912:           fdd                          SEQUENCE {",
          "2913:                referenceCellIdentity                       OMA-LPPe-OTDOA-UTRA-PrimaryCPICH-Info,",
          "2914:                ue-RX-TX-TimeDifferenceType2Info            OMA-LPPe-OTDOA-UTRA-UE-RX-TX-TimeDifferenceType2Info,",
          "2915:                ...",
          "2916:                },",
          "2917:           tdd                          SEQUENCE {",
          "2918:                cellAndChannelIdentity                      OMA-LPPe-OTDOA-UTRA-CellAndChannelIdentity,",
          "2919:                ...",
          "2920:                }",
          "2921:      },",
          "2922:      neighborList                 OMA-LPPe-OTDOA-UTRA-NeighborList                  OPTIONAL,",
          "2923:      ...",
          "2924: }",
          "2926: OMA-LPPe-OTDOA-UTRA-UE-RX-TX-TimeDifferenceType2Info ::= SEQUENCE {",
          "2927:      ue-RX-TX-timeDifferenceType2                OMA-LPPe-OTDOA-UTRA-TimeDifferenceType2,",
          "2928:      neighborQuality                             OMA-LPPe-OTDOA-UTRA-NeighborQuality",
          "2929: }",
          "2931: OMA-LPPe-OTDOA-UTRA-TimeDifferenceType2 ::= INTEGER(0..8191)",
          "2933: OMA-LPPe-OTDOA-UTRA-NeighborList ::= SEQUENCE (SIZE (1..utra-maxCellMeas)) OF",
          "2934:                                                       OMA-LPPe-OTDOA-UTRA-Neighbor",
          "2936: OMA-LPPe-OTDOA-UTRA-Neighbor ::= SEQUENCE {",
          "2937:      modeSpecificInfo         CHOICE {",
          "2938:           fdd                     SEQUENCE {",
          "2939:                neighborIdentity                            OMA-LPPe-OTDOA-UTRA-PrimaryCPICH-Info            OPTIONAL,",
          "2940:                ue-RX-TX-timeDifferenceType2Info",
          "2941:                                        OMA-LPPe-OTDOA-UTRA-UE-RX-TX-TimeDifferenceType2Info                 OPTIONAL,",
          "2942:                ... },",
          "2943:           tdd                     SEQUENCE {",
          "2944:                cellAndChannelIdentity            OMA-LPPe-OTDOA-UTRA-CellAndChannelIdentity  OPTIONAL,",
          "2945:                uarfcn                            ARFCN-ValueUTRA                                       OPTIONAL,",
          "2946:                ... }",
          "2947:      },",
          "2948:      neighborQuality                        OMA-LPPe-OTDOA-UTRA-NeighborQuality,",
          "2949:      sfn-sfn-ObsTimeDifference2             OMA-LPPe-OTDOA-UTRA-SFN-SFN-ObsTimeDifference2,",
          "2950:      ...",
          "2951: }",
          "2953: OMA-LPPe-OTDOA-UTRA-NeighborQuality ::= SEQUENCE {",
          "2954:      quality                  OMA-LPPe-OTDOA-UTRA-Quality,",
          "2955:      ...",
          "2956: }",
          "2958: OMA-LPPe-OTDOA-UTRA-SFN-SFN-ObsTimeDifference2 ::= INTEGER (0..65535)",
          "2960: OMA-LPPe-OTDOA-UTRA-Quality ::= SEQUENCE {",
          "2961:      stdResolution                          BIT STRING (SIZE (2)),",
          "2962:      numberOfOTDOA-Measurements             BIT STRING (SIZE (3)),",
          "2963:      stdOfOTDOA-Measurements                BIT STRING (SIZE (5)),",
          "2964:      ...",
          "2965: }",
          "2968: OMA-LPPe-OTDOA-UTRA-TimeStampData ::= SEQUENCE {",
          "2969:      sfn                            INTEGER(0..4095),",
          "2970:      utraCellGlobalID               CellGlobalIdEUTRA-AndUTRA,",
          "2971:      frequencyInfo                  OMA-LPPe-UTRA-FrequencyInfo                              OPTIONAL,",
          "2972:      nonUniqueCellID                CHOICE {",
          "2973:           primaryScramblingCode          OMA-LPPe-OTDOA-UTRA-PrimaryScramblingCode,  --FDD",
          "2974:           cellParametersId               OMA-LPPe-OTDOA-UTRA-CellParametersID,               --TDD",
          "2975:           ...},",
          "2976:      ...",
          "2977: }",
          "2980: OMA-LPPe-OTDOA-UTRA-RequestLocationInformation ::= SEQUENCE {",
          "2981:      ...",
          "2982: }",
          "2985: OMA-LPPe-OTDOA-UTRA-ProvideCapabilities ::= SEQUENCE {",
          "2986:      ueBasedSupported          BOOLEAN,",
          "2987:      ueAssistedSupported BOOLEAN,",
          "2988:      ipdlSupported             BOOLEAN,",
          "2989:      ...",
          "2990: }",
          "2993: OMA-LPPe-OTDOA-UTRA-RequestCapabilities ::= SEQUENCE {",
          "2994:      ...",
          "2995: }",
          "2998: OMA-LPPe-OTDOA-UTRA-Error ::= CHOICE {",
          "2999:      locationServerErrorCauses                 OMA-LPPe-OTDOA-UTRA-LocationServerErrorCauses,",
          "3000:      targetDeviceErrorCauses                   OMA-LPPe-OTDOA-UTRA-TargetDeviceErrorCauses,",
          "3001:      ...",
          "3002: }",
          "3005: OMA-LPPe-OTDOA-UTRA-LocationServerErrorCauses ::= SEQUENCE {",
          "3006:      cause                ENUMERATED{ undefinedError,",
          "3007:                                           assistanceDataForUEbasedOTDOAnotAvailable,",
          "3008:                                           assistanceDataForUEassistedOTDOAnotAvailable,",
          "3009:                                           ...},",
          "3010:      ...",
          "3011: }",
          "3014: OMA-LPPe-OTDOA-UTRA-TargetDeviceErrorCauses ::= SEQUENCE {",
          "3015:      cause                ENUMERATED{ undefinedError,",
          "3016:                                          notEnoughOTDOA-cells,",
          "3017:                                          assistanceDataMissing,",
          "3018:                                          referenceCellNotServingCell,",
          "3019:                                          otdoaMeasurementsNotSupported,",
          "3020:                                          otdoaMeasurementsNotAvailable,",
          "3021:                                          uebasedOTDOAnotSupported,",
          "3022:                                          ...},",
          "3023:      ...",
          "3024: }",
          "3027: OMA-LPPe-OTDOA-UTRA-PrimaryCPICH-Info ::= SEQUENCE {",
          "3028:      primaryScramblingCode               OMA-LPPe-OTDOA-UTRA-PrimaryScramblingCode",
          "3029: }",
          "3032: OMA-LPPe-OTDOA-UTRA-PrimaryScramblingCode ::= INTEGER (0..511)",
          "3035: OMA-LPPe-OTDOA-UTRA-CellAndChannelIdentity ::= SEQUENCE {",
          "3036:      burstType                 OMA-LPPe-OTDOA-UTRA-BurstType,",
          "3037:      midambleShift             OMA-LPPe-OTDOA-UTRA-MidambleShiftLong,",
          "3038:      timeslot                  OMA-LPPe-OTDOA-UTRA-TimeSlotNumber,",
          "3039:      cellParametersID          OMA-LPPe-OTDOA-UTRA-CellParametersID,",
          "3040:      ...",
          "3041: }",
          "3043: OMA-LPPe-OTDOA-UTRA-BurstType ::= ENUMERATED { type1, type2 }",
          "3045: OMA-LPPe-OTDOA-UTRA-MidambleShiftLong ::= INTEGER (0..15)",
          "3047: OMA-LPPe-OTDOA-UTRA-TimeSlotNumber ::= INTEGER (0..14)",
          "3049: OMA-LPPe-OTDOA-UTRA-CellParametersID ::= INTEGER (0..127)",
          "3052: OMA-LPPe-ECID-LTE-ProvideAssistanceData ::= SEQUENCE {",
          "3053:      ecid-LTE-NetworkData           SEQUENCE (SIZE (1..maxLTENetworks)) OF",
          "3054:                                               OMA-LPPe-ECID-LTE-NetworkData                 OPTIONAL,",
          "3055:      ecid-LTE-Error                 OMA-LPPe-ECID-LTE-Error                                 OPTIONAL,",
          "3056:      ...",
          "3057: }",
          "3059: maxLTENetworks  INTEGER ::= 8",
          "3062: OMA-LPPe-ECID-LTE-NetworkData ::= SEQUENCE {",
          "3063:      plmn-Identity                  SEQUENCE {",
          "3064:                                          mcc       SEQUENCE (SIZE (3))            OF INTEGER (0..9),",
          "3065:                                          mnc       SEQUENCE (SIZE (2..3))  OF INTEGER (0..9),",
          "3066:                                          ...",
          "3067:                                     },",
          "3068:      multiple-PLMNs                 BOOLEAN,",
          "3069:      reference-location             OMA-LPPe-ReferencePoint             OPTIONAL,      --Cond eNBlocations",
          "3070:      ecid-lte-eNodeB-list           SEQUENCE (SIZE (1..maxLTEeNBs)) OF OMA-LPPe-ECID-LTE-eNodeBData,",
          "3071:      ecid-lte-HeNB-list             SEQUENCE (SIZE (1..maxLTEHeNBs)) OF OMA-LPPe-ECID-LTE-HeNBData  OPTIONAL,",
          "3072:      ...",
          "3073: }",
          "3075: maxLTEeNBs  INTEGER ::= 32",
          "3077: maxLTEHeNBs INTEGER ::= 128",
          "3080: OMA-LPPe-ECID-LTE-eNodeBData ::= SEQUENCE {",
          "3081:       relative-location                           OMA-LPPe-RelativeLocation                    OPTIONAL,",
          "3082:       ecid-lte-eNodeB-CellData                    SEQUENCE (SIZE (1..maxLTEMacroCells)) OF OMA-LPPe-ECID-LTE-CellData,",
          "3083:       ...",
          "3084: }",
          "3086: maxLTEMacroCells            INTEGER ::= 8",
          "3089: OMA-LPPe-ECID-LTE-HeNBData ::= SEQUENCE {",
          "3090:      relative-location                           OMA-LPPe-RelativeLocation                   OPTIONAL,",
          "3091:      location-reliability                        INTEGER (1..100)                            OPTIONAL,",
          "3092:      coverageArea                                OMA-LPPe-WLANFemtoCoverageArea  OPTIONAL,",
          "3093:      ecid-lte-HeNB-CellData                      OMA-LPPe-ECID-LTE-CellData,",
          "3094:      ...",
          "3095: }",
          "3098: OMA-LPPe-ECID-LTE-CellData ::= SEQUENCE {",
          "3099:      physCellId                                  INTEGER (0..503)                            OPTIONAL, --Cond AtLeastOne",
          "3100:      cellIdentity                                BIT STRING (SIZE (28))                      OPTIONAL, --Cond AtLeastOne",
          "3101:      dl-CarrierFreq                              ARFCN-ValueEUTRA,",
          "3102:      rs-transmit-power                           INTEGER (-127..128)                                         OPTIONAL,",
          "3103:      antennaPortConfig                           ENUMERATED {port1, ports2, ports4, ... }                    OPTIONAL,",
          "3104:      antenna-gain                                INTEGER (-127..128)                                         OPTIONAL,",
          "3105:      beam-width                                  INTEGER (1..360)                                            OPTIONAL,",
          "3106:      transmit-direction                          INTEGER (0..360)                                            OPTIONAL,",
          "3107:      frequency-accuracy                          INTEGER (0..100),",
          "3108:      ...",
          "3109: }",
          "3112: OMA-LPPe-ECID-LTE-RequestAssistanceData ::= SEQUENCE {",
          "3113:      eNBrequestedAD             BIT STRING  {        bslist                    (0),",
          "3114:                                                      bslocation                (1),",
          "3115:                                                      transmit-power            (2),",
          "3116:                                                      antennaPortConfig         (3),",
          "3117:                                                      antenna-gain              (4),",
          "3118:                                                      beam-width                (5),",
          "3119:                                                      transmit-direction  (6),",
          "3120:                                                      frequency-accuracy  (7),",
          "3121:                                                      non-serving               (8) } (SIZE(1..16)) OPTIONAL,",
          "3122:      heNBrequestedAD            BIT STRING  {        bslist                    (0),",
          "3123:                                                      bslocation                (1),",
          "3124:                                                      locationreliability (2),",
          "3125:                                                      transmit-power            (3),",
          "3126:                                                      antennaPortConfig         (4),",
          "3127:                                                      frequency-accuracy  (5),",
          "3128:                                                      coveragearea              (6),",
          "3129:                                                      non-serving               (7) } (SIZE(1..16)) OPTIONAL,",
          "3130:      ...",
          "3131: }",
          "3134: OMA-LPPe-ECID-LTE-ProvideLocationInformation ::= SEQUENCE {",
          "3135:       ecid-LTE-CombinedLocationInformation                    SEQUENCE (SIZE (1..maxLTEECIDSize))",
          "3136:                                                               OF OMA-LPPe-ECID-LTE-LocationInformationList                         OPTIONAL,",
          "3137:       ecid-LTE-Error                                          OMA-LPPe-ECID-LTE-Error OPTIONAL,",
          "3138:       ...",
          "3139: }",
          "3141: OMA-LPPe-ECID-LTE-LocationInformationList ::= SEQUENCE {",
          "3142:      ecid-LTE-LocationInformation               OMA-LPPe-ECID-LTE-LocationInformation,",
          "3143:      relativeTimeStamp                          INTEGER (0..65535)                                   OPTIONAL,",
          "3144:      servingFlag                                BOOLEAN,",
          "3145:      ...",
          "3146: }",
          "3148: maxLTEECIDSize  INTEGER ::= 64",
          "3151: OMA-LPPe-ECID-LTE-LocationInformation ::= SEQUENCE {",
          "3152:      lpp-ECID-SignalMeasurementInformation                      ECID-SignalMeasurementInformation,",
          "3153:      ...",
          "3154: }",
          "3157: OMA-LPPe-ECID-LTE-RequestLocationInformation ::= SEQUENCE {",
          "3158:      requestedMeasurements           BIT STRING {        rsrp            (0),",
          "3159:                                                          rsrq            (1),",
          "3160:                                                          ueRxTx          (2),",
          "3161:                                                          non-serving (3),",
          "3162:                                                          historic        (4) } (SIZE(1..8)),",
          "3163:      ...",
          "3164: }",
          "3167: OMA-LPPe-ECID-LTE-ProvideCapabilities ::= SEQUENCE {",
          "3168:      ecid-lte-MeasSupported  BIT STRING  {rsrp                      (0),",
          "3169:                                                     rsrq            (1),",
          "3170:                                                     ueRxTx          (2),",
          "3171:                                                     non-serving (3),",
          "3172:                                                     historic        (4) } (SIZE(1..8)),",
          "3173:      ecid-lte-eNodeB-ADSupported BIT STRING  {bslist                                (0),",
          "3174:                                                           bslocation                (1),",
          "3175:                                                           transmit-power            (2),",
          "3176:                                                           antennaPortConfig  (3),",
          "3177:                                                           antenna-gain              (4),",
          "3178:                                                           beam-width                (5),",
          "3179:                                                           transmit-direction (6),",
          "3180:                                                           frequency-accuracy (7),",
          "3181:                                                           non-serving               (8) } (SIZE(1..16)),",
          "3182:      ecid-utra-HeNB-ADSupported  BIT STRING  {bslist                                     (0),",
          "3183:                                                           bslocation                     (1),",
          "3184:                                                           locationreliability            (2),",
          "3185:                                                           transmit-power                 (3),",
          "3186:                                                           antennaPortConfig              (4),",
          "3187:                                                           frequency-accuracy             (5),",
          "3188:                                                           coveragearea                   (6),",
          "3189:                                                           non-serving                    (7) } (SIZE(1..16)),",
          "3190:      ...",
          "3191: }",
          "3194: OMA-LPPe-ECID-LTE-RequestCapabilities ::= SEQUENCE {",
          "3195:       ...",
          "3196: }",
          "3199: OMA-LPPe-ECID-LTE-Error ::= CHOICE {",
          "3200:      locationServerErrorCauses                 OMA-LPPe-ECID-LTE-LocationServerErrorCauses,",
          "3201:      targetDeviceErrorCauses                   OMA-LPPe-ECID-LTE-TargetDeviceErrorCauses,",
          "3202:      ...",
          "3203: }",
          "3206: OMA-LPPe-ECID-LTE-LocationServerErrorCauses ::= SEQUENCE {",
          "3207:      cause           ENUMERATED  {        undefined,",
          "3208:                                           requestedADNotAvailable,",
          "3209:                                           notAllrequestedADAvailable,",
          "3210:                                           ...",
          "3211:                                      },",
          "3212:      eNodeBMandatoryDataUnavailable                      NULL            OPTIONAL,",
          "3213:      eNodeBLocationsUnavailable                          NULL            OPTIONAL,",
          "3214:      eNodeBcellTransmitPowerUnavailable                  NULL            OPTIONAL,",
          "3215:      eNodeBcellAntennaPortConfigUnavailable  NULL                        OPTIONAL,",
          "3216:      eNodeBcallAntennaGainUnavailable                    NULL            OPTIONAL,",
          "3217:      eNodeBcellBeamWidthUnavailable                      NULL            OPTIONAL,",
          "3218:      eNodeBcellTransmitDirectionUnavailable  NULL                        OPTIONAL,",
          "3219:      eNodeBcellFrequencyAccuracyUnavailable  NULL                        OPTIONAL,",
          "3220:      eNodeBnonservingADUnavailable                       NULL            OPTIONAL,",
          "3221:      heNBMandatoryDataUnavailable                        NULL            OPTIONAL,",
          "3222:      heNBLocationUnavailable                             NULL            OPTIONAL,",
          "3223:      heNBLocationReliabilityUnavailable                  NULL            OPTIONAL,",
          "3224:      heNBcellTransmitPowerUnavailable                    NULL            OPTIONAL,",
          "3225:      heNBcellAntennaPortConfigUnavailable                NULL            OPTIONAL,",
          "3226:      heNBcellFrequencyAccuracyUnavailable                NULL            OPTIONAL,",
          "3227:      heNBCoverageAreaUnavailable                         NULL            OPTIONAL,",
          "3228:      heNBnonservingADUnavailable                         NULL            OPTIONAL,",
          "3229:      ...",
          "3230: }",
          "3233: OMA-LPPe-ECID-LTE-TargetDeviceErrorCauses ::= SEQUENCE {",
          "3234:      cause          ENUMERATED {undefined,",
          "3235:                                     requestedMeasurementsNotAvailable,",
          "3236:                                     notAllrequestedMeasurementsPossible,",
          "3237:                                     ...",
          "3238:                                     },",
          "3239:      rsrpMeasurementNotPossible                    NULL           OPTIONAL,",
          "3240:      rsrqMeasurementNotPossible                    NULL           OPTIONAL,",
          "3241:      ueRxTxMeasurementNotPossible                  NULL           OPTIONAL,",
          "3242:      non-servingMeasurementsNotAvailable NULL                     OPTIONAL,",
          "3243:      historicMeasurementsNotAvailable              NULL           OPTIONAL,",
          "3244:      ...",
          "3245: }",
          "3248: OMA-LPPe-ECID-GSM-ProvideAssistanceData ::= SEQUENCE {",
          "3249:      ecid-gsm-NetworkData           SEQUENCE (SIZE (1..maxGSMNetworks))",
          "3250:                                                                   OF OMA-LPPe-ECID-GSM-NetworkData                   OPTIONAL,",
          "3251:      ecid-gsm-Error                 OMA-LPPe-ECID-GSM-Error OPTIONAL,",
          "3252:      ...",
          "3253: }",
          "3255: maxGSMNetworks  INTEGER ::= 8",
          "3258: OMA-LPPe-ECID-GSM-NetworkData ::= SEQUENCE {",
          "3259:      plmn-Identity               SEQUENCE {",
          "3260:                                       mcc        SEQUENCE (SIZE (3))              OF INTEGER (0..9),",
          "3261:                                       mnc        SEQUENCE (SIZE (2..3))  OF INTEGER (0..9)",
          "3262:                                       },",
          "3263:      reference-location  OMA-LPPe-ReferencePoint                       OPTIONAL,        --Cond BSlocations",
          "3264:      base-station-list           SEQUENCE (SIZE (1..maxGSMBaseStations)) OF OMA-LPPe-ECID-GSM-BaseStationData,",
          "3265:      ...",
          "3266: }",
          "3268: maxGSMBaseStations  INTEGER ::= 32",
          "3271: OMA-LPPe-ECID-GSM-BaseStationData ::= SEQUENCE {",
          "3272:      relative-location                           OMA-LPPe-RelativeLocation                   OPTIONAL,",
          "3273:      ecid-gsm-CellData                           SEQUENCE (SIZE (1..maxGSMCells)) OF OMA-LPPe-ECID-GSM-CellData,",
          "3274:      ...",
          "3275: }",
          "3277: maxGSMCells INTEGER ::= 8",
          "3280: OMA-LPPe-ECID-GSM-CellData ::= SEQUENCE {",
          "3281:      cellNonUniqueIDGERAN                      OMA-LPPe-CellNonUniqueIDGERAN             OPTIONAL, --Cond AtLeastOne",
          "3282:      cellLocalIDGERAN                          OMA-LPPe-CellLocalIdGERAN                 OPTIONAL, --Cond AtLeastOne",
          "3283:      transmit-power                            INTEGER (-127..128)                       OPTIONAL,",
          "3284:      antenna-gain                              INTEGER (-127..128)                       OPTIONAL,",
          "3285:      beam-width                                INTEGER (1..360)                          OPTIONAL,",
          "3286:      transmit-direction                        INTEGER (0..360)                          OPTIONAL,",
          "3287:      frequency-accuracy                        INTEGER (0..100)                          OPTIONAL,",
          "3288:      ...",
          "3289: }",
          "3294: OMA-LPPe-ECID-GSM-RequestAssistanceData ::= SEQUENCE {",
          "3295:      requestedAD          BIT STRING  {        bslist                    (0),",
          "3296:                                                bslocation                (1),",
          "3297:                                                transmit-power            (2),",
          "3298:                                                antenna-gain              (3),",
          "3299:                                                beam-width                (4),",
          "3300:                                                transmit-direction  (5),",
          "3301:                                                frequency-accuracy  (6),",
          "3302:                                                non-serving               (7)",
          "3303:                                                 } (SIZE(1..16)),",
          "3304:      ...",
          "3305: }",
          "3308: OMA-LPPe-ECID-GSM-ProvideLocationInformation ::= SEQUENCE {",
          "3309:       ecid-GSM-CombinedLocationInformation                  SEQUENCE (SIZE (1..maxGSMECIDSize))",
          "3310:                                                             OF OMA-LPPe-ECID-GSM-LocationInformationList                      OPTIONAL,",
          "3311:       ecid-GSM-Error                                        OMA-LPPe-ECID-GSM-Error                                           OPTIONAL,",
          "3312:       ...",
          "3313: }",
          "3315: OMA-LPPe-ECID-GSM-LocationInformationList ::= SEQUENCE {",
          "3316:       ecid-GSM-LocationInformation               OMA-LPPe-ECID-GSM-LocationInformation,",
          "3317:       relativeTimeStamp                          INTEGER (0..65535)  OPTIONAL,",
          "3318:       servingFlag                                BOOLEAN,",
          "3319:       ...",
          "3320: }",
          "3322: maxGSMECIDSize  INTEGER ::= 64",
          "3326: OMA-LPPe-ECID-GSM-LocationInformation ::= SEQUENCE {",
          "3327:      cellGlobalIdGERAN               CellGlobalIdGERAN,",
          "3328:      rxLevel                         INTEGER (0..63)                           OPTIONAL,",
          "3329:      tA                              INTEGER(0..255)                           OPTIONAL,",
          "3330:      nMR-GERAN                       OMA-LPPe-NMR-GERAN                        OPTIONAL,",
          "3331:      ...",
          "3332: }",
          "3334: OMA-LPPe-NMR-GERAN ::= SEQUENCE (SIZE (1..15)) OF SEQUENCE {",
          "3335:      cellNonUniqueIDGERAN            OMA-LPPe-CellNonUniqueIDGERAN,",
          "3336:      cellLocalIDGERAN                OMA-LPPe-CellLocalIdGERAN                           OPTIONAL,",
          "3337:      rxLevel                         INTEGER (0..63),",
          "3338:      ...",
          "3339: }",
          "3342: OMA-LPPe-ECID-GSM-RequestLocationInformation ::= SEQUENCE {",
          "3343:      requestedMeasurements           BIT STRING {          rxLevel         (0),",
          "3344:                                                            tA              (1),",
          "3345:                                                            nMR-GERAN       (2),",
          "3346:                                                            non-serving (3),",
          "3347:                                                            historic        (4) } (SIZE(1..8)),",
          "3348:      ...",
          "3349: }",
          "3352: OMA-LPPe-ECID-GSM-ProvideCapabilities ::= SEQUENCE {",
          "3353:      ecid-gsm-MeasSupported  BIT STRING {                  rxLevel         (0),",
          "3354:                                                            tA              (1),",
          "3355:                                                            nMR-GERAN       (2),",
          "3356:                                                            non-serving (3),",
          "3357:                                                            historic        (4) } (SIZE(1..8)),",
          "3358:      ecid-gsm-ADSupported            BIT STRING  { bslist                            (0),",
          "3359:                                                        bslocation                    (1),",
          "3360:                                                        transmit-power                (2),",
          "3361:                                                        antenna-gain                  (3),",
          "3362:                                                        beam-width                    (4),",
          "3363:                                                        transmit-direction            (5),",
          "3364:                                                        frequency-accuracy            (6),",
          "3365:                                                        non-serving                   (7) } (SIZE(1..16)),",
          "3366:      ...",
          "3367: }",
          "3370: OMA-LPPe-ECID-GSM-RequestCapabilities ::= SEQUENCE {",
          "3371:       ...",
          "3372: }",
          "3375: OMA-LPPe-ECID-GSM-Error ::= CHOICE {",
          "3376:       locationServerErrorCauses                   OMA-LPPe-ECID-GSM-LocationServerErrorCauses,",
          "3377:       targetDeviceErrorCauses                     OMA-LPPe-ECID-GSM-TargetDeviceErrorCauses,",
          "3378:       ...",
          "3379: }",
          "3382: OMA-LPPe-ECID-GSM-LocationServerErrorCauses ::= SEQUENCE {",
          "3383:      cause           ENUMERATED  {        undefined,",
          "3384:                                           requestedADNotAvailable,",
          "3385:                                           notAllrequestedADAvailable,",
          "3386:                                           ...",
          "3387:                                      },",
          "3388:      mandatoryDataUnavailable                        NULL            OPTIONAL,",
          "3389:      bsLocationsUnavailable                          NULL            OPTIONAL,",
          "3390:      cellTransmitPowerUnavailable                    NULL            OPTIONAL,",
          "3391:      callAntennaGainUnavailable                      NULL            OPTIONAL,",
          "3392:      cellBeamWidthUnavailable                        NULL            OPTIONAL,",
          "3393:      cellTransmitDirectionUnavailable                NULL            OPTIONAL,",
          "3394:      cellFrequencyAccuracyUnavailable                NULL            OPTIONAL,",
          "3395:      nonservingADUnavailable                         NULL            OPTIONAL,",
          "3396:      ...",
          "3397: }",
          "3400: OMA-LPPe-ECID-GSM-TargetDeviceErrorCauses ::= SEQUENCE {",
          "3401:      cause           ENUMERATED {         undefined,",
          "3402:                                           requestedMeasurementsNotAvailable,",
          "3403:                                           notAllrequestedMeasurementsPossible,",
          "3404:                                           ...",
          "3405:                                      },",
          "3406:      rxLevelMeasurementNotPossible                   NULL            OPTIONAL,",
          "3407:      taMeasurementNotPossible                        NULL            OPTIONAL,",
          "3408:      nMRMeasurementNotPossible                       NULL            OPTIONAL,",
          "3409:      non-servingMeasurementsNotAvailable NULL                        OPTIONAL,",
          "3410:      historicMeasurementsNotAvailable                NULL            OPTIONAL,",
          "3411:      ...",
          "3412: }",
          "3415: OMA-LPPe-ECID-UTRA-ProvideAssistanceData ::= SEQUENCE {",
          "3416:      ecid-UTRA-NetworkData          SEQUENCE (SIZE (1..maxUTRANetworks))",
          "3417:                                                                   OF OMA-LPPe-ECID-UTRA-NetworkData                  OPTIONAL,",
          "3418:      ecid-UTRA-Error                OMA-LPPe-ECID-UTRA-Error                                                         OPTIONAL,",
          "3419:      ...",
          "3420: }",
          "3422: maxUTRANetworks INTEGER ::= 8",
          "3425: OMA-LPPe-ECID-UTRA-NetworkData ::= SEQUENCE {",
          "3426:      plmn-Identity                  SEQUENCE {",
          "3427:                                          mcc       SEQUENCE (SIZE (3))           OF INTEGER (0..9),",
          "3428:                                          mnc       SEQUENCE (SIZE (2..3))  OF INTEGER (0..9)",
          "3429:                                     },",
          "3430:      multiple-PLMNs                 BOOLEAN,",
          "3431:      reference-location             OMA-LPPe-ReferencePoint            OPTIONAL,      --Cond nodeBlocations",
          "3432:      ecid-utra-nodeB-list           SEQUENCE (SIZE (1..maxUTRAnodeBs))",
          "3433:                                                                             OF OMA-LPPe-ECID-UTRA-NodeBData OPTIONAL,",
          "3434:      ecid-utra-HNB-list             SEQUENCE (SIZE (1..maxUTRAHNBs)) OF OMA-LPPe-ECID-UTRA-HNBData  OPTIONAL,",
          "3435:      ...",
          "3436: }",
          "3438: maxUTRAnodeBs       INTEGER ::= 32",
          "3440: maxUTRAHNBs         INTEGER ::= 128",
          "3443: OMA-LPPe-ECID-UTRA-NodeBData ::= SEQUENCE {",
          "3444:      relative-location                           OMA-LPPe-RelativeLocation                   OPTIONAL,",
          "3445:      ecid-utra-nodeB-CellData                    SEQUENCE (SIZE (1..maxUTRAMacroCells)) OF",
          "3446:                                                                                                         OMA-LPPe-ECID-UTRA-CellData,",
          "3447:      ...",
          "3448: }",
          "3450: maxUTRAMacroCells          INTEGER ::= 8",
          "3453: OMA-LPPe-ECID-UTRA-HNBData ::= SEQUENCE {",
          "3454:      relative-location                           OMA-LPPe-RelativeLocation                   OPTIONAL,",
          "3455:      location-reliability                        INTEGER (1..100)                          OPTIONAL,",
          "3456:      coverageArea                                OMA-LPPe-WLANFemtoCoverageArea  OPTIONAL,",
          "3457:      ecid-utra-HNB-CellData                     OMA-LPPe-ECID-UTRA-CellData,",
          "3458:        ...",
          "3459: }",
          "3462: OMA-LPPe-ECID-UTRA-CellData ::= SEQUENCE {",
          "3463:      cellIdentity                               BIT STRING (SIZE (32))  OPTIONAL, --Cond AtLeastOne",
          "3464:      modeSpecificInfo                           CHOICE {",
          "3465:                            fdd",
          "3466:                                 SEQUENCE {",
          "3467:                                     primaryCPICH-Scrambling-Code               OMA-LPPe-OTDOA-UTRA-PrimaryScramblingCode,",
          "3468:                                     primaryCPICH-Tx-Power                      INTEGER (-127..128)             OPTIONAL,",
          "3469:                                     uarfcn-dl                                  ARFCN-ValueUTRA,",
          "3470:                                      ...",
          "3471:                                      },",
          "3472:                            tdd",
          "3473:                                 SEQUENCE {",
          "3474:                                     cellParametersID                      OMA-LPPe-OTDOA-UTRA-CellParametersID,",
          "3475:                             primaryCCPCH-Tx-Power                         INTEGER (-127..128)                  OPTIONAL,",
          "3476:                                     uarfcn-nt                             ARFCN-ValueUTRA,",
          "3477:                                      ...",
          "3478:                                      }",
          "3479:            }   OPTIONAL, --Cond AtLeastOne",
          "3480:      antenna-gain                               INTEGER (-127..128)                       OPTIONAL,",
          "3481:      beam-width                                 INTEGER (1..360)                          OPTIONAL,",
          "3482:      transmit-direction                         INTEGER (0..360)                          OPTIONAL,",
          "3483:      frequency-accuracy                         INTEGER (0..100)                          OPTIONAL,",
          "3484:        ...",
          "3485: }",
          "3488: OMA-LPPe-ECID-UTRA-RequestAssistanceData ::= SEQUENCE {",
          "3489:      nBrequestedAD              BIT STRING  {        bslist                    (0),",
          "3490:                                                      bslocation                (1),",
          "3491:                                                      transmit-power            (2),",
          "3492:                                                      antenna-gain              (3),",
          "3493:                                                      beam-width                (4),",
          "3494:                                                      transmit-direction  (5),",
          "3495:                                                      frequency-accuracy  (6),",
          "3496:                                                      non-serving               (7) } (SIZE(1..16)) OPTIONAL,",
          "3497:      hNBrequestedAD             BIT STRING  {        bslist                    (0),",
          "3498:                                                      bslocation                (1),",
          "3499:                                                      locationreliability (2),",
          "3500:                                                      transmit-power            (3),",
          "3501:                                                      frequency-accuracy  (4),",
          "3502:                                                      coveragearea              (5),",
          "3503:                                                      non-serving               (6) } (SIZE(1..16)) OPTIONAL,",
          "3504:      ...",
          "3505: }",
          "3508: OMA-LPPe-ECID-UTRA-ProvideLocationInformation ::= SEQUENCE {",
          "3509:       ecid-UTRA-CombinedLocationInformation                       SEQUENCE (SIZE (1..maxECIDUTRASize))",
          "3510:                                                             OF OMA-LPPe-ECID-UTRA-LocationInformationList                     OPTIONAL,",
          "3511:       ecid-Error           OMA-LPPe-ECID-UTRA-Error               OPTIONAL,",
          "3512:       ...",
          "3513: }",
          "3515: OMA-LPPe-ECID-UTRA-LocationInformationList ::= SEQUENCE {",
          "3516:       ecid-utra-LocationInformation                    OMA-LPPe-ECID-UTRA-LocationInformation,",
          "3517:       relativeTimeStamp                                INTEGER (0..65535)  OPTIONAL,",
          "3518:       servingFlag                                      BOOLEAN,",
          "3519:       ...",
          "3520: }",
          "3522: maxECIDUTRASize INTEGER ::= 64",
          "3525: OMA-LPPe-ECID-UTRA-LocationInformation ::= SEQUENCE {",
          "3526:      cellGlobalIdUTRA               CellGlobalIdEUTRA-AndUTRA,",
          "3527:      frequencyInfo                  OMA-LPPe-UTRA-FrequencyInfo                                   OPTIONAL,",
          "3528:      primaryScramblingCode          OMA-LPPe-OTDOA-UTRA-PrimaryScramblingCode                     OPTIONAL,      --Cond FDD",
          "3529:      measuredResultsList            OMA-LPPe-ECID-UTRA-MeasuredResultsList                        OPTIONAL,",
          "3530:      cellParametersId               OMA-LPPe-OTDOA-UTRA-CellParametersID                          OPTIONAL,      --Cond TDD",
          "3531:      utratimingAdvance              OMA-LPPe-ECID-UTRA-UTRATimingAdvance                          OPTIONAL,      --Cond TDD",
          "3532:      ...",
          "3533: }",
          "3535: OMA-LPPe-ECID-UTRA-UTRATimingAdvance ::= SEQUENCE {",
          "3536:      tA                             INTEGER (0..8191),",
          "3537:      tAResolution                   OMA-LPPe-ECID-UTRA-TAResolution                          OPTIONAL,",
          "3538:      chipRate                       OMA-LPPe-ECID-UTRA-ChipRate                              OPTIONAL,",
          "3539:      ...",
          "3540: }",
          "3542: OMA-LPPe-ECID-UTRA-TAResolution ::= ENUMERATED {",
          "3543:      res1-0chip,",
          "3544:      res0-5chip,",
          "3545:      res0-125chip,",
          "3546:      ...",
          "3547: }",
          "3549: OMA-LPPe-ECID-UTRA-ChipRate ::= ENUMERATED {",
          "3550:      tdd128,",
          "3551:      tdd384,",
          "3552:      tdd768,",
          "3553:      ...",
          "3554: }",
          "3557: OMA-LPPe-UTRA-FrequencyInfo ::= SEQUENCE {",
          "3558:      modeSpecificInfo             OMA-LPPe-UTRA-ModeSpecificInfo,",
          "3559:      ...",
          "3560: }",
          "3562: OMA-LPPe-UTRA-ModeSpecificInfo ::= CHOICE {",
          "3563:      fdd           OMA-LPPe-UTRA-FrequencyInfoFDD,",
          "3564:      tdd           OMA-LPPe-UTRA-FrequencyInfoTDD,",
          "3565:      ...",
          "3566: }",
          "3568: OMA-LPPe-UTRA-FrequencyInfoFDD ::= SEQUENCE {",
          "3569:      uarfcn-UL          ARFCN-ValueUTRA         OPTIONAL,",
          "3570:      uarfcn-DL          ARFCN-ValueUTRA,",
          "3571:      ...}",
          "3573: OMA-LPPe-UTRA-FrequencyInfoTDD ::= SEQUENCE {",
          "3574:      uarfcn-Nt          ARFCN-ValueUTRA,",
          "3575:      ...",
          "3576: }",
          "3578: OMA-LPPe-ECID-UTRA-MeasuredResultsList ::= SEQUENCE (SIZE (1..maxFreq)) OF",
          "3579:                                                                                   OMA-LPPe-ECID-UTRA-MeasuredResults",
          "3581: OMA-LPPe-ECID-UTRA-MeasuredResults ::= SEQUENCE {",
          "3582:      frequencyInfo                     OMA-LPPe-UTRA-FrequencyInfo,",
          "3583:      utra-CarrierRSSI                  OMA-LPPe-ECID-UTRA-CarrierRSSI                            OPTIONAL,",
          "3584:      cellMeasuredResultsList           OMA-LPPe-ECID-UTRA-CellMeasuredResultsList                OPTIONAL,",
          "3585:      ...",
          "3586: }",
          "3588: OMA-LPPe-ECID-UTRA-CellMeasuredResultsList ::= SEQUENCE (SIZE (1..utra-maxCellMeas)) OF",
          "3589:                                                                               OMA-LPPe-ECID-UTRA-CellMeasuredResults",
          "3591: OMA-LPPe-ECID-UTRA-CarrierRSSI ::= INTEGER(0..127)",
          "3593: OMA-LPPe-ECID-UTRA-CellMeasuredResults ::= SEQUENCE {",
          "3594:      cellIdentity            BIT STRING (SIZE (32))            OPTIONAL,",
          "3595:      modeSpecificInfo        CHOICE",
          "3596:      {",
          "3597:           fdd",
          "3598:                    SEQUENCE {",
          "3599:                              primaryCPICH-Info   OMA-LPPe-OTDOA-UTRA-PrimaryScramblingCode,",
          "3600:                         cpich-Ec-N0         OMA-LPPe-ECID-UTRA-CPICH-Ec-N0                            OPTIONAL,",
          "3601:                         cpich-RSCP          OMA-LPPe-ECID-UTRA-CPICH-RSCP                             OPTIONAL,",
          "3602:                         pathloss            OMA-LPPe-ECID-UTRA-Pathloss                               OPTIONAL,",
          "3603:                              ...",
          "3604:                    },",
          "3605:           tdd",
          "3606:                    SEQUENCE {",
          "3607:                              cellParametersID    OMA-LPPe-OTDOA-UTRA-CellParametersID,",
          "3608:                         primaryCCPCH-RSCP   OMA-LPPe-ECID-UTRA-PrimaryCCPCH-RSCP                      OPTIONAL,",
          "3609:                         pathloss            OMA-LPPe-ECID-UTRA-Pathloss                               OPTIONAL,",
          "3610:                              ...",
          "3611:                    }",
          "3612:      },",
          "3613:      ...",
          "3614: }",
          "3616: OMA-LPPe-ECID-UTRA-PrimaryCCPCH-RSCP ::= INTEGER(0..127)",
          "3618: OMA-LPPe-ECID-UTRA-CPICH-Ec-N0 ::= INTEGER(0..63)",
          "3620: OMA-LPPe-ECID-UTRA-CPICH-RSCP ::= INTEGER(0..127)",
          "3622: OMA-LPPe-ECID-UTRA-Pathloss ::= INTEGER(46..173)",
          "3624: maxFreq INTEGER ::= 8",
          "3627: OMA-LPPe-ECID-UTRA-RequestLocationInformation ::= SEQUENCE {",
          "3628:      requestedMeasurements                BIT STRING {         measuredResultsList                  (0),",
          "3629:                                                                tdd-timingAdvance                    (1),",
          "3630:                                                                mRL-utra-CarrierRSSI                 (2),",
          "3631:                                                                mRL-FDD-cpich-Ec-N0                  (3),",
          "3632:                                                                mRL-FDD-cpich-RSCP                   (4),",
          "3633:                                                                mRL-FDD-pathloss                     (5),",
          "3634:                                                                mRL-TDD-primaryCCPCH-RSCP            (6),",
          "3635:                                                                mRL-TDD-pathloss                     (7),",
          "3636:                                                                non-serving                          (8),",
          "3637:                                                                historic                             (9) } (SIZE(1..16)),",
          "3638:            ...",
          "3639: }",
          "3642: OMA-LPPe-ECID-UTRA-ProvideCapabilities ::= SEQUENCE {",
          "3643:      ecid-utra-MeasSupported BIT STRING {                measuredResultsList                      (0),",
          "3644:                                                               tdd-timingAdvance                   (1),",
          "3645:                                                               mRL-utra-CarrierRSSI                (2),",
          "3646:                                                               mRL-FDD-cpich-Ec-N0                 (3),",
          "3647:                                                               mRL-FDD-cpich-RSCP                  (4),",
          "3648:                                                               mRL-FDD-pathloss                    (5),",
          "3649:                                                               mRL-TDD-primaryCCPCH-RSCP           (6),",
          "3650:                                                               mRL-TDD-pathloss                    (7),",
          "3651:                                                               non-serving                         (8),",
          "3652:                                                               historic                            (9) } (SIZE(1..16)),",
          "3653:      ecid-utra-nodeB-ADSupported BIT STRING  { bslist                                   (0),",
          "3654:                                                            bslocation                   (1),",
          "3655:                                                            transmit-power               (2),",
          "3656:                                                            antenna-gain                 (3),",
          "3657:                                                            beam-width                   (4),",
          "3658:                                                            transmit-direction           (5),",
          "3659:                                                            frequency-accuracy           (6),",
          "3660:                                                            non-serving                  (7) } (SIZE(1..16)),",
          "3661:      ecid-utra-HNB-ADSupported           BIT STRING  { bslist                           (0),",
          "3662:                                                            bslocation                   (1),",
          "3663:                                                            locationreliability          (2),",
          "3664:                                                            transmit-power               (3),",
          "3665:                                                            frequency-accuracy           (4),",
          "3666:                                                            coveragearea                 (5),",
          "3667:                                                            non-serving                  (6) } (SIZE(1..16)),",
          "3668:      ...",
          "3669: }",
          "3672: OMA-LPPe-ECID-UTRA-RequestCapabilities ::= SEQUENCE {",
          "3673:      ...",
          "3674: }",
          "3677: OMA-LPPe-ECID-UTRA-Error ::= CHOICE {",
          "3678:      locationServerErrorCauses                OMA-LPPe-ECID-UTRA-LocationServerErrorCauses,",
          "3679:      targetDeviceErrorCauses                  OMA-LPPe-ECID-UTRA-TargetDeviceErrorCauses,",
          "3680:      ...",
          "3681: }",
          "3684: OMA-LPPe-ECID-UTRA-LocationServerErrorCauses ::= SEQUENCE {",
          "3685:      cause          ENUMERATED  {        undefined,",
          "3686:                                          requestedADNotAvailable,",
          "3687:                                          notAllrequestedADAvailable,",
          "3688:                                          ...",
          "3689:                                     },",
          "3690:      nodeBMandatoryDataUnavailable                      NULL            OPTIONAL,",
          "3691:      nodeBLocationUnavailable                           NULL            OPTIONAL,",
          "3692:      nodeBcellTransmitPowerUnavailable                  NULL            OPTIONAL,",
          "3693:      nodeBcallAntennaGainUnavailable                    NULL            OPTIONAL,",
          "3694:      nodeBcellBeamWidthUnavailable                      NULL            OPTIONAL,",
          "3695:      nodeBcellTransmitDirectionUnavailable              NULL            OPTIONAL,",
          "3696:      nodeBcellFrequencyAccuracyUnavailable              NULL            OPTIONAL,",
          "3697:      nodeBnonservingADUnavailable                       NULL            OPTIONAL,",
          "3698:      hNBMandatoryDataUnavailable                        NULL            OPTIONAL,",
          "3699:      hNBLocationUnavailable                             NULL            OPTIONAL,",
          "3700:      hNBLocationReliabilityUnavailable                  NULL            OPTIONAL,",
          "3701:      hNBcellTransmitPowerUnavailable                    NULL            OPTIONAL,",
          "3702:      hNBcellFrequencyAccuracyUnavailable                NULL            OPTIONAL,",
          "3703:      hNBCoverageAreaUnavailable                         NULL            OPTIONAL,",
          "3704:      hNBnonservingADUnavailable                         NULL            OPTIONAL,",
          "3705:      ...",
          "3706: }",
          "3709: OMA-LPPe-ECID-UTRA-TargetDeviceErrorCauses ::= SEQUENCE {",
          "3710:      cause           ENUMERATED {        undefined,",
          "3711:                                          requestedMeasurementsNotAvailable,",
          "3712:                                          notAllrequestedMeasurementsPossible,",
          "3713:                                          ...",
          "3714:                                     },",
          "3715:      mRLMeasurementsNotPossible                                         NULL            OPTIONAL,",
          "3716:      tdd-timingAdvanceMeasurementNotPossible                            NULL            OPTIONAL,",
          "3717:      mRL-utra-CarrierRSSIMeasurementNotPossible                         NULL            OPTIONAL,",
          "3718:      mRL-FDD-cpich-Ec-N0MeasurementNotPossible                          NULL            OPTIONAL,",
          "3719:      mRL-FDD-cpich-RSCPMeasurementNotPossible                           NULL            OPTIONAL,",
          "3720:      mRL-FDD-pathlossMeasurementNotPossible                             NULL            OPTIONAL,",
          "3721:      mRL-TDD-primaryCCPCH-RSCPMeasurementNotPossible                    NULL            OPTIONAL,",
          "3722:      mRL-TDD-pathlossMeasurementNotPossible                             NULL            OPTIONAL,",
          "3723:      non-servingMeasurementsNotAvailable                                NULL            OPTIONAL,",
          "3724:      historicMeasurementsNotAvailable                                   NULL            OPTIONAL,",
          "3725:      ...",
          "3726: }",
          "3729: OMA-LPPe-WLAN-AP-ProvideAssistanceData ::= SEQUENCE {",
          "3730:      wlan-DataSet         SEQUENCE (SIZE (1..maxWLANDataSets)) OF OMA-LPPe-WLAN-DataSet                     OPTIONAL,",
          "3731:      wlan-AP-Error        OMA-LPPe-WLAN-AP-Error                                                            OPTIONAL,",
          "3732:      ...",
          "3733: }",
          "3735: maxWLANDataSets INTEGER ::= 8",
          "3738: OMA-LPPe-WLAN-DataSet ::= SEQUENCE {",
          "3739:      plmn-Identity                     SEQUENCE {",
          "3740:                                             mcc       SEQUENCE (SIZE (3))           OF INTEGER (0..9),",
          "3741:                                             mnc       SEQUENCE (SIZE (2..3))  OF INTEGER (0..9)",
          "3742:                                             }    OPTIONAL,",
          "3743:      reference-point                   OMA-LPPe-ReferencePoint            OPTIONAL,      --Cond APlocations",
          "3744:      supported-channels-11a            Supported-Channels-11a  OPTIONAL,",
          "3745:      supported-channels-11bg           Supported-Channels-11bg OPTIONAL,",
          "3746:      wlan-ap-list                      SEQUENCE (SIZE (1..maxWLANAPs)) OF OMA-LPPe-WLAN-AP-Data,",
          "3747:      ...",
          "3748: }",
          "3750: maxWLANAPs  INTEGER ::= 128",
          "3752: Supported-Channels-11a ::= SEQUENCE {",
          "3753:      ch34      BOOLEAN,",
          "3754:      ch36      BOOLEAN,",
          "3755:      ch38      BOOLEAN,",
          "3756:      ch40      BOOLEAN,",
          "3757:      ch42      BOOLEAN,",
          "3758:      ch44      BOOLEAN,",
          "3759:      ch46      BOOLEAN,",
          "3760:      ch48      BOOLEAN,",
          "3761:      ch52      BOOLEAN,",
          "3762:      ch56      BOOLEAN,",
          "3763:      ch60      BOOLEAN,",
          "3764:      ch64    BOOLEAN,",
          "3765:      ch149   BOOLEAN,",
          "3766:      ch153   BOOLEAN,",
          "3767:      ch157   BOOLEAN,",
          "3768:      ch161   BOOLEAN",
          "3769: }",
          "3771: Supported-Channels-11bg ::= SEQUENCE {",
          "3772:      ch1  BOOLEAN,",
          "3773:      ch2  BOOLEAN,",
          "3774:      ch3  BOOLEAN,",
          "3775:      ch4  BOOLEAN,",
          "3776:      ch5  BOOLEAN,",
          "3777:      ch6  BOOLEAN,",
          "3778:      ch7  BOOLEAN,",
          "3779:      ch8  BOOLEAN,",
          "3780:      ch9  BOOLEAN,",
          "3781:      ch10 BOOLEAN,",
          "3782:      ch11 BOOLEAN,",
          "3783:      ch12 BOOLEAN,",
          "3784:      ch13 BOOLEAN,",
          "3785:      ch14 BOOLEAN",
          "3786: }",
          "3789: OMA-LPPe-WLAN-AP-Data ::= SEQUENCE {",
          "3790:       wlan-ap-id                                  OMA-LPPe-WLAN-AP-ID,",
          "3791:       relative-location                           OMA-LPPe-RelativeLocation                    OPTIONAL,",
          "3792:       location-reliability                        INTEGER (1..100)                             OPTIONAL,",
          "3793:       wlan-ap-Type-Data                           SEQUENCE (SIZE (1..maxWLANTypes)) OF OMA-LPPe-WLAN-AP-Type-Data,",
          "3794:       coverageArea                                OMA-LPPe-WLANFemtoCoverageArea  OPTIONAL,                    --Cond oneonly",
          "3795:       ...",
          "3796: }",
          "3798: maxWLANTypes          INTEGER ::= 5",
          "3801: OMA-LPPe-WLAN-AP-Type-Data ::= SEQUENCE {",
          "3802:      wlan-AP-Type                              OMA-LPPe-WLAN-AP-Type,",
          "3803:      transmit-power                            INTEGER (-127..128)                  OPTIONAL,",
          "3804:      antenna-gain                              INTEGER (-127..128)                  OPTIONAL,",
          "3805:      coverageArea                              OMA-LPPe-WLANFemtoCoverageArea  OPTIONAL,                --Cond oneonly",
          "3806:      ...",
          "3807: }",
          "3810: OMA-LPPe-WLAN-AP-RequestAssistanceData ::= SEQUENCE {",
          "3811:      requestedAD          BIT STRING  {     aplist                            (0),",
          "3812:                                                  aplocation                   (1),",
          "3813:                                                  locationreliability          (2),",
          "3814:                                                  transmit-power               (3),",
          "3815:                                                  antenna-gain                 (4),",
          "3816:                                                  coveragearea                 (5),",
          "3817:                                                  non-serving                  (6) } (SIZE(1..16)),",
          "3818:      requestedAPTypes          OMA-LPPe-WLAN-AP-Type-List,",
          "3819:      ...",
          "3820: }",
          "3823: OMA-LPPe-WLAN-AP-ProvideLocationInformation ::= SEQUENCE {",
          "3824:      wlan-AP-CombinedLocationInformation SEQUENCE (SIZE (1..maxWLANAPSize)) OF",
          "3825:                                                                 OMA-LPPe-WLAN-AP-LocationInformationList                  OPTIONAL,",
          "3826:      wlan-AP-Error                                   OMA-LPPe-WLAN-AP-Error                                               OPTIONAL,",
          "3827:      ...",
          "3828: }",
          "3830: OMA-LPPe-WLAN-AP-LocationInformationList ::= SEQUENCE {",
          "3831:      wlan-AP-LocationInformation                     OMA-LPPe-WLAN-AP-LocationInformation,",
          "3832:      relativeTimeStamp                               INTEGER (0..65535)  OPTIONAL,",
          "3833:      servingFlag                                     BOOLEAN,",
          "3834:      ...",
          "3835: }",
          "3837: maxWLANAPSize        INTEGER ::= 64",
          "3841: OMA-LPPe-WLAN-AP-LocationInformation ::= SEQUENCE {",
          "3842:      apMACAddress                 OMA-LPPe-WLAN-AP-ID,",
          "3843:      apSSID                       OCTET STRING (SIZE (1..32))             OPTIONAL,",
          "3844:      apSignaltoNoise              INTEGER(-127..128)                      OPTIONAL,",
          "3845:      apDeviceType                 OMA-LPPe-WLAN-AP-Type                   OPTIONAL,",
          "3846:      apPHYtype                    OMA-LPPe-WLAN-AP-PHY-Type               OPTIONAL,",
          "3847:      apSignalStrength             INTEGER(-127..128)                      OPTIONAL,",
          "3848:      apChannelFrequency           INTEGER(0..256)                         OPTIONAL,",
          "3849:      apRoundTripDelay             OMA-LPPe-WLAN-RTD                       OPTIONAL,",
          "3850:      ueTransmitPower              INTEGER(-127..128)                      OPTIONAL,",
          "3851:      ueAntennaGain                INTEGER (-127..128)                     OPTIONAL,",
          "3852:      apReportedLocation           OMA-LPPe-WLAN-ReportedLocation  OPTIONAL,",
          "3853:      ...,",
          "3854:      apTransmitPower              INTEGER (-127..128) OPTIONAL,",
          "3855:      apAntennaGain                INTEGER (-127..128) OPTIONAL,",
          "3856:      ueSignaltoNoise              INTEGER (-127..128) OPTIONAL,",
          "3857:      ueSignalStrength             INTEGER (-127..128) OPTIONAL,",
          "3858:      apSignalStrengthDelta        INTEGER (0..1) OPTIONAL, -- Cond APSSDelta",
          "3859:      ueSignalStrengthDelta        INTEGER (0..1) OPTIONAL, -- Cond UESSDelta",
          "3860:      apSignaltoNoiseDelta         INTEGER (0..1) OPTIONAL, -- Cond APSNDelta",
          "3861:      ueSignaltoNoiseDelta         INTEGER (0..1) OPTIONAL, -- Cond UESNDelta",
          "3862:      operatingClass               INTEGER (0..255) OPTIONAL",
          "3863: }",
          "3865: OMA-LPPe-WLAN-AP-PHY-Type ::= ENUMERATED {  unknown, any, fhss, dsss, irbaseband, ofdm, hrdsss, erp,",
          "3866:                                                       ht, ihv, ... }",
          "3868: OMA-LPPe-WLAN-RTD ::= SEQUENCE {",
          "3869:      rTDValue     INTEGER(0..16777215),",
          "3870:      rTDUnits     OMA-LPPe-WLAN-RTDUnits,",
          "3871:      rTDAccuracy  INTEGER(0..255)                OPTIONAL,",
          "3872:      ...",
          "3873: }",
          "3875: OMA-LPPe-WLAN-RTDUnits ::= ENUMERATED {",
          "3876:      microseconds,",
          "3877:      hundredsofnanoseconds,",
          "3878:      tensofnanoseconds,",
          "3879:      nanoseconds,",
          "3880:      tenthsofnanoseconds,",
          "3881:      ...",
          "3882: }",
          "3884: OMA-LPPe-WLAN-ReportedLocation ::= SEQUENCE {",
          "3886:      locationDataLCI                        OMA-LPPe-WLAN-LocationDataLCI                     OPTIONAL,",
          "3887:      ...",
          "3888: }",
          "3891: OMA-LPPe-WLAN-LocationDataLCI ::= SEQUENCE {",
          "3892:      latitudeResolution               BIT STRING (SIZE (6)),",
          "3893:      latitude                         BIT STRING (SIZE (34)),",
          "3894:      longitudeResolution              BIT STRING (SIZE (6)),",
          "3895:      longitude                        BIT STRING (SIZE (34)),",
          "3896:      altitudeType                     BIT STRING (SIZE (4)),",
          "3897:      altitudeResolution               BIT STRING (SIZE (6)),",
          "3898:      altitude                         BIT STRING (SIZE (30)),",
          "3899:      datum                            BIT STRING (SIZE (8)),",
          "3900:      ...",
          "3901: }",
          "3904: OMA-LPPe-WLAN-AP-RequestLocationInformation ::= SEQUENCE {",
          "3905:      requestedMeasurements           BIT STRING {",
          "3906:                                                          apSSID          (0),",
          "3907:                                                          apSN            (1),",
          "3908:                                                          apDevType       (2),",
          "3909:                                                          apPhyType       (3),",
          "3910:                                                          apRSSI          (4),",
          "3911:                                                          apChanFreq  (5),",
          "3912:                                                          apRTD           (6),",
          "3913:                                                          ueTP            (7),",
          "3914:                                                          ueAG            (8),",
          "3915:                                                          apRepLoc        (9),",
          "3916:                                                          non-serving (10),",
          "3917:                                                          historic        (11),",
          "3918:                                                          apTP            (12),",
          "3919:                                                          apAG            (13),",
          "3920:                                                          ueSN            (14),",
          "3921:                                                          ueRSSI          (15)} (SIZE(1..16)),",
          "3922:      ... ,",
          "3923:      additionalRequestedMeasurements BIT STRING {",
          "3924:                                                          oc              (0)} (SIZE(1..16)) OPTIONAL",
          "3925: }",
          "3928: OMA-LPPe-WLAN-AP-ProvideCapabilities ::= SEQUENCE {",
          "3929:      wlan-ecid-MeasSupported BIT STRING  {",
          "3930:                                                            apSSID          (0),",
          "3931:                                                            apSN            (1),",
          "3932:                                                            apDevType       (2),",
          "3933:                                                            apPhyType       (3),",
          "3934:                                                            apRSSI          (4),",
          "3935:                                                            apChanFreq  (5),",
          "3936:                                                            apRTD           (6),",
          "3937:                                                            ueTP            (7),",
          "3938:                                                            ueAG            (8),",
          "3939:                                                            apRepLoc        (9),",
          "3940:                                                            non-serving (10),",
          "3941:                                                            historic        (11),",
          "3942:                                                            apTP            (12),",
          "3943:                                                            apAG            (13),",
          "3944:                                                            ueSN            (14),",
          "3945:                                                            ueRSSI          (15)}     (SIZE(1..16)),",
          "3946:      wlan-types-Supported                  OMA-LPPe-WLAN-AP-Type-List                OPTIONAL,",
          "3947:      ap-Capability                         OMA-LPPe-WLAN-AP-Capability               OPTIONAL,",
          "3948:      wlan-ap-ADSupported BIT STRING  {aplist                                    (0),",
          "3949:                                                  aplocation                     (1),",
          "3950:                                                  locationreliability            (2),",
          "3951:                                                   transmit-power                  (3),",
          "3952:                                                   antenna-gain                    (4),",
          "3953:                                                   coveragearea                    (5),",
          "3954:                                                   non-serving                     (6) } (SIZE(1..16)),",
          "3955:      ...,",
          "3956:      additional-wlan-ecid-MeasSupported  BIT STRING {",
          "3957:                                                             oc              (0)} (SIZE(1..16)) OPTIONAL",
          "3959: }",
          "3961: OMA-LPPe-WLAN-AP-Capability ::= SEQUENCE {",
          "3962:      apMACAddress                     OMA-LPPe-WLAN-AP-ID,",
          "3963:      apTypes                          OMA-LPPe-WLAN-AP-Type-List,",
          "3964:      ...",
          "3965: }",
          "3968: OMA-LPPe-WLAN-AP-RequestCapabilities ::= SEQUENCE {",
          "3969:       ...",
          "3970: }",
          "3973: OMA-LPPe-WLAN-AP-Error ::= CHOICE {",
          "3974:       locationServerErrorCauses                   OMA-LPPe-WLAN-AP-LocationServerErrorCauses,",
          "3975:       targetDeviceErrorCauses                     OMA-LPPe-WLAN-AP-TargetDeviceErrorCauses,",
          "3976:       ...",
          "3977: }",
          "3980: OMA-LPPe-WLAN-AP-LocationServerErrorCauses ::= SEQUENCE {",
          "3981:      cause                                        ENUMERATED  {undefined,",
          "3982:                                                                  requestedADNotAvailable,",
          "3983:                                                                  notAllrequestedADAvailable,",
          "3984:                                                                  ...",
          "3985:                                                                  },",
          "3986:      apMandatoryDataUnavailable                   NULL           OPTIONAL,",
          "3987:      apLocationsUnavailable                       NULL           OPTIONAL,",
          "3988:      apLocationReliabilityUnavailable             NULL           OPTIONAL,",
          "3989:      apTransmitPowerUnavailable                   NULL           OPTIONAL,",
          "3990:      apAntennaGainUnavailable                     NULL           OPTIONAL,",
          "3991:      apCoverageAreaUnavailable                    NULL           OPTIONAL,",
          "3992:      nonservingADUnavailable                      NULL           OPTIONAL,",
          "3993:      ...",
          "3994: }",
          "3997: OMA-LPPe-WLAN-AP-TargetDeviceErrorCauses ::= SEQUENCE {",
          "3998:      cause                                             ENUMERATED {undefined,",
          "3999:                                                                        requestedMeasurementsNotAvailable,",
          "4000:                                                                        notAllrequestedMeasurementsPossible,",
          "4001:                                                                        ...",
          "4002:                                                                        },",
          "4003:      apSSIDnotAvailable                                NULL           OPTIONAL,",
          "4004:      apSNMeasurementNotPossible                        NULL           OPTIONAL,",
          "4005:      apDevTypeNotAvailable                             NULL           OPTIONAL,",
          "4006:      apPhyTypeNotAvailable                             NULL           OPTIONAL,",
          "4007:      apRSSIMeasurementNotPossible                      NULL           OPTIONAL,",
          "4008:      apChanFreqNotAvailable                            NULL           OPTIONAL,",
          "4009:      apRTDMeasurementNotPossible                       NULL           OPTIONAL,",
          "4010:      ueTPNotAvailable                                  NULL           OPTIONAL,",
          "4011:      ueAGNotAvailable                                  NULL           OPTIONAL,",
          "4012:      apRecLocNotAvailable                              NULL           OPTIONAL,",
          "4013:      non-servingMeasurementsNotAvailable               NULL           OPTIONAL,",
          "4014:      historicMeasurementsNotAvailable                  NULL           OPTIONAL,",
          "4015:      ...,",
          "4016:      apTPNotAvailable                                  NULL           OPTIONAL,",
          "4017:      apAGNotAvailable                                  NULL           OPTIONAL,",
          "4018:      ueSNNotAvailable                                  NULL           OPTIONAL,",
          "4019:      ueRSSINotAvailable                                NULL           OPTIONAL,",
          "4020:      ocNotAvailable                                    NULL           OPTIONAL",
          "4021: }",
          "4024: OMA-LPPe-ECID-WiMax-ProvideLocationInformation ::= SEQUENCE {",
          "4025:      ecid-wimax-CombinedLocationInformation  SEQUENCE (SIZE (1..maxWiMaxECIDSize)) OF",
          "4026:                                                                 OMA-LPPe-ECID-WiMax-LocationInformationList OPTIONAL,",
          "4027:      ecid-wimax-Error                                           OMA-LPPe-ECID-WiMax-Error                                 OPTIONAL,",
          "4028:      ...",
          "4029: }",
          "4031: OMA-LPPe-ECID-WiMax-LocationInformationList ::= SEQUENCE {",
          "4032:      ecid-wimax-LocationInformation                  OMA-LPPe-ECID-WiMax-LocationInformation,",
          "4033:      relativeTimeStamp                               INTEGER (0..65535)  OPTIONAL,",
          "4034:      servingFlag                                     BOOLEAN,",
          "4035:      ...",
          "4036: }",
          "4038: maxWiMaxECIDSize           INTEGER ::= 1264",
          "4042: OMA-LPPe-ECID-WiMax-LocationInformation ::= SEQUENCE {",
          "4043:      wimaxBsID           OMA-LPPe-ECID-WiMax-WimaxBsID,",
          "4044:      wimaxRTD            OMA-LPPe-ECID-WiMax-WimaxRTD                OPTIONAL,",
          "4045:      wimaxNMRList        OMA-LPPe-ECID-WiMax-WimaxNMRList            OPTIONAL,",
          "4046:      ...",
          "4047: }",
          "4049: OMA-LPPe-ECID-WiMax-WimaxBsID ::= SEQUENCE {",
          "4050:      bsID-MSB            BIT STRING (SIZE(24))             OPTIONAL,",
          "4051:      bsID-LSB            BIT STRING (SIZE(24)),",
          "4052:      ...",
          "4053: }",
          "4055: OMA-LPPe-ECID-WiMax-WimaxRTD ::= SEQUENCE {",
          "4056:      rTD                 INTEGER (0..65535),",
          "4057:      rTDstd              INTEGER (0..1023)            OPTIONAL,",
          "4058:      ...",
          "4059: }",
          "4061: OMA-LPPe-ECID-WiMax-WimaxNMRList ::= SEQUENCE  (SIZE (1..maxWimaxBSMeas)) OF",
          "4062:                                                                                               OMA-LPPe-ECID-WiMax-WimaxNMR",
          "4064: OMA-LPPe-ECID-WiMax-WimaxNMR ::= SEQUENCE {",
          "4065:      wimaxBsID           OMA-LPPe-ECID-WiMax-WimaxBsID,",
          "4066:      relDelay            INTEGER (-32768..32767)                     OPTIONAL,",
          "4067:      relDelaystd         INTEGER (0..1023)                           OPTIONAL,",
          "4068:      rSSI                INTEGER (0..255)                            OPTIONAL,",
          "4069:      rSSIstd             INTEGER (0..63)                             OPTIONAL,",
          "4070:      bSTxPower           INTEGER (0..255)                            OPTIONAL,",
          "4071:      cINR                INTEGER (0..255)                            OPTIONAL,",
          "4072:      cINRstd             INTEGER (0..63)                             OPTIONAL,",
          "4073:      bSLocation          OMA-LPPe-WLAN-ReportedLocation              OPTIONAL,",
          "4074:      ...",
          "4075: }",
          "4077: maxWimaxBSMeas INTEGER ::= 32",
          "4080: OMA-LPPe-ECID-WiMax-RequestLocationInformation ::= SEQUENCE {",
          "4081:      requestedMeasurements           BIT STRING {          rTD                  (0),",
          "4082:                                                            rTDstd               (1),",
          "4083:                                                            nMR                  (2),",
          "4084:                                                            nMRrelDelay          (3),",
          "4085:                                                            nMRrelDelaystd  (4),",
          "4086:                                                            nMRrSSI              (5),",
          "4087:                                                            nMRrSSIstd           (6),",
          "4088:                                                            nMRbSTxPower         (7),",
          "4089:                                                            nMRcINR              (8),",
          "4090:                                                            nMRcINRstd           (9),",
          "4091:                                                            nMRbSLocation        (10),",
          "4092:                                                            non-serving          (11),",
          "4093:                                                            historic             (12) } (SIZE(1..16)),",
          "4094:            ...",
          "4095: }",
          "4098: OMA-LPPe-ECID-WiMax-ProvideCapabilities ::= SEQUENCE {",
          "4099:      ecid-wimax-MeasSupported              BIT STRING {         rTD                  (0),",
          "4100:                                                                 rTDstd               (1),",
          "4101:                                                                 nMR                  (2),",
          "4102:                                                                 nMRrelDelay          (3),",
          "4103:                                                                 nMRrelDelaystd  (4),",
          "4104:                                                                 nMRrSSI              (5),",
          "4105:                                                                 nMRrSSIstd           (6),",
          "4106:                                                                 nMRbSTxPower         (7),",
          "4107:                                                                 nMRcINR              (8),",
          "4108:                                                                 nMRcINRstd           (9),",
          "4109:                                                                 nMRbSLocation        (10),",
          "4110:                                                                 non-serving          (11),",
          "4111:                                                                 historic             (12) } (SIZE(1..16)),",
          "4112:      ...",
          "4113: }",
          "4116: OMA-LPPe-ECID-WiMax-RequestCapabilities ::= SEQUENCE {",
          "4117:      ...",
          "4118: }",
          "4121: OMA-LPPe-ECID-WiMax-Error ::= CHOICE {",
          "4122:      locationServerErrorCauses                  OMA-LPPe-ECID-WiMax-LocationServerErrorCauses,",
          "4123:      targetDeviceErrorCauses                    OMA-LPPe-ECID-WiMax-TargetDeviceErrorCauses,",
          "4124:      ...",
          "4125: }",
          "4128: OMA-LPPe-ECID-WiMax-LocationServerErrorCauses ::= SEQUENCE {",
          "4129:      cause          ENUMERATED  {undefined,",
          "4130:                                    ...",
          "4131:                                    },",
          "4132:      ...",
          "4133: }",
          "4136: OMA-LPPe-ECID-WiMax-TargetDeviceErrorCauses ::= SEQUENCE {",
          "4137:      cause                                             ENUMERATED {         undefined,",
          "4138:                                                                             requestedMeasurementsNotAvailable,",
          "4139:                                                                             notAllrequestedMeasurementsPossible,",
          "4140:                                                                             ...",
          "4141:                                                                        },",
          "4142:      rTDMeasurementNotPossible                         NULL           OPTIONAL,",
          "4143:      rTDstdMeasurementNotPossible                      NULL           OPTIONAL,",
          "4144:      nMRMeasurementNotPossible                         NULL           OPTIONAL,",
          "4145:      nMRrelDelayMeasurementNotPossible                 NULL           OPTIONAL,",
          "4146:      nMRrelDelaystdMeasurementNotPossible              NULL           OPTIONAL,",
          "4147:      nMRrSSIMeasurementNotPossible                     NULL           OPTIONAL,",
          "4148:      nMRrSSIstdMeasurementNotPossible                  NULL           OPTIONAL,",
          "4149:      nMRbSTxPowerMeasurementNotPossible                NULL           OPTIONAL,",
          "4150:      nMRcINRMeasurementNotPossible                     NULL           OPTIONAL,",
          "4151:      nMRcINRstdMeasurementNotPossible                  NULL           OPTIONAL,",
          "4152:      nMRbSLocationNotAvailable                         NULL           OPTIONAL,",
          "4153:      non-servingMeasurementsNotAvailable               NULL           OPTIONAL,",
          "4154:      historicMeasurementsNotAvailable                  NULL           OPTIONAL,",
          "4155:      ...",
          "4156: }",
          "4159: OMA-LPPe-Sensor-ProvideAssistanceData ::= SEQUENCE {",
          "4160:      ...,",
          "4161:      atmosphericPressureAD         OMA-LPPe-AtmosphericPressureAD  OPTIONAL",
          "4162: }",
          "4165: OMA-LPPe-AtmosphericPressureAD ::= SEQUENCE {",
          "4166:      referencePressure                          INTEGER (-1024..1023),",
          "4167:      period          SEQUENCE {",
          "4168:                      pressureValidityPeriod                     OMA-LPPe-ValidityPeriod,",
          "4169:                      referencePressureRate                      INTEGER (-128..127)             OPTIONAL,",
          "4170:                      ...",
          "4171:                      }          OPTIONAL,",
          "4172:      area            SEQUENCE {",
          "4173:                      pressureValidityArea                       OMA-LPPe-PressureValidityArea,",
          "4174:                      gN-pressure                                INTEGER (-128..127)             OPTIONAL,",
          "4175:                      gE-pressure                                INTEGER (-128..127)             OPTIONAL,",
          "4176:                      ...",
          "4177:                      }          OPTIONAL,",
          "4178:      ...",
          "4179: }",
          "4181: OMA-LPPe-PressureValidityArea ::= SEQUENCE {",
          "4182:      centerPoint                Ellipsoid-Point, -- coordinates of the center of the rectangular validity area",
          "4183:      validityAreaWidth                     INTEGER (1..128), -- units in Kilometers",
          "4184:      validityAreaHeight                    INTEGER (1..128), -- units in Kilometers",
          "4185:      ...",
          "4186: }",
          "4190: OMA-LPPe-Sensor-RequestAssistanceData ::= SEQUENCE {",
          "4191:      ...,",
          "4192:      pressureSensorAD                                OMA-LPPe-PressureSensorAD           OPTIONAL",
          "4193: }",
          "4196: OMA-LPPe-PressureSensorAD ::= SEQUENCE {",
          "4197:      ...",
          "4198: }",
          "4201: OMA-LPPe-Sensor-ProvideLocationInformation ::= SEQUENCE {",
          "4202:      motionStateList                 OMA-LPPe-Sensor-MotionStateList                OPTIONAL,",
          "4203:      sensorError                     OMA-LPPe-Sensor-Error                          OPTIONAL,",
          "4204:      ...",
          "4205: }",
          "4209: OMA-LPPe-Sensor-MotionStateList ::= SEQUENCE (SIZE(1..8)) OF OMA-LPPe-Sensor-MotionStateElement",
          "4211: OMA-LPPe-Sensor-MotionStateElement ::= SEQUENCE {",
          "4212:      primaryMotionState              ENUMERATED{",
          "4213:                                           unknown,",
          "4214:                                           stationary,",
          "4215:                                           pedestrian,",
          "4216:                                           running,",
          "4217:                                           cycling,",
          "4218:                                           car,",
          "4219:                                           train,",
          "4220:                                           aeroplane,",
          "4221:                                           boat,",
          "4222:                                           fidgeting,",
          "4223:                                           ...",
          "4224:                                           },",
          "4225:      confidence                      INTEGER(0..99),",
          "4226:      secondaryMotionState            BIT STRING {",
          "4227:                                           stationary  (0),",
          "4228:                                           pedestrian  (1),",
          "4229:                                           running        (2),",
          "4230:                                           cycling        (3),",
          "4231:                                           car            (4),",
          "4232:                                           train          (5),",
          "4233:                                           aeroplane      (6),",
          "4234:                                           boat           (7),",
          "4235:                                           fidgeting      (8) } (SIZE(1..16)) OPTIONAL,",
          "4236:      ...",
          "4237: }",
          "4240: OMA-LPPe-Sensor-RequestLocationInformation ::= SEQUENCE {",
          "4241:      motionStateReq                  OMA-LPPe-Sensor-MotionStateRequest  OPTIONAL, --Cond MotionSateReq",
          "4242:      ...",
          "4243: }",
          "4246: OMA-LPPe-Sensor-MotionStateRequest ::= SEQUENCE {",
          "4247:      secondaryMotionStateRequest                NULL       OPTIONAL,",
          "4248:      ...",
          "4249: }",
          "4252: OMA-LPPe-Sensor-ProvideCapabilities ::= SEQUENCE {",
          "4253:      motionStateSupport                              NULL       OPTIONAL, --Cond MotionStateSupport",
          "4254:      secondarySupport                                NULL       OPTIONAL, --Cond SecondarySupport",
          "4255:      ...,",
          "4256:      barometricPressureSupport                       NULL       OPTIONAL  --Cond BarometricPressureSupport",
          "4257: }",
          "4260: OMA-LPPe-Sensor-RequestCapabilities ::= SEQUENCE {",
          "4261:      ...",
          "4262: }",
          "4266: OMA-LPPe-Sensor-Error ::= CHOICE {",
          "4267:      targetError                OMA-LPPe-Sensor-TargetError,",
          "4268:      ...",
          "4269: }",
          "4271: OMA-LPPe-Sensor-TargetError ::= SEQUENCE {",
          "4272:      motionStateError           ENUMERATED { primaryMotionStateNotAvailable,",
          "4273:                                                  primaryMotionStateNotSupported,",
          "4274:                                                  ... }  OPTIONAL,",
          "4275:      secondaryMotionStateError            ENUMERATED { secondaryMotionStateNotAvailable,",
          "4276:                                                            secondaryMotionStateNotSupported,",
          "4277:                                                  ... }  OPTIONAL,",
          "4278:      ...",
          "4279: }",
          "4282: OMA-LPPe-SRN-ProvideAssistanceData ::= SEQUENCE {",
          "4283:       srnGroup        CHOICE {",
          "4284:            srnGroupList                     OMA-LPPe-SRN-SRNgroupList,",
          "4285:            srnGroupUpdateResponse  OMA-LPPe-SRN-SRNgroupUpdateResponse,",
          "4286:            ...",
          "4287:            }                                                                       OPTIONAL,",
          "4288:       antennaPattern                   OMA-LPPe-SRN-AntennaPattern                 OPTIONAL,       --Cond AntennaPattReq",
          "4289:       srnError                         OMA-LPPe-SRN-Error                          OPTIONAL,",
          "4290:       ...",
          "4291: }",
          "4294: OMA-LPPe-SRN-SRNgroupList ::= SEQUENCE {",
          "4295:      incompleteFlag                  BOOLEAN,",
          "4296:      defaultReferencePoint           OMA-LPPe-ReferencePoint                               OPTIONAL, --Cond IfNoRefPoint",
          "4297:      groupList                       SEQUENCE (SIZE (1..64)) OF OMA-LPPe-SRN-SRNgroup,",
          "4298:      ...",
          "4299:      }",
          "4301: OMA-LPPe-SRN-SRNgroup ::= SEQUENCE {",
          "4302:      srnGroupID                                 OMA-LPPe-SRN-SRNgroupUniqueID                                        OPTIONAL,",
          "4303:      defaultSRNtype                             OMA-LPPe-SRN-SRNtype                                                 OPTIONAL,",
          "4304:      referencePoint                             OMA-LPPe-ReferencePoint                                              OPTIONAL,",
          "4305:      globalOrientation                          NULL                                                                 OPTIONAL,",
          "4306:      srnsInGroupList                            SEQUENCE (SIZE (1..1024)) OF OMA-LPPe-SRN-SRNinfo,",
          "4307:      ...",
          "4308: }",
          "4310: OMA-LPPe-SRN-SRNinfo ::= SEQUENCE {",
          "4311:      srnID                           OMA-LPPe-SRN-SRNid,",
          "4312:      srnType                         OMA-LPPe-SRN-SRNtype                            OPTIONAL,       --Cond NotDefaultType",
          "4313:      relativePosition                OMA-LPPe-RelativeLocation,",
          "4314:      orientation                     OMA-LPPe-Orientation                            OPTIONAL,",
          "4315:      ...",
          "4316: }",
          "4319: OMA-LPPe-SRN-SRNgroupUpdateResponse ::= SEQUENCE (SIZE (1..8)) OF",
          "4320:                                                                              OMA-LPPe-SRN-SRNgroupUpdateResponseElement",
          "4322: OMA-LPPe-SRN-SRNgroupUpdateResponseElement ::= SEQUENCE {",
          "4323:       srnGroupID                 OMA-LPPe-SRN-SRNgroupUniqueID                                                 OPTIONAL,",
          "4324:       targetDataValidity  ENUMERATED{ targetDataValid,",
          "4325:                                                   targetDataInValidAndUpdatedDataWillBeProvided,",
          "4326:                                                   targetDataInValidButServerWillNotProvideNewData,",
          "4327:                                                   ...},",
          "4328:       updatedSRNgroup            OMA-LPPe-SRN-SRNgroup OPTIONAL, --Cond InvalidAndNewDataAvailable",
          "4329:       ...",
          "4330: }",
          "4333: OMA-LPPe-SRN-AntennaPattern ::= SEQUENCE (SIZE (1..8)) OF OMA-LPPe-SRN-AntennaPatternElement",
          "4335: OMA-LPPe-SRN-AntennaPatternElement::= SEQUENCE {",
          "4336:      identification           SEQUENCE {",
          "4337:                                              vendorOrOperator               OMA-LPPe-VendorOrOperatorID,",
          "4338:                                              antennaPatternID               INTEGER(0..65535),",
          "4339:                                              ...",
          "4340:                                         },",
          "4341:      antennaData              CHOICE {",
          "4342:                                              antennaPattern           OMA-LPPe-SRN-AntennaPatternForChannels,",
          "4343:                                              antennaContainer         OCTET STRING,",
          "4344:                                              ...",
          "4345:                                         },",
          "4346:      ...",
          "4347: }",
          "4351: OMA-LPPe-SRN-AntennaPatternForChannels ::= SEQUENCE {",
          "4352:      evenGrid                 SEQUENCE {",
          "4353:                                              inAzimuth           INTEGER(1..200),",
          "4354:                                              inElevation         INTEGER(1..150)",
          "4355:                                         } OPTIONAL, --Cond EvenGrid",
          "4356:      patternList              SEQUENCE (SIZE (1..maxChannels)) OF OMA-LPPe-SRN-ChannelResponse,",
          "4357:      ...",
          "4358: }",
          "4360: OMA-LPPe-SRN-ChannelResponse ::= SEQUENCE {",
          "4361:      channelNumber                 INTEGER(1..maxChannels),",
          "4362:      responseInElevation           SEQUENCE (SIZE (7..901)) OF OMA-LPPe-SRN-ResponseInElevation,",
          "4363:      ...",
          "4364: }",
          "4366: OMA-LPPe-SRN-ResponseInElevation ::= SEQUENCE {",
          "4367:      elevation                INTEGER(0..900) OPTIONAL,          --Cond NotEven",
          "4368:      responseInAzimuth        SEQUENCE (SIZE (18..3601)) OF OMA-LPPe-SRN-ResponseInAzimuth,",
          "4369:      ...",
          "4370: }",
          "4372: OMA-LPPe-SRN-ResponseInAzimuth::= SEQUENCE {",
          "4373:      azimuth        INTEGER(0..3599)         OPTIONAL, --Cond NotEven",
          "4374:      response       OMA-LPPe-ComplexNumber,",
          "4375:      ...",
          "4376:      }",
          "4378: OMA-LPPe-ComplexNumber ::= SEQUENCE {",
          "4379:      amplitude      INTEGER(0..1000),",
          "4380:      phase          INTEGER(-1800..1799)",
          "4381: }",
          "4383: maxChannels INTEGER ::= 512",
          "4386: OMA-LPPe-SRN-RequestAssistanceData ::= SEQUENCE {",
          "4387:      srnGroup        CHOICE {",
          "4388:           srnGroupRequest                 OMA-LPPe-SRN-SRNgroupRequest,",
          "4389:           srnGroupUpdateRequest           OMA-LPPe-SRN-SRNgroupUpdateRequest,",
          "4390:           ...",
          "4391:      }    OPTIONAL,",
          "4392:      antennaPatternRequest           OMA-LPPe-SRN-AntennaPatternRequest                  OPTIONAL,",
          "4393:      ...",
          "4394: }",
          "4397: OMA-LPPe-SRN-SRNgroupRequest ::= SEQUENCE {",
          "4398:      doNotProvideList          OMA-LPPe-SRN-SRNProvideList                          OPTIONAL,",
          "4399:      doProvideList             OMA-LPPe-SRN-SRNProvideList                          OPTIONAL,",
          "4400:      ...",
          "4401: }",
          "4403: OMA-LPPe-SRN-SRNProvideList ::= SEQUENCE {",
          "4404:      groupList            SEQUENCE (SIZE (1..256)) OF OMA-LPPe-SRN-SRNgroupUniqueID                           OPTIONAL,",
          "4405:      categoryList         SEQUENCE (SIZE (1..16))  OF OMA-LPPe-SRN-Category                                   OPTIONAL,",
          "4406:      ...",
          "4407: }",
          "4410: OMA-LPPe-SRN-SRNgroupUpdateRequest ::= SEQUENCE (SIZE (1..64)) OF",
          "4411:                                                                     OMA-LPPe-SRN-SRNgroupUpdateRequestElement",
          "4413: OMA-LPPe-SRN-SRNgroupUpdateRequestElement ::= SEQUENCE {",
          "4414:      srnGroupID                      OMA-LPPe-SRN-SRNgroupUniqueID,",
          "4415:      provideIndicationOnly           NULL      OPTIONAL,",
          "4416:      inTheGroup                      SEQUENCE (SIZE (1..1024)) OF OMA-LPPe-SRN-SRNid                      OPTIONAL,",
          "4417:      ...",
          "4418: }",
          "4421: OMA-LPPe-SRN-AntennaPatternRequest ::= SEQUENCE (SIZE (1..8)) OF",
          "4422:                                                                      OMA-LPPe-SRN-AntennaPatternRequestElement",
          "4424: OMA-LPPe-SRN-AntennaPatternRequestElement ::= SEQUENCE {",
          "4425:      antennaPatternID           SEQUENCE {",
          "4426:                                                 vendorOrOperator               OMA-LPPe-VendorOrOperatorID,",
          "4427:                                                 antennaPatternID               INTEGER(0..65535),",
          "4428:                                                 ...",
          "4429:                                           },",
          "4430:      ...",
          "4431: }",
          "4434: OMA-LPPe-SRN-ProvideLocationInformation ::= SEQUENCE {",
          "4435:      srnMeasurementList              SEQUENCE (SIZE (1..64)) OF OMA-LPPe-SRN-MeasurementElement  OPTIONAL,",
          "4436:      srnError                        OMA-LPPe-SRN-Error                                                              OPTIONAL,",
          "4437:      ...",
          "4438: }",
          "4441: OMA-LPPe-SRN-MeasurementElement ::= SEQUENCE {",
          "4442:       srnID                      OMA-LPPe-SRN-SRNid,",
          "4443:       srnCategory                OMA-LPPe-SRN-Category                             OPTIONAL, --Cond IfKnown",
          "4444:       srnGroupID                 OMA-LPPe-SRN-SRNgroupUniqueID                     OPTIONAL, --Cond IfKnown",
          "4445:       measurementList            SEQUENCE (SIZE (1..64)) OF OMA-LPPe-SRN-srnMeasurementElement                            OPTIONAL,",
          "4446:       ...",
          "4447: }",
          "4449: OMA-LPPe-SRN-srnMeasurementElement ::= SEQUENCE {",
          "4450:       relativeTimeStamp          INTEGER(0..1000)                 OPTIONAL,        --Cond IfNotFirst",
          "4451:       rssi                       INTEGER(-128..127)               OPTIONAL,",
          "4452:       rtd                        OMA-LPPe-WLAN-RTD                OPTIONAL,",
          "4453:       ...",
          "4454: }",
          "4457: OMA-LPPe-SRN-RequestLocationInformation ::= SEQUENCE {",
          "4458:      requestInfo          SEQUENCE (SIZE (1..16)) OF OMA-LPPe-SRN-ReqLocInfo-Category,",
          "4459:      ...",
          "4460: }",
          "4462: OMA-LPPe-SRN-ReqLocInfo-Category ::= SEQUENCE {",
          "4463:      category                       OMA-LPPe-SRN-Category,",
          "4464:      multipleMeasurements           ENUMERATED{ forbidden(0),",
          "4465:                                                    allowed(1),",
          "4466:                                                    requested(2), ... }                           OPTIONAL,",
          "4467:      allowedMeasurements            OMA-LPPe-SRN-MeasurementMask                                 OPTIONAL,",
          "4468:      historicMeasurementsRequested            NULL                                               OPTIONAL,",
          "4469:      ...",
          "4470: }",
          "4473: OMA-LPPe-SRN-ProvideCapabilities ::= SEQUENCE {",
          "4474:      capabilitiesPerSRNCategory               SEQUENCE (SIZE (1..16)) OF",
          "4475:                                                              OMA-LPPe-SRN-ProvideCapabilitiesElement OPTIONAL,",
          "4476:      ...",
          "4477: }",
          "4479: OMA-LPPe-SRN-ProvideCapabilitiesElement::= SEQUENCE {",
          "4480:      srnCategory                              OMA-LPPe-SRN-Category,",
          "4481:      supportedMeasurements                    OMA-LPPe-SRN-MeasurementMask                                      OPTIONAL,",
          "4482:      supportedAssistanceData                  BIT STRING {",
          "4483:                                                    srnGroup (0),",
          "4484:                                                        antennaPattern (1) } (SIZE(1..16)),",
          "4485:      historicMeasurementsSupported               NULL       OPTIONAL,",
          "4486:      ...",
          "4487: }",
          "4490: OMA-LPPe-SRN-RequestCapabilities ::= SEQUENCE {",
          "4491:      capabilitiesRequestedFor               SEQUENCE (SIZE (1..16)) OF OMA-LPPe-SRN-Category                            OPTIONAL,",
          "4492:      ...",
          "4493: }",
          "4496: OMA-LPPe-SRN-Error ::= CHOICE {",
          "4497:      srnLocationServerErrorCauses              OMA-LPPe-SRN-LocationServerErrorCauses,",
          "4498:      srnTargetDeviceErrorCauses                OMA-LPPe-SRN-TargetDeviceErrorCauses,",
          "4499:      ...",
          "4500: }",
          "4503: OMA-LPPe-SRN-LocationServerErrorCauses ::= SEQUENCE {",
          "4504:      groupErrors               ENUMERATED{          undefined,",
          "4505:                                                     someGroupOrCategoryOrSRNidUnknownOrUnsupported,",
          "4506:                                                     allGroupAndCategoryOrSRNidUnknownOrUnsupported,",
          "4507:                                                     noSRNgroupsNearby,",
          "4508:                                                     ...}                                                                OPTIONAL,",
          "4509:      groupUpdateErrors         ENUMERATED {         undefined,",
          "4510:                                                     allSRNgroupIDsUnknown,",
          "4511:                                                     allSRNgroupIDsknownButSomeSRNgroupVersionsUnknown,",
          "4512:                                                     allSRNgroupIDsknownAndAllSRNgroupVersionsUnknown,",
          "4513:                                                     someSRNgroupIDsUnknown,",
          "4514:                                                     someSRNgroupVersionsUnknownAndAllSRNGroupVersionsUnknown,",
          "4515:                                                     someSRNgroupIDsAndSomeSRNgroupVersionsUnknown,",
          "4516:                                                     inTheGroupInformationDoesNotMatchWithGroupID,",
          "4517:                                                     ...}                                                                OPTIONAL,",
          "4518:      srnAntennaErrors          ENUMERATED {         undefined,",
          "4519:                                                     someAntennaPatternIDsUnknown,",
          "4520:                                                     allAntennaPatternIDsUnknown,",
          "4521:                                                     ... }                                                               OPTIONAL,",
          "4522:      ...",
          "4523: }",
          "4526: OMA-LPPe-SRN-TargetDeviceErrorCauses ::= SEQUENCE {",
          "4527:      srnErrorsPerCategory                 SEQUENCE (SIZE (1..16)) OF OMA-LPPe-SRN-TargetDeviceError,",
          "4528:      ...",
          "4529: }",
          "4531: OMA-LPPe-SRN-TargetDeviceError ::= SEQUENCE {",
          "4532:      category              OMA-LPPe-SRN-Category,",
          "4533:      srnErrors             ENUMERATED{ undefined,",
          "4534:                                            requestedMeasurementsNotAvailable,",
          "4535:                                            notAllrequestedMeasurementsPossible,",
          "4536:                                            categoryNotSupported,",
          "4537:                                             ...},",
          "4538:      rssiNotAvailable                                NULL       OPTIONAL,",
          "4539:      rtdNotAvailable                                 NULL       OPTIONAL,",
          "4540:      multipleSetsNotAvailable                        NULL       OPTIONAL,",
          "4541:      historicMeasurementsNotAvailable                NULL       OPTIONAL,",
          "4542:      ...",
          "4543: }",
          "4546: OMA-LPPe-SRN-SRNgroupUniqueID ::= SEQUENCE {",
          "4547:      providerID                 OMA-LPPe-VendorOrOperatorID,",
          "4548:      providerAssignedID  OCTET STRING,",
          "4549:      srnDataVersion             INTEGER (0..4294967295)                    OPTIONAL,",
          "4550:      ...",
          "4551: }",
          "4554: OMA-LPPe-SRN-SRNtype ::= SEQUENCE {",
          "4555:      srnCategory                      OMA-LPPe-SRN-Category,",
          "4556:      srnERP                           INTEGER(-300..500)                                                    OPTIONAL,",
          "4557:      srnAntennaInfo                   SEQUENCE {",
          "4558:                                                 antennaPatternID                 INTEGER(0..65535),",
          "4559:                                                 switchingPatternID               INTEGER(0..65535)                          OPTIONAL,",
          "4560:                                                 ...",
          "4561:                                                 }                                                           OPTIONAL,",
          "4562:      ...",
          "4563: }",
          "4566: OMA-LPPe-SRN-Category ::= SEQUENCE {",
          "4567:      srnTechnologyType                OMA-LPPe-SRN-Technologies,",
          "4568:      srnVendorInformation             SEQUENCE {",
          "4569:                                                 vendor                OMA-LPPe-VendorOrOperatorID,",
          "4570:                                                 vendorInfo            OCTET STRING                    OPTIONAL,",
          "4571:                                                 ...",
          "4572:                                                 }                                                     OPTIONAL,       --Cond other",
          "4573:      ...",
          "4574: }",
          "4577: OMA-LPPe-SRN-SRNid ::= SEQUENCE {",
          "4578:      srn-id          CHOICE {",
          "4579:                                     mac            BIT STRING(SIZE(48)),",
          "4580:                                     nfc            SEQUENCE {",
          "4581:                                                               manufacturer                   BIT STRING(SIZE(8)),",
          "4582:                                                               uniqueNumber                   BIT STRING(SIZE(48)),",
          "4583:                                                               ...",
          "4584:                                                               },",
          "4585:                                     mobileCode  SEQUENCE {",
          "4586:                                                               registryID                     BIT STRING(SIZE(12)),",
          "4587:                                                               remainingPart                  OCTET STRING(SIZE(1..16)),",
          "4588:                                                               resolutionIdentifier           OCTET STRING(SIZE(1..18)),",
          "4589:                                                               ...",
          "4590:                                                               },",
          "4591:                                     other          OCTET STRING,",
          "4592:                                     ...",
          "4593:                                },",
          "4594:      ...",
          "4595: }",
          "4598: OMA-LPPe-SRN-Technologies ::= SEQUENCE {",
          "4599:      srnTechnologies           ENUMERATED{ bt, btle, nfc, mobileCode, other, ... },",
          "4600:      ...",
          "4601: }",
          "4604: OMA-LPPe-SRN-MeasurementMask ::= SEQUENCE {",
          "4605:       srnMeasurements                  BIT STRING {           rssi(0),",
          "4606:                                                               rtd (1) } (SIZE(1..16)),",
          "4607:       ...",
          "4608: }",
          "4611: END",
          "",
          "---------------"
        ],
        "asn1/lppe/lppe.cnf||asn1/lppe/lppe.cnf": [
          "File: asn1/lppe/lppe.cnf -> asn1/lppe/lppe.cnf",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: # lppe.cnf",
          "2: # llpe conformation file",
          "5: #.OPT",
          "6: PER",
          "",
          "[Removed Lines]",
          "3: # Copyright 2012 Pascal Quantin",
          "",
          "[Added Lines]",
          "3: # Copyright 2012-2014 Pascal Quantin",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "13: OMA-LPPe-MessageExtension",
          "14: #.END",
          "16: #.FN_HDR OMA-LPPe-MessageExtension",
          "18:   proto_tree_add_item(tree, proto_lppe, tvb, 0, -1, ENC_NA);",
          "20:   col_append_sep_str(actx->pinfo->cinfo, COL_PROTOCOL, \"/\", \"LPPe\");",
          "21: #.END",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "16: #.OMIT_ASSIGNMENT",
          "17: OMA-LPPe-ver1-1-BroadcastContainer",
          "18: OMA-LPPe-ver1-1-BroadcastMessage",
          "19: OMA-LPPe-ver1-1-BroadcastControlIEs",
          "20: OMA-LPPe-ver1-1-CipheringIEs",
          "21: OMA-LPPe-ver1-1-DigitalSignature",
          "29: #.FN_BODY OMA-LPPe-Uri",
          "30:   offset = dissect_per_restricted_character_string(tvb, offset, actx, tree, hf_index,",
          "31:                                                       NO_BOUND, NO_BOUND, FALSE, \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789:/?#[]@!$&'()*+,;=-._~%%\", 85,",
          "32:                                                       NULL);",
          "",
          "---------------"
        ],
        "asn1/lppe/packet-lppe-template.c||asn1/lppe/packet-lppe-template.c": [
          "File: asn1/lppe/packet-lppe-template.c -> asn1/lppe/packet-lppe-template.c"
        ],
        "epan/dissectors/packet-lpp.c||epan/dissectors/packet-lpp.c": [
          "File: epan/dissectors/packet-lpp.c -> epan/dissectors/packet-lpp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2656: static int",
          "2657: dissect_lpp_EPDU_ID(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "2659:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "2660:                                                             1U, 256U, &lpp_epdu_id, FALSE);",
          "",
          "[Removed Lines]",
          "2658: #line 75 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "2658: #line 81 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2695: static int",
          "2696: dissect_lpp_EPDU_Body(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "2698:   tvbuff_t *lppe_tvb = NULL;",
          "2699:   offset = dissect_per_octet_string(tvb, offset, actx, tree, hf_index,",
          "2700:                                        NO_BOUND, NO_BOUND, FALSE, &lppe_tvb);",
          "",
          "[Removed Lines]",
          "2697: #line 81 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "2697: #line 87 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2841: static int",
          "2842: dissect_lpp_RequestCapabilities(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "2844:   col_append_sep_str(actx->pinfo->cinfo, COL_INFO, NULL, \"Request Capabilities\");",
          "",
          "[Removed Lines]",
          "2843: #line 51 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "2843: #line 57 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2901: static int",
          "2902: dissect_lpp_T_sbas_IDs(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "2904:   tvbuff_t *sbas_IDs_tvb = NULL;",
          "2905:   int len;",
          "",
          "[Removed Lines]",
          "2903: #line 1316 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "2903: #line 1322 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2949: static int",
          "2950: dissect_lpp_T_posModes(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "2952:   tvbuff_t *posModes_tvb = NULL;",
          "2953:   int len;",
          "",
          "[Removed Lines]",
          "2951: #line 238 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "2951: #line 244 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "3018: static int",
          "3019: dissect_lpp_T_accessTypes(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "3021:   tvbuff_t *accessTypes_tvb = NULL;",
          "3022:   int len;",
          "",
          "[Removed Lines]",
          "3020: #line 95 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "3020: #line 101 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "3112: static int",
          "3113: dissect_lpp_T_gnss_ids(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "3115:   tvbuff_t *gnss_ids_tvb = NULL;",
          "3116:   int len;",
          "",
          "[Removed Lines]",
          "3114: #line 1290 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "3114: #line 1296 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "3191: static int",
          "3192: dissect_lpp_T_ionoModel(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "3194:   tvbuff_t *ionoModel_tvb = NULL;",
          "3195:   int len;",
          "",
          "[Removed Lines]",
          "3193: #line 1169 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "3193: #line 1175 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "3323: static int",
          "3324: dissect_lpp_T_clockModel(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "3326:   tvbuff_t *clockModel_tvb = NULL;",
          "3327:   int len;",
          "",
          "[Removed Lines]",
          "3325: #line 1186 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "3325: #line 1192 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "3360: static int",
          "3361: dissect_lpp_T_orbitModel(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "3363:   tvbuff_t *orbitModel_tvb = NULL;",
          "3364:   int len;",
          "",
          "[Removed Lines]",
          "3362: #line 1212 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "3362: #line 1218 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "3483: static int",
          "3484: dissect_lpp_T_almanacModel(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "3486:   tvbuff_t *almanacModel_tvb = NULL;",
          "3487:   int len;",
          "",
          "[Removed Lines]",
          "3485: #line 1238 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "3485: #line 1244 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "3537: static int",
          "3538: dissect_lpp_T_utc_Model(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "3540:   tvbuff_t *utc_Model_tvb = NULL;",
          "3541:   int len;",
          "",
          "[Removed Lines]",
          "3539: #line 1267 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "3539: #line 1273 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "3705: static int",
          "3706: dissect_lpp_T_otdoa_Mode(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "3708:   tvbuff_t *otdoa_Mode_tvb = NULL;",
          "3709:   int len;",
          "",
          "[Removed Lines]",
          "3707: #line 337 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "3707: #line 343 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "3838: static int",
          "3839: dissect_lpp_T_ecid_MeasSupported(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "3841:   tvbuff_t *ecid_MeasSupported_tvb = NULL;",
          "3842:   int len;",
          "",
          "[Removed Lines]",
          "3840: #line 1368 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "3840: #line 1374 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "3965: static int",
          "3966: dissect_lpp_ProvideCapabilities(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "3968:   col_append_sep_str(actx->pinfo->cinfo, COL_INFO, NULL, \"Provide Capabilities\");",
          "",
          "[Removed Lines]",
          "3967: #line 54 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "3967: #line 60 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "4211:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "4212:                                                             0U, 4095U, NULL, FALSE);",
          "4215:   proto_item_append_text(actx->created_item, \" (days for glonass, weeks otherwise)\");",
          "",
          "[Removed Lines]",
          "4214: #line 1115 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "4214: #line 1121 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "4225:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "4226:                                                             0U, 255U, NULL, FALSE);",
          "4229:   proto_item_append_text(actx->created_item, \" (units of 15 mns for glonass, hours otherwise)\");",
          "",
          "[Removed Lines]",
          "4228: #line 1118 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "4228: #line 1124 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "4239:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "4240:                                                             0U, 15U, NULL, FALSE);",
          "4243:   proto_item_append_text(actx->created_item, \" (units of 30 mns for glonass, hours otherwise)\");",
          "",
          "[Removed Lines]",
          "4242: #line 1121 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "4242: #line 1127 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "4435:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "4436:                                                             0U, 3599U, NULL, FALSE);",
          "4439:   proto_item_append_text(actx->created_item, \" s\");",
          "",
          "[Removed Lines]",
          "4438: #line 1124 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "4438: #line 1130 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "4449:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "4450:                                                             0U, 999U, NULL, FALSE);",
          "4453:   proto_item_append_text(actx->created_item, \" ms\");",
          "",
          "[Removed Lines]",
          "4452: #line 1127 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "4452: #line 1133 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "4755: static int",
          "4756: dissect_lpp_RequestAssistanceData(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "4758:   col_append_sep_str(actx->pinfo->cinfo, COL_INFO, NULL, \"Request Assistance Data\");",
          "",
          "[Removed Lines]",
          "4757: #line 57 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "4757: #line 63 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "4812: static int",
          "4813: dissect_lpp_T_notificationOfLeapSecond(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "4815:   tvbuff_t *notificationOfLeapSecond_tvb = NULL;",
          "4816:   offset = dissect_per_bit_string(tvb, offset, actx, tree, -1,",
          "4817:                                      2, 2, FALSE, &notificationOfLeapSecond_tvb, NULL);",
          "",
          "[Removed Lines]",
          "4814: #line 357 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "4814: #line 363 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "4823:   if (notificationOfLeapSecond_tvb) {",
          "4824:     actx->created_item = proto_tree_add_uint(tree, hf_index, notificationOfLeapSecond_tvb, 0, 1, tvb_get_bits8(notificationOfLeapSecond_tvb, 0, 2));",
          "4825:   }",
          "",
          "[Removed Lines]",
          "4822: #line 361 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "4822: #line 367 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "5374:   { NULL, 0, 0, NULL }",
          "5375: };",
          "5378: dissect_lpp_GNSS_ReferenceTime(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "5379:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "5380:                                    ett_lpp_GNSS_ReferenceTime, GNSS_ReferenceTime_sequence);",
          "",
          "[Removed Lines]",
          "5377: static int",
          "",
          "[Added Lines]",
          "5377: int",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "5496: static int",
          "5497: dissect_lpp_T_dataID(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "5499:   tvbuff_t *dataID_tvb = NULL;",
          "5500:   offset = dissect_per_bit_string(tvb, offset, actx, tree, -1,",
          "5501:                                      2, 2, FALSE, &dataID_tvb, NULL);",
          "",
          "[Removed Lines]",
          "5498: #line 375 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "5498: #line 381 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "5507:   if (dataID_tvb) {",
          "5508:     actx->created_item = proto_tree_add_uint(tree, hf_index, dataID_tvb, 0, 1, tvb_get_bits8(dataID_tvb, 0, 2));",
          "5509:   }",
          "",
          "[Removed Lines]",
          "5506: #line 379 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "5506: #line 385 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "5714:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "5715:                                                             -128, 127U, NULL, FALSE);",
          "5718:   proto_item_append_text(actx->created_item, \" s\");",
          "",
          "[Removed Lines]",
          "5717: #line 456 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "5717: #line 462 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "5762:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "5763:                                                             0U, 3599U, NULL, FALSE);",
          "5766:   proto_item_append_text(actx->created_item, \" s\");",
          "",
          "[Removed Lines]",
          "5765: #line 459 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "5765: #line 465 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "6317: static int",
          "6318: dissect_lpp_T_cnavMo(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "6320:   gint64 cnavMo;",
          "6321:   int curr_offset = offset;",
          "6322:   offset = dissect_per_constrained_integer_64b(tvb, offset, actx, tree, hf_index,",
          "",
          "[Removed Lines]",
          "6319: #line 678 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "6319: #line 684 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "6329:   PROTO_ITEM_SET_HIDDEN(actx->created_item);",
          "6330:   actx->created_item = proto_tree_add_int64_format_value(tree, hf_index, tvb, curr_offset>>3, (offset+7-curr_offset)>>3,",
          "6331:                                                          cnavMo, \"%e semi-circles (%\"G_GINT64_MODIFIER\"d)\",",
          "",
          "[Removed Lines]",
          "6328: #line 683 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "6328: #line 689 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "6340: static int",
          "6341: dissect_lpp_T_cnavE(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "6343:   guint64 cnavE;",
          "6344:   int curr_offset = offset;",
          "6345:   offset = dissect_per_constrained_integer_64b(tvb, offset, actx, tree, hf_index,",
          "",
          "[Removed Lines]",
          "6342: #line 692 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "6342: #line 698 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "6352:   PROTO_ITEM_SET_HIDDEN(actx->created_item);",
          "6353:   actx->created_item = proto_tree_add_uint64_format_value(tree, hf_index, tvb, curr_offset>>3, (offset+7-curr_offset)>>3,",
          "6354:                                                           cnavE, \"%e (%\"G_GINT64_MODIFIER\"u)\",",
          "",
          "[Removed Lines]",
          "6351: #line 697 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "6351: #line 703 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "6363: static int",
          "6364: dissect_lpp_T_cnavOmega(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "6366:   gint64 cnavOmega;",
          "6367:   int curr_offset = offset;",
          "6368:   offset = dissect_per_constrained_integer_64b(tvb, offset, actx, tree, hf_index,",
          "",
          "[Removed Lines]",
          "6365: #line 706 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "6365: #line 712 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "6375:   PROTO_ITEM_SET_HIDDEN(actx->created_item);",
          "6376:   actx->created_item = proto_tree_add_int64_format_value(tree, hf_index, tvb, curr_offset>>3, (offset+7-curr_offset)>>3,",
          "6377:                                                          cnavOmega, \"%e semi-circles (%\"G_GINT64_MODIFIER\"d)\",",
          "",
          "[Removed Lines]",
          "6374: #line 711 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "6374: #line 717 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "6386: static int",
          "6387: dissect_lpp_T_cnavOMEGA0(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "6389:   gint64 cnavOMEGA0;",
          "6390:   int curr_offset = offset;",
          "6391:   offset = dissect_per_constrained_integer_64b(tvb, offset, actx, tree, hf_index,",
          "",
          "[Removed Lines]",
          "6388: #line 720 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "6388: #line 726 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "6398:   PROTO_ITEM_SET_HIDDEN(actx->created_item);",
          "6399:   actx->created_item = proto_tree_add_int64_format_value(tree, hf_index, tvb, curr_offset>>3, (offset+7-curr_offset)>>3,",
          "6400:                                                          cnavOMEGA0, \"%e semi-circles (%\"G_GINT64_MODIFIER\"d)\",",
          "",
          "[Removed Lines]",
          "6397: #line 725 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "6397: #line 731 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "6409: static int",
          "6410: dissect_lpp_T_cnavIo(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "6412:   gint64 cnavIo;",
          "6413:   int curr_offset = offset;",
          "6414:   offset = dissect_per_constrained_integer_64b(tvb, offset, actx, tree, hf_index,",
          "",
          "[Removed Lines]",
          "6411: #line 737 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "6411: #line 743 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "6421:   PROTO_ITEM_SET_HIDDEN(actx->created_item);",
          "6422:   actx->created_item = proto_tree_add_int64_format_value(tree, hf_index, tvb, curr_offset>>3, (offset+7-curr_offset)>>3,",
          "6423:                                                          cnavIo, \"%e semi-circles (%\"G_GINT64_MODIFIER\"d)\",",
          "",
          "[Removed Lines]",
          "6420: #line 742 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "6420: #line 748 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "6466:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "6467:                                                             0U, 31U, NULL, FALSE);",
          "6470:   proto_item_append_text(actx->created_item, \" days\");",
          "",
          "[Removed Lines]",
          "6469: #line 772 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "6469: #line 778 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "6478: static int",
          "6479: dissect_lpp_T_gloP1(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "6481:   tvbuff_t *gloP1_tvb = NULL;",
          "6482:   offset = dissect_per_bit_string(tvb, offset, actx, tree, -1,",
          "6483:                                      2, 2, FALSE, &gloP1_tvb, NULL);",
          "",
          "[Removed Lines]",
          "6480: #line 775 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "6480: #line 781 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "6489:   if (gloP1_tvb) {",
          "6490:     actx->created_item = proto_tree_add_uint(tree, hf_index, gloP1_tvb, 0, 1, tvb_get_bits8(gloP1_tvb, 0, 2));",
          "6491:     proto_item_append_text(actx->created_item, \" mn\");",
          "",
          "[Removed Lines]",
          "6488: #line 779 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "6488: #line 785 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "6690:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "6691:                                                             0U, 3599U, NULL, FALSE);",
          "6694:   proto_item_append_text(actx->created_item, \" s\");",
          "",
          "[Removed Lines]",
          "6693: #line 842 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "6693: #line 848 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "6704:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "6705:                                                             0U, 999U, NULL, FALSE);",
          "6708:   proto_item_append_text(actx->created_item, \" ms\");",
          "",
          "[Removed Lines]",
          "6707: #line 845 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "6707: #line 851 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "6822:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "6823:                                                             0U, 127U, NULL, FALSE);",
          "6826:   proto_item_append_text(actx->created_item, \" ms\");",
          "",
          "[Removed Lines]",
          "6825: #line 863 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "6825: #line 869 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "6893:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "6894:                                                             0U, 100U, NULL, FALSE);",
          "6897:   proto_item_append_text(actx->created_item, \" %%\");",
          "",
          "[Removed Lines]",
          "6896: #line 848 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "6896: #line 854 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "7047:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "7048:                                                             1U, 1461U, NULL, FALSE);",
          "7051:   proto_item_append_text(actx->created_item, \" days\");",
          "",
          "[Removed Lines]",
          "7050: #line 965 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "7050: #line 971 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "7222:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "7223:                                                             0U, 255U, NULL, FALSE);",
          "7226:   proto_item_append_text(actx->created_item, \" weeks\");",
          "",
          "[Removed Lines]",
          "7225: #line 1022 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "7225: #line 1028 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "7236:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "7237:                                                             -128, 127U, NULL, FALSE);",
          "7240:   proto_item_append_text(actx->created_item, \" s\");",
          "",
          "[Removed Lines]",
          "7239: #line 1025 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "7239: #line 1031 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 49 ---",
          "[Context before]",
          "7250:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "7251:                                                             0U, 255U, NULL, FALSE);",
          "7254:   proto_item_append_text(actx->created_item, \" weeks\");",
          "",
          "[Removed Lines]",
          "7253: #line 1028 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "7253: #line 1034 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 50 ---",
          "[Context before]",
          "7264:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "7265:                                                             -128, 127U, NULL, FALSE);",
          "7268:   proto_item_append_text(actx->created_item, \" days\");",
          "",
          "[Removed Lines]",
          "7267: #line 1031 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "7267: #line 1037 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 51 ---",
          "[Context before]",
          "7278:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "7279:                                                             -128, 127U, NULL, FALSE);",
          "7282:   proto_item_append_text(actx->created_item, \" s\");",
          "",
          "[Removed Lines]",
          "7281: #line 1034 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "7281: #line 1040 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 52 ---",
          "[Context before]",
          "7313:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "7314:                                                             -128, 127U, NULL, FALSE);",
          "7317:   proto_item_append_text(actx->created_item, \" s\");",
          "",
          "[Removed Lines]",
          "7316: #line 1046 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "7316: #line 1052 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 53 ---",
          "[Context before]",
          "7327:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "7328:                                                             0U, 8191U, NULL, FALSE);",
          "7331:   proto_item_append_text(actx->created_item, \" weeks\");",
          "",
          "[Removed Lines]",
          "7330: #line 1052 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "7330: #line 1058 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 54 ---",
          "[Context before]",
          "7341:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "7342:                                                             0U, 255U, NULL, FALSE);",
          "7345:   proto_item_append_text(actx->created_item, \" weeks\");",
          "",
          "[Removed Lines]",
          "7344: #line 1055 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "7344: #line 1061 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 55 ---",
          "[Context before]",
          "7355:   offset = dissect_per_bit_string(tvb, offset, actx, tree, hf_index,",
          "7356:                                      4, 4, FALSE, NULL, NULL);",
          "7359:   proto_item_append_text(actx->created_item, \" days\");",
          "",
          "[Removed Lines]",
          "7358: #line 1058 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "7358: #line 1064 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 56 ---",
          "[Context before]",
          "7369:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "7370:                                                             -128, 127U, NULL, FALSE);",
          "7373:   proto_item_append_text(actx->created_item, \" s\");",
          "",
          "[Removed Lines]",
          "7372: #line 1061 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "7372: #line 1067 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 57 ---",
          "[Context before]",
          "7405:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "7406:                                                             1U, 1461U, NULL, FALSE);",
          "7409:   proto_item_append_text(actx->created_item, \" days\");",
          "",
          "[Removed Lines]",
          "7408: #line 1064 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "7408: #line 1070 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 58 ---",
          "[Context before]",
          "7417: static int",
          "7418: dissect_lpp_T_kp(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "7420:   tvbuff_t *kp_tvb = NULL;",
          "7421:   offset = dissect_per_bit_string(tvb, offset, actx, tree, -1,",
          "7422:                                      2, 2, FALSE, &kp_tvb, NULL);",
          "",
          "[Removed Lines]",
          "7419: #line 1076 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "7419: #line 1082 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 59 ---",
          "[Context before]",
          "7428:   if (kp_tvb) {",
          "7429:     actx->created_item = proto_tree_add_uint(tree, hf_index, kp_tvb, 0, 1, tvb_get_bits8(kp_tvb, 0, 2));",
          "7430:   }",
          "",
          "[Removed Lines]",
          "7427: #line 1080 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "7427: #line 1086 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 60 ---",
          "[Context before]",
          "7458:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "7459:                                                             0U, 255U, NULL, FALSE);",
          "7462:   proto_item_append_text(actx->created_item, \" weeks\");",
          "",
          "[Removed Lines]",
          "7461: #line 1097 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "7461: #line 1103 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 61 ---",
          "[Context before]",
          "7472:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "7473:                                                             -128, 127U, NULL, FALSE);",
          "7476:   proto_item_append_text(actx->created_item, \" s\");",
          "",
          "[Removed Lines]",
          "7475: #line 1100 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "7475: #line 1106 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 62 ---",
          "[Context before]",
          "7486:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "7487:                                                             0U, 255U, NULL, FALSE);",
          "7490:   proto_item_append_text(actx->created_item, \" weeks\");",
          "",
          "[Removed Lines]",
          "7489: #line 1103 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "7489: #line 1109 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 63 ---",
          "[Context before]",
          "7500:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "7501:                                                             -128, 127U, NULL, FALSE);",
          "7504:   proto_item_append_text(actx->created_item, \" days\");",
          "",
          "[Removed Lines]",
          "7503: #line 1106 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "7503: #line 1112 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 64 ---",
          "[Context before]",
          "7514:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "7515:                                                             -128, 127U, NULL, FALSE);",
          "7518:   proto_item_append_text(actx->created_item, \" s\");",
          "",
          "[Removed Lines]",
          "7517: #line 1109 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "7517: #line 1115 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 65 ---",
          "[Context before]",
          "8255: static int",
          "8256: dissect_lpp_ProvideAssistanceData(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "8258:   col_append_sep_str(actx->pinfo->cinfo, COL_INFO, NULL, \"Provide Assistance Data\");",
          "",
          "[Removed Lines]",
          "8257: #line 60 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "8257: #line 66 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 66 ---",
          "[Context before]",
          "8287: static int",
          "8288: dissect_lpp_ReportingDuration(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "8290:   guint32 duration;",
          "8292:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "",
          "[Removed Lines]",
          "8289: #line 268 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "8289: #line 274 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 67 ---",
          "[Context before]",
          "8358: static int",
          "8359: dissect_lpp_T_reportingInterval(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "8361:   guint32 idx;",
          "8362:   const gchar *interval[10] = {\"\", \": 1 s\", \": 2 s\", \": 4 s\", \": 8 s\", \": 10 s\",",
          "8363:                                \": 16 s\", \": 20 s\", \": 32 s\", \": 64 s\"};",
          "",
          "[Removed Lines]",
          "8360: #line 258 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "8360: #line 264 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 68 ---",
          "[Context before]",
          "8372:   proto_item_append_text(actx->created_item, \"%s\", interval[idx]);",
          "",
          "[Removed Lines]",
          "8371: #line 265 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "8371: #line 271 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 69 ---",
          "[Context before]",
          "8443:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "8444:                                                             1U, 128U, NULL, FALSE);",
          "8447:   proto_item_append_text(actx->created_item, \" s\");",
          "",
          "[Removed Lines]",
          "8446: #line 289 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "8446: #line 295 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 70 ---",
          "[Context before]",
          "8571: static int",
          "8572: dissect_lpp_T_requestedMeasurements(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "8574:   tvbuff_t *requestedMeasurements_tvb = NULL;",
          "8575:   int len;",
          "",
          "[Removed Lines]",
          "8573: #line 1348 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "8573: #line 1354 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 71 ---",
          "[Context before]",
          "8699: static int",
          "8700: dissect_lpp_RequestLocationInformation(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "8702:   col_append_sep_str(actx->pinfo->cinfo, COL_INFO, NULL, \"Request Location Information\");",
          "",
          "[Removed Lines]",
          "8701: #line 63 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "8701: #line 69 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 72 ---",
          "[Context before]",
          "8765:   { NULL, 0, 0, NULL }",
          "8766: };",
          "8769: dissect_lpp_Ellipsoid_PointWithUncertaintyCircle(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "8770:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "8771:                                    ett_lpp_Ellipsoid_PointWithUncertaintyCircle, Ellipsoid_PointWithUncertaintyCircle_sequence);",
          "",
          "[Removed Lines]",
          "8768: static int",
          "",
          "[Added Lines]",
          "8768: int",
          "",
          "---------------",
          "--- Hunk 73 ---",
          "[Context before]",
          "8801:   { NULL, 0, 0, NULL }",
          "8802: };",
          "8805: dissect_lpp_EllipsoidPointWithUncertaintyEllipse(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "8806:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "8807:                                    ett_lpp_EllipsoidPointWithUncertaintyEllipse, EllipsoidPointWithUncertaintyEllipse_sequence);",
          "",
          "[Removed Lines]",
          "8804: static int",
          "",
          "[Added Lines]",
          "8804: int",
          "",
          "---------------",
          "--- Hunk 74 ---",
          "[Context before]",
          "8846:   { &hf_lpp_Polygon_item    , ASN1_NO_EXTENSIONS     , ASN1_NOT_OPTIONAL, dissect_lpp_PolygonPoints },",
          "8847: };",
          "8850: dissect_lpp_Polygon(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "8851:   offset = dissect_per_constrained_sequence_of(tvb, offset, actx, tree, hf_index,",
          "8852:                                                   ett_lpp_Polygon, Polygon_sequence_of,",
          "",
          "[Removed Lines]",
          "8849: static int",
          "",
          "[Added Lines]",
          "8849: int",
          "",
          "---------------",
          "--- Hunk 75 ---",
          "[Context before]",
          "8934:   { NULL, 0, 0, NULL }",
          "8935: };",
          "8938: dissect_lpp_EllipsoidArc(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "8939:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "8940:                                    ett_lpp_EllipsoidArc, EllipsoidArc_sequence);",
          "",
          "[Removed Lines]",
          "8937: static int",
          "",
          "[Added Lines]",
          "8937: int",
          "",
          "---------------",
          "--- Hunk 76 ---",
          "[Context before]",
          "8981:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "8982:                                                             0U, 359U, NULL, FALSE);",
          "8985:   proto_item_append_text(actx->created_item, \" degrees\");",
          "",
          "[Removed Lines]",
          "8984: #line 202 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "8984: #line 208 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 77 ---",
          "[Context before]",
          "8995:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "8996:                                                             0U, 2047U, NULL, FALSE);",
          "8999:   proto_item_append_text(actx->created_item, \" km/h\");",
          "",
          "[Removed Lines]",
          "8998: #line 205 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "8998: #line 211 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 78 ---",
          "[Context before]",
          "9067:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "9068:                                                             0U, 359U, NULL, FALSE);",
          "9071:   proto_item_append_text(actx->created_item, \" degrees\");",
          "",
          "[Removed Lines]",
          "9070: #line 208 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "9070: #line 214 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 79 ---",
          "[Context before]",
          "9081:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "9082:                                                             0U, 2047U, NULL, FALSE);",
          "9085:   proto_item_append_text(actx->created_item, \" km/h\");",
          "",
          "[Removed Lines]",
          "9084: #line 211 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "9084: #line 217 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 80 ---",
          "[Context before]",
          "9095:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "9096:                                                             0U, 255U, NULL, FALSE);",
          "9099:   proto_item_append_text(actx->created_item, \" km/h\");",
          "",
          "[Removed Lines]",
          "9098: #line 214 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "9098: #line 220 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 81 ---",
          "[Context before]",
          "9125:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "9126:                                                             0U, 359U, NULL, FALSE);",
          "9129:   proto_item_append_text(actx->created_item, \" degrees\");",
          "",
          "[Removed Lines]",
          "9128: #line 217 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "9128: #line 223 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 82 ---",
          "[Context before]",
          "9139:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "9140:                                                             0U, 2047U, NULL, FALSE);",
          "9143:   proto_item_append_text(actx->created_item, \" km/h\");",
          "",
          "[Removed Lines]",
          "9142: #line 220 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "9142: #line 226 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 83 ---",
          "[Context before]",
          "9169:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "9170:                                                             0U, 255U, NULL, FALSE);",
          "9173:   proto_item_append_text(actx->created_item, \" km/h\");",
          "",
          "[Removed Lines]",
          "9172: #line 223 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "9172: #line 229 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 84 ---",
          "[Context before]",
          "9183:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "9184:                                                             0U, 255U, NULL, FALSE);",
          "9187:   proto_item_append_text(actx->created_item, \" km/h\");",
          "",
          "[Removed Lines]",
          "9186: #line 226 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "9186: #line 232 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 85 ---",
          "[Context before]",
          "9197:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "9198:                                                             0U, 255U, NULL, FALSE);",
          "9201:   proto_item_append_text(actx->created_item, \" km/h\");",
          "",
          "[Removed Lines]",
          "9200: #line 229 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "9200: #line 235 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 86 ---",
          "[Context before]",
          "9304:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "9305:                                                             0U, 3599999U, NULL, FALSE);",
          "9308:   proto_item_append_text(actx->created_item, \" ms\");",
          "",
          "[Removed Lines]",
          "9307: #line 1133 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "9307: #line 1139 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 87 ---",
          "[Context before]",
          "9435:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "9436:                                                             0U, 127U, NULL, FALSE);",
          "9439:   proto_item_append_text(actx->created_item, \" ms\");",
          "",
          "[Removed Lines]",
          "9438: #line 1142 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "9438: #line 1148 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 88 ---",
          "[Context before]",
          "9509:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "9510:                                                             0U, 127U, NULL, FALSE);",
          "9513:   proto_item_append_text(actx->created_item, \" ms\");",
          "",
          "[Removed Lines]",
          "9512: #line 1145 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "9512: #line 1151 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 89 ---",
          "[Context before]",
          "9523:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "9524:                                                             0U, 63U, NULL, FALSE);",
          "9527:   proto_item_append_text(actx->created_item, \" dB-Hz\");",
          "",
          "[Removed Lines]",
          "9526: #line 1148 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "9526: #line 1154 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 90 ---",
          "[Context before]",
          "9555:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "9556:                                                             0U, 127U, NULL, FALSE);",
          "9559:   proto_item_append_text(actx->created_item, \" ms\");",
          "",
          "[Removed Lines]",
          "9558: #line 1157 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "9558: #line 1163 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 91 ---",
          "[Context before]",
          "9718: static int",
          "9719: dissect_lpp_T_error_Resolution(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "9721:   tvbuff_t *error_Resolution_tvb = NULL;",
          "9722:   offset = dissect_per_bit_string(tvb, offset, actx, tree, -1,",
          "9723:                                      2, 2, FALSE, &error_Resolution_tvb, NULL);",
          "",
          "[Removed Lines]",
          "9720: #line 301 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "9720: #line 307 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 92 ---",
          "[Context before]",
          "9729:   if (error_Resolution_tvb) {",
          "9730:     actx->created_item = proto_tree_add_uint(tree, hf_index, error_Resolution_tvb, 0, 1, tvb_get_bits8(error_Resolution_tvb, 0, 2));",
          "9731:   }",
          "",
          "[Removed Lines]",
          "9728: #line 305 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "9728: #line 311 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 93 ---",
          "[Context before]",
          "9739: static int",
          "9740: dissect_lpp_T_error_Value(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "9742:   tvbuff_t *error_Value_tvb = NULL;",
          "9743:   offset = dissect_per_bit_string(tvb, offset, actx, tree, -1,",
          "9744:                                      5, 5, FALSE, &error_Value_tvb, NULL);",
          "",
          "[Removed Lines]",
          "9741: #line 313 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "9741: #line 319 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 94 ---",
          "[Context before]",
          "9750:   if (error_Value_tvb) {",
          "9751:     actx->created_item = proto_tree_add_uint(tree, hf_index, error_Value_tvb, 0, 1, tvb_get_bits8(error_Value_tvb, 0, 5));",
          "9752:   }",
          "",
          "[Removed Lines]",
          "9749: #line 317 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "9749: #line 323 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 95 ---",
          "[Context before]",
          "9760: static int",
          "9761: dissect_lpp_T_error_NumSamples(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "9763:   tvbuff_t *error_NumSamples_tvb = NULL;",
          "9764:   offset = dissect_per_bit_string(tvb, offset, actx, tree, -1,",
          "9765:                                      3, 3, FALSE, &error_NumSamples_tvb, NULL);",
          "",
          "[Removed Lines]",
          "9762: #line 325 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "9762: #line 331 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 96 ---",
          "[Context before]",
          "9771:   if (error_NumSamples_tvb) {",
          "9772:     actx->created_item = proto_tree_add_uint(tree, hf_index, error_NumSamples_tvb, 0, 1, tvb_get_bits8(error_NumSamples_tvb, 0, 3));",
          "9773:   }",
          "",
          "[Removed Lines]",
          "9770: #line 329 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "9770: #line 335 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 97 ---",
          "[Context before]",
          "10167: static int",
          "10168: dissect_lpp_ProvideLocationInformation(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "10170:   col_append_sep_str(actx->pinfo->cinfo, COL_INFO, NULL, \"Provide Location Information\");",
          "",
          "[Removed Lines]",
          "10169: #line 66 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "10169: #line 72 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 98 ---",
          "[Context before]",
          "10293: static int",
          "10294: dissect_lpp_Abort(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "10296:   col_append_sep_str(actx->pinfo->cinfo, COL_INFO, NULL, \"Abort\");",
          "",
          "[Removed Lines]",
          "10295: #line 69 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "10295: #line 75 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 99 ---",
          "[Context before]",
          "10379: static int",
          "10380: dissect_lpp_Error(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "10382:   col_append_sep_str(actx->pinfo->cinfo, COL_INFO, NULL, \"Error\");",
          "",
          "[Removed Lines]",
          "10381: #line 72 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "10381: #line 78 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 100 ---",
          "[Context before]",
          "10484:   { NULL, 0, 0, NULL }",
          "10485: };",
          "10488: dissect_lpp_LPP_Message(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "10489:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "10490:                                    ett_lpp_LPP_Message, LPP_Message_sequence);",
          "",
          "[Removed Lines]",
          "10487: static int",
          "",
          "[Added Lines]",
          "10487: int",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-lpp.h||epan/dissectors/packet-lpp.h": [
          "File: epan/dissectors/packet-lpp.h -> epan/dissectors/packet-lpp.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "40: #line 1 \"../../asn1/lpp/packet-lpp-exp.h\"",
          "41: int dissect_lpp_ARFCN_ValueEUTRA(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_);",
          "42: int dissect_lpp_ARFCN_ValueUTRA(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_);",
          "43: int dissect_lpp_CellGlobalIdEUTRA_AndUTRA(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_);",
          "44: int dissect_lpp_CellGlobalIdGERAN(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_);",
          "45: int dissect_lpp_Ellipsoid_Point(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_);",
          "46: int dissect_lpp_EllipsoidPointWithAltitude(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_);",
          "47: int dissect_lpp_EllipsoidPointWithAltitudeAndUncertaintyEllipsoid(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_);",
          "48: int dissect_lpp_OTDOA_ReferenceCellInfo(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_);",
          "49: int dissect_lpp_OTDOA_NeighbourCellInfoElement(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_);",
          "50: int dissect_lpp_GNSS_SystemTime(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_);",
          "51: int dissect_lpp_NetworkTime(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_);",
          "52: int dissect_lpp_GNSS_ID(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "41: int dissect_lpp_LPP_Message(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_);",
          "47: int dissect_lpp_Ellipsoid_PointWithUncertaintyCircle(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_);",
          "48: int dissect_lpp_EllipsoidPointWithUncertaintyEllipse(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_);",
          "51: int dissect_lpp_EllipsoidArc(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_);",
          "52: int dissect_lpp_Polygon(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_);",
          "55: int dissect_lpp_GNSS_ReferenceTime(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_);",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-lppe.c||epan/dissectors/packet-lppe.c": [
          "File: epan/dissectors/packet-lppe.c -> epan/dissectors/packet-lppe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1355: static int hf_lppe_OMA_LPPe_WLAN_AP_Type_List_ieee802_11b = -1;",
          "1356: static int hf_lppe_OMA_LPPe_WLAN_AP_Type_List_ieee802_11g = -1;",
          "1357: static int hf_lppe_OMA_LPPe_WLAN_AP_Type_List_ieee802_11n = -1;",
          "1358: static int hf_lppe_T_iP_Address_support_iPv4 = -1;",
          "1359: static int hf_lppe_T_iP_Address_support_iPv6 = -1;",
          "1360: static int hf_lppe_T_iP_Address_support_nat = -1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1501: static int hf_lppe_OMA_LPPe_WLAN_AP_Type_List_ieee802_11ac = -1;",
          "1502: static int hf_lppe_OMA_LPPe_WLAN_AP_Type_List_ieee802_11ad = -1;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1363: static int hf_lppe_T_relativeLocationReportingSupport_geo = -1;",
          "1364: static int hf_lppe_T_relativeLocationReportingSupport_civic = -1;",
          "1365: static int hf_lppe_T_relativeLocationReportingSupport_otherProviders = -1;",
          "1366: static int hf_lppe_T_ionoreq_klobucharModel = -1;",
          "1367: static int hf_lppe_T_ionoreq_ionoStormWarning = -1;",
          "1368: static int hf_lppe_T_troposphereModelReq_delay = -1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1511: static int hf_lppe_T_localCellInformation_Support_gnssTiming = -1;",
          "1512: static int hf_lppe_T_localCellInformation_Support_networkTiming = -1;",
          "1513: static int hf_lppe_T_localCellInformation_Support_coverage = -1;",
          "1514: static int hf_lppe_T_localCellInformation_Support_coordinates = -1;",
          "1515: static int hf_lppe_T_localCellInformation_Support_frequencyAccuracy = -1;",
          "1516: static int hf_lppe_T_modelsReq_altitude = -1;",
          "1517: static int hf_lppe_T_modelsReq_buildings = -1;",
          "1518: static int hf_lppe_T_localCellInformationReq_gnssTiming = -1;",
          "1519: static int hf_lppe_T_localCellInformationReq_networkTiming = -1;",
          "1520: static int hf_lppe_T_localCellInformationReq_coverage = -1;",
          "1521: static int hf_lppe_T_localCellInformationReq_coordinates = -1;",
          "1522: static int hf_lppe_T_localCellInformationReq_frequencyAccuracy = -1;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1527: static int hf_lppe_T_requestedMeasurements_03_apRepLoc = -1;",
          "1528: static int hf_lppe_T_requestedMeasurements_03_non_serving = -1;",
          "1529: static int hf_lppe_T_requestedMeasurements_03_historic = -1;",
          "1530: static int hf_lppe_T_wlan_ecid_MeasSupported_apSSID = -1;",
          "1531: static int hf_lppe_T_wlan_ecid_MeasSupported_apSN = -1;",
          "1532: static int hf_lppe_T_wlan_ecid_MeasSupported_apDevType = -1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1687: static int hf_lppe_T_requestedMeasurements_03_apTP = -1;",
          "1688: static int hf_lppe_T_requestedMeasurements_03_apAG = -1;",
          "1689: static int hf_lppe_T_requestedMeasurements_03_ueSN = -1;",
          "1690: static int hf_lppe_T_requestedMeasurements_03_ueRSSI = -1;",
          "1691: static int hf_lppe_T_additionalRequestedMeasurements_oc = -1;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1539: static int hf_lppe_T_wlan_ecid_MeasSupported_apRepLoc = -1;",
          "1540: static int hf_lppe_T_wlan_ecid_MeasSupported_non_serving = -1;",
          "1541: static int hf_lppe_T_wlan_ecid_MeasSupported_historic = -1;",
          "1542: static int hf_lppe_T_wlan_ap_ADSupported_aplist = -1;",
          "1543: static int hf_lppe_T_wlan_ap_ADSupported_aplocation = -1;",
          "1544: static int hf_lppe_T_wlan_ap_ADSupported_locationreliability = -1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1704: static int hf_lppe_T_wlan_ecid_MeasSupported_apTP = -1;",
          "1705: static int hf_lppe_T_wlan_ecid_MeasSupported_apAG = -1;",
          "1706: static int hf_lppe_T_wlan_ecid_MeasSupported_ueSN = -1;",
          "1707: static int hf_lppe_T_wlan_ecid_MeasSupported_ueRSSI = -1;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1546: static int hf_lppe_T_wlan_ap_ADSupported_antenna_gain = -1;",
          "1547: static int hf_lppe_T_wlan_ap_ADSupported_coveragearea = -1;",
          "1548: static int hf_lppe_T_wlan_ap_ADSupported_non_serving = -1;",
          "1549: static int hf_lppe_T_requestedMeasurements_04_rTD = -1;",
          "1550: static int hf_lppe_T_requestedMeasurements_04_rTDstd = -1;",
          "1551: static int hf_lppe_T_requestedMeasurements_04_nMR = -1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1715: static int hf_lppe_T_additional_wlan_ecid_MeasSupported_oc = -1;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1622: static gint ett_lppe_OMA_LPPe_CivicAddressElement = -1;",
          "1623: static gint ett_lppe_OMA_LPPe_Duration = -1;",
          "1624: static gint ett_lppe_OMA_LPPe_FixedAccessTypes = -1;",
          "1625: static gint ett_lppe_OMA_LPPe_HighAccuracy3Dposition = -1;",
          "1626: static gint ett_lppe_OMA_LPPe_HighAccuracy3Dvelocity = -1;",
          "1627: static gint ett_lppe_OMA_LPPe_LocationInformationContainerID = -1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1792: static gint ett_lppe_OMA_LPPe_ver1_1_GroundMorphologyModel = -1;",
          "1793: static gint ett_lppe_OMA_LPPe_ver1_1_AltitudeModel = -1;",
          "1794: static gint ett_lppe_SEQUENCE_SIZE_1_10000_OF_DeltaAltitudes = -1;",
          "1795: static gint ett_lppe_OMA_LPPe_ver1_1_BuildingsHeightModel = -1;",
          "1796: static gint ett_lppe_SEQUENCE_SIZE_1_10000_OF_DeltaHeight = -1;",
          "1797: static gint ett_lppe_DeltaAltitudes = -1;",
          "1798: static gint ett_lppe_DeltaHeight = -1;",
          "1799: static gint ett_lppe_OMA_LPPe_ver1_1_CellGlobalID = -1;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1654: static gint ett_lppe_OMA_LPPe_CivicRelativeAltitude = -1;",
          "1655: static gint ett_lppe_OMA_LPPe_CivicUncertaintyAndConfidence = -1;",
          "1656: static gint ett_lppe_OMA_LPPe_Session_ID = -1;",
          "1657: static gint ett_lppe_OMA_LPPe_ValidityArea = -1;",
          "1658: static gint ett_lppe_OMA_LPPe_RleList = -1;",
          "1659: static gint ett_lppe_OMA_LPPe_ValidityPeriod = -1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1832: static gint ett_lppe_OMA_LPPe_ver1_1_BroadcastSystemID = -1;",
          "1833: static gint ett_lppe_T_proprietarySystemID = -1;",
          "1834: static gint ett_lppe_OMA_LPPe_ver1_1_BroadcastADTypes = -1;",
          "1835: static gint ett_lppe_SEQUENCE_SIZE_1_maxLPPLabelSets_OF_OMA_LPPe_ver1_1_LabelSet = -1;",
          "1836: static gint ett_lppe_SEQUENCE_SIZE_1_maxLPPeLabelSets_OF_OMA_LPPe_ver1_1_LabelSet = -1;",
          "1837: static gint ett_lppe_OMA_LPPe_ver1_1_LabelSet = -1;",
          "1838: static gint ett_lppe_T_level1_element = -1;",
          "1839: static gint ett_lppe_T_level2_element = -1;",
          "1840: static gint ett_lppe_T_level3_element = -1;",
          "1841: static gint ett_lppe_OMA_LPPe_ver1_1_AccessNetworkID = -1;",
          "1842: static gint ett_lppe_OMA_LPPe_ver1_1_MCC_MNC = -1;",
          "1843: static gint ett_lppe_T_mcc = -1;",
          "1844: static gint ett_lppe_T_mnc = -1;",
          "1845: static gint ett_lppe_OMA_LPPe_ver1_1_BSID = -1;",
          "1846: static gint ett_lppe_OMA_LPPe_ver1_1_AuthenticationSet = -1;",
          "1847: static gint ett_lppe_T_rsaPublicKey = -1;",
          "1848: static gint ett_lppe_OMA_LPPe_ver1_1_CipherSet = -1;",
          "1849: static gint ett_lppe_OMA_LPPe_ver1_1_ServerID = -1;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1680: static gint ett_lppe_OMA_LPPe_ScheduledLocation_RequestCapabilities = -1;",
          "1681: static gint ett_lppe_OMA_LPPe_AccessCapabilitiesReq = -1;",
          "1682: static gint ett_lppe_OMA_LPPe_SegmentedLocationInformation_ReqCapabilities = -1;",
          "1683: static gint ett_lppe_OMA_LPPe_CommonIEsProvideCapabilities = -1;",
          "1684: static gint ett_lppe_OMA_LPPe_IP_Address_Capabilities = -1;",
          "1685: static gint ett_lppe_T_iP_Address_support = -1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1876: static gint ett_lppe_OMA_LPPe_ver1_1_localCellInformation_ReqCapabilities = -1;",
          "1877: static gint ett_lppe_OMA_LPPe_ver1_1_broadcast_ReqCapabilities = -1;",
          "1878: static gint ett_lppe_SEQUENCE_SIZE_1_16_OF_OMA_LPPe_ver1_1_BroadcastSystemID = -1;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1700: static gint ett_lppe_OMA_LPPe_ScheduledLocation_Capabilities = -1;",
          "1701: static gint ett_lppe_OMA_LPPe_AccessCapabilities = -1;",
          "1702: static gint ett_lppe_OMA_LPPe_SegmentedLocationInformation_ProvideCapabs = -1;",
          "1703: static gint ett_lppe_OMA_LPPe_CommonIEsRequestAssistanceData = -1;",
          "1704: static gint ett_lppe_OMA_LPPe_RequestPeriodicADwithUpdate = -1;",
          "1705: static gint ett_lppe_OMA_LPPe_SegmentedADResume = -1;",
          "1706: static gint ett_lppe_OMA_LPPe_ReferencePointAssistanceReq = -1;",
          "1707: static gint ett_lppe_SEQUENCE_SIZE_1_16_OF_OMA_LPPe_ReferencePointAssistanceReqElement = -1;",
          "1708: static gint ett_lppe_OMA_LPPe_ReferencePointAssistanceReqElement = -1;",
          "1709: static gint ett_lppe_OMA_LPPe_CommonIEsProvideAssistanceData = -1;",
          "1710: static gint ett_lppe_OMA_LPPe_ProvidePeriodicADwithUpdate = -1;",
          "1711: static gint ett_lppe_OMA_LPPe_SegmentedADTransfer = -1;",
          "1712: static gint ett_lppe_OMA_LPPe_CommonIEsRequestLocationInformation = -1;",
          "1713: static gint ett_lppe_OMA_LPPe_IP_Address_Request = -1;",
          "1714: static gint ett_lppe_OMA_LPPe_RequestPeriodicLocInfoWithUpdate = -1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1899: static gint ett_lppe_OMA_LPPe_ver1_1_localCellInformation_ProvideCapabilities = -1;",
          "1900: static gint ett_lppe_T_localCellInformation_Support = -1;",
          "1901: static gint ett_lppe_OMA_LPPe_ver1_1_broadcast_ProvideCapabilities = -1;",
          "1902: static gint ett_lppe_OMA_LPPe_ver1_1_BroadcastSystem_Capabs = -1;",
          "1903: static gint ett_lppe_OMA_LPPe_ver1_1_point2pointAD = -1;",
          "1904: static gint ett_lppe_OMA_LPPe_ver1_1_Ciphering = -1;",
          "1905: static gint ett_lppe_OMA_LPPe_ver1_1_Authentication = -1;",
          "1912: static gint ett_lppe_OMA_LPPe_ver1_1_GroundMorphologyModelReq = -1;",
          "1913: static gint ett_lppe_T_modelsReq = -1;",
          "1914: static gint ett_lppe_T_refAreaParam = -1;",
          "1915: static gint ett_lppe_OMA_LPPe_ver1_1_LocalCellInformationReq = -1;",
          "1916: static gint ett_lppe_T_localCellInformationReq = -1;",
          "1917: static gint ett_lppe_OMA_LPPe_ver1_1_BroadcastAssistanceDataReq = -1;",
          "1918: static gint ett_lppe_OMA_LPPe_ver1_1_BroadcastSystem = -1;",
          "1919: static gint ett_lppe_SEQUENCE_SIZE_1_16_OF_OMA_LPPe_ver1_1_CipherSetID = -1;",
          "1920: static gint ett_lppe_SEQUENCE_SIZE_1_4_OF_OMA_LPPe_ver1_1_AuthenticationSetID = -1;",
          "1924: static gint ett_lppe_OMA_LPPe_ver1_1_LocalCellInformation = -1;",
          "1925: static gint ett_lppe_SEQUENCE_SIZE_1_maxCellSets_OF_GNSS_ReferenceTime = -1;",
          "1926: static gint ett_lppe_SEQUENCE_SIZE_1_maxCells_OF_OMA_LPPe_ver1_1_CellInformation = -1;",
          "1927: static gint ett_lppe_OMA_LPPe_ver1_1_CellInformation = -1;",
          "1928: static gint ett_lppe_T_coverage = -1;",
          "1929: static gint ett_lppe_OMA_LPPe_ver1_1_BroadcastAssistanceData = -1;",
          "1930: static gint ett_lppe_SEQUENCE_SIZE_1_16_OF_OMA_LPPe_ver1_1_AccessNetworkID = -1;",
          "1931: static gint ett_lppe_T_coverageArea = -1;",
          "1932: static gint ett_lppe_T_broadcastMode = -1;",
          "1933: static gint ett_lppe_OMA_LPPe_ver1_1_EncapsulatedMode = -1;",
          "1934: static gint ett_lppe_SEQUENCE_SIZE_1_16_OF_OMA_LPPe_ver1_1_CipherSet = -1;",
          "1935: static gint ett_lppe_SEQUENCE_SIZE_1_4_OF_OMA_LPPe_ver1_1_AuthenticationSet = -1;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1731: static gint ett_lppe_OMA_LPPe_AccessTypes = -1;",
          "1732: static gint ett_lppe_OMA_LPPe_SegmentedLITransfer = -1;",
          "1733: static gint ett_lppe_OMA_LPPe_TimeStamp = -1;",
          "1734: static gint ett_lppe_OMA_LPPe_CommonIEsAbort = -1;",
          "1735: static gint ett_lppe_OMA_LPPe_CommonIEsError = -1;",
          "1736: static gint ett_lppe_OMA_LPPe_AGNSS_ProvideAssistanceData = -1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1958: static gint ett_lppe_OMA_LPPe_LocationSource = -1;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1995: static gint ett_lppe_SEQUENCE_SIZE_1_maxLTENetworks_OF_OMA_LPPe_ECID_LTE_NetworkData = -1;",
          "1996: static gint ett_lppe_OMA_LPPe_ECID_LTE_NetworkData = -1;",
          "1997: static gint ett_lppe_T_plmn_Identity = -1;",
          "2000: static gint ett_lppe_SEQUENCE_SIZE_1_maxLTEeNBs_OF_OMA_LPPe_ECID_LTE_eNodeBData = -1;",
          "2001: static gint ett_lppe_SEQUENCE_SIZE_1_maxLTEHeNBs_OF_OMA_LPPe_ECID_LTE_HeNBData = -1;",
          "2002: static gint ett_lppe_OMA_LPPe_ECID_LTE_eNodeBData = -1;",
          "",
          "[Removed Lines]",
          "1998: static gint ett_lppe_T_mcc = -1;",
          "1999: static gint ett_lppe_T_mnc = -1;",
          "",
          "[Added Lines]",
          "2223: static gint ett_lppe_T_mcc_01 = -1;",
          "2224: static gint ett_lppe_T_mnc_01 = -1;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "2024: static gint ett_lppe_SEQUENCE_SIZE_1_maxGSMNetworks_OF_OMA_LPPe_ECID_GSM_NetworkData = -1;",
          "2025: static gint ett_lppe_OMA_LPPe_ECID_GSM_NetworkData = -1;",
          "2026: static gint ett_lppe_T_plmn_Identity_01 = -1;",
          "2029: static gint ett_lppe_SEQUENCE_SIZE_1_maxGSMBaseStations_OF_OMA_LPPe_ECID_GSM_BaseStationData = -1;",
          "2030: static gint ett_lppe_OMA_LPPe_ECID_GSM_BaseStationData = -1;",
          "2031: static gint ett_lppe_SEQUENCE_SIZE_1_maxGSMCells_OF_OMA_LPPe_ECID_GSM_CellData = -1;",
          "",
          "[Removed Lines]",
          "2027: static gint ett_lppe_T_mcc_01 = -1;",
          "2028: static gint ett_lppe_T_mnc_01 = -1;",
          "",
          "[Added Lines]",
          "2252: static gint ett_lppe_T_mcc_02 = -1;",
          "2253: static gint ett_lppe_T_mnc_02 = -1;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "2051: static gint ett_lppe_SEQUENCE_SIZE_1_maxUTRANetworks_OF_OMA_LPPe_ECID_UTRA_NetworkData = -1;",
          "2052: static gint ett_lppe_OMA_LPPe_ECID_UTRA_NetworkData = -1;",
          "2053: static gint ett_lppe_T_plmn_Identity_02 = -1;",
          "2056: static gint ett_lppe_SEQUENCE_SIZE_1_maxUTRAnodeBs_OF_OMA_LPPe_ECID_UTRA_NodeBData = -1;",
          "2057: static gint ett_lppe_SEQUENCE_SIZE_1_maxUTRAHNBs_OF_OMA_LPPe_ECID_UTRA_HNBData = -1;",
          "2058: static gint ett_lppe_OMA_LPPe_ECID_UTRA_NodeBData = -1;",
          "",
          "[Removed Lines]",
          "2054: static gint ett_lppe_T_mcc_02 = -1;",
          "2055: static gint ett_lppe_T_mnc_02 = -1;",
          "",
          "[Added Lines]",
          "2279: static gint ett_lppe_T_mcc_03 = -1;",
          "2280: static gint ett_lppe_T_mnc_03 = -1;",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "2095: static gint ett_lppe_SEQUENCE_SIZE_1_maxWLANDataSets_OF_OMA_LPPe_WLAN_DataSet = -1;",
          "2096: static gint ett_lppe_OMA_LPPe_WLAN_DataSet = -1;",
          "2097: static gint ett_lppe_T_plmn_Identity_03 = -1;",
          "2100: static gint ett_lppe_SEQUENCE_SIZE_1_maxWLANAPs_OF_OMA_LPPe_WLAN_AP_Data = -1;",
          "2101: static gint ett_lppe_Supported_Channels_11a = -1;",
          "2102: static gint ett_lppe_Supported_Channels_11bg = -1;",
          "",
          "[Removed Lines]",
          "2098: static gint ett_lppe_T_mcc_03 = -1;",
          "2099: static gint ett_lppe_T_mnc_03 = -1;",
          "",
          "[Added Lines]",
          "2323: static gint ett_lppe_T_mcc_04 = -1;",
          "2324: static gint ett_lppe_T_mnc_04 = -1;",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "2114: static gint ett_lppe_OMA_LPPe_WLAN_LocationDataLCI = -1;",
          "2115: static gint ett_lppe_OMA_LPPe_WLAN_AP_RequestLocationInformation = -1;",
          "2116: static gint ett_lppe_T_requestedMeasurements_03 = -1;",
          "2117: static gint ett_lppe_OMA_LPPe_WLAN_AP_ProvideCapabilities = -1;",
          "2118: static gint ett_lppe_T_wlan_ecid_MeasSupported = -1;",
          "2119: static gint ett_lppe_T_wlan_ap_ADSupported = -1;",
          "2120: static gint ett_lppe_OMA_LPPe_WLAN_AP_Capability = -1;",
          "2121: static gint ett_lppe_OMA_LPPe_WLAN_AP_RequestCapabilities = -1;",
          "2122: static gint ett_lppe_OMA_LPPe_WLAN_AP_Error = -1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2342: static gint ett_lppe_T_additionalRequestedMeasurements = -1;",
          "2346: static gint ett_lppe_T_additional_wlan_ecid_MeasSupported = -1;",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "2139: static gint ett_lppe_OMA_LPPe_ECID_WiMax_LocationServerErrorCauses = -1;",
          "2140: static gint ett_lppe_OMA_LPPe_ECID_WiMax_TargetDeviceErrorCauses = -1;",
          "2141: static gint ett_lppe_OMA_LPPe_Sensor_ProvideAssistanceData = -1;",
          "2142: static gint ett_lppe_OMA_LPPe_Sensor_RequestAssistanceData = -1;",
          "2143: static gint ett_lppe_OMA_LPPe_Sensor_ProvideLocationInformation = -1;",
          "2144: static gint ett_lppe_OMA_LPPe_Sensor_MotionStateList = -1;",
          "2145: static gint ett_lppe_OMA_LPPe_Sensor_MotionStateElement = -1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2369: static gint ett_lppe_OMA_LPPe_AtmosphericPressureAD = -1;",
          "2370: static gint ett_lppe_T_period = -1;",
          "2371: static gint ett_lppe_T_area = -1;",
          "2372: static gint ett_lppe_OMA_LPPe_PressureValidityArea = -1;",
          "2374: static gint ett_lppe_OMA_LPPe_PressureSensorAD = -1;",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "2224: #line 1 \"../../asn1/lppe/packet-lppe-val.h\"",
          "2225: #define maxAssistanceContainerList     16",
          "2226: #define maxLocationInformationContainerDataList 10",
          "2227: #define maxVendorOrOperatorIDList      32",
          "2228: #define maxLocationInformationContainerList 64",
          "2229: #define maxIPAddress                   5",
          "2230: #define maxRelativeLocation            5",
          "2231: #define maxReferenceStations           8",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2459: #define maxLevel1_element              32",
          "2460: #define maxLevel2_element              32",
          "2461: #define maxLevel3_element              32",
          "2462: #define maxFinal_element               32",
          "2463: #define maxLPPLabelSets                64",
          "2464: #define maxLPPeLabelSets               128",
          "2467: #define maxCellSets                    8",
          "2468: #define maxCells                       128",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "2542: }",
          "2545: static const per_sequence_t OMA_LPPe_CommonIEsRequestCapabilities_sequence[] = {",
          "2546:   { &hf_lppe_iP_Address_RequestCapabilities, ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lppe_OMA_LPPe_IP_Address_RequestCapabilities },",
          "2547:   { &hf_lppe_assistanceContainerSupportReq, ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lppe_OMA_LPPe_AssistanceContainerSupportReq },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2785: static const per_sequence_t OMA_LPPe_ver1_1_localCellInformation_ReqCapabilities_sequence[] = {",
          "2786:   { NULL, ASN1_EXTENSION_ROOT, 0, NULL }",
          "2787: };",
          "2789: static int",
          "2790: dissect_lppe_OMA_LPPe_ver1_1_localCellInformation_ReqCapabilities(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "2791:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "2792:                                    ett_lppe_OMA_LPPe_ver1_1_localCellInformation_ReqCapabilities, OMA_LPPe_ver1_1_localCellInformation_ReqCapabilities_sequence);",
          "2794:   return offset;",
          "2795: }",
          "2799: static int",
          "2800: dissect_lppe_INTEGER_1_16(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "2801:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "2802:                                                             1U, 16U, NULL, FALSE);",
          "2804:   return offset;",
          "2805: }",
          "2808: static const per_sequence_t T_proprietarySystemID_sequence[] = {",
          "2809:   { &hf_lppe_vendorOrOperator, ASN1_NO_EXTENSIONS     , ASN1_NOT_OPTIONAL, dissect_lppe_OMA_LPPe_VendorOrOperatorID },",
          "2810:   { &hf_lppe_proprietarySystemID_01, ASN1_NO_EXTENSIONS     , ASN1_NOT_OPTIONAL, dissect_lppe_INTEGER_1_16 },",
          "2811:   { NULL, 0, 0, NULL }",
          "2812: };",
          "2814: static int",
          "2815: dissect_lppe_T_proprietarySystemID(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "2816:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "2817:                                    ett_lppe_T_proprietarySystemID, T_proprietarySystemID_sequence);",
          "2819:   return offset;",
          "2820: }",
          "2823: static const value_string lppe_OMA_LPPe_ver1_1_BroadcastSystemID_vals[] = {",
          "2824:   {   0, \"standardSystemID\" },",
          "2825:   {   1, \"proprietarySystemID\" },",
          "2826:   { 0, NULL }",
          "2827: };",
          "2829: static const per_choice_t OMA_LPPe_ver1_1_BroadcastSystemID_choice[] = {",
          "2830:   {   0, &hf_lppe_standardSystemID, ASN1_EXTENSION_ROOT    , dissect_lppe_INTEGER_1_16 },",
          "2831:   {   1, &hf_lppe_proprietarySystemID, ASN1_EXTENSION_ROOT    , dissect_lppe_T_proprietarySystemID },",
          "2832:   { 0, NULL, 0, NULL }",
          "2833: };",
          "2835: static int",
          "2836: dissect_lppe_OMA_LPPe_ver1_1_BroadcastSystemID(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "2837:   offset = dissect_per_choice(tvb, offset, actx, tree, hf_index,",
          "2838:                                  ett_lppe_OMA_LPPe_ver1_1_BroadcastSystemID, OMA_LPPe_ver1_1_BroadcastSystemID_choice,",
          "2839:                                  NULL);",
          "2841:   return offset;",
          "2842: }",
          "2845: static const per_sequence_t SEQUENCE_SIZE_1_16_OF_OMA_LPPe_ver1_1_BroadcastSystemID_sequence_of[1] = {",
          "2846:   { &hf_lppe_broadcastSystems_item, ASN1_NO_EXTENSIONS     , ASN1_NOT_OPTIONAL, dissect_lppe_OMA_LPPe_ver1_1_BroadcastSystemID },",
          "2847: };",
          "2849: static int",
          "2850: dissect_lppe_SEQUENCE_SIZE_1_16_OF_OMA_LPPe_ver1_1_BroadcastSystemID(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "2851:   offset = dissect_per_constrained_sequence_of(tvb, offset, actx, tree, hf_index,",
          "2852:                                                   ett_lppe_SEQUENCE_SIZE_1_16_OF_OMA_LPPe_ver1_1_BroadcastSystemID, SEQUENCE_SIZE_1_16_OF_OMA_LPPe_ver1_1_BroadcastSystemID_sequence_of,",
          "2853:                                                   1, 16, FALSE);",
          "2855:   return offset;",
          "2856: }",
          "2859: static const per_sequence_t OMA_LPPe_ver1_1_broadcast_ReqCapabilities_sequence[] = {",
          "2860:   { &hf_lppe_broadcastSystems, ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lppe_SEQUENCE_SIZE_1_16_OF_OMA_LPPe_ver1_1_BroadcastSystemID },",
          "2861:   { NULL, 0, 0, NULL }",
          "2862: };",
          "2864: static int",
          "2865: dissect_lppe_OMA_LPPe_ver1_1_broadcast_ReqCapabilities(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "2866:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "2867:                                    ett_lppe_OMA_LPPe_ver1_1_broadcast_ReqCapabilities, OMA_LPPe_ver1_1_broadcast_ReqCapabilities_sequence);",
          "2869:   return offset;",
          "2870: }",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "2553:   { &hf_lppe_scheduledLocation_RequestCapabilities, ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lppe_OMA_LPPe_ScheduledLocation_RequestCapabilities },",
          "2554:   { &hf_lppe_accessCapabilitiesReq, ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lppe_OMA_LPPe_AccessCapabilitiesReq },",
          "2555:   { &hf_lppe_segmentedLocationInformation_ReqCapabilities, ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lppe_OMA_LPPe_SegmentedLocationInformation_ReqCapabilities },",
          "2556:   { NULL, 0, 0, NULL }",
          "2557: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2884:   { &hf_lppe_ver1_1_localCellInformation_ReqCapabilities, ASN1_NOT_EXTENSION_ROOT, ASN1_OPTIONAL    , dissect_lppe_OMA_LPPe_ver1_1_localCellInformation_ReqCapabilities },",
          "2885:   { &hf_lppe_ver1_1_broadcast_ReqCapabilities, ASN1_NOT_EXTENSION_ROOT, ASN1_OPTIONAL    , dissect_lppe_OMA_LPPe_ver1_1_broadcast_ReqCapabilities },",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "3195: }",
          "3209:   { NULL, 0, 0, NULL }",
          "3210: };",
          "3212: static int",
          "3214:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "3217:   return offset;",
          "3218: }",
          "",
          "[Removed Lines]",
          "3198: static const per_sequence_t OMA_LPPe_CommonIEsProvideCapabilities_sequence[] = {",
          "3199:   { &hf_lppe_iP_Address_Capabilities, ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lppe_OMA_LPPe_IP_Address_Capabilities },",
          "3200:   { &hf_lppe_assistanceContainerSupport, ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lppe_OMA_LPPe_AssistanceContainerSupport },",
          "3201:   { &hf_lppe_locationInformationContainerSupport, ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lppe_OMA_LPPe_LocationInformationContainerSupport },",
          "3202:   { &hf_lppe_relativeLocationChange_Capabilities, ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lppe_OMA_LPPe_RelativeLocationChange_Capabilities },",
          "3203:   { &hf_lppe_highAccuracyFormatCapabilities, ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lppe_OMA_LPPe_HighAccuracyFormatCapabilities },",
          "3204:   { &hf_lppe_segmentedAssistanceData_ProvideCapabs, ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lppe_OMA_LPPe_SegmentedAssistanceData_ProvideCapabs },",
          "3205:   { &hf_lppe_referencePointCapabilities, ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lppe_OMA_LPPe_ReferencePointCapabilities },",
          "3206:   { &hf_lppe_scheduledLocation_Capabilities, ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lppe_OMA_LPPe_ScheduledLocation_Capabilities },",
          "3207:   { &hf_lppe_accessCapabilities, ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lppe_OMA_LPPe_AccessCapabilities },",
          "3208:   { &hf_lppe_segmentedLocationInformation_ProvideCapabs, ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lppe_OMA_LPPe_SegmentedLocationInformation_ProvideCapabs },",
          "3213: dissect_lppe_OMA_LPPe_CommonIEsProvideCapabilities(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "3215:                                    ett_lppe_OMA_LPPe_CommonIEsProvideCapabilities, OMA_LPPe_CommonIEsProvideCapabilities_sequence);",
          "",
          "[Added Lines]",
          "3529: static int",
          "3530: dissect_lppe_T_localCellInformation_Support(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "3531:   offset = dissect_per_bit_string(tvb, offset, actx, tree, hf_index,",
          "3532:                                      1, 16, FALSE, NULL, NULL);",
          "3534:   return offset;",
          "3535: }",
          "3538: static const per_sequence_t OMA_LPPe_ver1_1_localCellInformation_ProvideCapabilities_sequence[] = {",
          "3539:   { &hf_lppe_localCellInformation_Support, ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lppe_T_localCellInformation_Support },",
          "3544: dissect_lppe_OMA_LPPe_ver1_1_localCellInformation_ProvideCapabilities(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "3546:                                    ett_lppe_OMA_LPPe_ver1_1_localCellInformation_ProvideCapabilities, OMA_LPPe_ver1_1_localCellInformation_ProvideCapabilities_sequence);",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "3222: static int",
          "3227:   return offset;",
          "3228: }",
          "3236: static int",
          "3241:   return offset;",
          "3242: }",
          "",
          "[Removed Lines]",
          "3223: dissect_lppe_T_ionoModel(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "3224:   offset = dissect_per_bit_string(tvb, offset, actx, tree, hf_index,",
          "3225:                                      1, 8, FALSE, NULL, NULL);",
          "3231: static const per_sequence_t OMA_LPPe_AGNSS_IonosphericModelSupport_sequence[] = {",
          "3232:   { &hf_lppe_ionoModel      , ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lppe_T_ionoModel },",
          "3233:   { NULL, 0, 0, NULL }",
          "3234: };",
          "3237: dissect_lppe_OMA_LPPe_AGNSS_IonosphericModelSupport(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "3238:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "3239:                                    ett_lppe_OMA_LPPe_AGNSS_IonosphericModelSupport, OMA_LPPe_AGNSS_IonosphericModelSupport_sequence);",
          "",
          "[Added Lines]",
          "3554: dissect_lppe_INTEGER_1_maxLevel1_element(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "3555:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "3556:                                                             1U, maxLevel1_element, NULL, FALSE);",
          "3564: dissect_lppe_INTEGER_1_maxLevel2_element(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "3565:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "3566:                                                             1U, maxLevel2_element, NULL, FALSE);",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "3246: static int",
          "3251:   return offset;",
          "3252: }",
          "3256: static int",
          "3260:   return offset;",
          "3261: }",
          "3267:   { NULL, 0, 0, NULL }",
          "3268: };",
          "3270: static int",
          "3272:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "3275:   return offset;",
          "3276: }",
          "3281: };",
          "3283: static int",
          "3285:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "3288:   return offset;",
          "3289: }",
          "3296: static int",
          "3301:   return offset;",
          "3302: }",
          "3309: };",
          "3311: static int",
          "3316:   return offset;",
          "3317: }",
          "3326:   { NULL, 0, 0, NULL }",
          "3327: };",
          "3329: static int",
          "3331:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "3334:   return offset;",
          "3335: }",
          "3340: };",
          "3342: static int",
          "3347:   return offset;",
          "3348: }",
          "3353: };",
          "3355: static int",
          "3360:   return offset;",
          "3361: }",
          "3366: };",
          "3368: static int",
          "3370:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "3373:   return offset;",
          "3374: }",
          "3378: static int",
          "3383:   return offset;",
          "3384: }",
          "3389: };",
          "3391: static int",
          "3397:   return offset;",
          "3398: }",
          "3404: };",
          "3406: static int",
          "3408:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "3411:   return offset;",
          "3412: }",
          "3422:   { NULL, 0, 0, NULL }",
          "3423: };",
          "3425: static int",
          "3427:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "3430:   return offset;",
          "3431: }",
          "3436: };",
          "3438: static int",
          "3440:   offset = dissect_per_constrained_sequence_of(tvb, offset, actx, tree, hf_index,",
          "3442:                                                   1, 16, FALSE);",
          "3444:   return offset;",
          "3445: }",
          "3451:   { NULL, 0, 0, NULL }",
          "3452: };",
          "3454: static int",
          "3456:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "3459:   return offset;",
          "3460: }",
          "",
          "[Removed Lines]",
          "3247: dissect_lppe_T_tropoModel(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "3248:   offset = dissect_per_bit_string(tvb, offset, actx, tree, hf_index,",
          "3249:                                      1, 8, FALSE, NULL, NULL);",
          "3257: dissect_lppe_BOOLEAN(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "3258:   offset = dissect_per_boolean(tvb, offset, actx, tree, hf_index, NULL);",
          "3264: static const per_sequence_t OMA_LPPe_AGNSS_TroposphereModelSupport_sequence[] = {",
          "3265:   { &hf_lppe_tropoModel     , ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lppe_T_tropoModel },",
          "3266:   { &hf_lppe_supportForMultipleGridPoints, ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lppe_BOOLEAN },",
          "3271: dissect_lppe_OMA_LPPe_AGNSS_TroposphereModelSupport(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "3273:                                    ett_lppe_OMA_LPPe_AGNSS_TroposphereModelSupport, OMA_LPPe_AGNSS_TroposphereModelSupport_sequence);",
          "3279: static const per_sequence_t OMA_LPPe_AGNSS_AltitudeAssistanceSupport_sequence[] = {",
          "3280:   { NULL, ASN1_EXTENSION_ROOT, 0, NULL }",
          "3284: dissect_lppe_OMA_LPPe_AGNSS_AltitudeAssistanceSupport(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "3286:                                    ett_lppe_OMA_LPPe_AGNSS_AltitudeAssistanceSupport, OMA_LPPe_AGNSS_AltitudeAssistanceSupport_sequence);",
          "3292: static const per_sequence_t OMA_LPPe_AGNSS_SolarRadiationSupport_sequence[] = {",
          "3293:   { NULL, ASN1_EXTENSION_ROOT, 0, NULL }",
          "3294: };",
          "3297: dissect_lppe_OMA_LPPe_AGNSS_SolarRadiationSupport(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "3298:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "3299:                                    ett_lppe_OMA_LPPe_AGNSS_SolarRadiationSupport, OMA_LPPe_AGNSS_SolarRadiationSupport_sequence);",
          "3305: static const per_sequence_t OMA_LPPe_AGNSS_CCPsupport_sequence[] = {",
          "3306:   { &hf_lppe_supportAreaAssistanceSupported, ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lppe_BOOLEAN },",
          "3307:   { &hf_lppe_multiReferenceStationSupported, ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lppe_BOOLEAN },",
          "3308:   { NULL, 0, 0, NULL }",
          "3312: dissect_lppe_OMA_LPPe_AGNSS_CCPsupport(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "3313:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "3314:                                    ett_lppe_OMA_LPPe_AGNSS_CCPsupport, OMA_LPPe_AGNSS_CCPsupport_sequence);",
          "3320: static const per_sequence_t OMA_LPPe_AGNSS_CommonAssistanceDataSupport_sequence[] = {",
          "3321:   { &hf_lppe_ionosphericModelSupport, ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lppe_OMA_LPPe_AGNSS_IonosphericModelSupport },",
          "3322:   { &hf_lppe_troposphereModelSupport, ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lppe_OMA_LPPe_AGNSS_TroposphereModelSupport },",
          "3323:   { &hf_lppe_altitudeAssistanceSupport, ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lppe_OMA_LPPe_AGNSS_AltitudeAssistanceSupport },",
          "3324:   { &hf_lppe_solarRadiationSupport, ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lppe_OMA_LPPe_AGNSS_SolarRadiationSupport },",
          "3325:   { &hf_lppe_ccpSupport     , ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lppe_OMA_LPPe_AGNSS_CCPsupport },",
          "3330: dissect_lppe_OMA_LPPe_AGNSS_CommonAssistanceDataSupport(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "3332:                                    ett_lppe_OMA_LPPe_AGNSS_CommonAssistanceDataSupport, OMA_LPPe_AGNSS_CommonAssistanceDataSupport_sequence);",
          "3338: static const per_sequence_t OMA_LPPe_AGNSS_MechanicsSupport_sequence[] = {",
          "3339:   { NULL, ASN1_EXTENSION_ROOT, 0, NULL }",
          "3343: dissect_lppe_OMA_LPPe_AGNSS_MechanicsSupport(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "3344:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "3345:                                    ett_lppe_OMA_LPPe_AGNSS_MechanicsSupport, OMA_LPPe_AGNSS_MechanicsSupport_sequence);",
          "3351: static const per_sequence_t OMA_LPPe_AGNSS_DCBsupport_sequence[] = {",
          "3352:   { NULL, ASN1_EXTENSION_ROOT, 0, NULL }",
          "3356: dissect_lppe_OMA_LPPe_AGNSS_DCBsupport(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "3357:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "3358:                                    ett_lppe_OMA_LPPe_AGNSS_DCBsupport, OMA_LPPe_AGNSS_DCBsupport_sequence);",
          "3364: static const per_sequence_t OMA_LPPe_AGNSS_NavModelAccuracyModelDegradationSupport_sequence[] = {",
          "3365:   { NULL, ASN1_EXTENSION_ROOT, 0, NULL }",
          "3369: dissect_lppe_OMA_LPPe_AGNSS_NavModelAccuracyModelDegradationSupport(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "3371:                                    ett_lppe_OMA_LPPe_AGNSS_NavModelAccuracyModelDegradationSupport, OMA_LPPe_AGNSS_NavModelAccuracyModelDegradationSupport_sequence);",
          "3379: dissect_lppe_INTEGER_1_8(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "3380:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "3381:                                                             1U, 8U, NULL, FALSE);",
          "3387: static const per_sequence_t T_navModelSupport_sequence_of[1] = {",
          "3388:   { &hf_lppe_navModelSupport_item, ASN1_NO_EXTENSIONS     , ASN1_NOT_OPTIONAL, dissect_lppe_INTEGER_1_8 },",
          "3392: dissect_lppe_T_navModelSupport(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "3393:   offset = dissect_per_constrained_sequence_of(tvb, offset, actx, tree, hf_index,",
          "3394:                                                   ett_lppe_T_navModelSupport, T_navModelSupport_sequence_of,",
          "3395:                                                   1, 8, FALSE);",
          "3401: static const per_sequence_t OMA_LPPe_AGNSS_NavModelSupport_sequence[] = {",
          "3402:   { &hf_lppe_navModelSupport_01, ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lppe_T_navModelSupport },",
          "3403:   { NULL, 0, 0, NULL }",
          "3407: dissect_lppe_OMA_LPPe_AGNSS_NavModelSupport(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "3409:                                    ett_lppe_OMA_LPPe_AGNSS_NavModelSupport, OMA_LPPe_AGNSS_NavModelSupport_sequence);",
          "3415: static const per_sequence_t OMA_LPPe_AGNSS_GenericAssistDataSupportElement_sequence[] = {",
          "3416:   { &hf_lppe_gnss_ID        , ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lpp_GNSS_ID },",
          "3417:   { &hf_lppe_mechnanicsSupport, ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lppe_OMA_LPPe_AGNSS_MechanicsSupport },",
          "3418:   { &hf_lppe_dcbSupport     , ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lppe_OMA_LPPe_AGNSS_DCBsupport },",
          "3419:   { &hf_lppe_navModelAccuracyModelDegradationSupport, ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lppe_OMA_LPPe_AGNSS_NavModelAccuracyModelDegradationSupport },",
          "3420:   { &hf_lppe_ccpAssistanceSuppport, ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lpp_GNSS_SignalIDs },",
          "3421:   { &hf_lppe_navModelSupport, ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lppe_OMA_LPPe_AGNSS_NavModelSupport },",
          "3426: dissect_lppe_OMA_LPPe_AGNSS_GenericAssistDataSupportElement(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "3428:                                    ett_lppe_OMA_LPPe_AGNSS_GenericAssistDataSupportElement, OMA_LPPe_AGNSS_GenericAssistDataSupportElement_sequence);",
          "3434: static const per_sequence_t OMA_LPPe_AGNSS_GenericAssistanceDataSupport_sequence_of[1] = {",
          "3435:   { &hf_lppe_OMA_LPPe_AGNSS_GenericAssistanceDataSupport_item, ASN1_NO_EXTENSIONS     , ASN1_NOT_OPTIONAL, dissect_lppe_OMA_LPPe_AGNSS_GenericAssistDataSupportElement },",
          "3439: dissect_lppe_OMA_LPPe_AGNSS_GenericAssistanceDataSupport(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "3441:                                                   ett_lppe_OMA_LPPe_AGNSS_GenericAssistanceDataSupport, OMA_LPPe_AGNSS_GenericAssistanceDataSupport_sequence_of,",
          "3448: static const per_sequence_t OMA_LPPe_AGNSS_AssistanceDataSupportList_sequence[] = {",
          "3449:   { &hf_lppe_commonAssistanceDataSupport, ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lppe_OMA_LPPe_AGNSS_CommonAssistanceDataSupport },",
          "3450:   { &hf_lppe_genericAssistanceDataSupport, ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lppe_OMA_LPPe_AGNSS_GenericAssistanceDataSupport },",
          "3455: dissect_lppe_OMA_LPPe_AGNSS_AssistanceDataSupportList(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "3457:                                    ett_lppe_OMA_LPPe_AGNSS_AssistanceDataSupportList, OMA_LPPe_AGNSS_AssistanceDataSupportList_sequence);",
          "",
          "[Added Lines]",
          "3574: dissect_lppe_INTEGER_1_maxLevel3_element(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "3575:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "3576:                                                             1U, maxLevel3_element, NULL, FALSE);",
          "3582: static const per_sequence_t T_level3_element_sequence[] = {",
          "3583:   { &hf_lppe_level3_element_value, ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lppe_INTEGER_1_maxLevel3_element },",
          "3584:   { NULL, 0, 0, NULL }",
          "3585: };",
          "3588: dissect_lppe_T_level3_element(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "3589:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "3590:                                    ett_lppe_T_level3_element, T_level3_element_sequence);",
          "3596: static const per_sequence_t T_level2_element_sequence[] = {",
          "3597:   { &hf_lppe_level2_element_value, ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lppe_INTEGER_1_maxLevel2_element },",
          "3598:   { &hf_lppe_level3_element , ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lppe_T_level3_element },",
          "3603: dissect_lppe_T_level2_element(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "3605:                                    ett_lppe_T_level2_element, T_level2_element_sequence);",
          "3611: static const per_sequence_t T_level1_element_sequence[] = {",
          "3612:   { &hf_lppe_level1_element_value, ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lppe_INTEGER_1_maxLevel1_element },",
          "3613:   { &hf_lppe_level2_element , ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lppe_T_level2_element },",
          "3614:   { NULL, 0, 0, NULL }",
          "3618: dissect_lppe_T_level1_element(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "3620:                                    ett_lppe_T_level1_element, T_level1_element_sequence);",
          "3628: dissect_lppe_BIT_STRING_SIZE_1_maxFinal_element(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "3629:   offset = dissect_per_bit_string(tvb, offset, actx, tree, hf_index,",
          "3630:                                      1, maxFinal_element, FALSE, NULL, NULL);",
          "3636: static const value_string lppe_T_additionalElements_vals[] = {",
          "3637:   {   0, \"none\" },",
          "3638:   {   1, \"all\" },",
          "3639:   { 0, NULL }",
          "3644: dissect_lppe_T_additionalElements(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "3645:   offset = dissect_per_enumerated(tvb, offset, actx, tree, hf_index,",
          "3646:                                      2, NULL, TRUE, 0, NULL);",
          "3652: static const per_sequence_t OMA_LPPe_ver1_1_LabelSet_sequence[] = {",
          "3653:   { &hf_lppe_level1_element , ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lppe_T_level1_element },",
          "3654:   { &hf_lppe_lastElements   , ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lppe_BIT_STRING_SIZE_1_maxFinal_element },",
          "3655:   { &hf_lppe_additionalElements, ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lppe_T_additionalElements },",
          "3660: dissect_lppe_OMA_LPPe_ver1_1_LabelSet(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "3662:                                    ett_lppe_OMA_LPPe_ver1_1_LabelSet, OMA_LPPe_ver1_1_LabelSet_sequence);",
          "3668: static const per_sequence_t SEQUENCE_SIZE_1_maxLPPLabelSets_OF_OMA_LPPe_ver1_1_LabelSet_sequence_of[1] = {",
          "3669:   { &hf_lppe_lppLabels_item , ASN1_NO_EXTENSIONS     , ASN1_NOT_OPTIONAL, dissect_lppe_OMA_LPPe_ver1_1_LabelSet },",
          "3673: dissect_lppe_SEQUENCE_SIZE_1_maxLPPLabelSets_OF_OMA_LPPe_ver1_1_LabelSet(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "3674:   offset = dissect_per_constrained_sequence_of(tvb, offset, actx, tree, hf_index,",
          "3675:                                                   ett_lppe_SEQUENCE_SIZE_1_maxLPPLabelSets_OF_OMA_LPPe_ver1_1_LabelSet, SEQUENCE_SIZE_1_maxLPPLabelSets_OF_OMA_LPPe_ver1_1_LabelSet_sequence_of,",
          "3676:                                                   1, maxLPPLabelSets, FALSE);",
          "3682: static const per_sequence_t SEQUENCE_SIZE_1_maxLPPeLabelSets_OF_OMA_LPPe_ver1_1_LabelSet_sequence_of[1] = {",
          "3683:   { &hf_lppe_lppeLabels_item, ASN1_NO_EXTENSIONS     , ASN1_NOT_OPTIONAL, dissect_lppe_OMA_LPPe_ver1_1_LabelSet },",
          "3687: dissect_lppe_SEQUENCE_SIZE_1_maxLPPeLabelSets_OF_OMA_LPPe_ver1_1_LabelSet(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "3688:   offset = dissect_per_constrained_sequence_of(tvb, offset, actx, tree, hf_index,",
          "3689:                                                   ett_lppe_SEQUENCE_SIZE_1_maxLPPeLabelSets_OF_OMA_LPPe_ver1_1_LabelSet, SEQUENCE_SIZE_1_maxLPPeLabelSets_OF_OMA_LPPe_ver1_1_LabelSet_sequence_of,",
          "3690:                                                   1, maxLPPeLabelSets, FALSE);",
          "3696: static const per_sequence_t OMA_LPPe_ver1_1_BroadcastADTypes_sequence[] = {",
          "3697:   { &hf_lppe_lppLabels      , ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lppe_SEQUENCE_SIZE_1_maxLPPLabelSets_OF_OMA_LPPe_ver1_1_LabelSet },",
          "3698:   { &hf_lppe_lppeLabels     , ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lppe_SEQUENCE_SIZE_1_maxLPPeLabelSets_OF_OMA_LPPe_ver1_1_LabelSet },",
          "3699:   { NULL, 0, 0, NULL }",
          "3703: dissect_lppe_OMA_LPPe_ver1_1_BroadcastADTypes(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "3705:                                    ett_lppe_OMA_LPPe_ver1_1_BroadcastADTypes, OMA_LPPe_ver1_1_BroadcastADTypes_sequence);",
          "3711: static const per_sequence_t OMA_LPPe_ver1_1_point2pointAD_sequence[] = {",
          "3712:   { NULL, ASN1_EXTENSION_ROOT, 0, NULL }",
          "3713: };",
          "3716: dissect_lppe_OMA_LPPe_ver1_1_point2pointAD(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "3717:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "3718:                                    ett_lppe_OMA_LPPe_ver1_1_point2pointAD, OMA_LPPe_ver1_1_point2pointAD_sequence);",
          "3724: static const per_sequence_t OMA_LPPe_ver1_1_Ciphering_sequence[] = {",
          "3725:   { NULL, ASN1_EXTENSION_ROOT, 0, NULL }",
          "3729: dissect_lppe_OMA_LPPe_ver1_1_Ciphering(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "3730:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "3731:                                    ett_lppe_OMA_LPPe_ver1_1_Ciphering, OMA_LPPe_ver1_1_Ciphering_sequence);",
          "3737: static const per_sequence_t OMA_LPPe_ver1_1_Authentication_sequence[] = {",
          "3738:   { NULL, ASN1_EXTENSION_ROOT, 0, NULL }",
          "3742: dissect_lppe_OMA_LPPe_ver1_1_Authentication(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "3744:                                    ett_lppe_OMA_LPPe_ver1_1_Authentication, OMA_LPPe_ver1_1_Authentication_sequence);",
          "3750: static const per_sequence_t OMA_LPPe_ver1_1_BroadcastSystem_Capabs_sequence[] = {",
          "3751:   { &hf_lppe_broadcastSystemID, ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lppe_OMA_LPPe_ver1_1_BroadcastSystemID },",
          "3752:   { &hf_lppe_broadcastADTypes, ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lppe_OMA_LPPe_ver1_1_BroadcastADTypes },",
          "3753:   { &hf_lppe_point2pointAD  , ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lppe_OMA_LPPe_ver1_1_point2pointAD },",
          "3754:   { &hf_lppe_ciphering      , ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lppe_OMA_LPPe_ver1_1_Ciphering },",
          "3755:   { &hf_lppe_authentication , ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lppe_OMA_LPPe_ver1_1_Authentication },",
          "3760: dissect_lppe_OMA_LPPe_ver1_1_BroadcastSystem_Capabs(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "3762:                                    ett_lppe_OMA_LPPe_ver1_1_BroadcastSystem_Capabs, OMA_LPPe_ver1_1_BroadcastSystem_Capabs_sequence);",
          "3768: static const per_sequence_t OMA_LPPe_ver1_1_broadcast_ProvideCapabilities_sequence_of[1] = {",
          "3769:   { &hf_lppe_OMA_LPPe_ver1_1_broadcast_ProvideCapabilities_item, ASN1_NO_EXTENSIONS     , ASN1_NOT_OPTIONAL, dissect_lppe_OMA_LPPe_ver1_1_BroadcastSystem_Capabs },",
          "3773: dissect_lppe_OMA_LPPe_ver1_1_broadcast_ProvideCapabilities(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "3775:                                                   ett_lppe_OMA_LPPe_ver1_1_broadcast_ProvideCapabilities, OMA_LPPe_ver1_1_broadcast_ProvideCapabilities_sequence_of,",
          "3782: static const per_sequence_t OMA_LPPe_CommonIEsProvideCapabilities_sequence[] = {",
          "3783:   { &hf_lppe_iP_Address_Capabilities, ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lppe_OMA_LPPe_IP_Address_Capabilities },",
          "3784:   { &hf_lppe_assistanceContainerSupport, ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lppe_OMA_LPPe_AssistanceContainerSupport },",
          "3785:   { &hf_lppe_locationInformationContainerSupport, ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lppe_OMA_LPPe_LocationInformationContainerSupport },",
          "3786:   { &hf_lppe_relativeLocationChange_Capabilities, ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lppe_OMA_LPPe_RelativeLocationChange_Capabilities },",
          "3787:   { &hf_lppe_highAccuracyFormatCapabilities, ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lppe_OMA_LPPe_HighAccuracyFormatCapabilities },",
          "3788:   { &hf_lppe_segmentedAssistanceData_ProvideCapabs, ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lppe_OMA_LPPe_SegmentedAssistanceData_ProvideCapabs },",
          "3789:   { &hf_lppe_referencePointCapabilities, ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lppe_OMA_LPPe_ReferencePointCapabilities },",
          "3790:   { &hf_lppe_scheduledLocation_Capabilities, ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lppe_OMA_LPPe_ScheduledLocation_Capabilities },",
          "3791:   { &hf_lppe_accessCapabilities, ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lppe_OMA_LPPe_AccessCapabilities },",
          "3792:   { &hf_lppe_segmentedLocationInformation_ProvideCapabs, ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lppe_OMA_LPPe_SegmentedLocationInformation_ProvideCapabs },",
          "3793:   { &hf_lppe_ver1_1_localCellInformation_ProvideCapabilities, ASN1_NOT_EXTENSION_ROOT, ASN1_OPTIONAL    , dissect_lppe_OMA_LPPe_ver1_1_localCellInformation_ProvideCapabilities },",
          "3794:   { &hf_lppe_ver1_1_broadcast_ProvideCapabilities, ASN1_NOT_EXTENSION_ROOT, ASN1_OPTIONAL    , dissect_lppe_OMA_LPPe_ver1_1_broadcast_ProvideCapabilities },",
          "3799: dissect_lppe_OMA_LPPe_CommonIEsProvideCapabilities(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "3801:                                    ett_lppe_OMA_LPPe_CommonIEsProvideCapabilities, OMA_LPPe_CommonIEsProvideCapabilities_sequence);",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "3464: static int",
          "3466:   offset = dissect_per_bit_string(tvb, offset, actx, tree, hf_index,",
          "3467:                                      1, 8, FALSE, NULL, NULL);",
          "",
          "[Removed Lines]",
          "3465: dissect_lppe_T_ionosphereMeasurementSupport(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "",
          "[Added Lines]",
          "3809: dissect_lppe_T_ionoModel(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "3470: }",
          "3474:   { &hf_lppe_ionosphereMeasurementSupport, ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lppe_T_ionosphereMeasurementSupport },",
          "3475:   { &hf_lppe_pressureMeasurementSupported, ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lppe_BOOLEAN },",
          "3476:   { &hf_lppe_temperatureMeasurementSupported, ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lppe_BOOLEAN },",
          "",
          "[Removed Lines]",
          "3473: static const per_sequence_t OMA_LPPe_AGNSS_EnvironmentObservationSupportList_sequence[] = {",
          "",
          "[Added Lines]",
          "3817: static const per_sequence_t OMA_LPPe_AGNSS_IonosphericModelSupport_sequence[] = {",
          "3818:   { &hf_lppe_ionoModel      , ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lppe_T_ionoModel },",
          "3819:   { NULL, 0, 0, NULL }",
          "3820: };",
          "3822: static int",
          "3823: dissect_lppe_OMA_LPPe_AGNSS_IonosphericModelSupport(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "3824:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "3825:                                    ett_lppe_OMA_LPPe_AGNSS_IonosphericModelSupport, OMA_LPPe_AGNSS_IonosphericModelSupport_sequence);",
          "3827:   return offset;",
          "3828: }",
          "3832: static int",
          "3833: dissect_lppe_T_tropoModel(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "3834:   offset = dissect_per_bit_string(tvb, offset, actx, tree, hf_index,",
          "3835:                                      1, 8, FALSE, NULL, NULL);",
          "3837:   return offset;",
          "3838: }",
          "3842: static int",
          "3843: dissect_lppe_BOOLEAN(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "3844:   offset = dissect_per_boolean(tvb, offset, actx, tree, hf_index, NULL);",
          "3846:   return offset;",
          "3847: }",
          "3850: static const per_sequence_t OMA_LPPe_AGNSS_TroposphereModelSupport_sequence[] = {",
          "3851:   { &hf_lppe_tropoModel     , ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lppe_T_tropoModel },",
          "3852:   { &hf_lppe_supportForMultipleGridPoints, ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lppe_BOOLEAN },",
          "3853:   { NULL, 0, 0, NULL }",
          "3854: };",
          "3856: static int",
          "3857: dissect_lppe_OMA_LPPe_AGNSS_TroposphereModelSupport(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "3858:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "3859:                                    ett_lppe_OMA_LPPe_AGNSS_TroposphereModelSupport, OMA_LPPe_AGNSS_TroposphereModelSupport_sequence);",
          "3861:   return offset;",
          "3862: }",
          "3865: static const per_sequence_t OMA_LPPe_AGNSS_AltitudeAssistanceSupport_sequence[] = {",
          "3866:   { NULL, ASN1_EXTENSION_ROOT, 0, NULL }",
          "3867: };",
          "3869: static int",
          "3870: dissect_lppe_OMA_LPPe_AGNSS_AltitudeAssistanceSupport(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "3871:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "3872:                                    ett_lppe_OMA_LPPe_AGNSS_AltitudeAssistanceSupport, OMA_LPPe_AGNSS_AltitudeAssistanceSupport_sequence);",
          "3874:   return offset;",
          "3875: }",
          "3878: static const per_sequence_t OMA_LPPe_AGNSS_SolarRadiationSupport_sequence[] = {",
          "3879:   { NULL, ASN1_EXTENSION_ROOT, 0, NULL }",
          "3880: };",
          "3882: static int",
          "3883: dissect_lppe_OMA_LPPe_AGNSS_SolarRadiationSupport(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "3884:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "3885:                                    ett_lppe_OMA_LPPe_AGNSS_SolarRadiationSupport, OMA_LPPe_AGNSS_SolarRadiationSupport_sequence);",
          "3887:   return offset;",
          "3888: }",
          "3891: static const per_sequence_t OMA_LPPe_AGNSS_CCPsupport_sequence[] = {",
          "3892:   { &hf_lppe_supportAreaAssistanceSupported, ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lppe_BOOLEAN },",
          "3893:   { &hf_lppe_multiReferenceStationSupported, ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lppe_BOOLEAN },",
          "3894:   { NULL, 0, 0, NULL }",
          "3895: };",
          "3897: static int",
          "3898: dissect_lppe_OMA_LPPe_AGNSS_CCPsupport(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "3899:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "3900:                                    ett_lppe_OMA_LPPe_AGNSS_CCPsupport, OMA_LPPe_AGNSS_CCPsupport_sequence);",
          "3902:   return offset;",
          "3903: }",
          "3906: static const per_sequence_t OMA_LPPe_AGNSS_CommonAssistanceDataSupport_sequence[] = {",
          "3907:   { &hf_lppe_ionosphericModelSupport, ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lppe_OMA_LPPe_AGNSS_IonosphericModelSupport },",
          "3908:   { &hf_lppe_troposphereModelSupport, ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lppe_OMA_LPPe_AGNSS_TroposphereModelSupport },",
          "3909:   { &hf_lppe_altitudeAssistanceSupport, ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lppe_OMA_LPPe_AGNSS_AltitudeAssistanceSupport },",
          "3910:   { &hf_lppe_solarRadiationSupport, ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lppe_OMA_LPPe_AGNSS_SolarRadiationSupport },",
          "3911:   { &hf_lppe_ccpSupport     , ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lppe_OMA_LPPe_AGNSS_CCPsupport },",
          "3912:   { NULL, 0, 0, NULL }",
          "3913: };",
          "3915: static int",
          "3916: dissect_lppe_OMA_LPPe_AGNSS_CommonAssistanceDataSupport(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "3917:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "3918:                                    ett_lppe_OMA_LPPe_AGNSS_CommonAssistanceDataSupport, OMA_LPPe_AGNSS_CommonAssistanceDataSupport_sequence);",
          "3920:   return offset;",
          "3921: }",
          "3924: static const per_sequence_t OMA_LPPe_AGNSS_MechanicsSupport_sequence[] = {",
          "3925:   { NULL, ASN1_EXTENSION_ROOT, 0, NULL }",
          "3926: };",
          "3928: static int",
          "3929: dissect_lppe_OMA_LPPe_AGNSS_MechanicsSupport(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "3930:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "3931:                                    ett_lppe_OMA_LPPe_AGNSS_MechanicsSupport, OMA_LPPe_AGNSS_MechanicsSupport_sequence);",
          "3933:   return offset;",
          "3934: }",
          "3937: static const per_sequence_t OMA_LPPe_AGNSS_DCBsupport_sequence[] = {",
          "3938:   { NULL, ASN1_EXTENSION_ROOT, 0, NULL }",
          "3939: };",
          "3941: static int",
          "3942: dissect_lppe_OMA_LPPe_AGNSS_DCBsupport(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "3943:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "3944:                                    ett_lppe_OMA_LPPe_AGNSS_DCBsupport, OMA_LPPe_AGNSS_DCBsupport_sequence);",
          "3946:   return offset;",
          "3947: }",
          "3950: static const per_sequence_t OMA_LPPe_AGNSS_NavModelAccuracyModelDegradationSupport_sequence[] = {",
          "3951:   { NULL, ASN1_EXTENSION_ROOT, 0, NULL }",
          "3952: };",
          "3954: static int",
          "3955: dissect_lppe_OMA_LPPe_AGNSS_NavModelAccuracyModelDegradationSupport(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "3956:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "3957:                                    ett_lppe_OMA_LPPe_AGNSS_NavModelAccuracyModelDegradationSupport, OMA_LPPe_AGNSS_NavModelAccuracyModelDegradationSupport_sequence);",
          "3959:   return offset;",
          "3960: }",
          "3964: static int",
          "3965: dissect_lppe_INTEGER_1_8(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "3966:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "3967:                                                             1U, 8U, NULL, FALSE);",
          "3969:   return offset;",
          "3970: }",
          "3973: static const per_sequence_t T_navModelSupport_sequence_of[1] = {",
          "3974:   { &hf_lppe_navModelSupport_item, ASN1_NO_EXTENSIONS     , ASN1_NOT_OPTIONAL, dissect_lppe_INTEGER_1_8 },",
          "3975: };",
          "3977: static int",
          "3978: dissect_lppe_T_navModelSupport(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "3979:   offset = dissect_per_constrained_sequence_of(tvb, offset, actx, tree, hf_index,",
          "3980:                                                   ett_lppe_T_navModelSupport, T_navModelSupport_sequence_of,",
          "3981:                                                   1, 8, FALSE);",
          "3983:   return offset;",
          "3984: }",
          "3987: static const per_sequence_t OMA_LPPe_AGNSS_NavModelSupport_sequence[] = {",
          "3988:   { &hf_lppe_navModelSupport_01, ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lppe_T_navModelSupport },",
          "3989:   { NULL, 0, 0, NULL }",
          "3990: };",
          "3992: static int",
          "3993: dissect_lppe_OMA_LPPe_AGNSS_NavModelSupport(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "3994:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "3995:                                    ett_lppe_OMA_LPPe_AGNSS_NavModelSupport, OMA_LPPe_AGNSS_NavModelSupport_sequence);",
          "3997:   return offset;",
          "3998: }",
          "4001: static const per_sequence_t OMA_LPPe_AGNSS_GenericAssistDataSupportElement_sequence[] = {",
          "4002:   { &hf_lppe_gnss_ID        , ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lpp_GNSS_ID },",
          "4003:   { &hf_lppe_mechnanicsSupport, ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lppe_OMA_LPPe_AGNSS_MechanicsSupport },",
          "4004:   { &hf_lppe_dcbSupport     , ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lppe_OMA_LPPe_AGNSS_DCBsupport },",
          "4005:   { &hf_lppe_navModelAccuracyModelDegradationSupport, ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lppe_OMA_LPPe_AGNSS_NavModelAccuracyModelDegradationSupport },",
          "4006:   { &hf_lppe_ccpAssistanceSuppport, ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lpp_GNSS_SignalIDs },",
          "4007:   { &hf_lppe_navModelSupport, ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lppe_OMA_LPPe_AGNSS_NavModelSupport },",
          "4008:   { NULL, 0, 0, NULL }",
          "4009: };",
          "4011: static int",
          "4012: dissect_lppe_OMA_LPPe_AGNSS_GenericAssistDataSupportElement(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "4013:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "4014:                                    ett_lppe_OMA_LPPe_AGNSS_GenericAssistDataSupportElement, OMA_LPPe_AGNSS_GenericAssistDataSupportElement_sequence);",
          "4016:   return offset;",
          "4017: }",
          "4020: static const per_sequence_t OMA_LPPe_AGNSS_GenericAssistanceDataSupport_sequence_of[1] = {",
          "4021:   { &hf_lppe_OMA_LPPe_AGNSS_GenericAssistanceDataSupport_item, ASN1_NO_EXTENSIONS     , ASN1_NOT_OPTIONAL, dissect_lppe_OMA_LPPe_AGNSS_GenericAssistDataSupportElement },",
          "4022: };",
          "4024: static int",
          "4025: dissect_lppe_OMA_LPPe_AGNSS_GenericAssistanceDataSupport(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "4026:   offset = dissect_per_constrained_sequence_of(tvb, offset, actx, tree, hf_index,",
          "4027:                                                   ett_lppe_OMA_LPPe_AGNSS_GenericAssistanceDataSupport, OMA_LPPe_AGNSS_GenericAssistanceDataSupport_sequence_of,",
          "4028:                                                   1, 16, FALSE);",
          "4030:   return offset;",
          "4031: }",
          "4034: static const per_sequence_t OMA_LPPe_AGNSS_AssistanceDataSupportList_sequence[] = {",
          "4035:   { &hf_lppe_commonAssistanceDataSupport, ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lppe_OMA_LPPe_AGNSS_CommonAssistanceDataSupport },",
          "4036:   { &hf_lppe_genericAssistanceDataSupport, ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lppe_OMA_LPPe_AGNSS_GenericAssistanceDataSupport },",
          "4037:   { NULL, 0, 0, NULL }",
          "4038: };",
          "4040: static int",
          "4041: dissect_lppe_OMA_LPPe_AGNSS_AssistanceDataSupportList(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "4042:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "4043:                                    ett_lppe_OMA_LPPe_AGNSS_AssistanceDataSupportList, OMA_LPPe_AGNSS_AssistanceDataSupportList_sequence);",
          "4045:   return offset;",
          "4046: }",
          "4050: static int",
          "4051: dissect_lppe_T_ionosphereMeasurementSupport(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "4052:   offset = dissect_per_bit_string(tvb, offset, actx, tree, hf_index,",
          "4053:                                      1, 8, FALSE, NULL, NULL);",
          "4055:   return offset;",
          "4056: }",
          "4059: static const per_sequence_t OMA_LPPe_AGNSS_EnvironmentObservationSupportList_sequence[] = {",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "3845: }",
          "3848: static const per_sequence_t OMA_LPPe_WLAN_AP_ProvideCapabilities_sequence[] = {",
          "3849:   { &hf_lppe_wlan_ecid_MeasSupported, ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lppe_T_wlan_ecid_MeasSupported },",
          "3850:   { &hf_lppe_wlan_types_Supported, ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lppe_OMA_LPPe_WLAN_AP_Type_List },",
          "3851:   { &hf_lppe_ap_Capability  , ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lppe_OMA_LPPe_WLAN_AP_Capability },",
          "3852:   { &hf_lppe_wlan_ap_ADSupported, ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lppe_T_wlan_ap_ADSupported },",
          "3853:   { NULL, 0, 0, NULL }",
          "3854: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4435: static int",
          "4436: dissect_lppe_T_additional_wlan_ecid_MeasSupported(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "4437:   offset = dissect_per_bit_string(tvb, offset, actx, tree, hf_index,",
          "4438:                                      1, 16, FALSE, NULL, NULL);",
          "4440:   return offset;",
          "4441: }",
          "4449:   { &hf_lppe_additional_wlan_ecid_MeasSupported, ASN1_NOT_EXTENSION_ROOT, ASN1_OPTIONAL    , dissect_lppe_T_additional_wlan_ecid_MeasSupported },",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "3889: static const per_sequence_t OMA_LPPe_Sensor_ProvideCapabilities_sequence[] = {",
          "3890:   { &hf_lppe_motionStateSupport, ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lppe_NULL },",
          "3891:   { &hf_lppe_secondarySupport, ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lppe_NULL },",
          "3892:   { NULL, 0, 0, NULL }",
          "3893: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4489:   { &hf_lppe_barometricPressureSupport, ASN1_NOT_EXTENSION_ROOT, ASN1_OPTIONAL    , dissect_lppe_NULL },",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "4147: static int",
          "4152:   return offset;",
          "4153: }",
          "",
          "[Removed Lines]",
          "4148: dissect_lppe_INTEGER_1_256(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "4149:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "4150:                                                             1U, 256U, NULL, FALSE);",
          "",
          "[Added Lines]",
          "4746: dissect_lppe_OCTET_STRING_SIZE_4(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "4747:   offset = dissect_per_octet_string(tvb, offset, actx, tree, hf_index,",
          "4748:                                        4, 4, FALSE, NULL);",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "4173: static const per_sequence_t OMA_LPPe_RequestPeriodicADwithUpdate_sequence[] = {",
          "4175:   { &hf_lppe_typeOfADRequest, ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lppe_TypeOfADRequest },",
          "4176:   { NULL, 0, 0, NULL }",
          "4177: };",
          "",
          "[Removed Lines]",
          "4174:   { &hf_lppe_periodicAD_session_ID, ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lppe_INTEGER_1_256 },",
          "",
          "[Added Lines]",
          "4772:   { &hf_lppe_periodicAD_session_ID, ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lppe_OCTET_STRING_SIZE_4 },",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "4201: }",
          "4214: static const per_sequence_t OMA_LPPe_Session_ID_sequence[] = {",
          "4215:   { &hf_lppe_provider_ID    , ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lppe_OMA_LPPe_VendorOrOperatorID },",
          "4216:   { &hf_lppe_server_ID      , ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lppe_OCTET_STRING_SIZE_4 },",
          "",
          "[Removed Lines]",
          "4205: static int",
          "4206: dissect_lppe_OCTET_STRING_SIZE_4(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "4207:   offset = dissect_per_octet_string(tvb, offset, actx, tree, hf_index,",
          "4208:                                        4, 4, FALSE, NULL);",
          "4210:   return offset;",
          "4211: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "4295: }",
          "4298: static const per_sequence_t OMA_LPPe_CommonIEsRequestAssistanceData_sequence[] = {",
          "4299:   { &hf_lppe_approximate_location, ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lpp_EllipsoidPointWithAltitudeAndUncertaintyEllipsoid },",
          "4300:   { &hf_lppe_assistanceContainerRequestList, ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lppe_OMA_LPPe_AssistanceContainerRequestList },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4887: static int",
          "4888: dissect_lppe_T_localCellInformationReq(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "4889:   offset = dissect_per_bit_string(tvb, offset, actx, tree, hf_index,",
          "4890:                                      1, 16, FALSE, NULL, NULL);",
          "4892:   return offset;",
          "4893: }",
          "4896: static const value_string lppe_OMA_LPPe_ver1_1_CellGlobalID_vals[] = {",
          "4897:   {   0, \"eUTRA\" },",
          "4898:   {   1, \"uTRA\" },",
          "4899:   {   2, \"gSM\" },",
          "4900:   { 0, NULL }",
          "4901: };",
          "4903: static const per_choice_t OMA_LPPe_ver1_1_CellGlobalID_choice[] = {",
          "4904:   {   0, &hf_lppe_eUTRA          , ASN1_EXTENSION_ROOT    , dissect_lpp_CellGlobalIdEUTRA_AndUTRA },",
          "4905:   {   1, &hf_lppe_uTRA           , ASN1_EXTENSION_ROOT    , dissect_lpp_CellGlobalIdEUTRA_AndUTRA },",
          "4906:   {   2, &hf_lppe_gSM            , ASN1_EXTENSION_ROOT    , dissect_lpp_CellGlobalIdGERAN },",
          "4907:   { 0, NULL, 0, NULL }",
          "4908: };",
          "4910: static int",
          "4911: dissect_lppe_OMA_LPPe_ver1_1_CellGlobalID(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "4912:   offset = dissect_per_choice(tvb, offset, actx, tree, hf_index,",
          "4913:                                  ett_lppe_OMA_LPPe_ver1_1_CellGlobalID, OMA_LPPe_ver1_1_CellGlobalID_choice,",
          "4914:                                  NULL);",
          "4916:   return offset;",
          "4917: }",
          "4921: static int",
          "4922: dissect_lppe_INTEGER_0_7(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "4923:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "4924:                                                             0U, 7U, NULL, FALSE);",
          "4926:   return offset;",
          "4927: }",
          "4930: static const per_sequence_t OMA_LPPe_ver1_1_LocalCellInformationReq_sequence[] = {",
          "4931:   { &hf_lppe_localCellInformationReq, ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lppe_T_localCellInformationReq },",
          "4932:   { &hf_lppe_localCellID    , ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lppe_OMA_LPPe_ver1_1_CellGlobalID },",
          "4933:   { &hf_lppe_numberOfCells  , ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lppe_INTEGER_0_7 },",
          "4934:   { NULL, 0, 0, NULL }",
          "4935: };",
          "4937: static int",
          "4938: dissect_lppe_OMA_LPPe_ver1_1_LocalCellInformationReq(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "4939:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "4940:                                    ett_lppe_OMA_LPPe_ver1_1_LocalCellInformationReq, OMA_LPPe_ver1_1_LocalCellInformationReq_sequence);",
          "4942:   return offset;",
          "4943: }",
          "4947: static int",
          "4948: dissect_lppe_OMA_LPPe_ver1_1_CipherSetID(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "4949:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "4950:                                                             0U, 65535U, NULL, FALSE);",
          "4952:   return offset;",
          "4953: }",
          "4956: static const per_sequence_t SEQUENCE_SIZE_1_16_OF_OMA_LPPe_ver1_1_CipherSetID_sequence_of[1] = {",
          "4957:   { &hf_lppe_cipherSets_item, ASN1_NO_EXTENSIONS     , ASN1_NOT_OPTIONAL, dissect_lppe_OMA_LPPe_ver1_1_CipherSetID },",
          "4958: };",
          "4960: static int",
          "4961: dissect_lppe_SEQUENCE_SIZE_1_16_OF_OMA_LPPe_ver1_1_CipherSetID(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "4962:   offset = dissect_per_constrained_sequence_of(tvb, offset, actx, tree, hf_index,",
          "4963:                                                   ett_lppe_SEQUENCE_SIZE_1_16_OF_OMA_LPPe_ver1_1_CipherSetID, SEQUENCE_SIZE_1_16_OF_OMA_LPPe_ver1_1_CipherSetID_sequence_of,",
          "4964:                                                   1, 16, FALSE);",
          "4966:   return offset;",
          "4967: }",
          "4971: static int",
          "4972: dissect_lppe_OMA_LPPe_ver1_1_AuthenticationSetID(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "4973:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "4974:                                                             0U, 255U, NULL, FALSE);",
          "4976:   return offset;",
          "4977: }",
          "4980: static const per_sequence_t SEQUENCE_SIZE_1_4_OF_OMA_LPPe_ver1_1_AuthenticationSetID_sequence_of[1] = {",
          "4981:   { &hf_lppe_authenticationSets_item, ASN1_NO_EXTENSIONS     , ASN1_NOT_OPTIONAL, dissect_lppe_OMA_LPPe_ver1_1_AuthenticationSetID },",
          "4982: };",
          "4984: static int",
          "4985: dissect_lppe_SEQUENCE_SIZE_1_4_OF_OMA_LPPe_ver1_1_AuthenticationSetID(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "4986:   offset = dissect_per_constrained_sequence_of(tvb, offset, actx, tree, hf_index,",
          "4987:                                                   ett_lppe_SEQUENCE_SIZE_1_4_OF_OMA_LPPe_ver1_1_AuthenticationSetID, SEQUENCE_SIZE_1_4_OF_OMA_LPPe_ver1_1_AuthenticationSetID_sequence_of,",
          "4988:                                                   1, 4, FALSE);",
          "4990:   return offset;",
          "4991: }",
          "4994: static const per_sequence_t OMA_LPPe_ver1_1_BroadcastSystem_sequence[] = {",
          "4995:   { &hf_lppe_broadcastSystemID, ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lppe_OMA_LPPe_ver1_1_BroadcastSystemID },",
          "4996:   { &hf_lppe_cipherSets     , ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lppe_SEQUENCE_SIZE_1_16_OF_OMA_LPPe_ver1_1_CipherSetID },",
          "4997:   { &hf_lppe_authenticationSets, ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lppe_SEQUENCE_SIZE_1_4_OF_OMA_LPPe_ver1_1_AuthenticationSetID },",
          "4998:   { NULL, 0, 0, NULL }",
          "4999: };",
          "5001: static int",
          "5002: dissect_lppe_OMA_LPPe_ver1_1_BroadcastSystem(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "5003:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "5004:                                    ett_lppe_OMA_LPPe_ver1_1_BroadcastSystem, OMA_LPPe_ver1_1_BroadcastSystem_sequence);",
          "5006:   return offset;",
          "5007: }",
          "5010: static const per_sequence_t OMA_LPPe_ver1_1_BroadcastAssistanceDataReq_sequence[] = {",
          "5011:   { &hf_lppe_broadcastSystem, ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lppe_OMA_LPPe_ver1_1_BroadcastSystem },",
          "5012:   { NULL, 0, 0, NULL }",
          "5013: };",
          "5015: static int",
          "5016: dissect_lppe_OMA_LPPe_ver1_1_BroadcastAssistanceDataReq(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "5017:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "5018:                                    ett_lppe_OMA_LPPe_ver1_1_BroadcastAssistanceDataReq, OMA_LPPe_ver1_1_BroadcastAssistanceDataReq_sequence);",
          "5020:   return offset;",
          "5021: }",
          "5025: static int",
          "5026: dissect_lppe_INTEGER_0_9(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "5027:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "5028:                                                             0U, 9U, NULL, FALSE);",
          "5030:   return offset;",
          "5031: }",
          "5034: static const per_sequence_t T_mcc_sequence_of[1] = {",
          "5035:   { &hf_lppe_mcc_item       , ASN1_NO_EXTENSIONS     , ASN1_NOT_OPTIONAL, dissect_lppe_INTEGER_0_9 },",
          "5036: };",
          "5038: static int",
          "5039: dissect_lppe_T_mcc(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "5040:   offset = dissect_per_constrained_sequence_of(tvb, offset, actx, tree, hf_index,",
          "5041:                                                   ett_lppe_T_mcc, T_mcc_sequence_of,",
          "5042:                                                   3, 3, FALSE);",
          "5044:   return offset;",
          "5045: }",
          "5048: static const per_sequence_t T_mnc_sequence_of[1] = {",
          "5049:   { &hf_lppe_mnc_item       , ASN1_NO_EXTENSIONS     , ASN1_NOT_OPTIONAL, dissect_lppe_INTEGER_0_9 },",
          "5050: };",
          "5052: static int",
          "5053: dissect_lppe_T_mnc(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "5054:   offset = dissect_per_constrained_sequence_of(tvb, offset, actx, tree, hf_index,",
          "5055:                                                   ett_lppe_T_mnc, T_mnc_sequence_of,",
          "5056:                                                   2, 3, FALSE);",
          "5058:   return offset;",
          "5059: }",
          "5062: static const per_sequence_t OMA_LPPe_ver1_1_MCC_MNC_sequence[] = {",
          "5063:   { &hf_lppe_mcc            , ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lppe_T_mcc },",
          "5064:   { &hf_lppe_mnc            , ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lppe_T_mnc },",
          "5065:   { NULL, 0, 0, NULL }",
          "5066: };",
          "5068: static int",
          "5069: dissect_lppe_OMA_LPPe_ver1_1_MCC_MNC(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "5070:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "5071:                                    ett_lppe_OMA_LPPe_ver1_1_MCC_MNC, OMA_LPPe_ver1_1_MCC_MNC_sequence);",
          "5073:   return offset;",
          "5074: }",
          "5078: static int",
          "5079: dissect_lppe_BIT_STRING_SIZE_24(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "5080:   offset = dissect_per_bit_string(tvb, offset, actx, tree, hf_index,",
          "5081:                                      24, 24, FALSE, NULL, NULL);",
          "5083:   return offset;",
          "5084: }",
          "5087: static const per_sequence_t OMA_LPPe_ver1_1_BSID_sequence[] = {",
          "5088:   { &hf_lppe_bsID_MSB       , ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lppe_BIT_STRING_SIZE_24 },",
          "5089:   { &hf_lppe_bsID_LSB       , ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lppe_BIT_STRING_SIZE_24 },",
          "5090:   { NULL, 0, 0, NULL }",
          "5091: };",
          "5093: static int",
          "5094: dissect_lppe_OMA_LPPe_ver1_1_BSID(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "5095:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "5096:                                    ett_lppe_OMA_LPPe_ver1_1_BSID, OMA_LPPe_ver1_1_BSID_sequence);",
          "5098:   return offset;",
          "5099: }",
          "5102: static const value_string lppe_OMA_LPPe_ver1_1_AccessNetworkID_vals[] = {",
          "5103:   {   0, \"gSMAccess\" },",
          "5104:   {   1, \"wCDMAAccess\" },",
          "5105:   {   2, \"lTEAccess\" },",
          "5106:   {   3, \"wiMaxAccess\" },",
          "5107:   {   4, \"wLANAccess\" },",
          "5108:   { 0, NULL }",
          "5109: };",
          "5111: static const per_choice_t OMA_LPPe_ver1_1_AccessNetworkID_choice[] = {",
          "5112:   {   0, &hf_lppe_gSMAccess      , ASN1_EXTENSION_ROOT    , dissect_lppe_OMA_LPPe_ver1_1_MCC_MNC },",
          "5113:   {   1, &hf_lppe_wCDMAAccess    , ASN1_EXTENSION_ROOT    , dissect_lppe_OMA_LPPe_ver1_1_MCC_MNC },",
          "5114:   {   2, &hf_lppe_lTEAccess      , ASN1_EXTENSION_ROOT    , dissect_lppe_OMA_LPPe_ver1_1_MCC_MNC },",
          "5115:   {   3, &hf_lppe_wiMaxAccess    , ASN1_EXTENSION_ROOT    , dissect_lppe_OMA_LPPe_ver1_1_BSID },",
          "5116:   {   4, &hf_lppe_wLANAccess     , ASN1_EXTENSION_ROOT    , dissect_lppe_OMA_LPPe_WLAN_AP_ID },",
          "5117:   { 0, NULL, 0, NULL }",
          "5118: };",
          "5120: static int",
          "5121: dissect_lppe_OMA_LPPe_ver1_1_AccessNetworkID(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "5122:   offset = dissect_per_choice(tvb, offset, actx, tree, hf_index,",
          "5123:                                  ett_lppe_OMA_LPPe_ver1_1_AccessNetworkID, OMA_LPPe_ver1_1_AccessNetworkID_choice,",
          "5124:                                  NULL);",
          "5126:   return offset;",
          "5127: }",
          "5131: static int",
          "5132: dissect_lppe_T_modelsReq(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "5133:   offset = dissect_per_bit_string(tvb, offset, actx, tree, hf_index,",
          "5134:                                      1, 8, FALSE, NULL, NULL);",
          "5136:   return offset;",
          "5137: }",
          "5141: static int",
          "5142: dissect_lppe_INTEGER_6_14(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "5143:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "5144:                                                             6U, 14U, NULL, FALSE);",
          "5146:   return offset;",
          "5147: }",
          "5150: static const per_sequence_t T_refAreaParam_sequence[] = {",
          "5151:   { &hf_lppe_northWestCorner, ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lpp_Ellipsoid_Point },",
          "5152:   { &hf_lppe_spanX          , ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lppe_INTEGER_6_14 },",
          "5153:   { &hf_lppe_spanY          , ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lppe_INTEGER_6_14 },",
          "5154:   { NULL, 0, 0, NULL }",
          "5155: };",
          "5157: static int",
          "5158: dissect_lppe_T_refAreaParam(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "5159:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "5160:                                    ett_lppe_T_refAreaParam, T_refAreaParam_sequence);",
          "5162:   return offset;",
          "5163: }",
          "5166: static const per_sequence_t OMA_LPPe_ver1_1_GroundMorphologyModelReq_sequence[] = {",
          "5167:   { &hf_lppe_modelsReq      , ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lppe_T_modelsReq },",
          "5168:   { &hf_lppe_refAreaParam   , ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lppe_T_refAreaParam },",
          "5169:   { NULL, 0, 0, NULL }",
          "5170: };",
          "5172: static int",
          "5173: dissect_lppe_OMA_LPPe_ver1_1_GroundMorphologyModelReq(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "5174:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "5175:                                    ett_lppe_OMA_LPPe_ver1_1_GroundMorphologyModelReq, OMA_LPPe_ver1_1_GroundMorphologyModelReq_sequence);",
          "5177:   return offset;",
          "5178: }",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "4302:   { &hf_lppe_segmentedADpreference, ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lppe_T_segmentedADpreference },",
          "4303:   { &hf_lppe_segmentedADResume, ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lppe_OMA_LPPe_SegmentedADResume },",
          "4304:   { &hf_lppe_referencePointAssistanceReq, ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lppe_OMA_LPPe_ReferencePointAssistanceReq },",
          "4305:   { NULL, 0, 0, NULL }",
          "4306: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5188:   { &hf_lppe_ver1_1_localCellInformationReq, ASN1_NOT_EXTENSION_ROOT, ASN1_OPTIONAL    , dissect_lppe_OMA_LPPe_ver1_1_LocalCellInformationReq },",
          "5189:   { &hf_lppe_ver1_1_BroadcastAssistanceDataReq, ASN1_NOT_EXTENSION_ROOT, ASN1_OPTIONAL    , dissect_lppe_OMA_LPPe_ver1_1_BroadcastAssistanceDataReq },",
          "5190:   { &hf_lppe_ver1_1_AccessNetwork, ASN1_NOT_EXTENSION_ROOT, ASN1_OPTIONAL    , dissect_lppe_OMA_LPPe_ver1_1_AccessNetworkID },",
          "5191:   { &hf_lppe_ver1_1_groundMorphologyModelReq, ASN1_NOT_EXTENSION_ROOT, ASN1_OPTIONAL    , dissect_lppe_OMA_LPPe_ver1_1_GroundMorphologyModelReq },",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "5087: }",
          "5091:   { NULL, ASN1_EXTENSION_ROOT, 0, NULL }",
          "5092: };",
          "5094: static int",
          "5095: dissect_lppe_OMA_LPPe_Sensor_RequestAssistanceData(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "5096:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "",
          "[Removed Lines]",
          "5090: static const per_sequence_t OMA_LPPe_Sensor_RequestAssistanceData_sequence[] = {",
          "",
          "[Added Lines]",
          "5977: static const per_sequence_t OMA_LPPe_PressureSensorAD_sequence[] = {",
          "5981: static int",
          "5982: dissect_lppe_OMA_LPPe_PressureSensorAD(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "5983:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "5984:                                    ett_lppe_OMA_LPPe_PressureSensorAD, OMA_LPPe_PressureSensorAD_sequence);",
          "5986:   return offset;",
          "5987: }",
          "5990: static const per_sequence_t OMA_LPPe_Sensor_RequestAssistanceData_sequence[] = {",
          "5991:   { &hf_lppe_pressureSensorAD, ASN1_NOT_EXTENSION_ROOT, ASN1_OPTIONAL    , dissect_lppe_OMA_LPPe_PressureSensorAD },",
          "5992:   { NULL, 0, 0, NULL }",
          "5993: };",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "5199: static int",
          "5201:   offset = dissect_per_octet_string(tvb, offset, actx, tree, hf_index,",
          "5204:   return offset;",
          "5205: }",
          "",
          "[Removed Lines]",
          "5200: dissect_lppe_OCTET_STRING_SIZE_1_1(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "5202:                                        1, 1, FALSE, NULL);",
          "",
          "[Added Lines]",
          "6101: dissect_lppe_OCTET_STRING_SIZE_1_16(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "6103:                                        1, 16, FALSE, NULL);",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "5218: static const per_sequence_t T_mobileCode_sequence[] = {",
          "5219:   { &hf_lppe_registryID     , ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lppe_BIT_STRING_SIZE_12 },",
          "5221:   { &hf_lppe_resolutionIdentifier, ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lppe_OCTET_STRING_SIZE_1_18 },",
          "5222:   { NULL, 0, 0, NULL }",
          "5223: };",
          "",
          "[Removed Lines]",
          "5220:   { &hf_lppe_remainingPart  , ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lppe_OCTET_STRING_SIZE_1_1 },",
          "",
          "[Added Lines]",
          "6121:   { &hf_lppe_remainingPart  , ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lppe_OCTET_STRING_SIZE_1_16 },",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "5648: static const per_sequence_t OMA_LPPe_ProvidePeriodicADwithUpdate_sequence[] = {",
          "5650:   { &hf_lppe_typeOfADProvide, ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lppe_OMA_LPPe_TypeOfADProvide },",
          "5651:   { NULL, 0, 0, NULL }",
          "5652: };",
          "",
          "[Removed Lines]",
          "5649:   { &hf_lppe_periodicAD_session_ID, ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lppe_INTEGER_1_256 },",
          "",
          "[Added Lines]",
          "6550:   { &hf_lppe_periodicAD_session_ID, ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lppe_OCTET_STRING_SIZE_4 },",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "5838: static int",
          "5843:   return offset;",
          "5844: }",
          "",
          "[Removed Lines]",
          "5839: dissect_lppe_INTEGER_M524288_524287(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "5840:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "5841:                                                             -524288, 524287U, NULL, FALSE);",
          "",
          "[Added Lines]",
          "6740: dissect_lppe_INTEGER_M524288_524287(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "6741:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "6742:                                                             -524288, 524287U, NULL, FALSE);",
          "6744:   return offset;",
          "6745: }",
          "6749: static int",
          "6750: dissect_lppe_INTEGER_M32768_32767(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "6751:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "6752:                                                             -32768, 32767U, NULL, FALSE);",
          "6754:   return offset;",
          "6755: }",
          "6759: static int",
          "6760: dissect_lppe_INTEGER_0_127(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "6761:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "6762:                                                             0U, 127U, NULL, FALSE);",
          "6764:   return offset;",
          "6765: }",
          "6768: static const per_sequence_t OMA_LPPe_GeodeticUncertaintyAndConfidence_sequence[] = {",
          "6769:   { &hf_lppe_uncertainty    , ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lppe_INTEGER_0_127 },",
          "6770:   { &hf_lppe_confidence     , ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lppe_INTEGER_0_99 },",
          "6771:   { NULL, 0, 0, NULL }",
          "6772: };",
          "6774: static int",
          "6775: dissect_lppe_OMA_LPPe_GeodeticUncertaintyAndConfidence(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "6776:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "6777:                                    ett_lppe_OMA_LPPe_GeodeticUncertaintyAndConfidence, OMA_LPPe_GeodeticUncertaintyAndConfidence_sequence);",
          "6779:   return offset;",
          "6780: }",
          "6783: static const per_sequence_t OMA_LPPe_GeodeticRelativeAltitude_sequence[] = {",
          "6784:   { &hf_lppe_geodetic_height_depth, ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lppe_INTEGER_M32768_32767 },",
          "6785:   { &hf_lppe_geodetic_uncertainty_and_confidence, ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lppe_OMA_LPPe_GeodeticUncertaintyAndConfidence },",
          "6786:   { NULL, 0, 0, NULL }",
          "6787: };",
          "6789: static int",
          "6790: dissect_lppe_OMA_LPPe_GeodeticRelativeAltitude(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "6791:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "6792:                                    ett_lppe_OMA_LPPe_GeodeticRelativeAltitude, OMA_LPPe_GeodeticRelativeAltitude_sequence);",
          "6794:   return offset;",
          "6795: }",
          "6799: static int",
          "6800: dissect_lppe_INTEGER_M255_256(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "6801:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "6802:                                                             -255, 256U, NULL, FALSE);",
          "6804:   return offset;",
          "6805: }",
          "6808: static const per_sequence_t OMA_LPPe_CivicUncertaintyAndConfidence_sequence[] = {",
          "6809:   { &hf_lppe_uncertainty    , ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lppe_INTEGER_0_127 },",
          "6810:   { &hf_lppe_confidence     , ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lppe_INTEGER_0_99 },",
          "6811:   { NULL, 0, 0, NULL }",
          "6812: };",
          "6814: static int",
          "6815: dissect_lppe_OMA_LPPe_CivicUncertaintyAndConfidence(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "6816:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "6817:                                    ett_lppe_OMA_LPPe_CivicUncertaintyAndConfidence, OMA_LPPe_CivicUncertaintyAndConfidence_sequence);",
          "6819:   return offset;",
          "6820: }",
          "6823: static const per_sequence_t OMA_LPPe_CivicRelativeAltitude_sequence[] = {",
          "6824:   { &hf_lppe_civic_floors   , ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lppe_INTEGER_M255_256 },",
          "6825:   { &hf_lppe_civic_uncertainty_and_confidence, ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lppe_OMA_LPPe_CivicUncertaintyAndConfidence },",
          "6826:   { NULL, 0, 0, NULL }",
          "6827: };",
          "6829: static int",
          "6830: dissect_lppe_OMA_LPPe_CivicRelativeAltitude(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "6831:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "6832:                                    ett_lppe_OMA_LPPe_CivicRelativeAltitude, OMA_LPPe_CivicRelativeAltitude_sequence);",
          "6834:   return offset;",
          "6835: }",
          "6838: static const per_sequence_t OMA_LPPe_RelativeAltitude_sequence[] = {",
          "6839:   { &hf_lppe_geodeticRelativeAltitude, ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lppe_OMA_LPPe_GeodeticRelativeAltitude },",
          "6840:   { &hf_lppe_civicRelativeAltitude, ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lppe_OMA_LPPe_CivicRelativeAltitude },",
          "6841:   { NULL, 0, 0, NULL }",
          "6842: };",
          "6844: static int",
          "6845: dissect_lppe_OMA_LPPe_RelativeAltitude(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "6846:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "6847:                                    ett_lppe_OMA_LPPe_RelativeAltitude, OMA_LPPe_RelativeAltitude_sequence);",
          "6849:   return offset;",
          "6850: }",
          "6853: static const per_sequence_t T_ellipse_sequence[] = {",
          "6854:   { &hf_lppe_semimajor      , ASN1_NO_EXTENSIONS     , ASN1_NOT_OPTIONAL, dissect_lppe_INTEGER_0_127 },",
          "6855:   { &hf_lppe_semiminor      , ASN1_NO_EXTENSIONS     , ASN1_NOT_OPTIONAL, dissect_lppe_INTEGER_0_127 },",
          "6856:   { &hf_lppe_offsetAngle    , ASN1_NO_EXTENSIONS     , ASN1_NOT_OPTIONAL, dissect_lppe_INTEGER_0_179 },",
          "6857:   { NULL, 0, 0, NULL }",
          "6858: };",
          "6860: static int",
          "6861: dissect_lppe_T_ellipse(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "6862:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "6863:                                    ett_lppe_T_ellipse, T_ellipse_sequence);",
          "6865:   return offset;",
          "6866: }",
          "6869: static const value_string lppe_T_uncShape_vals[] = {",
          "6870:   {   0, \"circle\" },",
          "6871:   {   1, \"ellipse\" },",
          "6872:   { 0, NULL }",
          "6873: };",
          "6875: static const per_choice_t T_uncShape_choice[] = {",
          "6876:   {   0, &hf_lppe_circle         , ASN1_EXTENSION_ROOT    , dissect_lppe_INTEGER_0_127 },",
          "6877:   {   1, &hf_lppe_ellipse        , ASN1_EXTENSION_ROOT    , dissect_lppe_T_ellipse },",
          "6878:   { 0, NULL, 0, NULL }",
          "6879: };",
          "6881: static int",
          "6882: dissect_lppe_T_uncShape(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "6883:   offset = dissect_per_choice(tvb, offset, actx, tree, hf_index,",
          "6884:                                  ett_lppe_T_uncShape, T_uncShape_choice,",
          "6885:                                  NULL);",
          "6887:   return offset;",
          "6888: }",
          "6891: static const per_sequence_t OMA_LPPe_HorizontalUncertaintyAndConfidence_sequence[] = {",
          "6892:   { &hf_lppe_uncShape       , ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lppe_T_uncShape },",
          "6893:   { &hf_lppe_confidence     , ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lppe_INTEGER_0_99 },",
          "6894:   { NULL, 0, 0, NULL }",
          "6895: };",
          "6897: static int",
          "6898: dissect_lppe_OMA_LPPe_HorizontalUncertaintyAndConfidence(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "6899:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "6900:                                    ett_lppe_OMA_LPPe_HorizontalUncertaintyAndConfidence, OMA_LPPe_HorizontalUncertaintyAndConfidence_sequence);",
          "6902:   return offset;",
          "6903: }",
          "6906: static const per_sequence_t OMA_LPPe_RelativeLocation_sequence[] = {",
          "6907:   { &hf_lppe_units          , ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lppe_T_units },",
          "6908:   { &hf_lppe_arc_second_units, ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lppe_T_arc_second_units },",
          "6909:   { &hf_lppe_relativeNorth  , ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lppe_INTEGER_M524288_524287 },",
          "6910:   { &hf_lppe_relativeEast   , ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lppe_INTEGER_M524288_524287 },",
          "6911:   { &hf_lppe_relativeAltitude, ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lppe_OMA_LPPe_RelativeAltitude },",
          "6912:   { &hf_lppe_horizontalUncertainty, ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lppe_OMA_LPPe_HorizontalUncertaintyAndConfidence },",
          "6913:   { NULL, 0, 0, NULL }",
          "6914: };",
          "6916: static int",
          "6917: dissect_lppe_OMA_LPPe_RelativeLocation(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "6918:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "6919:                                    ett_lppe_OMA_LPPe_RelativeLocation, OMA_LPPe_RelativeLocation_sequence);",
          "6921:   return offset;",
          "6922: }",
          "6925: static const per_sequence_t OMA_LPPe_ReferencePointRelationship_sequence[] = {",
          "6926:   { &hf_lppe_referencePointUniqueID, ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lppe_OMA_LPPe_ReferencePointUniqueID },",
          "6927:   { &hf_lppe_relativeLocation, ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lppe_OMA_LPPe_RelativeLocation },",
          "6928:   { NULL, 0, 0, NULL }",
          "6929: };",
          "6931: static int",
          "6932: dissect_lppe_OMA_LPPe_ReferencePointRelationship(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "6933:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "6934:                                    ett_lppe_OMA_LPPe_ReferencePointRelationship, OMA_LPPe_ReferencePointRelationship_sequence);",
          "6936:   return offset;",
          "6937: }",
          "6940: static const per_sequence_t SEQUENCE_SIZE_1_8_OF_OMA_LPPe_ReferencePointRelationship_sequence_of[1] = {",
          "6941:   { &hf_lppe_relatedReferencePoints_item, ASN1_NO_EXTENSIONS     , ASN1_NOT_OPTIONAL, dissect_lppe_OMA_LPPe_ReferencePointRelationship },",
          "6942: };",
          "6944: static int",
          "6945: dissect_lppe_SEQUENCE_SIZE_1_8_OF_OMA_LPPe_ReferencePointRelationship(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "6946:   offset = dissect_per_constrained_sequence_of(tvb, offset, actx, tree, hf_index,",
          "6947:                                                   ett_lppe_SEQUENCE_SIZE_1_8_OF_OMA_LPPe_ReferencePointRelationship, SEQUENCE_SIZE_1_8_OF_OMA_LPPe_ReferencePointRelationship_sequence_of,",
          "6948:                                                   1, 8, FALSE);",
          "6950:   return offset;",
          "6951: }",
          "6955: static int",
          "6956: dissect_lppe_OMA_LPPe_Uri(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "6957: #line 30 \"../../asn1/lppe/lppe.cnf\"",
          "6958:   offset = dissect_per_restricted_character_string(tvb, offset, actx, tree, hf_index,",
          "6959:                                                       NO_BOUND, NO_BOUND, FALSE, \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789:/?#[]@!$&'()*+,;=-._~%\", 85,",
          "6960:                                                       NULL);",
          "6964:   return offset;",
          "6965: }",
          "6969: static int",
          "6970: dissect_lppe_OCTET_STRING_SIZE_1_64(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "6971:   offset = dissect_per_octet_string(tvb, offset, actx, tree, hf_index,",
          "6972:                                        1, 64, FALSE, NULL);",
          "6974:   return offset;",
          "6975: }",
          "6978: static const per_sequence_t OMA_LPPe_MapDataReference_sequence[] = {",
          "6979:   { &hf_lppe_dataID         , ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lppe_OMA_LPPe_AssistanceContainerID },",
          "6980:   { &hf_lppe_mapReference   , ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lppe_OCTET_STRING_SIZE_1_64 },",
          "6981:   { &hf_lppe_mapSize        , ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lppe_INTEGER_1_5000 },",
          "6982:   { NULL, 0, 0, NULL }",
          "6983: };",
          "6985: static int",
          "6986: dissect_lppe_OMA_LPPe_MapDataReference(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "6987:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "6988:                                    ett_lppe_OMA_LPPe_MapDataReference, OMA_LPPe_MapDataReference_sequence);",
          "6990:   return offset;",
          "6991: }",
          "6994: static const value_string lppe_T_mapDataUrl_vals[] = {",
          "6995:   {   0, \"mapDataUrl\" },",
          "6996:   {   1, \"mapDataRef\" },",
          "6997:   { 0, NULL }",
          "6998: };",
          "7000: static const per_choice_t T_mapDataUrl_choice[] = {",
          "7001:   {   0, &hf_lppe_mapDataUrl_01  , ASN1_NO_EXTENSIONS     , dissect_lppe_OMA_LPPe_Uri },",
          "7002:   {   1, &hf_lppe_mapDataRef     , ASN1_NO_EXTENSIONS     , dissect_lppe_OMA_LPPe_MapDataReference },",
          "7003:   { 0, NULL, 0, NULL }",
          "7004: };",
          "7006: static int",
          "7007: dissect_lppe_T_mapDataUrl(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "7008:   offset = dissect_per_choice(tvb, offset, actx, tree, hf_index,",
          "7009:                                  ett_lppe_T_mapDataUrl, T_mapDataUrl_choice,",
          "7010:                                  NULL);",
          "7012:   return offset;",
          "7013: }",
          "7016: static const value_string lppe_T_mapProvider_vals[] = {",
          "7017:   {   0, \"sameAsRefPointProvider\" },",
          "7018:   {   1, \"notSameAsRefPointProvider\" },",
          "7019:   { 0, NULL }",
          "7020: };",
          "7022: static const per_choice_t T_mapProvider_choice[] = {",
          "7023:   {   0, &hf_lppe_sameAsRefPointProvider, ASN1_EXTENSION_ROOT    , dissect_lppe_NULL },",
          "7024:   {   1, &hf_lppe_notSameAsRefPointProvider, ASN1_EXTENSION_ROOT    , dissect_lppe_OMA_LPPe_VendorOrOperatorID },",
          "7025:   { 0, NULL, 0, NULL }",
          "7026: };",
          "7028: static int",
          "7029: dissect_lppe_T_mapProvider(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "7030:   offset = dissect_per_choice(tvb, offset, actx, tree, hf_index,",
          "7031:                                  ett_lppe_T_mapProvider, T_mapProvider_choice,",
          "7032:                                  NULL);",
          "7034:   return offset;",
          "7035: }",
          "7039: static int",
          "7040: dissect_lppe_VisibleString_SIZE_1_64(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "7041:   offset = dissect_per_VisibleString(tvb, offset, actx, tree, hf_index,",
          "7042:                                           1, 64, FALSE);",
          "7044:   return offset;",
          "7045: }",
          "7048: static const value_string lppe_T_mapAssociation_vals[] = {",
          "7049:   {   0, \"referencePointUniqueID\" },",
          "7050:   {   1, \"otherID\" },",
          "7051:   {   2, \"mapOffset\" },",
          "7052:   {   3, \"origin\" },",
          "7053:   { 0, NULL }",
          "7054: };",
          "7056: static const per_choice_t T_mapAssociation_choice[] = {",
          "7057:   {   0, &hf_lppe_referencePointUniqueID_01, ASN1_EXTENSION_ROOT    , dissect_lppe_NULL },",
          "7058:   {   1, &hf_lppe_otherID        , ASN1_EXTENSION_ROOT    , dissect_lppe_VisibleString_SIZE_1_64 },",
          "7059:   {   2, &hf_lppe_mapOffset      , ASN1_EXTENSION_ROOT    , dissect_lppe_OMA_LPPe_RelativeLocation },",
          "7060:   {   3, &hf_lppe_origin         , ASN1_EXTENSION_ROOT    , dissect_lppe_NULL },",
          "7061:   { 0, NULL, 0, NULL }",
          "7062: };",
          "7064: static int",
          "7065: dissect_lppe_T_mapAssociation(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "7066:   offset = dissect_per_choice(tvb, offset, actx, tree, hf_index,",
          "7067:                                  ett_lppe_T_mapAssociation, T_mapAssociation_choice,",
          "7068:                                  NULL);",
          "7070:   return offset;",
          "7071: }",
          "7075: static int",
          "7076: dissect_lppe_INTEGER_0_359(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "7077:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "7078:                                                             0U, 359U, NULL, FALSE);",
          "7080:   return offset;",
          "7081: }",
          "7084: static const per_sequence_t OMA_LPPe_MapDataReferenceElement_sequence[] = {",
          "7085:   { &hf_lppe_mapDataUrl     , ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lppe_T_mapDataUrl },",
          "7086:   { &hf_lppe_mapProvider    , ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lppe_T_mapProvider },",
          "7087:   { &hf_lppe_mapAssociation , ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lppe_T_mapAssociation },",
          "7088:   { &hf_lppe_mapHorizontalOrientation, ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lppe_INTEGER_0_359 },",
          "7089:   { NULL, 0, 0, NULL }",
          "7090: };",
          "7092: static int",
          "7093: dissect_lppe_OMA_LPPe_MapDataReferenceElement(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "7094:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "7095:                                    ett_lppe_OMA_LPPe_MapDataReferenceElement, OMA_LPPe_MapDataReferenceElement_sequence);",
          "7097:   return offset;",
          "7098: }",
          "7101: static const per_sequence_t OMA_LPPe_MapDataInformation_sequence_of[1] = {",
          "7102:   { &hf_lppe_OMA_LPPe_MapDataInformation_item, ASN1_NO_EXTENSIONS     , ASN1_NOT_OPTIONAL, dissect_lppe_OMA_LPPe_MapDataReferenceElement },",
          "7103: };",
          "7105: static int",
          "7106: dissect_lppe_OMA_LPPe_MapDataInformation(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "7107:   offset = dissect_per_constrained_sequence_of(tvb, offset, actx, tree, hf_index,",
          "7108:                                                   ett_lppe_OMA_LPPe_MapDataInformation, OMA_LPPe_MapDataInformation_sequence_of,",
          "7109:                                                   1, 16, FALSE);",
          "7111:   return offset;",
          "7112: }",
          "7115: static const per_sequence_t OMA_LPPe_ReferencePoint_sequence[] = {",
          "7116:   { &hf_lppe_referencePointUniqueID, ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lppe_OMA_LPPe_ReferencePointUniqueID },",
          "7117:   { &hf_lppe_referencePointGeographicLocation, ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lppe_T_referencePointGeographicLocation },",
          "7118:   { &hf_lppe_referencePointCivicLocation, ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lppe_OMA_LPPe_CivicLocation },",
          "7119:   { &hf_lppe_referencePointFloorLevel, ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lppe_INTEGER_M20_235 },",
          "7120:   { &hf_lppe_relatedReferencePoints, ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lppe_SEQUENCE_SIZE_1_8_OF_OMA_LPPe_ReferencePointRelationship },",
          "7121:   { &hf_lppe_mapDataInformation, ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lppe_OMA_LPPe_MapDataInformation },",
          "7122:   { NULL, 0, 0, NULL }",
          "7123: };",
          "7125: static int",
          "7126: dissect_lppe_OMA_LPPe_ReferencePoint(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "7127:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "7128:                                    ett_lppe_OMA_LPPe_ReferencePoint, OMA_LPPe_ReferencePoint_sequence);",
          "7130:   return offset;",
          "7131: }",
          "7134: static const per_sequence_t SEQUENCE_SIZE_1_maxCellSets_OF_GNSS_ReferenceTime_sequence_of[1] = {",
          "7135:   { &hf_lppe_ver1_1_timingInformation_item, ASN1_NO_EXTENSIONS     , ASN1_NOT_OPTIONAL, dissect_lpp_GNSS_ReferenceTime },",
          "7136: };",
          "7138: static int",
          "7139: dissect_lppe_SEQUENCE_SIZE_1_maxCellSets_OF_GNSS_ReferenceTime(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "7140:   offset = dissect_per_constrained_sequence_of(tvb, offset, actx, tree, hf_index,",
          "7141:                                                   ett_lppe_SEQUENCE_SIZE_1_maxCellSets_OF_GNSS_ReferenceTime, SEQUENCE_SIZE_1_maxCellSets_OF_GNSS_ReferenceTime_sequence_of,",
          "7142:                                                   1, maxCellSets, FALSE);",
          "7144:   return offset;",
          "7145: }",
          "7148: static const value_string lppe_T_coverage_vals[] = {",
          "7149:   {   0, \"circle\" },",
          "7150:   {   1, \"ellipse\" },",
          "7151:   {   2, \"arc\" },",
          "7152:   {   3, \"polygon\" },",
          "7153:   { 0, NULL }",
          "7154: };",
          "7156: static const per_choice_t T_coverage_choice[] = {",
          "7157:   {   0, &hf_lppe_circle_01      , ASN1_EXTENSION_ROOT    , dissect_lpp_Ellipsoid_PointWithUncertaintyCircle },",
          "7158:   {   1, &hf_lppe_ellipse_01     , ASN1_EXTENSION_ROOT    , dissect_lpp_EllipsoidPointWithUncertaintyEllipse },",
          "7159:   {   2, &hf_lppe_arc            , ASN1_EXTENSION_ROOT    , dissect_lpp_EllipsoidArc },",
          "7160:   {   3, &hf_lppe_polygon        , ASN1_EXTENSION_ROOT    , dissect_lpp_Polygon },",
          "7161:   { 0, NULL, 0, NULL }",
          "7162: };",
          "7164: static int",
          "7165: dissect_lppe_T_coverage(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "7166:   offset = dissect_per_choice(tvb, offset, actx, tree, hf_index,",
          "7167:                                  ett_lppe_T_coverage, T_coverage_choice,",
          "7168:                                  NULL);",
          "7170:   return offset;",
          "7171: }",
          "7175: static int",
          "7176: dissect_lppe_INTEGER_1_6(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "7177:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "7178:                                                             1U, 6U, NULL, FALSE);",
          "7180:   return offset;",
          "7181: }",
          "7184: static const per_sequence_t OMA_LPPe_ver1_1_CellInformation_sequence[] = {",
          "7185:   { &hf_lppe_cellID         , ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lppe_OMA_LPPe_ver1_1_CellGlobalID },",
          "7186:   { &hf_lppe_coverage       , ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lppe_T_coverage },",
          "7187:   { &hf_lppe_coordinates    , ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lpp_EllipsoidPointWithAltitudeAndUncertaintyEllipsoid },",
          "7188:   { &hf_lppe_frequencyAccuracy, ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lppe_INTEGER_1_6 },",
          "7189:   { NULL, 0, 0, NULL }",
          "7190: };",
          "7192: static int",
          "7193: dissect_lppe_OMA_LPPe_ver1_1_CellInformation(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "7194:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "7195:                                    ett_lppe_OMA_LPPe_ver1_1_CellInformation, OMA_LPPe_ver1_1_CellInformation_sequence);",
          "7197:   return offset;",
          "7198: }",
          "7201: static const per_sequence_t SEQUENCE_SIZE_1_maxCells_OF_OMA_LPPe_ver1_1_CellInformation_sequence_of[1] = {",
          "7202:   { &hf_lppe_ver1_1_other_CellInformation_item, ASN1_NO_EXTENSIONS     , ASN1_NOT_OPTIONAL, dissect_lppe_OMA_LPPe_ver1_1_CellInformation },",
          "7203: };",
          "7205: static int",
          "7206: dissect_lppe_SEQUENCE_SIZE_1_maxCells_OF_OMA_LPPe_ver1_1_CellInformation(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "7207:   offset = dissect_per_constrained_sequence_of(tvb, offset, actx, tree, hf_index,",
          "7208:                                                   ett_lppe_SEQUENCE_SIZE_1_maxCells_OF_OMA_LPPe_ver1_1_CellInformation, SEQUENCE_SIZE_1_maxCells_OF_OMA_LPPe_ver1_1_CellInformation_sequence_of,",
          "7209:                                                   1, maxCells, FALSE);",
          "7211:   return offset;",
          "7212: }",
          "7215: static const per_sequence_t OMA_LPPe_ver1_1_LocalCellInformation_sequence[] = {",
          "7216:   { &hf_lppe_ver1_1_timingInformation, ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lppe_SEQUENCE_SIZE_1_maxCellSets_OF_GNSS_ReferenceTime },",
          "7217:   { &hf_lppe_ver1_1_other_CellInformation, ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lppe_SEQUENCE_SIZE_1_maxCells_OF_OMA_LPPe_ver1_1_CellInformation },",
          "7218:   { NULL, 0, 0, NULL }",
          "7219: };",
          "7221: static int",
          "7222: dissect_lppe_OMA_LPPe_ver1_1_LocalCellInformation(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "7223:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "7224:                                    ett_lppe_OMA_LPPe_ver1_1_LocalCellInformation, OMA_LPPe_ver1_1_LocalCellInformation_sequence);",
          "7226:   return offset;",
          "7227: }",
          "7230: static const per_sequence_t SEQUENCE_SIZE_1_16_OF_OMA_LPPe_ver1_1_AccessNetworkID_sequence_of[1] = {",
          "7231:   { &hf_lppe_accessNetworks_item, ASN1_NO_EXTENSIONS     , ASN1_NOT_OPTIONAL, dissect_lppe_OMA_LPPe_ver1_1_AccessNetworkID },",
          "7232: };",
          "7234: static int",
          "7235: dissect_lppe_SEQUENCE_SIZE_1_16_OF_OMA_LPPe_ver1_1_AccessNetworkID(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "7236:   offset = dissect_per_constrained_sequence_of(tvb, offset, actx, tree, hf_index,",
          "7237:                                                   ett_lppe_SEQUENCE_SIZE_1_16_OF_OMA_LPPe_ver1_1_AccessNetworkID, SEQUENCE_SIZE_1_16_OF_OMA_LPPe_ver1_1_AccessNetworkID_sequence_of,",
          "7238:                                                   1, 16, FALSE);",
          "7240:   return offset;",
          "7241: }",
          "7244: static const value_string lppe_T_coverageArea_vals[] = {",
          "7245:   {   0, \"circle\" },",
          "7246:   {   1, \"ellipse\" },",
          "7247:   {   2, \"polygon\" },",
          "7248:   { 0, NULL }",
          "7249: };",
          "7251: static const per_choice_t T_coverageArea_choice[] = {",
          "7252:   {   0, &hf_lppe_circle_01      , ASN1_EXTENSION_ROOT    , dissect_lpp_Ellipsoid_PointWithUncertaintyCircle },",
          "7253:   {   1, &hf_lppe_ellipse_01     , ASN1_EXTENSION_ROOT    , dissect_lpp_EllipsoidPointWithUncertaintyEllipse },",
          "7254:   {   2, &hf_lppe_polygon        , ASN1_EXTENSION_ROOT    , dissect_lpp_Polygon },",
          "7255:   { 0, NULL, 0, NULL }",
          "7256: };",
          "7258: static int",
          "7259: dissect_lppe_T_coverageArea(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "7260:   offset = dissect_per_choice(tvb, offset, actx, tree, hf_index,",
          "7261:                                  ett_lppe_T_coverageArea, T_coverageArea_choice,",
          "7262:                                  NULL);",
          "7264:   return offset;",
          "7265: }",
          "7268: static const per_sequence_t OMA_LPPe_ver1_1_ServerID_sequence[] = {",
          "7269:   { &hf_lppe_provider_ID    , ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lppe_OMA_LPPe_VendorOrOperatorID },",
          "7270:   { &hf_lppe_server_ID      , ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lppe_OCTET_STRING_SIZE_4 },",
          "7271:   { NULL, 0, 0, NULL }",
          "7272: };",
          "7274: static int",
          "7275: dissect_lppe_OMA_LPPe_ver1_1_ServerID(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "7276:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "7277:                                    ett_lppe_OMA_LPPe_ver1_1_ServerID, OMA_LPPe_ver1_1_ServerID_sequence);",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "5848: static int",
          "5853:   return offset;",
          "5854: }",
          "",
          "[Removed Lines]",
          "5849: dissect_lppe_INTEGER_M32768_32767(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "5850:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "5851:                                                             -32768, 32767U, NULL, FALSE);",
          "",
          "[Added Lines]",
          "7285: dissect_lppe_BIT_STRING_SIZE_128(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "7286:   offset = dissect_per_bit_string(tvb, offset, actx, tree, hf_index,",
          "7287:                                      128, 128, FALSE, NULL, NULL);",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "5858: static int",
          "5863:   return offset;",
          "5864: }",
          "5870:   { NULL, 0, 0, NULL }",
          "5871: };",
          "5873: static int",
          "5875:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "5878:   return offset;",
          "5879: }",
          "5886: };",
          "5888: static int",
          "5893:   return offset;",
          "5894: }",
          "",
          "[Removed Lines]",
          "5859: dissect_lppe_INTEGER_0_127(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "5860:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "5861:                                                             0U, 127U, NULL, FALSE);",
          "5867: static const per_sequence_t OMA_LPPe_GeodeticUncertaintyAndConfidence_sequence[] = {",
          "5868:   { &hf_lppe_uncertainty    , ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lppe_INTEGER_0_127 },",
          "5869:   { &hf_lppe_confidence     , ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lppe_INTEGER_0_99 },",
          "5874: dissect_lppe_OMA_LPPe_GeodeticUncertaintyAndConfidence(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "5876:                                    ett_lppe_OMA_LPPe_GeodeticUncertaintyAndConfidence, OMA_LPPe_GeodeticUncertaintyAndConfidence_sequence);",
          "5882: static const per_sequence_t OMA_LPPe_GeodeticRelativeAltitude_sequence[] = {",
          "5883:   { &hf_lppe_geodetic_height_depth, ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lppe_INTEGER_M32768_32767 },",
          "5884:   { &hf_lppe_geodetic_uncertainty_and_confidence, ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lppe_OMA_LPPe_GeodeticUncertaintyAndConfidence },",
          "5885:   { NULL, 0, 0, NULL }",
          "5889: dissect_lppe_OMA_LPPe_GeodeticRelativeAltitude(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "5890:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "5891:                                    ett_lppe_OMA_LPPe_GeodeticRelativeAltitude, OMA_LPPe_GeodeticRelativeAltitude_sequence);",
          "",
          "[Added Lines]",
          "7295: dissect_lppe_BIT_STRING_SIZE_1_128(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "7296:   offset = dissect_per_bit_string(tvb, offset, actx, tree, hf_index,",
          "7297:                                      1, 128, FALSE, NULL, NULL);",
          "7303: static const per_sequence_t OMA_LPPe_ver1_1_CipherSet_sequence[] = {",
          "7304:   { &hf_lppe_cipherSetID    , ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lppe_OMA_LPPe_ver1_1_CipherSetID },",
          "7305:   { &hf_lppe_cipherKey      , ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lppe_BIT_STRING_SIZE_128 },",
          "7306:   { &hf_lppe_c0             , ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lppe_BIT_STRING_SIZE_1_128 },",
          "7311: dissect_lppe_OMA_LPPe_ver1_1_CipherSet(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "7313:                                    ett_lppe_OMA_LPPe_ver1_1_CipherSet, OMA_LPPe_ver1_1_CipherSet_sequence);",
          "7319: static const per_sequence_t SEQUENCE_SIZE_1_16_OF_OMA_LPPe_ver1_1_CipherSet_sequence_of[1] = {",
          "7320:   { &hf_lppe_cipherSets_item_01, ASN1_NO_EXTENSIONS     , ASN1_NOT_OPTIONAL, dissect_lppe_OMA_LPPe_ver1_1_CipherSet },",
          "7324: dissect_lppe_SEQUENCE_SIZE_1_16_OF_OMA_LPPe_ver1_1_CipherSet(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "7325:   offset = dissect_per_constrained_sequence_of(tvb, offset, actx, tree, hf_index,",
          "7326:                                                   ett_lppe_SEQUENCE_SIZE_1_16_OF_OMA_LPPe_ver1_1_CipherSet, SEQUENCE_SIZE_1_16_OF_OMA_LPPe_ver1_1_CipherSet_sequence_of,",
          "7327:                                                   1, 16, FALSE);",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "5898: static int",
          "5903:   return offset;",
          "5904: }",
          "5913: static int",
          "5918:   return offset;",
          "5919: }",
          "5925:   { NULL, 0, 0, NULL }",
          "5926: };",
          "5928: static int",
          "5930:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "5933:   return offset;",
          "5934: }",
          "5943: static int",
          "5948:   return offset;",
          "5949: }",
          "5956:   { NULL, 0, 0, NULL }",
          "5957: };",
          "5959: static int",
          "5961:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "5964:   return offset;",
          "5965: }",
          "5978: };",
          "5980: static int",
          "5986:   return offset;",
          "5987: }",
          "5993:   { NULL, 0, 0, NULL }",
          "5994: };",
          "5996: static int",
          "5998:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "6001:   return offset;",
          "6002: }",
          "6013: };",
          "6015: static int",
          "6020:   return offset;",
          "6021: }",
          "6027:   { NULL, 0, 0, NULL }",
          "6028: };",
          "6030: static int",
          "6032:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "6035:   return offset;",
          "6036: }",
          "6043: static int",
          "6049:   return offset;",
          "6050: }",
          "",
          "[Removed Lines]",
          "5899: dissect_lppe_INTEGER_M255_256(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "5900:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "5901:                                                             -255, 256U, NULL, FALSE);",
          "5907: static const per_sequence_t OMA_LPPe_CivicUncertaintyAndConfidence_sequence[] = {",
          "5908:   { &hf_lppe_uncertainty    , ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lppe_INTEGER_0_127 },",
          "5909:   { &hf_lppe_confidence     , ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lppe_INTEGER_0_99 },",
          "5910:   { NULL, 0, 0, NULL }",
          "5911: };",
          "5914: dissect_lppe_OMA_LPPe_CivicUncertaintyAndConfidence(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "5915:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "5916:                                    ett_lppe_OMA_LPPe_CivicUncertaintyAndConfidence, OMA_LPPe_CivicUncertaintyAndConfidence_sequence);",
          "5922: static const per_sequence_t OMA_LPPe_CivicRelativeAltitude_sequence[] = {",
          "5923:   { &hf_lppe_civic_floors   , ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lppe_INTEGER_M255_256 },",
          "5924:   { &hf_lppe_civic_uncertainty_and_confidence, ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lppe_OMA_LPPe_CivicUncertaintyAndConfidence },",
          "5929: dissect_lppe_OMA_LPPe_CivicRelativeAltitude(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "5931:                                    ett_lppe_OMA_LPPe_CivicRelativeAltitude, OMA_LPPe_CivicRelativeAltitude_sequence);",
          "5937: static const per_sequence_t OMA_LPPe_RelativeAltitude_sequence[] = {",
          "5938:   { &hf_lppe_geodeticRelativeAltitude, ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lppe_OMA_LPPe_GeodeticRelativeAltitude },",
          "5939:   { &hf_lppe_civicRelativeAltitude, ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lppe_OMA_LPPe_CivicRelativeAltitude },",
          "5940:   { NULL, 0, 0, NULL }",
          "5941: };",
          "5944: dissect_lppe_OMA_LPPe_RelativeAltitude(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "5945:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "5946:                                    ett_lppe_OMA_LPPe_RelativeAltitude, OMA_LPPe_RelativeAltitude_sequence);",
          "5952: static const per_sequence_t T_ellipse_sequence[] = {",
          "5953:   { &hf_lppe_semimajor      , ASN1_NO_EXTENSIONS     , ASN1_NOT_OPTIONAL, dissect_lppe_INTEGER_0_127 },",
          "5954:   { &hf_lppe_semiminor      , ASN1_NO_EXTENSIONS     , ASN1_NOT_OPTIONAL, dissect_lppe_INTEGER_0_127 },",
          "5955:   { &hf_lppe_offsetAngle    , ASN1_NO_EXTENSIONS     , ASN1_NOT_OPTIONAL, dissect_lppe_INTEGER_0_179 },",
          "5960: dissect_lppe_T_ellipse(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "5962:                                    ett_lppe_T_ellipse, T_ellipse_sequence);",
          "5968: static const value_string lppe_T_uncShape_vals[] = {",
          "5969:   {   0, \"circle\" },",
          "5970:   {   1, \"ellipse\" },",
          "5971:   { 0, NULL }",
          "5972: };",
          "5974: static const per_choice_t T_uncShape_choice[] = {",
          "5975:   {   0, &hf_lppe_circle         , ASN1_EXTENSION_ROOT    , dissect_lppe_INTEGER_0_127 },",
          "5976:   {   1, &hf_lppe_ellipse        , ASN1_EXTENSION_ROOT    , dissect_lppe_T_ellipse },",
          "5977:   { 0, NULL, 0, NULL }",
          "5981: dissect_lppe_T_uncShape(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "5982:   offset = dissect_per_choice(tvb, offset, actx, tree, hf_index,",
          "5983:                                  ett_lppe_T_uncShape, T_uncShape_choice,",
          "5984:                                  NULL);",
          "5990: static const per_sequence_t OMA_LPPe_HorizontalUncertaintyAndConfidence_sequence[] = {",
          "5991:   { &hf_lppe_uncShape       , ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lppe_T_uncShape },",
          "5992:   { &hf_lppe_confidence     , ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lppe_INTEGER_0_99 },",
          "5997: dissect_lppe_OMA_LPPe_HorizontalUncertaintyAndConfidence(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "5999:                                    ett_lppe_OMA_LPPe_HorizontalUncertaintyAndConfidence, OMA_LPPe_HorizontalUncertaintyAndConfidence_sequence);",
          "6005: static const per_sequence_t OMA_LPPe_RelativeLocation_sequence[] = {",
          "6006:   { &hf_lppe_units          , ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lppe_T_units },",
          "6007:   { &hf_lppe_arc_second_units, ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lppe_T_arc_second_units },",
          "6008:   { &hf_lppe_relativeNorth  , ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lppe_INTEGER_M524288_524287 },",
          "6009:   { &hf_lppe_relativeEast   , ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lppe_INTEGER_M524288_524287 },",
          "6010:   { &hf_lppe_relativeAltitude, ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lppe_OMA_LPPe_RelativeAltitude },",
          "6011:   { &hf_lppe_horizontalUncertainty, ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lppe_OMA_LPPe_HorizontalUncertaintyAndConfidence },",
          "6012:   { NULL, 0, 0, NULL }",
          "6016: dissect_lppe_OMA_LPPe_RelativeLocation(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "6017:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "6018:                                    ett_lppe_OMA_LPPe_RelativeLocation, OMA_LPPe_RelativeLocation_sequence);",
          "6024: static const per_sequence_t OMA_LPPe_ReferencePointRelationship_sequence[] = {",
          "6025:   { &hf_lppe_referencePointUniqueID, ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lppe_OMA_LPPe_ReferencePointUniqueID },",
          "6026:   { &hf_lppe_relativeLocation, ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lppe_OMA_LPPe_RelativeLocation },",
          "6031: dissect_lppe_OMA_LPPe_ReferencePointRelationship(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "6033:                                    ett_lppe_OMA_LPPe_ReferencePointRelationship, OMA_LPPe_ReferencePointRelationship_sequence);",
          "6039: static const per_sequence_t SEQUENCE_SIZE_1_8_OF_OMA_LPPe_ReferencePointRelationship_sequence_of[1] = {",
          "6040:   { &hf_lppe_relatedReferencePoints_item, ASN1_NO_EXTENSIONS     , ASN1_NOT_OPTIONAL, dissect_lppe_OMA_LPPe_ReferencePointRelationship },",
          "6041: };",
          "6044: dissect_lppe_SEQUENCE_SIZE_1_8_OF_OMA_LPPe_ReferencePointRelationship(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "6045:   offset = dissect_per_constrained_sequence_of(tvb, offset, actx, tree, hf_index,",
          "6046:                                                   ett_lppe_SEQUENCE_SIZE_1_8_OF_OMA_LPPe_ReferencePointRelationship, SEQUENCE_SIZE_1_8_OF_OMA_LPPe_ReferencePointRelationship_sequence_of,",
          "6047:                                                   1, 8, FALSE);",
          "",
          "[Added Lines]",
          "7335: dissect_lppe_BIT_STRING_SIZE_2048(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "7336:   offset = dissect_per_bit_string(tvb, offset, actx, tree, hf_index,",
          "7337:                                      2048, 2048, FALSE, NULL, NULL);",
          "7345: dissect_lppe_BIT_STRING_SIZE_2_2048(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "7346:   offset = dissect_per_bit_string(tvb, offset, actx, tree, hf_index,",
          "7347:                                      2, 2048, FALSE, NULL, NULL);",
          "7353: static const per_sequence_t T_rsaPublicKey_sequence[] = {",
          "7354:   { &hf_lppe_modulus        , ASN1_NO_EXTENSIONS     , ASN1_NOT_OPTIONAL, dissect_lppe_BIT_STRING_SIZE_2048 },",
          "7355:   { &hf_lppe_exponent       , ASN1_NO_EXTENSIONS     , ASN1_NOT_OPTIONAL, dissect_lppe_BIT_STRING_SIZE_2_2048 },",
          "7360: dissect_lppe_T_rsaPublicKey(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "7362:                                    ett_lppe_T_rsaPublicKey, T_rsaPublicKey_sequence);",
          "7370: dissect_lppe_INTEGER_0_32(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "7371:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "7372:                                                             0U, 32U, NULL, FALSE);",
          "7378: static const per_sequence_t OMA_LPPe_ver1_1_AuthenticationSet_sequence[] = {",
          "7379:   { &hf_lppe_authenticationSetID, ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lppe_OMA_LPPe_ver1_1_AuthenticationSetID },",
          "7380:   { &hf_lppe_rsaPublicKey   , ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lppe_T_rsaPublicKey },",
          "7381:   { &hf_lppe_saltLength     , ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lppe_INTEGER_0_32 },",
          "7386: dissect_lppe_OMA_LPPe_ver1_1_AuthenticationSet(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "7388:                                    ett_lppe_OMA_LPPe_ver1_1_AuthenticationSet, OMA_LPPe_ver1_1_AuthenticationSet_sequence);",
          "7394: static const per_sequence_t SEQUENCE_SIZE_1_4_OF_OMA_LPPe_ver1_1_AuthenticationSet_sequence_of[1] = {",
          "7395:   { &hf_lppe_authentication_item, ASN1_NO_EXTENSIONS     , ASN1_NOT_OPTIONAL, dissect_lppe_OMA_LPPe_ver1_1_AuthenticationSet },",
          "7399: dissect_lppe_SEQUENCE_SIZE_1_4_OF_OMA_LPPe_ver1_1_AuthenticationSet(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "7400:   offset = dissect_per_constrained_sequence_of(tvb, offset, actx, tree, hf_index,",
          "7401:                                                   ett_lppe_SEQUENCE_SIZE_1_4_OF_OMA_LPPe_ver1_1_AuthenticationSet, SEQUENCE_SIZE_1_4_OF_OMA_LPPe_ver1_1_AuthenticationSet_sequence_of,",
          "7402:                                                   1, 4, FALSE);",
          "7408: static const per_sequence_t OMA_LPPe_ver1_1_EncapsulatedMode_sequence[] = {",
          "7409:   { &hf_lppe_serverID       , ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lppe_OMA_LPPe_ver1_1_ServerID },",
          "7410:   { &hf_lppe_cipherSets_01  , ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lppe_SEQUENCE_SIZE_1_16_OF_OMA_LPPe_ver1_1_CipherSet },",
          "7411:   { &hf_lppe_authentication_01, ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lppe_SEQUENCE_SIZE_1_4_OF_OMA_LPPe_ver1_1_AuthenticationSet },",
          "7416: dissect_lppe_OMA_LPPe_ver1_1_EncapsulatedMode(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "7418:                                    ett_lppe_OMA_LPPe_ver1_1_EncapsulatedMode, OMA_LPPe_ver1_1_EncapsulatedMode_sequence);",
          "7424: static const value_string lppe_T_broadcastMode_vals[] = {",
          "7425:   {   0, \"unencapsulated\" },",
          "7426:   {   1, \"encapsulated\" },",
          "7427:   { 0, NULL }",
          "7428: };",
          "7430: static const per_choice_t T_broadcastMode_choice[] = {",
          "7431:   {   0, &hf_lppe_unencapsulated , ASN1_EXTENSION_ROOT    , dissect_lppe_NULL },",
          "7432:   {   1, &hf_lppe_encapsulated   , ASN1_EXTENSION_ROOT    , dissect_lppe_OMA_LPPe_ver1_1_EncapsulatedMode },",
          "7433:   { 0, NULL, 0, NULL }",
          "7437: dissect_lppe_T_broadcastMode(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "7438:   offset = dissect_per_choice(tvb, offset, actx, tree, hf_index,",
          "7439:                                  ett_lppe_T_broadcastMode, T_broadcastMode_choice,",
          "7440:                                  NULL);",
          "7446: static const per_sequence_t OMA_LPPe_ver1_1_BroadcastAssistanceData_sequence[] = {",
          "7447:   { &hf_lppe_broadcastSystem_01, ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lppe_OMA_LPPe_ver1_1_BroadcastSystemID },",
          "7448:   { &hf_lppe_accessNetworks , ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lppe_SEQUENCE_SIZE_1_16_OF_OMA_LPPe_ver1_1_AccessNetworkID },",
          "7449:   { &hf_lppe_coverageArea   , ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lppe_T_coverageArea },",
          "7450:   { &hf_lppe_broadcastADTypes, ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lppe_OMA_LPPe_ver1_1_BroadcastADTypes },",
          "7451:   { &hf_lppe_broadcastMode  , ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lppe_T_broadcastMode },",
          "7456: dissect_lppe_OMA_LPPe_ver1_1_BroadcastAssistanceData(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "7458:                                    ett_lppe_OMA_LPPe_ver1_1_BroadcastAssistanceData, OMA_LPPe_ver1_1_BroadcastAssistanceData_sequence);",
          "7466: dissect_lppe_INTEGER_M500_9000(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "7467:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "7468:                                                             -500, 9000U, NULL, FALSE);",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "6054: static int",
          "6060:   return offset;",
          "6061: }",
          "",
          "[Removed Lines]",
          "6055: dissect_lppe_OMA_LPPe_Uri(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "6056:   offset = dissect_per_restricted_character_string(tvb, offset, actx, tree, hf_index,",
          "6057:                                                       NO_BOUND, NO_BOUND, FALSE, \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789:/?#[]@!$&'()*+,;=-._~\", 84,",
          "6058:                                                       NULL);",
          "",
          "[Added Lines]",
          "7476: dissect_lppe_INTEGER_2_1012(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "7477:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "7478:                                                             2U, 1012U, NULL, FALSE);",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "6065: static int",
          "6070:   return offset;",
          "6071: }",
          "6081: static int",
          "6086:   return offset;",
          "6087: }",
          "6100: };",
          "6102: static int",
          "6108:   return offset;",
          "6109: }",
          "6122: };",
          "6124: static int",
          "6130:   return offset;",
          "6131: }",
          "6135: static int",
          "6140:   return offset;",
          "6141: }",
          "6160: static int",
          "6166:   return offset;",
          "6167: }",
          "6171: static int",
          "6176:   return offset;",
          "6177: }",
          "6186: };",
          "6188: static int",
          "6193:   return offset;",
          "6194: }",
          "6199: };",
          "6201: static int",
          "6207:   return offset;",
          "6208: }",
          "6218:   { NULL, 0, 0, NULL }",
          "6219: };",
          "6221: static int",
          "6223:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "6226:   return offset;",
          "6227: }",
          "",
          "[Removed Lines]",
          "6066: dissect_lppe_OCTET_STRING_SIZE_1_64(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "6067:   offset = dissect_per_octet_string(tvb, offset, actx, tree, hf_index,",
          "6068:                                        1, 64, FALSE, NULL);",
          "6074: static const per_sequence_t OMA_LPPe_MapDataReference_sequence[] = {",
          "6075:   { &hf_lppe_dataID         , ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lppe_OMA_LPPe_AssistanceContainerID },",
          "6076:   { &hf_lppe_mapReference   , ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lppe_OCTET_STRING_SIZE_1_64 },",
          "6077:   { &hf_lppe_mapSize        , ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lppe_INTEGER_1_5000 },",
          "6078:   { NULL, 0, 0, NULL }",
          "6079: };",
          "6082: dissect_lppe_OMA_LPPe_MapDataReference(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "6083:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "6084:                                    ett_lppe_OMA_LPPe_MapDataReference, OMA_LPPe_MapDataReference_sequence);",
          "6090: static const value_string lppe_T_mapDataUrl_vals[] = {",
          "6091:   {   0, \"mapDataUrl\" },",
          "6092:   {   1, \"mapDataRef\" },",
          "6093:   { 0, NULL }",
          "6094: };",
          "6096: static const per_choice_t T_mapDataUrl_choice[] = {",
          "6097:   {   0, &hf_lppe_mapDataUrl_01  , ASN1_NO_EXTENSIONS     , dissect_lppe_OMA_LPPe_Uri },",
          "6098:   {   1, &hf_lppe_mapDataRef     , ASN1_NO_EXTENSIONS     , dissect_lppe_OMA_LPPe_MapDataReference },",
          "6099:   { 0, NULL, 0, NULL }",
          "6103: dissect_lppe_T_mapDataUrl(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "6104:   offset = dissect_per_choice(tvb, offset, actx, tree, hf_index,",
          "6105:                                  ett_lppe_T_mapDataUrl, T_mapDataUrl_choice,",
          "6106:                                  NULL);",
          "6112: static const value_string lppe_T_mapProvider_vals[] = {",
          "6113:   {   0, \"sameAsRefPointProvider\" },",
          "6114:   {   1, \"notSameAsRefPointProvider\" },",
          "6115:   { 0, NULL }",
          "6116: };",
          "6118: static const per_choice_t T_mapProvider_choice[] = {",
          "6119:   {   0, &hf_lppe_sameAsRefPointProvider, ASN1_EXTENSION_ROOT    , dissect_lppe_NULL },",
          "6120:   {   1, &hf_lppe_notSameAsRefPointProvider, ASN1_EXTENSION_ROOT    , dissect_lppe_OMA_LPPe_VendorOrOperatorID },",
          "6121:   { 0, NULL, 0, NULL }",
          "6125: dissect_lppe_T_mapProvider(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "6126:   offset = dissect_per_choice(tvb, offset, actx, tree, hf_index,",
          "6127:                                  ett_lppe_T_mapProvider, T_mapProvider_choice,",
          "6128:                                  NULL);",
          "6136: dissect_lppe_VisibleString_SIZE_1_64(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "6137:   offset = dissect_per_VisibleString(tvb, offset, actx, tree, hf_index,",
          "6138:                                           1, 64, FALSE);",
          "6144: static const value_string lppe_T_mapAssociation_vals[] = {",
          "6145:   {   0, \"referencePointUniqueID\" },",
          "6146:   {   1, \"otherID\" },",
          "6147:   {   2, \"mapOffset\" },",
          "6148:   {   3, \"origin\" },",
          "6149:   { 0, NULL }",
          "6150: };",
          "6152: static const per_choice_t T_mapAssociation_choice[] = {",
          "6153:   {   0, &hf_lppe_referencePointUniqueID_01, ASN1_EXTENSION_ROOT    , dissect_lppe_NULL },",
          "6154:   {   1, &hf_lppe_otherID        , ASN1_EXTENSION_ROOT    , dissect_lppe_VisibleString_SIZE_1_64 },",
          "6155:   {   2, &hf_lppe_mapOffset      , ASN1_EXTENSION_ROOT    , dissect_lppe_OMA_LPPe_RelativeLocation },",
          "6156:   {   3, &hf_lppe_origin         , ASN1_EXTENSION_ROOT    , dissect_lppe_NULL },",
          "6157:   { 0, NULL, 0, NULL }",
          "6158: };",
          "6161: dissect_lppe_T_mapAssociation(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "6162:   offset = dissect_per_choice(tvb, offset, actx, tree, hf_index,",
          "6163:                                  ett_lppe_T_mapAssociation, T_mapAssociation_choice,",
          "6164:                                  NULL);",
          "6172: dissect_lppe_INTEGER_0_359(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "6173:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "6174:                                                             0U, 359U, NULL, FALSE);",
          "6180: static const per_sequence_t OMA_LPPe_MapDataReferenceElement_sequence[] = {",
          "6181:   { &hf_lppe_mapDataUrl     , ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lppe_T_mapDataUrl },",
          "6182:   { &hf_lppe_mapProvider    , ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lppe_T_mapProvider },",
          "6183:   { &hf_lppe_mapAssociation , ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lppe_T_mapAssociation },",
          "6184:   { &hf_lppe_mapHorizontalOrientation, ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lppe_INTEGER_0_359 },",
          "6185:   { NULL, 0, 0, NULL }",
          "6189: dissect_lppe_OMA_LPPe_MapDataReferenceElement(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "6190:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "6191:                                    ett_lppe_OMA_LPPe_MapDataReferenceElement, OMA_LPPe_MapDataReferenceElement_sequence);",
          "6197: static const per_sequence_t OMA_LPPe_MapDataInformation_sequence_of[1] = {",
          "6198:   { &hf_lppe_OMA_LPPe_MapDataInformation_item, ASN1_NO_EXTENSIONS     , ASN1_NOT_OPTIONAL, dissect_lppe_OMA_LPPe_MapDataReferenceElement },",
          "6202: dissect_lppe_OMA_LPPe_MapDataInformation(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "6203:   offset = dissect_per_constrained_sequence_of(tvb, offset, actx, tree, hf_index,",
          "6204:                                                   ett_lppe_OMA_LPPe_MapDataInformation, OMA_LPPe_MapDataInformation_sequence_of,",
          "6205:                                                   1, 16, FALSE);",
          "6211: static const per_sequence_t OMA_LPPe_ReferencePoint_sequence[] = {",
          "6212:   { &hf_lppe_referencePointUniqueID, ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lppe_OMA_LPPe_ReferencePointUniqueID },",
          "6213:   { &hf_lppe_referencePointGeographicLocation, ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lppe_T_referencePointGeographicLocation },",
          "6214:   { &hf_lppe_referencePointCivicLocation, ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lppe_OMA_LPPe_CivicLocation },",
          "6215:   { &hf_lppe_referencePointFloorLevel, ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lppe_INTEGER_M20_235 },",
          "6216:   { &hf_lppe_relatedReferencePoints, ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lppe_SEQUENCE_SIZE_1_8_OF_OMA_LPPe_ReferencePointRelationship },",
          "6217:   { &hf_lppe_mapDataInformation, ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lppe_OMA_LPPe_MapDataInformation },",
          "6222: dissect_lppe_OMA_LPPe_ReferencePoint(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "6224:                                    ett_lppe_OMA_LPPe_ReferencePoint, OMA_LPPe_ReferencePoint_sequence);",
          "",
          "[Added Lines]",
          "7486: dissect_lppe_INTEGER_1_128(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "7487:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "7488:                                                             1U, 128U, NULL, FALSE);",
          "7496: dissect_lppe_INTEGER_M15_16(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "7497:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "7498:                                                             -15, 16U, NULL, FALSE);",
          "7504: static const per_sequence_t DeltaAltitudes_sequence[] = {",
          "7505:   { &hf_lppe_deltaAlt       , ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lppe_INTEGER_M15_16 },",
          "7506:   { &hf_lppe_numGridPoints  , ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lppe_INTEGER_0_255 },",
          "7507:   { NULL, 0, 0, NULL }",
          "7511: dissect_lppe_DeltaAltitudes(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "7512:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "7513:                                    ett_lppe_DeltaAltitudes, DeltaAltitudes_sequence);",
          "7519: static const per_sequence_t SEQUENCE_SIZE_1_10000_OF_DeltaAltitudes_sequence_of[1] = {",
          "7520:   { &hf_lppe_altitudeGrid_item, ASN1_NO_EXTENSIONS     , ASN1_NOT_OPTIONAL, dissect_lppe_DeltaAltitudes },",
          "7524: dissect_lppe_SEQUENCE_SIZE_1_10000_OF_DeltaAltitudes(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "7525:   offset = dissect_per_constrained_sequence_of(tvb, offset, actx, tree, hf_index,",
          "7526:                                                   ett_lppe_SEQUENCE_SIZE_1_10000_OF_DeltaAltitudes, SEQUENCE_SIZE_1_10000_OF_DeltaAltitudes_sequence_of,",
          "7527:                                                   1, 10000, FALSE);",
          "7533: static const per_sequence_t OMA_LPPe_ver1_1_AltitudeModel_sequence[] = {",
          "7534:   { &hf_lppe_northWestCorner, ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lpp_Ellipsoid_Point },",
          "7535:   { &hf_lppe_northwestCornerAltitude, ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lppe_INTEGER_M500_9000 },",
          "7536:   { &hf_lppe_nrows          , ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lppe_INTEGER_2_1012 },",
          "7537:   { &hf_lppe_ncols          , ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lppe_INTEGER_2_1012 },",
          "7538:   { &hf_lppe_spanX          , ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lppe_INTEGER_6_14 },",
          "7539:   { &hf_lppe_spanY          , ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lppe_INTEGER_6_14 },",
          "7540:   { &hf_lppe_deltaAltUnits  , ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lppe_INTEGER_1_128 },",
          "7541:   { &hf_lppe_altitudeGrid   , ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lppe_SEQUENCE_SIZE_1_10000_OF_DeltaAltitudes },",
          "7542:   { NULL, 0, 0, NULL }",
          "7543: };",
          "7546: dissect_lppe_OMA_LPPe_ver1_1_AltitudeModel(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "7547:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "7548:                                    ett_lppe_OMA_LPPe_ver1_1_AltitudeModel, OMA_LPPe_ver1_1_AltitudeModel_sequence);",
          "7556: dissect_lppe_INTEGER_0_500(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "7557:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "7558:                                                             0U, 500U, NULL, FALSE);",
          "7564: static const per_sequence_t DeltaHeight_sequence[] = {",
          "7565:   { &hf_lppe_deltaHeight    , ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lppe_INTEGER_M15_16 },",
          "7566:   { &hf_lppe_numGridPoints  , ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lppe_INTEGER_0_255 },",
          "7567:   { NULL, 0, 0, NULL }",
          "7568: };",
          "7571: dissect_lppe_DeltaHeight(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "7572:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "7573:                                    ett_lppe_DeltaHeight, DeltaHeight_sequence);",
          "7579: static const per_sequence_t SEQUENCE_SIZE_1_10000_OF_DeltaHeight_sequence_of[1] = {",
          "7580:   { &hf_lppe_buildingsHeigthGrid_item, ASN1_NO_EXTENSIONS     , ASN1_NOT_OPTIONAL, dissect_lppe_DeltaHeight },",
          "7584: dissect_lppe_SEQUENCE_SIZE_1_10000_OF_DeltaHeight(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "7585:   offset = dissect_per_constrained_sequence_of(tvb, offset, actx, tree, hf_index,",
          "7586:                                                   ett_lppe_SEQUENCE_SIZE_1_10000_OF_DeltaHeight, SEQUENCE_SIZE_1_10000_OF_DeltaHeight_sequence_of,",
          "7587:                                                   1, 10000, FALSE);",
          "7593: static const per_sequence_t OMA_LPPe_ver1_1_BuildingsHeightModel_sequence[] = {",
          "7594:   { &hf_lppe_northWestCorner, ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lpp_Ellipsoid_Point },",
          "7595:   { &hf_lppe_northwestCornerHeigth, ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lppe_INTEGER_0_500 },",
          "7596:   { &hf_lppe_nrows          , ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lppe_INTEGER_2_1012 },",
          "7597:   { &hf_lppe_ncols          , ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lppe_INTEGER_2_1012 },",
          "7598:   { &hf_lppe_spanX          , ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lppe_INTEGER_6_14 },",
          "7599:   { &hf_lppe_spanY          , ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lppe_INTEGER_6_14 },",
          "7600:   { &hf_lppe_deltaHeigthUnits, ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lppe_INTEGER_1_16 },",
          "7601:   { &hf_lppe_buildingsHeigthGrid, ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lppe_SEQUENCE_SIZE_1_10000_OF_DeltaHeight },",
          "7602:   { NULL, 0, 0, NULL }",
          "7606: dissect_lppe_OMA_LPPe_ver1_1_BuildingsHeightModel(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "7607:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "7608:                                    ett_lppe_OMA_LPPe_ver1_1_BuildingsHeightModel, OMA_LPPe_ver1_1_BuildingsHeightModel_sequence);",
          "7614: static const per_sequence_t OMA_LPPe_ver1_1_GroundMorphologyModel_sequence[] = {",
          "7615:   { &hf_lppe_altitudeModel  , ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lppe_OMA_LPPe_ver1_1_AltitudeModel },",
          "7616:   { &hf_lppe_buildingsProfileModel, ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lppe_OMA_LPPe_ver1_1_BuildingsHeightModel },",
          "7621: dissect_lppe_OMA_LPPe_ver1_1_GroundMorphologyModel(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "7623:                                    ett_lppe_OMA_LPPe_ver1_1_GroundMorphologyModel, OMA_LPPe_ver1_1_GroundMorphologyModel_sequence);",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "6232:   { &hf_lppe_providePeriodicADwithUpdate, ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lppe_OMA_LPPe_ProvidePeriodicADwithUpdate },",
          "6233:   { &hf_lppe_segmentedADTransfer, ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lppe_OMA_LPPe_SegmentedADTransfer },",
          "6234:   { &hf_lppe_default_reference_point, ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lppe_OMA_LPPe_ReferencePoint },",
          "6235:   { NULL, 0, 0, NULL }",
          "6236: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7634:   { &hf_lppe_ver1_1_localCellInformation, ASN1_NOT_EXTENSION_ROOT, ASN1_OPTIONAL    , dissect_lppe_OMA_LPPe_ver1_1_LocalCellInformation },",
          "7635:   { &hf_lppe_ver1_1_BroadcastAssistanceData, ASN1_NOT_EXTENSION_ROOT, ASN1_OPTIONAL    , dissect_lppe_OMA_LPPe_ver1_1_BroadcastAssistanceData },",
          "7636:   { &hf_lppe_ver1_1_groundMorphologyModel, ASN1_NOT_EXTENSION_ROOT, ASN1_OPTIONAL    , dissect_lppe_OMA_LPPe_ver1_1_GroundMorphologyModel },",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "7341: }",
          "7354: static const per_sequence_t OMA_LPPe_AGNSS_ClockModelDegradationModel_sequence[] = {",
          "7355:   { &hf_lppe_clockRMS0      , ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lppe_INTEGER_0_31 },",
          "7356:   { &hf_lppe_clockRMS1      , ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lppe_INTEGER_0_7 },",
          "",
          "[Removed Lines]",
          "7345: static int",
          "7346: dissect_lppe_INTEGER_0_7(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "7347:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "7348:                                                             0U, 7U, NULL, FALSE);",
          "7350:   return offset;",
          "7351: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "8992: static int",
          "8994:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "8997:   return offset;",
          "8998: }",
          "",
          "[Removed Lines]",
          "8993: dissect_lppe_INTEGER_0_327(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "8995:                                                             0U, 327U, NULL, FALSE);",
          "",
          "[Added Lines]",
          "10385: dissect_lppe_INTEGER_0_32766(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "10387:                                                             0U, 32766U, NULL, FALSE);",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "9011: static const per_sequence_t OMA_LPPe_OTDOA_UTRA_RefPosAssist_sequence[] = {",
          "9012:   { &hf_lppe_cellPosition   , ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lppe_T_cellPosition },",
          "9014:   { &hf_lppe_roundTripTimeExtension, ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lppe_INTEGER_0_70274 },",
          "9015:   { NULL, 0, 0, NULL }",
          "9016: };",
          "",
          "[Removed Lines]",
          "9013:   { &hf_lppe_roundTripTime  , ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lppe_INTEGER_0_327 },",
          "",
          "[Added Lines]",
          "10405:   { &hf_lppe_roundTripTime  , ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lppe_INTEGER_0_32766 },",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "9076: static int",
          "9077: dissect_lppe_INTEGER_0_15(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "9078:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "",
          "[Removed Lines]",
          "9066: static int",
          "9067: dissect_lppe_INTEGER_0_9(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "9068:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "9069:                                                             0U, 9U, NULL, FALSE);",
          "9071:   return offset;",
          "9072: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "9086: static int",
          "9098:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "9101:   return offset;",
          "9102: }",
          "",
          "[Removed Lines]",
          "9087: dissect_lppe_INTEGER_10_25(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "9088:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "9089:                                                             10U, 25U, NULL, FALSE);",
          "9091:   return offset;",
          "9092: }",
          "9096: static int",
          "9097: dissect_lppe_INTEGER_1_16(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "9099:                                                             1U, 16U, NULL, FALSE);",
          "",
          "[Added Lines]",
          "10469: dissect_lppe_INTEGER_10_25(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "10471:                                                             10U, 25U, NULL, FALSE);",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "9436:   { &hf_lppe_relativeEast_02, ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lppe_INTEGER_M20000_20000 },",
          "9437:   { &hf_lppe_relativeAltitude_01, ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lppe_INTEGER_M4000_4000 },",
          "9438:   { &hf_lppe_fineSFN_SFN    , ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lppe_OMA_LPPe_OTDOA_UTRA_fineSFN_SFN },",
          "9440:   { &hf_lppe_roundTripTimeExtension, ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lppe_INTEGER_0_70274 },",
          "9441:   { NULL, 0, 0, NULL }",
          "9442: };",
          "",
          "[Removed Lines]",
          "9439:   { &hf_lppe_roundTripTime  , ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lppe_INTEGER_0_327 },",
          "",
          "[Added Lines]",
          "10811:   { &hf_lppe_roundTripTime  , ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lppe_INTEGER_0_32766 },",
          "",
          "---------------",
          "--- Hunk 49 ---",
          "[Context before]",
          "9589: }",
          "9593:   { &hf_lppe_mcc_item       , ASN1_NO_EXTENSIONS     , ASN1_NOT_OPTIONAL, dissect_lppe_INTEGER_0_9 },",
          "9594: };",
          "9596: static int",
          "9598:   offset = dissect_per_constrained_sequence_of(tvb, offset, actx, tree, hf_index,",
          "9600:                                                   3, 3, FALSE);",
          "9602:   return offset;",
          "9603: }",
          "9607:   { &hf_lppe_mnc_item       , ASN1_NO_EXTENSIONS     , ASN1_NOT_OPTIONAL, dissect_lppe_INTEGER_0_9 },",
          "9608: };",
          "9610: static int",
          "9612:   offset = dissect_per_constrained_sequence_of(tvb, offset, actx, tree, hf_index,",
          "9614:                                                   2, 3, FALSE);",
          "9616:   return offset;",
          "",
          "[Removed Lines]",
          "9592: static const per_sequence_t T_mcc_sequence_of[1] = {",
          "9597: dissect_lppe_T_mcc(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "9599:                                                   ett_lppe_T_mcc, T_mcc_sequence_of,",
          "9606: static const per_sequence_t T_mnc_sequence_of[1] = {",
          "9611: dissect_lppe_T_mnc(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "9613:                                                   ett_lppe_T_mnc, T_mnc_sequence_of,",
          "",
          "[Added Lines]",
          "10964: static const per_sequence_t T_mcc_01_sequence_of[1] = {",
          "10969: dissect_lppe_T_mcc_01(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "10971:                                                   ett_lppe_T_mcc_01, T_mcc_01_sequence_of,",
          "10978: static const per_sequence_t T_mnc_01_sequence_of[1] = {",
          "10983: dissect_lppe_T_mnc_01(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "10985:                                                   ett_lppe_T_mnc_01, T_mnc_01_sequence_of,",
          "",
          "---------------",
          "--- Hunk 50 ---",
          "[Context before]",
          "9620: static const per_sequence_t T_plmn_Identity_sequence[] = {",
          "9623:   { NULL, 0, 0, NULL }",
          "9624: };",
          "",
          "[Removed Lines]",
          "9621:   { &hf_lppe_mcc            , ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lppe_T_mcc },",
          "9622:   { &hf_lppe_mnc            , ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lppe_T_mnc },",
          "",
          "[Added Lines]",
          "10993:   { &hf_lppe_mcc_01         , ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lppe_T_mcc_01 },",
          "10994:   { &hf_lppe_mnc_01         , ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lppe_T_mnc_01 },",
          "",
          "---------------",
          "--- Hunk 51 ---",
          "[Context before]",
          "9879: static const per_sequence_t OMA_LPPe_ECID_LTE_HeNBData_sequence[] = {",
          "9880:   { &hf_lppe_relative_location, ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lppe_OMA_LPPe_RelativeLocation },",
          "9881:   { &hf_lppe_location_reliability, ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lppe_INTEGER_1_100 },",
          "9883:   { &hf_lppe_ecid_lte_HeNB_CellData, ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lppe_OMA_LPPe_ECID_LTE_CellData },",
          "9884:   { NULL, 0, 0, NULL }",
          "9885: };",
          "",
          "[Removed Lines]",
          "9882:   { &hf_lppe_coverageArea   , ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lppe_OMA_LPPe_WLANFemtoCoverageArea },",
          "",
          "[Added Lines]",
          "11254:   { &hf_lppe_coverageArea_01, ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lppe_OMA_LPPe_WLANFemtoCoverageArea },",
          "",
          "---------------",
          "--- Hunk 52 ---",
          "[Context before]",
          "10060: }",
          "10064:   { &hf_lppe_mcc_item       , ASN1_NO_EXTENSIONS     , ASN1_NOT_OPTIONAL, dissect_lppe_INTEGER_0_9 },",
          "10065: };",
          "10067: static int",
          "10069:   offset = dissect_per_constrained_sequence_of(tvb, offset, actx, tree, hf_index,",
          "10071:                                                   3, 3, FALSE);",
          "10073:   return offset;",
          "10074: }",
          "10078:   { &hf_lppe_mnc_item       , ASN1_NO_EXTENSIONS     , ASN1_NOT_OPTIONAL, dissect_lppe_INTEGER_0_9 },",
          "10079: };",
          "10081: static int",
          "10083:   offset = dissect_per_constrained_sequence_of(tvb, offset, actx, tree, hf_index,",
          "10085:                                                   2, 3, FALSE);",
          "10087:   return offset;",
          "",
          "[Removed Lines]",
          "10063: static const per_sequence_t T_mcc_01_sequence_of[1] = {",
          "10068: dissect_lppe_T_mcc_01(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "10070:                                                   ett_lppe_T_mcc_01, T_mcc_01_sequence_of,",
          "10077: static const per_sequence_t T_mnc_01_sequence_of[1] = {",
          "10082: dissect_lppe_T_mnc_01(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "10084:                                                   ett_lppe_T_mnc_01, T_mnc_01_sequence_of,",
          "",
          "[Added Lines]",
          "11435: static const per_sequence_t T_mcc_02_sequence_of[1] = {",
          "11440: dissect_lppe_T_mcc_02(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "11442:                                                   ett_lppe_T_mcc_02, T_mcc_02_sequence_of,",
          "11449: static const per_sequence_t T_mnc_02_sequence_of[1] = {",
          "11454: dissect_lppe_T_mnc_02(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "11456:                                                   ett_lppe_T_mnc_02, T_mnc_02_sequence_of,",
          "",
          "---------------",
          "--- Hunk 53 ---",
          "[Context before]",
          "10091: static const per_sequence_t T_plmn_Identity_01_sequence[] = {",
          "10094:   { NULL, 0, 0, NULL }",
          "10095: };",
          "",
          "[Removed Lines]",
          "10092:   { &hf_lppe_mcc_01         , ASN1_NO_EXTENSIONS     , ASN1_NOT_OPTIONAL, dissect_lppe_T_mcc_01 },",
          "10093:   { &hf_lppe_mnc_01         , ASN1_NO_EXTENSIONS     , ASN1_NOT_OPTIONAL, dissect_lppe_T_mnc_01 },",
          "",
          "[Added Lines]",
          "11464:   { &hf_lppe_mcc_02         , ASN1_NO_EXTENSIONS     , ASN1_NOT_OPTIONAL, dissect_lppe_T_mcc_02 },",
          "11465:   { &hf_lppe_mnc_02         , ASN1_NO_EXTENSIONS     , ASN1_NOT_OPTIONAL, dissect_lppe_T_mnc_02 },",
          "",
          "---------------",
          "--- Hunk 54 ---",
          "[Context before]",
          "10333: }",
          "10337:   { &hf_lppe_mcc_item       , ASN1_NO_EXTENSIONS     , ASN1_NOT_OPTIONAL, dissect_lppe_INTEGER_0_9 },",
          "10338: };",
          "10340: static int",
          "10342:   offset = dissect_per_constrained_sequence_of(tvb, offset, actx, tree, hf_index,",
          "10344:                                                   3, 3, FALSE);",
          "10346:   return offset;",
          "10347: }",
          "10351:   { &hf_lppe_mnc_item       , ASN1_NO_EXTENSIONS     , ASN1_NOT_OPTIONAL, dissect_lppe_INTEGER_0_9 },",
          "10352: };",
          "10354: static int",
          "10356:   offset = dissect_per_constrained_sequence_of(tvb, offset, actx, tree, hf_index,",
          "10358:                                                   2, 3, FALSE);",
          "10360:   return offset;",
          "",
          "[Removed Lines]",
          "10336: static const per_sequence_t T_mcc_02_sequence_of[1] = {",
          "10341: dissect_lppe_T_mcc_02(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "10343:                                                   ett_lppe_T_mcc_02, T_mcc_02_sequence_of,",
          "10350: static const per_sequence_t T_mnc_02_sequence_of[1] = {",
          "10355: dissect_lppe_T_mnc_02(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "10357:                                                   ett_lppe_T_mnc_02, T_mnc_02_sequence_of,",
          "",
          "[Added Lines]",
          "11708: static const per_sequence_t T_mcc_03_sequence_of[1] = {",
          "11713: dissect_lppe_T_mcc_03(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "11715:                                                   ett_lppe_T_mcc_03, T_mcc_03_sequence_of,",
          "11722: static const per_sequence_t T_mnc_03_sequence_of[1] = {",
          "11727: dissect_lppe_T_mnc_03(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "11729:                                                   ett_lppe_T_mnc_03, T_mnc_03_sequence_of,",
          "",
          "---------------",
          "--- Hunk 55 ---",
          "[Context before]",
          "10364: static const per_sequence_t T_plmn_Identity_02_sequence[] = {",
          "10367:   { NULL, 0, 0, NULL }",
          "10368: };",
          "",
          "[Removed Lines]",
          "10365:   { &hf_lppe_mcc_02         , ASN1_NO_EXTENSIONS     , ASN1_NOT_OPTIONAL, dissect_lppe_T_mcc_02 },",
          "10366:   { &hf_lppe_mnc_02         , ASN1_NO_EXTENSIONS     , ASN1_NOT_OPTIONAL, dissect_lppe_T_mnc_02 },",
          "",
          "[Added Lines]",
          "11737:   { &hf_lppe_mcc_03         , ASN1_NO_EXTENSIONS     , ASN1_NOT_OPTIONAL, dissect_lppe_T_mcc_03 },",
          "11738:   { &hf_lppe_mnc_03         , ASN1_NO_EXTENSIONS     , ASN1_NOT_OPTIONAL, dissect_lppe_T_mnc_03 },",
          "",
          "---------------",
          "--- Hunk 56 ---",
          "[Context before]",
          "10505: static const per_sequence_t OMA_LPPe_ECID_UTRA_HNBData_sequence[] = {",
          "10506:   { &hf_lppe_relative_location, ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lppe_OMA_LPPe_RelativeLocation },",
          "10507:   { &hf_lppe_location_reliability, ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lppe_INTEGER_1_100 },",
          "10509:   { &hf_lppe_ecid_utra_HNB_CellData, ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lppe_OMA_LPPe_ECID_UTRA_CellData },",
          "10510:   { NULL, 0, 0, NULL }",
          "10511: };",
          "",
          "[Removed Lines]",
          "10508:   { &hf_lppe_coverageArea   , ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lppe_OMA_LPPe_WLANFemtoCoverageArea },",
          "",
          "[Added Lines]",
          "11880:   { &hf_lppe_coverageArea_01, ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lppe_OMA_LPPe_WLANFemtoCoverageArea },",
          "",
          "---------------",
          "--- Hunk 57 ---",
          "[Context before]",
          "10689: }",
          "10693:   { &hf_lppe_mcc_item       , ASN1_NO_EXTENSIONS     , ASN1_NOT_OPTIONAL, dissect_lppe_INTEGER_0_9 },",
          "10694: };",
          "10696: static int",
          "10698:   offset = dissect_per_constrained_sequence_of(tvb, offset, actx, tree, hf_index,",
          "10700:                                                   3, 3, FALSE);",
          "10702:   return offset;",
          "10703: }",
          "10707:   { &hf_lppe_mnc_item       , ASN1_NO_EXTENSIONS     , ASN1_NOT_OPTIONAL, dissect_lppe_INTEGER_0_9 },",
          "10708: };",
          "10710: static int",
          "10712:   offset = dissect_per_constrained_sequence_of(tvb, offset, actx, tree, hf_index,",
          "10714:                                                   2, 3, FALSE);",
          "10716:   return offset;",
          "",
          "[Removed Lines]",
          "10692: static const per_sequence_t T_mcc_03_sequence_of[1] = {",
          "10697: dissect_lppe_T_mcc_03(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "10699:                                                   ett_lppe_T_mcc_03, T_mcc_03_sequence_of,",
          "10706: static const per_sequence_t T_mnc_03_sequence_of[1] = {",
          "10711: dissect_lppe_T_mnc_03(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "10713:                                                   ett_lppe_T_mnc_03, T_mnc_03_sequence_of,",
          "",
          "[Added Lines]",
          "12064: static const per_sequence_t T_mcc_04_sequence_of[1] = {",
          "12069: dissect_lppe_T_mcc_04(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "12071:                                                   ett_lppe_T_mcc_04, T_mcc_04_sequence_of,",
          "12078: static const per_sequence_t T_mnc_04_sequence_of[1] = {",
          "12083: dissect_lppe_T_mnc_04(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "12085:                                                   ett_lppe_T_mnc_04, T_mnc_04_sequence_of,",
          "",
          "---------------",
          "--- Hunk 58 ---",
          "[Context before]",
          "10720: static const per_sequence_t T_plmn_Identity_03_sequence[] = {",
          "10723:   { NULL, 0, 0, NULL }",
          "10724: };",
          "",
          "[Removed Lines]",
          "10721:   { &hf_lppe_mcc_03         , ASN1_NO_EXTENSIONS     , ASN1_NOT_OPTIONAL, dissect_lppe_T_mcc_03 },",
          "10722:   { &hf_lppe_mnc_03         , ASN1_NO_EXTENSIONS     , ASN1_NOT_OPTIONAL, dissect_lppe_T_mnc_03 },",
          "",
          "[Added Lines]",
          "12093:   { &hf_lppe_mcc_04         , ASN1_NO_EXTENSIONS     , ASN1_NOT_OPTIONAL, dissect_lppe_T_mcc_04 },",
          "12094:   { &hf_lppe_mnc_04         , ASN1_NO_EXTENSIONS     , ASN1_NOT_OPTIONAL, dissect_lppe_T_mnc_04 },",
          "",
          "---------------",
          "--- Hunk 59 ---",
          "[Context before]",
          "10793:   {   1, \"ieee802-11b\" },",
          "10794:   {   2, \"ieee802-11g\" },",
          "10795:   {   3, \"ieee802-11n\" },",
          "10796:   { 0, NULL }",
          "10797: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "12168:   {   4, \"ieee802-11ac\" },",
          "12169:   {   5, \"ieee802-11ad\" },",
          "",
          "---------------",
          "--- Hunk 60 ---",
          "[Context before]",
          "10800: static int",
          "10801: dissect_lppe_OMA_LPPe_WLAN_AP_Type(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "10802:   offset = dissect_per_enumerated(tvb, offset, actx, tree, hf_index,",
          "10805:   return offset;",
          "10806: }",
          "",
          "[Removed Lines]",
          "10803:                                      4, NULL, TRUE, 0, NULL);",
          "",
          "[Added Lines]",
          "12177:                                      4, NULL, TRUE, 2, NULL);",
          "",
          "---------------",
          "--- Hunk 61 ---",
          "[Context before]",
          "10810:   { &hf_lppe_wlan_AP_Type   , ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lppe_OMA_LPPe_WLAN_AP_Type },",
          "10811:   { &hf_lppe_transmit_power , ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lppe_INTEGER_M127_128 },",
          "10812:   { &hf_lppe_antenna_gain   , ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lppe_INTEGER_M127_128 },",
          "10814:   { NULL, 0, 0, NULL }",
          "10815: };",
          "",
          "[Removed Lines]",
          "10813:   { &hf_lppe_coverageArea   , ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lppe_OMA_LPPe_WLANFemtoCoverageArea },",
          "",
          "[Added Lines]",
          "12187:   { &hf_lppe_coverageArea_01, ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lppe_OMA_LPPe_WLANFemtoCoverageArea },",
          "",
          "---------------",
          "--- Hunk 62 ---",
          "[Context before]",
          "10842:   { &hf_lppe_relative_location, ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lppe_OMA_LPPe_RelativeLocation },",
          "10843:   { &hf_lppe_location_reliability, ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lppe_INTEGER_1_100 },",
          "10844:   { &hf_lppe_wlan_ap_Type_Data, ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lppe_SEQUENCE_SIZE_1_maxWLANTypes_OF_OMA_LPPe_WLAN_AP_Type_Data },",
          "10846:   { NULL, 0, 0, NULL }",
          "10847: };",
          "",
          "[Removed Lines]",
          "10845:   { &hf_lppe_coverageArea   , ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lppe_OMA_LPPe_WLANFemtoCoverageArea },",
          "",
          "[Added Lines]",
          "12219:   { &hf_lppe_coverageArea_01, ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lppe_OMA_LPPe_WLANFemtoCoverageArea },",
          "",
          "---------------",
          "--- Hunk 63 ---",
          "[Context before]",
          "10970:   { &hf_lppe_apRecLocNotAvailable, ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lppe_NULL },",
          "10971:   { &hf_lppe_non_servingMeasurementsNotAvailable, ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lppe_NULL },",
          "10972:   { &hf_lppe_historicMeasurementsNotAvailable, ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lppe_NULL },",
          "10973:   { NULL, 0, 0, NULL }",
          "10974: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "12347:   { &hf_lppe_apTPNotAvailable, ASN1_NOT_EXTENSION_ROOT, ASN1_OPTIONAL    , dissect_lppe_NULL },",
          "12348:   { &hf_lppe_apAGNotAvailable, ASN1_NOT_EXTENSION_ROOT, ASN1_OPTIONAL    , dissect_lppe_NULL },",
          "12349:   { &hf_lppe_ueSNNotAvailable, ASN1_NOT_EXTENSION_ROOT, ASN1_OPTIONAL    , dissect_lppe_NULL },",
          "12350:   { &hf_lppe_ueRSSINotAvailable, ASN1_NOT_EXTENSION_ROOT, ASN1_OPTIONAL    , dissect_lppe_NULL },",
          "12351:   { &hf_lppe_ocNotAvailable , ASN1_NOT_EXTENSION_ROOT, ASN1_OPTIONAL    , dissect_lppe_NULL },",
          "",
          "---------------",
          "--- Hunk 64 ---",
          "[Context before]",
          "11019: }",
          "11022: static const per_sequence_t OMA_LPPe_Sensor_ProvideAssistanceData_sequence[] = {",
          "11024: };",
          "11026: static int",
          "",
          "[Removed Lines]",
          "11023:   { NULL, ASN1_EXTENSION_ROOT, 0, NULL }",
          "",
          "[Added Lines]",
          "12401: static const per_sequence_t T_period_sequence[] = {",
          "12402:   { &hf_lppe_pressureValidityPeriod, ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lppe_OMA_LPPe_ValidityPeriod },",
          "12403:   { &hf_lppe_referencePressureRate, ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lppe_INTEGER_M128_127 },",
          "12404:   { NULL, 0, 0, NULL }",
          "12405: };",
          "12407: static int",
          "12408: dissect_lppe_T_period(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "12409:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "12410:                                    ett_lppe_T_period, T_period_sequence);",
          "12412:   return offset;",
          "12413: }",
          "12416: static const per_sequence_t OMA_LPPe_PressureValidityArea_sequence[] = {",
          "12417:   { &hf_lppe_centerPoint    , ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lpp_Ellipsoid_Point },",
          "12418:   { &hf_lppe_validityAreaWidth, ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lppe_INTEGER_1_128 },",
          "12419:   { &hf_lppe_validityAreaHeight, ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lppe_INTEGER_1_128 },",
          "12420:   { NULL, 0, 0, NULL }",
          "12421: };",
          "12423: static int",
          "12424: dissect_lppe_OMA_LPPe_PressureValidityArea(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "12425:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "12426:                                    ett_lppe_OMA_LPPe_PressureValidityArea, OMA_LPPe_PressureValidityArea_sequence);",
          "12428:   return offset;",
          "12429: }",
          "12432: static const per_sequence_t T_area_sequence[] = {",
          "12433:   { &hf_lppe_pressureValidityArea, ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lppe_OMA_LPPe_PressureValidityArea },",
          "12434:   { &hf_lppe_gN_pressure    , ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lppe_INTEGER_M128_127 },",
          "12435:   { &hf_lppe_gE_pressure    , ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lppe_INTEGER_M128_127 },",
          "12436:   { NULL, 0, 0, NULL }",
          "12437: };",
          "12439: static int",
          "12440: dissect_lppe_T_area(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "12441:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "12442:                                    ett_lppe_T_area, T_area_sequence);",
          "12444:   return offset;",
          "12445: }",
          "12448: static const per_sequence_t OMA_LPPe_AtmosphericPressureAD_sequence[] = {",
          "12449:   { &hf_lppe_referencePressure, ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lppe_INTEGER_M1024_1023 },",
          "12450:   { &hf_lppe_period         , ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lppe_T_period },",
          "12451:   { &hf_lppe_area_01        , ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lppe_T_area },",
          "12452:   { NULL, 0, 0, NULL }",
          "12453: };",
          "12455: static int",
          "12456: dissect_lppe_OMA_LPPe_AtmosphericPressureAD(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "12457:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "12458:                                    ett_lppe_OMA_LPPe_AtmosphericPressureAD, OMA_LPPe_AtmosphericPressureAD_sequence);",
          "12460:   return offset;",
          "12461: }",
          "12465:   { &hf_lppe_atmosphericPressureAD, ASN1_NOT_EXTENSION_ROOT, ASN1_OPTIONAL    , dissect_lppe_OMA_LPPe_AtmosphericPressureAD },",
          "12466:   { NULL, 0, 0, NULL }",
          "",
          "---------------",
          "--- Hunk 65 ---",
          "[Context before]",
          "11802: static const per_sequence_t OMA_LPPe_RequestPeriodicLocInfoWithUpdate_sequence[] = {",
          "11804:   { &hf_lppe_typeOfLocInfoRequest, ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lppe_OMA_LPPe_TypeOfLocInfoRequest },",
          "11805:   { NULL, 0, 0, NULL }",
          "11806: };",
          "",
          "[Removed Lines]",
          "11803:   { &hf_lppe_session_ID_01  , ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lppe_INTEGER_1_256 },",
          "",
          "[Added Lines]",
          "13246:   { &hf_lppe_session_ID     , ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lppe_OCTET_STRING_SIZE_4 },",
          "",
          "---------------",
          "--- Hunk 66 ---",
          "[Context before]",
          "11920: }",
          "11923: static const per_sequence_t OMA_LPPe_SegmentedLIResume_sequence[] = {",
          "11924:   { &hf_lppe_segmentedLI_session_ID, ASN1_NO_EXTENSIONS     , ASN1_NOT_OPTIONAL, dissect_lppe_INTEGER_1_256 },",
          "11925:   { &hf_lppe_next_segment_number, ASN1_NO_EXTENSIONS     , ASN1_NOT_OPTIONAL, dissect_lppe_INTEGER_1_4096 },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "13367: static int",
          "13368: dissect_lppe_INTEGER_1_256(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "13369:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "13370:                                                             1U, 256U, NULL, FALSE);",
          "13372:   return offset;",
          "13373: }",
          "",
          "---------------",
          "--- Hunk 67 ---",
          "[Context before]",
          "12196: }",
          "12199: static const per_sequence_t OMA_LPPe_WLAN_AP_RequestLocationInformation_sequence[] = {",
          "12200:   { &hf_lppe_requestedMeasurements_03, ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lppe_T_requestedMeasurements_03 },",
          "12201:   { NULL, 0, 0, NULL }",
          "12202: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "13653: static int",
          "13654: dissect_lppe_T_additionalRequestedMeasurements(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "13655:   offset = dissect_per_bit_string(tvb, offset, actx, tree, hf_index,",
          "13656:                                      1, 16, FALSE, NULL, NULL);",
          "13658:   return offset;",
          "13659: }",
          "13664:   { &hf_lppe_additionalRequestedMeasurements, ASN1_NOT_EXTENSION_ROOT, ASN1_OPTIONAL    , dissect_lppe_T_additionalRequestedMeasurements },",
          "",
          "---------------",
          "--- Hunk 68 ---",
          "[Context before]",
          "12391: }",
          "12404: static const value_string lppe_T_local_IP_Address_vals[] = {",
          "12405:   {   0, \"iPv4\" },",
          "12406:   {   1, \"iPv6\" },",
          "",
          "[Removed Lines]",
          "12395: static int",
          "12396: dissect_lppe_BIT_STRING_SIZE_128(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "12397:   offset = dissect_per_bit_string(tvb, offset, actx, tree, hf_index,",
          "12398:                                      128, 128, FALSE, NULL, NULL);",
          "12400:   return offset;",
          "12401: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 69 ---",
          "[Context before]",
          "12541: static const per_sequence_t OMA_LPPe_ProvidePeriodicLocInfowithUpdate_sequence[] = {",
          "12543:   { &hf_lppe_typeOfLocInfoProvide, ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lppe_OMA_LPPe_TypeOfLocInfoProvide },",
          "12544:   { NULL, 0, 0, NULL }",
          "12545: };",
          "",
          "[Removed Lines]",
          "12542:   { &hf_lppe_session_ID_01  , ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lppe_INTEGER_1_256 },",
          "",
          "[Added Lines]",
          "13996:   { &hf_lppe_session_ID     , ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lppe_OCTET_STRING_SIZE_4 },",
          "",
          "---------------",
          "--- Hunk 70 ---",
          "[Context before]",
          "12718: }",
          "12721: static const per_sequence_t OMA_LPPe_CommonIEsProvideLocationInformation_sequence[] = {",
          "12722:   { &hf_lppe_highAccuracy3Dposition, ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lppe_OMA_LPPe_HighAccuracy3Dposition },",
          "12723:   { &hf_lppe_localPosition  , ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lppe_OMA_LPPe_LocalPosition },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14175: static const per_sequence_t OMA_LPPe_LocationSource_sequence[] = {",
          "14176:   { &hf_lppe_agnss          , ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lppe_NULL },",
          "14177:   { &hf_lppe_otdoa          , ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lppe_NULL },",
          "14178:   { &hf_lppe_eotd           , ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lppe_NULL },",
          "14179:   { &hf_lppe_otdoaUTRA      , ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lppe_NULL },",
          "14180:   { &hf_lppe_ecidLTE        , ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lppe_NULL },",
          "14181:   { &hf_lppe_ecidGSM        , ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lppe_NULL },",
          "14182:   { &hf_lppe_ecidUTRA       , ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lppe_NULL },",
          "14183:   { &hf_lppe_wlanAP         , ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lppe_NULL },",
          "14184:   { &hf_lppe_srn            , ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lppe_NULL },",
          "14185:   { &hf_lppe_sensors        , ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lppe_NULL },",
          "14186:   { NULL, 0, 0, NULL }",
          "14187: };",
          "14189: static int",
          "14190: dissect_lppe_OMA_LPPe_LocationSource(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "14191:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "14192:                                    ett_lppe_OMA_LPPe_LocationSource, OMA_LPPe_LocationSource_sequence);",
          "14194:   return offset;",
          "14195: }",
          "",
          "---------------",
          "--- Hunk 71 ---",
          "[Context before]",
          "12730:   { &hf_lppe_accessTypes    , ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lppe_OMA_LPPe_AccessTypes },",
          "12731:   { &hf_lppe_segmentedLITransfer, ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lppe_OMA_LPPe_SegmentedLITransfer },",
          "12732:   { &hf_lppe_locationInformationTimeStamp, ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lppe_OMA_LPPe_TimeStamp },",
          "12733:   { NULL, 0, 0, NULL }",
          "12734: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14210:   { &hf_lppe_locationSource , ASN1_NOT_EXTENSION_ROOT, ASN1_OPTIONAL    , dissect_lppe_OMA_LPPe_LocationSource },",
          "",
          "---------------",
          "--- Hunk 72 ---",
          "[Context before]",
          "14202: }",
          "14205: static const per_sequence_t OMA_LPPe_WLAN_AP_LocationInformation_sequence[] = {",
          "14206:   { &hf_lppe_apMACAddress   , ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lppe_OMA_LPPe_WLAN_AP_ID },",
          "14207:   { &hf_lppe_apSSID         , ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lppe_OCTET_STRING_SIZE_1_32 },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "15684: static int",
          "15685: dissect_lppe_INTEGER_0_1(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "15686:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "15687:                                                             0U, 1U, NULL, FALSE);",
          "15689:   return offset;",
          "15690: }",
          "",
          "---------------",
          "--- Hunk 73 ---",
          "[Context before]",
          "14214:   { &hf_lppe_ueTransmitPower, ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lppe_INTEGER_M127_128 },",
          "14215:   { &hf_lppe_ueAntennaGain  , ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lppe_INTEGER_M127_128 },",
          "14216:   { &hf_lppe_apReportedLocation, ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lppe_OMA_LPPe_WLAN_ReportedLocation },",
          "14217:   { NULL, 0, 0, NULL }",
          "14218: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "15705:   { &hf_lppe_apTransmitPower, ASN1_NOT_EXTENSION_ROOT, ASN1_OPTIONAL    , dissect_lppe_INTEGER_M127_128 },",
          "15706:   { &hf_lppe_apAntennaGain  , ASN1_NOT_EXTENSION_ROOT, ASN1_OPTIONAL    , dissect_lppe_INTEGER_M127_128 },",
          "15707:   { &hf_lppe_ueSignaltoNoise, ASN1_NOT_EXTENSION_ROOT, ASN1_OPTIONAL    , dissect_lppe_INTEGER_M127_128 },",
          "15708:   { &hf_lppe_ueSignalStrength, ASN1_NOT_EXTENSION_ROOT, ASN1_OPTIONAL    , dissect_lppe_INTEGER_M127_128 },",
          "15709:   { &hf_lppe_apSignalStrengthDelta, ASN1_NOT_EXTENSION_ROOT, ASN1_OPTIONAL    , dissect_lppe_INTEGER_0_1 },",
          "15710:   { &hf_lppe_ueSignalStrengthDelta, ASN1_NOT_EXTENSION_ROOT, ASN1_OPTIONAL    , dissect_lppe_INTEGER_0_1 },",
          "15711:   { &hf_lppe_apSignaltoNoiseDelta, ASN1_NOT_EXTENSION_ROOT, ASN1_OPTIONAL    , dissect_lppe_INTEGER_0_1 },",
          "15712:   { &hf_lppe_ueSignaltoNoiseDelta, ASN1_NOT_EXTENSION_ROOT, ASN1_OPTIONAL    , dissect_lppe_INTEGER_0_1 },",
          "15713:   { &hf_lppe_operatingClass , ASN1_NOT_EXTENSION_ROOT, ASN1_OPTIONAL    , dissect_lppe_INTEGER_0_255 },",
          "",
          "---------------",
          "--- Hunk 74 ---",
          "[Context before]",
          "14271: }",
          "14284: static const per_sequence_t OMA_LPPe_ECID_WiMax_WimaxBsID_sequence[] = {",
          "14285:   { &hf_lppe_bsID_MSB       , ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lppe_BIT_STRING_SIZE_24 },",
          "14286:   { &hf_lppe_bsID_LSB       , ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lppe_BIT_STRING_SIZE_24 },",
          "",
          "[Removed Lines]",
          "14275: static int",
          "14276: dissect_lppe_BIT_STRING_SIZE_24(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "14277:   offset = dissect_per_bit_string(tvb, offset, actx, tree, hf_index,",
          "14278:                                      24, 24, FALSE, NULL, NULL);",
          "14280:   return offset;",
          "14281: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 75 ---",
          "[Context before]",
          "14800: static const per_sequence_t OMA_LPPe_CommonIEsAbort_sequence[] = {",
          "14801:   { &hf_lppe_abortCause     , ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lppe_T_abortCause },",
          "14803:   { NULL, 0, 0, NULL }",
          "14804: };",
          "",
          "[Removed Lines]",
          "14802:   { &hf_lppe_periodicSessionIDtoAbort, ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lppe_INTEGER_1_256 },",
          "",
          "[Added Lines]",
          "16289:   { &hf_lppe_periodicSessionIDtoAbort, ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lppe_OCTET_STRING_SIZE_4 },",
          "",
          "---------------",
          "--- Hunk 76 ---",
          "[Context before]",
          "14935: static int",
          "14936: dissect_lppe_OMA_LPPe_MessageExtension(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "14939:   proto_tree_add_item(tree, proto_lppe, tvb, 0, -1, ENC_NA);",
          "14941:   col_append_sep_str(actx->pinfo->cinfo, COL_PROTOCOL, \"/\", \"LPPe\");",
          "14943:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "14944:                                    ett_lppe_OMA_LPPe_MessageExtension, OMA_LPPe_MessageExtension_sequence);",
          "",
          "[Removed Lines]",
          "14937: #line 17 \"../../asn1/lppe/lppe.cnf\"",
          "",
          "[Added Lines]",
          "16424: #line 24 \"../../asn1/lppe/lppe.cnf\"",
          "",
          "---------------",
          "--- Hunk 77 ---",
          "[Context before]",
          "15447:       { \"durationLSB\", \"lppe.durationLSB\",",
          "15448:         FT_UINT32, BASE_DEC, NULL, 0,",
          "15449:         \"INTEGER_1_89\", HFILL }},",
          "15450:     { &hf_lppe_latitude,",
          "15451:       { \"latitude\", \"lppe.latitude\",",
          "15452:         FT_INT32, BASE_DEC, NULL, 0,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "16938:     { &hf_lppe_altitudeModel,",
          "16939:       { \"altitudeModel\", \"lppe.altitudeModel_element\",",
          "16940:         FT_NONE, BASE_NONE, NULL, 0,",
          "16941:         \"OMA_LPPe_ver1_1_AltitudeModel\", HFILL }},",
          "16942:     { &hf_lppe_buildingsProfileModel,",
          "16943:       { \"buildingsProfileModel\", \"lppe.buildingsProfileModel_element\",",
          "16944:         FT_NONE, BASE_NONE, NULL, 0,",
          "16945:         \"OMA_LPPe_ver1_1_BuildingsHeightModel\", HFILL }},",
          "16946:     { &hf_lppe_northWestCorner,",
          "16947:       { \"northWestCorner\", \"lppe.northWestCorner_element\",",
          "16948:         FT_NONE, BASE_NONE, NULL, 0,",
          "16949:         \"Ellipsoid_Point\", HFILL }},",
          "16950:     { &hf_lppe_northwestCornerAltitude,",
          "16951:       { \"northwestCornerAltitude\", \"lppe.northwestCornerAltitude\",",
          "16952:         FT_INT32, BASE_DEC, NULL, 0,",
          "16953:         \"INTEGER_M500_9000\", HFILL }},",
          "16954:     { &hf_lppe_nrows,",
          "16955:       { \"nrows\", \"lppe.nrows\",",
          "16956:         FT_UINT32, BASE_DEC, NULL, 0,",
          "16957:         \"INTEGER_2_1012\", HFILL }},",
          "16958:     { &hf_lppe_ncols,",
          "16959:       { \"ncols\", \"lppe.ncols\",",
          "16960:         FT_UINT32, BASE_DEC, NULL, 0,",
          "16961:         \"INTEGER_2_1012\", HFILL }},",
          "16962:     { &hf_lppe_spanX,",
          "16963:       { \"spanX\", \"lppe.spanX\",",
          "16964:         FT_UINT32, BASE_DEC, NULL, 0,",
          "16965:         \"INTEGER_6_14\", HFILL }},",
          "16966:     { &hf_lppe_spanY,",
          "16967:       { \"spanY\", \"lppe.spanY\",",
          "16968:         FT_UINT32, BASE_DEC, NULL, 0,",
          "16969:         \"INTEGER_6_14\", HFILL }},",
          "16970:     { &hf_lppe_deltaAltUnits,",
          "16971:       { \"deltaAltUnits\", \"lppe.deltaAltUnits\",",
          "16972:         FT_UINT32, BASE_DEC, NULL, 0,",
          "16973:         \"INTEGER_1_128\", HFILL }},",
          "16974:     { &hf_lppe_altitudeGrid,",
          "16975:       { \"altitudeGrid\", \"lppe.altitudeGrid\",",
          "16976:         FT_UINT32, BASE_DEC, NULL, 0,",
          "16977:         \"SEQUENCE_SIZE_1_10000_OF_DeltaAltitudes\", HFILL }},",
          "16978:     { &hf_lppe_altitudeGrid_item,",
          "16979:       { \"DeltaAltitudes\", \"lppe.DeltaAltitudes_element\",",
          "16980:         FT_NONE, BASE_NONE, NULL, 0,",
          "16981:         NULL, HFILL }},",
          "16982:     { &hf_lppe_northwestCornerHeigth,",
          "16983:       { \"northwestCornerHeigth\", \"lppe.northwestCornerHeigth\",",
          "16984:         FT_UINT32, BASE_DEC, NULL, 0,",
          "16985:         \"INTEGER_0_500\", HFILL }},",
          "16986:     { &hf_lppe_deltaHeigthUnits,",
          "16987:       { \"deltaHeigthUnits\", \"lppe.deltaHeigthUnits\",",
          "16988:         FT_UINT32, BASE_DEC, NULL, 0,",
          "16989:         \"INTEGER_1_16\", HFILL }},",
          "16990:     { &hf_lppe_buildingsHeigthGrid,",
          "16991:       { \"buildingsHeigthGrid\", \"lppe.buildingsHeigthGrid\",",
          "16992:         FT_UINT32, BASE_DEC, NULL, 0,",
          "16993:         \"SEQUENCE_SIZE_1_10000_OF_DeltaHeight\", HFILL }},",
          "16994:     { &hf_lppe_buildingsHeigthGrid_item,",
          "16995:       { \"DeltaHeight\", \"lppe.DeltaHeight_element\",",
          "16996:         FT_NONE, BASE_NONE, NULL, 0,",
          "16997:         NULL, HFILL }},",
          "16998:     { &hf_lppe_deltaAlt,",
          "16999:       { \"deltaAlt\", \"lppe.deltaAlt\",",
          "17000:         FT_INT32, BASE_DEC, NULL, 0,",
          "17001:         \"INTEGER_M15_16\", HFILL }},",
          "17002:     { &hf_lppe_numGridPoints,",
          "17003:       { \"numGridPoints\", \"lppe.numGridPoints\",",
          "17004:         FT_UINT32, BASE_DEC, NULL, 0,",
          "17005:         \"INTEGER_0_255\", HFILL }},",
          "17006:     { &hf_lppe_deltaHeight,",
          "17007:       { \"deltaHeight\", \"lppe.deltaHeight\",",
          "17008:         FT_INT32, BASE_DEC, NULL, 0,",
          "17009:         \"INTEGER_M15_16\", HFILL }},",
          "17010:     { &hf_lppe_eUTRA,",
          "17011:       { \"eUTRA\", \"lppe.eUTRA_element\",",
          "17012:         FT_NONE, BASE_NONE, NULL, 0,",
          "17013:         \"CellGlobalIdEUTRA_AndUTRA\", HFILL }},",
          "17014:     { &hf_lppe_uTRA,",
          "17015:       { \"uTRA\", \"lppe.uTRA_element\",",
          "17016:         FT_NONE, BASE_NONE, NULL, 0,",
          "17017:         \"CellGlobalIdEUTRA_AndUTRA\", HFILL }},",
          "17018:     { &hf_lppe_gSM,",
          "17019:       { \"gSM\", \"lppe.gSM_element\",",
          "17020:         FT_NONE, BASE_NONE, NULL, 0,",
          "17021:         \"CellGlobalIdGERAN\", HFILL }},",
          "",
          "---------------",
          "--- Hunk 78 ---",
          "[Context before]",
          "15782:     { &hf_lppe_session_ID,",
          "15783:       { \"session-ID\", \"lppe.session_ID\",",
          "15784:         FT_BYTES, BASE_NONE, NULL, 0,",
          "15786:     { &hf_lppe_regionSizeInv,",
          "15787:       { \"regionSizeInv\", \"lppe.regionSizeInv\",",
          "15788:         FT_UINT32, BASE_DEC, NULL, 0,",
          "",
          "[Removed Lines]",
          "15785:         \"OCTET_STRING_SIZE_4\", HFILL }},",
          "",
          "[Added Lines]",
          "17357:         \"OCTET_STRING_SIZE_4\", HFILL }},",
          "17358:     { &hf_lppe_standardSystemID,",
          "17359:       { \"standardSystemID\", \"lppe.standardSystemID\",",
          "17360:         FT_UINT32, BASE_DEC, NULL, 0,",
          "17361:         \"INTEGER_1_16\", HFILL }},",
          "17362:     { &hf_lppe_proprietarySystemID,",
          "17363:       { \"proprietarySystemID\", \"lppe.proprietarySystemID_element\",",
          "17364:         FT_NONE, BASE_NONE, NULL, 0,",
          "17365:         NULL, HFILL }},",
          "17366:     { &hf_lppe_vendorOrOperator,",
          "17367:       { \"vendorOrOperator\", \"lppe.vendorOrOperator\",",
          "17368:         FT_UINT32, BASE_DEC, VALS(lppe_OMA_LPPe_VendorOrOperatorID_vals), 0,",
          "17369:         \"OMA_LPPe_VendorOrOperatorID\", HFILL }},",
          "17370:     { &hf_lppe_proprietarySystemID_01,",
          "17371:       { \"proprietarySystemID\", \"lppe.proprietarySystemID\",",
          "17372:         FT_UINT32, BASE_DEC, NULL, 0,",
          "17373:         \"INTEGER_1_16\", HFILL }},",
          "17374:     { &hf_lppe_lppLabels,",
          "17375:       { \"lppLabels\", \"lppe.lppLabels\",",
          "17376:         FT_UINT32, BASE_DEC, NULL, 0,",
          "17377:         \"SEQUENCE_SIZE_1_maxLPPLabelSets_OF_OMA_LPPe_ver1_1_LabelSet\", HFILL }},",
          "17378:     { &hf_lppe_lppLabels_item,",
          "17379:       { \"OMA-LPPe-ver1-1-LabelSet\", \"lppe.OMA_LPPe_ver1_1_LabelSet_element\",",
          "17380:         FT_NONE, BASE_NONE, NULL, 0,",
          "17381:         NULL, HFILL }},",
          "17382:     { &hf_lppe_lppeLabels,",
          "17383:       { \"lppeLabels\", \"lppe.lppeLabels\",",
          "17384:         FT_UINT32, BASE_DEC, NULL, 0,",
          "17385:         \"SEQUENCE_SIZE_1_maxLPPeLabelSets_OF_OMA_LPPe_ver1_1_LabelSet\", HFILL }},",
          "17386:     { &hf_lppe_lppeLabels_item,",
          "17387:       { \"OMA-LPPe-ver1-1-LabelSet\", \"lppe.OMA_LPPe_ver1_1_LabelSet_element\",",
          "17388:         FT_NONE, BASE_NONE, NULL, 0,",
          "17389:         NULL, HFILL }},",
          "17390:     { &hf_lppe_level1_element,",
          "17391:       { \"level1-element\", \"lppe.level1_element_element\",",
          "17392:         FT_NONE, BASE_NONE, NULL, 0,",
          "17393:         NULL, HFILL }},",
          "17394:     { &hf_lppe_level1_element_value,",
          "17395:       { \"level1-element-value\", \"lppe.level1_element_value\",",
          "17396:         FT_UINT32, BASE_DEC, NULL, 0,",
          "17397:         \"INTEGER_1_maxLevel1_element\", HFILL }},",
          "17398:     { &hf_lppe_level2_element,",
          "17399:       { \"level2-element\", \"lppe.level2_element_element\",",
          "17400:         FT_NONE, BASE_NONE, NULL, 0,",
          "17401:         NULL, HFILL }},",
          "17402:     { &hf_lppe_level2_element_value,",
          "17403:       { \"level2-element-value\", \"lppe.level2_element_value\",",
          "17404:         FT_UINT32, BASE_DEC, NULL, 0,",
          "17405:         \"INTEGER_1_maxLevel2_element\", HFILL }},",
          "17406:     { &hf_lppe_level3_element,",
          "17407:       { \"level3-element\", \"lppe.level3_element_element\",",
          "17408:         FT_NONE, BASE_NONE, NULL, 0,",
          "17409:         NULL, HFILL }},",
          "17410:     { &hf_lppe_level3_element_value,",
          "17411:       { \"level3-element-value\", \"lppe.level3_element_value\",",
          "17412:         FT_UINT32, BASE_DEC, NULL, 0,",
          "17413:         \"INTEGER_1_maxLevel3_element\", HFILL }},",
          "17414:     { &hf_lppe_lastElements,",
          "17415:       { \"lastElements\", \"lppe.lastElements\",",
          "17416:         FT_BYTES, BASE_NONE, NULL, 0,",
          "17417:         \"BIT_STRING_SIZE_1_maxFinal_element\", HFILL }},",
          "17418:     { &hf_lppe_additionalElements,",
          "17419:       { \"additionalElements\", \"lppe.additionalElements\",",
          "17420:         FT_UINT32, BASE_DEC, VALS(lppe_T_additionalElements_vals), 0,",
          "17421:         NULL, HFILL }},",
          "17422:     { &hf_lppe_gSMAccess,",
          "17423:       { \"gSMAccess\", \"lppe.gSMAccess_element\",",
          "17424:         FT_NONE, BASE_NONE, NULL, 0,",
          "17425:         \"OMA_LPPe_ver1_1_MCC_MNC\", HFILL }},",
          "17426:     { &hf_lppe_wCDMAAccess,",
          "17427:       { \"wCDMAAccess\", \"lppe.wCDMAAccess_element\",",
          "17428:         FT_NONE, BASE_NONE, NULL, 0,",
          "17429:         \"OMA_LPPe_ver1_1_MCC_MNC\", HFILL }},",
          "17430:     { &hf_lppe_lTEAccess,",
          "17431:       { \"lTEAccess\", \"lppe.lTEAccess_element\",",
          "17432:         FT_NONE, BASE_NONE, NULL, 0,",
          "17433:         \"OMA_LPPe_ver1_1_MCC_MNC\", HFILL }},",
          "17434:     { &hf_lppe_wiMaxAccess,",
          "17435:       { \"wiMaxAccess\", \"lppe.wiMaxAccess_element\",",
          "17436:         FT_NONE, BASE_NONE, NULL, 0,",
          "17437:         \"OMA_LPPe_ver1_1_BSID\", HFILL }},",
          "17438:     { &hf_lppe_wLANAccess,",
          "17439:       { \"wLANAccess\", \"lppe.wLANAccess_element\",",
          "17440:         FT_NONE, BASE_NONE, NULL, 0,",
          "17441:         \"OMA_LPPe_WLAN_AP_ID\", HFILL }},",
          "17442:     { &hf_lppe_mcc,",
          "17443:       { \"mcc\", \"lppe.mcc\",",
          "17444:         FT_UINT32, BASE_DEC, NULL, 0,",
          "17445:         NULL, HFILL }},",
          "17446:     { &hf_lppe_mcc_item,",
          "17447:       { \"mcc item\", \"lppe.mcc_item\",",
          "17448:         FT_UINT32, BASE_DEC, NULL, 0,",
          "17449:         \"INTEGER_0_9\", HFILL }},",
          "17450:     { &hf_lppe_mnc,",
          "17451:       { \"mnc\", \"lppe.mnc\",",
          "17452:         FT_UINT32, BASE_DEC, NULL, 0,",
          "17453:         NULL, HFILL }},",
          "17454:     { &hf_lppe_mnc_item,",
          "17455:       { \"mnc item\", \"lppe.mnc_item\",",
          "17456:         FT_UINT32, BASE_DEC, NULL, 0,",
          "17457:         \"INTEGER_0_9\", HFILL }},",
          "17458:     { &hf_lppe_bsID_MSB,",
          "17459:       { \"bsID-MSB\", \"lppe.bsID_MSB\",",
          "17460:         FT_BYTES, BASE_NONE, NULL, 0,",
          "17461:         \"BIT_STRING_SIZE_24\", HFILL }},",
          "17462:     { &hf_lppe_bsID_LSB,",
          "17463:       { \"bsID-LSB\", \"lppe.bsID_LSB\",",
          "17464:         FT_BYTES, BASE_NONE, NULL, 0,",
          "17465:         \"BIT_STRING_SIZE_24\", HFILL }},",
          "17466:     { &hf_lppe_authenticationSetID,",
          "17467:       { \"authenticationSetID\", \"lppe.authenticationSetID\",",
          "17468:         FT_UINT32, BASE_DEC, NULL, 0,",
          "17469:         \"OMA_LPPe_ver1_1_AuthenticationSetID\", HFILL }},",
          "17470:     { &hf_lppe_rsaPublicKey,",
          "17471:       { \"rsaPublicKey\", \"lppe.rsaPublicKey_element\",",
          "17472:         FT_NONE, BASE_NONE, NULL, 0,",
          "17473:         NULL, HFILL }},",
          "17474:     { &hf_lppe_modulus,",
          "17475:       { \"modulus\", \"lppe.modulus\",",
          "17476:         FT_BYTES, BASE_NONE, NULL, 0,",
          "17477:         \"BIT_STRING_SIZE_2048\", HFILL }},",
          "17478:     { &hf_lppe_exponent,",
          "17479:       { \"exponent\", \"lppe.exponent\",",
          "17480:         FT_BYTES, BASE_NONE, NULL, 0,",
          "17481:         \"BIT_STRING_SIZE_2_2048\", HFILL }},",
          "17482:     { &hf_lppe_saltLength,",
          "17483:       { \"saltLength\", \"lppe.saltLength\",",
          "17484:         FT_UINT32, BASE_DEC, NULL, 0,",
          "17485:         \"INTEGER_0_32\", HFILL }},",
          "17486:     { &hf_lppe_cipherSetID,",
          "17487:       { \"cipherSetID\", \"lppe.cipherSetID\",",
          "17488:         FT_UINT32, BASE_DEC, NULL, 0,",
          "17489:         \"OMA_LPPe_ver1_1_CipherSetID\", HFILL }},",
          "17490:     { &hf_lppe_cipherKey,",
          "17491:       { \"cipherKey\", \"lppe.cipherKey\",",
          "17492:         FT_BYTES, BASE_NONE, NULL, 0,",
          "17493:         \"BIT_STRING_SIZE_128\", HFILL }},",
          "17494:     { &hf_lppe_c0,",
          "17495:       { \"c0\", \"lppe.c0\",",
          "17496:         FT_BYTES, BASE_NONE, NULL, 0,",
          "17497:         \"BIT_STRING_SIZE_1_128\", HFILL }},",
          "",
          "---------------",
          "--- Hunk 79 ---",
          "[Context before]",
          "15923:       { \"segmentedLocationInformation-ReqCapabilities\", \"lppe.segmentedLocationInformation_ReqCapabilities_element\",",
          "15924:         FT_NONE, BASE_NONE, NULL, 0,",
          "15925:         \"OMA_LPPe_SegmentedLocationInformation_ReqCapabilities\", HFILL }},",
          "15926:     { &hf_lppe_vendorOrOperatorIDList,",
          "15927:       { \"vendorOrOperatorIDList\", \"lppe.vendorOrOperatorIDList\",",
          "15928:         FT_UINT32, BASE_DEC, NULL, 0,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "17638:     { &hf_lppe_ver1_1_localCellInformation_ReqCapabilities,",
          "17639:       { \"ver1-1-localCellInformation-ReqCapabilities\", \"lppe.ver1_1_localCellInformation_ReqCapabilities_element\",",
          "17640:         FT_NONE, BASE_NONE, NULL, 0,",
          "17641:         \"OMA_LPPe_ver1_1_localCellInformation_ReqCapabilities\", HFILL }},",
          "17642:     { &hf_lppe_ver1_1_broadcast_ReqCapabilities,",
          "17643:       { \"ver1-1-broadcast-ReqCapabilities\", \"lppe.ver1_1_broadcast_ReqCapabilities_element\",",
          "17644:         FT_NONE, BASE_NONE, NULL, 0,",
          "17645:         \"OMA_LPPe_ver1_1_broadcast_ReqCapabilities\", HFILL }},",
          "",
          "---------------",
          "--- Hunk 80 ---",
          "[Context before]",
          "15939:       { \"OMA-LPPe-VendorOrOperatorID\", \"lppe.OMA_LPPe_VendorOrOperatorID\",",
          "15940:         FT_UINT32, BASE_DEC, VALS(lppe_OMA_LPPe_VendorOrOperatorID_vals), 0,",
          "15941:         NULL, HFILL }},",
          "15942:     { &hf_lppe_iP_Address_Capabilities,",
          "15943:       { \"iP-Address-Capabilities\", \"lppe.iP_Address_Capabilities_element\",",
          "15944:         FT_NONE, BASE_NONE, NULL, 0,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "17662:     { &hf_lppe_broadcastSystems,",
          "17663:       { \"broadcastSystems\", \"lppe.broadcastSystems\",",
          "17664:         FT_UINT32, BASE_DEC, NULL, 0,",
          "17665:         \"SEQUENCE_SIZE_1_16_OF_OMA_LPPe_ver1_1_BroadcastSystemID\", HFILL }},",
          "17666:     { &hf_lppe_broadcastSystems_item,",
          "17667:       { \"OMA-LPPe-ver1-1-BroadcastSystemID\", \"lppe.OMA_LPPe_ver1_1_BroadcastSystemID\",",
          "17668:         FT_UINT32, BASE_DEC, VALS(lppe_OMA_LPPe_ver1_1_BroadcastSystemID_vals), 0,",
          "17669:         NULL, HFILL }},",
          "",
          "---------------",
          "--- Hunk 81 ---",
          "[Context before]",
          "15979:       { \"segmentedLocationInformation-ProvideCapabs\", \"lppe.segmentedLocationInformation_ProvideCapabs_element\",",
          "15980:         FT_NONE, BASE_NONE, NULL, 0,",
          "15981:         \"OMA_LPPe_SegmentedLocationInformation_ProvideCapabs\", HFILL }},",
          "15982:     { &hf_lppe_iP_Address_support,",
          "15983:       { \"iP-Address-support\", \"lppe.iP_Address_support\",",
          "15984:         FT_BYTES, BASE_NONE, NULL, 0,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "17710:     { &hf_lppe_ver1_1_localCellInformation_ProvideCapabilities,",
          "17711:       { \"ver1-1-localCellInformation-ProvideCapabilities\", \"lppe.ver1_1_localCellInformation_ProvideCapabilities_element\",",
          "17712:         FT_NONE, BASE_NONE, NULL, 0,",
          "17713:         \"OMA_LPPe_ver1_1_localCellInformation_ProvideCapabilities\", HFILL }},",
          "17714:     { &hf_lppe_ver1_1_broadcast_ProvideCapabilities,",
          "17715:       { \"ver1-1-broadcast-ProvideCapabilities\", \"lppe.ver1_1_broadcast_ProvideCapabilities\",",
          "17716:         FT_UINT32, BASE_DEC, NULL, 0,",
          "17717:         \"OMA_LPPe_ver1_1_broadcast_ProvideCapabilities\", HFILL }},",
          "",
          "---------------",
          "--- Hunk 82 ---",
          "[Context before]",
          "16075:       { \"wirelessAccessTypes\", \"lppe.wirelessAccessTypes\",",
          "16076:         FT_BYTES, BASE_NONE, NULL, 0,",
          "16077:         \"OMA_LPPe_WirelessAccessTypes\", HFILL }},",
          "16078:     { &hf_lppe_approximate_location,",
          "16079:       { \"approximate-location\", \"lppe.approximate_location_element\",",
          "16080:         FT_NONE, BASE_NONE, NULL, 0,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "17814:     { &hf_lppe_localCellInformation_Support,",
          "17815:       { \"localCellInformation-Support\", \"lppe.localCellInformation_Support\",",
          "17816:         FT_BYTES, BASE_NONE, NULL, 0,",
          "17817:         NULL, HFILL }},",
          "17818:     { &hf_lppe_OMA_LPPe_ver1_1_broadcast_ProvideCapabilities_item,",
          "17819:       { \"OMA-LPPe-ver1-1-BroadcastSystem-Capabs\", \"lppe.OMA_LPPe_ver1_1_BroadcastSystem_Capabs_element\",",
          "17820:         FT_NONE, BASE_NONE, NULL, 0,",
          "17821:         NULL, HFILL }},",
          "17822:     { &hf_lppe_broadcastSystemID,",
          "17823:       { \"broadcastSystemID\", \"lppe.broadcastSystemID\",",
          "17824:         FT_UINT32, BASE_DEC, VALS(lppe_OMA_LPPe_ver1_1_BroadcastSystemID_vals), 0,",
          "17825:         \"OMA_LPPe_ver1_1_BroadcastSystemID\", HFILL }},",
          "17826:     { &hf_lppe_broadcastADTypes,",
          "17827:       { \"broadcastADTypes\", \"lppe.broadcastADTypes_element\",",
          "17828:         FT_NONE, BASE_NONE, NULL, 0,",
          "17829:         \"OMA_LPPe_ver1_1_BroadcastADTypes\", HFILL }},",
          "17830:     { &hf_lppe_point2pointAD,",
          "17831:       { \"point2pointAD\", \"lppe.point2pointAD_element\",",
          "17832:         FT_NONE, BASE_NONE, NULL, 0,",
          "17833:         \"OMA_LPPe_ver1_1_point2pointAD\", HFILL }},",
          "17834:     { &hf_lppe_ciphering,",
          "17835:       { \"ciphering\", \"lppe.ciphering_element\",",
          "17836:         FT_NONE, BASE_NONE, NULL, 0,",
          "17837:         \"OMA_LPPe_ver1_1_Ciphering\", HFILL }},",
          "17838:     { &hf_lppe_authentication,",
          "17839:       { \"authentication\", \"lppe.authentication_element\",",
          "17840:         FT_NONE, BASE_NONE, NULL, 0,",
          "17841:         \"OMA_LPPe_ver1_1_Authentication\", HFILL }},",
          "",
          "---------------",
          "--- Hunk 83 ---",
          "[Context before]",
          "16099:       { \"referencePointAssistanceReq\", \"lppe.referencePointAssistanceReq_element\",",
          "16100:         FT_NONE, BASE_NONE, NULL, 0,",
          "16101:         \"OMA_LPPe_ReferencePointAssistanceReq\", HFILL }},",
          "16102:     { &hf_lppe_periodicAD_session_ID,",
          "16103:       { \"periodicAD-session-ID\", \"lppe.periodicAD_session_ID\",",
          "16106:     { &hf_lppe_typeOfADRequest,",
          "16107:       { \"typeOfADRequest\", \"lppe.typeOfADRequest\",",
          "16108:         FT_UINT32, BASE_DEC, VALS(lppe_TypeOfADRequest_vals), 0,",
          "",
          "[Removed Lines]",
          "16104:         FT_UINT32, BASE_DEC, NULL, 0,",
          "16105:         \"INTEGER_1_256\", HFILL }},",
          "",
          "[Added Lines]",
          "17866:     { &hf_lppe_ver1_1_localCellInformationReq,",
          "17867:       { \"ver1-1-localCellInformationReq\", \"lppe.ver1_1_localCellInformationReq_element\",",
          "17868:         FT_NONE, BASE_NONE, NULL, 0,",
          "17869:         \"OMA_LPPe_ver1_1_LocalCellInformationReq\", HFILL }},",
          "17870:     { &hf_lppe_ver1_1_BroadcastAssistanceDataReq,",
          "17871:       { \"ver1-1-BroadcastAssistanceDataReq\", \"lppe.ver1_1_BroadcastAssistanceDataReq_element\",",
          "17872:         FT_NONE, BASE_NONE, NULL, 0,",
          "17873:         \"OMA_LPPe_ver1_1_BroadcastAssistanceDataReq\", HFILL }},",
          "17874:     { &hf_lppe_ver1_1_AccessNetwork,",
          "17875:       { \"ver1-1-AccessNetwork\", \"lppe.ver1_1_AccessNetwork\",",
          "17876:         FT_UINT32, BASE_DEC, VALS(lppe_OMA_LPPe_ver1_1_AccessNetworkID_vals), 0,",
          "17877:         \"OMA_LPPe_ver1_1_AccessNetworkID\", HFILL }},",
          "17878:     { &hf_lppe_ver1_1_groundMorphologyModelReq,",
          "17879:       { \"ver1-1-groundMorphologyModelReq\", \"lppe.ver1_1_groundMorphologyModelReq_element\",",
          "17880:         FT_NONE, BASE_NONE, NULL, 0,",
          "17881:         \"OMA_LPPe_ver1_1_GroundMorphologyModelReq\", HFILL }},",
          "17884:         FT_BYTES, BASE_NONE, NULL, 0,",
          "17885:         \"OCTET_STRING_SIZE_4\", HFILL }},",
          "",
          "---------------",
          "--- Hunk 84 ---",
          "[Context before]",
          "16127:       { \"mapDataReq\", \"lppe.mapDataReq\",",
          "16128:         FT_BYTES, BASE_NONE, NULL, 0,",
          "16129:         \"OCTET_STRING\", HFILL }},",
          "16130:     { &hf_lppe_assistanceContainerList_01,",
          "16131:       { \"assistanceContainerList\", \"lppe.assistanceContainerList\",",
          "16132:         FT_UINT32, BASE_DEC, NULL, 0,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "17910:     { &hf_lppe_modelsReq,",
          "17911:       { \"modelsReq\", \"lppe.modelsReq\",",
          "17912:         FT_BYTES, BASE_NONE, NULL, 0,",
          "17913:         NULL, HFILL }},",
          "17914:     { &hf_lppe_refAreaParam,",
          "17915:       { \"refAreaParam\", \"lppe.refAreaParam_element\",",
          "17916:         FT_NONE, BASE_NONE, NULL, 0,",
          "17917:         NULL, HFILL }},",
          "17918:     { &hf_lppe_localCellInformationReq,",
          "17919:       { \"localCellInformationReq\", \"lppe.localCellInformationReq\",",
          "17920:         FT_BYTES, BASE_NONE, NULL, 0,",
          "17921:         NULL, HFILL }},",
          "17922:     { &hf_lppe_localCellID,",
          "17923:       { \"localCellID\", \"lppe.localCellID\",",
          "17924:         FT_UINT32, BASE_DEC, VALS(lppe_OMA_LPPe_ver1_1_CellGlobalID_vals), 0,",
          "17925:         \"OMA_LPPe_ver1_1_CellGlobalID\", HFILL }},",
          "17926:     { &hf_lppe_numberOfCells,",
          "17927:       { \"numberOfCells\", \"lppe.numberOfCells\",",
          "17928:         FT_UINT32, BASE_DEC, NULL, 0,",
          "17929:         \"INTEGER_0_7\", HFILL }},",
          "17930:     { &hf_lppe_broadcastSystem,",
          "17931:       { \"broadcastSystem\", \"lppe.broadcastSystem_element\",",
          "17932:         FT_NONE, BASE_NONE, NULL, 0,",
          "17933:         \"OMA_LPPe_ver1_1_BroadcastSystem\", HFILL }},",
          "17934:     { &hf_lppe_cipherSets,",
          "17935:       { \"cipherSets\", \"lppe.cipherSets\",",
          "17936:         FT_UINT32, BASE_DEC, NULL, 0,",
          "17937:         \"SEQUENCE_SIZE_1_16_OF_OMA_LPPe_ver1_1_CipherSetID\", HFILL }},",
          "17938:     { &hf_lppe_cipherSets_item,",
          "17939:       { \"OMA-LPPe-ver1-1-CipherSetID\", \"lppe.OMA_LPPe_ver1_1_CipherSetID\",",
          "17940:         FT_UINT32, BASE_DEC, NULL, 0,",
          "17941:         NULL, HFILL }},",
          "17942:     { &hf_lppe_authenticationSets,",
          "17943:       { \"authenticationSets\", \"lppe.authenticationSets\",",
          "17944:         FT_UINT32, BASE_DEC, NULL, 0,",
          "17945:         \"SEQUENCE_SIZE_1_4_OF_OMA_LPPe_ver1_1_AuthenticationSetID\", HFILL }},",
          "17946:     { &hf_lppe_authenticationSets_item,",
          "17947:       { \"OMA-LPPe-ver1-1-AuthenticationSetID\", \"lppe.OMA_LPPe_ver1_1_AuthenticationSetID\",",
          "17948:         FT_UINT32, BASE_DEC, NULL, 0,",
          "17949:         NULL, HFILL }},",
          "",
          "---------------",
          "--- Hunk 85 ---",
          "[Context before]",
          "16143:       { \"default-reference-point\", \"lppe.default_reference_point_element\",",
          "16144:         FT_NONE, BASE_NONE, NULL, 0,",
          "16145:         \"OMA_LPPe_ReferencePoint\", HFILL }},",
          "16146:     { &hf_lppe_typeOfADProvide,",
          "16147:       { \"typeOfADProvide\", \"lppe.typeOfADProvide\",",
          "16148:         FT_UINT32, BASE_DEC, VALS(lppe_OMA_LPPe_TypeOfADProvide_vals), 0,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "17966:     { &hf_lppe_ver1_1_localCellInformation,",
          "17967:       { \"ver1-1-localCellInformation\", \"lppe.ver1_1_localCellInformation_element\",",
          "17968:         FT_NONE, BASE_NONE, NULL, 0,",
          "17969:         \"OMA_LPPe_ver1_1_LocalCellInformation\", HFILL }},",
          "17970:     { &hf_lppe_ver1_1_BroadcastAssistanceData,",
          "17971:       { \"ver1-1-BroadcastAssistanceData\", \"lppe.ver1_1_BroadcastAssistanceData_element\",",
          "17972:         FT_NONE, BASE_NONE, NULL, 0,",
          "17973:         \"OMA_LPPe_ver1_1_BroadcastAssistanceData\", HFILL }},",
          "17974:     { &hf_lppe_ver1_1_groundMorphologyModel,",
          "17975:       { \"ver1-1-groundMorphologyModel\", \"lppe.ver1_1_groundMorphologyModel_element\",",
          "17976:         FT_NONE, BASE_NONE, NULL, 0,",
          "17977:         \"OMA_LPPe_ver1_1_GroundMorphologyModel\", HFILL }},",
          "",
          "---------------",
          "--- Hunk 86 ---",
          "[Context before]",
          "16151:       { \"segment-number\", \"lppe.segment_number\",",
          "16152:         FT_UINT32, BASE_DEC, NULL, 0,",
          "16153:         \"INTEGER_1_4096\", HFILL }},",
          "16154:     { &hf_lppe_iP_Address_Request,",
          "16155:       { \"iP-Address-Request\", \"lppe.iP_Address_Request_element\",",
          "16156:         FT_NONE, BASE_NONE, NULL, 0,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "17986:     { &hf_lppe_ver1_1_timingInformation,",
          "17987:       { \"ver1-1-timingInformation\", \"lppe.ver1_1_timingInformation\",",
          "17988:         FT_UINT32, BASE_DEC, NULL, 0,",
          "17989:         \"SEQUENCE_SIZE_1_maxCellSets_OF_GNSS_ReferenceTime\", HFILL }},",
          "17990:     { &hf_lppe_ver1_1_timingInformation_item,",
          "17991:       { \"GNSS-ReferenceTime\", \"lppe.GNSS_ReferenceTime_element\",",
          "17992:         FT_NONE, BASE_NONE, NULL, 0,",
          "17993:         NULL, HFILL }},",
          "17994:     { &hf_lppe_ver1_1_other_CellInformation,",
          "17995:       { \"ver1-1-other-CellInformation\", \"lppe.ver1_1_other_CellInformation\",",
          "17996:         FT_UINT32, BASE_DEC, NULL, 0,",
          "17997:         \"SEQUENCE_SIZE_1_maxCells_OF_OMA_LPPe_ver1_1_CellInformation\", HFILL }},",
          "17998:     { &hf_lppe_ver1_1_other_CellInformation_item,",
          "17999:       { \"OMA-LPPe-ver1-1-CellInformation\", \"lppe.OMA_LPPe_ver1_1_CellInformation_element\",",
          "18000:         FT_NONE, BASE_NONE, NULL, 0,",
          "18001:         NULL, HFILL }},",
          "18002:     { &hf_lppe_cellID,",
          "18003:       { \"cellID\", \"lppe.cellID\",",
          "18004:         FT_UINT32, BASE_DEC, VALS(lppe_OMA_LPPe_ver1_1_CellGlobalID_vals), 0,",
          "18005:         \"OMA_LPPe_ver1_1_CellGlobalID\", HFILL }},",
          "18006:     { &hf_lppe_coverage,",
          "18007:       { \"coverage\", \"lppe.coverage\",",
          "18008:         FT_UINT32, BASE_DEC, VALS(lppe_T_coverage_vals), 0,",
          "18009:         NULL, HFILL }},",
          "18010:     { &hf_lppe_circle_01,",
          "18011:       { \"circle\", \"lppe.circle_element\",",
          "18012:         FT_NONE, BASE_NONE, NULL, 0,",
          "18013:         \"Ellipsoid_PointWithUncertaintyCircle\", HFILL }},",
          "18014:     { &hf_lppe_ellipse_01,",
          "18015:       { \"ellipse\", \"lppe.ellipse_element\",",
          "18016:         FT_NONE, BASE_NONE, NULL, 0,",
          "18017:         \"EllipsoidPointWithUncertaintyEllipse\", HFILL }},",
          "18018:     { &hf_lppe_arc,",
          "18019:       { \"arc\", \"lppe.arc_element\",",
          "18020:         FT_NONE, BASE_NONE, NULL, 0,",
          "18021:         \"EllipsoidArc\", HFILL }},",
          "18022:     { &hf_lppe_polygon,",
          "18023:       { \"polygon\", \"lppe.polygon\",",
          "18024:         FT_UINT32, BASE_DEC, NULL, 0,",
          "18025:         NULL, HFILL }},",
          "18026:     { &hf_lppe_coordinates,",
          "18027:       { \"coordinates\", \"lppe.coordinates_element\",",
          "18028:         FT_NONE, BASE_NONE, NULL, 0,",
          "18029:         \"EllipsoidPointWithAltitudeAndUncertaintyEllipsoid\", HFILL }},",
          "18030:     { &hf_lppe_frequencyAccuracy,",
          "18031:       { \"frequencyAccuracy\", \"lppe.frequencyAccuracy\",",
          "18032:         FT_UINT32, BASE_DEC, NULL, 0,",
          "18033:         \"INTEGER_1_6\", HFILL }},",
          "18034:     { &hf_lppe_broadcastSystem_01,",
          "18035:       { \"broadcastSystem\", \"lppe.broadcastSystem\",",
          "18036:         FT_UINT32, BASE_DEC, VALS(lppe_OMA_LPPe_ver1_1_BroadcastSystemID_vals), 0,",
          "18037:         \"OMA_LPPe_ver1_1_BroadcastSystemID\", HFILL }},",
          "18038:     { &hf_lppe_accessNetworks,",
          "18039:       { \"accessNetworks\", \"lppe.accessNetworks\",",
          "18040:         FT_UINT32, BASE_DEC, NULL, 0,",
          "18041:         \"SEQUENCE_SIZE_1_16_OF_OMA_LPPe_ver1_1_AccessNetworkID\", HFILL }},",
          "18042:     { &hf_lppe_accessNetworks_item,",
          "18043:       { \"OMA-LPPe-ver1-1-AccessNetworkID\", \"lppe.OMA_LPPe_ver1_1_AccessNetworkID\",",
          "18044:         FT_UINT32, BASE_DEC, VALS(lppe_OMA_LPPe_ver1_1_AccessNetworkID_vals), 0,",
          "18045:         NULL, HFILL }},",
          "18046:     { &hf_lppe_coverageArea,",
          "18047:       { \"coverageArea\", \"lppe.coverageArea\",",
          "18048:         FT_UINT32, BASE_DEC, VALS(lppe_T_coverageArea_vals), 0,",
          "18049:         NULL, HFILL }},",
          "18050:     { &hf_lppe_broadcastMode,",
          "18051:       { \"broadcastMode\", \"lppe.broadcastMode\",",
          "18052:         FT_UINT32, BASE_DEC, VALS(lppe_T_broadcastMode_vals), 0,",
          "18053:         NULL, HFILL }},",
          "18054:     { &hf_lppe_unencapsulated,",
          "18055:       { \"unencapsulated\", \"lppe.unencapsulated_element\",",
          "18056:         FT_NONE, BASE_NONE, NULL, 0,",
          "18057:         NULL, HFILL }},",
          "18058:     { &hf_lppe_encapsulated,",
          "18059:       { \"encapsulated\", \"lppe.encapsulated_element\",",
          "18060:         FT_NONE, BASE_NONE, NULL, 0,",
          "18061:         \"OMA_LPPe_ver1_1_EncapsulatedMode\", HFILL }},",
          "18062:     { &hf_lppe_serverID,",
          "18063:       { \"serverID\", \"lppe.serverID_element\",",
          "18064:         FT_NONE, BASE_NONE, NULL, 0,",
          "18065:         \"OMA_LPPe_ver1_1_ServerID\", HFILL }},",
          "18066:     { &hf_lppe_cipherSets_01,",
          "18067:       { \"cipherSets\", \"lppe.cipherSets\",",
          "18068:         FT_UINT32, BASE_DEC, NULL, 0,",
          "18069:         \"SEQUENCE_SIZE_1_16_OF_OMA_LPPe_ver1_1_CipherSet\", HFILL }},",
          "18070:     { &hf_lppe_cipherSets_item_01,",
          "18071:       { \"OMA-LPPe-ver1-1-CipherSet\", \"lppe.OMA_LPPe_ver1_1_CipherSet_element\",",
          "18072:         FT_NONE, BASE_NONE, NULL, 0,",
          "18073:         NULL, HFILL }},",
          "18074:     { &hf_lppe_authentication_01,",
          "18075:       { \"authentication\", \"lppe.authentication\",",
          "18076:         FT_UINT32, BASE_DEC, NULL, 0,",
          "18077:         \"SEQUENCE_SIZE_1_4_OF_OMA_LPPe_ver1_1_AuthenticationSet\", HFILL }},",
          "18078:     { &hf_lppe_authentication_item,",
          "18079:       { \"OMA-LPPe-ver1-1-AuthenticationSet\", \"lppe.OMA_LPPe_ver1_1_AuthenticationSet_element\",",
          "18080:         FT_NONE, BASE_NONE, NULL, 0,",
          "18081:         NULL, HFILL }},",
          "",
          "---------------",
          "--- Hunk 87 ---",
          "[Context before]",
          "16187:       { \"segmentedLIResume\", \"lppe.segmentedLIResume_element\",",
          "16188:         FT_NONE, BASE_NONE, NULL, 0,",
          "16189:         \"OMA_LPPe_SegmentedLIResume\", HFILL }},",
          "16194:     { &hf_lppe_typeOfLocInfoRequest,",
          "16195:       { \"typeOfLocInfoRequest\", \"lppe.typeOfLocInfoRequest\",",
          "16196:         FT_UINT32, BASE_DEC, VALS(lppe_OMA_LPPe_TypeOfLocInfoRequest_vals), 0,",
          "",
          "[Removed Lines]",
          "16190:     { &hf_lppe_session_ID_01,",
          "16191:       { \"session-ID\", \"lppe.session_ID\",",
          "16192:         FT_UINT32, BASE_DEC, NULL, 0,",
          "16193:         \"INTEGER_1_256\", HFILL }},",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 88 ---",
          "[Context before]",
          "16271:       { \"locationInformationTimeStamp\", \"lppe.locationInformationTimeStamp\",",
          "16272:         FT_UINT32, BASE_DEC, VALS(lppe_OMA_LPPe_TimeStamp_vals), 0,",
          "16273:         \"OMA_LPPe_TimeStamp\", HFILL }},",
          "16274:     { &hf_lppe_subjectLocation,",
          "16275:       { \"subjectLocation\", \"lppe.subjectLocation_element\",",
          "16276:         FT_NONE, BASE_NONE, NULL, 0,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18198:     { &hf_lppe_locationSource,",
          "18199:       { \"locationSource\", \"lppe.locationSource_element\",",
          "18200:         FT_NONE, BASE_NONE, NULL, 0,",
          "18201:         \"OMA_LPPe_LocationSource\", HFILL }},",
          "",
          "---------------",
          "--- Hunk 89 ---",
          "[Context before]",
          "16335:       { \"relativeTime\", \"lppe.relativeTime\",",
          "16336:         FT_UINT32, BASE_DEC, NULL, 0,",
          "16337:         \"INTEGER_0_1024\", HFILL }},",
          "16338:     { &hf_lppe_abortCause,",
          "16339:       { \"abortCause\", \"lppe.abortCause\",",
          "16340:         FT_UINT32, BASE_DEC, VALS(lppe_T_abortCause_vals), 0,",
          "16341:         NULL, HFILL }},",
          "16342:     { &hf_lppe_periodicSessionIDtoAbort,",
          "16343:       { \"periodicSessionIDtoAbort\", \"lppe.periodicSessionIDtoAbort\",",
          "16346:     { &hf_lppe_commonAssistData,",
          "16347:       { \"commonAssistData\", \"lppe.commonAssistData_element\",",
          "16348:         FT_NONE, BASE_NONE, NULL, 0,",
          "",
          "[Removed Lines]",
          "16344:         FT_UINT32, BASE_DEC, NULL, 0,",
          "16345:         \"INTEGER_1_256\", HFILL }},",
          "",
          "[Added Lines]",
          "18266:     { &hf_lppe_agnss,",
          "18267:       { \"agnss\", \"lppe.agnss_element\",",
          "18268:         FT_NONE, BASE_NONE, NULL, 0,",
          "18269:         NULL, HFILL }},",
          "18270:     { &hf_lppe_otdoa,",
          "18271:       { \"otdoa\", \"lppe.otdoa_element\",",
          "18272:         FT_NONE, BASE_NONE, NULL, 0,",
          "18273:         NULL, HFILL }},",
          "18274:     { &hf_lppe_eotd,",
          "18275:       { \"eotd\", \"lppe.eotd_element\",",
          "18276:         FT_NONE, BASE_NONE, NULL, 0,",
          "18277:         NULL, HFILL }},",
          "18278:     { &hf_lppe_otdoaUTRA,",
          "18279:       { \"otdoaUTRA\", \"lppe.otdoaUTRA_element\",",
          "18280:         FT_NONE, BASE_NONE, NULL, 0,",
          "18281:         NULL, HFILL }},",
          "18282:     { &hf_lppe_ecidLTE,",
          "18283:       { \"ecidLTE\", \"lppe.ecidLTE_element\",",
          "18284:         FT_NONE, BASE_NONE, NULL, 0,",
          "18285:         NULL, HFILL }},",
          "18286:     { &hf_lppe_ecidGSM,",
          "18287:       { \"ecidGSM\", \"lppe.ecidGSM_element\",",
          "18288:         FT_NONE, BASE_NONE, NULL, 0,",
          "18289:         NULL, HFILL }},",
          "18290:     { &hf_lppe_ecidUTRA,",
          "18291:       { \"ecidUTRA\", \"lppe.ecidUTRA_element\",",
          "18292:         FT_NONE, BASE_NONE, NULL, 0,",
          "18293:         NULL, HFILL }},",
          "18294:     { &hf_lppe_wlanAP,",
          "18295:       { \"wlanAP\", \"lppe.wlanAP_element\",",
          "18296:         FT_NONE, BASE_NONE, NULL, 0,",
          "18297:         NULL, HFILL }},",
          "18298:     { &hf_lppe_srn,",
          "18299:       { \"srn\", \"lppe.srn_element\",",
          "18300:         FT_NONE, BASE_NONE, NULL, 0,",
          "18301:         NULL, HFILL }},",
          "18302:     { &hf_lppe_sensors,",
          "18303:       { \"sensors\", \"lppe.sensors_element\",",
          "18304:         FT_NONE, BASE_NONE, NULL, 0,",
          "18305:         NULL, HFILL }},",
          "18312:         FT_BYTES, BASE_NONE, NULL, 0,",
          "18313:         \"OCTET_STRING_SIZE_4\", HFILL }},",
          "",
          "---------------",
          "--- Hunk 90 ---",
          "[Context before]",
          "18038:     { &hf_lppe_roundTripTime,",
          "18039:       { \"roundTripTime\", \"lppe.roundTripTime\",",
          "18040:         FT_UINT32, BASE_DEC, NULL, 0,",
          "18042:     { &hf_lppe_roundTripTimeExtension,",
          "18043:       { \"roundTripTimeExtension\", \"lppe.roundTripTimeExtension\",",
          "18044:         FT_UINT32, BASE_DEC, NULL, 0,",
          "",
          "[Removed Lines]",
          "18041:         \"INTEGER_0_327\", HFILL }},",
          "",
          "[Added Lines]",
          "20009:         \"INTEGER_0_32766\", HFILL }},",
          "",
          "---------------",
          "--- Hunk 91 ---",
          "[Context before]",
          "18327:       { \"plmn-Identity\", \"lppe.plmn_Identity_element\",",
          "18328:         FT_NONE, BASE_NONE, NULL, 0,",
          "18329:         NULL, HFILL }},",
          "18331:       { \"mcc\", \"lppe.mcc\",",
          "18332:         FT_UINT32, BASE_DEC, NULL, 0,",
          "18339:       { \"mnc\", \"lppe.mnc\",",
          "18340:         FT_UINT32, BASE_DEC, NULL, 0,",
          "18346:     { &hf_lppe_multiple_PLMNs,",
          "18347:       { \"multiple-PLMNs\", \"lppe.multiple_PLMNs\",",
          "18348:         FT_BOOLEAN, BASE_NONE, NULL, 0,",
          "",
          "[Removed Lines]",
          "18330:     { &hf_lppe_mcc,",
          "18333:         NULL, HFILL }},",
          "18334:     { &hf_lppe_mcc_item,",
          "18335:       { \"mcc item\", \"lppe.mcc_item\",",
          "18336:         FT_UINT32, BASE_DEC, NULL, 0,",
          "18337:         \"INTEGER_0_9\", HFILL }},",
          "18338:     { &hf_lppe_mnc,",
          "18341:         NULL, HFILL }},",
          "18342:     { &hf_lppe_mnc_item,",
          "18343:       { \"mnc item\", \"lppe.mnc_item\",",
          "18344:         FT_UINT32, BASE_DEC, NULL, 0,",
          "18345:         \"INTEGER_0_9\", HFILL }},",
          "",
          "[Added Lines]",
          "20298:     { &hf_lppe_mcc_01,",
          "20301:         \"T_mcc_01\", HFILL }},",
          "20302:     { &hf_lppe_mnc_01,",
          "20305:         \"T_mnc_01\", HFILL }},",
          "",
          "---------------",
          "--- Hunk 92 ---",
          "[Context before]",
          "18375:       { \"OMA-LPPe-ECID-LTE-CellData\", \"lppe.OMA_LPPe_ECID_LTE_CellData_element\",",
          "18376:         FT_NONE, BASE_NONE, NULL, 0,",
          "18377:         NULL, HFILL }},",
          "18379:       { \"coverageArea\", \"lppe.coverageArea_element\",",
          "18380:         FT_NONE, BASE_NONE, NULL, 0,",
          "18381:         \"OMA_LPPe_WLANFemtoCoverageArea\", HFILL }},",
          "",
          "[Removed Lines]",
          "18378:     { &hf_lppe_coverageArea,",
          "",
          "[Added Lines]",
          "20338:     { &hf_lppe_coverageArea_01,",
          "",
          "---------------",
          "--- Hunk 93 ---",
          "[Context before]",
          "18583:       { \"plmn-Identity\", \"lppe.plmn_Identity_element\",",
          "18584:         FT_NONE, BASE_NONE, NULL, 0,",
          "18585:         \"T_plmn_Identity_01\", HFILL }},",
          "18587:       { \"mcc\", \"lppe.mcc\",",
          "18588:         FT_UINT32, BASE_DEC, NULL, 0,",
          "18591:       { \"mnc\", \"lppe.mnc\",",
          "18592:         FT_UINT32, BASE_DEC, NULL, 0,",
          "18594:     { &hf_lppe_base_station_list,",
          "18595:       { \"base-station-list\", \"lppe.base_station_list\",",
          "18596:         FT_UINT32, BASE_DEC, NULL, 0,",
          "",
          "[Removed Lines]",
          "18586:     { &hf_lppe_mcc_01,",
          "18589:         \"T_mcc_01\", HFILL }},",
          "18590:     { &hf_lppe_mnc_01,",
          "18593:         \"T_mnc_01\", HFILL }},",
          "",
          "[Added Lines]",
          "20546:     { &hf_lppe_mcc_02,",
          "20549:         \"T_mcc_02\", HFILL }},",
          "20550:     { &hf_lppe_mnc_02,",
          "20553:         \"T_mnc_02\", HFILL }},",
          "",
          "---------------",
          "--- Hunk 94 ---",
          "[Context before]",
          "18747:       { \"plmn-Identity\", \"lppe.plmn_Identity_element\",",
          "18748:         FT_NONE, BASE_NONE, NULL, 0,",
          "18749:         \"T_plmn_Identity_02\", HFILL }},",
          "18751:       { \"mcc\", \"lppe.mcc\",",
          "18752:         FT_UINT32, BASE_DEC, NULL, 0,",
          "18755:       { \"mnc\", \"lppe.mnc\",",
          "18756:         FT_UINT32, BASE_DEC, NULL, 0,",
          "18758:     { &hf_lppe_ecid_utra_nodeB_list,",
          "18759:       { \"ecid-utra-nodeB-list\", \"lppe.ecid_utra_nodeB_list\",",
          "18760:         FT_UINT32, BASE_DEC, NULL, 0,",
          "",
          "[Removed Lines]",
          "18750:     { &hf_lppe_mcc_02,",
          "18753:         \"T_mcc_02\", HFILL }},",
          "18754:     { &hf_lppe_mnc_02,",
          "18757:         \"T_mnc_02\", HFILL }},",
          "",
          "[Added Lines]",
          "20710:     { &hf_lppe_mcc_03,",
          "20713:         \"T_mcc_03\", HFILL }},",
          "20714:     { &hf_lppe_mnc_03,",
          "20717:         \"T_mnc_03\", HFILL }},",
          "",
          "---------------",
          "--- Hunk 95 ---",
          "[Context before]",
          "19079:       { \"plmn-Identity\", \"lppe.plmn_Identity_element\",",
          "19080:         FT_NONE, BASE_NONE, NULL, 0,",
          "19081:         \"T_plmn_Identity_03\", HFILL }},",
          "19083:       { \"mcc\", \"lppe.mcc\",",
          "19084:         FT_UINT32, BASE_DEC, NULL, 0,",
          "19087:       { \"mnc\", \"lppe.mnc\",",
          "19088:         FT_UINT32, BASE_DEC, NULL, 0,",
          "19090:     { &hf_lppe_supported_channels_11a,",
          "19091:       { \"supported-channels-11a\", \"lppe.supported_channels_11a_element\",",
          "19092:         FT_NONE, BASE_NONE, NULL, 0,",
          "",
          "[Removed Lines]",
          "19082:     { &hf_lppe_mcc_03,",
          "19085:         \"T_mcc_03\", HFILL }},",
          "19086:     { &hf_lppe_mnc_03,",
          "19089:         \"T_mnc_03\", HFILL }},",
          "",
          "[Added Lines]",
          "21042:     { &hf_lppe_mcc_04,",
          "21045:         \"T_mcc_04\", HFILL }},",
          "21046:     { &hf_lppe_mnc_04,",
          "21049:         \"T_mnc_04\", HFILL }},",
          "",
          "---------------",
          "--- Hunk 96 ---",
          "[Context before]",
          "19303:       { \"apReportedLocation\", \"lppe.apReportedLocation_element\",",
          "19304:         FT_NONE, BASE_NONE, NULL, 0,",
          "19305:         \"OMA_LPPe_WLAN_ReportedLocation\", HFILL }},",
          "19306:     { &hf_lppe_rTDValue,",
          "19307:       { \"rTDValue\", \"lppe.rTDValue\",",
          "19308:         FT_UINT32, BASE_DEC, NULL, 0,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21266:     { &hf_lppe_apTransmitPower,",
          "21267:       { \"apTransmitPower\", \"lppe.apTransmitPower\",",
          "21268:         FT_INT32, BASE_DEC, NULL, 0,",
          "21269:         \"INTEGER_M127_128\", HFILL }},",
          "21270:     { &hf_lppe_apAntennaGain,",
          "21271:       { \"apAntennaGain\", \"lppe.apAntennaGain\",",
          "21272:         FT_INT32, BASE_DEC, NULL, 0,",
          "21273:         \"INTEGER_M127_128\", HFILL }},",
          "21274:     { &hf_lppe_ueSignaltoNoise,",
          "21275:       { \"ueSignaltoNoise\", \"lppe.ueSignaltoNoise\",",
          "21276:         FT_INT32, BASE_DEC, NULL, 0,",
          "21277:         \"INTEGER_M127_128\", HFILL }},",
          "21278:     { &hf_lppe_ueSignalStrength,",
          "21279:       { \"ueSignalStrength\", \"lppe.ueSignalStrength\",",
          "21280:         FT_INT32, BASE_DEC, NULL, 0,",
          "21281:         \"INTEGER_M127_128\", HFILL }},",
          "21282:     { &hf_lppe_apSignalStrengthDelta,",
          "21283:       { \"apSignalStrengthDelta\", \"lppe.apSignalStrengthDelta\",",
          "21284:         FT_UINT32, BASE_DEC, NULL, 0,",
          "21285:         \"INTEGER_0_1\", HFILL }},",
          "21286:     { &hf_lppe_ueSignalStrengthDelta,",
          "21287:       { \"ueSignalStrengthDelta\", \"lppe.ueSignalStrengthDelta\",",
          "21288:         FT_UINT32, BASE_DEC, NULL, 0,",
          "21289:         \"INTEGER_0_1\", HFILL }},",
          "21290:     { &hf_lppe_apSignaltoNoiseDelta,",
          "21291:       { \"apSignaltoNoiseDelta\", \"lppe.apSignaltoNoiseDelta\",",
          "21292:         FT_UINT32, BASE_DEC, NULL, 0,",
          "21293:         \"INTEGER_0_1\", HFILL }},",
          "21294:     { &hf_lppe_ueSignaltoNoiseDelta,",
          "21295:       { \"ueSignaltoNoiseDelta\", \"lppe.ueSignaltoNoiseDelta\",",
          "21296:         FT_UINT32, BASE_DEC, NULL, 0,",
          "21297:         \"INTEGER_0_1\", HFILL }},",
          "21298:     { &hf_lppe_operatingClass,",
          "21299:       { \"operatingClass\", \"lppe.operatingClass\",",
          "21300:         FT_UINT32, BASE_DEC, NULL, 0,",
          "21301:         \"INTEGER_0_255\", HFILL }},",
          "",
          "---------------",
          "--- Hunk 97 ---",
          "[Context before]",
          "19355:       { \"requestedMeasurements\", \"lppe.requestedMeasurements\",",
          "19356:         FT_BYTES, BASE_NONE, NULL, 0,",
          "19357:         \"T_requestedMeasurements_03\", HFILL }},",
          "19358:     { &hf_lppe_wlan_ecid_MeasSupported,",
          "19359:       { \"wlan-ecid-MeasSupported\", \"lppe.wlan_ecid_MeasSupported\",",
          "19360:         FT_BYTES, BASE_NONE, NULL, 0,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21354:     { &hf_lppe_additionalRequestedMeasurements,",
          "21355:       { \"additionalRequestedMeasurements\", \"lppe.additionalRequestedMeasurements\",",
          "21356:         FT_BYTES, BASE_NONE, NULL, 0,",
          "21357:         NULL, HFILL }},",
          "",
          "---------------",
          "--- Hunk 98 ---",
          "[Context before]",
          "19371:       { \"wlan-ap-ADSupported\", \"lppe.wlan_ap_ADSupported\",",
          "19372:         FT_BYTES, BASE_NONE, NULL, 0,",
          "19373:         NULL, HFILL }},",
          "19374:     { &hf_lppe_apTypes,",
          "19375:       { \"apTypes\", \"lppe.apTypes\",",
          "19376:         FT_BYTES, BASE_NONE, NULL, 0,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21374:     { &hf_lppe_additional_wlan_ecid_MeasSupported,",
          "21375:       { \"additional-wlan-ecid-MeasSupported\", \"lppe.additional_wlan_ecid_MeasSupported\",",
          "21376:         FT_BYTES, BASE_NONE, NULL, 0,",
          "21377:         NULL, HFILL }},",
          "",
          "---------------",
          "--- Hunk 99 ---",
          "[Context before]",
          "19455:       { \"apRecLocNotAvailable\", \"lppe.apRecLocNotAvailable_element\",",
          "19456:         FT_NONE, BASE_NONE, NULL, 0,",
          "19457:         NULL, HFILL }},",
          "19458:     { &hf_lppe_ecid_wimax_CombinedLocationInformation,",
          "19459:       { \"ecid-wimax-CombinedLocationInformation\", \"lppe.ecid_wimax_CombinedLocationInformation\",",
          "19460:         FT_UINT32, BASE_DEC, NULL, 0,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21462:     { &hf_lppe_apTPNotAvailable,",
          "21463:       { \"apTPNotAvailable\", \"lppe.apTPNotAvailable_element\",",
          "21464:         FT_NONE, BASE_NONE, NULL, 0,",
          "21465:         NULL, HFILL }},",
          "21466:     { &hf_lppe_apAGNotAvailable,",
          "21467:       { \"apAGNotAvailable\", \"lppe.apAGNotAvailable_element\",",
          "21468:         FT_NONE, BASE_NONE, NULL, 0,",
          "21469:         NULL, HFILL }},",
          "21470:     { &hf_lppe_ueSNNotAvailable,",
          "21471:       { \"ueSNNotAvailable\", \"lppe.ueSNNotAvailable_element\",",
          "21472:         FT_NONE, BASE_NONE, NULL, 0,",
          "21473:         NULL, HFILL }},",
          "21474:     { &hf_lppe_ueRSSINotAvailable,",
          "21475:       { \"ueRSSINotAvailable\", \"lppe.ueRSSINotAvailable_element\",",
          "21476:         FT_NONE, BASE_NONE, NULL, 0,",
          "21477:         NULL, HFILL }},",
          "21478:     { &hf_lppe_ocNotAvailable,",
          "21479:       { \"ocNotAvailable\", \"lppe.ocNotAvailable_element\",",
          "21480:         FT_NONE, BASE_NONE, NULL, 0,",
          "21481:         NULL, HFILL }},",
          "",
          "---------------",
          "--- Hunk 100 ---",
          "[Context before]",
          "19483:       { \"wimaxNMRList\", \"lppe.wimaxNMRList\",",
          "19484:         FT_UINT32, BASE_DEC, NULL, 0,",
          "19485:         \"OMA_LPPe_ECID_WiMax_WimaxNMRList\", HFILL }},",
          "19494:     { &hf_lppe_rTD,",
          "19495:       { \"rTD\", \"lppe.rTD\",",
          "19496:         FT_UINT32, BASE_DEC, NULL, 0,",
          "",
          "[Removed Lines]",
          "19486:     { &hf_lppe_bsID_MSB,",
          "19487:       { \"bsID-MSB\", \"lppe.bsID_MSB\",",
          "19488:         FT_BYTES, BASE_NONE, NULL, 0,",
          "19489:         \"BIT_STRING_SIZE_24\", HFILL }},",
          "19490:     { &hf_lppe_bsID_LSB,",
          "19491:       { \"bsID-LSB\", \"lppe.bsID_LSB\",",
          "19492:         FT_BYTES, BASE_NONE, NULL, 0,",
          "19493:         \"BIT_STRING_SIZE_24\", HFILL }},",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 101 ---",
          "[Context before]",
          "19599:       { \"nMRbSLocationNotAvailable\", \"lppe.nMRbSLocationNotAvailable_element\",",
          "19600:         FT_NONE, BASE_NONE, NULL, 0,",
          "19601:         NULL, HFILL }},",
          "19602:     { &hf_lppe_motionStateList,",
          "19603:       { \"motionStateList\", \"lppe.motionStateList\",",
          "19604:         FT_UINT32, BASE_DEC, NULL, 0,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21618:     { &hf_lppe_atmosphericPressureAD,",
          "21619:       { \"atmosphericPressureAD\", \"lppe.atmosphericPressureAD_element\",",
          "21620:         FT_NONE, BASE_NONE, NULL, 0,",
          "21621:         \"OMA_LPPe_AtmosphericPressureAD\", HFILL }},",
          "21622:     { &hf_lppe_referencePressure,",
          "21623:       { \"referencePressure\", \"lppe.referencePressure\",",
          "21624:         FT_INT32, BASE_DEC, NULL, 0,",
          "21625:         \"INTEGER_M1024_1023\", HFILL }},",
          "21626:     { &hf_lppe_period,",
          "21627:       { \"period\", \"lppe.period_element\",",
          "21628:         FT_NONE, BASE_NONE, NULL, 0,",
          "21629:         NULL, HFILL }},",
          "21630:     { &hf_lppe_pressureValidityPeriod,",
          "21631:       { \"pressureValidityPeriod\", \"lppe.pressureValidityPeriod_element\",",
          "21632:         FT_NONE, BASE_NONE, NULL, 0,",
          "21633:         \"OMA_LPPe_ValidityPeriod\", HFILL }},",
          "21634:     { &hf_lppe_referencePressureRate,",
          "21635:       { \"referencePressureRate\", \"lppe.referencePressureRate\",",
          "21636:         FT_INT32, BASE_DEC, NULL, 0,",
          "21637:         \"INTEGER_M128_127\", HFILL }},",
          "21638:     { &hf_lppe_area_01,",
          "21639:       { \"area\", \"lppe.area_element\",",
          "21640:         FT_NONE, BASE_NONE, NULL, 0,",
          "21641:         NULL, HFILL }},",
          "21642:     { &hf_lppe_pressureValidityArea,",
          "21643:       { \"pressureValidityArea\", \"lppe.pressureValidityArea_element\",",
          "21644:         FT_NONE, BASE_NONE, NULL, 0,",
          "21645:         \"OMA_LPPe_PressureValidityArea\", HFILL }},",
          "21646:     { &hf_lppe_centerPoint,",
          "21647:       { \"centerPoint\", \"lppe.centerPoint_element\",",
          "21648:         FT_NONE, BASE_NONE, NULL, 0,",
          "21649:         \"Ellipsoid_Point\", HFILL }},",
          "21650:     { &hf_lppe_validityAreaWidth,",
          "21651:       { \"validityAreaWidth\", \"lppe.validityAreaWidth\",",
          "21652:         FT_UINT32, BASE_DEC, NULL, 0,",
          "21653:         \"INTEGER_1_128\", HFILL }},",
          "21654:     { &hf_lppe_validityAreaHeight,",
          "21655:       { \"validityAreaHeight\", \"lppe.validityAreaHeight\",",
          "21656:         FT_UINT32, BASE_DEC, NULL, 0,",
          "21657:         \"INTEGER_1_128\", HFILL }},",
          "21658:     { &hf_lppe_pressureSensorAD,",
          "21659:       { \"pressureSensorAD\", \"lppe.pressureSensorAD_element\",",
          "21660:         FT_NONE, BASE_NONE, NULL, 0,",
          "21661:         \"OMA_LPPe_PressureSensorAD\", HFILL }},",
          "",
          "---------------",
          "--- Hunk 102 ---",
          "[Context before]",
          "19635:       { \"secondarySupport\", \"lppe.secondarySupport_element\",",
          "19636:         FT_NONE, BASE_NONE, NULL, 0,",
          "19637:         NULL, HFILL }},",
          "19638:     { &hf_lppe_targetError,",
          "19639:       { \"targetError\", \"lppe.targetError_element\",",
          "19640:         FT_NONE, BASE_NONE, NULL, 0,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21698:     { &hf_lppe_barometricPressureSupport,",
          "21699:       { \"barometricPressureSupport\", \"lppe.barometricPressureSupport_element\",",
          "21700:         FT_NONE, BASE_NONE, NULL, 0,",
          "21701:         NULL, HFILL }},",
          "",
          "---------------",
          "--- Hunk 103 ---",
          "[Context before]",
          "19743:       { \"identification\", \"lppe.identification_element\",",
          "19744:         FT_NONE, BASE_NONE, NULL, 0,",
          "19745:         NULL, HFILL }},",
          "19750:     { &hf_lppe_antennaPatternID,",
          "19751:       { \"antennaPatternID\", \"lppe.antennaPatternID\",",
          "19752:         FT_UINT32, BASE_DEC, NULL, 0,",
          "",
          "[Removed Lines]",
          "19746:     { &hf_lppe_vendorOrOperator,",
          "19747:       { \"vendorOrOperator\", \"lppe.vendorOrOperator\",",
          "19748:         FT_UINT32, BASE_DEC, VALS(lppe_OMA_LPPe_VendorOrOperatorID_vals), 0,",
          "19749:         \"OMA_LPPe_VendorOrOperatorID\", HFILL }},",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 104 ---",
          "[Context before]",
          "20078:     { &hf_lppe_remainingPart,",
          "20079:       { \"remainingPart\", \"lppe.remainingPart\",",
          "20080:         FT_BYTES, BASE_NONE, NULL, 0,",
          "20082:     { &hf_lppe_resolutionIdentifier,",
          "20083:       { \"resolutionIdentifier\", \"lppe.resolutionIdentifier\",",
          "20084:         FT_BYTES, BASE_NONE, NULL, 0,",
          "",
          "[Removed Lines]",
          "20081:         \"OCTET_STRING_SIZE_1_1\", HFILL }},",
          "",
          "[Added Lines]",
          "22141:         \"OCTET_STRING_SIZE_1_16\", HFILL }},",
          "",
          "---------------",
          "--- Hunk 105 ---",
          "[Context before]",
          "20155:       { \"ieee802-11n\", \"lppe.ieee802-11n\",",
          "20156:         FT_BOOLEAN, 8, NULL, 0x10,",
          "20157:         NULL, HFILL }},",
          "20158:     { &hf_lppe_T_iP_Address_support_iPv4,",
          "20159:       { \"iPv4\", \"lppe.iPv4\",",
          "20160:         FT_BOOLEAN, 8, NULL, 0x80,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22218:     { &hf_lppe_OMA_LPPe_WLAN_AP_Type_List_ieee802_11ac,",
          "22219:       { \"ieee802-11ac\", \"lppe.ieee802-11ac\",",
          "22220:         FT_BOOLEAN, 8, NULL, 0x08,",
          "22221:         NULL, HFILL }},",
          "22222:     { &hf_lppe_OMA_LPPe_WLAN_AP_Type_List_ieee802_11ad,",
          "22223:       { \"ieee802-11ad\", \"lppe.ieee802-11ad\",",
          "22224:         FT_BOOLEAN, 8, NULL, 0x04,",
          "22225:         NULL, HFILL }},",
          "",
          "---------------",
          "--- Hunk 106 ---",
          "[Context before]",
          "20187:       { \"otherProviders\", \"lppe.otherProviders\",",
          "20188:         FT_BOOLEAN, 8, NULL, 0x20,",
          "20189:         NULL, HFILL }},",
          "20190:     { &hf_lppe_T_ionoreq_klobucharModel,",
          "20191:       { \"klobucharModel\", \"lppe.klobucharModel\",",
          "20192:         FT_BOOLEAN, 8, NULL, 0x80,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22258:     { &hf_lppe_T_localCellInformation_Support_gnssTiming,",
          "22259:       { \"gnssTiming\", \"lppe.gnssTiming\",",
          "22260:         FT_BOOLEAN, 8, NULL, 0x80,",
          "22261:         NULL, HFILL }},",
          "22262:     { &hf_lppe_T_localCellInformation_Support_networkTiming,",
          "22263:       { \"networkTiming\", \"lppe.networkTiming\",",
          "22264:         FT_BOOLEAN, 8, NULL, 0x40,",
          "22265:         NULL, HFILL }},",
          "22266:     { &hf_lppe_T_localCellInformation_Support_coverage,",
          "22267:       { \"coverage\", \"lppe.coverage\",",
          "22268:         FT_BOOLEAN, 8, NULL, 0x20,",
          "22269:         NULL, HFILL }},",
          "22270:     { &hf_lppe_T_localCellInformation_Support_coordinates,",
          "22271:       { \"coordinates\", \"lppe.coordinates\",",
          "22272:         FT_BOOLEAN, 8, NULL, 0x10,",
          "22273:         NULL, HFILL }},",
          "22274:     { &hf_lppe_T_localCellInformation_Support_frequencyAccuracy,",
          "22275:       { \"frequencyAccuracy\", \"lppe.frequencyAccuracy\",",
          "22276:         FT_BOOLEAN, 8, NULL, 0x08,",
          "22277:         NULL, HFILL }},",
          "22278:     { &hf_lppe_T_modelsReq_altitude,",
          "22279:       { \"altitude\", \"lppe.altitude\",",
          "22280:         FT_BOOLEAN, 8, NULL, 0x80,",
          "22281:         NULL, HFILL }},",
          "22282:     { &hf_lppe_T_modelsReq_buildings,",
          "22283:       { \"buildings\", \"lppe.buildings\",",
          "22284:         FT_BOOLEAN, 8, NULL, 0x40,",
          "22285:         NULL, HFILL }},",
          "22286:     { &hf_lppe_T_localCellInformationReq_gnssTiming,",
          "22287:       { \"gnssTiming\", \"lppe.gnssTiming\",",
          "22288:         FT_BOOLEAN, 8, NULL, 0x80,",
          "22289:         NULL, HFILL }},",
          "22290:     { &hf_lppe_T_localCellInformationReq_networkTiming,",
          "22291:       { \"networkTiming\", \"lppe.networkTiming\",",
          "22292:         FT_BOOLEAN, 8, NULL, 0x40,",
          "22293:         NULL, HFILL }},",
          "22294:     { &hf_lppe_T_localCellInformationReq_coverage,",
          "22295:       { \"coverage\", \"lppe.coverage\",",
          "22296:         FT_BOOLEAN, 8, NULL, 0x20,",
          "22297:         NULL, HFILL }},",
          "22298:     { &hf_lppe_T_localCellInformationReq_coordinates,",
          "22299:       { \"coordinates\", \"lppe.coordinates\",",
          "22300:         FT_BOOLEAN, 8, NULL, 0x10,",
          "22301:         NULL, HFILL }},",
          "22302:     { &hf_lppe_T_localCellInformationReq_frequencyAccuracy,",
          "22303:       { \"frequencyAccuracy\", \"lppe.frequencyAccuracy\",",
          "22304:         FT_BOOLEAN, 8, NULL, 0x08,",
          "22305:         NULL, HFILL }},",
          "",
          "---------------",
          "--- Hunk 107 ---",
          "[Context before]",
          "20843:       { \"historic\", \"lppe.historic\",",
          "20844:         FT_BOOLEAN, 8, NULL, 0x10,",
          "20845:         NULL, HFILL }},",
          "20846:     { &hf_lppe_T_wlan_ecid_MeasSupported_apSSID,",
          "20847:       { \"apSSID\", \"lppe.apSSID\",",
          "20848:         FT_BOOLEAN, 8, NULL, 0x80,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22962:     { &hf_lppe_T_requestedMeasurements_03_apTP,",
          "22963:       { \"apTP\", \"lppe.apTP\",",
          "22964:         FT_BOOLEAN, 8, NULL, 0x08,",
          "22965:         NULL, HFILL }},",
          "22966:     { &hf_lppe_T_requestedMeasurements_03_apAG,",
          "22967:       { \"apAG\", \"lppe.apAG\",",
          "22968:         FT_BOOLEAN, 8, NULL, 0x04,",
          "22969:         NULL, HFILL }},",
          "22970:     { &hf_lppe_T_requestedMeasurements_03_ueSN,",
          "22971:       { \"ueSN\", \"lppe.ueSN\",",
          "22972:         FT_BOOLEAN, 8, NULL, 0x02,",
          "22973:         NULL, HFILL }},",
          "22974:     { &hf_lppe_T_requestedMeasurements_03_ueRSSI,",
          "22975:       { \"ueRSSI\", \"lppe.ueRSSI\",",
          "22976:         FT_BOOLEAN, 8, NULL, 0x01,",
          "22977:         NULL, HFILL }},",
          "22978:     { &hf_lppe_T_additionalRequestedMeasurements_oc,",
          "22979:       { \"oc\", \"lppe.oc\",",
          "22980:         FT_BOOLEAN, 8, NULL, 0x80,",
          "22981:         NULL, HFILL }},",
          "",
          "---------------",
          "--- Hunk 108 ---",
          "[Context before]",
          "20891:       { \"historic\", \"lppe.historic\",",
          "20892:         FT_BOOLEAN, 8, NULL, 0x10,",
          "20893:         NULL, HFILL }},",
          "20894:     { &hf_lppe_T_wlan_ap_ADSupported_aplist,",
          "20895:       { \"aplist\", \"lppe.aplist\",",
          "20896:         FT_BOOLEAN, 8, NULL, 0x80,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23030:     { &hf_lppe_T_wlan_ecid_MeasSupported_apTP,",
          "23031:       { \"apTP\", \"lppe.apTP\",",
          "23032:         FT_BOOLEAN, 8, NULL, 0x08,",
          "23033:         NULL, HFILL }},",
          "23034:     { &hf_lppe_T_wlan_ecid_MeasSupported_apAG,",
          "23035:       { \"apAG\", \"lppe.apAG\",",
          "23036:         FT_BOOLEAN, 8, NULL, 0x04,",
          "23037:         NULL, HFILL }},",
          "23038:     { &hf_lppe_T_wlan_ecid_MeasSupported_ueSN,",
          "23039:       { \"ueSN\", \"lppe.ueSN\",",
          "23040:         FT_BOOLEAN, 8, NULL, 0x02,",
          "23041:         NULL, HFILL }},",
          "23042:     { &hf_lppe_T_wlan_ecid_MeasSupported_ueRSSI,",
          "23043:       { \"ueRSSI\", \"lppe.ueRSSI\",",
          "23044:         FT_BOOLEAN, 8, NULL, 0x01,",
          "23045:         NULL, HFILL }},",
          "",
          "---------------",
          "--- Hunk 109 ---",
          "[Context before]",
          "20919:       { \"non-serving\", \"lppe.non-serving\",",
          "20920:         FT_BOOLEAN, 8, NULL, 0x02,",
          "20921:         NULL, HFILL }},",
          "20922:     { &hf_lppe_T_requestedMeasurements_04_rTD,",
          "20923:       { \"rTD\", \"lppe.rTD\",",
          "20924:         FT_BOOLEAN, 8, NULL, 0x80,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23074:     { &hf_lppe_T_additional_wlan_ecid_MeasSupported_oc,",
          "23075:       { \"oc\", \"lppe.oc\",",
          "23076:         FT_BOOLEAN, 8, NULL, 0x80,",
          "23077:         NULL, HFILL }},",
          "",
          "---------------",
          "--- Hunk 110 ---",
          "[Context before]",
          "21114:     &ett_lppe_OMA_LPPe_CivicAddressElement,",
          "21115:     &ett_lppe_OMA_LPPe_Duration,",
          "21116:     &ett_lppe_OMA_LPPe_FixedAccessTypes,",
          "21117:     &ett_lppe_OMA_LPPe_HighAccuracy3Dposition,",
          "21118:     &ett_lppe_OMA_LPPe_HighAccuracy3Dvelocity,",
          "21119:     &ett_lppe_OMA_LPPe_LocationInformationContainerID,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23273:     &ett_lppe_OMA_LPPe_ver1_1_GroundMorphologyModel,",
          "23274:     &ett_lppe_OMA_LPPe_ver1_1_AltitudeModel,",
          "23275:     &ett_lppe_SEQUENCE_SIZE_1_10000_OF_DeltaAltitudes,",
          "23276:     &ett_lppe_OMA_LPPe_ver1_1_BuildingsHeightModel,",
          "23277:     &ett_lppe_SEQUENCE_SIZE_1_10000_OF_DeltaHeight,",
          "23278:     &ett_lppe_DeltaAltitudes,",
          "23279:     &ett_lppe_DeltaHeight,",
          "23280:     &ett_lppe_OMA_LPPe_ver1_1_CellGlobalID,",
          "",
          "---------------",
          "--- Hunk 111 ---",
          "[Context before]",
          "21146:     &ett_lppe_OMA_LPPe_CivicRelativeAltitude,",
          "21147:     &ett_lppe_OMA_LPPe_CivicUncertaintyAndConfidence,",
          "21148:     &ett_lppe_OMA_LPPe_Session_ID,",
          "21149:     &ett_lppe_OMA_LPPe_ValidityArea,",
          "21150:     &ett_lppe_OMA_LPPe_RleList,",
          "21151:     &ett_lppe_OMA_LPPe_ValidityPeriod,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23313:     &ett_lppe_OMA_LPPe_ver1_1_BroadcastSystemID,",
          "23314:     &ett_lppe_T_proprietarySystemID,",
          "23315:     &ett_lppe_OMA_LPPe_ver1_1_BroadcastADTypes,",
          "23316:     &ett_lppe_SEQUENCE_SIZE_1_maxLPPLabelSets_OF_OMA_LPPe_ver1_1_LabelSet,",
          "23317:     &ett_lppe_SEQUENCE_SIZE_1_maxLPPeLabelSets_OF_OMA_LPPe_ver1_1_LabelSet,",
          "23318:     &ett_lppe_OMA_LPPe_ver1_1_LabelSet,",
          "23319:     &ett_lppe_T_level1_element,",
          "23320:     &ett_lppe_T_level2_element,",
          "23321:     &ett_lppe_T_level3_element,",
          "23322:     &ett_lppe_OMA_LPPe_ver1_1_AccessNetworkID,",
          "23323:     &ett_lppe_OMA_LPPe_ver1_1_MCC_MNC,",
          "23324:     &ett_lppe_T_mcc,",
          "23325:     &ett_lppe_T_mnc,",
          "23326:     &ett_lppe_OMA_LPPe_ver1_1_BSID,",
          "23327:     &ett_lppe_OMA_LPPe_ver1_1_AuthenticationSet,",
          "23328:     &ett_lppe_T_rsaPublicKey,",
          "23329:     &ett_lppe_OMA_LPPe_ver1_1_CipherSet,",
          "23330:     &ett_lppe_OMA_LPPe_ver1_1_ServerID,",
          "",
          "---------------",
          "--- Hunk 112 ---",
          "[Context before]",
          "21172:     &ett_lppe_OMA_LPPe_ScheduledLocation_RequestCapabilities,",
          "21173:     &ett_lppe_OMA_LPPe_AccessCapabilitiesReq,",
          "21174:     &ett_lppe_OMA_LPPe_SegmentedLocationInformation_ReqCapabilities,",
          "21175:     &ett_lppe_OMA_LPPe_CommonIEsProvideCapabilities,",
          "21176:     &ett_lppe_OMA_LPPe_IP_Address_Capabilities,",
          "21177:     &ett_lppe_T_iP_Address_support,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23357:     &ett_lppe_OMA_LPPe_ver1_1_localCellInformation_ReqCapabilities,",
          "23358:     &ett_lppe_OMA_LPPe_ver1_1_broadcast_ReqCapabilities,",
          "23359:     &ett_lppe_SEQUENCE_SIZE_1_16_OF_OMA_LPPe_ver1_1_BroadcastSystemID,",
          "",
          "---------------",
          "--- Hunk 113 ---",
          "[Context before]",
          "21192:     &ett_lppe_OMA_LPPe_ScheduledLocation_Capabilities,",
          "21193:     &ett_lppe_OMA_LPPe_AccessCapabilities,",
          "21194:     &ett_lppe_OMA_LPPe_SegmentedLocationInformation_ProvideCapabs,",
          "21195:     &ett_lppe_OMA_LPPe_CommonIEsRequestAssistanceData,",
          "21196:     &ett_lppe_OMA_LPPe_RequestPeriodicADwithUpdate,",
          "21197:     &ett_lppe_OMA_LPPe_SegmentedADResume,",
          "21198:     &ett_lppe_OMA_LPPe_ReferencePointAssistanceReq,",
          "21199:     &ett_lppe_SEQUENCE_SIZE_1_16_OF_OMA_LPPe_ReferencePointAssistanceReqElement,",
          "21200:     &ett_lppe_OMA_LPPe_ReferencePointAssistanceReqElement,",
          "21201:     &ett_lppe_OMA_LPPe_CommonIEsProvideAssistanceData,",
          "21202:     &ett_lppe_OMA_LPPe_ProvidePeriodicADwithUpdate,",
          "21203:     &ett_lppe_OMA_LPPe_SegmentedADTransfer,",
          "21204:     &ett_lppe_OMA_LPPe_CommonIEsRequestLocationInformation,",
          "21205:     &ett_lppe_OMA_LPPe_IP_Address_Request,",
          "21206:     &ett_lppe_OMA_LPPe_RequestPeriodicLocInfoWithUpdate,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23380:     &ett_lppe_OMA_LPPe_ver1_1_localCellInformation_ProvideCapabilities,",
          "23381:     &ett_lppe_T_localCellInformation_Support,",
          "23382:     &ett_lppe_OMA_LPPe_ver1_1_broadcast_ProvideCapabilities,",
          "23383:     &ett_lppe_OMA_LPPe_ver1_1_BroadcastSystem_Capabs,",
          "23384:     &ett_lppe_OMA_LPPe_ver1_1_point2pointAD,",
          "23385:     &ett_lppe_OMA_LPPe_ver1_1_Ciphering,",
          "23386:     &ett_lppe_OMA_LPPe_ver1_1_Authentication,",
          "23393:     &ett_lppe_OMA_LPPe_ver1_1_GroundMorphologyModelReq,",
          "23394:     &ett_lppe_T_modelsReq,",
          "23395:     &ett_lppe_T_refAreaParam,",
          "23396:     &ett_lppe_OMA_LPPe_ver1_1_LocalCellInformationReq,",
          "23397:     &ett_lppe_T_localCellInformationReq,",
          "23398:     &ett_lppe_OMA_LPPe_ver1_1_BroadcastAssistanceDataReq,",
          "23399:     &ett_lppe_OMA_LPPe_ver1_1_BroadcastSystem,",
          "23400:     &ett_lppe_SEQUENCE_SIZE_1_16_OF_OMA_LPPe_ver1_1_CipherSetID,",
          "23401:     &ett_lppe_SEQUENCE_SIZE_1_4_OF_OMA_LPPe_ver1_1_AuthenticationSetID,",
          "23405:     &ett_lppe_OMA_LPPe_ver1_1_LocalCellInformation,",
          "23406:     &ett_lppe_SEQUENCE_SIZE_1_maxCellSets_OF_GNSS_ReferenceTime,",
          "23407:     &ett_lppe_SEQUENCE_SIZE_1_maxCells_OF_OMA_LPPe_ver1_1_CellInformation,",
          "23408:     &ett_lppe_OMA_LPPe_ver1_1_CellInformation,",
          "23409:     &ett_lppe_T_coverage,",
          "23410:     &ett_lppe_OMA_LPPe_ver1_1_BroadcastAssistanceData,",
          "23411:     &ett_lppe_SEQUENCE_SIZE_1_16_OF_OMA_LPPe_ver1_1_AccessNetworkID,",
          "23412:     &ett_lppe_T_coverageArea,",
          "23413:     &ett_lppe_T_broadcastMode,",
          "23414:     &ett_lppe_OMA_LPPe_ver1_1_EncapsulatedMode,",
          "23415:     &ett_lppe_SEQUENCE_SIZE_1_16_OF_OMA_LPPe_ver1_1_CipherSet,",
          "23416:     &ett_lppe_SEQUENCE_SIZE_1_4_OF_OMA_LPPe_ver1_1_AuthenticationSet,",
          "",
          "---------------",
          "--- Hunk 114 ---",
          "[Context before]",
          "21223:     &ett_lppe_OMA_LPPe_AccessTypes,",
          "21224:     &ett_lppe_OMA_LPPe_SegmentedLITransfer,",
          "21225:     &ett_lppe_OMA_LPPe_TimeStamp,",
          "21226:     &ett_lppe_OMA_LPPe_CommonIEsAbort,",
          "21227:     &ett_lppe_OMA_LPPe_CommonIEsError,",
          "21228:     &ett_lppe_OMA_LPPe_AGNSS_ProvideAssistanceData,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23439:     &ett_lppe_OMA_LPPe_LocationSource,",
          "",
          "---------------",
          "--- Hunk 115 ---",
          "[Context before]",
          "21487:     &ett_lppe_SEQUENCE_SIZE_1_maxLTENetworks_OF_OMA_LPPe_ECID_LTE_NetworkData,",
          "21488:     &ett_lppe_OMA_LPPe_ECID_LTE_NetworkData,",
          "21489:     &ett_lppe_T_plmn_Identity,",
          "21492:     &ett_lppe_SEQUENCE_SIZE_1_maxLTEeNBs_OF_OMA_LPPe_ECID_LTE_eNodeBData,",
          "21493:     &ett_lppe_SEQUENCE_SIZE_1_maxLTEHeNBs_OF_OMA_LPPe_ECID_LTE_HeNBData,",
          "21494:     &ett_lppe_OMA_LPPe_ECID_LTE_eNodeBData,",
          "",
          "[Removed Lines]",
          "21490:     &ett_lppe_T_mcc,",
          "21491:     &ett_lppe_T_mnc,",
          "",
          "[Added Lines]",
          "23704:     &ett_lppe_T_mcc_01,",
          "23705:     &ett_lppe_T_mnc_01,",
          "",
          "---------------",
          "--- Hunk 116 ---",
          "[Context before]",
          "21516:     &ett_lppe_SEQUENCE_SIZE_1_maxGSMNetworks_OF_OMA_LPPe_ECID_GSM_NetworkData,",
          "21517:     &ett_lppe_OMA_LPPe_ECID_GSM_NetworkData,",
          "21518:     &ett_lppe_T_plmn_Identity_01,",
          "21521:     &ett_lppe_SEQUENCE_SIZE_1_maxGSMBaseStations_OF_OMA_LPPe_ECID_GSM_BaseStationData,",
          "21522:     &ett_lppe_OMA_LPPe_ECID_GSM_BaseStationData,",
          "21523:     &ett_lppe_SEQUENCE_SIZE_1_maxGSMCells_OF_OMA_LPPe_ECID_GSM_CellData,",
          "",
          "[Removed Lines]",
          "21519:     &ett_lppe_T_mcc_01,",
          "21520:     &ett_lppe_T_mnc_01,",
          "",
          "[Added Lines]",
          "23733:     &ett_lppe_T_mcc_02,",
          "23734:     &ett_lppe_T_mnc_02,",
          "",
          "---------------",
          "--- Hunk 117 ---",
          "[Context before]",
          "21543:     &ett_lppe_SEQUENCE_SIZE_1_maxUTRANetworks_OF_OMA_LPPe_ECID_UTRA_NetworkData,",
          "21544:     &ett_lppe_OMA_LPPe_ECID_UTRA_NetworkData,",
          "21545:     &ett_lppe_T_plmn_Identity_02,",
          "21548:     &ett_lppe_SEQUENCE_SIZE_1_maxUTRAnodeBs_OF_OMA_LPPe_ECID_UTRA_NodeBData,",
          "21549:     &ett_lppe_SEQUENCE_SIZE_1_maxUTRAHNBs_OF_OMA_LPPe_ECID_UTRA_HNBData,",
          "21550:     &ett_lppe_OMA_LPPe_ECID_UTRA_NodeBData,",
          "",
          "[Removed Lines]",
          "21546:     &ett_lppe_T_mcc_02,",
          "21547:     &ett_lppe_T_mnc_02,",
          "",
          "[Added Lines]",
          "23760:     &ett_lppe_T_mcc_03,",
          "23761:     &ett_lppe_T_mnc_03,",
          "",
          "---------------",
          "--- Hunk 118 ---",
          "[Context before]",
          "21587:     &ett_lppe_SEQUENCE_SIZE_1_maxWLANDataSets_OF_OMA_LPPe_WLAN_DataSet,",
          "21588:     &ett_lppe_OMA_LPPe_WLAN_DataSet,",
          "21589:     &ett_lppe_T_plmn_Identity_03,",
          "21592:     &ett_lppe_SEQUENCE_SIZE_1_maxWLANAPs_OF_OMA_LPPe_WLAN_AP_Data,",
          "21593:     &ett_lppe_Supported_Channels_11a,",
          "21594:     &ett_lppe_Supported_Channels_11bg,",
          "",
          "[Removed Lines]",
          "21590:     &ett_lppe_T_mcc_03,",
          "21591:     &ett_lppe_T_mnc_03,",
          "",
          "[Added Lines]",
          "23804:     &ett_lppe_T_mcc_04,",
          "23805:     &ett_lppe_T_mnc_04,",
          "",
          "---------------",
          "--- Hunk 119 ---",
          "[Context before]",
          "21606:     &ett_lppe_OMA_LPPe_WLAN_LocationDataLCI,",
          "21607:     &ett_lppe_OMA_LPPe_WLAN_AP_RequestLocationInformation,",
          "21608:     &ett_lppe_T_requestedMeasurements_03,",
          "21609:     &ett_lppe_OMA_LPPe_WLAN_AP_ProvideCapabilities,",
          "21610:     &ett_lppe_T_wlan_ecid_MeasSupported,",
          "21611:     &ett_lppe_T_wlan_ap_ADSupported,",
          "21612:     &ett_lppe_OMA_LPPe_WLAN_AP_Capability,",
          "21613:     &ett_lppe_OMA_LPPe_WLAN_AP_RequestCapabilities,",
          "21614:     &ett_lppe_OMA_LPPe_WLAN_AP_Error,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23823:     &ett_lppe_T_additionalRequestedMeasurements,",
          "23827:     &ett_lppe_T_additional_wlan_ecid_MeasSupported,",
          "",
          "---------------",
          "--- Hunk 120 ---",
          "[Context before]",
          "21631:     &ett_lppe_OMA_LPPe_ECID_WiMax_LocationServerErrorCauses,",
          "21632:     &ett_lppe_OMA_LPPe_ECID_WiMax_TargetDeviceErrorCauses,",
          "21633:     &ett_lppe_OMA_LPPe_Sensor_ProvideAssistanceData,",
          "21634:     &ett_lppe_OMA_LPPe_Sensor_RequestAssistanceData,",
          "21635:     &ett_lppe_OMA_LPPe_Sensor_ProvideLocationInformation,",
          "21636:     &ett_lppe_OMA_LPPe_Sensor_MotionStateList,",
          "21637:     &ett_lppe_OMA_LPPe_Sensor_MotionStateElement,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23850:     &ett_lppe_OMA_LPPe_AtmosphericPressureAD,",
          "23851:     &ett_lppe_T_period,",
          "23852:     &ett_lppe_T_area,",
          "23853:     &ett_lppe_OMA_LPPe_PressureValidityArea,",
          "23855:     &ett_lppe_OMA_LPPe_PressureSensorAD,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "86d24b0486014136137c98e2bb9d1651d01c8606",
      "candidate_info": {
        "commit_hash": "86d24b0486014136137c98e2bb9d1651d01c8606",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/86d24b0486014136137c98e2bb9d1651d01c8606",
        "files": [
          "asn1/lpp/LPP.asn",
          "asn1/lpp/lpp.cnf",
          "asn1/lpp/packet-lpp-template.c",
          "asn1/lpp/packet-lpp-template.h",
          "epan/dissectors/packet-lpp.c",
          "epan/dissectors/packet-lpp.h"
        ],
        "message": "LPP: upgrade dissector to v12.3.0\n\nChange-Id: Ibc2aa3127efcfbae33e6f3729d0e1e427db1c0fe\nReviewed-on: https://code.wireshark.org/review/6959\nReviewed-by: Pascal Quantin <pascal.quantin@gmail.com>",
        "before_after_code_files": [
          "asn1/lpp/LPP.asn||asn1/lpp/LPP.asn",
          "asn1/lpp/lpp.cnf||asn1/lpp/lpp.cnf",
          "asn1/lpp/packet-lpp-template.c||asn1/lpp/packet-lpp-template.c",
          "asn1/lpp/packet-lpp-template.h||asn1/lpp/packet-lpp-template.h",
          "epan/dissectors/packet-lpp.c||epan/dissectors/packet-lpp.c",
          "epan/dissectors/packet-lpp.h||epan/dissectors/packet-lpp.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "asn1/lpp/lpp.cnf||asn1/lpp/lpp.cnf",
            "epan/dissectors/packet-lpp.c||epan/dissectors/packet-lpp.c"
          ],
          "candidate": [
            "asn1/lpp/lpp.cnf||asn1/lpp/lpp.cnf",
            "epan/dissectors/packet-lpp.c||epan/dissectors/packet-lpp.c"
          ]
        }
      },
      "candidate_diff": {
        "asn1/lpp/LPP.asn||asn1/lpp/LPP.asn": [
          "File: asn1/lpp/LPP.asn -> asn1/lpp/LPP.asn",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: --",
          "4: LPP-PDU-Definitions {",
          "6: eps-Access (21) modules (3) lpp (7) version1 (1) lpp-PDU-Definitions (1) }",
          "8: DEFINITIONS AUTOMATIC TAGS ::=",
          "",
          "[Removed Lines]",
          "1: -- 3GPP TS 36.355 V11.6.0 (2014-06)",
          "5: itu-t (0) identified-organization (4) etsi (0) mobileDomain (0)",
          "",
          "[Added Lines]",
          "1: -- 3GPP TS 36.355 V12.3.0 (2014-12)",
          "5: itu-t (0) identified-organization (4) etsi (0) mobileDomain (0)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "215: }",
          "220: ARFCN-ValueEUTRA-v9a0 ::= INTEGER (maxEARFCN-Plus1..maxEARFCN2)",
          "224: maxEARFCN-Plus1    INTEGER ::= 65536 -- Lowest value extended EARFCN range",
          "",
          "[Removed Lines]",
          "218: ARFCN-ValueEUTRA ::= INTEGER (0..maxEARFCN)",
          "222: maxEARFCN     INTEGER ::= 65535 -- Maximum value of EUTRA carrier frequency",
          "",
          "[Added Lines]",
          "218: ARFCN-ValueEUTRA ::= INTEGER (0..maxEARFCN)",
          "222: maxEARFCN     INTEGER ::= 65535 -- Maximum value of EUTRA carrier frequency",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "341: EPDU-Name ::= VisibleString (SIZE (1..32))",
          "346: HorizontalVelocity ::= SEQUENCE {",
          "",
          "[Removed Lines]",
          "343: EPDU-Body ::= OCTET STRING",
          "",
          "[Added Lines]",
          "343: EPDU-Body ::= OCTET STRING",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "448: LocationInformationType ::= ENUMERATED {",
          "449:  locationEstimateRequired,",
          "450:  locationMeasurementsRequired,",
          "452:  locationMeasurementsPreferred,",
          "453:  ...",
          "454: }",
          "",
          "[Removed Lines]",
          "451:  locationEstimatePreferred,",
          "",
          "[Added Lines]",
          "451:  locationEstimatePreferred,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "483:  verticalCoordinateRequest BOOLEAN,",
          "484:  verticalAccuracy   VerticalAccuracy  OPTIONAL, -- Need ON",
          "485:  responseTime    ResponseTime   OPTIONAL, -- Need ON",
          "487:  ...",
          "490: HorizontalAccuracy ::= SEQUENCE {",
          "491:  accuracy  INTEGER(0..127),",
          "",
          "[Removed Lines]",
          "486:  velocityRequest    BOOLEAN,",
          "488: }",
          "",
          "[Added Lines]",
          "486:  velocityRequest    BOOLEAN,",
          "488: }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "494: }",
          "496: VerticalAccuracy ::= SEQUENCE {",
          "498:  confidence  INTEGER(0..100),",
          "499:  ...",
          "500: }",
          "502: ResponseTime ::= SEQUENCE {",
          "505: }",
          "507: Environment ::= ENUMERATED {",
          "",
          "[Removed Lines]",
          "497:  accuracy  INTEGER(0..127),",
          "503:  time   INTEGER (1..128),",
          "504:  ...",
          "",
          "[Added Lines]",
          "497:  accuracy  INTEGER(0..127),",
          "503:  time        INTEGER (1..128),",
          "504:  ...,",
          "505:  [[ responseTimeEarlyFix-r12  INTEGER (1..128)  OPTIONAL  -- Need ON",
          "506:  ]]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "516:  locationEstimate   LocationCoordinates  OPTIONAL,",
          "517:  velocityEstimate   Velocity    OPTIONAL,",
          "518:  locationError    LocationError   OPTIONAL,",
          "520: }",
          "522: LocationCoordinates ::= CHOICE {",
          "",
          "[Removed Lines]",
          "519:  ...",
          "",
          "[Added Lines]",
          "521:  ...,",
          "522:  [[ earlyFixReport-r12  EarlyFixReport-r12  OPTIONAL",
          "523:  ]]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "548: LocationFailureCause ::= ENUMERATED {",
          "549:  undefined,",
          "550:  requestedMethodNotSupported,",
          "552:  periodicLocationMeasurementsNotAvailable,",
          "553:  ...",
          "554: }",
          "557: CommonIEsAbort ::= SEQUENCE {",
          "558:  abortCause   ENUMERATED {",
          "",
          "[Removed Lines]",
          "551:  positionMethodFailure,",
          "",
          "[Added Lines]",
          "555:  positionMethodFailure,",
          "560: EarlyFixReport-r12 ::= ENUMERATED {",
          "561:  noMoreMessages,",
          "562:  moreMessagesOnTheWay",
          "563: }",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "568: CommonIEsError ::= SEQUENCE {",
          "569:  errorCause  ENUMERATED {",
          "570:   undefined,",
          "572:   lppMessageBodyError,",
          "573:   epduError,",
          "574:   incorrectDataValue,",
          "",
          "[Removed Lines]",
          "571:   lppMessageHeaderError,",
          "",
          "[Added Lines]",
          "580:   lppMessageHeaderError,",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "621:  physCellId       INTEGER (0..503),",
          "622:  cellGlobalId      ECGI    OPTIONAL,  -- Need ON",
          "623:  earfcn        ARFCN-ValueEUTRA OPTIONAL,  -- Cond NotSameAsRef0",
          "625:                OPTIONAL,  -- Cond NotSameAsRef1",
          "626:  prsInfo        PRS-Info   OPTIONAL,  -- Cond NotSameAsRef2",
          "627:  antennaPortConfig     ENUMERATED {ports-1-or-2, ports-4, ...}",
          "",
          "[Removed Lines]",
          "624:  cpLength       ENUMERATED {normal, extended, ...}",
          "",
          "[Added Lines]",
          "633:  cpLength       ENUMERATED {normal, extended, ...}",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "781:  gnss-Almanac     GNSS-Almanac     OPTIONAL, -- Need ON",
          "782:  gnss-UTC-Model     GNSS-UTC-Model     OPTIONAL, -- Need ON",
          "783:  gnss-AuxiliaryInformation  GNSS-AuxiliaryInformation  OPTIONAL, -- Need ON",
          "785: }",
          "788: GNSS-ReferenceTime ::= SEQUENCE  {",
          "789:  gnss-SystemTime    GNSS-SystemTime,",
          "790:  referenceTimeUnc   INTEGER (0..127)     OPTIONAL, -- Cond noFTA",
          "792:          GNSS-ReferenceTimeForOneCell OPTIONAL, -- Need ON",
          "793:  ...",
          "794: }",
          "797:  networkTime     NetworkTime,",
          "798:  referenceTimeUnc   INTEGER (0..127),",
          "799:  bsAlign      ENUMERATED {true} OPTIONAL,",
          "",
          "[Removed Lines]",
          "784:  ...",
          "791:  gnss-ReferenceTimeForCells  SEQUENCE (SIZE (1..16)) OF",
          "796: GNSS-ReferenceTimeForOneCell  ::= SEQUENCE {",
          "",
          "[Added Lines]",
          "793:  ...,",
          "794:  [[",
          "795:   bds-DifferentialCorrections-r12",
          "796:          BDS-DifferentialCorrections-r12 OPTIONAL, -- Cond GNSS-ID-BDS",
          "797:   bds-GridModel-r12   BDS-GridModelParameter-r12  OPTIONAL -- Cond GNSS-ID-BDS",
          "798:  ]]",
          "805:  gnss-ReferenceTimeForCells  SEQUENCE (SIZE (1..16)) OF",
          "810: GNSS-ReferenceTimeForOneCell  ::= SEQUENCE {",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "828:  secondsFromFrameStructureStart     INTEGER(0..12533),",
          "829:  fractionalSecondsFromFrameStructureStart  INTEGER(0..3999999),",
          "830:  frameDrift         INTEGER (-64..63)  OPTIONAL, -- Cond GNSSsynch",
          "832:     eUTRA  SEQUENCE {",
          "833:        physCellId   INTEGER (0..503),",
          "834:        cellGlobalIdEUTRA CellGlobalIdEUTRA-AndUTRA OPTIONAL, -- Need ON",
          "835:        earfcn    ARFCN-ValueEUTRA,",
          "836:        ...,",
          "838:        ]]",
          "839:        },",
          "840:     uTRA  SEQUENCE {",
          "",
          "[Removed Lines]",
          "831:  cellID   CHOICE {",
          "837:        [[ earfcn-v9a0  ARFCN-ValueEUTRA-v9a0 OPTIONAL -- Cond EARFCN-max",
          "",
          "[Added Lines]",
          "845:  cellID   CHOICE {",
          "851:        [[ earfcn-v9a0  ARFCN-ValueEUTRA-v9a0 OPTIONAL -- Cond EARFCN-max",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "894: NeQuickModelParameter ::= SEQUENCE {",
          "898:  ionoStormFlag1 INTEGER (0..1)  OPTIONAL, -- Need OP",
          "899:  ionoStormFlag2 INTEGER (0..1)  OPTIONAL, -- Need OP",
          "900:  ionoStormFlag3 INTEGER (0..1)  OPTIONAL, -- Need OP",
          "",
          "[Removed Lines]",
          "895:  ai0    INTEGER (0..4095),",
          "896:   ai1    INTEGER (0..4095),",
          "897:   ai2    INTEGER (0..4095),",
          "",
          "[Added Lines]",
          "909:  ai0    INTEGER (0..2047),",
          "910:   ai1    INTEGER (-1024..1023),",
          "911:   ai2    INTEGER (-8192..8191),",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "939: DGNSS-SgnTypeList ::= SEQUENCE (SIZE (1..3)) OF DGNSS-SgnTypeElement",
          "941: DGNSS-SgnTypeElement ::= SEQUENCE {",
          "943:   gnss-StatusHealth  INTEGER (0..7),",
          "944:  dgnss-SatList   DGNSS-SatList,",
          "945:  ...",
          "",
          "[Removed Lines]",
          "942:  gnss-SignalID   GNSS-SignalID,",
          "",
          "[Added Lines]",
          "956:  gnss-SignalID   GNSS-SignalID,",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "950: DGNSS-CorrectionsElement ::= SEQUENCE {",
          "951:  svID     SV-ID,",
          "952:  iod     BIT STRING (SIZE(11)),",
          "954:  pseudoRangeCor  INTEGER (-2047..2047),",
          "955:  rangeRateCor  INTEGER (-127..127),",
          "956:  udreGrowthRate  INTEGER (0..7)   OPTIONAL, -- Need ON",
          "958:  ...",
          "959: }",
          "962: GNSS-NavigationModel ::= SEQUENCE {",
          "964:  gnss-SatelliteList   GNSS-NavModelSatelliteList,",
          "965:  ...",
          "966: }",
          "",
          "[Removed Lines]",
          "953:  udre    INTEGER (0..3),",
          "957:  udreValidityTime INTEGER (0..7)   OPTIONAL, -- Need ON",
          "963:  nonBroadcastIndFlag  INTEGER (0..1),",
          "",
          "[Added Lines]",
          "967:  udre    INTEGER (0..3),",
          "971:  udreValidityTime INTEGER (0..7)   OPTIONAL, -- Need ON",
          "977:  nonBroadcastIndFlag  INTEGER (0..1),",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "970: GNSS-NavModelSatelliteElement ::= SEQUENCE {",
          "971:  svID     SV-ID,",
          "974:  gnss-ClockModel  GNSS-ClockModel,",
          "975:  gnss-OrbitModel  GNSS-OrbitModel,",
          "977: }",
          "979: GNSS-ClockModel ::= CHOICE {",
          "",
          "[Removed Lines]",
          "972:  svHealth    BIT STRING (SIZE(8)),",
          "973:  iod     BIT STRING (SIZE(11)),",
          "976:  ...",
          "",
          "[Added Lines]",
          "986:  svHealth    BIT STRING (SIZE(8)),",
          "987:  iod     BIT STRING (SIZE(11)),",
          "990:  ...,",
          "991:  [[ svHealthExt-v12xy BIT STRING (SIZE(4))   OPTIONAL  -- Need ON",
          "992:  ]]",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "982:  cnav-ClockModel   CNAV-ClockModel,     -- Model-3",
          "983:  glonass-ClockModel  GLONASS-ClockModel,    -- Model-4",
          "984:  sbas-ClockModel   SBAS-ClockModel,    -- Model-5",
          "988: GNSS-OrbitModel ::= CHOICE {",
          "989:  keplerianSet    NavModelKeplerianSet,   -- Model-1",
          "",
          "[Removed Lines]",
          "985:  ...",
          "986: }",
          "",
          "[Added Lines]",
          "1001:  ...,",
          "1002:  bds-ClockModel-r12  BDS-ClockModel-r12    -- Model-6",
          "1003: }",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "991:  cnav-KeplerianSet  NavModelCNAV-KeplerianSet,  -- Model-3",
          "992:  glonass-ECEF   NavModel-GLONASS-ECEF,    -- Model-4",
          "993:  sbas-ECEF    NavModel-SBAS-ECEF,    -- Model-5",
          "995: }",
          "998: StandardClockModelList ::= SEQUENCE (SIZE(1..2)) OF StandardClockModelElement",
          "1000: StandardClockModelElement ::= SEQUENCE {",
          "1011: NAV-ClockModel ::= SEQUENCE {",
          "",
          "[Removed Lines]",
          "994:  ...",
          "1001:   stanClockToc  INTEGER (0..16383),",
          "1002:   stanClockAF2  INTEGER (-2048..2047),",
          "1003:   stanClockAF1  INTEGER (-131072..131071),",
          "1004:   stanClockAF0  INTEGER (-134217728..134217727),",
          "1005:   stanClockTgd  INTEGER (-512..511)     OPTIONAL, -- Need ON",
          "1006:   stanModelID  INTEGER (0..1)       OPTIONAL, -- Need ON",
          "1007:   ...",
          "1008: }",
          "",
          "[Added Lines]",
          "1011:  ...,",
          "1012:  bds-KeplerianSet-r12 NavModel-BDS-KeplerianSet-r12 -- Model-6",
          "1019:  stanClockToc   INTEGER (0..16383),",
          "1020:  stanClockAF2   INTEGER (-32..31),",
          "1021:  stanClockAF1   INTEGER (-1048576..1048575),",
          "1022:  stanClockAF0   INTEGER (-1073741824..1073741823),",
          "1023:  stanClockTgd   INTEGER (-512..511)    OPTIONAL, -- Need ON",
          "1024:  sisa     INTEGER (0..255),",
          "1025:  stanModelID    INTEGER (0..1)     OPTIONAL, -- Need ON",
          "1026:  ...",
          "1027: }",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1054: }",
          "1057: NavModelKeplerianSet ::= SEQUENCE {",
          "1059:  keplerW    INTEGER (-2147483648..2147483647),",
          "1060:  keplerDeltaN  INTEGER (-32768..32767),",
          "1061:  keplerM0   INTEGER (-2147483648..2147483647),",
          "",
          "[Removed Lines]",
          "1058:  keplerToe    INTEGER (0 .. 16383),",
          "",
          "[Added Lines]",
          "1076: BDS-ClockModel-r12 ::= SEQUENCE {",
          "1077:  bdsAODC-r12   INTEGER (0..31),",
          "1078:  bdsToc-r12   INTEGER (0..131071),",
          "1079:  bdsA0-r12   INTEGER (-8388608..8388607),",
          "1080:  bdsA1-r12   INTEGER (-2097152..2097151),",
          "1081:  bdsA2-r12   INTEGER (-1024..1023),",
          "1082:  bdsTgd1-r12   INTEGER (-512..511),",
          "1083:  ...",
          "1084: }",
          "1088:  keplerToe    INTEGER (0 .. 16383),",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1167: }",
          "1171:   gnss-BadSignalList  GNSS-BadSignalList,",
          "1172:  ...",
          "1173: }",
          "",
          "[Removed Lines]",
          "1170: GNSS-RealTimeIntegrity ::= SEQUENCE {",
          "",
          "[Added Lines]",
          "1200: NavModel-BDS-KeplerianSet-r12 ::= SEQUENCE {",
          "1201:  bdsAODE-r12     INTEGER (0..31),",
          "1202:  bdsURAI-r12    INTEGER (0..15),",
          "1203:  bdsToe-r12    INTEGER (0..131071),",
          "1204:  bdsAPowerHalf-r12  INTEGER (0..4294967295),",
          "1205:  bdsE-r12    INTEGER (0..4294967295),",
          "1206:  bdsW-r12    INTEGER (-2147483648..2147483647),",
          "1207:  bdsDeltaN-r12   INTEGER (-32768..32767),",
          "1208:  bdsM0-r12    INTEGER (-2147483648..2147483647),",
          "1209:  bdsOmega0-r12   INTEGER (-2147483648..2147483647),",
          "1210:  bdsOmegaDot-r12   INTEGER (-8388608..8388607),",
          "1211:  bdsI0-r12    INTEGER (-2147483648..2147483647),",
          "1212:  bdsIDot-r12    INTEGER (-8192..8191),",
          "1213:  bdsCuc-r12    INTEGER (-131072..131071),",
          "1214:  bdsCus-r12    INTEGER (-131072..131071),",
          "1215:  bdsCrc-r12    INTEGER (-131072..131071),",
          "1216:  bdsCrs-r12    INTEGER (-131072..131071),",
          "1217:  bdsCic-r12    INTEGER (-131072..131071),",
          "1218:  bdsCis-r12    INTEGER (-131072..131071),",
          "1219:  ...",
          "1220: }",
          "1223: GNSS-RealTimeIntegrity ::= SEQUENCE {",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1175: GNSS-BadSignalList ::= SEQUENCE (SIZE(1..64)) OF BadSignalElement",
          "1177: BadSignalElement ::= SEQUENCE {",
          "1179:   badSignalID   GNSS-SignalIDs  OPTIONAL, -- Need OP",
          "1180:  ...",
          "1181: }",
          "",
          "[Removed Lines]",
          "1178:   badSVID    SV-ID,",
          "",
          "[Added Lines]",
          "1231:   badSVID    SV-ID,",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1223:  intCodePhase    INTEGER (0..127),",
          "1224:  codePhaseSearchWindow  INTEGER (0..31),",
          "1225:  azimuth      INTEGER (0..511),",
          "1227:  ...,",
          "1228:  codePhase1023    BOOLEAN    OPTIONAL,  -- Need OP",
          "1230:             d80,",
          "1231:              d100,",
          "1232:              d120,",
          "",
          "[Removed Lines]",
          "1226:  elevation     INTEGER (0..127),",
          "1229:  dopplerUncertaintyExt-r10 ENUMERATED { d60,",
          "",
          "[Added Lines]",
          "1279:  elevation     INTEGER (0..127),",
          "1282:  dopplerUncertaintyExt-r10 ENUMERATED { d60,",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1237: GNSS-Almanac ::= SEQUENCE {",
          "1239:  toa       INTEGER (0..255)  OPTIONAL, -- Need ON",
          "1240:  ioda       INTEGER (0..3)   OPTIONAL, -- Need ON",
          "1241:  completeAlmanacProvided  BOOLEAN,",
          "1242:  gnss-AlmanacList   GNSS-AlmanacList,",
          "1244: }",
          "1246: GNSS-AlmanacList ::= SEQUENCE (SIZE(1..64)) OF GNSS-AlmanacElement",
          "1248: GNSS-AlmanacElement ::= CHOICE {",
          "1256: }",
          "1259: AlmanacKeplerianSet ::= SEQUENCE {",
          "1260:  svID     SV-ID,",
          "1262:  kepAlmanacDeltaI  INTEGER (-1024..1023),",
          "1263:  kepAlmanacOmegaDot  INTEGER (-1024..1023),",
          "1266:  kepAlmanacOmega0  INTEGER (-32768..32767),",
          "1267:  kepAlmanacW     INTEGER (-32768..32767),",
          "1268:  kepAlmanacM0   INTEGER (-32768..32767),",
          "1271:  ...",
          "1272: }",
          "",
          "[Removed Lines]",
          "1238:   weekNumber      INTEGER (0..255) OPTIONAL, -- Need ON",
          "1243:  ...",
          "1249:  keplerianAlmanacSet   AlmanacKeplerianSet,  -- Model-1",
          "1250:   keplerianNAV-Almanac  AlmanacNAV-KeplerianSet,  -- Model-2",
          "1251:  keplerianReducedAlmanac AlmanacReducedKeplerianSet, -- Model-3",
          "1252:  keplerianMidiAlmanac AlmanacMidiAlmanacSet,   -- Model-4",
          "1253:  keplerianGLONASS  AlmanacGLONASS-AlmanacSet,  -- Model-5",
          "1254:  ecef-SBAS-Almanac  AlmanacECEF-SBAS-AlmanacSet,-- Model-6",
          "1255:  ...",
          "1261:   kepAlmanacE     INTEGER (0..2047),",
          "1264:   kepSVHealth    INTEGER (0..15),",
          "1265:  kepAlmanacAPowerHalf INTEGER (-65536..65535),",
          "1269:  kepAlmanacAF0   INTEGER (-8192..8191),",
          "1270:  kepAlmanacAF1   INTEGER (-1024..1023),",
          "",
          "[Added Lines]",
          "1291:  weekNumber      INTEGER (0..255) OPTIONAL, -- Need ON",
          "1296:  ...,",
          "1297:  [[ toa-ext-v12xy   INTEGER (256..1023) OPTIONAL, -- Need ON",
          "1298:   ioda-ext-v12xy   INTEGER (4..15)  OPTIONAL -- Need ON",
          "1299:  ]]",
          "1305:  keplerianAlmanacSet     AlmanacKeplerianSet,  -- Model-1",
          "1306:   keplerianNAV-Almanac    AlmanacNAV-KeplerianSet, -- Model-2",
          "1307:  keplerianReducedAlmanac   AlmanacReducedKeplerianSet, -- Model-3",
          "1308:  keplerianMidiAlmanac   AlmanacMidiAlmanacSet,  -- Model-4",
          "1309:  keplerianGLONASS    AlmanacGLONASS-AlmanacSet, -- Model-5",
          "1310:  ecef-SBAS-Almanac    AlmanacECEF-SBAS-AlmanacSet,-- Model-6",
          "1311:  ...,",
          "1312:  keplerianBDS-Almanac-r12  AlmanacBDS-AlmanacSet-r12 -- Model-7",
          "1318:  kepAlmanacE     INTEGER (0..2047),",
          "1321:  kepSV-StatusINAV   BIT STRING (SIZE (4)),",
          "1322:  kepSV-StatusFNAV  BIT STRING (SIZE (2))   OPTIONAL, -- Need ON",
          "1323:  kepAlmanacAPowerHalf INTEGER (-4096..4095),",
          "1327:  kepAlmanacAF0   INTEGER (-32768..32767),",
          "1328:  kepAlmanacAF1   INTEGER (-4096..4095),",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1351: }",
          "1359:  ...",
          "1360: }",
          "1363: UTC-ModelSet1 ::= SEQUENCE {",
          "1364:  gnss-Utc-A1   INTEGER (-8388608..8388607),",
          "1365:  gnss-Utc-A0   INTEGER (-2147483648..2147483647),",
          "",
          "[Removed Lines]",
          "1354: GNSS-UTC-Model ::= CHOICE {",
          "1355:  utcModel1   UTC-ModelSet1, -- Model-1",
          "1356:  utcModel2   UTC-ModelSet2, -- Model-2",
          "1357:  utcModel3   UTC-ModelSet3, -- Model-3",
          "1358:  utcModel4   UTC-ModelSet4, -- Model-4",
          "",
          "[Added Lines]",
          "1412: AlmanacBDS-AlmanacSet-r12 ::= SEQUENCE {",
          "1413:  svID     SV-ID,",
          "1414:  bdsAlmToa-r12   INTEGER (0..255)      OPTIONAL, -- Cond NotSameForAllSV",
          "1415:  bdsAlmSqrtA-r12   INTEGER (0..16777215),",
          "1416:  bdsAlmE-r12    INTEGER (0..131071),",
          "1417:  bdsAlmW-r12    INTEGER (-8388608..8388607),",
          "1418:  bdsAlmM0-r12   INTEGER (-8388608..8388607),",
          "1419:  bdsAlmOmega0-r12  INTEGER (-8388608..8388607),",
          "1420:  bdsAlmOmegaDot-r12  INTEGER (-65536..65535),",
          "1421:  bdsAlmDeltaI-r12  INTEGER (-32768..32767),",
          "1422:  bdsAlmA0-r12   INTEGER (-1024..1023),",
          "1423:  bdsAlmA1-r12   INTEGER (-1024..1023),",
          "1424:  bdsSvHealth-r12   BIT STRING (SIZE(9))     OPTIONAL, -- Cond SV-ID",
          "1429: GNSS-UTC-Model ::= CHOICE {",
          "1430:  utcModel1   UTC-ModelSet1,   -- Model-1",
          "1431:  utcModel2   UTC-ModelSet2,   -- Model-2",
          "1432:  utcModel3   UTC-ModelSet3,   -- Model-3",
          "1433:  utcModel4   UTC-ModelSet4,   -- Model-4",
          "1434:  ...,",
          "1435:  utcModel5-r12  UTC-ModelSet5-r12  -- Model-5",
          "1436: }",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "1411: }",
          "1414: GNSS-AuxiliaryInformation ::= CHOICE {",
          "1415:  gnss-ID-GPS  GNSS-ID-GPS,",
          "1416:  gnss-ID-GLONASS GNSS-ID-GLONASS,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1490: UTC-ModelSet5-r12 ::= SEQUENCE {",
          "1491:  utcA0-r12   INTEGER (-2147483648..2147483647),",
          "1492:  utcA1-r12   INTEGER (-8388608..8388607),",
          "1493:  utcDeltaTls-r12  INTEGER (-128..127),",
          "1494:  utcWNlsf-r12  INTEGER (0..255),",
          "1495:  utcDN-r12   INTEGER (0..255),",
          "1496:  utcDeltaTlsf-r12 INTEGER (-128..127),",
          "1497:  ...",
          "1498: }",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "1432:  signalsAvailable GNSS-SignalIDs,",
          "1433:  channelNumber  INTEGER (-7..13)  OPTIONAL,  -- Cond FDMA",
          "1434:  ...",
          "1438: A-GNSS-RequestAssistanceData ::= SEQUENCE {",
          "",
          "[Removed Lines]",
          "1435: }",
          "",
          "[Added Lines]",
          "1522: }",
          "1525: BDS-DifferentialCorrections-r12 ::= SEQUENCE {",
          "1526:  dbds-RefTime-r12   INTEGER (0..3599),",
          "1527:  bds-SgnTypeList-r12   BDS-SgnTypeList-r12,",
          "1528:  ...",
          "1529: }",
          "1531: BDS-SgnTypeList-r12 ::= SEQUENCE (SIZE (1..3)) OF BDS-SgnTypeElement-r12",
          "1533: BDS-SgnTypeElement-r12 ::= SEQUENCE {",
          "1534:  gnss-SignalID    GNSS-SignalID    OPTIONAL, -- Need ON",
          "1535:  dbds-CorrectionList-r12  DBDS-CorrectionList-r12,",
          "1536:  ...",
          "1537: }",
          "1539: DBDS-CorrectionList-r12 ::= SEQUENCE (SIZE (1..64)) OF DBDS-CorrectionElement-r12",
          "1541: DBDS-CorrectionElement-r12 ::= SEQUENCE {",
          "1542:  svID       SV-ID,",
          "1543:  bds-UDREI-r12    INTEGER (0..15),",
          "1544:  bds-RURAI-r12    INTEGER (0..15),",
          "1545:  bds-ECC-DeltaT-r12   INTEGER (-4096..4095),",
          "1546:  ...",
          "1547: }",
          "1550: BDS-GridModelParameter-r12 ::= SEQUENCE {",
          "1551:  bds-RefTime-r12   INTEGER (0..3599),",
          "1552:  gridIonList-r12   GridIonList-r12,",
          "1553:  ...",
          "1554: }",
          "1556: GridIonList-r12 ::= SEQUENCE (SIZE (1..320)) OF GridIonElement-r12",
          "1558: GridIonElement-r12 ::= SEQUENCE {",
          "1559:  igp-ID-r12    INTEGER (1..320),",
          "1560:  dt-r12     INTEGER (0..511),",
          "1561:  givei-r12    INTEGER (0..15) ,",
          "1562:  ...",
          "1563: }",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "1445: GNSS-CommonAssistDataReq ::= SEQUENCE {",
          "1447:                 OPTIONAL, -- Cond RefTimeReq",
          "1449:                 OPTIONAL, -- Cond RefLocReq",
          "1451:                 OPTIONAL, -- Cond IonoModReq",
          "1453:                 OPTIONAL, -- Cond EOPReq",
          "1454:  ...",
          "1455: }",
          "",
          "[Removed Lines]",
          "1446:  gnss-ReferenceTimeReq     GNSS-ReferenceTimeReq",
          "1448:  gnss-ReferenceLocationReq   GNSS-ReferenceLocationReq",
          "1450:  gnss-IonosphericModelReq   GNSS-IonosphericModelReq",
          "1452:  gnss-EarthOrientationParametersReq GNSS-EarthOrientationParametersReq",
          "",
          "[Added Lines]",
          "1574:  gnss-ReferenceTimeReq     GNSS-ReferenceTimeReq",
          "1576:  gnss-ReferenceLocationReq   GNSS-ReferenceLocationReq",
          "1578:  gnss-IonosphericModelReq   GNSS-IonosphericModelReq",
          "1580:  gnss-EarthOrientationParametersReq GNSS-EarthOrientationParametersReq",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "1469:  gnss-AlmanacReq     GNSS-AlmanacReq     OPTIONAL, -- Cond AlmanacReq",
          "1470:  gnss-UTCModelReq    GNSS-UTC-ModelReq    OPTIONAL, -- Cond UTCModReq",
          "1471:  gnss-AuxiliaryInformationReq GNSS-AuxiliaryInformationReq OPTIONAL, -- Cond AuxInfoReq",
          "1473: }",
          "1476: GNSS-ReferenceTimeReq ::= SEQUENCE {",
          "1480:  ...",
          "1481: }",
          "",
          "[Removed Lines]",
          "1472:  ...",
          "1477:  gnss-TimeReqPrefList SEQUENCE (SIZE (1..8)) OF GNSS-ID,",
          "1478:  gps-TOW-assistReq  BOOLEAN        OPTIONAL, -- Cond gps",
          "1479:  notOfLeapSecReq   BOOLEAN        OPTIONAL, -- Cond glonass",
          "",
          "[Added Lines]",
          "1600:  ...,",
          "1601:  [[",
          "1602:   bds-DifferentialCorrectionsReq-r12",
          "1603:          BDS-DifferentialCorrectionsReq-r12",
          "1604:                  OPTIONAL, -- Cond DBDS-Req",
          "1605:   bds-GridModelReq-r12  BDS-GridModelReq-r12   OPTIONAL -- Cond BDS-GridModReq",
          "1606:  ]]",
          "1611:      gnss-TimeReqPrefList SEQUENCE (SIZE (1..8)) OF GNSS-ID,",
          "1612:      gps-TOW-assistReq  BOOLEAN        OPTIONAL, -- Cond gps",
          "1613:      notOfLeapSecReq   BOOLEAN        OPTIONAL, -- Cond glonass",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "1521: }",
          "1525:  gnss-WeekOrDay   INTEGER (0..4095),",
          "1526:  gnss-Toe    INTEGER (0..255),",
          "1527:  t-toeLimit    INTEGER (0..15),",
          "",
          "[Removed Lines]",
          "1524: StoredNavListInfo ::= SEQUENCE {",
          "",
          "[Added Lines]",
          "1658: StoredNavListInfo ::= SEQUENCE {",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "1534: SatListRelatedDataElement ::= SEQUENCE {",
          "1535:  svID     SV-ID,",
          "1540: }",
          "1543:  svReqList    BIT STRING (SIZE (64)),",
          "1546:  addNavparamReq   BOOLEAN    OPTIONAL, -- Cond orbitModelID-2",
          "1547:  ...",
          "1548: }",
          "",
          "[Removed Lines]",
          "1536:  iod     BIT STRING (SIZE(11)),",
          "1537:  clockModelID  INTEGER (1..8)   OPTIONAL,",
          "1538: orbitModelID  INTEGER (1..8)   OPTIONAL,",
          "1539:  ...",
          "1542: ReqNavListInfo ::= SEQUENCE {",
          "1544:  clockModelID-PrefList SEQUENCE (SIZE (1..8)) OF INTEGER (1..8)  OPTIONAL,",
          "1545:  orbitModelID-PrefList SEQUENCE (SIZE (1..8)) OF INTEGER (1..8)  OPTIONAL,",
          "",
          "[Added Lines]",
          "1670:      iod     BIT STRING (SIZE(11)),",
          "1671:      clockModelID  INTEGER (1..8)   OPTIONAL,",
          "1672:      orbitModelID  INTEGER (1..8)   OPTIONAL,",
          "1673:      ...",
          "1676: ReqNavListInfo ::= SEQUENCE {",
          "1678:      clockModelID-PrefList SEQUENCE (SIZE (1..8)) OF INTEGER (1..8)  OPTIONAL,",
          "1679:  orbitModelID-PrefList SEQUENCE (SIZE (1..8)) OF INTEGER (1..8)  OPTIONAL,",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "1559:  gnss-TOD-FracReq INTEGER (0..999)  OPTIONAL,",
          "1560:  dataBitInterval  INTEGER (0..15),",
          "1561:  gnss-SignalType  GNSS-SignalIDs,",
          "1563:  ...",
          "1564: }",
          "",
          "[Removed Lines]",
          "1562:  gnss-DataBitsReq GNSS-DataBitsReqSatList OPTIONAL,",
          "",
          "[Added Lines]",
          "1696:  gnss-DataBitsReq GNSS-DataBitsReqSatList OPTIONAL,",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "1594: }",
          "1597: A-GNSS-ProvideLocationInformation ::= SEQUENCE {",
          "1598:  gnss-SignalMeasurementInformation GNSS-SignalMeasurementInformation  OPTIONAL,",
          "1599:  gnss-LocationInformation   GNSS-LocationInformation    OPTIONAL,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1731: BDS-DifferentialCorrectionsReq-r12 ::=  SEQUENCE {",
          "1732:  dgnss-SignalsReq   GNSS-SignalIDs,",
          "1733:  ...",
          "1734: }",
          "1737: BDS-GridModelReq-r12 ::=  SEQUENCE {",
          "1738:  ...",
          "1739: }",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "1612: MeasurementReferenceTime  ::= SEQUENCE {",
          "1613:  gnss-TOD-msec  INTEGER (0..3599999),",
          "1616:  gnss-TimeID   GNSS-ID,",
          "1617:  networkTime   CHOICE {",
          "1618:   eUTRA SEQUENCE {",
          "",
          "[Removed Lines]",
          "1614:  gnss-TOD-frac  INTEGER (0..3999)   OPTIONAL,",
          "1615:  gnss-TOD-unc  INTEGER (0..127)   OPTIONAL,",
          "",
          "[Added Lines]",
          "1759:  gnss-TOD-frac  INTEGER (0..3999)   OPTIONAL,",
          "1760:  gnss-TOD-unc  INTEGER (0..127)   OPTIONAL,",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "1650:     ...",
          "1651:     },",
          "1652:   ...",
          "1654:  ...",
          "1655: }",
          "",
          "[Removed Lines]",
          "1653:   }  OPTIONAL,",
          "",
          "[Added Lines]",
          "1798:   }  OPTIONAL,",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "1678:  svID     SV-ID,",
          "1679:  cNo     INTEGER (0..63),",
          "1680:  mpathDet    ENUMERATED {notMeasured (0), low (1), medium (2), high (3), ...},",
          "1682:  codePhase    INTEGER (0..2097151),",
          "1683:  integerCodePhase  INTEGER (0..127)    OPTIONAL,",
          "1685:  doppler    INTEGER (-32768..32767)  OPTIONAL,",
          "1686:  adr     INTEGER (0..33554431)   OPTIONAL,",
          "1687:  ...",
          "",
          "[Removed Lines]",
          "1681:  carrierQualityInd  INTEGER (0..3)     OPTIONAL,",
          "1684:  codePhaseRMSError  INTEGER (0..63),",
          "",
          "[Added Lines]",
          "1826:  carrierQualityInd  INTEGER (0..3)     OPTIONAL,",
          "1829:  codePhaseRMSError  INTEGER (0..63),",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "1691: GNSS-LocationInformation ::= SEQUENCE {",
          "1692:  measurementReferenceTime  MeasurementReferenceTime,",
          "1694:  ...",
          "1695: }",
          "",
          "[Removed Lines]",
          "1693:  agnss-List      GNSS-ID-Bitmap,",
          "",
          "[Added Lines]",
          "1838:  agnss-List      GNSS-ID-Bitmap,",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "1704: GNSS-PositioningInstructions ::= SEQUENCE {",
          "1706:  fineTimeAssistanceMeasReq BOOLEAN,",
          "1707:  adrMeasReq     BOOLEAN,",
          "1708:  multiFreqMeasReq   BOOLEAN,",
          "",
          "[Removed Lines]",
          "1705:  gnss-Methods    GNSS-ID-Bitmap,",
          "",
          "[Added Lines]",
          "1850:  gnss-Methods    GNSS-ID-Bitmap,",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "1724: GNSS-SupportElement ::= SEQUENCE {",
          "1725:  gnss-ID       GNSS-ID,",
          "1726:  sbas-IDs      SBAS-IDs     OPTIONAL, -- Cond GNSS-ID-SBAS",
          "1728:  gnss-Signals     GNSS-SignalIDs,",
          "1729:  fta-MeasSupport     SEQUENCE {",
          "1730:           cellTime AccessTypes,",
          "",
          "[Removed Lines]",
          "1727:  agnss-Modes      PositioningModes,",
          "",
          "[Added Lines]",
          "1872:  agnss-Modes      PositioningModes,",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "1737: }",
          "1739: AssistanceDataSupportList ::= SEQUENCE {",
          "1741:  gnss-GenericAssistanceDataSupport GNSS-GenericAssistanceDataSupport,",
          "1742:  ...",
          "1743: }",
          "",
          "[Removed Lines]",
          "1740:  gnss-CommonAssistanceDataSupport GNSS-CommonAssistanceDataSupport,",
          "",
          "[Added Lines]",
          "1885:      gnss-CommonAssistanceDataSupport GNSS-CommonAssistanceDataSupport,",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "1747: GNSS-CommonAssistanceDataSupport ::= SEQUENCE {",
          "1749:                 OPTIONAL, -- Cond RefTimeSup",
          "1751:                 OPTIONAL, -- Cond RefLocSup",
          "1753:                 OPTIONAL, -- Cond IonoModSup",
          "1755:                 OPTIONAL, -- Cond EOPSup",
          "1756:  ...",
          "1757: }",
          "",
          "[Removed Lines]",
          "1748:  gnss-ReferenceTimeSupport     GNSS-ReferenceTimeSupport",
          "1750:  gnss-ReferenceLocationSupport   GNSS-ReferenceLocationSupport",
          "1752:  gnss-IonosphericModelSupport   GNSS-IonosphericModelSupport",
          "1754:  gnss-EarthOrientationParametersSupport GNSS-EarthOrientationParametersSupport",
          "",
          "[Added Lines]",
          "1893:  gnss-ReferenceTimeSupport     GNSS-ReferenceTimeSupport",
          "1895:  gnss-ReferenceLocationSupport   GNSS-ReferenceLocationSupport",
          "1897:  gnss-IonosphericModelSupport   GNSS-IonosphericModelSupport",
          "1899:  gnss-EarthOrientationParametersSupport GNSS-EarthOrientationParametersSupport",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "1781: }",
          "1785:         SEQUENCE (SIZE (1..16)) OF GNSS-GenericAssistDataSupportElement",
          "1787: GNSS-GenericAssistDataSupportElement ::= SEQUENCE {",
          "1788:  gnss-ID        GNSS-ID,",
          "1792:  gnss-DifferentialCorrectionsSupport GNSS-DifferentialCorrectionsSupport",
          "1793:                  OPTIONAL, -- Cond DGNSS-Sup",
          "1794:  gnss-NavigationModelSupport   GNSS-NavigationModelSupport",
          "",
          "[Removed Lines]",
          "1784: GNSS-GenericAssistanceDataSupport ::=",
          "1789:  sbas-ID        SBAS-ID      OPTIONAL, -- Cond GNSS-ID-SBAS",
          "1790:  gnss-TimeModelsSupport    GNSS-TimeModelListSupport",
          "1791:                  OPTIONAL, -- Cond TimeModSup",
          "",
          "[Added Lines]",
          "1929: GNSS-GenericAssistanceDataSupport ::=",
          "1934:  sbas-ID        SBAS-ID      OPTIONAL, -- Cond GNSS",
          "1935: ID",
          "1936: SBAS",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "1805:                  OPTIONAL, -- Cond UTCModSup",
          "1806:  gnss-AuxiliaryInformationSupport GNSS-AuxiliaryInformationSupport",
          "1807:                  OPTIONAL, -- Cond AuxInfoSup",
          "1809: }",
          "",
          "[Removed Lines]",
          "1808:  ...",
          "",
          "[Added Lines]",
          "1953:  gnss-AuxiliaryInformationSupport GNSS-AuxiliaryInformationSupport",
          "1954:                  OPTIONAL, -- Cond AuxInfoSup",
          "1955:  ...,",
          "1956:  [[",
          "1957:   bds-DifferentialCorrectionsSupport-r12",
          "1958:           BDS-DifferentialCorrectionsSupport-r12",
          "1959:                  OPTIONAL, -- Cond DBDS-Sup",
          "1960:   bds-GridModelSupport-r12  BDS-GridModelSupport-r12",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "1826:          model-2  (1),",
          "1827:          model-3  (2),",
          "1828:          model-4  (3),",
          "1830:  orbitModel  BIT STRING {  model-1  (0),",
          "1831:          model-2  (1),",
          "1832:          model-3  (2),",
          "1833:          model-4  (3),",
          "1835:  ...",
          "1836: }",
          "",
          "[Removed Lines]",
          "1829:          model-5  (4) } (SIZE (1..8))  OPTIONAL,",
          "1834:          model-5  (4) } (SIZE (1..8))  OPTIONAL,",
          "",
          "[Added Lines]",
          "1981:          model-3  (2),",
          "1982:          model-4  (3),",
          "1987:          model-3  (2),",
          "1988:          model-4  (3),",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "1859:           model-3  (2),",
          "1860:           model-4  (3),",
          "1861:           model-5  (4),",
          "1863:  ...",
          "1864: }",
          "",
          "[Removed Lines]",
          "1862:           model-6  (5) } (SIZE (1..8))  OPTIONAL,",
          "",
          "[Added Lines]",
          "2016:           model-4  (3),",
          "2017:           model-5  (4),",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "1868:  utc-Model  BIT STRING {  model-1  (0),",
          "1869:          model-2  (1),",
          "1870:          model-3  (2),",
          "1872:  ...",
          "1873: }",
          "",
          "[Removed Lines]",
          "1871:          model-4  (3) } (SIZE (1..8))  OPTIONAL,",
          "",
          "[Added Lines]",
          "2026:          model-2  (1),",
          "2027:          model-3  (2),",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "1878: }",
          "1881: A-GNSS-RequestCapabilities ::= SEQUENCE {",
          "1882:  gnss-SupportListReq    BOOLEAN,",
          "1883:  assistanceDataSupportListReq BOOLEAN,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2039: BDS-DifferentialCorrectionsSupport-r12 ::=  SEQUENCE {",
          "2040:  gnssSignalIDs   GNSS-SignalIDs,",
          "2041:  ...",
          "2042: }",
          "2045: BDS-GridModelSupport-r12 ::=  SEQUENCE {",
          "2046:  ...",
          "2047: }",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "1896: GNSS-LocationServerErrorCauses ::= SEQUENCE {",
          "1898:      undefined,",
          "1899:      undeliveredAssistanceDataIsNotSupportedByServer,",
          "1900:      undeliveredAssistanceDataIsSupportedButCurrentlyNotAvailableByServer,        undeliveredAssistanceDataIsPartlyNotSupportedAndPartlyNotAvailableByServer,",
          "",
          "[Removed Lines]",
          "1897:  cause  ENUMERATED {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "1907: GNSS-TargetDeviceErrorCauses ::= SEQUENCE {",
          "1908:  cause  ENUMERATED { undefined,",
          "1910:         assistanceDataMissing,",
          "1911:         notAllRequestedMeasurementsPossible,",
          "1912:         ...",
          "",
          "[Removed Lines]",
          "1909:         thereWereNotEnoughSatellitesReceived,",
          "",
          "[Added Lines]",
          "2076: GNSS-TargetDeviceErrorCauses ::= SEQUENCE {",
          "",
          "---------------",
          "--- Hunk 49 ---",
          "[Context before]",
          "1921: GNSS-ID ::= SEQUENCE {",
          "1923:  ...",
          "1924: }",
          "1927: GNSS-ID-Bitmap ::= SEQUENCE {",
          "1929:           sbas   (1),",
          "1930:           qzss  (2),",
          "1931:           galileo  (3),",
          "1933:  ...",
          "1934: }",
          "1938:  gnss-SignalID  INTEGER (0 .. 7),",
          "1939:  ...",
          "1940: }",
          "1944:  gnss-SignalIDs  BIT STRING (SIZE(8)),",
          "1945:  ...",
          "1946: }",
          "1950:  sbas-id    ENUMERATED { waas, egnos, msas, gagan, ...},",
          "1951:  ...",
          "1952: }",
          "1957:          egnos   (1),",
          "1958:          msas  (2),",
          "1959:          gagan  (3)  } (SIZE (1..8)),",
          "",
          "[Removed Lines]",
          "1922:  gnss-id    ENUMERATED{ gps, sbas, qzss, galileo, glonass, ...},",
          "1928:  gnss-ids   BIT STRING { gps   (0),",
          "1932:           glonass  (4)  } (SIZE (1..16)),",
          "1937: GNSS-SignalID ::= SEQUENCE {",
          "1943: GNSS-SignalIDs ::= SEQUENCE {",
          "1949: SBAS-ID ::= SEQUENCE {",
          "1955: SBAS-IDs ::= SEQUENCE {",
          "1956:  sbas-IDs  BIT STRING { waas   (0),",
          "",
          "[Added Lines]",
          "2099:           qzss  (2),",
          "2100:           galileo  (3),",
          "",
          "---------------",
          "--- Hunk 50 ---",
          "[Context before]",
          "1961: }",
          "1965:  satellite-id  INTEGER(0..63),",
          "1966:  ...",
          "1967: }",
          "",
          "[Removed Lines]",
          "1964: SV-ID ::= SEQUENCE {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 51 ---",
          "[Context before]",
          "1992:  rsrq-Result  INTEGER (0..34)      OPTIONAL,",
          "1993:  ue-RxTxTimeDiff INTEGER (0..4095)     OPTIONAL,",
          "1994:  ...,",
          "1996:  ]]",
          "1997: }",
          "",
          "[Removed Lines]",
          "1995:  [[ arfcnEUTRA-v9a0  ARFCN-ValueEUTRA-v9a0   OPTIONAL  -- Cond EARFCN-max",
          "",
          "[Added Lines]",
          "2163:  ue-RxTxTimeDiff INTEGER (0..4095)     OPTIONAL,",
          "",
          "---------------",
          "--- Hunk 52 ---",
          "[Context before]",
          "2028: ECID-LocationServerErrorCauses ::= SEQUENCE {",
          "2030:         ...",
          "2031:        },",
          "2032:  ...",
          "",
          "[Removed Lines]",
          "2029:  cause  ENUMERATED { undefined,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "asn1/lpp/lpp.cnf||asn1/lpp/lpp.cnf": [
          "File: asn1/lpp/lpp.cnf -> asn1/lpp/lpp.cnf",
          "--- Hunk 1 ---",
          "[Context before]",
          "53: Polygon",
          "54: #.END",
          "56: #.FN_HDR RequestCapabilities",
          "57:   col_append_sep_str(actx->pinfo->cinfo, COL_INFO, NULL, \"Request Capabilities\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "56: #.MAKE_ENUM",
          "57: GNSS-ID/gnss-id TYPE_PREFIX UPPER_CASE",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "296: #.FN_FTR ResponseTime/time",
          "297:   proto_item_append_text(actx->created_item, \" s\");",
          "299: #.TYPE_ATTR",
          "300: OTDOA-NeighbourCellInfoElement/expectedRSTD DISPLAY=BASE_CUSTOM STRINGS=&lpp_expectedRSTD_fmt",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "302: #.FN_FTR ResponseTime/eag_1/responseTimeEarlyFix-r12",
          "303:   proto_item_append_text(actx->created_item, \" s\");",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "484: #.TYPE_ATTR",
          "485: DGNSS-CorrectionsElement/udreValidityTime STRINGS=VALS(lpp_udreValidityTime_vals)",
          "487: #.TYPE_ATTR",
          "488: StandardClockModelElement/stanClockToc DISPLAY=BASE_CUSTOM STRINGS=&lpp_stanClockToc_fmt",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "493: #.FN_BODY GNSS-NavModelSatelliteElement/eag_1/svHealthExt-v12xy VAL_PTR = &svHealthExt_tvb",
          "494:   tvbuff_t *svHealthExt_tvb = NULL;",
          "495:   proto_tree *subtree;",
          "496: %(DEFAULT_BODY)s",
          "498: #.FN_FTR GNSS-NavModelSatelliteElement/eag_1/svHealthExt-v12xy",
          "499:   if (svHealthExt_tvb) {",
          "500:     subtree = proto_item_add_subtree(actx->created_item, ett_lpp_svHealthExt_v12xy);",
          "501:     proto_tree_add_bits_item(subtree, hf_lpp_svHealthExt_v12xy_e5bhs, svHealthExt_tvb, 0, 2, ENC_BIG_ENDIAN);",
          "502:     proto_tree_add_bits_item(subtree, hf_lpp_svHealthExt_v12xy_e1_bhs, svHealthExt_tvb, 2, 2, ENC_BIG_ENDIAN);",
          "503:   }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "499: #.TYPE_ATTR",
          "500: StandardClockModelElement/stanClockTgd DISPLAY=BASE_CUSTOM STRINGS=&lpp_stanClockTgd_fmt",
          "502: #.TYPE_ATTR",
          "503: StandardClockModelElement/stanModelID STRINGS=VALS(lpp_stanModelID_vals)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "520: #.TYPE_ATTR",
          "521: StandardClockModelElement/sisa DISPLAY=BASE_CUSTOM STRINGS=&lpp_sisa_fmt",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "571: #.TYPE_ATTR",
          "572: SBAS-ClockModel/sbasAgf1 DISPLAY=BASE_CUSTOM STRINGS=&lpp_sbasAgf1_fmt",
          "574: #.TYPE_ATTR",
          "575: NavModelKeplerianSet/keplerToe DISPLAY=BASE_CUSTOM STRINGS=&lpp_keplerToe_fmt",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "595: #.TYPE_ATTR",
          "596: BDS-ClockModel-r12/bdsAODC-r12 DISPLAY=BASE_CUSTOM STRINGS=&lpp_bdsAODC_AODE_r12_fmt",
          "598: #.TYPE_ATTR",
          "599: BDS-ClockModel-r12/bdsToc-r12 DISPLAY=BASE_CUSTOM STRINGS=&lpp_bdsToc_Toe_r12_fmt",
          "601: #.TYPE_ATTR",
          "602: BDS-ClockModel-r12/bdsA0-r12 DISPLAY=BASE_CUSTOM STRINGS=&lpp_bdsA0_r12_fmt",
          "604: #.TYPE_ATTR",
          "605: BDS-ClockModel-r12/bdsA1-r12 DISPLAY=BASE_CUSTOM STRINGS=&lpp_bdsA1_r12_fmt",
          "607: #.TYPE_ATTR",
          "608: BDS-ClockModel-r12/bdsA2-r12 DISPLAY=BASE_CUSTOM STRINGS=&lpp_bdsA2_r12_fmt",
          "610: #.TYPE_ATTR",
          "611: BDS-ClockModel-r12/bdsTgd1-r12 DISPLAY=BASE_CUSTOM STRINGS=&lpp_bdsTgd1_r12_fmt",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "690: #.FN_FTR NavModelCNAV-KeplerianSet/cnavMo",
          "691:   PROTO_ITEM_SET_HIDDEN(actx->created_item);",
          "692:   actx->created_item = proto_tree_add_int64_format_value(tree, hf_index, tvb, curr_offset>>3, (offset+7-curr_offset)>>3,",
          "694:                                                          (double)cnavMo*pow(2, -32), cnavMo);",
          "696: #.FN_BODY NavModelCNAV-KeplerianSet/cnavE VAL_PTR=&cnavE",
          "",
          "[Removed Lines]",
          "693:                                                          cnavMo, \"%e semi-circles (%\"G_GINT64_MODIFIER\"d)\",",
          "",
          "[Added Lines]",
          "732:                                                          cnavMo, \"%g semi-circles (%\"G_GINT64_MODIFIER\"d)\",",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "701: #.FN_FTR NavModelCNAV-KeplerianSet/cnavE",
          "702:   PROTO_ITEM_SET_HIDDEN(actx->created_item);",
          "703:   actx->created_item = proto_tree_add_uint64_format_value(tree, hf_index, tvb, curr_offset>>3, (offset+7-curr_offset)>>3,",
          "705:                                                           (double)cnavE*pow(2, -34), cnavE);",
          "707: #.FN_BODY NavModelCNAV-KeplerianSet/cnavOmega VAL_PTR=&cnavOmega",
          "",
          "[Removed Lines]",
          "704:                                                           cnavE, \"%e (%\"G_GINT64_MODIFIER\"u)\",",
          "",
          "[Added Lines]",
          "743:                                                           cnavE, \"%g (%\"G_GINT64_MODIFIER\"u)\",",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "712: #.FN_FTR NavModelCNAV-KeplerianSet/cnavOmega",
          "713:   PROTO_ITEM_SET_HIDDEN(actx->created_item);",
          "714:   actx->created_item = proto_tree_add_int64_format_value(tree, hf_index, tvb, curr_offset>>3, (offset+7-curr_offset)>>3,",
          "716:                                                          (double)cnavOmega*pow(2, -32), cnavOmega);",
          "718: #.FN_BODY NavModelCNAV-KeplerianSet/cnavOMEGA0 VAL_PTR=&cnavOMEGA0",
          "",
          "[Removed Lines]",
          "715:                                                          cnavOmega, \"%e semi-circles (%\"G_GINT64_MODIFIER\"d)\",",
          "",
          "[Added Lines]",
          "754:                                                          cnavOmega, \"%g semi-circles (%\"G_GINT64_MODIFIER\"d)\",",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "723: #.FN_FTR NavModelCNAV-KeplerianSet/cnavOMEGA0",
          "724:   PROTO_ITEM_SET_HIDDEN(actx->created_item);",
          "725:   actx->created_item = proto_tree_add_int64_format_value(tree, hf_index, tvb, curr_offset>>3, (offset+7-curr_offset)>>3,",
          "727:                                                          (double)cnavOMEGA0*pow(2, -32), cnavOMEGA0);",
          "729: #.TYPE_ATTR",
          "",
          "[Removed Lines]",
          "726:                                                          cnavOMEGA0, \"%e semi-circles (%\"G_GINT64_MODIFIER\"d)\",",
          "",
          "[Added Lines]",
          "765:                                                          cnavOMEGA0, \"%g semi-circles (%\"G_GINT64_MODIFIER\"d)\",",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "737: #.FN_FTR NavModelCNAV-KeplerianSet/cnavIo",
          "738:   PROTO_ITEM_SET_HIDDEN(actx->created_item);",
          "739:   actx->created_item = proto_tree_add_int64_format_value(tree, hf_index, tvb, curr_offset>>3, (offset+7-curr_offset)>>3,",
          "741:                                                          (double)cnavIo*pow(2, -32), cnavIo);",
          "743: #.TYPE_ATTR",
          "",
          "[Removed Lines]",
          "740:                                                          cnavIo, \"%e semi-circles (%\"G_GINT64_MODIFIER\"d)\",",
          "",
          "[Added Lines]",
          "779:                                                          cnavIo, \"%g semi-circles (%\"G_GINT64_MODIFIER\"d)\",",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "834: #.TYPE_ATTR",
          "835: NavModel-SBAS-ECEF/sbasZgDotDot DISPLAY=BASE_CUSTOM STRINGS=&lpp_sbasZgDotDot_fmt",
          "837: #.FN_FTR GNSS-DataBitAssistance/gnss-TOD",
          "838:   proto_item_append_text(actx->created_item, \" s\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "876: #.TYPE_ATTR",
          "877: NavModel-BDS-KeplerianSet-r12/bdsAODE-r12 DISPLAY=BASE_CUSTOM STRINGS=&lpp_bdsAODC_AODE_r12_fmt",
          "879: #.FN_FTR NavModel-BDS-KeplerianSet-r12/bdsURAI-r12",
          "880:   proto_item_append_text(actx->created_item, \" m\");",
          "882: #.TYPE_ATTR",
          "883: NavModel-BDS-KeplerianSet-r12/bdsToe-r12 DISPLAY=BASE_CUSTOM STRINGS=&lpp_bdsToc_Toe_r12_fmt",
          "885: #.TYPE_ATTR",
          "886: NavModel-BDS-KeplerianSet-r12/bdsAPowerHalf-r12 DISPLAY=BASE_CUSTOM STRINGS=&lpp_bdsAPowerHalf_r12_fmt",
          "888: #.TYPE_ATTR",
          "889: NavModel-BDS-KeplerianSet-r12/bdsE-r12 DISPLAY=BASE_CUSTOM STRINGS=&lpp_bdsE_r12_fmt",
          "891: #.TYPE_ATTR",
          "892: NavModel-BDS-KeplerianSet-r12/bdsW-r12 DISPLAY=BASE_CUSTOM STRINGS=&lpp_bdsW_M0_Omega0_I0_r12_fmt",
          "894: #.TYPE_ATTR",
          "895: NavModel-BDS-KeplerianSet-r12/bdsDeltaN-r12 DISPLAY=BASE_CUSTOM STRINGS=&lpp_bdsDeltaN_OmegaDot_IDot_r12_fmt",
          "897: #.TYPE_ATTR",
          "898: NavModel-BDS-KeplerianSet-r12/bdsM0-r12 DISPLAY=BASE_CUSTOM STRINGS=&lpp_bdsW_M0_Omega0_I0_r12_fmt",
          "900: #.TYPE_ATTR",
          "901: NavModel-BDS-KeplerianSet-r12/bdsOmega0-r12 DISPLAY=BASE_CUSTOM STRINGS=&lpp_bdsW_M0_Omega0_I0_r12_fmt",
          "903: #.TYPE_ATTR",
          "904: NavModel-BDS-KeplerianSet-r12/bdsOmegaDot-r12 DISPLAY=BASE_CUSTOM STRINGS=&lpp_bdsDeltaN_OmegaDot_IDot_r12_fmt",
          "906: #.TYPE_ATTR",
          "907: NavModel-BDS-KeplerianSet-r12/bdsI0-r12 DISPLAY=BASE_CUSTOM STRINGS=&lpp_bdsW_M0_Omega0_I0_r12_fmt",
          "909: #.TYPE_ATTR",
          "910: NavModel-BDS-KeplerianSet-r12/bdsIDot-r12 DISPLAY=BASE_CUSTOM STRINGS=&lpp_bdsDeltaN_OmegaDot_IDot_r12_fmt",
          "912: #.TYPE_ATTR",
          "913: NavModel-BDS-KeplerianSet-r12/bdsCuc-r12 DISPLAY=BASE_CUSTOM STRINGS=&lpp_bdsCuc_Cus_Cic_Cis_r12_fmt",
          "915: #.TYPE_ATTR",
          "916: NavModel-BDS-KeplerianSet-r12/bdsCus-r12 DISPLAY=BASE_CUSTOM STRINGS=&lpp_bdsCuc_Cus_Cic_Cis_r12_fmt",
          "918: #.TYPE_ATTR",
          "919: NavModel-BDS-KeplerianSet-r12/bdsCrc-r12 DISPLAY=BASE_CUSTOM STRINGS=&lpp_bdsCrc_Crs_r12_fmt",
          "921: #.TYPE_ATTR",
          "922: NavModel-BDS-KeplerianSet-r12/bdsCrs-r12 DISPLAY=BASE_CUSTOM STRINGS=&lpp_bdsCrc_Crs_r12_fmt",
          "924: #.TYPE_ATTR",
          "925: NavModel-BDS-KeplerianSet-r12/bdsCic-r12 DISPLAY=BASE_CUSTOM STRINGS=&lpp_bdsCuc_Cus_Cic_Cis_r12_fmt",
          "927: #.TYPE_ATTR",
          "928: NavModel-BDS-KeplerianSet-r12/bdsCis-r12 DISPLAY=BASE_CUSTOM STRINGS=&lpp_bdsCuc_Cus_Cic_Cis_r12_fmt",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "867: #.TYPE_ATTR",
          "868: GNSS-AcquisitionAssistElement/elevation DISPLAY=BASE_CUSTOM STRINGS=&lpp_azimuth_elevation_fmt",
          "873: #.TYPE_ATTR",
          "874: AlmanacKeplerianSet/kepAlmanacE DISPLAY=BASE_CUSTOM STRINGS=&lpp_kepAlmanacE_fmt",
          "",
          "[Removed Lines]",
          "870: #.TYPE_ATTR",
          "871: GNSS-Almanac/toa DISPLAY=BASE_CUSTOM STRINGS=&lpp_toa_fmt",
          "",
          "[Added Lines]",
          "963: #.FN_BODY GNSS-Almanac/toa VAL_PTR = &toa",
          "964:   guint32 toa, val;",
          "965:   int len, old_offset = offset;",
          "966:   T_GNSS_ID_enum gnss_id = (T_GNSS_ID_enum)GPOINTER_TO_UINT(actx->private_data);",
          "967: %(DEFAULT_BODY)s",
          "969: #.FN_FTR GNSS-Almanac/toa",
          "970:   len = (offset-old_offset) >> 3 ? (offset-old_offset) >> 3 : 1;",
          "971:   val = (gnss_id == T_GNSS_ID_GALILEO) ? 600*toa : 4096*toa;",
          "972:   actx->created_item = proto_tree_add_uint_format_value(tree, hf_lpp_toa, tvb, old_offset, len,",
          "973:                                                         toa, \"%u s (%u)\", val, toa);",
          "975: #.FN_BODY GNSS-Almanac/eag_1/toa-ext-v12xy VAL_PTR = &toa_ext",
          "976:   guint32 toa_ext, val;",
          "977:   int len, old_offset = offset;",
          "978:   T_GNSS_ID_enum gnss_id = (T_GNSS_ID_enum)GPOINTER_TO_UINT(actx->private_data);",
          "979: %(DEFAULT_BODY)s",
          "981: #.FN_FTR GNSS-Almanac/eag_1/toa-ext-v12xy",
          "982:   len = (offset-old_offset) >> 3 ? (offset-old_offset) >> 3 : 1;",
          "983:   val = (gnss_id == T_GNSS_ID_GALILEO) ? 600*toa_ext : 4096*toa_ext;",
          "984:   actx->created_item = proto_tree_add_uint_format_value(tree, hf_lpp_toa_ext_v12xy, tvb, old_offset, len,",
          "985:                                                         toa_ext, \"%u s (%u)\", val, toa_ext);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "879: #.TYPE_ATTR",
          "880: AlmanacKeplerianSet/kepAlmanacOmegaDot DISPLAY=BASE_CUSTOM STRINGS=&lpp_kepAlmanacOmegaDot_fmt",
          "882: #.TYPE_ATTR",
          "883: AlmanacKeplerianSet/kepAlmanacAPowerHalf DISPLAY=BASE_CUSTOM STRINGS=&lpp_kepAlmanacAPowerHalf_fmt",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "996: #.FN_BODY AlmanacKeplerianSet/kepSV-StatusINAV VAL_PTR = &statusINAV_tvb",
          "997:   tvbuff_t *statusINAV_tvb = NULL;",
          "998:   proto_tree *subtree;",
          "999: %(DEFAULT_BODY)s",
          "1001: #.FN_FTR AlmanacKeplerianSet/kepSV-StatusINAV",
          "1002:   if (statusINAV_tvb) {",
          "1003:     subtree = proto_item_add_subtree(actx->created_item, ett_kepSV_StatusINAV);",
          "1004:     proto_tree_add_bits_item(subtree, hf_lpp_kepSV_StatusINAV_e5bhs, statusINAV_tvb, 0, 2, ENC_BIG_ENDIAN);",
          "1005:     proto_tree_add_bits_item(subtree, hf_lpp_kepSV_StatusINAV_e1_bhs, statusINAV_tvb, 2, 2, ENC_BIG_ENDIAN);",
          "1006:   }",
          "1008: #.FN_BODY AlmanacKeplerianSet/kepSV-StatusFNAV VAL_PTR = &statusFNAV_tvb",
          "1009:   tvbuff_t *statusFNAV_tvb = NULL;",
          "1010:   proto_tree *subtree;",
          "1011: %(DEFAULT_BODY)s",
          "1013: #.FN_FTR AlmanacKeplerianSet/kepSV-StatusFNAV",
          "1014:   if (statusFNAV_tvb) {",
          "1015:     subtree = proto_item_add_subtree(actx->created_item, ett_kepSV_StatusFNAV);",
          "1016:     proto_tree_add_bits_item(subtree, hf_lpp_kepSV_StatusFNAV_e5ahs, statusFNAV_tvb, 0, 2, ENC_BIG_ENDIAN);",
          "1017:   }",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1005: #.TYPE_ATTR",
          "1006: AlmanacECEF-SBAS-AlmanacSet/sbasAlmTo DISPLAY=BASE_CUSTOM STRINGS=&lpp_sbasAlmTo_fmt",
          "1008: #.TYPE_ATTR",
          "1009: UTC-ModelSet1/gnss-Utc-A1 DISPLAY=BASE_CUSTOM STRINGS=&lpp_gnss_Utc_A1_fmt",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1145: #.TYPE_ATTR",
          "1146: AlmanacBDS-AlmanacSet-r12/bdsAlmToa-r12 DISPLAY=BASE_CUSTOM STRINGS=&lpp_bdsAlmToa_r12_fmt",
          "1148: #.TYPE_ATTR",
          "1149: AlmanacBDS-AlmanacSet-r12/bdsAlmSqrtA-r12 DISPLAY=BASE_CUSTOM STRINGS=&lpp_bdsAlmSqrtA_r12_fmt",
          "1151: #.TYPE_ATTR",
          "1152: AlmanacBDS-AlmanacSet-r12/bdsAlmE-r12 DISPLAY=BASE_CUSTOM STRINGS=&lpp_bdsAlmE_r12_fmt",
          "1154: #.TYPE_ATTR",
          "1155: AlmanacBDS-AlmanacSet-r12/bdsAlmW-r12 DISPLAY=BASE_CUSTOM STRINGS=&lpp_bdsAlmW_M0_Omega0_r12_fmt",
          "1157: #.TYPE_ATTR",
          "1158: AlmanacBDS-AlmanacSet-r12/bdsAlmM0-r12 DISPLAY=BASE_CUSTOM STRINGS=&lpp_bdsAlmW_M0_Omega0_r12_fmt",
          "1160: #.TYPE_ATTR",
          "1161: AlmanacBDS-AlmanacSet-r12/bdsAlmOmega0-r12 DISPLAY=BASE_CUSTOM STRINGS=&lpp_bdsAlmW_M0_Omega0_r12_fmt",
          "1163: #.TYPE_ATTR",
          "1164: AlmanacBDS-AlmanacSet-r12/bdsAlmOmegaDot-r12 DISPLAY=BASE_CUSTOM STRINGS=&lpp_bdsAlmOmegaDot_r12_fmt",
          "1166: #.TYPE_ATTR",
          "1167: AlmanacBDS-AlmanacSet-r12/bdsAlmDeltaI-r12 DISPLAY=BASE_CUSTOM STRINGS=&lpp_bdsAlmDeltaI_r12_fmt",
          "1169: #.TYPE_ATTR",
          "1170: AlmanacBDS-AlmanacSet-r12/bdsAlmA0-r12 DISPLAY=BASE_CUSTOM STRINGS=&lpp_bdsAlmA0_r12_fmt",
          "1172: #.TYPE_ATTR",
          "1173: AlmanacBDS-AlmanacSet-r12/bdsAlmA1-r12 DISPLAY=BASE_CUSTOM STRINGS=&lpp_bdsAlmA1_r12_fmt",
          "1175: #.FN_BODY AlmanacBDS-AlmanacSet-r12/bdsSvHealth-r12 VAL_PTR = &bdsSvHealth_tvb",
          "1176:   tvbuff_t *bdsSvHealth_tvb = NULL;",
          "1177:   proto_tree *subtree;",
          "1178: %(DEFAULT_BODY)s",
          "1180: #.FN_FTR AlmanacBDS-AlmanacSet-r12/bdsSvHealth-r12",
          "1181:   if (bdsSvHealth_tvb) {",
          "1182:     guint16 bits;",
          "1183:     subtree = proto_item_add_subtree(actx->created_item, ett_lpp_bdsSvHealth_r12);",
          "1184:     bits = tvb_get_bits16(bdsSvHealth_tvb, 0, 9,ENC_BIG_ENDIAN);",
          "1185:     if (bits == 0x1ff) {",
          "1186:       proto_tree_add_boolean_bits_format_value(subtree, hf_lpp_bdsSvHealth_r12_sat_clock, bdsSvHealth_tvb, 0, 1, 1,",
          "1187:                                                \"Satellite is in failure or permanently shut off (1)\");",
          "1188:     } else if (bits == 0x100) {",
          "1189:       proto_tree_add_boolean_bits_format_value(subtree, hf_lpp_bdsSvHealth_r12_sat_clock, bdsSvHealth_tvb, 0, 1, 1,",
          "1190:                                                \"Satellite clock is unavailable (1)\");",
          "1191:     } else {",
          "1192:       proto_tree_add_bits_item(subtree, hf_lpp_bdsSvHealth_r12_sat_clock, bdsSvHealth_tvb, 0, 1, ENC_BIG_ENDIAN);",
          "1193:       proto_tree_add_bits_item(subtree, hf_lpp_bdsSvHealth_r12_b1i, bdsSvHealth_tvb, 1, 1, ENC_BIG_ENDIAN);",
          "1194:       proto_tree_add_bits_item(subtree, hf_lpp_bdsSvHealth_r12_b2i, bdsSvHealth_tvb, 2, 1, ENC_BIG_ENDIAN);",
          "1195:       proto_tree_add_bits_item(subtree, hf_lpp_bdsSvHealth_r12_nav, bdsSvHealth_tvb, 7, 1, ENC_BIG_ENDIAN);",
          "1196:     }",
          "1197:   }",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1107: #.TYPE_ATTR",
          "1108: UTC-ModelSet4/utcStandardID TYPE=FT_UINT8 DISPLAY=BASE_DEC STRINGS=VALS(lpp_utcStandardID_vals)",
          "1110: #.FN_FTR StoredNavListInfo/gnss-WeekOrDay",
          "1111:   proto_item_append_text(actx->created_item, \" (days for glonass, weeks otherwise)\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1301: #.TYPE_ATTR",
          "1302: UTC-ModelSet5-r12/utcA0-r12 DISPLAY=BASE_CUSTOM STRINGS=&lpp_gnss_Utc_A0_fmt",
          "1304: #.TYPE_ATTR",
          "1305: UTC-ModelSet5-r12/utcA1-r12 DISPLAY=BASE_CUSTOM STRINGS=&lpp_gnss_Utc_A1_fmt",
          "1307: #.FN_FTR UTC-ModelSet5-r12/utcDeltaTls-r12",
          "1308:   proto_item_append_text(actx->created_item, \" s\");",
          "1310: #.FN_FTR UTC-ModelSet5-r12/utcWNlsf-r12",
          "1311:   proto_item_append_text(actx->created_item, \" weeks\");",
          "1313: #.FN_FTR UTC-ModelSet5-r12/utcDN-r12",
          "1314:   proto_item_append_text(actx->created_item, \" days\");",
          "1316: #.FN_FTR UTC-ModelSet5-r12/utcDeltaTlsf-r12",
          "1317:   proto_item_append_text(actx->created_item, \" s\");",
          "1319: #.FN_FTR BDS-DifferentialCorrections-r12/dbds-RefTime-r12",
          "1320:   proto_item_append_text(actx->created_item, \" s\");",
          "1322: #.TYPE_ATTR",
          "1323: DBDS-CorrectionElement-r12/bds-UDREI-r12 TYPE=FT_UINT8 DISPLAY=BASE_DEC|BASE_EXT_STRING STRINGS=&lpp_bds_UDREI_vals_ext",
          "1325: #.TYPE_ATTR",
          "1326: DBDS-CorrectionElement-r12/bds-RURAI-r12 TYPE=FT_UINT8 DISPLAY=BASE_DEC|BASE_EXT_STRING STRINGS=&lpp_bds_RURAI_vals_ext",
          "1328: #.TYPE_ATTR",
          "1329: DBDS-CorrectionElement-r12/bds-ECC-DeltaT-r12 DISPLAY=BASE_CUSTOM STRINGS=&lpp_bds_ECC_DeltaT_r12_fmt",
          "1331: #.FN_FTR BDS-GridModelParameter-r12/bds-RefTime-r12",
          "1332:   proto_item_append_text(actx->created_item, \" s\");",
          "1334: #.TYPE_ATTR",
          "1335: GridIonElement-r12/dt-r12 DISPLAY=BASE_CUSTOM STRINGS=&lpp_bds_GridIonElement_dt_r12_fmt",
          "1337: #.TYPE_ATTR",
          "1338: GridIonElement-r12/givei-r12 TYPE=FT_UINT8 DISPLAY=BASE_DEC|BASE_EXT_STRING STRINGS=&lpp_bds_givei_vals_ext",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1202:     if (len >= 5) {",
          "1203:       proto_tree_add_item(subtree, hf_lpp_T_clockModel_model_5, clockModel_tvb, 0, 1, ENC_BIG_ENDIAN);",
          "1204:     }",
          "1205:   }",
          "1207: #.FN_BODY GNSS-NavigationModelSupport/orbitModel VAL_PTR = &orbitModel_tvb LEN_PTR = &len",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1435:     if (len >= 6) {",
          "1436:       proto_tree_add_item(subtree, hf_lpp_T_clockModel_model_6, clockModel_tvb, 0, 1, ENC_BIG_ENDIAN);",
          "1437:     }",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1228:     if (len >= 5) {",
          "1229:       proto_tree_add_item(subtree, hf_lpp_T_orbitModel_model_5, orbitModel_tvb, 0, 1, ENC_BIG_ENDIAN);",
          "1230:     }",
          "1231:   }",
          "1233: #.FN_BODY GNSS-AlmanacSupport/almanacModel VAL_PTR = &almanacModel_tvb LEN_PTR = &len",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1464:     if (len >= 6) {",
          "1465:       proto_tree_add_item(subtree, hf_lpp_T_orbitModel_model_6, orbitModel_tvb, 0, 1, ENC_BIG_ENDIAN);",
          "1466:     }",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1257:     if (len >= 6) {",
          "1258:       proto_tree_add_item(subtree, hf_lpp_T_almanacModel_model_6, almanacModel_tvb, 0, 1, ENC_BIG_ENDIAN);",
          "1259:     }",
          "1260:   }",
          "1262: #.FN_BODY GNSS-UTC-ModelSupport/utc-Model VAL_PTR = &utc_Model_tvb LEN_PTR = &len",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1496:     if (len >= 7) {",
          "1497:       proto_tree_add_item(subtree, hf_lpp_T_almanacModel_model_7, almanacModel_tvb, 0, 1, ENC_BIG_ENDIAN);",
          "1498:     }",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1280:     if (len >= 4) {",
          "1281:       proto_tree_add_item(subtree, hf_lpp_T_utc_Model_model_4, utc_Model_tvb, 0, 1, ENC_BIG_ENDIAN);",
          "1282:     }",
          "1283:   }",
          "1285: #.FN_BODY GNSS-ID-Bitmap/gnss-ids VAL_PTR = &gnss_ids_tvb LEN_PTR = &len",
          "1286:   tvbuff_t *gnss_ids_tvb = NULL;",
          "1287:   int len;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1522:     if (len >= 5) {",
          "1523:       proto_tree_add_item(subtree, hf_lpp_T_utc_Model_model_5, utc_Model_tvb, 0, 1, ENC_BIG_ENDIAN);",
          "1524:     }",
          "1527: #.FN_BODY GNSS-ID/gnss-id VAL_PTR = &gnss_id",
          "1528:   guint32 gnss_id;",
          "1529: %(DEFAULT_BODY)s",
          "1530:   actx->private_data = GUINT_TO_POINTER(gnss_id);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1306:     if (len >= 5) {",
          "1307:       proto_tree_add_item(subtree, hf_lpp_T_gnss_ids_glonass, gnss_ids_tvb, 0, 1, ENC_BIG_ENDIAN);",
          "1308:     }",
          "1309:   }",
          "1311: #.FN_BODY SBAS-IDs/sbas-IDs VAL_PTR = &sbas_IDs_tvb LEN_PTR = &len",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1556:     if (len >= 6) {",
          "1557:       proto_tree_add_item(subtree, hf_lpp_T_gnss_ids_bds, gnss_ids_tvb, 0, 1, ENC_BIG_ENDIAN);",
          "1558:     }",
          "",
          "---------------"
        ],
        "asn1/lpp/packet-lpp-template.c||asn1/lpp/packet-lpp-template.c": [
          "File: asn1/lpp/packet-lpp-template.c -> asn1/lpp/packet-lpp-template.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: #include <epan/packet.h>",
          "32: #include <epan/asn1.h>",
          "34: #include \"packet-per.h\"",
          "35: #include \"packet-lpp.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "33: #include <epan/tfs.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "45: static int proto_lpp = -1;",
          "47: #include \"packet-lpp-hf.c\"",
          "49: static dissector_handle_t lppe_handle = NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "49: static int hf_lpp_svHealthExt_v12xy_e5bhs = -1;",
          "50: static int hf_lpp_svHealthExt_v12xy_e1_bhs = -1;",
          "51: static int hf_lpp_kepSV_StatusINAV_e5bhs = -1;",
          "52: static int hf_lpp_kepSV_StatusINAV_e1_bhs = -1;",
          "53: static int hf_lpp_kepSV_StatusFNAV_e5ahs = -1;",
          "54: static int hf_lpp_bdsSvHealth_r12_sat_clock = -1;",
          "55: static int hf_lpp_bdsSvHealth_r12_b1i = -1;",
          "56: static int hf_lpp_bdsSvHealth_r12_b2i = -1;",
          "57: static int hf_lpp_bdsSvHealth_r12_nav = -1;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "54: static gint ett_lpp = -1;",
          "55: static gint ett_lpp_bitmap = -1;",
          "56: #include \"packet-lpp-ett.c\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "66: static gint ett_lpp_svHealthExt_v12xy = -1;",
          "67: static gint ett_kepSV_StatusINAV = -1;",
          "68: static gint ett_kepSV_StatusFNAV = -1;",
          "69: static gint ett_lpp_bdsSvHealth_r12 = -1;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "246: {",
          "247:   double drift = (double)((gint32)v)*pow(2, -30);",
          "250: }",
          "252: static const value_string lpp_dataID_vals[] = {",
          "253:   { 0, \"Parameters are applicable worldwide\"},",
          "254:   { 3, \"Parameters have been generated by QZSS\"},",
          "255:   { 0, NULL}",
          "256: };",
          "",
          "[Removed Lines]",
          "249:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e s/s (%d)\", drift, (gint32)v);",
          "",
          "[Added Lines]",
          "263:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g s/s (%d)\", drift, (gint32)v);",
          "268:   { 1, \"Parameters have been generated by BDS\"},",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "260: {",
          "261:   double alpha = (double)((gint32)v)*pow(2, -30);",
          "264: }",
          "266: static void",
          "",
          "[Removed Lines]",
          "263:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e s (%d)\", alpha, (gint32)v);",
          "",
          "[Added Lines]",
          "278:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g s (%d)\", alpha, (gint32)v);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "268: {",
          "269:   double alpha = (double)((gint32)v)*pow(2, -27);",
          "272: }",
          "274: static void",
          "",
          "[Removed Lines]",
          "271:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e s/semi-circle (%d)\", alpha, (gint32)v);",
          "",
          "[Added Lines]",
          "286:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g s/semi-circle (%d)\", alpha, (gint32)v);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "276: {",
          "277:   double alpha = (double)((gint32)v)*pow(2, -24);",
          "280: }",
          "282: static void",
          "",
          "[Removed Lines]",
          "279:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e s/semi-circle (%d)\", alpha, (gint32)v);",
          "",
          "[Added Lines]",
          "294:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g s/semi-circle (%d)\", alpha, (gint32)v);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "284: {",
          "285:   double beta = (double)((gint32)v)*pow(2, 11);",
          "288: }",
          "290: static void",
          "",
          "[Removed Lines]",
          "287:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e s (%d)\", beta, (gint32)v);",
          "",
          "[Added Lines]",
          "302:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g s (%d)\", beta, (gint32)v);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "292: {",
          "293:   double beta = (double)((gint32)v)*pow(2, 14);",
          "296: }",
          "298: static void",
          "",
          "[Removed Lines]",
          "295:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e s/semi-circle (%d)\", beta, (gint32)v);",
          "",
          "[Added Lines]",
          "310:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g s/semi-circle (%d)\", beta, (gint32)v);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "300: {",
          "301:   double beta = (double)((gint32)v)*pow(2, 16);",
          "304: }",
          "306: static void",
          "",
          "[Removed Lines]",
          "303:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e s/semi-circle (%d)\", beta, (gint32)v);",
          "",
          "[Added Lines]",
          "318:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g s/semi-circle (%d)\", beta, (gint32)v);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "308: {",
          "309:   double ai = (double)v*pow(2, -2);",
          "312: }",
          "314: static void",
          "",
          "[Removed Lines]",
          "311:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e sfu (%u)\", ai, v);",
          "",
          "[Added Lines]",
          "326:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g sfu (%u)\", ai, v);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "316: {",
          "317:   double ai = (double)v*pow(2, -8);",
          "320: }",
          "322: static void",
          "",
          "[Removed Lines]",
          "319:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e sfu/degree (%u)\", ai, v);",
          "",
          "[Added Lines]",
          "334:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g sfu/degree (%u)\", ai, v);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "324: {",
          "325:   double ai = (double)v*pow(2, -15);",
          "328: }",
          "330: static void",
          "",
          "[Removed Lines]",
          "327:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e sfu/degree (%u)\", ai, v);",
          "",
          "[Added Lines]",
          "342:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g sfu/degree2 (%u)\", ai, v);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "338: {",
          "339:   double pm = (double)((gint32)v)*pow(2, -20);",
          "342: }",
          "344: static void",
          "",
          "[Removed Lines]",
          "341:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e arc-seconds (%d)\", pm, (gint32)v);",
          "",
          "[Added Lines]",
          "356:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g arc-seconds (%d)\", pm, (gint32)v);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "346: {",
          "347:   double pmDot = (double)((gint32)v)*pow(2, -21);",
          "350: }",
          "352: static void",
          "",
          "[Removed Lines]",
          "349:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e arc-seconds/day (%d)\", pmDot, (gint32)v);",
          "",
          "[Added Lines]",
          "364:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g arc-seconds/day (%d)\", pmDot, (gint32)v);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "354: {",
          "355:   double deltaUT1 = (double)((gint32)v)*pow(2, -24);",
          "358: }",
          "360: static void",
          "",
          "[Removed Lines]",
          "357:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e s (%d)\", deltaUT1, (gint32)v);",
          "",
          "[Added Lines]",
          "372:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g s (%d)\", deltaUT1, (gint32)v);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "362: {",
          "363:   double deltaUT1dot = (double)((gint32)v)*pow(2, -25);",
          "366: }",
          "368: static void",
          "",
          "[Removed Lines]",
          "365:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e s/day (%d)\", deltaUT1dot, (gint32)v);",
          "",
          "[Added Lines]",
          "380:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g s/day (%d)\", deltaUT1dot, (gint32)v);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "376: {",
          "377:   double tA0 = (double)((gint32)v)*pow(2, -35);",
          "380: }",
          "382: static void",
          "",
          "[Removed Lines]",
          "379:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e s (%d)\", tA0, (gint32)v);",
          "",
          "[Added Lines]",
          "394:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g s (%d)\", tA0, (gint32)v);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "384: {",
          "385:   double tA1 = (double)((gint32)v)*pow(2, -51);",
          "388: }",
          "390: static void",
          "",
          "[Removed Lines]",
          "387:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e s/s (%d)\", tA1, (gint32)v);",
          "",
          "[Added Lines]",
          "402:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g s/s (%d)\", tA1, (gint32)v);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "392: {",
          "393:   double tA2 = (double)((gint32)v)*pow(2, -68);",
          "396: }",
          "398: static const value_string lpp_gnss_TO_ID_vals[] = {",
          "",
          "[Removed Lines]",
          "395:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e s/s2 (%d)\", tA2, (gint32)v);",
          "",
          "[Added Lines]",
          "410:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g s/s2 (%d)\", tA2, (gint32)v);",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "463:   { 0, NULL}",
          "464: };",
          "466: static void",
          "467: lpp_stanClockToc_fmt(gchar *s, guint32 v)",
          "468: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "481: static const value_string lpp_signal_health_status_vals[] = {",
          "482:   { 0, \"Signal OK\"},",
          "483:   { 1, \"Signal out of service\"},",
          "484:   { 2, \"Signal will be out of service\"},",
          "485:   { 3, \"Signal Component currently in Test\"},",
          "486:   { 0, NULL}",
          "487: };",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "472: static void",
          "473: lpp_stanClockAF2_fmt(gchar *s, guint32 v)",
          "474: {",
          "478: }",
          "480: static void",
          "481: lpp_stanClockAF1_fmt(gchar *s, guint32 v)",
          "482: {",
          "486: }",
          "488: static void",
          "489: lpp_stanClockAF0_fmt(gchar *s, guint32 v)",
          "490: {",
          "494: }",
          "496: static void",
          "",
          "[Removed Lines]",
          "475:   double stanClockAF2 = (double)((gint32)v)*pow(2, -65);",
          "477:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e s/s2 (%d)\", stanClockAF2, (gint32)v);",
          "483:   double stanClockAF1 = (double)((gint32)v)*pow(2, -45);",
          "485:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e s/s (%d)\", stanClockAF1, (gint32)v);",
          "491:   double stanClockAF0 = (double)((gint32)v)*pow(2, -33);",
          "493:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e s (%d)\", stanClockAF0, (gint32)v);",
          "",
          "[Added Lines]",
          "497:   double stanClockAF2 = (double)((gint32)v)*pow(2, -59);",
          "499:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g s/s2 (%d)\", stanClockAF2, (gint32)v);",
          "505:   double stanClockAF1 = (double)((gint32)v)*pow(2, -46);",
          "507:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g s/s (%d)\", stanClockAF1, (gint32)v);",
          "513:   double stanClockAF0 = (double)((gint32)v)*pow(2, -34);",
          "515:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g s (%d)\", stanClockAF0, (gint32)v);",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "498: {",
          "499:   double stanClockTgd = (double)((gint32)v)*pow(2, -32);",
          "502: }",
          "504: static const value_string lpp_stanModelID_vals[] = {",
          "",
          "[Removed Lines]",
          "501:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e s (%d)\", stanClockTgd, (gint32)v);",
          "",
          "[Added Lines]",
          "523:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g s (%d)\", stanClockTgd, (gint32)v);",
          "524: }",
          "526: static void",
          "527: lpp_sisa_fmt(gchar *s, guint32 v)",
          "528: {",
          "529:   if (v < 50) {",
          "530:     g_snprintf(s, ITEM_LABEL_LENGTH, \"%u cm (%u)\", v, v);",
          "531:   } else if (v < 75) {",
          "532:     g_snprintf(s, ITEM_LABEL_LENGTH, \"%u cm (%u)\", 50+((v-50)*2), v);",
          "533:   } else if (v < 100) {",
          "534:     g_snprintf(s, ITEM_LABEL_LENGTH, \"%u cm (%u)\", 100+((v-75)*4), v);",
          "535:   } else if (v < 126) {",
          "536:     g_snprintf(s, ITEM_LABEL_LENGTH, \"%u cm (%u)\", 200+((v-100)*16), v);",
          "537:   } else if (v < 255) {",
          "538:     g_snprintf(s, ITEM_LABEL_LENGTH, \"Spare (%u)\", v);",
          "539:   } else {",
          "540:     g_snprintf(s, ITEM_LABEL_LENGTH, \"No Accuracy Prediction Available (255)\");",
          "541:   }",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "518: {",
          "519:   double navaf2 = (double)((gint32)v)*pow(2, -55);",
          "522: }",
          "524: static void",
          "",
          "[Removed Lines]",
          "521:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e s/s2 (%d)\", navaf2, (gint32)v);",
          "",
          "[Added Lines]",
          "561:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g s/s2 (%d)\", navaf2, (gint32)v);",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "526: {",
          "527:   double navaf1 = (double)((gint32)v)*pow(2, -43);",
          "530: }",
          "532: static void",
          "",
          "[Removed Lines]",
          "529:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e s/s (%d)\", navaf1, (gint32)v);",
          "",
          "[Added Lines]",
          "569:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g s/s (%d)\", navaf1, (gint32)v);",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "534: {",
          "535:   double navaf0_navTgd = (double)((gint32)v)*pow(2, -31);",
          "538: }",
          "540: static void",
          "",
          "[Removed Lines]",
          "537:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e s/s (%d)\", navaf0_navTgd, (gint32)v);",
          "",
          "[Added Lines]",
          "577:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g s/s (%d)\", navaf0_navTgd, (gint32)v);",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "548: {",
          "549:   double cnavAf2 = (double)((gint32)v)*pow(2, -60);",
          "552: }",
          "554: static void",
          "",
          "[Removed Lines]",
          "551:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e s/s2 (%d)\", cnavAf2, (gint32)v);",
          "",
          "[Added Lines]",
          "591:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g s/s2 (%d)\", cnavAf2, (gint32)v);",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "556: {",
          "557:   double cnavAf1 = (double)((gint32)v)*pow(2, -48);",
          "560: }",
          "562: static void",
          "",
          "[Removed Lines]",
          "559:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e s/s (%d)\", cnavAf1, (gint32)v);",
          "",
          "[Added Lines]",
          "599:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g s/s (%d)\", cnavAf1, (gint32)v);",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "564: {",
          "565:   double cnavX = (double)((gint32)v)*pow(2, -35);",
          "568: }",
          "570: static void",
          "",
          "[Removed Lines]",
          "567:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e s (%d)\", cnavX, (gint32)v);",
          "",
          "[Added Lines]",
          "607:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g s (%d)\", cnavX, (gint32)v);",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "572: {",
          "573:   double gloTau_gloDeltaTau = (double)((gint32)v)*pow(2, -30);",
          "576: }",
          "578: static void",
          "",
          "[Removed Lines]",
          "575:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e s (%d)\", gloTau_gloDeltaTau, (gint32)v);",
          "",
          "[Added Lines]",
          "615:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g s (%d)\", gloTau_gloDeltaTau, (gint32)v);",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "580: {",
          "581:   double gloGamma = (double)((gint32)v)*pow(2, -40);",
          "584: }",
          "586: static void",
          "",
          "[Removed Lines]",
          "583:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e (%d)\", gloGamma, (gint32)v);",
          "",
          "[Added Lines]",
          "623:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g (%d)\", gloGamma, (gint32)v);",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "594: {",
          "595:   double sbasAgfo = (double)((gint32)v)*pow(2, -31);",
          "598: }",
          "600: static void",
          "",
          "[Removed Lines]",
          "597:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e s (%d)\", sbasAgfo, (gint32)v);",
          "",
          "[Added Lines]",
          "637:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g s (%d)\", sbasAgfo, (gint32)v);",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "602: {",
          "603:   double sbasAgf1 = (double)((gint32)v)*pow(2, -40);",
          "606: }",
          "608: static void",
          "",
          "[Removed Lines]",
          "605:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e s/s (%d)\", sbasAgf1, (gint32)v);",
          "",
          "[Added Lines]",
          "645:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g s/s (%d)\", sbasAgf1, (gint32)v);",
          "646: }",
          "648: static void",
          "649: lpp_bdsAODC_AODE_r12_fmt(gchar *s, guint32 v)",
          "650: {",
          "651:   if (v < 25) {",
          "652:     g_snprintf(s, ITEM_LABEL_LENGTH, \"Age of the satellite clock correction parameters is %u hours (%u)\", v, v);",
          "653:   } else if (v < 31) {",
          "654:     g_snprintf(s, ITEM_LABEL_LENGTH, \"Age of the satellite clock correction parameters is %u days (%u)\", v-23, v);",
          "655:   } else {",
          "656:     g_snprintf(s, ITEM_LABEL_LENGTH, \"Age of the satellite clock correction parameters is over 7 days (%u)\", v);",
          "657:   }",
          "658: }",
          "661: static void",
          "662: lpp_bdsToc_Toe_r12_fmt(gchar *s, guint32 v)",
          "663: {",
          "664:   double bdsToc = (double)((gint32)v)*pow(2, 3);",
          "666:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g s (%d)\", bdsToc, (gint32)v);",
          "667: }",
          "669: static void",
          "670: lpp_bdsA0_r12_fmt(gchar *s, guint32 v)",
          "671: {",
          "672:   double bdsA0 = (double)((gint32)v)*pow(2, -33);",
          "674:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g s (%d)\", bdsA0, (gint32)v);",
          "675: }",
          "677: static void",
          "678: lpp_bdsA1_r12_fmt(gchar *s, guint32 v)",
          "679: {",
          "680:   double bdsA1 = (double)((gint32)v)*pow(2, -50);",
          "682:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g s/s (%d)\", bdsA1, (gint32)v);",
          "683: }",
          "685: static void",
          "686: lpp_bdsA2_r12_fmt(gchar *s, guint32 v)",
          "687: {",
          "688:   double bdsA2 = (double)((gint32)v)*pow(2, -66);",
          "690:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g s/s2 (%d)\", bdsA2, (gint32)v);",
          "691: }",
          "693: static void",
          "694: lpp_bdsTgd1_r12_fmt(gchar *s, guint32 v)",
          "695: {",
          "696:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g ns (%d)\", (float)((gint32)v)*0.1, (gint32)v);",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "616: {",
          "617:   double keplerW_M0_I0_Omega0 = (double)((gint32)v)*pow(2, -31);",
          "620: }",
          "622: static void",
          "",
          "[Removed Lines]",
          "619:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e semi-circles (%d)\", keplerW_M0_I0_Omega0, (gint32)v);",
          "",
          "[Added Lines]",
          "710:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g semi-circles (%d)\", keplerW_M0_I0_Omega0, (gint32)v);",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "624: {",
          "625:   double keplerDeltaN_OmegaDot_IDot = (double)((gint32)v)*pow(2, -43);",
          "628: }",
          "630: static void",
          "",
          "[Removed Lines]",
          "627:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e semi-circles/s (%d)\", keplerDeltaN_OmegaDot_IDot, (gint32)v);",
          "",
          "[Added Lines]",
          "718:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g semi-circles/s (%d)\", keplerDeltaN_OmegaDot_IDot, (gint32)v);",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "632: {",
          "633:   double keplerE = (double)v*pow(2, -33);",
          "636: }",
          "638: static void",
          "",
          "[Removed Lines]",
          "635:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e (%u)\", keplerE, v);",
          "",
          "[Added Lines]",
          "726:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g (%u)\", keplerE, v);",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "640: {",
          "641:   double keplerAPowerHalf = (double)v*pow(2, -19);",
          "644: }",
          "646: static void",
          "",
          "[Removed Lines]",
          "643:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e m1/2 (%u)\", keplerAPowerHalf, v);",
          "",
          "[Added Lines]",
          "734:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g m1/2 (%u)\", keplerAPowerHalf, v);",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "648: {",
          "649:   double keplerCrs_Crc = (double)((gint32)v)*pow(2, -5);",
          "652: }",
          "654: static void",
          "",
          "[Removed Lines]",
          "651:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e m (%d)\", keplerCrs_Crc, (gint32)v);",
          "",
          "[Added Lines]",
          "742:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g m (%d)\", keplerCrs_Crc, (gint32)v);",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "656: {",
          "657:   double keplerCx = (double)((gint32)v)*pow(2, -29);",
          "660: }",
          "662: static void",
          "",
          "[Removed Lines]",
          "659:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e rad (%d)\", keplerCx, (gint32)v);",
          "",
          "[Added Lines]",
          "750:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g rad (%d)\", keplerCx, (gint32)v);",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "670: {",
          "671:   double navOmega_M0_I0_OmegaA0 = (double)((gint32)v)*pow(2, -31);",
          "674: }",
          "676: static void",
          "",
          "[Removed Lines]",
          "673:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e semi-circles (%d)\", navOmega_M0_I0_OmegaA0, (gint32)v);",
          "",
          "[Added Lines]",
          "764:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g semi-circles (%d)\", navOmega_M0_I0_OmegaA0, (gint32)v);",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "678: {",
          "679:   double navDeltaN_OmegaADot_IDot = (double)((gint32)v)*pow(2, -43);",
          "682: }",
          "684: static void",
          "",
          "[Removed Lines]",
          "681:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e semi-circles/s (%d)\", navDeltaN_OmegaADot_IDot, (gint32)v);",
          "",
          "[Added Lines]",
          "772:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g semi-circles/s (%d)\", navDeltaN_OmegaADot_IDot, (gint32)v);",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "686: {",
          "687:   double navE = (double)v*pow(2, -33);",
          "690: }",
          "692: static void",
          "",
          "[Removed Lines]",
          "689:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e (%u)\", navE, v);",
          "",
          "[Added Lines]",
          "780:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g (%u)\", navE, v);",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "694: {",
          "695:   double navAPowerHalf = (double)v*pow(2, -19);",
          "698: }",
          "700: static void",
          "",
          "[Removed Lines]",
          "697:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e m1/2 (%u)\", navAPowerHalf, v);",
          "",
          "[Added Lines]",
          "788:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g m1/2 (%u)\", navAPowerHalf, v);",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "702: {",
          "703:   double navCrs_Crc = (double)((gint32)v)*pow(2, -5);",
          "706: }",
          "708: static void",
          "",
          "[Removed Lines]",
          "705:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e m (%d)\", navCrs_Crc, (gint32)v);",
          "",
          "[Added Lines]",
          "796:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g m (%d)\", navCrs_Crc, (gint32)v);",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "710: {",
          "711:   double navCx = (double)((gint32)v)*pow(2, -29);",
          "714: }",
          "716: static void",
          "",
          "[Removed Lines]",
          "713:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e rad (%d)\", navCx, (gint32)v);",
          "",
          "[Added Lines]",
          "804:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g rad (%d)\", navCx, (gint32)v);",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "718: {",
          "719:   double cnavDeltaA = (double)((gint32)v)*pow(2, -9);",
          "722: }",
          "724: static void",
          "",
          "[Removed Lines]",
          "721:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e m (%d)\", cnavDeltaA, (gint32)v);",
          "",
          "[Added Lines]",
          "812:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g m (%d)\", cnavDeltaA, (gint32)v);",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "726: {",
          "727:   double cnavAdot = (double)((gint32)v)*pow(2, -21);",
          "730: }",
          "732: static void",
          "",
          "[Removed Lines]",
          "729:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e m/s (%d)\", cnavAdot, (gint32)v);",
          "",
          "[Added Lines]",
          "820:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g m/s (%d)\", cnavAdot, (gint32)v);",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "734: {",
          "735:   double cnavDeltaNo = (double)((gint32)v)*pow(2, -44);",
          "738: }",
          "740: static void",
          "",
          "[Removed Lines]",
          "737:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e semi-circles/s (%d)\", cnavDeltaNo, (gint32)v);",
          "",
          "[Added Lines]",
          "828:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g semi-circles/s (%d)\", cnavDeltaNo, (gint32)v);",
          "",
          "---------------",
          "--- Hunk 49 ---",
          "[Context before]",
          "742: {",
          "743:   double cnavDeltaNoDot = (double)((gint32)v)*pow(2, -57);",
          "746: }",
          "748: static void",
          "",
          "[Removed Lines]",
          "745:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e semi-circles/s2 (%d)\", cnavDeltaNoDot, (gint32)v);",
          "",
          "[Added Lines]",
          "836:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g semi-circles/s2 (%d)\", cnavDeltaNoDot, (gint32)v);",
          "",
          "---------------",
          "--- Hunk 50 ---",
          "[Context before]",
          "750: {",
          "751:   double cnavDeltaOmegaDot_IoDot = (double)((gint32)v)*pow(2, -44);",
          "754: }",
          "756: static void",
          "",
          "[Removed Lines]",
          "753:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e semi-circles/s (%d)\", cnavDeltaOmegaDot_IoDot, (gint32)v);",
          "",
          "[Added Lines]",
          "844:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g semi-circles/s (%d)\", cnavDeltaOmegaDot_IoDot, (gint32)v);",
          "",
          "---------------",
          "--- Hunk 51 ---",
          "[Context before]",
          "758: {",
          "759:   double cnavCx = (double)((gint32)v)*pow(2, -30);",
          "762: }",
          "764: static void",
          "",
          "[Removed Lines]",
          "761:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e rad (%d)\", cnavCx, (gint32)v);",
          "",
          "[Added Lines]",
          "852:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g rad (%d)\", cnavCx, (gint32)v);",
          "",
          "---------------",
          "--- Hunk 52 ---",
          "[Context before]",
          "766: {",
          "767:   double cnavCrs_Crc = (double)((gint32)v)*pow(2, -8);",
          "770: }",
          "772: static void",
          "",
          "[Removed Lines]",
          "769:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e m (%d)\", cnavCrs_Crc, (gint32)v);",
          "",
          "[Added Lines]",
          "860:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g m (%d)\", cnavCrs_Crc, (gint32)v);",
          "",
          "---------------",
          "--- Hunk 53 ---",
          "[Context before]",
          "774: {",
          "775:   double gloX_Y_Z = (double)((gint32)v)*pow(2, -11);",
          "778: }",
          "780: static void",
          "",
          "[Removed Lines]",
          "777:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e km (%d)\", gloX_Y_Z, (gint32)v);",
          "",
          "[Added Lines]",
          "868:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g km (%d)\", gloX_Y_Z, (gint32)v);",
          "",
          "---------------",
          "--- Hunk 54 ---",
          "[Context before]",
          "782: {",
          "783:   double gloXdot_Ydot_Zdot = (double)((gint32)v)*pow(2, -20);",
          "786: }",
          "788: static void",
          "",
          "[Removed Lines]",
          "785:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e km/s (%d)\", gloXdot_Ydot_Zdot, (gint32)v);",
          "",
          "[Added Lines]",
          "876:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g km/s (%d)\", gloXdot_Ydot_Zdot, (gint32)v);",
          "",
          "---------------",
          "--- Hunk 55 ---",
          "[Context before]",
          "790: {",
          "791:   double gloXdotdot_Ydotdot_Zdotdot = (double)((gint32)v)*pow(2, -30);",
          "794: }",
          "796: static void",
          "",
          "[Removed Lines]",
          "793:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e km/s2 (%d)\", gloXdotdot_Ydotdot_Zdotdot, (gint32)v);",
          "",
          "[Added Lines]",
          "884:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g km/s2 (%d)\", gloXdotdot_Ydotdot_Zdotdot, (gint32)v);",
          "",
          "---------------",
          "--- Hunk 56 ---",
          "[Context before]",
          "830: {",
          "831:   double sbasXgDotDot_YgDotDot = (double)((gint32)v)*0.0000125;",
          "834: }",
          "836: static void",
          "",
          "[Removed Lines]",
          "833:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e m/s2 (%d)\", sbasXgDotDot_YgDotDot, (gint32)v);",
          "",
          "[Added Lines]",
          "924:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g m/s2 (%d)\", sbasXgDotDot_YgDotDot, (gint32)v);",
          "",
          "---------------",
          "--- Hunk 57 ---",
          "[Context before]",
          "838: {",
          "839:   double sbasZgDotDot = (double)((gint32)v)*0.0000625;",
          "842: }",
          "844: static void",
          "",
          "[Removed Lines]",
          "841:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e m/s2 (%d)\", sbasZgDotDot, (gint32)v);",
          "",
          "[Added Lines]",
          "932:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g m/s2 (%d)\", sbasZgDotDot, (gint32)v);",
          "933: }",
          "935: static void",
          "936: lpp_bdsAPowerHalf_r12_fmt(gchar *s, guint32 v)",
          "937: {",
          "938:   double bdsAPowerHalf = (double)v*pow(2, -19);",
          "940:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g m1/2 (%u)\", bdsAPowerHalf, v);",
          "941: }",
          "943: static void",
          "944: lpp_bdsE_r12_fmt(gchar *s, guint32 v)",
          "945: {",
          "946:   double bdsE = (double)v*pow(2, -33);",
          "948:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g (%u)\", bdsE, v);",
          "949: }",
          "951: static void",
          "952: lpp_bdsW_M0_Omega0_I0_r12_fmt(gchar *s, guint32 v)",
          "953: {",
          "954:   double bdsW_M0_Omega0_I0 = (double)((gint32)v)*pow(2, -31);",
          "956:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g semi-circles (%d)\", bdsW_M0_Omega0_I0, (gint32)v);",
          "957: }",
          "959: static void",
          "960: lpp_bdsDeltaN_OmegaDot_IDot_r12_fmt(gchar *s, guint32 v)",
          "961: {",
          "962:   double bdsDeltaN_OmegaDot_IDot = (double)((gint32)v)*pow(2, -43);",
          "964:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g semi-circles/s (%d)\", bdsDeltaN_OmegaDot_IDot, (gint32)v);",
          "965: }",
          "967: static void",
          "968: lpp_bdsCuc_Cus_Cic_Cis_r12_fmt(gchar *s, guint32 v)",
          "969: {",
          "970:   double bdsCuc_Cus_Cic_Cis = (double)((gint32)v)*pow(2, -31);",
          "972:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g rad (%d)\", bdsCuc_Cus_Cic_Cis, (gint32)v);",
          "973: }",
          "975: static void",
          "976: lpp_bdsCrc_Crs_r12_fmt(gchar *s, guint32 v)",
          "977: {",
          "978:   double bdsCrc_Crs = (double)((gint32)v)*pow(2, -6);",
          "980:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g rad (%d)\", bdsCrc_Crs, (gint32)v);",
          "",
          "---------------",
          "--- Hunk 58 ---",
          "[Context before]",
          "871: {",
          "872:   double codePhase = (double)v*pow(2, -10);",
          "875: }",
          "877: static const value_string lpp_codePhaseSearchWindow_vals[] = {",
          "",
          "[Removed Lines]",
          "874:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e ms (%u)\", codePhase, v);",
          "",
          "[Added Lines]",
          "1013:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g ms (%u)\", codePhase, v);",
          "",
          "---------------",
          "--- Hunk 59 ---",
          "[Context before]",
          "917:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%f degrees (%u)\", (float)v*0.703125, v);",
          "918: }",
          "926: static void",
          "927: lpp_kepAlmanacE_fmt(gchar *s, guint32 v)",
          "928: {",
          "929:   double kepAlmanacE = (double)v*pow(2, -16);",
          "932: }",
          "934: static void",
          "",
          "[Removed Lines]",
          "920: static void",
          "921: lpp_toa_fmt(gchar *s, guint32 v)",
          "922: {",
          "923:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%u s (%u)\", 4096*v, v);",
          "924: }",
          "931:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e (%u)\", kepAlmanacE, v);",
          "",
          "[Added Lines]",
          "1064:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g (%u)\", kepAlmanacE, v);",
          "",
          "---------------",
          "--- Hunk 60 ---",
          "[Context before]",
          "936: {",
          "937:   double kepAlmanacDeltaI = (double)((gint32)v)*pow(2, -14);",
          "940: }",
          "942: static void",
          "",
          "[Removed Lines]",
          "939:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e semi-circles (%d)\", kepAlmanacDeltaI, (gint32)v);",
          "",
          "[Added Lines]",
          "1072:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g semi-circles (%d)\", kepAlmanacDeltaI, (gint32)v);",
          "",
          "---------------",
          "--- Hunk 61 ---",
          "[Context before]",
          "944: {",
          "945:   double kepAlmanacOmegaDot = (double)((gint32)v)*pow(2, -33);",
          "948: }",
          "950: static void",
          "",
          "[Removed Lines]",
          "947:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e semi-circles/s (%d)\", kepAlmanacOmegaDot, (gint32)v);",
          "",
          "[Added Lines]",
          "1080:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g semi-circles/s (%d)\", kepAlmanacOmegaDot, (gint32)v);",
          "",
          "---------------",
          "--- Hunk 62 ---",
          "[Context before]",
          "952: {",
          "953:   double kepAlmanacAPowerHalf = (double)((gint32)v)*pow(2, -9);",
          "956: }",
          "958: static void",
          "",
          "[Removed Lines]",
          "955:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e m1/2 (%d)\", kepAlmanacAPowerHalf, (gint32)v);",
          "",
          "[Added Lines]",
          "1088:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g m1/2 (%d)\", kepAlmanacAPowerHalf, (gint32)v);",
          "",
          "---------------",
          "--- Hunk 63 ---",
          "[Context before]",
          "960: {",
          "961:   double kepAlmanacOmega0_W_M0 = (double)((gint32)v)*pow(2, -15);",
          "964: }",
          "966: static void",
          "",
          "[Removed Lines]",
          "963:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e semi-circles (%d)\", kepAlmanacOmega0_W_M0, (gint32)v);",
          "",
          "[Added Lines]",
          "1096:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g semi-circles (%d)\", kepAlmanacOmega0_W_M0, (gint32)v);",
          "",
          "---------------",
          "--- Hunk 64 ---",
          "[Context before]",
          "968: {",
          "969:   double kepAlmanacAF0 = (double)((gint32)v)*pow(2, -19);",
          "972: }",
          "974: static void",
          "",
          "[Removed Lines]",
          "971:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e s (%d)\", kepAlmanacAF0, (gint32)v);",
          "",
          "[Added Lines]",
          "1104:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g s (%d)\", kepAlmanacAF0, (gint32)v);",
          "",
          "---------------",
          "--- Hunk 65 ---",
          "[Context before]",
          "976: {",
          "977:   double kepAlmanacAF1 = (double)((gint32)v)*pow(2, -38);",
          "980: }",
          "982: static void",
          "",
          "[Removed Lines]",
          "979:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e s/s (%d)\", kepAlmanacAF1, (gint32)v);",
          "",
          "[Added Lines]",
          "1112:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g s/s (%d)\", kepAlmanacAF1, (gint32)v);",
          "",
          "---------------",
          "--- Hunk 66 ---",
          "[Context before]",
          "984: {",
          "985:   double navAlmE = (double)v*pow(2, -21);",
          "988: }",
          "990: static void",
          "",
          "[Removed Lines]",
          "987:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e (%u)\", navAlmE, v);",
          "",
          "[Added Lines]",
          "1120:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g (%u)\", navAlmE, v);",
          "",
          "---------------",
          "--- Hunk 67 ---",
          "[Context before]",
          "992: {",
          "993:   double navAlmDeltaI = (double)((gint32)v)*pow(2, -19);",
          "996: }",
          "998: static void",
          "",
          "[Removed Lines]",
          "995:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e semi-circles (%d)\", navAlmDeltaI, (gint32)v);",
          "",
          "[Added Lines]",
          "1128:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g semi-circles (%d)\", navAlmDeltaI, (gint32)v);",
          "",
          "---------------",
          "--- Hunk 68 ---",
          "[Context before]",
          "1000: {",
          "1001:   double navAlmOMEGADOT = (double)((gint32)v)*pow(2, -38);",
          "1004: }",
          "1006: static void",
          "",
          "[Removed Lines]",
          "1003:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e semi-circles/s (%d)\", navAlmOMEGADOT, (gint32)v);",
          "",
          "[Added Lines]",
          "1136:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g semi-circles/s (%d)\", navAlmOMEGADOT, (gint32)v);",
          "",
          "---------------",
          "--- Hunk 69 ---",
          "[Context before]",
          "1008: {",
          "1009:   double navAlmSqrtA = (double)v*pow(2, -11);",
          "1012: }",
          "1014: static void",
          "",
          "[Removed Lines]",
          "1011:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e m1/2 (%u)\", navAlmSqrtA, v);",
          "",
          "[Added Lines]",
          "1144:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g m1/2 (%u)\", navAlmSqrtA, v);",
          "",
          "---------------",
          "--- Hunk 70 ---",
          "[Context before]",
          "1016: {",
          "1017:   double navAlmOMEGAo_Omega_Mo = (double)((gint32)v)*pow(2, -23);",
          "1020: }",
          "1022: static void",
          "",
          "[Removed Lines]",
          "1019:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e semi-circles (%d)\", navAlmOMEGAo_Omega_Mo, (gint32)v);",
          "",
          "[Added Lines]",
          "1152:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g semi-circles (%d)\", navAlmOMEGAo_Omega_Mo, (gint32)v);",
          "",
          "---------------",
          "--- Hunk 71 ---",
          "[Context before]",
          "1024: {",
          "1025:   double navAlmaf0 = (double)((gint32)v)*pow(2, -20);",
          "1028: }",
          "1030: static void",
          "",
          "[Removed Lines]",
          "1027:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e s (%d)\", navAlmaf0, (gint32)v);",
          "",
          "[Added Lines]",
          "1160:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g s (%d)\", navAlmaf0, (gint32)v);",
          "",
          "---------------",
          "--- Hunk 72 ---",
          "[Context before]",
          "1032: {",
          "1033:   double navAlmaf1 = (double)((gint32)v)*pow(2, -38);",
          "1036: }",
          "1038: static void",
          "",
          "[Removed Lines]",
          "1035:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e s/s (%d)\", navAlmaf1, (gint32)v);",
          "",
          "[Added Lines]",
          "1168:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g s/s (%d)\", navAlmaf1, (gint32)v);",
          "",
          "---------------",
          "--- Hunk 73 ---",
          "[Context before]",
          "1046: {",
          "1047:   double redAlmOmega0_Phi0 = (double)((gint32)v)*pow(2, -6);",
          "1050: }",
          "1052: static void",
          "",
          "[Removed Lines]",
          "1049:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e semi-circles (%d)\", redAlmOmega0_Phi0, (gint32)v);",
          "",
          "[Added Lines]",
          "1182:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g semi-circles (%d)\", redAlmOmega0_Phi0, (gint32)v);",
          "",
          "---------------",
          "--- Hunk 74 ---",
          "[Context before]",
          "1054: {",
          "1055:   double midiAlmE = (double)v*pow(2, -16);",
          "1058: }",
          "1060: static void",
          "",
          "[Removed Lines]",
          "1057:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e (%u)\", midiAlmE, v);",
          "",
          "[Added Lines]",
          "1190:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g (%u)\", midiAlmE, v);",
          "",
          "---------------",
          "--- Hunk 75 ---",
          "[Context before]",
          "1062: {",
          "1063:   double midiAlmDeltaI = (double)((gint32)v)*pow(2, -14);",
          "1066: }",
          "1068: static void",
          "",
          "[Removed Lines]",
          "1065:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e semi-circles (%d)\", midiAlmDeltaI, (gint32)v);",
          "",
          "[Added Lines]",
          "1198:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g semi-circles (%d)\", midiAlmDeltaI, (gint32)v);",
          "",
          "---------------",
          "--- Hunk 76 ---",
          "[Context before]",
          "1070: {",
          "1071:   double midiAlmOmegaDot = (double)((gint32)v)*pow(2, -33);",
          "1074: }",
          "1076: static void",
          "",
          "[Removed Lines]",
          "1073:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e semi-circles/s (%d)\", midiAlmOmegaDot, (gint32)v);",
          "",
          "[Added Lines]",
          "1206:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g semi-circles/s (%d)\", midiAlmOmegaDot, (gint32)v);",
          "",
          "---------------",
          "--- Hunk 77 ---",
          "[Context before]",
          "1084: {",
          "1085:   double midiAlmOmega0_Omega_Mo = (double)((gint32)v)*pow(2, -15);",
          "1088: }",
          "1090: static void",
          "",
          "[Removed Lines]",
          "1087:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e semi-circles (%d)\", midiAlmOmega0_Omega_Mo, (gint32)v);",
          "",
          "[Added Lines]",
          "1220:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g semi-circles (%d)\", midiAlmOmega0_Omega_Mo, (gint32)v);",
          "",
          "---------------",
          "--- Hunk 78 ---",
          "[Context before]",
          "1092: {",
          "1093:   double midiAlmaf0 = (double)((gint32)v)*pow(2, -20);",
          "1096: }",
          "1098: static void",
          "",
          "[Removed Lines]",
          "1095:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e s (%d)\", midiAlmaf0, (gint32)v);",
          "",
          "[Added Lines]",
          "1228:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g s (%d)\", midiAlmaf0, (gint32)v);",
          "",
          "---------------",
          "--- Hunk 79 ---",
          "[Context before]",
          "1100: {",
          "1101:   double midiAlmaf1 = (double)((gint32)v)*pow(2, -37);",
          "1104: }",
          "1106: static void",
          "",
          "[Removed Lines]",
          "1103:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e s/s (%d)\", midiAlmaf1, (gint32)v);",
          "",
          "[Added Lines]",
          "1236:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g s/s (%d)\", midiAlmaf1, (gint32)v);",
          "",
          "---------------",
          "--- Hunk 80 ---",
          "[Context before]",
          "1108: {",
          "1109:   double gloAlmLambdaA_DeltaIa = (double)((gint32)v)*pow(2, -20);",
          "1112: }",
          "1114: static void",
          "",
          "[Removed Lines]",
          "1111:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e semi-circles (%d)\", gloAlmLambdaA_DeltaIa, (gint32)v);",
          "",
          "[Added Lines]",
          "1244:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g semi-circles (%d)\", gloAlmLambdaA_DeltaIa, (gint32)v);",
          "",
          "---------------",
          "--- Hunk 81 ---",
          "[Context before]",
          "1122: {",
          "1123:   double gloAlmDeltaTA = (double)((gint32)v)*pow(2, -9);",
          "1126: }",
          "1128: static void",
          "",
          "[Removed Lines]",
          "1125:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e s/orbit period (%d)\", gloAlmDeltaTA, (gint32)v);",
          "",
          "[Added Lines]",
          "1258:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g s/orbit period (%d)\", gloAlmDeltaTA, (gint32)v);",
          "",
          "---------------",
          "--- Hunk 82 ---",
          "[Context before]",
          "1130: {",
          "1131:   double gloAlmDeltaTdotA = (double)((gint32)v)*pow(2, -14);",
          "1134: }",
          "1136: static void",
          "",
          "[Removed Lines]",
          "1133:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e s/orbit period (%d)\", gloAlmDeltaTdotA, (gint32)v);",
          "",
          "[Added Lines]",
          "1266:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g s/orbit period (%d)\", gloAlmDeltaTdotA, (gint32)v);",
          "",
          "---------------",
          "--- Hunk 83 ---",
          "[Context before]",
          "1138: {",
          "1139:   double gloAlmEpsilonA = (double)v*pow(2, -20);",
          "1142: }",
          "1144: static void",
          "",
          "[Removed Lines]",
          "1141:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e (%u)\", gloAlmEpsilonA, (gint32)v);",
          "",
          "[Added Lines]",
          "1274:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g (%u)\", gloAlmEpsilonA, (gint32)v);",
          "",
          "---------------",
          "--- Hunk 84 ---",
          "[Context before]",
          "1146: {",
          "1147:   double gloAlmOmegaA = (double)((gint32)v)*pow(2, -15);",
          "1150: }",
          "1152: static void",
          "",
          "[Removed Lines]",
          "1149:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e semi-circles (%d)\", gloAlmOmegaA, (gint32)v);",
          "",
          "[Added Lines]",
          "1282:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g semi-circles (%d)\", gloAlmOmegaA, (gint32)v);",
          "",
          "---------------",
          "--- Hunk 85 ---",
          "[Context before]",
          "1154: {",
          "1155:   double gloAlmTauA = (double)((gint32)v)*pow(2, -18);",
          "1158: }",
          "1160: static void",
          "",
          "[Removed Lines]",
          "1157:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e s (%d)\", gloAlmTauA, (gint32)v);",
          "",
          "[Added Lines]",
          "1290:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g s (%d)\", gloAlmTauA, (gint32)v);",
          "",
          "---------------",
          "--- Hunk 86 ---",
          "[Context before]",
          "1187:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%u m/s (%u)\", v*64, v);",
          "1188: }",
          "1190: static void",
          "1191: lpp_gnss_Utc_A1_fmt(gchar *s, guint32 v)",
          "1192: {",
          "1193:   double gnss_Utc_A1 = (double)((gint32)v)*pow(2, -50);",
          "1196: }",
          "1198: static void",
          "",
          "[Removed Lines]",
          "1195:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e s/s (%d)\", gnss_Utc_A1, (gint32)v);",
          "",
          "[Added Lines]",
          "1323: static void",
          "1324: lpp_bdsAlmToa_r12_fmt(gchar *s, guint32 v)",
          "1325: {",
          "1326:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%u s (%u)\", v*4096, v);",
          "1327: }",
          "1329: static void",
          "1330: lpp_bdsAlmSqrtA_r12_fmt(gchar *s, guint32 v)",
          "1331: {",
          "1332:   double bdsAlmSqrtA = (double)v*pow(2, -11);",
          "1334:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g m1/2 (%u)\", bdsAlmSqrtA, v);",
          "1335: }",
          "1337: static void",
          "1338: lpp_bdsAlmE_r12_fmt(gchar *s, guint32 v)",
          "1339: {",
          "1340:   double bdsAlmE = (double)v*pow(2, -21);",
          "1342:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g m1/2 (%u)\", bdsAlmE, v);",
          "1343: }",
          "1345: static void",
          "1346: lpp_bdsAlmW_M0_Omega0_r12_fmt(gchar *s, guint32 v)",
          "1347: {",
          "1348:   double bdsAlmW_M0_Omega0 = (double)((gint32)v)*pow(2, -23);",
          "1350:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g semi-circles (%d)\", bdsAlmW_M0_Omega0, (gint32)v);",
          "1351: }",
          "1353: static void",
          "1354: lpp_bdsAlmOmegaDot_r12_fmt(gchar *s, guint32 v)",
          "1355: {",
          "1356:   double bdsAlmOmegaDot = (double)((gint32)v)*pow(2, -38);",
          "1358:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g semi-circles/s (%d)\", bdsAlmOmegaDot, (gint32)v);",
          "1359: }",
          "1361: static void",
          "1362: lpp_bdsAlmDeltaI_r12_fmt(gchar *s, guint32 v)",
          "1363: {",
          "1364:   double bdsAlmDeltaI = (double)((gint32)v)*pow(2, -19);",
          "1366:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g semi-circles (%d)\", bdsAlmDeltaI, (gint32)v);",
          "1367: }",
          "1369: static void",
          "1370: lpp_bdsAlmA0_r12_fmt(gchar *s, guint32 v)",
          "1371: {",
          "1372:   double bdsAlmA0 = (double)((gint32)v)*pow(2, -20);",
          "1374:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g s (%d)\", bdsAlmA0, (gint32)v);",
          "1375: }",
          "1377: static void",
          "1378: lpp_bdsAlmA1_r12_fmt(gchar *s, guint32 v)",
          "1379: {",
          "1380:   double bdsAlmA1 = (double)((gint32)v)*pow(2, -38);",
          "1382:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g s/s (%d)\", bdsAlmA1, (gint32)v);",
          "1383: }",
          "1385: static const true_false_string lpp_bdsSvHealth_r12_b1i_b2i_value = {",
          "1386:   \"OK\",",
          "1387:   \"Weak\"",
          "1388: };",
          "1390: static const true_false_string lpp_bdsSvHealth_r12_nav_value = {",
          "1391:   \"OK\",",
          "1392:   \"Bad (IOD over limit)\"",
          "1393: };",
          "1400:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g s/s (%d)\", gnss_Utc_A1, (gint32)v);",
          "",
          "---------------",
          "--- Hunk 87 ---",
          "[Context before]",
          "1200: {",
          "1201:   double gnss_Utc_A0 = (double)((gint32)v)*pow(2, -30);",
          "1204: }",
          "1206: static void",
          "",
          "[Removed Lines]",
          "1203:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e s (%d)\", gnss_Utc_A0, (gint32)v);",
          "",
          "[Added Lines]",
          "1408:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g s (%d)\", gnss_Utc_A0, (gint32)v);",
          "",
          "---------------",
          "--- Hunk 88 ---",
          "[Context before]",
          "1209:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%u s (%u)\", v*4096, v);",
          "1210: }",
          "1212: static void",
          "1213: lpp_tauC_fmt(gchar *s, guint32 v)",
          "1214: {",
          "1215:   double tauC = (double)((gint32)v)*pow(2, -31);",
          "1218: }",
          "1220: static void",
          "",
          "[Removed Lines]",
          "1217:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e s (%d)\", tauC, (gint32)v);",
          "",
          "[Added Lines]",
          "1417: static const value_string lpp_bds_UDREI_vals[] = {",
          "1418:   {  0, \"1 meter\"},",
          "1419:   {  1, \"1.5 meters\"},",
          "1420:   {  2, \"2 meters\"},",
          "1421:   {  3, \"3 meters\"},",
          "1422:   {  4, \"4 meters\"},",
          "1423:   {  5, \"5 meters\"},",
          "1424:   {  6, \"6 meters\"},",
          "1425:   {  7, \"8 meters\"},",
          "1426:   {  8, \"10 meters\"},",
          "1427:   {  9, \"15 meters\"},",
          "1428:   { 10, \"20 meters\"},",
          "1429:   { 11, \"50 meters\"},",
          "1430:   { 12, \"100 meters\"},",
          "1431:   { 13, \"150 meters\"},",
          "1432:   { 14, \"Not monitored\"},",
          "1433:   { 15, \"Not available\"},",
          "1434:   { 0, NULL}",
          "1435: };",
          "1436: static value_string_ext lpp_bds_UDREI_vals_ext = VALUE_STRING_EXT_INIT(lpp_bds_UDREI_vals);",
          "1438: static const value_string lpp_bds_RURAI_vals[] = {",
          "1439:   {  0, \"0.75 meter\"},",
          "1440:   {  1, \"1 meter\"},",
          "1441:   {  2, \"1.25 meters\"},",
          "1442:   {  3, \"1.75 meters\"},",
          "1443:   {  4, \"2.25 meters\"},",
          "1444:   {  5, \"3 meters\"},",
          "1445:   {  6, \"3.75 meters\"},",
          "1446:   {  7, \"4.5 meters\"},",
          "1447:   {  8, \"5.25 meters\"},",
          "1448:   {  9, \"6 meters\"},",
          "1449:   { 10, \"7.5 meters\"},",
          "1450:   { 11, \"15 meters\"},",
          "1451:   { 12, \"50 meters\"},",
          "1452:   { 13, \"150 meters\"},",
          "1453:   { 14, \"300 meters\"},",
          "1454:   { 15, \"> 300 meters\"},",
          "1455:   { 0, NULL}",
          "1456: };",
          "1457: static value_string_ext lpp_bds_RURAI_vals_ext = VALUE_STRING_EXT_INIT(lpp_bds_RURAI_vals);",
          "1459: static void",
          "1460: lpp_bds_ECC_DeltaT_r12_fmt(gchar *s, guint32 v)",
          "1461: {",
          "1462:   if ((gint32)v == -4096) {",
          "1463:     g_snprintf(s, ITEM_LABEL_LENGTH, \"Not available (%d)\", (gint32)v);",
          "1464:   } else {",
          "1465:     g_snprintf(s, ITEM_LABEL_LENGTH, \"%g m (%d)\", (float)((gint32)v)*0.1, (gint32)v);",
          "1466:   }",
          "1467: }",
          "1469: static void",
          "1470: lpp_bds_GridIonElement_dt_r12_fmt(gchar *s, guint32 v)",
          "1471: {",
          "1472:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g m (%d)\", (float)((gint32)v)*0.125, (gint32)v);",
          "1473: }",
          "1475: static const value_string lpp_bds_givei_vals[] = {",
          "1476:   {  0, \"0.3 meter\"},",
          "1477:   {  1, \"0.6 meter\"},",
          "1478:   {  2, \"0.9 meter\"},",
          "1479:   {  3, \"1.2 meters\"},",
          "1480:   {  4, \"1.5 meters\"},",
          "1481:   {  5, \"1.8 meters\"},",
          "1482:   {  6, \"2.1 meters\"},",
          "1483:   {  7, \"2.4 meters\"},",
          "1484:   {  8, \"2.7 meters\"},",
          "1485:   {  9, \"3 meters\"},",
          "1486:   { 10, \"3.6 meters\"},",
          "1487:   { 11, \"4.5 meters\"},",
          "1488:   { 12, \"6 meters\"},",
          "1489:   { 13, \"9 meters\"},",
          "1490:   { 14, \"15 meters\"},",
          "1491:   { 15, \"45 meters\"},",
          "1492:   { 0, NULL}",
          "1493: };",
          "1494: static value_string_ext lpp_bds_givei_vals_ext = VALUE_STRING_EXT_INIT(lpp_bds_givei_vals);",
          "1501:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g s (%d)\", tauC, (gint32)v);",
          "",
          "---------------",
          "--- Hunk 89 ---",
          "[Context before]",
          "1222: {",
          "1223:   double b1 = (double)((gint32)v)*pow(2, -10);",
          "1226: }",
          "1228: static void",
          "",
          "[Removed Lines]",
          "1225:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e s (%d)\", b1, (gint32)v);",
          "",
          "[Added Lines]",
          "1509:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g s (%d)\", b1, (gint32)v);",
          "",
          "---------------",
          "--- Hunk 90 ---",
          "[Context before]",
          "1230: {",
          "1231:   double b2 = (double)((gint32)v)*pow(2, -16);",
          "1234: }",
          "1236: static const value_string lpp_utcStandardID_vals[] = {",
          "",
          "[Removed Lines]",
          "1233:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e s/msd (%d)\", b2, (gint32)v);",
          "",
          "[Added Lines]",
          "1517:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g s/msd (%d)\", b2, (gint32)v);",
          "",
          "---------------",
          "--- Hunk 91 ---",
          "[Context before]",
          "1275: {",
          "1276:   double codePhase = (double)v*pow(2, -21);",
          "1279: }",
          "1281: static void",
          "",
          "[Removed Lines]",
          "1278:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e ms (%u)\", codePhase, v);",
          "",
          "[Added Lines]",
          "1562:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g ms (%u)\", codePhase, v);",
          "",
          "---------------",
          "--- Hunk 92 ---",
          "[Context before]",
          "1299: static void",
          "1300: lpp_doppler_fmt(gchar *s, guint32 v)",
          "1301: {",
          "1303: }",
          "1305: static void",
          "",
          "[Removed Lines]",
          "1302:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e m/s (%d)\", (gint32)v*0.04, (gint32)v);",
          "",
          "[Added Lines]",
          "1586:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g m/s (%d)\", (gint32)v*0.04, (gint32)v);",
          "",
          "---------------",
          "--- Hunk 93 ---",
          "[Context before]",
          "1307: {",
          "1308:   double adr = (double)v*pow(2, -10);",
          "1311: }",
          "1313: static void",
          "",
          "[Removed Lines]",
          "1310:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e m (%u)\", adr, v);",
          "",
          "[Added Lines]",
          "1594:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g m (%u)\", adr, v);",
          "",
          "---------------",
          "--- Hunk 94 ---",
          "[Context before]",
          "1362:   static hf_register_info hf[] = {",
          "1364: #include \"packet-lpp-hfarr.c\"",
          "1365:   };",
          "1368:   static gint *ett[] = {",
          "1369:     &ett_lpp,",
          "1370:     &ett_lpp_bitmap,",
          "1371: #include \"packet-lpp-ettarr.c\"",
          "1372:   };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1649:     { &hf_lpp_svHealthExt_v12xy_e5bhs,",
          "1650:       { \"E5b Signal Health Status\", \"lpp.svHealthExt_v12xy.e5bhs\",",
          "1651:         FT_UINT8, BASE_DEC, VALS(lpp_signal_health_status_vals), 0,",
          "1652:         NULL, HFILL }},",
          "1653:     { &hf_lpp_svHealthExt_v12xy_e1_bhs,",
          "1654:       { \"E1-B Signal Health Status\", \"lpp.svHealthExt_v12xy.e1_bhs\",",
          "1655:         FT_UINT8, BASE_DEC, VALS(lpp_signal_health_status_vals), 0,",
          "1656:         NULL, HFILL }},",
          "1657:     { &hf_lpp_kepSV_StatusINAV_e5bhs,",
          "1658:       { \"E5b Signal Health Status\", \"lpp.kepSV_StatusINAV.e5bhs\",",
          "1659:         FT_UINT8, BASE_DEC, VALS(lpp_signal_health_status_vals), 0,",
          "1660:         NULL, HFILL }},",
          "1661:     { &hf_lpp_kepSV_StatusINAV_e1_bhs,",
          "1662:       { \"E1-B Signal Health Status\", \"lpp.kepSV_StatusINAV.e1_bhs\",",
          "1663:         FT_UINT8, BASE_DEC, VALS(lpp_signal_health_status_vals), 0,",
          "1664:         NULL, HFILL }},",
          "1665:     { &hf_lpp_kepSV_StatusFNAV_e5ahs,",
          "1666:       { \"E5a Signal Health Status\", \"lpp.kepSV_StatusFNAV.e5ahs\",",
          "1667:         FT_UINT8, BASE_DEC, VALS(lpp_signal_health_status_vals), 0,",
          "1668:         NULL, HFILL }},",
          "1669:     { &hf_lpp_bdsSvHealth_r12_sat_clock,",
          "1670:       { \"Satellite Clock\", \"lpp.bdsSvHealth_r12.sat_clock\",",
          "1671:         FT_BOOLEAN, BASE_NONE, TFS(&tfs_ok_error), 0,",
          "1672:         NULL, HFILL }},",
          "1673:     { &hf_lpp_bdsSvHealth_r12_b1i,",
          "1674:       { \"B1I Signal\", \"lpp.bdsSvHealth_r12.b1i\",",
          "1675:         FT_BOOLEAN, BASE_NONE, TFS(&lpp_bdsSvHealth_r12_b1i_b2i_value), 0,",
          "1676:         NULL, HFILL }},",
          "1677:     { &hf_lpp_bdsSvHealth_r12_b2i,",
          "1678:       { \"B2I Signal\", \"lpp.bdsSvHealth_r12.b2i\",",
          "1679:         FT_BOOLEAN, BASE_NONE, TFS(&lpp_bdsSvHealth_r12_b1i_b2i_value), 0,",
          "1680:         NULL, HFILL }},",
          "1681:     { &hf_lpp_bdsSvHealth_r12_nav,",
          "1682:       { \"NAV Message\", \"lpp.bdsSvHealth_r12.nav\",",
          "1683:         FT_BOOLEAN, BASE_NONE, TFS(&lpp_bdsSvHealth_r12_nav_value), 0,",
          "1684:         NULL, HFILL }}",
          "1691:     &ett_lpp_svHealthExt_v12xy,",
          "1692:     &ett_kepSV_StatusINAV,",
          "1693:     &ett_kepSV_StatusFNAV,",
          "1694:     &ett_lpp_bdsSvHealth_r12,",
          "",
          "---------------"
        ],
        "asn1/lpp/packet-lpp-template.h||asn1/lpp/packet-lpp-template.h": [
          "File: asn1/lpp/packet-lpp-template.h -> asn1/lpp/packet-lpp-template.h"
        ],
        "epan/dissectors/packet-lpp.c||epan/dissectors/packet-lpp.c": [
          "File: epan/dissectors/packet-lpp.c -> epan/dissectors/packet-lpp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "39: #include <epan/packet.h>",
          "40: #include <epan/asn1.h>",
          "42: #include \"packet-per.h\"",
          "43: #include \"packet-lpp.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "41: #include <epan/tfs.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "875: static int hf_lpp_T_clockModel_model_3 = -1;",
          "876: static int hf_lpp_T_clockModel_model_4 = -1;",
          "877: static int hf_lpp_T_clockModel_model_5 = -1;",
          "878: static int hf_lpp_T_orbitModel_model_1 = -1;",
          "879: static int hf_lpp_T_orbitModel_model_2 = -1;",
          "880: static int hf_lpp_T_orbitModel_model_3 = -1;",
          "881: static int hf_lpp_T_orbitModel_model_4 = -1;",
          "882: static int hf_lpp_T_orbitModel_model_5 = -1;",
          "883: static int hf_lpp_T_almanacModel_model_1 = -1;",
          "884: static int hf_lpp_T_almanacModel_model_2 = -1;",
          "885: static int hf_lpp_T_almanacModel_model_3 = -1;",
          "886: static int hf_lpp_T_almanacModel_model_4 = -1;",
          "887: static int hf_lpp_T_almanacModel_model_5 = -1;",
          "888: static int hf_lpp_T_almanacModel_model_6 = -1;",
          "889: static int hf_lpp_T_utc_Model_model_1 = -1;",
          "890: static int hf_lpp_T_utc_Model_model_2 = -1;",
          "891: static int hf_lpp_T_utc_Model_model_3 = -1;",
          "892: static int hf_lpp_T_utc_Model_model_4 = -1;",
          "893: static int hf_lpp_T_gnss_ids_gps = -1;",
          "894: static int hf_lpp_T_gnss_ids_sbas = -1;",
          "895: static int hf_lpp_T_gnss_ids_qzss = -1;",
          "896: static int hf_lpp_T_gnss_ids_galileo = -1;",
          "897: static int hf_lpp_T_gnss_ids_glonass = -1;",
          "898: static int hf_lpp_T_sbas_IDs_waas = -1;",
          "899: static int hf_lpp_T_sbas_IDs_egnos = -1;",
          "900: static int hf_lpp_T_sbas_IDs_msas = -1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "951: static int hf_lpp_T_clockModel_model_6 = -1;",
          "957: static int hf_lpp_T_orbitModel_model_6 = -1;",
          "964: static int hf_lpp_T_almanacModel_model_7 = -1;",
          "969: static int hf_lpp_T_utc_Model_model_5 = -1;",
          "975: static int hf_lpp_T_gnss_ids_bds = -1;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "913: static dissector_handle_t lppe_handle = NULL;",
          "",
          "[Removed Lines]",
          "911: #line 48 \"../../asn1/lpp/packet-lpp-template.c\"",
          "",
          "[Added Lines]",
          "989: #line 49 \"../../asn1/lpp/packet-lpp-template.c\"",
          "990: static int hf_lpp_svHealthExt_v12xy_e5bhs = -1;",
          "991: static int hf_lpp_svHealthExt_v12xy_e1_bhs = -1;",
          "992: static int hf_lpp_kepSV_StatusINAV_e5bhs = -1;",
          "993: static int hf_lpp_kepSV_StatusINAV_e1_bhs = -1;",
          "994: static int hf_lpp_kepSV_StatusFNAV_e5ahs = -1;",
          "995: static int hf_lpp_bdsSvHealth_r12_sat_clock = -1;",
          "996: static int hf_lpp_bdsSvHealth_r12_b1i = -1;",
          "997: static int hf_lpp_bdsSvHealth_r12_b2i = -1;",
          "998: static int hf_lpp_bdsSvHealth_r12_nav = -1;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "918: static gint ett_lpp = -1;",
          "919: static gint ett_lpp_bitmap = -1;",
          "922: #line 1 \"../../asn1/lpp/packet-lpp-ett.c\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1007: static gint ett_lpp_svHealthExt_v12xy = -1;",
          "1008: static gint ett_kepSV_StatusINAV = -1;",
          "1009: static gint ett_kepSV_StatusFNAV = -1;",
          "1010: static gint ett_lpp_bdsSvHealth_r12 = -1;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1079: static gint ett_lpp_CNAV_ClockModel = -1;",
          "1080: static gint ett_lpp_GLONASS_ClockModel = -1;",
          "1081: static gint ett_lpp_SBAS_ClockModel = -1;",
          "1082: static gint ett_lpp_NavModelKeplerianSet = -1;",
          "1083: static gint ett_lpp_NavModelNAV_KeplerianSet = -1;",
          "1084: static gint ett_lpp_T_addNAVparam = -1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1173: static gint ett_lpp_BDS_ClockModel_r12 = -1;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1086: static gint ett_lpp_NavModelCNAV_KeplerianSet = -1;",
          "1087: static gint ett_lpp_NavModel_GLONASS_ECEF = -1;",
          "1088: static gint ett_lpp_NavModel_SBAS_ECEF = -1;",
          "1089: static gint ett_lpp_GNSS_RealTimeIntegrity = -1;",
          "1090: static gint ett_lpp_GNSS_BadSignalList = -1;",
          "1091: static gint ett_lpp_BadSignalElement = -1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1181: static gint ett_lpp_NavModel_BDS_KeplerianSet_r12 = -1;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1106: static gint ett_lpp_AlmanacMidiAlmanacSet = -1;",
          "1107: static gint ett_lpp_AlmanacGLONASS_AlmanacSet = -1;",
          "1108: static gint ett_lpp_AlmanacECEF_SBAS_AlmanacSet = -1;",
          "1109: static gint ett_lpp_GNSS_UTC_Model = -1;",
          "1110: static gint ett_lpp_UTC_ModelSet1 = -1;",
          "1111: static gint ett_lpp_UTC_ModelSet2 = -1;",
          "1112: static gint ett_lpp_UTC_ModelSet3 = -1;",
          "1113: static gint ett_lpp_UTC_ModelSet4 = -1;",
          "1114: static gint ett_lpp_GNSS_AuxiliaryInformation = -1;",
          "1115: static gint ett_lpp_GNSS_ID_GPS = -1;",
          "1116: static gint ett_lpp_GNSS_ID_GPS_SatElement = -1;",
          "1117: static gint ett_lpp_GNSS_ID_GLONASS = -1;",
          "1118: static gint ett_lpp_GNSS_ID_GLONASS_SatElement = -1;",
          "1119: static gint ett_lpp_A_GNSS_RequestAssistanceData = -1;",
          "1120: static gint ett_lpp_GNSS_CommonAssistDataReq = -1;",
          "1121: static gint ett_lpp_GNSS_GenericAssistDataReq = -1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1202: static gint ett_lpp_AlmanacBDS_AlmanacSet_r12 = -1;",
          "1208: static gint ett_lpp_UTC_ModelSet5_r12 = -1;",
          "1214: static gint ett_lpp_BDS_DifferentialCorrections_r12 = -1;",
          "1215: static gint ett_lpp_BDS_SgnTypeList_r12 = -1;",
          "1216: static gint ett_lpp_BDS_SgnTypeElement_r12 = -1;",
          "1217: static gint ett_lpp_DBDS_CorrectionList_r12 = -1;",
          "1218: static gint ett_lpp_DBDS_CorrectionElement_r12 = -1;",
          "1219: static gint ett_lpp_BDS_GridModelParameter_r12 = -1;",
          "1220: static gint ett_lpp_GridIonList_r12 = -1;",
          "1221: static gint ett_lpp_GridIonElement_r12 = -1;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1143: static gint ett_lpp_GNSS_AlmanacReq = -1;",
          "1144: static gint ett_lpp_GNSS_UTC_ModelReq = -1;",
          "1145: static gint ett_lpp_GNSS_AuxiliaryInformationReq = -1;",
          "1146: static gint ett_lpp_A_GNSS_ProvideLocationInformation = -1;",
          "1147: static gint ett_lpp_GNSS_SignalMeasurementInformation = -1;",
          "1148: static gint ett_lpp_MeasurementReferenceTime = -1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1249: static gint ett_lpp_BDS_DifferentialCorrectionsReq_r12 = -1;",
          "1250: static gint ett_lpp_BDS_GridModelReq_r12 = -1;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1189: static gint ett_lpp_GNSS_UTC_ModelSupport = -1;",
          "1190: static gint ett_lpp_T_utc_Model = -1;",
          "1191: static gint ett_lpp_GNSS_AuxiliaryInformationSupport = -1;",
          "1192: static gint ett_lpp_A_GNSS_RequestCapabilities = -1;",
          "1193: static gint ett_lpp_A_GNSS_Error = -1;",
          "1194: static gint ett_lpp_GNSS_LocationServerErrorCauses = -1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1297: static gint ett_lpp_BDS_DifferentialCorrectionsSupport_r12 = -1;",
          "1298: static gint ett_lpp_BDS_GridModelSupport_r12 = -1;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1216: static gint ett_lpp_ECID_TargetDeviceErrorCauses = -1;",
          "",
          "[Removed Lines]",
          "1219: #line 57 \"../../asn1/lpp/packet-lpp-template.c\"",
          "",
          "[Added Lines]",
          "1326: #line 71 \"../../asn1/lpp/packet-lpp-template.c\"",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1232: #define maxFBI_Plus1                   65",
          "1233: #define maxFBI2                        256",
          "1238: static const value_string lpp_ePDU_ID_vals[] = {",
          "1239:   { 1, \"OMA LPP extensions (LPPe)\"},",
          "",
          "[Removed Lines]",
          "1236: #line 60 \"../../asn1/lpp/packet-lpp-template.c\"",
          "",
          "[Added Lines]",
          "1342: typedef enum _T_GNSS_ID_enum {",
          "1343:   T_GNSS_ID_GPS =   0,",
          "1344:   T_GNSS_ID_SBAS =   1,",
          "1345:   T_GNSS_ID_QZSS =   2,",
          "1346:   T_GNSS_ID_GALILEO =   3,",
          "1347:   T_GNSS_ID_GLONASS =   4,",
          "1348:   T_GNSS_ID_BDS =   5",
          "1349: } T_GNSS_ID_enum;",
          "1352: #line 74 \"../../asn1/lpp/packet-lpp-template.c\"",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1423: {",
          "1424:   double drift = (double)((gint32)v)*pow(2, -30);",
          "1427: }",
          "1429: static const value_string lpp_dataID_vals[] = {",
          "1430:   { 0, \"Parameters are applicable worldwide\"},",
          "1431:   { 3, \"Parameters have been generated by QZSS\"},",
          "1432:   { 0, NULL}",
          "1433: };",
          "",
          "[Removed Lines]",
          "1426:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e s/s (%d)\", drift, (gint32)v);",
          "",
          "[Added Lines]",
          "1542:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g s/s (%d)\", drift, (gint32)v);",
          "1547:   { 1, \"Parameters have been generated by BDS\"},",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1437: {",
          "1438:   double alpha = (double)((gint32)v)*pow(2, -30);",
          "1441: }",
          "1443: static void",
          "",
          "[Removed Lines]",
          "1440:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e s (%d)\", alpha, (gint32)v);",
          "",
          "[Added Lines]",
          "1557:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g s (%d)\", alpha, (gint32)v);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1445: {",
          "1446:   double alpha = (double)((gint32)v)*pow(2, -27);",
          "1449: }",
          "1451: static void",
          "",
          "[Removed Lines]",
          "1448:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e s/semi-circle (%d)\", alpha, (gint32)v);",
          "",
          "[Added Lines]",
          "1565:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g s/semi-circle (%d)\", alpha, (gint32)v);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1453: {",
          "1454:   double alpha = (double)((gint32)v)*pow(2, -24);",
          "1457: }",
          "1459: static void",
          "",
          "[Removed Lines]",
          "1456:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e s/semi-circle (%d)\", alpha, (gint32)v);",
          "",
          "[Added Lines]",
          "1573:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g s/semi-circle (%d)\", alpha, (gint32)v);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1461: {",
          "1462:   double beta = (double)((gint32)v)*pow(2, 11);",
          "1465: }",
          "1467: static void",
          "",
          "[Removed Lines]",
          "1464:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e s (%d)\", beta, (gint32)v);",
          "",
          "[Added Lines]",
          "1581:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g s (%d)\", beta, (gint32)v);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1469: {",
          "1470:   double beta = (double)((gint32)v)*pow(2, 14);",
          "1473: }",
          "1475: static void",
          "",
          "[Removed Lines]",
          "1472:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e s/semi-circle (%d)\", beta, (gint32)v);",
          "",
          "[Added Lines]",
          "1589:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g s/semi-circle (%d)\", beta, (gint32)v);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1477: {",
          "1478:   double beta = (double)((gint32)v)*pow(2, 16);",
          "1481: }",
          "1483: static void",
          "",
          "[Removed Lines]",
          "1480:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e s/semi-circle (%d)\", beta, (gint32)v);",
          "",
          "[Added Lines]",
          "1597:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g s/semi-circle (%d)\", beta, (gint32)v);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1485: {",
          "1486:   double ai = (double)v*pow(2, -2);",
          "1489: }",
          "1491: static void",
          "",
          "[Removed Lines]",
          "1488:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e sfu (%u)\", ai, v);",
          "",
          "[Added Lines]",
          "1605:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g sfu (%u)\", ai, v);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1493: {",
          "1494:   double ai = (double)v*pow(2, -8);",
          "1497: }",
          "1499: static void",
          "",
          "[Removed Lines]",
          "1496:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e sfu/degree (%u)\", ai, v);",
          "",
          "[Added Lines]",
          "1613:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g sfu/degree (%u)\", ai, v);",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1501: {",
          "1502:   double ai = (double)v*pow(2, -15);",
          "1505: }",
          "1507: static void",
          "",
          "[Removed Lines]",
          "1504:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e sfu/degree (%u)\", ai, v);",
          "",
          "[Added Lines]",
          "1621:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g sfu/degree2 (%u)\", ai, v);",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1515: {",
          "1516:   double pm = (double)((gint32)v)*pow(2, -20);",
          "1519: }",
          "1521: static void",
          "",
          "[Removed Lines]",
          "1518:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e arc-seconds (%d)\", pm, (gint32)v);",
          "",
          "[Added Lines]",
          "1635:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g arc-seconds (%d)\", pm, (gint32)v);",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1523: {",
          "1524:   double pmDot = (double)((gint32)v)*pow(2, -21);",
          "1527: }",
          "1529: static void",
          "",
          "[Removed Lines]",
          "1526:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e arc-seconds/day (%d)\", pmDot, (gint32)v);",
          "",
          "[Added Lines]",
          "1643:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g arc-seconds/day (%d)\", pmDot, (gint32)v);",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1531: {",
          "1532:   double deltaUT1 = (double)((gint32)v)*pow(2, -24);",
          "1535: }",
          "1537: static void",
          "",
          "[Removed Lines]",
          "1534:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e s (%d)\", deltaUT1, (gint32)v);",
          "",
          "[Added Lines]",
          "1651:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g s (%d)\", deltaUT1, (gint32)v);",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "1539: {",
          "1540:   double deltaUT1dot = (double)((gint32)v)*pow(2, -25);",
          "1543: }",
          "1545: static void",
          "",
          "[Removed Lines]",
          "1542:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e s/day (%d)\", deltaUT1dot, (gint32)v);",
          "",
          "[Added Lines]",
          "1659:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g s/day (%d)\", deltaUT1dot, (gint32)v);",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "1553: {",
          "1554:   double tA0 = (double)((gint32)v)*pow(2, -35);",
          "1557: }",
          "1559: static void",
          "",
          "[Removed Lines]",
          "1556:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e s (%d)\", tA0, (gint32)v);",
          "",
          "[Added Lines]",
          "1673:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g s (%d)\", tA0, (gint32)v);",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "1561: {",
          "1562:   double tA1 = (double)((gint32)v)*pow(2, -51);",
          "1565: }",
          "1567: static void",
          "",
          "[Removed Lines]",
          "1564:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e s/s (%d)\", tA1, (gint32)v);",
          "",
          "[Added Lines]",
          "1681:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g s/s (%d)\", tA1, (gint32)v);",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "1569: {",
          "1570:   double tA2 = (double)((gint32)v)*pow(2, -68);",
          "1573: }",
          "1575: static const value_string lpp_gnss_TO_ID_vals[] = {",
          "",
          "[Removed Lines]",
          "1572:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e s/s2 (%d)\", tA2, (gint32)v);",
          "",
          "[Added Lines]",
          "1689:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g s/s2 (%d)\", tA2, (gint32)v);",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "1640:   { 0, NULL}",
          "1641: };",
          "1643: static void",
          "1644: lpp_stanClockToc_fmt(gchar *s, guint32 v)",
          "1645: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1760: static const value_string lpp_signal_health_status_vals[] = {",
          "1761:   { 0, \"Signal OK\"},",
          "1762:   { 1, \"Signal out of service\"},",
          "1763:   { 2, \"Signal will be out of service\"},",
          "1764:   { 3, \"Signal Component currently in Test\"},",
          "1765:   { 0, NULL}",
          "1766: };",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "1649: static void",
          "1650: lpp_stanClockAF2_fmt(gchar *s, guint32 v)",
          "1651: {",
          "1655: }",
          "1657: static void",
          "1658: lpp_stanClockAF1_fmt(gchar *s, guint32 v)",
          "1659: {",
          "1663: }",
          "1665: static void",
          "1666: lpp_stanClockAF0_fmt(gchar *s, guint32 v)",
          "1667: {",
          "1671: }",
          "1673: static void",
          "",
          "[Removed Lines]",
          "1652:   double stanClockAF2 = (double)((gint32)v)*pow(2, -65);",
          "1654:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e s/s2 (%d)\", stanClockAF2, (gint32)v);",
          "1660:   double stanClockAF1 = (double)((gint32)v)*pow(2, -45);",
          "1662:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e s/s (%d)\", stanClockAF1, (gint32)v);",
          "1668:   double stanClockAF0 = (double)((gint32)v)*pow(2, -33);",
          "1670:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e s (%d)\", stanClockAF0, (gint32)v);",
          "",
          "[Added Lines]",
          "1776:   double stanClockAF2 = (double)((gint32)v)*pow(2, -59);",
          "1778:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g s/s2 (%d)\", stanClockAF2, (gint32)v);",
          "1784:   double stanClockAF1 = (double)((gint32)v)*pow(2, -46);",
          "1786:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g s/s (%d)\", stanClockAF1, (gint32)v);",
          "1792:   double stanClockAF0 = (double)((gint32)v)*pow(2, -34);",
          "1794:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g s (%d)\", stanClockAF0, (gint32)v);",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "1675: {",
          "1676:   double stanClockTgd = (double)((gint32)v)*pow(2, -32);",
          "1679: }",
          "1681: static const value_string lpp_stanModelID_vals[] = {",
          "",
          "[Removed Lines]",
          "1678:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e s (%d)\", stanClockTgd, (gint32)v);",
          "",
          "[Added Lines]",
          "1802:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g s (%d)\", stanClockTgd, (gint32)v);",
          "1803: }",
          "1805: static void",
          "1806: lpp_sisa_fmt(gchar *s, guint32 v)",
          "1807: {",
          "1808:   if (v < 50) {",
          "1809:     g_snprintf(s, ITEM_LABEL_LENGTH, \"%u cm (%u)\", v, v);",
          "1810:   } else if (v < 75) {",
          "1811:     g_snprintf(s, ITEM_LABEL_LENGTH, \"%u cm (%u)\", 50+((v-50)*2), v);",
          "1812:   } else if (v < 100) {",
          "1813:     g_snprintf(s, ITEM_LABEL_LENGTH, \"%u cm (%u)\", 100+((v-75)*4), v);",
          "1814:   } else if (v < 126) {",
          "1815:     g_snprintf(s, ITEM_LABEL_LENGTH, \"%u cm (%u)\", 200+((v-100)*16), v);",
          "1816:   } else if (v < 255) {",
          "1817:     g_snprintf(s, ITEM_LABEL_LENGTH, \"Spare (%u)\", v);",
          "1818:   } else {",
          "1819:     g_snprintf(s, ITEM_LABEL_LENGTH, \"No Accuracy Prediction Available (255)\");",
          "1820:   }",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "1695: {",
          "1696:   double navaf2 = (double)((gint32)v)*pow(2, -55);",
          "1699: }",
          "1701: static void",
          "",
          "[Removed Lines]",
          "1698:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e s/s2 (%d)\", navaf2, (gint32)v);",
          "",
          "[Added Lines]",
          "1840:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g s/s2 (%d)\", navaf2, (gint32)v);",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "1703: {",
          "1704:   double navaf1 = (double)((gint32)v)*pow(2, -43);",
          "1707: }",
          "1709: static void",
          "",
          "[Removed Lines]",
          "1706:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e s/s (%d)\", navaf1, (gint32)v);",
          "",
          "[Added Lines]",
          "1848:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g s/s (%d)\", navaf1, (gint32)v);",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "1711: {",
          "1712:   double navaf0_navTgd = (double)((gint32)v)*pow(2, -31);",
          "1715: }",
          "1717: static void",
          "",
          "[Removed Lines]",
          "1714:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e s/s (%d)\", navaf0_navTgd, (gint32)v);",
          "",
          "[Added Lines]",
          "1856:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g s/s (%d)\", navaf0_navTgd, (gint32)v);",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "1725: {",
          "1726:   double cnavAf2 = (double)((gint32)v)*pow(2, -60);",
          "1729: }",
          "1731: static void",
          "",
          "[Removed Lines]",
          "1728:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e s/s2 (%d)\", cnavAf2, (gint32)v);",
          "",
          "[Added Lines]",
          "1870:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g s/s2 (%d)\", cnavAf2, (gint32)v);",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "1733: {",
          "1734:   double cnavAf1 = (double)((gint32)v)*pow(2, -48);",
          "1737: }",
          "1739: static void",
          "",
          "[Removed Lines]",
          "1736:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e s/s (%d)\", cnavAf1, (gint32)v);",
          "",
          "[Added Lines]",
          "1878:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g s/s (%d)\", cnavAf1, (gint32)v);",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "1741: {",
          "1742:   double cnavX = (double)((gint32)v)*pow(2, -35);",
          "1745: }",
          "1747: static void",
          "",
          "[Removed Lines]",
          "1744:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e s (%d)\", cnavX, (gint32)v);",
          "",
          "[Added Lines]",
          "1886:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g s (%d)\", cnavX, (gint32)v);",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "1749: {",
          "1750:   double gloTau_gloDeltaTau = (double)((gint32)v)*pow(2, -30);",
          "1753: }",
          "1755: static void",
          "",
          "[Removed Lines]",
          "1752:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e s (%d)\", gloTau_gloDeltaTau, (gint32)v);",
          "",
          "[Added Lines]",
          "1894:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g s (%d)\", gloTau_gloDeltaTau, (gint32)v);",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "1757: {",
          "1758:   double gloGamma = (double)((gint32)v)*pow(2, -40);",
          "1761: }",
          "1763: static void",
          "",
          "[Removed Lines]",
          "1760:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e (%d)\", gloGamma, (gint32)v);",
          "",
          "[Added Lines]",
          "1902:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g (%d)\", gloGamma, (gint32)v);",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "1771: {",
          "1772:   double sbasAgfo = (double)((gint32)v)*pow(2, -31);",
          "1775: }",
          "1777: static void",
          "",
          "[Removed Lines]",
          "1774:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e s (%d)\", sbasAgfo, (gint32)v);",
          "",
          "[Added Lines]",
          "1916:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g s (%d)\", sbasAgfo, (gint32)v);",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "1779: {",
          "1780:   double sbasAgf1 = (double)((gint32)v)*pow(2, -40);",
          "1783: }",
          "1785: static void",
          "",
          "[Removed Lines]",
          "1782:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e s/s (%d)\", sbasAgf1, (gint32)v);",
          "",
          "[Added Lines]",
          "1924:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g s/s (%d)\", sbasAgf1, (gint32)v);",
          "1925: }",
          "1927: static void",
          "1928: lpp_bdsAODC_AODE_r12_fmt(gchar *s, guint32 v)",
          "1929: {",
          "1930:   if (v < 25) {",
          "1931:     g_snprintf(s, ITEM_LABEL_LENGTH, \"Age of the satellite clock correction parameters is %u hours (%u)\", v, v);",
          "1932:   } else if (v < 31) {",
          "1933:     g_snprintf(s, ITEM_LABEL_LENGTH, \"Age of the satellite clock correction parameters is %u days (%u)\", v-23, v);",
          "1934:   } else {",
          "1935:     g_snprintf(s, ITEM_LABEL_LENGTH, \"Age of the satellite clock correction parameters is over 7 days (%u)\", v);",
          "1936:   }",
          "1937: }",
          "1940: static void",
          "1941: lpp_bdsToc_Toe_r12_fmt(gchar *s, guint32 v)",
          "1942: {",
          "1943:   double bdsToc = (double)((gint32)v)*pow(2, 3);",
          "1945:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g s (%d)\", bdsToc, (gint32)v);",
          "1946: }",
          "1948: static void",
          "1949: lpp_bdsA0_r12_fmt(gchar *s, guint32 v)",
          "1950: {",
          "1951:   double bdsA0 = (double)((gint32)v)*pow(2, -33);",
          "1953:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g s (%d)\", bdsA0, (gint32)v);",
          "1954: }",
          "1956: static void",
          "1957: lpp_bdsA1_r12_fmt(gchar *s, guint32 v)",
          "1958: {",
          "1959:   double bdsA1 = (double)((gint32)v)*pow(2, -50);",
          "1961:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g s/s (%d)\", bdsA1, (gint32)v);",
          "1962: }",
          "1964: static void",
          "1965: lpp_bdsA2_r12_fmt(gchar *s, guint32 v)",
          "1966: {",
          "1967:   double bdsA2 = (double)((gint32)v)*pow(2, -66);",
          "1969:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g s/s2 (%d)\", bdsA2, (gint32)v);",
          "1970: }",
          "1972: static void",
          "1973: lpp_bdsTgd1_r12_fmt(gchar *s, guint32 v)",
          "1974: {",
          "1975:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g ns (%d)\", (float)((gint32)v)*0.1, (gint32)v);",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "1793: {",
          "1794:   double keplerW_M0_I0_Omega0 = (double)((gint32)v)*pow(2, -31);",
          "1797: }",
          "1799: static void",
          "",
          "[Removed Lines]",
          "1796:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e semi-circles (%d)\", keplerW_M0_I0_Omega0, (gint32)v);",
          "",
          "[Added Lines]",
          "1989:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g semi-circles (%d)\", keplerW_M0_I0_Omega0, (gint32)v);",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "1801: {",
          "1802:   double keplerDeltaN_OmegaDot_IDot = (double)((gint32)v)*pow(2, -43);",
          "1805: }",
          "1807: static void",
          "",
          "[Removed Lines]",
          "1804:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e semi-circles/s (%d)\", keplerDeltaN_OmegaDot_IDot, (gint32)v);",
          "",
          "[Added Lines]",
          "1997:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g semi-circles/s (%d)\", keplerDeltaN_OmegaDot_IDot, (gint32)v);",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "1809: {",
          "1810:   double keplerE = (double)v*pow(2, -33);",
          "1813: }",
          "1815: static void",
          "",
          "[Removed Lines]",
          "1812:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e (%u)\", keplerE, v);",
          "",
          "[Added Lines]",
          "2005:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g (%u)\", keplerE, v);",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "1817: {",
          "1818:   double keplerAPowerHalf = (double)v*pow(2, -19);",
          "1821: }",
          "1823: static void",
          "",
          "[Removed Lines]",
          "1820:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e m1/2 (%u)\", keplerAPowerHalf, v);",
          "",
          "[Added Lines]",
          "2013:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g m1/2 (%u)\", keplerAPowerHalf, v);",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "1825: {",
          "1826:   double keplerCrs_Crc = (double)((gint32)v)*pow(2, -5);",
          "1829: }",
          "1831: static void",
          "",
          "[Removed Lines]",
          "1828:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e m (%d)\", keplerCrs_Crc, (gint32)v);",
          "",
          "[Added Lines]",
          "2021:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g m (%d)\", keplerCrs_Crc, (gint32)v);",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "1833: {",
          "1834:   double keplerCx = (double)((gint32)v)*pow(2, -29);",
          "1837: }",
          "1839: static void",
          "",
          "[Removed Lines]",
          "1836:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e rad (%d)\", keplerCx, (gint32)v);",
          "",
          "[Added Lines]",
          "2029:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g rad (%d)\", keplerCx, (gint32)v);",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "1847: {",
          "1848:   double navOmega_M0_I0_OmegaA0 = (double)((gint32)v)*pow(2, -31);",
          "1851: }",
          "1853: static void",
          "",
          "[Removed Lines]",
          "1850:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e semi-circles (%d)\", navOmega_M0_I0_OmegaA0, (gint32)v);",
          "",
          "[Added Lines]",
          "2043:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g semi-circles (%d)\", navOmega_M0_I0_OmegaA0, (gint32)v);",
          "",
          "---------------",
          "--- Hunk 49 ---",
          "[Context before]",
          "1855: {",
          "1856:   double navDeltaN_OmegaADot_IDot = (double)((gint32)v)*pow(2, -43);",
          "1859: }",
          "1861: static void",
          "",
          "[Removed Lines]",
          "1858:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e semi-circles/s (%d)\", navDeltaN_OmegaADot_IDot, (gint32)v);",
          "",
          "[Added Lines]",
          "2051:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g semi-circles/s (%d)\", navDeltaN_OmegaADot_IDot, (gint32)v);",
          "",
          "---------------",
          "--- Hunk 50 ---",
          "[Context before]",
          "1863: {",
          "1864:   double navE = (double)v*pow(2, -33);",
          "1867: }",
          "1869: static void",
          "",
          "[Removed Lines]",
          "1866:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e (%u)\", navE, v);",
          "",
          "[Added Lines]",
          "2059:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g (%u)\", navE, v);",
          "",
          "---------------",
          "--- Hunk 51 ---",
          "[Context before]",
          "1871: {",
          "1872:   double navAPowerHalf = (double)v*pow(2, -19);",
          "1875: }",
          "1877: static void",
          "",
          "[Removed Lines]",
          "1874:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e m1/2 (%u)\", navAPowerHalf, v);",
          "",
          "[Added Lines]",
          "2067:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g m1/2 (%u)\", navAPowerHalf, v);",
          "",
          "---------------",
          "--- Hunk 52 ---",
          "[Context before]",
          "1879: {",
          "1880:   double navCrs_Crc = (double)((gint32)v)*pow(2, -5);",
          "1883: }",
          "1885: static void",
          "",
          "[Removed Lines]",
          "1882:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e m (%d)\", navCrs_Crc, (gint32)v);",
          "",
          "[Added Lines]",
          "2075:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g m (%d)\", navCrs_Crc, (gint32)v);",
          "",
          "---------------",
          "--- Hunk 53 ---",
          "[Context before]",
          "1887: {",
          "1888:   double navCx = (double)((gint32)v)*pow(2, -29);",
          "1891: }",
          "1893: static void",
          "",
          "[Removed Lines]",
          "1890:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e rad (%d)\", navCx, (gint32)v);",
          "",
          "[Added Lines]",
          "2083:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g rad (%d)\", navCx, (gint32)v);",
          "",
          "---------------",
          "--- Hunk 54 ---",
          "[Context before]",
          "1895: {",
          "1896:   double cnavDeltaA = (double)((gint32)v)*pow(2, -9);",
          "1899: }",
          "1901: static void",
          "",
          "[Removed Lines]",
          "1898:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e m (%d)\", cnavDeltaA, (gint32)v);",
          "",
          "[Added Lines]",
          "2091:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g m (%d)\", cnavDeltaA, (gint32)v);",
          "",
          "---------------",
          "--- Hunk 55 ---",
          "[Context before]",
          "1903: {",
          "1904:   double cnavAdot = (double)((gint32)v)*pow(2, -21);",
          "1907: }",
          "1909: static void",
          "",
          "[Removed Lines]",
          "1906:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e m/s (%d)\", cnavAdot, (gint32)v);",
          "",
          "[Added Lines]",
          "2099:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g m/s (%d)\", cnavAdot, (gint32)v);",
          "",
          "---------------",
          "--- Hunk 56 ---",
          "[Context before]",
          "1911: {",
          "1912:   double cnavDeltaNo = (double)((gint32)v)*pow(2, -44);",
          "1915: }",
          "1917: static void",
          "",
          "[Removed Lines]",
          "1914:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e semi-circles/s (%d)\", cnavDeltaNo, (gint32)v);",
          "",
          "[Added Lines]",
          "2107:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g semi-circles/s (%d)\", cnavDeltaNo, (gint32)v);",
          "",
          "---------------",
          "--- Hunk 57 ---",
          "[Context before]",
          "1919: {",
          "1920:   double cnavDeltaNoDot = (double)((gint32)v)*pow(2, -57);",
          "1923: }",
          "1925: static void",
          "",
          "[Removed Lines]",
          "1922:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e semi-circles/s2 (%d)\", cnavDeltaNoDot, (gint32)v);",
          "",
          "[Added Lines]",
          "2115:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g semi-circles/s2 (%d)\", cnavDeltaNoDot, (gint32)v);",
          "",
          "---------------",
          "--- Hunk 58 ---",
          "[Context before]",
          "1927: {",
          "1928:   double cnavDeltaOmegaDot_IoDot = (double)((gint32)v)*pow(2, -44);",
          "1931: }",
          "1933: static void",
          "",
          "[Removed Lines]",
          "1930:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e semi-circles/s (%d)\", cnavDeltaOmegaDot_IoDot, (gint32)v);",
          "",
          "[Added Lines]",
          "2123:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g semi-circles/s (%d)\", cnavDeltaOmegaDot_IoDot, (gint32)v);",
          "",
          "---------------",
          "--- Hunk 59 ---",
          "[Context before]",
          "1935: {",
          "1936:   double cnavCx = (double)((gint32)v)*pow(2, -30);",
          "1939: }",
          "1941: static void",
          "",
          "[Removed Lines]",
          "1938:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e rad (%d)\", cnavCx, (gint32)v);",
          "",
          "[Added Lines]",
          "2131:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g rad (%d)\", cnavCx, (gint32)v);",
          "",
          "---------------",
          "--- Hunk 60 ---",
          "[Context before]",
          "1943: {",
          "1944:   double cnavCrs_Crc = (double)((gint32)v)*pow(2, -8);",
          "1947: }",
          "1949: static void",
          "",
          "[Removed Lines]",
          "1946:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e m (%d)\", cnavCrs_Crc, (gint32)v);",
          "",
          "[Added Lines]",
          "2139:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g m (%d)\", cnavCrs_Crc, (gint32)v);",
          "",
          "---------------",
          "--- Hunk 61 ---",
          "[Context before]",
          "1951: {",
          "1952:   double gloX_Y_Z = (double)((gint32)v)*pow(2, -11);",
          "1955: }",
          "1957: static void",
          "",
          "[Removed Lines]",
          "1954:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e km (%d)\", gloX_Y_Z, (gint32)v);",
          "",
          "[Added Lines]",
          "2147:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g km (%d)\", gloX_Y_Z, (gint32)v);",
          "",
          "---------------",
          "--- Hunk 62 ---",
          "[Context before]",
          "1959: {",
          "1960:   double gloXdot_Ydot_Zdot = (double)((gint32)v)*pow(2, -20);",
          "1963: }",
          "1965: static void",
          "",
          "[Removed Lines]",
          "1962:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e km/s (%d)\", gloXdot_Ydot_Zdot, (gint32)v);",
          "",
          "[Added Lines]",
          "2155:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g km/s (%d)\", gloXdot_Ydot_Zdot, (gint32)v);",
          "",
          "---------------",
          "--- Hunk 63 ---",
          "[Context before]",
          "1967: {",
          "1968:   double gloXdotdot_Ydotdot_Zdotdot = (double)((gint32)v)*pow(2, -30);",
          "1971: }",
          "1973: static void",
          "",
          "[Removed Lines]",
          "1970:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e km/s2 (%d)\", gloXdotdot_Ydotdot_Zdotdot, (gint32)v);",
          "",
          "[Added Lines]",
          "2163:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g km/s2 (%d)\", gloXdotdot_Ydotdot_Zdotdot, (gint32)v);",
          "",
          "---------------",
          "--- Hunk 64 ---",
          "[Context before]",
          "2007: {",
          "2008:   double sbasXgDotDot_YgDotDot = (double)((gint32)v)*0.0000125;",
          "2011: }",
          "2013: static void",
          "",
          "[Removed Lines]",
          "2010:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e m/s2 (%d)\", sbasXgDotDot_YgDotDot, (gint32)v);",
          "",
          "[Added Lines]",
          "2203:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g m/s2 (%d)\", sbasXgDotDot_YgDotDot, (gint32)v);",
          "",
          "---------------",
          "--- Hunk 65 ---",
          "[Context before]",
          "2015: {",
          "2016:   double sbasZgDotDot = (double)((gint32)v)*0.0000625;",
          "2019: }",
          "2021: static void",
          "",
          "[Removed Lines]",
          "2018:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e m/s2 (%d)\", sbasZgDotDot, (gint32)v);",
          "",
          "[Added Lines]",
          "2211:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g m/s2 (%d)\", sbasZgDotDot, (gint32)v);",
          "2212: }",
          "2214: static void",
          "2215: lpp_bdsAPowerHalf_r12_fmt(gchar *s, guint32 v)",
          "2216: {",
          "2217:   double bdsAPowerHalf = (double)v*pow(2, -19);",
          "2219:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g m1/2 (%u)\", bdsAPowerHalf, v);",
          "2220: }",
          "2222: static void",
          "2223: lpp_bdsE_r12_fmt(gchar *s, guint32 v)",
          "2224: {",
          "2225:   double bdsE = (double)v*pow(2, -33);",
          "2227:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g (%u)\", bdsE, v);",
          "2228: }",
          "2230: static void",
          "2231: lpp_bdsW_M0_Omega0_I0_r12_fmt(gchar *s, guint32 v)",
          "2232: {",
          "2233:   double bdsW_M0_Omega0_I0 = (double)((gint32)v)*pow(2, -31);",
          "2235:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g semi-circles (%d)\", bdsW_M0_Omega0_I0, (gint32)v);",
          "2236: }",
          "2238: static void",
          "2239: lpp_bdsDeltaN_OmegaDot_IDot_r12_fmt(gchar *s, guint32 v)",
          "2240: {",
          "2241:   double bdsDeltaN_OmegaDot_IDot = (double)((gint32)v)*pow(2, -43);",
          "2243:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g semi-circles/s (%d)\", bdsDeltaN_OmegaDot_IDot, (gint32)v);",
          "2244: }",
          "2246: static void",
          "2247: lpp_bdsCuc_Cus_Cic_Cis_r12_fmt(gchar *s, guint32 v)",
          "2248: {",
          "2249:   double bdsCuc_Cus_Cic_Cis = (double)((gint32)v)*pow(2, -31);",
          "2251:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g rad (%d)\", bdsCuc_Cus_Cic_Cis, (gint32)v);",
          "2252: }",
          "2254: static void",
          "2255: lpp_bdsCrc_Crs_r12_fmt(gchar *s, guint32 v)",
          "2256: {",
          "2257:   double bdsCrc_Crs = (double)((gint32)v)*pow(2, -6);",
          "2259:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g rad (%d)\", bdsCrc_Crs, (gint32)v);",
          "",
          "---------------",
          "--- Hunk 66 ---",
          "[Context before]",
          "2048: {",
          "2049:   double codePhase = (double)v*pow(2, -10);",
          "2052: }",
          "2054: static const value_string lpp_codePhaseSearchWindow_vals[] = {",
          "",
          "[Removed Lines]",
          "2051:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e ms (%u)\", codePhase, v);",
          "",
          "[Added Lines]",
          "2292:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g ms (%u)\", codePhase, v);",
          "",
          "---------------",
          "--- Hunk 67 ---",
          "[Context before]",
          "2094:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%f degrees (%u)\", (float)v*0.703125, v);",
          "2095: }",
          "2103: static void",
          "2104: lpp_kepAlmanacE_fmt(gchar *s, guint32 v)",
          "2105: {",
          "2106:   double kepAlmanacE = (double)v*pow(2, -16);",
          "2109: }",
          "2111: static void",
          "",
          "[Removed Lines]",
          "2097: static void",
          "2098: lpp_toa_fmt(gchar *s, guint32 v)",
          "2099: {",
          "2100:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%u s (%u)\", 4096*v, v);",
          "2101: }",
          "2108:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e (%u)\", kepAlmanacE, v);",
          "",
          "[Added Lines]",
          "2343:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g (%u)\", kepAlmanacE, v);",
          "",
          "---------------",
          "--- Hunk 68 ---",
          "[Context before]",
          "2113: {",
          "2114:   double kepAlmanacDeltaI = (double)((gint32)v)*pow(2, -14);",
          "2117: }",
          "2119: static void",
          "",
          "[Removed Lines]",
          "2116:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e semi-circles (%d)\", kepAlmanacDeltaI, (gint32)v);",
          "",
          "[Added Lines]",
          "2351:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g semi-circles (%d)\", kepAlmanacDeltaI, (gint32)v);",
          "",
          "---------------",
          "--- Hunk 69 ---",
          "[Context before]",
          "2121: {",
          "2122:   double kepAlmanacOmegaDot = (double)((gint32)v)*pow(2, -33);",
          "2125: }",
          "2127: static void",
          "",
          "[Removed Lines]",
          "2124:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e semi-circles/s (%d)\", kepAlmanacOmegaDot, (gint32)v);",
          "",
          "[Added Lines]",
          "2359:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g semi-circles/s (%d)\", kepAlmanacOmegaDot, (gint32)v);",
          "",
          "---------------",
          "--- Hunk 70 ---",
          "[Context before]",
          "2129: {",
          "2130:   double kepAlmanacAPowerHalf = (double)((gint32)v)*pow(2, -9);",
          "2133: }",
          "2135: static void",
          "",
          "[Removed Lines]",
          "2132:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e m1/2 (%d)\", kepAlmanacAPowerHalf, (gint32)v);",
          "",
          "[Added Lines]",
          "2367:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g m1/2 (%d)\", kepAlmanacAPowerHalf, (gint32)v);",
          "",
          "---------------",
          "--- Hunk 71 ---",
          "[Context before]",
          "2137: {",
          "2138:   double kepAlmanacOmega0_W_M0 = (double)((gint32)v)*pow(2, -15);",
          "2141: }",
          "2143: static void",
          "",
          "[Removed Lines]",
          "2140:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e semi-circles (%d)\", kepAlmanacOmega0_W_M0, (gint32)v);",
          "",
          "[Added Lines]",
          "2375:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g semi-circles (%d)\", kepAlmanacOmega0_W_M0, (gint32)v);",
          "",
          "---------------",
          "--- Hunk 72 ---",
          "[Context before]",
          "2145: {",
          "2146:   double kepAlmanacAF0 = (double)((gint32)v)*pow(2, -19);",
          "2149: }",
          "2151: static void",
          "",
          "[Removed Lines]",
          "2148:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e s (%d)\", kepAlmanacAF0, (gint32)v);",
          "",
          "[Added Lines]",
          "2383:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g s (%d)\", kepAlmanacAF0, (gint32)v);",
          "",
          "---------------",
          "--- Hunk 73 ---",
          "[Context before]",
          "2153: {",
          "2154:   double kepAlmanacAF1 = (double)((gint32)v)*pow(2, -38);",
          "2157: }",
          "2159: static void",
          "",
          "[Removed Lines]",
          "2156:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e s/s (%d)\", kepAlmanacAF1, (gint32)v);",
          "",
          "[Added Lines]",
          "2391:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g s/s (%d)\", kepAlmanacAF1, (gint32)v);",
          "",
          "---------------",
          "--- Hunk 74 ---",
          "[Context before]",
          "2161: {",
          "2162:   double navAlmE = (double)v*pow(2, -21);",
          "2165: }",
          "2167: static void",
          "",
          "[Removed Lines]",
          "2164:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e (%u)\", navAlmE, v);",
          "",
          "[Added Lines]",
          "2399:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g (%u)\", navAlmE, v);",
          "",
          "---------------",
          "--- Hunk 75 ---",
          "[Context before]",
          "2169: {",
          "2170:   double navAlmDeltaI = (double)((gint32)v)*pow(2, -19);",
          "2173: }",
          "2175: static void",
          "",
          "[Removed Lines]",
          "2172:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e semi-circles (%d)\", navAlmDeltaI, (gint32)v);",
          "",
          "[Added Lines]",
          "2407:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g semi-circles (%d)\", navAlmDeltaI, (gint32)v);",
          "",
          "---------------",
          "--- Hunk 76 ---",
          "[Context before]",
          "2177: {",
          "2178:   double navAlmOMEGADOT = (double)((gint32)v)*pow(2, -38);",
          "2181: }",
          "2183: static void",
          "",
          "[Removed Lines]",
          "2180:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e semi-circles/s (%d)\", navAlmOMEGADOT, (gint32)v);",
          "",
          "[Added Lines]",
          "2415:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g semi-circles/s (%d)\", navAlmOMEGADOT, (gint32)v);",
          "",
          "---------------",
          "--- Hunk 77 ---",
          "[Context before]",
          "2185: {",
          "2186:   double navAlmSqrtA = (double)v*pow(2, -11);",
          "2189: }",
          "2191: static void",
          "",
          "[Removed Lines]",
          "2188:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e m1/2 (%u)\", navAlmSqrtA, v);",
          "",
          "[Added Lines]",
          "2423:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g m1/2 (%u)\", navAlmSqrtA, v);",
          "",
          "---------------",
          "--- Hunk 78 ---",
          "[Context before]",
          "2193: {",
          "2194:   double navAlmOMEGAo_Omega_Mo = (double)((gint32)v)*pow(2, -23);",
          "2197: }",
          "2199: static void",
          "",
          "[Removed Lines]",
          "2196:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e semi-circles (%d)\", navAlmOMEGAo_Omega_Mo, (gint32)v);",
          "",
          "[Added Lines]",
          "2431:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g semi-circles (%d)\", navAlmOMEGAo_Omega_Mo, (gint32)v);",
          "",
          "---------------",
          "--- Hunk 79 ---",
          "[Context before]",
          "2201: {",
          "2202:   double navAlmaf0 = (double)((gint32)v)*pow(2, -20);",
          "2205: }",
          "2207: static void",
          "",
          "[Removed Lines]",
          "2204:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e s (%d)\", navAlmaf0, (gint32)v);",
          "",
          "[Added Lines]",
          "2439:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g s (%d)\", navAlmaf0, (gint32)v);",
          "",
          "---------------",
          "--- Hunk 80 ---",
          "[Context before]",
          "2209: {",
          "2210:   double navAlmaf1 = (double)((gint32)v)*pow(2, -38);",
          "2213: }",
          "2215: static void",
          "",
          "[Removed Lines]",
          "2212:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e s/s (%d)\", navAlmaf1, (gint32)v);",
          "",
          "[Added Lines]",
          "2447:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g s/s (%d)\", navAlmaf1, (gint32)v);",
          "",
          "---------------",
          "--- Hunk 81 ---",
          "[Context before]",
          "2223: {",
          "2224:   double redAlmOmega0_Phi0 = (double)((gint32)v)*pow(2, -6);",
          "2227: }",
          "2229: static void",
          "",
          "[Removed Lines]",
          "2226:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e semi-circles (%d)\", redAlmOmega0_Phi0, (gint32)v);",
          "",
          "[Added Lines]",
          "2461:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g semi-circles (%d)\", redAlmOmega0_Phi0, (gint32)v);",
          "",
          "---------------",
          "--- Hunk 82 ---",
          "[Context before]",
          "2231: {",
          "2232:   double midiAlmE = (double)v*pow(2, -16);",
          "2235: }",
          "2237: static void",
          "",
          "[Removed Lines]",
          "2234:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e (%u)\", midiAlmE, v);",
          "",
          "[Added Lines]",
          "2469:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g (%u)\", midiAlmE, v);",
          "",
          "---------------",
          "--- Hunk 83 ---",
          "[Context before]",
          "2239: {",
          "2240:   double midiAlmDeltaI = (double)((gint32)v)*pow(2, -14);",
          "2243: }",
          "2245: static void",
          "",
          "[Removed Lines]",
          "2242:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e semi-circles (%d)\", midiAlmDeltaI, (gint32)v);",
          "",
          "[Added Lines]",
          "2477:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g semi-circles (%d)\", midiAlmDeltaI, (gint32)v);",
          "",
          "---------------",
          "--- Hunk 84 ---",
          "[Context before]",
          "2247: {",
          "2248:   double midiAlmOmegaDot = (double)((gint32)v)*pow(2, -33);",
          "2251: }",
          "2253: static void",
          "",
          "[Removed Lines]",
          "2250:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e semi-circles/s (%d)\", midiAlmOmegaDot, (gint32)v);",
          "",
          "[Added Lines]",
          "2485:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g semi-circles/s (%d)\", midiAlmOmegaDot, (gint32)v);",
          "",
          "---------------",
          "--- Hunk 85 ---",
          "[Context before]",
          "2261: {",
          "2262:   double midiAlmOmega0_Omega_Mo = (double)((gint32)v)*pow(2, -15);",
          "2265: }",
          "2267: static void",
          "",
          "[Removed Lines]",
          "2264:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e semi-circles (%d)\", midiAlmOmega0_Omega_Mo, (gint32)v);",
          "",
          "[Added Lines]",
          "2499:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g semi-circles (%d)\", midiAlmOmega0_Omega_Mo, (gint32)v);",
          "",
          "---------------",
          "--- Hunk 86 ---",
          "[Context before]",
          "2269: {",
          "2270:   double midiAlmaf0 = (double)((gint32)v)*pow(2, -20);",
          "2273: }",
          "2275: static void",
          "",
          "[Removed Lines]",
          "2272:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e s (%d)\", midiAlmaf0, (gint32)v);",
          "",
          "[Added Lines]",
          "2507:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g s (%d)\", midiAlmaf0, (gint32)v);",
          "",
          "---------------",
          "--- Hunk 87 ---",
          "[Context before]",
          "2277: {",
          "2278:   double midiAlmaf1 = (double)((gint32)v)*pow(2, -37);",
          "2281: }",
          "2283: static void",
          "",
          "[Removed Lines]",
          "2280:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e s/s (%d)\", midiAlmaf1, (gint32)v);",
          "",
          "[Added Lines]",
          "2515:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g s/s (%d)\", midiAlmaf1, (gint32)v);",
          "",
          "---------------",
          "--- Hunk 88 ---",
          "[Context before]",
          "2285: {",
          "2286:   double gloAlmLambdaA_DeltaIa = (double)((gint32)v)*pow(2, -20);",
          "2289: }",
          "2291: static void",
          "",
          "[Removed Lines]",
          "2288:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e semi-circles (%d)\", gloAlmLambdaA_DeltaIa, (gint32)v);",
          "",
          "[Added Lines]",
          "2523:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g semi-circles (%d)\", gloAlmLambdaA_DeltaIa, (gint32)v);",
          "",
          "---------------",
          "--- Hunk 89 ---",
          "[Context before]",
          "2299: {",
          "2300:   double gloAlmDeltaTA = (double)((gint32)v)*pow(2, -9);",
          "2303: }",
          "2305: static void",
          "",
          "[Removed Lines]",
          "2302:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e s/orbit period (%d)\", gloAlmDeltaTA, (gint32)v);",
          "",
          "[Added Lines]",
          "2537:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g s/orbit period (%d)\", gloAlmDeltaTA, (gint32)v);",
          "",
          "---------------",
          "--- Hunk 90 ---",
          "[Context before]",
          "2307: {",
          "2308:   double gloAlmDeltaTdotA = (double)((gint32)v)*pow(2, -14);",
          "2311: }",
          "2313: static void",
          "",
          "[Removed Lines]",
          "2310:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e s/orbit period (%d)\", gloAlmDeltaTdotA, (gint32)v);",
          "",
          "[Added Lines]",
          "2545:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g s/orbit period (%d)\", gloAlmDeltaTdotA, (gint32)v);",
          "",
          "---------------",
          "--- Hunk 91 ---",
          "[Context before]",
          "2315: {",
          "2316:   double gloAlmEpsilonA = (double)v*pow(2, -20);",
          "2319: }",
          "2321: static void",
          "",
          "[Removed Lines]",
          "2318:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e (%u)\", gloAlmEpsilonA, (gint32)v);",
          "",
          "[Added Lines]",
          "2553:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g (%u)\", gloAlmEpsilonA, (gint32)v);",
          "",
          "---------------",
          "--- Hunk 92 ---",
          "[Context before]",
          "2323: {",
          "2324:   double gloAlmOmegaA = (double)((gint32)v)*pow(2, -15);",
          "2327: }",
          "2329: static void",
          "",
          "[Removed Lines]",
          "2326:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e semi-circles (%d)\", gloAlmOmegaA, (gint32)v);",
          "",
          "[Added Lines]",
          "2561:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g semi-circles (%d)\", gloAlmOmegaA, (gint32)v);",
          "",
          "---------------",
          "--- Hunk 93 ---",
          "[Context before]",
          "2331: {",
          "2332:   double gloAlmTauA = (double)((gint32)v)*pow(2, -18);",
          "2335: }",
          "2337: static void",
          "",
          "[Removed Lines]",
          "2334:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e s (%d)\", gloAlmTauA, (gint32)v);",
          "",
          "[Added Lines]",
          "2569:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g s (%d)\", gloAlmTauA, (gint32)v);",
          "",
          "---------------",
          "--- Hunk 94 ---",
          "[Context before]",
          "2364:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%u m/s (%u)\", v*64, v);",
          "2365: }",
          "2367: static void",
          "2368: lpp_gnss_Utc_A1_fmt(gchar *s, guint32 v)",
          "2369: {",
          "2370:   double gnss_Utc_A1 = (double)((gint32)v)*pow(2, -50);",
          "2373: }",
          "2375: static void",
          "",
          "[Removed Lines]",
          "2372:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e s/s (%d)\", gnss_Utc_A1, (gint32)v);",
          "",
          "[Added Lines]",
          "2602: static void",
          "2603: lpp_bdsAlmToa_r12_fmt(gchar *s, guint32 v)",
          "2604: {",
          "2605:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%u s (%u)\", v*4096, v);",
          "2606: }",
          "2608: static void",
          "2609: lpp_bdsAlmSqrtA_r12_fmt(gchar *s, guint32 v)",
          "2610: {",
          "2611:   double bdsAlmSqrtA = (double)v*pow(2, -11);",
          "2613:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g m1/2 (%u)\", bdsAlmSqrtA, v);",
          "2614: }",
          "2616: static void",
          "2617: lpp_bdsAlmE_r12_fmt(gchar *s, guint32 v)",
          "2618: {",
          "2619:   double bdsAlmE = (double)v*pow(2, -21);",
          "2621:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g m1/2 (%u)\", bdsAlmE, v);",
          "2622: }",
          "2624: static void",
          "2625: lpp_bdsAlmW_M0_Omega0_r12_fmt(gchar *s, guint32 v)",
          "2626: {",
          "2627:   double bdsAlmW_M0_Omega0 = (double)((gint32)v)*pow(2, -23);",
          "2629:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g semi-circles (%d)\", bdsAlmW_M0_Omega0, (gint32)v);",
          "2630: }",
          "2632: static void",
          "2633: lpp_bdsAlmOmegaDot_r12_fmt(gchar *s, guint32 v)",
          "2634: {",
          "2635:   double bdsAlmOmegaDot = (double)((gint32)v)*pow(2, -38);",
          "2637:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g semi-circles/s (%d)\", bdsAlmOmegaDot, (gint32)v);",
          "2638: }",
          "2640: static void",
          "2641: lpp_bdsAlmDeltaI_r12_fmt(gchar *s, guint32 v)",
          "2642: {",
          "2643:   double bdsAlmDeltaI = (double)((gint32)v)*pow(2, -19);",
          "2645:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g semi-circles (%d)\", bdsAlmDeltaI, (gint32)v);",
          "2646: }",
          "2648: static void",
          "2649: lpp_bdsAlmA0_r12_fmt(gchar *s, guint32 v)",
          "2650: {",
          "2651:   double bdsAlmA0 = (double)((gint32)v)*pow(2, -20);",
          "2653:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g s (%d)\", bdsAlmA0, (gint32)v);",
          "2654: }",
          "2656: static void",
          "2657: lpp_bdsAlmA1_r12_fmt(gchar *s, guint32 v)",
          "2658: {",
          "2659:   double bdsAlmA1 = (double)((gint32)v)*pow(2, -38);",
          "2661:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g s/s (%d)\", bdsAlmA1, (gint32)v);",
          "2662: }",
          "2664: static const true_false_string lpp_bdsSvHealth_r12_b1i_b2i_value = {",
          "2665:   \"OK\",",
          "2666:   \"Weak\"",
          "2667: };",
          "2669: static const true_false_string lpp_bdsSvHealth_r12_nav_value = {",
          "2670:   \"OK\",",
          "2671:   \"Bad (IOD over limit)\"",
          "2672: };",
          "2679:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g s/s (%d)\", gnss_Utc_A1, (gint32)v);",
          "",
          "---------------",
          "--- Hunk 95 ---",
          "[Context before]",
          "2377: {",
          "2378:   double gnss_Utc_A0 = (double)((gint32)v)*pow(2, -30);",
          "2381: }",
          "2383: static void",
          "",
          "[Removed Lines]",
          "2380:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e s (%d)\", gnss_Utc_A0, (gint32)v);",
          "",
          "[Added Lines]",
          "2687:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g s (%d)\", gnss_Utc_A0, (gint32)v);",
          "",
          "---------------",
          "--- Hunk 96 ---",
          "[Context before]",
          "2386:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%u s (%u)\", v*4096, v);",
          "2387: }",
          "2389: static void",
          "2390: lpp_tauC_fmt(gchar *s, guint32 v)",
          "2391: {",
          "2392:   double tauC = (double)((gint32)v)*pow(2, -31);",
          "2395: }",
          "2397: static void",
          "",
          "[Removed Lines]",
          "2394:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e s (%d)\", tauC, (gint32)v);",
          "",
          "[Added Lines]",
          "2696: static const value_string lpp_bds_UDREI_vals[] = {",
          "2697:   {  0, \"1 meter\"},",
          "2698:   {  1, \"1.5 meters\"},",
          "2699:   {  2, \"2 meters\"},",
          "2700:   {  3, \"3 meters\"},",
          "2701:   {  4, \"4 meters\"},",
          "2702:   {  5, \"5 meters\"},",
          "2703:   {  6, \"6 meters\"},",
          "2704:   {  7, \"8 meters\"},",
          "2705:   {  8, \"10 meters\"},",
          "2706:   {  9, \"15 meters\"},",
          "2707:   { 10, \"20 meters\"},",
          "2708:   { 11, \"50 meters\"},",
          "2709:   { 12, \"100 meters\"},",
          "2710:   { 13, \"150 meters\"},",
          "2711:   { 14, \"Not monitored\"},",
          "2712:   { 15, \"Not available\"},",
          "2713:   { 0, NULL}",
          "2714: };",
          "2715: static value_string_ext lpp_bds_UDREI_vals_ext = VALUE_STRING_EXT_INIT(lpp_bds_UDREI_vals);",
          "2717: static const value_string lpp_bds_RURAI_vals[] = {",
          "2718:   {  0, \"0.75 meter\"},",
          "2719:   {  1, \"1 meter\"},",
          "2720:   {  2, \"1.25 meters\"},",
          "2721:   {  3, \"1.75 meters\"},",
          "2722:   {  4, \"2.25 meters\"},",
          "2723:   {  5, \"3 meters\"},",
          "2724:   {  6, \"3.75 meters\"},",
          "2725:   {  7, \"4.5 meters\"},",
          "2726:   {  8, \"5.25 meters\"},",
          "2727:   {  9, \"6 meters\"},",
          "2728:   { 10, \"7.5 meters\"},",
          "2729:   { 11, \"15 meters\"},",
          "2730:   { 12, \"50 meters\"},",
          "2731:   { 13, \"150 meters\"},",
          "2732:   { 14, \"300 meters\"},",
          "2733:   { 15, \"> 300 meters\"},",
          "2734:   { 0, NULL}",
          "2735: };",
          "2736: static value_string_ext lpp_bds_RURAI_vals_ext = VALUE_STRING_EXT_INIT(lpp_bds_RURAI_vals);",
          "2738: static void",
          "2739: lpp_bds_ECC_DeltaT_r12_fmt(gchar *s, guint32 v)",
          "2740: {",
          "2741:   if ((gint32)v == -4096) {",
          "2742:     g_snprintf(s, ITEM_LABEL_LENGTH, \"Not available (%d)\", (gint32)v);",
          "2743:   } else {",
          "2744:     g_snprintf(s, ITEM_LABEL_LENGTH, \"%g m (%d)\", (float)((gint32)v)*0.1, (gint32)v);",
          "2745:   }",
          "2746: }",
          "2748: static void",
          "2749: lpp_bds_GridIonElement_dt_r12_fmt(gchar *s, guint32 v)",
          "2750: {",
          "2751:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g m (%d)\", (float)((gint32)v)*0.125, (gint32)v);",
          "2752: }",
          "2754: static const value_string lpp_bds_givei_vals[] = {",
          "2755:   {  0, \"0.3 meter\"},",
          "2756:   {  1, \"0.6 meter\"},",
          "2757:   {  2, \"0.9 meter\"},",
          "2758:   {  3, \"1.2 meters\"},",
          "2759:   {  4, \"1.5 meters\"},",
          "2760:   {  5, \"1.8 meters\"},",
          "2761:   {  6, \"2.1 meters\"},",
          "2762:   {  7, \"2.4 meters\"},",
          "2763:   {  8, \"2.7 meters\"},",
          "2764:   {  9, \"3 meters\"},",
          "2765:   { 10, \"3.6 meters\"},",
          "2766:   { 11, \"4.5 meters\"},",
          "2767:   { 12, \"6 meters\"},",
          "2768:   { 13, \"9 meters\"},",
          "2769:   { 14, \"15 meters\"},",
          "2770:   { 15, \"45 meters\"},",
          "2771:   { 0, NULL}",
          "2772: };",
          "2773: static value_string_ext lpp_bds_givei_vals_ext = VALUE_STRING_EXT_INIT(lpp_bds_givei_vals);",
          "2780:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g s (%d)\", tauC, (gint32)v);",
          "",
          "---------------",
          "--- Hunk 97 ---",
          "[Context before]",
          "2399: {",
          "2400:   double b1 = (double)((gint32)v)*pow(2, -10);",
          "2403: }",
          "2405: static void",
          "",
          "[Removed Lines]",
          "2402:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e s (%d)\", b1, (gint32)v);",
          "",
          "[Added Lines]",
          "2788:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g s (%d)\", b1, (gint32)v);",
          "",
          "---------------",
          "--- Hunk 98 ---",
          "[Context before]",
          "2407: {",
          "2408:   double b2 = (double)((gint32)v)*pow(2, -16);",
          "2411: }",
          "2413: static const value_string lpp_utcStandardID_vals[] = {",
          "",
          "[Removed Lines]",
          "2410:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e s/msd (%d)\", b2, (gint32)v);",
          "",
          "[Added Lines]",
          "2796:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g s/msd (%d)\", b2, (gint32)v);",
          "",
          "---------------",
          "--- Hunk 99 ---",
          "[Context before]",
          "2452: {",
          "2453:   double codePhase = (double)v*pow(2, -21);",
          "2456: }",
          "2458: static void",
          "",
          "[Removed Lines]",
          "2455:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e ms (%u)\", codePhase, v);",
          "",
          "[Added Lines]",
          "2841:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g ms (%u)\", codePhase, v);",
          "",
          "---------------",
          "--- Hunk 100 ---",
          "[Context before]",
          "2476: static void",
          "2477: lpp_doppler_fmt(gchar *s, guint32 v)",
          "2478: {",
          "2480: }",
          "2482: static void",
          "",
          "[Removed Lines]",
          "2479:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e m/s (%d)\", (gint32)v*0.04, (gint32)v);",
          "",
          "[Added Lines]",
          "2865:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g m/s (%d)\", (gint32)v*0.04, (gint32)v);",
          "",
          "---------------",
          "--- Hunk 101 ---",
          "[Context before]",
          "2484: {",
          "2485:   double adr = (double)v*pow(2, -10);",
          "2488: }",
          "2490: static void",
          "",
          "[Removed Lines]",
          "2487:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%e m (%u)\", adr, v);",
          "",
          "[Added Lines]",
          "2873:   g_snprintf(s, ITEM_LABEL_LENGTH, \"%g m (%u)\", adr, v);",
          "",
          "---------------",
          "--- Hunk 102 ---",
          "[Context before]",
          "2657: static int",
          "2658: dissect_lpp_EPDU_ID(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "2660:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "2661:                                                             1U, 256U, &lpp_epdu_id, FALSE);",
          "",
          "[Removed Lines]",
          "2659: #line 81 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "3045: #line 84 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 103 ---",
          "[Context before]",
          "2696: static int",
          "2697: dissect_lpp_EPDU_Body(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "2699:   tvbuff_t *lppe_tvb = NULL;",
          "2700:   offset = dissect_per_octet_string(tvb, offset, actx, tree, hf_index,",
          "2701:                                        NO_BOUND, NO_BOUND, FALSE, &lppe_tvb);",
          "",
          "[Removed Lines]",
          "2698: #line 87 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "3084: #line 90 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 104 ---",
          "[Context before]",
          "2842: static int",
          "2843: dissect_lpp_RequestCapabilities(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "2845:   col_append_sep_str(actx->pinfo->cinfo, COL_INFO, NULL, \"Request Capabilities\");",
          "",
          "[Removed Lines]",
          "2844: #line 57 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "3230: #line 60 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 105 ---",
          "[Context before]",
          "2868: static const value_string lpp_T_gnss_id_vals[] = {",
          "2874:   { 0, NULL }",
          "2875: };",
          "2878: static int",
          "2879: dissect_lpp_T_gnss_id(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "2880:   offset = dissect_per_enumerated(tvb, offset, actx, tree, hf_index,",
          "2883:   return offset;",
          "2884: }",
          "",
          "[Removed Lines]",
          "2869:   {   0, \"gps\" },",
          "2870:   {   1, \"sbas\" },",
          "2871:   {   2, \"qzss\" },",
          "2872:   {   3, \"galileo\" },",
          "2873:   {   4, \"glonass\" },",
          "2881:                                      5, NULL, TRUE, 0, NULL);",
          "",
          "[Added Lines]",
          "3255:   { T_GNSS_ID_GPS, \"gps\" },",
          "3256:   { T_GNSS_ID_SBAS, \"sbas\" },",
          "3257:   { T_GNSS_ID_QZSS, \"qzss\" },",
          "3258:   { T_GNSS_ID_GALILEO, \"galileo\" },",
          "3259:   { T_GNSS_ID_GLONASS, \"glonass\" },",
          "3260:   { T_GNSS_ID_BDS, \"bds\" },",
          "3267: #line 1528 \"../../asn1/lpp/lpp.cnf\"",
          "3268:   guint32 gnss_id;",
          "3270:                                      5, &gnss_id, TRUE, 1, NULL);",
          "3272:   actx->private_data = GUINT_TO_POINTER(gnss_id);",
          "",
          "---------------",
          "--- Hunk 106 ---",
          "[Context before]",
          "2902: static int",
          "2903: dissect_lpp_T_sbas_IDs(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "2905:   tvbuff_t *sbas_IDs_tvb = NULL;",
          "2906:   int len;",
          "",
          "[Removed Lines]",
          "2904: #line 1312 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "3297: #line 1562 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 107 ---",
          "[Context before]",
          "2950: static int",
          "2951: dissect_lpp_T_posModes(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "2953:   tvbuff_t *posModes_tvb = NULL;",
          "2954:   int len;",
          "",
          "[Removed Lines]",
          "2952: #line 244 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "3345: #line 247 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 108 ---",
          "[Context before]",
          "3019: static int",
          "3020: dissect_lpp_T_accessTypes(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "3022:   tvbuff_t *accessTypes_tvb = NULL;",
          "3023:   int len;",
          "",
          "[Removed Lines]",
          "3021: #line 101 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "3414: #line 104 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 109 ---",
          "[Context before]",
          "3113: static int",
          "3114: dissect_lpp_T_gnss_ids(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "3116:   tvbuff_t *gnss_ids_tvb = NULL;",
          "3117:   int len;",
          "",
          "[Removed Lines]",
          "3115: #line 1286 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "3508: #line 1533 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 110 ---",
          "[Context before]",
          "3138:     if (len >= 5) {",
          "3139:       proto_tree_add_item(subtree, hf_lpp_T_gnss_ids_glonass, gnss_ids_tvb, 0, 1, ENC_BIG_ENDIAN);",
          "3140:     }",
          "3141:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3534:     if (len >= 6) {",
          "3535:       proto_tree_add_item(subtree, hf_lpp_T_gnss_ids_bds, gnss_ids_tvb, 0, 1, ENC_BIG_ENDIAN);",
          "3536:     }",
          "",
          "---------------",
          "--- Hunk 111 ---",
          "[Context before]",
          "3192: static int",
          "3193: dissect_lpp_T_ionoModel(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "3195:   tvbuff_t *ionoModel_tvb = NULL;",
          "3196:   int len;",
          "",
          "[Removed Lines]",
          "3194: #line 1165 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "3590: #line 1395 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 112 ---",
          "[Context before]",
          "3324: static int",
          "3325: dissect_lpp_T_clockModel(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "3327:   tvbuff_t *clockModel_tvb = NULL;",
          "3328:   int len;",
          "",
          "[Removed Lines]",
          "3326: #line 1182 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "3722: #line 1412 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 113 ---",
          "[Context before]",
          "3349:     if (len >= 5) {",
          "3350:       proto_tree_add_item(subtree, hf_lpp_T_clockModel_model_5, clockModel_tvb, 0, 1, ENC_BIG_ENDIAN);",
          "3351:     }",
          "3352:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3748:     if (len >= 6) {",
          "3749:       proto_tree_add_item(subtree, hf_lpp_T_clockModel_model_6, clockModel_tvb, 0, 1, ENC_BIG_ENDIAN);",
          "3750:     }",
          "",
          "---------------",
          "--- Hunk 114 ---",
          "[Context before]",
          "3361: static int",
          "3362: dissect_lpp_T_orbitModel(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "3364:   tvbuff_t *orbitModel_tvb = NULL;",
          "3365:   int len;",
          "",
          "[Removed Lines]",
          "3363: #line 1208 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "3762: #line 1441 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 115 ---",
          "[Context before]",
          "3386:     if (len >= 5) {",
          "3387:       proto_tree_add_item(subtree, hf_lpp_T_orbitModel_model_5, orbitModel_tvb, 0, 1, ENC_BIG_ENDIAN);",
          "3388:     }",
          "3389:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3788:     if (len >= 6) {",
          "3789:       proto_tree_add_item(subtree, hf_lpp_T_orbitModel_model_6, orbitModel_tvb, 0, 1, ENC_BIG_ENDIAN);",
          "3790:     }",
          "",
          "---------------",
          "--- Hunk 116 ---",
          "[Context before]",
          "3484: static int",
          "3485: dissect_lpp_T_almanacModel(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "3487:   tvbuff_t *almanacModel_tvb = NULL;",
          "3488:   int len;",
          "",
          "[Removed Lines]",
          "3486: #line 1234 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "3888: #line 1470 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 117 ---",
          "[Context before]",
          "3512:     if (len >= 6) {",
          "3513:       proto_tree_add_item(subtree, hf_lpp_T_almanacModel_model_6, almanacModel_tvb, 0, 1, ENC_BIG_ENDIAN);",
          "3514:     }",
          "3515:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3917:     if (len >= 7) {",
          "3918:       proto_tree_add_item(subtree, hf_lpp_T_almanacModel_model_7, almanacModel_tvb, 0, 1, ENC_BIG_ENDIAN);",
          "3919:     }",
          "",
          "---------------",
          "--- Hunk 118 ---",
          "[Context before]",
          "3538: static int",
          "3539: dissect_lpp_T_utc_Model(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "3541:   tvbuff_t *utc_Model_tvb = NULL;",
          "3542:   int len;",
          "",
          "[Removed Lines]",
          "3540: #line 1263 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "3945: #line 1502 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 119 ---",
          "[Context before]",
          "3560:     if (len >= 4) {",
          "3561:       proto_tree_add_item(subtree, hf_lpp_T_utc_Model_model_4, utc_Model_tvb, 0, 1, ENC_BIG_ENDIAN);",
          "3562:     }",
          "3563:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3968:     if (len >= 5) {",
          "3969:       proto_tree_add_item(subtree, hf_lpp_T_utc_Model_model_5, utc_Model_tvb, 0, 1, ENC_BIG_ENDIAN);",
          "3970:     }",
          "",
          "---------------",
          "--- Hunk 120 ---",
          "[Context before]",
          "3595: }",
          "3598: static const per_sequence_t GNSS_GenericAssistDataSupportElement_sequence[] = {",
          "3599:   { &hf_lpp_gnss_ID         , ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lpp_GNSS_ID },",
          "3600:   { &hf_lpp_sbas_ID         , ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lpp_SBAS_ID },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4006: static const per_sequence_t BDS_DifferentialCorrectionsSupport_r12_sequence[] = {",
          "4007:   { &hf_lpp_gnssSignalIDs   , ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lpp_GNSS_SignalIDs },",
          "4008:   { NULL, 0, 0, NULL }",
          "4009: };",
          "4011: static int",
          "4012: dissect_lpp_BDS_DifferentialCorrectionsSupport_r12(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "4013:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "4014:                                    ett_lpp_BDS_DifferentialCorrectionsSupport_r12, BDS_DifferentialCorrectionsSupport_r12_sequence);",
          "4016:   return offset;",
          "4017: }",
          "4020: static const per_sequence_t BDS_GridModelSupport_r12_sequence[] = {",
          "4021:   { NULL, ASN1_EXTENSION_ROOT, 0, NULL }",
          "4022: };",
          "4024: static int",
          "4025: dissect_lpp_BDS_GridModelSupport_r12(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "4026:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "4027:                                    ett_lpp_BDS_GridModelSupport_r12, BDS_GridModelSupport_r12_sequence);",
          "4029:   return offset;",
          "4030: }",
          "4033: static const per_sequence_t GNSS_GenericAssistDataSupportElement_eag_1_sequence[] = {",
          "4034:   { &hf_lpp_bds_DifferentialCorrectionsSupport_r12, ASN1_NO_EXTENSIONS     , ASN1_OPTIONAL    , dissect_lpp_BDS_DifferentialCorrectionsSupport_r12 },",
          "4035:   { &hf_lpp_bds_GridModelSupport_r12, ASN1_NO_EXTENSIONS     , ASN1_OPTIONAL    , dissect_lpp_BDS_GridModelSupport_r12 },",
          "4036:   { NULL, 0, 0, NULL }",
          "4037: };",
          "4039: static int",
          "4040: dissect_lpp_GNSS_GenericAssistDataSupportElement_eag_1(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "4041:   offset = dissect_per_sequence_eag(tvb, offset, actx, tree, GNSS_GenericAssistDataSupportElement_eag_1_sequence);",
          "4043:   return offset;",
          "4044: }",
          "",
          "---------------",
          "--- Hunk 121 ---",
          "[Context before]",
          "3607:   { &hf_lpp_gnss_AlmanacSupport, ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lpp_GNSS_AlmanacSupport },",
          "3608:   { &hf_lpp_gnss_UTC_ModelSupport, ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lpp_GNSS_UTC_ModelSupport },",
          "3609:   { &hf_lpp_gnss_AuxiliaryInformationSupport, ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lpp_GNSS_AuxiliaryInformationSupport },",
          "3610:   { NULL, 0, 0, NULL }",
          "3611: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4059:   { &hf_lpp_dummy_eag_field , ASN1_NOT_EXTENSION_ROOT, ASN1_NOT_OPTIONAL, dissect_lpp_GNSS_GenericAssistDataSupportElement_eag_1 },",
          "",
          "---------------",
          "--- Hunk 122 ---",
          "[Context before]",
          "3706: static int",
          "3707: dissect_lpp_T_otdoa_Mode(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "3709:   tvbuff_t *otdoa_Mode_tvb = NULL;",
          "3710:   int len;",
          "",
          "[Removed Lines]",
          "3708: #line 345 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "4158: #line 351 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 123 ---",
          "[Context before]",
          "3855: static int",
          "3856: dissect_lpp_T_ecid_MeasSupported(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "3858:   tvbuff_t *ecid_MeasSupported_tvb = NULL;",
          "3859:   int len;",
          "",
          "[Removed Lines]",
          "3857: #line 1364 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "4307: #line 1614 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 124 ---",
          "[Context before]",
          "3982: static int",
          "3983: dissect_lpp_ProvideCapabilities(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "3985:   col_append_sep_str(actx->pinfo->cinfo, COL_INFO, NULL, \"Provide Capabilities\");",
          "",
          "[Removed Lines]",
          "3984: #line 60 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "4434: #line 63 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 125 ---",
          "[Context before]",
          "4228:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "4229:                                                             0U, 4095U, NULL, FALSE);",
          "4232:   proto_item_append_text(actx->created_item, \" (days for glonass, weeks otherwise)\");",
          "",
          "[Removed Lines]",
          "4231: #line 1111 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "4681: #line 1341 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 126 ---",
          "[Context before]",
          "4242:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "4243:                                                             0U, 255U, NULL, FALSE);",
          "4246:   proto_item_append_text(actx->created_item, \" (units of 15 mns for glonass, hours otherwise)\");",
          "",
          "[Removed Lines]",
          "4245: #line 1114 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "4695: #line 1344 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 127 ---",
          "[Context before]",
          "4256:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "4257:                                                             0U, 15U, NULL, FALSE);",
          "4260:   proto_item_append_text(actx->created_item, \" (units of 30 mns for glonass, hours otherwise)\");",
          "",
          "[Removed Lines]",
          "4259: #line 1117 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "4709: #line 1347 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 128 ---",
          "[Context before]",
          "4452:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "4453:                                                             0U, 3599U, NULL, FALSE);",
          "4456:   proto_item_append_text(actx->created_item, \" s\");",
          "",
          "[Removed Lines]",
          "4455: #line 1120 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "4905: #line 1350 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 129 ---",
          "[Context before]",
          "4466:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "4467:                                                             0U, 999U, NULL, FALSE);",
          "4470:   proto_item_append_text(actx->created_item, \" ms\");",
          "",
          "[Removed Lines]",
          "4469: #line 1123 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "4919: #line 1353 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 130 ---",
          "[Context before]",
          "4609: }",
          "4612: static const per_sequence_t GNSS_GenericAssistDataReqElement_sequence[] = {",
          "4613:   { &hf_lpp_gnss_ID         , ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lpp_GNSS_ID },",
          "4614:   { &hf_lpp_sbas_ID         , ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lpp_SBAS_ID },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5062: static const per_sequence_t BDS_DifferentialCorrectionsReq_r12_sequence[] = {",
          "5063:   { &hf_lpp_dgnss_SignalsReq, ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lpp_GNSS_SignalIDs },",
          "5064:   { NULL, 0, 0, NULL }",
          "5065: };",
          "5067: static int",
          "5068: dissect_lpp_BDS_DifferentialCorrectionsReq_r12(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "5069:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "5070:                                    ett_lpp_BDS_DifferentialCorrectionsReq_r12, BDS_DifferentialCorrectionsReq_r12_sequence);",
          "5072:   return offset;",
          "5073: }",
          "5076: static const per_sequence_t BDS_GridModelReq_r12_sequence[] = {",
          "5077:   { NULL, ASN1_EXTENSION_ROOT, 0, NULL }",
          "5078: };",
          "5080: static int",
          "5081: dissect_lpp_BDS_GridModelReq_r12(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "5082:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "5083:                                    ett_lpp_BDS_GridModelReq_r12, BDS_GridModelReq_r12_sequence);",
          "5085:   return offset;",
          "5086: }",
          "5089: static const per_sequence_t GNSS_GenericAssistDataReqElement_eag_1_sequence[] = {",
          "5090:   { &hf_lpp_bds_DifferentialCorrectionsReq_r12, ASN1_NO_EXTENSIONS     , ASN1_OPTIONAL    , dissect_lpp_BDS_DifferentialCorrectionsReq_r12 },",
          "5091:   { &hf_lpp_bds_GridModelReq_r12, ASN1_NO_EXTENSIONS     , ASN1_OPTIONAL    , dissect_lpp_BDS_GridModelReq_r12 },",
          "5092:   { NULL, 0, 0, NULL }",
          "5093: };",
          "5095: static int",
          "5096: dissect_lpp_GNSS_GenericAssistDataReqElement_eag_1(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "5097:   offset = dissect_per_sequence_eag(tvb, offset, actx, tree, GNSS_GenericAssistDataReqElement_eag_1_sequence);",
          "5099:   return offset;",
          "5100: }",
          "",
          "---------------",
          "--- Hunk 131 ---",
          "[Context before]",
          "4621:   { &hf_lpp_gnss_AlmanacReq , ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lpp_GNSS_AlmanacReq },",
          "4622:   { &hf_lpp_gnss_UTCModelReq, ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lpp_GNSS_UTC_ModelReq },",
          "4623:   { &hf_lpp_gnss_AuxiliaryInformationReq, ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lpp_GNSS_AuxiliaryInformationReq },",
          "4624:   { NULL, 0, 0, NULL }",
          "4625: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5115:   { &hf_lpp_dummy_eag_field , ASN1_NOT_EXTENSION_ROOT, ASN1_NOT_OPTIONAL, dissect_lpp_GNSS_GenericAssistDataReqElement_eag_1 },",
          "",
          "---------------",
          "--- Hunk 132 ---",
          "[Context before]",
          "4772: static int",
          "4773: dissect_lpp_RequestAssistanceData(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "4775:   col_append_sep_str(actx->pinfo->cinfo, COL_INFO, NULL, \"Request Assistance Data\");",
          "",
          "[Removed Lines]",
          "4774: #line 63 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "5266: #line 66 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 133 ---",
          "[Context before]",
          "4829: static int",
          "4830: dissect_lpp_T_notificationOfLeapSecond(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "4832:   tvbuff_t *notificationOfLeapSecond_tvb = NULL;",
          "4833:   offset = dissect_per_bit_string(tvb, offset, actx, tree, -1,",
          "4834:                                      2, 2, FALSE, &notificationOfLeapSecond_tvb, NULL);",
          "",
          "[Removed Lines]",
          "4831: #line 365 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "5323: #line 371 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 134 ---",
          "[Context before]",
          "4840:   if (notificationOfLeapSecond_tvb) {",
          "4841:     actx->created_item = proto_tree_add_uint(tree, hf_index, notificationOfLeapSecond_tvb, 0, 1, tvb_get_bits8(notificationOfLeapSecond_tvb, 0, 2));",
          "4842:   }",
          "",
          "[Removed Lines]",
          "4839: #line 369 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "5331: #line 375 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 135 ---",
          "[Context before]",
          "5513: static int",
          "5514: dissect_lpp_T_dataID(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "5516:   tvbuff_t *dataID_tvb = NULL;",
          "5517:   offset = dissect_per_bit_string(tvb, offset, actx, tree, -1,",
          "5518:                                      2, 2, FALSE, &dataID_tvb, NULL);",
          "",
          "[Removed Lines]",
          "5515: #line 383 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "6007: #line 389 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 136 ---",
          "[Context before]",
          "5524:   if (dataID_tvb) {",
          "5525:     actx->created_item = proto_tree_add_uint(tree, hf_index, dataID_tvb, 0, 1, tvb_get_bits8(dataID_tvb, 0, 2));",
          "5526:   }",
          "",
          "[Removed Lines]",
          "5523: #line 387 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "6015: #line 393 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 137 ---",
          "[Context before]",
          "5566: static int",
          "5568:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "5571:   return offset;",
          "5572: }",
          "5575: static const per_sequence_t NeQuickModelParameter_sequence[] = {",
          "5579:   { &hf_lpp_ionoStormFlag1  , ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lpp_INTEGER_0_1 },",
          "5580:   { &hf_lpp_ionoStormFlag2  , ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lpp_INTEGER_0_1 },",
          "5581:   { &hf_lpp_ionoStormFlag3  , ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lpp_INTEGER_0_1 },",
          "",
          "[Removed Lines]",
          "5567: dissect_lpp_INTEGER_0_4095(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "5569:                                                             0U, 4095U, NULL, FALSE);",
          "5576:   { &hf_lpp_ai0             , ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lpp_INTEGER_0_4095 },",
          "5577:   { &hf_lpp_ai1             , ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lpp_INTEGER_0_4095 },",
          "5578:   { &hf_lpp_ai2             , ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lpp_INTEGER_0_4095 },",
          "",
          "[Added Lines]",
          "6059: dissect_lpp_INTEGER_0_2047(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "6061:                                                             0U, 2047U, NULL, FALSE);",
          "6063:   return offset;",
          "6064: }",
          "6068: static int",
          "6069: dissect_lpp_INTEGER_M1024_1023(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "6070:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "6071:                                                             -1024, 1023U, NULL, FALSE);",
          "6073:   return offset;",
          "6074: }",
          "6078: static int",
          "6079: dissect_lpp_INTEGER_M8192_8191(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "6080:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "6081:                                                             -8192, 8191U, NULL, FALSE);",
          "6088:   { &hf_lpp_ai0             , ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lpp_INTEGER_0_2047 },",
          "6089:   { &hf_lpp_ai1             , ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lpp_INTEGER_M1024_1023 },",
          "6090:   { &hf_lpp_ai2             , ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lpp_INTEGER_M8192_8191 },",
          "",
          "---------------",
          "--- Hunk 138 ---",
          "[Context before]",
          "5731:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "5732:                                                             -128, 127U, NULL, FALSE);",
          "5735:   proto_item_append_text(actx->created_item, \" s\");",
          "",
          "[Removed Lines]",
          "5734: #line 464 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "6246: #line 470 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 139 ---",
          "[Context before]",
          "5779:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "5780:                                                             0U, 3599U, NULL, FALSE);",
          "5783:   proto_item_append_text(actx->created_item, \" s\");",
          "",
          "[Removed Lines]",
          "5782: #line 467 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "6294: #line 473 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 140 ---",
          "[Context before]",
          "5890: static int",
          "5892:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "5895:   return offset;",
          "5896: }",
          "",
          "[Removed Lines]",
          "5891: dissect_lpp_INTEGER_M2048_2047(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "5893:                                                             -2048, 2047U, NULL, FALSE);",
          "",
          "[Added Lines]",
          "6403: dissect_lpp_INTEGER_M32_31(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "6405:                                                             -32, 31U, NULL, FALSE);",
          "",
          "---------------",
          "--- Hunk 141 ---",
          "[Context before]",
          "5900: static int",
          "5902:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "5905:   return offset;",
          "5906: }",
          "",
          "[Removed Lines]",
          "5901: dissect_lpp_INTEGER_M131072_131071(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "5903:                                                             -131072, 131071U, NULL, FALSE);",
          "",
          "[Added Lines]",
          "6413: dissect_lpp_INTEGER_M512_511(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "6415:                                                             -512, 511U, NULL, FALSE);",
          "",
          "---------------",
          "--- Hunk 142 ---",
          "[Context before]",
          "5910: static int",
          "5912:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "5915:   return offset;",
          "5916: }",
          "5939: static int",
          "5940: dissect_lpp_StandardClockModelElement(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "",
          "[Removed Lines]",
          "5911: dissect_lpp_INTEGER_M134217728_134217727(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "5913:                                                             -134217728, 134217727U, NULL, FALSE);",
          "5920: static int",
          "5921: dissect_lpp_INTEGER_M512_511(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "5922:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "5923:                                                             -512, 511U, NULL, FALSE);",
          "5925:   return offset;",
          "5926: }",
          "5929: static const per_sequence_t StandardClockModelElement_sequence[] = {",
          "5930:   { &hf_lpp_stanClockToc    , ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lpp_INTEGER_0_16383 },",
          "5931:   { &hf_lpp_stanClockAF2    , ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lpp_INTEGER_M2048_2047 },",
          "5932:   { &hf_lpp_stanClockAF1    , ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lpp_INTEGER_M131072_131071 },",
          "5933:   { &hf_lpp_stanClockAF0    , ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lpp_INTEGER_M134217728_134217727 },",
          "5934:   { &hf_lpp_stanClockTgd    , ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lpp_INTEGER_M512_511 },",
          "5935:   { &hf_lpp_stanModelID     , ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lpp_INTEGER_0_1 },",
          "5936:   { NULL, 0, 0, NULL }",
          "5937: };",
          "",
          "[Added Lines]",
          "6423: dissect_lpp_INTEGER_0_255(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "6425:                                                             0U, 255U, NULL, FALSE);",
          "6431: static const per_sequence_t StandardClockModelElement_sequence[] = {",
          "6432:   { &hf_lpp_stanClockToc    , ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lpp_INTEGER_0_16383 },",
          "6433:   { &hf_lpp_stanClockAF2    , ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lpp_INTEGER_M32_31 },",
          "6434:   { &hf_lpp_stanClockAF1    , ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lpp_INTEGER_M1048576_1048575 },",
          "6435:   { &hf_lpp_stanClockAF0    , ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lpp_INTEGER_M1073741824_1073741823 },",
          "6436:   { &hf_lpp_stanClockTgd    , ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lpp_INTEGER_M512_511 },",
          "6437:   { &hf_lpp_sisa            , ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lpp_INTEGER_0_255 },",
          "6438:   { &hf_lpp_stanModelID     , ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lpp_INTEGER_0_1 },",
          "6439:   { NULL, 0, 0, NULL }",
          "6440: };",
          "",
          "---------------",
          "--- Hunk 143 ---",
          "[Context before]",
          "6075: }",
          "6088: static const per_sequence_t GLONASS_ClockModel_sequence[] = {",
          "6089:   { &hf_lpp_gloTau          , ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lpp_INTEGER_M2097152_2097151 },",
          "6090:   { &hf_lpp_gloGamma        , ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lpp_INTEGER_M1024_1023 },",
          "",
          "[Removed Lines]",
          "6079: static int",
          "6080: dissect_lpp_INTEGER_M1024_1023(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "6081:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "6082:                                                             -1024, 1023U, NULL, FALSE);",
          "6084:   return offset;",
          "6085: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 144 ---",
          "[Context before]",
          "6111: }",
          "6114: static const per_sequence_t SBAS_ClockModel_sequence[] = {",
          "6115:   { &hf_lpp_sbasTo          , ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lpp_INTEGER_0_5399 },",
          "6116:   { &hf_lpp_sbasAgfo        , ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lpp_INTEGER_M2048_2047 },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6608: static int",
          "6609: dissect_lpp_INTEGER_M2048_2047(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "6610:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "6611:                                                             -2048, 2047U, NULL, FALSE);",
          "6613:   return offset;",
          "6614: }",
          "",
          "---------------",
          "--- Hunk 145 ---",
          "[Context before]",
          "6127: }",
          "6130: static const value_string lpp_GNSS_ClockModel_vals[] = {",
          "6131:   {   0, \"standardClockModelList\" },",
          "6132:   {   1, \"nav-ClockModel\" },",
          "6133:   {   2, \"cnav-ClockModel\" },",
          "6134:   {   3, \"glonass-ClockModel\" },",
          "6135:   {   4, \"sbas-ClockModel\" },",
          "6136:   { 0, NULL }",
          "6137: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6634: static int",
          "6635: dissect_lpp_INTEGER_0_31(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "6636:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "6637:                                                             0U, 31U, NULL, FALSE);",
          "6639:   return offset;",
          "6640: }",
          "6644: static int",
          "6645: dissect_lpp_INTEGER_0_131071(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "6646:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "6647:                                                             0U, 131071U, NULL, FALSE);",
          "6649:   return offset;",
          "6650: }",
          "6653: static const per_sequence_t BDS_ClockModel_r12_sequence[] = {",
          "6654:   { &hf_lpp_bdsAODC_r12     , ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lpp_INTEGER_0_31 },",
          "6655:   { &hf_lpp_bdsToc_r12      , ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lpp_INTEGER_0_131071 },",
          "6656:   { &hf_lpp_bdsA0_r12       , ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lpp_INTEGER_M8388608_8388607 },",
          "6657:   { &hf_lpp_bdsA1_r12       , ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lpp_INTEGER_M2097152_2097151 },",
          "6658:   { &hf_lpp_bdsA2_r12       , ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lpp_INTEGER_M1024_1023 },",
          "6659:   { &hf_lpp_bdsTgd1_r12     , ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lpp_INTEGER_M512_511 },",
          "6660:   { NULL, 0, 0, NULL }",
          "6661: };",
          "6663: static int",
          "6664: dissect_lpp_BDS_ClockModel_r12(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "6665:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "6666:                                    ett_lpp_BDS_ClockModel_r12, BDS_ClockModel_r12_sequence);",
          "6668:   return offset;",
          "6669: }",
          "6678:   {   5, \"bds-ClockModel-r12\" },",
          "",
          "---------------",
          "--- Hunk 146 ---",
          "[Context before]",
          "6142:   {   2, &hf_lpp_cnav_ClockModel , ASN1_EXTENSION_ROOT    , dissect_lpp_CNAV_ClockModel },",
          "6143:   {   3, &hf_lpp_glonass_ClockModel, ASN1_EXTENSION_ROOT    , dissect_lpp_GLONASS_ClockModel },",
          "6144:   {   4, &hf_lpp_sbas_ClockModel , ASN1_EXTENSION_ROOT    , dissect_lpp_SBAS_ClockModel },",
          "6145:   { 0, NULL, 0, NULL }",
          "6146: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6688:   {   5, &hf_lpp_bds_ClockModel_r12, ASN1_NOT_EXTENSION_ROOT, dissect_lpp_BDS_ClockModel_r12 },",
          "",
          "---------------",
          "--- Hunk 147 ---",
          "[Context before]",
          "6175: }",
          "6188: static const per_sequence_t NavModelKeplerianSet_sequence[] = {",
          "6189:   { &hf_lpp_keplerToe       , ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lpp_INTEGER_0_16383 },",
          "6190:   { &hf_lpp_keplerW         , ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lpp_INTEGER_M2147483648_2147483647 },",
          "",
          "[Removed Lines]",
          "6179: static int",
          "6180: dissect_lpp_INTEGER_M8192_8191(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "6181:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "6182:                                                             -8192, 8191U, NULL, FALSE);",
          "6184:   return offset;",
          "6185: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 148 ---",
          "[Context before]",
          "6241: }",
          "6254: static const per_sequence_t T_addNAVparam_sequence[] = {",
          "6255:   { &hf_lpp_ephemCodeOnL2   , ASN1_NO_EXTENSIONS     , ASN1_NOT_OPTIONAL, dissect_lpp_INTEGER_0_3 },",
          "6256:   { &hf_lpp_ephemL2Pflag    , ASN1_NO_EXTENSIONS     , ASN1_NOT_OPTIONAL, dissect_lpp_INTEGER_0_1 },",
          "",
          "[Removed Lines]",
          "6245: static int",
          "6246: dissect_lpp_INTEGER_0_31(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "6247:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "6248:                                                             0U, 31U, NULL, FALSE);",
          "6250:   return offset;",
          "6251: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 149 ---",
          "[Context before]",
          "6334: static int",
          "6335: dissect_lpp_T_cnavMo(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "6337:   gint64 cnavMo;",
          "6338:   int curr_offset = offset;",
          "6339:   offset = dissect_per_constrained_integer_64b(tvb, offset, actx, tree, hf_index,",
          "",
          "[Removed Lines]",
          "6336: #line 686 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "6860: #line 725 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 150 ---",
          "[Context before]",
          "6346:   PROTO_ITEM_SET_HIDDEN(actx->created_item);",
          "6347:   actx->created_item = proto_tree_add_int64_format_value(tree, hf_index, tvb, curr_offset>>3, (offset+7-curr_offset)>>3,",
          "6349:                                                          (double)cnavMo*pow(2, -32), cnavMo);",
          "",
          "[Removed Lines]",
          "6345: #line 691 \"../../asn1/lpp/lpp.cnf\"",
          "6348:                                                          cnavMo, \"%e semi-circles (%\"G_GINT64_MODIFIER\"d)\",",
          "",
          "[Added Lines]",
          "6869: #line 730 \"../../asn1/lpp/lpp.cnf\"",
          "6872:                                                          cnavMo, \"%g semi-circles (%\"G_GINT64_MODIFIER\"d)\",",
          "",
          "---------------",
          "--- Hunk 151 ---",
          "[Context before]",
          "6357: static int",
          "6358: dissect_lpp_T_cnavE(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "6360:   guint64 cnavE;",
          "6361:   int curr_offset = offset;",
          "6362:   offset = dissect_per_constrained_integer_64b(tvb, offset, actx, tree, hf_index,",
          "",
          "[Removed Lines]",
          "6359: #line 697 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "6883: #line 736 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 152 ---",
          "[Context before]",
          "6369:   PROTO_ITEM_SET_HIDDEN(actx->created_item);",
          "6370:   actx->created_item = proto_tree_add_uint64_format_value(tree, hf_index, tvb, curr_offset>>3, (offset+7-curr_offset)>>3,",
          "6372:                                                           (double)cnavE*pow(2, -34), cnavE);",
          "",
          "[Removed Lines]",
          "6368: #line 702 \"../../asn1/lpp/lpp.cnf\"",
          "6371:                                                           cnavE, \"%e (%\"G_GINT64_MODIFIER\"u)\",",
          "",
          "[Added Lines]",
          "6892: #line 741 \"../../asn1/lpp/lpp.cnf\"",
          "6895:                                                           cnavE, \"%g (%\"G_GINT64_MODIFIER\"u)\",",
          "",
          "---------------",
          "--- Hunk 153 ---",
          "[Context before]",
          "6380: static int",
          "6381: dissect_lpp_T_cnavOmega(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "6383:   gint64 cnavOmega;",
          "6384:   int curr_offset = offset;",
          "6385:   offset = dissect_per_constrained_integer_64b(tvb, offset, actx, tree, hf_index,",
          "",
          "[Removed Lines]",
          "6382: #line 708 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "6906: #line 747 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 154 ---",
          "[Context before]",
          "6392:   PROTO_ITEM_SET_HIDDEN(actx->created_item);",
          "6393:   actx->created_item = proto_tree_add_int64_format_value(tree, hf_index, tvb, curr_offset>>3, (offset+7-curr_offset)>>3,",
          "6395:                                                          (double)cnavOmega*pow(2, -32), cnavOmega);",
          "",
          "[Removed Lines]",
          "6391: #line 713 \"../../asn1/lpp/lpp.cnf\"",
          "6394:                                                          cnavOmega, \"%e semi-circles (%\"G_GINT64_MODIFIER\"d)\",",
          "",
          "[Added Lines]",
          "6915: #line 752 \"../../asn1/lpp/lpp.cnf\"",
          "6918:                                                          cnavOmega, \"%g semi-circles (%\"G_GINT64_MODIFIER\"d)\",",
          "",
          "---------------",
          "--- Hunk 155 ---",
          "[Context before]",
          "6403: static int",
          "6404: dissect_lpp_T_cnavOMEGA0(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "6406:   gint64 cnavOMEGA0;",
          "6407:   int curr_offset = offset;",
          "6408:   offset = dissect_per_constrained_integer_64b(tvb, offset, actx, tree, hf_index,",
          "",
          "[Removed Lines]",
          "6405: #line 719 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "6929: #line 758 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 156 ---",
          "[Context before]",
          "6415:   PROTO_ITEM_SET_HIDDEN(actx->created_item);",
          "6416:   actx->created_item = proto_tree_add_int64_format_value(tree, hf_index, tvb, curr_offset>>3, (offset+7-curr_offset)>>3,",
          "6418:                                                          (double)cnavOMEGA0*pow(2, -32), cnavOMEGA0);",
          "",
          "[Removed Lines]",
          "6414: #line 724 \"../../asn1/lpp/lpp.cnf\"",
          "6417:                                                          cnavOMEGA0, \"%e semi-circles (%\"G_GINT64_MODIFIER\"d)\",",
          "",
          "[Added Lines]",
          "6938: #line 763 \"../../asn1/lpp/lpp.cnf\"",
          "6941:                                                          cnavOMEGA0, \"%g semi-circles (%\"G_GINT64_MODIFIER\"d)\",",
          "",
          "---------------",
          "--- Hunk 157 ---",
          "[Context before]",
          "6426: static int",
          "6427: dissect_lpp_T_cnavIo(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "6429:   gint64 cnavIo;",
          "6430:   int curr_offset = offset;",
          "6431:   offset = dissect_per_constrained_integer_64b(tvb, offset, actx, tree, hf_index,",
          "",
          "[Removed Lines]",
          "6428: #line 733 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "6952: #line 772 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 158 ---",
          "[Context before]",
          "6438:   PROTO_ITEM_SET_HIDDEN(actx->created_item);",
          "6439:   actx->created_item = proto_tree_add_int64_format_value(tree, hf_index, tvb, curr_offset>>3, (offset+7-curr_offset)>>3,",
          "6441:                                                          (double)cnavIo*pow(2, -32), cnavIo);",
          "",
          "[Removed Lines]",
          "6437: #line 738 \"../../asn1/lpp/lpp.cnf\"",
          "6440:                                                          cnavIo, \"%e semi-circles (%\"G_GINT64_MODIFIER\"d)\",",
          "",
          "[Added Lines]",
          "6961: #line 777 \"../../asn1/lpp/lpp.cnf\"",
          "6964:                                                          cnavIo, \"%g semi-circles (%\"G_GINT64_MODIFIER\"d)\",",
          "",
          "---------------",
          "--- Hunk 159 ---",
          "[Context before]",
          "6483:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "6484:                                                             0U, 31U, NULL, FALSE);",
          "6487:   proto_item_append_text(actx->created_item, \" days\");",
          "",
          "[Removed Lines]",
          "6486: #line 765 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "7010: #line 804 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 160 ---",
          "[Context before]",
          "6495: static int",
          "6496: dissect_lpp_T_gloP1(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "6498:   tvbuff_t *gloP1_tvb = NULL;",
          "6499:   offset = dissect_per_bit_string(tvb, offset, actx, tree, -1,",
          "6500:                                      2, 2, FALSE, &gloP1_tvb, NULL);",
          "",
          "[Removed Lines]",
          "6497: #line 768 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "7021: #line 807 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 161 ---",
          "[Context before]",
          "6506:   if (gloP1_tvb) {",
          "6507:     actx->created_item = proto_tree_add_uint(tree, hf_index, gloP1_tvb, 0, 1, tvb_get_bits8(gloP1_tvb, 0, 2));",
          "6508:     proto_item_append_text(actx->created_item, \" mn\");",
          "",
          "[Removed Lines]",
          "6505: #line 772 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "7029: #line 811 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 162 ---",
          "[Context before]",
          "6559: }",
          "6562: static const per_sequence_t NavModel_SBAS_ECEF_sequence[] = {",
          "6563:   { &hf_lpp_sbasTo          , ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lpp_INTEGER_0_5399 },",
          "6564:   { &hf_lpp_sbasAccuracy    , ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lpp_BIT_STRING_SIZE_4 },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7087: static int",
          "7088: dissect_lpp_INTEGER_M131072_131071(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "7089:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "7090:                                                             -131072, 131071U, NULL, FALSE);",
          "7092:   return offset;",
          "7093: }",
          "",
          "---------------",
          "--- Hunk 163 ---",
          "[Context before]",
          "6583: }",
          "6586: static const value_string lpp_GNSS_OrbitModel_vals[] = {",
          "6587:   {   0, \"keplerianSet\" },",
          "6588:   {   1, \"nav-KeplerianSet\" },",
          "6589:   {   2, \"cnav-KeplerianSet\" },",
          "6590:   {   3, \"glonass-ECEF\" },",
          "6591:   {   4, \"sbas-ECEF\" },",
          "6592:   { 0, NULL }",
          "6593: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7121: static int",
          "7122: dissect_lpp_T_bdsURAI_r12(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "7123:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "7124:                                                             0U, 15U, NULL, FALSE);",
          "7126: #line 880 \"../../asn1/lpp/lpp.cnf\"",
          "7127:   proto_item_append_text(actx->created_item, \" m\");",
          "7130:   return offset;",
          "7131: }",
          "7134: static const per_sequence_t NavModel_BDS_KeplerianSet_r12_sequence[] = {",
          "7135:   { &hf_lpp_bdsAODE_r12     , ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lpp_INTEGER_0_31 },",
          "7136:   { &hf_lpp_bdsURAI_r12     , ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lpp_T_bdsURAI_r12 },",
          "7137:   { &hf_lpp_bdsToe_r12      , ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lpp_INTEGER_0_131071 },",
          "7138:   { &hf_lpp_bdsAPowerHalf_r12, ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lpp_INTEGER_0_4294967295 },",
          "7139:   { &hf_lpp_bdsE_r12        , ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lpp_INTEGER_0_4294967295 },",
          "7140:   { &hf_lpp_bdsW_r12        , ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lpp_INTEGER_M2147483648_2147483647 },",
          "7141:   { &hf_lpp_bdsDeltaN_r12   , ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lpp_INTEGER_M32768_32767 },",
          "7142:   { &hf_lpp_bdsM0_r12       , ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lpp_INTEGER_M2147483648_2147483647 },",
          "7143:   { &hf_lpp_bdsOmega0_r12   , ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lpp_INTEGER_M2147483648_2147483647 },",
          "7144:   { &hf_lpp_bdsOmegaDot_r12 , ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lpp_INTEGER_M8388608_8388607 },",
          "7145:   { &hf_lpp_bdsI0_r12       , ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lpp_INTEGER_M2147483648_2147483647 },",
          "7146:   { &hf_lpp_bdsIDot_r12     , ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lpp_INTEGER_M8192_8191 },",
          "7147:   { &hf_lpp_bdsCuc_r12      , ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lpp_INTEGER_M131072_131071 },",
          "7148:   { &hf_lpp_bdsCus_r12      , ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lpp_INTEGER_M131072_131071 },",
          "7149:   { &hf_lpp_bdsCrc_r12      , ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lpp_INTEGER_M131072_131071 },",
          "7150:   { &hf_lpp_bdsCrs_r12      , ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lpp_INTEGER_M131072_131071 },",
          "7151:   { &hf_lpp_bdsCic_r12      , ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lpp_INTEGER_M131072_131071 },",
          "7152:   { &hf_lpp_bdsCis_r12      , ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lpp_INTEGER_M131072_131071 },",
          "7153:   { NULL, 0, 0, NULL }",
          "7154: };",
          "7156: static int",
          "7157: dissect_lpp_NavModel_BDS_KeplerianSet_r12(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "7158:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "7159:                                    ett_lpp_NavModel_BDS_KeplerianSet_r12, NavModel_BDS_KeplerianSet_r12_sequence);",
          "7161:   return offset;",
          "7162: }",
          "7171:   {   5, \"bds-KeplerianSet-r12\" },",
          "",
          "---------------",
          "--- Hunk 164 ---",
          "[Context before]",
          "6598:   {   2, &hf_lpp_cnav_KeplerianSet, ASN1_EXTENSION_ROOT    , dissect_lpp_NavModelCNAV_KeplerianSet },",
          "6599:   {   3, &hf_lpp_glonass_ECEF    , ASN1_EXTENSION_ROOT    , dissect_lpp_NavModel_GLONASS_ECEF },",
          "6600:   {   4, &hf_lpp_sbas_ECEF       , ASN1_EXTENSION_ROOT    , dissect_lpp_NavModel_SBAS_ECEF },",
          "6601:   { 0, NULL, 0, NULL }",
          "6602: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7181:   {   5, &hf_lpp_bds_KeplerianSet_r12, ASN1_NOT_EXTENSION_ROOT, dissect_lpp_NavModel_BDS_KeplerianSet_r12 },",
          "",
          "---------------",
          "--- Hunk 165 ---",
          "[Context before]",
          "6611: }",
          "6614: static const per_sequence_t GNSS_NavModelSatelliteElement_sequence[] = {",
          "6615:   { &hf_lpp_svID            , ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lpp_SV_ID },",
          "6616:   { &hf_lpp_svHealth        , ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lpp_BIT_STRING_SIZE_8 },",
          "6617:   { &hf_lpp_iod             , ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lpp_BIT_STRING_SIZE_11 },",
          "6618:   { &hf_lpp_gnss_ClockModel , ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lpp_GNSS_ClockModel },",
          "6619:   { &hf_lpp_gnss_OrbitModel , ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lpp_GNSS_OrbitModel },",
          "6620:   { NULL, 0, 0, NULL }",
          "6621: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7196: static int",
          "7197: dissect_lpp_T_svHealthExt_v12xy(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "7198: #line 494 \"../../asn1/lpp/lpp.cnf\"",
          "7199:   tvbuff_t *svHealthExt_tvb = NULL;",
          "7200:   proto_tree *subtree;",
          "7201:   offset = dissect_per_bit_string(tvb, offset, actx, tree, hf_index,",
          "7202:                                      4, 4, FALSE, &svHealthExt_tvb, NULL);",
          "7207: #line 499 \"../../asn1/lpp/lpp.cnf\"",
          "7208:   if (svHealthExt_tvb) {",
          "7209:     subtree = proto_item_add_subtree(actx->created_item, ett_lpp_svHealthExt_v12xy);",
          "7210:     proto_tree_add_bits_item(subtree, hf_lpp_svHealthExt_v12xy_e5bhs, svHealthExt_tvb, 0, 2, ENC_BIG_ENDIAN);",
          "7211:     proto_tree_add_bits_item(subtree, hf_lpp_svHealthExt_v12xy_e1_bhs, svHealthExt_tvb, 2, 2, ENC_BIG_ENDIAN);",
          "7212:   }",
          "7215:   return offset;",
          "7216: }",
          "7219: static const per_sequence_t GNSS_NavModelSatelliteElement_eag_1_sequence[] = {",
          "7220:   { &hf_lpp_svHealthExt_v12xy, ASN1_NO_EXTENSIONS     , ASN1_OPTIONAL    , dissect_lpp_T_svHealthExt_v12xy },",
          "7221:   { NULL, 0, 0, NULL }",
          "7222: };",
          "7224: static int",
          "7225: dissect_lpp_GNSS_NavModelSatelliteElement_eag_1(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "7226:   offset = dissect_per_sequence_eag(tvb, offset, actx, tree, GNSS_NavModelSatelliteElement_eag_1_sequence);",
          "7228:   return offset;",
          "7229: }",
          "7238:   { &hf_lpp_dummy_eag_field , ASN1_NOT_EXTENSION_ROOT, ASN1_NOT_OPTIONAL, dissect_lpp_GNSS_NavModelSatelliteElement_eag_1 },",
          "",
          "---------------",
          "--- Hunk 166 ---",
          "[Context before]",
          "6707:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "6708:                                                             0U, 3599U, NULL, FALSE);",
          "6711:   proto_item_append_text(actx->created_item, \" s\");",
          "",
          "[Removed Lines]",
          "6710: #line 838 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "7329: #line 931 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 167 ---",
          "[Context before]",
          "6721:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "6722:                                                             0U, 999U, NULL, FALSE);",
          "6725:   proto_item_append_text(actx->created_item, \" ms\");",
          "",
          "[Removed Lines]",
          "6724: #line 841 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "7343: #line 934 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 168 ---",
          "[Context before]",
          "6839:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "6840:                                                             0U, 127U, NULL, FALSE);",
          "6843:   proto_item_append_text(actx->created_item, \" ms\");",
          "",
          "[Removed Lines]",
          "6842: #line 859 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "7461: #line 952 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 169 ---",
          "[Context before]",
          "6910:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "6911:                                                             0U, 100U, NULL, FALSE);",
          "6914:   proto_item_append_text(actx->created_item, \" %%\");",
          "",
          "[Removed Lines]",
          "6913: #line 844 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "7532: #line 937 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 170 ---",
          "[Context before]",
          "6938: static int",
          "6940:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "6943:   return offset;",
          "6944: }",
          "",
          "[Removed Lines]",
          "6939: dissect_lpp_INTEGER_0_255(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "6941:                                                             0U, 255U, NULL, FALSE);",
          "",
          "[Added Lines]",
          "7558: dissect_lpp_T_toa(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "7559: #line 964 \"../../asn1/lpp/lpp.cnf\"",
          "7560:   guint32 toa, val;",
          "7561:   int len, old_offset = offset;",
          "7562:   T_GNSS_ID_enum gnss_id = (T_GNSS_ID_enum)GPOINTER_TO_UINT(actx->private_data);",
          "7564:                                                             0U, 255U, &toa, FALSE);",
          "7569: #line 970 \"../../asn1/lpp/lpp.cnf\"",
          "7570:   len = (offset-old_offset) >> 3 ? (offset-old_offset) >> 3 : 1;",
          "7571:   val = (gnss_id == T_GNSS_ID_GALILEO) ? 600*toa : 4096*toa;",
          "7572:   actx->created_item = proto_tree_add_uint_format_value(tree, hf_lpp_toa, tvb, old_offset, len,",
          "7573:                                                         toa, \"%u s (%u)\", val, toa);",
          "",
          "---------------",
          "--- Hunk 171 ---",
          "[Context before]",
          "6948: static int",
          "6953:   return offset;",
          "6954: }",
          "",
          "[Removed Lines]",
          "6949: dissect_lpp_INTEGER_0_2047(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "6950:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "6951:                                                             0U, 2047U, NULL, FALSE);",
          "",
          "[Added Lines]",
          "7582: dissect_lpp_T_kepSV_StatusINAV(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "7583: #line 997 \"../../asn1/lpp/lpp.cnf\"",
          "7584:   tvbuff_t *statusINAV_tvb = NULL;",
          "7585:   proto_tree *subtree;",
          "7586:   offset = dissect_per_bit_string(tvb, offset, actx, tree, hf_index,",
          "7587:                                      4, 4, FALSE, &statusINAV_tvb, NULL);",
          "7592: #line 1002 \"../../asn1/lpp/lpp.cnf\"",
          "7593:   if (statusINAV_tvb) {",
          "7594:     subtree = proto_item_add_subtree(actx->created_item, ett_kepSV_StatusINAV);",
          "7595:     proto_tree_add_bits_item(subtree, hf_lpp_kepSV_StatusINAV_e5bhs, statusINAV_tvb, 0, 2, ENC_BIG_ENDIAN);",
          "7596:     proto_tree_add_bits_item(subtree, hf_lpp_kepSV_StatusINAV_e1_bhs, statusINAV_tvb, 2, 2, ENC_BIG_ENDIAN);",
          "7597:   }",
          "7600:   return offset;",
          "7601: }",
          "7605: static int",
          "7606: dissect_lpp_T_kepSV_StatusFNAV(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "7607: #line 1009 \"../../asn1/lpp/lpp.cnf\"",
          "7608:   tvbuff_t *statusFNAV_tvb = NULL;",
          "7609:   proto_tree *subtree;",
          "7610:   offset = dissect_per_bit_string(tvb, offset, actx, tree, hf_index,",
          "7611:                                      2, 2, FALSE, &statusFNAV_tvb, NULL);",
          "7616: #line 1014 \"../../asn1/lpp/lpp.cnf\"",
          "7617:   if (statusFNAV_tvb) {",
          "7618:     subtree = proto_item_add_subtree(actx->created_item, ett_kepSV_StatusFNAV);",
          "7619:     proto_tree_add_bits_item(subtree, hf_lpp_kepSV_StatusFNAV_e5ahs, statusFNAV_tvb, 0, 2, ENC_BIG_ENDIAN);",
          "7620:   }",
          "",
          "---------------",
          "--- Hunk 172 ---",
          "[Context before]",
          "6959:   { &hf_lpp_kepAlmanacE     , ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lpp_INTEGER_0_2047 },",
          "6960:   { &hf_lpp_kepAlmanacDeltaI, ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lpp_INTEGER_M1024_1023 },",
          "6961:   { &hf_lpp_kepAlmanacOmegaDot, ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lpp_INTEGER_M1024_1023 },",
          "6964:   { &hf_lpp_kepAlmanacOmega0, ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lpp_INTEGER_M32768_32767 },",
          "6965:   { &hf_lpp_kepAlmanacW     , ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lpp_INTEGER_M32768_32767 },",
          "6966:   { &hf_lpp_kepAlmanacM0    , ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lpp_INTEGER_M32768_32767 },",
          "6969:   { NULL, 0, 0, NULL }",
          "6970: };",
          "",
          "[Removed Lines]",
          "6962:   { &hf_lpp_kepSVHealth     , ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lpp_INTEGER_0_15 },",
          "6963:   { &hf_lpp_kepAlmanacAPowerHalf, ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lpp_INTEGER_M65536_65535 },",
          "6967:   { &hf_lpp_kepAlmanacAF0   , ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lpp_INTEGER_M8192_8191 },",
          "6968:   { &hf_lpp_kepAlmanacAF1   , ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lpp_INTEGER_M1024_1023 },",
          "",
          "[Added Lines]",
          "7632:   { &hf_lpp_kepSV_StatusINAV, ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lpp_T_kepSV_StatusINAV },",
          "7633:   { &hf_lpp_kepSV_StatusFNAV, ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lpp_T_kepSV_StatusFNAV },",
          "7634:   { &hf_lpp_kepAlmanacAPowerHalf, ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lpp_INTEGER_M4096_4095 },",
          "7638:   { &hf_lpp_kepAlmanacAF0   , ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lpp_INTEGER_M32768_32767 },",
          "7639:   { &hf_lpp_kepAlmanacAF1   , ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lpp_INTEGER_M4096_4095 },",
          "",
          "---------------",
          "--- Hunk 173 ---",
          "[Context before]",
          "7022: }",
          "7035: static const per_sequence_t AlmanacMidiAlmanacSet_sequence[] = {",
          "7036:   { &hf_lpp_svID            , ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lpp_SV_ID },",
          "7037:   { &hf_lpp_midiAlmE        , ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lpp_INTEGER_0_2047 },",
          "",
          "[Removed Lines]",
          "7026: static int",
          "7027: dissect_lpp_INTEGER_0_131071(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "7028:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "7029:                                                             0U, 131071U, NULL, FALSE);",
          "7031:   return offset;",
          "7032: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 174 ---",
          "[Context before]",
          "7064:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "7065:                                                             1U, 1461U, NULL, FALSE);",
          "7068:   proto_item_append_text(actx->created_item, \" days\");",
          "",
          "[Removed Lines]",
          "7067: #line 961 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "7728: #line 1098 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 175 ---",
          "[Context before]",
          "7171: }",
          "7174: static const value_string lpp_GNSS_AlmanacElement_vals[] = {",
          "7175:   {   0, \"keplerianAlmanacSet\" },",
          "7176:   {   1, \"keplerianNAV-Almanac\" },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7836: static int",
          "7837: dissect_lpp_T_bdsSvHealth_r12(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "7838: #line 1176 \"../../asn1/lpp/lpp.cnf\"",
          "7839:   tvbuff_t *bdsSvHealth_tvb = NULL;",
          "7840:   proto_tree *subtree;",
          "7841:   offset = dissect_per_bit_string(tvb, offset, actx, tree, hf_index,",
          "7842:                                      9, 9, FALSE, &bdsSvHealth_tvb, NULL);",
          "7847: #line 1181 \"../../asn1/lpp/lpp.cnf\"",
          "7848:   if (bdsSvHealth_tvb) {",
          "7849:     guint16 bits;",
          "7850:     subtree = proto_item_add_subtree(actx->created_item, ett_lpp_bdsSvHealth_r12);",
          "7851:     bits = tvb_get_bits16(bdsSvHealth_tvb, 0, 9,ENC_BIG_ENDIAN);",
          "7852:     if (bits == 0x1ff) {",
          "7853:       proto_tree_add_boolean_bits_format_value(subtree, hf_lpp_bdsSvHealth_r12_sat_clock, bdsSvHealth_tvb, 0, 1, 1,",
          "7854:                                                \"Satellite is in failure or permanently shut off (1)\");",
          "7855:     } else if (bits == 0x100) {",
          "7856:       proto_tree_add_boolean_bits_format_value(subtree, hf_lpp_bdsSvHealth_r12_sat_clock, bdsSvHealth_tvb, 0, 1, 1,",
          "7857:                                                \"Satellite clock is unavailable (1)\");",
          "7858:     } else {",
          "7859:       proto_tree_add_bits_item(subtree, hf_lpp_bdsSvHealth_r12_sat_clock, bdsSvHealth_tvb, 0, 1, ENC_BIG_ENDIAN);",
          "7860:       proto_tree_add_bits_item(subtree, hf_lpp_bdsSvHealth_r12_b1i, bdsSvHealth_tvb, 1, 1, ENC_BIG_ENDIAN);",
          "7861:       proto_tree_add_bits_item(subtree, hf_lpp_bdsSvHealth_r12_b2i, bdsSvHealth_tvb, 2, 1, ENC_BIG_ENDIAN);",
          "7862:       proto_tree_add_bits_item(subtree, hf_lpp_bdsSvHealth_r12_nav, bdsSvHealth_tvb, 7, 1, ENC_BIG_ENDIAN);",
          "7863:     }",
          "7864:   }",
          "7867:   return offset;",
          "7868: }",
          "7871: static const per_sequence_t AlmanacBDS_AlmanacSet_r12_sequence[] = {",
          "7872:   { &hf_lpp_svID            , ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lpp_SV_ID },",
          "7873:   { &hf_lpp_bdsAlmToa_r12   , ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lpp_INTEGER_0_255 },",
          "7874:   { &hf_lpp_bdsAlmSqrtA_r12 , ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lpp_INTEGER_0_16777215 },",
          "7875:   { &hf_lpp_bdsAlmE_r12     , ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lpp_INTEGER_0_131071 },",
          "7876:   { &hf_lpp_bdsAlmW_r12     , ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lpp_INTEGER_M8388608_8388607 },",
          "7877:   { &hf_lpp_bdsAlmM0_r12    , ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lpp_INTEGER_M8388608_8388607 },",
          "7878:   { &hf_lpp_bdsAlmOmega0_r12, ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lpp_INTEGER_M8388608_8388607 },",
          "7879:   { &hf_lpp_bdsAlmOmegaDot_r12, ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lpp_INTEGER_M65536_65535 },",
          "7880:   { &hf_lpp_bdsAlmDeltaI_r12, ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lpp_INTEGER_M32768_32767 },",
          "7881:   { &hf_lpp_bdsAlmA0_r12    , ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lpp_INTEGER_M1024_1023 },",
          "7882:   { &hf_lpp_bdsAlmA1_r12    , ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lpp_INTEGER_M1024_1023 },",
          "7883:   { &hf_lpp_bdsSvHealth_r12 , ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lpp_T_bdsSvHealth_r12 },",
          "7884:   { NULL, 0, 0, NULL }",
          "7885: };",
          "7887: static int",
          "7888: dissect_lpp_AlmanacBDS_AlmanacSet_r12(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "7889:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "7890:                                    ett_lpp_AlmanacBDS_AlmanacSet_r12, AlmanacBDS_AlmanacSet_r12_sequence);",
          "7892:   return offset;",
          "7893: }",
          "",
          "---------------",
          "--- Hunk 176 ---",
          "[Context before]",
          "7178:   {   3, \"keplerianMidiAlmanac\" },",
          "7179:   {   4, \"keplerianGLONASS\" },",
          "7180:   {   5, \"ecef-SBAS-Almanac\" },",
          "7181:   { 0, NULL }",
          "7182: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7903:   {   6, \"keplerianBDS-Almanac-r12\" },",
          "",
          "---------------",
          "--- Hunk 177 ---",
          "[Context before]",
          "7188:   {   3, &hf_lpp_keplerianMidiAlmanac, ASN1_EXTENSION_ROOT    , dissect_lpp_AlmanacMidiAlmanacSet },",
          "7189:   {   4, &hf_lpp_keplerianGLONASS, ASN1_EXTENSION_ROOT    , dissect_lpp_AlmanacGLONASS_AlmanacSet },",
          "7190:   {   5, &hf_lpp_ecef_SBAS_Almanac, ASN1_EXTENSION_ROOT    , dissect_lpp_AlmanacECEF_SBAS_AlmanacSet },",
          "7191:   { 0, NULL, 0, NULL }",
          "7192: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7914:   {   6, &hf_lpp_keplerianBDS_Almanac_r12, ASN1_NOT_EXTENSION_ROOT, dissect_lpp_AlmanacBDS_AlmanacSet_r12 },",
          "",
          "---------------",
          "--- Hunk 178 ---",
          "[Context before]",
          "7215: }",
          "7218: static const per_sequence_t GNSS_Almanac_sequence[] = {",
          "7219:   { &hf_lpp_weekNumber_01   , ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lpp_INTEGER_0_255 },",
          "7221:   { &hf_lpp_ioda            , ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lpp_INTEGER_0_3 },",
          "7222:   { &hf_lpp_completeAlmanacProvided, ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lpp_BOOLEAN },",
          "7223:   { &hf_lpp_gnss_AlmanacList, ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lpp_GNSS_AlmanacList },",
          "7224:   { NULL, 0, 0, NULL }",
          "7225: };",
          "",
          "[Removed Lines]",
          "7220:   { &hf_lpp_toa             , ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lpp_INTEGER_0_255 },",
          "",
          "[Added Lines]",
          "7943: static int",
          "7944: dissect_lpp_T_toa_ext_v12xy(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "7945: #line 976 \"../../asn1/lpp/lpp.cnf\"",
          "7946:   guint32 toa_ext, val;",
          "7947:   int len, old_offset = offset;",
          "7948:   T_GNSS_ID_enum gnss_id = (T_GNSS_ID_enum)GPOINTER_TO_UINT(actx->private_data);",
          "7949:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "7950:                                                             256U, 1023U, &toa_ext, FALSE);",
          "7955: #line 982 \"../../asn1/lpp/lpp.cnf\"",
          "7956:   len = (offset-old_offset) >> 3 ? (offset-old_offset) >> 3 : 1;",
          "7957:   val = (gnss_id == T_GNSS_ID_GALILEO) ? 600*toa_ext : 4096*toa_ext;",
          "7958:   actx->created_item = proto_tree_add_uint_format_value(tree, hf_lpp_toa_ext_v12xy, tvb, old_offset, len,",
          "7959:                                                         toa_ext, \"%u s (%u)\", val, toa_ext);",
          "7962:   return offset;",
          "7963: }",
          "7967: static int",
          "7968: dissect_lpp_INTEGER_4_15(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "7969:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "7970:                                                             4U, 15U, NULL, FALSE);",
          "7972:   return offset;",
          "7973: }",
          "7976: static const per_sequence_t GNSS_Almanac_eag_1_sequence[] = {",
          "7977:   { &hf_lpp_toa_ext_v12xy   , ASN1_NO_EXTENSIONS     , ASN1_OPTIONAL    , dissect_lpp_T_toa_ext_v12xy },",
          "7978:   { &hf_lpp_ioda_ext_v12xy  , ASN1_NO_EXTENSIONS     , ASN1_OPTIONAL    , dissect_lpp_INTEGER_4_15 },",
          "7979:   { NULL, 0, 0, NULL }",
          "7980: };",
          "7982: static int",
          "7983: dissect_lpp_GNSS_Almanac_eag_1(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "7984:   offset = dissect_per_sequence_eag(tvb, offset, actx, tree, GNSS_Almanac_eag_1_sequence);",
          "7986:   return offset;",
          "7987: }",
          "7992:   { &hf_lpp_toa             , ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lpp_T_toa },",
          "7996:   { &hf_lpp_dummy_eag_field , ASN1_NOT_EXTENSION_ROOT, ASN1_NOT_OPTIONAL, dissect_lpp_GNSS_Almanac_eag_1 },",
          "",
          "---------------",
          "--- Hunk 179 ---",
          "[Context before]",
          "7239:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "7240:                                                             0U, 255U, NULL, FALSE);",
          "7243:   proto_item_append_text(actx->created_item, \" weeks\");",
          "",
          "[Removed Lines]",
          "7242: #line 1018 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "8015: #line 1209 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 180 ---",
          "[Context before]",
          "7253:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "7254:                                                             -128, 127U, NULL, FALSE);",
          "7257:   proto_item_append_text(actx->created_item, \" s\");",
          "",
          "[Removed Lines]",
          "7256: #line 1021 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "8029: #line 1212 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 181 ---",
          "[Context before]",
          "7267:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "7268:                                                             0U, 255U, NULL, FALSE);",
          "7271:   proto_item_append_text(actx->created_item, \" weeks\");",
          "",
          "[Removed Lines]",
          "7270: #line 1024 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "8043: #line 1215 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 182 ---",
          "[Context before]",
          "7281:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "7282:                                                             -128, 127U, NULL, FALSE);",
          "7285:   proto_item_append_text(actx->created_item, \" days\");",
          "",
          "[Removed Lines]",
          "7284: #line 1027 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "8057: #line 1218 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 183 ---",
          "[Context before]",
          "7295:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "7296:                                                             -128, 127U, NULL, FALSE);",
          "7299:   proto_item_append_text(actx->created_item, \" s\");",
          "",
          "[Removed Lines]",
          "7298: #line 1030 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "8071: #line 1221 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 184 ---",
          "[Context before]",
          "7330:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "7331:                                                             -128, 127U, NULL, FALSE);",
          "7334:   proto_item_append_text(actx->created_item, \" s\");",
          "",
          "[Removed Lines]",
          "7333: #line 1042 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "8106: #line 1233 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 185 ---",
          "[Context before]",
          "7344:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "7345:                                                             0U, 8191U, NULL, FALSE);",
          "7348:   proto_item_append_text(actx->created_item, \" weeks\");",
          "",
          "[Removed Lines]",
          "7347: #line 1048 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "8120: #line 1239 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 186 ---",
          "[Context before]",
          "7358:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "7359:                                                             0U, 255U, NULL, FALSE);",
          "7362:   proto_item_append_text(actx->created_item, \" weeks\");",
          "",
          "[Removed Lines]",
          "7361: #line 1051 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "8134: #line 1242 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 187 ---",
          "[Context before]",
          "7372:   offset = dissect_per_bit_string(tvb, offset, actx, tree, hf_index,",
          "7373:                                      4, 4, FALSE, NULL, NULL);",
          "7376:   proto_item_append_text(actx->created_item, \" days\");",
          "",
          "[Removed Lines]",
          "7375: #line 1054 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "8148: #line 1245 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 188 ---",
          "[Context before]",
          "7386:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "7387:                                                             -128, 127U, NULL, FALSE);",
          "7390:   proto_item_append_text(actx->created_item, \" s\");",
          "",
          "[Removed Lines]",
          "7389: #line 1057 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "8162: #line 1248 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 189 ---",
          "[Context before]",
          "7422:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "7423:                                                             1U, 1461U, NULL, FALSE);",
          "7426:   proto_item_append_text(actx->created_item, \" days\");",
          "",
          "[Removed Lines]",
          "7425: #line 1060 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "8198: #line 1251 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 190 ---",
          "[Context before]",
          "7434: static int",
          "7435: dissect_lpp_T_kp(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "7437:   tvbuff_t *kp_tvb = NULL;",
          "7438:   offset = dissect_per_bit_string(tvb, offset, actx, tree, -1,",
          "7439:                                      2, 2, FALSE, &kp_tvb, NULL);",
          "",
          "[Removed Lines]",
          "7436: #line 1072 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "8209: #line 1263 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 191 ---",
          "[Context before]",
          "7445:   if (kp_tvb) {",
          "7446:     actx->created_item = proto_tree_add_uint(tree, hf_index, kp_tvb, 0, 1, tvb_get_bits8(kp_tvb, 0, 2));",
          "7447:   }",
          "",
          "[Removed Lines]",
          "7444: #line 1076 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "8217: #line 1267 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 192 ---",
          "[Context before]",
          "7475:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "7476:                                                             0U, 255U, NULL, FALSE);",
          "7479:   proto_item_append_text(actx->created_item, \" weeks\");",
          "",
          "[Removed Lines]",
          "7478: #line 1093 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "8251: #line 1284 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 193 ---",
          "[Context before]",
          "7489:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "7490:                                                             -128, 127U, NULL, FALSE);",
          "7493:   proto_item_append_text(actx->created_item, \" s\");",
          "",
          "[Removed Lines]",
          "7492: #line 1096 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "8265: #line 1287 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 194 ---",
          "[Context before]",
          "7503:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "7504:                                                             0U, 255U, NULL, FALSE);",
          "7507:   proto_item_append_text(actx->created_item, \" weeks\");",
          "",
          "[Removed Lines]",
          "7506: #line 1099 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "8279: #line 1290 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 195 ---",
          "[Context before]",
          "7517:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "7518:                                                             -128, 127U, NULL, FALSE);",
          "7521:   proto_item_append_text(actx->created_item, \" days\");",
          "",
          "[Removed Lines]",
          "7520: #line 1102 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "8293: #line 1293 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 196 ---",
          "[Context before]",
          "7531:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "7532:                                                             -128, 127U, NULL, FALSE);",
          "7535:   proto_item_append_text(actx->created_item, \" s\");",
          "",
          "[Removed Lines]",
          "7534: #line 1105 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "8307: #line 1296 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 197 ---",
          "[Context before]",
          "7561: }",
          "7564: static const value_string lpp_GNSS_UTC_Model_vals[] = {",
          "7565:   {   0, \"utcModel1\" },",
          "7566:   {   1, \"utcModel2\" },",
          "7567:   {   2, \"utcModel3\" },",
          "7568:   {   3, \"utcModel4\" },",
          "7569:   { 0, NULL }",
          "7570: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8338: static int",
          "8339: dissect_lpp_T_utcDeltaTls_r12(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "8340:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "8341:                                                             -128, 127U, NULL, FALSE);",
          "8343: #line 1308 \"../../asn1/lpp/lpp.cnf\"",
          "8344:   proto_item_append_text(actx->created_item, \" s\");",
          "8347:   return offset;",
          "8348: }",
          "8352: static int",
          "8353: dissect_lpp_T_utcWNlsf_r12(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "8354:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "8355:                                                             0U, 255U, NULL, FALSE);",
          "8357: #line 1311 \"../../asn1/lpp/lpp.cnf\"",
          "8358:   proto_item_append_text(actx->created_item, \" weeks\");",
          "8361:   return offset;",
          "8362: }",
          "8366: static int",
          "8367: dissect_lpp_T_utcDN_r12(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "8368:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "8369:                                                             0U, 255U, NULL, FALSE);",
          "8371: #line 1314 \"../../asn1/lpp/lpp.cnf\"",
          "8372:   proto_item_append_text(actx->created_item, \" days\");",
          "8375:   return offset;",
          "8376: }",
          "8380: static int",
          "8381: dissect_lpp_T_utcDeltaTlsf_r12(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "8382:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "8383:                                                             -128, 127U, NULL, FALSE);",
          "8385: #line 1317 \"../../asn1/lpp/lpp.cnf\"",
          "8386:   proto_item_append_text(actx->created_item, \" s\");",
          "8389:   return offset;",
          "8390: }",
          "8393: static const per_sequence_t UTC_ModelSet5_r12_sequence[] = {",
          "8394:   { &hf_lpp_utcA0_r12       , ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lpp_INTEGER_M2147483648_2147483647 },",
          "8395:   { &hf_lpp_utcA1_r12       , ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lpp_INTEGER_M8388608_8388607 },",
          "8396:   { &hf_lpp_utcDeltaTls_r12 , ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lpp_T_utcDeltaTls_r12 },",
          "8397:   { &hf_lpp_utcWNlsf_r12    , ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lpp_T_utcWNlsf_r12 },",
          "8398:   { &hf_lpp_utcDN_r12       , ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lpp_T_utcDN_r12 },",
          "8399:   { &hf_lpp_utcDeltaTlsf_r12, ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lpp_T_utcDeltaTlsf_r12 },",
          "8400:   { NULL, 0, 0, NULL }",
          "8401: };",
          "8403: static int",
          "8404: dissect_lpp_UTC_ModelSet5_r12(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "8405:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "8406:                                    ett_lpp_UTC_ModelSet5_r12, UTC_ModelSet5_r12_sequence);",
          "8408:   return offset;",
          "8409: }",
          "8417:   {   4, \"utcModel5-r12\" },",
          "",
          "---------------",
          "--- Hunk 198 ---",
          "[Context before]",
          "7574:   {   1, &hf_lpp_utcModel2       , ASN1_EXTENSION_ROOT    , dissect_lpp_UTC_ModelSet2 },",
          "7575:   {   2, &hf_lpp_utcModel3       , ASN1_EXTENSION_ROOT    , dissect_lpp_UTC_ModelSet3 },",
          "7576:   {   3, &hf_lpp_utcModel4       , ASN1_EXTENSION_ROOT    , dissect_lpp_UTC_ModelSet4 },",
          "7577:   { 0, NULL, 0, NULL }",
          "7578: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8426:   {   4, &hf_lpp_utcModel5_r12   , ASN1_NOT_EXTENSION_ROOT, dissect_lpp_UTC_ModelSet5_r12 },",
          "",
          "---------------",
          "--- Hunk 199 ---",
          "[Context before]",
          "7607: };",
          "7609: static int",
          "7615:   return offset;",
          "7616: }",
          "",
          "[Removed Lines]",
          "7610: dissect_lpp_GNSS_ID_GPS(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "7611:   offset = dissect_per_constrained_sequence_of(tvb, offset, actx, tree, hf_index,",
          "7612:                                                   ett_lpp_GNSS_ID_GPS, GNSS_ID_GPS_sequence_of,",
          "7613:                                                   1, 64, FALSE);",
          "",
          "[Added Lines]",
          "8460: dissect_lpp_GNSS_ID_GPS(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "8461:   offset = dissect_per_constrained_sequence_of(tvb, offset, actx, tree, hf_index,",
          "8462:                                                   ett_lpp_GNSS_ID_GPS, GNSS_ID_GPS_sequence_of,",
          "8463:                                                   1, 64, FALSE);",
          "8465:   return offset;",
          "8466: }",
          "8470: static int",
          "8471: dissect_lpp_INTEGER_M7_13(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "8472:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "8473:                                                             -7, 13U, NULL, FALSE);",
          "8475:   return offset;",
          "8476: }",
          "8479: static const per_sequence_t GNSS_ID_GLONASS_SatElement_sequence[] = {",
          "8480:   { &hf_lpp_svID            , ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lpp_SV_ID },",
          "8481:   { &hf_lpp_signalsAvailable, ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lpp_GNSS_SignalIDs },",
          "8482:   { &hf_lpp_channelNumber   , ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lpp_INTEGER_M7_13 },",
          "8483:   { NULL, 0, 0, NULL }",
          "8484: };",
          "8486: static int",
          "8487: dissect_lpp_GNSS_ID_GLONASS_SatElement(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "8488:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "8489:                                    ett_lpp_GNSS_ID_GLONASS_SatElement, GNSS_ID_GLONASS_SatElement_sequence);",
          "8491:   return offset;",
          "8492: }",
          "8495: static const per_sequence_t GNSS_ID_GLONASS_sequence_of[1] = {",
          "8496:   { &hf_lpp_GNSS_ID_GLONASS_item, ASN1_NO_EXTENSIONS     , ASN1_NOT_OPTIONAL, dissect_lpp_GNSS_ID_GLONASS_SatElement },",
          "8497: };",
          "8499: static int",
          "8500: dissect_lpp_GNSS_ID_GLONASS(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "8501:   offset = dissect_per_constrained_sequence_of(tvb, offset, actx, tree, hf_index,",
          "8502:                                                   ett_lpp_GNSS_ID_GLONASS, GNSS_ID_GLONASS_sequence_of,",
          "8503:                                                   1, 64, FALSE);",
          "8505:   return offset;",
          "8506: }",
          "8509: static const value_string lpp_GNSS_AuxiliaryInformation_vals[] = {",
          "8510:   {   0, \"gnss-ID-GPS\" },",
          "8511:   {   1, \"gnss-ID-GLONASS\" },",
          "8512:   { 0, NULL }",
          "8513: };",
          "8515: static const per_choice_t GNSS_AuxiliaryInformation_choice[] = {",
          "8516:   {   0, &hf_lpp_gnss_ID_GPS     , ASN1_EXTENSION_ROOT    , dissect_lpp_GNSS_ID_GPS },",
          "8517:   {   1, &hf_lpp_gnss_ID_GLONASS , ASN1_EXTENSION_ROOT    , dissect_lpp_GNSS_ID_GLONASS },",
          "8518:   { 0, NULL, 0, NULL }",
          "8519: };",
          "8521: static int",
          "8522: dissect_lpp_GNSS_AuxiliaryInformation(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "8523:   offset = dissect_per_choice(tvb, offset, actx, tree, hf_index,",
          "8524:                                  ett_lpp_GNSS_AuxiliaryInformation, GNSS_AuxiliaryInformation_choice,",
          "8525:                                  NULL);",
          "8527:   return offset;",
          "8528: }",
          "8532: static int",
          "8533: dissect_lpp_T_dbds_RefTime_r12(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "8534:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "8535:                                                             0U, 3599U, NULL, FALSE);",
          "8537: #line 1320 \"../../asn1/lpp/lpp.cnf\"",
          "8538:   proto_item_append_text(actx->created_item, \" s\");",
          "8541:   return offset;",
          "8542: }",
          "8545: static const per_sequence_t DBDS_CorrectionElement_r12_sequence[] = {",
          "8546:   { &hf_lpp_svID            , ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lpp_SV_ID },",
          "8547:   { &hf_lpp_bds_UDREI_r12   , ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lpp_INTEGER_0_15 },",
          "8548:   { &hf_lpp_bds_RURAI_r12   , ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lpp_INTEGER_0_15 },",
          "8549:   { &hf_lpp_bds_ECC_DeltaT_r12, ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lpp_INTEGER_M4096_4095 },",
          "8550:   { NULL, 0, 0, NULL }",
          "8551: };",
          "8553: static int",
          "8554: dissect_lpp_DBDS_CorrectionElement_r12(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "8555:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "8556:                                    ett_lpp_DBDS_CorrectionElement_r12, DBDS_CorrectionElement_r12_sequence);",
          "8558:   return offset;",
          "8559: }",
          "8562: static const per_sequence_t DBDS_CorrectionList_r12_sequence_of[1] = {",
          "8563:   { &hf_lpp_DBDS_CorrectionList_r12_item, ASN1_NO_EXTENSIONS     , ASN1_NOT_OPTIONAL, dissect_lpp_DBDS_CorrectionElement_r12 },",
          "8564: };",
          "8566: static int",
          "8567: dissect_lpp_DBDS_CorrectionList_r12(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "8568:   offset = dissect_per_constrained_sequence_of(tvb, offset, actx, tree, hf_index,",
          "8569:                                                   ett_lpp_DBDS_CorrectionList_r12, DBDS_CorrectionList_r12_sequence_of,",
          "8570:                                                   1, 64, FALSE);",
          "8572:   return offset;",
          "8573: }",
          "8576: static const per_sequence_t BDS_SgnTypeElement_r12_sequence[] = {",
          "8577:   { &hf_lpp_gnss_SignalID   , ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lpp_GNSS_SignalID },",
          "8578:   { &hf_lpp_dbds_CorrectionList_r12, ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lpp_DBDS_CorrectionList_r12 },",
          "8579:   { NULL, 0, 0, NULL }",
          "8580: };",
          "8582: static int",
          "8583: dissect_lpp_BDS_SgnTypeElement_r12(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "8584:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "8585:                                    ett_lpp_BDS_SgnTypeElement_r12, BDS_SgnTypeElement_r12_sequence);",
          "8587:   return offset;",
          "8588: }",
          "8591: static const per_sequence_t BDS_SgnTypeList_r12_sequence_of[1] = {",
          "8592:   { &hf_lpp_BDS_SgnTypeList_r12_item, ASN1_NO_EXTENSIONS     , ASN1_NOT_OPTIONAL, dissect_lpp_BDS_SgnTypeElement_r12 },",
          "8593: };",
          "8595: static int",
          "8596: dissect_lpp_BDS_SgnTypeList_r12(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "8597:   offset = dissect_per_constrained_sequence_of(tvb, offset, actx, tree, hf_index,",
          "8598:                                                   ett_lpp_BDS_SgnTypeList_r12, BDS_SgnTypeList_r12_sequence_of,",
          "8599:                                                   1, 3, FALSE);",
          "8601:   return offset;",
          "8602: }",
          "8605: static const per_sequence_t BDS_DifferentialCorrections_r12_sequence[] = {",
          "8606:   { &hf_lpp_dbds_RefTime_r12, ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lpp_T_dbds_RefTime_r12 },",
          "8607:   { &hf_lpp_bds_SgnTypeList_r12, ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lpp_BDS_SgnTypeList_r12 },",
          "8608:   { NULL, 0, 0, NULL }",
          "8609: };",
          "8611: static int",
          "8612: dissect_lpp_BDS_DifferentialCorrections_r12(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "8613:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "8614:                                    ett_lpp_BDS_DifferentialCorrections_r12, BDS_DifferentialCorrections_r12_sequence);",
          "8616:   return offset;",
          "8617: }",
          "8621: static int",
          "8622: dissect_lpp_T_bds_RefTime_r12(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "8623:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "8624:                                                             0U, 3599U, NULL, FALSE);",
          "8626: #line 1332 \"../../asn1/lpp/lpp.cnf\"",
          "8627:   proto_item_append_text(actx->created_item, \" s\");",
          "",
          "---------------",
          "--- Hunk 200 ---",
          "[Context before]",
          "7620: static int",
          "7622:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "7625:   return offset;",
          "7626: }",
          "7633:   { NULL, 0, 0, NULL }",
          "7634: };",
          "7636: static int",
          "7638:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "7641:   return offset;",
          "7642: }",
          "7647: };",
          "7649: static int",
          "7651:   offset = dissect_per_constrained_sequence_of(tvb, offset, actx, tree, hf_index,",
          "7655:   return offset;",
          "7656: }",
          "7663: };",
          "7669: };",
          "7671: static int",
          "7677:   return offset;",
          "7678: }",
          "",
          "[Removed Lines]",
          "7621: dissect_lpp_INTEGER_M7_13(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "7623:                                                             -7, 13U, NULL, FALSE);",
          "7629: static const per_sequence_t GNSS_ID_GLONASS_SatElement_sequence[] = {",
          "7630:   { &hf_lpp_svID            , ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lpp_SV_ID },",
          "7631:   { &hf_lpp_signalsAvailable, ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lpp_GNSS_SignalIDs },",
          "7632:   { &hf_lpp_channelNumber   , ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lpp_INTEGER_M7_13 },",
          "7637: dissect_lpp_GNSS_ID_GLONASS_SatElement(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "7639:                                    ett_lpp_GNSS_ID_GLONASS_SatElement, GNSS_ID_GLONASS_SatElement_sequence);",
          "7645: static const per_sequence_t GNSS_ID_GLONASS_sequence_of[1] = {",
          "7646:   { &hf_lpp_GNSS_ID_GLONASS_item, ASN1_NO_EXTENSIONS     , ASN1_NOT_OPTIONAL, dissect_lpp_GNSS_ID_GLONASS_SatElement },",
          "7650: dissect_lpp_GNSS_ID_GLONASS(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "7652:                                                   ett_lpp_GNSS_ID_GLONASS, GNSS_ID_GLONASS_sequence_of,",
          "7653:                                                   1, 64, FALSE);",
          "7659: static const value_string lpp_GNSS_AuxiliaryInformation_vals[] = {",
          "7660:   {   0, \"gnss-ID-GPS\" },",
          "7661:   {   1, \"gnss-ID-GLONASS\" },",
          "7662:   { 0, NULL }",
          "7665: static const per_choice_t GNSS_AuxiliaryInformation_choice[] = {",
          "7666:   {   0, &hf_lpp_gnss_ID_GPS     , ASN1_EXTENSION_ROOT    , dissect_lpp_GNSS_ID_GPS },",
          "7667:   {   1, &hf_lpp_gnss_ID_GLONASS , ASN1_EXTENSION_ROOT    , dissect_lpp_GNSS_ID_GLONASS },",
          "7668:   { 0, NULL, 0, NULL }",
          "7672: dissect_lpp_GNSS_AuxiliaryInformation(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "7673:   offset = dissect_per_choice(tvb, offset, actx, tree, hf_index,",
          "7674:                                  ett_lpp_GNSS_AuxiliaryInformation, GNSS_AuxiliaryInformation_choice,",
          "7675:                                  NULL);",
          "",
          "[Added Lines]",
          "8636: dissect_lpp_INTEGER_1_320(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "8638:                                                             1U, 320U, NULL, FALSE);",
          "8644: static const per_sequence_t GridIonElement_r12_sequence[] = {",
          "8645:   { &hf_lpp_igp_ID_r12      , ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lpp_INTEGER_1_320 },",
          "8646:   { &hf_lpp_dt_r12          , ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lpp_INTEGER_0_511 },",
          "8647:   { &hf_lpp_givei_r12       , ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lpp_INTEGER_0_15 },",
          "8652: dissect_lpp_GridIonElement_r12(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "8654:                                    ett_lpp_GridIonElement_r12, GridIonElement_r12_sequence);",
          "8660: static const per_sequence_t GridIonList_r12_sequence_of[1] = {",
          "8661:   { &hf_lpp_GridIonList_r12_item, ASN1_NO_EXTENSIONS     , ASN1_NOT_OPTIONAL, dissect_lpp_GridIonElement_r12 },",
          "8665: dissect_lpp_GridIonList_r12(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "8667:                                                   ett_lpp_GridIonList_r12, GridIonList_r12_sequence_of,",
          "8668:                                                   1, 320, FALSE);",
          "8674: static const per_sequence_t BDS_GridModelParameter_r12_sequence[] = {",
          "8675:   { &hf_lpp_bds_RefTime_r12 , ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lpp_T_bds_RefTime_r12 },",
          "8676:   { &hf_lpp_gridIonList_r12 , ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lpp_GridIonList_r12 },",
          "8677:   { NULL, 0, 0, NULL }",
          "8680: static int",
          "8681: dissect_lpp_BDS_GridModelParameter_r12(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "8682:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "8683:                                    ett_lpp_BDS_GridModelParameter_r12, BDS_GridModelParameter_r12_sequence);",
          "8685:   return offset;",
          "8686: }",
          "8689: static const per_sequence_t GNSS_GenericAssistDataElement_eag_1_sequence[] = {",
          "8690:   { &hf_lpp_bds_DifferentialCorrections_r12, ASN1_NO_EXTENSIONS     , ASN1_OPTIONAL    , dissect_lpp_BDS_DifferentialCorrections_r12 },",
          "8691:   { &hf_lpp_bds_GridModel_r12, ASN1_NO_EXTENSIONS     , ASN1_OPTIONAL    , dissect_lpp_BDS_GridModelParameter_r12 },",
          "8692:   { NULL, 0, 0, NULL }",
          "8696: dissect_lpp_GNSS_GenericAssistDataElement_eag_1(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "8697:   offset = dissect_per_sequence_eag(tvb, offset, actx, tree, GNSS_GenericAssistDataElement_eag_1_sequence);",
          "",
          "---------------",
          "--- Hunk 201 ---",
          "[Context before]",
          "7690:   { &hf_lpp_gnss_Almanac    , ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lpp_GNSS_Almanac },",
          "7691:   { &hf_lpp_gnss_UTC_Model  , ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lpp_GNSS_UTC_Model },",
          "7692:   { &hf_lpp_gnss_AuxiliaryInformation, ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lpp_GNSS_AuxiliaryInformation },",
          "7693:   { NULL, 0, 0, NULL }",
          "7694: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8715:   { &hf_lpp_dummy_eag_field , ASN1_NOT_EXTENSION_ROOT, ASN1_NOT_OPTIONAL, dissect_lpp_GNSS_GenericAssistDataElement_eag_1 },",
          "",
          "---------------",
          "--- Hunk 202 ---",
          "[Context before]",
          "7873: }",
          "7876: static const value_string lpp_T_numDL_Frames_vals[] = {",
          "7877:   {   0, \"sf-1\" },",
          "7878:   {   1, \"sf-2\" },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8900: static int",
          "8901: dissect_lpp_INTEGER_0_4095(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "8902:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "8903:                                                             0U, 4095U, NULL, FALSE);",
          "8905:   return offset;",
          "8906: }",
          "",
          "---------------",
          "--- Hunk 203 ---",
          "[Context before]",
          "8272: static int",
          "8273: dissect_lpp_ProvideAssistanceData(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "8275:   col_append_sep_str(actx->pinfo->cinfo, COL_INFO, NULL, \"Provide Assistance Data\");",
          "",
          "[Removed Lines]",
          "8274: #line 66 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "9307: #line 69 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 204 ---",
          "[Context before]",
          "8304: static int",
          "8305: dissect_lpp_ReportingDuration(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "8307:   guint32 duration;",
          "8309:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "",
          "[Removed Lines]",
          "8306: #line 276 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "9339: #line 279 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 205 ---",
          "[Context before]",
          "8375: static int",
          "8376: dissect_lpp_T_reportingInterval(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "8378:   guint32 idx;",
          "8379:   const gchar *interval[10] = {\"\", \": 1 s\", \": 2 s\", \": 4 s\", \": 8 s\", \": 10 s\",",
          "8380:                                \": 16 s\", \": 20 s\", \": 32 s\", \": 64 s\"};",
          "",
          "[Removed Lines]",
          "8377: #line 264 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "9410: #line 267 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 206 ---",
          "[Context before]",
          "8389:   if (idx < 10) {",
          "8390:     proto_item_append_text(actx->created_item, \"%s\", interval[idx]);",
          "8391:   }",
          "",
          "[Removed Lines]",
          "8388: #line 271 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "9421: #line 274 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 207 ---",
          "[Context before]",
          "8462:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "8463:                                                             1U, 128U, NULL, FALSE);",
          "8466:   proto_item_append_text(actx->created_item, \" s\");",
          "",
          "[Removed Lines]",
          "8465: #line 297 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "9498: #line 300 \"../../asn1/lpp/lpp.cnf\"",
          "9499:   proto_item_append_text(actx->created_item, \" s\");",
          "9502:   return offset;",
          "9503: }",
          "9507: static int",
          "9508: dissect_lpp_T_responseTimeEarlyFix_r12(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "9509:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "9510:                                                             1U, 128U, NULL, FALSE);",
          "9512: #line 303 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 208 ---",
          "[Context before]",
          "8470: }",
          "8473: static const per_sequence_t ResponseTime_sequence[] = {",
          "8474:   { &hf_lpp_time            , ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_lpp_T_time },",
          "8475:   { NULL, 0, 0, NULL }",
          "8476: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9520: static const per_sequence_t ResponseTime_eag_1_sequence[] = {",
          "9521:   { &hf_lpp_responseTimeEarlyFix_r12, ASN1_NO_EXTENSIONS     , ASN1_OPTIONAL    , dissect_lpp_T_responseTimeEarlyFix_r12 },",
          "9522:   { NULL, 0, 0, NULL }",
          "9523: };",
          "9525: static int",
          "9526: dissect_lpp_ResponseTime_eag_1(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "9527:   offset = dissect_per_sequence_eag(tvb, offset, actx, tree, ResponseTime_eag_1_sequence);",
          "9529:   return offset;",
          "9530: }",
          "9535:   { &hf_lpp_dummy_eag_field , ASN1_NOT_EXTENSION_ROOT, ASN1_NOT_OPTIONAL, dissect_lpp_ResponseTime_eag_1 },",
          "",
          "---------------",
          "--- Hunk 209 ---",
          "[Context before]",
          "8590: static int",
          "8591: dissect_lpp_T_requestedMeasurements(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "8593:   tvbuff_t *requestedMeasurements_tvb = NULL;",
          "8594:   int len;",
          "",
          "[Removed Lines]",
          "8592: #line 1344 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "9653: #line 1594 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 210 ---",
          "[Context before]",
          "8718: static int",
          "8719: dissect_lpp_RequestLocationInformation(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "8721:   col_append_sep_str(actx->pinfo->cinfo, COL_INFO, NULL, \"Request Location Information\");",
          "",
          "[Removed Lines]",
          "8720: #line 69 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "9781: #line 72 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 211 ---",
          "[Context before]",
          "9000:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "9001:                                                             0U, 359U, NULL, FALSE);",
          "9004:   proto_item_append_text(actx->created_item, \" degrees\");",
          "",
          "[Removed Lines]",
          "9003: #line 208 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "10064: #line 211 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 212 ---",
          "[Context before]",
          "9014:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "9015:                                                             0U, 2047U, NULL, FALSE);",
          "9018:   proto_item_append_text(actx->created_item, \" km/h\");",
          "",
          "[Removed Lines]",
          "9017: #line 211 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "10078: #line 214 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 213 ---",
          "[Context before]",
          "9086:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "9087:                                                             0U, 359U, NULL, FALSE);",
          "9090:   proto_item_append_text(actx->created_item, \" degrees\");",
          "",
          "[Removed Lines]",
          "9089: #line 214 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "10150: #line 217 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 214 ---",
          "[Context before]",
          "9100:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "9101:                                                             0U, 2047U, NULL, FALSE);",
          "9104:   proto_item_append_text(actx->created_item, \" km/h\");",
          "",
          "[Removed Lines]",
          "9103: #line 217 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "10164: #line 220 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 215 ---",
          "[Context before]",
          "9114:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "9115:                                                             0U, 255U, NULL, FALSE);",
          "9118:   proto_item_append_text(actx->created_item, \" km/h\");",
          "",
          "[Removed Lines]",
          "9117: #line 220 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "10178: #line 223 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 216 ---",
          "[Context before]",
          "9144:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "9145:                                                             0U, 359U, NULL, FALSE);",
          "9148:   proto_item_append_text(actx->created_item, \" degrees\");",
          "",
          "[Removed Lines]",
          "9147: #line 223 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "10208: #line 226 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 217 ---",
          "[Context before]",
          "9158:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "9159:                                                             0U, 2047U, NULL, FALSE);",
          "9162:   proto_item_append_text(actx->created_item, \" km/h\");",
          "",
          "[Removed Lines]",
          "9161: #line 226 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "10222: #line 229 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 218 ---",
          "[Context before]",
          "9188:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "9189:                                                             0U, 255U, NULL, FALSE);",
          "9192:   proto_item_append_text(actx->created_item, \" km/h\");",
          "",
          "[Removed Lines]",
          "9191: #line 229 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "10252: #line 232 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 219 ---",
          "[Context before]",
          "9202:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "9203:                                                             0U, 255U, NULL, FALSE);",
          "9206:   proto_item_append_text(actx->created_item, \" km/h\");",
          "",
          "[Removed Lines]",
          "9205: #line 232 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "10266: #line 235 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 220 ---",
          "[Context before]",
          "9216:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "9217:                                                             0U, 255U, NULL, FALSE);",
          "9220:   proto_item_append_text(actx->created_item, \" km/h\");",
          "",
          "[Removed Lines]",
          "9219: #line 235 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "10280: #line 238 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 221 ---",
          "[Context before]",
          "9301: }",
          "9304: static const per_sequence_t CommonIEsProvideLocationInformation_sequence[] = {",
          "9305:   { &hf_lpp_locationEstimate, ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lpp_LocationCoordinates },",
          "9306:   { &hf_lpp_velocityEstimate, ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lpp_Velocity },",
          "9307:   { &hf_lpp_locationError   , ASN1_EXTENSION_ROOT    , ASN1_OPTIONAL    , dissect_lpp_LocationError },",
          "9308:   { NULL, 0, 0, NULL }",
          "9309: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "10365: static const value_string lpp_EarlyFixReport_r12_vals[] = {",
          "10366:   {   0, \"noMoreMessages\" },",
          "10367:   {   1, \"moreMessagesOnTheWay\" },",
          "10368:   { 0, NULL }",
          "10369: };",
          "10372: static int",
          "10373: dissect_lpp_EarlyFixReport_r12(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "10374:   offset = dissect_per_enumerated(tvb, offset, actx, tree, hf_index,",
          "10375:                                      2, NULL, FALSE, 0, NULL);",
          "10377:   return offset;",
          "10378: }",
          "10381: static const per_sequence_t CommonIEsProvideLocationInformation_eag_1_sequence[] = {",
          "10382:   { &hf_lpp_earlyFixReport_r12, ASN1_NO_EXTENSIONS     , ASN1_OPTIONAL    , dissect_lpp_EarlyFixReport_r12 },",
          "10383:   { NULL, 0, 0, NULL }",
          "10384: };",
          "10386: static int",
          "10387: dissect_lpp_CommonIEsProvideLocationInformation_eag_1(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "10388:   offset = dissect_per_sequence_eag(tvb, offset, actx, tree, CommonIEsProvideLocationInformation_eag_1_sequence);",
          "10390:   return offset;",
          "10391: }",
          "10398:   { &hf_lpp_dummy_eag_field , ASN1_NOT_EXTENSION_ROOT, ASN1_NOT_OPTIONAL, dissect_lpp_CommonIEsProvideLocationInformation_eag_1 },",
          "",
          "---------------",
          "--- Hunk 222 ---",
          "[Context before]",
          "9323:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "9324:                                                             0U, 3599999U, NULL, FALSE);",
          "9327:   proto_item_append_text(actx->created_item, \" ms\");",
          "",
          "[Removed Lines]",
          "9326: #line 1129 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "10417: #line 1359 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 223 ---",
          "[Context before]",
          "9454:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "9455:                                                             0U, 127U, NULL, FALSE);",
          "9458:   proto_item_append_text(actx->created_item, \" ms\");",
          "",
          "[Removed Lines]",
          "9457: #line 1138 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "10548: #line 1368 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 224 ---",
          "[Context before]",
          "9528:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "9529:                                                             0U, 127U, NULL, FALSE);",
          "9532:   proto_item_append_text(actx->created_item, \" ms\");",
          "",
          "[Removed Lines]",
          "9531: #line 1141 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "10622: #line 1371 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 225 ---",
          "[Context before]",
          "9542:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "9543:                                                             0U, 63U, NULL, FALSE);",
          "9546:   proto_item_append_text(actx->created_item, \" dB-Hz\");",
          "",
          "[Removed Lines]",
          "9545: #line 1144 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "10636: #line 1374 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 226 ---",
          "[Context before]",
          "9574:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "9575:                                                             0U, 127U, NULL, FALSE);",
          "9578:   proto_item_append_text(actx->created_item, \" ms\");",
          "",
          "[Removed Lines]",
          "9577: #line 1153 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "10668: #line 1383 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 227 ---",
          "[Context before]",
          "9737: static int",
          "9738: dissect_lpp_T_error_Resolution(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "9740:   tvbuff_t *error_Resolution_tvb = NULL;",
          "9741:   offset = dissect_per_bit_string(tvb, offset, actx, tree, -1,",
          "9742:                                      2, 2, FALSE, &error_Resolution_tvb, NULL);",
          "",
          "[Removed Lines]",
          "9739: #line 309 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "10830: #line 315 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 228 ---",
          "[Context before]",
          "9748:   if (error_Resolution_tvb) {",
          "9749:     actx->created_item = proto_tree_add_uint(tree, hf_index, error_Resolution_tvb, 0, 1, tvb_get_bits8(error_Resolution_tvb, 0, 2));",
          "9750:   }",
          "",
          "[Removed Lines]",
          "9747: #line 313 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "10838: #line 319 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 229 ---",
          "[Context before]",
          "9758: static int",
          "9759: dissect_lpp_T_error_Value(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "9761:   tvbuff_t *error_Value_tvb = NULL;",
          "9762:   offset = dissect_per_bit_string(tvb, offset, actx, tree, -1,",
          "9763:                                      5, 5, FALSE, &error_Value_tvb, NULL);",
          "",
          "[Removed Lines]",
          "9760: #line 321 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "10851: #line 327 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 230 ---",
          "[Context before]",
          "9769:   if (error_Value_tvb) {",
          "9770:     actx->created_item = proto_tree_add_uint(tree, hf_index, error_Value_tvb, 0, 1, tvb_get_bits8(error_Value_tvb, 0, 5));",
          "9771:   }",
          "",
          "[Removed Lines]",
          "9768: #line 325 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "10859: #line 331 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 231 ---",
          "[Context before]",
          "9779: static int",
          "9780: dissect_lpp_T_error_NumSamples(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "9782:   tvbuff_t *error_NumSamples_tvb = NULL;",
          "9783:   offset = dissect_per_bit_string(tvb, offset, actx, tree, -1,",
          "9784:                                      3, 3, FALSE, &error_NumSamples_tvb, NULL);",
          "",
          "[Removed Lines]",
          "9781: #line 333 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "10872: #line 339 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 232 ---",
          "[Context before]",
          "9790:   if (error_NumSamples_tvb) {",
          "9791:     actx->created_item = proto_tree_add_uint(tree, hf_index, error_NumSamples_tvb, 0, 1, tvb_get_bits8(error_NumSamples_tvb, 0, 3));",
          "9792:   }",
          "",
          "[Removed Lines]",
          "9789: #line 337 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "10880: #line 343 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 233 ---",
          "[Context before]",
          "10186: static int",
          "10187: dissect_lpp_ProvideLocationInformation(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "10189:   col_append_sep_str(actx->pinfo->cinfo, COL_INFO, NULL, \"Provide Location Information\");",
          "",
          "[Removed Lines]",
          "10188: #line 72 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "11279: #line 75 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 234 ---",
          "[Context before]",
          "10312: static int",
          "10313: dissect_lpp_Abort(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "10315:   col_append_sep_str(actx->pinfo->cinfo, COL_INFO, NULL, \"Abort\");",
          "",
          "[Removed Lines]",
          "10314: #line 75 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "11405: #line 78 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 235 ---",
          "[Context before]",
          "10398: static int",
          "10399: dissect_lpp_Error(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "10401:   col_append_sep_str(actx->pinfo->cinfo, COL_INFO, NULL, \"Error\");",
          "",
          "[Removed Lines]",
          "10400: #line 78 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "11491: #line 81 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 236 ---",
          "[Context before]",
          "10593: static int dissect_lpp(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void *data _U_) {",
          "10594:   proto_tree *subtree;",
          "",
          "[Removed Lines]",
          "10591: #line 1346 \"../../asn1/lpp/packet-lpp-template.c\"",
          "",
          "[Added Lines]",
          "11682: #line 1630 \"../../asn1/lpp/packet-lpp-template.c\"",
          "",
          "---------------",
          "--- Hunk 237 ---",
          "[Context before]",
          "11370:       { \"time\", \"lpp.time\",",
          "11371:         FT_UINT32, BASE_DEC, NULL, 0,",
          "11372:         NULL, HFILL }},",
          "11373:     { &hf_lpp_locationEstimate,",
          "11374:       { \"locationEstimate\", \"lpp.locationEstimate\",",
          "11375:         FT_UINT32, BASE_DEC, VALS(lpp_LocationCoordinates_vals), 0,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "12464:     { &hf_lpp_responseTimeEarlyFix_r12,",
          "12465:       { \"responseTimeEarlyFix-r12\", \"lpp.responseTimeEarlyFix_r12\",",
          "12466:         FT_UINT32, BASE_DEC, NULL, 0,",
          "12467:         NULL, HFILL }},",
          "",
          "---------------",
          "--- Hunk 238 ---",
          "[Context before]",
          "11382:       { \"locationError\", \"lpp.locationError_element\",",
          "11383:         FT_NONE, BASE_NONE, NULL, 0,",
          "11384:         NULL, HFILL }},",
          "11385:     { &hf_lpp_ellipsoidPoint_01,",
          "11386:       { \"ellipsoidPoint\", \"lpp.ellipsoidPoint_element\",",
          "11387:         FT_NONE, BASE_NONE, NULL, 0,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "12480:     { &hf_lpp_earlyFixReport_r12,",
          "12481:       { \"earlyFixReport-r12\", \"lpp.earlyFixReport_r12\",",
          "12482:         FT_UINT32, BASE_DEC, VALS(lpp_EarlyFixReport_r12_vals), 0,",
          "12483:         NULL, HFILL }},",
          "",
          "---------------",
          "--- Hunk 239 ---",
          "[Context before]",
          "11746:       { \"gnss-AuxiliaryInformation\", \"lpp.gnss_AuxiliaryInformation\",",
          "11747:         FT_UINT32, BASE_DEC, VALS(lpp_GNSS_AuxiliaryInformation_vals), 0,",
          "11748:         NULL, HFILL }},",
          "11749:     { &hf_lpp_gnss_SystemTime,",
          "11750:       { \"gnss-SystemTime\", \"lpp.gnss_SystemTime_element\",",
          "11751:         FT_NONE, BASE_NONE, NULL, 0,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "12848:     { &hf_lpp_bds_DifferentialCorrections_r12,",
          "12849:       { \"bds-DifferentialCorrections-r12\", \"lpp.bds_DifferentialCorrections_r12_element\",",
          "12850:         FT_NONE, BASE_NONE, NULL, 0,",
          "12851:         NULL, HFILL }},",
          "12852:     { &hf_lpp_bds_GridModel_r12,",
          "12853:       { \"bds-GridModel-r12\", \"lpp.bds_GridModel_r12_element\",",
          "12854:         FT_NONE, BASE_NONE, NULL, 0,",
          "12855:         \"BDS_GridModelParameter_r12\", HFILL }},",
          "",
          "---------------",
          "--- Hunk 240 ---",
          "[Context before]",
          "11941:     { &hf_lpp_ai0,",
          "11942:       { \"ai0\", \"lpp.ai0\",",
          "11943:         FT_UINT32, BASE_CUSTOM, &lpp_ai0_fmt, 0,",
          "11945:     { &hf_lpp_ai1,",
          "11946:       { \"ai1\", \"lpp.ai1\",",
          "11949:     { &hf_lpp_ai2,",
          "11950:       { \"ai2\", \"lpp.ai2\",",
          "11953:     { &hf_lpp_ionoStormFlag1,",
          "11954:       { \"ionoStormFlag1\", \"lpp.ionoStormFlag1\",",
          "11955:         FT_UINT32, BASE_DEC, NULL, 0,",
          "",
          "[Removed Lines]",
          "11944:         \"INTEGER_0_4095\", HFILL }},",
          "11947:         FT_UINT32, BASE_CUSTOM, &lpp_ai1_fmt, 0,",
          "11948:         \"INTEGER_0_4095\", HFILL }},",
          "11951:         FT_UINT32, BASE_CUSTOM, &lpp_ai2_fmt, 0,",
          "11952:         \"INTEGER_0_4095\", HFILL }},",
          "",
          "[Added Lines]",
          "13051:         \"INTEGER_0_2047\", HFILL }},",
          "13054:         FT_INT32, BASE_CUSTOM, &lpp_ai1_fmt, 0,",
          "13055:         \"INTEGER_M1024_1023\", HFILL }},",
          "13058:         FT_INT32, BASE_CUSTOM, &lpp_ai2_fmt, 0,",
          "13059:         \"INTEGER_M8192_8191\", HFILL }},",
          "",
          "---------------",
          "--- Hunk 241 ---",
          "[Context before]",
          "12110:       { \"gnss-OrbitModel\", \"lpp.gnss_OrbitModel\",",
          "12111:         FT_UINT32, BASE_DEC, VALS(lpp_GNSS_OrbitModel_vals), 0,",
          "12112:         NULL, HFILL }},",
          "12113:     { &hf_lpp_standardClockModelList,",
          "12114:       { \"standardClockModelList\", \"lpp.standardClockModelList\",",
          "12115:         FT_UINT32, BASE_DEC, NULL, 0,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "13220:     { &hf_lpp_svHealthExt_v12xy,",
          "13221:       { \"svHealthExt-v12xy\", \"lpp.svHealthExt_v12xy\",",
          "13222:         FT_BYTES, BASE_NONE, NULL, 0,",
          "13223:         \"T_svHealthExt_v12xy\", HFILL }},",
          "",
          "---------------",
          "--- Hunk 242 ---",
          "[Context before]",
          "12130:       { \"sbas-ClockModel\", \"lpp.sbas_ClockModel_element\",",
          "12131:         FT_NONE, BASE_NONE, NULL, 0,",
          "12132:         NULL, HFILL }},",
          "12133:     { &hf_lpp_keplerianSet,",
          "12134:       { \"keplerianSet\", \"lpp.keplerianSet_element\",",
          "12135:         FT_NONE, BASE_NONE, NULL, 0,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "13244:     { &hf_lpp_bds_ClockModel_r12,",
          "13245:       { \"bds-ClockModel-r12\", \"lpp.bds_ClockModel_r12_element\",",
          "13246:         FT_NONE, BASE_NONE, NULL, 0,",
          "13247:         NULL, HFILL }},",
          "",
          "---------------",
          "--- Hunk 243 ---",
          "[Context before]",
          "12150:       { \"sbas-ECEF\", \"lpp.sbas_ECEF_element\",",
          "12151:         FT_NONE, BASE_NONE, NULL, 0,",
          "12152:         \"NavModel_SBAS_ECEF\", HFILL }},",
          "12153:     { &hf_lpp_StandardClockModelList_item,",
          "12154:       { \"StandardClockModelElement\", \"lpp.StandardClockModelElement_element\",",
          "12155:         FT_NONE, BASE_NONE, NULL, 0,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "13268:     { &hf_lpp_bds_KeplerianSet_r12,",
          "13269:       { \"bds-KeplerianSet-r12\", \"lpp.bds_KeplerianSet_r12_element\",",
          "13270:         FT_NONE, BASE_NONE, NULL, 0,",
          "13271:         \"NavModel_BDS_KeplerianSet_r12\", HFILL }},",
          "",
          "---------------",
          "--- Hunk 244 ---",
          "[Context before]",
          "12161:     { &hf_lpp_stanClockAF2,",
          "12162:       { \"stanClockAF2\", \"lpp.stanClockAF2\",",
          "12163:         FT_INT32, BASE_CUSTOM, &lpp_stanClockAF2_fmt, 0,",
          "12165:     { &hf_lpp_stanClockAF1,",
          "12166:       { \"stanClockAF1\", \"lpp.stanClockAF1\",",
          "12167:         FT_INT32, BASE_CUSTOM, &lpp_stanClockAF1_fmt, 0,",
          "12169:     { &hf_lpp_stanClockAF0,",
          "12170:       { \"stanClockAF0\", \"lpp.stanClockAF0\",",
          "12171:         FT_INT32, BASE_CUSTOM, &lpp_stanClockAF0_fmt, 0,",
          "12173:     { &hf_lpp_stanClockTgd,",
          "12174:       { \"stanClockTgd\", \"lpp.stanClockTgd\",",
          "12175:         FT_INT32, BASE_CUSTOM, &lpp_stanClockTgd_fmt, 0,",
          "12176:         \"INTEGER_M512_511\", HFILL }},",
          "12177:     { &hf_lpp_stanModelID,",
          "12178:       { \"stanModelID\", \"lpp.stanModelID\",",
          "12179:         FT_UINT32, BASE_DEC, VALS(lpp_stanModelID_vals), 0,",
          "",
          "[Removed Lines]",
          "12164:         \"INTEGER_M2048_2047\", HFILL }},",
          "12168:         \"INTEGER_M131072_131071\", HFILL }},",
          "12172:         \"INTEGER_M134217728_134217727\", HFILL }},",
          "",
          "[Added Lines]",
          "13283:         \"INTEGER_M32_31\", HFILL }},",
          "13287:         \"INTEGER_M1048576_1048575\", HFILL }},",
          "13291:         \"INTEGER_M1073741824_1073741823\", HFILL }},",
          "13296:     { &hf_lpp_sisa,",
          "13297:       { \"sisa\", \"lpp.sisa\",",
          "13298:         FT_UINT32, BASE_CUSTOM, &lpp_sisa_fmt, 0,",
          "13299:         \"INTEGER_0_255\", HFILL }},",
          "",
          "---------------",
          "--- Hunk 245 ---",
          "[Context before]",
          "12282:       { \"sbasAgf1\", \"lpp.sbasAgf1\",",
          "12283:         FT_INT32, BASE_CUSTOM, &lpp_sbasAgf1_fmt, 0,",
          "12284:         \"INTEGER_M128_127\", HFILL }},",
          "12285:     { &hf_lpp_keplerToe,",
          "12286:       { \"keplerToe\", \"lpp.keplerToe\",",
          "12287:         FT_UINT32, BASE_CUSTOM, &lpp_keplerToe_fmt, 0,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "13408:     { &hf_lpp_bdsAODC_r12,",
          "13409:       { \"bdsAODC-r12\", \"lpp.bdsAODC_r12\",",
          "13410:         FT_UINT32, BASE_CUSTOM, &lpp_bdsAODC_AODE_r12_fmt, 0,",
          "13411:         \"INTEGER_0_31\", HFILL }},",
          "13412:     { &hf_lpp_bdsToc_r12,",
          "13413:       { \"bdsToc-r12\", \"lpp.bdsToc_r12\",",
          "13414:         FT_UINT32, BASE_CUSTOM, &lpp_bdsToc_Toe_r12_fmt, 0,",
          "13415:         \"INTEGER_0_131071\", HFILL }},",
          "13416:     { &hf_lpp_bdsA0_r12,",
          "13417:       { \"bdsA0-r12\", \"lpp.bdsA0_r12\",",
          "13418:         FT_INT32, BASE_CUSTOM, &lpp_bdsA0_r12_fmt, 0,",
          "13419:         \"INTEGER_M8388608_8388607\", HFILL }},",
          "13420:     { &hf_lpp_bdsA1_r12,",
          "13421:       { \"bdsA1-r12\", \"lpp.bdsA1_r12\",",
          "13422:         FT_INT32, BASE_CUSTOM, &lpp_bdsA1_r12_fmt, 0,",
          "13423:         \"INTEGER_M2097152_2097151\", HFILL }},",
          "13424:     { &hf_lpp_bdsA2_r12,",
          "13425:       { \"bdsA2-r12\", \"lpp.bdsA2_r12\",",
          "13426:         FT_INT32, BASE_CUSTOM, &lpp_bdsA2_r12_fmt, 0,",
          "13427:         \"INTEGER_M1024_1023\", HFILL }},",
          "13428:     { &hf_lpp_bdsTgd1_r12,",
          "13429:       { \"bdsTgd1-r12\", \"lpp.bdsTgd1_r12\",",
          "13430:         FT_INT32, BASE_CUSTOM, &lpp_bdsTgd1_r12_fmt, 0,",
          "13431:         \"INTEGER_M512_511\", HFILL }},",
          "",
          "---------------",
          "--- Hunk 246 ---",
          "[Context before]",
          "12618:       { \"sbasZgDotDot\", \"lpp.sbasZgDotDot\",",
          "12619:         FT_INT32, BASE_CUSTOM, &lpp_sbasZgDotDot_fmt, 0,",
          "12620:         \"INTEGER_M512_511\", HFILL }},",
          "12621:     { &hf_lpp_gnss_BadSignalList,",
          "12622:       { \"gnss-BadSignalList\", \"lpp.gnss_BadSignalList\",",
          "12623:         FT_UINT32, BASE_DEC, NULL, 0,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "13768:     { &hf_lpp_bdsAODE_r12,",
          "13769:       { \"bdsAODE-r12\", \"lpp.bdsAODE_r12\",",
          "13770:         FT_UINT32, BASE_CUSTOM, &lpp_bdsAODC_AODE_r12_fmt, 0,",
          "13771:         \"INTEGER_0_31\", HFILL }},",
          "13772:     { &hf_lpp_bdsURAI_r12,",
          "13773:       { \"bdsURAI-r12\", \"lpp.bdsURAI_r12\",",
          "13774:         FT_UINT32, BASE_DEC, NULL, 0,",
          "13775:         NULL, HFILL }},",
          "13776:     { &hf_lpp_bdsToe_r12,",
          "13777:       { \"bdsToe-r12\", \"lpp.bdsToe_r12\",",
          "13778:         FT_UINT32, BASE_CUSTOM, &lpp_bdsToc_Toe_r12_fmt, 0,",
          "13779:         \"INTEGER_0_131071\", HFILL }},",
          "13780:     { &hf_lpp_bdsAPowerHalf_r12,",
          "13781:       { \"bdsAPowerHalf-r12\", \"lpp.bdsAPowerHalf_r12\",",
          "13782:         FT_UINT32, BASE_CUSTOM, &lpp_bdsAPowerHalf_r12_fmt, 0,",
          "13783:         \"INTEGER_0_4294967295\", HFILL }},",
          "13784:     { &hf_lpp_bdsE_r12,",
          "13785:       { \"bdsE-r12\", \"lpp.bdsE_r12\",",
          "13786:         FT_UINT32, BASE_CUSTOM, &lpp_bdsE_r12_fmt, 0,",
          "13787:         \"INTEGER_0_4294967295\", HFILL }},",
          "13788:     { &hf_lpp_bdsW_r12,",
          "13789:       { \"bdsW-r12\", \"lpp.bdsW_r12\",",
          "13790:         FT_INT32, BASE_CUSTOM, &lpp_bdsW_M0_Omega0_I0_r12_fmt, 0,",
          "13791:         \"INTEGER_M2147483648_2147483647\", HFILL }},",
          "13792:     { &hf_lpp_bdsDeltaN_r12,",
          "13793:       { \"bdsDeltaN-r12\", \"lpp.bdsDeltaN_r12\",",
          "13794:         FT_INT32, BASE_CUSTOM, &lpp_bdsDeltaN_OmegaDot_IDot_r12_fmt, 0,",
          "13795:         \"INTEGER_M32768_32767\", HFILL }},",
          "13796:     { &hf_lpp_bdsM0_r12,",
          "13797:       { \"bdsM0-r12\", \"lpp.bdsM0_r12\",",
          "13798:         FT_INT32, BASE_CUSTOM, &lpp_bdsW_M0_Omega0_I0_r12_fmt, 0,",
          "13799:         \"INTEGER_M2147483648_2147483647\", HFILL }},",
          "13800:     { &hf_lpp_bdsOmega0_r12,",
          "13801:       { \"bdsOmega0-r12\", \"lpp.bdsOmega0_r12\",",
          "13802:         FT_INT32, BASE_CUSTOM, &lpp_bdsW_M0_Omega0_I0_r12_fmt, 0,",
          "13803:         \"INTEGER_M2147483648_2147483647\", HFILL }},",
          "13804:     { &hf_lpp_bdsOmegaDot_r12,",
          "13805:       { \"bdsOmegaDot-r12\", \"lpp.bdsOmegaDot_r12\",",
          "13806:         FT_INT32, BASE_CUSTOM, &lpp_bdsDeltaN_OmegaDot_IDot_r12_fmt, 0,",
          "13807:         \"INTEGER_M8388608_8388607\", HFILL }},",
          "13808:     { &hf_lpp_bdsI0_r12,",
          "13809:       { \"bdsI0-r12\", \"lpp.bdsI0_r12\",",
          "13810:         FT_INT32, BASE_CUSTOM, &lpp_bdsW_M0_Omega0_I0_r12_fmt, 0,",
          "13811:         \"INTEGER_M2147483648_2147483647\", HFILL }},",
          "13812:     { &hf_lpp_bdsIDot_r12,",
          "13813:       { \"bdsIDot-r12\", \"lpp.bdsIDot_r12\",",
          "13814:         FT_INT32, BASE_CUSTOM, &lpp_bdsDeltaN_OmegaDot_IDot_r12_fmt, 0,",
          "13815:         \"INTEGER_M8192_8191\", HFILL }},",
          "13816:     { &hf_lpp_bdsCuc_r12,",
          "13817:       { \"bdsCuc-r12\", \"lpp.bdsCuc_r12\",",
          "13818:         FT_INT32, BASE_CUSTOM, &lpp_bdsCuc_Cus_Cic_Cis_r12_fmt, 0,",
          "13819:         \"INTEGER_M131072_131071\", HFILL }},",
          "13820:     { &hf_lpp_bdsCus_r12,",
          "13821:       { \"bdsCus-r12\", \"lpp.bdsCus_r12\",",
          "13822:         FT_INT32, BASE_CUSTOM, &lpp_bdsCuc_Cus_Cic_Cis_r12_fmt, 0,",
          "13823:         \"INTEGER_M131072_131071\", HFILL }},",
          "13824:     { &hf_lpp_bdsCrc_r12,",
          "13825:       { \"bdsCrc-r12\", \"lpp.bdsCrc_r12\",",
          "13826:         FT_INT32, BASE_CUSTOM, &lpp_bdsCrc_Crs_r12_fmt, 0,",
          "13827:         \"INTEGER_M131072_131071\", HFILL }},",
          "13828:     { &hf_lpp_bdsCrs_r12,",
          "13829:       { \"bdsCrs-r12\", \"lpp.bdsCrs_r12\",",
          "13830:         FT_INT32, BASE_CUSTOM, &lpp_bdsCrc_Crs_r12_fmt, 0,",
          "13831:         \"INTEGER_M131072_131071\", HFILL }},",
          "13832:     { &hf_lpp_bdsCic_r12,",
          "13833:       { \"bdsCic-r12\", \"lpp.bdsCic_r12\",",
          "13834:         FT_INT32, BASE_CUSTOM, &lpp_bdsCuc_Cus_Cic_Cis_r12_fmt, 0,",
          "13835:         \"INTEGER_M131072_131071\", HFILL }},",
          "13836:     { &hf_lpp_bdsCis_r12,",
          "13837:       { \"bdsCis-r12\", \"lpp.bdsCis_r12\",",
          "13838:         FT_INT32, BASE_CUSTOM, &lpp_bdsCuc_Cus_Cic_Cis_r12_fmt, 0,",
          "13839:         \"INTEGER_M131072_131071\", HFILL }},",
          "",
          "---------------",
          "--- Hunk 247 ---",
          "[Context before]",
          "12724:         \"INTEGER_0_255\", HFILL }},",
          "12725:     { &hf_lpp_toa,",
          "12726:       { \"toa\", \"lpp.toa\",",
          "12729:     { &hf_lpp_ioda,",
          "12730:       { \"ioda\", \"lpp.ioda\",",
          "12731:         FT_UINT32, BASE_DEC, NULL, 0,",
          "",
          "[Removed Lines]",
          "12727:         FT_UINT32, BASE_CUSTOM, &lpp_toa_fmt, 0,",
          "12728:         \"INTEGER_0_255\", HFILL }},",
          "",
          "[Added Lines]",
          "13946:         FT_UINT32, BASE_DEC, NULL, 0,",
          "13947:         NULL, HFILL }},",
          "",
          "---------------",
          "--- Hunk 248 ---",
          "[Context before]",
          "12738:       { \"gnss-AlmanacList\", \"lpp.gnss_AlmanacList\",",
          "12739:         FT_UINT32, BASE_DEC, NULL, 0,",
          "12740:         NULL, HFILL }},",
          "12741:     { &hf_lpp_GNSS_AlmanacList_item,",
          "12742:       { \"GNSS-AlmanacElement\", \"lpp.GNSS_AlmanacElement\",",
          "12743:         FT_UINT32, BASE_DEC, VALS(lpp_GNSS_AlmanacElement_vals), 0,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "13960:     { &hf_lpp_toa_ext_v12xy,",
          "13961:       { \"toa-ext-v12xy\", \"lpp.toa_ext_v12xy\",",
          "13962:         FT_UINT32, BASE_DEC, NULL, 0,",
          "13963:         \"T_toa_ext_v12xy\", HFILL }},",
          "13964:     { &hf_lpp_ioda_ext_v12xy,",
          "13965:       { \"ioda-ext-v12xy\", \"lpp.ioda_ext_v12xy\",",
          "13966:         FT_UINT32, BASE_DEC, NULL, 0,",
          "13967:         \"INTEGER_4_15\", HFILL }},",
          "",
          "---------------",
          "--- Hunk 249 ---",
          "[Context before]",
          "12766:       { \"ecef-SBAS-Almanac\", \"lpp.ecef_SBAS_Almanac_element\",",
          "12767:         FT_NONE, BASE_NONE, NULL, 0,",
          "12768:         \"AlmanacECEF_SBAS_AlmanacSet\", HFILL }},",
          "12769:     { &hf_lpp_kepAlmanacE,",
          "12770:       { \"kepAlmanacE\", \"lpp.kepAlmanacE\",",
          "12771:         FT_UINT32, BASE_CUSTOM, &lpp_kepAlmanacE_fmt, 0,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "13996:     { &hf_lpp_keplerianBDS_Almanac_r12,",
          "13997:       { \"keplerianBDS-Almanac-r12\", \"lpp.keplerianBDS_Almanac_r12_element\",",
          "13998:         FT_NONE, BASE_NONE, NULL, 0,",
          "13999:         \"AlmanacBDS_AlmanacSet_r12\", HFILL }},",
          "",
          "---------------",
          "--- Hunk 250 ---",
          "[Context before]",
          "12778:       { \"kepAlmanacOmegaDot\", \"lpp.kepAlmanacOmegaDot\",",
          "12779:         FT_INT32, BASE_CUSTOM, &lpp_kepAlmanacOmegaDot_fmt, 0,",
          "12780:         \"INTEGER_M1024_1023\", HFILL }},",
          "12785:     { &hf_lpp_kepAlmanacAPowerHalf,",
          "12786:       { \"kepAlmanacAPowerHalf\", \"lpp.kepAlmanacAPowerHalf\",",
          "12787:         FT_INT32, BASE_CUSTOM, &lpp_kepAlmanacAPowerHalf_fmt, 0,",
          "12789:     { &hf_lpp_kepAlmanacOmega0,",
          "12790:       { \"kepAlmanacOmega0\", \"lpp.kepAlmanacOmega0\",",
          "12791:         FT_INT32, BASE_CUSTOM, &lpp_kepAlmanacOmega0_W_M0_fmt, 0,",
          "",
          "[Removed Lines]",
          "12781:     { &hf_lpp_kepSVHealth,",
          "12782:       { \"kepSVHealth\", \"lpp.kepSVHealth\",",
          "12783:         FT_UINT32, BASE_DEC, NULL, 0,",
          "12784:         \"INTEGER_0_15\", HFILL }},",
          "12788:         \"INTEGER_M65536_65535\", HFILL }},",
          "",
          "[Added Lines]",
          "14012:     { &hf_lpp_kepSV_StatusINAV,",
          "14013:       { \"kepSV-StatusINAV\", \"lpp.kepSV_StatusINAV\",",
          "14014:         FT_BYTES, BASE_NONE, NULL, 0,",
          "14015:         NULL, HFILL }},",
          "14016:     { &hf_lpp_kepSV_StatusFNAV,",
          "14017:       { \"kepSV-StatusFNAV\", \"lpp.kepSV_StatusFNAV\",",
          "14018:         FT_BYTES, BASE_NONE, NULL, 0,",
          "14019:         NULL, HFILL }},",
          "14023:         \"INTEGER_M4096_4095\", HFILL }},",
          "",
          "---------------",
          "--- Hunk 251 ---",
          "[Context before]",
          "12801:     { &hf_lpp_kepAlmanacAF0,",
          "12802:       { \"kepAlmanacAF0\", \"lpp.kepAlmanacAF0\",",
          "12803:         FT_INT32, BASE_CUSTOM, &lpp_kepAlmanacAF0_fmt, 0,",
          "12805:     { &hf_lpp_kepAlmanacAF1,",
          "12806:       { \"kepAlmanacAF1\", \"lpp.kepAlmanacAF1\",",
          "12807:         FT_INT32, BASE_CUSTOM, &lpp_kepAlmanacAF1_fmt, 0,",
          "12809:     { &hf_lpp_navAlmE,",
          "12810:       { \"navAlmE\", \"lpp.navAlmE\",",
          "12811:         FT_UINT32, BASE_CUSTOM, &lpp_navAlmE_fmt, 0,",
          "",
          "[Removed Lines]",
          "12804:         \"INTEGER_M8192_8191\", HFILL }},",
          "12808:         \"INTEGER_M1024_1023\", HFILL }},",
          "",
          "[Added Lines]",
          "14039:         \"INTEGER_M32768_32767\", HFILL }},",
          "14043:         \"INTEGER_M4096_4095\", HFILL }},",
          "",
          "---------------",
          "--- Hunk 252 ---",
          "[Context before]",
          "13006:       { \"sbasAlmTo\", \"lpp.sbasAlmTo\",",
          "13007:         FT_UINT32, BASE_CUSTOM, &lpp_sbasAlmTo_fmt, 0,",
          "13008:         \"INTEGER_0_2047\", HFILL }},",
          "13009:     { &hf_lpp_utcModel1,",
          "13010:       { \"utcModel1\", \"lpp.utcModel1_element\",",
          "13011:         FT_NONE, BASE_NONE, NULL, 0,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14244:     { &hf_lpp_bdsAlmToa_r12,",
          "14245:       { \"bdsAlmToa-r12\", \"lpp.bdsAlmToa_r12\",",
          "14246:         FT_UINT32, BASE_CUSTOM, &lpp_bdsAlmToa_r12_fmt, 0,",
          "14247:         \"INTEGER_0_255\", HFILL }},",
          "14248:     { &hf_lpp_bdsAlmSqrtA_r12,",
          "14249:       { \"bdsAlmSqrtA-r12\", \"lpp.bdsAlmSqrtA_r12\",",
          "14250:         FT_UINT32, BASE_CUSTOM, &lpp_bdsAlmSqrtA_r12_fmt, 0,",
          "14251:         \"INTEGER_0_16777215\", HFILL }},",
          "14252:     { &hf_lpp_bdsAlmE_r12,",
          "14253:       { \"bdsAlmE-r12\", \"lpp.bdsAlmE_r12\",",
          "14254:         FT_UINT32, BASE_CUSTOM, &lpp_bdsAlmE_r12_fmt, 0,",
          "14255:         \"INTEGER_0_131071\", HFILL }},",
          "14256:     { &hf_lpp_bdsAlmW_r12,",
          "14257:       { \"bdsAlmW-r12\", \"lpp.bdsAlmW_r12\",",
          "14258:         FT_INT32, BASE_CUSTOM, &lpp_bdsAlmW_M0_Omega0_r12_fmt, 0,",
          "14259:         \"INTEGER_M8388608_8388607\", HFILL }},",
          "14260:     { &hf_lpp_bdsAlmM0_r12,",
          "14261:       { \"bdsAlmM0-r12\", \"lpp.bdsAlmM0_r12\",",
          "14262:         FT_INT32, BASE_CUSTOM, &lpp_bdsAlmW_M0_Omega0_r12_fmt, 0,",
          "14263:         \"INTEGER_M8388608_8388607\", HFILL }},",
          "14264:     { &hf_lpp_bdsAlmOmega0_r12,",
          "14265:       { \"bdsAlmOmega0-r12\", \"lpp.bdsAlmOmega0_r12\",",
          "14266:         FT_INT32, BASE_CUSTOM, &lpp_bdsAlmW_M0_Omega0_r12_fmt, 0,",
          "14267:         \"INTEGER_M8388608_8388607\", HFILL }},",
          "14268:     { &hf_lpp_bdsAlmOmegaDot_r12,",
          "14269:       { \"bdsAlmOmegaDot-r12\", \"lpp.bdsAlmOmegaDot_r12\",",
          "14270:         FT_INT32, BASE_CUSTOM, &lpp_bdsAlmOmegaDot_r12_fmt, 0,",
          "14271:         \"INTEGER_M65536_65535\", HFILL }},",
          "14272:     { &hf_lpp_bdsAlmDeltaI_r12,",
          "14273:       { \"bdsAlmDeltaI-r12\", \"lpp.bdsAlmDeltaI_r12\",",
          "14274:         FT_INT32, BASE_CUSTOM, &lpp_bdsAlmDeltaI_r12_fmt, 0,",
          "14275:         \"INTEGER_M32768_32767\", HFILL }},",
          "14276:     { &hf_lpp_bdsAlmA0_r12,",
          "14277:       { \"bdsAlmA0-r12\", \"lpp.bdsAlmA0_r12\",",
          "14278:         FT_INT32, BASE_CUSTOM, &lpp_bdsAlmA0_r12_fmt, 0,",
          "14279:         \"INTEGER_M1024_1023\", HFILL }},",
          "14280:     { &hf_lpp_bdsAlmA1_r12,",
          "14281:       { \"bdsAlmA1-r12\", \"lpp.bdsAlmA1_r12\",",
          "14282:         FT_INT32, BASE_CUSTOM, &lpp_bdsAlmA1_r12_fmt, 0,",
          "14283:         \"INTEGER_M1024_1023\", HFILL }},",
          "14284:     { &hf_lpp_bdsSvHealth_r12,",
          "14285:       { \"bdsSvHealth-r12\", \"lpp.bdsSvHealth_r12\",",
          "14286:         FT_BYTES, BASE_NONE, NULL, 0,",
          "14287:         NULL, HFILL }},",
          "",
          "---------------",
          "--- Hunk 253 ---",
          "[Context before]",
          "13022:       { \"utcModel4\", \"lpp.utcModel4_element\",",
          "13023:         FT_NONE, BASE_NONE, NULL, 0,",
          "13024:         \"UTC_ModelSet4\", HFILL }},",
          "13025:     { &hf_lpp_gnss_Utc_A1,",
          "13026:       { \"gnss-Utc-A1\", \"lpp.gnss_Utc_A1\",",
          "13027:         FT_INT32, BASE_CUSTOM, &lpp_gnss_Utc_A1_fmt, 0,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14304:     { &hf_lpp_utcModel5_r12,",
          "14305:       { \"utcModel5-r12\", \"lpp.utcModel5_r12_element\",",
          "14306:         FT_NONE, BASE_NONE, NULL, 0,",
          "14307:         \"UTC_ModelSet5_r12\", HFILL }},",
          "",
          "---------------",
          "--- Hunk 254 ---",
          "[Context before]",
          "13146:       { \"utcStandardID\", \"lpp.utcStandardID\",",
          "13147:         FT_UINT8, BASE_DEC, VALS(lpp_utcStandardID_vals), 0,",
          "13148:         \"INTEGER_0_7\", HFILL }},",
          "13149:     { &hf_lpp_gnss_ID_GPS,",
          "13150:       { \"gnss-ID-GPS\", \"lpp.gnss_ID_GPS\",",
          "13151:         FT_UINT32, BASE_DEC, NULL, 0,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14432:     { &hf_lpp_utcA0_r12,",
          "14433:       { \"utcA0-r12\", \"lpp.utcA0_r12\",",
          "14434:         FT_INT32, BASE_CUSTOM, &lpp_gnss_Utc_A0_fmt, 0,",
          "14435:         \"INTEGER_M2147483648_2147483647\", HFILL }},",
          "14436:     { &hf_lpp_utcA1_r12,",
          "14437:       { \"utcA1-r12\", \"lpp.utcA1_r12\",",
          "14438:         FT_INT32, BASE_CUSTOM, &lpp_gnss_Utc_A1_fmt, 0,",
          "14439:         \"INTEGER_M8388608_8388607\", HFILL }},",
          "14440:     { &hf_lpp_utcDeltaTls_r12,",
          "14441:       { \"utcDeltaTls-r12\", \"lpp.utcDeltaTls_r12\",",
          "14442:         FT_INT32, BASE_DEC, NULL, 0,",
          "14443:         NULL, HFILL }},",
          "14444:     { &hf_lpp_utcWNlsf_r12,",
          "14445:       { \"utcWNlsf-r12\", \"lpp.utcWNlsf_r12\",",
          "14446:         FT_UINT32, BASE_DEC, NULL, 0,",
          "14447:         NULL, HFILL }},",
          "14448:     { &hf_lpp_utcDN_r12,",
          "14449:       { \"utcDN-r12\", \"lpp.utcDN_r12\",",
          "14450:         FT_UINT32, BASE_DEC, NULL, 0,",
          "14451:         NULL, HFILL }},",
          "14452:     { &hf_lpp_utcDeltaTlsf_r12,",
          "14453:       { \"utcDeltaTlsf-r12\", \"lpp.utcDeltaTlsf_r12\",",
          "14454:         FT_INT32, BASE_DEC, NULL, 0,",
          "14455:         NULL, HFILL }},",
          "",
          "---------------",
          "--- Hunk 255 ---",
          "[Context before]",
          "13170:       { \"channelNumber\", \"lpp.channelNumber\",",
          "13171:         FT_INT32, BASE_DEC, NULL, 0,",
          "13172:         \"INTEGER_M7_13\", HFILL }},",
          "13173:     { &hf_lpp_gnss_CommonAssistDataReq,",
          "13174:       { \"gnss-CommonAssistDataReq\", \"lpp.gnss_CommonAssistDataReq_element\",",
          "13175:         FT_NONE, BASE_NONE, NULL, 0,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14480:     { &hf_lpp_dbds_RefTime_r12,",
          "14481:       { \"dbds-RefTime-r12\", \"lpp.dbds_RefTime_r12\",",
          "14482:         FT_UINT32, BASE_DEC, NULL, 0,",
          "14483:         NULL, HFILL }},",
          "14484:     { &hf_lpp_bds_SgnTypeList_r12,",
          "14485:       { \"bds-SgnTypeList-r12\", \"lpp.bds_SgnTypeList_r12\",",
          "14486:         FT_UINT32, BASE_DEC, NULL, 0,",
          "14487:         NULL, HFILL }},",
          "14488:     { &hf_lpp_BDS_SgnTypeList_r12_item,",
          "14489:       { \"BDS-SgnTypeElement-r12\", \"lpp.BDS_SgnTypeElement_r12_element\",",
          "14490:         FT_NONE, BASE_NONE, NULL, 0,",
          "14491:         NULL, HFILL }},",
          "14492:     { &hf_lpp_dbds_CorrectionList_r12,",
          "14493:       { \"dbds-CorrectionList-r12\", \"lpp.dbds_CorrectionList_r12\",",
          "14494:         FT_UINT32, BASE_DEC, NULL, 0,",
          "14495:         NULL, HFILL }},",
          "14496:     { &hf_lpp_DBDS_CorrectionList_r12_item,",
          "14497:       { \"DBDS-CorrectionElement-r12\", \"lpp.DBDS_CorrectionElement_r12_element\",",
          "14498:         FT_NONE, BASE_NONE, NULL, 0,",
          "14499:         NULL, HFILL }},",
          "14500:     { &hf_lpp_bds_UDREI_r12,",
          "14501:       { \"bds-UDREI-r12\", \"lpp.bds_UDREI_r12\",",
          "14502:         FT_UINT8, BASE_DEC|BASE_EXT_STRING, &lpp_bds_UDREI_vals_ext, 0,",
          "14503:         \"INTEGER_0_15\", HFILL }},",
          "14504:     { &hf_lpp_bds_RURAI_r12,",
          "14505:       { \"bds-RURAI-r12\", \"lpp.bds_RURAI_r12\",",
          "14506:         FT_UINT8, BASE_DEC|BASE_EXT_STRING, &lpp_bds_RURAI_vals_ext, 0,",
          "14507:         \"INTEGER_0_15\", HFILL }},",
          "14508:     { &hf_lpp_bds_ECC_DeltaT_r12,",
          "14509:       { \"bds-ECC-DeltaT-r12\", \"lpp.bds_ECC_DeltaT_r12\",",
          "14510:         FT_INT32, BASE_CUSTOM, &lpp_bds_ECC_DeltaT_r12_fmt, 0,",
          "14511:         \"INTEGER_M4096_4095\", HFILL }},",
          "14512:     { &hf_lpp_bds_RefTime_r12,",
          "14513:       { \"bds-RefTime-r12\", \"lpp.bds_RefTime_r12\",",
          "14514:         FT_UINT32, BASE_DEC, NULL, 0,",
          "14515:         NULL, HFILL }},",
          "14516:     { &hf_lpp_gridIonList_r12,",
          "14517:       { \"gridIonList-r12\", \"lpp.gridIonList_r12\",",
          "14518:         FT_UINT32, BASE_DEC, NULL, 0,",
          "14519:         NULL, HFILL }},",
          "14520:     { &hf_lpp_GridIonList_r12_item,",
          "14521:       { \"GridIonElement-r12\", \"lpp.GridIonElement_r12_element\",",
          "14522:         FT_NONE, BASE_NONE, NULL, 0,",
          "14523:         NULL, HFILL }},",
          "14524:     { &hf_lpp_igp_ID_r12,",
          "14525:       { \"igp-ID-r12\", \"lpp.igp_ID_r12\",",
          "14526:         FT_UINT32, BASE_DEC, NULL, 0,",
          "14527:         \"INTEGER_1_320\", HFILL }},",
          "14528:     { &hf_lpp_dt_r12,",
          "14529:       { \"dt-r12\", \"lpp.dt_r12\",",
          "14530:         FT_UINT32, BASE_CUSTOM, &lpp_bds_GridIonElement_dt_r12_fmt, 0,",
          "14531:         \"INTEGER_0_511\", HFILL }},",
          "14532:     { &hf_lpp_givei_r12,",
          "14533:       { \"givei-r12\", \"lpp.givei_r12\",",
          "14534:         FT_UINT8, BASE_DEC|BASE_EXT_STRING, &lpp_bds_givei_vals_ext, 0,",
          "14535:         \"INTEGER_0_15\", HFILL }},",
          "",
          "---------------",
          "--- Hunk 256 ---",
          "[Context before]",
          "13234:       { \"gnss-AuxiliaryInformationReq\", \"lpp.gnss_AuxiliaryInformationReq_element\",",
          "13235:         FT_NONE, BASE_NONE, NULL, 0,",
          "13236:         NULL, HFILL }},",
          "13237:     { &hf_lpp_gnss_TimeReqPrefList,",
          "13238:       { \"gnss-TimeReqPrefList\", \"lpp.gnss_TimeReqPrefList\",",
          "13239:         FT_UINT32, BASE_DEC, NULL, 0,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14600:     { &hf_lpp_bds_DifferentialCorrectionsReq_r12,",
          "14601:       { \"bds-DifferentialCorrectionsReq-r12\", \"lpp.bds_DifferentialCorrectionsReq_r12_element\",",
          "14602:         FT_NONE, BASE_NONE, NULL, 0,",
          "14603:         NULL, HFILL }},",
          "14604:     { &hf_lpp_bds_GridModelReq_r12,",
          "14605:       { \"bds-GridModelReq-r12\", \"lpp.bds_GridModelReq_r12_element\",",
          "14606:         FT_NONE, BASE_NONE, NULL, 0,",
          "14607:         NULL, HFILL }},",
          "",
          "---------------",
          "--- Hunk 257 ---",
          "[Context before]",
          "13654:       { \"gnss-AuxiliaryInformationSupport\", \"lpp.gnss_AuxiliaryInformationSupport_element\",",
          "13655:         FT_NONE, BASE_NONE, NULL, 0,",
          "13656:         NULL, HFILL }},",
          "13657:     { &hf_lpp_gnssSignalIDs,",
          "13658:       { \"gnssSignalIDs\", \"lpp.gnssSignalIDs_element\",",
          "13659:         FT_NONE, BASE_NONE, NULL, 0,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "15028:     { &hf_lpp_bds_DifferentialCorrectionsSupport_r12,",
          "15029:       { \"bds-DifferentialCorrectionsSupport-r12\", \"lpp.bds_DifferentialCorrectionsSupport_r12_element\",",
          "15030:         FT_NONE, BASE_NONE, NULL, 0,",
          "15031:         NULL, HFILL }},",
          "15032:     { &hf_lpp_bds_GridModelSupport_r12,",
          "15033:       { \"bds-GridModelSupport-r12\", \"lpp.bds_GridModelSupport_r12_element\",",
          "15034:         FT_NONE, BASE_NONE, NULL, 0,",
          "15035:         NULL, HFILL }},",
          "",
          "---------------",
          "--- Hunk 258 ---",
          "[Context before]",
          "13886:       { \"model-5\", \"lpp.model-5\",",
          "13887:         FT_BOOLEAN, 8, NULL, 0x08,",
          "13888:         NULL, HFILL }},",
          "13889:     { &hf_lpp_T_orbitModel_model_1,",
          "13890:       { \"model-1\", \"lpp.model-1\",",
          "13891:         FT_BOOLEAN, 8, NULL, 0x80,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "15268:     { &hf_lpp_T_clockModel_model_6,",
          "15269:       { \"model-6\", \"lpp.model-6\",",
          "15270:         FT_BOOLEAN, 8, NULL, 0x04,",
          "15271:         NULL, HFILL }},",
          "",
          "---------------",
          "--- Hunk 259 ---",
          "[Context before]",
          "13906:       { \"model-5\", \"lpp.model-5\",",
          "13907:         FT_BOOLEAN, 8, NULL, 0x08,",
          "13908:         NULL, HFILL }},",
          "13909:     { &hf_lpp_T_almanacModel_model_1,",
          "13910:       { \"model-1\", \"lpp.model-1\",",
          "13911:         FT_BOOLEAN, 8, NULL, 0x80,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "15292:     { &hf_lpp_T_orbitModel_model_6,",
          "15293:       { \"model-6\", \"lpp.model-6\",",
          "15294:         FT_BOOLEAN, 8, NULL, 0x04,",
          "15295:         NULL, HFILL }},",
          "",
          "---------------",
          "--- Hunk 260 ---",
          "[Context before]",
          "13930:       { \"model-6\", \"lpp.model-6\",",
          "13931:         FT_BOOLEAN, 8, NULL, 0x04,",
          "13932:         NULL, HFILL }},",
          "13933:     { &hf_lpp_T_utc_Model_model_1,",
          "13934:       { \"model-1\", \"lpp.model-1\",",
          "13935:         FT_BOOLEAN, 8, NULL, 0x80,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "15320:     { &hf_lpp_T_almanacModel_model_7,",
          "15321:       { \"model-7\", \"lpp.model-7\",",
          "15322:         FT_BOOLEAN, 8, NULL, 0x02,",
          "15323:         NULL, HFILL }},",
          "",
          "---------------",
          "--- Hunk 261 ---",
          "[Context before]",
          "13946:       { \"model-4\", \"lpp.model-4\",",
          "13947:         FT_BOOLEAN, 8, NULL, 0x10,",
          "13948:         NULL, HFILL }},",
          "13949:     { &hf_lpp_T_gnss_ids_gps,",
          "13950:       { \"gps\", \"lpp.gps\",",
          "13951:         FT_BOOLEAN, 8, NULL, 0x80,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "15340:     { &hf_lpp_T_utc_Model_model_5,",
          "15341:       { \"model-5\", \"lpp.model-5\",",
          "15342:         FT_BOOLEAN, 8, NULL, 0x08,",
          "15343:         NULL, HFILL }},",
          "",
          "---------------",
          "--- Hunk 262 ---",
          "[Context before]",
          "13966:       { \"glonass\", \"lpp.glonass\",",
          "13967:         FT_BOOLEAN, 8, NULL, 0x08,",
          "13968:         NULL, HFILL }},",
          "13969:     { &hf_lpp_T_sbas_IDs_waas,",
          "13970:       { \"waas\", \"lpp.waas\",",
          "13971:         FT_BOOLEAN, 8, NULL, 0x80,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "15364:     { &hf_lpp_T_gnss_ids_bds,",
          "15365:       { \"bds\", \"lpp.bds\",",
          "15366:         FT_BOOLEAN, 8, NULL, 0x04,",
          "15367:         NULL, HFILL }},",
          "",
          "---------------",
          "--- Hunk 263 ---",
          "[Context before]",
          "14008:         NULL, HFILL }},",
          "14012:   };",
          "14015:   static gint *ett[] = {",
          "14016:     &ett_lpp,",
          "14017:     &ett_lpp_bitmap,",
          "14020: #line 1 \"../../asn1/lpp/packet-lpp-ettarr.c\"",
          "",
          "[Removed Lines]",
          "14011: #line 1365 \"../../asn1/lpp/packet-lpp-template.c\"",
          "",
          "[Added Lines]",
          "15410: #line 1649 \"../../asn1/lpp/packet-lpp-template.c\"",
          "15411:     { &hf_lpp_svHealthExt_v12xy_e5bhs,",
          "15412:       { \"E5b Signal Health Status\", \"lpp.svHealthExt_v12xy.e5bhs\",",
          "15413:         FT_UINT8, BASE_DEC, VALS(lpp_signal_health_status_vals), 0,",
          "15414:         NULL, HFILL }},",
          "15415:     { &hf_lpp_svHealthExt_v12xy_e1_bhs,",
          "15416:       { \"E1-B Signal Health Status\", \"lpp.svHealthExt_v12xy.e1_bhs\",",
          "15417:         FT_UINT8, BASE_DEC, VALS(lpp_signal_health_status_vals), 0,",
          "15418:         NULL, HFILL }},",
          "15419:     { &hf_lpp_kepSV_StatusINAV_e5bhs,",
          "15420:       { \"E5b Signal Health Status\", \"lpp.kepSV_StatusINAV.e5bhs\",",
          "15421:         FT_UINT8, BASE_DEC, VALS(lpp_signal_health_status_vals), 0,",
          "15422:         NULL, HFILL }},",
          "15423:     { &hf_lpp_kepSV_StatusINAV_e1_bhs,",
          "15424:       { \"E1-B Signal Health Status\", \"lpp.kepSV_StatusINAV.e1_bhs\",",
          "15425:         FT_UINT8, BASE_DEC, VALS(lpp_signal_health_status_vals), 0,",
          "15426:         NULL, HFILL }},",
          "15427:     { &hf_lpp_kepSV_StatusFNAV_e5ahs,",
          "15428:       { \"E5a Signal Health Status\", \"lpp.kepSV_StatusFNAV.e5ahs\",",
          "15429:         FT_UINT8, BASE_DEC, VALS(lpp_signal_health_status_vals), 0,",
          "15430:         NULL, HFILL }},",
          "15431:     { &hf_lpp_bdsSvHealth_r12_sat_clock,",
          "15432:       { \"Satellite Clock\", \"lpp.bdsSvHealth_r12.sat_clock\",",
          "15433:         FT_BOOLEAN, BASE_NONE, TFS(&tfs_ok_error), 0,",
          "15434:         NULL, HFILL }},",
          "15435:     { &hf_lpp_bdsSvHealth_r12_b1i,",
          "15436:       { \"B1I Signal\", \"lpp.bdsSvHealth_r12.b1i\",",
          "15437:         FT_BOOLEAN, BASE_NONE, TFS(&lpp_bdsSvHealth_r12_b1i_b2i_value), 0,",
          "15438:         NULL, HFILL }},",
          "15439:     { &hf_lpp_bdsSvHealth_r12_b2i,",
          "15440:       { \"B2I Signal\", \"lpp.bdsSvHealth_r12.b2i\",",
          "15441:         FT_BOOLEAN, BASE_NONE, TFS(&lpp_bdsSvHealth_r12_b1i_b2i_value), 0,",
          "15442:         NULL, HFILL }},",
          "15443:     { &hf_lpp_bdsSvHealth_r12_nav,",
          "15444:       { \"NAV Message\", \"lpp.bdsSvHealth_r12.nav\",",
          "15445:         FT_BOOLEAN, BASE_NONE, TFS(&lpp_bdsSvHealth_r12_nav_value), 0,",
          "15446:         NULL, HFILL }}",
          "15453:     &ett_lpp_svHealthExt_v12xy,",
          "15454:     &ett_kepSV_StatusINAV,",
          "15455:     &ett_kepSV_StatusFNAV,",
          "15456:     &ett_lpp_bdsSvHealth_r12,",
          "",
          "---------------",
          "--- Hunk 264 ---",
          "[Context before]",
          "14177:     &ett_lpp_CNAV_ClockModel,",
          "14178:     &ett_lpp_GLONASS_ClockModel,",
          "14179:     &ett_lpp_SBAS_ClockModel,",
          "14180:     &ett_lpp_NavModelKeplerianSet,",
          "14181:     &ett_lpp_NavModelNAV_KeplerianSet,",
          "14182:     &ett_lpp_T_addNAVparam,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "15619:     &ett_lpp_BDS_ClockModel_r12,",
          "",
          "---------------",
          "--- Hunk 265 ---",
          "[Context before]",
          "14184:     &ett_lpp_NavModelCNAV_KeplerianSet,",
          "14185:     &ett_lpp_NavModel_GLONASS_ECEF,",
          "14186:     &ett_lpp_NavModel_SBAS_ECEF,",
          "14187:     &ett_lpp_GNSS_RealTimeIntegrity,",
          "14188:     &ett_lpp_GNSS_BadSignalList,",
          "14189:     &ett_lpp_BadSignalElement,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "15627:     &ett_lpp_NavModel_BDS_KeplerianSet_r12,",
          "",
          "---------------",
          "--- Hunk 266 ---",
          "[Context before]",
          "14204:     &ett_lpp_AlmanacMidiAlmanacSet,",
          "14205:     &ett_lpp_AlmanacGLONASS_AlmanacSet,",
          "14206:     &ett_lpp_AlmanacECEF_SBAS_AlmanacSet,",
          "14207:     &ett_lpp_GNSS_UTC_Model,",
          "14208:     &ett_lpp_UTC_ModelSet1,",
          "14209:     &ett_lpp_UTC_ModelSet2,",
          "14210:     &ett_lpp_UTC_ModelSet3,",
          "14211:     &ett_lpp_UTC_ModelSet4,",
          "14212:     &ett_lpp_GNSS_AuxiliaryInformation,",
          "14213:     &ett_lpp_GNSS_ID_GPS,",
          "14214:     &ett_lpp_GNSS_ID_GPS_SatElement,",
          "14215:     &ett_lpp_GNSS_ID_GLONASS,",
          "14216:     &ett_lpp_GNSS_ID_GLONASS_SatElement,",
          "14217:     &ett_lpp_A_GNSS_RequestAssistanceData,",
          "14218:     &ett_lpp_GNSS_CommonAssistDataReq,",
          "14219:     &ett_lpp_GNSS_GenericAssistDataReq,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "15648:     &ett_lpp_AlmanacBDS_AlmanacSet_r12,",
          "15654:     &ett_lpp_UTC_ModelSet5_r12,",
          "15660:     &ett_lpp_BDS_DifferentialCorrections_r12,",
          "15661:     &ett_lpp_BDS_SgnTypeList_r12,",
          "15662:     &ett_lpp_BDS_SgnTypeElement_r12,",
          "15663:     &ett_lpp_DBDS_CorrectionList_r12,",
          "15664:     &ett_lpp_DBDS_CorrectionElement_r12,",
          "15665:     &ett_lpp_BDS_GridModelParameter_r12,",
          "15666:     &ett_lpp_GridIonList_r12,",
          "15667:     &ett_lpp_GridIonElement_r12,",
          "",
          "---------------",
          "--- Hunk 267 ---",
          "[Context before]",
          "14241:     &ett_lpp_GNSS_AlmanacReq,",
          "14242:     &ett_lpp_GNSS_UTC_ModelReq,",
          "14243:     &ett_lpp_GNSS_AuxiliaryInformationReq,",
          "14244:     &ett_lpp_A_GNSS_ProvideLocationInformation,",
          "14245:     &ett_lpp_GNSS_SignalMeasurementInformation,",
          "14246:     &ett_lpp_MeasurementReferenceTime,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "15695:     &ett_lpp_BDS_DifferentialCorrectionsReq_r12,",
          "15696:     &ett_lpp_BDS_GridModelReq_r12,",
          "",
          "---------------",
          "--- Hunk 268 ---",
          "[Context before]",
          "14287:     &ett_lpp_GNSS_UTC_ModelSupport,",
          "14288:     &ett_lpp_T_utc_Model,",
          "14289:     &ett_lpp_GNSS_AuxiliaryInformationSupport,",
          "14290:     &ett_lpp_A_GNSS_RequestCapabilities,",
          "14291:     &ett_lpp_A_GNSS_Error,",
          "14292:     &ett_lpp_GNSS_LocationServerErrorCauses,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "15743:     &ett_lpp_BDS_DifferentialCorrectionsSupport_r12,",
          "15744:     &ett_lpp_BDS_GridModelSupport_r12,",
          "",
          "---------------",
          "--- Hunk 269 ---",
          "[Context before]",
          "14314:     &ett_lpp_ECID_TargetDeviceErrorCauses,",
          "14318:   };",
          "",
          "[Removed Lines]",
          "14317: #line 1372 \"../../asn1/lpp/packet-lpp-template.c\"",
          "",
          "[Added Lines]",
          "15772: #line 1696 \"../../asn1/lpp/packet-lpp-template.c\"",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-lpp.h||epan/dissectors/packet-lpp.h": [
          "File: epan/dissectors/packet-lpp.h -> epan/dissectors/packet-lpp.h"
        ]
      }
    },
    {
      "candidate_hash": "af687c581f71d3d0d779ee0fea0dd62a9192d79d",
      "candidate_info": {
        "commit_hash": "af687c581f71d3d0d779ee0fea0dd62a9192d79d",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/af687c581f71d3d0d779ee0fea0dd62a9192d79d",
        "files": [
          "asn1/lpp/lpp.cnf",
          "epan/dissectors/packet-lpp.c"
        ],
        "message": "Fix  Warn Dissector bug, protocol LPP, in packet 1: proto.c:3403:  failed assertion \"DISSECTOR_ASSERT_NOT_REACHED\" redifine FT of NavModel-GLONASS-ECEF/gloP1\n\nChange-Id: Id865c39b8d15528417075f9e7ed0378704aa98dc\nReviewed-on: https://code.wireshark.org/review/2132\nReviewed-by: Anders Broman <a.broman58@gmail.com>",
        "before_after_code_files": [
          "asn1/lpp/lpp.cnf||asn1/lpp/lpp.cnf",
          "epan/dissectors/packet-lpp.c||epan/dissectors/packet-lpp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "asn1/lpp/lpp.cnf||asn1/lpp/lpp.cnf",
            "epan/dissectors/packet-lpp.c||epan/dissectors/packet-lpp.c"
          ],
          "candidate": [
            "asn1/lpp/lpp.cnf||asn1/lpp/lpp.cnf",
            "epan/dissectors/packet-lpp.c||epan/dissectors/packet-lpp.c"
          ]
        }
      },
      "candidate_diff": {
        "asn1/lpp/lpp.cnf||asn1/lpp/lpp.cnf": [
          "File: asn1/lpp/lpp.cnf -> asn1/lpp/lpp.cnf",
          "--- Hunk 1 ---",
          "[Context before]",
          "814: #.TYPE_ATTR",
          "815: NavModel-GLONASS-ECEF/gloZdotdot DISPLAY=BASE_CUSTOM STRINGS=&lpp_gloXdotdot_Ydotdot_Zdotdot_fmt",
          "817: #.TYPE_ATTR",
          "818: NavModel-SBAS-ECEF/sbasTo DISPLAY=BASE_CUSTOM STRINGS=&lpp_sbasTo_fmt",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "817: #.TYPE_ATTR",
          "818: NavModel-GLONASS-ECEF/gloP1 TYPE=FT_UINT8 DISPLAY=BASE_DEC",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-lpp.c||epan/dissectors/packet-lpp.c": [
          "File: epan/dissectors/packet-lpp.c -> epan/dissectors/packet-lpp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2901: static int",
          "2902: dissect_lpp_T_sbas_IDs(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "2904:   tvbuff_t *sbas_IDs_tvb = NULL;",
          "2905:   int len;",
          "",
          "[Removed Lines]",
          "2903: #line 1322 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "2903: #line 1325 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3112: static int",
          "3113: dissect_lpp_T_gnss_ids(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "3115:   tvbuff_t *gnss_ids_tvb = NULL;",
          "3116:   int len;",
          "",
          "[Removed Lines]",
          "3114: #line 1296 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "3114: #line 1299 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3191: static int",
          "3192: dissect_lpp_T_ionoModel(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "3194:   tvbuff_t *ionoModel_tvb = NULL;",
          "3195:   int len;",
          "",
          "[Removed Lines]",
          "3193: #line 1175 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "3193: #line 1178 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3323: static int",
          "3324: dissect_lpp_T_clockModel(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "3326:   tvbuff_t *clockModel_tvb = NULL;",
          "3327:   int len;",
          "",
          "[Removed Lines]",
          "3325: #line 1192 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "3325: #line 1195 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3360: static int",
          "3361: dissect_lpp_T_orbitModel(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "3363:   tvbuff_t *orbitModel_tvb = NULL;",
          "3364:   int len;",
          "",
          "[Removed Lines]",
          "3362: #line 1218 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "3362: #line 1221 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "3483: static int",
          "3484: dissect_lpp_T_almanacModel(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "3486:   tvbuff_t *almanacModel_tvb = NULL;",
          "3487:   int len;",
          "",
          "[Removed Lines]",
          "3485: #line 1244 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "3485: #line 1247 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "3537: static int",
          "3538: dissect_lpp_T_utc_Model(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "3540:   tvbuff_t *utc_Model_tvb = NULL;",
          "3541:   int len;",
          "",
          "[Removed Lines]",
          "3539: #line 1273 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "3539: #line 1276 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "3838: static int",
          "3839: dissect_lpp_T_ecid_MeasSupported(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "3841:   tvbuff_t *ecid_MeasSupported_tvb = NULL;",
          "3842:   int len;",
          "",
          "[Removed Lines]",
          "3840: #line 1374 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "3840: #line 1377 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "4211:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "4212:                                                             0U, 4095U, NULL, FALSE);",
          "4215:   proto_item_append_text(actx->created_item, \" (days for glonass, weeks otherwise)\");",
          "",
          "[Removed Lines]",
          "4214: #line 1121 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "4214: #line 1124 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "4225:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "4226:                                                             0U, 255U, NULL, FALSE);",
          "4229:   proto_item_append_text(actx->created_item, \" (units of 15 mns for glonass, hours otherwise)\");",
          "",
          "[Removed Lines]",
          "4228: #line 1124 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "4228: #line 1127 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "4239:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "4240:                                                             0U, 15U, NULL, FALSE);",
          "4243:   proto_item_append_text(actx->created_item, \" (units of 30 mns for glonass, hours otherwise)\");",
          "",
          "[Removed Lines]",
          "4242: #line 1127 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "4242: #line 1130 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "4435:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "4436:                                                             0U, 3599U, NULL, FALSE);",
          "4439:   proto_item_append_text(actx->created_item, \" s\");",
          "",
          "[Removed Lines]",
          "4438: #line 1130 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "4438: #line 1133 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "4449:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "4450:                                                             0U, 999U, NULL, FALSE);",
          "4453:   proto_item_append_text(actx->created_item, \" ms\");",
          "",
          "[Removed Lines]",
          "4452: #line 1133 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "4452: #line 1136 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "6690:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "6691:                                                             0U, 3599U, NULL, FALSE);",
          "6694:   proto_item_append_text(actx->created_item, \" s\");",
          "",
          "[Removed Lines]",
          "6693: #line 848 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "6693: #line 851 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "6704:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "6705:                                                             0U, 999U, NULL, FALSE);",
          "6708:   proto_item_append_text(actx->created_item, \" ms\");",
          "",
          "[Removed Lines]",
          "6707: #line 851 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "6707: #line 854 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "6822:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "6823:                                                             0U, 127U, NULL, FALSE);",
          "6826:   proto_item_append_text(actx->created_item, \" ms\");",
          "",
          "[Removed Lines]",
          "6825: #line 869 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "6825: #line 872 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "6893:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "6894:                                                             0U, 100U, NULL, FALSE);",
          "6897:   proto_item_append_text(actx->created_item, \" %%\");",
          "",
          "[Removed Lines]",
          "6896: #line 854 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "6896: #line 857 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "7047:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "7048:                                                             1U, 1461U, NULL, FALSE);",
          "7051:   proto_item_append_text(actx->created_item, \" days\");",
          "",
          "[Removed Lines]",
          "7050: #line 971 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "7050: #line 974 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "7222:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "7223:                                                             0U, 255U, NULL, FALSE);",
          "7226:   proto_item_append_text(actx->created_item, \" weeks\");",
          "",
          "[Removed Lines]",
          "7225: #line 1028 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "7225: #line 1031 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "7236:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "7237:                                                             -128, 127U, NULL, FALSE);",
          "7240:   proto_item_append_text(actx->created_item, \" s\");",
          "",
          "[Removed Lines]",
          "7239: #line 1031 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "7239: #line 1034 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "7250:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "7251:                                                             0U, 255U, NULL, FALSE);",
          "7254:   proto_item_append_text(actx->created_item, \" weeks\");",
          "",
          "[Removed Lines]",
          "7253: #line 1034 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "7253: #line 1037 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "7264:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "7265:                                                             -128, 127U, NULL, FALSE);",
          "7268:   proto_item_append_text(actx->created_item, \" days\");",
          "",
          "[Removed Lines]",
          "7267: #line 1037 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "7267: #line 1040 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "7278:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "7279:                                                             -128, 127U, NULL, FALSE);",
          "7282:   proto_item_append_text(actx->created_item, \" s\");",
          "",
          "[Removed Lines]",
          "7281: #line 1040 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "7281: #line 1043 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "7313:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "7314:                                                             -128, 127U, NULL, FALSE);",
          "7317:   proto_item_append_text(actx->created_item, \" s\");",
          "",
          "[Removed Lines]",
          "7316: #line 1052 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "7316: #line 1055 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "7327:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "7328:                                                             0U, 8191U, NULL, FALSE);",
          "7331:   proto_item_append_text(actx->created_item, \" weeks\");",
          "",
          "[Removed Lines]",
          "7330: #line 1058 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "7330: #line 1061 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "7341:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "7342:                                                             0U, 255U, NULL, FALSE);",
          "7345:   proto_item_append_text(actx->created_item, \" weeks\");",
          "",
          "[Removed Lines]",
          "7344: #line 1061 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "7344: #line 1064 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "7355:   offset = dissect_per_bit_string(tvb, offset, actx, tree, hf_index,",
          "7356:                                      4, 4, FALSE, NULL, NULL);",
          "7359:   proto_item_append_text(actx->created_item, \" days\");",
          "",
          "[Removed Lines]",
          "7358: #line 1064 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "7358: #line 1067 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "7369:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "7370:                                                             -128, 127U, NULL, FALSE);",
          "7373:   proto_item_append_text(actx->created_item, \" s\");",
          "",
          "[Removed Lines]",
          "7372: #line 1067 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "7372: #line 1070 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "7405:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "7406:                                                             1U, 1461U, NULL, FALSE);",
          "7409:   proto_item_append_text(actx->created_item, \" days\");",
          "",
          "[Removed Lines]",
          "7408: #line 1070 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "7408: #line 1073 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "7417: static int",
          "7418: dissect_lpp_T_kp(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "7420:   tvbuff_t *kp_tvb = NULL;",
          "7421:   offset = dissect_per_bit_string(tvb, offset, actx, tree, -1,",
          "7422:                                      2, 2, FALSE, &kp_tvb, NULL);",
          "",
          "[Removed Lines]",
          "7419: #line 1082 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "7419: #line 1085 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "7428:   if (kp_tvb) {",
          "7429:     actx->created_item = proto_tree_add_uint(tree, hf_index, kp_tvb, 0, 1, tvb_get_bits8(kp_tvb, 0, 2));",
          "7430:   }",
          "",
          "[Removed Lines]",
          "7427: #line 1086 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "7427: #line 1089 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "7458:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "7459:                                                             0U, 255U, NULL, FALSE);",
          "7462:   proto_item_append_text(actx->created_item, \" weeks\");",
          "",
          "[Removed Lines]",
          "7461: #line 1103 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "7461: #line 1106 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "7472:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "7473:                                                             -128, 127U, NULL, FALSE);",
          "7476:   proto_item_append_text(actx->created_item, \" s\");",
          "",
          "[Removed Lines]",
          "7475: #line 1106 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "7475: #line 1109 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "7486:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "7487:                                                             0U, 255U, NULL, FALSE);",
          "7490:   proto_item_append_text(actx->created_item, \" weeks\");",
          "",
          "[Removed Lines]",
          "7489: #line 1109 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "7489: #line 1112 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "7500:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "7501:                                                             -128, 127U, NULL, FALSE);",
          "7504:   proto_item_append_text(actx->created_item, \" days\");",
          "",
          "[Removed Lines]",
          "7503: #line 1112 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "7503: #line 1115 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "7514:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "7515:                                                             -128, 127U, NULL, FALSE);",
          "7518:   proto_item_append_text(actx->created_item, \" s\");",
          "",
          "[Removed Lines]",
          "7517: #line 1115 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "7517: #line 1118 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "8571: static int",
          "8572: dissect_lpp_T_requestedMeasurements(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "8574:   tvbuff_t *requestedMeasurements_tvb = NULL;",
          "8575:   int len;",
          "",
          "[Removed Lines]",
          "8573: #line 1354 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "8573: #line 1357 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "9304:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "9305:                                                             0U, 3599999U, NULL, FALSE);",
          "9308:   proto_item_append_text(actx->created_item, \" ms\");",
          "",
          "[Removed Lines]",
          "9307: #line 1139 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "9307: #line 1142 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "9435:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "9436:                                                             0U, 127U, NULL, FALSE);",
          "9439:   proto_item_append_text(actx->created_item, \" ms\");",
          "",
          "[Removed Lines]",
          "9438: #line 1148 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "9438: #line 1151 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "9509:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "9510:                                                             0U, 127U, NULL, FALSE);",
          "9513:   proto_item_append_text(actx->created_item, \" ms\");",
          "",
          "[Removed Lines]",
          "9512: #line 1151 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "9512: #line 1154 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "9523:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "9524:                                                             0U, 63U, NULL, FALSE);",
          "9527:   proto_item_append_text(actx->created_item, \" dB-Hz\");",
          "",
          "[Removed Lines]",
          "9526: #line 1154 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "9526: #line 1157 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "9555:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "9556:                                                             0U, 127U, NULL, FALSE);",
          "9559:   proto_item_append_text(actx->created_item, \" ms\");",
          "",
          "[Removed Lines]",
          "9558: #line 1163 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "[Added Lines]",
          "9558: #line 1166 \"../../asn1/lpp/lpp.cnf\"",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "12509:         NULL, HFILL }},",
          "12510:     { &hf_lpp_gloP1,",
          "12511:       { \"gloP1\", \"lpp.gloP1\",",
          "12513:         NULL, HFILL }},",
          "12514:     { &hf_lpp_gloP2,",
          "12515:       { \"gloP2\", \"lpp.gloP2\",",
          "",
          "[Removed Lines]",
          "12512:         FT_BYTES, BASE_NONE, NULL, 0,",
          "",
          "[Added Lines]",
          "12512:         FT_UINT8, BASE_DEC, NULL, 0,",
          "",
          "---------------"
        ]
      }
    }
  ]
}