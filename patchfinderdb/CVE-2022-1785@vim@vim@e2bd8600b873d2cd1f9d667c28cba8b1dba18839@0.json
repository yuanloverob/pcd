{
  "cve_id": "CVE-2022-1785",
  "cve_desc": "Out-of-bounds Write in GitHub repository vim/vim prior to 8.2.4977.",
  "repo": "vim/vim",
  "patch_hash": "e2bd8600b873d2cd1f9d667c28cba8b1dba18839",
  "patch_info": {
    "commit_hash": "e2bd8600b873d2cd1f9d667c28cba8b1dba18839",
    "repo": "vim/vim",
    "commit_url": "https://github.com/vim/vim/commit/e2bd8600b873d2cd1f9d667c28cba8b1dba18839",
    "files": [
      "src/ex_cmds.c",
      "src/testdir/test_substitute.vim",
      "src/version.c"
    ],
    "message": "patch 8.2.4977: memory access error when substitute expression changes window\n\nProblem:    Memory access error when substitute expression changes window.\nSolution:   Disallow changing window in substitute expression.",
    "before_after_code_files": [
      "src/ex_cmds.c||src/ex_cmds.c",
      "src/testdir/test_substitute.vim||src/testdir/test_substitute.vim",
      "src/version.c||src/version.c"
    ]
  },
  "patch_diff": {
    "src/ex_cmds.c||src/ex_cmds.c": [
      "File: src/ex_cmds.c -> src/ex_cmds.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "4414:   subflags_save = subflags;",
      "4415: #endif",
      "4417:   sublen = vim_regsub_multi(&regmatch,",
      "4418:         sub_firstlnum - regmatch.startpos[0].lnum,",
      "4419:           sub, sub_firstline, FALSE, magic_isset(), TRUE);",
      "4420: #ifdef FEAT_EVAL",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4417:   ++textwinlock;",
      "4424:   --textwinlock;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "4518:   mch_memmove(new_end, sub_firstline + copycol, (size_t)copy_len);",
      "4519:   new_end += copy_len;",
      "4521:   (void)vim_regsub_multi(&regmatch,",
      "4522:         sub_firstlnum - regmatch.startpos[0].lnum,",
      "4523:           sub, new_end, TRUE, magic_isset(), TRUE);",
      "4524:   sub_nsubs++;",
      "4525:   did_sub = TRUE;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4526: #ifdef FEAT_EVAL",
      "4527:   ++textwinlock;",
      "4528: #endif",
      "4532: #ifdef FEAT_EVAL",
      "4533:   --textwinlock;",
      "4534: #endif",
      "",
      "---------------"
    ],
    "src/testdir/test_substitute.vim||src/testdir/test_substitute.vim": [
      "File: src/testdir/test_substitute.vim -> src/testdir/test_substitute.vim",
      "--- Hunk 1 ---",
      "[Context before]",
      "1000:   set nocompatible",
      "1001: endfunc",
      "1003: \" Test for the 2-letter and 3-letter :substitute commands",
      "1004: func Test_substitute_short_cmd()",
      "1005:   new",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1003: \" This was switching windows in between computing the length and using it.",
      "1004: func Test_sub_change_window()",
      "1005:   silent! lfile",
      "1006:   sil! norm o0000000000000000000000000000000000000000000000000000",
      "1007:   func Repl()",
      "1008:     lopen",
      "1009:   endfunc",
      "1010:   silent!  s/\\%')/\\=Repl()",
      "1011:   bwipe!",
      "1012:   bwipe!",
      "1013:   delfunc Repl",
      "1014: endfunc",
      "",
      "---------------"
    ],
    "src/version.c||src/version.c": [
      "File: src/version.c -> src/version.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "747: static int included_patches[] =",
      "750:     4976,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "750:     4977,",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "cfe456543e840d133399551f8626d985e1fb1958",
      "candidate_info": {
        "commit_hash": "cfe456543e840d133399551f8626d985e1fb1958",
        "repo": "vim/vim",
        "commit_url": "https://github.com/vim/vim/commit/cfe456543e840d133399551f8626d985e1fb1958",
        "files": [
          "runtime/doc/insert.txt",
          "runtime/doc/tags",
          "src/beval.c",
          "src/change.c",
          "src/edit.c",
          "src/errors.h",
          "src/eval.c",
          "src/ex_cmds.c",
          "src/ex_getln.c",
          "src/globals.h",
          "src/indent.c",
          "src/insexpand.c",
          "src/map.c",
          "src/proto/ex_getln.pro",
          "src/register.c",
          "src/testdir/test_edit.vim",
          "src/testdir/test_ins_complete.vim",
          "src/testdir/test_popup.vim",
          "src/testdir/test_quickfix.vim",
          "src/undo.c",
          "src/version.c",
          "src/window.c"
        ],
        "message": "patch 8.2.5029: \"textlock\" is always zero\n\nProblem:    \"textlock\" is always zero.\nSolution:   Remove \"textlock\" and rename \"textwinlock\" to \"textlock\".\n            (closes #10489)",
        "before_after_code_files": [
          "src/beval.c||src/beval.c",
          "src/change.c||src/change.c",
          "src/edit.c||src/edit.c",
          "src/errors.h||src/errors.h",
          "src/eval.c||src/eval.c",
          "src/ex_cmds.c||src/ex_cmds.c",
          "src/ex_getln.c||src/ex_getln.c",
          "src/globals.h||src/globals.h",
          "src/indent.c||src/indent.c",
          "src/insexpand.c||src/insexpand.c",
          "src/map.c||src/map.c",
          "src/proto/ex_getln.pro||src/proto/ex_getln.pro",
          "src/register.c||src/register.c",
          "src/testdir/test_edit.vim||src/testdir/test_edit.vim",
          "src/testdir/test_ins_complete.vim||src/testdir/test_ins_complete.vim",
          "src/testdir/test_popup.vim||src/testdir/test_popup.vim",
          "src/testdir/test_quickfix.vim||src/testdir/test_quickfix.vim",
          "src/undo.c||src/undo.c",
          "src/version.c||src/version.c",
          "src/window.c||src/window.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/ex_cmds.c||src/ex_cmds.c",
            "src/version.c||src/version.c"
          ],
          "candidate": [
            "src/ex_cmds.c||src/ex_cmds.c",
            "src/version.c||src/version.c"
          ]
        }
      },
      "candidate_diff": {
        "src/beval.c||src/beval.c": [
          "File: src/beval.c -> src/beval.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "284:      curbuf = save_curbuf;",
          "285:      if (use_sandbox)",
          "286:   ++sandbox;",
          "289:      if (bexpr == p_bexpr)",
          "290:      {",
          "",
          "[Removed Lines]",
          "287:      ++textwinlock;",
          "",
          "[Added Lines]",
          "287:      ++textlock;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "312:      if (use_sandbox)",
          "313:   --sandbox;",
          "315:      current_sctx = save_sctx;",
          "317:      set_vim_var_string(VV_BEVAL_TEXT, NULL, -1);",
          "",
          "[Removed Lines]",
          "314:      --textwinlock;",
          "",
          "[Added Lines]",
          "314:      --textlock;",
          "",
          "---------------"
        ],
        "src/change.c||src/change.c": [
          "File: src/change.c -> src/change.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "324:      next = lnr->lr_next;",
          "325:      if (lnr->lr_id == id)",
          "326:      {",
          "328:   {",
          "330:       lnr->lr_id = 0;",
          "",
          "[Removed Lines]",
          "327:   if (textwinlock > 0)",
          "",
          "[Added Lines]",
          "327:   if (textlock > 0)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "402:     argv[4].v_type = VAR_LIST;",
          "403:     argv[4].vval.v_list = buf->b_recorded_changes;",
          "406:     for (lnr = buf->b_listener; lnr != NULL; lnr = lnr->lr_next)",
          "407:     {",
          "",
          "[Removed Lines]",
          "404:     ++textwinlock;",
          "",
          "[Added Lines]",
          "404:     ++textlock;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "421:      prev = lnr;",
          "422:     }",
          "425:     list_unref(buf->b_recorded_changes);",
          "426:     buf->b_recorded_changes = NULL;",
          "",
          "[Removed Lines]",
          "424:     --textwinlock;",
          "",
          "[Added Lines]",
          "424:     --textlock;",
          "",
          "---------------"
        ],
        "src/edit.c||src/edit.c": [
          "File: src/edit.c -> src/edit.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "173:     {",
          "174:  emsg(_(e_not_allowed_to_change_text_or_change_window));",
          "175:  return FALSE;",
          "",
          "[Removed Lines]",
          "171:     if (textwinlock != 0 || textlock != 0",
          "172:      || ins_compl_active() || compl_busy || pum_visible())",
          "",
          "[Added Lines]",
          "171:     if (textlock != 0 || ins_compl_active() || compl_busy || pum_visible())",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5342:     }",
          "5346:     set_vim_var_string(VV_CHAR, buf, -1);  // set v:char",
          "5348:     res = NULL;",
          "",
          "[Removed Lines]",
          "5345:     ++textwinlock;",
          "",
          "[Added Lines]",
          "5344:     ++textlock;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "5356:     }",
          "5358:     set_vim_var_string(VV_CHAR, NULL, -1);  // clear v:char",
          "5362:     State = save_State;",
          "",
          "[Removed Lines]",
          "5359:     --textwinlock;",
          "",
          "[Added Lines]",
          "5358:     --textlock;",
          "",
          "---------------"
        ],
        "src/errors.h||src/errors.h": [
          "File: src/errors.h -> src/errors.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1458: EXTERN char e_illegal_register_name[]",
          "1459:  INIT(= N_(\"Illegal register name\"));",
          "1460: #endif",
          "1463: #ifdef FEAT_EVAL",
          "1464: EXTERN char e_if_nesting_too_deep[]",
          "1465:  INIT(= N_(\"E579: :if nesting too deep\"));",
          "",
          "[Removed Lines]",
          "1461: EXTERN char e_not_allowed_to_change_text_here[]",
          "1462:  INIT(= N_(\"E578: Not allowed to change text here\"));",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/eval.c||src/eval.c": [
          "File: src/eval.c -> src/eval.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "562:     save_funccal(&funccal_entry);",
          "563:     if (use_sandbox)",
          "564:  ++sandbox;",
          "566:     may_garbage_collect = FALSE;",
          "567:     retval = eval_to_string(arg, FALSE);",
          "568:     if (use_sandbox)",
          "569:  --sandbox;",
          "571:     may_garbage_collect = save_garbage;",
          "572:     restore_funccal();",
          "573:     current_sctx.sc_version = save_sc_version;",
          "",
          "[Removed Lines]",
          "565:     ++textwinlock;",
          "570:     --textwinlock;",
          "",
          "[Added Lines]",
          "565:     ++textlock;",
          "570:     --textlock;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "807:     ++emsg_off;",
          "808:     if (use_sandbox)",
          "809:  ++sandbox;",
          "812:     if (eval0(arg, &tv, NULL, &EVALARG_EVALUATE) == FAIL)",
          "813:  retval = 0;",
          "",
          "[Removed Lines]",
          "810:     ++textwinlock;",
          "",
          "[Added Lines]",
          "810:     ++textlock;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "832:     --emsg_off;",
          "833:     if (use_sandbox)",
          "834:  --sandbox;",
          "836:     clear_evalarg(&EVALARG_EVALUATE, NULL);",
          "837:     current_sctx = saved_sctx;",
          "",
          "[Removed Lines]",
          "835:     --textwinlock;",
          "",
          "[Added Lines]",
          "835:     --textlock;",
          "",
          "---------------"
        ],
        "src/ex_cmds.c||src/ex_cmds.c": [
          "File: src/ex_cmds.c -> src/ex_cmds.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4414:   subflags_save = subflags;",
          "4418: #endif",
          "4420:   sublen = vim_regsub_multi(&regmatch,",
          "4421:         sub_firstlnum - regmatch.startpos[0].lnum,",
          "4422:           sub, sub_firstline, FALSE, magic_isset(), TRUE);",
          "4423: #ifdef FEAT_EVAL",
          "",
          "[Removed Lines]",
          "4417:   ++textwinlock;",
          "4424:   --textwinlock;",
          "",
          "[Added Lines]",
          "4417:   ++textlock;",
          "4424:   --textlock;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4524:   new_end += copy_len;",
          "4526: #ifdef FEAT_EVAL",
          "4528: #endif",
          "4529:   (void)vim_regsub_multi(&regmatch,",
          "4530:         sub_firstlnum - regmatch.startpos[0].lnum,",
          "4531:           sub, new_end, TRUE, magic_isset(), TRUE);",
          "4532: #ifdef FEAT_EVAL",
          "4534: #endif",
          "4535:   sub_nsubs++;",
          "4536:   did_sub = TRUE;",
          "",
          "[Removed Lines]",
          "4527:   ++textwinlock;",
          "4533:   --textwinlock;",
          "",
          "[Added Lines]",
          "4527:   ++textlock;",
          "4533:   --textlock;",
          "",
          "---------------"
        ],
        "src/ex_getln.c||src/ex_getln.c": [
          "File: src/ex_getln.c -> src/ex_getln.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "850:  c = get_expr_register();",
          "851:  if (c == '=')",
          "852:  {",
          "857:      p = get_expr_line();",
          "860:      if (p != NULL)",
          "861:      {",
          "",
          "[Removed Lines]",
          "856:      ++textwinlock;",
          "858:      --textwinlock;",
          "",
          "[Added Lines]",
          "856:      ++textlock;",
          "858:      --textlock;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2712:     int",
          "2714: {",
          "2715: #ifdef FEAT_CMDWIN",
          "2716:     if (cmdwin_type != 0)",
          "2717:  return TRUE;",
          "2718: #endif",
          "2720: }",
          "",
          "[Removed Lines]",
          "2713: text_and_win_locked(void)",
          "2719:     return textwinlock != 0;",
          "",
          "[Added Lines]",
          "2713: text_locked(void)",
          "2719:     return textlock != 0;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2736:     if (cmdwin_type != 0)",
          "2737:  return e_invalid_in_cmdline_window;",
          "2738: #endif",
          "2752: }",
          "",
          "[Removed Lines]",
          "2739:     if (textwinlock != 0)",
          "2740:  return e_not_allowed_to_change_text_or_change_window;",
          "2741:     return e_not_allowed_to_change_text_here;",
          "2742: }",
          "2748:     int",
          "2749: text_locked(void)",
          "2750: {",
          "2751:     return text_and_win_locked() || textlock != 0;",
          "",
          "[Added Lines]",
          "2739:     return e_not_allowed_to_change_text_or_change_window;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3730:     regname = may_get_selection(regname);",
          "3731: #endif",
          "3736:     i = get_spec_reg(regname, &arg, &allocated, TRUE);",
          "3739:     if (i)",
          "3740:     {",
          "",
          "[Removed Lines]",
          "3735:     ++textwinlock;",
          "3737:     --textwinlock;",
          "",
          "[Added Lines]",
          "3723:     ++textlock;",
          "3725:     --textlock;",
          "",
          "---------------"
        ],
        "src/globals.h||src/globals.h": [
          "File: src/globals.h -> src/globals.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "859: EXTERN int curbuf_lock INIT(= 0);",
          "",
          "[Removed Lines]",
          "849: EXTERN int textwinlock INIT(= 0);",
          "854: EXTERN int textlock INIT(= 0);",
          "",
          "[Added Lines]",
          "849: EXTERN int textlock INIT(= 0);",
          "",
          "---------------"
        ],
        "src/indent.c||src/indent.c": [
          "File: src/indent.c -> src/indent.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1872:     set_vim_var_nr(VV_LNUM, curwin->w_cursor.lnum);",
          "1873:     if (use_sandbox)",
          "1874:  ++sandbox;",
          "1876:     current_sctx = curbuf->b_p_script_ctx[BV_INDE];",
          "",
          "[Removed Lines]",
          "1875:     ++textwinlock;",
          "",
          "[Added Lines]",
          "1875:     ++textlock;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1887:     if (use_sandbox)",
          "1888:  --sandbox;",
          "1890:     current_sctx = save_sctx;",
          "",
          "[Removed Lines]",
          "1889:     --textwinlock;",
          "",
          "[Added Lines]",
          "1889:     --textlock;",
          "",
          "---------------"
        ],
        "src/insexpand.c||src/insexpand.c": [
          "File: src/insexpand.c -> src/insexpand.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1144:     dict_set_items_ro(v_event);",
          "1146:     recursive = TRUE;",
          "1148:     apply_autocmds(EVENT_COMPLETECHANGED, NULL, NULL, FALSE, curbuf);",
          "1150:     recursive = FALSE;",
          "1152:     restore_v_event(v_event, &save_v_event);",
          "",
          "[Removed Lines]",
          "1147:     textwinlock++;",
          "1149:     textwinlock--;",
          "",
          "[Added Lines]",
          "1147:     textlock++;",
          "1149:     textlock--;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2648:     cb = get_insert_callback(type);",
          "2649:     retval = call_callback(cb, 0, &rettv, 2, args);",
          "",
          "[Removed Lines]",
          "2646:     ++textwinlock;",
          "",
          "[Added Lines]",
          "2646:     ++textlock;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2669:   break;",
          "2670:  }",
          "2671:     }",
          "2674:     curwin->w_cursor = pos; // restore the cursor position",
          "2675:     validate_cursor();",
          "",
          "[Removed Lines]",
          "2672:     --textwinlock;",
          "",
          "[Added Lines]",
          "2672:     --textlock;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2867: f_complete(typval_T *argvars, typval_T *rettv UNUSED)",
          "2868: {",
          "2869:     int     startcol;",
          "2872:     if (in_vim9script()",
          "2873:      && (check_for_number_arg(argvars, 0) == FAIL",
          "",
          "[Removed Lines]",
          "2870:     int     save_textlock = textlock;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2880:  return;",
          "2881:     }",
          "2889:     if (!undo_allowed())",
          "",
          "[Removed Lines]",
          "2885:     textlock = 0;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2897:  if (startcol > 0)",
          "2898:      set_completion(startcol - 1, argvars[1].vval.v_list);",
          "2899:     }",
          "2901: }",
          "",
          "[Removed Lines]",
          "2900:     textlock = save_textlock;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "4508:     args[1].vval.v_string = (char_u *)\"\";",
          "4509:     args[2].v_type = VAR_UNKNOWN;",
          "4510:     pos = curwin->w_cursor;",
          "4512:     cb = get_insert_callback(ctrl_x_mode);",
          "4513:     col = call_callback_retnr(cb, 2, args);",
          "4516:     State = save_State;",
          "4517:     curwin->w_cursor = pos; // restore the cursor position",
          "",
          "[Removed Lines]",
          "4511:     ++textwinlock;",
          "4514:     --textwinlock;",
          "",
          "[Added Lines]",
          "4505:     ++textlock;",
          "4508:     --textlock;",
          "",
          "---------------"
        ],
        "src/map.c||src/map.c": [
          "File: src/map.c -> src/map.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1699:     ++ex_normal_lock;",
          "1700:     set_vim_var_char(c);  // set v:char to the typed character",
          "1701:     save_cursor = curwin->w_cursor;",
          "",
          "[Removed Lines]",
          "1698:     ++textwinlock;",
          "",
          "[Added Lines]",
          "1698:     ++textlock;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1711:     p = eval_to_string(expr, FALSE);",
          "1714:     --ex_normal_lock;",
          "1715:     curwin->w_cursor = save_cursor;",
          "1716:     msg_col = save_msg_col;",
          "",
          "[Removed Lines]",
          "1713:     --textwinlock;",
          "",
          "[Added Lines]",
          "1713:     --textlock;",
          "",
          "---------------"
        ],
        "src/proto/ex_getln.pro||src/proto/ex_getln.pro": [
          "File: src/proto/ex_getln.pro -> src/proto/ex_getln.pro",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: char_u *getcmdline(int firstc, long count, int indent, getline_opt_T do_concat);",
          "4: char_u *getcmdline_prompt(int firstc, char_u *prompt, int attr, int xp_context, char_u *xp_arg);",
          "5: int check_opt_wim(void);",
          "7: void text_locked_msg(void);",
          "8: char *get_text_locked_msg(void);",
          "9: int text_locked(void);",
          "",
          "[Removed Lines]",
          "6: int text_and_win_locked(void);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/register.c||src/register.c": [
          "File: src/register.c -> src/register.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1055:     dict_set_items_ro(v_event);",
          "1057:     recursive = TRUE;",
          "1059:     apply_autocmds(EVENT_TEXTYANKPOST, NULL, NULL, FALSE, curbuf);",
          "1061:     recursive = FALSE;",
          "",
          "[Removed Lines]",
          "1058:     textwinlock++;",
          "1060:     textwinlock--;",
          "",
          "[Added Lines]",
          "1058:     textlock++;",
          "1060:     textlock--;",
          "",
          "---------------"
        ],
        "src/testdir/test_edit.vim||src/testdir/test_edit.vim": [
          "File: src/testdir/test_edit.vim -> src/testdir/test_edit.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "1041:   set completefunc=CompleteFunc",
          "1042:   call setline(1, ['', 'abcd', ''])",
          "1043:   2d",
          "1045:   bwipe!",
          "1046: endfunc",
          "",
          "[Removed Lines]",
          "1044:   call assert_fails(\"normal 2G$a\\<C-X>\\<C-U>\", 'E578:')",
          "",
          "[Added Lines]",
          "1044:   call assert_fails(\"normal 2G$a\\<C-X>\\<C-U>\", 'E565:')",
          "",
          "---------------"
        ],
        "src/testdir/test_ins_complete.vim||src/testdir/test_ins_complete.vim": [
          "File: src/testdir/test_ins_complete.vim -> src/testdir/test_ins_complete.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "698:   endfunc",
          "699:   set completefunc=CompleteFunc",
          "700:   call setline(1, ['', 'abcd', ''])",
          "703:   \" delete text when called for the second time",
          "704:   func CompleteFunc2(findstart, base)",
          "",
          "[Removed Lines]",
          "701:   call assert_fails('exe \"normal 2G$a\\<C-X>\\<C-U>\"', 'E578:')",
          "",
          "[Added Lines]",
          "701:   call assert_fails('exe \"normal 2G$a\\<C-X>\\<C-U>\"', 'E565:')",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "710:   endfunc",
          "711:   set completefunc=CompleteFunc2",
          "712:   call setline(1, ['', 'abcd', ''])",
          "715:   \" Jump to a different window from the complete function",
          "716:   func CompleteFunc3(findstart, base)",
          "",
          "[Removed Lines]",
          "713:   call assert_fails('exe \"normal 2G$a\\<C-X>\\<C-U>\"', 'E578:')",
          "",
          "[Added Lines]",
          "713:   call assert_fails('exe \"normal 2G$a\\<C-X>\\<C-U>\"', 'E565:')",
          "",
          "---------------"
        ],
        "src/testdir/test_popup.vim||src/testdir/test_popup.vim": [
          "File: src/testdir/test_popup.vim -> src/testdir/test_popup.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "656: func Test_complete_func_mess()",
          "657:   \" Calling complete() after complete_add() in 'completefunc' is wrong, but it",
          "659:   set completefunc=MessComplete",
          "660:   new",
          "661:   call setline(1, 'Ju')",
          "",
          "[Removed Lines]",
          "658:   \" should not crash.",
          "",
          "[Added Lines]",
          "658:   \" should not crash.",
          "",
          "---------------"
        ],
        "src/testdir/test_quickfix.vim||src/testdir/test_quickfix.vim": [
          "File: src/testdir/test_quickfix.vim -> src/testdir/test_quickfix.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "3474: func Test_vimgrep_with_textlock()",
          "3475:   new",
          "3478:   \" Check that vimgrep without jumping can be executed.",
          "3479:   au InsertCharPre * vimgrep /RunTheTest/j runtest.vim",
          "3480:   normal ax",
          "",
          "[Removed Lines]",
          "3477:   \" Simple way to execute something with \"textwinlock\" set.",
          "",
          "[Added Lines]",
          "3477:   \" Simple way to execute something with \"textlock\" set.",
          "",
          "---------------"
        ],
        "src/undo.c||src/undo.c": [
          "File: src/undo.c -> src/undo.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "335:     {",
          "337:  return FALSE;",
          "338:     }",
          "",
          "[Removed Lines]",
          "334:     if (textwinlock != 0 || textlock != 0)",
          "336:  emsg(_(e_not_allowed_to_change_text_here));",
          "",
          "[Added Lines]",
          "334:     if (textlock != 0)",
          "336:  emsg(_(e_not_allowed_to_change_text_or_change_window));",
          "",
          "---------------"
        ],
        "src/version.c||src/version.c": [
          "File: src/version.c -> src/version.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "735: static int included_patches[] =",
          "738:     5028,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "738:     5029,",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4584:  return;",
          "4585:     }",
          "4586: #endif",
          "4588:     {",
          "4589:  beep_flush();",
          "4590:  text_locked_msg();",
          "",
          "[Removed Lines]",
          "4587:     if (text_and_win_locked())",
          "",
          "[Added Lines]",
          "4587:     if (text_locked())",
          "",
          "---------------"
        ]
      }
    }
  ]
}