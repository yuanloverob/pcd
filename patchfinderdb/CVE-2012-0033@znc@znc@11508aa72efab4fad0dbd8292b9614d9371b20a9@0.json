{
  "cve_id": "CVE-2012-0033",
  "cve_desc": "The CBounceDCCMod::OnPrivCTCP function in bouncedcc.cpp in the bouncedcc module in ZNC 0.200 and 0.202 allows remote attackers to cause a denial of service (crash) via a crafted DCC RESUME request.",
  "repo": "znc/znc",
  "patch_hash": "11508aa72efab4fad0dbd8292b9614d9371b20a9",
  "patch_info": {
    "commit_hash": "11508aa72efab4fad0dbd8292b9614d9371b20a9",
    "repo": "znc/znc",
    "commit_url": "https://github.com/znc/znc/commit/11508aa72efab4fad0dbd8292b9614d9371b20a9",
    "files": [
      "modules/bouncedcc.cpp"
    ],
    "message": "Fix crash in bouncedcc module.\n\nIt happens when DCC RESUME is received.\nAffected ZNC versions: 0.200, 0.202.\n\nThanks to howeyc for reporting this and providing the patch.",
    "before_after_code_files": [
      "modules/bouncedcc.cpp||modules/bouncedcc.cpp"
    ]
  },
  "patch_diff": {
    "modules/bouncedcc.cpp||modules/bouncedcc.cpp": [
      "File: modules/bouncedcc.cpp -> modules/bouncedcc.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "238:      CDCCBounce* pSock = (CDCCBounce*) *it;",
      "240:      if (pSock->GetLocalPort() == uResumePort) {",
      "242:      }",
      "243:     }",
      "244:    } else if (sType.Equals(\"ACCEPT\")) {",
      "",
      "[Removed Lines]",
      "241:       m_pUser->PutUser(\":\" + Nick.GetNickMask() + \" PRIVMSG \" + m_pClient->GetNick() + \" :\\001DCC \" + sType + \" \" + sFile + \" \" + CString(pSock->GetUserPort()) + \" \" + sMessage.Token(4) + \"\\001\");",
      "",
      "[Added Lines]",
      "241:       m_pUser->PutUser(\":\" + Nick.GetNickMask() + \" PRIVMSG \" + m_pUser->GetNick() + \" :\\001DCC \" + sType + \" \" + sFile + \" \" + CString(pSock->GetUserPort()) + \" \" + sMessage.Token(4) + \"\\001\");",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "248:      CDCCBounce* pSock = (CDCCBounce*) *it;",
      "250:      if (pSock->GetUserPort() == sMessage.Token(3).ToUShort()) {",
      "252:      }",
      "253:     }",
      "254:    }",
      "",
      "[Removed Lines]",
      "251:       m_pUser->PutUser(\":\" + Nick.GetNickMask() + \" PRIVMSG \" + m_pClient->GetNick() + \" :\\001DCC \" + sType + \" \" + sFile + \" \" + CString(pSock->GetLocalPort()) + \" \" + sMessage.Token(4) + \"\\001\");",
      "",
      "[Added Lines]",
      "251:       m_pUser->PutUser(\":\" + Nick.GetNickMask() + \" PRIVMSG \" + m_pUser->GetNick() + \" :\\001DCC \" + sType + \" \" + sFile + \" \" + CString(pSock->GetLocalPort()) + \" \" + sMessage.Token(4) + \"\\001\");",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "11508aa72efab4fad0dbd8292b9614d9371b20a9",
      "candidate_info": {
        "commit_hash": "11508aa72efab4fad0dbd8292b9614d9371b20a9",
        "repo": "znc/znc",
        "commit_url": "https://github.com/znc/znc/commit/11508aa72efab4fad0dbd8292b9614d9371b20a9",
        "files": [
          "modules/bouncedcc.cpp"
        ],
        "message": "Fix crash in bouncedcc module.\n\nIt happens when DCC RESUME is received.\nAffected ZNC versions: 0.200, 0.202.\n\nThanks to howeyc for reporting this and providing the patch.",
        "before_after_code_files": [
          "modules/bouncedcc.cpp||modules/bouncedcc.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "modules/bouncedcc.cpp||modules/bouncedcc.cpp"
          ],
          "candidate": [
            "modules/bouncedcc.cpp||modules/bouncedcc.cpp"
          ]
        }
      },
      "candidate_diff": {
        "modules/bouncedcc.cpp||modules/bouncedcc.cpp": [
          "File: modules/bouncedcc.cpp -> modules/bouncedcc.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "238:      CDCCBounce* pSock = (CDCCBounce*) *it;",
          "240:      if (pSock->GetLocalPort() == uResumePort) {",
          "242:      }",
          "243:     }",
          "244:    } else if (sType.Equals(\"ACCEPT\")) {",
          "",
          "[Removed Lines]",
          "241:       m_pUser->PutUser(\":\" + Nick.GetNickMask() + \" PRIVMSG \" + m_pClient->GetNick() + \" :\\001DCC \" + sType + \" \" + sFile + \" \" + CString(pSock->GetUserPort()) + \" \" + sMessage.Token(4) + \"\\001\");",
          "",
          "[Added Lines]",
          "241:       m_pUser->PutUser(\":\" + Nick.GetNickMask() + \" PRIVMSG \" + m_pUser->GetNick() + \" :\\001DCC \" + sType + \" \" + sFile + \" \" + CString(pSock->GetUserPort()) + \" \" + sMessage.Token(4) + \"\\001\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "248:      CDCCBounce* pSock = (CDCCBounce*) *it;",
          "250:      if (pSock->GetUserPort() == sMessage.Token(3).ToUShort()) {",
          "252:      }",
          "253:     }",
          "254:    }",
          "",
          "[Removed Lines]",
          "251:       m_pUser->PutUser(\":\" + Nick.GetNickMask() + \" PRIVMSG \" + m_pClient->GetNick() + \" :\\001DCC \" + sType + \" \" + sFile + \" \" + CString(pSock->GetLocalPort()) + \" \" + sMessage.Token(4) + \"\\001\");",
          "",
          "[Added Lines]",
          "251:       m_pUser->PutUser(\":\" + Nick.GetNickMask() + \" PRIVMSG \" + m_pUser->GetNick() + \" :\\001DCC \" + sType + \" \" + sFile + \" \" + CString(pSock->GetLocalPort()) + \" \" + sMessage.Token(4) + \"\\001\");",
          "",
          "---------------"
        ]
      }
    }
  ]
}