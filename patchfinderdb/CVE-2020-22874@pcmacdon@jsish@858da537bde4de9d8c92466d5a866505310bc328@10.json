{
  "cve_id": "CVE-2020-22874",
  "cve_desc": "Integer overflow vulnerability in function Jsi_ObjArraySizer in jsish before 3.0.8, allows remote attackers to execute arbitrary code.",
  "repo": "pcmacdon/jsish",
  "patch_hash": "858da537bde4de9d8c92466d5a866505310bc328",
  "patch_info": {
    "commit_hash": "858da537bde4de9d8c92466d5a866505310bc328",
    "repo": "pcmacdon/jsish",
    "commit_url": "https://github.com/pcmacdon/jsish/commit/858da537bde4de9d8c92466d5a866505310bc328",
    "files": [
      "md/Reference.md",
      "src/jsi.h",
      "src/jsiArray.c",
      "src/jsiCData.c",
      "src/jsiInt.h",
      "src/jsiInterp.c",
      "src/jsiObj.c",
      "src/jsiValue.c",
      "tools/protos.jsi",
      "www/reference.wiki"
    ],
    "message": "Release \"3.0.8\": Address Array alloc sizing issues from issue \"integer overflow and buffer overflow #5\".\n\nFossilOrigin-Name: 8c46a1d465b358110dcfb271721d35fe843a1b52f2fa24ccc10094eb8aaf6fe4",
    "before_after_code_files": [
      "src/jsi.h||src/jsi.h",
      "src/jsiArray.c||src/jsiArray.c",
      "src/jsiCData.c||src/jsiCData.c",
      "src/jsiInt.h||src/jsiInt.h",
      "src/jsiInterp.c||src/jsiInterp.c",
      "src/jsiObj.c||src/jsiObj.c",
      "src/jsiValue.c||src/jsiValue.c",
      "tools/protos.jsi||tools/protos.jsi",
      "www/reference.wiki||www/reference.wiki"
    ]
  },
  "patch_diff": {
    "src/jsi.h||src/jsi.h": [
      "File: src/jsi.h -> src/jsi.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "5: #define JSI_VERSION_MAJOR   3",
      "6: #define JSI_VERSION_MINOR   0",
      "9: #define JSI_VERSION (JSI_VERSION_MAJOR + ((Jsi_Number)JSI_VERSION_MINOR/100.0) + ((Jsi_Number)JSI_VERSION_RELEASE/10000.0))",
      "",
      "[Removed Lines]",
      "7: #define JSI_VERSION_RELEASE 7",
      "",
      "[Added Lines]",
      "7: #define JSI_VERSION_RELEASE 8",
      "",
      "---------------"
    ],
    "src/jsiArray.c||src/jsiArray.c": [
      "File: src/jsiArray.c -> src/jsiArray.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "267:             rc = jsi_ArrayFlatSub(interp, nobj, t , depth-1);",
      "268:         else if (!Jsi_ValueIsUndef(interp, t))",
      "269:             Jsi_ObjArrayAdd(interp, nobj, t);",
      "271:             return Jsi_LogError(\"array size exceeded\");",
      "272:     }",
      "273:     return rc;",
      "",
      "[Removed Lines]",
      "270:         if ((++n + clen)>interp->maxArrayList)",
      "",
      "[Added Lines]",
      "270:         if ((uint)(++n + clen)>interp->maxArrayList)",
      "",
      "---------------"
    ],
    "src/jsiCData.c||src/jsiCData.c": [
      "File: src/jsiCData.c -> src/jsiCData.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1276:             sf->flags |= JSI_OPT_BITSET_ENUM;",
      "1277:         }",
      "1278:         if (sf->arrSize) {",
      "1281:                 goto bail;",
      "1282:             }",
      "1283:             if (sf->bits || isEnum) {",
      "",
      "[Removed Lines]",
      "1279:             if (sf->arrSize>MAX_ARRAY_LIST) {",
      "1280:                 rc = Jsi_LogError(\"array size too big: %d >= %d\", sf->arrSize, MAX_ARRAY_LIST);",
      "",
      "[Added Lines]",
      "1279:             if (sf->arrSize>interp->maxArrayList) {",
      "1280:                 rc = Jsi_LogError(\"array size too big: %d >= %d\", sf->arrSize, interp->maxArrayList);",
      "",
      "---------------"
    ],
    "src/jsiInt.h||src/jsiInt.h": [
      "File: src/jsiInt.h -> src/jsiInt.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "1259:     Jsi_Value *Top_object;",
      "1260:     Jsi_ScopeStrs *scopes[JSI_MAX_SCOPE];",
      "1261:     int cur_scope;",
      "1263:     int delRBCnt;",
      "1264:     Jsi_Func *activeFunc;  // Currently active function call.",
      "1265:     Jsi_Func *prevActiveFunc;  // Prev active function call.",
      "",
      "[Removed Lines]",
      "1262:     int maxArrayList;",
      "",
      "[Added Lines]",
      "1262:     uint maxArrayList;",
      "",
      "---------------"
    ],
    "src/jsiInterp.c||src/jsiInterp.c": [
      "File: src/jsiInterp.c -> src/jsiInterp.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "100:     JSI_OPT(INT,   Jsi_Interp, lockTimeout, .help=\"Thread time-out for mutex lock acquires (milliseconds)\" ),",
      "101:     JSI_OPT(CUSTOM,Jsi_Interp, logOpts,     .help=\"Options for log output to add file/line/time\", .flags=0, .custom=Jsi_Opt_SwitchSuboption, .data=jsi_InterpLogOptions),",
      "102:     JSI_OPT(INT,   Jsi_Interp, maxDepth,    .help=\"Depth limit of recursive function calls (1000)\", .flags=JSI_OPT_LOCKSAFE),",
      "104:     JSI_OPT(INT,   Jsi_Interp, maxIncDepth, .help=\"Maximum allowed source/require nesting depth (50)\", .flags=JSI_OPT_LOCKSAFE),",
      "105:     JSI_OPT(INT,   Jsi_Interp, maxInterpDepth,.help=\"Maximum nested subinterp create depth (10)\", .flags=JSI_OPT_LOCKSAFE),",
      "106:     JSI_OPT(INT,   Jsi_Interp, maxUserObjs, .help=\"Maximum number of 'new' object calls, eg. File, RegExp, etc\", .flags=JSI_OPT_LOCKSAFE ),",
      "",
      "[Removed Lines]",
      "103:     JSI_OPT(INT,   Jsi_Interp, maxArrayList,.help=\"Maximum array convertable to list (100000)\", .flags=JSI_OPT_LOCKSAFE),",
      "",
      "[Added Lines]",
      "103:     JSI_OPT(UINT,  Jsi_Interp, maxArrayList,.help=\"Maximum array convertable to list (100000)\", .flags=JSI_OPT_LOCKSAFE),",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1146:     }",
      "1147:     interp->maxDepth = JSI_MAX_EVAL_DEPTH;",
      "1148:     interp->maxIncDepth = JSI_MAX_INCLUDE_DEPTH;",
      "1149:     interp->typeWarnMax = 50;",
      "1150:     interp->subOpts.dblPrec = __DBL_DECIMAL_DIG__-1;",
      "1151:     interp->subOpts.prompt = \"$ \";",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1149:     interp->maxArrayList = MAX_ARRAY_LIST;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1482: #endif",
      "1483:     if (interp->typeCheck.all|interp->typeCheck.parse|interp->typeCheck.funcsig)",
      "1484:         interp->staticFuncsTbl = Jsi_HashNew(interp, JSI_KEYS_STRING, NULL);",
      "1486:     if (!jsiIntData.isInit) {",
      "1487:         jsiIntData.isInit = 1;",
      "1488:         jsi_InitValue(interp, 0);",
      "",
      "[Removed Lines]",
      "1485:     interp->maxArrayList = MAX_ARRAY_LIST;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/jsiObj.c||src/jsiObj.c": [
      "File: src/jsiObj.c -> src/jsiObj.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "76:         if (!cp || !isdigit(*cp))",
      "77:             return JSI_OK;",
      "78:         n = (int)strtol(cp, &ep, 0);",
      "80:             return JSI_OK;",
      "81:         hPtr->f.bits.isarrlist = 1;",
      "82:         if (Jsi_ObjArraySizer(interp, obj, n) <= 0)",
      "",
      "[Removed Lines]",
      "79:         if (n<0 || n >= interp->maxArrayList)",
      "",
      "[Added Lines]",
      "79:         if (n<0 || (uint)n >= interp->maxArrayList)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "415: int Jsi_ObjArraySizer(Jsi_Interp *interp, Jsi_Obj *obj, uint len)",
      "416: {",
      "418:     assert(obj->isarrlist);",
      "419:     if (mod>1)",
      "420:         nsiz = nsiz + ((mod-1) - (nsiz + mod - 1)%mod);",
      "423:         return 0;",
      "424:     }",
      "425:     if (len >= obj->arrMaxSize) {",
      "",
      "[Removed Lines]",
      "417:     int nsiz = len + 1, mod = ALLOC_MOD_SIZE;",
      "421:     if (nsiz > MAX_ARRAY_LIST) {",
      "422:         Jsi_LogError(\"array size too large\");",
      "",
      "[Added Lines]",
      "417:     uint nsiz = len + 1, mod = ALLOC_MOD_SIZE;",
      "421:     if (len >= interp->maxArrayList || nsiz > interp->maxArrayList) {",
      "422:         Jsi_LogError(\"array size too big: %u >= %u\", len, interp->maxArrayList);",
      "",
      "---------------"
    ],
    "src/jsiValue.c||src/jsiValue.c": [
      "File: src/jsiValue.c -> src/jsiValue.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1036:     }",
      "1040:         target->vt == JSI_VT_OBJECT && target->d.obj->arr) {",
      "1041:         return jsi_ObjArraySetDup(interp, target->d.obj, value, arrayindex);",
      "1042:     }",
      "",
      "[Removed Lines]",
      "1039:     if (arrayindex >= 0 && arrayindex < MAX_ARRAY_LIST &&",
      "",
      "[Added Lines]",
      "1039:     if (arrayindex >= 0 && (uint)arrayindex < interp->maxArrayList &&",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1373:     Jsi_Obj *obj = target->d.obj;",
      "1375:     if (obj->isarrlist) {",
      "1377:             Jsi_ObjArraySet(interp, obj, val, key);",
      "1378:             return JSI_OK;",
      "1379:         }",
      "",
      "[Removed Lines]",
      "1376:         if (key >= 0 && key < interp->maxArrayList) {",
      "",
      "[Added Lines]",
      "1376:         if (key >= 0 && (uint)key < interp->maxArrayList) {",
      "",
      "---------------"
    ],
    "tools/protos.jsi||tools/protos.jsi": [
      "File: tools/protos.jsi -> tools/protos.jsi"
    ],
    "www/reference.wiki||www/reference.wiki": [
      "File: www/reference.wiki -> www/reference.wiki",
      "--- Hunk 1 ---",
      "[Context before]",
      "633: <tr><td>lockTimeout</td><td><i>INT</i></td><td>Thread time-out for mutex lock acquires (milliseconds).</td><td><i></i></td></tr>",
      "634: <tr><td>logOpts</td><td><i><a href='#logOptsOptions'>options</a></i></td><td>Options for log output to add file/line/time.</td><td><i></i></td></tr>",
      "635: <tr><td>maxDepth</td><td><i>INT</i></td><td>Depth limit of recursive function calls (1000).</td><td><i></i></td></tr>",
      "637: <tr><td>maxIncDepth</td><td><i>INT</i></td><td>Maximum allowed source/require nesting depth (50).</td><td><i></i></td></tr>",
      "638: <tr><td>maxInterpDepth</td><td><i>INT</i></td><td>Maximum nested subinterp create depth (10).</td><td><i></i></td></tr>",
      "639: <tr><td>maxUserObjs</td><td><i>INT</i></td><td>Maximum number of 'new' object calls, eg. File, RegExp, etc.</td><td><i></i></td></tr>",
      "",
      "[Removed Lines]",
      "636: <tr><td>maxArrayList</td><td><i>INT</i></td><td>Maximum array convertable to list (100000).</td><td><i></i></td></tr>",
      "",
      "[Added Lines]",
      "636: <tr><td>maxArrayList</td><td><i>UINT</i></td><td>Maximum array convertable to list (100000).</td><td><i></i></td></tr>",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "37559850f737cfa74fbb04877a276ca1333f9c71",
      "candidate_info": {
        "commit_hash": "37559850f737cfa74fbb04877a276ca1333f9c71",
        "repo": "pcmacdon/jsish",
        "commit_url": "https://github.com/pcmacdon/jsish/commit/37559850f737cfa74fbb04877a276ca1333f9c71",
        "files": [
          "lib/Jsish.jsi",
          "lib/Wget.jsi",
          "md/Reference.md",
          "md/Sqlite.md",
          "src/jsi.h",
          "src/jsiCmds.c",
          "src/jsiJSON.c",
          "src/jsiMySql.c",
          "src/jsiSqlite.c",
          "src/jsiStubs.h",
          "src/jsiUtils.c",
          "src/jsiWebSocket.c",
          "tools/protos.jsi",
          "www/reference.wiki"
        ],
        "message": "WebSocket mimeTypes.\n\nFossilOrigin-Name: e64ec3fc7f8943583f228e91faeed9a9c6f5d8c6a12cd9e47e1b5ec5e38a262f",
        "before_after_code_files": [
          "lib/Jsish.jsi||lib/Jsish.jsi",
          "lib/Wget.jsi||lib/Wget.jsi",
          "src/jsi.h||src/jsi.h",
          "src/jsiCmds.c||src/jsiCmds.c",
          "src/jsiJSON.c||src/jsiJSON.c",
          "src/jsiMySql.c||src/jsiMySql.c",
          "src/jsiSqlite.c||src/jsiSqlite.c",
          "src/jsiStubs.h||src/jsiStubs.h",
          "src/jsiUtils.c||src/jsiUtils.c",
          "src/jsiWebSocket.c||src/jsiWebSocket.c",
          "tools/protos.jsi||tools/protos.jsi",
          "www/reference.wiki||www/reference.wiki"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/jsi.h||src/jsi.h",
            "tools/protos.jsi||tools/protos.jsi",
            "www/reference.wiki||www/reference.wiki"
          ],
          "candidate": [
            "src/jsi.h||src/jsi.h",
            "tools/protos.jsi||tools/protos.jsi",
            "www/reference.wiki||www/reference.wiki"
          ]
        }
      },
      "candidate_diff": {
        "lib/Jsish.jsi||lib/Jsish.jsi": [
          "File: lib/Jsish.jsi -> lib/Jsish.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "269:     var cols = db.query('PRAGMA table_info(\"'+table+'\")');",
          "270:     if (!cols.length) {",
          "271:         if (!self.noCreate)",
          "273:         return true;",
          "274:     }",
          "276:     oo.getSql = true;",
          "277:     var cs = db.onecolumn(\"SELECT sql from sqlite_master where type='table' and name=@table\").trim();",
          "279:     if (fs === cs)",
          "280:         return true;",
          "281:     var f = fs.substring( fs.indexOf('([')+2, fs.length-2);",
          "",
          "[Removed Lines]",
          "272:             db.query(\"CREATE TABLE '\"+table+\"' %s\", {objName:'data'});",
          "275:     var oo = self.objOpts;",
          "278:     var fs = db.query(\"CREATE TABLE '\"+table+\"' %s\", {objName:'data', objOpts:oo}).trim();",
          "",
          "[Added Lines]",
          "272:             db.query(\"CREATE TABLE '\"+table+\"' %v\", 'data');",
          "275:     var oo = self.objOpts.merge({});",
          "277:     oo.name = 'data';",
          "279:     var fs = db.query(\"CREATE TABLE '\"+table+\"' %v\", {obj:oo}).trim();",
          "",
          "---------------"
        ],
        "lib/Wget.jsi||lib/Wget.jsi": [
          "File: lib/Wget.jsi -> lib/Wget.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "8:         headers     : [],           // Header fields to send.",
          "9:         nowait      : false,        // Just return object: caller will call update.",
          "10:         onDone      : null,         // Callback when done.",
          "12:         wsOpts      :{},            // Websocket options.",
          "13:         wsdebug     : 0             // WebSockets debug level.",
          "14:     };",
          "",
          "[Removed Lines]",
          "11:         O           : '',           // Output file name, or - for stdout, . for return contents: default is url tail.",
          "",
          "[Added Lines]",
          "11:         O           : '',           // Output file name, or - for stdout, . for response: default is url tail.",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "53:             delete self.fd;",
          "54:         }",
          "55:         if (self.onDone)",
          "57:     }",
          "59:     function main() {",
          "",
          "[Removed Lines]",
          "56:             self.onDone(id, isError);",
          "",
          "[Added Lines]",
          "56:             self.onDone(id, self, isError);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "80:         if (self.O == '')",
          "81:             self.O = File.tail(self.path);",
          "82:         if (self.O == '')",
          "84:         if (self.O !== '-' && self.O !== '.' && File.exists(self.O)) {",
          "85:             if (!self.force)",
          "86:                 throw('output file already exists: '+self.O);",
          "",
          "[Removed Lines]",
          "83:             self.O = '-';",
          "",
          "[Added Lines]",
          "83:             self.O = '.';",
          "",
          "---------------"
        ],
        "src/jsi.h||src/jsi.h": [
          "File: src/jsi.h -> src/jsi.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #define JSI_VERSION_MAJOR   3",
          "6: #define JSI_VERSION_MINOR   0",
          "9: #define JSI_VERSION (JSI_VERSION_MAJOR + ((Jsi_Number)JSI_VERSION_MINOR/100.0) + ((Jsi_Number)JSI_VERSION_RELEASE/10000.0))",
          "",
          "[Removed Lines]",
          "7: #define JSI_VERSION_RELEASE 21",
          "",
          "[Added Lines]",
          "7: #define JSI_VERSION_RELEASE 22",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "614:     Jsi_UserObjIsEquProc *isequ;",
          "615: } Jsi_UserObjReg;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "617: typedef struct {",
          "618:     const char* name;",
          "619:     Jsi_Value* skip;",
          "620:     bool getSql;",
          "621:     bool defaultNull;",
          "622:     bool noChecks;",
          "623:     bool noDefaults;",
          "624:     bool noTypes;",
          "625: } Jsi_SqlObjOpts;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1499: JSI_DBDATA_FIELDS",
          "1500: } Jsi_CDataDb;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1513: #define JSI_DBOBJ_OPTSPEC \\",
          "1514:     JSI_OPT(STRKEY,   Jsi_SqlObjOpts, name,         .help=\"Name of object var data source for %s\" ), \\",
          "1515:     JSI_OPT(ARRAY,    Jsi_SqlObjOpts, skip,         .help=\"Object members to ignore\" ), \\",
          "1516:     JSI_OPT(BOOL,     Jsi_SqlObjOpts, getSql,       .help=\"Return expanded SQL without evaluating\" ), \\",
          "1517:     JSI_OPT(BOOL,     Jsi_SqlObjOpts, defaultNull,  .help=\"Create with DEFAULT NULL\" ), \\",
          "1518:     JSI_OPT(BOOL,     Jsi_SqlObjOpts, noChecks,     .help=\"Create with no CHECK constraints\" ), \\",
          "1519:     JSI_OPT(BOOL,     Jsi_SqlObjOpts, noDefaults,   .help=\"Create with no defaults\" ), \\",
          "1520:     JSI_OPT(BOOL,     Jsi_SqlObjOpts, noTypes,      .help=\"Create with no types\" ), \\",
          "1521:     JSI_OPT_END(Jsi_SqlObjOpts, .help=\"Options for obj\")",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1532: #define JSI_STUBS_STRUCTSIZES (sizeof(Jsi_MapSearch)+sizeof(Jsi_TreeSearch) \\",
          "1533:     +sizeof(Jsi_HashSearch)+sizeof(Jsi_Filesystem)+sizeof(Jsi_Chan)+sizeof(Jsi_Event) \\",
          "1534:     +sizeof(Jsi_CDataDb)+sizeof(Jsi_Stack)+sizeof(Jsi_OptionSpec)+sizeof(Jsi_CmdSpec) \\",
          "1537: #ifndef JSI_OMIT_STUBS",
          "1538: #ifdef JSI_USE_STUBS",
          "",
          "[Removed Lines]",
          "1535:     +sizeof(Jsi_UserObjReg)+sizeof(Jsi_String) + sizeof(Jsi_PkgOpts))",
          "",
          "[Added Lines]",
          "1556:     +sizeof(Jsi_UserObjReg)+sizeof(Jsi_String) + sizeof(Jsi_PkgOpts) + sizeof(Jsi_SqlObjOpts))",
          "",
          "---------------"
        ],
        "src/jsiCmds.c||src/jsiCmds.c": [
          "File: src/jsiCmds.c -> src/jsiCmds.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3893:     cp = Jsi_DSValue(&dStr);",
          "3894:     if (Jsi_Strchr(sp, ' ')) {",
          "3895:         Jsi_DSAppend(&sStr, sp, NULL);",
          "3900:         }",
          "3902:     }",
          "3903:     if (Jsi_Strcmp(cp, sp)) {",
          "3904:         if (partial && *cp && *sp) {",
          "",
          "[Removed Lines]",
          "3896:         char *cp = Jsi_DSValue(&sStr), *ep = cp;",
          "3897:         while (*cp) {",
          "3898:             while (isspace(*cp)) cp++;",
          "",
          "[Added Lines]",
          "3896:         char *tp = Jsi_DSValue(&sStr), *ep = tp;",
          "3897:         while (*tp) {",
          "3898:             while (isspace(*tp)) tp++;",
          "3902:         sp = Jsi_DSValue(&sStr);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3926:                 cs=(*ce?ce+1:ce);",
          "3927:             }",
          "3928:             goto done;",
          "3935:         }",
          "3936:     }",
          "3937: done:",
          "3938:     Jsi_DSFree(&dStr);",
          "",
          "[Removed Lines]",
          "3929: mismatch:",
          "3930:             ok = 0;",
          "3931:             if (interp->asserts && !noerror)",
          "3932:                 rc = Jsi_LogError(\"matchobj failed: expected '%s' got '%s'\", sp, cp);",
          "3933:             else",
          "3934:                 Jsi_LogWarn(\"matchobj failed: expected '%s' got '%s'\", sp, cp);",
          "",
          "[Added Lines]",
          "3931: mismatch:",
          "3932:         ok = 0;",
          "3933:         if (interp->asserts && !noerror)",
          "3934:             rc = Jsi_LogError(\"matchobj failed: expected '%s' got '%s'\", sp, cp);",
          "3935:         else",
          "3936:             Jsi_LogWarn(\"matchobj failed: expected '%s' got '%s'\", sp, cp);",
          "",
          "---------------"
        ],
        "src/jsiJSON.c||src/jsiJSON.c": [
          "File: src/jsiJSON.c -> src/jsiJSON.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "219:             Jsi_ValueMakeUndef(interp, ret);",
          "220:         goto done;",
          "221:     }",
          "225: done:",
          "226:     Jsi_JsonFree(&pp);",
          "227:     return result;",
          "",
          "[Removed Lines]",
          "222:     v = jsonGen1Value(interp, p, js, i, &i, 1);",
          "223:     Jsi_ValueReplace(interp, ret, v);",
          "224:     Jsi_DecrRefCount(interp, v);",
          "",
          "[Added Lines]",
          "222:     v = jsonGen1Value(interp, p, js, i, &i, (*ret!=NULL));",
          "223:     if (!*ret)",
          "225:     else {",
          "226:         Jsi_ValueReplace(interp, ret, v);",
          "227:         Jsi_DecrRefCount(interp, v);",
          "228:     }",
          "",
          "---------------"
        ],
        "src/jsiMySql.c||src/jsiMySql.c": [
          "File: src/jsiMySql.c -> src/jsiMySql.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "176:     const char *nullvalue;",
          "177:     const char *table;",
          "180:     Jsi_Value *width;",
          "181:     int maxString;",
          "182: } QueryOpts;",
          "184: static const char *trcModeStrs[] = {\"eval\", \"delete\", \"prepare\", \"step\", NULL}; // Bit-set packed into an int.",
          "186: enum {mdbTMODE_EVAL=0x1, mdbTMODE_DELETE=0x2, mdbTMODE_PREPARE=0x4, mdbTMODE_STEP=0x4};",
          "190: typedef struct MySqlObj {",
          "",
          "[Removed Lines]",
          "179:     const char* objName;",
          "185: static const char *objSqlModeStrs[] = { \"getSql\", \"noTypes\", \"noDefaults\", \"nullDefaults\", NULL };",
          "187: enum {OBJMODE_SQLONLY=0x1, OBJMODE_NOTYPES=0x2, OBJMODE_NODEFAULTS=0x4, OBJMODE_NULLDEFAULTS=0x8, OBJMODE_NOCHECKS=0x8};",
          "",
          "[Added Lines]",
          "179:     Jsi_SqlObjOpts obj;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "261:     Jsi_HashSet(hPtr, (void*)\"datetime\", (void*)MYSQL_TYPE_DATETIME);",
          "262: }",
          "264: static Jsi_OptionSpec QueryFmtOptions[] =",
          "265: {",
          "266:     JSI_OPT(FUNC,   QueryOpts, callback, .help=\"Function to call with each row result\", .flags=0, .custom=0, .data=(void*)\"values:object\" ),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "262: static Jsi_OptionSpec mdbExecFmtObjOptions[] =",
          "263: {",
          "264:     JSI_DBOBJ_OPTSPEC",
          "265: };",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "272:     JSI_OPT(BOOL,   QueryOpts, nocache, .help=\"Disable query cache\"),",
          "273:     JSI_OPT(BOOL,   QueryOpts, noNamedParams, .help=\"Disable translating sql to support named params\"),",
          "274:     JSI_OPT(STRKEY, QueryOpts, nullvalue, .help=\"Null string output (for non-json mode)\"),",
          "277:     JSI_OPT(ARRAY,  QueryOpts, paramVar, .help=\"Array var to use for parameters\" ),",
          "278:     JSI_OPT(BOOL,   QueryOpts, prefetch, .help=\"Let client library cache entire results\"),",
          "279:     JSI_OPT(STRKEY, QueryOpts, separator, .help=\"Separator string (for csv and text mode)\"),",
          "",
          "[Removed Lines]",
          "275:     JSI_OPT(STRKEY, QueryOpts, objName,  .help=\"Object var name for CREATE/INSERT: replaces %s with fields in query\" ),",
          "276:     JSI_OPT(CUSTOM, QueryOpts, objOpts,     .help=\"Options for objName\", .flags=0,  .custom=Jsi_Opt_SwitchBitset,  .data=objSqlModeStrs),",
          "",
          "[Added Lines]",
          "278:     JSI_OPT(CUSTOM, QueryOpts, obj,       .help=\"Options for object\", .flags=0,  .custom=Jsi_Opt_SwitchSuboption,  .data=mdbExecFmtObjOptions ),",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1587:     opts = jdb->queryOpts;",
          "1588:     opts.callback = NULL;",
          "1589:     opts.width = NULL;",
          "1590:     Jsi_Value *callback = NULL, *width = NULL;",
          "1592:     if (arg) {",
          "1593:         if (Jsi_ValueIsFunction(interp,arg))",
          "1594:             callback = opts.callback = arg;",
          "1595:         else if (Jsi_ValueIsString(interp, arg))",
          "1597:         else if (Jsi_ValueIsObjType(interp, arg, JSI_OT_ARRAY))",
          "1598:             opts.values = arg;",
          "1599:         else if (Jsi_ValueIsObjType(interp, arg, JSI_OT_OBJECT))",
          "",
          "[Removed Lines]",
          "1596:             opts.objName = Jsi_ValueString(interp, arg, NULL);",
          "",
          "[Added Lines]",
          "1592:     opts.obj.name = NULL;",
          "1593:     opts.obj.skip = NULL;",
          "1600:             opts.obj.name = Jsi_ValueString(interp, arg, NULL);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1621:         Jsi_ValueMakeNumber(interp, ret, (Jsi_Number)n);",
          "1622:         return JSI_OK;",
          "1628:             goto bail;",
          "1629:         zSql = Jsi_DSValue(&eStr);",
          "1630:     }",
          "1633:             Jsi_ValueMakeStringDup(interp, ret, zSql);",
          "1634:         else",
          "1636:         goto bail;",
          "1637:     }",
          "1638:     if (!opts.separator) {",
          "",
          "[Removed Lines]",
          "1624:     if (opts.objName) {",
          "1625:         if (Jsi_SqlObjBinds(interp, &eStr, opts.objName,  !(opts.objOpts&OBJMODE_NOTYPES),",
          "1626:         !(opts.objOpts&OBJMODE_NODEFAULTS), (opts.objOpts&OBJMODE_NULLDEFAULTS)!=0,",
          "1627:         !(opts.objOpts&OBJMODE_NOCHECKS)) != JSI_OK)",
          "1631:     if ((opts.objOpts&OBJMODE_SQLONLY)) {",
          "1632:         if (opts.objName)",
          "1635:             rc = Jsi_LogError(\"'objOpts.sqlOnly' can only be used with 'objName'\");",
          "",
          "[Added Lines]",
          "1628:     if (opts.obj.name) {",
          "1629:         if (Jsi_SqlObjBinds(interp, &eStr, &opts.obj) != JSI_OK)",
          "1633:     if (opts.obj.getSql) {",
          "1634:         if (opts.obj.name)",
          "1637:             rc = Jsi_LogError(\"'obj.getSql' can only be used with 'objName'\");",
          "",
          "---------------"
        ],
        "src/jsiSqlite.c||src/jsiSqlite.c": [
          "File: src/jsiSqlite.c -> src/jsiSqlite.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "173: static const char *mtxStrs[] = { \"default\", \"none\", \"full\", NULL };",
          "174: static const char *trcModeStrs[] = {\"eval\", \"delete\", \"prepare\", \"step\", NULL}; // Bit-set packed into an int.",
          "175: static const char *dbTypeChkStrs[] = { \"convert\", \"warn\", \"error\", \"disable\", NULL };",
          "177: #endif",
          "180: enum {TMODE_EVAL=0x1, TMODE_DELETE=0x2, TMODE_PREPARE=0x4, TMODE_STEP=0x4};",
          "181: typedef enum { MUTEX_DEFAULT, MUTEX_NONE, MUTEX_FULL } Mutex_Type;",
          "182: typedef enum { dbTypeCheck_Cast, dbTypeCheck_Warn, dbTypeCheck_Error, dbTypeCheck_None } dbTypeCheck_Mode;",
          "",
          "[Removed Lines]",
          "176: static const char *objSqlModeStrs[] = { \"getSql\", \"noTypes\", \"noDefaults\", \"nullDefaults\", \"noChecks\", NULL };",
          "179: enum {OBJMODE_SQLONLY=0x1, OBJMODE_NOTYPES=0x2, OBJMODE_NODEFAULTS=0x4, OBJMODE_NULLDEFAULTS=0x8, OBJMODE_NOCHECKS=0x16};",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "196:     const char *nullvalue;",
          "197:     const char *table;",
          "198:     const char *cdata; // Name of C data array to use for query.",
          "200:     Jsi_Value *width;",
          "201: } QueryOpts;",
          "",
          "[Removed Lines]",
          "199:     const char *objName;",
          "",
          "[Added Lines]",
          "198:     Jsi_SqlObjOpts obj;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "294: static Jsi_RC dbIsNumArray(Jsi_Interp *interp, Jsi_Value *value, Jsi_OptionSpec* spec, void *record);",
          "297: static Jsi_OptionSpec ExecFmtOptions[] =",
          "298: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "294: static Jsi_OptionSpec dbExecFmtObjOptions[] =",
          "295: {",
          "296:     JSI_DBOBJ_OPTSPEC",
          "297: };",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "305:     JSI_OPT(CUSTOM, QueryOpts, mode,        .help=\"Set output mode of returned data\", .flags=0, .custom=Jsi_Opt_SwitchEnum,  .data=(void*)sqexecFmtStrs),",
          "306:     JSI_OPT(BOOL,   QueryOpts, nocache,     .help=\"Disable query cache\"),",
          "307:     JSI_OPT(STRKEY, QueryOpts, nullvalue,   .help=\"Null string output (for non js/json mode)\"),",
          "310:     JSI_OPT(BOOL,   QueryOpts, retChanged,  .help=\"Query returns value of sqlite3_changed()\"),",
          "311:     JSI_OPT(STRKEY, QueryOpts, separator,   .help=\"Separator string (for csv and text mode)\"),",
          "312:     JSI_OPT(CUSTOM, QueryOpts, typeCheck,   .help=\"Type check mode (warn)\", .flags=0, .custom=Jsi_Opt_SwitchEnum, .data=(void*)dbTypeChkStrs),",
          "",
          "[Removed Lines]",
          "308:     JSI_OPT(STRKEY, QueryOpts, objName,     .help=\"Object var name for CREATE/INSERT: replaces %s with fields in query\" ),",
          "309:     JSI_OPT(CUSTOM, QueryOpts, objOpts,     .help=\"Options for objName\", .flags=0,  .custom=Jsi_Opt_SwitchBitset,  .data=objSqlModeStrs),",
          "",
          "[Added Lines]",
          "310:     JSI_OPT(CUSTOM, QueryOpts, obj,         .help=\"Options for object\", .flags=0,  .custom=Jsi_Opt_SwitchSuboption,  .data=dbExecFmtObjOptions ),",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "357:     JSI_OPT(INT,    Jsi_Db, stmtCacheMax,.help=\"Max cache size for compiled statements\"),",
          "358:     JSI_OPT(INT,    Jsi_Db, timeout,    .help=\"Amount of time to wait when file is locked, in ms\"),",
          "359:     JSI_OPT(OBJ,    Jsi_Db, udata,      .help=\"User data\" ),",
          "361:     JSI_OPT(INT,    Jsi_Db, timeout,    .help=\"Amount of time to wait when file is locked, in ms\"),",
          "362:     JSI_OPT(STRING, Jsi_Db, vfs,        .help=\"VFS to use\", jsi_IIOF),",
          "363:     JSI_OPT_END(Jsi_Db, .help=\"Options for source command\")",
          "",
          "[Removed Lines]",
          "360:     JSI_OPT(OBJ,    Jsi_Db, version,    .help=\"Sqlite version info\"),",
          "",
          "[Added Lines]",
          "361:     JSI_OPT(OBJ,    Jsi_Db, version,    .help=\"Sqlite version info\", jsi_IIRO),",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1958:         if (!p->jdb->noJsonConv) {",
          "1959:             const char *dectyp = sqlite3_column_decltype(pStmt, iCol);",
          "1960:             if (dectyp && !Jsi_Strncasecmp(dectyp, \"charjson\", 8)) {",
          "1962:                 str = (char*)sqlite3_column_text(pStmt, iCol );",
          "1963:                 if (JSI_OK != Jsi_JSONParse(interp, str, &v, 0))",
          "1964:                     Jsi_LogWarn(\"JSON parse failure for CHARJSON column\");",
          "",
          "[Removed Lines]",
          "1961:                 Jsi_Value *v = Jsi_ValueNew(interp);// NULL; //Jsi_ValueNew1(interp);",
          "",
          "[Added Lines]",
          "1962:                 Jsi_Value *v = NULL; //Jsi_ValueNew1(interp);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2659:     opts = jdb->queryOpts;",
          "2660:     opts.callback = NULL;",
          "2661:     opts.width = NULL;",
          "2662:     Jsi_Value *callback = NULL, *width = NULL;",
          "2664:     if (arg) {",
          "2665:         if (Jsi_ValueIsFunction(interp,arg))",
          "2666:             callback = opts.callback = arg;",
          "2667:         else if (Jsi_ValueIsString(interp, arg))",
          "2669:         else if (Jsi_ValueIsObjType(interp, arg, JSI_OT_ARRAY))",
          "2670:             opts.values = arg;",
          "2671:         else if (Jsi_ValueIsObjType(interp, arg, JSI_OT_OBJECT))",
          "",
          "[Removed Lines]",
          "2668:             opts.objName = Jsi_ValueString(interp, arg, NULL);",
          "",
          "[Added Lines]",
          "2663:     opts.obj.name = NULL;",
          "2664:     opts.obj.skip = NULL;",
          "2671:             opts.obj.name = Jsi_ValueString(interp, arg, NULL);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2702:         }",
          "2703:         goto bail;",
          "2704:     }",
          "2709:             goto bail;",
          "2710:         zSql = Jsi_DSValue(&eStr);",
          "2711:     }",
          "2712:     if ((jdb->echo || opts.echo) && zSql)",
          "2713:         Jsi_LogInfo(\"SQL-ECHO: %s\\n\", zSql);",
          "2716:             Jsi_ValueMakeStringDup(interp, ret, zSql);",
          "2717:         else",
          "2719:         goto bail;",
          "2720:     }",
          "2721:     if (!opts.separator) {",
          "",
          "[Removed Lines]",
          "2705:     if (opts.objName) {",
          "2706:         if (Jsi_SqlObjBinds(interp, &eStr, opts.objName, !(opts.objOpts&OBJMODE_NOTYPES),",
          "2707:             !(opts.objOpts&OBJMODE_NODEFAULTS), (opts.objOpts&OBJMODE_NULLDEFAULTS)!=0,",
          "2708:             !(opts.objOpts&OBJMODE_NOCHECKS)) != JSI_OK)",
          "2714:     if ((opts.objOpts&OBJMODE_SQLONLY)) {",
          "2715:         if (opts.objName)",
          "2718:             rc = Jsi_LogError(\"'objOpts.sqlOnly' can only be used with 'objName'\");",
          "",
          "[Added Lines]",
          "2708:     if (opts.obj.name) {",
          "2709:         if (Jsi_SqlObjBinds(interp, &eStr, &opts.obj) != JSI_OK)",
          "2715:     if ((opts.obj.getSql)) {",
          "2716:         if (opts.obj.name)",
          "2719:             rc = Jsi_LogError(\"'obj.getSql' can only be used with 'objName'\");",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "3863:         sqlite3_db_config(db->db, SQLITE_DBCONFIG_MAINDBNAME, dbname);",
          "3864:     Jsi_JSONParseFmt(interp, &db->version, \"{libVer:\\\"%s\\\", hdrVer:\\\"%s\\\", hdrNum:%d, hdrSrcId:\\\"%s\\\", pkgVer:%d}\",",
          "3865:         (char *)sqlite3_libversion(), SQLITE_VERSION, SQLITE_VERSION_NUMBER, SQLITE_SOURCE_ID, jsi_DbPkgVersion);",
          "3866:     dbSetupCallbacks(db, NULL);",
          "3868: bail:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3867:     Jsi_IncrRefCount(interp, db->version);",
          "",
          "---------------"
        ],
        "src/jsiStubs.h||src/jsiStubs.h": [
          "File: src/jsiStubs.h -> src/jsiStubs.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #endif",
          "10: #undef JSI_EXTENSION_INI",
          "11: #define JSI_EXTENSION_INI Jsi_Stubs *jsiStubsPtr = NULL;",
          "",
          "[Removed Lines]",
          "8: #define JSI_STUBS_MD5 \"85902b2a851959de5d6f9dcbc763d0c0\"",
          "",
          "[Added Lines]",
          "8: #define JSI_STUBS_MD5 \"ca3a4cfb7a94f409f278b34d5a6d8606\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "445:     void(*_Jsi_IterGetKeys)(Jsi_Interp *interp, Jsi_Value *target, Jsi_IterObj *iterobj, int depth);",
          "446:     bool(*_Jsi_IsReserved)(Jsi_Interp *interp, const char* str, bool sql);",
          "447:     bool(*_Jsi_StrIsAlnum)(const char *cp);",
          "449:     Jsi_RC(*_Jsi_UserObjName)(Jsi_Interp *interp, Jsi_Value *v, Jsi_DString *dStr);",
          "450:     Jsi_Value*(*_Jsi_ValueNewRegExp)(Jsi_Interp *interp, const char *regtxt, const char* modifiers);",
          "451:     void *endPtr;",
          "",
          "[Removed Lines]",
          "448:     Jsi_RC(*_Jsi_SqlObjBinds)(Jsi_Interp* interp, Jsi_DString* zStr, const char *varName, bool addTypes, bool addDefaults, bool nullDefaults, bool addCheck);",
          "",
          "[Added Lines]",
          "448:     Jsi_RC(*_Jsi_SqlObjBinds)(Jsi_Interp* interp, Jsi_DString* zStr, Jsi_SqlObjOpts*opts);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1295: #define Jsi_IterGetKeys(n0,n1,n2,n3) JSISTUBCALL(jsiStubsPtr, _Jsi_IterGetKeys(n0,n1,n2,n3))",
          "1296: #define Jsi_IsReserved(n0,n1,n2) JSISTUBCALL(jsiStubsPtr, _Jsi_IsReserved(n0,n1,n2))",
          "1297: #define Jsi_StrIsAlnum(n0) JSISTUBCALL(jsiStubsPtr, _Jsi_StrIsAlnum(n0))",
          "1299: #define Jsi_UserObjName(n0,n1,n2) JSISTUBCALL(jsiStubsPtr, _Jsi_UserObjName(n0,n1,n2))",
          "1300: #define Jsi_ValueNewRegExp(n0,n1,n2) JSISTUBCALL(jsiStubsPtr, _Jsi_ValueNewRegExp(n0,n1,n2))",
          "",
          "[Removed Lines]",
          "1298: #define Jsi_SqlObjBinds(n0,n1,n2,n3,n4,n5,n6) JSISTUBCALL(jsiStubsPtr, _Jsi_SqlObjBinds(n0,n1,n2,n3,n4,n5,n6))",
          "",
          "[Added Lines]",
          "1298: #define Jsi_SqlObjBinds(n0,n1,n2) JSISTUBCALL(jsiStubsPtr, _Jsi_SqlObjBinds(n0,n1,n2))",
          "",
          "---------------"
        ],
        "src/jsiUtils.c||src/jsiUtils.c": [
          "File: src/jsiUtils.c -> src/jsiUtils.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "494:     return 1;",
          "495: }",
          "500:     Jsi_Value *v, *vnPtr = Jsi_VarLookup(interp, varName);",
          "501:     if (!vnPtr || !Jsi_ValueIsObjType(interp, vnPtr, JSI_OT_OBJECT))",
          "502:         return Jsi_LogError(\"varName must be an Object: %s\", varName);",
          "503:     char *cp, *zSql = Jsi_DSValue(zStr);",
          "504:     int create = !Jsi_Strncasecmp(zSql,\"create\",6);",
          "505:     int insert = !Jsi_Strncasecmp(zSql,\"insert\",6);",
          "509:     if (!cPtr)",
          "515:     Jsi_IterObj *io = Jsi_IterObjNew(interp, NULL);",
          "516:     Jsi_IterGetKeys(interp, vnPtr, io, 0);",
          "517:     uint i;",
          "518:     const char *pre = \"\", *kstr;",
          "520:         Jsi_DSAppend(&vStr, \" VALUES(\", NULL);",
          "521:     if (nullDefaults)",
          "522:         addDefaults = 0;",
          "523:     for (i=0; i<io->count; i++) {",
          "524:         kstr = io->keys[i];",
          "525:         const char *chk = NULL, *chk2 = NULL;",
          "527:         if (!create) {",
          "529:         } else {",
          "530:             const char *typ = NULL, *dflt=(nullDefaults?\"NULL\":NULL);",
          "531:             if (addTypes && ((v = Jsi_ValueObjLookup(interp, vnPtr, kstr, 1)))) {",
          "",
          "[Removed Lines]",
          "498: Jsi_RC Jsi_SqlObjBinds(Jsi_Interp* interp, Jsi_DString* zStr, const char *varName,",
          "499:     bool addTypes, bool addDefaults, bool nullDefaults, bool addCheck) {",
          "506:     if (!create && !insert) return JSI_OK;",
          "507:     const char *cPtr = Jsi_Strstr(zSql, \" %s\");",
          "508:     if (!cPtr) cPtr = Jsi_Strstr(zSql, \"\\t%s\");",
          "510:         return Jsi_LogError(\"Object varName must contain a ' %%s': %s\", varName);",
          "511:     Jsi_DString sStr = {}, vStr = {}, jStr = {};",
          "512:     Jsi_DSAppendLen(&sStr, zSql, cPtr?(cPtr-zSql):-1);",
          "513:     Jsi_DSAppend(&sStr, \" (\", NULL);",
          "519:     if (!create)",
          "526:         Jsi_DSAppend(&sStr, pre, \"[\", kstr, \"]\", NULL);",
          "528:             Jsi_DSAppend(&vStr, pre, \"$\", varName, \"(\", kstr, \")\", NULL);",
          "",
          "[Added Lines]",
          "497: bool jsi_StrInArray(Jsi_Interp* interp, Jsi_Value *arr, const char *str) {",
          "498:     Jsi_Obj *obj = arr->d.obj;",
          "499:     uint i = 0;",
          "500:     for (i = 0; i<obj->arrCnt; i++)",
          "501:     {",
          "502:         if (!obj->arr[i])",
          "503:             continue;",
          "504:         const char *cp = Jsi_ValueString(interp, obj->arr[i], NULL);",
          "505:         if (cp && !Jsi_Strcmp(cp, str))",
          "506:             return 1;",
          "507:     }",
          "508:     return 0;",
          "509: }",
          "512: Jsi_RC Jsi_SqlObjBinds(Jsi_Interp* interp, Jsi_DString* zStr, Jsi_SqlObjOpts* opts) {",
          "513:     const char *varName = opts->name;",
          "514:     bool addTypes = !opts->noTypes, addDefaults = !opts->defaultNull,",
          "515:         nullDefaults = opts->defaultNull, addCheck  = !opts->noChecks;",
          "522:     int update = !Jsi_Strncasecmp(zSql,\"update\",6);",
          "523:     if (!create && !insert && !update) return JSI_OK;",
          "524:     const char *cPtr = Jsi_Strstr(zSql, \" %v\");",
          "525:     if (!cPtr) cPtr = Jsi_Strstr(zSql, \"\\t%v\");",
          "527:         return Jsi_LogError(\"Object varName must contain a ' %%v': %s\", varName);",
          "528:     Jsi_DString sStr = {}, vStr = {}, jStr = {}, *tsPtr = &sStr;",
          "529:     Jsi_DSAppendLen(&sStr, zSql, cPtr-zSql);",
          "530:     Jsi_DSAppend(&sStr, (update?\" SET \":\" (\"), NULL);",
          "536:     if (insert)",
          "540:     if (update)",
          "541:         tsPtr = &vStr;",
          "545:         if (opts->skip && jsi_StrInArray(interp, opts->skip, kstr))",
          "546:             continue;",
          "547:         Jsi_DSAppend(tsPtr, pre, \"[\", kstr, \"]\", NULL);",
          "549:             if (update)",
          "550:                 Jsi_DSAppend(tsPtr, \" = \", \"$\", varName, \"(\", kstr, \")\", NULL);",
          "551:             else",
          "552:                 Jsi_DSAppend(&vStr, pre, \"$\", varName, \"(\", kstr, \")\", NULL);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "573:                             dflt = \"NULL\";",
          "574:                     }",
          "575:                     if (addCheck) {",
          "579:                             chk = \"== 'text'\";",
          "580:                     }",
          "581:                 }",
          "",
          "[Removed Lines]",
          "576:                         if (dflt && !Jsi_Strcmp(dflt,\"NULL\"))",
          "577:                             chk = \"IN ('text','null')\";",
          "578:                         else",
          "",
          "[Added Lines]",
          "600:                         if (dflt && !Jsi_Strcmp(dflt,\"NULL\")) {",
          "601:                             chk = NULL; // \"IN ('text','null')\";",
          "602:                             typ = NULL;",
          "603:                         } else",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "593:         }",
          "594:         pre = \", \";",
          "595:     }",
          "597:         Jsi_DSAppend(&vStr, \")\", NULL);",
          "598:     Jsi_IterObjFree(io);",
          "600:     Jsi_DSFree(zStr);",
          "601:     Jsi_DSAppend(zStr, Jsi_DSValue(&sStr), NULL);",
          "602:     Jsi_DSFree(&sStr); Jsi_DSFree(&vStr); Jsi_DSFree(&jStr);",
          "",
          "[Removed Lines]",
          "596:     if (!create)",
          "599:     Jsi_DSAppend(&sStr, \") \", Jsi_DSValue(&vStr), cPtr+3, NULL);",
          "",
          "[Added Lines]",
          "621:     if (insert)",
          "624:     Jsi_DSAppend(&sStr, (update?\"\":\") \"), Jsi_DSValue(&vStr), cPtr+3, NULL);",
          "",
          "---------------"
        ],
        "src/jsiWebSocket.c||src/jsiWebSocket.c": [
          "File: src/jsiWebSocket.c -> src/jsiWebSocket.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "120:     Jsi_Hash *pssTable, *handlers, *fileHash;",
          "121:     Jsi_Value *onAuth, *onCloseLast, *onClose, *onFilter, *onOpen, *onRecv,",
          "124:     bool client, noUpdate, noWebsock, noWarn, use_ssl, local, extHandlers, handlersPkg, inUpdate, noCompress, noConfig, echo;",
          "125:     Jsi_Value* version;",
          "127:     int port;",
          "128:     uint modifySecs;",
          "129:     int maxUpload;",
          "",
          "[Removed Lines]",
          "126:     int idx;",
          "",
          "[Added Lines]",
          "126:     int idx, mimeFuncCalled;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "281:     JSI_OPT(ARRAY,      jsi_wsPss, headers,     .help=\"Headers to send to browser on connection: name/value pairs\"),",
          "282:     JSI_OPT(BOOL,       jsi_wsPss, isWebsock,   .help=\"Is a websocket connection\" ),",
          "283:     JSI_OPT(STRBUF,     jsi_wsPss, key,         .help=\"String key lookup in ids command for SSI echo ${#}\", jsi_IIRO),",
          "285:     JSI_OPT(FUNC,       jsi_wsPss, onGet,       .help=\"Function to call to server handle http-get\", .flags=0, .custom=0, .data=(void*)\"ws:userobj, id:number, url:string, query:array\"),",
          "286:     JSI_OPT(FUNC,       jsi_wsPss, onUnknown,   .help=\"Function to call to serve out content when no file exists\", .flags=0, .custom=0, .data=(void*)\"ws:userobj, id:number, url:string, args:array\"),",
          "287:     JSI_OPT(FUNC,       jsi_wsPss, onRecv,      .help=\"Function to call when websock data recieved\", .flags=0, .custom=0, .data=(void*)\"ws:userobj, id:number, data:string\"),",
          "",
          "[Removed Lines]",
          "284:     JSI_OPT(FUNC,       jsi_wsPss, onClose,     .help=\"Function to call when the websocket connection closes\", .flags=0, .custom=0, .data=(void*)\"ws:userobj|null, id:number, boolean:ok\"),",
          "",
          "[Added Lines]",
          "284:     JSI_OPT(FUNC,       jsi_wsPss, onClose,     .help=\"Function to call when the websocket connection closes\", .flags=0, .custom=0, .data=(void*)\"ws:userobj|null, id:number, isError:boolean\"),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "318:     JSI_OPT(INT,    jsi_wsCmdObj, maxConnects,.help=\"In server mode, max number of client connections accepted\"),",
          "319:     JSI_OPT(INT,    jsi_wsCmdObj, maxDownload,.help=\"Max size of file download\"),",
          "320:     JSI_OPT(INT,    jsi_wsCmdObj, maxUpload,  .help=\"Max size of file upload will accept\"),",
          "322:     JSI_OPT(UINT,   jsi_wsCmdObj, modifySecs, .help=\"Seconds between checking for modified files with onModify (2)\"),",
          "323:     JSI_OPT(BOOL,   jsi_wsCmdObj, noConfig,   .help=\"Disable use of conf() to change options after options after create\", jsi_IIOF),",
          "324:     JSI_OPT(BOOL,   jsi_wsCmdObj, noCompress, .help=\"Disable per-message-deflate extension which can truncate large msgs\"),",
          "",
          "[Removed Lines]",
          "321:     JSI_OPT(OBJ,    jsi_wsCmdObj, mimeTypes,  .help=\"Object providing map of file extensions to mime types. eg. {txt:'text/plain', bb:'text/bb'}\", jsi_IIOF),",
          "",
          "[Added Lines]",
          "321:     JSI_OPT(OBJ,    jsi_wsCmdObj, mimeTypes,  .help=\"Object providing map of file extensions to mime types. eg. {txt:'text/plain', bb:'text/bb'}\"),",
          "322:     JSI_OPT(FUNC,   jsi_wsCmdObj, mimeLoadFunc,   .help=\"Function to call to load mimeTypes\", .flags=0, .custom=0, .data=(void*)\"ws:userobj\"),",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "326:     JSI_OPT(BOOL,   jsi_wsCmdObj, noWebsock,  .help=\"Serve html, but disallow websocket upgrade\", jsi_IIOF),",
          "327:     JSI_OPT(BOOL,   jsi_wsCmdObj, noWarn,     .help=\"Quietly ignore file related errors\"),",
          "328:     JSI_OPT(FUNC,   jsi_wsCmdObj, onAuth,     .help=\"Function to call for http basic authentication\", .flags=0, .custom=0, .data=(void*)\"ws:userobj, id:number, url:string, userpass:string\"),",
          "330:     JSI_OPT(FUNC,   jsi_wsCmdObj, onCloseLast,.help=\"Function to call when last websock connection closes. On object delete arg is null\", .flags=0, .custom=0, .data=(void*)\"ws:userobj|null\"),",
          "331:     JSI_OPT(FUNC,   jsi_wsCmdObj, onFilter,   .help=\"Function to call on a new connection: return false to kill connection\", .flags=0, .custom=0, .data=(void*)\"ws:userobj, id:number, url:string, ishttp:boolean\"),",
          "332:     JSI_OPT(FUNC,   jsi_wsCmdObj, onGet,      .help=\"Function to call to server handle http-get\", .flags=0, .custom=0, .data=(void*)\"ws:userobj, id:number, url:string, query:array\"),",
          "",
          "[Removed Lines]",
          "329:     JSI_OPT(FUNC,   jsi_wsCmdObj, onClose,    .help=\"Function to call when the websocket connection closes\", .flags=0, .custom=0, .data=(void*)\"ws:userobj|null, id:number\"),",
          "",
          "[Added Lines]",
          "330:     JSI_OPT(FUNC,   jsi_wsCmdObj, onClose,    .help=\"Function to call when the websocket connection closes\", .flags=0, .custom=0, .data=(void*)\"ws:userobj|null, id:number, isError:boolean\"),",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "807:     Jsi_DString *hStr) {",
          "808:     uchar buffer[JSI_BUFSIZ];",
          "809:     uchar *p = (unsigned char *)buffer, *end = p + sizeof(buffer);",
          "811:     int i, hvl, argc = Jsi_ValueGetLength(interp, hdrs);",
          "812:     for (i=0; i<argc; i+=2) {",
          "813:         const char *hn = Jsi_ValueArrayIndexToStr(interp, hdrs, i, NULL),",
          "822:         }",
          "823:     }",
          "824:     return true;",
          "825: }",
          "",
          "[Removed Lines]",
          "810:     int n = 0;",
          "815:         if (hn && hv) {",
          "816:             if (lws_add_http_header_by_name(wsi, (const uchar *)hn, (const uchar *)hv, hvl, &p, end))",
          "817:                 return false;",
          "818:             n = p - buffer;",
          "819:             if (n>0)",
          "820:                 Jsi_DSAppendLen(hStr, (char*)buffer, n);",
          "821:             p = buffer;",
          "",
          "[Added Lines]",
          "811:     int n = 0, len;",
          "816:         if (!hn || !hv || !(len=Jsi_Strlen(hn))) {",
          "817:             Jsi_LogWarn(\"Header invalid: %s %s\", (hn?hn:\"\"), (hv?hv:\"\"));",
          "818:             return false;",
          "819:         }",
          "820:         if (hn[len-1] != ':') {",
          "821:             Jsi_LogWarn(\"Header name must end in colon: %s %s\", (hn?hn:\"\"), (hv?hv:\"\"));",
          "822:             return false;",
          "824:         if (lws_add_http_header_by_name(wsi, (const uchar *)hn, (const uchar *)hv, hvl, &p, end))",
          "825:             return false;",
          "826:         n = p - buffer;",
          "827:         if (n>0)",
          "828:             Jsi_DSAppendLen(hStr, (char*)buffer, n);",
          "829:         p = buffer;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1185:     return JSI_OK;",
          "1186: }",
          "1188: int",
          "1189: jsi_ws_http_redirect(struct lws *wsi, int code, Jsi_DString *tStr,",
          "1190:                   unsigned char **p, unsigned char *end)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1195: static const char* jsi_ws_mtypes[] = {",
          "1196:     \"html\", \"text/html\", \"js\", \"application/x-javascript\",",
          "1197:     \"css\", \"text/css\", \"png\", \"image/png\", \"ico\", \"image/icon\",",
          "1198:     \"gif\", \"image/gif\", \"jpeg\", \"image/jpeg\",",
          "1199:     \"jpg\", \"image/jpeg\", \"svg\", \"image/svg+xml\",",
          "1200:     \"mpv\", \"video/x-matroska\", \"mkv\", \"video/x-matroska\",",
          "1201:     \"mp4\", \"video/mp4\", \"mpeg\", \"video/mpeg\", \"webm\", \"video/webm\",",
          "1202:     \"ogv\", \"video/ogg\", \"avi\", \"video/x-msvideo\",",
          "1203:     \"json\", \"application/json\", \"txt\", \"text/plain\",",
          "1204:     \"jsi\", \"application/x-javascript\", \"cssi\", \"text/css\",",
          "1205:     \"shtml\", \"text/html\",  \"scss\", \"text/css\", \"vtt\", \"text/vtt\",",
          "1206:     \"sjs\", \"application/x-javascript\",",
          "1207:     0, 0",
          "1208: };",
          "1210: void jsi_ws_loadMimeTypes(Jsi_Interp *interp, jsi_wsCmdObj *cmdPtr, bool add) {",
          "1211:     bool ex = (cmdPtr->mimeTypes!=NULL);",
          "1212:     if (ex && !add)",
          "1213:         return;",
          "1215:     if (!ex) {",
          "1216:         cmdPtr->mimeTypes = Jsi_ValueMakeObject(interp, NULL, NULL);",
          "1217:         Jsi_IncrRefCount(interp, cmdPtr->mimeTypes);",
          "1218:     }",
          "1219:     Jsi_Obj *obj = cmdPtr->mimeTypes->d.obj;",
          "1220:     int i;",
          "1221:     for (i=0; jsi_ws_mtypes[i]; i+=2)",
          "1222:         if (!ex || !Jsi_ValueObjLookup(interp, cmdPtr->mimeTypes, jsi_ws_mtypes[i], 1))",
          "1223:             Jsi_ObjInsert(interp, obj, jsi_ws_mtypes[i], Jsi_ValueNewStringConst(interp, jsi_ws_mtypes[i+1], -1), 0);",
          "1224: }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1364:         }",
          "1365:         Jsi_HashEntry *hPtr;",
          "1367:         if (cmdPtr->mimeTypes) {",
          "1369:             Jsi_Value *mVal = Jsi_ValueObjLookup(interp, cmdPtr->mimeTypes, ext+1, 1);",
          "1370:             if (mVal)",
          "1371:                 mime = Jsi_ValueString(interp, mVal, NULL);",
          "1372:         }",
          "1392:         }",
          "1394:         isSSI = jsi_wsIsSSIExt(interp, cmdPtr, pss, eext);",
          "",
          "[Removed Lines]",
          "1373:         if (!mime) {",
          "1374:             static const char* mtypes[] = {",
          "1375:                 \"html\", \"text/html\", \"js\", \"application/x-javascript\",",
          "1376:                 \"css\", \"text/css\", \"png\", \"image/png\", \"ico\", \"image/icon\",",
          "1377:                 \"gif\", \"image/gif\", \"jpeg\", \"image/jpeg\",",
          "1378:                 \"jpg\", \"image/jpeg\", \"svg\", \"image/svg+xml\",",
          "1379:                 \"json\", \"application/json\", \"txt\", \"text/plain\",",
          "1380:                 \"jsi\", \"application/x-javascript\", \"cssi\", \"text/css\",",
          "1381:                 \"shtml\", \"text/html\",  \"scss\", \"text/css\",",
          "1382:                 \"sjs\", \"application/x-javascript\",",
          "1383:                 0, 0",
          "1384:             };",
          "1385:             mime = \"text/html\";",
          "1386:             int i;",
          "1387:             for (i=0; mtypes[i]; i+=2)",
          "1388:                 if (tolower(*eext) == mtypes[i][0] && !Jsi_Strncasecmp(eext, mtypes[i], -1)) {",
          "1389:                     mime = mtypes[i+1];",
          "1390:                     break;",
          "1391:                 }",
          "",
          "[Added Lines]",
          "1405:         if (!cmdPtr->mimeTypes) {",
          "1406:             int i;",
          "1407:             for (i=0; jsi_ws_mtypes[i]; i+=2)",
          "1408:                 if (tolower(*eext) == jsi_ws_mtypes[i][0] && !Jsi_Strncasecmp(eext, jsi_ws_mtypes[i], -1)) {",
          "1409:                     mime = jsi_ws_mtypes[i+1];",
          "1410:                     break;",
          "1411:                 }",
          "1412:         }",
          "1418:         if (!mime && cmdPtr->mimeLoadFunc && !cmdPtr->mimeFuncCalled) {",
          "1419:             cmdPtr->mimeFuncCalled = 1;",
          "1420:             jsi_ws_loadMimeTypes(interp, cmdPtr, 0);",
          "1421:             Jsi_FunctionInvokeBool(interp, cmdPtr->mimeLoadFunc, Jsi_ValueNewObj(interp, cmdPtr->fobj));",
          "1422:             Jsi_Value *mVal = Jsi_ValueObjLookup(interp, cmdPtr->mimeTypes, ext+1, 1);",
          "1423:             if (mVal)",
          "1424:                 mime = Jsi_ValueString(interp, mVal, NULL);",
          "1426:         if (!mime)",
          "1427:             mime = \"text/html\";",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2396:     Jsi_Value *opts = Jsi_ValueArrayIndex(interp, args, 0);",
          "2397:     if (cmdPtr->noConfig && opts && !Jsi_ValueIsString(interp, opts))",
          "2398:         return Jsi_LogError(\"WebSocket conf() is disabled for set\");",
          "2399:     return Jsi_OptionsConf(interp, WSOptions, cmdPtr, opts, ret, 0);",
          "2401: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2434:     jsi_ws_loadMimeTypes(interp, cmdPtr, 0);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2994:         jsi_wswebsocketObjFree(interp, cmdPtr);",
          "2995:         return JSI_ERROR;",
          "2996:     }",
          "2997:     if (!cmdPtr->udata) {",
          "2998:         cmdPtr->udata = Jsi_ValueNewObj(interp, NULL);",
          "2999:         Jsi_IncrRefCount(interp, cmdPtr->udata);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3033:     if (cmdPtr->mimeTypes)",
          "3034:         jsi_ws_loadMimeTypes(interp, cmdPtr, 1);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "3143: #ifdef LWS_LIBRARY_VERSION_NUMBER",
          "3144:     Jsi_JSONParseFmt(interp, &cmdPtr->version, \"{libVer:\\\"%s\\\", hdrVer:\\\"%s\\\", hdrNum:%d, pkgVer:%d}\",",
          "3145:         (char *)lws_get_library_version(), LWS_LIBRARY_VERSION, LWS_LIBRARY_VERSION_NUMBER, jsi_WsPkgVersion);",
          "3146: #endif",
          "3147:     return JSI_OK;",
          "3148: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3185:     Jsi_IncrRefCount(interp, cmdPtr->version);",
          "",
          "---------------"
        ],
        "tools/protos.jsi||tools/protos.jsi": [
          "File: tools/protos.jsi -> tools/protos.jsi"
        ],
        "www/reference.wiki||www/reference.wiki": [
          "File: www/reference.wiki -> www/reference.wiki",
          "--- Hunk 1 ---",
          "[Context before]",
          "873: <tr><td>nocache</td><td><i>BOOL</i></td><td>Disable query cache.</td><td><i></i></td></tr>",
          "874: <tr><td>noNamedParams</td><td><i>BOOL</i></td><td>Disable translating sql to support named params.</td><td><i></i></td></tr>",
          "875: <tr><td>nullvalue</td><td><i>STRKEY</i></td><td>Null string output (for non-json mode).</td><td><i></i></td></tr>",
          "878: <tr><td>paramVar</td><td><i>ARRAY</i></td><td>Array var to use for parameters.</td><td><i></i></td></tr>",
          "879: <tr><td>prefetch</td><td><i>BOOL</i></td><td>Let client library cache entire results.</td><td><i></i></td></tr>",
          "880: <tr><td>separator</td><td><i>STRKEY</i></td><td>Separator string (for csv and text mode).</td><td><i></i></td></tr>",
          "",
          "[Removed Lines]",
          "876: <tr><td>objName</td><td><i>STRKEY</i></td><td>Object var name for CREATE/INSERT: replaces %s with fields in query.</td><td><i></i></td></tr>",
          "877: <tr><td>objOpts</td><td><i>ARRAY</i></td><td>Options for objName. (zero or more of: <b>getSql</b>, <b>noTypes</b>, <b>noDefaults</b>, <b>nullDefaults</b>)</td><td><i></i></td></tr>",
          "",
          "[Added Lines]",
          "876: <tr><td>obj</td><td><i><a href='#objOptions'>options</a></i></td><td>Options for object.</td><td><i></i></td></tr>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "899: <tr><td>nocache</td><td><i>BOOL</i></td><td>Disable query cache.</td><td><i></i></td></tr>",
          "900: <tr><td>noNamedParams</td><td><i>BOOL</i></td><td>Disable translating sql to support named params.</td><td><i></i></td></tr>",
          "901: <tr><td>nullvalue</td><td><i>STRKEY</i></td><td>Null string output (for non-json mode).</td><td><i></i></td></tr>",
          "904: <tr><td>paramVar</td><td><i>ARRAY</i></td><td>Array var to use for parameters.</td><td><i></i></td></tr>",
          "905: <tr><td>prefetch</td><td><i>BOOL</i></td><td>Let client library cache entire results.</td><td><i></i></td></tr>",
          "906: <tr><td>separator</td><td><i>STRKEY</i></td><td>Separator string (for csv and text mode).</td><td><i></i></td></tr>",
          "",
          "[Removed Lines]",
          "902: <tr><td>objName</td><td><i>STRKEY</i></td><td>Object var name for CREATE/INSERT: replaces %s with fields in query.</td><td><i></i></td></tr>",
          "903: <tr><td>objOpts</td><td><i>ARRAY</i></td><td>Options for objName. (zero or more of: <b>getSql</b>, <b>noTypes</b>, <b>noDefaults</b>, <b>nullDefaults</b>)</td><td><i></i></td></tr>",
          "",
          "[Added Lines]",
          "901: <tr><td>obj</td><td><i><a href='#objOptions'>options</a></i></td><td>Options for object.</td><td><i></i></td></tr>",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "909: <tr><td>values</td><td><i>ARRAY</i></td><td>Values for ? bind parameters.</td><td><i></i></td></tr>",
          "910: <tr><td>width</td><td><i>CUSTOM</i></td><td>In column mode, set column widths.</td><td><i></i></td></tr>",
          "911: </table>",
          "912: <a name=\"MySqlend\"></a>",
          "913: <p><a href=\"#TOC\">Return to top</a>",
          "914: <a name=\"Number\"></a>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "912: <a name=\"objOptions\"></a>",
          "913: <h2>Options for \"obj\"</h2>",
          "914: <table border=\"1\" class=\"optstbl table\">",
          "915: <tr><th>Option</th> <th>Type</th> <th>Description</th><th>Flags</th></tr>",
          "916: <tr><td>name</td><td><i>STRKEY</i></td><td>Name of object var.</td><td><i></i></td></tr>",
          "917: <tr><td>omit</td><td><i>ARRAY</i></td><td>Members in object to disregard.</td><td><i></i></td></tr>",
          "918: <tr><td>getSql</td><td><i>BOOL</i></td><td>Return expanded SQL without evaluating it.</td><td><i></i></td></tr>",
          "919: <tr><td>defaultNull</td><td><i>BOOL</i></td><td>Create with DEFAULT NULL.</td><td><i></i></td></tr>",
          "920: <tr><td>noChecks</td><td><i>BOOL</i></td><td>Create with no CHECK constraints.</td><td><i></i></td></tr>",
          "921: <tr><td>noDefaults</td><td><i>BOOL</i></td><td>Create with no defaults.</td><td><i></i></td></tr>",
          "922: <tr><td>noTypes</td><td><i>BOOL</i></td><td>Create with no types.</td><td><i></i></td></tr>",
          "923: </table>",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1229: <tr><td>mode</td><td><i>STRKEY</i></td><td>Set output mode of returned data. (one of: <b>rows</b>, <b>arrays</b>, <b>array1d</b>, <b>list</b>, <b>column</b>, <b>json</b>, <b>json2</b>, <b>html</b>, <b>csv</b>, <b>insert</b>, <b>line</b>, <b>tabs</b>, <b>none</b>)</td><td><i></i></td></tr>",
          "1230: <tr><td>nocache</td><td><i>BOOL</i></td><td>Disable query cache.</td><td><i></i></td></tr>",
          "1231: <tr><td>nullvalue</td><td><i>STRKEY</i></td><td>Null string output (for non js/json mode).</td><td><i></i></td></tr>",
          "1234: <tr><td>retChanged</td><td><i>BOOL</i></td><td>Query returns value of sqlite3_changed().</td><td><i></i></td></tr>",
          "1235: <tr><td>separator</td><td><i>STRKEY</i></td><td>Separator string (for csv and text mode).</td><td><i></i></td></tr>",
          "1236: <tr><td>typeCheck</td><td><i>STRKEY</i></td><td>Type check mode (warn). (one of: <b>convert</b>, <b>warn</b>, <b>error</b>, <b>disable</b>)</td><td><i></i></td></tr>",
          "",
          "[Removed Lines]",
          "1232: <tr><td>objName</td><td><i>STRKEY</i></td><td>Object var name for CREATE/INSERT: replaces %s with fields in query.</td><td><i></i></td></tr>",
          "1233: <tr><td>objOpts</td><td><i>ARRAY</i></td><td>Options for objName. (zero or more of: <b>getSql</b>, <b>noTypes</b>, <b>noDefaults</b>, <b>nullDefaults</b>, <b>noChecks</b>)</td><td><i></i></td></tr>",
          "",
          "[Added Lines]",
          "1244: <tr><td>obj</td><td><i><a href='#objOptions'>options</a></i></td><td>Options for object.</td><td><i></i></td></tr>",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1268: <tr><td>mode</td><td><i>STRKEY</i></td><td>Set output mode of returned data. (one of: <b>rows</b>, <b>arrays</b>, <b>array1d</b>, <b>list</b>, <b>column</b>, <b>json</b>, <b>json2</b>, <b>html</b>, <b>csv</b>, <b>insert</b>, <b>line</b>, <b>tabs</b>, <b>none</b>)</td><td><i></i></td></tr>",
          "1269: <tr><td>nocache</td><td><i>BOOL</i></td><td>Disable query cache.</td><td><i></i></td></tr>",
          "1270: <tr><td>nullvalue</td><td><i>STRKEY</i></td><td>Null string output (for non js/json mode).</td><td><i></i></td></tr>",
          "1273: <tr><td>retChanged</td><td><i>BOOL</i></td><td>Query returns value of sqlite3_changed().</td><td><i></i></td></tr>",
          "1274: <tr><td>separator</td><td><i>STRKEY</i></td><td>Separator string (for csv and text mode).</td><td><i></i></td></tr>",
          "1275: <tr><td>typeCheck</td><td><i>STRKEY</i></td><td>Type check mode (warn). (one of: <b>convert</b>, <b>warn</b>, <b>error</b>, <b>disable</b>)</td><td><i></i></td></tr>",
          "",
          "[Removed Lines]",
          "1271: <tr><td>objName</td><td><i>STRKEY</i></td><td>Object var name for CREATE/INSERT: replaces %s with fields in query.</td><td><i></i></td></tr>",
          "1272: <tr><td>objOpts</td><td><i>ARRAY</i></td><td>Options for objName. (zero or more of: <b>getSql</b>, <b>noTypes</b>, <b>noDefaults</b>, <b>nullDefaults</b>, <b>noChecks</b>)</td><td><i></i></td></tr>",
          "",
          "[Added Lines]",
          "1282: <tr><td>obj</td><td><i><a href='#objOptions'>options</a></i></td><td>Options for object.</td><td><i></i></td></tr>",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1687: <tr><td>noWebsock</td><td><i>BOOL</i></td><td>Serve html, but disallow websocket upgrade.</td><td><i>initOnly</i></td></tr>",
          "1688: <tr><td>noWarn</td><td><i>BOOL</i></td><td>Quietly ignore file related errors.</td><td><i></i></td></tr>",
          "1689: <tr><td>onAuth</td><td><i>FUNC</i></td><td>Function to call for http basic authentication. @function(ws:userobj, id:number, url:string, userpass:string)</td><td><i></i></td></tr>",
          "1691: <tr><td>onCloseLast</td><td><i>FUNC</i></td><td>Function to call when last websock connection closes. On object delete arg is null. @function(ws:userobj|null)</td><td><i></i></td></tr>",
          "1692: <tr><td>onFilter</td><td><i>FUNC</i></td><td>Function to call on a new connection: return false to kill connection. @function(ws:userobj, id:number, url:string, ishttp:boolean)</td><td><i></i></td></tr>",
          "1693: <tr><td>onGet</td><td><i>FUNC</i></td><td>Function to call to server handle http-get. @function(ws:userobj, id:number, url:string, query:array)</td><td><i></i></td></tr>",
          "",
          "[Removed Lines]",
          "1690: <tr><td>onClose</td><td><i>FUNC</i></td><td>Function to call when the websocket connection closes. @function(ws:userobj|null, id:number)</td><td><i></i></td></tr>",
          "",
          "[Added Lines]",
          "1700: <tr><td>onClose</td><td><i>FUNC</i></td><td>Function to call when the websocket connection closes. @function(ws:userobj|null, id:number, isError:boolean)</td><td><i></i></td></tr>",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1730: <tr><td>headers</td><td><i>ARRAY</i></td><td>Headers to send to browser on connection: name/value pairs.</td><td><i></i></td></tr>",
          "1731: <tr><td>isWebsock</td><td><i>BOOL</i></td><td>Is a websocket connection.</td><td><i></i></td></tr>",
          "1732: <tr><td>key</td><td><i>STRBUF</i></td><td>String key lookup in ids command for SSI echo ${#}.</td><td><i>readOnly</i></td></tr>",
          "1734: <tr><td>onGet</td><td><i>FUNC</i></td><td>Function to call to server handle http-get. @function(ws:userobj, id:number, url:string, query:array)</td><td><i></i></td></tr>",
          "1735: <tr><td>onUnknown</td><td><i>FUNC</i></td><td>Function to call to serve out content when no file exists. @function(ws:userobj, id:number, url:string, args:array)</td><td><i></i></td></tr>",
          "1736: <tr><td>onRecv</td><td><i>FUNC</i></td><td>Function to call when websock data recieved. @function(ws:userobj, id:number, data:string)</td><td><i></i></td></tr>",
          "",
          "[Removed Lines]",
          "1733: <tr><td>onClose</td><td><i>FUNC</i></td><td>Function to call when the websocket connection closes. @function(ws:userobj|null, id:number, boolean:ok)</td><td><i></i></td></tr>",
          "",
          "[Added Lines]",
          "1743: <tr><td>onClose</td><td><i>FUNC</i></td><td>Function to call when the websocket connection closes. @function(ws:userobj|null, id:number, isError:boolean)</td><td><i></i></td></tr>",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2734645bfc4b245550e864db5eb462ce03caee46",
      "candidate_info": {
        "commit_hash": "2734645bfc4b245550e864db5eb462ce03caee46",
        "repo": "pcmacdon/jsish",
        "commit_url": "https://github.com/pcmacdon/jsish/commit/2734645bfc4b245550e864db5eb462ce03caee46",
        "files": [
          "src/jsi.h",
          "src/jsiEval.c",
          "tools/protos.jsi"
        ],
        "message": "Release \"3.0.17\": workaround crash when using \"x=assert(...)\", etc. Still needs to warn user/avoid memory leak.\n\nFossilOrigin-Name: 0f81e6a593d206d94de23aa801de2f00e6d8745e74cb4851be6df9889a6b9641",
        "before_after_code_files": [
          "src/jsi.h||src/jsi.h",
          "src/jsiEval.c||src/jsiEval.c",
          "tools/protos.jsi||tools/protos.jsi"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/jsi.h||src/jsi.h",
            "tools/protos.jsi||tools/protos.jsi"
          ],
          "candidate": [
            "src/jsi.h||src/jsi.h",
            "tools/protos.jsi||tools/protos.jsi"
          ]
        }
      },
      "candidate_diff": {
        "src/jsi.h||src/jsi.h": [
          "File: src/jsi.h -> src/jsi.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #define JSI_VERSION_MAJOR   3",
          "6: #define JSI_VERSION_MINOR   0",
          "9: #define JSI_VERSION (JSI_VERSION_MAJOR + ((Jsi_Number)JSI_VERSION_MINOR/100.0) + ((Jsi_Number)JSI_VERSION_RELEASE/10000.0))",
          "",
          "[Removed Lines]",
          "7: #define JSI_VERSION_RELEASE 16",
          "",
          "[Added Lines]",
          "7: #define JSI_VERSION_RELEASE 17",
          "",
          "---------------"
        ],
        "src/jsiEval.c||src/jsiEval.c": [
          "File: src/jsiEval.c -> src/jsiEval.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1059:     while(ip < end && rc == JSI_OK) {",
          "1060:         int plop = ip->op;",
          "1062:         if (ip->logflag) { // Mask out LogDebug, etc if not enabled.",
          "1063:             interp->curIp = ip;",
          "1064:             switch (ip->logflag) {",
          "1065:                 case jsi_Oplf_assert:",
          "1072:                     break;",
          "1073:                 case jsi_Oplf_debug:",
          "1080:                     break;",
          "1081:                 case jsi_Oplf_test:",
          "1088:                     break;",
          "1089:                 case jsi_Oplf_trace:",
          "1096:                     break;",
          "1097:                 default:",
          "1098:                     break;",
          "",
          "[Removed Lines]",
          "1066:                     if (!interp->asserts) {",
          "1067:                         ip++;",
          "1068:                         if (ip->logflag != jsi_Oplf_assert && (ip->op == OP_POP || ip->op == OP_RET))",
          "1069:                             ip++;",
          "1070:                         continue;",
          "1071:                     }",
          "1074:                     if (!interp->logOpts.Debug && !(interp->framePtr->logflag &(1<<jsi_Oplf_debug))) {",
          "1075:                         ip++;",
          "1076:                         if (ip->logflag != jsi_Oplf_debug && (ip->op == OP_POP || ip->op == OP_RET))",
          "1077:                             ip++;",
          "1078:                         continue;",
          "1079:                     }",
          "1082:                     if (!interp->logOpts.Test && !(interp->framePtr->logflag &(1<<jsi_Oplf_test))) {",
          "1083:                         ip++;",
          "1084:                         if (ip->logflag != jsi_Oplf_test && (ip->op == OP_POP || ip->op == OP_RET))",
          "1085:                             ip++;",
          "1086:                         continue;",
          "1087:                     }",
          "1090:                     if (!interp->logOpts.Trace && !(interp->framePtr->logflag &(1<<jsi_Oplf_trace))) {",
          "1091:                         ip++;",
          "1092:                         if (ip->logflag != jsi_Oplf_trace && (ip->op == OP_POP || ip->op == OP_RET))",
          "1093:                             ip++;",
          "1094:                         continue;",
          "1095:                     }",
          "",
          "[Added Lines]",
          "1062: #define _JSI_BI_OP_SKIP_SUB(n) {\\",
          "1063:     ip++;\\",
          "1064:     if (ip->logflag != n && (ip->op == OP_POP || ip->op == OP_RET || ip->op == OP_ASSIGN))\\",
          "1065:         ip++;\\",
          "1066:     continue;\\",
          "1067: }",
          "1068: #define _JSI_BI_OP_SKIP(N,n)  if (!interp->logOpts.N && !(interp->framePtr->logflag &(1<<n))) _JSI_BI_OP_SKIP_SUB(n)",
          "1074:                     if (!interp->asserts) { _JSI_BI_OP_SKIP_SUB(jsi_Oplf_assert) }",
          "1077:                     _JSI_BI_OP_SKIP(Debug, jsi_Oplf_debug)",
          "1080:                     _JSI_BI_OP_SKIP(Test, jsi_Oplf_test)",
          "1083:                     _JSI_BI_OP_SKIP(Trace, jsi_Oplf_trace)",
          "",
          "---------------"
        ],
        "tools/protos.jsi||tools/protos.jsi": [
          "File: tools/protos.jsi -> tools/protos.jsi"
        ]
      }
    },
    {
      "candidate_hash": "9cd7078d7edcec9cf5822f52cd325f999b69b727",
      "candidate_info": {
        "commit_hash": "9cd7078d7edcec9cf5822f52cd325f999b69b727",
        "repo": "pcmacdon/jsish",
        "commit_url": "https://github.com/pcmacdon/jsish/commit/9cd7078d7edcec9cf5822f52cd325f999b69b727",
        "files": [
          "src/jsi.h",
          "src/jsiCmds.c",
          "src/jsiCode.c",
          "src/jsiEval.c",
          "src/jsiInt.h",
          "src/jsiInterp.c",
          "src/jsiProto.c",
          "src/parser.y"
        ],
        "message": "Release \"3.0.48\": add Object.assign, export default */+, and object shortform functions.\n\nFossilOrigin-Name: b27bc08882fc2d649369caffd589b41fcfe7bc659b2a184353b2f4dfdf48076d",
        "before_after_code_files": [
          "src/jsi.h||src/jsi.h",
          "src/jsiCmds.c||src/jsiCmds.c",
          "src/jsiCode.c||src/jsiCode.c",
          "src/jsiEval.c||src/jsiEval.c",
          "src/jsiInt.h||src/jsiInt.h",
          "src/jsiInterp.c||src/jsiInterp.c",
          "src/jsiProto.c||src/jsiProto.c",
          "src/parser.y||src/parser.y"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/jsi.h||src/jsi.h",
            "src/jsiInt.h||src/jsiInt.h",
            "src/jsiInterp.c||src/jsiInterp.c"
          ],
          "candidate": [
            "src/jsi.h||src/jsi.h",
            "src/jsiInt.h||src/jsiInt.h",
            "src/jsiInterp.c||src/jsiInterp.c"
          ]
        }
      },
      "candidate_diff": {
        "src/jsi.h||src/jsi.h": [
          "File: src/jsi.h -> src/jsi.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #define JSI_VERSION_MAJOR   3",
          "6: #define JSI_VERSION_MINOR   0",
          "9: #define JSI_VERSION (JSI_VERSION_MAJOR + ((Jsi_Number)JSI_VERSION_MINOR/100.0) + ((Jsi_Number)JSI_VERSION_RELEASE/10000.0))",
          "",
          "[Removed Lines]",
          "7: #define JSI_VERSION_RELEASE 47",
          "",
          "[Added Lines]",
          "7: #define JSI_VERSION_RELEASE 48",
          "",
          "---------------"
        ],
        "src/jsiCmds.c||src/jsiCmds.c": [
          "File: src/jsiCmds.c -> src/jsiCmds.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3497:     return rc;",
          "3498: }",
          "3502: {",
          "3509:     Jsi_ValueMakeObject(interp, ret, NULL);",
          "3510:     Jsi_Value *cs = interp->framePtr->incsc;",
          "3511:     Jsi_Obj *nobj = (*ret)->d.obj;",
          "",
          "[Removed Lines]",
          "3500: static Jsi_RC InfoLocalsCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "3501:     Jsi_Value **ret, Jsi_Func *funcPtr)",
          "3505:     Jsi_Value *arg = Jsi_ValueArrayIndex(interp, args, 0);",
          "3506:     bool varsOnly = 0;",
          "3507:     if (arg)",
          "3508:         Jsi_ValueGetBoolean(interp, arg, &varsOnly);",
          "",
          "[Added Lines]",
          "3500: Jsi_RC jsi_InfoLocalsCmd(Jsi_Interp *interp, bool funcs, bool vars, Jsi_Value **ret)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3516:         Jsi_Value *v = (Jsi_Value*)Jsi_TreeValueGet(tPtr);",
          "3517:         if (v==NULL) continue;",
          "3518:         if (Jsi_ValueIsFunction(interp, v)) {",
          "3520:         } else {",
          "3522:         }",
          "3524:         const char* key = (char*)Jsi_TreeKeyGet(tPtr);",
          "",
          "[Removed Lines]",
          "3519:             if (varsOnly) continue;",
          "3521:             if (arg && !varsOnly) continue;",
          "",
          "[Added Lines]",
          "3514:             if (!funcs) continue;",
          "3516:             if (!vars) continue;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3529:     return JSI_OK;",
          "3530: }",
          "3532: static Jsi_RC InfoCompletionsCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "3533:     Jsi_Value **ret, Jsi_Func *funcPtr)",
          "3534: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3527: static Jsi_RC InfoLocalsCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "3528:     Jsi_Value **ret, Jsi_Func *funcPtr)",
          "3529: {",
          "3530:     Jsi_Value *arg = Jsi_ValueArrayIndex(interp, args, 0);",
          "3531:     bool vars = 1, funcs = 1;",
          "3532:     if (arg) {",
          "3533:         Jsi_ValueGetBoolean(interp, arg, &funcs);",
          "3534:         if (funcs)",
          "3535:             vars = 0;",
          "3536:     }",
          "3537:     return jsi_InfoLocalsCmd(interp, funcs, vars, ret);",
          "3538: }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "4885:     { \"execZip\",    InfoExecZipCmd,     0,  0, \"\", .help=\"If executing a .zip file, return file name\", .retType=(uint)JSI_TT_STRING|JSI_TT_VOID },",
          "4886:     { \"files\",      InfoFilesCmd,       0,  0, \"\", .help=\"Return list of all sourced files\", .retType=(uint)JSI_TT_ARRAY },",
          "4887:     { \"funcs\",      InfoFuncsCmd,       0,  1, \"arg:string|regexp|function|object=void\", .help=\"Return details or list of matching functions\", .retType=(uint)JSI_TT_ARRAY|JSI_TT_OBJECT },",
          "4889:     { \"interp\",     jsi_InterpInfo,     0,  1, \"interp:userobj=void\", .help=\"Return info on given or current interp\", .retType=(uint)JSI_TT_OBJECT },",
          "4890:     { \"isMain\",     InfoIsMainCmd,      0,  0, \"\", .help=\"Return true if current script was the main script invoked from command-line\", .retType=(uint)JSI_TT_BOOLEAN },",
          "4891:     { \"keywords\",   InfoKeywordsCmd,    0,  2, \"isSql=false, name:string=void\", .help=\"Return/lookup reserved keyword\", .retType=(uint)JSI_TT_ARRAY|JSI_TT_BOOLEAN },",
          "4892:     { \"level\",      InfoLevelCmd,       0,  1, \"level:number=void\", .help=\"Return current level or details of a call-stack frame\", .retType=(uint)JSI_TT_ARRAY|JSI_TT_OBJECT|JSI_TT_NUMBER, .flags=0, .info=FN_infolevel },",
          "4893:     { \"lookup\",     InfoLookupCmd,      1,  1, \"name:string\", .help=\"Given string name, lookup and return value, eg: function\", .retType=(uint)JSI_TT_ANY },",
          "4894:     { \"methods\",    InfoMethodsCmd,     1,  1, \"val:string|regexp\", .help=\"Return functions and commands\", .retType=(uint)JSI_TT_ARRAY|JSI_TT_OBJECT },",
          "4895:     { \"named\",      InfoNamedCmd,       0,  1, \"name:string=void\", .help=\"Returns command names for builtin Objects, eg: 'File', 'Interp', sub-Object names, or the named object\", .retType=(uint)JSI_TT_ARRAY|JSI_TT_USEROBJ },",
          "",
          "[Removed Lines]",
          "4888:     { \"locals\",     InfoLocalsCmd,      0,  1, \"filter:boolean=void\", .help=\"Return locals; use filter=true/false just vars/functions\", .retType=(uint)JSI_TT_OBJECT },",
          "",
          "[Added Lines]",
          "4900:     { \"locals\",     InfoLocalsCmd,      0,  1, \"filter:boolean=void\", .help=\"Return locals; if filter=true/false omit vars/functions\", .retType=(uint)JSI_TT_OBJECT },",
          "",
          "---------------"
        ],
        "src/jsiCode.c||src/jsiCode.c": [
          "File: src/jsiCode.c -> src/jsiCode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "94:     \"EWITH\",",
          "95:     \"RESERVED\",",
          "96:     \"DEBUG\"",
          "97: };",
          "101: void jsi_FreeOpcodes(Jsi_OpCodes *ops) {",
          "102:     int i;",
          "",
          "[Removed Lines]",
          "99: static int jsiOpCodesCnt[3] = {0,0,0};",
          "",
          "[Added Lines]",
          "97:     \"EXPORT\"",
          "100: int jsiOpCodesCnt[4] = {0,0,0, (sizeof(jsi_op_names)/sizeof(jsi_op_names[0]))};",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "312:     jsi_FuncCallCheck(p,line,argc,1, name, NULL, argCodes); JSI_NEW_CODESLN(0,OP_NEWFCALL, argc);",
          "313: }",
          "314: static Jsi_OpCodes *code_ret(jsi_Pstate *p, jsi_Pline *line, int n) { JSI_NEW_CODESLN(0,OP_RET, n); }",
          "315: static Jsi_OpCodes *code_delete(int n) { JSI_NEW_CODES(0,OP_DELETE, n); }",
          "316: static Jsi_OpCodes *code_chthis(jsi_Pstate *p, jsi_Pline *line, int n) { JSI_NEW_CODESLN(0,OP_CHTHIS, n); }",
          "317: static Jsi_OpCodes *code_pop(int n) { JSI_NEW_CODES(0,OP_POP, n); }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "316: static Jsi_OpCodes *code_export(jsi_Pstate *p, jsi_Pline *line, int n) { JSI_NEW_CODESLN(0,OP_EXPORT, n); }",
          "",
          "---------------"
        ],
        "src/jsiEval.c||src/jsiEval.c": [
          "File: src/jsiEval.c -> src/jsiEval.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1056:     while(ip < end && rc == JSI_OK) {",
          "1057:         int plop = ip->op;",
          "1071:         if (ip->logidx) { // Mask out LogDebug, etc if not enabled.",
          "1072:             uint oli = ip->logidx, logflag2 = jsi_GetLogFlag(interp, ip->logidx, NULL);",
          "1073:             interp->curIp = ip;",
          "",
          "[Removed Lines]",
          "1060:     ip++;\\",
          "1061:     if (ip->logflag != n)  {\\",
          "1062:         if (ip->op == OP_POP) ip++; \\",
          "1063:         else if (ip->op == OP_RET || ip->op == OP_ASSIGN) { \\",
          "1064:           rc = Jsi_LogError(\"invalid use of return/= here\"); \\",
          "1065:         ip++;\\",
          "1066:       }}\\",
          "1067:     continue;\\",
          "1068: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1077:                     ip++;",
          "1078:                 if (ip->op == OP_POP)",
          "1079:                     ip++;",
          "1081:                     rc = Jsi_LogError(\"invalid use of =/return here\");",
          "1082:                     ip++;",
          "1083:                 }",
          "",
          "[Removed Lines]",
          "1080:                 else if (ip->op == OP_RET || ip->op == OP_ASSIGN) {",
          "",
          "[Added Lines]",
          "1068:                 else if (ip->op == OP_RET || ip->op == OP_EXPORT || ip->op == OP_ASSIGN) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1744:                 }",
          "1745:                 break;",
          "1746:             }",
          "1747:             case OP_RET: {",
          "1748:                 if (fp->Sp>=1 && ip->data) {",
          "1749:                     jsiVarDeref(interp,1);",
          "1751:                 }",
          "1752:                 jsiPop(interp, (uintptr_t)ip->data);",
          "1753:                 interp->didReturn = 1;",
          "",
          "[Removed Lines]",
          "1750:                     Jsi_ValueMove(interp, vret, _jsi_TOP);",
          "",
          "[Added Lines]",
          "1735:             case OP_EXPORT:",
          "1736:                 if (!((ip+1) == end ||",
          "1737:                     (ip[1].op == OP_NOP && (ip+2) == end)))",
          "1738:                     Jsi_LogWarn(\"export is not the last statement\");",
          "1742:                     Jsi_Value *vtop = _jsi_TOP;",
          "1743:                     if (ip->op == OP_RET || !interp->framePtr->evalFuncPtr",
          "1744:                         || (vtop->vt != JSI_VT_NULL && vtop->vt != JSI_VT_UNDEF))",
          "1745:                         Jsi_ValueMove(interp, vret, vtop);",
          "1746:                     else {",
          "1747:                         jsi_InfoLocalsCmd(interp, 1, (vtop->vt == JSI_VT_UNDEF), &vret);",
          "1748:                     }",
          "",
          "---------------"
        ],
        "src/jsiInt.h||src/jsiInt.h": [
          "File: src/jsiInt.h -> src/jsiInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "434: } jsi_Eopcode;",
          "436: typedef struct jsi_OpCode {",
          "437:     jsi_Eopcode op;",
          "438:     void *data;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "437: extern int jsiOpCodesCnt[4];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1538: extern char *jsi_TrimStr(char *str);",
          "1539: extern bool jsi_ModBlacklisted(Jsi_Interp *interp, const char *mod);",
          "1540: extern bool jsi_FuncIsNoop(Jsi_Interp* interp, Jsi_Value *func);",
          "1542: typedef enum {",
          "1543:     _JSI_CDATA_INFO=0,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1544: extern Jsi_RC jsi_InfoLocalsCmd(Jsi_Interp *interp, bool funcsOnly, bool varsOnly, Jsi_Value **ret);",
          "",
          "---------------"
        ],
        "src/jsiInterp.c||src/jsiInterp.c": [
          "File: src/jsiInterp.c -> src/jsiInterp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1069: {",
          "1070:     Jsi_Interp* interp;",
          "1071:     Jsi_RC rc = JSI_OK;",
          "1072:     if (parent && parent->noSubInterps) {",
          "1073:         interp = parent;",
          "1074:         Jsi_LogError(\"subinterps disallowed\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1072:     assert(jsiOpCodesCnt[3]==OP_LASTOP);",
          "",
          "---------------"
        ],
        "src/jsiProto.c||src/jsiProto.c": [
          "File: src/jsiProto.c -> src/jsiProto.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "520:     return JSI_OK;",
          "521: }",
          "523: #if (JSI_HAS___PROTO__==1)",
          "524: static Jsi_RC jsi_GetPrototypeOfCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "525:     Jsi_Value **ret, Jsi_Func *funcPtr)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "523: static Jsi_RC ObjectAssignCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "524:     Jsi_Value **ret, Jsi_Func *funcPtr)",
          "525: {",
          "526:     if (_this->vt != JSI_VT_OBJECT || _this->d.obj->ot != JSI_OT_FUNCTION ||",
          "527:         _this->d.obj->d.fobj->func->callback != ObjectConstructor)",
          "528:         return Jsi_LogError(\"must call via Object.assign\");",
          "530:     Jsi_Value *v = Jsi_ValueArrayIndex(interp, args,0);",
          "531:     if (!v || v->vt != JSI_VT_OBJECT || v->d.obj->ot != JSI_OT_OBJECT)",
          "532:         return Jsi_LogError(\"arg1: expected object\");",
          "533:     Jsi_Obj *obj = v->d.obj;",
          "534:     Jsi_ValueMakeObject(interp, ret, obj);",
          "535:     int i, argc = Jsi_ValueGetLength(interp, args);",
          "536:     for (i=1; i<argc; i++) {",
          "537:         Jsi_TreeEntry *tPtr;",
          "538:         Jsi_TreeSearch search;",
          "539:         Jsi_Value *vs = Jsi_ValueArrayIndex(interp, args, i);",
          "540:         if (!vs || vs->vt != JSI_VT_OBJECT || vs->d.obj->ot != JSI_OT_OBJECT)",
          "541:             return Jsi_LogError(\"arg%d: expected object\", i+1);",
          "542:         for (tPtr = Jsi_TreeSearchFirst(vs->d.obj->tree, &search, 0, NULL);",
          "543:             tPtr; tPtr = Jsi_TreeSearchNext(&search)) {",
          "544:             Jsi_Value *v2 = (Jsi_Value *)Jsi_TreeValueGet(tPtr);",
          "545:             if (v2 && v2->f.bits.dontenum == 0)",
          "546:                 Jsi_ObjInsert(interp, obj, (const char *)Jsi_TreeKeyGet(tPtr), v2, 0);",
          "547:         }",
          "548:         Jsi_TreeSearchDone(&search);",
          "549:     }",
          "550:     return JSI_OK;",
          "551: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "698: static Jsi_CmdSpec objectCmds[] = {",
          "699: #ifndef __JSI_OMITDECL",
          "700:     { \"Object\",         ObjectConstructor,      0, 1,  \"val:object|function|null=void\", .help=\"Object constructor\", .retType=(uint)JSI_TT_OBJECT, .flags=JSI_CMD_IS_CONSTRUCTOR },",
          "701:     { \"create\",         ObjectCreateCmd,        1, 2, \"proto:null|object, properties:object=void\", .help=\"Create a new object with prototype object and properties\", .retType=(uint)JSI_TT_OBJECT },",
          "702: #if (JSI_HAS___PROTO__>0)",
          "703:     { \"getPrototypeOf\", jsi_GetPrototypeOfCmd,  1, 1, \"name:object|function\", .help=\"Return prototype of an object\", .retType=(uint)JSI_TT_OBJECT|JSI_TT_FUNCTION },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "731:     { \"assign\",         ObjectAssignCmd,        1, -1, \"obj:object,...\", .help=\"Return arg1 object with assigned values\", .retType=(uint)JSI_TT_OBJECT },",
          "",
          "---------------"
        ],
        "src/parser.y||src/parser.y": [
          "File: src/parser.y -> src/parser.y",
          "--- Hunk 1 ---",
          "[Context before]",
          "41: %destructor { } <str>",
          "45: %type <opcodes> fcall_exprs for_cond for_init for_statement func_expr func_statement func_statement_block if_statement item items iterstatement lvalue",
          "46: %type <opcodes> object objectident statement statements statement_or_empty switch_statement try_statement value vardec vardecs while_statement with_statement",
          "47: %type <scopes> args args_opt argsa arrowargs",
          "",
          "[Removed Lines]",
          "44: %type <opcodes> array commonstatement delete_statement do_statement expr expr_opt exprlist exprlist_opt itemident",
          "",
          "[Added Lines]",
          "44: %type <opcodes> array commonstatement delete_statement do_statement expr expr_opt exprlist exprlist_opt itemident itemfunc",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "155: objectident:",
          "156:     object { $$ = $1; }",
          "158:         Jsi_OpCodes *lval = code_push_index(pstate, &@1, $1, 0);",
          "159:         $$ = lval;",
          "160:         lval->lvalue_flag = 1;",
          "161:         lval->lvalue_name = $1;",
          "162:     }",
          "163: ;",
          "",
          "[Removed Lines]",
          "157:     | IDENTIFIER {",
          "",
          "[Added Lines]",
          "163:     | '*' {",
          "164:         $$ = code_push_null();",
          "165:     }",
          "166:     | '+' {",
          "167:         $$ = code_push_undef();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "180:     | ';'                   { $$ = code_nop(); }",
          "181:     | '{' statements '}'    { $$ = $2; }",
          "182:     | func_statement        { $$ = $1; }",
          "184: ;",
          "186: func_statement:",
          "",
          "[Removed Lines]",
          "183:     | EXPORT DEFAULT objectident { $$ = codes_join($3, code_ret(pstate, &@3, 1)); }",
          "",
          "[Added Lines]",
          "189:     | EXPORT DEFAULT objectident { $$ = codes_join($3, code_export(pstate, &@3, 1)); }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "815:     '{' items '}'   { $$ = codes_join($2, code_object(pstate, &@2, ($2)->expr_counter)); }",
          "816: ;",
          "818: itemident:",
          "820:         Jsi_OpCodes *lval = code_push_index(pstate, &@1, $1, 0);",
          "821:         lval->lvalue_flag = 1;",
          "822:         lval->lvalue_name = $1;",
          "",
          "[Removed Lines]",
          "819:     IDENTIFIER  {",
          "",
          "[Added Lines]",
          "824: itemfunc:",
          "825:     IDENTIFIER '(' args_opt ')' func_statement_block {",
          "826:         Jsi_OpCodes *lval = code_push_func(pstate, &@3, jsi_FuncMake(pstate, $3, $5, &@1, $1, 0));",
          "827:         lval->lvalue_flag = 1;",
          "828:         lval->lvalue_name = $1;",
          "829:         $$ = codes_join(code_push_string(pstate,&@1, $1), lval);",
          "830:         jsi_PstatePop(pstate);",
          "831:     }",
          "832: ;",
          "835:     itemfunc { $$ = $1; }",
          "836:     | IDENTIFIER  {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "aba08f26723780343aba70c2c1009eda1e18d39e",
      "candidate_info": {
        "commit_hash": "aba08f26723780343aba70c2c1009eda1e18d39e",
        "repo": "pcmacdon/jsish",
        "commit_url": "https://github.com/pcmacdon/jsish/commit/aba08f26723780343aba70c2c1009eda1e18d39e",
        "files": [
          "Configs/make_devel.conf",
          "Makefile",
          "lws/Makefile",
          "src/jsi.h",
          "src/jsiWebSocket.c",
          "tools/protos.jsi"
        ],
        "message": "Release \"3.0.24\": switch from libwebsocket to lws.\n\nFossilOrigin-Name: 744e7806cafdf1ada5625983a525d064af31cd482cc2d69f1d08fefff027832f",
        "before_after_code_files": [
          "Configs/make_devel.conf||Configs/make_devel.conf",
          "src/jsi.h||src/jsi.h",
          "src/jsiWebSocket.c||src/jsiWebSocket.c",
          "tools/protos.jsi||tools/protos.jsi"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/jsi.h||src/jsi.h",
            "tools/protos.jsi||tools/protos.jsi"
          ],
          "candidate": [
            "src/jsi.h||src/jsi.h",
            "tools/protos.jsi||tools/protos.jsi"
          ]
        }
      },
      "candidate_diff": {
        "Configs/make_devel.conf||Configs/make_devel.conf": [
          "File: Configs/make_devel.conf -> Configs/make_devel.conf",
          "--- Hunk 1 ---",
          "[Context before]",
          "11: JSI__LOAD=1",
          "12: JSI__MATH=1",
          "13: JSI__MD5=1",
          "14: JSI__READLINE=1",
          "15: JSI__SHA1=1",
          "16: JSI__SHA256=1",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14: JSI__MINIZ=0",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "36: XCPREFIX=",
          "37: BUILDMODS=",
          "40: MODFLAGS=",
          "42: # command: ./configure --ext=+sqlite,websocket,mysql --label=Devel --opt=+sanitize,memdebug",
          "",
          "[Removed Lines]",
          "39: PROGFLAGS=  -DJSI__BASE64=1 -DJSI__CDATA=1 -DJSI__DEBUG=1 -DJSI__ENCRYPT=1 -DJSI__EVENT=1 -DJSI__FILESYS=1 -DJSI__INFO=1 -DJSI__LOAD=1 -DJSI__MATH=1 -DJSI__MD5=1 -DJSI__READLINE=1 -DJSI__SHA1=1 -DJSI__SHA256=1 -DJSI__SIGNAL=1 -DJSI__STUBS=1 -DJSI__THREADS=1 -DJSI__ZVFS=1 -DJSI__MEMDEBUG=1 -DJSI__REGEX=0 -DJSI__SANITIZE=1 -DJSI__SOCKET=1 -DJSI__SQLITE=1 -DJSI__WEBSOCKET=1 -DJSI__SQLITE=1 -DJSI__WEBSOCKET=1 -DJSI__MYSQL=1",
          "",
          "[Added Lines]",
          "40: PROGFLAGS=  -DJSI__BASE64=1 -DJSI__CDATA=1 -DJSI__DEBUG=1 -DJSI__ENCRYPT=1 -DJSI__EVENT=1 -DJSI__FILESYS=1 -DJSI__INFO=1 -DJSI__LOAD=1 -DJSI__MATH=1 -DJSI__MD5=1 -DJSI__READLINE=1 -DJSI__SHA1=1 -DJSI__SHA256=1 -DJSI__SIGNAL=1 -DJSI__STUBS=1 -DJSI__THREADS=1 -DJSI__ZVFS=1 -DJSI__MEMDEBUG=1 -DJSI__MINIZ=0 -DJSI__REGEX=0 -DJSI__SANITIZE=1 -DJSI__SOCKET=1 -DJSI__SQLITE=1 -DJSI__WEBSOCKET=1 -DJSI__SQLITE=1 -DJSI__WEBSOCKET=1 -DJSI__MYSQL=1",
          "",
          "---------------"
        ],
        "src/jsi.h||src/jsi.h": [
          "File: src/jsi.h -> src/jsi.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #define JSI_VERSION_MAJOR   3",
          "6: #define JSI_VERSION_MINOR   0",
          "9: #define JSI_VERSION (JSI_VERSION_MAJOR + ((Jsi_Number)JSI_VERSION_MINOR/100.0) + ((Jsi_Number)JSI_VERSION_RELEASE/10000.0))",
          "",
          "[Removed Lines]",
          "7: #define JSI_VERSION_RELEASE 23",
          "",
          "[Added Lines]",
          "7: #define JSI_VERSION_RELEASE 24",
          "",
          "---------------"
        ],
        "src/jsiWebSocket.c||src/jsiWebSocket.c": [
          "File: src/jsiWebSocket.c -> src/jsiWebSocket.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "53: #include <signal.h>",
          "58: static const int jsi_WsPkgVersion = 2;",
          "",
          "[Removed Lines]",
          "55: #include <libwebsockets.h>",
          "",
          "[Added Lines]",
          "55: #include <liblws.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1216:         cmdPtr->mimeTypes = Jsi_ValueMakeObject(interp, NULL, NULL);",
          "1217:         Jsi_IncrRefCount(interp, cmdPtr->mimeTypes);",
          "1218:     }",
          "1220:     int i;",
          "1221:     for (i=0; jsi_ws_mtypes[i]; i+=2)",
          "1222:         if (!ex || !Jsi_ValueObjLookup(interp, cmdPtr->mimeTypes, jsi_ws_mtypes[i], 1))",
          "",
          "[Removed Lines]",
          "1219:     Jsi_Obj *obj = cmdPtr->mimeTypes->d.obj;",
          "",
          "[Added Lines]",
          "1219:     Jsi_Obj *obj = Jsi_ValueGetObj(interp, cmdPtr->mimeTypes);",
          "",
          "---------------"
        ],
        "tools/protos.jsi||tools/protos.jsi": [
          "File: tools/protos.jsi -> tools/protos.jsi"
        ]
      }
    },
    {
      "candidate_hash": "658fb58e98c50be7cda071a7c823d608cbed7f61",
      "candidate_info": {
        "commit_hash": "658fb58e98c50be7cda071a7c823d608cbed7f61",
        "repo": "pcmacdon/jsish",
        "commit_url": "https://github.com/pcmacdon/jsish/commit/658fb58e98c50be7cda071a7c823d608cbed7f61",
        "files": [
          "lib/Websrv.jsi",
          "md/Reference.md",
          "src/jsiWebSocket.c",
          "www/reference.wiki"
        ],
        "message": "Release \"3.0.22\": WebSocket mime typess. \"\n\nFossilOrigin-Name: 88bffd5611b69403c01a219fbc32a2c93fa2d759a5a45c8436643158581a7878",
        "before_after_code_files": [
          "lib/Websrv.jsi||liWebsrv.jsi",
          "src/jsiWebSocket.c||src/jsiWebSocket.c",
          "www/reference.wiki||www/reference.wiki"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "www/reference.wiki||www/reference.wiki"
          ],
          "candidate": [
            "www/reference.wiki||www/reference.wiki"
          ]
        }
      },
      "candidate_diff": {
        "lib/Websrv.jsi||liWebsrv.jsi": [
          "File: lib/Websrv.jsi -> liWebsrv.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "230:         return true;",
          "231:     }",
          "233:     function OpenBrowser(url:string, anchor:string, query:string) {",
          "234:         var prog = self.browser;",
          "235:         var browsers = {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "387:             onFilter:WsFilter,",
          "388:             port:self.port,",
          "389:             rootdir:self.rootdir,",
          "391:         };",
          "392:         switch (self.mode) {",
          "393:             case 'admin':",
          "",
          "[Removed Lines]",
          "390:             urlPrefix:self.urlPrefix",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/jsiWebSocket.c||src/jsiWebSocket.c": [
          "File: src/jsiWebSocket.c -> src/jsiWebSocket.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "120:     Jsi_Hash *pssTable, *handlers, *fileHash;",
          "121:     Jsi_Value *onAuth, *onCloseLast, *onClose, *onFilter, *onOpen, *onRecv,",
          "124:     bool client, noUpdate, noWebsock, noWarn, use_ssl, local, extHandlers, handlersPkg, inUpdate, noCompress, noConfig, echo;",
          "125:     Jsi_Value* version;",
          "127:     int port;",
          "128:     uint modifySecs;",
          "129:     int maxUpload;",
          "",
          "[Removed Lines]",
          "126:     int idx, mimeFuncCalled;",
          "",
          "[Added Lines]",
          "126:     int idx;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "318:     JSI_OPT(INT,    jsi_wsCmdObj, maxConnects,.help=\"In server mode, max number of client connections accepted\"),",
          "319:     JSI_OPT(INT,    jsi_wsCmdObj, maxDownload,.help=\"Max size of file download\"),",
          "320:     JSI_OPT(INT,    jsi_wsCmdObj, maxUpload,  .help=\"Max size of file upload will accept\"),",
          "323:     JSI_OPT(UINT,   jsi_wsCmdObj, modifySecs, .help=\"Seconds between checking for modified files with onModify (2)\"),",
          "324:     JSI_OPT(BOOL,   jsi_wsCmdObj, noConfig,   .help=\"Disable use of conf() to change options after options after create\", jsi_IIOF),",
          "325:     JSI_OPT(BOOL,   jsi_wsCmdObj, noCompress, .help=\"Disable per-message-deflate extension which can truncate large msgs\"),",
          "327:     JSI_OPT(BOOL,   jsi_wsCmdObj, noWebsock,  .help=\"Serve html, but disallow websocket upgrade\", jsi_IIOF),",
          "328:     JSI_OPT(BOOL,   jsi_wsCmdObj, noWarn,     .help=\"Quietly ignore file related errors\"),",
          "329:     JSI_OPT(FUNC,   jsi_wsCmdObj, onAuth,     .help=\"Function to call for http basic authentication\", .flags=0, .custom=0, .data=(void*)\"ws:userobj, id:number, url:string, userpass:string\"),",
          "",
          "[Removed Lines]",
          "321:     JSI_OPT(OBJ,    jsi_wsCmdObj, mimeTypes,  .help=\"Object providing map of file extensions to mime types. eg. {txt:'text/plain', bb:'text/bb'}\"),",
          "322:     JSI_OPT(FUNC,   jsi_wsCmdObj, mimeLoadFunc,   .help=\"Function to call to load mimeTypes\", .flags=0, .custom=0, .data=(void*)\"ws:userobj\"),",
          "326:     JSI_OPT(BOOL,   jsi_wsCmdObj, noUpdate,   .help=\"Disable update event-processing (eg. to exit)\"),",
          "",
          "[Added Lines]",
          "321:     JSI_OPT(OBJ,    jsi_wsCmdObj, mimeTypes,  .help=\"Object map of file-exts to mime types; initial and/or override of builtins\"),",
          "322:     JSI_OPT(FUNC,   jsi_wsCmdObj, mimeLookupFunc, .help=\"Function to call to lookup mime; returns and/or inserts into mimeTypes\", .flags=0, .custom=0, .data=(void*)\"ws:userobj, id:number, extension:string, url:string\"),",
          "326:     JSI_OPT(BOOL,   jsi_wsCmdObj, noUpdate,   .help=\"Disable update event-processing\"),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1415:             if (mVal)",
          "1416:                 mime = Jsi_ValueString(interp, mVal, NULL);",
          "1417:         }",
          "1420:             jsi_ws_loadMimeTypes(interp, cmdPtr, 0);",
          "1425:         }",
          "1426:         if (!mime)",
          "1427:             mime = \"text/html\";",
          "",
          "[Removed Lines]",
          "1418:         if (!mime && cmdPtr->mimeLoadFunc && !cmdPtr->mimeFuncCalled) {",
          "1419:             cmdPtr->mimeFuncCalled = 1;",
          "1421:             Jsi_FunctionInvokeBool(interp, cmdPtr->mimeLoadFunc, Jsi_ValueNewObj(interp, cmdPtr->fobj));",
          "1422:             Jsi_Value *mVal = Jsi_ValueObjLookup(interp, cmdPtr->mimeTypes, ext+1, 1);",
          "1423:             if (mVal)",
          "1424:                 mime = Jsi_ValueString(interp, mVal, NULL);",
          "",
          "[Added Lines]",
          "1418:         if (!mime && cmdPtr->mimeLookupFunc) {",
          "1421:             Jsi_Obj *oarg1;",
          "1422:             Jsi_Value *vpargs, *vargs[10];",
          "1423:             int n = 0;",
          "1424:             vargs[n++] = Jsi_ValueNewObj(interp, cmdPtr->fobj);",
          "1425:             vargs[n++] = Jsi_ValueNewNumber(interp, (Jsi_Number)(pss->wid));",
          "1426:             vargs[n++] = Jsi_ValueNewStringDup(interp, ext+1);",
          "1427:             vargs[n++] = Jsi_ValueNewStringDup(interp, inPtr);",
          "1428:             vpargs = Jsi_ValueMakeObject(interp, NULL, oarg1 = Jsi_ObjNewArray(interp, vargs, n, 0));",
          "1429:             Jsi_IncrRefCount(interp, vpargs);",
          "1430:             Jsi_Value *ret = Jsi_ValueNew1(interp);",
          "1431:             rc = Jsi_FunctionInvoke(interp, cmdPtr->mimeLookupFunc, vpargs, &ret, NULL);",
          "1432:             if (rc == JSI_OK && Jsi_ValueIsString(interp, ret))",
          "1433:                 Jsi_ValueInsert(interp, cmdPtr->mimeTypes, ext+1, ret, 0);",
          "1435:             Jsi_DecrRefCount(interp, vpargs);",
          "1436:             Jsi_DecrRefCount(interp, ret);",
          "1438:             if (rc != JSI_OK) {",
          "1439:                 Jsi_LogWarn(\"websock mimeLookupFunc bad eval\");",
          "1440:             } else {",
          "1441:                 Jsi_Value *mVal = Jsi_ValueObjLookup(interp, cmdPtr->mimeTypes, ext+1, 1);",
          "1442:                 if (mVal)",
          "1443:                     mime = Jsi_ValueString(interp, mVal, NULL);",
          "1444:             }",
          "",
          "---------------"
        ],
        "www/reference.wiki||www/reference.wiki": [
          "File: www/reference.wiki -> www/reference.wiki",
          "--- Hunk 1 ---",
          "[Context before]",
          "913: <h2>Options for \"obj\"</h2>",
          "914: <table border=\"1\" class=\"optstbl table\">",
          "915: <tr><th>Option</th> <th>Type</th> <th>Description</th><th>Flags</th></tr>",
          "919: <tr><td>defaultNull</td><td><i>BOOL</i></td><td>Create with DEFAULT NULL.</td><td><i></i></td></tr>",
          "920: <tr><td>noChecks</td><td><i>BOOL</i></td><td>Create with no CHECK constraints.</td><td><i></i></td></tr>",
          "921: <tr><td>noDefaults</td><td><i>BOOL</i></td><td>Create with no defaults.</td><td><i></i></td></tr>",
          "",
          "[Removed Lines]",
          "916: <tr><td>name</td><td><i>STRKEY</i></td><td>Name of object var.</td><td><i></i></td></tr>",
          "917: <tr><td>omit</td><td><i>ARRAY</i></td><td>Members in object to disregard.</td><td><i></i></td></tr>",
          "918: <tr><td>getSql</td><td><i>BOOL</i></td><td>Return expanded SQL without evaluating it.</td><td><i></i></td></tr>",
          "",
          "[Added Lines]",
          "916: <tr><td>name</td><td><i>STRKEY</i></td><td>Name of object var data source for %s.</td><td><i></i></td></tr>",
          "917: <tr><td>skip</td><td><i>ARRAY</i></td><td>Object members to ignore.</td><td><i></i></td></tr>",
          "918: <tr><td>getSql</td><td><i>BOOL</i></td><td>Return expanded SQL without evaluating.</td><td><i></i></td></tr>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1222: <tr><td>stmtCacheMax</td><td><i>INT</i></td><td>Max cache size for compiled statements.</td><td><i></i></td></tr>",
          "1223: <tr><td>timeout</td><td><i>INT</i></td><td>Amount of time to wait when file is locked, in ms.</td><td><i></i></td></tr>",
          "1224: <tr><td>udata</td><td><i>OBJ</i></td><td>User data.</td><td><i></i></td></tr>",
          "1226: <tr><td>timeout</td><td><i>INT</i></td><td>Amount of time to wait when file is locked, in ms.</td><td><i></i></td></tr>",
          "1227: <tr><td>vfs</td><td><i>STRING</i></td><td>VFS to use.</td><td><i>initOnly</i></td></tr>",
          "1228: </table>",
          "",
          "[Removed Lines]",
          "1225: <tr><td>version</td><td><i>OBJ</i></td><td>Sqlite version info.</td><td><i></i></td></tr>",
          "",
          "[Added Lines]",
          "1225: <tr><td>version</td><td><i>OBJ</i></td><td>Sqlite version info.</td><td><i>readOnly</i></td></tr>",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1689: <tr><td>maxConnects</td><td><i>INT</i></td><td>In server mode, max number of client connections accepted.</td><td><i></i></td></tr>",
          "1690: <tr><td>maxDownload</td><td><i>INT</i></td><td>Max size of file download.</td><td><i></i></td></tr>",
          "1691: <tr><td>maxUpload</td><td><i>INT</i></td><td>Max size of file upload will accept.</td><td><i></i></td></tr>",
          "1693: <tr><td>modifySecs</td><td><i>UINT</i></td><td>Seconds between checking for modified files with onModify (2).</td><td><i></i></td></tr>",
          "1694: <tr><td>noConfig</td><td><i>BOOL</i></td><td>Disable use of conf() to change options after options after create.</td><td><i>initOnly</i></td></tr>",
          "1695: <tr><td>noCompress</td><td><i>BOOL</i></td><td>Disable per-message-deflate extension which can truncate large msgs.</td><td><i></i></td></tr>",
          "1697: <tr><td>noWebsock</td><td><i>BOOL</i></td><td>Serve html, but disallow websocket upgrade.</td><td><i>initOnly</i></td></tr>",
          "1698: <tr><td>noWarn</td><td><i>BOOL</i></td><td>Quietly ignore file related errors.</td><td><i></i></td></tr>",
          "1699: <tr><td>onAuth</td><td><i>FUNC</i></td><td>Function to call for http basic authentication. @function(ws:userobj, id:number, url:string, userpass:string)</td><td><i></i></td></tr>",
          "",
          "[Removed Lines]",
          "1692: <tr><td>mimeTypes</td><td><i>OBJ</i></td><td>Object providing map of file extensions to mime types. eg. {txt:'text/plain', bb:'text/bb'}.</td><td><i>initOnly</i></td></tr>",
          "1696: <tr><td>noUpdate</td><td><i>BOOL</i></td><td>Disable update event-processing (eg. to exit).</td><td><i></i></td></tr>",
          "",
          "[Added Lines]",
          "1692: <tr><td>mimeTypes</td><td><i>OBJ</i></td><td>Object map of file-exts to mime types; initial and/or override of builtins.</td><td><i></i></td></tr>",
          "1693: <tr><td>mimeLookupFunc</td><td><i>FUNC</i></td><td>Function to call to lookup mime; returns and/or inserts into mimeTypes. @function(ws:userobj, id:number, extension:string, url:string)</td><td><i></i></td></tr>",
          "1697: <tr><td>noUpdate</td><td><i>BOOL</i></td><td>Disable update event-processing.</td><td><i></i></td></tr>",
          "",
          "---------------"
        ]
      }
    }
  ]
}