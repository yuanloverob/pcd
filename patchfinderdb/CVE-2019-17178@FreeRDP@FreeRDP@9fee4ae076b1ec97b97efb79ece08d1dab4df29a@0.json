{
  "cve_id": "CVE-2019-17178",
  "cve_desc": "HuffmanTree_makeFromFrequencies in lodepng.c in LodePNG through 2019-09-28, as used in WinPR in FreeRDP and other products, has a memory leak because a supplied realloc pointer (i.e., the first argument to realloc) is also used for a realloc return value.",
  "repo": "FreeRDP/FreeRDP",
  "patch_hash": "9fee4ae076b1ec97b97efb79ece08d1dab4df29a",
  "patch_info": {
    "commit_hash": "9fee4ae076b1ec97b97efb79ece08d1dab4df29a",
    "repo": "FreeRDP/FreeRDP",
    "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/9fee4ae076b1ec97b97efb79ece08d1dab4df29a",
    "files": [
      "client/X11/generate_argument_docbook.c",
      "libfreerdp/codec/region.c",
      "winpr/libwinpr/utils/lodepng/lodepng.c"
    ],
    "message": "Fixed #5645: realloc return handling",
    "before_after_code_files": [
      "client/X11/generate_argument_docbook.c||client/X11/generate_argument_docbook.c",
      "libfreerdp/codec/region.c||libfreerdp/codec/region.c",
      "winpr/libwinpr/utils/lodepng/lodepng.c||winpr/libwinpr/utils/lodepng/lodepng.c"
    ]
  },
  "patch_diff": {
    "client/X11/generate_argument_docbook.c||client/X11/generate_argument_docbook.c": [
      "File: client/X11/generate_argument_docbook.c -> client/X11/generate_argument_docbook.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "9: LPSTR tr_esc_str(LPCSTR arg, bool format)",
      "10: {",
      "11:  LPSTR tmp = NULL;",
      "12:  size_t cs = 0, x, ds, len;",
      "13:  size_t s;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "12:  LPSTR tmp2 = NULL;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "25:  ds = s + 1;",
      "27:  if (s)",
      "30:  if (NULL == tmp)",
      "31:  {",
      "",
      "[Removed Lines]",
      "28:   tmp = (LPSTR)realloc(tmp, ds * sizeof(CHAR));",
      "",
      "[Added Lines]",
      "29:  {",
      "30:   tmp2 = (LPSTR)realloc(tmp, ds * sizeof(CHAR));",
      "31:   if (!tmp2)",
      "32:    free(tmp);",
      "33:   tmp = tmp2;",
      "34:  }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "43:    case '<':",
      "44:     len = format ? 13 : 4;",
      "45:     ds += len - 1;",
      "48:     if (NULL == tmp)",
      "49:     {",
      "",
      "[Removed Lines]",
      "46:     tmp = (LPSTR)realloc(tmp, ds * sizeof(CHAR));",
      "",
      "[Added Lines]",
      "52:     tmp2 = (LPSTR)realloc(tmp, ds * sizeof(CHAR));",
      "53:     if (!tmp2)",
      "54:      free(tmp);",
      "55:     tmp = tmp2;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "64:    case '>':",
      "65:     len = format ? 14 : 4;",
      "66:     ds += len - 1;",
      "69:     if (NULL == tmp)",
      "70:     {",
      "",
      "[Removed Lines]",
      "67:     tmp = (LPSTR)realloc(tmp, ds * sizeof(CHAR));",
      "",
      "[Added Lines]",
      "76:     tmp2 = (LPSTR)realloc(tmp, ds * sizeof(CHAR));",
      "77:     if (!tmp2)",
      "78:      free(tmp);",
      "79:     tmp = tmp2;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "85:    case '\\'':",
      "86:     ds += 5;",
      "89:     if (NULL == tmp)",
      "90:     {",
      "",
      "[Removed Lines]",
      "87:     tmp = (LPSTR)realloc(tmp, ds * sizeof(CHAR));",
      "",
      "[Added Lines]",
      "99:     tmp2 = (LPSTR)realloc(tmp, ds * sizeof(CHAR));",
      "100:     if (!tmp2)",
      "101:      free(tmp);",
      "102:     tmp = tmp2;",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "103:    case '\"':",
      "104:     ds += 5;",
      "107:     if (NULL == tmp)",
      "108:     {",
      "",
      "[Removed Lines]",
      "105:     tmp = (LPSTR)realloc(tmp, ds * sizeof(CHAR));",
      "",
      "[Added Lines]",
      "120:     tmp2 = (LPSTR)realloc(tmp, ds * sizeof(CHAR));",
      "121:     if (!tmp2)",
      "122:      free(tmp);",
      "123:     tmp = tmp2;",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "121:    case '&':",
      "122:     ds += 4;",
      "125:     if (NULL == tmp)",
      "126:     {",
      "",
      "[Removed Lines]",
      "123:     tmp = (LPSTR)realloc(tmp, ds * sizeof(CHAR));",
      "",
      "[Added Lines]",
      "141:     tmp2 = (LPSTR)realloc(tmp, ds * sizeof(CHAR));",
      "142:     if (!tmp2)",
      "143:      free(tmp);",
      "144:     tmp = tmp2;",
      "",
      "---------------"
    ],
    "libfreerdp/codec/region.c||libfreerdp/codec/region.c": [
      "File: libfreerdp/codec/region.c -> libfreerdp/codec/region.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "468:  if (finalNbRects != nbRects)",
      "469:  {",
      "473:   if (!region->data)",
      "474:   {",
      "",
      "[Removed Lines]",
      "470:   int allocSize = sizeof(REGION16_DATA) + (finalNbRects * sizeof(RECTANGLE_16));",
      "471:   region->data = realloc(region->data, allocSize);",
      "",
      "[Added Lines]",
      "470:   REGION16_DATA* data;",
      "471:   size_t allocSize = sizeof(REGION16_DATA) + (finalNbRects * sizeof(RECTANGLE_16));",
      "472:   data = realloc(region->data, allocSize);",
      "473:   if (!data)",
      "474:    free(region->data);",
      "475:   region->data = data;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "486: BOOL region16_union_rect(REGION16* dst, const REGION16* src, const RECTANGLE_16* rect)",
      "487: {",
      "488:  const RECTANGLE_16* srcExtents;",
      "489:  RECTANGLE_16* dstExtents;",
      "490:  const RECTANGLE_16* currentBand, *endSrcRect, *nextBand;",
      "491:  REGION16_DATA* newItems = NULL;",
      "492:  RECTANGLE_16* dstRect = NULL;",
      "493:  UINT32 usedRects, srcNbRects;",
      "494:  UINT16 topInterBand;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "492:  REGION16_DATA* data;",
      "497:  REGION16_DATA* tmpItems = NULL;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "673:  dstExtents->bottom = MAX(rect->bottom, srcExtents->bottom);",
      "674:  dstExtents->right = MAX(rect->right, srcExtents->right);",
      "675:  newItems->size = sizeof(REGION16_DATA) + (usedRects * sizeof(RECTANGLE_16));",
      "678:  if (!dst->data)",
      "679:  {",
      "",
      "[Removed Lines]",
      "676:  dst->data = realloc(newItems, newItems->size);",
      "",
      "[Added Lines]",
      "682:  tmpItems = realloc(newItems, newItems->size);",
      "683:  if (!tmpItems)",
      "684:   free(newItems);",
      "685:  newItems = tmpItems;",
      "686:  dst->data = newItems;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "718: BOOL region16_intersect_rect(REGION16* dst, const REGION16* src, const RECTANGLE_16* rect)",
      "719: {",
      "720:  REGION16_DATA* newItems;",
      "721:  const RECTANGLE_16* srcPtr, *endPtr, *srcExtents;",
      "722:  RECTANGLE_16* dstPtr;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "730:  REGION16_DATA* data;",
      "",
      "---------------"
    ],
    "winpr/libwinpr/utils/lodepng/lodepng.c||winpr/libwinpr/utils/lodepng/lodepng.c": [
      "File: winpr/libwinpr/utils/lodepng/lodepng.c -> winpr/libwinpr/utils/lodepng/lodepng.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "841: static unsigned HuffmanTree_makeFromFrequencies(HuffmanTree* tree, const unsigned* frequencies,",
      "842:                                                 size_t mincodes, size_t numcodes, unsigned maxbitlen)",
      "843: {",
      "844:   unsigned error = 0;",
      "846:   tree->maxbitlen = maxbitlen;",
      "851:   memset(tree->lengths, 0, numcodes * sizeof(unsigned));",
      "",
      "[Removed Lines]",
      "848:   tree->lengths = (unsigned*)realloc(tree->lengths, numcodes * sizeof(unsigned));",
      "",
      "[Added Lines]",
      "844:  unsigned* lengths;",
      "849:   lengths = (unsigned*)realloc(tree->lengths, numcodes * sizeof(unsigned));",
      "850:  if (!lengths)",
      "851:   free(tree->lengths);",
      "852:  tree->lengths = lengths;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "2f2ca9d93b83c1f9befb8017b314a7af21fdf27b",
      "candidate_info": {
        "commit_hash": "2f2ca9d93b83c1f9befb8017b314a7af21fdf27b",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/2f2ca9d93b83c1f9befb8017b314a7af21fdf27b",
        "files": [
          "libfreerdp/crypto/crypto.c"
        ],
        "message": "Fixed leak in verify_cb.",
        "before_after_code_files": [
          "libfreerdp/crypto/crypto.c||libfreerdp/crypto/crypto.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/5646"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "libfreerdp/crypto/crypto.c||libfreerdp/crypto/crypto.c": [
          "File: libfreerdp/crypto/crypto.c -> libfreerdp/crypto/crypto.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "235:  return fp_buffer;",
          "236: }",
          "239: {",
          "240:  char* buffer = NULL;",
          "241:  BIO* outBIO = BIO_new(BIO_s_mem());",
          "",
          "[Removed Lines]",
          "238: char* crypto_print_name(X509_NAME* name)",
          "",
          "[Added Lines]",
          "238: static char* crypto_print_name(X509_NAME* name)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "762:   int derr = X509_STORE_CTX_get_error_depth(csc);",
          "763:   X509* where = X509_STORE_CTX_get_current_cert(csc);",
          "764:   const char* what = X509_verify_cert_error_string(err);",
          "766:   WLog_WARN(TAG, \"Certificate verification failure '%s (%d)' at stack position %d\", what, err, derr);",
          "768:  }",
          "769:  return ok;",
          "770: }",
          "",
          "[Removed Lines]",
          "767:   WLog_WARN(TAG, \"%s\", crypto_cert_subject(where));",
          "",
          "[Added Lines]",
          "765:   char* name = crypto_cert_subject(where);",
          "768:   WLog_WARN(TAG, \"%s\", name);",
          "770:   free(name);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "19e4eb5d09ade8d406c198f47bb82962c9ca9dbd",
      "candidate_info": {
        "commit_hash": "19e4eb5d09ade8d406c198f47bb82962c9ca9dbd",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/19e4eb5d09ade8d406c198f47bb82962c9ca9dbd",
        "files": [
          "server/shadow/shadow.c",
          "server/shadow/shadow_server.c"
        ],
        "message": "Added /buildconfig command line for shadow.",
        "before_after_code_files": [
          "server/shadow/shadow.c||server/shadow/shadow.c",
          "server/shadow/shadow_server.c||server/shadow/shadow_server.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/5646"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "server/shadow/shadow.c||server/shadow/shadow.c": [
          "File: server/shadow/shadow.c -> server/shadow/shadow.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "72:  if ((status = shadow_server_parse_command_line(server, argc, argv)) < 0)",
          "73:  {",
          "74:   shadow_server_command_line_status_print(server, argc, argv, status);",
          "76:   goto fail_parse_command_line;",
          "77:  }",
          "",
          "[Removed Lines]",
          "75:   WLog_ERR(TAG, \"Problem parsing the command line.\");",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "server/shadow/shadow_server.c||server/shadow/shadow_server.c": [
          "File: server/shadow/shadow_server.c -> server/shadow/shadow_server.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "61:  { \"sec-ext\", COMMAND_LINE_VALUE_BOOL, NULL, BoolValueFalse, NULL, -1, NULL, \"nla extended protocol security\" },",
          "62:  { \"sam-file\", COMMAND_LINE_VALUE_REQUIRED, \"<file>\", NULL, NULL, -1, NULL, \"NTLM SAM file for NLA authentication\" },",
          "63:  { \"version\", COMMAND_LINE_VALUE_FLAG | COMMAND_LINE_PRINT_VERSION, NULL, NULL, NULL, -1, NULL, \"Print version\" },",
          "64:  { \"help\", COMMAND_LINE_VALUE_FLAG | COMMAND_LINE_PRINT_HELP, NULL, NULL, NULL, -1, \"?\", \"Print help\" },",
          "65:  { NULL, 0, NULL, NULL, NULL, -1, NULL, NULL }",
          "66: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "64:  { \"buildconfig\", COMMAND_LINE_VALUE_FLAG | COMMAND_LINE_PRINT_BUILDCONFIG, NULL, NULL, NULL, -1, NULL, \"Print the build configuration\" },",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "145:   WLog_INFO(TAG, \"FreeRDP version %s (git %s)\", FREERDP_VERSION_FULL, GIT_REVISION);",
          "146:   return COMMAND_LINE_STATUS_PRINT_VERSION;",
          "147:  }",
          "148:  else if (status == COMMAND_LINE_STATUS_PRINT)",
          "149:  {",
          "150:   return COMMAND_LINE_STATUS_PRINT;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "149:  else if (status == COMMAND_LINE_STATUS_PRINT_BUILDCONFIG)",
          "150:  {",
          "151:   WLog_INFO(TAG, \"%s\", freerdp_get_build_config());",
          "152:   return COMMAND_LINE_STATUS_PRINT_BUILDCONFIG;",
          "153:  }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ea492ed6b0867fe79cb37a394a500742060cecd6",
      "candidate_info": {
        "commit_hash": "ea492ed6b0867fe79cb37a394a500742060cecd6",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/ea492ed6b0867fe79cb37a394a500742060cecd6",
        "files": [
          "server/shadow/Win/win_wds.c"
        ],
        "message": "Fixed windows shadow server startup issue.",
        "before_after_code_files": [
          "server/shadow/Win/win_wds.c||server/shadow/Win/win_wds.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/5646"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "server/shadow/Win/win_wds.c||server/shadow/Win/win_wds.c": [
          "File: server/shadow/Win/win_wds.c -> server/shadow/Win/win_wds.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "754:   status2 = freerdp_assistance_set_connection_string2(file, ConnectionString2, \"Shadow123!\");",
          "755:   free(ConnectionString2);",
          "758:   {",
          "759:    WLog_ERR(TAG, \"failed to convert connection string\");",
          "760:    return -1;",
          "",
          "[Removed Lines]",
          "757:   if ((status1 < 1) || (status < 0))",
          "",
          "[Added Lines]",
          "757:   if ((status1 < 1) || (status2 < 1))",
          "",
          "---------------"
        ]
      }
    }
  ]
}