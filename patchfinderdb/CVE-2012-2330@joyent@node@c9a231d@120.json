{
  "cve_id": "CVE-2012-2330",
  "cve_desc": "The Update method in src/node_http_parser.cc in Node.js before 0.6.17 and 0.7 before 0.7.8 does not properly check the length of a string, which allows remote attackers to obtain sensitive information (request header contents) and possibly spoof HTTP headers via a zero length string.",
  "repo": "joyent/node",
  "patch_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
  "patch_info": {
    "commit_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
    "repo": "joyent/node",
    "commit_url": "https://github.com/joyent/node/commit/c9a231d",
    "files": [
      "src/node_http_parser.cc"
    ],
    "message": "typo in node_http_parser",
    "before_after_code_files": [
      "src/node_http_parser.cc||src/node_http_parser.cc"
    ]
  },
  "patch_diff": {
    "src/node_http_parser.cc||src/node_http_parser.cc": [
      "File: src/node_http_parser.cc -> src/node_http_parser.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "191:   void Update(const char* str, size_t size) {",
      "192:     if (str_ == NULL)",
      "193:       str_ = str;",
      "197:       char* s = new char[size_ + size];",
      "",
      "[Removed Lines]",
      "194:     else if (on_heap_ || str_ + size != str) {",
      "",
      "[Added Lines]",
      "194:     else if (on_heap_ || str_ + size_ != str) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "8a538ce372c49b23af7582560cf40ba2c2637691",
      "candidate_info": {
        "commit_hash": "8a538ce372c49b23af7582560cf40ba2c2637691",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/8a538ce372c49b23af7582560cf40ba2c2637691",
        "files": [
          "src/node.cc",
          "src/node_vars.cc",
          "src/node_vars.h"
        ],
        "message": "Remove per-process globals from per-thread context.",
        "before_after_code_files": [
          "src/node.cc||src/node.cc",
          "src/node_vars.cc||src/node_vars.cc",
          "src/node_vars.h||src/node_vars.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/node.cc||src/node.cc": [
          "File: src/node.cc -> src/node.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "98: #define check_tick_watcher NODE_VAR(check_tick_watcher)",
          "99: #define code_symbol NODE_VAR(code_symbol)",
          "102: #define emit_symbol NODE_VAR(emit_symbol)",
          "103: #define errno_symbol NODE_VAR(errno_symbol)",
          "104: #define errpath_symbol NODE_VAR(errpath_symbol)",
          "106: #define gc_check NODE_VAR(gc_check)",
          "107: #define gc_idle NODE_VAR(gc_idle)",
          "108: #define gc_timer NODE_VAR(gc_timer)",
          "",
          "[Removed Lines]",
          "100: #define debug_port NODE_VAR(debug_port)",
          "101: #define debug_wait_connect NODE_VAR(debug_wait_connect)",
          "105: #define eval_string NODE_VAR(eval_string)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "110: #define heap_total_symbol NODE_VAR(heap_total_symbol)",
          "111: #define heap_used_symbol NODE_VAR(heap_used_symbol)",
          "112: #define listeners_symbol NODE_VAR(listeners_symbol)",
          "114: #define need_tick_cb NODE_VAR(need_tick_cb)",
          "116: #define prepare_tick_watcher NODE_VAR(prepare_tick_watcher)",
          "118: #define process NODE_VAR(process)",
          "119: #define rss_symbol NODE_VAR(rss_symbol)",
          "120: #define syscall_symbol NODE_VAR(syscall_symbol)",
          "",
          "[Removed Lines]",
          "113: #define max_stack_size NODE_VAR(max_stack_size)",
          "115: #define option_end_index NODE_VAR(option_end_index)",
          "117: #define print_eval NODE_VAR(print_eval)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "123: #define tick_time_head NODE_VAR(tick_time_head)",
          "124: #define tick_times NODE_VAR(tick_times)",
          "125: #define uncaught_exception_symbol NODE_VAR(uncaught_exception_symbol)",
          "127: #define use_npn NODE_VAR(use_npn)",
          "128: #define use_sni NODE_VAR(use_sni)",
          "129: #define uncaught_exception_counter NODE_VAR(uncaught_exception_counter)",
          "",
          "[Removed Lines]",
          "126: #define use_debug_agent NODE_VAR(use_debug_agent)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "137: namespace node {",
          "145: static void CheckStatus(uv_timer_t* watcher, int status);",
          "",
          "[Removed Lines]",
          "141: #define TICK_TIME(n) tick_times[(tick_time_head - (n)) % RPM_SAMPLES]",
          "",
          "[Added Lines]",
          "132: static int option_end_index;",
          "133: static unsigned long max_stack_size;",
          "134: static unsigned short debug_port = 5858;",
          "135: static bool debug_wait_connect;",
          "136: static bool use_debug_agent;",
          "137: static const char* eval_string;",
          "138: static bool print_eval;",
          "142: #define TICK_TIME(n) tick_times[(tick_time_head - (n)) % RPM_SAMPLES]",
          "",
          "---------------"
        ],
        "src/node_vars.cc||src/node_vars.cc": [
          "File: src/node_vars.cc -> src/node_vars.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "13: void globals_init(struct globals* g) {",
          "14:   memset(g, 0, sizeof(struct globals));",
          "17: #ifdef OPENSSL_NPN_NEGOTIATED",
          "18:   g->use_npn = true;",
          "",
          "[Removed Lines]",
          "15:   g->debug_port = 5858;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/node_vars.h||src/node_vars.h": [
          "File: src/node_vars.h -> src/node_vars.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "31:   v8::Persistent<v8::String> listeners_symbol;",
          "32:   v8::Persistent<v8::String> uncaught_exception_symbol;",
          "33:   v8::Persistent<v8::String> emit_symbol;",
          "41:   uv_check_t check_tick_watcher;",
          "42:   uv_prepare_t prepare_tick_watcher;",
          "43:   uv_idle_t tick_spinner;",
          "",
          "[Removed Lines]",
          "34:   bool print_eval;",
          "35:   char *eval_string;",
          "36:   int option_end_index;",
          "37:   bool use_debug_agent;",
          "38:   bool debug_wait_connect;",
          "39:   int debug_port;",
          "40:   int max_stack_size;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5648d95c4a5f08bf252c98a12450567c150de383",
      "candidate_info": {
        "commit_hash": "5648d95c4a5f08bf252c98a12450567c150de383",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/5648d95c4a5f08bf252c98a12450567c150de383",
        "files": [
          "src/node.cc"
        ],
        "message": "Remove unused local variable.",
        "before_after_code_files": [
          "src/node.cc||src/node.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/node.cc||src/node.cc": [
          "File: src/node.cc -> src/node.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "1281: static void ReportException(TryCatch &try_catch, bool show_line) {",
          "1282:   HandleScope scope;",
          "1285:   if (show_line) DisplayExceptionLine(try_catch);",
          "",
          "[Removed Lines]",
          "1283:   Handle<Message> message = try_catch.Message();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0bd410a66a379b6dbd1fa1458829a0aa623c5363",
      "candidate_info": {
        "commit_hash": "0bd410a66a379b6dbd1fa1458829a0aa623c5363",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/0bd410a66a379b6dbd1fa1458829a0aa623c5363",
        "files": [
          "deps/uv/src/unix/core.c"
        ],
        "message": "deps: cherry-pick libuv commit 4690204\n\nlibuv cannot be upgraded right now (API change in upstream libuv) but this\ncommit fixes a segmentation fault on SunOS systems, hence the cherry-pick.",
        "before_after_code_files": [
          "deps/uv/src/unix/core.c||deps/uv/src/unix/core.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "deps/uv/src/unix/core.c||deps/uv/src/unix/core.c": [
          "File: deps/uv/src/unix/core.c -> deps/uv/src/unix/core.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "317:   uv_getaddrinfo_t* req = req_->data;",
          "318:   struct addrinfo *res = req->res;",
          "319: #if __sun",
          "322: #endif",
          "324:   req->res = NULL;",
          "",
          "[Removed Lines]",
          "320:   uv_getaddrinfo_t* handle = req->data;",
          "321:   size_t hostlen = strlen(handle->hostname);",
          "",
          "[Added Lines]",
          "320:   size_t hostlen = strlen(req->hostname);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0d1314233248cb9b236b98477d7b69b2bbf97c08",
      "candidate_info": {
        "commit_hash": "0d1314233248cb9b236b98477d7b69b2bbf97c08",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/0d1314233248cb9b236b98477d7b69b2bbf97c08",
        "files": [
          "doc/api/net.markdown",
          "doc/api/tls.markdown",
          "src/tcp_wrap.cc",
          "test/simple/test-net-server-address.js"
        ],
        "message": "tcp: make getsockname() return address family as string",
        "before_after_code_files": [
          "src/tcp_wrap.cc||src/tcp_wrap.cc",
          "test/simple/test-net-server-address.js||test/simple/test-net-server-address.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/tcp_wrap.cc||src/tcp_wrap.cc": [
          "File: src/tcp_wrap.cc -> src/tcp_wrap.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "170:   int family;",
          "171:   int port;",
          "172:   char ip[INET6_ADDRSTRLEN];",
          "174:   UNWRAP",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "173:   const char *family_name;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "188:       struct sockaddr_in* addrin = (struct sockaddr_in*)&address;",
          "189:       uv_inet_ntop(AF_INET, &(addrin->sin_addr), ip, INET6_ADDRSTRLEN);",
          "190:       port = ntohs(addrin->sin_port);",
          "191:     } else if (family == AF_INET6) {",
          "192:       struct sockaddr_in6* addrin6 = (struct sockaddr_in6*)&address;",
          "193:       uv_inet_ntop(AF_INET6, &(addrin6->sin6_addr), ip, INET6_ADDRSTRLEN);",
          "194:       port = ntohs(addrin6->sin6_port);",
          "195:     } else {",
          "196:       assert(0 && \"bad address family\");",
          "197:       abort();",
          "198:     }",
          "200:     sockname->Set(port_symbol, Integer::New(port));",
          "202:     sockname->Set(address_symbol, String::New(ip));",
          "203:   }",
          "",
          "[Removed Lines]",
          "201:     sockname->Set(family_symbol, Integer::New(family));",
          "",
          "[Added Lines]",
          "192:       family_name = \"IPv4\";",
          "197:       family_name = \"IPv6\";",
          "204:     sockname->Set(family_symbol, String::New(family_name));",
          "",
          "---------------"
        ],
        "test/simple/test-net-server-address.js||test/simple/test-net-server-address.js": [
          "File: test/simple/test-net-server-address.js -> test/simple/test-net-server-address.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: var common = require('../common');",
          "23: var assert = require('assert');",
          "24: var net = require('net');",
          "27: var localhost_ipv4 = '127.0.0.1';",
          "28: var family_ipv4 = 'IPv4';",
          "29: var server_ipv4 = net.createServer();",
          "31: server_ipv4.on('error', function(e) {",
          "32:   console.log('Error on ipv4 socket: ' + e.toString());",
          "33: });",
          "35: server_ipv4.listen(common.PORT, localhost_ipv4, function() {",
          "36:   var address_ipv4 = server_ipv4.address();",
          "37:   assert.strictEqual(address_ipv4.address, localhost_ipv4);",
          "38:   assert.strictEqual(address_ipv4.port, common.PORT);",
          "39:   assert.strictEqual(address_ipv4.family, family_ipv4);",
          "40:   server_ipv4.close();",
          "41: });",
          "44: var localhost_ipv6 = '::1';",
          "45: var family_ipv6 = 'IPv6';",
          "46: var server_ipv6 = net.createServer();",
          "48: server_ipv6.on('error', function(e) {",
          "49:   console.log('Error on ipv6 socket: ' + e.toString());",
          "50: });",
          "52: server_ipv6.listen(common.PORT, localhost_ipv6, function() {",
          "53:   var address_ipv6 = server_ipv6.address();",
          "54:   assert.strictEqual(address_ipv6.address, localhost_ipv6);",
          "55:   assert.strictEqual(address_ipv6.port, common.PORT);",
          "56:   assert.strictEqual(address_ipv6.family, family_ipv6);",
          "57:   server_ipv6.close();",
          "58: });",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ed5bad754c1ff5a4544ef8ac6f2eed0261a9aec7",
      "candidate_info": {
        "commit_hash": "ed5bad754c1ff5a4544ef8ac6f2eed0261a9aec7",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/ed5bad754c1ff5a4544ef8ac6f2eed0261a9aec7",
        "files": [
          "benchmark/io.c"
        ],
        "message": "bench: fix use of fd after close",
        "before_after_code_files": [
          "benchmark/io.c||benchmark/io.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "benchmark/io.c||benchmark/io.c": [
          "File: benchmark/io.c -> benchmark/io.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "51:       exit(254);",
          "52:     }",
          "53:   }",
          "56: #ifndef NSYNC",
          "57: # ifdef __linux__",
          "",
          "[Removed Lines]",
          "54:   close(fd);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "61: # endif",
          "64:   end = now();",
          "65:   elapsed = (end - start) / 1e6;",
          "66:   mbps = ((tsize/elapsed)) / 1048576;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "63:   close(fd);",
          "",
          "---------------"
        ]
      }
    }
  ]
}