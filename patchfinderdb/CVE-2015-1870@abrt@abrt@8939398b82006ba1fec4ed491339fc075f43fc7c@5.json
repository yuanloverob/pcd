{
  "cve_id": "CVE-2015-1870",
  "cve_desc": "The event scripts in Automatic Bug Reporting Tool (ABRT) uses world-readable permission on a copy of sosreport file in problem directories, which allows local users to obtain sensitive information from /var/log/messages via unspecified vectors.",
  "repo": "abrt/abrt",
  "patch_hash": "8939398b82006ba1fec4ed491339fc075f43fc7c",
  "patch_info": {
    "commit_hash": "8939398b82006ba1fec4ed491339fc075f43fc7c",
    "repo": "abrt/abrt",
    "commit_url": "https://github.com/abrt/abrt/commit/8939398b82006ba1fec4ed491339fc075f43fc7c",
    "files": [
      "src/daemon/abrt-server.c",
      "src/daemon/abrt.conf",
      "src/hooks/abrt-hook-ccpp.c",
      "src/include/libabrt.h",
      "src/lib/abrt_conf.c",
      "src/lib/hooklib.c",
      "src/plugins/abrt-dump-oops.c",
      "src/plugins/abrt-dump-xorg.c"
    ],
    "message": "make the dump directories owned by root by default\n\nIt was discovered that the abrt event scripts create a user-readable\ncopy of a sosreport file in abrt problem directories, and include\nexcerpts of /var/log/messages selected by the user-controlled process\nname, leading to an information disclosure.\n\nThis issue was discovered by Florian Weimer of Red Hat Product Security.\n\nRelated: #1212868\n\nSigned-off-by: Jakub Filak <jfilak@redhat.com>",
    "before_after_code_files": [
      "src/daemon/abrt-server.c||src/daemon/abrt-server.c",
      "src/daemon/abrt.conf||src/daemon/abrt.conf",
      "src/hooks/abrt-hook-ccpp.c||src/hooks/abrt-hook-ccpp.c",
      "src/include/libabrt.h||src/include/libabrt.h",
      "src/lib/abrt_conf.c||src/lib/abrt_conf.c",
      "src/lib/hooklib.c||src/lib/hooklib.c",
      "src/plugins/abrt-dump-oops.c||src/plugins/abrt-dump-oops.c",
      "src/plugins/abrt-dump-xorg.c||src/plugins/abrt-dump-xorg.c"
    ]
  },
  "patch_diff": {
    "src/daemon/abrt-server.c||src/daemon/abrt-server.c": [
      "File: src/daemon/abrt-server.c -> src/daemon/abrt-server.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "15:   with this program; if not, write to the Free Software Foundation, Inc.,",
      "16:   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.",
      "18: #include \"libabrt.h\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "18: #include \"problem_api.h\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "153:         error_msg(\"Bad problem directory name '%s', should start with: '%s'\", dirname, g_settings_dump_location);",
      "155:     }",
      "157:     {",
      "158:         if (errno == ENOTDIR)",
      "159:         {",
      "",
      "[Removed Lines]",
      "156:     if (!dump_dir_accessible_by_uid(dirname, client_uid))",
      "",
      "[Added Lines]",
      "157:     if (g_settings_privatereports)",
      "158:     {",
      "159:         struct stat statbuf;",
      "160:         if (lstat(dirname, &statbuf) != 0 || !S_ISDIR(statbuf.st_mode))",
      "161:         {",
      "162:             error_msg(\"Path '%s' isn't directory\", dirname);",
      "164:         }",
      "166:         struct group *gr = getgrnam(\"abrt\");",
      "167:         if (!gr)",
      "168:         {",
      "169:             error_msg(\"Group 'abrt' does not exist\");",
      "170:             return 500;",
      "171:         }",
      "172:         if (statbuf.st_uid != 0 || !(statbuf.st_gid == 0 || statbuf.st_gid == gr->gr_gid) || statbuf.st_mode & 07)",
      "173:         {",
      "174:             error_msg(\"Problem directory '%s' isn't owned by root:abrt or others are not restricted from access\", dirname);",
      "175:             return 403;",
      "176:         }",
      "177:         struct dump_dir *dd = dd_opendir(dirname, DD_OPEN_READONLY);",
      "178:         const bool complete = dd && problem_dump_dir_is_complete(dd);",
      "179:         dd_close(dd);",
      "180:         if (complete)",
      "181:         {",
      "182:             error_msg(\"Problem directory '%s' has already been processed\", dirname);",
      "183:             return 403;",
      "184:         }",
      "185:     }",
      "186:     else if (!dump_dir_accessible_by_uid(dirname, client_uid))",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "381:     if (!dd)",
      "382:     {",
      "383:         error_msg_and_die(\"Error creating problem directory '%s'\", path);",
      "",
      "[Removed Lines]",
      "380:     struct dump_dir *dd = dd_create(path, client_uid, DEFAULT_DUMP_DIR_MODE);",
      "",
      "[Added Lines]",
      "410:     struct dump_dir *dd = dd_create(path, g_settings_privatereports ? 0 : client_uid, DEFAULT_DUMP_DIR_MODE);",
      "",
      "---------------"
    ],
    "src/daemon/abrt.conf||src/daemon/abrt.conf": [
      "File: src/daemon/abrt.conf -> src/daemon/abrt.conf",
      "--- Hunk 1 ---",
      "[Context before]",
      "43: #                session; otherwise No.",
      "44: #",
      "45: # ShortenedReporting = yes",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "47: # Disable this if you want to regular users to own the problem data colleted by",
      "48: # abrt.",
      "49: #",
      "50: PrivateReports = yes",
      "",
      "---------------"
    ],
    "src/hooks/abrt-hook-ccpp.c||src/hooks/abrt-hook-ccpp.c": [
      "File: src/hooks/abrt-hook-ccpp.c -> src/hooks/abrt-hook-ccpp.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "682:         }",
      "683:     }",
      "686:     if (setting_MakeCompatCore && ulimit_c != 0)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "686:     const uid_t dduid = g_settings_privatereports ? 0 : fsuid;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "773:         goto create_user_core;",
      "774:     }",
      "784:     if (dd)",
      "785:     {",
      "786:         char *rootdir = get_rootdir(pid);",
      "788:         dd_create_basic_files(dd, fsuid, NULL);",
      "790:         char source_filename[sizeof(\"/proc/%lu/somewhat_long_name\") + sizeof(long)*3];",
      "",
      "[Removed Lines]",
      "783:     dd = dd_create_skeleton(path, fsuid, DEFAULT_DUMP_DIR_MODE, /*no flags*/0);",
      "",
      "[Added Lines]",
      "786:     dd = dd_create_skeleton(path, dduid, DEFAULT_DUMP_DIR_MODE, /*no flags*/0);",
      "",
      "---------------"
    ],
    "src/include/libabrt.h||src/include/libabrt.h": [
      "File: src/include/libabrt.h -> src/include/libabrt.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "62: extern char *        g_settings_autoreporting_event;",
      "63: #define g_settings_shortenedreporting abrt_g_settings_shortenedreporting",
      "64: extern bool          g_settings_shortenedreporting;",
      "67: #define load_abrt_conf abrt_load_abrt_conf",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "65: #define g_settings_privatereports abrt_g_settings_privatereports",
      "66: extern bool          g_settings_privatereports;",
      "",
      "---------------"
    ],
    "src/lib/abrt_conf.c||src/lib/abrt_conf.c": [
      "File: src/lib/abrt_conf.c -> src/lib/abrt_conf.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "27: bool          g_settings_autoreporting = 0;",
      "28: char *        g_settings_autoreporting_event = NULL;",
      "29: bool          g_settings_shortenedreporting = 0;",
      "31: void free_abrt_conf_data()",
      "32: {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "30: bool          g_settings_privatereports = true;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "102:     else",
      "103:         g_settings_shortenedreporting = 0;",
      "105:     GHashTableIter iter;",
      "106:     const char *name;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "106:     value = get_map_string_item_or_NULL(settings, \"PrivateReports\");",
      "107:     if (value)",
      "108:     {",
      "109:         g_settings_privatereports = string_to_bool(value);",
      "110:         remove_map_string_item(settings, \"PrivateReports\");",
      "111:     }",
      "",
      "---------------"
    ],
    "src/lib/hooklib.c||src/lib/hooklib.c": [
      "File: src/lib/hooklib.c -> src/lib/hooklib.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "410: {",
      "411:     load_abrt_conf();",
      "415:     char *problem_id = NULL;",
      "416:     if (dd)",
      "",
      "[Removed Lines]",
      "413:     struct dump_dir *dd = create_dump_dir_from_problem_data(pd, g_settings_dump_location);",
      "",
      "[Added Lines]",
      "413:     struct dump_dir *dd = NULL;",
      "415:     if (g_settings_privatereports)",
      "416:         dd = create_dump_dir_from_problem_data_ext(pd, g_settings_dump_location, 0);",
      "417:     else",
      "418:         dd = create_dump_dir_from_problem_data(pd, g_settings_dump_location);",
      "",
      "---------------"
    ],
    "src/plugins/abrt-dump-oops.c||src/plugins/abrt-dump-oops.c": [
      "File: src/plugins/abrt-dump-oops.c -> src/plugins/abrt-dump-oops.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "189:         mode = DEFAULT_DUMP_DIR_MODE;",
      "190:         my_euid = geteuid();",
      "191:     }",
      "193:     pid_t my_pid = getpid();",
      "194:     unsigned idx = 0;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "192:     if (g_settings_privatereports)",
      "193:     {",
      "194:         if (world_readable_dump)",
      "195:             log(\"Not going to make dump directories world readable because PrivateReports is on\");",
      "197:         mode = DEFAULT_DUMP_DIR_MODE;",
      "198:         my_euid = 0;",
      "199:     }",
      "",
      "---------------"
    ],
    "src/plugins/abrt-dump-xorg.c||src/plugins/abrt-dump-xorg.c": [
      "File: src/plugins/abrt-dump-xorg.c -> src/plugins/abrt-dump-xorg.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "82:         mode = DEFAULT_DUMP_DIR_MODE;",
      "83:         my_euid = geteuid();",
      "84:     }",
      "86:     pid_t my_pid = getpid();",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "85:     if (g_settings_privatereports)",
      "86:     {",
      "87:         if ((g_opts & OPT_x))",
      "88:             log(\"Not going to make dump directories world readable because PrivateReports is on\");",
      "90:         mode = DEFAULT_DUMP_DIR_MODE;",
      "91:         my_euid = 0;",
      "92:     }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "eb3e4583bf8214b374e0453764d194130618d391",
      "candidate_info": {
        "commit_hash": "eb3e4583bf8214b374e0453764d194130618d391",
        "repo": "abrt/abrt",
        "commit_url": "https://github.com/abrt/abrt/commit/eb3e4583bf8214b374e0453764d194130618d391",
        "files": [
          "src/daemon/abrt.conf"
        ],
        "message": "Warn against disabling private reports in abrt.conf\n\nRelated rhbz#1253166\n\nSigned-off-by: Richard Marko <rmarko@fedoraproject.org>",
        "before_after_code_files": [
          "src/daemon/abrt.conf||src/daemon/abrt.conf"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/daemon/abrt.conf||src/daemon/abrt.conf"
          ],
          "candidate": [
            "src/daemon/abrt.conf||src/daemon/abrt.conf"
          ]
        }
      },
      "candidate_diff": {
        "src/daemon/abrt.conf||src/daemon/abrt.conf": [
          "File: src/daemon/abrt.conf -> src/daemon/abrt.conf",
          "--- Hunk 1 ---",
          "[Context before]",
          "44: #",
          "45: # ShortenedReporting = yes",
          "49: #",
          "50: PrivateReports = yes",
          "",
          "[Removed Lines]",
          "47: # Disable this if you want to regular users to own the problem data colleted by",
          "48: # abrt.",
          "",
          "[Added Lines]",
          "47: # Disable this option if you want to allow regular users to have file system",
          "48: #  rights to read the problem data stored in DumpLocation.",
          "50: #  Caution:",
          "51: #  THE PROBLEM DATA CONTAINS EXCERPTS OF /var/log/messages, dmesg AND sosreport",
          "52: #  data GENERATED BY abrtd UNDER THE USER root.",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3c47834129e58429310f5160ba4ae94cfcee3b52",
      "candidate_info": {
        "commit_hash": "3c47834129e58429310f5160ba4ae94cfcee3b52",
        "repo": "abrt/abrt",
        "commit_url": "https://github.com/abrt/abrt/commit/3c47834129e58429310f5160ba4ae94cfcee3b52",
        "files": [
          "src/daemon/abrt-server.c",
          "src/daemon/abrt.conf",
          "src/hooks/abrt-hook-ccpp.c",
          "src/include/libabrt.h",
          "src/lib/abrt_conf.c",
          "src/plugins/abrt-dump-oops.c"
        ],
        "message": "make the dump directories owned by root by default\n\nIt was discovered that the abrt event scripts create a user-readable\ncopy of a sosreport file in abrt problem directories, and include\nexcerpts of /var/log/messages selected by the user-controlled process\nname, leading to an information disclosure.\n\nThis issue was discovered by Florian Weimer of Red Hat Product Security.\n\nRelated: #1212868\n\nSigned-off-by: Jakub Filak <jfilak@redhat.com>",
        "before_after_code_files": [
          "src/daemon/abrt-server.c||src/daemon/abrt-server.c",
          "src/daemon/abrt.conf||src/daemon/abrt.conf",
          "src/hooks/abrt-hook-ccpp.c||src/hooks/abrt-hook-ccpp.c",
          "src/include/libabrt.h||src/include/libabrt.h",
          "src/lib/abrt_conf.c||src/lib/abrt_conf.c",
          "src/plugins/abrt-dump-oops.c||src/plugins/abrt-dump-oops.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/daemon/abrt-server.c||src/daemon/abrt-server.c",
            "src/daemon/abrt.conf||src/daemon/abrt.conf",
            "src/hooks/abrt-hook-ccpp.c||src/hooks/abrt-hook-ccpp.c",
            "src/include/libabrt.h||src/include/libabrt.h",
            "src/lib/abrt_conf.c||src/lib/abrt_conf.c",
            "src/plugins/abrt-dump-oops.c||src/plugins/abrt-dump-oops.c"
          ],
          "candidate": [
            "src/daemon/abrt-server.c||src/daemon/abrt-server.c",
            "src/daemon/abrt.conf||src/daemon/abrt.conf",
            "src/hooks/abrt-hook-ccpp.c||src/hooks/abrt-hook-ccpp.c",
            "src/include/libabrt.h||src/include/libabrt.h",
            "src/lib/abrt_conf.c||src/lib/abrt_conf.c",
            "src/plugins/abrt-dump-oops.c||src/plugins/abrt-dump-oops.c"
          ]
        }
      },
      "candidate_diff": {
        "src/daemon/abrt-server.c||src/daemon/abrt-server.c": [
          "File: src/daemon/abrt-server.c -> src/daemon/abrt-server.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "113:     if (!dd)",
          "114:     {",
          "115:         error_msg_and_die(\"Error creating crash dump %s\", path);",
          "",
          "[Removed Lines]",
          "112:     struct dump_dir *dd = dd_create(path, client_uid, 0640);",
          "",
          "[Added Lines]",
          "112:     struct dump_dir *dd = dd_create(path, g_settings_privatereports ? 0 : client_uid, 0640);",
          "",
          "---------------"
        ],
        "src/daemon/abrt.conf||src/daemon/abrt.conf": [
          "File: src/daemon/abrt.conf -> src/daemon/abrt.conf",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: # Enables automatic running of the event configured in AutoreportingEvent option.",
          "36: #",
          "37: AutoreportingEnabled = no",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "39: # Disable this if you want to regular users to own the problem data colleted by",
          "40: # abrt.",
          "41: #",
          "42: PrivateReports = yes",
          "",
          "---------------"
        ],
        "src/hooks/abrt-hook-ccpp.c||src/hooks/abrt-hook-ccpp.c": [
          "File: src/hooks/abrt-hook-ccpp.c -> src/hooks/abrt-hook-ccpp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "861:         }",
          "862:     }",
          "865:     if (setting_MakeCompatCore && ulimit_c != 0)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "865:     const uid_t dduid = g_settings_privatereports ? 0 : fsuid;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "959:         return 1;",
          "960:     }",
          "971:     if (dd)",
          "972:     {",
          "973:         char *rootdir = get_rootdir(pid);",
          "975:         dd_create_basic_files(dd, fsuid, NULL);",
          "977:         char source_filename[sizeof(\"/proc/%lu/somewhat_long_name\") + sizeof(long)*3];",
          "",
          "[Removed Lines]",
          "970:     dd = dd_create_skeleton(path, fsuid, 0640, /*no flags*/0);",
          "",
          "[Added Lines]",
          "972:     dd = dd_create_skeleton(path, dduid, 0640, /*no flags*/0);",
          "",
          "---------------"
        ],
        "src/include/libabrt.h||src/include/libabrt.h": [
          "File: src/include/libabrt.h -> src/include/libabrt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "58: extern bool          g_settings_autoreporting;",
          "59: #define g_settings_autoreporting_event abrt_g_settings_autoreporting_event",
          "60: extern char *        g_settings_autoreporting_event;",
          "63: #define load_abrt_conf abrt_load_abrt_conf",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "61: #define g_settings_privatereports abrt_g_settings_privatereports",
          "62: extern bool          g_settings_privatereports;",
          "",
          "---------------"
        ],
        "src/lib/abrt_conf.c||src/lib/abrt_conf.c": [
          "File: src/lib/abrt_conf.c -> src/lib/abrt_conf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: bool          g_settings_delete_uploaded = 0;",
          "27: bool          g_settings_autoreporting = 0;",
          "28: char *        g_settings_autoreporting_event = NULL;",
          "30: void free_abrt_conf_data()",
          "31: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "29: bool          g_settings_privatereports = true;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "92:     else",
          "93:         g_settings_autoreporting_event = xstrdup(\"submit_uReport\");",
          "95:     GHashTableIter iter;",
          "96:     const char *name;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "96:     value = get_map_string_item_or_NULL(settings, \"PrivateReports\");",
          "97:     if (value)",
          "98:     {",
          "99:         g_settings_privatereports = string_to_bool(value);",
          "100:         remove_map_string_item(settings, \"PrivateReports\");",
          "101:     }",
          "",
          "---------------"
        ],
        "src/plugins/abrt-dump-oops.c||src/plugins/abrt-dump-oops.c": [
          "File: src/plugins/abrt-dump-oops.c -> src/plugins/abrt-dump-oops.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "139:         mode = 0640;",
          "140:         my_euid = geteuid();",
          "141:     }",
          "143:     pid_t my_pid = getpid();",
          "144:     unsigned errors = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "142:     if (g_settings_privatereports)",
          "143:     {",
          "144:         if (world_readable_dump)",
          "145:             log(\"Not going to make dump directories world readable because PrivateReports is on\");",
          "147:         mode = 0640;",
          "148:         my_euid = 0;",
          "149:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e03fafaab25ab2a11893c76b72f67afe7647408f",
      "candidate_info": {
        "commit_hash": "e03fafaab25ab2a11893c76b72f67afe7647408f",
        "repo": "abrt/abrt",
        "commit_url": "https://github.com/abrt/abrt/commit/e03fafaab25ab2a11893c76b72f67afe7647408f",
        "files": [
          "src/daemon/abrt-server.c",
          "src/include/libabrt.h",
          "src/lib/hooklib.c",
          "tests/Makefile.am",
          "tests/hooklib.at",
          "tests/testsuite.at"
        ],
        "message": "lib: add functions validating dump dir\n\nMove the code from abrt-server to shared library and fix the condition\nvalidating dump dir's path.\n\nAs of now, abrt is allowed to process only direct sub-directories of the\ndump locations with appropriate mode and owner and group.\n\nSigned-off-by: Jakub Filak <jfilak@redhat.com>",
        "before_after_code_files": [
          "src/daemon/abrt-server.c||src/daemon/abrt-server.c",
          "src/include/libabrt.h||src/include/libabrt.h",
          "src/lib/hooklib.c||src/lib/hooklib.c",
          "tests/Makefile.am||tests/Makefile.am",
          "tests/hooklib.at||tests/hooklib.at",
          "tests/testsuite.at||tests/testsuite.at"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "src/daemon/abrt-server.c||src/daemon/abrt-server.c",
            "src/include/libabrt.h||src/include/libabrt.h",
            "src/lib/hooklib.c||src/lib/hooklib.c"
          ],
          "candidate": [
            "src/daemon/abrt-server.c||src/daemon/abrt-server.c",
            "src/include/libabrt.h||src/include/libabrt.h",
            "src/lib/hooklib.c||src/lib/hooklib.c"
          ]
        }
      },
      "candidate_diff": {
        "src/daemon/abrt-server.c||src/daemon/abrt-server.c": [
          "File: src/daemon/abrt-server.c -> src/daemon/abrt-server.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "15:   with this program; if not, write to the Free Software Foundation, Inc.,",
          "16:   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.",
          "18: #include \"libabrt.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18: #include \"problem_api.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "75: static uid_t client_uid = (uid_t)-1L;",
          "93: static int delete_path(const char *dump_dir_name)",
          "94: {",
          "",
          "[Removed Lines]",
          "78: static bool dir_is_in_dump_location(const char *dump_dir_name)",
          "79: {",
          "80:     unsigned len = strlen(g_settings_dump_location);",
          "82:     if (strncmp(dump_dir_name, g_settings_dump_location, len) == 0",
          "83:      && dump_dir_name[len] == '/'",
          "85:      && !strstr(dump_dir_name + len, \"/.\")",
          "86:     ) {",
          "87:         return 1;",
          "88:     }",
          "89:     return 0;",
          "90: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "99:         error_msg(\"Bad problem directory name '%s', should start with: '%s'\", dump_dir_name, g_settings_dump_location);",
          "101:     }",
          "102:     if (!dump_dir_accessible_by_uid(dump_dir_name, client_uid))",
          "103:     {",
          "104:         if (errno == ENOTDIR)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "89:     if (!dir_has_correct_permissions(dump_dir_name, DD_PERM_DAEMONS))",
          "90:     {",
          "91:         error_msg(\"Problem directory '%s' has wrong owner or group\", dump_dir_name);",
          "93:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "153:         error_msg(\"Bad problem directory name '%s', should start with: '%s'\", dirname, g_settings_dump_location);",
          "155:     }",
          "156:     if (!dump_dir_accessible_by_uid(dirname, client_uid))",
          "157:     {",
          "158:         if (errno == ENOTDIR)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "148:     if (!dir_has_correct_permissions(dirname, DD_PERM_EVENTS))",
          "149:     {",
          "150:         error_msg(\"Problem directory '%s' has wrong owner or group\", dirname);",
          "152:     }",
          "154:     {",
          "155:         struct dump_dir *dd = dd_opendir(dirname, DD_OPEN_READONLY);",
          "156:         const bool complete = dd && problem_dump_dir_is_complete(dd);",
          "157:         dd_close(dd);",
          "158:         if (complete)",
          "159:         {",
          "160:             error_msg(\"Problem directory '%s' has already been processed\", dirname);",
          "161:             return 403;",
          "162:         }",
          "163:     }",
          "",
          "---------------"
        ],
        "src/include/libabrt.h||src/include/libabrt.h": [
          "File: src/include/libabrt.h -> src/include/libabrt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "49: #define get_backtrace abrt_get_backtrace",
          "50: char *get_backtrace(const char *dump_dir_name, unsigned timeout_sec, const char *debuginfo_dirs);",
          "53: #define g_settings_nMaxCrashReportsSize abrt_g_settings_nMaxCrashReportsSize",
          "54: extern unsigned int  g_settings_nMaxCrashReportsSize;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "52: #define dir_is_in_dump_location abrt_dir_is_in_dump_location",
          "53: bool dir_is_in_dump_location(const char *dir_name);",
          "55: enum {",
          "56:     DD_PERM_EVENTS  = 1 << 0,",
          "57:     DD_PERM_DAEMONS = 1 << 1,",
          "58: };",
          "59: #define dir_has_correct_permissions abrt_dir_has_correct_permissions",
          "60: bool dir_has_correct_permissions(const char *dir_name, int flags);",
          "",
          "---------------"
        ],
        "src/lib/hooklib.c||src/lib/hooklib.c": [
          "File: src/lib/hooklib.c -> src/lib/hooklib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "494:     if ((sb.st_mode & 07777) != mode && chmod(dir, mode) != 0)",
          "495:         perror_msg_and_die(\"Can't set mode %o on '%s'\", mode, dir);",
          "496: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "498: bool dir_is_in_dump_location(const char *dir_name)",
          "499: {",
          "500:     unsigned len = strlen(g_settings_dump_location);",
          "503:     if (strncmp(dir_name, g_settings_dump_location, len) != 0)",
          "504:     {",
          "505:         log_debug(\"Bad parent directory: '%s' not in '%s'\", g_settings_dump_location, dir_name);",
          "506:         return false;",
          "507:     }",
          "510:     const char *base_name = dir_name + len;",
          "511:     while (*base_name && *base_name == '/')",
          "512:         ++base_name;",
          "514:     if (*(base_name - 1) != '/' || !str_is_correct_filename(base_name))",
          "515:     {",
          "516:         log_debug(\"Invalid dump directory name: '%s'\", base_name);",
          "517:         return false;",
          "518:     }",
          "521:     struct stat sb;",
          "522:     if (lstat(dir_name, &sb) < 0)",
          "523:     {",
          "524:         VERB2 perror_msg(\"stat('%s')\", dir_name);",
          "525:         return errno== ENOENT;",
          "526:     }",
          "528:     return S_ISDIR(sb.st_mode);",
          "529: }",
          "531: bool dir_has_correct_permissions(const char *dir_name, int flags)",
          "532: {",
          "533:     struct stat statbuf;",
          "534:     if (lstat(dir_name, &statbuf) != 0 || !S_ISDIR(statbuf.st_mode))",
          "535:     {",
          "536:         error_msg(\"Path '%s' isn't directory\", dir_name);",
          "537:         return false;",
          "538:     }",
          "541:     struct group *gr = getgrnam(\"abrt\");",
          "542:     if (!gr)",
          "543:     {",
          "544:         error_msg(\"The group 'abrt' does not exist\");",
          "545:         return false;",
          "546:     }",
          "549:     const bool correct_group =    statbuf.st_gid == 0",
          "550:                                || statbuf.st_gid == gr->gr_gid;",
          "556:     const bool events =    statbuf.st_uid == 0",
          "557:                         && correct_group",
          "558:                         && (statbuf.st_mode & S_IWGRP) == 0",
          "559:                         && (statbuf.st_mode & S_IWOTH) == 0;",
          "561:     if ((flags & DD_PERM_EVENTS))",
          "562:         return events;",
          "572:     return correct_group;",
          "573: }",
          "",
          "---------------"
        ],
        "tests/Makefile.am||tests/Makefile.am": [
          "File: tests/Makefile.am -> tests/Makefile.am",
          "--- Hunk 1 ---",
          "[Context before]",
          "29:   testsuite.at \\",
          "30:   pyhook.at \\",
          "31:   koops-parser.at \\",
          "34: EXTRA_DIST += $(TESTSUITE_AT)",
          "35: TESTSUITE = $(srcdir)/testsuite",
          "",
          "[Removed Lines]",
          "32:   ignored_problems.at",
          "",
          "[Added Lines]",
          "32:   ignored_problems.at \\",
          "33:   hooklib.at",
          "",
          "---------------"
        ],
        "tests/hooklib.at||tests/hooklib.at": [
          "File: tests/hooklib.at -> tests/hooklib.at",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # -*- Autotest -*-",
          "3: AT_BANNER([hooklib])",
          "5: AT_TESTFUN([dir_is_in_dump_location],",
          "6: [[",
          "7: #include \"libabrt.h\"",
          "8: #include <assert.h>",
          "10: void test(char *name, bool expected)",
          "11: {",
          "12:     if (dir_is_in_dump_location(name) != expected)",
          "13:     {",
          "14:         fprintf(stderr, \"Bad: %s\", name);",
          "15:         abort();",
          "16:     }",
          "18:     free(name);",
          "19: }",
          "21: int main(void)",
          "22: {",
          "23:     g_verbose = 3;",
          "24:     load_abrt_conf();",
          "26:     g_verbose = 3;",
          "28:     char *name;",
          "30:     assert(dir_is_in_dump_location(\"/\") == false);",
          "32:     asprintf(&name, \"%s\", g_settings_dump_location);",
          "33:     test(name, false);",
          "35:     asprintf(&name, \"%s..evil\", g_settings_dump_location);",
          "36:     test(name, false);",
          "38:     asprintf(&name, \"%s/\", g_settings_dump_location);",
          "39:     test(name, false);",
          "41:     asprintf(&name, \"%s///\", g_settings_dump_location);",
          "42:     test(name, false);",
          "44:     asprintf(&name, \"%s/.\", g_settings_dump_location);",
          "45:     test(name, false);",
          "47:     asprintf(&name, \"%s///.\", g_settings_dump_location);",
          "48:     test(name, false);",
          "50:     asprintf(&name, \"%s/./\", g_settings_dump_location);",
          "51:     test(name, false);",
          "53:     asprintf(&name, \"%s/.///\", g_settings_dump_location);",
          "54:     test(name, false);",
          "56:     asprintf(&name, \"%s/..\", g_settings_dump_location);",
          "57:     test(name, false);",
          "59:     asprintf(&name, \"%s///..\", g_settings_dump_location);",
          "60:     test(name, false);",
          "62:     asprintf(&name, \"%s/../\", g_settings_dump_location);",
          "63:     test(name, false);",
          "65:     asprintf(&name, \"%s/..///\", g_settings_dump_location);",
          "66:     test(name, false);",
          "68:     asprintf(&name, \"%s/good/../../../evil\", g_settings_dump_location);",
          "69:     test(name, false);",
          "71:     asprintf(&name, \"%s/good..still\", g_settings_dump_location);",
          "72:     test(name, true);",
          "74:     asprintf(&name, \"%s/good.new\", g_settings_dump_location);",
          "75:     test(name, true);",
          "77:     asprintf(&name, \"%s/.meta\", g_settings_dump_location);",
          "78:     test(name, true);",
          "80:     asprintf(&name, \"%s/..data\", g_settings_dump_location);",
          "81:     test(name, true);",
          "83:     return 0;",
          "84: }",
          "85: ]])",
          "",
          "---------------"
        ],
        "tests/testsuite.at||tests/testsuite.at": [
          "File: tests/testsuite.at -> tests/testsuite.at",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: m4_include([koops-parser.at])",
          "5: m4_include([pyhook.at])",
          "6: m4_include([ignored_problems.at])",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7: m4_include([hooklib.at])",
          "",
          "---------------"
        ]
      }
    }
  ]
}