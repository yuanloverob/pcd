{
  "cve_id": "CVE-2013-0281",
  "cve_desc": "Pacemaker 1.1.10, when remote Cluster Information Base (CIB) configuration or resource management is enabled, does not limit the duration of connections to the blocking sockets, which allows remote attackers to cause a denial of service (connection blocking).",
  "repo": "ClusterLabs/pacemaker",
  "patch_hash": "564f7cc2a51dcd2f28ab12a13394f31be5aa3c93",
  "patch_info": {
    "commit_hash": "564f7cc2a51dcd2f28ab12a13394f31be5aa3c93",
    "repo": "ClusterLabs/pacemaker",
    "commit_url": "https://github.com/ClusterLabs/pacemaker/commit/564f7cc2a51dcd2f28ab12a13394f31be5aa3c93",
    "files": [
      "cib/callbacks.c",
      "cib/callbacks.h",
      "cib/notify.c",
      "cib/remote.c",
      "include/crm_internal.h",
      "lib/cib/cib_remote.c",
      "lib/common/mainloop.c",
      "lib/common/remote.c",
      "tools/crm_mon.c"
    ],
    "message": "High: core: Internal tls api improvements for reuse with future LRMD tls backend.",
    "before_after_code_files": [
      "cib/callbacks.c||cib/callbacks.c",
      "cib/callbacks.h||cib/callbacks.h",
      "cib/notify.c||cib/notify.c",
      "cib/remote.c||cib/remote.c",
      "include/crm_internal.h||include/crm_internal.h",
      "lib/cib/cib_remote.c||lib/cib/cib_remote.c",
      "lib/common/mainloop.c||lib/common/mainloop.c",
      "lib/common/remote.c||lib/common/remote.c",
      "tools/crm_mon.c||tools/crm_mon.c"
    ]
  },
  "patch_diff": {
    "cib/callbacks.c||cib/callbacks.c": [
      "File: cib/callbacks.c -> cib/callbacks.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "347:         int rid = 0;",
      "349:         if(sync_reply) {",
      "356:                       rid, client_obj->name, from_peer?\"(originator of delegated request)\":\"\");",
      "358:         } else {",
      "359:             crm_trace(\"Sending an event to %s %s\",",
      "",
      "[Removed Lines]",
      "350:             CRM_LOG_ASSERT(client_obj->request_id);",
      "352:             rid = client_obj->request_id;",
      "353:             client_obj->request_id = 0;",
      "355:             crm_trace(\"Sending response %d to %s %s\",",
      "",
      "[Added Lines]",
      "350:             if (client_obj->ipc) {",
      "351:                 CRM_LOG_ASSERT(client_obj->request_id);",
      "353:                 rid = client_obj->request_id;",
      "354:                 client_obj->request_id = 0;",
      "356:                 crm_trace(\"Sending response %d to %s %s\",",
      "358:             } else {",
      "359:                 crm_trace(\"Sending response to %s %s\",",
      "360:                       client_obj->name, from_peer?\"(originator of delegated request)\":\"\");",
      "361:             }",
      "",
      "---------------"
    ],
    "cib/callbacks.h||cib/callbacks.h": [
      "File: cib/callbacks.h -> cib/callbacks.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "41:     char *name;",
      "42:     char *callback_id;",
      "43:     char *user;",
      "44:     int request_id;",
      "46:     qb_ipcs_connection_t *ipc;",
      "48: #ifdef HAVE_GNUTLS_GNUTLS_H",
      "49:     gnutls_session *session;",
      "50: #else",
      "51:     void *session;",
      "52: #endif",
      "53:     gboolean encrypted;",
      "54:     mainloop_io_t *remote;",
      "56:     unsigned long num_calls;",
      "58:     int pre_notify;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "44:     char *recv_buf;",
      "51:     gboolean handshake_complete;",
      "56:     gboolean remote_auth;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "60:     int confirmations;",
      "61:     int replace;",
      "62:     int diffs;",
      "64:     GList *delegated_calls;",
      "65: } cib_client_t;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "66:     int remote_auth_timeout;",
      "",
      "---------------"
    ],
    "cib/notify.c||cib/notify.c": [
      "File: cib/notify.c -> cib/notify.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "83:     CRM_CHECK(client != NULL, return TRUE);",
      "84:     CRM_CHECK(update_msg != NULL, return TRUE);",
      "87:         crm_warn(\"Skipping client with NULL channel\");",
      "88:         return FALSE;",
      "89:     }",
      "",
      "[Removed Lines]",
      "86:     if (client->ipc == NULL) {",
      "",
      "[Added Lines]",
      "86:     if (client->ipc == NULL && client->session == NULL) {",
      "",
      "---------------"
    ],
    "cib/remote.c||cib/remote.c": [
      "File: cib/remote.c -> cib/remote.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "60: #  endif",
      "61: #endif",
      "67: extern int remote_tls_fd;",
      "68: extern gboolean cib_shutdown_flag;",
      "",
      "[Removed Lines]",
      "63: #ifdef HAVE_DECL_NANOSLEEP",
      "64: #  include <time.h>",
      "65: #endif",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "73: #ifdef HAVE_GNUTLS_GNUTLS_H",
      "74: #  define DH_BITS 1024",
      "75: gnutls_dh_params dh_params;",
      "77: static void",
      "78: debug_log(int level, const char *str)",
      "79: {",
      "80:     fputs(str, stderr);",
      "81: }",
      "85: #endif",
      "87: int num_clients;",
      "88: int authenticate_user(const char *user, const char *passwd);",
      "89: int cib_remote_listen(gpointer data);",
      "",
      "[Removed Lines]",
      "76: extern gnutls_anon_server_credentials anon_cred_s;",
      "83: extern gnutls_session *create_tls_session(int csock, int type);",
      "",
      "[Added Lines]",
      "72: gnutls_anon_server_credentials anon_cred_s;",
      "80: #define REMOTE_AUTH_TIMEOUT 10000",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "215:     return FALSE;",
      "216: }",
      "218: int",
      "219: cib_remote_listen(gpointer data)",
      "220: {",
      "222:     int csock = 0;",
      "223:     unsigned laddr;",
      "226:     struct sockaddr_in addr;",
      "227:     int ssock = *(int *)data;",
      "229: #ifdef HAVE_GNUTLS_GNUTLS_H",
      "230:     gnutls_session *session = NULL;",
      "231: #endif",
      "232:     cib_client_t *new_client = NULL;",
      "243:     static struct mainloop_fd_callbacks remote_client_fd_callbacks =",
      "244:         {",
      "245:             .dispatch = cib_remote_msg,",
      "246:             .destroy = cib_remote_connection_destroy,",
      "250:     laddr = sizeof(addr);",
      "251:     csock = accept(ssock, (struct sockaddr *)&addr, &laddr);",
      "",
      "[Removed Lines]",
      "221:     int lpc = 0;",
      "224:     time_t now = 0;",
      "225:     time_t start = time(NULL);",
      "234:     xmlNode *login = NULL;",
      "235:     const char *user = NULL;",
      "236:     const char *pass = NULL;",
      "237:     const char *tmp = NULL;",
      "239: #ifdef HAVE_DECL_NANOSLEEP",
      "241: #endif",
      "247:         };",
      "",
      "[Added Lines]",
      "213: static gboolean",
      "214: cib_remote_auth(xmlNode *login)",
      "215: {",
      "216:     const char *user = NULL;",
      "217:     const char *pass = NULL;",
      "218:     const char *tmp = NULL;",
      "220:     crm_log_xml_info(login, \"Login: \");",
      "221:     if (login == NULL) {",
      "222:         return FALSE;",
      "223:     }",
      "225:     tmp = crm_element_name(login);",
      "226:     if (safe_str_neq(tmp, \"cib_command\")) {",
      "227:         crm_err(\"Wrong tag: %s\", tmp);",
      "228:         return FALSE;",
      "229:     }",
      "231:     tmp = crm_element_value(login, \"op\");",
      "232:     if (safe_str_neq(tmp, \"authenticate\")) {",
      "233:         crm_err(\"Wrong operation: %s\", tmp);",
      "234:         return FALSE;",
      "235:     }",
      "237:     user = crm_element_value(login, \"user\");",
      "238:     pass = crm_element_value(login, \"password\");",
      "240:     if (!user || !pass) {",
      "241:         crm_err(\"missing auth credentials\");",
      "242:         return FALSE;",
      "243:     }",
      "248:     if (check_group_membership(user, CRM_DAEMON_GROUP) == FALSE) {",
      "249:         crm_err(\"User is not a member of the required group\");",
      "250:         return FALSE;",
      "252:     } else if (authenticate_user(user, pass) == FALSE) {",
      "253:         crm_err(\"PAM auth failed\");",
      "254:         return FALSE;",
      "255:     }",
      "257:     return TRUE;",
      "258: }",
      "260: static gboolean",
      "261: remote_auth_timeout_cb(gpointer data)",
      "262: {",
      "263:     cib_client_t *client = data;",
      "265:     client->remote_auth_timeout = 0;",
      "267:     if (client->remote_auth == TRUE) {",
      "268:         return FALSE;",
      "269:     }",
      "271:     mainloop_del_fd(client->remote);",
      "272:     crm_err(\"Remote client authentication timed out\");",
      "274:     return FALSE;",
      "275: }",
      "283:     int flag;",
      "294:         };",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "257:         return TRUE;",
      "258:     }",
      "260:     if (ssock == remote_tls_fd) {",
      "261: #ifdef HAVE_GNUTLS_GNUTLS_H",
      "264:         if (session == NULL) {",
      "265:             crm_err(\"TLS session creation failed\");",
      "266:             close(csock);",
      "",
      "[Removed Lines]",
      "263:         session = create_tls_session(csock, GNUTLS_SERVER);",
      "",
      "[Added Lines]",
      "307:     if ((flag = fcntl(csock, F_GETFL)) >= 0) {",
      "308:         if (fcntl(csock, F_SETFL, flag | O_NONBLOCK) < 0) {",
      "309:             crm_err( \"fcntl() write failed\");",
      "310:             close(csock);",
      "311:             return TRUE;",
      "312:         }",
      "313:     } else {",
      "314:         crm_err( \"fcntl() read failed\");",
      "315:         close(csock);",
      "316:         return TRUE;",
      "317:     }",
      "322:         session = crm_create_anon_tls_session(csock, GNUTLS_SERVER, anon_cred_s);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "269: #endif",
      "270:     }",
      "327:     num_clients++;",
      "328:     new_client = calloc(1, sizeof(cib_client_t));",
      "332:     new_client->id = crm_generate_uuid();",
      "338:     new_client->callback_id = NULL;",
      "339:     if (ssock == remote_tls_fd) {",
      "340: #ifdef HAVE_GNUTLS_GNUTLS_H",
      "341:         new_client->encrypted = TRUE;",
      "",
      "[Removed Lines]",
      "272:     do {",
      "273:         crm_trace(\"Iter: %d\", lpc++);",
      "274:         if (ssock == remote_tls_fd) {",
      "275: #ifdef HAVE_GNUTLS_GNUTLS_H",
      "276:             login = crm_recv_remote_msg(session, TRUE);",
      "277: #endif",
      "278:         } else {",
      "279:             login = crm_recv_remote_msg(GINT_TO_POINTER(csock), FALSE);",
      "280:         }",
      "281:         if (login != NULL) {",
      "282:             break;",
      "283:         }",
      "284: #ifdef HAVE_DECL_NANOSLEEP",
      "285:         nanosleep(&sleepfast, NULL);",
      "286: #else",
      "287:         sleep(1);",
      "288: #endif",
      "289:         now = time(NULL);",
      "292:     } while (login == NULL && (start - now) < 4);",
      "294:     crm_log_xml_info(login, \"Login: \");",
      "295:     if (login == NULL) {",
      "296:         goto bail;",
      "297:     }",
      "299:     tmp = crm_element_name(login);",
      "300:     if (safe_str_neq(tmp, \"cib_command\")) {",
      "301:         crm_err(\"Wrong tag: %s\", tmp);",
      "302:         goto bail;",
      "303:     }",
      "305:     tmp = crm_element_value(login, \"op\");",
      "306:     if (safe_str_neq(tmp, \"authenticate\")) {",
      "307:         crm_err(\"Wrong operation: %s\", tmp);",
      "308:         goto bail;",
      "309:     }",
      "311:     user = crm_element_value(login, \"user\");",
      "312:     pass = crm_element_value(login, \"password\");",
      "317:     if (check_group_membership(user, CRM_DAEMON_GROUP) == FALSE) {",
      "318:         crm_err(\"User is not a member of the required group\");",
      "319:         goto bail;",
      "321:     } else if (authenticate_user(user, pass) == FALSE) {",
      "322:         crm_err(\"PAM auth failed\");",
      "323:         goto bail;",
      "324:     }",
      "329:     new_client->name = crm_element_value_copy(login, \"name\");",
      "331:     CRM_CHECK(new_client->id == NULL, free(new_client->id));",
      "334: #if ENABLE_ACL",
      "335:     new_client->user = strdup(user);",
      "336: #endif",
      "",
      "[Added Lines]",
      "336:     new_client->remote_auth_timeout = g_timeout_add(REMOTE_AUTH_TIMEOUT, remote_auth_timeout_cb, new_client);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "345:         new_client->session = GINT_TO_POINTER(csock);",
      "346:     }",
      "355:     new_client->remote = mainloop_add_fd(",
      "356:         \"cib-remote-client\", G_PRIORITY_DEFAULT, csock, new_client, &remote_client_fd_callbacks);",
      "358:     g_hash_table_insert(client_list, new_client->id, new_client);",
      "360:     return TRUE;",
      "373: }",
      "375: void",
      "376: cib_remote_connection_destroy(gpointer user_data)",
      "377: {",
      "378:     cib_client_t *client = user_data;",
      "380:     if (client == NULL) {",
      "381:         return;",
      "",
      "[Removed Lines]",
      "348:     free_xml(login);",
      "349:     login = create_xml_node(NULL, \"cib_result\");",
      "350:     crm_xml_add(login, F_CIB_OPERATION, CRM_OP_REGISTER);",
      "351:     crm_xml_add(login, F_CIB_CLIENTID, new_client->id);",
      "352:     crm_send_remote_msg(new_client->session, login, new_client->encrypted);",
      "353:     free_xml(login);",
      "362:   bail:",
      "363:     if (ssock == remote_tls_fd) {",
      "364: #ifdef HAVE_GNUTLS_GNUTLS_H",
      "365:         gnutls_bye(*session, GNUTLS_SHUT_RDWR);",
      "366:         gnutls_deinit(*session);",
      "367:         gnutls_free(session);",
      "368: #endif",
      "369:     }",
      "370:     close(csock);",
      "371:     free_xml(login);",
      "372:     return TRUE;",
      "",
      "[Added Lines]",
      "359:     int csock = 0;",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "393:     crm_trace(\"Destroying %s (%p)\", client->name, user_data);",
      "394:     num_clients--;",
      "395:     crm_trace(\"Num unfree'd clients: %d\", num_clients);",
      "396:     free(client->name);",
      "397:     free(client->callback_id);",
      "398:     free(client->id);",
      "399:     free(client->user);",
      "400:     free(client);",
      "401:     crm_trace(\"Freed the cib client\");",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "377:     if (client->remote_auth_timeout) {",
      "378:         g_source_remove(client->remote_auth_timeout);",
      "379:     }",
      "381:     if (client->encrypted) {",
      "382: #ifdef HAVE_GNUTLS_GNUTLS_H",
      "383:         if (client->session) {",
      "384:             void *sock_ptr = gnutls_transport_get_ptr(*client->session);",
      "385:             csock = GPOINTER_TO_INT(sock_ptr);",
      "386:             if (client->handshake_complete) {",
      "387:                 gnutls_bye(*client->session, GNUTLS_SHUT_WR);",
      "388:             }",
      "389:             gnutls_deinit(*client->session);",
      "390:             gnutls_free(client->session);",
      "391:         }",
      "392: #endif",
      "393:     } else {",
      "394:         csock = GPOINTER_TO_INT(client->session);",
      "395:     }",
      "396:     client->session = NULL;",
      "398:     if (csock > 0) {",
      "399:         close(csock);",
      "400:     }",
      "406:     free(client->recv_buf);",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "406:     return;",
      "407: }",
      "411: {",
      "412:     const char *value = NULL;",
      "423:     value = crm_element_name(command);",
      "424:     if (safe_str_neq(value, \"cib_command\")) {",
      "425:         crm_log_xml_trace(command, \"Bad command: \");",
      "427:     }",
      "429:     if (client->name == NULL) {",
      "",
      "[Removed Lines]",
      "409: int",
      "410: cib_remote_msg(gpointer data)",
      "413:     xmlNode *command = NULL;",
      "414:     cib_client_t *client = data;",
      "416:     crm_trace(\"%s callback\", client->encrypted ? \"secure\" : \"clear-text\");",
      "418:     command = crm_recv_remote_msg(client->session, client->encrypted);",
      "419:     if (command == NULL) {",
      "420:         return -1;",
      "421:     }",
      "426:         goto bail;",
      "",
      "[Added Lines]",
      "416: static void",
      "417: cib_handle_remote_msg(cib_client_t *client, xmlNode *command)",
      "424:         return;",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "473:     crm_log_xml_trace(command, \"Remote command: \");",
      "474:     cib_common_callback_worker(0, 0, command, client, TRUE);",
      "478:     return 0;",
      "479: }",
      "",
      "[Removed Lines]",
      "475:   bail:",
      "476:     free_xml(command);",
      "477:     command = NULL;",
      "",
      "[Added Lines]",
      "473: }",
      "475: int",
      "476: cib_remote_msg(gpointer data)",
      "477: {",
      "478:     xmlNode *command = NULL;",
      "479:     cib_client_t *client = data;",
      "480:     int disconnected = 0;",
      "481:     int timeout = client->remote_auth ? -1 : 1000;",
      "483:     crm_trace(\"%s callback\", client->encrypted ? \"secure\" : \"clear-text\");",
      "485: #ifdef HAVE_GNUTLS_GNUTLS_H",
      "486:     if (client->encrypted && (client->handshake_complete == FALSE)) {",
      "487:         int rc = 0;",
      "491:         do {",
      "492:             rc = gnutls_handshake(*client->session);",
      "494:             if (rc < 0 && rc != GNUTLS_E_AGAIN) {",
      "495:                 crm_err(\"Remote cib tls handshake failed\");",
      "496:                 return -1;",
      "497:             }",
      "498:         } while (rc == GNUTLS_E_INTERRUPTED);",
      "500:         if (rc == 0) {",
      "501:             crm_debug(\"Remote cib tls handshake completed\");",
      "502:             client->handshake_complete = TRUE;",
      "503:             if (client->remote_auth_timeout) {",
      "504:                 g_source_remove(client->remote_auth_timeout);",
      "505:             }",
      "507:             client->remote_auth_timeout = g_timeout_add(REMOTE_AUTH_TIMEOUT, remote_auth_timeout_cb, client);",
      "508:         }",
      "509:         return 0;",
      "510:     }",
      "511: #endif",
      "513:     crm_recv_remote_msg(client->session, &client->recv_buf, client->encrypted, timeout, &disconnected);",
      "516:     if (client->remote_auth == FALSE) {",
      "517:         xmlNode *reg;",
      "518: #if ENABLE_ACL",
      "519:         const char *user = NULL;",
      "520: #endif",
      "521:         command = crm_parse_remote_buffer(&client->recv_buf);",
      "522:         if (cib_remote_auth(command) == FALSE) {",
      "523:             free_xml(command);",
      "524:             return -1;",
      "525:         }",
      "527:         crm_debug(\"remote connection authenticated successfully\");",
      "528:         client->remote_auth = TRUE;",
      "529:         g_source_remove(client->remote_auth_timeout);",
      "530:         client->remote_auth_timeout = 0;",
      "531:         client->name = crm_element_value_copy(command, \"name\");",
      "533: #if ENABLE_ACL",
      "534:         user = crm_element_value(command, \"user\");",
      "535:         if (user) {",
      "536:            new_client->user = strdup(user);",
      "537:         }",
      "538: #endif",
      "541:         reg = create_xml_node(NULL, \"cib_result\");",
      "542:         crm_xml_add(reg, F_CIB_OPERATION, CRM_OP_REGISTER);",
      "543:         crm_xml_add(reg, F_CIB_CLIENTID, client->id);",
      "544:         crm_send_remote_msg(client->session, reg, client->encrypted);",
      "545:         free_xml(reg);",
      "546:         free_xml(command);",
      "547:     }",
      "549:     command = crm_parse_remote_buffer(&client->recv_buf);",
      "550:     while (command) {",
      "551:         crm_trace(\"command received\");",
      "552:         cib_handle_remote_msg(client, command);",
      "553:         free_xml(command);",
      "554:         command = crm_parse_remote_buffer(&client->recv_buf);",
      "555:     }",
      "557:     if (disconnected) {",
      "558:         crm_trace(\"disconnected while receiving remote cib msg.\");",
      "559:         return -1;",
      "560:     }",
      "",
      "---------------"
    ],
    "include/crm_internal.h||include/crm_internal.h": [
      "File: include/crm_internal.h -> include/crm_internal.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "199: long long crm_int_helper(const char *text, char **end_text);",
      "200: char *crm_concat(const char *prefix, const char *suffix, char join);",
      "201: char *generate_hash_key(const char *crm_msg_reference, const char *sys);",
      "205: const char *daemon_option(const char *option);",
      "206: void set_daemon_option(const char *option, const char *value);",
      "",
      "[Removed Lines]",
      "202: xmlNode *crm_recv_remote_msg(void *session, gboolean encrypted);",
      "203: void crm_send_remote_msg(void *session, xmlNode * msg, gboolean encrypted);",
      "",
      "[Added Lines]",
      "205: gboolean crm_recv_remote_msg(void *session, char **recv_buf, gboolean encrypted, int total_timeout_ms, int *disconnected);",
      "206: char *crm_recv_remote_raw(void *data, gboolean encrypted, size_t max_recv, size_t *recv_len, int *disconnected);",
      "207: int crm_send_remote_msg(void *session, xmlNode * msg, gboolean encrypted);",
      "208: int crm_recv_remote_ready(void *session, gboolean encrypted, int timeout_ms);",
      "209: xmlNode *crm_parse_remote_buffer(char **msg_buf);",
      "210: int crm_remote_tcp_connect(const char *host, int port);",
      "212: #ifdef HAVE_GNUTLS_GNUTLS_H",
      "221: int crm_initiate_client_tls_handshake(void *session_data, int timeout_ms);",
      "232: void *crm_create_anon_tls_session(int sock, int type, void *credentials);",
      "233: #endif",
      "235: #define REMOTE_MSG_TERMINATOR \"\\r\\n\\r\\n\"",
      "",
      "---------------"
    ],
    "lib/cib/cib_remote.c||lib/cib/cib_remote.c": [
      "File: lib/cib/cib_remote.c -> lib/cib/cib_remote.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "38: #ifdef HAVE_GNUTLS_GNUTLS_H",
      "39: #  undef KEYFILE",
      "40: #  include <gnutls/gnutls.h>",
      "44: const int kx_prio[] = {",
      "45:     GNUTLS_KX_ANON_DH,",
      "46:     0",
      "47: };",
      "49: #else",
      "50: typedef void gnutls_session;",
      "51: #endif",
      "",
      "[Removed Lines]",
      "41: extern gnutls_anon_client_credentials anon_cred_c;",
      "42: extern gnutls_session *create_tls_session(int csock, int type);",
      "",
      "[Added Lines]",
      "41: gnutls_anon_client_credentials anon_cred_c;",
      "49: static gboolean remote_gnutls_credentials_init = FALSE;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "61:     gnutls_session *session;",
      "62:     mainloop_io_t *source;",
      "63:     char *token;",
      "64: };",
      "66: typedef struct cib_remote_opaque_s {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "65:     char *recv_buf;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "76: } cib_remote_opaque_t;",
      "78: void cib_remote_connection_destroy(gpointer user_data);",
      "80: int cib_remote_signon(cib_t * cib, const char *name, enum cib_conn_type type);",
      "81: int cib_remote_signoff(cib_t * cib);",
      "82: int cib_remote_free(cib_t * cib);",
      "",
      "[Removed Lines]",
      "79: int cib_remote_dispatch(gpointer user_data);",
      "",
      "[Added Lines]",
      "81: int cib_remote_callback_dispatch(gpointer user_data);",
      "82: int cib_remote_command_dispatch(gpointer user_data);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "158: {",
      "159:     cib_remote_opaque_t *private = cib->variant_opaque;",
      "166: #ifdef HAVE_GNUTLS_GNUTLS_H",
      "167:     if (private->command.encrypted) {",
      "178:     }",
      "179: #endif",
      "180:     return 0;",
      "181: }",
      "183: static int",
      "185: {",
      "186:     int sock;",
      "187:     cib_remote_opaque_t *private = cib->variant_opaque;",
      "189:     int rc = 0;",
      "196:     xmlNode *answer = NULL;",
      "197:     xmlNode *login = NULL;",
      "205:     connection->socket = 0;",
      "206:     connection->session = NULL;",
      "259:     }",
      "261:     if (connection->encrypted) {",
      "263: #ifdef HAVE_GNUTLS_GNUTLS_H",
      "272:             cib_tls_close(cib);",
      "273:             return -1;",
      "274:         }",
      "",
      "[Removed Lines]",
      "163:     close(private->command.socket);",
      "164:     close(private->callback.socket);",
      "168:         gnutls_bye(*(private->command.session), GNUTLS_SHUT_RDWR);",
      "169:         gnutls_deinit(*(private->command.session));",
      "170:         gnutls_free(private->command.session);",
      "172:         gnutls_bye(*(private->callback.session), GNUTLS_SHUT_RDWR);",
      "173:         gnutls_deinit(*(private->callback.session));",
      "174:         gnutls_free(private->callback.session);",
      "176:         gnutls_anon_free_client_credentials(anon_cred_c);",
      "177:         gnutls_global_deinit();",
      "184: cib_tls_signon(cib_t * cib, struct remote_connection_s *connection)",
      "188:     struct sockaddr_in addr;",
      "190:     char *server = private->server;",
      "192:     int ret_ga;",
      "193:     struct addrinfo *res;",
      "194:     struct addrinfo hints;",
      "199:     static struct mainloop_fd_callbacks cib_fd_callbacks =",
      "200:         {",
      "201:             .dispatch = cib_remote_dispatch,",
      "202:             .destroy = cib_remote_connection_destroy,",
      "203:         };",
      "209:     sock = socket(PF_INET, SOCK_STREAM, IPPROTO_TCP);",
      "210:     if (sock == -1) {",
      "211:         crm_perror(LOG_ERR, \"Socket creation failed\");",
      "212:         return -1;",
      "213:     }",
      "216:     bzero(&hints, sizeof(struct addrinfo));",
      "217:     hints.ai_flags = AI_CANONNAME;",
      "218:     hints.ai_family = AF_INET;",
      "219:     hints.ai_socktype = SOCK_RAW;",
      "221:     if (hints.ai_family == AF_INET6) {",
      "222:         hints.ai_protocol = IPPROTO_ICMPV6;",
      "223:     } else {",
      "224:         hints.ai_protocol = IPPROTO_ICMP;",
      "225:     }",
      "227:     crm_debug(\"Looking up %s\", server);",
      "228:     ret_ga = getaddrinfo(server, NULL, &hints, &res);",
      "229:     if (ret_ga) {",
      "230:         crm_err(\"getaddrinfo: %s\", gai_strerror(ret_ga));",
      "231:         close(sock);",
      "232:         return -1;",
      "233:     }",
      "235:     if (res->ai_canonname) {",
      "236:         server = res->ai_canonname;",
      "237:     }",
      "239:     crm_debug(\"Got address %s for %s\", server, private->server);",
      "241:     if (!res->ai_addr) {",
      "242:         fprintf(stderr, \"getaddrinfo failed\");",
      "243:         crm_exit(1);",
      "244:     }",
      "245: #if 1",
      "246:     memcpy(&addr, res->ai_addr, res->ai_addrlen);",
      "247: #else",
      "249:     memset(&addr, 0, sizeof(addr));",
      "250:     addr.sin_family = AF_INET;",
      "251:     addr.sin_addr.s_addr = inet_addr(server);",
      "252: #endif",
      "253:     addr.sin_port = htons(private->port);",
      "255:     if (connect(sock, (struct sockaddr *)&addr, sizeof(addr)) == -1) {",
      "256:         crm_perror(LOG_ERR, \"Connection to %s:%d failed\", server, private->port);",
      "257:         close(sock);",
      "258:         return -1;",
      "264:         gnutls_global_init();",
      "265:         gnutls_anon_allocate_client_credentials(&anon_cred_c);",
      "268:         connection->session = create_tls_session(sock, GNUTLS_CLIENT);",
      "269:         if (connection->session == NULL) {",
      "270:             crm_perror(LOG_ERR, \"Session creation for %s:%d failed\", server, private->port);",
      "271:             close(sock);",
      "",
      "[Added Lines]",
      "166:         if (private->command.session) {",
      "167:             gnutls_bye(*(private->command.session), GNUTLS_SHUT_RDWR);",
      "168:             gnutls_deinit(*(private->command.session));",
      "169:             gnutls_free(private->command.session);",
      "170:         }",
      "172:         if (private->callback.session) {",
      "173:             gnutls_bye(*(private->callback.session), GNUTLS_SHUT_RDWR);",
      "174:             gnutls_deinit(*(private->callback.session));",
      "175:             gnutls_free(private->callback.session);",
      "176:         }",
      "177:         private->command.session = NULL;",
      "178:         private->callback.session = NULL;",
      "179:         if (remote_gnutls_credentials_init) {",
      "180:             gnutls_anon_free_client_credentials(anon_cred_c);",
      "181:             gnutls_global_deinit();",
      "182:             remote_gnutls_credentials_init = FALSE;",
      "183:         }",
      "187:     if (private->command.socket) {",
      "189:         close(private->command.socket);",
      "190:     }",
      "191:     if (private->callback.socket) {",
      "193:         close(private->callback.socket);",
      "194:     }",
      "195:     private->command.socket = 0;",
      "196:     private->callback.socket = 0;",
      "198:     free(private->command.recv_buf);",
      "199:     free(private->callback.recv_buf);",
      "200:     private->command.recv_buf = NULL;",
      "201:     private->callback.recv_buf = NULL;",
      "207: cib_tls_signon(cib_t * cib, struct remote_connection_s *connection, gboolean event_channel)",
      "212:     int disconnected = 0;",
      "217:     static struct mainloop_fd_callbacks cib_fd_callbacks = { 0, };",
      "219:     cib_fd_callbacks.dispatch = event_channel ? cib_remote_callback_dispatch : cib_remote_command_dispatch;",
      "220:     cib_fd_callbacks.destroy = cib_remote_connection_destroy;",
      "225:     sock = crm_remote_tcp_connect(private->server, private->port);",
      "226:     if (sock <= 0) {",
      "227:         crm_perror(LOG_ERR, \"remote tcp connection to %s:%d failed\", private->server, private->port);",
      "230:     connection->socket = sock;",
      "234:         if (remote_gnutls_credentials_init == FALSE) {",
      "235:             gnutls_global_init();",
      "236:             gnutls_anon_allocate_client_credentials(&anon_cred_c);",
      "237:             remote_gnutls_credentials_init = TRUE;",
      "238:         }",
      "241:         connection->session = crm_create_anon_tls_session(sock, GNUTLS_CLIENT, anon_cred_c);",
      "243:         if (crm_initiate_client_tls_handshake(connection->session, DEFAULT_CLIENT_HANDSHAKE_TIMEOUT) != 0) {",
      "244:             crm_err(\"Session creation for %s:%d failed\", private->server, private->port);",
      "246:             gnutls_deinit(*connection->session);",
      "247:             gnutls_free(connection->session);",
      "248:             connection->session = NULL;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "289:     crm_send_remote_msg(connection->session, login, connection->encrypted);",
      "290:     free_xml(login);",
      "293:     crm_log_xml_trace(answer, \"Reply\");",
      "294:     if (answer == NULL) {",
      "295:         rc = -EPROTO;",
      "",
      "[Removed Lines]",
      "292:     answer = crm_recv_remote_msg(connection->session, connection->encrypted);",
      "",
      "[Added Lines]",
      "269:     crm_recv_remote_msg(connection->session, &connection->recv_buf, connection->encrypted, -1, &disconnected);",
      "271:     if (disconnected) {",
      "272:         rc = -ENOTCONN;",
      "273:     }",
      "275:     answer = crm_parse_remote_buffer(&connection->recv_buf);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "310:             connection->token = strdup(tmp_ticket);",
      "311:         }",
      "312:     }",
      "314:     if (rc != 0) {",
      "315:         cib_tls_close(cib);",
      "316:     }",
      "319:     connection->source = mainloop_add_fd(\"cib-remote\", G_PRIORITY_HIGH, connection->socket, cib, &cib_fd_callbacks);",
      "320:     return rc;",
      "321: }",
      "",
      "[Removed Lines]",
      "318:     connection->socket = sock;",
      "",
      "[Added Lines]",
      "297:     free_xml(answer);",
      "298:     answer = NULL;",
      "302:         return rc;",
      "305:     crm_trace(\"remote client connection established\");",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "331: }",
      "333: int",
      "335: {",
      "336:     cib_t *cib = user_data;",
      "337:     cib_remote_opaque_t *private = cib->variant_opaque;",
      "339:     xmlNode *msg = NULL;",
      "342:     crm_info(\"Message on callback channel\");",
      "359:         free_xml(msg);",
      "361:     }",
      "363: }",
      "365: int",
      "",
      "[Removed Lines]",
      "334: cib_remote_dispatch(gpointer user_data)",
      "340:     const char *type = NULL;",
      "343:     msg = crm_recv_remote_msg(private->callback.session, private->callback.encrypted);",
      "345:     type = crm_element_value(msg, F_TYPE);",
      "346:     crm_trace(\"Activating %s callbacks...\", type);",
      "348:     if (safe_str_eq(type, T_CIB)) {",
      "349:         cib_native_callback(cib, msg, 0, 0);",
      "351:     } else if (safe_str_eq(type, T_CIB_NOTIFY)) {",
      "352:         g_list_foreach(cib->notify_list, cib_native_notify, msg);",
      "354:     } else {",
      "355:         crm_err(\"Unknown message type: %s\", type);",
      "356:     }",
      "358:     if (msg != NULL) {",
      "360:         return 0;",
      "362:     return -1;",
      "",
      "[Added Lines]",
      "321: cib_remote_command_dispatch(gpointer user_data)",
      "322: {",
      "323:     int disconnected = 0;",
      "324:     cib_t *cib = user_data;",
      "325:     cib_remote_opaque_t *private = cib->variant_opaque;",
      "327:     crm_recv_remote_msg(private->command.session, &private->command.recv_buf, private->command.encrypted, -1, &disconnected);",
      "329:     free(private->command.recv_buf);",
      "330:     private->command.recv_buf = NULL;",
      "331:     crm_err(\"received late reply for remote cib connection, discarding\");",
      "333:     if (disconnected) {",
      "334:         return -1;",
      "335:     }",
      "336:     return 0;",
      "337: }",
      "339: int",
      "340: cib_remote_callback_dispatch(gpointer user_data)",
      "346:     int disconnected = 0;",
      "350:     crm_recv_remote_msg(private->callback.session, &private->callback.recv_buf, private->callback.encrypted, -1, &disconnected);",
      "352:     msg = crm_parse_remote_buffer(&private->callback.recv_buf);",
      "353:     while (msg) {",
      "354:         const char *type = crm_element_value(msg, F_TYPE);",
      "355:         crm_trace(\"Activating %s callbacks...\", type);",
      "357:         if (safe_str_eq(type, T_CIB)) {",
      "358:             cib_native_callback(cib, msg, 0, 0);",
      "360:         } else if (safe_str_eq(type, T_CIB_NOTIFY)) {",
      "361:             g_list_foreach(cib->notify_list, cib_native_notify, msg);",
      "363:         } else {",
      "364:             crm_err(\"Unknown message type: %s\", type);",
      "365:         }",
      "368:         msg = crm_parse_remote_buffer(&private->callback.recv_buf);",
      "369:     }",
      "371:     if (disconnected) {",
      "372:         return -1;",
      "375:     return 0;",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "394:     }",
      "396:     if (rc == pcmk_ok) {",
      "398:     }",
      "400:     if (rc == pcmk_ok) {",
      "402:     }",
      "404:     if (rc == pcmk_ok) {",
      "",
      "[Removed Lines]",
      "397:         rc = cib_tls_signon(cib, &(private->command));",
      "401:         rc = cib_tls_signon(cib, &(private->callback));",
      "",
      "[Added Lines]",
      "410:         rc = cib_tls_signon(cib, &(private->command), FALSE);",
      "414:         rc = cib_tls_signon(cib, &(private->callback), TRUE);",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "463:     return rc;",
      "464: }",
      "482: int",
      "483: cib_remote_perform_op(cib_t * cib, const char *op, const char *host, const char *section,",
      "484:                       xmlNode * data, xmlNode ** output_data, int call_options, const char *name)",
      "485: {",
      "486:     int rc = pcmk_ok;",
      "488:     xmlNode *op_msg = NULL;",
      "489:     xmlNode *op_reply = NULL;",
      "491:     cib_remote_opaque_t *private = cib->variant_opaque;",
      "497:     if (cib->state == cib_disconnected) {",
      "498:         return -ENOTCONN;",
      "499:     }",
      "",
      "[Removed Lines]",
      "466: static gboolean timer_expired = FALSE;",
      "467: static struct timer_rec_s *sync_timer = NULL;",
      "468: static gboolean",
      "469: cib_timeout_handler(gpointer data)",
      "470: {",
      "471:     struct timer_rec_s *timer = data;",
      "473:     timer_expired = TRUE;",
      "474:     crm_err(\"Call %d timed out after %ds\", timer->call_id, timer->timeout);",
      "479:     return TRUE;",
      "480: }",
      "493:     if (sync_timer == NULL) {",
      "494:         sync_timer = calloc(1, sizeof(struct timer_rec_s));",
      "495:     }",
      "",
      "[Added Lines]",
      "484:     int disconnected = 0;",
      "485:     int remaining_time = 0;",
      "486:     time_t start_time;",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "524:     }",
      "526:     crm_trace(\"Sending %s message to CIB service\", op);",
      "528:     free_xml(op_msg);",
      "530:     if ((call_options & cib_discard_reply)) {",
      "",
      "[Removed Lines]",
      "527:     crm_send_remote_msg(private->command.session, op_msg, private->command.encrypted);",
      "",
      "[Added Lines]",
      "523:     if (!(call_options & cib_sync_call)) {",
      "524:         crm_send_remote_msg(private->callback.session, op_msg, private->command.encrypted);",
      "525:     } else {",
      "526:         crm_send_remote_msg(private->command.session, op_msg, private->command.encrypted);",
      "527:     }",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "538:     crm_trace(\"Waiting for a syncronous reply\");",
      "551:         int reply_id = -1;",
      "552:         int msg_id = cib->call_id;",
      "556:             break;",
      "557:         }",
      "559:         crm_element_value_int(op_reply, F_CIB_CALLID, &reply_id);",
      "565:         if (reply_id == msg_id) {",
      "566:             break;",
      "",
      "[Removed Lines]",
      "540:     if (cib->call_timeout > 0) {",
      "544:         timer_expired = FALSE;",
      "545:         sync_timer->call_id = cib->call_id;",
      "546:         sync_timer->timeout = cib->call_timeout * 1000;",
      "547:         sync_timer->ref = g_timeout_add(sync_timer->timeout, cib_timeout_handler, sync_timer);",
      "548:     }",
      "550:     while (timer_expired == FALSE) {",
      "554:         op_reply = crm_recv_remote_msg(private->command.session, private->command.encrypted);",
      "555:         if (op_reply == NULL) {",
      "560:         CRM_CHECK(reply_id > 0, free_xml(op_reply);",
      "561:                   if (sync_timer->ref > 0) {",
      "562:                   g_source_remove(sync_timer->ref); sync_timer->ref = 0;}",
      "563:                   return -ENOMSG) ;",
      "",
      "[Added Lines]",
      "540:     start_time = time(NULL);",
      "541:     remaining_time = cib->call_timeout ? cib->call_timeout : 60;",
      "543:     while (remaining_time > 0 && !disconnected) {",
      "547:         crm_recv_remote_msg(private->command.session, &private->command.recv_buf, private->command.encrypted, remaining_time * 1000, &disconnected);",
      "548:         op_reply = crm_parse_remote_buffer(&private->command.recv_buf);",
      "550:         if (!op_reply) {",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "580:         free_xml(op_reply);",
      "581:         op_reply = NULL;",
      "591:     }",
      "",
      "[Removed Lines]",
      "582:     }",
      "584:     if (sync_timer->ref > 0) {",
      "585:         g_source_remove(sync_timer->ref);",
      "586:         sync_timer->ref = 0;",
      "587:     }",
      "589:     if (timer_expired) {",
      "590:         return -ETIME;",
      "",
      "[Added Lines]",
      "575:         remaining_time = time(NULL) - start_time;",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "600:         crm_err(\"No reply message - empty\");",
      "601:         return -ENOMSG;",
      "602:     }",
      "",
      "[Removed Lines]",
      "599:     if (op_reply == NULL) {",
      "",
      "[Added Lines]",
      "584:     if (disconnected) {",
      "585:         crm_err(\"Disconnected while waiting for reply.\");",
      "586:         return -ENOTCONN;",
      "587:     } else if (op_reply == NULL) {",
      "",
      "---------------"
    ],
    "lib/common/mainloop.c||lib/common/mainloop.c": [
      "File: lib/common/mainloop.c -> lib/common/mainloop.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "178:     source->trigger = FALSE;",
      "179:     if (source->id > 0) {",
      "180:         g_source_remove(source->id);",
      "181:     }",
      "182:     return TRUE;",
      "183: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "181:         source->id = 0;",
      "",
      "---------------"
    ],
    "lib/common/remote.c||lib/common/remote.c": [
      "File: lib/common/remote.c -> lib/common/remote.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "25: #include <sys/stat.h>",
      "26: #include <unistd.h>",
      "27: #include <sys/socket.h>",
      "29: #include <netinet/ip.h>",
      "31: #include <stdlib.h>",
      "32: #include <errno.h>",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "28: #include <arpa/inet.h>",
      "30: #include <netdb.h>",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "42: #endif",
      "44: #ifdef HAVE_GNUTLS_GNUTLS_H",
      "46:     GNUTLS_KX_ANON_DH,",
      "47:     GNUTLS_KX_DHE_RSA,",
      "48:     GNUTLS_KX_DHE_DSS,",
      "",
      "[Removed Lines]",
      "45: const int tls_kx_order[] = {",
      "",
      "[Added Lines]",
      "47: const int anon_tls_kx_order[] = {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "50:     0",
      "51: };",
      "67: {",
      "69:     gnutls_session *session = gnutls_malloc(sizeof(gnutls_session));",
      "71:     gnutls_init(session, type);",
      "",
      "[Removed Lines]",
      "53: gnutls_anon_client_credentials anon_cred_c;",
      "54: gnutls_anon_server_credentials anon_cred_s;",
      "55: static char *cib_send_tls(gnutls_session * session, xmlNode * msg);",
      "56: static char *cib_recv_tls(gnutls_session * session);",
      "57: #endif",
      "59: char *cib_recv_plaintext(int sock);",
      "60: char *cib_send_plaintext(int sock, xmlNode * msg);",
      "62: #ifdef HAVE_GNUTLS_GNUTLS_H",
      "63: gnutls_session *create_tls_session(int csock, int type);",
      "65: gnutls_session *",
      "66: create_tls_session(int csock, int type /* GNUTLS_SERVER, GNUTLS_CLIENT */ )",
      "68:     int rc = 0;",
      "",
      "[Added Lines]",
      "55: int",
      "56: crm_initiate_client_tls_handshake(void *session_data, int timeout_ms)",
      "57: {",
      "58:     int rc = 0;",
      "59:     int pollrc = 0;",
      "60:     time_t start = time(NULL);",
      "61:     gnutls_session *session = session_data;",
      "63:     do {",
      "64:         rc = gnutls_handshake(*session);",
      "65:         if (rc == GNUTLS_E_INTERRUPTED || rc == GNUTLS_E_AGAIN) {",
      "66:             pollrc = crm_recv_remote_ready(session, TRUE, 1000);",
      "67:             if (pollrc < 0) {",
      "69:                 rc = -1;",
      "70:             }",
      "71:         }",
      "72:     } while (((time(NULL) - start) < (timeout_ms/1000)) &&",
      "73:             (rc == GNUTLS_E_INTERRUPTED || rc == GNUTLS_E_AGAIN));",
      "75:     return rc;",
      "76: }",
      "78: void *",
      "79: crm_create_anon_tls_session(int csock, int type /* GNUTLS_SERVER, GNUTLS_CLIENT */, void *credentials)",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "76: #  else",
      "77:     gnutls_set_default_priority(*session);",
      "79: #  endif",
      "80:     gnutls_transport_set_ptr(*session, (gnutls_transport_ptr) GINT_TO_POINTER(csock));",
      "81:     switch (type) {",
      "88:     }",
      "100:     return session;",
      "101: }",
      "105: {",
      "113:     }",
      "142:         }",
      "144:     }",
      "148: }",
      "150: static char *",
      "152: {",
      "153:     char *buf = NULL;",
      "155:     int rc = 0;",
      "159:     if (session == NULL) {",
      "161:     }",
      "165:     while (TRUE) {",
      "182:             len += rc;",
      "198:         }",
      "199:     }",
      "204: }",
      "205: #endif",
      "209: {",
      "236:             goto retry;",
      "240:         }",
      "241:     }",
      "245: }",
      "249: {",
      "250:     char *buf = NULL;",
      "252:     ssize_t rc = 0;",
      "253:     ssize_t len = 0;",
      "280:             CRM_ASSERT(buf != NULL);",
      "285:             len += rc;",
      "291:         }",
      "292:     }",
      "297: }",
      "301: {",
      "302:     if (encrypted) {",
      "303: #ifdef HAVE_GNUTLS_GNUTLS_H",
      "305: #else",
      "306:         CRM_ASSERT(encrypted == FALSE);",
      "307: #endif",
      "308:     } else {",
      "310:     }",
      "311: }",
      "313: xmlNode *",
      "315: {",
      "317:     xmlNode *xml = NULL;",
      "319:     if (encrypted) {",
      "320: #ifdef HAVE_GNUTLS_GNUTLS_H",
      "322: #else",
      "323:         CRM_ASSERT(encrypted == FALSE);",
      "324: #endif",
      "325:     } else {",
      "327:     }",
      "328:     if (reply == NULL || strlen(reply) == 0) {",
      "329:         crm_trace(\"Empty reply\");",
      "335:         }",
      "336:     }",
      "340: }",
      "",
      "[Removed Lines]",
      "78:     gnutls_kx_set_priority(*session, tls_kx_order);",
      "82:         case GNUTLS_SERVER:",
      "83:             gnutls_credentials_set(*session, GNUTLS_CRD_ANON, anon_cred_s);",
      "84:             break;",
      "85:         case GNUTLS_CLIENT:",
      "86:             gnutls_credentials_set(*session, GNUTLS_CRD_ANON, anon_cred_c);",
      "87:             break;",
      "90:     do {",
      "91:         rc = gnutls_handshake(*session);",
      "92:     } while (rc == GNUTLS_E_INTERRUPTED || rc == GNUTLS_E_AGAIN);",
      "94:     if (rc < 0) {",
      "95:         crm_err(\"Handshake failed: %s\", gnutls_strerror(rc));",
      "96:         gnutls_deinit(*session);",
      "97:         gnutls_free(session);",
      "98:         return NULL;",
      "99:     }",
      "103: static char *",
      "104: cib_send_tls(gnutls_session * session, xmlNode * msg)",
      "106:     char *xml_text = NULL;",
      "108: #  if 0",
      "109:     const char *name = crm_element_name(msg);",
      "111:     if (safe_str_neq(name, \"cib_command\")) {",
      "112:         xmlNodeSetName(msg, \"cib_result\");",
      "114: #  endif",
      "115:     xml_text = dump_xml_unformatted(msg);",
      "116:     if (xml_text != NULL) {",
      "117:         char *unsent = xml_text;",
      "118:         int len = strlen(xml_text);",
      "119:         int rc = 0;",
      "122:         crm_trace(\"Message size: %d\", len);",
      "124:         while (TRUE) {",
      "125:             rc = gnutls_record_send(*session, unsent, len);",
      "126:             crm_debug(\"Sent %d bytes\", rc);",
      "128:             if (rc == GNUTLS_E_INTERRUPTED || rc == GNUTLS_E_AGAIN) {",
      "129:                 crm_debug(\"Retry\");",
      "131:             } else if (rc < 0) {",
      "132:                 crm_debug(\"Connection terminated\");",
      "133:                 break;",
      "135:             } else if (rc < len) {",
      "136:                 crm_debug(\"Only sent %d of %d bytes\", rc, len);",
      "137:                 len -= rc;",
      "138:                 unsent += rc;",
      "139:             } else {",
      "140:                 break;",
      "141:             }",
      "145:     free(xml_text);",
      "146:     return NULL;",
      "151: cib_recv_tls(gnutls_session * session)",
      "156:     int len = 0;",
      "157:     int chunk_size = 1024;",
      "160:         return NULL;",
      "163:     buf = calloc(1, chunk_size);",
      "166:         errno = 0;",
      "167:         rc = gnutls_record_recv(*session, buf + len, chunk_size);",
      "168:         crm_trace(\"Got %d more bytes. errno=%d\", rc, errno);",
      "170:         if (rc == GNUTLS_E_INTERRUPTED || rc == GNUTLS_E_AGAIN) {",
      "171:             crm_trace(\"Retry\");",
      "173:         } else if (rc == GNUTLS_E_UNEXPECTED_PACKET_LENGTH) {",
      "174:             crm_trace(\"Session disconnected\");",
      "175:             goto bail;",
      "177:         } else if (rc < 0) {",
      "178:             crm_err(\"Error receiving message: %s (%d)\", gnutls_strerror(rc), rc);",
      "179:             goto bail;",
      "181:         } else if (rc == chunk_size) {",
      "183:             chunk_size *= 2;",
      "184:             buf = realloc(buf, len + chunk_size);",
      "185:             crm_trace(\"Retry with %d more bytes\", (int)chunk_size);",
      "186:             CRM_ASSERT(buf != NULL);",
      "188:         } else if (buf[len + rc - 1] != 0) {",
      "189:             crm_trace(\"Last char is %d '%c'\", buf[len + rc - 1], buf[len + rc - 1]);",
      "190:             crm_trace(\"Retry with %d more bytes\", (int)chunk_size);",
      "191:             len += rc;",
      "192:             buf = realloc(buf, len + chunk_size);",
      "193:             CRM_ASSERT(buf != NULL);",
      "195:         } else {",
      "196:             crm_trace(\"Got %d more bytes\", (int)rc);",
      "197:             return buf;",
      "200:   bail:",
      "201:     free(buf);",
      "202:     return NULL;",
      "207: char *",
      "208: cib_send_plaintext(int sock, xmlNode * msg)",
      "210:     char *xml_text = dump_xml_unformatted(msg);",
      "212:     if (xml_text != NULL) {",
      "213:         int rc = 0;",
      "214:         char *unsent = xml_text;",
      "215:         int len = strlen(xml_text);",
      "218:         crm_trace(\"Message on socket %d: size=%d\", sock, len);",
      "219:   retry:",
      "220:         rc = write(sock, unsent, len);",
      "221:         if (rc < 0) {",
      "222:             switch (errno) {",
      "223:                 case EINTR:",
      "224:                 case EAGAIN:",
      "225:                     crm_trace(\"Retry\");",
      "226:                     goto retry;",
      "227:                 default:",
      "228:                     crm_perror(LOG_ERR, \"Could only write %d of the remaining %d bytes\", rc, len);",
      "229:                     break;",
      "230:             }",
      "232:         } else if (rc < len) {",
      "233:             crm_trace(\"Only sent %d of %d remaining bytes\", rc, len);",
      "234:             len -= rc;",
      "235:             unsent += rc;",
      "238:         } else {",
      "239:             crm_trace(\"Sent %d bytes: %.100s\", rc, xml_text);",
      "242:     free(xml_text);",
      "243:     return NULL;",
      "247: char *",
      "248: cib_recv_plaintext(int sock)",
      "254:     ssize_t chunk_size = 512;",
      "256:     buf = calloc(1, chunk_size);",
      "258:     while (1) {",
      "259:         errno = 0;",
      "260:         rc = read(sock, buf + len, chunk_size);",
      "261:         crm_trace(\"Got %d more bytes. errno=%d\", (int)rc, errno);",
      "263:         if (errno == EINTR || errno == EAGAIN) {",
      "264:             crm_trace(\"Retry: %d\", (int)rc);",
      "265:             if (rc > 0) {",
      "266:                 len += rc;",
      "267:                 buf = realloc(buf, len + chunk_size);",
      "268:                 CRM_ASSERT(buf != NULL);",
      "269:             }",
      "271:         } else if (rc < 0) {",
      "272:             crm_perror(LOG_ERR, \"Error receiving message: %d\", (int)rc);",
      "273:             goto bail;",
      "275:         } else if (rc == chunk_size) {",
      "276:             len += rc;",
      "277:             chunk_size *= 2;",
      "278:             buf = realloc(buf, len + chunk_size);",
      "279:             crm_trace(\"Retry with %d more bytes\", (int)chunk_size);",
      "282:         } else if (buf[len + rc - 1] != 0) {",
      "283:             crm_trace(\"Last char is %d '%c'\", buf[len + rc - 1], buf[len + rc - 1]);",
      "284:             crm_trace(\"Retry with %d more bytes\", (int)chunk_size);",
      "286:             buf = realloc(buf, len + chunk_size);",
      "287:             CRM_ASSERT(buf != NULL);",
      "289:         } else {",
      "290:             return buf;",
      "293:   bail:",
      "294:     free(buf);",
      "295:     return NULL;",
      "299: void",
      "300: crm_send_remote_msg(void *session, xmlNode * msg, gboolean encrypted)",
      "304:         cib_send_tls(session, msg);",
      "309:         cib_send_plaintext(GPOINTER_TO_INT(session), msg);",
      "314: crm_recv_remote_msg(void *session, gboolean encrypted)",
      "316:     char *reply = NULL;",
      "321:         reply = cib_recv_tls(session);",
      "326:         reply = cib_recv_plaintext(GPOINTER_TO_INT(session));",
      "331:     } else {",
      "332:         xml = string2xml(reply);",
      "333:         if (xml == NULL) {",
      "334:             crm_err(\"Couldn't parse: '%.120s'\", reply);",
      "338:     free(reply);",
      "339:     return xml;",
      "",
      "[Added Lines]",
      "90:     gnutls_kx_set_priority(*session, anon_tls_kx_order);",
      "94:     case GNUTLS_SERVER:",
      "95:         gnutls_credentials_set(*session, GNUTLS_CRD_ANON, (gnutls_anon_server_credentials_t) credentials);",
      "96:         break;",
      "97:     case GNUTLS_CLIENT:",
      "98:         gnutls_credentials_set(*session, GNUTLS_CRD_ANON, (gnutls_anon_client_credentials_t) credentials);",
      "99:         break;",
      "105: static int",
      "106: crm_send_tls(gnutls_session * session, const char *buf, size_t len)",
      "108:     const char *unsent = buf;",
      "109:     int rc = 0;",
      "110:     int total_send;",
      "112:     if (buf == NULL) {",
      "113:         return -1;",
      "116:     total_send = len;",
      "117:     crm_trace(\"Message size: %d\", len);",
      "119:     while (TRUE) {",
      "120:         rc = gnutls_record_send(*session, unsent, len);",
      "122:         if (rc == GNUTLS_E_INTERRUPTED || rc == GNUTLS_E_AGAIN) {",
      "123:             crm_debug(\"Retry\");",
      "125:         } else if (rc < 0) {",
      "126:             crm_err(\"Connection terminated rc = %d\", rc);",
      "127:             break;",
      "129:         } else if (rc < len) {",
      "130:             crm_debug(\"Only sent %d of %d bytes\", rc, len);",
      "131:             len -= rc;",
      "132:             unsent += rc;",
      "133:         } else {",
      "134:             crm_debug(\"Sent %d bytes\", rc);",
      "135:             break;",
      "139:     return rc < 0 ? rc : total_send;",
      "157: crm_recv_tls(gnutls_session * session, size_t max_size, size_t *recv_len, int *disconnected)",
      "161:     size_t len = 0;",
      "162:     size_t chunk_size = max_size ? max_size : 1024;",
      "163:     size_t buf_size = 0;",
      "164:     size_t read_size = 0;",
      "167:         if (disconnected) {",
      "169:         }",
      "170:         goto done;",
      "173:     buf = calloc(1, chunk_size + 1);",
      "174:     buf_size = chunk_size;",
      "177:         read_size = buf_size - len;",
      "180:         if (!max_size && (read_size < (chunk_size / 2))) {",
      "181:             buf_size += chunk_size;",
      "182:             crm_trace(\"Grow buffer by %d more bytes. buf is now %d bytes\", (int)chunk_size, buf_size);",
      "183:             buf = realloc(buf, buf_size + 1);",
      "184:             CRM_ASSERT(buf != NULL);",
      "186:             read_size = buf_size - len;",
      "187:         }",
      "189:         rc = gnutls_record_recv(*session, buf + len, read_size);",
      "191:         if (rc > 0) {",
      "192:             crm_trace(\"Got %d more bytes.\", rc);",
      "195:             buf[len] = '\\0';",
      "196:         }",
      "197:         if (max_size && (max_size == read_size)) {",
      "198:             crm_trace(\"Buffer max read size %d met\" , max_size);",
      "199:             goto done;",
      "200:         }",
      "203:         if (rc == GNUTLS_E_INTERRUPTED) {",
      "204:             crm_trace(\"EINTR encoutered, retry tls read\");",
      "205:         } else if (rc == GNUTLS_E_AGAIN) {",
      "206:             crm_trace(\"non-blocking, exiting read on rc = %d\", rc);",
      "207:             goto done;",
      "208:         } else if (rc <= 0) {",
      "209:             if (rc == 0) {",
      "210:                 crm_debug(\"EOF encoutered during TLS read\");",
      "211:             } else {",
      "212:                 crm_debug(\"Error receiving message: %s (%d)\", gnutls_strerror(rc), rc);",
      "213:             }",
      "214:             if (disconnected) {",
      "216:             }",
      "217:             goto done;",
      "221: done:",
      "222:     if (recv_len) {",
      "224:     }",
      "225:     if (!len) {",
      "226:         free(buf);",
      "227:         buf = NULL;",
      "228:     }",
      "229:     return buf;",
      "234: static int",
      "235: crm_send_plaintext(int sock, const char *buf, size_t len)",
      "238:     int rc = 0;",
      "239:     const char *unsent = buf;",
      "240:     int total_send;",
      "242:     if (buf == NULL) {",
      "243:         return -1;",
      "244:     }",
      "245:     total_send = len;",
      "247:     crm_trace(\"Message on socket %d: size=%d\", sock, len);",
      "248:   retry:",
      "249:     rc = write(sock, unsent, len);",
      "250:     if (rc < 0) {",
      "251:         switch (errno) {",
      "252:         case EINTR:",
      "253:         case EAGAIN:",
      "254:             crm_trace(\"Retry\");",
      "256:         default:",
      "257:             crm_perror(LOG_ERR, \"Could only write %d of the remaining %d bytes\", rc, (int) len);",
      "258:             break;",
      "261:     } else if (rc < len) {",
      "262:         crm_trace(\"Only sent %d of %d remaining bytes\", rc, len);",
      "263:         len -= rc;",
      "264:         unsent += rc;",
      "265:         goto retry;",
      "267:      } else {",
      "268:         crm_trace(\"Sent %d bytes: %.100s\", rc, buf);",
      "271:     return rc < 0 ? rc : total_send;",
      "288: static char *",
      "289: crm_recv_plaintext(int sock, size_t max_size, size_t *recv_len, int *disconnected)",
      "294:     ssize_t chunk_size = max_size ? max_size : 1024;",
      "295:     size_t buf_size = 0;",
      "296:     size_t read_size = 0;",
      "298:     if (sock <= 0) {",
      "299:         if (disconnected) {",
      "301:         }",
      "302:         goto done;",
      "303:     }",
      "305:     buf = calloc(1, chunk_size + 1);",
      "306:     buf_size = chunk_size;",
      "308:     while (TRUE) {",
      "309:         errno = 0;",
      "310:         read_size = buf_size - len;",
      "313:         if (!max_size && (read_size < (chunk_size / 2))) {",
      "314:             buf_size += chunk_size;",
      "315:             crm_trace(\"Grow buffer by %d more bytes. buf is now %d bytes\", (int)chunk_size, buf_size);",
      "316:             buf = realloc(buf, buf_size + 1);",
      "319:             read_size = buf_size - len;",
      "320:         }",
      "322:         rc = read(sock, buf + len, chunk_size);",
      "324:         if (rc > 0) {",
      "325:             crm_trace(\"Got %d more bytes. errno=%d\", (int)rc, errno);",
      "328:             buf[len] = '\\0';",
      "329:         }",
      "330:         if (max_size && (max_size == read_size)) {",
      "331:             crm_trace(\"Buffer max read size %d met\" , max_size);",
      "332:             goto done;",
      "333:         }",
      "335:         if (rc > 0) {",
      "336:             continue;",
      "337:         } else if (rc == 0) {",
      "338:             if (disconnected) {",
      "340:             }",
      "341:             crm_trace(\"EOF encoutered during read\");",
      "342:             goto done;",
      "343:         }",
      "346:         if (errno == EINTR) {",
      "347:             crm_trace(\"EINTER encoutered, retry socket read.\");",
      "348:         } else if (errno == EAGAIN) {",
      "349:             crm_trace(\"non-blocking, exiting read on rc = %d\", rc);",
      "350:             goto done;",
      "351:         } else if (errno <= 0) {",
      "352:             if (disconnected) {",
      "354:             }",
      "355:             crm_debug(\"Error receiving message: %d\", (int)rc);",
      "356:             goto done;",
      "360: done:",
      "361:     if (recv_len) {",
      "363:     }",
      "364:     if (!len) {",
      "365:         free(buf);",
      "366:         buf = NULL;",
      "367:     }",
      "368:     return buf;",
      "371: static int",
      "372: crm_send_remote_msg_raw(void *session, const char *buf, size_t len, gboolean encrypted)",
      "374:     int rc = -1;",
      "377:         rc = crm_send_tls(session, buf, len);",
      "382:         rc = crm_send_plaintext(GPOINTER_TO_INT(session), buf, len);",
      "384:     return rc;",
      "387: int",
      "388: crm_send_remote_msg(void *session, xmlNode * msg, gboolean encrypted)",
      "389: {",
      "390:     int rc = -1;",
      "391:     char *xml_text = NULL;",
      "392:     int len = 0;",
      "394:     xml_text = dump_xml_unformatted(msg);",
      "395:     if (xml_text) {",
      "396:         len = strlen(xml_text);",
      "397:     } else {",
      "398:         crm_err(\"Invalid XML, can not send msg\");",
      "399:         return -1;",
      "400:     }",
      "402:     rc = crm_send_remote_msg_raw(session, xml_text, len, encrypted);",
      "403:     if (rc < 0) {",
      "404:         goto done;",
      "405:     }",
      "406:     rc = crm_send_remote_msg_raw(session, REMOTE_MSG_TERMINATOR, strlen(REMOTE_MSG_TERMINATOR), encrypted);",
      "408: done:",
      "409:     if (rc < 0) {",
      "410:         crm_err(\"Failed to send remote msg, rc = %d\", rc);",
      "411:     }",
      "413:     free(xml_text);",
      "414:     return rc;",
      "415: }",
      "423: crm_parse_remote_buffer(char **msg_buf)",
      "425:     char *buf = NULL;",
      "426:     char *start = NULL;",
      "427:     char *end = NULL;",
      "430:     if (*msg_buf == NULL) {",
      "431:         return NULL;",
      "432:     }",
      "435:     buf = *msg_buf;",
      "439:     start = buf;",
      "440:     end = strstr(start, REMOTE_MSG_TERMINATOR);",
      "442:     while (!xml && end) {",
      "445:         end[0] = '\\0';",
      "446:         end += strlen(REMOTE_MSG_TERMINATOR);",
      "448:         xml = string2xml(start);",
      "449:         if (xml == NULL) {",
      "450:             crm_err(\"Couldn't parse: '%.120s'\", start);",
      "451:         }",
      "452:         start = end;",
      "453:         end = strstr(start, REMOTE_MSG_TERMINATOR);",
      "454:     }",
      "456:     if (xml && start) {",
      "459:         free(buf);",
      "460:     } else if (!xml) {",
      "463:     }",
      "465:     return xml;",
      "466: }",
      "476: int",
      "477: crm_recv_remote_ready(void *session, gboolean encrypted, int timeout /* ms */)",
      "478: {",
      "479:     struct pollfd fds = { 0, };",
      "480:     int sock = 0;",
      "481:     void *sock_ptr = NULL;",
      "482:     int rc = 0;",
      "483:     time_t start;",
      "485:     if (encrypted) {",
      "486: #ifdef HAVE_GNUTLS_GNUTLS_H",
      "487:         gnutls_session *tls_session = session;",
      "488:         sock_ptr = gnutls_transport_get_ptr(*tls_session);",
      "489: #else",
      "490:         CRM_ASSERT(encrypted == FALSE);",
      "491: #endif",
      "492:     } else {",
      "493:         sock_ptr = session;",
      "494:     }",
      "496:     sock = GPOINTER_TO_INT(sock_ptr);",
      "497:     if (sock <= 0) {",
      "498:         return -ENOTCONN;",
      "499:     }",
      "501:     start = time(NULL);",
      "502:     errno = 0;",
      "503:     do {",
      "504:         fds.fd = sock;",
      "505:         fds.events = POLLIN;",
      "510:         if (errno == EINTR && (timeout > 0)) {",
      "511:             timeout = timeout - ((time(NULL) - start) * 1000);",
      "512:             if (timeout < 1000) {",
      "513:                 timeout = 1000;",
      "514:             }",
      "515:         }",
      "517:         rc = poll(&fds, 1, timeout);",
      "518:     } while (rc < 0 && errno == EINTR);",
      "520:     return rc;",
      "521: }",
      "523: char *",
      "524: crm_recv_remote_raw(void *session, gboolean encrypted, size_t max_recv, size_t *recv_len, int *disconnected)",
      "525: {",
      "526:     char *reply = NULL;",
      "527:     if (recv_len) {",
      "529:     }",
      "531:     if (disconnected) {",
      "533:     }",
      "537:         reply = crm_recv_tls(session, max_recv, recv_len, disconnected);",
      "542:         reply = crm_recv_plaintext(GPOINTER_TO_INT(session), max_recv, recv_len, disconnected);",
      "546:     }",
      "548:     return reply;",
      "549: }",
      "558: gboolean",
      "559: crm_recv_remote_msg(void *session, char **recv_buf, gboolean encrypted, int total_timeout /*ms */, int *disconnected)",
      "560: {",
      "561:     int ret;",
      "562:     size_t request_len = 0;",
      "563:     time_t start = time(NULL);",
      "564:     char *raw_request = NULL;",
      "565:     int remaining_timeout = 0;",
      "567:     if (total_timeout == 0) {",
      "568:         total_timeout = 10000;",
      "569:     } else if (total_timeout < 0) {",
      "570:         total_timeout = 60000;",
      "571:     }",
      "574:     remaining_timeout = total_timeout;",
      "575:     while ((remaining_timeout > 0) && !(*disconnected)) {",
      "578:         crm_trace(\"waiting to receive remote msg, starting timeout %d, remaining_timeout %d\", total_timeout, remaining_timeout);",
      "579:         ret = crm_recv_remote_ready(session, encrypted, remaining_timeout);",
      "580:         raw_request = NULL;",
      "582:         if (ret == 0) {",
      "583:             crm_err(\"poll timed out (%d ms) while waiting to receive msg\", remaining_timeout);",
      "584:             return FALSE;",
      "586:         } else if (ret < 0) {",
      "587:             if (errno != EINTR) {",
      "588:                 crm_debug(\"poll returned error while waiting for msg, rc: %d, errno: %d\", ret, errno);",
      "590:                 return FALSE;",
      "591:             }",
      "592:             crm_debug(\"poll EINTR encountered during poll, retrying\");",
      "593:         } else {",
      "594:             raw_request = crm_recv_remote_raw(session, encrypted, 0, &request_len, disconnected);",
      "595:         }",
      "597:         remaining_timeout = remaining_timeout - ((time(NULL) - start) * 1000);",
      "599:         if (!raw_request) {",
      "600:             crm_debug(\"Empty msg received after poll\");",
      "601:             continue;",
      "602:         }",
      "604:         if (*recv_buf) {",
      "605:             int old_len = strlen(*recv_buf);",
      "607:             crm_trace(\"Expanding recv buffer from %d to %d\", old_len, old_len+request_len);",
      "610:             memcpy(*recv_buf + old_len, raw_request, request_len);",
      "612:             free(raw_request);",
      "613:         } else {",
      "615:         }",
      "617:         if (strstr(*recv_buf, REMOTE_MSG_TERMINATOR)) {",
      "618:             return TRUE;",
      "622:     return FALSE;",
      "631: int",
      "632: crm_remote_tcp_connect(const char *host, int port)",
      "633: {",
      "634:     struct addrinfo *res;",
      "635:     struct addrinfo *rp;",
      "636:     struct addrinfo hints;",
      "637:     const char *server = host;",
      "638:     int ret_ga;",
      "639:     int sock;",
      "642:     memset(&hints, 0, sizeof(struct addrinfo));",
      "644:     hints.ai_socktype = SOCK_STREAM;",
      "645:     hints.ai_flags = AI_CANONNAME;",
      "647:     crm_debug(\"Looking up %s\", server);",
      "648:     ret_ga = getaddrinfo(server, NULL, &hints, &res);",
      "649:     if (ret_ga) {",
      "650:         crm_err(\"getaddrinfo: %s\", gai_strerror(ret_ga));",
      "651:         return -1;",
      "652:     }",
      "654:     if (!res || !res->ai_addr) {",
      "655:         crm_err(\"getaddrinfo failed\");",
      "656:         return -1;",
      "657:     }",
      "659:     for (rp = res; rp != NULL; rp = rp->ai_next) {",
      "660:         struct sockaddr *addr = rp->ai_addr;",
      "661:         int flag = 0;",
      "662:         if (!addr) {",
      "663:             continue;",
      "664:         }",
      "666:         if (rp->ai_canonname) {",
      "667:             server = res->ai_canonname;",
      "668:         }",
      "669:         crm_debug(\"Got address %s for %s\", server, host);",
      "672:         sock = socket(rp->ai_family, SOCK_STREAM, IPPROTO_TCP);",
      "673:         if (sock == -1) {",
      "674:             crm_err(\"Socket creation failed for remote client connection.\");",
      "675:             continue;",
      "676:         }",
      "677:         if (addr->sa_family == AF_INET6) {",
      "678:             struct sockaddr_in6 *addr_in = (struct sockaddr_in6 *) addr;",
      "679:             addr_in->sin6_port = htons(port);",
      "680:         } else {",
      "681:             struct sockaddr_in *addr_in = (struct sockaddr_in *) addr;",
      "682:             addr_in->sin_port = htons(port);",
      "683:             crm_info(\"Attempting to connect to remote server at %s:%d\", inet_ntoa(addr_in->sin_addr), port);",
      "684:         }",
      "686:         if (connect(sock, rp->ai_addr, rp->ai_addrlen) == 0) {",
      "687:             if ((flag = fcntl(sock, F_GETFL)) >= 0) {",
      "688:                 if (fcntl(sock, F_SETFL, flag | O_NONBLOCK) < 0) {",
      "689:                     crm_err( \"fcntl() write failed\");",
      "690:                     close(sock);",
      "691:                     sock = -1;",
      "692:                     continue;",
      "693:                 }",
      "694:             }",
      "696:         }",
      "698:         close(sock);",
      "699:         sock = -1;",
      "700:     }",
      "701:     freeaddrinfo(res);",
      "703:     return sock;",
      "704: }",
      "",
      "---------------"
    ],
    "tools/crm_mon.c||tools/crm_mon.c": [
      "File: tools/crm_mon.c -> tools/crm_mon.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "275:             if (rc == pcmk_ok) {",
      "276:                 rc = cib->cmds->set_connection_dnotify(cib, mon_cib_connection_destroy);",
      "277:                 if (rc == -EPROTONOSUPPORT) {",
      "279:                     if (as_console) {",
      "280:                         sleep(2);",
      "281:                     }",
      "",
      "[Removed Lines]",
      "278:                     print_as(\"Notification setup failed, won't be able to reconnect after failure\");",
      "",
      "[Added Lines]",
      "278:                     print_as(\"Notification setup not supported, won't be able to reconnect after failure\");",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "9bc07725b6aa5be5d30dfa049669b9528ce52f2a",
      "candidate_info": {
        "commit_hash": "9bc07725b6aa5be5d30dfa049669b9528ce52f2a",
        "repo": "ClusterLabs/pacemaker",
        "commit_url": "https://github.com/ClusterLabs/pacemaker/commit/9bc07725b6aa5be5d30dfa049669b9528ce52f2a",
        "files": [
          "lib/cib/cib_remote.c"
        ],
        "message": "Fix: cib: CID#1025093 - Resource leak",
        "before_after_code_files": [
          "lib/cib/cib_remote.c||lib/cib/cib_remote.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/cib/cib_remote.c||lib/cib/cib_remote.c"
          ],
          "candidate": [
            "lib/cib/cib_remote.c||lib/cib/cib_remote.c"
          ]
        }
      },
      "candidate_diff": {
        "lib/cib/cib_remote.c||lib/cib/cib_remote.c": [
          "File: lib/cib/cib_remote.c -> lib/cib/cib_remote.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "218:     connection->tls_session = NULL;",
          "219: #endif",
          "220:     sock = crm_remote_tcp_connect(private->server, private->port);",
          "222:         crm_perror(LOG_ERR, \"remote tcp connection to %s:%d failed\", private->server,",
          "223:                    private->port);",
          "224:         return -ENOTCONN;",
          "",
          "[Removed Lines]",
          "221:     if (sock <= 0) {",
          "",
          "[Added Lines]",
          "221:     if (sock < 0) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "551e27deacf9b8171e2d954fc4134e45f3bfe510",
      "candidate_info": {
        "commit_hash": "551e27deacf9b8171e2d954fc4134e45f3bfe510",
        "repo": "ClusterLabs/pacemaker",
        "commit_url": "https://github.com/ClusterLabs/pacemaker/commit/551e27deacf9b8171e2d954fc4134e45f3bfe510",
        "files": [
          "cib/callbacks.c",
          "cib/notify.c",
          "cib/remote.c",
          "include/crm/common/ipcs.h",
          "include/crm/lrmd.h",
          "include/crm_internal.h",
          "lib/cib/cib_remote.c",
          "lib/common/ipc.c",
          "lib/common/mainloop.c",
          "lib/common/remote.c",
          "lib/lrmd/lrmd_client.c",
          "lrmd/Makefile.am",
          "lrmd/lrmd.c",
          "lrmd/lrmd_private.h",
          "lrmd/main.c",
          "lrmd/regression.py.in",
          "lrmd/test.c",
          "lrmd/tls_backend.c",
          "tools/crm_mon.c"
        ],
        "message": "Merge branch 'master' of github.com:ClusterLabs/pacemaker\n\nConflicts:\n\tcib/callbacks.h\n\tcib/notify.c\n\tcib/remote.c\n\tlrmd/lrmd.c\n\tlrmd/lrmd_private.h\n\tlrmd/main.c",
        "before_after_code_files": [
          "cib/callbacks.c||cib/callbacks.c",
          "cib/notify.c||cib/notify.c",
          "cib/remote.c||cib/remote.c",
          "include/crm/common/ipcs.h||include/crm/common/ipcs.h",
          "include/crm/lrmd.h||include/crm/lrmd.h",
          "include/crm_internal.h||include/crm_internal.h",
          "lib/cib/cib_remote.c||lib/cib/cib_remote.c",
          "lib/common/ipc.c||lib/common/ipc.c",
          "lib/common/mainloop.c||lib/common/mainloop.c",
          "lib/common/remote.c||lib/common/remote.c",
          "lib/lrmd/lrmd_client.c||lib/lrmd/lrmd_client.c",
          "lrmd/Makefile.am||lrmd/Makefile.am",
          "lrmd/lrmd.c||lrmd/lrmd.c",
          "lrmd/lrmd_private.h||lrmd/lrmd_private.h",
          "lrmd/main.c||lrmd/main.c",
          "lrmd/regression.py.in||lrmd/regression.py.in",
          "lrmd/test.c||lrmd/test.c",
          "lrmd/tls_backend.c||lrmd/tls_backend.c",
          "tools/crm_mon.c||tools/crm_mon.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "cib/callbacks.c||cib/callbacks.c",
            "cib/notify.c||cib/notify.c",
            "cib/remote.c||cib/remote.c",
            "include/crm_internal.h||include/crm_internal.h",
            "lib/cib/cib_remote.c||lib/cib/cib_remote.c",
            "lib/common/mainloop.c||lib/common/mainloop.c",
            "lib/common/remote.c||lib/common/remote.c",
            "tools/crm_mon.c||tools/crm_mon.c"
          ],
          "candidate": [
            "cib/callbacks.c||cib/callbacks.c",
            "cib/notify.c||cib/notify.c",
            "cib/remote.c||cib/remote.c",
            "include/crm_internal.h||include/crm_internal.h",
            "lib/cib/cib_remote.c||lib/cib/cib_remote.c",
            "lib/common/mainloop.c||lib/common/mainloop.c",
            "lib/common/remote.c||lib/common/remote.c",
            "tools/crm_mon.c||tools/crm_mon.c"
          ]
        }
      },
      "candidate_diff": {
        "cib/callbacks.c||cib/callbacks.c": [
          "File: cib/callbacks.c -> cib/callbacks.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "293:         int rid = 0;",
          "295:         if(sync_reply) {",
          "302:                       rid, client_obj->name, from_peer?\"(originator of delegated request)\":\"\");",
          "304:         } else {",
          "305:             crm_trace(\"Sending an event to %s %s\",",
          "",
          "[Removed Lines]",
          "296:             CRM_LOG_ASSERT(client_obj->request_id);",
          "298:             rid = client_obj->request_id;",
          "299:             client_obj->request_id = 0;",
          "301:             crm_trace(\"Sending response %d to %s %s\",",
          "",
          "[Added Lines]",
          "296:             if (client_obj->ipcs) {",
          "297:                 CRM_LOG_ASSERT(client_obj->request_id);",
          "299:                 rid = client_obj->request_id;",
          "300:                 client_obj->request_id = 0;",
          "302:                 crm_trace(\"Sending response %d to %s %s\",",
          "304:             } else {",
          "305:                 crm_trace(\"Sending response to %s %s\",",
          "306:                       client_obj->name, from_peer?\"(originator of delegated request)\":\"\");",
          "307:             }",
          "",
          "---------------"
        ],
        "cib/notify.c||cib/notify.c": [
          "File: cib/notify.c -> cib/notify.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "83:     CRM_CHECK(client != NULL, return TRUE);",
          "84:     CRM_CHECK(update_msg != NULL, return TRUE);",
          "87:         crm_warn(\"Skipping client with NULL channel\");",
          "88:         return FALSE;",
          "89:     }",
          "",
          "[Removed Lines]",
          "86:     if (client->ipcs == NULL) {",
          "",
          "[Added Lines]",
          "86:     if (client->ipcs == NULL && client->session == NULL) {",
          "",
          "---------------"
        ],
        "cib/remote.c||cib/remote.c": [
          "File: cib/remote.c -> cib/remote.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "61: #  endif",
          "62: #endif",
          "68: extern int remote_tls_fd;",
          "69: extern gboolean cib_shutdown_flag;",
          "",
          "[Removed Lines]",
          "64: #ifdef HAVE_DECL_NANOSLEEP",
          "65: #  include <time.h>",
          "66: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "74: #ifdef HAVE_GNUTLS_GNUTLS_H",
          "75: #  define DH_BITS 1024",
          "76: gnutls_dh_params dh_params;",
          "78: static void",
          "79: debug_log(int level, const char *str)",
          "80: {",
          "81:     fputs(str, stderr);",
          "82: }",
          "86: #endif",
          "88: int num_clients;",
          "89: int authenticate_user(const char *user, const char *passwd);",
          "90: int cib_remote_listen(gpointer data);",
          "",
          "[Removed Lines]",
          "77: extern gnutls_anon_server_credentials anon_cred_s;",
          "84: extern gnutls_session *create_tls_session(int csock, int type);",
          "",
          "[Added Lines]",
          "73: gnutls_anon_server_credentials anon_cred_s;",
          "81: #define REMOTE_AUTH_TIMEOUT 10000",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "216:     return FALSE;",
          "217: }",
          "219: int",
          "220: cib_remote_listen(gpointer data)",
          "221: {",
          "223:     int csock = 0;",
          "224:     unsigned laddr;",
          "227:     struct sockaddr_in addr;",
          "228:     int ssock = *(int *)data;",
          "230: #ifdef HAVE_GNUTLS_GNUTLS_H",
          "231:     gnutls_session *session = NULL;",
          "232: #endif",
          "233:     crm_client_t *new_client = NULL;",
          "244:     static struct mainloop_fd_callbacks remote_client_fd_callbacks =",
          "245:         {",
          "246:             .dispatch = cib_remote_msg,",
          "247:             .destroy = cib_remote_connection_destroy,",
          "251:     laddr = sizeof(addr);",
          "252:     csock = accept(ssock, (struct sockaddr *)&addr, &laddr);",
          "",
          "[Removed Lines]",
          "222:     int lpc = 0;",
          "225:     time_t now = 0;",
          "226:     time_t start = time(NULL);",
          "235:     xmlNode *login = NULL;",
          "236:     const char *user = NULL;",
          "237:     const char *pass = NULL;",
          "238:     const char *tmp = NULL;",
          "240: #ifdef HAVE_DECL_NANOSLEEP",
          "242: #endif",
          "248:         };",
          "",
          "[Added Lines]",
          "214: static gboolean",
          "215: cib_remote_auth(xmlNode *login)",
          "216: {",
          "217:     const char *user = NULL;",
          "218:     const char *pass = NULL;",
          "219:     const char *tmp = NULL;",
          "221:     crm_log_xml_info(login, \"Login: \");",
          "222:     if (login == NULL) {",
          "223:         return FALSE;",
          "224:     }",
          "226:     tmp = crm_element_name(login);",
          "227:     if (safe_str_neq(tmp, \"cib_command\")) {",
          "228:         crm_err(\"Wrong tag: %s\", tmp);",
          "229:         return FALSE;",
          "230:     }",
          "232:     tmp = crm_element_value(login, \"op\");",
          "233:     if (safe_str_neq(tmp, \"authenticate\")) {",
          "234:         crm_err(\"Wrong operation: %s\", tmp);",
          "235:         return FALSE;",
          "236:     }",
          "238:     user = crm_element_value(login, \"user\");",
          "239:     pass = crm_element_value(login, \"password\");",
          "241:     if (!user || !pass) {",
          "242:         crm_err(\"missing auth credentials\");",
          "243:         return FALSE;",
          "244:     }",
          "249:     if (check_group_membership(user, CRM_DAEMON_GROUP) == FALSE) {",
          "250:         crm_err(\"User is not a member of the required group\");",
          "251:         return FALSE;",
          "253:     } else if (authenticate_user(user, pass) == FALSE) {",
          "254:         crm_err(\"PAM auth failed\");",
          "255:         return FALSE;",
          "256:     }",
          "258:     return TRUE;",
          "259: }",
          "261: static gboolean",
          "262: remote_auth_timeout_cb(gpointer data)",
          "263: {",
          "264:     crm_client_t *client = data;",
          "266:     client->remote_auth_timeout = 0;",
          "268:     if (client->remote_auth == TRUE) {",
          "269:         return FALSE;",
          "270:     }",
          "272:     mainloop_del_fd(client->remote);",
          "273:     crm_err(\"Remote client authentication timed out\");",
          "275:     return FALSE;",
          "276: }",
          "284:     int flag;",
          "295:         };",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "258:         return TRUE;",
          "259:     }",
          "261:     if (ssock == remote_tls_fd) {",
          "262: #ifdef HAVE_GNUTLS_GNUTLS_H",
          "265:         if (session == NULL) {",
          "266:             crm_err(\"TLS session creation failed\");",
          "267:             close(csock);",
          "",
          "[Removed Lines]",
          "264:         session = create_tls_session(csock, GNUTLS_SERVER);",
          "",
          "[Added Lines]",
          "308:     if ((flag = fcntl(csock, F_GETFL)) >= 0) {",
          "309:         if (fcntl(csock, F_SETFL, flag | O_NONBLOCK) < 0) {",
          "310:             crm_err( \"fcntl() write failed\");",
          "311:             close(csock);",
          "312:             return TRUE;",
          "313:         }",
          "314:     } else {",
          "315:         crm_err( \"fcntl() read failed\");",
          "316:         close(csock);",
          "317:         return TRUE;",
          "318:     }",
          "323:         session = crm_create_anon_tls_session(csock, GNUTLS_SERVER, anon_cred_s);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "270: #endif",
          "271:     }",
          "328:     num_clients++;",
          "330:     crm_client_init();",
          "331:     new_client = calloc(1, sizeof(crm_client_t));",
          "333:     new_client->id = crm_generate_uuid();",
          "336:     g_hash_table_insert(client_connections, new_client->id/* Should work */, new_client);",
          "",
          "[Removed Lines]",
          "273:     do {",
          "274:         crm_trace(\"Iter: %d\", lpc++);",
          "275:         if (ssock == remote_tls_fd) {",
          "276: #ifdef HAVE_GNUTLS_GNUTLS_H",
          "277:             login = crm_recv_remote_msg(session, TRUE);",
          "278: #endif",
          "279:         } else {",
          "280:             login = crm_recv_remote_msg(GINT_TO_POINTER(csock), FALSE);",
          "281:         }",
          "282:         if (login != NULL) {",
          "283:             break;",
          "284:         }",
          "285: #ifdef HAVE_DECL_NANOSLEEP",
          "286:         nanosleep(&sleepfast, NULL);",
          "287: #else",
          "288:         sleep(1);",
          "289: #endif",
          "290:         now = time(NULL);",
          "293:     } while (login == NULL && (start - now) < 4);",
          "295:     crm_log_xml_info(login, \"Login: \");",
          "296:     if (login == NULL) {",
          "297:         goto bail;",
          "298:     }",
          "300:     tmp = crm_element_name(login);",
          "301:     if (safe_str_neq(tmp, \"cib_command\")) {",
          "302:         crm_err(\"Wrong tag: %s\", tmp);",
          "303:         goto bail;",
          "304:     }",
          "306:     tmp = crm_element_value(login, \"op\");",
          "307:     if (safe_str_neq(tmp, \"authenticate\")) {",
          "308:         crm_err(\"Wrong operation: %s\", tmp);",
          "309:         goto bail;",
          "310:     }",
          "312:     user = crm_element_value(login, \"user\");",
          "313:     pass = crm_element_value(login, \"password\");",
          "318:     if (check_group_membership(user, CRM_DAEMON_GROUP) == FALSE) {",
          "319:         crm_err(\"User is not a member of the required group\");",
          "320:         goto bail;",
          "322:     } else if (authenticate_user(user, pass) == FALSE) {",
          "323:         crm_err(\"PAM auth failed\");",
          "324:         goto bail;",
          "325:     }",
          "334:     new_client->name = crm_element_value_copy(login, \"name\");",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "339:     new_client->user = strdup(user);",
          "340: #endif",
          "343:     if (ssock == remote_tls_fd) {",
          "344: #ifdef HAVE_GNUTLS_GNUTLS_H",
          "345:         new_client->session = session;",
          "",
          "[Removed Lines]",
          "342:     new_client->callback_id = NULL;",
          "",
          "[Added Lines]",
          "346:     new_client->remote_auth_timeout = g_timeout_add(REMOTE_AUTH_TIMEOUT, remote_auth_timeout_cb, new_client);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "349:         new_client->kind = client_type_tcp;",
          "350:         new_client->session = GINT_TO_POINTER(csock);",
          "351:     }",
          "360:     new_client->remote = mainloop_add_fd(",
          "361:         \"cib-remote-client\", G_PRIORITY_DEFAULT, csock, new_client, &remote_client_fd_callbacks);",
          "363:     return TRUE;",
          "376: }",
          "378: void",
          "379: cib_remote_connection_destroy(gpointer user_data)",
          "380: {",
          "381:     crm_client_t *client = user_data;",
          "383:     if (client == NULL) {",
          "384:         return;",
          "",
          "[Removed Lines]",
          "353:     free_xml(login);",
          "354:     login = create_xml_node(NULL, \"cib_result\");",
          "355:     crm_xml_add(login, F_CIB_OPERATION, CRM_OP_REGISTER);",
          "356:     crm_xml_add(login, F_CIB_CLIENTID, new_client->id);",
          "357:     crm_send_remote_msg(new_client->session, login, new_client->kind == client_type_tls);",
          "358:     free_xml(login);",
          "365:   bail:",
          "366:     if (ssock == remote_tls_fd) {",
          "367: #ifdef HAVE_GNUTLS_GNUTLS_H",
          "368:         gnutls_bye(*session, GNUTLS_SHUT_RDWR);",
          "369:         gnutls_deinit(*session);",
          "370:         gnutls_free(session);",
          "371: #endif",
          "372:     }",
          "373:     close(csock);",
          "374:     free_xml(login);",
          "375:     return TRUE;",
          "",
          "[Added Lines]",
          "368:     int csock = 0;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "387:     crm_trace(\"Cleaning up after client disconnect: %s/%s\",",
          "388:               crm_str(client->name), client->id);",
          "390:     crm_client_destroy(client);",
          "391:     crm_trace(\"Freed the cib client\");",
          "393:     if (cib_shutdown_flag) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "377:     num_clients--;",
          "378:     crm_trace(\"Num unfree'd clients: %d\", num_clients);",
          "380:     if (client->kind == client_type_tls) {",
          "381: #ifdef HAVE_GNUTLS_GNUTLS_H",
          "382:         if (client->session) {",
          "383:             void *sock_ptr = gnutls_transport_get_ptr(*client->session);",
          "384:             csock = GPOINTER_TO_INT(sock_ptr);",
          "385:             if (client->handshake_complete) {",
          "386:                 gnutls_bye(*client->session, GNUTLS_SHUT_WR);",
          "387:             }",
          "388:             gnutls_deinit(*client->session);",
          "389:             gnutls_free(client->session);",
          "390:         }",
          "391: #endif",
          "392:     } else {",
          "393:         csock = GPOINTER_TO_INT(client->session);",
          "394:     }",
          "395:     client->session = NULL;",
          "397:     if (csock > 0) {",
          "398:         close(csock);",
          "399:     }",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "396:     return;",
          "397: }",
          "401: {",
          "402:     const char *value = NULL;",
          "413:     value = crm_element_name(command);",
          "414:     if (safe_str_neq(value, \"cib_command\")) {",
          "415:         crm_log_xml_trace(command, \"Bad command: \");",
          "417:     }",
          "419:     if (client->name == NULL) {",
          "",
          "[Removed Lines]",
          "399: int",
          "400: cib_remote_msg(gpointer data)",
          "403:     xmlNode *command = NULL;",
          "404:     crm_client_t *client = data;",
          "406:     crm_trace(\"%s callback\", client->kind == client_type_tls ? \"secure\" : \"clear-text\");",
          "408:     command = crm_recv_remote_msg(client->session, client->kind == client_type_tls);",
          "409:     if (command == NULL) {",
          "410:         return -1;",
          "411:     }",
          "416:         goto bail;",
          "",
          "[Added Lines]",
          "411: static void",
          "412: cib_handle_remote_msg(crm_client_t *client, xmlNode *command)",
          "419:         return;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "463:     crm_log_xml_trace(command, \"Remote command: \");",
          "464:     cib_common_callback_worker(0, 0, command, client, TRUE);",
          "468:     return 0;",
          "469: }",
          "",
          "[Removed Lines]",
          "465:   bail:",
          "466:     free_xml(command);",
          "467:     command = NULL;",
          "",
          "[Added Lines]",
          "468: }",
          "470: int",
          "471: cib_remote_msg(gpointer data)",
          "472: {",
          "473:     xmlNode *command = NULL;",
          "474:     crm_client_t *client = data;",
          "475:     int disconnected = 0;",
          "476:     int timeout = client->remote_auth ? -1 : 1000;",
          "478:     crm_trace(\"%s callback\", client->kind == client_type_tls ? \"secure\" : \"clear-text\");",
          "480: #ifdef HAVE_GNUTLS_GNUTLS_H",
          "481:     if (client->kind == client_type_tls && (client->handshake_complete == FALSE)) {",
          "482:         int rc = 0;",
          "486:         do {",
          "487:             rc = gnutls_handshake(*client->session);",
          "489:             if (rc < 0 && rc != GNUTLS_E_AGAIN) {",
          "490:                 crm_err(\"Remote cib tls handshake failed\");",
          "491:                 return -1;",
          "492:             }",
          "493:         } while (rc == GNUTLS_E_INTERRUPTED);",
          "495:         if (rc == 0) {",
          "496:             crm_debug(\"Remote cib tls handshake completed\");",
          "497:             client->handshake_complete = TRUE;",
          "498:             if (client->remote_auth_timeout) {",
          "499:                 g_source_remove(client->remote_auth_timeout);",
          "500:             }",
          "502:             client->remote_auth_timeout = g_timeout_add(REMOTE_AUTH_TIMEOUT, remote_auth_timeout_cb, client);",
          "503:         }",
          "504:         return 0;",
          "505:     }",
          "506: #endif",
          "508:     crm_recv_remote_msg(client->session, &client->recv_buf, client->kind == client_type_tls, timeout, &disconnected);",
          "511:     if (client->remote_auth == FALSE) {",
          "512:         xmlNode *reg;",
          "513: #if ENABLE_ACL",
          "514:         const char *user = NULL;",
          "515: #endif",
          "516:         command = crm_parse_remote_buffer(&client->recv_buf);",
          "517:         if (cib_remote_auth(command) == FALSE) {",
          "518:             free_xml(command);",
          "519:             return -1;",
          "520:         }",
          "522:         crm_debug(\"remote connection authenticated successfully\");",
          "523:         client->remote_auth = TRUE;",
          "524:         g_source_remove(client->remote_auth_timeout);",
          "525:         client->remote_auth_timeout = 0;",
          "526:         client->name = crm_element_value_copy(command, \"name\");",
          "528: #if ENABLE_ACL",
          "529:         user = crm_element_value(command, \"user\");",
          "530:         if (user) {",
          "531:            new_client->user = strdup(user);",
          "532:         }",
          "533: #endif",
          "536:         reg = create_xml_node(NULL, \"cib_result\");",
          "537:         crm_xml_add(reg, F_CIB_OPERATION, CRM_OP_REGISTER);",
          "538:         crm_xml_add(reg, F_CIB_CLIENTID, client->id);",
          "539:         crm_send_remote_msg(client->session, reg, client->kind == client_type_tls);",
          "540:         free_xml(reg);",
          "541:         free_xml(command);",
          "542:     }",
          "544:     command = crm_parse_remote_buffer(&client->recv_buf);",
          "545:     while (command) {",
          "546:         crm_trace(\"command received\");",
          "547:         cib_handle_remote_msg(client, command);",
          "548:         free_xml(command);",
          "549:         command = crm_parse_remote_buffer(&client->recv_buf);",
          "550:     }",
          "552:     if (disconnected) {",
          "553:         crm_trace(\"disconnected while receiving remote cib msg.\");",
          "554:         return -1;",
          "555:     }",
          "",
          "---------------"
        ],
        "include/crm/common/ipcs.h||include/crm/common/ipcs.h": [
          "File: include/crm/common/ipcs.h -> include/crm/common/ipcs.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: {",
          "31:         client_type_ipc = 1,",
          "32:         client_type_tcp = 2,",
          "33:         client_type_tls = 3,",
          "34: };",
          "36: struct crm_client_s",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "33: #ifdef HAVE_GNUTLS_GNUTLS_H",
          "35: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "65:         char *recv_buf;",
          "67:         mainloop_io_t *remote;",
          "70: #ifdef HAVE_GNUTLS_GNUTLS_H",
          "71:         gnutls_session *session;",
          "73: #else",
          "74:         void *session;",
          "75: #endif",
          "",
          "[Removed Lines]",
          "66:         int remote_auth_timeout;",
          "72:         gboolean tls_handshake_complete;",
          "",
          "[Added Lines]",
          "68:         bool  remote_auth;",
          "69:         int   remote_auth_timeout;",
          "75:         gboolean handshake_complete;",
          "",
          "---------------"
        ],
        "include/crm/lrmd.h||include/crm/lrmd.h": [
          "File: include/crm/lrmd.h -> include/crm/lrmd.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "38: #define F_LRMD_OPERATION        \"lrmd_op\"",
          "39: #define F_LRMD_CLIENTNAME       \"lrmd_clientname\"",
          "40: #define F_LRMD_CLIENTID         \"lrmd_clientid\"",
          "41: #define F_LRMD_CALLBACK_TOKEN   \"lrmd_async_id\"",
          "42: #define F_LRMD_CALLID           \"lrmd_callid\"",
          "43: #define F_LRMD_CANCEL_CALLID    \"lrmd_cancel_callid\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "38: #define DEFAULT_REMOTE_KEY_LOCATION \"/etc/pacemaker/authkey\"",
          "39: #define ALT_REMOTE_KEY_LOCATION \"/etc/corosync/authkey\"",
          "40: #define DEFAULT_REMOTE_PORT 1984",
          "41: #define DEFAULT_REMOTE_USERNAME \"lrmd\"",
          "46: #define F_LRMD_REMOTE_MSG_TYPE  \"lrmd_remote_msg_type\"",
          "47: #define F_LRMD_REMOTE_MSG_ID    \"lrmd_remote_msg_id\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "80: #define T_LRMD_NOTIFY    \"lrmd_notify\"",
          "83: lrmd_t *lrmd_api_new(void);",
          "84: bool lrmd_dispatch(lrmd_t *lrmd);",
          "85: void lrmd_api_delete(lrmd_t * lrmd);",
          "86: lrmd_key_value_t *lrmd_key_value_add(lrmd_key_value_t *kvp,",
          "87:     const char *key,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "98: lrmd_t *lrmd_remote_api_new(const char *server, int port);",
          "118: int lrmd_poll(lrmd_t *lrmd, int timeout);",
          "",
          "---------------"
        ],
        "include/crm_internal.h||include/crm_internal.h": [
          "File: include/crm_internal.h -> include/crm_internal.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "199: long long crm_int_helper(const char *text, char **end_text);",
          "200: char *crm_concat(const char *prefix, const char *suffix, char join);",
          "201: char *generate_hash_key(const char *crm_msg_reference, const char *sys);",
          "205: const char *daemon_option(const char *option);",
          "206: void set_daemon_option(const char *option, const char *value);",
          "",
          "[Removed Lines]",
          "202: xmlNode *crm_recv_remote_msg(void *session, gboolean encrypted);",
          "203: void crm_send_remote_msg(void *session, xmlNode * msg, gboolean encrypted);",
          "",
          "[Added Lines]",
          "205: gboolean crm_recv_remote_msg(void *session, char **recv_buf, gboolean encrypted, int total_timeout_ms, int *disconnected);",
          "206: char *crm_recv_remote_raw(void *data, gboolean encrypted, size_t max_recv, size_t *recv_len, int *disconnected);",
          "207: int crm_send_remote_msg(void *session, xmlNode * msg, gboolean encrypted);",
          "208: int crm_recv_remote_ready(void *session, gboolean encrypted, int timeout_ms);",
          "209: xmlNode *crm_parse_remote_buffer(char **msg_buf);",
          "210: int crm_remote_tcp_connect(const char *host, int port);",
          "212: #ifdef HAVE_GNUTLS_GNUTLS_H",
          "221: int crm_initiate_client_tls_handshake(void *session_data, int timeout_ms);",
          "232: void *crm_create_anon_tls_session(int sock, int type, void *credentials);",
          "243: void *create_psk_tls_session(int csock, int type, void *credentials);",
          "244: #endif",
          "246: #define REMOTE_MSG_TERMINATOR \"\\r\\n\\r\\n\"",
          "",
          "---------------"
        ],
        "lib/cib/cib_remote.c||lib/cib/cib_remote.c": [
          "File: lib/cib/cib_remote.c -> lib/cib/cib_remote.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "38: #ifdef HAVE_GNUTLS_GNUTLS_H",
          "39: #  undef KEYFILE",
          "40: #  include <gnutls/gnutls.h>",
          "44: const int kx_prio[] = {",
          "45:     GNUTLS_KX_ANON_DH,",
          "46:     0",
          "47: };",
          "49: #else",
          "50: typedef void gnutls_session;",
          "51: #endif",
          "",
          "[Removed Lines]",
          "41: extern gnutls_anon_client_credentials anon_cred_c;",
          "42: extern gnutls_session *create_tls_session(int csock, int type);",
          "",
          "[Added Lines]",
          "41: gnutls_anon_client_credentials anon_cred_c;",
          "49: static gboolean remote_gnutls_credentials_init = FALSE;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "61:     gnutls_session *session;",
          "62:     mainloop_io_t *source;",
          "63:     char *token;",
          "64: };",
          "66: typedef struct cib_remote_opaque_s {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "65:     char *recv_buf;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "76: } cib_remote_opaque_t;",
          "78: void cib_remote_connection_destroy(gpointer user_data);",
          "80: int cib_remote_signon(cib_t * cib, const char *name, enum cib_conn_type type);",
          "81: int cib_remote_signoff(cib_t * cib);",
          "82: int cib_remote_free(cib_t * cib);",
          "",
          "[Removed Lines]",
          "79: int cib_remote_dispatch(gpointer user_data);",
          "",
          "[Added Lines]",
          "81: int cib_remote_callback_dispatch(gpointer user_data);",
          "82: int cib_remote_command_dispatch(gpointer user_data);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "158: {",
          "159:     cib_remote_opaque_t *private = cib->variant_opaque;",
          "166: #ifdef HAVE_GNUTLS_GNUTLS_H",
          "167:     if (private->command.encrypted) {",
          "178:     }",
          "179: #endif",
          "180:     return 0;",
          "181: }",
          "183: static int",
          "185: {",
          "186:     int sock;",
          "187:     cib_remote_opaque_t *private = cib->variant_opaque;",
          "189:     int rc = 0;",
          "196:     xmlNode *answer = NULL;",
          "197:     xmlNode *login = NULL;",
          "205:     connection->socket = 0;",
          "206:     connection->session = NULL;",
          "259:     }",
          "261:     if (connection->encrypted) {",
          "263: #ifdef HAVE_GNUTLS_GNUTLS_H",
          "272:             cib_tls_close(cib);",
          "273:             return -1;",
          "274:         }",
          "",
          "[Removed Lines]",
          "163:     close(private->command.socket);",
          "164:     close(private->callback.socket);",
          "168:         gnutls_bye(*(private->command.session), GNUTLS_SHUT_RDWR);",
          "169:         gnutls_deinit(*(private->command.session));",
          "170:         gnutls_free(private->command.session);",
          "172:         gnutls_bye(*(private->callback.session), GNUTLS_SHUT_RDWR);",
          "173:         gnutls_deinit(*(private->callback.session));",
          "174:         gnutls_free(private->callback.session);",
          "176:         gnutls_anon_free_client_credentials(anon_cred_c);",
          "177:         gnutls_global_deinit();",
          "184: cib_tls_signon(cib_t * cib, struct remote_connection_s *connection)",
          "188:     struct sockaddr_in addr;",
          "190:     char *server = private->server;",
          "192:     int ret_ga;",
          "193:     struct addrinfo *res;",
          "194:     struct addrinfo hints;",
          "199:     static struct mainloop_fd_callbacks cib_fd_callbacks =",
          "200:         {",
          "201:             .dispatch = cib_remote_dispatch,",
          "202:             .destroy = cib_remote_connection_destroy,",
          "203:         };",
          "209:     sock = socket(PF_INET, SOCK_STREAM, IPPROTO_TCP);",
          "210:     if (sock == -1) {",
          "211:         crm_perror(LOG_ERR, \"Socket creation failed\");",
          "212:         return -1;",
          "213:     }",
          "216:     bzero(&hints, sizeof(struct addrinfo));",
          "217:     hints.ai_flags = AI_CANONNAME;",
          "218:     hints.ai_family = AF_INET;",
          "219:     hints.ai_socktype = SOCK_RAW;",
          "221:     if (hints.ai_family == AF_INET6) {",
          "222:         hints.ai_protocol = IPPROTO_ICMPV6;",
          "223:     } else {",
          "224:         hints.ai_protocol = IPPROTO_ICMP;",
          "225:     }",
          "227:     crm_debug(\"Looking up %s\", server);",
          "228:     ret_ga = getaddrinfo(server, NULL, &hints, &res);",
          "229:     if (ret_ga) {",
          "230:         crm_err(\"getaddrinfo: %s\", gai_strerror(ret_ga));",
          "231:         close(sock);",
          "232:         return -1;",
          "233:     }",
          "235:     if (res->ai_canonname) {",
          "236:         server = res->ai_canonname;",
          "237:     }",
          "239:     crm_debug(\"Got address %s for %s\", server, private->server);",
          "241:     if (!res->ai_addr) {",
          "242:         fprintf(stderr, \"getaddrinfo failed\");",
          "243:         crm_exit(1);",
          "244:     }",
          "245: #if 1",
          "246:     memcpy(&addr, res->ai_addr, res->ai_addrlen);",
          "247: #else",
          "249:     memset(&addr, 0, sizeof(addr));",
          "250:     addr.sin_family = AF_INET;",
          "251:     addr.sin_addr.s_addr = inet_addr(server);",
          "252: #endif",
          "253:     addr.sin_port = htons(private->port);",
          "255:     if (connect(sock, (struct sockaddr *)&addr, sizeof(addr)) == -1) {",
          "256:         crm_perror(LOG_ERR, \"Connection to %s:%d failed\", server, private->port);",
          "257:         close(sock);",
          "258:         return -1;",
          "264:         gnutls_global_init();",
          "265:         gnutls_anon_allocate_client_credentials(&anon_cred_c);",
          "268:         connection->session = create_tls_session(sock, GNUTLS_CLIENT);",
          "269:         if (connection->session == NULL) {",
          "270:             crm_perror(LOG_ERR, \"Session creation for %s:%d failed\", server, private->port);",
          "271:             close(sock);",
          "",
          "[Added Lines]",
          "166:         if (private->command.session) {",
          "167:             gnutls_bye(*(private->command.session), GNUTLS_SHUT_RDWR);",
          "168:             gnutls_deinit(*(private->command.session));",
          "169:             gnutls_free(private->command.session);",
          "170:         }",
          "172:         if (private->callback.session) {",
          "173:             gnutls_bye(*(private->callback.session), GNUTLS_SHUT_RDWR);",
          "174:             gnutls_deinit(*(private->callback.session));",
          "175:             gnutls_free(private->callback.session);",
          "176:         }",
          "177:         private->command.session = NULL;",
          "178:         private->callback.session = NULL;",
          "179:         if (remote_gnutls_credentials_init) {",
          "180:             gnutls_anon_free_client_credentials(anon_cred_c);",
          "181:             gnutls_global_deinit();",
          "182:             remote_gnutls_credentials_init = FALSE;",
          "183:         }",
          "187:     if (private->command.socket) {",
          "189:         close(private->command.socket);",
          "190:     }",
          "191:     if (private->callback.socket) {",
          "193:         close(private->callback.socket);",
          "194:     }",
          "195:     private->command.socket = 0;",
          "196:     private->callback.socket = 0;",
          "198:     free(private->command.recv_buf);",
          "199:     free(private->callback.recv_buf);",
          "200:     private->command.recv_buf = NULL;",
          "201:     private->callback.recv_buf = NULL;",
          "207: cib_tls_signon(cib_t * cib, struct remote_connection_s *connection, gboolean event_channel)",
          "212:     int disconnected = 0;",
          "217:     static struct mainloop_fd_callbacks cib_fd_callbacks = { 0, };",
          "219:     cib_fd_callbacks.dispatch = event_channel ? cib_remote_callback_dispatch : cib_remote_command_dispatch;",
          "220:     cib_fd_callbacks.destroy = cib_remote_connection_destroy;",
          "225:     sock = crm_remote_tcp_connect(private->server, private->port);",
          "226:     if (sock <= 0) {",
          "227:         crm_perror(LOG_ERR, \"remote tcp connection to %s:%d failed\", private->server, private->port);",
          "230:     connection->socket = sock;",
          "234:         if (remote_gnutls_credentials_init == FALSE) {",
          "235:             gnutls_global_init();",
          "236:             gnutls_anon_allocate_client_credentials(&anon_cred_c);",
          "237:             remote_gnutls_credentials_init = TRUE;",
          "238:         }",
          "241:         connection->session = crm_create_anon_tls_session(sock, GNUTLS_CLIENT, anon_cred_c);",
          "243:         if (crm_initiate_client_tls_handshake(connection->session, DEFAULT_CLIENT_HANDSHAKE_TIMEOUT) != 0) {",
          "244:             crm_err(\"Session creation for %s:%d failed\", private->server, private->port);",
          "246:             gnutls_deinit(*connection->session);",
          "247:             gnutls_free(connection->session);",
          "248:             connection->session = NULL;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "289:     crm_send_remote_msg(connection->session, login, connection->encrypted);",
          "290:     free_xml(login);",
          "293:     crm_log_xml_trace(answer, \"Reply\");",
          "294:     if (answer == NULL) {",
          "295:         rc = -EPROTO;",
          "",
          "[Removed Lines]",
          "292:     answer = crm_recv_remote_msg(connection->session, connection->encrypted);",
          "",
          "[Added Lines]",
          "269:     crm_recv_remote_msg(connection->session, &connection->recv_buf, connection->encrypted, -1, &disconnected);",
          "271:     if (disconnected) {",
          "272:         rc = -ENOTCONN;",
          "273:     }",
          "275:     answer = crm_parse_remote_buffer(&connection->recv_buf);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "310:             connection->token = strdup(tmp_ticket);",
          "311:         }",
          "312:     }",
          "314:     if (rc != 0) {",
          "315:         cib_tls_close(cib);",
          "316:     }",
          "319:     connection->source = mainloop_add_fd(\"cib-remote\", G_PRIORITY_HIGH, connection->socket, cib, &cib_fd_callbacks);",
          "320:     return rc;",
          "321: }",
          "",
          "[Removed Lines]",
          "318:     connection->socket = sock;",
          "",
          "[Added Lines]",
          "297:     free_xml(answer);",
          "298:     answer = NULL;",
          "302:         return rc;",
          "305:     crm_trace(\"remote client connection established\");",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "331: }",
          "333: int",
          "335: {",
          "336:     cib_t *cib = user_data;",
          "337:     cib_remote_opaque_t *private = cib->variant_opaque;",
          "339:     xmlNode *msg = NULL;",
          "342:     crm_info(\"Message on callback channel\");",
          "359:         free_xml(msg);",
          "361:     }",
          "363: }",
          "365: int",
          "",
          "[Removed Lines]",
          "334: cib_remote_dispatch(gpointer user_data)",
          "340:     const char *type = NULL;",
          "343:     msg = crm_recv_remote_msg(private->callback.session, private->callback.encrypted);",
          "345:     type = crm_element_value(msg, F_TYPE);",
          "346:     crm_trace(\"Activating %s callbacks...\", type);",
          "348:     if (safe_str_eq(type, T_CIB)) {",
          "349:         cib_native_callback(cib, msg, 0, 0);",
          "351:     } else if (safe_str_eq(type, T_CIB_NOTIFY)) {",
          "352:         g_list_foreach(cib->notify_list, cib_native_notify, msg);",
          "354:     } else {",
          "355:         crm_err(\"Unknown message type: %s\", type);",
          "356:     }",
          "358:     if (msg != NULL) {",
          "360:         return 0;",
          "362:     return -1;",
          "",
          "[Added Lines]",
          "321: cib_remote_command_dispatch(gpointer user_data)",
          "322: {",
          "323:     int disconnected = 0;",
          "324:     cib_t *cib = user_data;",
          "325:     cib_remote_opaque_t *private = cib->variant_opaque;",
          "327:     crm_recv_remote_msg(private->command.session, &private->command.recv_buf, private->command.encrypted, -1, &disconnected);",
          "329:     free(private->command.recv_buf);",
          "330:     private->command.recv_buf = NULL;",
          "331:     crm_err(\"received late reply for remote cib connection, discarding\");",
          "333:     if (disconnected) {",
          "334:         return -1;",
          "335:     }",
          "336:     return 0;",
          "337: }",
          "339: int",
          "340: cib_remote_callback_dispatch(gpointer user_data)",
          "346:     int disconnected = 0;",
          "350:     crm_recv_remote_msg(private->callback.session, &private->callback.recv_buf, private->callback.encrypted, -1, &disconnected);",
          "352:     msg = crm_parse_remote_buffer(&private->callback.recv_buf);",
          "353:     while (msg) {",
          "354:         const char *type = crm_element_value(msg, F_TYPE);",
          "355:         crm_trace(\"Activating %s callbacks...\", type);",
          "357:         if (safe_str_eq(type, T_CIB)) {",
          "358:             cib_native_callback(cib, msg, 0, 0);",
          "360:         } else if (safe_str_eq(type, T_CIB_NOTIFY)) {",
          "361:             g_list_foreach(cib->notify_list, cib_native_notify, msg);",
          "363:         } else {",
          "364:             crm_err(\"Unknown message type: %s\", type);",
          "365:         }",
          "368:         msg = crm_parse_remote_buffer(&private->callback.recv_buf);",
          "369:     }",
          "371:     if (disconnected) {",
          "372:         return -1;",
          "375:     return 0;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "394:     }",
          "396:     if (rc == pcmk_ok) {",
          "398:     }",
          "400:     if (rc == pcmk_ok) {",
          "402:     }",
          "404:     if (rc == pcmk_ok) {",
          "",
          "[Removed Lines]",
          "397:         rc = cib_tls_signon(cib, &(private->command));",
          "401:         rc = cib_tls_signon(cib, &(private->callback));",
          "",
          "[Added Lines]",
          "410:         rc = cib_tls_signon(cib, &(private->command), FALSE);",
          "414:         rc = cib_tls_signon(cib, &(private->callback), TRUE);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "410:     }",
          "412:     if (rc == pcmk_ok) {",
          "414:         cib->state = cib_connected_command;",
          "415:         cib->type = cib_command;",
          "",
          "[Removed Lines]",
          "413:         fprintf(stderr, \"%s: Opened connection to %s:%d\\n\", name, private->server, private->port);",
          "",
          "[Added Lines]",
          "426:         crm_notice(\"%s: Opened connection to %s:%d\\n\", name, private->server, private->port);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "463:     return rc;",
          "464: }",
          "482: int",
          "483: cib_remote_perform_op(cib_t * cib, const char *op, const char *host, const char *section,",
          "484:                       xmlNode * data, xmlNode ** output_data, int call_options, const char *name)",
          "485: {",
          "486:     int rc = pcmk_ok;",
          "488:     xmlNode *op_msg = NULL;",
          "489:     xmlNode *op_reply = NULL;",
          "491:     cib_remote_opaque_t *private = cib->variant_opaque;",
          "497:     if (cib->state == cib_disconnected) {",
          "498:         return -ENOTCONN;",
          "499:     }",
          "",
          "[Removed Lines]",
          "466: static gboolean timer_expired = FALSE;",
          "467: static struct timer_rec_s *sync_timer = NULL;",
          "468: static gboolean",
          "469: cib_timeout_handler(gpointer data)",
          "470: {",
          "471:     struct timer_rec_s *timer = data;",
          "473:     timer_expired = TRUE;",
          "474:     crm_err(\"Call %d timed out after %ds\", timer->call_id, timer->timeout);",
          "479:     return TRUE;",
          "480: }",
          "493:     if (sync_timer == NULL) {",
          "494:         sync_timer = calloc(1, sizeof(struct timer_rec_s));",
          "495:     }",
          "",
          "[Added Lines]",
          "484:     int disconnected = 0;",
          "485:     int remaining_time = 0;",
          "486:     time_t start_time;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "524:     }",
          "526:     crm_trace(\"Sending %s message to CIB service\", op);",
          "528:     free_xml(op_msg);",
          "530:     if ((call_options & cib_discard_reply)) {",
          "",
          "[Removed Lines]",
          "527:     crm_send_remote_msg(private->command.session, op_msg, private->command.encrypted);",
          "",
          "[Added Lines]",
          "523:     if (!(call_options & cib_sync_call)) {",
          "524:         crm_send_remote_msg(private->callback.session, op_msg, private->command.encrypted);",
          "525:     } else {",
          "526:         crm_send_remote_msg(private->command.session, op_msg, private->command.encrypted);",
          "527:     }",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "538:     crm_trace(\"Waiting for a syncronous reply\");",
          "551:         int reply_id = -1;",
          "552:         int msg_id = cib->call_id;",
          "556:             break;",
          "557:         }",
          "559:         crm_element_value_int(op_reply, F_CIB_CALLID, &reply_id);",
          "565:         if (reply_id == msg_id) {",
          "566:             break;",
          "",
          "[Removed Lines]",
          "540:     if (cib->call_timeout > 0) {",
          "544:         timer_expired = FALSE;",
          "545:         sync_timer->call_id = cib->call_id;",
          "546:         sync_timer->timeout = cib->call_timeout * 1000;",
          "547:         sync_timer->ref = g_timeout_add(sync_timer->timeout, cib_timeout_handler, sync_timer);",
          "548:     }",
          "550:     while (timer_expired == FALSE) {",
          "554:         op_reply = crm_recv_remote_msg(private->command.session, private->command.encrypted);",
          "555:         if (op_reply == NULL) {",
          "560:         CRM_CHECK(reply_id > 0, free_xml(op_reply);",
          "561:                   if (sync_timer->ref > 0) {",
          "562:                   g_source_remove(sync_timer->ref); sync_timer->ref = 0;}",
          "563:                   return -ENOMSG) ;",
          "",
          "[Added Lines]",
          "540:     start_time = time(NULL);",
          "541:     remaining_time = cib->call_timeout ? cib->call_timeout : 60;",
          "543:     while (remaining_time > 0 && !disconnected) {",
          "547:         crm_recv_remote_msg(private->command.session, &private->command.recv_buf, private->command.encrypted, remaining_time * 1000, &disconnected);",
          "548:         op_reply = crm_parse_remote_buffer(&private->command.recv_buf);",
          "550:         if (!op_reply) {",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "580:         free_xml(op_reply);",
          "581:         op_reply = NULL;",
          "591:     }",
          "",
          "[Removed Lines]",
          "582:     }",
          "584:     if (sync_timer->ref > 0) {",
          "585:         g_source_remove(sync_timer->ref);",
          "586:         sync_timer->ref = 0;",
          "587:     }",
          "589:     if (timer_expired) {",
          "590:         return -ETIME;",
          "",
          "[Added Lines]",
          "575:         remaining_time = time(NULL) - start_time;",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "600:         crm_err(\"No reply message - empty\");",
          "601:         return -ENOMSG;",
          "602:     }",
          "",
          "[Removed Lines]",
          "599:     if (op_reply == NULL) {",
          "",
          "[Added Lines]",
          "584:     if (disconnected) {",
          "585:         crm_err(\"Disconnected while waiting for reply.\");",
          "586:         return -ENOTCONN;",
          "587:     } else if (op_reply == NULL) {",
          "",
          "---------------"
        ],
        "lib/common/ipc.c||lib/common/ipc.c": [
          "File: lib/common/ipc.c -> lib/common/ipc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "292:         }",
          "293:     }",
          "295:     free(c->id);",
          "296:     free(c->name);",
          "297:     free(c->user);",
          "298:     free(c->callback_id);",
          "299:     free(c);",
          "300: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "295:     if (c->remote_auth_timeout) {",
          "296:         g_source_remove(c->remote_auth_timeout);",
          "297:     }",
          "302:     free(c->user);",
          "303:     free(c->recv_buf);",
          "",
          "---------------"
        ],
        "lib/common/mainloop.c||lib/common/mainloop.c": [
          "File: lib/common/mainloop.c -> lib/common/mainloop.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "178:     source->trigger = FALSE;",
          "179:     if (source->id > 0) {",
          "180:         g_source_remove(source->id);",
          "181:     }",
          "182:     return TRUE;",
          "183: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "181:         source->id = 0;",
          "",
          "---------------"
        ],
        "lib/common/remote.c||lib/common/remote.c": [
          "File: lib/common/remote.c -> lib/common/remote.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: #include <sys/stat.h>",
          "26: #include <unistd.h>",
          "27: #include <sys/socket.h>",
          "29: #include <netinet/ip.h>",
          "31: #include <stdlib.h>",
          "32: #include <errno.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "28: #include <arpa/inet.h>",
          "30: #include <netdb.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "42: #endif",
          "44: #ifdef HAVE_GNUTLS_GNUTLS_H",
          "46:     GNUTLS_KX_ANON_DH,",
          "47:     GNUTLS_KX_DHE_RSA,",
          "48:     GNUTLS_KX_DHE_DSS,",
          "",
          "[Removed Lines]",
          "45: const int tls_kx_order[] = {",
          "",
          "[Added Lines]",
          "47: const int psk_tls_kx_order[] = {",
          "48:     GNUTLS_KX_DHE_PSK,",
          "49:     GNUTLS_KX_PSK,",
          "50: };",
          "51: const int anon_tls_kx_order[] = {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "50:     0",
          "51: };",
          "67: {",
          "69:     gnutls_session *session = gnutls_malloc(sizeof(gnutls_session));",
          "71:     gnutls_init(session, type);",
          "",
          "[Removed Lines]",
          "53: gnutls_anon_client_credentials anon_cred_c;",
          "54: gnutls_anon_server_credentials anon_cred_s;",
          "55: static char *cib_send_tls(gnutls_session * session, xmlNode * msg);",
          "56: static char *cib_recv_tls(gnutls_session * session);",
          "57: #endif",
          "59: char *cib_recv_plaintext(int sock);",
          "60: char *cib_send_plaintext(int sock, xmlNode * msg);",
          "62: #ifdef HAVE_GNUTLS_GNUTLS_H",
          "63: gnutls_session *create_tls_session(int csock, int type);",
          "65: gnutls_session *",
          "66: create_tls_session(int csock, int type /* GNUTLS_SERVER, GNUTLS_CLIENT */ )",
          "68:     int rc = 0;",
          "",
          "[Added Lines]",
          "59: int",
          "60: crm_initiate_client_tls_handshake(void *session_data, int timeout_ms)",
          "61: {",
          "62:     int rc = 0;",
          "63:     int pollrc = 0;",
          "64:     time_t start = time(NULL);",
          "65:     gnutls_session *session = session_data;",
          "67:     do {",
          "68:         rc = gnutls_handshake(*session);",
          "69:         if (rc == GNUTLS_E_INTERRUPTED || rc == GNUTLS_E_AGAIN) {",
          "70:             pollrc = crm_recv_remote_ready(session, TRUE, 1000);",
          "71:             if (pollrc < 0) {",
          "73:                 rc = -1;",
          "74:             }",
          "75:         }",
          "76:     } while (((time(NULL) - start) < (timeout_ms/1000)) &&",
          "77:             (rc == GNUTLS_E_INTERRUPTED || rc == GNUTLS_E_AGAIN));",
          "79:     return rc;",
          "80: }",
          "82: void *",
          "83: crm_create_anon_tls_session(int csock, int type /* GNUTLS_SERVER, GNUTLS_CLIENT */, void *credentials)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "76: #  else",
          "77:     gnutls_set_default_priority(*session);",
          "79: #  endif",
          "80:     gnutls_transport_set_ptr(*session, (gnutls_transport_ptr) GINT_TO_POINTER(csock));",
          "81:     switch (type) {",
          "88:     }",
          "99:     }",
          "100:     return session;",
          "101: }",
          "113:     }",
          "142:         }",
          "144:     }",
          "148: }",
          "150: static char *",
          "152: {",
          "153:     char *buf = NULL;",
          "155:     int rc = 0;",
          "159:     if (session == NULL) {",
          "161:     }",
          "165:     while (TRUE) {",
          "191:             len += rc;",
          "198:         }",
          "199:     }",
          "204: }",
          "205: #endif",
          "209: {",
          "236:             goto retry;",
          "240:         }",
          "241:     }",
          "245: }",
          "249: {",
          "250:     char *buf = NULL;",
          "252:     ssize_t rc = 0;",
          "253:     ssize_t len = 0;",
          "280:             CRM_ASSERT(buf != NULL);",
          "285:             len += rc;",
          "291:         }",
          "292:     }",
          "297: }",
          "301: {",
          "302:     if (encrypted) {",
          "303: #ifdef HAVE_GNUTLS_GNUTLS_H",
          "305: #else",
          "306:         CRM_ASSERT(encrypted == FALSE);",
          "307: #endif",
          "308:     } else {",
          "310:     }",
          "311: }",
          "313: xmlNode *",
          "315: {",
          "317:     xmlNode *xml = NULL;",
          "319:     if (encrypted) {",
          "320: #ifdef HAVE_GNUTLS_GNUTLS_H",
          "322: #else",
          "323:         CRM_ASSERT(encrypted == FALSE);",
          "324: #endif",
          "325:     } else {",
          "327:     }",
          "328:     if (reply == NULL || strlen(reply) == 0) {",
          "329:         crm_trace(\"Empty reply\");",
          "335:         }",
          "336:     }",
          "340: }",
          "",
          "[Removed Lines]",
          "78:     gnutls_kx_set_priority(*session, tls_kx_order);",
          "82:         case GNUTLS_SERVER:",
          "83:             gnutls_credentials_set(*session, GNUTLS_CRD_ANON, anon_cred_s);",
          "84:             break;",
          "85:         case GNUTLS_CLIENT:",
          "86:             gnutls_credentials_set(*session, GNUTLS_CRD_ANON, anon_cred_c);",
          "87:             break;",
          "90:     do {",
          "91:         rc = gnutls_handshake(*session);",
          "92:     } while (rc == GNUTLS_E_INTERRUPTED || rc == GNUTLS_E_AGAIN);",
          "94:     if (rc < 0) {",
          "95:         crm_err(\"Handshake failed: %s\", gnutls_strerror(rc));",
          "96:         gnutls_deinit(*session);",
          "97:         gnutls_free(session);",
          "98:         return NULL;",
          "103: static char *",
          "104: cib_send_tls(gnutls_session * session, xmlNode * msg)",
          "105: {",
          "106:     char *xml_text = NULL;",
          "108: #  if 0",
          "109:     const char *name = crm_element_name(msg);",
          "111:     if (safe_str_neq(name, \"cib_command\")) {",
          "112:         xmlNodeSetName(msg, \"cib_result\");",
          "114: #  endif",
          "115:     xml_text = dump_xml_unformatted(msg);",
          "116:     if (xml_text != NULL) {",
          "117:         char *unsent = xml_text;",
          "118:         int len = strlen(xml_text);",
          "119:         int rc = 0;",
          "122:         crm_trace(\"Message size: %d\", len);",
          "124:         while (TRUE) {",
          "125:             rc = gnutls_record_send(*session, unsent, len);",
          "126:             crm_debug(\"Sent %d bytes\", rc);",
          "128:             if (rc == GNUTLS_E_INTERRUPTED || rc == GNUTLS_E_AGAIN) {",
          "129:                 crm_debug(\"Retry\");",
          "131:             } else if (rc < 0) {",
          "132:                 crm_debug(\"Connection terminated\");",
          "133:                 break;",
          "135:             } else if (rc < len) {",
          "136:                 crm_debug(\"Only sent %d of %d bytes\", rc, len);",
          "137:                 len -= rc;",
          "138:                 unsent += rc;",
          "139:             } else {",
          "140:                 break;",
          "141:             }",
          "145:     free(xml_text);",
          "146:     return NULL;",
          "151: cib_recv_tls(gnutls_session * session)",
          "156:     int len = 0;",
          "157:     int chunk_size = 1024;",
          "160:         return NULL;",
          "163:     buf = calloc(1, chunk_size);",
          "166:         errno = 0;",
          "167:         rc = gnutls_record_recv(*session, buf + len, chunk_size);",
          "168:         crm_trace(\"Got %d more bytes. errno=%d\", rc, errno);",
          "170:         if (rc == GNUTLS_E_INTERRUPTED || rc == GNUTLS_E_AGAIN) {",
          "171:             crm_trace(\"Retry\");",
          "173:         } else if (rc == GNUTLS_E_UNEXPECTED_PACKET_LENGTH) {",
          "174:             crm_trace(\"Session disconnected\");",
          "175:             goto bail;",
          "177:         } else if (rc < 0) {",
          "178:             crm_err(\"Error receiving message: %s (%d)\", gnutls_strerror(rc), rc);",
          "179:             goto bail;",
          "181:         } else if (rc == chunk_size) {",
          "182:             len += rc;",
          "183:             chunk_size *= 2;",
          "184:             buf = realloc(buf, len + chunk_size);",
          "185:             crm_trace(\"Retry with %d more bytes\", (int)chunk_size);",
          "186:             CRM_ASSERT(buf != NULL);",
          "188:         } else if (buf[len + rc - 1] != 0) {",
          "189:             crm_trace(\"Last char is %d '%c'\", buf[len + rc - 1], buf[len + rc - 1]);",
          "190:             crm_trace(\"Retry with %d more bytes\", (int)chunk_size);",
          "192:             buf = realloc(buf, len + chunk_size);",
          "193:             CRM_ASSERT(buf != NULL);",
          "195:         } else {",
          "196:             crm_trace(\"Got %d more bytes\", (int)rc);",
          "197:             return buf;",
          "200:   bail:",
          "201:     free(buf);",
          "202:     return NULL;",
          "207: char *",
          "208: cib_send_plaintext(int sock, xmlNode * msg)",
          "210:     char *xml_text = dump_xml_unformatted(msg);",
          "212:     if (xml_text != NULL) {",
          "213:         int rc = 0;",
          "214:         char *unsent = xml_text;",
          "215:         int len = strlen(xml_text);",
          "218:         crm_trace(\"Message on socket %d: size=%d\", sock, len);",
          "219:   retry:",
          "220:         rc = write(sock, unsent, len);",
          "221:         if (rc < 0) {",
          "222:             switch (errno) {",
          "223:                 case EINTR:",
          "224:                 case EAGAIN:",
          "225:                     crm_trace(\"Retry\");",
          "226:                     goto retry;",
          "227:                 default:",
          "228:                     crm_perror(LOG_ERR, \"Could only write %d of the remaining %d bytes\", rc, len);",
          "229:                     break;",
          "230:             }",
          "232:         } else if (rc < len) {",
          "233:             crm_trace(\"Only sent %d of %d remaining bytes\", rc, len);",
          "234:             len -= rc;",
          "235:             unsent += rc;",
          "238:         } else {",
          "239:             crm_trace(\"Sent %d bytes: %.100s\", rc, xml_text);",
          "242:     free(xml_text);",
          "243:     return NULL;",
          "247: char *",
          "248: cib_recv_plaintext(int sock)",
          "254:     ssize_t chunk_size = 512;",
          "256:     buf = calloc(1, chunk_size);",
          "258:     while (1) {",
          "259:         errno = 0;",
          "260:         rc = read(sock, buf + len, chunk_size);",
          "261:         crm_trace(\"Got %d more bytes. errno=%d\", (int)rc, errno);",
          "263:         if (errno == EINTR || errno == EAGAIN) {",
          "264:             crm_trace(\"Retry: %d\", (int)rc);",
          "265:             if (rc > 0) {",
          "266:                 len += rc;",
          "267:                 buf = realloc(buf, len + chunk_size);",
          "268:                 CRM_ASSERT(buf != NULL);",
          "269:             }",
          "271:         } else if (rc < 0) {",
          "272:             crm_perror(LOG_ERR, \"Error receiving message: %d\", (int)rc);",
          "273:             goto bail;",
          "275:         } else if (rc == chunk_size) {",
          "276:             len += rc;",
          "277:             chunk_size *= 2;",
          "278:             buf = realloc(buf, len + chunk_size);",
          "279:             crm_trace(\"Retry with %d more bytes\", (int)chunk_size);",
          "282:         } else if (buf[len + rc - 1] != 0) {",
          "283:             crm_trace(\"Last char is %d '%c'\", buf[len + rc - 1], buf[len + rc - 1]);",
          "284:             crm_trace(\"Retry with %d more bytes\", (int)chunk_size);",
          "286:             buf = realloc(buf, len + chunk_size);",
          "287:             CRM_ASSERT(buf != NULL);",
          "289:         } else {",
          "290:             return buf;",
          "293:   bail:",
          "294:     free(buf);",
          "295:     return NULL;",
          "299: void",
          "300: crm_send_remote_msg(void *session, xmlNode * msg, gboolean encrypted)",
          "304:         cib_send_tls(session, msg);",
          "309:         cib_send_plaintext(GPOINTER_TO_INT(session), msg);",
          "314: crm_recv_remote_msg(void *session, gboolean encrypted)",
          "316:     char *reply = NULL;",
          "321:         reply = cib_recv_tls(session);",
          "326:         reply = cib_recv_plaintext(GPOINTER_TO_INT(session));",
          "331:     } else {",
          "332:         xml = string2xml(reply);",
          "333:         if (xml == NULL) {",
          "334:             crm_err(\"Couldn't parse: '%.120s'\", reply);",
          "338:     free(reply);",
          "339:     return xml;",
          "",
          "[Added Lines]",
          "94:     gnutls_kx_set_priority(*session, anon_tls_kx_order);",
          "98:     case GNUTLS_SERVER:",
          "99:         gnutls_credentials_set(*session, GNUTLS_CRD_ANON, (gnutls_anon_server_credentials_t) credentials);",
          "100:         break;",
          "101:     case GNUTLS_CLIENT:",
          "102:         gnutls_credentials_set(*session, GNUTLS_CRD_ANON, (gnutls_anon_client_credentials_t) credentials);",
          "103:         break;",
          "106:     return session;",
          "107: }",
          "109: void *",
          "110: create_psk_tls_session(int csock, int type /* GNUTLS_SERVER, GNUTLS_CLIENT */, void *credentials)",
          "111: {",
          "112:     gnutls_session *session = gnutls_malloc(sizeof(gnutls_session));",
          "114:     gnutls_init(session, type);",
          "115: #  ifdef HAVE_GNUTLS_PRIORITY_SET_DIRECT",
          "116:     gnutls_priority_set_direct(*session, \"NORMAL:+DHE-PSK:+PSK\", NULL);",
          "117: #  else",
          "118:     gnutls_set_default_priority(*session);",
          "119:     gnutls_kx_set_priority(*session, psk_tls_kx_order);",
          "120: #  endif",
          "121:     gnutls_transport_set_ptr(*session, (gnutls_transport_ptr) GINT_TO_POINTER(csock));",
          "122:     switch (type) {",
          "123:     case GNUTLS_SERVER:",
          "124:         gnutls_credentials_set(*session, GNUTLS_CRD_PSK, (gnutls_psk_server_credentials_t) credentials);",
          "125:         break;",
          "126:     case GNUTLS_CLIENT:",
          "127:         gnutls_credentials_set(*session, GNUTLS_CRD_PSK, (gnutls_psk_client_credentials_t) credentials);",
          "128:         break;",
          "135: static int",
          "136: crm_send_tls(gnutls_session * session, const char *buf, size_t len)",
          "137: {",
          "138:     const char *unsent = buf;",
          "139:     int rc = 0;",
          "140:     int total_send;",
          "142:     if (buf == NULL) {",
          "143:         return -1;",
          "146:     total_send = len;",
          "147:     crm_trace(\"Message size: %d\", len);",
          "149:     while (TRUE) {",
          "150:         rc = gnutls_record_send(*session, unsent, len);",
          "152:         if (rc == GNUTLS_E_INTERRUPTED || rc == GNUTLS_E_AGAIN) {",
          "153:             crm_debug(\"Retry\");",
          "155:         } else if (rc < 0) {",
          "156:             crm_err(\"Connection terminated rc = %d\", rc);",
          "157:             break;",
          "159:         } else if (rc < len) {",
          "160:             crm_debug(\"Only sent %d of %d bytes\", rc, len);",
          "161:             len -= rc;",
          "162:             unsent += rc;",
          "163:         } else {",
          "164:             crm_debug(\"Sent %d bytes\", rc);",
          "165:             break;",
          "169:     return rc < 0 ? rc : total_send;",
          "187: crm_recv_tls(gnutls_session * session, size_t max_size, size_t *recv_len, int *disconnected)",
          "191:     size_t len = 0;",
          "192:     size_t chunk_size = max_size ? max_size : 1024;",
          "193:     size_t buf_size = 0;",
          "194:     size_t read_size = 0;",
          "197:         if (disconnected) {",
          "199:         }",
          "200:         goto done;",
          "203:     buf = calloc(1, chunk_size + 1);",
          "204:     buf_size = chunk_size;",
          "207:         read_size = buf_size - len;",
          "210:         if (!max_size && (read_size < (chunk_size / 2))) {",
          "211:             buf_size += chunk_size;",
          "212:             crm_trace(\"Grow buffer by %d more bytes. buf is now %d bytes\", (int)chunk_size, buf_size);",
          "213:             buf = realloc(buf, buf_size + 1);",
          "214:             CRM_ASSERT(buf != NULL);",
          "216:             read_size = buf_size - len;",
          "217:         }",
          "219:         rc = gnutls_record_recv(*session, buf + len, read_size);",
          "221:         if (rc > 0) {",
          "222:             crm_trace(\"Got %d more bytes.\", rc);",
          "225:             buf[len] = '\\0';",
          "226:         }",
          "227:         if (max_size && (max_size == read_size)) {",
          "228:             crm_trace(\"Buffer max read size %d met\" , max_size);",
          "229:             goto done;",
          "230:         }",
          "233:         if (rc == GNUTLS_E_INTERRUPTED) {",
          "234:             crm_trace(\"EINTR encoutered, retry tls read\");",
          "235:         } else if (rc == GNUTLS_E_AGAIN) {",
          "236:             crm_trace(\"non-blocking, exiting read on rc = %d\", rc);",
          "237:             goto done;",
          "238:         } else if (rc <= 0) {",
          "239:             if (rc == 0) {",
          "240:                 crm_debug(\"EOF encoutered during TLS read\");",
          "241:             } else {",
          "242:                 crm_debug(\"Error receiving message: %s (%d)\", gnutls_strerror(rc), rc);",
          "243:             }",
          "244:             if (disconnected) {",
          "246:             }",
          "247:             goto done;",
          "251: done:",
          "252:     if (recv_len) {",
          "254:     }",
          "255:     if (!len) {",
          "256:         free(buf);",
          "257:         buf = NULL;",
          "258:     }",
          "259:     return buf;",
          "264: static int",
          "265: crm_send_plaintext(int sock, const char *buf, size_t len)",
          "268:     int rc = 0;",
          "269:     const char *unsent = buf;",
          "270:     int total_send;",
          "272:     if (buf == NULL) {",
          "273:         return -1;",
          "274:     }",
          "275:     total_send = len;",
          "277:     crm_trace(\"Message on socket %d: size=%d\", sock, len);",
          "278:   retry:",
          "279:     rc = write(sock, unsent, len);",
          "280:     if (rc < 0) {",
          "281:         switch (errno) {",
          "282:         case EINTR:",
          "283:         case EAGAIN:",
          "284:             crm_trace(\"Retry\");",
          "286:         default:",
          "287:             crm_perror(LOG_ERR, \"Could only write %d of the remaining %d bytes\", rc, (int) len);",
          "288:             break;",
          "291:     } else if (rc < len) {",
          "292:         crm_trace(\"Only sent %d of %d remaining bytes\", rc, len);",
          "293:         len -= rc;",
          "294:         unsent += rc;",
          "295:         goto retry;",
          "297:      } else {",
          "298:         crm_trace(\"Sent %d bytes: %.100s\", rc, buf);",
          "301:     return rc < 0 ? rc : total_send;",
          "318: static char *",
          "319: crm_recv_plaintext(int sock, size_t max_size, size_t *recv_len, int *disconnected)",
          "324:     ssize_t chunk_size = max_size ? max_size : 1024;",
          "325:     size_t buf_size = 0;",
          "326:     size_t read_size = 0;",
          "328:     if (sock <= 0) {",
          "329:         if (disconnected) {",
          "331:         }",
          "332:         goto done;",
          "333:     }",
          "335:     buf = calloc(1, chunk_size + 1);",
          "336:     buf_size = chunk_size;",
          "338:     while (TRUE) {",
          "339:         errno = 0;",
          "340:         read_size = buf_size - len;",
          "343:         if (!max_size && (read_size < (chunk_size / 2))) {",
          "344:             buf_size += chunk_size;",
          "345:             crm_trace(\"Grow buffer by %d more bytes. buf is now %d bytes\", (int)chunk_size, buf_size);",
          "346:             buf = realloc(buf, buf_size + 1);",
          "349:             read_size = buf_size - len;",
          "350:         }",
          "352:         rc = read(sock, buf + len, chunk_size);",
          "354:         if (rc > 0) {",
          "355:             crm_trace(\"Got %d more bytes. errno=%d\", (int)rc, errno);",
          "358:             buf[len] = '\\0';",
          "359:         }",
          "360:         if (max_size && (max_size == read_size)) {",
          "361:             crm_trace(\"Buffer max read size %d met\" , max_size);",
          "362:             goto done;",
          "363:         }",
          "365:         if (rc > 0) {",
          "366:             continue;",
          "367:         } else if (rc == 0) {",
          "368:             if (disconnected) {",
          "370:             }",
          "371:             crm_trace(\"EOF encoutered during read\");",
          "372:             goto done;",
          "373:         }",
          "376:         if (errno == EINTR) {",
          "377:             crm_trace(\"EINTER encoutered, retry socket read.\");",
          "378:         } else if (errno == EAGAIN) {",
          "379:             crm_trace(\"non-blocking, exiting read on rc = %d\", rc);",
          "380:             goto done;",
          "381:         } else if (errno <= 0) {",
          "382:             if (disconnected) {",
          "384:             }",
          "385:             crm_debug(\"Error receiving message: %d\", (int)rc);",
          "386:             goto done;",
          "390: done:",
          "391:     if (recv_len) {",
          "393:     }",
          "394:     if (!len) {",
          "395:         free(buf);",
          "396:         buf = NULL;",
          "397:     }",
          "398:     return buf;",
          "401: static int",
          "402: crm_send_remote_msg_raw(void *session, const char *buf, size_t len, gboolean encrypted)",
          "404:     int rc = -1;",
          "407:         rc = crm_send_tls(session, buf, len);",
          "412:         rc = crm_send_plaintext(GPOINTER_TO_INT(session), buf, len);",
          "414:     return rc;",
          "417: int",
          "418: crm_send_remote_msg(void *session, xmlNode * msg, gboolean encrypted)",
          "419: {",
          "420:     int rc = -1;",
          "421:     char *xml_text = NULL;",
          "422:     int len = 0;",
          "424:     xml_text = dump_xml_unformatted(msg);",
          "425:     if (xml_text) {",
          "426:         len = strlen(xml_text);",
          "427:     } else {",
          "428:         crm_err(\"Invalid XML, can not send msg\");",
          "429:         return -1;",
          "430:     }",
          "432:     rc = crm_send_remote_msg_raw(session, xml_text, len, encrypted);",
          "433:     if (rc < 0) {",
          "434:         goto done;",
          "435:     }",
          "436:     rc = crm_send_remote_msg_raw(session, REMOTE_MSG_TERMINATOR, strlen(REMOTE_MSG_TERMINATOR), encrypted);",
          "438: done:",
          "439:     if (rc < 0) {",
          "440:         crm_err(\"Failed to send remote msg, rc = %d\", rc);",
          "441:     }",
          "443:     free(xml_text);",
          "444:     return rc;",
          "445: }",
          "453: crm_parse_remote_buffer(char **msg_buf)",
          "455:     char *buf = NULL;",
          "456:     char *start = NULL;",
          "457:     char *end = NULL;",
          "460:     if (*msg_buf == NULL) {",
          "461:         return NULL;",
          "462:     }",
          "465:     buf = *msg_buf;",
          "469:     start = buf;",
          "470:     end = strstr(start, REMOTE_MSG_TERMINATOR);",
          "472:     while (!xml && end) {",
          "475:         end[0] = '\\0';",
          "476:         end += strlen(REMOTE_MSG_TERMINATOR);",
          "478:         xml = string2xml(start);",
          "479:         if (xml == NULL) {",
          "480:             crm_err(\"Couldn't parse: '%.120s'\", start);",
          "481:         }",
          "482:         start = end;",
          "483:         end = strstr(start, REMOTE_MSG_TERMINATOR);",
          "484:     }",
          "486:     if (xml && start) {",
          "489:         free(buf);",
          "490:     } else if (!xml) {",
          "493:     }",
          "495:     return xml;",
          "496: }",
          "506: int",
          "507: crm_recv_remote_ready(void *session, gboolean encrypted, int timeout /* ms */)",
          "508: {",
          "509:     struct pollfd fds = { 0, };",
          "510:     int sock = 0;",
          "511:     void *sock_ptr = NULL;",
          "512:     int rc = 0;",
          "513:     time_t start;",
          "517:         gnutls_session *tls_session = session;",
          "518:         sock_ptr = gnutls_transport_get_ptr(*tls_session);",
          "523:         sock_ptr = session;",
          "524:     }",
          "526:     sock = GPOINTER_TO_INT(sock_ptr);",
          "527:     if (sock <= 0) {",
          "528:         return -ENOTCONN;",
          "529:     }",
          "531:     start = time(NULL);",
          "532:     errno = 0;",
          "533:     do {",
          "534:         fds.fd = sock;",
          "535:         fds.events = POLLIN;",
          "540:         if (errno == EINTR && (timeout > 0)) {",
          "541:             timeout = timeout - ((time(NULL) - start) * 1000);",
          "542:             if (timeout < 1000) {",
          "543:                 timeout = 1000;",
          "544:             }",
          "545:         }",
          "547:         rc = poll(&fds, 1, timeout);",
          "548:     } while (rc < 0 && errno == EINTR);",
          "550:     return rc;",
          "551: }",
          "553: char *",
          "554: crm_recv_remote_raw(void *session, gboolean encrypted, size_t max_recv, size_t *recv_len, int *disconnected)",
          "555: {",
          "556:     char *reply = NULL;",
          "557:     if (recv_len) {",
          "559:     }",
          "561:     if (disconnected) {",
          "563:     }",
          "565:     if (encrypted) {",
          "566: #ifdef HAVE_GNUTLS_GNUTLS_H",
          "567:         reply = crm_recv_tls(session, max_recv, recv_len, disconnected);",
          "568: #else",
          "569:         CRM_ASSERT(encrypted == FALSE);",
          "570: #endif",
          "571:     } else {",
          "572:         reply = crm_recv_plaintext(GPOINTER_TO_INT(session), max_recv, recv_len, disconnected);",
          "576:     }",
          "578:     return reply;",
          "579: }",
          "588: gboolean",
          "589: crm_recv_remote_msg(void *session, char **recv_buf, gboolean encrypted, int total_timeout /*ms */, int *disconnected)",
          "590: {",
          "591:     int ret;",
          "592:     size_t request_len = 0;",
          "593:     time_t start = time(NULL);",
          "594:     char *raw_request = NULL;",
          "595:     int remaining_timeout = 0;",
          "597:     if (total_timeout == 0) {",
          "598:         total_timeout = 10000;",
          "599:     } else if (total_timeout < 0) {",
          "600:         total_timeout = 60000;",
          "601:     }",
          "604:     remaining_timeout = total_timeout;",
          "605:     while ((remaining_timeout > 0) && !(*disconnected)) {",
          "608:         crm_trace(\"waiting to receive remote msg, starting timeout %d, remaining_timeout %d\", total_timeout, remaining_timeout);",
          "609:         ret = crm_recv_remote_ready(session, encrypted, remaining_timeout);",
          "610:         raw_request = NULL;",
          "612:         if (ret == 0) {",
          "613:             crm_err(\"poll timed out (%d ms) while waiting to receive msg\", remaining_timeout);",
          "614:             return FALSE;",
          "616:         } else if (ret < 0) {",
          "617:             if (errno != EINTR) {",
          "618:                 crm_debug(\"poll returned error while waiting for msg, rc: %d, errno: %d\", ret, errno);",
          "620:                 return FALSE;",
          "621:             }",
          "622:             crm_debug(\"poll EINTR encountered during poll, retrying\");",
          "623:         } else {",
          "624:             raw_request = crm_recv_remote_raw(session, encrypted, 0, &request_len, disconnected);",
          "625:         }",
          "627:         remaining_timeout = remaining_timeout - ((time(NULL) - start) * 1000);",
          "629:         if (!raw_request) {",
          "630:             crm_debug(\"Empty msg received after poll\");",
          "631:             continue;",
          "632:         }",
          "634:         if (*recv_buf) {",
          "635:             int old_len = strlen(*recv_buf);",
          "637:             crm_trace(\"Expanding recv buffer from %d to %d\", old_len, old_len+request_len);",
          "640:             memcpy(*recv_buf + old_len, raw_request, request_len);",
          "642:             free(raw_request);",
          "643:         } else {",
          "645:         }",
          "647:         if (strstr(*recv_buf, REMOTE_MSG_TERMINATOR)) {",
          "648:             return TRUE;",
          "652:     return FALSE;",
          "653: }",
          "661: int",
          "662: crm_remote_tcp_connect(const char *host, int port)",
          "663: {",
          "664:     struct addrinfo *res;",
          "665:     struct addrinfo *rp;",
          "666:     struct addrinfo hints;",
          "667:     const char *server = host;",
          "668:     int ret_ga;",
          "669:     int sock;",
          "672:     memset(&hints, 0, sizeof(struct addrinfo));",
          "674:     hints.ai_socktype = SOCK_STREAM;",
          "675:     hints.ai_flags = AI_CANONNAME;",
          "677:     crm_debug(\"Looking up %s\", server);",
          "678:     ret_ga = getaddrinfo(server, NULL, &hints, &res);",
          "679:     if (ret_ga) {",
          "680:         crm_err(\"getaddrinfo: %s\", gai_strerror(ret_ga));",
          "681:         return -1;",
          "682:     }",
          "684:     if (!res || !res->ai_addr) {",
          "685:         crm_err(\"getaddrinfo failed\");",
          "686:         return -1;",
          "687:     }",
          "689:     for (rp = res; rp != NULL; rp = rp->ai_next) {",
          "690:         struct sockaddr *addr = rp->ai_addr;",
          "691:         int flag = 0;",
          "692:         if (!addr) {",
          "693:             continue;",
          "694:         }",
          "696:         if (rp->ai_canonname) {",
          "697:             server = res->ai_canonname;",
          "698:         }",
          "699:         crm_debug(\"Got address %s for %s\", server, host);",
          "702:         sock = socket(rp->ai_family, SOCK_STREAM, IPPROTO_TCP);",
          "703:         if (sock == -1) {",
          "704:             crm_err(\"Socket creation failed for remote client connection.\");",
          "705:             continue;",
          "706:         }",
          "707:         if (addr->sa_family == AF_INET6) {",
          "708:             struct sockaddr_in6 *addr_in = (struct sockaddr_in6 *) addr;",
          "709:             addr_in->sin6_port = htons(port);",
          "710:         } else {",
          "711:             struct sockaddr_in *addr_in = (struct sockaddr_in *) addr;",
          "712:             addr_in->sin_port = htons(port);",
          "713:             crm_info(\"Attempting to connect to remote server at %s:%d\", inet_ntoa(addr_in->sin_addr), port);",
          "714:         }",
          "716:         if (connect(sock, rp->ai_addr, rp->ai_addrlen) == 0) {",
          "717:             if ((flag = fcntl(sock, F_GETFL)) >= 0) {",
          "718:                 if (fcntl(sock, F_SETFL, flag | O_NONBLOCK) < 0) {",
          "719:                     crm_err( \"fcntl() write failed\");",
          "720:                     close(sock);",
          "721:                     sock = -1;",
          "722:                     continue;",
          "723:                 }",
          "724:             }",
          "726:         }",
          "728:         close(sock);",
          "729:         sock = -1;",
          "730:     }",
          "731:     freeaddrinfo(res);",
          "733:     return sock;",
          "",
          "---------------"
        ],
        "lib/lrmd/lrmd_client.c||lib/lrmd/lrmd_client.c": [
          "File: lib/lrmd/lrmd_client.c -> lib/lrmd/lrmd_client.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "41: #include <crm/stonith-ng.h>",
          "43: CRM_TRACE_INIT_DATA(lrmd);",
          "45: static stonith_t *stonith_api = NULL;",
          "47: typedef struct lrmd_private_s {",
          "48:     char *token;",
          "50:     mainloop_io_t *source;",
          "52:     lrmd_event_callback callback;",
          "54: } lrmd_private_t;",
          "",
          "[Removed Lines]",
          "49:     crm_ipc_t *ipc;",
          "",
          "[Added Lines]",
          "44: #ifdef HAVE_GNUTLS_GNUTLS_H",
          "45: #  undef KEYFILE",
          "46: #  include <gnutls/gnutls.h>",
          "47: #endif",
          "49: #include <sys/socket.h>",
          "50: #include <netinet/ip.h>",
          "51: #include <arpa/inet.h>",
          "52: #include <netdb.h>",
          "58: static int lrmd_api_disconnect(lrmd_t *lrmd);",
          "59: static int lrmd_connected(lrmd_t *lrmd);",
          "61: #ifdef HAVE_GNUTLS_GNUTLS_H",
          "64: gnutls_psk_client_credentials_t psk_cred_s;",
          "65: int lrmd_tls_set_key(gnutls_datum_t *key, const char *location);",
          "66: static void lrmd_tls_disconnect(lrmd_t *lrmd);",
          "67: static int global_remote_msg_id = 0;",
          "68: int lrmd_tls_send_msg(gnutls_session *session, xmlNode *msg, uint32_t id, const char *msg_type);",
          "69: static void lrmd_tls_connection_destroy(gpointer userdata);",
          "70: #endif",
          "73:     enum client_type type;",
          "78:     crm_ipc_t *ipc;",
          "81: #ifdef HAVE_GNUTLS_GNUTLS_H",
          "82:     char *server;",
          "83:     int port;",
          "84:     gnutls_psk_client_credentials_t psk_cred_c;",
          "85:     gnutls_session *session;",
          "86:     int sock;",
          "88:     char *recv_buf;",
          "90:     GList *pending_notify;",
          "91:     crm_trigger_t *process_notify;",
          "92: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "181: }",
          "183: static int",
          "185: {",
          "186:     const char *type;",
          "188:     lrmd_private_t *native = lrmd->private;",
          "189:     lrmd_event_data_t event = { 0, };",
          "192:     if (!native->callback) {",
          "194:         return 1;",
          "195:     }",
          "198:     type = crm_element_value(msg, F_LRMD_OPERATION);",
          "199:     crm_element_value_int(msg, F_LRMD_CALLID, &event.call_id);",
          "200:     event.rsc_id = crm_element_value(msg, F_LRMD_RSC_ID);",
          "",
          "[Removed Lines]",
          "184: lrmd_dispatch_internal(const char *buffer, ssize_t length, gpointer userdata)",
          "187:     lrmd_t *lrmd = userdata;",
          "190:     xmlNode *msg;",
          "197:     msg = string2xml(buffer);",
          "",
          "[Added Lines]",
          "226: lrmd_dispatch_internal(lrmd_t *lrmd, xmlNode *msg)",
          "234:         crm_trace(\"notify event received but client has not set callback\");",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "222:         event.type = lrmd_event_exec_complete;",
          "224:         event.params = xml2list(msg);",
          "225:     }",
          "227:     native->callback(&event);",
          "229:     if (event.params) {",
          "230:         g_hash_table_destroy(event.params);",
          "231:     }",
          "232:     free_xml(msg);",
          "233:     return 1;",
          "234: }",
          "237: bool",
          "238: lrmd_dispatch(lrmd_t * lrmd)",
          "239: {",
          "241:     lrmd_private_t *private = NULL;",
          "243:     CRM_ASSERT(lrmd != NULL);",
          "244:     private = lrmd->private;",
          "255:     }",
          "258: }",
          "260: static xmlNode *",
          "",
          "[Removed Lines]",
          "240:     gboolean stay_connected = TRUE;",
          "245:     while (crm_ipc_ready(private->ipc)) {",
          "246:         if (crm_ipc_read(private->ipc) > 0) {",
          "247:             const char *msg = crm_ipc_buffer(private->ipc);",
          "249:             lrmd_dispatch_internal(msg, strlen(msg), lrmd);",
          "250:         }",
          "251:         if (crm_ipc_connected(private->ipc) == FALSE) {",
          "252:             crm_err(\"Connection closed\");",
          "253:             stay_connected = FALSE;",
          "254:         }",
          "257:     return stay_connected;",
          "",
          "[Added Lines]",
          "265:     } else {",
          "266:         return 1;",
          "269:     crm_trace(\"op %s notify event received\", type);",
          "275:     return 1;",
          "276: }",
          "278: static int",
          "279: lrmd_ipc_dispatch(const char *buffer, ssize_t length, gpointer userdata)",
          "280: {",
          "281:     lrmd_t *lrmd = userdata;",
          "282:     lrmd_private_t *native = lrmd->private;",
          "283:     xmlNode *msg;",
          "284:     int rc;",
          "286:     if (!native->callback) {",
          "288:         return 1;",
          "289:     }",
          "291:     msg = string2xml(buffer);",
          "292:     rc = lrmd_dispatch_internal(lrmd, msg);",
          "294:     return rc;",
          "295: }",
          "297: #ifdef HAVE_GNUTLS_GNUTLS_H",
          "298: static void",
          "299: lrmd_free_xml(gpointer userdata)",
          "300: {",
          "301:     free_xml((xmlNode *) userdata);",
          "302: }",
          "304: static int",
          "305: lrmd_tls_connected(lrmd_t *lrmd)",
          "306: {",
          "307:     lrmd_private_t *native = lrmd->private;",
          "308:     if (native->session) {",
          "309:         return TRUE;",
          "310:     }",
          "312:     return FALSE;",
          "313: }",
          "315: static int",
          "316: lrmd_tls_dispatch(gpointer userdata)",
          "317: {",
          "318:     lrmd_t *lrmd = userdata;",
          "319:     lrmd_private_t *native = lrmd->private;",
          "320:     xmlNode *xml = NULL;",
          "321:     int rc = 0;",
          "322:     int disconnected = 0;",
          "324:     if (lrmd_tls_connected(lrmd) == FALSE) {",
          "325:         crm_trace(\"tls dispatch triggered after disconnect\");",
          "326:         return 0;",
          "327:     }",
          "329:     crm_trace(\"tls_dispatch triggered\");",
          "333:     if (native->pending_notify) {",
          "334:         GList *iter = NULL;",
          "335:         crm_trace(\"Processing pending notifies\");",
          "336:         for (iter = native->pending_notify; iter; iter = iter->next) {",
          "337:             lrmd_dispatch_internal(lrmd, iter->data);",
          "338:         }",
          "339:         g_list_free_full(native->pending_notify, lrmd_free_xml);",
          "340:         native->pending_notify = NULL;",
          "341:     }",
          "344:     rc = crm_recv_remote_ready(native->session, TRUE, 0);",
          "345:     if (rc == 0) {",
          "347:         xml = crm_parse_remote_buffer(&native->recv_buf);",
          "348:     } else if (rc < 0) {",
          "349:         disconnected = 1;",
          "350:     } else {",
          "351:         crm_recv_remote_msg(native->session, &native->recv_buf, TRUE, -1, &disconnected);",
          "352:         xml = crm_parse_remote_buffer(&native->recv_buf);",
          "353:     }",
          "354:     while (xml) {",
          "355:         lrmd_dispatch_internal(lrmd, xml);",
          "356:         free_xml(xml);",
          "357:         xml = crm_parse_remote_buffer(&native->recv_buf);",
          "358:     }",
          "360:     if (disconnected) {",
          "361:         crm_info(\"Server disconnected while reading remote server msg.\");",
          "362:         lrmd_tls_disconnect(lrmd);",
          "363:         return 0;",
          "364:     }",
          "366:  }",
          "367: #endif",
          "370: int lrmd_poll(lrmd_t *lrmd, int timeout)",
          "371: {",
          "372:     int fd = -1;",
          "373:     lrmd_private_t *native = lrmd->private;",
          "375:     switch (native->type) {",
          "376:         case client_type_ipc:",
          "377:             fd = crm_ipc_get_fd(native->ipc);",
          "378:             break;",
          "379: #ifdef HAVE_GNUTLS_GNUTLS_H",
          "380:         case client_type_tls:",
          "381:             if (native->pending_notify) {",
          "382:                 return 1;",
          "383:             } else if (native->recv_buf && strstr(native->recv_buf, REMOTE_MSG_TERMINATOR)) {",
          "384:                 return 1;",
          "385:             }",
          "387:             fd = native->sock;",
          "388:             break;",
          "389: #endif",
          "390:         default:",
          "391:             crm_err(\"Unsupported connection type: %d\", native->type);",
          "392:     }",
          "394:     return crm_recv_remote_ready(GUINT_TO_POINTER(fd), FALSE, 0);",
          "406:     switch (private->type) {",
          "407:         case client_type_ipc:",
          "408:             while (crm_ipc_ready(private->ipc)) {",
          "409:                 if (crm_ipc_read(private->ipc) > 0) {",
          "410:                     const char *msg = crm_ipc_buffer(private->ipc);",
          "411:                     lrmd_ipc_dispatch(msg, strlen(msg), lrmd);",
          "412:                 }",
          "413:             }",
          "414:             break;",
          "415: #ifdef HAVE_GNUTLS_GNUTLS_H",
          "416:         case client_type_tls:",
          "417:             lrmd_tls_dispatch(lrmd);",
          "418:             break;",
          "419: #endif",
          "420:         default:",
          "421:             crm_err(\"Unsupported connection type: %d\", private->type);",
          "422:     }",
          "424:     if (lrmd_connected(lrmd) == FALSE) {",
          "425:         crm_err(\"Connection closed\");",
          "426:         return FALSE;",
          "429:     return TRUE;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "281: }",
          "283: static void",
          "285: {",
          "286:     lrmd_t *lrmd = userdata;",
          "287:     lrmd_private_t *native = lrmd->private;",
          "292:     native->ipc = NULL;",
          "",
          "[Removed Lines]",
          "284: lrmd_connection_destroy(gpointer userdata)",
          "289:     crm_info(\"connection destroyed\");",
          "",
          "[Added Lines]",
          "456: lrmd_ipc_connection_destroy(gpointer userdata)",
          "461:     crm_info(\"IPC connection destroyed\");",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "299:     }",
          "300: }",
          "302: static int",
          "304:                   enum lrmd_call_options options)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "474: #ifdef HAVE_GNUTLS_GNUTLS_H",
          "475: static void",
          "476: lrmd_tls_connection_destroy(gpointer userdata)",
          "477: {",
          "478:     lrmd_t *lrmd = userdata;",
          "479:     lrmd_private_t *native = lrmd->private;",
          "481:     crm_info(\"TLS connection destroyed\");",
          "483:     if (native->session) {",
          "484:         gnutls_bye(*native->session, GNUTLS_SHUT_RDWR);",
          "485:         gnutls_deinit(*native->session);",
          "486:         gnutls_free(native->session);",
          "487:     }",
          "488:     if (native->psk_cred_c) {",
          "489:         gnutls_psk_free_client_credentials(native->psk_cred_c);",
          "490:     }",
          "491:     if (native->sock) {",
          "492:         close(native->sock);",
          "493:     }",
          "494:     if (native->process_notify) {",
          "495:         mainloop_destroy_trigger(native->process_notify);",
          "496:         native->process_notify = NULL;",
          "497:     }",
          "498:     if (native->pending_notify) {",
          "499:         g_list_free_full(native->pending_notify, lrmd_free_xml);",
          "500:         native->pending_notify = NULL;",
          "501:     }",
          "503:     free(native->recv_buf);",
          "504:     native->recv_buf = NULL;",
          "505:     native->source = 0;",
          "506:     native->sock = 0;",
          "507:     native->psk_cred_c = NULL;",
          "508:     native->session = NULL;",
          "509:     native->sock = 0;",
          "511:     if (native->callback) {",
          "512:         lrmd_event_data_t event = { 0, };",
          "513:         event.type = lrmd_event_disconnect;",
          "514:         native->callback(&event);",
          "515:     }",
          "516:     return;",
          "517: }",
          "519: int",
          "520: lrmd_tls_send_msg(gnutls_session *session, xmlNode *msg, uint32_t id, const char *msg_type)",
          "521: {",
          "522:     int rc = -1;",
          "524:     crm_xml_add_int(msg, F_LRMD_REMOTE_MSG_ID, id);",
          "525:     crm_xml_add(msg, F_LRMD_REMOTE_MSG_TYPE, msg_type);",
          "527:     rc = crm_send_remote_msg(session, msg, TRUE);",
          "529:     if (rc < 0) {",
          "530:         crm_err(\"Failed to send remote lrmd tls msg, rc = %d\" , rc);",
          "531:         return rc;",
          "532:     }",
          "534:     return rc;",
          "535: }",
          "537: static xmlNode *",
          "538: lrmd_tls_recv_reply(lrmd_t *lrmd, int total_timeout, int expected_reply_id, int *disconnected)",
          "539: {",
          "540:     lrmd_private_t *native = lrmd->private;",
          "541:     xmlNode *xml = NULL;",
          "542:     time_t start = time(NULL);",
          "543:     const char *msg_type = NULL;",
          "544:     int reply_id = 0;",
          "545:     int remaining_timeout = 0;",
          "547:     if (total_timeout == 0) {",
          "548:         total_timeout = 10000;",
          "549:     } else if (total_timeout == -1) {",
          "550:         total_timeout = 30000;",
          "551:     }",
          "553:     while (!xml) {",
          "555:         xml = crm_parse_remote_buffer(&native->recv_buf);",
          "556:         if (!xml) {",
          "558:             if (remaining_timeout) {",
          "559:                 remaining_timeout = remaining_timeout - ((time(NULL) - start) * 1000);",
          "560:             } else {",
          "561:                 remaining_timeout = total_timeout;",
          "562:             }",
          "563:             if (remaining_timeout <= 0) {",
          "564:                 return NULL;",
          "565:             }",
          "567:             crm_recv_remote_msg(native->session, &native->recv_buf, TRUE, remaining_timeout, disconnected);",
          "568:             xml = crm_parse_remote_buffer(&native->recv_buf);",
          "569:             if (!xml || *disconnected) {",
          "570:                 return NULL;",
          "571:             }",
          "572:         }",
          "574:         CRM_ASSERT(xml != NULL);",
          "576:         crm_element_value_int(xml, F_LRMD_REMOTE_MSG_ID, &reply_id);",
          "577:         msg_type = crm_element_value(xml, F_LRMD_REMOTE_MSG_TYPE);",
          "579:         if (!msg_type) {",
          "580:             crm_err(\"Empty msg type received while waiting for reply\");",
          "581:             free_xml(xml);",
          "582:             xml = NULL;",
          "583:         } else if (safe_str_eq(msg_type, \"notify\")) {",
          "585:             crm_info(\"queueing notify\");",
          "586:             native->pending_notify = g_list_append(native->pending_notify, xml);",
          "587:             if (native->process_notify) {",
          "588:                 crm_info(\"notify trigger set.\");",
          "589:                 mainloop_set_trigger(native->process_notify);",
          "590:             }",
          "591:             xml = NULL;",
          "592:         } else if (safe_str_neq(msg_type, \"reply\")) {",
          "594:             crm_err(\"Expected a reply, got %s\", msg_type);",
          "595:             free_xml(xml);",
          "596:             xml = NULL;",
          "597:         } else if (reply_id != expected_reply_id) {",
          "598:             crm_err(\"Got outdated reply, expected id %d got id %d\",  expected_reply_id, reply_id);",
          "599:             free_xml(xml);",
          "600:             xml = NULL;",
          "601:         }",
          "602:     }",
          "604:     if (native->recv_buf && native->process_notify) {",
          "605:         mainloop_set_trigger(native->process_notify);",
          "606:     }",
          "608:     return xml;",
          "609: }",
          "611: static int",
          "612: lrmd_tls_send_recv(lrmd_t *lrmd, xmlNode *msg, int timeout, xmlNode **reply)",
          "613: {",
          "614:     int rc = 0;",
          "615:     int disconnected = 0;",
          "616:     xmlNode *xml = NULL;",
          "617:     lrmd_private_t *native = lrmd->private;",
          "619:     if (lrmd_tls_connected(lrmd) == FALSE) {",
          "620:         return -1;",
          "621:     }",
          "623:     global_remote_msg_id++;",
          "624:     if (global_remote_msg_id <= 0) {",
          "625:         global_remote_msg_id = 1;",
          "626:     }",
          "628:     rc = lrmd_tls_send_msg(native->session, msg, global_remote_msg_id, \"request\");",
          "629:     if (rc <= 0) {",
          "630:         crm_err(\"Remote lrmd send failed, disconnecting\");",
          "631:         lrmd_tls_disconnect(lrmd);",
          "632:         return -ENOTCONN;",
          "633:     }",
          "635:     xml = lrmd_tls_recv_reply(lrmd, timeout, global_remote_msg_id, &disconnected);",
          "637:     if (disconnected) {",
          "638:         crm_err(\"Remote lrmd server disconnected while waiting for reply with id %d. \", global_remote_msg_id);",
          "639:         lrmd_tls_disconnect(lrmd);",
          "640:         rc = -ENOTCONN;",
          "641:     } else if (!xml) {",
          "642:         crm_err(\"Remote lrmd never received reply for request id %d. timeout: %dms \", global_remote_msg_id, timeout);",
          "643:         rc = -ECOMM;",
          "644:     }",
          "646:     if (reply) {",
          "648:     } else {",
          "649:         free_xml(xml);",
          "650:     }",
          "652:     return rc;",
          "653: }",
          "654: #endif",
          "656: static int",
          "657: lrmd_send_xml(lrmd_t *lrmd, xmlNode *msg, int timeout, xmlNode **reply)",
          "658: {",
          "659:     int rc = -1;",
          "660:     lrmd_private_t *native = lrmd->private;",
          "662:     switch (native->type) {",
          "663:         case client_type_ipc:",
          "664:             rc = crm_ipc_send(native->ipc, msg, crm_ipc_client_response, timeout, reply);",
          "665:             break;",
          "666: #ifdef HAVE_GNUTLS_GNUTLS_H",
          "667:         case client_type_tls:",
          "668:             rc = lrmd_tls_send_recv(lrmd, msg, timeout, reply);",
          "669:             break;",
          "670: #endif",
          "671:         default:",
          "672:             crm_err(\"Unsupported connection type: %d\", native->type);",
          "673:     }",
          "675:     return rc;",
          "676: }",
          "678: static int",
          "679: lrmd_connected(lrmd_t *lrmd)",
          "680: {",
          "681:     lrmd_private_t *native = lrmd->private;",
          "683:     switch (native->type) {",
          "684:         case client_type_ipc:",
          "685:             return crm_ipc_connected(native->ipc);",
          "686:             break;",
          "687: #ifdef HAVE_GNUTLS_GNUTLS_H",
          "688:         case client_type_tls:",
          "689:             return lrmd_tls_connected(lrmd);",
          "690:             break;",
          "691: #endif",
          "692:         default:",
          "693:             crm_err(\"Unsupported connection type: %d\", native->type);",
          "694:     }",
          "696:     return 0;",
          "697: }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "309:     xmlNode *op_msg = NULL;",
          "310:     xmlNode *op_reply = NULL;",
          "313:         return -ENOTCONN;",
          "314:     }",
          "",
          "[Removed Lines]",
          "312:     if (!native->ipc) {",
          "",
          "[Added Lines]",
          "709:     if (!lrmd_connected(lrmd)) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "319:     }",
          "321:     CRM_CHECK(native->token != NULL,;);",
          "323:     op_msg = lrmd_create_op(native->token, op, data, options);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "719:     crm_trace(\"sending %s op to lrmd\", op);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "329:     crm_xml_add_int(op_msg, F_LRMD_TIMEOUT, timeout);",
          "332:     free_xml(op_msg);",
          "334:     if (rc < 0) {",
          "",
          "[Removed Lines]",
          "331:     rc = crm_ipc_send(native->ipc, op_msg, crm_ipc_client_response, timeout, &op_reply);",
          "",
          "[Added Lines]",
          "729:     rc = lrmd_send_xml(lrmd, op_msg, timeout, &op_reply);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "340:     rc = pcmk_ok;",
          "341:     crm_element_value_int(op_reply, F_LRMD_CALLID, &reply_id);",
          "343:     if (crm_element_value_int(op_reply, F_LRMD_RC, &rc) != 0) {",
          "344:         rc = -ENOMSG;",
          "345:         goto done;",
          "346:     }",
          "348:     if (output_data) {",
          "351:     }",
          "355:   done:",
          "357:         crm_err(\"LRMD disconnected\");",
          "358:     }",
          "",
          "[Removed Lines]",
          "342:     crm_trace(\"reply received\");",
          "353:     crm_log_xml_trace(op_reply, \"Reply\");",
          "356:     if (crm_ipc_connected(native->ipc) == FALSE) {",
          "",
          "[Added Lines]",
          "740:     crm_trace(\"%s op reply received\", op);",
          "746:     crm_log_xml_trace(op_reply, \"Reply\");",
          "754:     if (lrmd_connected(lrmd) == FALSE) {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "362: }",
          "364: static int",
          "366: {",
          "367:     int rc = pcmk_ok;",
          "368:     lrmd_private_t *native = lrmd->private;",
          "370:     static struct ipc_client_callbacks lrmd_callbacks = {",
          "373:     };",
          "375:     crm_info(\"Connecting to lrmd\");",
          "",
          "[Removed Lines]",
          "365: lrmd_api_connect(lrmd_t * lrmd, const char *name, int *fd)",
          "371:         .dispatch = lrmd_dispatch_internal,",
          "372:         .destroy = lrmd_connection_destroy",
          "",
          "[Added Lines]",
          "763: lrmd_handshake(lrmd_t *lrmd, const char *name)",
          "764: {",
          "765:     int rc = pcmk_ok;",
          "766:     lrmd_private_t *native = lrmd->private;",
          "767:     xmlNode *reply = NULL;",
          "768:     xmlNode *hello = create_xml_node(NULL, \"lrmd_command\");",
          "770:     crm_xml_add(hello, F_TYPE, T_LRMD);",
          "771:     crm_xml_add(hello, F_LRMD_OPERATION, CRM_OP_REGISTER);",
          "772:     crm_xml_add(hello, F_LRMD_CLIENTNAME, name);",
          "774:     rc = lrmd_send_xml(lrmd, hello, -1, &reply);",
          "776:     if (rc < 0) {",
          "777:         crm_perror(LOG_DEBUG, \"Couldn't complete registration with the lrmd API: %d\", rc);",
          "778:         rc = -ECOMM;",
          "779:     } else if (reply == NULL) {",
          "780:         crm_err(\"Did not receive registration reply\");",
          "781:         rc = -EPROTO;",
          "782:     } else {",
          "783:         const char *msg_type = crm_element_value(reply, F_LRMD_OPERATION);",
          "784:         const char *tmp_ticket = crm_element_value(reply, F_LRMD_CLIENTID);",
          "786:         if (safe_str_neq(msg_type, CRM_OP_REGISTER)) {",
          "787:             crm_err(\"Invalid registration message: %s\", msg_type);",
          "788:             crm_log_xml_err(reply, \"Bad reply\");",
          "789:             rc = -EPROTO;",
          "790:         } else if (tmp_ticket == NULL) {",
          "791:             crm_err(\"No registration token provided\");",
          "792:             crm_log_xml_err(reply, \"Bad reply\");",
          "793:             rc = -EPROTO;",
          "794:         } else {",
          "795:             crm_trace(\"Obtained registration token: %s\", tmp_ticket);",
          "796:             native->token = strdup(tmp_ticket);",
          "797:             rc = pcmk_ok;",
          "798:         }",
          "799:     }",
          "801:     free_xml(reply);",
          "802:     free_xml(hello);",
          "804:     return rc;",
          "805: }",
          "807: static int",
          "808: lrmd_ipc_connect(lrmd_t * lrmd, int *fd)",
          "814:         .dispatch = lrmd_ipc_dispatch,",
          "815:         .destroy = lrmd_ipc_connection_destroy",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "392:         rc = -ENOTCONN;",
          "393:     }",
          "428:         }",
          "432:     }",
          "434:     return rc;",
          "435: }",
          "437: static int",
          "439: {",
          "440:     lrmd_private_t *native = lrmd->private;",
          "444:     if (native->source != NULL) {",
          "446:         mainloop_del_ipc_client(native->source);",
          "",
          "[Removed Lines]",
          "395:     if (!rc) {",
          "396:         xmlNode *reply = NULL;",
          "397:         xmlNode *hello = create_xml_node(NULL, \"lrmd_command\");",
          "399:         crm_xml_add(hello, F_TYPE, T_LRMD);",
          "400:         crm_xml_add(hello, F_LRMD_OPERATION, CRM_OP_REGISTER);",
          "401:         crm_xml_add(hello, F_LRMD_CLIENTNAME, name);",
          "403:         rc = crm_ipc_send(native->ipc, hello, crm_ipc_client_response, -1, &reply);",
          "405:         if (rc < 0) {",
          "406:             crm_perror(LOG_DEBUG, \"Couldn't complete registration with the lrmd API: %d\", rc);",
          "407:             rc = -ECOMM;",
          "408:         } else if (reply == NULL) {",
          "409:             crm_err(\"Did not receive registration reply\");",
          "410:             rc = -EPROTO;",
          "411:         } else {",
          "412:             const char *msg_type = crm_element_value(reply, F_LRMD_OPERATION);",
          "413:             const char *tmp_ticket = crm_element_value(reply, F_LRMD_CLIENTID);",
          "415:             if (safe_str_neq(msg_type, CRM_OP_REGISTER)) {",
          "416:                 crm_err(\"Invalid registration message: %s\", msg_type);",
          "417:                 crm_log_xml_err(reply, \"Bad reply\");",
          "418:                 rc = -EPROTO;",
          "419:             } else if (tmp_ticket == NULL) {",
          "420:                 crm_err(\"No registration token provided\");",
          "421:                 crm_log_xml_err(reply, \"Bad reply\");",
          "422:                 rc = -EPROTO;",
          "423:             } else {",
          "424:                 crm_trace(\"Obtained registration token: %s\", tmp_ticket);",
          "425:                 native->token = strdup(tmp_ticket);",
          "426:                 rc = pcmk_ok;",
          "427:             }",
          "430:         free_xml(reply);",
          "431:         free_xml(hello);",
          "438: lrmd_api_disconnect(lrmd_t * lrmd)",
          "442:     crm_info(\"Disconnecting from lrmd service\");",
          "",
          "[Added Lines]",
          "838:     return rc;",
          "839: }",
          "841: #ifdef HAVE_GNUTLS_GNUTLS_H",
          "842: int lrmd_tls_set_key(gnutls_datum_t *key, const char *location)",
          "843: {",
          "844:     FILE *stream;",
          "845:     int read_len = 256;",
          "846:     int cur_len = 0;",
          "847:     int buf_len = read_len;",
          "848:     static char *key_cache = NULL;",
          "849:     static size_t key_cache_len = 0;",
          "850:     static time_t key_cache_updated;",
          "852:     if (key_cache) {",
          "853:         time_t now = time(NULL);",
          "855:         if ((now - key_cache_updated) < 60) {",
          "856:             key->data = gnutls_malloc(key_cache_len + 1);",
          "857:             key->size = key_cache_len;",
          "858:             memcpy(key->data, key_cache, key_cache_len);",
          "860:             crm_debug(\"using cached LRMD key\");",
          "861:             return 0;",
          "862:         } else {",
          "863:             key_cache_len = 0;",
          "864:             key_cache_updated = 0;",
          "865:             free(key_cache);",
          "866:             key_cache = NULL;",
          "867:             crm_debug(\"clearing lrmd key cache\");",
          "868:         }",
          "869:     }",
          "871:     stream = fopen(location, \"r\");",
          "872:     if (!stream) {",
          "873:         return -1;",
          "874:     }",
          "876:     key->data = gnutls_malloc(read_len);",
          "877:     while (!feof(stream)) {",
          "878:         char next;",
          "879:         if (cur_len == buf_len) {",
          "880:             buf_len = cur_len + read_len;",
          "881:             key->data = gnutls_realloc(key->data, buf_len);",
          "882:         }",
          "883:         next = fgetc(stream);",
          "884:         if (next == EOF && feof(stream)) {",
          "885:             break;",
          "888:         key->data[cur_len] = next;",
          "889:         cur_len++;",
          "891:     fclose(stream);",
          "893:     key->size = cur_len;",
          "894:     if (!cur_len) {",
          "895:         gnutls_free(key->data);",
          "896:         key->data = 0;",
          "897:         return -1;",
          "898:     }",
          "900:     if (!key_cache) {",
          "901:         key_cache = calloc(1, key->size+1);",
          "902:         memcpy(key_cache, key->data, key->size);",
          "904:         key_cache_len =  key->size;",
          "905:         key_cache_updated = time(NULL);",
          "906:     }",
          "908:     return 0;",
          "909: }",
          "911: static int",
          "912: lrmd_tls_key_cb(gnutls_session_t session, char **username, gnutls_datum_t *key)",
          "913: {",
          "914:     int rc = 0;",
          "916:     if (lrmd_tls_set_key(key, DEFAULT_REMOTE_KEY_LOCATION)) {",
          "917:         rc = lrmd_tls_set_key(key, ALT_REMOTE_KEY_LOCATION);",
          "918:     }",
          "919:     if (rc) {",
          "920:         crm_err(\"No lrmd remote key found\");",
          "921:         return -1;",
          "922:     }",
          "925:     strcpy(*username, DEFAULT_REMOTE_USERNAME);",
          "929: #endif",
          "932: lrmd_tls_connect(lrmd_t *lrmd, int *fd)",
          "934: #ifdef HAVE_GNUTLS_GNUTLS_H",
          "935:     static struct mainloop_fd_callbacks lrmd_tls_callbacks =",
          "936:         {",
          "937:             .dispatch = lrmd_tls_dispatch,",
          "938:             .destroy = lrmd_tls_connection_destroy,",
          "939:         };",
          "942:     static int gnutls_init = 0;",
          "943:     int sock;",
          "945:     if (!gnutls_init) {",
          "946:         gnutls_global_init();",
          "947:     }",
          "949:     gnutls_psk_allocate_client_credentials(&native->psk_cred_c);",
          "950:     gnutls_psk_set_client_credentials_function(native->psk_cred_c, lrmd_tls_key_cb);",
          "951:     sock = crm_remote_tcp_connect(native->server, native->port);",
          "952:     if (sock <= 0) {",
          "953:         crm_warn(\"Could not establish remote lrmd connection to %s\", native->server);",
          "954:         lrmd_tls_connection_destroy(lrmd);",
          "955:         return -ENOTCONN;",
          "956:     }",
          "958:     native->sock = sock;",
          "959:     native->session = create_psk_tls_session(sock, GNUTLS_CLIENT, native->psk_cred_c);",
          "961:     if (crm_initiate_client_tls_handshake(native->session, LRMD_CLIENT_HANDSHAKE_TIMEOUT) != 0) {",
          "962:         crm_err(\"Session creation for %s:%d failed\", native->server, native->port);",
          "963:         gnutls_deinit(*native->session);",
          "964:         gnutls_free(native->session);",
          "965:         native->session = NULL;",
          "966:         lrmd_tls_connection_destroy(lrmd);",
          "967:         return -1;",
          "968:     }",
          "970:     crm_info(\"Remote lrmd client TLS connection established with server %s:%d\", native->server, native->port);",
          "972:     if (fd) {",
          "974:     } else {",
          "975:         char name[256] = { 0, };",
          "976:         snprintf(name, 128, \"remote-lrmd-%s:%d\", native->server, native->port);",
          "978:         native->process_notify = mainloop_add_trigger(G_PRIORITY_HIGH, lrmd_tls_dispatch, lrmd);",
          "979:         native->source = mainloop_add_fd(name, G_PRIORITY_HIGH, native->sock, lrmd, &lrmd_tls_callbacks);",
          "980:     }",
          "981:     return pcmk_ok;",
          "982: #else",
          "983:     crm_err(\"TLS not enabled for this build.\");",
          "984:     return -ENOTCONN;",
          "985: #endif",
          "986: }",
          "988: static int",
          "989: lrmd_api_connect(lrmd_t * lrmd, const char *name, int *fd)",
          "990: {",
          "991:     int rc = -ENOTCONN;",
          "992:     lrmd_private_t *native = lrmd->private;",
          "994:     switch (native->type) {",
          "995:         case client_type_ipc:",
          "996:             rc = lrmd_ipc_connect(lrmd, fd);",
          "997:             break;",
          "998: #ifdef HAVE_GNUTLS_GNUTLS_H",
          "999:         case client_type_tls:",
          "1000:             rc = lrmd_tls_connect(lrmd, fd);",
          "1001:             break;",
          "1002: #endif",
          "1003:         default:",
          "1004:             crm_err(\"Unsupported connection type: %d\", native->type);",
          "1005:     }",
          "1007:     if (rc == pcmk_ok) {",
          "1008:         rc = lrmd_handshake(lrmd, name);",
          "1009:     }",
          "1011:     if (rc != pcmk_ok) {",
          "1012:         lrmd_api_disconnect(lrmd);",
          "1013:     }",
          "1015:     return rc;",
          "1016: }",
          "1018: static void",
          "1019: lrmd_ipc_disconnect(lrmd_t *lrmd)",
          "1020: {",
          "1021:     lrmd_private_t *native = lrmd->private;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "454:         crm_ipc_close(ipc);",
          "455:         crm_ipc_destroy(ipc);",
          "456:     }",
          "458:     free(native->token);",
          "459:     native->token = NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1035: }",
          "1037: #ifdef HAVE_GNUTLS_GNUTLS_H",
          "1038: static void",
          "1039: lrmd_tls_disconnect(lrmd_t *lrmd)",
          "1040: {",
          "1041:     lrmd_private_t *native = lrmd->private;",
          "1043:     if (native->session) {",
          "1044:         gnutls_bye(*native->session, GNUTLS_SHUT_RDWR);",
          "1045:         gnutls_deinit(*native->session);",
          "1046:         gnutls_free(native->session);",
          "1047:         native->session = 0;",
          "1048:     }",
          "1050:     if (native->source != NULL) {",
          "1052:         mainloop_del_ipc_client(native->source);",
          "1053:         native->source = NULL;",
          "1055:     } else if(native->sock) {",
          "1056:         close(native->sock);",
          "1057:     }",
          "1059:     if (native->pending_notify) {",
          "1060:         g_list_free_full(native->pending_notify, lrmd_free_xml);",
          "1061:         native->pending_notify = NULL;",
          "1062:     }",
          "1063: }",
          "1064: #endif",
          "1066: static int",
          "1067: lrmd_api_disconnect(lrmd_t *lrmd)",
          "1068: {",
          "1069:     lrmd_private_t *native = lrmd->private;",
          "1071:     crm_info(\"Disconnecting from lrmd service\");",
          "1072:     switch (native->type) {",
          "1073:     case client_type_ipc:",
          "1074:         lrmd_ipc_disconnect(lrmd);",
          "1075:         break;",
          "1076: #ifdef HAVE_GNUTLS_GNUTLS_H",
          "1077:         case client_type_tls:",
          "1078:             lrmd_tls_disconnect(lrmd);",
          "1079:             break;",
          "1080: #endif",
          "1081:         default:",
          "1082:             crm_err(\"Unsupported connection type: %d\", native->type);",
          "1083:     }",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "963:     pvt = calloc(1, sizeof(lrmd_private_t));",
          "964:     new_lrmd->cmds = calloc(1, sizeof(lrmd_api_operations_t));",
          "966:     new_lrmd->private = pvt;",
          "968:     new_lrmd->cmds->connect = lrmd_api_connect;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1593:     pvt->type = client_type_ipc;",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "985:     return new_lrmd;",
          "986: }",
          "988: void",
          "989: lrmd_api_delete(lrmd_t * lrmd)",
          "990: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1616: lrmd_t *",
          "1617: lrmd_remote_api_new(const char *server, int port)",
          "1618: {",
          "1619: #ifdef HAVE_GNUTLS_GNUTLS_H",
          "1620:     lrmd_t *new_lrmd = lrmd_api_new();",
          "1621:     lrmd_private_t *native = new_lrmd->private;",
          "1623:     native->type = client_type_tls;",
          "1624:     native->server = strdup(server);",
          "1625:     native->port = port ? port : DEFAULT_REMOTE_PORT;",
          "1626:     return new_lrmd;",
          "1627: #else",
          "1628:     crm_err(\"GNUTLS is not enabled for this build, remote LRMD client can not be created\");",
          "1629:     return NULL;",
          "1630: #endif",
          "1632: }",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "993:     }",
          "995:     free(lrmd->cmds);",
          "996:     free(lrmd->private);",
          "997:     free(lrmd);",
          "998: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1642: #ifdef HAVE_GNUTLS_GNUTLS_H",
          "1644:         lrmd_private_t *native = lrmd->private;",
          "1645:         free(native->server);",
          "1646:     }",
          "1647: #endif",
          "",
          "---------------"
        ],
        "lrmd/Makefile.am||lrmd/Makefile.am": [
          "File: lrmd/Makefile.am -> lrmd/Makefile.am",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: ## binary progs",
          "26: lrmdlib_PROGRAMS = lrmd lrmd_test",
          "29: lrmd_LDADD  = $(top_builddir)/lib/common/libcrmcommon.la \\",
          "30:    $(top_builddir)/lib/services/libcrmservice.la \\",
          "31:    $(top_builddir)/lib/lrmd/liblrmd.la  \\",
          "",
          "[Removed Lines]",
          "28: lrmd_SOURCES = main.c lrmd.c",
          "",
          "[Added Lines]",
          "28: lrmd_SOURCES = main.c lrmd.c tls_backend.c",
          "",
          "---------------"
        ],
        "lrmd/lrmd.c||lrmd/lrmd.c": [
          "File: lrmd/lrmd.c -> lrmd/lrmd.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "269:     crm_xml_add_int(reply, F_LRMD_RC, rc);",
          "270:     crm_xml_add_int(reply, F_LRMD_CALLID, call_id);",
          "274:     free_xml(reply);",
          "275:     if (send_rc < 0) {",
          "",
          "[Removed Lines]",
          "272:     send_rc = crm_ipcs_send(client, id, reply, FALSE);",
          "",
          "[Added Lines]",
          "272:     send_rc = lrmd_server_send_reply(client, id, reply);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "286:     if (client == NULL) {",
          "287:         crm_err(\"Asked to send event to  NULL client\");",
          "288:         return;",
          "292:     } else if (client->name == NULL) {",
          "293:         crm_trace(\"Asked to send event to client with no name\");",
          "294:         return;",
          "295:     }",
          "298:         crm_warn(\"Notification of client %s/%s failed\", client->name, client->id);",
          "299:     }",
          "300: }",
          "",
          "[Removed Lines]",
          "289:     } else if (client->ipcs == NULL) {",
          "290:         crm_trace(\"Asked to send event to disconnected client\");",
          "291:         return;",
          "297:     if (crm_ipcs_send(client, 0, update_msg, TRUE) <= 0) {",
          "",
          "[Added Lines]",
          "294:     if (lrmd_server_send_notify(client, update_msg) <= 0) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "926:     crm_xml_add(reply, F_LRMD_OPERATION, CRM_OP_REGISTER);",
          "927:     crm_xml_add(reply, F_LRMD_CLIENTID, client->id);",
          "930:     free_xml(reply);",
          "931:     return pcmk_ok;",
          "",
          "[Removed Lines]",
          "928:     crm_ipcs_send(client, id, reply, FALSE);",
          "",
          "[Added Lines]",
          "925:     lrmd_server_send_reply(client, id, reply);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "995:         crm_xml_add(reply, F_LRMD_TYPE, rsc->type);",
          "996:     }",
          "1000:     if (send_rc < 0) {",
          "1001:         crm_warn(\"LRMD reply to %s failed: %d\", client->name, send_rc);",
          "",
          "[Removed Lines]",
          "998:     send_rc = crm_ipcs_send(client, id, reply, FALSE);",
          "",
          "[Added Lines]",
          "995:     send_rc = lrmd_server_send_reply(client, id, reply);",
          "",
          "---------------"
        ],
        "lrmd/lrmd_private.h||lrmd/lrmd_private.h": [
          "File: lrmd/lrmd_private.h -> lrmd/lrmd_private.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: #  include <crm/lrmd.h>",
          "26: #  include <crm/stonith-ng.h>",
          "28: GHashTable *rsc_list;",
          "30: typedef struct lrmd_rsc_s {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "28: #ifdef HAVE_GNUTLS_GNUTLS_H",
          "29: #  undef KEYFILE",
          "30: #  include <gnutls/gnutls.h>",
          "31: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "52:     crm_trigger_t *work;",
          "53: } lrmd_rsc_t;",
          "55: void process_lrmd_message(crm_client_t * client, uint32_t id, xmlNode * request);",
          "57: void free_rsc(gpointer data);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "59: #ifdef HAVE_GNUTLS_GNUTLS_H",
          "61: int lrmd_init_remote_tls_server(int port);",
          "62: void lrmd_tls_server_destroy(void);",
          "65: extern int lrmd_tls_send_msg(gnutls_session *session, xmlNode *msg, uint32_t id, const char *msg_type);",
          "66: extern int lrmd_tls_set_key(gnutls_datum_t *key, const char *location);",
          "67: #endif",
          "69: int lrmd_server_send_reply(crm_client_t *client, uint32_t id, xmlNode *reply);",
          "71: int lrmd_server_send_notify(crm_client_t *client, xmlNode *msg);",
          "",
          "---------------"
        ],
        "lrmd/main.c||lrmd/main.c": [
          "File: lrmd/main.c -> lrmd/main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "34: GMainLoop *mainloop = NULL;",
          "35: qb_ipcs_service_t *ipcs = NULL;",
          "36: stonith_t *stonith_api = NULL;",
          "39: static void",
          "40: stonith_connection_destroy_cb(stonith_t * st, stonith_event_t *e)",
          "",
          "[Removed Lines]",
          "37: static int global_call_id = 0;",
          "",
          "[Added Lines]",
          "37: static gboolean enable_remote = FALSE;",
          "38: static int remote_port = 0;",
          "39: int lrmd_call_id = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "125:         }",
          "126:     }",
          "131:     }",
          "133:     crm_xml_add(request, F_LRMD_CLIENTID, client->id);",
          "134:     crm_xml_add(request, F_LRMD_CLIENTNAME, client->name);",
          "137:     process_lrmd_message(client, id, request);",
          "",
          "[Removed Lines]",
          "128:     global_call_id++;",
          "129:     if (global_call_id < 1) {",
          "130:         global_call_id = 1;",
          "135:     crm_xml_add_int(request, F_LRMD_CALLID, global_call_id);",
          "",
          "[Added Lines]",
          "130:     lrmd_call_id++;",
          "131:     if (lrmd_call_id < 1) {",
          "132:         lrmd_call_id = 1;",
          "137:     crm_xml_add_int(request, F_LRMD_CALLID, lrmd_call_id);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "164:     .connection_destroyed = lrmd_ipc_destroy",
          "165: };",
          "167: void",
          "168: lrmd_shutdown(int nsig)",
          "169: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "169: int lrmd_server_send_reply(crm_client_t *client, uint32_t id, xmlNode *reply)",
          "170: {",
          "172:     crm_trace(\"sending reply to client (%s) with msg id %d\", client->id, id);",
          "173:     switch (client->kind) {",
          "174:         case client_type_ipc:",
          "175:             return crm_ipcs_send(client, id, reply, FALSE);",
          "176: #ifdef HAVE_GNUTLS_GNUTLS_H",
          "177:         case client_type_tls:",
          "178:             return lrmd_tls_send_msg(client->session, reply, id, \"reply\");",
          "179: #endif",
          "180:         default:",
          "181:             crm_err(\"Unknown lrmd client type %d\" , client->kind);",
          "182:     }",
          "183:     return -1;",
          "184: }",
          "186: int lrmd_server_send_notify(crm_client_t *client, xmlNode *msg)",
          "187: {",
          "188:     crm_trace(\"sending notify to client (%s)\", client->id);",
          "189:     switch (client->kind) {",
          "190:         case client_type_ipc:",
          "191:             if (client->ipcs == NULL) {",
          "192:                 crm_trace(\"Asked to send event to disconnected local client\");",
          "193:                 return -1;",
          "194:             }",
          "195:             return crm_ipcs_send(client, 0, msg, TRUE);",
          "196: #ifdef HAVE_GNUTLS_GNUTLS_H",
          "197:         case client_type_tls:",
          "198:             if (client->session == NULL) {",
          "199:                 crm_trace(\"Asked to send event to disconnected remote client\");",
          "200:                 return -1;",
          "201:             }",
          "202:             return lrmd_tls_send_msg(client->session, msg, 0, \"notify\");",
          "203: #endif",
          "204:         default:",
          "205:             crm_err(\"Unknown lrmd client type %d\" , client->kind);",
          "206:     }",
          "207:     return -1;",
          "208: }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "178: static struct crm_option long_options[] = {",
          "185:     {0, 0, 0, 0}",
          "186: };",
          "",
          "[Removed Lines]",
          "180:     {\"help\",    0, 0, '?', \"\\tThis text\"},",
          "181:     {\"version\", 0, 0, '$', \"\\tVersion information\"  },",
          "182:     {\"verbose\", 0, 0, 'V', \"\\tIncrease debug output\"},",
          "184:     {\"logfile\", 1, 0, 'l', \"\\tSend logs to the additional named logfile\"},",
          "",
          "[Added Lines]",
          "223:     {\"help\",    0, 0,    '?', \"\\tThis text\"},",
          "224:     {\"version\", 0, 0,    '$', \"\\tVersion information\"  },",
          "225:     {\"verbose\", 0, 0,    'V', \"\\tIncrease debug output\"},",
          "226:     {\"tls_enable\", 0, 0, 't', \"\\tEnable TLS connection.\"},",
          "227:     {\"tls_port\", 1, 0,   'p', \"\\tTLS port to listen to, defaults to 1984\"},",
          "229:     {\"logfile\", 1, 0,    'l', \"\\tSend logs to the additional named logfile\"},",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "206:             case 'l':",
          "207:                 crm_add_logfile(optarg);",
          "208:                 break;",
          "209:             case 'V':",
          "210:                 set_crm_log_level(crm_log_level+1);",
          "211:                 break;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "254:             case 't':",
          "255:                 enable_remote = TRUE;",
          "256:                 break;",
          "257:             case 'p':",
          "258:                 remote_port = atoi(optarg);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "219:         }",
          "220:     }",
          "222:     rsc_list = g_hash_table_new_full(crm_str_hash, g_str_equal, NULL, free_rsc);",
          "223:     ipcs = mainloop_add_ipc_server(CRM_SYSTEM_LRMD, QB_IPC_SHM, &lrmd_ipc_callbacks);",
          "224:     if (ipcs == NULL) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "272:     if (enable_remote && !remote_port) {",
          "273:         remote_port = DEFAULT_REMOTE_PORT;",
          "274:     }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "226:         crm_exit(100);",
          "227:     }",
          "229:     mainloop_add_signal(SIGTERM, lrmd_shutdown);",
          "230:     mainloop = g_main_new(FALSE);",
          "231:     crm_info(\"Starting\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "283:     if (enable_remote) {",
          "284: #ifdef HAVE_GNUTLS_GNUTLS_H",
          "285:         if (lrmd_init_remote_tls_server(remote_port) < 0) {",
          "286:             crm_err(\"Failed to create TLS server: shutting down and inhibiting respawn\");",
          "287:             crm_exit(100);",
          "288:         }",
          "289: #else",
          "290:         crm_err(\"GNUTLS not enabled in this build, can not establish remote server\");",
          "291:         crm_exit(100);",
          "292: #endif",
          "293:     }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "234:     mainloop_del_ipc_server(ipcs);",
          "235:     crm_client_cleanup();",
          "236:     g_hash_table_destroy(rsc_list);",
          "238:     if (stonith_api) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "302:     if (enable_remote) {",
          "303: #ifdef HAVE_GNUTLS_GNUTLS_H",
          "304:         lrmd_tls_server_destroy();",
          "305: #endif",
          "306:     }",
          "",
          "---------------"
        ],
        "lrmd/regression.py.in||lrmd/regression.py.in": [
          "File: lrmd/regression.py.in -> lrmd/regression.py.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "31:  return test.communicate()[0].split(\"\\n\")",
          "33: class Test:",
          "35:   self.name = name",
          "36:   self.description = description",
          "37:   self.cmds = []",
          "38:   self.daemon_location = \"@CRM_DAEMON_DIR@/lrmd\"",
          "39:   self.test_tool_location = \"@CRM_DAEMON_DIR@/lrmd_test\"",
          "40:   self.verbose = verbose",
          "42:   self.result_txt = \"\"",
          "43:   self.cmd_tool_output = \"\"",
          "",
          "[Removed Lines]",
          "34:  def __init__(self, name, description, verbose = 0):",
          "",
          "[Added Lines]",
          "34:  def __init__(self, name, description, verbose = 0, tls = 0):",
          "41:   self.tls = tls",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "52:   if self.verbose and cmd == self.test_tool_location:",
          "53:    args = args + \" -V \"",
          "55:   self.cmds.append(",
          "56:    {",
          "57:     \"cmd\" : cmd,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "56:   if (cmd == self.test_tool_location) and self.tls:",
          "57:    args = args + \" -S \"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "71:   test = subprocess.Popen(cmd, stdout=subprocess.PIPE)",
          "72:   test.wait()",
          "74:   self.stonith_process = subprocess.Popen(shlex.split(\"@CRM_DAEMON_DIR@/stonithd -s\"))",
          "75:   if self.verbose:",
          "80:   time.sleep(1)",
          "",
          "[Removed Lines]",
          "76:    self.lrmd_process = subprocess.Popen(shlex.split(\"%s -VVV -l /tmp/lrmd-regression.log\" % self.daemon_location))",
          "77:   else:",
          "78:    self.lrmd_process = subprocess.Popen(shlex.split(\"%s -l /tmp/lrmd-regression.log\" % self.daemon_location))",
          "",
          "[Added Lines]",
          "78:   additional_args = \"\"",
          "81:   if self.tls:",
          "82:    additional_args = additional_args + \" -t \"",
          "84:    additional_args = additional_args + \" -VVV \"",
          "86:   self.lrmd_process = subprocess.Popen(shlex.split(\"%s %s -l /tmp/lrmd-regression.log\" % (self.daemon_location, additional_args)))",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "191:   return res",
          "193: class Tests:",
          "195:   self.tests = []",
          "196:   self.verbose = verbose",
          "198:   self.rsc_classes = output_from_command(\"crm_resource --list-standards\")",
          "199:   self.rsc_classes = self.rsc_classes[:-1] # Strip trailing empty line",
          "200:   print \"Testing \"+repr(self.rsc_classes)",
          "202:   self.common_cmds = {",
          "204:    \"ocf_reg_event\"     : \"-l \\\"NEW_EVENT event_type:register rsc_id:ocf_test_rsc action:none rc:ok op_status:complete\\\"\",",
          "206:    \"ocf_unreg_event\"   : \"-l \\\"NEW_EVENT event_type:unregister rsc_id:ocf_test_rsc action:none rc:ok op_status:complete\\\"\",",
          "208:    \"ocf_start_event\"   : \"-l \\\"NEW_EVENT event_type:exec_complete rsc_id:ocf_test_rsc action:start rc:ok op_status:complete\\\" \",",
          "210:    \"ocf_stop_event\"    : \"-l \\\"NEW_EVENT event_type:exec_complete rsc_id:ocf_test_rsc action:stop rc:ok op_status:complete\\\" \",",
          "214:    \"ocf_cancel_event\"  : \"-l \\\"NEW_EVENT event_type:exec_complete rsc_id:ocf_test_rsc action:monitor rc:ok op_status:Cancelled\\\" \",",
          "217:    \"systemd_reg_event\"     : \"-l \\\"NEW_EVENT event_type:register rsc_id:systemd_test_rsc action:none rc:ok op_status:complete\\\"\",",
          "219:    \"systemd_unreg_event\"   : \"-l \\\"NEW_EVENT event_type:unregister rsc_id:systemd_test_rsc action:none rc:ok op_status:complete\\\"\",",
          "221:    \"systemd_start_event\"   : \"-l \\\"NEW_EVENT event_type:exec_complete rsc_id:systemd_test_rsc action:start rc:ok op_status:complete\\\" \",",
          "223:    \"systemd_stop_event\"    : \"-l \\\"NEW_EVENT event_type:exec_complete rsc_id:systemd_test_rsc action:stop rc:ok op_status:complete\\\" \",",
          "227:    \"systemd_cancel_event\"  : \"-l \\\"NEW_EVENT event_type:exec_complete rsc_id:systemd_test_rsc action:monitor rc:ok op_status:Cancelled\\\" \",",
          "230:    \"upstart_reg_event\"     : \"-l \\\"NEW_EVENT event_type:register rsc_id:upstart_test_rsc action:none rc:ok op_status:complete\\\"\",",
          "232:    \"upstart_unreg_event\"   : \"-l \\\"NEW_EVENT event_type:unregister rsc_id:upstart_test_rsc action:none rc:ok op_status:complete\\\"\",",
          "234:    \"upstart_start_event\"   : \"-l \\\"NEW_EVENT event_type:exec_complete rsc_id:upstart_test_rsc action:start rc:ok op_status:complete\\\" \",",
          "236:    \"upstart_stop_event\"    : \"-l \\\"NEW_EVENT event_type:exec_complete rsc_id:upstart_test_rsc action:stop rc:ok op_status:complete\\\" \",",
          "240:    \"upstart_cancel_event\"  : \"-l \\\"NEW_EVENT event_type:exec_complete rsc_id:upstart_test_rsc action:monitor rc:ok op_status:Cancelled\\\" \",",
          "243:    \"service_reg_event\"     : \"-l \\\"NEW_EVENT event_type:register rsc_id:service_test_rsc action:none rc:ok op_status:complete\\\"\",",
          "245:    \"service_unreg_event\"   : \"-l \\\"NEW_EVENT event_type:unregister rsc_id:service_test_rsc action:none rc:ok op_status:complete\\\"\",",
          "247:    \"service_start_event\"   : \"-l \\\"NEW_EVENT event_type:exec_complete rsc_id:service_test_rsc action:start rc:ok op_status:complete\\\" \",",
          "249:    \"service_stop_event\"    : \"-l \\\"NEW_EVENT event_type:exec_complete rsc_id:service_test_rsc action:stop rc:ok op_status:complete\\\" \",",
          "253:    \"service_cancel_event\"  : \"-l \\\"NEW_EVENT event_type:exec_complete rsc_id:service_test_rsc action:monitor rc:ok op_status:Cancelled\\\" \",",
          "256:    \"lsb_reg_event\"     : \"-l \\\"NEW_EVENT event_type:register rsc_id:lsb_test_rsc action:none rc:ok op_status:complete\\\" \",",
          "258:    \"lsb_unreg_event\"   : \"-l \\\"NEW_EVENT event_type:unregister rsc_id:lsb_test_rsc action:none rc:ok op_status:complete\\\"\",",
          "260:    \"lsb_start_event\"   : \"-l \\\"NEW_EVENT event_type:exec_complete rsc_id:lsb_test_rsc action:start rc:ok op_status:complete\\\" \",",
          "262:    \"lsb_stop_event\"    : \"-l \\\"NEW_EVENT event_type:exec_complete rsc_id:lsb_test_rsc action:stop rc:ok op_status:complete\\\" \",",
          "266:    \"lsb_cancel_event\"  : \"-l \\\"NEW_EVENT event_type:exec_complete rsc_id:lsb_test_rsc action:status rc:ok op_status:Cancelled\\\" \",",
          "269:    \"stonith_reg_event\"     : \"-l \\\"NEW_EVENT event_type:register rsc_id:stonith_test_rsc action:none rc:ok op_status:complete\\\" \",",
          "271:    \"stonith_unreg_event\"   : \"-l \\\"NEW_EVENT event_type:unregister rsc_id:stonith_test_rsc action:none rc:ok op_status:complete\\\"\",",
          "272:    \"stonith_start_line\"    : \"-c exec -r \\\"stonith_test_rsc\\\" -a \\\"start\\\" -t 8000 \",",
          "273:    \"stonith_start_event\"   : \"-l \\\"NEW_EVENT event_type:exec_complete rsc_id:stonith_test_rsc action:start rc:ok op_status:complete\\\" \",",
          "275:    \"stonith_stop_event\"    : \"-l \\\"NEW_EVENT event_type:exec_complete rsc_id:stonith_test_rsc action:stop rc:ok op_status:complete\\\" \",",
          "277:    \"stonith_monitor_event\" : \"-l \\\"NEW_EVENT event_type:exec_complete rsc_id:stonith_test_rsc action:monitor rc:ok op_status:complete\\\" -t 3000\",",
          "279:    \"stonith_cancel_event\"  : \"-l \\\"NEW_EVENT event_type:exec_complete rsc_id:stonith_test_rsc action:monitor rc:ok op_status:Cancelled\\\" \",",
          "280:   }",
          "282:  def new_test(self, name, description):",
          "284:   self.tests.append(test)",
          "285:   return test",
          "",
          "[Removed Lines]",
          "194:  def __init__(self, verbose = 0):",
          "203:    \"ocf_reg_line\"      : \"-c register_rsc -r ocf_test_rsc -t 1000 -C ocf -P pacemaker -T Dummy\",",
          "205:    \"ocf_unreg_line\"    : \"-c unregister_rsc -r \\\"ocf_test_rsc\\\" -t 1000\",",
          "207:    \"ocf_start_line\"    : \"-c exec -r \\\"ocf_test_rsc\\\" -a \\\"start\\\" -t 2000 \",",
          "209:    \"ocf_stop_line\"     : \"-c exec -r \\\"ocf_test_rsc\\\" -a \\\"stop\\\" -t 2000 \",",
          "211:    \"ocf_monitor_line\"  : \"-c exec -r \\\"ocf_test_rsc\\\" -a \\\"monitor\\\" -i \\\"1000\\\" -t 1000\",",
          "212:    \"ocf_monitor_event\" : \"-l \\\"NEW_EVENT event_type:exec_complete rsc_id:ocf_test_rsc action:monitor rc:ok op_status:complete\\\" -t 2000\",",
          "213:    \"ocf_cancel_line\"   : \"-c cancel -r \\\"ocf_test_rsc\\\" -a \\\"monitor\\\" -i \\\"1000\\\" -t \\\"1000\\\" \",",
          "216:    \"systemd_reg_line\"      : \"-c register_rsc -r systemd_test_rsc -t 1000 -C systemd -T lrmd_dummy_daemon\",",
          "218:    \"systemd_unreg_line\"    : \"-c unregister_rsc -r \\\"systemd_test_rsc\\\" -t 1000\",",
          "220:    \"systemd_start_line\"    : \"-c exec -r \\\"systemd_test_rsc\\\" -a \\\"start\\\" -t 2000 \",",
          "222:    \"systemd_stop_line\"     : \"-c exec -r \\\"systemd_test_rsc\\\" -a \\\"stop\\\" -t 2000 \",",
          "224:    \"systemd_monitor_line\"  : \"-c exec -r \\\"systemd_test_rsc\\\" -a \\\"monitor\\\" -i \\\"1000\\\" -t 1000\",",
          "225:    \"systemd_monitor_event\" : \"-l \\\"NEW_EVENT event_type:exec_complete rsc_id:systemd_test_rsc action:monitor rc:ok op_status:complete\\\" -t 2000\",",
          "226:    \"systemd_cancel_line\"   : \"-c cancel -r \\\"systemd_test_rsc\\\" -a \\\"monitor\\\" -i \\\"1000\\\" -t \\\"1000\\\" \",",
          "229:    \"upstart_reg_line\"      : \"-c register_rsc -r upstart_test_rsc -t 1000 -C upstart -T lrmd_dummy_daemon\",",
          "231:    \"upstart_unreg_line\"    : \"-c unregister_rsc -r \\\"upstart_test_rsc\\\" -t 1000\",",
          "233:    \"upstart_start_line\"    : \"-c exec -r \\\"upstart_test_rsc\\\" -a \\\"start\\\" -t 2000 \",",
          "235:    \"upstart_stop_line\"     : \"-c exec -r \\\"upstart_test_rsc\\\" -a \\\"stop\\\" -t 2000 \",",
          "237:    \"upstart_monitor_line\"  : \"-c exec -r \\\"upstart_test_rsc\\\" -a \\\"monitor\\\" -i \\\"1000\\\" -t 1000\",",
          "238:    \"upstart_monitor_event\" : \"-l \\\"NEW_EVENT event_type:exec_complete rsc_id:upstart_test_rsc action:monitor rc:ok op_status:complete\\\" -t 2000\",",
          "239:    \"upstart_cancel_line\"   : \"-c cancel -r \\\"upstart_test_rsc\\\" -a \\\"monitor\\\" -i \\\"1000\\\" -t \\\"1000\\\" \",",
          "242:    \"service_reg_line\"      : \"-c register_rsc -r service_test_rsc -t 1000 -C service -T lrmd_dummy_daemon\",",
          "244:    \"service_unreg_line\"    : \"-c unregister_rsc -r \\\"service_test_rsc\\\" -t 1000\",",
          "246:    \"service_start_line\"    : \"-c exec -r \\\"service_test_rsc\\\" -a \\\"start\\\" -t 2000 \",",
          "248:    \"service_stop_line\"     : \"-c exec -r \\\"service_test_rsc\\\" -a \\\"stop\\\" -t 2000 \",",
          "250:    \"service_monitor_line\"  : \"-c exec -r \\\"service_test_rsc\\\" -a \\\"monitor\\\" -i \\\"1000\\\" -t 1000\",",
          "251:    \"service_monitor_event\" : \"-l \\\"NEW_EVENT event_type:exec_complete rsc_id:service_test_rsc action:monitor rc:ok op_status:complete\\\" -t 2000\",",
          "252:    \"service_cancel_line\"   : \"-c cancel -r \\\"service_test_rsc\\\" -a \\\"monitor\\\" -i \\\"1000\\\" -t \\\"1000\\\" \",",
          "255:    \"lsb_reg_line\"      : \"-c register_rsc -r lsb_test_rsc -t 1000 -C lsb -T lrmd_dummy_daemon\",",
          "257:    \"lsb_unreg_line\"    : \"-c unregister_rsc -r \\\"lsb_test_rsc\\\" -t 1000\",",
          "259:    \"lsb_start_line\"    : \"-c exec -r \\\"lsb_test_rsc\\\" -a \\\"start\\\" -t 2000 \",",
          "261:    \"lsb_stop_line\"     : \"-c exec -r \\\"lsb_test_rsc\\\" -a \\\"stop\\\" -t 2000 \",",
          "263:    \"lsb_monitor_line\"  : \"-c exec -r \\\"lsb_test_rsc\\\" -a status -i \\\"1000\\\" -t 1000\",",
          "264:    \"lsb_monitor_event\" : \"-l \\\"NEW_EVENT event_type:exec_complete rsc_id:lsb_test_rsc action:status rc:ok op_status:complete\\\" -t 2000\",",
          "265:    \"lsb_cancel_line\"   : \"-c cancel -r \\\"lsb_test_rsc\\\" -a \\\"status\\\" -i \\\"1000\\\" -t \\\"1000\\\" \",",
          "268:    \"stonith_reg_line\"      : \"-c register_rsc -r stonith_test_rsc -t 1000 -C stonith -P pacemaker -T fence_dummy_monitor\",",
          "270:    \"stonith_unreg_line\"    : \"-c unregister_rsc -r \\\"stonith_test_rsc\\\" -t 1000\",",
          "274:    \"stonith_stop_line\"     : \"-c exec -r \\\"stonith_test_rsc\\\" -a \\\"stop\\\" -t 2000 \",",
          "276:    \"stonith_monitor_line\"  : \"-c exec -r \\\"stonith_test_rsc\\\" -a \\\"monitor\\\" -i \\\"1000\\\" -t 1000\",",
          "278:    \"stonith_cancel_line\"   : \"-c cancel -r \\\"stonith_test_rsc\\\" -a \\\"monitor\\\" -i \\\"1000\\\" -t \\\"1000\\\" \",",
          "283:   test = Test(name, description, self.verbose)",
          "",
          "[Added Lines]",
          "202:  def __init__(self, verbose = 0, tls = 0):",
          "205:   self.tls = tls;",
          "211:    \"ocf_reg_line\"      : \"-c register_rsc -r ocf_test_rsc -t 3000 -C ocf -P pacemaker -T Dummy\",",
          "213:    \"ocf_unreg_line\"    : \"-c unregister_rsc -r \\\"ocf_test_rsc\\\" -t 3000\",",
          "215:    \"ocf_start_line\"    : \"-c exec -r \\\"ocf_test_rsc\\\" -a \\\"start\\\" -t 3000 \",",
          "217:    \"ocf_stop_line\"     : \"-c exec -r \\\"ocf_test_rsc\\\" -a \\\"stop\\\" -t 3000 \",",
          "219:    \"ocf_monitor_line\"  : \"-c exec -r \\\"ocf_test_rsc\\\" -a \\\"monitor\\\" -i \\\"2000\\\" -t 3000\",",
          "220:    \"ocf_monitor_event\" : \"-l \\\"NEW_EVENT event_type:exec_complete rsc_id:ocf_test_rsc action:monitor rc:ok op_status:complete\\\" -t 3000\",",
          "221:    \"ocf_cancel_line\"   : \"-c cancel -r \\\"ocf_test_rsc\\\" -a \\\"monitor\\\" -i \\\"2000\\\" -t \\\"3000\\\" \",",
          "224:    \"systemd_reg_line\"      : \"-c register_rsc -r systemd_test_rsc -t 3000 -C systemd -T lrmd_dummy_daemon\",",
          "226:    \"systemd_unreg_line\"    : \"-c unregister_rsc -r \\\"systemd_test_rsc\\\" -t 3000\",",
          "228:    \"systemd_start_line\"    : \"-c exec -r \\\"systemd_test_rsc\\\" -a \\\"start\\\" -t 3000 \",",
          "230:    \"systemd_stop_line\"     : \"-c exec -r \\\"systemd_test_rsc\\\" -a \\\"stop\\\" -t 3000 \",",
          "232:    \"systemd_monitor_line\"  : \"-c exec -r \\\"systemd_test_rsc\\\" -a \\\"monitor\\\" -i \\\"2000\\\" -t 3000\",",
          "233:    \"systemd_monitor_event\" : \"-l \\\"NEW_EVENT event_type:exec_complete rsc_id:systemd_test_rsc action:monitor rc:ok op_status:complete\\\" -t 3000\",",
          "234:    \"systemd_cancel_line\"   : \"-c cancel -r \\\"systemd_test_rsc\\\" -a \\\"monitor\\\" -i \\\"2000\\\" -t \\\"3000\\\" \",",
          "237:    \"upstart_reg_line\"      : \"-c register_rsc -r upstart_test_rsc -t 3000 -C upstart -T lrmd_dummy_daemon\",",
          "239:    \"upstart_unreg_line\"    : \"-c unregister_rsc -r \\\"upstart_test_rsc\\\" -t 3000\",",
          "241:    \"upstart_start_line\"    : \"-c exec -r \\\"upstart_test_rsc\\\" -a \\\"start\\\" -t 3000 \",",
          "243:    \"upstart_stop_line\"     : \"-c exec -r \\\"upstart_test_rsc\\\" -a \\\"stop\\\" -t 3000 \",",
          "245:    \"upstart_monitor_line\"  : \"-c exec -r \\\"upstart_test_rsc\\\" -a \\\"monitor\\\" -i \\\"2000\\\" -t 3000\",",
          "246:    \"upstart_monitor_event\" : \"-l \\\"NEW_EVENT event_type:exec_complete rsc_id:upstart_test_rsc action:monitor rc:ok op_status:complete\\\" -t 3000\",",
          "247:    \"upstart_cancel_line\"   : \"-c cancel -r \\\"upstart_test_rsc\\\" -a \\\"monitor\\\" -i \\\"2000\\\" -t \\\"3000\\\" \",",
          "250:    \"service_reg_line\"      : \"-c register_rsc -r service_test_rsc -t 3000 -C service -T lrmd_dummy_daemon\",",
          "252:    \"service_unreg_line\"    : \"-c unregister_rsc -r \\\"service_test_rsc\\\" -t 3000\",",
          "254:    \"service_start_line\"    : \"-c exec -r \\\"service_test_rsc\\\" -a \\\"start\\\" -t 3000 \",",
          "256:    \"service_stop_line\"     : \"-c exec -r \\\"service_test_rsc\\\" -a \\\"stop\\\" -t 3000 \",",
          "258:    \"service_monitor_line\"  : \"-c exec -r \\\"service_test_rsc\\\" -a \\\"monitor\\\" -i \\\"2000\\\" -t 3000\",",
          "259:    \"service_monitor_event\" : \"-l \\\"NEW_EVENT event_type:exec_complete rsc_id:service_test_rsc action:monitor rc:ok op_status:complete\\\" -t 3000\",",
          "260:    \"service_cancel_line\"   : \"-c cancel -r \\\"service_test_rsc\\\" -a \\\"monitor\\\" -i \\\"2000\\\" -t \\\"3000\\\" \",",
          "263:    \"lsb_reg_line\"      : \"-c register_rsc -r lsb_test_rsc -t 3000 -C lsb -T lrmd_dummy_daemon\",",
          "265:    \"lsb_unreg_line\"    : \"-c unregister_rsc -r \\\"lsb_test_rsc\\\" -t 3000\",",
          "267:    \"lsb_start_line\"    : \"-c exec -r \\\"lsb_test_rsc\\\" -a \\\"start\\\" -t 3000 \",",
          "269:    \"lsb_stop_line\"     : \"-c exec -r \\\"lsb_test_rsc\\\" -a \\\"stop\\\" -t 3000 \",",
          "271:    \"lsb_monitor_line\"  : \"-c exec -r \\\"lsb_test_rsc\\\" -a status -i \\\"2000\\\" -t 3000\",",
          "272:    \"lsb_monitor_event\" : \"-l \\\"NEW_EVENT event_type:exec_complete rsc_id:lsb_test_rsc action:status rc:ok op_status:complete\\\" -t 3000\",",
          "273:    \"lsb_cancel_line\"   : \"-c cancel -r \\\"lsb_test_rsc\\\" -a \\\"status\\\" -i \\\"2000\\\" -t \\\"3000\\\" \",",
          "276:    \"stonith_reg_line\"      : \"-c register_rsc -r stonith_test_rsc -t 3000 -C stonith -P pacemaker -T fence_dummy_monitor\",",
          "278:    \"stonith_unreg_line\"    : \"-c unregister_rsc -r \\\"stonith_test_rsc\\\" -t 3000\",",
          "282:    \"stonith_stop_line\"     : \"-c exec -r \\\"stonith_test_rsc\\\" -a \\\"stop\\\" -t 3000 \",",
          "284:    \"stonith_monitor_line\"  : \"-c exec -r \\\"stonith_test_rsc\\\" -a \\\"monitor\\\" -i \\\"2000\\\" -t 3000\",",
          "286:    \"stonith_cancel_line\"   : \"-c cancel -r \\\"stonith_test_rsc\\\" -a \\\"monitor\\\" -i \\\"2000\\\" -t \\\"3000\\\" \",",
          "291:   test = Test(name, description, self.verbose, self.tls)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "305: def main():",
          "306:     for line in sys.stdin.readlines():",
          "307:         if line.count(\"monitor\") > 0:",
          "309:             sys.exit(0)",
          "310:     sys.exit(-1)",
          "311: if __name__ == \"__main__\":",
          "",
          "[Removed Lines]",
          "308:             time.sleep(10000)",
          "",
          "[Added Lines]",
          "316:             time.sleep(30000)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "445:   ### ocf start timeout test  ###",
          "446:   test = self.new_test(\"ocf_start_timeout\", \"Force start timeout to occur, verify start failure.\")",
          "448:    \"-l \\\"NEW_EVENT event_type:register rsc_id:test_rsc action:none rc:ok op_status:complete\\\" \")",
          "450:   test.add_cmd(\"-l \"",
          "451:    \"\\\"NEW_EVENT event_type:exec_complete rsc_id:test_rsc action:start rc:unknown error op_status:Timed Out\\\" -t 3000\")",
          "453:    \"-l \\\"NEW_EVENT event_type:exec_complete rsc_id:test_rsc action:stop rc:ok op_status:complete\\\" \")",
          "455:    \"-l \\\"NEW_EVENT event_type:unregister rsc_id:test_rsc action:none rc:ok op_status:complete\\\" \")",
          "458:   ### stonith start timeout test  ###",
          "459:   test = self.new_test(\"stonith_start_timeout\", \"Force start timeout to occur, verify start failure.\")",
          "461:    \"-l \\\"NEW_EVENT event_type:register rsc_id:test_rsc action:none rc:ok op_status:complete\\\" \")",
          "463:   test.add_cmd(\"-l \"",
          "464:    \"\\\"NEW_EVENT event_type:exec_complete rsc_id:test_rsc action:start rc:unknown error op_status:Timed Out\\\" -t 4000\")",
          "466:    \"-l \\\"NEW_EVENT event_type:exec_complete rsc_id:test_rsc action:stop rc:ok op_status:complete\\\" \")",
          "468:    \"-l \\\"NEW_EVENT event_type:unregister rsc_id:test_rsc action:none rc:ok op_status:complete\\\" \")",
          "470:   ### stonith component fail ###",
          "",
          "[Removed Lines]",
          "447:   test.add_cmd(\"-c register_rsc -r \\\"test_rsc\\\" -C \\\"ocf\\\" -P \\\"pacemaker\\\" -T \\\"Dummy\\\" -t 1000 \"",
          "449:   test.add_cmd(\"-c exec -r \\\"test_rsc\\\" -a \\\"start\\\" -k \\\"op_sleep\\\" -v \\\"3\\\" -t 1000 -w\")",
          "452:   test.add_cmd(\"-c exec -r test_rsc -a stop -t 1000\"",
          "454:   test.add_cmd(\"-c unregister_rsc -r test_rsc -t 1000 \"",
          "460:   test.add_cmd(\"-c register_rsc -r \\\"test_rsc\\\" -C \\\"stonith\\\" -P \\\"pacemaker\\\" -T \\\"fence_dummy_sleep\\\" -t 1000 \"",
          "462:   test.add_cmd(\"-c exec -r \\\"test_rsc\\\" -a \\\"start\\\" -t 2000 -w\")",
          "465:   test.add_cmd(\"-c exec -r test_rsc -a stop -t 1000\"",
          "467:   test.add_cmd(\"-c unregister_rsc -r test_rsc -t 1000 \"",
          "",
          "[Added Lines]",
          "455:   test.add_cmd(\"-c register_rsc -r \\\"test_rsc\\\" -C \\\"ocf\\\" -P \\\"pacemaker\\\" -T \\\"Dummy\\\" -t 3000 \"",
          "457:   test.add_cmd(\"-c exec -r \\\"test_rsc\\\" -a \\\"start\\\" -k \\\"op_sleep\\\" -v \\\"3\\\" -t 3000 -w\")",
          "460:   test.add_cmd(\"-c exec -r test_rsc -a stop -t 3000\"",
          "462:   test.add_cmd(\"-c unregister_rsc -r test_rsc -t 3000 \"",
          "468:   test.add_cmd(\"-c register_rsc -r \\\"test_rsc\\\" -C \\\"stonith\\\" -P \\\"pacemaker\\\" -T \\\"fence_dummy_sleep\\\" -t 3000 \"",
          "470:   test.add_cmd(\"-c exec -r \\\"test_rsc\\\" -a \\\"start\\\" -t 3000 -w\")",
          "473:   test.add_cmd(\"-c exec -r test_rsc -a stop -t 3000\"",
          "475:   test.add_cmd(\"-c unregister_rsc -r test_rsc -t 3000 \"",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "483:   ### monitor fail for ocf resources ###",
          "484:   test = self.new_test(\"monitor_fail_ocf\", \"Force ocf monitor to fail, verify failure is reported.\")",
          "486:    \"-l \\\"NEW_EVENT event_type:register rsc_id:test_rsc action:none rc:ok op_status:complete\\\" \")",
          "488:    \"-l \\\"NEW_EVENT event_type:exec_complete rsc_id:test_rsc action:start rc:ok op_status:complete\\\" \")",
          "490:    \"-l \\\"NEW_EVENT event_type:exec_complete rsc_id:test_rsc action:start rc:ok op_status:complete\\\" \")",
          "492:    \"-l \\\"NEW_EVENT event_type:exec_complete rsc_id:test_rsc action:monitor rc:ok op_status:complete\\\" \")",
          "495:   test.add_cmd_and_kill(\"rm -f /var/run/Dummy-test_rsc.state\", \"-l \\\"NEW_EVENT event_type:exec_complete rsc_id:test_rsc action:monitor rc:not running op_status:complete\\\" -t 6000\")",
          "497:    \"-l \\\"NEW_EVENT event_type:exec_complete rsc_id:test_rsc action:monitor rc:not running op_status:Cancelled\\\" \")",
          "501:    \"-l \\\"NEW_EVENT event_type:unregister rsc_id:test_rsc action:none rc:ok op_status:complete\\\" \")",
          "503:   ### verify notify changes only for monitor operation.  ###",
          "504:   test = self.new_test(\"monitor_changes_only\", \"Verify when flag is set, only monitor changes are notified.\")",
          "506:    \"-l \\\"NEW_EVENT event_type:register rsc_id:test_rsc action:none rc:ok op_status:complete\\\" \")",
          "508:    \"-l \\\"NEW_EVENT event_type:exec_complete rsc_id:test_rsc action:start rc:ok op_status:complete\\\" \")",
          "510:    \"-l \\\"NEW_EVENT event_type:exec_complete rsc_id:test_rsc action:monitor rc:ok op_status:complete\\\" \")",
          "512:   test.add_cmd_and_kill(\"rm -f /var/run/Dummy-test_rsc.state\", \"-l \\\"NEW_EVENT event_type:exec_complete rsc_id:test_rsc action:monitor rc:not running op_status:complete\\\" -t 6000\")",
          "514:    \"-l \\\"NEW_EVENT event_type:exec_complete rsc_id:test_rsc action:monitor rc:not running op_status:Cancelled\\\" \")",
          "518:    \"-l \\\"NEW_EVENT event_type:unregister rsc_id:test_rsc action:none rc:ok op_status:complete\\\" \")",
          "520:   ### monitor fail for systemd resource ###",
          "521:   if \"systemd\" in self.rsc_classes:",
          "522:    test = self.new_test(\"monitor_fail_systemd\", \"Force systemd monitor to fail, verify failure is reported..\")",
          "524:          \"-l \\\"NEW_EVENT event_type:register rsc_id:test_rsc action:none rc:ok op_status:complete\\\" \")",
          "526:          \"-l \\\"NEW_EVENT event_type:exec_complete rsc_id:test_rsc action:start rc:ok op_status:complete\\\" \")",
          "528:          \"-l \\\"NEW_EVENT event_type:exec_complete rsc_id:test_rsc action:start rc:ok op_status:complete\\\" \")",
          "530:          \"-l \\\"NEW_EVENT event_type:exec_complete rsc_id:test_rsc action:monitor rc:ok op_status:complete\\\" \")",
          "533:    test.add_cmd_and_kill(\"killall -9 -q lrmd_dummy_daemon\", \"-l \\\"NEW_EVENT event_type:exec_complete rsc_id:test_rsc action:monitor rc:not running op_status:complete\\\" -t 8000\")",
          "535:          \"-l \\\"NEW_EVENT event_type:exec_complete rsc_id:test_rsc action:monitor rc:not running op_status:Cancelled\\\" \")",
          "539:          \"-l \\\"NEW_EVENT event_type:unregister rsc_id:test_rsc action:none rc:ok op_status:complete\\\" \")",
          "541:   ### monitor fail for upstart resource ###",
          "542:   if \"upstart\" in self.rsc_classes:",
          "543:    test = self.new_test(\"monitor_fail_upstart\", \"Force upstart monitor to fail, verify failure is reported..\")",
          "545:          \"-l \\\"NEW_EVENT event_type:register rsc_id:test_rsc action:none rc:ok op_status:complete\\\" \")",
          "547:          \"-l \\\"NEW_EVENT event_type:exec_complete rsc_id:test_rsc action:start rc:ok op_status:complete\\\" \")",
          "549:          \"-l \\\"NEW_EVENT event_type:exec_complete rsc_id:test_rsc action:start rc:ok op_status:complete\\\" \")",
          "551:          \"-l \\\"NEW_EVENT event_type:exec_complete rsc_id:test_rsc action:monitor rc:ok op_status:complete\\\" \")",
          "554:    test.add_cmd_and_kill(\"killall -9 -q dd\", \"-l \\\"NEW_EVENT event_type:exec_complete rsc_id:test_rsc action:monitor rc:not running op_status:complete\\\" -t 8000\")",
          "556:          \"-l \\\"NEW_EVENT event_type:exec_complete rsc_id:test_rsc action:monitor rc:not running op_status:Cancelled\\\" \")",
          "560:          \"-l \\\"NEW_EVENT event_type:unregister rsc_id:test_rsc action:none rc:ok op_status:complete\\\" \")",
          "562:   ### Cancel non-existent operation on a resource ###",
          "563:   test = self.new_test(\"cancel_non_existent_op\", \"Attempt to cancel the wrong monitor operation, verify expected failure\")",
          "565:    \"-l \\\"NEW_EVENT event_type:register rsc_id:test_rsc action:none rc:ok op_status:complete\\\" \")",
          "567:    \"-l \\\"NEW_EVENT event_type:exec_complete rsc_id:test_rsc action:start rc:ok op_status:complete\\\" \")",
          "569:    \"-l \\\"NEW_EVENT event_type:exec_complete rsc_id:test_rsc action:start rc:ok op_status:complete\\\" \")",
          "571:    \"-l \\\"NEW_EVENT event_type:exec_complete rsc_id:test_rsc action:monitor rc:ok op_status:complete\\\" \")",
          "574:    \"-l \\\"NEW_EVENT event_type:exec_complete rsc_id:test_rsc action:monitor rc:not running op_status:Cancelled\\\" \")",
          "576:    \"-l \\\"NEW_EVENT event_type:exec_complete rsc_id:test_rsc action:monitor rc:not running op_status:Cancelled\\\" \")",
          "578:    \"-l \\\"NEW_EVENT event_type:unregister rsc_id:test_rsc action:none rc:ok op_status:complete\\\" \")",
          "580:   ### Attempt to invoke non-existent rsc id ###",
          "581:   test = self.new_test(\"invoke_non_existent_rsc\", \"Attempt to perform operations on a non-existent rsc id.\")",
          "583:    \"-l \\\"NEW_EVENT event_type:exec_complete rsc_id:test_rsc action:start rc:unknown error op_status:complete\\\" \")",
          "585:    \"-l \\\"NEW_EVENT event_type:exec_complete rsc_id:test_rsc action:stop rc:ok op_status:complete\\\" \")",
          "587:    \"-l \\\"NEW_EVENT event_type:exec_complete rsc_id:test_rsc action:monitor rc:ok op_status:complete\\\" \")",
          "589:    \"-l \\\"NEW_EVENT event_type:exec_complete rsc_id:test_rsc action:start rc:ok op_status:Cancelled\\\" \")",
          "591:    \"-l \\\"NEW_EVENT event_type:unregister rsc_id:test_rsc action:none rc:ok op_status:complete\\\" \")",
          "593:   ### Register and start a resource that doesn't exist, systemd  ###",
          "594:   if \"systemd\" in self.rsc_classes:",
          "595:    test = self.new_test(\"start_uninstalled_systemd\", \"Register uninstalled systemd agent, try to start, verify expected failure\")",
          "597:          \"-l \\\"NEW_EVENT event_type:register rsc_id:test_rsc action:none rc:ok op_status:complete\\\" \")",
          "599:          \"-l \\\"NEW_EVENT event_type:exec_complete rsc_id:test_rsc action:start rc:not installed op_status:complete\\\" \")",
          "601:          \"-l \\\"NEW_EVENT event_type:unregister rsc_id:test_rsc action:none rc:ok op_status:complete\\\" \")",
          "603:   if \"upstart\" in self.rsc_classes:",
          "604:    test = self.new_test(\"start_uninstalled_upstart\", \"Register uninstalled upstart agent, try to start, verify expected failure\")",
          "606:          \"-l \\\"NEW_EVENT event_type:register rsc_id:test_rsc action:none rc:ok op_status:complete\\\" \")",
          "608:          \"-l \\\"NEW_EVENT event_type:exec_complete rsc_id:test_rsc action:start rc:not installed op_status:complete\\\" \")",
          "610:          \"-l \\\"NEW_EVENT event_type:unregister rsc_id:test_rsc action:none rc:ok op_status:complete\\\" \")",
          "612:   ### Register and start a resource that doesn't exist, ocf ###",
          "613:   test = self.new_test(\"start_uninstalled_ocf\", \"Register uninstalled ocf agent, try to start, verify expected failure.\")",
          "615:    \"-l \\\"NEW_EVENT event_type:register rsc_id:test_rsc action:none rc:ok op_status:complete\\\" \")",
          "617:    \"-l \\\"NEW_EVENT event_type:exec_complete rsc_id:test_rsc action:start rc:not installed op_status:complete\\\" \")",
          "619:    \"-l \\\"NEW_EVENT event_type:unregister rsc_id:test_rsc action:none rc:ok op_status:complete\\\" \")",
          "621:   ### Register ocf with non-existent provider  ###",
          "622:   test = self.new_test(\"start_ocf_bad_provider\", \"Register ocf agent with a non-existent provider, verify expected failure.\")",
          "624:    \"-l \\\"NEW_EVENT event_type:register rsc_id:test_rsc action:none rc:ok op_status:complete\\\" \")",
          "626:    \"-l \\\"NEW_EVENT event_type:exec_complete rsc_id:test_rsc action:start rc:not installed op_status:complete\\\" \")",
          "628:    \"-l \\\"NEW_EVENT event_type:unregister rsc_id:test_rsc action:none rc:ok op_status:complete\\\" \")",
          "630:   ### Register ocf with empty provider field  ###",
          "631:   test = self.new_test(\"start_ocf_no_provider\", \"Register ocf agent with a no provider, verify expected failure.\")",
          "633:    \"-l \\\"NEW_EVENT event_type:register rsc_id:test_rsc action:none rc:ok op_status:complete\\\" \")",
          "635:    \"-l \\\"NEW_EVENT event_type:exec_complete rsc_id:test_rsc action:start rc:ok op_status:Error\\\" \")",
          "637:    \"-l \\\"NEW_EVENT event_type:unregister rsc_id:test_rsc action:none rc:ok op_status:complete\\\" \")",
          "639:  ### These are tests that target specific cases ###",
          "",
          "[Removed Lines]",
          "485:   test.add_cmd(\"-c register_rsc -r \\\"test_rsc\\\" -C \\\"ocf\\\" -P \\\"pacemaker\\\" -T \\\"Dummy\\\" -t 1000 \"",
          "487:   test.add_cmd(\"-c exec -r \\\"test_rsc\\\" -a \\\"start\\\" -t 1000 \"",
          "489:   test.add_cmd(\"-c exec -r \\\"test_rsc\\\" -a \\\"start\\\" -t 1000 \"",
          "491:   test.add_cmd(\"-c exec -r \\\"test_rsc\\\" -a \\\"monitor\\\" -i \\\"100\\\" -t 1000 \"",
          "493:   test.add_cmd(\"-l \\\"NEW_EVENT event_type:exec_complete rsc_id:test_rsc action:monitor rc:ok op_status:complete\\\" -t 2000\")",
          "494:   test.add_cmd(\"-l \\\"NEW_EVENT event_type:exec_complete rsc_id:test_rsc action:monitor rc:ok op_status:complete\\\" -t 2000\")",
          "496:   test.add_cmd(\"-c cancel -r \\\"test_rsc\\\" -a \\\"monitor\\\" -i \\\"100\\\" -t \\\"1000\\\" \"",
          "498:   test.add_expected_fail_cmd(\"-l \\\"NEW_EVENT event_type:exec_complete rsc_id:test_rsc action:monitor rc:not running op_status:complete\\\" -t 1000\")",
          "499:   test.add_expected_fail_cmd(\"-l \\\"NEW_EVENT event_type:exec_complete rsc_id:test_rsc action:monitor rc:ok op_status:complete\\\" -t 1000\")",
          "500:   test.add_cmd(\"-c unregister_rsc -r \\\"test_rsc\\\" -t 1000 \"",
          "505:   test.add_cmd(\"-c register_rsc -r \\\"test_rsc\\\" -C \\\"ocf\\\" -P \\\"pacemaker\\\" -T \\\"Dummy\\\" -t 1000 \"",
          "507:   test.add_cmd(\"-c exec -r \\\"test_rsc\\\" -a \\\"start\\\" -t 1000 -o \"",
          "509:   test.add_cmd(\"-c exec -r \\\"test_rsc\\\" -a \\\"monitor\\\" -i \\\"100\\\" -t 1000 -o \"",
          "511:   test.add_expected_fail_cmd(\"-l \\\"NEW_EVENT event_type:exec_complete rsc_id:test_rsc action:monitor rc:ok op_status:complete\\\" -t 2000\")",
          "513:   test.add_cmd(\"-c cancel -r \\\"test_rsc\\\" -a \\\"monitor\\\" -i \\\"100\\\" -t \\\"1000\\\" \"",
          "515:   test.add_expected_fail_cmd(\"-l \\\"NEW_EVENT event_type:exec_complete rsc_id:test_rsc action:monitor rc:not running op_status:complete\\\" -t 1000\")",
          "516:   test.add_expected_fail_cmd(\"-l \\\"NEW_EVENT event_type:exec_complete rsc_id:test_rsc action:monitor rc:ok op_status:complete\\\" -t 1000\")",
          "517:   test.add_cmd(\"-c unregister_rsc -r \\\"test_rsc\\\" -t 1000 \"",
          "523:    test.add_cmd(\"-c register_rsc -r \\\"test_rsc\\\" -C systemd -T lrmd_dummy_daemon -t 1000 \"",
          "525:    test.add_cmd(\"-c exec -r \\\"test_rsc\\\" -a \\\"start\\\" -t 1000 \"",
          "527:    test.add_cmd(\"-c exec -r \\\"test_rsc\\\" -a \\\"start\\\" -t 1000 \"",
          "529:    test.add_cmd(\"-c exec -r \\\"test_rsc\\\" -a \\\"monitor\\\" -i \\\"100\\\" -t 1000 \"",
          "531:    test.add_cmd(\"-l \\\"NEW_EVENT event_type:exec_complete rsc_id:test_rsc action:monitor rc:ok op_status:complete\\\" -t 2000\")",
          "532:    test.add_cmd(\"-l \\\"NEW_EVENT event_type:exec_complete rsc_id:test_rsc action:monitor rc:ok op_status:complete\\\" -t 2000\")",
          "534:    test.add_cmd(\"-c cancel -r \\\"test_rsc\\\" -a \\\"monitor\\\" -i \\\"100\\\" -t \\\"1000\\\" \"",
          "536:    test.add_expected_fail_cmd(\"-l \\\"NEW_EVENT event_type:exec_complete rsc_id:test_rsc action:monitor rc:not running op_status:complete\\\" -t 1000\")",
          "537:    test.add_expected_fail_cmd(\"-l \\\"NEW_EVENT event_type:exec_complete rsc_id:test_rsc action:monitor rc:ok op_status:complete\\\" -t 1000\")",
          "538:    test.add_cmd(\"-c unregister_rsc -r \\\"test_rsc\\\" -t 1000 \"",
          "544:    test.add_cmd(\"-c register_rsc -r \\\"test_rsc\\\" -C upstart -T lrmd_dummy_daemon -t 1000 \"",
          "546:    test.add_cmd(\"-c exec -r \\\"test_rsc\\\" -a \\\"start\\\" -t 1000 \"",
          "548:    test.add_cmd(\"-c exec -r \\\"test_rsc\\\" -a \\\"start\\\" -t 1000 \"",
          "550:    test.add_cmd(\"-c exec -r \\\"test_rsc\\\" -a \\\"monitor\\\" -i \\\"100\\\" -t 1000 \"",
          "552:    test.add_cmd(\"-l \\\"NEW_EVENT event_type:exec_complete rsc_id:test_rsc action:monitor rc:ok op_status:complete\\\" -t 2000\")",
          "553:    test.add_cmd(\"-l \\\"NEW_EVENT event_type:exec_complete rsc_id:test_rsc action:monitor rc:ok op_status:complete\\\" -t 2000\")",
          "555:    test.add_cmd(\"-c cancel -r \\\"test_rsc\\\" -a \\\"monitor\\\" -i \\\"100\\\" -t \\\"1000\\\" \"",
          "557:    test.add_expected_fail_cmd(\"-l \\\"NEW_EVENT event_type:exec_complete rsc_id:test_rsc action:monitor rc:not running op_status:complete\\\" -t 1000\")",
          "558:    test.add_expected_fail_cmd(\"-l \\\"NEW_EVENT event_type:exec_complete rsc_id:test_rsc action:monitor rc:ok op_status:complete\\\" -t 1000\")",
          "559:    test.add_cmd(\"-c unregister_rsc -r \\\"test_rsc\\\" -t 1000 \"",
          "564:   test.add_cmd(\"-c register_rsc -r \\\"test_rsc\\\" -C \\\"ocf\\\" -P \\\"pacemaker\\\" -T \\\"Dummy\\\" -t 1000 \"",
          "566:   test.add_cmd(\"-c exec -r \\\"test_rsc\\\" -a \\\"start\\\" -t 1000 \"",
          "568:   test.add_cmd(\"-c exec -r \\\"test_rsc\\\" -a \\\"start\\\" -t 1000 \"",
          "570:   test.add_cmd(\"-c exec -r \\\"test_rsc\\\" -a \\\"monitor\\\" -i \\\"100\\\" -t 1000 \"",
          "572:   test.add_cmd(\"-l \\\"NEW_EVENT event_type:exec_complete rsc_id:test_rsc action:monitor rc:ok op_status:complete\\\" -t 2000\")",
          "573:   test.add_expected_fail_cmd(\"-c cancel -r test_rsc -a \\\"monitor\\\" -i 1234 -t \\\"1000\\\" \" ### interval is wrong, should fail",
          "575:   test.add_expected_fail_cmd(\"-c cancel -r test_rsc -a stop -i 100 -t \\\"1000\\\" \" ### action name is wrong, should fail",
          "577:   test.add_cmd(\"-c unregister_rsc -r \\\"test_rsc\\\" -t 1000 \"",
          "582:   test.add_expected_fail_cmd(\"-c exec -r \\\"test_rsc\\\" -a \\\"start\\\" -t 1000 \"",
          "584:   test.add_expected_fail_cmd(\"-c exec -r test_rsc -a stop -t 1000\"",
          "586:   test.add_expected_fail_cmd(\"-c exec -r test_rsc -a monitor -i 1000 -t 1000\"",
          "588:   test.add_expected_fail_cmd(\"-c cancel -r test_rsc -a start -t 1000 \"",
          "590:   test.add_cmd(\"-c unregister_rsc -r \\\"test_rsc\\\" -t 1000 \"",
          "596:    test.add_cmd(\"-c register_rsc -r \\\"test_rsc\\\" -C systemd -T this_is_fake1234 -t 1000 \"",
          "598:    test.add_cmd(\"-c exec -r \\\"test_rsc\\\" -a \\\"start\\\" -t 1000 \"",
          "600:    test.add_cmd(\"-c unregister_rsc -r \\\"test_rsc\\\" -t 1000 \"",
          "605:    test.add_cmd(\"-c register_rsc -r \\\"test_rsc\\\" -C upstart -T this_is_fake1234 -t 1000 \"",
          "607:    test.add_cmd(\"-c exec -r \\\"test_rsc\\\" -a \\\"start\\\" -t 1000 \"",
          "609:    test.add_cmd(\"-c unregister_rsc -r \\\"test_rsc\\\" -t 1000 \"",
          "614:   test.add_cmd(\"-c register_rsc -r \\\"test_rsc\\\" -C ocf -P pacemaker -T this_is_fake1234 -t 1000 \"",
          "616:   test.add_cmd(\"-c exec -r \\\"test_rsc\\\" -a \\\"start\\\" -t 1000 \"",
          "618:   test.add_cmd(\"-c unregister_rsc -r \\\"test_rsc\\\" -t 1000 \"",
          "623:   test.add_cmd(\"-c register_rsc -r \\\"test_rsc\\\" -C ocf -P pancakes -T Dummy -t 1000 \"",
          "625:   test.add_cmd(\"-c exec -r \\\"test_rsc\\\" -a \\\"start\\\" -t 1000 \"",
          "627:   test.add_cmd(\"-c unregister_rsc -r \\\"test_rsc\\\" -t 1000 \"",
          "632:   test.add_expected_fail_cmd(\"-c register_rsc -r \\\"test_rsc\\\" -C ocf -T Dummy -t 1000 \"",
          "634:   test.add_expected_fail_cmd(\"-c exec -r \\\"test_rsc\\\" -a \\\"start\\\" -t 1000 \"",
          "636:   test.add_cmd(\"-c unregister_rsc -r \\\"test_rsc\\\" -t 1000 \"",
          "",
          "[Added Lines]",
          "493:   test.add_cmd(\"-c register_rsc -r \\\"test_rsc\\\" -C \\\"ocf\\\" -P \\\"pacemaker\\\" -T \\\"Dummy\\\" -t 3000 \"",
          "495:   test.add_cmd(\"-c exec -r \\\"test_rsc\\\" -a \\\"start\\\" -t 3000 \"",
          "497:   test.add_cmd(\"-c exec -r \\\"test_rsc\\\" -a \\\"start\\\" -t 3000 \"",
          "499:   test.add_cmd(\"-c exec -r \\\"test_rsc\\\" -a \\\"monitor\\\" -i \\\"100\\\" -t 3000 \"",
          "501:   test.add_cmd(\"-l \\\"NEW_EVENT event_type:exec_complete rsc_id:test_rsc action:monitor rc:ok op_status:complete\\\" -t 3000\")",
          "502:   test.add_cmd(\"-l \\\"NEW_EVENT event_type:exec_complete rsc_id:test_rsc action:monitor rc:ok op_status:complete\\\" -t 3000\")",
          "504:   test.add_cmd(\"-c cancel -r \\\"test_rsc\\\" -a \\\"monitor\\\" -i \\\"100\\\" -t \\\"3000\\\" \"",
          "506:   test.add_expected_fail_cmd(\"-l \\\"NEW_EVENT event_type:exec_complete rsc_id:test_rsc action:monitor rc:not running op_status:complete\\\" -t 3000\")",
          "507:   test.add_expected_fail_cmd(\"-l \\\"NEW_EVENT event_type:exec_complete rsc_id:test_rsc action:monitor rc:ok op_status:complete\\\" -t 3000\")",
          "508:   test.add_cmd(\"-c unregister_rsc -r \\\"test_rsc\\\" -t 3000 \"",
          "513:   test.add_cmd(\"-c register_rsc -r \\\"test_rsc\\\" -C \\\"ocf\\\" -P \\\"pacemaker\\\" -T \\\"Dummy\\\" -t 3000 \"",
          "515:   test.add_cmd(\"-c exec -r \\\"test_rsc\\\" -a \\\"start\\\" -t 3000 -o \"",
          "517:   test.add_cmd(\"-c exec -r \\\"test_rsc\\\" -a \\\"monitor\\\" -i \\\"100\\\" -t 3000 -o \"",
          "519:   test.add_expected_fail_cmd(\"-l \\\"NEW_EVENT event_type:exec_complete rsc_id:test_rsc action:monitor rc:ok op_status:complete\\\" -t 3000\")",
          "521:   test.add_cmd(\"-c cancel -r \\\"test_rsc\\\" -a \\\"monitor\\\" -i \\\"100\\\" -t \\\"3000\\\" \"",
          "523:   test.add_expected_fail_cmd(\"-l \\\"NEW_EVENT event_type:exec_complete rsc_id:test_rsc action:monitor rc:not running op_status:complete\\\" -t 3000\")",
          "524:   test.add_expected_fail_cmd(\"-l \\\"NEW_EVENT event_type:exec_complete rsc_id:test_rsc action:monitor rc:ok op_status:complete\\\" -t 3000\")",
          "525:   test.add_cmd(\"-c unregister_rsc -r \\\"test_rsc\\\" -t 3000 \"",
          "531:    test.add_cmd(\"-c register_rsc -r \\\"test_rsc\\\" -C systemd -T lrmd_dummy_daemon -t 3000 \"",
          "533:    test.add_cmd(\"-c exec -r \\\"test_rsc\\\" -a \\\"start\\\" -t 3000 \"",
          "535:    test.add_cmd(\"-c exec -r \\\"test_rsc\\\" -a \\\"start\\\" -t 3000 \"",
          "537:    test.add_cmd(\"-c exec -r \\\"test_rsc\\\" -a \\\"monitor\\\" -i \\\"100\\\" -t 3000 \"",
          "539:    test.add_cmd(\"-l \\\"NEW_EVENT event_type:exec_complete rsc_id:test_rsc action:monitor rc:ok op_status:complete\\\" -t 3000\")",
          "540:    test.add_cmd(\"-l \\\"NEW_EVENT event_type:exec_complete rsc_id:test_rsc action:monitor rc:ok op_status:complete\\\" -t 3000\")",
          "542:    test.add_cmd(\"-c cancel -r \\\"test_rsc\\\" -a \\\"monitor\\\" -i \\\"100\\\" -t \\\"3000\\\" \"",
          "544:    test.add_expected_fail_cmd(\"-l \\\"NEW_EVENT event_type:exec_complete rsc_id:test_rsc action:monitor rc:not running op_status:complete\\\" -t 3000\")",
          "545:    test.add_expected_fail_cmd(\"-l \\\"NEW_EVENT event_type:exec_complete rsc_id:test_rsc action:monitor rc:ok op_status:complete\\\" -t 3000\")",
          "546:    test.add_cmd(\"-c unregister_rsc -r \\\"test_rsc\\\" -t 3000 \"",
          "552:    test.add_cmd(\"-c register_rsc -r \\\"test_rsc\\\" -C upstart -T lrmd_dummy_daemon -t 3000 \"",
          "554:    test.add_cmd(\"-c exec -r \\\"test_rsc\\\" -a \\\"start\\\" -t 3000 \"",
          "556:    test.add_cmd(\"-c exec -r \\\"test_rsc\\\" -a \\\"start\\\" -t 3000 \"",
          "558:    test.add_cmd(\"-c exec -r \\\"test_rsc\\\" -a \\\"monitor\\\" -i \\\"100\\\" -t 3000 \"",
          "560:    test.add_cmd(\"-l \\\"NEW_EVENT event_type:exec_complete rsc_id:test_rsc action:monitor rc:ok op_status:complete\\\" -t 3000\")",
          "561:    test.add_cmd(\"-l \\\"NEW_EVENT event_type:exec_complete rsc_id:test_rsc action:monitor rc:ok op_status:complete\\\" -t 3000\")",
          "563:    test.add_cmd(\"-c cancel -r \\\"test_rsc\\\" -a \\\"monitor\\\" -i \\\"100\\\" -t \\\"3000\\\" \"",
          "565:    test.add_expected_fail_cmd(\"-l \\\"NEW_EVENT event_type:exec_complete rsc_id:test_rsc action:monitor rc:not running op_status:complete\\\" -t 3000\")",
          "566:    test.add_expected_fail_cmd(\"-l \\\"NEW_EVENT event_type:exec_complete rsc_id:test_rsc action:monitor rc:ok op_status:complete\\\" -t 3000\")",
          "567:    test.add_cmd(\"-c unregister_rsc -r \\\"test_rsc\\\" -t 3000 \"",
          "572:   test.add_cmd(\"-c register_rsc -r \\\"test_rsc\\\" -C \\\"ocf\\\" -P \\\"pacemaker\\\" -T \\\"Dummy\\\" -t 3000 \"",
          "574:   test.add_cmd(\"-c exec -r \\\"test_rsc\\\" -a \\\"start\\\" -t 3000 \"",
          "576:   test.add_cmd(\"-c exec -r \\\"test_rsc\\\" -a \\\"start\\\" -t 3000 \"",
          "578:   test.add_cmd(\"-c exec -r \\\"test_rsc\\\" -a \\\"monitor\\\" -i \\\"100\\\" -t 3000 \"",
          "580:   test.add_cmd(\"-l \\\"NEW_EVENT event_type:exec_complete rsc_id:test_rsc action:monitor rc:ok op_status:complete\\\" -t 3000\")",
          "581:   test.add_expected_fail_cmd(\"-c cancel -r test_rsc -a \\\"monitor\\\" -i 1234 -t \\\"3000\\\" \" ### interval is wrong, should fail",
          "583:   test.add_expected_fail_cmd(\"-c cancel -r test_rsc -a stop -i 100 -t \\\"3000\\\" \" ### action name is wrong, should fail",
          "585:   test.add_cmd(\"-c unregister_rsc -r \\\"test_rsc\\\" -t 3000 \"",
          "590:   test.add_expected_fail_cmd(\"-c exec -r \\\"test_rsc\\\" -a \\\"start\\\" -t 3000 \"",
          "592:   test.add_expected_fail_cmd(\"-c exec -r test_rsc -a stop -t 3000\"",
          "594:   test.add_expected_fail_cmd(\"-c exec -r test_rsc -a monitor -i 3000 -t 3000\"",
          "596:   test.add_expected_fail_cmd(\"-c cancel -r test_rsc -a start -t 3000 \"",
          "598:   test.add_cmd(\"-c unregister_rsc -r \\\"test_rsc\\\" -t 3000 \"",
          "604:    test.add_cmd(\"-c register_rsc -r \\\"test_rsc\\\" -C systemd -T this_is_fake1234 -t 3000 \"",
          "606:    test.add_cmd(\"-c exec -r \\\"test_rsc\\\" -a \\\"start\\\" -t 3000 \"",
          "608:    test.add_cmd(\"-c unregister_rsc -r \\\"test_rsc\\\" -t 3000 \"",
          "613:    test.add_cmd(\"-c register_rsc -r \\\"test_rsc\\\" -C upstart -T this_is_fake1234 -t 3000 \"",
          "615:    test.add_cmd(\"-c exec -r \\\"test_rsc\\\" -a \\\"start\\\" -t 3000 \"",
          "617:    test.add_cmd(\"-c unregister_rsc -r \\\"test_rsc\\\" -t 3000 \"",
          "622:   test.add_cmd(\"-c register_rsc -r \\\"test_rsc\\\" -C ocf -P pacemaker -T this_is_fake1234 -t 3000 \"",
          "624:   test.add_cmd(\"-c exec -r \\\"test_rsc\\\" -a \\\"start\\\" -t 3000 \"",
          "626:   test.add_cmd(\"-c unregister_rsc -r \\\"test_rsc\\\" -t 3000 \"",
          "631:   test.add_cmd(\"-c register_rsc -r \\\"test_rsc\\\" -C ocf -P pancakes -T Dummy -t 3000 \"",
          "633:   test.add_cmd(\"-c exec -r \\\"test_rsc\\\" -a \\\"start\\\" -t 3000 \"",
          "635:   test.add_cmd(\"-c unregister_rsc -r \\\"test_rsc\\\" -t 3000 \"",
          "640:   test.add_expected_fail_cmd(\"-c register_rsc -r \\\"test_rsc\\\" -C ocf -T Dummy -t 3000 \"",
          "642:   test.add_expected_fail_cmd(\"-c exec -r \\\"test_rsc\\\" -a \\\"start\\\" -t 3000 \"",
          "644:   test.add_cmd(\"-c unregister_rsc -r \\\"test_rsc\\\" -t 3000 \"",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "641:   ### start delay then stop test ###",
          "642:   test = self.new_test(\"start_delay\", \"Verify start delay works as expected.\")",
          "643:   test.add_cmd(\"-c register_rsc -r test_rsc -P pacemaker -C ocf -T Dummy \"",
          "646:   test.add_expected_fail_cmd(\"-l \"",
          "648:   test.add_cmd(\"-l \"",
          "651:    \"-l \\\"NEW_EVENT event_type:exec_complete rsc_id:test_rsc action:stop rc:ok op_status:complete\\\" \")",
          "653:    \"-l \\\"NEW_EVENT event_type:unregister rsc_id:test_rsc action:none rc:ok op_status:complete\\\" \")",
          "655:   ### start delay, but cancel before it gets a chance to start.  ###",
          "656:   test = self.new_test(\"start_delay_cancel\", \"Using start_delay, start a rsc, but cancel the start op before execution.\")",
          "657:   test.add_cmd(\"-c register_rsc -r test_rsc -P pacemaker -C ocf -T Dummy \"",
          "661:    \"-l \\\"NEW_EVENT event_type:exec_complete rsc_id:test_rsc action:start rc:ok op_status:Cancelled\\\" \")",
          "662:   test.add_expected_fail_cmd(\"-l \"",
          "665:    \"-l \\\"NEW_EVENT event_type:unregister rsc_id:test_rsc action:none rc:ok op_status:complete\\\" \")",
          "667:   ### Register a bunch of resources, verify we can get info on them ###",
          "668:   test = self.new_test(\"verify_get_rsc_info\", \"Register multiple resources, verify retrieval of rsc info.\")",
          "669:   if \"systemd\" in self.rsc_classes:",
          "671:    test.add_cmd(\"-c get_rsc_info -r rsc1 \")",
          "673:    test.add_expected_fail_cmd(\"-c get_rsc_info -r rsc1 \")",
          "675:   if \"upstart\" in self.rsc_classes:",
          "677:    test.add_cmd(\"-c get_rsc_info -r rsc1 \")",
          "679:    test.add_expected_fail_cmd(\"-c get_rsc_info -r rsc1 \")",
          "682:   test.add_cmd(\"-c get_rsc_info -r rsc2 \")",
          "684:   test.add_expected_fail_cmd(\"-c get_rsc_info -r rsc2 \")",
          "686:   ### Register duplicate, verify only one entry exists and can still be removed.",
          "687:   test = self.new_test(\"duplicate_registration\", \"Register resource multiple times, verify only one entry exists and can be removed.\")",
          "689:   test.add_cmd_check_stdout(\"-c get_rsc_info -r rsc2 \", \"id:rsc2 class:ocf provider:pacemaker type:Dummy\")",
          "691:   test.add_cmd_check_stdout(\"-c get_rsc_info -r rsc2 \", \"id:rsc2 class:ocf provider:pacemaker type:Dummy\")",
          "693:   test.add_cmd_check_stdout(\"-c get_rsc_info -r rsc2 \", \"id:rsc2 class:ocf provider:pacemaker type:Stateful\")",
          "695:   test.add_expected_fail_cmd(\"-c get_rsc_info -r rsc2 \")",
          "697:   ### verify the option to only send notification to the original client. ###",
          "698:   test = self.new_test(\"notify_orig_client_only\", \"Verify option to only send notifications to the client originating the action.\")",
          "700:    \"-l \\\"NEW_EVENT event_type:register rsc_id:test_rsc action:none rc:ok op_status:complete\\\" \")",
          "702:    \"-l \\\"NEW_EVENT event_type:exec_complete rsc_id:test_rsc action:start rc:ok op_status:complete\\\" \")",
          "704:    \"-l \\\"NEW_EVENT event_type:exec_complete rsc_id:test_rsc action:monitor rc:ok op_status:complete\\\" \")",
          "705:   # this will fail because the monitor notifications should only go to the original caller, which no longer exists.",
          "709:    \"-l \\\"NEW_EVENT event_type:unregister rsc_id:test_rsc action:none rc:ok op_status:complete\\\" \")",
          "711:   ### get metadata ###",
          "",
          "[Removed Lines]",
          "644:    \"-l \\\"NEW_EVENT event_type:register rsc_id:test_rsc action:none rc:ok op_status:complete\\\" -t 1000\")",
          "645:   test.add_cmd(\"-c exec -r test_rsc -s 2000 -a start -w -t 1000\")",
          "647:    \"\\\"NEW_EVENT event_type:exec_complete rsc_id:test_rsc action:start rc:ok op_status:complete\\\" -t 1000\")",
          "649:    \"\\\"NEW_EVENT event_type:exec_complete rsc_id:test_rsc action:start rc:ok op_status:complete\\\" -t 3000\")",
          "650:   test.add_cmd(\"-c exec -r test_rsc -a stop -t 1000\"",
          "652:   test.add_cmd(\"-c unregister_rsc -r test_rsc -t 1000 \"",
          "658:    \"-l \\\"NEW_EVENT event_type:register rsc_id:test_rsc action:none rc:ok op_status:complete\\\" -t 1000\")",
          "659:   test.add_cmd(\"-c exec -r test_rsc -s 2000 -a start -w -t 1000\")",
          "660:   test.add_cmd(\"-c cancel -r test_rsc -a start -t 1000 \"",
          "663:    \"\\\"NEW_EVENT event_type:exec_complete rsc_id:test_rsc action:start rc:ok op_status:complete\\\" -t 3000\")",
          "664:   test.add_cmd(\"-c unregister_rsc -r test_rsc -t 1000 \"",
          "670:    test.add_cmd(\"-c register_rsc -r rsc1 -C systemd -T lrmd_dummy_daemon -t 1000 \")",
          "672:    test.add_cmd(\"-c unregister_rsc -r rsc1 -t 1000 \")",
          "676:    test.add_cmd(\"-c register_rsc -r rsc1 -C upstart -T lrmd_dummy_daemon -t 1000 \")",
          "678:    test.add_cmd(\"-c unregister_rsc -r rsc1 -t 1000 \")",
          "681:   test.add_cmd(\"-c register_rsc -r rsc2 -C ocf -T Dummy -P pacemaker -t 1000 \")",
          "683:   test.add_cmd(\"-c unregister_rsc -r rsc2 -t 1000 \")",
          "688:   test.add_cmd(\"-c register_rsc -r rsc2 -C ocf -T Dummy -P pacemaker -t 1000 \")",
          "690:   test.add_cmd(\"-c register_rsc -r rsc2 -C ocf -T Dummy -P pacemaker -t 1000 \")",
          "692:   test.add_cmd(\"-c register_rsc -r rsc2 -C ocf -T Stateful -P pacemaker -t 1000 \")",
          "694:   test.add_cmd(\"-c unregister_rsc -r rsc2 -t 1000 \")",
          "699:   test.add_cmd(\"-c register_rsc -r \\\"test_rsc\\\" -C \\\"ocf\\\" -P \\\"pacemaker\\\" -T \\\"Dummy\\\" -t 1000 \"",
          "701:   test.add_cmd(\"-c exec -r \\\"test_rsc\\\" -a \\\"start\\\" -t 1000 \"",
          "703:   test.add_cmd(\"-c exec -r \\\"test_rsc\\\" -a \\\"monitor\\\" -i \\\"100\\\" -t 1000 -n \"",
          "706:   test.add_expected_fail_cmd(\"-l \\\"NEW_EVENT event_type:exec_complete rsc_id:test_rsc action:monitor rc:ok op_status:complete\\\" -t 2000\")",
          "707:   test.add_cmd(\"-c cancel -r \\\"test_rsc\\\" -a \\\"monitor\\\" -i \\\"100\\\" -t \\\"1000\\\" \")",
          "708:   test.add_cmd(\"-c unregister_rsc -r \\\"test_rsc\\\" -t 1000 \"",
          "",
          "[Added Lines]",
          "652:    \"-l \\\"NEW_EVENT event_type:register rsc_id:test_rsc action:none rc:ok op_status:complete\\\" -t 3000\")",
          "653:   test.add_cmd(\"-c exec -r test_rsc -s 6000 -a start -w -t 6000\")",
          "655:    \"\\\"NEW_EVENT event_type:exec_complete rsc_id:test_rsc action:start rc:ok op_status:complete\\\" -t 2000\")",
          "657:    \"\\\"NEW_EVENT event_type:exec_complete rsc_id:test_rsc action:start rc:ok op_status:complete\\\" -t 6000\")",
          "658:   test.add_cmd(\"-c exec -r test_rsc -a stop -t 3000\"",
          "660:   test.add_cmd(\"-c unregister_rsc -r test_rsc -t 3000 \"",
          "666:    \"-l \\\"NEW_EVENT event_type:register rsc_id:test_rsc action:none rc:ok op_status:complete\\\" -t 3000\")",
          "667:   test.add_cmd(\"-c exec -r test_rsc -s 5000 -a start -w -t 4000\")",
          "668:   test.add_cmd(\"-c cancel -r test_rsc -a start -t 3000 \"",
          "671:    \"\\\"NEW_EVENT event_type:exec_complete rsc_id:test_rsc action:start rc:ok op_status:complete\\\" -t 5000\")",
          "672:   test.add_cmd(\"-c unregister_rsc -r test_rsc -t 3000 \"",
          "678:    test.add_cmd(\"-c register_rsc -r rsc1 -C systemd -T lrmd_dummy_daemon -t 3000 \")",
          "680:    test.add_cmd(\"-c unregister_rsc -r rsc1 -t 3000 \")",
          "684:    test.add_cmd(\"-c register_rsc -r rsc1 -C upstart -T lrmd_dummy_daemon -t 3000 \")",
          "686:    test.add_cmd(\"-c unregister_rsc -r rsc1 -t 3000 \")",
          "689:   test.add_cmd(\"-c register_rsc -r rsc2 -C ocf -T Dummy -P pacemaker -t 3000 \")",
          "691:   test.add_cmd(\"-c unregister_rsc -r rsc2 -t 3000 \")",
          "696:   test.add_cmd(\"-c register_rsc -r rsc2 -C ocf -T Dummy -P pacemaker -t 3000 \")",
          "698:   test.add_cmd(\"-c register_rsc -r rsc2 -C ocf -T Dummy -P pacemaker -t 3000 \")",
          "700:   test.add_cmd(\"-c register_rsc -r rsc2 -C ocf -T Stateful -P pacemaker -t 3000 \")",
          "702:   test.add_cmd(\"-c unregister_rsc -r rsc2 -t 3000 \")",
          "707:   test.add_cmd(\"-c register_rsc -r \\\"test_rsc\\\" -C \\\"ocf\\\" -P \\\"pacemaker\\\" -T \\\"Dummy\\\" -t 3000 \"",
          "709:   test.add_cmd(\"-c exec -r \\\"test_rsc\\\" -a \\\"start\\\" -t 3000 \"",
          "711:   test.add_cmd(\"-c exec -r \\\"test_rsc\\\" -a \\\"monitor\\\" -i \\\"100\\\" -t 3000 -n \"",
          "714:   test.add_expected_fail_cmd(\"-l \\\"NEW_EVENT event_type:exec_complete rsc_id:test_rsc action:monitor rc:ok op_status:complete\\\" -t 3000\")",
          "715:   test.add_cmd(\"-c cancel -r \\\"test_rsc\\\" -a \\\"monitor\\\" -i \\\"100\\\" -t \\\"3000\\\" \")",
          "716:   test.add_cmd(\"-c unregister_rsc -r \\\"test_rsc\\\" -t 3000 \"",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "842:   self.options['verbose'] = 0",
          "843:   self.options['invalid-arg'] = \"\"",
          "844:   self.options['show-usage'] = 0",
          "846:  def build_options(self, argv):",
          "847:   args = argv[1:]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "853:   self.options['tls-backend'] = 0",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "856:     self.options['list-tests'] = 1",
          "857:    elif args[i] == \"-V\" or args[i] == \"--verbose\":",
          "858:     self.options['verbose'] = 1",
          "859:    elif args[i] == \"-r\" or args[i] == \"--run-only\":",
          "860:     self.options['run-only'] = args[i+1]",
          "861:     skip = 1",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "868:    elif args[i] == \"-S\" or args[i] == \"--tls-backend\":",
          "869:     self.options['tls-backend'] = 1",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "871:   print \"\\t [--list-tests | -l]                  Print out all registered tests.\"",
          "872:   print \"\\t [--run-only | -r 'testname']         Run a specific test\"",
          "873:   print \"\\t [--verbose | -V]                     Verbose output\"",
          "874:   print \"\\t [--run-only-pattern | -p 'string']   Run only tests containing the string value\"",
          "875:   print \"\\n\\tExample: Run only the test 'start_top'\"",
          "876:   print \"\\t\\t python ./regression.py --run-only start_stop\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "885:   print \"\\t [--tls-backend | -S                  Use tls backend\"",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "882:  o = TestOptions()",
          "883:  o.build_options(argv)",
          "887:  tests.build_generic_tests()",
          "888:  tests.build_multi_rsc_tests()",
          "",
          "[Removed Lines]",
          "885:  tests = Tests(o.options['verbose'])",
          "",
          "[Added Lines]",
          "897:  tests = Tests(o.options['verbose'], o.options['tls-backend'])",
          "",
          "---------------"
        ],
        "lrmd/test.c||lrmd/test.c": [
          "File: lrmd/test.c -> lrmd/test.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "35:     {\"help\",             0, 0, '?'},",
          "36:     {\"verbose\",          0, 0, 'V', \"\\t\\tPrint out logs and events to screen\"},",
          "37:     {\"quiet\",            0, 0, 'Q', \"\\t\\tSuppress all output to screen\"},",
          "38:     {\"listen\",           1, 0, 'l', \"\\tListen for a specific event string\"},",
          "39:     {\"api-call\",         1, 0, 'c', \"\\tDirectly relates to lrmd api functions\"},",
          "40:     {\"no-wait\",          0, 0, 'w', \"\\tMake api call and do not wait for result.\"},",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "38:     {\"tls\",              0, 0, 'S', \"\\t\\tUse tls backend for local connection\"},",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "432:     int flag;",
          "433:     char *key = NULL;",
          "434:     char *val = NULL;",
          "435:     crm_trigger_t *trig;",
          "437:     crm_set_options(NULL, \"mode [options]\", long_options,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "436:     gboolean use_tls = FALSE;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "512:                     key = val = NULL;",
          "513:                 }",
          "514:                 break;",
          "515:             default:",
          "516:                 ++argerr;",
          "517:                 break;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "517:             case 'S':",
          "518:                 use_tls = TRUE;",
          "519:                 break;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "562:         return 0;",
          "563:     }",
          "566:     trig = mainloop_add_trigger(G_PRIORITY_HIGH, start_test, NULL);",
          "567:     mainloop_set_trigger(trig);",
          "568:     mainloop_add_signal(SIGTERM, test_shutdown);",
          "",
          "[Removed Lines]",
          "565:     lrmd_conn = lrmd_api_new();",
          "",
          "[Added Lines]",
          "570:     if (use_tls) {",
          "571:         lrmd_conn = lrmd_remote_api_new(\"localhost\", 0);",
          "572:     } else {",
          "573:         lrmd_conn = lrmd_api_new();",
          "574:     }",
          "",
          "---------------"
        ],
        "lrmd/tls_backend.c||lrmd/tls_backend.c": [
          "File: lrmd/tls_backend.c -> lrmd/tls_backend.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: #include <crm_internal.h>",
          "22: #include <glib.h>",
          "23: #include <unistd.h>",
          "25: #include <crm/crm.h>",
          "26: #include <crm/msg_xml.h>",
          "27: #include <crm/crm.h>",
          "28: #include <crm/msg_xml.h>",
          "29: #include <crm/common/mainloop.h>",
          "31: #include <lrmd_private.h>",
          "33: #include <sys/socket.h>",
          "34: #include <netinet/ip.h>",
          "35: #include <arpa/inet.h>",
          "37: #ifdef HAVE_GNUTLS_GNUTLS_H",
          "38: #define LRMD_REMOTE_AUTH_TIMEOUT 3000",
          "39: gnutls_psk_server_credentials_t psk_cred_s;",
          "40: gnutls_dh_params_t dh_params;",
          "41: static int ssock = 0;",
          "42: extern int lrmd_call_id;",
          "44: static void",
          "45: debug_log(int level, const char *str)",
          "46: {",
          "47:     fputs(str, stderr);",
          "48: }",
          "50: static int",
          "51: lrmd_remote_client_msg(gpointer data)",
          "52: {",
          "53:     int id = 0;",
          "54:     int rc = 0;",
          "55:     int disconnected = 0;",
          "56:     xmlNode *request = NULL;",
          "57:     crm_client_t *client = data;",
          "59:     if (client->handshake_complete == FALSE) {",
          "60:         int rc = 0;",
          "64:         do {",
          "65:             rc = gnutls_handshake(*client->session);",
          "67:             if (rc < 0 && rc != GNUTLS_E_AGAIN) {",
          "68:                 crm_err(\"Remote lrmd tls handshake failed\");",
          "69:                 return -1;",
          "70:             }",
          "71:         } while (rc == GNUTLS_E_INTERRUPTED);",
          "73:         if (rc == 0) {",
          "74:             crm_debug(\"Remote lrmd tls handshake completed\");",
          "75:             client->handshake_complete = TRUE;",
          "76:             if (client->remote_auth_timeout) {",
          "77:                 g_source_remove(client->remote_auth_timeout);",
          "78:             }",
          "79:             client->remote_auth_timeout = 0;",
          "80:         }",
          "81:         return 0;",
          "82:     }",
          "84:     rc = crm_recv_remote_ready(client->session, TRUE, 0);",
          "85:     if (rc == 0) {",
          "87:         return 0;",
          "88:     } else if (rc < 0) {",
          "89:         crm_info(\"Client disconnected during remote client read\");",
          "90:         return -1;",
          "91:     }",
          "93:     crm_recv_remote_msg(client->session, &client->recv_buf, TRUE, -1, &disconnected);",
          "95:     request = crm_parse_remote_buffer(&client->recv_buf);",
          "96:  while (request) {",
          "97:         crm_element_value_int(request, F_LRMD_REMOTE_MSG_ID, &id);",
          "98:         crm_trace(\"processing request from remote client with remote msg id %d\", id);",
          "99:         if (!client->name) {",
          "100:             const char *value = crm_element_value(request, F_LRMD_CLIENTNAME);",
          "101:             if (value) {",
          "102:                 client->name = strdup(value);",
          "103:             }",
          "104:         }",
          "106:         lrmd_call_id++;",
          "107:         if (lrmd_call_id < 1) {",
          "108:             lrmd_call_id = 1;",
          "109:         }",
          "111:         crm_xml_add(request, F_LRMD_CLIENTID, client->id);",
          "112:         crm_xml_add(request, F_LRMD_CLIENTNAME, client->name);",
          "113:         crm_xml_add_int(request, F_LRMD_CALLID, lrmd_call_id);",
          "115:         process_lrmd_message(client, id, request);",
          "116:         free_xml(request);",
          "119:         request = crm_parse_remote_buffer(&client->recv_buf);",
          "120:     }",
          "122:     if (disconnected) {",
          "123:         crm_info(\"Client disconnect detected in tls msg dispatcher.\");",
          "124:         return -1;",
          "125:     }",
          "127:     return 0;",
          "128: }",
          "130: static void",
          "131: lrmd_remote_client_destroy(gpointer user_data)",
          "132: {",
          "133:     crm_client_t *client = user_data;",
          "135:     if (client == NULL) {",
          "136:         return;",
          "137:     }",
          "139:     client_disconnect_cleanup(client->id);",
          "141:     crm_notice(\"LRMD client disconnecting remote client - name: %s id: %s\",",
          "142:         client->name ? client->name : \"<unknown>\",",
          "143:         client->id);",
          "145:     if (client->session) {",
          "146:         void *sock_ptr;",
          "147:         int csock;",
          "148:         sock_ptr = gnutls_transport_get_ptr(*client->session);",
          "149:         csock = GPOINTER_TO_INT(sock_ptr);",
          "151:         gnutls_bye(*client->session, GNUTLS_SHUT_RDWR);",
          "152:         gnutls_deinit(*client->session);",
          "153:         gnutls_free(client->session);",
          "154:         close(csock);",
          "155:     }",
          "157:     crm_client_destroy(client);",
          "159:     return;",
          "160: }",
          "162: static gboolean",
          "163: lrmd_auth_timeout_cb(gpointer data)",
          "164: {",
          "165:     crm_client_t *client = data;",
          "167:     client->remote_auth_timeout = 0;",
          "169:     if (client->handshake_complete == TRUE) {",
          "170:         return FALSE;",
          "171:     }",
          "173:     mainloop_del_fd(client->remote);",
          "174:     client->remote = NULL;",
          "175:     crm_err(\"Remote client authentication timed out\");",
          "177:     return FALSE;",
          "178: }",
          "180: static int",
          "181: lrmd_remote_listen(gpointer data)",
          "182: {",
          "183:     int csock = 0;",
          "184:     int flag = 0;",
          "185:     unsigned laddr;",
          "186:     struct sockaddr_in addr;",
          "187:     gnutls_session *session = NULL;",
          "188:     crm_client_t *new_client = NULL;",
          "190:     static struct mainloop_fd_callbacks lrmd_remote_fd_cb =",
          "191:         {",
          "192:             .dispatch = lrmd_remote_client_msg,",
          "193:             .destroy = lrmd_remote_client_destroy,",
          "194:         };",
          "197:     laddr = sizeof(addr);",
          "198:     csock = accept(ssock, (struct sockaddr *)&addr, &laddr);",
          "199:     crm_debug(\"New remote connection from %s\", inet_ntoa(addr.sin_addr));",
          "201:     if (csock == -1) {",
          "202:         crm_err(\"accept socket failed\");",
          "203:         return TRUE;",
          "204:     }",
          "206:     if ((flag = fcntl(csock, F_GETFL)) >= 0) {",
          "207:         if (fcntl(csock, F_SETFL, flag | O_NONBLOCK) < 0) {",
          "208:             crm_err( \"fcntl() write failed\");",
          "209:             close(csock);",
          "210:             return TRUE;",
          "211:         }",
          "212:     } else {",
          "213:         crm_err( \"fcntl() read failed\");",
          "214:         close(csock);",
          "215:         return TRUE;",
          "216:     }",
          "218:     session = create_psk_tls_session(csock, GNUTLS_SERVER, psk_cred_s);",
          "219:     if (session == NULL) {",
          "220:         crm_err(\"TLS session creation failed\");",
          "221:         close(csock);",
          "222:         return TRUE;",
          "223:     }",
          "225:     new_client = calloc(1, sizeof(crm_client_t));",
          "226:     new_client->kind = client_type_tls;",
          "227:     new_client->session = session;",
          "228:     new_client->id = crm_generate_uuid();",
          "229:     new_client->remote_auth_timeout = g_timeout_add(LRMD_REMOTE_AUTH_TIMEOUT, lrmd_auth_timeout_cb, new_client);",
          "230:     crm_notice(\"LRMD client connection established. %p id: %s\", new_client, new_client->id);",
          "232:     new_client->remote = mainloop_add_fd(\"lrmd-remote-client\", G_PRIORITY_DEFAULT, csock, new_client, &lrmd_remote_fd_cb);",
          "233:     g_hash_table_insert(client_connections, new_client->id, new_client);",
          "235:     return TRUE;",
          "236: }",
          "238: static void",
          "239: lrmd_remote_connection_destroy(gpointer user_data)",
          "240: {",
          "241:     crm_notice(\"Remote tls server disconnected\");",
          "242:     return;",
          "243: }",
          "245: static int",
          "246: lrmd_tls_server_key_cb(gnutls_session_t session, const char *username, gnutls_datum_t *key)",
          "247: {",
          "248:     int rc = 0;",
          "250:     if (lrmd_tls_set_key(key, DEFAULT_REMOTE_KEY_LOCATION)) {",
          "251:         rc = lrmd_tls_set_key(key, ALT_REMOTE_KEY_LOCATION);",
          "252:     }",
          "253:     if (rc) {",
          "254:         crm_err(\"No lrmd remote key found\");",
          "255:         return -1;",
          "256:     }",
          "258:     return rc;",
          "259: }",
          "261: int",
          "262: lrmd_init_remote_tls_server(int port)",
          "263: {",
          "264:     int rc;",
          "265:     struct sockaddr_in saddr;",
          "266:     int optval;",
          "267:     static struct mainloop_fd_callbacks remote_listen_fd_callbacks =",
          "268:         {",
          "269:             .dispatch = lrmd_remote_listen,",
          "270:             .destroy = lrmd_remote_connection_destroy,",
          "271:         };",
          "273:     crm_notice(\"Starting a tls listener on port %d.\", port);",
          "274:     gnutls_global_init();",
          "275:     gnutls_global_set_log_function(debug_log);",
          "277:     gnutls_dh_params_init(&dh_params);",
          "278:     gnutls_dh_params_generate2(dh_params, 1024);",
          "279:     gnutls_psk_allocate_server_credentials(&psk_cred_s);",
          "280:     gnutls_psk_set_server_credentials_function(psk_cred_s, lrmd_tls_server_key_cb);",
          "281:     gnutls_psk_set_server_dh_params(psk_cred_s, dh_params);",
          "284:     ssock = socket(AF_INET, SOCK_STREAM, 0);",
          "285:     if (ssock == -1) {",
          "286:         crm_err(\"Can not create server socket.\");",
          "287:         return -1;",
          "288:     }",
          "291:     optval = 1;",
          "292:     rc = setsockopt(ssock, SOL_SOCKET, SO_REUSEADDR, &optval, sizeof(optval));",
          "293:     if(rc < 0) {",
          "294:         crm_perror(LOG_INFO, \"Couldn't allow the reuse of local addresses by our remote listener\");",
          "295:     }",
          "297:     rc = -1;",
          "300:     memset(&saddr, '\\0', sizeof(saddr));",
          "301:     saddr.sin_family = AF_INET;",
          "302:     saddr.sin_addr.s_addr = INADDR_ANY;",
          "303:     saddr.sin_port = htons(port);",
          "304:     if (bind(ssock, (struct sockaddr *)&saddr, sizeof(saddr)) == -1) {",
          "305:         crm_err(\"Can not bind server socket.\");",
          "306:         goto init_remote_cleanup;",
          "307:     }",
          "309:     if (listen(ssock, 10) == -1) {",
          "310:         crm_err(\"Can not start listen.\");",
          "311:         goto init_remote_cleanup;",
          "312:     }",
          "314:     mainloop_add_fd(\"lrmd-remote\", G_PRIORITY_DEFAULT, ssock, NULL, &remote_listen_fd_callbacks);",
          "316:     rc = ssock;",
          "317: init_remote_cleanup:",
          "318:     if (rc < 0) {",
          "319:         close(ssock);",
          "320:         ssock = 0;",
          "321:     }",
          "322:     return rc;",
          "324: }",
          "326: void",
          "327: lrmd_tls_server_destroy(void)",
          "328: {",
          "329:     if (psk_cred_s) {",
          "330:         gnutls_psk_free_server_credentials(psk_cred_s);",
          "331:         psk_cred_s = 0;",
          "332:     }",
          "334:     if (ssock > 0) {",
          "335:         close(ssock);",
          "336:         ssock = 0;",
          "337:     }",
          "338: }",
          "339: #endif",
          "",
          "---------------"
        ],
        "tools/crm_mon.c||tools/crm_mon.c": [
          "File: tools/crm_mon.c -> tools/crm_mon.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "275:             if (rc == pcmk_ok) {",
          "276:                 rc = cib->cmds->set_connection_dnotify(cib, mon_cib_connection_destroy);",
          "277:                 if (rc == -EPROTONOSUPPORT) {",
          "279:                     if (as_console) {",
          "280:                         sleep(2);",
          "281:                     }",
          "",
          "[Removed Lines]",
          "278:                     print_as(\"Notification setup failed, won't be able to reconnect after failure\");",
          "",
          "[Added Lines]",
          "278:                     print_as(\"Notification setup not supported, won't be able to reconnect after failure\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a5e6f70423a51d84185af8861d9a6ec3909a31d5",
      "candidate_info": {
        "commit_hash": "a5e6f70423a51d84185af8861d9a6ec3909a31d5",
        "repo": "ClusterLabs/pacemaker",
        "commit_url": "https://github.com/ClusterLabs/pacemaker/commit/a5e6f70423a51d84185af8861d9a6ec3909a31d5",
        "files": [
          "lib/common/remote.c"
        ],
        "message": "Low: remote: Fixes memleak in async TCP connect",
        "before_after_code_files": [
          "lib/common/remote.c||lib/common/remote.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/common/remote.c||lib/common/remote.c"
          ],
          "candidate": [
            "lib/common/remote.c||lib/common/remote.c"
          ]
        }
      },
      "candidate_diff": {
        "lib/common/remote.c||lib/common/remote.c": [
          "File: lib/common/remote.c -> lib/common/remote.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "822:                              void *userdata, void (*callback) (void *userdata, int sock))",
          "823: {",
          "826:     struct addrinfo hints;",
          "827:     const char *server = host;",
          "828:     int ret_ga;",
          "832:     memset(&hints, 0, sizeof(struct addrinfo));",
          "",
          "[Removed Lines]",
          "824:     struct addrinfo *res;",
          "825:     struct addrinfo *rp;",
          "829:     int sock;",
          "",
          "[Added Lines]",
          "824:     struct addrinfo *res = NULL;",
          "825:     struct addrinfo *rp = NULL;",
          "829:     int sock = -1;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "844:     if (!res || !res->ai_addr) {",
          "845:         crm_err(\"getaddrinfo failed\");",
          "847:     }",
          "849:     for (rp = res; rp != NULL; rp = rp->ai_next) {",
          "",
          "[Removed Lines]",
          "846:         return -1;",
          "",
          "[Added Lines]",
          "846:         goto async_cleanup;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "879:         if (callback) {",
          "880:             if (internal_tcp_connect_async",
          "881:                 (sock, rp->ai_addr, rp->ai_addrlen, timeout, userdata, callback) == 0) {",
          "883:             }",
          "885:         } else {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "882:                 sock = 0;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "891:         close(sock);",
          "892:         sock = -1;",
          "893:     }",
          "896:     return sock;",
          "897: }",
          "",
          "[Removed Lines]",
          "894:     freeaddrinfo(res);",
          "",
          "[Added Lines]",
          "896: async_cleanup:",
          "898:     if (res) {",
          "899:         freeaddrinfo(res);",
          "900:     }",
          "",
          "---------------"
        ]
      }
    }
  ]
}