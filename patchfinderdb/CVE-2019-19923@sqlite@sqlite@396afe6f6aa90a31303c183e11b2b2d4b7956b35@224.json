{
  "cve_id": "CVE-2019-19923",
  "cve_desc": "flattenSubquery in select.c in SQLite 3.30.1 mishandles certain uses of SELECT DISTINCT involving a LEFT JOIN in which the right-hand side is a view. This can cause a NULL pointer dereference (or incorrect results).",
  "repo": "sqlite/sqlite",
  "patch_hash": "396afe6f6aa90a31303c183e11b2b2d4b7956b35",
  "patch_info": {
    "commit_hash": "396afe6f6aa90a31303c183e11b2b2d4b7956b35",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/396afe6f6aa90a31303c183e11b2b2d4b7956b35",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/join.test"
    ],
    "message": "Continue to back away from the LEFT JOIN optimization of check-in [41c27bc0ff1d3135] by disallowing query flattening if the outer query is DISTINCT.  Without this fix, if an index scan is run on the table within the view on the right-hand side of the LEFT JOIN, stale result registers might be accessed yielding incorrect results, and/or an OP_IfNullRow opcode might be invoked on the un-opened table, resulting in a NULL-pointer dereference.  This problem was found by the Yongheng and Rui fuzzer.\n\nFossilOrigin-Name: 862974312edf00e9d1068115d1a39b7235b7db68b6d86b81d38a12f025a4748e",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/join.test||test/join.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 289158aa24b066c453d2bce4bc2dead1c56fb0b23c3f7c4810b34b13627cef34",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3797:   if( (pSubitem->fg.jointype & JT_OUTER)!=0 ){",
      "3798:     isLeftJoin = 1;",
      "3801:       return 0;",
      "3802:     }",
      "3803:   }",
      "",
      "[Removed Lines]",
      "3799:     if( pSubSrc->nSrc>1 || isAgg || IsVirtual(pSubSrc->a[0].pTab) ){",
      "",
      "[Added Lines]",
      "3804:     ){",
      "",
      "---------------"
    ],
    "test/join.test||test/join.test": [
      "File: test/join.test -> test/join.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "975:   SELECT 24, * FROM t1 LEFT JOIN t0 ON +aa ISNULL;",
      "976: } {13 1 {} 14 1 {} 23 1 {} 24 1 {}}",
      "978: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "978: # 2019-12-18 problem with a LEFT JOIN where the RHS is a view.",
      "979: # Detected by Yongheng and Rui.",
      "980: # Follows from the optimization attempt of check-in 41c27bc0ff1d3135",
      "981: # on 2017-04-18",
      "982: #",
      "983: reset_db",
      "984: do_execsql_test join-22.10 {",
      "985:   CREATE TABLE t0(a, b);",
      "986:   CREATE INDEX t0a ON t0(a);",
      "987:   INSERT INTO t0 VALUES(10,10),(10,11),(10,12);",
      "988:   SELECT DISTINCT c FROM t0 LEFT JOIN (SELECT a+1 AS c FROM t0) ORDER BY c ;",
      "989: } {11}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "594b124f216641e7d6df059cca84c45d4f0ab393",
      "candidate_info": {
        "commit_hash": "594b124f216641e7d6df059cca84c45d4f0ab393",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/594b124f216641e7d6df059cca84c45d4f0ab393",
        "files": [
          "ext/misc/sha1.c",
          "manifest",
          "manifest.uuid",
          "src/hwtime.h",
          "tool/dbhash.c"
        ],
        "message": "Changes to extensions and test logic so that the build works with gcc and with -std=iso9899:1999\n\nFossilOrigin-Name: 2575a68c3965e72f2ab211d933012442755afe6a9b7de9e9e50cdd2155fd1ec8",
        "before_after_code_files": [
          "ext/misc/sha1.c||ext/misc/sha1.c",
          "manifest.uuid||manifest.uuid",
          "src/hwtime.h||src/hwtime.h",
          "tool/dbhash.c||tool/dbhash.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/misc/sha1.c||ext/misc/sha1.c": [
          "File: ext/misc/sha1.c -> ext/misc/sha1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "39:   unsigned char buffer[64];",
          "40: };",
          "56: #define SHA_ROT(x,l,r) ((x) << (l) | (x) >> (r))",
          "57: #define rol(x,k) SHA_ROT(x,k,32-(k))",
          "58: #define ror(x,k) SHA_ROT(x,32-(k),k)",
          "62: #define blk0le(i) (block[i] = (ror(block[i],8)&0xFF00FF00) \\",
          "63:     |(rol(block[i],8)&0x00FF00FF))",
          "",
          "[Removed Lines]",
          "43: #if __GNUC__ && (defined(__i386__) || defined(__x86_64__))",
          "49: #define SHA_ROT(op, x, k) \\",
          "50:         ({ unsigned int y; asm(op \" %1,%0\" : \"=r\" (y) : \"I\" (k), \"0\" (x)); y; })",
          "51: #define rol(x,k) SHA_ROT(\"roll\", x, k)",
          "52: #define ror(x,k) SHA_ROT(\"rorl\", x, k)",
          "54: #else",
          "59: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: a48f6e17599d7ec794cfcd60858d6a69cf05caaae9321048b111fedd86a3b5b2",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/hwtime.h||src/hwtime.h": [
          "File: src/hwtime.h -> src/hwtime.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "28:   #if defined(__GNUC__)",
          "",
          "[Removed Lines]",
          "25: #if (defined(__GNUC__) || defined(_MSC_VER)) && \\",
          "26:       (defined(i386) || defined(__i386__) || defined(_M_IX86))",
          "",
          "[Added Lines]",
          "25: #if !defined(__STRICT_ANSI__) && \\",
          "26:     (defined(__GNUC__) || defined(_MSC_VER)) && \\",
          "27:     (defined(i386) || defined(__i386__) || defined(_M_IX86))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "45:   #endif",
          "49:   __inline__ sqlite_uint64 sqlite3Hwtime(void){",
          "50:       unsigned long val;",
          "",
          "[Removed Lines]",
          "47: #elif (defined(__GNUC__) && defined(__x86_64__))",
          "",
          "[Added Lines]",
          "48: #elif !defined(__STRICT_ANSI__) && (defined(__GNUC__) && defined(__x86_64__))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "52:       return val;",
          "53:   }",
          "57:   __inline__ sqlite_uint64 sqlite3Hwtime(void){",
          "58:       unsigned long long retval;",
          "",
          "[Removed Lines]",
          "55: #elif (defined(__GNUC__) && defined(__ppc__))",
          "",
          "[Added Lines]",
          "56: #elif !defined(__STRICT_ANSI__) && (defined(__GNUC__) && defined(__ppc__))",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "70: #else",
          "81:   sqlite_uint64 sqlite3Hwtime(void){ return ((sqlite_uint64)0); }",
          "",
          "[Removed Lines]",
          "72:   #error Need implementation of sqlite3Hwtime() for your platform.",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tool/dbhash.c||tool/dbhash.c": [
          "File: tool/dbhash.c -> tool/dbhash.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "78: #define SHA_ROT(x,l,r) ((x) << (l) | (x) >> (r))",
          "79: #define rol(x,k) SHA_ROT(x,k,32-(k))",
          "80: #define ror(x,k) SHA_ROT(x,32-(k),k)",
          "84: #define blk0le(i) (block[i] = (ror(block[i],8)&0xFF00FF00) \\",
          "85:     |(rol(block[i],8)&0x00FF00FF))",
          "",
          "[Removed Lines]",
          "65: #if __GNUC__ && (defined(__i386__) || defined(__x86_64__))",
          "71: #define SHA_ROT(op, x, k) \\",
          "72:         ({ unsigned int y; asm(op \" %1,%0\" : \"=r\" (y) : \"I\" (k), \"0\" (x)); y; })",
          "73: #define rol(x,k) SHA_ROT(\"roll\", x, k)",
          "74: #define ror(x,k) SHA_ROT(\"rorl\", x, k)",
          "76: #else",
          "81: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8cce6b8310da057f5c4ffce3ce117ac84264e2ab",
      "candidate_info": {
        "commit_hash": "8cce6b8310da057f5c4ffce3ce117ac84264e2ab",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/8cce6b8310da057f5c4ffce3ce117ac84264e2ab",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in"
        ],
        "message": "Add the --no-rowids option to the \".recover\" command.\n\nFossilOrigin-Name: 01d71b947a7422081d5c7d6ac2c91b9c936dc41926ab58c92f4a088a64e8c051",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 3dbed162518a73213bbfb137c763064518fdc2daeae3952cfab39ce0e6813d3f",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "3588:   \"   --freelist-corrupt       Assume the freelist is corrupt\",",
          "3589:   \"   --recovery-db NAME       Store recovery metadata in database file NAME\",",
          "3590:   \"   --lost-and-found TABLE   Alternative name for the lost-and-found table\",",
          "3591: #endif",
          "3592:   \".restore ?DB? FILE       Restore content of DB (default \\\"main\\\") from FILE\",",
          "3593:   \".save FILE               Write in-memory database into FILE\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3591:   \"   --no-rowids              Do not attempt to recover rowid values\",",
          "3592:   \"                            that are not also INTEGER PRIMARY KEYs\",",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "6607:     if( n<=15 && memcmp(\"-lost-and-found\", z, n)==0 && i<(nArg-1) ){",
          "6608:       i++;",
          "6609:       zLostAndFound = azArg[i];",
          "6610:     }",
          "6611:     else{",
          "6612:       utf8_printf(stderr, \"unexpected option: %s\\n\", azArg[i]);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6613:     }else",
          "6614:     if( n<=10 && memcmp(\"-no-rowids\", z, n)==0 ){",
          "6615:       bRowids = 0;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "6772:   shellPrepare(pState->db, &rc,",
          "6773:       \"SELECT pgno FROM recovery.map WHERE root=?\", &pPages",
          "6774:   );",
          "6775:   shellPrepare(pState->db, &rc,",
          "6777:       \", min(field) \"",
          "6778:       \"FROM sqlite_dbdata WHERE pgno = ? AND field != ?\"",
          "6779:       \"GROUP BY cell\", &pCells",
          "",
          "[Removed Lines]",
          "6776:       \"SELECT max(field), group_concat(shell_escape_crnl(quote(value)), ', ')\"",
          "",
          "[Added Lines]",
          "6783:       \"SELECT max(field), group_concat(shell_escape_crnl(quote\"",
          "6784:       \"(case when (? AND field<0) then NULL else value end)\"",
          "6785:       \"), ', ')\"",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "6808:       raw_printf(pState->out, \"DELETE FROM sqlite_sequence;\\n\");",
          "6809:     }",
          "6810:     sqlite3_bind_int(pPages, 1, iRoot);",
          "6813:     while( rc==SQLITE_OK && SQLITE_ROW==sqlite3_step(pPages) ){",
          "6814:       int iPgno = sqlite3_column_int(pPages, 0);",
          "6816:       while( rc==SQLITE_OK && SQLITE_ROW==sqlite3_step(pCells) ){",
          "6817:         int nField = sqlite3_column_int(pCells, 0);",
          "6818:         int iMin = sqlite3_column_int(pCells, 2);",
          "",
          "[Removed Lines]",
          "6811:     sqlite3_bind_int(pCells, 2, pTab->iPk);",
          "6815:       sqlite3_bind_int(pCells, 1, iPgno);",
          "",
          "[Added Lines]",
          "6820:     if( bRowids==0 && pTab->iPk<0 ){",
          "6821:       sqlite3_bind_int(pCells, 1, 1);",
          "6822:     }else{",
          "6823:       sqlite3_bind_int(pCells, 1, 0);",
          "6824:     }",
          "6825:     sqlite3_bind_int(pCells, 3, pTab->iPk);",
          "6829:       sqlite3_bind_int(pCells, 2, iPgno);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "94809086e50e86bfd34f134eb3385676359f8b3c",
      "candidate_info": {
        "commit_hash": "94809086e50e86bfd34f134eb3385676359f8b3c",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/94809086e50e86bfd34f134eb3385676359f8b3c",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/sqliteInt.h",
          "src/window.c"
        ],
        "message": "Use a separate bit on db->dbOptFlags to disable the xInverse optimization on window functions, rather than reusing the query-flattener disable bit.\n\nFossilOrigin-Name: bc0fb1c324be2fd668bc4398c7d364b7e3c5a98537fe5fb58a125b66f3e6d041",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/window.c||src/window.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 10aedce3dd2c0c9f0ee9e0aefd0b4d2c2eb17c4ca72003c4db9768ea5cdafcf4",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1092:   pWin->eFrmType = eType;",
          "1093:   pWin->eStart = eStart;",
          "1094:   pWin->eEnd = eEnd;",
          "1096:     eExclude = TK_NO;",
          "1097:   }",
          "1098:   pWin->eExclude = eExclude;",
          "",
          "[Removed Lines]",
          "1095:   if( eExclude==0 && OptimizationDisabled(pParse->db, SQLITE_QueryFlattener) ){",
          "",
          "[Added Lines]",
          "1095:   if( eExclude==0 && OptimizationDisabled(pParse->db, SQLITE_WindowFunc) ){",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e216ae0a3e334f6ca51ca0d1d11cf07c380dd0ea",
      "candidate_info": {
        "commit_hash": "e216ae0a3e334f6ca51ca0d1d11cf07c380dd0ea",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e216ae0a3e334f6ca51ca0d1d11cf07c380dd0ea",
        "files": [
          "ext/misc/dbdata.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Fix further buffer overreads triggered by passing corrupt records to the sqlite_dbdata module.\n\nFossilOrigin-Name: dbc6a9f7f67256dea96d3245e7bec145ba65d64adf322e18f1f3ac9556b4e0b6",
        "before_after_code_files": [
          "ext/misc/dbdata.c||ext/misc/dbdata.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/misc/dbdata.c||ext/misc/dbdata.c": [
          "File: ext/misc/dbdata.c -> ext/misc/dbdata.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "495:         int iHdr;",
          "496:         int U, X;",
          "497:         int nLocal;",
          "499:         switch( pCsr->aPage[iOff] ){",
          "500:           case 0x02:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "498:         int bNextPage = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "512:         }",
          "514:         if( pCsr->iCell>=pCsr->nCell ){",
          "515:           sqlite3_free(pCsr->aPage);",
          "516:           pCsr->aPage = 0;",
          "517:           if( pCsr->bOnePage ) return SQLITE_OK;",
          "518:           pCsr->iPgno++;",
          "519:           continue;",
          "520:         }",
          "591:       }else{",
          "592:         pCsr->iField++;",
          "593:         if( pCsr->iField>0 ){",
          "",
          "[Removed Lines]",
          "522:         iOff += 8 + nPointer + pCsr->iCell*2;",
          "523:         iOff = get_uint16(&pCsr->aPage[iOff]);",
          "526:         iOff += nPointer;",
          "529:         iOff += dbdataGetVarint(&pCsr->aPage[iOff], &nPayload);",
          "532:         if( bHasRowid ){",
          "533:           iOff += dbdataGetVarint(&pCsr->aPage[iOff], &pCsr->iIntkey);",
          "534:         }",
          "537:         pCsr->pRec = (u8*)sqlite3_malloc64(nPayload);",
          "538:         if( pCsr->pRec==0 ) return SQLITE_NOMEM;",
          "539:         pCsr->nRec = nPayload;",
          "541:         U = pCsr->nPage;",
          "542:         if( bHasRowid ){",
          "543:           X = U-35;",
          "544:         }else{",
          "545:           X = ((U-12)*64/255)-23;",
          "546:         }",
          "547:         if( nPayload<=X ){",
          "548:           nLocal = nPayload;",
          "549:         }else{",
          "550:           int M, K;",
          "551:           M = ((U-12)*32/255)-23;",
          "552:           K = M+((nPayload-M)%(U-4));",
          "553:           if( K<=X ){",
          "554:             nLocal = K;",
          "555:           }else{",
          "556:             nLocal = M;",
          "557:           }",
          "558:         }",
          "561:         memcpy(pCsr->pRec, &pCsr->aPage[iOff], nLocal);",
          "562:         iOff += nLocal;",
          "565:         if( nPayload>nLocal ){",
          "566:           sqlite3_int64 nRem = nPayload - nLocal;",
          "567:           unsigned int pgnoOvfl = get_uint32(&pCsr->aPage[iOff]);",
          "568:           while( nRem>0 ){",
          "569:             u8 *aOvfl = 0;",
          "570:             int nOvfl = 0;",
          "571:             int nCopy;",
          "572:             rc = dbdataLoadPage(pCsr, pgnoOvfl, &aOvfl, &nOvfl);",
          "573:             assert( rc!=SQLITE_OK || nOvfl==pCsr->nPage );",
          "574:             if( rc!=SQLITE_OK ) return rc;",
          "576:             nCopy = U-4;",
          "577:             if( nCopy>nRem ) nCopy = nRem;",
          "578:             memcpy(&pCsr->pRec[nPayload-nRem], &aOvfl[4], nCopy);",
          "579:             nRem -= nCopy;",
          "581:             pgnoOvfl = get_uint32(aOvfl);",
          "582:             sqlite3_free(aOvfl);",
          "583:           }",
          "584:         }",
          "586:         iHdr = dbdataGetVarint(pCsr->pRec, &nHdr);",
          "587:         pCsr->nHdr = nHdr;",
          "588:         pCsr->pHdrPtr = &pCsr->pRec[iHdr];",
          "589:         pCsr->pPtr = &pCsr->pRec[pCsr->nHdr];",
          "590:         pCsr->iField = (bHasRowid ? -1 : 0);",
          "",
          "[Added Lines]",
          "516:           bNextPage = 1;",
          "517:         }else{",
          "519:           iOff += 8 + nPointer + pCsr->iCell*2;",
          "520:           if( iOff>pCsr->nPage ){",
          "521:             bNextPage = 1;",
          "522:           }else{",
          "523:             iOff = get_uint16(&pCsr->aPage[iOff]);",
          "524:           }",
          "527:           iOff += nPointer;",
          "530:           if( bNextPage || iOff>pCsr->nPage ){",
          "531:             bNextPage = 1;",
          "532:           }else{",
          "533:             iOff += dbdataGetVarint(&pCsr->aPage[iOff], &nPayload);",
          "534:           }",
          "537:           if( bHasRowid && !bNextPage && iOff<pCsr->nPage ){",
          "538:             iOff += dbdataGetVarint(&pCsr->aPage[iOff], &pCsr->iIntkey);",
          "539:           }",
          "542:           U = pCsr->nPage;",
          "543:           if( bHasRowid ){",
          "544:             X = U-35;",
          "545:           }else{",
          "546:             X = ((U-12)*64/255)-23;",
          "547:           }",
          "548:           if( nPayload<=X ){",
          "549:             nLocal = nPayload;",
          "550:           }else{",
          "551:             int M, K;",
          "552:             M = ((U-12)*32/255)-23;",
          "553:             K = M+((nPayload-M)%(U-4));",
          "554:             if( K<=X ){",
          "555:               nLocal = K;",
          "556:             }else{",
          "557:               nLocal = M;",
          "558:             }",
          "559:           }",
          "561:           if( bNextPage || nLocal+iOff>pCsr->nPage ){",
          "562:             bNextPage = 1;",
          "563:           }else{",
          "568:             pCsr->pRec = (u8*)sqlite3_malloc64(nPayload+100);",
          "569:             if( pCsr->pRec==0 ) return SQLITE_NOMEM;",
          "570:             memset(pCsr->pRec, 0, nPayload+100);",
          "571:             pCsr->nRec = nPayload;",
          "574:             memcpy(pCsr->pRec, &pCsr->aPage[iOff], nLocal);",
          "575:             iOff += nLocal;",
          "578:             if( nPayload>nLocal ){",
          "579:               sqlite3_int64 nRem = nPayload - nLocal;",
          "580:               unsigned int pgnoOvfl = get_uint32(&pCsr->aPage[iOff]);",
          "581:               while( nRem>0 ){",
          "582:                 u8 *aOvfl = 0;",
          "583:                 int nOvfl = 0;",
          "584:                 int nCopy;",
          "585:                 rc = dbdataLoadPage(pCsr, pgnoOvfl, &aOvfl, &nOvfl);",
          "586:                 assert( rc!=SQLITE_OK || nOvfl==pCsr->nPage );",
          "587:                 if( rc!=SQLITE_OK ) return rc;",
          "589:                 nCopy = U-4;",
          "590:                 if( nCopy>nRem ) nCopy = nRem;",
          "591:                 memcpy(&pCsr->pRec[nPayload-nRem], &aOvfl[4], nCopy);",
          "592:                 nRem -= nCopy;",
          "594:                 pgnoOvfl = get_uint32(aOvfl);",
          "595:                 sqlite3_free(aOvfl);",
          "596:               }",
          "597:             }",
          "599:             iHdr = dbdataGetVarint(pCsr->pRec, &nHdr);",
          "600:             pCsr->nHdr = nHdr;",
          "601:             pCsr->pHdrPtr = &pCsr->pRec[iHdr];",
          "602:             pCsr->pPtr = &pCsr->pRec[pCsr->nHdr];",
          "603:             pCsr->iField = (bHasRowid ? -1 : 0);",
          "604:           }",
          "605:         }",
          "607:         if( bNextPage ){",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: e736da9c18fad138c5502d354c3553373cba15358b69e44b257f60def59422e2",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "39c5c4ae06b0c0397aa0013c1176192d7dd38d41",
      "candidate_info": {
        "commit_hash": "39c5c4ae06b0c0397aa0013c1176192d7dd38d41",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/39c5c4ae06b0c0397aa0013c1176192d7dd38d41",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in",
          "src/sqlite.h.in",
          "src/test1.c",
          "src/vdbeapi.c",
          "test/capi3d.test"
        ],
        "message": "Add the sqlite3_stmt_isexplain() interface.\n\nFossilOrigin-Name: ee642d3e2775ba4c73627ac71d0abf7a0f7a4ab3151d88e0076e9992f4814983",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in",
          "src/sqlite.h.in||src/sqlite.h.in",
          "src/test1.c||src/test1.c",
          "src/vdbeapi.c||src/vdbeapi.c",
          "test/capi3d.test||test/capi3d.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: b0d5cf40bba34e459caa7480bc84a1d75496c2ab52029f4bb0a31f2d9369a8ee",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "3058:       }",
          "3062:         sqlite3_stmt *pExplain;",
          "3063:         char *zEQP;",
          "3064:         int triggerEQP = 0;",
          "",
          "[Removed Lines]",
          "3061:       if( pArg && pArg->autoEQP && sqlite3_strlike(\"EXPLAIN%\",zStmtSql,0)!=0 ){",
          "",
          "[Added Lines]",
          "3061:       if( pArg && pArg->autoEQP && sqlite3_stmt_isexplain(pStmt)==0 ){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3107:       if( pArg ){",
          "3108:         pArg->cMode = pArg->mode;",
          "3109:         if( pArg->autoExplain ){",
          "3113:             pArg->cMode = MODE_Explain;",
          "3114:           }",
          "3117:             pArg->cMode = MODE_EQP;",
          "3118:           }",
          "3119:         }",
          "",
          "[Removed Lines]",
          "3110:           if( sqlite3_column_count(pStmt)==8",
          "3111:            && sqlite3_strlike(\"EXPLAIN%\", zStmtSql,0)==0",
          "3112:           ){",
          "3115:           if( sqlite3_column_count(pStmt)==4",
          "3116:            && sqlite3_strlike(\"EXPLAIN QUERY PLAN%\", zStmtSql,0)==0 ){",
          "",
          "[Added Lines]",
          "3110:           if( sqlite3_stmt_isexplain(pStmt)==1 ){",
          "3113:           if( sqlite3_stmt_isexplain(pStmt)==2 ){",
          "",
          "---------------"
        ],
        "src/sqlite.h.in||src/sqlite.h.in": [
          "File: src/sqlite.h.in -> src/sqlite.h.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "3895: int sqlite3_stmt_readonly(sqlite3_stmt *pStmt);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3907: int sqlite3_stmt_isexplain(sqlite3_stmt *pStmt);",
          "",
          "---------------"
        ],
        "src/test1.c||src/test1.c": [
          "File: src/test1.c -> src/test1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2674:   return TCL_OK;",
          "2675: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2683: static int SQLITE_TCLAPI test_stmt_isexplain(",
          "2684:   void * clientData,",
          "2685:   Tcl_Interp *interp,",
          "2686:   int objc,",
          "2687:   Tcl_Obj *CONST objv[]",
          "2688: ){",
          "2689:   sqlite3_stmt *pStmt;",
          "2690:   int rc;",
          "2692:   if( objc!=2 ){",
          "2693:     Tcl_AppendResult(interp, \"wrong # args: should be \\\"\",",
          "2694:         Tcl_GetStringFromObj(objv[0], 0), \" STMT\", 0);",
          "2695:     return TCL_ERROR;",
          "2696:   }",
          "2698:   if( getStmtPointer(interp, Tcl_GetString(objv[1]), &pStmt) ) return TCL_ERROR;",
          "2699:   rc = sqlite3_stmt_isexplain(pStmt);",
          "2700:   Tcl_SetObjResult(interp, Tcl_NewIntObj(rc));",
          "2701:   return TCL_OK;",
          "2702: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "7840: #endif",
          "7841:      { \"sqlite3_next_stmt\",             test_next_stmt     ,0 },",
          "7842:      { \"sqlite3_stmt_readonly\",         test_stmt_readonly ,0 },",
          "7843:      { \"sqlite3_stmt_busy\",             test_stmt_busy     ,0 },",
          "7844:      { \"uses_stmt_journal\",             uses_stmt_journal ,0 },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7870:      { \"sqlite3_stmt_isexplain\",        test_stmt_isexplain,0 },",
          "",
          "---------------"
        ],
        "src/vdbeapi.c||src/vdbeapi.c": [
          "File: src/vdbeapi.c -> src/vdbeapi.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1608:   return pStmt ? ((Vdbe*)pStmt)->readOnly : 1;",
          "1609: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1615: int sqlite3_stmt_isexplain(sqlite3_stmt *pStmt){",
          "1616:   return pStmt ? ((Vdbe*)pStmt)->explain : 0;",
          "1617: }",
          "",
          "---------------"
        ],
        "test/capi3d.test||test/capi3d.test": [
          "File: test/capi3d.test -> test/capi3d.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "115: test_is_readonly capi3d-2.8 {PRAGMA application_id=1234} 0",
          "116: test_is_readonly capi3d-2.9 {VACUUM} 0",
          "117: test_is_readonly capi3d-2.10 {PRAGMA integrity_check} 1",
          "119:   sqlite3_stmt_readonly 0",
          "120: } 1",
          "122: # Tests for sqlite3_stmt_busy",
          "123: #",
          "124: do_test capi3d-3.1 {",
          "",
          "[Removed Lines]",
          "118: do_test capi3-2.99 {",
          "",
          "[Added Lines]",
          "118: do_test capi3-2.49 {",
          "123: # Tests for the is-explain interface.",
          "124: #",
          "125: proc test_is_explain {testname sql truth} {",
          "126:   do_test $testname [format {",
          "127:     set DB [sqlite3_connection_pointer db]",
          "128:     set STMT [sqlite3_prepare $DB {%s} -1 TAIL]",
          "129:     set rc [sqlite3_stmt_isexplain $STMT]",
          "130:     sqlite3_finalize $STMT",
          "131:     set rc",
          "132:   } $sql] $truth",
          "133: }",
          "135: test_is_explain capi3d-2.51 {SELECT * FROM sqlite_master} 0",
          "136: test_is_explain capi3d-2.52 { explain SELECT * FROM sqlite_master} 1",
          "137: test_is_explain capi3d-2.53 {  Explain Query Plan select * FROM sqlite_master} 2",
          "138: do_test capi3-2.99 {",
          "139:   sqlite3_stmt_isexplain 0",
          "140: } 0",
          "",
          "---------------"
        ]
      }
    }
  ]
}