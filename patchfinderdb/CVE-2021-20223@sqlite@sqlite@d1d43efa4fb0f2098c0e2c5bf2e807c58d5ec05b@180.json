{
  "cve_id": "CVE-2021-20223",
  "cve_desc": "",
  "repo": "sqlite/sqlite",
  "patch_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
  "patch_info": {
    "commit_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "files": [
      "ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Prevent fts5 tokenizer unicode61 from considering '\\0' to be a token characters, even if other characters of class \"Cc\" are.\n\nFossilOrigin-Name: b7b7bde9b7a03665e3691c6d51118965f216d2dfb1617f138b9f9e60e418ed2f",
    "before_after_code_files": [
      "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
      "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c"
    ],
    "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test": [
      "File: ext/fts5/test/fts5tok1.test -> ext/fts5/test/fts5tok1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:   SELECT * FROM t4;",
      "112: } {1 {SQL logic error}}",
      "115: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114: #-------------------------------------------------------------------------",
      "115: # Embedded 0x00 characters.",
      "116: #",
      "117: reset_db",
      "118: do_execsql_test 3.1.0 {",
      "119:   CREATE VIRTUAL TABLE t1 USING fts5(z);",
      "120:   CREATE VIRTUAL TABLE tt USING fts5vocab(t1, 'instance');",
      "121:   INSERT INTO t1 VALUES('abc' || char(0) || 'def');",
      "122:   SELECT * FROM tt;",
      "123: } { abc 1 z 0 def 1 z 1 }",
      "124: do_execsql_test 3.1.1 {",
      "125:   SELECT hex(z) FROM t1;",
      "126: } {61626300646566}",
      "127: do_execsql_test 3.1.2 {",
      "128:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "129: } {}",
      "131: do_execsql_test 3.2.0 {",
      "132:   CREATE VIRTUAL TABLE t2 USING fts5(z,",
      "133:       tokenize=\"unicode61 categories 'L* N* Co Cc'\"",
      "134:   );",
      "135:   CREATE VIRTUAL TABLE tu USING fts5vocab(t2, 'instance');",
      "137:   INSERT INTO t2 VALUES('abc' || char(0) || 'def');",
      "138:   SELECT * FROM tu;",
      "139: } { abc 1 z 0 def 1 z 1 }",
      "141: do_execsql_test 3.2.1 {",
      "142:   SELECT hex(z) FROM t1;",
      "143: } {61626300646566}",
      "145: do_execsql_test 3.2.2 {",
      "146:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "147: } {}",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 0e7e113d9f2c929c1f8a85e2cfad8e2e60f0e8770212b5e5320fb2a2c42911f8",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "4fb24c82cd6bedf39e8c536eb3d1563eca11544a",
      "candidate_info": {
        "commit_hash": "4fb24c82cd6bedf39e8c536eb3d1563eca11544a",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/4fb24c82cd6bedf39e8c536eb3d1563eca11544a",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/wherecode.c",
          "test/gencol1.test"
        ],
        "message": "Fix the OP_DeferredSeek index-to-table column map in P4 so that it works with generated columns.  Ticket [ce22a07731530118]\n\nFossilOrigin-Name: 36c11ad51fe9ab1bde0b98d0ea9b8588e07d168cd8027486749372894941ad93",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/wherecode.c||src/wherecode.c",
          "test/gencol1.test||test/gencol1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 77b1c90add514050fe62f22751362fecacd99f9775346cffc60e09c326e64e10",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/wherecode.c||src/wherecode.c": [
          "File: src/wherecode.c -> src/wherecode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1054:     if( ai ){",
          "1055:       ai[0] = pTab->nCol;",
          "1056:       for(i=0; i<pIdx->nColumn-1; i++){",
          "1057:         assert( pIdx->aiColumn[i]<pTab->nCol );",
          "1059:       }",
          "1060:       sqlite3VdbeChangeP4(v, -1, (char*)ai, P4_INTARRAY);",
          "1061:     }",
          "",
          "[Removed Lines]",
          "1058:         if( pIdx->aiColumn[i]>=0 ) ai[pIdx->aiColumn[i]+1] = i+1;",
          "",
          "[Added Lines]",
          "1057:         int x1, x2;",
          "1059:         x1 = pIdx->aiColumn[i];",
          "1060:         x2 = sqlite3TableColumnToStorage(pTab, x1);",
          "1061:         testcase( x1!=x2 );",
          "1062:         if( pIdx->aiColumn[i]>=0 ) ai[x2+1] = i+1;",
          "",
          "---------------"
        ],
        "test/gencol1.test||test/gencol1.test": [
          "File: test/gencol1.test -> test/gencol1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "211:   REPLACE INTO t0(c1) VALUES(NULL);",
          "212: } {1 {NOT NULL constraint failed: t0.c0}}",
          "214: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "214: # 2019-11-06 ticket b13b7dce76e9352b34e7",
          "215: do_execsql_test gencol1-7.10 {",
          "216:   DROP TABLE IF EXISTS t0;",
          "217:   CREATE TABLE t0 (c0 GENERATED ALWAYS AS (1), c1 UNIQUE, c2 UNIQUE);",
          "218:   INSERT INTO t0(c1) VALUES (1);",
          "219:   SELECT quote(0 = t0.c2 OR t0.c1 BETWEEN t0.c2 AND 1) FROM t0;",
          "220: } {NULL}",
          "221: do_execsql_test gencol1-7.20 {",
          "222:   SELECT 99 FROM t0 WHERE 0 = t0.c2 OR t0.c1 BETWEEN t0.c2 AND 1;",
          "223: } {}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3e42b9917566acdc67a04b08dbf8fc3227fc785d",
      "candidate_info": {
        "commit_hash": "3e42b9917566acdc67a04b08dbf8fc3227fc785d",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/3e42b9917566acdc67a04b08dbf8fc3227fc785d",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/wal.c"
        ],
        "message": "Fix \"GCC_VESRION\" typo in wal.c.\n\nFossilOrigin-Name: fbd9378727141848ba2f5a8eee3076ecbd315e4a87b264c6d890103d56b2e4bc",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/wal.c||src/wal.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 06885e9aa4e430d10f4b32105bcf405c65fd6f7b4cd451baf56fb4f12f408963",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/wal.c||src/wal.c": [
          "File: src/wal.c -> src/wal.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "266: # define AtomicLoad(PTR)       __atomic_load_n((PTR),__ATOMIC_RELAXED)",
          "267: # define AtomicStore(PTR,VAL)  __atomic_store_n((PTR),(VAL),__ATOMIC_RELAXED)",
          "268: #else",
          "",
          "[Removed Lines]",
          "265: #if GCC_VESRION>=5004000",
          "",
          "[Added Lines]",
          "265: #if GCC_VERSION>=5004000",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2604:     for(i=1; i<WAL_NREADER; i++){",
          "2605:       rc = walLockExclusive(pWal, WAL_READ_LOCK(i), 1);",
          "2606:       if( rc==SQLITE_OK ){",
          "2608:         mxI = i;",
          "2609:         walUnlockExclusive(pWal, WAL_READ_LOCK(i), 1);",
          "2610:         break;",
          "",
          "[Removed Lines]",
          "2607:         mxReadMark = AtomicStore(pInfo->aReadMark+i,mxFrame);",
          "",
          "[Added Lines]",
          "2607:         AtomicStore(pInfo->aReadMark+i,mxFrame);",
          "2608:         mxReadMark = mxFrame;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ca7a26b5a16dfa0c1b4fdfcadb67397428a2e90a",
      "candidate_info": {
        "commit_hash": "ca7a26b5a16dfa0c1b4fdfcadb67397428a2e90a",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/ca7a26b5a16dfa0c1b4fdfcadb67397428a2e90a",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/where.c",
          "test/join.test"
        ],
        "message": "Do not allow a term in the WHERE clause of the query to qualify a partial index on the right table of a LEFT JOIN.  Ticket [7f39060a24b47353]\n\nFossilOrigin-Name: 4066a34da7bcdcece6c438c27f3a11bc49b8c8373b7e1603f30f6225e2bc800a",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/where.c||src/where.c",
          "test/join.test||test/join.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 2c4f714892327a1a9a303267b1f9685e310cca5dcea9c61287d95e26291b0506",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2794:   int i;",
          "2795:   WhereTerm *pTerm;",
          "2796:   Parse *pParse = pWC->pWInfo->pParse;",
          "2797:   while( pWhere->op==TK_AND ){",
          "2799:     pWhere = pWhere->pRight;",
          "2800:   }",
          "2801:   if( pParse->db->flags & SQLITE_EnableQPSG ) pParse = 0;",
          "",
          "[Removed Lines]",
          "2793: static int whereUsablePartialIndex(int iTab, WhereClause *pWC, Expr *pWhere){",
          "2798:     if( !whereUsablePartialIndex(iTab,pWC,pWhere->pLeft) ) return 0;",
          "",
          "[Added Lines]",
          "2793: static int whereUsablePartialIndex(",
          "2798: ){",
          "2803:     if( !whereUsablePartialIndex(iTab,isLeft,pWC,pWhere->pLeft) ) return 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2803:     Expr *pExpr;",
          "2804:     pExpr = pTerm->pExpr;",
          "2805:     if( (!ExprHasProperty(pExpr, EP_FromJoin) || pExpr->iRightJoinTable==iTab)",
          "2806:      && sqlite3ExprImpliesExpr(pParse, pExpr, pWhere, iTab)",
          "2807:     ){",
          "2808:       return 1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2811:      && (isLeft==0 || ExprHasProperty(pExpr, EP_FromJoin))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2965:   for(; rc==SQLITE_OK && pProbe;",
          "2966:       pProbe=(pSrc->pIBIndex ? 0 : pProbe->pNext), iSortIdx++",
          "2967:   ){",
          "2968:     if( pProbe->pPartIdxWhere!=0",
          "2972:     }",
          "",
          "[Removed Lines]",
          "2969:      && !whereUsablePartialIndex(pSrc->iCursor, pWC, pProbe->pPartIdxWhere) ){",
          "",
          "[Added Lines]",
          "2974:     int isLeft = (pSrc->fg.jointype & JT_OUTER)!=0;",
          "2976:      && !whereUsablePartialIndex(pSrc->iCursor, isLeft, pWC,",
          "2977:                                  pProbe->pPartIdxWhere)",
          "2978:     ){",
          "",
          "---------------"
        ],
        "test/join.test||test/join.test": [
          "File: test/join.test -> test/join.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "953:   SELECT * FROM t0 LEFT JOIN t1 WHERE NULL IN (c1);",
          "954: } {}",
          "956: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "956: # 2019-11-30 ticket 7f39060a24b47353",
          "957: # Do not allow a WHERE clause term to qualify a partial index on the",
          "958: # right table of a LEFT JOIN.",
          "959: #",
          "960: do_execsql_test join-21.10 {",
          "961:   DROP TABLE t0;",
          "962:   DROP TABLE t1;",
          "963:   CREATE TABLE t0(aa);",
          "964:   CREATE TABLE t1(bb);",
          "965:   INSERT INTO t0(aa) VALUES (1);",
          "966:   INSERT INTO t1(bb) VALUES (1);",
          "967:   SELECT 11, * FROM t1 LEFT JOIN t0 WHERE aa ISNULL;",
          "968:   SELECT 12, * FROM t1 LEFT JOIN t0 WHERE +aa ISNULL;",
          "969:   SELECT 13, * FROM t1 LEFT JOIN t0 ON aa ISNULL;",
          "970:   SELECT 14, * FROM t1 LEFT JOIN t0 ON +aa ISNULL;",
          "971:   CREATE INDEX i0 ON t0(aa) WHERE aa ISNULL;",
          "972:   SELECT 21, * FROM t1 LEFT JOIN t0 WHERE aa ISNULL;",
          "973:   SELECT 22, * FROM t1 LEFT JOIN t0 WHERE +aa ISNULL;",
          "974:   SELECT 23, * FROM t1 LEFT JOIN t0 ON aa ISNULL;",
          "975:   SELECT 24, * FROM t1 LEFT JOIN t0 ON +aa ISNULL;",
          "976: } {13 1 {} 14 1 {} 23 1 {} 24 1 {}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4c0086d7f0f4461dc4f69aa14025b8b1e1fcf6f7",
      "candidate_info": {
        "commit_hash": "4c0086d7f0f4461dc4f69aa14025b8b1e1fcf6f7",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/4c0086d7f0f4461dc4f69aa14025b8b1e1fcf6f7",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/select.c"
        ],
        "message": "Use #ifdef to omit code that is only reachable when the SQLITE_ENABLE_UPDATE_DELETE_LIMIT compile-time option is used.\n\nFossilOrigin-Name: 587ded6035a3ce91db81a29fe34ed30d0e59022cba6f107f25b04d034ef37ba9",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/select.c||src/select.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: d90a37e930c66afe95165955ae47efde08f52c8ce16c4fb239da0233335db050",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1127:     }",
          "1129:     case SRT_Upfrom: {",
          "1130:       if( pSort ){",
          "1131:         pushOntoSorter(",
          "1132:             pParse, pSort, p, regResult, regOrig, nResultCol, nPrefixReg);",
          "1134:         int i2 = pDest->iSDParm2;",
          "1135:         int r1 = sqlite3GetTempReg(pParse);",
          "1136:         sqlite3VdbeAddOp3(v, OP_MakeRecord,regResult+(i2<0),nResultCol-(i2<0),r1);",
          "",
          "[Removed Lines]",
          "1133:       }else{",
          "",
          "[Added Lines]",
          "1130: #ifdef SQLITE_ENABLE_UPDATE_DELETE_LIMIT",
          "1134:       }else",
          "1135: #endif",
          "1136:       {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1575:       break;",
          "1576:     }",
          "1577: #endif",
          "1578:     case SRT_Upfrom: {",
          "1579:       int i2 = pDest->iSDParm2;",
          "1580:       int r1 = sqlite3GetTempReg(pParse);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1581: #ifdef SQLITE_ENABLE_UPDATE_DELETE_LIMIT",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1586:       }",
          "1587:       break;",
          "1588:     }",
          "1589:     default: {",
          "1590:       assert( eDest==SRT_Output || eDest==SRT_Coroutine );",
          "1591:       testcase( eDest==SRT_Output );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1593: #endif",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "359941bd33705c1f5b1d7ed75528c764711a510a",
      "candidate_info": {
        "commit_hash": "359941bd33705c1f5b1d7ed75528c764711a510a",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/359941bd33705c1f5b1d7ed75528c764711a510a",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/util.c",
          "test/atof1.test"
        ],
        "message": "Apple the same fix for ticket [9eda2697f5cc1aba] to text-to-integer conversions that was done for floating point conversions by check-in [1c76f1d8ec0937a2].\n\nFossilOrigin-Name: aafb7a21041090e529491b0ce30c3902420be0551b1b2c55840a5fbb9105fb7d",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/util.c||src/util.c",
          "test/atof1.test||test/atof1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: f7f13cb1bc699c034a3f5f7a2431c8055cb79e2a14d5e70e1fc5dd6dec00fb26",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/util.c||src/util.c": [
          "File: src/util.c -> src/util.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "681:     incr = 1;",
          "682:   }else{",
          "683:     incr = 2;",
          "684:     assert( SQLITE_UTF16LE==2 && SQLITE_UTF16BE==3 );",
          "685:     for(i=3-enc; i<length && zNum[i]==0; i+=2){}",
          "686:     nonNum = i<length;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "684:     length &= ~1;",
          "",
          "---------------"
        ],
        "test/atof1.test||test/atof1.test": [
          "File: test/atof1.test -> test/atof1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "75:   CREATE INDEX i1 ON t1(a);",
          "76:   SELECT count(*) FROM t1 WHERE substr(a,',');",
          "77: } {1}",
          "84: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "78: # 2020-08-27 OSSFuzz find related to the above.",
          "79: do_execsql_test atof1-2.40 {",
          "80:   SELECT randomblob(0) - 1;",
          "81: } {-1}",
          "",
          "---------------"
        ]
      }
    }
  ]
}