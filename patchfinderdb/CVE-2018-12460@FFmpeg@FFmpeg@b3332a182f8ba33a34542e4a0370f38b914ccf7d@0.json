{
  "cve_id": "CVE-2018-12460",
  "cve_desc": "libavcodec in FFmpeg 4.0 may trigger a NULL pointer dereference if the studio profile is incorrectly detected while converting a crafted AVI file to MPEG4, leading to a denial of service, related to idctdsp.c and mpegvideo.c.",
  "repo": "FFmpeg/FFmpeg",
  "patch_hash": "b3332a182f8ba33a34542e4a0370f38b914ccf7d",
  "patch_info": {
    "commit_hash": "b3332a182f8ba33a34542e4a0370f38b914ccf7d",
    "repo": "FFmpeg/FFmpeg",
    "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/b3332a182f8ba33a34542e4a0370f38b914ccf7d",
    "files": [
      "libavcodec/idctdsp.c",
      "libavcodec/idctdsp.h",
      "libavcodec/mpegvideo.c"
    ],
    "message": "avcodec/idctdsp: Transmit studio_profile to init instead of using AVCodecContext profile\n\nThese 2 fields are not always the same, it is simpler to always use the same field\nfor detecting studio profile\n\nFixes: null pointer dereference\nFixes: ffmpeg_crash_3.avi\n\nFound-by: Thuan Pham <thuanpv@comp.nus.edu.sg>, Marcel B\u00f6hme, Andrew Santosa and Alexandru RazvanCaciulescu with AFLSmart\nSigned-off-by: Michael Niedermayer <michael@niedermayer.cc>",
    "before_after_code_files": [
      "libavcodec/idctdsp.c||libavcodec/idctdsp.c",
      "libavcodec/idctdsp.h||libavcodec/idctdsp.h",
      "libavcodec/mpegvideo.c||libavcodec/mpegvideo.c"
    ]
  },
  "patch_diff": {
    "libavcodec/idctdsp.c||libavcodec/idctdsp.c": [
      "File: libavcodec/idctdsp.c -> libavcodec/idctdsp.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "258:         if (avctx->bits_per_raw_sample == 10 || avctx->bits_per_raw_sample == 9) {",
      "262:                 c->idct_put              = ff_simple_idct_put_int32_10bit;",
      "263:             else {",
      "264:                 c->idct_put              = ff_simple_idct_put_int16_10bit;",
      "",
      "[Removed Lines]",
      "261:             if (avctx->codec_id == AV_CODEC_ID_MPEG4 && avctx->profile == FF_PROFILE_MPEG4_SIMPLE_STUDIO)",
      "",
      "[Added Lines]",
      "261:             if (c->mpeg4_studio_profile)",
      "",
      "---------------"
    ],
    "libavcodec/idctdsp.h||libavcodec/idctdsp.h": [
      "File: libavcodec/idctdsp.h -> libavcodec/idctdsp.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "96:     uint8_t idct_permutation[64];",
      "97:     enum idct_permutation_type perm_type;",
      "98: } IDCTDSPContext;",
      "100: void ff_put_pixels_clamped_c(const int16_t *block, uint8_t *av_restrict pixels,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "99:     int mpeg4_studio_profile;",
      "",
      "---------------"
    ],
    "libavcodec/mpegvideo.c||libavcodec/mpegvideo.c": [
      "File: libavcodec/mpegvideo.c -> libavcodec/mpegvideo.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "330: av_cold void ff_mpv_idct_init(MpegEncContext *s)",
      "331: {",
      "332:     ff_idctdsp_init(&s->idsp, s->avctx);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "332:     if (s->codec_id == AV_CODEC_ID_MPEG4)",
      "333:         s->idsp.mpeg4_studio_profile = s->studio_profile;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "e26be20a272734ae0b3f83e10731104dafa7ee4d",
      "candidate_info": {
        "commit_hash": "e26be20a272734ae0b3f83e10731104dafa7ee4d",
        "repo": "FFmpeg/FFmpeg",
        "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/e26be20a272734ae0b3f83e10731104dafa7ee4d",
        "files": [
          "libavcodec/idctdsp.c",
          "libavcodec/idctdsp.h",
          "libavcodec/mpegvideo.c"
        ],
        "message": "avcodec/idctdsp: Transmit studio_profile to init instead of using AVCodecContext profile\n\nThese 2 fields are not always the same, it is simpler to always use the same field\nfor detecting studio profile\n\nFixes: null pointer dereference\nFixes: ffmpeg_crash_3.avi\n\nFound-by: Thuan Pham <thuanpv@comp.nus.edu.sg>, Marcel B\u00f6hme, Andrew Santosa and Alexandru RazvanCaciulescu with AFLSmart\nSigned-off-by: Michael Niedermayer <michael@niedermayer.cc>\n(cherry picked from commit b3332a182f8ba33a34542e4a0370f38b914ccf7d)\nSigned-off-by: Michael Niedermayer <michael@niedermayer.cc>",
        "before_after_code_files": [
          "libavcodec/idctdsp.c||libavcodec/idctdsp.c",
          "libavcodec/idctdsp.h||libavcodec/idctdsp.h",
          "libavcodec/mpegvideo.c||libavcodec/mpegvideo.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "libavcodec/idctdsp.c||libavcodec/idctdsp.c",
            "libavcodec/idctdsp.h||libavcodec/idctdsp.h",
            "libavcodec/mpegvideo.c||libavcodec/mpegvideo.c"
          ],
          "candidate": [
            "libavcodec/idctdsp.c||libavcodec/idctdsp.c",
            "libavcodec/idctdsp.h||libavcodec/idctdsp.h",
            "libavcodec/mpegvideo.c||libavcodec/mpegvideo.c"
          ]
        }
      },
      "candidate_diff": {
        "libavcodec/idctdsp.c||libavcodec/idctdsp.c": [
          "File: libavcodec/idctdsp.c -> libavcodec/idctdsp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "258:         if (avctx->bits_per_raw_sample == 10 || avctx->bits_per_raw_sample == 9) {",
          "262:                 c->idct_put              = ff_simple_idct_put_int32_10bit;",
          "263:             else {",
          "264:                 c->idct_put              = ff_simple_idct_put_int16_10bit;",
          "",
          "[Removed Lines]",
          "261:             if (avctx->codec_id == AV_CODEC_ID_MPEG4 && avctx->profile == FF_PROFILE_MPEG4_SIMPLE_STUDIO)",
          "",
          "[Added Lines]",
          "261:             if (c->mpeg4_studio_profile)",
          "",
          "---------------"
        ],
        "libavcodec/idctdsp.h||libavcodec/idctdsp.h": [
          "File: libavcodec/idctdsp.h -> libavcodec/idctdsp.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "96:     uint8_t idct_permutation[64];",
          "97:     enum idct_permutation_type perm_type;",
          "98: } IDCTDSPContext;",
          "100: void ff_put_pixels_clamped_c(const int16_t *block, uint8_t *av_restrict pixels,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "99:     int mpeg4_studio_profile;",
          "",
          "---------------"
        ],
        "libavcodec/mpegvideo.c||libavcodec/mpegvideo.c": [
          "File: libavcodec/mpegvideo.c -> libavcodec/mpegvideo.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "330: av_cold void ff_mpv_idct_init(MpegEncContext *s)",
          "331: {",
          "332:     ff_idctdsp_init(&s->idsp, s->avctx);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "332:     if (s->codec_id == AV_CODEC_ID_MPEG4)",
          "333:         s->idsp.mpeg4_studio_profile = s->studio_profile;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "699fa8f382704acdbdf720042dd7b21df2eb7558",
      "candidate_info": {
        "commit_hash": "699fa8f382704acdbdf720042dd7b21df2eb7558",
        "repo": "FFmpeg/FFmpeg",
        "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/699fa8f382704acdbdf720042dd7b21df2eb7558",
        "files": [
          "libavcodec/bit_depth_template.c",
          "libavcodec/idctdsp.c",
          "libavcodec/me_cmp.c",
          "libavcodec/simple_idct.c",
          "libavcodec/simple_idct.h",
          "libavcodec/simple_idct_template.c",
          "libavcodec/tests/dct.c",
          "libavcodec/vc1.c"
        ],
        "message": "simple_idct: Template functions to support an input bitdepth parameter",
        "before_after_code_files": [
          "libavcodec/bit_depth_template.c||libavcodec/bit_depth_template.c",
          "libavcodec/idctdsp.c||libavcodec/idctdsp.c",
          "libavcodec/me_cmp.c||libavcodec/me_cmp.c",
          "libavcodec/simple_idct.c||libavcodec/simple_idct.c",
          "libavcodec/simple_idct.h||libavcodec/simple_idct.h",
          "libavcodec/simple_idct_template.c||libavcodec/simple_idct_template.c",
          "libavcodec/tests/dct.c||libavcodec/tests/dct.c",
          "libavcodec/vc1.c||libavcodec/vc1.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libavcodec/idctdsp.c||libavcodec/idctdsp.c"
          ],
          "candidate": [
            "libavcodec/idctdsp.c||libavcodec/idctdsp.c"
          ]
        }
      },
      "candidate_diff": {
        "libavcodec/bit_depth_template.c||libavcodec/bit_depth_template.c": [
          "File: libavcodec/bit_depth_template.c -> libavcodec/bit_depth_template.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: #   undef pixel2",
          "30: #   undef pixel4",
          "31: #   undef dctcoef",
          "32: #   undef INIT_CLIP",
          "33: #   undef no_rnd_avg_pixel4",
          "34: #   undef rnd_avg_pixel4",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "32: #   undef idctin",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "53: #   define pixel4 uint64_t",
          "54: #   define dctcoef int32_t",
          "56: #   define INIT_CLIP",
          "57: #   define no_rnd_avg_pixel4 no_rnd_avg64",
          "58: #   define    rnd_avg_pixel4    rnd_avg64",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "57: #ifdef IN_IDCT_DEPTH",
          "58: #if IN_IDCT_DEPTH == 32",
          "59: #   define idctin int32_t",
          "60: #else",
          "61: #   define idctin int16_t",
          "62: #endif",
          "63: #else",
          "64: #   define idctin int16_t",
          "65: #endif",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "71: #   define pixel2 uint16_t",
          "72: #   define pixel4 uint32_t",
          "73: #   define dctcoef int16_t",
          "75: #   define INIT_CLIP",
          "76: #   define no_rnd_avg_pixel4 no_rnd_avg32",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "85: #   define idctin  int16_t",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "87: #   define CLIP(a) av_clip_uint8(a)",
          "88: #endif",
          "91: #define FUNC2(a, b, c)  FUNC3(a, b, c)",
          "92: #define FUNC(a)  FUNC2(a, BIT_DEPTH,)",
          "93: #define FUNCC(a) FUNC2(a, BIT_DEPTH, _c)",
          "",
          "[Removed Lines]",
          "90: #define FUNC3(a, b, c)  a ## _ ## b ## c",
          "",
          "[Added Lines]",
          "102: #define FUNC3(a, b, c)  a ## _ ## b ##  c",
          "106: #define FUNC4(a, b, c)  a ## _int ## b ## _ ## c ## bit",
          "107: #define FUNC5(a, b, c)  FUNC4(a, b, c)",
          "108: #define FUNC6(a)  FUNC5(a, IN_IDCT_DEPTH, BIT_DEPTH)",
          "",
          "---------------"
        ],
        "libavcodec/idctdsp.c||libavcodec/idctdsp.c": [
          "File: libavcodec/idctdsp.c -> libavcodec/idctdsp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "256:         c->perm_type = FF_IDCT_PERM_NONE;",
          "257:     } else {",
          "258:         if (avctx->bits_per_raw_sample == 10 || avctx->bits_per_raw_sample == 9) {",
          "262:             c->perm_type             = FF_IDCT_PERM_NONE;",
          "263:         } else if (avctx->bits_per_raw_sample == 12) {",
          "267:             c->perm_type             = FF_IDCT_PERM_NONE;",
          "268:         } else {",
          "269:             if (avctx->idct_algo == FF_IDCT_INT) {",
          "",
          "[Removed Lines]",
          "259:             c->idct_put              = ff_simple_idct_put_10;",
          "260:             c->idct_add              = ff_simple_idct_add_10;",
          "261:             c->idct                  = ff_simple_idct_10;",
          "264:             c->idct_put              = ff_simple_idct_put_12;",
          "265:             c->idct_add              = ff_simple_idct_add_12;",
          "266:             c->idct                  = ff_simple_idct_12;",
          "",
          "[Added Lines]",
          "259:             c->idct_put              = ff_simple_idct_put_int16_10bit;",
          "260:             c->idct_add              = ff_simple_idct_add_int16_10bit;",
          "261:             c->idct                  = ff_simple_idct_int16_10bit;",
          "264:             c->idct_put              = ff_simple_idct_put_int16_12bit;",
          "265:             c->idct_add              = ff_simple_idct_add_int16_12bit;",
          "266:             c->idct                  = ff_simple_idct_int16_12bit;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "281:             } else { // accurate/default",
          "286:                 c->perm_type = FF_IDCT_PERM_NONE;",
          "287:             }",
          "288:         }",
          "",
          "[Removed Lines]",
          "283:                 c->idct_put  = ff_simple_idct_put_8;",
          "284:                 c->idct_add  = ff_simple_idct_add_8;",
          "285:                 c->idct      = ff_simple_idct_8;",
          "",
          "[Added Lines]",
          "283:                 c->idct_put  = ff_simple_idct_put_int16_8bit;",
          "284:                 c->idct_add  = ff_simple_idct_add_int16_8bit;",
          "285:                 c->idct      = ff_simple_idct_int16_8bit;",
          "",
          "---------------"
        ],
        "libavcodec/me_cmp.c||libavcodec/me_cmp.c": [
          "File: libavcodec/me_cmp.c -> libavcodec/me_cmp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "755:     s->block_last_index[0 /* FIXME */] =",
          "756:         s->fast_dct_quantize(s, temp, 0 /* FIXME */, s->qscale, &i);",
          "757:     s->dct_unquantize_inter(s, temp, 0, s->qscale);",
          "760:     for (i = 0; i < 64; i++)",
          "761:         sum += (temp[i] - bak[i]) * (temp[i] - bak[i]);",
          "",
          "[Removed Lines]",
          "758:     ff_simple_idct_8(temp); // FIXME",
          "",
          "[Added Lines]",
          "758:     ff_simple_idct_int16_8bit(temp); // FIXME",
          "",
          "---------------"
        ],
        "libavcodec/simple_idct.c||libavcodec/simple_idct.c": [
          "File: libavcodec/simple_idct.c -> libavcodec/simple_idct.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: #include \"mathops.h\"",
          "31: #include \"simple_idct.h\"",
          "33: #define BIT_DEPTH 8",
          "34: #include \"simple_idct_template.c\"",
          "35: #undef BIT_DEPTH",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "33: #define IN_IDCT_DEPTH 16",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "46: #define BIT_DEPTH 12",
          "47: #include \"simple_idct_template.c\"",
          "48: #undef BIT_DEPTH",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "51: #undef IN_IDCT_DEPTH",
          "53: #define IN_IDCT_DEPTH 32",
          "54: #define BIT_DEPTH 10",
          "55: #include \"simple_idct_template.c\"",
          "56: #undef BIT_DEPTH",
          "57: #undef IN_IDCT_DEPTH",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "117:     for(i=0; i<8; i++) {",
          "119:     }",
          "",
          "[Removed Lines]",
          "118:         idctRowCondDC_8(block + i*8, 0);",
          "",
          "[Added Lines]",
          "127:         idctRowCondDC_int16_8bit(block + i*8, 0);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "190:     for(i=0; i<4; i++) {",
          "192:     }",
          "",
          "[Removed Lines]",
          "191:         idctRowCondDC_8(block + i*8, 0);",
          "",
          "[Added Lines]",
          "200:         idctRowCondDC_int16_8bit(block + i*8, 0);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "210:     for(i=0; i<4; i++){",
          "212:     }",
          "213: }",
          "",
          "[Removed Lines]",
          "211:         idctSparseColAdd_8(dest + i, line_size, block + i);",
          "",
          "[Added Lines]",
          "220:         idctSparseColAdd_int16_8bit(dest + i, line_size, block + i);",
          "",
          "---------------"
        ],
        "libavcodec/simple_idct.h||libavcodec/simple_idct.h": [
          "File: libavcodec/simple_idct.h -> libavcodec/simple_idct.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: #include <stddef.h>",
          "32: #include <stdint.h>",
          "",
          "[Removed Lines]",
          "34: void ff_simple_idct_put_8(uint8_t *dest, ptrdiff_t line_size, int16_t *block);",
          "35: void ff_simple_idct_add_8(uint8_t *dest, ptrdiff_t line_size, int16_t *block);",
          "36: void ff_simple_idct_8(int16_t *block);",
          "38: void ff_simple_idct_put_10(uint8_t *dest, ptrdiff_t line_size, int16_t *block);",
          "39: void ff_simple_idct_add_10(uint8_t *dest, ptrdiff_t line_size, int16_t *block);",
          "40: void ff_simple_idct_10(int16_t *block);",
          "42: void ff_simple_idct_put_12(uint8_t *dest, ptrdiff_t line_size, int16_t *block);",
          "43: void ff_simple_idct_add_12(uint8_t *dest, ptrdiff_t line_size, int16_t *block);",
          "44: void ff_simple_idct_12(int16_t *block);",
          "",
          "[Added Lines]",
          "34: void ff_simple_idct_put_int16_8bit(uint8_t *dest, ptrdiff_t line_size, int16_t *block);",
          "35: void ff_simple_idct_add_int16_8bit(uint8_t *dest, ptrdiff_t line_size, int16_t *block);",
          "36: void ff_simple_idct_int16_8bit(int16_t *block);",
          "38: void ff_simple_idct_put_int16_10bit(uint8_t *dest, ptrdiff_t line_size, int16_t *block);",
          "39: void ff_simple_idct_add_int16_10bit(uint8_t *dest, ptrdiff_t line_size, int16_t *block);",
          "40: void ff_simple_idct_int16_10bit(int16_t *block);",
          "42: void ff_simple_idct_put_int32_10bit(uint8_t *dest, ptrdiff_t line_size, int16_t *block);",
          "43: void ff_simple_idct_add_int32_10bit(uint8_t *dest, ptrdiff_t line_size, int16_t *block);",
          "44: void ff_simple_idct_int32_10bit(int16_t *block);",
          "46: void ff_simple_idct_put_int16_12bit(uint8_t *dest, ptrdiff_t line_size, int16_t *block);",
          "47: void ff_simple_idct_add_int16_12bit(uint8_t *dest, ptrdiff_t line_size, int16_t *block);",
          "48: void ff_simple_idct_int16_12bit(int16_t *block);",
          "",
          "---------------"
        ],
        "libavcodec/simple_idct_template.c||libavcodec/simple_idct_template.c": [
          "File: libavcodec/simple_idct_template.c -> libavcodec/simple_idct_template.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "77: #define ROW_SHIFT 13",
          "78: #define COL_SHIFT 18",
          "79: #define DC_SHIFT  1",
          "80: #   else",
          "81: #define ROW_SHIFT 12",
          "82: #define COL_SHIFT 19",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "80: #   elif IN_IDCT_DEPTH == 32",
          "81: #define ROW_SHIFT 13",
          "82: #define COL_SHIFT 21",
          "83: #define DC_SHIFT  2",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "109: #ifdef EXTRA_SHIFT",
          "110: static inline void FUNC(idctRowCondDC_extrashift)(int16_t *row, int extra_shift)",
          "111: #else",
          "113: #endif",
          "114: {",
          "115:     SUINT a0, a1, a2, a3, b0, b1, b2, b3;",
          "117: #if HAVE_FAST_64BIT",
          "118: #define ROW0_MASK (0xffffLL << 48 * HAVE_BIGENDIAN)",
          "119:     if (((AV_RN64A(row) & ~ROW0_MASK) | AV_RN64A(row+4)) == 0) {",
          "",
          "[Removed Lines]",
          "112: static inline void FUNC(idctRowCondDC)(int16_t *row, int extra_shift)",
          "",
          "[Added Lines]",
          "116: static inline void FUNC6(idctRowCondDC)(idctin *row, int extra_shift)",
          "122: #if IN_IDCT_DEPTH == 16",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "147:         AV_WN32A(row+6, temp);",
          "148:         return;",
          "149:     }",
          "150: #endif",
          "152:     a0 = (W4 * row[0]) + (1 << (ROW_SHIFT + extra_shift - 1));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "156: #endif",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "168:     b3 = MUL(W7, row[1]);",
          "169:     MAC(b3, -W5, row[3]);",
          "171:     if (AV_RN64A(row + 4)) {",
          "172:         a0 +=   W4*row[4] + W6*row[6];",
          "173:         a1 += - W4*row[4] - W2*row[6];",
          "174:         a2 += - W4*row[4] + W2*row[6];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "178: #if IN_IDCT_DEPTH == 32",
          "179:     if (AV_RN64A(row + 4) | AV_RN64A(row + 6)) {",
          "180: #else",
          "182: #endif",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "250: #ifdef EXTRA_SHIFT",
          "251: static inline void FUNC(idctSparseCol_extrashift)(int16_t *col)",
          "252: #else",
          "255: {",
          "256:     SUINT a0, a1, a2, a3, b0, b1, b2, b3;",
          "",
          "[Removed Lines]",
          "253: static inline void FUNC(idctSparseColPut)(pixel *dest, ptrdiff_t line_size,",
          "254:                                           int16_t *col)",
          "",
          "[Added Lines]",
          "264: static inline void FUNC6(idctSparseColPut)(pixel *dest, ptrdiff_t line_size,",
          "265:                                           idctin *col)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "274:     dest[0] = av_clip_pixel((int)(a0 - b0) >> COL_SHIFT);",
          "275: }",
          "279: {",
          "280:     int a0, a1, a2, a3, b0, b1, b2, b3;",
          "",
          "[Removed Lines]",
          "277: static inline void FUNC(idctSparseColAdd)(pixel *dest, ptrdiff_t line_size,",
          "278:                                           int16_t *col)",
          "",
          "[Added Lines]",
          "288: static inline void FUNC6(idctSparseColAdd)(pixel *dest, ptrdiff_t line_size,",
          "289:                                           idctin *col)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "298:     dest[0] = av_clip_pixel(dest[0] + ((a0 - b0) >> COL_SHIFT));",
          "299: }",
          "302: #endif",
          "303: {",
          "304:     int a0, a1, a2, a3, b0, b1, b2, b3;",
          "",
          "[Removed Lines]",
          "301: static inline void FUNC(idctSparseCol)(int16_t *col)",
          "",
          "[Added Lines]",
          "312: static inline void FUNC6(idctSparseCol)(idctin *col)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "316: }",
          "318: #ifndef EXTRA_SHIFT",
          "320: {",
          "321:     pixel *dest = (pixel *)dest_;",
          "322:     int i;",
          "324:     line_size /= sizeof(pixel);",
          "326:     for (i = 0; i < 8; i++)",
          "329:     for (i = 0; i < 8; i++)",
          "331: }",
          "334: {",
          "335:     pixel *dest = (pixel *)dest_;",
          "336:     int i;",
          "",
          "[Removed Lines]",
          "319: void FUNC(ff_simple_idct_put)(uint8_t *dest_, ptrdiff_t line_size, int16_t *block)",
          "327:         FUNC(idctRowCondDC)(block + i*8, 0);",
          "330:         FUNC(idctSparseColPut)(dest + i, line_size, block + i);",
          "333: void FUNC(ff_simple_idct_add)(uint8_t *dest_, ptrdiff_t line_size, int16_t *block)",
          "",
          "[Added Lines]",
          "330: void FUNC6(ff_simple_idct_put)(uint8_t *dest_, ptrdiff_t line_size, int16_t *block_)",
          "332:     idctin *block = (idctin *)block_;",
          "339:         FUNC6(idctRowCondDC)(block + i*8, 0);",
          "342:         FUNC6(idctSparseColPut)(dest + i, line_size, block + i);",
          "345: #if IN_IDCT_DEPTH == 16",
          "346: void FUNC6(ff_simple_idct_add)(uint8_t *dest_, ptrdiff_t line_size, int16_t *block)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "338:     line_size /= sizeof(pixel);",
          "340:     for (i = 0; i < 8; i++)",
          "343:     for (i = 0; i < 8; i++)",
          "345: }",
          "348: {",
          "349:     int i;",
          "351:     for (i = 0; i < 8; i++)",
          "354:     for (i = 0; i < 8; i++)",
          "356: }",
          "357: #endif",
          "",
          "[Removed Lines]",
          "341:         FUNC(idctRowCondDC)(block + i*8, 0);",
          "344:         FUNC(idctSparseColAdd)(dest + i, line_size, block + i);",
          "347: void FUNC(ff_simple_idct)(int16_t *block)",
          "352:         FUNC(idctRowCondDC)(block + i*8, 0);",
          "355:         FUNC(idctSparseCol)(block + i);",
          "",
          "[Added Lines]",
          "354:         FUNC6(idctRowCondDC)(block + i*8, 0);",
          "357:         FUNC6(idctSparseColAdd)(dest + i, line_size, block + i);",
          "360: void FUNC6(ff_simple_idct)(int16_t *block)",
          "365:         FUNC6(idctRowCondDC)(block + i*8, 0);",
          "368:         FUNC6(idctSparseCol)(block + i);",
          "371: #endif",
          "",
          "---------------"
        ],
        "libavcodec/tests/dct.c||libavcodec/tests/dct.c": [
          "File: libavcodec/tests/dct.c -> libavcodec/tests/dct.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "82: static const struct algo idct_tab[] = {",
          "83:     { \"REF-DBL\",     ff_ref_idct,          FF_IDCT_PERM_NONE },",
          "84:     { \"INT\",         ff_j_rev_dct,         FF_IDCT_PERM_LIBMPEG2 },",
          "88:     { \"PR-C\",        ff_prores_idct_wrap,  FF_IDCT_PERM_NONE, 0, 1 },",
          "89: #if CONFIG_FAANIDCT",
          "90:     { \"FAANI\",       ff_faanidct,          FF_IDCT_PERM_NONE },",
          "",
          "[Removed Lines]",
          "85:     { \"SIMPLE-C\",    ff_simple_idct_8,     FF_IDCT_PERM_NONE },",
          "86:     { \"SIMPLE-C10\",  ff_simple_idct_10,    FF_IDCT_PERM_NONE },",
          "87:     { \"SIMPLE-C12\",  ff_simple_idct_12,    FF_IDCT_PERM_NONE, 0, 1 },",
          "",
          "[Added Lines]",
          "85:     { \"SIMPLE-C\",    ff_simple_idct_int16_8bit,     FF_IDCT_PERM_NONE },",
          "86:     { \"SIMPLE-C10\",  ff_simple_idct_int16_10bit,    FF_IDCT_PERM_NONE },",
          "87:     { \"SIMPLE-C12\",  ff_simple_idct_int16_12bit,    FF_IDCT_PERM_NONE, 0, 1 },",
          "",
          "---------------"
        ],
        "libavcodec/vc1.c||libavcodec/vc1.c": [
          "File: libavcodec/vc1.c -> libavcodec/vc1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "314:     v->multires        = get_bits1(gb);",
          "315:     v->res_fasttx      = get_bits1(gb);",
          "316:     if (!v->res_fasttx) {",
          "318:         v->vc1dsp.vc1_inv_trans_8x4    = ff_simple_idct84_add;",
          "319:         v->vc1dsp.vc1_inv_trans_4x8    = ff_simple_idct48_add;",
          "320:         v->vc1dsp.vc1_inv_trans_4x4    = ff_simple_idct44_add;",
          "322:         v->vc1dsp.vc1_inv_trans_8x4_dc = ff_simple_idct84_add;",
          "323:         v->vc1dsp.vc1_inv_trans_4x8_dc = ff_simple_idct48_add;",
          "324:         v->vc1dsp.vc1_inv_trans_4x4_dc = ff_simple_idct44_add;",
          "",
          "[Removed Lines]",
          "317:         v->vc1dsp.vc1_inv_trans_8x8    = ff_simple_idct_8;",
          "321:         v->vc1dsp.vc1_inv_trans_8x8_dc = ff_simple_idct_add_8;",
          "",
          "[Added Lines]",
          "317:         v->vc1dsp.vc1_inv_trans_8x8    = ff_simple_idct_int16_8bit;",
          "321:         v->vc1dsp.vc1_inv_trans_8x8_dc = ff_simple_idct_add_int16_8bit;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8c50d0cccfe4c9f25a8494f76da55dcdc2275058",
      "candidate_info": {
        "commit_hash": "8c50d0cccfe4c9f25a8494f76da55dcdc2275058",
        "repo": "FFmpeg/FFmpeg",
        "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/8c50d0cccfe4c9f25a8494f76da55dcdc2275058",
        "files": [
          "libavcodec/idctdsp.c"
        ],
        "message": "avcodec/idctdsp: Clear idct/idct_add for studio profile\n\nThis does not leave them \"as before\" which may be a value from a previous profile\n\nSigned-off-by: Michael Niedermayer <michael@niedermayer.cc>",
        "before_after_code_files": [
          "libavcodec/idctdsp.c||libavcodec/idctdsp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libavcodec/idctdsp.c||libavcodec/idctdsp.c"
          ],
          "candidate": [
            "libavcodec/idctdsp.c||libavcodec/idctdsp.c"
          ]
        }
      },
      "candidate_diff": {
        "libavcodec/idctdsp.c||libavcodec/idctdsp.c": [
          "File: libavcodec/idctdsp.c -> libavcodec/idctdsp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "258:         if (avctx->bits_per_raw_sample == 10 || avctx->bits_per_raw_sample == 9) {",
          "262:                 c->idct_put              = ff_simple_idct_put_int32_10bit;",
          "264:                 c->idct_put              = ff_simple_idct_put_int16_10bit;",
          "265:                 c->idct_add              = ff_simple_idct_add_int16_10bit;",
          "266:                 c->idct                  = ff_simple_idct_int16_10bit;",
          "",
          "[Removed Lines]",
          "261:             if (c->mpeg4_studio_profile)",
          "263:             else {",
          "",
          "[Added Lines]",
          "261:             if (c->mpeg4_studio_profile) {",
          "263:                 c->idct_add              = NULL;",
          "264:                 c->idct                  = NULL;",
          "265:             } else {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f9d3841ae6147eaa51c57c574cd81e9ce9566e3a",
      "candidate_info": {
        "commit_hash": "f9d3841ae6147eaa51c57c574cd81e9ce9566e3a",
        "repo": "FFmpeg/FFmpeg",
        "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/f9d3841ae6147eaa51c57c574cd81e9ce9566e3a",
        "files": [
          "libavcodec/error_resilience.c",
          "libavcodec/h263dec.c",
          "libavcodec/idctdsp.c",
          "libavcodec/ituh263dec.c",
          "libavcodec/mpeg12dec.c",
          "libavcodec/mpeg4data.h",
          "libavcodec/mpeg4video.h",
          "libavcodec/mpeg4videodec.c",
          "libavcodec/mpegvideo.c",
          "libavcodec/mpegvideo.h",
          "libavcodec/x86/idctdsp_init.c"
        ],
        "message": "mpeg4video: Add support for MPEG-4 Simple Studio Profile.\n\nThis is a profile supporting > 8-bit video and has a higher quality DCT",
        "before_after_code_files": [
          "libavcodec/error_resilience.c||libavcodec/error_resilience.c",
          "libavcodec/h263dec.c||libavcodec/h263dec.c",
          "libavcodec/idctdsp.c||libavcodec/idctdsp.c",
          "libavcodec/ituh263dec.c||libavcodec/ituh263dec.c",
          "libavcodec/mpeg12dec.c||libavcodec/mpeg12dec.c",
          "libavcodec/mpeg4data.h||libavcodec/mpeg4data.h",
          "libavcodec/mpeg4video.h||libavcodec/mpeg4video.h",
          "libavcodec/mpeg4videodec.c||libavcodec/mpeg4videodec.c",
          "libavcodec/mpegvideo.c||libavcodec/mpegvideo.c",
          "libavcodec/mpegvideo.h||libavcodec/mpegvideo.h",
          "libavcodec/x86/idctdsp_init.c||libavcodec/x86/idctdsp_init.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libavcodec/idctdsp.c||libavcodec/idctdsp.c",
            "libavcodec/mpegvideo.c||libavcodec/mpegvideo.c"
          ],
          "candidate": [
            "libavcodec/idctdsp.c||libavcodec/idctdsp.c",
            "libavcodec/mpegvideo.c||libavcodec/mpegvideo.c"
          ]
        }
      },
      "candidate_diff": {
        "libavcodec/error_resilience.c||libavcodec/error_resilience.c": [
          "File: libavcodec/error_resilience.c -> libavcodec/error_resilience.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "814: {",
          "815:     if(s->avctx->hwaccel && s->avctx->hwaccel->decode_slice           ||",
          "816:        !s->cur_pic.f                                                  ||",
          "818:     )",
          "819:         return 0;",
          "820:     return 1;",
          "",
          "[Removed Lines]",
          "817:        s->cur_pic.field_picture",
          "",
          "[Added Lines]",
          "817:        s->cur_pic.field_picture                                       ||",
          "818:        s->avctx->profile == FF_PROFILE_MPEG4_SIMPLE_STUDIO",
          "",
          "---------------"
        ],
        "libavcodec/h263dec.c||libavcodec/h263dec.c": [
          "File: libavcodec/h263dec.c -> libavcodec/h263dec.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "48: static enum AVPixelFormat h263_get_format(AVCodecContext *avctx)",
          "49: {",
          "50:     if (avctx->codec->id == AV_CODEC_ID_MSS2)",
          "51:         return AV_PIX_FMT_YUV420P;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "51:     if (avctx->bits_per_raw_sample > 8) {",
          "52:         av_assert1(avctx->profile == FF_PROFILE_MPEG4_SIMPLE_STUDIO);",
          "53:         return avctx->pix_fmt;",
          "54:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "198:     ff_set_qscale(s, s->qscale);",
          "200:     if (s->avctx->hwaccel) {",
          "201:         const uint8_t *start = s->gb.buffer + get_bits_count(&s->gb) / 8;",
          "202:         ret = s->avctx->hwaccel->decode_slice(s->avctx, start, s->gb.buffer_end - start);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "206:     if (s->studio_profile) {",
          "207:         if ((ret = ff_mpeg4_decode_studio_slice_header(s->avctx->priv_data)) < 0)",
          "208:             return ret;",
          "209:     }",
          "",
          "---------------"
        ],
        "libavcodec/idctdsp.c||libavcodec/idctdsp.c": [
          "File: libavcodec/idctdsp.c -> libavcodec/idctdsp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "256:         c->perm_type = FF_IDCT_PERM_NONE;",
          "257:     } else {",
          "258:         if (avctx->bits_per_raw_sample == 10 || avctx->bits_per_raw_sample == 9) {",
          "262:             c->perm_type             = FF_IDCT_PERM_NONE;",
          "263:         } else if (avctx->bits_per_raw_sample == 12) {",
          "264:             c->idct_put              = ff_simple_idct_put_int16_12bit;",
          "",
          "[Removed Lines]",
          "259:             c->idct_put              = ff_simple_idct_put_int16_10bit;",
          "260:             c->idct_add              = ff_simple_idct_add_int16_10bit;",
          "261:             c->idct                  = ff_simple_idct_int16_10bit;",
          "",
          "[Added Lines]",
          "261:             if (avctx->codec_id == AV_CODEC_ID_MPEG4 && avctx->profile == FF_PROFILE_MPEG4_SIMPLE_STUDIO)",
          "262:                 c->idct_put              = ff_simple_idct_put_int32_10bit;",
          "263:             else {",
          "264:                 c->idct_put              = ff_simple_idct_put_int16_10bit;",
          "265:                 c->idct_add              = ff_simple_idct_add_int16_10bit;",
          "266:                 c->idct                  = ff_simple_idct_int16_10bit;",
          "267:             }",
          "",
          "---------------"
        ],
        "libavcodec/ituh263dec.c||libavcodec/ituh263dec.c": [
          "File: libavcodec/ituh263dec.c -> libavcodec/ituh263dec.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "207: }",
          "213: int ff_h263_resync(MpegEncContext *s){",
          "214:     int left, pos, ret;",
          "216:     if(s->codec_id==AV_CODEC_ID_MPEG4){",
          "217:         skip_bits1(&s->gb);",
          "218:         align_get_bits(&s->gb);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "218:     if(s->codec_id==AV_CODEC_ID_MPEG4 && s->studio_profile) {",
          "219:         align_get_bits(&s->gb);",
          "221:         while (get_bits_left(&s->gb) >= 32 && show_bits_long(&s->gb, 32) != SLICE_START_CODE) {",
          "222:             get_bits(&s->gb, 8);",
          "223:         }",
          "225:         if (show_bits_long(&s->gb, 32) == SLICE_START_CODE)",
          "226:             return get_bits_count(&s->gb);",
          "227:         else",
          "228:             return -1;",
          "229:     }",
          "",
          "---------------"
        ],
        "libavcodec/mpeg12dec.c||libavcodec/mpeg12dec.c": [
          "File: libavcodec/mpeg12dec.c -> libavcodec/mpeg12dec.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "649:         return 0;",
          "650: }",
          "663: #define MT_FIELD 1",
          "664: #define MT_FRAME 2",
          "",
          "[Removed Lines]",
          "652: static inline int get_qscale(MpegEncContext *s)",
          "653: {",
          "654:     int qscale = get_bits(&s->gb, 5);",
          "655:     if (s->q_scale_type)",
          "656:         return ff_mpeg2_non_linear_qscale[qscale];",
          "657:     else",
          "658:         return qscale << 1;",
          "659: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "751:             s->interlaced_dct = get_bits1(&s->gb);",
          "753:         if (IS_QUANT(mb_type))",
          "756:         if (s->concealment_motion_vectors) {",
          "",
          "[Removed Lines]",
          "754:             s->qscale = get_qscale(s);",
          "",
          "[Added Lines]",
          "744:             s->qscale = mpeg_get_qscale(s);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "819:             }",
          "821:             if (IS_QUANT(mb_type))",
          "824:             s->last_mv[0][0][0] = 0;",
          "825:             s->last_mv[0][0][1] = 0;",
          "",
          "[Removed Lines]",
          "822:                 s->qscale = get_qscale(s);",
          "",
          "[Added Lines]",
          "812:                 s->qscale = mpeg_get_qscale(s);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "840:             }",
          "842:             if (IS_QUANT(mb_type))",
          "846:             s->mv_dir = (mb_type >> 13) & 3;",
          "",
          "[Removed Lines]",
          "843:                 s->qscale = get_qscale(s);",
          "",
          "[Added Lines]",
          "833:                 s->qscale = mpeg_get_qscale(s);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1728:     ff_mpeg1_clean_buffers(s);",
          "1729:     s->interlaced_dct = 0;",
          "1733:     if (s->qscale == 0) {",
          "1734:         av_log(s->avctx, AV_LOG_ERROR, \"qscale == 0\\n\");",
          "",
          "[Removed Lines]",
          "1731:     s->qscale = get_qscale(s);",
          "",
          "[Added Lines]",
          "1721:     s->qscale = mpeg_get_qscale(s);",
          "",
          "---------------"
        ],
        "libavcodec/mpeg4data.h||libavcodec/mpeg4data.h": [
          "File: libavcodec/mpeg4data.h -> libavcodec/mpeg4data.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "373:     99, 13, 15, 17, 19, 21, 23, 0",
          "374: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "377: const uint16_t ff_mpeg4_studio_dc_luma[19][2]={",
          "378:     {0x0e,  6}, {0x06,  5}, {0x00,  4}, {0x02,  4},",
          "379:     {0x07,  3}, {0x05,  3}, {0x03,  3}, {0x02,  3},",
          "380:     {0x04,  3}, {0x06,  3}, {0x01,  4}, {0x1e,  7},",
          "381:     {0x3e,  8}, {0x7e,  9}, {0xfe, 10}, {0x1fe, 11},",
          "382:     {0x3fe, 12}, {0x7fe, 13}, {0x7ff, 13}",
          "383: };",
          "385: const uint16_t ff_mpeg4_studio_dc_chroma[19][2]={",
          "386:     {0x00,  4}, {0x02,  4}, {0x07,  3}, {0x05,  3},",
          "387:     {0x03,  3}, {0x02,  3}, {0x04,  3}, {0x06,  3},",
          "388:     {0x01,  4}, {0x06,  5}, {0x0e,  6}, {0x1e,  7},",
          "389:     {0x3e,  8}, {0x7e,  9}, {0xfe, 10}, {0x1fe, 11},",
          "390:     {0x3fe, 12}, {0x7fe, 13}, {0x7ff, 13}",
          "391: };",
          "393: const uint16_t ff_mpeg4_studio_intra[12][22][2]={",
          "394:     {",
          "395:         {0x05,  4}, {0x04,  4}, {0x05,  7}, {0x09,  9},",
          "396:         {0x21, 11}, {0x41, 12}, {0x81, 13}, {0x03,  4},",
          "397:         {0x03,  5}, {0x05,  6}, {0x04,  7}, {0x03,  7},",
          "398:         {0x05,  8}, {0x03,  2}, {0x05,  3}, {0x04,  3},",
          "399:         {0x03,  3}, {0x02,  4}, {0x04,  6}, {0x03,  6},",
          "400:         {0x11, 10}, {0x80, 13}",
          "401:     },",
          "402:     {",
          "403:         {0x00,  0}, {0x00,  0}, {0x00,  0}, {0x00,  0},",
          "404:         {0x00,  0}, {0x00,  0}, {0x00,  0}, {0x00,  0},",
          "405:         {0x00,  0}, {0x00,  0}, {0x00,  0}, {0x00,  0},",
          "406:         {0x00,  0}, {0x00,  0}, {0x01,  1}, {0x01,  2},",
          "407:         {0x01,  3}, {0x01,  4}, {0x01,  5}, {0x03,  7},",
          "408:         {0x05,  8}, {0x04,  8}",
          "409:     },",
          "410:     {",
          "411:         {0x05,  3},  {0x03,  5},  {0x02,  5},  {0x03,  7},",
          "412:         {0x09,  9},  {0x103, 14}, {0x102, 14}, {0x04,  3},",
          "413:         {0x03,  3},  {0x03,  4},  {0x02,  4},  {0x03,  6},",
          "414:         {0x11, 10},  {0x03,  2},  {0x02,  3},  {0x02,  6},",
          "415:         {0x05,  8},  {0x21, 11},  {0x83, 13},  {0x101, 14},",
          "416:         {0x201, 15}, {0x82, 13}",
          "417:     },",
          "418:     {",
          "419:         {0x05,  5}, {0x05,  4}, {0x04,  5}, {0x03,  6},",
          "420:         {0x09,  9}, {0x83, 13}, {0x82, 13}, {0x03,  3},",
          "421:         {0x04,  4}, {0x03,  4}, {0x03,  5}, {0x05,  8},",
          "422:         {0x81, 13}, {0x03,  2}, {0x02,  2}, {0x02,  5},",
          "423:         {0x02,  6}, {0x03,  7}, {0x11, 10}, {0x43, 12},",
          "424:         {0x80, 13}, {0x42, 12}",
          "425:     },",
          "426:     {",
          "427:         {0x05,  7},  {0x03,  4}, {0x03,  5},  {0x04,  7},",
          "428:         {0x09,  9},  {0x83, 13}, {0x101, 14}, {0x03,  3},",
          "429:         {0x02,  4},  {0x05,  6}, {0x03,  7},  {0x11, 10},",
          "430:         {0x201, 15}, {0x03,  2}, {0x02,  2},  {0x02,  3},",
          "431:         {0x04,  6},  {0x03,  6}, {0x05,  8},  {0x21, 11},",
          "432:         {0x82, 13},  {0x81, 13}",
          "433:     },",
          "434:     {",
          "435:         {0x13, 10},  {0x03,  5}, {0x05,  7}, {0x12, 10},",
          "436:         {0x43, 12},  {0x83, 13}, {0x82, 13}, {0x02,  5},",
          "437:         {0x04,  7},  {0x05,  8}, {0x23, 11}, {0x81, 13},",
          "438:         {0x101, 14}, {0x03,  2}, {0x02,  2}, {0x01,  2},",
          "439:         {0x01,  3},  {0x03,  6}, {0x03,  7}, {0x22, 11},",
          "440:         {0x201, 15}, {0x42, 12}",
          "441:     },",
          "442:     {",
          "443:         {0x23, 11},  {0x01,  4},  {0x07,  8},  {0x13, 10},",
          "444:         {0x22, 11},  {0x103, 14}, {0x102, 14}, {0x03,  6},",
          "445:         {0x06,  8},  {0x12, 10},  {0x43, 12},  {0x101, 14},",
          "446:         {0x201, 15}, {0x03,  3},  {0x02,  3},  {0x03,  2},",
          "447:         {0x02,  2},  {0x01,  3},  {0x02,  6},  {0x05,  8},",
          "448:         {0x42, 12},  {0x41, 12}",
          "449:     },",
          "450:     {",
          "451:         {0x0b,  9}, {0x03,  5}, {0x07,  8}, {0x07,  7},",
          "452:         {0x06,  7}, {0x23, 11}, {0x41, 12}, {0x05,  7},",
          "453:         {0x06,  8}, {0x0a,  9}, {0x13, 10}, {0x22, 11},",
          "454:         {0x40, 12}, {0x03,  4}, {0x02,  4}, {0x03,  2},",
          "455:         {0x02,  2}, {0x01,  2}, {0x02,  5}, {0x04,  7},",
          "456:         {0x12, 10}, {0x21, 11}",
          "457:     },",
          "458:     {",
          "459:         {0x15, 10}, {0x03,  6}, {0x14, 10}, {0x23, 11},",
          "460:         {0x07,  8}, {0x43, 12}, {0x81, 13}, {0x06,  8},",
          "461:         {0x0b,  9}, {0x13, 10}, {0x12, 10}, {0x42, 12},",
          "462:         {0x80, 13}, {0x01,  4}, {0x03,  3}, {0x02,  3},",
          "463:         {0x03,  2}, {0x02,  2}, {0x01,  3}, {0x02,  6},",
          "464:         {0x22, 11}, {0x41, 12}",
          "465:     },",
          "466:     {",
          "467:         {0x43, 12}, {0x05,  6}, {0x07,  8}, {0x04,  6},",
          "468:         {0x03,  6}, {0x13, 10}, {0x42, 12}, {0x05,  7},",
          "469:         {0x04,  7}, {0x06,  8}, {0x12, 10}, {0x41, 12},",
          "470:         {0x40, 12}, {0x03,  5}, {0x03,  4}, {0x03,  3},",
          "471:         {0x02,  3}, {0x03,  2}, {0x02,  2}, {0x02,  4},",
          "472:         {0x05,  8}, {0x11, 10}",
          "473:     },",
          "474:     {",
          "475:         {0x83, 13}, {0x05,  7}, {0x07,  8}, {0x03,  4},",
          "476:         {0x21, 11}, {0x82, 13}, {0x81, 13}, {0x04,  7},",
          "477:         {0x06,  8}, {0x0b,  9}, {0x0a,  9}, {0x11, 10},",
          "478:         {0x80, 13}, {0x03,  5}, {0x02,  5}, {0x02,  4},",
          "479:         {0x03,  3}, {0x02,  3}, {0x03,  2}, {0x02,  2},",
          "480:         {0x03,  6}, {0x09,  9}",
          "481:     },",
          "482:     {",
          "483:         {0x13, 10}, {0x03,  5}, {0x03,  6}, {0x0d,  9},",
          "484:         {0x0c,  9}, {0x21, 11}, {0x20, 11}, {0x02,  5},",
          "485:         {0x02,  6}, {0x07,  8}, {0x0b,  9}, {0x12, 10},",
          "486:         {0x11, 10}, {0x05,  3}, {0x04,  3}, {0x05,  4},",
          "487:         {0x04,  4}, {0x03,  4}, {0x02,  4}, {0x03,  3},",
          "488:         {0x03,  2}, {0x0a,  9}",
          "489:     }",
          "490: };",
          "",
          "---------------"
        ],
        "libavcodec/mpeg4video.h||libavcodec/mpeg4video.h": [
          "File: libavcodec/mpeg4video.h -> libavcodec/mpeg4video.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "61: #define GOP_STARTCODE        0x1B3",
          "62: #define VISUAL_OBJ_STARTCODE 0x1B5",
          "63: #define VOP_STARTCODE        0x1B6",
          "66: #define MAX_NVOP_SIZE 19",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "64: #define SLICE_STARTCODE      0x1B7",
          "65: #define EXT_STARTCODE        0x1B8",
          "67: #define QUANT_MATRIX_EXT_ID  0x3",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "108:     int cplx_estimation_trash_i;",
          "109:     int cplx_estimation_trash_p;",
          "110:     int cplx_estimation_trash_b;",
          "111: } Mpeg4DecContext;",
          "114: extern const uint8_t ff_mpeg4_DCtab_lum[13][2];",
          "115: extern const uint8_t ff_mpeg4_DCtab_chrom[13][2];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "116:     VLC studio_intra_tab[12];",
          "117:     VLC studio_luma_dc;",
          "118:     VLC studio_chroma_dc;",
          "120:     int rgb;",
          "123: static const uint8_t mpeg4_block_count[4] = {0, 6, 8, 12};",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "138: extern const uint8_t ff_mpeg4_dc_threshold[8];",
          "140: void ff_mpeg4_encode_mb(MpegEncContext *s,",
          "141:                         int16_t block[6][64],",
          "142:                         int motion_x, int motion_y);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "152: extern const uint16_t ff_mpeg4_studio_dc_luma[19][2];",
          "153: extern const uint16_t ff_mpeg4_studio_dc_chroma[19][2];",
          "154: extern const uint16_t ff_mpeg4_studio_intra[12][22][2];",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "155: int ff_mpeg4_decode_partitions(Mpeg4DecContext *ctx);",
          "156: int ff_mpeg4_get_video_packet_prefix_length(MpegEncContext *s);",
          "157: int ff_mpeg4_decode_video_packet_header(Mpeg4DecContext *ctx);",
          "158: void ff_mpeg4_init_direct_mv(MpegEncContext *s);",
          "159: void ff_mpeg4videodec_static_init(void);",
          "160: int ff_mpeg4_workaround_bugs(AVCodecContext *avctx);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "174: int ff_mpeg4_decode_studio_slice_header(Mpeg4DecContext *ctx);",
          "",
          "---------------"
        ],
        "libavcodec/mpeg4videodec.c||libavcodec/mpeg4videodec.c": [
          "File: libavcodec/mpeg4videodec.c -> libavcodec/mpeg4videodec.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "44: #define SPRITE_TRAJ_VLC_BITS 6",
          "45: #define DC_VLC_BITS 9",
          "46: #define MB_TYPE_B_VLC_BITS 4",
          "48: static VLC dc_lum, dc_chrom;",
          "49: static VLC sprite_trajectory;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "47: #define STUDIO_INTRA_BITS 9",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "528:     return 0;",
          "529: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "532: static void reset_studio_dc_predictors(MpegEncContext *s)",
          "533: {",
          "535:     s->last_dc[0] =",
          "536:     s->last_dc[1] =",
          "537:     s->last_dc[2] = 1 << (s->avctx->bits_per_raw_sample + s->dct_precision + s->intra_dc_precision - 1);",
          "538: }",
          "544: int ff_mpeg4_decode_studio_slice_header(Mpeg4DecContext *ctx)",
          "545: {",
          "546:     MpegEncContext *s = &ctx->m;",
          "547:     GetBitContext *gb = &s->gb;",
          "548:     unsigned vlc_len;",
          "549:     uint16_t mb_num;",
          "551:     if (get_bits_left(gb) >= 32 && get_bits_long(gb, 32) == SLICE_START_CODE) {",
          "552:         vlc_len = av_log2(s->mb_width * s->mb_height) + 1;",
          "553:         mb_num = get_bits(gb, vlc_len);",
          "555:         if (mb_num >= s->mb_num)",
          "556:             return AVERROR_INVALIDDATA;",
          "558:         s->mb_x = mb_num % s->mb_width;",
          "559:         s->mb_y = mb_num / s->mb_width;",
          "561:         if (ctx->shape != BIN_ONLY_SHAPE)",
          "562:             s->qscale = mpeg_get_qscale(s);",
          "570:         }",
          "572:         reset_studio_dc_predictors(s);",
          "573:     }",
          "574:     else {",
          "575:         return AVERROR_INVALIDDATA;",
          "576:     }",
          "578:     return 0;",
          "579: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1723:     return SLICE_OK;",
          "1724: }",
          "1726: static int mpeg4_decode_gop_header(MpegEncContext *s, GetBitContext *gb)",
          "1727: {",
          "1728:     int hours, minutes, seconds;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1777: static void next_start_code_studio(GetBitContext *gb)",
          "1778: {",
          "1779:     align_get_bits(gb);",
          "1781:     while (get_bits_left(gb) >= 24 && show_bits_long(gb, 24) != 0x1) {",
          "1782:         get_bits(gb, 8);",
          "1783:     }",
          "1784: }",
          "1787: static const uint8_t ac_state_tab[22][2] =",
          "1788: {",
          "1789:     {0, 0},",
          "1790:     {0, 1},",
          "1791:     {1, 1},",
          "1792:     {2, 1},",
          "1793:     {3, 1},",
          "1794:     {4, 1},",
          "1795:     {5, 1},",
          "1796:     {1, 2},",
          "1797:     {2, 2},",
          "1798:     {3, 2},",
          "1799:     {4, 2},",
          "1800:     {5, 2},",
          "1801:     {6, 2},",
          "1802:     {1, 3},",
          "1803:     {2, 4},",
          "1804:     {3, 5},",
          "1805:     {4, 6},",
          "1806:     {5, 7},",
          "1807:     {6, 8},",
          "1808:     {7, 9},",
          "1809:     {8, 10},",
          "1810:     {0, 11}",
          "1811: };",
          "1813: static int mpeg4_decode_studio_block(MpegEncContext *s, int32_t block[64], int n)",
          "1814: {",
          "1815:     Mpeg4DecContext *ctx = s->avctx->priv_data;",
          "1817:     int cc, dct_dc_size, dct_diff, code, j, idx = 1, group = 0, run = 0,",
          "1818:         additional_code_len, sign, mismatch;",
          "1819:     VLC *cur_vlc = &ctx->studio_intra_tab[0];",
          "1820:     uint8_t *const scantable = s->intra_scantable.permutated;",
          "1821:     const uint16_t *quant_matrix;",
          "1822:     uint32_t flc;",
          "1823:     const int min = -1 *  (1 << (s->avctx->bits_per_raw_sample + 6));",
          "1824:     const int max =      ((1 << (s->avctx->bits_per_raw_sample + 6)) - 1);",
          "1826:     mismatch = 1;",
          "1828:     memset(block, 0, 64 * sizeof(int32_t));",
          "1830:     if (n < 4) {",
          "1831:         cc = 0;",
          "1832:         dct_dc_size = get_vlc2(&s->gb, ctx->studio_luma_dc.table, STUDIO_INTRA_BITS, 2);",
          "1833:         quant_matrix = s->intra_matrix;",
          "1834:     } else {",
          "1835:         cc = (n & 1) + 1;",
          "1836:         if (ctx->rgb)",
          "1837:             dct_dc_size = get_vlc2(&s->gb, ctx->studio_luma_dc.table, STUDIO_INTRA_BITS, 2);",
          "1838:         else",
          "1839:             dct_dc_size = get_vlc2(&s->gb, ctx->studio_chroma_dc.table, STUDIO_INTRA_BITS, 2);",
          "1840:         quant_matrix = s->chroma_intra_matrix;",
          "1841:     }",
          "1843:     if (dct_dc_size < 0) {",
          "1844:         av_log(s->avctx, AV_LOG_ERROR, \"illegal dct_dc_size vlc\\n\");",
          "1845:         return AVERROR_INVALIDDATA;",
          "1846:     } else if (dct_dc_size == 0) {",
          "1847:         dct_diff = 0;",
          "1848:     } else {",
          "1849:         dct_diff = get_xbits(&s->gb, dct_dc_size);",
          "1851:         if (dct_dc_size > 8) {",
          "1852:             if(!check_marker(s->avctx, &s->gb, \"dct_dc_size > 8\"))",
          "1853:                 return AVERROR_INVALIDDATA;",
          "1854:         }",
          "1856:     }",
          "1858:     s->last_dc[cc] += dct_diff;",
          "1860:     if (s->mpeg_quant)",
          "1861:         block[0] = s->last_dc[cc] * (8 >> s->intra_dc_precision);",
          "1862:     else",
          "1863:         block[0] = s->last_dc[cc] * (8 >> s->intra_dc_precision) * (8 >> s->dct_precision);",
          "1866:     block[0] = av_clip(block[0], min, max);",
          "1867:     mismatch ^= block[0];",
          "1870:     while (1) {",
          "1871:         group = get_vlc2(&s->gb, cur_vlc->table, STUDIO_INTRA_BITS, 2);",
          "1873:         if (group < 0) {",
          "1874:             av_log(s->avctx, AV_LOG_ERROR, \"illegal ac coefficient group vlc\\n\");",
          "1875:             return AVERROR_INVALIDDATA;",
          "1876:         }",
          "1878:         additional_code_len = ac_state_tab[group][0];",
          "1879:         cur_vlc = &ctx->studio_intra_tab[ac_state_tab[group][1]];",
          "1881:         if (group == 0) {",
          "1883:             break;",
          "1884:         } else if (group >= 1 && group <= 6) {",
          "1886:             run = 1 << additional_code_len;",
          "1887:             if (additional_code_len)",
          "1888:                 run += get_bits(&s->gb, additional_code_len);",
          "1889:             idx += run;",
          "1890:             continue;",
          "1891:         } else if (group >= 7 && group <= 12) {",
          "1893:             code = get_bits(&s->gb, additional_code_len);",
          "1894:             sign = code & 1;",
          "1895:             code >>= 1;",
          "1896:             run = (1 << (additional_code_len - 1)) + code;",
          "1897:             idx += run;",
          "1898:             j = scantable[idx++];",
          "1899:             block[j] = sign ? 1 : -1;",
          "1900:         } else if (group >= 13 && group <= 20) {",
          "1902:             j = scantable[idx++];",
          "1903:             block[j] = get_xbits(&s->gb, additional_code_len);",
          "1904:         } else if (group == 21) {",
          "1906:             j = scantable[idx++];",
          "1907:             additional_code_len = s->avctx->bits_per_raw_sample + s->dct_precision + 4;",
          "1908:             flc = get_bits(&s->gb, additional_code_len);",
          "1909:             if (flc >> (additional_code_len-1))",
          "1910:                 block[j] = -1 * (( flc ^ ((1 << additional_code_len) -1)) + 1);",
          "1911:             else",
          "1912:                 block[j] = flc;",
          "1913:         }",
          "1914:         block[j] = ((8 * 2 * block[j] * quant_matrix[j] * s->qscale) >> s->dct_precision) / 32;",
          "1915:         block[j] = av_clip(block[j], min, max);",
          "1916:         mismatch ^= block[j];",
          "1917:     }",
          "1919:     block[63] ^= mismatch & 1;",
          "1921:     return 0;",
          "1922: }",
          "1924: static int mpeg4_decode_studio_mb(MpegEncContext *s, int16_t block_[12][64])",
          "1925: {",
          "1926:     int i;",
          "1930:     s->mb_intra = 1;",
          "1934:         if (!get_bits1(&s->gb)) {",
          "1935:             skip_bits1(&s->gb);",
          "1936:             s->qscale = mpeg_get_qscale(s);",
          "1937:         }",
          "1939:         for (i = 0; i < mpeg4_block_count[s->chroma_format]; i++) {",
          "1940:             if (mpeg4_decode_studio_block(s, (*s->block32)[i], i) < 0)",
          "1941:                 return AVERROR_INVALIDDATA;",
          "1942:         }",
          "1943:     } else {",
          "1945:         check_marker(s->avctx, &s->gb, \"DPCM block start\");",
          "1946:         avpriv_request_sample(s->avctx, \"DPCM encoded block\");",
          "1947:         next_start_code_studio(&s->gb);",
          "1948:         return SLICE_ERROR;",
          "1949:     }",
          "1951:     if (get_bits_left(&s->gb) >= 24 && show_bits(&s->gb, 23) == 0) {",
          "1952:         next_start_code_studio(&s->gb);",
          "1953:         return SLICE_END;",
          "1954:     }",
          "1956:     return SLICE_OK;",
          "1957: }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1791:     return 0;",
          "1792: }",
          "1794: static int decode_vol_header(Mpeg4DecContext *ctx, GetBitContext *gb)",
          "1795: {",
          "1796:     MpegEncContext *s = &ctx->m;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2027: static void mpeg4_load_default_matrices(MpegEncContext *s)",
          "2028: {",
          "2029:     int i, v;",
          "2032:     for (i = 0; i < 64; i++) {",
          "2033:         int j = s->idsp.idct_permutation[i];",
          "2034:         v = ff_mpeg4_default_intra_matrix[i];",
          "2035:         s->intra_matrix[j]        = v;",
          "2036:         s->chroma_intra_matrix[j] = v;",
          "2038:         v = ff_mpeg4_default_non_intra_matrix[i];",
          "2039:         s->inter_matrix[j]        = v;",
          "2040:         s->chroma_inter_matrix[j] = v;",
          "2041:     }",
          "2042: }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1955:             int i, v;",
          "1970:             if (get_bits1(gb)) {",
          "",
          "[Removed Lines]",
          "1958:             for (i = 0; i < 64; i++) {",
          "1959:                 int j = s->idsp.idct_permutation[i];",
          "1960:                 v = ff_mpeg4_default_intra_matrix[i];",
          "1961:                 s->intra_matrix[j]        = v;",
          "1962:                 s->chroma_intra_matrix[j] = v;",
          "1964:                 v = ff_mpeg4_default_non_intra_matrix[i];",
          "1965:                 s->inter_matrix[j]        = v;",
          "1966:                 s->chroma_inter_matrix[j] = v;",
          "1967:             }",
          "",
          "[Added Lines]",
          "2207:             mpeg4_load_default_matrices(s);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2608:     return 0;",
          "2609: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2851: static void read_quant_matrix_ext(MpegEncContext *s, GetBitContext *gb)",
          "2852: {",
          "2853:     int i, j, v;",
          "2855:     if (get_bits1(gb)) {",
          "2857:         for (i = 0; i < 64; i++) {",
          "2858:             v = get_bits(gb, 8);",
          "2859:             j = s->idsp.idct_permutation[ff_zigzag_direct[i]];",
          "2860:             s->intra_matrix[j]        = v;",
          "2861:             s->chroma_intra_matrix[j] = v;",
          "2862:         }",
          "2863:     }",
          "2865:     if (get_bits1(gb)) {",
          "2867:         for (i = 0; i < 64; i++) {",
          "2868:             get_bits(gb, 8);",
          "2869:         }",
          "2870:     }",
          "2872:     if (get_bits1(gb)) {",
          "2874:         for (i = 0; i < 64; i++) {",
          "2875:             v = get_bits(gb, 8);",
          "2876:             j = s->idsp.idct_permutation[ff_zigzag_direct[i]];",
          "2877:             s->chroma_intra_matrix[j] = v;",
          "2878:         }",
          "2879:     }",
          "2881:     if (get_bits1(gb)) {",
          "2883:         for (i = 0; i < 64; i++) {",
          "2884:             get_bits(gb, 8);",
          "2885:         }",
          "2886:     }",
          "2888:     next_start_code_studio(gb);",
          "2889: }",
          "2891: static void extension_and_user_data(MpegEncContext *s, GetBitContext *gb, int id)",
          "2892: {",
          "2893:     uint32_t startcode;",
          "2894:     uint8_t extension_type;",
          "2896:     startcode = show_bits_long(gb, 32);",
          "2897:     if (startcode == USER_DATA_STARTCODE || startcode == EXT_STARTCODE) {",
          "2899:         if ((id == 2 || id == 4) && startcode == EXT_STARTCODE) {",
          "2900:             skip_bits_long(gb, 32);",
          "2901:             extension_type = get_bits(gb, 4);",
          "2902:             if (extension_type == QUANT_MATRIX_EXT_ID)",
          "2903:                 read_quant_matrix_ext(s, gb);",
          "2904:         }",
          "2905:     }",
          "2906: }",
          "2908: static void decode_smpte_tc(Mpeg4DecContext *ctx, GetBitContext *gb)",
          "2909: {",
          "2910:     MpegEncContext *s = &ctx->m;",
          "2913:     check_marker(s->avctx, gb, \"after Time_code[63..48]\");",
          "2915:     check_marker(s->avctx, gb, \"after Time_code[47..32]\");",
          "2917:     check_marker(s->avctx, gb, \"after Time_code[31..16]\");",
          "2919:     check_marker(s->avctx, gb, \"after Time_code[15..0]\");",
          "2921: }",
          "2927: static int decode_studio_vop_header(Mpeg4DecContext *ctx, GetBitContext *gb)",
          "2928: {",
          "2929:     MpegEncContext *s = &ctx->m;",
          "2931:     if (get_bits_left(gb) <= 32)",
          "2932:         return 0;",
          "2934:     if (get_bits_long(gb, 32) != VOP_STARTCODE)",
          "2935:         return AVERROR_INVALIDDATA;",
          "2937:     s->decode_mb = mpeg4_decode_studio_mb;",
          "2939:     decode_smpte_tc(ctx, gb);",
          "2948:     }",
          "2950:     if (s->pict_type == AV_PICTURE_TYPE_I) {",
          "2951:         if (get_bits1(gb))",
          "2952:             reset_studio_dc_predictors(s);",
          "2953:     }",
          "2955:     if (ctx->shape != BIN_ONLY_SHAPE) {",
          "2956:         s->alternate_scan = get_bits1(gb);",
          "2957:         s->frame_pred_frame_dct = get_bits1(gb);",
          "2958:         s->dct_precision = get_bits(gb, 2);",
          "2959:         s->intra_dc_precision = get_bits(gb, 2);",
          "2960:         s->q_scale_type = get_bits1(gb);",
          "2961:     }",
          "2963:     if (s->alternate_scan) {",
          "2964:         ff_init_scantable(s->idsp.idct_permutation, &s->inter_scantable,   ff_alternate_vertical_scan);",
          "2965:         ff_init_scantable(s->idsp.idct_permutation, &s->intra_scantable,   ff_alternate_vertical_scan);",
          "2966:         ff_init_scantable(s->idsp.idct_permutation, &s->intra_h_scantable, ff_alternate_vertical_scan);",
          "2967:         ff_init_scantable(s->idsp.idct_permutation, &s->intra_v_scantable, ff_alternate_vertical_scan);",
          "2968:     } else {",
          "2969:         ff_init_scantable(s->idsp.idct_permutation, &s->inter_scantable,   ff_zigzag_direct);",
          "2970:         ff_init_scantable(s->idsp.idct_permutation, &s->intra_scantable,   ff_zigzag_direct);",
          "2971:         ff_init_scantable(s->idsp.idct_permutation, &s->intra_h_scantable, ff_alternate_horizontal_scan);",
          "2972:         ff_init_scantable(s->idsp.idct_permutation, &s->intra_v_scantable, ff_alternate_vertical_scan);",
          "2973:     }",
          "2975:     mpeg4_load_default_matrices(s);",
          "2977:     next_start_code_studio(gb);",
          "2978:     extension_and_user_data(s, gb, 4);",
          "2980:     return 0;",
          "2981: }",
          "2983: static int decode_studiovisualobject(Mpeg4DecContext *ctx, GetBitContext *gb)",
          "2984: {",
          "2985:     uint32_t startcode;",
          "2986:     MpegEncContext *s = &ctx->m;",
          "2987:     int visual_object_type, width, height;",
          "2989:     startcode = get_bits_long(gb, 32);",
          "2992:     if (startcode == VISUAL_OBJ_STARTCODE) {",
          "2994:         visual_object_type = get_bits(gb, 4);",
          "2996:         next_start_code_studio(gb);",
          "2997:         extension_and_user_data(s, gb, 1);",
          "2999:         if (visual_object_type == VOT_VIDEO_ID) {",
          "3009:             if (ctx->shape != BIN_ONLY_SHAPE) {",
          "3012:                 if (!s->chroma_format) {",
          "3013:                     av_log(s->avctx, AV_LOG_ERROR, \"illegal chroma format\\n\");",
          "3014:                     return AVERROR_INVALIDDATA;",
          "3015:                 }",
          "3018:                 if (s->avctx->bits_per_raw_sample == 10) {",
          "3019:                     if (ctx->rgb) {",
          "3020:                         s->avctx->pix_fmt = AV_PIX_FMT_GBRP10;",
          "3021:                     }",
          "3022:                     else {",
          "3023:                         s->avctx->pix_fmt = s->chroma_format == CHROMA_422 ? AV_PIX_FMT_YUV422P10 : AV_PIX_FMT_YUV444P10;",
          "3024:                     }",
          "3025:                 }",
          "3026:                 else {",
          "3027:                     avpriv_request_sample(s->avctx, \"MPEG-4 Studio profile bit-depth %u\", s->avctx->bits_per_raw_sample);",
          "3028:                     return AVERROR_PATCHWELCOME;",
          "3029:                 }",
          "3030:             }",
          "3031:             if (ctx->shape == RECT_SHAPE) {",
          "3032:                 check_marker(s->avctx, gb, \"before video_object_layer_width\");",
          "3034:                 check_marker(s->avctx, gb, \"before video_object_layer_height\");",
          "3036:                 check_marker(s->avctx, gb, \"after video_object_layer_height\");",
          "3039:                 if (width && height) {",
          "3040:                     if (s->width && s->height &&",
          "3041:                         (s->width != width || s->height != height))",
          "3042:                         s->context_reinit = 1;",
          "3043:                     s->width  = width;",
          "3044:                     s->height = height;",
          "3045:                 }",
          "3046:             }",
          "3047:             s->aspect_ratio_info = get_bits(gb, 4);",
          "3048:             if (s->aspect_ratio_info == FF_ASPECT_EXTENDED) {",
          "3049:                 s->avctx->sample_aspect_ratio.num = get_bits(gb, 8);  // par_width",
          "3050:                 s->avctx->sample_aspect_ratio.den = get_bits(gb, 8);  // par_height",
          "3051:             } else {",
          "3052:                 s->avctx->sample_aspect_ratio = ff_h263_pixel_aspect[s->aspect_ratio_info];",
          "3053:             }",
          "3056:             check_marker(s->avctx, gb, \"after first_half_bit_rate\");",
          "3058:             check_marker(s->avctx, gb, \"after latter_half_bit_rate\");",
          "3060:             check_marker(s->avctx, gb, \"after first_half_vbv_buffer_size\");",
          "3063:             check_marker(s->avctx, gb, \"after first_half_vbv_buffer_size\");",
          "3065:             check_marker(s->avctx, gb, \"after latter_half_vbv_occupancy\");",
          "3066:             s->low_delay = get_bits1(gb);",
          "3069:             next_start_code_studio(gb);",
          "3070:             extension_and_user_data(s, gb, 2);",
          "3071:         }",
          "3072:     }",
          "3074:     return 0;",
          "3075: }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2721:             mpeg4_decode_gop_header(s, gb);",
          "2722:         } else if (startcode == VOS_STARTCODE) {",
          "2723:             mpeg4_decode_profile_level(s, gb);",
          "2724:         } else if (startcode == VISUAL_OBJ_STARTCODE) {",
          "2725:             mpeg4_decode_visual_object(s, gb);",
          "2726:         } else if (startcode == VOP_STARTCODE) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3190:             if (s->avctx->profile == FF_PROFILE_MPEG4_SIMPLE_STUDIO &&",
          "3191:                 (s->avctx->level > 0 && s->avctx->level < 9)) {",
          "3192:                 s->studio_profile = 1;",
          "3193:                 next_start_code_studio(gb);",
          "3194:                 extension_and_user_data(s, gb, 0);",
          "3196:                 if ((ret = decode_studiovisualobject(ctx, gb)) < 0)",
          "3197:                     return ret;",
          "3198:                 break;",
          "3199:             }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2736:         s->low_delay = 1;",
          "2737:     s->avctx->has_b_frames = !s->low_delay;",
          "2740: }",
          "2742: av_cold void ff_mpeg4videodec_static_init(void) {",
          "",
          "[Removed Lines]",
          "2739:     return decode_vop_header(ctx, gb);",
          "",
          "[Added Lines]",
          "3215:     if (s->studio_profile)",
          "3216:         return decode_studio_vop_header(ctx, gb);",
          "3217:     else",
          "3218:         return decode_vop_header(ctx, gb);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2836: }",
          "2837: #endif",
          "2839: static av_cold int decode_init(AVCodecContext *avctx)",
          "2840: {",
          "2841:     Mpeg4DecContext *ctx = avctx->priv_data;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3318: static av_cold int init_studio_vlcs(Mpeg4DecContext *ctx)",
          "3319: {",
          "3320:     int i, ret;",
          "3322:     for (i = 0; i < 12; i++) {",
          "3323:         ret = init_vlc(&ctx->studio_intra_tab[i], STUDIO_INTRA_BITS, 22,",
          "3324:                        &ff_mpeg4_studio_intra[i][0][1], 4, 2,",
          "3325:                        &ff_mpeg4_studio_intra[i][0][0], 4, 2,",
          "3326:                        0);",
          "3328:         if (ret < 0)",
          "3329:             return ret;",
          "3330:     }",
          "3332:     ret = init_vlc(&ctx->studio_luma_dc, STUDIO_INTRA_BITS, 19,",
          "3333:                    &ff_mpeg4_studio_dc_luma[0][1], 4, 2,",
          "3334:                    &ff_mpeg4_studio_dc_luma[0][0], 4, 2,",
          "3335:                    0);",
          "3336:     if (ret < 0)",
          "3337:         return ret;",
          "3339:     ret = init_vlc(&ctx->studio_chroma_dc, STUDIO_INTRA_BITS, 19,",
          "3340:                    &ff_mpeg4_studio_dc_chroma[0][1], 4, 2,",
          "3341:                    &ff_mpeg4_studio_dc_chroma[0][0], 4, 2,",
          "3342:                    0);",
          "3343:     if (ret < 0)",
          "3344:         return ret;",
          "3346:     return 0;",
          "3347: }",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2851:         return ret;",
          "2853:     ff_mpeg4videodec_static_init();",
          "2855:     s->h263_pred = 1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3364:     if ((ret = init_studio_vlcs(ctx)) < 0)",
          "3365:         return ret;",
          "",
          "---------------"
        ],
        "libavcodec/mpegvideo.c||libavcodec/mpegvideo.c": [
          "File: libavcodec/mpegvideo.c -> libavcodec/mpegvideo.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "386:     for (i = 0; i < 12; i++) {",
          "387:         s->pblocks[i] = &s->block[i];",
          "388:     }",
          "389:     if (s->avctx->codec_tag == AV_RL32(\"VCR2\")) {",
          "391:         FFSWAP(void *, s->pblocks[4], s->pblocks[5]);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "390:     FF_ALLOCZ_OR_GOTO(s->avctx, s->block32, sizeof(*s->block32), fail)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "421:     av_freep(&s->me.map);",
          "422:     av_freep(&s->me.score_map);",
          "423:     av_freep(&s->blocks);",
          "424:     av_freep(&s->ac_val_base);",
          "425:     s->block = NULL;",
          "426: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "427:     av_freep(&s->block32);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "438:     COPY(me.score_map);",
          "439:     COPY(blocks);",
          "440:     COPY(block);",
          "441:     COPY(start_mb_y);",
          "442:     COPY(end_mb_y);",
          "443:     COPY(me.map_generation);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "445:     COPY(block32);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "811:     s->dct_error_sum = NULL;",
          "812:     s->block = NULL;",
          "813:     s->blocks = NULL;",
          "814:     memset(s->pblocks, 0, sizeof(s->pblocks));",
          "815:     s->ac_val_base = NULL;",
          "816:     s->ac_val[0] =",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "819:     s->block32 = NULL;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2120:                 ff_wmv2_add_mb(s, block, dest_y, dest_cb, dest_cr);",
          "2121:             }",
          "2122:         } else {",
          "2125:                 put_dct(s, block[0], 0, dest_y                          , dct_linesize, s->qscale);",
          "2126:                 put_dct(s, block[1], 1, dest_y              + block_size, dct_linesize, s->qscale);",
          "2127:                 put_dct(s, block[2], 2, dest_y + dct_offset             , dct_linesize, s->qscale);",
          "",
          "[Removed Lines]",
          "2124:             if(s->encoding || !(s->codec_id==AV_CODEC_ID_MPEG1VIDEO || s->codec_id==AV_CODEC_ID_MPEG2VIDEO)){",
          "",
          "[Added Lines]",
          "2131:             if (s->avctx->bits_per_raw_sample > 8){",
          "2132:                 const int act_block_size = block_size * 2;",
          "2133:                 s->idsp.idct_put(dest_y,                           dct_linesize, (int16_t*)(*s->block32)[0]);",
          "2134:                 s->idsp.idct_put(dest_y              + act_block_size, dct_linesize, (int16_t*)(*s->block32)[1]);",
          "2135:                 s->idsp.idct_put(dest_y + dct_offset,              dct_linesize, (int16_t*)(*s->block32)[2]);",
          "2136:                 s->idsp.idct_put(dest_y + dct_offset + act_block_size, dct_linesize, (int16_t*)(*s->block32)[3]);",
          "2138:                 dct_linesize = uvlinesize << s->interlaced_dct;",
          "2139:                 dct_offset   = s->interlaced_dct ? uvlinesize : uvlinesize*block_size;",
          "2141:                 s->idsp.idct_put(dest_cb,              dct_linesize, (int16_t*)(*s->block32)[4]);",
          "2142:                 s->idsp.idct_put(dest_cr,              dct_linesize, (int16_t*)(*s->block32)[5]);",
          "2143:                 s->idsp.idct_put(dest_cb + dct_offset, dct_linesize, (int16_t*)(*s->block32)[6]);",
          "2144:                 s->idsp.idct_put(dest_cr + dct_offset, dct_linesize, (int16_t*)(*s->block32)[7]);",
          "2145:                 if(!s->chroma_x_shift){//Chroma444",
          "2146:                     s->idsp.idct_put(dest_cb + act_block_size,              dct_linesize, (int16_t*)(*s->block32)[8]);",
          "2147:                     s->idsp.idct_put(dest_cr + act_block_size,              dct_linesize, (int16_t*)(*s->block32)[9]);",
          "2148:                     s->idsp.idct_put(dest_cb + act_block_size + dct_offset, dct_linesize, (int16_t*)(*s->block32)[10]);",
          "2149:                     s->idsp.idct_put(dest_cr + act_block_size + dct_offset, dct_linesize, (int16_t*)(*s->block32)[11]);",
          "2150:                 }",
          "2151:             }",
          "2153:             else if(s->encoding || !(s->codec_id==AV_CODEC_ID_MPEG1VIDEO || s->codec_id==AV_CODEC_ID_MPEG2VIDEO)){",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2202: void ff_init_block_index(MpegEncContext *s){ //FIXME maybe rename",
          "2203:     const int linesize   = s->current_picture.f->linesize[0]; //not s->linesize as this would be wrong for field pics",
          "2204:     const int uvlinesize = s->current_picture.f->linesize[1];",
          "2207:     s->block_index[0]= s->b8_stride*(s->mb_y*2    ) - 2 + s->mb_x*2;",
          "2208:     s->block_index[1]= s->b8_stride*(s->mb_y*2    ) - 1 + s->mb_x*2;",
          "",
          "[Removed Lines]",
          "2205:     const int mb_size= 4 - s->avctx->lowres;",
          "",
          "[Added Lines]",
          "2234:     const int width_of_mb = (4 + (s->avctx->bits_per_raw_sample > 8)) - s->avctx->lowres;",
          "2235:     const int height_of_mb = 4 - s->avctx->lowres;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2212:     s->block_index[5]= s->mb_stride*(s->mb_y + s->mb_height + 2) + s->b8_stride*s->mb_height*2 + s->mb_x - 1;",
          "2219:     if(!(s->pict_type==AV_PICTURE_TYPE_B && s->avctx->draw_horiz_band && s->picture_structure==PICT_FRAME))",
          "2220:     {",
          "2221:         if(s->picture_structure==PICT_FRAME){",
          "2225:         }else{",
          "2229:             av_assert1((s->mb_y&1) == (s->picture_structure == PICT_BOTTOM_FIELD));",
          "2230:         }",
          "2231:     }",
          "",
          "[Removed Lines]",
          "2215:     s->dest[0] = s->current_picture.f->data[0] + (int)((s->mb_x - 1U) <<  mb_size);",
          "2216:     s->dest[1] = s->current_picture.f->data[1] + (int)((s->mb_x - 1U) << (mb_size - s->chroma_x_shift));",
          "2217:     s->dest[2] = s->current_picture.f->data[2] + (int)((s->mb_x - 1U) << (mb_size - s->chroma_x_shift));",
          "2222:         s->dest[0] += s->mb_y *   linesize << mb_size;",
          "2223:         s->dest[1] += s->mb_y * uvlinesize << (mb_size - s->chroma_y_shift);",
          "2224:         s->dest[2] += s->mb_y * uvlinesize << (mb_size - s->chroma_y_shift);",
          "2226:             s->dest[0] += (s->mb_y>>1) *   linesize << mb_size;",
          "2227:             s->dest[1] += (s->mb_y>>1) * uvlinesize << (mb_size - s->chroma_y_shift);",
          "2228:             s->dest[2] += (s->mb_y>>1) * uvlinesize << (mb_size - s->chroma_y_shift);",
          "",
          "[Added Lines]",
          "2245:     s->dest[0] = s->current_picture.f->data[0] + (int)((s->mb_x - 1U) <<  width_of_mb);",
          "2246:     s->dest[1] = s->current_picture.f->data[1] + (int)((s->mb_x - 1U) << (width_of_mb - s->chroma_x_shift));",
          "2247:     s->dest[2] = s->current_picture.f->data[2] + (int)((s->mb_x - 1U) << (width_of_mb - s->chroma_x_shift));",
          "2252:         s->dest[0] += s->mb_y *   linesize << height_of_mb;",
          "2253:         s->dest[1] += s->mb_y * uvlinesize << (height_of_mb - s->chroma_y_shift);",
          "2254:         s->dest[2] += s->mb_y * uvlinesize << (height_of_mb - s->chroma_y_shift);",
          "2256:             s->dest[0] += (s->mb_y>>1) *   linesize << height_of_mb;",
          "2257:             s->dest[1] += (s->mb_y>>1) * uvlinesize << (height_of_mb - s->chroma_y_shift);",
          "2258:             s->dest[2] += (s->mb_y>>1) * uvlinesize << (height_of_mb - s->chroma_y_shift);",
          "",
          "---------------"
        ],
        "libavcodec/mpegvideo.h||libavcodec/mpegvideo.h": [
          "File: libavcodec/mpegvideo.h -> libavcodec/mpegvideo.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "45: #include \"mpegpicture.h\"",
          "46: #include \"mpegvideodsp.h\"",
          "47: #include \"mpegvideoencdsp.h\"",
          "48: #include \"pixblockdsp.h\"",
          "49: #include \"put_bits.h\"",
          "50: #include \"ratecontrol.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "48: #include \"mpegvideodata.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "71: #define SLICE_MAX_START_CODE    0x000001af",
          "72: #define EXT_START_CODE          0x000001b5",
          "73: #define USER_START_CODE         0x000001b2",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "75: #define SLICE_START_CODE        0x000001b7",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "378:     int custom_pcf;",
          "382:     int time_increment_bits;",
          "383:     int last_time_base;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "384:     int studio_profile;",
          "385:     int dct_precision;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "502:     int16_t (*block)[64]; ///< points to one of the following blocks",
          "503:     int16_t (*blocks)[12][64]; // for HQ mode we need to keep the best block",
          "505: #define SLICE_OK         0",
          "506: #define SLICE_ERROR     -1",
          "507: #define SLICE_END       -2 ///<end marker found",
          "",
          "[Removed Lines]",
          "504:     int (*decode_mb)(struct MpegEncContext *s, int16_t block[6][64]); // used by some codecs to avoid a switch()",
          "",
          "[Added Lines]",
          "509:     int (*decode_mb)(struct MpegEncContext *s, int16_t block[12][64]); // used by some codecs to avoid a switch()",
          "511:     int32_t (*block32)[12][64];",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "729:                    qpel_mc_func (*qpix_op)[16]);",
          "731: static inline void ff_update_block_index(MpegEncContext *s){",
          "734:     s->block_index[0]+=2;",
          "735:     s->block_index[1]+=2;",
          "",
          "[Removed Lines]",
          "732:     const int block_size= 8 >> s->avctx->lowres;",
          "",
          "[Added Lines]",
          "740:     const int bytes_per_pixel = 1 + (s->avctx->bits_per_raw_sample > 8);",
          "741:     const int block_size= (8*bytes_per_pixel) >> s->avctx->lowres;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "738:     s->block_index[4]++;",
          "739:     s->block_index[5]++;",
          "740:     s->dest[0]+= 2*block_size;",
          "743: }",
          "745: static inline int get_bits_diff(MpegEncContext *s){",
          "",
          "[Removed Lines]",
          "741:     s->dest[1]+= block_size;",
          "742:     s->dest[2]+= block_size;",
          "",
          "[Added Lines]",
          "750:     s->dest[1]+= (2 >> s->chroma_x_shift) * block_size;",
          "751:     s->dest[2]+= (2 >> s->chroma_x_shift) * block_size;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "751:     return bits - last;",
          "752: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "763: static inline int mpeg_get_qscale(MpegEncContext *s)",
          "764: {",
          "765:     int qscale = get_bits(&s->gb, 5);",
          "766:     if (s->q_scale_type)",
          "767:         return ff_mpeg2_non_linear_qscale[qscale];",
          "768:     else",
          "769:         return qscale << 1;",
          "770: }",
          "",
          "---------------"
        ],
        "libavcodec/x86/idctdsp_init.c||libavcodec/x86/idctdsp_init.c": [
          "File: libavcodec/x86/idctdsp_init.c -> libavcodec/x86/idctdsp_init.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "123:         }",
          "125:         if (avctx->bits_per_raw_sample == 10 &&",
          "126:             (avctx->idct_algo == FF_IDCT_AUTO ||",
          "127:              avctx->idct_algo == FF_IDCT_SIMPLEAUTO ||",
          "128:              avctx->idct_algo == FF_IDCT_SIMPLE)) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "126:             avctx->codec_id != AV_CODEC_ID_MPEG4 &&",
          "",
          "---------------"
        ]
      }
    }
  ]
}