{
  "cve_id": "CVE-2014-0207",
  "cve_desc": "The cdf_read_short_sector function in cdf.c in file before 5.19, as used in the Fileinfo component in PHP before 5.4.30 and 5.5.x before 5.5.14, allows remote attackers to cause a denial of service (assertion failure and application exit) via a crafted CDF file.",
  "repo": "file/file",
  "patch_hash": "6d209c1c489457397a5763bca4b28e43aac90391",
  "patch_info": {
    "commit_hash": "6d209c1c489457397a5763bca4b28e43aac90391",
    "repo": "file/file",
    "commit_url": "https://github.com/file/file/commit/6d209c1c489457397a5763bca4b28e43aac90391",
    "files": [
      "src/cdf.c",
      "src/readcdf.c"
    ],
    "message": "Apply patches from file-CVE-2012-1571.patch From Francisco Alonso Espejo:     file < 5.18/git version can be made to crash when checking some     corrupt CDF files (Using an invalid cdf_read_short_sector size)     The problem I found here, is that in most situations (if     h_short_sec_size_p2 > 8) because the blocksize is 512 and normal     values are 06 which means reading 64 bytes.As long as the check     for the block size copy is not checked properly (there's an assert     that makes wrong/invalid assumptions)",
    "before_after_code_files": [
      "src/cdf.c||src/cdf.c",
      "src/readcdf.c||src/readcdf.c"
    ]
  },
  "patch_diff": {
    "src/cdf.c||src/cdf.c": [
      "File: src/cdf.c -> src/cdf.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "35: #include \"file.h\"",
      "37: #ifndef lint",
      "39: #endif",
      "41: #include <assert.h>",
      "",
      "[Removed Lines]",
      "38: FILE_RCSID(\"@(#)$File: cdf.c,v 1.54 2014/02/25 20:52:02 christos Exp $\")",
      "",
      "[Added Lines]",
      "38: FILE_RCSID(\"@(#)$File: cdf.c,v 1.55 2014/02/27 23:26:17 christos Exp $\")",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "352:  size_t ss = CDF_SHORT_SEC_SIZE(h);",
      "353:  size_t pos = CDF_SHORT_SEC_POS(h, id);",
      "354:  assert(ss == len);",
      "356:   DPRINTF((\"Out of bounds read %\" SIZE_T_FORMAT \"u > %\"",
      "357:       SIZE_T_FORMAT \"u\\n\",",
      "359:   return -1;",
      "360:  }",
      "361:  (void)memcpy(((char *)buf) + offs,",
      "",
      "[Removed Lines]",
      "355:  if (pos > CDF_SEC_SIZE(h) * sst->sst_len) {",
      "358:       pos, CDF_SEC_SIZE(h) * sst->sst_len));",
      "",
      "[Added Lines]",
      "355:  if (pos + len > CDF_SEC_SIZE(h) * sst->sst_len) {",
      "358:       pos + len, CDF_SEC_SIZE(h) * sst->sst_len));",
      "",
      "---------------"
    ],
    "src/readcdf.c||src/readcdf.c": [
      "File: src/readcdf.c -> src/readcdf.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "26: #include \"file.h\"",
      "28: #ifndef lint",
      "30: #endif",
      "32: #include <assert.h>",
      "",
      "[Removed Lines]",
      "29: FILE_RCSID(\"@(#)$File: readcdf.c,v 1.39 2014/02/27 23:26:18 christos Exp $\")",
      "",
      "[Added Lines]",
      "29: FILE_RCSID(\"@(#)$File: readcdf.c,v 1.40 2014/03/06 15:23:33 christos Exp $\")",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "121: private int",
      "122: cdf_file_property_info(struct magic_set *ms, const cdf_property_info_t *info,",
      "124: {",
      "125:         size_t i;",
      "126:         cdf_timestamp_t tp;",
      "",
      "[Removed Lines]",
      "123:     size_t count, const uint64_t clsid[2])",
      "",
      "[Added Lines]",
      "123:     size_t count, const cdf_directory_t *root_storage)",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "130:         const char *s;",
      "131:         int len;",
      "136:         for (i = 0; i < count; i++) {",
      "137:                 cdf_print_property_name(buf, sizeof(buf), info[i].pi_id);",
      "",
      "[Removed Lines]",
      "133:         if (!NOTMIME(ms))",
      "134:   str = cdf_clsid_to_mime(clsid, clsid2mime);",
      "",
      "[Added Lines]",
      "133:         if (!NOTMIME(ms) && root_storage)",
      "134:   str = cdf_clsid_to_mime(root_storage->d_storage_uuid, clsid2mime);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "237: private int",
      "238: cdf_file_summary_info(struct magic_set *ms, const cdf_header_t *h,",
      "240: {",
      "241:         cdf_summary_info_header_t si;",
      "242:         cdf_property_info_t *info;",
      "",
      "[Removed Lines]",
      "239:     const cdf_stream_t *sst, const uint64_t clsid[2])",
      "",
      "[Added Lines]",
      "239:     const cdf_stream_t *sst, const cdf_directory_t *root_storage)",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "276:                                 return -2;",
      "277:                         break;",
      "278:                 }",
      "286:         free(info);",
      "288:         return m == -1 ? -2 : m;",
      "",
      "[Removed Lines]",
      "279:   str = cdf_clsid_to_mime(clsid, clsid2desc);",
      "280:   if (str)",
      "281:                         if (file_printf(ms, \", %s\", str) == -1)",
      "282:     return -2;",
      "283:         }",
      "285:         m = cdf_file_property_info(ms, info, count, clsid);",
      "",
      "[Added Lines]",
      "279:   if (root_storage) {",
      "280:    str = cdf_clsid_to_mime(root_storage->d_storage_uuid, clsid2desc);",
      "281:    if (str)",
      "282:     if (file_printf(ms, \", %s\", str) == -1)",
      "283:      return -2;",
      "284:    }",
      "285:   }",
      "287:         m = cdf_file_property_info(ms, info, count, root_storage);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "381: #ifdef CDF_DEBUG",
      "382:         cdf_dump_summary_info(&h, &scn);",
      "383: #endif",
      "388:  if (i == 0) {",
      "389:   const char *str = NULL;",
      "",
      "[Removed Lines]",
      "384:         if ((i = cdf_file_summary_info(ms, &h, &scn,",
      "385:      root_storage->d_storage_uuid)) < 0)",
      "386:                 expn = \"Can't expand summary_info\";",
      "",
      "[Added Lines]",
      "386:         if ((i = cdf_file_summary_info(ms, &h, &scn, root_storage)) < 0)",
      "387:             expn = \"Can't expand summary_info\";",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "eb38a6f82924cb5ad5ed3b611fa2364dcc4ba5eb",
      "candidate_info": {
        "commit_hash": "eb38a6f82924cb5ad5ed3b611fa2364dcc4ba5eb",
        "repo": "file/file",
        "commit_url": "https://github.com/file/file/commit/eb38a6f82924cb5ad5ed3b611fa2364dcc4ba5eb",
        "files": [
          "ChangeLog",
          "configure.ac",
          "src/file.h",
          "src/funcs.c",
          "src/readcdf.c",
          "src/softmagic.c",
          "src/strcasestr.c"
        ],
        "message": "locale and strcasestr changes",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "src/file.h||src/file.h",
          "src/funcs.c||src/funcs.c",
          "src/readcdf.c||src/readcdf.c",
          "src/softmagic.c||src/softmagic.c",
          "src/strcasestr.c||src/strcasestr.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/readcdf.c||src/readcdf.c"
          ],
          "candidate": [
            "src/readcdf.c||src/readcdf.c"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "139: AC_CHECK_FUNCS(strerror strndup strtoul mkstemp mkostemp utimes utime wcwidth strtof)",
          "141: dnl Provide implementation of some required functions if necessary",
          "144: dnl Checks for libraries",
          "145: AC_CHECK_LIB(z,gzopen)",
          "",
          "[Removed Lines]",
          "142: AC_REPLACE_FUNCS(getopt_long asprintf vasprintf strlcpy strlcat getline ctime_r asctime_r pread)",
          "",
          "[Added Lines]",
          "142: AC_REPLACE_FUNCS(getopt_long asprintf vasprintf strlcpy strlcat getline ctime_r asctime_r pread strcasestr)",
          "",
          "---------------"
        ],
        "src/file.h||src/file.h": [
          "File: src/file.h -> src/file.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "491: int vasprintf(char **, const char *, va_list);",
          "492: #endif",
          "493: #ifndef HAVE_ASPRINTF",
          "495: #endif",
          "497: #ifndef HAVE_STRLCPY",
          "499: #endif",
          "500: #ifndef HAVE_STRLCAT",
          "502: #endif",
          "503: #ifndef HAVE_GETLINE",
          "506: #endif",
          "507: #ifndef HAVE_CTIME_R",
          "508: char   *ctime_r(const time_t *, char *);",
          "",
          "[Removed Lines]",
          "494: int asprintf(char **ptr, const char *format_string, ...);",
          "498: size_t strlcpy(char *dst, const char *src, size_t siz);",
          "501: size_t strlcat(char *dst, const char *src, size_t siz);",
          "504: ssize_t getline(char **dst, size_t *len, FILE *fp);",
          "505: ssize_t getdelim(char **dst, size_t *len, int delimiter, FILE *fp);",
          "",
          "[Added Lines]",
          "494: int asprintf(char **, const char *, ...);",
          "498: size_t strlcpy(char *, const char *, size_t);",
          "501: size_t strlcat(char *, const char *, size_t);",
          "502: #endif",
          "503: #ifndef HAVE_STRCASESTR",
          "504: char *strcasestr(const char *, const char *);",
          "507: ssize_t getline(char **, size_t *, FILE *);",
          "508: ssize_t getdelim(char **, size_t *, int, FILE *);",
          "",
          "---------------"
        ],
        "src/funcs.c||src/funcs.c": [
          "File: src/funcs.c -> src/funcs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: #include \"file.h\"",
          "29: #ifndef lint",
          "33: #include \"magic.h\"",
          "",
          "[Removed Lines]",
          "30: FILE_RCSID(\"@(#)$File: funcs.c,v 1.63 2013/09/03 08:31:48 christos Exp $\")",
          "",
          "[Added Lines]",
          "30: FILE_RCSID(\"@(#)$File: funcs.c,v 1.64 2013/11/19 23:49:44 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "44: #if defined(HAVE_LIMITS_H)",
          "45: #include <limits.h>",
          "46: #endif",
          "48: #ifndef SIZE_MAX",
          "49: #define SIZE_MAX ((size_t)~0)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "47: #if defined(HAVE_LOCALE_H)",
          "48: #include <locale.h>",
          "49: #endif",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "437: file_replace(struct magic_set *ms, const char *pat, const char *rep)",
          "438: {",
          "439:  regex_t rx;",
          "442:  rc = regcomp(&rx, pat, REG_EXTENDED);",
          "443:  if (rc) {",
          "444:   char errmsg[512];",
          "445:   (void)regerror(rc, &rx, errmsg, sizeof(errmsg));",
          "446:   file_magerror(ms, \"regex error %d, (%s)\", rc, errmsg);",
          "448:  } else {",
          "449:   regmatch_t rm;",
          "450:   int nm = 0;",
          "",
          "[Removed Lines]",
          "440:  int rc;",
          "447:   return -1;",
          "",
          "[Added Lines]",
          "443:  int rc, rv = -1;",
          "445:  (void)setlocale(LC_CTYPE, \"C\");",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "452:    ms->o.buf[rm.rm_so] = '\\0';",
          "453:    if (file_printf(ms, \"%s%s\", rep,",
          "454:        rm.rm_eo != 0 ? ms->o.buf + rm.rm_eo : \"\") == -1)",
          "456:    nm++;",
          "457:   }",
          "458:   regfree(&rx);",
          "460:  }",
          "461: }",
          "",
          "[Removed Lines]",
          "455:     return -1;",
          "459:   return nm;",
          "",
          "[Added Lines]",
          "458:     goto out;",
          "462:   rv = nm;",
          "464: out:",
          "465:  (void)setlocale(LC_CTYPE, \"\");",
          "466:  return rv;",
          "",
          "---------------"
        ],
        "src/readcdf.c||src/readcdf.c": [
          "File: src/readcdf.c -> src/readcdf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: #include \"file.h\"",
          "28: #ifndef lint",
          "30: #endif",
          "32: #include <stdlib.h>",
          "",
          "[Removed Lines]",
          "29: FILE_RCSID(\"@(#)$File: readcdf.c,v 1.34 2013/10/29 18:22:45 christos Exp $\")",
          "",
          "[Added Lines]",
          "29: FILE_RCSID(\"@(#)$File: readcdf.c,v 1.35 2013/10/29 18:30:45 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "34: #include <string.h>",
          "35: #include <time.h>",
          "36: #include <ctype.h>",
          "38: #include \"cdf.h\"",
          "39: #include \"magic.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "37: #if defined(HAVE_LOCALE_H)",
          "38: #include <locale.h>",
          "39: #endif",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "70: cdf_app_to_mime(const char *vbuf, const struct nv *nv)",
          "71: {",
          "72:  size_t i;",
          "74:  for (i = 0; nv[i].pattern != NULL; i++)",
          "77:  return NULL;",
          "78: }",
          "",
          "[Removed Lines]",
          "75:   if (strstr(vbuf, nv[i].pattern) != NULL)",
          "76:    return nv[i].mime;",
          "",
          "[Added Lines]",
          "76:  const char *rv = NULL;",
          "78:  (void)setlocale(LC_CTYPE, \"C\");",
          "80:   if (strcasestr(vbuf, nv[i].pattern) != NULL) {",
          "81:    rv = nv[i].mime;",
          "82:    break;",
          "83:   }",
          "84:  (void)setlocale(LC_CTYPE, \"\");",
          "",
          "---------------"
        ],
        "src/softmagic.c||src/softmagic.c": [
          "File: src/softmagic.c -> src/softmagic.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: #include \"file.h\"",
          "34: #ifndef lint",
          "38: #include \"magic.h\"",
          "",
          "[Removed Lines]",
          "35: FILE_RCSID(\"@(#)$File: softmagic.c,v 1.167 2013/04/22 15:30:11 christos Exp $\")",
          "",
          "[Added Lines]",
          "35: FILE_RCSID(\"@(#)$File: softmagic.c,v 1.168 2013/05/30 15:53:33 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "40: #include <ctype.h>",
          "41: #include <stdlib.h>",
          "42: #include <time.h>",
          "45: private int match(struct magic_set *, struct magic *, uint32_t,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "43: #if defined(HAVE_LOCALE_H)",
          "44: #include <locale.h>",
          "45: #endif",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "337: check_fmt(struct magic_set *ms, struct magic *m)",
          "338: {",
          "339:  regex_t rx;",
          "342:  if (strchr(m->desc, '%') == NULL)",
          "343:   return 0;",
          "345:  rc = regcomp(&rx, \"%[-0-9\\\\.]*s\", REG_EXTENDED|REG_NOSUB);",
          "346:  if (rc) {",
          "347:   char errmsg[512];",
          "348:   (void)regerror(rc, &rx, errmsg, sizeof(errmsg));",
          "349:   file_magerror(ms, \"regex error %d, (%s)\", rc, errmsg);",
          "351:  } else {",
          "352:   rc = regexec(&rx, m->desc, 0, 0, 0);",
          "353:   regfree(&rx);",
          "355:  }",
          "356: }",
          "358: #ifndef HAVE_STRNDUP",
          "",
          "[Removed Lines]",
          "340:  int rc;",
          "350:   return -1;",
          "354:   return !rc;",
          "",
          "[Added Lines]",
          "343:  int rc, rv = -1;",
          "348:  (void)setlocale(LC_CTYPE, \"C\");",
          "357:   rv = !rc;",
          "359:  (void)setlocale(LC_CTYPE, \"\");",
          "360:  return rv;",
          "",
          "---------------"
        ],
        "src/strcasestr.c||src/strcasestr.c": [
          "File: src/strcasestr.c -> src/strcasestr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "35: #if defined(LIBC_SCCS) && !defined(lint)",
          "36: __RCSID(\"$NetBSD: strcasestr.c,v 1.3 2005/11/29 03:12:00 christos Exp $\");",
          "37: __RCSID(\"$NetBSD: strncasecmp.c,v 1.2 2007/06/04 18:19:27 christos Exp $\");",
          "40: #include <assert.h>",
          "41: #include <ctype.h>",
          "42: #include <string.h>",
          "44: static int",
          "45: _strncasecmp(const char *s1, const char *s2, size_t n)",
          "46: {",
          "47:  if (n != 0) {",
          "48:   const unsigned char *us1 = (const unsigned char *)s1,",
          "51:   do {",
          "52:    if (tolower(*us1) != tolower(*us2++))",
          "53:     return tolower(*us1) - tolower(*--us2);",
          "54:    if (*us1++ == '\\0')",
          "55:     break;",
          "56:   } while (--n != 0);",
          "57:  }",
          "58:  return 0;",
          "59: }",
          "64: char *",
          "65: strcasestr(const char *s, const char *find)",
          "66: {",
          "67:  char c, sc;",
          "68:  size_t len;",
          "70:  if ((c = *find++) != 0) {",
          "71:   c = tolower((unsigned char)c);",
          "72:   len = strlen(find);",
          "73:   do {",
          "74:    do {",
          "75:     if ((sc = *s++) == 0)",
          "76:      return (NULL);",
          "77:    } while ((char)tolower((unsigned char)sc) != c);",
          "78:   } while (_strncasecmp(s, find, len) != 0);",
          "79:   s--;",
          "80:  }",
          "81:  return (char *)(intptr_t)(s);",
          "82: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0641e56be1af003aa02c7c6b0184466540637233",
      "candidate_info": {
        "commit_hash": "0641e56be1af003aa02c7c6b0184466540637233",
        "repo": "file/file",
        "commit_url": "https://github.com/file/file/commit/0641e56be1af003aa02c7c6b0184466540637233",
        "files": [
          "src/cdf.c"
        ],
        "message": "Prevent wrap around (Remi Collet at redhat)",
        "before_after_code_files": [
          "src/cdf.c||src/cdf.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/cdf.c||src/cdf.c"
          ],
          "candidate": [
            "src/cdf.c||src/cdf.c"
          ]
        }
      },
      "candidate_diff": {
        "src/cdf.c||src/cdf.c": [
          "File: src/cdf.c -> src/cdf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: #include \"file.h\"",
          "37: #ifndef lint",
          "39: #endif",
          "41: #include <assert.h>",
          "",
          "[Removed Lines]",
          "38: FILE_RCSID(\"@(#)$File: cdf.c,v 1.63 2014/06/09 13:04:37 christos Exp $\")",
          "",
          "[Added Lines]",
          "38: FILE_RCSID(\"@(#)$File: cdf.c,v 1.64 2014/07/24 19:35:39 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "835:   q = (const uint8_t *)(const void *)",
          "836:       ((const char *)(const void *)p + ofs",
          "837:       - 2 * sizeof(uint32_t));",
          "838:   if (q > e) {",
          "839:    DPRINTF((\"Ran of the end %p > %p\\n\", q, e));",
          "840:    goto out;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "838:   if (q < p) {",
          "839:    DPRINTF((\"Wrapped around %p < %p\\n\", q, p));",
          "840:    goto out;",
          "841:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4ac219a350cd13c01d790e48fd636330168a9e85",
      "candidate_info": {
        "commit_hash": "4ac219a350cd13c01d790e48fd636330168a9e85",
        "repo": "file/file",
        "commit_url": "https://github.com/file/file/commit/4ac219a350cd13c01d790e48fd636330168a9e85",
        "files": [
          "src/cdf.c"
        ],
        "message": "Don't treat empty chains as an error (Guy Helmer)",
        "before_after_code_files": [
          "src/cdf.c||src/cdf.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/cdf.c||src/cdf.c"
          ],
          "candidate": [
            "src/cdf.c||src/cdf.c"
          ]
        }
      },
      "candidate_diff": {
        "src/cdf.c||src/cdf.c": [
          "File: src/cdf.c -> src/cdf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: #include \"file.h\"",
          "37: #ifndef lint",
          "39: #endif",
          "41: #include <assert.h>",
          "",
          "[Removed Lines]",
          "38: FILE_RCSID(\"@(#)$File: cdf.c,v 1.66 2014/08/27 06:59:35 christos Exp $\")",
          "",
          "[Added Lines]",
          "38: FILE_RCSID(\"@(#)$File: cdf.c,v 1.67 2014/09/24 19:49:07 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "463:      / sizeof(maxsector));",
          "465:  DPRINTF((\"Chain:\"));",
          "466:  for (j = i = 0; sid >= 0; i++, j++) {",
          "467:   DPRINTF((\" %d\", sid));",
          "468:   if (j >= CDF_LOOP_LIMIT) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "466:  if (sid == CDF_SECID_END_OF_CHAIN) {",
          "468:   DPRINTF((\" empty\\n\"));",
          "469:   return 0;",
          "470:  }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "36fadd29849b8087af9f4586f89dbf74ea45be67",
      "candidate_info": {
        "commit_hash": "36fadd29849b8087af9f4586f89dbf74ea45be67",
        "repo": "file/file",
        "commit_url": "https://github.com/file/file/commit/36fadd29849b8087af9f4586f89dbf74ea45be67",
        "files": [
          "src/cdf.c"
        ],
        "message": "Use the proper sector size when checking stream offsets (Francisco Alonso and Jan Kaluza at RedHat)",
        "before_after_code_files": [
          "src/cdf.c||src/cdf.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/cdf.c||src/cdf.c"
          ],
          "candidate": [
            "src/cdf.c||src/cdf.c"
          ]
        }
      },
      "candidate_diff": {
        "src/cdf.c||src/cdf.c": [
          "File: src/cdf.c -> src/cdf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: #include \"file.h\"",
          "37: #ifndef lint",
          "39: #endif",
          "41: #include <assert.h>",
          "",
          "[Removed Lines]",
          "38: FILE_RCSID(\"@(#)$File: cdf.c,v 1.60 2014/05/21 13:04:38 christos Exp $\")",
          "",
          "[Added Lines]",
          "38: FILE_RCSID(\"@(#)$File: cdf.c,v 1.61 2014/06/04 17:23:19 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "267: {",
          "268:  const char *b = (const char *)sst->sst_tab;",
          "269:  const char *e = ((const char *)p) + tail;",
          "270:  (void)&line;",
          "272:   return 0;",
          "273:  DPRINTF((\"%d: offset begin %p < end %p || %\" SIZE_T_FORMAT \"u\"",
          "274:      \" > %\" SIZE_T_FORMAT \"u [%\" SIZE_T_FORMAT \"u %\"",
          "275:      SIZE_T_FORMAT \"u]\\n\", line, b, e, (size_t)(e - b),",
          "277:  errno = EFTYPE;",
          "278:  return -1;",
          "279: }",
          "",
          "[Removed Lines]",
          "271:  if (e >= b && (size_t)(e - b) <= CDF_SEC_SIZE(h) * sst->sst_len)",
          "276:      CDF_SEC_SIZE(h) * sst->sst_len, CDF_SEC_SIZE(h), sst->sst_len));",
          "",
          "[Added Lines]",
          "270:  size_t ss = sst->sst_dirlen < h->h_min_size_standard_stream ?",
          "271:      CDF_SHORT_SEC_SIZE(h) : CDF_SEC_SIZE(h);",
          "273:  if (e >= b && (size_t)(e - b) <= ss * sst->sst_len)",
          "278:      ss * sst->sst_len, ss, sst->sst_len));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "961f3849dd0ed90dd658a7126cc0f1c91d6e4bcf",
      "candidate_info": {
        "commit_hash": "961f3849dd0ed90dd658a7126cc0f1c91d6e4bcf",
        "repo": "file/file",
        "commit_url": "https://github.com/file/file/commit/961f3849dd0ed90dd658a7126cc0f1c91d6e4bcf",
        "files": [
          "src/cdf.c"
        ],
        "message": "Roman I Khimov: If cdf_count_chain() is called with sid < 0, then we end up returning zero length, which in turn leads to calloc() calls for 0 bytes in cdf_read_long_sector_chain(), cdf_read_short_sector_chain() and cdf_read_ssat(). Depending on calloc() implementation we can end up returning -1 or 0 from those. As negative sid is probably wrong case anyway, it might be better to always return -1. Issue found by clang static analysis.",
        "before_after_code_files": [
          "src/cdf.c||src/cdf.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/cdf.c||src/cdf.c"
          ],
          "candidate": [
            "src/cdf.c||src/cdf.c"
          ]
        }
      },
      "candidate_diff": {
        "src/cdf.c||src/cdf.c": [
          "File: src/cdf.c -> src/cdf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: #include \"file.h\"",
          "37: #ifndef lint",
          "39: #endif",
          "41: #include <assert.h>",
          "",
          "[Removed Lines]",
          "38: FILE_RCSID(\"@(#)$File: cdf.c,v 1.56 2014/05/05 16:11:21 christos Exp $\")",
          "",
          "[Added Lines]",
          "38: FILE_RCSID(\"@(#)$File: cdf.c,v 1.57 2014/05/06 18:20:39 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "472:   }",
          "473:   sid = CDF_TOLE4((uint32_t)sat->sat_tab[sid]);",
          "474:  }",
          "475:  DPRINTF((\"\\n\"));",
          "476:  return i;",
          "477: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "475:  if (i == 0) {",
          "476:   DPRINTF((\" none, sid: %d\\n\", sid));",
          "477:   return (size_t)-1;",
          "479:  }",
          "",
          "---------------"
        ]
      }
    }
  ]
}