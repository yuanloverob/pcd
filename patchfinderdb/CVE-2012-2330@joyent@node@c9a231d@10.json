{
  "cve_id": "CVE-2012-2330",
  "cve_desc": "The Update method in src/node_http_parser.cc in Node.js before 0.6.17 and 0.7 before 0.7.8 does not properly check the length of a string, which allows remote attackers to obtain sensitive information (request header contents) and possibly spoof HTTP headers via a zero length string.",
  "repo": "joyent/node",
  "patch_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
  "patch_info": {
    "commit_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
    "repo": "joyent/node",
    "commit_url": "https://github.com/joyent/node/commit/c9a231d",
    "files": [
      "src/node_http_parser.cc"
    ],
    "message": "typo in node_http_parser",
    "before_after_code_files": [
      "src/node_http_parser.cc||src/node_http_parser.cc"
    ]
  },
  "patch_diff": {
    "src/node_http_parser.cc||src/node_http_parser.cc": [
      "File: src/node_http_parser.cc -> src/node_http_parser.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "191:   void Update(const char* str, size_t size) {",
      "192:     if (str_ == NULL)",
      "193:       str_ = str;",
      "197:       char* s = new char[size_ + size];",
      "",
      "[Removed Lines]",
      "194:     else if (on_heap_ || str_ + size != str) {",
      "",
      "[Added Lines]",
      "194:     else if (on_heap_ || str_ + size_ != str) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b037c16f55c3f03a52f85d6ba0a748eb11b7ec21",
      "candidate_info": {
        "commit_hash": "b037c16f55c3f03a52f85d6ba0a748eb11b7ec21",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/b037c16f55c3f03a52f85d6ba0a748eb11b7ec21",
        "files": [
          "test/simple/test-sys.js"
        ],
        "message": "test: fix test-sys.js fails if the time zone is not CET\n\nFixes #2423.",
        "before_after_code_files": [
          "test/simple/test-sys.js||test/simple/test-sys.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/simple/test-sys.js||test/simple/test-sys.js": [
          "File: test/simple/test-sys.js -> test/simple/test-sys.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: assert.equal('undefined', common.inspect(undefined));",
          "32: assert.equal('null', common.inspect(null));",
          "33: assert.equal('/foo(bar\\\\n)?/gi', common.inspect(/foo(bar\\n)?/gi));",
          "35:              common.inspect(new Date('Sun, 14 Feb 2010 11:48:40 GMT')));",
          "37: assert.equal(\"'\\\\n\\\\u0001'\", common.inspect('\\n\\u0001'));",
          "",
          "[Removed Lines]",
          "34: assert.equal('Sun Feb 14 2010 12:48:40 GMT+0100 (CET)',",
          "",
          "[Added Lines]",
          "34: assert.equal(new Date('2010-02-14T12:48:40+01:00').toString(),",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "34fc97880f5547314defce475a7d884726bd0cd0",
      "candidate_info": {
        "commit_hash": "34fc97880f5547314defce475a7d884726bd0cd0",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/34fc97880f5547314defce475a7d884726bd0cd0",
        "files": [
          "src/node.cc",
          "src/node_signal_watcher.cc",
          "src/node_signal_watcher.h"
        ],
        "message": "Delete the old node_signal_watcher code",
        "before_after_code_files": [
          "src/node.cc||src/node.cc",
          "src/node_signal_watcher.cc||src/node_signal_watcher.cc",
          "src/node_signal_watcher.h||src/node_signal_watcher.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/node.cc||src/node.cc": [
          "File: src/node.cc -> src/node.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "68: #endif",
          "69: #include \"node_file.h\"",
          "70: #include \"node_http_parser.h\"",
          "74: #include \"node_constants.h\"",
          "75: #include \"node_javascript.h\"",
          "76: #include \"node_version.h\"",
          "",
          "[Removed Lines]",
          "71: #ifdef __POSIX__",
          "72: # include \"node_signal_watcher.h\"",
          "73: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/node_signal_watcher.cc||src/node_signal_watcher.cc": [
          "File: src/node_signal_watcher.cc -> src/node_signal_watcher.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/node_signal_watcher.h||src/node_signal_watcher.h": [
          "File: src/node_signal_watcher.h -> src/node_signal_watcher.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3d34590fbacafe0c99ab47ddf34b701f6ab3afad",
      "candidate_info": {
        "commit_hash": "3d34590fbacafe0c99ab47ddf34b701f6ab3afad",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/3d34590fbacafe0c99ab47ddf34b701f6ab3afad",
        "files": [
          "src/node_version.h"
        ],
        "message": "Now working on v0.8.5",
        "before_after_code_files": [
          "src/node_version.h||src/node_version.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/node_version.h||src/node_version.h": [
          "File: src/node_version.h -> src/node_version.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: #define NODE_MAJOR_VERSION 0",
          "26: #define NODE_MINOR_VERSION 8",
          "30: #ifndef NODE_STRINGIFY",
          "31: #define NODE_STRINGIFY(n) NODE_STRINGIFY_HELPER(n)",
          "",
          "[Removed Lines]",
          "27: #define NODE_PATCH_VERSION 4",
          "28: #define NODE_VERSION_IS_RELEASE 1",
          "",
          "[Added Lines]",
          "27: #define NODE_PATCH_VERSION 5",
          "28: #define NODE_VERSION_IS_RELEASE 0",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8cca30f31b2b71812e340692f2892fd5bf9df5db",
      "candidate_info": {
        "commit_hash": "8cca30f31b2b71812e340692f2892fd5bf9df5db",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/8cca30f31b2b71812e340692f2892fd5bf9df5db",
        "files": [
          "src/node_zlib.cc"
        ],
        "message": "zlib binding cleanup\n\n* Add assert to prevent parallel writes\n* Embed request object instead of using new/delete\n* Remove unnecessary WorkReqWrap in favor of uv_work_t\n* Use container_of instead of req->data\n\nAlong with 2d8af39accc6e1a863aa60ed80289508f3df50e8 and\n0ad2717fd88e5ddd28a1c245c78b37bfe9aa4197, this should Fix #2504.",
        "before_after_code_files": [
          "src/node_zlib.cc||src/node_zlib.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/node_zlib.cc||src/node_zlib.cc": [
          "File: src/node_zlib.cc -> src/node_zlib.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: #include <node.h>",
          "31: #include <node_buffer.h>",
          "36: namespace node {",
          "37: using namespace v8;",
          "42: static Persistent<String> callback_sym;",
          "",
          "[Removed Lines]",
          "32: #include <req_wrap.h>",
          "40: typedef ReqWrap<uv_work_t> WorkReqWrap;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "83:     ZCtx<mode> *ctx = ObjectWrap::Unwrap< ZCtx<mode> >(args.This());",
          "84:     assert(ctx->init_done_ && \"write before init\");",
          "86:     unsigned int flush = args[0]->Uint32Value();",
          "87:     Bytef *in;",
          "88:     Bytef *out;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "82:     assert(!ctx->write_in_progress_ && \"write already in progress\");",
          "83:     ctx->write_in_progress_ = true;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "112:     assert(out_off + out_len <= Buffer::Length(out_buf));",
          "113:     out = reinterpret_cast<Bytef *>(Buffer::Data(out_buf) + out_off);",
          "118:     ctx->strm_.avail_in = in_len;",
          "119:     ctx->strm_.next_in = &(*in);",
          "120:     ctx->strm_.avail_out = out_len;",
          "",
          "[Removed Lines]",
          "115:     WorkReqWrap *req_wrap = new WorkReqWrap();",
          "117:     req_wrap->data_ = ctx;",
          "",
          "[Added Lines]",
          "115:     uv_work_t* work_req = &(ctx->work_req_);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "125:     ctx->chunk_size_ = out_len;",
          "131:     uv_queue_work(uv_default_loop(),",
          "132:                   work_req,",
          "133:                   ZCtx<mode>::Process,",
          "134:                   ZCtx<mode>::After);",
          "137:     ctx->Ref();",
          "140:   }",
          "",
          "[Removed Lines]",
          "128:     uv_work_t* work_req = &req_wrap->req_;",
          "129:     work_req->data = req_wrap;",
          "136:     req_wrap->Dispatched();",
          "139:     return req_wrap->object_;",
          "",
          "[Added Lines]",
          "133:     return ctx->handle_;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "147:   static void",
          "148:   Process(uv_work_t* work_req) {",
          "",
          "[Removed Lines]",
          "149:     WorkReqWrap *req_wrap = reinterpret_cast<WorkReqWrap *>(work_req->data);",
          "150:     ZCtx<mode> *ctx = (ZCtx<mode> *)req_wrap->data_;",
          "",
          "[Added Lines]",
          "143:     ZCtx<mode> *ctx = container_of(work_req, ZCtx<mode>, work_req_);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "179:   static void",
          "180:   After(uv_work_t* work_req) {",
          "181:     HandleScope scope;",
          "184:     Local<Integer> avail_out = Integer::New(ctx->strm_.avail_out);",
          "185:     Local<Integer> avail_in = Integer::New(ctx->strm_.avail_in);",
          "189:            \"Invalid callback\");",
          "190:     Local<Value> args[2] = { avail_in, avail_out };",
          "195:     ctx->Unref();",
          "196:   }",
          "",
          "[Removed Lines]",
          "182:     WorkReqWrap *req_wrap = reinterpret_cast<WorkReqWrap *>(work_req->data);",
          "183:     ZCtx<mode> *ctx = (ZCtx<mode> *)req_wrap->data_;",
          "188:     assert(req_wrap->object_->Get(callback_sym)->IsFunction() &&",
          "191:     MakeCallback(req_wrap->object_, \"callback\", 2, args);",
          "194:     delete req_wrap;",
          "",
          "[Added Lines]",
          "175:     ZCtx<mode> *ctx = container_of(work_req, ZCtx<mode>, work_req_);",
          "179:     ctx->write_in_progress_ = false;",
          "182:     assert(ctx->handle_->Get(callback_sym)->IsFunction() &&",
          "185:     MakeCallback(ctx->handle_, \"callback\", 2, args);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "284:         assert(0 && \"wtf?\");",
          "285:     }",
          "287:     ctx->init_done_ = true;",
          "288:     assert(err == Z_OK);",
          "289:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "279:     ctx->write_in_progress_ = false;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "301:   int flush_;",
          "303:   int chunk_size_;",
          "304: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "298:   bool write_in_progress_;",
          "300:   uv_work_t work_req_;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2df81c57f6e40645478bdbaf20c668a6bdd277a4",
      "candidate_info": {
        "commit_hash": "2df81c57f6e40645478bdbaf20c668a6bdd277a4",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/2df81c57f6e40645478bdbaf20c668a6bdd277a4",
        "files": [
          "src/node.cc",
          "src/node_vars.cc",
          "src/node_vars.h"
        ],
        "message": "Remove per-process globals from per-thread context.",
        "before_after_code_files": [
          "src/node.cc||src/node.cc",
          "src/node_vars.cc||src/node_vars.cc",
          "src/node_vars.h||src/node_vars.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/node.cc||src/node.cc": [
          "File: src/node.cc -> src/node.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "98: #define check_tick_watcher NODE_VAR(check_tick_watcher)",
          "99: #define code_symbol NODE_VAR(code_symbol)",
          "102: #define emit_symbol NODE_VAR(emit_symbol)",
          "103: #define errno_symbol NODE_VAR(errno_symbol)",
          "104: #define errpath_symbol NODE_VAR(errpath_symbol)",
          "106: #define gc_check NODE_VAR(gc_check)",
          "107: #define gc_idle NODE_VAR(gc_idle)",
          "108: #define gc_timer NODE_VAR(gc_timer)",
          "",
          "[Removed Lines]",
          "100: #define debug_port NODE_VAR(debug_port)",
          "101: #define debug_wait_connect NODE_VAR(debug_wait_connect)",
          "105: #define eval_string NODE_VAR(eval_string)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "110: #define heap_total_symbol NODE_VAR(heap_total_symbol)",
          "111: #define heap_used_symbol NODE_VAR(heap_used_symbol)",
          "112: #define listeners_symbol NODE_VAR(listeners_symbol)",
          "114: #define need_tick_cb NODE_VAR(need_tick_cb)",
          "116: #define prepare_tick_watcher NODE_VAR(prepare_tick_watcher)",
          "118: #define process NODE_VAR(process)",
          "119: #define rss_symbol NODE_VAR(rss_symbol)",
          "120: #define syscall_symbol NODE_VAR(syscall_symbol)",
          "",
          "[Removed Lines]",
          "113: #define max_stack_size NODE_VAR(max_stack_size)",
          "115: #define option_end_index NODE_VAR(option_end_index)",
          "117: #define print_eval NODE_VAR(print_eval)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "123: #define tick_time_head NODE_VAR(tick_time_head)",
          "124: #define tick_times NODE_VAR(tick_times)",
          "125: #define uncaught_exception_symbol NODE_VAR(uncaught_exception_symbol)",
          "127: #define use_npn NODE_VAR(use_npn)",
          "128: #define use_sni NODE_VAR(use_sni)",
          "129: #define uncaught_exception_counter NODE_VAR(uncaught_exception_counter)",
          "",
          "[Removed Lines]",
          "126: #define use_debug_agent NODE_VAR(use_debug_agent)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "137: namespace node {",
          "145: static void CheckStatus(uv_timer_t* watcher, int status);",
          "",
          "[Removed Lines]",
          "141: #define TICK_TIME(n) tick_times[(tick_time_head - (n)) % RPM_SAMPLES]",
          "",
          "[Added Lines]",
          "132: static int option_end_index;",
          "133: static unsigned long max_stack_size;",
          "134: static unsigned short debug_port = 5858;",
          "135: static bool debug_wait_connect;",
          "136: static bool use_debug_agent;",
          "137: static const char* eval_string;",
          "138: static bool print_eval;",
          "142: #define TICK_TIME(n) tick_times[(tick_time_head - (n)) % RPM_SAMPLES]",
          "",
          "---------------"
        ],
        "src/node_vars.cc||src/node_vars.cc": [
          "File: src/node_vars.cc -> src/node_vars.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "13: void globals_init(struct globals* g) {",
          "14:   memset(g, 0, sizeof(struct globals));",
          "17: #ifdef OPENSSL_NPN_NEGOTIATED",
          "18:   g->use_npn = true;",
          "",
          "[Removed Lines]",
          "15:   g->debug_port = 5858;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/node_vars.h||src/node_vars.h": [
          "File: src/node_vars.h -> src/node_vars.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "31:   v8::Persistent<v8::String> listeners_symbol;",
          "32:   v8::Persistent<v8::String> uncaught_exception_symbol;",
          "33:   v8::Persistent<v8::String> emit_symbol;",
          "41:   uv_check_t check_tick_watcher;",
          "42:   uv_prepare_t prepare_tick_watcher;",
          "43:   uv_idle_t tick_spinner;",
          "",
          "[Removed Lines]",
          "34:   bool print_eval;",
          "35:   char *eval_string;",
          "36:   int option_end_index;",
          "37:   bool use_debug_agent;",
          "38:   bool debug_wait_connect;",
          "39:   int debug_port;",
          "40:   int max_stack_size;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}