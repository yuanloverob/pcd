{
  "cve_id": "CVE-2021-20223",
  "cve_desc": "",
  "repo": "sqlite/sqlite",
  "patch_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
  "patch_info": {
    "commit_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "files": [
      "ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Prevent fts5 tokenizer unicode61 from considering '\\0' to be a token characters, even if other characters of class \"Cc\" are.\n\nFossilOrigin-Name: b7b7bde9b7a03665e3691c6d51118965f216d2dfb1617f138b9f9e60e418ed2f",
    "before_after_code_files": [
      "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
      "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c"
    ],
    "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test": [
      "File: ext/fts5/test/fts5tok1.test -> ext/fts5/test/fts5tok1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:   SELECT * FROM t4;",
      "112: } {1 {SQL logic error}}",
      "115: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114: #-------------------------------------------------------------------------",
      "115: # Embedded 0x00 characters.",
      "116: #",
      "117: reset_db",
      "118: do_execsql_test 3.1.0 {",
      "119:   CREATE VIRTUAL TABLE t1 USING fts5(z);",
      "120:   CREATE VIRTUAL TABLE tt USING fts5vocab(t1, 'instance');",
      "121:   INSERT INTO t1 VALUES('abc' || char(0) || 'def');",
      "122:   SELECT * FROM tt;",
      "123: } { abc 1 z 0 def 1 z 1 }",
      "124: do_execsql_test 3.1.1 {",
      "125:   SELECT hex(z) FROM t1;",
      "126: } {61626300646566}",
      "127: do_execsql_test 3.1.2 {",
      "128:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "129: } {}",
      "131: do_execsql_test 3.2.0 {",
      "132:   CREATE VIRTUAL TABLE t2 USING fts5(z,",
      "133:       tokenize=\"unicode61 categories 'L* N* Co Cc'\"",
      "134:   );",
      "135:   CREATE VIRTUAL TABLE tu USING fts5vocab(t2, 'instance');",
      "137:   INSERT INTO t2 VALUES('abc' || char(0) || 'def');",
      "138:   SELECT * FROM tu;",
      "139: } { abc 1 z 0 def 1 z 1 }",
      "141: do_execsql_test 3.2.1 {",
      "142:   SELECT hex(z) FROM t1;",
      "143: } {61626300646566}",
      "145: do_execsql_test 3.2.2 {",
      "146:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "147: } {}",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 0e7e113d9f2c929c1f8a85e2cfad8e2e60f0e8770212b5e5320fb2a2c42911f8",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "12a6a1eaf90acee120967cde8d63041550b5c6f9",
      "candidate_info": {
        "commit_hash": "12a6a1eaf90acee120967cde8d63041550b5c6f9",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/12a6a1eaf90acee120967cde8d63041550b5c6f9",
        "files": [
          "ext/fts5/fts5_main.c",
          "ext/fts5/test/fts5trigram.test",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Fix a segfault caused by running \"column LIKE NULL\" against an fts5 table using the trigram tokenizer. Fix for [e33ee62575fc22].\n\nFossilOrigin-Name: 6e72a08de764077f2bba6f7e3b99ea29001941671a971f2ccf7ceeb9c682fb1a",
        "before_after_code_files": [
          "ext/fts5/fts5_main.c||ext/fts5/fts5_main.c",
          "ext/fts5/test/fts5trigram.test||ext/fts5/test/fts5trigram.test",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts5/fts5_main.c||ext/fts5/fts5_main.c": [
          "File: ext/fts5/fts5_main.c -> ext/fts5/fts5_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1270:           iCol = iCol*10 + (idxStr[iIdxStr]-'0');",
          "1271:           iIdxStr++;",
          "1272:         }while( idxStr[iIdxStr]>='0' && idxStr[iIdxStr]<='9' );",
          "1274:         if( rc==SQLITE_OK ){",
          "1275:           rc = sqlite3Fts5ExprAnd(&pCsr->pExpr, pExpr);",
          "1276:           pExpr = 0;",
          "",
          "[Removed Lines]",
          "1273:         rc = sqlite3Fts5ExprPattern(pConfig, iCol, zText, &pExpr);",
          "",
          "[Added Lines]",
          "1273:         if( zText ){",
          "1274:           rc = sqlite3Fts5ExprPattern(pConfig, iCol, zText, &pExpr);",
          "1275:         }",
          "",
          "---------------"
        ],
        "ext/fts5/test/fts5trigram.test||ext/fts5/test/fts5trigram.test": [
          "File: ext/fts5/test/fts5trigram.test -> ext/fts5/test/fts5trigram.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "117:   } $res",
          "118: }",
          "120: #-------------------------------------------------------------------------",
          "121: reset_db",
          "122: do_catchsql_test 3.1 {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "120: do_execsql_test 2.3.null.1 {",
          "121:   SELECT rowid FROM t1 WHERE y LIKE NULL",
          "122: }",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: b1d048748c054575425a4bebf0c5d09962f9329d5ce6a978cf54e508b238584c",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "08b920866073679ca4c22b184240dee27404cb08",
      "candidate_info": {
        "commit_hash": "08b920866073679ca4c22b184240dee27404cb08",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/08b920866073679ca4c22b184240dee27404cb08",
        "files": [
          "ext/fts3/fts3.c",
          "ext/misc/json1.c",
          "ext/misc/normalize.c",
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "src/fkey.c",
          "src/insert.c",
          "src/main.c",
          "src/printf.c",
          "src/resolve.c",
          "src/sqliteInt.h",
          "src/status.c",
          "src/tokenize.c",
          "src/vdbe.c",
          "src/vdbeapi.c",
          "src/vdbeaux.c",
          "src/window.c"
        ],
        "message": "Fix harmless compiler warnings that surface in newer versions of GCC.\n\nFossilOrigin-Name: 9d670a318381f219b467653f5f9539097808b887ae37291ce13be462dedfb18d",
        "before_after_code_files": [
          "ext/fts3/fts3.c||ext/fts3/fts3.c",
          "ext/misc/json1.c||ext/misc/json1.c",
          "ext/misc/normalize.c||ext/misc/normalize.c",
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "src/fkey.c||src/fkey.c",
          "src/insert.c||src/insert.c",
          "src/main.c||src/main.c",
          "src/printf.c||src/printf.c",
          "src/resolve.c||src/resolve.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/status.c||src/status.c",
          "src/tokenize.c||src/tokenize.c",
          "src/vdbe.c||src/vdbe.c",
          "src/vdbeapi.c||src/vdbeapi.c",
          "src/vdbeaux.c||src/vdbeaux.c",
          "src/window.c||src/window.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/fts3.c||ext/fts3/fts3.c": [
          "File: ext/fts3/fts3.c -> ext/fts3/fts3.c"
        ],
        "ext/misc/json1.c||ext/misc/json1.c": [
          "File: ext/misc/json1.c -> ext/misc/json1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "42: # define SMALLEST_INT64 (((sqlite3_int64)-1) - LARGEST_INT64)",
          "43: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "45: #ifndef deliberate_fall_through",
          "46: # define deliberate_fall_through",
          "47: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "601:       sqlite3_result_int64(pCtx, i);",
          "602:       int_done:",
          "603:       break;",
          "605:     }",
          "606:     case JSON_REAL: {",
          "607:       double r;",
          "",
          "[Removed Lines]",
          "604:       int_as_real: /* fall through to real */;",
          "",
          "[Added Lines]",
          "608:       int_as_real: i=0; /* no break */ deliberate_fall_through",
          "",
          "---------------"
        ],
        "ext/misc/normalize.c||ext/misc/normalize.c": [
          "File: ext/misc/normalize.c -> ext/misc/normalize.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "286: #define TK_VARIABLE TK_LITERAL",
          "287: #define TK_BLOB     TK_LITERAL",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "290: #if !defined(deliberate_fall_through) && defined(__GCC__) && __GCC__>=7",
          "291: # define deliberate_fall_through __attribute__((fallthrough));",
          "292: #else",
          "293: # define deliberate_fall_through",
          "294: #endif",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 1b89d3931e368a66be5075bdf49eedd3839591ee268e3ac293040b5bf7639746",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c"
        ],
        "src/fkey.c||src/fkey.c": [
          "File: src/fkey.c -> src/fkey.c"
        ],
        "src/insert.c||src/insert.c": [
          "File: src/insert.c -> src/insert.c"
        ],
        "src/main.c||src/main.c": [
          "File: src/main.c -> src/main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1202:   }",
          "1203:   sqlite3_mutex_enter(db->mutex);",
          "1204:   if( db->mTrace & SQLITE_TRACE_CLOSE ){",
          "1206:   }",
          "",
          "[Removed Lines]",
          "1205:     db->xTrace(SQLITE_TRACE_CLOSE, db->pTraceArg, db, 0);",
          "",
          "[Added Lines]",
          "1205:     db->trace.xV2(SQLITE_TRACE_CLOSE, db->pTraceArg, db, 0);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2091:   sqlite3_mutex_enter(db->mutex);",
          "2092:   pOld = db->pTraceArg;",
          "2093:   db->mTrace = xTrace ? SQLITE_TRACE_LEGACY : 0;",
          "2095:   db->pTraceArg = pArg;",
          "2096:   sqlite3_mutex_leave(db->mutex);",
          "2097:   return pOld;",
          "",
          "[Removed Lines]",
          "2094:   db->xTrace = (int(*)(u32,void*,void*,void*))xTrace;",
          "",
          "[Added Lines]",
          "2094:   db->trace.xLegacy = xTrace;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2115:   if( mTrace==0 ) xTrace = 0;",
          "2116:   if( xTrace==0 ) mTrace = 0;",
          "2117:   db->mTrace = mTrace;",
          "2119:   db->pTraceArg = pArg;",
          "2120:   sqlite3_mutex_leave(db->mutex);",
          "2121:   return SQLITE_OK;",
          "",
          "[Removed Lines]",
          "2118:   db->xTrace = xTrace;",
          "",
          "[Added Lines]",
          "2118:   db->trace.xV2 = xTrace;",
          "",
          "---------------"
        ],
        "src/printf.c||src/printf.c": [
          "File: src/printf.c -> src/printf.c"
        ],
        "src/resolve.c||src/resolve.c": [
          "File: src/resolve.c -> src/resolve.c"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "128: # define _BSD_SOURCE",
          "129: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "134: #if GCC_VERSION>=7000000",
          "135: # define deliberate_fall_through __attribute__((fallthrough));",
          "136: #else",
          "137: # define deliberate_fall_through",
          "138: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1049: #define SQLITE_DYNAMIC   ((sqlite3_destructor_type)sqlite3MallocSize)",
          "",
          "[Added Lines]",
          "1058: #define SQLITE_DYNAMIC   ((sqlite3_destructor_type)sqlite3OomFault)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1502: #ifndef SQLITE_OMIT_DEPRECATED",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1509:   union {",
          "1512:   } trace;",
          "",
          "---------------"
        ],
        "src/status.c||src/status.c": [
          "File: src/status.c -> src/status.c"
        ],
        "src/tokenize.c||src/tokenize.c": [
          "File: src/tokenize.c -> src/tokenize.c"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1514:   if( db->mallocFailed ) goto no_mem;",
          "1516:   if( db->mTrace & SQLITE_TRACE_ROW ){",
          "1518:   }",
          "",
          "[Removed Lines]",
          "1517:     db->xTrace(SQLITE_TRACE_ROW, db->pTraceArg, p, 0);",
          "",
          "[Added Lines]",
          "1519:     db->trace.xV2(SQLITE_TRACE_ROW, db->pTraceArg, p, 0);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "7774:   ){",
          "7775: #ifndef SQLITE_OMIT_DEPRECATED",
          "7776:     if( db->mTrace & SQLITE_TRACE_LEGACY ){",
          "7778:       char *z = sqlite3VdbeExpandSql(p, zTrace);",
          "7780:       sqlite3_free(z);",
          "7781:     }else",
          "7782: #endif",
          "7783:     if( db->nVdbeExec>1 ){",
          "7784:       char *z = sqlite3MPrintf(db, \"-- %s\", zTrace);",
          "7786:       sqlite3DbFree(db, z);",
          "7787:     }else{",
          "7789:     }",
          "7790:   }",
          "7791: #ifdef SQLITE_USE_FCNTL_TRACE",
          "",
          "[Removed Lines]",
          "7777:       void (*x)(void*,const char*) = (void(*)(void*,const char*))db->xTrace;",
          "7779:       x(db->pTraceArg, z);",
          "7785:       (void)db->xTrace(SQLITE_TRACE_STMT, db->pTraceArg, p, z);",
          "7788:       (void)db->xTrace(SQLITE_TRACE_STMT, db->pTraceArg, p, zTrace);",
          "",
          "[Added Lines]",
          "7784:       db->trace.xLegacy(db->pTraceArg, z);",
          "7790:       (void)db->trace.xV2(SQLITE_TRACE_STMT, db->pTraceArg, p, z);",
          "7793:       (void)db->trace.xV2(SQLITE_TRACE_STMT, db->pTraceArg, p, zTrace);",
          "",
          "---------------"
        ],
        "src/vdbeapi.c||src/vdbeapi.c": [
          "File: src/vdbeapi.c -> src/vdbeapi.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "73:   }",
          "74: #endif",
          "75:   if( db->mTrace & SQLITE_TRACE_PROFILE ){",
          "77:   }",
          "78:   p->startTime = 0;",
          "79: }",
          "",
          "[Removed Lines]",
          "76:     db->xTrace(SQLITE_TRACE_PROFILE, db->pTraceArg, p, (void*)&iElapse);",
          "",
          "[Added Lines]",
          "76:     db->trace.xV2(SQLITE_TRACE_PROFILE, db->pTraceArg, p, (void*)&iElapse);",
          "",
          "---------------"
        ],
        "src/vdbeaux.c||src/vdbeaux.c": [
          "File: src/vdbeaux.c -> src/vdbeaux.c"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c"
        ]
      }
    },
    {
      "candidate_hash": "13d795026705020e58603a4005c99ad0fbfb73b2",
      "candidate_info": {
        "commit_hash": "13d795026705020e58603a4005c99ad0fbfb73b2",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/13d795026705020e58603a4005c99ad0fbfb73b2",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "src/vdbe.c",
          "src/vdbe.h",
          "src/vdbeaux.c",
          "test/update.test"
        ],
        "message": "Enhance the sqlite3VdbeMemAboutToChange() shallow-copy validation mechanism by adding the new OP_ReleaseReg opcode to tell MemAboutToChange() that a range of registers is no longer needed so that the source register can be freely changed.  This is a change to debugging and test builds only and does not impact release builds.  Fix for ticket [c62c5e58524b204d] and [5ad2aa6921faa1ee].  The previous fix to ticket [5ad2aa6921faa1ee] is backed out by this change since this change is a better fix.\n\nFossilOrigin-Name: 36fdeb4f0a66970a35de688b617f90899c89cfdfab659f864df99aa7ebf854ea",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "src/vdbe.c||src/vdbe.c",
          "src/vdbe.h||src/vdbe.h",
          "src/vdbeaux.c||src/vdbeaux.c",
          "test/update.test||test/update.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 9ab985a9c8160b905730678f40ed440a246cdec549c798bafefaed5abbc0437f",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3680:           }else",
          "3682:           if( pCol->affinity==SQLITE_AFF_REAL ){",
          "3684:             sqlite3VdbeAddOp1(v, OP_RealAffinity, target);",
          "3685:             return target;",
          "3686:           }else{",
          "",
          "[Removed Lines]",
          "3683:             sqlite3VdbeAddOp2(v, OP_Copy, iSrc, target);",
          "",
          "[Added Lines]",
          "3683:             sqlite3VdbeAddOp2(v, OP_SCopy, iSrc, target);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4065:         sqlite3VdbeAddFunctionCall(pParse, constMask, r1, target, nFarg,",
          "4066:                                    pDef, pExpr->op2);",
          "4067:       }",
          "4070:       }",
          "4071:       return target;",
          "4072:     }",
          "",
          "[Removed Lines]",
          "4068:       if( nFarg && constMask==0 ){",
          "4069:         sqlite3ReleaseTempRange(pParse, r1, nFarg);",
          "",
          "[Added Lines]",
          "4068:       if( nFarg ){",
          "4069:         if( constMask==0 ){",
          "4070:           sqlite3ReleaseTempRange(pParse, r1, nFarg);",
          "4071:         }else{",
          "4072:           sqlite3VdbeReleaseRegisters(pParse, r1, nFarg, constMask);",
          "4073:         }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "5709: void sqlite3ReleaseTempReg(Parse *pParse, int iReg){",
          "5712:   }",
          "5713: }",
          "",
          "[Removed Lines]",
          "5710:   if( iReg && pParse->nTempReg<ArraySize(pParse->aTempReg) ){",
          "5711:     pParse->aTempReg[pParse->nTempReg++] = iReg;",
          "",
          "[Added Lines]",
          "5714:   if( iReg ){",
          "5715:     sqlite3VdbeReleaseRegisters(pParse, iReg, 1, 0);",
          "5716:     if( pParse->nTempReg<ArraySize(pParse->aTempReg) ){",
          "5717:       pParse->aTempReg[pParse->nTempReg++] = iReg;",
          "5718:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "5734:     sqlite3ReleaseTempReg(pParse, iReg);",
          "5735:     return;",
          "5736:   }",
          "5737:   if( nReg>pParse->nRangeReg ){",
          "5738:     pParse->nRangeReg = nReg;",
          "5739:     pParse->iRangeReg = iReg;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5744:   sqlite3VdbeReleaseRegisters(pParse, iReg, nReg, 0);",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2143:   VdbeBranchTaken(iCompare!=0, 2);",
          "2144:   if( iCompare!=0 ) goto jump_to_p2;",
          "2145:   break;",
          "",
          "[Removed Lines]",
          "2140:   assert( pOp>aOp );",
          "2141:   assert( pOp[-1].opcode==OP_Lt || pOp[-1].opcode==OP_Gt );",
          "2142:   assert( pOp[-1].p5 & SQLITE_STOREP2 );",
          "",
          "[Added Lines]",
          "2146: #ifdef SQLITE_DEBUG",
          "2150:   int iAddr;",
          "2151:   for(iAddr = (int)(pOp - aOp) - 1; ALWAYS(iAddr>=0); iAddr--){",
          "2152:     if( aOp[iAddr].opcode==OP_ReleaseReg ) continue;",
          "2153:     assert( aOp[iAddr].opcode==OP_Lt || aOp[iAddr].opcode==OP_Gt );",
          "2154:     assert( aOp[iAddr].p5 & SQLITE_STOREP2 );",
          "2155:     break;",
          "2156:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "7685: }",
          "7686: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7703: #ifdef SQLITE_DEBUG",
          "7732: case OP_ReleaseReg: {",
          "7733:   Mem *pMem;",
          "7734:   int i;",
          "7735:   u32 constMask;",
          "7736:   assert( pOp->p1>0 );",
          "7737:   assert( pOp->p1+pOp->p2<=(p->nMem+1 - p->nCursor)+1 );",
          "7738:   pMem = &aMem[pOp->p1];",
          "7739:   constMask = pOp->p3;",
          "7740:   for(i=0; i<pOp->p2; i++, pMem++){",
          "7741:     if( (constMask & MASKBIT32(i))==0 ){",
          "7742:       pMem->pScopyFrom = 0;",
          "7744:     }",
          "7745:   }",
          "7746:   break;",
          "7747: }",
          "7748: #endif",
          "",
          "---------------"
        ],
        "src/vdbe.h||src/vdbe.h": [
          "File: src/vdbe.h -> src/vdbe.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "232: void sqlite3VdbeJumpHere(Vdbe*, int addr);",
          "233: int sqlite3VdbeChangeToNoop(Vdbe*, int addr);",
          "234: int sqlite3VdbeDeletePriorOpcode(Vdbe*, u8 op);",
          "235: void sqlite3VdbeChangeP4(Vdbe*, int addr, const char *zP4, int N);",
          "236: void sqlite3VdbeAppendP4(Vdbe*, void *pP4, int p4type);",
          "237: void sqlite3VdbeSetP4KeyInfo(Parse*, Index*);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "235: #ifdef SQLITE_DEBUG",
          "236:   void sqlite3VdbeReleaseRegisters(Parse*,int addr, int n, u32 mask);",
          "237: #else",
          "238: # define sqlite3VdbeReleaseRegisters(P,A,N,M)",
          "239: #endif",
          "",
          "---------------"
        ],
        "src/vdbeaux.c||src/vdbeaux.c": [
          "File: src/vdbeaux.c -> src/vdbeaux.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1186:   }",
          "1187: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1189: #ifdef SQLITE_DEBUG",
          "1194: void sqlite3VdbeReleaseRegisters(Parse *pParse, int iFirst, int N, u32 mask){",
          "1195:   assert( pParse->pVdbe );",
          "1196:   while( N>0 && (mask&1)!=0 ){",
          "1197:     mask >>= 1;",
          "1198:     iFirst++;",
          "1199:     N--;",
          "1200:   }",
          "1201:   while( N>0 && N<=32 && (mask & MASKBIT32(N-1))!=0 ){",
          "1202:     mask &= ~MASKBIT32(N-1);",
          "1203:     N--;",
          "1204:   }",
          "1205:   if( N>0 ){",
          "1206:     sqlite3VdbeAddOp3(pParse->pVdbe, OP_ReleaseReg, iFirst, N, *(int*)&mask);",
          "1207:   }",
          "1208: }",
          "",
          "---------------"
        ],
        "test/update.test||test/update.test": [
          "File: test/update.test -> test/update.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "672:   SELECT * FROM t0;",
          "673: } {xyz 345 uvw 345}",
          "675: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "675: # 2019-12-22 ticket c62c5e58524b204d",
          "676: # This is really the same underlying problem as 5ad2aa6921faa1ee",
          "677: #",
          "678: reset_db",
          "679: do_execsql_test update-18.20 {",
          "680:   PRAGMA encoding = 'utf16';",
          "681:   CREATE TABLE t0(c0 TEXT);",
          "682:   CREATE INDEX i0 ON t0(0 LIKE COALESCE(c0, 0));",
          "683:   INSERT INTO t0(c0) VALUES (0), (0);",
          "684:   SELECT * FROM t0;",
          "685: } {0 0}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "47f8ef32a0d1629440eef02bbf0788b07f6e2c67",
      "candidate_info": {
        "commit_hash": "47f8ef32a0d1629440eef02bbf0788b07f6e2c67",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/47f8ef32a0d1629440eef02bbf0788b07f6e2c67",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/resolve.c",
          "test/fuzzdata8.db"
        ],
        "message": "Remove a NEVER() that could be true in sqlite3MatchEName().\n\nFossilOrigin-Name: 921448f0e24a3753374b32be9d7bf36a9ca5d8522eff9f0b51dc243f08652419",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/resolve.c||src/resolve.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 70c44811d12f540d4ec1c29dedbe999cf79b82e326a8712ae2fa0725d6bd8a65",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/resolve.c||src/resolve.c": [
          "File: src/resolve.c -> src/resolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "140: ){",
          "141:   int n;",
          "142:   const char *zSpan;",
          "144:   zSpan = pItem->zEName;",
          "145:   for(n=0; ALWAYS(zSpan[n]) && zSpan[n]!='.'; n++){}",
          "146:   if( zDb && (sqlite3StrNICmp(zSpan, zDb, n)!=0 || zDb[n]!=0) ){",
          "",
          "[Removed Lines]",
          "143:   if( NEVER(pItem->eEName!=ENAME_TAB) ) return 0;",
          "",
          "[Added Lines]",
          "143:   if( pItem->eEName!=ENAME_TAB ) return 0;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8a64d62d31efd388720ed40ae1bf40b6e1e53173",
      "candidate_info": {
        "commit_hash": "8a64d62d31efd388720ed40ae1bf40b6e1e53173",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/8a64d62d31efd388720ed40ae1bf40b6e1e53173",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/windowfault.test"
        ],
        "message": "Add test case for previous commit.\n\nFossilOrigin-Name: 14d14eb537075c6ac77513b1e7305bed8bc01a9034dfb763fd96f76400f2b705",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/windowfault.test||test/windowfault.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: a67cf5b7d37d5b1484be32092635faafd8f76e5881898cd9435517c4b287d663",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/windowfault.test||test/windowfault.test": [
          "File: test/windowfault.test -> test/windowfault.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "263:   faultsim_test_result {0 {}}",
          "264: }",
          "266: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "266: do_faultsim_test 11 -faults oom* -prep {",
          "267: } -body {",
          "268:   execsql {",
          "269:     VALUES(false),(current_date collate binary)",
          "270:     intersect",
          "271:     values(count() not like group_concat(cast(cast(0e00 as text) as integer) <= NULL || 0.4e-0 || 0x8 & true ) over () collate rtrim);",
          "272:   }",
          "273: } -test {",
          "274:   faultsim_test_result {0 {}}",
          "275: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}