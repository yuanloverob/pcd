{
  "cve_id": "CVE-2021-20223",
  "cve_desc": "",
  "repo": "sqlite/sqlite",
  "patch_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
  "patch_info": {
    "commit_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "files": [
      "ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Prevent fts5 tokenizer unicode61 from considering '\\0' to be a token characters, even if other characters of class \"Cc\" are.\n\nFossilOrigin-Name: b7b7bde9b7a03665e3691c6d51118965f216d2dfb1617f138b9f9e60e418ed2f",
    "before_after_code_files": [
      "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
      "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c"
    ],
    "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test": [
      "File: ext/fts5/test/fts5tok1.test -> ext/fts5/test/fts5tok1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:   SELECT * FROM t4;",
      "112: } {1 {SQL logic error}}",
      "115: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114: #-------------------------------------------------------------------------",
      "115: # Embedded 0x00 characters.",
      "116: #",
      "117: reset_db",
      "118: do_execsql_test 3.1.0 {",
      "119:   CREATE VIRTUAL TABLE t1 USING fts5(z);",
      "120:   CREATE VIRTUAL TABLE tt USING fts5vocab(t1, 'instance');",
      "121:   INSERT INTO t1 VALUES('abc' || char(0) || 'def');",
      "122:   SELECT * FROM tt;",
      "123: } { abc 1 z 0 def 1 z 1 }",
      "124: do_execsql_test 3.1.1 {",
      "125:   SELECT hex(z) FROM t1;",
      "126: } {61626300646566}",
      "127: do_execsql_test 3.1.2 {",
      "128:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "129: } {}",
      "131: do_execsql_test 3.2.0 {",
      "132:   CREATE VIRTUAL TABLE t2 USING fts5(z,",
      "133:       tokenize=\"unicode61 categories 'L* N* Co Cc'\"",
      "134:   );",
      "135:   CREATE VIRTUAL TABLE tu USING fts5vocab(t2, 'instance');",
      "137:   INSERT INTO t2 VALUES('abc' || char(0) || 'def');",
      "138:   SELECT * FROM tu;",
      "139: } { abc 1 z 0 def 1 z 1 }",
      "141: do_execsql_test 3.2.1 {",
      "142:   SELECT hex(z) FROM t1;",
      "143: } {61626300646566}",
      "145: do_execsql_test 3.2.2 {",
      "146:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "147: } {}",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 0e7e113d9f2c929c1f8a85e2cfad8e2e60f0e8770212b5e5320fb2a2c42911f8",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "54d501092d88c0cf89bec4279951f548fb0b8618",
      "candidate_info": {
        "commit_hash": "54d501092d88c0cf89bec4279951f548fb0b8618",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/54d501092d88c0cf89bec4279951f548fb0b8618",
        "files": [
          "ext/misc/zipfile.c",
          "manifest",
          "manifest.uuid",
          "test/zipfile.test"
        ],
        "message": "Fix the zipfile extension so that INSERT works even if the pathname of the file being inserted is a NULL.  Bug discovered by the Yongheng and Rui fuzzer.\n\nFossilOrigin-Name: a80f84b511231204658304226de3e075a55afc2e3f39ac063716f7a57f585c06",
        "before_after_code_files": [
          "ext/misc/zipfile.c||ext/misc/zipfile.c",
          "manifest.uuid||manifest.uuid",
          "test/zipfile.test||test/zipfile.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/misc/zipfile.c||ext/misc/zipfile.c": [
          "File: ext/misc/zipfile.c -> ext/misc/zipfile.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1620:     if( rc==SQLITE_OK ){",
          "1621:       zPath = (const char*)sqlite3_value_text(apVal[2]);",
          "1622:       nPath = (int)strlen(zPath);",
          "1623:       mTime = zipfileGetTime(apVal[4]);",
          "1624:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1622:       if( zPath==0 ) zPath = \"\";",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: fccfb8a9ed3c1df9f23762bb8df6fdf36a21118899e3fae41f451169a5f2c08e",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/zipfile.test||test/zipfile.test": [
          "File: test/zipfile.test -> test/zipfile.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "795:   } {. ./x1.txt ./x2.txt}",
          "796: }",
          "798: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "798: # 2019-12-18 Yongheng and Rui fuzzer",
          "799: #",
          "800: do_execsql_test 13.10 {",
          "801:   DROP TABLE IF EXISTS t0;",
          "802:   DROP TABLE IF EXISTS t1;",
          "803:   CREATE TABLE t0(a,b,c,d,e,f,g);",
          "804:   REPLACE INTO t0(c,b,f) VALUES(10,10,10);",
          "805:   CREATE VIRTUAL TABLE t1 USING zipfile('h.zip');",
          "806:   REPLACE INTO t1 SELECT * FROM t0;",
          "807:   SELECT quote(name),quote(mode),quote(mtime),quote(sz),quote(rawdata),",
          "808:          quote(data),quote(method) FROM t1;",
          "809: } {'' 10 10 2 X'3130' X'3130' 0}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c51ceeb049fd108b71da3ce916cf7c35191311a0",
      "candidate_info": {
        "commit_hash": "c51ceeb049fd108b71da3ce916cf7c35191311a0",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/c51ceeb049fd108b71da3ce916cf7c35191311a0",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbe.c"
        ],
        "message": "Fix the documentation for the OP_IdxGT family of opcodes to show that the P5 operand is not used.\n\nFossilOrigin-Name: 62f7d2a61259f296ffdcb3b3ee1a13925c4563ac8ed669f8a8a63fc7bc3a0a37",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbe.c||src/vdbe.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: ded1a75b3cf39834d38a385f38ae969b296f6c9409856b7eea08645e861b1ac2",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5880:   assert( pC->eCurType==CURTYPE_BTREE );",
          "5881:   assert( pC->uc.pCursor!=0);",
          "5882:   assert( pC->deferredMoveto==0 );",
          "5884:   assert( pOp->p4type==P4_INT32 );",
          "5885:   r.pKeyInfo = pC->pKeyInfo;",
          "5886:   r.nField = (u16)pOp->p4.i;",
          "",
          "[Removed Lines]",
          "5883:   assert( pOp->p5==0 || pOp->p5==1 );",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "50efa586006c6ddb7290c37e35b9102747f18d78",
      "candidate_info": {
        "commit_hash": "50efa586006c6ddb7290c37e35b9102747f18d78",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/50efa586006c6ddb7290c37e35b9102747f18d78",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "test/select1.test"
        ],
        "message": "Remove an assert() in the code generator that can fail due to an invalid INSERT statement.  The same assert() appears again in the VDBE and will fire there if the problem persists in an SQL statement that does not contain errors.  Gramfuzz find.\n\nFossilOrigin-Name: 9bdd57cb9ad8ac1f4a0f1a3942d94ca5193109eeb1975343c4f0c7abf7135946",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "test/select1.test||test/select1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 1ca0bd982ab1183bbafce0d260e4dceda5eb766ed2e7793374a88d1ae0bdd2ca",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3509: void sqlite3ExprCodeMove(Parse *pParse, int iFrom, int iTo, int nReg){",
          "3511:   sqlite3VdbeAddOp3(pParse->pVdbe, OP_Move, iFrom, iTo, nReg);",
          "3512: }",
          "",
          "[Removed Lines]",
          "3510:   assert( iFrom>=iTo+nReg || iFrom+nReg<=iTo );",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/select1.test||test/select1.test": [
          "File: test/select1.test -> test/select1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1165:   );",
          "1166: } {1}",
          "1168: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1168: # 2019-12-17 gramfuzz find",
          "1169: #",
          "1170: do_execsql_test select-19.10 {",
          "1171:   DROP TABLE IF EXISTS t1;",
          "1172:   CREATE TABLE t1(x);",
          "1173: } {}",
          "1174: do_catchsql_test select-19.20 {",
          "1175:   INSERT INTO t1",
          "1176:     SELECT 1,2,3,4,5,6,7",
          "1177:     UNION ALL SELECT 1,2,3,4,5,6,7",
          "1178:     ORDER BY 1;",
          "1179: } {1 {table t1 has 1 columns but 7 values were supplied}}",
          "1180: do_catchsql_test select-19.21 {",
          "1181:   INSERT INTO t1",
          "1182:     SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15",
          "1183:     UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15",
          "1184:     ORDER BY 1;",
          "1185: } {1 {table t1 has 1 columns but 15 values were supplied}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7b14b990d0fbf4b28a13095702d3d81684da15ec",
      "candidate_info": {
        "commit_hash": "7b14b990d0fbf4b28a13095702d3d81684da15ec",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/7b14b990d0fbf4b28a13095702d3d81684da15ec",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/test_hexio.c"
        ],
        "message": "Avoid a buffer overrun in test code that could occur if certain test functions were passed a hex-string containing an odd number of digits.\n\nFossilOrigin-Name: 3c5e63c22ffbfeb66eb6ee38912d29fad6f2bd4d74b6a25e89bd36bf40eaa661",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/test_hexio.c||src/test_hexio.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: e1595a20d71e61957944cc2b634578968cda8fba08a1f1e75edba20dc9c6080b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/test_hexio.c||src/test_hexio.c": [
          "File: src/test_hexio.c -> src/test_hexio.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "168:   if( Tcl_GetIntFromObj(interp, objv[2], &offset) ) return TCL_ERROR;",
          "169:   zFile = Tcl_GetString(objv[1]);",
          "170:   zIn = (const unsigned char *)Tcl_GetStringFromObj(objv[3], &nIn);",
          "172:   if( aOut==0 ){",
          "173:     return TCL_ERROR;",
          "174:   }",
          "",
          "[Removed Lines]",
          "171:   aOut = sqlite3_malloc( nIn/2 );",
          "",
          "[Added Lines]",
          "171:   aOut = sqlite3_malloc( 1 + nIn/2 );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "213:     return TCL_ERROR;",
          "214:   }",
          "215:   zIn = (const unsigned char *)Tcl_GetStringFromObj(objv[1], &nIn);",
          "217:   if( aOut==0 ){",
          "218:     return TCL_ERROR;",
          "219:   }",
          "",
          "[Removed Lines]",
          "216:   aOut = sqlite3_malloc( nIn/2 );",
          "",
          "[Added Lines]",
          "216:   aOut = sqlite3_malloc( 1 + nIn/2 );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "309:     return TCL_ERROR;",
          "310:   }",
          "311:   zOrig = (unsigned char *)Tcl_GetStringFromObj(objv[1], &n);",
          "313:   n = sqlite3TestHexToBin(zOrig, n, z);",
          "314:   z[n] = 0;",
          "315:   nOut = sqlite3Utf8To8(z);",
          "",
          "[Removed Lines]",
          "312:   z = sqlite3_malloc( n+3 );",
          "",
          "[Added Lines]",
          "312:   z = sqlite3_malloc( n+4 );",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cdb6ce980b348ed106e16132c5b2262535b01b46",
      "candidate_info": {
        "commit_hash": "cdb6ce980b348ed106e16132c5b2262535b01b46",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/cdb6ce980b348ed106e16132c5b2262535b01b46",
        "files": [
          "ext/misc/cksumvfs.c",
          "manifest",
          "manifest.uuid",
          "src/sqlite.h.in"
        ],
        "message": "Add the new SQLITE_IOERR_DATA result code and use it in cksumvfs. Also enhance cksumvfs to emit an sqlite3_log() message whenever it finds an invalid checksum.\n\nFossilOrigin-Name: a094e8bfdef10d9e5d97f5a9f7c15b0fc547358b83367762ba5c2dfd2c9d0117",
        "before_after_code_files": [
          "ext/misc/cksumvfs.c||ext/misc/cksumvfs.c",
          "manifest.uuid||manifest.uuid",
          "src/sqlite.h.in||src/sqlite.h.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/misc/cksumvfs.c||ext/misc/cksumvfs.c": [
          "File: ext/misc/cksumvfs.c -> ext/misc/cksumvfs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "398:       u8 cksum[8];",
          "399:       cksmCompute((u8*)zBuf, iAmt-8, cksum);",
          "400:       if( memcmp(zBuf+iAmt-8, cksum, 8)!=0 ){",
          "402:       }",
          "403:     }",
          "404:   }",
          "",
          "[Removed Lines]",
          "401:         rc = SQLITE_CORRUPT;",
          "",
          "[Added Lines]",
          "402:         sqlite3_log(SQLITE_IOERR_DATA,",
          "403:            \"checksum fault offset %lld of \\\"%s\\\"\",",
          "404:            iOfst, p->zFName);",
          "405:         rc = SQLITE_IOERR_DATA;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "625:     p->isWal = 0;",
          "626:     p->computeCksm = 0;",
          "627:   }",
          "628: cksm_open_done:",
          "629:   if( rc ) pFile->pMethods = 0;",
          "630:   return rc;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "632:   p->zFName = zName;",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 2c17cdce26fd935e6d81ff828f4670291fc014013c93b2a1578506598345ee86",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/sqlite.h.in||src/sqlite.h.in": [
          "File: src/sqlite.h.in -> src/sqlite.h.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "507: #define SQLITE_IOERR_BEGIN_ATOMIC      (SQLITE_IOERR | (29<<8))",
          "508: #define SQLITE_IOERR_COMMIT_ATOMIC     (SQLITE_IOERR | (30<<8))",
          "509: #define SQLITE_IOERR_ROLLBACK_ATOMIC   (SQLITE_IOERR | (31<<8))",
          "510: #define SQLITE_LOCKED_SHAREDCACHE      (SQLITE_LOCKED |  (1<<8))",
          "511: #define SQLITE_LOCKED_VTAB             (SQLITE_LOCKED |  (2<<8))",
          "512: #define SQLITE_BUSY_RECOVERY           (SQLITE_BUSY   |  (1<<8))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "510: #define SQLITE_IOERR_DATA              (SQLITE_IOERR | (32<<8))",
          "",
          "---------------"
        ]
      }
    }
  ]
}