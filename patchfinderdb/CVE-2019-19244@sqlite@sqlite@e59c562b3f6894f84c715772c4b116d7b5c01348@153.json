{
  "cve_id": "CVE-2019-19244",
  "cve_desc": "sqlite3Select in select.c in SQLite 3.30.1 allows a crash if a sub-select uses both DISTINCT and window functions, and also has certain ORDER BY usage.",
  "repo": "sqlite/sqlite",
  "patch_hash": "e59c562b3f6894f84c715772c4b116d7b5c01348",
  "patch_info": {
    "commit_hash": "e59c562b3f6894f84c715772c4b116d7b5c01348",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/e59c562b3f6894f84c715772c4b116d7b5c01348",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/window1.test"
    ],
    "message": "Fix a crash that could occur if a sub-select that uses both DISTINCT and window functions also used an ORDER BY that is the same as its select list.\n\nFossilOrigin-Name: bcdd66c1691955c697f3d756c2b035acfe98f6aad72e90b0021bab6e9023b3ba",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/window1.test||test/window1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 6a64fb6a2da6c98f1e87b55ad5689967e1db4eae2e08345471d95e28cd567e0f",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "6065:   if( (p->selFlags & (SF_Distinct|SF_Aggregate))==SF_Distinct",
      "6066:    && sqlite3ExprListCompare(sSort.pOrderBy, pEList, -1)==0",
      "6067:   ){",
      "6068:     p->selFlags &= ~SF_Distinct;",
      "6069:     pGroupBy = p->pGroupBy = sqlite3ExprListDup(db, pEList, 0);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6067:    && p->pWin==0",
      "",
      "---------------"
    ],
    "test/window1.test||test/window1.test": [
      "File: test/window1.test -> test/window1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "1243:   ALTER TABLE a0 RENAME TO S;",
      "1244: } {1 {error in view a: 1st ORDER BY term does not match any column in the result set}}",
      "1246: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1246: reset_db",
      "1247: do_execsql_test 33.1 {",
      "1248:   CREATE TABLE t1(aa, bb);",
      "1249:   INSERT INTO t1 VALUES(1, 2);",
      "1250:   INSERT INTO t1 VALUES(5, 6);",
      "1251:   CREATE TABLE t2(x);",
      "1252:   INSERT INTO t2 VALUES(1);",
      "1253: }",
      "1254: do_execsql_test 33.2 {",
      "1255:   SELECT (SELECT DISTINCT sum(aa) OVER() FROM t1 ORDER BY 1), x FROM t2",
      "1256:   ORDER BY 1;",
      "1257: } {6 1}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "e20a894a34894eeb4eca0252d4ff25f99ac311e8",
      "candidate_info": {
        "commit_hash": "e20a894a34894eeb4eca0252d4ff25f99ac311e8",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e20a894a34894eeb4eca0252d4ff25f99ac311e8",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/parse.y",
          "test/altertab3.test"
        ],
        "message": "Handle renaming a column or table when the schema contains a (meaningless) index on the constant expression ('text' IN ()) or ('text' NOT IN()).\n\nFossilOrigin-Name: 567b13093956185b5d5e971b81ba4788fd9d26c03688f643b380f0f1c1a94da0",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/parse.y||src/parse.y",
          "test/altertab3.test||test/altertab3.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 94b58ab059cba9771e75f16d1460f313104a8fb879f9f8805725d362aa58cbcd",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/parse.y||src/parse.y": [
          "File: src/parse.y -> src/parse.y",
          "--- Hunk 1 ---",
          "[Context before]",
          "1176:       if( IN_RENAME_OBJECT==0 ){",
          "1177:         sqlite3ExprDelete(pParse->db, A);",
          "1178:         A = sqlite3ExprAlloc(pParse->db, TK_INTEGER,&sqlite3IntTokens[N],1);",
          "1179:       }",
          "1180:     }else if( Y->nExpr==1 ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1185:       }else{",
          "1186:         A = sqlite3PExpr(pParse, TK_UPLUS, A, 0);",
          "",
          "---------------"
        ],
        "test/altertab3.test||test/altertab3.test": [
          "File: test/altertab3.test -> test/altertab3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "175:   ALTER TABLE t1x RENAME TO t1;",
          "176: } {1 {error in trigger AFTER: no such column: d}}",
          "178: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "178: #-------------------------------------------------------------------------",
          "179: reset_db",
          "180: do_execsql_test 8.0 {",
          "181:   CREATE TABLE t0(c0);",
          "182:   CREATE INDEX i0 ON t0('1' IN ());",
          "183: }",
          "184: do_execsql_test 8.1 {",
          "185:   ALTER TABLE t0 RENAME TO t1;",
          "186:   SELECT sql FROM sqlite_master;",
          "187: } {",
          "188:   {CREATE TABLE \"t1\"(c0)}",
          "189:   {CREATE INDEX i0 ON \"t1\"('1' IN ())}",
          "190: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "531230d006696e418d40b7808798de628a3fd4f2",
      "candidate_info": {
        "commit_hash": "531230d006696e418d40b7808798de628a3fd4f2",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/531230d006696e418d40b7808798de628a3fd4f2",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/releasetest.tcl"
        ],
        "message": "Add -DSQLITE_ENABLE_DESERIALIZE to the default testing configuration in test/releasetest.tcl.\n\nFossilOrigin-Name: 433d6ef637a10ee017b5d8cadd125a162cfedc9895ae862b8dde6dddb7eda59b",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/releasetest.tcl||test/releasetest.tcl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 3839e9098107604e1526c2b1e813c019607077dfe39d7eeb92f3466518dec3b1",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/releasetest.tcl||test/releasetest.tcl": [
          "File: test/releasetest.tcl -> test/releasetest.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "50:     -O2",
          "51:     --disable-amalgamation --disable-shared",
          "52:     --enable-session",
          "53:   }",
          "54:   \"Sanitize\" {",
          "55:     CC=clang -fsanitize=undefined",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "53:     -DSQLITE_ENABLE_DESERIALIZE",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "45616c7f7539fcb60547ae95b06dd4fd421ff453",
      "candidate_info": {
        "commit_hash": "45616c7f7539fcb60547ae95b06dd4fd421ff453",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/45616c7f7539fcb60547ae95b06dd4fd421ff453",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c",
          "test/fuzzdata8.db"
        ],
        "message": "Add an \"|| CORRUPT_DB\" term to an assert() statement in the btree defragmenter.\n\nFossilOrigin-Name: 6bfd8655f006e031c0d4c988356c4b9206efa6bfdb034fde8ffa3361521a4844",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 6ae4b8c525f446ddb0e0bdd5e4e01e06e2ab975e3effa42fce6a1102b3a39830",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1421:   hdr = pPage->hdrOffset;",
          "1422:   cellOffset = pPage->cellOffset;",
          "1423:   nCell = pPage->nCell;",
          "1425:   iCellFirst = cellOffset + 2*nCell;",
          "1426:   usableSize = pPage->pBt->usableSize;",
          "",
          "[Removed Lines]",
          "1424:   assert( nCell==get2byte(&data[hdr+3]) );",
          "",
          "[Added Lines]",
          "1424:   assert( nCell==get2byte(&data[hdr+3]) || CORRUPT_DB );",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "13a8f203d9a03e0f1dfe03225acecd93c8de3022",
      "candidate_info": {
        "commit_hash": "13a8f203d9a03e0f1dfe03225acecd93c8de3022",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/13a8f203d9a03e0f1dfe03225acecd93c8de3022",
        "files": [
          "ext/fts3/fts3_write.c",
          "manifest",
          "manifest.uuid",
          "test/fts3corrupt.test"
        ],
        "message": "Further improvements to shadow table corruption detection in FTS3.\n\nFossilOrigin-Name: e35d8c76aae59f57cc5193f79b21b4298029bea78e1aab7af67432162ce63e00",
        "before_after_code_files": [
          "ext/fts3/fts3_write.c||ext/fts3/fts3_write.c",
          "manifest.uuid||manifest.uuid",
          "test/fts3corrupt.test||test/fts3corrupt.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/fts3_write.c||ext/fts3/fts3_write.c": [
          "File: ext/fts3/fts3_write.c -> ext/fts3/fts3_write.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4245:       pWriter->bNoLeafData = (pWriter->nLeafData==0);",
          "4246:       nRoot = sqlite3_column_bytes(pSelect, 4);",
          "4247:       aRoot = sqlite3_column_blob(pSelect, 4);",
          "4248:     }else{",
          "4249:       return sqlite3_reset(pSelect);",
          "4250:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4248:       if( aRoot==0 ){",
          "4249:         sqlite3_reset(pSelect);",
          "4250:         return nRoot ? SQLITE_NOMEM : FTS_CORRUPT_VTAB;",
          "4251:       }",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: dfcf081d842629a0b177be7eb2eb8ce719324068991040a581e33ea1d5db3d27",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/fts3corrupt.test||test/fts3corrupt.test": [
          "File: test/fts3corrupt.test -> test/fts3corrupt.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "165: } {1 {database disk image is malformed}}",
          "166: do_test 5.3.1 { sqlite3_extended_errcode db } SQLITE_CORRUPT_VTAB",
          "169: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "168: # 2019-11-18 https://bugs.chromium.org/p/chromium/issues/detail?id=1025467",
          "169: # bug1",
          "170: db close",
          "171: sqlite3 db :memory:",
          "172: do_catchsql_test 6.10 {",
          "173:   CREATE VIRTUAL TABLE f using fts3(a,b);",
          "174:   CREATE TABLE f_stat(id INTEGER PRIMARY KEY, value BLOB);",
          "175:   INSERT INTO f_segdir VALUES (2000, 0,0,0, '16', '');",
          "176:   INSERT INTO f_segdir VALUES (1999, 0,0,0, '0 18',",
          "177:                                x'000131030102000103323334050101010200');",
          "178:   INSERT INTO f_segments (blockid) values (16);",
          "179:   INSERT INTO f_segments values (0, x'');",
          "180:   INSERT INTO f_stat VALUES (1,x'cf0f01');",
          "181:   INSERT INTO f(f) VALUES (\"merge=1\");",
          "182: } {1 {database disk image is malformed}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "463e76ff8f024ca12d1bad4c6ab23e3a7a8247ce",
      "candidate_info": {
        "commit_hash": "463e76ff8f024ca12d1bad4c6ab23e3a7a8247ce",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/463e76ff8f024ca12d1bad4c6ab23e3a7a8247ce",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/insert.c"
        ],
        "message": "Get indexes working on virtual columns.\n\nFossilOrigin-Name: 450c48766c8e62653d074c95f69b0576de3880d183a1d1e5992d88b6fce6cc39",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/insert.c||src/insert.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 0d236698e64b2a4b46f91a25279c406e0bf392fe66116678456f0a034c11d7b4",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/insert.c||src/insert.c": [
          "File: src/insert.c -> src/insert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1755:         sqlite3ExprCodeCopy(pParse, pIdx->aColExpr->a[i].pExpr, regIdx+i);",
          "1756:         pParse->iSelfTab = 0;",
          "1757:         VdbeComment((v, \"%s column %d\", pIdx->zName, i));",
          "1758:       }else{",
          "1766:       }",
          "1767:     }",
          "1768:     sqlite3VdbeAddOp3(v, OP_MakeRecord, regIdx, pIdx->nColumn, aRegIdx[ix]);",
          "",
          "[Removed Lines]",
          "1759:         if( iField==XN_ROWID || iField==pTab->iPKey ){",
          "1760:           x = regNewData;",
          "1761:         }else{",
          "1762:           x = iField + regNewData + 1;",
          "1763:         }",
          "1764:         sqlite3VdbeAddOp2(v, iField<0 ? OP_IntCopy : OP_SCopy, x, regIdx+i);",
          "1765:         VdbeComment((v, \"%s\", iField<0 ? \"rowid\" : pTab->aCol[iField].zName));",
          "",
          "[Added Lines]",
          "1758:       }else if( iField==XN_ROWID || iField==pTab->iPKey ){",
          "1759:         x = regNewData;",
          "1760:         sqlite3VdbeAddOp2(v, OP_IntCopy, x, regIdx+i);",
          "1761:         VdbeComment((v, \"rowid\"));",
          "1762: #ifndef SQLITE_OMIT_GENERATED_COLUMNS",
          "1763:       }else if( pTab->aCol[iField].colFlags & COLFLAG_VIRTUAL ){",
          "1764:         pParse->iSelfTab = -(regNewData+1);",
          "1765:         sqlite3ExprCodeCopy(pParse, pTab->aCol[iField].pDflt, regIdx+i);",
          "1766:         pParse->iSelfTab = 0;",
          "1767:         VdbeComment((v, \"%s column %d\", pIdx->zName, i));",
          "1768: #endif",
          "1770:         x = sqlite3ColumnOfTable(pTab, iField) + regNewData + 1;",
          "1771:         sqlite3VdbeAddOp2(v, OP_SCopy, x, regIdx+i);",
          "1772:         VdbeComment((v, \"%s\", pTab->aCol[iField].zName));",
          "",
          "---------------"
        ]
      }
    }
  ]
}