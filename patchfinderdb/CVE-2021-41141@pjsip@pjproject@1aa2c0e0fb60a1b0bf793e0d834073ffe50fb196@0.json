{
  "cve_id": "CVE-2021-41141",
  "cve_desc": "PJSIP is a free and open source multimedia communication library written in the C language implementing standard based protocols such as SIP, SDP, RTP, STUN, TURN, and ICE. In various parts of PJSIP, when error/failure occurs, it is found that the function returns without releasing the currently held locks. This could result in a system deadlock, which cause a denial of service for the users. No release has yet been made which contains the linked fix commit. All versions up to an including 2.11.1 are affected. Users may need to manually apply the patch.",
  "repo": "pjsip/pjproject",
  "patch_hash": "1aa2c0e0fb60a1b0bf793e0d834073ffe50fb196",
  "patch_info": {
    "commit_hash": "1aa2c0e0fb60a1b0bf793e0d834073ffe50fb196",
    "repo": "pjsip/pjproject",
    "commit_url": "https://github.com/pjsip/pjproject/commit/1aa2c0e0fb60a1b0bf793e0d834073ffe50fb196",
    "files": [
      "pjmedia/src/pjmedia-codec/and_aud_mediacodec.cpp",
      "pjmedia/src/pjmedia-codec/ipp_codecs.c",
      "pjmedia/src/pjmedia-codec/opus.c",
      "pjmedia/src/pjmedia-codec/passthrough.c",
      "pjmedia/src/pjmedia-codec/speex_codec.c",
      "pjmedia/src/pjmedia/vid_conf.c"
    ],
    "message": "Merge pull request from GHSA-8fmx-hqw7-6gmc",
    "before_after_code_files": [
      "pjmedia/src/pjmedia-codec/and_aud_mediacodec.cpp||pjmedia/src/pjmedia-codec/and_aud_mediacodec.cpp",
      "pjmedia/src/pjmedia-codec/ipp_codecs.c||pjmedia/src/pjmedia-codec/ipp_codecs.c",
      "pjmedia/src/pjmedia-codec/opus.c||pjmedia/src/pjmedia-codec/opus.c",
      "pjmedia/src/pjmedia-codec/passthrough.c||pjmedia/src/pjmedia-codec/passthrough.c",
      "pjmedia/src/pjmedia-codec/speex_codec.c||pjmedia/src/pjmedia-codec/speex_codec.c",
      "pjmedia/src/pjmedia/vid_conf.c||pjmedia/src/pjmedia/vid_conf.c"
    ]
  },
  "patch_diff": {
    "pjmedia/src/pjmedia-codec/and_aud_mediacodec.cpp||pjmedia/src/pjmedia-codec/and_aud_mediacodec.cpp": [
      "File: pjmedia/src/pjmedia-codec/and_aud_mediacodec.cpp -> pjmedia/src/pjmedia-codec/and_aud_mediacodec.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "754:     }",
      "755:     if (idx == -1) {",
      "757:  return PJMEDIA_CODEC_EFAILED;",
      "758:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "757:  pj_mutex_unlock(and_media_factory.mutex);",
      "",
      "---------------"
    ],
    "pjmedia/src/pjmedia-codec/ipp_codecs.c||pjmedia/src/pjmedia-codec/ipp_codecs.c": [
      "File: pjmedia/src/pjmedia-codec/ipp_codecs.c -> pjmedia/src/pjmedia-codec/ipp_codecs.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "939:     }",
      "940:     if (idx == -1) {",
      "942:  return PJMEDIA_CODEC_EFAILED;",
      "943:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "942:  pj_mutex_unlock(ipp_factory.mutex);",
      "",
      "---------------"
    ],
    "pjmedia/src/pjmedia-codec/opus.c||pjmedia/src/pjmedia-codec/opus.c": [
      "File: pjmedia/src/pjmedia-codec/opus.c -> pjmedia/src/pjmedia-codec/opus.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "723:        OPUS_APPLICATION_VOIP);",
      "724:     if (err != OPUS_OK) {",
      "725:  PJ_LOG(2, (THIS_FILE, \"Unable to create encoder\"));",
      "726:  return PJMEDIA_CODEC_EFAILED;",
      "727:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "726:  pj_mutex_unlock (opus_data->mutex);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "767:         attr->info.channel_cnt);",
      "768:     if (err != OPUS_OK) {",
      "769:  PJ_LOG(2, (THIS_FILE, \"Unable to initialize decoder\"));",
      "770:  return PJMEDIA_CODEC_EFAILED;",
      "771:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "771:  pj_mutex_unlock (opus_data->mutex);",
      "",
      "---------------"
    ],
    "pjmedia/src/pjmedia-codec/passthrough.c||pjmedia/src/pjmedia-codec/passthrough.c": [
      "File: pjmedia/src/pjmedia-codec/passthrough.c -> pjmedia/src/pjmedia-codec/passthrough.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "625:     }",
      "626:     if (idx == -1) {",
      "628:  return PJMEDIA_CODEC_EUNSUP;",
      "629:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "628:  pj_mutex_unlock(codec_factory.mutex);",
      "",
      "---------------"
    ],
    "pjmedia/src/pjmedia-codec/speex_codec.c||pjmedia/src/pjmedia-codec/speex_codec.c": [
      "File: pjmedia/src/pjmedia-codec/speex_codec.c -> pjmedia/src/pjmedia-codec/speex_codec.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "379:     if (!codec_mgr) {",
      "380:  pj_pool_release(spx_factory.pool);",
      "381:  spx_factory.pool = NULL;",
      "382:  return PJ_EINVALIDOP;",
      "383:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "382:  pj_mutex_unlock(spx_factory.mutex);",
      "",
      "---------------"
    ],
    "pjmedia/src/pjmedia/vid_conf.c||pjmedia/src/pjmedia/vid_conf.c": [
      "File: pjmedia/src/pjmedia/vid_conf.c -> pjmedia/src/pjmedia/vid_conf.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "304:      PJ_LOG(4,(THIS_FILE, \"pjmedia_vid_conf_add_port(): \"",
      "305:      \"unrecognized format %04X\",",
      "306:      port->info.fmt.id));",
      "307:      return PJMEDIA_EBADFMT;",
      "308:  }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "307:      pj_mutex_unlock(vid_conf->mutex);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "314:      PJ_LOG(4,(THIS_FILE, \"pjmedia_vid_conf_add_port(): \"",
      "315:      \"Failed to apply format %04X\",",
      "316:      port->info.fmt.id));",
      "317:      return status;",
      "318:  }",
      "319:  if (port->put_frame) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "318:      pj_mutex_unlock(vid_conf->mutex);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "331:        pj_pool_zalloc(pool,",
      "332:         vid_conf->opt.max_slot_cnt *",
      "333:         sizeof(unsigned));",
      "337:     cport->transmitter_slots = (unsigned*)",
      "338:           pj_pool_zalloc(pool,",
      "339:            vid_conf->opt.max_slot_cnt *",
      "344:     cport->render_states = (render_state**)",
      "345:       pj_pool_zalloc(pool,",
      "346:        vid_conf->opt.max_slot_cnt *",
      "347:        sizeof(render_state*));",
      "351:     cport->render_pool = (pj_pool_t**)",
      "352:     pj_pool_zalloc(pool,",
      "353:      vid_conf->opt.max_slot_cnt *",
      "358:     vid_conf->ports[index] = cport;",
      "",
      "[Removed Lines]",
      "334:     PJ_ASSERT_RETURN(cport->listener_slots, PJ_ENOMEM);",
      "340:            sizeof(unsigned));",
      "341:     PJ_ASSERT_RETURN(cport->transmitter_slots, PJ_ENOMEM);",
      "348:     PJ_ASSERT_RETURN(cport->render_states, PJ_ENOMEM);",
      "354:      sizeof(pj_pool_t*));",
      "355:     PJ_ASSERT_RETURN(cport->render_pool, PJ_ENOMEM);",
      "",
      "[Added Lines]",
      "336:     if (!cport->listener_slots) {",
      "337:  pj_mutex_unlock(vid_conf->mutex);",
      "338:  return PJ_ENOMEM;",
      "339:     }",
      "345:            sizeof(unsigned));",
      "346:     if (!cport->transmitter_slots) {",
      "347:  pj_mutex_unlock(vid_conf->mutex);",
      "348:  return PJ_ENOMEM;",
      "349:     }",
      "357:     if (!cport->render_states) {",
      "358:  pj_mutex_unlock(vid_conf->mutex);",
      "359:  return PJ_ENOMEM;",
      "360:     }",
      "366:      sizeof(pj_pool_t*));",
      "367:     if (!cport->render_pool) {",
      "368:  pj_mutex_unlock(vid_conf->mutex);",
      "369:  return PJ_ENOMEM;",
      "370:     }",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "420:  status = pjmedia_clock_stop(vid_conf->clock);",
      "421:  if (status != PJ_SUCCESS) {",
      "422:      PJ_PERROR(4, (THIS_FILE, status, \"Failed to stop clock\"));",
      "423:      return status;",
      "424:  }",
      "425:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "438:      pj_mutex_unlock(vid_conf->mutex);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "584:      status = pjmedia_clock_start(vid_conf->clock);",
      "585:      if (status != PJ_SUCCESS) {",
      "586:   PJ_PERROR(4, (THIS_FILE, status, \"Failed to start clock\"));",
      "587:   return status;",
      "588:      }",
      "589:  }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "603:   pj_mutex_unlock(vid_conf->mutex);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "673:      status = pjmedia_clock_stop(vid_conf->clock);",
      "674:      if (status != PJ_SUCCESS) {",
      "675:   PJ_PERROR(4, (THIS_FILE, status, \"Failed to stop clock\"));",
      "676:   return status;",
      "677:      }",
      "678:  }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "693:   pj_mutex_unlock(vid_conf->mutex);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "6ff18b4f8a6e1f7119edb53f4c85e6a084b82751",
      "candidate_info": {
        "commit_hash": "6ff18b4f8a6e1f7119edb53f4c85e6a084b82751",
        "repo": "pjsip/pjproject",
        "commit_url": "https://github.com/pjsip/pjproject/commit/6ff18b4f8a6e1f7119edb53f4c85e6a084b82751",
        "files": [
          "pjlib/src/pj/lock.c",
          "pjmedia/include/pjmedia/port.h",
          "pjmedia/src/pjmedia/port.c",
          "pjmedia/src/pjmedia/stream.c",
          "pjmedia/src/pjmedia/vid_conf.c",
          "pjmedia/src/pjmedia/vid_port.c",
          "pjmedia/src/pjmedia/vid_stream.c",
          "pjsip-apps/src/pjsua/pjsua_app_cli.c",
          "pjsip-apps/src/pjsua/pjsua_app_legacy.c"
        ],
        "message": "Lock ordering issue in video conference bridge (#3183)",
        "before_after_code_files": [
          "pjlib/src/pj/lock.c||pjlib/src/pj/lock.c",
          "pjmedia/include/pjmedia/port.h||pjmedia/include/pjmedia/port.h",
          "pjmedia/src/pjmedia/port.c||pjmedia/src/pjmedia/port.c",
          "pjmedia/src/pjmedia/stream.c||pjmedia/src/pjmedia/stream.c",
          "pjmedia/src/pjmedia/vid_conf.c||pjmedia/src/pjmedia/vid_conf.c",
          "pjmedia/src/pjmedia/vid_port.c||pjmedia/src/pjmedia/vid_port.c",
          "pjmedia/src/pjmedia/vid_stream.c||pjmedia/src/pjmedia/vid_stream.c",
          "pjsip-apps/src/pjsua/pjsua_app_cli.c||pjsip-apps/src/pjsua/pjsua_app_cli.c",
          "pjsip-apps/src/pjsua/pjsua_app_legacy.c||pjsip-apps/src/pjsua/pjsua_app_legacy.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "pjmedia/src/pjmedia/vid_conf.c||pjmedia/src/pjmedia/vid_conf.c"
          ],
          "candidate": [
            "pjmedia/src/pjmedia/vid_conf.c||pjmedia/src/pjmedia/vid_conf.c"
          ]
        }
      },
      "candidate_diff": {
        "pjlib/src/pj/lock.c||pjlib/src/pj/lock.c": [
          "File: pjlib/src/pj/lock.c -> pjlib/src/pj/lock.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "471:     status = pj_grp_lock_create(pool, cfg, p_grp_lock);",
          "472:     if (status == PJ_SUCCESS) {",
          "473:         grp_lock_add_handler(*p_grp_lock, pool, member, handler, PJ_FALSE);",
          "474:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "473:  pj_pool_t *pool = (*p_grp_lock)->pool;",
          "",
          "---------------"
        ],
        "pjmedia/include/pjmedia/port.h||pjmedia/include/pjmedia/port.h": [
          "File: pjmedia/include/pjmedia/port.h -> pjmedia/include/pjmedia/port.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: #include <pjmedia/frame.h>",
          "31: #include <pjmedia/signatures.h>",
          "32: #include <pj/assert.h>",
          "33: #include <pj/os.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "33: #include <pj/lock.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "387:     } port_data;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "396:     pj_grp_lock_t *grp_lock;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "501: PJ_DECL(pj_status_t) pjmedia_port_destroy( pjmedia_port *port );",
          "505: PJ_END_DECL",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "534: PJ_DECL(pj_status_t) pjmedia_port_init_grp_lock( pjmedia_port *port,",
          "535:        pj_pool_t *pool,",
          "536:        pj_grp_lock_t *glock );",
          "546: PJ_DECL(pj_status_t) pjmedia_port_add_ref( pjmedia_port *port );",
          "556: PJ_DECL(pj_status_t) pjmedia_port_dec_ref( pjmedia_port *port );",
          "",
          "---------------"
        ],
        "pjmedia/src/pjmedia/port.c||pjmedia/src/pjmedia/port.c": [
          "File: pjmedia/src/pjmedia/port.c -> pjmedia/src/pjmedia/port.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "125: PJ_DEF(pj_status_t) pjmedia_port_destroy( pjmedia_port *port )",
          "126: {",
          "129:     PJ_ASSERT_RETURN(port, PJ_EINVAL);",
          "131:     if (port->on_destroy)",
          "136:     return status;",
          "137: }",
          "",
          "[Removed Lines]",
          "127:     pj_status_t status;",
          "132:  status = port->on_destroy(port);",
          "133:     else",
          "134:  status = PJ_SUCCESS;",
          "",
          "[Added Lines]",
          "129:     if (port->grp_lock) {",
          "130:  pjmedia_port_dec_ref(port);",
          "131:  return PJ_SUCCESS;",
          "132:     }",
          "134:     if (port->on_destroy) {",
          "135:  return port->on_destroy(port);",
          "136:     }",
          "138:     return PJ_SUCCESS;",
          "139: }",
          "143: static void port_on_destroy(void *arg)",
          "144: {",
          "145:     pjmedia_port *port = (pjmedia_port*)arg;",
          "147:  port->on_destroy(port);",
          "148: }",
          "154: PJ_DEF(pj_status_t) pjmedia_port_init_grp_lock( pjmedia_port *port,",
          "155:       pj_pool_t *pool,",
          "156:       pj_grp_lock_t *glock )",
          "157: {",
          "158:     pj_grp_lock_t *grp_lock = glock;",
          "159:     pj_status_t status;",
          "161:     PJ_ASSERT_RETURN(port && pool, PJ_EINVAL);",
          "162:     PJ_ASSERT_RETURN(port->grp_lock == NULL, PJ_EEXISTS);",
          "168:     if (port->on_destroy == NULL) {",
          "169:  PJ_LOG(3,(THIS_FILE, \"Media port %s is using group lock but does not \"",
          "170:         \"implement on_destroy()!\",",
          "171:         port->info.name.ptr));",
          "172:  pj_assert(!\"Port using group lock should implement on_destroy()!\");",
          "173:  return PJ_EINVALIDOP;",
          "174:     }",
          "176:     if (!grp_lock) {",
          "178:  status = pj_grp_lock_create_w_handler(pool, NULL, port,",
          "179:            &port_on_destroy,",
          "180:            &grp_lock);",
          "181:     } else {",
          "183:  status = pj_grp_lock_add_handler(grp_lock, NULL, port,",
          "184:       &port_on_destroy);",
          "185:     }",
          "187:     if (status == PJ_SUCCESS) {",
          "188:  status = pj_grp_lock_add_ref(grp_lock);",
          "189:     }",
          "191:     if (status == PJ_SUCCESS) {",
          "192:  port->grp_lock = grp_lock;",
          "193:     } else if (grp_lock && !glock) {",
          "195:  pj_grp_lock_destroy(grp_lock);",
          "196:     }",
          "205: PJ_DEF(pj_status_t) pjmedia_port_add_ref( pjmedia_port *port )",
          "206: {",
          "207:     PJ_ASSERT_RETURN(port, PJ_EINVAL);",
          "208:     PJ_ASSERT_RETURN(port->grp_lock, PJ_EINVALIDOP);",
          "210:     return pj_grp_lock_add_ref(port->grp_lock);",
          "211: }",
          "217: PJ_DEF(pj_status_t) pjmedia_port_dec_ref( pjmedia_port *port )",
          "218: {",
          "219:     PJ_ASSERT_RETURN(port, PJ_EINVAL);",
          "220:     PJ_ASSERT_RETURN(port->grp_lock, PJ_EINVALIDOP);",
          "222:     return pj_grp_lock_dec_ref(port->grp_lock);",
          "223: }",
          "",
          "---------------"
        ],
        "pjmedia/src/pjmedia/stream.c||pjmedia/src/pjmedia/stream.c": [
          "File: pjmedia/src/pjmedia/stream.c -> pjmedia/src/pjmedia/stream.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2799:     att_param.rtcp_cb = &on_rx_rtcp;",
          "2802:     status = pjmedia_transport_attach2(tp, &att_param);",
          "2803:     if (status != PJ_SUCCESS)",
          "2804:  goto err_cleanup;",
          "2808: #if defined(PJMEDIA_HAS_RTCP_XR) && (PJMEDIA_HAS_RTCP_XR != 0)",
          "2810:     if (info->rtcp_xr_enabled) {",
          "",
          "[Removed Lines]",
          "2806:     stream->transport = tp;",
          "",
          "[Added Lines]",
          "2802:     stream->transport = tp;",
          "",
          "---------------"
        ],
        "pjmedia/src/pjmedia/vid_conf.c||pjmedia/src/pjmedia/vid_conf.c": [
          "File: pjmedia/src/pjmedia/vid_conf.c -> pjmedia/src/pjmedia/vid_conf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "46: #define TRACE_(x) PJ_LOG(5,x)",
          "52: struct pjmedia_vid_conf",
          "53: {",
          "60: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "50: typedef struct op_entry op_entry;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "119:      unsigned transmitter_idx);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "137: typedef enum op_type",
          "138: {",
          "139:     OP_UNKNOWN,",
          "140:     OP_REMOVE_PORT,",
          "141:     OP_CONNECT_PORTS,",
          "142:     OP_DISCONNECT_PORTS,",
          "143:     OP_UPDATE_PORT",
          "144: } op_type;",
          "147: typedef union op_param",
          "148: {",
          "149:     struct {",
          "150:  unsigned port;",
          "151:     } remove_port;",
          "153:     struct {",
          "154:  unsigned src;",
          "155:  unsigned sink;",
          "156:     } connect_ports;",
          "158:     struct {",
          "159:  unsigned src;",
          "160:  unsigned sink;",
          "161:     } disconnect_ports;",
          "163:     struct {",
          "164:  unsigned port;",
          "165:     } update_port;",
          "167: } op_param;",
          "170: typedef struct op_entry {",
          "171:     PJ_DECL_LIST_MEMBER(struct op_entry);",
          "172:     op_type      type;",
          "173:     op_param      param;",
          "174: } op_entry;",
          "177: static void op_remove_port(pjmedia_vid_conf *conf, const op_param *prm);",
          "178: static void op_connect_ports(pjmedia_vid_conf *conf, const op_param *prm);",
          "179: static void op_disconnect_ports(pjmedia_vid_conf *conf, const op_param *prm);",
          "180: static void op_update_port(pjmedia_vid_conf *conf, const op_param *prm);",
          "182: static op_entry* get_free_op_entry(pjmedia_vid_conf *conf)",
          "183: {",
          "184:     op_entry *ope = NULL;",
          "187:     if (!pj_list_empty(conf->op_queue_free)) {",
          "188:  ope = conf->op_queue_free->next;",
          "189:  pj_list_erase(ope);",
          "190:     } else {",
          "191:  ope = PJ_POOL_ZALLOC_T(conf->pool, op_entry);",
          "192:     }",
          "193:     return ope;",
          "194: }",
          "196: static void handle_op_queue(pjmedia_vid_conf *conf)",
          "197: {",
          "198:     op_entry *op, *next_op;",
          "200:     op = conf->op_queue->next;",
          "201:     while (op != conf->op_queue) {",
          "202:  next_op = op->next;",
          "203:  pj_list_erase(op);",
          "205:  switch(op->type) {",
          "206:      case OP_REMOVE_PORT:",
          "207:   op_remove_port(conf, &op->param);",
          "208:   break;",
          "209:      case OP_CONNECT_PORTS:",
          "210:   op_connect_ports(conf, &op->param);",
          "211:   break;",
          "212:      case OP_DISCONNECT_PORTS:",
          "213:   op_disconnect_ports(conf, &op->param);",
          "214:   break;",
          "215:      case OP_UPDATE_PORT:",
          "216:   op_update_port(conf, &op->param);",
          "217:   break;",
          "218:      default:",
          "219:   pj_assert(!\"Invalid sync-op in video conference\");",
          "220:   break;",
          "221:  }",
          "223:  op->type = OP_UNKNOWN;",
          "224:  pj_list_push_back(conf->op_queue_free, op);",
          "225:  op = next_op;",
          "226:     }",
          "227: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "136: PJ_DEF(pj_status_t) pjmedia_vid_conf_create(",
          "138:      const pjmedia_vid_conf_setting *opt,",
          "139:      pjmedia_vid_conf **p_vid_conf)",
          "140: {",
          "141:     pjmedia_vid_conf *vid_conf;",
          "142:     pjmedia_clock_param clock_param;",
          "143:     pj_status_t status;",
          "148:     vid_conf = PJ_POOL_ZALLOC_T(pool, pjmedia_vid_conf);",
          "149:     PJ_ASSERT_RETURN(vid_conf, PJ_ENOMEM);",
          "152:     if (opt) {",
          "",
          "[Removed Lines]",
          "137:      pj_pool_t *pool,",
          "145:     PJ_ASSERT_RETURN(pool && p_vid_conf, PJ_EINVAL);",
          "",
          "[Added Lines]",
          "245:      pj_pool_t *parent_pool,",
          "249:     pj_pool_t *pool;",
          "254:     PJ_ASSERT_RETURN(parent_pool && p_vid_conf, PJ_EINVAL);",
          "257:     pool = pj_pool_create(parent_pool->factory, \"vidconf\", 500, 500, NULL);",
          "258:     if (!pool) {",
          "259:  return PJ_ENOMEM;",
          "260:     }",
          "265:     vid_conf->pool = pool;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "159:     vid_conf->ports = (vconf_port**)",
          "160:         pj_pool_zalloc(pool, vid_conf->opt.max_slot_cnt *",
          "161:         sizeof(vconf_port*));",
          "165:     status = pj_mutex_create_recursive(pool, CONF_NAME, &vid_conf->mutex);",
          "",
          "[Removed Lines]",
          "162:     PJ_ASSERT_RETURN(vid_conf->ports, PJ_ENOMEM);",
          "",
          "[Added Lines]",
          "278:     if (!vid_conf->ports) {",
          "279:  pjmedia_vid_conf_destroy(vid_conf);",
          "280:  return PJ_ENOMEM;",
          "281:     }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "179:  return status;",
          "180:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "302:     vid_conf->op_queue = PJ_POOL_ZALLOC_T(pool, op_entry);",
          "303:     vid_conf->op_queue_free = PJ_POOL_ZALLOC_T(pool, op_entry);",
          "304:     if (!vid_conf->op_queue || !vid_conf->op_queue_free) {",
          "305:  pjmedia_vid_conf_destroy(vid_conf);",
          "306:  return PJ_ENOMEM;",
          "307:     }",
          "308:     pj_list_init(vid_conf->op_queue);",
          "309:     pj_list_init(vid_conf->op_queue_free);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "199:     PJ_ASSERT_RETURN(vid_conf, PJ_EINVAL);",
          "202:     if (vid_conf->clock) {",
          "203:  pjmedia_clock_destroy(vid_conf->clock);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "330:     PJ_LOG(5,(THIS_FILE, \"Video conference bridge destroy requested\"));",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "208:     for (i=0; i < vid_conf->opt.max_slot_cnt; ++i) {",
          "210:     }",
          "",
          "[Removed Lines]",
          "209:  pjmedia_vid_conf_remove_port(vid_conf, i);",
          "",
          "[Added Lines]",
          "340:  if (vid_conf->ports[i]) {",
          "341:      op_param prm;",
          "342:      prm.remove_port.port = i;",
          "343:      op_remove_port(vid_conf, &prm);",
          "344:  }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "215:  vid_conf->mutex = NULL;",
          "216:     }",
          "218:     PJ_LOG(5,(THIS_FILE, \"Video conference bridge destroyed\"));",
          "220:     return PJ_SUCCESS;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "354:     if (vid_conf->pool) {",
          "355:  pj_pool_safe_release(&vid_conf->pool);",
          "356:     }",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "231:             void *opt,",
          "232:             unsigned *p_slot)",
          "233: {",
          "236:     unsigned index;",
          "238:     PJ_ASSERT_RETURN(vid_conf && parent_pool && port, PJ_EINVAL);",
          "239:     PJ_ASSERT_RETURN(port->info.fmt.type==PJMEDIA_TYPE_VIDEO &&",
          "",
          "[Removed Lines]",
          "234:     pj_pool_t *pool;",
          "235:     vconf_port *cport;",
          "",
          "[Added Lines]",
          "374:     pj_pool_t *pool = NULL;",
          "375:     vconf_port *cport = NULL;",
          "377:     pj_status_t status = PJ_SUCCESS;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "264:     pool = pj_pool_create(parent_pool->factory, name->ptr, 500, 500, NULL);",
          "268:     cport = PJ_POOL_ZALLOC_T(pool, vconf_port);",
          "272:     cport->pool = pool;",
          "",
          "[Removed Lines]",
          "265:     PJ_ASSERT_RETURN(pool, PJ_ENOMEM);",
          "269:     PJ_ASSERT_RETURN(cport, PJ_ENOMEM);",
          "",
          "[Added Lines]",
          "406:     if (!pool) {",
          "407:  status = PJ_ENOMEM;",
          "408:  goto on_error;",
          "409:     }",
          "413:     if (!cport) {",
          "414:  status = PJ_ENOMEM;",
          "415:  goto on_error;",
          "416:     }",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "275:     cport->idx  = index;",
          "276:     pj_strdup_with_null(pool, &cport->name, name);",
          "279:     {",
          "280:  pjmedia_ratio *fps = &port->info.fmt.det.vid.fps;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "426:     if (!port->grp_lock) {",
          "427:  status = pjmedia_port_init_grp_lock(port, pool, NULL);",
          "428:  if (status != PJ_SUCCESS)",
          "429:      goto on_error;",
          "430:     }",
          "433:     pjmedia_port_add_ref(port);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "298:     {",
          "299:  const pjmedia_video_format_info *vfi;",
          "300:  pjmedia_video_apply_fmt_param vafp;",
          "303:  vfi = pjmedia_get_video_format_info(NULL, port->info.fmt.id);",
          "304:  if (!vfi) {",
          "305:      PJ_LOG(4,(THIS_FILE, \"pjmedia_vid_conf_add_port(): \"",
          "306:      \"unrecognized format %04X\",",
          "307:      port->info.fmt.id));",
          "310:  }",
          "312:  pj_bzero(&vafp, sizeof(vafp));",
          "",
          "[Removed Lines]",
          "301:  pj_status_t status;",
          "308:      pj_mutex_unlock(vid_conf->mutex);",
          "309:      return PJMEDIA_EBADFMT;",
          "",
          "[Added Lines]",
          "464:      status = PJMEDIA_EBADFMT;",
          "465:      goto on_error;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "316:      PJ_LOG(4,(THIS_FILE, \"pjmedia_vid_conf_add_port(): \"",
          "317:      \"Failed to apply format %04X\",",
          "318:      port->info.fmt.id));",
          "321:  }",
          "322:  if (port->put_frame) {",
          "323:      cport->put_buf_size = vafp.framebytes;",
          "324:      cport->put_buf = pj_pool_zalloc(cport->pool, cport->put_buf_size);",
          "325:  }",
          "326:  if (port->get_frame) {",
          "327:      cport->get_buf_size = vafp.framebytes;",
          "328:      cport->get_buf = pj_pool_zalloc(cport->pool, cport->get_buf_size);",
          "329:  }",
          "330:     }",
          "",
          "[Removed Lines]",
          "319:      pj_mutex_unlock(vid_conf->mutex);",
          "320:      return status;",
          "",
          "[Added Lines]",
          "475:      goto on_error;",
          "482:      status = pjmedia_video_format_fill_black(&port->info.fmt,",
          "483:            cport->put_buf,",
          "484:            cport->put_buf_size);",
          "485:      if (status != PJ_SUCCESS) {",
          "486:   PJ_PERROR(4,(THIS_FILE, status,",
          "487:         \"Warning: failed to init sink buffer \"",
          "488:         \" with black\"));",
          "489:      }",
          "496:      status = pjmedia_video_format_fill_black(&port->info.fmt,",
          "497:            cport->get_buf,",
          "498:            cport->get_buf_size);",
          "499:      if (status != PJ_SUCCESS) {",
          "500:   PJ_PERROR(4,(THIS_FILE, status,",
          "501:         \"Warning: failed to init source buffer \"",
          "502:         \"with black\"));",
          "503:      }",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "335:         vid_conf->opt.max_slot_cnt *",
          "336:         sizeof(unsigned));",
          "337:     if (!cport->listener_slots) {",
          "340:     }",
          "",
          "[Removed Lines]",
          "338:  pj_mutex_unlock(vid_conf->mutex);",
          "339:  return PJ_ENOMEM;",
          "",
          "[Added Lines]",
          "513:  status = PJ_ENOMEM;",
          "514:  goto on_error;",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "345:            vid_conf->opt.max_slot_cnt *",
          "346:            sizeof(unsigned));",
          "347:     if (!cport->transmitter_slots) {",
          "350:     }",
          "",
          "[Removed Lines]",
          "348:  pj_mutex_unlock(vid_conf->mutex);",
          "349:  return PJ_ENOMEM;",
          "",
          "[Added Lines]",
          "523:  status = PJ_ENOMEM;",
          "524:  goto on_error;",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "356:        sizeof(render_state*));",
          "358:     if (!cport->render_states) {",
          "361:     }",
          "",
          "[Removed Lines]",
          "359:  pj_mutex_unlock(vid_conf->mutex);",
          "360:  return PJ_ENOMEM;",
          "",
          "[Added Lines]",
          "534:  status = PJ_ENOMEM;",
          "535:  goto on_error;",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "366:      vid_conf->opt.max_slot_cnt *",
          "367:      sizeof(pj_pool_t*));",
          "368:     if (!cport->render_pool) {",
          "371:     }",
          "",
          "[Removed Lines]",
          "369:  pj_mutex_unlock(vid_conf->mutex);",
          "370:  return PJ_ENOMEM;",
          "",
          "[Added Lines]",
          "544:  status = PJ_ENOMEM;",
          "545:  goto on_error;",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "385:     }",
          "387:     return PJ_SUCCESS;",
          "388: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "564: on_error:",
          "565:     if (pool)",
          "566:  pj_pool_release(pool);",
          "568:     pj_mutex_unlock(vid_conf->mutex);",
          "569:     return status;",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "395:         unsigned slot)",
          "396: {",
          "397:     vconf_port *cport;",
          "399:     PJ_ASSERT_RETURN(vid_conf && slot<vid_conf->opt.max_slot_cnt, PJ_EINVAL);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "580:     op_entry *ope;",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "407:  return PJ_EINVAL;",
          "408:     }",
          "411:     while (cport->listener_cnt) {",
          "414:     }",
          "417:     while (cport->transmitter_cnt) {",
          "420:     }",
          "",
          "[Removed Lines]",
          "412:  pjmedia_vid_conf_disconnect_port(vid_conf, slot,",
          "413:       cport->listener_slots[0]);",
          "418:  pjmedia_vid_conf_disconnect_port(vid_conf,",
          "419:       cport->transmitter_slots[0], slot);",
          "",
          "[Added Lines]",
          "593:     PJ_LOG(5,(THIS_FILE, \"Video port %d remove requested\", slot));",
          "596:     ope = get_free_op_entry(vid_conf);",
          "597:     ope->type = OP_REMOVE_PORT;",
          "598:     ope->param.remove_port.port = slot;",
          "599:     pj_list_push_back(vid_conf->op_queue, ope);",
          "601:     pj_mutex_unlock(vid_conf->mutex);",
          "603:     return PJ_SUCCESS;",
          "604: }",
          "607: static void op_remove_port(pjmedia_vid_conf *vid_conf,",
          "608:       const op_param *prm)",
          "609: {",
          "610:     unsigned slot = prm->remove_port.port;",
          "611:     vconf_port *cport = vid_conf->ports[slot];",
          "613:     pj_assert(cport);",
          "617:  op_param p;",
          "618:  p.disconnect_ports.src = slot;",
          "619:  p.disconnect_ports.sink = cport->listener_slots[0];",
          "620:  op_disconnect_ports(vid_conf, &p);",
          "625:  op_param p;",
          "626:  p.disconnect_ports.src = cport->transmitter_slots[0];",
          "627:  p.disconnect_ports.sink = slot;",
          "628:  op_disconnect_ports(vid_conf, &p);",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "426:     PJ_LOG(4,(THIS_FILE,\"Removed port %d (%.*s)\",",
          "427:        slot, (int)cport->name.slen, cport->name.ptr));",
          "430:     pj_pool_safe_release(&cport->pool);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "639:     pjmedia_port_dec_ref(cport->port);",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "436:  status = pjmedia_clock_stop(vid_conf->clock);",
          "437:  if (status != PJ_SUCCESS) {",
          "438:      PJ_PERROR(4, (THIS_FILE, status, \"Failed to stop clock\"));",
          "441:  }",
          "442:     }",
          "447: }",
          "",
          "[Removed Lines]",
          "439:      pj_mutex_unlock(vid_conf->mutex);",
          "440:      return status;",
          "444:     pj_mutex_unlock(vid_conf->mutex);",
          "446:     return PJ_SUCCESS;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "563:      break;",
          "564:     }",
          "566:     if (i == src_port->listener_cnt) {",
          "592:     }",
          "594:     pj_mutex_unlock(vid_conf->mutex);",
          "",
          "[Removed Lines]",
          "567:  src_port->listener_slots[src_port->listener_cnt] = sink_slot;",
          "568:  dst_port->transmitter_slots[dst_port->transmitter_cnt] = src_slot;",
          "569:  ++src_port->listener_cnt;",
          "570:  ++dst_port->transmitter_cnt;",
          "572:  update_render_state(vid_conf, dst_port);",
          "574:  ++vid_conf->connect_cnt;",
          "575:  if (vid_conf->connect_cnt == 1) {",
          "576:      pj_status_t status;",
          "577:      status = pjmedia_clock_start(vid_conf->clock);",
          "578:      if (status != PJ_SUCCESS) {",
          "579:   PJ_PERROR(4, (THIS_FILE, status, \"Failed to start clock\"));",
          "580:   pj_mutex_unlock(vid_conf->mutex);",
          "581:   return status;",
          "582:      }",
          "583:  }",
          "585:  PJ_LOG(4,(THIS_FILE,\"Port %d (%.*s) transmitting to port %d (%.*s)\",",
          "586:     src_slot,",
          "587:     (int)src_port->name.slen,",
          "588:     src_port->name.ptr,",
          "589:     sink_slot,",
          "590:     (int)dst_port->name.slen,",
          "591:     dst_port->name.ptr));",
          "",
          "[Added Lines]",
          "773:  op_entry *ope;",
          "775:  PJ_LOG(5,(THIS_FILE, \"Video connect ports %d->%d requested\",",
          "776:         src_slot, sink_slot));",
          "778:  ope = get_free_op_entry(vid_conf);",
          "779:  ope->type = OP_CONNECT_PORTS;",
          "780:  ope->param.connect_ports.src = src_slot;",
          "781:  ope->param.connect_ports.sink = sink_slot;",
          "782:  pj_list_push_back(vid_conf->op_queue, ope);",
          "783:     }",
          "786:     if (vid_conf->connect_cnt == 0) {",
          "787:  pj_status_t status;",
          "788:  status = pjmedia_clock_start(vid_conf->clock);",
          "789:  if (status != PJ_SUCCESS) {",
          "790:      PJ_PERROR(4, (THIS_FILE, status, \"Failed to start clock\"));",
          "791:      pj_mutex_unlock(vid_conf->mutex);",
          "792:      return status;",
          "793:  }",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "596:     return PJ_SUCCESS;",
          "597: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "801: static void op_connect_ports(pjmedia_vid_conf *vid_conf,",
          "802:         const op_param *prm)",
          "803: {",
          "804:     unsigned src_slot, sink_slot;",
          "805:     vconf_port *src_port, *dst_port;",
          "806:     unsigned i;",
          "809:     src_slot = prm->connect_ports.src;",
          "810:     sink_slot = prm->connect_ports.sink;",
          "811:     src_port = vid_conf->ports[src_slot];",
          "812:     dst_port = vid_conf->ports[sink_slot];",
          "813:     pj_assert(src_port && src_port->port && src_port->port->get_frame);",
          "814:     pj_assert(dst_port && dst_port->port && dst_port->port->put_frame);",
          "817:     for (i=0; i<src_port->listener_cnt; ++i) {",
          "818:  if (src_port->listener_slots[i] == sink_slot)",
          "819:      return;",
          "820:     }",
          "823:     src_port->listener_slots[src_port->listener_cnt] = sink_slot;",
          "824:     dst_port->transmitter_slots[dst_port->transmitter_cnt] = src_slot;",
          "825:     ++src_port->listener_cnt;",
          "826:     ++dst_port->transmitter_cnt;",
          "827:     ++vid_conf->connect_cnt;",
          "829:     update_render_state(vid_conf, dst_port);",
          "831:     PJ_LOG(4,(THIS_FILE,\"Port %d (%.*s) transmitting to port %d (%.*s)\",",
          "832:        src_slot,",
          "833:        (int)src_port->name.slen,",
          "834:        src_port->name.ptr,",
          "835:        sink_slot,",
          "836:        (int)dst_port->name.slen,",
          "837:        dst_port->name.ptr));",
          "838: }",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "635:     }",
          "637:     if (i != src_port->listener_cnt && j != dst_port->transmitter_cnt) {",
          "640:  pj_assert(src_port->listener_cnt > 0 &&",
          "641:     src_port->listener_cnt < vid_conf->opt.max_slot_cnt);",
          "642:  pj_assert(dst_port->transmitter_cnt > 0 &&",
          "643:     dst_port->transmitter_cnt < vid_conf->opt.max_slot_cnt);",
          "683:     }",
          "685:     pj_mutex_unlock(vid_conf->mutex);",
          "",
          "[Removed Lines]",
          "638:  unsigned k;",
          "646:  for (k=0; k<dst_port->transmitter_cnt; ++k)",
          "647:      cleanup_render_state(dst_port, k);",
          "652:  pj_array_erase(src_port->listener_slots, sizeof(unsigned),",
          "653:          src_port->listener_cnt, i);",
          "654:  pj_array_erase(dst_port->transmitter_slots, sizeof(unsigned),",
          "655:          dst_port->transmitter_cnt, j);",
          "656:  --src_port->listener_cnt;",
          "657:  --dst_port->transmitter_cnt;",
          "660:  update_render_state(vid_conf, dst_port);",
          "662:  --vid_conf->connect_cnt;",
          "664:  if (AUTO_STOP_CLOCK && vid_conf->connect_cnt == 0) {",
          "665:      pj_status_t status;",
          "667:      status = pjmedia_clock_stop(vid_conf->clock);",
          "668:      if (status != PJ_SUCCESS) {",
          "669:   PJ_PERROR(4, (THIS_FILE, status, \"Failed to stop clock\"));",
          "670:   pj_mutex_unlock(vid_conf->mutex);",
          "671:   return status;",
          "672:      }",
          "673:  }",
          "675:  PJ_LOG(4,(THIS_FILE,",
          "676:     \"Port %d (%.*s) stop transmitting to port %d (%.*s)\",",
          "677:     src_slot,",
          "678:     (int)src_port->name.slen,",
          "679:     src_port->name.ptr,",
          "680:     sink_slot,",
          "681:     (int)dst_port->name.slen,",
          "682:     dst_port->name.ptr));",
          "",
          "[Added Lines]",
          "884:  if (i == src_port->listener_cnt) {",
          "885:      op_entry *ope;",
          "887:      PJ_LOG(5,(THIS_FILE, \"Video disconnect ports %d->%d requested\",",
          "888:      src_slot, sink_slot));",
          "890:      ope = get_free_op_entry(vid_conf);",
          "891:      ope->type = OP_DISCONNECT_PORTS;",
          "892:      ope->param.disconnect_ports.src = src_slot;",
          "893:      ope->param.disconnect_ports.sink = sink_slot;",
          "894:      pj_list_push_back(vid_conf->op_queue, ope);",
          "895:  }",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "687:     return PJ_SUCCESS;",
          "688: }",
          "695: static void on_clock_tick(const pj_timestamp *now, void *user_data)",
          "696: {",
          "697:     pjmedia_vid_conf *vid_conf = (pjmedia_vid_conf*)user_data;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "903: static void op_disconnect_ports(pjmedia_vid_conf *vid_conf,",
          "904:     const op_param *prm)",
          "905: {",
          "906:     unsigned src_slot, sink_slot;",
          "907:     vconf_port *src_port, *dst_port;",
          "908:     unsigned i, j, k;",
          "911:     src_slot = prm->disconnect_ports.src;",
          "912:     sink_slot = prm->disconnect_ports.sink;",
          "913:     src_port = vid_conf->ports[src_slot];",
          "914:     dst_port = vid_conf->ports[sink_slot];",
          "915:     pj_assert(src_port && dst_port);",
          "918:     for (i=0; i<src_port->listener_cnt; ++i) {",
          "919:  if (src_port->listener_slots[i] == sink_slot)",
          "920:      break;",
          "921:     }",
          "922:     for (j=0; j<dst_port->transmitter_cnt; ++j) {",
          "923:  if (dst_port->transmitter_slots[j] == src_slot)",
          "924:      break;",
          "925:     }",
          "927:     if (i == src_port->listener_cnt || j == dst_port->transmitter_cnt)",
          "928:  return;",
          "930:     pj_assert(src_port->listener_cnt > 0 &&",
          "931:        src_port->listener_cnt < vid_conf->opt.max_slot_cnt);",
          "932:     pj_assert(dst_port->transmitter_cnt > 0 &&",
          "933:        dst_port->transmitter_cnt < vid_conf->opt.max_slot_cnt);",
          "936:     for (k=0; k<dst_port->transmitter_cnt; ++k)",
          "937:  cleanup_render_state(dst_port, k);",
          "942:     pj_array_erase(src_port->listener_slots, sizeof(unsigned),",
          "943:      src_port->listener_cnt, i);",
          "944:     pj_array_erase(dst_port->transmitter_slots, sizeof(unsigned),",
          "945:      dst_port->transmitter_cnt, j);",
          "946:     --src_port->listener_cnt;",
          "947:     --dst_port->transmitter_cnt;",
          "950:     update_render_state(vid_conf, dst_port);",
          "952:     --vid_conf->connect_cnt;",
          "954:     if (AUTO_STOP_CLOCK && vid_conf->connect_cnt == 0) {",
          "955:  pj_status_t status;",
          "957:  status = pjmedia_clock_stop(vid_conf->clock);",
          "958:  if (status != PJ_SUCCESS) {",
          "959:      PJ_PERROR(4, (THIS_FILE, status, \"Failed to stop clock\"));",
          "960:      return;",
          "961:  }",
          "962:     }",
          "964:     PJ_LOG(4,(THIS_FILE,",
          "965:        \"Port %d (%.*s) stop transmitting to port %d (%.*s)\",",
          "966:        src_slot,",
          "967:        (int)src_port->name.slen,",
          "968:        src_port->name.ptr,",
          "969:        sink_slot,",
          "970:        (int)dst_port->name.slen,",
          "971:        dst_port->name.ptr));",
          "972: }",
          "980: static int cmp_fps(const pjmedia_format *fmt1, const pjmedia_format *fmt2)",
          "981: {",
          "982:     return (fmt1->det.vid.fps.num != fmt2->det.vid.fps.num ||",
          "983:      fmt1->det.vid.fps.denum != fmt2->det.vid.fps.denum);",
          "984: }",
          "988: static int cmp_size(const pjmedia_format *fmt1, const pjmedia_format *fmt2)",
          "989: {",
          "991:     return (fmt1->id != fmt2->id ||",
          "992:      fmt1->det.vid.size.w != fmt2->det.vid.size.w ||",
          "993:      fmt1->det.vid.size.h != fmt2->det.vid.size.h);",
          "994: }",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "700:     pjmedia_frame frame;",
          "701:     pj_status_t status;",
          "706:     for (i=0, ci=0; i<vid_conf->opt.max_slot_cnt &&",
          "",
          "[Removed Lines]",
          "703:     pj_mutex_lock(vid_conf->mutex);",
          "",
          "[Added Lines]",
          "1008:     if (!pj_list_empty(vid_conf->op_queue)) {",
          "1009:  pj_mutex_lock(vid_conf->mutex);",
          "1010:  handle_op_queue(vid_conf);",
          "1011:  pj_mutex_unlock(vid_conf->mutex);",
          "1012:     }",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "710:  pj_bool_t frame_rendered = PJ_FALSE;",
          "711:  pj_bool_t ts_incremented = PJ_FALSE;",
          "712:  vconf_port *sink = vid_conf->ports[i];",
          "715:  if (!sink)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1031:  pjmedia_format *cur_fmt, *new_fmt;",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "746:  for (j=0; j < sink->transmitter_cnt; ++j) {",
          "",
          "[Removed Lines]",
          "739:      if (pj_memcmp(&sink->format, &sink->port->info.fmt,",
          "740:             sizeof(pjmedia_format)))",
          "741:      {",
          "742:          pjmedia_vid_conf_update_port(vid_conf, i);",
          "743:      }",
          "",
          "[Added Lines]",
          "1058:  cur_fmt = &sink->format;",
          "1059:  new_fmt = &sink->port->info.fmt;",
          "1060:  if (cmp_fps(cur_fmt, new_fmt) || cmp_size(cur_fmt, new_fmt)) {",
          "1061:      op_param prm;",
          "1062:      prm.update_port.port = sink->idx;",
          "1063:      op_update_port(vid_conf, &prm);",
          "1064:  }",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "772:       src->got_frame = PJ_FALSE;",
          "773:   } else {",
          "774:       src->got_frame = (frame.size == src->get_buf_size);",
          "775:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1100:       cur_fmt = &src->format;",
          "1101:       new_fmt = &src->port->info.fmt;",
          "1102:       if (cmp_fps(cur_fmt, new_fmt) ||",
          "1103:    cmp_size(cur_fmt, new_fmt))",
          "1104:       {",
          "1105:    op_param prm;",
          "1106:    prm.update_port.port = src->idx;",
          "1107:    op_update_port(vid_conf, &prm);",
          "1108:       }",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "834:      pj_add_timestamp32(&sink->ts_next, sink->ts_interval);",
          "835:  }",
          "836:     }",
          "839: }",
          "841: static pj_bool_t is_landscape(const pjmedia_rect_size *size) {",
          "",
          "[Removed Lines]",
          "838:     pj_mutex_unlock(vid_conf->mutex);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "906:     fmt_id = cp->port->info.fmt.id;",
          "907:     size   = cp->port->info.fmt.det.vid.size;",
          "932:     if (cp->transmitter_cnt == 0)",
          "933:  return;",
          "",
          "[Removed Lines]",
          "910:     if (cp->port->put_frame) {",
          "911:  status = pjmedia_video_format_fill_black(&cp->port->info.fmt,",
          "912:        cp->put_buf,",
          "913:        cp->put_buf_size);",
          "914:  if (status != PJ_SUCCESS) {",
          "915:      PJ_PERROR(4,(THIS_FILE, status,",
          "916:     \"Warning: failed to init sink buffer with black\"));",
          "917:  }",
          "918:     }",
          "921:     if (cp->port->get_frame) {",
          "922:  status = pjmedia_video_format_fill_black(&cp->port->info.fmt,",
          "923:        cp->get_buf,",
          "924:        cp->get_buf_size);",
          "925:  if (status != PJ_SUCCESS) {",
          "926:      PJ_PERROR(4,(THIS_FILE, status,",
          "927:     \"Warning: failed to init source buffer with black\"));",
          "928:  }",
          "929:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "953:     if (cp->transmitter_cnt == 1 && fmt_id == tr_fmt_id[0] &&",
          "955:     {",
          "956:  TRACE_((THIS_FILE, \"This port only has single source with \"",
          "957:       \"matched format & size, no conversion needed\"));",
          "",
          "[Removed Lines]",
          "954:  pj_memcmp(&size, &tr_size[0], sizeof(size))==0)",
          "",
          "[Added Lines]",
          "1264:  size.w == tr_size[0].w && size.h == tr_size[0].h)",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "1156:         unsigned slot)",
          "1157: {",
          "1158:     vconf_port *cport;",
          "1162:     PJ_ASSERT_RETURN(vid_conf && slot<vid_conf->opt.max_slot_cnt, PJ_EINVAL);",
          "",
          "[Removed Lines]",
          "1159:     pjmedia_format old_fmt;",
          "1160:     pjmedia_format new_fmt;",
          "",
          "[Added Lines]",
          "1469:     op_entry *ope;",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "1170:  return PJ_EINVAL;",
          "1171:     }",
          "1180:     {",
          "1182:  pj_uint32_t vconf_interval = (pj_uint32_t)",
          "1183:          (TS_CLOCK_RATE * 1.0 /",
          "1184:          vid_conf->opt.frame_rate);",
          "",
          "[Removed Lines]",
          "1174:     old_fmt = cport->format;",
          "1175:     new_fmt = cport->port->info.fmt;",
          "1178:     if (pj_memcmp(&new_fmt.det.vid.fps, &old_fmt.det.vid.fps,",
          "1179:     sizeof(pjmedia_ratio)))",
          "1181:  pjmedia_ratio *fps = &new_fmt.det.vid.fps;",
          "",
          "[Added Lines]",
          "1483:     ope = get_free_op_entry(vid_conf);",
          "1484:     ope->type = OP_UPDATE_PORT;",
          "1485:     ope->param.update_port.port = slot;",
          "1486:     pj_list_push_back(vid_conf->op_queue, ope);",
          "1488:     pj_mutex_unlock(vid_conf->mutex);",
          "1490:     return PJ_SUCCESS;",
          "1491: }",
          "1494: static void op_update_port(pjmedia_vid_conf *vid_conf,",
          "1495:       const op_param *prm)",
          "1496: {",
          "1497:     unsigned slot = prm->update_port.port;",
          "1498:     vconf_port *cport = vid_conf->ports[slot];",
          "1499:     pjmedia_format *old_fmt;",
          "1500:     pjmedia_format *new_fmt;",
          "1503:     pj_assert(cport);",
          "1506:     old_fmt = &cport->format;",
          "1507:     new_fmt = &cport->port->info.fmt;",
          "1510:     if (cmp_fps(new_fmt, old_fmt))",
          "1512:  pjmedia_ratio *fps = &new_fmt->det.vid.fps;",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "1197:  PJ_LOG(4,(THIS_FILE,",
          "1198:     \"Port %d (%s): updated frame rate %d -> %d\",",
          "1199:     slot, cport->name.ptr,",
          "1201:     (int)(fps->num/fps->denum)));",
          "1202:     }",
          "1208:     {",
          "1209:  const pjmedia_video_format_info *vfi;",
          "1210:  pjmedia_video_apply_fmt_param vafp;",
          "1211:  pj_status_t status;",
          "1212:  unsigned i;",
          "1215:  if (!vfi) {",
          "1216:      PJ_LOG(1,(THIS_FILE, \"pjmedia_vid_conf_update_port(): \"",
          "1217:      \"unrecognized format %04X\",",
          "1221:  }",
          "1223:  pj_bzero(&vafp, sizeof(vafp));",
          "1225:  status = (*vfi->apply_fmt)(vfi, &vafp);",
          "1226:  if (status != PJ_SUCCESS) {",
          "1232:  }",
          "1233:  if (cport->port->put_frame) {",
          "1234:      if (cport->put_buf_size < vafp.framebytes)",
          "1235:   cport->put_buf = pj_pool_zalloc(cport->pool, vafp.framebytes);",
          "1236:      cport->put_buf_size = vafp.framebytes;",
          "1237:  }",
          "1238:  if (cport->port->get_frame) {",
          "1239:      if (cport->get_buf_size < vafp.framebytes)",
          "1240:   cport->get_buf = pj_pool_zalloc(cport->pool, vafp.framebytes);",
          "1241:      cport->get_buf_size = vafp.framebytes;",
          "1243:  }",
          "",
          "[Removed Lines]",
          "1200:     (int)(old_fmt.det.vid.fps.num/old_fmt.det.vid.fps.denum),",
          "1205:     if (new_fmt.id != old_fmt.id ||",
          "1206:  pj_memcmp(&new_fmt.det.vid.size, &old_fmt.det.vid.size,",
          "1207:     sizeof(pjmedia_rect_size)))",
          "1214:  vfi = pjmedia_get_video_format_info(NULL, new_fmt.id);",
          "1218:      new_fmt.id));",
          "1219:      pj_mutex_unlock(vid_conf->mutex);",
          "1220:      return PJMEDIA_EBADFMT;",
          "1224:  vafp.size = new_fmt.det.vid.size;",
          "1227:      PJ_LOG(1,(THIS_FILE, \"pjmedia_vid_conf_update_port(): \"",
          "1228:      \"Failed to apply format %04X\",",
          "1229:      new_fmt.id));",
          "1230:      pj_mutex_unlock(vid_conf->mutex);",
          "1231:      return status;",
          "1242:      cport->got_frame = PJ_FALSE;",
          "",
          "[Added Lines]",
          "1531:     (int)(old_fmt->det.vid.fps.num/old_fmt->det.vid.fps.denum),",
          "1536:     if (cmp_size(new_fmt, old_fmt))",
          "1543:  vfi = pjmedia_get_video_format_info(NULL, new_fmt->id);",
          "1547:      new_fmt->id));",
          "1548:      return;",
          "1552:  vafp.size = new_fmt->det.vid.size;",
          "1555:      PJ_PERROR(1,(THIS_FILE, status,",
          "1556:     \"pjmedia_vid_conf_update_port(): \"",
          "1557:     \"Failed to apply format %04X\",",
          "1558:    new_fmt->id));",
          "1559:      return;",
          "1567:      status = pjmedia_video_format_fill_black(&cport->port->info.fmt,",
          "1568:            cport->put_buf,",
          "1569:            cport->put_buf_size);",
          "1570:      if (status != PJ_SUCCESS) {",
          "1571:   PJ_PERROR(4,(THIS_FILE, status,",
          "1572:         \"Warning: failed to init sink buffer \"",
          "1573:         \" with black\"));",
          "1574:      }",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "1254:  PJ_LOG(4,(THIS_FILE,",
          "1255:     \"Port %d (%s): updated frame size %dx%d -> %dx%d\",",
          "1256:     slot, cport->name.ptr,",
          "1259:     }",
          "1267: }",
          "",
          "[Removed Lines]",
          "1257:     old_fmt.det.vid.size.w, old_fmt.det.vid.size.h,",
          "1258:     new_fmt.det.vid.size.w, new_fmt.det.vid.size.h));",
          "1263:     cport->format = new_fmt;",
          "1264:     pj_mutex_unlock(vid_conf->mutex);",
          "1266:     return PJ_SUCCESS;",
          "",
          "[Added Lines]",
          "1600:     old_fmt->det.vid.size.w, old_fmt->det.vid.size.h,",
          "1601:     new_fmt->det.vid.size.w, new_fmt->det.vid.size.h));",
          "1605:     cport->format = *new_fmt;",
          "",
          "---------------"
        ],
        "pjmedia/src/pjmedia/vid_port.c||pjmedia/src/pjmedia/vid_port.c": [
          "File: pjmedia/src/pjmedia/vid_port.c -> pjmedia/src/pjmedia/vid_port.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "118: {",
          "119:     pjmedia_port  base;",
          "120:     pjmedia_vid_port *vp;",
          "121: };",
          "123: struct fmt_prop",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "121:     pj_bool_t            is_destroying;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "147: static pj_status_t vid_pasv_port_get_frame(struct pjmedia_port *this_port,",
          "148:         pjmedia_frame *frame);",
          "151: PJ_DEF(void) pjmedia_vid_port_param_default(pjmedia_vid_port_param *prm)",
          "152: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "151: static pj_status_t vid_pasv_port_on_destroy(struct pjmedia_port *this_port);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "525:         return status;",
          "528:     vp = PJ_POOL_ZALLOC_T(pool, pjmedia_vid_port);",
          "530:     vp->role = prm->active ? ROLE_ACTIVE : ROLE_PASSIVE;",
          "531:     vp->dir = prm->vidparam.dir;",
          "",
          "[Removed Lines]",
          "529:     vp->pool = pj_pool_create(pool->factory, \"video port\", 500, 500, NULL);",
          "",
          "[Added Lines]",
          "531:     pool = pj_pool_create(pool->factory, \"video port\", 500, 500, NULL);",
          "533:     vp->pool = pool;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "652:      pp->base.get_frame = &vid_pasv_port_get_frame;",
          "653:  if (prm->vidparam.dir & PJMEDIA_DIR_RENDER)",
          "654:      pp->base.put_frame = &vid_pasv_port_put_frame;",
          "655:  pjmedia_port_info_init2(&pp->base.info, &vp->dev_name,",
          "656:                          PJMEDIA_SIG_VID_PORT,",
          "657:            prm->vidparam.dir, &prm->vidparam.fmt);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "659:  pp->base.on_destroy = &vid_pasv_port_on_destroy;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "852:     return status;",
          "853: }",
          "856: {",
          "857:     PJ_ASSERT_ON_FAIL(vp, return);",
          "",
          "[Removed Lines]",
          "855: PJ_DEF(void) pjmedia_vid_port_destroy(pjmedia_vid_port *vp)",
          "859:     PJ_LOG(4,(THIS_FILE, \"Closing %s..\", vp->dev_name.ptr));",
          "",
          "[Added Lines]",
          "860: static void vid_port_destroy(pjmedia_vid_port *vp)",
          "864:     PJ_LOG(4,(THIS_FILE, \"Destroying %s..\", vp->dev_name.ptr));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "893:     pj_pool_release(vp->pool);",
          "894: }",
          "897: static void save_rgb_frame(int width, int height, const pjmedia_frame *frm)",
          "898: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "901: PJ_DEF(void) pjmedia_vid_port_destroy(pjmedia_vid_port *vp)",
          "902: {",
          "903:     PJ_ASSERT_ON_FAIL(vp, return);",
          "905:     PJ_LOG(4,(THIS_FILE, \"Destroy request on %s..\", vp->dev_name.ptr));",
          "908:     if (vp->pasv_port) {",
          "909:  vp->pasv_port->is_destroying = PJ_TRUE;",
          "910:  pjmedia_port_destroy(&vp->pasv_port->base);",
          "911:  return;",
          "912:     }",
          "914:     vid_port_destroy(vp);",
          "915: }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1336:     struct vid_pasv_port *vpp = (struct vid_pasv_port*)this_port;",
          "1337:     pjmedia_vid_port *vp = vpp->vp;",
          "1339:     if (vp->stream_role==ROLE_PASSIVE) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1360:     if (vp->pasv_port->is_destroying)",
          "1361:  return PJ_EGONE;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1383:     pjmedia_vid_port *vp = vpp->vp;",
          "1384:     pj_status_t status = PJ_SUCCESS;",
          "1386:     if (vp->stream_role==ROLE_PASSIVE) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1410:     if (vp->pasv_port->is_destroying)",
          "1411:  return PJ_EGONE;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1409: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1439: static pj_status_t vid_pasv_port_on_destroy(struct pjmedia_port *this_port)",
          "1440: {",
          "1441:     struct vid_pasv_port *vpp = (struct vid_pasv_port*)this_port;",
          "1442:     vid_port_destroy(vpp->vp);",
          "1443:     return PJ_SUCCESS;",
          "1444: }",
          "",
          "---------------"
        ],
        "pjmedia/src/pjmedia/vid_stream.c||pjmedia/src/pjmedia/vid_stream.c": [
          "File: pjmedia/src/pjmedia/vid_stream.c -> pjmedia/src/pjmedia/vid_stream.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "121:     pj_mutex_t      *jb_mutex;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "235:                         void *pkt,",
          "236:                         pj_ssize_t bytes_read);",
          "238: #if TRACE_JB",
          "240: PJ_INLINE(int) trace_jb_print_timestamp(char **buf, pj_ssize_t len)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "238: static void on_destroy(void *arg);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "517:     void *pkt;",
          "518:     int pkt_len;",
          "520:     TRC_((channel->port.info.name.ptr,",
          "521:    \"Sending keep-alive (RTCP and empty RTP)\"));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "523:     if (!stream->transport)",
          "524:  return;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "909:  }",
          "910:     }",
          "",
          "[Removed Lines]",
          "912:     pj_mutex_lock( stream->jb_mutex );",
          "",
          "[Added Lines]",
          "918:     pj_grp_lock_acquire( stream->grp_lock );",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "975: #endif",
          "977:     }",
          "981:     if (stream->send_rtcp_fb_nack && seq_st.diff > 1 &&",
          "",
          "[Removed Lines]",
          "978:     pj_mutex_unlock( stream->jb_mutex );",
          "",
          "[Added Lines]",
          "984:     pj_grp_lock_release( stream->grp_lock );",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1209:      pj_memcpy(channel->buf, rtphdr, sizeof(pjmedia_rtp_hdr));",
          "",
          "[Removed Lines]",
          "1207:  if (frame_out.size != 0) {",
          "",
          "[Added Lines]",
          "1213:  if (frame_out.size != 0 && stream->transport) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1299:  check_tx_rtcp(stream);",
          "1300:     }",
          "",
          "[Removed Lines]",
          "1298:     if (stream->dir != PJMEDIA_DIR_DECODING) {",
          "",
          "[Added Lines]",
          "1304:     if (stream->dir != PJMEDIA_DIR_DECODING && stream->transport) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1587:  stream->miss_keyframe_event.type = PJMEDIA_EVENT_NONE;",
          "1588:     }",
          "1592:     if (stream->dec_frame.size == 0) {",
          "",
          "[Removed Lines]",
          "1590:     pj_mutex_lock( stream->jb_mutex );",
          "",
          "[Added Lines]",
          "1596:     pj_grp_lock_acquire( stream->grp_lock );",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1613:  stream->dec_frame.size = 0;",
          "1614:     }",
          "1618:     return PJ_SUCCESS;",
          "1619: }",
          "",
          "[Removed Lines]",
          "1616:     pj_mutex_unlock( stream->jb_mutex );",
          "",
          "[Added Lines]",
          "1622:     pj_grp_lock_release( stream->grp_lock );",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1704:  pi->fmt.id = info->codec_param->dec_fmt.id;",
          "1705:  channel->port.put_frame = &put_frame;",
          "1706:     }",
          "1709:     channel->port.port_data.pdata = stream;",
          "1711:     PJ_LOG(5, (name.ptr,",
          "1712:         \"%s channel created %dx%d %s%s%.*s %d/%d(~%d)fps\",",
          "1713:         (dir==PJMEDIA_DIR_ENCODING?\"Encoding\":\"Decoding\"),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1716:     channel->port.grp_lock = stream->grp_lock;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1832:      stream->cname.slen = p - stream->cname.ptr;",
          "1833:     }",
          "1838:     if (status != PJ_SUCCESS)",
          "1839:  goto err_cleanup;",
          "",
          "[Removed Lines]",
          "1837:     status = pj_mutex_create_simple(pool, NULL, &stream->jb_mutex);",
          "",
          "[Added Lines]",
          "1843:     status = pj_grp_lock_create_w_handler(pool, NULL, stream,",
          "1844:        &on_destroy,",
          "1845:        &stream->grp_lock);",
          "1846:     if (status != PJ_SUCCESS)",
          "1847:  goto err_cleanup;",
          "1850:     status = pj_grp_lock_add_ref(stream->grp_lock);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "2140: {",
          "2141:     PJ_ASSERT_RETURN(stream != NULL, PJ_EINVAL);",
          "2143: #if TRACE_RC",
          "2144:     {",
          "2145:  unsigned total_time;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2156:     PJ_LOG(4,(THIS_FILE, \"Destroy request on %s..\", stream->name.ptr));",
          "2159:     if (stream->enc)",
          "2160:  stream->enc->port.put_frame = NULL;",
          "2161:     if (stream->dec)",
          "2162:  stream->dec->port.get_frame = NULL;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "2153:     }",
          "2154: #endif",
          "2157:     pjmedia_event_unsubscribe(NULL, &stream_event_cb, stream, &stream->rtcp);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2178:     if (stream->codec) {",
          "2179:         pjmedia_event_unsubscribe(NULL, &stream_event_cb, stream,",
          "2180:                                   stream->codec);",
          "2181:     }",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "2170:  stream->transport = NULL;",
          "2171:     }",
          "2179:     if (stream->codec) {",
          "2182:  pjmedia_vid_codec_close(stream->codec);",
          "2183:  pjmedia_vid_codec_mgr_dealloc_codec(stream->codec_mgr, stream->codec);",
          "2184:  stream->codec = NULL;",
          "2185:     }",
          "2196:     if (stream->jb) {",
          "",
          "[Removed Lines]",
          "2174:     if (stream->jb_mutex)",
          "2175:  pj_mutex_lock(stream->jb_mutex);",
          "2180:         pjmedia_event_unsubscribe(NULL, &stream_event_cb, stream,",
          "2181:                                   stream->codec);",
          "2189:     if (stream->jb_mutex) {",
          "2190:  pj_mutex_unlock(stream->jb_mutex);",
          "2191:  pj_mutex_destroy(stream->jb_mutex);",
          "2192:  stream->jb_mutex = NULL;",
          "2193:     }",
          "",
          "[Added Lines]",
          "2201:     if (stream->grp_lock) {",
          "2202:  return pj_grp_lock_dec_ref(stream->grp_lock);",
          "2203:     } else {",
          "2204:  on_destroy(stream);",
          "2205:     }",
          "2207:     return PJ_SUCCESS;",
          "2208: }",
          "2214: static void on_destroy( void *arg )",
          "2215: {",
          "2216:     pjmedia_vid_stream *stream = (pjmedia_vid_stream*)arg;",
          "2217:     pj_assert(stream);",
          "2219:     PJ_LOG(4,(THIS_FILE, \"Destroying %s..\", stream->name.ptr));",
          "2229:     stream->grp_lock = NULL;",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "2206: #endif",
          "2208:     pj_pool_safe_release(&stream->own_pool);",
          "2211: }",
          "",
          "[Removed Lines]",
          "2210:     return PJ_SUCCESS;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "2358:  stream->dec->paused = 1;",
          "2362:  pjmedia_jbuf_reset(stream->jb);",
          "2365:  PJ_LOG(4,(stream->dec->port.info.name.ptr, \"Decoder stream paused\"));",
          "2366:     }",
          "",
          "[Removed Lines]",
          "2361:  pj_mutex_lock( stream->jb_mutex );",
          "2363:  pj_mutex_unlock( stream->jb_mutex );",
          "",
          "[Added Lines]",
          "2395:  pj_grp_lock_acquire( stream->grp_lock );",
          "2397:  pj_grp_lock_release( stream->grp_lock );",
          "",
          "---------------"
        ],
        "pjsip-apps/src/pjsua/pjsua_app_cli.c||pjsip-apps/src/pjsua/pjsua_app_cli.c": [
          "File: pjsip-apps/src/pjsua/pjsua_app_cli.c -> pjsip-apps/src/pjsua/pjsua_app_cli.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2502:     }",
          "2504:     PJ_LOG(3,(THIS_FILE,\" Video conference has %d ports:\\n\", count));",
          "2506:     PJ_LOG(3,(THIS_FILE,\" ------------------------------------------------------------------\\n\"));",
          "2507:     for (i=0; i<count; ++i) {",
          "2508:  char li_list[PJSUA_MAX_CALLS*4];",
          "",
          "[Removed Lines]",
          "2505:     PJ_LOG(3,(THIS_FILE,\" id name                   format               rx           tx    \\n\"));",
          "",
          "[Added Lines]",
          "2505:     PJ_LOG(3,(THIS_FILE,\" id name                   format               rx-from      tx-to \\n\"));",
          "",
          "---------------"
        ],
        "pjsip-apps/src/pjsua/pjsua_app_legacy.c||pjsip-apps/src/pjsua/pjsua_app_legacy.c": [
          "File: pjsip-apps/src/pjsua/pjsua_app_legacy.c -> pjsip-apps/src/pjsua/pjsua_app_legacy.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "618:      } else {",
          "619:   unsigned i;",
          "620:   printf(\" Video conference has %d ports:\\n\", count);",
          "622:   printf(\" ------------------------------------------------------------------\\n\");",
          "623:   for (i=0; i<count; ++i) {",
          "624:       char li_list[PJSUA_MAX_CALLS*4];",
          "",
          "[Removed Lines]",
          "621:   printf(\" id name                   format               rx           tx    \\n\");",
          "",
          "[Added Lines]",
          "621:   printf(\" id name                   format               rx-from      tx-to \\n\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "74bf302b27d2bc3fdb8d42f442354ef7db0e8fc7",
      "candidate_info": {
        "commit_hash": "74bf302b27d2bc3fdb8d42f442354ef7db0e8fc7",
        "repo": "pjsip/pjproject",
        "commit_url": "https://github.com/pjsip/pjproject/commit/74bf302b27d2bc3fdb8d42f442354ef7db0e8fc7",
        "files": [
          "pjmedia/src/pjmedia-codec/and_aud_mediacodec.cpp",
          "pjmedia/src/pjmedia-codec/ipp_codecs.c",
          "pjmedia/src/pjmedia-codec/opus.c",
          "pjmedia/src/pjmedia-codec/passthrough.c",
          "pjmedia/src/pjmedia-codec/speex_codec.c",
          "pjmedia/src/pjmedia/vid_conf.c"
        ],
        "message": "Fix some lock issue on pjmedia",
        "before_after_code_files": [
          "pjmedia/src/pjmedia-codec/and_aud_mediacodec.cpp||pjmedia/src/pjmedia-codec/and_aud_mediacodec.cpp",
          "pjmedia/src/pjmedia-codec/ipp_codecs.c||pjmedia/src/pjmedia-codec/ipp_codecs.c",
          "pjmedia/src/pjmedia-codec/opus.c||pjmedia/src/pjmedia-codec/opus.c",
          "pjmedia/src/pjmedia-codec/passthrough.c||pjmedia/src/pjmedia-codec/passthrough.c",
          "pjmedia/src/pjmedia-codec/speex_codec.c||pjmedia/src/pjmedia-codec/speex_codec.c",
          "pjmedia/src/pjmedia/vid_conf.c||pjmedia/src/pjmedia/vid_conf.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "pjmedia/src/pjmedia-codec/and_aud_mediacodec.cpp||pjmedia/src/pjmedia-codec/and_aud_mediacodec.cpp",
            "pjmedia/src/pjmedia-codec/ipp_codecs.c||pjmedia/src/pjmedia-codec/ipp_codecs.c",
            "pjmedia/src/pjmedia-codec/opus.c||pjmedia/src/pjmedia-codec/opus.c",
            "pjmedia/src/pjmedia-codec/passthrough.c||pjmedia/src/pjmedia-codec/passthrough.c",
            "pjmedia/src/pjmedia-codec/speex_codec.c||pjmedia/src/pjmedia-codec/speex_codec.c",
            "pjmedia/src/pjmedia/vid_conf.c||pjmedia/src/pjmedia/vid_conf.c"
          ],
          "candidate": [
            "pjmedia/src/pjmedia-codec/and_aud_mediacodec.cpp||pjmedia/src/pjmedia-codec/and_aud_mediacodec.cpp",
            "pjmedia/src/pjmedia-codec/ipp_codecs.c||pjmedia/src/pjmedia-codec/ipp_codecs.c",
            "pjmedia/src/pjmedia-codec/opus.c||pjmedia/src/pjmedia-codec/opus.c",
            "pjmedia/src/pjmedia-codec/passthrough.c||pjmedia/src/pjmedia-codec/passthrough.c",
            "pjmedia/src/pjmedia-codec/speex_codec.c||pjmedia/src/pjmedia-codec/speex_codec.c",
            "pjmedia/src/pjmedia/vid_conf.c||pjmedia/src/pjmedia/vid_conf.c"
          ]
        }
      },
      "candidate_diff": {
        "pjmedia/src/pjmedia-codec/and_aud_mediacodec.cpp||pjmedia/src/pjmedia-codec/and_aud_mediacodec.cpp": [
          "File: pjmedia/src/pjmedia-codec/and_aud_mediacodec.cpp -> pjmedia/src/pjmedia-codec/and_aud_mediacodec.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "754:     }",
          "755:     if (idx == -1) {",
          "757:  return PJMEDIA_CODEC_EFAILED;",
          "758:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "757:  pj_mutex_unlock(and_media_factory.mutex);",
          "",
          "---------------"
        ],
        "pjmedia/src/pjmedia-codec/ipp_codecs.c||pjmedia/src/pjmedia-codec/ipp_codecs.c": [
          "File: pjmedia/src/pjmedia-codec/ipp_codecs.c -> pjmedia/src/pjmedia-codec/ipp_codecs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "939:     }",
          "940:     if (idx == -1) {",
          "942:  return PJMEDIA_CODEC_EFAILED;",
          "943:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "942:  pj_mutex_unlock(ipp_factory.mutex);",
          "",
          "---------------"
        ],
        "pjmedia/src/pjmedia-codec/opus.c||pjmedia/src/pjmedia-codec/opus.c": [
          "File: pjmedia/src/pjmedia-codec/opus.c -> pjmedia/src/pjmedia-codec/opus.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "723:        OPUS_APPLICATION_VOIP);",
          "724:     if (err != OPUS_OK) {",
          "725:  PJ_LOG(2, (THIS_FILE, \"Unable to create encoder\"));",
          "726:  return PJMEDIA_CODEC_EFAILED;",
          "727:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "726:  pj_mutex_unlock (opus_data->mutex);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "767:         attr->info.channel_cnt);",
          "768:     if (err != OPUS_OK) {",
          "769:  PJ_LOG(2, (THIS_FILE, \"Unable to initialize decoder\"));",
          "770:  return PJMEDIA_CODEC_EFAILED;",
          "771:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "771:  pj_mutex_unlock (opus_data->mutex);",
          "",
          "---------------"
        ],
        "pjmedia/src/pjmedia-codec/passthrough.c||pjmedia/src/pjmedia-codec/passthrough.c": [
          "File: pjmedia/src/pjmedia-codec/passthrough.c -> pjmedia/src/pjmedia-codec/passthrough.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "625:     }",
          "626:     if (idx == -1) {",
          "628:  return PJMEDIA_CODEC_EUNSUP;",
          "629:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "628:  pj_mutex_unlock(codec_factory.mutex);",
          "",
          "---------------"
        ],
        "pjmedia/src/pjmedia-codec/speex_codec.c||pjmedia/src/pjmedia-codec/speex_codec.c": [
          "File: pjmedia/src/pjmedia-codec/speex_codec.c -> pjmedia/src/pjmedia-codec/speex_codec.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "379:     if (!codec_mgr) {",
          "380:  pj_pool_release(spx_factory.pool);",
          "381:  spx_factory.pool = NULL;",
          "382:  return PJ_EINVALIDOP;",
          "383:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "382:  pj_mutex_unlock(spx_factory.mutex);",
          "",
          "---------------"
        ],
        "pjmedia/src/pjmedia/vid_conf.c||pjmedia/src/pjmedia/vid_conf.c": [
          "File: pjmedia/src/pjmedia/vid_conf.c -> pjmedia/src/pjmedia/vid_conf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "304:      PJ_LOG(4,(THIS_FILE, \"pjmedia_vid_conf_add_port(): \"",
          "305:      \"unrecognized format %04X\",",
          "306:      port->info.fmt.id));",
          "307:      return PJMEDIA_EBADFMT;",
          "308:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "307:      pj_mutex_unlock(vid_conf->mutex);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "314:      PJ_LOG(4,(THIS_FILE, \"pjmedia_vid_conf_add_port(): \"",
          "315:      \"Failed to apply format %04X\",",
          "316:      port->info.fmt.id));",
          "317:      return status;",
          "318:  }",
          "319:  if (port->put_frame) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "318:      pj_mutex_unlock(vid_conf->mutex);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "331:        pj_pool_zalloc(pool,",
          "332:         vid_conf->opt.max_slot_cnt *",
          "333:         sizeof(unsigned));",
          "337:     cport->transmitter_slots = (unsigned*)",
          "338:           pj_pool_zalloc(pool,",
          "339:            vid_conf->opt.max_slot_cnt *",
          "344:     cport->render_states = (render_state**)",
          "345:       pj_pool_zalloc(pool,",
          "346:        vid_conf->opt.max_slot_cnt *",
          "347:        sizeof(render_state*));",
          "351:     cport->render_pool = (pj_pool_t**)",
          "352:     pj_pool_zalloc(pool,",
          "353:      vid_conf->opt.max_slot_cnt *",
          "358:     vid_conf->ports[index] = cport;",
          "",
          "[Removed Lines]",
          "334:     PJ_ASSERT_RETURN(cport->listener_slots, PJ_ENOMEM);",
          "340:            sizeof(unsigned));",
          "341:     PJ_ASSERT_RETURN(cport->transmitter_slots, PJ_ENOMEM);",
          "348:     PJ_ASSERT_RETURN(cport->render_states, PJ_ENOMEM);",
          "354:      sizeof(pj_pool_t*));",
          "355:     PJ_ASSERT_RETURN(cport->render_pool, PJ_ENOMEM);",
          "",
          "[Added Lines]",
          "336:     if (!cport->listener_slots) {",
          "337:  pj_mutex_unlock(vid_conf->mutex);",
          "338:  return PJ_ENOMEM;",
          "339:     }",
          "345:            sizeof(unsigned));",
          "346:     if (!cport->transmitter_slots) {",
          "347:  pj_mutex_unlock(vid_conf->mutex);",
          "348:  return PJ_ENOMEM;",
          "349:     }",
          "357:     if (!cport->render_states) {",
          "358:  pj_mutex_unlock(vid_conf->mutex);",
          "359:  return PJ_ENOMEM;",
          "360:     }",
          "366:      sizeof(pj_pool_t*));",
          "367:     if (!cport->render_pool) {",
          "368:  pj_mutex_unlock(vid_conf->mutex);",
          "369:  return PJ_ENOMEM;",
          "370:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "420:  status = pjmedia_clock_stop(vid_conf->clock);",
          "421:  if (status != PJ_SUCCESS) {",
          "422:      PJ_PERROR(4, (THIS_FILE, status, \"Failed to stop clock\"));",
          "423:      return status;",
          "424:  }",
          "425:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "438:      pj_mutex_unlock(vid_conf->mutex);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "584:      status = pjmedia_clock_start(vid_conf->clock);",
          "585:      if (status != PJ_SUCCESS) {",
          "586:   PJ_PERROR(4, (THIS_FILE, status, \"Failed to start clock\"));",
          "587:   return status;",
          "588:      }",
          "589:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "603:   pj_mutex_unlock(vid_conf->mutex);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "673:      status = pjmedia_clock_stop(vid_conf->clock);",
          "674:      if (status != PJ_SUCCESS) {",
          "675:   PJ_PERROR(4, (THIS_FILE, status, \"Failed to stop clock\"));",
          "676:   return status;",
          "677:      }",
          "678:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "693:   pj_mutex_unlock(vid_conf->mutex);",
          "",
          "---------------"
        ]
      }
    }
  ]
}