{
  "cve_id": "CVE-2016-3841",
  "cve_desc": "The IPv6 stack in the Linux kernel before 4.3.3 mishandles options data, which allows local users to gain privileges or cause a denial of service (use-after-free and system crash) via a crafted sendmsg system call.",
  "repo": "torvalds/linux",
  "patch_hash": "45f6fad84cc305103b28d73482b344d7f5b76f39",
  "patch_info": {
    "commit_hash": "45f6fad84cc305103b28d73482b344d7f5b76f39",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/45f6fad84cc305103b28d73482b344d7f5b76f39",
    "files": [
      "include/linux/ipv6.h",
      "include/net/ipv6.h",
      "net/dccp/ipv6.c",
      "net/ipv6/af_inet6.c",
      "net/ipv6/datagram.c",
      "net/ipv6/exthdrs.c",
      "net/ipv6/inet6_connection_sock.c",
      "net/ipv6/ipv6_sockglue.c",
      "net/ipv6/raw.c",
      "net/ipv6/syncookies.c",
      "net/ipv6/tcp_ipv6.c",
      "net/ipv6/udp.c",
      "net/l2tp/l2tp_ip6.c"
    ],
    "message": "ipv6: add complete rcu protection around np->opt\n\nThis patch addresses multiple problems :\n\nUDP/RAW sendmsg() need to get a stable struct ipv6_txoptions\nwhile socket is not locked : Other threads can change np->opt\nconcurrently. Dmitry posted a syzkaller\n(http://github.com/google/syzkaller) program desmonstrating\nuse-after-free.\n\nStarting with TCP/DCCP lockless listeners, tcp_v6_syn_recv_sock()\nand dccp_v6_request_recv_sock() also need to use RCU protection\nto dereference np->opt once (before calling ipv6_dup_options())\n\nThis patch adds full RCU protection to np->opt\n\nReported-by: Dmitry Vyukov <dvyukov@google.com>\nSigned-off-by: Eric Dumazet <edumazet@google.com>\nAcked-by: Hannes Frederic Sowa <hannes@stressinduktion.org>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
    "before_after_code_files": [
      "include/linux/ipv6.h||include/linux/ipv6.h",
      "include/net/ipv6.h||include/net/ipv6.h",
      "net/dccp/ipv6.c||net/dccp/ipv6.c",
      "net/ipv6/af_inet6.c||net/ipv6/af_inet6.c",
      "net/ipv6/datagram.c||net/ipv6/datagram.c",
      "net/ipv6/exthdrs.c||net/ipv6/exthdrs.c",
      "net/ipv6/inet6_connection_sock.c||net/ipv6/inet6_connection_sock.c",
      "net/ipv6/ipv6_sockglue.c||net/ipv6/ipv6_sockglue.c",
      "net/ipv6/raw.c||net/ipv6/raw.c",
      "net/ipv6/syncookies.c||net/ipv6/syncookies.c",
      "net/ipv6/tcp_ipv6.c||net/ipv6/tcp_ipv6.c",
      "net/ipv6/udp.c||net/ipv6/udp.c",
      "net/l2tp/l2tp_ip6.c||net/l2tp/l2tp_ip6.c"
    ]
  },
  "patch_diff": {
    "include/linux/ipv6.h||include/linux/ipv6.h": [
      "File: include/linux/ipv6.h -> include/linux/ipv6.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "227:  struct ipv6_ac_socklist *ipv6_ac_list;",
      "228:  struct ipv6_fl_socklist __rcu *ipv6_fl_list;",
      "231:  struct sk_buff  *pktoptions;",
      "232:  struct sk_buff  *rxpmtu;",
      "233:  struct inet6_cork cork;",
      "",
      "[Removed Lines]",
      "230:  struct ipv6_txoptions *opt;",
      "",
      "[Added Lines]",
      "230:  struct ipv6_txoptions __rcu *opt;",
      "",
      "---------------"
    ],
    "include/net/ipv6.h||include/net/ipv6.h": [
      "File: include/net/ipv6.h -> include/net/ipv6.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "207: struct ipv6_txoptions {",
      "209:  int   tot_len;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "208:  atomic_t  refcnt;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "217:  struct ipv6_opt_hdr *dst0opt;",
      "219:  struct ipv6_opt_hdr *dst1opt;",
      "222: };",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "221:  struct rcu_head  rcu;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "252:  struct rcu_head   rcu;",
      "253: };",
      "255: struct ip6_flowlabel *fl6_sock_lookup(struct sock *sk, __be32 label);",
      "256: struct ipv6_txoptions *fl6_merge_options(struct ipv6_txoptions *opt_space,",
      "257:       struct ip6_flowlabel *fl,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "256: static inline struct ipv6_txoptions *txopt_get(const struct ipv6_pinfo *np)",
      "257: {",
      "258:  struct ipv6_txoptions *opt;",
      "260:  rcu_read_lock();",
      "261:  opt = rcu_dereference(np->opt);",
      "262:  if (opt && !atomic_inc_not_zero(&opt->refcnt))",
      "263:   opt = NULL;",
      "264:  rcu_read_unlock();",
      "265:  return opt;",
      "266: }",
      "268: static inline void txopt_put(struct ipv6_txoptions *opt)",
      "269: {",
      "270:  if (opt && atomic_dec_and_test(&opt->refcnt))",
      "271:   kfree_rcu(opt, rcu);",
      "272: }",
      "",
      "---------------"
    ],
    "net/dccp/ipv6.c||net/dccp/ipv6.c": [
      "File: net/dccp/ipv6.c -> net/dccp/ipv6.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "202:  security_req_classify_flow(req, flowi6_to_flowi(&fl6));",
      "207:  dst = ip6_dst_lookup_flow(sk, &fl6, final_p);",
      "208:  if (IS_ERR(dst)) {",
      "",
      "[Removed Lines]",
      "205:  final_p = fl6_update_dst(&fl6, np->opt, &final);",
      "",
      "[Added Lines]",
      "205:  rcu_read_lock();",
      "206:  final_p = fl6_update_dst(&fl6, rcu_dereference(np->opt), &final);",
      "207:  rcu_read_unlock();",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "219:         &ireq->ir_v6_loc_addr,",
      "220:         &ireq->ir_v6_rmt_addr);",
      "221:   fl6.daddr = ireq->ir_v6_rmt_addr;",
      "223:   err = net_xmit_eval(err);",
      "224:  }",
      "",
      "[Removed Lines]",
      "222:   err = ip6_xmit(sk, skb, &fl6, np->opt, np->tclass);",
      "",
      "[Added Lines]",
      "224:   rcu_read_lock();",
      "225:   err = ip6_xmit(sk, skb, &fl6, rcu_dereference(np->opt),",
      "226:           np->tclass);",
      "227:   rcu_read_unlock();",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "387:  struct inet_request_sock *ireq = inet_rsk(req);",
      "388:  struct ipv6_pinfo *newnp;",
      "389:  const struct ipv6_pinfo *np = inet6_sk(sk);",
      "390:  struct inet_sock *newinet;",
      "391:  struct dccp6_sock *newdp6;",
      "392:  struct sock *newsk;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "395:  struct ipv6_txoptions *opt;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "494:  inet_csk(newsk)->icsk_ext_hdr_len = 0;",
      "499:  dccp_sync_mss(newsk, dst_mtu(dst));",
      "",
      "[Removed Lines]",
      "491:  if (np->opt != NULL)",
      "492:   newnp->opt = ipv6_dup_options(newsk, np->opt);",
      "495:  if (newnp->opt != NULL)",
      "496:   inet_csk(newsk)->icsk_ext_hdr_len = (newnp->opt->opt_nflen +",
      "497:            newnp->opt->opt_flen);",
      "",
      "[Added Lines]",
      "497:  opt = rcu_dereference(np->opt);",
      "498:  if (opt) {",
      "499:   opt = ipv6_dup_options(newsk, opt);",
      "500:   RCU_INIT_POINTER(newnp->opt, opt);",
      "501:  }",
      "503:  if (opt)",
      "504:   inet_csk(newsk)->icsk_ext_hdr_len = opt->opt_nflen +",
      "505:           opt->opt_flen;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "757:  struct ipv6_pinfo *np = inet6_sk(sk);",
      "758:  struct dccp_sock *dp = dccp_sk(sk);",
      "759:  struct in6_addr *saddr = NULL, *final_p, final;",
      "760:  struct flowi6 fl6;",
      "761:  struct dst_entry *dst;",
      "762:  int addr_type;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "768:  struct ipv6_txoptions *opt;",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "856:  fl6.fl6_sport = inet->inet_sport;",
      "857:  security_sk_classify_flow(sk, flowi6_to_flowi(&fl6));",
      "861:  dst = ip6_dst_lookup_flow(sk, &fl6, final_p);",
      "862:  if (IS_ERR(dst)) {",
      "",
      "[Removed Lines]",
      "859:  final_p = fl6_update_dst(&fl6, np->opt, &final);",
      "",
      "[Added Lines]",
      "868:  opt = rcu_dereference_protected(np->opt, sock_owned_by_user(sk));",
      "869:  final_p = fl6_update_dst(&fl6, opt, &final);",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "876:  __ip6_dst_store(sk, dst, NULL, NULL);",
      "878:  icsk->icsk_ext_hdr_len = 0;",
      "883:  inet->inet_dport = usin->sin6_port;",
      "",
      "[Removed Lines]",
      "879:  if (np->opt != NULL)",
      "880:   icsk->icsk_ext_hdr_len = (np->opt->opt_flen +",
      "881:        np->opt->opt_nflen);",
      "",
      "[Added Lines]",
      "889:  if (opt)",
      "890:   icsk->icsk_ext_hdr_len = opt->opt_flen + opt->opt_nflen;",
      "",
      "---------------"
    ],
    "net/ipv6/af_inet6.c||net/ipv6/af_inet6.c": [
      "File: net/ipv6/af_inet6.c -> net/ipv6/af_inet6.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "434: }",
      "435: EXPORT_SYMBOL_GPL(inet6_destroy_sock);",
      "",
      "[Removed Lines]",
      "431:  opt = xchg(&np->opt, NULL);",
      "432:  if (opt)",
      "433:   sock_kfree_s(sk, opt, opt->tot_len);",
      "",
      "[Added Lines]",
      "431:  opt = xchg((__force struct ipv6_txoptions **)&np->opt, NULL);",
      "432:  if (opt) {",
      "433:   atomic_sub(opt->tot_len, &sk->sk_omem_alloc);",
      "434:   txopt_put(opt);",
      "435:  }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "659:   fl6.fl6_sport = inet->inet_sport;",
      "660:   security_sk_classify_flow(sk, flowi6_to_flowi(&fl6));",
      "664:   dst = ip6_dst_lookup_flow(sk, &fl6, final_p);",
      "665:   if (IS_ERR(dst)) {",
      "",
      "[Removed Lines]",
      "662:   final_p = fl6_update_dst(&fl6, np->opt, &final);",
      "",
      "[Added Lines]",
      "664:   rcu_read_lock();",
      "665:   final_p = fl6_update_dst(&fl6, rcu_dereference(np->opt),",
      "666:       &final);",
      "667:   rcu_read_unlock();",
      "",
      "---------------"
    ],
    "net/ipv6/datagram.c||net/ipv6/datagram.c": [
      "File: net/ipv6/datagram.c -> net/ipv6/datagram.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "168:  security_sk_classify_flow(sk, flowi6_to_flowi(&fl6));",
      "171:  final_p = fl6_update_dst(&fl6, opt, &final);",
      "173:  dst = ip6_dst_lookup_flow(sk, &fl6, final_p);",
      "174:  err = 0;",
      "",
      "[Removed Lines]",
      "170:  opt = flowlabel ? flowlabel->opt : np->opt;",
      "",
      "[Added Lines]",
      "170:  rcu_read_lock();",
      "171:  opt = flowlabel ? flowlabel->opt : rcu_dereference(np->opt);",
      "173:  rcu_read_unlock();",
      "",
      "---------------"
    ],
    "net/ipv6/exthdrs.c||net/ipv6/exthdrs.c": [
      "File: net/ipv6/exthdrs.c -> net/ipv6/exthdrs.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "728:   if (opt2->srcrt)",
      "730:  }",
      "731:  return opt2;",
      "732: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "730:   atomic_set(&opt2->refcnt, 1);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "790:   return ERR_PTR(-ENOBUFS);",
      "792:  memset(opt2, 0, tot_len);",
      "794:  opt2->tot_len = tot_len;",
      "795:  p = (char *)(opt2 + 1);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "794:  atomic_set(&opt2->refcnt, 1);",
      "",
      "---------------"
    ],
    "net/ipv6/inet6_connection_sock.c||net/ipv6/inet6_connection_sock.c": [
      "File: net/ipv6/inet6_connection_sock.c -> net/ipv6/inet6_connection_sock.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "78:  memset(fl6, 0, sizeof(*fl6));",
      "79:  fl6->flowi6_proto = proto;",
      "80:  fl6->daddr = ireq->ir_v6_rmt_addr;",
      "82:  fl6->saddr = ireq->ir_v6_loc_addr;",
      "83:  fl6->flowi6_oif = ireq->ir_iif;",
      "84:  fl6->flowi6_mark = ireq->ir_mark;",
      "",
      "[Removed Lines]",
      "81:  final_p = fl6_update_dst(fl6, np->opt, &final);",
      "",
      "[Added Lines]",
      "81:  rcu_read_lock();",
      "82:  final_p = fl6_update_dst(fl6, rcu_dereference(np->opt), &final);",
      "83:  rcu_read_unlock();",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "142:  fl6->fl6_dport = inet->inet_dport;",
      "143:  security_sk_classify_flow(sk, flowi6_to_flowi(fl6));",
      "147:  dst = __inet6_csk_dst_check(sk, np->dst_cookie);",
      "148:  if (!dst) {",
      "",
      "[Removed Lines]",
      "145:  final_p = fl6_update_dst(fl6, np->opt, &final);",
      "",
      "[Added Lines]",
      "147:  rcu_read_lock();",
      "148:  final_p = fl6_update_dst(fl6, rcu_dereference(np->opt), &final);",
      "149:  rcu_read_unlock();",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "176:  fl6.daddr = sk->sk_v6_daddr;",
      "179:  rcu_read_unlock();",
      "180:  return res;",
      "181: }",
      "",
      "[Removed Lines]",
      "178:  res = ip6_xmit(sk, skb, &fl6, np->opt, np->tclass);",
      "",
      "[Added Lines]",
      "182:  res = ip6_xmit(sk, skb, &fl6, rcu_dereference(np->opt),",
      "183:          np->tclass);",
      "",
      "---------------"
    ],
    "net/ipv6/ipv6_sockglue.c||net/ipv6/ipv6_sockglue.c": [
      "File: net/ipv6/ipv6_sockglue.c -> net/ipv6/ipv6_sockglue.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:    icsk->icsk_sync_mss(sk, icsk->icsk_pmtu_cookie);",
      "112:   }",
      "113:  }",
      "115:  sk_dst_reset(sk);",
      "117:  return opt;",
      "",
      "[Removed Lines]",
      "114:  opt = xchg(&inet6_sk(sk)->opt, opt);",
      "",
      "[Added Lines]",
      "114:  opt = xchg((__force struct ipv6_txoptions **)&inet6_sk(sk)->opt,",
      "115:      opt);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "231:     sk->sk_socket->ops = &inet_dgram_ops;",
      "232:     sk->sk_family = PF_INET;",
      "233:    }",
      "237:    pktopt = xchg(&np->pktoptions, NULL);",
      "238:    kfree_skb(pktopt);",
      "",
      "[Removed Lines]",
      "234:    opt = xchg(&np->opt, NULL);",
      "235:    if (opt)",
      "236:     sock_kfree_s(sk, opt, opt->tot_len);",
      "",
      "[Added Lines]",
      "235:    opt = xchg((__force struct ipv6_txoptions **)&np->opt,",
      "236:        NULL);",
      "237:    if (opt) {",
      "238:     atomic_sub(opt->tot_len, &sk->sk_omem_alloc);",
      "239:     txopt_put(opt);",
      "240:    }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "403:   if (optname != IPV6_RTHDR && !ns_capable(net->user_ns, CAP_NET_RAW))",
      "404:    break;",
      "407:       (struct ipv6_opt_hdr __user *)optval,",
      "408:       optlen);",
      "409:   if (IS_ERR(opt)) {",
      "",
      "[Removed Lines]",
      "406:   opt = ipv6_renew_options(sk, np->opt, optname,",
      "",
      "[Added Lines]",
      "410:   opt = rcu_dereference_protected(np->opt, sock_owned_by_user(sk));",
      "411:   opt = ipv6_renew_options(sk, opt, optname,",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "432:   retv = 0;",
      "433:   opt = ipv6_update_options(sk, opt);",
      "434: sticky_done:",
      "437:   break;",
      "438:  }",
      "",
      "[Removed Lines]",
      "435:   if (opt)",
      "436:    sock_kfree_s(sk, opt, opt->tot_len);",
      "",
      "[Added Lines]",
      "440:   if (opt) {",
      "441:    atomic_sub(opt->tot_len, &sk->sk_omem_alloc);",
      "442:    txopt_put(opt);",
      "443:   }",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "486:    break;",
      "488:   memset(opt, 0, sizeof(*opt));",
      "489:   opt->tot_len = sizeof(*opt) + optlen;",
      "490:   retv = -EFAULT;",
      "491:   if (copy_from_user(opt+1, optval, optlen))",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "496:   atomic_set(&opt->refcnt, 1);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "502:   retv = 0;",
      "503:   opt = ipv6_update_options(sk, opt);",
      "504: done:",
      "507:   break;",
      "508:  }",
      "509:  case IPV6_UNICAST_HOPS:",
      "",
      "[Removed Lines]",
      "505:   if (opt)",
      "506:    sock_kfree_s(sk, opt, opt->tot_len);",
      "",
      "[Added Lines]",
      "513:   if (opt) {",
      "514:    atomic_sub(opt->tot_len, &sk->sk_omem_alloc);",
      "515:    txopt_put(opt);",
      "516:   }",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "1110:  case IPV6_RTHDR:",
      "1111:  case IPV6_DSTOPTS:",
      "1112:  {",
      "1114:   lock_sock(sk);",
      "1117:   release_sock(sk);",
      "1119:   if (len < 0)",
      "",
      "[Removed Lines]",
      "1115:   len = ipv6_getsockopt_sticky(sk, np->opt,",
      "1116:           optname, optval, len);",
      "",
      "[Added Lines]",
      "1123:   struct ipv6_txoptions *opt;",
      "1126:   opt = rcu_dereference_protected(np->opt, sock_owned_by_user(sk));",
      "1127:   len = ipv6_getsockopt_sticky(sk, opt, optname, optval, len);",
      "",
      "---------------"
    ],
    "net/ipv6/raw.c||net/ipv6/raw.c": [
      "File: net/ipv6/raw.c -> net/ipv6/raw.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "734: static int rawv6_sendmsg(struct sock *sk, struct msghdr *msg, size_t len)",
      "735: {",
      "736:  struct ipv6_txoptions opt_space;",
      "737:  DECLARE_SOCKADDR(struct sockaddr_in6 *, sin6, msg->msg_name);",
      "738:  struct in6_addr *daddr, *final_p, final;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "736:  struct ipv6_txoptions *opt_to_free = NULL;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "839:   if (!(opt->opt_nflen|opt->opt_flen))",
      "840:    opt = NULL;",
      "841:  }",
      "844:  if (flowlabel)",
      "845:   opt = fl6_merge_options(&opt_space, flowlabel, opt);",
      "846:  opt = ipv6_fixup_options(&opt_space, opt);",
      "",
      "[Removed Lines]",
      "842:  if (!opt)",
      "843:   opt = np->opt;",
      "",
      "[Added Lines]",
      "843:  if (!opt) {",
      "844:   opt = txopt_get(np);",
      "845:   opt_to_free = opt;",
      "846:   }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "906:  dst_release(dst);",
      "907: out:",
      "908:  fl6_sock_release(flowlabel);",
      "909:  return err < 0 ? err : len;",
      "910: do_confirm:",
      "911:  dst_confirm(dst);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "912:  txopt_put(opt_to_free);",
      "",
      "---------------"
    ],
    "net/ipv6/syncookies.c||net/ipv6/syncookies.c": [
      "File: net/ipv6/syncookies.c -> net/ipv6/syncookies.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "222:   memset(&fl6, 0, sizeof(fl6));",
      "223:   fl6.flowi6_proto = IPPROTO_TCP;",
      "224:   fl6.daddr = ireq->ir_v6_rmt_addr;",
      "226:   fl6.saddr = ireq->ir_v6_loc_addr;",
      "227:   fl6.flowi6_oif = sk->sk_bound_dev_if;",
      "228:   fl6.flowi6_mark = ireq->ir_mark;",
      "",
      "[Removed Lines]",
      "225:   final_p = fl6_update_dst(&fl6, np->opt, &final);",
      "",
      "[Added Lines]",
      "225:   final_p = fl6_update_dst(&fl6, rcu_dereference(np->opt), &final);",
      "",
      "---------------"
    ],
    "net/ipv6/tcp_ipv6.c||net/ipv6/tcp_ipv6.c": [
      "File: net/ipv6/tcp_ipv6.c -> net/ipv6/tcp_ipv6.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "120:  struct ipv6_pinfo *np = inet6_sk(sk);",
      "121:  struct tcp_sock *tp = tcp_sk(sk);",
      "122:  struct in6_addr *saddr = NULL, *final_p, final;",
      "123:  struct flowi6 fl6;",
      "124:  struct dst_entry *dst;",
      "125:  int addr_type;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "123:  struct ipv6_txoptions *opt;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "235:  fl6.fl6_dport = usin->sin6_port;",
      "236:  fl6.fl6_sport = inet->inet_sport;",
      "240:  security_sk_classify_flow(sk, flowi6_to_flowi(&fl6));",
      "",
      "[Removed Lines]",
      "238:  final_p = fl6_update_dst(&fl6, np->opt, &final);",
      "",
      "[Added Lines]",
      "239:  opt = rcu_dereference_protected(np->opt, sock_owned_by_user(sk));",
      "240:  final_p = fl6_update_dst(&fl6, opt, &final);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "263:   tcp_fetch_timewait_stamp(sk, dst);",
      "265:  icsk->icsk_ext_hdr_len = 0;",
      "270:  tp->rx_opt.mss_clamp = IPV6_MIN_MTU - sizeof(struct tcphdr) - sizeof(struct ipv6hdr);",
      "",
      "[Removed Lines]",
      "266:  if (np->opt)",
      "267:   icsk->icsk_ext_hdr_len = (np->opt->opt_flen +",
      "268:        np->opt->opt_nflen);",
      "",
      "[Added Lines]",
      "268:  if (opt)",
      "269:   icsk->icsk_ext_hdr_len = opt->opt_flen +",
      "270:       opt->opt_nflen;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "461:   if (np->repflow && ireq->pktopts)",
      "462:    fl6->flowlabel = ip6_flowlabel(ipv6_hdr(ireq->pktopts));",
      "465:   err = net_xmit_eval(err);",
      "466:  }",
      "",
      "[Removed Lines]",
      "464:   err = ip6_xmit(sk, skb, fl6, np->opt, np->tclass);",
      "",
      "[Added Lines]",
      "466:   err = ip6_xmit(sk, skb, fl6, rcu_dereference(np->opt),",
      "467:           np->tclass);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "972:  struct inet_request_sock *ireq;",
      "973:  struct ipv6_pinfo *newnp;",
      "974:  const struct ipv6_pinfo *np = inet6_sk(sk);",
      "975:  struct tcp6_sock *newtcp6sk;",
      "976:  struct inet_sock *newinet;",
      "977:  struct tcp_sock *newtp;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "978:  struct ipv6_txoptions *opt;",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "1098:     but we make one more one thing there: reattach optmem",
      "1099:     to newsk.",
      "1104:  inet_csk(newsk)->icsk_ext_hdr_len = 0;",
      "1109:  tcp_ca_openreq_child(newsk, dst);",
      "",
      "[Removed Lines]",
      "1101:  if (np->opt)",
      "1102:   newnp->opt = ipv6_dup_options(newsk, np->opt);",
      "1105:  if (newnp->opt)",
      "1106:   inet_csk(newsk)->icsk_ext_hdr_len = (newnp->opt->opt_nflen +",
      "1107:            newnp->opt->opt_flen);",
      "",
      "[Added Lines]",
      "1105:  opt = rcu_dereference(np->opt);",
      "1106:  if (opt) {",
      "1107:   opt = ipv6_dup_options(newsk, opt);",
      "1108:   RCU_INIT_POINTER(newnp->opt, opt);",
      "1109:  }",
      "1111:  if (opt)",
      "1112:   inet_csk(newsk)->icsk_ext_hdr_len = opt->opt_nflen +",
      "1113:           opt->opt_flen;",
      "",
      "---------------"
    ],
    "net/ipv6/udp.c||net/ipv6/udp.c": [
      "File: net/ipv6/udp.c -> net/ipv6/udp.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1110:  DECLARE_SOCKADDR(struct sockaddr_in6 *, sin6, msg->msg_name);",
      "1111:  struct in6_addr *daddr, *final_p, final;",
      "1112:  struct ipv6_txoptions *opt = NULL;",
      "1113:  struct ip6_flowlabel *flowlabel = NULL;",
      "1114:  struct flowi6 fl6;",
      "1115:  struct dst_entry *dst;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1113:  struct ipv6_txoptions *opt_to_free = NULL;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1263:    opt = NULL;",
      "1264:   connected = 0;",
      "1265:  }",
      "1268:  if (flowlabel)",
      "1269:   opt = fl6_merge_options(&opt_space, flowlabel, opt);",
      "1270:  opt = ipv6_fixup_options(&opt_space, opt);",
      "",
      "[Removed Lines]",
      "1266:  if (!opt)",
      "1267:   opt = np->opt;",
      "",
      "[Added Lines]",
      "1267:  if (!opt) {",
      "1268:   opt = txopt_get(np);",
      "1269:   opt_to_free = opt;",
      "1270:  }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1373: out:",
      "1374:  dst_release(dst);",
      "1375:  fl6_sock_release(flowlabel);",
      "1376:  if (!err)",
      "1377:   return len;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1379:  txopt_put(opt_to_free);",
      "",
      "---------------"
    ],
    "net/l2tp/l2tp_ip6.c||net/l2tp/l2tp_ip6.c": [
      "File: net/l2tp/l2tp_ip6.c -> net/l2tp/l2tp_ip6.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "486:  DECLARE_SOCKADDR(struct sockaddr_l2tpip6 *, lsa, msg->msg_name);",
      "487:  struct in6_addr *daddr, *final_p, final;",
      "488:  struct ipv6_pinfo *np = inet6_sk(sk);",
      "489:  struct ipv6_txoptions *opt = NULL;",
      "490:  struct ip6_flowlabel *flowlabel = NULL;",
      "491:  struct dst_entry *dst = NULL;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "489:  struct ipv6_txoptions *opt_to_free = NULL;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "575:    opt = NULL;",
      "576:  }",
      "580:  if (flowlabel)",
      "581:   opt = fl6_merge_options(&opt_space, flowlabel, opt);",
      "582:  opt = ipv6_fixup_options(&opt_space, opt);",
      "",
      "[Removed Lines]",
      "578:  if (opt == NULL)",
      "579:   opt = np->opt;",
      "",
      "[Added Lines]",
      "579:  if (!opt) {",
      "580:   opt = txopt_get(np);",
      "581:   opt_to_free = opt;",
      "582:  }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "631:  dst_release(dst);",
      "632: out:",
      "633:  fl6_sock_release(flowlabel);",
      "635:  return err < 0 ? err : len;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "637:  txopt_put(opt_to_free);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "56ac42bc94b18d45b6c484edeac33be86bfb3efa",
      "candidate_info": {
        "commit_hash": "56ac42bc94b18d45b6c484edeac33be86bfb3efa",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/56ac42bc94b18d45b6c484edeac33be86bfb3efa",
        "files": [
          "include/net/inet_sock.h",
          "net/dccp/ipv6.c",
          "net/ipv4/tcp_input.c",
          "net/ipv6/tcp_ipv6.c"
        ],
        "message": "ipv6: Allow request socks to contain IPv6 options.\n\nIf set, these will take precedence over the parent's options during\nboth sending and child creation.  If they're not set, the parent's\noptions (if any) will be used.\n\nThis is to allow the security_inet_conn_request() hook to modify the\nIPv6 options in just the same way that it already may do for IPv4.\n\nSigned-off-by: Huw Davies <huw@codeweavers.com>\nSigned-off-by: Paul Moore <paul@paul-moore.com>",
        "before_after_code_files": [
          "include/net/inet_sock.h||include/net/inet_sock.h",
          "net/dccp/ipv6.c||net/dccp/ipv6.c",
          "net/ipv4/tcp_input.c||net/ipv4/tcp_input.c",
          "net/ipv6/tcp_ipv6.c||net/ipv6/tcp_ipv6.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "net/dccp/ipv6.c||net/dccp/ipv6.c",
            "net/ipv6/tcp_ipv6.c||net/ipv6/tcp_ipv6.c"
          ],
          "candidate": [
            "net/dccp/ipv6.c||net/dccp/ipv6.c",
            "net/ipv6/tcp_ipv6.c||net/ipv6/tcp_ipv6.c"
          ]
        }
      },
      "candidate_diff": {
        "include/net/inet_sock.h||include/net/inet_sock.h": [
          "File: include/net/inet_sock.h -> include/net/inet_sock.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "97:  u32                     ir_mark;",
          "98:  union {",
          "99:   struct ip_options_rcu *opt;",
          "101:  };",
          "102: };",
          "",
          "[Removed Lines]",
          "100:   struct sk_buff  *pktopts;",
          "",
          "[Added Lines]",
          "100: #if IS_ENABLED(CONFIG_IPV6)",
          "101:   struct {",
          "102:    struct ipv6_txoptions *ipv6_opt;",
          "103:    struct sk_buff  *pktopts;",
          "104:   };",
          "105: #endif",
          "",
          "---------------"
        ],
        "net/dccp/ipv6.c||net/dccp/ipv6.c": [
          "File: net/dccp/ipv6.c -> net/dccp/ipv6.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "216:  skb = dccp_make_response(sk, dst, req);",
          "217:  if (skb != NULL) {",
          "218:   struct dccp_hdr *dh = dccp_hdr(skb);",
          "220:   dh->dccph_checksum = dccp_v6_csum_finish(skb,",
          "221:         &ireq->ir_v6_loc_addr,",
          "222:         &ireq->ir_v6_rmt_addr);",
          "223:   fl6.daddr = ireq->ir_v6_rmt_addr;",
          "224:   rcu_read_lock();",
          "227:   rcu_read_unlock();",
          "228:   err = net_xmit_eval(err);",
          "229:  }",
          "",
          "[Removed Lines]",
          "225:   err = ip6_xmit(sk, skb, &fl6, rcu_dereference(np->opt),",
          "226:           np->tclass);",
          "",
          "[Added Lines]",
          "219:   struct ipv6_txoptions *opt;",
          "226:   opt = ireq->ipv6_opt;",
          "227:   if (!opt)",
          "228:    opt = rcu_dereference(np->opt);",
          "229:   err = ip6_xmit(sk, skb, &fl6, opt, np->tclass);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "236: static void dccp_v6_reqsk_destructor(struct request_sock *req)",
          "237: {",
          "238:  dccp_feat_list_purge(&dccp_rsk(req)->dreq_featneg);",
          "239:  kfree_skb(inet_rsk(req)->pktopts);",
          "240: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "242:  kfree(inet_rsk(req)->ipv6_opt);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "498:  if (opt) {",
          "499:   opt = ipv6_dup_options(newsk, opt);",
          "500:   RCU_INIT_POINTER(newnp->opt, opt);",
          "",
          "[Removed Lines]",
          "497:  opt = rcu_dereference(np->opt);",
          "",
          "[Added Lines]",
          "501:  opt = ireq->ipv6_opt;",
          "502:  if (!opt)",
          "503:   opt = rcu_dereference(np->opt);",
          "",
          "---------------"
        ],
        "net/ipv4/tcp_input.c||net/ipv4/tcp_input.c": [
          "File: net/ipv4/tcp_input.c -> net/ipv4/tcp_input.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "6147:   kmemcheck_annotate_bitfield(ireq, flags);",
          "6148:   ireq->opt = NULL;",
          "6149:   atomic64_set(&ireq->ir_cookie, 0);",
          "6150:   ireq->ireq_state = TCP_NEW_SYN_RECV;",
          "6151:   write_pnet(&ireq->ireq_net, sock_net(sk_listener));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6149: #if IS_ENABLED(CONFIG_IPV6)",
          "6150:   ireq->pktopts = NULL;",
          "6151: #endif",
          "",
          "---------------"
        ],
        "net/ipv6/tcp_ipv6.c||net/ipv6/tcp_ipv6.c": [
          "File: net/ipv6/tcp_ipv6.c -> net/ipv6/tcp_ipv6.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "443: {",
          "444:  struct inet_request_sock *ireq = inet_rsk(req);",
          "445:  struct ipv6_pinfo *np = inet6_sk(sk);",
          "446:  struct flowi6 *fl6 = &fl->u.ip6;",
          "447:  struct sk_buff *skb;",
          "448:  int err = -ENOMEM;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "446:  struct ipv6_txoptions *opt;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "463:    fl6->flowlabel = ip6_flowlabel(ipv6_hdr(ireq->pktopts));",
          "465:   rcu_read_lock();",
          "468:   rcu_read_unlock();",
          "469:   err = net_xmit_eval(err);",
          "470:  }",
          "",
          "[Removed Lines]",
          "466:   err = ip6_xmit(sk, skb, fl6, rcu_dereference(np->opt),",
          "467:           np->tclass);",
          "",
          "[Added Lines]",
          "467:   opt = ireq->ipv6_opt;",
          "468:   if (!opt)",
          "469:    opt = rcu_dereference(np->opt);",
          "470:   err = ip6_xmit(sk, skb, fl6, opt, np->tclass);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "477: static void tcp_v6_reqsk_destructor(struct request_sock *req)",
          "478: {",
          "479:  kfree_skb(inet_rsk(req)->pktopts);",
          "480: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "482:  kfree(inet_rsk(req)->ipv6_opt);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1107:     but we make one more one thing there: reattach optmem",
          "1108:     to newsk.",
          "1111:  if (opt) {",
          "1112:   opt = ipv6_dup_options(newsk, opt);",
          "1113:   RCU_INIT_POINTER(newnp->opt, opt);",
          "",
          "[Removed Lines]",
          "1110:  opt = rcu_dereference(np->opt);",
          "",
          "[Added Lines]",
          "1114:  opt = ireq->ipv6_opt;",
          "1115:  if (!opt)",
          "1116:   opt = rcu_dereference(np->opt);",
          "",
          "---------------"
        ]
      }
    }
  ]
}