{
  "cve_id": "CVE-2021-20223",
  "cve_desc": "",
  "repo": "sqlite/sqlite",
  "patch_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
  "patch_info": {
    "commit_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "files": [
      "ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Prevent fts5 tokenizer unicode61 from considering '\\0' to be a token characters, even if other characters of class \"Cc\" are.\n\nFossilOrigin-Name: b7b7bde9b7a03665e3691c6d51118965f216d2dfb1617f138b9f9e60e418ed2f",
    "before_after_code_files": [
      "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
      "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c"
    ],
    "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test": [
      "File: ext/fts5/test/fts5tok1.test -> ext/fts5/test/fts5tok1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:   SELECT * FROM t4;",
      "112: } {1 {SQL logic error}}",
      "115: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114: #-------------------------------------------------------------------------",
      "115: # Embedded 0x00 characters.",
      "116: #",
      "117: reset_db",
      "118: do_execsql_test 3.1.0 {",
      "119:   CREATE VIRTUAL TABLE t1 USING fts5(z);",
      "120:   CREATE VIRTUAL TABLE tt USING fts5vocab(t1, 'instance');",
      "121:   INSERT INTO t1 VALUES('abc' || char(0) || 'def');",
      "122:   SELECT * FROM tt;",
      "123: } { abc 1 z 0 def 1 z 1 }",
      "124: do_execsql_test 3.1.1 {",
      "125:   SELECT hex(z) FROM t1;",
      "126: } {61626300646566}",
      "127: do_execsql_test 3.1.2 {",
      "128:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "129: } {}",
      "131: do_execsql_test 3.2.0 {",
      "132:   CREATE VIRTUAL TABLE t2 USING fts5(z,",
      "133:       tokenize=\"unicode61 categories 'L* N* Co Cc'\"",
      "134:   );",
      "135:   CREATE VIRTUAL TABLE tu USING fts5vocab(t2, 'instance');",
      "137:   INSERT INTO t2 VALUES('abc' || char(0) || 'def');",
      "138:   SELECT * FROM tu;",
      "139: } { abc 1 z 0 def 1 z 1 }",
      "141: do_execsql_test 3.2.1 {",
      "142:   SELECT hex(z) FROM t1;",
      "143: } {61626300646566}",
      "145: do_execsql_test 3.2.2 {",
      "146:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "147: } {}",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 0e7e113d9f2c929c1f8a85e2cfad8e2e60f0e8770212b5e5320fb2a2c42911f8",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a1085f06402378a4a46b0ffe63efc219e9471806",
      "candidate_info": {
        "commit_hash": "a1085f06402378a4a46b0ffe63efc219e9471806",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/a1085f06402378a4a46b0ffe63efc219e9471806",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c",
          "test/fuzzdata8.db"
        ],
        "message": "Improved detection of a corrupt database schema. Fix for a problem discovered by dbsqlfuzz.\n\nFossilOrigin-Name: 30735432bc33cb953b6d7d2a2de9eb378f9740e0e663f50c727c3f138cd43a2b",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 1e87da9c93309d1d69b1e0ab65c615b9ff9c1c6813ad0c7b90d2495be4ba0adc",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "8772:   assert( pPage->intKey || pX->nKey>=0 );",
          "8773:   assert( pPage->leaf || !pPage->intKey );",
          "8774:   if( pPage->nFree<0 ){",
          "8776:     if( rc ) return rc;",
          "8777:   }",
          "",
          "[Removed Lines]",
          "8775:     rc = btreeComputeFreeSpace(pPage);",
          "",
          "[Added Lines]",
          "8775:     if( pCur->eState>CURSOR_INVALID ){",
          "8776:       rc = SQLITE_CORRUPT_BKPT;",
          "8777:     }else{",
          "8778:       rc = btreeComputeFreeSpace(pPage);",
          "8779:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "195a843691e2c08686c36f85ab3a4000ed9e3e2b",
      "candidate_info": {
        "commit_hash": "195a843691e2c08686c36f85ab3a4000ed9e3e2b",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/195a843691e2c08686c36f85ab3a4000ed9e3e2b",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/loadext.c",
          "src/malloc.c",
          "src/pragma.c",
          "src/pragma.h",
          "src/sqlite.h.in",
          "src/sqlite3ext.h",
          "src/test1.c",
          "src/treeview.c",
          "test/fuzzcheck.c",
          "test/ossfuzz.c",
          "test/tester.tcl",
          "tool/mkpragmatab.tcl"
        ],
        "message": "Add support for the sqlite3_hard_heap_limit64() interface and the hard_heap_limit pragma.\n\nFossilOrigin-Name: 6399c47ea89c5766274bd6abdc9b6a85fe5b7f6c1078972c2f58e624bae59b7c",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/loadext.c||src/loadext.c",
          "src/malloc.c||src/malloc.c",
          "src/pragma.c||src/pragma.c",
          "src/pragma.h||src/pragma.h",
          "src/sqlite.h.in||src/sqlite.h.in",
          "src/sqlite3ext.h||src/sqlite3ext.h",
          "src/test1.c||src/test1.c",
          "src/treeview.c||src/treeview.c",
          "test/fuzzcheck.c||test/fuzzcheck.c",
          "test/ossfuzz.c||test/ossfuzz.c",
          "test/tester.tcl||test/tester.tcl",
          "tool/mkpragmatab.tcl||tool/mkpragmatab.tcl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 5baffcda7d5a42a99fa905faa834f14b94b1e2a26b5221f15d8ae8f1f5e3236a",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/loadext.c||src/loadext.c": [
          "File: src/loadext.c -> src/loadext.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "468: #else",
          "469:   0,",
          "470: #endif",
          "471: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "472:   sqlite3_hard_heap_limit64,",
          "",
          "---------------"
        ],
        "src/malloc.c||src/malloc.c": [
          "File: src/malloc.c -> src/malloc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: #endif",
          "33: }",
          "38: static SQLITE_WSD struct Mem0Global {",
          "46:   int nearlyFull;",
          "49: #define mem0 GLOBAL(struct Mem0Global, mem0)",
          "",
          "[Removed Lines]",
          "47: } mem0 = { 0, 0, 0 };",
          "",
          "[Added Lines]",
          "38: #ifndef SQLITE_MAX_MEMORY",
          "39: # define SQLITE_MAX_MEMORY 0",
          "40: #endif",
          "55: } mem0 = { 0, SQLITE_MAX_MEMORY, SQLITE_MAX_MEMORY, 0 };",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "91:     sqlite3_mutex_leave(mem0.mutex);",
          "92:     return priorLimit;",
          "93:   }",
          "94:   mem0.alarmThreshold = n;",
          "95:   nUsed = sqlite3StatusValue(SQLITE_STATUS_MEMORY_USED);",
          "96:   mem0.nearlyFull = (n>0 && n<=nUsed);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "109:   if( mem0.hardLimit>0 && (n>mem0.hardLimit || n==0) ){",
          "110:     n = mem0.hardLimit;",
          "111:   }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "104:   sqlite3_soft_heap_limit64(n);",
          "105: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "137: sqlite3_int64 sqlite3_hard_heap_limit64(sqlite3_int64 n){",
          "138:   sqlite3_int64 priorLimit;",
          "139: #ifndef SQLITE_OMIT_AUTOINIT",
          "140:   int rc = sqlite3_initialize();",
          "141:   if( rc ) return -1;",
          "142: #endif",
          "143:   sqlite3_mutex_enter(mem0.mutex);",
          "144:   priorLimit = mem0.hardLimit;",
          "145:   if( n>=0 ){",
          "146:     mem0.hardLimit = n;",
          "147:     if( n<mem0.alarmThreshold || mem0.alarmThreshold==0 ){",
          "148:       mem0.alarmThreshold = n;",
          "149:     }",
          "150:   }",
          "151:   sqlite3_mutex_leave(mem0.mutex);",
          "152:   return priorLimit;",
          "153: }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "191:   nFull = sqlite3GlobalConfig.m.xRoundup(n);",
          "200:   sqlite3StatusHighwater(SQLITE_STATUS_MALLOC_SIZE, n);",
          "201:   if( mem0.alarmThreshold>0 ){",
          "202:     sqlite3_int64 nUsed = sqlite3StatusValue(SQLITE_STATUS_MEMORY_USED);",
          "203:     if( nUsed >= mem0.alarmThreshold - nFull ){",
          "204:       mem0.nearlyFull = 1;",
          "205:       sqlite3MallocAlarm(nFull);",
          "206:     }else{",
          "207:       mem0.nearlyFull = 0;",
          "208:     }",
          "",
          "[Removed Lines]",
          "193: #ifdef SQLITE_MAX_MEMORY",
          "194:   if( sqlite3StatusValue(SQLITE_STATUS_MEMORY_USED)+nFull>SQLITE_MAX_MEMORY ){",
          "196:     return;",
          "197:   }",
          "198: #endif",
          "",
          "[Added Lines]",
          "248:       if( mem0.hardLimit ){",
          "249:         nUsed = sqlite3StatusValue(SQLITE_STATUS_MEMORY_USED);",
          "250:         if( nUsed >= mem0.hardLimit - nFull ){",
          "252:           return;",
          "253:         }",
          "254:       }",
          "",
          "---------------"
        ],
        "src/pragma.c||src/pragma.c": [
          "File: src/pragma.c -> src/pragma.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2089:     break;",
          "2090:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2103:   case PragTyp_HARD_HEAP_LIMIT: {",
          "2104:     sqlite3_int64 N;",
          "2105:     if( zRight && sqlite3DecOrHexToI64(zRight, &N)==SQLITE_OK ){",
          "2106:       sqlite3_int64 iPrior = sqlite3_hard_heap_limit64(-1);",
          "2107:       if( N>0 && (iPrior==0 || iPrior>N) ) sqlite3_hard_heap_limit64(N);",
          "2108:     }",
          "2109:     returnSingleInt(v, sqlite3_hard_heap_limit64(-1));",
          "2110:     break;",
          "2111:   }",
          "",
          "---------------"
        ],
        "src/pragma.h||src/pragma.h": [
          "File: src/pragma.h -> src/pragma.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: #define PragTyp_FOREIGN_KEY_CHECK             13",
          "22: #define PragTyp_FOREIGN_KEY_LIST              14",
          "23: #define PragTyp_FUNCTION_LIST                 15",
          "",
          "[Removed Lines]",
          "24: #define PragTyp_INCREMENTAL_VACUUM            16",
          "25: #define PragTyp_INDEX_INFO                    17",
          "26: #define PragTyp_INDEX_LIST                    18",
          "27: #define PragTyp_INTEGRITY_CHECK               19",
          "28: #define PragTyp_JOURNAL_MODE                  20",
          "29: #define PragTyp_JOURNAL_SIZE_LIMIT            21",
          "30: #define PragTyp_LOCK_PROXY_FILE               22",
          "31: #define PragTyp_LOCKING_MODE                  23",
          "32: #define PragTyp_PAGE_COUNT                    24",
          "33: #define PragTyp_MMAP_SIZE                     25",
          "34: #define PragTyp_MODULE_LIST                   26",
          "35: #define PragTyp_OPTIMIZE                      27",
          "36: #define PragTyp_PAGE_SIZE                     28",
          "37: #define PragTyp_PRAGMA_LIST                   29",
          "38: #define PragTyp_SECURE_DELETE                 30",
          "39: #define PragTyp_SHRINK_MEMORY                 31",
          "40: #define PragTyp_SOFT_HEAP_LIMIT               32",
          "41: #define PragTyp_SYNCHRONOUS                   33",
          "42: #define PragTyp_TABLE_INFO                    34",
          "43: #define PragTyp_TEMP_STORE                    35",
          "44: #define PragTyp_TEMP_STORE_DIRECTORY          36",
          "45: #define PragTyp_THREADS                       37",
          "46: #define PragTyp_WAL_AUTOCHECKPOINT            38",
          "47: #define PragTyp_WAL_CHECKPOINT                39",
          "48: #define PragTyp_ACTIVATE_EXTENSIONS           40",
          "49: #define PragTyp_KEY                           41",
          "50: #define PragTyp_LOCK_STATUS                   42",
          "51: #define PragTyp_STATS                         43",
          "",
          "[Added Lines]",
          "24: #define PragTyp_HARD_HEAP_LIMIT               16",
          "25: #define PragTyp_INCREMENTAL_VACUUM            17",
          "26: #define PragTyp_INDEX_INFO                    18",
          "27: #define PragTyp_INDEX_LIST                    19",
          "28: #define PragTyp_INTEGRITY_CHECK               20",
          "29: #define PragTyp_JOURNAL_MODE                  21",
          "30: #define PragTyp_JOURNAL_SIZE_LIMIT            22",
          "31: #define PragTyp_LOCK_PROXY_FILE               23",
          "32: #define PragTyp_LOCKING_MODE                  24",
          "33: #define PragTyp_PAGE_COUNT                    25",
          "34: #define PragTyp_MMAP_SIZE                     26",
          "35: #define PragTyp_MODULE_LIST                   27",
          "36: #define PragTyp_OPTIMIZE                      28",
          "37: #define PragTyp_PAGE_SIZE                     29",
          "38: #define PragTyp_PRAGMA_LIST                   30",
          "39: #define PragTyp_SECURE_DELETE                 31",
          "40: #define PragTyp_SHRINK_MEMORY                 32",
          "41: #define PragTyp_SOFT_HEAP_LIMIT               33",
          "42: #define PragTyp_SYNCHRONOUS                   34",
          "43: #define PragTyp_TABLE_INFO                    35",
          "44: #define PragTyp_TEMP_STORE                    36",
          "45: #define PragTyp_TEMP_STORE_DIRECTORY          37",
          "46: #define PragTyp_THREADS                       38",
          "47: #define PragTyp_WAL_AUTOCHECKPOINT            39",
          "48: #define PragTyp_WAL_CHECKPOINT                40",
          "49: #define PragTyp_ACTIVATE_EXTENSIONS           41",
          "50: #define PragTyp_KEY                           42",
          "51: #define PragTyp_LOCK_STATUS                   43",
          "52: #define PragTyp_STATS                         44",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "320: #endif",
          "321: #endif",
          "322: #if defined(SQLITE_HAS_CODEC)",
          "323:  {/* zName:     */ \"hexkey\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "323:  {/* zName:     */ \"hard_heap_limit\",",
          "",
          "---------------"
        ],
        "src/sqlite.h.in||src/sqlite.h.in": [
          "File: src/sqlite.h.in -> src/sqlite.h.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "6190: sqlite3_int64 sqlite3_soft_heap_limit64(sqlite3_int64 N);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6205: sqlite3_int64 sqlite3_hard_heap_limit64(sqlite3_int64 N);",
          "",
          "---------------"
        ],
        "src/sqlite3ext.h||src/sqlite3ext.h": [
          "File: src/sqlite3ext.h -> src/sqlite3ext.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "324:   int (*value_frombind)(sqlite3_value*);",
          "326:   int (*drop_modules)(sqlite3*,const char**);",
          "327: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "327:   sqlite3_int64 (*hard_heap_limit64)(sqlite3_int64);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "618: #define sqlite3_value_frombind         sqlite3_api->frombind",
          "620: #define sqlite3_drop_modules           sqlite3_api->drop_modules",
          "623: #if !defined(SQLITE_CORE) && !defined(SQLITE_OMIT_LOAD_EXTENSION)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "622: #define sqlite3_hard_heap_limit64      sqlite3_api->hard_heap_limit64",
          "",
          "---------------"
        ],
        "src/test1.c||src/test1.c": [
          "File: src/test1.c -> src/test1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5526:   return TCL_OK;",
          "5527: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5536: static int SQLITE_TCLAPI test_hard_heap_limit(",
          "5537:   void * clientData,",
          "5538:   Tcl_Interp *interp,",
          "5539:   int objc,",
          "5540:   Tcl_Obj *CONST objv[]",
          "5541: ){",
          "5542:   sqlite3_int64 amt;",
          "5543:   Tcl_WideInt N = -1;",
          "5544:   if( objc!=1 && objc!=2 ){",
          "5545:     Tcl_WrongNumArgs(interp, 1, objv, \"?N?\");",
          "5546:     return TCL_ERROR;",
          "5547:   }",
          "5548:   if( objc==2 ){",
          "5549:     if( Tcl_GetWideIntFromObj(interp, objv[1], &N) ) return TCL_ERROR;",
          "5550:   }",
          "5551:   amt = sqlite3_hard_heap_limit64(N);",
          "5552:   Tcl_SetObjResult(interp, Tcl_NewWideIntObj(amt));",
          "5553:   return TCL_OK;",
          "5554: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "7978:      { \"sqlite3_db_filename\",           test_db_filename,        0},",
          "7979:      { \"sqlite3_db_readonly\",           test_db_readonly,        0},",
          "7980:      { \"sqlite3_soft_heap_limit\",       test_soft_heap_limit,    0},",
          "7981:      { \"sqlite3_thread_cleanup\",        test_thread_cleanup,     0},",
          "7982:      { \"sqlite3_pager_refcounts\",       test_pager_refcounts,    0},",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8008:      { \"sqlite3_soft_heap_limit64\",     test_soft_heap_limit,    0},",
          "8009:      { \"sqlite3_hard_heap_limit64\",     test_hard_heap_limit,    0},",
          "",
          "---------------"
        ],
        "src/treeview.c||src/treeview.c": [
          "File: src/treeview.c -> src/treeview.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "66:     va_start(ap, zFormat);",
          "67:     sqlite3_str_vappendf(&acc, zFormat, ap);",
          "68:     va_end(ap);",
          "70:     sqlite3_str_append(&acc, \"\\n\", 1);",
          "71:   }",
          "72:   sqlite3StrAccumFinish(&acc);",
          "",
          "[Removed Lines]",
          "69:     assert( acc.nChar>0 );",
          "",
          "[Added Lines]",
          "69:     assert( acc.nChar>0 || acc.accError );",
          "",
          "---------------"
        ],
        "test/fuzzcheck.c||test/fuzzcheck.c": [
          "File: test/fuzzcheck.c -> test/fuzzcheck.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "454: static int lengthLimit = 1000000;",
          "457: static int vdbeOpLimit = 25000;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "457: static sqlite3_int64 heapLimit = 1000000000;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "777:   if( lengthLimit>0 ){",
          "778:     sqlite3_limit(cx.db, SQLITE_LIMIT_LENGTH, lengthLimit);",
          "779:   }",
          "781:   if( nDb>=20 && aDb[18]==2 && aDb[19]==2 ){",
          "782:     aDb[18] = aDb[19] = 1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "783:   sqlite3_hard_heap_limit64(heapLimit);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1391:         infoFlag = 1;",
          "1392:       }else",
          "1393:       if( strcmp(z,\"limit-mem\")==0 ){",
          "1398:         if( i>=argc-1 ) fatalError(\"missing arguments on %s\", argv[i]);",
          "1399:         nMem = integerValue(argv[++i]);",
          "1401:       }else",
          "1402:       if( strcmp(z,\"limit-vdbe\")==0 ){",
          "1403:         vdbeLimitFlag = 1;",
          "",
          "[Removed Lines]",
          "1394: #if !defined(SQLITE_ENABLE_MEMSYS3) && !defined(SQLITE_ENABLE_MEMSYS5)",
          "1395:         fatalError(\"the %s option requires -DSQLITE_ENABLE_MEMSYS5 or _MEMSYS3\",",
          "1396:                    argv[i]);",
          "1397: #else",
          "1400: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1586:           ossFuzzThisDb = sqlite3_column_int(pStmt,1);",
          "1587:           if( verboseFlag ) printf(\"Config: oss-fuzz=%d\\n\", ossFuzzThisDb);",
          "1588:         }",
          "1594:           nMemThisDb = sqlite3_column_int(pStmt,1);",
          "1595:           if( verboseFlag ) printf(\"Config: limit-mem=%d\\n\", nMemThisDb);",
          "1597:         }",
          "1598:       }",
          "1599:       sqlite3_finalize(pStmt);",
          "",
          "[Removed Lines]",
          "1589:         if( strcmp(zName, \"limit-mem\")==0 && !nativeMalloc ){",
          "1590: #if !defined(SQLITE_ENABLE_MEMSYS3) && !defined(SQLITE_ENABLE_MEMSYS5)",
          "1591:           fatalError(\"the limit-mem option requires -DSQLITE_ENABLE_MEMSYS5\"",
          "1592:                      \" or _MEMSYS3\");",
          "1593: #else",
          "1596: #endif",
          "",
          "[Added Lines]",
          "1588:         if( strcmp(zName, \"limit-mem\")==0 ){",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1722:     sqlite3_shutdown();",
          "1727:       }",
          "1729:     }",
          "",
          "[Removed Lines]",
          "1723:     if( nMemThisDb>0 && !nativeMalloc ){",
          "1724:       pHeap = realloc(pHeap, nMemThisDb);",
          "1725:       if( pHeap==0 ){",
          "1726:         fatalError(\"failed to allocate %d bytes of heap memory\", nMem);",
          "1728:       sqlite3_config(SQLITE_CONFIG_HEAP, pHeap, nMemThisDb, 128);",
          "",
          "[Added Lines]",
          "1717:     if( nMemThisDb>0 && nMem==0 ){",
          "1718:       if( !nativeMalloc ){",
          "1719:         pHeap = realloc(pHeap, nMemThisDb);",
          "1720:         if( pHeap==0 ){",
          "1721:           fatalError(\"failed to allocate %d bytes of heap memory\", nMem);",
          "1722:         }",
          "1723:         sqlite3_config(SQLITE_CONFIG_HEAP, pHeap, nMemThisDb, 128);",
          "1724:       }else{",
          "1725:         sqlite3_hard_heap_limit64((sqlite3_int64)nMemThisDb);",
          "1727:     }else{",
          "1728:       sqlite3_hard_heap_limit64(0);",
          "",
          "---------------"
        ],
        "test/ossfuzz.c||test/ossfuzz.c": [
          "File: test/ossfuzz.c -> test/ossfuzz.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "156:   sqlite3_limit(cx.db, SQLITE_LIMIT_VDBE_OP, 25000);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "159:   sqlite3_hard_heap_limit64(20000000);",
          "",
          "---------------"
        ],
        "test/tester.tcl||test/tester.tcl": [
          "File: test/tester.tcl -> test/tester.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "388:   puts {Options:",
          "389:   --pause                  Wait for user input before continuing",
          "390:   --soft-heap-limit=N      Set the soft-heap-limit to N",
          "391:   --maxerror=N             Quit after N errors",
          "392:   --verbose=(0|1)          Control the amount of output.  Default '1'",
          "393:   --output=FILE            set --verbose=2 and output to FILE.  Implies -q",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "391:   --hard-heap-limit=N      Set the hard-heap-limit to N",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "408:   #",
          "409:   #   --pause",
          "410:   #   --soft-heap-limit=NN",
          "411:   #   --maxerror=NN",
          "412:   #   --malloctrace=N",
          "413:   #   --backtrace=N",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "412:   #   --hard-heap-limit=NN",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "424:   #   --help",
          "425:   #",
          "426:   set cmdlinearg(soft-heap-limit)    0",
          "427:   set cmdlinearg(maxerror)        1000",
          "428:   set cmdlinearg(malloctrace)        0",
          "429:   set cmdlinearg(backtrace)         10",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "429:   set cmdlinearg(hard-heap-limit)    0",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "450:       {^-+soft-heap-limit=.+$} {",
          "451:         foreach {dummy cmdlinearg(soft-heap-limit)} [split $a =] break",
          "452:       }",
          "453:       {^-+maxerror=.+$} {",
          "454:         foreach {dummy cmdlinearg(maxerror)} [split $a =] break",
          "455:       }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "456:       {^-+hard-heap-limit=.+$} {",
          "457:         foreach {dummy cmdlinearg(hard-heap-limit)} [split $a =] break",
          "458:       }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "586: # way if an individual test file changes the soft-heap-limit, it",
          "587: # will be reset at the start of the next test file.",
          "588: #",
          "591: # Create a test database",
          "592: #",
          "",
          "[Removed Lines]",
          "589: sqlite3_soft_heap_limit $cmdlinearg(soft-heap-limit)",
          "",
          "[Added Lines]",
          "595: sqlite3_soft_heap_limit64 $cmdlinearg(soft-heap-limit)",
          "596: sqlite3_hard_heap_limit64 $cmdlinearg(hard-heap-limit)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1207:   db close",
          "1208:   sqlite3_reset_auto_extension",
          "1211:   set nTest [incr_ntest]",
          "1212:   set nErr [set_test_counter errors]",
          "",
          "[Removed Lines]",
          "1210:   sqlite3_soft_heap_limit 0",
          "",
          "[Added Lines]",
          "1217:   sqlite3_soft_heap_limit64 0",
          "1218:   sqlite3_hard_heap_limit64 0",
          "",
          "---------------"
        ],
        "tool/mkpragmatab.tcl||tool/mkpragmatab.tcl": [
          "File: tool/mkpragmatab.tcl -> tool/mkpragmatab.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "401:   NAME: soft_heap_limit",
          "402:   FLAG: Result0",
          "404:   NAME: threads",
          "405:   FLAG: Result0",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "404:   NAME: hard_heap_limit",
          "405:   FLAG: Result0",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "62be2dc753b56629cf31b1d3d502edc00f768005",
      "candidate_info": {
        "commit_hash": "62be2dc753b56629cf31b1d3d502edc00f768005",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/62be2dc753b56629cf31b1d3d502edc00f768005",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/window.c",
          "test/window1.test"
        ],
        "message": "Avoid evaluating PARTITION BY or ORDER BY expressions multiple times for window function queries that use multiple window functions with the same window-definition.\n\nFossilOrigin-Name: 57070c68bbe15fc1d19a765182432e844c082909bdbc63b58fd86b96e2c521dd",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/window.c||src/window.c",
          "test/window1.test||test/window1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: ffeec62cb5223ae70bc1889df4c0b241f5d17b1a10156362ca59953028741480",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "788:     case TK_AGG_FUNCTION:",
          "789:     case TK_COLUMN: {",
          "792:       if( p->pSub ){",
          "793:         assert( ExprHasProperty(pExpr, EP_Static)==0 );",
          "794:         ExprSetProperty(pExpr, EP_Static);",
          "",
          "[Removed Lines]",
          "790:       Expr *pDup = sqlite3ExprDup(pParse->db, pExpr, 0);",
          "791:       p->pSub = sqlite3ExprListAppend(pParse, p->pSub, pDup);",
          "",
          "[Added Lines]",
          "790:       int iCol = -1;",
          "791:       if( p->pSub ){",
          "792:         int i;",
          "793:         for(i=0; i<p->pSub->nExpr; i++){",
          "794:           if( 0==sqlite3ExprCompare(0, p->pSub->a[i].pExpr, pExpr, -1) ){",
          "795:             iCol = i;",
          "796:             break;",
          "797:           }",
          "798:         }",
          "799:       }",
          "800:       if( iCol<0 ){",
          "801:         Expr *pDup = sqlite3ExprDup(pParse->db, pExpr, 0);",
          "802:         p->pSub = sqlite3ExprListAppend(pParse, p->pSub, pDup);",
          "803:       }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "797:         memset(pExpr, 0, sizeof(Expr));",
          "799:         pExpr->op = TK_COLUMN;",
          "801:         pExpr->iTable = p->pWin->iEphCsr;",
          "802:         pExpr->y.pTab = p->pTab;",
          "803:       }",
          "",
          "[Removed Lines]",
          "800:         pExpr->iColumn = p->pSub->nExpr-1;",
          "",
          "[Added Lines]",
          "812:         pExpr->iColumn = (iCol<0 ? p->pSub->nExpr-1: iCol);",
          "",
          "---------------"
        ],
        "test/window1.test||test/window1.test": [
          "File: test/window1.test -> test/window1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1256:   ORDER BY 1;",
          "1257: } {6 1}",
          "1259: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1259: reset_db",
          "1260: do_execsql_test 34.1 {",
          "1261:   CREATE TABLE t1(a,b,c);",
          "1262: }",
          "1263: do_execsql_test 34.2 {",
          "1264:   SELECT avg(a) OVER (",
          "1265:       ORDER BY (SELECT sum(b) OVER ()",
          "1266:         FROM t1 ORDER BY (",
          "1267:           SELECT total(d) OVER (ORDER BY c)",
          "1268:           FROM (SELECT 1 AS d) ORDER BY 1",
          "1269:           )",
          "1270:         )",
          "1271:       )",
          "1272:   FROM t1;",
          "1273: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4f1315a43203026aa23f1c1df630249ccf2b32b1",
      "candidate_info": {
        "commit_hash": "4f1315a43203026aa23f1c1df630249ccf2b32b1",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/4f1315a43203026aa23f1c1df630249ccf2b32b1",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/utf.c",
          "test/tkt-3fe897352e.test"
        ],
        "message": "Back out the change from [7fab1393c2b22b1f] that tries to convert invalid surrogate characters in UTF16 into the replacement character 0xfffd, as we find that this breaks some software.\n\nFossilOrigin-Name: 4218c7b71fb6b227dbe4b852718584c150164af2d84e067cb810aa602554a609",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/utf.c||src/utf.c",
          "test/tkt-3fe897352e.test||test/tkt-3fe897352e.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 3117c1b5a9e348fd8d16ba9d03fdafaad8514567fb3403f72b86d6162ad40bde",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/utf.c||src/utf.c": [
          "File: src/utf.c -> src/utf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "284:         c = *(zIn++);",
          "285:         c += (*(zIn++))<<8;",
          "286:         if( c>=0xd800 && c<0xe000 ){",
          "287:           if( c>=0xdc00 || zIn>=zTerm ){",
          "288:             c = 0xfffd;",
          "289:           }else{",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "287: #ifdef SQLITE_REPLACE_INVALID_UTF",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "296:               c = ((c&0x3ff)<<10) + (c2&0x3ff) + 0x10000;",
          "297:             }",
          "298:           }",
          "299:         }",
          "300:         WRITE_UTF8(z, c);",
          "301:       }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "300: #else",
          "301:           if( zIn<zTerm ){",
          "302:             int c2 = (*zIn++);",
          "303:             c2 += ((*zIn++)<<8);",
          "304:             c = (c2&0x03FF) + ((c&0x003F)<<10) + (((c&0x03C0)+0x0040)<<10);",
          "305:           }",
          "306: #endif",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "305:         c = (*(zIn++))<<8;",
          "306:         c += *(zIn++);",
          "307:         if( c>=0xd800 && c<0xe000 ){",
          "308:           if( c>=0xdc00 || zIn>=zTerm ){",
          "309:             c = 0xfffd;",
          "310:           }else{",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "316: #ifdef SQLITE_REPLACE_INVALID_UTF",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "317:               c = ((c&0x3ff)<<10) + (c2&0x3ff) + 0x10000;",
          "318:             }",
          "319:           }",
          "320:         }",
          "321:         WRITE_UTF8(z, c);",
          "322:       }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "329: #else",
          "330:           if( zIn<zTerm ){",
          "331:             int c2 = ((*zIn++)<<8);",
          "332:             c2 += (*zIn++);",
          "333:             c = (c2&0x03FF) + ((c&0x003F)<<10) + (((c&0x03C0)+0x0040)<<10);",
          "334:           }",
          "335: #endif",
          "",
          "---------------"
        ],
        "test/tkt-3fe897352e.test||test/tkt-3fe897352e.test": [
          "File: test/tkt-3fe897352e.test -> test/tkt-3fe897352e.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "33:     INSERT INTO t1 VALUES(hex_to_utf16be('D800'));",
          "34:     SELECT hex(x) FROM t1;",
          "35:   }",
          "37: do_test tkt-3fe89-1.2 {",
          "38:   db eval {",
          "39:     DELETE FROM t1;",
          "40:     INSERT INTO t1 VALUES(hex_to_utf16le('00D8'));",
          "41:     SELECT hex(x) FROM t1;",
          "42:   }",
          "44: do_test tkt-3fe89-1.3 {",
          "45:   db eval {",
          "46:     DELETE FROM t1;",
          "47:     INSERT INTO t1 VALUES(hex_to_utf16be('DFFF'));",
          "48:     SELECT hex(x) FROM t1;",
          "49:   }",
          "51: do_test tkt-3fe89-1.4 {",
          "52:   db eval {",
          "53:     DELETE FROM t1;",
          "54:     INSERT INTO t1 VALUES(hex_to_utf16le('FFDF'));",
          "55:     SELECT hex(x) FROM t1;",
          "56:   }",
          "60: finish_test",
          "",
          "[Removed Lines]",
          "36: } {EFBFBD}",
          "43: } {EFBFBD}",
          "50: } {EFBFBD}",
          "57: } {EFBFBD}",
          "",
          "[Added Lines]",
          "36: } {EDA080}",
          "43: } {EDA080}",
          "50: } {EDBFBF}",
          "57: } {EDBFBF}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9951522f0b7eb62242d0a74a9a47871247d93b0b",
      "candidate_info": {
        "commit_hash": "9951522f0b7eb62242d0a74a9a47871247d93b0b",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/9951522f0b7eb62242d0a74a9a47871247d93b0b",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/select.c",
          "src/where.c"
        ],
        "message": "Improvements to the min()/max() optimization so that it is able to use indexes where terms are constrained by IN operators.\n\nFossilOrigin-Name: b8ba2f17f938c03543a89dd29d6987163f7a4085a51de1aa14ea5504501c4f72",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/select.c||src/select.c",
          "src/where.c||src/where.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 5041f6a1c439b43c654e72a391517c115e222ef0e9a565907b03149b535e92c8",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "6706:         explainSimpleCount(pParse, pTab, pBest);",
          "6707:       }else{",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6709:         int addrSkip;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "6754:         }",
          "6755:         updateAccumulator(pParse, regAcc, pAggInfo);",
          "6756:         if( regAcc ) sqlite3VdbeAddOp2(v, OP_Integer, 1, regAcc);",
          "6761:         }",
          "6762:         sqlite3WhereEnd(pWInfo);",
          "6763:         finalizeAggFunctions(pParse, pAggInfo);",
          "",
          "[Removed Lines]",
          "6757:         if( sqlite3WhereIsOrdered(pWInfo)>0 ){",
          "6758:           sqlite3VdbeGoto(v, sqlite3WhereBreakLabel(pWInfo));",
          "6759:           VdbeComment((v, \"%s() by index\",",
          "6760:                 (minMaxFlag==WHERE_ORDERBY_MIN?\"min\":\"max\")));",
          "",
          "[Added Lines]",
          "6758:         addrSkip = sqlite3WhereOrderByLimitOptLabel(pWInfo);",
          "6759:         if( addrSkip!=sqlite3WhereContinueLabel(pWInfo) ){",
          "6760:           sqlite3VdbeGoto(v, addrSkip);",
          "",
          "---------------"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3744:   orderDistinctMask = 0;",
          "3745:   ready = 0;",
          "3746:   eqOpMask = WO_EQ | WO_IS | WO_ISNULL;",
          "3748:   for(iLoop=0; isOrderDistinct && obSat<obDone && iLoop<=nLoop; iLoop++){",
          "3749:     if( iLoop>0 ) ready |= pLoop->maskSelf;",
          "3750:     if( iLoop<nLoop ){",
          "",
          "[Removed Lines]",
          "3747:   if( wctrlFlags & WHERE_ORDERBY_LIMIT ) eqOpMask |= WO_IN;",
          "",
          "[Added Lines]",
          "3747:   if( wctrlFlags & (WHERE_ORDERBY_LIMIT|WHERE_ORDERBY_MAX|WHERE_ORDERBY_MIN) ){",
          "3748:     eqOpMask |= WO_IN;",
          "3749:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3784:         for(j=0; j<pLoop->nLTerm && pTerm!=pLoop->aLTerm[j]; j++){}",
          "3785:         if( j>=pLoop->nLTerm ) continue;",
          "3786:       }",
          "",
          "[Removed Lines]",
          "3783:         assert( wctrlFlags & WHERE_ORDERBY_LIMIT );",
          "",
          "[Added Lines]",
          "3785:         assert( wctrlFlags &",
          "3786:                (WHERE_ORDERBY_LIMIT|WHERE_ORDERBY_MIN|WHERE_ORDERBY_MAX) );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4428:             }",
          "4429:           }",
          "4430:         }",
          "4431:       }",
          "4432:     }",
          "4433:     if( (pWInfo->wctrlFlags & WHERE_SORTBYGROUP)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4434:       }else if( nLoop",
          "4435:             && pWInfo->nOBSat==1",
          "4436:             && (pWInfo->wctrlFlags & (WHERE_ORDERBY_MIN|WHERE_ORDERBY_MAX))!=0",
          "4437:             ){",
          "4438:         pWInfo->bOrderedInnerLoop = 1;",
          "",
          "---------------"
        ]
      }
    }
  ]
}