{
  "cve_id": "CVE-2019-19603",
  "cve_desc": "SQLite 3.30.1 mishandles certain SELECT statements with a nonexistent VIEW, leading to an application crash.",
  "repo": "sqlite/sqlite",
  "patch_hash": "527cbd4a104cb93bf3994b3dd3619a6299a78b13",
  "patch_info": {
    "commit_hash": "527cbd4a104cb93bf3994b3dd3619a6299a78b13",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/527cbd4a104cb93bf3994b3dd3619a6299a78b13",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/build.c",
      "src/sqliteInt.h",
      "test/altertab.test"
    ],
    "message": "Do not allow CREATE TABLE or CREATE VIEW of an object with a name that looks like a shadow table name.\n\nFossilOrigin-Name: 6aef58b629d89955f85f65191ba2be67b2adfac4f0327fe9a7141cb2705dbc00",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/build.c||src/build.c",
      "src/sqliteInt.h||src/sqliteInt.h",
      "test/altertab.test||test/altertab.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 8ad34d36a141fa8f5d9bd784dfeb892c983897a6dc6b867607cc668508acf944",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/build.c||src/build.c": [
      "File: src/build.c -> src/build.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "856:       }",
      "857:     }",
      "858:   }else{",
      "861:     ){",
      "862:       sqlite3ErrorMsg(pParse, \"object name reserved for internal use: %s\",",
      "863:                       zName);",
      "864:       return SQLITE_ERROR;",
      "865:     }",
      "866:   }",
      "867:   return SQLITE_OK;",
      "868: }",
      "",
      "[Removed Lines]",
      "859:     if( pParse->nested==0",
      "860:      && 0==sqlite3StrNICmp(zName, \"sqlite_\", 7)",
      "",
      "[Added Lines]",
      "859:     if( (pParse->nested==0 && 0==sqlite3StrNICmp(zName, \"sqlite_\", 7))",
      "860:      || (sqlite3ReadOnlyShadowTables(db) && sqlite3ShadowTableName(db, zName))",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "2132: static int isShadowTableName(sqlite3 *db, char *zName){",
      "",
      "[Added Lines]",
      "2133: int sqlite3ShadowTableName(sqlite3 *db, const char *zName){",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "2147:   if( pMod->pModule->xShadowName==0 ) return 0;",
      "2148:   return pMod->pModule->xShadowName(zTail+1);",
      "2149: }",
      "",
      "[Removed Lines]",
      "2150: #else",
      "2151: # define isShadowTableName(x,y) 0",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "2190:   p = pParse->pNewTable;",
      "2191:   if( p==0 ) return;",
      "2194:     p->tabFlags |= TF_Shadow;",
      "2195:   }",
      "",
      "[Removed Lines]",
      "2193:   if( pSelect==0 && isShadowTableName(db, p->zName) ){",
      "",
      "[Added Lines]",
      "2192:   if( pSelect==0 && sqlite3ShadowTableName(db, p->zName) ){",
      "",
      "---------------"
    ],
    "src/sqliteInt.h||src/sqliteInt.h": [
      "File: src/sqliteInt.h -> src/sqliteInt.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "4548: #  define sqlite3VtabInSync(db) ((db)->nVTrans>0 && (db)->aVTrans==0)",
      "4549: #endif",
      "4550: int sqlite3ReadOnlyShadowTables(sqlite3 *db);",
      "4551: int sqlite3VtabEponymousTableInit(Parse*,Module*);",
      "4552: void sqlite3VtabEponymousTableClear(sqlite3*,Module*);",
      "4553: void sqlite3VtabMakeWritable(Parse*,Table*);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4551: #ifndef SQLITE_OMIT_VIRTUALTABLE",
      "4552:   int sqlite3ShadowTableName(sqlite3 *db, const char *zName);",
      "4553: #else",
      "4554: # define sqlite3ShadowTableName(A,B) 0",
      "4555: #endif",
      "",
      "---------------"
    ],
    "test/altertab.test||test/altertab.test": [
      "File: test/altertab.test -> test/altertab.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "547:   } {1 {table y1_segments may not be modified}}",
      "549:   do_catchsql_test 16.20 {",
      "554:     DROP TABLE y1_segments;",
      "555:   } {1 {table y1_segments may not be dropped}}",
      "557:   do_execsql_test 16.30 {",
      "558:     ALTER TABLE y1 RENAME TO z1;",
      "559:   }",
      "",
      "[Removed Lines]",
      "550:     ALTER TABLE y1_segments RENAME TO abc;",
      "551:   } {1 {table y1_segments may not be altered}}",
      "553:   do_catchsql_test 16.21 {",
      "",
      "[Added Lines]",
      "553:   do_catchsql_test 16.20 {",
      "554:     ALTER TABLE y1_segments RENAME TO abc;",
      "555:   } {1 {table y1_segments may not be altered}}",
      "556:   sqlite3_db_config db DEFENSIVE 0",
      "557:   do_catchsql_test 16.22 {",
      "558:     ALTER TABLE y1_segments RENAME TO abc;",
      "559:   } {0 {}}",
      "560:   sqlite3_db_config db DEFENSIVE 1",
      "561:   do_catchsql_test 16.23 {",
      "562:     CREATE TABLE y1_segments AS SELECT * FROM abc;",
      "563:   } {1 {object name reserved for internal use: y1_segments}}",
      "564:   do_catchsql_test 16.24 {",
      "565:     CREATE VIEW y1_segments AS SELECT * FROM abc;",
      "566:   } {1 {object name reserved for internal use: y1_segments}}",
      "567:   sqlite3_db_config db DEFENSIVE 0",
      "568:   do_catchsql_test 16.25 {",
      "569:     ALTER TABLE abc RENAME TO y1_segments;",
      "570:   } {0 {}}",
      "571:   sqlite3_db_config db DEFENSIVE 1",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a1ac03590baf0fffea9437436adeaf4a1db64a65",
      "candidate_info": {
        "commit_hash": "a1ac03590baf0fffea9437436adeaf4a1db64a65",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/a1ac03590baf0fffea9437436adeaf4a1db64a65",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/walker.c",
          "test/altertab3.test"
        ],
        "message": "Fix a faulty assert() in walker.c that could fail when processing an ALTER TABLE statement on a schema containing invalid table references that are part of a WINDOW definition.\n\nFossilOrigin-Name: ee076c28d8ee0f5b099cdef83ae6cea6ef5aa209ab528d7c49949dd653ce019c",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/walker.c||src/walker.c",
          "test/altertab3.test||test/altertab3.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 47e23064ba0205148f89e12803a62d5a4d6d2054f593f60c031e815112170b9b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/walker.c||src/walker.c": [
          "File: src/walker.c -> src/walker.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "120:   {",
          "121:     Parse *pParse = pWalker->pParse;",
          "122:     if( pParse && IN_RENAME_OBJECT ){",
          "123:       int rc = walkWindowList(pWalker, p->pWinDefn);",
          "125:       return rc;",
          "126:     }",
          "127:   }",
          "",
          "[Removed Lines]",
          "124:       assert( rc==WRC_Continue );",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/altertab3.test||test/altertab3.test": [
          "File: test/altertab3.test -> test/altertab3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "237:   ) IN () OR t1.a=5}",
          "238: }",
          "241: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "240: #-------------------------------------------------------------------------",
          "241: reset_db",
          "242: do_execsql_test 11.1 {",
          "243:   CREATE TABLE t1(",
          "244:       a,b,c,d,e,f,g,h,j,jj,jjb,k,aa,bb,cc,dd,ee DEFAULT 3.14,",
          "245:       ff DEFAULT('hiccup'),Wg NOD NULL DEFAULT(false)",
          "246:   );",
          "248:   CREATE TRIGGER b AFTER INSERT ON t1 WHEN new.a BEGIN",
          "249:     SELECT a, sum() w3 FROM t1",
          "250:     WINDOW b AS (ORDER BY NOT EXISTS(SELECT 1 FROM abc));",
          "251:   END;",
          "252: }",
          "254: do_catchsql_test 11.2 {",
          "255:   ALTER TABLE t1 RENAME TO t1x;",
          "256: } {1 {error in trigger b: no such table: abc}}",
          "258: do_execsql_test 11.3 {",
          "259:   DROP TRIGGER b;",
          "260:   CREATE TRIGGER b AFTER INSERT ON t1 WHEN new.a BEGIN",
          "261:     SELECT a, sum() w3 FROM t1",
          "262:     WINDOW b AS (ORDER BY NOT EXISTS(SELECT 1 FROM t1));",
          "263:   END;",
          "264: } {}",
          "266: do_execsql_test 11.4 {",
          "267:   ALTER TABLE t1 RENAME TO t1x;",
          "268:   SELECT sql FROM sqlite_master WHERE name = 'b';",
          "269: } {",
          "270: {CREATE TRIGGER b AFTER INSERT ON \"t1x\" WHEN new.a BEGIN",
          "271:     SELECT a, sum() w3 FROM \"t1x\"",
          "272:     WINDOW b AS (ORDER BY NOT EXISTS(SELECT 1 FROM \"t1x\"));",
          "273:   END}",
          "274: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3bf0d7a8813a7e40f1ad37e10cad744bfd295e74",
      "candidate_info": {
        "commit_hash": "3bf0d7a8813a7e40f1ad37e10cad744bfd295e74",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/3bf0d7a8813a7e40f1ad37e10cad744bfd295e74",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/memdb.c"
        ],
        "message": "Remove an incorrect assert() from the deserialize in-memory database VFS.\n\nFossilOrigin-Name: 80151d7e3b9fd84086874a1cebed024b9e14005ea2d0108cf6efcd07373fcf51",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/memdb.c||src/memdb.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: cb72ee0478ce98c48aae059fd5de4e36caf2b8c953e08fcb799bfd119ad46b73",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/memdb.c||src/memdb.c": [
          "File: src/memdb.c -> src/memdb.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "306: ){",
          "307:   MemFile *p = (MemFile *)pFile;",
          "308:   if( iOfst+iAmt>p->sz ){",
          "311:   }else{",
          "312:     p->nMmap++;",
          "",
          "[Removed Lines]",
          "309:     assert( CORRUPT_DB );",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1a39d2bb5cb1a72f5e91aaabfd94fc0e9759bf82",
      "candidate_info": {
        "commit_hash": "1a39d2bb5cb1a72f5e91aaabfd94fc0e9759bf82",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/1a39d2bb5cb1a72f5e91aaabfd94fc0e9759bf82",
        "files": [
          "ext/fts5/fts5_aux.c",
          "ext/fts5/test/fts5ak.test",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Handle SQL NULL values without crashing in the fts5 snippet() and highlight() functions.\n\nFossilOrigin-Name: a5e9cc794f17566160c4b2b5791601a744a21ace987b19ff8a5816fd78dce56a",
        "before_after_code_files": [
          "ext/fts5/fts5_aux.c||ext/fts5/fts5_aux.c",
          "ext/fts5/test/fts5ak.test||ext/fts5/test/fts5ak.test",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts5/fts5_aux.c||ext/fts5/fts5_aux.c": [
          "File: ext/fts5/fts5_aux.c -> ext/fts5/fts5_aux.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "136:   HighlightContext *p,",
          "137:   const char *z, int n",
          "138: ){",
          "140:     if( n<0 ) n = (int)strlen(z);",
          "141:     p->zOut = sqlite3_mprintf(\"%z%.*s\", p->zOut, n, z);",
          "142:     if( p->zOut==0 ) *pRc = SQLITE_NOMEM;",
          "",
          "[Removed Lines]",
          "139:   if( *pRc==SQLITE_OK ){",
          "",
          "[Added Lines]",
          "139:   if( *pRc==SQLITE_OK && z ){",
          "",
          "---------------"
        ],
        "ext/fts5/test/fts5ak.test||ext/fts5/test/fts5ak.test": [
          "File: ext/fts5/test/fts5ak.test -> ext/fts5/test/fts5ak.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "144:   {[a b c d e]}",
          "145: }",
          "147: }",
          "149: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "147: do_execsql_test 3.2 {",
          "148:   SELECT highlight(ft, 0, NULL, NULL) FROM ft WHERE ft MATCH 'a+b+c AND c+d+e';",
          "149: } {",
          "150:   {a b c x c d e}",
          "151:   {a b c c d e}",
          "152:   {a b c d e}",
          "153: }",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: e54efd60c20bbfc5d70ddb9e1dd6ffb68cbbcfa57b4f07cb104767ef08c1a559",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2134eb5721f6ffea872432d3560d5fcfb54237b8",
      "candidate_info": {
        "commit_hash": "2134eb5721f6ffea872432d3560d5fcfb54237b8",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/2134eb5721f6ffea872432d3560d5fcfb54237b8",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "test/index6.test"
        ],
        "message": "Merge fixes from trunk.\n\nFossilOrigin-Name: ab1e58fac9e3f9d7d90cefb39f8f145d211d38ec0cb393208c4531cc646056c1",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "test/index6.test||test/index6.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 7b6a605b1883dfcbe237b0a58f6f0c233a109e88b521c3b3d97198526c8a0317",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2445:           if( pIdx->nColumn<nExpr ) continue;",
          "2448:           testcase( pIdx->nColumn==BMS-2 );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2446:           if( pIdx->pPartIdxWhere!=0 ) continue;",
          "",
          "---------------"
        ],
        "test/index6.test||test/index6.test": [
          "File: test/index6.test -> test/index6.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "389: do_execsql_test index6-11.2 {",
          "390:   EXPLAIN QUERY PLAN SELECT a FROM t11 WHERE b<>99 AND c<>98;",
          "391: } {/USING INDEX t11x/}",
          "394: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "393: # 2018-12-08",
          "394: # Ticket https://www.sqlite.org/src/info/1d958d90596593a7",
          "395: # NOT IN operator fails when using a partial index.",
          "396: #",
          "397: do_execsql_test index6-12.1 {",
          "398:   DROP TABLE IF EXISTS t1;",
          "399:   DROP TABLE IF EXISTS t2;",
          "400:   CREATE TABLE t1(a,b);",
          "401:   INSERT INTO t1 VALUES(1,1);",
          "402:   INSERT INTO t1 VALUES(2,2);",
          "403:   CREATE TABLE t2(x);",
          "404:   INSERT INTO t2 VALUES(1);",
          "405:   INSERT INTO t2 VALUES(2);",
          "406:   SELECT 'one', * FROM t2 WHERE x NOT IN (SELECT a FROM t1);",
          "407:   CREATE INDEX t1a ON t1(a) WHERE b=1;",
          "408:   SELECT 'two', * FROM t2 WHERE x NOT IN (SELECT a FROM t1);",
          "409: } {}",
          "410: do_execsql_test index6-12.2 {",
          "411:   SELECT x FROM t2 WHERE x IN (SELECT a FROM t1) ORDER BY +x;",
          "412: } {1 2}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "dbdddc99d83130fe22ed63a4bfc19a53a408c51b",
      "candidate_info": {
        "commit_hash": "dbdddc99d83130fe22ed63a4bfc19a53a408c51b",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/dbdddc99d83130fe22ed63a4bfc19a53a408c51b",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbe.c"
        ],
        "message": "Detect oversized strings in the OP_String opcode even if the P4 argument is originally UTF8 and has to be converted to UTF16 to match the database file and that conversion causes the string to become shorter and cross below SQLITE_LIMIT_LENGTH threshold.  This might fix an OSSFuzz problem that we have been so far unable to reproduce.\n\nFossilOrigin-Name: c13d563925db12bc2c91ff9432050261e5bd39d960e2739777a66bf804df2e31",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbe.c||src/vdbe.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: be21a6416d47ff7db995006a0422b745044d9b8bb5bad3c53342aa6e2e524771",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1102:   if( encoding!=SQLITE_UTF8 ){",
          "1103:     rc = sqlite3VdbeMemSetStr(pOut, pOp->p4.z, -1, SQLITE_UTF8, SQLITE_STATIC);",
          "1104:     assert( rc==SQLITE_OK || rc==SQLITE_TOOBIG );",
          "1105:     if( SQLITE_OK!=sqlite3VdbeChangeEncoding(pOut, encoding) ) goto no_mem;",
          "1106:     assert( pOut->szMalloc>0 && pOut->zMalloc==pOut->z );",
          "1107:     assert( VdbeMemDynamic(pOut)==0 );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1105:     if( rc ) goto too_big;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1114:     pOp->p4.z = pOut->z;",
          "1115:     pOp->p1 = pOut->n;",
          "1116:   }",
          "1118: #endif",
          "1119:   if( pOp->p1>db->aLimit[SQLITE_LIMIT_LENGTH] ){",
          "1120:     goto too_big;",
          "",
          "[Removed Lines]",
          "1117:   testcase( rc==SQLITE_TOOBIG );",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}