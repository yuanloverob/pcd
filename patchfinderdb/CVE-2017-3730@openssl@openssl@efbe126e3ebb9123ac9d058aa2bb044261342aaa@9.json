{
  "cve_id": "CVE-2017-3730",
  "cve_desc": "In OpenSSL 1.1.0 before 1.1.0d, if a malicious server supplies bad parameters for a DHE or ECDHE key exchange then this can result in the client attempting to dereference a NULL pointer leading to a client crash. This could be exploited in a Denial of Service attack.",
  "repo": "openssl/openssl",
  "patch_hash": "efbe126e3ebb9123ac9d058aa2bb044261342aaa",
  "patch_info": {
    "commit_hash": "efbe126e3ebb9123ac9d058aa2bb044261342aaa",
    "repo": "openssl/openssl",
    "commit_url": "https://github.com/openssl/openssl/commit/efbe126e3ebb9123ac9d058aa2bb044261342aaa",
    "files": [
      "ssl/statem/statem_clnt.c"
    ],
    "message": "Fix missing NULL checks in CKE processing\n\nReviewed-by: Rich Salz <rsalz@openssl.org>",
    "before_after_code_files": [
      "ssl/statem/statem_clnt.c||ssl/statem/statem_clnt.c"
    ]
  },
  "patch_diff": {
    "ssl/statem/statem_clnt.c||ssl/statem/statem_clnt.c": [
      "File: ssl/statem/statem_clnt.c -> ssl/statem/statem_clnt.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2258:         return 0;",
      "2259:     }",
      "2260:     ckey = ssl_generate_pkey(skey);",
      "2261:     dh_clnt = EVP_PKEY_get0_DH(ckey);",
      "2263:     if (dh_clnt == NULL || ssl_derive(s, ckey, skey) == 0) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2261:     if (ckey == NULL) {",
      "2262:         SSLerr(SSL_F_TLS_CONSTRUCT_CKE_DHE, ERR_R_INTERNAL_ERROR);",
      "2263:         return 0;",
      "2264:     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "2296:     }",
      "2298:     ckey = ssl_generate_pkey(skey);",
      "2300:     if (ssl_derive(s, ckey, skey) == 0) {",
      "2301:         SSLerr(SSL_F_TLS_CONSTRUCT_CKE_ECDHE, ERR_R_EVP_LIB);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2304:     if (ckey == NULL) {",
      "2305:         SSLerr(SSL_F_TLS_CONSTRUCT_CKE_ECDHE, ERR_R_INTERNAL_ERROR);",
      "2306:         goto err;",
      "2307:     }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "34b3563243d49ba6f551adb39038695b9fb66b49",
      "candidate_info": {
        "commit_hash": "34b3563243d49ba6f551adb39038695b9fb66b49",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/34b3563243d49ba6f551adb39038695b9fb66b49",
        "files": [
          "apps/s_client.c",
          "apps/s_server.c",
          "apps/vms_term_sock.c",
          "apps/vms_term_sock.h"
        ],
        "message": "Reformat to fit OpenSSL source code standards\n\nReviewed-by: Andy Polyakov <appro@openssl.org>\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(cherry picked from commit c7bdb6a31ff0fcae66b451d3f80a684ad77f4966)",
        "before_after_code_files": [
          "apps/s_client.c||apps/s_client.c",
          "apps/s_server.c||apps/s_server.c",
          "apps/vms_term_sock.c||apps/vms_term_sock.c",
          "apps/vms_term_sock.h||apps/vms_term_sock.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "apps/s_client.c||apps/s_client.c": [
          "File: apps/s_client.c -> apps/s_client.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "861:     int c_nbio = 0, c_msg = 0, c_ign_eof = 0, c_brief = 0;",
          "862:     int c_tlsextdebug = 0, c_status_req = 0;",
          "863:     BIO *bio_c_msg = NULL;",
          "865:     int stdin_sock;",
          "866:     TerminalSocket(TERM_SOCK_CREATE, &stdin_sock);",
          "869:     FD_ZERO(&readfds);",
          "870:     FD_ZERO(&writefds);",
          "",
          "[Removed Lines]",
          "864: #if defined(OPENSSL_SYS_VMS)",
          "867: #endif",
          "",
          "[Added Lines]",
          "864: #if defined(OPENSSL_SYS_VMS)",
          "867: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1828:     SSL_set_connect_state(con);",
          "1832:     if (stdin_sock > SSL_get_fd(con))",
          "1833:         width = stdin_sock + 1;",
          "1834:     else",
          "1835:         width = SSL_get_fd(con) + 1;",
          "1837:     width = SSL_get_fd(con) + 1;",
          "1838: #endif",
          "1839:     read_tty = 1;",
          "",
          "[Removed Lines]",
          "1831: #if defined(OPENSSL_SYS_VMS)",
          "1836: #else",
          "",
          "[Added Lines]",
          "1831: #if defined(OPENSSL_SYS_VMS)",
          "1836: #else",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2296:                 goto shut;",
          "2297:             }",
          "2298:         }",
          "2301:         else if (!ssl_pending && write_tty)",
          "2302: #else",
          "",
          "[Removed Lines]",
          "2299: #if defined(OPENSSL_SYS_WINDOWS) || defined(OPENSSL_SYS_MSDOS) || defined(OPENSSL_SYS_VMS)",
          "",
          "[Added Lines]",
          "2299: #if defined(OPENSSL_SYS_WINDOWS) || defined(OPENSSL_SYS_MSDOS) || defined(OPENSSL_SYS_VMS)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2389: #if defined(OPENSSL_SYS_MSDOS)",
          "2390:         else if (has_stdin_waiting())",
          "2391: #else",
          "2399: #endif",
          "2400:         {",
          "2401:             if (crlf) {",
          "2402:                 int j, lf_num;",
          "2404:                 i = raw_read_stdin(cbuf, BUFSIZZ / 2);",
          "2411:                 lf_num = 0;",
          "",
          "[Removed Lines]",
          "2393: #if defined(OPENSSL_SYS_VMS)",
          "2394:     else if (FD_ISSET(stdin_sock,&readfds))",
          "2395: #else",
          "2396:      else if (FD_ISSET(fileno(stdin),&readfds))",
          "2397: #endif",
          "2405:   #if defined(OPENSSL_SYS_VMS)",
          "2406:                     i = recv(stdin_sock, cbuf, BUFSIZZ/2, 0);",
          "2407:                 #else",
          "2408:                     i = raw_read_stdin(cbuf, BUFSIZZ/2);",
          "2409:                 #endif",
          "",
          "[Added Lines]",
          "2391: #elif defined(OPENSSL_SYS_VMS)",
          "2392:         else if (FD_ISSET(stdin_sock, &readfds))",
          "2394:         else if (FD_ISSET(fileno(stdin), &readfds))",
          "2400: #if defined(OPENSSL_SYS_VMS)",
          "2401:                 i = recv(stdin_sock, cbuf, BUFSIZZ / 2, 0);",
          "2402: #else",
          "2404: #endif",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2422:                     }",
          "2423:                 }",
          "2424:                 assert(lf_num == 0);",
          "2433: #if !defined(OPENSSL_SYS_WINDOWS) && !defined(OPENSSL_SYS_MSDOS)",
          "2434:             if (i == 0)",
          "2435:                 at_eof = 1;",
          "",
          "[Removed Lines]",
          "2425:             } else",
          "2426:   {",
          "2427:    #if defined(OPENSSL_SYS_VMS)",
          "2428:                  i = recv(stdin_sock, cbuf, BUFSIZZ, 0);",
          "2429:    #else",
          "2430:                  i = raw_read_stdin(cbuf, BUFSIZZ);",
          "2431:    #endif",
          "2432:   }",
          "",
          "[Added Lines]",
          "2420:             } else {",
          "2421: #if defined(OPENSSL_SYS_VMS)",
          "2422:                 i = recv(stdin_sock, cbuf, BUFSIZZ, 0);",
          "2423: #else",
          "2424:                 i = raw_read_stdin(cbuf, BUFSIZZ);",
          "2425: #endif",
          "2426:             }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2514:     bio_c_out = NULL;",
          "2515:     BIO_free(bio_c_msg);",
          "2516:     bio_c_msg = NULL;",
          "2518:     TerminalSocket(TERM_SOCK_DELETE, &stdin_sock);",
          "2519: #endif",
          "2520:     return (ret);",
          "",
          "[Removed Lines]",
          "2517: #if defined(OPENSSL_SYS_VMS)",
          "",
          "[Added Lines]",
          "2511: #if defined(OPENSSL_SYS_VMS)",
          "",
          "---------------"
        ],
        "apps/s_server.c||apps/s_server.c": [
          "File: apps/s_server.c -> apps/s_server.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2012: #else",
          "2013:     struct timeval *timeoutp;",
          "2014: #endif",
          "2018: #endif",
          "2020:     buf = app_malloc(bufsize, \"server buffer\");",
          "",
          "[Removed Lines]",
          "2015: #if defined(OPENSSL_SYS_VMS)",
          "2016:         int stdin_sock;",
          "2017:         TerminalSocket (TERM_SOCK_CREATE, &stdin_sock);",
          "",
          "[Added Lines]",
          "2015: #if defined(OPENSSL_SYS_VMS)",
          "2016:     int stdin_sock;",
          "2017:     TerminalSocket (TERM_SOCK_CREATE, &stdin_sock);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2117:     }",
          "2127: #endif",
          "2128:     for (;;) {",
          "2129:         int read_from_terminal;",
          "",
          "[Removed Lines]",
          "2120: #if defined(OPENSSL_SYS_VMS)",
          "2121:         if (stdin_sock > s)",
          "2122:             width = stdin_sock + 1;",
          "2123:     else",
          "2124:         width=s+1;",
          "2125: #else",
          "2126:     width=s+1;",
          "",
          "[Added Lines]",
          "2120: #if defined(OPENSSL_SYS_VMS)",
          "2121:     if (stdin_sock > s)",
          "2122:         width = stdin_sock + 1;",
          "2123:     else",
          "2124:         width = s + 1;",
          "2125: #else",
          "2126:     width = s + 1;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2136:         if (!read_from_sslcon) {",
          "2137:             FD_ZERO(&readfds);",
          "2138: #if !defined(OPENSSL_SYS_WINDOWS) && !defined(OPENSSL_SYS_MSDOS)",
          "2144: #endif",
          "2145:             openssl_fdset(s, &readfds);",
          "",
          "[Removed Lines]",
          "2139:     #  if defined(OPENSSL_SYS_VMS)",
          "2140:                         openssl_fdset(stdin_sock,&readfds);",
          "2141:     #  else",
          "2142:                         openssl_fdset(stdin),&readfds);",
          "2143:     #endif",
          "",
          "[Added Lines]",
          "2139: # if defined(OPENSSL_SYS_VMS)",
          "2140:             openssl_fdset(stdin_sock, &readfds);",
          "2141: # else",
          "2142:             openssl_fdset(fileno(stdin), &readfds);",
          "2143: # endif",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2181:             if (i <= 0)",
          "2182:                 continue;",
          "2188:                 read_from_terminal = 1;",
          "2189: #endif",
          "2190:             if (FD_ISSET(s, &readfds))",
          "",
          "[Removed Lines]",
          "2183: #if defined(OPENSSL_SYS_VMS)",
          "2184:                         if (FD_ISSET(stdin_sock,&readfds))",
          "2185: #else",
          "2186:    if (FD_ISSET(fileno(stdin),&readfds))",
          "2187: #endif",
          "",
          "[Added Lines]",
          "2183: # if defined(OPENSSL_SYS_VMS)",
          "2184:             if (FD_ISSET(stdin_sock, &readfds))",
          "2185: # else",
          "2186:             if (FD_ISSET(fileno(stdin), &readfds))",
          "2187: # endif",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2194:             if (s_crlf) {",
          "2195:                 int j, lf_num;",
          "2204:                 for (j = 0; j < i; j++)",
          "2205:                     if (buf[j] == '\\n')",
          "",
          "[Removed Lines]",
          "2197:      #if defined(OPENSSL_SYS_VMS)",
          "2198:                 i=recv(stdin_sock, buf, bufsize/2, 0);",
          "2199:  #else",
          "2200:   i = raw_read_stdin(buf, bufsize / 2)",
          "2201:  #endif",
          "2202:                lf_num = 0;",
          "",
          "[Added Lines]",
          "2197: #if defined(OPENSSL_SYS_VMS)",
          "2198:                 i=recv(stdin_sock, buf, bufsize / 2, 0);",
          "2199: #else",
          "2200:                 i = raw_read_stdin(buf, bufsize / 2);",
          "2201: #endif",
          "2202:                 lf_num = 0;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2213:                     }",
          "2214:                 }",
          "2215:                 assert(lf_num == 0);",
          "2219: #else",
          "2222:             if (!s_quiet && !s_brief) {",
          "2223:                 if ((i <= 0) || (buf[0] == 'Q')) {",
          "2224:                     BIO_printf(bio_s_out, \"DONE\\n\");",
          "",
          "[Removed Lines]",
          "2216:             } else",
          "2217: #if defined(OPENSSL_SYS_VMS)",
          "2218:                                 i=recv(stdin_sock,buf,bufsize, 0);",
          "2220:     i = raw_read_stdin(buf, bufsize);",
          "2221: #endif",
          "",
          "[Added Lines]",
          "2216:             } else {",
          "2217: #if defined(OPENSSL_SYS_VMS)",
          "2218:                 i = recv(stdin_sock, buf, bufsize, 0);",
          "2220:                 i = raw_read_stdin(buf, bufsize);",
          "2221: #endif",
          "2222:             }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2299:                     srp_callback_parm.user =",
          "2300:                         SRP_VBASE_get1_by_user(srp_callback_parm.vb,",
          "2301:                                                srp_callback_parm.login);",
          "2303:                         BIO_printf(bio_s_out, \"LOOKUP done %s\\n\",",
          "2304:                                    srp_callback_parm.user->info);",
          "2305:                     else",
          "",
          "[Removed Lines]",
          "2302:                      if (srp_callback_parm.user)",
          "",
          "[Added Lines]",
          "2303:                     if (srp_callback_parm.user)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2432:     OPENSSL_clear_free(buf, bufsize);",
          "2433:     if (ret >= 0)",
          "2434:         BIO_printf(bio_s_out, \"ACCEPT\\n\");",
          "2437: #endif",
          "2438:     (void)BIO_flush(bio_s_out);",
          "2439:     return (ret);",
          "",
          "[Removed Lines]",
          "2435: #if defined(OPENSSL_SYS_VMS)",
          "2436:         TerminalSocket (TERM_SOCK_DELETE, &stdin_sock);",
          "",
          "[Added Lines]",
          "2436: #if defined(OPENSSL_SYS_VMS)",
          "2437:     TerminalSocket (TERM_SOCK_DELETE, &stdin_sock);",
          "",
          "---------------"
        ],
        "apps/vms_term_sock.c||apps/vms_term_sock.c": [
          "File: apps/vms_term_sock.c -> apps/vms_term_sock.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "43:     __union  {",
          "44:         __struct  {",
          "",
          "[Removed Lines]",
          "10: #ifdef __VMS",
          "11: #define OPENSSL_SYS_VMS",
          "12: #pragma message disable DOLLARID",
          "15: #include <openssl/OPENSSLCONF.H>",
          "17: #if !defined(_POSIX_C_SOURCE) && defined(OPENSSL_SYS_VMS)",
          "22: # define _POSIX_C_SOURCE 2",
          "23: #endif",
          "25: #include <stdio.h>",
          "27: #undef _POSIX_C_SOURCE",
          "29: #include <sys/types.h>",
          "30: #include <sys/socket.h>",
          "31: #include <netinet/in.h>",
          "32: #include <inet.h>",
          "33: #include <unistd.h>",
          "34: #include <string.h>",
          "35: #include <errno.h>",
          "36: #include <starlet.h>",
          "37: #include <iodef.h>",
          "38: #ifdef __alpha",
          "39: #include <iosbdef.h>",
          "40: #else",
          "42: #pragma __nomember_alignment",
          "",
          "[Added Lines]",
          "10: #ifdef __VMS",
          "11: # define OPENSSL_SYS_VMS",
          "12: # pragma message disable DOLLARID",
          "15: # include <openssl/opensslconf.h>",
          "17: # if !defined(_POSIX_C_SOURCE) && defined(OPENSSL_SYS_VMS)",
          "22: #  define _POSIX_C_SOURCE 2",
          "23: # endif",
          "25: # include <stdio.h>",
          "27: # undef _POSIX_C_SOURCE",
          "29: # include <sys/types.h>",
          "30: # include <sys/socket.h>",
          "31: # include <netinet/in.h>",
          "32: # include <inet.h>",
          "33: # include <unistd.h>",
          "34: # include <string.h>",
          "35: # include <errno.h>",
          "36: # include <starlet.h>",
          "37: # include <iodef.h>",
          "38: # ifdef __alpha",
          "39: #  include <iosbdef.h>",
          "40: # else",
          "42: #  pragma __nomember_alignment",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "49:                     __union  {",
          "60:         __struct  {",
          "61:             __union  {",
          "94: static struct _iosb TerminalDeviceIosb;",
          "96: IOSB TerminalDeviceIosb;",
          "99: static char TerminalDeviceBuff[255 + 2];",
          "100: static int TerminalSocketPair[2] = {0, 0};",
          "",
          "[Removed Lines]",
          "52:                         } iosb$r_l;",
          "53:                     } iosb$r_bcnt_16;",
          "57:                     } iosb$r_bcnt_32;",
          "58:                 } iosb$r_devdepend;",
          "59:             } iosb$r_io_64;",
          "64:                 } iosb$r_l_status;",
          "66:             } iosb$r_get_64;",
          "67:         } iosb$r_io_get;",
          "68:     } IOSB;",
          "70: #if !defined(__VAXC)",
          "71: #define iosb$w_status iosb$r_io_get.iosb$r_io_64.iosb$w_status",
          "72: #define iosb$w_bcnt iosb$r_io_get.iosb$r_io_64.iosb$r_devdepend.iosb$r_bcnt_16.iosb$w_bcnt",
          "73: #define iosb$r_l        iosb$r_io_get.iosb$r_io_64.iosb$r_devdepend.iosb$r_bcnt_16.iosb$r_l",
          "74: #define iosb$l_dev_depend iosb$r_l.iosb$l_dev_depend",
          "75: #define iosb$l_pid iosb$r_l.iosb$l_pid",
          "76: #define iosb$l_bcnt iosb$r_io_get.iosb$r_io_64.iosb$r_devdepend.iosb$r_bcnt_32.iosb$l_bcnt",
          "77: #define iosb$w_dev_depend_high iosb$r_io_get.iosb$r_io_64.iosb$r_devdepend.iosb$r_bcnt_32.iosb$w_dev_depend_high",
          "78: #define iosb$l_getxxi_status iosb$r_io_get.iosb$r_get_64.iosb$r_l_status.iosb$l_getxxi_status",
          "79: #define iosb$l_reg_status iosb$r_io_get.iosb$r_get_64.iosb$r_l_status.iosb$l_reg_status",
          "84: #include <efndef.h>",
          "85: #include <stdlib.h>",
          "86: #include <ssdef.h>",
          "87: #include <time.h>",
          "88: #include <stdarg.h>",
          "89: #include <descrip.h>",
          "91: #include \"vms_term_sock.h\"",
          "93: #ifdef __alpha",
          "95: #else",
          "97: #endif",
          "",
          "[Added Lines]",
          "52:                     } iosb$r_l;",
          "53:                 } iosb$r_bcnt_16;",
          "57:                 } iosb$r_bcnt_32;",
          "58:             } iosb$r_devdepend;",
          "59:         } iosb$r_io_64;",
          "64:             } iosb$r_l_status;",
          "66:         } iosb$r_get_64;",
          "67:     } iosb$r_io_get;",
          "68: } IOSB;",
          "70: #  if !defined(__VAXC)",
          "71: #   define iosb$w_status iosb$r_io_get.iosb$r_io_64.iosb$w_status",
          "72: #   define iosb$w_bcnt iosb$r_io_get.iosb$r_io_64.iosb$r_devdepend.iosb$r_bcnt_16.iosb$w_bcnt",
          "73: #   define iosb$r_l        iosb$r_io_get.iosb$r_io_64.iosb$r_devdepend.iosb$r_bcnt_16.iosb$r_l",
          "74: #   define iosb$l_dev_depend iosb$r_l.iosb$l_dev_depend",
          "75: #   define iosb$l_pid iosb$r_l.iosb$l_pid",
          "76: #   define iosb$l_bcnt iosb$r_io_get.iosb$r_io_64.iosb$r_devdepend.iosb$r_bcnt_32.iosb$l_bcnt",
          "77: #   define iosb$w_dev_depend_high iosb$r_io_get.iosb$r_io_64.iosb$r_devdepend.iosb$r_bcnt_32.iosb$w_dev_depend_high",
          "78: #   define iosb$l_getxxi_status iosb$r_io_get.iosb$r_get_64.iosb$r_l_status.iosb$l_getxxi_status",
          "79: #   define iosb$l_reg_status iosb$r_io_get.iosb$r_get_64.iosb$r_l_status.iosb$l_reg_status",
          "84: # include <efndef.h>",
          "85: # include <stdlib.h>",
          "86: # include <ssdef.h>",
          "87: # include <time.h>",
          "88: # include <stdarg.h>",
          "89: # include <descrip.h>",
          "91: # include \"vms_term_sock.h\"",
          "93: # ifdef __alpha",
          "95: # else",
          "97: # endif",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "111: #define SOCKET_PAIR_TIMEOUT_VALUE 20",
          "",
          "[Added Lines]",
          "111: # define SOCKET_PAIR_TIMEOUT_VALUE 20",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "116: typedef struct _SocketPairTimeoutBlock {",
          "117:     unsigned short SockChan1;",
          "118:     unsigned short SockChan2;",
          "127: int main (int argc, char *argv[], char *envp[])",
          "157:  exit (1);",
          "158:     }",
          "160: return 1;",
          "163: #endif",
          "171: int status;",
          "172: $DESCRIPTOR (TerminalDeviceDesc, \"SYS$COMMAND\");",
          "262:  close (TerminalSocketPair[0]);",
          "263:  close (TerminalSocketPair[1]);",
          "269:  break;",
          "271:     default:",
          "277:  break;",
          "278:     }",
          "283: return (TERM_SOCK_SUCCESS);",
          "285: }",
          "293:     int  SocketType,",
          "310: #else",
          "324:     {",
          "325:     LogMessage (\"CreateSocketPair: socket () - %d\", errno);",
          "326:     return (-1);",
          "327:     }",
          "334: sin.sin_family = SocketFamily;",
          "335: sin.sin_addr.s_addr = inet_addr (LocalHostAddr);",
          "336: sin.sin_port = 0;",
          "344:     LogMessage (\"CreateSocketPair: bind () - %d\", errno);",
          "345:     close (SockDesc1);",
          "346:     return (-1);",
          "347:     }",
          "358:     }",
          "359: else",
          "360:     LocalHostPort = sin.sin_port;",
          "365: listen (SockDesc1, 5);",
          "376:     LogMessage (\"CreateSocketPair: SYS$BINTIM () - %08X\", status);",
          "377:     close (SockDesc1);",
          "378:     return (-1);",
          "379:     }",
          "388:     LogMessage (\"CreateSocketPair: SYS$ASSIGN () - %08X\", status);",
          "389:     close (SockDesc1);",
          "390:     return (-1);",
          "391:     }",
          "396: TcpAcceptChan = decc$get_sdc (SockDesc1);",
          "411:     close (SockDesc1);",
          "412:     sys$dassgn (TcpDeviceChan);",
          "413:     return (-1);",
          "414:     }",
          "425:     sys$dassgn (TcpDeviceChan);",
          "426:     return (-1) ;",
          "427:     }",
          "432: sptb.SockChan1 = TcpAcceptChan;",
          "433: sptb.SockChan2 = decc$get_sdc (SockDesc2);",
          "449:     close (SockDesc2);",
          "450:     sys$dassgn (TcpDeviceChan);",
          "451:     return (-1);",
          "452:     }",
          "469:     close (SockDesc2);",
          "470:     sys$dassgn (TcpDeviceChan);",
          "471:     return (-1);",
          "472:     }",
          "485:  {",
          "490:     close (SockDesc2);",
          "491:     sys$dassgn (TcpDeviceChan);",
          "492:     return (-1);",
          "493:     }",
          "502: close (SockDesc1) ;",
          "504: SocketPair[1] = socket_fd (TcpDeviceChan);",
          "506: return (0) ;",
          "508: }",
          "",
          "[Removed Lines]",
          "119:     } SPTB;",
          "121: #ifdef TERM_SOCK_TEST",
          "128: {",
          "129: char TermBuff[80];",
          "130: int TermSock,",
          "131:     status,",
          "132:     len;",
          "134: LogMessage (\"Enter 'q' or 'Q' to quit ...\");",
          "135: while (strcasecmp (TermBuff, \"Q\"))",
          "136:     {",
          "140:     status = TerminalSocket (TERM_SOCK_CREATE, &TermSock);",
          "141:     if (status != TERM_SOCK_SUCCESS)",
          "142:  exit (1);",
          "147:     LogMessage (\"Waiting on terminal I/O ...\\n\");",
          "148:     len = recv (TermSock, TermBuff, sizeof (TermBuff), 0) ;",
          "149:     TermBuff[len] = '\\0';",
          "150:     LogMessage (\"Received terminal I/O [%s]\", TermBuff);",
          "155:     status = TerminalSocket (TERM_SOCK_DELETE, &TermSock);",
          "156:     if (status != TERM_SOCK_SUCCESS)",
          "162: }",
          "169: int TerminalSocket (int FunctionCode, int *ReturnSocket)",
          "170: {",
          "177: switch (FunctionCode)",
          "178:    {",
          "179:    case TERM_SOCK_CREATE:",
          "183:  status = CreateSocketPair (AF_INET, SOCK_STREAM, 0, TerminalSocketPair);",
          "184:  if (status == -1)",
          "185:      {",
          "186:      LogMessage (\"TerminalSocket: CreateSocketPair () - %08X\", status);",
          "187:      if (TerminalSocketPair[0])",
          "188:   close (TerminalSocketPair[0]);",
          "189:      if (TerminalSocketPair[1])",
          "190:   close (TerminalSocketPair[1]);",
          "191:      return (TERM_SOCK_FAILURE);",
          "192:      }",
          "197:  status = sys$assign (&TerminalDeviceDesc,",
          "198:         &TerminalDeviceChan,",
          "199:         0, 0, 0);",
          "200:  if (! (status & 1))",
          "201:      {",
          "202:      LogMessage (\"TerminalSocket: SYS$ASSIGN () - %08X\", status);",
          "203:      close (TerminalSocketPair[0]);",
          "204:      close (TerminalSocketPair[1]);",
          "205:      return (TERM_SOCK_FAILURE);",
          "206:      }",
          "211:  status = sys$qio (EFN$C_ENF,",
          "212:      TerminalDeviceChan,",
          "213:                    IO$_READVBLK,",
          "214:                    &TerminalDeviceIosb,",
          "215:      TerminalDeviceAst,",
          "216:      0,",
          "217:                    TerminalDeviceBuff,",
          "218:                    sizeof (TerminalDeviceBuff) - 2,",
          "219:                    0, 0, 0, 0);",
          "220:  if (! (status & 1))",
          "221:      {",
          "222:      LogMessage (\"TerminalSocket: SYS$QIO () - %08X\", status);",
          "223:      close (TerminalSocketPair[0]);",
          "224:      close (TerminalSocketPair[1]);",
          "225:      return (TERM_SOCK_FAILURE);",
          "226:      }",
          "232:         break;",
          "234:    case TERM_SOCK_DELETE:",
          "238:  status = sys$cancel (TerminalDeviceChan);",
          "239:  if (! (status & 1))",
          "240:      {",
          "241:      LogMessage (\"TerminalSocket: SYS$CANCEL () - %08X\", status);",
          "242:      close (TerminalSocketPair[0]);",
          "243:      close (TerminalSocketPair[1]);",
          "244:      return (TERM_SOCK_FAILURE);",
          "245:      }",
          "250:  status = sys$dassgn (TerminalDeviceChan);",
          "251:  if (! (status & 1))",
          "252:      {",
          "253:      LogMessage (\"TerminalSocket: SYS$DASSGN () - %08X\", status);",
          "254:      close (TerminalSocketPair[0]);",
          "255:      close (TerminalSocketPair[1]);",
          "256:      return (TERM_SOCK_FAILURE);",
          "257:      }",
          "275:  LogMessage (\"TerminalSocket: Invalid Function Code - %d\", FunctionCode);",
          "276:  return (TERM_SOCK_FAILURE);",
          "291: static int CreateSocketPair (",
          "292:     int  SocketFamily,",
          "294:     int  SocketProtocol,",
          "295:     int  *SocketPair)",
          "296: {",
          "297: struct dsc$descriptor AscTimeDesc = {0, DSC$K_DTYPE_T, DSC$K_CLASS_S, NULL};",
          "298: static const char* LocalHostAddr = {\"127.0.0.1\"};",
          "299: unsigned short TcpAcceptChan = 0,",
          "300:         TcpDeviceChan = 0;",
          "301: unsigned long BinTimeBuff[2];",
          "302: struct sockaddr_in sin;",
          "303: char AscTimeBuff[32];",
          "304: short LocalHostPort;",
          "305: int status;",
          "306: unsigned int slen;",
          "308: #ifdef __alpha",
          "309: struct _iosb iosb;",
          "311: IOSB iosb;",
          "312: #endif",
          "314: int SockDesc1 = 0,",
          "315:     SockDesc2 = 0;",
          "316: SPTB sptb;",
          "317: $DESCRIPTOR (TcpDeviceDesc, \"TCPIP$DEVICE\");",
          "322: SockDesc1 = socket (SocketFamily, SocketType, 0);",
          "323: if (SockDesc1 < 0)",
          "332: slen = sizeof (sin);",
          "333: memset ((char *) &sin, 0, slen);",
          "341: status = bind (SockDesc1, (struct sockaddr *) &sin, slen);",
          "342: if (status < 0)",
          "343:     {",
          "352: status = getsockname (SockDesc1, (struct sockaddr *) &sin, &slen);",
          "353: if (status < 0)",
          "354:     {",
          "355:     LogMessage (\"CreateSocketPair: getsockname () - %d\", errno);",
          "356:     close (SockDesc1);",
          "357:     return (-1);",
          "370: sprintf (AscTimeBuff, \"0 0:0:%02d.00\", SOCKET_PAIR_TIMEOUT_VALUE);",
          "371: AscTimeDesc.dsc$w_length = strlen (AscTimeBuff);",
          "372: AscTimeDesc.dsc$a_pointer = AscTimeBuff;",
          "373: status = sys$bintim (&AscTimeDesc, BinTimeBuff);",
          "374: if (! (status & 1))",
          "375:     {",
          "385: status = sys$assign (&TcpDeviceDesc, &TcpDeviceChan, 0, 0, 0);",
          "386: if (! (status & 1))",
          "387:     {",
          "401: status = sys$qio (EFN$C_ENF,",
          "402:     TcpAcceptChan,",
          "403:                   IO$_ACCESS | IO$M_ACCEPT,",
          "404:                   &iosb,",
          "405:     0, 0, 0, 0, 0,",
          "406:                   &TcpDeviceChan,",
          "407:                   0, 0);",
          "408: if (! (status & 1))",
          "409:     {",
          "410:     LogMessage (\"CreateSocketPair: SYS$QIO () - %08X\", status);",
          "419: SockDesc2 = socket (SocketFamily, SocketType, 0);",
          "420: if (SockDesc2 < 0)",
          "421:     {",
          "422:     LogMessage (\"CreateSocketPair: socket () - %d\", errno);",
          "423:     sys$cancel (TcpAcceptChan);",
          "424:     close (SockDesc1);",
          "439: status = sys$setimr (EFN$C_ENF,",
          "440:        BinTimeBuff,",
          "441:        SocketPairTimeoutAst,",
          "442:        &sptb,",
          "443:        0);",
          "444: if (! (status & 1))",
          "445:     {",
          "446:     LogMessage (\"CreateSocketPair: SYS$SETIMR () - %08X\", status);",
          "447:     sys$cancel (TcpAcceptChan);",
          "448:     close (SockDesc1);",
          "457: memset ((char *) &sin, 0, sizeof (sin)) ;",
          "458: sin.sin_family = SocketFamily;",
          "459: sin.sin_addr.s_addr = inet_addr (LocalHostAddr) ;",
          "460: sin.sin_port = LocalHostPort ;",
          "462: status = connect (SockDesc2, (struct sockaddr *) &sin, sizeof (sin));",
          "463: if (status < 0 )",
          "464:     {",
          "465:     LogMessage (\"CreateSocketPair: connect () - %d\", errno);",
          "466:     sys$cantim (&sptb, 0);",
          "467:     sys$cancel (TcpAcceptChan);",
          "468:     close (SockDesc1);",
          "479: status = sys$synch (EFN$C_ENF, &iosb);",
          "480: if (! (iosb.iosb$w_status & 1))",
          "481:     {",
          "482:     if (iosb.iosb$w_status == SS$_ABORT)",
          "483:  LogMessage (\"CreateSocketPair: SYS$QIO(iosb) timeout\");",
          "484:     else",
          "486:         LogMessage (\"CreateSocketPair: SYS$QIO(iosb) - %d\", iosb.iosb$w_status);",
          "487:         sys$cantim (&sptb, 0);",
          "488:         }",
          "489:     close (SockDesc1);",
          "500: sys$cantim (&sptb, 0);",
          "503: SocketPair[0] = SockDesc2 ;",
          "",
          "[Added Lines]",
          "119: } SPTB;",
          "121: # ifdef TERM_SOCK_TEST",
          "128: {",
          "129:     char TermBuff[80];",
          "130:     int TermSock,",
          "131:         status,",
          "132:         len;",
          "134:     LogMessage (\"Enter 'q' or 'Q' to quit ...\");",
          "135:     while (strcasecmp (TermBuff, \"Q\")) {",
          "139:         status = TerminalSocket (TERM_SOCK_CREATE, &TermSock);",
          "140:         if (status != TERM_SOCK_SUCCESS)",
          "141:             exit (1);",
          "146:         LogMessage (\"Waiting on terminal I/O ...\\n\");",
          "147:         len = recv (TermSock, TermBuff, sizeof (TermBuff), 0) ;",
          "148:         TermBuff[len] = '\\0';",
          "149:         LogMessage (\"Received terminal I/O [%s]\", TermBuff);",
          "154:         status = TerminalSocket (TERM_SOCK_DELETE, &TermSock);",
          "155:         if (status != TERM_SOCK_SUCCESS)",
          "161: }",
          "168: int TerminalSocket (int FunctionCode, int *ReturnSocket)",
          "169: {",
          "176:     switch (FunctionCode) {",
          "177:     case TERM_SOCK_CREATE:",
          "181:         status = CreateSocketPair (AF_INET, SOCK_STREAM, 0, TerminalSocketPair);",
          "182:         if (status == -1) {",
          "183:             LogMessage (\"TerminalSocket: CreateSocketPair () - %08X\", status);",
          "184:             if (TerminalSocketPair[0])",
          "185:                 close (TerminalSocketPair[0]);",
          "186:             if (TerminalSocketPair[1])",
          "187:                 close (TerminalSocketPair[1]);",
          "188:             return (TERM_SOCK_FAILURE);",
          "189:         }",
          "194:         status = sys$assign (&TerminalDeviceDesc,",
          "195:                              &TerminalDeviceChan,",
          "196:                              0, 0, 0);",
          "197:         if (! (status & 1)) {",
          "198:             LogMessage (\"TerminalSocket: SYS$ASSIGN () - %08X\", status);",
          "199:             close (TerminalSocketPair[0]);",
          "200:             close (TerminalSocketPair[1]);",
          "201:             return (TERM_SOCK_FAILURE);",
          "202:         }",
          "207:         status = sys$qio (EFN$C_ENF,",
          "208:                           TerminalDeviceChan,",
          "209:                           IO$_READVBLK,",
          "210:                           &TerminalDeviceIosb,",
          "211:                           TerminalDeviceAst,",
          "212:                           0,",
          "213:                           TerminalDeviceBuff,",
          "214:                           sizeof (TerminalDeviceBuff) - 2,",
          "215:                           0, 0, 0, 0);",
          "216:         if (! (status & 1)) {",
          "217:             LogMessage (\"TerminalSocket: SYS$QIO () - %08X\", status);",
          "218:             close (TerminalSocketPair[0]);",
          "219:             close (TerminalSocketPair[1]);",
          "220:             return (TERM_SOCK_FAILURE);",
          "221:         }",
          "227:         break;",
          "229:     case TERM_SOCK_DELETE:",
          "233:         status = sys$cancel (TerminalDeviceChan);",
          "234:         if (! (status & 1)) {",
          "235:             LogMessage (\"TerminalSocket: SYS$CANCEL () - %08X\", status);",
          "236:             close (TerminalSocketPair[0]);",
          "237:             close (TerminalSocketPair[1]);",
          "238:             return (TERM_SOCK_FAILURE);",
          "239:         }",
          "244:         status = sys$dassgn (TerminalDeviceChan);",
          "245:         if (! (status & 1)) {",
          "246:             LogMessage (\"TerminalSocket: SYS$DASSGN () - %08X\", status);",
          "247:             close (TerminalSocketPair[0]);",
          "248:             close (TerminalSocketPair[1]);",
          "255:         close (TerminalSocketPair[0]);",
          "256:         close (TerminalSocketPair[1]);",
          "268:         LogMessage (\"TerminalSocket: Invalid Function Code - %d\", FunctionCode);",
          "269:         return (TERM_SOCK_FAILURE);",
          "284: static int CreateSocketPair (int SocketFamily,",
          "286:                              int SocketProtocol,",
          "287:                              int *SocketPair)",
          "288: {",
          "289:     struct dsc$descriptor AscTimeDesc = {0, DSC$K_DTYPE_T, DSC$K_CLASS_S, NULL};",
          "290:     static const char* LocalHostAddr = {\"127.0.0.1\"};",
          "291:     unsigned short TcpAcceptChan = 0,",
          "292:         TcpDeviceChan = 0;",
          "293:     unsigned long BinTimeBuff[2];",
          "294:     struct sockaddr_in sin;",
          "295:     char AscTimeBuff[32];",
          "296:     short LocalHostPort;",
          "297:     int status;",
          "298:     unsigned int slen;",
          "300: # ifdef __alpha",
          "301:     struct _iosb iosb;",
          "302: # else",
          "303:     IOSB iosb;",
          "304: # endif",
          "306:     int SockDesc1 = 0,",
          "314:     SockDesc1 = socket (SocketFamily, SocketType, 0);",
          "323:     slen = sizeof (sin);",
          "324:     memset ((char *) &sin, 0, slen);",
          "332:     status = bind (SockDesc1, (struct sockaddr *) &sin, slen);",
          "333:     if (status < 0) {",
          "342:     status = getsockname (SockDesc1, (struct sockaddr *) &sin, &slen);",
          "343:     if (status < 0) {",
          "344:         LogMessage (\"CreateSocketPair: getsockname () - %d\", errno);",
          "345:         close (SockDesc1);",
          "358:     sprintf (AscTimeBuff, \"0 0:0:%02d.00\", SOCKET_PAIR_TIMEOUT_VALUE);",
          "359:     AscTimeDesc.dsc$w_length = strlen (AscTimeBuff);",
          "360:     AscTimeDesc.dsc$a_pointer = AscTimeBuff;",
          "361:     status = sys$bintim (&AscTimeDesc, BinTimeBuff);",
          "362:     if (! (status & 1)) {",
          "372:     status = sys$assign (&TcpDeviceDesc, &TcpDeviceChan, 0, 0, 0);",
          "373:     if (! (status & 1)) {",
          "387:     status = sys$qio (EFN$C_ENF,",
          "388:                       TcpAcceptChan,",
          "389:                       IO$_ACCESS | IO$M_ACCEPT,",
          "390:                       &iosb,",
          "391:                       0, 0, 0, 0, 0,",
          "392:                       &TcpDeviceChan,",
          "393:                       0, 0);",
          "394:     if (! (status & 1)) {",
          "395:         LogMessage (\"CreateSocketPair: SYS$QIO () - %08X\", status);",
          "404:     SockDesc2 = socket (SocketFamily, SocketType, 0);",
          "405:     if (SockDesc2 < 0) {",
          "406:         LogMessage (\"CreateSocketPair: socket () - %d\", errno);",
          "407:         sys$cancel (TcpAcceptChan);",
          "408:         close (SockDesc1);",
          "423:     status = sys$setimr (EFN$C_ENF,",
          "424:                          BinTimeBuff,",
          "425:                          SocketPairTimeoutAst,",
          "426:                          &sptb,",
          "427:                          0);",
          "428:     if (! (status & 1)) {",
          "429:         LogMessage (\"CreateSocketPair: SYS$SETIMR () - %08X\", status);",
          "430:         sys$cancel (TcpAcceptChan);",
          "431:         close (SockDesc1);",
          "440:     memset ((char *) &sin, 0, sizeof (sin)) ;",
          "441:     sin.sin_family = SocketFamily;",
          "442:     sin.sin_addr.s_addr = inet_addr (LocalHostAddr) ;",
          "443:     sin.sin_port = LocalHostPort ;",
          "445:     status = connect (SockDesc2, (struct sockaddr *) &sin, sizeof (sin));",
          "446:     if (status < 0 ) {",
          "447:         LogMessage (\"CreateSocketPair: connect () - %d\", errno);",
          "448:         sys$cantim (&sptb, 0);",
          "449:         sys$cancel (TcpAcceptChan);",
          "450:         close (SockDesc1);",
          "461:     status = sys$synch (EFN$C_ENF, &iosb);",
          "462:     if (! (iosb.iosb$w_status & 1)) {",
          "463:         if (iosb.iosb$w_status == SS$_ABORT)",
          "464:             LogMessage (\"CreateSocketPair: SYS$QIO(iosb) timeout\");",
          "465:         else {",
          "467:                         iosb.iosb$w_status);",
          "468:             sys$cantim (&sptb, 0);",
          "469:         }",
          "470:         close (SockDesc1);",
          "481:     sys$cantim (&sptb, 0);",
          "484:     SocketPair[0] = SockDesc2 ;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "514: static void SocketPairTimeoutAst (int astparm)",
          "515: {",
          "516: SPTB *sptb = (SPTB *) astparm;",
          "521: return;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "523: }",
          "529: static int TerminalDeviceAst (int astparm)",
          "530: {",
          "536: TerminalDeviceBuff[TerminalDeviceIosb.iosb$w_bcnt] = '\\0';",
          "551:      TerminalDeviceAst,",
          "552:      0,",
          "553:             TerminalDeviceBuff,",
          "554:             sizeof (TerminalDeviceBuff) - 1,",
          "",
          "[Removed Lines]",
          "531: int status;",
          "537: strcat (TerminalDeviceBuff, \"\\n\");",
          "542: send (TerminalSocketPair[0], TerminalDeviceBuff, TerminalDeviceIosb.iosb$w_bcnt + 1, 0);",
          "547: status = sys$qio (EFN$C_ENF,",
          "548:             TerminalDeviceChan,",
          "549:             IO$_READVBLK,",
          "550:             &TerminalDeviceIosb,",
          "555:             0, 0, 0, 0);",
          "",
          "[Added Lines]",
          "512:     int status;",
          "518:     strcat (TerminalDeviceBuff, \"\\n\");",
          "524:           TerminalDeviceIosb.iosb$w_bcnt + 1, 0);",
          "529:     status = sys$qio (EFN$C_ENF,",
          "530:                       TerminalDeviceChan,",
          "531:                       IO$_READVBLK,",
          "532:                       &TerminalDeviceIosb,",
          "537:                       0, 0, 0, 0);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "562: }",
          "571:                  \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"};",
          "572: static unsigned int pid = 0;",
          "573: va_list args;",
          "574: time_t CurTime;",
          "593: sprintf (MsgBuff, \"%02d-%s-%04d %02d:%02d:%02d [%08X] %s\\n\",",
          "600: va_start (args, msg);",
          "602: va_end (args);",
          "",
          "[Removed Lines]",
          "568: static void LogMessage (char *msg, ...)",
          "569: {",
          "570: char *Month[] = {\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\",",
          "575: struct tm *LocTime;",
          "576: char MsgBuff[256];",
          "581: if (pid == 0)",
          "582:     pid = getpid ();",
          "587: CurTime = time (NULL);",
          "588: LocTime = localtime (&CurTime);",
          "594:          LocTime->tm_mday, Month[LocTime->tm_mon], (LocTime->tm_year + 1900),",
          "595:          LocTime->tm_hour, LocTime->tm_min, LocTime->tm_sec, pid, msg);",
          "601: vfprintf (stderr, MsgBuff, args);",
          "",
          "[Added Lines]",
          "550: static void LogMessage (char *msg, ...)",
          "551: {",
          "552:     char *Month[] = {\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\",",
          "557:     struct tm *LocTime;",
          "558:     char MsgBuff[256];",
          "563:     if (pid == 0)",
          "564:         pid = getpid ();",
          "569:     CurTime = time (NULL);",
          "570:     LocTime = localtime (&CurTime);",
          "578:              LocTime->tm_sec, pid, msg);",
          "585:     vfprintf (stderr, MsgBuff, args);",
          "",
          "---------------"
        ],
        "apps/vms_term_sock.h||apps/vms_term_sock.h": [
          "File: apps/vms_term_sock.h -> apps/vms_term_sock.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: #ifndef TERM_SOCK_H",
          "",
          "[Removed Lines]",
          "11: #define TERM_SOCK_H",
          "16: #define TERM_SOCK_CREATE 1",
          "17: #define TERM_SOCK_DELETE 2",
          "22: #define TERM_SOCK_FAILURE 0",
          "23: #define TERM_SOCK_SUCCESS 1",
          "",
          "[Added Lines]",
          "11: # define TERM_SOCK_H",
          "16: # define TERM_SOCK_CREATE       1",
          "17: # define TERM_SOCK_DELETE       2",
          "22: # define TERM_SOCK_FAILURE      0",
          "23: # define TERM_SOCK_SUCCESS      1",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5389388a2b327ab5d4353e98b4e258fb683cde15",
      "candidate_info": {
        "commit_hash": "5389388a2b327ab5d4353e98b4e258fb683cde15",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/5389388a2b327ab5d4353e98b4e258fb683cde15",
        "files": [
          "engines/afalg/e_afalg.c"
        ],
        "message": "Engine afalg: properly set operation type also on big endian.\n\nCopy the whole ALG_OP_TYPE to CMSG_DATA.\n\nReviewed-by: Richard Levitte <levitte@openssl.org>\nReviewed-by: Matt Caswell <matt@openssl.org>\n(cherry picked from commit 574cffd5d5b8f57f811c8d36d930205041deedee)",
        "before_after_code_files": [
          "engines/afalg/e_afalg.c||engines/afalg/e_afalg.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "engines/afalg/e_afalg.c||engines/afalg/e_afalg.c": [
          "File: engines/afalg/e_afalg.c -> engines/afalg/e_afalg.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "322: }",
          "324: static ossl_inline void afalg_set_op_sk(struct cmsghdr *cmsg,",
          "326: {",
          "327:     cmsg->cmsg_level = SOL_ALG;",
          "328:     cmsg->cmsg_type = ALG_SET_OP;",
          "329:     cmsg->cmsg_len = CMSG_LEN(ALG_OP_LEN);",
          "331: }",
          "333: static void afalg_set_iv_sk(struct cmsghdr *cmsg, const unsigned char *iv,",
          "",
          "[Removed Lines]",
          "325:                                    const unsigned int op)",
          "",
          "[Added Lines]",
          "325:                                    const ALG_OP_TYPE op)",
          "330:     memcpy(CMSG_DATA(cmsg), &op, ALG_OP_LEN);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "87030f54b23d39d9f4b1122b80adc6b7f8deab53",
      "candidate_info": {
        "commit_hash": "87030f54b23d39d9f4b1122b80adc6b7f8deab53",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/87030f54b23d39d9f4b1122b80adc6b7f8deab53",
        "files": [
          "util/dofile.pl"
        ],
        "message": "util/dofile.pl: report if a template couldn't be loaded\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(cherry picked from commit f6be8315cbdb4173008b5917d2b0fc80bb0bf06b)",
        "before_after_code_files": [
          "util/dofile.pl||util/dofile.pl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "util/dofile.pl||util/dofile.pl": [
          "File: util/dofile.pl -> util/dofile.pl",
          "--- Hunk 1 ---",
          "[Context before]",
          "159: my $prev_linecount = 0;",
          "160: my $text =",
          "161:     @ARGV",
          "163:                      my $linecount = $x =~ tr/\\n//;",
          "164:                      $prev_linecount = ($linecount += $prev_linecount);",
          "165:                      $lines{$linecount} = $_;",
          "",
          "[Removed Lines]",
          "162:     ? join(\"\", map { my $x = \"{- output_reset_on() -}\".Text::Template::_load_text($_);",
          "",
          "[Added Lines]",
          "162:     ? join(\"\", map { my $x = Text::Template::_load_text($_);",
          "163:                      if (!defined($x)) {",
          "164:                          die $Text::Template::ERROR, \"\\n\";",
          "165:                      }",
          "166:                      $x = \"{- output_reset_on() -}\" . $x;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "11f1fd4b0d1b3aef5c79b843d081dbb9bcd0b85f",
      "candidate_info": {
        "commit_hash": "11f1fd4b0d1b3aef5c79b843d081dbb9bcd0b85f",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/11f1fd4b0d1b3aef5c79b843d081dbb9bcd0b85f",
        "files": [
          "doc/ssl/SSL_get_error.pod",
          "doc/ssl/SSL_read.pod",
          "doc/ssl/SSL_write.pod",
          "ssl/record/rec_layer_s3.c",
          "test/asynciotest.c"
        ],
        "message": "Make SSL_read and SSL_write return the old behaviour and document it.\n\nBackport of beacb0f0c1ae7b0542fe053b95307f515b578eb7, revert of\n122580ef71e4e5f355a1a104c9bfb36feee43759\n\nFixes: #1903\n\nReviewed-by: Matt Caswell <matt@openssl.org>\n\nGH: #1966",
        "before_after_code_files": [
          "ssl/record/rec_layer_s3.c||ssl/record/rec_layer_s3.c",
          "test/asynciotest.c||test/asynciotest.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ssl/record/rec_layer_s3.c||ssl/record/rec_layer_s3.c": [
          "File: ssl/record/rec_layer_s3.c -> ssl/record/rec_layer_s3.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "312:             if (s->mode & SSL_MODE_RELEASE_BUFFERS && !SSL_IS_DTLS(s))",
          "313:                 if (len + left == 0)",
          "314:                     ssl3_release_read_buffer(s);",
          "316:         }",
          "317:         left += i;",
          "",
          "[Removed Lines]",
          "315:             return -1;",
          "",
          "[Added Lines]",
          "312:             return i;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "937:                 SSL3_BUFFER_set_left(&wb[currbuf], 0);",
          "938:             }",
          "940:         }",
          "941:         SSL3_BUFFER_add_offset(&wb[currbuf], i);",
          "942:         SSL3_BUFFER_add_left(&wb[currbuf], -i);",
          "",
          "[Removed Lines]",
          "939:             return -1;",
          "",
          "[Added Lines]",
          "933:             return i;",
          "",
          "---------------"
        ],
        "test/asynciotest.c||test/asynciotest.c": [
          "File: test/asynciotest.c -> test/asynciotest.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "299:         for (j = 0; j < 2; j++) {",
          "310:                 goto end;",
          "311:             }",
          "323:             }",
          "325:                     || memcmp(buf, testdata, sizeof(testdata)) != 0) {",
          "326:                 printf(\"Test %d failed: Unexpected app data received\\n\", test);",
          "327:                 goto end;",
          "328:             }",
          "",
          "[Removed Lines]",
          "306:             for (ret = -1, i = 0; ret < 0 && i < 2 * sizeof(testdata); i++)",
          "307:                 ret = SSL_write(clientssl, testdata, sizeof(testdata));",
          "308:             if (ret <= 0) {",
          "309:                 printf(\"Test %d failed: Failed to write app data\\n\", test);",
          "318:             for (ret = -1, i = 0; ret < 0 && i < MAX_ATTEMPTS; i++)",
          "319:                 ret = SSL_read(serverssl, buf, sizeof(buf));",
          "320:             if (ret <= 0) {",
          "321:                 printf(\"Test %d failed: Failed to read app data\\n\", test);",
          "322:                 goto end;",
          "324:             if (ret != sizeof(testdata)",
          "",
          "[Added Lines]",
          "300:             int len;",
          "306:             for (ret = -1, i = 0, len = 0; len != sizeof(testdata) && i < 2;",
          "307:                 i++) {",
          "308:                 ret = SSL_write(clientssl, testdata + len,",
          "309:                     sizeof(testdata) - len);",
          "310:                 if (ret > 0) {",
          "311:                     len += ret;",
          "312:                 } else {",
          "313:                     int ssl_error = SSL_get_error(clientssl, ret);",
          "315:                     if (ssl_error == SSL_ERROR_SYSCALL ||",
          "316:                         ssl_error == SSL_ERROR_SSL) {",
          "317:                         printf(\"Test %d failed: Failed to write app data\\n\", test);",
          "318:                         err = -1;",
          "319:                         goto end;",
          "320:                     }",
          "321:                 }",
          "322:             }",
          "323:             if (len != sizeof(testdata)) {",
          "324:                 err = -1;",
          "325:                 printf(\"Test %d failed: Failed to write all app data\\n\", test);",
          "333:             for (ret = -1, i = 0, len = 0; len != sizeof(testdata) &&",
          "334:                 i < MAX_ATTEMPTS; i++)",
          "335:             {",
          "336:                 ret = SSL_read(serverssl, buf + len, sizeof(buf) - len);",
          "337:                 if (ret > 0) {",
          "338:                     len += ret;",
          "339:                 } else {",
          "340:                     int ssl_error = SSL_get_error(serverssl, ret);",
          "342:                     if (ssl_error == SSL_ERROR_SYSCALL ||",
          "343:                         ssl_error == SSL_ERROR_SSL) {",
          "344:                         printf(\"Test %d failed: Failed to read app data\\n\", test);",
          "345:                         err = -1;",
          "346:                         goto end;",
          "347:                     }",
          "348:                 }",
          "350:             if (len != sizeof(testdata)",
          "352:                 err = -1;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a99be00636e73206f7a40b626595466003fa250e",
      "candidate_info": {
        "commit_hash": "a99be00636e73206f7a40b626595466003fa250e",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/a99be00636e73206f7a40b626595466003fa250e",
        "files": [
          "crypto/ct/ct_err.c",
          "crypto/ct/ct_locl.h",
          "crypto/ct/ct_policy.c",
          "crypto/ct/ct_sct.c",
          "crypto/ct/ct_sct_ctx.c",
          "crypto/ct/ct_vfy.c",
          "include/openssl/ct.h",
          "ssl/ssl_lib.c",
          "test/ct_test.c",
          "util/libcrypto.num"
        ],
        "message": "Check that SCT timestamps are not in the future\n\nReviewed-by: Viktor Dukhovni <viktor@openssl.org>\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/1554)\n(cherry picked from commit 1fa9ffd934429f140edcfbaf76d2f32cc21e449b)",
        "before_after_code_files": [
          "crypto/ct/ct_err.c||crypto/ct/ct_err.c",
          "crypto/ct/ct_locl.h||crypto/ct/ct_locl.h",
          "crypto/ct/ct_policy.c||crypto/ct/ct_policy.c",
          "crypto/ct/ct_sct.c||crypto/ct/ct_sct.c",
          "crypto/ct/ct_sct_ctx.c||crypto/ct/ct_sct_ctx.c",
          "crypto/ct/ct_vfy.c||crypto/ct/ct_vfy.c",
          "include/openssl/ct.h||include/openssl/ct.h",
          "ssl/ssl_lib.c||ssl/ssl_lib.c",
          "test/ct_test.c||test/ct_test.c",
          "util/libcrypto.num||util/libcrypto.num"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/ct/ct_err.c||crypto/ct/ct_err.c": [
          "File: crypto/ct/ct_err.c -> crypto/ct/ct_err.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "36:     {ERR_FUNC(CT_F_O2I_SCT_LIST), \"o2i_SCT_LIST\"},",
          "37:     {ERR_FUNC(CT_F_O2I_SCT_SIGNATURE), \"o2i_SCT_signature\"},",
          "38:     {ERR_FUNC(CT_F_SCT_CTX_NEW), \"SCT_CTX_new\"},",
          "39:     {ERR_FUNC(CT_F_SCT_NEW), \"SCT_new\"},",
          "40:     {ERR_FUNC(CT_F_SCT_NEW_FROM_BASE64), \"SCT_new_from_base64\"},",
          "41:     {ERR_FUNC(CT_F_SCT_SET0_LOG_ID), \"SCT_set0_log_id\"},",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "39:     {ERR_FUNC(CT_F_SCT_CTX_VERIFY), \"SCT_CTX_verify\"},",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "45:     {ERR_FUNC(CT_F_SCT_SET_LOG_ENTRY_TYPE), \"SCT_set_log_entry_type\"},",
          "46:     {ERR_FUNC(CT_F_SCT_SET_SIGNATURE_NID), \"SCT_set_signature_nid\"},",
          "47:     {ERR_FUNC(CT_F_SCT_SET_VERSION), \"SCT_set_version\"},",
          "49:     {0, NULL}",
          "50: };",
          "",
          "[Removed Lines]",
          "48:     {ERR_FUNC(CT_F_SCT_CTX_VERIFY), \"SCT_CTX_verify\"},",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "58:      \"log conf missing description\"},",
          "59:     {ERR_REASON(CT_R_LOG_CONF_MISSING_KEY), \"log conf missing key\"},",
          "60:     {ERR_REASON(CT_R_LOG_KEY_INVALID), \"log key invalid\"},",
          "61:     {ERR_REASON(CT_R_SCT_INVALID), \"sct invalid\"},",
          "62:     {ERR_REASON(CT_R_SCT_INVALID_SIGNATURE), \"sct invalid signature\"},",
          "63:     {ERR_REASON(CT_R_SCT_LIST_INVALID), \"sct list invalid\"},",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "61:     {ERR_REASON(CT_R_SCT_FUTURE_TIMESTAMP), \"sct future timestamp\"},",
          "",
          "---------------"
        ],
        "crypto/ct/ct_locl.h||crypto/ct/ct_locl.h": [
          "File: crypto/ct/ct_locl.h -> crypto/ct/ct_locl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "99:     unsigned char *preder;",
          "100:     size_t prederlen;",
          "101: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "102:     uint64_t epoch_time_in_ms;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "105:     X509 *cert;",
          "106:     X509 *issuer;",
          "107:     CTLOG_STORE *log_store;",
          "108: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "111:     uint64_t epoch_time_in_ms;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "151: __owur int SCT_CTX_set1_pubkey(SCT_CTX *sctx, X509_PUBKEY *pubkey);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "163: void SCT_CTX_set_time(SCT_CTX *sctx, uint64_t time_in_ms);",
          "",
          "---------------"
        ],
        "crypto/ct/ct_policy.c||crypto/ct/ct_policy.c": [
          "File: crypto/ct/ct_policy.c -> crypto/ct/ct_policy.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "59:     ctx->log_store = log_store;",
          "60: }",
          "62: X509* CT_POLICY_EVAL_CTX_get0_cert(const CT_POLICY_EVAL_CTX *ctx)",
          "63: {",
          "64:     return ctx->cert;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "62: void CT_POLICY_EVAL_CTX_set_time(CT_POLICY_EVAL_CTX *ctx, uint64_t time_in_ms)",
          "63: {",
          "64:     ctx->epoch_time_in_ms = time_in_ms;",
          "65: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "74:     return ctx->log_store;",
          "75: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "82: uint64_t CT_POLICY_EVAL_CTX_get_time(const CT_POLICY_EVAL_CTX *ctx)",
          "83: {",
          "84:     return ctx->epoch_time_in_ms;",
          "85: }",
          "",
          "---------------"
        ],
        "crypto/ct/ct_sct.c||crypto/ct/ct_sct.c": [
          "File: crypto/ct/ct_sct.c -> crypto/ct/ct_sct.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "329:             goto err;",
          "330:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "332:     SCT_CTX_set_time(sctx, ctx->epoch_time_in_ms);",
          "",
          "---------------"
        ],
        "crypto/ct/ct_sct_ctx.c||crypto/ct/ct_sct_ctx.c": [
          "File: crypto/ct/ct_sct_ctx.c -> crypto/ct/ct_sct_ctx.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "256:     sctx->pkey = pkey;",
          "257:     return 1;",
          "258: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "260: void SCT_CTX_set_time(SCT_CTX *sctx, uint64_t time_in_ms)",
          "261: {",
          "262:     sctx->epoch_time_in_ms = time_in_ms;",
          "263: }",
          "",
          "---------------"
        ],
        "crypto/ct/ct_vfy.c||crypto/ct/ct_vfy.c": [
          "File: crypto/ct/ct_vfy.c -> crypto/ct/ct_vfy.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "113:         CTerr(CT_F_SCT_CTX_VERIFY, CT_R_SCT_LOG_ID_MISMATCH);",
          "114:         return 0;",
          "115:     }",
          "117:     ctx = EVP_MD_CTX_new();",
          "118:     if (ctx == NULL)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "116:     if (sct->timestamp > sctx->epoch_time_in_ms) {",
          "117:         CTerr(CT_F_SCT_CTX_VERIFY, CT_R_SCT_FUTURE_TIMESTAMP);",
          "118:         return 0;",
          "119:     }",
          "",
          "---------------"
        ],
        "include/openssl/ct.h||include/openssl/ct.h": [
          "File: include/openssl/ct.h -> include/openssl/ct.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "98: void CT_POLICY_EVAL_CTX_set_shared_CTLOG_STORE(CT_POLICY_EVAL_CTX *ctx,",
          "99:                                                CTLOG_STORE *log_store);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "106: uint64_t CT_POLICY_EVAL_CTX_get_time(const CT_POLICY_EVAL_CTX *ctx);",
          "114: void CT_POLICY_EVAL_CTX_set_time(CT_POLICY_EVAL_CTX *ctx, uint64_t time_in_ms);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "482: # define CT_F_O2I_SCT_LIST                                111",
          "483: # define CT_F_O2I_SCT_SIGNATURE                           112",
          "484: # define CT_F_SCT_CTX_NEW                                 126",
          "485: # define CT_F_SCT_NEW                                     100",
          "486: # define CT_F_SCT_NEW_FROM_BASE64                         127",
          "487: # define CT_F_SCT_SET0_LOG_ID                             101",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "500: # define CT_F_SCT_CTX_VERIFY                              128",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "491: # define CT_F_SCT_SET_LOG_ENTRY_TYPE                      102",
          "492: # define CT_F_SCT_SET_SIGNATURE_NID                       103",
          "493: # define CT_F_SCT_SET_VERSION                             104",
          "497: # define CT_R_BASE64_DECODE_ERROR                         108",
          "",
          "[Removed Lines]",
          "494: # define CT_F_SCT_CTX_VERIFY                              128",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "501: # define CT_R_LOG_CONF_MISSING_DESCRIPTION                111",
          "502: # define CT_R_LOG_CONF_MISSING_KEY                        112",
          "503: # define CT_R_LOG_KEY_INVALID                             113",
          "504: # define CT_R_SCT_INVALID                                 104",
          "505: # define CT_R_SCT_INVALID_SIGNATURE                       107",
          "506: # define CT_R_SCT_LIST_INVALID                            105",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "519: # define CT_R_SCT_FUTURE_TIMESTAMP                        116",
          "",
          "---------------"
        ],
        "ssl/ssl_lib.c||ssl/ssl_lib.c": [
          "File: ssl/ssl_lib.c -> ssl/ssl_lib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4175:     CT_POLICY_EVAL_CTX_set1_cert(ctx, cert);",
          "4176:     CT_POLICY_EVAL_CTX_set1_issuer(ctx, issuer);",
          "4177:     CT_POLICY_EVAL_CTX_set_shared_CTLOG_STORE(ctx, s->ctx->ctlog_store);",
          "4179:     scts = SSL_get0_peer_scts(s);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4178:     CT_POLICY_EVAL_CTX_set_time(ctx, SSL_SESSION_get_time(SSL_get0_session(s)));",
          "",
          "---------------"
        ],
        "test/ct_test.c||test/ct_test.c": [
          "File: test/ct_test.c -> test/ct_test.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: typedef struct ct_test_fixture {",
          "31:     const char *test_case_name;",
          "33:     CTLOG_STORE* ctlog_store;",
          "35:     const char *certs_dir;",
          "36:     char *certificate_file;",
          "37:     char *issuer_file;",
          "38:     int expected_sct_count;",
          "40:     const unsigned char *tls_sct_list;",
          "41:     size_t tls_sct_list_len;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "33:     uint64_t epoch_time_in_ms;",
          "43:     int expected_valid_sct_count;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "250:         }",
          "251:     }",
          "254:         int unverified_sct_count = sk_SCT_num(scts) -",
          "255:                 invalid_sct_count - valid_sct_count;",
          "",
          "[Removed Lines]",
          "253:     if (valid_sct_count != fixture.expected_sct_count) {",
          "",
          "[Added Lines]",
          "258:     if (valid_sct_count != fixture.expected_valid_sct_count) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "260:                 \"%d SCTs were unverified\\n\",",
          "261:                 invalid_sct_count,",
          "262:                 valid_sct_count,",
          "264:                 unverified_sct_count);",
          "265:         return 0;",
          "266:     }",
          "",
          "[Removed Lines]",
          "263:                 fixture.expected_sct_count,",
          "",
          "[Added Lines]",
          "268:                 fixture.expected_valid_sct_count,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "297:     CT_POLICY_EVAL_CTX_set_shared_CTLOG_STORE(",
          "298:             ct_policy_ctx, fixture.ctlog_store);",
          "300:     if (fixture.certificate_file != NULL) {",
          "301:         int sct_extension_index;",
          "302:         X509_EXTENSION *sct_extension = NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "305:     CT_POLICY_EVAL_CTX_set_time(ct_policy_ctx, fixture.epoch_time_in_ms);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "443:     fixture.certs_dir = certs_dir;",
          "444:     fixture.certificate_file = \"embeddedSCTs1.pem\";",
          "445:     fixture.issuer_file = \"embeddedSCTs1_issuer.pem\";",
          "447:     fixture.test_validity = 1;",
          "448:     EXECUTE_CT_TEST();",
          "449: }",
          "",
          "[Removed Lines]",
          "446:     fixture.expected_sct_count = 1;",
          "",
          "[Added Lines]",
          "453:     fixture.expected_sct_count = fixture.expected_valid_sct_count = 1;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "454:     fixture.certs_dir = certs_dir;",
          "455:     fixture.certificate_file = \"embeddedSCTs3.pem\";",
          "456:     fixture.issuer_file = \"embeddedSCTs3_issuer.pem\";",
          "458:     fixture.test_validity = 1;",
          "459:     EXECUTE_CT_TEST();",
          "460: }",
          "",
          "[Removed Lines]",
          "457:     fixture.expected_sct_count = 3;",
          "",
          "[Added Lines]",
          "464:     fixture.expected_sct_count = fixture.expected_valid_sct_count = 3;",
          "465:     fixture.test_validity = 1;",
          "466:     EXECUTE_CT_TEST();",
          "467: }",
          "469: static int test_verify_fails_for_future_sct()",
          "470: {",
          "471:     SETUP_CT_TEST_FIXTURE();",
          "473:     fixture.certs_dir = certs_dir;",
          "474:     fixture.certificate_file = \"embeddedSCTs1.pem\";",
          "475:     fixture.issuer_file = \"embeddedSCTs1_issuer.pem\";",
          "476:     fixture.expected_sct_count = 1;",
          "477:     fixture.expected_valid_sct_count = 0;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "548:     ADD_TEST(test_multiple_scts_in_certificate);",
          "549:     ADD_TEST(test_verify_one_sct);",
          "550:     ADD_TEST(test_verify_multiple_scts);",
          "551:     ADD_TEST(test_decode_tls_sct);",
          "552:     ADD_TEST(test_encode_tls_sct);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "571:     ADD_TEST(test_verify_fails_for_future_sct);",
          "",
          "---------------"
        ],
        "util/libcrypto.num||util/libcrypto.num": [
          "File: util/libcrypto.num -> util/libcrypto.num",
          "--- Hunk 1 ---",
          "[Context before]",
          "4208: OCSP_RESPID_match                       4159 1_1_0a EXIST::FUNCTION:OCSP",
          "4209: DSO_pathbyaddr                          4170 1_1_0c EXIST::FUNCTION:",
          "4210: DSO_dsobyaddr                           4171 1_1_0c EXIST::FUNCTION:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4211: CT_POLICY_EVAL_CTX_get_time             4172 1_1_1 EXIST::FUNCTION:CT",
          "4212: CT_POLICY_EVAL_CTX_set_time             4173 1_1_1 EXIST::FUNCTION:CT",
          "",
          "---------------"
        ]
      }
    }
  ]
}