{
  "cve_id": "CVE-2020-22873",
  "cve_desc": "Buffer overflow vulnerability in function NumberToPrecisionCmd in jsish before 3.0.7, allows remote attackers to execute arbitrary code.",
  "repo": "pcmacdon/jsish",
  "patch_hash": "430ea27accd4d4ffddc946c9402e7c9064835a18",
  "patch_info": {
    "commit_hash": "430ea27accd4d4ffddc946c9402e7c9064835a18",
    "repo": "pcmacdon/jsish",
    "commit_url": "https://github.com/pcmacdon/jsish/commit/430ea27accd4d4ffddc946c9402e7c9064835a18",
    "files": [
      "src/jsi.h",
      "src/jsiCmds.c",
      "src/jsiCode.c",
      "src/jsiEval.c",
      "src/jsiFilesys.c",
      "src/jsiFunc.c",
      "src/jsiHash.c",
      "src/jsiInterp.c",
      "src/jsiJSON.c",
      "src/jsiMySql.c",
      "src/jsiNumber.c",
      "src/jsiOptions.c",
      "src/jsiPstate.c",
      "src/jsiRegexp.c",
      "src/jsiSqlite.c",
      "src/jsiString.c",
      "src/jsiTree.c",
      "src/jsiUtils.c",
      "src/jsiValue.c",
      "src/jsiWebSocket.c"
    ],
    "message": "Release \"3.0.7\": Fix toPrecision bug \"stack overflow #4\".\n\nFossilOrigin-Name: 6c7f0c37027d7f890b57cb38f776af39b8f81f03e60ceeb0a231a1d21e24b5de",
    "before_after_code_files": [
      "src/jsi.h||src/jsi.h",
      "src/jsiCmds.c||src/jsiCmds.c",
      "src/jsiCode.c||src/jsiCode.c",
      "src/jsiEval.c||src/jsiEval.c",
      "src/jsiFilesys.c||src/jsiFilesys.c",
      "src/jsiFunc.c||src/jsiFunc.c",
      "src/jsiHash.c||src/jsiHash.c",
      "src/jsiInterp.c||src/jsiInterp.c",
      "src/jsiJSON.c||src/jsiJSON.c",
      "src/jsiMySql.c||src/jsiMySql.c",
      "src/jsiNumber.c||src/jsiNumber.c",
      "src/jsiOptions.c||src/jsiOptions.c",
      "src/jsiPstate.c||src/jsiPstate.c",
      "src/jsiRegexp.c||src/jsiRegexp.c",
      "src/jsiSqlite.c||src/jsiSqlite.c",
      "src/jsiString.c||src/jsiString.c",
      "src/jsiTree.c||src/jsiTree.c",
      "src/jsiUtils.c||src/jsiUtils.c",
      "src/jsiValue.c||src/jsiValue.c",
      "src/jsiWebSocket.c||src/jsiWebSocket.c"
    ]
  },
  "patch_diff": {
    "src/jsi.h||src/jsi.h": [
      "File: src/jsi.h -> src/jsi.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "5: #define JSI_VERSION_MAJOR   3",
      "6: #define JSI_VERSION_MINOR   0",
      "9: #define JSI_VERSION (JSI_VERSION_MAJOR + ((Jsi_Number)JSI_VERSION_MINOR/100.0) + ((Jsi_Number)JSI_VERSION_RELEASE/10000.0))",
      "",
      "[Removed Lines]",
      "7: #define JSI_VERSION_RELEASE 6",
      "",
      "[Added Lines]",
      "7: #define JSI_VERSION_RELEASE 7",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "217:     JSI_BUFSIZ=8192",
      "",
      "[Removed Lines]",
      "216:     JSI_MAX_NUMBER_STRING=50,",
      "",
      "[Added Lines]",
      "216:     JSI_MAX_NUMBER_STRING=100,",
      "",
      "---------------"
    ],
    "src/jsiCmds.c||src/jsiCmds.c": [
      "File: src/jsiCmds.c -> src/jsiCmds.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "845:         Jsi_ObjInsert(interp, nobj, \"name\", Jsi_ValueNewStringDup(interp, name), 0);",
      "846:         Jsi_ObjInsert(interp, nobj, \"version\", Jsi_ValueNewNumber(interp, ptr->version), 0);",
      "847:         Jsi_ObjInsert(interp, nobj, \"lastReq\", Jsi_ValueNewNumber(interp, ptr->lastReq), 0);",
      "849:         jsi_VersionNormalize(ptr->version, buf, sizeof(buf));",
      "850:         Jsi_ObjInsert(interp, nobj, \"verStr\", Jsi_ValueNewStringDup(interp, buf), 0);",
      "851:         const char *cp = (ptr->loadFile?ptr->loadFile:\"\");",
      "",
      "[Removed Lines]",
      "848:         char buf[200];",
      "",
      "[Added Lines]",
      "848:         char buf[JSI_MAX_NUMBER_STRING*2];",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1192:     Jsi_Value *vres;",
      "1193:     Jsi_Obj  *ores = Jsi_ObjNew(interp);",
      "1194:     Jsi_Value *nnv;",
      "1197:     vres = Jsi_ValueMakeObject(interp, NULL, ores);",
      "",
      "[Removed Lines]",
      "1195:     char *val, nam[200];",
      "",
      "[Added Lines]",
      "1195:     char *val, nam[JSI_BUFSIZ/2];",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "2700:     }",
      "2701:     if (bp.line<=0 && !bp.func)",
      "2702:         return Jsi_LogError(\"bad number\");",
      "2704:     bp.id = ++interp->debugOpts.breakIdx;",
      "2705:     bp.enabled = 1;",
      "2706:     snprintf(nbuf, sizeof(nbuf), \"%d\", bp.id);",
      "",
      "[Removed Lines]",
      "2703:     char nbuf[100];",
      "",
      "[Added Lines]",
      "2703:     char nbuf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "2718:     if (interp->breakpointHash)",
      "2719:     {",
      "2720:         int num;",
      "2722:         if (Jsi_GetIntFromValue(interp, val, &num) != JSI_OK)",
      "2723:             return Jsi_LogError(\"bad number\");",
      "",
      "[Removed Lines]",
      "2721:         char nbuf[100];",
      "",
      "[Added Lines]",
      "2721:         char nbuf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "2766:         return Jsi_HashKeysDump(interp, interp->breakpointHash, ret, 0);",
      "2767:     Jsi_Value *val = Jsi_ValueArrayIndex(interp, args, 0);",
      "2768:     int num;",
      "2770:     if (Jsi_GetIntFromValue(interp, val, &num) != JSI_OK)",
      "2771:         return Jsi_LogError(\"bad number\");",
      "",
      "[Removed Lines]",
      "2769:     char nbuf[100];",
      "",
      "[Added Lines]",
      "2769:     char nbuf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "3800:     Jsi_Value *flag = Jsi_ValueArrayIndex(interp, args, 1);",
      "3801:     if (!val) goto bail;",
      "3802:     if (Jsi_ValueIsNumber(interp, val)) {",
      "3804:         Jsi_Number n;",
      "3805:         if (Jsi_GetNumberFromValue(interp, val, &n) != JSI_OK)",
      "3806:             goto bail;",
      "",
      "[Removed Lines]",
      "3803:         char buf[200];",
      "",
      "[Added Lines]",
      "3803:         char buf[JSI_MAX_NUMBER_STRING*2];",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "3953:         if (bv)",
      "3954:             interp->timesStart = now;",
      "3955:         else {",
      "3957:             snprintf(buf, sizeof(buf), \" (times = %.6f sec)\\n\", (now-interp->timesStart));",
      "3958:             Jsi_Puts(interp, jsi_Stderr, buf, -1);",
      "3959:         }",
      "",
      "[Removed Lines]",
      "3956:             char buf[100];",
      "",
      "[Added Lines]",
      "3956:             char buf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------"
    ],
    "src/jsiCode.c||src/jsiCode.c": [
      "File: src/jsiCode.c -> src/jsiCode.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "436:     if (_JSICASTINT(op->op) < 0 || op->op >= OP_LASTOP) {",
      "437:         snprintf(buf, bsiz, \"Bad opcode[%d] at %d\", op->op, currentip);",
      "438:     }",
      "440:     snprintf(nbuf, sizeof(nbuf), \"%d#%d\", currentip, op->Line);",
      "441:     snprintf(buf, bsiz, \"%-8s %s \", nbuf, jsi_op_names[op->op]);",
      "",
      "[Removed Lines]",
      "439:     char nbuf[100];",
      "",
      "[Added Lines]",
      "439:     char nbuf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------"
    ],
    "src/jsiEval.c||src/jsiEval.c": [
      "File: src/jsiEval.c -> src/jsiEval.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "288: static const char *jsi_evalprint(Jsi_Value *v)",
      "289: {",
      "291:     if (!v)",
      "292:         return \"nil\";",
      "293:     if (v->vt == JSI_VT_NUMBER) {",
      "295:     } else if (v->vt == JSI_VT_BOOL) {",
      "297:     } else if (v->vt == JSI_VT_STRING) {",
      "299:     } else if (v->vt == JSI_VT_VARIABLE) {",
      "301:     } else if (v->vt == JSI_VT_NULL) {",
      "303:     } else if (v->vt == JSI_VT_OBJECT) {",
      "305:     } else if (v->vt == JSI_VT_UNDEF) {",
      "307:     }",
      "308:     return buf;",
      "309: }",
      "",
      "[Removed Lines]",
      "290:     static char buf[100];",
      "294:         snprintf(buf, 100, \"NUM:%\" JSI_NUMGFMT \" \", v->d.num);",
      "296:         snprintf(buf, 100, \"BOO:%d\", v->d.val);",
      "298:         snprintf(buf, 100, \"STR:'%s'\", v->d.s.str);",
      "300:         snprintf(buf, 100, \"VAR:%p\", v->d.lval);",
      "302:         snprintf(buf, 100, \"NULL\");",
      "304:         snprintf(buf, 100, \"OBJ:%p\", v->d.obj);",
      "306:         snprintf(buf, 100, \"UNDEFINED\");",
      "",
      "[Added Lines]",
      "290:     static char buf[JSI_MAX_NUMBER_STRING];",
      "294:         snprintf(buf, sizeof(buf), \"NUM:%\" JSI_NUMGFMT \" \", v->d.num);",
      "296:         snprintf(buf, sizeof(buf), \"BOO:%d\", v->d.val);",
      "298:         snprintf(buf, sizeof(buf), \"STR:'%s'\", v->d.s.str);",
      "300:         snprintf(buf, sizeof(buf), \"VAR:%p\", v->d.lval);",
      "302:         snprintf(buf, sizeof(buf), \"NULL\");",
      "304:         snprintf(buf, sizeof(buf), \"OBJ:%p\", v->d.obj);",
      "306:         snprintf(buf, sizeof(buf), \"UNDEFINED\");",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "403:     jsi_TryList *trylist, jsi_OpCode *ip, Jsi_OpCodes *opcodes)",
      "404: {",
      "405:     int i;",
      "407:     jsi_code_decode(interp, ip, ip - opcodes->codes, buf, sizeof(buf));",
      "408:     Jsi_Printf(interp, jsi_Stderr, \"%p: %-30.200s : THIS=%s, STACK=[\", ip, buf, jsi_evalprint(_this));",
      "409:     for (i = 0; i < interp->framePtr->Sp; ++i) {",
      "",
      "[Removed Lines]",
      "406:     char buf[200];",
      "",
      "[Added Lines]",
      "406:     char buf[JSI_MAX_NUMBER_STRING*2];",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1538:                     break;",
      "1539:                 }",
      "1540:                 int bval = 0;",
      "1542:                 Jsi_Value *vv;",
      "1543:                 Jsi_Obj *obj = v->d.obj;",
      "1544:                 if (!cp) {",
      "",
      "[Removed Lines]",
      "1541:                 char nbuf[100];",
      "",
      "[Added Lines]",
      "1541:                 char nbuf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "2155:     Jsi_IncrRefCount(interp, fargs);",
      "2156:     rc = jsi_evalcode_sub(ps, opcodes, scope, fargs, _this, *vret);",
      "2157:     Jsi_DecrRefCount(interp, fargs);",
      "2159:         if ((interp->evalFlags&JSI_EVAL_RETURN)==0)",
      "2160:             Jsi_ValueMakeUndef(interp, vret);",
      "",
      "[Removed Lines]",
      "2158:     if (interp->didReturn == 0 && !interp->exited) {",
      "",
      "[Added Lines]",
      "2158:     if (interp->didReturn == 0 && !interp->exited && rc == JSI_OK) {",
      "",
      "---------------"
    ],
    "src/jsiFilesys.c||src/jsiFilesys.c": [
      "File: src/jsiFilesys.c -> src/jsiFilesys.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1178:     if ((str = getenv(\"HOME\")) == NULL) {",
      "1179:         struct passwd pwd, *pw;",
      "1181:         if (getpwuid_r(getuid(), &pwd, buf, sizeof(buf), &pw) == 0 && pw->pw_dir)",
      "1182:             str = pw->pw_dir;",
      "1183:     }",
      "",
      "[Removed Lines]",
      "1180:         char buf[20000];",
      "",
      "[Added Lines]",
      "1180:         char buf[JSI_BUFSIZ*3];",
      "",
      "---------------"
    ],
    "src/jsiFunc.c||src/jsiFunc.c": [
      "File: src/jsiFunc.c -> src/jsiFunc.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "189: Jsi_RC jsi_ArgTypeCheck(Jsi_Interp *interp, int typ,  Jsi_Value *arg, const char *p1,",
      "190:     const char *p2, int index, Jsi_Func *func, bool isdefault) {",
      "191:     Jsi_RC rc = JSI_OK;",
      "193:     idxBuf[0] = 0;",
      "194:     if (func && arg->vt == JSI_VT_UNDEF && !interp->typeCheck.noundef && index>0 && !isdefault && !(typ&JSI_TT_UNDEFINED)) {",
      "195:         snprintf(idxBuf, sizeof(idxBuf), \" arg %d\", index);",
      "",
      "[Removed Lines]",
      "192:     char idxBuf[200];",
      "",
      "[Added Lines]",
      "192:     char idxBuf[JSI_MAX_NUMBER_STRING*2];",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "295:         Jsi_DString dStr = {};",
      "296:         const char *exp = jsi_typeName(interp, typ, &dStr);",
      "297:         const char *vtyp = jsi_TypeName(interp, (Jsi_ttype)atyp);",
      "299:         idxBuf[0] = 0;",
      "300:         if (index>0)",
      "301:             snprintf(idxBuf, sizeof(idxBuf), \" arg %d\", index);",
      "",
      "[Removed Lines]",
      "298:         char idxBuf[200];",
      "",
      "[Added Lines]",
      "298:         char idxBuf[JSI_MAX_NUMBER_STRING*2];",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "339:     if (ss==NULL && spec == NULL)",
      "340:         return JSI_OK;",
      "341:     int i, minArgs, maxArgs, mis = 0, varargs = 0;",
      "343:     if (func->type == FC_BUILDIN) {",
      "344:         varargs =  (spec->maxArgs<0);",
      "345:         maxArgs = spec->maxArgs + func->callflags.bits.addargs;",
      "",
      "[Removed Lines]",
      "342:     char nbuf[100];",
      "",
      "[Added Lines]",
      "342:     char nbuf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------"
    ],
    "src/jsiHash.c||src/jsiHash.c": [
      "File: src/jsiHash.c -> src/jsiHash.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "623:     void *key = Jsi_HashKeyGet(hPtr);",
      "624:     if (opts->keyType == JSI_KEYS_ONEWORD)",
      "625:         return Jsi_ValueNewNumber(opts->interp, (Jsi_Number)(intptr_t)key);",
      "627:     snprintf(nbuf, sizeof(nbuf), \"%p\", key);",
      "628:     return Jsi_ValueNewStringDup(opts->interp, nbuf);",
      "629: }",
      "",
      "[Removed Lines]",
      "626:     char nbuf[100];",
      "",
      "[Added Lines]",
      "626:     char nbuf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------"
    ],
    "src/jsiInterp.c||src/jsiInterp.c": [
      "File: src/jsiInterp.c -> src/jsiInterp.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "701: Jsi_Interp* Jsi_Main(Jsi_InterpOpts *opts)",
      "702: {",
      "704:     Jsi_Interp* interp = NULL;",
      "705:     int argc = 0, first = 1;",
      "706:     char **argv = NULL;",
      "",
      "[Removed Lines]",
      "703:     int rc = 0;",
      "",
      "[Added Lines]",
      "703:     Jsi_RC rc = JSI_OK;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "929:     }",
      "930:     if (jsi_deleted) //TODO: rationalize jsi_deleted, jsi_exitCode, etc",
      "931:         return jsi_DoExit(rc==JSI_EXIT?NULL:interp, jsi_exitCode);",
      "934:         Jsi_Value *ret = Jsi_ReturnValue(interp);",
      "935:         if (!Jsi_ValueIsType(interp, ret, JSI_VT_UNDEF)) {",
      "",
      "[Removed Lines]",
      "932:     if (rc == 0) {",
      "",
      "[Added Lines]",
      "932:     if (rc == JSI_OK) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "940:         }",
      "941:     } else {",
      "942:         if (!interp->parent && !interp->isHelp)",
      "944:         return jsi_DoExit(interp, 1);",
      "945:     }",
      "",
      "[Removed Lines]",
      "943:             fputs(\"ERROR\\n\", stderr);",
      "",
      "[Added Lines]",
      "943:             fprintf(stderr, \"ERROR: %s\\n\", interp->errMsgBuf);",
      "",
      "---------------"
    ],
    "src/jsiJSON.c||src/jsiJSON.c": [
      "File: src/jsiJSON.c -> src/jsiJSON.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "7: static void jsonNewDString(Jsi_Interp *interp, Jsi_DString *dStr, const char* str, int len)",
      "8: {",
      "10:     const char *cp = str;",
      "11:     int ulen;",
      "",
      "[Removed Lines]",
      "9:     char buf[100], *dp = buf;",
      "",
      "[Added Lines]",
      "9:     char buf[JSI_MAX_NUMBER_STRING], *dp = buf;",
      "",
      "---------------"
    ],
    "src/jsiMySql.c||src/jsiMySql.c": [
      "File: src/jsiMySql.c -> src/jsiMySql.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1170: static void mdbEvalSetColumnJSON(MyDbEvalContext *p, int iCol, Jsi_DString *dStr) {",
      "1171:     Jsi_Interp *interp = p->jdb->interp;",
      "1173:     MysqlPrep *prep = p->prep;",
      "1174:     SqlFieldResults *field = prep->fieldResult+iCol;",
      "1175:     if (field->isnull) {",
      "",
      "[Removed Lines]",
      "1172:     char nbuf[200];",
      "",
      "[Added Lines]",
      "1172:     char nbuf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1220: static void mdbEvalSetColumn(MyDbEvalContext *p, int iCol, Jsi_DString *dStr) {",
      "1223:     MysqlPrep *prep = p->prep;",
      "1224:     SqlFieldResults *field = prep->fieldResult+iCol;",
      "1225:     Jsi_Interp *interp = p->jdb->interp;",
      "",
      "[Removed Lines]",
      "1222:     char nbuf[200];",
      "",
      "[Added Lines]",
      "1222:     char nbuf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------"
    ],
    "src/jsiNumber.c||src/jsiNumber.c": [
      "File: src/jsiNumber.c -> src/jsiNumber.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "123: static Jsi_RC NumberToFixedCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
      "124:     Jsi_Value **ret, Jsi_Func *funcPtr)",
      "125: {",
      "127:     int prec = 0, skip = 0;",
      "128:     Jsi_Number num;",
      "129:     Jsi_Value *v;",
      "",
      "[Removed Lines]",
      "126:     char buf[100];",
      "",
      "[Added Lines]",
      "126:     char buf[JSI_MAX_NUMBER_STRING+1];",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "141: static Jsi_RC NumberToPrecisionCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
      "142:     Jsi_Value **ret, Jsi_Func *funcPtr)",
      "143: {",
      "145:     int prec = 0, skip = 0;",
      "146:     Jsi_Number num;",
      "147:     Jsi_Value *v;",
      "148:     ChkStringN(_this, funcPtr, v);",
      "149:     if (Jsi_GetIntFromValue(interp, Jsi_ValueArrayIndex(interp, args, skip), &prec) != JSI_OK)",
      "150:         return JSI_ERROR;",
      "152:     Jsi_GetDoubleFromValue(interp, v, &num);",
      "153:     snprintf(buf, sizeof(buf),\"%.*\" JSI_NUMFFMT, prec, num);",
      "154:     if (num<0)",
      "",
      "[Removed Lines]",
      "144:     char buf[100];",
      "151:     if (prec<=0) return JSI_ERROR;",
      "",
      "[Added Lines]",
      "144:     char buf[JSI_MAX_NUMBER_STRING*2];",
      "151:     if (prec<=0 || prec>JSI_MAX_NUMBER_STRING) return Jsi_LogError(\"precision must be between 1 and %d\", JSI_MAX_NUMBER_STRING);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "163: static Jsi_RC NumberToExponentialCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
      "164:     Jsi_Value **ret, Jsi_Func *funcPtr)",
      "165: {",
      "167:     int prec = 0, skip = 0;",
      "168:     Jsi_Number num;",
      "169:     Jsi_Value *v;",
      "",
      "[Removed Lines]",
      "166:     char buf[100];",
      "",
      "[Added Lines]",
      "166:     char buf[JSI_MAX_NUMBER_STRING+1];",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "191: static Jsi_RC NumberToStringCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
      "192:     Jsi_Value **ret, Jsi_Func *funcPtr)",
      "193: {",
      "195:     int radix = 10, skip = 0, argc = Jsi_ValueGetLength(interp, args);",
      "196:     Jsi_Number num;",
      "197:     Jsi_Value *v;",
      "",
      "[Removed Lines]",
      "194:     char buf[500];",
      "",
      "[Added Lines]",
      "194:     char buf[JSI_MAX_NUMBER_STRING+1];",
      "",
      "---------------"
    ],
    "src/jsiOptions.c||src/jsiOptions.c": [
      "File: src/jsiOptions.c -> src/jsiOptions.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1876:         if (JSI_OK != jsi_EnumToValue(interp, eSpec, outValue, outStr, (void*)&nval, flags))",
      "1877:             return JSI_ERROR;",
      "1878:     } else if (outStr) {",
      "1880:         snprintf(obuf, sizeof(obuf), \"%\" PRId64, inum);",
      "1881:         Jsi_DSAppend(outStr, obuf, NULL);",
      "1882:     } else {",
      "",
      "[Removed Lines]",
      "1879:         char obuf[100];",
      "",
      "[Added Lines]",
      "1879:         char obuf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------"
    ],
    "src/jsiPstate.c||src/jsiPstate.c": [
      "File: src/jsiPstate.c -> src/jsiPstate.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "239:     l->d.fp = fp;",
      "240:     Jsi_Rewind(ps->interp, fp);",
      "241:     if (skipbang) {",
      "244:             Jsi_Rewind(ps->interp, fp);",
      "245:         }",
      "246:     }",
      "",
      "[Removed Lines]",
      "242:         char buf[1000];",
      "243:         if (Jsi_Gets(ps->interp, fp, buf, 1000) && (buf[0] != '#' || buf[1] != '!')) {",
      "",
      "[Added Lines]",
      "242:         char buf[JSI_BUFSIZ];",
      "243:         if (Jsi_Gets(ps->interp, fp, buf, sizeof(buf)) && (buf[0] != '#' || buf[1] != '!')) {",
      "",
      "---------------"
    ],
    "src/jsiRegexp.c||src/jsiRegexp.c": [
      "File: src/jsiRegexp.c -> src/jsiRegexp.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "162:     int r  = regexec(reg, v, 1, &pos, regexec_flags);",
      "164:     if (r >= REG_BADPAT) {",
      "167:         regerror(r, reg, buf, sizeof(buf));",
      "168:         return Jsi_LogError(\"error while matching pattern: %s\", buf);",
      "",
      "[Removed Lines]",
      "165:         char buf[100];",
      "",
      "[Added Lines]",
      "165:         char buf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------"
    ],
    "src/jsiSqlite.c||src/jsiSqlite.c": [
      "File: src/jsiSqlite.c -> src/jsiSqlite.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1396:     bool b;",
      "1397:     if( rc != JSI_OK) {",
      "1399:         snprintf(buf, sizeof(buf), \"error in function: %.200s\", p->zName);",
      "1400:         sqlite3_result_error(context, buf, -1);",
      "",
      "[Removed Lines]",
      "1398:         char buf[250];",
      "",
      "[Added Lines]",
      "1398:         char buf[JSI_BUFSIZ];",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1761: static void dbEvalSetColumnJSON(DbEvalContext *p, int iCol, Jsi_DString *dStr) {",
      "1762:     Jsi_Interp *interp = p->jdb->interp;",
      "1765:     sqlite3_stmt *pStmt = p->pPreStmt->pStmt;",
      "",
      "[Removed Lines]",
      "1763:     char nbuf[200];",
      "",
      "[Added Lines]",
      "1763:     char nbuf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1811: static void dbEvalSetColumn(DbEvalContext *p, int iCol, Jsi_DString *dStr) {",
      "1812:     Jsi_Interp *interp = p->jdb->interp;",
      "1815:     sqlite3_stmt *pStmt = p->pPreStmt->pStmt;",
      "",
      "[Removed Lines]",
      "1813:     char nbuf[200];",
      "",
      "[Added Lines]",
      "1813:     char nbuf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "2561: static void dbOutputHexBlob(Jsi_DString *dStr, const void *pBlob, int nBlob){",
      "2562:   int i;",
      "2564:   Jsi_DSAppend(dStr, \"X'\", NULL);",
      "2565:   for(i=0; i<nBlob; i++){ snprintf(out, sizeof(out),\"%02x\",zBlob[i]&0xff);Jsi_DSAppend(dStr, out, NULL); }",
      "2566:   Jsi_DSAppend(dStr, \"'\", NULL);",
      "",
      "[Removed Lines]",
      "2563:   char out[100], *zBlob = (char *)pBlob;",
      "",
      "[Added Lines]",
      "2563:   char out[JSI_MAX_NUMBER_STRING], *zBlob = (char *)pBlob;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "4394:     DbEvalContext sEval = {};",
      "4395:     int insert = 0, replace = 0, update = 0;",
      "4397: #ifdef JSI_DB_DSTRING_SIZE",
      "4398:     JSI_DSTRING_VAR(dStr, JSI_DB_DSTRING_SIZE);",
      "4399: #else",
      "",
      "[Removed Lines]",
      "4396:     char nbuf[100], *bPtr;",
      "",
      "[Added Lines]",
      "4396:     char nbuf[JSI_MAX_NUMBER_STRING], *bPtr;",
      "",
      "---------------"
    ],
    "src/jsiString.c||src/jsiString.c": [
      "File: src/jsiString.c -> src/jsiString.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "724:         int match = regexec(regex, p, MAX_SUBREGEX, pmatch, regexec_flags);",
      "726:         if (match >= REG_BADPAT) {",
      "729:             regerror(match, regex, buf, sizeof(buf));",
      "730:             Jsi_LogError(\"error while matching pattern: %s\", buf);",
      "",
      "[Removed Lines]",
      "727:             char buf[100];",
      "",
      "[Added Lines]",
      "727:             char buf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "895:             return JSI_OK;",
      "896:         }",
      "897:         if (r >= REG_BADPAT) {",
      "900:             regerror(r, reg, buf, sizeof(buf));",
      "901:             Jsi_LogError(\"error while matching pattern: %s\", buf);",
      "",
      "[Removed Lines]",
      "898:             char buf[100];",
      "",
      "[Added Lines]",
      "898:             char buf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------"
    ],
    "src/jsiTree.c||src/jsiTree.c": [
      "File: src/jsiTree.c -> src/jsiTree.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "946:         int n;",
      "947:         int m;",
      "948:     } t1, t2;",
      "951:     wt = Jsi_TreeNew(interp, JSI_KEYS_ONEWORD, NULL);",
      "952:     mt = Jsi_TreeNew(interp, sizeof(struct tdata), NULL);",
      "",
      "[Removed Lines]",
      "949:     char nbuf[100];",
      "",
      "[Added Lines]",
      "949:     char nbuf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1038:     void *key = Jsi_TreeKeyGet(hPtr);",
      "1039:     if (opts->keyType == JSI_KEYS_ONEWORD)",
      "1040:         return Jsi_ValueNewNumber(opts->interp, (Jsi_Number)(intptr_t)key);",
      "1042:     snprintf(nbuf, sizeof(nbuf), \"%p\", key);",
      "1043:     return Jsi_ValueNewStringDup(opts->interp, nbuf);",
      "1044: }",
      "",
      "[Removed Lines]",
      "1041:     char nbuf[100];",
      "",
      "[Added Lines]",
      "1041:     char nbuf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------"
    ],
    "src/jsiUtils.c||src/jsiUtils.c": [
      "File: src/jsiUtils.c -> src/jsiUtils.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "626: static Jsi_RC jsiValueGetString(Jsi_Interp *interp, Jsi_Value* v, Jsi_DString *dStr, objwalker *owPtr)",
      "627: {",
      "629:     Jsi_DString eStr;",
      "630:     Jsi_DSInit(&eStr);",
      "631:     if (interp->maxDepth>0 && owPtr->depth > interp->maxDepth)",
      "",
      "[Removed Lines]",
      "628:     char buf[100], *str;",
      "",
      "[Added Lines]",
      "628:     char buf[JSI_MAX_NUMBER_STRING], *str;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "943: }",
      "945: static void jsiLNGetMatches(const char *str, linenoiseCompletions *lc) {",
      "947:     const char *cp, *fnam = \"Info.completions\";",
      "948:     int i = 0, len;",
      "949:     int rc, isfile = 0, start = 0, end = Jsi_Strlen(str);",
      "",
      "[Removed Lines]",
      "946:     char buf[1000], pre[1000], hpre[6] = {};",
      "",
      "[Added Lines]",
      "946:     char buf[JSI_BUFSIZ], pre[JSI_BUFSIZ], hpre[6] = {};",
      "",
      "---------------"
    ],
    "src/jsiValue.c||src/jsiValue.c": [
      "File: src/jsiValue.c -> src/jsiValue.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "401:     assert(args->vt == JSI_VT_OBJECT);",
      "402:     if (obj->isarrlist && obj->arr)",
      "403:         return ((index < 0 || (uint)index >= obj->arrCnt) ? NULL : obj->arr[index]);",
      "405:     Jsi_NumberItoA10(index, unibuf, sizeof(unibuf));",
      "406:     v = Jsi_TreeObjGetValue(args->d.obj, unibuf, 0);",
      "407:     return v;",
      "",
      "[Removed Lines]",
      "404:     char unibuf[100];",
      "",
      "[Added Lines]",
      "404:     char unibuf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "531:     if (!v)",
      "532:         goto done;",
      "533:     if (lenPtr) *lenPtr = 0;",
      "535:     switch(v->vt) {",
      "536:         case JSI_VT_STRING:",
      "537:             ntxt = v->d.s.str;",
      "",
      "[Removed Lines]",
      "534:     char unibuf[200];",
      "",
      "[Added Lines]",
      "534:     char unibuf[JSI_MAX_NUMBER_STRING*2];",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1182:             if (Jsi_ValueIsString(interp, key)) {",
      "1183:                 char *kstr = Jsi_ValueString(interp, key, NULL);",
      "1184:                 if (!Jsi_Strcmp(kstr,\"call\") || !Jsi_Strcmp(kstr,\"apply\") || !Jsi_Strcmp(kstr,\"bind\")) {",
      "1186:                     snprintf(fbuf, sizeof(fbuf), \"Function.%s\", kstr);",
      "1187:                     Jsi_Value *vv = Jsi_NameLookup(interp, fbuf);",
      "1188:                     if (vv)",
      "",
      "[Removed Lines]",
      "1185:                     char fbuf[100];",
      "",
      "[Added Lines]",
      "1185:                     char fbuf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1379:         }",
      "1380:         return JSI_ERROR;",
      "1381:     }",
      "1383:     Jsi_NumberItoA10(key, unibuf, sizeof(unibuf));",
      "1384:     Jsi_ObjInsert(interp, obj, unibuf, val, flags);",
      "1385:     return JSI_OK;",
      "",
      "[Removed Lines]",
      "1382:     char unibuf[100];",
      "",
      "[Added Lines]",
      "1382:     char unibuf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------"
    ],
    "src/jsiWebSocket.c||src/jsiWebSocket.c": [
      "File: src/jsiWebSocket.c -> src/jsiWebSocket.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "208:     Jsi_DString recvBuf; // To buffer recv when recvJSON is true.",
      "209:     Jsi_Value *onClose, *onFilter, *onRecv, *onUpload, *onGet, *onUnknown, *rootdir, *headers;",
      "210:     char *lastData;",
      "212: #if (LWS_LIBRARY_VERSION_MAJOR>1)",
      "213:     char filename[PATH_MAX];",
      "214:     long file_length;",
      "",
      "[Removed Lines]",
      "211:     char key[100]; // Lookup key.",
      "",
      "[Added Lines]",
      "211:     char key[JSI_MAX_NUMBER_STRING]; // Lookup key.",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "569: jsi_wsGetHeaders(jsi_wsPss *pss, struct lws *wsi, Jsi_DString* dStr, int lens[], int hmax)",
      "570: {",
      "571:     int n = 0, i = 0, nlen;",
      "573:     const char *cp;",
      "574:     while ((cp = (char*)lws_token_to_string((enum lws_token_indexes)n))) {",
      "575:         int len = lws_hdr_copy(wsi, buf, sizeof(buf), ( enum lws_token_indexes)n);",
      "",
      "[Removed Lines]",
      "572:     char buf[1000];",
      "",
      "[Added Lines]",
      "572:     char buf[JSI_BUFSIZ];",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1344:     Jsi_DSFree(&sStr);",
      "1345:     if (cmdPtr->debug>1)",
      "1346:         fprintf(stderr, \"FILE: %s in %s | %s\\n\", buf, cmdPtr->curRoot, Jsi_ValueString(interp, cmdPtr->rootdir, NULL));",
      "1348:     isJsiWeb = (cpde && cmdPtr->jsiFnPattern && Jsi_GlobMatch(cmdPtr->jsiFnPattern, cpde+1, 0));",
      "1349:     bool isgzip = 0;",
      "1350:     if (!ext || !ext[1])",
      "",
      "[Removed Lines]",
      "1347:     char extBuf[100], *cpde = Jsi_Strrchr(buf, '/');",
      "",
      "[Added Lines]",
      "1347:     char extBuf[JSI_BUFSIZ], *cpde = Jsi_Strrchr(buf, '/');",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1836:         if (cmdPtr->post) {",
      "1837:             unsigned char **p = (unsigned char **)in, *end = (*p) + len;",
      "1838:             int n = 0;",
      "1840:             Jsi_ValueString(interp, cmdPtr->post, &n);",
      "1841:             snprintf(buf, sizeof(buf), \"%d\", n);",
      "",
      "[Removed Lines]",
      "1839:             char buf[100];",
      "",
      "[Added Lines]",
      "1839:             char buf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "2228:     case LWS_CALLBACK_CLIENT_ESTABLISHED:",
      "2229:     case LWS_CALLBACK_ESTABLISHED:",
      "2230:         if (cmdPtr->bufferPwr2>0) {",
      "2232:             snprintf(nbuf, sizeof(nbuf), \"%d\", cmdPtr->bufferPwr2);",
      "2233:             lws_set_extension_option(wsi, \"permessage-deflate\", \"rx_buf_size\", nbuf);",
      "2234:             lws_set_extension_option(wsi, \"permessage-deflate\", \"tx_buf_size\", nbuf);",
      "",
      "[Removed Lines]",
      "2231:             char nbuf[100];",
      "",
      "[Added Lines]",
      "2231:             char nbuf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "2870:     const char *verStr = NULL;",
      "2871:     verStr = lws_get_library_version();",
      "2872:     if (verStr) {",
      "2874:         snprintf(buf, sizeof(buf), \"%s\", verStr);",
      "2875:         cp = Jsi_Strchr(buf, ' ');",
      "2876:         if (cp) *cp = 0;",
      "",
      "[Removed Lines]",
      "2873:         char buf[100], *cp;",
      "",
      "[Added Lines]",
      "2873:         char buf[JSI_MAX_NUMBER_STRING], *cp;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "0ab8e4d02734762101ddbda80a005b8c5a3ab554",
      "candidate_info": {
        "commit_hash": "0ab8e4d02734762101ddbda80a005b8c5a3ab554",
        "repo": "pcmacdon/jsish",
        "commit_url": "https://github.com/pcmacdon/jsish/commit/0ab8e4d02734762101ddbda80a005b8c5a3ab554",
        "files": [
          "lib/Jsish.jsi",
          "lib/UnitTest.jsi",
          "lib/autoload.jsi",
          "md/Reference.md",
          "src/jsi.h",
          "src/jsiCmds.c",
          "src/jsiInterp.c",
          "tests/logging.jsi",
          "tools/mkproto.jsi",
          "tools/protos.jsi",
          "www/reference.wiki"
        ],
        "message": "Release \"3.0.39\": make LogXXX commands instead of binds.\n\nFossilOrigin-Name: 3716675268ecaaf7573cbdd3602708d7684882863cd51ab8f0c59b8e19ac5d64",
        "before_after_code_files": [
          "lib/Jsish.jsi||lib/Jsish.jsi",
          "lib/UnitTest.jsi||lib/UnitTest.jsi",
          "lib/autoload.jsi||lib/autoload.jsi",
          "src/jsi.h||src/jsi.h",
          "src/jsiCmds.c||src/jsiCmds.c",
          "src/jsiInterp.c||src/jsiInterp.c",
          "tests/logging.jsi||tests/logging.jsi",
          "tools/mkproto.jsi||tools/mkproto.jsi",
          "tools/protos.jsi||tools/protos.jsi",
          "www/reference.wiki||www/reference.wiki"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/jsi.h||src/jsi.h",
            "src/jsiCmds.c||src/jsiCmds.c",
            "src/jsiInterp.c||src/jsiInterp.c"
          ],
          "candidate": [
            "src/jsi.h||src/jsi.h",
            "src/jsiCmds.c||src/jsiCmds.c",
            "src/jsiInterp.c||src/jsiInterp.c"
          ]
        }
      },
      "candidate_diff": {
        "lib/Jsish.jsi||lib/Jsish.jsi": [
          "File: lib/Jsish.jsi -> lib/Jsish.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "306:     return false;",
          "307: }",
          "333: if (Info.isMain()) {",
          "335:     var self = {};",
          "",
          "[Removed Lines]",
          "310: function Jsi__Init() {",
          "312:     if (Interp.conf('debugOpts.debugCallback')) {",
          "313:         var scope = Info.level(1).scope;",
          "314:         scope.LogDebug = console.logp.bind(null, \"DEBUG:\");",
          "315:         scope.LogTrace = console.logp.bind(null, \"TRACE:\");",
          "316:         scope.LogTest  = console.logp.bind(null, \"TEST: \");",
          "317:         scope.LogWarn  = console.logp.bind(null, \"WARN: \");",
          "318:         scope.LogInfo  = console.logp.bind(null, \"INFO: \");",
          "319:         scope.LogError = console.logp.bind(null, \"ERROR:\");",
          "320:     } else {",
          "321:         Interp.alias('LogTrace', console.logp, [\"TRACE:\"]);",
          "322:         Interp.alias('LogDebug', console.logp, [\"DEBUG:\"]);",
          "323:         Interp.alias('LogTest',  console.logp, [\"TEST: \"]);",
          "324:         Interp.alias('LogWarn',  console.logp, [\"WARN: \"]);",
          "325:         Interp.alias('LogInfo',  console.logp, [\"INFO: \"]);",
          "326:         Interp.alias('LogError', console.logp, [\"ERROR:\"]);",
          "327:     }",
          "328:     Interp.conf({logOpts:{file:true, func:true, before:true}});",
          "329: }",
          "331: Jsi__Init();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/UnitTest.jsi||lib/UnitTest.jsi": [
          "File: lib/UnitTest.jsi -> lib/UnitTest.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "292: provide(UnitTest, 1);",
          "",
          "[Removed Lines]",
          "294: moduleRun(UnitTest);",
          "",
          "[Added Lines]",
          "294: if (Info.isMain())",
          "295:     exit(moduleRun(UnitTest));",
          "",
          "---------------"
        ],
        "lib/autoload.jsi||lib/autoload.jsi": [
          "File: lib/autoload.jsi -> lib/autoload.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: if (Jsi_Auto.__autoloaded__)",
          "4:     return;",
          "11: Jsi_Auto.Jsi_AutoMake   =",
          "12: Jsi_Auto.Jsi_AutoPkg    =",
          "13: Jsi_Auto.Jsi_Main       =",
          "",
          "[Removed Lines]",
          "5: Jsi_Auto.LogTrace       =",
          "6: Jsi_Auto.LogDebug       =",
          "7: Jsi_Auto.LogTest        =",
          "8: Jsi_Auto.LogInfo        =",
          "9: Jsi_Auto.LogWarn        =",
          "10: Jsi_Auto.LogError       =",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "41: Jsi_Auto.DebugUI        = 'require(\"DebugUI\");';",
          "43: source(Info.scriptDir()+'/user/autoload.jsi', {exists:true, once:true});",
          "46: Jsi_Auto.__autoloaded__ =true;",
          "",
          "[Removed Lines]",
          "44: source(File.pwd()+'/autoload.jsi', {exists:true, once:true});",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/jsi.h||src/jsi.h": [
          "File: src/jsi.h -> src/jsi.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #define JSI_VERSION_MAJOR   3",
          "6: #define JSI_VERSION_MINOR   0",
          "9: #define JSI_VERSION (JSI_VERSION_MAJOR + ((Jsi_Number)JSI_VERSION_MINOR/100.0) + ((Jsi_Number)JSI_VERSION_RELEASE/10000.0))",
          "",
          "[Removed Lines]",
          "7: #define JSI_VERSION_RELEASE 38",
          "",
          "[Added Lines]",
          "7: #define JSI_VERSION_RELEASE 39",
          "",
          "---------------"
        ],
        "src/jsiCmds.c||src/jsiCmds.c": [
          "File: src/jsiCmds.c -> src/jsiCmds.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1648:     if (argStr)",
          "1649:         Jsi_DSAppend(&dStr, argStr, NULL);",
          "1650:     if (args) { // Assert may call with a null args",
          "1652:             if (   ((!(interp->log&(1<<JSI_LOG_ERROR))) && jsi_PrefixMatch(argStr, \"ERROR: \"))",
          "1653:                 || ((!(interp->log&(1<<JSI_LOG_WARN))) && jsi_PrefixMatch(argStr, \"WARN: \"))",
          "1654:                 || ((!(interp->log&(1<<JSI_LOG_INFO))) && jsi_PrefixMatch(argStr, \"INFO: \")))",
          "1655:                 goto done;",
          "1657:         for (; i < argc; ++i) {",
          "1658:             if (isbool && i==1)",
          "1659:                 continue;",
          "",
          "[Removed Lines]",
          "1651:         if (conLog && argc>0 && (argStr=Jsi_ValueString(interp, Jsi_ValueArrayIndex(interp, args, 0), NULL))) {",
          "1656:         }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1685:     }",
          "1686:     Jsi_DSAppend(&dStr, \"\\n\", NULL);",
          "1687:     Jsi_Puts(interp, chan, Jsi_DSValue(&dStr), Jsi_DSLength(&dStr));",
          "1689:     Jsi_DSFree(&dStr);",
          "1690:     Jsi_DSFree(&oStr);",
          "1691:     return JSI_OK;",
          "",
          "[Removed Lines]",
          "1688: done:",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4954:     return JSI_OK;",
          "4955: }",
          "4957: static Jsi_CmdSpec utilCmds[] = {",
          "4958: #ifndef JSI_OMIT_BASE64",
          "4959:     { \"argArray\",   SysArgArrayCmd,  1,  1, \"arg:any|undefined\", .help=\"Coerces non-null to an array, if necessary\", .retType=(uint)JSI_TT_ARRAY|JSI_TT_NULL },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4957: static Jsi_RC SysLogDebugCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this, Jsi_Value **ret, Jsi_Func *funcPtr)",
          "4958: {  return SysPutsCmd_(interp, args, _this, ret, funcPtr, 1, &interp->logOpts, \"DEBUG: \", 3, 2); }",
          "4959: static Jsi_RC SysLogTraceCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this, Jsi_Value **ret, Jsi_Func *funcPtr)",
          "4960: {  return SysPutsCmd_(interp, args, _this, ret, funcPtr, 1, &interp->logOpts, \"TRACE: \", 3, 2); }",
          "4961: static Jsi_RC SysLogTestCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this, Jsi_Value **ret, Jsi_Func *funcPtr)",
          "4962: {  return SysPutsCmd_(interp, args, _this, ret, funcPtr, 1, &interp->logOpts, \"TEST: \", 3, 2); }",
          "4963: static Jsi_RC SysLogInfoCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this, Jsi_Value **ret, Jsi_Func *funcPtr)",
          "4964: {  return SysPutsCmd_(interp, args, _this, ret, funcPtr, 1, &interp->logOpts, \"INFO: \", 3, 2); }",
          "4965: static Jsi_RC SysLogWarnCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this, Jsi_Value **ret, Jsi_Func *funcPtr)",
          "4966: {  return SysPutsCmd_(interp, args, _this, ret, funcPtr, 1, &interp->logOpts, \"WARN: \", 3, 2); }",
          "4967: static Jsi_RC SysLogErrorCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this, Jsi_Value **ret, Jsi_Func *funcPtr)",
          "4968: {  return SysPutsCmd_(interp, args, _this, ret, funcPtr, 1, &interp->logOpts, \"ERROR: \", 3, 2); }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "5023: #ifndef JSI_OMIT_EVENT",
          "5024:     { \"update\",     SysUpdateCmd,    0,  1, \"options:number|object=void\", .help=\"Service all events, eg. setInterval/setTimeout\", .retType=(uint)JSI_TT_NUMBER, .flags=0, .info=FN_update, .opts=jsiUpdateOptions },",
          "5025: #endif",
          "5026:     { NULL, 0,0,0,0, .help=\"Builtin system commands. All methods are exported as global\" }",
          "5027: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5040:     { \"LogDebug\",   SysLogDebugCmd,  1,  -1, \"str:string|boolean,...\", .help=\"Debug logging command\", .retType=(uint)JSI_TT_VOID },",
          "5041:     { \"LogTrace\",   SysLogTraceCmd,  1,  -1, \"str:string|boolean,...\", .help=\"Debug logging command\", .retType=(uint)JSI_TT_VOID },",
          "5042:     { \"LogTest\",    SysLogTestCmd,   1,  -1, \"str:string|boolean,...\", .help=\"Debug logging command\", .retType=(uint)JSI_TT_VOID },",
          "5043:     { \"LogInfo\",    SysLogInfoCmd,   1,  -1, \"str:string|boolean,...\", .help=\"Debug logging command\", .retType=(uint)JSI_TT_VOID },",
          "5044:     { \"LogWarn\",    SysLogWarnCmd,   1,  -1, \"str:string|boolean,...\", .help=\"Debug logging command\", .retType=(uint)JSI_TT_VOID },",
          "5045:     { \"LogError\",   SysLogErrorCmd,  1,  -1, \"str:string|boolean,...\", .help=\"Debug logging command\", .retType=(uint)JSI_TT_VOID },",
          "",
          "---------------"
        ],
        "src/jsiInterp.c||src/jsiInterp.c": [
          "File: src/jsiInterp.c -> src/jsiInterp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1101:     }",
          "1102:     interp->logOpts.file = 1;",
          "1103:     interp->logOpts.func = 1;",
          "1104:     interp->typeCheck.strict = 1;",
          "1105:     interp->log = jsi_LogDefMaskVal;",
          "1106:     int argc = interp->opts.argc;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1104:     interp->logOpts.before = 1;",
          "",
          "---------------"
        ],
        "tests/logging.jsi||tests/logging.jsi": [
          "File: tests/logging.jsi -> tests/logging.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: =!EXPECTSTART!=",
          "35: Interp.conf({noStderr:true}) ==> undefined",
          "37: undefined",
          "38: console.puts('hello cat') ==> hello cat",
          "39: undefined",
          "41: undefined",
          "43: undefined",
          "44: console.printf('hello %s', 'snail') ==> hello snailundefined",
          "45: console.puts('MANKY:', 'hello', 'slug') ==> MANKY: hello slug",
          "",
          "[Removed Lines]",
          "33: \"Starting\", logging.jsi:3,",
          "34: \"DEBUG:  testing 1, 2, 3: call2\", logging.jsi:6,",
          "36: log('hello worm') ==> \"hello worm\", logging.jsi:14, foo()",
          "40: console.log('hello bird') ==> \"hello bird\", logging.jsi:16, foo()",
          "42: console.log('hello dog') ==> \"hello dog\", logging.jsi:17, foo()",
          "",
          "[Added Lines]",
          "33: logging.jsi:3:   \"Starting\",",
          "34: logging.jsi:6:   \"DEBUG:  testing 1, 2, 3: call2\",",
          "36: log('hello worm') ==> logging.jsi:14:  \"hello worm\", foo()",
          "40: console.log('hello bird') ==> logging.jsi:16:  \"hello bird\", foo()",
          "42: console.log('hello dog') ==> logging.jsi:17:  \"hello dog\", foo()",
          "",
          "---------------"
        ],
        "tools/mkproto.jsi||tools/mkproto.jsi": [
          "File: tools/mkproto.jsi -> tools/mkproto.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "62:     return '//JSI Command Prototypes: version '+ver+'\\nthrow(\"NOT EXECUTABLE: USE FILE IN GEANY EDITOR FOR CMD LINE COMPLETION + GOTO TAG\");\\n\\n' + rv;",
          "63: }",
          "",
          "[Removed Lines]",
          "65: runModule(mkproto);",
          "",
          "[Added Lines]",
          "65: moduleRun(mkproto);",
          "",
          "---------------"
        ],
        "tools/protos.jsi||tools/protos.jsi": [
          "File: tools/protos.jsi -> tools/protos.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "164: JSON.prototype.check = function(str:string, strict:boolean=true):boolean {};",
          "165: JSON.prototype.parse = function(str:string, strict:boolean=true):any {};",
          "166: JSON.prototype.stringify = function(value:any,  strict:boolean=true):string {};",
          "167: var Math = function(cmd,args) {};",
          "168: Math.prototype.abs = function(num:number):number {};",
          "169: Math.prototype.acos = function(num:number):number {};",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "167: var LogDebug = function(str:string|boolean,...):void {};",
          "168: var LogError = function(str:string|boolean,...):void {};",
          "169: var LogInfo = function(str:string|boolean,...):void {};",
          "170: var LogTest = function(str:string|boolean,...):void {};",
          "171: var LogTrace = function(str:string|boolean,...):void {};",
          "172: var LogWarn = function(str:string|boolean,...):void {};",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "282: String.prototype.trimLeft = function(chars:string):string {};",
          "283: String.prototype.trimRight = function(chars:string):string {};",
          "284: var System = function(cmd,args) {};",
          "285: System.prototype.assert = function(expr:boolean|number|function, msg:string=void, options:object=void):void {};",
          "286: System.prototype.clearInterval = function(id:number):void {};",
          "287: System.prototype.decodeURI = function(val:string):string {};",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "291: System.prototype.LogDebug = function(str:string|boolean,...):void {};",
          "292: System.prototype.LogError = function(str:string|boolean,...):void {};",
          "293: System.prototype.LogInfo = function(str:string|boolean,...):void {};",
          "294: System.prototype.LogTest = function(str:string|boolean,...):void {};",
          "295: System.prototype.LogTrace = function(str:string|boolean,...):void {};",
          "296: System.prototype.LogWarn = function(str:string|boolean,...):void {};",
          "",
          "---------------"
        ],
        "www/reference.wiki||www/reference.wiki": [
          "File: www/reference.wiki -> www/reference.wiki",
          "--- Hunk 1 ---",
          "[Context before]",
          "1343: <h2>Methods for \"System\"</h2>",
          "1344: <table border=\"1\"class=\"cmdstbl table\">",
          "1345: <tr><th>Method</th><th>Prototype</th><th>Description</th></tr>",
          "1346: <tr><td>assert</td><td>assert(expr:boolean|number|function, msg:string=void, <a href='#System.assertOptions'>options</a>:object=void):void </td><td>Throw or output msg if expr is false. Assertions.  Enable with jsish --I Assert or using the -Assert module option.</td></tr>",
          "1347: <tr><td>clearInterval</td><td>clearInterval(id:number):void </td><td>Delete event id returned from setInterval/setTimeout/info.events().</td></tr>",
          "1348: <tr><td>decodeURI</td><td>decodeURI(val:string):string </td><td>Decode an HTTP URL.</td></tr>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1346: <tr><td>LogDebug</td><td>LogDebug(str:string|boolean,...):void </td><td>Debug logging command.</td></tr>",
          "1347: <tr><td>LogError</td><td>LogError(str:string|boolean,...):void </td><td>Debug logging command.</td></tr>",
          "1348: <tr><td>LogInfo</td><td>LogInfo(str:string|boolean,...):void </td><td>Debug logging command.</td></tr>",
          "1349: <tr><td>LogTest</td><td>LogTest(str:string|boolean,...):void </td><td>Debug logging command.</td></tr>",
          "1350: <tr><td>LogTrace</td><td>LogTrace(str:string|boolean,...):void </td><td>Debug logging command.</td></tr>",
          "1351: <tr><td>LogWarn</td><td>LogWarn(str:string|boolean,...):void </td><td>Debug logging command.</td></tr>",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "61adbeff58471ccfb200d7c3d912a1c29649b234",
      "candidate_info": {
        "commit_hash": "61adbeff58471ccfb200d7c3d912a1c29649b234",
        "repo": "pcmacdon/jsish",
        "commit_url": "https://github.com/pcmacdon/jsish/commit/61adbeff58471ccfb200d7c3d912a1c29649b234",
        "files": [
          "lib/Jsish.jsi",
          "src/jsi.h",
          "src/jsiArray.c",
          "src/jsiMySql.c",
          "src/jsiValue.c",
          "src/parser.y",
          "tests/arrow.jsi",
          "tools/protos.jsi"
        ],
        "message": "Release \"3.0.12\": Fix arrow functions used as function arguments.\n\nFossilOrigin-Name: 8705476ca450a3929a5b9a8caf83d34695a527ddb33ba0ce3d6c7c5deff2244b",
        "before_after_code_files": [
          "lib/Jsish.jsi||lib/Jsish.jsi",
          "src/jsi.h||src/jsi.h",
          "src/jsiArray.c||src/jsiArray.c",
          "src/jsiMySql.c||src/jsiMySql.c",
          "src/jsiValue.c||src/jsiValue.c",
          "src/parser.y||src/parser.y",
          "tests/arrow.jsi||tests/arrow.jsi",
          "tools/protos.jsi||tools/protos.jsi"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/jsi.h||src/jsi.h",
            "src/jsiMySql.c||src/jsiMySql.c",
            "src/jsiValue.c||src/jsiValue.c"
          ],
          "candidate": [
            "src/jsi.h||src/jsi.h",
            "src/jsiMySql.c||src/jsiMySql.c",
            "src/jsiValue.c||src/jsiValue.c"
          ]
        }
      },
      "candidate_diff": {
        "lib/Jsish.jsi||lib/Jsish.jsi": [
          "File: lib/Jsish.jsi -> lib/Jsish.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "306:     return false;",
          "307: }",
          "309: function Jsi__Init() {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "309: function Jsi_TableObj(db:userobj, table:string, data:object, conf:object=void) {",
          "310:     var self = {};",
          "311:     var options = {",
          "312:         noCreate    :false,     // Create table, if not exists.",
          "313:         objOpts     :{},        // Options for objOpts",
          "314:         verbose     :false",
          "315:     };",
          "316:     parseOpts(self, options, conf);",
          "317:     var cols = db.query('PRAGMA table_info(\"'+table+'\")');",
          "318:     if (!cols.length) {",
          "319:         if (!self.noCreate)",
          "320:             db.query(\"CREATE TABLE '\"+table+\"' %s\", {objName:'data'});",
          "321:         return true;",
          "322:     }",
          "323:     var oo = self.objOpts;",
          "324:     oo.getSql = true;",
          "326:     var cs = db.onecolumn(\"SELECT sql from sqlite_master where type='table' and name=@table\").trim();",
          "327:     var fs = db.query(\"CREATE TABLE '\"+table+\"' %s\", {objName:'data', objOpts:oo}).trim();",
          "328:     if (fs === cs)",
          "329:         return true;",
          "330:     var f = fs.substr( fs.indexOf('(')+1, fs.length-1));",
          "331:     var c = cs.substr( cs.indexOf('(')+1, cs.length-1));",
          "332:     var fl = f.split(',[').sort(), cl = c.split(',[').sort();",
          "333:     if (fl.join(',[') == cl.join(',[')",
          "334:         return true;",
          "335:     var cln = cl.length, fln=fl.length;",
          "336:     if (cln >= fln) {",
          "337:         LogWarn('Can not sync obj with fewer fields than table: \"'+table+'\"')",
          "338:         return false;",
          "339:     }",
          "340:     var ci = 0, fi = 0;",
          "341:     while (cl<cln && fi<fln) {",
          "342:         if (cl[ci] === fl[fi]) {",
          "343:             ci++; fi++; continue;",
          "344:         }",
          "345:         var cn = cl[ci].substr(0, cl[ci].indexOf(']')-1),",
          "346:             fn = fl[fi].substr(0, fl[fi].indexOf(']')-1);",
          "347:     }",
          "348:     for (var i in data) {",
          "349:         if (cl[i]) continue;",
          "350:         var rec = s.substr( s.indexOf(','+i+' '));",
          "351:         if (!rec) throw('failed to find schema: '+i);",
          "352:         rec = rec.substr(1);",
          "353:         var re = rec.indexOf(',');",
          "354:         if (rec[re+1] == ' ' && ((re = rec.indexOf(')', re))>=0))",
          "355:             re = rec.indexOf(',', re);",
          "356:         rec = rec.substr(0, re);",
          "357:         var sql = 'ALTER TABLE \"'+table+'\" ADD COLUMN '+rec;",
          "358:         puts(\"RR: \",sql);",
          "359:         if (self.verbose)",
          "360:             LogInfo('SCHEMA:',sql);",
          "361:         db.eval(sql);",
          "362:         cl[i] = rec;",
          "363:     }",
          "365:     return false;",
          "366: }",
          "",
          "---------------"
        ],
        "src/jsi.h||src/jsi.h": [
          "File: src/jsi.h -> src/jsi.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #define JSI_VERSION_MAJOR   3",
          "6: #define JSI_VERSION_MINOR   0",
          "9: #define JSI_VERSION (JSI_VERSION_MAJOR + ((Jsi_Number)JSI_VERSION_MINOR/100.0) + ((Jsi_Number)JSI_VERSION_RELEASE/10000.0))",
          "",
          "[Removed Lines]",
          "7: #define JSI_VERSION_RELEASE 11",
          "",
          "[Added Lines]",
          "7: #define JSI_VERSION_RELEASE 12",
          "",
          "---------------"
        ],
        "src/jsiArray.c||src/jsiArray.c": [
          "File: src/jsiArray.c -> src/jsiArray.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "373:     if (!Jsi_ValueIsFunction(interp, func))",
          "374:         return Jsi_LogError(\"expected function\");",
          "375:     sthis = Jsi_ValueArrayIndex(interp, args, 1);",
          "378:     obj = _this->d.obj;",
          "379:     curlen = jsi_SizeOfArray(interp, obj);",
          "380:     Jsi_ObjListifyArray(interp, obj);",
          "",
          "[Removed Lines]",
          "376:     if (!sthis)",
          "377:         sthis = nthis = Jsi_ValueNew1(interp);",
          "",
          "[Added Lines]",
          "376:     if (!sthis || !Jsi_ValueIsObjType(interp, sthis, JSI_OT_OBJECT)) {",
          "377:         sthis = nthis = Jsi_ValueNewObj(interp, NULL);",
          "378:         Jsi_IncrRefCount(interp, sthis);",
          "379:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "432:     if (!Jsi_ValueIsFunction(interp, func))",
          "433:         return Jsi_LogError(\"expected function\");",
          "434:     sthis = Jsi_ValueArrayIndex(interp, args, 1);",
          "437:     obj = _this->d.obj;",
          "438:     curlen = jsi_SizeOfArray(interp, obj);",
          "439:     Jsi_ObjListifyArray(interp, obj);",
          "",
          "[Removed Lines]",
          "435:     if (!sthis)",
          "436:         sthis = nthis = Jsi_ValueNew1(interp);",
          "",
          "[Added Lines]",
          "437:     if (!sthis || !Jsi_ValueIsObjType(interp, sthis, JSI_OT_OBJECT)) {",
          "438:         sthis = nthis = Jsi_ValueNewObj(interp, NULL);",
          "439:         Jsi_IncrRefCount(interp, sthis);",
          "440:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "494:     Jsi_Obj *obj;",
          "495:     Jsi_Value *tval, *nthis = NULL, *sthis = Jsi_ValueArrayIndex(interp, args, 1);",
          "499:     obj = _this->d.obj;",
          "500:     Jsi_ObjListifyArray(interp, obj);",
          "501:     m = obj->arrCnt/2;",
          "",
          "[Removed Lines]",
          "497:     if (!sthis)",
          "498:         sthis = nthis = Jsi_ValueNew1(interp);",
          "",
          "[Added Lines]",
          "501:     if (!sthis || !Jsi_ValueIsObjType(interp, sthis, JSI_OT_OBJECT)) {",
          "502:         sthis = nthis = Jsi_ValueNewObj(interp, NULL);",
          "503:         Jsi_IncrRefCount(interp, sthis);",
          "504:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "523:         return Jsi_LogError(\"expected function\");",
          "524:     Jsi_Value *sthis = Jsi_ValueArrayIndex(interp, args, 1);",
          "525:     Jsi_Value *nthis = NULL;",
          "529:     obj = _this->d.obj;",
          "530:     Jsi_ObjListifyArray(interp, obj);",
          "",
          "[Removed Lines]",
          "526:     if (!sthis)",
          "527:         sthis = nthis = Jsi_ValueNew1(interp);",
          "",
          "[Added Lines]",
          "532:     if (!sthis || !Jsi_ValueIsObjType(interp, sthis, JSI_OT_OBJECT)) {",
          "533:         sthis = nthis = Jsi_ValueNewObj(interp, NULL);",
          "534:         Jsi_IncrRefCount(interp, sthis);",
          "535:     }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "562:     if (!Jsi_ValueIsFunction(interp, func))",
          "563:         return Jsi_LogError(\"expected function\");",
          "564:     Jsi_Value *nthis = NULL;",
          "568:     obj = _this->d.obj;",
          "569:     Jsi_ObjListifyArray(interp, obj);",
          "",
          "[Removed Lines]",
          "565:     if (!sthis)",
          "566:         sthis = nthis = Jsi_ValueNew1(interp);",
          "",
          "[Added Lines]",
          "573:     if (!sthis || !Jsi_ValueIsObjType(interp, sthis, JSI_OT_OBJECT)) {",
          "574:         sthis = nthis = Jsi_ValueNewObj(interp, NULL);",
          "575:         Jsi_IncrRefCount(interp, sthis);",
          "576:     }",
          "",
          "---------------"
        ],
        "src/jsiMySql.c||src/jsiMySql.c": [
          "File: src/jsiMySql.c -> src/jsiMySql.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1628:             goto bail;",
          "1629:         zSql = Jsi_DSValue(&eStr);",
          "1630:     }",
          "1631:     if (!opts.separator) {",
          "1632:         switch (opts.mode) {",
          "1633:             case _mdb_EF_LIST: opts.separator = \"|\"; break;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1631:     if ((opts.objOpts&OBJMODE_SQLONLY)) {",
          "1632:         if (opts.objName)",
          "1633:             Jsi_ValueMakeStringDup(interp, ret, zSql);",
          "1634:         else",
          "1635:             rc = Jsi_LogError(\"'objOpts.sqlOnly' can only be used with 'objName'\");",
          "1636:         goto bail;",
          "1637:     }",
          "",
          "---------------"
        ],
        "src/jsiValue.c||src/jsiValue.c": [
          "File: src/jsiValue.c -> src/jsiValue.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "702:     switch(v->vt) {",
          "703:         case JSI_VT_UNDEF:",
          "704:         case JSI_VT_NULL:",
          "709:             o->d.num = 0;",
          "710:             o->ot = JSI_OT_NUMBER;",
          "711:             o->__proto__ = interp->Number_prototype;",
          "",
          "[Removed Lines]",
          "705:             if (interp->strict) {",
          "706:                 Jsi_LogError(\"converting a undefined/null value to object\");",
          "707:                 rc = JSI_ERROR;",
          "708:             }",
          "",
          "[Added Lines]",
          "705:             if (interp->strict)",
          "706:                 rc = Jsi_LogError(\"converting a undefined/null value to object\");",
          "",
          "---------------"
        ],
        "src/parser.y||src/parser.y": [
          "File: src/parser.y -> src/parser.y",
          "--- Hunk 1 ---",
          "[Context before]",
          "605:     }",
          "606:     | '(' expr ')'          { $$ = $2; }",
          "607:     | arrowargs ARROW expr %prec MIN_PRI {",
          "608:         $$ = code_push_func(pstate,  &@1, jsi_FuncMake(pstate, $1, codes_join($3, code_ret(pstate, &@3, 1)), &@1, NULL, 1));",
          "609:     }",
          "610:     | arrowargs ARROW func_statement_block {",
          "611:         $$ = code_push_func(pstate,  &@1, jsi_FuncMake(pstate, $1, $3, &@1, NULL, 1));",
          "612:     }",
          "613:     | expr AND expr         {",
          "614:         Jsi_OpCodes *expr2 = codes_join(code_pop(1), $3);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "608:         jsi_PstatePush(pstate);",
          "610:         jsi_PstatePop(pstate);",
          "613:         jsi_PstatePush(pstate);",
          "615:         jsi_PstatePop(pstate);",
          "",
          "---------------"
        ],
        "tests/arrow.jsi||tests/arrow.jsi": [
          "File: tests/arrow.jsi -> tests/arrow.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: var array1, n = 0;;",
          "2: array1 = [1, 4, 9, 16];",
          "4: ;array1.map(function(x) { return x * 2; });",
          "6: ;array1.map(x => { return x * 2; });",
          "7: ;array1.map(x => x * 2);",
          "8: ;array1.map((x,y) => { return x * 2; });",
          "9: ;array1.map((x,y,z) => { return x * 2; });",
          "10: ;array1.map((x,y) => x * 2);",
          "11: ;array1.map((x,y,z) => x * 2);",
          "12: ;array1.map(() => n++ * 2);",
          "13: ;array1.map(() => { return n++ * 2; });",
          "15: var x = [1,2,3];",
          "16: var y = [1,2,3,4];",
          "17: ;y.filter( (n,m,x) => x.includes(n) );",
          "18: ;y.filter( n => x.includes(n) );",
          "19: ;y.filter( n => { return x.includes(n); } );",
          "20: ;y.filter( function(n) { return x.includes(n); } );",
          "24: =!EXPECTSTART!=",
          "25: array1.map(function(x) { return x * 2; }) ==> [ 2, 8, 18, 32 ]",
          "26: array1.map(x => { return x * 2; }) ==> [ 2, 8, 18, 32 ]",
          "27: array1.map(x => x * 2) ==> [ 2, 8, 18, 32 ]",
          "28: array1.map((x,y) => { return x * 2; }) ==> [ 2, 8, 18, 32 ]",
          "29: array1.map((x,y,z) => { return x * 2; }) ==> [ 2, 8, 18, 32 ]",
          "30: array1.map((x,y) => x * 2) ==> [ 2, 8, 18, 32 ]",
          "31: array1.map((x,y,z) => x * 2) ==> [ 2, 8, 18, 32 ]",
          "32: array1.map(() => n++ * 2) ==> [ 0, 2, 4, 6 ]",
          "33: array1.map(() => { return n++ * 2; }) ==> [ 8, 10, 12, 14 ]",
          "34: y.filter( (n,m,x) => x.includes(n) ) ==> [ 1, 2, 3, 4 ]",
          "35: y.filter( n => x.includes(n) ) ==> [ 1, 2, 3 ]",
          "36: y.filter( n => { return x.includes(n); } ) ==> [ 1, 2, 3 ]",
          "37: y.filter( function(n) { return x.includes(n); } ) ==> [ 1, 2, 3 ]",
          "38: =!EXPECTEND!=",
          "",
          "---------------"
        ],
        "tools/protos.jsi||tools/protos.jsi": [
          "File: tools/protos.jsi -> tools/protos.jsi"
        ]
      }
    },
    {
      "candidate_hash": "48a6f1ac3aeb66f7fd334e450b1d337977c4b855",
      "candidate_info": {
        "commit_hash": "48a6f1ac3aeb66f7fd334e450b1d337977c4b855",
        "repo": "pcmacdon/jsish",
        "commit_url": "https://github.com/pcmacdon/jsish/commit/48a6f1ac3aeb66f7fd334e450b1d337977c4b855",
        "files": [
          "README.md",
          "src/jsi.h",
          "src/jsiEval.c",
          "src/jsiInt.h",
          "src/jsiMySql.c",
          "src/jsiSqlite.c",
          "src/jsiStubs.h",
          "src/jsiUtils.c",
          "tools/protos.jsi"
        ],
        "message": "Release \"3.0.45\": cleanup\n\nFossilOrigin-Name: aebfb1551c6d83baa6c64be7c1bf0bb1142cc895869b50a77f2b75335370d2f3",
        "before_after_code_files": [
          "src/jsi.h||src/jsi.h",
          "src/jsiEval.c||src/jsiEval.c",
          "src/jsiInt.h||src/jsiInt.h",
          "src/jsiMySql.c||src/jsiMySql.c",
          "src/jsiSqlite.c||src/jsiSqlite.c",
          "src/jsiStubs.h||src/jsiStubs.h",
          "src/jsiUtils.c||src/jsiUtils.c",
          "tools/protos.jsi||tools/protos.jsi"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/jsi.h||src/jsi.h",
            "src/jsiEval.c||src/jsiEval.c",
            "src/jsiMySql.c||src/jsiMySql.c",
            "src/jsiSqlite.c||src/jsiSqlite.c",
            "src/jsiUtils.c||src/jsiUtils.c"
          ],
          "candidate": [
            "src/jsi.h||src/jsi.h",
            "src/jsiEval.c||src/jsiEval.c",
            "src/jsiMySql.c||src/jsiMySql.c",
            "src/jsiSqlite.c||src/jsiSqlite.c",
            "src/jsiUtils.c||src/jsiUtils.c"
          ]
        }
      },
      "candidate_diff": {
        "src/jsi.h||src/jsi.h": [
          "File: src/jsi.h -> src/jsi.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #define JSI_VERSION_MAJOR   3",
          "6: #define JSI_VERSION_MINOR   0",
          "9: #define JSI_VERSION (JSI_VERSION_MAJOR + ((Jsi_Number)JSI_VERSION_MINOR/100.0) + ((Jsi_Number)JSI_VERSION_RELEASE/10000.0))",
          "",
          "[Removed Lines]",
          "7: #define JSI_VERSION_RELEASE 44",
          "",
          "[Added Lines]",
          "7: #define JSI_VERSION_RELEASE 45",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1252: #ifndef JSI_EXT_OPTS_OMIT",
          "1261: #else",
          "1262: #define Jsi_LogBugExt(fmt,...)",
          "1263: #define Jsi_LogErrorExt(fmt,...)",
          "",
          "[Removed Lines]",
          "1243: #define Jsi_LogBug(fmt,...)   Jsi_LogMsgExt(interp, NULL, JSI_LOG_BUG, fmt, ##__VA_ARGS__)",
          "1244: #define Jsi_LogError(fmt,...) Jsi_LogMsgExt(interp, NULL, JSI_LOG_ERROR, fmt, ##__VA_ARGS__)",
          "1245: #define Jsi_LogParse(fmt,...) Jsi_LogMsgExt(interp, NULL, JSI_LOG_PARSE, fmt, ##__VA_ARGS__)",
          "1246: #define Jsi_LogWarn(fmt,...)  Jsi_LogMsgExt(interp, NULL, JSI_LOG_WARN, fmt, ##__VA_ARGS__)",
          "1247: #define Jsi_LogInfo(fmt,...)  Jsi_LogMsgExt(interp, NULL, JSI_LOG_INFO, fmt, ##__VA_ARGS__)",
          "1248: #define Jsi_LogDebug(fmt,...) Jsi_LogMsgExt(interp, NULL, JSI_LOG_DEBUG, fmt, ##__VA_ARGS__)",
          "1249: #define Jsi_LogTrace(fmt,...) Jsi_LogMsgExt(interp, NULL, JSI_LOG_TRACE, fmt, ##__VA_ARGS__)",
          "1250: #define Jsi_LogTest(fmt,...)  Jsi_LogMsgExt(interp, NULL, JSI_LOG_TEST, fmt, ##__VA_ARGS__)",
          "1253: #define Jsi_LogBugExt(fmt,...)   Jsi_LogMsgExt(interp, JSI_EXT_OPTS, JSI_LOG_BUG, fmt, ##__VA_ARGS__)",
          "1254: #define Jsi_LogErrorExt(fmt,...) Jsi_LogMsgExt(interp, JSI_EXT_OPTS, JSI_LOG_ERROR, fmt, ##__VA_ARGS__)",
          "1255: #define Jsi_LogParseExt(fmt,...) Jsi_LogMsgExt(interp, JSI_EXT_OPTS, JSI_LOG_PARSE, fmt, ##__VA_ARGS__)",
          "1256: #define Jsi_LogWarnExt(fmt,...)  Jsi_LogMsgExt(interp, JSI_EXT_OPTS, JSI_LOG_WARN, fmt, ##__VA_ARGS__)",
          "1257: #define Jsi_LogInfoExt(fmt,...)  Jsi_LogMsgExt(interp, JSI_EXT_OPTS, JSI_LOG_INFO, fmt, ##__VA_ARGS__)",
          "1258: #define Jsi_LogDebugExt(fmt,...) Jsi_LogMsgExt(interp, JSI_EXT_OPTS, JSI_LOG_DEBUG, fmt, ##__VA_ARGS__)",
          "1259: #define Jsi_LogTraceExt(fmt,...) Jsi_LogMsgExt(interp, JSI_EXT_OPTS, JSI_LOG_TRACE, fmt, ##__VA_ARGS__)",
          "1260: #define Jsi_LogTestExt(fmt,...)  Jsi_LogMsgExt(interp, JSI_EXT_OPTS, JSI_LOG_TEST, fmt, ##__VA_ARGS__)",
          "",
          "[Added Lines]",
          "1243: #define Jsi_LogBug(fmt,...)   Jsi_LogMsg(interp, NULL, JSI_LOG_BUG, fmt, ##__VA_ARGS__)",
          "1244: #define Jsi_LogError(fmt,...) Jsi_LogMsg(interp, NULL, JSI_LOG_ERROR, fmt, ##__VA_ARGS__)",
          "1245: #define Jsi_LogParse(fmt,...) Jsi_LogMsg(interp, NULL, JSI_LOG_PARSE, fmt, ##__VA_ARGS__)",
          "1246: #define Jsi_LogWarn(fmt,...)  Jsi_LogMsg(interp, NULL, JSI_LOG_WARN, fmt, ##__VA_ARGS__)",
          "1247: #define Jsi_LogInfo(fmt,...)  Jsi_LogMsg(interp, NULL, JSI_LOG_INFO, fmt, ##__VA_ARGS__)",
          "1248: #define Jsi_LogDebug(fmt,...) Jsi_LogMsg(interp, NULL, JSI_LOG_DEBUG, fmt, ##__VA_ARGS__)",
          "1249: #define Jsi_LogTrace(fmt,...) Jsi_LogMsg(interp, NULL, JSI_LOG_TRACE, fmt, ##__VA_ARGS__)",
          "1250: #define Jsi_LogTest(fmt,...)  Jsi_LogMsg(interp, NULL, JSI_LOG_TEST, fmt, ##__VA_ARGS__)",
          "1253: #define Jsi_LogBugExt(fmt,...)   Jsi_LogMsg(interp, JSI_EXT_OPTS, JSI_LOG_BUG, fmt, ##__VA_ARGS__)",
          "1254: #define Jsi_LogErrorExt(fmt,...) Jsi_LogMsg(interp, JSI_EXT_OPTS, JSI_LOG_ERROR, fmt, ##__VA_ARGS__)",
          "1255: #define Jsi_LogParseExt(fmt,...) Jsi_LogMsg(interp, JSI_EXT_OPTS, JSI_LOG_PARSE, fmt, ##__VA_ARGS__)",
          "1256: #define Jsi_LogWarnExt(fmt,...)  Jsi_LogMsg(interp, JSI_EXT_OPTS, JSI_LOG_WARN, fmt, ##__VA_ARGS__)",
          "1257: #define Jsi_LogInfoExt(fmt,...)  Jsi_LogMsg(interp, JSI_EXT_OPTS, JSI_LOG_INFO, fmt, ##__VA_ARGS__)",
          "1258: #define Jsi_LogDebugExt(fmt,...) Jsi_LogMsg(interp, JSI_EXT_OPTS, JSI_LOG_DEBUG, fmt, ##__VA_ARGS__)",
          "1259: #define Jsi_LogTraceExt(fmt,...) Jsi_LogMsg(interp, JSI_EXT_OPTS, JSI_LOG_TRACE, fmt, ##__VA_ARGS__)",
          "1260: #define Jsi_LogTestExt(fmt,...)  Jsi_LogMsg(interp, JSI_EXT_OPTS, JSI_LOG_TEST, fmt, ##__VA_ARGS__)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1269: #define Jsi_LogTestExt(fmt,...)",
          "1270: #endif",
          "1275: typedef struct {",
          "",
          "[Removed Lines]",
          "1272: JSI_EXTERN Jsi_RC Jsi_LogMsgExt(Jsi_Interp *interp, Jsi_PkgOpts* popts, uint level, const char *format,...)  /*STUB = 348*/ __attribute__((format (printf,4, 5)));",
          "",
          "[Added Lines]",
          "1272: JSI_EXTERN Jsi_RC Jsi_LogMsg(Jsi_Interp *interp, Jsi_PkgOpts* popts, uint level, const char *format,...)  /*STUB = 348*/ __attribute__((format (printf,4, 5)));",
          "",
          "---------------"
        ],
        "src/jsiEval.c||src/jsiEval.c": [
          "File: src/jsiEval.c -> src/jsiEval.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "935: {",
          "936:     Jsi_RC rc = JSI_OK;",
          "937:     uint flags = (uintptr_t)ip->data, right_val = flags&1; // isident=flags&2;",
          "941:     jsiVarDeref(interp,2);",
          "1004:             goto done;",
          "1005:         }",
          "1008:         int bLen, cLen;",
          "1009:         char bbuf[10], *cp = Jsi_ValueString(interp, src, &bLen);",
          "1010:         int n = (int)idx->d.num;",
          "",
          "[Removed Lines]",
          "938:     Jsi_String *str = NULL;",
          "939:     Jsi_Obj *obj = NULL;",
          "940:     int bsc, arrayindex = -1;",
          "942:     if (idx->vt == JSI_VT_NUMBER && Jsi_NumberIsInteger(idx->d.num) && idx->d.num >= 0)",
          "943:         arrayindex = (int)idx->d.num;",
          "945:     switch (src->vt) {",
          "946:         case JSI_VT_NULL:",
          "947:             rc = Jsi_LogError(\"invalid null subscript\");",
          "948:             break;",
          "949:         case JSI_VT_UNDEF:",
          "950:             rc = Jsi_LogError(\"invalid undefined subscript\");",
          "951:             break;",
          "954:         case JSI_VT_STRING:",
          "955:             str = &src->d.s;",
          "956:             break;",
          "957:         case JSI_VT_OBJECT:",
          "958:             obj = src->d.obj;",
          "959:             switch (obj->ot) {",
          "960:                 case JSI_OT_STRING:",
          "961:                     str = &obj->d.s;",
          "962:                     break;",
          "963:                 case JSI_OT_OBJECT:",
          "964:                     if (obj->freeze && obj->freezeReadCheck) {",
          "965:                         Jsi_Value *v;",
          "966:                         char keyBuf[100], *keyStr = keyBuf;",
          "967:                         if (arrayindex>=0)",
          "968:                             snprintf(keyBuf, sizeof(keyBuf), \"%d\", arrayindex);",
          "969:                         else",
          "970:                             keyStr = Jsi_ValueString(interp, idx, NULL);",
          "971:                         if (!keyStr || !(v = Jsi_ValueObjLookup(interp, src, keyStr, 0))) {",
          "972:                             rc = Jsi_LogError(\"frozen read undefined key: %s\", keyStr);",
          "973:                         }",
          "974:                     }",
          "975:                     break;",
          "976:                 default:",
          "977:                     break;",
          "978:             }",
          "979:             break;",
          "980:         default:",
          "981:             break;",
          "982:     }",
          "983:     if (rc != JSI_OK)",
          "984:         goto done;",
          "987:         const char *keyStr = Jsi_ValueString(interp, idx, NULL);",
          "988:         Jsi_Value *vp = Jsi_ValueObjLookup(interp, src, keyStr, 0);",
          "989:         if (vp) {",
          "992:             if (right_val || vp->f.bits.readonly) {",
          "993:                 if (vp->vt == JSI_VT_OBJECT || vp->vt == JSI_VT_STRING)  // TODO:*** Undo using ValueCopy. ***",
          "994:                     Jsi_ValueMove(interp, src, vp);",
          "995:                 else",
          "996:                     Jsi_ValueCopy(interp, src, vp);",
          "997:             } else {",
          "998:                 Jsi_Value res = VALINIT;",
          "999:                 res.vt = JSI_VT_VARIABLE;",
          "1000:                 res.d.lval = vp;",
          "1001:                 Jsi_ValueCopy(interp, src, &res);",
          "1002:             }",
          "1007:     if (str && Jsi_ValueIsNumber(interp, idx)) { // eg. \"abc\"[1]",
          "",
          "[Added Lines]",
          "939:     Jsi_String *str = jsi_ValueString(src);",
          "940:     Jsi_Obj *obj = (src->vt==JSI_VT_OBJECT && src->d.obj->ot == JSI_OT_OBJECT?src->d.obj:NULL);",
          "941:     int bsc, arrayindex = (idx->vt == JSI_VT_NUMBER && Jsi_NumberIsInteger(idx->d.num) && idx->d.num >= 0) ?  (int)idx->d.num : -1;",
          "943:     if (obj && obj->freeze && obj->freezeReadCheck) {",
          "944:         Jsi_Value *v;",
          "945:         char keyBuf[100], *keyStr = keyBuf;",
          "946:         if (arrayindex>=0)",
          "947:             snprintf(keyBuf, sizeof(keyBuf), \"%d\", arrayindex);",
          "948:         else",
          "949:             keyStr = Jsi_ValueString(interp, idx, NULL);",
          "950:         if (!keyStr || !(v = Jsi_ValueObjLookup(interp, src, keyStr, 0))) {",
          "951:             rc = Jsi_LogError(\"frozen read undefined key: %s\", keyStr);",
          "954:     }",
          "956:     if (str && Jsi_ValueIsNumber(interp, idx)) { // String index, eg. \"abc\"[1]",
          "",
          "---------------"
        ],
        "src/jsiInt.h||src/jsiInt.h": [
          "File: src/jsiInt.h -> src/jsiInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "259:     JSI_SIG_NAMEDATA",
          "260: } jsi_Sig;",
          "263: extern const char *jsi_LogCodes[], *jsi_LogCodesU[];",
          "264: extern uint jsi_GetLogFlag(Jsi_Interp *interp, uint mask, Jsi_PkgOpts* popts);",
          "",
          "[Removed Lines]",
          "262: #define Jsi_LogType(fmt,...) Jsi_LogMsgExt(interp, NULL, (interp->typeCheck.strict || interp->typeCheck.error)?JSI_LOG_ERROR:JSI_LOG_WARN, fmt, ##__VA_ARGS__)",
          "",
          "[Added Lines]",
          "262: #define Jsi_LogType(fmt,...) Jsi_LogMsg(interp, NULL, (interp->typeCheck.strict || interp->typeCheck.error)?JSI_LOG_ERROR:JSI_LOG_WARN, fmt, ##__VA_ARGS__)",
          "",
          "---------------"
        ],
        "src/jsiMySql.c||src/jsiMySql.c": [
          "File: src/jsiMySql.c -> src/jsiMySql.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1042: errout:",
          "1043:                  {",
          "1044:                     int ltyp = (jdb->optPtr->typeCheck==mdbTypeCheck_Error?JSI_LOG_ERROR:JSI_LOG_WARN);",
          "1046:                     if (ltyp == JSI_LOG_ERROR)",
          "1047:                         return JSI_ERROR;",
          "1048:                 }",
          "",
          "[Removed Lines]",
          "1045:                     Jsi_LogMsgExt(interp, JSI_EXT_OPTS, ltyp, \"bind param \\\"%s\\\" type is not \\\"%s\\\"\", zVar, tname);",
          "",
          "[Added Lines]",
          "1045:                     Jsi_LogMsg(interp, JSI_EXT_OPTS, ltyp, \"bind param \\\"%s\\\" type is not \\\"%s\\\"\", zVar, tname);",
          "",
          "---------------"
        ],
        "src/jsiSqlite.c||src/jsiSqlite.c": [
          "File: src/jsiSqlite.c -> src/jsiSqlite.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "923:                 }",
          "924:                 if (cast == 0 && match == 0) {",
          "925:                     int ltyp = (db->optPtr->typeCheck==dbTypeCheck_Error?JSI_LOG_ERROR:JSI_LOG_WARN);",
          "927:                     if (ltyp == JSI_LOG_ERROR)",
          "928:                         return JSI_ERROR;",
          "929:                 }",
          "",
          "[Removed Lines]",
          "926:                     Jsi_LogMsgExt(interp, JSI_EXT_OPTS, ltyp, \"bind param \\\"%s\\\" type is not \\\"%s\\\"\", zVar, tname);",
          "",
          "[Added Lines]",
          "926:                     Jsi_LogMsg(interp, JSI_EXT_OPTS, ltyp, \"bind param \\\"%s\\\" type is not \\\"%s\\\"\", zVar, tname);",
          "",
          "---------------"
        ],
        "src/jsiStubs.h||src/jsiStubs.h": [
          "File: src/jsiStubs.h -> src/jsiStubs.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #endif",
          "10: #undef JSI_EXTENSION_INI",
          "11: #define JSI_EXTENSION_INI Jsi_Stubs *jsiStubsPtr = NULL;",
          "",
          "[Removed Lines]",
          "8: #define JSI_STUBS_MD5 \"b43953bc9ba7fc791f74958478337968\"",
          "",
          "[Added Lines]",
          "8: #define JSI_STUBS_MD5 \"e35b4e29ea6f2aaf56ee9eb4618c25f2\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "376:     Jsi_Mutex*(*_Jsi_MutexNew)(Jsi_Interp *interp, int timeout, int flags);",
          "377:     void*(*_Jsi_CurrentThread)(void);",
          "378:     void*(*_Jsi_InterpThread)(Jsi_Interp *interp);",
          "380:     Jsi_Event*(*_Jsi_EventNew)(Jsi_Interp *interp, Jsi_EventHandlerProc *callback, void* data);",
          "381:     void(*_Jsi_EventFree)(Jsi_Interp *interp, Jsi_Event* event);",
          "382:     int(*_Jsi_EventProcess)(Jsi_Interp *interp, int maxEvents);",
          "",
          "[Removed Lines]",
          "379:     Jsi_RC(*_Jsi_LogMsgExt)(Jsi_Interp *interp, Jsi_PkgOpts* popts, uint level, const char *format,...);",
          "",
          "[Added Lines]",
          "379:     Jsi_RC(*_Jsi_LogMsg)(Jsi_Interp *interp, Jsi_PkgOpts* popts, uint level, const char *format,...);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "805:     Jsi_MutexNew,\\",
          "806:     Jsi_CurrentThread,\\",
          "807:     Jsi_InterpThread,\\",
          "809:     Jsi_EventNew,\\",
          "810:     Jsi_EventFree,\\",
          "811:     Jsi_EventProcess,\\",
          "",
          "[Removed Lines]",
          "808:     Jsi_LogMsgExt,\\",
          "",
          "[Added Lines]",
          "808:     Jsi_LogMsg,\\",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1230: #define Jsi_MutexNew(n0,n1,n2) JSISTUBCALL(jsiStubsPtr, _Jsi_MutexNew(n0,n1,n2))",
          "1231: #define Jsi_CurrentThread(n0) JSISTUBCALL(jsiStubsPtr, _Jsi_CurrentThread(n0))",
          "1232: #define Jsi_InterpThread(n0) JSISTUBCALL(jsiStubsPtr, _Jsi_InterpThread(n0))",
          "1234: #define Jsi_EventNew(n0,n1,n2) JSISTUBCALL(jsiStubsPtr, _Jsi_EventNew(n0,n1,n2))",
          "1235: #define Jsi_EventFree(n0,n1) JSISTUBCALL(jsiStubsPtr, _Jsi_EventFree(n0,n1))",
          "1236: #define Jsi_EventProcess(n0,n1) JSISTUBCALL(jsiStubsPtr, _Jsi_EventProcess(n0,n1))",
          "",
          "[Removed Lines]",
          "1233: #define Jsi_LogMsgExt(n0,n1,n2,n3,...) JSISTUBCALL(jsiStubsPtr, _Jsi_LogMsgExt(n0,n1,n2,n3,##__VA_ARGS__))",
          "",
          "[Added Lines]",
          "1233: #define Jsi_LogMsg(n0,n1,n2,n3,...) JSISTUBCALL(jsiStubsPtr, _Jsi_LogMsg(n0,n1,n2,n3,##__VA_ARGS__))",
          "",
          "---------------"
        ],
        "src/jsiUtils.c||src/jsiUtils.c": [
          "File: src/jsiUtils.c -> src/jsiUtils.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "73: jsi_IntData jsiIntData = {};",
          "75: #ifdef JSI_LITE_ONLY",
          "77:     va_list va;",
          "78:     va_start (va, format);",
          "79:     const char *mt = (code <= JSI__LOGLAST ? jsi_LogCodes[code] : \"\");",
          "",
          "[Removed Lines]",
          "76: Jsi_RC Jsi_LogMsgExt(Jsi_Interp *interp, Jsi_PkgOpts *popts, uint code, const char *format,...) {",
          "",
          "[Added Lines]",
          "76: Jsi_RC Jsi_LogMsg(Jsi_Interp *interp, Jsi_PkgOpts *popts, uint code, const char *format,...) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "128: static void (*logHook)(const char *buf, va_list va) = NULL;",
          "132:     if (!interp || Jsi_InterpGone(interp))",
          "133:         return JSI_ERROR;",
          "134:     bool isExt = 0, ftail = interp->logOpts.ftail;",
          "",
          "[Removed Lines]",
          "131: Jsi_RC Jsi_LogMsgExt(Jsi_Interp *interp, Jsi_PkgOpts* popts, uint code, const char *format,...) {",
          "",
          "[Added Lines]",
          "131: Jsi_RC Jsi_LogMsg(Jsi_Interp *interp, Jsi_PkgOpts* popts, uint code, const char *format,...) {",
          "",
          "---------------"
        ],
        "tools/protos.jsi||tools/protos.jsi": [
          "File: tools/protos.jsi -> tools/protos.jsi"
        ]
      }
    },
    {
      "candidate_hash": "8caeaac36871c7d8953c8f78b28ed883ce152aa7",
      "candidate_info": {
        "commit_hash": "8caeaac36871c7d8953c8f78b28ed883ce152aa7",
        "repo": "pcmacdon/jsish",
        "commit_url": "https://github.com/pcmacdon/jsish/commit/8caeaac36871c7d8953c8f78b28ed883ce152aa7",
        "files": [
          "md/Reference.md",
          "src/jsi.h",
          "src/jsiCmds.c",
          "src/jsiEval.c",
          "tools/protos.jsi",
          "www/reference.wiki"
        ],
        "message": "Release \"3.0.47\": source/import merge.\n\nFossilOrigin-Name: a116d3c3400cbeaf5257a3cc3cfe306701f366aebeedea328f7733eecb87e597",
        "before_after_code_files": [
          "src/jsi.h||src/jsi.h",
          "src/jsiCmds.c||src/jsiCmds.c",
          "src/jsiEval.c||src/jsiEval.c",
          "tools/protos.jsi||tools/protos.jsi",
          "www/reference.wiki||www/reference.wiki"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/jsi.h||src/jsi.h",
            "src/jsiCmds.c||src/jsiCmds.c",
            "src/jsiEval.c||src/jsiEval.c"
          ],
          "candidate": [
            "src/jsi.h||src/jsi.h",
            "src/jsiCmds.c||src/jsiCmds.c",
            "src/jsiEval.c||src/jsiEval.c"
          ]
        }
      },
      "candidate_diff": {
        "src/jsi.h||src/jsi.h": [
          "File: src/jsi.h -> src/jsi.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #define JSI_VERSION_MAJOR   3",
          "6: #define JSI_VERSION_MINOR   0",
          "9: #define JSI_VERSION (JSI_VERSION_MAJOR + ((Jsi_Number)JSI_VERSION_MINOR/100.0) + ((Jsi_Number)JSI_VERSION_RELEASE/10000.0))",
          "",
          "[Removed Lines]",
          "7: #define JSI_VERSION_RELEASE 46",
          "",
          "[Added Lines]",
          "7: #define JSI_VERSION_RELEASE 47",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "138:     JSI_EVAL_EXISTS         =0x80, // Source if exists.",
          "139:     JSI_EVAL_ERRIGNORE      =0x100,// Source ignores errors.",
          "140:     JSI_EVAL_NOEVAL         =0x200,// Source parses only.",
          "143:     JSI_CALL_CONSTRUCTOR    =0x1,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "141:     JSI_EVAL_IMPORT         =0x400,// Source closure.",
          "",
          "---------------"
        ],
        "src/jsiCmds.c||src/jsiCmds.c": [
          "File: src/jsiCmds.c -> src/jsiCmds.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "67: typedef struct {",
          "68:     bool trace;",
          "69:     bool once;",
          "70:     bool noError;",
          "71:     bool noEval;",
          "72:     bool autoIndex;",
          "74:     bool global;",
          "75:     bool exists;",
          "76:     uint level;",
          "",
          "[Removed Lines]",
          "73:     bool isMain;",
          "",
          "[Added Lines]",
          "70:     bool isMain;",
          "74:     bool import;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "80:     JSI_OPT(BOOL,   SourceData, autoIndex,  .help=\"Look for and load Jsi_Auto.jsi auto-index file\" ),",
          "81:     JSI_OPT(BOOL,   SourceData, exists, .help=\"Source file only if exists\" ),",
          "82:     JSI_OPT(BOOL,   SourceData, global, .help=\"File is to be sourced in global frame rather than local\" ),",
          "83:     JSI_OPT(BOOL,   SourceData, isMain, .help=\"Coerce to true the value of Info.isMain()\" ),",
          "84:     JSI_OPT(UINT,   SourceData, level,  .help=\"Frame to source file in\" ),",
          "85:     JSI_OPT(BOOL,   SourceData, noEval, .help=\"Disable eval: just parses file to check syntax\" ),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "84:     JSI_OPT(BOOL,   SourceData, import, .help=\"Wrap in a function closure\" ),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "90: };",
          "95: {",
          "96:     jsi_Pstate *ps = interp->ps;",
          "97:     Jsi_RC rc = JSI_OK;",
          "98:     int flags = 0;",
          "99:     int i, argc = 1;",
          "101:     Jsi_Value *v, *va = Jsi_ValueArrayIndex(interp, args, 0);",
          "102:     Jsi_Value *vo = Jsi_ValueArrayIndex(interp, args, 1);",
          "103:     if (vo) {",
          "105:             Jsi_LogError(\"arg2: expected object 'options'\");",
          "",
          "[Removed Lines]",
          "93: static Jsi_RC SysSourceCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "94:     Jsi_Value **ret, Jsi_Func *funcPtr)",
          "100:     SourceData data = {.trace = interp->debugOpts.includeTrace, .once = interp->debugOpts.includeOnce};",
          "",
          "[Added Lines]",
          "95: static Jsi_RC SysSourceCmdEx(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "96:     Jsi_Value **ret, Jsi_Func *funcPtr, bool isimp)",
          "102:     SourceData data = {",
          "103:         .trace = interp->debugOpts.includeTrace,",
          "104:         .once = interp->debugOpts.includeOnce,",
          "105:         .import = isimp",
          "106:     };",
          "109:     if (!va) return JSI_ERROR;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "121:         flags|= JSI_EVAL_ERRIGNORE;",
          "122:     if (data.noEval)",
          "123:         flags|= JSI_EVAL_NOEVAL;",
          "124:     if (data.global) {",
          "125:         flags|= JSI_EVAL_GLOBAL;",
          "126:         if (data.level)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "131:     if (data.import) {",
          "132:         flags|= JSI_EVAL_IMPORT;",
          "133:         if (va && Jsi_ValueIsArray(interp, va))",
          "134:             return Jsi_LogError(\"import can not use array of files\");",
          "135:     }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "164:     return rc;",
          "165: }",
          "167: static void jsiGetTime(long *seconds, long *milliseconds)",
          "168: {",
          "169:     struct timeval tv;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "179: static Jsi_RC SysSourceCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "180:     Jsi_Value **ret, Jsi_Func *funcPtr)",
          "181: {",
          "182:     return SysSourceCmdEx(interp, args, _this, ret, funcPtr, 0);",
          "183: }",
          "186: static Jsi_RC SysImportCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "187:     Jsi_Value **ret, Jsi_Func *funcPtr)",
          "188: {",
          "189:     return SysSourceCmdEx(interp, args, _this, ret, funcPtr, 1);",
          "190: }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "4958:     { \"exec\",       SysExecCmd,      1,  2, \"val:string, options:string|object=void\", .help=\"Execute an OS command\", .retType=(uint)JSI_TT_ANY, .flags=0, .info=FN_exec, .opts=ExecOptions},",
          "4959:     { \"exit\",       SysExitCmd,      0,  1, \"code:number=0\", .help=\"Exit the current interpreter\", .retType=(uint)JSI_TT_VOID },",
          "4960:     { \"format\",     SysFormatCmd,    1, -1, \"format:string, ...\", .help=\"Printf style formatting: adds %q and %S\", .retType=(uint)JSI_TT_STRING },",
          "4962:     { \"isFinite\",   isFiniteCmd,     1,  1, \"val\", .help=\"Return true if is a finite number\", .retType=(uint)JSI_TT_BOOLEAN },",
          "4963:     { \"isMain\",     InfoIsMainCmd,   0,  0, \"\", .help=\"Return true if current script was the main script invoked from command-line\", .retType=(uint)JSI_TT_BOOLEAN },",
          "4964:     { \"isNaN\",      isNaNCmd,        1,  1, \"val\", .help=\"Return true if not a number\", .retType=(uint)JSI_TT_BOOLEAN },",
          "",
          "[Removed Lines]",
          "4961:     { \"import\",     SysSourceCmd,    1,  2, \"val:string|array, options:object=void\",  .help=\"Same as source\", .retType=(uint)JSI_TT_ANY, .flags=0, .info=0, .opts=SourceOptions},",
          "",
          "[Added Lines]",
          "4986:     { \"import\",     SysImportCmd,    1,  2, \"file:string, options:object=void\",  .help=\"Same as source with {import:true}\", .retType=(uint)JSI_TT_ANY, .flags=0, .info=0, .opts=SourceOptions},",
          "",
          "---------------"
        ],
        "src/jsiEval.c||src/jsiEval.c": [
          "File: src/jsiEval.c -> src/jsiEval.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2341:             uint ilen;",
          "2342:             char buf[JSI_BUFSIZ*2];",
          "2343:             const char *jpp;",
          "2344:             while (cnt<MAX_LOOP_COUNT) {",
          "2345:                 if (!Jsi_Gets(interp, input, buf, sizeof(buf)))",
          "2346:                     break;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2344:             if (flags&JSI_EVAL_IMPORT)",
          "2345:                 Jsi_DSAppend(&dStr, \"return (function(){ \", NULL);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2374:             }",
          "2375:             if (cnt>=MAX_LOOP_COUNT)",
          "2376:                 Jsi_LogError(\"source file too large\");",
          "2377:             str = Jsi_DSValue(&dStr);",
          "2379:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2380:             if (flags&JSI_EVAL_IMPORT)",
          "2381:                 Jsi_DSAppend(&dStr, \"})(); \", NULL);",
          "",
          "---------------"
        ],
        "tools/protos.jsi||tools/protos.jsi": [
          "File: tools/protos.jsi -> tools/protos.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "302: System.prototype.exec = function(val:string, options:string|object=void):any {};",
          "303: System.prototype.exit = function(code:number=0):void {};",
          "304: System.prototype.format = function(format:string, ...):string {};",
          "306: System.prototype.isFinite = function(val):boolean {};",
          "307: System.prototype.isMain = function():boolean {};",
          "308: System.prototype.isNaN = function(val):boolean {};",
          "",
          "[Removed Lines]",
          "305: System.prototype.import = function(val:string|array, options:object=void):any {};",
          "",
          "[Added Lines]",
          "305: System.prototype.import = function(file:string, options:object=void):any {};",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "397: var exec = function(val:string, options:string|object=void):any {};",
          "398: var exit = function(code:number=0):void {};",
          "399: var format = function(format:string, ...):string {};",
          "401: var isFinite = function(val):boolean {};",
          "402: var isMain = function():boolean {};",
          "403: var isNaN = function(val):boolean {};",
          "",
          "[Removed Lines]",
          "400: var import = function(val:string|array, options:object=void):any {};",
          "",
          "[Added Lines]",
          "400: var import = function(file:string, options:object=void):any {};",
          "",
          "---------------"
        ],
        "www/reference.wiki||www/reference.wiki": [
          "File: www/reference.wiki -> www/reference.wiki",
          "--- Hunk 1 ---",
          "[Context before]",
          "1030: |exec|([options](#options-systemexec):string&#124;object=void) |Execute an OS command. If the command ends with '&', set the 'bg' option to true. The second argument can be a string, which is the same as setting the 'inputStr' option. By default, returns the string output, unless the 'bg', 'inputStr', 'retCode' or 'retAll' options are used|",
          "1031: |exit|(code:number=0):void |Exit the current interpreter.|",
          "1032: |format|(format:string, ...):string |Printf style formatting: adds %q and %S.|",
          "1034: |isFinite|(val):boolean |Return true if is a finite number.|",
          "1035: |isMain|():boolean |Return true if current script was the main script invoked from command-line.|",
          "1036: |isNaN|(val):boolean |Return true if not a number.|",
          "",
          "[Removed Lines]",
          "1033: |import|([options](#options-systemimport):object=void) |Same as source.|",
          "",
          "[Added Lines]",
          "1033: |import|([options](#options-systemimport):object=void) |Same as source with {import:true}.|",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1081: |autoIndex|*BOOL*|Look for and load Jsi_Auto.jsi auto-index file.||",
          "1082: |exists|*BOOL*|Source file only if exists.||",
          "1083: |global|*BOOL*|File is to be sourced in global frame rather than local.||",
          "1084: |isMain|*BOOL*|Coerce to true the value of Info.isMain().||",
          "1085: |level|*UINT*|Frame to source file in.||",
          "1086: |noEval|*BOOL*|Disable eval: just parses file to check syntax.||",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1084: |import|*BOOL*|Wrap in a function closure.||",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1115: |autoIndex|*BOOL*|Look for and load Jsi_Auto.jsi auto-index file.||",
          "1116: |exists|*BOOL*|Source file only if exists.||",
          "1117: |global|*BOOL*|File is to be sourced in global frame rather than local.||",
          "1118: |isMain|*BOOL*|Coerce to true the value of Info.isMain().||",
          "1119: |level|*UINT*|Frame to source file in.||",
          "1120: |noEval|*BOOL*|Disable eval: just parses file to check syntax.||",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1119: |import|*BOOL*|Wrap in a function closure.||",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2b62d3be72c3b11ec5cc91cdcfb00973107f9807",
      "candidate_info": {
        "commit_hash": "2b62d3be72c3b11ec5cc91cdcfb00973107f9807",
        "repo": "pcmacdon/jsish",
        "commit_url": "https://github.com/pcmacdon/jsish/commit/2b62d3be72c3b11ec5cc91cdcfb00973107f9807",
        "files": [
          "lib/DebugUI/html/main.htmli",
          "lib/SqliteUI/html/main.htmli",
          "lib/web/jsi.js",
          "src/jsi.h",
          "src/jsiFunc.c",
          "tools/protos.jsi"
        ],
        "message": "Release \"3.0.38\": jsi.js fix array warning\n\nFossilOrigin-Name: caad90672ef0d161fccc72177578f9e6d5af37bee5e7133ef4470788fe5d2ad0",
        "before_after_code_files": [
          "lib/DebugUI/html/main.htmli||lib/DebugUI/html/main.htmli",
          "lib/SqliteUI/html/main.htmli||lib/SqliteUI/html/main.htmli",
          "lib/web/jsi.js||lib/web/jsi.js",
          "src/jsi.h||src/jsi.h",
          "src/jsiFunc.c||src/jsiFunc.c",
          "tools/protos.jsi||tools/protos.jsi"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/jsi.h||src/jsi.h",
            "src/jsiFunc.c||src/jsiFunc.c"
          ],
          "candidate": [
            "src/jsi.h||src/jsi.h",
            "src/jsiFunc.c||src/jsiFunc.c"
          ]
        }
      },
      "candidate_diff": {
        "lib/DebugUI/html/main.htmli||lib/DebugUI/html/main.htmli": [
          "File: lib/DebugUI/html/main.htmli -> lib/DebugUI/html/main.htmli",
          "--- Hunk 1 ---",
          "[Context before]",
          "13: ?>",
          "14:   </head>",
          "15:   <body id=\"body\" onload=\"onload()\" style=\"display: flex; height: 97%; flex-direction: column; margin:3px\">",
          "16:     <div>",
          "17:       <button class=\"topmenu panel\" id=\"mainbut\" class=\"mainbuts\" onclick='TogglePanel(\"uibutton\",this)' title=\"Click to toggle menu visibility\">Jsi Debug-</button>",
          "18:       <div id=\"uibutton\" style=\"display: none;\">",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "16: <noscript>",
          "17: <h1>SORRY: THIS SITE REQUIRES JAVASCRIPT!!!</h1>",
          "18: </noscript>",
          "",
          "---------------"
        ],
        "lib/SqliteUI/html/main.htmli||lib/SqliteUI/html/main.htmli": [
          "File: lib/SqliteUI/html/main.htmli -> lib/SqliteUI/html/main.htmli",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: </head>",
          "18: <body id=body_main'>",
          "21: <div id=frame_main>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: <noscript>",
          "20: <h1>SORRY: THIS SITE REQUIRES JAVASCRIPT!!!</h1>",
          "21: </noscript>",
          "",
          "---------------"
        ],
        "lib/web/jsi.js||lib/web/jsi.js": [
          "File: lib/web/jsi.js -> lib/web/jsi.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "305:                     case \"string\":  if (vtyp === 'string') return; break;",
          "306:                     case \"boolean\": if (vtyp === 'boolean') return; break;",
          "307:                     case \"function\":if (vtyp === 'function') return; break;",
          "309:                     case \"regexp\":  if (vtyp === 'object' && val && val.constructor === RegExp) return; break;",
          "310:                     case \"object\":  if (vtyp === 'object' && val && val.constructor !== Array) return; break;",
          "311:                     case \"any\":     return; break;",
          "",
          "[Removed Lines]",
          "308:                     case \"array\":   if (vtyp === 'object' && val && val.constructor === Array) return; break;",
          "",
          "[Added Lines]",
          "308:                     case \"array\":   if (vtyp === 'array') return; break;",
          "",
          "---------------"
        ],
        "src/jsi.h||src/jsi.h": [
          "File: src/jsi.h -> src/jsi.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #define JSI_VERSION_MAJOR   3",
          "6: #define JSI_VERSION_MINOR   0",
          "9: #define JSI_VERSION (JSI_VERSION_MAJOR + ((Jsi_Number)JSI_VERSION_MINOR/100.0) + ((Jsi_Number)JSI_VERSION_RELEASE/10000.0))",
          "",
          "[Removed Lines]",
          "7: #define JSI_VERSION_RELEASE 37",
          "",
          "[Added Lines]",
          "7: #define JSI_VERSION_RELEASE 38",
          "",
          "---------------"
        ],
        "src/jsiFunc.c||src/jsiFunc.c": [
          "File: src/jsiFunc.c -> src/jsiFunc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "807:         goto done;",
          "808:     }",
          "809:     if ((cp=Jsi_Strchr(argStr, '='))) {",
          "811:         goto done;",
          "812:     }",
          "813:     if (Jsi_Strstr(argStr, \"...\")) {",
          "815:         goto done;",
          "816:     }",
          "817:     if (argStr[0]) {",
          "",
          "[Removed Lines]",
          "810:         Jsi_LogWarn(\"may not have default value in option, expected: %s\", argStr);",
          "814:         Jsi_LogWarn(\"may not have ... in args, expected: %s\", argStr);",
          "",
          "[Added Lines]",
          "810:         Jsi_LogWarn(\"may not have default value in option, expected: (%s)\", argStr);",
          "814:         Jsi_LogWarn(\"may not have ... in args, expected: (%s)\", argStr);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "821:     }",
          "822:     if (!f->argnames) {",
          "823:         if (argStr[0])",
          "825:         else",
          "826:             rc = 1;",
          "827:         goto done;",
          "828:     } else {",
          "829:         if (f->argnames->varargs) { // TODO: could allow varargs...",
          "830:             if (argc < f->argnames->argCnt) {",
          "832:                 goto done;",
          "833:             }",
          "834:         }",
          "835:         else if (f->argnames->argCnt != argc) {",
          "836:             if (argc)",
          "838:             else",
          "839:                 Jsi_LogWarn(\"function should have no arguments\");",
          "840:             goto done;",
          "",
          "[Removed Lines]",
          "824:             Jsi_LogWarn(\"function has no args, expected: %s\", argStr);",
          "831:                 Jsi_LogWarn(\"vararg argument mismatch, expected: %s\", argStr);",
          "837:                 Jsi_LogWarn(\"argument mismatch, expected: %s\", argStr);",
          "",
          "[Added Lines]",
          "824:             Jsi_LogWarn(\"function has no args, expected: (%s)\", argStr);",
          "831:                 Jsi_LogWarn(\"vararg argument mismatch, expected: (%s)\", argStr);",
          "837:                 Jsi_LogWarn(\"argument mismatch, expected: (%s)\", argStr);",
          "",
          "---------------"
        ],
        "tools/protos.jsi||tools/protos.jsi": [
          "File: tools/protos.jsi -> tools/protos.jsi"
        ]
      }
    }
  ]
}