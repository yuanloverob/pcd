{
  "cve_id": "CVE-2019-19242",
  "cve_desc": "SQLite 3.30.1 mishandles pExpr->y.pTab, as demonstrated by the TK_COLUMN case in sqlite3ExprCodeTarget in expr.c.",
  "repo": "sqlite/sqlite",
  "patch_hash": "57f7ece78410a8aae86aa4625fb7556897db384c",
  "patch_info": {
    "commit_hash": "57f7ece78410a8aae86aa4625fb7556897db384c",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/57f7ece78410a8aae86aa4625fb7556897db384c",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/expr.c",
      "src/wherecode.c",
      "test/gencol1.test"
    ],
    "message": "Fix a problem that comes up when using generated columns that evaluate to a constant in an index and then making use of that index in a join.\n\nFossilOrigin-Name: 8b12e95fec7ce6e0de82a04ca3dfcf1a8e62e233b7382aa28a8a9be6e862b1af",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/expr.c||src/expr.c",
      "src/wherecode.c||src/wherecode.c",
      "test/gencol1.test||test/gencol1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 2d53a30cc23e53033af8e8666457654db5dcc453ed6cd176ce1d0bff4f528159",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/expr.c||src/expr.c": [
      "File: src/expr.c -> src/expr.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3607:         int iReg = sqlite3ExprCodeTarget(pParse, pExpr->pLeft,target);",
      "3609:         if( aff>SQLITE_AFF_BLOB ){",
      "3610:           static const char zAff[] = \"B\\000C\\000D\\000E\";",
      "3611:           assert( SQLITE_AFF_BLOB=='A' );",
      "",
      "[Removed Lines]",
      "3608:         int aff = sqlite3TableColumnAffinity(pExpr->y.pTab, pExpr->iColumn);",
      "",
      "[Added Lines]",
      "3608:         int aff;",
      "3609:         if( pExpr->y.pTab ){",
      "3610:           aff = sqlite3TableColumnAffinity(pExpr->y.pTab, pExpr->iColumn);",
      "3611:         }else{",
      "3612:           aff = pExpr->affExpr;",
      "3613:         }",
      "",
      "---------------"
    ],
    "src/wherecode.c||src/wherecode.c": [
      "File: src/wherecode.c -> src/wherecode.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1141:   if( pExpr->op==TK_COLUMN ){",
      "1142:     IdxExprTrans *pX = p->u.pIdxTrans;",
      "1143:     if( pExpr->iTable==pX->iTabCur && pExpr->iColumn==pX->iTabCol ){",
      "1144:       pExpr->iTable = pX->iIdxCur;",
      "1145:       pExpr->iColumn = pX->iIdxCol;",
      "1146:       pExpr->y.pTab = 0;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1144:       assert( pExpr->y.pTab!=0 );",
      "1145:       pExpr->affExpr = sqlite3TableColumnAffinity(pExpr->y.pTab,pExpr->iColumn);",
      "",
      "---------------"
    ],
    "test/gencol1.test||test/gencol1.test": [
      "File: test/gencol1.test -> test/gencol1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "243:   UPDATE t0 SET c0 = NULL;",
      "244: } {1 {generated column loop on \"c2\"}}",
      "247: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "246: # 2019-11-21 Problems in the new generated column logic",
      "247: # reported by Yongheng Chen and Rui Zhong",
      "248: do_execsql_test gencol1-9.10 {",
      "249:   DROP TABLE IF EXISTS t1;",
      "250:   DROP TABLE IF EXISTS t2;",
      "251:   CREATE TABLE t1(aa , bb AS (17) UNIQUE);",
      "252:   INSERT INTO t1 VALUES(17);",
      "253:   CREATE TABLE t2(cc);",
      "254:   INSERT INTO t2 VALUES(41);",
      "255:   SELECT * FROM t2 JOIN t1 WHERE t1.bb=t1.aa AND t1.bb=17;",
      "256: } {41 17 17}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "4c8056079ffdafae82b7f42fe4917af2f583cf51",
      "candidate_info": {
        "commit_hash": "4c8056079ffdafae82b7f42fe4917af2f583cf51",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/4c8056079ffdafae82b7f42fe4917af2f583cf51",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbemem.c"
        ],
        "message": "Remove a harmless unused variable.\n\nFossilOrigin-Name: 28091a48aa6994f8d7c142b5851bcd6b4e9a93a7bbef6c927a6182d24f3245b4",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbemem.c||src/vdbemem.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 8e100e6c35c30e0d7e4014b9435f81f9f61ddab2386dfe9a4218d8190a6da3be",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbemem.c||src/vdbemem.c": [
          "File: src/vdbemem.c -> src/vdbemem.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "460: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "461: int sqlite3VdbeMemAggValue(Mem *pAccum, Mem *pOut, FuncDef *pFunc){",
          "462:   sqlite3_context ctx;",
          "464:   assert( pFunc!=0 );",
          "465:   assert( pFunc->xValue!=0 );",
          "466:   assert( (pAccum->flags & MEM_Null)!=0 || pFunc==pAccum->u.pDef );",
          "467:   assert( pAccum->db==0 || sqlite3_mutex_held(pAccum->db->mutex) );",
          "468:   memset(&ctx, 0, sizeof(ctx));",
          "472:   sqlite3VdbeMemSetNull(pOut);",
          "473:   ctx.pOut = pOut;",
          "474:   ctx.pMem = pAccum;",
          "",
          "[Removed Lines]",
          "463:   Mem t;",
          "469:   memset(&t, 0, sizeof(t));",
          "470:   t.flags = MEM_Null;",
          "471:   t.db = pAccum->db;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d4a4a36171fdc93a9fc117af2f957c86624b50da",
      "candidate_info": {
        "commit_hash": "d4a4a36171fdc93a9fc117af2f957c86624b50da",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/d4a4a36171fdc93a9fc117af2f957c86624b50da",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "test/index6.test"
        ],
        "message": "Do not use a partial index as a table scan in an IN operator. Fix for ticket [1d958d90596593a77420e59].\n\nFossilOrigin-Name: 15bc915dd7ae25bfdfbe357c3792db3639799e4d121c6b5b24297af2d6d7129e",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "test/index6.test||test/index6.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/expr.c||src/expr.c"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/expr.c||src/expr.c"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: a92c398fc5df142ff1459c1be4a6832f2219bc7fabe5789535be3bbd41a4269b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2445:           if( pIdx->nColumn<nExpr ) continue;",
          "2448:           testcase( pIdx->nColumn==BMS-2 );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2446:           if( pIdx->pPartIdxWhere!=0 ) continue;",
          "",
          "---------------"
        ],
        "test/index6.test||test/index6.test": [
          "File: test/index6.test -> test/index6.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "389: do_execsql_test index6-11.2 {",
          "390:   EXPLAIN QUERY PLAN SELECT a FROM t11 WHERE b<>99 AND c<>98;",
          "391: } {/USING INDEX t11x/}",
          "394: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "393: # 2018-12-08",
          "394: # Ticket https://www.sqlite.org/src/info/1d958d90596593a7",
          "395: # NOT IN operator fails when using a partial index.",
          "396: #",
          "397: do_execsql_test index6-12.1 {",
          "398:   DROP TABLE IF EXISTS t1;",
          "399:   DROP TABLE IF EXISTS t2;",
          "400:   CREATE TABLE t1(a,b);",
          "401:   INSERT INTO t1 VALUES(1,1);",
          "402:   INSERT INTO t1 VALUES(2,2);",
          "403:   CREATE TABLE t2(x);",
          "404:   INSERT INTO t2 VALUES(1);",
          "405:   INSERT INTO t2 VALUES(2);",
          "406:   SELECT 'one', * FROM t2 WHERE x NOT IN (SELECT a FROM t1);",
          "407:   CREATE INDEX t1a ON t1(a) WHERE b=1;",
          "408:   SELECT 'two', * FROM t2 WHERE x NOT IN (SELECT a FROM t1);",
          "409: } {}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "19efd0db4133f2d0f9985856ae9b4b5572abf733",
      "candidate_info": {
        "commit_hash": "19efd0db4133f2d0f9985856ae9b4b5572abf733",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/19efd0db4133f2d0f9985856ae9b4b5572abf733",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/callback.c",
          "src/hash.c",
          "src/hash.h",
          "src/prepare.c",
          "src/sqliteInt.h"
        ],
        "message": "Simplifications to the sqlite3_normalized_sql() implementation.\n\nFossilOrigin-Name: 94ea6379178e3ff6a0d1d5819ca4ac558bdadb1ca8a3637c797079db7dc0cd61",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/callback.c||src/callback.c",
          "src/hash.c||src/hash.c",
          "src/hash.h||src/hash.h",
          "src/prepare.c||src/prepare.c",
          "src/sqliteInt.h||src/sqliteInt.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: f44bc7a8b3fac82aa5598e9bdaf65ea4dd3c331cf90c1d5ba26ff1698e92c230",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/callback.c||src/callback.c": [
          "File: src/callback.c -> src/callback.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "289: ){",
          "",
          "[Removed Lines]",
          "286: static FuncDef *functionSearch(",
          "",
          "[Added Lines]",
          "286: FuncDef *sqlite3FunctionSearch(",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "295:   }",
          "296:   return 0;",
          "297: }",
          "",
          "[Removed Lines]",
          "298: #ifdef SQLITE_ENABLE_NORMALIZE",
          "299: FuncDef *sqlite3FunctionSearchN(",
          "303: ){",
          "304:   FuncDef *p;",
          "305:   for(p=sqlite3BuiltinFunctions.a[h]; p; p=p->u.pHash){",
          "306:     if( sqlite3StrNICmp(p->zName, zFunc, nFunc)==0 ){",
          "307:       return p;",
          "308:     }",
          "309:   }",
          "310:   return 0;",
          "311: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "325:     int nName = sqlite3Strlen30(zName);",
          "326:     int h = SQLITE_FUNC_HASH(zName[0], nName);",
          "327:     assert( zName[0]>='a' && zName[0]<='z' );",
          "329:     if( pOther ){",
          "330:       assert( pOther!=&aDef[i] && pOther->pNext!=&aDef[i] );",
          "331:       aDef[i].pNext = pOther->pNext;",
          "",
          "[Removed Lines]",
          "328:     pOther = functionSearch(h, zName);",
          "",
          "[Added Lines]",
          "313:     pOther = sqlite3FunctionSearch(h, zName);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "403:   if( !createFlag && (pBest==0 || (db->mDbFlags & DBFLAG_PreferBuiltin)!=0) ){",
          "404:     bestScore = 0;",
          "405:     h = SQLITE_FUNC_HASH(sqlite3UpperToLower[(u8)zName[0]], nName);",
          "407:     while( p ){",
          "408:       int score = matchQuality(p, nArg, enc);",
          "409:       if( score>bestScore ){",
          "",
          "[Removed Lines]",
          "406:     p = functionSearch(h, zName);",
          "",
          "[Added Lines]",
          "391:     p = sqlite3FunctionSearch(h, zName);",
          "",
          "---------------"
        ],
        "src/hash.c||src/hash.c": [
          "File: src/hash.c -> src/hash.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "64:   }",
          "65:   return h;",
          "66: }",
          "",
          "[Removed Lines]",
          "67: #ifdef SQLITE_ENABLE_NORMALIZE",
          "68: static unsigned int strHashN(const char *z, int n){",
          "69:   unsigned int h = 0;",
          "70:   int i;",
          "71:   for(i=0; i<n; i++){",
          "75:     h += sqlite3UpperToLower[(unsigned char)z[i]];",
          "76:     h *= 0x9e3779b1;",
          "77:   }",
          "78:   return h;",
          "79: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "189:   }",
          "190:   return &nullElement;",
          "191: }",
          "",
          "[Removed Lines]",
          "192: #ifdef SQLITE_ENABLE_NORMALIZE",
          "193: static HashElem *findElementWithHashN(",
          "198: ){",
          "202:   static HashElem nullElement = { 0, 0, 0, 0 };",
          "205:     struct _ht *pEntry;",
          "206:     h = strHashN(pKey, nKey) % pH->htsize;",
          "207:     pEntry = &pH->ht[h];",
          "208:     elem = pEntry->chain;",
          "209:     count = pEntry->count;",
          "210:   }else{",
          "211:     h = 0;",
          "212:     elem = pH->first;",
          "213:     count = pH->count;",
          "214:   }",
          "215:   if( pHash ) *pHash = h;",
          "216:   while( count-- ){",
          "217:     assert( elem!=0 );",
          "218:     if( sqlite3StrNICmp(elem->pKey,pKey,nKey)==0 ){",
          "219:       return elem;",
          "220:     }",
          "221:     elem = elem->next;",
          "222:   }",
          "223:   return &nullElement;",
          "224: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "267:   assert( pKey!=0 );",
          "268:   return findElementWithHash(pH, pKey, 0)->data;",
          "269: }",
          "",
          "[Removed Lines]",
          "270: #ifdef SQLITE_ENABLE_NORMALIZE",
          "271: void *sqlite3HashFindN(const Hash *pH, const char *pKey, int nKey){",
          "272:   assert( pH!=0 );",
          "273:   assert( pKey!=0 );",
          "274:   assert( nKey>=0 );",
          "275:   return findElementWithHashN(pH, pKey, nKey, 0)->data;",
          "276: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/hash.h||src/hash.h": [
          "File: src/hash.h -> src/hash.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "68: void sqlite3HashInit(Hash*);",
          "69: void *sqlite3HashInsert(Hash*, const char *pKey, void *pData);",
          "70: void *sqlite3HashFind(const Hash*, const char *pKey);",
          "74: void sqlite3HashClear(Hash*);",
          "",
          "[Removed Lines]",
          "71: #ifdef SQLITE_ENABLE_NORMALIZE",
          "72: void *sqlite3HashFindN(const Hash *pH, const char *pKey, int nKey);",
          "73: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/prepare.c||src/prepare.c": [
          "File: src/prepare.c -> src/prepare.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "734:   }",
          "735:   if( nToken>0 ){",
          "736:     int hash = SQLITE_FUNC_HASH(sqlite3UpperToLower[(u8)zToken[0]], nToken);",
          "738:   }",
          "739:   assert( db!=0 );",
          "740:   sqlite3_mutex_enter(db->mutex);",
          "741:   sqlite3BtreeEnterAll(db);",
          "742:   for(i=0; i<db->nDb; i++){",
          "743:     pHash = &db->aFunc;",
          "745:       bFound = 1;",
          "746:       break;",
          "747:     }",
          "748:     pSchema = db->aDb[i].pSchema;",
          "749:     if( pSchema==0 ) continue;",
          "750:     pHash = &pSchema->tblHash;",
          "752:       bFound = 1;",
          "753:       break;",
          "754:     }",
          "",
          "[Removed Lines]",
          "732:   if( sqlite3IsRowidN(zToken, nToken) ){",
          "733:     return 1;",
          "737:     if( sqlite3FunctionSearchN(hash, zToken, nToken) ) return 1;",
          "744:     if( sqlite3HashFindN(pHash, zToken, nToken) ){",
          "751:     if( sqlite3HashFindN(pHash, zToken, nToken) ){",
          "",
          "[Added Lines]",
          "734:   if( nToken<sizeof(zSpace) ){",
          "735:     memcpy(zSpace, zToken, nToken);",
          "736:     zSpace[nToken] = 0;",
          "737:     zId = zSpace;",
          "738:   }else{",
          "739:     zId = sqlite3DbStrNDup(db, zToken, nToken);",
          "740:     if( zId==0 ) return 0;",
          "741:   }",
          "742:   if( sqlite3IsRowid(zId) ){",
          "743:     bFound = 1;",
          "744:     goto done;",
          "748:     if( sqlite3FunctionSearch(hash, zId) ){",
          "749:       bFound = 1;",
          "750:       goto done;",
          "751:     }",
          "758:     if( sqlite3HashFind(pHash, zId) ){",
          "765:     if( sqlite3HashFind(pHash, zId) ){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "770:           goto done;",
          "771:         }",
          "772:       }",
          "774:         bFound = 1;",
          "775:         goto done;",
          "776:       }",
          "",
          "[Removed Lines]",
          "773:       if( pHash && sqlite3HashFindN(pHash, zToken, nToken) ){",
          "",
          "[Added Lines]",
          "787:       if( pHash && sqlite3HashFind(pHash, zId) ){",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "779: done:",
          "780:   sqlite3BtreeLeaveAll(db);",
          "781:   sqlite3_mutex_leave(db->mutex);",
          "782:   return bFound;",
          "783: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "796:   if( zId!=zSpace ) sqlite3DbFree(db, zId);",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "4056: SrcList *sqlite3SrcListDup(sqlite3*,SrcList*,int);",
          "4057: IdList *sqlite3IdListDup(sqlite3*,IdList*);",
          "4058: Select *sqlite3SelectDup(sqlite3*,Select*,int);",
          "4062: void sqlite3InsertBuiltinFuncs(FuncDef*,int);",
          "4063: FuncDef *sqlite3FindFunction(sqlite3*,const char*,int,u8,u8);",
          "4064: void sqlite3RegisterBuiltinFunctions(void);",
          "",
          "[Removed Lines]",
          "4059: #ifdef SQLITE_ENABLE_NORMALIZE",
          "4060: FuncDef *sqlite3FunctionSearchN(int,const char*,int);",
          "4061: #endif",
          "",
          "[Added Lines]",
          "4059: FuncDef *sqlite3FunctionSearch(int,const char*);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "35808435953097822ab86df84e02170e3b1839de",
      "candidate_info": {
        "commit_hash": "35808435953097822ab86df84e02170e3b1839de",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/35808435953097822ab86df84e02170e3b1839de",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/where.c",
          "test/bestindex1.test"
        ],
        "message": "Fix a fairly obscure problem causing the planner to sometimes choose sub-optimal plans for a query with a single virtual table in the FROM clause, and at least one IN(...) constraint in the WHERE clause.\n\nFossilOrigin-Name: f5752517f590b37bfc0267650f5800320e22a8ecaba34aa6893281ce8d268026",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/where.c||src/where.c",
          "test/bestindex1.test||test/bestindex1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 040d5d515bcb37bea05e0d156dbaf066c68052ac574f1b0b2cb118d473a353e0",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3335:   rc = whereLoopAddVirtualOne(pBuilder, mPrereq, ALLBITS, 0, p, mNoOmit, &bIn);",
          "3345:     Bitmask mPrev = 0;",
          "",
          "[Removed Lines]",
          "3342:   if( rc==SQLITE_OK && (mBest = (pNew->prereq & ~mPrereq))!=0 ){",
          "",
          "[Added Lines]",
          "3342:   if( rc==SQLITE_OK && ((mBest = (pNew->prereq & ~mPrereq))!=0 || bIn) ){",
          "",
          "---------------"
        ],
        "test/bestindex1.test||test/bestindex1.test": [
          "File: test/bestindex1.test -> test/bestindex1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "266:   4 0 ValueB 4 0 ValueB",
          "267: }",
          "270: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "269: #-------------------------------------------------------------------------",
          "270: # If there is an IN(..) condition in the WHERE clause of a query on a",
          "271: # virtual table, the xBestIndex method is first invoked with the IN(...)",
          "272: # represented by a \"usable\" SQLITE_INDEX_CONSTRAINT_EQ constraint. If",
          "273: # the virtual table elects to use the IN(...) constraint, then the",
          "274: # xBestIndex method is invoked again, this time with the IN(...) marked",
          "275: # as \"not usable\". Depending on the relative costs of the two plans as",
          "276: # defined by the virtual table implementation, and the cardinality of the",
          "277: # IN(...) operator, SQLite chooses the most efficient plan.",
          "278: #",
          "279: # At one point the second invocation of xBestIndex() was only being made",
          "280: # for join queries. The following tests check that this problem has been",
          "281: # fixed.",
          "282: #",
          "283: proc vtab_command {method args} {",
          "284:   switch -- $method {",
          "285:     xConnect {",
          "286:       return \"CREATE TABLE t1(a, b, c, d)\"",
          "287:     }",
          "289:     xBestIndex {",
          "290:       set clist [lindex $args 0]",
          "291:       lappend ::bestindex_calls $clist",
          "292:       set ret \"cost 1000000 idxnum 555\"",
          "293:       for {set i 0} {$i < [llength $clist]} {incr i} {",
          "294:         array set C [lindex $clist $i]",
          "295:         if {$C(usable)} { lappend ret use $i }",
          "296:       }",
          "297:       return $ret",
          "298:     }",
          "299:   }",
          "300:   return {}",
          "301: }",
          "303: do_execsql_test 4.0 {",
          "304:   CREATE VIRTUAL TABLE x1 USING tcl(vtab_command);",
          "305: } {}",
          "307: do_test 4.1 {",
          "308:   set ::bestindex_calls [list]",
          "309:   execsql {",
          "310:     SELECT * FROM x1 WHERE a=? AND b BETWEEN ? AND ? AND c IN (1, 2, 3, 4);",
          "311:   }",
          "312:   set ::bestindex_calls",
          "313: } [list \\",
          "314:     [list {op eq column 0 usable 1} \\",
          "315:           {op eq column 2 usable 1} \\",
          "316:           {op ge column 1 usable 1} \\",
          "317:           {op le column 1 usable 1} \\",
          "318:     ] \\",
          "319:     [list {op eq column 0 usable 1} \\",
          "320:           {op eq column 2 usable 0} \\",
          "321:           {op ge column 1 usable 1} \\",
          "322:           {op le column 1 usable 1}",
          "323:     ]",
          "324: ]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2712b022abeb6c3d3ca0f1253bbbcca404e52b8a",
      "candidate_info": {
        "commit_hash": "2712b022abeb6c3d3ca0f1253bbbcca404e52b8a",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/2712b022abeb6c3d3ca0f1253bbbcca404e52b8a",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/select.c",
          "test/view.test"
        ],
        "message": "Ensure that when the col in an operator like \"val IN(col)\" is a column of a view, its affinity is not used to coerce val. Fix for [0a5e2c1d].\n\nFossilOrigin-Name: 17b3d2218c02a4005d4c96471c452105b54abb25901ae62990b01f0c955135fe",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/select.c||src/select.c",
          "test/view.test||test/view.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 509c1ba26a4c12c63ecf04ddfa2f175eaf4dd9b96ab7be15faebd36deb0a0a31",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3476:           pNew->iRightJoinTable = pExpr->iRightJoinTable;",
          "3477:           ExprSetProperty(pNew, EP_FromJoin);",
          "3478:         }",
          "3479:         sqlite3ExprDelete(db, pExpr);",
          "3480:         pExpr = pNew;",
          "3481:       }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3479:         if( pNew && ExprHasProperty(pExpr,EP_Generic) ){",
          "3480:           ExprSetProperty(pNew, EP_Generic);",
          "3481:         }",
          "",
          "---------------"
        ],
        "test/view.test||test/view.test": [
          "File: test/view.test -> test/view.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "761:   SELECT 1 FROM (SELECT t0.c0 AS c0, AVG(t0.c1) AS c1 FROM t0) WHERE c0<c1",
          "762: } {1}",
          "764: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "764: #-------------------------------------------------------------------------",
          "765: reset_db",
          "766: do_execsql_test view-28.0 {",
          "767:   CREATE TABLE t0(c0 TEXT);",
          "768:   CREATE VIEW v0(c0) AS SELECT t0.c0 FROM t0;",
          "769:   INSERT INTO t0(c0) VALUES ('0');",
          "770: }",
          "771: do_execsql_test view-28.1 {",
          "772:   SELECT 0 IN (c0) FROM t0;",
          "773: } {0}",
          "774: do_execsql_test view-28.2 {",
          "775:   SELECT 0 IN (c0) FROM (SELECT c0 FROM t0);",
          "776: } {0}",
          "",
          "---------------"
        ]
      }
    }
  ]
}