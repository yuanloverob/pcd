{
  "cve_id": "CVE-2021-20223",
  "cve_desc": "",
  "repo": "sqlite/sqlite",
  "patch_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
  "patch_info": {
    "commit_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "files": [
      "ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Prevent fts5 tokenizer unicode61 from considering '\\0' to be a token characters, even if other characters of class \"Cc\" are.\n\nFossilOrigin-Name: b7b7bde9b7a03665e3691c6d51118965f216d2dfb1617f138b9f9e60e418ed2f",
    "before_after_code_files": [
      "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
      "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c"
    ],
    "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test": [
      "File: ext/fts5/test/fts5tok1.test -> ext/fts5/test/fts5tok1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:   SELECT * FROM t4;",
      "112: } {1 {SQL logic error}}",
      "115: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114: #-------------------------------------------------------------------------",
      "115: # Embedded 0x00 characters.",
      "116: #",
      "117: reset_db",
      "118: do_execsql_test 3.1.0 {",
      "119:   CREATE VIRTUAL TABLE t1 USING fts5(z);",
      "120:   CREATE VIRTUAL TABLE tt USING fts5vocab(t1, 'instance');",
      "121:   INSERT INTO t1 VALUES('abc' || char(0) || 'def');",
      "122:   SELECT * FROM tt;",
      "123: } { abc 1 z 0 def 1 z 1 }",
      "124: do_execsql_test 3.1.1 {",
      "125:   SELECT hex(z) FROM t1;",
      "126: } {61626300646566}",
      "127: do_execsql_test 3.1.2 {",
      "128:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "129: } {}",
      "131: do_execsql_test 3.2.0 {",
      "132:   CREATE VIRTUAL TABLE t2 USING fts5(z,",
      "133:       tokenize=\"unicode61 categories 'L* N* Co Cc'\"",
      "134:   );",
      "135:   CREATE VIRTUAL TABLE tu USING fts5vocab(t2, 'instance');",
      "137:   INSERT INTO t2 VALUES('abc' || char(0) || 'def');",
      "138:   SELECT * FROM tu;",
      "139: } { abc 1 z 0 def 1 z 1 }",
      "141: do_execsql_test 3.2.1 {",
      "142:   SELECT hex(z) FROM t1;",
      "143: } {61626300646566}",
      "145: do_execsql_test 3.2.2 {",
      "146:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "147: } {}",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 0e7e113d9f2c929c1f8a85e2cfad8e2e60f0e8770212b5e5320fb2a2c42911f8",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "42d7a77b613eb303950fbb013224281ca5633044",
      "candidate_info": {
        "commit_hash": "42d7a77b613eb303950fbb013224281ca5633044",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/42d7a77b613eb303950fbb013224281ca5633044",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c",
          "src/select.c",
          "src/where.c",
          "test/decimal.test",
          "test/fuzzdata8.db"
        ],
        "message": "Update this branch with changes from trunk.\n\nFossilOrigin-Name: 53b8b507a10364f5d580655d89c950a5f14c2a8114625fd8749d77f289413b22",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c",
          "src/select.c||src/select.c",
          "src/where.c||src/where.c",
          "test/decimal.test||test/decimal.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 4f6d8d0ebf40029218a1d3b05ea657c0c5953b01c6f0b6a628465aa44c67e7f3",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3886:     Pgno nFree = get4byte(&pBt->pPage1->aData[36]);",
          "3887:     Pgno nFin = finalDbSize(pBt, nOrig, nFree);",
          "3890:       rc = SQLITE_CORRUPT_BKPT;",
          "3891:     }else if( nFree>0 ){",
          "3892:       rc = saveAllCursors(pBt, 0, 0);",
          "",
          "[Removed Lines]",
          "3889:     if( nOrig<nFin ){",
          "",
          "[Added Lines]",
          "3889:     if( nOrig<nFin || nFree>=nOrig ){",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "6737:         explainSimpleCount(pParse, pTab, pBest);",
          "6738:       }else{",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6740:         int addrSkip;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "6785:         }",
          "6786:         updateAccumulator(pParse, regAcc, pAggInfo);",
          "6787:         if( regAcc ) sqlite3VdbeAddOp2(v, OP_Integer, 1, regAcc);",
          "6792:         }",
          "6793:         sqlite3WhereEnd(pWInfo);",
          "6794:         finalizeAggFunctions(pParse, pAggInfo);",
          "",
          "[Removed Lines]",
          "6788:         if( sqlite3WhereIsOrdered(pWInfo)>0 ){",
          "6789:           sqlite3VdbeGoto(v, sqlite3WhereBreakLabel(pWInfo));",
          "6790:           VdbeComment((v, \"%s() by index\",",
          "6791:                 (minMaxFlag==WHERE_ORDERBY_MIN?\"min\":\"max\")));",
          "",
          "[Added Lines]",
          "6789:         addrSkip = sqlite3WhereOrderByLimitOptLabel(pWInfo);",
          "6790:         if( addrSkip!=sqlite3WhereContinueLabel(pWInfo) ){",
          "6791:           sqlite3VdbeGoto(v, addrSkip);",
          "",
          "---------------"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3740:   orderDistinctMask = 0;",
          "3741:   ready = 0;",
          "3742:   eqOpMask = WO_EQ | WO_IS | WO_ISNULL;",
          "3744:   for(iLoop=0; isOrderDistinct && obSat<obDone && iLoop<=nLoop; iLoop++){",
          "3745:     if( iLoop>0 ) ready |= pLoop->maskSelf;",
          "3746:     if( iLoop<nLoop ){",
          "",
          "[Removed Lines]",
          "3743:   if( wctrlFlags & WHERE_ORDERBY_LIMIT ) eqOpMask |= WO_IN;",
          "",
          "[Added Lines]",
          "3747:   if( wctrlFlags & (WHERE_ORDERBY_LIMIT|WHERE_ORDERBY_MAX|WHERE_ORDERBY_MIN) ){",
          "3748:     eqOpMask |= WO_IN;",
          "3749:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3780:         for(j=0; j<pLoop->nLTerm && pTerm!=pLoop->aLTerm[j]; j++){}",
          "3781:         if( j>=pLoop->nLTerm ) continue;",
          "3782:       }",
          "",
          "[Removed Lines]",
          "3779:         assert( wctrlFlags & WHERE_ORDERBY_LIMIT );",
          "",
          "[Added Lines]",
          "3785:         assert( wctrlFlags &",
          "3786:                (WHERE_ORDERBY_LIMIT|WHERE_ORDERBY_MIN|WHERE_ORDERBY_MAX) );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4424:             }",
          "4425:           }",
          "4426:         }",
          "4427:       }",
          "4428:     }",
          "4429:     if( (pWInfo->wctrlFlags & WHERE_SORTBYGROUP)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4434:       }else if( nLoop",
          "4435:             && pWInfo->nOBSat==1",
          "4436:             && (pWInfo->wctrlFlags & (WHERE_ORDERBY_MIN|WHERE_ORDERBY_MAX))!=0",
          "4437:             ){",
          "4438:         pWInfo->bOrderedInnerLoop = 1;",
          "",
          "---------------"
        ],
        "test/decimal.test||test/decimal.test": [
          "File: test/decimal.test -> test/decimal.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "15: set testprefix decimal",
          "17: if {[catch {load_static_extension db decimal} error]} {",
          "19:   finish_test; return",
          "20: }",
          "",
          "[Removed Lines]",
          "18:   puts \"Skipping zipfile tests, hit load error: $error\"",
          "",
          "[Added Lines]",
          "18:   puts \"Skipping decimal tests, hit load error: $error\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "138:   SELECT decimal_mul('1234.0000','2');",
          "139: } {2468}",
          "142: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "141: if {[catch {load_static_extension db ieee754} error]} {",
          "142:   puts \"Skipping ieee754 tests, hit load error: $error\"",
          "143:   finish_test; return",
          "144: }",
          "146: do_execsql_test 6000 {",
          "147:   CREATE TABLE pow2(x INTEGER PRIMARY KEY, v TEXT);",
          "148:   WITH RECURSIVE c(x,v) AS (",
          "149:     VALUES(0,'1')",
          "150:     UNION ALL",
          "151:     SELECT x+1, decimal_mul(v,'2') FROM c WHERE x+1<=971",
          "152:   ) INSERT INTO pow2(x,v) SELECT x, v FROM c;",
          "153:   WITH RECURSIVE c(x,v) AS (",
          "154:     VALUES(-1,'0.5')",
          "155:     UNION ALL",
          "156:     SELECT x-1, decimal_mul(v,'0.5') FROM c WHERE x-1>=-1075",
          "157:   ) INSERT INTO pow2(x,v) SELECT x, v FROM c;",
          "158: } {}",
          "159: do_execsql_test 6010 {",
          "160:   WITH c(n) AS (SELECT ieee754_from_blob(x'0000000000000001'))",
          "161: SELECT decimal_mul(ieee754_mantissa(c.n),pow2.v)",
          "162:   FROM pow2, c WHERE pow2.x=ieee754_exponent(c.n);",
          "163: } {}",
          "164: do_execsql_test 6020 {",
          "165:   WITH c(n) AS (SELECT ieee754_from_blob(x'7fefffffffffffff'))",
          "166: SELECT decimal_mul(ieee754_mantissa(c.n),pow2.v)",
          "167:   FROM pow2, c WHERE pow2.x=ieee754_exponent(c.n);",
          "168: } {179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368}",
          "170: do_execsql_test 6100 {",
          "171:   SELECT ieee754(ieee754_from_blob(x'0000000000000001'));",
          "172: } {ieee754(1,-1074)}",
          "173: do_execsql_test 6110 {",
          "174:   SELECT ieee754(ieee754_from_blob(x'7fefffffffffffff'));",
          "175: } {ieee754(9007199254740991,971)}",
          "176: do_execsql_test 6120 {",
          "177:   SELECT printf('%.8e',ieee754_from_blob(x'0000000000000001'));",
          "178: } {4.94065646e-324}",
          "179: do_execsql_test 6130 {",
          "180:   SELECT printf('%.8e',ieee754_from_blob(x'ffefffffffffffff'));",
          "181: } {-1.79769313e+308}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "431704375e0c1bf93902e6ef417c02abe4a35148",
      "candidate_info": {
        "commit_hash": "431704375e0c1bf93902e6ef417c02abe4a35148",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/431704375e0c1bf93902e6ef417c02abe4a35148",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/window.c",
          "test/window1.test"
        ],
        "message": "Fix a problem with window functions in aggregate queries that do not have GROUP BY clauses.\n\nFossilOrigin-Name: 99609786f485653464d1caef1d207ae299d28c925bff3e8e94891759b4765dcc",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/window.c||src/window.c",
          "test/window1.test||test/window1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 45c64d39d5afed7fdc6b1de19408559740d1fba1f5e0269ab68b132366a289e4",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "799:       }",
          "800:       if( iCol<0 ){",
          "801:         Expr *pDup = sqlite3ExprDup(pParse->db, pExpr, 0);",
          "802:         p->pSub = sqlite3ExprListAppend(pParse, p->pSub, pDup);",
          "803:       }",
          "804:       if( p->pSub ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "802:         if( pDup && pDup->op==TK_AGG_FUNCTION ) pDup->op = TK_FUNCTION;",
          "",
          "---------------"
        ],
        "test/window1.test||test/window1.test": [
          "File: test/window1.test -> test/window1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1364: # 2019-12-25 ticket d87336c81c7d0873",
          "1365: #",
          "1373: #-------------------------------------------------------------------------",
          "1374: reset_db",
          "",
          "[Removed Lines]",
          "1366: #reset_db",
          "1367: #do_catchsql_test 40.1 {",
          "1368: #  CREATE VIRTUAL TABLE t0 USING rtree(c0, c1, c2);",
          "1369: #  SELECT * FROM t0",
          "1370: #   WHERE ((0,0) IN (SELECT COUNT(*),LAG(5)OVER(PARTITION BY 0) FROM t0),0)<=(c1,0);",
          "1371: #} {1 {1st ORDER BY term out of range - should be between 1 and 3}}",
          "",
          "[Added Lines]",
          "1366: reset_db",
          "1367: do_catchsql_test 40.1 {",
          "1368:   CREATE VIRTUAL TABLE t0 USING rtree(c0, c1, c2);",
          "1369:   SELECT * FROM t0",
          "1370:    WHERE ((0,0) IN (SELECT COUNT(*),LAG(5)OVER(PARTITION BY 0) FROM t0),0)<=(c1,0);",
          "1371: } {0 {}}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1402:   );",
          "1403: } {0 0  0 0  0 0  0 0}",
          "1405: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1405: #-------------------------------------------------------------------------",
          "1406: reset_db",
          "1407: do_execsql_test 42.1 {",
          "1408:   CREATE TABLE t1(a, b, c);",
          "1409:   INSERT INTO t1 VALUES(1, 1, 1);",
          "1410:   INSERT INTO t1 VALUES(2, 2, 2);",
          "1411: }",
          "1412: do_execsql_test 42.2 {",
          "1413:   SELECT * FROM t1 WHERE (0, 0) IN ( SELECT count(*), 0 FROM t1 )",
          "1414: } {}",
          "1415: do_execsql_test 42.3 {",
          "1416:   SELECT * FROM t1 WHERE (2, 0) IN ( SELECT count(*), 0 FROM t1 )",
          "1417: } {1 1 1 2 2 2}",
          "1419: do_execsql_test 42.3 {",
          "1420:   SELECT count(*), max(a) OVER () FROM t1 GROUP BY c;",
          "1421: } {1 2 1 2}",
          "1423: do_execsql_test 42.4 {",
          "1424:   SELECT sum(a), max(b) OVER () FROM t1;",
          "1425: } {3 1}",
          "1427: do_execsql_test 42.5 {",
          "1428:   CREATE TABLE t2(a, b);",
          "1429:   INSERT INTO t2 VALUES('a', 1);",
          "1430:   INSERT INTO t2 VALUES('a', 2);",
          "1431:   INSERT INTO t2 VALUES('a', 3);",
          "1432:   INSERT INTO t2 VALUES('b', 4);",
          "1433:   INSERT INTO t2 VALUES('b', 5);",
          "1434:   INSERT INTO t2 VALUES('b', 6);",
          "1435: }",
          "1437: do_execsql_test 42.6 {",
          "1438:   SELECT a, sum(b), sum( sum(b) ) OVER (ORDER BY a) FROM t2 GROUP BY a;",
          "1439: } {a 6 6   b 15 21}",
          "1441: do_execsql_test 42.7 {",
          "1442:   SELECT sum(b), sum( sum(b) ) OVER (ORDER BY a) FROM t2;",
          "1443: } {21 21}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2e2c8819f1a9008348b9d04b58ecbe5ebf1ead52",
      "candidate_info": {
        "commit_hash": "2e2c8819f1a9008348b9d04b58ecbe5ebf1ead52",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/2e2c8819f1a9008348b9d04b58ecbe5ebf1ead52",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/resolve.c"
        ],
        "message": "Ensure that there is a containing SELECT statement when processing a normal aggregate function as if it were a window function.\n\nFossilOrigin-Name: c1014e80b26131200a115beb86929a8f0ded2dd65b075e47373346c0f170576a",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/resolve.c||src/resolve.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: e5dc2939d3e8694d648fc9b73b1174da5b1349e20fbb9cf1c91268939f308f89",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/resolve.c||src/resolve.c": [
          "File: src/resolve.c -> src/resolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "967:           Select *pSel = pNC->pWinSelect;",
          "968:           assert( pWin==pExpr->y.pWin );",
          "969:           if( IN_RENAME_OBJECT==0 ){",
          "971:           }",
          "972:           sqlite3WalkExprList(pWalker, pWin->pPartition);",
          "973:           sqlite3WalkExprList(pWalker, pWin->pOrderBy);",
          "",
          "[Removed Lines]",
          "970:             sqlite3WindowUpdate(pParse, pSel->pWinDefn, pWin, pDef);",
          "",
          "[Added Lines]",
          "970:             sqlite3WindowUpdate(pParse, pSel ? pSel->pWinDefn : 0, pWin, pDef);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c37b7680a411d117852d0878fe5dde42b208d6b9",
      "candidate_info": {
        "commit_hash": "c37b7680a411d117852d0878fe5dde42b208d6b9",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/c37b7680a411d117852d0878fe5dde42b208d6b9",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/where.c"
        ],
        "message": "Fix an obsolete header comment on the sqlite3WhereIsOrdered() routine.\n\nFossilOrigin-Name: 5041f6a1c439b43c654e72a391517c115e222ef0e9a565907b03149b535e92c8",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/where.c||src/where.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: f25a56c26e28abd44373230c6b5763aed35c9a7648abede8a53409dccc0bee1d",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c"
        ]
      }
    },
    {
      "candidate_hash": "ca3ee7e18a9ba842316e8bf38ee3548639ed92a4",
      "candidate_info": {
        "commit_hash": "ca3ee7e18a9ba842316e8bf38ee3548639ed92a4",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/ca3ee7e18a9ba842316e8bf38ee3548639ed92a4",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/analyze3.test"
        ],
        "message": "Do not attempt to run test script analyze3.test as part of the \"prepare\" permutation.\n\nFossilOrigin-Name: f7f13cb1bc699c034a3f5f7a2431c8055cb79e2a14d5e70e1fc5dd6dec00fb26",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/analyze3.test||test/analyze3.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 0ffd16d23dd3b6467cce31af506c70fde44c3796d386c2a03896e43a6d683e60",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/analyze3.test||test/analyze3.test": [
          "File: test/analyze3.test -> test/analyze3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "23:   return",
          "24: }",
          "26: #----------------------------------------------------------------------",
          "27: # Test Organization:",
          "28: #",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "26: # This test cannot be run with the sqlite3_prepare() permutation, as it",
          "27: # tests that stat4 data can be used to influence the plans of queries",
          "28: # based on bound variable values. And this is not possible when using",
          "29: # sqlite3_prepare() - as queries cannot be internally re-prepared after",
          "30: # binding values are available.",
          "31: if {[permutation]==\"prepare\"} {",
          "32:   finish_test",
          "33:   return",
          "34: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}