{
  "cve_id": "CVE-2019-19924",
  "cve_desc": "SQLite 3.30.1 mishandles certain parser-tree rewriting, related to expr.c, vdbeaux.c, and window.c. This is caused by incorrect sqlite3WindowRewrite() error handling.",
  "repo": "sqlite/sqlite",
  "patch_hash": "8654186b0236d556aa85528c2573ee0b6ab71be3",
  "patch_info": {
    "commit_hash": "8654186b0236d556aa85528c2573ee0b6ab71be3",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/8654186b0236d556aa85528c2573ee0b6ab71be3",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/expr.c",
      "src/vdbeaux.c",
      "src/window.c"
    ],
    "message": "When an error occurs while rewriting the parser tree for window functions in the sqlite3WindowRewrite() routine, make sure that pParse->nErr is set, and make sure that this shuts down any subsequent code generation that might depend on the transformations that were implemented.  This fixes a problem discovered by the Yongheng and Rui fuzzer.\n\nFossilOrigin-Name: e2bddcd4c55ba3cbe0130332679ff4b048630d0ced9a8899982edb5a3569ba7f",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/expr.c||src/expr.c",
      "src/vdbeaux.c||src/vdbeaux.c",
      "src/window.c||src/window.c"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 4417c5bf0aabb34ed174f01afd981c924ae965a42128719d8d6735536631d12f",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/expr.c||src/expr.c": [
      "File: src/expr.c -> src/expr.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "376:   int addr;",
      "377:   CollSeq *p4;",
      "379:   if( isCommuted ){",
      "380:     p4 = sqlite3BinaryCompareCollSeq(pParse, pRight, pLeft);",
      "381:   }else{",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "379:   if( pParse->nErr ) return 0;",
      "",
      "---------------"
    ],
    "src/vdbeaux.c||src/vdbeaux.c": [
      "File: src/vdbeaux.c -> src/vdbeaux.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1304: static void vdbeVComment(Vdbe *p, const char *zFormat, va_list ap){",
      "1305:   assert( p->nOp>0 || p->aOp==0 );",
      "1307:   if( p->nOp ){",
      "1308:     assert( p->aOp );",
      "1309:     sqlite3DbFree(p->db, p->aOp[p->nOp-1].zComment);",
      "",
      "[Removed Lines]",
      "1306:   assert( p->aOp==0 || p->aOp[p->nOp-1].zComment==0 || p->db->mallocFailed );",
      "",
      "[Added Lines]",
      "1306:   assert( p->aOp==0 || p->aOp[p->nOp-1].zComment==0 || p->db->mallocFailed",
      "1307:           || p->pParse->nErr>0 );",
      "",
      "---------------"
    ],
    "src/window.c||src/window.c": [
      "File: src/window.c -> src/window.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "935:     pTab = sqlite3DbMallocZero(db, sizeof(Table));",
      "936:     if( pTab==0 ){",
      "938:     }",
      "940:     p->pSrc = 0;",
      "",
      "[Removed Lines]",
      "937:       return SQLITE_NOMEM;",
      "",
      "[Added Lines]",
      "937:       return sqlite3ErrorToParser(db, SQLITE_NOMEM);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1039:     sqlite3DbFree(db, pTab);",
      "1040:   }",
      "1042:   return rc;",
      "1043: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1042:   if( rc && pParse->nErr==0 ){",
      "1043:     assert( pParse->db->mallocFailed );",
      "1044:     return sqlite3ErrorToParser(pParse->db, SQLITE_NOMEM);",
      "1045:   }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a7ce167e5b89e45d203014fc6ad0dbbfa3d44346",
      "candidate_info": {
        "commit_hash": "a7ce167e5b89e45d203014fc6ad0dbbfa3d44346",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/a7ce167e5b89e45d203014fc6ad0dbbfa3d44346",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/upsert.c",
          "test/upsert1.test"
        ],
        "message": "Make sure OP_RealAffinity has been applied to all columns of type REAL in the excluded.* pseudo-table of an UPSERT. Ticket [5a3dba8104421320]\n\nFossilOrigin-Name: 67381dadede98a55d8d9e085d021e6fa6473071978967b6302e03b28cf2245e1",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/upsert.c||src/upsert.c",
          "test/upsert1.test||test/upsert1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 54553bf16fabd72d1967acef317beb518e086707ccd45890b7c7256b8da08b75",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/upsert.c||src/upsert.c": [
          "File: src/upsert.c -> src/upsert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "205:   sqlite3 *db = pParse->db;",
          "207:   int iDataCur;",
          "209:   assert( v!=0 );",
          "210:   assert( pUpsert!=0 );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "208:   int i;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "221:       Index *pPk = sqlite3PrimaryKeyIndex(pTab);",
          "222:       int nPk = pPk->nKeyCol;",
          "223:       int iPk = pParse->nMem+1;",
          "225:       pParse->nMem += nPk;",
          "226:       for(i=0; i<nPk; i++){",
          "227:         int k;",
          "",
          "[Removed Lines]",
          "224:       int i;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "244:   pSrc = sqlite3SrcListDup(db, pUpsert->pUpsertSrc, 0);",
          "245:   sqlite3Update(pParse, pSrc, pUpsert->pUpsertSet,",
          "246:       pUpsert->pUpsertWhere, OE_Abort, 0, 0, pUpsert);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "246:   for(i=0; i<pTab->nCol; i++){",
          "247:     if( pTab->aCol[i].affinity==SQLITE_AFF_REAL ){",
          "248:       sqlite3VdbeAddOp1(v, OP_RealAffinity, pUpsert->regData+i);",
          "249:     }",
          "250:   }",
          "",
          "---------------"
        ],
        "test/upsert1.test||test/upsert1.test": [
          "File: test/upsert1.test -> test/upsert1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "210:   SELECT * FROM t1;",
          "211: } {1 2 33 4 5}",
          "214: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "213: # 2019-08-30 ticket https://sqlite.org/src/info/5a3dba8104421320",
          "214: do_execsql_test upsert1-800 {",
          "215:   DROP TABLE IF EXISTS t0;",
          "216:   CREATE TABLE t0(c0 REAL UNIQUE, c1);",
          "217:   CREATE UNIQUE INDEX test800i0 ON t0(0 || c1);",
          "218:   INSERT INTO t0(c0, c1) VALUES (1, 2),  (2, 1);",
          "219:   INSERT INTO t0(c0) VALUES (1) ON CONFLICT(c0) DO UPDATE SET c1=excluded.c0;",
          "220:   PRAGMA integrity_check;",
          "221:   REINDEX;",
          "222: } {ok}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4afdfa195b0ae5fe3b8638c722c937792d3cfd0c",
      "candidate_info": {
        "commit_hash": "4afdfa195b0ae5fe3b8638c722c937792d3cfd0c",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/4afdfa195b0ae5fe3b8638c722c937792d3cfd0c",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbe.c",
          "test/window1.test"
        ],
        "message": "Fix the OP_OpenEphemeral opcode in the bytecode engine so that if it is called a second or subsequent time, it merely clears the existing table rather than creating a new one.  Proposed fix for ticket [d0866b26f83e9c55e30de0821f5d].\n\nFossilOrigin-Name: 4678cb1044f0b4dc813e48f3bd0f85240a66e2ecf8763280d66726cc031c93a7",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbe.c||src/vdbe.c",
          "test/window1.test||test/window1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 1bdee199a71e0a6c247b85e72de9e3a3099b7179c33288735721facef3b96459",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3659:       SQLITE_OPEN_TRANSIENT_DB;",
          "3660:   assert( pOp->p1>=0 );",
          "3661:   assert( pOp->p2>=0 );",
          "3662:   pCx = allocateCursor(p, pOp->p1, pOp->p2, -1, CURTYPE_BTREE);",
          "3663:   if( pCx==0 ) goto no_mem;",
          "3664:   pCx->nullRow = 1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3665:   pCx = p->apCsr[pOp->p1];",
          "3666:   if( pCx ){",
          "3669:     rc = sqlite3BtreeClearTable(pCx->pBtx, pCx->pgnoRoot, 0);",
          "3670:     if( rc ) goto abort_due_to_error;",
          "3671:     break;",
          "3672:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3677:     if( (pCx->pKeyInfo = pKeyInfo = pOp->p4.pKeyInfo)!=0 ){",
          "3679:       assert( pOp->p4type==P4_KEYINFO );",
          "3681:       if( rc==SQLITE_OK ){",
          "3683:         assert( pKeyInfo->db==db );",
          "3684:         assert( pKeyInfo->enc==ENC(db) );",
          "3686:                                 pKeyInfo, pCx->uc.pCursor);",
          "3687:       }",
          "3688:       pCx->isTable = 0;",
          "3689:     }else{",
          "3690:       rc = sqlite3BtreeCursor(pCx->pBtx, MASTER_ROOT, BTREE_WRCSR,",
          "3691:                               0, pCx->uc.pCursor);",
          "3692:       pCx->isTable = 1;",
          "",
          "[Removed Lines]",
          "3678:       int pgno;",
          "3680:       rc = sqlite3BtreeCreateTable(pCx->pBtx, &pgno, BTREE_BLOBKEY | pOp->p5);",
          "3682:         assert( pgno==MASTER_ROOT+1 );",
          "3685:         rc = sqlite3BtreeCursor(pCx->pBtx, pgno, BTREE_WRCSR,",
          "",
          "[Added Lines]",
          "3690:       rc = sqlite3BtreeCreateTable(pCx->pBtx, (int*)&pCx->pgnoRoot,",
          "3691:                                    BTREE_BLOBKEY | pOp->p5);",
          "3693:         assert( pCx->pgnoRoot==MASTER_ROOT+1 );",
          "3696:         rc = sqlite3BtreeCursor(pCx->pBtx, pCx->pgnoRoot, BTREE_WRCSR,",
          "3701:       pCx->pgnoRoot = MASTER_ROOT;",
          "",
          "---------------"
        ],
        "test/window1.test||test/window1.test": [
          "File: test/window1.test -> test/window1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "620:   );",
          "621: } {1 2 3}",
          "623: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "623: # 2018-12-31",
          "624: # https://www.sqlite.org/src/info/d0866b26f83e9c55",
          "625: # Window function in correlated subquery causes assertion fault",
          "626: #",
          "627: do_catchsql_test 15.0 {",
          "628:   WITH t(id, parent) AS (",
          "629:   SELECT CAST(1 AS INT), CAST(NULL AS INT)",
          "630:   UNION ALL",
          "631:   SELECT 2, NULL",
          "632:   UNION ALL",
          "633:   SELECT 3, 1",
          "634:   UNION ALL",
          "635:   SELECT 4, 1",
          "636:   UNION ALL",
          "637:   SELECT 5, 2",
          "638:   UNION ALL",
          "639:   SELECT 6, 2",
          "640:   ), q AS (",
          "641:   SELECT t.*, ROW_NUMBER() OVER (ORDER BY t.id) AS rn",
          "642:     FROM t",
          "643:    WHERE parent IS NULL",
          "644:    UNION ALL",
          "645:   SELECT t.*, ROW_NUMBER() OVER (ORDER BY t.id) AS rn",
          "646:     FROM q",
          "647:     JOIN t",
          "648:       ON t.parent = q.id",
          "649:   )",
          "650:   SELECT *",
          "651:     FROM q;",
          "652: } {1 {cannot use window functions in recursive queries}}",
          "653: do_execsql_test 15.1 {",
          "654:   DROP TABLE IF EXISTS t1;",
          "655:   DROP TABLE IF EXISTS t2;",
          "656:   CREATE TABLE t1(x);",
          "657:   INSERT INTO t1 VALUES('a'), ('b'), ('c');",
          "658:   CREATE TABLE t2(a, b);",
          "659:   INSERT INTO t2 VALUES('X', 1), ('X', 2), ('Y', 2), ('Y', 3);",
          "660:   SELECT x, (",
          "661:     SELECT sum(b)",
          "662:       OVER (PARTITION BY a ROWS BETWEEN UNBOUNDED PRECEDING",
          "663:                                     AND UNBOUNDED FOLLOWING)",
          "664:     FROM t2 WHERE b<x",
          "665:   ) FROM t1;",
          "666: } {a 3 b 3 c 3}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ca424382613ed62e80b54734231a1d1d8dd916bd",
      "candidate_info": {
        "commit_hash": "ca424382613ed62e80b54734231a1d1d8dd916bd",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/ca424382613ed62e80b54734231a1d1d8dd916bd",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in"
        ],
        "message": "Fix another problem with database freelist handling in the \".recover\" command.\n\nFossilOrigin-Name: bee2652ac26370e612a8c81dd7554befc2d523442a2fbbc77dc73479e6a0d7fd",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: afdae10424f0f3d0f10a4b73e9732aa55c5ee664814d8ca0edd372cfb17c2445",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "6454:     \"DROP TABLE IF EXISTS recovery.freelist;\"",
          "6455:     \"DROP TABLE IF EXISTS recovery.map;\"",
          "6456:     \"DROP TABLE IF EXISTS recovery.schema;\"",
          "6474:     \"CREATE TABLE recovery.freelist(pgno INTEGER PRIMARY KEY);\", zRecoveryDb",
          "6475:   );",
          "",
          "[Removed Lines]",
          "6457:     \"CREATE TABLE recovery.dbptr(\"",
          "6458:     \"      pgno, child, PRIMARY KEY(child, pgno)\"",
          "6459:     \") WITHOUT ROWID;\"",
          "6460:     \"INSERT OR IGNORE INTO recovery.dbptr(pgno, child) \"",
          "6461:     \"    SELECT * FROM sqlite_dbptr;\"",
          "6465:     \"DELETE FROM recovery.dbptr WHERE child = 1;\"",
          "6470:     \"DELETE FROM recovery.dbptr WHERE child IN (\"",
          "6471:     \"  SELECT child FROM recovery.dbptr GROUP BY child HAVING count(*)>1\"",
          "6472:     \");\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "6497:   }",
          "6499:   shellExec(pState->db, &rc,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6483:     \"CREATE TABLE recovery.dbptr(\"",
          "6484:     \"      pgno, child, PRIMARY KEY(child, pgno)\"",
          "6485:     \") WITHOUT ROWID;\"",
          "6486:     \"INSERT OR IGNORE INTO recovery.dbptr(pgno, child) \"",
          "6487:     \"    SELECT * FROM sqlite_dbptr\"",
          "6488:     \"      WHERE pgno NOT IN freelist AND child NOT IN freelist;\"",
          "6492:     \"DELETE FROM recovery.dbptr WHERE child = 1;\"",
          "6497:     \"DELETE FROM recovery.dbptr WHERE child IN (\"",
          "6498:     \"  SELECT child FROM recovery.dbptr GROUP BY child HAVING count(*)>1\"",
          "6499:     \");\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8b4d0e2cbad230860c724088bcdacaed000b2a99",
      "candidate_info": {
        "commit_hash": "8b4d0e2cbad230860c724088bcdacaed000b2a99",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/8b4d0e2cbad230860c724088bcdacaed000b2a99",
        "files": [
          "ext/fts3/fts3_write.c",
          "manifest",
          "manifest.uuid",
          "test/fts3misc.test"
        ],
        "message": "Ensure fts3/4 prefix indexes are flushed to disk before an 'optimize' command. Fix for [745f1abc].\n\nFossilOrigin-Name: 4ed905b18847d4dbf5a2570052abced338065f824137b90300f62d77b3159d80",
        "before_after_code_files": [
          "ext/fts3/fts3_write.c||ext/fts3/fts3_write.c",
          "manifest.uuid||manifest.uuid",
          "test/fts3misc.test||test/fts3misc.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/fts3_write.c||ext/fts3/fts3_write.c": [
          "File: ext/fts3/fts3_write.c -> ext/fts3/fts3_write.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3482:   int rc;",
          "3483:   sqlite3_stmt *pAllLangid = 0;",
          "3486:   if( rc==SQLITE_OK ){",
          "3487:     int rc2;",
          "3488:     sqlite3_bind_int(pAllLangid, 1, p->iPrevLangid);",
          "",
          "[Removed Lines]",
          "3485:   rc = fts3SqlStmt(p, SQL_SELECT_ALL_LANGID, &pAllLangid, 0);",
          "",
          "[Added Lines]",
          "3485:   rc = sqlite3Fts3PendingTermsFlush(p);",
          "3486:   if( rc==SQLITE_OK ){",
          "3487:     rc = fts3SqlStmt(p, SQL_SELECT_ALL_LANGID, &pAllLangid, 0);",
          "3488:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3503:   }",
          "3505:   sqlite3Fts3SegmentsClose(p);",
          "3508:   return (rc==SQLITE_OK && bReturnDone && bSeenDone) ? SQLITE_DONE : rc;",
          "3509: }",
          "",
          "[Removed Lines]",
          "3506:   sqlite3Fts3PendingTermsClear(p);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 5863546df99abd1ad4ebcaba18dec647be4368e2c13ce0b28e48c8608d3e87ef",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/fts3misc.test||test/fts3misc.test": [
          "File: test/fts3misc.test -> test/fts3misc.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "238: }",
          "240: #-------------------------------------------------------------------------",
          "241: #",
          "242: reset_db",
          "243: do_execsql_test 7.0.1 {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "241: # Ticket [8a6fa2bb].",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "266:   INSERT INTO vt0(vt0) VALUES('integrity-check');",
          "267: }",
          "271: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "269: #-------------------------------------------------------------------------",
          "270: # Ticket [745f1abc].",
          "271: #",
          "272: reset_db",
          "273: do_execsql_test 8.1 {",
          "274:   CREATE VIRTUAL TABLE vt0 USING fts4(c0, prefix=1);",
          "275: }",
          "276: do_execsql_test 8.2 {",
          "277:   BEGIN;",
          "278:     INSERT INTO vt0 VALUES (0);",
          "279:     INSERT INTO vt0(vt0) VALUES('optimize');",
          "280:   COMMIT;",
          "281: }",
          "282: do_execsql_test 8.3 {",
          "283:   INSERT INTO vt0(vt0) VALUES('integrity-check');",
          "284: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4e2d3d40dcc32a70d3a481bae9a5707fc93237fc",
      "candidate_info": {
        "commit_hash": "4e2d3d40dcc32a70d3a481bae9a5707fc93237fc",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/4e2d3d40dcc32a70d3a481bae9a5707fc93237fc",
        "files": [
          "Makefile.msc",
          "ext/session/changesetfuzz.c",
          "manifest",
          "manifest.uuid",
          "src/btree.c",
          "tool/dbtotxt.c"
        ],
        "message": "Fix harmless compiler warnings seen with MSVC.\n\nFossilOrigin-Name: 6cf8b18ec20f11c25ff7396f29c742404d3a88d5e97a5fd53ccfaff51dec3f33",
        "before_after_code_files": [
          "Makefile.msc||Makefile.msc",
          "ext/session/changesetfuzz.c||ext/session/changesetfuzz.c",
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c",
          "tool/dbtotxt.c||tool/dbtotxt.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "Makefile.msc||Makefile.msc": [
          "File: Makefile.msc -> Makefile.msc",
          "--- Hunk 1 ---",
          "[Context before]",
          "2560:  del /Q .target_source 2>NUL",
          "2561:  del /Q tclsqlite3.exe $(SQLITETCLH) $(SQLITETCLDECLSH) 2>NUL",
          "2562:  del /Q lsm.dll lsmtest.exe 2>NUL",
          "2563:  del /Q testloadext.dll 2>NUL",
          "2564:  del /Q testfixture.exe test.db 2>NUL",
          "2565:  del /Q LogEst.exe fts3view.exe rollback-test.exe showdb.exe dbdump.exe 2>NUL",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2563:  del /Q atrc.exe changesetfuzz.exe dbtotxt.exe index_usage.exe 2>NUL",
          "",
          "---------------"
        ],
        "ext/session/changesetfuzz.c||ext/session/changesetfuzz.c": [
          "File: ext/session/changesetfuzz.c -> ext/session/changesetfuzz.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "154:   pBuf = sqlite3_malloc64( sz ? sz : 1 );",
          "155:   if( pBuf==0 ){",
          "156:     fprintf(stderr, \"cannot allocate %d to hold content of \\\"%s\\\"\\n\",",
          "158:     exit(1);",
          "159:   }",
          "160:   if( sz>0 ){",
          "163:       exit(1);",
          "164:     }",
          "165:     fclose(f);",
          "166:   }",
          "169: }",
          "",
          "[Removed Lines]",
          "157:             sz, zFilename);",
          "161:     if( fread(pBuf, sz, 1, f)!=1 ){",
          "162:       fprintf(stderr, \"cannot read all %d bytes of \\\"%s\\\"\\n\", sz, zFilename);",
          "",
          "[Added Lines]",
          "157:             (int)sz, zFilename);",
          "161:     if( fread(pBuf, (size_t)sz, 1, f)!=1 ){",
          "162:       fprintf(stderr, \"cannot read all %d bytes of \\\"%s\\\"\\n\",",
          "163:               (int)sz, zFilename);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "343: static void *fuzzMalloc(sqlite3_int64 nByte){",
          "344:   void *pRet = sqlite3_malloc64(nByte);",
          "345:   if( pRet ){",
          "347:   }",
          "348:   return pRet;",
          "349: }",
          "",
          "[Removed Lines]",
          "346:     memset(pRet, 0, nByte);",
          "",
          "[Added Lines]",
          "347:     memset(pRet, 0, (size_t)nByte);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "384: static int fuzzPutVarint(u8 *p, int nVal){",
          "385:   assert( nVal>0 && nVal<2097152 );",
          "386:   if( nVal<128 ){",
          "388:     return 1;",
          "389:   }",
          "390:   if( nVal<16384 ){",
          "",
          "[Removed Lines]",
          "387:     p[0] = nVal;",
          "",
          "[Added Lines]",
          "388:     p[0] = (u8)nVal;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "459:       pGrp->aPK = p;",
          "460:       p += pGrp->nCol;",
          "461:       pGrp->zTab = (const char*)p;",
          "464:       if( p>=pEnd ){",
          "465:         rc = fuzzCorrupt();",
          "",
          "[Removed Lines]",
          "462:       p = &p[strlen(p)+1];",
          "",
          "[Added Lines]",
          "463:       p = &p[strlen((const char*)p)+1];",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "697:           int nTxt;",
          "700:           p += fuzzGetVarint(p, &nTxt);",
          "701:           printf(\"%s%s\", zPre, eType==0x03 ? \"'\" : \"X'\");",
          "702:           for(i=0; i<nTxt; i++){",
          "",
          "[Removed Lines]",
          "698:           int sz;",
          "699:           int i;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "861:           int nByte = fuzzRandomInt(48);",
          "863:           fuzzRandomBlob(nByte, &pChange->aSub[2]);",
          "864:           if( pChange->aSub[0]==0x03 ){",
          "865:             int i;",
          "",
          "[Removed Lines]",
          "862:           pChange->aSub[1] = nByte;",
          "",
          "[Added Lines]",
          "861:           pChange->aSub[1] = (u8)nByte;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1004:       }else if( p==pFuzz->pSub2 ){",
          "1005:         pCopy = pFuzz->pSub1;",
          "1006:       }else if( i==iUndef ){",
          "1008:       }",
          "1010:       if( pCopy[0]==0x00 && eNew!=eType && eType==SQLITE_UPDATE && iRec==0 ){",
          "",
          "[Removed Lines]",
          "1007:         pCopy = \"\\0\";",
          "",
          "[Added Lines]",
          "1006:         pCopy = (u8*)\"\\0\";",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1067:       for(i=0; i<pGrp->nCol; i++){",
          "1068:         int sz;",
          "1069:         u8 *pCopy = pCsr;",
          "1071:         fuzzChangeSize(pCopy, &sz);",
          "1072:         memcpy(pOut, pCopy, sz);",
          "1073:         pOut += sz;",
          "",
          "[Removed Lines]",
          "1070:         if( pGrp->aPK[i] ) pCopy = \"\\0\";",
          "",
          "[Added Lines]",
          "1069:         if( pGrp->aPK[i] ) pCopy = (u8*)\"\\0\";",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 8af0caeb6d1e55f66ad2f12af94845dccfe1d0420faf326f5917fc07f8aa6050",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "834: static int btreeRestoreCursorPosition(BtCursor *pCur){",
          "835:   int rc;",
          "837:   assert( cursorOwnsBtShared(pCur) );",
          "838:   assert( pCur->eState>=CURSOR_REQUIRESEEK );",
          "839:   if( pCur->eState==CURSOR_FAULT ){",
          "",
          "[Removed Lines]",
          "836:   int skipNext;",
          "",
          "[Added Lines]",
          "836:   int skipNext = 0;",
          "",
          "---------------"
        ],
        "tool/dbtotxt.c||tool/dbtotxt.c": [
          "File: tool/dbtotxt.c -> tool/dbtotxt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "52:   memset(bShow, '.', sizeof(bShow));",
          "53:   for(i=' '; i<='~'; i++){",
          "55:   }",
          "56:   for(i=1; i<argc; i++){",
          "57:     if( argv[i][0]=='-' ){",
          "",
          "[Removed Lines]",
          "54:     if( i!='{' && i!='}' && i!='\"' && i!='\\\\' ) bShow[i] = i;",
          "",
          "[Added Lines]",
          "54:     if( i!='{' && i!='}' && i!='\"' && i!='\\\\' ) bShow[i] = (unsigned char)i;",
          "",
          "---------------"
        ]
      }
    }
  ]
}