{
  "cve_id": "CVE-2021-20223",
  "cve_desc": "",
  "repo": "sqlite/sqlite",
  "patch_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
  "patch_info": {
    "commit_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "files": [
      "ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Prevent fts5 tokenizer unicode61 from considering '\\0' to be a token characters, even if other characters of class \"Cc\" are.\n\nFossilOrigin-Name: b7b7bde9b7a03665e3691c6d51118965f216d2dfb1617f138b9f9e60e418ed2f",
    "before_after_code_files": [
      "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
      "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c"
    ],
    "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test": [
      "File: ext/fts5/test/fts5tok1.test -> ext/fts5/test/fts5tok1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:   SELECT * FROM t4;",
      "112: } {1 {SQL logic error}}",
      "115: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114: #-------------------------------------------------------------------------",
      "115: # Embedded 0x00 characters.",
      "116: #",
      "117: reset_db",
      "118: do_execsql_test 3.1.0 {",
      "119:   CREATE VIRTUAL TABLE t1 USING fts5(z);",
      "120:   CREATE VIRTUAL TABLE tt USING fts5vocab(t1, 'instance');",
      "121:   INSERT INTO t1 VALUES('abc' || char(0) || 'def');",
      "122:   SELECT * FROM tt;",
      "123: } { abc 1 z 0 def 1 z 1 }",
      "124: do_execsql_test 3.1.1 {",
      "125:   SELECT hex(z) FROM t1;",
      "126: } {61626300646566}",
      "127: do_execsql_test 3.1.2 {",
      "128:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "129: } {}",
      "131: do_execsql_test 3.2.0 {",
      "132:   CREATE VIRTUAL TABLE t2 USING fts5(z,",
      "133:       tokenize=\"unicode61 categories 'L* N* Co Cc'\"",
      "134:   );",
      "135:   CREATE VIRTUAL TABLE tu USING fts5vocab(t2, 'instance');",
      "137:   INSERT INTO t2 VALUES('abc' || char(0) || 'def');",
      "138:   SELECT * FROM tu;",
      "139: } { abc 1 z 0 def 1 z 1 }",
      "141: do_execsql_test 3.2.1 {",
      "142:   SELECT hex(z) FROM t1;",
      "143: } {61626300646566}",
      "145: do_execsql_test 3.2.2 {",
      "146:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "147: } {}",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 0e7e113d9f2c929c1f8a85e2cfad8e2e60f0e8770212b5e5320fb2a2c42911f8",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "4ea562ee7007f184b53faa4a2bbdbfa70d0dbe9c",
      "candidate_info": {
        "commit_hash": "4ea562ee7007f184b53faa4a2bbdbfa70d0dbe9c",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/4ea562ee7007f184b53faa4a2bbdbfa70d0dbe9c",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/select.c",
          "src/sqliteInt.h",
          "src/window.c",
          "test/window1.test"
        ],
        "message": "Ensure that when code for a scalar SELECT featuring window functions is generated more than once by the planner, separate ephemeral tables are opened for each instance.\n\nFossilOrigin-Name: ce1417325273aba866767349b55d9bbfb61a08e716bebda2122918a9657ee38c",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/select.c||src/select.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/window.c||src/window.c",
          "test/window1.test||test/window1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 07e504d5174a1a8b1aa05ec5b44ac81ab3ea706c5a098caa88deb3d489cec8fb",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "6177: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "6179:     if( pWin ){",
          "6181:     }",
          "6182: #endif",
          "6183:     assert( WHERE_USE_LIMIT==SF_FixedLimit );",
          "",
          "[Removed Lines]",
          "6180:       sqlite3WindowCodeInit(pParse, pWin);",
          "",
          "[Added Lines]",
          "6180:       sqlite3WindowCodeInit(pParse, p);",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "3727: void sqlite3WindowAttach(Parse*, Expr*, Window*);",
          "3728: void sqlite3WindowLink(Select *pSel, Window *pWin);",
          "3729: int sqlite3WindowCompare(Parse*, Window*, Window*, int);",
          "3731: void sqlite3WindowCodeStep(Parse*, Select*, WhereInfo*, int, int);",
          "3732: int sqlite3WindowRewrite(Parse*, Select*);",
          "3733: int sqlite3ExpandSubquery(Parse*, struct SrcList_item*);",
          "",
          "[Removed Lines]",
          "3730: void sqlite3WindowCodeInit(Parse*, Window*);",
          "",
          "[Added Lines]",
          "3730: void sqlite3WindowCodeInit(Parse*, Select*);",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1033:         p->pSrc->a[0].pTab = pTab;",
          "1034:         pTab = pTab2;",
          "1035:       }",
          "1040:     }else{",
          "1041:       sqlite3SelectDelete(db, pSub);",
          "1042:     }",
          "",
          "[Removed Lines]",
          "1036:       sqlite3VdbeAddOp2(v, OP_OpenEphemeral, pMWin->iEphCsr, pSublist->nExpr);",
          "1037:       sqlite3VdbeAddOp2(v, OP_OpenDup, pMWin->iEphCsr+1, pMWin->iEphCsr);",
          "1038:       sqlite3VdbeAddOp2(v, OP_OpenDup, pMWin->iEphCsr+2, pMWin->iEphCsr);",
          "1039:       sqlite3VdbeAddOp2(v, OP_OpenDup, pMWin->iEphCsr+3, pMWin->iEphCsr);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1312:   Window *pWin;",
          "1313:   Vdbe *v = sqlite3GetVdbe(pParse);",
          "1317:   if( pMWin->pPartition ){",
          "",
          "[Removed Lines]",
          "1311: void sqlite3WindowCodeInit(Parse *pParse, Window *pMWin){",
          "",
          "[Added Lines]",
          "1307: void sqlite3WindowCodeInit(Parse *pParse, Select *pSelect){",
          "1308:   int nEphExpr = pSelect->pSrc->a[0].pSelect->pEList->nExpr;",
          "1309:   Window *pMWin = pSelect->pWin;",
          "1313:   sqlite3VdbeAddOp2(v, OP_OpenEphemeral, pMWin->iEphCsr, nEphExpr);",
          "1314:   sqlite3VdbeAddOp2(v, OP_OpenDup, pMWin->iEphCsr+1, pMWin->iEphCsr);",
          "1315:   sqlite3VdbeAddOp2(v, OP_OpenDup, pMWin->iEphCsr+2, pMWin->iEphCsr);",
          "1316:   sqlite3VdbeAddOp2(v, OP_OpenDup, pMWin->iEphCsr+3, pMWin->iEphCsr);",
          "",
          "---------------"
        ],
        "test/window1.test||test/window1.test": [
          "File: test/window1.test -> test/window1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1531:   );",
          "1532: } {2000 2000 10000}",
          "1534: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1534: #-------------------------------------------------------------------------",
          "1535: reset_db",
          "1536: do_execsql_test 46.1 {",
          "1537:   CREATE TABLE t1 (a);",
          "1538:   CREATE INDEX i1 ON t1(a);",
          "1540:   INSERT INTO t1 VALUES (10);",
          "1541: }",
          "1543: do_execsql_test 46.2 {",
          "1544:   SELECT (SELECT sum(a) OVER(ORDER BY a)) FROM t1",
          "1545: } 10",
          "1547: do_execsql_test 46.3 {",
          "1548:   SELECT * FROM t1 WHERE (SELECT sum(a) OVER(ORDER BY a));",
          "1549: } 10",
          "1551: do_execsql_test 46.4 {",
          "1552:   SELECT * FROM t1 NATURAL JOIN t1",
          "1553:     WHERE a=1",
          "1554:     OR ((SELECT sum(a)OVER(ORDER BY a)) AND a<=10)",
          "1555: } 10",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "49a76a8fe5272426fee553d10111e5cf0babd571",
      "candidate_info": {
        "commit_hash": "49a76a8fe5272426fee553d10111e5cf0babd571",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/49a76a8fe5272426fee553d10111e5cf0babd571",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/analyze.c",
          "src/pragma.c",
          "src/pragma.h",
          "src/sqliteInt.h",
          "tool/mkpragmatab.tcl"
        ],
        "message": "Add \"PRAGMA analysis_limit=N;\" to limit the number of rows visited by ANALYZE when N is positive.  Positive N also disables collecting stat4.\n\nFossilOrigin-Name: a279b151c1623807774daf4975175c62ea252eefb71f9820ced6773769b392c5",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/analyze.c||src/analyze.c",
          "src/pragma.c||src/pragma.c",
          "src/pragma.h||src/pragma.h",
          "src/sqliteInt.h||src/sqliteInt.h",
          "tool/mkpragmatab.tcl||tool/mkpragmatab.tcl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: c705ce266ad25af71791035590875f0ea9f2c72826b3eda17f065d2bf091de92",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/analyze.c||src/analyze.c": [
          "File: src/analyze.c -> src/analyze.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "441:   p->db = db;",
          "442:   p->nEst = sqlite3_value_int64(argv[2]);",
          "443:   p->nRow = 0;",
          "444:   p->nCol = nCol;",
          "445:   p->nKeyCol = nKeyCol;",
          "446:   p->nSkipAhead = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "446:   p->nLimit = sqlite3_value_int64(argv[3]);",
          "447: #ifdef SQLITE_ENABLE_STAT4",
          "449:   if( p->nLimit>0 ) p->mxSample = 0;",
          "450: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "677: }",
          "",
          "[Removed Lines]",
          "685: #ifndef SQLITE_ANALYZE_LIMIT",
          "686: # define SQLITE_ANALYZE_LIMIT 0",
          "687: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "774:     }",
          "775:   }else",
          "776: #endif",
          "779:     p->nSkipAhead++;",
          "780:     sqlite3_result_int(context, p->current.anDLt[0]>0);",
          "781:   }",
          "785: }",
          "787: static const FuncDef statPushFuncdef = {",
          "",
          "[Removed Lines]",
          "777: #if SQLITE_ANALYZE_LIMIT",
          "778:   if( p->nRow>SQLITE_ANALYZE_LIMIT*(p->nSkipAhead+1) ){",
          "782: #else",
          "783:   {}",
          "784: #endif",
          "",
          "[Added Lines]",
          "775:   if( p->nLimit && p->nRow>p->nLimit*(p->nSkipAhead+1) ){",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1131:       VdbeCoverage(v);",
          "1132:       sqlite3VdbeAddOp3(v, OP_Count, iIdxCur, regTemp, 1);",
          "1133:     }",
          "1135:                                &statInitFuncdef, 0);",
          "",
          "[Removed Lines]",
          "1134:     sqlite3VdbeAddFunctionCall(pParse, 0, regStat+1, regStat, 3,",
          "",
          "[Added Lines]",
          "1129:     assert( regTemp2==regStat+4 );",
          "1130:     sqlite3VdbeAddOp2(v, OP_Integer, db->nAnalysisLimit, regTemp2);",
          "1131:     sqlite3VdbeAddFunctionCall(pParse, 0, regStat+1, regStat, 4,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1230: #endif",
          "1231:     assert( regChng==(regStat+1) );",
          "1232:     {",
          "1234:       sqlite3VdbeAddFunctionCall(pParse, 1, regStat, regTemp, 2+IsStat4,",
          "1235:                                  &statPushFuncdef, 0);",
          "1243:     }",
          "",
          "[Removed Lines]",
          "1233:       int j1, j2, j3;",
          "1236:       j1 = sqlite3VdbeAddOp1(v, OP_IsNull, regTemp);",
          "1237:       j2 = sqlite3VdbeAddOp1(v, OP_If, regTemp);",
          "1238:       j3 = sqlite3VdbeAddOp4Int(v, OP_SeekGT, iIdxCur, 0, regPrev, 1);",
          "1239:       sqlite3VdbeJumpHere(v, j1);",
          "1240:       sqlite3VdbeAddOp2(v, OP_Next, iIdxCur, addrNextRow); VdbeCoverage(v);",
          "1241:       sqlite3VdbeJumpHere(v, j2);",
          "1242:       sqlite3VdbeJumpHere(v, j3);",
          "",
          "[Added Lines]",
          "1232:       if( db->nAnalysisLimit ){",
          "1233:         int j1, j2, j3;",
          "1234:         j1 = sqlite3VdbeAddOp1(v, OP_IsNull, regTemp); VdbeCoverage(v);",
          "1235:         j2 = sqlite3VdbeAddOp1(v, OP_If, regTemp); VdbeCoverage(v);",
          "1236:         j3 = sqlite3VdbeAddOp4Int(v, OP_SeekGT, iIdxCur, 0, regPrev, 1);",
          "1237:         sqlite3VdbeJumpHere(v, j1);",
          "1238:         sqlite3VdbeAddOp2(v, OP_Next, iIdxCur, addrNextRow); VdbeCoverage(v);",
          "1239:         sqlite3VdbeJumpHere(v, j2);",
          "1240:         sqlite3VdbeJumpHere(v, j3);",
          "1241:       }else{",
          "1242:         sqlite3VdbeAddOp2(v, OP_Next, iIdxCur, addrNextRow); VdbeCoverage(v);",
          "1243:       }",
          "",
          "---------------"
        ],
        "src/pragma.c||src/pragma.c": [
          "File: src/pragma.c -> src/pragma.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2176:     break;",
          "2177:   }",
          "2179: #if defined(SQLITE_DEBUG) || defined(SQLITE_TEST)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2186:   case PragTyp_ANALYSIS_LIMIT: {",
          "2187:     sqlite3_int64 N;",
          "2188:     if( zRight",
          "2189:      && sqlite3DecOrHexToI64(zRight, &N)==SQLITE_OK",
          "2190:      && N>=0",
          "2191:     ){",
          "2192:       db->nAnalysisLimit = (int)(N&0x7fffffff);",
          "2193:     }",
          "2194:     returnSingleInt(v, db->nAnalysisLimit);",
          "2195:     break;",
          "2196:   }",
          "",
          "---------------"
        ],
        "src/pragma.h||src/pragma.h": [
          "File: src/pragma.h -> src/pragma.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: #define PragTyp_ACTIVATE_EXTENSIONS            0",
          "",
          "[Removed Lines]",
          "9: #define PragTyp_HEADER_VALUE                   1",
          "10: #define PragTyp_AUTO_VACUUM                    2",
          "11: #define PragTyp_FLAG                           3",
          "12: #define PragTyp_BUSY_TIMEOUT                   4",
          "13: #define PragTyp_CACHE_SIZE                     5",
          "14: #define PragTyp_CACHE_SPILL                    6",
          "15: #define PragTyp_CASE_SENSITIVE_LIKE            7",
          "16: #define PragTyp_COLLATION_LIST                 8",
          "17: #define PragTyp_COMPILE_OPTIONS                9",
          "18: #define PragTyp_DATA_STORE_DIRECTORY          10",
          "19: #define PragTyp_DATABASE_LIST                 11",
          "20: #define PragTyp_DEFAULT_CACHE_SIZE            12",
          "21: #define PragTyp_ENCODING                      13",
          "22: #define PragTyp_FOREIGN_KEY_CHECK             14",
          "23: #define PragTyp_FOREIGN_KEY_LIST              15",
          "24: #define PragTyp_FUNCTION_LIST                 16",
          "25: #define PragTyp_HARD_HEAP_LIMIT               17",
          "26: #define PragTyp_INCREMENTAL_VACUUM            18",
          "27: #define PragTyp_INDEX_INFO                    19",
          "28: #define PragTyp_INDEX_LIST                    20",
          "29: #define PragTyp_INTEGRITY_CHECK               21",
          "30: #define PragTyp_JOURNAL_MODE                  22",
          "31: #define PragTyp_JOURNAL_SIZE_LIMIT            23",
          "32: #define PragTyp_LOCK_PROXY_FILE               24",
          "33: #define PragTyp_LOCKING_MODE                  25",
          "34: #define PragTyp_PAGE_COUNT                    26",
          "35: #define PragTyp_MMAP_SIZE                     27",
          "36: #define PragTyp_MODULE_LIST                   28",
          "37: #define PragTyp_OPTIMIZE                      29",
          "38: #define PragTyp_PAGE_SIZE                     30",
          "39: #define PragTyp_PRAGMA_LIST                   31",
          "40: #define PragTyp_SECURE_DELETE                 32",
          "41: #define PragTyp_SHRINK_MEMORY                 33",
          "42: #define PragTyp_SOFT_HEAP_LIMIT               34",
          "43: #define PragTyp_SYNCHRONOUS                   35",
          "44: #define PragTyp_TABLE_INFO                    36",
          "45: #define PragTyp_TEMP_STORE                    37",
          "46: #define PragTyp_TEMP_STORE_DIRECTORY          38",
          "47: #define PragTyp_THREADS                       39",
          "48: #define PragTyp_WAL_AUTOCHECKPOINT            40",
          "49: #define PragTyp_WAL_CHECKPOINT                41",
          "50: #define PragTyp_LOCK_STATUS                   42",
          "51: #define PragTyp_STATS                         43",
          "",
          "[Added Lines]",
          "9: #define PragTyp_ANALYSIS_LIMIT                 1",
          "10: #define PragTyp_HEADER_VALUE                   2",
          "11: #define PragTyp_AUTO_VACUUM                    3",
          "12: #define PragTyp_FLAG                           4",
          "13: #define PragTyp_BUSY_TIMEOUT                   5",
          "14: #define PragTyp_CACHE_SIZE                     6",
          "15: #define PragTyp_CACHE_SPILL                    7",
          "16: #define PragTyp_CASE_SENSITIVE_LIKE            8",
          "17: #define PragTyp_COLLATION_LIST                 9",
          "18: #define PragTyp_COMPILE_OPTIONS               10",
          "19: #define PragTyp_DATA_STORE_DIRECTORY          11",
          "20: #define PragTyp_DATABASE_LIST                 12",
          "21: #define PragTyp_DEFAULT_CACHE_SIZE            13",
          "22: #define PragTyp_ENCODING                      14",
          "23: #define PragTyp_FOREIGN_KEY_CHECK             15",
          "24: #define PragTyp_FOREIGN_KEY_LIST              16",
          "25: #define PragTyp_FUNCTION_LIST                 17",
          "26: #define PragTyp_HARD_HEAP_LIMIT               18",
          "27: #define PragTyp_INCREMENTAL_VACUUM            19",
          "28: #define PragTyp_INDEX_INFO                    20",
          "29: #define PragTyp_INDEX_LIST                    21",
          "30: #define PragTyp_INTEGRITY_CHECK               22",
          "31: #define PragTyp_JOURNAL_MODE                  23",
          "32: #define PragTyp_JOURNAL_SIZE_LIMIT            24",
          "33: #define PragTyp_LOCK_PROXY_FILE               25",
          "34: #define PragTyp_LOCKING_MODE                  26",
          "35: #define PragTyp_PAGE_COUNT                    27",
          "36: #define PragTyp_MMAP_SIZE                     28",
          "37: #define PragTyp_MODULE_LIST                   29",
          "38: #define PragTyp_OPTIMIZE                      30",
          "39: #define PragTyp_PAGE_SIZE                     31",
          "40: #define PragTyp_PRAGMA_LIST                   32",
          "41: #define PragTyp_SECURE_DELETE                 33",
          "42: #define PragTyp_SHRINK_MEMORY                 34",
          "43: #define PragTyp_SOFT_HEAP_LIMIT               35",
          "44: #define PragTyp_SYNCHRONOUS                   36",
          "45: #define PragTyp_TABLE_INFO                    37",
          "46: #define PragTyp_TEMP_STORE                    38",
          "47: #define PragTyp_TEMP_STORE_DIRECTORY          39",
          "48: #define PragTyp_THREADS                       40",
          "49: #define PragTyp_WAL_AUTOCHECKPOINT            41",
          "50: #define PragTyp_WAL_CHECKPOINT                42",
          "51: #define PragTyp_LOCK_STATUS                   43",
          "52: #define PragTyp_STATS                         44",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "141: #endif",
          "142: #if !defined(SQLITE_OMIT_SCHEMA_VERSION_PRAGMAS)",
          "143:  {/* zName:     */ \"application_id\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "143:  {/* zName:     */ \"analysis_limit\",",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h"
        ],
        "tool/mkpragmatab.tcl||tool/mkpragmatab.tcl": [
          "File: tool/mkpragmatab.tcl -> tool/mkpragmatab.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "382:   NAME: threads",
          "383:   FLAG: Result0",
          "385:   NAME: optimize",
          "386:   FLAG: Result1 NeedSchema",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "385:   NAME: analysis_limit",
          "386:   FLAG: Result0",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5c10930fa9df10de8bc50859cf4289bf3ddb4d97",
      "candidate_info": {
        "commit_hash": "5c10930fa9df10de8bc50859cf4289bf3ddb4d97",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/5c10930fa9df10de8bc50859cf4289bf3ddb4d97",
        "files": [
          "ext/fts3/fts3.c",
          "manifest",
          "manifest.uuid",
          "test/fts3corrupt6.test"
        ],
        "message": "Fix a case where a corrupted fts3 record could cause an assert() failure, or spurious SQLITE_NOMEM error in builds with assert() disabled.\n\nFossilOrigin-Name: d48af4d2cfff3d5f4ccc3db5d658e8b503255b577e6e62b5c2b4a4437875b895",
        "before_after_code_files": [
          "ext/fts3/fts3.c||ext/fts3/fts3.c",
          "manifest.uuid||manifest.uuid",
          "test/fts3corrupt6.test||test/fts3corrupt6.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/fts3.c||ext/fts3/fts3.c": [
          "File: ext/fts3/fts3.c -> ext/fts3/fts3.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5560:         }else",
          "5561: #endif",
          "5562:         {",
          "5564:         }",
          "5565:         break;",
          "5566:       }",
          "",
          "[Removed Lines]",
          "5563:           bHit = (pExpr->bEof==0 && pExpr->iDocid==pCsr->iPrevId);",
          "",
          "[Added Lines]",
          "5563:           bHit = (",
          "5564:               pExpr->bEof==0 && pExpr->iDocid==pCsr->iPrevId",
          "5565:            && pExpr->pPhrase->doclist.nList>0",
          "5566:           );",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 6e6b3729e0549de028f6c5bf494b2d69d621c81b61a1dc0a329d3950039342fb",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/fts3corrupt6.test||test/fts3corrupt6.test": [
          "File: test/fts3corrupt6.test -> test/fts3corrupt6.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2020 June 8",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #*************************************************************************",
          "11: # This file implements regression tests for SQLite library.  The",
          "12: # focus of this script is testing the FTS3 module.",
          "13: #",
          "14: # $Id: fts3aa.test,v 1.1 2007/08/20 17:38:42 shess Exp $",
          "15: #",
          "17: set testdir [file dirname $argv0]",
          "18: source $testdir/tester.tcl",
          "19: source $testdir/fts3_common.tcl",
          "20: set testprefix fts3corrupt6",
          "22: # If SQLITE_ENABLE_FTS3 is defined, omit this file.",
          "23: ifcapable !fts3 {",
          "24:   finish_test",
          "25:   return",
          "26: }",
          "28: set ::saved_sqlite_fts3_enable_parentheses $::sqlite_fts3_enable_parentheses",
          "29: set sqlite_fts3_enable_parentheses 1",
          "30: sqlite3_fts3_may_be_corrupt 1",
          "31: database_may_be_corrupt",
          "33: do_execsql_test 1.0 {",
          "34:   BEGIN TRANSACTION;",
          "35:   CREATE TABLE t_content(col0 INTEGER);",
          "36:   PRAGMA writable_schema=ON;",
          "37:   CREATE VIRTUAL TABLE t0 USING fts3(col0 INTEGER PRIMARY KEY,col1 VARCHAR(8),col2 BINARY,col3 BINARY);",
          "38:   INSERT INTO t0_content VALUES(0,NULL,NULL,NULL,NULL);",
          "39:   INSERT INTO t0_segdir VALUES(0,0,0,0,'0 42',X'000131030102000103323334050101010200000461616161050101020200000462626262050101030200');",
          "40:   COMMIT;",
          "41: }",
          "43: do_execsql_test 1.1 {",
          "44:   SELECT 0+matchinfo(t0,'yxyyxy') FROM t0 WHERE t0 MATCH CAST( x'2b0a312b0a312a312a2a0b5d0a0b0b0a312a0a0b0b0a312a0b310a392a0b0a27312a2a0b5d0a312a0b310a31315d0b310a312a316d2a0b313b15bceaa50a312a0b0a27312a2a0b5d0a312a0b310a312b0b2a310a312a0b2a0b2a0b2e5d0a0bff313336e34a2a312a0b0a3c310b0a0b4b4b0b4b2a4bec40322b2a0b310a0a312a0a0a0a0a0a0a0a0a0b310a312a2a2a0b5d0a0b0b0a312a0b310a312a0b0a4e4541530b310a5df5ced70a0a0a0a0a4f520a0a0a0a0a0a0a312a0b0a4e4541520b310a5d616161610a0a0a0a4f520a0a0a0a0a0a312b0a312a312a0a0a0a0a0a0a004a0b0a310b220a0b0a310a4a22310a0b0a7e6fe0e0e030e0e0e0e0e01176e02000e0e0e0e0e01131320226310a0b0a310a4a22310a0b0a310a766f8b8b4ee0e0300ae0090909090909090909090909090909090909090909090909090909090909090947aaaa540b09090909090909090909090909090909090909090909090909090909090909fae0e0f2f22164e0e0f273e07fefefef7d6dfafafafa6d6d6d6d' AS TEXT);",
          "45: } {0}",
          "47: do_execsql_test 1.2 {",
          "48:   CREATE VIRTUAL TABLE t1 USING fts3(col0 INTEGER PRIMARY KEY,col1 VARCHAR(8),col2 BINARY,col3 BINARY);",
          "49:   INSERT INTO t1_content VALUES(0,NULL,NULL,NULL,NULL);",
          "50:   INSERT INTO t1_segdir VALUES(0,0,0,0,'0 42',X'000131030102000103323334050101010200000461616161050101020200000462626262050101030200');",
          "51: }",
          "53: do_execsql_test 1.3 {",
          "54:   SELECT 42+matchinfo(t1,'yxyyxy')  FROM t1 WHERE t1 MATCH  x'2b0a312b0a312a312a2a0b5d0a0b0b0a312a0a0b0b0a312a0b310a392a0b0a27312a2a0b5d0a312a0b310a31315d0b310a312a316d2a0b313b15bceaa50a312a0b0a27312a2a0b5d0a312a0b310a312b0b2a310a312a0b2a0b2a0b2e5d0a0bff313336e34a2a312a0b0a3c310b0a0b4b4b0b4b2a4bec40322b2a0b310a0a312a0a0a0a0a0a0a0a0a0b310a312a2a2a0b5d0a0b0b0a312a0b310a312a0b0a4e4541530b310a5df5ced70a0a0a0a0a4f520a0a0a0a0a0a0a312a0b0a4e4541520b310a5d616161610a0a0a0a4f520a0a0a0a0a0a312b0a312a312a0a0a0a0a0a0a004a0b0a310b220a0b0a310a4a22310a0b0a7e6fe0e0e030e0e0e0e0e01176e02000e0e0e0e0e01131320226310a0b0a310a4a22310a0b0a310a766f8b8b4ee0e0300ae0090909090909090909090909090909090909090909090909090909090909090947aaaa540b09090909090909090909090909090909090909090909090909090909090909fae0e0f2f22164e0e0f273e07fefefef7d6dfafafafa6d6d6d6d';",
          "55: } {42}",
          "57: set sqlite_fts3_enable_parentheses $saved_sqlite_fts3_enable_parentheses",
          "58: finish_test",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c1f73e29bface8ad10820274ce37b79fc581b1fe",
      "candidate_info": {
        "commit_hash": "c1f73e29bface8ad10820274ce37b79fc581b1fe",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/c1f73e29bface8ad10820274ce37b79fc581b1fe",
        "files": [
          "manifest",
          "manifest.uuid",
          "tool/showdb.c"
        ],
        "message": "For the showdb utility program, more accurate detection of when the database is in autovacuum mode for the \"pgidx\" subcommand.\n\nFossilOrigin-Name: 9ce2192b81a81bb8928e3184664694ed2f863ce41c2777cdc35e6b61486aea46",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "tool/showdb.c||tool/showdb.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: db4fb3503c4e1e40d7bd140187014e8f0cc186c441a0c7462987c77e2c83136a",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tool/showdb.c||tool/showdb.c": [
          "File: tool/showdb.c -> tool/showdb.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "958: static void page_usage_ptrmap(unsigned char *a){",
          "960:     int usable = g.pagesize - a[20];",
          "961:     int pgno = 2;",
          "962:     int perPage = usable/5;",
          "",
          "[Removed Lines]",
          "959:   if( a[55] ){",
          "",
          "[Added Lines]",
          "959:   if( decodeInt32(a+52) ){",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "74a07986cee851014e2bd154e0376768cd4d07b5",
      "candidate_info": {
        "commit_hash": "74a07986cee851014e2bd154e0376768cd4d07b5",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/74a07986cee851014e2bd154e0376768cd4d07b5",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/resolve.c",
          "src/select.c",
          "src/sqliteInt.h"
        ],
        "message": "Fix to the recomputation of the colUsed field added by check-in [a9bb71ba708ba722].  This fixes ticket [5829597ac43811e3].\n\nFossilOrigin-Name: 5d14a1c4f2fc17de98ad685ad1422cdfda89dfccb00afcaf32ee416b6f84f525",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/resolve.c||src/resolve.c",
          "src/select.c||src/select.c",
          "src/sqliteInt.h||src/sqliteInt.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 8a5c539b77aa174c048a504d211c56902075f9b42b654e1f8cc5767739e5fcc9",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/resolve.c||src/resolve.c": [
          "File: src/resolve.c -> src/resolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "175:   }",
          "176: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "182: Bitmask sqlite3ExprColUsed(Expr *pExpr){",
          "183:   int n;",
          "184:   Table *pExTab;",
          "186:   n = pExpr->iColumn;",
          "187:   pExTab = pExpr->y.pTab;",
          "188:   assert( pExTab!=0 );",
          "189:   if( (pExTab->tabFlags & TF_HasGenerated)!=0",
          "190:    && (pExTab->aCol[n].colFlags & COLFLAG_GENERATED)!=0",
          "191:   ){",
          "192:     testcase( pExTab->nCol==BMS-1 );",
          "193:     testcase( pExTab->nCol==BMS );",
          "194:     return pExTab->nCol>=BMS ? ALLBITS : MASKBIT(pExTab->nCol)-1;",
          "195:   }else{",
          "196:     testcase( n==BMS-1 );",
          "197:     testcase( n==BMS );",
          "198:     if( n>=BMS ) n = BMS-1;",
          "199:     return ((Bitmask)1)<<n;",
          "200:   }",
          "201: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "579:   if( pExpr->iColumn>=0 && pMatch!=0 ){",
          "596:   }",
          "",
          "[Removed Lines]",
          "580:     int n = pExpr->iColumn;",
          "581:     Table *pExTab = pExpr->y.pTab;",
          "582:     assert( pExTab!=0 );",
          "583:     assert( pMatch->iCursor==pExpr->iTable );",
          "584:     if( (pExTab->tabFlags & TF_HasGenerated)!=0",
          "585:      && (pExTab->aCol[n].colFlags & COLFLAG_GENERATED)!=0",
          "586:     ){",
          "587:       testcase( pExTab->nCol==BMS-1 );",
          "588:       testcase( pExTab->nCol==BMS );",
          "589:       pMatch->colUsed = pExTab->nCol>=BMS ? ALLBITS : MASKBIT(pExTab->nCol)-1;",
          "590:     }else{",
          "591:       testcase( n==BMS-1 );",
          "592:       testcase( n==BMS );",
          "593:       if( n>=BMS ) n = BMS-1;",
          "594:       pMatch->colUsed |= ((Bitmask)1)<<n;",
          "595:     }",
          "",
          "[Added Lines]",
          "605:     pMatch->colUsed |= sqlite3ExprColUsed(pExpr);",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3591: static int recomputeColumnsUsedExpr(Walker *pWalker, Expr *pExpr){",
          "3592:   struct SrcList_item *pItem;",
          "3594:   if( pExpr->op!=TK_COLUMN ) return WRC_Continue;",
          "3595:   pItem = pWalker->u.pSrcItem;",
          "3596:   if( pItem->iCursor!=pExpr->iTable ) return WRC_Continue;",
          "3601:   return WRC_Continue;",
          "3602: }",
          "3603: static void recomputeColumnsUsed(",
          "",
          "[Removed Lines]",
          "3593:   ynVar iCol;",
          "3597:   iCol = pExpr->iColumn;",
          "3598:   if( iCol<0 ) return WRC_Continue;",
          "3599:   if( iCol>=BMS ) iCol = BMS-1;",
          "3600:   pItem->colUsed |= ((Bitmask)1)<<iCol;",
          "",
          "[Added Lines]",
          "3596:   if( pExpr->iColumn<0 ) return WRC_Continue;",
          "3597:   pItem->colUsed |= sqlite3ExprColUsed(pExpr);",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "4551:   const char*,",
          "4552:   const char*",
          "4553: );",
          "4554: int sqlite3ResolveExprNames(NameContext*, Expr*);",
          "4555: int sqlite3ResolveExprListNames(NameContext*, ExprList*);",
          "4556: void sqlite3ResolveSelectNames(Parse*, Select*, NameContext*);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4554: Bitmask sqlite3ExprColUsed(Expr*);",
          "",
          "---------------"
        ]
      }
    }
  ]
}