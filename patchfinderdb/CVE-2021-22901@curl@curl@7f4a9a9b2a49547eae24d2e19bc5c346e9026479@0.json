{
  "cve_id": "CVE-2021-22901",
  "cve_desc": "curl 7.75.0 through 7.76.1 suffers from a use-after-free vulnerability resulting in already freed memory being used when a TLS 1.3 session ticket arrives over a connection. A malicious server can use this in rare unfortunate circumstances to potentially reach remote code execution in the client. When libcurl at run-time sets up support for TLS 1.3 session tickets on a connection using OpenSSL, it stores pointers to the transfer in-memory object for later retrieval when a session ticket arrives. If the connection is used by multiple transfers (like with a reused HTTP/1.1 connection or multiplexed HTTP/2 connection) that first transfer object might be freed before the new session is established on that connection and then the function will access a memory buffer that might be freed. When using that memory, libcurl might even call a function pointer in the object, making it possible for a remote code execution if the server could somehow manage to get crafted memory content into the correct place in memory.",
  "repo": "curl/curl",
  "patch_hash": "7f4a9a9b2a49547eae24d2e19bc5c346e9026479",
  "patch_info": {
    "commit_hash": "7f4a9a9b2a49547eae24d2e19bc5c346e9026479",
    "repo": "curl/curl",
    "commit_url": "https://github.com/curl/curl/commit/7f4a9a9b2a49547eae24d2e19bc5c346e9026479",
    "files": [
      "lib/multi.c",
      "lib/vtls/gskit.c",
      "lib/vtls/gtls.c",
      "lib/vtls/mbedtls.c",
      "lib/vtls/mesalink.c",
      "lib/vtls/nss.c",
      "lib/vtls/openssl.c",
      "lib/vtls/rustls.c",
      "lib/vtls/schannel.c",
      "lib/vtls/sectransp.c",
      "lib/vtls/vtls.c",
      "lib/vtls/vtls.h",
      "lib/vtls/wolfssl.c"
    ],
    "message": "openssl: associate/detach the transfer from connection\n\nCVE-2021-22901\n\nBug: https://curl.se/docs/CVE-2021-22901.html",
    "before_after_code_files": [
      "lib/multi.c||lib/multi.c",
      "lib/vtls/gskit.c||lib/vtls/gskit.c",
      "lib/vtls/gtls.c||lib/vtls/gtls.c",
      "lib/vtls/mbedtls.c||lib/vtls/mbedtls.c",
      "lib/vtls/mesalink.c||lib/vtls/mesalink.c",
      "lib/vtls/nss.c||lib/vtls/nss.c",
      "lib/vtls/openssl.c||lib/vtls/openssl.c",
      "lib/vtls/rustls.c||lib/vtls/rustls.c",
      "lib/vtls/schannel.c||lib/vtls/schannel.c",
      "lib/vtls/sectransp.c||lib/vtls/sectransp.c",
      "lib/vtls/vtls.c||lib/vtls/vtls.c",
      "lib/vtls/vtls.h||lib/vtls/vtls.h",
      "lib/vtls/wolfssl.c||lib/vtls/wolfssl.c"
    ]
  },
  "patch_diff": {
    "lib/multi.c||lib/multi.c": [
      "File: lib/multi.c -> lib/multi.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "878: void Curl_detach_connnection(struct Curl_easy *data)",
      "879: {",
      "880:   struct connectdata *conn = data->conn;",
      "882:     Curl_llist_remove(&conn->easyq, &data->conn_queue, NULL);",
      "883:   data->conn = NULL;",
      "884: }",
      "",
      "[Removed Lines]",
      "881:   if(conn)",
      "",
      "[Added Lines]",
      "881:   if(conn) {",
      "883:     Curl_ssl_detach_conn(data, conn);",
      "884:   }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "898:                          &data->conn_queue);",
      "899:   if(conn->handler->attach)",
      "900:     conn->handler->attach(data, conn);",
      "901: }",
      "903: static int waitconnect_getsock(struct connectdata *conn,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "903:   Curl_ssl_associate_conn(data, conn);",
      "",
      "---------------"
    ],
    "lib/vtls/gskit.c||lib/vtls/gskit.c": [
      "File: lib/vtls/gskit.c -> lib/vtls/gskit.c"
    ],
    "lib/vtls/gtls.c||lib/vtls/gtls.c": [
      "File: lib/vtls/gtls.c -> lib/vtls/gtls.c"
    ],
    "lib/vtls/mbedtls.c||lib/vtls/mbedtls.c": [
      "File: lib/vtls/mbedtls.c -> lib/vtls/mbedtls.c"
    ],
    "lib/vtls/mesalink.c||lib/vtls/mesalink.c": [
      "File: lib/vtls/mesalink.c -> lib/vtls/mesalink.c"
    ],
    "lib/vtls/nss.c||lib/vtls/nss.c": [
      "File: lib/vtls/nss.c -> lib/vtls/nss.c"
    ],
    "lib/vtls/openssl.c||lib/vtls/openssl.c": [
      "File: lib/vtls/openssl.c -> lib/vtls/openssl.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "240: #endif",
      "241: };",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "243: static void ossl_associate_connection(struct Curl_easy *data,",
      "244:                                       struct connectdata *conn,",
      "245:                                       int sockindex);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "2581:   curl_socket_t sockfd = conn->sock[sockindex];",
      "2582:   struct ssl_connect_data *connssl = &conn->ssl[sockindex];",
      "2583:   ctx_option_t ctx_options = 0;",
      "2585: #ifdef SSL_CTRL_SET_TLSEXT_HOSTNAME",
      "2586:   bool sni;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2588:   void *ssl_sessionid = NULL;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "3225:   }",
      "3226: #endif",
      "3265:     }",
      "3267:   }",
      "3269: #ifndef CURL_DISABLE_PROXY",
      "3270:   if(conn->proxy_ssl[sockindex].use) {",
      "",
      "[Removed Lines]",
      "3229:   if(SSL_SET_OPTION(primary.sessionid)) {",
      "3230:     void *ssl_sessionid = NULL;",
      "3231:     int data_idx = ossl_get_ssl_data_index();",
      "3232:     int connectdata_idx = ossl_get_ssl_conn_index();",
      "3233:     int sockindex_idx = ossl_get_ssl_sockindex_index();",
      "3234:     int proxy_idx = ossl_get_proxy_index();",
      "3236:     if(data_idx >= 0 && connectdata_idx >= 0 && sockindex_idx >= 0 &&",
      "3237:        proxy_idx >= 0) {",
      "3240:       SSL_set_ex_data(backend->handle, data_idx, data);",
      "3241:       SSL_set_ex_data(backend->handle, connectdata_idx, conn);",
      "3242:       SSL_set_ex_data(backend->handle, sockindex_idx, conn->sock + sockindex);",
      "3243: #ifndef CURL_DISABLE_PROXY",
      "3244:       SSL_set_ex_data(backend->handle, proxy_idx, SSL_IS_PROXY() ? (void *) 1:",
      "3245:                       NULL);",
      "3246: #else",
      "3247:       SSL_set_ex_data(backend->handle, proxy_idx, NULL);",
      "3248: #endif",
      "3250:     }",
      "3252:     Curl_ssl_sessionid_lock(data);",
      "3253:     if(!Curl_ssl_getsessionid(data, conn, SSL_IS_PROXY() ? TRUE : FALSE,",
      "3254:                               &ssl_sessionid, NULL, sockindex)) {",
      "3256:       if(!SSL_set_session(backend->handle, ssl_sessionid)) {",
      "3257:         Curl_ssl_sessionid_unlock(data);",
      "3258:         failf(data, \"SSL: SSL_set_session failed: %s\",",
      "3259:               ossl_strerror(ERR_get_error(), error_buffer,",
      "3260:                             sizeof(error_buffer)));",
      "3261:         return CURLE_SSL_CONNECT_ERROR;",
      "3262:       }",
      "3264:       infof(data, \"SSL re-using session ID\\n\");",
      "3266:     Curl_ssl_sessionid_unlock(data);",
      "",
      "[Added Lines]",
      "3233:   ossl_associate_connection(data, conn, sockindex);",
      "3235:   Curl_ssl_sessionid_lock(data);",
      "3236:   if(!Curl_ssl_getsessionid(data, conn, SSL_IS_PROXY() ? TRUE : FALSE,",
      "3237:                             &ssl_sessionid, NULL, sockindex)) {",
      "3239:     if(!SSL_set_session(backend->handle, ssl_sessionid)) {",
      "3240:       Curl_ssl_sessionid_unlock(data);",
      "3241:       failf(data, \"SSL: SSL_set_session failed: %s\",",
      "3242:             ossl_strerror(ERR_get_error(), error_buffer,",
      "3243:                           sizeof(error_buffer)));",
      "3244:       return CURLE_SSL_CONNECT_ERROR;",
      "3247:     infof(data, \"SSL re-using session ID\\n\");",
      "3249:   Curl_ssl_sessionid_unlock(data);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "4498:          (void *)backend->ctx : (void *)backend->handle;",
      "4499: }",
      "4501: const struct Curl_ssl Curl_ssl_openssl = {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4483: static void ossl_associate_connection(struct Curl_easy *data,",
      "4484:                                       struct connectdata *conn,",
      "4485:                                       int sockindex)",
      "4486: {",
      "4487:   struct ssl_connect_data *connssl = &conn->ssl[sockindex];",
      "4488:   struct ssl_backend_data *backend = connssl->backend;",
      "4491:   if(!backend->handle)",
      "4492:     return;",
      "4494:   if(SSL_SET_OPTION(primary.sessionid)) {",
      "4495:     int data_idx = ossl_get_ssl_data_index();",
      "4496:     int connectdata_idx = ossl_get_ssl_conn_index();",
      "4497:     int sockindex_idx = ossl_get_ssl_sockindex_index();",
      "4498:     int proxy_idx = ossl_get_proxy_index();",
      "4500:     if(data_idx >= 0 && connectdata_idx >= 0 && sockindex_idx >= 0 &&",
      "4501:        proxy_idx >= 0) {",
      "4504:       SSL_set_ex_data(backend->handle, data_idx, data);",
      "4505:       SSL_set_ex_data(backend->handle, connectdata_idx, conn);",
      "4506:       SSL_set_ex_data(backend->handle, sockindex_idx, conn->sock + sockindex);",
      "4507: #ifndef CURL_DISABLE_PROXY",
      "4508:       SSL_set_ex_data(backend->handle, proxy_idx, SSL_IS_PROXY() ? (void *) 1:",
      "4509:                       NULL);",
      "4510: #else",
      "4511:       SSL_set_ex_data(backend->handle, proxy_idx, NULL);",
      "4512: #endif",
      "4513:     }",
      "4514:   }",
      "4515: }",
      "4525: static void ossl_disassociate_connection(struct Curl_easy *data,",
      "4526:                                          int sockindex)",
      "4527: {",
      "4528:   struct connectdata *conn = data->conn;",
      "4529:   struct ssl_connect_data *connssl = &conn->ssl[sockindex];",
      "4530:   struct ssl_backend_data *backend = connssl->backend;",
      "4533:   if(!backend->handle)",
      "4534:     return;",
      "4536:   if(SSL_SET_OPTION(primary.sessionid)) {",
      "4537:     bool isproxy = FALSE;",
      "4538:     bool incache;",
      "4539:     void *old_ssl_sessionid = NULL;",
      "4540:     int data_idx = ossl_get_ssl_data_index();",
      "4541:     int connectdata_idx = ossl_get_ssl_conn_index();",
      "4542:     int sockindex_idx = ossl_get_ssl_sockindex_index();",
      "4543:     int proxy_idx = ossl_get_proxy_index();",
      "4545:     if(data_idx >= 0 && connectdata_idx >= 0 && sockindex_idx >= 0 &&",
      "4546:        proxy_idx >= 0) {",
      "4548:       isproxy = SSL_get_ex_data(backend->handle, proxy_idx) ? TRUE : FALSE;",
      "4552:       SSL_set_ex_data(backend->handle, data_idx, NULL);",
      "4553:       SSL_set_ex_data(backend->handle, connectdata_idx, NULL);",
      "4554:       SSL_set_ex_data(backend->handle, sockindex_idx, NULL);",
      "4555:       SSL_set_ex_data(backend->handle, proxy_idx, NULL);",
      "4556:     }",
      "4558:     Curl_ssl_sessionid_lock(data);",
      "4559:     incache = !(Curl_ssl_getsessionid(data, conn, isproxy,",
      "4560:                                       &old_ssl_sessionid, NULL, sockindex));",
      "4561:     if(incache)",
      "4562:       Curl_ssl_delsessionid(data, old_ssl_sessionid);",
      "4563:     Curl_ssl_sessionid_unlock(data);",
      "4564:   }",
      "4565: }",
      "",
      "---------------"
    ],
    "lib/vtls/rustls.c||lib/vtls/rustls.c": [
      "File: lib/vtls/rustls.c -> lib/vtls/rustls.c"
    ],
    "lib/vtls/schannel.c||lib/vtls/schannel.c": [
      "File: lib/vtls/schannel.c -> lib/vtls/schannel.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "330: static CURLcode",
      "331: set_ssl_ciphers(SCHANNEL_CRED *schannel_cred, char *ciphers,",
      "333: {",
      "334:   char *startCur = ciphers;",
      "335:   int algCount = 0;",
      "",
      "[Removed Lines]",
      "332:                 int *algIds)",
      "",
      "[Added Lines]",
      "332:                 ALG_ID *algIds)",
      "",
      "---------------"
    ],
    "lib/vtls/sectransp.c||lib/vtls/sectransp.c": [
      "File: lib/vtls/sectransp.c -> lib/vtls/sectransp.c"
    ],
    "lib/vtls/vtls.c||lib/vtls/vtls.c": [
      "File: lib/vtls/vtls.c -> lib/vtls/vtls.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "586:   return CURLE_OK;",
      "587: }",
      "590: void Curl_ssl_close_all(struct Curl_easy *data)",
      "591: {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "589: void Curl_ssl_associate_conn(struct Curl_easy *data,",
      "590:                              struct connectdata *conn)",
      "591: {",
      "592:   if(Curl_ssl->associate_connection) {",
      "593:     Curl_ssl->associate_connection(data, conn, FIRSTSOCKET);",
      "594:     if(conn->sock[SECONDARYSOCKET] && conn->bits.sock_accepted)",
      "595:       Curl_ssl->associate_connection(data, conn, SECONDARYSOCKET);",
      "596:   }",
      "597: }",
      "599: void Curl_ssl_detach_conn(struct Curl_easy *data,",
      "600:                           struct connectdata *conn)",
      "601: {",
      "602:   if(Curl_ssl->disassociate_connection) {",
      "603:     Curl_ssl->disassociate_connection(data, FIRSTSOCKET);",
      "604:     if(conn->sock[SECONDARYSOCKET] && conn->bits.sock_accepted)",
      "605:       Curl_ssl->disassociate_connection(data, SECONDARYSOCKET);",
      "606:   }",
      "607: }",
      "",
      "---------------"
    ],
    "lib/vtls/vtls.h||lib/vtls/vtls.h": [
      "File: lib/vtls/vtls.h -> lib/vtls/vtls.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "84:   bool (*false_start)(void);",
      "85:   CURLcode (*sha256sum)(const unsigned char *input, size_t inputlen,",
      "86:                     unsigned char *sha256sum, size_t sha256sumlen);",
      "87: };",
      "89: #ifdef USE_SSL",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "88:   void (*associate_connection)(struct Curl_easy *data,",
      "89:                                struct connectdata *conn,",
      "90:                                int sockindex);",
      "91:   void (*disassociate_connection)(struct Curl_easy *data, int sockindex);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "284: bool Curl_ssl_false_start(void);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "291: void Curl_ssl_associate_conn(struct Curl_easy *data,",
      "292:                              struct connectdata *conn);",
      "293: void Curl_ssl_detach_conn(struct Curl_easy *data,",
      "294:                           struct connectdata *conn);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "309: #define Curl_ssl_cert_status_request() FALSE",
      "310: #define Curl_ssl_false_start() FALSE",
      "311: #define Curl_ssl_tls13_ciphersuites() FALSE",
      "312: #endif",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "322: #define Curl_ssl_associate_conn(a,b) Curl_nop_stmt",
      "323: #define Curl_ssl_detach_conn(a,b) Curl_nop_stmt",
      "",
      "---------------"
    ],
    "lib/vtls/wolfssl.c||lib/vtls/wolfssl.c": [
      "File: lib/vtls/wolfssl.c -> lib/vtls/wolfssl.c"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "bbb71507b7bab52002f9b1e0880bed6a32834511",
      "candidate_info": {
        "commit_hash": "bbb71507b7bab52002f9b1e0880bed6a32834511",
        "repo": "curl/curl",
        "commit_url": "https://github.com/curl/curl/commit/bbb71507b7bab52002f9b1e0880bed6a32834511",
        "files": [
          "lib/vtls/schannel.c",
          "lib/vtls/schannel.h"
        ],
        "message": "schannel: don't use static to store selected ciphers\n\nCVE-2021-22897\n\nBug: https://curl.se/docs/CVE-2021-22897.html",
        "before_after_code_files": [
          "lib/vtls/schannel.c||lib/vtls/schannel.c",
          "lib/vtls/schannel.h||lib/vtls/schannel.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/vtls/schannel.c||lib/vtls/schannel.c"
          ],
          "candidate": [
            "lib/vtls/schannel.c||lib/vtls/schannel.c"
          ]
        }
      },
      "candidate_diff": {
        "lib/vtls/schannel.c||lib/vtls/schannel.c": [
          "File: lib/vtls/schannel.c -> lib/vtls/schannel.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "328: }",
          "330: static CURLcode",
          "332: {",
          "333:   char *startCur = ciphers;",
          "334:   int algCount = 0;",
          "337:     long alg = strtol(startCur, 0, 0);",
          "338:     if(!alg)",
          "339:       alg = get_alg_id_by_name(startCur);",
          "",
          "[Removed Lines]",
          "331: set_ssl_ciphers(SCHANNEL_CRED *schannel_cred, char *ciphers)",
          "336:   while(startCur && (0 != *startCur) && (algCount < 45)) {",
          "",
          "[Added Lines]",
          "331: set_ssl_ciphers(SCHANNEL_CRED *schannel_cred, char *ciphers,",
          "332:                 int *algIds)",
          "336:   while(startCur && (0 != *startCur) && (algCount < NUMOF_CIPHERS)) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "593:     }",
          "595:     if(SSL_CONN_CONFIG(cipher_list)) {",
          "597:       if(CURLE_OK != result) {",
          "598:         failf(data, \"Unable to set ciphers to passed via SSL_CONN_CONFIG\");",
          "599:         return result;",
          "",
          "[Removed Lines]",
          "596:       result = set_ssl_ciphers(&schannel_cred, SSL_CONN_CONFIG(cipher_list));",
          "",
          "[Added Lines]",
          "596:       result = set_ssl_ciphers(&schannel_cred, SSL_CONN_CONFIG(cipher_list),",
          "597:                                BACKEND->algIds);",
          "",
          "---------------"
        ],
        "lib/vtls/schannel.h||lib/vtls/schannel.h": [
          "File: lib/vtls/schannel.h -> lib/vtls/schannel.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "102: #ifdef HAS_MANUAL_VERIFY_API",
          "104: #endif",
          "105: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "107:   ALG_ID algIds[NUMOF_CIPHERS];",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b09c8ee15771c614c4bf3ddac893cdb12187c844",
      "candidate_info": {
        "commit_hash": "b09c8ee15771c614c4bf3ddac893cdb12187c844",
        "repo": "curl/curl",
        "commit_url": "https://github.com/curl/curl/commit/b09c8ee15771c614c4bf3ddac893cdb12187c844",
        "files": [
          "lib/vtls/bearssl.c",
          "lib/vtls/gtls.c",
          "lib/vtls/mbedtls.c",
          "lib/vtls/mesalink.c",
          "lib/vtls/openssl.c",
          "lib/vtls/schannel.c",
          "lib/vtls/sectransp.c",
          "lib/vtls/vtls.c",
          "lib/vtls/vtls.h",
          "lib/vtls/wolfssl.c"
        ],
        "message": "vtls: add 'isproxy' argument to Curl_ssl_get/addsessionid()\n\nTo make sure we set and extract the correct session.\n\nReported-by: Mingtao Yang\nBug: https://curl.se/docs/CVE-2021-22890.html\n\nCVE-2021-22890",
        "before_after_code_files": [
          "lib/vtls/bearssl.c||lib/vtls/bearssl.c",
          "lib/vtls/gtls.c||lib/vtls/gtls.c",
          "lib/vtls/mbedtls.c||lib/vtls/mbedtls.c",
          "lib/vtls/mesalink.c||lib/vtls/mesalink.c",
          "lib/vtls/openssl.c||lib/vtls/openssl.c",
          "lib/vtls/schannel.c||lib/vtls/schannel.c",
          "lib/vtls/sectransp.c||lib/vtls/sectransp.c",
          "lib/vtls/vtls.c||lib/vtls/vtls.c",
          "lib/vtls/vtls.h||lib/vtls/vtls.h",
          "lib/vtls/wolfssl.c||lib/vtls/wolfssl.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/vtls/gtls.c||lib/vtls/gtls.c",
            "lib/vtls/mbedtls.c||lib/vtls/mbedtls.c",
            "lib/vtls/mesalink.c||lib/vtls/mesalink.c",
            "lib/vtls/openssl.c||lib/vtls/openssl.c",
            "lib/vtls/schannel.c||lib/vtls/schannel.c",
            "lib/vtls/sectransp.c||lib/vtls/sectransp.c",
            "lib/vtls/vtls.c||lib/vtls/vtls.c",
            "lib/vtls/vtls.h||lib/vtls/vtls.h",
            "lib/vtls/wolfssl.c||lib/vtls/wolfssl.c"
          ],
          "candidate": [
            "lib/vtls/gtls.c||lib/vtls/gtls.c",
            "lib/vtls/mbedtls.c||lib/vtls/mbedtls.c",
            "lib/vtls/mesalink.c||lib/vtls/mesalink.c",
            "lib/vtls/openssl.c||lib/vtls/openssl.c",
            "lib/vtls/schannel.c||lib/vtls/schannel.c",
            "lib/vtls/sectransp.c||lib/vtls/sectransp.c",
            "lib/vtls/vtls.c||lib/vtls/vtls.c",
            "lib/vtls/vtls.h||lib/vtls/vtls.h",
            "lib/vtls/wolfssl.c||lib/vtls/wolfssl.c"
          ]
        }
      },
      "candidate_diff": {
        "lib/vtls/bearssl.c||lib/vtls/bearssl.c": [
          "File: lib/vtls/bearssl.c -> lib/vtls/bearssl.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "375:     void *session;",
          "377:     Curl_ssl_sessionid_lock(data);",
          "379:       br_ssl_engine_set_session_parameters(&backend->ctx.eng, session);",
          "380:       infof(data, \"BearSSL: re-using session ID\\n\");",
          "381:     }",
          "",
          "[Removed Lines]",
          "378:     if(!Curl_ssl_getsessionid(data, conn, &session, NULL, sockindex)) {",
          "",
          "[Added Lines]",
          "378:     if(!Curl_ssl_getsessionid(data, conn, SSL_IS_PROXY() ? TRUE : FALSE,",
          "379:                               &session, NULL, sockindex)) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "571:     br_ssl_engine_get_session_parameters(&backend->ctx.eng, session);",
          "572:     Curl_ssl_sessionid_lock(data);",
          "573:     incache = !(Curl_ssl_getsessionid(data, conn,",
          "574:                                       &oldsession, NULL, sockindex));",
          "575:     if(incache)",
          "576:       Curl_ssl_delsessionid(data, oldsession);",
          "578:     Curl_ssl_sessionid_unlock(data);",
          "579:     if(ret) {",
          "580:       free(session);",
          "",
          "[Removed Lines]",
          "577:     ret = Curl_ssl_addsessionid(data, conn, session, 0, sockindex);",
          "",
          "[Added Lines]",
          "575:                                       SSL_IS_PROXY() ? TRUE : FALSE,",
          "579:     ret = Curl_ssl_addsessionid(data, conn,",
          "580:                                 SSL_IS_PROXY() ? TRUE : FALSE,",
          "581:                                 session, 0, sockindex);",
          "",
          "---------------"
        ],
        "lib/vtls/gtls.c||lib/vtls/gtls.c": [
          "File: lib/vtls/gtls.c -> lib/vtls/gtls.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "728:     Curl_ssl_sessionid_lock(data);",
          "729:     if(!Curl_ssl_getsessionid(data, conn,",
          "730:                               &ssl_sessionid, &ssl_idsize, sockindex)) {",
          "732:       gnutls_session_set_data(session, ssl_sessionid, ssl_idsize);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "730:                               SSL_IS_PROXY() ? TRUE : FALSE,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1286:       gnutls_session_get_data(session, connect_sessionid, &connect_idsize);",
          "1288:       Curl_ssl_sessionid_lock(data);",
          "1291:       if(incache) {",
          "",
          "[Removed Lines]",
          "1289:       incache = !(Curl_ssl_getsessionid(data, conn, &ssl_sessionid, NULL,",
          "1290:                                         sockindex));",
          "",
          "[Added Lines]",
          "1290:       incache = !(Curl_ssl_getsessionid(data, conn,",
          "1291:                                         SSL_IS_PROXY() ? TRUE : FALSE,",
          "1292:                                         &ssl_sessionid, NULL, sockindex));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1295:       }",
          "1300:       Curl_ssl_sessionid_unlock(data);",
          "1301:       if(result) {",
          "1302:         free(connect_sessionid);",
          "",
          "[Removed Lines]",
          "1298:       result = Curl_ssl_addsessionid(data, conn, connect_sessionid,",
          "1299:                                      connect_idsize, sockindex);",
          "",
          "[Added Lines]",
          "1300:       result = Curl_ssl_addsessionid(data, conn,",
          "1301:                                      SSL_IS_PROXY() ? TRUE : FALSE,",
          "1302:                                      connect_sessionid, connect_idsize,",
          "1303:                                      sockindex);",
          "",
          "---------------"
        ],
        "lib/vtls/mbedtls.c||lib/vtls/mbedtls.c": [
          "File: lib/vtls/mbedtls.c -> lib/vtls/mbedtls.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "463:     void *old_session = NULL;",
          "465:     Curl_ssl_sessionid_lock(data);",
          "467:       ret = mbedtls_ssl_set_session(&backend->ssl, old_session);",
          "468:       if(ret) {",
          "469:         Curl_ssl_sessionid_unlock(data);",
          "",
          "[Removed Lines]",
          "466:     if(!Curl_ssl_getsessionid(data, conn, &old_session, NULL, sockindex)) {",
          "",
          "[Added Lines]",
          "466:     if(!Curl_ssl_getsessionid(data, conn,",
          "467:                               SSL_IS_PROXY() ? TRUE : FALSE,",
          "468:                               &old_session, NULL, sockindex)) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "724:     int ret;",
          "725:     mbedtls_ssl_session *our_ssl_sessionid;",
          "726:     void *old_ssl_sessionid = NULL;",
          "728:     our_ssl_sessionid = malloc(sizeof(mbedtls_ssl_session));",
          "729:     if(!our_ssl_sessionid)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "729:     bool isproxy = SSL_IS_PROXY() ? TRUE : FALSE;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "744:     Curl_ssl_sessionid_lock(data);",
          "746:       Curl_ssl_delsessionid(data, old_ssl_sessionid);",
          "750:     Curl_ssl_sessionid_unlock(data);",
          "751:     if(retcode) {",
          "752:       mbedtls_ssl_session_free(our_ssl_sessionid);",
          "",
          "[Removed Lines]",
          "745:     if(!Curl_ssl_getsessionid(data, conn, &old_ssl_sessionid, NULL, sockindex))",
          "748:     retcode = Curl_ssl_addsessionid(data, conn,",
          "749:                                     our_ssl_sessionid, 0, sockindex);",
          "",
          "[Added Lines]",
          "748:     if(!Curl_ssl_getsessionid(data, conn, isproxy, &old_ssl_sessionid, NULL,",
          "749:                               sockindex))",
          "752:     retcode = Curl_ssl_addsessionid(data, conn, isproxy, our_ssl_sessionid,",
          "753:                                     0, sockindex);",
          "",
          "---------------"
        ],
        "lib/vtls/mesalink.c||lib/vtls/mesalink.c": [
          "File: lib/vtls/mesalink.c -> lib/vtls/mesalink.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "261:     void *ssl_sessionid = NULL;",
          "263:     Curl_ssl_sessionid_lock(data);",
          "266:       if(!SSL_set_session(BACKEND->handle, ssl_sessionid)) {",
          "267:         Curl_ssl_sessionid_unlock(data);",
          "",
          "[Removed Lines]",
          "264:     if(!Curl_ssl_getsessionid(data, conn, &ssl_sessionid, NULL, sockindex)) {",
          "",
          "[Added Lines]",
          "264:     if(!Curl_ssl_getsessionid(data, conn,",
          "265:                               SSL_IS_PROXY() ? TRUE : FALSE,",
          "266:                               &ssl_sessionid, NULL, sockindex)) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "345:     bool incache;",
          "346:     SSL_SESSION *our_ssl_sessionid;",
          "347:     void *old_ssl_sessionid = NULL;",
          "349:     our_ssl_sessionid = SSL_get_session(BACKEND->handle);",
          "351:     Curl_ssl_sessionid_lock(data);",
          "352:     incache =",
          "355:     if(incache) {",
          "356:       if(old_ssl_sessionid != our_ssl_sessionid) {",
          "357:         infof(data, \"old SSL session ID is stale, removing\\n\");",
          "",
          "[Removed Lines]",
          "353:       !(Curl_ssl_getsessionid(data, conn,",
          "354:                               &old_ssl_sessionid, NULL, sockindex));",
          "",
          "[Added Lines]",
          "350:     bool isproxy = SSL_IS_PROXY() ? TRUE : FALSE;",
          "356:       !(Curl_ssl_getsessionid(data, conn, isproxy, &old_ssl_sessionid, NULL,",
          "357:                               sockindex));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "361:     }",
          "363:     if(!incache) {",
          "366:       if(result) {",
          "367:         Curl_ssl_sessionid_unlock(data);",
          "368:         failf(data, \"failed to store ssl session\");",
          "",
          "[Removed Lines]",
          "364:       result = Curl_ssl_addsessionid(",
          "365:         data, conn, our_ssl_sessionid, 0 /* unknown size */, sockindex);",
          "",
          "[Added Lines]",
          "367:       result =",
          "368:         Curl_ssl_addsessionid(data, conn, isproxy, our_ssl_sessionid, 0,",
          "369:                               sockindex);",
          "",
          "---------------"
        ],
        "lib/vtls/openssl.c||lib/vtls/openssl.c": [
          "File: lib/vtls/openssl.c -> lib/vtls/openssl.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "394: static int ossl_get_ssl_sockindex_index(void)",
          "395: {",
          "400:   }",
          "402: }",
          "404: static int passwd_callback(char *buf, int num, int encrypting,",
          "",
          "[Removed Lines]",
          "396:   static int ssl_ex_data_sockindex_index = -1;",
          "397:   if(ssl_ex_data_sockindex_index < 0) {",
          "398:     ssl_ex_data_sockindex_index = SSL_get_ex_new_index(0, NULL, NULL, NULL,",
          "399:         NULL);",
          "401:   return ssl_ex_data_sockindex_index;",
          "",
          "[Added Lines]",
          "396:   static int sockindex_index = -1;",
          "397:   if(sockindex_index < 0) {",
          "398:     sockindex_index = SSL_get_ex_new_index(0, NULL, NULL, NULL, NULL);",
          "400:   return sockindex_index;",
          "401: }",
          "406: static int ossl_get_proxy_index(void)",
          "407: {",
          "408:   static int proxy_index = -1;",
          "409:   if(proxy_index < 0) {",
          "410:     proxy_index = SSL_get_ex_new_index(0, NULL, NULL, NULL, NULL);",
          "411:   }",
          "412:   return proxy_index;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1176:   if(ossl_get_ssl_data_index() < 0 || ossl_get_ssl_conn_index() < 0 ||",
          "1178:     return 0;",
          "1180:   return 1;",
          "",
          "[Removed Lines]",
          "1177:      ossl_get_ssl_sockindex_index() < 0)",
          "",
          "[Added Lines]",
          "1188:      ossl_get_ssl_sockindex_index() < 0 || ossl_get_proxy_index() < 0)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2432:   int data_idx = ossl_get_ssl_data_index();",
          "2433:   int connectdata_idx = ossl_get_ssl_conn_index();",
          "2434:   int sockindex_idx = ossl_get_ssl_sockindex_index();",
          "2437:     return 0;",
          "2439:   conn = (struct connectdata*) SSL_get_ex_data(ssl, connectdata_idx);",
          "",
          "[Removed Lines]",
          "2436:   if(data_idx < 0 || connectdata_idx < 0 || sockindex_idx < 0)",
          "",
          "[Added Lines]",
          "2446:   int proxy_idx = ossl_get_proxy_index();",
          "2447:   bool isproxy;",
          "2449:   if(data_idx < 0 || connectdata_idx < 0 || sockindex_idx < 0 || proxy_idx < 0)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2446:   sockindex_ptr = (curl_socket_t*) SSL_get_ex_data(ssl, sockindex_idx);",
          "2447:   sockindex = (int)(sockindex_ptr - conn->sock);",
          "2449:   if(SSL_SET_OPTION(primary.sessionid)) {",
          "2450:     bool incache;",
          "2451:     void *old_ssl_sessionid = NULL;",
          "2453:     Curl_ssl_sessionid_lock(data);",
          "2456:     if(incache) {",
          "2457:       if(old_ssl_sessionid != ssl_sessionid) {",
          "2458:         infof(data, \"old SSL session ID is stale, removing\\n\");",
          "",
          "[Removed Lines]",
          "2454:     incache = !(Curl_ssl_getsessionid(data, conn, &old_ssl_sessionid, NULL,",
          "2455:                                       sockindex));",
          "",
          "[Added Lines]",
          "2462:   isproxy = SSL_get_ex_data(ssl, proxy_idx) ? TRUE : FALSE;",
          "2469:     if(isproxy)",
          "2470:       incache = FALSE;",
          "2471:     else",
          "2472:       incache = !(Curl_ssl_getsessionid(data, conn, isproxy,",
          "2473:                                         &old_ssl_sessionid, NULL, sockindex));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2462:     }",
          "2464:     if(!incache) {",
          "2468:         res = 1;",
          "2469:       }",
          "",
          "[Removed Lines]",
          "2465:       if(!Curl_ssl_addsessionid(data, conn, ssl_sessionid,",
          "2466:                                       0 /* unknown size */, sockindex)) {",
          "",
          "[Added Lines]",
          "2483:       if(!Curl_ssl_addsessionid(data, conn, isproxy, ssl_sessionid,",
          "2484:                                 0 /* unknown size */, sockindex)) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "3193:     int data_idx = ossl_get_ssl_data_index();",
          "3194:     int connectdata_idx = ossl_get_ssl_conn_index();",
          "3195:     int sockindex_idx = ossl_get_ssl_sockindex_index();",
          "3200:       SSL_set_ex_data(backend->handle, data_idx, data);",
          "3201:       SSL_set_ex_data(backend->handle, connectdata_idx, conn);",
          "3202:       SSL_set_ex_data(backend->handle, sockindex_idx, conn->sock + sockindex);",
          "3203:     }",
          "3205:     Curl_ssl_sessionid_lock(data);",
          "3208:       if(!SSL_set_session(backend->handle, ssl_sessionid)) {",
          "3209:         Curl_ssl_sessionid_unlock(data);",
          "",
          "[Removed Lines]",
          "3197:     if(data_idx >= 0 && connectdata_idx >= 0 && sockindex_idx >= 0) {",
          "3206:     if(!Curl_ssl_getsessionid(data, conn, &ssl_sessionid, NULL, sockindex)) {",
          "",
          "[Added Lines]",
          "3214:     int proxy_idx = ossl_get_proxy_index();",
          "3216:     if(data_idx >= 0 && connectdata_idx >= 0 && sockindex_idx >= 0 &&",
          "3217:        proxy_idx >= 0) {",
          "3223: #ifndef CURL_DISABLE_PROXY",
          "3224:       SSL_set_ex_data(backend->handle, proxy_idx, SSL_IS_PROXY() ? (void *) 1:",
          "3225:                       NULL);",
          "3226: #else",
          "3227:       SSL_set_ex_data(backend->handle, proxy_idx, NULL);",
          "3228: #endif",
          "3233:     if(!Curl_ssl_getsessionid(data, conn, SSL_IS_PROXY() ? TRUE : FALSE,",
          "3234:                               &ssl_sessionid, NULL, sockindex)) {",
          "",
          "---------------"
        ],
        "lib/vtls/schannel.c||lib/vtls/schannel.c": [
          "File: lib/vtls/schannel.c -> lib/vtls/schannel.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "496:   if(SSL_SET_OPTION(primary.sessionid)) {",
          "497:     Curl_ssl_sessionid_lock(data);",
          "498:     if(!Curl_ssl_getsessionid(data, conn,",
          "499:                               (void **)&old_cred, NULL, sockindex)) {",
          "500:       BACKEND->cred = old_cred;",
          "501:       DEBUGF(infof(data, \"schannel: re-using existing credential handle\\n\"));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "499:                               SSL_IS_PROXY() ? TRUE : FALSE,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1337:   struct ssl_connect_data *connssl = &conn->ssl[sockindex];",
          "1338:   SECURITY_STATUS sspi_status = SEC_E_OK;",
          "1339:   CERT_CONTEXT *ccert_context = NULL;",
          "1340: #ifdef DEBUGBUILD",
          "1342:     conn->host.name;",
          "1343: #endif",
          "1344: #ifdef HAS_ALPN",
          "",
          "[Removed Lines]",
          "1341:   const char * const hostname = SSL_IS_PROXY() ? conn->http_proxy.host.name :",
          "",
          "[Added Lines]",
          "1341:   bool isproxy = SSL_IS_PROXY();",
          "1343:   const char * const hostname = isproxy ? conn->http_proxy.host.name :",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1414:     struct Curl_schannel_cred *old_cred = NULL;",
          "1416:     Curl_ssl_sessionid_lock(data);",
          "1419:     if(incache) {",
          "1420:       if(old_cred != BACKEND->cred) {",
          "1421:         DEBUGF(infof(data,",
          "",
          "[Removed Lines]",
          "1417:     incache = !(Curl_ssl_getsessionid(data, conn, (void **)&old_cred, NULL,",
          "1418:                                       sockindex));",
          "",
          "[Added Lines]",
          "1419:     incache = !(Curl_ssl_getsessionid(data, conn, isproxy, (void **)&old_cred,",
          "1420:                                       NULL, sockindex));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1426:       }",
          "1427:     }",
          "1428:     if(!incache) {",
          "1430:                                      sizeof(struct Curl_schannel_cred),",
          "1431:                                      sockindex);",
          "1432:       if(result) {",
          "",
          "[Removed Lines]",
          "1429:       result = Curl_ssl_addsessionid(data, conn, (void *)BACKEND->cred,",
          "",
          "[Added Lines]",
          "1431:       result = Curl_ssl_addsessionid(data, conn, isproxy, BACKEND->cred,",
          "",
          "---------------"
        ],
        "lib/vtls/sectransp.c||lib/vtls/sectransp.c": [
          "File: lib/vtls/sectransp.c -> lib/vtls/sectransp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1400:   char * const ssl_cert = SSL_SET_OPTION(primary.clientcert);",
          "1401:   const struct curl_blob *ssl_cert_blob = SSL_SET_OPTION(primary.cert_blob);",
          "1402: #ifndef CURL_DISABLE_PROXY",
          "1404:     conn->host.name;",
          "1405:   const long int port = SSL_IS_PROXY() ? conn->port : conn->remote_port;",
          "1406: #else",
          "1407:   const char * const hostname = conn->host.name;",
          "1408:   const long int port = conn->remote_port;",
          "1409: #endif",
          "",
          "[Removed Lines]",
          "1403:   const char * const hostname = SSL_IS_PROXY() ? conn->http_proxy.host.name :",
          "",
          "[Added Lines]",
          "1403:   bool isproxy = SSL_IS_PROXY();",
          "1404:   const char * const hostname = isproxy ? conn->http_proxy.host.name :",
          "1408:   const isproxy = FALSE;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1613: #ifdef USE_NGHTTP2",
          "1614:       if(data->state.httpversion >= CURL_HTTP_VERSION_2",
          "1615: #ifndef CURL_DISABLE_PROXY",
          "1617: #endif",
          "1618:         ) {",
          "1619:         CFArrayAppendValue(alpnArr, CFSTR(NGHTTP2_PROTO_VERSION_ID));",
          "",
          "[Removed Lines]",
          "1616:          && (!SSL_IS_PROXY() || !conn->bits.tunnel_proxy)",
          "",
          "[Added Lines]",
          "1618:          && (!isproxy || !conn->bits.tunnel_proxy)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1953:     size_t ssl_sessionid_len;",
          "1955:     Curl_ssl_sessionid_lock(data);",
          "1957:                               &ssl_sessionid_len, sockindex)) {",
          "1959:       err = SSLSetPeerID(backend->ssl_ctx, ssl_sessionid, ssl_sessionid_len);",
          "",
          "[Removed Lines]",
          "1956:     if(!Curl_ssl_getsessionid(data, conn, (void **)&ssl_sessionid,",
          "",
          "[Added Lines]",
          "1958:     if(!Curl_ssl_getsessionid(data, conn, isproxy, (void **)&ssl_sessionid,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1981:         return CURLE_SSL_CONNECT_ERROR;",
          "1982:       }",
          "1985:                                      ssl_sessionid_len, sockindex);",
          "1986:       Curl_ssl_sessionid_unlock(data);",
          "1987:       if(result) {",
          "",
          "[Removed Lines]",
          "1984:       result = Curl_ssl_addsessionid(data, conn, ssl_sessionid,",
          "",
          "[Added Lines]",
          "1986:       result = Curl_ssl_addsessionid(data, conn, isproxy, ssl_sessionid,",
          "",
          "---------------"
        ],
        "lib/vtls/vtls.c||lib/vtls/vtls.c": [
          "File: lib/vtls/vtls.c -> lib/vtls/vtls.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "368: bool Curl_ssl_getsessionid(struct Curl_easy *data,",
          "369:                            struct connectdata *conn,",
          "370:                            void **ssl_sessionid,",
          "372:                            int sockindex)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "370:                            const bool isProxy,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "377:   bool no_match = TRUE;",
          "379: #ifndef CURL_DISABLE_PROXY",
          "381:   struct ssl_primary_config * const ssl_config = isProxy ?",
          "382:     &conn->proxy_ssl_config :",
          "383:     &conn->ssl_config;",
          "",
          "[Removed Lines]",
          "380:   const bool isProxy = CONNECT_PROXY_SSL();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "389:   struct ssl_primary_config * const ssl_config = &conn->ssl_config;",
          "390:   const char * const name = conn->host.name;",
          "391:   int port = conn->remote_port;",
          "393: #endif",
          "396:   DEBUGASSERT(SSL_SET_OPTION(primary.sessionid));",
          "398:   if(!SSL_SET_OPTION(primary.sessionid))",
          "",
          "[Removed Lines]",
          "392:   (void)sockindex;",
          "",
          "[Added Lines]",
          "393:   (void)sockindex;",
          "396: #ifdef CURL_DISABLE_PROXY",
          "397:   if(isProxy)",
          "398:     return TRUE;",
          "399: #endif",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "481: CURLcode Curl_ssl_addsessionid(struct Curl_easy *data,",
          "482:                                struct connectdata *conn,",
          "483:                                void *ssl_sessionid,",
          "484:                                size_t idsize,",
          "485:                                int sockindex)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "488:                                bool isProxy,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "492:   int conn_to_port;",
          "493:   long *general_age;",
          "494: #ifndef CURL_DISABLE_PROXY",
          "496:   struct ssl_primary_config * const ssl_config = isProxy ?",
          "497:     &conn->proxy_ssl_config :",
          "498:     &conn->ssl_config;",
          "",
          "[Removed Lines]",
          "495:   const bool isProxy = CONNECT_PROXY_SSL();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "505:   const char *hostname = conn->host.name;",
          "506:   (void)sockindex;",
          "507: #endif",
          "508:   DEBUGASSERT(SSL_SET_OPTION(primary.sessionid));",
          "510:   clone_host = strdup(hostname);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "513:   (void)sockindex;",
          "",
          "---------------"
        ],
        "lib/vtls/vtls.h||lib/vtls/vtls.h": [
          "File: lib/vtls/vtls.h -> lib/vtls/vtls.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "236: bool Curl_ssl_getsessionid(struct Curl_easy *data,",
          "237:                            struct connectdata *conn,",
          "238:                            void **ssl_sessionid,",
          "240:                            int sockindex);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "238:                            const bool isproxy,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "246: CURLcode Curl_ssl_addsessionid(struct Curl_easy *data,",
          "247:                                struct connectdata *conn,",
          "248:                                void *ssl_sessionid,",
          "249:                                size_t idsize,",
          "250:                                int sockindex);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "249:                                const bool isProxy,",
          "",
          "---------------"
        ],
        "lib/vtls/wolfssl.c||lib/vtls/wolfssl.c": [
          "File: lib/vtls/wolfssl.c -> lib/vtls/wolfssl.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "516:     void *ssl_sessionid = NULL;",
          "518:     Curl_ssl_sessionid_lock(data);",
          "521:       if(!SSL_set_session(backend->handle, ssl_sessionid)) {",
          "522:         char error_buffer[WOLFSSL_MAX_ERROR_SZ];",
          "",
          "[Removed Lines]",
          "519:     if(!Curl_ssl_getsessionid(data, conn, &ssl_sessionid, NULL, sockindex)) {",
          "",
          "[Added Lines]",
          "519:     if(!Curl_ssl_getsessionid(data, conn,",
          "520:                               SSL_IS_PROXY() ? TRUE : FALSE,",
          "521:                               &ssl_sessionid, NULL, sockindex)) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "772:     bool incache;",
          "773:     void *old_ssl_sessionid = NULL;",
          "774:     SSL_SESSION *our_ssl_sessionid = SSL_get_session(backend->handle);",
          "776:     if(our_ssl_sessionid) {",
          "777:       Curl_ssl_sessionid_lock(data);",
          "780:       if(incache) {",
          "781:         if(old_ssl_sessionid != our_ssl_sessionid) {",
          "782:           infof(data, \"old SSL session ID is stale, removing\\n\");",
          "",
          "[Removed Lines]",
          "778:       incache = !(Curl_ssl_getsessionid(data, conn, &old_ssl_sessionid, NULL,",
          "779:                                         sockindex));",
          "",
          "[Added Lines]",
          "777:     bool isproxy = SSL_IS_PROXY() ? TRUE : FALSE;",
          "781:       incache = !(Curl_ssl_getsessionid(data, conn, isproxy,",
          "782:                                         &old_ssl_sessionid, NULL, sockindex));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "786:       }",
          "788:       if(!incache) {",
          "791:         if(result) {",
          "792:           Curl_ssl_sessionid_unlock(data);",
          "793:           failf(data, \"failed to store ssl session\");",
          "",
          "[Removed Lines]",
          "789:         result = Curl_ssl_addsessionid(data, conn, our_ssl_sessionid,",
          "790:                                        0 /* unknown size */, sockindex);",
          "",
          "[Added Lines]",
          "792:         result = Curl_ssl_addsessionid(data, conn, isproxy, our_ssl_sessionid,",
          "793:                                        0, sockindex);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e9e79622d0a92d1593aa4aec8203d610498d9ea9",
      "candidate_info": {
        "commit_hash": "e9e79622d0a92d1593aa4aec8203d610498d9ea9",
        "repo": "curl/curl",
        "commit_url": "https://github.com/curl/curl/commit/e9e79622d0a92d1593aa4aec8203d610498d9ea9",
        "files": [
          "lib/vtls/vtls.c"
        ],
        "message": "vtls: fix socket check conditions\n\nfix condition to check the second socket during associate and\ndisassociate connection\n\nCloses #8493",
        "before_after_code_files": [
          "lib/vtls/vtls.c||lib/vtls/vtls.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/vtls/vtls.c||lib/vtls/vtls.c"
          ],
          "candidate": [
            "lib/vtls/vtls.c||lib/vtls/vtls.c"
          ]
        }
      },
      "candidate_diff": {
        "lib/vtls/vtls.c||lib/vtls/vtls.c": [
          "File: lib/vtls/vtls.c -> lib/vtls/vtls.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "630: {",
          "631:   if(Curl_ssl->associate_connection) {",
          "632:     Curl_ssl->associate_connection(data, conn, FIRSTSOCKET);",
          "634:       Curl_ssl->associate_connection(data, conn, SECONDARYSOCKET);",
          "635:   }",
          "636: }",
          "",
          "[Removed Lines]",
          "633:     if(conn->sock[SECONDARYSOCKET] && conn->bits.sock_accepted)",
          "",
          "[Added Lines]",
          "633:     if((conn->sock[SECONDARYSOCKET] != CURL_SOCKET_BAD) &&",
          "634:        conn->bits.sock_accepted)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "640: {",
          "641:   if(Curl_ssl->disassociate_connection) {",
          "642:     Curl_ssl->disassociate_connection(data, FIRSTSOCKET);",
          "644:       Curl_ssl->disassociate_connection(data, SECONDARYSOCKET);",
          "645:   }",
          "646: }",
          "",
          "[Removed Lines]",
          "643:     if(conn->sock[SECONDARYSOCKET] && conn->bits.sock_accepted)",
          "",
          "[Added Lines]",
          "644:     if((conn->sock[SECONDARYSOCKET] != CURL_SOCKET_BAD) &&",
          "645:        conn->bits.sock_accepted)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f7ba0eccf72dda3694a6ac14cfee4dfe051465fb",
      "candidate_info": {
        "commit_hash": "f7ba0eccf72dda3694a6ac14cfee4dfe051465fb",
        "repo": "curl/curl",
        "commit_url": "https://github.com/curl/curl/commit/f7ba0eccf72dda3694a6ac14cfee4dfe051465fb",
        "files": [
          "lib/vtls/openssl.c"
        ],
        "message": "openssl: check if sessionid flag is enabled before retrieving session\n\nIdeally, Curl_ssl_getsessionid should not be called unless sessionid\ncaching is enabled. There is a debug assertion in the function to help\nensure that. Therefore, the pattern in all vtls is basically:\n\n  if(primary.sessionid) {lock(); Curl_ssl_getsessionid(...); unlock();}\n\nThere was one instance in openssl.c where sessionid was not checked\nbeforehand and this change fixes that.\n\nPrior to this change an assertion would occur in openssl debug builds\nduring connection stage if session caching was disabled.\n\nReported-by: Jim Beveridge\n\nFixes https://github.com/curl/curl/issues/8472\nCloses https://github.com/curl/curl/pull/8484",
        "before_after_code_files": [
          "lib/vtls/openssl.c||lib/vtls/openssl.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/vtls/openssl.c||lib/vtls/openssl.c"
          ],
          "candidate": [
            "lib/vtls/openssl.c||lib/vtls/openssl.c"
          ]
        }
      },
      "candidate_diff": {
        "lib/vtls/openssl.c||lib/vtls/openssl.c": [
          "File: lib/vtls/openssl.c -> lib/vtls/openssl.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3239:     return CURLE_SSL_CONNECT_ERROR;",
          "3240:   }",
          "3252:     }",
          "3255:   }",
          "3258: #ifndef CURL_DISABLE_PROXY",
          "3259:   if(conn->proxy_ssl[sockindex].use) {",
          "",
          "[Removed Lines]",
          "3242:   Curl_ssl_sessionid_lock(data);",
          "3243:   if(!Curl_ssl_getsessionid(data, conn, SSL_IS_PROXY() ? TRUE : FALSE,",
          "3244:                             &ssl_sessionid, NULL, sockindex)) {",
          "3246:     if(!SSL_set_session(backend->handle, ssl_sessionid)) {",
          "3247:       Curl_ssl_sessionid_unlock(data);",
          "3248:       failf(data, \"SSL: SSL_set_session failed: %s\",",
          "3249:             ossl_strerror(ERR_get_error(), error_buffer,",
          "3250:                           sizeof(error_buffer)));",
          "3251:       return CURLE_SSL_CONNECT_ERROR;",
          "3254:     infof(data, \"SSL re-using session ID\");",
          "3256:   Curl_ssl_sessionid_unlock(data);",
          "",
          "[Added Lines]",
          "3242:   if(SSL_SET_OPTION(primary.sessionid)) {",
          "3243:     Curl_ssl_sessionid_lock(data);",
          "3244:     if(!Curl_ssl_getsessionid(data, conn, SSL_IS_PROXY() ? TRUE : FALSE,",
          "3245:                               &ssl_sessionid, NULL, sockindex)) {",
          "3247:       if(!SSL_set_session(backend->handle, ssl_sessionid)) {",
          "3248:         Curl_ssl_sessionid_unlock(data);",
          "3249:         failf(data, \"SSL: SSL_set_session failed: %s\",",
          "3250:               ossl_strerror(ERR_get_error(), error_buffer,",
          "3251:                             sizeof(error_buffer)));",
          "3252:         return CURLE_SSL_CONNECT_ERROR;",
          "3253:       }",
          "3255:       infof(data, \"SSL re-using session ID\");",
          "3257:     Curl_ssl_sessionid_unlock(data);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bbe3aa9f881fa27fe828e3c9a36d6831f254a3ee",
      "candidate_info": {
        "commit_hash": "bbe3aa9f881fa27fe828e3c9a36d6831f254a3ee",
        "repo": "curl/curl",
        "commit_url": "https://github.com/curl/curl/commit/bbe3aa9f881fa27fe828e3c9a36d6831f254a3ee",
        "files": [
          "lib/ftp.c",
          "lib/gopher.c",
          "lib/http.c",
          "lib/http_proxy.c",
          "lib/imap.c",
          "lib/openldap.c",
          "lib/pop3.c",
          "lib/smb.c",
          "lib/smtp.c",
          "lib/url.c",
          "lib/vtls/bearssl.c",
          "lib/vtls/gskit.c",
          "lib/vtls/gtls.c",
          "lib/vtls/mbedtls.c",
          "lib/vtls/mesalink.c",
          "lib/vtls/nss.c",
          "lib/vtls/openssl.c",
          "lib/vtls/schannel.c",
          "lib/vtls/schannel.h",
          "lib/vtls/schannel_verify.c",
          "lib/vtls/sectransp.c",
          "lib/vtls/vtls.c",
          "lib/vtls/vtls.h",
          "lib/vtls/wolfssl.c"
        ],
        "message": "vtls: reduce conn->data use\n\nCloses #6474",
        "before_after_code_files": [
          "lib/ftp.c||lib/ftp.c",
          "lib/gopher.c||lib/gopher.c",
          "lib/http.c||lib/http.c",
          "lib/http_proxy.c||lib/http_proxy.c",
          "lib/imap.c||lib/imap.c",
          "lib/openldap.c||lib/openldap.c",
          "lib/pop3.c||lib/pop3.c",
          "lib/smb.c||lib/smb.c",
          "lib/smtp.c||lib/smtp.c",
          "lib/url.c||lib/url.c",
          "lib/vtls/bearssl.c||lib/vtls/bearssl.c",
          "lib/vtls/gskit.c||lib/vtls/gskit.c",
          "lib/vtls/gtls.c||lib/vtls/gtls.c",
          "lib/vtls/mbedtls.c||lib/vtls/mbedtls.c",
          "lib/vtls/mesalink.c||lib/vtls/mesalink.c",
          "lib/vtls/nss.c||lib/vtls/nss.c",
          "lib/vtls/openssl.c||lib/vtls/openssl.c",
          "lib/vtls/schannel.c||lib/vtls/schannel.c",
          "lib/vtls/schannel.h||lib/vtls/schannel.h",
          "lib/vtls/schannel_verify.c||lib/vtls/schannel_verify.c",
          "lib/vtls/sectransp.c||lib/vtls/sectransp.c",
          "lib/vtls/vtls.c||lib/vtls/vtls.c",
          "lib/vtls/vtls.h||lib/vtls/vtls.h",
          "lib/vtls/wolfssl.c||lib/vtls/wolfssl.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/vtls/gskit.c||lib/vtls/gskit.c",
            "lib/vtls/gtls.c||lib/vtls/gtls.c",
            "lib/vtls/mbedtls.c||lib/vtls/mbedtls.c",
            "lib/vtls/mesalink.c||lib/vtls/mesalink.c",
            "lib/vtls/nss.c||lib/vtls/nss.c",
            "lib/vtls/openssl.c||lib/vtls/openssl.c",
            "lib/vtls/schannel.c||lib/vtls/schannel.c",
            "lib/vtls/sectransp.c||lib/vtls/sectransp.c",
            "lib/vtls/vtls.c||lib/vtls/vtls.c",
            "lib/vtls/vtls.h||lib/vtls/vtls.h",
            "lib/vtls/wolfssl.c||lib/vtls/wolfssl.c"
          ],
          "candidate": [
            "lib/vtls/gskit.c||lib/vtls/gskit.c",
            "lib/vtls/gtls.c||lib/vtls/gtls.c",
            "lib/vtls/mbedtls.c||lib/vtls/mbedtls.c",
            "lib/vtls/mesalink.c||lib/vtls/mesalink.c",
            "lib/vtls/nss.c||lib/vtls/nss.c",
            "lib/vtls/openssl.c||lib/vtls/openssl.c",
            "lib/vtls/schannel.c||lib/vtls/schannel.c",
            "lib/vtls/sectransp.c||lib/vtls/sectransp.c",
            "lib/vtls/vtls.c||lib/vtls/vtls.c",
            "lib/vtls/vtls.h||lib/vtls/vtls.h",
            "lib/vtls/wolfssl.c||lib/vtls/wolfssl.c"
          ]
        }
      },
      "candidate_diff": {
        "lib/ftp.c||lib/ftp.c": [
          "File: lib/ftp.c -> lib/ftp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "445:     infof(data, \"Doing the SSL/TLS handshake on the data stream\\n\");",
          "447:     if(result)",
          "448:       return result;",
          "449:   }",
          "",
          "[Removed Lines]",
          "446:     result = Curl_ssl_connect(conn, SECONDARYSOCKET);",
          "",
          "[Added Lines]",
          "446:     result = Curl_ssl_connect(data, conn, SECONDARYSOCKET);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2735:       if((ftpcode == 234) || (ftpcode == 334)) {",
          "2738:         if(!result) {",
          "",
          "[Removed Lines]",
          "2737:         result = Curl_ssl_connect(conn, FIRSTSOCKET);",
          "",
          "[Added Lines]",
          "2737:         result = Curl_ssl_connect(data, conn, FIRSTSOCKET);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2800:     case FTP_CCC:",
          "2801:       if(ftpcode < 500) {",
          "2805:         if(result)",
          "2806:           failf(data, \"Failed to clear the command channel (CCC)\");",
          "",
          "[Removed Lines]",
          "2803:         result = Curl_ssl_shutdown(conn, FIRSTSOCKET);",
          "",
          "[Added Lines]",
          "2803:         result = Curl_ssl_shutdown(data, conn, FIRSTSOCKET);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3139:   if(conn->handler->flags & PROTOPT_SSL) {",
          "3142:     if(result)",
          "3143:       return result;",
          "3144:     conn->bits.ftp_use_control_ssl = TRUE;",
          "",
          "[Removed Lines]",
          "3141:     result = Curl_ssl_connect(conn, FIRSTSOCKET);",
          "",
          "[Added Lines]",
          "3141:     result = Curl_ssl_connect(data, conn, FIRSTSOCKET);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3284:     if(conn->ssl[SECONDARYSOCKET].use) {",
          "",
          "[Removed Lines]",
          "3287:       Curl_ssl_close(conn, SECONDARYSOCKET);",
          "",
          "[Added Lines]",
          "3287:       Curl_ssl_close(data, conn, SECONDARYSOCKET);",
          "",
          "---------------"
        ],
        "lib/gopher.c||lib/gopher.c": [
          "File: lib/gopher.c -> lib/gopher.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "113: static CURLcode gopher_connecting(struct Curl_easy *data, bool *done)",
          "114: {",
          "115:   struct connectdata *conn = data->conn;",
          "117:   if(result)",
          "118:     connclose(conn, \"Failed TLS connection\");",
          "",
          "[Removed Lines]",
          "116:   CURLcode result = Curl_ssl_connect(conn, FIRSTSOCKET);",
          "",
          "[Added Lines]",
          "116:   CURLcode result = Curl_ssl_connect(data, conn, FIRSTSOCKET);",
          "",
          "---------------"
        ],
        "lib/http.c||lib/http.c": [
          "File: lib/http.c -> lib/http.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1532: #endif",
          "1536:   if(result)",
          "1537:     connclose(conn, \"Failed HTTPS connection\");",
          "",
          "[Removed Lines]",
          "1535:   result = Curl_ssl_connect_nonblocking(conn, FIRSTSOCKET, done);",
          "",
          "[Added Lines]",
          "1535:   result = Curl_ssl_connect_nonblocking(data, conn, FIRSTSOCKET, done);",
          "",
          "---------------"
        ],
        "lib/http_proxy.c||lib/http_proxy.c": [
          "File: lib/http_proxy.c -> lib/http_proxy.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "58:   if(!conn->bits.proxy_ssl_connected[sockindex]) {",
          "60:     result =",
          "62:                                    &conn->bits.proxy_ssl_connected[sockindex]);",
          "63:     if(result)",
          "",
          "[Removed Lines]",
          "61:       Curl_ssl_connect_nonblocking(conn, sockindex,",
          "",
          "[Added Lines]",
          "61:       Curl_ssl_connect_nonblocking(conn->data, conn, sockindex,",
          "",
          "---------------"
        ],
        "lib/imap.c||lib/imap.c": [
          "File: lib/imap.c -> lib/imap.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "473: {",
          "475:   struct imap_conn *imapc = &conn->proto.imapc;",
          "477:                                                  &imapc->ssldone);",
          "479:   if(!result) {",
          "",
          "[Removed Lines]",
          "476:   CURLcode result = Curl_ssl_connect_nonblocking(conn, FIRSTSOCKET,",
          "",
          "[Added Lines]",
          "476:   CURLcode result = Curl_ssl_connect_nonblocking(data, conn, FIRSTSOCKET,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1366:   struct imap_conn *imapc = &conn->proto.imapc;",
          "1368:   if((conn->handler->flags & PROTOPT_SSL) && !imapc->ssldone) {",
          "1370:     if(result || !imapc->ssldone)",
          "1371:       return result;",
          "1372:   }",
          "",
          "[Removed Lines]",
          "1369:     result = Curl_ssl_connect_nonblocking(conn, FIRSTSOCKET, &imapc->ssldone);",
          "",
          "[Added Lines]",
          "1369:     result = Curl_ssl_connect_nonblocking(data, conn,",
          "1370:                                           FIRSTSOCKET, &imapc->ssldone);",
          "",
          "---------------"
        ],
        "lib/openldap.c||lib/openldap.c": [
          "File: lib/openldap.c -> lib/openldap.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "245: #ifdef USE_SSL",
          "246:   if(conn->handler->flags & PROTOPT_SSL) {",
          "247:     CURLcode result;",
          "249:     if(result)",
          "250:       return result;",
          "251:   }",
          "",
          "[Removed Lines]",
          "248:     result = Curl_ssl_connect_nonblocking(conn, FIRSTSOCKET, &li->ssldone);",
          "",
          "[Added Lines]",
          "248:     result = Curl_ssl_connect_nonblocking(data, conn,",
          "249:                                           FIRSTSOCKET, &li->ssldone);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "267:   if(conn->handler->flags & PROTOPT_SSL) {",
          "269:     if(!li->ssldone) {",
          "271:                                                      &li->ssldone);",
          "272:       if(result || !li->ssldone)",
          "273:         return result;",
          "",
          "[Removed Lines]",
          "270:       CURLcode result = Curl_ssl_connect_nonblocking(conn, FIRSTSOCKET,",
          "",
          "[Added Lines]",
          "271:       CURLcode result = Curl_ssl_connect_nonblocking(data, conn, FIRSTSOCKET,",
          "",
          "---------------"
        ],
        "lib/pop3.c||lib/pop3.c": [
          "File: lib/pop3.c -> lib/pop3.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "368: {",
          "370:   struct pop3_conn *pop3c = &conn->proto.pop3c;",
          "372:                                                  &pop3c->ssldone);",
          "374:   if(!result) {",
          "",
          "[Removed Lines]",
          "371:   CURLcode result = Curl_ssl_connect_nonblocking(conn, FIRSTSOCKET,",
          "",
          "[Added Lines]",
          "371:   CURLcode result = Curl_ssl_connect_nonblocking(data, conn, FIRSTSOCKET,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1029:   struct pop3_conn *pop3c = &conn->proto.pop3c;",
          "1031:   if((conn->handler->flags & PROTOPT_SSL) && !pop3c->ssldone) {",
          "1033:     if(result || !pop3c->ssldone)",
          "1034:       return result;",
          "1035:   }",
          "",
          "[Removed Lines]",
          "1032:     result = Curl_ssl_connect_nonblocking(conn, FIRSTSOCKET, &pop3c->ssldone);",
          "",
          "[Added Lines]",
          "1032:     result = Curl_ssl_connect_nonblocking(data, conn,",
          "1033:                                           FIRSTSOCKET, &pop3c->ssldone);",
          "",
          "---------------"
        ],
        "lib/smb.c||lib/smb.c": [
          "File: lib/smb.c -> lib/smb.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "669: #ifdef USE_SSL",
          "670:     if((conn->handler->flags & PROTOPT_SSL)) {",
          "671:       bool ssl_done = FALSE;",
          "673:       if(result && result != CURLE_AGAIN)",
          "674:         return result;",
          "675:       if(!ssl_done)",
          "",
          "[Removed Lines]",
          "672:       result = Curl_ssl_connect_nonblocking(conn, FIRSTSOCKET, &ssl_done);",
          "",
          "[Added Lines]",
          "672:       result = Curl_ssl_connect_nonblocking(data, conn,",
          "673:                                             FIRSTSOCKET, &ssl_done);",
          "",
          "---------------"
        ],
        "lib/smtp.c||lib/smtp.c": [
          "File: lib/smtp.c -> lib/smtp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "396:   struct connectdata *conn = data->conn;",
          "397:   struct smtp_conn *smtpc = &conn->proto.smtpc;",
          "399:                                                  &smtpc->ssldone);",
          "401:   if(!result) {",
          "",
          "[Removed Lines]",
          "398:   CURLcode result = Curl_ssl_connect_nonblocking(conn, FIRSTSOCKET,",
          "",
          "[Added Lines]",
          "398:   CURLcode result = Curl_ssl_connect_nonblocking(data, conn, FIRSTSOCKET,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1256:   struct smtp_conn *smtpc = &conn->proto.smtpc;",
          "1258:   if((conn->handler->flags & PROTOPT_SSL) && !smtpc->ssldone) {",
          "1260:     if(result || !smtpc->ssldone)",
          "1261:       return result;",
          "1262:   }",
          "",
          "[Removed Lines]",
          "1259:     result = Curl_ssl_connect_nonblocking(conn, FIRSTSOCKET, &smtpc->ssldone);",
          "",
          "[Added Lines]",
          "1259:     result = Curl_ssl_connect_nonblocking(data, conn,",
          "1260:                                           FIRSTSOCKET, &smtpc->ssldone);",
          "",
          "---------------"
        ],
        "lib/url.c||lib/url.c": [
          "File: lib/url.c -> lib/url.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "730:   if(CURL_SOCKET_BAD != conn->sock[SECONDARYSOCKET])",
          "",
          "[Removed Lines]",
          "726:   Curl_ssl_close(conn, FIRSTSOCKET);",
          "727:   Curl_ssl_close(conn, SECONDARYSOCKET);",
          "",
          "[Added Lines]",
          "726:   Curl_ssl_close(data, conn, FIRSTSOCKET);",
          "727:   Curl_ssl_close(data, conn, SECONDARYSOCKET);",
          "",
          "---------------"
        ],
        "lib/vtls/bearssl.c||lib/vtls/bearssl.c": [
          "File: lib/vtls/bearssl.c -> lib/vtls/bearssl.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "294:   x509_get_pkey",
          "295: };",
          "298: {",
          "300:   struct ssl_connect_data *connssl = &conn->ssl[sockindex];",
          "301:   struct ssl_backend_data *backend = connssl->backend;",
          "302:   const char * const ssl_cafile = SSL_CONN_CONFIG(CAfile);",
          "",
          "[Removed Lines]",
          "297: static CURLcode bearssl_connect_step1(struct connectdata *conn, int sockindex)",
          "299:   struct Curl_easy *data = conn->data;",
          "",
          "[Added Lines]",
          "297: static CURLcode bearssl_connect_step1(struct Curl_easy *data,",
          "298:                                       struct connectdata *conn, int sockindex)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "374:   if(SSL_SET_OPTION(primary.sessionid)) {",
          "375:     void *session;",
          "379:       br_ssl_engine_set_session_parameters(&backend->ctx.eng, session);",
          "380:       infof(data, \"BearSSL: re-using session ID\\n\");",
          "381:     }",
          "383:   }",
          "385:   if(conn->bits.tls_enable_alpn) {",
          "",
          "[Removed Lines]",
          "377:     Curl_ssl_sessionid_lock(conn);",
          "378:     if(!Curl_ssl_getsessionid(conn, &session, NULL, sockindex)) {",
          "382:     Curl_ssl_sessionid_unlock(conn);",
          "",
          "[Added Lines]",
          "377:     Curl_ssl_sessionid_lock(data);",
          "378:     if(!Curl_ssl_getsessionid(data, conn, &session, NULL, sockindex)) {",
          "382:     Curl_ssl_sessionid_unlock(data);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "429:   return CURLE_OK;",
          "430: }",
          "433:                                   unsigned target)",
          "434: {",
          "436:   struct ssl_connect_data *connssl = &conn->ssl[sockindex];",
          "437:   struct ssl_backend_data *backend = connssl->backend;",
          "438:   curl_socket_t sockfd = conn->sock[sockindex];",
          "",
          "[Removed Lines]",
          "432: static CURLcode bearssl_run_until(struct connectdata *conn, int sockindex,",
          "435:   struct Curl_easy *data = conn->data;",
          "",
          "[Added Lines]",
          "432: static CURLcode bearssl_run_until(struct Curl_easy *data,",
          "433:                                   struct connectdata *conn, int sockindex,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "507:   }",
          "508: }",
          "511: {",
          "513:   struct ssl_connect_data *connssl = &conn->ssl[sockindex];",
          "514:   struct ssl_backend_data *backend = connssl->backend;",
          "515:   CURLcode ret;",
          "518:   if(ret == CURLE_AGAIN)",
          "519:     return CURLE_OK;",
          "520:   if(ret == CURLE_OK) {",
          "",
          "[Removed Lines]",
          "510: static CURLcode bearssl_connect_step2(struct connectdata *conn, int sockindex)",
          "512:   struct Curl_easy *data = conn->data;",
          "517:   ret = bearssl_run_until(conn, sockindex, BR_SSL_SENDAPP | BR_SSL_RECVAPP);",
          "",
          "[Added Lines]",
          "510: static CURLcode bearssl_connect_step2(struct Curl_easy *data,",
          "511:                                       struct connectdata *conn, int sockindex)",
          "517:   ret = bearssl_run_until(data, conn, sockindex,",
          "518:                           BR_SSL_SENDAPP | BR_SSL_RECVAPP);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "527:   return ret;",
          "528: }",
          "531: {",
          "533:   struct ssl_connect_data *connssl = &conn->ssl[sockindex];",
          "534:   struct ssl_backend_data *backend = connssl->backend;",
          "535:   CURLcode ret;",
          "",
          "[Removed Lines]",
          "530: static CURLcode bearssl_connect_step3(struct connectdata *conn, int sockindex)",
          "532:   struct Curl_easy *data = conn->data;",
          "",
          "[Added Lines]",
          "531: static CURLcode bearssl_connect_step3(struct Curl_easy *data,",
          "532:                                       struct connectdata *conn, int sockindex)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "568:     if(!session)",
          "569:       return CURLE_OUT_OF_MEMORY;",
          "570:     br_ssl_engine_get_session_parameters(&backend->ctx.eng, session);",
          "573:     if(incache)",
          "577:     if(ret) {",
          "578:       free(session);",
          "579:       return CURLE_OUT_OF_MEMORY;",
          "",
          "[Removed Lines]",
          "571:     Curl_ssl_sessionid_lock(conn);",
          "572:     incache = !(Curl_ssl_getsessionid(conn, &oldsession, NULL, sockindex));",
          "574:       Curl_ssl_delsessionid(conn, oldsession);",
          "575:     ret = Curl_ssl_addsessionid(conn, session, 0, sockindex);",
          "576:     Curl_ssl_sessionid_unlock(conn);",
          "",
          "[Added Lines]",
          "572:     Curl_ssl_sessionid_lock(data);",
          "573:     incache = !(Curl_ssl_getsessionid(data, conn,",
          "574:                                       &oldsession, NULL, sockindex));",
          "576:       Curl_ssl_delsessionid(data, oldsession);",
          "577:     ret = Curl_ssl_addsessionid(data, conn, session, 0, sockindex);",
          "578:     Curl_ssl_sessionid_unlock(data);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "641:   return applen;",
          "642: }",
          "645:                                        int sockindex,",
          "646:                                        bool nonblocking,",
          "647:                                        bool *done)",
          "648: {",
          "649:   CURLcode ret;",
          "651:   struct ssl_connect_data *connssl = &conn->ssl[sockindex];",
          "652:   curl_socket_t sockfd = conn->sock[sockindex];",
          "653:   timediff_t timeout_ms;",
          "",
          "[Removed Lines]",
          "644: static CURLcode bearssl_connect_common(struct connectdata *conn,",
          "650:   struct Curl_easy *data = conn->data;",
          "",
          "[Added Lines]",
          "646: static CURLcode bearssl_connect_common(struct Curl_easy *data,",
          "647:                                        struct connectdata *conn,",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "660:   }",
          "662:   if(ssl_connect_1 == connssl->connecting_state) {",
          "664:     if(ret)",
          "665:       return ret;",
          "666:   }",
          "",
          "[Removed Lines]",
          "663:     ret = bearssl_connect_step1(conn, sockindex);",
          "",
          "[Added Lines]",
          "665:     ret = bearssl_connect_step1(data, conn, sockindex);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "717:     if(ret || (nonblocking &&",
          "718:                (ssl_connect_2 == connssl->connecting_state ||",
          "719:                 ssl_connect_2_reading == connssl->connecting_state ||",
          "",
          "[Removed Lines]",
          "716:     ret = bearssl_connect_step2(conn, sockindex);",
          "",
          "[Added Lines]",
          "718:     ret = bearssl_connect_step2(data, conn, sockindex);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "722:   }",
          "724:   if(ssl_connect_3 == connssl->connecting_state) {",
          "726:     if(ret)",
          "727:       return ret;",
          "728:   }",
          "",
          "[Removed Lines]",
          "725:     ret = bearssl_connect_step3(conn, sockindex);",
          "",
          "[Added Lines]",
          "727:     ret = bearssl_connect_step3(data, conn, sockindex);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "775:   return CURLE_OK;",
          "776: }",
          "779: {",
          "780:   CURLcode ret;",
          "781:   bool done = FALSE;",
          "784:   if(ret)",
          "785:     return ret;",
          "",
          "[Removed Lines]",
          "778: static CURLcode bearssl_connect(struct connectdata *conn, int sockindex)",
          "783:   ret = bearssl_connect_common(conn, sockindex, FALSE, &done);",
          "",
          "[Added Lines]",
          "780: static CURLcode bearssl_connect(struct Curl_easy *data,",
          "781:                                 struct connectdata *conn, int sockindex)",
          "786:   ret = bearssl_connect_common(data, conn, sockindex, FALSE, &done);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "789:   return CURLE_OK;",
          "790: }",
          "793:                                             int sockindex, bool *done)",
          "794: {",
          "796: }",
          "798: static void *bearssl_get_internals(struct ssl_connect_data *connssl,",
          "",
          "[Removed Lines]",
          "792: static CURLcode bearssl_connect_nonblocking(struct connectdata *conn,",
          "795:   return bearssl_connect_common(conn, sockindex, TRUE, done);",
          "",
          "[Added Lines]",
          "795: static CURLcode bearssl_connect_nonblocking(struct Curl_easy *data,",
          "796:                                             struct connectdata *conn,",
          "799:   return bearssl_connect_common(data, conn, sockindex, TRUE, done);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "802:   return &backend->ctx;",
          "803: }",
          "806: {",
          "807:   struct ssl_connect_data *connssl = &conn->ssl[sockindex];",
          "808:   struct ssl_backend_data *backend = connssl->backend;",
          "",
          "[Removed Lines]",
          "805: static void bearssl_close(struct connectdata *conn, int sockindex)",
          "",
          "[Added Lines]",
          "809: static void bearssl_close(struct Curl_easy *data,",
          "810:                           struct connectdata *conn, int sockindex)",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "811:   if(backend->active) {",
          "812:     br_ssl_engine_close(&backend->ctx.eng);",
          "814:   }",
          "815:   for(i = 0; i < backend->anchors_len; ++i)",
          "816:     free(backend->anchors[i].dn.data);",
          "",
          "[Removed Lines]",
          "813:     (void)bearssl_run_until(conn, sockindex, BR_SSL_CLOSED);",
          "",
          "[Added Lines]",
          "818:     (void)bearssl_run_until(data, conn, sockindex, BR_SSL_CLOSED);",
          "",
          "---------------"
        ],
        "lib/vtls/gskit.c||lib/vtls/gskit.c": [
          "File: lib/vtls/gskit.c -> lib/vtls/gskit.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "610: }",
          "616: {",
          "617:   struct ssl_connect_data *connssl = &conn->ssl[sockindex];",
          "618:   CURLcode cc = CURLE_SEND_ERROR;",
          "619:   int written;",
          "",
          "[Removed Lines]",
          "613: static ssize_t real_gskit_send(struct Curl_easy *data,",
          "614:                                struct connectdata *conn, int sockindex,",
          "615:                                const void *mem, size_t len, CURLcode *curlcode)",
          "",
          "[Added Lines]",
          "613: static ssize_t gskit_send(struct connectdata *conn, int sockindex,",
          "614:                           const void *mem, size_t len, CURLcode *curlcode)",
          "616:   struct connectdata *conn = data->conn;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "635: }",
          "646:                                size_t buffersize, CURLcode *curlcode)",
          "647: {",
          "648:   struct ssl_connect_data *connssl = &conn->ssl[num];",
          "649:   int nread;",
          "650:   CURLcode cc = CURLE_RECV_ERROR;",
          "",
          "[Removed Lines]",
          "637: static ssize_t gskit_send(struct connectdata *conn, int sockindex,",
          "638:                           const void *mem, size_t len, CURLcode *curlcode)",
          "639: {",
          "640:   return real_gskit_send(conn->data, conn, sockindex, mem, len, curlcode);",
          "641: }",
          "644: static ssize_t real_gskit_recv(struct Curl_easy *data,",
          "645:                                struct connectdata *conn, int num, char *buf,",
          "",
          "[Added Lines]",
          "638: static ssize_t gskit_recv(struct Curl_easy *data, int num, char *buf,",
          "641:   struct connectdata *conn = data->conn;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "668:   return (ssize_t) nread;",
          "669: }",
          "677: static CURLcode",
          "678: set_ssl_version_min_max(unsigned int *protoflags, struct Curl_easy *data)",
          "679: {",
          "",
          "[Removed Lines]",
          "671: static ssize_t gskit_recv(struct connectdata *conn, int num, char *buf,",
          "672:                           size_t buffersize, CURLcode *curlcode)",
          "673: {",
          "674:   return real_gskit_recv(conn->data, conn, num, buf, buffersize, curlcode);",
          "675: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1137: }",
          "1143: {",
          "1144:   CURLcode result;",
          "",
          "[Removed Lines]",
          "1140: static CURLcode real_gskit_connect_nonblocking(struct Curl_easy *data,",
          "1141:                                                struct connectdata *conn,",
          "1142:                                                int sockindex, bool *done)",
          "",
          "[Added Lines]",
          "1128: static CURLcode gskit_connect_nonblocking(struct Curl_easy *data,",
          "1129:                                           struct connectdata *conn,",
          "1130:                                           int sockindex, bool *done)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1149:   return result;",
          "1150: }",
          "1161: {",
          "1162:   CURLcode result;",
          "1163:   bool done;",
          "",
          "[Removed Lines]",
          "1152: static CURLcode gskit_connect_nonblocking(struct connectdata *conn,",
          "1153:                                           int sockindex, bool *done)",
          "1154: {",
          "1155:   return real_gskit_connect_nonblocking(conn->data, conn, sockindex, done);",
          "1156: }",
          "1159: static CURLcode real_gskit_connect(struct Curl_easy *data,",
          "1160:                                    struct connectdata *conn, int sockindex)",
          "",
          "[Added Lines]",
          "1141: static CURLcode gskit_connect(struct Curl_easy *data,",
          "1142:                               struct connectdata *conn, int sockindex)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1172:   return CURLE_OK;",
          "1173: }",
          "1183: {",
          "1184:   close_one(&conn->ssl[sockindex], data, conn, sockindex);",
          "1185:   close_one(&conn->proxy_ssl[sockindex], data, conn, sockindex);",
          "1186: }",
          "1196: {",
          "1197:   struct ssl_connect_data *connssl = &conn->ssl[sockindex];",
          "1198:   int what;",
          "",
          "[Removed Lines]",
          "1175: static CURLcode gskit_connect(struct connectdata *conn, int sockindex)",
          "1176: {",
          "1177:   return real_gskit_connect(conn->data, conn, sockindex);",
          "1178: }",
          "1181: static void real_gskit_close(struct Curl_easy *data, struct connectdata *conn,",
          "1182:                              int sockindex)",
          "1188: static void gskit_close(struct connectdata *conn, int sockindex)",
          "1189: {",
          "1190:   real_gskit_close(conn->data, conn, sockindex);",
          "1191: }",
          "1194: static int real_gskit_shutdown(struct Curl_easy *data,",
          "1195:                                struct connectdata *conn, int sockindex)",
          "",
          "[Added Lines]",
          "1158: static void gskit_close(struct Curl_easy *data, struct connectdata *conn,",
          "1159:                         int sockindex)",
          "1166: static int gskit_shutdown(struct Curl_easy *data,",
          "1167:                           struct connectdata *conn, int sockindex)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1247:   return rc;",
          "1248: }",
          "1256: static size_t gskit_version(char *buffer, size_t size)",
          "1257: {",
          "",
          "[Removed Lines]",
          "1250: static int gskit_shutdown(struct connectdata *conn, int sockindex)",
          "1251: {",
          "1252:   return real_gskit_shutdown(conn->data, conn, sockindex);",
          "1253: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/vtls/gtls.c||lib/vtls/gtls.c": [
          "File: lib/vtls/gtls.c -> lib/vtls/gtls.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "204:                           int sockindex,",
          "205:                           bool duringconnect,",
          "206:                           bool nonblocking)",
          "207: {",
          "209:   struct ssl_connect_data *connssl = &conn->ssl[sockindex];",
          "210:   struct ssl_backend_data *backend = connssl->backend;",
          "211:   gnutls_session_t session = backend->session;",
          "",
          "[Removed Lines]",
          "203: static CURLcode handshake(struct connectdata *conn,",
          "208:   struct Curl_easy *data = conn->data;",
          "",
          "[Added Lines]",
          "203: static CURLcode handshake(struct Curl_easy *data,",
          "204:                           struct connectdata *conn,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "314: #define GNUTLS_SRP \"+SRP\"",
          "316: static CURLcode",
          "318: {",
          "320:   long ssl_version = SSL_CONN_CONFIG(version);",
          "321:   long ssl_version_max = SSL_CONN_CONFIG(version_max);",
          "",
          "[Removed Lines]",
          "317: set_ssl_version_min_max(const char **prioritylist, struct connectdata *conn)",
          "319:   struct Curl_easy *data = conn->data;",
          "",
          "[Added Lines]",
          "317: set_ssl_version_min_max(const char **prioritylist, struct Curl_easy *data)",
          "319:   struct connectdata *conn = data->conn;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "379: }",
          "381: static CURLcode",
          "383:                    int sockindex)",
          "384: {",
          "386:   struct ssl_connect_data *connssl = &conn->ssl[sockindex];",
          "387:   struct ssl_backend_data *backend = connssl->backend;",
          "388:   unsigned int init_flags;",
          "",
          "[Removed Lines]",
          "382: gtls_connect_step1(struct connectdata *conn,",
          "385:   struct Curl_easy *data = conn->data;",
          "",
          "[Added Lines]",
          "382: gtls_connect_step1(struct Curl_easy *data,",
          "383:                    struct connectdata *conn,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "568:     case CURL_SSLVERSION_TLSv1_2:",
          "569:     case CURL_SSLVERSION_TLSv1_3:",
          "570:       {",
          "572:         if(result != CURLE_OK)",
          "573:           return result;",
          "574:         break;",
          "",
          "[Removed Lines]",
          "571:         CURLcode result = set_ssl_version_min_max(&prioritylist, conn);",
          "",
          "[Added Lines]",
          "571:         CURLcode result = set_ssl_version_min_max(&prioritylist, data);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "731:     void *ssl_sessionid;",
          "732:     size_t ssl_idsize;",
          "737:       gnutls_session_set_data(session, ssl_sessionid, ssl_idsize);",
          "740:       infof(data, \"SSL re-using session ID\\n\");",
          "741:     }",
          "743:   }",
          "745:   return CURLE_OK;",
          "",
          "[Removed Lines]",
          "734:     Curl_ssl_sessionid_lock(conn);",
          "735:     if(!Curl_ssl_getsessionid(conn, &ssl_sessionid, &ssl_idsize, sockindex)) {",
          "742:     Curl_ssl_sessionid_unlock(conn);",
          "",
          "[Added Lines]",
          "734:     Curl_ssl_sessionid_lock(data);",
          "735:     if(!Curl_ssl_getsessionid(data, conn,",
          "736:                               &ssl_sessionid, &ssl_idsize, sockindex)) {",
          "743:     Curl_ssl_sessionid_unlock(data);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "807: static Curl_send gtls_send;",
          "809: static CURLcode",
          "811:                    int sockindex)",
          "812: {",
          "813:   unsigned int cert_list_size;",
          "",
          "[Removed Lines]",
          "810: gtls_connect_step3(struct connectdata *conn,",
          "",
          "[Added Lines]",
          "811: gtls_connect_step3(struct Curl_easy *data,",
          "812:                    struct connectdata *conn,",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "820:   size_t size;",
          "821:   time_t certclock;",
          "822:   const char *ptr;",
          "824:   struct ssl_connect_data *connssl = &conn->ssl[sockindex];",
          "825:   struct ssl_backend_data *backend = connssl->backend;",
          "826:   gnutls_session_t session = backend->session;",
          "",
          "[Removed Lines]",
          "823:   struct Curl_easy *data = conn->data;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1291:       gnutls_session_get_data(session, connect_sessionid, &connect_idsize);",
          "1295:                                         sockindex));",
          "1296:       if(incache) {",
          "1300:       }",
          "1306:       if(result) {",
          "1307:         free(connect_sessionid);",
          "1308:         result = CURLE_OUT_OF_MEMORY;",
          "",
          "[Removed Lines]",
          "1293:       Curl_ssl_sessionid_lock(conn);",
          "1294:       incache = !(Curl_ssl_getsessionid(conn, &ssl_sessionid, NULL,",
          "1299:         Curl_ssl_delsessionid(conn, ssl_sessionid);",
          "1303:       result = Curl_ssl_addsessionid(conn, connect_sessionid, connect_idsize,",
          "1304:                                      sockindex);",
          "1305:       Curl_ssl_sessionid_unlock(conn);",
          "",
          "[Added Lines]",
          "1294:       Curl_ssl_sessionid_lock(data);",
          "1295:       incache = !(Curl_ssl_getsessionid(data, conn, &ssl_sessionid, NULL,",
          "1300:         Curl_ssl_delsessionid(data, ssl_sessionid);",
          "1304:       result = Curl_ssl_addsessionid(data, conn, connect_sessionid,",
          "1305:                                      connect_idsize, sockindex);",
          "1306:       Curl_ssl_sessionid_unlock(data);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1326:    'ssl_connect_2_writing' (waiting to be able to write).",
          "1328: static CURLcode",
          "1330:                     int sockindex,",
          "1331:                     bool nonblocking,",
          "1332:                     bool *done)",
          "",
          "[Removed Lines]",
          "1329: gtls_connect_common(struct connectdata *conn,",
          "",
          "[Added Lines]",
          "1330: gtls_connect_common(struct Curl_easy *data,",
          "1331:                     struct connectdata *conn,",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1338:   if(ssl_connect_1 == connssl->connecting_state) {",
          "1340:     if(rc)",
          "1341:       return rc;",
          "1342:   }",
          "1345:   if(rc)",
          "1347:     return rc;",
          "1350:   if(ssl_connect_1 == connssl->connecting_state) {",
          "1352:     if(rc)",
          "1353:       return rc;",
          "1354:   }",
          "",
          "[Removed Lines]",
          "1339:     rc = gtls_connect_step1(conn, sockindex);",
          "1344:   rc = handshake(conn, sockindex, TRUE, nonblocking);",
          "1351:     rc = gtls_connect_step3(conn, sockindex);",
          "",
          "[Added Lines]",
          "1341:     rc = gtls_connect_step1(data, conn, sockindex);",
          "1346:   rc = handshake(data, conn, sockindex, TRUE, nonblocking);",
          "1353:     rc = gtls_connect_step3(data, conn, sockindex);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1358:   return CURLE_OK;",
          "1359: }",
          "1362:                                          int sockindex, bool *done)",
          "1363: {",
          "1365: }",
          "1368: {",
          "1369:   CURLcode result;",
          "1370:   bool done = FALSE;",
          "1373:   if(result)",
          "1374:     return result;",
          "",
          "[Removed Lines]",
          "1361: static CURLcode gtls_connect_nonblocking(struct connectdata *conn,",
          "1364:   return gtls_connect_common(conn, sockindex, TRUE, done);",
          "1367: static CURLcode gtls_connect(struct connectdata *conn, int sockindex)",
          "1372:   result = gtls_connect_common(conn, sockindex, FALSE, &done);",
          "",
          "[Added Lines]",
          "1363: static CURLcode gtls_connect_nonblocking(struct Curl_easy *data,",
          "1364:                                          struct connectdata *conn,",
          "1367:   return gtls_connect_common(data, conn, sockindex, TRUE, done);",
          "1370: static CURLcode gtls_connect(struct Curl_easy *data, struct connectdata *conn,",
          "1371:                              int sockindex)",
          "1376:   result = gtls_connect_common(data, conn, sockindex, FALSE, &done);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1441: #endif",
          "1442: }",
          "1445: {",
          "1446:   close_one(&conn->ssl[sockindex]);",
          "1447: #ifndef CURL_DISABLE_PROXY",
          "1448:   close_one(&conn->proxy_ssl[sockindex]);",
          "",
          "[Removed Lines]",
          "1444: static void gtls_close(struct connectdata *conn, int sockindex)",
          "",
          "[Added Lines]",
          "1448: static void gtls_close(struct Curl_easy *data, struct connectdata *conn,",
          "1449:                        int sockindex)",
          "1451:   (void) data;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1457: {",
          "1458:   struct ssl_connect_data *connssl = &conn->ssl[sockindex];",
          "1459:   struct ssl_backend_data *backend = connssl->backend;",
          "1460:   int retval = 0;",
          "1463: #ifndef CURL_DISABLE_FTP",
          "",
          "[Removed Lines]",
          "1456: static int gtls_shutdown(struct connectdata *conn, int sockindex)",
          "1461:   struct Curl_easy *data = conn->data;",
          "",
          "[Added Lines]",
          "1462: static int gtls_shutdown(struct Curl_easy *data, struct connectdata *conn,",
          "1463:                          int sockindex)",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1547:   if(ret == GNUTLS_E_REHANDSHAKE) {",
          "1551:     if(result)",
          "",
          "[Removed Lines]",
          "1550:     CURLcode result = handshake(conn, num, FALSE, FALSE);",
          "",
          "[Added Lines]",
          "1556:     CURLcode result = handshake(data, conn, num, FALSE, FALSE);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1557:   }",
          "1559:   if(ret < 0) {",
          "1562:           (int)ret, gnutls_strerror((int)ret));",
          "",
          "[Removed Lines]",
          "1560:     failf(conn->data, \"GnuTLS recv error (%d): %s\",",
          "",
          "[Added Lines]",
          "1566:     failf(data, \"GnuTLS recv error (%d): %s\",",
          "",
          "---------------"
        ],
        "lib/vtls/mbedtls.c||lib/vtls/mbedtls.c": [
          "File: lib/vtls/mbedtls.c -> lib/vtls/mbedtls.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "196: }",
          "198: static CURLcode",
          "200: {",
          "202:   struct ssl_connect_data *connssl = &conn->ssl[sockindex];",
          "203:   struct ssl_backend_data *backend = connssl->backend;",
          "204:   int mbedtls_ver_min = MBEDTLS_SSL_MINOR_VERSION_1;",
          "",
          "[Removed Lines]",
          "199: set_ssl_version_min_max(struct connectdata *conn, int sockindex)",
          "201:   struct Curl_easy *data = conn->data;",
          "",
          "[Added Lines]",
          "199: set_ssl_version_min_max(struct Curl_easy *data, struct connectdata *conn,",
          "200:                         int sockindex)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "241: }",
          "243: static CURLcode",
          "245:                    int sockindex)",
          "246: {",
          "248:   struct ssl_connect_data *connssl = &conn->ssl[sockindex];",
          "249:   struct ssl_backend_data *backend = connssl->backend;",
          "250:   const char * const ssl_cafile = SSL_CONN_CONFIG(CAfile);",
          "",
          "[Removed Lines]",
          "244: mbed_connect_step1(struct connectdata *conn,",
          "247:   struct Curl_easy *data = conn->data;",
          "",
          "[Added Lines]",
          "244: mbed_connect_step1(struct Curl_easy *data, struct connectdata *conn,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "427:   case CURL_SSLVERSION_TLSv1_2:",
          "428:   case CURL_SSLVERSION_TLSv1_3:",
          "429:     {",
          "431:       if(result != CURLE_OK)",
          "432:         return result;",
          "433:       break;",
          "",
          "[Removed Lines]",
          "430:       CURLcode result = set_ssl_version_min_max(conn, sockindex);",
          "",
          "[Added Lines]",
          "429:       CURLcode result = set_ssl_version_min_max(data, conn, sockindex);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "463:   if(SSL_SET_OPTION(primary.sessionid)) {",
          "464:     void *old_session = NULL;",
          "468:       ret = mbedtls_ssl_set_session(&backend->ssl, old_session);",
          "469:       if(ret) {",
          "471:         failf(data, \"mbedtls_ssl_set_session returned -0x%x\", -ret);",
          "472:         return CURLE_SSL_CONNECT_ERROR;",
          "473:       }",
          "474:       infof(data, \"mbedTLS re-using session\\n\");",
          "475:     }",
          "477:   }",
          "479:   mbedtls_ssl_conf_ca_chain(&backend->config,",
          "",
          "[Removed Lines]",
          "466:     Curl_ssl_sessionid_lock(conn);",
          "467:     if(!Curl_ssl_getsessionid(conn, &old_session, NULL, sockindex)) {",
          "470:         Curl_ssl_sessionid_unlock(conn);",
          "476:     Curl_ssl_sessionid_unlock(conn);",
          "",
          "[Added Lines]",
          "465:     Curl_ssl_sessionid_lock(data);",
          "466:     if(!Curl_ssl_getsessionid(data, conn, &old_session, NULL, sockindex)) {",
          "469:         Curl_ssl_sessionid_unlock(data);",
          "475:     Curl_ssl_sessionid_unlock(data);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "541: }",
          "543: static CURLcode",
          "545:                    int sockindex)",
          "546: {",
          "547:   int ret;",
          "549:   struct ssl_connect_data *connssl = &conn->ssl[sockindex];",
          "550:   struct ssl_backend_data *backend = connssl->backend;",
          "551:   const mbedtls_x509_crt *peercert;",
          "",
          "[Removed Lines]",
          "544: mbed_connect_step2(struct connectdata *conn,",
          "548:   struct Curl_easy *data = conn->data;",
          "",
          "[Added Lines]",
          "543: mbed_connect_step2(struct Curl_easy *data, struct connectdata *conn,",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "713: }",
          "715: static CURLcode",
          "717:                    int sockindex)",
          "718: {",
          "719:   CURLcode retcode = CURLE_OK;",
          "720:   struct ssl_connect_data *connssl = &conn->ssl[sockindex];",
          "721:   struct ssl_backend_data *backend = connssl->backend;",
          "724:   DEBUGASSERT(ssl_connect_3 == connssl->connecting_state);",
          "",
          "[Removed Lines]",
          "716: mbed_connect_step3(struct connectdata *conn,",
          "722:   struct Curl_easy *data = conn->data;",
          "",
          "[Added Lines]",
          "714: mbed_connect_step3(struct Curl_easy *data, struct connectdata *conn,",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "744:     }",
          "753:     if(retcode) {",
          "754:       mbedtls_ssl_session_free(our_ssl_sessionid);",
          "755:       free(our_ssl_sessionid);",
          "",
          "[Removed Lines]",
          "747:     Curl_ssl_sessionid_lock(conn);",
          "748:     if(!Curl_ssl_getsessionid(conn, &old_ssl_sessionid, NULL, sockindex))",
          "749:       Curl_ssl_delsessionid(conn, old_ssl_sessionid);",
          "751:     retcode = Curl_ssl_addsessionid(conn, our_ssl_sessionid, 0, sockindex);",
          "752:     Curl_ssl_sessionid_unlock(conn);",
          "",
          "[Added Lines]",
          "744:     Curl_ssl_sessionid_lock(data);",
          "745:     if(!Curl_ssl_getsessionid(data, conn, &old_ssl_sessionid, NULL, sockindex))",
          "746:       Curl_ssl_delsessionid(data, old_ssl_sessionid);",
          "748:     retcode = Curl_ssl_addsessionid(data, conn,",
          "749:                                     our_ssl_sessionid, 0, sockindex);",
          "750:     Curl_ssl_sessionid_unlock(data);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "788:   (void)data;",
          "789: }",
          "792: {",
          "793:   struct ssl_connect_data *connssl = &conn->ssl[sockindex];",
          "794:   struct ssl_backend_data *backend = connssl->backend;",
          "795:   mbedtls_pk_free(&backend->pk);",
          "796:   mbedtls_x509_crt_free(&backend->clicert);",
          "797:   mbedtls_x509_crt_free(&backend->cacert);",
          "",
          "[Removed Lines]",
          "791: static void mbedtls_close(struct connectdata *conn, int sockindex)",
          "",
          "[Added Lines]",
          "789: static void mbedtls_close(struct Curl_easy *data,",
          "790:                           struct connectdata *conn, int sockindex)",
          "795:   (void) data;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "899: }",
          "901: static CURLcode",
          "903:                     int sockindex,",
          "904:                     bool nonblocking,",
          "905:                     bool *done)",
          "906: {",
          "907:   CURLcode retcode;",
          "909:   struct ssl_connect_data *connssl = &conn->ssl[sockindex];",
          "910:   curl_socket_t sockfd = conn->sock[sockindex];",
          "911:   timediff_t timeout_ms;",
          "",
          "[Removed Lines]",
          "902: mbed_connect_common(struct connectdata *conn,",
          "908:   struct Curl_easy *data = conn->data;",
          "",
          "[Added Lines]",
          "903: mbed_connect_common(struct Curl_easy *data,",
          "904:                     struct connectdata *conn,",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "926:       failf(data, \"SSL connection timeout\");",
          "927:       return CURLE_OPERATION_TIMEDOUT;",
          "928:     }",
          "930:     if(retcode)",
          "931:       return retcode;",
          "932:   }",
          "",
          "[Removed Lines]",
          "929:     retcode = mbed_connect_step1(conn, sockindex);",
          "",
          "[Added Lines]",
          "930:     retcode = mbed_connect_step1(data, conn, sockindex);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "985:     if(retcode || (nonblocking &&",
          "986:                    (ssl_connect_2 == connssl->connecting_state ||",
          "987:                     ssl_connect_2_reading == connssl->connecting_state ||",
          "",
          "[Removed Lines]",
          "984:     retcode = mbed_connect_step2(conn, sockindex);",
          "",
          "[Added Lines]",
          "985:     retcode = mbed_connect_step2(data, conn, sockindex);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "993:   if(ssl_connect_3 == connssl->connecting_state) {",
          "995:     if(retcode)",
          "996:       return retcode;",
          "997:   }",
          "",
          "[Removed Lines]",
          "994:     retcode = mbed_connect_step3(conn, sockindex);",
          "",
          "[Added Lines]",
          "995:     retcode = mbed_connect_step3(data, conn, sockindex);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1011:   return CURLE_OK;",
          "1012: }",
          "1015:                                             int sockindex, bool *done)",
          "1016: {",
          "1018: }",
          "1022: {",
          "1023:   CURLcode retcode;",
          "1024:   bool done = FALSE;",
          "1027:   if(retcode)",
          "1028:     return retcode;",
          "",
          "[Removed Lines]",
          "1014: static CURLcode mbedtls_connect_nonblocking(struct connectdata *conn,",
          "1017:   return mbed_connect_common(conn, sockindex, TRUE, done);",
          "1021: static CURLcode mbedtls_connect(struct connectdata *conn, int sockindex)",
          "1026:   retcode = mbed_connect_common(conn, sockindex, FALSE, &done);",
          "",
          "[Added Lines]",
          "1015: static CURLcode mbedtls_connect_nonblocking(struct Curl_easy *data,",
          "1016:                                             struct connectdata *conn,",
          "1019:   return mbed_connect_common(data, conn, sockindex, TRUE, done);",
          "1023: static CURLcode mbedtls_connect(struct Curl_easy *data,",
          "1024:                                 struct connectdata *conn, int sockindex)",
          "1029:   retcode = mbed_connect_common(data, conn, sockindex, FALSE, &done);",
          "",
          "---------------"
        ],
        "lib/vtls/mesalink.c||lib/vtls/mesalink.c": [
          "File: lib/vtls/mesalink.c -> lib/vtls/mesalink.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "91: static CURLcode",
          "93: {",
          "94:   char *ciphers;",
          "96:   struct ssl_connect_data *connssl = &conn->ssl[sockindex];",
          "97:   struct in_addr addr4;",
          "98: #ifdef ENABLE_IPV6",
          "",
          "[Removed Lines]",
          "92: mesalink_connect_step1(struct connectdata *conn, int sockindex)",
          "95:   struct Curl_easy *data = conn->data;",
          "",
          "[Added Lines]",
          "92: mesalink_connect_step1(struct Curl_easy *data,",
          "93:                        struct connectdata *conn, int sockindex)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "260:   if(SSL_SET_OPTION(primary.sessionid)) {",
          "261:     void *ssl_sessionid = NULL;",
          "266:       if(!SSL_set_session(BACKEND->handle, ssl_sessionid)) {",
          "268:         failf(",
          "269:           data,",
          "270:           \"SSL: SSL_set_session failed: %s\",",
          "",
          "[Removed Lines]",
          "263:     Curl_ssl_sessionid_lock(conn);",
          "264:     if(!Curl_ssl_getsessionid(conn, &ssl_sessionid, NULL, sockindex)) {",
          "267:         Curl_ssl_sessionid_unlock(conn);",
          "",
          "[Added Lines]",
          "263:     Curl_ssl_sessionid_lock(data);",
          "264:     if(!Curl_ssl_getsessionid(data, conn, &ssl_sessionid, NULL, sockindex)) {",
          "267:         Curl_ssl_sessionid_unlock(data);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "275:       infof(data, \"SSL re-using session ID\\n\");",
          "276:     }",
          "278:   }",
          "",
          "[Removed Lines]",
          "277:     Curl_ssl_sessionid_unlock(conn);",
          "",
          "[Added Lines]",
          "277:     Curl_ssl_sessionid_unlock(data);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "288: }",
          "290: static CURLcode",
          "292: {",
          "293:   int ret = -1;",
          "295:   struct ssl_connect_data *connssl = &conn->ssl[sockindex];",
          "297:   conn->recv[sockindex] = mesalink_recv;",
          "",
          "[Removed Lines]",
          "291: mesalink_connect_step2(struct connectdata *conn, int sockindex)",
          "294:   struct Curl_easy *data = conn->data;",
          "",
          "[Added Lines]",
          "291: mesalink_connect_step2(struct Curl_easy *data,",
          "292:                        struct connectdata *conn, int sockindex)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "349:     our_ssl_sessionid = SSL_get_session(BACKEND->handle);",
          "352:     incache =",
          "354:     if(incache) {",
          "355:       if(old_ssl_sessionid != our_ssl_sessionid) {",
          "356:         infof(data, \"old SSL session ID is stale, removing\\n\");",
          "358:         incache = FALSE;",
          "359:       }",
          "360:     }",
          "362:     if(!incache) {",
          "363:       result = Curl_ssl_addsessionid(",
          "365:       if(result) {",
          "367:         failf(data, \"failed to store ssl session\");",
          "368:         return result;",
          "369:       }",
          "370:     }",
          "372:   }",
          "",
          "[Removed Lines]",
          "351:     Curl_ssl_sessionid_lock(conn);",
          "353:       !(Curl_ssl_getsessionid(conn, &old_ssl_sessionid, NULL, sockindex));",
          "357:         Curl_ssl_delsessionid(conn, old_ssl_sessionid);",
          "364:         conn, our_ssl_sessionid, 0 /* unknown size */, sockindex);",
          "366:         Curl_ssl_sessionid_unlock(conn);",
          "371:     Curl_ssl_sessionid_unlock(conn);",
          "",
          "[Added Lines]",
          "351:     Curl_ssl_sessionid_lock(data);",
          "353:       !(Curl_ssl_getsessionid(data, conn,",
          "354:                               &old_ssl_sessionid, NULL, sockindex));",
          "358:         Curl_ssl_delsessionid(data, old_ssl_sessionid);",
          "365:         data, conn, our_ssl_sessionid, 0 /* unknown size */, sockindex);",
          "367:         Curl_ssl_sessionid_unlock(data);",
          "372:     Curl_ssl_sessionid_unlock(data);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "408: }",
          "410: static void",
          "412: {",
          "413:   struct ssl_connect_data *connssl = &conn->ssl[sockindex];",
          "415:   if(BACKEND->handle) {",
          "416:     (void)SSL_shutdown(BACKEND->handle);",
          "417:     SSL_free(BACKEND->handle);",
          "",
          "[Removed Lines]",
          "411: Curl_mesalink_close(struct connectdata *conn, int sockindex)",
          "",
          "[Added Lines]",
          "412: mesalink_close(struct Curl_easy *data, struct connectdata *conn, int sockindex)",
          "416:   (void) data;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "458: }",
          "460: static size_t",
          "462: {",
          "463:   return msnprintf(buffer, size, \"MesaLink/%s\", MESALINK_VERSION_STRING);",
          "464: }",
          "466: static int",
          "468: {",
          "469:   return (SSL_library_init() == SSL_SUCCESS);",
          "470: }",
          "",
          "[Removed Lines]",
          "461: Curl_mesalink_version(char *buffer, size_t size)",
          "467: Curl_mesalink_init(void)",
          "",
          "[Added Lines]",
          "464: mesalink_version(char *buffer, size_t size)",
          "470: mesalink_init(void)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "476: static int",
          "478: {",
          "479:   int retval = 0;",
          "480:   struct ssl_connect_data *connssl = &conn->ssl[sockindex];",
          "482:   if(BACKEND->handle) {",
          "483:     SSL_free(BACKEND->handle);",
          "484:     BACKEND->handle = NULL;",
          "",
          "[Removed Lines]",
          "477: Curl_mesalink_shutdown(struct connectdata *conn, int sockindex)",
          "",
          "[Added Lines]",
          "480: mesalink_shutdown(struct Curl_easy *data,",
          "481:                   struct connectdata *conn, int sockindex)",
          "486:   (void) data;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "487: }",
          "489: static CURLcode",
          "492: {",
          "493:   CURLcode result;",
          "495:   struct ssl_connect_data *connssl = &conn->ssl[sockindex];",
          "496:   curl_socket_t sockfd = conn->sock[sockindex];",
          "497:   timediff_t timeout_ms;",
          "",
          "[Removed Lines]",
          "490: mesalink_connect_common(struct connectdata *conn, int sockindex,",
          "491:                         bool nonblocking, bool *done)",
          "494:   struct Curl_easy *data = conn->data;",
          "",
          "[Added Lines]",
          "496: mesalink_connect_common(struct Curl_easy *data, struct connectdata *conn,",
          "497:                         int sockindex, bool nonblocking, bool *done)",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "513:       return CURLE_OPERATION_TIMEDOUT;",
          "514:     }",
          "517:     if(result)",
          "518:       return result;",
          "519:   }",
          "",
          "[Removed Lines]",
          "516:     result = mesalink_connect_step1(conn, sockindex);",
          "",
          "[Added Lines]",
          "521:     result = mesalink_connect_step1(data, conn, sockindex);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "575:     if(result ||",
          "576:        (nonblocking && (ssl_connect_2 == connssl->connecting_state ||",
          "",
          "[Removed Lines]",
          "573:     result = mesalink_connect_step2(conn, sockindex);",
          "",
          "[Added Lines]",
          "578:     result = mesalink_connect_step2(data, conn, sockindex);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "602: }",
          "604: static CURLcode",
          "607: {",
          "609: }",
          "611: static CURLcode",
          "613: {",
          "614:   CURLcode result;",
          "615:   bool done = FALSE;",
          "618:   if(result)",
          "619:     return result;",
          "",
          "[Removed Lines]",
          "605: Curl_mesalink_connect_nonblocking(struct connectdata *conn, int sockindex,",
          "606:                                   bool *done)",
          "608:   return mesalink_connect_common(conn, sockindex, TRUE, done);",
          "612: Curl_mesalink_connect(struct connectdata *conn, int sockindex)",
          "617:   result = mesalink_connect_common(conn, sockindex, FALSE, &done);",
          "",
          "[Added Lines]",
          "610: mesalink_connect_nonblocking(struct Curl_easy *data, struct connectdata *conn,",
          "611:                              int sockindex, bool *done)",
          "613:   return mesalink_connect_common(data, conn, sockindex, TRUE, done);",
          "617: mesalink_connect(struct Curl_easy *data, struct connectdata *conn,",
          "618:                  int sockindex)",
          "623:   result = mesalink_connect_common(data, conn, sockindex, FALSE, &done);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "624: }",
          "626: static void *",
          "629: {",
          "630:   (void)info;",
          "631:   return BACKEND->handle;",
          "",
          "[Removed Lines]",
          "627: Curl_mesalink_get_internals(struct ssl_connect_data *connssl,",
          "628:                             CURLINFO info UNUSED_PARAM)",
          "",
          "[Added Lines]",
          "633: mesalink_get_internals(struct ssl_connect_data *connssl,",
          "634:                        CURLINFO info UNUSED_PARAM)",
          "",
          "---------------"
        ],
        "lib/vtls/nss.c||lib/vtls/nss.c": [
          "File: lib/vtls/nss.c -> lib/vtls/nss.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "665:   return CURLE_SSL_CRL_BADFILE;",
          "666: }",
          "670: {",
          "671:   PK11SlotInfo *slot, *tmp;",
          "672:   SECStatus status;",
          "673:   CURLcode result;",
          "674:   struct ssl_connect_data *ssl = conn->ssl;",
          "",
          "[Removed Lines]",
          "668: static CURLcode nss_load_key(struct connectdata *conn, int sockindex,",
          "669:                              char *key_file)",
          "675:   struct Curl_easy *data = conn->data;",
          "",
          "[Added Lines]",
          "668: static CURLcode nss_load_key(struct Curl_easy *data, struct connectdata *conn,",
          "669:                              int sockindex, char *key_file)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "701:   return (SECSuccess == status) ? CURLE_OK : CURLE_SSL_CERTPROBLEM;",
          "702: }",
          "705:                          const char *filename)",
          "706: {",
          "707:   switch(err) {",
          "708:   case SEC_ERROR_BAD_PASSWORD:",
          "710:     return 1;",
          "711:   case SEC_ERROR_UNKNOWN_CERT:",
          "713:     return 1;",
          "714:   default:",
          "715:     break;",
          "",
          "[Removed Lines]",
          "704: static int display_error(struct connectdata *conn, PRInt32 err,",
          "709:     failf(conn->data, \"Unable to load client key: Incorrect password\");",
          "712:     failf(conn->data, \"Unable to load certificate %s\", filename);",
          "",
          "[Added Lines]",
          "703: static int display_error(struct Curl_easy *data, PRInt32 err,",
          "708:     failf(data, \"Unable to load client key: Incorrect password\");",
          "711:     failf(data, \"Unable to load certificate %s\", filename);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "718: }",
          "722: {",
          "724:   CURLcode result;",
          "726:   if(cert_file) {",
          "727:     result = nss_load_cert(&conn->ssl[sockindex], cert_file, PR_FALSE);",
          "728:     if(result) {",
          "729:       const PRErrorCode err = PR_GetError();",
          "731:         const char *err_name = nss_error_to_name(err);",
          "732:         failf(data, \"unable to load client cert: %d (%s)\", err, err_name);",
          "733:       }",
          "",
          "[Removed Lines]",
          "720: static CURLcode cert_stuff(struct connectdata *conn, int sockindex,",
          "721:                            char *cert_file, char *key_file)",
          "723:   struct Curl_easy *data = conn->data;",
          "730:       if(!display_error(conn, err, cert_file)) {",
          "",
          "[Added Lines]",
          "719: static CURLcode cert_stuff(struct Curl_easy *data, struct connectdata *conn,",
          "720:                            int sockindex, char *cert_file, char *key_file)",
          "728:       if(!display_error(data, err, cert_file)) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "739:   if(key_file || (is_file(cert_file))) {",
          "740:     if(key_file)",
          "742:     else",
          "745:     if(result) {",
          "746:       const PRErrorCode err = PR_GetError();",
          "748:         const char *err_name = nss_error_to_name(err);",
          "749:         failf(data, \"unable to load client key: %d (%s)\", err, err_name);",
          "750:       }",
          "",
          "[Removed Lines]",
          "741:       result = nss_load_key(conn, sockindex, key_file);",
          "744:       result = nss_load_key(conn, sockindex, cert_file);",
          "747:       if(!display_error(conn, err, key_file)) {",
          "",
          "[Added Lines]",
          "739:       result = nss_load_key(data, conn, sockindex, key_file);",
          "742:       result = nss_load_key(data, conn, sockindex, cert_file);",
          "745:       if(!display_error(data, err, key_file)) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "771: static SECStatus nss_auth_cert_hook(void *arg, PRFileDesc *fd, PRBool checksig,",
          "772:                                     PRBool isServer)",
          "773: {",
          "776: #ifdef SSL_ENABLE_OCSP_STAPLING",
          "777:   if(SSL_CONN_CONFIG(verifystatus)) {",
          "",
          "[Removed Lines]",
          "774:   struct connectdata *conn = (struct connectdata *)arg;",
          "",
          "[Added Lines]",
          "772:   struct Curl_easy *data = (struct Curl_easy *)arg;",
          "773:   struct connectdata *conn = data->conn;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "780:     const SECItemArray *csa = SSL_PeerStapledOCSPResponses(fd);",
          "781:     if(!csa) {",
          "783:       return SECFailure;",
          "784:     }",
          "786:     if(csa->len == 0) {",
          "788:       return SECFailure;",
          "789:     }",
          "",
          "[Removed Lines]",
          "782:       failf(conn->data, \"Invalid OCSP response\");",
          "787:       failf(conn->data, \"No OCSP response received\");",
          "",
          "[Added Lines]",
          "781:       failf(data, \"Invalid OCSP response\");",
          "786:       failf(data, \"No OCSP response received\");",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "794:     );",
          "796:     if(cacheResult != SECSuccess) {",
          "798:       return cacheResult;",
          "799:     }",
          "800:   }",
          "801: #endif",
          "803:   if(!SSL_CONN_CONFIG(verifypeer)) {",
          "805:     return SECSuccess;",
          "806:   }",
          "",
          "[Removed Lines]",
          "797:       failf(conn->data, \"Invalid OCSP response\");",
          "804:     infof(conn->data, \"skipping SSL peer certificate verification\\n\");",
          "",
          "[Added Lines]",
          "796:       failf(data, \"Invalid OCSP response\");",
          "803:     infof(data, \"skipping SSL peer certificate verification\\n\");",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "814: static void HandshakeCallback(PRFileDesc *sock, void *arg)",
          "815: {",
          "818:   unsigned int buflenmax = 50;",
          "819:   unsigned char buf[50];",
          "820:   unsigned int buflen;",
          "",
          "[Removed Lines]",
          "816:   struct connectdata *conn = (struct connectdata*) arg;",
          "817:   struct Curl_easy *data = conn->data;",
          "",
          "[Added Lines]",
          "815:   struct Curl_easy *data = (struct Curl_easy *)arg;",
          "816:   struct connectdata *conn = data->conn;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "857:        !memcmp(ALPN_HTTP_1_1, buf, ALPN_HTTP_1_1_LENGTH)) {",
          "858:       conn->negnpn = CURL_HTTP_VERSION_1_1;",
          "859:     }",
          "861:                         BUNDLE_MULTIPLEX : BUNDLE_NO_MULTIUSE);",
          "862:   }",
          "863: }",
          "",
          "[Removed Lines]",
          "860:     Curl_multiuse_state(conn->data, conn->negnpn == CURL_HTTP_VERSION_2 ?",
          "",
          "[Added Lines]",
          "859:     Curl_multiuse_state(data, conn->negnpn == CURL_HTTP_VERSION_2 ?",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "866: static SECStatus CanFalseStartCallback(PRFileDesc *sock, void *client_data,",
          "867:                                        PRBool *canFalseStart)",
          "868: {",
          "872:   SSLChannelInfo channelInfo;",
          "873:   SSLCipherSuiteInfo cipherInfo;",
          "",
          "[Removed Lines]",
          "869:   struct connectdata *conn = client_data;",
          "870:   struct Curl_easy *data = conn->data;",
          "",
          "[Added Lines]",
          "868:   struct Curl_easy *data = (struct Curl_easy *)client_data;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "950:   PR_Free(common_name);",
          "951: }",
          "954: {",
          "955:   CURLcode result = CURLE_OK;",
          "957:   SSLChannelInfo channel;",
          "958:   SSLCipherSuiteInfo suite;",
          "959:   CERTCertificate *cert;",
          "",
          "[Removed Lines]",
          "953: static CURLcode display_conn_info(struct connectdata *conn, PRFileDesc *sock)",
          "956:   struct Curl_easy *data = conn->data;",
          "",
          "[Added Lines]",
          "951: static CURLcode display_conn_info(struct Curl_easy *data, PRFileDesc *sock)",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1024: static SECStatus BadCertHandler(void *arg, PRFileDesc *sock)",
          "1025: {",
          "1028:   PRErrorCode err = PR_GetError();",
          "1029:   CERTCertificate *cert;",
          "",
          "[Removed Lines]",
          "1026:   struct connectdata *conn = (struct connectdata *)arg;",
          "1027:   struct Curl_easy *data = conn->data;",
          "",
          "[Added Lines]",
          "1023:   struct Curl_easy *data = (struct Curl_easy *)arg;",
          "1024:   struct connectdata *conn = data->conn;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1553: {",
          "1554:   struct ssl_connect_data *connssl = &conn->ssl[sockindex];",
          "1555: #ifndef CURL_DISABLE_PROXY",
          "",
          "[Removed Lines]",
          "1552: static void nss_close(struct connectdata *conn, int sockindex)",
          "",
          "[Added Lines]",
          "1549: static void nss_close(struct Curl_easy *data, struct connectdata *conn,",
          "1550:                       int sockindex)",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1557: #endif",
          "1558:   struct ssl_backend_data *backend = connssl->backend;",
          "1560:   if(backend->handle",
          "1561: #ifndef CURL_DISABLE_PROXY",
          "1562:     || connssl_proxy->backend->handle",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1558:   (void)data;",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1613: static Curl_recv nss_recv;",
          "1614: static Curl_send nss_send;",
          "1617:                                          int sockindex)",
          "1618: {",
          "1620:   const char *cafile = SSL_CONN_CONFIG(CAfile);",
          "1621:   const char *capath = SSL_CONN_CONFIG(CApath);",
          "1622:   bool use_trust_module;",
          "",
          "[Removed Lines]",
          "1616: static CURLcode nss_load_ca_certificates(struct connectdata *conn,",
          "1619:   struct Curl_easy *data = conn->data;",
          "",
          "[Added Lines]",
          "1615: static CURLcode nss_load_ca_certificates(struct Curl_easy *data,",
          "1616:                                          struct connectdata *conn,",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1821:   return CURLE_OK;",
          "1822: }",
          "1825: {",
          "1826:   PRFileDesc *model = NULL;",
          "1827:   PRFileDesc *nspr_io = NULL;",
          "1828:   PRFileDesc *nspr_io_stub = NULL;",
          "1829:   PRBool ssl_no_cache;",
          "1830:   PRBool ssl_cbc_random_iv;",
          "1832:   curl_socket_t sockfd = conn->sock[sockindex];",
          "1833:   struct ssl_connect_data *connssl = &conn->ssl[sockindex];",
          "1834:   struct ssl_backend_data *backend = connssl->backend;",
          "",
          "[Removed Lines]",
          "1824: static CURLcode nss_setup_connect(struct connectdata *conn, int sockindex)",
          "1831:   struct Curl_easy *data = conn->data;",
          "",
          "[Added Lines]",
          "1823: static CURLcode nss_setup_connect(struct Curl_easy *data,",
          "1824:                                   struct connectdata *conn, int sockindex)",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1852:   backend->data = data;",
          "1855:   Curl_llist_init(&backend->obj_list, nss_destroy_object);",
          "1857:   PR_Lock(nss_initlock);",
          "1859:   if(result) {",
          "1860:     PR_Unlock(nss_initlock);",
          "1861:     goto error;",
          "",
          "[Removed Lines]",
          "1858:   result = nss_setup(conn->data);",
          "",
          "[Added Lines]",
          "1857:   result = nss_setup(data);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1939:     goto error;",
          "1942:   SSL_SET_OPTION_LVALUE(certverifyresult) = 0;",
          "1945:     goto error;",
          "1948:     goto error;",
          "1950:   {",
          "1952:     if((rv == CURLE_SSL_CACERT_BADFILE) && !SSL_CONN_CONFIG(verifypeer))",
          "1954:       infof(data, \"warning: CA certificates failed to load\\n\");",
          "",
          "[Removed Lines]",
          "1938:   if(SSL_AuthCertificateHook(model, nss_auth_cert_hook, conn) != SECSuccess)",
          "1944:   if(SSL_BadCertHook(model, BadCertHandler, conn) != SECSuccess)",
          "1947:   if(SSL_HandshakeCallback(model, HandshakeCallback, conn) != SECSuccess)",
          "1951:     const CURLcode rv = nss_load_ca_certificates(conn, sockindex);",
          "",
          "[Added Lines]",
          "1937:   if(SSL_AuthCertificateHook(model, nss_auth_cert_hook, data) != SECSuccess)",
          "1943:   if(SSL_BadCertHook(model, BadCertHandler, data) != SECSuccess)",
          "1946:   if(SSL_HandshakeCallback(model, HandshakeCallback, data) != SECSuccess)",
          "1950:     const CURLcode rv = nss_load_ca_certificates(data, conn, sockindex);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1974:       backend->obj_clicert = NULL;",
          "1975:     }",
          "1976:     else {",
          "1978:                                SSL_SET_OPTION(primary.clientcert),",
          "1979:                                SSL_SET_OPTION(key));",
          "1980:       if(rv) {",
          "",
          "[Removed Lines]",
          "1977:       CURLcode rv = cert_stuff(conn, sockindex,",
          "",
          "[Added Lines]",
          "1976:       CURLcode rv = cert_stuff(data, conn, sockindex,",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "2073:       goto error;",
          "2075:     if(SSL_SetCanFalseStartCallback(backend->handle, CanFalseStartCallback,",
          "2077:       goto error;",
          "2078:   }",
          "2079: #endif",
          "",
          "[Removed Lines]",
          "2076:         conn) != SECSuccess)",
          "",
          "[Added Lines]",
          "2075:         data) != SECSuccess)",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "2127:   return nss_fail_connect(connssl, data, result);",
          "2128: }",
          "2131: {",
          "2132:   struct ssl_connect_data *connssl = &conn->ssl[sockindex];",
          "2133:   struct ssl_backend_data *backend = connssl->backend;",
          "2135:   CURLcode result = CURLE_SSL_CONNECT_ERROR;",
          "2136:   PRUint32 timeout;",
          "",
          "[Removed Lines]",
          "2130: static CURLcode nss_do_connect(struct connectdata *conn, int sockindex)",
          "2134:   struct Curl_easy *data = conn->data;",
          "",
          "[Added Lines]",
          "2129: static CURLcode nss_do_connect(struct Curl_easy *data,",
          "2130:                                struct connectdata *conn, int sockindex)",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "2156:     goto error;",
          "2157:   }",
          "2160:   if(result)",
          "2161:     goto error;",
          "",
          "[Removed Lines]",
          "2159:   result = display_conn_info(conn, backend->handle);",
          "",
          "[Added Lines]",
          "2158:   result = display_conn_info(data, backend->handle);",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "2190:   return nss_fail_connect(connssl, data, result);",
          "2191: }",
          "2194:                                    bool *done)",
          "2195: {",
          "2196:   struct ssl_connect_data *connssl = &conn->ssl[sockindex];",
          "2198:   const bool blocking = (done == NULL);",
          "2199:   CURLcode result;",
          "",
          "[Removed Lines]",
          "2193: static CURLcode nss_connect_common(struct connectdata *conn, int sockindex,",
          "2197:   struct Curl_easy *data = conn->data;",
          "",
          "[Added Lines]",
          "2192: static CURLcode nss_connect_common(struct Curl_easy *data,",
          "2193:                                    struct connectdata *conn, int sockindex,",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "2205:   }",
          "2207:   if(connssl->connecting_state == ssl_connect_1) {",
          "2209:     if(result)",
          "2211:       return result;",
          "",
          "[Removed Lines]",
          "2208:     result = nss_setup_connect(conn, sockindex);",
          "",
          "[Added Lines]",
          "2207:     result = nss_setup_connect(data, conn, sockindex);",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "2218:   if(result)",
          "2219:     return result;",
          "2222:   switch(result) {",
          "2223:   case CURLE_OK:",
          "2224:     break;",
          "",
          "[Removed Lines]",
          "2221:   result = nss_do_connect(conn, sockindex);",
          "",
          "[Added Lines]",
          "2220:   result = nss_do_connect(data, conn, sockindex);",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "2251:   return CURLE_OK;",
          "2252: }",
          "2255: {",
          "2257: }",
          "2260:                                         int sockindex, bool *done)",
          "2261: {",
          "2263: }",
          "",
          "[Removed Lines]",
          "2254: static CURLcode nss_connect(struct connectdata *conn, int sockindex)",
          "2256:   return nss_connect_common(conn, sockindex, /* blocking */ NULL);",
          "2259: static CURLcode nss_connect_nonblocking(struct connectdata *conn,",
          "2262:   return nss_connect_common(conn, sockindex, done);",
          "",
          "[Added Lines]",
          "2253: static CURLcode nss_connect(struct Curl_easy *data, struct connectdata *conn,",
          "2254:                             int sockindex)",
          "2256:   return nss_connect_common(data, conn, sockindex, /* blocking */ NULL);",
          "2259: static CURLcode nss_connect_nonblocking(struct Curl_easy *data,",
          "2260:                                         struct connectdata *conn,",
          "2263:   return nss_connect_common(data, conn, sockindex, done);",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "2288:       infof(data, \"SSL write: error %d (%s)\\n\", err, err_name);",
          "2294:         ? CURLE_SSL_CERTPROBLEM",
          "",
          "[Removed Lines]",
          "2291:       nss_print_error_message(conn->data, err);",
          "",
          "[Added Lines]",
          "2292:       nss_print_error_message(data, err);",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "2330:       infof(data, \"SSL read: errno %d (%s)\\n\", err, err_name);",
          "2336:         ? CURLE_SSL_CERTPROBLEM",
          "",
          "[Removed Lines]",
          "2333:       nss_print_error_message(conn->data, err);",
          "",
          "[Added Lines]",
          "2334:       nss_print_error_message(data, err);",
          "",
          "---------------"
        ],
        "lib/vtls/openssl.c||lib/vtls/openssl.c": [
          "File: lib/vtls/openssl.c -> lib/vtls/openssl.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "362:   return buf;",
          "363: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "368: static int ossl_get_ssl_data_index(void)",
          "369: {",
          "370:   static int ssl_ex_data_data_index = -1;",
          "371:   if(ssl_ex_data_data_index < 0) {",
          "372:     ssl_ex_data_data_index = SSL_get_ex_new_index(0, NULL, NULL, NULL, NULL);",
          "373:   }",
          "374:   return ssl_ex_data_data_index;",
          "375: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "573: #endif",
          "578: static int",
          "579: SSL_CTX_use_certificate_bio(SSL_CTX *ctx, BIO *in, int type,",
          "",
          "[Removed Lines]",
          "575: static CURLcode ossl_set_engine(struct Curl_easy *data,",
          "576:                                 const char *engine);",
          "",
          "[Added Lines]",
          "587: static CURLcode ossl_set_engine(struct Curl_easy *data, const char *engine);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "700: }",
          "702: static",
          "704:                SSL_CTX* ctx,",
          "705:                char *cert_file,",
          "706:                BIO *cert_bio,",
          "",
          "[Removed Lines]",
          "703: int cert_stuff(struct connectdata *conn,",
          "",
          "[Added Lines]",
          "714: int cert_stuff(struct Curl_easy *data,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "710:                const char *key_type,",
          "711:                char *key_passwd)",
          "712: {",
          "714:   char error_buffer[256];",
          "715:   bool check_privkey = TRUE;",
          "",
          "[Removed Lines]",
          "713:   struct Curl_easy *data = conn->data;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1161:   Curl_tls_keylog_open();",
          "1165:     return 0;",
          "1167:   return 1;",
          "",
          "[Removed Lines]",
          "1164:   if(ossl_get_ssl_conn_index() < 0 || ossl_get_ssl_sockindex_index() < 0)",
          "",
          "[Added Lines]",
          "1174:   if(ossl_get_ssl_data_index() < 0 || ossl_get_ssl_conn_index() < 0 ||",
          "1175:      ossl_get_ssl_sockindex_index() < 0)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1263: {",
          "1264: #ifdef USE_OPENSSL_ENGINE",
          "1265:   ENGINE *e;",
          "",
          "[Removed Lines]",
          "1261: static CURLcode ossl_set_engine(struct Curl_easy *data,",
          "1262:                                 const char *engine)",
          "",
          "[Added Lines]",
          "1272: static CURLcode ossl_set_engine(struct Curl_easy *data, const char *engine)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1369: {",
          "1370:   ossl_closeone(&conn->ssl[sockindex]);",
          "1371: #ifndef CURL_DISABLE_PROXY",
          "1372:   ossl_closeone(&conn->proxy_ssl[sockindex]);",
          "",
          "[Removed Lines]",
          "1368: static void ossl_close(struct connectdata *conn, int sockindex)",
          "",
          "[Added Lines]",
          "1378: static void ossl_close(struct Curl_easy *data, struct connectdata *conn,",
          "1379:                        int sockindex)",
          "1381:   (void) data;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1381: {",
          "1382:   int retval = 0;",
          "1383:   struct ssl_connect_data *connssl = &conn->ssl[sockindex];",
          "1385:   char buf[256]; /* We will use this for the OpenSSL error buffer, so it has",
          "1387:   unsigned long sslerror;",
          "",
          "[Removed Lines]",
          "1380: static int ossl_shutdown(struct connectdata *conn, int sockindex)",
          "1384:   struct Curl_easy *data = conn->data;",
          "",
          "[Added Lines]",
          "1392: static int ossl_shutdown(struct Curl_easy *data,",
          "1393:                          struct connectdata *conn, int sockindex)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1582:    in the certificate and must exactly match the IP in the URI.",
          "1586: {",
          "1587:   bool matched = FALSE;",
          "1589:   size_t addrlen = 0;",
          "1591:   STACK_OF(GENERAL_NAME) *altnames;",
          "1592: #ifdef ENABLE_IPV6",
          "1593:   struct in6_addr addr;",
          "",
          "[Removed Lines]",
          "1585: static CURLcode verifyhost(struct connectdata *conn, X509 *server_cert)",
          "1590:   struct Curl_easy *data = conn->data;",
          "",
          "[Added Lines]",
          "1597: static CURLcode verifyhost(struct Curl_easy *data, struct connectdata *conn,",
          "1598:                            X509 *server_cert)",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1783: #if (OPENSSL_VERSION_NUMBER >= 0x0090808fL) && !defined(OPENSSL_NO_TLSEXT) && \\",
          "1784:     !defined(OPENSSL_NO_OCSP)",
          "1786:                              struct ssl_connect_data *connssl)",
          "1787: {",
          "1788:   int i, ocsp_status;",
          "1789:   unsigned char *status;",
          "1790:   const unsigned char *p;",
          "1791:   CURLcode result = CURLE_OK;",
          "1793:   OCSP_RESPONSE *rsp = NULL;",
          "1794:   OCSP_BASICRESP *br = NULL;",
          "1795:   X509_STORE     *st = NULL;",
          "",
          "[Removed Lines]",
          "1785: static CURLcode verifystatus(struct connectdata *conn,",
          "1792:   struct Curl_easy *data = conn->data;",
          "",
          "[Added Lines]",
          "1797: static CURLcode verifystatus(struct Curl_easy *data,",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2360: static CURLcode",
          "2361: set_ssl_version_min_max_legacy(ctx_option_t *ctx_options,",
          "2363: {",
          "2369:   long ssl_version = SSL_CONN_CONFIG(version);",
          "2370:   long ssl_version_max = SSL_CONN_CONFIG(version_max);",
          "2372:   switch(ssl_version) {",
          "2373:     case CURL_SSLVERSION_TLSv1_3:",
          "2374: #ifdef TLS1_3_VERSION",
          "",
          "[Removed Lines]",
          "2362:                               struct connectdata *conn, int sockindex)",
          "2364: #if (OPENSSL_VERSION_NUMBER < 0x1000100FL) || !defined(TLS1_3_VERSION)",
          "2367:   struct Curl_easy *data = conn->data;",
          "2368: #endif",
          "",
          "[Added Lines]",
          "2373:                                struct Curl_easy *data,",
          "2374:                                struct connectdata *conn, int sockindex)",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "2443:   struct Curl_easy *data;",
          "2444:   int sockindex;",
          "2445:   curl_socket_t *sockindex_ptr;",
          "2446:   int connectdata_idx = ossl_get_ssl_conn_index();",
          "2447:   int sockindex_idx = ossl_get_ssl_sockindex_index();",
          "2450:     return 0;",
          "2452:   conn = (struct connectdata*) SSL_get_ex_data(ssl, connectdata_idx);",
          "2453:   if(!conn)",
          "2454:     return 0;",
          "2459:   sockindex_ptr = (curl_socket_t*) SSL_get_ex_data(ssl, sockindex_idx);",
          "",
          "[Removed Lines]",
          "2449:   if(connectdata_idx < 0 || sockindex_idx < 0)",
          "2456:   data = conn->data;",
          "",
          "[Added Lines]",
          "2455:   int data_idx = ossl_get_ssl_data_index();",
          "2459:   if(data_idx < 0 || connectdata_idx < 0 || sockindex_idx < 0)",
          "2466:   data = (struct Curl_easy *) SSL_get_ex_data(ssl, data_idx);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "2463:     bool incache;",
          "2464:     void *old_ssl_sessionid = NULL;",
          "2468:                                       sockindex));",
          "2469:     if(incache) {",
          "2470:       if(old_ssl_sessionid != ssl_sessionid) {",
          "2471:         infof(data, \"old SSL session ID is stale, removing\\n\");",
          "2473:         incache = FALSE;",
          "2474:       }",
          "2475:     }",
          "2477:     if(!incache) {",
          "2479:                                       0 /* unknown size */, sockindex)) {",
          "2481:         res = 1;",
          "",
          "[Removed Lines]",
          "2466:     Curl_ssl_sessionid_lock(conn);",
          "2467:     incache = !(Curl_ssl_getsessionid(conn, &old_ssl_sessionid, NULL,",
          "2472:         Curl_ssl_delsessionid(conn, old_ssl_sessionid);",
          "2478:       if(!Curl_ssl_addsessionid(conn, ssl_sessionid,",
          "",
          "[Added Lines]",
          "2476:     Curl_ssl_sessionid_lock(data);",
          "2477:     incache = !(Curl_ssl_getsessionid(data, conn, &old_ssl_sessionid, NULL,",
          "2482:         Curl_ssl_delsessionid(data, old_ssl_sessionid);",
          "2488:       if(!Curl_ssl_addsessionid(data, conn, ssl_sessionid,",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "2483:       else",
          "2484:         failf(data, \"failed to store ssl session\");",
          "2485:     }",
          "2487:   }",
          "2489:   return res;",
          "2490: }",
          "2493: {",
          "2494:   CURLcode result = CURLE_OK;",
          "2495:   char *ciphers;",
          "2497:   SSL_METHOD_QUAL SSL_METHOD *req_method = NULL;",
          "2498:   X509_LOOKUP *lookup = NULL;",
          "2499:   curl_socket_t sockfd = conn->sock[sockindex];",
          "",
          "[Removed Lines]",
          "2486:     Curl_ssl_sessionid_unlock(conn);",
          "2492: static CURLcode ossl_connect_step1(struct connectdata *conn, int sockindex)",
          "2496:   struct Curl_easy *data = conn->data;",
          "",
          "[Added Lines]",
          "2496:     Curl_ssl_sessionid_unlock(data);",
          "2502: static CURLcode ossl_connect_step1(struct Curl_easy *data,",
          "2503:                                    struct connectdata *conn, int sockindex)",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "2715:       result = set_ssl_version_min_max(backend->ctx, conn);",
          "2716: #else",
          "2718: #endif",
          "2719:       if(result != CURLE_OK)",
          "2720:         return result;",
          "",
          "[Removed Lines]",
          "2717:       result = set_ssl_version_min_max_legacy(&ctx_options, conn, sockindex);",
          "",
          "[Added Lines]",
          "2727:       result = set_ssl_version_min_max_legacy(&ctx_options, data, conn,",
          "2728:                                               sockindex);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "2782:         result = CURLE_OUT_OF_MEMORY;",
          "2783:     }",
          "2784:     if(!result &&",
          "2786:                    ssl_cert, ssl_cert_bio, ssl_cert_type,",
          "2787:                    SSL_SET_OPTION(key), ssl_key_bio,",
          "2788:                    SSL_SET_OPTION(key_type), SSL_SET_OPTION(key_passwd)))",
          "",
          "[Removed Lines]",
          "2785:        !cert_stuff(conn, backend->ctx,",
          "",
          "[Added Lines]",
          "2796:        !cert_stuff(data, backend->ctx,",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "3188:   if(SSL_SET_OPTION(primary.sessionid)) {",
          "3189:     void *ssl_sessionid = NULL;",
          "3190:     int connectdata_idx = ossl_get_ssl_conn_index();",
          "3191:     int sockindex_idx = ossl_get_ssl_sockindex_index();",
          "3196:       SSL_set_ex_data(backend->handle, connectdata_idx, conn);",
          "3197:       SSL_set_ex_data(backend->handle, sockindex_idx, conn->sock + sockindex);",
          "3198:     }",
          "3203:       if(!SSL_set_session(backend->handle, ssl_sessionid)) {",
          "3205:         failf(data, \"SSL: SSL_set_session failed: %s\",",
          "3206:               ossl_strerror(ERR_get_error(), error_buffer,",
          "3207:                             sizeof(error_buffer)));",
          "",
          "[Removed Lines]",
          "3193:     if(connectdata_idx >= 0 && sockindex_idx >= 0) {",
          "3200:     Curl_ssl_sessionid_lock(conn);",
          "3201:     if(!Curl_ssl_getsessionid(conn, &ssl_sessionid, NULL, sockindex)) {",
          "3204:         Curl_ssl_sessionid_unlock(conn);",
          "",
          "[Added Lines]",
          "3201:     int data_idx = ossl_get_ssl_data_index();",
          "3205:     if(data_idx >= 0 && connectdata_idx >= 0 && sockindex_idx >= 0) {",
          "3208:       SSL_set_ex_data(backend->handle, data_idx, data);",
          "3213:     Curl_ssl_sessionid_lock(data);",
          "3214:     if(!Curl_ssl_getsessionid(data, conn, &ssl_sessionid, NULL, sockindex)) {",
          "3217:         Curl_ssl_sessionid_unlock(data);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "3211:       infof(data, \"SSL re-using session ID\\n\");",
          "3212:     }",
          "3214:   }",
          "3216: #ifndef CURL_DISABLE_PROXY",
          "",
          "[Removed Lines]",
          "3213:     Curl_ssl_sessionid_unlock(conn);",
          "",
          "[Added Lines]",
          "3226:     Curl_ssl_sessionid_unlock(data);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "3237:   return CURLE_OK;",
          "3238: }",
          "3241: {",
          "3243:   int err;",
          "3244:   struct ssl_connect_data *connssl = &conn->ssl[sockindex];",
          "3245:   struct ssl_backend_data *backend = connssl->backend;",
          "",
          "[Removed Lines]",
          "3240: static CURLcode ossl_connect_step2(struct connectdata *conn, int sockindex)",
          "3242:   struct Curl_easy *data = conn->data;",
          "",
          "[Added Lines]",
          "3253: static CURLcode ossl_connect_step2(struct Curl_easy *data,",
          "3254:                                    struct connectdata *conn, int sockindex)",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "3491: typedef int numcert_t;",
          "3492: #endif",
          "3495:                                struct ssl_connect_data *connssl)",
          "3496: {",
          "3497:   CURLcode result;",
          "3498:   STACK_OF(X509) *sk;",
          "3499:   int i;",
          "3501:   numcert_t numcerts;",
          "3502:   BIO *mem;",
          "3503:   struct ssl_backend_data *backend = connssl->backend;",
          "",
          "[Removed Lines]",
          "3494: static CURLcode get_cert_chain(struct connectdata *conn,",
          "3500:   struct Curl_easy *data = conn->data;",
          "",
          "[Added Lines]",
          "3507: static CURLcode get_cert_chain(struct Curl_easy *data,",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "3776:                            struct ssl_connect_data *connssl,",
          "3777:                            bool strict)",
          "3778: {",
          "3779:   CURLcode result = CURLE_OK;",
          "3780:   int rc;",
          "3781:   long lerr;",
          "3783:   X509 *issuer;",
          "3784:   BIO *fp = NULL;",
          "3785:   char error_buffer[256]=\"\";",
          "",
          "[Removed Lines]",
          "3775: static CURLcode servercert(struct connectdata *conn,",
          "3782:   struct Curl_easy *data = conn->data;",
          "",
          "[Added Lines]",
          "3787: static CURLcode servercert(struct Curl_easy *data,",
          "3788:                            struct connectdata *conn,",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "3791:   if(data->set.ssl.certinfo)",
          "3795:   backend->server_cert = SSL_get_peer_certificate(backend->handle);",
          "3796:   if(!backend->server_cert) {",
          "",
          "[Removed Lines]",
          "3793:     (void)get_cert_chain(conn, connssl);",
          "",
          "[Added Lines]",
          "3805:     (void)get_cert_chain(data, connssl);",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "3826:   BIO_free(mem);",
          "3828:   if(SSL_CONN_CONFIG(verifyhost)) {",
          "3830:     if(result) {",
          "3831:       X509_free(backend->server_cert);",
          "3832:       backend->server_cert = NULL;",
          "",
          "[Removed Lines]",
          "3829:     result = verifyhost(conn, backend->server_cert);",
          "",
          "[Added Lines]",
          "3841:     result = verifyhost(data, conn, backend->server_cert);",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "3928: #if (OPENSSL_VERSION_NUMBER >= 0x0090808fL) && !defined(OPENSSL_NO_TLSEXT) && \\",
          "3929:     !defined(OPENSSL_NO_OCSP)",
          "3930:   if(SSL_CONN_CONFIG(verifystatus)) {",
          "3932:     if(result) {",
          "3933:       X509_free(backend->server_cert);",
          "3934:       backend->server_cert = NULL;",
          "",
          "[Removed Lines]",
          "3931:     result = verifystatus(conn, connssl);",
          "",
          "[Added Lines]",
          "3943:     result = verifystatus(data, connssl);",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "3956:   return result;",
          "3957: }",
          "3960: {",
          "3961:   CURLcode result = CURLE_OK;",
          "3962:   struct ssl_connect_data *connssl = &conn->ssl[sockindex];",
          "",
          "[Removed Lines]",
          "3959: static CURLcode ossl_connect_step3(struct connectdata *conn, int sockindex)",
          "",
          "[Added Lines]",
          "3971: static CURLcode ossl_connect_step3(struct Curl_easy *data,",
          "3972:                                    struct connectdata *conn, int sockindex)",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "3976:   if(!result)",
          "3977:     connssl->connecting_state = ssl_connect_done;",
          "",
          "[Removed Lines]",
          "3973:   result = servercert(conn, connssl, (SSL_CONN_CONFIG(verifypeer) ||",
          "3974:                                       SSL_CONN_CONFIG(verifyhost)));",
          "",
          "[Added Lines]",
          "3986:   result = servercert(data, conn, connssl, (SSL_CONN_CONFIG(verifypeer) ||",
          "3987:                                             SSL_CONN_CONFIG(verifyhost)));",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "3982: static Curl_recv ossl_recv;",
          "3983: static Curl_send ossl_send;",
          "3986:                                     int sockindex,",
          "3987:                                     bool nonblocking,",
          "3988:                                     bool *done)",
          "3989: {",
          "3990:   CURLcode result;",
          "3992:   struct ssl_connect_data *connssl = &conn->ssl[sockindex];",
          "3993:   curl_socket_t sockfd = conn->sock[sockindex];",
          "3994:   int what;",
          "",
          "[Removed Lines]",
          "3985: static CURLcode ossl_connect_common(struct connectdata *conn,",
          "3991:   struct Curl_easy *data = conn->data;",
          "",
          "[Added Lines]",
          "3998: static CURLcode ossl_connect_common(struct Curl_easy *data,",
          "3999:                                     struct connectdata *conn,",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "4009:       return CURLE_OPERATION_TIMEDOUT;",
          "4010:     }",
          "4013:     if(result)",
          "4014:       return result;",
          "4015:   }",
          "",
          "[Removed Lines]",
          "4012:     result = ossl_connect_step1(conn, sockindex);",
          "",
          "[Added Lines]",
          "4025:     result = ossl_connect_step1(data, conn, sockindex);",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "4065:     if(result || (nonblocking &&",
          "4066:                   (ssl_connect_2 == connssl->connecting_state ||",
          "4067:                    ssl_connect_2_reading == connssl->connecting_state ||",
          "",
          "[Removed Lines]",
          "4064:     result = ossl_connect_step2(conn, sockindex);",
          "",
          "[Added Lines]",
          "4077:     result = ossl_connect_step2(data, conn, sockindex);",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "4073:   if(ssl_connect_3 == connssl->connecting_state) {",
          "4075:     if(result)",
          "4076:       return result;",
          "4077:   }",
          "",
          "[Removed Lines]",
          "4074:     result = ossl_connect_step3(conn, sockindex);",
          "",
          "[Added Lines]",
          "4087:     result = ossl_connect_step3(data, conn, sockindex);",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "4091:   return CURLE_OK;",
          "4092: }",
          "4095:                                          int sockindex,",
          "4096:                                          bool *done)",
          "4097: {",
          "4099: }",
          "4102: {",
          "4103:   CURLcode result;",
          "4104:   bool done = FALSE;",
          "4107:   if(result)",
          "4108:     return result;",
          "",
          "[Removed Lines]",
          "4094: static CURLcode ossl_connect_nonblocking(struct connectdata *conn,",
          "4098:   return ossl_connect_common(conn, sockindex, TRUE, done);",
          "4101: static CURLcode ossl_connect(struct connectdata *conn, int sockindex)",
          "4106:   result = ossl_connect_common(conn, sockindex, FALSE, &done);",
          "",
          "[Added Lines]",
          "4107: static CURLcode ossl_connect_nonblocking(struct Curl_easy *data,",
          "4108:                                          struct connectdata *conn,",
          "4112:   return ossl_connect_common(data, conn, sockindex, TRUE, done);",
          "4115: static CURLcode ossl_connect(struct Curl_easy *data, struct connectdata *conn,",
          "4116:                              int sockindex)",
          "4121:   result = ossl_connect_common(data, conn, sockindex, FALSE, &done);",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "4265:           strncpy(error_buffer, SSL_ERROR_to_str(err), sizeof(error_buffer));",
          "4266:           error_buffer[sizeof(error_buffer) - 1] = '\\0';",
          "4267:         }",
          "4269:               error_buffer, sockerr);",
          "4271:         return -1;",
          "",
          "[Removed Lines]",
          "4268:         failf(conn->data, OSSL_PACKAGE \" SSL_read: %s, errno %d\",",
          "",
          "[Added Lines]",
          "4283:         failf(data, OSSL_PACKAGE \" SSL_read: %s, errno %d\",",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "4287:           msnprintf(error_buffer, sizeof(error_buffer),",
          "4288:                     \"Connection closed abruptly\");",
          "4289:         }",
          "4291:               \" (Fatal because this is a curl debug build)\",",
          "4292:               error_buffer, sockerr);",
          "",
          "[Removed Lines]",
          "4290:         failf(conn->data, OSSL_PACKAGE \" SSL_read: %s, errno %d\"",
          "",
          "[Added Lines]",
          "4305:         failf(data, OSSL_PACKAGE \" SSL_read: %s, errno %d\"",
          "",
          "---------------"
        ],
        "lib/vtls/schannel.c||lib/vtls/schannel.c": [
          "File: lib/vtls/schannel.c -> lib/vtls/schannel.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "142: static Curl_recv schannel_recv;",
          "143: static Curl_send schannel_send;",
          "146:                                     const char *pinnedpubkey);",
          "148: static void InitSecBuffer(SecBuffer *buffer, unsigned long BufType,",
          "",
          "[Removed Lines]",
          "145: static CURLcode pkp_pin_peer_pubkey(struct connectdata *conn, int sockindex,",
          "",
          "[Added Lines]",
          "145: static CURLcode pkp_pin_peer_pubkey(struct Curl_easy *data,",
          "146:                                     struct connectdata *conn, int sockindex,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "162: }",
          "164: static CURLcode",
          "166: {",
          "168:   long ssl_version = SSL_CONN_CONFIG(version);",
          "169:   long ssl_version_max = SSL_CONN_CONFIG(version_max);",
          "170:   long i = ssl_version;",
          "",
          "[Removed Lines]",
          "165: set_ssl_version_min_max(SCHANNEL_CRED *schannel_cred, struct connectdata *conn)",
          "167:   struct Curl_easy *data = conn->data;",
          "",
          "[Added Lines]",
          "166: set_ssl_version_min_max(SCHANNEL_CRED *schannel_cred, struct Curl_easy *data,",
          "167:                         struct connectdata *conn)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "405: #endif",
          "407: static CURLcode",
          "409: {",
          "410:   ssize_t written = -1;",
          "412:   struct ssl_connect_data *connssl = &conn->ssl[sockindex];",
          "413:   SecBuffer outbuf;",
          "414:   SecBufferDesc outbuf_desc;",
          "",
          "[Removed Lines]",
          "408: schannel_connect_step1(struct connectdata *conn, int sockindex)",
          "411:   struct Curl_easy *data = conn->data;",
          "",
          "[Added Lines]",
          "409: schannel_connect_step1(struct Curl_easy *data, struct connectdata *conn,",
          "410:                        int sockindex)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "495:   if(SSL_SET_OPTION(primary.sessionid)) {",
          "498:       BACKEND->cred = old_cred;",
          "499:       DEBUGF(infof(data, \"schannel: re-using existing credential handle\\n\"));",
          "",
          "[Removed Lines]",
          "496:     Curl_ssl_sessionid_lock(conn);",
          "497:     if(!Curl_ssl_getsessionid(conn, (void **)&old_cred, NULL, sockindex)) {",
          "",
          "[Added Lines]",
          "497:     Curl_ssl_sessionid_lock(data);",
          "498:     if(!Curl_ssl_getsessionid(data, conn,",
          "499:                               (void **)&old_cred, NULL, sockindex)) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "504:                    \"schannel: incremented credential handle refcount = %d\\n\",",
          "505:                    BACKEND->cred->refcount));",
          "506:     }",
          "508:   }",
          "510:   if(!BACKEND->cred) {",
          "",
          "[Removed Lines]",
          "507:     Curl_ssl_sessionid_unlock(conn);",
          "",
          "[Added Lines]",
          "509:     Curl_ssl_sessionid_unlock(data);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "563:     case CURL_SSLVERSION_TLSv1_2:",
          "564:     case CURL_SSLVERSION_TLSv1_3:",
          "565:     {",
          "567:       if(result != CURLE_OK)",
          "568:         return result;",
          "569:       break;",
          "",
          "[Removed Lines]",
          "566:       result = set_ssl_version_min_max(&schannel_cred, conn);",
          "",
          "[Added Lines]",
          "568:       result = set_ssl_version_min_max(&schannel_cred, data, conn);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "980: }",
          "982: static CURLcode",
          "984: {",
          "985:   int i;",
          "986:   ssize_t nread = -1, written = -1;",
          "988:   struct ssl_connect_data *connssl = &conn->ssl[sockindex];",
          "989:   unsigned char *reallocated_buffer;",
          "990:   SecBuffer outbuf[3];",
          "",
          "[Removed Lines]",
          "983: schannel_connect_step2(struct connectdata *conn, int sockindex)",
          "987:   struct Curl_easy *data = conn->data;",
          "",
          "[Added Lines]",
          "985: schannel_connect_step2(struct Curl_easy *data, struct connectdata *conn,",
          "986:                        int sockindex)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1252:     data->set.str[STRING_SSL_PINNEDPUBLICKEY_PROXY] :",
          "1253:     data->set.str[STRING_SSL_PINNEDPUBLICKEY_ORIG];",
          "1254:   if(pubkey_ptr) {",
          "1256:     if(result) {",
          "1257:       failf(data, \"SSL: public key does not match pinned public key!\");",
          "1258:       return result;",
          "",
          "[Removed Lines]",
          "1255:     result = pkp_pin_peer_pubkey(conn, sockindex, pubkey_ptr);",
          "",
          "[Added Lines]",
          "1257:     result = pkp_pin_peer_pubkey(data, conn, sockindex, pubkey_ptr);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1262: #ifdef HAS_MANUAL_VERIFY_API",
          "1263:   if(conn->ssl_config.verifypeer && BACKEND->use_manual_cred_validation) {",
          "1265:   }",
          "1266: #endif",
          "",
          "[Removed Lines]",
          "1264:     return Curl_verify_certificate(conn, sockindex);",
          "",
          "[Added Lines]",
          "1266:     return Curl_verify_certificate(data, conn, sockindex);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1328: }",
          "1330: static CURLcode",
          "1332: {",
          "1333:   CURLcode result = CURLE_OK;",
          "1335:   struct ssl_connect_data *connssl = &conn->ssl[sockindex];",
          "1336:   SECURITY_STATUS sspi_status = SEC_E_OK;",
          "1337:   CERT_CONTEXT *ccert_context = NULL;",
          "",
          "[Removed Lines]",
          "1331: schannel_connect_step3(struct connectdata *conn, int sockindex)",
          "1334:   struct Curl_easy *data = conn->data;",
          "",
          "[Added Lines]",
          "1333: schannel_connect_step3(struct Curl_easy *data, struct connectdata *conn,",
          "1334:                        int sockindex)",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1411:     bool incache;",
          "1412:     struct Curl_schannel_cred *old_cred = NULL;",
          "1416:                                       sockindex));",
          "1417:     if(incache) {",
          "1418:       if(old_cred != BACKEND->cred) {",
          "1419:         DEBUGF(infof(data,",
          "1420:                      \"schannel: old credential handle is stale, removing\\n\"));",
          "1423:         incache = FALSE;",
          "1424:       }",
          "1425:     }",
          "1426:     if(!incache) {",
          "1428:                                      sizeof(struct Curl_schannel_cred),",
          "1429:                                      sockindex);",
          "1430:       if(result) {",
          "1432:         failf(data, \"schannel: failed to store credential handle\");",
          "1433:         return result;",
          "1434:       }",
          "",
          "[Removed Lines]",
          "1414:     Curl_ssl_sessionid_lock(conn);",
          "1415:     incache = !(Curl_ssl_getsessionid(conn, (void **)&old_cred, NULL,",
          "1422:         Curl_ssl_delsessionid(conn, (void *)old_cred);",
          "1427:       result = Curl_ssl_addsessionid(conn, (void *)BACKEND->cred,",
          "1431:         Curl_ssl_sessionid_unlock(conn);",
          "",
          "[Added Lines]",
          "1416:     Curl_ssl_sessionid_lock(data);",
          "1417:     incache = !(Curl_ssl_getsessionid(data, conn, (void **)&old_cred, NULL,",
          "1424:         Curl_ssl_delsessionid(data, (void *)old_cred);",
          "1429:       result = Curl_ssl_addsessionid(data, conn, (void *)BACKEND->cred,",
          "1433:         Curl_ssl_sessionid_unlock(data);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1439:                      \"schannel: stored credential handle in session cache\\n\"));",
          "1440:       }",
          "1441:     }",
          "1443:   }",
          "1445:   if(data->set.ssl.certinfo) {",
          "",
          "[Removed Lines]",
          "1442:     Curl_ssl_sessionid_unlock(conn);",
          "",
          "[Added Lines]",
          "1444:     Curl_ssl_sessionid_unlock(data);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1476: }",
          "1478: static CURLcode",
          "1481: {",
          "1482:   CURLcode result;",
          "1484:   struct ssl_connect_data *connssl = &conn->ssl[sockindex];",
          "1485:   curl_socket_t sockfd = conn->sock[sockindex];",
          "1486:   timediff_t timeout_ms;",
          "",
          "[Removed Lines]",
          "1479: schannel_connect_common(struct connectdata *conn, int sockindex,",
          "1480:                         bool nonblocking, bool *done)",
          "1483:   struct Curl_easy *data = conn->data;",
          "",
          "[Added Lines]",
          "1481: schannel_connect_common(struct Curl_easy *data, struct connectdata *conn,",
          "1482:                         int sockindex, bool nonblocking, bool *done)",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1502:       return CURLE_OPERATION_TIMEDOUT;",
          "1503:     }",
          "1506:     if(result)",
          "1507:       return result;",
          "1508:   }",
          "",
          "[Removed Lines]",
          "1505:     result = schannel_connect_step1(conn, sockindex);",
          "",
          "[Added Lines]",
          "1506:     result = schannel_connect_step1(data, conn, sockindex);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1561:     if(result || (nonblocking &&",
          "1562:                   (ssl_connect_2 == connssl->connecting_state ||",
          "1563:                    ssl_connect_2_reading == connssl->connecting_state ||",
          "",
          "[Removed Lines]",
          "1560:     result = schannel_connect_step2(conn, sockindex);",
          "",
          "[Added Lines]",
          "1561:     result = schannel_connect_step2(data, conn, sockindex);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1569:   if(ssl_connect_3 == connssl->connecting_state) {",
          "1571:     if(result)",
          "1572:       return result;",
          "1573:   }",
          "",
          "[Removed Lines]",
          "1570:     result = schannel_connect_step3(conn, sockindex);",
          "",
          "[Added Lines]",
          "1571:     result = schannel_connect_step3(data, conn, sockindex);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "2064:   return *err ? -1 : 0;",
          "2065: }",
          "2069: {",
          "2071: }",
          "2074: {",
          "2075:   CURLcode result;",
          "2076:   bool done = FALSE;",
          "2079:   if(result)",
          "2080:     return result;",
          "",
          "[Removed Lines]",
          "2067: static CURLcode Curl_schannel_connect_nonblocking(struct connectdata *conn,",
          "2068:                                                   int sockindex, bool *done)",
          "2070:   return schannel_connect_common(conn, sockindex, TRUE, done);",
          "2073: static CURLcode Curl_schannel_connect(struct connectdata *conn, int sockindex)",
          "2078:   result = schannel_connect_common(conn, sockindex, FALSE, &done);",
          "",
          "[Added Lines]",
          "2068: static CURLcode schannel_connect_nonblocking(struct Curl_easy *data,",
          "2069:                                              struct connectdata *conn,",
          "2070:                                              int sockindex, bool *done)",
          "2072:   return schannel_connect_common(data, conn, sockindex, TRUE, done);",
          "2075: static CURLcode schannel_connect(struct Curl_easy *data,",
          "2076:                                  struct connectdata *conn, int sockindex)",
          "2081:   result = schannel_connect_common(data, conn, sockindex, FALSE, &done);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "2084:   return CURLE_OK;",
          "2085: }",
          "2089: {",
          "2090:   const struct ssl_connect_data *connssl = &conn->ssl[sockindex];",
          "",
          "[Removed Lines]",
          "2087: static bool Curl_schannel_data_pending(const struct connectdata *conn,",
          "2088:                                        int sockindex)",
          "",
          "[Added Lines]",
          "2090: static bool schannel_data_pending(const struct connectdata *conn,",
          "2091:                                   int sockindex)",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "2096:     return FALSE;",
          "2097: }",
          "2100: {",
          "2101:   if(conn->ssl[sockindex].use)",
          "2104: }",
          "2107: {",
          "2109:   struct Curl_schannel_cred *cred = ptr;",
          "",
          "[Removed Lines]",
          "2099: static void Curl_schannel_close(struct connectdata *conn, int sockindex)",
          "2103:     Curl_ssl_shutdown(conn, sockindex);",
          "2106: static void Curl_schannel_session_free(void *ptr)",
          "",
          "[Added Lines]",
          "2102: static void schannel_close(struct Curl_easy *data, struct connectdata *conn,",
          "2103:                            int sockindex)",
          "2107:     Curl_ssl_shutdown(data, conn, sockindex);",
          "2110: static void schannel_session_free(void *ptr)",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "2115:   }",
          "2116: }",
          "2119: {",
          "2124:   struct ssl_connect_data *connssl = &conn->ssl[sockindex];",
          "2125: #ifndef CURL_DISABLE_PROXY",
          "2126:   char * const hostname = SSL_IS_PROXY() ? conn->http_proxy.host.name :",
          "",
          "[Removed Lines]",
          "2118: static int Curl_schannel_shutdown(struct connectdata *conn, int sockindex)",
          "2123:   struct Curl_easy *data = conn->data;",
          "",
          "[Added Lines]",
          "2122: static int schannel_shutdown(struct Curl_easy *data, struct connectdata *conn,",
          "2123:                              int sockindex)",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "2205:   if(BACKEND->cred) {",
          "2214:     BACKEND->cred = NULL;",
          "2215:   }",
          "",
          "[Removed Lines]",
          "2211:     Curl_ssl_sessionid_lock(conn);",
          "2212:     Curl_schannel_session_free(BACKEND->cred);",
          "2213:     Curl_ssl_sessionid_unlock(conn);",
          "",
          "[Added Lines]",
          "2210:     Curl_ssl_sessionid_lock(data);",
          "2211:     schannel_session_free(BACKEND->cred);",
          "2212:     Curl_ssl_sessionid_unlock(data);",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "2232:   return CURLE_OK;",
          "2233: }",
          "2236: {",
          "2237:   return (Curl_sspi_global_init() == CURLE_OK ? 1 : 0);",
          "2238: }",
          "2241: {",
          "2242:   Curl_sspi_global_cleanup();",
          "2243: }",
          "2246: {",
          "2247:   size = msnprintf(buffer, size, \"Schannel\");",
          "2249:   return size;",
          "2250: }",
          "2254: {",
          "2255:   HCRYPTPROV hCryptProv = 0;",
          "",
          "[Removed Lines]",
          "2235: static int Curl_schannel_init(void)",
          "2240: static void Curl_schannel_cleanup(void)",
          "2245: static size_t Curl_schannel_version(char *buffer, size_t size)",
          "2252: static CURLcode Curl_schannel_random(struct Curl_easy *data UNUSED_PARAM,",
          "2253:                                      unsigned char *entropy, size_t length)",
          "",
          "[Added Lines]",
          "2234: static int schannel_init(void)",
          "2239: static void schannel_cleanup(void)",
          "2244: static size_t schannel_version(char *buffer, size_t size)",
          "2251: static CURLcode schannel_random(struct Curl_easy *data UNUSED_PARAM,",
          "2252:                                 unsigned char *entropy, size_t length)",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "2269:   return CURLE_OK;",
          "2270: }",
          "2273:                                     const char *pinnedpubkey)",
          "2274: {",
          "2276:   struct ssl_connect_data *connssl = &conn->ssl[sockindex];",
          "2277:   CERT_CONTEXT *pCertContextServer = NULL;",
          "",
          "[Removed Lines]",
          "2272: static CURLcode pkp_pin_peer_pubkey(struct connectdata *conn, int sockindex,",
          "2275:   struct Curl_easy *data = conn->data;",
          "",
          "[Added Lines]",
          "2271: static CURLcode pkp_pin_peer_pubkey(struct Curl_easy *data,",
          "2272:                                     struct connectdata *conn, int sockindex,",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "2334:   return result;",
          "2335: }",
          "2343: {",
          "2344:   HCRYPTPROV hProv = 0;",
          "2345:   HCRYPTHASH hHash = 0;",
          "",
          "[Removed Lines]",
          "2337: static void Curl_schannel_checksum(const unsigned char *input,",
          "2338:                                    size_t inputlen,",
          "2339:                                    unsigned char *checksum,",
          "2340:                                    size_t checksumlen,",
          "2341:                                    DWORD provType,",
          "2342:                                    const unsigned int algId)",
          "",
          "[Added Lines]",
          "2336: static void schannel_checksum(const unsigned char *input,",
          "2337:                               size_t inputlen,",
          "2338:                               unsigned char *checksum,",
          "2339:                               size_t checksumlen,",
          "2340:                               DWORD provType,",
          "2341:                               const unsigned int algId)",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "2384:     CryptReleaseContext(hProv, 0);",
          "2385: }",
          "2391: {",
          "2394:   return CURLE_OK;",
          "2395: }",
          "2401: {",
          "2404:   return CURLE_OK;",
          "2405: }",
          "2409: {",
          "2410:   (void)info;",
          "2411:   return &BACKEND->ctxt->ctxt_handle;",
          "",
          "[Removed Lines]",
          "2387: static CURLcode Curl_schannel_md5sum(unsigned char *input,",
          "2388:                                      size_t inputlen,",
          "2389:                                      unsigned char *md5sum,",
          "2390:                                      size_t md5len)",
          "2392:   Curl_schannel_checksum(input, inputlen, md5sum, md5len,",
          "2393:                          PROV_RSA_FULL, CALG_MD5);",
          "2397: static CURLcode Curl_schannel_sha256sum(const unsigned char *input,",
          "2398:                                         size_t inputlen,",
          "2399:                                         unsigned char *sha256sum,",
          "2400:                                         size_t sha256len)",
          "2402:   Curl_schannel_checksum(input, inputlen, sha256sum, sha256len,",
          "2403:                          PROV_RSA_AES, CALG_SHA_256);",
          "2407: static void *Curl_schannel_get_internals(struct ssl_connect_data *connssl,",
          "2408:                                          CURLINFO info UNUSED_PARAM)",
          "",
          "[Added Lines]",
          "2386: static CURLcode schannel_md5sum(unsigned char *input,",
          "2387:                                 size_t inputlen,",
          "2388:                                 unsigned char *md5sum,",
          "2389:                                 size_t md5len)",
          "2391:   schannel_checksum(input, inputlen, md5sum, md5len, PROV_RSA_FULL, CALG_MD5);",
          "2395: static CURLcode schannel_sha256sum(const unsigned char *input,",
          "2396:                                    size_t inputlen,",
          "2397:                                    unsigned char *sha256sum,",
          "2398:                                    size_t sha256len)",
          "2400:   schannel_checksum(input, inputlen, sha256sum, sha256len,",
          "2401:                     PROV_RSA_AES, CALG_SHA_256);",
          "2405: static void *schannel_get_internals(struct ssl_connect_data *connssl,",
          "2406:                                     CURLINFO info UNUSED_PARAM)",
          "",
          "---------------"
        ],
        "lib/vtls/schannel.h||lib/vtls/schannel.h": [
          "File: lib/vtls/schannel.h -> lib/vtls/schannel.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "54: extern const struct Curl_ssl Curl_ssl_schannel;",
          "59: #ifdef EXPOSE_SCHANNEL_INTERNAL_STRUCTS",
          "",
          "[Removed Lines]",
          "56: CURLcode Curl_verify_certificate(struct connectdata *conn, int sockindex);",
          "",
          "[Added Lines]",
          "56: CURLcode Curl_verify_certificate(struct Curl_easy *data,",
          "57:                                  struct connectdata *conn, int sockindex);",
          "",
          "---------------"
        ],
        "lib/vtls/schannel_verify.c||lib/vtls/schannel_verify.c": [
          "File: lib/vtls/schannel_verify.c -> lib/vtls/schannel_verify.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "80: static CURLcode add_certs_to_store(HCERTSTORE trust_store,",
          "81:                                    const char *ca_file,",
          "83: {",
          "84:   CURLcode result;",
          "86:   HANDLE ca_file_handle = INVALID_HANDLE_VALUE;",
          "87:   LARGE_INTEGER file_size;",
          "88:   char *ca_file_buffer = NULL;",
          "",
          "[Removed Lines]",
          "82:                                    struct connectdata *conn)",
          "85:   struct Curl_easy *data = conn->data;",
          "",
          "[Added Lines]",
          "82:                                    struct Curl_easy *data)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "527:   return result;",
          "528: }",
          "531: {",
          "532:   SECURITY_STATUS sspi_status;",
          "534:   struct ssl_connect_data *connssl = &conn->ssl[sockindex];",
          "535:   CURLcode result = CURLE_OK;",
          "536:   CERT_CONTEXT *pCertContextServer = NULL;",
          "",
          "[Removed Lines]",
          "530: CURLcode Curl_verify_certificate(struct connectdata *conn, int sockindex)",
          "533:   struct Curl_easy *data = conn->data;",
          "",
          "[Added Lines]",
          "529: CURLcode Curl_verify_certificate(struct Curl_easy *data,",
          "530:                                  struct connectdata *conn, int sockindex)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "584:       }",
          "585:       else {",
          "586:         result = add_certs_to_store(trust_store, SSL_CONN_CONFIG(CAfile),",
          "588:       }",
          "589:     }",
          "",
          "[Removed Lines]",
          "587:                                     conn);",
          "",
          "[Added Lines]",
          "586:                                     data);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "676:   if(result == CURLE_OK) {",
          "677:     if(SSL_CONN_CONFIG(verifyhost)) {",
          "679:     }",
          "680:   }",
          "",
          "[Removed Lines]",
          "678:       result = verify_host(conn->data, pCertContextServer, conn_hostname);",
          "",
          "[Added Lines]",
          "677:       result = verify_host(data, pCertContextServer, conn_hostname);",
          "",
          "---------------"
        ],
        "lib/vtls/sectransp.c||lib/vtls/sectransp.c": [
          "File: lib/vtls/sectransp.c -> lib/vtls/sectransp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1291: #endif",
          "1293: static CURLcode",
          "1295: {",
          "1297:   struct ssl_connect_data *connssl = &conn->ssl[sockindex];",
          "1298:   struct ssl_backend_data *backend = connssl->backend;",
          "1299:   long ssl_version = SSL_CONN_CONFIG(version);",
          "",
          "[Removed Lines]",
          "1294: set_ssl_version_min_max(struct connectdata *conn, int sockindex)",
          "1296:   struct Curl_easy *data = conn->data;",
          "",
          "[Added Lines]",
          "1294: set_ssl_version_min_max(struct Curl_easy *data, struct connectdata *conn,",
          "1295:                         int sockindex)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1387: }",
          "1391:                                         int sockindex)",
          "1392: {",
          "1394:   curl_socket_t sockfd = conn->sock[sockindex];",
          "1395:   struct ssl_connect_data *connssl = &conn->ssl[sockindex];",
          "1396:   struct ssl_backend_data *backend = connssl->backend;",
          "",
          "[Removed Lines]",
          "1390: static CURLcode sectransp_connect_step1(struct connectdata *conn,",
          "1393:   struct Curl_easy *data = conn->data;",
          "",
          "[Added Lines]",
          "1390: static CURLcode sectransp_connect_step1(struct Curl_easy *data,",
          "1391:                                         struct connectdata *conn,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1478:     case CURL_SSLVERSION_TLSv1_2:",
          "1479:     case CURL_SSLVERSION_TLSv1_3:",
          "1480:       {",
          "1482:         if(result != CURLE_OK)",
          "1483:           return result;",
          "1484:         break;",
          "",
          "[Removed Lines]",
          "1481:         CURLcode result = set_ssl_version_min_max(conn, sockindex);",
          "",
          "[Added Lines]",
          "1481:         CURLcode result = set_ssl_version_min_max(data, conn, sockindex);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1527:     case CURL_SSLVERSION_TLSv1_2:",
          "1528:     case CURL_SSLVERSION_TLSv1_3:",
          "1529:       {",
          "1531:         if(result != CURLE_OK)",
          "1532:           return result;",
          "1533:         break;",
          "",
          "[Removed Lines]",
          "1530:         CURLcode result = set_ssl_version_min_max(conn, sockindex);",
          "",
          "[Added Lines]",
          "1530:         CURLcode result = set_ssl_version_min_max(data, conn, sockindex);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1952:     char *ssl_sessionid;",
          "1953:     size_t ssl_sessionid_len;",
          "1957:                               &ssl_sessionid_len, sockindex)) {",
          "1959:       err = SSLSetPeerID(backend->ssl_ctx, ssl_sessionid, ssl_sessionid_len);",
          "1961:       if(err != noErr) {",
          "1962:         failf(data, \"SSL: SSLSetPeerID() failed: OSStatus %d\", err);",
          "1963:         return CURLE_SSL_CONNECT_ERROR;",
          "",
          "[Removed Lines]",
          "1955:     Curl_ssl_sessionid_lock(conn);",
          "1956:     if(!Curl_ssl_getsessionid(conn, (void **)&ssl_sessionid,",
          "1960:       Curl_ssl_sessionid_unlock(conn);",
          "",
          "[Added Lines]",
          "1955:     Curl_ssl_sessionid_lock(data);",
          "1956:     if(!Curl_ssl_getsessionid(data, conn, (void **)&ssl_sessionid,",
          "1960:       Curl_ssl_sessionid_unlock(data);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1977:       err = SSLSetPeerID(backend->ssl_ctx, ssl_sessionid, ssl_sessionid_len);",
          "1978:       if(err != noErr) {",
          "1980:         failf(data, \"SSL: SSLSetPeerID() failed: OSStatus %d\", err);",
          "1981:         return CURLE_SSL_CONNECT_ERROR;",
          "1982:       }",
          "1987:       if(result) {",
          "1988:         failf(data, \"failed to store ssl session\");",
          "1989:         return result;",
          "",
          "[Removed Lines]",
          "1979:         Curl_ssl_sessionid_unlock(conn);",
          "1984:       result = Curl_ssl_addsessionid(conn, ssl_sessionid, ssl_sessionid_len,",
          "1985:                                      sockindex);",
          "1986:       Curl_ssl_sessionid_unlock(conn);",
          "",
          "[Added Lines]",
          "1979:         Curl_ssl_sessionid_unlock(data);",
          "1984:       result = Curl_ssl_addsessionid(data, conn, ssl_sessionid,",
          "1985:                                      ssl_sessionid_len, sockindex);",
          "1986:       Curl_ssl_sessionid_unlock(data);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2381: static CURLcode",
          "2383: {",
          "2385:   struct ssl_connect_data *connssl = &conn->ssl[sockindex];",
          "2386:   struct ssl_backend_data *backend = connssl->backend;",
          "2387:   OSStatus err;",
          "",
          "[Removed Lines]",
          "2382: sectransp_connect_step2(struct connectdata *conn, int sockindex)",
          "2384:   struct Curl_easy *data = conn->data;",
          "",
          "[Added Lines]",
          "2382: sectransp_connect_step2(struct Curl_easy *data, struct connectdata *conn,",
          "2383:                         int sockindex)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2418:             return result;",
          "2419:         }",
          "2424:       case errSSLPeerDecodeError:",
          "",
          "[Removed Lines]",
          "2421:         return sectransp_connect_step2(conn, sockindex);",
          "",
          "[Added Lines]",
          "2421:         return sectransp_connect_step2(data, conn, sockindex);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2711: #ifndef CURL_DISABLE_VERBOSE_STRINGS",
          "2713: static void",
          "2715:                          int sockindex)",
          "2716: {",
          "2718:   struct ssl_connect_data *connssl = &conn->ssl[sockindex];",
          "2719:   struct ssl_backend_data *backend = connssl->backend;",
          "2720:   CFArrayRef server_certs = NULL;",
          "",
          "[Removed Lines]",
          "2714: show_verbose_server_cert(struct connectdata *conn,",
          "2717:   struct Curl_easy *data = conn->data;",
          "",
          "[Added Lines]",
          "2714: show_verbose_server_cert(struct Curl_easy *data,",
          "2715:                          struct connectdata *conn,",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2819: static CURLcode",
          "2821:                         int sockindex)",
          "2822: {",
          "2824:   struct ssl_connect_data *connssl = &conn->ssl[sockindex];",
          "",
          "[Removed Lines]",
          "2820: sectransp_connect_step3(struct connectdata *conn,",
          "2823:   struct Curl_easy *data = conn->data;",
          "",
          "[Added Lines]",
          "2820: sectransp_connect_step3(struct Curl_easy *data, struct connectdata *conn,",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2829: #ifndef CURL_DISABLE_VERBOSE_STRINGS",
          "2830:   if(data->set.verbose)",
          "2832: #endif",
          "2834:   connssl->connecting_state = ssl_connect_done;",
          "",
          "[Removed Lines]",
          "2831:     show_verbose_server_cert(conn, sockindex);",
          "",
          "[Added Lines]",
          "2830:     show_verbose_server_cert(data, conn, sockindex);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "2839: static Curl_send sectransp_send;",
          "2841: static CURLcode",
          "2843:                          int sockindex,",
          "2844:                          bool nonblocking,",
          "2845:                          bool *done)",
          "2846: {",
          "2847:   CURLcode result;",
          "2849:   struct ssl_connect_data *connssl = &conn->ssl[sockindex];",
          "2850:   curl_socket_t sockfd = conn->sock[sockindex];",
          "2851:   int what;",
          "",
          "[Removed Lines]",
          "2842: sectransp_connect_common(struct connectdata *conn,",
          "2848:   struct Curl_easy *data = conn->data;",
          "",
          "[Added Lines]",
          "2841: sectransp_connect_common(struct Curl_easy *data,",
          "2842:                          struct connectdata *conn,",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "2866:       return CURLE_OPERATION_TIMEDOUT;",
          "2867:     }",
          "2870:     if(result)",
          "2871:       return result;",
          "2872:   }",
          "",
          "[Removed Lines]",
          "2869:     result = sectransp_connect_step1(conn, sockindex);",
          "",
          "[Added Lines]",
          "2868:     result = sectransp_connect_step1(data, conn, sockindex);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "2924:     if(result || (nonblocking &&",
          "2925:                   (ssl_connect_2 == connssl->connecting_state ||",
          "2926:                    ssl_connect_2_reading == connssl->connecting_state ||",
          "",
          "[Removed Lines]",
          "2923:     result = sectransp_connect_step2(conn, sockindex);",
          "",
          "[Added Lines]",
          "2922:     result = sectransp_connect_step2(data, conn, sockindex);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "2933:   if(ssl_connect_3 == connssl->connecting_state) {",
          "2935:     if(result)",
          "2936:       return result;",
          "2937:   }",
          "",
          "[Removed Lines]",
          "2934:     result = sectransp_connect_step3(conn, sockindex);",
          "",
          "[Added Lines]",
          "2933:     result = sectransp_connect_step3(data, conn, sockindex);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "2951:   return CURLE_OK;",
          "2952: }",
          "2956: {",
          "2958: }",
          "2961: {",
          "2962:   CURLcode result;",
          "2963:   bool done = FALSE;",
          "2967:   if(result)",
          "2968:     return result;",
          "",
          "[Removed Lines]",
          "2954: static CURLcode Curl_sectransp_connect_nonblocking(struct connectdata *conn,",
          "2955:                                                    int sockindex, bool *done)",
          "2957:   return sectransp_connect_common(conn, sockindex, TRUE, done);",
          "2960: static CURLcode Curl_sectransp_connect(struct connectdata *conn, int sockindex)",
          "2965:   result = sectransp_connect_common(conn, sockindex, FALSE, &done);",
          "",
          "[Added Lines]",
          "2953: static CURLcode sectransp_connect_nonblocking(struct Curl_easy *data,",
          "2954:                                               struct connectdata *conn,",
          "2955:                                               int sockindex, bool *done)",
          "2957:   return sectransp_connect_common(data, conn, sockindex, TRUE, done);",
          "2960: static CURLcode sectransp_connect(struct Curl_easy *data,",
          "2961:                                   struct connectdata *conn, int sockindex)",
          "2966:   result = sectransp_connect_common(data, conn, sockindex, FALSE, &done);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "2972:   return CURLE_OK;",
          "2973: }",
          "2976: {",
          "2977:   struct ssl_connect_data *connssl = &conn->ssl[sockindex];",
          "2978:   struct ssl_backend_data *backend = connssl->backend;",
          "2980:   if(backend->ssl_ctx) {",
          "2981:     (void)SSLClose(backend->ssl_ctx);",
          "2982: #if CURL_BUILD_MAC_10_8 || CURL_BUILD_IOS",
          "",
          "[Removed Lines]",
          "2975: static void Curl_sectransp_close(struct connectdata *conn, int sockindex)",
          "",
          "[Added Lines]",
          "2976: static void sectransp_close(struct Curl_easy *data, struct connectdata *conn,",
          "2977:                             int sockindex)",
          "2982:   (void) data;",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "2994:   backend->ssl_sockfd = 0;",
          "2995: }",
          "2998: {",
          "2999:   struct ssl_connect_data *connssl = &conn->ssl[sockindex];",
          "3000:   struct ssl_backend_data *backend = connssl->backend;",
          "3002:   ssize_t nread;",
          "3003:   int what;",
          "3004:   int rc;",
          "",
          "[Removed Lines]",
          "2997: static int Curl_sectransp_shutdown(struct connectdata *conn, int sockindex)",
          "3001:   struct Curl_easy *data = conn->data;",
          "",
          "[Added Lines]",
          "3001: static int sectransp_shutdown(struct Curl_easy *data,",
          "3002:                               struct connectdata *conn, int sockindex)",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "3012:     return 0;",
          "3013: #endif",
          "3017:   rc = 0;",
          "",
          "[Removed Lines]",
          "3015:   Curl_sectransp_close(conn, sockindex);",
          "",
          "[Added Lines]",
          "3019:   sectransp_close(data, conn, sockindex);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "3050:   return rc;",
          "3051: }",
          "3054: {",
          "3056:      cached session ID inside the Security framework. There is a private",
          "",
          "[Removed Lines]",
          "3053: static void Curl_sectransp_session_free(void *ptr)",
          "",
          "[Added Lines]",
          "3057: static void sectransp_session_free(void *ptr)",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "3061:   Curl_safefree(ptr);",
          "3062: }",
          "3065: {",
          "3066:   return msnprintf(buffer, size, \"SecureTransport\");",
          "3067: }",
          "",
          "[Removed Lines]",
          "3064: static size_t Curl_sectransp_version(char *buffer, size_t size)",
          "",
          "[Added Lines]",
          "3068: static size_t sectransp_version(char *buffer, size_t size)",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "3078: {",
          "3079:   struct ssl_connect_data *connssl = &conn->ssl[FIRSTSOCKET];",
          "3080:   struct ssl_backend_data *backend = connssl->backend;",
          "",
          "[Removed Lines]",
          "3077: static int Curl_sectransp_check_cxn(struct connectdata *conn)",
          "",
          "[Added Lines]",
          "3081: static int sectransp_check_cxn(struct connectdata *conn)",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "3090:   return 0;",
          "3091: }",
          "3095: {",
          "3096:   const struct ssl_connect_data *connssl = &conn->ssl[connindex];",
          "3097:   struct ssl_backend_data *backend = connssl->backend;",
          "",
          "[Removed Lines]",
          "3093: static bool Curl_sectransp_data_pending(const struct connectdata *conn,",
          "3094:                                         int connindex)",
          "",
          "[Added Lines]",
          "3097: static bool sectransp_data_pending(const struct connectdata *conn,",
          "3098:                                    int connindex)",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "3108:     return false;",
          "3109: }",
          "3113: {",
          "",
          "[Removed Lines]",
          "3111: static CURLcode Curl_sectransp_random(struct Curl_easy *data UNUSED_PARAM,",
          "3112:                                       unsigned char *entropy, size_t length)",
          "",
          "[Added Lines]",
          "3115: static CURLcode sectransp_random(struct Curl_easy *data UNUSED_PARAM,",
          "3116:                                  unsigned char *entropy, size_t length)",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "3128:   return CURLE_OK;",
          "3129: }",
          "3135: {",
          "3136:   (void)md5len;",
          "3137:   (void)CC_MD5(tmp, (CC_LONG)tmplen, md5sum);",
          "3138:   return CURLE_OK;",
          "3139: }",
          "3145: {",
          "3146:   assert(sha256len >= CURL_SHA256_DIGEST_LENGTH);",
          "3147:   (void)CC_SHA256(tmp, (CC_LONG)tmplen, sha256sum);",
          "3148:   return CURLE_OK;",
          "3149: }",
          "3152: {",
          "3153: #if CURL_BUILD_MAC_10_9 || CURL_BUILD_IOS_7",
          "3154:   if(SSLSetSessionOption != NULL)",
          "",
          "[Removed Lines]",
          "3132:                                       size_t tmplen,",
          "3134:                                       size_t md5len)",
          "3142:                                      size_t tmplen,",
          "3144:                                      size_t sha256len)",
          "3151: static bool Curl_sectransp_false_start(void)",
          "",
          "[Added Lines]",
          "3136:                                  size_t tmplen,",
          "3138:                                  size_t md5len)",
          "3146:                                     size_t tmplen,",
          "3148:                                     size_t sha256len)",
          "3155: static bool sectransp_false_start(void)",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "3199:         return -1L;",
          "3200:       default:",
          "3203:         return -1L;",
          "3204:     }",
          "",
          "[Removed Lines]",
          "3201:         failf(conn->data, \"SSLWrite() returned error %d\", err);",
          "",
          "[Added Lines]",
          "3205:         failf(data, \"SSLWrite() returned error %d\", err);",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "3263:       case -9841:",
          "3264:         if(SSL_CONN_CONFIG(CAfile) && SSL_CONN_CONFIG(verifypeer)) {",
          "3266:                                         backend->ssl_ctx);",
          "3267:           if(result)",
          "3268:             return result;",
          "",
          "[Removed Lines]",
          "3265:           CURLcode result = verify_cert(SSL_CONN_CONFIG(CAfile), conn->data,",
          "",
          "[Added Lines]",
          "3269:           CURLcode result = verify_cert(SSL_CONN_CONFIG(CAfile), data,",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "3278:   return (ssize_t)processed;",
          "3279: }",
          "3283: {",
          "3284:   struct ssl_backend_data *backend = connssl->backend;",
          "3285:   (void)info;",
          "",
          "[Removed Lines]",
          "3281: static void *Curl_sectransp_get_internals(struct ssl_connect_data *connssl,",
          "3282:                                           CURLINFO info UNUSED_PARAM)",
          "",
          "[Added Lines]",
          "3285: static void *sectransp_get_internals(struct ssl_connect_data *connssl,",
          "3286:                                      CURLINFO info UNUSED_PARAM)",
          "",
          "---------------"
        ],
        "lib/vtls/vtls.c||lib/vtls/vtls.c": [
          "File: lib/vtls/vtls.c -> lib/vtls/vtls.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "291: #endif",
          "293: CURLcode",
          "295: {",
          "296:   CURLcode result;",
          "",
          "[Removed Lines]",
          "294: Curl_ssl_connect(struct connectdata *conn, int sockindex)",
          "",
          "[Added Lines]",
          "294: Curl_ssl_connect(struct Curl_easy *data, struct connectdata *conn,",
          "295:                  int sockindex)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "303:   }",
          "304: #endif",
          "307:     return CURLE_SSL_CONNECT_ERROR;",
          "310:   conn->ssl[sockindex].use = TRUE;",
          "311:   conn->ssl[sockindex].state = ssl_connection_negotiating;",
          "315:   if(!result)",
          "318:   return result;",
          "319: }",
          "321: CURLcode",
          "324: {",
          "325:   CURLcode result;",
          "326: #ifndef CURL_DISABLE_PROXY",
          "327:   if(conn->bits.proxy_ssl_connected[sockindex]) {",
          "328:     result = ssl_connect_init_proxy(conn, sockindex);",
          "",
          "[Removed Lines]",
          "306:   if(!ssl_prefs_check(conn->data))",
          "313:   result = Curl_ssl->connect_blocking(conn, sockindex);",
          "322: Curl_ssl_connect_nonblocking(struct connectdata *conn, int sockindex,",
          "323:                              bool *done)",
          "",
          "[Added Lines]",
          "307:   if(!ssl_prefs_check(data))",
          "314:   result = Curl_ssl->connect_blocking(data, conn, sockindex);",
          "323: Curl_ssl_connect_nonblocking(struct Curl_easy *data, struct connectdata *conn,",
          "324:                              int sockindex, bool *done)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "330:       return result;",
          "331:   }",
          "332: #endif",
          "334:     return CURLE_SSL_CONNECT_ERROR;",
          "337:   conn->ssl[sockindex].use = TRUE;",
          "339:   if(!result && *done)",
          "341:   return result;",
          "342: }",
          "348: {",
          "352: }",
          "358: {",
          "361: }",
          "368:                            void **ssl_sessionid,",
          "370:                            int sockindex)",
          "371: {",
          "372:   struct Curl_ssl_session *check;",
          "374:   size_t i;",
          "375:   long *general_age;",
          "376:   bool no_match = TRUE;",
          "",
          "[Removed Lines]",
          "333:   if(!ssl_prefs_check(conn->data))",
          "338:   result = Curl_ssl->connect_nonblocking(conn, sockindex, done);",
          "347: void Curl_ssl_sessionid_lock(struct connectdata *conn)",
          "349:   if(SSLSESSION_SHARED(conn->data))",
          "350:     Curl_share_lock(conn->data,",
          "351:                     CURL_LOCK_DATA_SSL_SESSION, CURL_LOCK_ACCESS_SINGLE);",
          "357: void Curl_ssl_sessionid_unlock(struct connectdata *conn)",
          "359:   if(SSLSESSION_SHARED(conn->data))",
          "360:     Curl_share_unlock(conn->data, CURL_LOCK_DATA_SSL_SESSION);",
          "367: bool Curl_ssl_getsessionid(struct connectdata *conn,",
          "373:   struct Curl_easy *data = conn->data;",
          "",
          "[Added Lines]",
          "335:   if(!ssl_prefs_check(data))",
          "340:   result = Curl_ssl->connect_nonblocking(data, conn, sockindex, done);",
          "349: void Curl_ssl_sessionid_lock(struct Curl_easy *data)",
          "351:   if(SSLSESSION_SHARED(data))",
          "352:     Curl_share_lock(data, CURL_LOCK_DATA_SSL_SESSION, CURL_LOCK_ACCESS_SINGLE);",
          "358: void Curl_ssl_sessionid_unlock(struct Curl_easy *data)",
          "360:   if(SSLSESSION_SHARED(data))",
          "361:     Curl_share_unlock(data, CURL_LOCK_DATA_SSL_SESSION);",
          "368: bool Curl_ssl_getsessionid(struct Curl_easy *data,",
          "369:                            struct connectdata *conn,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "461: {",
          "462:   size_t i;",
          "465:   for(i = 0; i < data->set.general_ssl.max_ssl_sessions; i++) {",
          "466:     struct Curl_ssl_session *check = &data->state.session[i];",
          "",
          "[Removed Lines]",
          "460: void Curl_ssl_delsessionid(struct connectdata *conn, void *ssl_sessionid)",
          "463:   struct Curl_easy *data = conn->data;",
          "",
          "[Added Lines]",
          "461: void Curl_ssl_delsessionid(struct Curl_easy *data, void *ssl_sessionid)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "482:                                void *ssl_sessionid,",
          "483:                                size_t idsize,",
          "484:                                int sockindex)",
          "485: {",
          "486:   size_t i;",
          "488:   struct Curl_ssl_session *store = &data->state.session[0];",
          "490:   char *clone_host;",
          "",
          "[Removed Lines]",
          "481: CURLcode Curl_ssl_addsessionid(struct connectdata *conn,",
          "",
          "[Added Lines]",
          "481: CURLcode Curl_ssl_addsessionid(struct Curl_easy *data,",
          "482:                                struct connectdata *conn,",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "625: #endif",
          "628: {",
          "629:   DEBUGASSERT((sockindex <= 1) && (sockindex >= -1));",
          "631:   conn->ssl[sockindex].state = ssl_connection_none;",
          "632: }",
          "635: {",
          "637:     return CURLE_SSL_SHUTDOWN_FAILED;",
          "",
          "[Removed Lines]",
          "627: void Curl_ssl_close(struct connectdata *conn, int sockindex)",
          "630:   Curl_ssl->close_one(conn, sockindex);",
          "634: CURLcode Curl_ssl_shutdown(struct connectdata *conn, int sockindex)",
          "636:   if(Curl_ssl->shut_down(conn, sockindex))",
          "",
          "[Added Lines]",
          "627: void Curl_ssl_close(struct Curl_easy *data, struct connectdata *conn,",
          "628:                     int sockindex)",
          "631:   Curl_ssl->close_one(data, conn, sockindex);",
          "635: CURLcode Curl_ssl_shutdown(struct Curl_easy *data, struct connectdata *conn,",
          "636:                            int sockindex)",
          "638:   if(Curl_ssl->shut_down(data, conn, sockindex))",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1080: void Curl_none_cleanup(void)",
          "1081: { }",
          "1084:                        int sockindex UNUSED_PARAM)",
          "1085: {",
          "1086:   (void)conn;",
          "1087:   (void)sockindex;",
          "1088:   return 0;",
          "",
          "[Removed Lines]",
          "1083: int Curl_none_shutdown(struct connectdata *conn UNUSED_PARAM,",
          "",
          "[Added Lines]",
          "1085: int Curl_none_shutdown(struct Curl_easy *data UNUSED_PARAM,",
          "1086:                        struct connectdata *conn UNUSED_PARAM,",
          "1089:   (void)data;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1188:   return Curl_ssl->init();",
          "1189: }",
          "1192: {",
          "1193:   if(multissl_setup(NULL))",
          "1194:     return CURLE_FAILED_INIT;",
          "1196: }",
          "1199:                                              int sockindex, bool *done)",
          "1200: {",
          "1201:   if(multissl_setup(NULL))",
          "1202:     return CURLE_FAILED_INIT;",
          "1204: }",
          "1206: static void *multissl_get_internals(struct ssl_connect_data *connssl,",
          "",
          "[Removed Lines]",
          "1191: static CURLcode multissl_connect(struct connectdata *conn, int sockindex)",
          "1195:   return Curl_ssl->connect_blocking(conn, sockindex);",
          "1198: static CURLcode multissl_connect_nonblocking(struct connectdata *conn,",
          "1203:   return Curl_ssl->connect_nonblocking(conn, sockindex, done);",
          "",
          "[Added Lines]",
          "1195: static CURLcode multissl_connect(struct Curl_easy *data,",
          "1196:                                  struct connectdata *conn, int sockindex)",
          "1200:   return Curl_ssl->connect_blocking(data, conn, sockindex);",
          "1203: static CURLcode multissl_connect_nonblocking(struct Curl_easy *data,",
          "1204:                                              struct connectdata *conn,",
          "1209:   return Curl_ssl->connect_nonblocking(data, conn, sockindex, done);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1211:   return Curl_ssl->get_internals(connssl, info);",
          "1212: }",
          "1215: {",
          "1216:   if(multissl_setup(NULL))",
          "1217:     return;",
          "1219: }",
          "1221: static const struct Curl_ssl Curl_ssl_multi = {",
          "",
          "[Removed Lines]",
          "1214: static void multissl_close(struct connectdata *conn, int sockindex)",
          "1218:   Curl_ssl->close_one(conn, sockindex);",
          "",
          "[Added Lines]",
          "1220: static void multissl_close(struct Curl_easy *data, struct connectdata *conn,",
          "1221:                            int sockindex)",
          "1225:   Curl_ssl->close_one(data, conn, sockindex);",
          "",
          "---------------"
        ],
        "lib/vtls/vtls.h||lib/vtls/vtls.h": [
          "File: lib/vtls/vtls.h -> lib/vtls/vtls.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "48:   size_t (*version)(char *buffer, size_t size);",
          "49:   int (*check_cxn)(struct connectdata *cxn);",
          "51:   bool (*data_pending)(const struct connectdata *conn,",
          "52:                        int connindex);",
          "",
          "[Removed Lines]",
          "50:   int (*shut_down)(struct connectdata *conn, int sockindex);",
          "",
          "[Added Lines]",
          "50:   int (*shut_down)(struct Curl_easy *data, struct connectdata *conn,",
          "51:                    int sockindex);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "56:                      size_t length);",
          "57:   bool (*cert_status_request)(void);",
          "61:                                   bool *done);",
          "62:   void *(*get_internals)(struct ssl_connect_data *connssl, CURLINFO info);",
          "64:   void (*close_all)(struct Curl_easy *data);",
          "65:   void (*session_free)(void *ptr);",
          "",
          "[Removed Lines]",
          "59:   CURLcode (*connect_blocking)(struct connectdata *conn, int sockindex);",
          "60:   CURLcode (*connect_nonblocking)(struct connectdata *conn, int sockindex,",
          "63:   void (*close_one)(struct connectdata *conn, int sockindex);",
          "",
          "[Added Lines]",
          "60:   CURLcode (*connect_blocking)(struct Curl_easy *data,",
          "61:                                struct connectdata *conn, int sockindex);",
          "62:   CURLcode (*connect_nonblocking)(struct Curl_easy *data,",
          "63:                                   struct connectdata *conn, int sockindex,",
          "66:   void (*close_one)(struct Curl_easy *data, struct connectdata *conn,",
          "67:                     int sockindex);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "83: int Curl_none_init(void);",
          "84: void Curl_none_cleanup(void);",
          "86: int Curl_none_check_cxn(struct connectdata *conn);",
          "87: CURLcode Curl_none_random(struct Curl_easy *data, unsigned char *entropy,",
          "88:                           size_t length);",
          "",
          "[Removed Lines]",
          "85: int Curl_none_shutdown(struct connectdata *conn, int sockindex);",
          "",
          "[Added Lines]",
          "89: int Curl_none_shutdown(struct Curl_easy *data, struct connectdata *conn,",
          "90:                        int sockindex);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "165: #ifdef USE_SSL",
          "166: int Curl_ssl_init(void);",
          "167: void Curl_ssl_cleanup(void);",
          "170:                                       int sockindex,",
          "171:                                       bool *done);",
          "174: void Curl_ssl_close_all(struct Curl_easy *data);",
          "177: CURLcode Curl_ssl_set_engine(struct Curl_easy *data, const char *engine);",
          "179: CURLcode Curl_ssl_set_engine_default(struct Curl_easy *data);",
          "",
          "[Removed Lines]",
          "168: CURLcode Curl_ssl_connect(struct connectdata *conn, int sockindex);",
          "169: CURLcode Curl_ssl_connect_nonblocking(struct connectdata *conn,",
          "175: void Curl_ssl_close(struct connectdata *conn, int sockindex);",
          "176: CURLcode Curl_ssl_shutdown(struct connectdata *conn, int sockindex);",
          "",
          "[Added Lines]",
          "173: CURLcode Curl_ssl_connect(struct Curl_easy *data, struct connectdata *conn,",
          "174:                           int sockindex);",
          "175: CURLcode Curl_ssl_connect_nonblocking(struct Curl_easy *data,",
          "176:                                       struct connectdata *conn,",
          "182: void Curl_ssl_close(struct Curl_easy *data, struct connectdata *conn,",
          "183:                     int sockindex);",
          "184: CURLcode Curl_ssl_shutdown(struct Curl_easy *data, struct connectdata *conn,",
          "185:                            int sockindex);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "208: void Curl_ssl_sessionid_lock(struct connectdata *conn);",
          "211: void Curl_ssl_sessionid_unlock(struct connectdata *conn);",
          "",
          "[Added Lines]",
          "217: void Curl_ssl_sessionid_lock(struct Curl_easy *data);",
          "220: void Curl_ssl_sessionid_unlock(struct Curl_easy *data);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "220:                            void **ssl_sessionid,",
          "222:                            int sockindex);",
          "",
          "[Removed Lines]",
          "219: bool Curl_ssl_getsessionid(struct connectdata *conn,",
          "",
          "[Added Lines]",
          "228: bool Curl_ssl_getsessionid(struct Curl_easy *data,",
          "229:                            struct connectdata *conn,",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "229:                                void *ssl_sessionid,",
          "230:                                size_t idsize,",
          "231:                                int sockindex);",
          "",
          "[Removed Lines]",
          "228: CURLcode Curl_ssl_addsessionid(struct connectdata *conn,",
          "",
          "[Added Lines]",
          "238: CURLcode Curl_ssl_addsessionid(struct Curl_easy *data,",
          "239:                                struct connectdata *conn,",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "248: CURLcode Curl_ssl_random(struct Curl_easy *data, unsigned char *buffer,",
          "",
          "[Removed Lines]",
          "245: void Curl_ssl_delsessionid(struct connectdata *conn, void *ssl_sessionid);",
          "",
          "[Added Lines]",
          "256: void Curl_ssl_delsessionid(struct Curl_easy *data, void *ssl_sessionid);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "268: #define Curl_ssl_init() 1",
          "269: #define Curl_ssl_cleanup() Curl_nop_stmt",
          "271: #define Curl_ssl_close_all(x) Curl_nop_stmt",
          "274: #define Curl_ssl_set_engine(x,y) CURLE_NOT_BUILT_IN",
          "275: #define Curl_ssl_set_engine_default(x) CURLE_NOT_BUILT_IN",
          "276: #define Curl_ssl_engines_list(x) NULL",
          "",
          "[Removed Lines]",
          "270: #define Curl_ssl_connect(x,y) CURLE_NOT_BUILT_IN",
          "272: #define Curl_ssl_close(x,y) Curl_nop_stmt",
          "273: #define Curl_ssl_shutdown(x,y) CURLE_NOT_BUILT_IN",
          "",
          "[Added Lines]",
          "281: #define Curl_ssl_connect(x,y,z) CURLE_NOT_BUILT_IN",
          "283: #define Curl_ssl_close(x,y,z) Curl_nop_stmt",
          "284: #define Curl_ssl_shutdown(x,y,z) CURLE_NOT_BUILT_IN",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "280: #define Curl_ssl_data_pending(x,y) 0",
          "281: #define Curl_ssl_check_cxn(x) 0",
          "282: #define Curl_ssl_free_certinfo(x) Curl_nop_stmt",
          "284: #define Curl_ssl_kill_session(x) Curl_nop_stmt",
          "285: #define Curl_ssl_random(x,y,z) ((void)x, CURLE_NOT_BUILT_IN)",
          "286: #define Curl_ssl_cert_status_request() FALSE",
          "",
          "[Removed Lines]",
          "283: #define Curl_ssl_connect_nonblocking(x,y,z) CURLE_NOT_BUILT_IN",
          "",
          "[Added Lines]",
          "294: #define Curl_ssl_connect_nonblocking(x,y,z,w) CURLE_NOT_BUILT_IN",
          "",
          "---------------"
        ],
        "lib/vtls/wolfssl.c||lib/vtls/wolfssl.c": [
          "File: lib/vtls/wolfssl.c -> lib/vtls/wolfssl.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "219: static CURLcode",
          "221:                      int sockindex)",
          "222: {",
          "223:   char *ciphers;",
          "225:   struct ssl_connect_data *connssl = &conn->ssl[sockindex];",
          "226:   struct ssl_backend_data *backend = connssl->backend;",
          "227:   SSL_METHOD* req_method = NULL;",
          "",
          "[Removed Lines]",
          "220: wolfssl_connect_step1(struct connectdata *conn,",
          "224:   struct Curl_easy *data = conn->data;",
          "",
          "[Added Lines]",
          "220: wolfssl_connect_step1(struct Curl_easy *data, struct connectdata *conn,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "516:   if(SSL_SET_OPTION(primary.sessionid)) {",
          "517:     void *ssl_sessionid = NULL;",
          "522:       if(!SSL_set_session(backend->handle, ssl_sessionid)) {",
          "523:         char error_buffer[WOLFSSL_MAX_ERROR_SZ];",
          "525:         failf(data, \"SSL: SSL_set_session failed: %s\",",
          "526:               ERR_error_string(SSL_get_error(backend->handle, 0),",
          "527:                                error_buffer));",
          "",
          "[Removed Lines]",
          "519:     Curl_ssl_sessionid_lock(conn);",
          "520:     if(!Curl_ssl_getsessionid(conn, &ssl_sessionid, NULL, sockindex)) {",
          "524:         Curl_ssl_sessionid_unlock(conn);",
          "",
          "[Added Lines]",
          "518:     Curl_ssl_sessionid_lock(data);",
          "519:     if(!Curl_ssl_getsessionid(data, conn, &ssl_sessionid, NULL, sockindex)) {",
          "523:         Curl_ssl_sessionid_unlock(data);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "531:       infof(data, \"SSL re-using session ID\\n\");",
          "532:     }",
          "534:   }",
          "",
          "[Removed Lines]",
          "533:     Curl_ssl_sessionid_unlock(conn);",
          "",
          "[Added Lines]",
          "532:     Curl_ssl_sessionid_unlock(data);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "547: static CURLcode",
          "549:                      int sockindex)",
          "550: {",
          "551:   int ret = -1;",
          "553:   struct ssl_connect_data *connssl = &conn->ssl[sockindex];",
          "554:   struct ssl_backend_data *backend = connssl->backend;",
          "555: #ifndef CURL_DISABLE_PROXY",
          "",
          "[Removed Lines]",
          "548: wolfssl_connect_step2(struct connectdata *conn,",
          "552:   struct Curl_easy *data = conn->data;",
          "",
          "[Added Lines]",
          "547: wolfssl_connect_step2(struct Curl_easy *data, struct connectdata *conn,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "763: static CURLcode",
          "765:                      int sockindex)",
          "766: {",
          "767:   CURLcode result = CURLE_OK;",
          "769:   struct ssl_connect_data *connssl = &conn->ssl[sockindex];",
          "770:   struct ssl_backend_data *backend = connssl->backend;",
          "",
          "[Removed Lines]",
          "764: wolfssl_connect_step3(struct connectdata *conn,",
          "768:   struct Curl_easy *data = conn->data;",
          "",
          "[Added Lines]",
          "762: wolfssl_connect_step3(struct Curl_easy *data, struct connectdata *conn,",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "779:     our_ssl_sessionid = SSL_get_session(backend->handle);",
          "783:                                       sockindex));",
          "784:     if(incache) {",
          "785:       if(old_ssl_sessionid != our_ssl_sessionid) {",
          "786:         infof(data, \"old SSL session ID is stale, removing\\n\");",
          "788:         incache = FALSE;",
          "789:       }",
          "790:     }",
          "792:     if(!incache) {",
          "794:                                      0 /* unknown size */, sockindex);",
          "795:       if(result) {",
          "797:         failf(data, \"failed to store ssl session\");",
          "798:         return result;",
          "799:       }",
          "800:     }",
          "802:   }",
          "804:   connssl->connecting_state = ssl_connect_done;",
          "",
          "[Removed Lines]",
          "781:     Curl_ssl_sessionid_lock(conn);",
          "782:     incache = !(Curl_ssl_getsessionid(conn, &old_ssl_sessionid, NULL,",
          "787:         Curl_ssl_delsessionid(conn, old_ssl_sessionid);",
          "793:       result = Curl_ssl_addsessionid(conn, our_ssl_sessionid,",
          "796:         Curl_ssl_sessionid_unlock(conn);",
          "801:     Curl_ssl_sessionid_unlock(conn);",
          "",
          "[Added Lines]",
          "778:     Curl_ssl_sessionid_lock(data);",
          "779:     incache = !(Curl_ssl_getsessionid(data, conn, &old_ssl_sessionid, NULL,",
          "784:         Curl_ssl_delsessionid(data, old_ssl_sessionid);",
          "790:       result = Curl_ssl_addsessionid(data, conn, our_ssl_sessionid,",
          "793:         Curl_ssl_sessionid_unlock(data);",
          "798:     Curl_ssl_sessionid_unlock(data);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "840:   return rc;",
          "841: }",
          "844: {",
          "845:   struct ssl_connect_data *connssl = &conn->ssl[sockindex];",
          "846:   struct ssl_backend_data *backend = connssl->backend;",
          "848:   if(backend->handle) {",
          "849:     (void)SSL_shutdown(backend->handle);",
          "850:     SSL_free(backend->handle);",
          "",
          "[Removed Lines]",
          "843: static void wolfssl_close(struct connectdata *conn, int sockindex)",
          "",
          "[Added Lines]",
          "840: static void wolfssl_close(struct Curl_easy *data, struct connectdata *conn,",
          "841:                           int sockindex)",
          "846:   (void) data;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "946: {",
          "947:   int retval = 0;",
          "948:   struct ssl_connect_data *connssl = &conn->ssl[sockindex];",
          "949:   struct ssl_backend_data *backend = connssl->backend;",
          "951:   if(backend->handle) {",
          "952:     SSL_free(backend->handle);",
          "953:     backend->handle = NULL;",
          "",
          "[Removed Lines]",
          "945: static int wolfssl_shutdown(struct connectdata *conn, int sockindex)",
          "",
          "[Added Lines]",
          "945: static int wolfssl_shutdown(struct Curl_easy *data, struct connectdata *conn,",
          "946:                             int sockindex)",
          "952:   (void) data;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "959: static CURLcode",
          "961:                       int sockindex,",
          "962:                       bool nonblocking,",
          "963:                       bool *done)",
          "964: {",
          "965:   CURLcode result;",
          "967:   struct ssl_connect_data *connssl = &conn->ssl[sockindex];",
          "968:   curl_socket_t sockfd = conn->sock[sockindex];",
          "969:   int what;",
          "",
          "[Removed Lines]",
          "960: wolfssl_connect_common(struct connectdata *conn,",
          "966:   struct Curl_easy *data = conn->data;",
          "",
          "[Added Lines]",
          "963: wolfssl_connect_common(struct Curl_easy *data,",
          "964:                       struct connectdata *conn,",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "984:       return CURLE_OPERATION_TIMEDOUT;",
          "985:     }",
          "988:     if(result)",
          "989:       return result;",
          "990:   }",
          "",
          "[Removed Lines]",
          "987:     result = wolfssl_connect_step1(conn, sockindex);",
          "",
          "[Added Lines]",
          "990:     result = wolfssl_connect_step1(data, conn, sockindex);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1043:     if(result || (nonblocking &&",
          "1044:                   (ssl_connect_2 == connssl->connecting_state ||",
          "1045:                    ssl_connect_2_reading == connssl->connecting_state ||",
          "",
          "[Removed Lines]",
          "1042:     result = wolfssl_connect_step2(conn, sockindex);",
          "",
          "[Added Lines]",
          "1045:     result = wolfssl_connect_step2(data, conn, sockindex);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1050:   if(ssl_connect_3 == connssl->connecting_state) {",
          "1052:     if(result)",
          "1053:       return result;",
          "1054:   }",
          "",
          "[Removed Lines]",
          "1051:     result = wolfssl_connect_step3(conn, sockindex);",
          "",
          "[Added Lines]",
          "1054:     result = wolfssl_connect_step3(data, conn, sockindex);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1069: }",
          "1073:                                             int sockindex, bool *done)",
          "1074: {",
          "1076: }",
          "1080: {",
          "1081:   CURLcode result;",
          "1082:   bool done = FALSE;",
          "1085:   if(result)",
          "1086:     return result;",
          "",
          "[Removed Lines]",
          "1072: static CURLcode wolfssl_connect_nonblocking(struct connectdata *conn,",
          "1075:   return wolfssl_connect_common(conn, sockindex, TRUE, done);",
          "1079: static CURLcode wolfssl_connect(struct connectdata *conn, int sockindex)",
          "1084:   result = wolfssl_connect_common(conn, sockindex, FALSE, &done);",
          "",
          "[Added Lines]",
          "1075: static CURLcode wolfssl_connect_nonblocking(struct Curl_easy *data,",
          "1076:                                             struct connectdata *conn,",
          "1079:   return wolfssl_connect_common(data, conn, sockindex, TRUE, done);",
          "1083: static CURLcode wolfssl_connect(struct Curl_easy *data,",
          "1084:                                 struct connectdata *conn, int sockindex)",
          "1089:   result = wolfssl_connect_common(data, conn, sockindex, FALSE, &done);",
          "",
          "---------------"
        ]
      }
    }
  ]
}