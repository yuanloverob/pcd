{
  "cve_id": "CVE-2015-0278",
  "cve_desc": "libuv before 0.10.34 does not properly drop group privileges, which allows context-dependent attackers to gain privileges via unspecified vectors.",
  "repo": "libuv/libuv",
  "patch_hash": "66ab38918c911bcff025562cf06237d7fedaba0c",
  "patch_info": {
    "commit_hash": "66ab38918c911bcff025562cf06237d7fedaba0c",
    "repo": "libuv/libuv",
    "commit_url": "https://github.com/libuv/libuv/commit/66ab38918c911bcff025562cf06237d7fedaba0c",
    "files": [
      "src/unix/process.c"
    ],
    "message": "unix: call setgoups before calling setuid/setgid\n\nPartial fix for #1093",
    "before_after_code_files": [
      "src/unix/process.c||src/unix/process.c"
    ]
  },
  "patch_diff": {
    "src/unix/process.c||src/unix/process.c": [
      "File: src/unix/process.c -> src/unix/process.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "330:     _exit(127);",
      "331:   }",
      "333:   if ((options->flags & UV_PROCESS_SETGID) && setgid(options->gid)) {",
      "334:     uv__write_int(error_fd, -errno);",
      "335:     perror(\"setgid()\");",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "333:   if (options->flags & (UV_PROCESS_SETUID | UV_PROCESS_SETGID)) {",
      "341:     SAVE_ERRNO(setgroups(0, NULL));",
      "342:   }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "e5bdef9b598c5f5cccebace42ee78c9d819ba277",
      "candidate_info": {
        "commit_hash": "e5bdef9b598c5f5cccebace42ee78c9d819ba277",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/e5bdef9b598c5f5cccebace42ee78c9d819ba277",
        "files": [
          "include/uv.h",
          "src/unix/fsevents.c",
          "src/unix/kqueue.c",
          "src/unix/linux-inotify.c",
          "src/unix/sunos.c",
          "src/win/fs-event.c"
        ],
        "message": "fsevent: rename filename field to path\n\nAlso, it's now considered private.",
        "before_after_code_files": [
          "include/uv.h||include/uv.h",
          "src/unix/fsevents.c||src/unix/fsevents.c",
          "src/unix/kqueue.c||src/unix/kqueue.c",
          "src/unix/linux-inotify.c||src/unix/linux-inotify.c",
          "src/unix/sunos.c||src/unix/sunos.c",
          "src/win/fs-event.c||src/win/fs-event.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/uv.h||include/uv.h": [
          "File: include/uv.h -> include/uv.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1894: struct uv_fs_event_s {",
          "1895:   UV_HANDLE_FIELDS",
          "1897:   UV_FS_EVENT_PRIVATE_FIELDS",
          "1898: };",
          "",
          "[Removed Lines]",
          "1896:   char* filename;",
          "",
          "[Added Lines]",
          "1897:   char* path;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2030: UV_EXTERN int uv_fs_event_start(uv_fs_event_t* handle,",
          "2031:                                 uv_fs_event_cb cb,",
          "2033:                                 unsigned int flags);",
          "2035: UV_EXTERN int uv_fs_event_stop(uv_fs_event_t* handle);",
          "",
          "[Removed Lines]",
          "2032:                                 const char* filename,",
          "",
          "[Added Lines]",
          "2033:                                 const char* path,",
          "",
          "---------------"
        ],
        "src/unix/fsevents.c||src/unix/fsevents.c": [
          "File: src/unix/fsevents.c -> src/unix/fsevents.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "795:     return err;",
          "799:   if (handle->realpath == NULL)",
          "800:     return -errno;",
          "801:   handle->realpath_len = strlen(handle->realpath);",
          "",
          "[Removed Lines]",
          "798:   handle->realpath = realpath(handle->filename, NULL);",
          "",
          "[Added Lines]",
          "798:   handle->realpath = realpath(handle->path, NULL);",
          "",
          "---------------"
        ],
        "src/unix/kqueue.c||src/unix/kqueue.c": [
          "File: src/unix/kqueue.c -> src/unix/kqueue.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "332: int uv_fs_event_start(uv_fs_event_t* handle,",
          "333:                       uv_fs_event_cb cb,",
          "335:                       unsigned int flags) {",
          "336: #if defined(__APPLE__)",
          "337:   struct stat statbuf;",
          "",
          "[Removed Lines]",
          "334:                       const char* filename,",
          "",
          "[Added Lines]",
          "334:                       const char* path,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "342:     return -EINVAL;",
          "346:   if (fd == -1)",
          "347:     return -errno;",
          "349:   uv__handle_start(handle);",
          "350:   uv__io_init(&handle->event_watcher, uv__fs_event, fd);",
          "352:   handle->cb = cb;",
          "354: #if defined(__APPLE__)",
          "",
          "[Removed Lines]",
          "345:   fd = open(filename, O_RDONLY);",
          "351:   handle->filename = strdup(filename);",
          "",
          "[Added Lines]",
          "345:   fd = open(path, O_RDONLY);",
          "351:   handle->path = strdup(path);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "388:   uv__io_stop(handle->loop, &handle->event_watcher, UV__POLLIN);",
          "394:   uv__close(handle->event_watcher.fd);",
          "395:   handle->event_watcher.fd = -1;",
          "",
          "[Removed Lines]",
          "391:   free(handle->filename);",
          "392:   handle->filename = NULL;",
          "",
          "[Added Lines]",
          "391:   free(handle->path);",
          "392:   handle->path = NULL;",
          "",
          "---------------"
        ],
        "src/unix/linux-inotify.c||src/unix/linux-inotify.c": [
          "File: src/unix/linux-inotify.c -> src/unix/linux-inotify.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "219: no_insert:",
          "220:   uv__handle_start(handle);",
          "221:   QUEUE_INSERT_TAIL(&w->watchers, &handle->watchers);",
          "223:   handle->cb = cb;",
          "224:   handle->wd = wd;",
          "",
          "[Removed Lines]",
          "222:   handle->filename = w->path;",
          "",
          "[Added Lines]",
          "222:   handle->path = w->path;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "237:   assert(w != NULL);",
          "239:   handle->wd = -1;",
          "241:   uv__handle_stop(handle);",
          "242:   QUEUE_REMOVE(&handle->watchers);",
          "",
          "[Removed Lines]",
          "240:   handle->filename = NULL;",
          "",
          "[Added Lines]",
          "240:   handle->path = NULL;",
          "",
          "---------------"
        ],
        "src/unix/sunos.c||src/unix/sunos.c": [
          "File: src/unix/sunos.c -> src/unix/sunos.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "392: int uv_fs_event_start(uv_fs_event_t* handle,",
          "393:                       uv_fs_event_cb cb,",
          "395:                       unsigned int flags) {",
          "396:   int portfd;",
          "397:   int first_run;",
          "",
          "[Removed Lines]",
          "394:                       const char* filename,",
          "",
          "[Added Lines]",
          "394:                       const char* path,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "410:   }",
          "412:   uv__handle_start(handle);",
          "414:   handle->fd = PORT_UNUSED;",
          "415:   handle->cb = cb;",
          "417:   memset(&handle->fo, 0, sizeof handle->fo);",
          "419:   err = uv__fs_event_rearm(handle);",
          "420:   if (err != 0)",
          "421:     return err;",
          "",
          "[Removed Lines]",
          "413:   handle->filename = strdup(filename);",
          "418:   handle->fo.fo_name = handle->filename;",
          "",
          "[Added Lines]",
          "413:   handle->path = strdup(path);",
          "418:   handle->fo.fo_name = handle->path;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "440:   }",
          "442:   handle->fd = PORT_DELETED;",
          "445:   handle->fo.fo_name = NULL;",
          "446:   uv__handle_stop(handle);",
          "",
          "[Removed Lines]",
          "443:   free(handle->filename);",
          "444:   handle->filename = NULL;",
          "",
          "[Added Lines]",
          "443:   free(handle->path);",
          "444:   handle->path = NULL;",
          "",
          "---------------"
        ],
        "src/win/fs-event.c||src/win/fs-event.c": [
          "File: src/win/fs-event.c -> src/win/fs-event.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "127: int uv_fs_event_start(uv_fs_event_t* handle,",
          "128:                       uv_fs_event_cb cb,",
          "130:                       unsigned int flags) {",
          "131:   int name_size, is_path_dir;",
          "132:   DWORD attr, last_error;",
          "134:   WCHAR short_path[MAX_PATH];",
          "136:   if (uv__is_active(handle))",
          "137:     return UV_EINVAL;",
          "139:   handle->cb = cb;",
          "142:     uv_fatal_error(ERROR_OUTOFMEMORY, \"malloc\");",
          "143:   }",
          "145:   uv__handle_start(handle);",
          "151:     uv_fatal_error(ERROR_OUTOFMEMORY, \"malloc\");",
          "152:   }",
          "155:       name_size / sizeof(WCHAR))) {",
          "156:     return uv_translate_sys_error(GetLastError());",
          "157:   }",
          "161:   if (attr == INVALID_FILE_ATTRIBUTES) {",
          "162:     last_error = GetLastError();",
          "163:     goto error;",
          "",
          "[Removed Lines]",
          "129:                       const char* filename,",
          "133:   WCHAR* dir = NULL, *dir_to_watch, *filenamew = NULL;",
          "140:   handle->filename = strdup(filename);",
          "141:   if (!handle->filename) {",
          "148:   name_size = uv_utf8_to_utf16(filename, NULL, 0) * sizeof(WCHAR);",
          "149:   filenamew = (WCHAR*)malloc(name_size);",
          "150:   if (!filenamew) {",
          "154:   if (!uv_utf8_to_utf16(filename, filenamew,",
          "160:   attr = GetFileAttributesW(filenamew);",
          "",
          "[Added Lines]",
          "129:                       const char* path,",
          "133:   WCHAR* dir = NULL, *dir_to_watch, *pathw = NULL;",
          "140:   handle->path = strdup(path);",
          "141:   if (!handle->path) {",
          "148:   name_size = uv_utf8_to_utf16(path, NULL, 0) * sizeof(WCHAR);",
          "149:   pathw = (WCHAR*)malloc(name_size);",
          "150:   if (!pathw) {",
          "154:   if (!uv_utf8_to_utf16(path, pathw,",
          "160:   attr = GetFileAttributesW(pathw);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "166:   is_path_dir = (attr & FILE_ATTRIBUTE_DIRECTORY) ? 1 : 0;",
          "168:   if (is_path_dir) {",
          "172:   } else {",
          "180:       last_error = GetLastError();",
          "181:       goto error;",
          "182:     }",
          "185:       last_error = GetLastError();",
          "186:       goto error;",
          "187:     }",
          "",
          "[Removed Lines]",
          "170:     handle->dirw = filenamew;",
          "171:     dir_to_watch = filenamew;",
          "179:     if (!GetShortPathNameW(filenamew, short_path, ARRAY_SIZE(short_path))) {",
          "184:     if (uv_split_path(filenamew, &dir, &handle->filew) != 0) {",
          "",
          "[Added Lines]",
          "170:     handle->dirw = pathw;",
          "171:     dir_to_watch = pathw;",
          "179:     if (!GetShortPathNameW(pathw, short_path, ARRAY_SIZE(short_path))) {",
          "184:     if (uv_split_path(pathw, &dir, &handle->filew) != 0) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "192:     }",
          "194:     dir_to_watch = dir;",
          "197:   }",
          "199:   handle->dir_handle = CreateFileW(dir_to_watch,",
          "",
          "[Removed Lines]",
          "195:     free(filenamew);",
          "196:     filenamew = NULL;",
          "",
          "[Added Lines]",
          "195:     free(pathw);",
          "196:     pathw = NULL;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "257:   return 0;",
          "259: error:",
          "263:   }",
          "265:   if (handle->filew) {",
          "",
          "[Removed Lines]",
          "260:   if (handle->filename) {",
          "261:     free(handle->filename);",
          "262:     handle->filename = NULL;",
          "",
          "[Added Lines]",
          "260:   if (handle->path) {",
          "261:     free(handle->path);",
          "262:     handle->path = NULL;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "272:     handle->short_filew = NULL;",
          "273:   }",
          "277:   if (handle->dir_handle != INVALID_HANDLE_VALUE) {",
          "278:     CloseHandle(handle->dir_handle);",
          "",
          "[Removed Lines]",
          "275:   free(filenamew);",
          "",
          "[Added Lines]",
          "275:   free(pathw);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "309:     handle->short_filew = NULL;",
          "310:   }",
          "315:   }",
          "317:   if (handle->dirw) {",
          "",
          "[Removed Lines]",
          "312:   if (handle->filename) {",
          "313:     free(handle->filename);",
          "314:     handle->filename = NULL;",
          "",
          "[Added Lines]",
          "312:   if (handle->path) {",
          "313:     free(handle->path);",
          "314:     handle->path = NULL;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4bdb7d837ad99e59974274bb87fc10a35cbc1bf1",
      "candidate_info": {
        "commit_hash": "4bdb7d837ad99e59974274bb87fc10a35cbc1bf1",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/4bdb7d837ad99e59974274bb87fc10a35cbc1bf1",
        "files": [
          "src/unix/aix.c"
        ],
        "message": "aix: fix build breakage introduced in 3ee4d3f\n\nPossibly, anyway - this change is untested. Without it, libuv\ndefinitely won't build on AIX though.",
        "before_after_code_files": [
          "src/unix/aix.c||src/unix/aix.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/unix/aix.c||src/unix/aix.c": [
          "File: src/unix/aix.c -> src/unix/aix.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "318:     memcpy(flg.ifr_name, p->ifr_name, sizeof(flg.ifr_name));",
          "319:     if (ioctl(sockfd, SIOCGIFFLAGS, &flg) == -1) {",
          "320:       close(sockfd);",
          "322:     }",
          "324:     if (!(flg.ifr_flags & IFF_UP && flg.ifr_flags & IFF_RUNNING))",
          "",
          "[Removed Lines]",
          "321:       return uv__new_artificial_error(UV_ENOSYS);",
          "",
          "[Added Lines]",
          "321:       return -ENOSYS;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "349:     memcpy(flg.ifr_name, p->ifr_name, sizeof(flg.ifr_name));",
          "350:     if (ioctl(sockfd, SIOCGIFFLAGS, &flg) == -1) {",
          "351:       close(sockfd);",
          "353:     }",
          "355:     if (!(flg.ifr_flags & IFF_UP && flg.ifr_flags & IFF_RUNNING))",
          "",
          "[Removed Lines]",
          "352:       return uv__new_artificial_error(UV_ENOSYS);",
          "",
          "[Added Lines]",
          "352:       return -ENOSYS;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c438e739a8a593d75060cf7b01546e32fb4df4c3",
      "candidate_info": {
        "commit_hash": "c438e739a8a593d75060cf7b01546e32fb4df4c3",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/c438e739a8a593d75060cf7b01546e32fb4df4c3",
        "files": [
          "src/unix/internal.h"
        ],
        "message": "fsevents: remove kFSEventStreamCreateFlagNoDefer polyfill\n\nThe kFSEventStreamCreateFlagNoDefer flag is already\ndefined in CarbonCore/FSEvents.h since OS X 10.5.\n\nFixes #1000.",
        "before_after_code_files": [
          "src/unix/internal.h||src/unix/internal.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/unix/internal.h||src/unix/internal.h": [
          "File: src/unix/internal.h -> src/unix/internal.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "244: #ifndef MAC_OS_X_VERSION_10_7",
          "247: static const int kFSEventStreamCreateFlagFileEvents = 0x00000010;",
          "248: static const int kFSEventStreamEventFlagItemCreated = 0x00000100;",
          "249: static const int kFSEventStreamEventFlagItemRemoved = 0x00000200;",
          "",
          "[Removed Lines]",
          "246: static const int kFSEventStreamCreateFlagNoDefer = 0x00000002;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1830a3cd91f225bfe091408695be47b8964ead0a",
      "candidate_info": {
        "commit_hash": "1830a3cd91f225bfe091408695be47b8964ead0a",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/1830a3cd91f225bfe091408695be47b8964ead0a",
        "files": [
          "test/test-barrier.c"
        ],
        "message": "Revert \"test: make barrier test more rigorous\"\n\nThis reverts commit 6c6c9221679c6cc66ac30fbad5ce086658113ea3.\n\nIt introduced a race condition which made tests fail on Linux and SunOS.\n\nCloses #1340",
        "before_after_code_files": [
          "test/test-barrier.c||test/test-barrier.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/test-barrier.c||test/test-barrier.c": [
          "File: test/test-barrier.c -> test/test-barrier.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "41:     uv_sleep(c->delay);",
          "43:   c->worker_barrier_wait_rval = uv_barrier_wait(&c->barrier);",
          "48: }",
          "",
          "[Removed Lines]",
          "44:   if (c->worker_barrier_wait_rval == 1) {",
          "45:     uv_barrier_destroy(&c->barrier);",
          "46:     ASSERT(c->main_barrier_wait_rval == 0);",
          "47:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "53:   worker_config wc;",
          "55:   memset(&wc, 0, sizeof(wc));",
          "59:   ASSERT(0 == uv_barrier_init(&wc.barrier, 2));",
          "60:   ASSERT(0 == uv_thread_create(&thread, worker, &wc));",
          "62:   uv_sleep(100);",
          "64:   wc.main_barrier_wait_rval = uv_barrier_wait(&wc.barrier);",
          "70:   ASSERT(0 == uv_thread_join(&thread));",
          "71:   ASSERT(1 == (wc.main_barrier_wait_rval ^ wc.worker_barrier_wait_rval));",
          "73:   return 0;",
          "",
          "[Removed Lines]",
          "56:   wc.main_barrier_wait_rval = -1;",
          "57:   wc.worker_barrier_wait_rval = -1;",
          "65:   if (wc.main_barrier_wait_rval == 1) {",
          "66:     uv_barrier_destroy(&wc.barrier);",
          "67:     ASSERT(wc.worker_barrier_wait_rval == 0);",
          "68:   }",
          "",
          "[Added Lines]",
          "60:   uv_barrier_destroy(&wc.barrier);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "81:   memset(&wc, 0, sizeof(wc));",
          "82:   wc.delay = 100;",
          "86:   ASSERT(0 == uv_barrier_init(&wc.barrier, 2));",
          "87:   ASSERT(0 == uv_thread_create(&thread, worker, &wc));",
          "89:   wc.main_barrier_wait_rval = uv_barrier_wait(&wc.barrier);",
          "95:   ASSERT(0 == uv_thread_join(&thread));",
          "96:   ASSERT(1 == (wc.main_barrier_wait_rval ^ wc.worker_barrier_wait_rval));",
          "98:   return 0;",
          "",
          "[Removed Lines]",
          "83:   wc.main_barrier_wait_rval = -1;",
          "84:   wc.worker_barrier_wait_rval = -1;",
          "90:   if (wc.main_barrier_wait_rval == 1) {",
          "91:     uv_barrier_destroy(&wc.barrier);",
          "92:     ASSERT(wc.worker_barrier_wait_rval == 0);",
          "93:   }",
          "",
          "[Added Lines]",
          "81:   uv_barrier_destroy(&wc.barrier);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "104:   worker_config wc;",
          "106:   memset(&wc, 0, sizeof(wc));",
          "110:   ASSERT(0 == uv_barrier_init(&wc.barrier, 2));",
          "111:   ASSERT(0 == uv_thread_create(&thread, worker, &wc));",
          "113:   wc.main_barrier_wait_rval = uv_barrier_wait(&wc.barrier);",
          "119:   ASSERT(0 == uv_thread_join(&thread));",
          "120:   ASSERT(1 == (wc.main_barrier_wait_rval ^ wc.worker_barrier_wait_rval));",
          "122:   return 0;",
          "",
          "[Removed Lines]",
          "107:   wc.main_barrier_wait_rval = -1;",
          "108:   wc.worker_barrier_wait_rval = -1;",
          "114:   if (wc.main_barrier_wait_rval == 1) {",
          "115:     uv_barrier_destroy(&wc.barrier);",
          "116:     ASSERT(wc.worker_barrier_wait_rval == 0);",
          "117:   }",
          "",
          "[Added Lines]",
          "101:   uv_barrier_destroy(&wc.barrier);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "861de3d71d40bdd22712f0079cd38f41be75010d",
      "candidate_info": {
        "commit_hash": "861de3d71d40bdd22712f0079cd38f41be75010d",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/861de3d71d40bdd22712f0079cd38f41be75010d",
        "files": [
          "src/unix/linux-core.c"
        ],
        "message": "linux: try epoll_pwait if epoll_wait is missing\n\nIt seems that epoll_wait is implemented in glibc in terms of epoll_pwait and\nnew architectures (like arm64) do not implement the epoll_wait syscall at all.\nSo if epoll_wait errors with ENOSYS, just call epoll_pwait.",
        "before_after_code_files": [
          "src/unix/linux-core.c||src/unix/linux-core.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/unix/linux-core.c||src/unix/linux-core.c": [
          "File: src/unix/linux-core.c -> src/unix/linux-core.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "149:   int fd;",
          "150:   int op;",
          "151:   int i;",
          "153:   if (loop->nfds == 0) {",
          "154:     assert(QUEUE_EMPTY(&loop->watcher_queue));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "152:   static int no_epoll_wait;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "197:   for (;;) {",
          "",
          "[Removed Lines]",
          "198:     nfds = uv__epoll_wait(loop->backend_fd,",
          "199:                           events,",
          "200:                           ARRAY_SIZE(events),",
          "201:                           timeout);",
          "",
          "[Added Lines]",
          "199:     if (!no_epoll_wait) {",
          "200:       nfds = uv__epoll_wait(loop->backend_fd,",
          "201:                             events,",
          "202:                             ARRAY_SIZE(events),",
          "203:                             timeout);",
          "204:       if (nfds == -1 && errno == ENOSYS) {",
          "205:         no_epoll_wait = 1;",
          "206:         continue;",
          "207:       }",
          "208:     } else {",
          "209:       nfds = uv__epoll_pwait(loop->backend_fd,",
          "210:                              events,",
          "211:                              ARRAY_SIZE(events),",
          "212:                              timeout,",
          "213:                              NULL);",
          "214:     }",
          "",
          "---------------"
        ]
      }
    }
  ]
}