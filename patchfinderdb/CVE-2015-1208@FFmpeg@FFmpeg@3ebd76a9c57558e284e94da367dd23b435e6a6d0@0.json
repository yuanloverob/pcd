{
  "cve_id": "CVE-2015-1208",
  "cve_desc": "Integer underflow in the mov_read_default function in libavformat/mov.c in FFmpeg before 2.4.6 allows remote attackers to obtain sensitive information from heap and/or stack memory via a crafted MP4 file.",
  "repo": "FFmpeg/FFmpeg",
  "patch_hash": "3ebd76a9c57558e284e94da367dd23b435e6a6d0",
  "patch_info": {
    "commit_hash": "3ebd76a9c57558e284e94da367dd23b435e6a6d0",
    "repo": "FFmpeg/FFmpeg",
    "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/3ebd76a9c57558e284e94da367dd23b435e6a6d0",
    "files": [
      "libavformat/mov.c"
    ],
    "message": "mov: Fix negative size calculation in mov_read_default().\n\nThe previous code assumed if an atom was marked with a 64-bit\nsize extension, it actually had that data available. The new\ncode verfies there's enough data in the atom for this to be\ndone.\n\nFailure to verify causes total_size > atom.size which will\nresult in negative size calculations later on.\n\nFound-by: Paul Mehta <paul@paulmehta.com>\nSigned-off-by: Dale Curtis <dalecurtis@chromium.org>\nSigned-off-by: Michael Niedermayer <michaelni@gmx.at>",
    "before_after_code_files": [
      "libavformat/mov.c||libavformat/mov.c"
    ]
  },
  "patch_diff": {
    "libavformat/mov.c||libavformat/mov.c": [
      "File: libavformat/mov.c -> libavformat/mov.c"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "13d4d8a9c6bb6acdec8be0638299d0ce08bfd061",
      "candidate_info": {
        "commit_hash": "13d4d8a9c6bb6acdec8be0638299d0ce08bfd061",
        "repo": "FFmpeg/FFmpeg",
        "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/13d4d8a9c6bb6acdec8be0638299d0ce08bfd061",
        "files": [
          "libavformat/mov.c"
        ],
        "message": "mov: Fix negative size calculation in mov_read_default().\n\nThe previous code assumed if an atom was marked with a 64-bit\nsize extension, it actually had that data available. The new\ncode verfies there's enough data in the atom for this to be\ndone.\n\nFailure to verify causes total_size > atom.size which will\nresult in negative size calculations later on.\n\nFound-by: Paul Mehta <paul@paulmehta.com>\nSigned-off-by: Dale Curtis <dalecurtis@chromium.org>\nSigned-off-by: Michael Niedermayer <michaelni@gmx.at>\n(cherry picked from commit 3ebd76a9c57558e284e94da367dd23b435e6a6d0)\n\nSigned-off-by: Michael Niedermayer <michaelni@gmx.at>",
        "before_after_code_files": [
          "libavformat/mov.c||libavformat/mov.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "libavformat/mov.c||libavformat/mov.c"
          ],
          "candidate": [
            "libavformat/mov.c||libavformat/mov.c"
          ]
        }
      },
      "candidate_diff": {
        "libavformat/mov.c||libavformat/mov.c": [
          "File: libavformat/mov.c -> libavformat/mov.c"
        ]
      }
    },
    {
      "candidate_hash": "27a910a8575879d08edaae9d8956ab6d1821044a",
      "candidate_info": {
        "commit_hash": "27a910a8575879d08edaae9d8956ab6d1821044a",
        "repo": "FFmpeg/FFmpeg",
        "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/27a910a8575879d08edaae9d8956ab6d1821044a",
        "files": [
          "libavformat/mov.c"
        ],
        "message": "mov: Fix negative size calculation in mov_read_default().\n\nThe previous code assumed if an atom was marked with a 64-bit\nsize extension, it actually had that data available. The new\ncode verfies there's enough data in the atom for this to be\ndone.\n\nFailure to verify causes total_size > atom.size which will\nresult in negative size calculations later on.\n\nFound-by: Paul Mehta <paul@paulmehta.com>\nSigned-off-by: Dale Curtis <dalecurtis@chromium.org>\nSigned-off-by: Michael Niedermayer <michaelni@gmx.at>\n(cherry picked from commit 3ebd76a9c57558e284e94da367dd23b435e6a6d0)\n\nSigned-off-by: Michael Niedermayer <michaelni@gmx.at>",
        "before_after_code_files": [
          "libavformat/mov.c||libavformat/mov.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "libavformat/mov.c||libavformat/mov.c"
          ],
          "candidate": [
            "libavformat/mov.c||libavformat/mov.c"
          ]
        }
      },
      "candidate_diff": {
        "libavformat/mov.c||libavformat/mov.c": [
          "File: libavformat/mov.c -> libavformat/mov.c"
        ]
      }
    },
    {
      "candidate_hash": "54b76eb5951502d24618c335d0bb275f70d31f3c",
      "candidate_info": {
        "commit_hash": "54b76eb5951502d24618c335d0bb275f70d31f3c",
        "repo": "FFmpeg/FFmpeg",
        "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/54b76eb5951502d24618c335d0bb275f70d31f3c",
        "files": [
          "libavformat/mov.c"
        ],
        "message": "mov: Fix negative size calculation in mov_read_default().\n\nThe previous code assumed if an atom was marked with a 64-bit\nsize extension, it actually had that data available. The new\ncode verfies there's enough data in the atom for this to be\ndone.\n\nFailure to verify causes total_size > atom.size which will\nresult in negative size calculations later on.\n\nFound-by: Paul Mehta <paul@paulmehta.com>\nSigned-off-by: Dale Curtis <dalecurtis@chromium.org>\nSigned-off-by: Michael Niedermayer <michaelni@gmx.at>\n(cherry picked from commit 3ebd76a9c57558e284e94da367dd23b435e6a6d0)\n\nSigned-off-by: Michael Niedermayer <michaelni@gmx.at>",
        "before_after_code_files": [
          "libavformat/mov.c||libavformat/mov.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "libavformat/mov.c||libavformat/mov.c"
          ],
          "candidate": [
            "libavformat/mov.c||libavformat/mov.c"
          ]
        }
      },
      "candidate_diff": {
        "libavformat/mov.c||libavformat/mov.c": [
          "File: libavformat/mov.c -> libavformat/mov.c"
        ]
      }
    },
    {
      "candidate_hash": "3eee7e0db60dc2d3756bde814f21f3df72eb0b0b",
      "candidate_info": {
        "commit_hash": "3eee7e0db60dc2d3756bde814f21f3df72eb0b0b",
        "repo": "FFmpeg/FFmpeg",
        "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/3eee7e0db60dc2d3756bde814f21f3df72eb0b0b",
        "files": [
          "libavformat/mov.c"
        ],
        "message": "mov: Fix negative size calculation in mov_read_default().\n\nThe previous code assumed if an atom was marked with a 64-bit\nsize extension, it actually had that data available. The new\ncode verfies there's enough data in the atom for this to be\ndone.\n\nFailure to verify causes total_size > atom.size which will\nresult in negative size calculations later on.\n\nFound-by: Paul Mehta <paul@paulmehta.com>\nSigned-off-by: Dale Curtis <dalecurtis@chromium.org>\nSigned-off-by: Michael Niedermayer <michaelni@gmx.at>\n(cherry picked from commit 3ebd76a9c57558e284e94da367dd23b435e6a6d0)\n\nSigned-off-by: Michael Niedermayer <michaelni@gmx.at>",
        "before_after_code_files": [
          "libavformat/mov.c||libavformat/mov.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "libavformat/mov.c||libavformat/mov.c"
          ],
          "candidate": [
            "libavformat/mov.c||libavformat/mov.c"
          ]
        }
      },
      "candidate_diff": {
        "libavformat/mov.c||libavformat/mov.c": [
          "File: libavformat/mov.c -> libavformat/mov.c"
        ]
      }
    },
    {
      "candidate_hash": "3e11a186facfd4f17ce23f462734658d88899b55",
      "candidate_info": {
        "commit_hash": "3e11a186facfd4f17ce23f462734658d88899b55",
        "repo": "FFmpeg/FFmpeg",
        "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/3e11a186facfd4f17ce23f462734658d88899b55",
        "files": [
          "libavformat/mov.c"
        ],
        "message": "mov: Fix negative size calculation in mov_read_default().\n\nThe previous code assumed if an atom was marked with a 64-bit\nsize extension, it actually had that data available. The new\ncode verfies there's enough data in the atom for this to be\ndone.\n\nFailure to verify causes total_size > atom.size which will\nresult in negative size calculations later on.\n\nFound-by: Paul Mehta <paul@paulmehta.com>\nSigned-off-by: Dale Curtis <dalecurtis@chromium.org>\nSigned-off-by: Michael Niedermayer <michaelni@gmx.at>\n(cherry picked from commit 3ebd76a9c57558e284e94da367dd23b435e6a6d0)\n\nSigned-off-by: Michael Niedermayer <michaelni@gmx.at>",
        "before_after_code_files": [
          "libavformat/mov.c||libavformat/mov.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "libavformat/mov.c||libavformat/mov.c"
          ],
          "candidate": [
            "libavformat/mov.c||libavformat/mov.c"
          ]
        }
      },
      "candidate_diff": {
        "libavformat/mov.c||libavformat/mov.c": [
          "File: libavformat/mov.c -> libavformat/mov.c"
        ]
      }
    }
  ]
}