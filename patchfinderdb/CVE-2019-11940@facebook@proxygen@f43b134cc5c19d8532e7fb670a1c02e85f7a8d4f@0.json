{
  "cve_id": "CVE-2019-11940",
  "cve_desc": "In the course of decompressing HPACK inside the HTTP2 protocol, an unexpected sequence of header table resize operations can place the header table into a corrupted state, leading to a use-after-free condition and undefined behavior. This issue affects Proxygen from v0.29.0 until v2017.04.03.00.",
  "repo": "facebook/proxygen",
  "patch_hash": "f43b134cc5c19d8532e7fb670a1c02e85f7a8d4f",
  "patch_info": {
    "commit_hash": "f43b134cc5c19d8532e7fb670a1c02e85f7a8d4f",
    "repo": "facebook/proxygen",
    "commit_url": "https://github.com/facebook/proxygen/commit/f43b134cc5c19d8532e7fb670a1c02e85f7a8d4f",
    "files": [
      "proxygen/lib/http/codec/compress/HeaderTable.cpp",
      "proxygen/lib/http/codec/compress/test/HeaderTableTests.cpp"
    ],
    "message": "Fixing HPACK header table resize issue\n\nSummary: On resizing the header table down and then up again, a resize can be called against the underlying vector that actually sizes it down.  This causes a lot of things to break as the code that does the resizing assumes the underlying vector is only ever resized up.\n\nReviewed By: afrind\n\nDifferential Revision: D4613681\n\nfbshipit-source-id: 35b61cab53d5bc097424d6c779f90b7fdea42002",
    "before_after_code_files": [
      "proxygen/lib/http/codec/compress/HeaderTable.cpp||proxygen/lib/http/codec/compress/HeaderTable.cpp",
      "proxygen/lib/http/codec/compress/test/HeaderTableTests.cpp||proxygen/lib/http/codec/compress/test/HeaderTableTests.cpp"
    ]
  },
  "patch_diff": {
    "proxygen/lib/http/codec/compress/HeaderTable.cpp||proxygen/lib/http/codec/compress/HeaderTable.cpp": [
      "File: proxygen/lib/http/codec/compress/HeaderTable.cpp -> proxygen/lib/http/codec/compress/HeaderTable.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "134: }",
      "136: void HeaderTable::setCapacity(uint32_t capacity) {",
      "137:   auto oldCapacity = capacity_;",
      "138:   capacity_ = capacity;",
      "140:     evict(0);",
      "141:   } else {",
      "144:     uint32_t newLength = (capacity_ >> 5) + 1;",
      "161:           }",
      "162:         }",
      "163:       }",
      "",
      "[Removed Lines]",
      "139:   if (capacity_ <= oldCapacity) {",
      "142:     auto oldTail = tail();",
      "143:     auto oldLength = table_.size();",
      "145:     table_.resize(newLength);",
      "146:     if (size_ > 0 && oldTail > head_) {",
      "149:       std::copy(table_.begin() + oldTail, table_.begin() + oldLength,",
      "150:                 table_.begin() + newLength - (oldLength - oldTail));",
      "152:       for (auto& names_it: names_) {",
      "153:         for (auto& idx: names_it.second) {",
      "154:           if (idx >= oldTail) {",
      "155:             DCHECK_LT(idx + (table_.size() - oldLength), table_.size());",
      "156:             idx += (table_.size() - oldLength);",
      "157:           } else {",
      "160:             break;",
      "",
      "[Added Lines]",
      "143:   if (capacity_ == oldCapacity) {",
      "144:     return;",
      "145:   } else if (capacity_ < oldCapacity) {",
      "153:     if (newLength > table_.size()) {",
      "154:       auto oldTail = tail();",
      "155:       auto oldLength = table_.size();",
      "156:       table_.resize(newLength);",
      "157:       if (size_ > 0 && oldTail > head_) {",
      "160:         std::copy(table_.begin() + oldTail, table_.begin() + oldLength,",
      "161:                   table_.begin() + newLength - (oldLength - oldTail));",
      "163:         for (auto& names_it: names_) {",
      "164:           for (auto& idx: names_it.second) {",
      "165:             if (idx >= oldTail) {",
      "166:               DCHECK_LT(idx + (table_.size() - oldLength), table_.size());",
      "167:               idx += (table_.size() - oldLength);",
      "168:             } else {",
      "171:               break;",
      "172:             }",
      "",
      "---------------"
    ],
    "proxygen/lib/http/codec/compress/test/HeaderTableTests.cpp||proxygen/lib/http/codec/compress/test/HeaderTableTests.cpp": [
      "File: proxygen/lib/http/codec/compress/test/HeaderTableTests.cpp -> proxygen/lib/http/codec/compress/test/HeaderTableTests.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "25:     EXPECT_EQ(HeaderTable::toInternal(head_, length_, external), internal);",
      "26:   }",
      "28:   uint32_t head_{0};",
      "29:   uint32_t length_{0};",
      "30: };",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "28:   void resizeTable(HeaderTable& table, uint32_t newCapacity, uint32_t newMax) {",
      "29:     table.setCapacity(newCapacity);",
      "32:     EXPECT_LE(table.size(), newMax);",
      "33:   }",
      "35:   void resizeAndFillTable(",
      "36:       HeaderTable& table, HPACKHeader& header, uint32_t newMax,",
      "37:       uint32_t fillCount) {",
      "38:     uint32_t newCapacity = header.bytes() * newMax;",
      "39:     resizeTable(table, newCapacity, newMax);",
      "42:     for (size_t i = 0; i <= fillCount; ++i) {",
      "43:       EXPECT_EQ(table.add(header), true);",
      "44:     }",
      "45:     EXPECT_EQ(table.size(), newMax);",
      "46:     EXPECT_EQ(table.bytes(), newCapacity);",
      "47:   }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "94:   EXPECT_EQ(table.names().size(), 0);",
      "95: }",
      "98:   HPACKHeader accept(\"accept-encoding\", \"gzip\");",
      "99:   uint32_t max = 10;",
      "100:   uint32_t capacity = accept.bytes() * max;",
      "101:   HeaderTable table(capacity);",
      "104:   for (size_t i = 0; i < max; i++) {",
      "",
      "[Removed Lines]",
      "97: TEST_F(HeaderTableTests, set_capacity) {",
      "",
      "[Added Lines]",
      "118: TEST_F(HeaderTableTests, reduce_capacity) {",
      "123:   EXPECT_GT(table.length(), max);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "168: }",
      "170: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "192: TEST_F(HeaderTableTests, varyCapacity) {",
      "193:   HPACKHeader accept(\"accept-encoding\", \"gzip\");",
      "194:   uint32_t max = 6;",
      "195:   uint32_t capacity = accept.bytes() * max;",
      "196:   HeaderTable table(capacity);",
      "200:   for (size_t i = 0; i <= table.length(); ++i) {",
      "201:     EXPECT_EQ(table.add(accept), true);",
      "202:   }",
      "203:   EXPECT_EQ(table.size(), max);",
      "207:   resizeAndFillTable(table, accept, 4, 5);",
      "211:   resizeAndFillTable(table, accept, 5, 6);",
      "214:   resizeAndFillTable(table, accept, 8, 9);",
      "215: }",
      "217: TEST_F(HeaderTableTests, varyCapacityMalignHeadIndex) {",
      "224:   HPACKHeader accept(\"accept-encoding\", \"gzip\");",
      "225:   uint32_t max = 6;",
      "226:   uint32_t capacity = accept.bytes() * max;",
      "227:   HeaderTable table(capacity);",
      "231:   for (size_t i = 0; i < table.length(); ++i) {",
      "232:     EXPECT_EQ(table.add(accept), true);",
      "233:   }",
      "234:   EXPECT_EQ(table.size(), max);",
      "235:   EXPECT_EQ(table.bytes(), capacity);",
      "241:   string strLargerThanTableCapacity = string(capacity + 1, 'a');",
      "242:   HPACKHeader flush(\"flush\", strLargerThanTableCapacity);",
      "243:   EXPECT_EQ(table.add(flush), false);",
      "244:   EXPECT_EQ(table.size(), 0);",
      "248:   max = 3;",
      "249:   resizeTable(table, accept.bytes() * max, max);",
      "254:   max = 4;",
      "255:   resizeTable(table, accept.bytes() * max, max);",
      "261:   for (size_t i = 0; i <= table.length(); ++i) {",
      "262:     EXPECT_EQ(table.add(accept), true);",
      "263:   }",
      "264:   EXPECT_EQ(table.size(), max);",
      "265: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b9449d53c98b3890d192efdbf86e80422027b425",
      "candidate_info": {
        "commit_hash": "b9449d53c98b3890d192efdbf86e80422027b425",
        "repo": "facebook/proxygen",
        "commit_url": "https://github.com/facebook/proxygen/commit/b9449d53c98b3890d192efdbf86e80422027b425",
        "files": [
          "proxygen/lib/http/codec/compress/HeaderTable.cpp",
          "proxygen/lib/http/codec/compress/HeaderTable.h",
          "proxygen/lib/http/codec/compress/test/HPACKContextTests.cpp",
          "proxygen/lib/http/codec/compress/test/HeaderTableTests.cpp"
        ],
        "message": "Initialize HeaderTable to half to maximum size\n\nSummary:\nInitialize HeaderTables to half their maximum size. Also added capability to increase length of table.\nFixed some unit tests to work with change\n\nReviewed By: afrind\n\nDifferential Revision: D5791316\n\nfbshipit-source-id: 0bde88b7e39b612dc42faad9eb2c2341c0210d13",
        "before_after_code_files": [
          "proxygen/lib/http/codec/compress/HeaderTable.cpp||proxygen/lihttp/codec/compress/HeaderTable.cpp",
          "proxygen/lib/http/codec/compress/HeaderTable.h||proxygen/lihttp/codec/compress/HeaderTable.h",
          "proxygen/lib/http/codec/compress/test/HPACKContextTests.cpp||proxygen/lihttp/codec/compress/test/HPACKContextTests.cpp",
          "proxygen/lib/http/codec/compress/test/HeaderTableTests.cpp||proxygen/lihttp/codec/compress/test/HeaderTableTests.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "proxygen/lib/http/codec/compress/HeaderTable.cpp||proxygen/lihttp/codec/compress/HeaderTable.cpp": [
          "File: proxygen/lib/http/codec/compress/HeaderTable.cpp -> proxygen/lihttp/codec/compress/HeaderTable.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "22:   size_ = 0;",
          "23:   head_ = 0;",
          "24:   capacity_ = capacityVal;",
          "28:     table_.emplace_back();",
          "29:   }",
          "30:   names_.clear();",
          "",
          "[Removed Lines]",
          "26:   table_.reserve(getMaxTableLength(capacity_));",
          "27:   for (uint32_t i = 0; i < getMaxTableLength(capacity_); i++) {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "45:     evict(header.bytes(), capacity_);",
          "46:   }",
          "48:   if (size_ > 0) {",
          "49:     head_ = next(head_);",
          "50:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "133:     if (newLength > table_.size()) {",
          "154:         }",
          "155:       }",
          "156:     }",
          "157:   }",
          "159: }",
          "161: uint32_t HeaderTable::evict(uint32_t needed, uint32_t desiredCapacity) {",
          "",
          "[Removed Lines]",
          "132:     uint32_t newLength = getMaxTableLength(newCapacity);",
          "134:       auto oldTail = tail();",
          "135:       auto oldLength = table_.size();",
          "136:       table_.resize(newLength);",
          "137:       if (size_ > 0 && oldTail > head_) {",
          "140:         std::move_backward(table_.begin() + oldTail, table_.begin() + oldLength,",
          "141:                   table_.begin() + newLength);",
          "143:         for (auto& names_it: names_) {",
          "144:           for (auto& idx: names_it.second) {",
          "145:             if (idx >= oldTail) {",
          "146:               DCHECK_LT(idx + (table_.size() - oldLength), table_.size());",
          "147:               idx += (table_.size() - oldLength);",
          "148:             } else {",
          "151:               break;",
          "152:             }",
          "153:           }",
          "158:   capacity_ = newCapacity;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "proxygen/lib/http/codec/compress/HeaderTable.h||proxygen/lihttp/codec/compress/HeaderTable.h": [
          "File: proxygen/lib/http/codec/compress/HeaderTable.h -> proxygen/lihttp/codec/compress/HeaderTable.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "94:     return capacity_;",
          "95:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "135:  private:",
          "",
          "[Removed Lines]",
          "141:   uint32_t getMaxTableLength(uint32_t capacityVal);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "proxygen/lib/http/codec/compress/test/HPACKContextTests.cpp||proxygen/lihttp/codec/compress/test/HPACKContextTests.cpp": [
          "File: proxygen/lib/http/codec/compress/test/HPACKContextTests.cpp -> proxygen/lihttp/codec/compress/test/HPACKContextTests.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "219: }",
          "221: TEST_F(HPACKContextTests, exclude_headers_larger_than_table) {",
          "225:   HPACKHeader header2(\"Short\", \"header\");",
          "226:   vector<HPACKHeader> headers;",
          "230:   encoder.encode(headers);",
          "233: }",
          "235: TEST_P(HPACKContextTests, contextUpdate) {",
          "",
          "[Removed Lines]",
          "222:   HPACKEncoder encoder{true, 50};",
          "223:   HPACKHeader header1(\"This_really_large_header\",",
          "224:                       \"is_larger_than_the_header_table\");",
          "227:   headers.push_back(HPACKHeader(\"Short\", \"header\"));",
          "228:   headers.push_back(HPACKHeader(\"This_really_large_header\",",
          "229:                                 \"is_larger_than_the_header_table\"));",
          "231:   CHECK_EQ(encoder.getIndex(header1), 0);",
          "232:   CHECK_GT(encoder.getIndex(header2), 0);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "proxygen/lib/http/codec/compress/test/HeaderTableTests.cpp||proxygen/lihttp/codec/compress/test/HeaderTableTests.cpp": [
          "File: proxygen/lib/http/codec/compress/test/HeaderTableTests.cpp -> proxygen/lihttp/codec/compress/test/HeaderTableTests.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "120:   uint32_t max = 10;",
          "121:   uint32_t capacity = accept.bytes() * max;",
          "122:   HeaderTable table(capacity);",
          "126:   for (size_t i = 0; i < max; i++) {",
          "",
          "[Removed Lines]",
          "123:   EXPECT_GT(table.length(), max);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "166:   uint32_t max = 4;",
          "167:   uint32_t capacity = accept.bytes() * max;",
          "168:   HeaderTable table(capacity);",
          "173:     EXPECT_EQ(table.add(accept), true);",
          "174:   }",
          "175:   EXPECT_EQ(table.size(), max);",
          "176:   EXPECT_EQ(table.getIndex(accept), 4);",
          "178:   max = 8;",
          "183:   EXPECT_EQ(table.getIndex(accept), 4);",
          "",
          "[Removed Lines]",
          "169:   EXPECT_GT(table.length(), max);",
          "172:   for (size_t i = 0; i < table.length() + 1; i++) {",
          "179:   table.setCapacity(accept.bytes() * max);",
          "181:   EXPECT_GT(table.length(), max);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "227:     EXPECT_EQ(table.add(accept), true);",
          "228:   }",
          "229:   EXPECT_EQ(table.size(), max);",
          "",
          "[Removed Lines]",
          "226:   for (size_t i = 0; i < table.length(); ++i) {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "293:   HPACKHeader smallHeader(\"Accept\", \"All-Content\");",
          "295:   HeaderTable table(448);",
          "298:   for (uint8_t count = 0; count < 3; count++) {",
          "299:     table.add(largeHeader);",
          "300:     table.add(smallHeader);",
          "301:   } // tail is at index 0",
          "304:   table.add(smallHeader);",
          "305:   table.add(smallHeader); // tail is at index 1",
          "311:   CHECK_EQ(table[1], smallHeader);",
          "",
          "[Removed Lines]",
          "296:   CHECK_EQ(table.length(), 14);",
          "302:   CHECK_EQ(table.length(), 14);",
          "306:   table.setCapacity(500);",
          "307:   table.add(smallHeader);",
          "308:   CHECK_EQ(table.length(), 15);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d5516842cb5104bfcd719e66a53fb06f128e8377",
      "candidate_info": {
        "commit_hash": "d5516842cb5104bfcd719e66a53fb06f128e8377",
        "repo": "facebook/proxygen",
        "commit_url": "https://github.com/facebook/proxygen/commit/d5516842cb5104bfcd719e66a53fb06f128e8377",
        "files": [
          "proxygen/lib/http/codec/compress/HeaderTable.cpp",
          "proxygen/lib/http/codec/compress/test/HeaderTableTests.cpp"
        ],
        "message": "Fix resize bug\n\nSummary:\nWhen resizing the header table, certain elements got overridden in the process, changing the header table\n\n(Note: this ignores all push blocking failures!)\n\nReviewed By: afrind, dddmello\n\nDifferential Revision: D5737191\n\nfbshipit-source-id: 04fe9c60b554303d911a815fb464dcd3a3ebdab5",
        "before_after_code_files": [
          "proxygen/lib/http/codec/compress/HeaderTable.cpp||proxygen/lihttp/codec/compress/HeaderTable.cpp",
          "proxygen/lib/http/codec/compress/test/HeaderTableTests.cpp||proxygen/lihttp/codec/compress/test/HeaderTableTests.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "proxygen/lib/http/codec/compress/HeaderTable.cpp||proxygen/lihttp/codec/compress/HeaderTable.cpp": [
          "File: proxygen/lib/http/codec/compress/HeaderTable.cpp -> proxygen/lihttp/codec/compress/HeaderTable.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "120: }",
          "134: void HeaderTable::setCapacity(uint32_t newCapacity) {",
          "135:   if (newCapacity == capacity_) {",
          "136:     return;",
          "",
          "[Removed Lines]",
          "122: namespace {",
          "123: template<class InputIt, class OutputIt>",
          "124: OutputIt moveItems(InputIt first, InputIt last,",
          "125:                    OutputIt d_first)",
          "126: {",
          "127:   while (first != last) {",
          "129:   }",
          "130:   return d_first;",
          "131: }",
          "132: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "149:       if (size_ > 0 && oldTail > head_) {",
          "155:         for (auto& names_it: names_) {",
          "156:           for (auto& idx: names_it.second) {",
          "",
          "[Removed Lines]",
          "152:         moveItems(table_.begin() + oldTail, table_.begin() + oldLength,",
          "153:                   table_.begin() + newLength - (oldLength - oldTail));",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "proxygen/lib/http/codec/compress/test/HeaderTableTests.cpp||proxygen/lihttp/codec/compress/test/HeaderTableTests.cpp": [
          "File: proxygen/lib/http/codec/compress/test/HeaderTableTests.cpp -> proxygen/lihttp/codec/compress/test/HeaderTableTests.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "288:   EXPECT_EQ(table.nameIndex(\"accept-encoding\"), 2);",
          "289: }",
          "291: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "df1ba608d73c34ec014a6e473967d9f721325fc6",
      "candidate_info": {
        "commit_hash": "df1ba608d73c34ec014a6e473967d9f721325fc6",
        "repo": "facebook/proxygen",
        "commit_url": "https://github.com/facebook/proxygen/commit/df1ba608d73c34ec014a6e473967d9f721325fc6",
        "files": [
          "proxygen/lib/http/codec/compress/HeaderTable.cpp",
          "proxygen/lib/http/codec/compress/HeaderTable.h"
        ],
        "message": "Updated setCapacity function to update capacity_ at end of method\n\nSummary:\nUpdated setCapacity to update capacity_ at the end of the method.\n\t Changed capacity parameter to newCapacity for more clarity.\n\t Updated evict() to take in an additional parameter, desiredCapacity.\n\t Updated all calls to evict() to reflect this change.\n\nReviewed By: dddmello\n\nDifferential Revision: D5363483\n\nfbshipit-source-id: a56212812c6ae17dfd31938cc934cf8efdc29621",
        "before_after_code_files": [
          "proxygen/lib/http/codec/compress/HeaderTable.cpp||proxygen/lib/http/codec/compress/HeaderTable.cpp",
          "proxygen/lib/http/codec/compress/HeaderTable.h||proxygen/lib/http/codec/compress/HeaderTable.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "proxygen/lib/http/codec/compress/HeaderTable.cpp||proxygen/lib/http/codec/compress/HeaderTable.cpp"
          ],
          "candidate": [
            "proxygen/lib/http/codec/compress/HeaderTable.cpp||proxygen/lib/http/codec/compress/HeaderTable.cpp"
          ]
        }
      },
      "candidate_diff": {
        "proxygen/lib/http/codec/compress/HeaderTable.cpp||proxygen/lib/http/codec/compress/HeaderTable.cpp": [
          "File: proxygen/lib/http/codec/compress/HeaderTable.cpp -> proxygen/lib/http/codec/compress/HeaderTable.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "44:   if ((bytes_ + header.bytes()) > capacity_) {",
          "46:   }",
          "48:   if (size_ > 0) {",
          "",
          "[Removed Lines]",
          "45:     evict(header.bytes());",
          "",
          "[Added Lines]",
          "45:     evict(header.bytes(), capacity_);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "131: }",
          "132: }",
          "142:     return;",
          "146:   } else {",
          "151:     if (newLength > table_.size()) {",
          "152:       auto oldTail = tail();",
          "153:       auto oldLength = table_.size();",
          "",
          "[Removed Lines]",
          "134: void HeaderTable::setCapacity(uint32_t capacity) {",
          "139:   auto oldCapacity = capacity_;",
          "140:   capacity_ = capacity;",
          "141:   if (capacity_ == oldCapacity) {",
          "143:   } else if (capacity_ < oldCapacity) {",
          "145:     evict(0);",
          "150:     uint32_t newLength = getMaxTableLength(capacity_);",
          "",
          "[Added Lines]",
          "134: void HeaderTable::setCapacity(uint32_t newCapacity) {",
          "135:   if (newCapacity == capacity_) {",
          "137:   } else if (newCapacity < capacity_) {",
          "139:     evict(0, newCapacity);",
          "144:     uint32_t newLength = getMaxTableLength(newCapacity);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "173:       }",
          "174:     }",
          "175:   }",
          "176: }",
          "179:   uint32_t previousSize = size_;",
          "181:     removeLast();",
          "182:   }",
          "183:   return previousSize - size_;",
          "",
          "[Removed Lines]",
          "178: uint32_t HeaderTable::evict(uint32_t needed) {",
          "180:   while (size_ > 0 && (bytes_ + needed > capacity_)) {",
          "",
          "[Added Lines]",
          "170:   capacity_ = newCapacity;",
          "173: uint32_t HeaderTable::evict(uint32_t needed, uint32_t desiredCapacity) {",
          "175:   while (size_ > 0 && (bytes_ + needed > desiredCapacity)) {",
          "",
          "---------------"
        ],
        "proxygen/lib/http/codec/compress/HeaderTable.h||proxygen/lib/http/codec/compress/HeaderTable.h": [
          "File: proxygen/lib/http/codec/compress/HeaderTable.h -> proxygen/lib/http/codec/compress/HeaderTable.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "156:   uint32_t evict(uint32_t needed);",
          "",
          "[Added Lines]",
          "156:   uint32_t evict(uint32_t needed, uint32_t desiredCapacity);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7f2ca094a04340ff05dba943b77685d3a6f6eb35",
      "candidate_info": {
        "commit_hash": "7f2ca094a04340ff05dba943b77685d3a6f6eb35",
        "repo": "facebook/proxygen",
        "commit_url": "https://github.com/facebook/proxygen/commit/7f2ca094a04340ff05dba943b77685d3a6f6eb35",
        "files": [
          "proxygen/lib/http/Makefile.am",
          "proxygen/lib/http/codec/compress/HPACKContext.cpp",
          "proxygen/lib/http/codec/compress/HPACKHeaderTableImpl.h",
          "proxygen/lib/http/codec/compress/HeaderTable.cpp",
          "proxygen/lib/http/codec/compress/HeaderTable.h",
          "proxygen/lib/http/codec/compress/StaticHeaderTable.cpp",
          "proxygen/lib/http/codec/compress/test/HeaderTableTests.cpp"
        ],
        "message": "Refactor to allow QCRAM experimentation\n\nSummary: This diff abstracts the underlying table structure out of the HeaderTable class.  There is code that implements QPACK that depends on adding a field to HPACKHeader, which would increase memory usage.  Instead, this diff requires an extra allocation (of the table impl).\n\nReviewed By: dddmello\n\nDifferential Revision: D5843557\n\nfbshipit-source-id: f23e8f917bc6be888444ad2a0a0f8162b6abf6d5",
        "before_after_code_files": [
          "proxygen/lib/http/Makefile.am||proxygen/lib/http/Makefile.am",
          "proxygen/lib/http/codec/compress/HPACKContext.cpp||proxygen/lib/http/codec/compress/HPACKContext.cpp",
          "proxygen/lib/http/codec/compress/HPACKHeaderTableImpl.h||proxygen/lib/http/codec/compress/HPACKHeaderTableImpl.h",
          "proxygen/lib/http/codec/compress/HeaderTable.cpp||proxygen/lib/http/codec/compress/HeaderTable.cpp",
          "proxygen/lib/http/codec/compress/HeaderTable.h||proxygen/lib/http/codec/compress/HeaderTable.h",
          "proxygen/lib/http/codec/compress/StaticHeaderTable.cpp||proxygen/lib/http/codec/compress/StaticHeaderTable.cpp",
          "proxygen/lib/http/codec/compress/test/HeaderTableTests.cpp||proxygen/lib/http/codec/compress/test/HeaderTableTests.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "proxygen/lib/http/codec/compress/HeaderTable.cpp||proxygen/lib/http/codec/compress/HeaderTable.cpp",
            "proxygen/lib/http/codec/compress/test/HeaderTableTests.cpp||proxygen/lib/http/codec/compress/test/HeaderTableTests.cpp"
          ],
          "candidate": [
            "proxygen/lib/http/codec/compress/HeaderTable.cpp||proxygen/lib/http/codec/compress/HeaderTable.cpp",
            "proxygen/lib/http/codec/compress/test/HeaderTableTests.cpp||proxygen/lib/http/codec/compress/test/HeaderTableTests.cpp"
          ]
        }
      },
      "candidate_diff": {
        "proxygen/lib/http/Makefile.am||proxygen/lib/http/Makefile.am": [
          "File: proxygen/lib/http/Makefile.am -> proxygen/lib/http/Makefile.am",
          "--- Hunk 1 ---",
          "[Context before]",
          "54:  codec/compress/HPACKEncoder.h \\",
          "55:  codec/compress/HPACKHeader.h \\",
          "56:  codec/compress/HPACKHeaderName.h \\",
          "57:  codec/compress/Header.h \\",
          "58:  codec/compress/HeaderCodec.h \\",
          "59:  codec/compress/HeaderPiece.h \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "57:  codec/compress/HPACKHeaderTableImpl.h \\",
          "",
          "---------------"
        ],
        "proxygen/lib/http/codec/compress/HPACKContext.cpp||proxygen/lib/http/codec/compress/HPACKContext.cpp": [
          "File: proxygen/lib/http/codec/compress/HPACKContext.cpp -> proxygen/lib/http/codec/compress/HPACKContext.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: #include <proxygen/lib/http/codec/compress/HPACKContext.h>",
          "12: #include <folly/io/IOBuf.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "11: #include <proxygen/lib/http/codec/compress/HPACKHeaderTableImpl.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "16: namespace proxygen {",
          "18: HPACKContext::HPACKContext(uint32_t tableSize) :",
          "20: }",
          "22: uint32_t HPACKContext::getIndex(const HPACKHeader& header) const {",
          "",
          "[Removed Lines]",
          "19:     table_(tableSize) {",
          "",
          "[Added Lines]",
          "20:     table_(std::unique_ptr<TableImpl>(new HPACKHeaderTableImpl()), tableSize) {",
          "",
          "---------------"
        ],
        "proxygen/lib/http/codec/compress/HPACKHeaderTableImpl.h||proxygen/lib/http/codec/compress/HPACKHeaderTableImpl.h": [
          "File: proxygen/lib/http/codec/compress/HPACKHeaderTableImpl.h -> proxygen/lib/http/codec/compress/HPACKHeaderTableImpl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "10: #pragma once",
          "12: #include <proxygen/lib/http/codec/compress/HeaderTable.h>",
          "13: #include <vector>",
          "15: namespace proxygen {",
          "17: class HPACKHeaderTableImpl : public TableImpl {",
          "18:  public:",
          "19:   size_t size() const override { return vec_.size(); }",
          "20:   HPACKHeader& operator[] (size_t i) override { return vec_[i]; }",
          "21:   void init(size_t vecSize) override {",
          "22:     vec_.reserve(vecSize);",
          "23:     for (uint32_t i = 0; i < vecSize; i++) {",
          "24:       vec_.emplace_back();",
          "25:     }",
          "26:   }",
          "27:   void resize(size_t sz) override { vec_.resize(sz); }",
          "28:   void moveItems(size_t oldTail, size_t oldLength, size_t newLength) override {",
          "29:     std::move_backward(vec_.begin() + oldTail, vec_.begin() + oldLength,",
          "30:                        vec_.begin() + newLength);",
          "31:   }",
          "32:   void add(size_t head, const HPACKHeaderName& name,",
          "33:            const folly::fbstring& value) override {",
          "34:     vec_[head].name = name;",
          "35:     vec_[head].value = value;",
          "36:   }",
          "38:   std::vector<HPACKHeader> vec_;",
          "39: };",
          "41: }",
          "",
          "---------------"
        ],
        "proxygen/lib/http/codec/compress/HeaderTable.cpp||proxygen/lib/http/codec/compress/HeaderTable.cpp": [
          "File: proxygen/lib/http/codec/compress/HeaderTable.cpp -> proxygen/lib/http/codec/compress/HeaderTable.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "23:   head_ = 0;",
          "24:   capacity_ = capacityVal;",
          "25:   uint32_t initLength = getMaxTableLength(capacity_) / 2;",
          "30:   names_.clear();",
          "31: }",
          "",
          "[Removed Lines]",
          "26:   table_.reserve(initLength);",
          "27:   for (uint32_t i = 0; i < initLength; i++) {",
          "28:     table_.emplace_back();",
          "29:   }",
          "",
          "[Added Lines]",
          "26:   table_->init(initLength);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "52:   if (size_ > 0) {",
          "53:     head_ = next(head_);",
          "54:   }",
          "58:   names_[header.name].push_back(head_);",
          "59:   bytes_ += header.bytes();",
          "",
          "[Removed Lines]",
          "55:   table_[head_].name = header.name;",
          "56:   table_[head_].value = header.value;",
          "",
          "[Added Lines]",
          "52:   table_->add(head_, header.name, header.value);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "67:     return 0;",
          "68:   }",
          "69:   for (auto i : it->second) {",
          "71:       return toExternal(i);",
          "72:     }",
          "73:   }",
          "",
          "[Removed Lines]",
          "70:     if (table_[i].value == header.value) {",
          "",
          "[Added Lines]",
          "66:     if ((*table_)[i].value == header.value) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "89: const HPACKHeader& HeaderTable::operator[](uint32_t i) const {",
          "90:   CHECK(isValid(i));",
          "92: }",
          "94: uint32_t HeaderTable::getMaxTableLength(uint32_t capacityVal) {",
          "",
          "[Removed Lines]",
          "91:   return table_[toInternal(i)];",
          "",
          "[Added Lines]",
          "87:   return (*table_)[toInternal(i)];",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "101: void HeaderTable::removeLast() {",
          "102:   auto t = tail();",
          "105:   DCHECK(names_it != names_.end());",
          "106:   list<uint32_t> &ilist = names_it->second;",
          "108:   ilist.pop_front();",
          "110:   if (ilist.empty()) {",
          "111:     names_.erase(names_it);",
          "112:   }",
          "114:   --size_;",
          "115: }",
          "",
          "[Removed Lines]",
          "104:   auto names_it = names_.find(table_[t].name);",
          "107:   DCHECK(ilist.front() ==t);",
          "113:   bytes_ -= table_[t].bytes();",
          "",
          "[Added Lines]",
          "100:   auto names_it = names_.find((*table_)[t].name);",
          "103:   DCHECK(ilist.front() == t);",
          "109:   const auto& header = (*table_)[t];",
          "110:   bytes_ -= header.bytes();",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "136:     uint32_t newLength = getMaxTableLength(newCapacity) / 2;",
          "138:       increaseTableLengthTo(newLength);",
          "139:     }",
          "140:   }",
          "",
          "[Removed Lines]",
          "137:     if (newLength > table_.size()) {",
          "",
          "[Added Lines]",
          "134:     if (newLength > table_->size()) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "144: void HeaderTable::increaseTableLengthTo(uint32_t newLength) {",
          "145:   DCHECK_GE(newLength, length());",
          "146:   auto oldTail = tail();",
          "149:   if (size_ > 0 && oldTail > head_) {",
          "155:     for (auto& names_it: names_) {",
          "156:       for (auto& idx: names_it.second) {",
          "157:         if (idx >= oldTail) {",
          "160:         } else {",
          "",
          "[Removed Lines]",
          "147:   auto oldLength = table_.size();",
          "148:   table_.resize(newLength);",
          "152:     std::move_backward(table_.begin() + oldTail, table_.begin() + oldLength,",
          "153:               table_.begin() + newLength);",
          "158:           DCHECK_LT(idx + (table_.size() - oldLength), table_.size());",
          "159:           idx += (table_.size() - oldLength);",
          "",
          "[Added Lines]",
          "144:   auto oldLength = table_->size();",
          "145:   table_->resize(newLength);",
          "149:     table_->moveItems(oldTail, oldLength, newLength);",
          "154:           DCHECK_LT(idx + (table_->size() - oldLength), table_->size());",
          "155:           idx += (table_->size() - oldLength);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "180: }",
          "182: uint32_t HeaderTable::next(uint32_t i) const {",
          "184: }",
          "186: uint32_t HeaderTable::tail() const {",
          "188: }",
          "190: uint32_t HeaderTable::toExternal(uint32_t internalIndex) const {",
          "192: }",
          "194: uint32_t HeaderTable::toExternal(uint32_t head, uint32_t length,",
          "",
          "[Removed Lines]",
          "183:   return (i + 1) % table_.size();",
          "187:   return (head_ + table_.size() - size_ + 1) % table_.size();",
          "191:   return toExternal(head_, table_.size(), internalIndex);",
          "",
          "[Added Lines]",
          "179:   return (i + 1) % table_->size();",
          "183:   return (head_ + table_->size() - size_ + 1) % table_->size();",
          "187:   return toExternal(head_, table_->size(), internalIndex);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "197: }",
          "199: uint32_t HeaderTable::toInternal(uint32_t externalIndex) const {",
          "201: }",
          "203: uint32_t HeaderTable::toInternal(uint32_t head, uint32_t length,",
          "",
          "[Removed Lines]",
          "200:   return toInternal(head_, table_.size(), externalIndex);",
          "",
          "[Added Lines]",
          "196:   return toInternal(head_, table_->size(), externalIndex);",
          "",
          "---------------"
        ],
        "proxygen/lib/http/codec/compress/HeaderTable.h||proxygen/lib/http/codec/compress/HeaderTable.h": [
          "File: proxygen/lib/http/codec/compress/HeaderTable.h -> proxygen/lib/http/codec/compress/HeaderTable.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: namespace proxygen {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21: class TableImpl {",
          "22:  public:",
          "23:   virtual ~TableImpl() {}",
          "24:   virtual void init(size_t capacity) = 0;",
          "25:   virtual size_t size() const = 0;",
          "26:   virtual HPACKHeader& operator[] (size_t i) = 0;",
          "27:   virtual void resize(size_t size) = 0;",
          "28:   virtual void moveItems(size_t oldTail, size_t oldLength,",
          "29:                          size_t newLength) = 0;",
          "30:   virtual void add(size_t head, const HPACKHeaderName& name,",
          "31:                    const folly::fbstring& value) = 0;",
          "32: };",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "27:  public:",
          "28:   typedef std::unordered_map<HPACKHeaderName, std::list<uint32_t>> names_map;",
          "31:     init(capacityVal);",
          "32:   }",
          "35:   ~HeaderTable() {}",
          "36:   HeaderTable(const HeaderTable&) = delete;",
          "",
          "[Removed Lines]",
          "30:   explicit HeaderTable(uint32_t capacityVal) {",
          "33:   HeaderTable() {}",
          "",
          "[Added Lines]",
          "43:   HeaderTable(std::unique_ptr<TableImpl> table, uint32_t capacityVal)",
          "44:       : table_(std::move(table)) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "125:   size_t length() const {",
          "127:   }",
          "129:   bool operator==(const HeaderTable& other) const;",
          "",
          "[Removed Lines]",
          "126:     return table_.size();",
          "",
          "[Added Lines]",
          "139:     return table_->size();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "182:   uint32_t capacity_{0};",
          "183:   uint32_t bytes_{0};     // size in bytes of the current entries",
          "186:   uint32_t size_{0};    // how many entries we have in the table",
          "187:   uint32_t head_{0};     // points to the first element of the ring",
          "",
          "[Removed Lines]",
          "184:   std::vector<HPACKHeader> table_;",
          "",
          "[Added Lines]",
          "197:   std::unique_ptr<TableImpl> table_;",
          "",
          "---------------"
        ],
        "proxygen/lib/http/codec/compress/StaticHeaderTable.cpp||proxygen/lib/http/codec/compress/StaticHeaderTable.cpp": [
          "File: proxygen/lib/http/codec/compress/StaticHeaderTable.cpp -> proxygen/lib/http/codec/compress/StaticHeaderTable.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: #include <proxygen/lib/http/codec/compress/StaticHeaderTable.h>",
          "12: #include <folly/Indestructible.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "11: #include <proxygen/lib/http/codec/compress/HPACKHeaderTableImpl.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "90: StaticHeaderTable::StaticHeaderTable(",
          "91:     const char* entries[][2],",
          "92:     int size)",
          "95:   list<HPACKHeader> hlist;",
          "96:   uint32_t byteCount = 0;",
          "",
          "[Removed Lines]",
          "93:     : HeaderTable() {",
          "",
          "[Added Lines]",
          "94:     : HeaderTable(std::make_unique<HPACKHeaderTableImpl>(), 0) {",
          "",
          "---------------"
        ],
        "proxygen/lib/http/codec/compress/test/HeaderTableTests.cpp||proxygen/lib/http/codec/compress/test/HeaderTableTests.cpp": [
          "File: proxygen/lib/http/codec/compress/test/HeaderTableTests.cpp -> proxygen/lib/http/codec/compress/test/HeaderTableTests.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: #include <folly/portability/GTest.h>",
          "11: #include <memory>",
          "12: #include <proxygen/lib/http/codec/compress/HeaderTable.h>",
          "13: #include <proxygen/lib/http/codec/compress/Logging.h>",
          "14: #include <sstream>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "13: #include <proxygen/lib/http/codec/compress/HPACKHeaderTableImpl.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "66: }",
          "68: TEST_F(HeaderTableTests, add) {",
          "70:   HPACKHeader header(\"accept-encoding\", \"gzip\");",
          "71:   table.add(header);",
          "72:   table.add(header);",
          "",
          "[Removed Lines]",
          "69:   HeaderTable table(4096);",
          "",
          "[Added Lines]",
          "70:   HeaderTable table(std::make_unique<HPACKHeaderTableImpl>(), 4096);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "85:   HPACKHeader accept3(\"accept-encoding\", \"third\"); // size is larger with 1 byte",
          "86:   uint32_t max = 10;",
          "87:   uint32_t capacity = accept.bytes() * max;",
          "90:   for (size_t i = 0; i < max; i++) {",
          "91:     EXPECT_EQ(table.add(accept), true);",
          "",
          "[Removed Lines]",
          "88:   HeaderTable table(capacity);",
          "",
          "[Added Lines]",
          "89:   HeaderTable table(std::make_unique<HPACKHeaderTableImpl>(), capacity);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "121:   HPACKHeader accept(\"accept-encoding\", \"gzip\");",
          "122:   uint32_t max = 10;",
          "123:   uint32_t capacity = accept.bytes() * max;",
          "125:   EXPECT_LE(table.length(), table.getMaxTableLength(capacity));",
          "",
          "[Removed Lines]",
          "124:   HeaderTable table(capacity);",
          "",
          "[Added Lines]",
          "125:   HeaderTable table(std::make_unique<HPACKHeaderTableImpl>(), capacity);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "137: TEST_F(HeaderTableTests, comparison) {",
          "138:   uint32_t capacity = 128;",
          "142:   HPACKHeader h1(\"Content-Encoding\", \"gzip\");",
          "143:   HPACKHeader h2(\"Content-Encoding\", \"deflate\");",
          "",
          "[Removed Lines]",
          "139:   HeaderTable t1(capacity);",
          "140:   HeaderTable t2(capacity);",
          "",
          "[Added Lines]",
          "140:   HeaderTable t1(std::make_unique<HPACKHeaderTableImpl>(), capacity);",
          "141:   HeaderTable t2(std::make_unique<HPACKHeaderTableImpl>(), capacity);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "157: TEST_F(HeaderTableTests, print) {",
          "158:   stringstream out;",
          "160:   t.add(HPACKHeader(\"Accept-Encoding\", \"gzip\"));",
          "161:   out << t;",
          "162:   EXPECT_EQ(out.str(),",
          "",
          "[Removed Lines]",
          "159:   HeaderTable t(128);",
          "",
          "[Added Lines]",
          "160:   HeaderTable t(std::make_unique<HPACKHeaderTableImpl>(), 128);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "167:   HPACKHeader accept(\"accept-encoding\", \"gzip\");",
          "168:   uint32_t max = 4;",
          "169:   uint32_t capacity = accept.bytes() * max;",
          "171:   EXPECT_LE(table.length(), table.getMaxTableLength(capacity));",
          "173:   uint32_t length = table.length() + 1;",
          "174:   for (size_t i = 0; i < length; i++) {",
          "",
          "[Removed Lines]",
          "170:   HeaderTable table(capacity);",
          "",
          "[Added Lines]",
          "171:   HeaderTable table(std::make_unique<HPACKHeaderTableImpl>(), capacity);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "191:   HPACKHeader accept(\"accept-encoding\", \"gzip\");",
          "192:   uint32_t max = 6;",
          "193:   uint32_t capacity = accept.bytes() * max;",
          "",
          "[Removed Lines]",
          "194:   HeaderTable table(capacity);",
          "",
          "[Added Lines]",
          "196:   HeaderTable table(std::make_unique<HPACKHeaderTableImpl>(), capacity);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "222:   HPACKHeader accept(\"accept-encoding\", \"gzip\");",
          "223:   uint32_t max = 6;",
          "224:   uint32_t capacity = accept.bytes() * max;",
          "",
          "[Removed Lines]",
          "225:   HeaderTable table(capacity);",
          "",
          "[Added Lines]",
          "227:   HeaderTable table(std::make_unique<HPACKHeaderTableImpl>(), capacity);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "265: TEST_F(HeaderTableTests, addLargerThanTable) {",
          "267:   uint32_t capacityBytes = 256;",
          "269:   HPACKHeaderName name(\"accept-encoding\");",
          "270:   table.add(HPACKHeader(\"accept-encoding\", \"gzip\"));  // internal index = 0",
          "271:   table.add(HPACKHeader(\"accept-encoding\", \"gzip\"));  // internal index = 1",
          "",
          "[Removed Lines]",
          "268:   HeaderTable table(capacityBytes);",
          "",
          "[Added Lines]",
          "270:   HeaderTable table(std::make_unique<HPACKHeaderTableImpl>(), capacityBytes);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "296:   HPACKHeader largeHeader(\"Access-Control-Allow-Credentials\", \"true\");",
          "297:   HPACKHeader smallHeader(\"Accept\", \"All-Content\");",
          "300:   CHECK_EQ(table.length(), 7);",
          "302:   for (uint8_t count = 0; count < 3; count++) {",
          "",
          "[Removed Lines]",
          "299:   HeaderTable table(448);",
          "",
          "[Added Lines]",
          "301:   HeaderTable table(std::make_unique<HPACKHeaderTableImpl>(), 448);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7ecf4e064a97d4fcda66e49122ef696a9391b2f5",
      "candidate_info": {
        "commit_hash": "7ecf4e064a97d4fcda66e49122ef696a9391b2f5",
        "repo": "facebook/proxygen",
        "commit_url": "https://github.com/facebook/proxygen/commit/7ecf4e064a97d4fcda66e49122ef696a9391b2f5",
        "files": [
          "proxygen/lib/http/codec/compress/HPACKDecoder.cpp",
          "proxygen/lib/http/codec/compress/HPACKHeader.h",
          "proxygen/lib/http/codec/compress/HeaderTable.cpp",
          "proxygen/lib/http/codec/compress/HeaderTable.h",
          "proxygen/lib/http/codec/compress/StaticHeaderTable.cpp",
          "proxygen/lib/http/codec/compress/test/HTTPArchive.cpp",
          "proxygen/lib/http/codec/compress/test/TestUtil.cpp",
          "proxygen/lib/http/codec/compress/test/TestUtil.h"
        ],
        "message": "Add move ctor/assignment operator for HPACKHeader\n\nSummary: Prevent some gratuitous string copying.\n\nReviewed By: dddmello\n\nDifferential Revision: D5095195\n\nfbshipit-source-id: ce04acf0dc09b71cd1fbc0bf22d9a6f26b6fd195",
        "before_after_code_files": [
          "proxygen/lib/http/codec/compress/HPACKDecoder.cpp||proxygen/lihttp/codec/compress/HPACKDecoder.cpp",
          "proxygen/lib/http/codec/compress/HPACKHeader.h||proxygen/lihttp/codec/compress/HPACKHeader.h",
          "proxygen/lib/http/codec/compress/HeaderTable.cpp||proxygen/lihttp/codec/compress/HeaderTable.cpp",
          "proxygen/lib/http/codec/compress/HeaderTable.h||proxygen/lihttp/codec/compress/HeaderTable.h",
          "proxygen/lib/http/codec/compress/StaticHeaderTable.cpp||proxygen/lihttp/codec/compress/StaticHeaderTable.cpp",
          "proxygen/lib/http/codec/compress/test/HTTPArchive.cpp||proxygen/lihttp/codec/compress/test/HTTPArchive.cpp",
          "proxygen/lib/http/codec/compress/test/TestUtil.cpp||proxygen/lihttp/codec/compress/test/TestUtil.cpp",
          "proxygen/lib/http/codec/compress/test/TestUtil.h||proxygen/lihttp/codec/compress/test/TestUtil.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "proxygen/lib/http/codec/compress/HPACKDecoder.cpp||proxygen/lihttp/codec/compress/HPACKDecoder.cpp": [
          "File: proxygen/lib/http/codec/compress/HPACKDecoder.cpp -> proxygen/lihttp/codec/compress/HPACKDecoder.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "201:   if (streamingCb_) {",
          "202:     streamingCb_->onHeader(header.name, header.value);",
          "203:   } else if (emitted) {",
          "205:   }",
          "206:   return header.bytes();",
          "207: }",
          "",
          "[Removed Lines]",
          "204:     emitted->push_back(header);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "proxygen/lib/http/codec/compress/HPACKHeader.h||proxygen/lihttp/codec/compress/HPACKHeader.h": [
          "File: proxygen/lib/http/codec/compress/HPACKHeader.h -> proxygen/lihttp/codec/compress/HPACKHeader.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "22:   HPACKHeader() {}",
          "24:   HPACKHeader(const std::string& name_,",
          "26:     name(name_), value(value_) {}",
          "28:   ~HPACKHeader() {}",
          "",
          "[Removed Lines]",
          "25:              const std::string& value_):",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "proxygen/lib/http/codec/compress/HeaderTable.cpp||proxygen/lihttp/codec/compress/HeaderTable.cpp": [
          "File: proxygen/lib/http/codec/compress/HeaderTable.cpp -> proxygen/lihttp/codec/compress/HeaderTable.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "23:   head_ = 0;",
          "24:   capacity_ = capacityVal;",
          "27:   names_.clear();",
          "28: }",
          "",
          "[Removed Lines]",
          "26:   table_.assign(getMaxTableLength(capacity_), HPACKHeader());",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "45:   if (size_ > 0) {",
          "46:     head_ = next(head_);",
          "47:   }",
          "50:   names_[header.name].push_back(head_);",
          "51:   bytes_ += header.bytes();",
          "",
          "[Removed Lines]",
          "48:   table_[head_] = header;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "116: }",
          "118: void HeaderTable::setCapacity(uint32_t capacity) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "139:       if (size_ > 0 && oldTail > head_) {",
          "143:                   table_.begin() + newLength - (oldLength - oldTail));",
          "145:         for (auto& names_it: names_) {",
          "",
          "[Removed Lines]",
          "142:         std::copy(table_.begin() + oldTail, table_.begin() + oldLength,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "proxygen/lib/http/codec/compress/HeaderTable.h||proxygen/lihttp/codec/compress/HeaderTable.h": [
          "File: proxygen/lib/http/codec/compress/HeaderTable.h -> proxygen/lihttp/codec/compress/HeaderTable.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "34:   HeaderTable() {}",
          "36:   ~HeaderTable() {}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "131:                              uint32_t externalIndex);",
          "133:  private:",
          "",
          "[Removed Lines]",
          "134:   HeaderTable& operator=(const HeaderTable&); // non-copyable",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "proxygen/lib/http/codec/compress/StaticHeaderTable.cpp||proxygen/lihttp/codec/compress/StaticHeaderTable.cpp": [
          "File: proxygen/lib/http/codec/compress/StaticHeaderTable.cpp -> proxygen/lihttp/codec/compress/StaticHeaderTable.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "107: }",
          "109: const HeaderTable& StaticHeaderTable::get() {",
          "113:   return *table;",
          "114: }",
          "",
          "[Removed Lines]",
          "110:   static const folly::Indestructible<StaticHeaderTable> table{",
          "111:     StaticHeaderTable{s_tableEntries, kEntriesSize}",
          "112:   };",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "proxygen/lib/http/codec/compress/test/HTTPArchive.cpp||proxygen/lihttp/codec/compress/test/HTTPArchive.cpp": [
          "File: proxygen/lib/http/codec/compress/test/HTTPArchive.cpp -> proxygen/lihttp/codec/compress/test/HTTPArchive.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "167: uint32_t HTTPArchive::getSize(const vector<HPACKHeader> &headers) {",
          "168:   uint32_t size = 0;",
          "171:     size += header.name.size() + header.value.size() + 2;",
          "172:   }",
          "173:   return size;",
          "",
          "[Removed Lines]",
          "170:   for (const auto header : headers) {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "201:       [&headers] (const string& name, const string& value) {",
          "202:         headers.emplace_back(name, value);",
          "203:       });",
          "205:   }",
          "206:   return result;",
          "207: }",
          "",
          "[Removed Lines]",
          "204:     result.emplace_back(headers);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "proxygen/lib/http/codec/compress/test/TestUtil.cpp||proxygen/lihttp/codec/compress/test/TestUtil.cpp": [
          "File: proxygen/lib/http/codec/compress/test/TestUtil.cpp -> proxygen/lihttp/codec/compress/test/TestUtil.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: }",
          "37: unique_ptr<IOBuf> encodeDecode(",
          "39:     HPACKEncoder& encoder,",
          "40:     HPACKDecoder& decoder) {",
          "41:   unique_ptr<IOBuf> encoded = encoder.encode(headers);",
          "",
          "[Removed Lines]",
          "38:     vector<HPACKHeader> headers,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "proxygen/lib/http/codec/compress/test/TestUtil.h||proxygen/lihttp/codec/compress/test/TestUtil.h": [
          "File: proxygen/lib/http/codec/compress/test/TestUtil.h -> proxygen/lihttp/codec/compress/test/TestUtil.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: void dumpToFile(const std::string& filename, const folly::IOBuf* buf);",
          "22: std::unique_ptr<folly::IOBuf> encodeDecode(",
          "24:   HPACKEncoder& encoder,",
          "25:   HPACKDecoder& decoder);",
          "",
          "[Removed Lines]",
          "23:   std::vector<HPACKHeader> headers,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}