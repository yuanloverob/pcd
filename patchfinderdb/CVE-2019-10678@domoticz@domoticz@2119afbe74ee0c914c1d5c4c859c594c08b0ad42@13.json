{
  "cve_id": "CVE-2019-10678",
  "cve_desc": "Domoticz before 4.10579 neglects to categorize \\n and \\r as insecure argument options.",
  "repo": "domoticz/domoticz",
  "patch_hash": "2119afbe74ee0c914c1d5c4c859c594c08b0ad42",
  "patch_info": {
    "commit_hash": "2119afbe74ee0c914c1d5c4c859c594c08b0ad42",
    "repo": "domoticz/domoticz",
    "commit_url": "https://github.com/domoticz/domoticz/commit/2119afbe74ee0c914c1d5c4c859c594c08b0ad42",
    "files": [
      "main/Helper.cpp"
    ],
    "message": "Do not allow enters/returns in arguments (thanks to Fabio Carretto)",
    "before_after_code_files": [
      "main/Helper.cpp||main/Helper.cpp"
    ]
  },
  "patch_diff": {
    "main/Helper.cpp||main/Helper.cpp": [
      "File: main/Helper.cpp -> main/Helper.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "1014:  \"$\",",
      "1015:  \"<\",",
      "1016:  \">\",",
      "1017:  NULL",
      "1018: };",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1017:  \"\\n\",",
      "1018:  \"\\r\",",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "7e3ef71a88930befce65bb400beac9c4ea908129",
      "candidate_info": {
        "commit_hash": "7e3ef71a88930befce65bb400beac9c4ea908129",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/7e3ef71a88930befce65bb400beac9c4ea908129",
        "files": [
          "main/mainworker.cpp"
        ],
        "message": "RFXCom, Async, Stop displaying parameters when port is disabled",
        "before_after_code_files": [
          "main/mainworker.cpp||main/mainworker.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "main/mainworker.cpp||main/mainworker.cpp": [
          "File: main/mainworker.cpp -> main/mainworker.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "10445:    break;",
          "10446:   }",
          "10450:   {",
          "10550:   }",
          "10552:   WriteMessageEnd();",
          "10553:  }",
          "10554: }",
          "",
          "[Removed Lines]",
          "10448:   WriteMessage(\"Baudrate    = \", false);",
          "10449:   switch (pResponse->ASYNCPORT.baudrate)",
          "10451:   case asyncbaud110:",
          "10452:    WriteMessage(\"110\");",
          "10453:    break;",
          "10454:   case asyncbaud300:",
          "10455:    WriteMessage(\"300\");",
          "10456:    break;",
          "10457:   case asyncbaud600:",
          "10458:    WriteMessage(\"600\");",
          "10459:    break;",
          "10460:   case asyncbaud1200:",
          "10461:    WriteMessage(\"1200\");",
          "10462:    break;",
          "10463:   case asyncbaud2400:",
          "10464:    WriteMessage(\"2400\");",
          "10465:    break;",
          "10466:   case asyncbaud4800:",
          "10467:    WriteMessage(\"4800\");",
          "10468:    break;",
          "10469:   case asyncbaud9600:",
          "10470:    WriteMessage(\"9600\");",
          "10471:    break;",
          "10472:   case asyncbaud14400:",
          "10473:    WriteMessage(\"14400\");",
          "10474:    break;",
          "10475:   case asyncbaud19200:",
          "10476:    WriteMessage(\"19200\");",
          "10477:    break;",
          "10478:   case asyncbaud38400:",
          "10479:    WriteMessage(\"38400\");",
          "10480:    break;",
          "10481:   case asyncbaud57600:",
          "10482:    WriteMessage(\"57600\");",
          "10483:    break;",
          "10484:   case asyncbaud115200:",
          "10485:    WriteMessage(\"115200\");",
          "10486:    break;",
          "10487:   default:",
          "10488:    sprintf(szTmp, \"ERROR: Unknown baudrate type for Packet type= %02X:%02X\", pResponse->ASYNCPORT.packettype, pResponse->ASYNCPORT.subtype);",
          "10489:    WriteMessage(szTmp);",
          "10490:    break;",
          "10491:   }",
          "10492:   WriteMessage(\"Parity      = \", false);",
          "10493:   switch (pResponse->ASYNCPORT.parity)",
          "10494:   {",
          "10495:   case asyncParityNo:",
          "10496:    WriteMessage(\"None\");",
          "10497:    break;",
          "10498:   case asyncParityOdd:",
          "10499:    WriteMessage(\"Odd\");",
          "10500:    break;",
          "10501:   case asyncParityEven:",
          "10502:    WriteMessage(\"Even\");",
          "10503:    break;",
          "10504:   default:",
          "10505:    sprintf(szTmp, \"ERROR: Unknown partity type for Packet type= %02X:%02X\", pResponse->ASYNCPORT.packettype, pResponse->ASYNCPORT.subtype);",
          "10506:    WriteMessage(szTmp);",
          "10507:    break;",
          "10508:   }",
          "10509:   WriteMessage(\"Databits    = \", false);",
          "10510:   switch (pResponse->ASYNCPORT.databits)",
          "10511:   {",
          "10512:   case asyncDatabits7:",
          "10513:    WriteMessage(\"7\");",
          "10514:    break;",
          "10515:   case asyncDatabits8:",
          "10516:    WriteMessage(\"8\");",
          "10517:    break;",
          "10518:   default:",
          "10519:    sprintf(szTmp, \"ERROR: Unknown databits type for Packet type= %02X:%02X\", pResponse->ASYNCPORT.packettype, pResponse->ASYNCPORT.subtype);",
          "10520:    WriteMessage(szTmp);",
          "10521:    break;",
          "10522:   }",
          "10523:   WriteMessage(\"Stopbits    = \", false);",
          "10524:   switch (pResponse->ASYNCPORT.stopbits)",
          "10525:   {",
          "10526:   case asyncStopbits1:",
          "10527:    WriteMessage(\"1\");",
          "10528:    break;",
          "10529:   case asyncStopbits2:",
          "10530:    WriteMessage(\"2\");",
          "10531:    break;",
          "10532:   default:",
          "10533:    sprintf(szTmp, \"ERROR: Unknown stopbits type for Packet type= %02X:%02X\", pResponse->ASYNCPORT.packettype, pResponse->ASYNCPORT.subtype);",
          "10534:    WriteMessage(szTmp);",
          "10535:    break;",
          "10536:   }",
          "10537:   WriteMessage(\"Polarity    = \", false);",
          "10538:   switch (pResponse->ASYNCPORT.polarity)",
          "10539:   {",
          "10540:   case asyncPolarityNormal:",
          "10541:    WriteMessage(\"Normal\");",
          "10542:    break;",
          "10543:   case asyncPolarityInvers:",
          "10544:    WriteMessage(\"Inverted\");",
          "10545:    break;",
          "10546:   default:",
          "10547:    sprintf(szTmp, \"ERROR: Unknown stopbits type for Packet type= %02X:%02X\", pResponse->ASYNCPORT.packettype, pResponse->ASYNCPORT.subtype);",
          "10548:    WriteMessage(szTmp);",
          "10549:    break;",
          "",
          "[Added Lines]",
          "10448:   if (pResponse->ASYNCPORT.cmnd != asyncdisable)",
          "10450:    WriteMessage(\"Baudrate    = \", false);",
          "10451:    switch (pResponse->ASYNCPORT.baudrate)",
          "10452:    {",
          "10453:    case asyncbaud110:",
          "10454:     WriteMessage(\"110\");",
          "10455:     break;",
          "10456:    case asyncbaud300:",
          "10457:     WriteMessage(\"300\");",
          "10458:     break;",
          "10459:    case asyncbaud600:",
          "10460:     WriteMessage(\"600\");",
          "10461:     break;",
          "10462:    case asyncbaud1200:",
          "10463:     WriteMessage(\"1200\");",
          "10464:     break;",
          "10465:    case asyncbaud2400:",
          "10466:     WriteMessage(\"2400\");",
          "10467:     break;",
          "10468:    case asyncbaud4800:",
          "10469:     WriteMessage(\"4800\");",
          "10470:     break;",
          "10471:    case asyncbaud9600:",
          "10472:     WriteMessage(\"9600\");",
          "10473:     break;",
          "10474:    case asyncbaud14400:",
          "10475:     WriteMessage(\"14400\");",
          "10476:     break;",
          "10477:    case asyncbaud19200:",
          "10478:     WriteMessage(\"19200\");",
          "10479:     break;",
          "10480:    case asyncbaud38400:",
          "10481:     WriteMessage(\"38400\");",
          "10482:     break;",
          "10483:    case asyncbaud57600:",
          "10484:     WriteMessage(\"57600\");",
          "10485:     break;",
          "10486:    case asyncbaud115200:",
          "10487:     WriteMessage(\"115200\");",
          "10488:     break;",
          "10489:    default:",
          "10490:     sprintf(szTmp, \"ERROR: Unknown baudrate type for Packet type= %02X:%02X\", pResponse->ASYNCPORT.packettype, pResponse->ASYNCPORT.subtype);",
          "10491:     WriteMessage(szTmp);",
          "10492:     break;",
          "10493:    }",
          "10494:    WriteMessage(\"Parity      = \", false);",
          "10495:    switch (pResponse->ASYNCPORT.parity)",
          "10496:    {",
          "10497:    case asyncParityNo:",
          "10498:     WriteMessage(\"None\");",
          "10499:     break;",
          "10500:    case asyncParityOdd:",
          "10501:     WriteMessage(\"Odd\");",
          "10502:     break;",
          "10503:    case asyncParityEven:",
          "10504:     WriteMessage(\"Even\");",
          "10505:     break;",
          "10506:    default:",
          "10507:     sprintf(szTmp, \"ERROR: Unknown partity type for Packet type= %02X:%02X\", pResponse->ASYNCPORT.packettype, pResponse->ASYNCPORT.subtype);",
          "10508:     WriteMessage(szTmp);",
          "10509:     break;",
          "10510:    }",
          "10511:    WriteMessage(\"Databits    = \", false);",
          "10512:    switch (pResponse->ASYNCPORT.databits)",
          "10513:    {",
          "10514:    case asyncDatabits7:",
          "10515:     WriteMessage(\"7\");",
          "10516:     break;",
          "10517:    case asyncDatabits8:",
          "10518:     WriteMessage(\"8\");",
          "10519:     break;",
          "10520:    default:",
          "10521:     sprintf(szTmp, \"ERROR: Unknown databits type for Packet type= %02X:%02X\", pResponse->ASYNCPORT.packettype, pResponse->ASYNCPORT.subtype);",
          "10522:     WriteMessage(szTmp);",
          "10523:     break;",
          "10524:    }",
          "10525:    WriteMessage(\"Stopbits    = \", false);",
          "10526:    switch (pResponse->ASYNCPORT.stopbits)",
          "10527:    {",
          "10528:    case asyncStopbits1:",
          "10529:     WriteMessage(\"1\");",
          "10530:     break;",
          "10531:    case asyncStopbits2:",
          "10532:     WriteMessage(\"2\");",
          "10533:     break;",
          "10534:    default:",
          "10535:     sprintf(szTmp, \"ERROR: Unknown stopbits type for Packet type= %02X:%02X\", pResponse->ASYNCPORT.packettype, pResponse->ASYNCPORT.subtype);",
          "10536:     WriteMessage(szTmp);",
          "10537:     break;",
          "10538:    }",
          "10539:    WriteMessage(\"Polarity    = \", false);",
          "10540:    switch (pResponse->ASYNCPORT.polarity)",
          "10541:    {",
          "10542:    case asyncPolarityNormal:",
          "10543:     WriteMessage(\"Normal\");",
          "10544:     break;",
          "10545:    case asyncPolarityInvers:",
          "10546:     WriteMessage(\"Inverted\");",
          "10547:     break;",
          "10548:    default:",
          "10549:     sprintf(szTmp, \"ERROR: Unknown stopbits type for Packet type= %02X:%02X\", pResponse->ASYNCPORT.packettype, pResponse->ASYNCPORT.subtype);",
          "10550:     WriteMessage(szTmp);",
          "10551:     break;",
          "10552:    }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f3e4b26ebdf5cad71245a1f4be97e83518cff101",
      "candidate_info": {
        "commit_hash": "f3e4b26ebdf5cad71245a1f4be97e83518cff101",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/f3e4b26ebdf5cad71245a1f4be97e83518cff101",
        "files": [
          "hardware/XiaomiGateway.cpp",
          "hardware/XiaomiGateway.h"
        ],
        "message": "Xiaomi, using correct (application default) way to update temp/hum/pressure (should solve #3010)",
        "before_after_code_files": [
          "hardware/XiaomiGateway.cpp||hardware/XiaomiGateway.cpp",
          "hardware/XiaomiGateway.h||hardware/XiaomiGateway.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "hardware/XiaomiGateway.cpp||hardware/XiaomiGateway.cpp": [
          "File: hardware/XiaomiGateway.cpp -> hardware/XiaomiGateway.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "448:  }",
          "449: }",
          "452: {",
          "453:  unsigned int sID = GetShortID(nodeid);",
          "454:  if (sID > 0) {",
          "456:  }",
          "457: }",
          "",
          "[Removed Lines]",
          "451: void XiaomiGateway::InsertUpdatePressure(const std::string &nodeid, const std::string &Name, const int Pressure, const int battery)",
          "455:   SendPressureSensor(sID, 1, battery, static_cast<float>(Pressure), Name);",
          "",
          "[Added Lines]",
          "451: void XiaomiGateway::InsertUpdatePressure(const std::string &nodeid, const std::string &Name, const float Pressure, const int battery)",
          "455:   SendPressureSensor(sID, 1, battery, Pressure, Name);",
          "456:  }",
          "457: }",
          "459: void XiaomiGateway::InsertUpdateTempHumPressure(const std::string &nodeid, const std::string &Name, const float Temperature, const int Humidity, const float Pressure, const int battery)",
          "460: {",
          "461:  unsigned int sID = GetShortID(nodeid);",
          "462:  int barometric_forcast = baroForecastNoInfo;",
          "463:  if (Pressure < 1000)",
          "464:   barometric_forcast = baroForecastRain;",
          "465:  else if (Pressure < 1020)",
          "466:   barometric_forcast = baroForecastCloudy;",
          "467:  else if (Pressure < 1030)",
          "468:   barometric_forcast = baroForecastPartlyCloudy;",
          "469:  else",
          "470:   barometric_forcast = baroForecastSunny;",
          "472:  if (sID > 0) {",
          "473:   SendTempHumBaroSensor(sID, battery, Temperature, Humidity, Pressure, barometric_forcast, Name);",
          "474:  }",
          "475: }",
          "477: void XiaomiGateway::InsertUpdateTempHum(const std::string &nodeid, const std::string &Name, const float Temperature, const int Humidity, const int battery)",
          "478: {",
          "479:  unsigned int sID = GetShortID(nodeid);",
          "480:  if (sID > 0) {",
          "481:   SendTempHumSensor(sID, battery, Temperature, Humidity, Name);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1238:       }",
          "1239:      }",
          "1240:      else if ((name == \"Xiaomi Temperature/Humidity\") || (name == \"Xiaomi Aqara Weather\")) {",
          "1241:       std::string temperature = root2[\"temperature\"].asString();",
          "1242:       std::string humidity = root2[\"humidity\"].asString();",
          "1247:        if (temp < 99) {",
          "1248:         TrueGateway->InsertUpdateTemperature(sid.c_str(), \"Xiaomi Temperature\", temp, battery);",
          "1249:        }",
          "1254:        if (hum > 1) {",
          "1255:         TrueGateway->InsertUpdateHumidity(sid.c_str(), \"Xiaomi Humidity\", hum, battery);",
          "1256:        }",
          "1257:       }",
          "1266:      }",
          "1267:      else if (name == \"Xiaomi RGB Gateway\") {",
          "1268:       std::string rgb = root2[\"rgb\"].asString();",
          "",
          "[Removed Lines]",
          "1244:       if (temperature != \"\") {",
          "1245:        float temp = (float)atoi(temperature.c_str());",
          "1246:        temp = temp / 100;",
          "1250:       }",
          "1251:       if (humidity != \"\") {",
          "1252:        int hum = atoi(humidity.c_str());",
          "1253:        hum = hum / 100;",
          "1258:       if (name == \"Xiaomi Aqara Weather\") {",
          "1259:        std::string pressure = root2[\"pressure\"].asString();",
          "1260:        int pres = atoi(pressure.c_str());",
          "1261:        pres = pres / 100;",
          "1262:        if (pres > 1) {",
          "1263:         TrueGateway->InsertUpdatePressure(sid.c_str(), \"Xiaomi Pressure\", pres, battery);",
          "1264:        }",
          "1265:       }",
          "",
          "[Added Lines]",
          "1270:       float pressure = 0;",
          "1272:       if (name == \"Xiaomi Aqara Weather\") {",
          "1273:        std::string szPressure = root2[\"pressure\"].asString();",
          "1274:        pressure = static_cast<float>(atof(szPressure.c_str())) / 100.0f;",
          "1275:       }",
          "1277:       if ((!temperature.empty()) && (!humidity.empty()) && (pressure != 0))",
          "1278:       {",
          "1280:        float temp = (float)atof(temperature.c_str()) / 100.0f;",
          "1281:        int hum = atoi(humidity.c_str()) / 100;",
          "1282:        TrueGateway->InsertUpdateTempHumPressure(sid.c_str(), \"Xiaomi Pressure\", temp, hum, pressure, battery);",
          "1283:       }",
          "1284:       else if ((!temperature.empty()) && (!humidity.empty()))",
          "1285:       {",
          "1287:        float temp = (float)atof(temperature.c_str()) / 100.0f;",
          "1288:        int hum = atoi(humidity.c_str()) / 100;",
          "1289:        TrueGateway->InsertUpdateTempHum(sid.c_str(), \"Xiaomi Pressure\", temp, hum, battery);",
          "1290:       }",
          "1291:       else if (temperature != \"\") {",
          "1292:        float temp = (float)atof(temperature.c_str())/100.0f;",
          "1296:       } else if (humidity != \"\") {",
          "1297:        int hum = atoi(humidity.c_str()) / 100;",
          "",
          "---------------"
        ],
        "hardware/XiaomiGateway.h||hardware/XiaomiGateway.h": [
          "File: hardware/XiaomiGateway.h -> hardware/XiaomiGateway.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "30:  bool SendMessageToGateway(const std::string &controlmessage);",
          "31:  void InsertUpdateSwitch(const std::string &nodeid, const std::string &Name, const bool bIsOn, const _eSwitchType switchtype, const int unittype, const int level, const std::string &messagetype, const std::string &load_power, const std::string &power_consumed, const int battery);",
          "32:  void InsertUpdateCubeText(const std::string &nodeid, const std::string &Name, const std::string &degrees);",
          "33:  void InsertUpdateVoltage(const std::string &nodeid, const std::string &Name, const int VoltageLevel);",
          "34:  void InsertUpdateLux(const std::string &nodeid, const std::string &Name, const int Illumination, const int battery);",
          "35:  void InsertUpdateTemperature(const std::string &nodeid, const std::string &Name, const float Temperature, const int battery);",
          "36:  void InsertUpdateHumidity(const std::string &nodeid, const std::string &Name, const int Humidity, const int battery);",
          "39:  std::string GetGatewayKey();",
          "40:  unsigned int GetShortID(const std::string & nodeid);",
          "",
          "[Removed Lines]",
          "37:  void InsertUpdatePressure(const std::string &nodeid, const std::string &Name, const int Pressure, const int battery);",
          "38:  void InsertUpdateRGBGateway(const std::string &nodeid, const std::string &Name, const bool bIsOn, const int brightness, const int hue);",
          "",
          "[Added Lines]",
          "32:  void InsertUpdateRGBGateway(const std::string &nodeid, const std::string &Name, const bool bIsOn, const int brightness, const int hue);",
          "39:  void InsertUpdatePressure(const std::string &nodeid, const std::string &Name, const float Pressure, const int battery);",
          "40:  void InsertUpdateTempHumPressure(const std::string &nodeid, const std::string &Name, const float Temperature, const int Humidity, const float Pressure, const int battery);",
          "41:  void InsertUpdateTempHum(const std::string &nodeid, const std::string &Name, const float Temperature, const int Humidity, const int battery);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "efa3e38b9d98807f88a78b293322b4cdbbee8ebe",
      "candidate_info": {
        "commit_hash": "efa3e38b9d98807f88a78b293322b4cdbbee8ebe",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/efa3e38b9d98807f88a78b293322b4cdbbee8ebe",
        "files": [
          "hardware/PVOutput_Input.cpp"
        ],
        "message": "Increased PVOutput poll time to 10 minutes",
        "before_after_code_files": [
          "hardware/PVOutput_Input.cpp||hardware/PVOutput_Input.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "hardware/PVOutput_Input.cpp||hardware/PVOutput_Input.cpp": [
          "File: hardware/PVOutput_Input.cpp -> hardware/PVOutput_Input.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "55:     return true;",
          "56: }",
          "60: void CPVOutputInput::Do_Work()",
          "61: {",
          "",
          "[Removed Lines]",
          "58: #define PVOUTPUT_POLL_INTERVAL 5",
          "",
          "[Added Lines]",
          "58: #define PVOUTPUT_POLL_INTERVAL 10",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e4845ba1be27941bf9628e7b9e6468ebc9522ea1",
      "candidate_info": {
        "commit_hash": "e4845ba1be27941bf9628e7b9e6468ebc9522ea1",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/e4845ba1be27941bf9628e7b9e6468ebc9522ea1",
        "files": [
          "main/EventSystem.cpp"
        ],
        "message": "EventSystem, Counter Incremental now working (not a great way!)",
        "before_after_code_files": [
          "main/EventSystem.cpp||main/EventSystem.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "main/EventSystem.cpp||main/EventSystem.cpp": [
          "File: main/EventSystem.cpp -> main/EventSystem.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "459:    sitem.ID = std::stoull(sd[1]);",
          "460:    sitem.deviceName = l_deviceName.assign(sd[2]);",
          "464:    sitem.devType = atoi(sd[5].c_str());",
          "465:    sitem.subType = atoi(sd[6].c_str());",
          "466:    sitem.switchtype = atoi(sd[7].c_str());",
          "467:    _eSwitchType switchtype = (_eSwitchType)sitem.switchtype;",
          "468:    std::map<std::string, std::string> options = m_sql.BuildDeviceOptions(sd[10].c_str());",
          "",
          "[Removed Lines]",
          "462:    sitem.nValue = atoi(sd[3].c_str());",
          "463:    sitem.sValue = l_sValue.assign(sd[4]);",
          "",
          "[Added Lines]",
          "465:    if ((sitem.devType == pTypeGeneral) && (sitem.subType == sTypeCounterIncremental))",
          "466:    {",
          "469:     uint64_t total_min, total_max, total_real;",
          "470:     std::vector<std::vector<std::string> > result2;",
          "472:     result2 = m_sql.safe_query(\"SELECT sValue FROM DeviceStatus WHERE (ID=%\" PRIu64 \")\", sitem.ID);",
          "473:     total_max = std::stoull(result2[0][0]);",
          "476:     std::string szDate = TimeToString(NULL, TF_Date);",
          "477:     result2 = m_sql.safe_query(\"SELECT MIN(Value) FROM Meter WHERE (DeviceRowID=%\" PRIu64 \" AND Date>='%q')\", sitem.ID, szDate.c_str());",
          "478:     if (!result2.empty())",
          "479:     {",
          "480:      total_min = std::stoull(result2[0][0]);",
          "481:      total_real = total_max - total_min;",
          "483:      sd[4] = std::to_string(total_real); //sitem.sValue = l_sValue.assign(sd[4]);",
          "484:     }",
          "485:    }",
          "487:    sitem.nValue = atoi(sd[3].c_str());",
          "488:    sitem.sValue = l_sValue.assign(sd[4]);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "614:   std::vector<std::string> splitresults;",
          "615:   StringSplit(sitem.sValue, \";\", splitresults);",
          "617:   float temp = 0;",
          "618:   float chill = 0;",
          "619:   int humidity = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "641:   if ((itt->second.devType == pTypeGeneral) && (itt->second.subType == sTypeCounterIncremental))",
          "642:    splitresults.clear();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "845:   {",
          "846:    if (!splitresults.empty())",
          "847:    {",
          "850:     {",
          "851:      utilityval = static_cast<float>(atof(splitresults[0].c_str()));",
          "852:      isUtility = true;",
          "",
          "[Removed Lines]",
          "848:     if ((sitem.subType == sTypeVisibility)",
          "849:      || (sitem.subType == sTypeSolarRadiation))",
          "",
          "[Added Lines]",
          "875:     if ((sitem.subType == sTypeVisibility) || (sitem.subType == sTypeSolarRadiation))",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "883:     }",
          "884:     else if (sitem.subType == sTypeCounterIncremental)",
          "885:     {",
          "887:      std::string szDate = TimeToString(NULL, TF_Date);",
          "890:       sitem.ID, szDate.c_str());",
          "891:      if (!result2.empty())",
          "892:      {",
          "899:       total_real = total_max - total_min;",
          "901:       char szTmp[100];",
          "",
          "[Removed Lines]",
          "888:      std::vector<std::vector<std::string> > result2;",
          "889:      result2 = m_sql.safe_query(\"SELECT MIN(Value), MAX(Value) FROM Meter WHERE (DeviceRowID=%\" PRIu64 \" AND Date>='%q')\",",
          "893:       std::vector<std::string> sd2 = result2[0];",
          "895:       uint64_t total_min, total_max, total_real;",
          "897:       total_min = std::stoull(sd2[0]);",
          "898:       total_max = std::stoull(sd2[1]);",
          "",
          "[Added Lines]",
          "912:      uint64_t total_min, total_max, total_real;",
          "913:      std::vector<std::vector<std::string> > result2;",
          "915:      result2 = m_sql.safe_query(\"SELECT sValue FROM DeviceStatus WHERE (ID=%\" PRIu64 \")\", sitem.ID);",
          "916:      total_max = std::stoull(result2[0][0]);",
          "920:      result2 = m_sql.safe_query(\"SELECT MIN(Value) FROM Meter WHERE (DeviceRowID=%\" PRIu64 \" AND Date>='%q')\",",
          "924:       total_min = std::stoull(result2[0][0]);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1464:   _eSwitchType switchType = (_eSwitchType)atoi(sd[1].c_str());",
          "1465:   std::map<std::string, std::string> options = m_sql.BuildDeviceOptions(result[0][4].c_str());",
          "1467:   if (GetEventTrigger(ulDevID, REASON_DEVICE, true))",
          "1468:   {",
          "1469:    _tEventQueue item;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1493:   std::string osValue = sValue;",
          "1495:   if ((devType == pTypeGeneral) && (subType == sTypeCounterIncremental))",
          "1496:   {",
          "1500:    std::string szDate = TimeToString(NULL, TF_Date);",
          "1501:    std::vector<std::vector<std::string> > result2;",
          "1503:    uint64_t total_min, total_max, total_real;",
          "1505:    result2 = m_sql.safe_query(\"SELECT sValue FROM DeviceStatus WHERE (ID=%\" PRIu64 \")\", ulDevID);",
          "1506:    total_max = std::stoull(result2[0][0]);",
          "1508:    result2 = m_sql.safe_query(\"SELECT MIN(Value) FROM Meter WHERE (DeviceRowID=%\" PRIu64 \" AND Date>='%q')\", ulDevID, szDate.c_str());",
          "1509:    if (!result2.empty())",
          "1510:    {",
          "1511:     total_min = std::stoull(result2[0][0]);",
          "1512:     total_real = total_max - total_min;",
          "1514:     osValue = std::to_string(total_real); //sitem.sValue = l_sValue.assign(sd[4]);",
          "1515:    }",
          "1516:   }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1471:    item.id = ulDevID;",
          "1472:    item.devname = devname;",
          "1473:    item.nValue = nValue;",
          "1476:    item.trigger = NULL;",
          "1477:    boost::unique_lock<boost::shared_mutex> devicestatesMutexLock(m_devicestatesMutex);",
          "1478:    std::map<uint64_t, _tDeviceStatus>::iterator itt = m_devicestates.find(ulDevID);",
          "",
          "[Removed Lines]",
          "1474:    item.sValue = sValue;",
          "1475:    item.nValueWording = UpdateSingleState(ulDevID, devname, nValue, sValue, devType, subType, switchType, \"\", 255, options);",
          "",
          "[Added Lines]",
          "1525:    item.sValue = osValue;",
          "1526:    item.nValueWording = UpdateSingleState(ulDevID, devname, nValue, osValue.c_str(), devType, subType, switchType, \"\", 255, options);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1495:    m_eventqueue.push(item);",
          "1496:   }",
          "1497:   else",
          "1499:  }",
          "1500:  else",
          "1501:  {",
          "",
          "[Removed Lines]",
          "1498:    UpdateSingleState(ulDevID, devname, nValue, sValue, devType, subType, switchType, sd[2], atoi(sd[3].c_str()), options);",
          "",
          "[Added Lines]",
          "1549:    UpdateSingleState(ulDevID, devname, nValue, osValue.c_str(), devType, subType, switchType, sd[2], atoi(sd[3].c_str()), options);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8a17b4251e06a34a23aff413f1bf6c2383b27d64",
      "candidate_info": {
        "commit_hash": "8a17b4251e06a34a23aff413f1bf6c2383b27d64",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/8a17b4251e06a34a23aff413f1bf6c2383b27d64",
        "files": [
          "main/EventSystem.cpp"
        ],
        "message": "EventSystem, UpdateDevice, handle notifications",
        "before_after_code_files": [
          "main/EventSystem.cpp||main/EventSystem.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "main/EventSystem.cpp||main/EventSystem.cpp": [
          "File: main/EventSystem.cpp -> main/EventSystem.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "3625: {",
          "3627:  std::vector<std::vector<std::string> > result;",
          "3629:   idx);",
          "3630:  if (!result.empty())",
          "3631:  {",
          "",
          "[Removed Lines]",
          "3628:  result = m_sql.safe_query(\"SELECT Type, SubType, Name, SwitchType, LastLevel, Options, nValue, sValue, Protected, LastUpdate, HardwareID, DeviceID FROM DeviceStatus WHERE (ID=='%\" PRIu64 \"')\",",
          "",
          "[Added Lines]",
          "3628:  result = m_sql.safe_query(\"SELECT Type, SubType, Name, SwitchType, LastLevel, Options, nValue, sValue, Protected, LastUpdate, HardwareID, DeviceID, Unit FROM DeviceStatus WHERE (ID=='%\" PRIu64 \"')\",",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3643:   std::string db_LastUpdate = sd[9];",
          "3644:   int HardwareID = atoi(sd[10].c_str());",
          "3645:   std::string DeviceID = sd[11];",
          "3647:   std::string szLastUpdate = TimeToString(NULL, TF_DateTime);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3646:   int Unit = atoi(sd[12].c_str());",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3765:   }",
          "3766:   if (bEventTrigger)",
          "3767:    ProcessDevice(0, idx, 0, devType, subType, 255, 255, nValue, sValue.c_str(), dname);",
          "3768:  }",
          "3769:  else",
          "3770:   _log.Log(LOG_ERROR, \"EventSystem: UpdateDevice IDX %\" PRIu64 \" not found!\", idx);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3771:   m_notifications.CheckAndHandleNotification(idx, HardwareID, DeviceID, dname, Unit, devType, subType, nValue, sValue);",
          "",
          "---------------"
        ]
      }
    }
  ]
}