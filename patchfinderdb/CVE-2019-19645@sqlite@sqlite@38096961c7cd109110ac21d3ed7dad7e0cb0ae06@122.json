{
  "cve_id": "CVE-2019-19645",
  "cve_desc": "alter.c in SQLite through 3.30.1 allows attackers to trigger infinite recursion via certain types of self-referential views in conjunction with ALTER TABLE statements.",
  "repo": "sqlite/sqlite",
  "patch_hash": "38096961c7cd109110ac21d3ed7dad7e0cb0ae06",
  "patch_info": {
    "commit_hash": "38096961c7cd109110ac21d3ed7dad7e0cb0ae06",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/38096961c7cd109110ac21d3ed7dad7e0cb0ae06",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/alter.c",
      "src/build.c",
      "src/sqliteInt.h",
      "test/altertab3.test"
    ],
    "message": "Avoid infinite recursion in the ALTER TABLE code when a view contains an unused CTE that references, directly or indirectly, the view itself.\n\nFossilOrigin-Name: 1d2e53a39b87e364685e21de137655b6eee725e4c6d27fc90865072d7c5892b5",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/alter.c||src/alter.c",
      "src/build.c||src/build.c",
      "src/sqliteInt.h||src/sqliteInt.h",
      "test/altertab3.test||test/altertab3.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: c5d44143599f3fe98492b2b900fa3d77925c7be545096251055ceeab899a41f1",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/alter.c||src/alter.c": [
      "File: src/alter.c -> src/alter.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "760:   Parse *pParse = pWalker->pParse;",
      "761:   int i;",
      "762:   if( pParse->nErr ) return WRC_Abort;",
      "763:   if( ALWAYS(p->pEList) ){",
      "764:     ExprList *pList = p->pEList;",
      "765:     for(i=0; i<pList->nExpr; i++){",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "763:   if( p->selFlags & SF_View ) return WRC_Prune;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "853: static int renameColumnSelectCb(Walker *pWalker, Select *p){",
      "854:   renameWalkWith(pWalker, p);",
      "855:   return WRC_Continue;",
      "856: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "855:   if( p->selFlags & SF_View ) return WRC_Prune;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1316:   if( sParse.pNewTable ){",
      "1317:     Select *pSelect = sParse.pNewTable->pSelect;",
      "1318:     if( pSelect ){",
      "1319:       sParse.rc = SQLITE_OK;",
      "1321:       rc = (db->mallocFailed ? SQLITE_NOMEM : sParse.rc);",
      "1322:       if( rc==SQLITE_OK ){",
      "1323:         sqlite3WalkSelect(&sWalker, pSelect);",
      "",
      "[Removed Lines]",
      "1320:       sqlite3SelectPrep(&sParse, sParse.pNewTable->pSelect, 0);",
      "",
      "[Added Lines]",
      "1321:       pSelect->selFlags &= ~SF_View;",
      "1323:       sqlite3SelectPrep(&sParse, pSelect, 0);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1434:   int i;",
      "1435:   RenameCtx *p = pWalker->u.pRename;",
      "1436:   SrcList *pSrc = pSelect->pSrc;",
      "1437:   if( pSrc==0 ){",
      "1438:     assert( pWalker->pParse->db->mallocFailed );",
      "1439:     return WRC_Abort;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1440:   if( pSelect->selFlags & SF_View ) return WRC_Prune;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1514:         if( pTab->pSelect ){",
      "1515:           if( isLegacy==0 ){",
      "1516:             NameContext sNC;",
      "1517:             memset(&sNC, 0, sizeof(sNC));",
      "1518:             sNC.pParse = &sParse;",
      "1520:             sqlite3SelectPrep(&sParse, pTab->pSelect, &sNC);",
      "1521:             if( sParse.nErr ) rc = sParse.rc;",
      "1522:             sqlite3WalkSelect(&sWalker, pTab->pSelect);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1520:             Select *pSelect = pTab->pSelect;",
      "1525:             assert( pSelect->selFlags & SF_View );",
      "1526:             pSelect->selFlags &= ~SF_View;",
      "",
      "---------------"
    ],
    "src/build.c||src/build.c": [
      "File: src/build.c -> src/build.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2488:   if( IN_RENAME_OBJECT ){",
      "2489:     p->pSelect = pSelect;",
      "2490:     pSelect = 0;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2488:   pSelect->selFlags |= SF_View;",
      "",
      "---------------"
    ],
    "src/sqliteInt.h||src/sqliteInt.h": [
      "File: src/sqliteInt.h -> src/sqliteInt.h"
    ],
    "test/altertab3.test||test/altertab3.test": [
      "File: test/altertab3.test -> test/altertab3.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "487:   ALTER TABLE a RENAME a TO b;",
      "488: }",
      "491: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "490: #------------------------------------------------------------------------",
      "491: #",
      "492: reset_db",
      "493: do_execsql_test 22.1 {",
      "494:   CREATE TABLE t1(a);",
      "495:   CREATE VIEW v2(b) AS SELECT * FROM v2;",
      "496: }",
      "498: do_catchsql_test 22.2 {",
      "499:   ALTER TABLE t1 RENAME TO t4;",
      "500: } {1 {error in view v2: view v2 is circularly defined}}",
      "502: do_execsql_test 22.3 {",
      "503:   DROP VIEW v2;",
      "504:   CREATE VIEW v2(b) AS WITH t3 AS (SELECT b FROM v2) SELECT * FROM t3;",
      "505: }",
      "507: breakpoint",
      "508: do_catchsql_test 22.4 {",
      "509:   ALTER TABLE t1 RENAME TO t4;",
      "510: } {1 {error in view v2: view v2 is circularly defined}}",
      "512: do_execsql_test 22.5 {",
      "513:   DROP VIEW v2;",
      "514:   CREATE VIEW v2(b) AS WITH t3 AS (SELECT b FROM v2) VALUES(1);",
      "515: }",
      "517: do_catchsql_test 22.6 {",
      "518:   ALTER TABLE t1 RENAME TO t4;",
      "519: } {0 {}}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "4b50da9c951d036483407459d58536db35487d36",
      "candidate_info": {
        "commit_hash": "4b50da9c951d036483407459d58536db35487d36",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/4b50da9c951d036483407459d58536db35487d36",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/main.c",
          "src/sqlite.h.in",
          "test/quote.test"
        ],
        "message": "Restore the legacy behavior of enabling double-quoted string literals in all contexts.  But also provide a new compile-time option (SQLITE_DQS) to change the default to something more restrictive.\n\nFossilOrigin-Name: 97a94446f3941c313c4c3a19d9f89f24d7ef06e842f79d66f0ad88810b872084",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/main.c||src/main.c",
          "src/sqlite.h.in||src/sqlite.h.in",
          "test/quote.test||test/quote.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: eab4297577e4d325fed4757867fc77860de7448998d86f098c8a50272e17d35e",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/main.c||src/main.c": [
          "File: src/main.c -> src/main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3073:   db->szMmap = sqlite3GlobalConfig.szMmap;",
          "3074:   db->nextPagesize = 0;",
          "3075:   db->nMaxSorterMmap = 0x7FFFFFFF;",
          "3077:                  | SQLITE_DqsDML",
          "3078: #if !defined(SQLITE_DEFAULT_AUTOMATIC_INDEX) || SQLITE_DEFAULT_AUTOMATIC_INDEX",
          "3079:                  | SQLITE_AutoIndex",
          "3080: #endif",
          "",
          "[Removed Lines]",
          "3076:   db->flags |= SQLITE_ShortColNames | SQLITE_EnableTrigger | SQLITE_CacheSpill",
          "",
          "[Added Lines]",
          "3076:   db->flags |= SQLITE_ShortColNames",
          "3077:                  | SQLITE_EnableTrigger",
          "3078:                  | SQLITE_CacheSpill",
          "3095: #if !defined(SQLITE_DQS)",
          "3096: # define SQLITE_DQS 3",
          "3097: #endif",
          "3098: #if (SQLITE_DQS&1)==1",
          "3100: #endif",
          "3101: #if (SQLITE_DQS&2)==2",
          "3102:                  | SQLITE_DqsDDL",
          "3103: #endif",
          "",
          "---------------"
        ],
        "src/sqlite.h.in||src/sqlite.h.in": [
          "File: src/sqlite.h.in -> src/sqlite.h.in"
        ],
        "test/quote.test||test/quote.test": [
          "File: test/quote.test -> test/quote.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "92: # SQLite can load such a schema from disk.",
          "93: #",
          "94: reset_db",
          "95: do_execsql_test 2.0 {",
          "96:   CREATE TABLE t1(x, y, z);",
          "97: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "95: sqlite3_db_config db SQLITE_DBCONFIG_DQS_DDL 0",
          "96: sqlite3_db_config db SQLITE_DBCONFIG_DQS_DML 1",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e4c26c41b4e8e5b047f620c8c51282b869ea21a2",
      "candidate_info": {
        "commit_hash": "e4c26c41b4e8e5b047f620c8c51282b869ea21a2",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e4c26c41b4e8e5b047f620c8c51282b869ea21a2",
        "files": [
          "ext/session/sqlite3session.h",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Fix a typo in a comment that is used to generate session documentation.\n\nFossilOrigin-Name: a1f50d57ce76f6c08a0ddbdd3c3fe2732d0e57dda14cb9aa3da00a14ceb4bc44",
        "before_after_code_files": [
          "ext/session/sqlite3session.h||ext/session/sqlite3session.h",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/session/sqlite3session.h||ext/session/sqlite3session.h": [
          "File: ext/session/sqlite3session.h -> ext/session/sqlite3session.h"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 3873941c4fb9aa2d0de1129722c5fcdf2be1ea261677d4841ed99f896c778459",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "660107f35eb9f8e74ea26f6a66c6c05d2cb1f83e",
      "candidate_info": {
        "commit_hash": "660107f35eb9f8e74ea26f6a66c6c05d2cb1f83e",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/660107f35eb9f8e74ea26f6a66c6c05d2cb1f83e",
        "files": [
          "manifest",
          "manifest.uuid",
          "tool/symbols.sh"
        ],
        "message": "Update tool/symbols.sh to ignore symbols from sessions and rebaser and to not try to compile with ICU which is not available on all platforms.\n\nFossilOrigin-Name: 0bab4ece6e81916d0f7255a8e553b8ca040cb8a96ab21e294212e232119f8ddc",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "tool/symbols.sh||tool/symbols.sh"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 0ada58e9303d53aba8bdc37abe5904aa40e91f80e247eb51cb1192387b0d661c",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tool/symbols.sh||tool/symbols.sh": [
          "File: tool/symbols.sh -> tool/symbols.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #",
          "6: make sqlite3.c",
          "9: gcc -c -DSQLITE_ENABLE_FTS3 -DSQLITE_ENABLE_RTREE \\",
          "10:   -DSQLITE_ENABLE_MEMORY_MANAGEMENT -DSQLITE_ENABLE_STAT3 \\",
          "11:   -DSQLITE_ENABLE_MEMSYS5 -DSQLITE_ENABLE_UNLOCK_NOTIFY \\",
          "12:   -DSQLITE_ENABLE_COLUMN_METADATA -DSQLITE_ENABLE_ATOMIC_WRITE \\",
          "14:   sqlite3.c",
          "15: nm sqlite3.o | grep ' [TD] ' | sort -k 3",
          "20: echo '****** Dependencies of the core. No extensions. No OS interface *******'",
          "21: gcc -c -DSQLITE_ENABLE_MEMORY_MANAGEMENT -DSQLITE_ENABLE_STAT3 \\",
          "",
          "[Removed Lines]",
          "8: echo '****** Exported symbols from a build including RTREE, FTS4 & ICU ******'",
          "13:   -DSQLITE_ENABLE_ICU -DSQLITE_ENABLE_PREUPDATE_HOOK -DSQLITE_ENABLE_SESSION \\",
          "17: echo '****** Surplus symbols from a build including RTREE, FTS4 & ICU ******'",
          "18: nm sqlite3.o | grep ' [TD] ' | grep -v ' .*sqlite3_'",
          "",
          "[Added Lines]",
          "8: echo '****** Exported symbols from a build including RTREE, FTS4 & FTS5 ******'",
          "13:   -DSQLITE_ENABLE_PREUPDATE_HOOK -DSQLITE_ENABLE_SESSION \\",
          "14:   -DSQLITE_ENABLE_FTS5 -DSQLITE_ENABLE_GEOPOLY \\",
          "18: echo '****** Surplus symbols from a build including RTREE, FTS4 & FTS5 ******'",
          "19: nm sqlite3.o | grep ' [TD] ' |",
          "20:    egrep -v ' .*sqlite3(session|rebaser|changeset|changegroup)?_'",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5198ff5767c4367124c3aecbb483c209c2f0b17b",
      "candidate_info": {
        "commit_hash": "5198ff5767c4367124c3aecbb483c209c2f0b17b",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/5198ff5767c4367124c3aecbb483c209c2f0b17b",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "test/autoindex1.test",
          "test/eqp.test",
          "test/rowvalue4.test"
        ],
        "message": "Do not generate subroutines for non-static SELECT and EXISTS expressions. Fix up some test cases to account for the minor changes in EXPLAIN QUERY PLAN output.\n\nFossilOrigin-Name: 06de44ec9e173992ca9afb89dd2b4e40d2a7e35512c7959603cdceb606f5dfbd",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "test/autoindex1.test||test/autoindex1.test",
          "test/eqp.test||test/eqp.test",
          "test/rowvalue4.test||test/rowvalue4.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 6b24d3fb94e787d25e49501714780dfb0c0c99077102056aa68445f4808cdd57",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2865:   Vdbe *v = pParse->pVdbe;",
          "2866:   assert( v!=0 );",
          "",
          "[Removed Lines]",
          "2869:   if( ExprHasProperty(pExpr, EP_Subrtn) ){",
          "2870:     sqlite3VdbeAddOp2(v, OP_Gosub, pExpr->y.sub.regReturn, pExpr->y.sub.iAddr);",
          "2871:     return pExpr->iTable;",
          "2872:   }",
          "2875:   ExprSetProperty(pExpr, EP_Subrtn);",
          "2876:   pExpr->y.sub.regReturn = ++pParse->nMem;",
          "2877:   pExpr->y.sub.iAddr =",
          "2878:     sqlite3VdbeAddOp2(v, OP_Integer, 0, pExpr->y.sub.regReturn) + 1;",
          "2879:   VdbeComment((v, \"return address\"));",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2891:   if( !ExprHasProperty(pExpr, EP_VarSelect) ){",
          "2892:     addrOnce = sqlite3VdbeAddOp0(v, OP_Once); VdbeCoverage(v);",
          "2893:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2881:     if( ExprHasProperty(pExpr, EP_Subrtn) ){",
          "2882:       sqlite3VdbeAddOp2(v, OP_Gosub, pExpr->y.sub.regReturn,",
          "2883:                         pExpr->y.sub.iAddr);",
          "2884:       return pExpr->iTable;",
          "2885:     }",
          "2888:     ExprSetProperty(pExpr, EP_Subrtn);",
          "2889:     pExpr->y.sub.regReturn = ++pParse->nMem;",
          "2890:     pExpr->y.sub.iAddr =",
          "2891:       sqlite3VdbeAddOp2(v, OP_Integer, 0, pExpr->y.sub.regReturn) + 1;",
          "2892:     VdbeComment((v, \"return address\"));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2939:   ExprSetVVAProperty(pExpr, EP_NoReduce);",
          "2940:   if( addrOnce ){",
          "2941:     sqlite3VdbeJumpHere(v, addrOnce);",
          "2948:   return rReg;",
          "2949: }",
          "",
          "[Removed Lines]",
          "2942:   }",
          "2945:   sqlite3VdbeAddOp1(v, OP_Return, pExpr->y.sub.regReturn);",
          "2946:   sqlite3VdbeChangeP1(v, pExpr->y.sub.iAddr-1, sqlite3VdbeCurrentAddr(v)-1);",
          "",
          "[Added Lines]",
          "2946:     sqlite3VdbeAddOp1(v, OP_Return, pExpr->y.sub.regReturn);",
          "2947:     sqlite3VdbeChangeP1(v, pExpr->y.sub.iAddr-1, sqlite3VdbeCurrentAddr(v)-1);",
          "2948:   }",
          "",
          "---------------"
        ],
        "test/autoindex1.test||test/autoindex1.test": [
          "File: test/autoindex1.test -> test/autoindex1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "184: } {",
          "185:   QUERY PLAN",
          "186:   |--SEARCH TABLE t501 USING INTEGER PRIMARY KEY (rowid=?)",
          "188:      `--SCAN TABLE t502",
          "189: }",
          "190: do_eqp_test autoindex1-501 {",
          "",
          "[Removed Lines]",
          "187:   `--LIST SUBQUERY",
          "",
          "[Added Lines]",
          "187:   `--LIST SUBQUERY xxxxxx",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "193: } {",
          "194:   QUERY PLAN",
          "195:   |--SCAN TABLE t501",
          "197:      `--SEARCH TABLE t502 USING AUTOMATIC COVERING INDEX (y=?)",
          "198: }",
          "199: do_eqp_test autoindex1-502 {",
          "",
          "[Removed Lines]",
          "196:   `--CORRELATED LIST SUBQUERY",
          "",
          "[Added Lines]",
          "196:   `--CORRELATED LIST SUBQUERY xxxxxx",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "203: } {",
          "204:   QUERY PLAN",
          "205:   |--SEARCH TABLE t501 USING INTEGER PRIMARY KEY (rowid=?)",
          "207:      `--SCAN TABLE t502",
          "208: }",
          "",
          "[Removed Lines]",
          "206:   `--CORRELATED LIST SUBQUERY",
          "",
          "[Added Lines]",
          "206:   `--CORRELATED LIST SUBQUERY xxxxxx",
          "",
          "---------------"
        ],
        "test/eqp.test||test/eqp.test": [
          "File: test/eqp.test -> test/eqp.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "286: } {",
          "287:   QUERY PLAN",
          "288:   |--SCAN TABLE t1",
          "290:      `--SCAN TABLE t2",
          "291: }",
          "292: det 3.3.2 {",
          "",
          "[Removed Lines]",
          "289:   `--LIST SUBQUERY",
          "",
          "[Added Lines]",
          "289:   `--LIST SUBQUERY xxxxxx",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "294: } {",
          "295:   QUERY PLAN",
          "296:   |--SCAN TABLE t1",
          "298:      `--SCAN TABLE t2",
          "299: }",
          "300: det 3.3.3 {",
          "",
          "[Removed Lines]",
          "297:   `--CORRELATED LIST SUBQUERY",
          "",
          "[Added Lines]",
          "297:   `--CORRELATED LIST SUBQUERY xxxxxx",
          "",
          "---------------"
        ],
        "test/rowvalue4.test||test/rowvalue4.test": [
          "File: test/rowvalue4.test -> test/rowvalue4.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "235: } {",
          "236:   QUERY PLAN",
          "237:   |--SEARCH TABLE d2 USING INDEX d2ab (a=? AND b=?)",
          "239:   |  `--SCAN TABLE d1",
          "241:      `--SCAN TABLE d1",
          "242: }",
          "",
          "[Removed Lines]",
          "238:   |--LIST SUBQUERY",
          "240:   `--LIST SUBQUERY",
          "",
          "[Added Lines]",
          "238:   |--LIST SUBQUERY xxxxxx",
          "240:   `--LIST SUBQUERY xxxxxx",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0de0ab82074f1898fe1b7374683aeea6afae0675",
      "candidate_info": {
        "commit_hash": "0de0ab82074f1898fe1b7374683aeea6afae0675",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/0de0ab82074f1898fe1b7374683aeea6afae0675",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/wapptest.tcl"
        ],
        "message": "Fix a case in wapptest.tcl where a failed test might report 0 errors.\n\nFossilOrigin-Name: 2be1ed70df605663822d1afdde757f426ccf2ee38add8dc6b6bb4fc4d90a31dc",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/wapptest.tcl||test/wapptest.tcl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 713caa382cf7ddef872e510a76a5fca40be1a8d8876ce2f91b632bb0810a6630",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/wapptest.tcl||test/wapptest.tcl": [
          "File: test/wapptest.tcl -> test/wapptest.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "222:       sqlite3 sqlite3.exe",
          "223:       test.log test-out.txt",
          "224:       core",
          "225:     }",
          "226:     foreach f [glob -nocomplain [file join $G(test.$name.dir) *]] {",
          "227:       set t [file tail $f]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "225:       wapptest_make.sh",
          "226:       wapptest_configure.sh",
          "227:       wapptest_run.tcl",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "277:       set rc [catch { exec {*}$cfg >& test.log } msg]",
          "278:       if {$rc==0} {",
          "279:         set make [readfile wapptest_make.sh]",
          "281:       }",
          "282:     }",
          "283:   } else {",
          "284:     append res {",
          "285:       set make [readfile wapptest_make.sh]",
          "287:     }",
          "288:   }",
          "290:   set res",
          "291: }",
          "",
          "[Removed Lines]",
          "280:         catch { exec {*}$make >>& test.log }",
          "286:       catch { exec {*}$make >>& test.log }",
          "",
          "[Added Lines]",
          "283:         set rc [catch { exec {*}$make >>& test.log }]",
          "289:       set rc [catch { exec {*}$make >>& test.log }]",
          "293:   append res { exit $rc }",
          "",
          "---------------"
        ]
      }
    }
  ]
}