{
  "cve_id": "CVE-2021-39191",
  "cve_desc": "mod_auth_openidc is an authentication/authorization module for the Apache 2.x HTTP server that functions as an OpenID Connect Relying Party, authenticating users against an OpenID Connect Provider. In versions prior to 2.4.9.4, the 3rd-party init SSO functionality of mod_auth_openidc was reported to be vulnerable to an open redirect attack by supplying a crafted URL in the `target_link_uri` parameter. A patch in version 2.4.9.4 made it so that the `OIDCRedirectURLsAllowed` setting must be applied to the `target_link_uri` parameter. There are no known workarounds aside from upgrading to a patched version.",
  "repo": "zmartzone/mod_auth_openidc",
  "patch_hash": "03e6bfb446f4e3f27c003d30d6a433e5dd8e2b3d",
  "patch_info": {
    "commit_hash": "03e6bfb446f4e3f27c003d30d6a433e5dd8e2b3d",
    "repo": "zmartzone/mod_auth_openidc",
    "commit_url": "https://github.com/zmartzone/mod_auth_openidc/commit/03e6bfb446f4e3f27c003d30d6a433e5dd8e2b3d",
    "files": [
      "AUTHORS",
      "ChangeLog",
      "auth_openidc.conf",
      "configure.ac",
      "src/mod_auth_openidc.c"
    ],
    "message": "apply OIDCRedirectURLsAllowed setting to target_link_uri\n\ncloses #672; thanks @Meheni\nrelease 2.4.9.4\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
    "before_after_code_files": [
      "auth_openidc.conf||auth_openidc.conf",
      "configure.ac||configure.ac",
      "src/mod_auth_openidc.c||src/mod_auth_openidc.c"
    ]
  },
  "patch_diff": {
    "auth_openidc.conf||auth_openidc.conf": [
      "File: auth_openidc.conf -> auth_openidc.conf",
      "--- Hunk 1 ---",
      "[Context before]",
      "918: #OIDCStateInputHeaders [none|user-agent|x-forwarded-for|both]",
      "920: # Define one or more regular expressions that specify URLs (or domains) allowed for post logout and",
      "923: #   OIDCRedirectURLsAllowed ^https://www.example.com ^https://(\\w+).example.org ^https://example.net/app",
      "924: # or:",
      "925: #   OIDCRedirectURLsAllowed ^https://www.example.com/logout$ ^https://www.example.com/app/return_to$",
      "",
      "[Removed Lines]",
      "921: # other redirects such as the \"return_to\" value on refresh token requests, and the \"login_uri\" value",
      "922: # on session management based logins through the OP iframe, e.g.:",
      "",
      "[Added Lines]",
      "921: # other redirects such as the \"return_to\" value on refresh token requests, the \"login_uri\" value",
      "922: # on session management based logins through the OP iframe, and the \"target_link_uri\" parameter in",
      "923: # 3rd-party initiated logins, e.g.:",
      "",
      "---------------"
    ],
    "configure.ac||configure.ac": [
      "File: configure.ac -> configure.ac",
      "--- Hunk 1 ---",
      "[Context before]",
      "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
      "",
      "[Removed Lines]",
      "1: AC_INIT([mod_auth_openidc],[2.4.9.3],[hans.zandbelt@zmartzone.eu])",
      "",
      "[Added Lines]",
      "1: AC_INIT([mod_auth_openidc],[2.4.9.4],[hans.zandbelt@zmartzone.eu])",
      "",
      "---------------"
    ],
    "src/mod_auth_openidc.c||src/mod_auth_openidc.c": [
      "File: src/mod_auth_openidc.c -> src/mod_auth_openidc.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2457:  return TRUE;",
      "2458: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2460: #define OIDC_MAX_URL_LENGTH 8192 * 2",
      "2462: static apr_byte_t oidc_validate_redirect_url(request_rec *r, oidc_cfg *c,",
      "2463:   const char *redirect_to_url, apr_byte_t restrict_to_host, char **err_str,",
      "2464:   char **err_desc) {",
      "2465:  apr_uri_t uri;",
      "2466:  const char *c_host = NULL;",
      "2467:  apr_hash_index_t *hi = NULL;",
      "2468:  size_t i = 0;",
      "2469:  char *url = apr_pstrndup(r->pool, redirect_to_url, OIDC_MAX_URL_LENGTH);",
      "2472:  for (i = 0; i < strlen(url); i++)",
      "2473:   if (url[i] == '\\\\')",
      "2474:    url[i] = '/';",
      "2476:  if (apr_uri_parse(r->pool, url, &uri) != APR_SUCCESS) {",
      "2479:   oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
      "2480:   return FALSE;",
      "2481:  }",
      "2483:  if (c->redirect_urls_allowed != NULL) {",
      "2484:   for (hi = apr_hash_first(NULL, c->redirect_urls_allowed); hi; hi =",
      "2485:     apr_hash_next(hi)) {",
      "2486:    apr_hash_this(hi, (const void**) &c_host, NULL, NULL);",
      "2487:    if (oidc_util_regexp_first_match(r->pool, url, c_host,",
      "2488:      NULL, err_str) == TRUE)",
      "2489:     break;",
      "2490:   }",
      "2491:   if (hi == NULL) {",
      "2494:      apr_psprintf(r->pool,",
      "2495:        \"value does not match the list of allowed redirect URLs: %s\",",
      "2496:        url);",
      "2497:    oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
      "2498:    return FALSE;",
      "2499:   }",
      "2500:  } else if ((uri.hostname != NULL) && (restrict_to_host == TRUE)) {",
      "2501:   c_host = oidc_get_current_url_host(r);",
      "2502:   if ((strstr(c_host, uri.hostname) == NULL)",
      "2503:     || (strstr(uri.hostname, c_host) == NULL)) {",
      "2506:      apr_psprintf(r->pool,",
      "2507:        \"URL value \\\"%s\\\" does not match the hostname of the current request \\\"%s\\\"\",",
      "2508:        apr_uri_unparse(r->pool, &uri, 0), c_host);",
      "2509:    oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
      "2510:    return FALSE;",
      "2511:   }",
      "2512:  }",
      "2514:  if ((uri.hostname == NULL) && (strstr(url, \"/\") != url)) {",
      "2517:     apr_psprintf(r->pool,",
      "2518:       \"No hostname was parsed and it does not seem to be relative, i.e starting with '/': %s\",",
      "2519:       url);",
      "2520:   oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
      "2521:   return FALSE;",
      "2522:  } else if ((uri.hostname == NULL) && (strstr(url, \"//\") == url)) {",
      "2525:     \"No hostname was parsed and starting with '//': %s\", url);",
      "2526:   oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
      "2527:   return FALSE;",
      "2528:  } else if ((uri.hostname == NULL) && (strstr(url, \"/\\\\\") == url)) {",
      "2531:     \"No hostname was parsed and starting with '/\\\\': %s\", url);",
      "2532:   oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
      "2533:   return FALSE;",
      "2534:  }",
      "2537:  if (((strstr(url, \"\\n\") != NULL) || strstr(url, \"\\r\") != NULL)) {",
      "2540:     apr_psprintf(r->pool,",
      "2541:       \"URL value \\\"%s\\\" contains illegal \\\"\\n\\\" or \\\"\\r\\\" character(s)\",",
      "2542:       url);",
      "2543:   oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
      "2544:   return FALSE;",
      "2545:  }",
      "2547:  return TRUE;",
      "2548: }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "2469:  oidc_provider_t *provider = NULL;",
      "2471:  oidc_util_get_request_parameter(r, OIDC_DISC_OP_PARAM, &issuer);",
      "2472:  oidc_util_get_request_parameter(r, OIDC_DISC_USER_PARAM, &user);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2560:  char *error_str = NULL;",
      "2561:  char *error_description = NULL;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "2519:     HTTP_UNAUTHORIZED);",
      "2520:  }",
      "2523:  if (c->metadata_dir == NULL) {",
      "2524:   if ((oidc_provider_static_config(r, c, &provider) == TRUE)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2615:  if (oidc_validate_redirect_url(r, c, target_link_uri, TRUE, &error_str,",
      "2616:    &error_description) == FALSE) {",
      "2617:   return oidc_util_html_send_error(r, c->error_template, error_str,",
      "2618:     error_description,",
      "2619:     HTTP_UNAUTHORIZED);",
      "2620:  }",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "2947:  return rc;",
      "2948: }",
      "",
      "[Removed Lines]",
      "2950: #define OIDC_MAX_URL_LENGTH 8192 * 2",
      "2952: static apr_byte_t oidc_validate_redirect_url(request_rec *r, oidc_cfg *c,",
      "2953:   const char *redirect_to_url, apr_byte_t restrict_to_host, char **err_str,",
      "2954:   char **err_desc) {",
      "2955:  apr_uri_t uri;",
      "2956:  const char *c_host = NULL;",
      "2957:  apr_hash_index_t *hi = NULL;",
      "2958:  size_t i = 0;",
      "2959:  char *url = apr_pstrndup(r->pool, redirect_to_url, OIDC_MAX_URL_LENGTH);",
      "2962:  for (i = 0; i < strlen(url); i++)",
      "2963:   if (url[i] == '\\\\')",
      "2964:    url[i] = '/';",
      "2966:  if (apr_uri_parse(r->pool, url, &uri) != APR_SUCCESS) {",
      "2969:   oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
      "2970:   return FALSE;",
      "2971:  }",
      "2973:  if (c->redirect_urls_allowed != NULL) {",
      "2974:   for (hi = apr_hash_first(NULL, c->redirect_urls_allowed); hi; hi =",
      "2975:     apr_hash_next(hi)) {",
      "2976:    apr_hash_this(hi, (const void**) &c_host, NULL, NULL);",
      "2977:    if (oidc_util_regexp_first_match(r->pool, url, c_host,",
      "2978:      NULL, err_str) == TRUE)",
      "2979:     break;",
      "2980:   }",
      "2981:   if (hi == NULL) {",
      "2984:      apr_psprintf(r->pool,",
      "2985:        \"value does not match the list of allowed redirect URLs: %s\",",
      "2986:        url);",
      "2987:    oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
      "2988:    return FALSE;",
      "2989:   }",
      "2990:  } else if ((uri.hostname != NULL) && (restrict_to_host == TRUE)) {",
      "2991:   c_host = oidc_get_current_url_host(r);",
      "2992:   if ((strstr(c_host, uri.hostname) == NULL)",
      "2993:     || (strstr(uri.hostname, c_host) == NULL)) {",
      "2996:      apr_psprintf(r->pool,",
      "2997:        \"URL value \\\"%s\\\" does not match the hostname of the current request \\\"%s\\\"\",",
      "2998:        apr_uri_unparse(r->pool, &uri, 0), c_host);",
      "2999:    oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
      "3000:    return FALSE;",
      "3001:   }",
      "3002:  }",
      "3004:  if ((uri.hostname == NULL) && (strstr(url, \"/\") != url)) {",
      "3007:     apr_psprintf(r->pool,",
      "3008:       \"No hostname was parsed and it does not seem to be relative, i.e starting with '/': %s\",",
      "3009:       url);",
      "3010:   oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
      "3011:   return FALSE;",
      "3012:  } else if ((uri.hostname == NULL) && (strstr(url, \"//\") == url)) {",
      "3015:     \"No hostname was parsed and starting with '//': %s\", url);",
      "3016:   oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
      "3017:   return FALSE;",
      "3018:  } else if ((uri.hostname == NULL) && (strstr(url, \"/\\\\\") == url)) {",
      "3021:     \"No hostname was parsed and starting with '/\\\\': %s\", url);",
      "3022:   oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
      "3023:   return FALSE;",
      "3024:  }",
      "3027:  if (((strstr(url, \"\\n\") != NULL) || strstr(url, \"\\r\") != NULL)) {",
      "3030:     apr_psprintf(r->pool,",
      "3031:       \"URL value \\\"%s\\\" contains illegal \\\"\\n\\\" or \\\"\\r\\\" character(s)\",",
      "3032:       url);",
      "3033:   oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
      "3034:   return FALSE;",
      "3035:  }",
      "3037:  return TRUE;",
      "3038: }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "f20c2ccf88f8a2b17acae60db4fe1a7f637303a4",
      "candidate_info": {
        "commit_hash": "f20c2ccf88f8a2b17acae60db4fe1a7f637303a4",
        "repo": "zmartzone/mod_auth_openidc",
        "commit_url": "https://github.com/zmartzone/mod_auth_openidc/commit/f20c2ccf88f8a2b17acae60db4fe1a7f637303a4",
        "files": [
          "ChangeLog",
          "configure.ac",
          "src/util.c"
        ],
        "message": "warn about mismatch between incoming X-Forwarded-* headers\n\nand OIDCXForwardedHeaders configuration; bump to 2.4.11.1rc0\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "src/util.c||src/util.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac"
          ],
          "candidate": [
            "configure.ac||configure.ac"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.11],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.11.1rc0],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------"
        ],
        "src/util.c||src/util.c": [
          "File: src/util.c -> src/util.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "592: static const char* oidc_get_current_url_base(request_rec *r, const apr_byte_t x_forwarded_headers) {",
          "597:  port_str = port_str ? apr_psprintf(r->pool, \":%s\", port_str) : \"\";",
          "599:  char *url = apr_pstrcat(r->pool, scheme_str, \"://\", host_str, port_str,",
          "",
          "[Removed Lines]",
          "594:  const char *scheme_str = oidc_get_current_url_scheme(r, x_forwarded_headers);",
          "595:  const char *host_str = oidc_get_current_url_host(r, x_forwarded_headers);",
          "596:  const char *port_str = oidc_get_current_url_port(r, scheme_str, x_forwarded_headers);",
          "",
          "[Added Lines]",
          "594:  const char *scheme_str = NULL;",
          "595:  const char *host_str = NULL;",
          "596:  const char *port_str = NULL;",
          "598:  if (oidc_util_hdr_in_x_forwarded_host_get(r)) {",
          "599:   if (!(x_forwarded_headers & OIDC_HDR_X_FORWARDED_HOST))",
          "600:    oidc_warn(r, \"header %s received but OIDCXForwardedHeaders not configured for it\", OIDC_HTTP_HDR_X_FORWARDED_HOST);",
          "601:  } else {",
          "602:   if (x_forwarded_headers & OIDC_HDR_X_FORWARDED_HOST)",
          "603:    oidc_warn(r, \"OIDCXForwardedHeaders configured for header %s but not found in request\", OIDC_HTTP_HDR_X_FORWARDED_HOST);",
          "604:  }",
          "606:  if (oidc_util_hdr_in_x_forwarded_port_get(r)) {",
          "607:   if (!(x_forwarded_headers & OIDC_HDR_X_FORWARDED_PORT))",
          "608:    oidc_warn(r, \"header %s received but OIDCXForwardedHeaders not configured for it\", OIDC_HTTP_HDR_X_FORWARDED_PORT);",
          "609:  } else {",
          "610:   if (x_forwarded_headers & OIDC_HDR_X_FORWARDED_PORT)",
          "611:    oidc_warn(r, \"OIDCXForwardedHeaders configured for header %s but not found in request\", OIDC_HTTP_HDR_X_FORWARDED_PORT);",
          "612:  }",
          "614:  if (oidc_util_hdr_in_x_forwarded_proto_get(r)) {",
          "615:   if (!(x_forwarded_headers & OIDC_HDR_X_FORWARDED_PROTO))",
          "616:    oidc_warn(r, \"header %s received but OIDCXForwardedHeaders not configured for it\", OIDC_HTTP_HDR_X_FORWARDED_PROTO);",
          "617:  } else {",
          "618:   if (x_forwarded_headers & OIDC_HDR_X_FORWARDED_PROTO)",
          "619:    oidc_warn(r, \"OIDCXForwardedHeaders configured for header %s but not found in request\", OIDC_HTTP_HDR_X_FORWARDED_PROTO);",
          "620:  }",
          "622:  scheme_str = oidc_get_current_url_scheme(r, x_forwarded_headers);",
          "623:  host_str = oidc_get_current_url_host(r, x_forwarded_headers);",
          "624:  port_str = oidc_get_current_url_port(r, scheme_str, x_forwarded_headers);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "314000d179c2d08af6897725f37980e1f0891aa6",
      "candidate_info": {
        "commit_hash": "314000d179c2d08af6897725f37980e1f0891aa6",
        "repo": "zmartzone/mod_auth_openidc",
        "commit_url": "https://github.com/zmartzone/mod_auth_openidc/commit/314000d179c2d08af6897725f37980e1f0891aa6",
        "files": [
          "ChangeLog",
          "configure.ac",
          "src/mod_auth_openidc.c",
          "src/mod_auth_openidc.h",
          "src/session.c"
        ],
        "message": "add SameSite attribute on cookie clearance / logout\n\nbump to 2.4.4.1; thanks @v0gler\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "src/mod_auth_openidc.c||src/mod_auth_openidc.c",
          "src/mod_auth_openidc.h||src/mod_auth_openidc.h",
          "src/session.c||src/session.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac",
            "src/mod_auth_openidc.c||src/mod_auth_openidc.c"
          ],
          "candidate": [
            "configure.ac||configure.ac",
            "src/mod_auth_openidc.c||src/mod_auth_openidc.c"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.4],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.4.1],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------"
        ],
        "src/mod_auth_openidc.c||src/mod_auth_openidc.c": [
          "File: src/mod_auth_openidc.c -> src/mod_auth_openidc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "291: static char *oidc_get_state_cookie_name(request_rec *r, const char *state) {",
          "293: }",
          "",
          "[Removed Lines]",
          "292:  return apr_psprintf(r->pool, \"%s%s\", oidc_cfg_dir_state_cookie_prefix(r), state);",
          "",
          "[Added Lines]",
          "292:  return apr_psprintf(r->pool, \"%s%s\", oidc_cfg_dir_state_cookie_prefix(r),",
          "293:    state);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "719:   oidc_warn(r,",
          "720:     \"deleting oldest state cookie: %s (time until expiry %\" APR_TIME_T_FMT \" seconds)\",",
          "721:     oldest->name, apr_time_sec(oldest->timestamp - apr_time_now()));",
          "723:   if (prev_oldest)",
          "724:    prev_oldest->next = oldest->next;",
          "725:   else",
          "",
          "[Removed Lines]",
          "722:   oidc_util_set_cookie(r, oldest->name, \"\", 0, NULL);",
          "",
          "[Added Lines]",
          "723:   oidc_util_set_cookie(r, oldest->name, \"\", 0,",
          "724:     OIDC_COOKIE_EXT_SAME_SITE_NONE);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "767:           oidc_proto_state_get_original_url(",
          "768:             proto_state));",
          "769:         oidc_util_set_cookie(r, cookieName, \"\", 0,",
          "771:        } else {",
          "772:         if (first == NULL) {",
          "773:          first = apr_pcalloc(r->pool,",
          "",
          "[Removed Lines]",
          "770:           NULL);",
          "",
          "[Added Lines]",
          "772:           OIDC_COOKIE_EXT_SAME_SITE_NONE);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "789:          \"state cookie could not be retrieved/decoded, deleting: %s\",",
          "790:          cookieName);",
          "791:        oidc_util_set_cookie(r, cookieName, \"\", 0,",
          "793:       }",
          "794:      }",
          "795:     }",
          "",
          "[Removed Lines]",
          "792:          NULL);",
          "",
          "[Added Lines]",
          "794:          OIDC_COOKIE_EXT_SAME_SITE_NONE);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "827:  }",
          "833:  if (*proto_state == NULL)",
          "",
          "[Removed Lines]",
          "830:  oidc_util_set_cookie(r, cookieName, \"\", 0, NULL);",
          "",
          "[Added Lines]",
          "832:  oidc_util_set_cookie(r, cookieName, \"\", 0, OIDC_COOKIE_EXT_SAME_SITE_NONE);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "933:  oidc_util_set_cookie(r, cookieName, cookieValue, -1,",
          "938:  return HTTP_OK;",
          "939: }",
          "",
          "[Removed Lines]",
          "934:    c->cookie_same_site ?",
          "935:      OIDC_COOKIE_EXT_SAME_SITE_LAX :",
          "936:      OIDC_COOKIE_EXT_SAME_SITE_NONE);",
          "",
          "[Added Lines]",
          "936:    OIDC_COOKIE_SAMESITE_LAX(c));",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1432:  apr_byte_t pass_headers = oidc_cfg_dir_pass_info_in_headers(r);",
          "1433:  apr_byte_t pass_envvars = oidc_cfg_dir_pass_info_in_envvars(r);",
          "",
          "[Removed Lines]",
          "1429: static apr_byte_t oidc_session_pass_tokens(request_rec *r,",
          "1430:   oidc_cfg *cfg, oidc_session_t *session, apr_byte_t *needs_save) {",
          "",
          "[Added Lines]",
          "1429: static apr_byte_t oidc_session_pass_tokens(request_rec *r, oidc_cfg *cfg,",
          "1430:   oidc_session_t *session, apr_byte_t *needs_save) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2282:   oidc_util_set_cookie(r, OIDC_CSRF_NAME, csrf, -1,",
          "2288:   if (oidc_post_preserve_javascript(r, url, NULL, NULL) == TRUE)",
          "",
          "[Removed Lines]",
          "2283:     cfg->cookie_same_site ?",
          "2284:       OIDC_COOKIE_EXT_SAME_SITE_STRICT :",
          "2285:       OIDC_COOKIE_EXT_SAME_SITE_NONE);",
          "",
          "[Added Lines]",
          "2283:     OIDC_COOKIE_SAMESITE_STRICT(cfg));",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2375:  s = apr_psprintf(r->pool, \"%s</form>\\n\", s);",
          "2377:  oidc_util_set_cookie(r, OIDC_CSRF_NAME, csrf, -1,",
          "2382:  char *javascript = NULL, *javascript_method = NULL;",
          "2383:  char *html_head =",
          "",
          "[Removed Lines]",
          "2378:    cfg->cookie_same_site ?",
          "2379:      OIDC_COOKIE_EXT_SAME_SITE_STRICT :",
          "2380:      OIDC_COOKIE_EXT_SAME_SITE_NONE);",
          "",
          "[Added Lines]",
          "2376:    OIDC_COOKIE_SAMESITE_STRICT(cfg));",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2598:  if (csrf_cookie) {",
          "2604:   if ((csrf_query == NULL)",
          "",
          "[Removed Lines]",
          "2601:   oidc_util_set_cookie(r, OIDC_CSRF_NAME, \"\", 0, NULL);",
          "",
          "[Added Lines]",
          "2597:   oidc_util_set_cookie(r, OIDC_CSRF_NAME, \"\", 0,",
          "2598:     OIDC_COOKIE_EXT_SAME_SITE_NONE);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2813:  oidc_debug(r, \"enter (url=%s)\", url);",
          "2818:   oidc_revoke_tokens(r, c, session);",
          "2825:  if (oidc_is_front_channel_logout(url)) {",
          "",
          "[Removed Lines]",
          "2816:  if (session->remote_user != NULL) {",
          "2821:   oidc_session_kill(r, session);",
          "2822:  }",
          "",
          "[Added Lines]",
          "2813:  if (session->remote_user != NULL)",
          "2821:  oidc_session_kill(r, session);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "2836:   const char *accept = oidc_util_hdr_in_accept_get(r);",
          "2837:   if ((apr_strnatcmp(url, OIDC_IMG_STYLE_LOGOUT_PARAM_VALUE) == 0)",
          "2838:     || ((accept) && strstr(accept, OIDC_CONTENT_TYPE_IMAGE_PNG))) {",
          "2839:    return oidc_util_http_send(r,",
          "2840:      (const char *) &oidc_transparent_pixel,",
          "2841:      sizeof(oidc_transparent_pixel), OIDC_CONTENT_TYPE_IMAGE_PNG,",
          "2843:   }",
          "2846:   return oidc_util_html_send(r, \"Logged Out\", NULL, NULL,",
          "2848:  }",
          "",
          "[Removed Lines]",
          "2842:      OK);",
          "2847:     \"<p>Logged Out</p>\", OK);",
          "",
          "[Added Lines]",
          "2843:      DONE);",
          "2848:     \"<p>Logged Out</p>\", DONE);",
          "",
          "---------------"
        ],
        "src/mod_auth_openidc.h||src/mod_auth_openidc.h": [
          "File: src/mod_auth_openidc.h -> src/mod_auth_openidc.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "218: #define OIDC_COOKIE_EXT_SAME_SITE_STRICT \"SameSite=Strict\"",
          "219: #define OIDC_COOKIE_EXT_SAME_SITE_NONE   \"SameSite=None\"",
          "222: #define OIDC_TB_CFG_PROVIDED_ENV_VAR     \"Sec-Provided-Token-Binding-ID\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "221: #define OIDC_COOKIE_SAMESITE_STRICT(c) \\",
          "222:  c->cookie_same_site ? OIDC_COOKIE_EXT_SAME_SITE_STRICT : OIDC_COOKIE_EXT_SAME_SITE_NONE",
          "223: #define OIDC_COOKIE_SAMESITE_LAX(c) \\",
          "224:  c->cookie_same_site ? OIDC_COOKIE_EXT_SAME_SITE_LAX : OIDC_COOKIE_EXT_SAME_SITE_NONE",
          "",
          "---------------"
        ],
        "src/session.c||src/session.c": [
          "File: src/session.c -> src/session.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "128:  }",
          "129: }",
          "132:  const char *stored_uuid = NULL;",
          "133:  char *s_json = NULL;",
          "134:  apr_byte_t rc = FALSE;",
          "",
          "[Removed Lines]",
          "131: apr_byte_t oidc_session_load_cache_by_uuid(request_rec *r, oidc_cfg *c, const char *uuid, oidc_session_t *z) {",
          "",
          "[Added Lines]",
          "131: apr_byte_t oidc_session_load_cache_by_uuid(request_rec *r, oidc_cfg *c,",
          "132:   const char *uuid, oidc_session_t *z) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "182:   if (rc == FALSE) {",
          "184:    oidc_util_set_cookie(r, oidc_cfg_dir_cookie(r), \"\", 0,",
          "186:   }",
          "187:  }",
          "",
          "[Removed Lines]",
          "185:      NULL);",
          "",
          "[Added Lines]",
          "186:      OIDC_COOKIE_EXT_SAME_SITE_NONE);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "235:    oidc_cache_set_sid(r, z->sid, NULL, 0);",
          "241:   rc = oidc_cache_set_session(r, z->uuid, NULL, 0);",
          "",
          "[Removed Lines]",
          "238:   oidc_util_set_cookie(r, oidc_cfg_dir_cookie(r), \"\", 0, NULL);",
          "",
          "[Added Lines]",
          "239:   oidc_util_set_cookie(r, oidc_cfg_dir_cookie(r), \"\", 0,",
          "240:     OIDC_COOKIE_EXT_SAME_SITE_NONE);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "272:  oidc_util_set_chunked_cookie(r, oidc_cfg_dir_cookie(r), cookieValue,",
          "273:    c->persistent_session_cookie ? z->expiry : -1,",
          "274:      c->session_cookie_chunk_size,",
          "281:  return TRUE;",
          "282: }",
          "",
          "[Removed Lines]",
          "275:      c->cookie_same_site ?",
          "276:        (first_time ?",
          "277:          OIDC_COOKIE_EXT_SAME_SITE_LAX :",
          "278:          OIDC_COOKIE_EXT_SAME_SITE_STRICT) :",
          "279:          OIDC_COOKIE_EXT_SAME_SITE_NONE);",
          "",
          "[Added Lines]",
          "277:      (z->state == NULL) ? OIDC_COOKIE_EXT_SAME_SITE_NONE :",
          "278:        c->cookie_same_site ?",
          "279:          (first_time ?",
          "280:            OIDC_COOKIE_EXT_SAME_SITE_LAX :",
          "281:            OIDC_COOKIE_EXT_SAME_SITE_STRICT) :",
          "282:            OIDC_COOKIE_EXT_SAME_SITE_NONE);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "314:   }",
          "315:  }",
          "322:  rc = TRUE;",
          "",
          "[Removed Lines]",
          "317:  oidc_session_get(r, z, OIDC_SESSION_REMOTE_USER_KEY,",
          "318:    &z->remote_user);",
          "319:  oidc_session_get(r, z, OIDC_SESSION_SID_KEY,",
          "320:    &z->sid);",
          "",
          "[Added Lines]",
          "320:  oidc_session_get(r, z, OIDC_SESSION_REMOTE_USER_KEY, &z->remote_user);",
          "321:  oidc_session_get(r, z, OIDC_SESSION_SID_KEY, &z->sid);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "521:  void *iter = NULL;",
          "522:  apr_byte_t is_allowed;",
          "525:   oidc_session_set(r, z, session_key, NULL);",
          "526:   return;",
          "527:  }",
          "",
          "[Removed Lines]",
          "524:  if (oidc_util_decode_json_object(r, claims, &src) == FALSE){",
          "",
          "[Added Lines]",
          "525:  if (oidc_util_decode_json_object(r, claims, &src) == FALSE) {",
          "",
          "---------------"
        ]
      }
    }
  ]
}