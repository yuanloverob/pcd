{
  "cve_id": "CVE-2019-1543",
  "cve_desc": "ChaCha20-Poly1305 is an AEAD cipher, and requires a unique nonce input for every encryption operation. RFC 7539 specifies that the nonce value (IV) should be 96 bits (12 bytes). OpenSSL allows a variable nonce length and front pads the nonce with 0 bytes if it is less than 12 bytes. However it also incorrectly allows a nonce to be set of up to 16 bytes. In this case only the last 12 bytes are significant and any additional leading bytes are ignored. It is a requirement of using this cipher that nonce values are unique. Messages encrypted using a reused nonce value are susceptible to serious confidentiality and integrity attacks. If an application changes the default nonce length to be longer than 12 bytes and then makes a change to the leading bytes of the nonce expecting the new value to be a new unique nonce then such an application could inadvertently encrypt messages with a reused nonce. Additionally the ignored bytes in a long nonce are not covered by the integrity guarantee of this cipher. Any application that relies on the integrity of these ignored leading bytes of a long nonce may be further affected. Any OpenSSL internal use of this cipher, including in SSL/TLS, is safe because no such use sets such a long nonce value. However user applications that use this cipher directly and set a non-default nonce length to be longer than 12 bytes may be vulnerable. OpenSSL versions 1.1.1 and 1.1.0 are affected by this issue. Due to the limited scope of affected deployments this has been assessed as low severity and therefore we are not creating new releases at this time. Fixed in OpenSSL 1.1.1c (Affected 1.1.1-1.1.1b). Fixed in OpenSSL 1.1.0k (Affected 1.1.0-1.1.0j).",
  "repo": "openssl/openssl",
  "patch_hash": "2a3d0ee9d59156c48973592331404471aca886d6",
  "patch_info": {
    "commit_hash": "2a3d0ee9d59156c48973592331404471aca886d6",
    "repo": "openssl/openssl",
    "commit_url": "https://github.com/openssl/openssl/commit/2a3d0ee9d59156c48973592331404471aca886d6",
    "files": [
      "crypto/evp/e_chacha20_poly1305.c"
    ],
    "message": "Prevent over long nonces in ChaCha20-Poly1305\n\nChaCha20-Poly1305 is an AEAD cipher, and requires a unique nonce input for\nevery encryption operation. RFC 7539 specifies that the nonce value (IV)\nshould be 96 bits (12 bytes). OpenSSL allows a variable nonce length and\nfront pads the nonce with 0 bytes if it is less than 12 bytes. However it\nalso incorrectly allows a nonce to be set of up to 16 bytes. In this case\nonly the last 12 bytes are significant and any additional leading bytes are\nignored.\n\nIt is a requirement of using this cipher that nonce values are unique.\nMessages encrypted using a reused nonce value are susceptible to serious\nconfidentiality and integrity attacks. If an application changes the\ndefault nonce length to be longer than 12 bytes and then makes a change to\nthe leading bytes of the nonce expecting the new value to be a new unique\nnonce then such an application could inadvertently encrypt messages with a\nreused nonce.\n\nAdditionally the ignored bytes in a long nonce are not covered by the\nintegrity guarantee of this cipher. Any application that relies on the\nintegrity of these ignored leading bytes of a long nonce may be further\naffected.\n\nAny OpenSSL internal use of this cipher, including in SSL/TLS, is safe\nbecause no such use sets such a long nonce value. However user\napplications that use this cipher directly and set a non-default nonce\nlength to be longer than 12 bytes may be vulnerable.\n\nCVE-2019-1543\n\nFixes #8345\n\nReviewed-by: Paul Dale <paul.dale@oracle.com>\nReviewed-by: Richard Levitte <levitte@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/8406)",
    "before_after_code_files": [
      "crypto/evp/e_chacha20_poly1305.c||crypto/evp/e_chacha20_poly1305.c"
    ]
  },
  "patch_diff": {
    "crypto/evp/e_chacha20_poly1305.c||crypto/evp/e_chacha20_poly1305.c": [
      "File: crypto/evp/e_chacha20_poly1305.c -> crypto/evp/e_chacha20_poly1305.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "31: #define data(ctx)   ((EVP_CHACHA_KEY *)(ctx)->cipher_data)",
      "33: static int chacha_init_key(EVP_CIPHER_CTX *ctx,",
      "34:                            const unsigned char user_key[CHACHA_KEY_SIZE],",
      "35:                            const unsigned char iv[CHACHA_CTR_SIZE], int enc)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "33: #define CHACHA20_POLY1305_MAX_IVLEN     12",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "533:         return 1;",
      "535:     case EVP_CTRL_AEAD_SET_IVLEN:",
      "537:             return 0;",
      "538:         actx->nonce_len = arg;",
      "539:         return 1;",
      "",
      "[Removed Lines]",
      "536:         if (arg <= 0 || arg > CHACHA_CTR_SIZE)",
      "",
      "[Added Lines]",
      "538:         if (arg <= 0 || arg > CHACHA20_POLY1305_MAX_IVLEN)",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "f426625b6ae9a7831010750490a5f0ad689c5ba3",
      "candidate_info": {
        "commit_hash": "f426625b6ae9a7831010750490a5f0ad689c5ba3",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/f426625b6ae9a7831010750490a5f0ad689c5ba3",
        "files": [
          "crypto/evp/e_chacha20_poly1305.c"
        ],
        "message": "Prevent over long nonces in ChaCha20-Poly1305\n\nChaCha20-Poly1305 is an AEAD cipher, and requires a unique nonce input for\nevery encryption operation. RFC 7539 specifies that the nonce value (IV)\nshould be 96 bits (12 bytes). OpenSSL allows a variable nonce length and\nfront pads the nonce with 0 bytes if it is less than 12 bytes. However it\nalso incorrectly allows a nonce to be set of up to 16 bytes. In this case\nonly the last 12 bytes are significant and any additional leading bytes are\nignored.\n\nIt is a requirement of using this cipher that nonce values are unique.\nMessages encrypted using a reused nonce value are susceptible to serious\nconfidentiality and integrity attacks. If an application changes the\ndefault nonce length to be longer than 12 bytes and then makes a change to\nthe leading bytes of the nonce expecting the new value to be a new unique\nnonce then such an application could inadvertently encrypt messages with a\nreused nonce.\n\nAdditionally the ignored bytes in a long nonce are not covered by the\nintegrity guarantee of this cipher. Any application that relies on the\nintegrity of these ignored leading bytes of a long nonce may be further\naffected.\n\nAny OpenSSL internal use of this cipher, including in SSL/TLS, is safe\nbecause no such use sets such a long nonce value. However user\napplications that use this cipher directly and set a non-default nonce\nlength to be longer than 12 bytes may be vulnerable.\n\nCVE-2019-1543\n\nFixes #8345\n\nReviewed-by: Paul Dale <paul.dale@oracle.com>\nReviewed-by: Richard Levitte <levitte@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/8406)\n\n(cherry picked from commit 2a3d0ee9d59156c48973592331404471aca886d6)",
        "before_after_code_files": [
          "crypto/evp/e_chacha20_poly1305.c||crypto/evp/e_chacha20_poly1305.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "crypto/evp/e_chacha20_poly1305.c||crypto/evp/e_chacha20_poly1305.c"
          ],
          "candidate": [
            "crypto/evp/e_chacha20_poly1305.c||crypto/evp/e_chacha20_poly1305.c"
          ]
        }
      },
      "candidate_diff": {
        "crypto/evp/e_chacha20_poly1305.c||crypto/evp/e_chacha20_poly1305.c": [
          "File: crypto/evp/e_chacha20_poly1305.c -> crypto/evp/e_chacha20_poly1305.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: #define data(ctx)   ((EVP_CHACHA_KEY *)(ctx)->cipher_data)",
          "33: static int chacha_init_key(EVP_CIPHER_CTX *ctx,",
          "34:                            const unsigned char user_key[CHACHA_KEY_SIZE],",
          "35:                            const unsigned char iv[CHACHA_CTR_SIZE], int enc)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "33: #define CHACHA20_POLY1305_MAX_IVLEN     12",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "533:         return 1;",
          "535:     case EVP_CTRL_AEAD_SET_IVLEN:",
          "537:             return 0;",
          "538:         actx->nonce_len = arg;",
          "539:         return 1;",
          "",
          "[Removed Lines]",
          "536:         if (arg <= 0 || arg > CHACHA_CTR_SIZE)",
          "",
          "[Added Lines]",
          "538:         if (arg <= 0 || arg > CHACHA20_POLY1305_MAX_IVLEN)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ee22257b1418438ebaf54df98af4e24f494d1809",
      "candidate_info": {
        "commit_hash": "ee22257b1418438ebaf54df98af4e24f494d1809",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/ee22257b1418438ebaf54df98af4e24f494d1809",
        "files": [
          "crypto/evp/e_chacha20_poly1305.c"
        ],
        "message": "Prevent over long nonces in ChaCha20-Poly1305\n\nChaCha20-Poly1305 is an AEAD cipher, and requires a unique nonce input for\nevery encryption operation. RFC 7539 specifies that the nonce value (IV)\nshould be 96 bits (12 bytes). OpenSSL allows a variable nonce length and\nfront pads the nonce with 0 bytes if it is less than 12 bytes. However it\nalso incorrectly allows a nonce to be set of up to 16 bytes. In this case\nonly the last 12 bytes are significant and any additional leading bytes are\nignored.\n\nIt is a requirement of using this cipher that nonce values are unique.\nMessages encrypted using a reused nonce value are susceptible to serious\nconfidentiality and integrity attacks. If an application changes the\ndefault nonce length to be longer than 12 bytes and then makes a change to\nthe leading bytes of the nonce expecting the new value to be a new unique\nnonce then such an application could inadvertently encrypt messages with a\nreused nonce.\n\nAdditionally the ignored bytes in a long nonce are not covered by the\nintegrity guarantee of this cipher. Any application that relies on the\nintegrity of these ignored leading bytes of a long nonce may be further\naffected.\n\nAny OpenSSL internal use of this cipher, including in SSL/TLS, is safe\nbecause no such use sets such a long nonce value. However user\napplications that use this cipher directly and set a non-default nonce\nlength to be longer than 12 bytes may be vulnerable.\n\nCVE-2019-1543\n\nFixes #8345\n\nReviewed-by: Paul Dale <paul.dale@oracle.com>\nReviewed-by: Richard Levitte <levitte@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/8406)\n\n(cherry picked from commit 2a3d0ee9d59156c48973592331404471aca886d6)",
        "before_after_code_files": [
          "crypto/evp/e_chacha20_poly1305.c||crypto/evp/e_chacha20_poly1305.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "crypto/evp/e_chacha20_poly1305.c||crypto/evp/e_chacha20_poly1305.c"
          ],
          "candidate": [
            "crypto/evp/e_chacha20_poly1305.c||crypto/evp/e_chacha20_poly1305.c"
          ]
        }
      },
      "candidate_diff": {
        "crypto/evp/e_chacha20_poly1305.c||crypto/evp/e_chacha20_poly1305.c": [
          "File: crypto/evp/e_chacha20_poly1305.c -> crypto/evp/e_chacha20_poly1305.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: #define data(ctx)   ((EVP_CHACHA_KEY *)(ctx)->cipher_data)",
          "33: static int chacha_init_key(EVP_CIPHER_CTX *ctx,",
          "34:                            const unsigned char user_key[CHACHA_KEY_SIZE],",
          "35:                            const unsigned char iv[CHACHA_CTR_SIZE], int enc)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "33: #define CHACHA20_POLY1305_MAX_IVLEN     12",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "357:         return 1;",
          "359:     case EVP_CTRL_AEAD_SET_IVLEN:",
          "361:             return 0;",
          "362:         actx->nonce_len = arg;",
          "363:         return 1;",
          "",
          "[Removed Lines]",
          "360:         if (arg <= 0 || arg > CHACHA_CTR_SIZE)",
          "",
          "[Added Lines]",
          "362:         if (arg <= 0 || arg > CHACHA20_POLY1305_MAX_IVLEN)",
          "",
          "---------------"
        ]
      }
    }
  ]
}