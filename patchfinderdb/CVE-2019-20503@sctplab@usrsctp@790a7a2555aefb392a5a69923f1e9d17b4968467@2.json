{
  "cve_id": "CVE-2019-20503",
  "cve_desc": "usrsctp before 2019-12-20 has out-of-bounds reads in sctp_load_addresses_from_init.",
  "repo": "sctplab/usrsctp",
  "patch_hash": "790a7a2555aefb392a5a69923f1e9d17b4968467",
  "patch_info": {
    "commit_hash": "790a7a2555aefb392a5a69923f1e9d17b4968467",
    "repo": "sctplab/usrsctp",
    "commit_url": "https://github.com/sctplab/usrsctp/commit/790a7a2555aefb392a5a69923f1e9d17b4968467",
    "files": [
      "usrsctplib/netinet/sctp_auth.c",
      "usrsctplib/netinet/sctp_pcb.c"
    ],
    "message": "Improve input validation for some parameters having a too small reported length.\n\nThanks to Natalie Silvanovich from Google for finding one of these\nissues in the SCTP userland stack and reporting it.",
    "before_after_code_files": [
      "usrsctplib/netinet/sctp_auth.c||usrsctplib/netinet/sctp_auth.c",
      "usrsctplib/netinet/sctp_pcb.c||usrsctplib/netinet/sctp_pcb.c"
    ]
  },
  "patch_diff": {
    "usrsctplib/netinet/sctp_auth.c||usrsctplib/netinet/sctp_auth.c": [
      "File: usrsctplib/netinet/sctp_auth.c -> usrsctplib/netinet/sctp_auth.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "35: #ifdef __FreeBSD__",
      "36: #include <sys/cdefs.h>",
      "38: #endif",
      "40: #include <netinet/sctp_os.h>",
      "",
      "[Removed Lines]",
      "37: __FBSDID(\"$FreeBSD: head/sys/netinet/sctp_auth.c 352438 2019-09-17 09:46:42Z tuexen $\");",
      "",
      "[Added Lines]",
      "37: __FBSDID(\"$FreeBSD: head/sys/netinet/sctp_auth.c 355931 2019-12-20 15:25:08Z tuexen $\");",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1421:   ptype = ntohs(phdr->param_type);",
      "1422:   plen = ntohs(phdr->param_length);",
      "1425:    break;",
      "1427:   if (ptype == SCTP_RANDOM) {",
      "",
      "[Removed Lines]",
      "1424:   if ((plen == 0) || (offset + plen > length))",
      "",
      "[Added Lines]",
      "1424:   if ((plen < sizeof(struct sctp_paramhdr)) ||",
      "1425:       (offset + plen > length))",
      "",
      "---------------"
    ],
    "usrsctplib/netinet/sctp_pcb.c||usrsctplib/netinet/sctp_pcb.c": [
      "File: usrsctplib/netinet/sctp_pcb.c -> usrsctplib/netinet/sctp_pcb.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "35: #ifdef __FreeBSD__",
      "36: #include <sys/cdefs.h>",
      "38: #endif",
      "40: #include <netinet/sctp_os.h>",
      "",
      "[Removed Lines]",
      "37: __FBSDID(\"$FreeBSD: head/sys/netinet/sctp_pcb.c 353477 2019-10-13 16:14:04Z markj $\");",
      "",
      "[Added Lines]",
      "37: __FBSDID(\"$FreeBSD: head/sys/netinet/sctp_pcb.c 355931 2019-12-20 15:25:08Z tuexen $\");",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "7247:   if (offset + plen > limit) {",
      "7248:    break;",
      "7249:   }",
      "7251:    break;",
      "7252:   }",
      "7253: #ifdef INET",
      "",
      "[Removed Lines]",
      "7250:   if (plen == 0) {",
      "",
      "[Added Lines]",
      "7250:   if (plen < sizeof(struct sctp_paramhdr)) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "7463:    if (plen > sizeof(lstore)) {",
      "7464:     return (-23);",
      "7465:    }",
      "7466:    phdr = sctp_get_next_param(m, offset,",
      "7467:          (struct sctp_paramhdr *)&lstore,",
      "7468:          plen);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "7466:    if (plen < sizeof(struct sctp_asconf_addrv4_param)) {",
      "7467:     return (-101);",
      "7468:    }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "25935e814e7a2ff7c4a56afdcce7831e72b6abde",
      "candidate_info": {
        "commit_hash": "25935e814e7a2ff7c4a56afdcce7831e72b6abde",
        "repo": "sctplab/usrsctp",
        "commit_url": "https://github.com/sctplab/usrsctp/commit/25935e814e7a2ff7c4a56afdcce7831e72b6abde",
        "files": [
          "usrsctplib/netinet/sctp_callout.c",
          "usrsctplib/netinet/sctp_cc_functions.c",
          "usrsctplib/netinet/sctp_constants.h",
          "usrsctplib/netinet/sctp_input.c",
          "usrsctplib/netinet/sctp_pcb.c",
          "usrsctplib/netinet/sctp_timer.c",
          "usrsctplib/netinet/sctp_usrreq.c",
          "usrsctplib/netinet/sctputil.c",
          "usrsctplib/netinet/sctputil.h"
        ],
        "message": "Fix time to ticks conversion and vice versa. Overflows were not handled correctly.",
        "before_after_code_files": [
          "usrsctplib/netinet/sctp_callout.c||usrsctplinetinet/sctp_callout.c",
          "usrsctplib/netinet/sctp_cc_functions.c||usrsctplinetinet/sctp_cc_functions.c",
          "usrsctplib/netinet/sctp_constants.h||usrsctplinetinet/sctp_constants.h",
          "usrsctplib/netinet/sctp_input.c||usrsctplinetinet/sctp_input.c",
          "usrsctplib/netinet/sctp_pcb.c||usrsctplinetinet/sctp_pcb.c",
          "usrsctplib/netinet/sctp_timer.c||usrsctplinetinet/sctp_timer.c",
          "usrsctplib/netinet/sctp_usrreq.c||usrsctplinetinet/sctp_usrreq.c",
          "usrsctplib/netinet/sctputil.c||usrsctplinetinet/sctputil.c",
          "usrsctplib/netinet/sctputil.h||usrsctplinetinet/sctputil.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "usrsctplib/netinet/sctp_callout.c||usrsctplinetinet/sctp_callout.c": [
          "File: usrsctplib/netinet/sctp_callout.c -> usrsctplinetinet/sctp_callout.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "210:   if (atomic_cmpset_int(&SCTP_BASE_VAR(timer_thread_should_exit), 1, 1)) {",
          "211:    break;",
          "212:   }",
          "214:  }",
          "215:  return (NULL);",
          "216: }",
          "",
          "[Removed Lines]",
          "213:   sctp_handle_tick(MSEC_TO_TICKS(TIMEOUT_INTERVAL));",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "usrsctplib/netinet/sctp_cc_functions.c||usrsctplinetinet/sctp_cc_functions.c": [
          "File: usrsctplib/netinet/sctp_cc_functions.c -> usrsctplinetinet/sctp_cc_functions.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: #ifdef __FreeBSD__",
          "36: #include <sys/cdefs.h>",
          "38: #endif",
          "40: #include <netinet/sctp_os.h>",
          "",
          "[Removed Lines]",
          "37: __FBSDID(\"$FreeBSD: head/sys/netinet/sctp_cc_functions.c 356660 2020-01-12 15:45:27Z tuexen $\");",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2000:  if (net->fast_retran_ip == 0 && net->ssthresh < 0xFFFF && htcp_ccount(&net->cc_mod.htcp_ca) > 3) {",
          "2001:   if (net->cc_mod.htcp_ca.maxRTT < net->cc_mod.htcp_ca.minRTT)",
          "2002:    net->cc_mod.htcp_ca.maxRTT = net->cc_mod.htcp_ca.minRTT;",
          "2004:    net->cc_mod.htcp_ca.maxRTT = srtt;",
          "2005:  }",
          "2006: }",
          "",
          "[Removed Lines]",
          "2003:   if (net->cc_mod.htcp_ca.maxRTT < srtt && srtt <= net->cc_mod.htcp_ca.maxRTT+MSEC_TO_TICKS(20))",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2060:   }",
          "2061:  }",
          "2064:   ca->beta = (minRTT<<7)/maxRTT;",
          "2065:   if (ca->beta < BETA_MIN)",
          "2066:    ca->beta = BETA_MIN;",
          "",
          "[Removed Lines]",
          "2063:  if (ca->modeswitch && minRTT > (uint32_t)MSEC_TO_TICKS(10) && maxRTT) {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "usrsctplib/netinet/sctp_constants.h||usrsctplinetinet/sctp_constants.h": [
          "File: usrsctplib/netinet/sctp_constants.h -> usrsctplinetinet/sctp_constants.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: #ifdef __FreeBSD__",
          "36: #include <sys/cdefs.h>",
          "38: #endif",
          "40: #ifndef _NETINET_SCTP_CONSTANTS_H_",
          "",
          "[Removed Lines]",
          "37: __FBSDID(\"$FreeBSD: head/sys/netinet/sctp_constants.h 358169 2020-02-20 15:37:44Z tuexen $\");",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "593: #endif",
          "",
          "[Removed Lines]",
          "600: #define MSEC_TO_TICKS(x) ((hz == 1000) ? x : ((((x) * hz) + 999) / 1000))",
          "601: #define TICKS_TO_MSEC(x) ((hz == 1000) ? x : ((((x) * 1000) + (hz - 1)) / hz))",
          "603: #define SEC_TO_TICKS(x) ((x) * hz)",
          "604: #define TICKS_TO_SEC(x) (((x) + (hz - 1)) / hz)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "usrsctplib/netinet/sctp_input.c||usrsctplinetinet/sctp_input.c": [
          "File: usrsctplib/netinet/sctp_input.c -> usrsctplinetinet/sctp_input.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: #ifdef __FreeBSD__",
          "36: #include <sys/cdefs.h>",
          "38: #endif",
          "40: #include <netinet/sctp_os.h>",
          "",
          "[Removed Lines]",
          "37: __FBSDID(\"$FreeBSD: head/sys/netinet/sctp_input.c 359195 2020-03-21 16:12:19Z tuexen $\");",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2725:  (void)SCTP_GETTIME_TIMEVAL(&now);",
          "2728:  time_expires.tv_usec = cookie->time_entered.tv_usec;",
          "2729: #ifndef __FreeBSD__",
          "2730:  if (timercmp(&now, &time_expires, >))",
          "",
          "[Removed Lines]",
          "2727:  time_expires.tv_sec = cookie->time_entered.tv_sec + TICKS_TO_SEC(cookie->cookie_life);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "usrsctplib/netinet/sctp_pcb.c||usrsctplinetinet/sctp_pcb.c": [
          "File: usrsctplib/netinet/sctp_pcb.c -> usrsctplinetinet/sctp_pcb.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: #ifdef __FreeBSD__",
          "36: #include <sys/cdefs.h>",
          "38: #endif",
          "40: #include <netinet/sctp_os.h>",
          "",
          "[Removed Lines]",
          "37: __FBSDID(\"$FreeBSD: head/sys/netinet/sctp_pcb.c 359302 2020-03-25 15:29:01Z tuexen $\");",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3000:  m = &inp->sctp_ep;",
          "3011:  m->sctp_maxrto = SCTP_BASE_SYSCTL(sctp_rto_max_default);",
          "3012:  m->sctp_minrto = SCTP_BASE_SYSCTL(sctp_rto_min_default);",
          "",
          "[Removed Lines]",
          "3005:  m->sctp_timeoutticks[SCTP_TIMER_RECV] = MSEC_TO_TICKS(SCTP_BASE_SYSCTL(sctp_delayed_sack_time_default));",
          "3006:  m->sctp_timeoutticks[SCTP_TIMER_HEARTBEAT] = MSEC_TO_TICKS(SCTP_BASE_SYSCTL(sctp_heartbeat_interval_default));",
          "3007:  m->sctp_timeoutticks[SCTP_TIMER_PMTU] = SEC_TO_TICKS(SCTP_BASE_SYSCTL(sctp_pmtu_raise_time_default));",
          "3008:  m->sctp_timeoutticks[SCTP_TIMER_MAXSHUTDOWN] = SEC_TO_TICKS(SCTP_BASE_SYSCTL(sctp_shutdown_guard_time_default));",
          "3009:  m->sctp_timeoutticks[SCTP_TIMER_SIGNATURE] = SEC_TO_TICKS(SCTP_BASE_SYSCTL(sctp_secret_lifetime_default));",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3054:  sctp_timer_start(SCTP_TIMER_TYPE_NEWCOOKIE, inp, NULL, NULL);",
          "",
          "[Removed Lines]",
          "3057:  m->def_cookie_life = MSEC_TO_TICKS(SCTP_BASE_SYSCTL(sctp_valid_cookie_life_default));",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "usrsctplib/netinet/sctp_timer.c||usrsctplinetinet/sctp_timer.c": [
          "File: usrsctplib/netinet/sctp_timer.c -> usrsctplinetinet/sctp_timer.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: #ifdef __FreeBSD__",
          "36: #include <sys/cdefs.h>",
          "38: #endif",
          "40: #define _IP_VHL",
          "",
          "[Removed Lines]",
          "37: __FBSDID(\"$FreeBSD: head/sys/netinet/sctp_timer.c 359379 2020-03-27 21:48:52Z tuexen $\");",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1558:    tim_touse = &asoc->time_last_sent;",
          "1559:   }",
          "1562:   if (ticks_gone_by >= asoc->sctp_autoclose_ticks) {",
          "",
          "[Removed Lines]",
          "1561:   ticks_gone_by = SEC_TO_TICKS((uint32_t)(tn.tv_sec - tim_touse->tv_sec));",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "usrsctplib/netinet/sctp_usrreq.c||usrsctplinetinet/sctp_usrreq.c": [
          "File: usrsctplib/netinet/sctp_usrreq.c -> usrsctplinetinet/sctp_usrreq.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: #ifdef __FreeBSD__",
          "36: #include <sys/cdefs.h>",
          "38: #endif",
          "40: #include <netinet/sctp_os.h>",
          "",
          "[Removed Lines]",
          "37: __FBSDID(\"$FreeBSD: head/sys/netinet/sctp_usrreq.c 359162 2020-03-20 14:49:44Z tuexen $\");",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2264:    break;",
          "2265:   case SCTP_AUTOCLOSE:",
          "2266:    if (sctp_is_feature_on(inp, SCTP_PCB_FLAGS_AUTOCLOSE))",
          "2268:    else",
          "2269:     val = 0;",
          "2270:    break;",
          "",
          "[Removed Lines]",
          "2267:     val = TICKS_TO_SEC(inp->sctp_ep.auto_close_time);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2694:        ((inp->sctp_flags & SCTP_PCB_FLAGS_UDPTYPE) &&",
          "2695:         (sack->sack_assoc_id == SCTP_FUTURE_ASSOC))) {",
          "2696:     SCTP_INP_RLOCK(inp);",
          "2698:     sack->sack_freq = inp->sctp_ep.sctp_sack_freq;",
          "2699:     SCTP_INP_RUNLOCK(inp);",
          "2700:    } else {",
          "",
          "[Removed Lines]",
          "2697:     sack->sack_delay = TICKS_TO_MSEC(inp->sctp_ep.sctp_timeoutticks[SCTP_TIMER_RECV]);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3216:     SCTP_INP_RLOCK(inp);",
          "3217:     paddrp->spp_pathmaxrxt = inp->sctp_ep.def_net_failure;",
          "3219:     paddrp->spp_assoc_id = SCTP_FUTURE_ASSOC;",
          "3221:     if (inp->sctp_ep.default_dscp & 0x01) {",
          "",
          "[Removed Lines]",
          "3218:     paddrp->spp_hbinterval = TICKS_TO_MSEC(inp->sctp_ep.sctp_timeoutticks[SCTP_TIMER_HEARTBEAT]);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3505:   SCTP_FIND_STCB(inp, stcb, sasoc->sasoc_assoc_id);",
          "3507:   if (stcb) {",
          "3509:    sasoc->sasoc_asocmaxrxt = stcb->asoc.max_send_times;",
          "3510:    sasoc->sasoc_number_peer_destinations = stcb->asoc.numnets;",
          "3511:    sasoc->sasoc_peer_rwnd = stcb->asoc.peers_rwnd;",
          "",
          "[Removed Lines]",
          "3508:    sasoc->sasoc_cookie_life = TICKS_TO_MSEC(stcb->asoc.cookie_life);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "3517:        ((inp->sctp_flags & SCTP_PCB_FLAGS_UDPTYPE) &&",
          "3518:         (sasoc->sasoc_assoc_id == SCTP_FUTURE_ASSOC))) {",
          "3519:     SCTP_INP_RLOCK(inp);",
          "3521:     sasoc->sasoc_asocmaxrxt = inp->sctp_ep.max_send_times;",
          "3522:     sasoc->sasoc_number_peer_destinations = 0;",
          "3523:     sasoc->sasoc_peer_rwnd = 0;",
          "",
          "[Removed Lines]",
          "3520:     sasoc->sasoc_cookie_life = TICKS_TO_MSEC(inp->sctp_ep.def_cookie_life);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "4642:    break;",
          "4643:   }",
          "4644:   SCTP_INP_WLOCK(inp);",
          "",
          "[Removed Lines]",
          "4641:    inp->sctp_ep.auto_close_time = SEC_TO_TICKS(*mopt);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "5140:   SCTP_CHECK_AND_CAST(sack, optval, struct sctp_sack_info, optsize);",
          "5141:   SCTP_FIND_STCB(inp, stcb, sack->sack_assoc_id);",
          "5142:   if (sack->sack_delay) {",
          "5147:    }",
          "5148:   }",
          "5149:   if (stcb) {",
          "",
          "[Removed Lines]",
          "5143:    if (sack->sack_delay > SCTP_MAX_SACK_DELAY)",
          "5144:     sack->sack_delay = SCTP_MAX_SACK_DELAY;",
          "5145:    if (MSEC_TO_TICKS(sack->sack_delay) < 1) {",
          "5146:     sack->sack_delay = TICKS_TO_MSEC(1);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "5162:          (sack->sack_assoc_id == SCTP_ALL_ASSOC)))) {",
          "5163:     SCTP_INP_WLOCK(inp);",
          "5164:     if (sack->sack_delay) {",
          "5166:     }",
          "5167:     if (sack->sack_freq) {",
          "5168:      inp->sctp_ep.sctp_sack_freq = sack->sack_freq;",
          "",
          "[Removed Lines]",
          "5165:      inp->sctp_ep.sctp_timeoutticks[SCTP_TIMER_RECV] = MSEC_TO_TICKS(sack->sack_delay);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "5216:   if (sca->sca_keylength == 0) {",
          "5217:    size = optsize - sizeof(struct sctp_authkey);",
          "5218:   } else {",
          "5220:     size = sca->sca_keylength;",
          "5221:    } else {",
          "5222:     SCTP_LTRACE_ERR_RET(inp, NULL, NULL, SCTP_FROM_SCTP_USRREQ, EINVAL);",
          "",
          "[Removed Lines]",
          "5219:           if (sca->sca_keylength + sizeof(struct sctp_authkey) <= optsize) {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "6533:     else if (paddrp->spp_hbinterval != 0) {",
          "6534:      if (paddrp->spp_hbinterval > SCTP_MAX_HB_INTERVAL)",
          "6535:       paddrp->spp_hbinterval= SCTP_MAX_HB_INTERVAL;",
          "6537:     }",
          "6539:     if (paddrp->spp_flags & SPP_HB_ENABLE) {",
          "6540:      if (paddrp->spp_flags & SPP_HB_TIME_IS_ZERO) {",
          "6541:       inp->sctp_ep.sctp_timeoutticks[SCTP_TIMER_HEARTBEAT] = 0;",
          "6542:      } else if (paddrp->spp_hbinterval) {",
          "6544:      }",
          "6545:      sctp_feature_off(inp, SCTP_PCB_FLAGS_DONOT_HEARTBEAT);",
          "6546:     } else if (paddrp->spp_flags & SPP_HB_DISABLE) {",
          "",
          "[Removed Lines]",
          "6536:      inp->sctp_ep.sctp_timeoutticks[SCTP_TIMER_HEARTBEAT] = MSEC_TO_TICKS(paddrp->spp_hbinterval);",
          "6543:       inp->sctp_ep.sctp_timeoutticks[SCTP_TIMER_HEARTBEAT] = MSEC_TO_TICKS(paddrp->spp_hbinterval);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "6655:    if (sasoc->sasoc_asocmaxrxt)",
          "6656:     stcb->asoc.max_send_times = sasoc->sasoc_asocmaxrxt;",
          "6657:    if (sasoc->sasoc_cookie_life) {",
          "6659:    }",
          "6660:    SCTP_TCB_UNLOCK(stcb);",
          "6661:   } else {",
          "",
          "[Removed Lines]",
          "6658:     stcb->asoc.cookie_life = MSEC_TO_TICKS(sasoc->sasoc_cookie_life);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "6667:     if (sasoc->sasoc_asocmaxrxt)",
          "6668:      inp->sctp_ep.max_send_times = sasoc->sasoc_asocmaxrxt;",
          "6669:     if (sasoc->sasoc_cookie_life) {",
          "6671:     }",
          "6672:     SCTP_INP_WUNLOCK(inp);",
          "6673:    } else {",
          "",
          "[Removed Lines]",
          "6670:      inp->sctp_ep.def_cookie_life = MSEC_TO_TICKS(sasoc->sasoc_cookie_life);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "usrsctplib/netinet/sctputil.c||usrsctplinetinet/sctputil.c": [
          "File: usrsctplib/netinet/sctputil.c -> usrsctplinetinet/sctputil.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: #ifdef __FreeBSD__",
          "36: #include <sys/cdefs.h>",
          "38: #endif",
          "40: #include <netinet/sctp_os.h>",
          "",
          "[Removed Lines]",
          "37: __FBSDID(\"$FreeBSD: head/sys/netinet/sctputil.c 359306 2020-03-25 18:20:37Z tuexen $\");",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "804: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1101:  SCTP_SET_STATE(stcb, SCTP_STATE_INUSE);",
          "1102:  asoc->max_burst = inp->sctp_ep.max_burst;",
          "1103:  asoc->fr_max_burst = inp->sctp_ep.fr_max_burst;",
          "1105:  asoc->cookie_life = inp->sctp_ep.def_cookie_life;",
          "1106:  asoc->sctp_cmt_on_off = inp->sctp_cmt_on_off;",
          "1107:  asoc->ecn_supported = inp->ecn_supported;",
          "",
          "[Removed Lines]",
          "1104:  asoc->heart_beat_delay = TICKS_TO_MSEC(inp->sctp_ep.sctp_timeoutticks[SCTP_TIMER_HEARTBEAT]);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1187:  asoc->context = inp->sctp_context;",
          "1188:  asoc->local_strreset_support = inp->local_strreset_support;",
          "1189:  asoc->def_send = inp->def_send;",
          "1191:  asoc->sack_freq = inp->sctp_ep.sctp_sack_freq;",
          "1192:  asoc->pr_sctp_cnt = 0;",
          "1193:  asoc->total_output_queue_size = 0;",
          "",
          "[Removed Lines]",
          "1190:  asoc->delayed_ack = TICKS_TO_MSEC(inp->sctp_ep.sctp_timeoutticks[SCTP_TIMER_RECV]);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2224:   }",
          "2225:   tmr = &net->rxt_timer;",
          "2226:   if (net->RTO == 0) {",
          "2228:   } else {",
          "2230:   }",
          "2231:   break;",
          "2232:  case SCTP_TIMER_TYPE_INIT:",
          "",
          "[Removed Lines]",
          "2227:    to_ticks = MSEC_TO_TICKS(stcb->asoc.initial_rto);",
          "2229:    to_ticks = MSEC_TO_TICKS(net->RTO);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2244:   }",
          "2245:   tmr = &net->rxt_timer;",
          "2246:   if (net->RTO == 0) {",
          "2248:   } else {",
          "2250:   }",
          "2251:   break;",
          "2252:  case SCTP_TIMER_TYPE_RECV:",
          "",
          "[Removed Lines]",
          "2247:    to_ticks = MSEC_TO_TICKS(stcb->asoc.initial_rto);",
          "2249:    to_ticks = MSEC_TO_TICKS(net->RTO);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2263: #endif",
          "2264:   }",
          "2265:   tmr = &stcb->asoc.dack_timer;",
          "2267:   break;",
          "2268:  case SCTP_TIMER_TYPE_SHUTDOWN:",
          "",
          "[Removed Lines]",
          "2266:   to_ticks = MSEC_TO_TICKS(stcb->asoc.delayed_ack);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2277:   }",
          "2278:   tmr = &net->rxt_timer;",
          "2279:   if (net->RTO == 0) {",
          "2281:   } else {",
          "2283:   }",
          "2284:   break;",
          "2285:  case SCTP_TIMER_TYPE_HEARTBEAT:",
          "",
          "[Removed Lines]",
          "2280:    to_ticks = MSEC_TO_TICKS(stcb->asoc.initial_rto);",
          "2282:    to_ticks = MSEC_TO_TICKS(net->RTO);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2328:   break;",
          "2329:  case SCTP_TIMER_TYPE_COOKIE:",
          "",
          "[Removed Lines]",
          "2327:   to_ticks = MSEC_TO_TICKS(to_ticks);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2342:   }",
          "2343:   tmr = &net->rxt_timer;",
          "2344:   if (net->RTO == 0) {",
          "2346:   } else {",
          "2348:   }",
          "2349:   break;",
          "2350:  case SCTP_TIMER_TYPE_NEWCOOKIE:",
          "",
          "[Removed Lines]",
          "2345:    to_ticks = MSEC_TO_TICKS(stcb->asoc.initial_rto);",
          "2347:    to_ticks = MSEC_TO_TICKS(net->RTO);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2397:   }",
          "2398:   tmr = &net->rxt_timer;",
          "2399:   if (net->RTO == 0) {",
          "2401:   } else {",
          "2403:   }",
          "2404:   break;",
          "2405:  case SCTP_TIMER_TYPE_ASCONF:",
          "",
          "[Removed Lines]",
          "2400:    to_ticks = MSEC_TO_TICKS(stcb->asoc.initial_rto);",
          "2402:    to_ticks = MSEC_TO_TICKS(net->RTO);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "2417:   }",
          "2418:   tmr = &stcb->asoc.asconf_timer;",
          "2419:   if (net->RTO == 0) {",
          "2421:   } else {",
          "2423:   }",
          "2424:   break;",
          "2425:  case SCTP_TIMER_TYPE_SHUTDOWNGUARD:",
          "",
          "[Removed Lines]",
          "2420:    to_ticks = MSEC_TO_TICKS(stcb->asoc.initial_rto);",
          "2422:    to_ticks = MSEC_TO_TICKS(net->RTO);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "2437:   }",
          "2438:   tmr = &stcb->asoc.shut_guard_timer;",
          "2439:   if (inp->sctp_ep.sctp_timeoutticks[SCTP_TIMER_MAXSHUTDOWN] == 0) {",
          "2441:   } else {",
          "2442:    to_ticks = inp->sctp_ep.sctp_timeoutticks[SCTP_TIMER_MAXSHUTDOWN];",
          "2443:   }",
          "",
          "[Removed Lines]",
          "2440:    to_ticks = 5 * MSEC_TO_TICKS(stcb->asoc.maxrto);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "2469:   }",
          "2470:   tmr = &stcb->asoc.strreset_timer;",
          "2471:   if (net->RTO == 0) {",
          "2473:   } else {",
          "2475:   }",
          "2476:   break;",
          "2477:  case SCTP_TIMER_TYPE_INPKILL:",
          "",
          "[Removed Lines]",
          "2472:    to_ticks = MSEC_TO_TICKS(stcb->asoc.initial_rto);",
          "2474:    to_ticks = MSEC_TO_TICKS(net->RTO);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "2489: #endif",
          "2490:   }",
          "2491:   tmr = &inp->sctp_ep.signature_change;",
          "2493:   break;",
          "2494:  case SCTP_TIMER_TYPE_ASOCKILL:",
          "2495:   if ((inp == NULL) || (stcb == NULL) || (net != NULL)) {",
          "",
          "[Removed Lines]",
          "2492:   to_ticks = MSEC_TO_TICKS(SCTP_INP_KILL_TIMEOUT);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "2501: #endif",
          "2502:   }",
          "2503:   tmr = &stcb->asoc.strreset_timer;",
          "2505:   break;",
          "2506:  case SCTP_TIMER_TYPE_ADDR_WQ:",
          "2507:   if ((inp != NULL) || (stcb != NULL) || (net != NULL)) {",
          "",
          "[Removed Lines]",
          "2504:   to_ticks = MSEC_TO_TICKS(SCTP_ASOC_KILL_TIMEOUT);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "2526: #endif",
          "2527:   }",
          "2528:   tmr = &stcb->asoc.delete_prim_timer;",
          "2530:   break;",
          "2531:  default:",
          "2532: #ifdef INVARIANTS",
          "",
          "[Removed Lines]",
          "2529:   to_ticks = MSEC_TO_TICKS(stcb->asoc.initial_rto);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "usrsctplib/netinet/sctputil.h||usrsctplinetinet/sctputil.h": [
          "File: usrsctplib/netinet/sctputil.h -> usrsctplinetinet/sctputil.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: #ifdef __FreeBSD__",
          "36: #include <sys/cdefs.h>",
          "38: #endif",
          "40: #ifndef _NETINET_SCTP_UTIL_H_",
          "",
          "[Removed Lines]",
          "37: __FBSDID(\"$FreeBSD: head/sys/netinet/sctputil.h 357775 2020-02-11 20:02:20Z tuexen $\");",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "430: #endif",
          "431: void sctp_set_state(struct sctp_tcb *, int);",
          "432: void sctp_add_substate(struct sctp_tcb *, int);",
          "434: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c6c994c79bfddc8c58306bed20e3f15343eecea0",
      "candidate_info": {
        "commit_hash": "c6c994c79bfddc8c58306bed20e3f15343eecea0",
        "repo": "sctplab/usrsctp",
        "commit_url": "https://github.com/sctplab/usrsctp/commit/c6c994c79bfddc8c58306bed20e3f15343eecea0",
        "files": [
          "usrsctplib/netinet/sctp_asconf.c",
          "usrsctplib/netinet/sctp_auth.c",
          "usrsctplib/netinet/sctp_os_userspace.h",
          "usrsctplib/netinet/sctp_pcb.c",
          "usrsctplib/netinet/sctp_usrreq.c",
          "usrsctplib/netinet/sctputil.c"
        ],
        "message": "Cleanups.",
        "before_after_code_files": [
          "usrsctplib/netinet/sctp_asconf.c||usrsctplinetinet/sctp_asconf.c",
          "usrsctplib/netinet/sctp_auth.c||usrsctplinetinet/sctp_auth.c",
          "usrsctplib/netinet/sctp_os_userspace.h||usrsctplinetinet/sctp_os_userspace.h",
          "usrsctplib/netinet/sctp_pcb.c||usrsctplinetinet/sctp_pcb.c",
          "usrsctplib/netinet/sctp_usrreq.c||usrsctplinetinet/sctp_usrreq.c",
          "usrsctplib/netinet/sctputil.c||usrsctplinetinet/sctputil.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "usrsctplib/netinet/sctp_asconf.c||usrsctplinetinet/sctp_asconf.c": [
          "File: usrsctplib/netinet/sctp_asconf.c -> usrsctplinetinet/sctp_asconf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: #ifdef __FreeBSD__",
          "36: #include <sys/cdefs.h>",
          "38: #endif",
          "40: #include <netinet/sctp_os.h>",
          "",
          "[Removed Lines]",
          "37: __FBSDID(\"$FreeBSD: head/sys/netinet/sctp_asconf.c 361209 2020-05-18 10:07:01Z tuexen $\");",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1840:    break;",
          "1841:   }",
          "1842:   offset += SCTP_SIZE32(param_length);",
          "",
          "[Removed Lines]",
          "1837:   ack_length -= SCTP_SIZE32(param_length);",
          "1838:   if (ack_length <= 0) {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3077:     \"check_addr_list_ep: laddr->ifa is NULL\");",
          "3078:    continue;",
          "3079:   }",
          "3085:   if (sctp_cmpaddr(&laddr->ifa->address.sa, init_addr)) {",
          "3086:    continue;",
          "",
          "[Removed Lines]",
          "3080:   if (laddr->ifa == NULL) {",
          "3081:    SCTPDBG(SCTP_DEBUG_ASCONF1, \"check_addr_list_ep: laddr->ifa->ifa_addr is NULL\");",
          "3082:    continue;",
          "3083:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "usrsctplib/netinet/sctp_auth.c||usrsctplinetinet/sctp_auth.c": [
          "File: usrsctplib/netinet/sctp_auth.c -> usrsctplinetinet/sctp_auth.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: #ifdef __FreeBSD__",
          "36: #include <sys/cdefs.h>",
          "38: #endif",
          "40: #include <netinet/sctp_os.h>",
          "",
          "[Removed Lines]",
          "37: __FBSDID(\"$FreeBSD: head/sys/netinet/sctp_auth.c 355931 2019-12-20 15:25:08Z tuexen $\");",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "660: {",
          "661:  if (list != NULL) {",
          "662:   SCTP_FREE(list,SCTP_M_AUTH_HL);",
          "664:  }",
          "665: }",
          "",
          "[Removed Lines]",
          "663:   list = NULL;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "usrsctplib/netinet/sctp_os_userspace.h||usrsctplinetinet/sctp_os_userspace.h": [
          "File: usrsctplib/netinet/sctp_os_userspace.h -> usrsctplinetinet/sctp_os_userspace.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "888:   return;",
          "889:  }",
          "890:  free(rt);",
          "892: }",
          "893: #define rtfree(arg1) sctp_userspace_rtfree(arg1)",
          "",
          "[Removed Lines]",
          "891:  rt = NULL;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "usrsctplib/netinet/sctp_pcb.c||usrsctplinetinet/sctp_pcb.c": [
          "File: usrsctplib/netinet/sctp_pcb.c -> usrsctplinetinet/sctp_pcb.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: #ifdef __FreeBSD__",
          "36: #include <sys/cdefs.h>",
          "38: #endif",
          "40: #include <netinet/sctp_os.h>",
          "",
          "[Removed Lines]",
          "37: __FBSDID(\"$FreeBSD: head/sys/netinet/sctp_pcb.c 361209 2020-05-18 10:07:01Z tuexen $\");",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "6004:      SCTP_FREE_SHOULD_USE_GRACEFUL_CLOSE,",
          "6005:      SCTP_CALLED_DIRECTLY_NOCMPSET);",
          "6006:    SCTP_INP_DECR_REF(inp);",
          "6008:   } else {",
          "6010:    SCTP_INP_DECR_REF(inp);",
          "6011:   }",
          "6012:  }",
          "6018: #ifdef SCTP_LOG_CLOSING",
          "6019:  sctp_log_closing(inp, NULL, 11);",
          "",
          "[Removed Lines]",
          "6007:    goto out_of;",
          "6013:  if (from_inpcbfree == SCTP_NORMAL_PROC) {",
          "6014:   SCTP_INP_RUNLOCK(inp);",
          "6015:  }",
          "6016:  out_of:",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "usrsctplib/netinet/sctp_usrreq.c||usrsctplinetinet/sctp_usrreq.c": [
          "File: usrsctplib/netinet/sctp_usrreq.c -> usrsctplinetinet/sctp_usrreq.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: #ifdef __FreeBSD__",
          "36: #include <sys/cdefs.h>",
          "38: #endif",
          "40: #include <netinet/sctp_os.h>",
          "",
          "[Removed Lines]",
          "37: __FBSDID(\"$FreeBSD: head/sys/netinet/sctp_usrreq.c 359410 2020-03-28 22:35:04Z tuexen $\");",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1534:  struct sctp_vrf *vrf;",
          "1536:  actual = 0;",
          "1538:   return (actual);",
          "1540:  if (stcb) {",
          "",
          "[Removed Lines]",
          "1537:  if (limit <= 0)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "8566:  struct sctp_inpcb *inp;",
          "8567:  union sctp_sockstore store;",
          "8568: #ifdef INET6",
          "8570:  int error;",
          "8572: #endif",
          "8573:  inp = (struct sctp_inpcb *)so->so_pcb;",
          "",
          "[Removed Lines]",
          "8569: #ifdef SCTP_KAME",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "9034:  struct mbuf *m, *nam, *control;",
          "9035: {",
          "9036:  struct proc *p = curproc;",
          "9039:  int error;",
          "9040:  int family;",
          "9041:  struct sctp_inpcb *inp = (struct sctp_inpcb *)so->so_pcb;",
          "",
          "[Removed Lines]",
          "9037:  uint32_t vrf_id;",
          "9038:  struct sctp_vrf *vrf;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "usrsctplib/netinet/sctputil.c||usrsctplinetinet/sctputil.c": [
          "File: usrsctplib/netinet/sctputil.c -> usrsctplinetinet/sctputil.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: #ifdef __FreeBSD__",
          "36: #include <sys/cdefs.h>",
          "38: #endif",
          "40: #include <netinet/sctp_os.h>",
          "",
          "[Removed Lines]",
          "37: __FBSDID(\"$FreeBSD: head/sys/netinet/sctputil.c 361214 2020-05-18 15:02:15Z tuexen $\");",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1180:  asoc->sctp_cmt_on_off = inp->sctp_cmt_on_off;",
          "1181:  asoc->ecn_supported = inp->ecn_supported;",
          "1182:  asoc->prsctp_supported = inp->prsctp_supported;",
          "1184:  asoc->auth_supported = inp->auth_supported;",
          "1185:  asoc->asconf_supported = inp->asconf_supported;",
          "1186:  asoc->reconfig_supported = inp->reconfig_supported;",
          "",
          "[Removed Lines]",
          "1183:  asoc->idata_supported = inp->idata_supported;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bfb04f3afb25f7f6d43ac042b9cd43fbabca70b5",
      "candidate_info": {
        "commit_hash": "bfb04f3afb25f7f6d43ac042b9cd43fbabca70b5",
        "repo": "sctplab/usrsctp",
        "commit_url": "https://github.com/sctplab/usrsctp/commit/bfb04f3afb25f7f6d43ac042b9cd43fbabca70b5",
        "files": [
          "usrsctplib/netinet/sctp_input.c",
          "usrsctplib/netinet/sctp_output.c",
          "usrsctplib/netinet/sctp_pcb.c",
          "usrsctplib/netinet/sctp_pcb.h",
          "usrsctplib/netinet/sctp_usrreq.c",
          "usrsctplib/netinet6/sctp6_usrreq.c"
        ],
        "message": "Improve locking.",
        "before_after_code_files": [
          "usrsctplib/netinet/sctp_input.c||usrsctplinetinet/sctp_input.c",
          "usrsctplib/netinet/sctp_output.c||usrsctplinetinet/sctp_output.c",
          "usrsctplib/netinet/sctp_pcb.c||usrsctplinetinet/sctp_pcb.c",
          "usrsctplib/netinet/sctp_pcb.h||usrsctplinetinet/sctp_pcb.h",
          "usrsctplib/netinet/sctp_usrreq.c||usrsctplinetinet/sctp_usrreq.c",
          "usrsctplib/netinet6/sctp6_usrreq.c||usrsctplinetinet6/sctp6_usrreq.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "usrsctplib/netinet/sctp_pcb.c||usrsctplib/netinet/sctp_pcb.c"
          ],
          "candidate": [
            "usrsctplib/netinet/sctp_pcb.c||usrsctplinetinet/sctp_pcb.c"
          ]
        }
      },
      "candidate_diff": {
        "usrsctplib/netinet/sctp_input.c||usrsctplinetinet/sctp_input.c": [
          "File: usrsctplib/netinet/sctp_input.c -> usrsctplinetinet/sctp_input.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: #ifdef __FreeBSD__",
          "36: #include <sys/cdefs.h>",
          "38: #endif",
          "40: #include <netinet/sctp_os.h>",
          "",
          "[Removed Lines]",
          "37: __FBSDID(\"$FreeBSD: head/sys/netinet/sctp_input.c 339042 2018-10-01 14:05:31Z tuexen $\");",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2241:                         ntohs(initack_cp->init.num_outbound_streams),",
          "2242:                         port,",
          "2243: #if defined(__FreeBSD__) && __FreeBSD_version >= 500000",
          "2245: #elif defined(__Windows__)",
          "2247: #else",
          "2249: #endif",
          "2251:  if (stcb == NULL) {",
          "2252:   struct mbuf *op_err;",
          "",
          "[Removed Lines]",
          "2244:                         (struct thread *)NULL",
          "2246:                         (PKTHREAD)NULL",
          "2248:                         (struct proc *)NULL",
          "2250:                         );",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "usrsctplib/netinet/sctp_output.c||usrsctplinetinet/sctp_output.c": [
          "File: usrsctplib/netinet/sctp_output.c -> usrsctplinetinet/sctp_output.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: #ifdef __FreeBSD__",
          "36: #include <sys/cdefs.h>",
          "38: #endif",
          "40: #include <netinet/sctp_os.h>",
          "",
          "[Removed Lines]",
          "37: __FBSDID(\"$FreeBSD: head/sys/netinet/sctp_output.c 345467 2019-03-24 12:13:05Z tuexen $\");",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "13803:                           inp->sctp_ep.pre_open_stream_count,",
          "13804:                           inp->sctp_ep.port,",
          "13805: #if !(defined( __Panda__) || defined(__Userspace__))",
          "13807: #else",
          "13809: #endif",
          "13810:    if (stcb == NULL) {",
          "13812:     goto out_unlocked;",
          "",
          "[Removed Lines]",
          "13806:                           p);",
          "13808:                           (struct proc *)NULL);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "13829:    SCTP_SET_STATE(stcb, SCTP_STATE_COOKIE_WAIT);",
          "13830:    (void)SCTP_GETTIME_TIMEVAL(&asoc->time_entered);",
          "13835:    if (control) {",
          "13836:     if (sctp_process_cmsgs_for_init(stcb, control, &error)) {",
          "13837:      sctp_free_assoc(inp, stcb, SCTP_PCBFREE_FORCE,",
          "",
          "[Removed Lines]",
          "13833:    sctp_initialize_auth_params(inp, stcb);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "usrsctplib/netinet/sctp_pcb.c||usrsctplinetinet/sctp_pcb.c": [
          "File: usrsctplib/netinet/sctp_pcb.c -> usrsctplinetinet/sctp_pcb.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: #ifdef __FreeBSD__",
          "36: #include <sys/cdefs.h>",
          "38: #endif",
          "40: #include <netinet/sctp_os.h>",
          "",
          "[Removed Lines]",
          "37: __FBSDID(\"$FreeBSD: head/sys/netinet/sctp_pcb.c 345504 2019-03-25 15:23:20Z tuexen $\");",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4916:                 int *error, uint32_t override_tag, uint32_t vrf_id,",
          "4917:                 uint16_t o_streams, uint16_t port,",
          "4918: #if defined(__FreeBSD__) && __FreeBSD_version >= 500000",
          "4920: #elif defined(__Windows__)",
          "4922: #else",
          "4923: #if defined(__Userspace__)",
          "4925: #endif",
          "4927: #endif",
          "4929: {",
          "",
          "[Removed Lines]",
          "4919:   struct thread *p",
          "4921:   PKTHREAD p",
          "4926:   struct proc *p",
          "4928: )",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "5183:       inp->sctp_hashmark)];",
          "5184:   LIST_INSERT_HEAD(head, stcb, sctp_tcbhash);",
          "5185:  }",
          "5186:  SCTP_INP_WUNLOCK(inp);",
          "5187:  SCTPDBG(SCTP_DEBUG_PCB1, \"Association %p now allocated\\n\", (void *)stcb);",
          "5188:  return (stcb);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "6849: #endif",
          "6850: #if defined(__Userspace__)",
          "6851:  mbuf_initialize(NULL);",
          "6853:  atomic_init();",
          "6855: #if defined(INET) || defined(INET6)",
          "6856:  recv_thread_init();",
          "6857: #endif",
          "",
          "[Removed Lines]",
          "6852: #if !defined(__MINGW32__)",
          "6854: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "usrsctplib/netinet/sctp_pcb.h||usrsctplinetinet/sctp_pcb.h": [
          "File: usrsctplib/netinet/sctp_pcb.h -> usrsctplinetinet/sctp_pcb.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: #ifdef __FreeBSD__",
          "36: #include <sys/cdefs.h>",
          "38: #endif",
          "40: #ifndef _NETINET_SCTP_PCB_H_",
          "",
          "[Removed Lines]",
          "37: __FBSDID(\"$FreeBSD: head/sys/netinet/sctp_pcb.h 325370 2017-11-03 20:46:12Z tuexen $\");",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "320: #endif",
          "321: #endif",
          "322: #ifdef INET",
          "324:  SOCKET userspace_rawsctp;",
          "325:  SOCKET userspace_udpsctp;",
          "326: #else",
          "",
          "[Removed Lines]",
          "323: #if defined(__Userspace_os_Windows) && !defined(__MINGW32__)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "331:  userland_thread_t recvthreadudp;",
          "332: #endif",
          "333: #ifdef INET6",
          "335:  SOCKET userspace_rawsctp6;",
          "336:  SOCKET userspace_udpsctp6;",
          "337: #else",
          "",
          "[Removed Lines]",
          "334: #if defined(__Userspace_os_Windows) && !defined(__MINGW32__)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "804: void sctp_inpcb_free(struct sctp_inpcb *, int, int);",
          "806: #if defined(__FreeBSD__) && __FreeBSD_version >= 500000",
          "807: struct sctp_tcb *",
          "808: sctp_aloc_assoc(struct sctp_inpcb *, struct sockaddr *,",
          "810: #elif defined(__Windows__)",
          "811: struct sctp_tcb *",
          "812: sctp_aloc_assoc(struct sctp_inpcb *, struct sockaddr *,",
          "814: #else",
          "816: struct sctp_tcb *",
          "817: sctp_aloc_assoc(struct sctp_inpcb *, struct sockaddr *,",
          "819: #endif",
          "821: int sctp_free_assoc(struct sctp_inpcb *, struct sctp_tcb *, int, int);",
          "",
          "[Removed Lines]",
          "809:                 int *, uint32_t, uint32_t, uint16_t, uint16_t, struct thread *);",
          "813:                 int *, uint32_t, uint32_t, uint16_t, uint16_t, PKTHREAD);",
          "818:                 int *, uint32_t, uint32_t, uint16_t, uint16_t, struct proc *);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "usrsctplib/netinet/sctp_usrreq.c||usrsctplinetinet/sctp_usrreq.c": [
          "File: usrsctplib/netinet/sctp_usrreq.c -> usrsctplinetinet/sctp_usrreq.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: #ifdef __FreeBSD__",
          "36: #include <sys/cdefs.h>",
          "38: #endif",
          "40: #include <netinet/sctp_os.h>",
          "",
          "[Removed Lines]",
          "37: __FBSDID(\"$FreeBSD: head/sys/netinet/sctp_usrreq.c 347976 2019-05-19 17:53:36Z tuexen $\");",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2044:                         inp->sctp_ep.pre_open_stream_count,",
          "2045:                         inp->sctp_ep.port,",
          "2046: #if defined(__FreeBSD__) && __FreeBSD_version >= 500000",
          "2048: #elif defined(__Windows__)",
          "2050: #else",
          "2052: #endif",
          "2054:  if (stcb == NULL) {",
          "2056:   goto out_now;",
          "",
          "[Removed Lines]",
          "2047:           (struct thread *)p",
          "2049:           (PKTHREAD)p",
          "2051:           (struct proc *)p",
          "2053:   );",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2086:  a_id = (sctp_assoc_t *)optval;",
          "2092:  if (delay) {",
          "2094:   stcb->asoc.delayed_connection = 1;",
          "",
          "[Removed Lines]",
          "2090:  sctp_initialize_auth_params(inp, stcb);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "8006:  stcb = sctp_aloc_assoc(inp, addr, &error, 0, vrf_id,",
          "8007:                         inp->sctp_ep.pre_open_stream_count,",
          "8009:  if (stcb == NULL) {",
          "8011:   goto out_now;",
          "",
          "[Removed Lines]",
          "8008:                         inp->sctp_ep.port, p);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "8018:  SCTP_SET_STATE(stcb, SCTP_STATE_COOKIE_WAIT);",
          "8019:  (void)SCTP_GETTIME_TIMEVAL(&stcb->asoc.time_entered);",
          "8024:  sctp_send_initiate(inp, stcb, SCTP_SO_LOCKED);",
          "8025:  SCTP_TCB_UNLOCK(stcb);",
          "8026:  out_now:",
          "",
          "[Removed Lines]",
          "8022:  sctp_initialize_auth_params(inp, stcb);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "8173:  stcb = sctp_aloc_assoc(inp, addr, &error, 0, vrf_id,",
          "8174:                         inp->sctp_ep.pre_open_stream_count,",
          "8176:  if (stcb == NULL) {",
          "8178:   goto out_now;",
          "",
          "[Removed Lines]",
          "8175:                         inp->sctp_ep.port, p);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "8185:  SCTP_SET_STATE(stcb, SCTP_STATE_COOKIE_WAIT);",
          "8186:  (void)SCTP_GETTIME_TIMEVAL(&stcb->asoc.time_entered);",
          "8191:  sctp_send_initiate(inp, stcb, SCTP_SO_LOCKED);",
          "8192:  SCTP_TCB_UNLOCK(stcb);",
          "8193:  out_now:",
          "",
          "[Removed Lines]",
          "8189:  sctp_initialize_auth_params(inp, stcb);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "usrsctplib/netinet6/sctp6_usrreq.c||usrsctplinetinet6/sctp6_usrreq.c": [
          "File: usrsctplib/netinet6/sctp6_usrreq.c -> usrsctplinetinet6/sctp6_usrreq.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: #ifdef __FreeBSD__",
          "36: #include <sys/cdefs.h>",
          "38: #endif",
          "40: #include <netinet/sctp_os.h>",
          "",
          "[Removed Lines]",
          "37: __FBSDID(\"$FreeBSD: head/sys/netinet6/sctp6_usrreq.c 337738 2018-08-14 08:33:47Z tuexen $\");",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1295:  stcb = sctp_aloc_assoc(inp, addr, &error, 0, vrf_id,",
          "1296:                         inp->sctp_ep.pre_open_stream_count,",
          "1298:  SCTP_ASOC_CREATE_UNLOCK(inp);",
          "1299:  if (stcb == NULL) {",
          "",
          "[Removed Lines]",
          "1297:                         inp->sctp_ep.port, p);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1307:  }",
          "1308:  SCTP_SET_STATE(stcb, SCTP_STATE_COOKIE_WAIT);",
          "1309:  (void)SCTP_GETTIME_TIMEVAL(&stcb->asoc.time_entered);",
          "1314:  sctp_send_initiate(inp, stcb, SCTP_SO_LOCKED);",
          "1315:  SCTP_TCB_UNLOCK(stcb);",
          "1316:  return (error);",
          "",
          "[Removed Lines]",
          "1312:  sctp_initialize_auth_params(inp, stcb);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "51d8b3495e37c603dfe5a17704a97ab9e228593a",
      "candidate_info": {
        "commit_hash": "51d8b3495e37c603dfe5a17704a97ab9e228593a",
        "repo": "sctplab/usrsctp",
        "commit_url": "https://github.com/sctplab/usrsctp/commit/51d8b3495e37c603dfe5a17704a97ab9e228593a",
        "files": [
          "usrsctplib/netinet/sctp_pcb.c"
        ],
        "message": "Sync with FreeBSD.",
        "before_after_code_files": [
          "usrsctplib/netinet/sctp_pcb.c||usrsctplinetinet/sctp_pcb.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "usrsctplib/netinet/sctp_pcb.c||usrsctplib/netinet/sctp_pcb.c"
          ],
          "candidate": [
            "usrsctplib/netinet/sctp_pcb.c||usrsctplinetinet/sctp_pcb.c"
          ]
        }
      },
      "candidate_diff": {
        "usrsctplib/netinet/sctp_pcb.c||usrsctplinetinet/sctp_pcb.c": [
          "File: usrsctplib/netinet/sctp_pcb.c -> usrsctplinetinet/sctp_pcb.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: #ifdef __FreeBSD__",
          "36: #include <sys/cdefs.h>",
          "38: #endif",
          "40: #include <netinet/sctp_os.h>",
          "",
          "[Removed Lines]",
          "37: __FBSDID(\"$FreeBSD: head/sys/netinet/sctp_pcb.c 351641 2019-08-31 13:13:40Z tuexen $\");",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "51: #include <netinet/sctp_output.h>",
          "52: #include <netinet/sctp_timer.h>",
          "53: #include <netinet/sctp_bsd_addr.h>",
          "57: #if defined(INET) || defined(INET6)",
          "58: #if !defined(__Userspace_os_Windows)",
          "59: #include <netinet/udp.h>",
          "",
          "[Removed Lines]",
          "54: #if defined(__FreeBSD__) && __FreeBSD_version >= 1000000",
          "55: #include <netinet/sctp_dtrace_define.h>",
          "56: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "be8e0ebaed64508599086f5c5795e13dace9e308",
      "candidate_info": {
        "commit_hash": "be8e0ebaed64508599086f5c5795e13dace9e308",
        "repo": "sctplab/usrsctp",
        "commit_url": "https://github.com/sctplab/usrsctp/commit/be8e0ebaed64508599086f5c5795e13dace9e308",
        "files": [
          "usrsctplib/netinet/sctp.h",
          "usrsctplib/netinet/sctp_output.c",
          "usrsctplib/netinet/sctp_pcb.c",
          "usrsctplib/netinet/sctp_ss_functions.c",
          "usrsctplib/netinet/sctp_usrreq.c",
          "usrsctplib/netinet/sctputil.c"
        ],
        "message": "Sync with FreeBSD.",
        "before_after_code_files": [
          "usrsctplib/netinet/sctp.h||usrsctplib/netinet/sctp.h",
          "usrsctplib/netinet/sctp_output.c||usrsctplib/netinet/sctp_output.c",
          "usrsctplib/netinet/sctp_pcb.c||usrsctplib/netinet/sctp_pcb.c",
          "usrsctplib/netinet/sctp_ss_functions.c||usrsctplib/netinet/sctp_ss_functions.c",
          "usrsctplib/netinet/sctp_usrreq.c||usrsctplib/netinet/sctp_usrreq.c",
          "usrsctplib/netinet/sctputil.c||usrsctplib/netinet/sctputil.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "usrsctplib/netinet/sctp_pcb.c||usrsctplib/netinet/sctp_pcb.c"
          ],
          "candidate": [
            "usrsctplib/netinet/sctp_pcb.c||usrsctplib/netinet/sctp_pcb.c"
          ]
        }
      },
      "candidate_diff": {
        "usrsctplib/netinet/sctp.h||usrsctplib/netinet/sctp.h": [
          "File: usrsctplib/netinet/sctp.h -> usrsctplib/netinet/sctp.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: #ifdef __FreeBSD__",
          "36: #include <sys/cdefs.h>",
          "38: #endif",
          "40: #ifndef _NETINET_SCTP_H_",
          "",
          "[Removed Lines]",
          "37: __FBSDID(\"$FreeBSD: head/sys/netinet/sctp.h 323657 2017-09-16 21:26:06Z tuexen $\");",
          "",
          "[Added Lines]",
          "37: __FBSDID(\"$FreeBSD: head/sys/netinet/sctp.h 345461 2019-03-23 22:56:03Z tuexen $\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "506: #define SCTP_SAT_NETWORK_BURST_INCR  2 /* how many times to multiply maxburst",
          "510: #define SCTP_DATA_FRAG_MASK        0x03",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "508: #define SCTP_MAX_SENDALL_LIMIT 1024",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "530: #define SCTP_PCB_FLAGS_BOUNDALL  0x00000004",
          "531: #define SCTP_PCB_FLAGS_ACCEPTING 0x00000008",
          "532: #define SCTP_PCB_FLAGS_UNBOUND  0x00000010",
          "533: #define SCTP_PCB_FLAGS_CLOSE_IP         0x00040000",
          "534: #define SCTP_PCB_FLAGS_WAS_CONNECTED    0x00080000",
          "535: #define SCTP_PCB_FLAGS_WAS_ABORTED      0x00100000",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "534: #define SCTP_PCB_FLAGS_SND_ITERATOR_UP  0x00000020",
          "",
          "---------------"
        ],
        "usrsctplib/netinet/sctp_output.c||usrsctplib/netinet/sctp_output.c": [
          "File: usrsctplib/netinet/sctp_output.c -> usrsctplib/netinet/sctp_output.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: #ifdef __FreeBSD__",
          "36: #include <sys/cdefs.h>",
          "38: #endif",
          "40: #include <netinet/sctp_os.h>",
          "",
          "[Removed Lines]",
          "37: __FBSDID(\"$FreeBSD: head/sys/netinet/sctp_output.c 343770 2019-02-05 10:29:31Z tuexen $\");",
          "",
          "[Added Lines]",
          "37: __FBSDID(\"$FreeBSD: head/sys/netinet/sctp_output.c 345461 2019-03-23 22:56:03Z tuexen $\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "7292:  sctp_m_freem(ca->m);",
          "7293:  SCTP_FREE(ca, SCTP_M_COPYAL);",
          "7294: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7292:  if (ca->inp) {",
          "7294:   ca->inp->sctp_flags &= ~SCTP_PCB_FLAGS_SND_ITERATOR_UP;",
          "7295:  }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "7342:  int ret;",
          "7343:  struct sctp_copy_all *ca;",
          "7345:  SCTP_MALLOC(ca, struct sctp_copy_all *, sizeof(struct sctp_copy_all),",
          "7346:       SCTP_M_COPYAL);",
          "7347:  if (ca == NULL) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7349:  if (inp->sctp_flags & SCTP_PCB_FLAGS_SND_ITERATOR_UP) {",
          "7351:   return (EBUSY);",
          "7352:  }",
          "7353:  if (uio->uio_resid > SCTP_MAX_SENDALL_LIMIT) {",
          "7355:   return (EMSGSIZE);",
          "7356:  }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "7392:    ca->sndlen += SCTP_BUF_LEN(mat);",
          "7393:   }",
          "7394:  }",
          "7395:  ret = sctp_initiate_iterator(NULL, sctp_sendall_iterator, NULL,",
          "7396:          SCTP_PCB_ANY_FLAGS, SCTP_PCB_ANY_FEATURES,",
          "7397:          SCTP_ASOC_ANY_STATE,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7407:  inp->sctp_flags |= SCTP_PCB_FLAGS_SND_ITERATOR_UP;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "14071:  inqueue_bytes = stcb->asoc.total_output_queue_size - (stcb->asoc.chunks_on_out_queue * SCTP_DATA_CHUNK_OVERHEAD(stcb));",
          "14072:  if (SCTP_SB_LIMIT_SND(so) > inqueue_bytes) {",
          "14079:  } else {",
          "14080:   max_len = 0;",
          "14081:  }",
          "",
          "[Removed Lines]",
          "14073:   if (non_blocking) {",
          "14075:    max_len = sndlen;",
          "14076:   } else {",
          "14077:    max_len = SCTP_SB_LIMIT_SND(so) - inqueue_bytes;",
          "14078:   }",
          "",
          "[Added Lines]",
          "14086:   max_len = SCTP_SB_LIMIT_SND(so) - inqueue_bytes;",
          "",
          "---------------"
        ],
        "usrsctplib/netinet/sctp_pcb.c||usrsctplib/netinet/sctp_pcb.c": [
          "File: usrsctplib/netinet/sctp_pcb.c -> usrsctplib/netinet/sctp_pcb.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: #ifdef __FreeBSD__",
          "36: #include <sys/cdefs.h>",
          "38: #endif",
          "40: #include <netinet/sctp_os.h>",
          "",
          "[Removed Lines]",
          "37: __FBSDID(\"$FreeBSD: head/sys/netinet/sctp_pcb.c 338134 2018-08-21 13:25:32Z tuexen $\");",
          "",
          "[Added Lines]",
          "37: __FBSDID(\"$FreeBSD: head/sys/netinet/sctp_pcb.c 344742 2019-03-03 19:55:06Z tuexen $\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4882:  struct sctpasochead *head;",
          "4883:  struct sctp_tcb *lstcb;",
          "4886:  try_again:",
          "4887:  if (inp->sctp_flags & SCTP_PCB_FLAGS_SOCKET_ALLGONE) {",
          "4890:   return (0);",
          "4891:  }",
          "",
          "[Removed Lines]",
          "4885:  SCTP_INP_WLOCK(inp);",
          "4889:   SCTP_INP_WUNLOCK(inp);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4905:  head = &inp->sctp_asocidhash[SCTP_PCBHASH_ASOC(id, inp->hashasocidmark)];",
          "4906:  LIST_INSERT_HEAD(head, stcb, sctp_tcbasocidhash);",
          "4907:  stcb->asoc.in_asocid_hash = 1;",
          "4910: }",
          "",
          "[Removed Lines]",
          "4908:  SCTP_INP_WUNLOCK(inp);",
          "4909:  return id;",
          "",
          "[Added Lines]",
          "4906:  return (id);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "5106:  memset(stcb, 0, sizeof(*stcb));",
          "5107:  asoc = &stcb->asoc;",
          "5110:  SCTP_TCB_LOCK_INIT(stcb);",
          "5111:  SCTP_TCB_SEND_LOCK_INIT(stcb);",
          "5112:  stcb->rport = rport;",
          "",
          "[Removed Lines]",
          "5109:  asoc->assoc_id = sctp_aloc_a_assoc_id(inp, stcb);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "5118:   SCTP_TCB_LOCK_DESTROY(stcb);",
          "5119:   SCTP_TCB_SEND_LOCK_DESTROY(stcb);",
          "5121:   SCTP_ZONE_FREE(SCTP_BASE_INFO(ipi_zone_asoc), stcb);",
          "5122:   SCTP_DECR_ASOC_COUNT();",
          "",
          "[Removed Lines]",
          "5120:   LIST_REMOVE(stcb, sctp_tcbasocidhash);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "5131:   SCTP_TCB_LOCK_DESTROY(stcb);",
          "5132:   SCTP_TCB_SEND_LOCK_DESTROY(stcb);",
          "5134:   SCTP_ZONE_FREE(SCTP_BASE_INFO(ipi_zone_asoc), stcb);",
          "5135:   SCTP_INP_WUNLOCK(inp);",
          "5136:   SCTP_INP_INFO_WUNLOCK();",
          "",
          "[Removed Lines]",
          "5133:   LIST_REMOVE(stcb, sctp_tcbasocidhash);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "5141:  }",
          "5142:  SCTP_TCB_LOCK(stcb);",
          "5145:  head = &SCTP_BASE_INFO(sctp_asochash)[SCTP_PCBHASH_ASOC(stcb->asoc.my_vtag, SCTP_BASE_INFO(hashasocmark))];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5138:  asoc->assoc_id = sctp_aloc_a_assoc_id(inp, stcb);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "6605:  }",
          "6606: }",
          "6607: #endif",
          "6609: static struct mbuf *",
          "6610: sctp_netisr_hdlr(struct mbuf *m, uintptr_t source)",
          "6611: {",
          "",
          "[Removed Lines]",
          "6608: #if defined(__FreeBSD__) && __FreeBSD_cc_version >= 1300000",
          "",
          "[Added Lines]",
          "6603: #if defined(__FreeBSD__) && __FreeBSD_cc_version >= 1400000",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "6840:  sctp_init_vrf_list(SCTP_DEFAULT_VRF);",
          "6841: #endif",
          "6843:  if (ip_register_flow_handler(sctp_netisr_hdlr, IPPROTO_SCTP)) {",
          "6844:   SCTP_PRINTF(\"***SCTP- Error can't register netisr handler***\\n\");",
          "6845:  }",
          "",
          "[Removed Lines]",
          "6842: #if defined(__FreeBSD__) && __FreeBSD_cc_version >= 1300000",
          "",
          "[Added Lines]",
          "6837: #if defined(__FreeBSD__) && __FreeBSD_cc_version >= 1400000",
          "",
          "---------------"
        ],
        "usrsctplib/netinet/sctp_ss_functions.c||usrsctplib/netinet/sctp_ss_functions.c": [
          "File: usrsctplib/netinet/sctp_ss_functions.c -> usrsctplib/netinet/sctp_ss_functions.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: #ifdef __FreeBSD__",
          "32: #include <sys/cdefs.h>",
          "34: #endif",
          "36: #include <netinet/sctp_pcb.h>",
          "",
          "[Removed Lines]",
          "33: __FBSDID(\"$FreeBSD: head/sys/netinet/sctp_ss_functions.c 326180 2017-11-24 19:38:59Z tuexen $\");",
          "",
          "[Added Lines]",
          "33: __FBSDID(\"$FreeBSD: head/sys/netinet/sctp_ss_functions.c 344924 2019-03-08 18:16:19Z tuexen $\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "59: {",
          "60:  uint16_t i;",
          "62:  asoc->ss_data.locked_on_sending = NULL;",
          "63:  asoc->ss_data.last_out_stream = NULL;",
          "64:  TAILQ_INIT(&asoc->ss_data.out.wheel);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "62:  if (holds_lock == 0) {",
          "63:   SCTP_TCB_SEND_LOCK(stcb);",
          "64:  }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "71:  for (i = 0; i < stcb->asoc.streamoutcnt; i++) {",
          "72:   stcb->asoc.ss_functions.sctp_ss_add_to_stream(stcb, &stcb->asoc,",
          "73:                                                 &stcb->asoc.strmout[i],",
          "75:  }",
          "76:  return;",
          "77: }",
          "",
          "[Removed Lines]",
          "74:                                                 NULL, holds_lock);",
          "",
          "[Added Lines]",
          "77:                                                 NULL, 1);",
          "78:  }",
          "79:  if (holds_lock == 0) {",
          "80:   SCTP_TCB_SEND_UNLOCK(stcb);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "84:   SCTP_TCB_SEND_LOCK(stcb);",
          "85:  }",
          "86:  while (!TAILQ_EMPTY(&asoc->ss_data.out.wheel)) {",
          "89:   strq->ss_params.rr.next_spoke.tqe_next = NULL;",
          "90:   strq->ss_params.rr.next_spoke.tqe_prev = NULL;",
          "91:  }",
          "",
          "[Removed Lines]",
          "87:   struct sctp_stream_out *strq = TAILQ_FIRST(&asoc->ss_data.out.wheel);",
          "88:   TAILQ_REMOVE(&asoc->ss_data.out.wheel, TAILQ_FIRST(&asoc->ss_data.out.wheel), ss_params.rr.next_spoke);",
          "",
          "[Added Lines]",
          "93:   struct sctp_stream_out *strq;",
          "95:   strq = TAILQ_FIRST(&asoc->ss_data.out.wheel);",
          "96:   TAILQ_REMOVE(&asoc->ss_data.out.wheel, strq, ss_params.rr.next_spoke);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "401:   SCTP_TCB_SEND_LOCK(stcb);",
          "402:  }",
          "403:  while (!TAILQ_EMPTY(&asoc->ss_data.out.wheel)) {",
          "405:   if (clear_values) {",
          "406:    strq->ss_params.prio.priority = 0;",
          "407:   }",
          "409:   strq->ss_params.prio.next_spoke.tqe_next = NULL;",
          "410:   strq->ss_params.prio.next_spoke.tqe_prev = NULL;",
          "",
          "[Removed Lines]",
          "404:   struct sctp_stream_out *strq = TAILQ_FIRST(&asoc->ss_data.out.wheel);",
          "408:   TAILQ_REMOVE(&asoc->ss_data.out.wheel, TAILQ_FIRST(&asoc->ss_data.out.wheel), ss_params.prio.next_spoke);",
          "",
          "[Added Lines]",
          "412:   struct sctp_stream_out *strq;",
          "414:   strq = TAILQ_FIRST(&asoc->ss_data.out.wheel);",
          "418:   TAILQ_REMOVE(&asoc->ss_data.out.wheel, strq, ss_params.prio.next_spoke);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "589:   SCTP_TCB_SEND_LOCK(stcb);",
          "590:  }",
          "591:  while (!TAILQ_EMPTY(&asoc->ss_data.out.wheel)) {",
          "593:   if (clear_values) {",
          "594:    strq->ss_params.fb.rounds = -1;",
          "595:   }",
          "597:   strq->ss_params.fb.next_spoke.tqe_next = NULL;",
          "598:   strq->ss_params.fb.next_spoke.tqe_prev = NULL;",
          "599:  }",
          "",
          "[Removed Lines]",
          "592:   struct sctp_stream_out *strq = TAILQ_FIRST(&asoc->ss_data.out.wheel);",
          "596:   TAILQ_REMOVE(&asoc->ss_data.out.wheel, TAILQ_FIRST(&asoc->ss_data.out.wheel), ss_params.fb.next_spoke);",
          "",
          "[Added Lines]",
          "602:   struct sctp_stream_out *strq;",
          "604:   strq = TAILQ_FIRST(&asoc->ss_data.out.wheel);",
          "608:   TAILQ_REMOVE(&asoc->ss_data.out.wheel, strq, ss_params.fb.next_spoke);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "763:  struct sctp_stream_queue_pending *sp;",
          "764:  uint16_t i;",
          "766:  TAILQ_INIT(&asoc->ss_data.out.list);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "778:  if (holds_lock == 0) {",
          "779:   SCTP_TCB_SEND_LOCK(stcb);",
          "780:  }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "782:     x++;",
          "783:    }",
          "784:    if (sp != NULL) {",
          "786:     add_more = 1;",
          "787:    }",
          "788:   }",
          "789:   n++;",
          "790:  }",
          "791:  return;",
          "792: }",
          "",
          "[Removed Lines]",
          "785:     sctp_ss_fcfs_add(stcb, &stcb->asoc, &stcb->asoc.strmout[i], sp, holds_lock);",
          "",
          "[Added Lines]",
          "800:     sctp_ss_fcfs_add(stcb, &stcb->asoc, &stcb->asoc.strmout[i], sp, 1);",
          "806:  if (holds_lock == 0) {",
          "807:   SCTP_TCB_SEND_UNLOCK(stcb);",
          "808:  }",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "795: sctp_ss_fcfs_clear(struct sctp_tcb *stcb, struct sctp_association *asoc,",
          "796:                    int clear_values, int holds_lock)",
          "797: {",
          "798:  if (clear_values) {",
          "799:   if (holds_lock == 0) {",
          "800:    SCTP_TCB_SEND_LOCK(stcb);",
          "801:   }",
          "802:   while (!TAILQ_EMPTY(&asoc->ss_data.out.list)) {",
          "804:   }",
          "805:   if (holds_lock == 0) {",
          "806:    SCTP_TCB_SEND_UNLOCK(stcb);",
          "",
          "[Removed Lines]",
          "803:    TAILQ_REMOVE(&asoc->ss_data.out.list, TAILQ_FIRST(&asoc->ss_data.out.list), ss_next);",
          "",
          "[Added Lines]",
          "816:  struct sctp_stream_queue_pending *sp;",
          "823:    sp = TAILQ_FIRST(&asoc->ss_data.out.list);",
          "824:    TAILQ_REMOVE(&asoc->ss_data.out.list, sp, ss_next);",
          "825:    sp->ss_next.tqe_next = NULL;",
          "826:    sp->ss_next.tqe_prev = NULL;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "863:      ((sp->ss_next.tqe_next != NULL) ||",
          "864:       (sp->ss_next.tqe_prev != NULL))) {",
          "865:   TAILQ_REMOVE(&asoc->ss_data.out.list, sp, ss_next);",
          "866:  }",
          "867:  if (holds_lock == 0) {",
          "868:   SCTP_TCB_SEND_UNLOCK(stcb);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "889:   sp->ss_next.tqe_next = NULL;",
          "890:   sp->ss_next.tqe_prev = NULL;",
          "",
          "---------------"
        ],
        "usrsctplib/netinet/sctp_usrreq.c||usrsctplib/netinet/sctp_usrreq.c": [
          "File: usrsctplib/netinet/sctp_usrreq.c -> usrsctplib/netinet/sctp_usrreq.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: #ifdef __FreeBSD__",
          "36: #include <sys/cdefs.h>",
          "38: #endif",
          "40: #include <netinet/sctp_os.h>",
          "",
          "[Removed Lines]",
          "37: __FBSDID(\"$FreeBSD: head/sys/netinet/sctp_usrreq.c 343769 2019-02-05 10:13:51Z tuexen $\");",
          "",
          "[Added Lines]",
          "37: __FBSDID(\"$FreeBSD: head/sys/netinet/sctp_usrreq.c 344925 2019-03-08 18:17:57Z tuexen $\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1071:  if (control) {",
          "1072:   if (inp->control) {",
          "1074:    sctp_m_freem(inp->control);",
          "1075:    inp->control = NULL;",
          "1076:   }",
          "",
          "[Removed Lines]",
          "1073:    SCTP_PRINTF(\"huh? control set?\\n\");",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1623:       }",
          "1624: #ifdef INET6",
          "1625:       if (sctp_is_feature_on(inp, SCTP_PCB_FLAGS_NEEDS_MAPPED_V4)) {",
          "1626:        in6_sin_2_v4mapsin6(sin, (struct sockaddr_in6 *)sas);",
          "1627:        ((struct sockaddr_in6 *)sas)->sin6_port = inp->sctp_lport;",
          "1628:        sas = (struct sockaddr_storage *)((caddr_t)sas + sizeof(struct sockaddr_in6));",
          "1629:        actual += sizeof(struct sockaddr_in6);",
          "1630:       } else {",
          "1631: #endif",
          "1633:        ((struct sockaddr_in *)sas)->sin_port = inp->sctp_lport;",
          "1636: #ifdef INET6",
          "1637:       }",
          "1638: #endif",
          "1642:      } else {",
          "1643:       continue;",
          "1644:      }",
          "",
          "[Removed Lines]",
          "1632:        memcpy(sas, sin, sizeof(*sin));",
          "1634:        sas = (struct sockaddr_storage *)((caddr_t)sas + sizeof(*sin));",
          "1635:        actual += sizeof(*sin);",
          "1639:       if (actual >= limit) {",
          "1640:        return (actual);",
          "1641:       }",
          "",
          "[Added Lines]",
          "1625:        if (actual + sizeof(struct sockaddr_in6) > limit) {",
          "1626:         return (actual);",
          "1627:        }",
          "1634:        if (actual + sizeof(struct sockaddr_in) > limit) {",
          "1635:         return (actual);",
          "1636:        }",
          "1637:        memcpy(sas, sin, sizeof(struct sockaddr_in));",
          "1639:        sas = (struct sockaddr_storage *)((caddr_t)sas + sizeof(struct sockaddr_in));",
          "1640:        actual += sizeof(struct sockaddr_in);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1699:           (IN6_IS_ADDR_SITELOCAL(&sin6->sin6_addr))) {",
          "1700:        continue;",
          "1701:       }",
          "1707:        return (actual);",
          "1708:       }",
          "1709:      } else {",
          "1710:       continue;",
          "1711:      }",
          "",
          "[Removed Lines]",
          "1702:       memcpy(sas, sin6, sizeof(*sin6));",
          "1703:       ((struct sockaddr_in6 *)sas)->sin6_port = inp->sctp_lport;",
          "1704:       sas = (struct sockaddr_storage *)((caddr_t)sas + sizeof(*sin6));",
          "1705:       actual += sizeof(*sin6);",
          "1706:       if (actual >= limit) {",
          "",
          "[Added Lines]",
          "1704:       if (actual + sizeof(struct sockaddr_in6) > limit) {",
          "1707:       memcpy(sas, sin6, sizeof(struct sockaddr_in6));",
          "1708:       ((struct sockaddr_in6 *)sas)->sin6_port = inp->sctp_lport;",
          "1709:       sas = (struct sockaddr_storage *)((caddr_t)sas + sizeof(struct sockaddr_in6));",
          "1710:       actual += sizeof(struct sockaddr_in6);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1714: #if defined(__Userspace__)",
          "1715:     case AF_CONN:",
          "1716:      if (conn_addr_legal) {",
          "1717:       memcpy(sas, &sctp_ifa->address.sconn, sizeof(struct sockaddr_conn));",
          "1718:       ((struct sockaddr_conn *)sas)->sconn_port = inp->sctp_lport;",
          "1719:       sas = (struct sockaddr_storage *)((caddr_t)sas + sizeof(struct sockaddr_conn));",
          "1720:       actual += sizeof(struct sockaddr_conn);",
          "1724:      } else {",
          "1725:       continue;",
          "1726:      }",
          "",
          "[Removed Lines]",
          "1721:       if (actual >= limit) {",
          "1722:        return (actual);",
          "1723:       }",
          "",
          "[Added Lines]",
          "1719:       if (actual + sizeof(struct sockaddr_conn) > limit) {",
          "1720:        return (actual);",
          "1721:       }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1733:   }",
          "1734:  } else {",
          "1735:   struct sctp_laddr *laddr;",
          "1740:   LIST_FOREACH(laddr, &inp->sctp_addr_list, sctp_nxt_addr) {",
          "1741:    if (stcb) {",
          "",
          "[Removed Lines]",
          "1736: #ifndef HAVE_SA_LEN",
          "1737:   uint32_t sa_len = 0;",
          "1738: #endif",
          "",
          "[Added Lines]",
          "1738:   size_t sa_len;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1743:      continue;",
          "1744:     }",
          "1745:    }",
          "1748:    switch (laddr->ifa->address.sa.sa_family) {",
          "1749: #ifdef INET",
          "1750:    case AF_INET:",
          "1752:     break;",
          "1753: #endif",
          "1754: #ifdef INET6",
          "1755:    case AF_INET6:",
          "1757:     break;",
          "1758: #endif",
          "1759: #if defined(__Userspace__)",
          "1760:    case AF_CONN:",
          "1762:     break;",
          "1763: #endif",
          "1764:    default:",
          "1766:     break;",
          "1767:    }",
          "1773:    switch (laddr->ifa->address.sa.sa_family) {",
          "1774: #ifdef INET",
          "1775:    case AF_INET:",
          "1777:     break;",
          "1778: #endif",
          "1779: #ifdef INET6",
          "1780:    case AF_INET6:",
          "1782:     break;",
          "1783: #endif",
          "1784: #if defined(__Userspace__)",
          "1785:    case AF_CONN:",
          "1787:     break;",
          "1788: #endif",
          "1789:    default:",
          "",
          "[Removed Lines]",
          "1746:    if (sctp_fill_user_address(sas, &laddr->ifa->address.sa))",
          "1747:     continue;",
          "1751:     ((struct sockaddr_in *)sas)->sin_port = inp->sctp_lport;",
          "1756:     ((struct sockaddr_in6 *)sas)->sin6_port = inp->sctp_lport;",
          "1761:     ((struct sockaddr_conn *)sas)->sconn_port = inp->sctp_lport;",
          "1768: #ifdef HAVE_SA_LEN",
          "1769:    sas = (struct sockaddr_storage *)((caddr_t)sas +",
          "1770:          laddr->ifa->address.sa.sa_len);",
          "1771:    actual += laddr->ifa->address.sa.sa_len;",
          "1772: #else",
          "1776:     sa_len = sizeof(struct sockaddr_in);",
          "1781:     sa_len = sizeof(struct sockaddr_in6);",
          "1786:     sa_len = sizeof(struct sockaddr_conn);",
          "",
          "[Added Lines]",
          "1746: #ifdef HAVE_SA_LEN",
          "1747:    sa_len = laddr->ifa->address.sa.sa_len;",
          "1748: #else",
          "1752:     sa_len = sizeof(struct sockaddr_in);",
          "1757:     sa_len = sizeof(struct sockaddr_in6);",
          "1762:     sa_len = sizeof(struct sockaddr_conn);",
          "1767:     sa_len = 0;",
          "1770: #endif",
          "1771:    if (actual + sa_len > limit) {",
          "1772:     return (actual);",
          "1773:    }",
          "1774:    if (sctp_fill_user_address(sas, &laddr->ifa->address.sa))",
          "1775:     continue;",
          "1779:     ((struct sockaddr_in *)sas)->sin_port = inp->sctp_lport;",
          "1784:     ((struct sockaddr_in6 *)sas)->sin6_port = inp->sctp_lport;",
          "1789:     ((struct sockaddr_conn *)sas)->sconn_port = inp->sctp_lport;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1792:    }",
          "1793:    sas = (struct sockaddr_storage *)((caddr_t)sas + sa_len);",
          "1794:    actual += sa_len;",
          "1799:   }",
          "1800:  }",
          "1801:  return (actual);",
          "",
          "[Removed Lines]",
          "1795: #endif",
          "1796:    if (actual >= limit) {",
          "1797:     return (actual);",
          "1798:    }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2887:   SCTP_FIND_STCB(inp, stcb, saddr->sget_assoc_id);",
          "2889:   if (stcb) {",
          "2892:    sas = (struct sockaddr_storage *)&saddr->addr[0];",
          "2894:    TAILQ_FOREACH(net, &stcb->asoc.nets, sctp_next) {",
          "",
          "[Removed Lines]",
          "2890:    left = (*optsize) - sizeof(struct sctp_getaddresses);",
          "",
          "[Added Lines]",
          "2889:    left = (*optsize) - sizeof(sctp_assoc_t);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2947:    }",
          "2948:    SCTP_TCB_UNLOCK(stcb);",
          "2949:   } else {",
          "2951:    error = ENOENT;",
          "2952:   }",
          "2953:   break;",
          "",
          "[Removed Lines]",
          "2950:           SCTP_LTRACE_ERR_RET(inp, NULL, NULL, SCTP_FROM_SCTP_USRREQ, ENOENT);",
          "",
          "[Added Lines]",
          "2949:    SCTP_LTRACE_ERR_RET(inp, NULL, NULL, SCTP_FROM_SCTP_USRREQ, ENOENT);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "3313:   sstat->sstat_instrms = stcb->asoc.streamincnt;",
          "3314:   sstat->sstat_outstrms = stcb->asoc.streamoutcnt;",
          "3315:   sstat->sstat_fragmentation_point = sctp_get_frag_point(stcb, &stcb->asoc);",
          "3316: #ifdef HAVE_SA_LEN",
          "3326:    memcpy(&sstat->sstat_primary.spinfo_address,",
          "3327:           &stcb->asoc.primary_destination->ro._l_addr,",
          "3330: #endif",
          "3352: #if defined(INET)",
          "3356: #endif",
          "3357: #if defined(INET6)",
          "3361: #endif",
          "3362: #if defined(__Userspace__)",
          "3366: #endif",
          "3369:   }",
          "3370:   sstat->sstat_primary.spinfo_assoc_id = sctp_get_associd(stcb);",
          "3371:   SCTP_TCB_UNLOCK(stcb);",
          "",
          "[Removed Lines]",
          "3317:   memcpy(&sstat->sstat_primary.spinfo_address,",
          "3318:          &stcb->asoc.primary_destination->ro._l_addr,",
          "3319:          ((struct sockaddr *)(&stcb->asoc.primary_destination->ro._l_addr))->sa_len);",
          "3320: #else",
          "3321:   if (stcb->asoc.primary_destination->ro._l_addr.sa.sa_family == AF_INET) {",
          "3322:    memcpy(&sstat->sstat_primary.spinfo_address,",
          "3323:           &stcb->asoc.primary_destination->ro._l_addr,",
          "3324:           sizeof(struct sockaddr_in));",
          "3325:   } else {",
          "3328:           sizeof(struct sockaddr_in6));",
          "3329:   }",
          "3331:   net = stcb->asoc.primary_destination;",
          "3332:   ((struct sockaddr_in *)&sstat->sstat_primary.spinfo_address)->sin_port = stcb->rport;",
          "3337:   if (net->dest_state & SCTP_ADDR_UNCONFIRMED) {",
          "3339:    sstat->sstat_primary.spinfo_state = SCTP_UNCONFIRMED;",
          "3340:   } else if (net->dest_state & SCTP_ADDR_REACHABLE) {",
          "3342:    sstat->sstat_primary.spinfo_state = SCTP_ACTIVE;",
          "3343:   } else {",
          "3345:    sstat->sstat_primary.spinfo_state = SCTP_INACTIVE;",
          "3346:   }",
          "3347:   sstat->sstat_primary.spinfo_cwnd = net->cwnd;",
          "3348:   sstat->sstat_primary.spinfo_srtt = net->lastsa >> SCTP_RTT_SHIFT;",
          "3349:   sstat->sstat_primary.spinfo_rto = net->RTO;",
          "3350:   sstat->sstat_primary.spinfo_mtu = net->mtu;",
          "3351:   switch (stcb->asoc.primary_destination->ro._l_addr.sa.sa_family) {",
          "3353:   case AF_INET:",
          "3354:    sstat->sstat_primary.spinfo_mtu -= SCTP_MIN_V4_OVERHEAD;",
          "3355:    break;",
          "3358:   case AF_INET6:",
          "3359:    sstat->sstat_primary.spinfo_mtu -= SCTP_MIN_OVERHEAD;",
          "3360:    break;",
          "3363:   case AF_CONN:",
          "3364:    sstat->sstat_primary.spinfo_mtu -= sizeof(struct sctphdr);",
          "3365:    break;",
          "3367:   default:",
          "3368:    break;",
          "",
          "[Added Lines]",
          "3315:   net = stcb->asoc.primary_destination;",
          "3316:   if (net != NULL) {",
          "3320:           ((struct sockaddr *)(&stcb->asoc.primary_destination->ro._l_addr))->sa_len);",
          "3321: #else",
          "3322:    if (stcb->asoc.primary_destination->ro._l_addr.sa.sa_family == AF_INET) {",
          "3323:     memcpy(&sstat->sstat_primary.spinfo_address,",
          "3324:            &stcb->asoc.primary_destination->ro._l_addr,",
          "3325:            sizeof(struct sockaddr_in));",
          "3326:    } else {",
          "3327:     memcpy(&sstat->sstat_primary.spinfo_address,",
          "3328:            &stcb->asoc.primary_destination->ro._l_addr,",
          "3329:            sizeof(struct sockaddr_in6));",
          "3330:    }",
          "3332:    ((struct sockaddr_in *)&sstat->sstat_primary.spinfo_address)->sin_port = stcb->rport;",
          "3337:    if (net->dest_state & SCTP_ADDR_UNCONFIRMED) {",
          "3339:     sstat->sstat_primary.spinfo_state = SCTP_UNCONFIRMED;",
          "3340:    } else if (net->dest_state & SCTP_ADDR_REACHABLE) {",
          "3342:     sstat->sstat_primary.spinfo_state = SCTP_ACTIVE;",
          "3343:    } else {",
          "3345:     sstat->sstat_primary.spinfo_state = SCTP_INACTIVE;",
          "3346:    }",
          "3347:    sstat->sstat_primary.spinfo_cwnd = net->cwnd;",
          "3348:    sstat->sstat_primary.spinfo_srtt = net->lastsa >> SCTP_RTT_SHIFT;",
          "3349:    sstat->sstat_primary.spinfo_rto = net->RTO;",
          "3350:    sstat->sstat_primary.spinfo_mtu = net->mtu;",
          "3351:    switch (stcb->asoc.primary_destination->ro._l_addr.sa.sa_family) {",
          "3353:    case AF_INET:",
          "3354:     sstat->sstat_primary.spinfo_mtu -= SCTP_MIN_V4_OVERHEAD;",
          "3355:     break;",
          "3358:    case AF_INET6:",
          "3359:     sstat->sstat_primary.spinfo_mtu -= SCTP_MIN_OVERHEAD;",
          "3360:     break;",
          "3363:    case AF_CONN:",
          "3364:     sstat->sstat_primary.spinfo_mtu -= sizeof(struct sctphdr);",
          "3365:     break;",
          "3367:    default:",
          "3368:     break;",
          "3369:    }",
          "3370:   } else {",
          "3371:    memset(&sstat->sstat_primary, 0, sizeof(struct sctp_paddrinfo));",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "4475:  uint32_t vrf_id;",
          "4477:  if (optval == NULL) {",
          "4479:   SCTP_LTRACE_ERR_RET(inp, NULL, NULL, SCTP_FROM_SCTP_USRREQ, EINVAL);",
          "4480:   return (EINVAL);",
          "4481:  }",
          "4482:  inp = (struct sctp_inpcb *)so->so_pcb;",
          "4483:  if (inp == NULL) {",
          "4485:   SCTP_LTRACE_ERR_RET(inp, NULL, NULL, SCTP_FROM_SCTP_USRREQ, EINVAL);",
          "4486:   return (EINVAL);",
          "4487:  }",
          "",
          "[Removed Lines]",
          "4478:   SCTP_PRINTF(\"optval is NULL\\n\");",
          "4484:   SCTP_PRINTF(\"inp is NULL?\\n\");",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "4791:   }",
          "4792:   SCTP_FIND_STCB(inp, stcb, av->assoc_id);",
          "4793:   if (stcb) {",
          "4794:    stcb->asoc.ss_functions.sctp_ss_clear(stcb, &stcb->asoc, 1, 1);",
          "4795:    stcb->asoc.ss_functions = sctp_ss_functions[av->assoc_value];",
          "4796:    stcb->asoc.stream_scheduling_module = av->assoc_value;",
          "4797:    stcb->asoc.ss_functions.sctp_ss_init(stcb, &stcb->asoc, 1);",
          "4798:    SCTP_TCB_UNLOCK(stcb);",
          "4799:   } else {",
          "4800:    if ((inp->sctp_flags & SCTP_PCB_FLAGS_TCPTYPE) ||",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4795:    SCTP_TCB_SEND_LOCK(stcb);",
          "4800:    SCTP_TCB_SEND_UNLOCK(stcb);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "4810:     SCTP_INP_RLOCK(inp);",
          "4811:     LIST_FOREACH(stcb, &inp->sctp_asoc_list, sctp_tcblist) {",
          "4812:      SCTP_TCB_LOCK(stcb);",
          "4813:      stcb->asoc.ss_functions.sctp_ss_clear(stcb, &stcb->asoc, 1, 1);",
          "4814:      stcb->asoc.ss_functions = sctp_ss_functions[av->assoc_value];",
          "4815:      stcb->asoc.stream_scheduling_module = av->assoc_value;",
          "4816:      stcb->asoc.ss_functions.sctp_ss_init(stcb, &stcb->asoc, 1);",
          "4817:      SCTP_TCB_UNLOCK(stcb);",
          "4818:     }",
          "4819:     SCTP_INP_RUNLOCK(inp);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4816:      SCTP_TCB_SEND_LOCK(stcb);",
          "4821:      SCTP_TCB_SEND_UNLOCK(stcb);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "5444:   SCTP_CHECK_AND_CAST(strrst, optval, struct sctp_reset_streams, optsize);",
          "5445:   SCTP_FIND_STCB(inp, stcb, strrst->srs_assoc_id);",
          "5446:   if (stcb == NULL) {",
          "5448:    error = ENOENT;",
          "5449:    break;",
          "5450:   }",
          "",
          "[Removed Lines]",
          "5447:           SCTP_LTRACE_ERR_RET(inp, NULL, NULL, SCTP_FROM_SCTP_USRREQ, ENOENT);",
          "",
          "[Added Lines]",
          "5452:    SCTP_LTRACE_ERR_RET(inp, NULL, NULL, SCTP_FROM_SCTP_USRREQ, ENOENT);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "5457:    SCTP_TCB_UNLOCK(stcb);",
          "5458:    break;",
          "5459:   }",
          "5460:   if (sizeof(struct sctp_reset_streams) +",
          "5461:       strrst->srs_number_streams * sizeof(uint16_t) > optsize) {",
          "5462:    error = EINVAL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5465:   if (SCTP_GET_STATE(stcb) != SCTP_STATE_OPEN) {",
          "5466:    SCTP_LTRACE_ERR_RET(inp, NULL, NULL, SCTP_FROM_SCTP_USRREQ, EINVAL);",
          "5467:    error = EINVAL;",
          "5468:    SCTP_TCB_UNLOCK(stcb);",
          "5469:    break;",
          "5470:   }",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "5556:   SCTP_CHECK_AND_CAST(stradd, optval, struct sctp_add_streams, optsize);",
          "5557:   SCTP_FIND_STCB(inp, stcb, stradd->sas_assoc_id);",
          "5558:   if (stcb == NULL) {",
          "5560:    error = ENOENT;",
          "5561:    break;",
          "5562:   }",
          "",
          "[Removed Lines]",
          "5559:           SCTP_LTRACE_ERR_RET(inp, NULL, NULL, SCTP_FROM_SCTP_USRREQ, ENOENT);",
          "",
          "[Added Lines]",
          "5570:    SCTP_LTRACE_ERR_RET(inp, NULL, NULL, SCTP_FROM_SCTP_USRREQ, ENOENT);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "5569:    SCTP_TCB_UNLOCK(stcb);",
          "5570:    break;",
          "5571:   }",
          "5572:   if (stcb->asoc.stream_reset_outstanding) {",
          "5573:    SCTP_LTRACE_ERR_RET(inp, NULL, NULL, SCTP_FROM_SCTP_USRREQ, EALREADY);",
          "5574:    error = EALREADY;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5583:   if (SCTP_GET_STATE(stcb) != SCTP_STATE_OPEN) {",
          "5584:    SCTP_LTRACE_ERR_RET(inp, NULL, NULL, SCTP_FROM_SCTP_USRREQ, EINVAL);",
          "5585:    error = EINVAL;",
          "5586:    SCTP_TCB_UNLOCK(stcb);",
          "5587:    break;",
          "5588:   }",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "5636:    SCTP_TCB_UNLOCK(stcb);",
          "5637:    break;",
          "5638:   }",
          "5639:   if (stcb->asoc.stream_reset_outstanding) {",
          "5640:    SCTP_LTRACE_ERR_RET(inp, NULL, NULL, SCTP_FROM_SCTP_USRREQ, EALREADY);",
          "5641:    error = EALREADY;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5656:   if (SCTP_GET_STATE(stcb) != SCTP_STATE_OPEN) {",
          "5657:    SCTP_LTRACE_ERR_RET(inp, NULL, NULL, SCTP_FROM_SCTP_USRREQ, EINVAL);",
          "5658:    error = EINVAL;",
          "5659:    SCTP_TCB_UNLOCK(stcb);",
          "5660:    break;",
          "5661:   }",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "7017:      SCTP_INP_RUNLOCK(inp);",
          "7018:     }",
          "7019:    }",
          "7020:   }",
          "7021:   break;",
          "7022:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7043:   } else {",
          "7044:    if (stcb) {",
          "7045:     SCTP_TCB_UNLOCK(stcb);",
          "7046:    }",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "7111:   SCTP_FIND_STCB(inp, stcb, info->pr_assoc_id);",
          "7113:   if (info->pr_policy > SCTP_PR_SCTP_MAX) {",
          "7114:    SCTP_LTRACE_ERR_RET(inp, NULL, NULL, SCTP_FROM_SCTP_USRREQ, EINVAL);",
          "7115:    error = EINVAL;",
          "7116:    break;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7141:    if (stcb) {",
          "7142:     SCTP_TCB_UNLOCK(stcb);",
          "7143:    }",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "7239:    }",
          "7240:   }",
          "7241:   if (thlds->spt_pathcpthld != 0xffff) {",
          "7242:    error = EINVAL;",
          "7243:    SCTP_LTRACE_ERR_RET(inp, NULL, NULL, SCTP_FROM_SCTP_USRREQ, error);",
          "7244:    break;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7272:    if (stcb != NULL) {",
          "7273:     SCTP_TCB_UNLOCK(stcb);",
          "7274:    }",
          "",
          "---------------"
        ],
        "usrsctplib/netinet/sctputil.c||usrsctplib/netinet/sctputil.c": [
          "File: usrsctplib/netinet/sctputil.c -> usrsctplib/netinet/sctputil.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: #ifdef __FreeBSD__",
          "36: #include <sys/cdefs.h>",
          "38: #endif",
          "40: #include <netinet/sctp_os.h>",
          "",
          "[Removed Lines]",
          "37: __FBSDID(\"$FreeBSD: head/sys/netinet/sctputil.c 338941 2018-09-26 10:24:50Z tuexen $\");",
          "",
          "[Added Lines]",
          "37: __FBSDID(\"$FreeBSD: head/sys/netinet/sctputil.c 343961 2019-02-10 14:02:14Z tuexen $\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4094:   TAILQ_FOREACH_SAFE(sp, &outs->outqueue, next, nsp) {",
          "4095:    atomic_subtract_int(&asoc->stream_queue_cnt, 1);",
          "4096:    TAILQ_REMOVE(&outs->outqueue, sp, next);",
          "4098:    sctp_free_spbufspace(stcb, asoc, sp);",
          "4099:    if (sp->data) {",
          "4100:     sctp_ulp_notify(SCTP_NOTIFY_SPECIAL_SP_FAIL, stcb,",
          "",
          "[Removed Lines]",
          "4097:    stcb->asoc.ss_functions.sctp_ss_remove_from_stream(stcb, asoc, outs, sp, holds_lock);",
          "",
          "[Added Lines]",
          "4097:    stcb->asoc.ss_functions.sctp_ss_remove_from_stream(stcb, asoc, outs, sp, 1);",
          "",
          "---------------"
        ]
      }
    }
  ]
}