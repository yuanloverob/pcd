{
  "cve_id": "CVE-2016-7151",
  "cve_desc": "Capstone 3.0.4 has an out-of-bounds vulnerability (SEGV caused by a read memory access) in X86_insn_reg_intel in arch/X86/X86Mapping.c.",
  "repo": "aquynh/capstone",
  "patch_hash": "87a25bb543c8e4c09b48d4b4a6c7db31ce58df06",
  "patch_info": {
    "commit_hash": "87a25bb543c8e4c09b48d4b4a6c7db31ce58df06",
    "repo": "aquynh/capstone",
    "commit_url": "https://github.com/aquynh/capstone/commit/87a25bb543c8e4c09b48d4b4a6c7db31ce58df06",
    "files": [
      "arch/X86/X86Mapping.c"
    ],
    "message": "x86: fast path checking for X86_insn_reg_intel()",
    "before_after_code_files": [
      "arch/X86/X86Mapping.c||arch/X86/X86Mapping.c"
    ]
  },
  "patch_diff": {
    "arch/X86/X86Mapping.c||arch/X86/X86Mapping.c": [
      "File: arch/X86/X86Mapping.c -> arch/X86/X86Mapping.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2930:  return (l - r);",
      "2931: }",
      "2937: x86_reg X86_insn_reg_intel(unsigned int id, enum cs_ac_type *access)",
      "2938: {",
      "2939:  unsigned int first = 0;",
      "2940:  unsigned int last = ARR_SIZE(insn_regs_intel) - 1;",
      "2943:  if (!intel_regs_sorted) {",
      "2944:   memcpy(insn_regs_intel_sorted, insn_regs_intel,",
      "",
      "[Removed Lines]",
      "2933: static bool intel_regs_sorted = false;",
      "2941:  unsigned int mid = ARR_SIZE(insn_regs_intel) / 2;",
      "",
      "[Added Lines]",
      "2938:  static bool intel_regs_sorted = false;",
      "2941:  unsigned int mid;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "2949:   intel_regs_sorted = true;",
      "2950:  }",
      "2952:  while (first <= last) {",
      "2953:   if (insn_regs_intel_sorted[mid].insn < id) {",
      "2954:    first = mid + 1;",
      "2955:   } else if (insn_regs_intel_sorted[mid].insn == id) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2952:  if (insn_regs_intel_sorted[0].insn > id ||",
      "2953:    insn_regs_intel_sorted[last].insn < id) {",
      "2954:   return 0;",
      "2955:  }",
      "2958:   mid = (first + last) / 2;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "2962:     break;",
      "2963:    last = mid - 1;",
      "2964:   }",
      "2966:  }",
      "",
      "[Removed Lines]",
      "2965:   mid = (first + last) / 2;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "6f8bd558302e09af8900ff669be205d2c83d90f9",
      "candidate_info": {
        "commit_hash": "6f8bd558302e09af8900ff669be205d2c83d90f9",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/6f8bd558302e09af8900ff669be205d2c83d90f9",
        "files": [
          ".gitignore",
          "bindings/java/capstone/TMS320C64x_const.java",
          "bindings/ocaml/tms320c64x_const.ml"
        ],
        "message": "binding: add Ocaml & Java const files for TMS320C64x",
        "before_after_code_files": [
          "bindings/javcapstone/TMS320C64x_const.java||bindings/java/capstone/TMS320C64x_const.java",
          "bindings/ocaml/tms320c64x_const.ml||bindings/ocaml/tms320c64x_const.ml"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "bindings/javcapstone/TMS320C64x_const.java||bindings/java/capstone/TMS320C64x_const.java": [
          "File: bindings/javcapstone/TMS320C64x_const.java -> bindings/java/capstone/TMS320C64x_const.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2: package capstone;",
          "4: public class TMS320C64x_const {",
          "6:  public static final int TMS320C64X_OP_INVALID = 0;",
          "7:  public static final int TMS320C64X_OP_REG = 1;",
          "8:  public static final int TMS320C64X_OP_IMM = 2;",
          "9:  public static final int TMS320C64X_OP_MEM = 3;",
          "10:  public static final int TMS320C64X_OP_REGPAIR = 64;",
          "12:  public static final int TMS320C64X_MEM_DISP_INVALID = 0;",
          "13:  public static final int TMS320C64X_MEM_DISP_CONSTANT = 1;",
          "14:  public static final int TMS320C64X_MEM_DISP_REGISTER = 2;",
          "16:  public static final int TMS320C64X_MEM_DIR_INVALID = 0;",
          "17:  public static final int TMS320C64X_MEM_DIR_FW = 1;",
          "18:  public static final int TMS320C64X_MEM_DIR_BW = 2;",
          "20:  public static final int TMS320C64X_MEM_MOD_INVALID = 0;",
          "21:  public static final int TMS320C64X_MEM_MOD_NO = 1;",
          "22:  public static final int TMS320C64X_MEM_MOD_PRE = 2;",
          "23:  public static final int TMS320C64X_MEM_MOD_POST = 3;",
          "25:  public static final int TMS320C64X_REG_INVALID = 0;",
          "26:  public static final int TMS320C64X_REG_AMR = 1;",
          "27:  public static final int TMS320C64X_REG_CSR = 2;",
          "28:  public static final int TMS320C64X_REG_DIER = 3;",
          "29:  public static final int TMS320C64X_REG_DNUM = 4;",
          "30:  public static final int TMS320C64X_REG_ECR = 5;",
          "31:  public static final int TMS320C64X_REG_GFPGFR = 6;",
          "32:  public static final int TMS320C64X_REG_GPLYA = 7;",
          "33:  public static final int TMS320C64X_REG_GPLYB = 8;",
          "34:  public static final int TMS320C64X_REG_ICR = 9;",
          "35:  public static final int TMS320C64X_REG_IER = 10;",
          "36:  public static final int TMS320C64X_REG_IERR = 11;",
          "37:  public static final int TMS320C64X_REG_ILC = 12;",
          "38:  public static final int TMS320C64X_REG_IRP = 13;",
          "39:  public static final int TMS320C64X_REG_ISR = 14;",
          "40:  public static final int TMS320C64X_REG_ISTP = 15;",
          "41:  public static final int TMS320C64X_REG_ITSR = 16;",
          "42:  public static final int TMS320C64X_REG_NRP = 17;",
          "43:  public static final int TMS320C64X_REG_NTSR = 18;",
          "44:  public static final int TMS320C64X_REG_REP = 19;",
          "45:  public static final int TMS320C64X_REG_RILC = 20;",
          "46:  public static final int TMS320C64X_REG_SSR = 21;",
          "47:  public static final int TMS320C64X_REG_TSCH = 22;",
          "48:  public static final int TMS320C64X_REG_TSCL = 23;",
          "49:  public static final int TMS320C64X_REG_TSR = 24;",
          "50:  public static final int TMS320C64X_REG_A0 = 25;",
          "51:  public static final int TMS320C64X_REG_A1 = 26;",
          "52:  public static final int TMS320C64X_REG_A2 = 27;",
          "53:  public static final int TMS320C64X_REG_A3 = 28;",
          "54:  public static final int TMS320C64X_REG_A4 = 29;",
          "55:  public static final int TMS320C64X_REG_A5 = 30;",
          "56:  public static final int TMS320C64X_REG_A6 = 31;",
          "57:  public static final int TMS320C64X_REG_A7 = 32;",
          "58:  public static final int TMS320C64X_REG_A8 = 33;",
          "59:  public static final int TMS320C64X_REG_A9 = 34;",
          "60:  public static final int TMS320C64X_REG_A10 = 35;",
          "61:  public static final int TMS320C64X_REG_A11 = 36;",
          "62:  public static final int TMS320C64X_REG_A12 = 37;",
          "63:  public static final int TMS320C64X_REG_A13 = 38;",
          "64:  public static final int TMS320C64X_REG_A14 = 39;",
          "65:  public static final int TMS320C64X_REG_A15 = 40;",
          "66:  public static final int TMS320C64X_REG_A16 = 41;",
          "67:  public static final int TMS320C64X_REG_A17 = 42;",
          "68:  public static final int TMS320C64X_REG_A18 = 43;",
          "69:  public static final int TMS320C64X_REG_A19 = 44;",
          "70:  public static final int TMS320C64X_REG_A20 = 45;",
          "71:  public static final int TMS320C64X_REG_A21 = 46;",
          "72:  public static final int TMS320C64X_REG_A22 = 47;",
          "73:  public static final int TMS320C64X_REG_A23 = 48;",
          "74:  public static final int TMS320C64X_REG_A24 = 49;",
          "75:  public static final int TMS320C64X_REG_A25 = 50;",
          "76:  public static final int TMS320C64X_REG_A26 = 51;",
          "77:  public static final int TMS320C64X_REG_A27 = 52;",
          "78:  public static final int TMS320C64X_REG_A28 = 53;",
          "79:  public static final int TMS320C64X_REG_A29 = 54;",
          "80:  public static final int TMS320C64X_REG_A30 = 55;",
          "81:  public static final int TMS320C64X_REG_A31 = 56;",
          "82:  public static final int TMS320C64X_REG_B0 = 57;",
          "83:  public static final int TMS320C64X_REG_B1 = 58;",
          "84:  public static final int TMS320C64X_REG_B2 = 59;",
          "85:  public static final int TMS320C64X_REG_B3 = 60;",
          "86:  public static final int TMS320C64X_REG_B4 = 61;",
          "87:  public static final int TMS320C64X_REG_B5 = 62;",
          "88:  public static final int TMS320C64X_REG_B6 = 63;",
          "89:  public static final int TMS320C64X_REG_B7 = 64;",
          "90:  public static final int TMS320C64X_REG_B8 = 65;",
          "91:  public static final int TMS320C64X_REG_B9 = 66;",
          "92:  public static final int TMS320C64X_REG_B10 = 67;",
          "93:  public static final int TMS320C64X_REG_B11 = 68;",
          "94:  public static final int TMS320C64X_REG_B12 = 69;",
          "95:  public static final int TMS320C64X_REG_B13 = 70;",
          "96:  public static final int TMS320C64X_REG_B14 = 71;",
          "97:  public static final int TMS320C64X_REG_B15 = 72;",
          "98:  public static final int TMS320C64X_REG_B16 = 73;",
          "99:  public static final int TMS320C64X_REG_B17 = 74;",
          "100:  public static final int TMS320C64X_REG_B18 = 75;",
          "101:  public static final int TMS320C64X_REG_B19 = 76;",
          "102:  public static final int TMS320C64X_REG_B20 = 77;",
          "103:  public static final int TMS320C64X_REG_B21 = 78;",
          "104:  public static final int TMS320C64X_REG_B22 = 79;",
          "105:  public static final int TMS320C64X_REG_B23 = 80;",
          "106:  public static final int TMS320C64X_REG_B24 = 81;",
          "107:  public static final int TMS320C64X_REG_B25 = 82;",
          "108:  public static final int TMS320C64X_REG_B26 = 83;",
          "109:  public static final int TMS320C64X_REG_B27 = 84;",
          "110:  public static final int TMS320C64X_REG_B28 = 85;",
          "111:  public static final int TMS320C64X_REG_B29 = 86;",
          "112:  public static final int TMS320C64X_REG_B30 = 87;",
          "113:  public static final int TMS320C64X_REG_B31 = 88;",
          "114:  public static final int TMS320C64X_REG_PCE1 = 89;",
          "115:  public static final int TMS320C64X_REG_ENDING = 90;",
          "116:  public static final int TMS320C64X_REG_EFR = TMS320C64X_REG_ECR;",
          "117:  public static final int TMS320C64X_REG_IFR = TMS320C64X_REG_ISR;",
          "119:  public static final int TMS320C64X_INS_INVALID = 0;",
          "120:  public static final int TMS320C64X_INS_ABS = 1;",
          "121:  public static final int TMS320C64X_INS_ABS2 = 2;",
          "122:  public static final int TMS320C64X_INS_ADD = 3;",
          "123:  public static final int TMS320C64X_INS_ADD2 = 4;",
          "124:  public static final int TMS320C64X_INS_ADD4 = 5;",
          "125:  public static final int TMS320C64X_INS_ADDAB = 6;",
          "126:  public static final int TMS320C64X_INS_ADDAD = 7;",
          "127:  public static final int TMS320C64X_INS_ADDAH = 8;",
          "128:  public static final int TMS320C64X_INS_ADDAW = 9;",
          "129:  public static final int TMS320C64X_INS_ADDK = 10;",
          "130:  public static final int TMS320C64X_INS_ADDKPC = 11;",
          "131:  public static final int TMS320C64X_INS_ADDU = 12;",
          "132:  public static final int TMS320C64X_INS_AND = 13;",
          "133:  public static final int TMS320C64X_INS_ANDN = 14;",
          "134:  public static final int TMS320C64X_INS_AVG2 = 15;",
          "135:  public static final int TMS320C64X_INS_AVGU4 = 16;",
          "136:  public static final int TMS320C64X_INS_B = 17;",
          "137:  public static final int TMS320C64X_INS_BDEC = 18;",
          "138:  public static final int TMS320C64X_INS_BITC4 = 19;",
          "139:  public static final int TMS320C64X_INS_BNOP = 20;",
          "140:  public static final int TMS320C64X_INS_BPOS = 21;",
          "141:  public static final int TMS320C64X_INS_CLR = 22;",
          "142:  public static final int TMS320C64X_INS_CMPEQ = 23;",
          "143:  public static final int TMS320C64X_INS_CMPEQ2 = 24;",
          "144:  public static final int TMS320C64X_INS_CMPEQ4 = 25;",
          "145:  public static final int TMS320C64X_INS_CMPGT = 26;",
          "146:  public static final int TMS320C64X_INS_CMPGT2 = 27;",
          "147:  public static final int TMS320C64X_INS_CMPGTU4 = 28;",
          "148:  public static final int TMS320C64X_INS_CMPLT = 29;",
          "149:  public static final int TMS320C64X_INS_CMPLTU = 30;",
          "150:  public static final int TMS320C64X_INS_DEAL = 31;",
          "151:  public static final int TMS320C64X_INS_DOTP2 = 32;",
          "152:  public static final int TMS320C64X_INS_DOTPN2 = 33;",
          "153:  public static final int TMS320C64X_INS_DOTPNRSU2 = 34;",
          "154:  public static final int TMS320C64X_INS_DOTPRSU2 = 35;",
          "155:  public static final int TMS320C64X_INS_DOTPSU4 = 36;",
          "156:  public static final int TMS320C64X_INS_DOTPU4 = 37;",
          "157:  public static final int TMS320C64X_INS_EXT = 38;",
          "158:  public static final int TMS320C64X_INS_EXTU = 39;",
          "159:  public static final int TMS320C64X_INS_GMPGTU = 40;",
          "160:  public static final int TMS320C64X_INS_GMPY4 = 41;",
          "161:  public static final int TMS320C64X_INS_LDB = 42;",
          "162:  public static final int TMS320C64X_INS_LDBU = 43;",
          "163:  public static final int TMS320C64X_INS_LDDW = 44;",
          "164:  public static final int TMS320C64X_INS_LDH = 45;",
          "165:  public static final int TMS320C64X_INS_LDHU = 46;",
          "166:  public static final int TMS320C64X_INS_LDNDW = 47;",
          "167:  public static final int TMS320C64X_INS_LDNW = 48;",
          "168:  public static final int TMS320C64X_INS_LDW = 49;",
          "169:  public static final int TMS320C64X_INS_LMBD = 50;",
          "170:  public static final int TMS320C64X_INS_MAX2 = 51;",
          "171:  public static final int TMS320C64X_INS_MAXU4 = 52;",
          "172:  public static final int TMS320C64X_INS_MIN2 = 53;",
          "173:  public static final int TMS320C64X_INS_MINU4 = 54;",
          "174:  public static final int TMS320C64X_INS_MPY = 55;",
          "175:  public static final int TMS320C64X_INS_MPY2 = 56;",
          "176:  public static final int TMS320C64X_INS_MPYH = 57;",
          "177:  public static final int TMS320C64X_INS_MPYHI = 58;",
          "178:  public static final int TMS320C64X_INS_MPYHIR = 59;",
          "179:  public static final int TMS320C64X_INS_MPYHL = 60;",
          "180:  public static final int TMS320C64X_INS_MPYHLU = 61;",
          "181:  public static final int TMS320C64X_INS_MPYHSLU = 62;",
          "182:  public static final int TMS320C64X_INS_MPYHSU = 63;",
          "183:  public static final int TMS320C64X_INS_MPYHU = 64;",
          "184:  public static final int TMS320C64X_INS_MPYHULS = 65;",
          "185:  public static final int TMS320C64X_INS_MPYHUS = 66;",
          "186:  public static final int TMS320C64X_INS_MPYLH = 67;",
          "187:  public static final int TMS320C64X_INS_MPYLHU = 68;",
          "188:  public static final int TMS320C64X_INS_MPYLI = 69;",
          "189:  public static final int TMS320C64X_INS_MPYLIR = 70;",
          "190:  public static final int TMS320C64X_INS_MPYLSHU = 71;",
          "191:  public static final int TMS320C64X_INS_MPYLUHS = 72;",
          "192:  public static final int TMS320C64X_INS_MPYSU = 73;",
          "193:  public static final int TMS320C64X_INS_MPYSU4 = 74;",
          "194:  public static final int TMS320C64X_INS_MPYU = 75;",
          "195:  public static final int TMS320C64X_INS_MPYU4 = 76;",
          "196:  public static final int TMS320C64X_INS_MPYUS = 77;",
          "197:  public static final int TMS320C64X_INS_MVC = 78;",
          "198:  public static final int TMS320C64X_INS_MVD = 79;",
          "199:  public static final int TMS320C64X_INS_MVK = 80;",
          "200:  public static final int TMS320C64X_INS_MVKL = 81;",
          "201:  public static final int TMS320C64X_INS_MVKLH = 82;",
          "202:  public static final int TMS320C64X_INS_NOP = 83;",
          "203:  public static final int TMS320C64X_INS_NORM = 84;",
          "204:  public static final int TMS320C64X_INS_OR = 85;",
          "205:  public static final int TMS320C64X_INS_PACK2 = 86;",
          "206:  public static final int TMS320C64X_INS_PACKH2 = 87;",
          "207:  public static final int TMS320C64X_INS_PACKH4 = 88;",
          "208:  public static final int TMS320C64X_INS_PACKHL2 = 89;",
          "209:  public static final int TMS320C64X_INS_PACKL4 = 90;",
          "210:  public static final int TMS320C64X_INS_PACKLH2 = 91;",
          "211:  public static final int TMS320C64X_INS_ROTL = 92;",
          "212:  public static final int TMS320C64X_INS_SADD = 93;",
          "213:  public static final int TMS320C64X_INS_SADD2 = 94;",
          "214:  public static final int TMS320C64X_INS_SADDU4 = 95;",
          "215:  public static final int TMS320C64X_INS_SADDUS2 = 96;",
          "216:  public static final int TMS320C64X_INS_SAT = 97;",
          "217:  public static final int TMS320C64X_INS_SET = 98;",
          "218:  public static final int TMS320C64X_INS_SHFL = 99;",
          "219:  public static final int TMS320C64X_INS_SHL = 100;",
          "220:  public static final int TMS320C64X_INS_SHLMB = 101;",
          "221:  public static final int TMS320C64X_INS_SHR = 102;",
          "222:  public static final int TMS320C64X_INS_SHR2 = 103;",
          "223:  public static final int TMS320C64X_INS_SHRMB = 104;",
          "224:  public static final int TMS320C64X_INS_SHRU = 105;",
          "225:  public static final int TMS320C64X_INS_SHRU2 = 106;",
          "226:  public static final int TMS320C64X_INS_SMPY = 107;",
          "227:  public static final int TMS320C64X_INS_SMPY2 = 108;",
          "228:  public static final int TMS320C64X_INS_SMPYH = 109;",
          "229:  public static final int TMS320C64X_INS_SMPYHL = 110;",
          "230:  public static final int TMS320C64X_INS_SMPYLH = 111;",
          "231:  public static final int TMS320C64X_INS_SPACK2 = 112;",
          "232:  public static final int TMS320C64X_INS_SPACKU4 = 113;",
          "233:  public static final int TMS320C64X_INS_SSHL = 114;",
          "234:  public static final int TMS320C64X_INS_SSHVL = 115;",
          "235:  public static final int TMS320C64X_INS_SSHVR = 116;",
          "236:  public static final int TMS320C64X_INS_SSUB = 117;",
          "237:  public static final int TMS320C64X_INS_STB = 118;",
          "238:  public static final int TMS320C64X_INS_STDW = 119;",
          "239:  public static final int TMS320C64X_INS_STH = 120;",
          "240:  public static final int TMS320C64X_INS_STNDW = 121;",
          "241:  public static final int TMS320C64X_INS_STNW = 122;",
          "242:  public static final int TMS320C64X_INS_STW = 123;",
          "243:  public static final int TMS320C64X_INS_SUB = 124;",
          "244:  public static final int TMS320C64X_INS_SUB2 = 125;",
          "245:  public static final int TMS320C64X_INS_SUB4 = 126;",
          "246:  public static final int TMS320C64X_INS_SUBAB = 127;",
          "247:  public static final int TMS320C64X_INS_SUBABS4 = 128;",
          "248:  public static final int TMS320C64X_INS_SUBAH = 129;",
          "249:  public static final int TMS320C64X_INS_SUBAW = 130;",
          "250:  public static final int TMS320C64X_INS_SUBC = 131;",
          "251:  public static final int TMS320C64X_INS_SUBU = 132;",
          "252:  public static final int TMS320C64X_INS_SWAP4 = 133;",
          "253:  public static final int TMS320C64X_INS_UNPKHU4 = 134;",
          "254:  public static final int TMS320C64X_INS_UNPKLU4 = 135;",
          "255:  public static final int TMS320C64X_INS_XOR = 136;",
          "256:  public static final int TMS320C64X_INS_XPND2 = 137;",
          "257:  public static final int TMS320C64X_INS_XPND4 = 138;",
          "258:  public static final int TMS320C64X_INS_IDLE = 139;",
          "259:  public static final int TMS320C64X_INS_MV = 140;",
          "260:  public static final int TMS320C64X_INS_NEG = 141;",
          "261:  public static final int TMS320C64X_INS_NOT = 142;",
          "262:  public static final int TMS320C64X_INS_SWAP2 = 143;",
          "263:  public static final int TMS320C64X_INS_ZERO = 144;",
          "264:  public static final int TMS320C64X_INS_ENDING = 145;",
          "266:  public static final int TMS320C64X_GRP_INVALID = 0;",
          "267:  public static final int TMS320C64X_GRP_JUMP = 1;",
          "268:  public static final int TMS320C64X_GRP_FUNIT_D = 128;",
          "269:  public static final int TMS320C64X_GRP_FUNIT_L = 129;",
          "270:  public static final int TMS320C64X_GRP_FUNIT_M = 130;",
          "271:  public static final int TMS320C64X_GRP_FUNIT_S = 131;",
          "272:  public static final int TMS320C64X_GRP_FUNIT_NO = 132;",
          "273:  public static final int TMS320C64X_GRP_ENDING = 133;",
          "275:  public static final int TMS320C64X_FUNIT_INVALID = 0;",
          "276:  public static final int TMS320C64X_FUNIT_D = 1;",
          "277:  public static final int TMS320C64X_FUNIT_L = 2;",
          "278:  public static final int TMS320C64X_FUNIT_M = 3;",
          "279:  public static final int TMS320C64X_FUNIT_S = 4;",
          "280:  public static final int TMS320C64X_FUNIT_NO = 5;",
          "281: }",
          "",
          "---------------"
        ],
        "bindings/ocaml/tms320c64x_const.ml||bindings/ocaml/tms320c64x_const.ml": [
          "File: bindings/ocaml/tms320c64x_const.ml -> bindings/ocaml/tms320c64x_const.ml",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: (* For Capstone Engine. AUTO-GENERATED FILE, DO NOT EDIT [tms320c64x_const.ml] *)",
          "3: let _TMS320C64X_OP_INVALID = 0;;",
          "4: let _TMS320C64X_OP_REG = 1;;",
          "5: let _TMS320C64X_OP_IMM = 2;;",
          "6: let _TMS320C64X_OP_MEM = 3;;",
          "7: let _TMS320C64X_OP_REGPAIR = 64;;",
          "9: let _TMS320C64X_MEM_DISP_INVALID = 0;;",
          "10: let _TMS320C64X_MEM_DISP_CONSTANT = 1;;",
          "11: let _TMS320C64X_MEM_DISP_REGISTER = 2;;",
          "13: let _TMS320C64X_MEM_DIR_INVALID = 0;;",
          "14: let _TMS320C64X_MEM_DIR_FW = 1;;",
          "15: let _TMS320C64X_MEM_DIR_BW = 2;;",
          "17: let _TMS320C64X_MEM_MOD_INVALID = 0;;",
          "18: let _TMS320C64X_MEM_MOD_NO = 1;;",
          "19: let _TMS320C64X_MEM_MOD_PRE = 2;;",
          "20: let _TMS320C64X_MEM_MOD_POST = 3;;",
          "22: let _TMS320C64X_REG_INVALID = 0;;",
          "23: let _TMS320C64X_REG_AMR = 1;;",
          "24: let _TMS320C64X_REG_CSR = 2;;",
          "25: let _TMS320C64X_REG_DIER = 3;;",
          "26: let _TMS320C64X_REG_DNUM = 4;;",
          "27: let _TMS320C64X_REG_ECR = 5;;",
          "28: let _TMS320C64X_REG_GFPGFR = 6;;",
          "29: let _TMS320C64X_REG_GPLYA = 7;;",
          "30: let _TMS320C64X_REG_GPLYB = 8;;",
          "31: let _TMS320C64X_REG_ICR = 9;;",
          "32: let _TMS320C64X_REG_IER = 10;;",
          "33: let _TMS320C64X_REG_IERR = 11;;",
          "34: let _TMS320C64X_REG_ILC = 12;;",
          "35: let _TMS320C64X_REG_IRP = 13;;",
          "36: let _TMS320C64X_REG_ISR = 14;;",
          "37: let _TMS320C64X_REG_ISTP = 15;;",
          "38: let _TMS320C64X_REG_ITSR = 16;;",
          "39: let _TMS320C64X_REG_NRP = 17;;",
          "40: let _TMS320C64X_REG_NTSR = 18;;",
          "41: let _TMS320C64X_REG_REP = 19;;",
          "42: let _TMS320C64X_REG_RILC = 20;;",
          "43: let _TMS320C64X_REG_SSR = 21;;",
          "44: let _TMS320C64X_REG_TSCH = 22;;",
          "45: let _TMS320C64X_REG_TSCL = 23;;",
          "46: let _TMS320C64X_REG_TSR = 24;;",
          "47: let _TMS320C64X_REG_A0 = 25;;",
          "48: let _TMS320C64X_REG_A1 = 26;;",
          "49: let _TMS320C64X_REG_A2 = 27;;",
          "50: let _TMS320C64X_REG_A3 = 28;;",
          "51: let _TMS320C64X_REG_A4 = 29;;",
          "52: let _TMS320C64X_REG_A5 = 30;;",
          "53: let _TMS320C64X_REG_A6 = 31;;",
          "54: let _TMS320C64X_REG_A7 = 32;;",
          "55: let _TMS320C64X_REG_A8 = 33;;",
          "56: let _TMS320C64X_REG_A9 = 34;;",
          "57: let _TMS320C64X_REG_A10 = 35;;",
          "58: let _TMS320C64X_REG_A11 = 36;;",
          "59: let _TMS320C64X_REG_A12 = 37;;",
          "60: let _TMS320C64X_REG_A13 = 38;;",
          "61: let _TMS320C64X_REG_A14 = 39;;",
          "62: let _TMS320C64X_REG_A15 = 40;;",
          "63: let _TMS320C64X_REG_A16 = 41;;",
          "64: let _TMS320C64X_REG_A17 = 42;;",
          "65: let _TMS320C64X_REG_A18 = 43;;",
          "66: let _TMS320C64X_REG_A19 = 44;;",
          "67: let _TMS320C64X_REG_A20 = 45;;",
          "68: let _TMS320C64X_REG_A21 = 46;;",
          "69: let _TMS320C64X_REG_A22 = 47;;",
          "70: let _TMS320C64X_REG_A23 = 48;;",
          "71: let _TMS320C64X_REG_A24 = 49;;",
          "72: let _TMS320C64X_REG_A25 = 50;;",
          "73: let _TMS320C64X_REG_A26 = 51;;",
          "74: let _TMS320C64X_REG_A27 = 52;;",
          "75: let _TMS320C64X_REG_A28 = 53;;",
          "76: let _TMS320C64X_REG_A29 = 54;;",
          "77: let _TMS320C64X_REG_A30 = 55;;",
          "78: let _TMS320C64X_REG_A31 = 56;;",
          "79: let _TMS320C64X_REG_B0 = 57;;",
          "80: let _TMS320C64X_REG_B1 = 58;;",
          "81: let _TMS320C64X_REG_B2 = 59;;",
          "82: let _TMS320C64X_REG_B3 = 60;;",
          "83: let _TMS320C64X_REG_B4 = 61;;",
          "84: let _TMS320C64X_REG_B5 = 62;;",
          "85: let _TMS320C64X_REG_B6 = 63;;",
          "86: let _TMS320C64X_REG_B7 = 64;;",
          "87: let _TMS320C64X_REG_B8 = 65;;",
          "88: let _TMS320C64X_REG_B9 = 66;;",
          "89: let _TMS320C64X_REG_B10 = 67;;",
          "90: let _TMS320C64X_REG_B11 = 68;;",
          "91: let _TMS320C64X_REG_B12 = 69;;",
          "92: let _TMS320C64X_REG_B13 = 70;;",
          "93: let _TMS320C64X_REG_B14 = 71;;",
          "94: let _TMS320C64X_REG_B15 = 72;;",
          "95: let _TMS320C64X_REG_B16 = 73;;",
          "96: let _TMS320C64X_REG_B17 = 74;;",
          "97: let _TMS320C64X_REG_B18 = 75;;",
          "98: let _TMS320C64X_REG_B19 = 76;;",
          "99: let _TMS320C64X_REG_B20 = 77;;",
          "100: let _TMS320C64X_REG_B21 = 78;;",
          "101: let _TMS320C64X_REG_B22 = 79;;",
          "102: let _TMS320C64X_REG_B23 = 80;;",
          "103: let _TMS320C64X_REG_B24 = 81;;",
          "104: let _TMS320C64X_REG_B25 = 82;;",
          "105: let _TMS320C64X_REG_B26 = 83;;",
          "106: let _TMS320C64X_REG_B27 = 84;;",
          "107: let _TMS320C64X_REG_B28 = 85;;",
          "108: let _TMS320C64X_REG_B29 = 86;;",
          "109: let _TMS320C64X_REG_B30 = 87;;",
          "110: let _TMS320C64X_REG_B31 = 88;;",
          "111: let _TMS320C64X_REG_PCE1 = 89;;",
          "112: let _TMS320C64X_REG_ENDING = 90;;",
          "113: let _TMS320C64X_REG_EFR = _TMS320C64X_REG_ECR;;",
          "114: let _TMS320C64X_REG_IFR = _TMS320C64X_REG_ISR;;",
          "116: let _TMS320C64X_INS_INVALID = 0;;",
          "117: let _TMS320C64X_INS_ABS = 1;;",
          "118: let _TMS320C64X_INS_ABS2 = 2;;",
          "119: let _TMS320C64X_INS_ADD = 3;;",
          "120: let _TMS320C64X_INS_ADD2 = 4;;",
          "121: let _TMS320C64X_INS_ADD4 = 5;;",
          "122: let _TMS320C64X_INS_ADDAB = 6;;",
          "123: let _TMS320C64X_INS_ADDAD = 7;;",
          "124: let _TMS320C64X_INS_ADDAH = 8;;",
          "125: let _TMS320C64X_INS_ADDAW = 9;;",
          "126: let _TMS320C64X_INS_ADDK = 10;;",
          "127: let _TMS320C64X_INS_ADDKPC = 11;;",
          "128: let _TMS320C64X_INS_ADDU = 12;;",
          "129: let _TMS320C64X_INS_AND = 13;;",
          "130: let _TMS320C64X_INS_ANDN = 14;;",
          "131: let _TMS320C64X_INS_AVG2 = 15;;",
          "132: let _TMS320C64X_INS_AVGU4 = 16;;",
          "133: let _TMS320C64X_INS_B = 17;;",
          "134: let _TMS320C64X_INS_BDEC = 18;;",
          "135: let _TMS320C64X_INS_BITC4 = 19;;",
          "136: let _TMS320C64X_INS_BNOP = 20;;",
          "137: let _TMS320C64X_INS_BPOS = 21;;",
          "138: let _TMS320C64X_INS_CLR = 22;;",
          "139: let _TMS320C64X_INS_CMPEQ = 23;;",
          "140: let _TMS320C64X_INS_CMPEQ2 = 24;;",
          "141: let _TMS320C64X_INS_CMPEQ4 = 25;;",
          "142: let _TMS320C64X_INS_CMPGT = 26;;",
          "143: let _TMS320C64X_INS_CMPGT2 = 27;;",
          "144: let _TMS320C64X_INS_CMPGTU4 = 28;;",
          "145: let _TMS320C64X_INS_CMPLT = 29;;",
          "146: let _TMS320C64X_INS_CMPLTU = 30;;",
          "147: let _TMS320C64X_INS_DEAL = 31;;",
          "148: let _TMS320C64X_INS_DOTP2 = 32;;",
          "149: let _TMS320C64X_INS_DOTPN2 = 33;;",
          "150: let _TMS320C64X_INS_DOTPNRSU2 = 34;;",
          "151: let _TMS320C64X_INS_DOTPRSU2 = 35;;",
          "152: let _TMS320C64X_INS_DOTPSU4 = 36;;",
          "153: let _TMS320C64X_INS_DOTPU4 = 37;;",
          "154: let _TMS320C64X_INS_EXT = 38;;",
          "155: let _TMS320C64X_INS_EXTU = 39;;",
          "156: let _TMS320C64X_INS_GMPGTU = 40;;",
          "157: let _TMS320C64X_INS_GMPY4 = 41;;",
          "158: let _TMS320C64X_INS_LDB = 42;;",
          "159: let _TMS320C64X_INS_LDBU = 43;;",
          "160: let _TMS320C64X_INS_LDDW = 44;;",
          "161: let _TMS320C64X_INS_LDH = 45;;",
          "162: let _TMS320C64X_INS_LDHU = 46;;",
          "163: let _TMS320C64X_INS_LDNDW = 47;;",
          "164: let _TMS320C64X_INS_LDNW = 48;;",
          "165: let _TMS320C64X_INS_LDW = 49;;",
          "166: let _TMS320C64X_INS_LMBD = 50;;",
          "167: let _TMS320C64X_INS_MAX2 = 51;;",
          "168: let _TMS320C64X_INS_MAXU4 = 52;;",
          "169: let _TMS320C64X_INS_MIN2 = 53;;",
          "170: let _TMS320C64X_INS_MINU4 = 54;;",
          "171: let _TMS320C64X_INS_MPY = 55;;",
          "172: let _TMS320C64X_INS_MPY2 = 56;;",
          "173: let _TMS320C64X_INS_MPYH = 57;;",
          "174: let _TMS320C64X_INS_MPYHI = 58;;",
          "175: let _TMS320C64X_INS_MPYHIR = 59;;",
          "176: let _TMS320C64X_INS_MPYHL = 60;;",
          "177: let _TMS320C64X_INS_MPYHLU = 61;;",
          "178: let _TMS320C64X_INS_MPYHSLU = 62;;",
          "179: let _TMS320C64X_INS_MPYHSU = 63;;",
          "180: let _TMS320C64X_INS_MPYHU = 64;;",
          "181: let _TMS320C64X_INS_MPYHULS = 65;;",
          "182: let _TMS320C64X_INS_MPYHUS = 66;;",
          "183: let _TMS320C64X_INS_MPYLH = 67;;",
          "184: let _TMS320C64X_INS_MPYLHU = 68;;",
          "185: let _TMS320C64X_INS_MPYLI = 69;;",
          "186: let _TMS320C64X_INS_MPYLIR = 70;;",
          "187: let _TMS320C64X_INS_MPYLSHU = 71;;",
          "188: let _TMS320C64X_INS_MPYLUHS = 72;;",
          "189: let _TMS320C64X_INS_MPYSU = 73;;",
          "190: let _TMS320C64X_INS_MPYSU4 = 74;;",
          "191: let _TMS320C64X_INS_MPYU = 75;;",
          "192: let _TMS320C64X_INS_MPYU4 = 76;;",
          "193: let _TMS320C64X_INS_MPYUS = 77;;",
          "194: let _TMS320C64X_INS_MVC = 78;;",
          "195: let _TMS320C64X_INS_MVD = 79;;",
          "196: let _TMS320C64X_INS_MVK = 80;;",
          "197: let _TMS320C64X_INS_MVKL = 81;;",
          "198: let _TMS320C64X_INS_MVKLH = 82;;",
          "199: let _TMS320C64X_INS_NOP = 83;;",
          "200: let _TMS320C64X_INS_NORM = 84;;",
          "201: let _TMS320C64X_INS_OR = 85;;",
          "202: let _TMS320C64X_INS_PACK2 = 86;;",
          "203: let _TMS320C64X_INS_PACKH2 = 87;;",
          "204: let _TMS320C64X_INS_PACKH4 = 88;;",
          "205: let _TMS320C64X_INS_PACKHL2 = 89;;",
          "206: let _TMS320C64X_INS_PACKL4 = 90;;",
          "207: let _TMS320C64X_INS_PACKLH2 = 91;;",
          "208: let _TMS320C64X_INS_ROTL = 92;;",
          "209: let _TMS320C64X_INS_SADD = 93;;",
          "210: let _TMS320C64X_INS_SADD2 = 94;;",
          "211: let _TMS320C64X_INS_SADDU4 = 95;;",
          "212: let _TMS320C64X_INS_SADDUS2 = 96;;",
          "213: let _TMS320C64X_INS_SAT = 97;;",
          "214: let _TMS320C64X_INS_SET = 98;;",
          "215: let _TMS320C64X_INS_SHFL = 99;;",
          "216: let _TMS320C64X_INS_SHL = 100;;",
          "217: let _TMS320C64X_INS_SHLMB = 101;;",
          "218: let _TMS320C64X_INS_SHR = 102;;",
          "219: let _TMS320C64X_INS_SHR2 = 103;;",
          "220: let _TMS320C64X_INS_SHRMB = 104;;",
          "221: let _TMS320C64X_INS_SHRU = 105;;",
          "222: let _TMS320C64X_INS_SHRU2 = 106;;",
          "223: let _TMS320C64X_INS_SMPY = 107;;",
          "224: let _TMS320C64X_INS_SMPY2 = 108;;",
          "225: let _TMS320C64X_INS_SMPYH = 109;;",
          "226: let _TMS320C64X_INS_SMPYHL = 110;;",
          "227: let _TMS320C64X_INS_SMPYLH = 111;;",
          "228: let _TMS320C64X_INS_SPACK2 = 112;;",
          "229: let _TMS320C64X_INS_SPACKU4 = 113;;",
          "230: let _TMS320C64X_INS_SSHL = 114;;",
          "231: let _TMS320C64X_INS_SSHVL = 115;;",
          "232: let _TMS320C64X_INS_SSHVR = 116;;",
          "233: let _TMS320C64X_INS_SSUB = 117;;",
          "234: let _TMS320C64X_INS_STB = 118;;",
          "235: let _TMS320C64X_INS_STDW = 119;;",
          "236: let _TMS320C64X_INS_STH = 120;;",
          "237: let _TMS320C64X_INS_STNDW = 121;;",
          "238: let _TMS320C64X_INS_STNW = 122;;",
          "239: let _TMS320C64X_INS_STW = 123;;",
          "240: let _TMS320C64X_INS_SUB = 124;;",
          "241: let _TMS320C64X_INS_SUB2 = 125;;",
          "242: let _TMS320C64X_INS_SUB4 = 126;;",
          "243: let _TMS320C64X_INS_SUBAB = 127;;",
          "244: let _TMS320C64X_INS_SUBABS4 = 128;;",
          "245: let _TMS320C64X_INS_SUBAH = 129;;",
          "246: let _TMS320C64X_INS_SUBAW = 130;;",
          "247: let _TMS320C64X_INS_SUBC = 131;;",
          "248: let _TMS320C64X_INS_SUBU = 132;;",
          "249: let _TMS320C64X_INS_SWAP4 = 133;;",
          "250: let _TMS320C64X_INS_UNPKHU4 = 134;;",
          "251: let _TMS320C64X_INS_UNPKLU4 = 135;;",
          "252: let _TMS320C64X_INS_XOR = 136;;",
          "253: let _TMS320C64X_INS_XPND2 = 137;;",
          "254: let _TMS320C64X_INS_XPND4 = 138;;",
          "255: let _TMS320C64X_INS_IDLE = 139;;",
          "256: let _TMS320C64X_INS_MV = 140;;",
          "257: let _TMS320C64X_INS_NEG = 141;;",
          "258: let _TMS320C64X_INS_NOT = 142;;",
          "259: let _TMS320C64X_INS_SWAP2 = 143;;",
          "260: let _TMS320C64X_INS_ZERO = 144;;",
          "261: let _TMS320C64X_INS_ENDING = 145;;",
          "263: let _TMS320C64X_GRP_INVALID = 0;;",
          "264: let _TMS320C64X_GRP_JUMP = 1;;",
          "265: let _TMS320C64X_GRP_FUNIT_D = 128;;",
          "266: let _TMS320C64X_GRP_FUNIT_L = 129;;",
          "267: let _TMS320C64X_GRP_FUNIT_M = 130;;",
          "268: let _TMS320C64X_GRP_FUNIT_S = 131;;",
          "269: let _TMS320C64X_GRP_FUNIT_NO = 132;;",
          "270: let _TMS320C64X_GRP_ENDING = 133;;",
          "272: let _TMS320C64X_FUNIT_INVALID = 0;;",
          "273: let _TMS320C64X_FUNIT_D = 1;;",
          "274: let _TMS320C64X_FUNIT_L = 2;;",
          "275: let _TMS320C64X_FUNIT_M = 3;;",
          "276: let _TMS320C64X_FUNIT_S = 4;;",
          "277: let _TMS320C64X_FUNIT_NO = 5;;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8c132fb0e2752753b9f02c6582f30bcc05127be9",
      "candidate_info": {
        "commit_hash": "8c132fb0e2752753b9f02c6582f30bcc05127be9",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/8c132fb0e2752753b9f02c6582f30bcc05127be9",
        "files": [
          "bindings/python/setup.py",
          "bindings/python/setup_cython.py"
        ],
        "message": "Python: remove special case for cygwin build",
        "before_after_code_files": [
          "bindings/python/setup.py||bindings/python/setup.py",
          "bindings/python/setup_cython.py||bindings/python/setup_cython.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "bindings/python/setup.py||bindings/python/setup.py": [
          "File: bindings/python/setup.py -> bindings/python/setup.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "99:         # Do not build tests & static library",
          "100:         os.system('cmake -DCMAKE_BUILD_TYPE=RELEASE -DCAPSTONE_BUILD_TESTS=0 -DCAPSTONE_BUILD_STATIC=0 -G \"NMake Makefiles\" ..')",
          "101:         os.system(\"nmake\")",
          "108:         os.system(\"CAPSTONE_BUILD_CORE_ONLY=yes bash ./make.sh\")",
          "110:     shutil.copy(LIBRARY_FILE, LIBS_DIR)",
          "",
          "[Removed Lines]",
          "102:     elif SYSTEM == \"cygwin\":",
          "103:         if IS_64BITS:",
          "104:             os.system(\"CAPSTONE_BUILD_CORE_ONLY=yes bash ./make.sh cygwin-mingw64\")",
          "105:         else:",
          "106:             os.system(\"CAPSTONE_BUILD_CORE_ONLY=yes bash ./make.sh cygwin-mingw32\")",
          "107:     else:   # Unix",
          "",
          "[Added Lines]",
          "102:     else:   # Unix incl. cygwin",
          "",
          "---------------"
        ],
        "bindings/python/setup_cython.py||bindings/python/setup_cython.py": [
          "File: bindings/python/setup_cython.py -> bindings/python/setup_cython.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "87:         # Do not build tests & static library",
          "88:         os.system('cmake -DCMAKE_BUILD_TYPE=RELEASE -DCAPSTONE_BUILD_TESTS=0 -DCAPSTONE_BUILD_STATIC=0 -G \"NMake Makefiles\" ..')",
          "89:         os.system(\"nmake\")",
          "97:         os.system(\"CAPSTONE_BUILD_CORE_ONLY=yes bash ./make.sh\")",
          "99:     shutil.copy(LIBRARY_FILE, LIBS_DIR)",
          "",
          "[Removed Lines]",
          "90:     elif SYSTEM == \"cygwin\":",
          "91:         if IS_64BITS:",
          "92:             os.system(\"CAPSTONE_BUILD_CORE_ONLY=yes bash ./make.sh cygwin-mingw64\")",
          "93:         else:",
          "94:             os.system(\"CAPSTONE_BUILD_CORE_ONLY=yes bash ./make.sh cygwin-mingw32\")",
          "96:     else:   # Unix",
          "",
          "[Added Lines]",
          "90:     else:   # Unix incl. cygwin",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d8111c1dc9c73b44671ea70c0e1ef7d273009c56",
      "candidate_info": {
        "commit_hash": "d8111c1dc9c73b44671ea70c0e1ef7d273009c56",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/d8111c1dc9c73b44671ea70c0e1ef7d273009c56",
        "files": [
          "bindings/python/.gitignore",
          "bindings/python/MANIFEST.in",
          "bindings/python/Makefile",
          "bindings/python/capstone/__init__.py",
          "bindings/python/setup.py"
        ],
        "message": "Python: make setup work as expected",
        "before_after_code_files": [
          "bindings/python/MANIFEST.in||bindings/python/MANIFEST.in",
          "bindings/python/capstone/__init__.py||bindings/python/capstone/__init__.py",
          "bindings/python/setup.py||bindings/python/setup.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "bindings/python/MANIFEST.in||bindings/python/MANIFEST.in": [
          "File: bindings/python/MANIFEST.in -> bindings/python/MANIFEST.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: recursive-include src *",
          "4: include LICENSE.TXT",
          "5: include README",
          "",
          "[Removed Lines]",
          "1: recursive-include capstone *",
          "3: recursive-include prebuilt *",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "bindings/python/capstone/__init__.py||bindings/python/capstone/__init__.py": [
          "File: bindings/python/capstone/__init__.py -> bindings/python/capstone/__init__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "233: CS_OP    = {v:k for k,v in locals().items() if k.startswith('CS_OP_')}",
          "234: CS_OPT   = {v:k for k,v in locals().items() if k.startswith('CS_OPT_')}",
          "237: from os.path import split, join, dirname",
          "238: import distutils.sysconfig",
          "241: import inspect",
          "242: if not hasattr(sys.modules[__name__], '__file__'):",
          "243:     __file__ = inspect.getfile(inspect.currentframe())",
          "247: _found = False",
          "250:     try:",
          "256:     except OSError:",
          "296:     raise ImportError(\"ERROR: fail to load the dynamic library.\")",
          "",
          "[Removed Lines]",
          "236: import ctypes, ctypes.util, sys",
          "245: _lib_path = split(__file__)[0]",
          "246: _all_libs = ['capstone.dll', 'libcapstone.so', 'libcapstone.dylib']",
          "249: for _lib in _all_libs:",
          "251:         _lib_file = join(_lib_path, _lib)",
          "252:         # print \"Trying to load:\", _lib_file",
          "253:         _cs = ctypes.cdll.LoadLibrary(_lib_file)",
          "254:         _found = True",
          "255:         break",
          "257:         pass",
          "258: if _found == False:",
          "259:     # try loading from default paths",
          "260:     for _lib in _all_libs:",
          "261:         try:",
          "262:             _cs = ctypes.cdll.LoadLibrary(_lib)",
          "263:             _found = True",
          "264:             break",
          "265:         except OSError:",
          "266:             pass",
          "268: if _found == False:",
          "269:     # last try: loading from python lib directory",
          "270:     _lib_path = distutils.sysconfig.get_python_lib()",
          "271:     for _lib in _all_libs:",
          "272:         try:",
          "273:             _lib_file = join(_lib_path, 'capstone', _lib)",
          "274:             # print \"Trying to load:\", _lib_file",
          "275:             _cs = ctypes.cdll.LoadLibrary(_lib_file)",
          "276:             _found = True",
          "277:             break",
          "278:         except OSError:",
          "279:             pass",
          "281: # Attempt Darwin specific load (10.11 specific),",
          "282: # since LD_LIBRARY_PATH is not guaranteed to exist",
          "283: if (_found == False) and (system() == 'Darwin'):",
          "284:     _lib_path = '/usr/local/lib/'",
          "285:     for _lib in _all_libs:",
          "286:         try:",
          "287:             _lib_file = join(_lib_path, _lib)",
          "288:             # print \"Trying to load:\", _lib_file",
          "289:             _cs = ctypes.cdll.LoadLibrary(_lib_file)",
          "290:             _found = True",
          "291:             break",
          "292:         except OSError:",
          "293:             pass",
          "295: if _found == False:",
          "",
          "[Added Lines]",
          "236: import ctypes, ctypes.util",
          "239: import pkg_resources",
          "245: if sys.platform == 'darwin':",
          "246:     _lib = \"libcapstone.dylib\"",
          "247: elif sys.platform in ('win32', 'cygwin'):",
          "248:     _lib = \"capstone.dll\"",
          "249: else:",
          "250:     _lib = \"libcapstone.so\"",
          "252: _all_libs = ['capstone.dll', 'libcapstone.so.3', 'libcapstone.so', 'libcapstone.dylib']",
          "255: def _load_lib(path):",
          "256:     lib_file = join(path, _lib)",
          "258:         return ctypes.cdll.LoadLibrary(lib_file)",
          "260:         # if we're on linux, try again with .so.3 extension",
          "261:         if lib_file.endswith('.so'):",
          "262:             try:",
          "263:                 return ctypes.cdll.LoadLibrary(lib_file)",
          "264:             except OSError:",
          "265:                 return None",
          "266:         return None",
          "268: _cs = None",
          "270: # Loading attempts, in order",
          "271: # - pkg_resources can get us the path to the local libraries",
          "272: # - we can get the path to the local libraries by parsing our filename",
          "273: # - global load",
          "274: # - python's lib directory",
          "275: # - last-gasp attempt at some hardcoded paths on darwin and linux",
          "277: _path_list = [pkg_resources.resource_filename(__name__, 'lib'),",
          "278:               join(split(__file__)[0], 'lib'),",
          "279:               '',",
          "280:               distutils.sysconfig.get_python_lib(),",
          "281:               \"/usr/local/lib/\" if sys.platform == 'darwin' else '/usr/lib64']",
          "283: for _path in _path_list:",
          "284:     _cs = _load_lib(_path)",
          "285:     if _cs is not None: break",
          "286: else:",
          "",
          "---------------"
        ],
        "bindings/python/setup.py||bindings/python/setup.py": [
          "File: bindings/python/setup.py -> bindings/python/setup.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: #!/usr/bin/env python",
          "2: import glob",
          "3: import os",
          "4: import shutil",
          "5: import stat",
          "6: import sys",
          "8: from distutils import log",
          "12: from setuptools import setup",
          "24: SYSTEM = sys.platform",
          "25: VERSION = '4.0'",
          "46: # adapted from commit e504b81 of Nguyen Tan Cong",
          "47: # Reference: https://docs.python.org/2/library/platform.html#cross-platform",
          "50: def copy_sources():",
          "51:     \"\"\"Copy the C sources into the source directory.",
          "",
          "[Removed Lines]",
          "9: from distutils import dir_util",
          "10: from distutils.command.build_clib import build_clib",
          "11: from setuptools.command.sdist import sdist",
          "13: from distutils.sysconfig import get_python_lib",
          "15: # prebuilt libraries for Windows - for sdist",
          "16: PATH_LIB64 = \"prebuilt/win64/capstone.dll\"",
          "17: PATH_LIB32 = \"prebuilt/win32/capstone.dll\"",
          "19: # package name can be 'capstone' or 'capstone-windows'",
          "20: PKG_NAME = 'capstone'",
          "21: if os.path.exists(PATH_LIB64) and os.path.exists(PATH_LIB32):",
          "22:     PKG_NAME = 'capstone-windows'",
          "27: # virtualenv breaks import, but get_python_lib() will work.",
          "28: SITE_PACKAGES = os.path.join(get_python_lib(), \"capstone\")",
          "29: if \"--user\" in sys.argv:",
          "30:     try:",
          "31:         from site import getusersitepackages",
          "32:         SITE_PACKAGES = os.path.join(getusersitepackages(), \"capstone\")",
          "33:     except ImportError:",
          "34:         pass",
          "36: # If building a wheel, the path listed in data_files is interpreted relative to",
          "37: # python's site-packages directory, even if it starts with a slash. So we need",
          "38: # to use only `/capstone` as path in this case.",
          "39: #",
          "40: # Note: using `capstone` does not work, since that for some reason is interpreted",
          "41: # relative to the the python installation prefix, not to the site-packages directory.",
          "42: if \"bdist_wheel\" in sys.argv:",
          "43:     SITE_PACKAGES = \"/capstone\"",
          "48: is_64bits = sys.maxsize > 2**32",
          "",
          "[Added Lines]",
          "8: import platform",
          "12: from distutils.util import get_platform",
          "13: from distutils.command.build import build",
          "14: from distutils.command.sdist import sdist",
          "15: from setuptools.command.bdist_egg import bdist_egg",
          "22: IS_64BITS = sys.maxsize > 2**32",
          "24: # are we building from the repository or from a source distribution?",
          "25: ROOT_DIR = os.path.dirname(os.path.realpath(__file__))",
          "26: LIBS_DIR = os.path.join(ROOT_DIR, 'capstone', 'lib')",
          "27: HEADERS_DIR = os.path.join(ROOT_DIR, 'capstone', 'include')",
          "28: SRC_DIR = os.path.join(ROOT_DIR, 'src')",
          "29: BUILD_DIR = SRC_DIR if os.path.exists(SRC_DIR) else os.path.join(ROOT_DIR, '../..')",
          "31: if SYSTEM == 'darwin':",
          "32:     LIBRARY_FILE = \"libcapstone.dylib\"",
          "33:     STATIC_LIBRARY_FILE = 'libcapstone.a'",
          "34: elif SYSTEM in ('win32', 'cygwin'):",
          "35:     LIBRARY_FILE = \"capstone.dll\"",
          "36:     STATIC_LIBRARY_FILE = None",
          "37: else:",
          "38:     LIBRARY_FILE = \"libcapstone.so\"",
          "39:     STATIC_LIBRARY_FILE = 'libcapstone.a'",
          "41: def clean_bins():",
          "42:     shutil.rmtree(LIBS_DIR, ignore_errors=True)",
          "43:     shutil.rmtree(HEADERS_DIR, ignore_errors=True)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "55:     src = []",
          "57:     try:",
          "59:     except (IOError, OSError):",
          "60:         pass",
          "78:     for filename in src:",
          "80:         log.info(\"%s -> %s\" % (filename, outpath))",
          "81:         shutil.copy(filename, outpath)",
          "87:     def run(self):",
          "99:         copy_sources()",
          "100:         return sdist.run(self)",
          "106:     def run(self):",
          "174: def dummy_src():",
          "175:     return []",
          "178: setup(",
          "179:     provides=['capstone'],",
          "180:     packages=['capstone'],",
          "182:     version=VERSION,",
          "183:     author='Nguyen Anh Quynh',",
          "184:     author_email='aquynh@gmail.com',",
          "",
          "[Removed Lines]",
          "58:         dir_util.remove_tree(\"src/\")",
          "62:     dir_util.copy_tree(\"../../arch\", \"src/arch/\")",
          "63:     dir_util.copy_tree(\"../../include\", \"src/include/\")",
          "64:     if SYSTEM == \"win32\":",
          "65:         dir_util.copy_tree(\"../../msvc/headers\", \"src/msvc/headers\")",
          "67:     src.extend(glob.glob(\"../../*.[ch]\"))",
          "68:     src.extend(glob.glob(\"../../*.mk\"))",
          "70:     src.extend(glob.glob(\"../../Makefile\"))",
          "71:     src.extend(glob.glob(\"../../LICENSE*\"))",
          "72:     src.extend(glob.glob(\"../../README\"))",
          "73:     src.extend(glob.glob(\"../../*.TXT\"))",
          "74:     src.extend(glob.glob(\"../../RELEASE_NOTES\"))",
          "75:     src.extend(glob.glob(\"../../make.sh\"))",
          "76:     src.extend(glob.glob(\"../../CMakeLists.txt\"))",
          "79:         outpath = os.path.join(\"./src/\", os.path.basename(filename))",
          "84: class custom_sdist(sdist):",
          "85:     \"\"\"Reshuffle files for distribution.\"\"\"",
          "88:         for filename in (glob.glob(\"capstone/*.dll\")",
          "89:                          + glob.glob(\"capstone/*.so\")",
          "90:                          + glob.glob(\"capstone/*.dylib\")):",
          "91:             try:",
          "92:                 os.unlink(filename)",
          "93:             except Exception:",
          "94:                 pass",
          "96:         # if prebuilt libraries are existent, then do not copy source",
          "97:         if os.path.exists(PATH_LIB64) and os.path.exists(PATH_LIB32):",
          "98:             return sdist.run(self)",
          "103: class custom_build_clib(build_clib):",
          "104:     \"\"\"Customized build_clib command.\"\"\"",
          "107:         log.info('running custom_build_clib')",
          "108:         build_clib.run(self)",
          "110:     def finalize_options(self):",
          "111:         # We want build-clib to default to build-lib as defined by the \"build\"",
          "112:         # command.  This is so the compiled library will be put in the right",
          "113:         # place along side the python code.",
          "114:         self.set_undefined_options('build',",
          "115:                                    ('build_lib', 'build_clib'),",
          "116:                                    ('build_temp', 'build_temp'),",
          "117:                                    ('compiler', 'compiler'),",
          "118:                                    ('debug', 'debug'),",
          "119:                                    ('force', 'force'))",
          "121:         build_clib.finalize_options(self)",
          "123:     def build_libraries(self, libraries):",
          "124:         if SYSTEM in (\"win32\", \"cygwin\"):",
          "125:             # if Windows prebuilt library is available, then include it",
          "126:             if is_64bits and os.path.exists(PATH_LIB64):",
          "127:                 shutil.copy(PATH_LIB64, \"capstone\")",
          "128:                 return",
          "129:             elif os.path.exists(PATH_LIB32):",
          "130:                 shutil.copy(PATH_LIB32, \"capstone\")",
          "131:                 return",
          "133:         # build library from source if src/ is existent",
          "134:         if not os.path.exists('src'):",
          "135:             return",
          "137:         for (lib_name, build_info) in libraries:",
          "138:             log.info(\"building '%s' library\", lib_name)",
          "140:             os.chdir(\"src\")",
          "142:             # platform description refers at https://docs.python.org/2/library/sys.html#sys.platform",
          "143:             if SYSTEM == \"win32\":",
          "144:                 # Windows build: this process requires few things:",
          "145:                 #    - CMake + MSVC installed",
          "146:                 #    - Run this command in an environment setup for MSVC",
          "147:                 os.mkdir(\"build\")",
          "148:                 os.chdir(\"build\")",
          "149:                 # Do not build tests & static library",
          "150:                 os.system('cmake -DCMAKE_BUILD_TYPE=RELEASE -DCAPSTONE_BUILD_TESTS=0 -DCAPSTONE_BUILD_STATIC=0 -G \"NMake Makefiles\" ..')",
          "151:                 os.system(\"nmake\")",
          "152:                 os.chdir(\"..\")",
          "153:                 so = \"src/build/capstone.dll\"",
          "154:             elif SYSTEM == \"cygwin\":",
          "155:                 os.chmod(\"make.sh\", stat.S_IREAD|stat.S_IEXEC)",
          "156:                 if is_64bits:",
          "157:                     os.system(\"CAPSTONE_BUILD_CORE_ONLY=yes ./make.sh cygwin-mingw64\")",
          "158:                 else:",
          "159:                     os.system(\"CAPSTONE_BUILD_CORE_ONLY=yes ./make.sh cygwin-mingw32\")",
          "161:                 so = \"src/capstone.dll\"",
          "162:             else:   # Unix",
          "163:                 os.chmod(\"make.sh\", stat.S_IREAD|stat.S_IEXEC)",
          "164:                 os.system(\"CAPSTONE_BUILD_CORE_ONLY=yes ./make.sh\")",
          "165:                 if SYSTEM == \"darwin\":",
          "166:                     so = \"src/libcapstone.dylib\"",
          "167:                 else:   # Non-OSX",
          "168:                     so = \"src/libcapstone.so\"",
          "170:             os.chdir(\"..\")",
          "171:             shutil.copy(so, \"capstone\")",
          "181:     name=PKG_NAME,",
          "",
          "[Added Lines]",
          "53:         shutil.rmtree(\"src/\")",
          "57:     shutil.copytree(os.path.join(BUILD_DIR, \"arch\"), os.path.join(SRC_DIR, \"arch\"))",
          "58:  shutil.copytree(os.path.join(BUILD_DIR, \"include\"), os.path.join(SRC_DIR, \"include\"))",
          "60:     src.extend(glob.glob(os.path.join(BUILD_DIR, \"*.[ch]\")))",
          "61:     src.extend(glob.glob(os.path.join(BUILD_DIR, \"*.mk\"))",
          "63:     src.extend(glob.glob(os.path.join(BUILD_DIR, \"Makefile\"))",
          "64:     src.extend(glob.glob(os.path.join(BUILD_DIR, \"LICENSE*\"))",
          "65:     src.extend(glob.glob(os.path.join(BUILD_DIR, \"README\"))",
          "66:     src.extend(glob.glob(os.path.join(BUILD_DIR, \"*.TXT\"))",
          "67:     src.extend(glob.glob(os.path.join(BUILD_DIR, \"RELEASE_NOTES\"))",
          "68:     src.extend(glob.glob(os.path.join(BUILD_DIR, \"make.sh\"))",
          "69:     src.extend(glob.glob(os.path.join(BUILD_DIR, \"CMakeLists.txt\"))",
          "72:         outpath = os.path.join(SRC_DIR, os.path.basename(filename))",
          "76: def build_libraries():",
          "77:     \"\"\"",
          "78:     Prepare the capstone directory for a binary distribution or installation.",
          "79:     Builds shared libraries and copies header files.",
          "81:     Will use a src/ dir if one exists in the current directory, otherwise assumes it's in the repo",
          "82:     \"\"\"",
          "83:     cwd = os.getcwd()",
          "84:     clean_bins()",
          "85:     os.mkdir(HEADERS_DIR)",
          "86:     os.mkdir(LIBS_DIR)",
          "88:     # copy public headers",
          "89:     shutil.copytree(os.path.join(BUILD_DIR, 'include'), os.path.join(HEADERS_DIR, 'capstone'))",
          "91:     os.chdir(BUILD_DIR)",
          "93:     # platform description refers at https://docs.python.org/2/library/sys.html#sys.platform",
          "94:     if SYSTEM == \"win32\":",
          "95:         # Windows build: this process requires few things:",
          "96:         #    - CMake + MSVC installed",
          "97:         #    - Run this command in an environment setup for MSVC",
          "98:         if not os.path.exists(\"build\"): os.mkdir(\"build\")",
          "99:         os.chdir(\"build\")",
          "100:         # Do not build tests & static library",
          "101:         os.system('cmake -DCMAKE_BUILD_TYPE=RELEASE -DCAPSTONE_BUILD_TESTS=0 -DCAPSTONE_BUILD_STATIC=0 -G \"NMake Makefiles\" ..')",
          "102:         os.system(\"nmake\")",
          "103:     elif SYSTEM == \"cygwin\":",
          "104:         os.chmod(\"make.sh\", stat.S_IREAD|stat.S_IEXEC)",
          "105:         if is_64bits:",
          "106:             os.system(\"CAPSTONE_BUILD_CORE_ONLY=yes ./make.sh cygwin-mingw64\")",
          "107:         else:",
          "108:             os.system(\"CAPSTONE_BUILD_CORE_ONLY=yes ./make.sh cygwin-mingw32\")",
          "110:         so = \"capstone.dll\"",
          "111:     else:   # Unix",
          "112:         os.system(\"CAPSTONE_BUILD_CORE_ONLY=yes ./make.sh\")",
          "114:     shutil.copy(LIBRARY_FILE, LIBS_DIR)",
          "115:     if STATIC_LIBRARY_FILE: shutil.copy(STATIC_LIBRARY_FILE, LIBS_DIR)",
          "116:     os.chdir(cwd)",
          "119: class custom_sdist(sdist):",
          "121:         clean_bins()",
          "126: class custom_build(build):",
          "128:         log.info('Building C extensions')",
          "129:         build_libraries()",
          "130:         return build.run(self)",
          "133: class custom_bdist_egg(bdist_egg):",
          "134:     def run(self):",
          "135:         self.run_command('build')",
          "136:         return bdist_egg.run(self)",
          "141: cmdclass = {}",
          "142: cmdclass['build'] = custom_build",
          "143: cmdclass['sdist'] = custom_sdist",
          "144: cmdclass['bdist_egg'] = custom_bdist_egg",
          "146: try:",
          "147:     from setuptools.command.develop import develop",
          "148:     class custom_develop(develop):",
          "149:         def run(self):",
          "150:             log.info(\"Building C extensions\")",
          "151:             build_libraries()",
          "152:             return develop.run(self)",
          "154:     cmdclass['develop'] = custom_develop",
          "155: except ImportError:",
          "156:     print \"Proper 'develop' support unavailable.\"",
          "158: if 'bdist_wheel' in sys.argv and '--plat-name' not in sys.argv:",
          "159:     sys.argv.append('--plat-name')",
          "160:     name = get_platform()",
          "161:     if 'linux' in name:",
          "162:         # linux_* platform tags are disallowed because the python ecosystem is fubar",
          "163:         # linux builds should be built in the centos 5 vm for maximum compatibility",
          "164:         # see https://github.com/pypa/manylinux",
          "165:         # see also https://github.com/angr/angr-dev/blob/master/bdist.sh",
          "166:         sys.argv.append('manylinux1_' + platform.machine())",
          "167:     else:",
          "168:         # https://www.python.org/dev/peps/pep-0425/",
          "169:         sys.argv.append(name.replace('.', '_').replace('-', '_'))",
          "174:     name='capstone',",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "190:         'Programming Language :: Python :: 3',",
          "191:     ],",
          "192:     requires=['ctypes'],",
          "205:     include_package_data=True,",
          "206:     package_data={",
          "208:     }",
          "209: )",
          "",
          "[Removed Lines]",
          "193:     cmdclass=dict(",
          "194:         build_clib=custom_build_clib,",
          "195:         sdist=custom_sdist,",
          "196:     ),",
          "198:     libraries=[(",
          "199:         'capstone', dict(",
          "200:             package='capstone',",
          "201:             sources=dummy_src()",
          "202:         ),",
          "203:     )],",
          "204:     zip_safe=False,",
          "207:         \"capstone\": [\"*.so\", \"*.dll\", \"*.dylib\"],",
          "",
          "[Added Lines]",
          "186:     cmdclass=cmdclass,",
          "187:     zip_safe=True,",
          "190:         \"capstone\": [\"lib/*\", \"include/capstone/*\"],",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cd6a732c967209fbeb009e57354903f2539f51e3",
      "candidate_info": {
        "commit_hash": "cd6a732c967209fbeb009e57354903f2539f51e3",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/cd6a732c967209fbeb009e57354903f2539f51e3",
        "files": [
          "arch/X86/X86Mapping.c"
        ],
        "message": "LOOP* branch fix for full x64 instructions\n\nSorry, since the file is very big I didn't realize there was a 2nd list.",
        "before_after_code_files": [
          "arch/X86/X86Mapping.c||arch/X86/X86Mapping.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [
            "arch/X86/X86Mapping.c||arch/X86/X86Mapping.c"
          ],
          "candidate": [
            "arch/X86/X86Mapping.c||arch/X86/X86Mapping.c"
          ]
        }
      },
      "candidate_diff": {
        "arch/X86/X86Mapping.c||arch/X86/X86Mapping.c": [
          "File: arch/X86/X86Mapping.c -> arch/X86/X86Mapping.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "8900:  {",
          "8901:   X86_LOOP, X86_INS_LOOP,",
          "8902: #ifndef CAPSTONE_DIET",
          "8904: #endif",
          "8905:  },",
          "8906:  {",
          "8907:   X86_LOOPE, X86_INS_LOOPE,",
          "8908: #ifndef CAPSTONE_DIET",
          "8910: #endif",
          "8911:  },",
          "8912:  {",
          "8913:   X86_LOOPNE, X86_INS_LOOPNE,",
          "8914: #ifndef CAPSTONE_DIET",
          "8916: #endif",
          "8917:  },",
          "8918:  {",
          "",
          "[Removed Lines]",
          "8903:   { 0 }, { 0 }, { 0 }, 0, 0",
          "8909:   { 0 }, { 0 }, { 0 }, 0, 0",
          "8915:   { 0 }, { 0 }, { 0 }, 0, 0",
          "",
          "[Added Lines]",
          "8903:   { 0 }, { 0 }, { 0 }, 1, 0",
          "8909:   { 0 }, { 0 }, { 0 }, 1, 0",
          "8915:   { 0 }, { 0 }, { 0 }, 1, 0",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3ba8c4d2d9a215d593c066ad07ec6f0d07725f2e",
      "candidate_info": {
        "commit_hash": "3ba8c4d2d9a215d593c066ad07ec6f0d07725f2e",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/3ba8c4d2d9a215d593c066ad07ec6f0d07725f2e",
        "files": [
          "Makefile",
          "include/capstone/capstone.h",
          "make.sh"
        ],
        "message": "improve dependency on header files *.h, and remove clean from make.sh. see PR #793",
        "before_after_code_files": [
          "include/capstone/capstone.h||include/capstone/capstone.h",
          "make.sh||make.sh"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/capstone/capstone.h||include/capstone/capstone.h": [
          "File: include/capstone/capstone.h -> include/capstone/capstone.h"
        ],
        "make.sh||make.sh": [
          "File: make.sh -> make.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "42:   TOOLCHAIN=\"$NDK/toolchains/$CROSS$GCCVER/prebuilt/$HOSTOS-$HOSTARCH\"",
          "43:   PLATFORM=\"$NDK/platforms/$APILEVEL/arch-$TARGARCH\"",
          "47:   CROSS=\"$TOOLCHAIN/bin/$CROSS\" CFLAGS=\"--sysroot=$PLATFORM\" LDFLAGS=\"--sysroot=$PLATFORM\" ${MAKE} $*",
          "48: }",
          "50: # build iOS lib for all iDevices, or only specific device",
          "51: build_iOS() {",
          "53:   IOS_SDK=`xcrun --sdk iphoneos --show-sdk-path`",
          "54:   IOS_CC=`xcrun --sdk iphoneos -f clang`",
          "55:   IOS_CFLAGS=\"-Os -Wimplicit -isysroot $IOS_SDK\"",
          "",
          "[Removed Lines]",
          "45:   ${MAKE} clean",
          "52:   ${MAKE} clean",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "70: build() {",
          "71:   [ \"$UNAME\" = Darwin ] && LIBARCHS=\"i386 x86_64\"",
          "73:   ${MAKE} $*",
          "74: }",
          "",
          "[Removed Lines]",
          "72:   ${MAKE} clean",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}