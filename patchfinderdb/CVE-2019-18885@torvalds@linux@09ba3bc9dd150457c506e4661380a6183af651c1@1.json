{
  "cve_id": "CVE-2019-18885",
  "cve_desc": "fs/btrfs/volumes.c in the Linux kernel before 5.1 allows a btrfs_verify_dev_extents NULL pointer dereference via a crafted btrfs image because fs_devices->devices is mishandled within find_device, aka CID-09ba3bc9dd15.",
  "repo": "torvalds/linux",
  "patch_hash": "09ba3bc9dd150457c506e4661380a6183af651c1",
  "patch_info": {
    "commit_hash": "09ba3bc9dd150457c506e4661380a6183af651c1",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/09ba3bc9dd150457c506e4661380a6183af651c1",
    "files": [
      "fs/btrfs/dev-replace.c",
      "fs/btrfs/ioctl.c",
      "fs/btrfs/scrub.c",
      "fs/btrfs/volumes.c",
      "fs/btrfs/volumes.h"
    ],
    "message": "btrfs: merge btrfs_find_device and find_device\n\nBoth btrfs_find_device() and find_device() does the same thing except\nthat the latter does not take the seed device onto account in the device\nscanning context. We can merge them.\n\nSigned-off-by: Anand Jain <anand.jain@oracle.com>\nReviewed-by: David Sterba <dsterba@suse.com>\nSigned-off-by: David Sterba <dsterba@suse.com>",
    "before_after_code_files": [
      "fs/btrfs/dev-replace.c||fs/btrfs/dev-replace.c",
      "fs/btrfs/ioctl.c||fs/btrfs/ioctl.c",
      "fs/btrfs/scrub.c||fs/btrfs/scrub.c",
      "fs/btrfs/volumes.c||fs/btrfs/volumes.c",
      "fs/btrfs/volumes.h||fs/btrfs/volumes.h"
    ]
  },
  "patch_diff": {
    "fs/btrfs/dev-replace.c||fs/btrfs/dev-replace.c": [
      "File: fs/btrfs/dev-replace.c -> fs/btrfs/dev-replace.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "112:  case BTRFS_IOCTL_DEV_REPLACE_STATE_STARTED:",
      "113:  case BTRFS_IOCTL_DEV_REPLACE_STATE_SUSPENDED:",
      "114:   dev_replace->srcdev = btrfs_find_device(fs_info->fs_devices,",
      "116:   dev_replace->tgtdev = btrfs_find_device(fs_info->fs_devices,",
      "117:        BTRFS_DEV_REPLACE_DEVID,",
      "",
      "[Removed Lines]",
      "115:        src_devid, NULL, NULL);",
      "118:        NULL, NULL);",
      "",
      "[Added Lines]",
      "115:       src_devid, NULL, NULL, true);",
      "118:        NULL, NULL, true);",
      "",
      "---------------"
    ],
    "fs/btrfs/ioctl.c||fs/btrfs/ioctl.c": [
      "File: fs/btrfs/ioctl.c -> fs/btrfs/ioctl.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1642:   btrfs_info(fs_info, \"resizing devid %llu\", devid);",
      "1643:  }",
      "1646:  if (!device) {",
      "1647:   btrfs_info(fs_info, \"resizer unable to find device %llu\",",
      "1648:       devid);",
      "",
      "[Removed Lines]",
      "1645:  device = btrfs_find_device(fs_info->fs_devices, devid, NULL, NULL);",
      "",
      "[Added Lines]",
      "1645:  device = btrfs_find_device(fs_info->fs_devices, devid, NULL, NULL, true);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "3180:  rcu_read_lock();",
      "3181:  dev = btrfs_find_device(fs_info->fs_devices, di_args->devid, s_uuid,",
      "3184:  if (!dev) {",
      "3185:   ret = -ENODEV;",
      "",
      "[Removed Lines]",
      "3182:     NULL);",
      "",
      "[Added Lines]",
      "3182:     NULL, true);",
      "",
      "---------------"
    ],
    "fs/btrfs/scrub.c||fs/btrfs/scrub.c": [
      "File: fs/btrfs/scrub.c -> fs/btrfs/scrub.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3835:   return PTR_ERR(sctx);",
      "3837:  mutex_lock(&fs_info->fs_devices->device_list_mutex);",
      "3839:  if (!dev || (test_bit(BTRFS_DEV_STATE_MISSING, &dev->dev_state) &&",
      "3840:        !is_dev_replace)) {",
      "3841:   mutex_unlock(&fs_info->fs_devices->device_list_mutex);",
      "",
      "[Removed Lines]",
      "3838:  dev = btrfs_find_device(fs_info->fs_devices, devid, NULL, NULL);",
      "",
      "[Added Lines]",
      "3838:  dev = btrfs_find_device(fs_info->fs_devices, devid, NULL, NULL, true);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "4012:  struct scrub_ctx *sctx = NULL;",
      "4014:  mutex_lock(&fs_info->fs_devices->device_list_mutex);",
      "4016:  if (dev)",
      "4017:   sctx = dev->scrub_ctx;",
      "4018:  if (sctx)",
      "",
      "[Removed Lines]",
      "4015:  dev = btrfs_find_device(fs_info->fs_devices, devid, NULL, NULL);",
      "",
      "[Added Lines]",
      "4015:  dev = btrfs_find_device(fs_info->fs_devices, devid, NULL, NULL, true);",
      "",
      "---------------"
    ],
    "fs/btrfs/volumes.c||fs/btrfs/volumes.c": [
      "File: fs/btrfs/volumes.c -> fs/btrfs/volumes.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "415:  return dev;",
      "416: }",
      "439: static noinline struct btrfs_fs_devices *find_fsid(",
      "440:   const u8 *fsid, const u8 *metadata_fsid)",
      "441: {",
      "",
      "[Removed Lines]",
      "425: static struct btrfs_device *find_device(struct btrfs_fs_devices *fs_devices,",
      "426:   u64 devid, const u8 *uuid)",
      "427: {",
      "428:  struct btrfs_device *dev;",
      "430:  list_for_each_entry(dev, &fs_devices->devices, dev_list) {",
      "431:   if (dev->devid == devid &&",
      "432:       (!uuid || !memcmp(dev->uuid, uuid, BTRFS_UUID_SIZE))) {",
      "433:    return dev;",
      "434:   }",
      "435:  }",
      "436:  return NULL;",
      "437: }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "984:   device = NULL;",
      "985:  } else {",
      "986:   mutex_lock(&fs_devices->device_list_mutex);",
      "",
      "[Removed Lines]",
      "987:   device = find_device(fs_devices, devid,",
      "988:     disk_super->dev_item.uuid);",
      "",
      "[Added Lines]",
      "966:   device = btrfs_find_device(fs_devices, devid,",
      "967:     disk_super->dev_item.uuid, NULL, false);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "2402:  dev_uuid = disk_super->dev_item.uuid;",
      "2403:  if (btrfs_fs_incompat(fs_info, METADATA_UUID))",
      "2404:   device = btrfs_find_device(fs_info->fs_devices, devid, dev_uuid,",
      "2406:  else",
      "2407:   device = btrfs_find_device(fs_info->fs_devices, devid, dev_uuid,",
      "2410:  brelse(bh);",
      "2411:  if (!device)",
      "",
      "[Removed Lines]",
      "2405:         disk_super->metadata_uuid);",
      "2408:         disk_super->fsid);",
      "",
      "[Added Lines]",
      "2384:         disk_super->metadata_uuid, true);",
      "2387:         disk_super->fsid, true);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "2426:  if (devid) {",
      "2427:   device = btrfs_find_device(fs_info->fs_devices, devid, NULL,",
      "2429:   if (!device)",
      "2430:    return ERR_PTR(-ENOENT);",
      "2431:   return device;",
      "",
      "[Removed Lines]",
      "2428:         NULL);",
      "",
      "[Added Lines]",
      "2407:         NULL, true);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "2568:   read_extent_buffer(leaf, fs_uuid, btrfs_device_fsid(dev_item),",
      "2569:        BTRFS_FSID_SIZE);",
      "2570:   device = btrfs_find_device(fs_info->fs_devices, devid, dev_uuid,",
      "2574:   if (device->fs_devices->seeding) {",
      "",
      "[Removed Lines]",
      "2571:         fs_uuid);",
      "",
      "[Added Lines]",
      "2550:         fs_uuid, true);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "6621:  return BLK_STS_OK;",
      "6622: }",
      "6624: struct btrfs_device *btrfs_find_device(struct btrfs_fs_devices *fs_devices,",
      "6626: {",
      "6627:  struct btrfs_device *device;",
      "6629:  while (fs_devices) {",
      "6630:   if (!fsid ||",
      "6631:       !memcmp(fs_devices->metadata_uuid, fsid, BTRFS_FSID_SIZE)) {",
      "6635:   }",
      "6637:  }",
      "6638:  return NULL;",
      "6639: }",
      "",
      "[Removed Lines]",
      "6625:            u64 devid, u8 *uuid, u8 *fsid)",
      "6632:    device = find_device(fs_devices, devid, uuid);",
      "6633:    if (device)",
      "6634:     return device;",
      "6636:   fs_devices = fs_devices->seed;",
      "",
      "[Added Lines]",
      "6613:            u64 devid, u8 *uuid, u8 *fsid,",
      "6614:            bool seed)",
      "6621:    list_for_each_entry(device, &fs_devices->devices,",
      "6622:          dev_list) {",
      "6623:     if (device->devid == devid &&",
      "6624:         (!uuid || memcmp(device->uuid, uuid,",
      "6625:            BTRFS_UUID_SIZE) == 0))",
      "6626:      return device;",
      "6627:    }",
      "6629:   if (seed)",
      "6630:    fs_devices = fs_devices->seed;",
      "6631:   else",
      "6632:    return NULL;",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "6879:        btrfs_stripe_dev_uuid_nr(chunk, i),",
      "6880:        BTRFS_UUID_SIZE);",
      "6881:   map->stripes[i].dev = btrfs_find_device(fs_info->fs_devices,",
      "6883:   if (!map->stripes[i].dev &&",
      "6884:       !btrfs_test_opt(fs_info, DEGRADED)) {",
      "6885:    free_extent_map(em);",
      "",
      "[Removed Lines]",
      "6882:        devid, uuid, NULL);",
      "",
      "[Added Lines]",
      "6878:        devid, uuid, NULL, true);",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "7019:  }",
      "7021:  device = btrfs_find_device(fs_info->fs_devices, devid, dev_uuid,",
      "7023:  if (!device) {",
      "7024:   if (!btrfs_test_opt(fs_info, DEGRADED)) {",
      "7025:    btrfs_report_missing_device(fs_info, devid,",
      "",
      "[Removed Lines]",
      "7022:        fs_uuid);",
      "",
      "[Added Lines]",
      "7018:        fs_uuid, true);",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "7609:  int i;",
      "7611:  mutex_lock(&fs_devices->device_list_mutex);",
      "7613:  mutex_unlock(&fs_devices->device_list_mutex);",
      "7615:  if (!dev) {",
      "",
      "[Removed Lines]",
      "7612:  dev = btrfs_find_device(fs_info->fs_devices, stats->devid, NULL, NULL);",
      "",
      "[Added Lines]",
      "7608:  dev = btrfs_find_device(fs_info->fs_devices, stats->devid, NULL, NULL,",
      "7609:     true);",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "7823:  }",
      "7827:  if (!dev) {",
      "7828:   btrfs_err(fs_info, \"failed to find devid %llu\", devid);",
      "7829:   ret = -EUCLEAN;",
      "",
      "[Removed Lines]",
      "7826:  dev = btrfs_find_device(fs_info->fs_devices, devid, NULL, NULL);",
      "",
      "[Added Lines]",
      "7823:  dev = btrfs_find_device(fs_info->fs_devices, devid, NULL, NULL, true);",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "7834:  if (dev->disk_total_bytes == 0) {",
      "7836:   if (!dev) {",
      "7837:    btrfs_err(fs_info, \"failed to find seed devid %llu\",",
      "7838:       devid);",
      "",
      "[Removed Lines]",
      "7835:   dev = find_device(fs_info->fs_devices->seed, devid, NULL);",
      "",
      "[Added Lines]",
      "7832:   dev = btrfs_find_device(fs_info->fs_devices->seed, devid, NULL,",
      "7833:      NULL, false);",
      "",
      "---------------"
    ],
    "fs/btrfs/volumes.h||fs/btrfs/volumes.h": [
      "File: fs/btrfs/volumes.h -> fs/btrfs/volumes.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "434: int btrfs_grow_device(struct btrfs_trans_handle *trans,",
      "435:         struct btrfs_device *device, u64 new_size);",
      "436: struct btrfs_device *btrfs_find_device(struct btrfs_fs_devices *fs_devices,",
      "438: int btrfs_shrink_device(struct btrfs_device *device, u64 new_size);",
      "439: int btrfs_init_new_device(struct btrfs_fs_info *fs_info, const char *path);",
      "440: int btrfs_balance(struct btrfs_fs_info *fs_info,",
      "",
      "[Removed Lines]",
      "437:            u64 devid, u8 *uuid, u8 *fsid);",
      "",
      "[Added Lines]",
      "437:            u64 devid, u8 *uuid, u8 *fsid, bool seed);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "e4319cd9cacef80a2d289f235b939ab8bd614683",
      "candidate_info": {
        "commit_hash": "e4319cd9cacef80a2d289f235b939ab8bd614683",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/e4319cd9cacef80a2d289f235b939ab8bd614683",
        "files": [
          "fs/btrfs/dev-replace.c",
          "fs/btrfs/ioctl.c",
          "fs/btrfs/scrub.c",
          "fs/btrfs/volumes.c",
          "fs/btrfs/volumes.h"
        ],
        "message": "btrfs: refactor btrfs_find_device() take fs_devices as argument\n\nbtrfs_find_device() accepts fs_info as an argument and retrieves\nfs_devices from fs_info.\n\nInstead use fs_devices, so that this function can be used in non-mount\n(during device scanning) context as well.\n\nSigned-off-by: Anand Jain <anand.jain@oracle.com>\nReviewed-by: David Sterba <dsterba@suse.com>\nSigned-off-by: David Sterba <dsterba@suse.com>",
        "before_after_code_files": [
          "fs/btrfs/dev-replace.c||fs/btrfs/dev-replace.c",
          "fs/btrfs/ioctl.c||fs/btrfs/ioctl.c",
          "fs/btrfs/scrub.c||fs/btrfs/scrub.c",
          "fs/btrfs/volumes.c||fs/btrfs/volumes.c",
          "fs/btrfs/volumes.h||fs/btrfs/volumes.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "fs/btrfs/dev-replace.c||fs/btrfs/dev-replace.c",
            "fs/btrfs/ioctl.c||fs/btrfs/ioctl.c",
            "fs/btrfs/scrub.c||fs/btrfs/scrub.c",
            "fs/btrfs/volumes.c||fs/btrfs/volumes.c",
            "fs/btrfs/volumes.h||fs/btrfs/volumes.h"
          ],
          "candidate": [
            "fs/btrfs/dev-replace.c||fs/btrfs/dev-replace.c",
            "fs/btrfs/ioctl.c||fs/btrfs/ioctl.c",
            "fs/btrfs/scrub.c||fs/btrfs/scrub.c",
            "fs/btrfs/volumes.c||fs/btrfs/volumes.c",
            "fs/btrfs/volumes.h||fs/btrfs/volumes.h"
          ]
        }
      },
      "candidate_diff": {
        "fs/btrfs/dev-replace.c||fs/btrfs/dev-replace.c": [
          "File: fs/btrfs/dev-replace.c -> fs/btrfs/dev-replace.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "111:   break;",
          "112:  case BTRFS_IOCTL_DEV_REPLACE_STATE_STARTED:",
          "113:  case BTRFS_IOCTL_DEV_REPLACE_STATE_SUSPENDED:",
          "117:        BTRFS_DEV_REPLACE_DEVID,",
          "118:        NULL, NULL);",
          "",
          "[Removed Lines]",
          "114:   dev_replace->srcdev = btrfs_find_device(fs_info, src_devid,",
          "115:        NULL, NULL);",
          "116:   dev_replace->tgtdev = btrfs_find_device(fs_info,",
          "",
          "[Added Lines]",
          "114:   dev_replace->srcdev = btrfs_find_device(fs_info->fs_devices,",
          "115:        src_devid, NULL, NULL);",
          "116:   dev_replace->tgtdev = btrfs_find_device(fs_info->fs_devices,",
          "",
          "---------------"
        ],
        "fs/btrfs/ioctl.c||fs/btrfs/ioctl.c": [
          "File: fs/btrfs/ioctl.c -> fs/btrfs/ioctl.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1642:   btrfs_info(fs_info, \"resizing devid %llu\", devid);",
          "1643:  }",
          "1646:  if (!device) {",
          "1647:   btrfs_info(fs_info, \"resizer unable to find device %llu\",",
          "1648:       devid);",
          "",
          "[Removed Lines]",
          "1645:  device = btrfs_find_device(fs_info, devid, NULL, NULL);",
          "",
          "[Added Lines]",
          "1645:  device = btrfs_find_device(fs_info->fs_devices, devid, NULL, NULL);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3178:   s_uuid = di_args->uuid;",
          "3180:  rcu_read_lock();",
          "3183:  if (!dev) {",
          "3184:   ret = -ENODEV;",
          "",
          "[Removed Lines]",
          "3181:  dev = btrfs_find_device(fs_info, di_args->devid, s_uuid, NULL);",
          "",
          "[Added Lines]",
          "3181:  dev = btrfs_find_device(fs_info->fs_devices, di_args->devid, s_uuid,",
          "3182:     NULL);",
          "",
          "---------------"
        ],
        "fs/btrfs/scrub.c||fs/btrfs/scrub.c": [
          "File: fs/btrfs/scrub.c -> fs/btrfs/scrub.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3835:   return PTR_ERR(sctx);",
          "3837:  mutex_lock(&fs_info->fs_devices->device_list_mutex);",
          "3839:  if (!dev || (test_bit(BTRFS_DEV_STATE_MISSING, &dev->dev_state) &&",
          "3840:        !is_dev_replace)) {",
          "3841:   mutex_unlock(&fs_info->fs_devices->device_list_mutex);",
          "",
          "[Removed Lines]",
          "3838:  dev = btrfs_find_device(fs_info, devid, NULL, NULL);",
          "",
          "[Added Lines]",
          "3838:  dev = btrfs_find_device(fs_info->fs_devices, devid, NULL, NULL);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4012:  struct scrub_ctx *sctx = NULL;",
          "4014:  mutex_lock(&fs_info->fs_devices->device_list_mutex);",
          "4016:  if (dev)",
          "4017:   sctx = dev->scrub_ctx;",
          "4018:  if (sctx)",
          "",
          "[Removed Lines]",
          "4015:  dev = btrfs_find_device(fs_info, devid, NULL, NULL);",
          "",
          "[Added Lines]",
          "4015:  dev = btrfs_find_device(fs_info->fs_devices, devid, NULL, NULL);",
          "",
          "---------------"
        ],
        "fs/btrfs/volumes.c||fs/btrfs/volumes.c": [
          "File: fs/btrfs/volumes.c -> fs/btrfs/volumes.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2385:  devid = btrfs_stack_device_id(&disk_super->dev_item);",
          "2386:  dev_uuid = disk_super->dev_item.uuid;",
          "2387:  if (btrfs_fs_incompat(fs_info, METADATA_UUID))",
          "2390:  else",
          "2394:  brelse(bh);",
          "2395:  if (!device)",
          "",
          "[Removed Lines]",
          "2388:   device = btrfs_find_device(fs_info, devid, dev_uuid,",
          "2389:     disk_super->metadata_uuid);",
          "2391:   device = btrfs_find_device(fs_info, devid,",
          "2392:     dev_uuid, disk_super->fsid);",
          "",
          "[Added Lines]",
          "2388:   device = btrfs_find_device(fs_info->fs_devices, devid, dev_uuid,",
          "2389:         disk_super->metadata_uuid);",
          "2391:   device = btrfs_find_device(fs_info->fs_devices, devid, dev_uuid,",
          "2392:         disk_super->fsid);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2408:  struct btrfs_device *device;",
          "2410:  if (devid) {",
          "2412:   if (!device)",
          "2413:    return ERR_PTR(-ENOENT);",
          "2414:   return device;",
          "",
          "[Removed Lines]",
          "2411:   device = btrfs_find_device(fs_info, devid, NULL, NULL);",
          "",
          "[Added Lines]",
          "2411:   device = btrfs_find_device(fs_info->fs_devices, devid, NULL,",
          "2412:         NULL);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2550:        BTRFS_UUID_SIZE);",
          "2551:   read_extent_buffer(leaf, fs_uuid, btrfs_device_fsid(dev_item),",
          "2552:        BTRFS_FSID_SIZE);",
          "2556:   if (device->fs_devices->seeding) {",
          "",
          "[Removed Lines]",
          "2553:   device = btrfs_find_device(fs_info, devid, dev_uuid, fs_uuid);",
          "",
          "[Added Lines]",
          "2554:   device = btrfs_find_device(fs_info->fs_devices, devid, dev_uuid,",
          "2555:         fs_uuid);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "6603:  return BLK_STS_OK;",
          "6604: }",
          "6608: {",
          "6609:  struct btrfs_device *device;",
          "6614:   if (!fsid ||",
          "6617:    if (device)",
          "6618:     return device;",
          "6619:   }",
          "6621:  }",
          "6622:  return NULL;",
          "6623: }",
          "",
          "[Removed Lines]",
          "6606: struct btrfs_device *btrfs_find_device(struct btrfs_fs_info *fs_info, u64 devid,",
          "6607:            u8 *uuid, u8 *fsid)",
          "6610:  struct btrfs_fs_devices *cur_devices;",
          "6612:  cur_devices = fs_info->fs_devices;",
          "6613:  while (cur_devices) {",
          "6615:       !memcmp(cur_devices->metadata_uuid, fsid, BTRFS_FSID_SIZE)) {",
          "6616:    device = find_device(cur_devices, devid, uuid);",
          "6620:   cur_devices = cur_devices->seed;",
          "",
          "[Added Lines]",
          "6608: struct btrfs_device *btrfs_find_device(struct btrfs_fs_devices *fs_devices,",
          "6609:            u64 devid, u8 *uuid, u8 *fsid)",
          "6613:  while (fs_devices) {",
          "6615:       !memcmp(fs_devices->metadata_uuid, fsid, BTRFS_FSID_SIZE)) {",
          "6616:    device = find_device(fs_devices, devid, uuid);",
          "6620:   fs_devices = fs_devices->seed;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "6862:   read_extent_buffer(leaf, uuid, (unsigned long)",
          "6863:        btrfs_stripe_dev_uuid_nr(chunk, i),",
          "6864:        BTRFS_UUID_SIZE);",
          "6867:   if (!map->stripes[i].dev &&",
          "6868:       !btrfs_test_opt(fs_info, DEGRADED)) {",
          "6869:    free_extent_map(em);",
          "",
          "[Removed Lines]",
          "6865:   map->stripes[i].dev = btrfs_find_device(fs_info, devid,",
          "6866:        uuid, NULL);",
          "",
          "[Added Lines]",
          "6865:   map->stripes[i].dev = btrfs_find_device(fs_info->fs_devices,",
          "6866:        devid, uuid, NULL);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "7002:    return PTR_ERR(fs_devices);",
          "7003:  }",
          "7006:  if (!device) {",
          "7007:   if (!btrfs_test_opt(fs_info, DEGRADED)) {",
          "7008:    btrfs_report_missing_device(fs_info, devid,",
          "",
          "[Removed Lines]",
          "7005:  device = btrfs_find_device(fs_info, devid, dev_uuid, fs_uuid);",
          "",
          "[Added Lines]",
          "7005:  device = btrfs_find_device(fs_info->fs_devices, devid, dev_uuid,",
          "7006:        fs_uuid);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "7592:  int i;",
          "7594:  mutex_lock(&fs_devices->device_list_mutex);",
          "7596:  mutex_unlock(&fs_devices->device_list_mutex);",
          "7598:  if (!dev) {",
          "",
          "[Removed Lines]",
          "7595:  dev = btrfs_find_device(fs_info, stats->devid, NULL, NULL);",
          "",
          "[Added Lines]",
          "7596:  dev = btrfs_find_device(fs_info->fs_devices, stats->devid, NULL, NULL);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "7806:  }",
          "7810:  if (!dev) {",
          "7811:   btrfs_err(fs_info, \"failed to find devid %llu\", devid);",
          "7812:   ret = -EUCLEAN;",
          "",
          "[Removed Lines]",
          "7809:  dev = btrfs_find_device(fs_info, devid, NULL, NULL);",
          "",
          "[Added Lines]",
          "7810:  dev = btrfs_find_device(fs_info->fs_devices, devid, NULL, NULL);",
          "",
          "---------------"
        ],
        "fs/btrfs/volumes.h||fs/btrfs/volumes.h": [
          "File: fs/btrfs/volumes.h -> fs/btrfs/volumes.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "433: int btrfs_num_copies(struct btrfs_fs_info *fs_info, u64 logical, u64 len);",
          "434: int btrfs_grow_device(struct btrfs_trans_handle *trans,",
          "435:         struct btrfs_device *device, u64 new_size);",
          "438: int btrfs_shrink_device(struct btrfs_device *device, u64 new_size);",
          "439: int btrfs_init_new_device(struct btrfs_fs_info *fs_info, const char *path);",
          "440: int btrfs_balance(struct btrfs_fs_info *fs_info,",
          "",
          "[Removed Lines]",
          "436: struct btrfs_device *btrfs_find_device(struct btrfs_fs_info *fs_info, u64 devid,",
          "437:            u8 *uuid, u8 *fsid);",
          "",
          "[Added Lines]",
          "436: struct btrfs_device *btrfs_find_device(struct btrfs_fs_devices *fs_devices,",
          "437:            u64 devid, u8 *uuid, u8 *fsid);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1b3922a8bc74231f9a767d1be6d9a061a4d4eeab",
      "candidate_info": {
        "commit_hash": "1b3922a8bc74231f9a767d1be6d9a061a4d4eeab",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/1b3922a8bc74231f9a767d1be6d9a061a4d4eeab",
        "files": [
          "fs/btrfs/volumes.c"
        ],
        "message": "btrfs: Use real device structure to verify dev extent\n\n[BUG]\nLinux v5.0-rc1 will fail fstests/btrfs/163 with the following kernel\nmessage:\n\n  BTRFS error (device dm-6): dev extent devid 1 physical offset 13631488 len 8388608 is beyond device boundary 0\n  BTRFS error (device dm-6): failed to verify dev extents against chunks: -117\n  BTRFS error (device dm-6): open_ctree failed\n\n[CAUSE]\nCommit cf90d884b347 (\"btrfs: Introduce mount time chunk <-> dev extent\nmapping check\") introduced strict check on dev extents.\n\nWe use btrfs_find_device() with dev uuid and fs uuid set to NULL, and\nonly dependent on @devid to find the real device.\n\nFor seed devices, we call clone_fs_devices() in open_seed_devices() to\nallow us search seed devices directly.\n\nHowever clone_fs_devices() just populates devices with devid and dev\nuuid, without populating other essential members, like disk_total_bytes.\n\nThis makes any device returned by btrfs_find_device(fs_info, devid,\nNULL, NULL) is just a dummy, with 0 disk_total_bytes, and any dev\nextents on the seed device will not pass the device boundary check.\n\n[FIX]\nThis patch will try to verify the device returned by btrfs_find_device()\nand if it's a dummy then re-search in seed devices.\n\nFixes: cf90d884b347 (\"btrfs: Introduce mount time chunk <-> dev extent mapping check\")\nCC: stable@vger.kernel.org # 4.19+\nReported-by: Filipe Manana <fdmanana@suse.com>\nSigned-off-by: Qu Wenruo <wqu@suse.com>\nSigned-off-by: David Sterba <dsterba@suse.com>",
        "before_after_code_files": [
          "fs/btrfs/volumes.c||fs/btrfs/volumes.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "fs/btrfs/volumes.c||fs/btrfs/volumes.c"
          ],
          "candidate": [
            "fs/btrfs/volumes.c||fs/btrfs/volumes.c"
          ]
        }
      },
      "candidate_diff": {
        "fs/btrfs/volumes.c||fs/btrfs/volumes.c": [
          "File: fs/btrfs/volumes.c -> fs/btrfs/volumes.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "7825:   ret = -EUCLEAN;",
          "7826:   goto out;",
          "7827:  }",
          "7828:  if (physical_offset + physical_len > dev->disk_total_bytes) {",
          "7829:   btrfs_err(fs_info,",
          "7830: \"dev extent devid %llu physical offset %llu len %llu is beyond device boundary %llu\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7830:  if (dev->disk_total_bytes == 0) {",
          "7831:   dev = find_device(fs_info->fs_devices->seed, devid, NULL);",
          "7832:   if (!dev) {",
          "7833:    btrfs_err(fs_info, \"failed to find seed devid %llu\",",
          "7834:       devid);",
          "7835:    ret = -EUCLEAN;",
          "7836:    goto out;",
          "7837:   }",
          "7838:  }",
          "",
          "---------------"
        ]
      }
    }
  ]
}