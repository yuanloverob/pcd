{
  "cve_id": "CVE-2017-3730",
  "cve_desc": "In OpenSSL 1.1.0 before 1.1.0d, if a malicious server supplies bad parameters for a DHE or ECDHE key exchange then this can result in the client attempting to dereference a NULL pointer leading to a client crash. This could be exploited in a Denial of Service attack.",
  "repo": "openssl/openssl",
  "patch_hash": "efbe126e3ebb9123ac9d058aa2bb044261342aaa",
  "patch_info": {
    "commit_hash": "efbe126e3ebb9123ac9d058aa2bb044261342aaa",
    "repo": "openssl/openssl",
    "commit_url": "https://github.com/openssl/openssl/commit/efbe126e3ebb9123ac9d058aa2bb044261342aaa",
    "files": [
      "ssl/statem/statem_clnt.c"
    ],
    "message": "Fix missing NULL checks in CKE processing\n\nReviewed-by: Rich Salz <rsalz@openssl.org>",
    "before_after_code_files": [
      "ssl/statem/statem_clnt.c||ssl/statem/statem_clnt.c"
    ]
  },
  "patch_diff": {
    "ssl/statem/statem_clnt.c||ssl/statem/statem_clnt.c": [
      "File: ssl/statem/statem_clnt.c -> ssl/statem/statem_clnt.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2258:         return 0;",
      "2259:     }",
      "2260:     ckey = ssl_generate_pkey(skey);",
      "2261:     dh_clnt = EVP_PKEY_get0_DH(ckey);",
      "2263:     if (dh_clnt == NULL || ssl_derive(s, ckey, skey) == 0) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2261:     if (ckey == NULL) {",
      "2262:         SSLerr(SSL_F_TLS_CONSTRUCT_CKE_DHE, ERR_R_INTERNAL_ERROR);",
      "2263:         return 0;",
      "2264:     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "2296:     }",
      "2298:     ckey = ssl_generate_pkey(skey);",
      "2300:     if (ssl_derive(s, ckey, skey) == 0) {",
      "2301:         SSLerr(SSL_F_TLS_CONSTRUCT_CKE_ECDHE, ERR_R_EVP_LIB);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2304:     if (ckey == NULL) {",
      "2305:         SSLerr(SSL_F_TLS_CONSTRUCT_CKE_ECDHE, ERR_R_INTERNAL_ERROR);",
      "2306:         goto err;",
      "2307:     }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "0f251d20a5c40cb9b6d30dfec005bb4ead3d5b0f",
      "candidate_info": {
        "commit_hash": "0f251d20a5c40cb9b6d30dfec005bb4ead3d5b0f",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/0f251d20a5c40cb9b6d30dfec005bb4ead3d5b0f",
        "files": [
          "crypto/chacha/asm/chacha-x86.pl"
        ],
        "message": "chacha/asm/chacha-x86.pl: improve [backward] portability.\n\nIn order to minimize dependency on assembler version a number of\npost-SSE2 instructions are encoded manually. But in order to simplify\nthe procedure only register operands are considered. Non-register\noperands are passed down to assembler. Module in question uses pshufb\nwith memory operands, and old [GNU] assembler can't handle it.\nFortunately in this case it's possible skip just the problematic\nsegment without skipping SSSE3 support altogether.\n\nReviewed-by: Richard Levitte <levitte@openssl.org>\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(cherry picked from commit d89773d659129368a341df746476da445d47ad31)",
        "before_after_code_files": [
          "crypto/chachasm/chacha-x86.pl||crypto/chacha/asm/chacha-x86.pl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/chachasm/chacha-x86.pl||crypto/chacha/asm/chacha-x86.pl": [
          "File: crypto/chachasm/chacha-x86.pl -> crypto/chacha/asm/chacha-x86.pl",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "53:   ($gasver=$1)>=2.19); # first version supporting AVX",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "468: if (defined($gasver) && $gasver>=2.17) {  # even though we encode",
          "469:        # pshufb manually, we",
          "470:        # handle only register",
          "471:        # operands, while this",
          "472:        # segment uses memory",
          "473:        # operand...",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "655: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a7511d72a32e13ab007f2f02fa1433965cbfe6ed",
      "candidate_info": {
        "commit_hash": "a7511d72a32e13ab007f2f02fa1433965cbfe6ed",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/a7511d72a32e13ab007f2f02fa1433965cbfe6ed",
        "files": [
          "test/bntest.c"
        ],
        "message": "Add a basic test for BN_bn2dec.\n\nThis would have caught 099e2968ed3c7d256cda048995626664082b1b30. This is\na port of the test added in\nhttps://boringssl.googlesource.com/boringssl/+/7c040756178e14a4d181b6d93abb3827c93189c4\n\nReviewed-by: Emilia K\u00e4sper <emilia@openssl.org>\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/1496)\n(cherry picked from commit 8ff70f3326983360c6f6306a1cd2238ef92d1f26)",
        "before_after_code_files": [
          "test/bntest.c||test/bntest.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/bntest.c||test/bntest.c": [
          "File: test/bntest.c -> test/bntest.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "83: int test_kron(BIO *bp, BN_CTX *ctx);",
          "84: int test_sqrt(BIO *bp, BN_CTX *ctx);",
          "85: int test_small_prime(BIO *bp, BN_CTX *ctx);",
          "86: int rand_neg(void);",
          "87: static int results = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "86: int test_bn2dec(BIO *bp);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "260:         goto err;",
          "261:     (void)BIO_flush(out);",
          "263: #ifndef OPENSSL_NO_EC2M",
          "264:     message(out, \"BN_GF2m_add\");",
          "265:     if (!test_gf2m_add(out))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "264:     message(out, \"BN_bn2dec\");",
          "265:     if (!test_bn2dec(out))",
          "266:         goto err;",
          "267:     (void)BIO_flush(out);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1839:     return ret;",
          "1840: }",
          "1842: int test_lshift(BIO *bp, BN_CTX *ctx, BIGNUM *a_)",
          "1843: {",
          "1844:     BIGNUM *a, *b, *c, *d;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1848: int test_bn2dec(BIO *bp)",
          "1849: {",
          "1850:     static const char *bn2dec_tests[] = {",
          "1851:         \"0\",",
          "1852:         \"1\",",
          "1853:         \"-1\",",
          "1854:         \"100\",",
          "1855:         \"-100\",",
          "1856:         \"123456789012345678901234567890\",",
          "1857:         \"-123456789012345678901234567890\",",
          "1858:         \"123456789012345678901234567890123456789012345678901234567890\",",
          "1859:         \"-123456789012345678901234567890123456789012345678901234567890\",",
          "1860:     };",
          "1861:     int ret = 0;",
          "1862:     size_t i;",
          "1863:     BIGNUM *bn = NULL;",
          "1864:     char *dec = NULL;",
          "1866:     for (i = 0; i < OSSL_NELEM(bn2dec_tests); i++) {",
          "1867:         if (!BN_dec2bn(&bn, bn2dec_tests[i]))",
          "1868:             goto err;",
          "1870:         dec = BN_bn2dec(bn);",
          "1871:         if (dec == NULL) {",
          "1872:             fprintf(stderr, \"BN_bn2dec failed on %s.\\n\", bn2dec_tests[i]);",
          "1873:             goto err;",
          "1874:         }",
          "1876:         if (strcmp(dec, bn2dec_tests[i]) != 0) {",
          "1877:             fprintf(stderr, \"BN_bn2dec gave %s, wanted %s.\\n\", dec,",
          "1878:                     bn2dec_tests[i]);",
          "1879:             goto err;",
          "1880:         }",
          "1882:         OPENSSL_free(dec);",
          "1883:         dec = NULL;",
          "1884:     }",
          "1886:     ret = 1;",
          "1888: err:",
          "1889:     BN_free(bn);",
          "1890:     OPENSSL_free(dec);",
          "1891:     return ret;",
          "1892: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cbc8a839959418d8a2c2e3ec6bdf394852c9501e",
      "candidate_info": {
        "commit_hash": "cbc8a839959418d8a2c2e3ec6bdf394852c9501e",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/cbc8a839959418d8a2c2e3ec6bdf394852c9501e",
        "files": [
          "crypto/evp/m_md5_sha1.c",
          "crypto/evp/m_sha1.c"
        ],
        "message": "Fix ctrl operation for SHA1/MD5SHA1.\n\nThis makes S/MIME and CMS signing in MIME format for SHA1 work again.\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(cherry picked from commit a5abd438f85737ffa56320b67c5ef5525fc495c3)",
        "before_after_code_files": [
          "crypto/evp/m_md5_sha1.c||crypto/evp/m_md5_sha1.c",
          "crypto/evp/m_sha1.c||crypto/evp/m_sha1.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/evp/m_md5_sha1.c||crypto/evp/m_md5_sha1.c": [
          "File: crypto/evp/m_md5_sha1.c -> crypto/evp/m_md5_sha1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "52:     unsigned char padtmp[48];",
          "53:     unsigned char md5tmp[MD5_DIGEST_LENGTH];",
          "54:     unsigned char sha1tmp[SHA_DIGEST_LENGTH];",
          "57:     if (cmd != EVP_CTRL_SSL3_MASTER_SECRET)",
          "58:         return 0;",
          "61:     if (mslen != 48)",
          "62:         return 0;",
          "",
          "[Removed Lines]",
          "55:     struct md5_sha1_ctx *mctx = EVP_MD_CTX_md_data(ctx);",
          "",
          "[Added Lines]",
          "55:     struct md5_sha1_ctx *mctx;",
          "58:         return -2;",
          "60:     if (ctx == NULL)",
          "63:     mctx = EVP_MD_CTX_md_data(ctx);",
          "",
          "---------------"
        ],
        "crypto/evp/m_sha1.c||crypto/evp/m_sha1.c": [
          "File: crypto/evp/m_sha1.c -> crypto/evp/m_sha1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "36:     unsigned char padtmp[40];",
          "37:     unsigned char sha1tmp[SHA_DIGEST_LENGTH];",
          "41:     if (cmd != EVP_CTRL_SSL3_MASTER_SECRET)",
          "42:         return 0;",
          "45:     if (mslen != 48)",
          "46:         return 0;",
          "",
          "[Removed Lines]",
          "39:     SHA_CTX *sha1 = EVP_MD_CTX_md_data(ctx);",
          "",
          "[Added Lines]",
          "39:     SHA_CTX *sha1;",
          "42:         return -2;",
          "44:     if (ctx == NULL)",
          "47:     sha1 = EVP_MD_CTX_md_data(ctx);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8c9365a690e2d5f0c49f3d9a3d41973ed9dcedcc",
      "candidate_info": {
        "commit_hash": "8c9365a690e2d5f0c49f3d9a3d41973ed9dcedcc",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/8c9365a690e2d5f0c49f3d9a3d41973ed9dcedcc",
        "files": [
          "ssl/t1_lib.c"
        ],
        "message": "Fix length check writing status request extension\n\nThe status request extension did not correctly check its length, meaning\nthat writing the extension could go 2 bytes beyond the buffer size. In\npractice this makes little difference because, due to logic in buffer.c the\nbuffer is actually over allocated by approximately 5k!\n\nIssue reported by Guido Vranken.\n\nReviewed-by: Rich Salz <rsalz@openssl.org>",
        "before_after_code_files": [
          "ssl/t1_lib.c||ssl/t1_lib.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ssl/t1_lib.c||ssl/t1_lib.c": [
          "File: ssl/t1_lib.c -> ssl/t1_lib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1261:         } else",
          "1262:             extlen = 0;",
          "1265:             return NULL;",
          "1266:         s2n(TLSEXT_TYPE_status_request, ret);",
          "1267:         if (extlen + idlen > 0xFFF0)",
          "",
          "[Removed Lines]",
          "1264:         if ((long)(limit - ret - 7 - extlen - idlen) < 0)",
          "",
          "[Added Lines]",
          "1271:         if ((long)(limit - ret - 9 - extlen - idlen) < 0)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "83b90e40d312ef9f189990293e253b3c1e7e92a1",
      "candidate_info": {
        "commit_hash": "83b90e40d312ef9f189990293e253b3c1e7e92a1",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/83b90e40d312ef9f189990293e253b3c1e7e92a1",
        "files": [
          "crypto/dsa/dsa_err.c",
          "crypto/dsa/dsa_gen.c",
          "include/openssl/dsa.h"
        ],
        "message": "dsa/dsa_gen: add error message for seed_len < 0\n\nprio openssl 1.1.0 seed_len < q was accepted and the seed argument was\nthen ignored. Now DSA_generate_parameters_ex() returns an error in such\na case but no error string.\n\nSigned-off-by: Sebastian Andrzej Siewior <sebastian@breakpoint.cc>\n\nReviewed-by: Matt Caswell <matt@openssl.org>\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/1657)\n(cherry picked from commit af5474126546b558b0e6f8be4bec4b70977e24b7)",
        "before_after_code_files": [
          "crypto/dsdsa_err.c||crypto/dsa/dsa_err.c",
          "crypto/dsdsa_gen.c||crypto/dsa/dsa_gen.c",
          "include/openssl/dsa.h||include/openssl/dsa.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/dsdsa_err.c||crypto/dsa/dsa_err.c": [
          "File: crypto/dsdsa_err.c -> crypto/dsa/dsa_err.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24:     {ERR_FUNC(DSA_F_DSA_BUILTIN_PARAMGEN), \"dsa_builtin_paramgen\"},",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "59:     {ERR_REASON(DSA_R_SEED_LEN_SMALL),",
          "60:      \"seed_len is less than the length of q\"},",
          "",
          "---------------"
        ],
        "crypto/dsdsa_gen.c||crypto/dsa/dsa_gen.c": [
          "File: crypto/dsdsa_gen.c -> crypto/dsa/dsa_gen.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "77:         if (seed_len < (size_t)qsize) {",
          "78:             DSAerr(DSA_F_DSA_BUILTIN_PARAMGEN, DSA_R_SEED_LEN_SMALL);",
          "80:         }",
          "",
          "---------------"
        ],
        "include/openssl/dsa.h||include/openssl/dsa.h": [
          "File: include/openssl/dsa.h -> include/openssl/dsa.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "274: # define DSA_R_NO_PARAMETERS_SET                          107",
          "275: # define DSA_R_PARAMETER_ENCODING_ERROR                   105",
          "276: # define DSA_R_Q_NOT_PRIME                                113",
          "278: #  ifdef  __cplusplus",
          "279: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "277: # define DSA_R_SEED_LEN_SMALL                             110",
          "",
          "---------------"
        ]
      }
    }
  ]
}