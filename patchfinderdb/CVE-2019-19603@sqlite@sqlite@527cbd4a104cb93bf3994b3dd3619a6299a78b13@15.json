{
  "cve_id": "CVE-2019-19603",
  "cve_desc": "SQLite 3.30.1 mishandles certain SELECT statements with a nonexistent VIEW, leading to an application crash.",
  "repo": "sqlite/sqlite",
  "patch_hash": "527cbd4a104cb93bf3994b3dd3619a6299a78b13",
  "patch_info": {
    "commit_hash": "527cbd4a104cb93bf3994b3dd3619a6299a78b13",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/527cbd4a104cb93bf3994b3dd3619a6299a78b13",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/build.c",
      "src/sqliteInt.h",
      "test/altertab.test"
    ],
    "message": "Do not allow CREATE TABLE or CREATE VIEW of an object with a name that looks like a shadow table name.\n\nFossilOrigin-Name: 6aef58b629d89955f85f65191ba2be67b2adfac4f0327fe9a7141cb2705dbc00",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/build.c||src/build.c",
      "src/sqliteInt.h||src/sqliteInt.h",
      "test/altertab.test||test/altertab.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 8ad34d36a141fa8f5d9bd784dfeb892c983897a6dc6b867607cc668508acf944",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/build.c||src/build.c": [
      "File: src/build.c -> src/build.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "856:       }",
      "857:     }",
      "858:   }else{",
      "861:     ){",
      "862:       sqlite3ErrorMsg(pParse, \"object name reserved for internal use: %s\",",
      "863:                       zName);",
      "864:       return SQLITE_ERROR;",
      "865:     }",
      "866:   }",
      "867:   return SQLITE_OK;",
      "868: }",
      "",
      "[Removed Lines]",
      "859:     if( pParse->nested==0",
      "860:      && 0==sqlite3StrNICmp(zName, \"sqlite_\", 7)",
      "",
      "[Added Lines]",
      "859:     if( (pParse->nested==0 && 0==sqlite3StrNICmp(zName, \"sqlite_\", 7))",
      "860:      || (sqlite3ReadOnlyShadowTables(db) && sqlite3ShadowTableName(db, zName))",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "2132: static int isShadowTableName(sqlite3 *db, char *zName){",
      "",
      "[Added Lines]",
      "2133: int sqlite3ShadowTableName(sqlite3 *db, const char *zName){",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "2147:   if( pMod->pModule->xShadowName==0 ) return 0;",
      "2148:   return pMod->pModule->xShadowName(zTail+1);",
      "2149: }",
      "",
      "[Removed Lines]",
      "2150: #else",
      "2151: # define isShadowTableName(x,y) 0",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "2190:   p = pParse->pNewTable;",
      "2191:   if( p==0 ) return;",
      "2194:     p->tabFlags |= TF_Shadow;",
      "2195:   }",
      "",
      "[Removed Lines]",
      "2193:   if( pSelect==0 && isShadowTableName(db, p->zName) ){",
      "",
      "[Added Lines]",
      "2192:   if( pSelect==0 && sqlite3ShadowTableName(db, p->zName) ){",
      "",
      "---------------"
    ],
    "src/sqliteInt.h||src/sqliteInt.h": [
      "File: src/sqliteInt.h -> src/sqliteInt.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "4548: #  define sqlite3VtabInSync(db) ((db)->nVTrans>0 && (db)->aVTrans==0)",
      "4549: #endif",
      "4550: int sqlite3ReadOnlyShadowTables(sqlite3 *db);",
      "4551: int sqlite3VtabEponymousTableInit(Parse*,Module*);",
      "4552: void sqlite3VtabEponymousTableClear(sqlite3*,Module*);",
      "4553: void sqlite3VtabMakeWritable(Parse*,Table*);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4551: #ifndef SQLITE_OMIT_VIRTUALTABLE",
      "4552:   int sqlite3ShadowTableName(sqlite3 *db, const char *zName);",
      "4553: #else",
      "4554: # define sqlite3ShadowTableName(A,B) 0",
      "4555: #endif",
      "",
      "---------------"
    ],
    "test/altertab.test||test/altertab.test": [
      "File: test/altertab.test -> test/altertab.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "547:   } {1 {table y1_segments may not be modified}}",
      "549:   do_catchsql_test 16.20 {",
      "554:     DROP TABLE y1_segments;",
      "555:   } {1 {table y1_segments may not be dropped}}",
      "557:   do_execsql_test 16.30 {",
      "558:     ALTER TABLE y1 RENAME TO z1;",
      "559:   }",
      "",
      "[Removed Lines]",
      "550:     ALTER TABLE y1_segments RENAME TO abc;",
      "551:   } {1 {table y1_segments may not be altered}}",
      "553:   do_catchsql_test 16.21 {",
      "",
      "[Added Lines]",
      "553:   do_catchsql_test 16.20 {",
      "554:     ALTER TABLE y1_segments RENAME TO abc;",
      "555:   } {1 {table y1_segments may not be altered}}",
      "556:   sqlite3_db_config db DEFENSIVE 0",
      "557:   do_catchsql_test 16.22 {",
      "558:     ALTER TABLE y1_segments RENAME TO abc;",
      "559:   } {0 {}}",
      "560:   sqlite3_db_config db DEFENSIVE 1",
      "561:   do_catchsql_test 16.23 {",
      "562:     CREATE TABLE y1_segments AS SELECT * FROM abc;",
      "563:   } {1 {object name reserved for internal use: y1_segments}}",
      "564:   do_catchsql_test 16.24 {",
      "565:     CREATE VIEW y1_segments AS SELECT * FROM abc;",
      "566:   } {1 {object name reserved for internal use: y1_segments}}",
      "567:   sqlite3_db_config db DEFENSIVE 0",
      "568:   do_catchsql_test 16.25 {",
      "569:     ALTER TABLE abc RENAME TO y1_segments;",
      "570:   } {0 {}}",
      "571:   sqlite3_db_config db DEFENSIVE 1",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b2e61bc66b88cc82cc67830a77ee512e6b4b18fa",
      "candidate_info": {
        "commit_hash": "b2e61bc66b88cc82cc67830a77ee512e6b4b18fa",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/b2e61bc66b88cc82cc67830a77ee512e6b4b18fa",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbe.c"
        ],
        "message": "Reinitialize debugging information on registers of a trigger prior to each invocation of the trigger.  This prevents false-positives from the sqlite3VdbeMemAboutToChange() test logic.\n\nFossilOrigin-Name: 98b3b97573ccb3d986d1552f97f96e15088a598945923adcac77010c1e8b7fe4",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbe.c||src/vdbe.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 3ff220ad378d547538b4501e6b2201e835a2c66891e5e40856db377c101a50e5",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "6171:   p->nOp = pProgram->nOp;",
          "6172: #ifdef SQLITE_ENABLE_STMT_SCANSTATUS",
          "6173:   p->anExec = 0;",
          "6174: #endif",
          "6175:   pOp = &aOp[-1];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6174: #endif",
          "6175: #ifdef SQLITE_DEBUG",
          "6178:   {",
          "6179:     int i;",
          "6180:     for(i=0; i<p->nMem; i++){",
          "6183:     }",
          "6184:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f202c6cdcfdc96fb2959133903d3ed5026b733d2",
      "candidate_info": {
        "commit_hash": "f202c6cdcfdc96fb2959133903d3ed5026b733d2",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/f202c6cdcfdc96fb2959133903d3ed5026b733d2",
        "files": [
          "manifest",
          "manifest.uuid",
          "tool/dbtotxt.c"
        ],
        "message": "Relax the minimum size database file constraint on the dbtotxt utility program.\n\nFossilOrigin-Name: 97e723d746eeb2159f5bf1701532271ac6a4620879c82d496f4499c178b64479",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "tool/dbtotxt.c||tool/dbtotxt.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 35f04235c477501390acea126d07a730d81d03cdf7abcd82d861e397b3f75b0f",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tool/dbtotxt.c||tool/dbtotxt.c": [
          "File: tool/dbtotxt.c -> tool/dbtotxt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "93:   fseek(in, 0, SEEK_END);",
          "94:   szFile = ftell(in);",
          "95:   rewind(in);",
          "98:     exit(1);",
          "99:   }",
          "100:   if( fread(aHdr, 100, 1, in)!=1 ){",
          "",
          "[Removed Lines]",
          "96:   if( szFile<512 ){",
          "97:     fprintf(stderr, \"File too short. Minimum size is 512 bytes.\\n\");",
          "",
          "[Added Lines]",
          "96:   if( szFile<100 ){",
          "97:     fprintf(stderr, \"File too short. Minimum size is 100 bytes.\\n\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e5989723ba9b6510728d8a50f35347dc8aa4ee6b",
      "candidate_info": {
        "commit_hash": "e5989723ba9b6510728d8a50f35347dc8aa4ee6b",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e5989723ba9b6510728d8a50f35347dc8aa4ee6b",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/attach.c",
          "src/main.c",
          "src/sqliteInt.h"
        ],
        "message": "Honor key query parameters for SEE on the URI filename for ATTACH and VACUUM INTO.\n\nFossilOrigin-Name: 2e01096b8933a2315e3dffcd7d0de84c744c1b4be1d909388c61f0fd636ddb99",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/attach.c||src/attach.c",
          "src/main.c||src/main.c",
          "src/sqliteInt.h||src/sqliteInt.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/sqliteInt.h||src/sqliteInt.h"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/sqliteInt.h||src/sqliteInt.h"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 69b0b2ee536fda8975f60643f7f1891db4649958aca476822ea2a632ce731992",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/attach.c||src/attach.c": [
          "File: src/attach.c -> src/attach.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "155:     assert( pVfs );",
          "156:     flags |= SQLITE_OPEN_MAIN_DB;",
          "157:     rc = sqlite3BtreeOpen(pVfs, zPath, db, &pNew->pBt, 0, flags);",
          "159:     db->nDb++;",
          "160:   }",
          "161:   db->noSharedCache = 0;",
          "162:   if( rc==SQLITE_CONSTRAINT ){",
          "",
          "[Removed Lines]",
          "158:     sqlite3_free( zPath );",
          "",
          "[Added Lines]",
          "159:     pNew->zDbSName = sqlite3DbStrDup(db, zName);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "184:     sqlite3BtreeLeave(pNew->pBt);",
          "185:   }",
          "186:   pNew->safety_level = SQLITE_DEFAULT_SYNCHRONOUS+1;",
          "188:   if( rc==SQLITE_OK && pNew->zDbSName==0 ){",
          "189:     rc = SQLITE_NOMEM_BKPT;",
          "190:   }",
          "",
          "[Removed Lines]",
          "187:   if( !REOPEN_AS_MEMDB(db) ) pNew->zDbSName = sqlite3DbStrDup(db, zName);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "212:         break;",
          "214:       case SQLITE_NULL:",
          "219:         }",
          "220:         break;",
          "221:     }",
          "222:   }",
          "223: #endif",
          "",
          "[Removed Lines]",
          "216:         sqlite3CodecGetKey(db, 0, (void**)&zKey, &nKey);",
          "217:         if( nKey || sqlite3BtreeGetOptimalReserve(db->aDb[0].pBt)>0 ){",
          "218:           rc = sqlite3CodecAttach(db, db->nDb-1, zKey, nKey);",
          "",
          "[Added Lines]",
          "216:         if( sqlite3CodecQueryParameters(db, zName, zPath)==0 ){",
          "217:           sqlite3CodecGetKey(db, 0, (void**)&zKey, &nKey);",
          "218:           if( nKey || sqlite3BtreeGetOptimalReserve(db->aDb[0].pBt)>0 ){",
          "219:             rc = sqlite3CodecAttach(db, db->nDb-1, zKey, nKey);",
          "220:           }",
          "226:   sqlite3_free( zPath );",
          "",
          "---------------"
        ],
        "src/main.c||src/main.c": [
          "File: src/main.c -> src/main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2942:   return rc;",
          "2943: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2945: #if defined(SQLITE_HAS_CODEC)",
          "2951: int sqlite3CodecQueryParameters(",
          "2955: ){",
          "2956:   const char *zKey;",
          "2957:   if( (zKey = sqlite3_uri_parameter(zUri, \"hexkey\"))!=0 && zKey[0] ){",
          "2958:     u8 iByte;",
          "2959:     int i;",
          "2960:     char zDecoded[40];",
          "2961:     for(i=0, iByte=0; i<sizeof(zDecoded)*2 && sqlite3Isxdigit(zKey[i]); i++){",
          "2962:       iByte = (iByte<<4) + sqlite3HexToInt(zKey[i]);",
          "2963:       if( (i&1)!=0 ) zDecoded[i/2] = iByte;",
          "2964:     }",
          "2965:     sqlite3_key_v2(db, zDb, zDecoded, i/2);",
          "2966:     return 1;",
          "2967:   }else if( (zKey = sqlite3_uri_parameter(zUri, \"key\"))!=0 ){",
          "2968:     sqlite3_key_v2(db, zDb, zKey, sqlite3Strlen30(zKey));",
          "2969:     return 1;",
          "2970:   }else if( (zKey = sqlite3_uri_parameter(zUri, \"textkey\"))!=0 ){",
          "2971:     sqlite3_key_v2(db, zDb, zKey, -1);",
          "2972:     return 1;",
          "2973:   }else{",
          "2974:     return 0;",
          "2975:   }",
          "2976: }",
          "2977: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3287:   }",
          "3288: #endif",
          "3289: #if defined(SQLITE_HAS_CODEC)",
          "3305: #endif",
          "3306:   sqlite3_free(zOpen);",
          "3307:   return rc & 0xff;",
          "3308: }",
          "",
          "[Removed Lines]",
          "3290:   if( rc==SQLITE_OK ){",
          "3291:     const char *zKey;",
          "3292:     if( (zKey = sqlite3_uri_parameter(zOpen, \"hexkey\"))!=0 && zKey[0] ){",
          "3293:       u8 iByte;",
          "3294:       int i;",
          "3295:       char zDecoded[40];",
          "3296:       for(i=0, iByte=0; i<sizeof(zDecoded)*2 && sqlite3Isxdigit(zKey[i]); i++){",
          "3297:         iByte = (iByte<<4) + sqlite3HexToInt(zKey[i]);",
          "3298:         if( (i&1)!=0 ) zDecoded[i/2] = iByte;",
          "3299:       }",
          "3300:       sqlite3_key_v2(db, 0, zDecoded, i/2);",
          "3301:     }else if( (zKey = sqlite3_uri_parameter(zOpen, \"key\"))!=0 ){",
          "3302:       sqlite3_key_v2(db, 0, zKey, sqlite3Strlen30(zKey));",
          "3303:     }",
          "3304:   }",
          "",
          "[Added Lines]",
          "3324:   if( rc==SQLITE_OK ) sqlite3CodecQueryParameters(db, 0, zOpen);",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "3882: void sqlite3EndTable(Parse*,Token*,Token*,u8,Select*);",
          "3883: int sqlite3ParseUri(const char*,const char*,unsigned int*,",
          "3884:                     sqlite3_vfs**,char**,char **);",
          "3885: Btree *sqlite3DbNameToBtree(sqlite3*,const char*);",
          "3887: #ifdef SQLITE_UNTESTABLE",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3885: #ifdef SQLITE_HAS_CODEC",
          "3886:   int sqlite3CodecQueryParameters(sqlite3*,const char*,const char*);",
          "3887: #else",
          "3888: # define sqlite3CodecQueryParameters(A,B,C) 0",
          "3889: #endif",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8a53ce2ff8a1e7e3fe867662568e13680cbb0e5e",
      "candidate_info": {
        "commit_hash": "8a53ce2ff8a1e7e3fe867662568e13680cbb0e5e",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/8a53ce2ff8a1e7e3fe867662568e13680cbb0e5e",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/update.c"
        ],
        "message": "Basic UPDATE functionality working for VIRTUAL tables.\n\nFossilOrigin-Name: c21959d4eb5d742a097a98e1874c0bf132dc962a97a65be1ab22d6ca3cf2b261",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/update.c||src/update.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 7bfe0f679d8951b3e925bdf549efa0f8d6b514eddeaca69cbfddbd9476cfff5f",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/update.c||src/update.c": [
          "File: src/update.c -> src/update.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "308:         }else if( pPk && (pTab->aCol[j].colFlags & COLFLAG_PRIMKEY)!=0 ){",
          "309:           chngPk = 1;",
          "310:         }",
          "311:         aXRef[j] = i;",
          "312:         break;",
          "313:       }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "311: #ifndef SQLITE_OMIT_GENERATED_COLUMNS",
          "312:         else if( pTab->aCol[j].colFlags & (COLFLAG_STORED|COLFLAG_VIRTUAL) ){",
          "313:           sqlite3ErrorMsg(pParse,",
          "314:              \"cannot UPDATE generated column \\\"%s\\\"\",",
          "315:              pTab->aCol[j].zName);",
          "316:           goto update_cleanup;",
          "317:         }",
          "318: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "623:     oldmask |= sqlite3TriggerColmask(pParse,",
          "624:         pTrigger, pChanges, 0, TRIGGER_BEFORE|TRIGGER_AFTER, pTab, onError",
          "625:     );",
          "627:       if( oldmask==0xffffffff",
          "628:        || (i<32 && (oldmask & MASKBIT32(i))!=0)",
          "630:       ){",
          "631:         testcase(  oldmask!=0xffffffff && i==31 );",
          "633:       }else{",
          "635:       }",
          "636:     }",
          "637:     if( chngRowid==0 && pPk==0 ){",
          "",
          "[Removed Lines]",
          "626:     for(i=0; i<pTab->nCol; i++){",
          "629:        || (pTab->aCol[i].colFlags & COLFLAG_PRIMKEY)!=0",
          "632:         sqlite3ExprCodeGetColumnOfTable(pParse, pTab, iDataCur, i, regOld+i);",
          "634:         sqlite3VdbeAddOp2(v, OP_Null, 0, regOld+i);",
          "",
          "[Added Lines]",
          "634:     for(i=0, k=regOld; i<pTab->nCol; i++, k++){",
          "635:       u32 colFlags = pTab->aCol[i].colFlags;",
          "636:       if( colFlags & COLFLAG_VIRTUAL ){",
          "637:         k--;",
          "638:         continue;",
          "639:       }",
          "642:        || (colFlags & COLFLAG_PRIMKEY)!=0",
          "645:         sqlite3ExprCodeGetColumnOfTable(pParse, pTab, iDataCur, i, k);",
          "647:         sqlite3VdbeAddOp2(v, OP_Null, 0, k);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "655:   newmask = sqlite3TriggerColmask(",
          "656:       pParse, pTrigger, pChanges, 1, TRIGGER_BEFORE, pTab, onError",
          "657:   );",
          "659:     if( i==pTab->iPKey ){",
          "661:     }else{",
          "662:       j = aXRef[i];",
          "663:       if( j>=0 ){",
          "665:       }else if( 0==(tmask&TRIGGER_BEFORE) || i>31 || (newmask & MASKBIT32(i)) ){",
          "",
          "[Removed Lines]",
          "658:   for(i=0; i<pTab->nCol; i++){",
          "660:       sqlite3VdbeAddOp2(v, OP_Null, 0, regNew+i);",
          "664:         sqlite3ExprCode(pParse, pChanges->a[j].pExpr, regNew+i);",
          "",
          "[Added Lines]",
          "671:   for(i=0, k=regNew; i<pTab->nCol; i++, k++){",
          "673:       sqlite3VdbeAddOp2(v, OP_Null, 0, k);",
          "674:     }else if( (pTab->aCol[i].colFlags & COLFLAG_VIRTUAL)!=0 ){",
          "675:       k--;",
          "679:         sqlite3ExprCode(pParse, pChanges->a[j].pExpr, k);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "671:         testcase( i==31 );",
          "672:         testcase( i==32 );",
          "674:       }else{",
          "676:       }",
          "677:     }",
          "678:   }",
          "",
          "[Removed Lines]",
          "673:         sqlite3ExprCodeGetColumnOfTable(pParse, pTab, iDataCur, i, regNew+i);",
          "675:         sqlite3VdbeAddOp2(v, OP_Null, 0, regNew+i);",
          "",
          "[Added Lines]",
          "688:         sqlite3ExprCodeGetColumnOfTable(pParse, pTab, iDataCur, i, k);",
          "690:         sqlite3VdbeAddOp2(v, OP_Null, 0, k);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "714:       }",
          "715:     }",
          "716:   }",
          "",
          "[Removed Lines]",
          "711:     for(i=0; i<pTab->nCol; i++){",
          "712:       if( aXRef[i]<0 && i!=pTab->iPKey ){",
          "713:         sqlite3ExprCodeGetColumnOfTable(pParse, pTab, iDataCur, i, regNew+i);",
          "",
          "[Added Lines]",
          "726:     for(i=0, k=regNew; i<pTab->nCol; i++, k++){",
          "727:       if( pTab->aCol[i].colFlags & COLFLAG_VIRTUAL ){",
          "728:         k--;",
          "729:       }else if( aXRef[i]<0 && i!=pTab->iPKey ){",
          "730:         sqlite3ExprCodeGetColumnOfTable(pParse, pTab, iDataCur, i, k);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "993b48e2b7990d615616843224dd994fd4866d99",
      "candidate_info": {
        "commit_hash": "993b48e2b7990d615616843224dd994fd4866d99",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/993b48e2b7990d615616843224dd994fd4866d99",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/os_unix.c"
        ],
        "message": "Call ioctl() with the correct signature on both Android and stock Linux.\n\nFossilOrigin-Name: 2422534908a85a4cd11784e4c23a74ad121404f73dade587bf27efde1e2b982b",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/os_unix.c||src/os_unix.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 52f463d29407fad691c42b13462880e7605603c9be9f480d18e953a0ef78149a",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/os_unix.c||src/os_unix.c": [
          "File: src/os_unix.c -> src/os_unix.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "521: #if defined(__linux__) && defined(SQLITE_ENABLE_BATCH_ATOMIC_WRITE)",
          "522: # ifdef __ANDROID__",
          "523:   { \"ioctl\", (sqlite3_syscall_ptr)(int(*)(int, int, ...))ioctl, 0 },",
          "524: # else",
          "525:   { \"ioctl\",         (sqlite3_syscall_ptr)ioctl,          0 },",
          "526: # endif",
          "527: #else",
          "528:   { \"ioctl\",         (sqlite3_syscall_ptr)0,              0 },",
          "529: #endif",
          "",
          "[Removed Lines]",
          "530: #define osIoctl ((int(*)(int,int,...))aSyscall[28].pCurrent)",
          "",
          "[Added Lines]",
          "524: #define osIoctl ((int(*)(int,int,...))aSyscall[28].pCurrent)",
          "527: #define osIoctl ((int(*)(int,unsigned long,...))aSyscall[28].pCurrent)",
          "",
          "---------------"
        ]
      }
    }
  ]
}