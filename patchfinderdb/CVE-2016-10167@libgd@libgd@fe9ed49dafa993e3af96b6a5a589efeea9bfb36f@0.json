{
  "cve_id": "CVE-2016-10167",
  "cve_desc": "The gdImageCreateFromGd2Ctx function in gd_gd2.c in the GD Graphics Library (aka libgd) before 2.2.4 allows remote attackers to cause a denial of service (application crash) via a crafted image file.",
  "repo": "libgd/libgd",
  "patch_hash": "fe9ed49dafa993e3af96b6a5a589efeea9bfb36f",
  "patch_info": {
    "commit_hash": "fe9ed49dafa993e3af96b6a5a589efeea9bfb36f",
    "repo": "libgd/libgd",
    "commit_url": "https://github.com/libgd/libgd/commit/fe9ed49dafa993e3af96b6a5a589efeea9bfb36f",
    "files": [
      "src/gd_gd2.c",
      "tests/gd2/.gitignore",
      "tests/gd2/CMakeLists.txt",
      "tests/gd2/Makemodule.am",
      "tests/gd2/too_few_image_data.c",
      "tests/gd2/too_few_image_data.gd2"
    ],
    "message": "Fix DOS vulnerability in gdImageCreateFromGd2Ctx()\n\nWe must not pretend that there are image data if there are none. Instead\nwe fail reading the image file gracefully.",
    "before_after_code_files": [
      "src/gd_gd2.c||src/gd_gd2.c",
      "tests/gd2/Makemodule.am||tests/gd2/Makemodule.am",
      "tests/gd2/too_few_image_data.c||tests/gd2/too_few_image_data.c"
    ]
  },
  "patch_diff": {
    "src/gd_gd2.c||src/gd_gd2.c": [
      "File: src/gd_gd2.c -> src/gd_gd2.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "504:       if (im->trueColor) {",
      "505:        if (!gdGetInt (&im->tpixels[y][x], in)) {",
      "510:        }",
      "511:       } else {",
      "512:        int ch;",
      "513:        if (!gdGetByte (&ch, in)) {",
      "518:        }",
      "519:        im->pixels[y][x] = ch;",
      "520:       }",
      "",
      "[Removed Lines]",
      "509:         im->tpixels[y][x] = 0;",
      "517:         ch = 0;",
      "",
      "[Added Lines]",
      "506:         gd_error(\"gd2: EOF while reading\\n\");",
      "507:         gdImageDestroy(im);",
      "508:         return NULL;",
      "513:         gd_error(\"gd2: EOF while reading\\n\");",
      "514:         gdImageDestroy(im);",
      "515:         return NULL;",
      "",
      "---------------"
    ],
    "tests/gd2/Makemodule.am||tests/gd2/Makemodule.am": [
      "File: tests/gd2/Makemodule.am -> tests/gd2/Makemodule.am",
      "--- Hunk 1 ---",
      "[Context before]",
      "3:  gd2/bug00309 \\",
      "4:  gd2/gd2_empty_file \\",
      "5:  gd2/php_bug_72339 \\",
      "8: if HAVE_LIBZ",
      "9: libgd_test_programs += \\",
      "",
      "[Removed Lines]",
      "6:  gd2/gd2_read_corrupt",
      "",
      "[Added Lines]",
      "6:  gd2/gd2_read_corrupt \\",
      "7:  gd2/too_few_image_data",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "23:  gd2/conv_test_exp.png \\",
      "24:  gd2/empty.gd2 \\",
      "25:  gd2/invalid_header.gd2 \\",
      "",
      "[Removed Lines]",
      "26:  gd2/invalid_neg_size.gd2",
      "",
      "[Added Lines]",
      "27:  gd2/invalid_neg_size.gd2 \\",
      "28:  gd2/php_bug_72339_exp.gd2 \\",
      "29:  gd2/too_few_image_data.gd2",
      "",
      "---------------"
    ],
    "tests/gd2/too_few_image_data.c||tests/gd2/too_few_image_data.c": [
      "File: tests/gd2/too_few_image_data.c -> tests/gd2/too_few_image_data.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2: too_few_image_data.gd2 claims to have a size of 12336x48 pixels, but doesn't",
      "3: provide as much image data. We test that gdImageCreateFromGd2Ctx() returns NULL",
      "4: in this case.",
      "7: #include \"gd.h\"",
      "8: #include \"gdtest.h\"",
      "10: int main()",
      "11: {",
      "12:     gdImagePtr im;",
      "13:     FILE *fp;",
      "15:     fp = gdTestFileOpen2(\"gd2\", \"too_few_image_data.gd2\");",
      "16:     gdTestAssert(fp != NULL);",
      "17:     im = gdImageCreateFromGd2(fp);",
      "18:     gdTestAssert(im == NULL);",
      "19:     fclose(fp);",
      "21:     return gdNumFailures();",
      "22: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "aba3db8ba159465ecec1089027a24835a6da9cc0",
      "candidate_info": {
        "commit_hash": "aba3db8ba159465ecec1089027a24835a6da9cc0",
        "repo": "libgd/libgd",
        "commit_url": "https://github.com/libgd/libgd/commit/aba3db8ba159465ecec1089027a24835a6da9cc0",
        "files": [
          "src/gd_gd2.c",
          "tests/gd2/CMakeLists.txt",
          "tests/gd2/Makemodule.am",
          "tests/gd2/php_bug_72339.c",
          "tests/gd2/php_bug_72339_exp.gd2"
        ],
        "message": "fix php bug 72339 (CVE-2016-5766), Integer Overflow in _gd2GetHeader() resulting in heap overflow",
        "before_after_code_files": [
          "src/gd_gd2.c||src/gd_gd2.c",
          "tests/gd2/Makemodule.am||tests/gd2/Makemodule.am",
          "tests/gd2/php_bug_72339.c||tests/gd2/php_bug_72339.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/gd_gd2.c||src/gd_gd2.c",
            "tests/gd2/Makemodule.am||tests/gd2/Makemodule.am"
          ],
          "candidate": [
            "src/gd_gd2.c||src/gd_gd2.c",
            "tests/gd2/Makemodule.am||tests/gd2/Makemodule.am"
          ]
        }
      },
      "candidate_diff": {
        "src/gd_gd2.c||src/gd_gd2.c": [
          "File: src/gd_gd2.c -> src/gd_gd2.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "154:   nc = (*ncx) * (*ncy);",
          "155:   GD2_DBG (printf (\"Reading %d chunk index entries\\n\", nc));",
          "156:   sidx = sizeof (t_chunk_info) * nc;",
          "157:   cidx = gdCalloc (sidx, 1);",
          "159:    goto fail1;",
          "160:   }",
          "161:   for (i = 0; i < nc; i++) {",
          "",
          "[Removed Lines]",
          "158:   if (!cidx) {",
          "",
          "[Added Lines]",
          "157:   if (overflow2(sidx, nc)) {",
          "158:    goto fail1;",
          "159:   }",
          "161:   if (cidx == NULL) {",
          "",
          "---------------"
        ],
        "tests/gd2/Makemodule.am||tests/gd2/Makemodule.am": [
          "File: tests/gd2/Makemodule.am -> tests/gd2/Makemodule.am",
          "--- Hunk 1 ---",
          "[Context before]",
          "3:  gd2/gd2_read_corrupt",
          "5: libgd_test_programs += \\",
          "7: TESTS += \\",
          "8:  gd2/invalid_header.sh",
          "",
          "[Removed Lines]",
          "6:  gd2/gd2_empty_file",
          "",
          "[Added Lines]",
          "6:  gd2/gd2_empty_file \\",
          "7:  gd2/php_bug_72339",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "32:  gd2/invalid_header.gd2 \\",
          "33:  gd2/invalid_header.sh \\",
          "34:  gd2/invalid_neg_size.gd2 \\",
          "",
          "[Removed Lines]",
          "35:  gd2/invalid_neg_size.sh",
          "",
          "[Added Lines]",
          "36:  gd2/invalid_neg_size.sh \\",
          "37:  gd2/php_bug_72339_exp.gd2",
          "",
          "---------------"
        ],
        "tests/gd2/php_bug_72339.c||tests/gd2/php_bug_72339.c": [
          "File: tests/gd2/php_bug_72339.c -> tests/gd2/php_bug_72339.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #include <stdio.h>",
          "2: #include <stdlib.h>",
          "3: #include \"gd.h\"",
          "5: #include \"gdtest.h\"",
          "7: int main()",
          "8: {",
          "9:  gdImagePtr im;",
          "10:  FILE *fp;",
          "12:  fp = gdTestFileOpen(\"gdimagerotate/php_bug_64898.png\");",
          "13:  im = gdImageCreateFromGd2(fp);",
          "14:  if (im == NULL) {",
          "15:   return 0;",
          "16:  } else {",
          "17:   gdTestErrorMsg(\"Image should have failed to be loaded\");",
          "18:   return 0;",
          "19:  }",
          "21: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e65415d91c57ba8d5d90ec9e22a95ae2416c62f9",
      "candidate_info": {
        "commit_hash": "e65415d91c57ba8d5d90ec9e22a95ae2416c62f9",
        "repo": "libgd/libgd",
        "commit_url": "https://github.com/libgd/libgd/commit/e65415d91c57ba8d5d90ec9e22a95ae2416c62f9",
        "files": [
          "src/gd_gd2.c"
        ],
        "message": "Fix Coverity #155476: potential resource leak\n\nIf the reading of GD2 images fails due to a truncated file, we have to\nmake sure that all resources are freed. We do so by going to `fail`\ninstead of bailing out early.\n\nThis is a minor issue, though, as GD2 isn't recommended for production\nuse at all.",
        "before_after_code_files": [
          "src/gd_gd2.c||src/gd_gd2.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/gd_gd2.c||src/gd_gd2.c"
          ],
          "candidate": [
            "src/gd_gd2.c||src/gd_gd2.c"
          ]
        }
      },
      "candidate_diff": {
        "src/gd_gd2.c||src/gd_gd2.c": [
          "File: src/gd_gd2.c -> src/gd_gd2.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "509:       if (im->trueColor) {",
          "510:        if (!gdGetInt (&im->tpixels[y][x], in)) {",
          "511:         gd_error(\"gd2: EOF while reading\\n\");",
          "514:        }",
          "515:       } else {",
          "516:        int ch;",
          "517:        if (!gdGetByte (&ch, in)) {",
          "518:         gd_error(\"gd2: EOF while reading\\n\");",
          "521:        }",
          "522:        im->pixels[y][x] = ch;",
          "523:       }",
          "",
          "[Removed Lines]",
          "512:         gdImageDestroy(im);",
          "513:         return NULL;",
          "519:         gdImageDestroy(im);",
          "520:         return NULL;",
          "",
          "[Added Lines]",
          "512:         goto fail;",
          "518:         goto fail;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "dd8f99a4e3226f852fb8e3f65ac67eb49d003d7e",
      "candidate_info": {
        "commit_hash": "dd8f99a4e3226f852fb8e3f65ac67eb49d003d7e",
        "repo": "libgd/libgd",
        "commit_url": "https://github.com/libgd/libgd/commit/dd8f99a4e3226f852fb8e3f65ac67eb49d003d7e",
        "files": [
          "tests/gd2/CMakeLists.txt",
          "tests/gd2/Makemodule.am",
          "tests/gd2/conv_test.sh",
          "tests/gd2/gd2_read.c",
          "tests/gd2/gd2_read_corrupt.c",
          "tests/gd2/invalid_header.sh",
          "tests/gd2/invalid_neg_size.sh"
        ],
        "message": "fix #255, some duplicate cases but allow png&gd2 tests",
        "before_after_code_files": [
          "tests/gd2/Makemodule.am||tests/gd2/Makemodule.am",
          "tests/gd2/conv_test.sh||tests/gd2/conv_test.sh",
          "tests/gd2/gd2_read.c||tests/gd2/gd2_read.c",
          "tests/gd2/gd2_read_corrupt.c||tests/gd2/gd2_read_corrupt.c",
          "tests/gd2/invalid_header.sh||tests/gd2/invalid_header.sh",
          "tests/gd2/invalid_neg_size.sh||tests/gd2/invalid_neg_size.sh"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "tests/gd2/Makemodule.am||tests/gd2/Makemodule.am"
          ],
          "candidate": [
            "tests/gd2/Makemodule.am||tests/gd2/Makemodule.am"
          ]
        }
      },
      "candidate_diff": {
        "tests/gd2/Makemodule.am||tests/gd2/Makemodule.am": [
          "File: tests/gd2/Makemodule.am -> tests/gd2/Makemodule.am",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: libgd_test_programs += \\",
          "6:  gd2/gd2_empty_file \\",
          "11: if HAVE_LIBZ",
          "12: libgd_test_programs += \\",
          "13:  gd2/gd2_null",
          "17: if HAVE_LIBPNG",
          "18: libgd_test_programs += \\",
          "22: endif",
          "24: endif",
          "26: EXTRA_DIST += \\",
          "27:  gd2/CMakeLists.txt \\",
          "28:  gd2/conv_gd2_exp.gd2 \\",
          "29:  gd2/conv_test.gd2 \\",
          "31:  gd2/conv_test_exp.png \\",
          "32:  gd2/empty.gd2 \\",
          "33:  gd2/invalid_header.gd2 \\",
          "35:  gd2/invalid_neg_size.gd2 \\",
          "37:  gd2/php_bug_72339_exp.gd2",
          "",
          "[Removed Lines]",
          "1: libgd_helper_programs += \\",
          "2:  gd2/gd2_read \\",
          "3:  gd2/gd2_read_corrupt",
          "7:  gd2/php_bug_72339",
          "8: TESTS += \\",
          "9:  gd2/invalid_header.sh",
          "14: TESTS += \\",
          "15:  gd2/invalid_neg_size.sh",
          "19:  gd2/gd2_im2im",
          "20: TESTS += \\",
          "21:  gd2/conv_test.sh",
          "30:  gd2/conv_test.sh \\",
          "34:  gd2/invalid_header.sh \\",
          "36:  gd2/invalid_neg_size.sh \\",
          "",
          "[Added Lines]",
          "3:  gd2/php_bug_72339 \\",
          "4:  gd2/gd2_read_corrupt",
          "12:  gd2/gd2_im2im \\",
          "13:  gd2/gd_read",
          "",
          "---------------"
        ],
        "tests/gd2/conv_test.sh||tests/gd2/conv_test.sh": [
          "File: tests/gd2/conv_test.sh -> tests/gd2/conv_test.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tests/gd2/gd2_read.c||tests/gd2/gd2_read.c": [
          "File: tests/gd2/gd2_read.c -> tests/gd2/gd2_read.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: int main(int argc, char *argv[])",
          "8: {",
          "11:  FILE *fp;",
          "38:   } else {",
          "40:   }",
          "41:  }",
          "42:  return error;",
          "43: }",
          "",
          "[Removed Lines]",
          "9:  int error;",
          "10:  gdImagePtr im;",
          "12:  char *inpath, *exppath;",
          "14:  if (argc != 3) {",
          "15:   printf(\"Usage: %s <input gd2> <expected png>\\n\", argv[0]);",
          "16:   return 1;",
          "17:  }",
          "19:  inpath = argv[1];",
          "20:  exppath = argv[2];",
          "22:  fp = fopen(inpath, \"rb\");",
          "23:  if (!fp) {",
          "24:   printf(\"failed, cannot open file: %s\\n\", inpath);",
          "25:   return 1;",
          "26:  }",
          "28:  im = gdImageCreateFromGd2(fp);",
          "29:  fclose(fp);",
          "31:  if (!gdAssertImageEqualsToFile(exppath, im)) {",
          "32:   error = 1;",
          "33:   gdImageDestroy(im);",
          "34:  } else {",
          "35:   if (im) {",
          "36:    gdImageDestroy(im);",
          "37:    error = 0;",
          "39:    error = 1;",
          "",
          "[Added Lines]",
          "9:  int error, i = 0;",
          "10:  gdImagePtr im, exp;",
          "12:  char *path[] = {",
          "13:    \"conv_test.gd2\",",
          "14:    \"invalid_neg_size.gd2\",",
          "15:    \"invalid_header.gd2\",",
          "16:    NULL",
          "17:  };",
          "18:  char *path_exp[] = {",
          "19:    \"conv_test_exp.png\",",
          "20:    NULL,",
          "21:    NULL,",
          "22:    NULL",
          "23:  };",
          "24:  while (path[i] != NULL) {",
          "25:   fp = gdTestFileOpen2(\"gd2\", path[i]);",
          "26:   if (!fp) {",
          "27:    printf(\"failed, cannot open file: %s\\n\", path[0]);",
          "28:    return 1;",
          "29:   }",
          "30:   im = gdImageCreateFromGd2(fp);",
          "31:   fclose(fp);",
          "33:   if (path_exp[i] != NULL) {",
          "34:    fp = gdTestFileOpen2(\"gd2\", path_exp[i]);",
          "35:    if (!fp) {",
          "36:     printf(\"failed, cannot open file: %s\\n\", path_exp[i]);",
          "37:     return 1;",
          "38:    }",
          "39:    exp = gdImageCreateFromPng(fp);",
          "40:    if (!gdAssertImageEquals(exp, im)) {",
          "41:     printf(\"image %s differ from expected result\\n\", path[i]);",
          "42:     gdImageDestroy(im);",
          "43:     error = 1;",
          "44:    } else {",
          "45:     error = 0;",
          "46:    }",
          "47:    if (exp) {",
          "48:     gdImageDestroy(exp);",
          "49:    }",
          "52:    if (im) {",
          "53:     printf(\"image %s should have failed to be loaded\\n\", path[i]);",
          "54:     gdImageDestroy(im);",
          "55:     error = 1;",
          "56:    } else {",
          "57:     error = 0;",
          "58:    }",
          "60:   i++;",
          "",
          "---------------"
        ],
        "tests/gd2/gd2_read_corrupt.c||tests/gd2/gd2_read_corrupt.c": [
          "File: tests/gd2/gd2_read_corrupt.c -> tests/gd2/gd2_read_corrupt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: {",
          "9:  gdImagePtr im;",
          "10:  FILE *fp;",
          "21:  if (!fp) {",
          "22:   printf(\"failed, cannot open file: %s\\n\", inpath);",
          "23:   return 1;",
          "",
          "[Removed Lines]",
          "11:  char *inpath;",
          "13:  if (argc != 2) {",
          "14:   printf(\"Usage: %s <input gd2>\\n\", argv[0]);",
          "15:   return 1;",
          "16:  }",
          "19:  inpath = argv[1];",
          "20:  fp = fopen(inpath, \"rb\");",
          "",
          "[Added Lines]",
          "12:  fp = gdTestFileOpen2(\"gd2\", \"invalid_header.gd2\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "25:  im = gdImageCreateFromGd2(fp);",
          "26:  fclose(fp);",
          "30: }",
          "",
          "[Removed Lines]",
          "29:  return im == NULL ? 0 : 1;",
          "",
          "[Added Lines]",
          "21:  if (im != NULL) {",
          "22:   gdTestErrorMsg(\"image should have failed to be loaded\\n\");",
          "23:   gdImageDestroy(im);",
          "24:   return 1;",
          "25:  } else {",
          "26:   return 0;",
          "27:  }",
          "",
          "---------------"
        ],
        "tests/gd2/invalid_header.sh||tests/gd2/invalid_header.sh": [
          "File: tests/gd2/invalid_header.sh -> tests/gd2/invalid_header.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tests/gd2/invalid_neg_size.sh||tests/gd2/invalid_neg_size.sh": [
          "File: tests/gd2/invalid_neg_size.sh -> tests/gd2/invalid_neg_size.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e59a0e82e0440446a62a4a1eb7108858369d9358",
      "candidate_info": {
        "commit_hash": "e59a0e82e0440446a62a4a1eb7108858369d9358",
        "repo": "libgd/libgd",
        "commit_url": "https://github.com/libgd/libgd/commit/e59a0e82e0440446a62a4a1eb7108858369d9358",
        "files": [
          "tests/gd2/Makemodule.am"
        ],
        "message": "tests: add missing test files to dist",
        "before_after_code_files": [
          "tests/gd2/Makemodule.am||tests/gd2/Makemodule.am"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "tests/gd2/Makemodule.am||tests/gd2/Makemodule.am"
          ],
          "candidate": [
            "tests/gd2/Makemodule.am||tests/gd2/Makemodule.am"
          ]
        }
      },
      "candidate_diff": {
        "tests/gd2/Makemodule.am||tests/gd2/Makemodule.am": [
          "File: tests/gd2/Makemodule.am -> tests/gd2/Makemodule.am",
          "--- Hunk 1 ---",
          "[Context before]",
          "26:  gd2/CMakeLists.txt \\",
          "27:  gd2/conv_gd2_exp.gd2 \\",
          "28:  gd2/conv_test.gd2 \\",
          "29:  gd2/conv_test_exp.png \\",
          "",
          "[Removed Lines]",
          "30:  gd2/empty.gd2",
          "",
          "[Added Lines]",
          "29:  gd2/conv_test.sh \\",
          "31:  gd2/empty.gd2 \\",
          "32:  gd2/invalid_header.gd2 \\",
          "33:  gd2/invalid_header.sh \\",
          "34:  gd2/invalid_neg_size.gd2 \\",
          "35:  gd2/invalid_neg_size.sh",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "658f168874789370f76e7f2d8058d4bb6c4f53af",
      "candidate_info": {
        "commit_hash": "658f168874789370f76e7f2d8058d4bb6c4f53af",
        "repo": "libgd/libgd",
        "commit_url": "https://github.com/libgd/libgd/commit/658f168874789370f76e7f2d8058d4bb6c4f53af",
        "files": [
          "src/gd_gd2.c",
          "tests/gd2/Makemodule.am",
          "tests/gd2/invalid_header.gd2",
          "tests/gd2/invalid_header.sh"
        ],
        "message": "gd2: fix double free when processing invalid headers\n\nThis closes #208.",
        "before_after_code_files": [
          "src/gd_gd2.c||src/gd_gd2.c",
          "tests/gd2/Makemodule.am||tests/gd2/Makemodule.am",
          "tests/gd2/invalid_header.sh||tests/gd2/invalid_header.sh"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/gd_gd2.c||src/gd_gd2.c",
            "tests/gd2/Makemodule.am||tests/gd2/Makemodule.am"
          ],
          "candidate": [
            "src/gd_gd2.c||src/gd_gd2.c",
            "tests/gd2/Makemodule.am||tests/gd2/Makemodule.am"
          ]
        }
      },
      "candidate_diff": {
        "src/gd_gd2.c||src/gd_gd2.c": [
          "File: src/gd_gd2.c -> src/gd_gd2.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "359:  im =",
          "360:      _gd2CreateFromFile (in, &sx, &sy, &cs, &vers, &fmt, &ncx, &ncy,",
          "361:                          &chunkIdx);",
          "363:  if (im == NULL) {",
          "365:   return 0;",
          "366:  }",
          "",
          "[Removed Lines]",
          "364:   gdFree (chunkIdx);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tests/gd2/Makemodule.am||tests/gd2/Makemodule.am": [
          "File: tests/gd2/Makemodule.am -> tests/gd2/Makemodule.am",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: libgd_test_programs += \\",
          "6:  gd2/gd2_empty_file",
          "8: if HAVE_LIBZ",
          "9: libgd_test_programs += \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7: TESTS += \\",
          "8:  gd2/invalid_header.sh",
          "",
          "---------------"
        ],
        "tests/gd2/invalid_header.sh||tests/gd2/invalid_header.sh": [
          "File: tests/gd2/invalid_header.sh -> tests/gd2/invalid_header.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #!/bin/sh -x",
          "2: base=${0%.sh}",
          "3: input=\"${base}.gd2\"",
          "4: exec ./gd2/gd2_read_corrupt \"${input}\"",
          "",
          "---------------"
        ]
      }
    }
  ]
}