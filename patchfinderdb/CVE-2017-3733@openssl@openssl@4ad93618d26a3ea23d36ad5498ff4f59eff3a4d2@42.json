{
  "cve_id": "CVE-2017-3733",
  "cve_desc": "During a renegotiation handshake if the Encrypt-Then-Mac extension is negotiated where it was not in the original handshake (or vice-versa) then this can cause OpenSSL 1.1.0 before 1.1.0e to crash (dependent on ciphersuite). Both clients and servers are affected.",
  "repo": "openssl/openssl",
  "patch_hash": "4ad93618d26a3ea23d36ad5498ff4f59eff3a4d2",
  "patch_info": {
    "commit_hash": "4ad93618d26a3ea23d36ad5498ff4f59eff3a4d2",
    "repo": "openssl/openssl",
    "commit_url": "https://github.com/openssl/openssl/commit/4ad93618d26a3ea23d36ad5498ff4f59eff3a4d2",
    "files": [
      "include/openssl/ssl3.h",
      "ssl/record/rec_layer_s3.c",
      "ssl/record/ssl3_record.c",
      "ssl/ssl_locl.h",
      "ssl/t1_enc.c",
      "ssl/t1_lib.c"
    ],
    "message": "Don't change the state of the ETM flags until CCS processing\n\nChanging the ciphersuite during a renegotiation can result in a crash\nleading to a DoS attack. ETM has not been implemented in 1.1.0 for DTLS\nso this is TLS only.\n\nThe problem is caused by changing the flag indicating whether to use ETM\nor not immediately on negotiation of ETM, rather than at CCS. Therefore,\nduring a renegotiation, if the ETM state is changing (usually due to a\nchange of ciphersuite), then an error/crash will occur.\n\nDue to the fact that there are separate CCS messages for read and write\nwe actually now need two flags to determine whether to use ETM or not.\n\nCVE-2017-3733\n\nReviewed-by: Richard Levitte <levitte@openssl.org>",
    "before_after_code_files": [
      "include/openssl/ssl3.h||include/openssl/ssl3.h",
      "ssl/record/rec_layer_s3.c||ssl/record/rec_layer_s3.c",
      "ssl/record/ssl3_record.c||ssl/record/ssl3_record.c",
      "ssl/ssl_locl.h||ssl/ssl_locl.h",
      "ssl/t1_enc.c||ssl/t1_enc.c",
      "ssl/t1_lib.c||ssl/t1_lib.c"
    ]
  },
  "patch_diff": {
    "include/openssl/ssl3.h||include/openssl/ssl3.h": [
      "File: include/openssl/ssl3.h -> include/openssl/ssl3.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "264: # define TLS1_FLAGS_SKIP_CERT_VERIFY             0x0010",
      "270: # define TLS1_FLAGS_RECEIVED_EXTMS               0x0200",
      "272: # define SSL3_MT_HELLO_REQUEST                   0",
      "273: # define SSL3_MT_CLIENT_HELLO                    1",
      "274: # define SSL3_MT_SERVER_HELLO                    2",
      "",
      "[Removed Lines]",
      "267: # define TLS1_FLAGS_ENCRYPT_THEN_MAC             0x0100",
      "",
      "[Added Lines]",
      "267: # define TLS1_FLAGS_ENCRYPT_THEN_MAC_READ        0x0100",
      "268: # define TLS1_FLAGS_ENCRYPT_THEN_MAC             TLS1_FLAGS_ENCRYPT_THEN_MAC_READ",
      "273: # define TLS1_FLAGS_ENCRYPT_THEN_MAC_WRITE       0x0400",
      "",
      "---------------"
    ],
    "ssl/record/rec_layer_s3.c||ssl/record/rec_layer_s3.c": [
      "File: ssl/record/rec_layer_s3.c -> ssl/record/rec_layer_s3.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "395:     if (type == SSL3_RT_APPLICATION_DATA &&",
      "396:         u_len >= 4 * (max_send_fragment = s->max_send_fragment) &&",
      "397:         s->compress == NULL && s->msg_callback == NULL &&",
      "399:         EVP_CIPHER_flags(EVP_CIPHER_CTX_cipher(s->enc_write_ctx)) &",
      "400:         EVP_CIPH_FLAG_TLS1_1_MULTIBLOCK) {",
      "401:         unsigned char aad[13];",
      "",
      "[Removed Lines]",
      "398:         !SSL_USE_ETM(s) && SSL_USE_EXPLICIT_IV(s) &&",
      "",
      "[Added Lines]",
      "398:         !SSL_WRITE_ETM(s) && SSL_USE_EXPLICIT_IV(s) &&",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "795:             if (s->method->ssl3_enc->mac(s, &wr[j],",
      "796:                                          &(outbuf[j][wr[j].length + eivlen]),",
      "797:                                          1) < 0)",
      "",
      "[Removed Lines]",
      "794:         if (!SSL_USE_ETM(s) && mac_size != 0) {",
      "",
      "[Added Lines]",
      "794:         if (!SSL_WRITE_ETM(s) && mac_size != 0) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "814:         goto err;",
      "816:     for (j = 0; j < numpipes; j++) {",
      "818:             if (s->method->ssl3_enc->mac(s, &wr[j],",
      "819:                                          outbuf[j] + wr[j].length, 1) < 0)",
      "820:                 goto err;",
      "",
      "[Removed Lines]",
      "817:         if (SSL_USE_ETM(s) && mac_size != 0) {",
      "",
      "[Added Lines]",
      "817:         if (SSL_WRITE_ETM(s) && mac_size != 0) {",
      "",
      "---------------"
    ],
    "ssl/record/ssl3_record.c||ssl/record/ssl3_record.c": [
      "File: ssl/record/ssl3_record.c -> ssl/record/ssl3_record.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "350:         unsigned char *mac;",
      "351:         mac_size = EVP_MD_CTX_size(s->read_hash);",
      "352:         OPENSSL_assert(mac_size <= EVP_MAX_MD_SIZE);",
      "",
      "[Removed Lines]",
      "349:     if (SSL_USE_ETM(s) && s->read_hash) {",
      "",
      "[Added Lines]",
      "349:     if (SSL_READ_ETM(s) && s->read_hash) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "394:     if ((sess != NULL) &&",
      "395:         (s->enc_read_ctx != NULL) &&",
      "398:         unsigned char *mac = NULL;",
      "399:         unsigned char mac_tmp[EVP_MAX_MD_SIZE];",
      "",
      "[Removed Lines]",
      "396:         (EVP_MD_CTX_md(s->read_hash) != NULL) && !SSL_USE_ETM(s)) {",
      "",
      "[Added Lines]",
      "396:         (!SSL_READ_ETM(s) && EVP_MD_CTX_md(s->read_hash) != NULL)) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "823:         }",
      "825:         ret = 1;",
      "827:             mac_size = EVP_MD_CTX_size(s->read_hash);",
      "828:         if ((bs != 1) && !send) {",
      "829:             int tmpret;",
      "",
      "[Removed Lines]",
      "826:         if (!SSL_USE_ETM(s) && EVP_MD_CTX_md(s->read_hash) != NULL)",
      "",
      "[Added Lines]",
      "826:         if (!SSL_READ_ETM(s) && EVP_MD_CTX_md(s->read_hash) != NULL)",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "997:     header[11] = (rec->length) >> 8;",
      "998:     header[12] = (rec->length) & 0xff;",
      "1001:         EVP_CIPHER_CTX_mode(ssl->enc_read_ctx) == EVP_CIPH_CBC_MODE &&",
      "1002:         ssl3_cbc_record_digest_supported(mac_ctx)) {",
      "",
      "[Removed Lines]",
      "1000:     if (!send && !SSL_USE_ETM(ssl) &&",
      "",
      "[Added Lines]",
      "1000:     if (!send && !SSL_READ_ETM(ssl) &&",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1022:             EVP_MD_CTX_free(hmac);",
      "1023:             return -1;",
      "1024:         }",
      "1026:             if (!tls_fips_digest_extra(ssl->enc_read_ctx,",
      "1027:                                        mac_ctx, rec->input,",
      "1028:                                        rec->length, rec->orig_len)) {",
      "",
      "[Removed Lines]",
      "1025:         if (!send && !SSL_USE_ETM(ssl) && FIPS_mode())",
      "",
      "[Added Lines]",
      "1025:         if (!send && !SSL_READ_ETM(ssl) && FIPS_mode())",
      "",
      "---------------"
    ],
    "ssl/ssl_locl.h||ssl/ssl_locl.h": [
      "File: ssl/ssl_locl.h -> ssl/ssl_locl.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "378: # define SSL_CLIENT_USE_SIGALGS(s)        \\",
      "379:     SSL_CLIENT_USE_TLS1_2_CIPHERS(s)",
      "384: # define SSL_PKEY_RSA_ENC        0",
      "",
      "[Removed Lines]",
      "381: # define SSL_USE_ETM(s) (s->s3->flags & TLS1_FLAGS_ENCRYPT_THEN_MAC)",
      "",
      "[Added Lines]",
      "381: # define SSL_READ_ETM(s) (s->s3->flags & TLS1_FLAGS_ENCRYPT_THEN_MAC_READ)",
      "382: # define SSL_WRITE_ETM(s) (s->s3->flags & TLS1_FLAGS_ENCRYPT_THEN_MAC_WRITE)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1111:     unsigned char *alpn_client_proto_list;",
      "1112:     unsigned alpn_client_proto_list_len;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1116:     int tlsext_use_etm;",
      "",
      "---------------"
    ],
    "ssl/t1_enc.c||ssl/t1_enc.c": [
      "File: ssl/t1_enc.c -> ssl/t1_enc.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "130: #endif",
      "132:     if (which & SSL3_CC_READ) {",
      "133:         if (s->s3->tmp.new_cipher->algorithm2 & TLS1_STREAM_MAC)",
      "134:             s->mac_flags |= SSL_MAC_FLAG_READ_MAC_STREAM;",
      "135:         else",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "133:         if (s->tlsext_use_etm)",
      "134:             s->s3->flags |= TLS1_FLAGS_ENCRYPT_THEN_MAC_READ;",
      "135:         else",
      "136:             s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC_READ;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "168:         mac_secret = &(s->s3->read_mac_secret[0]);",
      "169:         mac_secret_size = &(s->s3->read_mac_secret_size);",
      "170:     } else {",
      "171:         if (s->s3->tmp.new_cipher->algorithm2 & TLS1_STREAM_MAC)",
      "172:             s->mac_flags |= SSL_MAC_FLAG_WRITE_MAC_STREAM;",
      "173:         else",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "176:         if (s->tlsext_use_etm)",
      "177:             s->s3->flags |= TLS1_FLAGS_ENCRYPT_THEN_MAC_WRITE;",
      "178:         else",
      "179:             s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC_WRITE;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "367:     if (s->s3->tmp.key_block_length != 0)",
      "368:         return (1);",
      "373:         SSLerr(SSL_F_TLS1_SETUP_KEY_BLOCK, SSL_R_CIPHER_OR_HASH_UNAVAILABLE);",
      "374:         return (0);",
      "375:     }",
      "",
      "[Removed Lines]",
      "370:     if (!ssl_cipher_get_evp",
      "371:         (s->session, &c, &hash, &mac_type, &mac_secret_size, &comp,",
      "372:          SSL_USE_ETM(s))) {",
      "",
      "[Added Lines]",
      "380:     if (!ssl_cipher_get_evp(s->session, &c, &hash, &mac_type, &mac_secret_size,",
      "381:                             &comp, s->tlsext_use_etm)) {",
      "",
      "---------------"
    ],
    "ssl/t1_lib.c||ssl/t1_lib.c": [
      "File: ssl/t1_lib.c -> ssl/t1_lib.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1674: #endif",
      "1675:     if (!custom_ext_add(s, 1, &ret, limit, al))",
      "1676:         return NULL;",
      "",
      "[Removed Lines]",
      "1677:     if (s->s3->flags & TLS1_FLAGS_ENCRYPT_THEN_MAC) {",
      "",
      "[Added Lines]",
      "1677:     if (s->tlsext_use_etm) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1683:             || s->s3->tmp.new_cipher->algorithm_enc == SSL_RC4",
      "1684:             || s->s3->tmp.new_cipher->algorithm_enc == SSL_eGOST2814789CNT",
      "1685:             || s->s3->tmp.new_cipher->algorithm_enc == SSL_eGOST2814789CNT12)",
      "1687:         else {",
      "",
      "[Removed Lines]",
      "1686:             s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC;",
      "",
      "[Added Lines]",
      "1686:             s->tlsext_use_etm = 0;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1917:     OPENSSL_free(s->s3->tmp.peer_sigalgs);",
      "1918:     s->s3->tmp.peer_sigalgs = NULL;",
      "1921: #ifndef OPENSSL_NO_SRP",
      "1922:     OPENSSL_free(s->srp_ctx.login);",
      "",
      "[Removed Lines]",
      "1919:     s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC;",
      "",
      "[Added Lines]",
      "1919:     s->tlsext_use_etm = 0;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "2264:         }",
      "2265: #endif",
      "2266:         else if (type == TLSEXT_TYPE_encrypt_then_mac)",
      "",
      "[Removed Lines]",
      "2267:             s->s3->flags |= TLS1_FLAGS_ENCRYPT_THEN_MAC;",
      "",
      "[Added Lines]",
      "2267:             s->tlsext_use_etm = 1;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "2366:                              SSL_DTLSEXT_HB_DONT_SEND_REQUESTS);",
      "2367: #endif",
      "2371:     s->s3->flags &= ~TLS1_FLAGS_RECEIVED_EXTMS;",
      "",
      "[Removed Lines]",
      "2369:     s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC;",
      "",
      "[Added Lines]",
      "2369:     s->tlsext_use_etm = 0;",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "2586:             if (s->s3->tmp.new_cipher->algorithm_mac != SSL_AEAD",
      "2587:                 && s->s3->tmp.new_cipher->algorithm_enc != SSL_RC4)",
      "2589:         } else if (type == TLSEXT_TYPE_extended_master_secret) {",
      "2590:             s->s3->flags |= TLS1_FLAGS_RECEIVED_EXTMS;",
      "2591:             if (!s->hit)",
      "",
      "[Removed Lines]",
      "2588:                 s->s3->flags |= TLS1_FLAGS_ENCRYPT_THEN_MAC;",
      "",
      "[Added Lines]",
      "2588:                 s->tlsext_use_etm = 1;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "f8b21b98e96096eac702b814900100be922c6534",
      "candidate_info": {
        "commit_hash": "f8b21b98e96096eac702b814900100be922c6534",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/f8b21b98e96096eac702b814900100be922c6534",
        "files": [
          "crypto/evp/e_aes.c",
          "crypto/evp/evp_enc.c"
        ],
        "message": "Fix a crash in EVP_CIPHER_CTX_cleanup due to cipher_data may be NULL or EVP_CTRL_INIT/EVP_CTRL_COPY was not called or failed. If that happens in EVP_CipherInit_ex/EVP_CIPHER_CTX_copy set cipher = NULL, aes_gcm_cleanup should check that gctx != NULL before calling OPENSSL_cleanse.\n\nReviewed-by: Richard Levitte <levitte@openssl.org>\nReviewed-by: Matt Caswell <matt@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2562)\n(cherry picked from commit 273a0218e65f1737cdbb0ef65a5ddebd601e6bef)",
        "before_after_code_files": [
          "crypto/evp/e_aes.c||crypto/evp/e_aes.c",
          "crypto/evp/evp_enc.c||crypto/evp/evp_enc.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/evp/e_aes.c||crypto/evp/e_aes.c": [
          "File: crypto/evp/e_aes.c -> crypto/evp/e_aes.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1268: static int aes_gcm_cleanup(EVP_CIPHER_CTX *c)",
          "1269: {",
          "1270:     EVP_AES_GCM_CTX *gctx = EVP_C_DATA(EVP_AES_GCM_CTX,c);",
          "1271:     OPENSSL_cleanse(&gctx->gcm, sizeof(gctx->gcm));",
          "1272:     if (gctx->iv != EVP_CIPHER_CTX_iv_noconst(c))",
          "1273:         OPENSSL_free(gctx->iv);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1271:     if (gctx == NULL)",
          "1272:         return 0;",
          "",
          "---------------"
        ],
        "crypto/evp/evp_enc.c||crypto/evp/evp_enc.c": [
          "File: crypto/evp/evp_enc.c -> crypto/evp/evp_enc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "125:         if (ctx->cipher->ctx_size) {",
          "126:             ctx->cipher_data = OPENSSL_zalloc(ctx->cipher->ctx_size);",
          "127:             if (ctx->cipher_data == NULL) {",
          "128:                 EVPerr(EVP_F_EVP_CIPHERINIT_EX, ERR_R_MALLOC_FAILURE);",
          "129:                 return 0;",
          "130:             }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "128:                 ctx->cipher = NULL;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "136:         ctx->flags &= EVP_CIPHER_CTX_FLAG_WRAP_ALLOW;",
          "137:         if (ctx->cipher->flags & EVP_CIPH_CTRL_INIT) {",
          "138:             if (!EVP_CIPHER_CTX_ctrl(ctx, EVP_CTRL_INIT, 0, NULL)) {",
          "139:                 EVPerr(EVP_F_EVP_CIPHERINIT_EX, EVP_R_INITIALIZATION_ERROR);",
          "140:                 return 0;",
          "141:             }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "140:                 ctx->cipher = NULL;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "616:     if (in->cipher_data && in->cipher->ctx_size) {",
          "617:         out->cipher_data = OPENSSL_malloc(in->cipher->ctx_size);",
          "618:         if (out->cipher_data == NULL) {",
          "619:             EVPerr(EVP_F_EVP_CIPHER_CTX_COPY, ERR_R_MALLOC_FAILURE);",
          "620:             return 0;",
          "621:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "621:             out->cipher = NULL;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "623:     }",
          "625:     if (in->cipher->flags & EVP_CIPH_CUSTOM_COPY)",
          "627:     return 1;",
          "628: }",
          "",
          "[Removed Lines]",
          "626:         return in->cipher->ctrl((EVP_CIPHER_CTX *)in, EVP_CTRL_COPY, 0, out);",
          "",
          "[Added Lines]",
          "629:         if (!in->cipher->ctrl((EVP_CIPHER_CTX *)in, EVP_CTRL_COPY, 0, out)) {",
          "630:             out->cipher = NULL;",
          "631:             EVPerr(EVP_F_EVP_CIPHER_CTX_COPY, EVP_R_INITIALIZATION_ERROR);",
          "632:             return 0;",
          "633:         }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e9a86d6b4951a1c536d5536d1217e6be6455858a",
      "candidate_info": {
        "commit_hash": "e9a86d6b4951a1c536d5536d1217e6be6455858a",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/e9a86d6b4951a1c536d5536d1217e6be6455858a",
        "files": [
          "Configurations/10-main.conf"
        ],
        "message": "Add missing -zdelete for some linux arches\n\nb6d5ba1a9f004d637acac18ae3519fe063b6b5e1 forgot to update some linux arches.\n\nReviewed-by: Richard Levitte <levitte@openssl.org>\n\nGH: #1977\n(cherry picked from commit 55ab86e4c202e202a2b9200291d038878a727815)",
        "before_after_code_files": [
          "Configurations/10-main.conf||Configurations/10-main.conf"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Configurations/10-main.conf||Configurations/10-main.conf": [
          "File: Configurations/10-main.conf -> Configurations/10-main.conf",
          "--- Hunk 1 ---",
          "[Context before]",
          "708:         cflags           => add(\"-mabi=ilp32\"),",
          "709:         bn_ops           => \"SIXTY_FOUR_BIT RC4_CHAR\",",
          "710:         perlasm_scheme   => \"linux64\",",
          "712:     },",
          "714:     \"linux-mips32\" => {",
          "",
          "[Removed Lines]",
          "711:         shared_ldflag    => \"-mabi=ilp32\",",
          "",
          "[Added Lines]",
          "711:         shared_ldflag    => add(\"-mabi=ilp32\"),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "790:         cflags           => add(\"-mx32 -DL_ENDIAN\"),",
          "791:         bn_ops           => \"SIXTY_FOUR_BIT\",",
          "792:         perlasm_scheme   => \"elf32\",",
          "794:         multilib         => \"x32\",",
          "795:     },",
          "",
          "[Removed Lines]",
          "793:         shared_ldflag    => \"-mx32\",",
          "",
          "[Added Lines]",
          "793:         shared_ldflag    => add(\"-mx32\"),",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "19d5e48d6d56f59672c08c8aa162a2a3ff3819ba",
      "candidate_info": {
        "commit_hash": "19d5e48d6d56f59672c08c8aa162a2a3ff3819ba",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/19d5e48d6d56f59672c08c8aa162a2a3ff3819ba",
        "files": [
          "crypto/perlasm/README",
          "crypto/perlasm/x86_64-xlate.pl"
        ],
        "message": "Fix a few typos\n\nReviewed-by: Richard Levitte <levitte@openssl.org>\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2571)\n(cherry picked from commit 7e12cdb52e3f4beff050caeecf3634870bb9a7c4)",
        "before_after_code_files": [
          "crypto/perlasm/x86_64-xlate.pl||crypto/perlasm/x86_64-xlate.pl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/perlasm/x86_64-xlate.pl||crypto/perlasm/x86_64-xlate.pl": [
          "File: crypto/perlasm/x86_64-xlate.pl -> crypto/perlasm/x86_64-xlate.pl",
          "--- Hunk 1 ---",
          "[Context before]",
          "429:    ($nasm ? \":\" : \"\\tPROC $current_function->{scope}\");",
          "430:  }",
          "431:     }",
          "433: { package expr;  # pick up expressioins",
          "434:     sub re {",
          "435:  my ($class, $line, $opcode) = @_;",
          "",
          "[Removed Lines]",
          "432: }",
          "",
          "[Added Lines]",
          "432: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1004: # one can assume a \"red zone\" above stack pointer under Win64 as well.",
          "1005: # Point is that at apparently no occasion Windows kernel would alter",
          "1006: # the area above user stack pointer in true asynchronous manner...",
          "1008: # All the above means that if assembler programmer adheres to Unix",
          "1009: # register and stack layout, but disregards the \"red zone\" existense,",
          "1010: # it's possible to use following prologue and epilogue to \"gear\" from",
          "",
          "[Removed Lines]",
          "1007: #",
          "",
          "[Added Lines]",
          "1007: #",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "550f0f99600194cacd10ca43584a9744e27dbe0f",
      "candidate_info": {
        "commit_hash": "550f0f99600194cacd10ca43584a9744e27dbe0f",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/550f0f99600194cacd10ca43584a9744e27dbe0f",
        "files": [
          "crypto/x509/x_all.c",
          "doc/crypto/X509_digest.pod"
        ],
        "message": "Make X509_Digest,others public\n\nAlso, if want SHA1 then use the pre-computed value if there.\n\nReviewed-by: Richard Levitte <levitte@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2223)\n(cherry picked from commit 3e5d9da5fc45a5d129e0daa7211125eba097c3dd)",
        "before_after_code_files": [
          "crypto/x509/x_all.c||crypto/x509/x_all.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/x509/x_all.c||crypto/x509/x_all.c": [
          "File: crypto/x509/x_all.c -> crypto/x509/x_all.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "362: int X509_digest(const X509 *data, const EVP_MD *type, unsigned char *md,",
          "363:                 unsigned int *len)",
          "364: {",
          "365:     return (ASN1_item_digest",
          "366:             (ASN1_ITEM_rptr(X509), type, (char *)data, md, len));",
          "367: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "365:     if (type == EVP_sha1() && (data->ex_flags & EXFLAG_SET) != 0) {",
          "367:         if (len != NULL)",
          "369:         memcpy(md, data->sha1_hash, sizeof(data->sha1_hash));",
          "370:         return 1;",
          "371:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "369: int X509_CRL_digest(const X509_CRL *data, const EVP_MD *type,",
          "370:                     unsigned char *md, unsigned int *len)",
          "371: {",
          "372:     return (ASN1_item_digest",
          "373:             (ASN1_ITEM_rptr(X509_CRL), type, (char *)data, md, len));",
          "374: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "379:     if (type == EVP_sha1()) {",
          "381:         if (len != NULL)",
          "383:         memcpy(md, data->sha1_hash, sizeof(data->sha1_hash));",
          "384:         return 1;",
          "385:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "07cd2f84d1480ca714bc14233b3c023ba9874e9d",
      "candidate_info": {
        "commit_hash": "07cd2f84d1480ca714bc14233b3c023ba9874e9d",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/07cd2f84d1480ca714bc14233b3c023ba9874e9d",
        "files": [
          "apps/s_client.c"
        ],
        "message": "s_client: Better response success check for CONNECT\n\nInstead of looking for \"200\" and \"established\" (and failing all other\n2xx responses or \"Established\"), let's look for a line that's not a\nheader (i.e. doesn't contain a ':') and where the first space is\nfollowed by a '2'.\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/1664)\n(cherry picked from commit ec2a0e60652c0e61e90dde367756c5d92cd882d3)",
        "before_after_code_files": [
          "apps/s_client.c||apps/s_client.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "apps/s_client.c||apps/s_client.c": [
          "File: apps/s_client.c -> apps/s_client.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2001:         break;",
          "2002:     case PROTO_CONNECT:",
          "2003:         {",
          "2005:             BIO *fbio = BIO_new(BIO_f_buffer());",
          "2007:             BIO_push(fbio, sbio);",
          "2008:             BIO_printf(fbio, \"CONNECT %s HTTP/1.0\\r\\n\\r\\n\", connectstr);",
          "2009:             (void)BIO_flush(fbio);",
          "2017:             (void)BIO_flush(fbio);",
          "2018:             BIO_pop(fbio);",
          "2019:             BIO_free(fbio);",
          "2022:                 goto shut;",
          "2023:             }",
          "2024:         }",
          "",
          "[Removed Lines]",
          "2004:             int foundit = 0;",
          "2011:             do {",
          "2012:                 mbuf_len = BIO_gets(fbio, mbuf, BUFSIZZ);",
          "2013:                 if (strstr(mbuf, \"200\") != NULL",
          "2014:                     && strstr(mbuf, \"established\") != NULL)",
          "2015:                     foundit++;",
          "2016:             } while (mbuf_len > 3 && foundit == 0);",
          "2020:             if (!foundit) {",
          "2021:                 BIO_printf(bio_err, \"%s: HTTP CONNECT failed\\n\", prog);",
          "",
          "[Added Lines]",
          "2004:             enum {",
          "2007:                 success",
          "2008:             } foundit = error_connect;",
          "2020:             mbuf_len = BIO_gets(fbio, mbuf, BUFSIZZ);",
          "2021:             if (mbuf[8] != ' ') {",
          "2022:                 BIO_printf(bio_err,",
          "2023:                            \"%s: HTTP CONNECT failed, incorrect response \"",
          "2024:                            \"from proxy\\n\", prog);",
          "2025:                 foundit = error_proto;",
          "2026:             } else if (mbuf[9] != '2') {",
          "2027:                 BIO_printf(bio_err, \"%s: HTTP CONNECT failed: %s \", prog,",
          "2028:                            &mbuf[9]);",
          "2029:             } else {",
          "2030:                 foundit = success;",
          "2031:             }",
          "2032:             if (foundit != error_proto) {",
          "2034:                 do {",
          "2035:                     mbuf_len = BIO_gets(fbio, mbuf, BUFSIZZ);",
          "2036:                 } while (mbuf_len > 2);",
          "2037:             }",
          "2041:             if (foundit != success) {",
          "",
          "---------------"
        ]
      }
    }
  ]
}