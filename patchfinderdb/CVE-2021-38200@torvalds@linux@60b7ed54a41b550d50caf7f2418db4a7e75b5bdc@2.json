{
  "cve_id": "CVE-2021-38200",
  "cve_desc": "arch/powerpc/perf/core-book3s.c in the Linux kernel before 5.12.13, on systems with perf_event_paranoid=-1 and no specific PMU driver support registered, allows local users to cause a denial of service (perf_instruction_pointer NULL pointer dereference and OOPS) via a \"perf record\" command.",
  "repo": "torvalds/linux",
  "patch_hash": "60b7ed54a41b550d50caf7f2418db4a7e75b5bdc",
  "patch_info": {
    "commit_hash": "60b7ed54a41b550d50caf7f2418db4a7e75b5bdc",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/60b7ed54a41b550d50caf7f2418db4a7e75b5bdc",
    "files": [
      "arch/powerpc/perf/core-book3s.c"
    ],
    "message": "powerpc/perf: Fix crash in perf_instruction_pointer() when ppmu is not set\n\nOn systems without any specific PMU driver support registered, running\nperf record causes Oops.\n\nThe relevant portion from call trace:\n\n  BUG: Kernel NULL pointer dereference on read at 0x00000040\n  Faulting instruction address: 0xc0021f0c\n  Oops: Kernel access of bad area, sig: 11 [#1]\n  BE PAGE_SIZE=4K PREEMPT CMPCPRO\n  SAF3000 DIE NOTIFICATION\n  CPU: 0 PID: 442 Comm: null_syscall Not tainted 5.13.0-rc6-s3k-dev-01645-g7649ee3d2957 #5164\n  NIP:  c0021f0c LR: c00e8ad8 CTR: c00d8a5c\n  NIP perf_instruction_pointer+0x10/0x60\n  LR  perf_prepare_sample+0x344/0x674\n  Call Trace:\n    perf_prepare_sample+0x7c/0x674 (unreliable)\n    perf_event_output_forward+0x3c/0x94\n    __perf_event_overflow+0x74/0x14c\n    perf_swevent_hrtimer+0xf8/0x170\n    __hrtimer_run_queues.constprop.0+0x160/0x318\n    hrtimer_interrupt+0x148/0x3b0\n    timer_interrupt+0xc4/0x22c\n    Decrementer_virt+0xb8/0xbc\n\nDuring perf record session, perf_instruction_pointer() is called to\ncapture the sample IP. This function in core-book3s accesses\nppmu->flags. If a platform specific PMU driver is not registered, ppmu\nis set to NULL and accessing its members results in a crash. Fix this\ncrash by checking if ppmu is set.\n\nFixes: 2ca13a4cc56c (\"powerpc/perf: Use regs->nip when SIAR is zero\")\nCc: stable@vger.kernel.org # v5.11+\nReported-by: Christophe Leroy <christophe.leroy@csgroup.eu>\nSigned-off-by: Athira Rajeev <atrajeev@linux.vnet.ibm.com>\nTested-by: Christophe Leroy <christophe.leroy@csgroup.eu>\nSigned-off-by: Michael Ellerman <mpe@ellerman.id.au>\nLink: https://lore.kernel.org/r/1623952506-1431-1-git-send-email-atrajeev@linux.vnet.ibm.com",
    "before_after_code_files": [
      "arch/powerpc/perf/core-book3s.c||arch/powerpc/perf/core-book3s.c"
    ]
  },
  "patch_diff": {
    "arch/powerpc/perf/core-book3s.c||arch/powerpc/perf/core-book3s.c": [
      "File: arch/powerpc/perf/core-book3s.c -> arch/powerpc/perf/core-book3s.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2254:  bool use_siar = regs_use_siar(regs);",
      "2255:  unsigned long siar = mfspr(SPRN_SIAR);",
      "2258:   if (siar)",
      "2259:    return siar;",
      "2260:   else",
      "",
      "[Removed Lines]",
      "2257:  if (ppmu->flags & PPMU_P10_DD1) {",
      "",
      "[Added Lines]",
      "2257:  if (ppmu && (ppmu->flags & PPMU_P10_DD1)) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "3c69a5f22223fa3e312689ec218b5059784d49d7",
      "candidate_info": {
        "commit_hash": "3c69a5f22223fa3e312689ec218b5059784d49d7",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/3c69a5f22223fa3e312689ec218b5059784d49d7",
        "files": [
          "arch/powerpc/perf/core-book3s.c"
        ],
        "message": "powerpc/perf: Fix the check for SIAR value\n\nIncase of random sampling, there can be scenarios where\nSample Instruction Address Register(SIAR) may not latch\nto the sampled instruction and could result in\nthe value of 0. In these scenarios it is preferred to\nreturn regs->nip. These corner cases are seen in the\nprevious generation (p9) also.\n\nPatch adds the check for SIAR value along with regs_use_siar\nand siar_valid checks so that the function will return\nregs->nip incase SIAR is zero.\n\nPatch drops the code under PPMU_P10_DD1 flag check\nwhich handles SIAR 0 case only for Power10 DD1.\n\nFixes: 2ca13a4cc56c9 (\"powerpc/perf: Use regs->nip when SIAR is zero\")\nSigned-off-by: Kajol Jain <kjain@linux.ibm.com>\nSigned-off-by: Michael Ellerman <mpe@ellerman.id.au>\nLink: https://lore.kernel.org/r/20210818171556.36912-3-kjain@linux.ibm.com",
        "before_after_code_files": [
          "arch/powerpc/perf/core-book3s.c||arch/powerpc/perf/core-book3s.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "arch/powerpc/perf/core-book3s.c||arch/powerpc/perf/core-book3s.c"
          ],
          "candidate": [
            "arch/powerpc/perf/core-book3s.c||arch/powerpc/perf/core-book3s.c"
          ]
        }
      },
      "candidate_diff": {
        "arch/powerpc/perf/core-book3s.c||arch/powerpc/perf/core-book3s.c": [
          "File: arch/powerpc/perf/core-book3s.c -> arch/powerpc/perf/core-book3s.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2261: unsigned long perf_instruction_pointer(struct pt_regs *regs)",
          "2262: {",
          "2264:  unsigned long siar = mfspr(SPRN_SIAR);",
          "2272:   return siar + perf_ip_adjust(regs);",
          "2273:  else",
          "2274:   return regs->nip;",
          "",
          "[Removed Lines]",
          "2263:  bool use_siar = regs_use_siar(regs);",
          "2266:  if (ppmu && (ppmu->flags & PPMU_P10_DD1)) {",
          "2267:   if (siar)",
          "2268:    return siar;",
          "2269:   else",
          "2270:    return regs->nip;",
          "2271:  } else if (use_siar && siar_valid(regs))",
          "",
          "[Added Lines]",
          "2265:  if (regs_use_siar(regs) && siar_valid(regs) && siar)",
          "",
          "---------------"
        ]
      }
    }
  ]
}