{
  "cve_id": "CVE-2012-2330",
  "cve_desc": "The Update method in src/node_http_parser.cc in Node.js before 0.6.17 and 0.7 before 0.7.8 does not properly check the length of a string, which allows remote attackers to obtain sensitive information (request header contents) and possibly spoof HTTP headers via a zero length string.",
  "repo": "joyent/node",
  "patch_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
  "patch_info": {
    "commit_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
    "repo": "joyent/node",
    "commit_url": "https://github.com/joyent/node/commit/c9a231d",
    "files": [
      "src/node_http_parser.cc"
    ],
    "message": "typo in node_http_parser",
    "before_after_code_files": [
      "src/node_http_parser.cc||src/node_http_parser.cc"
    ]
  },
  "patch_diff": {
    "src/node_http_parser.cc||src/node_http_parser.cc": [
      "File: src/node_http_parser.cc -> src/node_http_parser.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "191:   void Update(const char* str, size_t size) {",
      "192:     if (str_ == NULL)",
      "193:       str_ = str;",
      "197:       char* s = new char[size_ + size];",
      "",
      "[Removed Lines]",
      "194:     else if (on_heap_ || str_ + size != str) {",
      "",
      "[Added Lines]",
      "194:     else if (on_heap_ || str_ + size_ != str) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "42281124d4b83b0e99baf5d56b696ef242399f51",
      "candidate_info": {
        "commit_hash": "42281124d4b83b0e99baf5d56b696ef242399f51",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/42281124d4b83b0e99baf5d56b696ef242399f51",
        "files": [
          "lib/child_process.js",
          "src/node.js"
        ],
        "message": "child_process: add isolates support\n\nPassing an options object with {thread:true} to .fork() or .spawn() will run the\ntarget script in a thread instead of a separate process.",
        "before_after_code_files": [
          "lib/child_process.js||lichild_process.js",
          "src/node.js||src/node.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/child_process.js||lichild_process.js": [
          "File: lib/child_process.js -> lichild_process.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "167:   args = args ? args.slice(0) : [];",
          "168:   args.unshift(modulePath);",
          "176:   if (options.stdinStream) {",
          "177:     throw new Error('stdinStream not allowed for fork()');",
          "178:   }",
          "",
          "[Removed Lines]",
          "170:   if (options.thread) {",
          "171:     if (!process.features.isolates) {",
          "172:       throw new Error('node compiled without isolate support');",
          "173:     }",
          "174:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "191:   options.env.NODE_CHANNEL_FD = 42;",
          "196:   var child = spawn(process.execPath, args, options);",
          "200:   child.on('exit', function() {",
          "201:     if (child._channel) {",
          "",
          "[Removed Lines]",
          "194:   options.stdinStream = createPipe(true);",
          "198:   setupChannel(child, options.stdinStream);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "358:     envPairs.push(key + '=' + env[key]);",
          "359:   }",
          "363:   child.spawn({",
          "364:     file: file,",
          "",
          "[Removed Lines]",
          "361:   var child = new ChildProcess();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "521:   }",
          "522: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/node.js||src/node.js": [
          "File: src/node.js -> src/node.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "120:         });",
          "121:       }",
          "122:     }",
          "123:   }",
          "125:   startup.globalVariables = function() {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "124:     if (process.tid === 1) return;",
          "127:     process.send = function(msg) {",
          "128:       if (typeof msg === 'undefined') throw new TypeError('Bad argument.');",
          "129:       msg = JSON.stringify(msg);",
          "130:       msg = new Buffer(msg);",
          "131:       return process._send(msg);",
          "132:     };",
          "134:     process._onmessage = function(msg) {",
          "135:       msg = JSON.parse('' + msg);",
          "136:       process.emit('message', msg);",
          "137:     };",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "571a51989e282edbe3d5e380797aa41498863514",
      "candidate_info": {
        "commit_hash": "571a51989e282edbe3d5e380797aa41498863514",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/571a51989e282edbe3d5e380797aa41498863514",
        "files": [
          "deps/uv/src/unix/linux.c",
          "deps/uv/test/test-ref.c",
          "deps/uv/test/test-tty.c"
        ],
        "message": "Upgrade libuv to 66a959c4052",
        "before_after_code_files": [
          "deps/uv/src/unix/linux.c||deps/uv/src/unix/linux.c",
          "deps/uv/test/test-ref.c||deps/uv/test/test-ref.c",
          "deps/uv/test/test-tty.c||deps/uv/test/test-tty.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "deps/uv/src/unix/linux.c||deps/uv/src/unix/linux.c": [
          "File: deps/uv/src/unix/linux.c -> deps/uv/src/unix/linux.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "170: #if HAVE_INOTIFY_INIT || HAVE_INOTIFY_INIT1",
          "172: static int new_inotify_fd(void) {",
          "176:   int fd;",
          "178:   if ((fd = inotify_init()) == -1)",
          "179:     return -1;",
          "",
          "[Removed Lines]",
          "173: #if HAVE_INOTIFY_INIT1",
          "174:   return inotify_init1(IN_NONBLOCK | IN_CLOEXEC);",
          "175: #else",
          "",
          "[Added Lines]",
          "175: #if HAVE_INOTIFY_INIT1",
          "176:   fd = inotify_init1(IN_NONBLOCK | IN_CLOEXEC);",
          "177:   if (fd != -1)",
          "178:     return fd;",
          "179:   if (errno != ENOSYS)",
          "180:     return -1;",
          "181: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "184:   }",
          "186:   return fd;",
          "188: }",
          "",
          "[Removed Lines]",
          "187: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "deps/uv/test/test-ref.c||deps/uv/test/test-ref.c": [
          "File: deps/uv/test/test-ref.c -> deps/uv/test/test-ref.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "45:   ASSERT(status == 0);",
          "47:   uv_write(&write_req, req->handle, &buf, 1, (uv_write_cb) fail_cb);",
          "49: }",
          "",
          "[Removed Lines]",
          "48:   uv_unref(uv_default_loop()); // uv_write refs the loop",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "55:   ASSERT(status == 0);",
          "57:   uv_shutdown(&shutdown_req, req->handle, (uv_shutdown_cb) fail_cb);",
          "59: }",
          "",
          "[Removed Lines]",
          "58:   uv_unref(uv_default_loop()); // uv_shutdown refs the loop",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "deps/uv/test/test-tty.c||deps/uv/test/test-tty.c": [
          "File: deps/uv/test/test-tty.c -> deps/uv/test/test-tty.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: #ifdef _WIN32",
          "26: # include <io.h>",
          "27: # include <windows.h>",
          "29: # include <fcntl.h>",
          "30: # include <unistd.h>",
          "31: #endif",
          "",
          "[Removed Lines]",
          "28: #else // Unix",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0a89e8b838caf0769807c4e9a665a70d2e63b032",
      "candidate_info": {
        "commit_hash": "0a89e8b838caf0769807c4e9a665a70d2e63b032",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/0a89e8b838caf0769807c4e9a665a70d2e63b032",
        "files": [
          "lib/child_process.js",
          "test/simple/test-child-process-fork3.js"
        ],
        "message": "child_process: add .stdin stream to forks\n\nRemove test as it doesn't make any sense after the latest stdio API\nchanges.",
        "before_after_code_files": [
          "lib/child_process.js||lichild_process.js",
          "test/simple/test-child-process-fork3.js||test/simple/test-child-process-fork3.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/child_process.js||lichild_process.js": [
          "File: lib/child_process.js -> lichild_process.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "442:   return spawn(process.execPath, args, options);",
          "443: };",
          "",
          "[Removed Lines]",
          "440:   options.stdio = options.silent ? ['ipc', 'pipe', 'pipe'] : ['ipc', 1, 2];",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/simple/test-child-process-fork3.js||test/simple/test-child-process-fork3.js": [
          "File: test/simple/test-child-process-fork3.js -> test/simple/test-child-process-fork3.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9603f08f21987d5367d98267a16179a61e4400c1",
      "candidate_info": {
        "commit_hash": "9603f08f21987d5367d98267a16179a61e4400c1",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/9603f08f21987d5367d98267a16179a61e4400c1",
        "files": [
          "deps/uv/include/uv.h",
          "deps/uv/src/unix/error.c",
          "deps/uv/src/unix/udp.c",
          "deps/uv/src/win/core.c",
          "deps/uv/src/win/tcp.c"
        ],
        "message": "uv: upgrade to 24c062c",
        "before_after_code_files": [
          "deps/uv/include/uv.h||deps/uv/include/uv.h",
          "deps/uv/src/unix/error.c||deps/uv/src/unix/error.c",
          "deps/uv/src/unix/udp.c||deps/uv/src/unix/udp.c",
          "deps/uv/src/win/core.c||deps/uv/src/win/core.c",
          "deps/uv/src/win/tcp.c||deps/uv/src/win/tcp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "deps/uv/include/uv.h||deps/uv/include/uv.h": [
          "File: deps/uv/include/uv.h -> deps/uv/include/uv.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "120:   XX( 53, ENOTEMPTY, \"directory not empty\") \\",
          "121:   XX( 54, ENOSPC, \"no space left on device\") \\",
          "122:   XX( 55, EIO, \"i/o error\") \\",
          "127: #define UV_ERRNO_GEN(val, name, s) UV_##name = val,",
          "",
          "[Removed Lines]",
          "123:   XX( 56, EROFS, \"read-only file system\" ) \\",
          "124:   XX( 57, ENODEV, \"no such device\" )",
          "",
          "[Added Lines]",
          "123:   XX( 56, EROFS, \"read-only file system\") \\",
          "124:   XX( 57, ENODEV, \"no such device\") \\",
          "125:   XX( 58, ESPIPE, \"invalid seek\") \\",
          "",
          "---------------"
        ],
        "deps/uv/src/unix/error.c||deps/uv/src/unix/error.c": [
          "File: deps/uv/src/unix/error.c -> deps/uv/src/unix/error.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "68:     case EAFNOSUPPORT: return UV_EAFNOSUPPORT;",
          "69:     case EBADF: return UV_EBADF;",
          "70:     case EPIPE: return UV_EPIPE;",
          "71:     case EAGAIN: return UV_EAGAIN;",
          "72: #if EWOULDBLOCK != EAGAIN",
          "73:     case EWOULDBLOCK: return UV_EAGAIN;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "71:     case ESPIPE: return UV_ESPIPE;",
          "",
          "---------------"
        ],
        "deps/uv/src/unix/udp.c||deps/uv/src/unix/udp.c": [
          "File: deps/uv/src/unix/udp.c -> deps/uv/src/unix/udp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "86:     req = ngx_queue_data(q, uv_udp_send_t, queue);",
          "87:     uv__req_unregister(handle->loop, req);",
          "89:     if (req->send_cb) {",
          "91:       uv__set_artificial_error(handle->loop, UV_EINTR);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "89:     if (req->bufs != req->bufsml)",
          "90:       free(req->bufs);",
          "91:     req->bufs = NULL;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "172:     if (req->bufs != req->bufsml)",
          "173:       free(req->bufs);",
          "175:     if (req->send_cb == NULL)",
          "176:       continue;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "178:     req->bufs = NULL;",
          "",
          "---------------"
        ],
        "deps/uv/src/win/core.c||deps/uv/src/win/core.c": [
          "File: deps/uv/src/win/core.c -> deps/uv/src/win/core.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "70:     uv_fatal_error(GetLastError(), \"CreateIoCompletionPort\");",
          "71:   }",
          "73:   uv_update_time(loop);",
          "75:   ngx_queue_init(&loop->handle_queue);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "75:   loop->time = 0;",
          "",
          "---------------"
        ],
        "deps/uv/src/win/tcp.c||deps/uv/src/win/tcp.c": [
          "File: deps/uv/src/win/tcp.c -> deps/uv/src/win/tcp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "548:   if(!handle->accept_reqs) {",
          "549:     handle->accept_reqs = (uv_tcp_accept_t*)",
          "551:     if (!handle->accept_reqs) {",
          "552:       uv_fatal_error(ERROR_OUTOFMEMORY, \"malloc\");",
          "553:     }",
          "",
          "[Removed Lines]",
          "550:       malloc(simultaneous_accepts * sizeof(uv_tcp_accept_t));",
          "",
          "[Added Lines]",
          "550:       malloc(uv_simultaneous_server_accepts * sizeof(uv_tcp_accept_t));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "572:       uv_tcp_queue_accept(handle, req);",
          "573:     }",
          "574:   }",
          "576:   return 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "578:     for (i = simultaneous_accepts; i < uv_simultaneous_server_accepts; i++) {",
          "579:       req = &handle->accept_reqs[i];",
          "580:       uv_req_init(loop, (uv_req_t*) req);",
          "581:       req->type = UV_ACCEPT;",
          "582:       req->accept_socket = INVALID_SOCKET;",
          "583:       req->data = handle;",
          "584:       req->wait_handle = INVALID_HANDLE_VALUE;",
          "585:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0c91b0e48e0358cea2e52857275ca5880bf47a54",
      "candidate_info": {
        "commit_hash": "0c91b0e48e0358cea2e52857275ca5880bf47a54",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/0c91b0e48e0358cea2e52857275ca5880bf47a54",
        "files": [
          "deps/uv/config-unix.mk",
          "deps/uv/src/unix/darwin.c",
          "deps/uv/src/unix/linux/linux-core.c",
          "deps/uv/src/unix/openbsd.c",
          "deps/uv/src/unix/pipe.c",
          "deps/uv/src/unix/proctitle.c",
          "deps/uv/src/unix/sunos.c",
          "deps/uv/uv.gyp"
        ],
        "message": "uv: Upgrade to 94355e4",
        "before_after_code_files": [
          "deps/uv/config-unix.mk||deps/uv/config-unix.mk",
          "deps/uv/src/unix/darwin.c||deps/uv/src/unix/darwin.c",
          "deps/uv/src/unix/linux/linux-core.c||deps/uv/src/unix/linux/linux-core.c",
          "deps/uv/src/unix/openbsd.c||deps/uv/src/unix/openbsd.c",
          "deps/uv/src/unix/pipe.c||deps/uv/src/unix/pipe.c",
          "deps/uv/src/unix/proctitle.c||deps/uv/src/unix/proctitle.c",
          "deps/uv/src/unix/sunos.c||deps/uv/src/unix/sunos.c",
          "deps/uv/uv.gyp||deps/uv/uv.gyp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "deps/uv/config-unix.mk||deps/uv/config-unix.mk": [
          "File: deps/uv/config-unix.mk -> deps/uv/config-unix.mk",
          "--- Hunk 1 ---",
          "[Context before]",
          "128: RUNNER_LINKFLAGS += -pthread",
          "129: endif",
          "135: RUNNER_LIBS=",
          "136: RUNNER_SRC=test/runner-unix.c",
          "",
          "[Removed Lines]",
          "131: ifneq (FreeBSD,$(uname_S))",
          "132: OBJS += src/unix/proctitle.o",
          "133: endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "deps/uv/src/unix/darwin.c||deps/uv/src/unix/darwin.c": [
          "File: deps/uv/src/unix/darwin.c -> deps/uv/src/unix/darwin.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "41: #include <sys/sysctl.h>",
          "44: #if TARGET_OS_IPHONE",
          "46: uint64_t uv_hrtime() {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "44: static char *process_title;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "136: }",
          "139: uv_err_t uv_resident_set_memory(size_t* rss) {",
          "140:   struct task_basic_info t_info;",
          "141:   mach_msg_type_number_t t_info_count = TASK_BASIC_INFO_COUNT;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "141: char** uv_setup_args(int argc, char** argv) {",
          "142:   process_title = argc ? strdup(argv[0]) : NULL;",
          "143:   return argv;",
          "144: }",
          "147: uv_err_t uv_set_process_title(const char* title) {",
          "149:   return uv__new_artificial_error(UV_ENOSYS);",
          "150: }",
          "153: uv_err_t uv_get_process_title(char* buffer, size_t size) {",
          "154:   if (process_title) {",
          "155:     strncpy(buffer, process_title, size);",
          "156:   } else {",
          "157:     if (size > 0) {",
          "158:       buffer[0] = '\\0';",
          "159:     }",
          "160:   }",
          "162:   return uv_ok_;",
          "163: }",
          "",
          "---------------"
        ],
        "deps/uv/src/unix/linux/linux-core.c||deps/uv/src/unix/linux/linux-core.c": [
          "File: deps/uv/src/unix/linux/linux-core.c -> deps/uv/src/unix/linux/linux-core.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "59: static char buf[MAXPATHLEN + 1];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "61: static struct {",
          "62:   char *str;",
          "63:   size_t len;",
          "64: } process_title;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "107: }",
          "110: uv_err_t uv_resident_set_memory(size_t* rss) {",
          "111:   FILE* f;",
          "112:   int itmp;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "115: char** uv_setup_args(int argc, char** argv) {",
          "116:   char **new_argv;",
          "117:   char **new_env;",
          "118:   size_t size;",
          "119:   int envc;",
          "120:   char *s;",
          "121:   int i;",
          "123:   for (envc = 0; environ[envc]; envc++);",
          "125:   s = envc ? environ[envc - 1] : argv[argc - 1];",
          "127:   process_title.str = argv[0];",
          "128:   process_title.len = s + strlen(s) + 1 - argv[0];",
          "130:   size = process_title.len;",
          "131:   size += (argc + 1) * sizeof(char **);",
          "132:   size += (envc + 1) * sizeof(char **);",
          "134:   if ((s = (char *) malloc(size)) == NULL) {",
          "135:     process_title.str = NULL;",
          "136:     process_title.len = 0;",
          "137:     return argv;",
          "138:   }",
          "140:   new_argv = (char **) s;",
          "141:   new_env = new_argv + argc + 1;",
          "142:   s = (char *) (new_env + envc + 1);",
          "143:   memcpy(s, process_title.str, process_title.len);",
          "145:   for (i = 0; i < argc; i++)",
          "146:     new_argv[i] = s + (argv[i] - argv[0]);",
          "147:   new_argv[argc] = NULL;",
          "149:   s += environ[0] - argv[0];",
          "151:   for (i = 0; i < envc; i++)",
          "152:     new_env[i] = s + (environ[i] - environ[0]);",
          "153:   new_env[envc] = NULL;",
          "155:   environ = new_env;",
          "156:   return new_argv;",
          "157: }",
          "160: uv_err_t uv_set_process_title(const char* title) {",
          "162:   if (process_title.len)",
          "163:     strncpy(process_title.str, title, process_title.len - 1);",
          "165:   return uv_ok_;",
          "166: }",
          "169: uv_err_t uv_get_process_title(char* buffer, size_t size) {",
          "170:   if (process_title.str) {",
          "171:     strncpy(buffer, process_title.str, size);",
          "172:   } else {",
          "173:     if (size > 0) {",
          "174:       buffer[0] = '\\0';",
          "175:     }",
          "176:   }",
          "178:   return uv_ok_;",
          "179: }",
          "",
          "---------------"
        ],
        "deps/uv/src/unix/openbsd.c||deps/uv/src/unix/openbsd.c": [
          "File: deps/uv/src/unix/openbsd.c -> deps/uv/src/unix/openbsd.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "40: #define NANOSEC ((uint64_t) 1e9)",
          "43: uint64_t uv_hrtime(void) {",
          "44:   struct timespec ts;",
          "45:   clock_gettime(CLOCK_MONOTONIC, &ts);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "43: static char *process_title;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "134: }",
          "137: uv_err_t uv_resident_set_memory(size_t* rss) {",
          "138:   kvm_t *kd = NULL;",
          "139:   struct kinfo_proc *kinfo = NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "140: char** uv_setup_args(int argc, char** argv) {",
          "141:   process_title = argc ? strdup(argv[0]) : NULL;",
          "142:   return argv;",
          "143: }",
          "146: uv_err_t uv_set_process_title(const char* title) {",
          "147:   if (process_title) free(process_title);",
          "148:   process_title = strdup(title);",
          "149:   setproctitle(title);",
          "150:   return uv_ok_;",
          "151: }",
          "154: uv_err_t uv_get_process_title(char* buffer, size_t size) {",
          "155:   if (process_title) {",
          "156:     strncpy(buffer, process_title, size);",
          "157:   } else {",
          "158:     if (size > 0) {",
          "159:       buffer[0] = '\\0';",
          "160:     }",
          "161:   }",
          "163:   return uv_ok_;",
          "164: }",
          "",
          "---------------"
        ],
        "deps/uv/src/unix/pipe.c||deps/uv/src/unix/pipe.c": [
          "File: deps/uv/src/unix/pipe.c -> deps/uv/src/unix/pipe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "170:                     uv_connect_cb cb) {",
          "171:   struct sockaddr_un saddr;",
          "172:   int saved_errno;",
          "175:   int r;",
          "177:   saved_errno = errno;",
          "186:   memset(&saddr, 0, sizeof saddr);",
          "187:   uv_strlcpy(saddr.sun_path, name, sizeof(saddr.sun_path));",
          "",
          "[Removed Lines]",
          "173:   int sockfd;",
          "174:   int status;",
          "178:   sockfd = -1;",
          "179:   status = -1;",
          "181:   if ((sockfd = uv__socket(AF_UNIX, SOCK_STREAM, 0)) == -1) {",
          "182:     uv__set_sys_error(handle->loop, errno);",
          "183:     goto out;",
          "184:   }",
          "",
          "[Added Lines]",
          "173:   int new_sock;",
          "174:   int err;",
          "178:   new_sock = (handle->fd == -1);",
          "179:   err = -1;",
          "181:   if (new_sock)",
          "182:     if ((handle->fd = uv__socket(AF_UNIX, SOCK_STREAM, 0)) == -1)",
          "183:       goto out;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "193:   do {",
          "195:   }",
          "196:   while (r == -1 && errno == EINTR);",
          "201:     goto out;",
          "207:   uv__io_start(handle->loop, &handle->read_watcher);",
          "208:   uv__io_start(handle->loop, &handle->write_watcher);",
          "211: out:",
          "213:   handle->connect_req = req;",
          "215:   uv__req_init(handle->loop, req, UV_CONNECT);",
          "",
          "[Removed Lines]",
          "194:     r = connect(sockfd, (struct sockaddr*)&saddr, sizeof saddr);",
          "198:   if (r == -1) {",
          "199:     status = errno;",
          "200:     close(sockfd);",
          "202:   }",
          "204:   uv__stream_open((uv_stream_t*)handle,",
          "205:                   sockfd,",
          "206:                   UV_STREAM_READABLE | UV_STREAM_WRITABLE);",
          "209:   status = 0;",
          "",
          "[Added Lines]",
          "193:     r = connect(handle->fd, (struct sockaddr*)&saddr, sizeof saddr);",
          "197:   if (r == -1)",
          "200:   if (new_sock)",
          "201:     if (uv__stream_open((uv_stream_t*)handle,",
          "202:                         handle->fd,",
          "203:                         UV_STREAM_READABLE | UV_STREAM_WRITABLE))",
          "204:       goto out;",
          "208:   err = 0;",
          "",
          "---------------"
        ],
        "deps/uv/src/unix/proctitle.c||deps/uv/src/unix/proctitle.c": [
          "File: deps/uv/src/unix/proctitle.c -> deps/uv/src/unix/proctitle.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "deps/uv/src/unix/sunos.c||deps/uv/src/unix/sunos.c": [
          "File: deps/uv/src/unix/sunos.c -> deps/uv/src/unix/sunos.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "241: uv_err_t uv_resident_set_memory(size_t* rss) {",
          "242:   psinfo_t psinfo;",
          "243:   uv_err_t err;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "241: char** uv_setup_args(int argc, char** argv) {",
          "242:   return argv;",
          "243: }",
          "246: uv_err_t uv_set_process_title(const char* title) {",
          "247:   return uv_ok_;",
          "248: }",
          "251: uv_err_t uv_get_process_title(char* buffer, size_t size) {",
          "252:   if (size > 0) {",
          "253:     buffer[0] = '\\0';",
          "254:   }",
          "255:   return uv_ok_;",
          "256: }",
          "",
          "---------------"
        ],
        "deps/uv/uv.gyp||deps/uv/uv.gyp": [
          "File: deps/uv/uv.gyp -> deps/uv/uv.gyp",
          "--- Hunk 1 ---",
          "[Context before]",
          "287:         [ 'OS==\"mac\" or OS==\"freebsd\" or OS==\"openbsd\" or OS==\"netbsd\"', {",
          "288:           'sources': [ 'src/unix/kqueue.c' ],",
          "289:         }],",
          "293:       ]",
          "294:     },",
          "",
          "[Removed Lines]",
          "290:         [ 'OS!=\"win\" and OS!=\"freebsd\"', {",
          "291:           'sources': [ 'src/unix/proctitle.c' ],",
          "292:         }],",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}