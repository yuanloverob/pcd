{
  "cve_id": "CVE-2019-15140",
  "cve_desc": "coders/mat.c in ImageMagick 7.0.8-43 Q16 allows remote attackers to cause a denial of service (use-after-free and application crash) or possibly have unspecified other impact by crafting a Matlab image file that is mishandled in ReadImage in MagickCore/constitute.c.",
  "repo": "ImageMagick/ImageMagick",
  "patch_hash": "f7206618d27c2e69d977abf40e3035a33e5f6be0",
  "patch_info": {
    "commit_hash": "f7206618d27c2e69d977abf40e3035a33e5f6be0",
    "repo": "ImageMagick/ImageMagick",
    "commit_url": "https://github.com/ImageMagick/ImageMagick/commit/f7206618d27c2e69d977abf40e3035a33e5f6be0",
    "files": [
      "coders/mat.c"
    ],
    "message": "https://github.com/ImageMagick/ImageMagick/issues/1554",
    "before_after_code_files": [
      "coders/mat.c||coders/mat.c"
    ]
  },
  "patch_diff": {
    "coders/mat.c||coders/mat.c": [
      "File: coders/mat.c -> coders/mat.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "641:   {",
      "643:      Object parser loop.",
      "645:     ldblk=ReadBlobLSBLong(image);",
      "646:     if ((ldblk > 9999) || (ldblk < 0))",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "961:       if (clone_info != (ImageInfo *) NULL)",
      "962:         clone_info=DestroyImageInfo(clone_info);",
      "963:       ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");",
      "964:     }",
      "966:   filepos = TellBlob(image);",
      "968:   {",
      "969:     Frames = 1;",
      "970:     if (filepos != (unsigned int) filepos)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "975:     MATLAB_HDR.DataType = ReadBlobXXXLong(image);",
      "977:     MATLAB_HDR.ObjectSize = ReadBlobXXXLong(image);",
      "978:     if(EOFBlob(image)) break;",
      "979:     if((MagickSizeType) (MATLAB_HDR.ObjectSize+filepos) > GetBlobSize(image))",
      "",
      "[Removed Lines]",
      "976:     if(EOFBlob(image)) break;",
      "",
      "[Added Lines]",
      "977:     if(EOFBlob(image)) break;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1277:           }",
      "1278:         if(ReadBlob(image2,ldblk,(unsigned char *)BImgBuff) != (ssize_t) ldblk)",
      "1279:           {",
      "1280:             if (logging) (void)LogMagickEvent(CoderEvent,GetMagickModule(),",
      "1281:               \"  MAT cannot read scanrow %u from a file.\", (unsigned)(MATLAB_HDR.SizeY-i-1));",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1280:           {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "784105bcbb3adb6cc71820dcca34732bf37d64f9",
      "candidate_info": {
        "commit_hash": "784105bcbb3adb6cc71820dcca34732bf37d64f9",
        "repo": "ImageMagick/ImageMagick",
        "commit_url": "https://github.com/ImageMagick/ImageMagick/commit/784105bcbb3adb6cc71820dcca34732bf37d64f9",
        "files": [
          "MagickCore/annotate.c",
          "MagickCore/magick-type.h",
          "MagickCore/nt-base.c",
          "MagickCore/property.c",
          "MagickCore/threshold.c",
          "coders/jpeg.c",
          "coders/mat.c"
        ],
        "message": "Eliminate compiler warnings",
        "before_after_code_files": [
          "MagickCore/annotate.c||MagickCore/annotate.c",
          "MagickCore/magick-type.h||MagickCore/magick-type.h",
          "MagickCore/nt-base.c||MagickCore/nt-base.c",
          "MagickCore/property.c||MagickCore/property.c",
          "MagickCore/threshold.c||MagickCore/threshold.c",
          "coders/jpeg.c||coders/jpeg.c",
          "coders/mat.c||coders/mat.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "coders/mat.c||coders/mat.c"
          ],
          "candidate": [
            "coders/mat.c||coders/mat.c"
          ]
        }
      },
      "candidate_diff": {
        "MagickCore/annotate.c||MagickCore/annotate.c": [
          "File: MagickCore/annotate.c -> MagickCore/annotate.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1077: static size_t ComplexTextLayout(const Image *image,const DrawInfo *draw_info,",
          "1078:   const char *text,const size_t length,const FT_Face face,const FT_Int32 flags,",
          "1079:   GraphemeInfo **grapheme,ExceptionInfo *exception)",
          "1081: #if defined(MAGICKCORE_RAQM_DELEGATE)",
          "1082:   const char",
          "",
          "[Removed Lines]",
          "1080: {",
          "",
          "[Added Lines]",
          "1080: {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1161:   return(extent);",
          "1162: #else",
          "1163:   const char",
          "1167:     ft_status;",
          "1169:   register ssize_t",
          "1170:     i;",
          "1172:   ssize_t",
          "",
          "[Removed Lines]",
          "1166:   FT_Error",
          "",
          "[Added Lines]",
          "1167:     ft_status;",
          "",
          "---------------"
        ],
        "MagickCore/magick-type.h||MagickCore/magick-type.h": [
          "File: MagickCore/magick-type.h -> MagickCore/magick-type.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "181: #  define IsNaN(a) ((a) != (a))",
          "182: #endif",
          "183: #if !defined(INFINITY)",
          "185: #endif",
          "187: typedef struct _BlobInfo BlobInfo;",
          "",
          "[Removed Lines]",
          "184: #  define INFINITY (-logf(0f))",
          "",
          "[Added Lines]",
          "184: #  define INFINITY ((double) -logf(0f))",
          "",
          "---------------"
        ],
        "MagickCore/nt-base.c||MagickCore/nt-base.c": [
          "File: MagickCore/nt-base.c -> MagickCore/nt-base.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1800: %                                                                             %",
          "1801: %                                                                             %",
          "1802: %                                                                             %",
          "1804: %",
          "1805: %  NTOpenDirectory() opens the directory named by filename and associates a",
          "1806: %  directory stream with it.",
          "",
          "[Removed Lines]",
          "1803: %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%",
          "",
          "[Added Lines]",
          "1803: %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1808: %  The format of the NTOpenDirectory method is:",
          "1809: %",
          "1810: %      DIR *NTOpenDirectory(const char *path)",
          "1812: %  A description of each parameter follows:",
          "1813: %",
          "1814: %    o entry: Specifies a pointer to a DIR structure.",
          "",
          "[Removed Lines]",
          "1811: %",
          "",
          "[Added Lines]",
          "1811: %",
          "",
          "---------------"
        ],
        "MagickCore/property.c||MagickCore/property.c": [
          "File: MagickCore/property.c -> MagickCore/property.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "918:     ssize_t",
          "919:       offset;",
          "920:   } DirectoryInfo;",
          "922:   typedef struct _TagInfo",
          "923:   {",
          "924:     size_t",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "MagickCore/threshold.c||MagickCore/threshold.c": [
          "File: MagickCore/threshold.c -> MagickCore/threshold.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "563:     Free resources.",
          "567:   probability=(double *) RelinquishMagickMemory(probability);",
          "568:   sigma=(double *) RelinquishMagickMemory(sigma);",
          "569:   return(100.0*threshold/MaxIntensity);",
          "",
          "[Removed Lines]",
          "565:   myu=(double *) RelinquishMagickMemory(myu);",
          "566:   omega=(double *) RelinquishMagickMemory(omega);",
          "",
          "[Added Lines]",
          "565:   myu=(double *) RelinquishMagickMemory(myu);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "592:   ssize_t",
          "593:     end,",
          "595:     start,",
          "596:     threshold;",
          "",
          "[Removed Lines]",
          "594:     max,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "739:       break;",
          "740:     }",
          "741:     case OTSUThresholdMethod:",
          "743:     {",
          "744:       threshold=OTSUThreshold(image,histogram,exception);",
          "745:       break;",
          "",
          "[Removed Lines]",
          "742:     default:",
          "",
          "[Added Lines]",
          "740:     default:",
          "",
          "---------------"
        ],
        "coders/jpeg.c||coders/jpeg.c": [
          "File: coders/jpeg.c -> coders/jpeg.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2055:   for (name=GetNextImageProfile(image); name != (const char *) NULL; )",
          "2056:   {",
          "2057:     profile=GetImageProfile(image,name);",
          "2059:     if (LocaleNCompare(name,\"APP\",3) == 0)",
          "2060:       {",
          "2061:         int",
          "",
          "[Removed Lines]",
          "2058:     length=GetStringInfoLength(profile);",
          "",
          "[Added Lines]",
          "2058:     length=GetStringInfoLength(profile);",
          "",
          "---------------"
        ],
        "coders/mat.c||coders/mat.c": [
          "File: coders/mat.c -> coders/mat.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "962:       if (clone_info != (ImageInfo *) NULL)",
          "963:         clone_info=DestroyImageInfo(clone_info);",
          "964:       ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");",
          "965:     }",
          "967:   filepos = TellBlob(image);",
          "969:   {",
          "970:     Frames = 1;",
          "971:     if(filepos > GetBlobSize(image) || filepos < 0)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1283:            if ((image != image2) && (image2 != (Image *) NULL))",
          "1284:               image2=DestroyImage(image2);",
          "1285:             if (clone_info != (ImageInfo *) NULL)",
          "1287:             if (quantum_info != (QuantumInfo *) NULL)",
          "1288:               quantum_info=DestroyQuantumInfo(quantum_info);",
          "1289:             BImgBuff=RelinquishMagickMemory(BImgBuff);",
          "",
          "[Removed Lines]",
          "1286:               clone_info=DestroyImageInfo(clone_info);",
          "",
          "[Added Lines]",
          "1286:               clone_info=DestroyImageInfo(clone_info);",
          "",
          "---------------"
        ]
      }
    }
  ]
}