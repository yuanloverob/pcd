{
  "cve_id": "CVE-2017-15191",
  "cve_desc": "In Wireshark 2.4.0 to 2.4.1, 2.2.0 to 2.2.9, and 2.0.0 to 2.0.15, the DMP dissector could crash. This was addressed in epan/dissectors/packet-dmp.c by validating a string length.",
  "repo": "wireshark/wireshark",
  "patch_hash": "8dbb21dfde14221dab09b6b9c7719b9067c1f06e",
  "patch_info": {
    "commit_hash": "8dbb21dfde14221dab09b6b9c7719b9067c1f06e",
    "repo": "wireshark/wireshark",
    "commit_url": "https://github.com/wireshark/wireshark/commit/8dbb21dfde14221dab09b6b9c7719b9067c1f06e",
    "files": [
      "epan/dissectors/packet-dmp.c"
    ],
    "message": "DMP: check 7bit string length before decoding it\n\nBug: 14068\nLink: https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=3372\nChange-Id: Ib9ff63e2ef8d3c2546f357534c374a662e70e43c\nReviewed-on: https://code.wireshark.org/review/23591\nReviewed-by: Pascal Quantin <pascal.quantin@gmail.com>\nPetri-Dish: Pascal Quantin <pascal.quantin@gmail.com>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Peter Wu <peter@lekensteyn.nl>",
    "before_after_code_files": [
      "epan/dissectors/packet-dmp.c||epan/dissectors/packet-dmp.c"
    ]
  },
  "patch_diff": {
    "epan/dissectors/packet-dmp.c||epan/dissectors/packet-dmp.c": [
      "File: epan/dissectors/packet-dmp.c -> epan/dissectors/packet-dmp.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1622: static gchar *dissect_7bit_string (tvbuff_t *tvb, gint offset, gint length, guchar *byte_rest)",
      "1623: {",
      "1626:   guchar  rest = 0, bits = 1;",
      "1627:   gint    len = 0, i;",
      "1638:     }",
      "1639:   }",
      "",
      "[Removed Lines]",
      "1624:   guchar *encoded = (guchar *)tvb_memdup (wmem_packet_scope(), tvb, offset, length);",
      "1625:   guchar *decoded = (guchar *)wmem_alloc0 (wmem_packet_scope(), (size_t)(length * 1.2) + 1);",
      "1629:   for (i = 0; i < length; i++) {",
      "1630:     decoded[len++] = encoded[i] >> bits | rest;",
      "1631:     rest = (encoded[i] << (7 - bits) & 0x7F);",
      "1632:     if (bits == 7) {",
      "1633:       decoded[len++] = rest;",
      "1634:       bits = 1;",
      "1635:       rest = 0;",
      "1636:     } else {",
      "1637:       bits++;",
      "",
      "[Added Lines]",
      "1624:   guchar *encoded, *decoded;",
      "1628:   if (length <= 0) {",
      "1629:     decoded = \"\";",
      "1630:   } else {",
      "1631:     encoded = (guchar *)tvb_memdup (wmem_packet_scope(), tvb, offset, length);",
      "1632:     decoded = (guchar *)wmem_alloc0 (wmem_packet_scope(), (size_t)(length * 1.2) + 1);",
      "1633:     for (i = 0; i < length; i++) {",
      "1634:       decoded[len++] = encoded[i] >> bits | rest;",
      "1635:       rest = (encoded[i] << (7 - bits) & 0x7F);",
      "1636:       if (bits == 7) {",
      "1637:         decoded[len++] = rest;",
      "1638:         bits = 1;",
      "1639:         rest = 0;",
      "1640:       } else {",
      "1641:         bits++;",
      "1642:       }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "bf1f1fd864ad3e45f95ad422dfc7e87aff4b82e6",
      "candidate_info": {
        "commit_hash": "bf1f1fd864ad3e45f95ad422dfc7e87aff4b82e6",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/bf1f1fd864ad3e45f95ad422dfc7e87aff4b82e6",
        "files": [
          "epan/dissectors/packet-dmp.c"
        ],
        "message": "DMP: check 7bit string length before decoding it\n\nBug: 14068\nLink: https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=3372\nChange-Id: Ib9ff63e2ef8d3c2546f357534c374a662e70e43c\nReviewed-on: https://code.wireshark.org/review/23591\nReviewed-by: Pascal Quantin <pascal.quantin@gmail.com>\nPetri-Dish: Pascal Quantin <pascal.quantin@gmail.com>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Peter Wu <peter@lekensteyn.nl>\n(cherry picked from commit 8dbb21dfde14221dab09b6b9c7719b9067c1f06e)\nReviewed-on: https://code.wireshark.org/review/23595\nReviewed-by: Michael Mann <mmann78@netscape.net>",
        "before_after_code_files": [
          "epan/dissectors/packet-dmp.c||epan/dissectors/packet-dmp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-dmp.c||epan/dissectors/packet-dmp.c"
          ],
          "candidate": [
            "epan/dissectors/packet-dmp.c||epan/dissectors/packet-dmp.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-dmp.c||epan/dissectors/packet-dmp.c": [
          "File: epan/dissectors/packet-dmp.c -> epan/dissectors/packet-dmp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1650: static gchar *dissect_7bit_string (tvbuff_t *tvb, gint offset, gint length)",
          "1651: {",
          "1654:   guchar  rest = 0, bits = 1;",
          "1655:   gint    len = 0, i;",
          "1666:     }",
          "1667:   }",
          "",
          "[Removed Lines]",
          "1652:   guchar *encoded = (guchar *)tvb_memdup (wmem_packet_scope(), tvb, offset, length);",
          "1653:   guchar *decoded = (guchar *)wmem_alloc0 (wmem_packet_scope(), (size_t)(length * 1.2) + 1);",
          "1657:   for (i = 0; i < length; i++) {",
          "1658:     decoded[len++] = encoded[i] >> bits | rest;",
          "1659:     rest = (encoded[i] << (7 - bits) & 0x7F);",
          "1660:     if (bits == 7) {",
          "1661:       decoded[len++] = rest;",
          "1662:       bits = 1;",
          "1663:       rest = 0;",
          "1664:     } else {",
          "1665:       bits++;",
          "",
          "[Added Lines]",
          "1652:   guchar *encoded, *decoded;",
          "1656:   if (length <= 0) {",
          "1657:     decoded = \"\";",
          "1658:   } else {",
          "1659:     encoded = (guchar *)tvb_memdup (wmem_packet_scope(), tvb, offset, length);",
          "1660:     decoded = (guchar *)wmem_alloc0 (wmem_packet_scope(), (size_t)(length * 1.2) + 1);",
          "1661:     for (i = 0; i < length; i++) {",
          "1662:       decoded[len++] = encoded[i] >> bits | rest;",
          "1663:       rest = (encoded[i] << (7 - bits) & 0x7F);",
          "1664:       if (bits == 7) {",
          "1665:         decoded[len++] = rest;",
          "1666:         bits = 1;",
          "1667:         rest = 0;",
          "1668:       } else {",
          "1669:         bits++;",
          "1670:       }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3d8f82c24fcf3fa28624ad5e09584767426562f5",
      "candidate_info": {
        "commit_hash": "3d8f82c24fcf3fa28624ad5e09584767426562f5",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/3d8f82c24fcf3fa28624ad5e09584767426562f5",
        "files": [
          "epan/dissectors/packet-dmp.c"
        ],
        "message": "DMP: check 7bit string length before decoding it\n\nBug: 14068\nLink: https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=3372\nChange-Id: Ib9ff63e2ef8d3c2546f357534c374a662e70e43c\nReviewed-on: https://code.wireshark.org/review/23591\nReviewed-by: Pascal Quantin <pascal.quantin@gmail.com>\nPetri-Dish: Pascal Quantin <pascal.quantin@gmail.com>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Peter Wu <peter@lekensteyn.nl>\n(cherry picked from commit 8dbb21dfde14221dab09b6b9c7719b9067c1f06e)\nReviewed-on: https://code.wireshark.org/review/23593",
        "before_after_code_files": [
          "epan/dissectors/packet-dmp.c||epan/dissectors/packet-dmp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-dmp.c||epan/dissectors/packet-dmp.c"
          ],
          "candidate": [
            "epan/dissectors/packet-dmp.c||epan/dissectors/packet-dmp.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-dmp.c||epan/dissectors/packet-dmp.c": [
          "File: epan/dissectors/packet-dmp.c -> epan/dissectors/packet-dmp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1622: static gchar *dissect_7bit_string (tvbuff_t *tvb, gint offset, gint length, guchar *byte_rest)",
          "1623: {",
          "1626:   guchar  rest = 0, bits = 1;",
          "1627:   gint    len = 0, i;",
          "1638:     }",
          "1639:   }",
          "",
          "[Removed Lines]",
          "1624:   guchar *encoded = (guchar *)tvb_memdup (wmem_packet_scope(), tvb, offset, length);",
          "1625:   guchar *decoded = (guchar *)wmem_alloc0 (wmem_packet_scope(), (size_t)(length * 1.2) + 1);",
          "1629:   for (i = 0; i < length; i++) {",
          "1630:     decoded[len++] = encoded[i] >> bits | rest;",
          "1631:     rest = (encoded[i] << (7 - bits) & 0x7F);",
          "1632:     if (bits == 7) {",
          "1633:       decoded[len++] = rest;",
          "1634:       bits = 1;",
          "1635:       rest = 0;",
          "1636:     } else {",
          "1637:       bits++;",
          "",
          "[Added Lines]",
          "1624:   guchar *encoded, *decoded;",
          "1628:   if (length <= 0) {",
          "1629:     decoded = \"\";",
          "1630:   } else {",
          "1631:     encoded = (guchar *)tvb_memdup (wmem_packet_scope(), tvb, offset, length);",
          "1632:     decoded = (guchar *)wmem_alloc0 (wmem_packet_scope(), (size_t)(length * 1.2) + 1);",
          "1633:     for (i = 0; i < length; i++) {",
          "1634:       decoded[len++] = encoded[i] >> bits | rest;",
          "1635:       rest = (encoded[i] << (7 - bits) & 0x7F);",
          "1636:       if (bits == 7) {",
          "1637:         decoded[len++] = rest;",
          "1638:         bits = 1;",
          "1639:         rest = 0;",
          "1640:       } else {",
          "1641:         bits++;",
          "1642:       }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cd2a1e9a8d8b6507731184ae16baa9a6334dd413",
      "candidate_info": {
        "commit_hash": "cd2a1e9a8d8b6507731184ae16baa9a6334dd413",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/cd2a1e9a8d8b6507731184ae16baa9a6334dd413",
        "files": [
          "epan/dissectors/packet-dmp.c"
        ],
        "message": "DMP: check 7bit string length before decoding it\n\nBug: 14068\nLink: https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=3372\nChange-Id: Ib9ff63e2ef8d3c2546f357534c374a662e70e43c\nReviewed-on: https://code.wireshark.org/review/23591\nReviewed-by: Pascal Quantin <pascal.quantin@gmail.com>\nPetri-Dish: Pascal Quantin <pascal.quantin@gmail.com>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Peter Wu <peter@lekensteyn.nl>\n(cherry picked from commit 8dbb21dfde14221dab09b6b9c7719b9067c1f06e)\nReviewed-on: https://code.wireshark.org/review/23594\nReviewed-by: Michael Mann <mmann78@netscape.net>",
        "before_after_code_files": [
          "epan/dissectors/packet-dmp.c||epan/dissectors/packet-dmp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-dmp.c||epan/dissectors/packet-dmp.c"
          ],
          "candidate": [
            "epan/dissectors/packet-dmp.c||epan/dissectors/packet-dmp.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-dmp.c||epan/dissectors/packet-dmp.c": [
          "File: epan/dissectors/packet-dmp.c -> epan/dissectors/packet-dmp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1653: static gchar *dissect_7bit_string (tvbuff_t *tvb, gint offset, gint length, guchar *byte_rest)",
          "1654: {",
          "1657:   guchar  rest = 0, bits = 1;",
          "1658:   gint    len = 0, i;",
          "1669:     }",
          "1670:   }",
          "",
          "[Removed Lines]",
          "1655:   guchar *encoded = (guchar *)tvb_memdup (wmem_packet_scope(), tvb, offset, length);",
          "1656:   guchar *decoded = (guchar *)wmem_alloc0 (wmem_packet_scope(), (size_t)(length * 1.2) + 1);",
          "1660:   for (i = 0; i < length; i++) {",
          "1661:     decoded[len++] = encoded[i] >> bits | rest;",
          "1662:     rest = (encoded[i] << (7 - bits) & 0x7F);",
          "1663:     if (bits == 7) {",
          "1664:       decoded[len++] = rest;",
          "1665:       bits = 1;",
          "1666:       rest = 0;",
          "1667:     } else {",
          "1668:       bits++;",
          "",
          "[Added Lines]",
          "1655:   guchar *encoded, *decoded;",
          "1659:   if (length <= 0) {",
          "1660:     decoded = \"\";",
          "1661:   } else {",
          "1662:     encoded = (guchar *)tvb_memdup (wmem_packet_scope(), tvb, offset, length);",
          "1663:     decoded = (guchar *)wmem_alloc0 (wmem_packet_scope(), (size_t)(length * 1.2) + 1);",
          "1664:     for (i = 0; i < length; i++) {",
          "1665:       decoded[len++] = encoded[i] >> bits | rest;",
          "1666:       rest = (encoded[i] << (7 - bits) & 0x7F);",
          "1667:       if (bits == 7) {",
          "1668:         decoded[len++] = rest;",
          "1669:         bits = 1;",
          "1670:         rest = 0;",
          "1671:       } else {",
          "1672:         bits++;",
          "1673:       }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ec9e555456ef5217ace606bf31ded35d45bf55d3",
      "candidate_info": {
        "commit_hash": "ec9e555456ef5217ace606bf31ded35d45bf55d3",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/ec9e555456ef5217ace606bf31ded35d45bf55d3",
        "files": [
          "epan/dissectors/packet-dmp.c"
        ],
        "message": "Have dissect_7bit_string() return a const gchar *.\n\nNobody needs to modify the string, and nobody needs to free it - which\nis good, because it could be a string constant which can neither be\nmodified nor freed.\n\nChange-Id: I13d4239557698e4631e8f8b062d436a2e94d5eca\nReviewed-on: https://code.wireshark.org/review/23773\nPetri-Dish: Guy Harris <guy@alum.mit.edu>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Guy Harris <guy@alum.mit.edu>\n(cherry picked from commit e209b4c5274766a92b1ae3daff57bf5ca21dfc0f)\nReviewed-on: https://code.wireshark.org/review/23774\n(cherry picked from commit 54f1a4f285260d12d8da834637631e4020cf7786)\nReviewed-on: https://code.wireshark.org/review/23776",
        "before_after_code_files": [
          "epan/dissectors/packet-dmp.c||epan/dissectors/packet-dmp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-dmp.c||epan/dissectors/packet-dmp.c"
          ],
          "candidate": [
            "epan/dissectors/packet-dmp.c||epan/dissectors/packet-dmp.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-dmp.c||epan/dissectors/packet-dmp.c": [
          "File: epan/dissectors/packet-dmp.c -> epan/dissectors/packet-dmp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1619:   }",
          "1620: }",
          "1623: {",
          "1624:   guchar *encoded, *decoded;",
          "1625:   guchar  rest = 0, bits = 1;",
          "1626:   gint    len = 0, i;",
          "1628:   if (length <= 0) {",
          "1643:     }",
          "1644:   }",
          "",
          "[Removed Lines]",
          "1622: static gchar *dissect_7bit_string (tvbuff_t *tvb, gint offset, gint length, guchar *byte_rest)",
          "1629:     decoded = \"\";",
          "1630:   } else {",
          "1631:     encoded = (guchar *)tvb_memdup (wmem_packet_scope(), tvb, offset, length);",
          "1632:     decoded = (guchar *)wmem_alloc0 (wmem_packet_scope(), (size_t)(length * 1.2) + 1);",
          "1633:     for (i = 0; i < length; i++) {",
          "1634:       decoded[len++] = encoded[i] >> bits | rest;",
          "1635:       rest = (encoded[i] << (7 - bits) & 0x7F);",
          "1636:       if (bits == 7) {",
          "1637:         decoded[len++] = rest;",
          "1638:         bits = 1;",
          "1639:         rest = 0;",
          "1640:       } else {",
          "1641:         bits++;",
          "1642:       }",
          "",
          "[Added Lines]",
          "1622: static const gchar *dissect_7bit_string (tvbuff_t *tvb, gint offset, gint length, guchar *byte_rest)",
          "1629:     if (byte_rest) {",
          "1631:     }",
          "1632:     return \"\";",
          "1633:   }",
          "1635:   encoded = (guchar *)tvb_memdup (wmem_packet_scope(), tvb, offset, length);",
          "1636:   decoded = (guchar *)wmem_alloc0 (wmem_packet_scope(), (size_t)(length * 1.2) + 1);",
          "1637:   for (i = 0; i < length; i++) {",
          "1638:     decoded[len++] = encoded[i] >> bits | rest;",
          "1639:     rest = (encoded[i] << (7 - bits) & 0x7F);",
          "1640:     if (bits == 7) {",
          "1641:       decoded[len++] = rest;",
          "1642:       bits = 1;",
          "1643:       rest = 0;",
          "1644:     } else {",
          "1645:       bits++;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1648:   }",
          "1651: }",
          "1653: static const gchar *dissect_thales_mts_id (tvbuff_t *tvb, gint offset, gint length, guchar *byte_rest)",
          "",
          "[Removed Lines]",
          "1650:   return (gchar *) decoded;",
          "",
          "[Added Lines]",
          "1653:   return decoded;",
          "",
          "---------------"
        ]
      }
    }
  ]
}