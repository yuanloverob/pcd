{
  "cve_id": "CVE-2021-20223",
  "cve_desc": "",
  "repo": "sqlite/sqlite",
  "patch_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
  "patch_info": {
    "commit_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "files": [
      "ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Prevent fts5 tokenizer unicode61 from considering '\\0' to be a token characters, even if other characters of class \"Cc\" are.\n\nFossilOrigin-Name: b7b7bde9b7a03665e3691c6d51118965f216d2dfb1617f138b9f9e60e418ed2f",
    "before_after_code_files": [
      "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
      "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c"
    ],
    "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test": [
      "File: ext/fts5/test/fts5tok1.test -> ext/fts5/test/fts5tok1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:   SELECT * FROM t4;",
      "112: } {1 {SQL logic error}}",
      "115: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114: #-------------------------------------------------------------------------",
      "115: # Embedded 0x00 characters.",
      "116: #",
      "117: reset_db",
      "118: do_execsql_test 3.1.0 {",
      "119:   CREATE VIRTUAL TABLE t1 USING fts5(z);",
      "120:   CREATE VIRTUAL TABLE tt USING fts5vocab(t1, 'instance');",
      "121:   INSERT INTO t1 VALUES('abc' || char(0) || 'def');",
      "122:   SELECT * FROM tt;",
      "123: } { abc 1 z 0 def 1 z 1 }",
      "124: do_execsql_test 3.1.1 {",
      "125:   SELECT hex(z) FROM t1;",
      "126: } {61626300646566}",
      "127: do_execsql_test 3.1.2 {",
      "128:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "129: } {}",
      "131: do_execsql_test 3.2.0 {",
      "132:   CREATE VIRTUAL TABLE t2 USING fts5(z,",
      "133:       tokenize=\"unicode61 categories 'L* N* Co Cc'\"",
      "134:   );",
      "135:   CREATE VIRTUAL TABLE tu USING fts5vocab(t2, 'instance');",
      "137:   INSERT INTO t2 VALUES('abc' || char(0) || 'def');",
      "138:   SELECT * FROM tu;",
      "139: } { abc 1 z 0 def 1 z 1 }",
      "141: do_execsql_test 3.2.1 {",
      "142:   SELECT hex(z) FROM t1;",
      "143: } {61626300646566}",
      "145: do_execsql_test 3.2.2 {",
      "146:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "147: } {}",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 0e7e113d9f2c929c1f8a85e2cfad8e2e60f0e8770212b5e5320fb2a2c42911f8",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "29cdbadf8af1ea61e960c5fc7ce8a63efb009c1c",
      "candidate_info": {
        "commit_hash": "29cdbadf8af1ea61e960c5fc7ce8a63efb009c1c",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/29cdbadf8af1ea61e960c5fc7ce8a63efb009c1c",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/select.c",
          "test/window1.test"
        ],
        "message": "Correctly deal with multi-row VALUES clauses that contain window functions.\n\nFossilOrigin-Name: 26d991f214db143976e2593d3564b5003eb3539a2728d1a0ccae2a2accece76f",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/select.c||src/select.c",
          "test/window1.test||test/window1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 7fa664ea0ea1e0283a9af50c9ff8dd360ee6042f9e491a136f53d9bcbbc9c7ef",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2474:     assert( p->selFlags & SF_Values );",
          "2475:     assert( p->op==TK_ALL || (p->op==TK_SELECT && p->pPrior==0) );",
          "2476:     assert( p->pNext==0 || p->pEList->nExpr==p->pNext->pEList->nExpr );",
          "2477:     if( p->pPrior==0 ) break;",
          "2478:     assert( p->pPrior->pNext==p );",
          "2479:     p = p->pPrior;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2477:     if( p->pWin ) return -1;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2565:   if( p->selFlags & SF_MultiValue ){",
          "2566:     rc = multiSelectValues(pParse, p, &dest);",
          "2568:   }",
          "",
          "[Removed Lines]",
          "2567:     goto multi_select_end;",
          "",
          "[Added Lines]",
          "2568:     if( rc>=0 ) goto multi_select_end;",
          "2569:     rc = SQLITE_OK;",
          "",
          "---------------"
        ],
        "test/window1.test||test/window1.test": [
          "File: test/window1.test -> test/window1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1299:   SELECT sum(x) OVER f FROM t1 WINDOW f AS (ORDER BY x) ORDER BY 1;",
          "1300: } {1 3 6}",
          "1302: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1302: # 2019-12-07 gramfuzz find",
          "1303: #",
          "1304: do_execsql_test 36.10 {",
          "1305:   VALUES(count(*)OVER());",
          "1306: } {1}",
          "1307: do_execsql_test 36.20 {",
          "1308:   VALUES(count(*)OVER()),(2);",
          "1309: } {1 2}",
          "1310: do_execsql_test 36.30 {",
          "1311:   VALUES(2),(count(*)OVER());",
          "1312: } {2 1}",
          "1313: do_execsql_test 36.40 {",
          "1314:   VALUES(2),(3),(count(*)OVER()),(4),(5);",
          "1315: } {2 3 1 4 5}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ed109c06e1ae6feeacdcb549052a0f889e188880",
      "candidate_info": {
        "commit_hash": "ed109c06e1ae6feeacdcb549052a0f889e188880",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/ed109c06e1ae6feeacdcb549052a0f889e188880",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c",
          "src/pragma.c",
          "test/pragma.test"
        ],
        "message": "Merge support for partial integrity checks.\n\nFossilOrigin-Name: b5443b47af95f4f0ef527bee90f186ee25faa5df197dbcc3e14d48eee095e4aa",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c",
          "src/pragma.c||src/pragma.c",
          "test/pragma.test||test/pragma.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: e4a92688fca31335bf15933dec10ecba04cf340ee2f726fd36d46d4c76660eee",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "10135:   u64 savedDbFlags = pBt->db->flags;",
          "10136:   char zErr[100];",
          "10137:   VVA_ONLY( int nRef );",
          "10139:   sqlite3BtreeEnter(p);",
          "10140:   assert( p->inTrans>TRANS_NONE && pBt->inTransaction>TRANS_NONE );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "10149:   assert( nRoot>0 );",
          "10152:   if( aRoot[0]==0 ){",
          "10153:     assert( nRoot>1 );",
          "10154:     bPartial = 1;",
          "10155:     if( aRoot[1]!=1 ) bCkFreelist = 0;",
          "10156:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "10184: #ifndef SQLITE_OMIT_AUTOVACUUM",
          "10191:       checkAppendMsg(&sCheck,",
          "10194:       );",
          "10195:     }",
          "10200:   }",
          "10201: #endif",
          "10202:   testcase( pBt->db->flags & SQLITE_CellSizeCk );",
          "",
          "[Removed Lines]",
          "10177:   sCheck.zPfx = \"Main freelist: \";",
          "10178:   checkList(&sCheck, 1, get4byte(&pBt->pPage1->aData[32]),",
          "10179:             get4byte(&pBt->pPage1->aData[36]));",
          "10180:   sCheck.zPfx = 0;",
          "10185:   if( pBt->autoVacuum ){",
          "10186:     Pgno mx = 0;",
          "10187:     int mxInHdr;",
          "10188:     for(i=0; (int)i<nRoot; i++) if( mx<aRoot[i] ) mx = aRoot[i];",
          "10189:     mxInHdr = get4byte(&pBt->pPage1->aData[52]);",
          "10190:     if( mx!=mxInHdr ){",
          "10192:         \"max rootpage (%d) disagrees with header (%d)\",",
          "10193:         mx, mxInHdr",
          "10196:   }else if( get4byte(&pBt->pPage1->aData[64])!=0 ){",
          "10197:     checkAppendMsg(&sCheck,",
          "10198:       \"incremental_vacuum enabled with a max rootpage of zero\"",
          "10199:     );",
          "",
          "[Added Lines]",
          "10196:   if( bCkFreelist ){",
          "10197:     sCheck.zPfx = \"Main freelist: \";",
          "10198:     checkList(&sCheck, 1, get4byte(&pBt->pPage1->aData[32]),",
          "10199:               get4byte(&pBt->pPage1->aData[36]));",
          "10200:     sCheck.zPfx = 0;",
          "10201:   }",
          "10206:   if( !bPartial ){",
          "10207:     if( pBt->autoVacuum ){",
          "10208:       Pgno mx = 0;",
          "10209:       Pgno mxInHdr;",
          "10210:       for(i=0; (int)i<nRoot; i++) if( mx<aRoot[i] ) mx = aRoot[i];",
          "10211:       mxInHdr = get4byte(&pBt->pPage1->aData[52]);",
          "10212:       if( mx!=mxInHdr ){",
          "10213:         checkAppendMsg(&sCheck,",
          "10214:           \"max rootpage (%d) disagrees with header (%d)\",",
          "10215:           mx, mxInHdr",
          "10216:         );",
          "10217:       }",
          "10218:     }else if( get4byte(&pBt->pPage1->aData[64])!=0 ){",
          "10220:         \"incremental_vacuum enabled with a max rootpage of zero\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "10205:     i64 notUsed;",
          "10206:     if( aRoot[i]==0 ) continue;",
          "10207: #ifndef SQLITE_OMIT_AUTOVACUUM",
          "10209:       checkPtrmap(&sCheck, aRoot[i], PTRMAP_ROOTPAGE, 0);",
          "10210:     }",
          "10211: #endif",
          "",
          "[Removed Lines]",
          "10208:     if( pBt->autoVacuum && aRoot[i]>1 ){",
          "",
          "[Added Lines]",
          "10231:     if( pBt->autoVacuum && aRoot[i]>1 && !bPartial ){",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "10219: #ifdef SQLITE_OMIT_AUTOVACUUM",
          "10223: #else",
          "10234:     }",
          "10235: #endif",
          "10236:   }",
          "",
          "[Removed Lines]",
          "10218:   for(i=1; i<=sCheck.nPage && sCheck.mxErr; i++){",
          "10220:     if( getPageReferenced(&sCheck, i)==0 ){",
          "10221:       checkAppendMsg(&sCheck, \"Page %d is never used\", i);",
          "10222:     }",
          "10227:     if( getPageReferenced(&sCheck, i)==0 &&",
          "10228:        (PTRMAP_PAGENO(pBt, i)!=i || !pBt->autoVacuum) ){",
          "10229:       checkAppendMsg(&sCheck, \"Page %d is never used\", i);",
          "10230:     }",
          "10231:     if( getPageReferenced(&sCheck, i)!=0 &&",
          "10232:        (PTRMAP_PAGENO(pBt, i)==i && pBt->autoVacuum) ){",
          "10233:       checkAppendMsg(&sCheck, \"Pointer map page %d is referenced\", i);",
          "",
          "[Added Lines]",
          "10241:   if( !bPartial ){",
          "10242:     for(i=1; i<=sCheck.nPage && sCheck.mxErr; i++){",
          "10244:       if( getPageReferenced(&sCheck, i)==0 ){",
          "10245:         checkAppendMsg(&sCheck, \"Page %d is never used\", i);",
          "10246:       }",
          "10251:       if( getPageReferenced(&sCheck, i)==0 &&",
          "10252:          (PTRMAP_PAGENO(pBt, i)!=i || !pBt->autoVacuum) ){",
          "10253:         checkAppendMsg(&sCheck, \"Page %d is never used\", i);",
          "10254:       }",
          "10255:       if( getPageReferenced(&sCheck, i)!=0 &&",
          "10256:          (PTRMAP_PAGENO(pBt, i)==i && pBt->autoVacuum) ){",
          "10257:         checkAppendMsg(&sCheck, \"Pointer map page %d is referenced\", i);",
          "10258:       }",
          "",
          "---------------"
        ],
        "src/pragma.c||src/pragma.c": [
          "File: src/pragma.c -> src/pragma.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1552:     mxErr = SQLITE_INTEGRITY_CHECK_ERROR_MAX;",
          "1553:     if( zRight ){",
          "1557:       }",
          "1558:     }",
          "",
          "[Removed Lines]",
          "1554:       sqlite3GetInt32(zRight, &mxErr);",
          "1555:       if( mxErr<=0 ){",
          "1556:         mxErr = SQLITE_INTEGRITY_CHECK_ERROR_MAX;",
          "",
          "[Added Lines]",
          "1567:       if( sqlite3GetInt32(zRight, &mxErr) ){",
          "1568:         if( mxErr<=0 ){",
          "1569:           mxErr = SQLITE_INTEGRITY_CHECK_ERROR_MAX;",
          "1570:         }",
          "1571:       }else{",
          "1572:         pObjTab = sqlite3LocateTable(pParse, 0, zRight,",
          "1573:                       iDb>=0 ? db->aDb[iDb].zDbSName : 0);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1585:         if( HasRowid(pTab) ) cnt++;",
          "1586:         for(nIdx=0, pIdx=pTab->pIndex; pIdx; pIdx=pIdx->pNext, nIdx++){ cnt++; }",
          "1587:         if( nIdx>mxIdx ) mxIdx = nIdx;",
          "1588:       }",
          "1589:       aRoot = sqlite3DbMallocRawNN(db, sizeof(int)*(cnt+1));",
          "1590:       if( aRoot==0 ) break;",
          "1592:         Table *pTab = sqliteHashData(x);",
          "1593:         Index *pIdx;",
          "1594:         if( HasRowid(pTab) ) aRoot[++cnt] = pTab->tnum;",
          "1595:         for(pIdx=pTab->pIndex; pIdx; pIdx=pIdx->pNext){",
          "1596:           aRoot[++cnt] = pIdx->tnum;",
          "",
          "[Removed Lines]",
          "1591:       for(cnt=0, x=sqliteHashFirst(pTbls); x; x=sqliteHashNext(x)){",
          "",
          "[Added Lines]",
          "1602:         if( pObjTab && pObjTab!=pTab ) continue;",
          "1607:       if( cnt==0 ) continue;",
          "1608:       if( pObjTab ) cnt++;",
          "1611:       cnt = 0;",
          "1612:       if( pObjTab ) aRoot[++cnt] = 0;",
          "1613:       for(x=sqliteHashFirst(pTbls); x; x=sqliteHashNext(x)){",
          "1616:         if( pObjTab && pObjTab!=pTab ) continue;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1624:         int r1 = -1;",
          "1627:         pPk = HasRowid(pTab) ? 0 : sqlite3PrimaryKeyIndex(pTab);",
          "1628:         sqlite3OpenTableAndIndices(pParse, pTab, OP_OpenRead, 0,",
          "1629:                                    1, 0, &iDataCur, &iIdxCur);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1650:         if( pObjTab && pObjTab!=pTab ) continue;",
          "",
          "---------------"
        ],
        "test/pragma.test||test/pragma.test": [
          "File: test/pragma.test -> test/pragma.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "387:         PRAGMA integrity_check=4",
          "388:       }",
          "389:     } {{row 1 missing from index i2} {row 2 missing from index i2} {wrong # of entries in index i2} {row 1 missing from index i2}}",
          "395:     do_test pragma-3.7 {",
          "396:       execsql {",
          "397:         PRAGMA integrity_check=0",
          "",
          "[Removed Lines]",
          "390:     do_test pragma-3.6 {",
          "391:       execsql {",
          "392:         PRAGMA integrity_check=xyz",
          "393:       }",
          "394:     } {{row 1 missing from index i2} {row 2 missing from index i2} {wrong # of entries in index i2} {row 1 missing from index i2} {row 2 missing from index i2} {wrong # of entries in index i2}}",
          "",
          "[Added Lines]",
          "390:     do_catchsql_test pragma-3.6 {",
          "391:       PRAGMA integrity_check=xyz",
          "392:     } {1 {no such table: xyz}}",
          "393:     do_catchsql_test pragma-3.6b {",
          "394:       PRAGMA integrity_check=t2",
          "395:     } {0 {{row 1 missing from index i2} {row 2 missing from index i2} {wrong # of entries in index i2}}}",
          "396:     do_catchsql_test pragma-3.6c {",
          "397:       PRAGMA integrity_check=sqlite_schema",
          "398:     } {0 ok}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "423:     do_test pragma-3.8.2 {",
          "424:       execsql {PRAGMA QUICK_CHECK}",
          "425:     } {ok}",
          "427:       execsql {",
          "428:         ATTACH 'testerr.db' AS t2;",
          "429:         PRAGMA integrity_check",
          "",
          "[Removed Lines]",
          "426:     do_test pragma-3.9 {",
          "",
          "[Added Lines]",
          "430:     do_test pragma-3.9a {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "432: Page 4 is never used",
          "433: Page 5 is never used",
          "434: Page 6 is never used} {row 1 missing from index i2} {row 2 missing from index i2} {wrong # of entries in index i2}}",
          "435:     do_test pragma-3.10 {",
          "436:       execsql {",
          "437:         PRAGMA integrity_check=1",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "439:     do_execsql_test pragma-3.9b {",
          "440:       PRAGMA t2.integrity_check=t2;",
          "441:     } {{row 1 missing from index i2} {row 2 missing from index i2} {wrong # of entries in index i2}}",
          "442:     do_execsql_test pragma-3.9c {",
          "443:       PRAGMA t2.integrity_check=sqlite_schema;",
          "444:     } {ok}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8c1fbe81d01e711f14130798fa8b11b79849aa77",
      "candidate_info": {
        "commit_hash": "8c1fbe81d01e711f14130798fa8b11b79849aa77",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/8c1fbe81d01e711f14130798fa8b11b79849aa77",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c",
          "src/main.c"
        ],
        "message": "Minor comment fixes.  No changes to code.\n\nFossilOrigin-Name: 533aeb90085d989078073067172135db98e37e00be84f99757255858126196e4",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c",
          "src/main.c||src/main.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: d5b254f94c1ce6f0f26024d0b9c80e610f7cc891360bc4c2cb116e9eda2874b3",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c"
        ],
        "src/main.c||src/main.c": [
          "File: src/main.c -> src/main.c"
        ]
      }
    },
    {
      "candidate_hash": "a8781d9d932aaadc6bbfcecd36705eb6410871a0",
      "candidate_info": {
        "commit_hash": "a8781d9d932aaadc6bbfcecd36705eb6410871a0",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/a8781d9d932aaadc6bbfcecd36705eb6410871a0",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/fuzzcheck.c",
          "test/fuzzdata8.db"
        ],
        "message": "Update the fuzzcheck test module so that it avoids inserting text values that contain embedded NULs in the XSQL table.  Fix some legacy entries in the test/fuzzdata8.db that had embedded NULs.  Add in new dbsqlfuzz cases that have accumulated over on the dbsqlfuzz project for a while.\n\nFossilOrigin-Name: 47d4240c4a837e829f593bb2aad7563010838f55345e7a0d8e2ea79462aeeb3c",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/fuzzcheck.c||test/fuzzcheck.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 40739c793b0e98a3bae296d3a1f74944edcdd4cc33c26b417fde4eaf6f14d062",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/fuzzcheck.c||test/fuzzcheck.c": [
          "File: test/fuzzcheck.c -> test/fuzzcheck.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "322:   fclose(in);",
          "323: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "345: static void readtextfileFunc(",
          "346:   sqlite3_context *context,",
          "347:   int argc,",
          "348:   sqlite3_value **argv",
          "349: ){",
          "350:   const char *zName;",
          "351:   FILE *in;",
          "352:   long nIn;",
          "353:   char *pBuf;",
          "355:   zName = (const char*)sqlite3_value_text(argv[0]);",
          "356:   if( zName==0 ) return;",
          "357:   in = fopen(zName, \"rb\");",
          "358:   if( in==0 ) return;",
          "359:   fseek(in, 0, SEEK_END);",
          "360:   nIn = ftell(in);",
          "361:   rewind(in);",
          "362:   pBuf = sqlite3_malloc64( nIn+1 );",
          "363:   if( pBuf && 1==fread(pBuf, nIn, 1, in) ){",
          "364:     pBuf[nIn] = 0;",
          "365:     sqlite3_result_text(context, pBuf, -1, sqlite3_free);",
          "366:   }else{",
          "367:     sqlite3_free(pBuf);",
          "368:   }",
          "369:   fclose(in);",
          "370: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "466: static int depthLimit = 500;",
          "472: static int vdbeOpLimit = 25000;",
          "",
          "[Removed Lines]",
          "469: static sqlite3_int64 heapLimit = 1000000000;",
          "",
          "[Added Lines]",
          "516: static sqlite3_int64 heapLimit = 100000000;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1425:         vdbeLimitFlag = 1;",
          "1426:       }else",
          "1427:       if( strcmp(z,\"load-sql\")==0 ){",
          "1429:         iFirstInsArg = i+1;",
          "1430:         openFlags4Data = SQLITE_OPEN_READWRITE|SQLITE_OPEN_CREATE;",
          "1431:         break;",
          "",
          "[Removed Lines]",
          "1428:         zInsSql = \"INSERT INTO xsql(sqltext)VALUES(CAST(readfile(?1) AS text))\";",
          "",
          "[Added Lines]",
          "1475:         zInsSql = \"INSERT INTO xsql(sqltext)\"",
          "1476:                   \"VALUES(CAST(readtextfile(?1) AS text))\";",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1437:         break;",
          "1438:       }else",
          "1439:       if( strcmp(z,\"load-dbsql\")==0 ){",
          "1441:         iFirstInsArg = i+1;",
          "1442:         openFlags4Data = SQLITE_OPEN_READWRITE|SQLITE_OPEN_CREATE;",
          "1443:         dbSqlOnly = 1;",
          "",
          "[Removed Lines]",
          "1440:         zInsSql = \"INSERT INTO xsql(sqltext)VALUES(CAST(readfile(?1) AS text))\";",
          "",
          "[Added Lines]",
          "1488:         zInsSql = \"INSERT INTO xsql(sqltext)\"",
          "1489:                   \"VALUES(CAST(readtextfile(?1) AS text))\";",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1623:     if( zInsSql ){",
          "1624:       sqlite3_create_function(db, \"readfile\", 1, SQLITE_UTF8, 0,",
          "1625:                               readfileFunc, 0, 0);",
          "1626:       sqlite3_create_function(db, \"isdbsql\", 1, SQLITE_UTF8, 0,",
          "1627:                               isDbSqlFunc, 0, 0);",
          "1628:       rc = sqlite3_prepare_v2(db, zInsSql, -1, &pStmt, 0);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1675:       sqlite3_create_function(db, \"readtextfile\", 1, SQLITE_UTF8, 0,",
          "1676:                               readtextfileFunc, 0, 0);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1e32bed3c1ce78263598d860d531d3e7e6171929",
      "candidate_info": {
        "commit_hash": "1e32bed3c1ce78263598d860d531d3e7e6171929",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/1e32bed3c1ce78263598d860d531d3e7e6171929",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/alter.c",
          "src/btree.c",
          "src/build.c",
          "src/dbstat.c",
          "src/delete.c",
          "src/expr.c",
          "src/insert.c",
          "src/main.c",
          "src/prepare.c",
          "src/test8.c",
          "src/test_mutex.c",
          "src/test_schema.c",
          "src/trigger.c",
          "src/update.c",
          "src/vacuum.c",
          "src/vdbe.c",
          "src/vtab.c",
          "test/mutex1.test",
          "test/stat.test",
          "tool/spaceanal.tcl"
        ],
        "message": "Further refactoring of the schema table name.\n\nFossilOrigin-Name: 9536fa0ae0c1ae6e2e98d2fa11e5acda7f3c9b8ca5061b6f7f8cae63a11d936b",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/alter.c||src/alter.c",
          "src/btree.c||src/btree.c",
          "src/build.c||src/build.c",
          "src/dbstat.c||src/dbstat.c",
          "src/delete.c||src/delete.c",
          "src/expr.c||src/expr.c",
          "src/insert.c||src/insert.c",
          "src/main.c||src/main.c",
          "src/prepare.c||src/prepare.c",
          "src/test8.c||src/test8.c",
          "src/test_mutex.c||src/test_mutex.c",
          "src/test_schema.c||src/test_schema.c",
          "src/trigger.c||src/trigger.c",
          "src/update.c||src/update.c",
          "src/vacuum.c||src/vacuum.c",
          "src/vdbe.c||src/vdbe.c",
          "src/vtab.c||src/vtab.c",
          "test/mutex1.test||test/mutex1.test",
          "test/stat.test||test/stat.test",
          "tool/spaceanal.tcl||tool/spaceanal.tcl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 7bb08b1bfcf184e4b59c8c9028926a0052612ff6a6731914ccdb8dee07ea4a98",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/alter.c||src/alter.c": [
          "File: src/alter.c -> src/alter.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "227:   if( iDb!=1 ){",
          "228:     sqlite3NestedParse(pParse,",
          "230:             \"sql = sqlite_rename_table(%Q, type, name, sql, %Q, %Q, 1), \"",
          "231:             \"tbl_name = \"",
          "232:               \"CASE WHEN tbl_name=%Q COLLATE nocase AND \"",
          "",
          "[Removed Lines]",
          "229:         \"UPDATE sqlite_temp_master SET \"",
          "",
          "[Added Lines]",
          "229:         \"UPDATE sqlite_temp_schema SET \"",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c"
        ],
        "src/dbstat.c||src/dbstat.c": [
          "File: src/dbstat.c -> src/dbstat.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "724:   pSql = sqlite3_str_new(pTab->db);",
          "725:   sqlite3_str_appendf(pSql,",
          "726:       \"SELECT * FROM (\"",
          "728:         \" UNION ALL \"",
          "729:         \"SELECT name,rootpage,type\"",
          "731:       pTab->db->aDb[pCsr->iDb].zDbSName);",
          "732:   if( zName ){",
          "733:     sqlite3_str_appendf(pSql, \"WHERE name=%Q\", zName);",
          "",
          "[Removed Lines]",
          "727:         \"SELECT 'sqlite_master' AS name,1 AS rootpage,'table' AS type\"",
          "730:         \" FROM \\\"%w\\\".sqlite_master WHERE rootpage!=0)\",",
          "",
          "[Added Lines]",
          "727:         \"SELECT 'sqlite_schema' AS name,1 AS rootpage,'table' AS type\"",
          "730:         \" FROM \\\"%w\\\".sqlite_schema WHERE rootpage!=0)\",",
          "",
          "---------------"
        ],
        "src/delete.c||src/delete.c": [
          "File: src/delete.c -> src/delete.c"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c"
        ],
        "src/insert.c||src/insert.c": [
          "File: src/insert.c -> src/insert.c"
        ],
        "src/main.c||src/main.c": [
          "File: src/main.c -> src/main.c"
        ],
        "src/prepare.c||src/prepare.c": [
          "File: src/prepare.c -> src/prepare.c"
        ],
        "src/test8.c||src/test8.c": [
          "File: src/test8.c -> src/test8.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "341:   if( pVtab->zTableName ){",
          "342:     sqlite3_stmt *pStmt = 0;",
          "343:     rc = sqlite3_prepare(db,",
          "345:         -1, &pStmt, 0);",
          "346:     if( rc==SQLITE_OK ){",
          "347:       sqlite3_bind_text(pStmt, 1, pVtab->zTableName, -1, 0);",
          "",
          "[Removed Lines]",
          "344:         \"SELECT sql FROM sqlite_master WHERE type = 'table' AND name = ?\",",
          "",
          "[Added Lines]",
          "344:         \"SELECT sql FROM sqlite_schema WHERE type = 'table' AND name = ?\",",
          "",
          "---------------"
        ],
        "src/test_mutex.c||src/test_mutex.c": [
          "File: src/test_mutex.c -> src/test_mutex.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: extern const char *sqlite3ErrName(int);",
          "32: static const char *aName[MAX_MUTEXES+1] = {",
          "34:   \"static_open\", \"static_prng\", \"static_lru\",    \"static_pmem\",",
          "35:   \"static_app1\", \"static_app2\", \"static_app3\",   \"static_vfs1\",",
          "36:   \"static_vfs2\", \"static_vfs3\", 0",
          "",
          "[Removed Lines]",
          "33:   \"fast\",        \"recursive\",   \"static_master\", \"static_mem\",",
          "",
          "[Added Lines]",
          "33:   \"fast\",        \"recursive\",   \"static_main\",   \"static_mem\",",
          "",
          "---------------"
        ],
        "src/test_schema.c||src/test_schema.c": [
          "File: src/test_schema.c -> src/test_schema.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "192:       }",
          "199:       if( sqlite3_column_int(pCur->pDbList, 0)==1 ){",
          "200:         zSql = sqlite3_mprintf(",
          "202:         );",
          "203:       }else{",
          "204:         sqlite3_stmt *pDbList = pCur->pDbList;",
          "205:         zSql = sqlite3_mprintf(",
          "207:              sqlite3_column_text(pDbList, 1)",
          "208:         );",
          "209:       }",
          "",
          "[Removed Lines]",
          "201:             \"SELECT name FROM sqlite_temp_master WHERE type='table'\"",
          "206:             \"SELECT name FROM %Q.sqlite_master WHERE type='table'\",",
          "",
          "[Added Lines]",
          "201:             \"SELECT name FROM sqlite_temp_schema WHERE type='table'\"",
          "206:             \"SELECT name FROM %Q.sqlite_schema WHERE type='table'\",",
          "",
          "---------------"
        ],
        "src/trigger.c||src/trigger.c": [
          "File: src/trigger.c -> src/trigger.c"
        ],
        "src/update.c||src/update.c": [
          "File: src/update.c -> src/update.c"
        ],
        "src/vacuum.c||src/vacuum.c": [
          "File: src/vacuum.c -> src/vacuum.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "274:   rc = execSqlF(db, pzErrMsg,",
          "276:       \" WHERE type='table'AND name<>'sqlite_sequence'\"",
          "277:       \" AND coalesce(rootpage,1)>0\",",
          "278:       zDbMain",
          "279:   );",
          "280:   if( rc!=SQLITE_OK ) goto end_of_vacuum;",
          "281:   rc = execSqlF(db, pzErrMsg,",
          "283:       \" WHERE type='index'\",",
          "284:       zDbMain",
          "285:   );",
          "",
          "[Removed Lines]",
          "275:       \"SELECT sql FROM \\\"%w\\\".sqlite_master\"",
          "282:       \"SELECT sql FROM \\\"%w\\\".sqlite_master\"",
          "",
          "[Added Lines]",
          "275:       \"SELECT sql FROM \\\"%w\\\".sqlite_schema\"",
          "282:       \"SELECT sql FROM \\\"%w\\\".sqlite_schema\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "293:   rc = execSqlF(db, pzErrMsg,",
          "294:       \"SELECT'INSERT INTO vacuum_db.'||quote(name)\"",
          "295:       \"||' SELECT*FROM\\\"%w\\\".'||quote(name)\"",
          "297:       \"WHERE type='table'AND coalesce(rootpage,1)>0\",",
          "298:       zDbMain",
          "299:   );",
          "",
          "[Removed Lines]",
          "296:       \"FROM vacuum_db.sqlite_master \"",
          "",
          "[Added Lines]",
          "296:       \"FROM vacuum_db.sqlite_schema \"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "309:   rc = execSqlF(db, pzErrMsg,",
          "312:       \" WHERE type IN('view','trigger')\"",
          "313:       \" OR(type='table'AND rootpage=0)\",",
          "314:       zDbMain",
          "",
          "[Removed Lines]",
          "310:       \"INSERT INTO vacuum_db.sqlite_master\"",
          "311:       \" SELECT*FROM \\\"%w\\\".sqlite_master\"",
          "",
          "[Added Lines]",
          "310:       \"INSERT INTO vacuum_db.sqlite_schema\"",
          "311:       \" SELECT*FROM \\\"%w\\\".sqlite_schema\"",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c"
        ],
        "src/vtab.c||src/vtab.c": [
          "File: src/vtab.c -> src/vtab.c"
        ],
        "test/mutex1.test||test/mutex1.test": [
          "File: test/mutex1.test -> test/mutex1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "38: #-------------------------------------------------------------------------",
          "39: # Tests mutex1-1.* test that sqlite3_config() returns SQLITE_MISUSE if",
          "40: # is called at the wrong time. And that the first time sqlite3_initialize",
          "42: # mutex (sqlite3Config.pInitMutex) twice. Subsequent calls are no-ops",
          "43: # that do not require any mutexes.",
          "44: #",
          "",
          "[Removed Lines]",
          "41: # is called it obtains the 'static_master' mutex 3 times and a recursive",
          "",
          "[Added Lines]",
          "41: # is called it obtains the 'static_main' mutex 3 times and a recursive",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "76: do_test mutex1-1.7 {",
          "77:   mutex_counters counters",
          "79:   expr {$counters(total)>0}",
          "80: } {1}",
          "",
          "[Removed Lines]",
          "78:   # list $counters(total) $counters(static_master)",
          "",
          "[Added Lines]",
          "78:   # list $counters(total) $counters(static_main)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "87: do_test mutex1-1.9 {",
          "88:   mutex_counters counters",
          "90: } {0 0}",
          "92: #-------------------------------------------------------------------------",
          "",
          "[Removed Lines]",
          "89:   list $counters(total) $counters(static_master)",
          "",
          "[Added Lines]",
          "89:   list $counters(total) $counters(static_main)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "103:     singlethread {}",
          "104:     multithread  {",
          "105:       fast static_app1 static_app2 static_app3",
          "107:       static_prng static_pmem static_vfs1 static_vfs2",
          "108:       static_vfs3",
          "109:     }",
          "110:     serialized  {",
          "111:       fast recursive static_app1 static_app2",
          "113:       static_open static_prng static_pmem static_vfs1",
          "114:       static_vfs2 static_vfs3",
          "115:     }",
          "",
          "[Removed Lines]",
          "106:       static_lru static_master static_mem static_open",
          "112:       static_app3 static_lru static_master static_mem",
          "",
          "[Added Lines]",
          "106:       static_lru static_main static_mem static_open",
          "112:       static_app3 static_lru static_main static_mem",
          "",
          "---------------"
        ],
        "test/stat.test||test/stat.test": [
          "File: test/stat.test -> test/stat.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "59:     PRAGMA journal_mode = delete;",
          "60:     SELECT name, path, pageno, pagetype, ncell, payload, unused, mx_payload",
          "61:       FROM stat;",
          "63: }",
          "65: do_test stat-1.0 {",
          "",
          "[Removed Lines]",
          "62:   } {wal delete sqlite_master / 1 leaf 0 0 916 0}",
          "",
          "[Added Lines]",
          "62:   } {wal delete sqlite_schema / 1 leaf 0 0 916 0}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "85: do_test stat-1.3 {",
          "86:   execsql {",
          "87:     SELECT name, path, pageno, pagetype, ncell, payload, unused, mx_payload",
          "89:   }",
          "91: do_test stat-1.4 {",
          "92:   execsql {",
          "93:     DROP TABLE t1;",
          "",
          "[Removed Lines]",
          "88:       FROM stat WHERE name = 'sqlite_master';",
          "90: } {sqlite_master / 1 leaf 2 77 831 40}",
          "",
          "[Added Lines]",
          "88:       FROM stat WHERE name = 'sqlite_schema';",
          "90: } {sqlite_schema / 1 leaf 2 77 831 40}",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "108:   INSERT INTO t3 SELECT a_string(110+rowid), a_string(221+rowid) FROM t3",
          "109:    ORDER BY rowid;",
          "110:   SELECT name, path, pageno, pagetype, ncell, payload, unused, mx_payload",
          "112: } [list \\",
          "113:   sqlite_autoindex_t3_1 / 3 internal 3 368 623 125       \\",
          "114:   sqlite_autoindex_t3_1 /000/ 8 leaf 8 946 46 123        \\",
          "",
          "[Removed Lines]",
          "111:     FROM stat WHERE name != 'sqlite_master' ORDER BY name;",
          "",
          "[Added Lines]",
          "111:     FROM stat WHERE name != 'sqlite_schema' ORDER BY name;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "138:   SELECT * FROM dbstat WHERE aggregate=TRUE ORDER BY name;",
          "139: } [list \\",
          "140:   sqlite_autoindex_t3_1 {}  5 {} 32  3898 1065 132 {}  5120 \\",
          "142:   t3                    {} 17 {} 47 11188 5815 370 {} 17408 \\",
          "143: ]",
          "",
          "[Removed Lines]",
          "141:   sqlite_master         {}  1 {}  2    84  824  49 {}  1024 \\",
          "",
          "[Added Lines]",
          "141:   sqlite_schema         {}  1 {}  2    84  824  49 {}  1024 \\",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "158:   CREATE INDEX i4 ON t4(x);",
          "159:   INSERT INTO t4(rowid, x) VALUES(2, a_string(7777));",
          "160:   SELECT name, path, pageno, pagetype, ncell, payload, unused, mx_payload",
          "162: } [list \\",
          "163:   i4 / 3 leaf 1 103 905 7782                 \\",
          "164:   i4 /000+000000 4 overflow 0 1020 0 0       \\",
          "",
          "[Removed Lines]",
          "161:     FROM stat WHERE name != 'sqlite_master' ORDER BY name;",
          "",
          "[Added Lines]",
          "161:     FROM stat WHERE name != 'sqlite_schema' ORDER BY name;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "183:   SELECT *, '|' FROM dbstat WHERE aggregate=TRUE ORDER BY name;",
          "184: } [list \\",
          "185:   i4            {} 9 {} 1 7782 1386 7782 {} 9216 | \\",
          "187:   t4            {} 8 {} 1 7780  367 7780 {} 8192 | \\",
          "188: ]",
          "",
          "[Removed Lines]",
          "186:   sqlite_master {} 1 {} 2   74  834   40 {} 1024 | \\",
          "",
          "[Added Lines]",
          "186:   sqlite_schema {} 1 {} 2   74  834   40 {} 1024 | \\",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "221: do_execsql_test stat-5.20 {",
          "222:   SELECT name, quote(path), pageno, quote(pagetype), ncell, payload,",
          "223:          unused, mx_payload, '|' FROM dbstat('main',1);",
          "225: do_execsql_test stat-5.21 {",
          "226:   SELECT name, quote(path), pageno, quote(pagetype), ncell, payload,",
          "227:          unused, mx_payload, '|' FROM dbstat('aux1',1);",
          "231: do_catchsql_test stat-6.1 {",
          "",
          "[Removed Lines]",
          "224: } {sqlite_master NULL 1 NULL 1 34 878 34 | tx NULL 1 NULL 0 0 1016 0 |}",
          "228: } {sqlite_master NULL 1 NULL 1 34 878 34 | t1 NULL 3 NULL 2 3033 5 1517 |}",
          "",
          "[Added Lines]",
          "224: } {sqlite_schema NULL 1 NULL 1 34 878 34 | tx NULL 1 NULL 0 0 1016 0 |}",
          "228: } {sqlite_schema NULL 1 NULL 1 34 878 34 | t1 NULL 3 NULL 2 3033 5 1517 |}",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "247: do_execsql_test 7.1.1 {",
          "248:   SELECT * FROM dbstat('123');",
          "249: } {",
          "251:   x1 / 2 leaf 1 4 1008 4 1024 1024",
          "252: }",
          "253: do_execsql_test 7.1.2 {",
          "254:   SELECT * FROM dbstat(123);",
          "255: } {",
          "257:   x1 / 2 leaf 1 4 1008 4 1024 1024",
          "258: }",
          "259: do_execsql_test 7.1.3 {",
          "260:   CREATE VIRTUAL TABLE x2 USING dbstat('123');",
          "261:   SELECT * FROM x2;",
          "262: } {",
          "264:   x1 / 2 leaf 1 4 1008 4 1024 1024",
          "265: }",
          "266: do_execsql_test 7.1.4 {",
          "267:   CREATE VIRTUAL TABLE x3 USING dbstat(123);",
          "268:   SELECT * FROM x3;",
          "269: } {",
          "271:   x1 / 2 leaf 1 4 1008 4 1024 1024",
          "272: }",
          "",
          "[Removed Lines]",
          "250:   sqlite_master / 1 leaf 1 37 875 37 0 1024",
          "256:   sqlite_master / 1 leaf 1 37 875 37 0 1024",
          "263:   sqlite_master / 1 leaf 1 37 875 37 0 1024",
          "270:   sqlite_master / 1 leaf 1 37 875 37 0 1024",
          "",
          "[Added Lines]",
          "250:   sqlite_schema / 1 leaf 1 37 875 37 0 1024",
          "256:   sqlite_schema / 1 leaf 1 37 875 37 0 1024",
          "263:   sqlite_schema / 1 leaf 1 37 875 37 0 1024",
          "270:   sqlite_schema / 1 leaf 1 37 875 37 0 1024",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "280: do_execsql_test 7.2.1 {",
          "281:   SELECT * FROM dbstat('123corp');",
          "282: } {",
          "284:   x1 / 2 leaf 1 4 1008 4 1024 1024",
          "285: }",
          "286: do_catchsql_test 7.2.2 {",
          "",
          "[Removed Lines]",
          "283:   sqlite_master / 1 leaf 1 37 875 37 0 1024",
          "",
          "[Added Lines]",
          "283:   sqlite_schema / 1 leaf 1 37 875 37 0 1024",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "290:   CREATE VIRTUAL TABLE x2 USING dbstat('123corp');",
          "291:   SELECT * FROM x2;",
          "292: } {",
          "294:   x1 / 2 leaf 1 4 1008 4 1024 1024",
          "295: }",
          "296: do_catchsql_test 7.2.4 {",
          "",
          "[Removed Lines]",
          "293:   sqlite_master / 1 leaf 1 37 875 37 0 1024",
          "",
          "[Added Lines]",
          "293:   sqlite_schema / 1 leaf 1 37 875 37 0 1024",
          "",
          "---------------"
        ],
        "tool/spaceanal.tcl||tool/spaceanal.tcl": [
          "File: tool/spaceanal.tcl -> tool/spaceanal.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "16:   db eval \"PRAGMA index_list = '$t'\" o {",
          "17:     if {$o(origin) == \"pk\"} {",
          "18:       set n $o(name)",
          "20:         return 1",
          "21:       }",
          "22:     }",
          "",
          "[Removed Lines]",
          "19:       if {0==[db one { SELECT count(*) FROM sqlite_master WHERE name=$n }]} {",
          "",
          "[Added Lines]",
          "19:       if {0==[db one { SELECT count(*) FROM sqlite_schema WHERE name=$n }]} {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "160:   exit 1",
          "161: }",
          "164: set pageSize [expr {wide([db one {PRAGMA page_size}])}]",
          "166: if {$flags(-pageinfo)} {",
          "",
          "[Removed Lines]",
          "163: db eval {SELECT count(*) FROM sqlite_master}",
          "",
          "[Added Lines]",
          "163: db eval {SELECT count(*) FROM sqlite_schema}",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "245: set isCompressed 0",
          "246: set compressOverhead 0",
          "247: set depth 0",
          "251:   set is_index [expr {$name!=$tblname}]",
          "252:   set is_without_rowid [is_without_rowid $name]",
          "",
          "[Removed Lines]",
          "248: set sql { SELECT name, tbl_name FROM sqlite_master WHERE rootpage>0 }",
          "249: foreach {name tblname} [concat sqlite_master sqlite_master [db eval $sql]] {",
          "",
          "[Added Lines]",
          "248: set sql { SELECT name, tbl_name FROM sqlite_schema WHERE rootpage>0 }",
          "249: foreach {name tblname} [concat sqlite_schema sqlite_schema [db eval $sql]] {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "560: # nautoindex:    Number of indices created automatically.",
          "561: # nmanindex:     Number of indices created manually.",
          "562: # user_payload:  Number of bytes of payload in table btrees",
          "564: # user_percent:  $user_payload as a percentage of total file size.",
          "566: ### The following, setting $file_bytes based on the actual size of the file",
          "",
          "[Removed Lines]",
          "563: #                (not including sqlite_master)",
          "",
          "[Added Lines]",
          "563: #                (not including sqlite_schema)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "590: # Account for the lockbyte page",
          "591: if {$file_pgcnt2*$pageSize>1073742335} {incr file_pgcnt2}",
          "596: set nautoindex [db eval $sql]",
          "597: set nmanindex [expr {$nindex-$nautoindex}]",
          "599: # set total_payload [mem eval \"SELECT sum(payload) FROM space_used\"]",
          "600: set user_payload [mem one {SELECT int(sum(payload)) FROM space_used",
          "602: set user_percent [percent $user_payload $file_bytes]",
          "604: # Output the summary statistics calculated above.",
          "",
          "[Removed Lines]",
          "593: set ntable [db eval {SELECT count(*)+1 FROM sqlite_master WHERE type='table'}]",
          "594: set nindex [db eval {SELECT count(*) FROM sqlite_master WHERE type='index'}]",
          "595: set sql {SELECT count(*) FROM sqlite_master WHERE name LIKE 'sqlite_autoindex%'}",
          "601:      WHERE NOT is_index AND name NOT LIKE 'sqlite_master'}]",
          "",
          "[Added Lines]",
          "593: set ntable [db eval {SELECT count(*)+1 FROM sqlite_schema WHERE type='table'}]",
          "594: set nindex [db eval {SELECT count(*) FROM sqlite_schema WHERE type='index'}]",
          "595: set sql {SELECT count(*) FROM sqlite_schema WHERE name LIKE 'sqlite_autoindex%'}",
          "601:      WHERE NOT is_index AND name NOT LIKE 'sqlite_schema'}]",
          "",
          "---------------"
        ]
      }
    }
  ]
}