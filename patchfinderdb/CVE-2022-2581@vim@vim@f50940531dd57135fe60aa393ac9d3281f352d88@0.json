{
  "cve_id": "CVE-2022-2581",
  "cve_desc": "Out-of-bounds Read in GitHub repository vim/vim prior to 9.0.0104.",
  "repo": "vim/vim",
  "patch_hash": "f50940531dd57135fe60aa393ac9d3281f352d88",
  "patch_info": {
    "commit_hash": "f50940531dd57135fe60aa393ac9d3281f352d88",
    "repo": "vim/vim",
    "commit_url": "https://github.com/vim/vim/commit/f50940531dd57135fe60aa393ac9d3281f352d88",
    "files": [
      "src/regexp.c",
      "src/testdir/test_regexp_utf8.vim",
      "src/version.c"
    ],
    "message": "patch 9.0.0105: illegal memory access when pattern starts with illegal byte\n\nProblem:    Illegal memory access when pattern starts with illegal byte.\nSolution:   Do not match a character with an illegal byte.",
    "before_after_code_files": [
      "src/regexp.c||src/regexp.c",
      "src/testdir/test_regexp_utf8.vim||src/testdir/test_regexp_utf8.vim",
      "src/version.c||src/version.c"
    ]
  },
  "patch_diff": {
    "src/regexp.c||src/regexp.c": [
      "File: src/regexp.c -> src/regexp.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1641:  {",
      "1642:      if (enc_utf8 && c > 0x80)",
      "1643:      {",
      "1645:       return p;",
      "1646:      }",
      "1647:      else if (*p == c || *p == cc)",
      "",
      "[Removed Lines]",
      "1644:   if (utf_fold(utf_ptr2char(p)) == cc)",
      "",
      "[Added Lines]",
      "1644:   int uc = utf_ptr2char(p);",
      "1648:   if ((uc < 0x80 || uc != *p) && utf_fold(uc) == cc)",
      "",
      "---------------"
    ],
    "src/testdir/test_regexp_utf8.vim||src/testdir/test_regexp_utf8.vim": [
      "File: src/testdir/test_regexp_utf8.vim -> src/testdir/test_regexp_utf8.vim",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: \" Tests for regexp in utf8 encoding",
      "3: func s:equivalence_test()",
      "4:   let str = \"A\u00c0\u00c1\u00c2\u00c3\u00c4\u00c5\u0100\u0102\u0104\u01cd\u01de\u01e0\u01fa\u0202\u0226\u023a\u1e00\u1ea0\u1ea2\u1ea4\u1ea6\u1ea8\u1eaa\u1eac\u1eae\u1eb0\u1eb2\u1eb4\u1eb6 B\u0181\u0243\u1e02\u1e04\u1e06 C\u00c7\u0106\u0108\u010a\u010c\u0187\u023b\u1e08\ua792 D\u010e\u0110\u018a\u1e0a\u1e0c\u1e0e\u1e10\u1e12 E\u00c8\u00c9\u00ca\u00cb\u0112\u0114\u0116\u0118\u011a\u0204\u0206\u0228\u0246\u1e14\u1e16\u1e18\u1e1a\u1e1c\u1eb8\u1eba\u1ebc\u1ebe\u1ec0\u1ec2\u1ec4\u1ec6 F\u0191\u1e1e\ua798 G\u011c\u011e\u0120\u0122\u0193\u01e4\u01e6\u01f4\u1e20\ua7a0 H\u0124\u0126\u021e\u1e22\u1e24\u1e26\u1e28\u1e2a\u2c67 I\u00cc\u00cd\u00ce\u00cf\u0128\u012a\u012c\u012e\u0130\u0197\u01cf\u0208\u020a\u1e2c\u1e2e\u1ec8\u1eca J\u0134\u0248 K\u0136\u0198\u01e8\u1e30\u1e32\u1e34\u2c69\ua740 L\u0139\u013b\u013d\u013f\u0141\u023d\u1e36\u1e38\u1e3a\u1e3c\u2c60 M\u1e3e\u1e40\u1e42 N\u00d1\u0143\u0145\u0147\u01f8\u1e44\u1e46\u1e48\u1e4a\ua7a4 O\u00d2\u00d3\u00d4\u00d5\u00d6\u00d8\u014c\u014e\u0150\u019f\u01a0\u01d1\u01ea\u01ec\u01fe\u020c\u020e\u022a\u022c\u022e\u0230\u1e4c\u1e4e\u1e50\u1e52\u1ecc\u1ece\u1ed0\u1ed2\u1ed4\u1ed6\u1ed8\u1eda\u1edc\u1ede\u1ee0\u1ee2 P\u01a4\u1e54\u1e56\u2c63 Q\u024a R\u0154\u0156\u0158\u0210\u0212\u024c\u1e58\u1e5a\u1e5c\u1e5e\u2c64\ua7a6 S\u015a\u015c\u015e\u0160\u0218\u1e60\u1e62\u1e64\u1e66\u1e68\u2c7e\ua7a8 T\u0162\u0164\u0166\u01ac\u01ae\u021a\u023e\u1e6a\u1e6c\u1e6e\u1e70 U\u00d9\u00da\u00db\u00dc\u0168\u016a\u016c\u016e\u0170\u01af\u01d5\u01d9\u01db\u01d3\u01d7\u0214\u0216\u0244\u1e72\u1e74\u1e76\u1e78\u1e7a\u1ee4\u1ee6\u1ee8\u1eea\u1eec\u1eee\u1ef0  V\u01b2\u1e7c\u1e7e W\u0174\u1e80\u1e82\u1e84\u1e86\u1e88 X\u1e8a\u1e8c Y\u00dd\u0176\u0178\u01b3\u0232\u024e\u1e8e\u1ef2\u1ef4\u1ef6\u1ef8 Z\u0179\u017b\u017d\u01b5\u1e90\u1e92\u1e94\u2c6b a\u00e0\u00e1\u00e2\u00e3\u00e4\u00e5\u0101\u0103\u0105\u01ce\u01df\u01e1\u01fb\u0203\u0227\u1d8f\u1e01\u1e9a\u1ea1\u1ea3\u1ea5\u1ea7\u1ea9\u1eab\u1ead\u1eaf\u1eb1\u1eb3\u1eb5\u1eb7\u2c65 b\u0180\u0253\u1d6c\u1d80\u1e03\u1e05\u1e07 c\u00e7\u0107\u0109\u010b\u010d\u0188\u023c\u1e09\ua793\ua794 d\u010f\u0111\u0257\u1d6d\u1d81\u1d91\u1e0b\u1e0d\u1e0f\u1e11\u1e13 e\u00e8\u00e9\u00ea\u00eb\u0113\u0115\u0117\u0119\u011b\u0205\u0207\u0229\u0247\u1d92\u1e15\u1e17\u1e19\u1e1b\u1e1d\u1eb9\u1ebb\u1ebd\u1ebf\u1ec1\u1ec3\u1ec5\u1ec7 f\u0192\u1d6e\u1d82\u1e1f\ua799 g\u011d\u011f\u0121\u0123\u01e5\u01e7\u01f5\u0260\u1d83\u1e21\ua7a1 h\u0125\u0127\u021f\u1e23\u1e25\u1e27\u1e29\u1e2b\u1e96\u2c68\ua795 i\u00ec\u00ed\u00ee\u00ef\u0129\u012b\u012d\u012f\u01d0\u0209\u020b\u0268\u1d96\u1e2d\u1e2f\u1ec9\u1ecb j\u0135\u01f0\u0249 k\u0137\u0199\u01e9\u1d84\u1e31\u1e33\u1e35\u2c6a\ua741 l\u013a\u013c\u013e\u0140\u0142\u019a\u1e37\u1e39\u1e3b\u1e3d\u2c61 m\u1d6f\u1e3f\u1e41\u1e43 n\u00f1\u0144\u0146\u0148\u0149\u01f9\u1d70\u1d87\u1e45\u1e47\u1e49\u1e4b\ua7a5 o\u00f2\u00f3\u00f4\u00f5\u00f6\u00f8\u014d\u014f\u0151\u01a1\u01d2\u01eb\u01ed\u01ff\u020d\u020f\u022b\u022d\u022f\u0231\u0275\u1e4d\u1e4f\u1e51\u1e53\u1ecd\u1ecf\u1ed1\u1ed3\u1ed5\u1ed7\u1ed9\u1edb\u1edd\u1edf\u1ee1\u1ee3 p\u01a5\u1d71\u1d7d\u1d88\u1e55\u1e57 q\u024b\u02a0 r\u0155\u0157\u0159\u0211\u0213\u024d\u027d\u1d72\u1d73\u1d89\u1e5b\u1e5d\u1e5f\ua7a7 s\u015b\u015d\u015f\u0161\u0219\u023f\u1d74\u1d8a\u1e61\u1e63\u1e65\u1e67\u1e69\ua7a9 t\u0163\u0165\u0167\u01ab\u01ad\u021b\u0288\u1d75\u1e6b\u1e6d\u1e6f\u1e71\u1e97\u2c66 u\u00f9\u00fa\u00fb\u00fc\u0169\u016b\u016d\u016f\u0171\u0173\u01da\u01d6\u01b0\u01d4\u01d8\u01dc\u0215\u0217\u0289\u1d7e\u1d99\u1e73\u1e75\u1e77\u1e79\u1e7b\u1ee5\u1ee7\u1ee9\u1eeb\u1eed\u1eef\u1ef1 v\u028b\u1d8c\u1e7d\u1e7f w\u0175\u1e81\u1e83\u1e85\u1e87\u1e89\u1e98 x\u1e8b\u1e8d y\u00fd\u00ff\u0177\u01b4\u0233\u024f\u1e8f\u1e99\u1ef3\u1ef5\u1ef7\u1ef9 z\u017a\u017c\u017e\u01b6\u1d76\u1d8e\u1e91\u1e93\u1e95\u2c6c\"",
      "5:   let groups = split(str)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "3: source shared.vim",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "560:   bwipe!",
      "561:   call delete('Xinvalid')",
      "562: endfunc",
      "564: func Test_match_too_complicated()",
      "565:   set regexpengine=1",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "566: func Test_match_illegal_byte()",
      "567:   let lines =<< trim END",
      "568:       silent! buffer \u00ff\\c",
      "569:       next \u00ff",
      "570:       0scriptnames",
      "571:       source",
      "572:   END",
      "573:   call writefile(lines, 'Xregexp')",
      "574:   call system(GetVimCommand() .. ' -X -Z -e -s -S Xregexp -c qa!')",
      "576:   call delete('Xregexp')",
      "577: endfunc",
      "",
      "---------------"
    ],
    "src/version.c||src/version.c": [
      "File: src/version.c -> src/version.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "736: static int included_patches[] =",
      "739:     104,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "739:     105,",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "db77cb3c08784e6038dd029271b2080c1b2d9acb",
      "candidate_info": {
        "commit_hash": "db77cb3c08784e6038dd029271b2080c1b2d9acb",
        "repo": "vim/vim",
        "commit_url": "https://github.com/vim/vim/commit/db77cb3c08784e6038dd029271b2080c1b2d9acb",
        "files": [
          "src/testdir/test_quickfix.vim",
          "src/testdir/test_recover.vim",
          "src/testdir/test_regexp_utf8.vim",
          "src/testdir/test_rename.vim",
          "src/testdir/test_restricted.vim",
          "src/version.c"
        ],
        "message": "patch 9.0.0669: too many delete() calls in tests\n\nProblem:    Too many delete() calls in tests.\nSolution:   Use deferred delete where possible.",
        "before_after_code_files": [
          "src/testdir/test_quickfix.vim||src/testdir/test_quickfix.vim",
          "src/testdir/test_recover.vim||src/testdir/test_recover.vim",
          "src/testdir/test_regexp_utf8.vim||src/testdir/test_regexp_utf8.vim",
          "src/testdir/test_rename.vim||src/testdir/test_rename.vim",
          "src/testdir/test_restricted.vim||src/testdir/test_restricted.vim",
          "src/version.c||src/version.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/testdir/test_regexp_utf8.vim||src/testdir/test_regexp_utf8.vim",
            "src/version.c||src/version.c"
          ],
          "candidate": [
            "src/testdir/test_regexp_utf8.vim||src/testdir/test_regexp_utf8.vim",
            "src/version.c||src/version.c"
          ]
        }
      },
      "candidate_diff": {
        "src/testdir/test_quickfix.vim||src/testdir/test_quickfix.vim": [
          "File: src/testdir/test_quickfix.vim -> src/testdir/test_quickfix.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "396:     Xtestfile1:700:10:Line 700",
          "397:     Xtestfile2:800:15:Line 800",
          "398:   END",
          "401:   enew!",
          "402:   Xfile Xqftestfile1",
          "",
          "[Removed Lines]",
          "399:   call writefile(lines, 'Xqftestfile1')",
          "",
          "[Added Lines]",
          "399:   call writefile(lines, 'Xqftestfile1', 'D')",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "439:   call writefile([t], 'Xqftestfile1', 'b')",
          "440:   silent! Xfile Xqftestfile1",
          "441:   call assert_equal(text, g:Xgetlist()[0].text)",
          "444: endfunc",
          "446: func Test_cfile()",
          "",
          "[Removed Lines]",
          "443:   call delete('Xqftestfile1')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "795:   call assert_fails('Xbuffer', 'E342:')",
          "796:   %bw!",
          "799:   call test_alloc_fail(GetAllocId('qf_linebuf'), 0, 0)",
          "800:   call assert_fails('Xfile Xtest', 'E342:')",
          "802: endfunc",
          "804: func Test_nomem()",
          "",
          "[Removed Lines]",
          "798:   call writefile([repeat('a', 8192)], 'Xtest')",
          "801:   call delete('Xtest')",
          "",
          "[Added Lines]",
          "796:   call writefile([repeat('a', 8192)], 'Xtest', 'D')",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "899:   var rtp_save = &rtp",
          "900:   var dir = 'Xruntime/after'",
          "901:   &rtp ..= ',' .. dir",
          "903:   writefile(['vim9script'], dir .. '/ftplugin/qf.vim')",
          "904:   filetype plugin on",
          "905:   silent helpgrep grail",
          "",
          "[Removed Lines]",
          "902:   mkdir(dir .. '/ftplugin', 'p')",
          "",
          "[Added Lines]",
          "899:   mkdir(dir .. '/ftplugin', 'pR')",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "907:   silent helpgrep grail",
          "909:   assert_equal('aABceFs', &cpo)",
          "911:   &rtp = rtp_save",
          "912:   cclose",
          "913:   helpclose",
          "",
          "[Removed Lines]",
          "910:   delete('Xruntime', 'rf')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1180: endfunc",
          "1182: func Test_locationlist_cross_tab_jump()",
          "1185:   set switchbuf=usetab",
          "1187:   edit loclistfoo",
          "",
          "[Removed Lines]",
          "1183:   call writefile(['loclistfoo'], 'loclistfoo')",
          "1184:   call writefile(['loclistbar'], 'loclistbar')",
          "",
          "[Added Lines]",
          "1179:   call writefile(['loclistfoo'], 'loclistfoo', 'D')",
          "1180:   call writefile(['loclistbar'], 'loclistbar', 'D')",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1192:   enew | only | tabonly",
          "1193:   set switchbuf&vim",
          "1196: endfunc",
          "1198: \" More tests for 'errorformat'",
          "",
          "[Removed Lines]",
          "1194:   call delete('loclistfoo')",
          "1195:   call delete('loclistbar')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1237:     \"Xtestfile\", line 22 col 9: What is the title of the quickfix window?",
          "1238:   [DATA]",
          "1243:   let m =<< [DATA]",
          "1244:  xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx    line  2",
          "",
          "[Removed Lines]",
          "1240:   call writefile(l, 'Xerrorfile1')",
          "1241:   call writefile(l[:-2], 'Xerrorfile2')",
          "",
          "[Added Lines]",
          "1234:   call writefile(l, 'Xerrorfile1', 'D')",
          "1235:   call delete('loclistbar')",
          "1236:   call writefile(l[:-2], 'Xerrorfile2', 'D')",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1263:  xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx    line 21",
          "1264:  xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx    line 22",
          "1265: [DATA]",
          "1268:   let save_efm = &efm",
          "1269:   set efm+==%f=\\\\,\\ line\\ %l%*\\\\D%v%*[^\\ ]\\ %m",
          "",
          "[Removed Lines]",
          "1266:   call writefile(m, 'Xtestfile')",
          "",
          "[Added Lines]",
          "1261:   call writefile(m, 'Xtestfile', 'D')",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1309:   wincmd p",
          "1311:   let &efm = save_efm",
          "1315: endfunc",
          "1317: \" Test for quickfix directory stack support",
          "",
          "[Removed Lines]",
          "1312:   call delete('Xerrorfile1')",
          "1313:   call delete('Xerrorfile2')",
          "1314:   call delete('Xtestfile')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1363: \" Tests for %D and %X errorformat options",
          "1364: func Test_efm_dirstack()",
          "1365:   \" Create the directory stack and files",
          "1367:   call mkdir('dir1/a')",
          "1368:   call mkdir('dir1/a/b')",
          "1369:   call mkdir('dir1/c')",
          "1372:   let lines =<< trim END",
          "1373:     Nine Healthy Habits",
          "",
          "[Removed Lines]",
          "1366:   call mkdir('dir1')",
          "1370:   call mkdir('dir2')",
          "",
          "[Added Lines]",
          "1358:   call mkdir('dir1', 'R')",
          "1362:   call mkdir('dir2', 'R')",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1382:     8 Hours of sleep (at least)",
          "1383:     9 PM end of the day and off to bed",
          "1384:   END",
          "1386:   call writefile(lines, 'dir1/a/habits2.txt')",
          "1387:   call writefile(lines, 'dir1/a/b/habits3.txt')",
          "1388:   call writefile(lines, 'dir1/c/habits4.txt')",
          "",
          "[Removed Lines]",
          "1385:   call writefile(lines, 'habits1.txt')",
          "",
          "[Added Lines]",
          "1377:   call writefile(lines, 'habits1.txt', 'D')",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1391:   call s:dir_stack_tests('c')",
          "1392:   call s:dir_stack_tests('l')",
          "1397: endfunc",
          "1399: \" Test for resync after continuing an ignored message",
          "",
          "[Removed Lines]",
          "1394:   call delete('dir1', 'rf')",
          "1395:   call delete('dir2', 'rf')",
          "1396:   call delete('habits1.txt')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1518:   set efm=%+P[%f]%r,(%l\\\\,%c)%*[\\ ]%t%*[^:]:\\ %m,%+Q--%r",
          "1519:   \" To exercise the push/pop file functionality in quickfix, the test files",
          "1520:   \" need to be created.",
          "1524:   cexpr \"\"",
          "1525:   for l in lines",
          "1526:       caddexpr l",
          "",
          "[Removed Lines]",
          "1521:   call writefile(['Line1'], 'Xtestfile1')",
          "1522:   call writefile(['Line2'], 'Xtestfile2')",
          "1523:   call writefile(['Line3'], 'Xtestfile3')",
          "",
          "[Added Lines]",
          "1509:   call writefile(['Line1'], 'Xtestfile1', 'D')",
          "1510:   call writefile(['Line2'], 'Xtestfile2', 'D')",
          "1511:   call writefile(['Line3'], 'Xtestfile3', 'D')",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1531:   call assert_equal(2, l[2].col)",
          "1532:   call assert_equal('w', l[2].type)",
          "1533:   call assert_equal('e', l[3].type)",
          "1538:   \" Test for %P, %Q with non-existing files",
          "1539:   cexpr lines",
          "",
          "[Removed Lines]",
          "1534:   call delete('Xtestfile1')",
          "1535:   call delete('Xtestfile2')",
          "1536:   call delete('Xtestfile3')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1602:   \" Test for %o",
          "1603:   set efm=%f(%o):%l\\ %m",
          "1604:   cgetexpr ['Xotestfile(Language.PureScript.Types):20 Error']",
          "1606:   let l = getqflist()",
          "1607:   call assert_equal(1, len(l), string(l))",
          "1608:   call assert_equal('Language.PureScript.Types', l[0].module)",
          "",
          "[Removed Lines]",
          "1605:   call writefile(['Line1'], 'Xotestfile')",
          "",
          "[Added Lines]",
          "1590:   call writefile(['Line1'], 'Xotestfile', 'D')",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1612:   call assert_equal('Xotestfile', expand('%:t'))",
          "1613:   cclose",
          "1614:   bd",
          "1617:   \" Test for a long module name",
          "1618:   cexpr 'Xtest(' . repeat('m', 1026) . '):15 message'",
          "",
          "[Removed Lines]",
          "1615:   call delete(\"Xotestfile\")",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1776: endfunc",
          "1778: func Test_setloclist_in_autocommand()",
          "1780:   edit Xfile",
          "1781:   let s:bufnr = bufnr()",
          "1782:   call setloclist(1,",
          "",
          "[Removed Lines]",
          "1779:   call writefile(['test1', 'test2'], 'Xfile')",
          "",
          "[Added Lines]",
          "1763:   call writefile(['test1', 'test2'], 'Xfile', 'D')",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1796:   augroup Test_LocList",
          "1797:     au!",
          "1798:   augroup END",
          "1800: endfunc",
          "1802: func Test_caddbuffer_to_empty()",
          "",
          "[Removed Lines]",
          "1799:   call delete('Xfile')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "2129:       /tmp/file4:1:1:ccc",
          "2130:     END",
          "2131:     let lines[1] = substitute(lines[1], '%s', repeat('x', len), '')",
          "2133:     cgetfile Xcqetfile.txt",
          "2134:     call assert_equal(4, getqflist(#{size: v:true}).size, 'with length ' .. len)",
          "2135:   endfor",
          "2137: endfunc",
          "2139: func s:create_test_file(filename)",
          "",
          "[Removed Lines]",
          "2132:     call writefile(lines, 'Xcqetfile.txt')",
          "2136:   call delete('Xcqetfile.txt')",
          "",
          "[Added Lines]",
          "2115:     call writefile(lines, 'Xcqetfile.txt', 'D')",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "2274:   \" If opening a file changes 'switchbuf', then the new value should be",
          "2275:   \" retained.",
          "2276:   set modeline&vim",
          "2278:   enew | only",
          "2279:   set switchbuf&vim",
          "2280:   cexpr \"Xqftestfile1:1:10\"",
          "",
          "[Removed Lines]",
          "2277:   call writefile([\"vim: switchbuf=split\"], 'Xqftestfile1')",
          "",
          "[Added Lines]",
          "2259:   call writefile([\"vim: switchbuf=split\"], 'Xqftestfile1', 'D')",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "2290:   cexpr \"Xqftestfile1:1:10\"",
          "2291:   call assert_equal('', &switchbuf)",
          "2294:   call delete('Xqftestfile2')",
          "2295:   call delete('Xqftestfile3')",
          "2296:   set switchbuf&vim",
          "",
          "[Removed Lines]",
          "2293:   call delete('Xqftestfile1')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "2385:   \" Use one 'errorformat' for two windows.  Add an expression to each of them,",
          "2386:   \" make sure they each keep their own state.",
          "2387:   set efm=%DEntering\\ dir\\ '%f',%f:%l:%m,%XLeaving\\ dir\\ '%f'",
          "2390:   let lines = ['1', '2', 'one one one', '4', 'two two two', '6', '7']",
          "2391:   call writefile(lines, 'Xone/a/one.txt')",
          "2392:   call writefile(lines, 'Xtwo/a/two.txt')",
          "",
          "[Removed Lines]",
          "2388:   call mkdir('Xone/a', 'p')",
          "2389:   call mkdir('Xtwo/a', 'p')",
          "",
          "[Added Lines]",
          "2369:   call mkdir('Xone/a', 'pR')",
          "2370:   call mkdir('Xtwo/a', 'pR')",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "2418:   bwipe!",
          "2419:   call win_gotoid(two_id)",
          "2420:   bwipe!",
          "2423: endfunc",
          "2425: func XbottomTests(cchar)",
          "",
          "[Removed Lines]",
          "2421:   call delete('Xone', 'rf')",
          "2422:   call delete('Xtwo', 'rf')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "2503:   let last_buffer = bufnr(\"$\")",
          "2505:   \" make sure only one buffer is created",
          "2507:   vimgrep one Xgrepthis",
          "2508:   vimgrep one Xgrepthis",
          "2509:   call assert_equal(last_buffer + 1, bufnr(\"$\"))",
          "2512: endfunc",
          "2514: \" Quickfix/Location list set/get properties tests",
          "",
          "[Removed Lines]",
          "2506:   call writefile(['this one', 'that one'], 'Xgrepthis')",
          "2511:   call delete('Xgrepthis')",
          "",
          "[Added Lines]",
          "2485:   call writefile(['this one', 'that one'], 'Xgrepthis', 'D')",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "2876:   END",
          "2877:   call assert_equal(l, g:acmds)",
          "2881:   let g:acmds = []",
          "2882:   cfile Xtest",
          "2883:   caddfile Xtest",
          "",
          "[Removed Lines]",
          "2879:   call writefile(['Xtest:1:Line1'], 'Xtest')",
          "2880:   call writefile([], 'Xempty')",
          "",
          "[Added Lines]",
          "2856:   call writefile(['Xtest:1:Line1'], 'Xtest', 'D')",
          "2857:   call writefile([], 'Xempty', 'D')",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "2976:     call assert_equal(l, g:acmds)",
          "2977:   endif",
          "2981:   au! QuickFixCmdPre",
          "2982:   au! QuickFixCmdPost",
          "2983: endfunc",
          "",
          "[Removed Lines]",
          "2979:   call delete('Xtest')",
          "2980:   call delete('Xempty')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "3137:     redraw",
          "3138:     cwindow 4",
          "3139:   END",
          "3141:   let buf = RunVimInTerminal('-S XtestCwindow', #{rows: 12})",
          "3142:   call VerifyScreenDump(buf, 'Test_quickfix_cwindow_1', {})",
          "",
          "[Removed Lines]",
          "3140:   call writefile(lines, 'XtestCwindow')",
          "",
          "[Added Lines]",
          "3115:   call writefile(lines, 'XtestCwindow', 'D')",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "3153:   \" clean up",
          "3154:   call StopVimInTerminal(buf)",
          "3156:   call delete('XCwindow')",
          "3157: endfunc",
          "",
          "[Removed Lines]",
          "3155:   call delete('XtestCwindow')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "3164:     Editor:Emacs EmAcS",
          "3165:     Editor:Notepad NOTEPAD",
          "3166:   END",
          "3170:   \" Error cases",
          "3171:   call assert_fails('Xvimgrep /abc *', 'E682:')",
          "",
          "[Removed Lines]",
          "3167:   call writefile(lines, 'Xtestfile1')",
          "3168:   call writefile(['Linux', 'macOS', 'MS-Windows'], 'Xtestfile2')",
          "",
          "[Added Lines]",
          "3141:   call writefile(lines, 'Xtestfile1', 'D')",
          "3142:   call writefile(['Linux', 'macOS', 'MS-Windows'], 'Xtestfile2', 'D')",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "3221:   augroup QF_Test",
          "3222:     au!",
          "3223:   augroup END",
          "3227: endfunc",
          "3229: \" Tests for the :vimgrep command",
          "",
          "[Removed Lines]",
          "3225:   call delete('Xtestfile1')",
          "3226:   call delete('Xtestfile2')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "3261:     call writefile(v:errors, 'Xresult')",
          "3262:     qall!",
          "3263:   [SCRIPT]",
          "3265:   if RunVim([], [], '--clean -S Xscript')",
          "3266:     call assert_equal([], readfile('Xresult'))",
          "3267:   endif",
          "3269:   call delete('Xresult')",
          "3270: endfunc",
          "",
          "[Removed Lines]",
          "3264:   call writefile(lines, 'Xscript')",
          "3268:   call delete('Xscript')",
          "",
          "[Added Lines]",
          "3235:   call writefile(lines, 'Xscript', 'D')",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "3276:     call writefile(['done'], 'Xresult')",
          "3277:     qall!",
          "3278:   [SCRIPT]",
          "3280:   if RunVim([], [], '--clean -n -S Xscript Xscript')",
          "3281:     call assert_equal(['done'], readfile('Xresult'))",
          "3282:   endif",
          "3284:   call delete('Xresult')",
          "3285: endfunc",
          "3287: func Test_vimgrep_existing_swapfile()",
          "3290:   let g:foundSwap = 0",
          "3291:   let g:ignoreSwapExists = 1",
          "3292:   augroup grep",
          "",
          "[Removed Lines]",
          "3279:   call writefile(lines, 'Xscript')",
          "3283:   call delete('Xscript')",
          "3288:   call writefile(['match apple with apple'], 'Xapple')",
          "3289:   call writefile(['swapfile'], '.Xapple.swp')",
          "",
          "[Added Lines]",
          "3249:   call writefile(lines, 'Xscript', 'D')",
          "3257:   call writefile(['match apple with apple'], 'Xapple', 'D')",
          "3258:   call writefile(['swapfile'], '.Xapple.swp', 'D')",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "3296:   call assert_equal(1, g:foundSwap)",
          "3297:   call assert_match('.Xapple.swo', swapname(''))",
          "3301:   augroup grep",
          "3302:     au! SwapExists",
          "3303:   augroup END",
          "",
          "[Removed Lines]",
          "3299:   call delete('Xapple')",
          "3300:   call delete('.Xapple.swp')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "3638: endfunc",
          "3640: func Test_multidirstack()",
          "3643:   let lines = ['1', '2', 'one one one', '4', 'two two two', '6', '7']",
          "3644:   call writefile(lines, 'Xone/a/one.txt')",
          "3645:   call writefile(lines, 'Xtwo/a/two.txt')",
          "",
          "[Removed Lines]",
          "3641:   call mkdir('Xone/a', 'p')",
          "3642:   call mkdir('Xtwo/a', 'p')",
          "",
          "[Added Lines]",
          "3608:   call mkdir('Xone/a', 'pR')",
          "3609:   call mkdir('Xtwo/a', 'pR')",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "3650:   call Xmultidirstack_tests('l')",
          "3652:   let &efm = save_efm",
          "3655: endfunc",
          "3657: \" Tests for per quickfix/location list file stack",
          "",
          "[Removed Lines]",
          "3653:   call delete('Xone', 'rf')",
          "3654:   call delete('Xtwo', 'rf')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "3701: func Test_multifilestack()",
          "3702:   let lines = ['1', '2', 'one one one', '4', 'two two two', '6', '7']",
          "3705:   let save_efm = &efm",
          "3706:   set efm=%+P[%f],(%l\\\\,%c)\\ %m,%-Q",
          "",
          "[Removed Lines]",
          "3703:   call writefile(lines, 'one.txt')",
          "3704:   call writefile(lines, 'two.txt')",
          "",
          "[Added Lines]",
          "3668:   call writefile(lines, 'one.txt', 'D')",
          "3669:   call writefile(lines, 'two.txt', 'D')",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "3709:   call Xmultifilestack_tests('l')",
          "3711:   let &efm = save_efm",
          "3714: endfunc",
          "3716: \" Tests for per buffer 'efm' setting",
          "3717: func Test_perbuf_efm()",
          "3720:   set efm=%f#%l#%m",
          "3721:   new | only",
          "3722:   new",
          "",
          "[Removed Lines]",
          "3712:   call delete('one.txt')",
          "3713:   call delete('two.txt')",
          "3718:   call writefile([\"File1-10-Line10\"], 'one.txt')",
          "3719:   call writefile([\"File2#20#Line20\"], 'two.txt')",
          "",
          "[Added Lines]",
          "3681:   call writefile([\"File1-10-Line10\"], 'one.txt', 'D')",
          "3682:   call writefile([\"File2#20#Line20\"], 'two.txt', 'D')",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "3732:   set efm&",
          "3733:   new | only",
          "3736: endfunc",
          "3738: \" Open multiple help windows using \":lhelpgrep",
          "",
          "[Removed Lines]",
          "3734:   call delete('one.txt')",
          "3735:   call delete('two.txt')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "3908: func Xqfjump_tests(cchar)",
          "3909:   call s:setup_commands(a:cchar)",
          "3915:   call g:Xsetlist([], 'f')",
          "",
          "[Removed Lines]",
          "3911:   call writefile([\"Line1\\tFoo\", \"Line2\"], 'F1')",
          "3912:   call writefile([\"Line1\\tBar\", \"Line2\"], 'F2')",
          "3913:   call writefile([\"Line1\\tBaz\", \"Line2\"], 'F3')",
          "",
          "[Added Lines]",
          "3872:   call writefile([\"Line1\\tFoo\", \"Line2\"], 'F1', 'D')",
          "3873:   call writefile([\"Line1\\tBar\", \"Line2\"], 'F2', 'D')",
          "3874:   call writefile([\"Line1\\tBaz\", \"Line2\"], 'F3', 'D')",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "3999:   \" Cleanup",
          "4000:   enew!",
          "4001:   new | only",
          "4006: endfunc",
          "4008: func Test_qfjump()",
          "",
          "[Removed Lines]",
          "4003:   call delete('F1')",
          "4004:   call delete('F2')",
          "4005:   call delete('F3')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "4118:       let &quickfixtextfunc = 's:Func'",
          "4119:       cgetfile [ex",
          "4120:   END",
          "4122:   call RunVim([], [], '-e -s -S Xquickfixtextfunc -c qa')",
          "4124: endfunc",
          "4126: func Test_getqflist()",
          "",
          "[Removed Lines]",
          "4121:   call writefile(lines, 'Xquickfixtextfunc')",
          "4123:   call delete('Xquickfixtextfunc')",
          "",
          "[Added Lines]",
          "4078:   call writefile(lines, 'Xquickfixtextfunc', 'D')",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "4173:        \\ {'filename' : 'F7', 'lnum' : 11, 'text' : 'L11'}], 'r')",
          "4174:   call assert_equal(2, g:Xgetlist({'changedtick' : 0}).changedtick)",
          "4177:   Xfile Xone",
          "4178:   call assert_equal(1, g:Xgetlist({'changedtick' : 0}).changedtick)",
          "4179:   Xaddfile Xone",
          "",
          "[Removed Lines]",
          "4176:   call writefile([\"F8:80:L80\", \"F8:81:L81\"], \"Xone\")",
          "",
          "[Added Lines]",
          "4132:   call writefile([\"F8:80:L80\", \"F8:81:L81\"], \"Xone\", 'D')",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "4186:   call g:Xsetlist([], 'a', {'nr' : 1, \"lines\" : [\"F10:10:L10\"]})",
          "4187:   call assert_equal(1, g:Xgetlist({'changedtick' : 0}).changedtick)",
          "4188:   call assert_equal(2, g:Xgetlist({'nr' : 1, 'changedtick' : 0}).changedtick)",
          "4191: endfunc",
          "4193: func Test_qf_tick()",
          "",
          "[Removed Lines]",
          "4190:   call delete(\"Xone\")",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "4341: \" :vimgrep/:lvimgrep commands are running.",
          "4342: func Test_vimgrep_autocmd()",
          "4343:   call setqflist([], 'f')",
          "4347:   \" Test 1:",
          "4348:   \" When searching for a pattern using :vimgrep, if the quickfix list is",
          "",
          "[Removed Lines]",
          "4344:   call writefile(['stars'], 'Xtest1.txt')",
          "4345:   call writefile(['stars'], 'Xtest2.txt')",
          "",
          "[Added Lines]",
          "4298:   call writefile(['stars'], 'Xtest1.txt', 'D')",
          "4299:   call writefile(['stars'], 'Xtest2.txt', 'D')",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "4373:   call assert_fails('lvimgrep stars Xtest*.txt', 'E926:')",
          "4374:   au! BufRead Xtest2.txt",
          "4378:   call setqflist([], 'f')",
          "4379: endfunc",
          "",
          "[Removed Lines]",
          "4376:   call delete('Xtest1.txt')",
          "4377:   call delete('Xtest2.txt')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "4403: endfunc",
          "4405: func Test_vimgrep_autocmd_cd()",
          "4408:   call writefile(['a_L1_vim', 'a_L2_vim'], 'Xgrepdir/a/f1.txt')",
          "4409:   call writefile(['b_L1_vim', 'b_L2_vim'], 'Xgrepdir/b/f2.txt')",
          "4410:   call Xvimgrep_autocmd_cd('c')",
          "4411:   call Xvimgrep_autocmd_cd('l')",
          "4412:   %bwipe",
          "4414: endfunc",
          "4416: \" The following test used to crash Vim",
          "",
          "[Removed Lines]",
          "4406:   call mkdir('Xgrepdir/a', 'p')",
          "4407:   call mkdir('Xgrepdir/b', 'p')",
          "4413:   call delete('Xgrepdir', 'rf')",
          "",
          "[Added Lines]",
          "4358:   call mkdir('Xgrepdir/a', 'pR')",
          "4359:   call mkdir('Xgrepdir/b', 'pR')",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "4539: \" Otherwise due to indentation, the title is set with spaces at the beginning",
          "4540: \" of the command.",
          "4541: func Test_qftitle()",
          "4544:   \" :cexpr",
          "4545:   exe \"cexpr readfile('Xerr')\"",
          "",
          "[Removed Lines]",
          "4542:   call writefile([\"F1:1:Line1\"], 'Xerr')",
          "",
          "[Added Lines]",
          "4493:   call writefile([\"F1:1:Line1\"], 'Xerr', 'D')",
          "",
          "---------------",
          "--- Hunk 49 ---",
          "[Context before]",
          "4617:   call assert_equal(':setqflist()', getqflist({'title' : 1}).title)",
          "4619:   close",
          "4622:   call setqflist([], ' ', {'title' : 'Errors'})",
          "4623:   copen",
          "",
          "[Removed Lines]",
          "4620:   call delete('Xerr')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 50 ---",
          "[Context before]",
          "4701:   \" Test for cfile/lfile",
          "4702:   enew",
          "4704:   Xfile Xerr",
          "4705:   call assert_equal('Xtestfile1', @%)",
          "4706:   call assert_equal(2, line('.'))",
          "",
          "[Removed Lines]",
          "4703:   call writefile(l, 'Xerr')",
          "",
          "[Added Lines]",
          "4653:   call writefile(l, 'Xerr', 'D')",
          "",
          "---------------",
          "--- Hunk 51 ---",
          "[Context before]",
          "4711:   call assert_equal('Xtestfile1', @%)",
          "4712:   call assert_equal(2, line('.'))",
          "4715:   call delete('Xtestfile1')",
          "4716:   call delete('Xtestfile2')",
          "4717: endfunc",
          "",
          "[Removed Lines]",
          "4714:   call delete('Xerr')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 52 ---",
          "[Context before]",
          "4731:   call s:create_test_file('Xtestfile2')",
          "4732:   Xexpr 'Xtestfile1:2:Line2'",
          "4733:   autocmd QuickFixCmdPost * Xolder",
          "4735:   Xfile Xerr",
          "4736:   call assert_equal('Xtestfile2', @%)",
          "4737:   call assert_equal(4, line('.'))",
          "",
          "[Removed Lines]",
          "4734:   call writefile(['Xtestfile2:4:Line4'], 'Xerr')",
          "",
          "[Added Lines]",
          "4683:   call writefile(['Xtestfile2:4:Line4'], 'Xerr', 'D')",
          "",
          "---------------",
          "--- Hunk 53 ---",
          "[Context before]",
          "4802:   call assert_fails('silent Xvimgrep Line5 Xtestfile2', 'E480:')",
          "4803:   autocmd! QuickFixCmdPost",
          "4806:   call delete('Xtestfile1')",
          "4807:   call delete('Xtestfile2')",
          "4808: endfunc",
          "",
          "[Removed Lines]",
          "4805:   call delete('Xerr')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 54 ---",
          "[Context before]",
          "4919: \" Test for parsing entries using visual screen column",
          "4920: func Test_viscol()",
          "4921:   enew",
          "4923:   edit Xfile1",
          "4925:   \" Use byte offset for column number",
          "",
          "[Removed Lines]",
          "4922:   call writefile([\"Col1\\tCol2\\tCol3\"], 'Xfile1')",
          "",
          "[Added Lines]",
          "4870:   call writefile([\"Col1\\tCol2\\tCol3\"], 'Xfile1', 'D')",
          "",
          "---------------",
          "--- Hunk 55 ---",
          "[Context before]",
          "4985:   enew | only",
          "4986:   set efm&",
          "4988: endfunc",
          "4990: \" Test for the quickfix window buffer",
          "",
          "[Removed Lines]",
          "4987:   call delete('Xfile1')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 56 ---",
          "[Context before]",
          "5101: \" a normal buffer.",
          "5102: func Test_empty_qfbuf()",
          "5103:   enew | only",
          "5105:   call setqflist([], 'f')",
          "5106:   copen | only",
          "5107:   let qfbuf = bufnr('')",
          "5108:   edit Xfile1",
          "5109:   call assert_notequal(qfbuf, bufnr(''))",
          "5110:   enew",
          "5112: endfunc",
          "5114: \" Test for the :cbelow, :cabove, :lbelow and :labove commands.",
          "",
          "[Removed Lines]",
          "5104:   call writefile([\"Test\"], 'Xfile1')",
          "5111:   call delete('Xfile1')",
          "",
          "[Added Lines]",
          "5051:   call writefile([\"Test\"], 'Xfile1', 'D')",
          "",
          "---------------",
          "--- Hunk 57 ---",
          "[Context before]",
          "5341:   call assert_equal(0, g:Xgetlist({'nr' : '$'}).nr)",
          "5343:   \" cfile/lfile",
          "5345:   let e = ''",
          "5346:   try",
          "5347:     Xfile Xfile1",
          "",
          "[Removed Lines]",
          "5344:   call writefile([\"F1:10:Line10\", \"F2:20:Line20\"], 'Xfile1')",
          "",
          "[Added Lines]",
          "5290:   call writefile([\"F1:10:Line10\", \"F2:20:Line20\"], 'Xfile1', 'D')",
          "",
          "---------------",
          "--- Hunk 58 ---",
          "[Context before]",
          "5350:   endtry",
          "5351:   call assert_equal('AbortCmd', e)",
          "5352:   call assert_equal(0, g:Xgetlist({'nr' : '$'}).nr)",
          "5355:   \" cgetbuffer/lgetbuffer",
          "5356:   enew!",
          "",
          "[Removed Lines]",
          "5353:   call delete('Xfile1')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 59 ---",
          "[Context before]",
          "5415: \" Test for using a file in one of the parent directories.",
          "5416: func Test_search_in_dirstack()",
          "5418:   let save_cwd = getcwd()",
          "5419:   call writefile([\"X1_L1\", \"X1_L2\"], 'Xtestdir/Xfile1')",
          "5420:   call writefile([\"X2_L1\", \"X2_L2\"], 'Xtestdir/a/Xfile2')",
          "",
          "[Removed Lines]",
          "5417:   call mkdir('Xtestdir/a/b/c', 'p')",
          "",
          "[Added Lines]",
          "5362:   call mkdir('Xtestdir/a/b/c', 'pR')",
          "",
          "---------------",
          "--- Hunk 60 ---",
          "[Context before]",
          "5452:   set efm&",
          "5453:   exe 'cd ' . save_cwd",
          "5455: endfunc",
          "5457: \" Test for :cquit",
          "",
          "[Removed Lines]",
          "5454:   call delete('Xtestdir', 'rf')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 61 ---",
          "[Context before]",
          "5895: \" Running :lhelpgrep command more than once in a help window, doesn't jump to",
          "5896: \" the help topic",
          "5897: func Test_lhelpgrep_from_help_window()",
          "5899:   call writefile(['window'], 'Xtestdir/doc/a.txt')",
          "5900:   call writefile(['buffer'], 'Xtestdir/doc/b.txt')",
          "5901:   let save_rtp = &rtp",
          "",
          "[Removed Lines]",
          "5898:   call mkdir('Xtestdir/doc', 'p')",
          "",
          "[Added Lines]",
          "5842:   call mkdir('Xtestdir/doc', 'pR')",
          "",
          "---------------",
          "--- Hunk 62 ---",
          "[Context before]",
          "5906:   lhelpgrep window",
          "5907:   call assert_equal('a.txt', fnamemodify(@%, \":p:t\"))",
          "5908:   let &rtp = save_rtp",
          "5910:   new | only!",
          "5911: endfunc",
          "",
          "[Removed Lines]",
          "5909:   call delete('Xtestdir', 'rf')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 63 ---",
          "[Context before]",
          "5993:         anything",
          "5994:       endtry",
          "5995:   END",
          "5998:   let lines =<< trim END",
          "5999:       split XquickfixFails",
          "",
          "[Removed Lines]",
          "5996:   call writefile(lines, 'XquickfixFails')",
          "",
          "[Added Lines]",
          "5939:   call writefile(lines, 'XquickfixFails', 'D')",
          "",
          "---------------",
          "--- Hunk 64 ---",
          "[Context before]",
          "6004:       \" is aborted but the window was already split.",
          "6005:       silent! cwindow",
          "6006:   END",
          "6008:   let buf = RunVimInTerminal('-S XtestWinFails', #{rows: 13})",
          "6009:   call VerifyScreenDump(buf, 'Test_quickfix_window_fails', {})",
          "",
          "[Removed Lines]",
          "6007:   call writefile(lines, 'XtestWinFails')",
          "",
          "[Added Lines]",
          "5950:   call writefile(lines, 'XtestWinFails', 'D')",
          "",
          "---------------",
          "--- Hunk 65 ---",
          "[Context before]",
          "6012:   call term_sendkeys(buf, \":bwipe!\\<CR>\")",
          "6013:   call term_wait(buf)",
          "6014:   call StopVimInTerminal(buf)",
          "6017: endfunc",
          "6019: \" Test for updating the quickfix buffer whenever the associated quickfix list",
          "",
          "[Removed Lines]",
          "6015:   call delete('XtestWinFails')",
          "6016:   call delete('XquickfixFails')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 66 ---",
          "[Context before]",
          "6077: func Test_vimgrep_noswapfile()",
          "6078:   set noswapfile",
          "6080:   vimgrep two Xgreppie",
          "6081:   call assert_equal('two', getline('.'))",
          "6084:   set swapfile",
          "6085: endfunc",
          "",
          "[Removed Lines]",
          "6079:   call writefile(['one', 'two', 'three'], 'Xgreppie')",
          "6083:   call delete('Xgreppie')",
          "",
          "[Added Lines]",
          "6020:   call writefile(['one', 'two', 'three'], 'Xgreppie', 'D')",
          "",
          "---------------",
          "--- Hunk 67 ---",
          "[Context before]",
          "6122: endfunc",
          "6124: func Test_vimgrep_fuzzy_match()",
          "6127:   call Xvimgrep_fuzzy_match('c')",
          "6128:   call Xvimgrep_fuzzy_match('l')",
          "6131: endfunc",
          "6133: func Test_locationlist_open_in_newtab()",
          "",
          "[Removed Lines]",
          "6125:   call writefile(['one two three', 'aaaaaa'], 'Xfile1')",
          "6126:   call writefile(['one', 'three one two', 'two', 'aaathreeaaa'], 'Xfile2')",
          "6129:   call delete('Xfile1')",
          "6130:   call delete('Xfile2')",
          "",
          "[Added Lines]",
          "6065:   call writefile(['one two three', 'aaaaaa'], 'Xfile1', 'D')",
          "6066:   call writefile(['one', 'three one two', 'two', 'aaathreeaaa'], 'Xfile2', 'D')",
          "",
          "---------------",
          "--- Hunk 68 ---",
          "[Context before]",
          "6265:     call writefile(['done'], 'Xresult')",
          "6266:     qall!",
          "6267:   END",
          "6269:   if RunVim([], [], '-u NONE -n -X -Z -e -m -s -S Xscript')",
          "6270:     call assert_equal(['done'], readfile('Xresult'))",
          "6271:   endif",
          "6274:   call delete('Xresult')",
          "6275: endfunc",
          "",
          "[Removed Lines]",
          "6268:   call writefile(lines, 'Xscript')",
          "6273:   call delete('Xscript')",
          "",
          "[Added Lines]",
          "6206:   call writefile(lines, 'Xscript', 'D')",
          "",
          "---------------"
        ],
        "src/testdir/test_recover.vim||src/testdir/test_recover.vim": [
          "File: src/testdir/test_recover.vim -> src/testdir/test_recover.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "140:   call setline(1, ['a', 'b', 'c'])",
          "141:   preserve",
          "142:   let b = readblob(swapname(''))",
          "146:   %bw!",
          "147:   call feedkeys(\":recover Xfile1\\<CR>3\\<CR>q\", 'xt')",
          "148:   call assert_equal(['a', 'b', 'c'], getline(1, '$'))",
          "",
          "[Removed Lines]",
          "143:   call writefile(b, '.Xfile1.swm')",
          "144:   call writefile(b, '.Xfile1.swn')",
          "145:   call writefile(b, '.Xfile1.swo')",
          "",
          "[Added Lines]",
          "143:   call writefile(b, '.Xfile1.swm', 'D')",
          "144:   call writefile(b, '.Xfile1.swn', 'D')",
          "145:   call writefile(b, '.Xfile1.swo', 'D')",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "156:   call assert_equal('Xfile1', @%)",
          "157:   call assert_equal([''], getline(1, '$'))",
          "158:   bw!",
          "163: endfunc",
          "165: \" Test for :recover using an empty swap file",
          "166: func Test_recover_empty_swap_file()",
          "167:   CheckUnix",
          "169:   let msg = execute('recover Xfile1')",
          "170:   call assert_match('Unable to read block 0 from .Xfile1.swp', msg)",
          "171:   call assert_equal('Xfile1', @%)",
          "",
          "[Removed Lines]",
          "160:   call delete('.Xfile1.swm')",
          "161:   call delete('.Xfile1.swn')",
          "162:   call delete('.Xfile1.swo')",
          "168:   call writefile([], '.Xfile1.swp')",
          "",
          "[Added Lines]",
          "164:   call writefile([], '.Xfile1.swp', 'D')",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "179:   \" :recover from an empty buffer",
          "180:   call assert_fails('recover', 'E305:')",
          "182: endfunc",
          "184: \" Test for :recover using a corrupted swap file",
          "",
          "[Removed Lines]",
          "181:   call delete('.Xfile1.swp')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "366:   CheckNotRoot",
          "367:   new Xfile1",
          "368:   let b = readblob('.Xfile1.swp')",
          "370:   bw!",
          "371:   call setfperm('.Xfile1.swm', '-w-------')",
          "372:   call assert_fails('recover Xfile1', 'E306:')",
          "374: endfunc",
          "376: \" Test for using :recover when the original file and the swap file have the",
          "",
          "[Removed Lines]",
          "369:   call writefile(b, '.Xfile1.swm')",
          "373:   call delete('.Xfile1.swm')",
          "",
          "[Added Lines]",
          "364:   call writefile(b, '.Xfile1.swm', 'D')",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "382:   preserve",
          "383:   let b = readblob('.Xfile1.swp')",
          "384:   %bw!",
          "386:   let msg = execute('recover Xfile1')",
          "387:   call assert_equal(['aaa', 'bbb', 'ccc'], getline(1, '$'))",
          "388:   call assert_false(&modified)",
          "389:   call assert_match('Buffer contents equals file contents', msg)",
          "390:   bw!",
          "391:   call delete('Xfile1')",
          "393: endfunc",
          "395: \" Test for recovering a file when editing a symbolically linked file",
          "396: func Test_recover_symbolic_link()",
          "397:   CheckUnix",
          "399:   silent !ln -s Xfile1 Xfile2",
          "400:   edit Xfile2",
          "401:   call assert_equal('.Xfile1.swp', fnamemodify(swapname(''), ':t'))",
          "",
          "[Removed Lines]",
          "385:   call writefile(b, '.Xfile1.swz')",
          "392:   call delete('.Xfile1.swz')",
          "398:   call writefile(['aaa', 'bbb', 'ccc'], 'Xfile1')",
          "",
          "[Added Lines]",
          "379:   call writefile(b, '.Xfile1.swz', 'D')",
          "391:   call writefile(['aaa', 'bbb', 'ccc'], 'Xfile1', 'D')",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "410:   update",
          "411:   %bw!",
          "412:   call assert_equal(['aaa', 'bbb', 'ccc'], readfile('Xfile1'))",
          "414:   call delete('Xfile2')",
          "415:   call delete('.Xfile1.swp')",
          "416: endfunc",
          "",
          "[Removed Lines]",
          "413:   call delete('Xfile1')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "419: \" line. This used to result in an internal error (E315) which is fixed",
          "420: \" by 8.2.2966.",
          "421: func Test_recover_invalid_cursor_pos()",
          "423:   edit Xfile1",
          "424:   preserve",
          "425:   let b = readblob('.Xfile1.swp')",
          "",
          "[Removed Lines]",
          "422:   call writefile([], 'Xfile1')",
          "",
          "[Added Lines]",
          "414:   call writefile([], 'Xfile1', 'D')",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "429:     au BufReadPost Xfile1 normal! 3G",
          "430:   augroup END",
          "431:   call writefile(range(1, 3), 'Xfile1')",
          "433:   try",
          "434:     recover Xfile1",
          "435:   catch /E308:/",
          "",
          "[Removed Lines]",
          "432:   call writefile(b, '.Xfile1.swp')",
          "",
          "[Added Lines]",
          "424:   call writefile(b, '.Xfile1.swp', 'D')",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "441:     au!",
          "442:   augroup END",
          "443:   augroup! Test",
          "446: endfunc",
          "448: \" Test for recovering a buffer without a name",
          "",
          "[Removed Lines]",
          "444:   call delete('Xfile1')",
          "445:   call delete('.Xfile1.swp')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "453:   let sn = swapname('')",
          "454:   let b = readblob(sn)",
          "455:   bw!",
          "457:   exe \"recover \" .. sn",
          "458:   call assert_equal(['one', 'two'], getline(1, '$'))",
          "460: endfunc",
          "462: \" vim: shiftwidth=2 sts=2 expandtab",
          "",
          "[Removed Lines]",
          "456:   call writefile(b, sn)",
          "459:   call delete(sn)",
          "",
          "[Added Lines]",
          "446:   call writefile(b, sn, 'D')",
          "",
          "---------------"
        ],
        "src/testdir/test_regexp_utf8.vim||src/testdir/test_regexp_utf8.vim": [
          "File: src/testdir/test_regexp_utf8.vim -> src/testdir/test_regexp_utf8.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "555:   bwipe!",
          "556: endfunc",
          "559:   call writefile(0z630a.765d30aa0a.2e0a.790a.4030, 'Xinvalid')",
          "560:   new",
          "561:   source Xinvalid",
          "563:   call delete('Xinvalid')",
          "564: endfunc",
          "566: func Test_match_illegal_byte()",
          "567:   \" Text has illegal bytes which need to be set explicitly",
          "569:   call writefile(lines, 'Xregexp')",
          "570:   call system(GetVimCommand() .. ' -X -Z -e -s -S Xregexp -c qa!')",
          "572:   call delete('Xregexp')",
          "573: endfunc",
          "",
          "[Removed Lines]",
          "558: func Test_match_invalid_byte()",
          "562:   bwipe!",
          "568:   let lines = [\"norm :set no\\x01\\<CR>\", \"silent n\\xff\", \"silent norm :b\\xff\\<CR>\"]",
          "",
          "[Added Lines]",
          "558: func Test_match_invalid_byte()",
          "567:   let lines = [\"norm :set no\\x01\\<CR>\", \"silent n\\xff\", \"silent norm :b\\xff\\<CR>\"]",
          "",
          "---------------"
        ],
        "src/testdir/test_rename.vim||src/testdir/test_rename.vim": [
          "File: src/testdir/test_rename.vim -> src/testdir/test_rename.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "13:   \" When the destination file already exists, it should be overwritten.",
          "14:   call writefile(['foo'], 'Xrename1')",
          "17:   call assert_equal(0, rename('Xrename1', 'Xrename2'))",
          "18:   call assert_equal('', glob('Xrename1'))",
          "",
          "[Removed Lines]",
          "15:   call writefile(['bar'], 'Xrename2')",
          "",
          "[Added Lines]",
          "15:   call writefile(['bar'], 'Xrename2', 'D')",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "36: endfunc",
          "38: func Test_rename_same_file()",
          "41:   \" When the source and destination are the same file, nothing",
          "42:   \" should be done. The source file should not be deleted.",
          "",
          "[Removed Lines]",
          "39:   call writefile(['foo'], 'Xrename')",
          "",
          "[Added Lines]",
          "39:   call writefile(['foo'], 'Xrename', 'D')",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "46:   call assert_equal(0, rename('./Xrename', 'Xrename'))",
          "47:   call assert_equal(['foo'], readfile('Xrename'))",
          "50: endfunc",
          "52: func Test_rename_dir_to_dir()",
          "",
          "[Removed Lines]",
          "49:   call delete('Xrename')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "63: endfunc",
          "65: func Test_rename_same_dir()",
          "67:   call writefile(['foo'], 'Xrenamedir/Xrenamefile')",
          "69:   call assert_equal(0, rename('Xrenamedir', 'Xrenamedir'))",
          "71:   call assert_equal(['foo'], readfile('Xrenamedir/Xrenamefile'))",
          "75: endfunc",
          "77: func Test_rename_copy()",
          "78:   \" Check that when original file can't be deleted, rename()",
          "79:   \" still succeeds but copies the file.",
          "81:   call writefile(['foo'], 'Xrenamedir/Xrenamefile')",
          "82:   call setfperm('Xrenamedir', 'r-xr-xr-x')",
          "",
          "[Removed Lines]",
          "66:   call mkdir('Xrenamedir')",
          "73:   call delete('Xrenamedir/Xrenamefile')",
          "74:   call delete('Xrenamedir', 'd')",
          "80:   call mkdir('Xrenamedir')",
          "",
          "[Added Lines]",
          "64:   call mkdir('Xrenamedir', 'R')",
          "75:   call mkdir('Xrenamedir', 'R')",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "91:   call assert_equal(['foo'], readfile('Xrenamefile'))",
          "93:   call setfperm('Xrenamedir', 'rwxrwxrwx')",
          "96:   call delete('Xrenamefile')",
          "97: endfunc",
          "99: func Test_rename_fails()",
          "102:   \" Can't rename into a non-existing directory.",
          "103:   call assert_notequal(0, rename('Xrenamefile', 'Xdoesnotexist/Xrenamefile'))",
          "",
          "[Removed Lines]",
          "94:   call delete('Xrenamedir/Xrenamefile')",
          "95:   call delete('Xrenamedir', 'd')",
          "100:   call writefile(['foo'], 'Xrenamefile')",
          "",
          "[Added Lines]",
          "93:   call writefile(['foo'], 'Xrenamefile', 'D')",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "116:   call assert_fails('call rename(\"Xrenamefile\", [])', 'E730:')",
          "117:   call assert_fails('call rename(0z, \"Xrenamefile\")', 'E976:')",
          "120: endfunc",
          "122: \" vim: shiftwidth=2 sts=2 expandtab",
          "",
          "[Removed Lines]",
          "119:   call delete('Xrenamefile')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/testdir/test_restricted.vim||src/testdir/test_restricted.vim": [
          "File: src/testdir/test_restricted.vim -> src/testdir/test_restricted.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "101:     call writefile(v:errors, 'Xresult')",
          "102:     qa!",
          "103:   END",
          "105:   if RunVim([], [], '-Z --clean -S Xrestricted')",
          "106:     call assert_equal([], readfile('Xresult'))",
          "107:   endif",
          "",
          "[Removed Lines]",
          "104:   call writefile(lines, 'Xrestricted')",
          "",
          "[Added Lines]",
          "104:   call writefile(lines, 'Xrestricted', 'D')",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "114:     call assert_equal([], readfile('Xresult'))",
          "115:   endif",
          "118:   call delete('Xresult')",
          "119: endfunc",
          "",
          "[Removed Lines]",
          "117:   call delete('Xrestricted')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/version.c||src/version.c": [
          "File: src/version.c -> src/version.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "700: static int included_patches[] =",
          "703:     668,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "703:     669,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cb36c2a3cdd5610487dd830d430bf022f288328d",
      "candidate_info": {
        "commit_hash": "cb36c2a3cdd5610487dd830d430bf022f288328d",
        "repo": "vim/vim",
        "commit_url": "https://github.com/vim/vim/commit/cb36c2a3cdd5610487dd830d430bf022f288328d",
        "files": [
          "src/testdir/test_regexp_utf8.vim",
          "src/version.c"
        ],
        "message": "patch 9.0.0106: illegal byte regexp test doesn't fail when fix is reversed\n\nProblem:    Illegal byte regexp test doesn't fail when fix is reversed.\nSolution:   Make sure illegal bytes end up in sourced script file.",
        "before_after_code_files": [
          "src/testdir/test_regexp_utf8.vim||src/testdir/test_regexp_utf8.vim",
          "src/version.c||src/version.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/testdir/test_regexp_utf8.vim||src/testdir/test_regexp_utf8.vim",
            "src/version.c||src/version.c"
          ],
          "candidate": [
            "src/testdir/test_regexp_utf8.vim||src/testdir/test_regexp_utf8.vim",
            "src/version.c||src/version.c"
          ]
        }
      },
      "candidate_diff": {
        "src/testdir/test_regexp_utf8.vim||src/testdir/test_regexp_utf8.vim": [
          "File: src/testdir/test_regexp_utf8.vim -> src/testdir/test_regexp_utf8.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "563:   call delete('Xinvalid')",
          "564: endfunc",
          "572:   END",
          "573:   call writefile(lines, 'Xregexp')",
          "574:   call system(GetVimCommand() .. ' -X -Z -e -s -S Xregexp -c qa!')",
          "",
          "[Removed Lines]",
          "566: func Test_match_illegal_byte()",
          "567:   let lines =<< trim END",
          "568:       silent! buffer \u00ff\\c",
          "569:       next \u00ff",
          "570:       0scriptnames",
          "571:       source",
          "",
          "[Added Lines]",
          "566: func Test_match_illegal_byte()",
          "567:   \" Text has illegal bytes which need to be set explicitly",
          "",
          "---------------"
        ],
        "src/version.c||src/version.c": [
          "File: src/version.c -> src/version.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "736: static int included_patches[] =",
          "739:     105,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "739:     106,",
          "",
          "---------------"
        ]
      }
    }
  ]
}