{
  "cve_id": "CVE-2019-19924",
  "cve_desc": "SQLite 3.30.1 mishandles certain parser-tree rewriting, related to expr.c, vdbeaux.c, and window.c. This is caused by incorrect sqlite3WindowRewrite() error handling.",
  "repo": "sqlite/sqlite",
  "patch_hash": "8654186b0236d556aa85528c2573ee0b6ab71be3",
  "patch_info": {
    "commit_hash": "8654186b0236d556aa85528c2573ee0b6ab71be3",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/8654186b0236d556aa85528c2573ee0b6ab71be3",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/expr.c",
      "src/vdbeaux.c",
      "src/window.c"
    ],
    "message": "When an error occurs while rewriting the parser tree for window functions in the sqlite3WindowRewrite() routine, make sure that pParse->nErr is set, and make sure that this shuts down any subsequent code generation that might depend on the transformations that were implemented.  This fixes a problem discovered by the Yongheng and Rui fuzzer.\n\nFossilOrigin-Name: e2bddcd4c55ba3cbe0130332679ff4b048630d0ced9a8899982edb5a3569ba7f",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/expr.c||src/expr.c",
      "src/vdbeaux.c||src/vdbeaux.c",
      "src/window.c||src/window.c"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 4417c5bf0aabb34ed174f01afd981c924ae965a42128719d8d6735536631d12f",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/expr.c||src/expr.c": [
      "File: src/expr.c -> src/expr.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "376:   int addr;",
      "377:   CollSeq *p4;",
      "379:   if( isCommuted ){",
      "380:     p4 = sqlite3BinaryCompareCollSeq(pParse, pRight, pLeft);",
      "381:   }else{",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "379:   if( pParse->nErr ) return 0;",
      "",
      "---------------"
    ],
    "src/vdbeaux.c||src/vdbeaux.c": [
      "File: src/vdbeaux.c -> src/vdbeaux.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1304: static void vdbeVComment(Vdbe *p, const char *zFormat, va_list ap){",
      "1305:   assert( p->nOp>0 || p->aOp==0 );",
      "1307:   if( p->nOp ){",
      "1308:     assert( p->aOp );",
      "1309:     sqlite3DbFree(p->db, p->aOp[p->nOp-1].zComment);",
      "",
      "[Removed Lines]",
      "1306:   assert( p->aOp==0 || p->aOp[p->nOp-1].zComment==0 || p->db->mallocFailed );",
      "",
      "[Added Lines]",
      "1306:   assert( p->aOp==0 || p->aOp[p->nOp-1].zComment==0 || p->db->mallocFailed",
      "1307:           || p->pParse->nErr>0 );",
      "",
      "---------------"
    ],
    "src/window.c||src/window.c": [
      "File: src/window.c -> src/window.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "935:     pTab = sqlite3DbMallocZero(db, sizeof(Table));",
      "936:     if( pTab==0 ){",
      "938:     }",
      "940:     p->pSrc = 0;",
      "",
      "[Removed Lines]",
      "937:       return SQLITE_NOMEM;",
      "",
      "[Added Lines]",
      "937:       return sqlite3ErrorToParser(db, SQLITE_NOMEM);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1039:     sqlite3DbFree(db, pTab);",
      "1040:   }",
      "1042:   return rc;",
      "1043: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1042:   if( rc && pParse->nErr==0 ){",
      "1043:     assert( pParse->db->mallocFailed );",
      "1044:     return sqlite3ErrorToParser(pParse->db, SQLITE_NOMEM);",
      "1045:   }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "3f83f591541b562b39c2b9cf8b9fcfab54d535e7",
      "candidate_info": {
        "commit_hash": "3f83f591541b562b39c2b9cf8b9fcfab54d535e7",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/3f83f591541b562b39c2b9cf8b9fcfab54d535e7",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in"
        ],
        "message": "Add the \".progress\" command to the CLI.\n\nFossilOrigin-Name: ad84ca24ff760f7a2b128f2eeb4d799a97f84b8b8a8bb8d9657c4c555f6ccf47",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 14fba4cc5db2bc206f024bfa5dd82fffdbc7577162da2c3b15a91cc1c91f3846",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1090: #define PROGRESS_RESET   0x02         /* Reset the count when the progres",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1782:   }",
          "1783: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1798: static int progress_handler(void *pClientData) {",
          "1799:   ShellState *p = (ShellState*)pClientData;",
          "1800:   p->nProgress++;",
          "1801:   if( p->nProgress>=p->mxProgress && p->mxProgress>0 ){",
          "1802:     raw_printf(p->out, \"Progress limit reached (%u)\\n\", p->nProgress);",
          "1803:     if( p->flgProgress & PROGRESS_RESET ) p->nProgress = 0;",
          "1804:     if( p->flgProgress & PROGRESS_ONCE ) p->mxProgress = 0;",
          "1805:     return 1;",
          "1806:   }",
          "1807:   if( (p->flgProgress & PROGRESS_QUIET)==0 ){",
          "1808:     raw_printf(p->out, \"Progress %u\\n\", p->nProgress);",
          "1809:   }",
          "1810:   return 0;",
          "1811: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3468:   \".output ?FILE?           Send output to FILE or stdout if FILE is omitted\",",
          "3469:   \"     If FILE begins with '|' then open it as a pipe.\",",
          "3470:   \".print STRING...         Print literal STRING\",",
          "3471:   \".prompt MAIN CONTINUE    Replace the standard prompts\",",
          "3472:   \".quit                    Exit this program\",",
          "3473:   \".read FILE               Read input from FILE\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3499:   \".progress N              Invoke progress handler after every N opcodes\",",
          "3500:   \"   --limit N                 Interrupt after N progress callbacks\",",
          "3501:   \"   --once                    Do no more than one progress interrupt\",",
          "3502:   \"   --quiet|-q                No output except at interrupts\",",
          "3503:   \"   --reset                   Reset the count for each input and interrupt\",",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "7000:     raw_printf(p->out, \"\\n\");",
          "7001:   }else",
          "7003:   if( c=='p' && strncmp(azArg[0], \"prompt\", n)==0 ){",
          "7004:     if( nArg >= 2) {",
          "7005:       strncpy(mainPrompt,azArg[1],(int)ArraySize(mainPrompt)-1);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7036:   if( c=='p' && n>=3 && strncmp(azArg[0], \"progress\", n)==0 ){",
          "7037:     int i;",
          "7038:     int n = 0;",
          "7039:     p->flgProgress = 0;",
          "7040:     p->mxProgress = 0;",
          "7041:     p->nProgress = 0;",
          "7042:     for(i=1; i<nArg; i++){",
          "7043:       const char *z = azArg[i];",
          "7044:       if( z[0]=='-' ){",
          "7045:         z++;",
          "7046:         if( z[0]=='-' ) z++;",
          "7047:         if( strcmp(z,\"quiet\")==0 || strcmp(z,\"q\")==0 ){",
          "7048:           p->flgProgress |= PROGRESS_QUIET;",
          "7049:           continue;",
          "7050:         }",
          "7051:         if( strcmp(z,\"reset\")==0 ){",
          "7052:           p->flgProgress |= PROGRESS_RESET;",
          "7053:           continue;",
          "7054:         }",
          "7055:         if( strcmp(z,\"once\")==0 ){",
          "7056:           p->flgProgress |= PROGRESS_ONCE;",
          "7057:           continue;",
          "7058:         }",
          "7059:         if( strcmp(z,\"limit\")==0 ){",
          "7060:           if( i+1>=nArg ){",
          "7061:             utf8_printf(stderr, \"Error: missing argument on --limit\\n\");",
          "7062:             rc = 1;",
          "7063:             goto meta_command_exit;",
          "7064:           }else{",
          "7065:             p->mxProgress = (int)integerValue(azArg[++i]);",
          "7066:           }",
          "7067:           continue;",
          "7068:         }",
          "7069:         utf8_printf(stderr, \"Error: unknown option: \\\"%s\\\"\\n\", azArg[i]);",
          "7070:         rc = 1;",
          "7071:         goto meta_command_exit;",
          "7072:       }else{",
          "7073:         n = (int)integerValue(z);",
          "7074:       }",
          "7075:     }",
          "7076:     open_db(p, 0);",
          "7077:     sqlite3_progress_handler(p->db, n, progress_handler, p);",
          "7078:   }else",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "8336:   open_db(p, 0);",
          "8337:   if( ShellHasFlag(p,SHFLG_Backslash) ) resolve_backslashes(zSql);",
          "8338:   BEGIN_TIMER;",
          "8339:   rc = shell_exec(p, zSql, &zErrMsg);",
          "8340:   END_TIMER;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8415:   if( p->flgProgress & PROGRESS_RESET ) p->nProgress = 0;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6dcf9a451e6e4ed1ae343c4813958540ac836306",
      "candidate_info": {
        "commit_hash": "6dcf9a451e6e4ed1ae343c4813958540ac836306",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/6dcf9a451e6e4ed1ae343c4813958540ac836306",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/util.c"
        ],
        "message": "Fix harmless compiler warning seen with MSVC.\n\nFossilOrigin-Name: 73a82114733af2a316f20eb8578badef307d14286c6ec03197744a6793425161",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/util.c||src/util.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 7833feecfe745e237f239ee4c38a9e4bf7ad66a32919150208da87c00a826473",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/util.c||src/util.c": [
          "File: src/util.c -> src/util.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "385: int sqlite3AtoF(const char *z, double *pResult, int length, u8 enc){",
          "386: #ifndef SQLITE_OMIT_FLOATING_POINT",
          "387:   int incr;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "385: #if defined(_MSC_VER)",
          "386: #pragma warning(disable : 4756)",
          "387: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "569:   return !sqlite3Atoi64(z, pResult, length, enc);",
          "571: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "575: #if defined(_MSC_VER)",
          "576: #pragma warning(default : 4756)",
          "577: #endif",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b42eb3571c35341ae2171fcd5dc63ca9a49784c0",
      "candidate_info": {
        "commit_hash": "b42eb3571c35341ae2171fcd5dc63ca9a49784c0",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/b42eb3571c35341ae2171fcd5dc63ca9a49784c0",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/window.c",
          "test/windowB.test"
        ],
        "message": "Fix a problem with processing CTEs that use a WINDOW clause.\n\nFossilOrigin-Name: ca564d4b5b19fe56842a04f31bb61352e6ae9d72a7e7634eb27ebcf5f670545a",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/window.c||src/window.c",
          "test/windowB.test||test/windowB.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/window.c||src/window.c"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/window.c||src/window.c"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 01d71b947a7422081d5c7d6ac2c91b9c936dc41926ab58c92f4a088a64e8c051",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2215:     pNew = sqlite3DbMallocZero(db, sizeof(Window));",
          "2216:     if( pNew ){",
          "2217:       pNew->zName = sqlite3DbStrDup(db, p->zName);",
          "2218:       pNew->pFilter = sqlite3ExprDup(db, p->pFilter, 0);",
          "2219:       pNew->pFunc = p->pFunc;",
          "2220:       pNew->pPartition = sqlite3ExprListDup(db, p->pPartition, 0);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2218:       pNew->zBase = sqlite3DbStrDup(db, p->zBase);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2227:       pNew->pStart = sqlite3ExprDup(db, p->pStart, 0);",
          "2228:       pNew->pEnd = sqlite3ExprDup(db, p->pEnd, 0);",
          "2229:       pNew->pOwner = pOwner;",
          "2230:     }",
          "2231:   }",
          "2232:   return pNew;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2231:       pNew->bImplicitFrame = p->bImplicitFrame;",
          "",
          "---------------"
        ],
        "test/windowB.test||test/windowB.test": [
          "File: test/windowB.test -> test/windowB.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "202:   }",
          "203: }",
          "205: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "205: #-------------------------------------------------------------------------",
          "206: reset_db",
          "207: do_execsql_test 4.0 {",
          "208:   CREATE TABLE x(a);",
          "209:   INSERT INTO x VALUES(1);",
          "210:   INSERT INTO x VALUES(2);",
          "211: }",
          "213: do_execsql_test 4.1 {",
          "214:   WITH y AS (",
          "215:       SELECT Row_Number() OVER (win) FROM x WINDOW win AS (PARTITION BY a)",
          "216:   )",
          "217:   SELECT * FROM y;",
          "218: } {",
          "219:   1 1",
          "220: }",
          "222: do_catchsql_test 4.2 {",
          "223:   WITH y AS (",
          "224:     SELECT Row_Number() OVER (win) FROM x WINDOW win AS (PARTITION",
          "225:   BY fake_column))",
          "226:   SELECT * FROM y;",
          "227: } {1 {no such column: fake_column}}",
          "229: do_catchsql_test 4.3 {",
          "230:   SELECT 1 WINDOW win AS (PARTITION BY fake_column);",
          "231: } {0 1}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d446165f7d712dddbecb2f5eaeec418f019b4b7b",
      "candidate_info": {
        "commit_hash": "d446165f7d712dddbecb2f5eaeec418f019b4b7b",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/d446165f7d712dddbecb2f5eaeec418f019b4b7b",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/window.c"
        ],
        "message": "Minor optimization in sqlite3WindowCodeStep().\n\nFossilOrigin-Name: b1322ffb6e63a110998068bf4f0a903028bd4fc0464ae1e517d745fb46423f39",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/window.c||src/window.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/window.c||src/window.c"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/window.c||src/window.c"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 25ff7091cb12c63b1864ce68a9151f8432af5804b5ae905a2175761ab4b9fdd8",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2154:   s.start.csr = s.current.csr+2;",
          "2155:   s.end.csr = s.current.csr+3;",
          "2157:   regNew = pParse->nMem+1;",
          "2158:   pParse->nMem += nInput;",
          "2159:   regRecord = ++pParse->nMem;",
          "2160:   regRowid = ++pParse->nMem;",
          "",
          "[Removed Lines]",
          "2161:   regFlushPart = ++pParse->nMem;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2203:     int regNewPart = regNew + pMWin->nBufferCol;",
          "2204:     KeyInfo *pKeyInfo = sqlite3KeyInfoFromExprList(pParse, pPart, 0, 0);",
          "2206:     addr = sqlite3VdbeAddOp3(v, OP_Compare, regNewPart, pMWin->regPart, nPart);",
          "2207:     sqlite3VdbeAppendP4(v, (void*)pKeyInfo, P4_KEYINFO);",
          "2208:     sqlite3VdbeAddOp3(v, OP_Jump, addr+2, addr+4, addr+2);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2208:     regFlushPart = ++pParse->nMem;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0e1a574875a5cb3021adb2327f2919b85f186ede",
      "candidate_info": {
        "commit_hash": "0e1a574875a5cb3021adb2327f2919b85f186ede",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/0e1a574875a5cb3021adb2327f2919b85f186ede",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/test4.c"
        ],
        "message": "Change the name of some internal testing interfaces to avoid a name conflict in AIX.\n\nFossilOrigin-Name: c1cae7e7f0a612508c8f82b334d9ebc423f443e99b13092d52e26b348c7cbc5e",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/test4.c||src/test4.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 037da798fa5510ba7c776831ebcd683a85dca28e25bc657ff17bb2b08c3d406e",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/test4.c||src/test4.c": [
          "File: src/test4.c -> src/test4.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "68:   Thread *p = (Thread*)pArg;",
          "69:   if( p->db ){",
          "70:     sqlite3_close(p->db);",
          "",
          "[Removed Lines]",
          "67: static void *thread_main(void *pArg){",
          "",
          "[Added Lines]",
          "67: static void *test_thread_main(void *pArg){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "151:   threadset[i].zFilename = sqlite3_mprintf(\"%s\", argv[2]);",
          "152:   threadset[i].opnum = 1;",
          "153:   threadset[i].completed = 0;",
          "155:   if( rc ){",
          "156:     Tcl_AppendResult(interp, \"failed to create the thread\", 0);",
          "157:     sqlite3_free(threadset[i].zFilename);",
          "",
          "[Removed Lines]",
          "154:   rc = pthread_create(&x, 0, thread_main, &threadset[i]);",
          "",
          "[Added Lines]",
          "154:   rc = pthread_create(&x, 0, test_thread_main, &threadset[i]);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "169:   while( p->opnum>p->completed ) sched_yield();",
          "170: }",
          "",
          "[Removed Lines]",
          "168: static void thread_wait(Thread *p){",
          "",
          "[Added Lines]",
          "168: static void test_thread_wait(Thread *p){",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "193:     Tcl_AppendResult(interp, \"no such thread\", 0);",
          "194:     return TCL_ERROR;",
          "195:   }",
          "197:   return TCL_OK;",
          "198: }",
          "205:   p->xOp = 0;",
          "206:   p->opnum++;",
          "208:   sqlite3_free(p->zArg);",
          "209:   p->zArg = 0;",
          "210:   sqlite3_free(p->zFilename);",
          "",
          "[Removed Lines]",
          "196:   thread_wait(&threadset[i]);",
          "203: static void stop_thread(Thread *p){",
          "204:   thread_wait(p);",
          "207:   thread_wait(p);",
          "",
          "[Added Lines]",
          "196:   test_thread_wait(&threadset[i]);",
          "203: static void test_stop_thread(Thread *p){",
          "204:   test_thread_wait(p);",
          "207:   test_thread_wait(p);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "233:   }",
          "234:   if( argv[1][0]=='*' && argv[1][1]==0 ){",
          "235:     for(i=0; i<N_THREAD; i++){",
          "237:     }",
          "238:   }else{",
          "239:     i = parse_thread_id(interp, argv[1]);",
          "",
          "[Removed Lines]",
          "236:       if( threadset[i].busy ) stop_thread(&threadset[i]);",
          "",
          "[Added Lines]",
          "236:       if( threadset[i].busy ) test_stop_thread(&threadset[i]);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "242:       Tcl_AppendResult(interp, \"no such thread\", 0);",
          "243:       return TCL_ERROR;",
          "244:     }",
          "246:   }",
          "247:   return TCL_OK;",
          "248: }",
          "",
          "[Removed Lines]",
          "245:     stop_thread(&threadset[i]);",
          "",
          "[Added Lines]",
          "245:     test_stop_thread(&threadset[i]);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "273:     Tcl_AppendResult(interp, \"no such thread\", 0);",
          "274:     return TCL_ERROR;",
          "275:   }",
          "277:   sqlite3_snprintf(sizeof(zBuf), zBuf, \"%d\", threadset[i].argc);",
          "278:   Tcl_AppendResult(interp, zBuf, 0);",
          "279:   return TCL_OK;",
          "",
          "[Removed Lines]",
          "276:   thread_wait(&threadset[i]);",
          "",
          "[Added Lines]",
          "276:   test_thread_wait(&threadset[i]);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "306:     return TCL_ERROR;",
          "307:   }",
          "308:   if( Tcl_GetInt(interp, argv[2], &n) ) return TCL_ERROR;",
          "310:   if( n<0 || n>=threadset[i].argc ){",
          "311:     Tcl_AppendResult(interp, \"column number out of range\", 0);",
          "312:     return TCL_ERROR;",
          "",
          "[Removed Lines]",
          "309:   thread_wait(&threadset[i]);",
          "",
          "[Added Lines]",
          "309:   test_thread_wait(&threadset[i]);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "342:     return TCL_ERROR;",
          "343:   }",
          "344:   if( Tcl_GetInt(interp, argv[2], &n) ) return TCL_ERROR;",
          "346:   if( n<0 || n>=threadset[i].argc ){",
          "347:     Tcl_AppendResult(interp, \"column number out of range\", 0);",
          "348:     return TCL_ERROR;",
          "",
          "[Removed Lines]",
          "345:   thread_wait(&threadset[i]);",
          "",
          "[Added Lines]",
          "345:   test_thread_wait(&threadset[i]);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "377:     Tcl_AppendResult(interp, \"no such thread\", 0);",
          "378:     return TCL_ERROR;",
          "379:   }",
          "381:   zName = sqlite3ErrName(threadset[i].rc);",
          "382:   Tcl_AppendResult(interp, zName, 0);",
          "383:   return TCL_OK;",
          "",
          "[Removed Lines]",
          "380:   thread_wait(&threadset[i]);",
          "",
          "[Added Lines]",
          "380:   test_thread_wait(&threadset[i]);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "408:     Tcl_AppendResult(interp, \"no such thread\", 0);",
          "409:     return TCL_ERROR;",
          "410:   }",
          "412:   Tcl_AppendResult(interp, threadset[i].zErr, 0);",
          "413:   return TCL_OK;",
          "414: }",
          "",
          "[Removed Lines]",
          "411:   thread_wait(&threadset[i]);",
          "",
          "[Added Lines]",
          "411:   test_thread_wait(&threadset[i]);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "452:     Tcl_AppendResult(interp, \"no such thread\", 0);",
          "453:     return TCL_ERROR;",
          "454:   }",
          "456:   threadset[i].xOp = do_compile;",
          "457:   sqlite3_free(threadset[i].zArg);",
          "458:   threadset[i].zArg = sqlite3_mprintf(\"%s\", argv[2]);",
          "",
          "[Removed Lines]",
          "455:   thread_wait(&threadset[i]);",
          "",
          "[Added Lines]",
          "455:   test_thread_wait(&threadset[i]);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "505:     Tcl_AppendResult(interp, \"no such thread\", 0);",
          "506:     return TCL_ERROR;",
          "507:   }",
          "509:   threadset[i].xOp = do_step;",
          "510:   threadset[i].opnum++;",
          "511:   return TCL_OK;",
          "",
          "[Removed Lines]",
          "508:   thread_wait(&threadset[i]);",
          "",
          "[Added Lines]",
          "508:   test_thread_wait(&threadset[i]);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "547:     Tcl_AppendResult(interp, \"no such thread\", 0);",
          "548:     return TCL_ERROR;",
          "549:   }",
          "551:   threadset[i].xOp = do_finalize;",
          "552:   sqlite3_free(threadset[i].zArg);",
          "553:   threadset[i].zArg = 0;",
          "",
          "[Removed Lines]",
          "550:   thread_wait(&threadset[i]);",
          "",
          "[Added Lines]",
          "550:   test_thread_wait(&threadset[i]);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "579:     Tcl_AppendResult(interp, \"no such thread\", 0);",
          "580:     return TCL_ERROR;",
          "581:   }",
          "583:   j = parse_thread_id(interp, argv[2]);",
          "584:   if( j<0 ) return TCL_ERROR;",
          "585:   if( !threadset[j].busy ){",
          "586:     Tcl_AppendResult(interp, \"no such thread\", 0);",
          "587:     return TCL_ERROR;",
          "588:   }",
          "590:   temp = threadset[i].db;",
          "591:   threadset[i].db = threadset[j].db;",
          "592:   threadset[j].db = temp;",
          "",
          "[Removed Lines]",
          "582:   thread_wait(&threadset[i]);",
          "589:   thread_wait(&threadset[j]);",
          "",
          "[Added Lines]",
          "582:   test_thread_wait(&threadset[i]);",
          "589:   test_thread_wait(&threadset[j]);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "620:     Tcl_AppendResult(interp, \"no such thread\", 0);",
          "621:     return TCL_ERROR;",
          "622:   }",
          "624:   sqlite3TestMakePointerStr(interp, zBuf, threadset[i].db);",
          "625:   threadset[i].db = 0;",
          "626:   Tcl_AppendResult(interp, zBuf, (char*)0);",
          "",
          "[Removed Lines]",
          "623:   thread_wait(&threadset[i]);",
          "",
          "[Added Lines]",
          "623:   test_thread_wait(&threadset[i]);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "651:     Tcl_AppendResult(interp, \"no such thread\", 0);",
          "652:     return TCL_ERROR;",
          "653:   }",
          "655:   assert( !threadset[i].db );",
          "656:   threadset[i].db = (sqlite3*)sqlite3TestTextToPtr(argv[2]);",
          "657:   return TCL_OK;",
          "",
          "[Removed Lines]",
          "654:   thread_wait(&threadset[i]);",
          "",
          "[Added Lines]",
          "654:   test_thread_wait(&threadset[i]);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "683:     Tcl_AppendResult(interp, \"no such thread\", 0);",
          "684:     return TCL_ERROR;",
          "685:   }",
          "687:   sqlite3TestMakePointerStr(interp, zBuf, threadset[i].pStmt);",
          "688:   threadset[i].pStmt = 0;",
          "689:   Tcl_AppendResult(interp, zBuf, (char*)0);",
          "",
          "[Removed Lines]",
          "686:   thread_wait(&threadset[i]);",
          "",
          "[Added Lines]",
          "686:   test_thread_wait(&threadset[i]);",
          "",
          "---------------"
        ]
      }
    }
  ]
}