{
  "cve_id": "CVE-2012-2330",
  "cve_desc": "The Update method in src/node_http_parser.cc in Node.js before 0.6.17 and 0.7 before 0.7.8 does not properly check the length of a string, which allows remote attackers to obtain sensitive information (request header contents) and possibly spoof HTTP headers via a zero length string.",
  "repo": "joyent/node",
  "patch_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
  "patch_info": {
    "commit_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
    "repo": "joyent/node",
    "commit_url": "https://github.com/joyent/node/commit/c9a231d",
    "files": [
      "src/node_http_parser.cc"
    ],
    "message": "typo in node_http_parser",
    "before_after_code_files": [
      "src/node_http_parser.cc||src/node_http_parser.cc"
    ]
  },
  "patch_diff": {
    "src/node_http_parser.cc||src/node_http_parser.cc": [
      "File: src/node_http_parser.cc -> src/node_http_parser.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "191:   void Update(const char* str, size_t size) {",
      "192:     if (str_ == NULL)",
      "193:       str_ = str;",
      "197:       char* s = new char[size_ + size];",
      "",
      "[Removed Lines]",
      "194:     else if (on_heap_ || str_ + size != str) {",
      "",
      "[Added Lines]",
      "194:     else if (on_heap_ || str_ + size_ != str) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "f5e742b26445c82177e786b71480d66f7eef9ebd",
      "candidate_info": {
        "commit_hash": "f5e742b26445c82177e786b71480d66f7eef9ebd",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/f5e742b26445c82177e786b71480d66f7eef9ebd",
        "files": [
          "deps/uv/src/win/udp.c"
        ],
        "message": "upgrade libuv to edbabe6f83",
        "before_after_code_files": [
          "deps/uv/src/win/udp.c||deps/uv/src/win/udp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "deps/uv/src/win/udp.c||deps/uv/src/win/udp.c": [
          "File: deps/uv/src/win/udp.c -> deps/uv/src/win/udp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "578:   DECREASE_PENDING_REQ_COUNT(handle);",
          "579: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "582: int uv_udp_set_multicast_ttl(uv_udp_t* handle, int ttl) {",
          "583:   if (setsockopt(handle->socket, IPPROTO_IP, IP_MULTICAST_TTL,",
          "584:       (const char*)&ttl, sizeof ttl) == -1) {",
          "585:     uv__set_sys_error(handle->loop, WSAGetLastError());",
          "586:     return -1;",
          "587:   }",
          "589:   return 0;",
          "590: }",
          "593: int uv_udp_set_broadcast(uv_udp_t* handle, int on) {",
          "594:   if (setsockopt(handle->socket, SOL_SOCKET, SO_BROADCAST, (const char*)&on,",
          "595:       sizeof on) == -1) {",
          "596:     uv__set_sys_error(handle->loop, WSAGetLastError());",
          "597:     return -1;",
          "598:   }",
          "600:   return 0;",
          "601: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2f759a7090a15824a261e168221caa5109c86d44",
      "candidate_info": {
        "commit_hash": "2f759a7090a15824a261e168221caa5109c86d44",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/2f759a7090a15824a261e168221caa5109c86d44",
        "files": [
          "test/simple/test-net-write-slow.js"
        ],
        "message": "test: fix timing sensitivity in test-net-write-slow",
        "before_after_code_files": [
          "test/simple/test-net-write-slow.js||test/simple/test-net-write-slow.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/simple/test-net-write-slow.js||test/simple/test-net-write-slow.js": [
          "File: test/simple/test-net-write-slow.js -> test/simple/test-net-write-slow.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: var assert = require('assert');",
          "24: var net = require('net');",
          "27: var N = 10;",
          "28: var received = 0;",
          "29: var buf = new Buffer(SIZE);",
          "30: buf.fill(0x61); // 'a'",
          "32: var server = net.createServer(function(socket) {",
          "33:   socket.setNoDelay();",
          "35:   socket.on('timeout', function() {",
          "37:   });",
          "39:   for (var i = 0; i < N; ++i) {",
          "41:   }",
          "42:   socket.end();",
          "",
          "[Removed Lines]",
          "26: var SIZE = 1E5;",
          "34:   socket.setTimeout(500);",
          "36:     assert.fail();",
          "40:     socket.write(buf);",
          "",
          "[Added Lines]",
          "26: var SIZE = 2E5;",
          "28: var flushed = 0;",
          "35:   socket.setTimeout(200);",
          "37:     assert.fail('flushed: ' + flushed +",
          "38:                 ', received: ' + received + '/' + SIZE * N);",
          "42:     socket.write(buf, function() {",
          "43:       ++flushed;",
          "44:       if (flushed === N) {",
          "45:         socket.setTimeout(0);",
          "46:       }",
          "47:     });",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "48:     conn.pause();",
          "49:     setTimeout(function() {",
          "50:       conn.resume();",
          "52:   });",
          "53:   conn.on('end', function() {",
          "54:     server.close();",
          "",
          "[Removed Lines]",
          "51:     }, 50);",
          "",
          "[Added Lines]",
          "58:     }, 20);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fde26002f176b4da87cc60bdb1b59b1d45c6a901",
      "candidate_info": {
        "commit_hash": "fde26002f176b4da87cc60bdb1b59b1d45c6a901",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/fde26002f176b4da87cc60bdb1b59b1d45c6a901",
        "files": [
          "deps/v8/build/common.gypi"
        ],
        "message": "v8: Remove OutputDirectory from build/common.gypi",
        "before_after_code_files": [
          "deps/v8/build/common.gypi||deps/v8/build/common.gypi"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "deps/v8/build/common.gypi||deps/v8/build/common.gypi": [
          "File: deps/v8/build/common.gypi -> deps/v8/build/common.gypi",
          "--- Hunk 1 ---",
          "[Context before]",
          "351:           }],  # OS==\"mac\"",
          "352:           ['OS==\"win\"', {",
          "353:             'msvs_configuration_attributes': {",
          "355:               'IntermediateDirectory': '$(OutDir)\\\\obj\\\\$(ProjectName)',",
          "356:               'CharacterSet': '1',",
          "357:             },",
          "",
          "[Removed Lines]",
          "354:               'OutputDirectory': '<(DEPTH)\\\\build\\\\$(ConfigurationName)',",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1b22f5376bd8b9276030333558136f4bfab05745",
      "candidate_info": {
        "commit_hash": "1b22f5376bd8b9276030333558136f4bfab05745",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/1b22f5376bd8b9276030333558136f4bfab05745",
        "files": [
          "src/eio-emul.h",
          "src/node.h",
          "tools/installer.js"
        ],
        "message": "build: install eio-emul.h",
        "before_after_code_files": [
          "src/eio-emul.h||src/eio-emul.h",
          "src/node.h||src/node.h",
          "tools/installer.js||tools/installer.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/eio-emul.h||src/eio-emul.h": [
          "File: src/eio-emul.h -> src/eio-emul.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23: #ifndef NODE_EIO_EMUL_H_",
          "24: #define NODE_EIO_EMUL_H_",
          "26: # ifndef _WIN32",
          "27: #  define eio_nop(a,b,c)                      eio_nop(a,b,c,(&uv_default_loop()->uv_eio_channel))",
          "28: #  define eio_busy(a,b,c,d)                   eio_busy(a,b,c,d,(&uv_default_loop()->uv_eio_channel))",
          "29: #  define eio_sync(a,b,c)                     eio_sync(a,b,c,(&uv_default_loop()->uv_eio_channel))",
          "30: #  define eio_fsync(a,b,c,d)                  eio_fsync(a,b,c,d,(&uv_default_loop()->uv_eio_channel))",
          "31: #  define eio_msync(a,b,c,d,e,f)              eio_msync(a,b,c,d,e,f,(&uv_default_loop()->uv_eio_channel))",
          "32: #  define eio_fdatasync(a,b,c,d)              eio_fdatasync(a,b,c,d,(&uv_default_loop()->uv_eio_channel))",
          "33: #  define eio_syncfs(a,b,c,d)                 eio_syncfs(a,b,c,d,(&uv_default_loop()->uv_eio_channel))",
          "34: #  define eio_sync_file_range(a,b,c,d,e,f,g)  eio_sync_file_range(a,b,c,d,e,f,g,(&uv_default_loop()->uv_eio_channel))",
          "35: #  define eio_mtouch(a,b,c,d,e,f)             eio_mtouch(a,b,c,d,e,f,(&uv_default_loop()->uv_eio_channel))",
          "36: #  define eio_mlock(a,b,c,d,e)                eio_mlock(a,b,c,d,e,(&uv_default_loop()->uv_eio_channel))",
          "37: #  define eio_mlockall(a,b,c,d)               eio_mlockall(a,b,c,d,(&uv_default_loop()->uv_eio_channel))",
          "38: #  define eio_fallocate(a,b,c,d,e,f,g)        eio_fallocate(a,b,c,d,e,f,g,(&uv_default_loop()->uv_eio_channel))",
          "39: #  define eio_close(a,b,c,d)                  eio_close(a,b,c,d,(&uv_default_loop()->uv_eio_channel))",
          "40: #  define eio_readahead(a,b,c,d,e,f)          eio_readahead(a,b,c,d,e,f,(&uv_default_loop()->uv_eio_channel))",
          "41: #  define eio_read(a,b,c,d,e,f,g)             eio_read(a,b,c,d,e,f,g,(&uv_default_loop()->uv_eio_channel))",
          "42: #  define eio_write(a,b,c,d,e,f,g)            eio_write(a,b,c,d,e,f,g,(&uv_default_loop()->uv_eio_channel))",
          "43: #  define eio_fstat(a,b,c,d)                  eio_fstat(a,b,c,d,(&uv_default_loop()->uv_eio_channel))",
          "44: #  define eio_fstatvfs(a,b,c,d)               eio_fstatvfs(a,b,c,d,(&uv_default_loop()->uv_eio_channel))",
          "45: #  define eio_futime(a,b,c,d,e,f)             eio_futime(a,b,c,d,e,f,(&uv_default_loop()->uv_eio_channel))",
          "46: #  define eio_ftruncate(a,b,c,d,e)            eio_ftruncate(a,b,c,d,e,(&uv_default_loop()->uv_eio_channel))",
          "47: #  define eio_fchmod(a,b,c,d,e)               eio_fchmod(a,b,c,d,e,(&uv_default_loop()->uv_eio_channel))",
          "48: #  define eio_fchown(a,b,c,d,e,f)             eio_fchown(a,b,c,d,e,f,(&uv_default_loop()->uv_eio_channel))",
          "49: #  define eio_dup2(a,b,c,d,e)                 eio_dup2(a,b,c,d,e,(&uv_default_loop()->uv_eio_channel))",
          "50: #  define eio_sendfile(a,b,c,d,e,f,g)         eio_sendfile(a,b,c,d,e,f,g,(&uv_default_loop()->uv_eio_channel))",
          "51: #  define eio_open(a,b,c,d,e,f)               eio_open(a,b,c,d,e,f,(&uv_default_loop()->uv_eio_channel))",
          "52: #  define eio_utime(a,b,c,d,e,f)              eio_utime(a,b,c,d,e,f,(&uv_default_loop()->uv_eio_channel))",
          "53: #  define eio_truncate(a,b,c,d,e)             eio_truncate(a,b,c,d,e,(&uv_default_loop()->uv_eio_channel))",
          "54: #  define eio_chown(a,b,c,d,e,f)              eio_chown(a,b,c,d,e,f,(&uv_default_loop()->uv_eio_channel))",
          "55: #  define eio_chmod(a,b,c,d,e)                eio_chmod(a,b,c,d,e,(&uv_default_loop()->uv_eio_channel))",
          "56: #  define eio_mkdir(a,b,c,d,e)                eio_mkdir(a,b,c,d,e,(&uv_default_loop()->uv_eio_channel))",
          "57: #  define eio_readlink(a,b,c,d)               eio_readlink(a,b,c,d,(&uv_default_loop()->uv_eio_channel))",
          "58: #  define eio_realpath(a,b,c,d)               eio_realpath(a,b,c,d,(&uv_default_loop()->uv_eio_channel))",
          "59: #  define eio_stat(a,b,c,d)                   eio_stat(a,b,c,d,(&uv_default_loop()->uv_eio_channel))",
          "60: #  define eio_lstat(a,b,c,d)                  eio_lstat(a,b,c,d,(&uv_default_loop()->uv_eio_channel))",
          "61: #  define eio_statvfs(a,b,c,d)                eio_statvfs(a,b,c,d,(&uv_default_loop()->uv_eio_channel))",
          "62: #  define eio_unlink(a,b,c,d)                 eio_unlink(a,b,c,d,(&uv_default_loop()->uv_eio_channel))",
          "63: #  define eio_rmdir(a,b,c,d)                  eio_rmdir(a,b,c,d,(&uv_default_loop()->uv_eio_channel))",
          "64: #  define eio_readdir(a,b,c,d,e)              eio_readdir(a,b,c,d,e,(&uv_default_loop()->uv_eio_channel))",
          "65: #  define eio_mknod(a,b,c,d,e,f)              eio_mknod(a,b,c,d,e,f,(&uv_default_loop()->uv_eio_channel))",
          "66: #  define eio_link(a,b,c,d,e)                 eio_link(a,b,c,d,e,(&uv_default_loop()->uv_eio_channel))",
          "67: #  define eio_symlink(a,b,c,d,e)              eio_symlink(a,b,c,d,e,(&uv_default_loop()->uv_eio_channel))",
          "68: #  define eio_rename(a,b,c,d,e)               eio_rename(a,b,c,d,e,(&uv_default_loop()->uv_eio_channel))",
          "69: #  define eio_custom(a,b,c,d)                 eio_custom(a,b,c,d,(&uv_default_loop()->uv_eio_channel))",
          "70: #  define eio_grp(a,b)                        eio_grp(a,b,(&uv_default_loop()->uv_eio_channel))",
          "",
          "---------------"
        ],
        "src/node.h||src/node.h": [
          "File: src/node.h -> src/node.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "277: #if !defined(NODE_WANT_INTERNALS)",
          "278: # include \"ev-emul.h\"",
          "279: #endif",
          "281: }  // namespace node",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "279: # include \"eio-emul.h\"",
          "",
          "---------------"
        ],
        "tools/installer.js||tools/installer.js": [
          "File: tools/installer.js -> tools/installer.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "92:   copy([",
          "94:     'src/node.h', 'src/node_buffer.h', 'src/node_object_wrap.h',",
          "97:     'deps/v8/include/v8-debug.h', 'deps/v8/include/v8-preparser.h',",
          "98:     'deps/v8/include/v8-profiler.h', 'deps/v8/include/v8-testing.h',",
          "",
          "[Removed Lines]",
          "95:     'src/node_version.h', 'src/ev-emul.h',",
          "",
          "[Added Lines]",
          "95:     'src/node_version.h', 'src/ev-emul.h', 'src/eio-emul.h',",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "32b2964eed176a803e047c75e8492772bad16c22",
      "candidate_info": {
        "commit_hash": "32b2964eed176a803e047c75e8492772bad16c22",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/32b2964eed176a803e047c75e8492772bad16c22",
        "files": [
          "src/udp_wrap.cc"
        ],
        "message": "udp: remove slab allocator",
        "before_after_code_files": [
          "src/udp_wrap.cc||src/udp_wrap.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/udp_wrap.cc||src/udp_wrap.cc": [
          "File: src/udp_wrap.cc -> src/udp_wrap.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "59:     return scope.Close(Integer::New(-1));                                   \\",
          "60:   }",
          "66: Persistent<String> address_symbol;",
          "67: Persistent<String> port_symbol;",
          "68: Persistent<String> buffer_sym;",
          "71: void AddressToJS(Handle<Object> info,",
          "72:                  const sockaddr* addr,",
          "",
          "[Removed Lines]",
          "62: #define SLAB_SIZE (1024 * 1024)",
          "63: #define MIN(a, b) ((a) < (b) ? (a) : (b))",
          "69: static Persistent<String> udp_slab_sym;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "75: typedef ReqWrap<uv_udp_send_t> SendWrap;",
          "83: class UDPWrap: public HandleWrap {",
          "84: public:",
          "85:   static void Initialize(Handle<Object> target);",
          "",
          "[Removed Lines]",
          "78: static size_t slab_used;",
          "79: size_t slab_offset_;",
          "80: static uv_handle_t* handle_that_last_alloced;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "99:   static Handle<Value> SetTTL(const Arguments& args);",
          "101: private:",
          "104:   UDPWrap(Handle<Object> object);",
          "105:   virtual ~UDPWrap();",
          "",
          "[Removed Lines]",
          "102:   static inline char* NewSlab(v8::Handle<v8::Object> global, v8::Handle<v8::Object> wrap_obj);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "139:   HandleScope scope;",
          "142:   buffer_sym = NODE_PSYMBOL(\"buffer\");",
          "143:   port_symbol = NODE_PSYMBOL(\"port\");",
          "144:   address_symbol = NODE_PSYMBOL(\"address\");",
          "",
          "[Removed Lines]",
          "141:   udp_slab_sym = Persistent<String>::New(String::NewSymbol(\"udpslab\"));",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "416: uv_buf_t UDPWrap::OnAlloc(uv_handle_t* handle, size_t suggested_size) {",
          "455: }",
          "",
          "[Removed Lines]",
          "417:   HandleScope scope;",
          "419:   UDPWrap* wrap = static_cast<UDPWrap*>(handle->data);",
          "421:   char* slab = NULL;",
          "423:   Handle<Object> global = Context::GetCurrent()->Global();",
          "424:   Local<Value> slab_v = global->GetHiddenValue(udp_slab_sym);",
          "426:   if (slab_v.IsEmpty()) {",
          "428:     slab = NewSlab(global, wrap->object_);",
          "429:   } else {",
          "431:     Local<Object> slab_obj = slab_v->ToObject();",
          "432:     slab = Buffer::Data(slab_obj);",
          "433:     assert(Buffer::Length(slab_obj) == SLAB_SIZE);",
          "434:     assert(SLAB_SIZE >= slab_used);",
          "437:     if (SLAB_SIZE - slab_used < 64 * 1024) {",
          "438:       slab = NewSlab(global, wrap->object_);",
          "439:     } else {",
          "440:       wrap->object_->SetHiddenValue(udp_slab_sym, slab_obj);",
          "441:     }",
          "442:   }",
          "444:   uv_buf_t buf;",
          "445:   buf.base = slab + slab_used;",
          "446:   buf.len = MIN(SLAB_SIZE - slab_used, suggested_size);",
          "448:   slab_offset_ = slab_used;",
          "449:   slab_used += buf.len;",
          "451:   handle_that_last_alloced = reinterpret_cast<uv_handle_t*>(handle);",
          "453:   return buf;",
          "",
          "[Added Lines]",
          "405:   return uv_buf_init(new char[suggested_size], suggested_size);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "460:                      uv_buf_t buf,",
          "461:                      struct sockaddr* addr,",
          "462:                      unsigned flags) {",
          "463:   if (nread == 0) {",
          "464:     return;",
          "465:   }",
          "469:   UDPWrap* wrap = reinterpret_cast<UDPWrap*>(handle->data);",
          "471:   Handle<Value> argv[4] = {",
          "",
          "[Removed Lines]",
          "467:   HandleScope scope;",
          "",
          "[Added Lines]",
          "414:   HandleScope scope;",
          "417:     free(buf.base);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "484:     argv[2] = Buffer::New(buf.base, nread, NULL, NULL)->handle_;",
          "485:     argv[3] = rinfo;",
          "486:   }",
          "488:   MakeCallback(wrap->object_, \"onmessage\", ARRAY_SIZE(argv), argv);",
          "489: }",
          "501: void AddressToJS(Handle<Object> info,",
          "502:                  const sockaddr* addr,",
          "",
          "[Removed Lines]",
          "491: inline char* UDPWrap::NewSlab(Handle<Object> global,",
          "492:                                         Handle<Object> wrap_obj) {",
          "493:   Buffer* b = Buffer::New(SLAB_SIZE);",
          "494:   global->SetHiddenValue(udp_slab_sym, b->handle_);",
          "495:   assert(Buffer::Length(b) == SLAB_SIZE);",
          "496:   slab_used = 0;",
          "497:   wrap_obj->SetHiddenValue(udp_slab_sym, b->handle_);",
          "498:   return Buffer::Data(b);",
          "499: }",
          "",
          "[Added Lines]",
          "439:   free(buf.base);",
          "",
          "---------------"
        ]
      }
    }
  ]
}