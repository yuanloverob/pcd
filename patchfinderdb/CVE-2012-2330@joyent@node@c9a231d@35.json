{
  "cve_id": "CVE-2012-2330",
  "cve_desc": "The Update method in src/node_http_parser.cc in Node.js before 0.6.17 and 0.7 before 0.7.8 does not properly check the length of a string, which allows remote attackers to obtain sensitive information (request header contents) and possibly spoof HTTP headers via a zero length string.",
  "repo": "joyent/node",
  "patch_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
  "patch_info": {
    "commit_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
    "repo": "joyent/node",
    "commit_url": "https://github.com/joyent/node/commit/c9a231d",
    "files": [
      "src/node_http_parser.cc"
    ],
    "message": "typo in node_http_parser",
    "before_after_code_files": [
      "src/node_http_parser.cc||src/node_http_parser.cc"
    ]
  },
  "patch_diff": {
    "src/node_http_parser.cc||src/node_http_parser.cc": [
      "File: src/node_http_parser.cc -> src/node_http_parser.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "191:   void Update(const char* str, size_t size) {",
      "192:     if (str_ == NULL)",
      "193:       str_ = str;",
      "197:       char* s = new char[size_ + size];",
      "",
      "[Removed Lines]",
      "194:     else if (on_heap_ || str_ + size != str) {",
      "",
      "[Added Lines]",
      "194:     else if (on_heap_ || str_ + size_ != str) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "fb7348ae060bf9dd4b0521ac2533fc1d66c44d8b",
      "candidate_info": {
        "commit_hash": "fb7348ae060bf9dd4b0521ac2533fc1d66c44d8b",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/fb7348ae060bf9dd4b0521ac2533fc1d66c44d8b",
        "files": [
          "doc/api/crypto.markdown",
          "doc/api/https.markdown",
          "doc/api/tls.markdown",
          "lib/crypto.js",
          "lib/tls.js",
          "src/node_crypto.cc",
          "src/node_crypto.h",
          "test/fixtures/test_cert.pfx",
          "test/simple/test-crypto.js"
        ],
        "message": "crypto: add PKCS12/PFX support\n\nFixes #2845.",
        "before_after_code_files": [
          "lib/crypto.js||licrypto.js",
          "lib/tls.js||litls.js",
          "src/node_crypto.cc||src/node_crypto.cc",
          "src/node_crypto.h||src/node_crypto.h",
          "test/simple/test-crypto.js||test/simple/test-crypto.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/crypto.js||licrypto.js": [
          "File: lib/crypto.js -> licrypto.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "114:     c.context.setSessionIdContext(options.sessionIdContext);",
          "115:   }",
          "117:   return c;",
          "118: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/tls.js||litls.js": [
          "File: lib/tls.js -> litls.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "912:   this.setOptions(options);",
          "914:   var sharedCreds = crypto.createCredentials({",
          "915:     key: self.key,",
          "916:     passphrase: self.passphrase,",
          "917:     cert: self.cert,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "996:     this.rejectUnauthorized = false;",
          "997:   }",
          "999:   if (options.key) this.key = options.key;",
          "1000:   if (options.passphrase) this.passphrase = options.passphrase;",
          "1001:   if (options.cert) this.cert = options.cert;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/node_crypto.cc||src/node_crypto.cc": [
          "File: src/node_crypto.cc -> src/node_crypto.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "169:   NODE_SET_PROTOTYPE_METHOD(t, \"setSessionIdContext\",",
          "170:                                SecureContext::SetSessionIdContext);",
          "171:   NODE_SET_PROTOTYPE_METHOD(t, \"close\", SecureContext::Close);",
          "173:   target->Set(String::NewSymbol(\"SecureContext\"), t->GetFunction());",
          "174: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "173:   NODE_SET_PROTOTYPE_METHOD(t, \"loadPKCS12\", SecureContext::LoadPKCS12);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "595:   return False();",
          "596: }",
          "599: #ifdef SSL_PRINT_DEBUG",
          "600: # define DEBUG_PRINT(...) fprintf (stderr, __VA_ARGS__)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "601: Handle<Value> SecureContext::LoadPKCS12(const Arguments& args) {",
          "602:   HandleScope scope;",
          "604:   BIO* in = NULL;",
          "605:   PKCS12* p12 = NULL;",
          "606:   EVP_PKEY* pkey = NULL;",
          "607:   X509* cert = NULL;",
          "608:   STACK_OF(X509)* extraCerts = NULL;",
          "609:   char* pass = NULL;",
          "610:   bool ret = false;",
          "612:   SecureContext *sc = ObjectWrap::Unwrap<SecureContext>(args.Holder());",
          "614:   if (args.Length() < 1) {",
          "615:     return ThrowException(Exception::TypeError(",
          "616:           String::New(\"Bad parameter\")));",
          "617:   }",
          "619:   in = LoadBIO(args[0]);",
          "620:   if (in == NULL) {",
          "621:     return ThrowException(Exception::Error(",
          "622:           String::New(\"Unable to load BIO\")));",
          "623:   }",
          "625:   if (args.Length() >= 2) {",
          "626:     ASSERT_IS_STRING_OR_BUFFER(args[1]);",
          "628:     int passlen = DecodeBytes(args[1], BINARY);",
          "629:     if (passlen < 0) {",
          "630:       BIO_free(in);",
          "631:       return ThrowException(Exception::TypeError(",
          "632:             String::New(\"Bad password\")));",
          "633:     }",
          "634:     pass = new char[passlen + 1];",
          "635:     int pass_written = DecodeWrite(pass, passlen, args[1], BINARY);",
          "637:     assert(pass_written == passlen);",
          "638:     pass[passlen] = '\\0';",
          "639:   }",
          "641:   if (d2i_PKCS12_bio(in, &p12) &&",
          "642:       PKCS12_parse(p12, pass, &pkey, &cert, &extraCerts) &&",
          "643:       SSL_CTX_use_certificate(sc->ctx_, cert) &&",
          "644:       SSL_CTX_use_PrivateKey(sc->ctx_, pkey))",
          "645:   {",
          "647:     while (X509* x509 = sk_X509_pop(extraCerts)) {",
          "648:       if (!sc->ca_store_) {",
          "649:         sc->ca_store_ = X509_STORE_new();",
          "650:         SSL_CTX_set_cert_store(sc->ctx_, sc->ca_store_);",
          "651:       }",
          "653:       X509_STORE_add_cert(sc->ca_store_, x509);",
          "654:       SSL_CTX_add_client_CA(sc->ctx_, x509);",
          "655:     }",
          "657:     EVP_PKEY_free(pkey);",
          "658:     X509_free(cert);",
          "659:     sk_X509_free(extraCerts);",
          "661:     ret = true;",
          "662:   }",
          "664:   PKCS12_free(p12);",
          "665:   BIO_free(in);",
          "666:   delete[] pass;",
          "668:   if (!ret) {",
          "669:     unsigned long err = ERR_get_error();",
          "670:     const char *str = ERR_reason_error_string(err);",
          "671:     return ThrowException(Exception::Error(String::New(str)));",
          "672:   }",
          "674:   return True();",
          "675: }",
          "",
          "---------------"
        ],
        "src/node_crypto.h||src/node_crypto.h": [
          "File: src/node_crypto.h -> src/node_crypto.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: #include <openssl/x509v3.h>",
          "36: #include <openssl/hmac.h>",
          "37: #include <openssl/rand.h>",
          "39: #ifdef OPENSSL_NPN_NEGOTIATED",
          "40: #include <node_buffer.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "38: #include <openssl/pkcs12.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "68:   static v8::Handle<v8::Value> SetOptions(const v8::Arguments& args);",
          "69:   static v8::Handle<v8::Value> SetSessionIdContext(const v8::Arguments& args);",
          "70:   static v8::Handle<v8::Value> Close(const v8::Arguments& args);",
          "72:   SecureContext() : ObjectWrap() {",
          "73:     ctx_ = NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "72:   static v8::Handle<v8::Value> LoadPKCS12(const v8::Arguments& args);",
          "",
          "---------------"
        ],
        "test/simple/test-crypto.js||test/simple/test-crypto.js": [
          "File: test/simple/test-crypto.js -> test/simple/test-crypto.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "39: var caPem = fs.readFileSync(common.fixturesDir + '/test_ca.pem', 'ascii');",
          "40: var certPem = fs.readFileSync(common.fixturesDir + '/test_cert.pem', 'ascii');",
          "41: var keyPem = fs.readFileSync(common.fixturesDir + '/test_key.pem', 'ascii');",
          "42: var rsaPubPem = fs.readFileSync(common.fixturesDir + '/test_rsa_pubkey.pem',",
          "43:     'ascii');",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "41: var certPfx = fs.readFileSync(common.fixturesDir + '/test_cert.pfx');",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "54:   process.exit();",
          "55: }",
          "59: var h1 = crypto.createHmac('sha1', 'Node')",
          "60:                .update('some data')",
          "61:                .update('to hmac')",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "59: assert.doesNotThrow(function() {",
          "60:   crypto.createCredentials({pfx:certPfx, passphrase:'sample'});",
          "61: });",
          "63: assert.throws(function() {",
          "64:   crypto.createCredentials({pfx:certPfx});",
          "65: }, 'mac verify failure');",
          "67: assert.throws(function() {",
          "68:   crypto.createCredentials({pfx:certPfx, passphrase:'test'});",
          "69: }, 'mac verify failure');",
          "71: assert.throws(function() {",
          "72:   crypto.createCredentials({pfx:'sample', passphrase:'test'});",
          "73: }, 'not enough data');",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4ced23deaf36493f4303a18f6fdce768c58becc0",
      "candidate_info": {
        "commit_hash": "4ced23deaf36493f4303a18f6fdce768c58becc0",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/4ced23deaf36493f4303a18f6fdce768c58becc0",
        "files": [
          "ChangeLog",
          "src/node_version.h"
        ],
        "message": "2012.05.04 Version 0.6.17 (stable)\n\n* Upgrade npm to 1.1.21\n\n* uv: Add support for EROFS errors (Ben Noordhuis, Maciej Ma\u0142ecki)\n\n* uv: Add support for EIO and ENOSPC errors (Fedor Indutny)\n\n* windows: Add support for EXDEV errors (Bert Belder)\n\n* http: Fix client memory leaks (isaacs, Vincent Voyer)\n\n* fs: fix file descriptor leak in sync functions (Ben Noordhuis)\n\n* fs: fix ReadStream / WriteStream double close bug (Ben Noordhuis)",
        "before_after_code_files": [
          "src/node_version.h||src/node_version.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/node_version.h||src/node_version.h": [
          "File: src/node_version.h -> src/node_version.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: #define NODE_MAJOR_VERSION 0",
          "30: #define NODE_MINOR_VERSION 6",
          "31: #define NODE_PATCH_VERSION 17",
          "34: #ifndef NODE_STRINGIFY",
          "35: #define NODE_STRINGIFY(n) NODE_STRINGIFY_HELPER(n)",
          "",
          "[Removed Lines]",
          "32: #define NODE_VERSION_IS_RELEASE 0",
          "",
          "[Added Lines]",
          "32: #define NODE_VERSION_IS_RELEASE 1",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "02dae998c3506ee1a672911c036e660b28ba893f",
      "candidate_info": {
        "commit_hash": "02dae998c3506ee1a672911c036e660b28ba893f",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/02dae998c3506ee1a672911c036e660b28ba893f",
        "files": [
          "src/node_version.h"
        ],
        "message": "Now working on 0.8.6",
        "before_after_code_files": [
          "src/node_version.h||src/node_version.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/node_version.h||src/node_version.h": [
          "File: src/node_version.h -> src/node_version.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: #define NODE_MAJOR_VERSION 0",
          "26: #define NODE_MINOR_VERSION 8",
          "30: #ifndef NODE_STRINGIFY",
          "31: #define NODE_STRINGIFY(n) NODE_STRINGIFY_HELPER(n)",
          "",
          "[Removed Lines]",
          "27: #define NODE_PATCH_VERSION 5",
          "28: #define NODE_VERSION_IS_RELEASE 1",
          "",
          "[Added Lines]",
          "27: #define NODE_PATCH_VERSION 6",
          "28: #define NODE_VERSION_IS_RELEASE 0",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fb53986a801bc36067a5b5b64cb23b05e3aa6d60",
      "candidate_info": {
        "commit_hash": "fb53986a801bc36067a5b5b64cb23b05e3aa6d60",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/fb53986a801bc36067a5b5b64cb23b05e3aa6d60",
        "files": [
          "benchmark/http.sh"
        ],
        "message": "Bash script for running http-simple benchmarks",
        "before_after_code_files": [
          "benchmark/http.sh||benchmark/http.sh"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "benchmark/http.sh||benchmark/http.sh": [
          "File: benchmark/http.sh -> benchmark/http.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #!/bin/bash",
          "2: cd \"$(dirname \"$(dirname $0)\")\"",
          "3: sudo sysctl -w net.inet.ip.portrange.first=12000",
          "4: sudo sysctl -w net.inet.tcp.msl=1000",
          "5: sudo sysctl -w kern.maxfiles=1000000 kern.maxfilesperproc=1000000",
          "6: ulimit -n 100000",
          "7: ./node benchmark/http_simple.js || exit 1 &",
          "8: sleep 1",
          "9: ab -n 30000 -c 100 http://127.0.0.1:8000/bytes/123 | grep Req",
          "10: killall node",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "70a393ea9ab34dfaedbe0a285dcf3e5c4a4c5f03",
      "candidate_info": {
        "commit_hash": "70a393ea9ab34dfaedbe0a285dcf3e5c4a4c5f03",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/70a393ea9ab34dfaedbe0a285dcf3e5c4a4c5f03",
        "files": [
          "deps/uv/src/win/fs.c",
          "deps/uv/src/win/util.c"
        ],
        "message": "update libuv to 9a5c1bad90",
        "before_after_code_files": [
          "deps/uv/src/win/fs.c||deps/uv/src/win/fs.c",
          "deps/uv/src/win/util.c||deps/uv/src/win/util.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "deps/uv/src/win/fs.c||deps/uv/src/win/fs.c": [
          "File: deps/uv/src/win/fs.c -> deps/uv/src/win/fs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "294:   OVERLAPPED overlapped, *overlapped_ptr;",
          "295:   LARGE_INTEGER offset_;",
          "296:   DWORD bytes;",
          "298:   VERIFY_UV_FILE(file, req);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "297:   DWORD error;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "323:   if (ReadFile(handle, buf, length, &bytes, overlapped_ptr)) {",
          "324:     SET_REQ_RESULT(req, bytes);",
          "325:   } else {",
          "327:   }",
          "328: }",
          "",
          "[Removed Lines]",
          "326:     SET_REQ_WIN32_ERROR(req, GetLastError());",
          "",
          "[Added Lines]",
          "327:     error = GetLastError();",
          "328:     if (error == ERROR_HANDLE_EOF) {",
          "329:       SET_REQ_RESULT(req, bytes);",
          "330:     } else {",
          "331:       SET_REQ_WIN32_ERROR(req, error);",
          "332:     }",
          "",
          "---------------"
        ],
        "deps/uv/src/win/util.c||deps/uv/src/win/util.c": [
          "File: deps/uv/src/win/util.c -> deps/uv/src/win/util.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "253:     time.tm_hour = system_time.wHour;",
          "254:     time.tm_min = system_time.wMinute;",
          "255:     time.tm_sec = system_time.wSecond;",
          "258:   } else {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "256:     time.tm_isdst = -1;",
          "",
          "---------------"
        ]
      }
    }
  ]
}