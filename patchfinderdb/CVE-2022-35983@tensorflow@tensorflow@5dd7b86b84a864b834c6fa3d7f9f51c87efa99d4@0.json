{
  "cve_id": "CVE-2022-35983",
  "cve_desc": "TensorFlow is an open source platform for machine learning. If `Save` or `SaveSlices` is run over tensors of an unsupported `dtype`, it results in a `CHECK` fail that can be used to trigger a denial of service attack. We have patched the issue in GitHub commit 5dd7b86b84a864b834c6fa3d7f9f51c87efa99d4. The fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range. There are no known workarounds for this issue.",
  "repo": "tensorflow/tensorflow",
  "patch_hash": "5dd7b86b84a864b834c6fa3d7f9f51c87efa99d4",
  "patch_info": {
    "commit_hash": "5dd7b86b84a864b834c6fa3d7f9f51c87efa99d4",
    "repo": "tensorflow/tensorflow",
    "commit_url": "https://github.com/tensorflow/tensorflow/commit/5dd7b86b84a864b834c6fa3d7f9f51c87efa99d4",
    "files": [
      "tensorflow/core/util/tensor_slice_writer.cc",
      "tensorflow/core/util/tensor_slice_writer.h",
      "tensorflow/core/util/tensor_slice_writer_test.cc"
    ],
    "message": "Fix tf.raw_ops.SaveSlices vulnerability with unsupported dtypes.\n\nCheck that given dtype is supported and emit a descriptive error if not.\n\nPiperOrigin-RevId: 461660795",
    "before_after_code_files": [
      "tensorflow/core/util/tensor_slice_writer.cc||tensorflow/core/util/tensor_slice_writer.cc",
      "tensorflow/core/util/tensor_slice_writer.h||tensorflow/core/util/tensor_slice_writer.h",
      "tensorflow/core/util/tensor_slice_writer_test.cc||tensorflow/core/util/tensor_slice_writer_test.cc"
    ]
  },
  "patch_diff": {
    "tensorflow/core/util/tensor_slice_writer.cc||tensorflow/core/util/tensor_slice_writer.cc": [
      "File: tensorflow/core/util/tensor_slice_writer.cc -> tensorflow/core/util/tensor_slice_writer.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "133: size_t TensorSliceWriter::MaxBytesPerElement(DataType dt) {",
      "134:   switch (dt) {",
      "135:     case DT_FLOAT:",
      "136:       return 4;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "134:   size_t max_bytes_per_element =",
      "135:       TensorSliceWriter::MaxBytesPerElementOrZero(dt);",
      "136:   if (max_bytes_per_element == 0) {",
      "137:     LOG(FATAL) << \"MaxBytesPerElement not implemented for dtype: \" << dt;",
      "138:   }",
      "139:   return max_bytes_per_element;",
      "140: }",
      "143: size_t TensorSliceWriter::MaxBytesPerElementOrZero(DataType dt) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "170:     case DT_STRING:",
      "171:     case DT_BFLOAT16:",
      "172:     default:",
      "174:   }",
      "176: }",
      "178: template <>",
      "",
      "[Removed Lines]",
      "173:       LOG(FATAL) << \"MaxBytesPerElement not implemented for dtype: \" << dt;",
      "175:   return 0;",
      "",
      "[Added Lines]",
      "183:       return 0;",
      "",
      "---------------"
    ],
    "tensorflow/core/util/tensor_slice_writer.h||tensorflow/core/util/tensor_slice_writer.h": [
      "File: tensorflow/core/util/tensor_slice_writer.h -> tensorflow/core/util/tensor_slice_writer.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "68:   static size_t MaxBytesPerElement(DataType dt);",
      "70:  private:",
      "71:   static constexpr size_t kMaxMessageBytes = 1LL << 31;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "71:   static size_t MaxBytesPerElementOrZero(DataType dt);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "162: template <typename T>",
      "163: Status TensorSliceWriter::SaveData(const T* data, int64_t num_elements,",
      "164:                                    SavedSlice* ss) {",
      "168:   if (size_bound > kMaxMessageBytes) {",
      "169:     return errors::InvalidArgument(",
      "170:         \"Tensor slice is too large to serialize (conservative estimate: \",",
      "",
      "[Removed Lines]",
      "165:   size_t size_bound =",
      "166:       ss->ByteSize() + kTensorProtoHeaderBytes +",
      "167:       (MaxBytesPerElement(DataTypeToEnum<T>::value) * num_elements);",
      "",
      "[Added Lines]",
      "167:   size_t max_bytes_per_element =",
      "168:       MaxBytesPerElementOrZero(DataTypeToEnum<T>::value);",
      "169:   if (max_bytes_per_element == 0) {",
      "170:     return errors::InvalidArgument(",
      "171:         \"Tensor slice serialization not implemented for dtype \",",
      "172:         DataTypeToEnum<T>::value);",
      "173:   }",
      "174:   size_t size_bound = ss->ByteSize() + kTensorProtoHeaderBytes +",
      "175:                       (max_bytes_per_element * num_elements);",
      "",
      "---------------"
    ],
    "tensorflow/core/util/tensor_slice_writer_test.cc||tensorflow/core/util/tensor_slice_writer_test.cc": [
      "File: tensorflow/core/util/tensor_slice_writer_test.cc -> tensorflow/core/util/tensor_slice_writer_test.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "16: #include \"tensorflow/core/util/tensor_slice_writer.h\"",
      "18: #include <array>",
      "20: #include \"tensorflow/core/framework/tensor_shape.pb.h\"",
      "21: #include \"tensorflow/core/framework/versions.pb.h\"",
      "22: #include \"tensorflow/core/lib/core/status_test_util.h\"",
      "26: #include \"tensorflow/core/platform/logging.h\"",
      "27: #include \"tensorflow/core/platform/protobuf.h\"",
      "28: #include \"tensorflow/core/platform/test.h\"",
      "29: #include \"tensorflow/core/public/version.h\"",
      "30: #include \"tensorflow/core/util/saved_tensor_slice_util.h\"",
      "31: #include \"tensorflow/core/util/tensor_slice_reader.h\"",
      "",
      "[Removed Lines]",
      "23: #include \"tensorflow/core/lib/core/stringpiece.h\"",
      "24: #include \"tensorflow/core/lib/io/path.h\"",
      "25: #include \"tensorflow/core/lib/strings/str_util.h\"",
      "",
      "[Added Lines]",
      "18: #include <algorithm>",
      "20: #include <memory>",
      "21: #include <vector>",
      "27: #include \"tensorflow/core/platform/path.h\"",
      "30: #include \"tensorflow/core/protobuf/error_codes.pb.h\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "362:   }",
      "363: }",
      "365: }  // namespace checkpoint",
      "367: }  // namespace tensorflow",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "367: TEST(TensorSliceWriterTest, InvalidInput) {",
      "368:   SavedSlice ss;",
      "369:   std::array<uint32_t, 1> data;",
      "370:   std::fill(data.begin(), data.end(), 1234);",
      "371:   Status s = TensorSliceWriter::SaveData(data.data(), data.size(), &ss);",
      "372:   EXPECT_EQ(s.code(), error::INVALID_ARGUMENT);",
      "373:   EXPECT_TRUE(absl::StrContains(",
      "374:       s.error_message(),",
      "375:       \"Tensor slice serialization not implemented for dtype\"));",
      "376: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "c7c64c5d706998dd48a49ffa7fcfc2100f5d1b4f",
      "candidate_info": {
        "commit_hash": "c7c64c5d706998dd48a49ffa7fcfc2100f5d1b4f",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/c7c64c5d706998dd48a49ffa7fcfc2100f5d1b4f",
        "files": [
          "tensorflow/c/eager/c_api_cluster_test.cc",
          "tensorflow/c/eager/c_api_experimental.cc",
          "tensorflow/c/eager/c_api_unified_experimental_test.cc",
          "tensorflow/c/eager/gradient_checker_test.cc",
          "tensorflow/c/eager/gradients_test.cc",
          "tensorflow/c/eager/unified_api_test.cc",
          "tensorflow/compiler/tf2xla/literal_util_test.cc",
          "tensorflow/compiler/tf2xla/tf2xla_util_test.cc",
          "tensorflow/compiler/tf2xla/xla_compiler.cc",
          "tensorflow/compiler/tf2xla/xla_compiler_test.cc",
          "tensorflow/compiler/tf2xla/xla_jit_compiled_cpu_function_test.cc",
          "tensorflow/compiler/tf2xla/xla_op_kernel.cc",
          "tensorflow/compiler/tf2xla/xla_op_registry.cc",
          "tensorflow/core/tpu/kernels/sharding_util_ops_test.cc",
          "tensorflow/core/tpu/kernels/tpu_compilation_cache_external.cc",
          "tensorflow/core/tpu/kernels/tpu_compilation_cache_service.cc",
          "tensorflow/core/tpu/kernels/tpu_compile_op.cc",
          "tensorflow/core/tpu/kernels/tpu_functional_ops.cc",
          "tensorflow/core/util/debug_data_dumper.cc",
          "tensorflow/core/util/matmul_autotune.cc",
          "tensorflow/core/util/reffed_status_callback_test.cc",
          "tensorflow/core/util/tensor_slice_reader.cc",
          "tensorflow/core/util/tensor_slice_reader_test.cc",
          "tensorflow/core/util/tensor_slice_writer.cc",
          "tensorflow/core/util/tensor_slice_writer_test.cc"
        ],
        "message": "Use tsl::Status::message instead of error_message.\n\nPiperOrigin-RevId: 524242061",
        "before_after_code_files": [
          "tensorflow/c/eager/c_api_cluster_test.cc||tensorflow/c/eager/c_api_cluster_test.cc",
          "tensorflow/c/eager/c_api_experimental.cc||tensorflow/c/eager/c_api_experimental.cc",
          "tensorflow/c/eager/c_api_unified_experimental_test.cc||tensorflow/c/eager/c_api_unified_experimental_test.cc",
          "tensorflow/c/eager/gradient_checker_test.cc||tensorflow/c/eager/gradient_checker_test.cc",
          "tensorflow/c/eager/gradients_test.cc||tensorflow/c/eager/gradients_test.cc",
          "tensorflow/c/eager/unified_api_test.cc||tensorflow/c/eager/unified_api_test.cc",
          "tensorflow/compiler/tf2xla/literal_util_test.cc||tensorflow/compiler/tf2xla/literal_util_test.cc",
          "tensorflow/compiler/tf2xla/tf2xla_util_test.cc||tensorflow/compiler/tf2xla/tf2xla_util_test.cc",
          "tensorflow/compiler/tf2xla/xla_compiler.cc||tensorflow/compiler/tf2xla/xla_compiler.cc",
          "tensorflow/compiler/tf2xla/xla_compiler_test.cc||tensorflow/compiler/tf2xla/xla_compiler_test.cc",
          "tensorflow/compiler/tf2xla/xla_jit_compiled_cpu_function_test.cc||tensorflow/compiler/tf2xla/xla_jit_compiled_cpu_function_test.cc",
          "tensorflow/compiler/tf2xla/xla_op_kernel.cc||tensorflow/compiler/tf2xla/xla_op_kernel.cc",
          "tensorflow/compiler/tf2xla/xla_op_registry.cc||tensorflow/compiler/tf2xla/xla_op_registry.cc",
          "tensorflow/core/tpu/kernels/sharding_util_ops_test.cc||tensorflow/core/tpu/kernels/sharding_util_ops_test.cc",
          "tensorflow/core/tpu/kernels/tpu_compilation_cache_external.cc||tensorflow/core/tpu/kernels/tpu_compilation_cache_external.cc",
          "tensorflow/core/tpu/kernels/tpu_compilation_cache_service.cc||tensorflow/core/tpu/kernels/tpu_compilation_cache_service.cc",
          "tensorflow/core/tpu/kernels/tpu_compile_op.cc||tensorflow/core/tpu/kernels/tpu_compile_op.cc",
          "tensorflow/core/tpu/kernels/tpu_functional_ops.cc||tensorflow/core/tpu/kernels/tpu_functional_ops.cc",
          "tensorflow/core/util/debug_data_dumper.cc||tensorflow/core/util/debug_data_dumper.cc",
          "tensorflow/core/util/matmul_autotune.cc||tensorflow/core/util/matmul_autotune.cc",
          "tensorflow/core/util/reffed_status_callback_test.cc||tensorflow/core/util/reffed_status_callback_test.cc",
          "tensorflow/core/util/tensor_slice_reader.cc||tensorflow/core/util/tensor_slice_reader.cc",
          "tensorflow/core/util/tensor_slice_reader_test.cc||tensorflow/core/util/tensor_slice_reader_test.cc",
          "tensorflow/core/util/tensor_slice_writer.cc||tensorflow/core/util/tensor_slice_writer.cc",
          "tensorflow/core/util/tensor_slice_writer_test.cc||tensorflow/core/util/tensor_slice_writer_test.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/util/tensor_slice_writer.cc||tensorflow/core/util/tensor_slice_writer.cc",
            "tensorflow/core/util/tensor_slice_writer_test.cc||tensorflow/core/util/tensor_slice_writer_test.cc"
          ],
          "candidate": [
            "tensorflow/core/util/tensor_slice_writer.cc||tensorflow/core/util/tensor_slice_writer.cc",
            "tensorflow/core/util/tensor_slice_writer_test.cc||tensorflow/core/util/tensor_slice_writer_test.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/c/eager/c_api_cluster_test.cc||tensorflow/c/eager/c_api_cluster_test.cc": [
          "File: tensorflow/c/eager/c_api_cluster_test.cc -> tensorflow/c/eager/c_api_cluster_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "150:   updated_server_def.set_task_index(1);",
          "151:   tensorflow::Status s = tensorflow::GrpcServer::Create(",
          "152:       updated_server_def, tensorflow::Env::Default(), &worker_server);",
          "154:   ASSERT_TRUE(worker_server->Start().ok());",
          "156:   TFE_ContextSetServerDef(ctx, 0, serialized.data(), serialized.size(), status);",
          "",
          "[Removed Lines]",
          "153:   ASSERT_TRUE(s.ok()) << s.error_message();",
          "",
          "[Added Lines]",
          "153:   ASSERT_TRUE(s.ok()) << s.message();",
          "",
          "---------------"
        ],
        "tensorflow/c/eager/c_api_experimental.cc||tensorflow/c/eager/c_api_experimental.cc": [
          "File: tensorflow/c/eager/c_api_experimental.cc -> tensorflow/c/eager/c_api_experimental.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "884:     const auto& result = (*results)[i];",
          "885:     TF_Status s;",
          "886:     TF_SetStatus(&s, static_cast<TF_Code>(result.error_code()),",
          "888:     if (TF_GetCode(&s) != TF_Code::TF_OK) {",
          "889:       tensorflow::CoordinationServiceError error;",
          "",
          "[Removed Lines]",
          "887:                  result.error_message().data());",
          "",
          "[Added Lines]",
          "887:                  std::string(result.error_message()).data());",
          "",
          "---------------"
        ],
        "tensorflow/c/eager/c_api_unified_experimental_test.cc||tensorflow/c/eager/c_api_unified_experimental_test.cc": [
          "File: tensorflow/c/eager/c_api_unified_experimental_test.cc -> tensorflow/c/eager/c_api_unified_experimental_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "47:     TF_StatusPtr status(TF_NewStatus());",
          "48:     TF_SetTracingImplementation(std::get<0>(GetParam()), status.get());",
          "49:     Status s = StatusFromTF_Status(status.get());",
          "51:   }",
          "52: };",
          "",
          "[Removed Lines]",
          "50:     CHECK_EQ(errors::OK, s.code()) << s.error_message();",
          "",
          "[Added Lines]",
          "50:     CHECK_EQ(errors::OK, s.code()) << s.message();",
          "",
          "---------------"
        ],
        "tensorflow/c/eager/gradient_checker_test.cc||tensorflow/c/eager/gradient_checker_test.cc": [
          "File: tensorflow/c/eager/gradient_checker_test.cc -> tensorflow/c/eager/gradient_checker_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "41:     AbstractTensorHandle* numerical_grad_raw;",
          "42:     s = CalcNumericalGrad(ctx, model, inputs, input_index, use_function,",
          "43:                           &numerical_grad_raw);",
          "45:     numerical_grad.reset(numerical_grad_raw);",
          "46:   }",
          "48:   TF_Tensor* numerical_tensor;",
          "49:   s = GetValue(numerical_grad.get(), &numerical_tensor);",
          "51:   auto num_elem_numerical = TF_TensorElementCount(numerical_tensor);",
          "52:   ASSERT_EQ(num_elem_numerical, num_grad);",
          "",
          "[Removed Lines]",
          "44:     ASSERT_EQ(errors::OK, s.code()) << s.error_message();",
          "50:   ASSERT_EQ(errors::OK, s.code()) << s.error_message();",
          "",
          "[Added Lines]",
          "44:     ASSERT_EQ(errors::OK, s.code()) << s.message();",
          "50:   ASSERT_EQ(errors::OK, s.code()) << s.message();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "91:     {",
          "92:       Status s = StatusFromTF_Status(status.get());",
          "94:     }",
          "96:     {",
          "97:       AbstractContext* ctx_raw = nullptr;",
          "98:       Status s =",
          "99:           BuildImmediateExecutionContext(std::get<1>(GetParam()), &ctx_raw);",
          "101:       ctx_.reset(ctx_raw);",
          "102:     }",
          "",
          "[Removed Lines]",
          "93:       CHECK_EQ(errors::OK, s.code()) << s.error_message();",
          "100:       ASSERT_EQ(errors::OK, s.code()) << s.error_message();",
          "",
          "[Added Lines]",
          "93:       CHECK_EQ(errors::OK, s.code()) << s.message();",
          "100:       ASSERT_EQ(errors::OK, s.code()) << s.message();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "122:     AbstractTensorHandle* A_raw;",
          "123:     Status s = TestTensorHandleWithDims<float, TF_FLOAT>(ctx_.get(), A_vals,",
          "124:                                                          A_dims, 2, &A_raw);",
          "126:     A.reset(A_raw);",
          "127:   }",
          "128:   float B_vals[] = {.5f, -1.0f, 1.0f, 1.0f};",
          "",
          "[Removed Lines]",
          "125:     ASSERT_EQ(errors::OK, s.code()) << s.error_message();",
          "",
          "[Added Lines]",
          "125:     ASSERT_EQ(errors::OK, s.code()) << s.message();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "132:     AbstractTensorHandle* B_raw;",
          "133:     Status s = TestTensorHandleWithDims<float, TF_FLOAT>(ctx_.get(), B_vals,",
          "134:                                                          B_dims, 2, &B_raw);",
          "136:     B.reset(B_raw);",
          "137:   }",
          "",
          "[Removed Lines]",
          "135:     ASSERT_EQ(errors::OK, s.code()) << s.error_message();",
          "",
          "[Added Lines]",
          "135:     ASSERT_EQ(errors::OK, s.code()) << s.message();",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "148:     AbstractTensorHandle* x_raw = nullptr;",
          "149:     Status s =",
          "150:         TestScalarTensorHandle<float, TF_FLOAT>(ctx_.get(), 2.0f, &x_raw);",
          "152:     x.reset(x_raw);",
          "153:   }",
          "",
          "[Removed Lines]",
          "151:     ASSERT_EQ(errors::OK, s.code()) << s.error_message();",
          "",
          "[Added Lines]",
          "151:     ASSERT_EQ(errors::OK, s.code()) << s.message();",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "157:     AbstractTensorHandle* y_raw = nullptr;",
          "158:     Status s =",
          "159:         TestScalarTensorHandle<float, TF_FLOAT>(ctx_.get(), 7.0f, &y_raw);",
          "161:     y.reset(y_raw);",
          "162:   }",
          "",
          "[Removed Lines]",
          "160:     ASSERT_EQ(errors::OK, s.code()) << s.error_message();",
          "",
          "[Added Lines]",
          "160:     ASSERT_EQ(errors::OK, s.code()) << s.message();",
          "",
          "---------------"
        ],
        "tensorflow/c/eager/gradients_test.cc||tensorflow/c/eager/gradients_test.cc": [
          "File: tensorflow/c/eager/gradients_test.cc -> tensorflow/c/eager/gradients_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "53:     TF_StatusPtr status(TF_NewStatus());",
          "54:     TF_SetTracingImplementation(std::get<0>(GetParam()), status.get());",
          "55:     Status s = StatusFromTF_Status(status.get());",
          "57:   }",
          "58: };",
          "",
          "[Removed Lines]",
          "56:     CHECK_EQ(errors::OK, s.code()) << s.error_message();",
          "",
          "[Added Lines]",
          "56:     CHECK_EQ(errors::OK, s.code()) << s.message();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "70:     AbstractContext* ctx_raw = nullptr;",
          "71:     Status s =",
          "72:         BuildImmediateExecutionContext(std::get<1>(GetParam()), &ctx_raw);",
          "74:     ctx.reset(ctx_raw);",
          "75:   }",
          "",
          "[Removed Lines]",
          "73:     ASSERT_EQ(errors::OK, s.code()) << s.error_message();",
          "",
          "[Added Lines]",
          "73:     ASSERT_EQ(errors::OK, s.code()) << s.message();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "78:   {",
          "79:     AbstractTensorHandle* x_raw = nullptr;",
          "80:     Status s = TestScalarTensorHandle<float, TF_FLOAT>(ctx.get(), 1.0f, &x_raw);",
          "82:     t.reset(x_raw);",
          "83:   }",
          "",
          "[Removed Lines]",
          "81:     ASSERT_EQ(errors::OK, s.code()) << s.error_message();",
          "",
          "[Added Lines]",
          "81:     ASSERT_EQ(errors::OK, s.code()) << s.message();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "86:   ForwardOperation forward_op;",
          "87:   Status s = Reset(check_numerics_op.get(), \"CheckNumerics\",",
          "90:   if (isa<TracingOperation>(check_numerics_op.get())) {",
          "91:     s = dyn_cast<TracingOperation>(check_numerics_op.get())",
          "92:             ->SetOpName(\"check_numerics\");",
          "94:   }",
          "95:   s = AddInput(check_numerics_op.get(), t.get(), &forward_op);",
          "97:   string message = \"This is the way!\";",
          "98:   s = SetAttrString(check_numerics_op.get(), \"message\", message.data(),",
          "99:                     message.length(), &forward_op);",
          "101:   int num_retvals = 1;",
          "102:   std::vector<AbstractTensorHandle*> outputs(1);",
          "103:   GradientRegistry registry;",
          "104:   s = RegisterGradients(&registry);",
          "106:   auto tape = std::make_unique<Tape>(/*persistent=*/false);",
          "107:   s = Execute(check_numerics_op.get(), ctx.get(), absl::MakeSpan(outputs),",
          "108:               &num_retvals, &forward_op, tape.get(), registry);",
          "111:   string read_message;",
          "112:   s = forward_op.attrs.Get(\"message\", &read_message);",
          "114:   ASSERT_EQ(read_message, message);",
          "115: }",
          "",
          "[Removed Lines]",
          "89:   ASSERT_EQ(errors::OK, s.code()) << s.error_message();",
          "93:     ASSERT_EQ(errors::OK, s.code()) << s.error_message();",
          "96:   ASSERT_EQ(errors::OK, s.code()) << s.error_message();",
          "100:   ASSERT_EQ(errors::OK, s.code()) << s.error_message();",
          "105:   ASSERT_EQ(errors::OK, s.code()) << s.error_message();",
          "109:   ASSERT_EQ(errors::OK, s.code()) << s.error_message();",
          "113:   ASSERT_EQ(errors::OK, s.code()) << s.error_message();",
          "",
          "[Added Lines]",
          "89:   ASSERT_EQ(errors::OK, s.code()) << s.message();",
          "93:     ASSERT_EQ(errors::OK, s.code()) << s.message();",
          "96:   ASSERT_EQ(errors::OK, s.code()) << s.message();",
          "100:   ASSERT_EQ(errors::OK, s.code()) << s.message();",
          "105:   ASSERT_EQ(errors::OK, s.code()) << s.message();",
          "109:   ASSERT_EQ(errors::OK, s.code()) << s.message();",
          "113:   ASSERT_EQ(errors::OK, s.code()) << s.message();",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "136:     AbstractContext* ctx_raw = nullptr;",
          "137:     Status s =",
          "138:         BuildImmediateExecutionContext(std::get<1>(GetParam()), &ctx_raw);",
          "140:     ctx.reset(ctx_raw);",
          "141:   }",
          "",
          "[Removed Lines]",
          "139:     ASSERT_EQ(errors::OK, s.code()) << s.error_message();",
          "",
          "[Added Lines]",
          "139:     ASSERT_EQ(errors::OK, s.code()) << s.message();",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "144:   {",
          "145:     AbstractTensorHandle* x_raw = nullptr;",
          "146:     Status s = TestScalarTensorHandle<float, TF_FLOAT>(ctx.get(), 2.0f, &x_raw);",
          "148:     x.reset(x_raw);",
          "149:   }",
          "",
          "[Removed Lines]",
          "147:     ASSERT_EQ(errors::OK, s.code()) << s.error_message();",
          "",
          "[Added Lines]",
          "147:     ASSERT_EQ(errors::OK, s.code()) << s.message();",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "157:       \"Provided null gradient_function for 'Neg'.\\nIf the intent is to treat \"",
          "158:       \"this op as non-differentiable consider using RegisterNotDifferentiable \"",
          "159:       \"or NotDifferentiableGradientFunction.\",",
          "161:   ASSERT_EQ(nullptr, outputs[0]);",
          "162: }",
          "",
          "[Removed Lines]",
          "160:       s.error_message());",
          "",
          "[Added Lines]",
          "160:       s.message());",
          "",
          "---------------"
        ],
        "tensorflow/c/eager/unified_api_test.cc||tensorflow/c/eager/unified_api_test.cc": [
          "File: tensorflow/c/eager/unified_api_test.cc -> tensorflow/c/eager/unified_api_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "30:     TF_StatusPtr status(TF_NewStatus());",
          "31:     TF_SetTracingImplementation(std::get<0>(GetParam()), status.get());",
          "32:     Status s = StatusFromTF_Status(status.get());",
          "34:   }",
          "36:  public:",
          "",
          "[Removed Lines]",
          "33:     CHECK_EQ(errors::OK, s.code()) << s.error_message();",
          "",
          "[Added Lines]",
          "33:     CHECK_EQ(errors::OK, s.code()) << s.message();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "61:     AbstractContext* ctx_raw = nullptr;",
          "62:     Status s =",
          "63:         BuildImmediateExecutionContext(std::get<1>(GetParam()), &ctx_raw);",
          "65:     ctx.reset(ctx_raw);",
          "66:   }",
          "",
          "[Removed Lines]",
          "64:     ASSERT_EQ(errors::OK, s.code()) << s.error_message();",
          "",
          "[Added Lines]",
          "64:     ASSERT_EQ(errors::OK, s.code()) << s.message();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "69:   {",
          "70:     AbstractTensorHandle* x_raw = nullptr;",
          "71:     Status s = TestScalarTensorHandle<float, TF_FLOAT>(ctx.get(), 2.0f, &x_raw);",
          "73:     x.reset(x_raw);",
          "74:   }",
          "",
          "[Removed Lines]",
          "72:     ASSERT_EQ(errors::OK, s.code()) << s.error_message();",
          "",
          "[Added Lines]",
          "72:     ASSERT_EQ(errors::OK, s.code()) << s.message();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "81: }",
          "",
          "[Removed Lines]",
          "80:   ASSERT_EQ(errors::OK, s.code()) << s.error_message();",
          "",
          "[Added Lines]",
          "80:   ASSERT_EQ(errors::OK, s.code()) << s.message();",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "111:     AbstractContext* ctx_raw = nullptr;",
          "112:     Status s =",
          "113:         BuildImmediateExecutionContext(std::get<1>(GetParam()), &ctx_raw);",
          "115:     ctx.reset(ctx_raw);",
          "116:   }",
          "",
          "[Removed Lines]",
          "114:     ASSERT_EQ(errors::OK, s.code()) << s.error_message();",
          "",
          "[Added Lines]",
          "114:     ASSERT_EQ(errors::OK, s.code()) << s.message();",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "122:     int64_t dim_sizes[] = {2, 4};",
          "123:     Status s = TestTensorHandleWithDims<float, TF_FLOAT>(ctx.get(), data,",
          "124:                                                          dim_sizes, 2, &x_raw);",
          "126:     x.reset(x_raw);",
          "127:   }",
          "",
          "[Removed Lines]",
          "125:     ASSERT_EQ(errors::OK, s.code()) << s.error_message();",
          "",
          "[Added Lines]",
          "125:     ASSERT_EQ(errors::OK, s.code()) << s.message();",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "134: }",
          "136: TEST_P(UnifiedAPI, TestUnknownShapeTracing) {",
          "",
          "[Removed Lines]",
          "133:   ASSERT_EQ(errors::OK, s.code()) << s.error_message();",
          "",
          "[Added Lines]",
          "133:   ASSERT_EQ(errors::OK, s.code()) << s.message();",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "148:     PartialTensorShape shape;",
          "149:     Status s = dyn_cast<tracing::TracingContext>(ctx.get())->AddParameter(",
          "150:         DT_FLOAT, shape, &x_raw);",
          "152:     x.reset(x_raw);",
          "153:   }",
          "155:   PartialTensorShape shape;",
          "156:   Status s = x->Shape(&shape);",
          "158:   ASSERT_TRUE(shape.unknown_rank());",
          "159: }",
          "",
          "[Removed Lines]",
          "151:     ASSERT_EQ(errors::OK, s.code()) << s.error_message();",
          "157:   ASSERT_EQ(errors::OK, s.code()) << s.error_message();",
          "",
          "[Added Lines]",
          "151:     ASSERT_EQ(errors::OK, s.code()) << s.message();",
          "157:   ASSERT_EQ(errors::OK, s.code()) << s.message();",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "172:     PartialTensorShape shape;",
          "173:     int64_t dim_sizes[] = {2, -1};",
          "174:     Status s = PartialTensorShape::MakePartialShape(dim_sizes, 2, &shape);",
          "176:     s = dyn_cast<tracing::TracingContext>(ctx.get())->AddParameter(",
          "177:         DT_FLOAT, shape, &x_raw);",
          "179:     x.reset(x_raw);",
          "180:   }",
          "182:   PartialTensorShape shape;",
          "183:   Status s = x->Shape(&shape);",
          "185:   ASSERT_FALSE(shape.unknown_rank());",
          "187:   ASSERT_EQ(2, shape.dim_size(0));",
          "",
          "[Removed Lines]",
          "175:     ASSERT_EQ(errors::OK, s.code()) << s.error_message();",
          "178:     ASSERT_EQ(errors::OK, s.code()) << s.error_message();",
          "184:   ASSERT_EQ(errors::OK, s.code()) << s.error_message();",
          "",
          "[Added Lines]",
          "175:     ASSERT_EQ(errors::OK, s.code()) << s.message();",
          "178:     ASSERT_EQ(errors::OK, s.code()) << s.message();",
          "184:   ASSERT_EQ(errors::OK, s.code()) << s.message();",
          "",
          "---------------"
        ],
        "tensorflow/compiler/tf2xla/literal_util_test.cc||tensorflow/compiler/tf2xla/literal_util_test.cc": [
          "File: tensorflow/compiler/tf2xla/literal_util_test.cc -> tensorflow/compiler/tf2xla/literal_util_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "32:   Tensor host_tensor;",
          "33:   EXPECT_EQ(\"Cannot convert literal of type S64 to tensor of type int32\",",
          "34:             LiteralToHostTensor(int64_values_literal, DT_INT32, &host_tensor)",
          "36:   EXPECT_EQ(\"Cannot convert literal of type S64 to tensor of type qint32\",",
          "37:             LiteralToHostTensor(int64_values_literal, DT_QINT32, &host_tensor)",
          "39:   EXPECT_TRUE(",
          "40:       LiteralToHostTensor(int64_values_literal, DT_INT64, &host_tensor).ok());",
          "41:   test::ExpectTensorEqual<int64_t>(host_tensor,",
          "",
          "[Removed Lines]",
          "35:                 .error_message());",
          "38:                 .error_message());",
          "",
          "[Added Lines]",
          "35:                 .message());",
          "38:                 .message());",
          "",
          "---------------"
        ],
        "tensorflow/compiler/tf2xla/tf2xla_util_test.cc||tensorflow/compiler/tf2xla/tf2xla_util_test.cc": [
          "File: tensorflow/compiler/tf2xla/tf2xla_util_test.cc -> tensorflow/compiler/tf2xla/tf2xla_util_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "43: void ExpectErrorContains(const Status& status, absl::string_view str) {",
          "44:   EXPECT_NE(OkStatus(), status);",
          "47: }",
          "49: TEST(ValidateConfig, Good) {",
          "",
          "[Removed Lines]",
          "45:   EXPECT_TRUE(absl::StrContains(status.error_message(), str))",
          "46:       << \"expected error: \" << status.error_message() << \" to contain: \" << str;",
          "",
          "[Added Lines]",
          "45:   EXPECT_TRUE(absl::StrContains(status.message(), str))",
          "46:       << \"expected error: \" << status.message() << \" to contain: \" << str;",
          "",
          "---------------"
        ],
        "tensorflow/compiler/tf2xla/xla_compiler.cc||tensorflow/compiler/tf2xla/xla_compiler.cc": [
          "File: tensorflow/compiler/tf2xla/xla_compiler.cc -> tensorflow/compiler/tf2xla/xla_compiler.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "575:     }",
          "576:     TF_RETURN_WITH_CONTEXT_IF_ERROR(",
          "577:         GetFunctionBody(function, flib_runtime_, fbody),",
          "579:     if (config_proto) {",
          "581:     }",
          "",
          "[Removed Lines]",
          "578:         \"Local lookup failed with: \", status.error_message());",
          "",
          "[Added Lines]",
          "578:         \"Local lookup failed with: \", status.message());",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1330:       std::string errmsg = absl::StrCat(",
          "1331:           \"Detected unsupported operations when trying to compile graph \", name,",
          "1332:           \" on \", device_type.type_string(), \": \", node->def().op(), \" (\",",
          "1334:       if (absl::StrContains(device_type.type_string(), \"TPU\")) {",
          "1335:         absl::StrAppend(&errmsg,",
          "1336:                         \"\\nOne approach is to outside compile the unsupported \"",
          "",
          "[Removed Lines]",
          "1333:           s.error_message(), \")\", FormatNodeForError(*node));",
          "",
          "[Added Lines]",
          "1333:           s.message(), \")\", FormatNodeForError(*node));",
          "",
          "---------------"
        ],
        "tensorflow/compiler/tf2xla/xla_compiler_test.cc||tensorflow/compiler/tf2xla/xla_compiler_test.cc": [
          "File: tensorflow/compiler/tf2xla/xla_compiler_test.cc -> tensorflow/compiler/tf2xla/xla_compiler_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "572:       compiler.CompileGraph(XlaCompiler::CompileOptions(), \"reshape\",",
          "573:                             std::move(graph), args, &result);",
          "574:   EXPECT_FALSE(status.ok());",
          "575:   EXPECT_TRUE(",
          "583: }",
          "",
          "[Removed Lines]",
          "576:       absl::StrContains(status.error_message(), \"depends on a parameter\"))",
          "577:       << status.error_message();",
          "578:   EXPECT_TRUE(absl::StrContains(status.error_message(), \"{{node C}}\"))",
          "579:       << status.error_message();",
          "580:   EXPECT_TRUE(absl::StrContains(status.error_message(),",
          "581:                                 \"must be a compile-time constant\"))",
          "582:       << status.error_message();",
          "",
          "[Added Lines]",
          "575:   EXPECT_TRUE(absl::StrContains(status.message(), \"depends on a parameter\"))",
          "576:       << status.message();",
          "577:   EXPECT_TRUE(absl::StrContains(status.message(), \"{{node C}}\"))",
          "578:       << status.message();",
          "580:       absl::StrContains(status.message(), \"must be a compile-time constant\"))",
          "581:       << status.message();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "943:       compiler.CompileFunction(XlaCompiler::CompileOptions(), name_attr,",
          "945:   EXPECT_FALSE(status.ok());",
          "948: }",
          "950: FunctionDef FillFn() {",
          "",
          "[Removed Lines]",
          "946:   EXPECT_TRUE(absl::StrContains(status.error_message(), \"is not defined.\"))",
          "947:       << status.error_message();",
          "",
          "[Added Lines]",
          "945:   EXPECT_TRUE(absl::StrContains(status.message(), \"is not defined.\"))",
          "946:       << status.message();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1023:   ASSERT_FALSE(status.ok());",
          "1030: }",
          "1032: FunctionDef SliceFn() {",
          "",
          "[Removed Lines]",
          "1025:   EXPECT_TRUE(absl::StrContains(status.error_message(), \"is not defined.\"))",
          "1026:       << status.error_message();",
          "1028:   EXPECT_TRUE(absl::StrContains(status.error_message(), \"Attr T is not found\"))",
          "1029:       << status.error_message();",
          "",
          "[Added Lines]",
          "1024:   EXPECT_TRUE(absl::StrContains(status.message(), \"is not defined.\"))",
          "1025:       << status.message();",
          "1027:   EXPECT_TRUE(absl::StrContains(status.message(), \"Attr T is not found\"))",
          "1028:       << status.message();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1521:   status = compiler.CompileGraph(XlaCompiler::CompileOptions(), \"fill\",",
          "1522:                                  std::move(graph), args, &result);",
          "1523:   ASSERT_FALSE(status.ok());",
          "1528: }",
          "",
          "[Removed Lines]",
          "1524:   EXPECT_TRUE(absl::StrContains(status.error_message(), \"InvalidOp\"))",
          "1525:       << status.error_message();",
          "1526:   EXPECT_TRUE(absl::StrContains(status.error_message(), \"{{node fill_fn}}\"))",
          "1527:       << status.error_message();",
          "",
          "[Added Lines]",
          "1523:   EXPECT_TRUE(absl::StrContains(status.message(), \"InvalidOp\"))",
          "1524:       << status.message();",
          "1525:   EXPECT_TRUE(absl::StrContains(status.message(), \"{{node fill_fn}}\"))",
          "1526:       << status.message();",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1546:   status = compiler.CompileGraph(XlaCompiler::CompileOptions(), \"invalid_type\",",
          "1547:                                  std::move(graph), args, &result);",
          "1548:   ASSERT_FALSE(status.ok());",
          "1550:                                 \"is not in the list of allowed values\"))",
          "1554: }",
          "1556: TEST_F(XlaCompilerTest, SingleOpWithoutInputs) {",
          "",
          "[Removed Lines]",
          "1549:   EXPECT_TRUE(absl::StrContains(status.error_message(),",
          "1551:       << status.error_message();",
          "1552:   EXPECT_TRUE(absl::StrContains(status.error_message(), \"{{node Shape}}\"))",
          "1553:       << status.error_message();",
          "",
          "[Added Lines]",
          "1548:   EXPECT_TRUE(absl::StrContains(status.message(),",
          "1550:       << status.message();",
          "1551:   EXPECT_TRUE(absl::StrContains(status.message(), \"{{node Shape}}\"))",
          "1552:       << status.message();",
          "",
          "---------------"
        ],
        "tensorflow/compiler/tf2xla/xla_jit_compiled_cpu_function_test.cc||tensorflow/compiler/tf2xla/xla_jit_compiled_cpu_function_test.cc": [
          "File: tensorflow/compiler/tf2xla/xla_jit_compiled_cpu_function_test.cc -> tensorflow/compiler/tf2xla/xla_jit_compiled_cpu_function_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "331:     return std::unique_ptr<xla::Compiler>(nullptr);",
          "332:   });",
          "335:               HasSubstr(\"FakePlatform\"));",
          "337:   GraphDef graph_def = SumGraph();",
          "",
          "[Removed Lines]",
          "334:   EXPECT_THAT(xla::PlatformUtil::GetDefaultPlatform().status().error_message(),",
          "",
          "[Added Lines]",
          "334:   EXPECT_THAT(xla::PlatformUtil::GetDefaultPlatform().status().message(),",
          "",
          "---------------"
        ],
        "tensorflow/compiler/tf2xla/xla_op_kernel.cc||tensorflow/compiler/tf2xla/xla_op_kernel.cc": [
          "File: tensorflow/compiler/tf2xla/xla_op_kernel.cc -> tensorflow/compiler/tf2xla/xla_op_kernel.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "756: static Status GetStatusWithStackTrace(const Status& s,",
          "757:                                       const XlaOpKernelContext* ctx) {",
          "758:   if (s.code() == error::INVALID_ARGUMENT) {",
          "761:   }",
          "762:   return s;",
          "763: }",
          "",
          "[Removed Lines]",
          "759:     return Status{s.code(),",
          "760:                   absl::StrCat(s.error_message(), \"\\n\", ctx->StackTrace())};",
          "",
          "[Added Lines]",
          "759:     return Status{s.code(), absl::StrCat(s.message(), \"\\n\", ctx->StackTrace())};",
          "",
          "---------------"
        ],
        "tensorflow/compiler/tf2xla/xla_op_registry.cc||tensorflow/compiler/tf2xla/xla_op_registry.cc": [
          "File: tensorflow/compiler/tf2xla/xla_op_registry.cc -> tensorflow/compiler/tf2xla/xla_op_registry.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "222:       const OpDef* op_def;",
          "223:       Status lookup_status = op_registry->LookUpOpDef(op_name, &op_def);",
          "224:       if (!lookup_status.ok()) {",
          "226:         XLA_LOG_LINES(",
          "227:             ERROR,",
          "228:             \"Ops registered: \\n\" +",
          "",
          "[Removed Lines]",
          "225:         LOG(ERROR) << lookup_status.error_message();",
          "",
          "[Added Lines]",
          "225:         LOG(ERROR) << lookup_status.message();",
          "",
          "---------------"
        ],
        "tensorflow/core/tpu/kernels/sharding_util_ops_test.cc||tensorflow/core/tpu/kernels/sharding_util_ops_test.cc": [
          "File: tensorflow/core/tpu/kernels/sharding_util_ops_test.cc -> tensorflow/core/tpu/kernels/sharding_util_ops_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "46: MATCHER_P2(IsStatus, error_code, error_message, \"\") {",
          "47:   return arg.code() == error_code &&",
          "49: }",
          "51: Status RunGraph(const Graph& graph,",
          "",
          "[Removed Lines]",
          "48:          absl::StrContains(arg.error_message(), error_message);",
          "",
          "[Added Lines]",
          "48:          absl::StrContains(arg.message(), error_message);",
          "",
          "---------------"
        ],
        "tensorflow/core/tpu/kernels/tpu_compilation_cache_external.cc||tensorflow/core/tpu/kernels/tpu_compilation_cache_external.cc": [
          "File: tensorflow/core/tpu/kernels/tpu_compilation_cache_external.cc -> tensorflow/core/tpu/kernels/tpu_compilation_cache_external.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "110:   if (!initialization_status.ok()) {",
          "114:   }",
          "",
          "[Removed Lines]",
          "113:     LOG(ERROR) << initialization_status.error_message();",
          "",
          "[Added Lines]",
          "113:     LOG(ERROR) << initialization_status.message();",
          "",
          "---------------"
        ],
        "tensorflow/core/tpu/kernels/tpu_compilation_cache_service.cc||tensorflow/core/tpu/kernels/tpu_compilation_cache_service.cc": [
          "File: tensorflow/core/tpu/kernels/tpu_compilation_cache_service.cc -> tensorflow/core/tpu/kernels/tpu_compilation_cache_service.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "117:         absl::StrCat(",
          "118:             \"Error getting the fetching target \",",
          "119:             CompilationCacheFetchTarget_Name(call->request.fetch_target())),",
          "121:   }",
          "123:   TpuCompilationCacheEntry cache_entry = entry->get();",
          "",
          "[Removed Lines]",
          "120:         s.error_message()));",
          "",
          "[Added Lines]",
          "120:         std::string(s.message())));",
          "",
          "---------------"
        ],
        "tensorflow/core/tpu/kernels/tpu_compile_op.cc||tensorflow/core/tpu/kernels/tpu_compile_op.cc": [
          "File: tensorflow/core/tpu/kernels/tpu_compile_op.cc -> tensorflow/core/tpu/kernels/tpu_compile_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "69:       Status close_status = TpuNodeContext::CloseTpuHost();",
          "71:       if (!close_status.ok()) {",
          "73:       }",
          "74:     }",
          "75:     ctx->CtxFailure(status);",
          "",
          "[Removed Lines]",
          "72:         errors::AppendToMessage(&status, close_status.error_message());",
          "",
          "[Added Lines]",
          "72:         errors::AppendToMessage(&status, close_status.message());",
          "",
          "---------------"
        ],
        "tensorflow/core/tpu/kernels/tpu_functional_ops.cc||tensorflow/core/tpu/kernels/tpu_functional_ops.cc": [
          "File: tensorflow/core/tpu/kernels/tpu_functional_ops.cc -> tensorflow/core/tpu/kernels/tpu_functional_ops.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "528:   auto status =",
          "529:       tpu::ComputeArgumentShapes(metadata_proto, input_shapes, &arg_shapes);",
          "530:   if (!status.ok()) {",
          "532:     return OkStatus();",
          "533:   }",
          "534:   uint64 tf_fingerprint =",
          "",
          "[Removed Lines]",
          "531:     VLOG(2) << status.error_message();",
          "",
          "[Added Lines]",
          "531:     VLOG(2) << status.message();",
          "",
          "---------------"
        ],
        "tensorflow/core/util/debug_data_dumper.cc||tensorflow/core/util/debug_data_dumper.cc": [
          "File: tensorflow/core/util/debug_data_dumper.cc -> tensorflow/core/util/debug_data_dumper.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "88:                auto status = file->Append(\"node_id,node_name,stackframes\\n\");",
          "89:                if (!status.ok()) {",
          "90:                  LOG(WARNING) << \"error writing to file to \" << dump_filename",
          "92:                  return status;",
          "93:                }",
          "",
          "[Removed Lines]",
          "91:                               << \": \" << status.error_message();",
          "",
          "[Added Lines]",
          "91:                               << \": \" << status.message();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "114:                  if (!status.ok()) {",
          "115:                    LOG(WARNING) << \"error writing to file to \" << dump_filename",
          "117:                    return status;",
          "118:                  }",
          "119:                }",
          "",
          "[Removed Lines]",
          "116:                                 << \": \" << status.error_message();",
          "",
          "[Added Lines]",
          "116:                                 << \": \" << status.message();",
          "",
          "---------------"
        ],
        "tensorflow/core/util/matmul_autotune.cc||tensorflow/core/util/matmul_autotune.cc": [
          "File: tensorflow/core/util/matmul_autotune.cc -> tensorflow/core/util/matmul_autotune.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "25:   Status status =",
          "26:       ReadBoolFromEnvVar(\"TF_MATMUL_AUTOTUNE_ENABLE\", false, &value);",
          "27:   if (!status.ok()) {",
          "29:   }",
          "30:   return value;",
          "31: }",
          "",
          "[Removed Lines]",
          "28:     LOG(ERROR) << status.error_message();",
          "",
          "[Added Lines]",
          "28:     LOG(ERROR) << status.message();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "43:   Status status =",
          "44:       ReadBoolFromEnvVar(\"TF_FP16_MATMUL_USE_FP32_COMPUTE\", true, &value);",
          "45:   if (!status.ok()) {",
          "47:   }",
          "48:   return value;",
          "49: }",
          "",
          "[Removed Lines]",
          "46:     LOG(ERROR) << status.error_message();",
          "",
          "[Added Lines]",
          "46:     LOG(ERROR) << status.message();",
          "",
          "---------------"
        ],
        "tensorflow/core/util/reffed_status_callback_test.cc||tensorflow/core/util/reffed_status_callback_test.cc": [
          "File: tensorflow/core/util/reffed_status_callback_test.cc -> tensorflow/core/util/reffed_status_callback_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "59:   EXPECT_THAT(status.code(),",
          "60:               ::testing::AnyOf(error::INTERNAL, error::INVALID_ARGUMENT));",
          "64: }",
          "66: TEST(TestReffedStatusCallback, RefMulti) {",
          "",
          "[Removed Lines]",
          "62:   EXPECT_TRUE(absl::StrContains(status.error_message(), \"1\"));",
          "63:   EXPECT_TRUE(absl::StrContains(status.error_message(), \"2\"));",
          "",
          "[Added Lines]",
          "62:   EXPECT_TRUE(absl::StrContains(status.message(), \"1\"));",
          "63:   EXPECT_TRUE(absl::StrContains(status.message(), \"2\"));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "81:   cb->Unref();  // Created by constructor.",
          "82:   EXPECT_TRUE(called);",
          "86: }",
          "88: TEST(TestReffedStatusCallback, MultiThreaded) {",
          "",
          "[Removed Lines]",
          "84:   EXPECT_TRUE(absl::StrContains(status.error_message(), \"1\"));",
          "85:   EXPECT_TRUE(absl::StrContains(status.error_message(), \"2\"));",
          "",
          "[Added Lines]",
          "84:   EXPECT_TRUE(absl::StrContains(status.message(), \"1\"));",
          "85:   EXPECT_TRUE(absl::StrContains(status.message(), \"2\"));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "115:   EXPECT_EQ(num_called.load(), 1);",
          "116:   EXPECT_EQ(status.code(), error::INVALID_ARGUMENT);",
          "118: }",
          "120: }  // namespace",
          "",
          "[Removed Lines]",
          "117:   EXPECT_TRUE(absl::StrContains(status.error_message(), \"err\"));",
          "",
          "[Added Lines]",
          "117:   EXPECT_TRUE(absl::StrContains(status.message(), \"err\"));",
          "",
          "---------------"
        ],
        "tensorflow/core/util/tensor_slice_reader.cc||tensorflow/core/util/tensor_slice_reader.cc": [
          "File: tensorflow/core/util/tensor_slice_reader.cc -> tensorflow/core/util/tensor_slice_reader.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "87:         return OkStatus();",
          "88:       } else {",
          "89:         s = errors::CreateWithUpdatedMessage(",
          "91:                                \": perhaps your file is in a different \"",
          "92:                                \"file format and you need to use a \"",
          "93:                                \"different restore operator?\"));",
          "",
          "[Removed Lines]",
          "90:             s, strings::StrCat(s.error_message(),",
          "",
          "[Added Lines]",
          "90:             s, strings::StrCat(s.message(),",
          "",
          "---------------"
        ],
        "tensorflow/core/util/tensor_slice_reader_test.cc||tensorflow/core/util/tensor_slice_reader_test.cc": [
          "File: tensorflow/core/util/tensor_slice_reader_test.cc -> tensorflow/core/util/tensor_slice_reader_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "601:   TensorSliceReader reader(path, OpenTableTensorSliceReader);",
          "602:   EXPECT_TRUE(reader.status().code() == error::INVALID_ARGUMENT &&",
          "604:       << \"Expected error starting with '\" << errors::InvalidArgument(error)",
          "605:       << \"', got '\" << reader.status() << \"'\";",
          "606: }",
          "",
          "[Removed Lines]",
          "603:               absl::StartsWith(reader.status().error_message(), error))",
          "",
          "[Added Lines]",
          "603:               absl::StartsWith(reader.status().message(), error))",
          "",
          "---------------"
        ],
        "tensorflow/core/util/tensor_slice_writer.cc||tensorflow/core/util/tensor_slice_writer.cc": [
          "File: tensorflow/core/util/tensor_slice_writer.cc -> tensorflow/core/util/tensor_slice_writer.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "54:     }",
          "55:     if (!s.ok()) {",
          "56:       s = errors::Internal(\"Error writing (tmp) checkpoint file: \", name_, \": \",",
          "58:     }",
          "59:     builder_.reset();",
          "60:     file_.reset();",
          "",
          "[Removed Lines]",
          "57:                            s.error_message());",
          "",
          "[Added Lines]",
          "57:                            s.message());",
          "",
          "---------------"
        ],
        "tensorflow/core/util/tensor_slice_writer_test.cc||tensorflow/core/util/tensor_slice_writer_test.cc": [
          "File: tensorflow/core/util/tensor_slice_writer_test.cc -> tensorflow/core/util/tensor_slice_writer_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "348:     const std::vector<int8> data(300000000, -1);",
          "349:     Status s = writer.Add(\"test1\", shape, slice, data.data());",
          "350:     EXPECT_EQ(s.code(), error::INVALID_ARGUMENT);",
          "352:                                   \"Tensor slice is too large to serialize\"));",
          "353:   }",
          "",
          "[Removed Lines]",
          "351:     EXPECT_TRUE(absl::StrContains(s.error_message(),",
          "",
          "[Added Lines]",
          "351:     EXPECT_TRUE(absl::StrContains(s.message(),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "359:     const std::vector<tstring> data(256 * 1024, std::string(8192, 'f'));",
          "360:     Status s = writer.Add(\"test2\", shape, slice, data.data());",
          "361:     EXPECT_EQ(s.code(), error::INVALID_ARGUMENT);",
          "363:                                   \"Tensor slice is too large to serialize\"));",
          "364:   }",
          "365: }",
          "",
          "[Removed Lines]",
          "362:     EXPECT_TRUE(absl::StrContains(s.error_message(),",
          "",
          "[Added Lines]",
          "362:     EXPECT_TRUE(absl::StrContains(s.message(),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "371:   Status s = TensorSliceWriter::SaveData(data.data(), data.size(), &ss);",
          "372:   EXPECT_EQ(s.code(), error::INVALID_ARGUMENT);",
          "373:   EXPECT_TRUE(absl::StrContains(",
          "376: }",
          "378: }  // namespace checkpoint",
          "",
          "[Removed Lines]",
          "374:       s.error_message(),",
          "375:       \"Tensor slice serialization not implemented for dtype\"));",
          "",
          "[Added Lines]",
          "374:       s.message(), \"Tensor slice serialization not implemented for dtype\"));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "83b5ffedc044f71d8fb0a120ee47f4544f698ef3",
      "candidate_info": {
        "commit_hash": "83b5ffedc044f71d8fb0a120ee47f4544f698ef3",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/83b5ffedc044f71d8fb0a120ee47f4544f698ef3",
        "files": [
          "tensorflow/core/util/tensor_slice_writer.cc",
          "tensorflow/core/util/tensor_slice_writer.h",
          "tensorflow/core/util/tensor_slice_writer_test.cc"
        ],
        "message": "Fix tf.raw_ops.SaveSlices vulnerability with unsupported dtypes.\n\nCheck that given dtype is supported and emit a descriptive error if not.\n\nPiperOrigin-RevId: 461660795",
        "before_after_code_files": [
          "tensorflow/core/util/tensor_slice_writer.cc||tensorflow/core/util/tensor_slice_writer.cc",
          "tensorflow/core/util/tensor_slice_writer.h||tensorflow/core/util/tensor_slice_writer.h",
          "tensorflow/core/util/tensor_slice_writer_test.cc||tensorflow/core/util/tensor_slice_writer_test.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/util/tensor_slice_writer.cc||tensorflow/core/util/tensor_slice_writer.cc",
            "tensorflow/core/util/tensor_slice_writer.h||tensorflow/core/util/tensor_slice_writer.h",
            "tensorflow/core/util/tensor_slice_writer_test.cc||tensorflow/core/util/tensor_slice_writer_test.cc"
          ],
          "candidate": [
            "tensorflow/core/util/tensor_slice_writer.cc||tensorflow/core/util/tensor_slice_writer.cc",
            "tensorflow/core/util/tensor_slice_writer.h||tensorflow/core/util/tensor_slice_writer.h",
            "tensorflow/core/util/tensor_slice_writer_test.cc||tensorflow/core/util/tensor_slice_writer_test.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/util/tensor_slice_writer.cc||tensorflow/core/util/tensor_slice_writer.cc": [
          "File: tensorflow/core/util/tensor_slice_writer.cc -> tensorflow/core/util/tensor_slice_writer.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "133: size_t TensorSliceWriter::MaxBytesPerElement(DataType dt) {",
          "134:   switch (dt) {",
          "135:     case DT_FLOAT:",
          "136:       return 4;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "134:   size_t max_bytes_per_element =",
          "135:       TensorSliceWriter::MaxBytesPerElementOrZero(dt);",
          "136:   if (max_bytes_per_element == 0) {",
          "137:     LOG(FATAL) << \"MaxBytesPerElement not implemented for dtype: \" << dt;",
          "138:   }",
          "139:   return max_bytes_per_element;",
          "140: }",
          "143: size_t TensorSliceWriter::MaxBytesPerElementOrZero(DataType dt) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "170:     case DT_STRING:",
          "171:     case DT_BFLOAT16:",
          "172:     default:",
          "174:   }",
          "176: }",
          "178: template <>",
          "",
          "[Removed Lines]",
          "173:       LOG(FATAL) << \"MaxBytesPerElement not implemented for dtype: \" << dt;",
          "175:   return 0;",
          "",
          "[Added Lines]",
          "183:       return 0;",
          "",
          "---------------"
        ],
        "tensorflow/core/util/tensor_slice_writer.h||tensorflow/core/util/tensor_slice_writer.h": [
          "File: tensorflow/core/util/tensor_slice_writer.h -> tensorflow/core/util/tensor_slice_writer.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "68:   static size_t MaxBytesPerElement(DataType dt);",
          "70:  private:",
          "71:   static constexpr size_t kMaxMessageBytes = 1LL << 31;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "71:   static size_t MaxBytesPerElementOrZero(DataType dt);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "162: template <typename T>",
          "163: Status TensorSliceWriter::SaveData(const T* data, int64_t num_elements,",
          "164:                                    SavedSlice* ss) {",
          "168:   if (size_bound > kMaxMessageBytes) {",
          "169:     return errors::InvalidArgument(",
          "170:         \"Tensor slice is too large to serialize (conservative estimate: \",",
          "",
          "[Removed Lines]",
          "165:   size_t size_bound =",
          "166:       ss->ByteSize() + kTensorProtoHeaderBytes +",
          "167:       (MaxBytesPerElement(DataTypeToEnum<T>::value) * num_elements);",
          "",
          "[Added Lines]",
          "167:   size_t max_bytes_per_element =",
          "168:       MaxBytesPerElementOrZero(DataTypeToEnum<T>::value);",
          "169:   if (max_bytes_per_element == 0) {",
          "170:     return errors::InvalidArgument(",
          "171:         \"Tensor slice serialization not implemented for dtype \",",
          "172:         DataTypeToEnum<T>::value);",
          "173:   }",
          "174:   size_t size_bound = ss->ByteSize() + kTensorProtoHeaderBytes +",
          "175:                       (max_bytes_per_element * num_elements);",
          "",
          "---------------"
        ],
        "tensorflow/core/util/tensor_slice_writer_test.cc||tensorflow/core/util/tensor_slice_writer_test.cc": [
          "File: tensorflow/core/util/tensor_slice_writer_test.cc -> tensorflow/core/util/tensor_slice_writer_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: #include \"tensorflow/core/util/tensor_slice_writer.h\"",
          "18: #include <array>",
          "20: #include \"tensorflow/core/framework/tensor_shape.pb.h\"",
          "21: #include \"tensorflow/core/framework/versions.pb.h\"",
          "22: #include \"tensorflow/core/lib/core/status_test_util.h\"",
          "26: #include \"tensorflow/core/platform/logging.h\"",
          "27: #include \"tensorflow/core/platform/protobuf.h\"",
          "28: #include \"tensorflow/core/platform/test.h\"",
          "29: #include \"tensorflow/core/public/version.h\"",
          "30: #include \"tensorflow/core/util/saved_tensor_slice_util.h\"",
          "31: #include \"tensorflow/core/util/tensor_slice_reader.h\"",
          "",
          "[Removed Lines]",
          "23: #include \"tensorflow/core/lib/core/stringpiece.h\"",
          "24: #include \"tensorflow/core/lib/io/path.h\"",
          "25: #include \"tensorflow/core/lib/strings/str_util.h\"",
          "",
          "[Added Lines]",
          "18: #include <algorithm>",
          "20: #include <memory>",
          "21: #include <vector>",
          "27: #include \"tensorflow/core/platform/path.h\"",
          "30: #include \"tensorflow/core/protobuf/error_codes.pb.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "362:   }",
          "363: }",
          "365: }  // namespace checkpoint",
          "367: }  // namespace tensorflow",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "367: TEST(TensorSliceWriterTest, InvalidInput) {",
          "368:   SavedSlice ss;",
          "369:   std::array<uint32_t, 1> data;",
          "370:   std::fill(data.begin(), data.end(), 1234);",
          "371:   Status s = TensorSliceWriter::SaveData(data.data(), data.size(), &ss);",
          "372:   EXPECT_EQ(s.code(), error::INVALID_ARGUMENT);",
          "373:   EXPECT_TRUE(absl::StrContains(",
          "374:       s.error_message(),",
          "375:       \"Tensor slice serialization not implemented for dtype\"));",
          "376: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "dcfa6a6f797d17c542e9b5cb034e05f7dff1edb7",
      "candidate_info": {
        "commit_hash": "dcfa6a6f797d17c542e9b5cb034e05f7dff1edb7",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/dcfa6a6f797d17c542e9b5cb034e05f7dff1edb7",
        "files": [
          "tensorflow/core/util/tensor_slice_writer.cc",
          "tensorflow/core/util/tensor_slice_writer.h",
          "tensorflow/core/util/tensor_slice_writer_test.cc"
        ],
        "message": "Fix tf.raw_ops.SaveSlices vulnerability with unsupported dtypes.\n\nCheck that given dtype is supported and emit a descriptive error if not.\n\nPiperOrigin-RevId: 461660795",
        "before_after_code_files": [
          "tensorflow/core/util/tensor_slice_writer.cc||tensorflow/core/util/tensor_slice_writer.cc",
          "tensorflow/core/util/tensor_slice_writer.h||tensorflow/core/util/tensor_slice_writer.h",
          "tensorflow/core/util/tensor_slice_writer_test.cc||tensorflow/core/util/tensor_slice_writer_test.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/util/tensor_slice_writer.cc||tensorflow/core/util/tensor_slice_writer.cc",
            "tensorflow/core/util/tensor_slice_writer.h||tensorflow/core/util/tensor_slice_writer.h",
            "tensorflow/core/util/tensor_slice_writer_test.cc||tensorflow/core/util/tensor_slice_writer_test.cc"
          ],
          "candidate": [
            "tensorflow/core/util/tensor_slice_writer.cc||tensorflow/core/util/tensor_slice_writer.cc",
            "tensorflow/core/util/tensor_slice_writer.h||tensorflow/core/util/tensor_slice_writer.h",
            "tensorflow/core/util/tensor_slice_writer_test.cc||tensorflow/core/util/tensor_slice_writer_test.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/util/tensor_slice_writer.cc||tensorflow/core/util/tensor_slice_writer.cc": [
          "File: tensorflow/core/util/tensor_slice_writer.cc -> tensorflow/core/util/tensor_slice_writer.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "133: size_t TensorSliceWriter::MaxBytesPerElement(DataType dt) {",
          "134:   switch (dt) {",
          "135:     case DT_FLOAT:",
          "136:       return 4;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "134:   size_t max_bytes_per_element =",
          "135:       TensorSliceWriter::MaxBytesPerElementOrZero(dt);",
          "136:   if (max_bytes_per_element == 0) {",
          "137:     LOG(FATAL) << \"MaxBytesPerElement not implemented for dtype: \" << dt;",
          "138:   }",
          "139:   return max_bytes_per_element;",
          "140: }",
          "143: size_t TensorSliceWriter::MaxBytesPerElementOrZero(DataType dt) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "170:     case DT_STRING:",
          "171:     case DT_BFLOAT16:",
          "172:     default:",
          "174:   }",
          "176: }",
          "178: template <>",
          "",
          "[Removed Lines]",
          "173:       LOG(FATAL) << \"MaxBytesPerElement not implemented for dtype: \" << dt;",
          "175:   return 0;",
          "",
          "[Added Lines]",
          "183:       return 0;",
          "",
          "---------------"
        ],
        "tensorflow/core/util/tensor_slice_writer.h||tensorflow/core/util/tensor_slice_writer.h": [
          "File: tensorflow/core/util/tensor_slice_writer.h -> tensorflow/core/util/tensor_slice_writer.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "68:   static size_t MaxBytesPerElement(DataType dt);",
          "70:  private:",
          "71:   static constexpr size_t kMaxMessageBytes = 1LL << 31;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "71:   static size_t MaxBytesPerElementOrZero(DataType dt);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "162: template <typename T>",
          "163: Status TensorSliceWriter::SaveData(const T* data, int64_t num_elements,",
          "164:                                    SavedSlice* ss) {",
          "168:   if (size_bound > kMaxMessageBytes) {",
          "169:     return errors::InvalidArgument(",
          "170:         \"Tensor slice is too large to serialize (conservative estimate: \",",
          "",
          "[Removed Lines]",
          "165:   size_t size_bound =",
          "166:       ss->ByteSize() + kTensorProtoHeaderBytes +",
          "167:       (MaxBytesPerElement(DataTypeToEnum<T>::value) * num_elements);",
          "",
          "[Added Lines]",
          "167:   size_t max_bytes_per_element =",
          "168:       MaxBytesPerElementOrZero(DataTypeToEnum<T>::value);",
          "169:   if (max_bytes_per_element == 0) {",
          "170:     return errors::InvalidArgument(",
          "171:         \"Tensor slice serialization not implemented for dtype \",",
          "172:         DataTypeToEnum<T>::value);",
          "173:   }",
          "174:   size_t size_bound = ss->ByteSize() + kTensorProtoHeaderBytes +",
          "175:                       (max_bytes_per_element * num_elements);",
          "",
          "---------------"
        ],
        "tensorflow/core/util/tensor_slice_writer_test.cc||tensorflow/core/util/tensor_slice_writer_test.cc": [
          "File: tensorflow/core/util/tensor_slice_writer_test.cc -> tensorflow/core/util/tensor_slice_writer_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: #include \"tensorflow/core/util/tensor_slice_writer.h\"",
          "18: #include <array>",
          "20: #include \"tensorflow/core/framework/tensor_shape.pb.h\"",
          "21: #include \"tensorflow/core/framework/versions.pb.h\"",
          "22: #include \"tensorflow/core/lib/core/status_test_util.h\"",
          "26: #include \"tensorflow/core/platform/logging.h\"",
          "27: #include \"tensorflow/core/platform/protobuf.h\"",
          "28: #include \"tensorflow/core/platform/test.h\"",
          "29: #include \"tensorflow/core/public/version.h\"",
          "30: #include \"tensorflow/core/util/saved_tensor_slice_util.h\"",
          "31: #include \"tensorflow/core/util/tensor_slice_reader.h\"",
          "",
          "[Removed Lines]",
          "23: #include \"tensorflow/core/lib/core/stringpiece.h\"",
          "24: #include \"tensorflow/core/lib/io/path.h\"",
          "25: #include \"tensorflow/core/lib/strings/str_util.h\"",
          "",
          "[Added Lines]",
          "18: #include <algorithm>",
          "20: #include <memory>",
          "21: #include <vector>",
          "27: #include \"tensorflow/core/platform/path.h\"",
          "30: #include \"tensorflow/core/protobuf/error_codes.pb.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "350:   }",
          "351: }",
          "353: }  // namespace checkpoint",
          "355: }  // namespace tensorflow",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "355: TEST(TensorSliceWriterTest, InvalidInput) {",
          "356:   SavedSlice ss;",
          "357:   std::array<uint32_t, 1> data;",
          "358:   std::fill(data.begin(), data.end(), 1234);",
          "359:   Status s = TensorSliceWriter::SaveData(data.data(), data.size(), &ss);",
          "360:   EXPECT_EQ(s.code(), error::INVALID_ARGUMENT);",
          "361:   EXPECT_TRUE(absl::StrContains(",
          "362:       s.error_message(),",
          "363:       \"Tensor slice serialization not implemented for dtype\"));",
          "364: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "90d95116b5e97822b1b197af17f808a3f3c47a60",
      "candidate_info": {
        "commit_hash": "90d95116b5e97822b1b197af17f808a3f3c47a60",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/90d95116b5e97822b1b197af17f808a3f3c47a60",
        "files": [
          "tensorflow/core/util/tensor_slice_writer.cc",
          "tensorflow/core/util/tensor_slice_writer.h",
          "tensorflow/core/util/tensor_slice_writer_test.cc"
        ],
        "message": "Fix tf.raw_ops.SaveSlices vulnerability with unsupported dtypes.\n\nCheck that given dtype is supported and emit a descriptive error if not.\n\nPiperOrigin-RevId: 461660795",
        "before_after_code_files": [
          "tensorflow/core/util/tensor_slice_writer.cc||tensorflow/core/util/tensor_slice_writer.cc",
          "tensorflow/core/util/tensor_slice_writer.h||tensorflow/core/util/tensor_slice_writer.h",
          "tensorflow/core/util/tensor_slice_writer_test.cc||tensorflow/core/util/tensor_slice_writer_test.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/util/tensor_slice_writer.cc||tensorflow/core/util/tensor_slice_writer.cc",
            "tensorflow/core/util/tensor_slice_writer.h||tensorflow/core/util/tensor_slice_writer.h",
            "tensorflow/core/util/tensor_slice_writer_test.cc||tensorflow/core/util/tensor_slice_writer_test.cc"
          ],
          "candidate": [
            "tensorflow/core/util/tensor_slice_writer.cc||tensorflow/core/util/tensor_slice_writer.cc",
            "tensorflow/core/util/tensor_slice_writer.h||tensorflow/core/util/tensor_slice_writer.h",
            "tensorflow/core/util/tensor_slice_writer_test.cc||tensorflow/core/util/tensor_slice_writer_test.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/util/tensor_slice_writer.cc||tensorflow/core/util/tensor_slice_writer.cc": [
          "File: tensorflow/core/util/tensor_slice_writer.cc -> tensorflow/core/util/tensor_slice_writer.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "133: size_t TensorSliceWriter::MaxBytesPerElement(DataType dt) {",
          "134:   switch (dt) {",
          "135:     case DT_FLOAT:",
          "136:       return 4;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "134:   size_t max_bytes_per_element =",
          "135:       TensorSliceWriter::MaxBytesPerElementOrZero(dt);",
          "136:   if (max_bytes_per_element == 0) {",
          "137:     LOG(FATAL) << \"MaxBytesPerElement not implemented for dtype: \" << dt;",
          "138:   }",
          "139:   return max_bytes_per_element;",
          "140: }",
          "143: size_t TensorSliceWriter::MaxBytesPerElementOrZero(DataType dt) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "170:     case DT_STRING:",
          "171:     case DT_BFLOAT16:",
          "172:     default:",
          "174:   }",
          "176: }",
          "178: template <>",
          "",
          "[Removed Lines]",
          "173:       LOG(FATAL) << \"MaxBytesPerElement not implemented for dtype: \" << dt;",
          "175:   return 0;",
          "",
          "[Added Lines]",
          "183:       return 0;",
          "",
          "---------------"
        ],
        "tensorflow/core/util/tensor_slice_writer.h||tensorflow/core/util/tensor_slice_writer.h": [
          "File: tensorflow/core/util/tensor_slice_writer.h -> tensorflow/core/util/tensor_slice_writer.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "68:   static size_t MaxBytesPerElement(DataType dt);",
          "70:  private:",
          "71:   static constexpr size_t kMaxMessageBytes = 1LL << 31;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "71:   static size_t MaxBytesPerElementOrZero(DataType dt);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "162: template <typename T>",
          "163: Status TensorSliceWriter::SaveData(const T* data, int64_t num_elements,",
          "164:                                    SavedSlice* ss) {",
          "168:   if (size_bound > kMaxMessageBytes) {",
          "169:     return errors::InvalidArgument(",
          "170:         \"Tensor slice is too large to serialize (conservative estimate: \",",
          "",
          "[Removed Lines]",
          "165:   size_t size_bound =",
          "166:       ss->ByteSize() + kTensorProtoHeaderBytes +",
          "167:       (MaxBytesPerElement(DataTypeToEnum<T>::value) * num_elements);",
          "",
          "[Added Lines]",
          "167:   size_t max_bytes_per_element =",
          "168:       MaxBytesPerElementOrZero(DataTypeToEnum<T>::value);",
          "169:   if (max_bytes_per_element == 0) {",
          "170:     return errors::InvalidArgument(",
          "171:         \"Tensor slice serialization not implemented for dtype \",",
          "172:         DataTypeToEnum<T>::value);",
          "173:   }",
          "174:   size_t size_bound = ss->ByteSize() + kTensorProtoHeaderBytes +",
          "175:                       (max_bytes_per_element * num_elements);",
          "",
          "---------------"
        ],
        "tensorflow/core/util/tensor_slice_writer_test.cc||tensorflow/core/util/tensor_slice_writer_test.cc": [
          "File: tensorflow/core/util/tensor_slice_writer_test.cc -> tensorflow/core/util/tensor_slice_writer_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: #include \"tensorflow/core/util/tensor_slice_writer.h\"",
          "18: #include <array>",
          "20: #include \"tensorflow/core/framework/tensor_shape.pb.h\"",
          "21: #include \"tensorflow/core/framework/versions.pb.h\"",
          "22: #include \"tensorflow/core/lib/core/status_test_util.h\"",
          "26: #include \"tensorflow/core/platform/logging.h\"",
          "27: #include \"tensorflow/core/platform/protobuf.h\"",
          "28: #include \"tensorflow/core/platform/test.h\"",
          "29: #include \"tensorflow/core/public/version.h\"",
          "30: #include \"tensorflow/core/util/saved_tensor_slice_util.h\"",
          "31: #include \"tensorflow/core/util/tensor_slice_reader.h\"",
          "",
          "[Removed Lines]",
          "23: #include \"tensorflow/core/lib/core/stringpiece.h\"",
          "24: #include \"tensorflow/core/lib/io/path.h\"",
          "25: #include \"tensorflow/core/lib/strings/str_util.h\"",
          "",
          "[Added Lines]",
          "18: #include <algorithm>",
          "20: #include <memory>",
          "21: #include <vector>",
          "27: #include \"tensorflow/core/platform/path.h\"",
          "30: #include \"tensorflow/core/protobuf/error_codes.pb.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "350:   }",
          "351: }",
          "353: }  // namespace checkpoint",
          "355: }  // namespace tensorflow",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "355: TEST(TensorSliceWriterTest, InvalidInput) {",
          "356:   SavedSlice ss;",
          "357:   std::array<uint32_t, 1> data;",
          "358:   std::fill(data.begin(), data.end(), 1234);",
          "359:   Status s = TensorSliceWriter::SaveData(data.data(), data.size(), &ss);",
          "360:   EXPECT_EQ(s.code(), error::INVALID_ARGUMENT);",
          "361:   EXPECT_TRUE(absl::StrContains(",
          "362:       s.error_message(),",
          "363:       \"Tensor slice serialization not implemented for dtype\"));",
          "364: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}