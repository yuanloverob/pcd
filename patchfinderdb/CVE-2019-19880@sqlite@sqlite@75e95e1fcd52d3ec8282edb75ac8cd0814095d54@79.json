{
  "cve_id": "CVE-2019-19880",
  "cve_desc": "exprListAppendList in window.c in SQLite 3.30.1 allows attackers to trigger an invalid pointer dereference because constant integer values in ORDER BY clauses of window definitions are mishandled.",
  "repo": "sqlite/sqlite",
  "patch_hash": "75e95e1fcd52d3ec8282edb75ac8cd0814095d54",
  "patch_info": {
    "commit_hash": "75e95e1fcd52d3ec8282edb75ac8cd0814095d54",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/75e95e1fcd52d3ec8282edb75ac8cd0814095d54",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/window.c"
    ],
    "message": "When processing constant integer values in ORDER BY clauses of window definitions (see check-in [7e4809eadfe99ebf]) be sure to fully disable the constant value to avoid an invalid pointer dereference if the expression is ever duplicated. This fixes a crash report from Yongheng and Rui.\n\nFossilOrigin-Name: 1ca0bd982ab1183bbafce0d260e4dceda5eb766ed2e7793374a88d1ae0bdd2ca",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/window.c||src/window.c"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 8223e79f987feda5c8e51ec52cec6798cca16d070b10558939e2888ca1a25b8e",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/window.c||src/window.c": [
      "File: src/window.c -> src/window.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "895:     int nInit = pList ? pList->nExpr : 0;",
      "896:     for(i=0; i<pAppend->nExpr; i++){",
      "897:       Expr *pDup = sqlite3ExprDup(pParse->db, pAppend->a[i].pExpr, 0);",
      "898:       if( bIntToNull && pDup && pDup->op==TK_INTEGER ){",
      "899:         pDup->op = TK_NULL;",
      "900:         pDup->flags &= ~(EP_IntValue|EP_IsTrue|EP_IsFalse);",
      "901:       }",
      "902:       pList = sqlite3ExprListAppend(pParse, pList, pDup);",
      "903:       if( pList ) pList->a[nInit+i].sortFlags = pAppend->a[i].sortFlags;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "898:       assert( pDup==0 || !ExprHasProperty(pDup, EP_MemToken) );",
      "902:         pDup->u.zToken = 0;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "9e24439c2ff727332e9141f34aceb323c1126a3a",
      "candidate_info": {
        "commit_hash": "9e24439c2ff727332e9141f34aceb323c1126a3a",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/9e24439c2ff727332e9141f34aceb323c1126a3a",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/whereexpr.c",
          "test/window1.test"
        ],
        "message": "Fix a crash that could occur if the RHS of an IN expression is a correlated sub-query that refers to the outer query from within a window frame definition only.\n\nFossilOrigin-Name: 0524aaaf45681437c2dca3d31ff26a65bee7bd2074730277c29136635ee0be0f",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/whereexpr.c||src/whereexpr.c",
          "test/window1.test||test/window1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 62ac9cb07f5f2d14e716cd0f99f3f2fd34f6c9b4303619be8dfbca2eecf5b727",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/whereexpr.c||src/whereexpr.c": [
          "File: src/whereexpr.c -> src/whereexpr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1520:   }else if( p->x.pList ){",
          "1521:     mask |= sqlite3WhereExprListUsage(pMaskSet, p->x.pList);",
          "1522:   }",
          "1523:   return mask;",
          "1524: }",
          "1525: Bitmask sqlite3WhereExprUsage(WhereMaskSet *pMaskSet, Expr *p){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1523: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "1524:   if( p->op==TK_FUNCTION && p->y.pWin ){",
          "1525:     mask |= sqlite3WhereExprListUsage(pMaskSet, p->y.pWin->pPartition);",
          "1526:     mask |= sqlite3WhereExprListUsage(pMaskSet, p->y.pWin->pOrderBy);",
          "1527:   }",
          "1528: #endif",
          "",
          "---------------"
        ],
        "test/window1.test||test/window1.test": [
          "File: test/window1.test -> test/window1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "720:   ORDER BY 10+sum(a) OVER (ORDER BY a) DESC;",
          "721: } {16 13 11}",
          "724: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "723: #-------------------------------------------------------------------------",
          "724: #",
          "725: reset_db",
          "726: do_execsql_test 18.0 {",
          "727:   CREATE TABLE t1 ( t1_id INTEGER PRIMARY KEY );",
          "728:   CREATE TABLE t2 ( t2_id INTEGER PRIMARY KEY );",
          "729:   CREATE TABLE t3 ( t3_id INTEGER PRIMARY KEY );",
          "731:   INSERT INTO t1 VALUES(1),  (3), (5);",
          "732:   INSERT INTO t2 VALUES      (3), (5);",
          "733:   INSERT INTO t3 VALUES(10), (11), (12);",
          "734: }",
          "736: do_execsql_test 18.1 {",
          "737:   SELECT t1.* FROM t1, t2 WHERE",
          "738:     t1_id=t2_id AND t1_id IN (",
          "739:         SELECT t1_id + row_number() OVER ( ORDER BY t1_id ) FROM t3",
          "740:     )",
          "741: }",
          "743: do_execsql_test 18.2 {",
          "744:   SELECT t1.* FROM t1, t2 WHERE",
          "745:     t1_id=t2_id AND t1_id IN (",
          "746:         SELECT         row_number() OVER ( ORDER BY t1_id ) FROM t3",
          "747:     )",
          "748: } {3}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "05d49d1442d3d99237050c5f1502b56a79f72d2f",
      "candidate_info": {
        "commit_hash": "05d49d1442d3d99237050c5f1502b56a79f72d2f",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/05d49d1442d3d99237050c5f1502b56a79f72d2f",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/fuzzdata8.db"
        ],
        "message": "New test cases form dbsqlfuzz\n\nFossilOrigin-Name: 9cf8ebd141aa2eb661d457624c76433bd9e4abfdef04aa52e28bc169172c2c8f",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 0ea05a0eb96acb860d8af2e788e29a5ae3b161e7892ab62f1ff2f3e722c0dcb6",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "74e1b861ad749a00966583c29f0e2d8dfb510c82",
      "candidate_info": {
        "commit_hash": "74e1b861ad749a00966583c29f0e2d8dfb510c82",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/74e1b861ad749a00966583c29f0e2d8dfb510c82",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/where.c",
          "src/whereInt.h",
          "src/wherecode.c"
        ],
        "message": "Extra VDBE comments in the NULLS LAST logic provide landmarks to help understand the EXPLAIN output.\n\nFossilOrigin-Name: 649b08ead50f10a9ec0357a5e1ed020195d9f93be61ef703ea036a8e53f07a34",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/where.c||src/where.c",
          "src/whereInt.h||src/whereInt.h",
          "src/wherecode.c||src/wherecode.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: d3531f5be7d3769689e2cd8bdc9bab5608759de027d44cc123996f32a4a89583",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5219:       if( pLevel->regBignull ){",
          "5220:         sqlite3VdbeResolveLabel(v, pLevel->addrBignull);",
          "5221:         addr = sqlite3VdbeAddOp1(v, OP_If, pLevel->regBignull);",
          "5222:         VdbeCoverage(v);",
          "5223:         sqlite3VdbeAddOp2(v, OP_Integer, 1, pLevel->regBignull);",
          "5224:         sqlite3VdbeAddOp2(v, OP_Goto, 0, pLevel->p2-1);",
          "5225:         sqlite3VdbeJumpHere(v, addr);",
          "5226:       }",
          "5227: #ifndef SQLITE_DISABLE_SKIPAHEAD_DISTINCT",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5222:         VdbeComment((v, \"If NULL-scan done\"));",
          "5226:         VdbeComment((v, \"Do the NULL-scan\"));",
          "",
          "---------------"
        ],
        "src/whereInt.h||src/whereInt.h": [
          "File: src/whereInt.h -> src/whereInt.h"
        ],
        "src/wherecode.c||src/wherecode.c": [
          "File: src/wherecode.c -> src/wherecode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1555:     pIdx = pLoop->u.btree.pIndex;",
          "1556:     iIdxCur = pLevel->iIdxCur;",
          "",
          "[Removed Lines]",
          "1553:     int regBignull = 0;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1691:       }",
          "1692:       if( regBignull ){",
          "1693:         sqlite3VdbeAddOp2(v, OP_Integer, 0, regBignull);",
          "1694:       }",
          "1696:       op = aStartOp[(start_constraints<<2) + (startEq<<1) + bRev];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1694:         VdbeComment((v, \"NULL-scan flag\"));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1776:     if( nConstraint ){",
          "1777:       if( regBignull ){",
          "1778:         sqlite3VdbeAddOp2(v, OP_If, regBignull, sqlite3VdbeCurrentAddr(v)+3);",
          "1779:         VdbeCoverage(v);",
          "1780:       }",
          "1781:       op = aEndOp[bRev*2 + endEq];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1780:         VdbeComment((v, \"If in NULL-scan\"));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1787:     }",
          "1788:     if( regBignull ){",
          "1789:       sqlite3VdbeAddOp2(v, OP_IfNot, regBignull, sqlite3VdbeCurrentAddr(v)+2);",
          "1790:       VdbeCoverage(v);",
          "1791:       if( bStopAtNull ){",
          "1792:         op = aEndOp[bRev*2 + 0];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1792:       VdbeComment((v, \"If not in NULL-scan\"));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f57bea31bad6081613945a4a344e6859cd189de1",
      "candidate_info": {
        "commit_hash": "f57bea31bad6081613945a4a344e6859cd189de1",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/f57bea31bad6081613945a4a344e6859cd189de1",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in",
          "test/recover.test"
        ],
        "message": "Fix a problem in the .recover command with recovering WITHOUT ROWID tables where the PK columns are not the leftmost in the CREATE TABLE statement.\n\nFossilOrigin-Name: 91df4b8e0386105d01614921e8410994b621404a3d46ec4af8687b8743c52d52",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in",
          "test/recover.test||test/recover.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 7221f6e33ed6a5a96ec61e25f2a1f70b84aae66e503d897eb7b7ff1aec42355d",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "6317:       i = 1;",
          "6318:       shellPreparePrintf(dbtmp, &rc, &pStmt,",
          "6319:           \"SELECT %Q || group_concat(name, ', ') \"",
          "6321:           \"FROM pragma_table_info(%Q)\",",
          "6323:       );",
          "6324:       while( rc==SQLITE_OK && SQLITE_ROW==sqlite3_step(pStmt) ){",
          "6325:         const char *zText = (const char*)sqlite3_column_text(pStmt, 0);",
          "",
          "[Removed Lines]",
          "6320:           \"  FILTER (WHERE cid!=%d) OVER (ORDER BY cid) \"",
          "6322:           bIntkey ? \", \" : \"\", pTab->iPk, zName",
          "",
          "[Added Lines]",
          "6325:           \"  FILTER (WHERE cid!=%d) OVER (ORDER BY %s cid) \"",
          "6327:           bIntkey ? \", \" : \"\", pTab->iPk,",
          "6328:           bIntkey ? \"\" : \"(CASE WHEN pk=0 THEN 1000000 ELSE pk END), \",",
          "6329:           zName",
          "",
          "---------------"
        ],
        "test/recover.test||test/recover.test": [
          "File: test/recover.test -> test/recover.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "85: \"",
          "86: do_recover_test 1.3.2",
          "88: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "88: #-------------------------------------------------------------------------",
          "89: reset_db",
          "90: do_execsql_test 2.1.0 {",
          "91:   CREATE TABLE t1(a, b, c, PRIMARY KEY(b, c)) WITHOUT ROWID;",
          "92:   INSERT INTO t1 VALUES(1, 2, 3);",
          "93:   INSERT INTO t1 VALUES(4, 5, 6);",
          "94:   INSERT INTO t1 VALUES(7, 8, 9);",
          "95: }",
          "97: do_recover_test 2.1.1",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d790c9a1613334e2fc6b92211911e032ecbf36cf",
      "candidate_info": {
        "commit_hash": "d790c9a1613334e2fc6b92211911e032ecbf36cf",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/d790c9a1613334e2fc6b92211911e032ecbf36cf",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in"
        ],
        "message": "Tweak the shell tool \".recover\" command so that it can recover rows that consist of a rowid and no fields.\n\nFossilOrigin-Name: 279ac7fdec0b1409cd400b7b093f89089d93c49f596f378c6a3032434a85bf83",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: bd4bda73df3794eef424eb13e08fc7cc54347d1ac69febaeec41f6b6cb4a42bc",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "6712:     \"    )\"",
          "6713:     \"    SELECT pgno FROM p WHERE (parent IS NULL OR pgno = orig)\"",
          "6714:     \") \"",
          "6716:     \"UPDATE recovery.map AS o SET intkey = (\"",
          "6717:     \"  SELECT substr(data, 1, 1)==X'0D' FROM sqlite_dbpage WHERE pgno=o.pgno\"",
          "6718:     \");\"",
          "",
          "[Removed Lines]",
          "6715:     \"FROM pages WHERE maxlen > 0 AND i NOT IN freelist;\"",
          "",
          "[Added Lines]",
          "6715:     \"FROM pages WHERE maxlen IS NOT NULL AND i NOT IN freelist;\"",
          "",
          "---------------"
        ]
      }
    }
  ]
}