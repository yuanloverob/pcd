{
  "cve_id": "CVE-2011-1023",
  "cve_desc": "The Reliable Datagram Sockets (RDS) subsystem in the Linux kernel before 2.6.38 does not properly handle congestion map updates, which allows local users to cause a denial of service (BUG_ON and system crash) via vectors involving (1) a loopback (aka loop) transmit operation or (2) an InfiniBand (aka ib) transmit operation.",
  "repo": "torvalds/linux",
  "patch_hash": "6094628bfd94323fc1cea05ec2c6affd98c18f7f",
  "patch_info": {
    "commit_hash": "6094628bfd94323fc1cea05ec2c6affd98c18f7f",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/6094628bfd94323fc1cea05ec2c6affd98c18f7f",
    "files": [
      "net/rds/ib_send.c",
      "net/rds/loop.c"
    ],
    "message": "rds: prevent BUG_ON triggering on congestion map updates\n\nRecently had this bug halt reported to me:\n\nkernel BUG at net/rds/send.c:329!\nOops: Exception in kernel mode, sig: 5 [#1]\nSMP NR_CPUS=1024 NUMA pSeries\nModules linked in: rds sunrpc ipv6 dm_mirror dm_region_hash dm_log ibmveth sg\next4 jbd2 mbcache sd_mod crc_t10dif ibmvscsic scsi_transport_srp scsi_tgt\ndm_mod [last unloaded: scsi_wait_scan]\nNIP: d000000003ca68f4 LR: d000000003ca67fc CTR: d000000003ca8770\nREGS: c000000175cab980 TRAP: 0700   Not tainted  (2.6.32-118.el6.ppc64)\nMSR: 8000000000029032 <EE,ME,CE,IR,DR>  CR: 44000022  XER: 00000000\nTASK = c00000017586ec90[1896] 'krdsd' THREAD: c000000175ca8000 CPU: 0\nGPR00: 0000000000000150 c000000175cabc00 d000000003cb7340 0000000000002030\nGPR04: ffffffffffffffff 0000000000000030 0000000000000000 0000000000000030\nGPR08: 0000000000000001 0000000000000001 c0000001756b1e30 0000000000010000\nGPR12: d000000003caac90 c000000000fa2500 c0000001742b2858 c0000001742b2a00\nGPR16: c0000001742b2a08 c0000001742b2820 0000000000000001 0000000000000001\nGPR20: 0000000000000040 c0000001742b2814 c000000175cabc70 0800000000000000\nGPR24: 0000000000000004 0200000000000000 0000000000000000 c0000001742b2860\nGPR28: 0000000000000000 c0000001756b1c80 d000000003cb68e8 c0000001742b27b8\nNIP [d000000003ca68f4] .rds_send_xmit+0x4c4/0x8a0 [rds]\nLR [d000000003ca67fc] .rds_send_xmit+0x3cc/0x8a0 [rds]\nCall Trace:\n[c000000175cabc00] [d000000003ca67fc] .rds_send_xmit+0x3cc/0x8a0 [rds]\n(unreliable)\n[c000000175cabd30] [d000000003ca7e64] .rds_send_worker+0x54/0x100 [rds]\n[c000000175cabdb0] [c0000000000b475c] .worker_thread+0x1dc/0x3c0\n[c000000175cabed0] [c0000000000baa9c] .kthread+0xbc/0xd0\n[c000000175cabf90] [c000000000032114] .kernel_thread+0x54/0x70\nInstruction dump:\n4bfffd50 60000000 60000000 39080001 935f004c f91f0040 41820024 813d017c\n7d094a78 7d290074 7929d182 394a0020 <0b090000> 40e2ff68 4bffffa4 39200000\nKernel panic - not syncing: Fatal exception\nCall Trace:\n[c000000175cab560] [c000000000012e04] .show_stack+0x74/0x1c0 (unreliable)\n[c000000175cab610] [c0000000005a365c] .panic+0x80/0x1b4\n[c000000175cab6a0] [c00000000002fbcc] .die+0x21c/0x2a0\n[c000000175cab750] [c000000000030000] ._exception+0x110/0x220\n[c000000175cab910] [c000000000004b9c] program_check_common+0x11c/0x180\n\nSigned-off-by: David S. Miller <davem@davemloft.net>",
    "before_after_code_files": [
      "net/rds/ib_send.c||net/rds/ib_send.c",
      "net/rds/loop.c||net/rds/loop.c"
    ]
  },
  "patch_diff": {
    "net/rds/ib_send.c||net/rds/ib_send.c": [
      "File: net/rds/ib_send.c -> net/rds/ib_send.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "551:  if (conn->c_loopback",
      "552:      && rm->m_inc.i_hdr.h_flags & RDS_FLAG_CONG_BITMAP) {",
      "553:   rds_cong_map_updated(conn->c_fcong, ~(u64) 0);",
      "555:  }",
      "",
      "[Removed Lines]",
      "554:   return sizeof(struct rds_header) + RDS_CONG_MAP_BYTES;",
      "",
      "[Added Lines]",
      "554:   scat = &rm->data.op_sg[sg];",
      "555:   ret = sizeof(struct rds_header) + RDS_CONG_MAP_BYTES;",
      "556:   ret = min_t(int, ret, scat->length - conn->c_xmit_data_off);",
      "557:   return ret;",
      "",
      "---------------"
    ],
    "net/rds/loop.c||net/rds/loop.c": [
      "File: net/rds/loop.c -> net/rds/loop.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "61:     unsigned int hdr_off, unsigned int sg,",
      "62:     unsigned int off)",
      "63: {",
      "65:  if (rm->m_inc.i_hdr.h_flags & RDS_FLAG_CONG_BITMAP) {",
      "66:   rds_cong_map_updated(conn->c_fcong, ~(u64) 0);",
      "68:  }",
      "70:  BUG_ON(hdr_off || sg || off);",
      "",
      "[Removed Lines]",
      "67:   return sizeof(struct rds_header) + RDS_CONG_MAP_BYTES;",
      "",
      "[Added Lines]",
      "64:  struct scatterlist *sgp = &rm->data.op_sg[sg];",
      "65:  int ret = sizeof(struct rds_header) +",
      "66:    be32_to_cpu(rm->m_inc.i_hdr.h_len);",
      "71:   ret = min_t(int, ret, sgp->length - conn->c_xmit_data_off);",
      "72:   goto out;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "80:        NULL);",
      "82:  rds_inc_put(&rm->m_inc);",
      "85: }",
      "",
      "[Removed Lines]",
      "84:  return sizeof(struct rds_header) + be32_to_cpu(rm->m_inc.i_hdr.h_len);",
      "",
      "[Added Lines]",
      "88: out:",
      "89:  return ret;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "af24ee9ea8d532e16883251a6684dfa1be8eec29",
      "candidate_info": {
        "commit_hash": "af24ee9ea8d532e16883251a6684dfa1be8eec29",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/af24ee9ea8d532e16883251a6684dfa1be8eec29",
        "files": [
          "fs/xfs/linux-2.6/xfs_ioctl.c"
        ],
        "message": "xfs: zero proper structure size for geometry calls\n\nCommit 493f3358cb289ccf716c5a14fa5bb52ab75943e5 added this call to\nxfs_fs_geometry() in order to avoid passing kernel stack data back\nto user space:\n\n+       memset(geo, 0, sizeof(*geo));\n\nUnfortunately, one of the callers of that function passes the\naddress of a smaller data type, cast to fit the type that\nxfs_fs_geometry() requires.  As a result, this can happen:\n\nKernel panic - not syncing: stack-protector: Kernel stack is corrupted\nin: f87aca93\n\nPid: 262, comm: xfs_fsr Not tainted 2.6.38-rc6-493f3358cb2+ #1\nCall Trace:\n\n[<c12991ac>] ? panic+0x50/0x150\n[<c102ed71>] ? __stack_chk_fail+0x10/0x18\n[<f87aca93>] ? xfs_ioc_fsgeometry_v1+0x56/0x5d [xfs]\n\nFix this by fixing that one caller to pass the right type and then\ncopy out the subset it is interested in.\n\nNote: This patch is an alternative to one originally proposed by\nEric Sandeen.\n\nReported-by: Jeffrey Hundstad <jeffrey.hundstad@mnsu.edu>\nSigned-off-by: Alex Elder <aelder@sgi.com>\nReviewed-by: Eric Sandeen <sandeen@redhat.com>\nTested-by: Jeffrey Hundstad <jeffrey.hundstad@mnsu.edu>",
        "before_after_code_files": [
          "fs/xfs/linux-2.6/xfs_ioctl.c||fs/xfs/linux-2.6/xfs_ioctl.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "fs/xfs/linux-2.6/xfs_ioctl.c||fs/xfs/linux-2.6/xfs_ioctl.c": [
          "File: fs/xfs/linux-2.6/xfs_ioctl.c -> fs/xfs/linux-2.6/xfs_ioctl.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "695:  xfs_mount_t  *mp,",
          "696:  void   __user *arg)",
          "697: {",
          "699:  int   error;",
          "702:  if (error)",
          "703:   return -error;",
          "706:   return -XFS_ERROR(EFAULT);",
          "707:  return 0;",
          "708: }",
          "",
          "[Removed Lines]",
          "698:  xfs_fsop_geom_v1_t fsgeo;",
          "701:  error = xfs_fs_geometry(mp, (xfs_fsop_geom_t *)&fsgeo, 3);",
          "705:  if (copy_to_user(arg, &fsgeo, sizeof(fsgeo)))",
          "",
          "[Added Lines]",
          "698:  xfs_fsop_geom_t         fsgeo;",
          "701:  error = xfs_fs_geometry(mp, &fsgeo, 3);",
          "710:  if (copy_to_user(arg, &fsgeo, sizeof(xfs_fsop_geom_v1_t)))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1362fa078dae16776cd439791c6605b224ea6171",
      "candidate_info": {
        "commit_hash": "1362fa078dae16776cd439791c6605b224ea6171",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/1362fa078dae16776cd439791c6605b224ea6171",
        "files": [
          "Documentation/networking/dns_resolver.txt",
          "net/dns_resolver/dns_key.c"
        ],
        "message": "DNS: Fix a NULL pointer deref when trying to read an error key [CVE-2011-1076]\n\nWhen a DNS resolver key is instantiated with an error indication, attempts to\nread that key will result in an oops because user_read() is expecting there to\nbe a payload - and there isn't one [CVE-2011-1076].\n\nGive the DNS resolver key its own read handler that returns the error cached in\nkey->type_data.x[0] as an error rather than crashing.\n\nAlso make the kenter() at the beginning of dns_resolver_instantiate() limit the\namount of data it prints, since the data is not necessarily NUL-terminated.\n\nThe buggy code was added in:\n\n\tcommit 4a2d789267e00b5a1175ecd2ddefcc78b83fbf09\n\tAuthor: Wang Lei <wang840925@gmail.com>\n\tDate:   Wed Aug 11 09:37:58 2010 +0100\n\tSubject: DNS: If the DNS server returns an error, allow that to be cached [ver #2]\n\nThis can trivially be reproduced by any user with the following program\ncompiled with -lkeyutils:\n\n\t#include <stdlib.h>\n\t#include <keyutils.h>\n\t#include <err.h>\n\tstatic char payload[] = \"#dnserror=6\";\n\tint main()\n\t{\n\t\tkey_serial_t key;\n\t\tkey = add_key(\"dns_resolver\", \"a\", payload, sizeof(payload),\n\t\t\t      KEY_SPEC_SESSION_KEYRING);\n\t\tif (key == -1)\n\t\t\terr(1, \"add_key\");\n\t\tif (keyctl_read(key, NULL, 0) == -1)\n\t\t\terr(1, \"read_key\");\n\t\treturn 0;\n\t}\n\nWhat should happen is that keyctl_read() reports error 6 (ENXIO) to the user:\n\n\tdns-break: read_key: No such device or address\n\nbut instead the kernel oopses.\n\nThis cannot be reproduced with the 'keyutils add' or 'keyutils padd' commands\nas both of those cut the data down below the NUL termination that must be\nincluded in the data.  Without this dns_resolver_instantiate() will return\n-EINVAL and the key will not be instantiated such that it can be read.\n\nThe oops looks like:\n\nBUG: unable to handle kernel NULL pointer dereference at 0000000000000010\nIP: [<ffffffff811b99f7>] user_read+0x4f/0x8f\nPGD 3bdf8067 PUD 385b9067 PMD 0\nOops: 0000 [#1] SMP\nlast sysfs file: /sys/devices/pci0000:00/0000:00:19.0/irq\nCPU 0\nModules linked in:\n\nPid: 2150, comm: dns-break Not tainted 2.6.38-rc7-cachefs+ #468                  /DG965RY\nRIP: 0010:[<ffffffff811b99f7>]  [<ffffffff811b99f7>] user_read+0x4f/0x8f\nRSP: 0018:ffff88003bf47f08  EFLAGS: 00010246\nRAX: 0000000000000001 RBX: ffff88003b5ea378 RCX: ffffffff81972368\nRDX: 0000000000000000 RSI: 0000000000000000 RDI: ffff88003b5ea378\nRBP: ffff88003bf47f28 R08: ffff88003be56620 R09: 0000000000000000\nR10: 0000000000000395 R11: 0000000000000002 R12: 0000000000000000\nR13: 0000000000000000 R14: 0000000000000000 R15: ffffffffffffffa1\nFS:  00007feab5751700(0000) GS:ffff88003e000000(0000) knlGS:0000000000000000\nCS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033\nCR2: 0000000000000010 CR3: 000000003de40000 CR4: 00000000000006f0\nDR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000\nDR3: 0000000000000000 DR6: 00000000ffff0ff0 DR7: 0000000000000400\nProcess dns-break (pid: 2150, threadinfo ffff88003bf46000, task ffff88003be56090)\nStack:\n ffff88003b5ea378 ffff88003b5ea3a0 0000000000000000 0000000000000000\n ffff88003bf47f68 ffffffff811b708e ffff88003c442bc8 0000000000000000\n 00000000004005a0 00007fffba368060 0000000000000000 0000000000000000\nCall Trace:\n [<ffffffff811b708e>] keyctl_read_key+0xac/0xcf\n [<ffffffff811b7c07>] sys_keyctl+0x75/0xb6\n [<ffffffff81001f7b>] system_call_fastpath+0x16/0x1b\nCode: 75 1f 48 83 7b 28 00 75 18 c6 05 58 2b fb 00 01 be bb 00 00 00 48 c7 c7 76 1c 75 81 e8 13 c2 e9 ff 4c 8b b3 e0 00 00 00 4d 85 ed <41> 0f b7 5e 10 74 2d 4d 85 e4 74 28 e8 98 79 ee ff 49 39 dd 48\nRIP  [<ffffffff811b99f7>] user_read+0x4f/0x8f\n RSP <ffff88003bf47f08>\nCR2: 0000000000000010\n\nSigned-off-by: David Howells <dhowells@redhat.com>\nAcked-by: Jeff Layton <jlayton@redhat.com>\ncc: Wang Lei <wang840925@gmail.com>\nSigned-off-by: James Morris <jmorris@namei.org>",
        "before_after_code_files": [
          "net/dns_resolver/dns_key.c||net/dns_resolver/dns_key.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "net/dns_resolver/dns_key.c||net/dns_resolver/dns_key.c": [
          "File: net/dns_resolver/dns_key.c -> net/dns_resolver/dns_key.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "67:  size_t result_len = 0;",
          "68:  const char *data = _data, *end, *opt;",
          "73:  if (datalen <= 1 || !data || data[datalen - 1] != '\\0')",
          "74:   return -EINVAL;",
          "",
          "[Removed Lines]",
          "70:  kenter(\"%%%d,%s,'%s',%zu\",",
          "71:         key->serial, key->description, data, datalen);",
          "",
          "[Added Lines]",
          "70:  kenter(\"%%%d,%s,'%*.*s',%zu\",",
          "71:         key->serial, key->description,",
          "72:         (int)datalen, (int)datalen, data, datalen);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "217:   seq_printf(m, \": %u\", key->datalen);",
          "218: }",
          "220: struct key_type key_type_dns_resolver = {",
          "221:  .name  = \"dns_resolver\",",
          "222:  .instantiate = dns_resolver_instantiate,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "225: static long dns_resolver_read(const struct key *key,",
          "226:          char __user *buffer, size_t buflen)",
          "227: {",
          "228:  if (key->type_data.x[0])",
          "229:   return key->type_data.x[0];",
          "231:  return user_read(key, buffer, buflen);",
          "232: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "224:  .revoke  = user_revoke,",
          "225:  .destroy = user_destroy,",
          "226:  .describe = dns_resolver_describe,",
          "228: };",
          "230: static int __init init_dns_resolver(void)",
          "",
          "[Removed Lines]",
          "227:  .read  = user_read,",
          "",
          "[Added Lines]",
          "241:  .read  = dns_resolver_read,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d406577526a611e6be1f6b1cfeaf094dd95fa439",
      "candidate_info": {
        "commit_hash": "d406577526a611e6be1f6b1cfeaf094dd95fa439",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/d406577526a611e6be1f6b1cfeaf094dd95fa439",
        "files": [
          "drivers/watchdog/sbc_fitpc2_wdt.c"
        ],
        "message": "watchdog: sbc_fitpc2_wdt, fix crash on systems without DMI_BOARD_NAME\n\nSome systems don't provide DMI_BOARD_NAME in their DMI tables. Avoid\ncrash in such situations in fitpc2_wdt_init.\n\nThe fix is to check if the dmi_get_system_info return value is NULL.\n\nThe oops:\nBUG: unable to handle kernel NULL pointer dereference at           (null)\nIP: [<ffffffff81253ae6>] strstr+0x26/0xa0\nPGD 3966e067 PUD 39605067 PMD 0\nOops: 0000 [#1] SMP\nlast sysfs file: /sys/devices/system/cpu/cpu1/cache/index2/shared_cpu_map\nCPU 1\nModules linked in: ...\nPid: 1748, comm: modprobe Not tainted 2.6.37-22-default #1 /Bochs\nRIP: 0010:[<ffffffff81253ae6>]  [<ffffffff81253ae6>] strstr+0x26/0xa0\nRSP: 0018:ffff88003ad73f18  EFLAGS: 00010206\nRAX: 0000000000000000 RBX: 00000000ffffffed RCX: 00000000ffffffff\nRDX: ffffffffa003f4cc RSI: ffffffffa003f4c2 RDI: 0000000000000000\n...\nCR2: 0000000000000000 CR3: 000000003b7ac000 CR4: 00000000000006e0\n...\nProcess modprobe (pid: 1748, threadinfo ffff88003ad72000, task ffff88002e6365c0)\nStack: ...\nCall Trace:\n [<ffffffffa004201f>] fitpc2_wdt_init+0x1f/0x13c [sbc_fitpc2_wdt]\n [<ffffffff810002da>] do_one_initcall+0x3a/0x170\n...\nCode: f3 c3 0f 1f 00 80 3e 00 53 48 89 f8 74 1b 48 89 f2 0f 1f 40 00 48 83 c2 01 80 3a 00 75 f7 49 89 d0 48 89 f8 49 29 f0 75 02 5b c3 <80> 3f 00 74 0e 0f 1f 44 00 00 48 83 c0 01 80 38 00 75 f7 49 89\n\nSigned-off-by: Jiri Slaby <jslaby@suse.cz>\nSigned-off-by: Wim Van Sebroeck <wim@iguana.be>",
        "before_after_code_files": [
          "drivers/watchdog/sbc_fitpc2_wdt.c||drivers/watchdog/sbc_fitpc2_wdt.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "drivers/watchdog/sbc_fitpc2_wdt.c||drivers/watchdog/sbc_fitpc2_wdt.c": [
          "File: drivers/watchdog/sbc_fitpc2_wdt.c -> drivers/watchdog/sbc_fitpc2_wdt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "201: static int __init fitpc2_wdt_init(void)",
          "202: {",
          "203:  int err;",
          "206:   return -ENODEV;",
          "210:  if (!request_region(COMMAND_PORT, 1, WATCHDOG_NAME)) {",
          "211:   pr_err(\"I/O address 0x%04x already in use\\n\", COMMAND_PORT);",
          "",
          "[Removed Lines]",
          "205:  if (!strstr(dmi_get_system_info(DMI_BOARD_NAME), \"SBC-FITPC2\"))",
          "208:  pr_info(\"%s found\\n\", dmi_get_system_info(DMI_BOARD_NAME));",
          "",
          "[Added Lines]",
          "204:  const char *brd_name;",
          "206:  brd_name = dmi_get_system_info(DMI_BOARD_NAME);",
          "208:  if (!brd_name || !strstr(brd_name, \"SBC-FITPC2\"))",
          "211:  pr_info(\"%s found\\n\", brd_name);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "51b361b4009f4e19ae68d2bcbb35e254e91b6054",
      "candidate_info": {
        "commit_hash": "51b361b4009f4e19ae68d2bcbb35e254e91b6054",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/51b361b4009f4e19ae68d2bcbb35e254e91b6054",
        "files": [
          "arch/x86/mm/numa_emulation.c"
        ],
        "message": "x86-64, NUMA: Fix numa_emulation code with node0 without RAM\n\nOn one system that does not have RAM on node0.\n\nWhen numa_emulation is compiled in, and\n1. boot system without numa=fake...\n2. or boot system with numa=fake=128 to make emulation fail\n\nwill get:\n\n[    0.092026] ------------[ cut here ]------------\n[    0.096005] kernel BUG at arch/x86/mm/numa_emulation.c:439!\n[    0.096005] invalid opcode: 0000 [#1] SMP\n[    0.096005] last sysfs file:\n[    0.096005] CPU 0\n[    0.096005] Modules linked in:\n[    0.096005]\n[    0.096005] Pid: 0, comm: swapper Not tainted 2.6.38-rc6-tip-yh-03869-gcb0491d-dirty #684 Sun Microsystems     Sun Fire X4240/Sun Fire X4240\n[    0.096005] RIP: 0010:[<ffffffff81cdc65b>]  [<ffffffff81cdc65b>] numa_add_cpu+0x56/0xcf\n[    0.096005] RSP: 0000:ffffffff82437ed8  EFLAGS: 00010246\n...\n[    0.096005] Call Trace:\n[    0.096005]  [<ffffffff81cd7931>] identify_cpu+0x2d7/0x2df\n[    0.096005]  [<ffffffff827e54fa>] identify_boot_cpu+0x10/0x30\n[    0.096005]  [<ffffffff827e5704>] check_bugs+0x9/0x2d\n[    0.096005]  [<ffffffff827dceda>] start_kernel+0x3d7/0x3f1\n[    0.096005]  [<ffffffff827dc2cc>] x86_64_start_reservations+0x9c/0xa0\n[    0.096005]  [<ffffffff827dc4ad>] x86_64_start_kernel+0x1dd/0x1e8\n[    0.096005] Code: 74 06 48 8d 04 90 eb 0f 48 c7 c0 30 d9 00 00 48 03 04 d5 90 0f 60 82 8b 00 83 f8 ff 74 0d 0f a3 05 8b 7e 92 00 19 d2 85 d2 75 02 <0f> 0b 48 98 be 00 01 00 00 48 c7 c7 e0 44 60 82 44 8b 2c 85 e0\n[    0.096005] RIP  [<ffffffff81cdc65b>] numa_add_cpu+0x56/0xcf\n[    0.096005]  RSP <ffffffff82437ed8>\n[    0.096026] ---[ end trace a7919e7f17c0a725 ]---\n\nWe need to use early_cpu_to_node() directly, because numa_cpu_node()\nwill return node0 that is not onlined.\n\nSigned-off-by: Yinghai Lu <yinghai@kernel.org>\nSigned-off-by: Tejun Heo <tj@kernel.org>",
        "before_after_code_files": [
          "arch/x86/mm/numa_emulation.c||arch/x86/mm/numa_emulation.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "arch/x86/mm/numa_emulation.c||arch/x86/mm/numa_emulation.c": [
          "File: arch/x86/mm/numa_emulation.c -> arch/x86/mm/numa_emulation.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "417: {",
          "418:  int physnid, nid;",
          "423:  BUG_ON(nid == NUMA_NO_NODE || !node_online(nid));",
          "425:  physnid = emu_nid_to_phys[nid];",
          "",
          "[Removed Lines]",
          "420:  nid = numa_cpu_node(cpu);",
          "421:  if (nid == NUMA_NO_NODE)",
          "422:   nid = early_cpu_to_node(cpu);",
          "",
          "[Added Lines]",
          "420:  nid = early_cpu_to_node(cpu);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8f5bc2abfd4240b1f55425a3d36b6e6c391bc148",
      "candidate_info": {
        "commit_hash": "8f5bc2abfd4240b1f55425a3d36b6e6c391bc148",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/8f5bc2abfd4240b1f55425a3d36b6e6c391bc148",
        "files": [
          "drivers/cpufreq/cpufreq.c"
        ],
        "message": "[CPUFREQ] fix BUG on cpufreq policy init failure\n\ncpufreq_register_driver sets cpufreq_driver to a structure owned (and\nplaced) in the caller's memory. If cpufreq policy fails in its ->init\nfunction, sysdev_driver_register returns nonzero in\ncpufreq_register_driver. Now, cpufreq_register_driver returns an error\nwithout setting cpufreq_driver back to NULL.\n\nUsually cpufreq policy modules are unloaded because they propagate the\nerror to the module init function and return that.\n\nSo a later access to any member of cpufreq_driver causes bugs like:\nBUG: unable to handle kernel paging request at ffffffffa00270a0\nIP: [<ffffffff8145eca3>] cpufreq_cpu_get+0x53/0xe0\nPGD 1805067 PUD 1809063 PMD 1c3f90067 PTE 0\nOops: 0000 [#1] SMP\nlast sysfs file: /sys/devices/virtual/net/tun0/statistics/collisions\nCPU 0\nModules linked in: ...\nPid: 5677, comm: thunderbird-bin Tainted: G        W   2.6.38-rc4-mm1_64+ #1389 To be filled by O.E.M./To Be Filled By O.E.M.\nRIP: 0010:[<ffffffff8145eca3>]  [<ffffffff8145eca3>] cpufreq_cpu_get+0x53/0xe0\nRSP: 0018:ffff8801aec37d98  EFLAGS: 00010086\nRAX: 0000000000000202 RBX: 0000000000000000 RCX: 0000000000000001\nRDX: ffffffffa00270a0 RSI: 0000000000001000 RDI: ffffffff8199ece8\n...\nCall Trace:\n [<ffffffff8145f490>] cpufreq_quick_get+0x10/0x30\n [<ffffffff8103f12b>] show_cpuinfo+0x2ab/0x300\n [<ffffffff81136292>] seq_read+0xf2/0x3f0\n [<ffffffff8126c5d3>] ? __strncpy_from_user+0x33/0x60\n [<ffffffff8116850d>] proc_reg_read+0x6d/0xa0\n [<ffffffff81116e53>] vfs_read+0xc3/0x180\n [<ffffffff81116f5c>] sys_read+0x4c/0x90\n [<ffffffff81030dbb>] system_call_fastpath+0x16/0x1b\n...\n\nIt's all cause by weird fail path handling in cpufreq_register_driver.\nTo fix that, shuffle the code to do proper handling with gotos.\n\nSigned-off-by: Jiri Slaby <jslaby@suse.cz>\nSigned-off-by: Dave Jones <davej@redhat.com>",
        "before_after_code_files": [
          "drivers/cpufreq/cpufreq.c||drivers/cpufreq/cpufreq.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "drivers/cpufreq/cpufreq.c||drivers/cpufreq/cpufreq.c": [
          "File: drivers/cpufreq/cpufreq.c -> drivers/cpufreq/cpufreq.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1920:  ret = sysdev_driver_register(&cpu_sysdev_class,",
          "1921:      &cpufreq_sysdev_driver);",
          "1924:   int i;",
          "1925:   ret = -ENODEV;",
          "",
          "[Removed Lines]",
          "1923:  if ((!ret) && !(cpufreq_driver->flags & CPUFREQ_STICKY)) {",
          "",
          "[Added Lines]",
          "1922:  if (ret)",
          "1923:   goto err_null_driver;",
          "1925:  if (!(cpufreq_driver->flags & CPUFREQ_STICKY)) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1935:   if (ret) {",
          "1936:    dprintk(\"no CPU initialized for driver %s\\n\",",
          "1937:        driver_data->name);",
          "1944:   }",
          "1945:  }",
          "1953:  return ret;",
          "1954: }",
          "1955: EXPORT_SYMBOL_GPL(cpufreq_register_driver);",
          "",
          "[Removed Lines]",
          "1938:    sysdev_driver_unregister(&cpu_sysdev_class,",
          "1939:       &cpufreq_sysdev_driver);",
          "1941:    spin_lock_irqsave(&cpufreq_driver_lock, flags);",
          "1942:    cpufreq_driver = NULL;",
          "1943:    spin_unlock_irqrestore(&cpufreq_driver_lock, flags);",
          "1947:  if (!ret) {",
          "1948:   register_hotcpu_notifier(&cpufreq_cpu_notifier);",
          "1949:   dprintk(\"driver %s up and running\\n\", driver_data->name);",
          "1950:   cpufreq_debug_enable_ratelimit();",
          "1951:  }",
          "",
          "[Added Lines]",
          "1940:    goto err_sysdev_unreg;",
          "1944:  register_hotcpu_notifier(&cpufreq_cpu_notifier);",
          "1945:  dprintk(\"driver %s up and running\\n\", driver_data->name);",
          "1946:  cpufreq_debug_enable_ratelimit();",
          "1948:  return 0;",
          "1949: err_sysdev_unreg:",
          "1950:  sysdev_driver_unregister(&cpu_sysdev_class,",
          "1951:    &cpufreq_sysdev_driver);",
          "1952: err_null_driver:",
          "1953:  spin_lock_irqsave(&cpufreq_driver_lock, flags);",
          "1954:  cpufreq_driver = NULL;",
          "1955:  spin_unlock_irqrestore(&cpufreq_driver_lock, flags);",
          "",
          "---------------"
        ]
      }
    }
  ]
}