{
  "cve_id": "CVE-2017-6952",
  "cve_desc": "Integer overflow in the cs_winkernel_malloc function in winkernel_mm.c in Capstone 3.0.4 and earlier allows attackers to cause a denial of service (heap-based buffer overflow in a kernel driver) or possibly have unspecified other impact via a large value.",
  "repo": "aquynh/capstone",
  "patch_hash": "6fe86eef621b9849f51a5e1e5d73258a93440403",
  "patch_info": {
    "commit_hash": "6fe86eef621b9849f51a5e1e5d73258a93440403",
    "repo": "aquynh/capstone",
    "commit_url": "https://github.com/aquynh/capstone/commit/6fe86eef621b9849f51a5e1e5d73258a93440403",
    "files": [
      "windows/winkernel_mm.c"
    ],
    "message": "provide a validity check to prevent against Integer overflow conditions (#870)\n\n* provide a validity check to prevent against Integer overflow conditions\n\n* fix some style issues.",
    "before_after_code_files": [
      "windows/winkernel_mm.c||windows/winkernel_mm.c"
    ]
  },
  "patch_diff": {
    "windows/winkernel_mm.c||windows/winkernel_mm.c": [
      "File: windows/winkernel_mm.c -> windows/winkernel_mm.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "4: #include \"winkernel_mm.h\"",
      "5: #include <ntddk.h>",
      "8: static const ULONG CS_WINKERNEL_POOL_TAG = 'kwsC';",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6: #include <Ntintsafe.h>",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "35: #pragma prefast(suppress : 30030)  // Allocating executable POOL_TYPE memory",
      "38:  if (!block) {",
      "39:   return NULL;",
      "40:  }",
      "",
      "[Removed Lines]",
      "36:  CS_WINKERNEL_MEMBLOCK *block = (CS_WINKERNEL_MEMBLOCK *)ExAllocatePoolWithTag(",
      "37:    NonPagedPool, size + sizeof(CS_WINKERNEL_MEMBLOCK), CS_WINKERNEL_POOL_TAG);",
      "",
      "[Added Lines]",
      "37:  size_t number_of_bytes = 0;",
      "38:  CS_WINKERNEL_MEMBLOCK *block = NULL;",
      "42:  if (!NT_SUCCESS(RtlSizeTAdd(size, sizeof(CS_WINKERNEL_MEMBLOCK), &number_of_bytes))) {",
      "43:   return NULL;",
      "44:  }",
      "45:  block = (CS_WINKERNEL_MEMBLOCK *)ExAllocatePoolWithTag(",
      "46:    NonPagedPool, number_of_bytes, CS_WINKERNEL_POOL_TAG);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "375d7432c80675e6ce4ba46519776cab1018009b",
      "candidate_info": {
        "commit_hash": "375d7432c80675e6ce4ba46519776cab1018009b",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/375d7432c80675e6ce4ba46519776cab1018009b",
        "files": [
          "include/capstone.h",
          "tests/test_skipdata.c"
        ],
        "message": "Rename CS_OPT_NONE to CS_OPT_INVALID",
        "before_after_code_files": [
          "include/capstone.h||include/capstone.h",
          "tests/test_skipdata.c||tests/test_skipdata.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/capstone.h||include/capstone.h": [
          "File: include/capstone.h -> include/capstone.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "122: typedef enum cs_opt_type {",
          "124:  CS_OPT_SYNTAX, // Assembly output syntax",
          "125:  CS_OPT_DETAIL, // Break down instruction structure into details",
          "126:  CS_OPT_MODE, // Change engine's mode at run-time",
          "",
          "[Removed Lines]",
          "123:  CS_OPT_NONE = 0, // No opetion specified",
          "",
          "[Added Lines]",
          "123:  CS_OPT_INVALID = 0, // No opetion specified",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "173:  @return: return number of bytes to skip, or 0 to immediately stop disassembling.",
          "178: typedef struct cs_opt_skipdata {",
          "",
          "[Removed Lines]",
          "175: typedef size_t (CAPSTONE_API*cs_skipdata_cb_t)(const uint8_t *code, size_t code_size, size_t offset, void *user_data);",
          "",
          "[Added Lines]",
          "175: typedef size_t (*cs_skipdata_cb_t)(const uint8_t *code, size_t code_size, size_t offset, void *user_data);",
          "",
          "---------------"
        ],
        "tests/test_skipdata.c||tests/test_skipdata.c": [
          "File: tests/test_skipdata.c -> tests/test_skipdata.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "30:  printf(\"\\n\");",
          "31: }",
          "34: {",
          "36:  return 2;",
          "",
          "[Removed Lines]",
          "33: static size_t CAPSTONE_API mycallback(const uint8_t *buffer, size_t buffer_size, size_t offset, void *p)",
          "",
          "[Added Lines]",
          "33: static size_t mycallback(const uint8_t *buffer, size_t buffer_size, size_t offset, void *p)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "72:    (unsigned char*)X86_CODE32,",
          "73:    sizeof(X86_CODE32) - 1,",
          "74:    \"X86 32 (Intel syntax) - Skip data with custom mnemonic\",",
          "76:    CS_OPT_OFF,",
          "77:    CS_OPT_SKIPDATA_SETUP,",
          "78:    (size_t) &skipdata,",
          "",
          "[Removed Lines]",
          "75:    CS_OPT_NONE,",
          "",
          "[Added Lines]",
          "75:    CS_OPT_INVALID,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "83:    (unsigned char*)RANDOM_CODE,",
          "84:    sizeof(RANDOM_CODE) - 1,",
          "85:    \"Arm - Skip data with callback\",",
          "87:    CS_OPT_OFF,",
          "88:    CS_OPT_SKIPDATA_SETUP,",
          "89:    (size_t) &skipdata_callback,",
          "",
          "[Removed Lines]",
          "86:    CS_OPT_NONE,",
          "",
          "[Added Lines]",
          "86:    CS_OPT_INVALID,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f78a41eb0b6c8df618f77546724768fb1adb9d59",
      "candidate_info": {
        "commit_hash": "f78a41eb0b6c8df618f77546724768fb1adb9d59",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/f78a41eb0b6c8df618f77546724768fb1adb9d59",
        "files": [
          "bindings/ocaml/test_basic.ml"
        ],
        "message": "ocaml: recover test_basic.ml",
        "before_after_code_files": [
          "bindings/ocaml/test_basic.ml||bindings/ocaml/test_basic.ml"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "bindings/ocaml/test_basic.ml||bindings/ocaml/test_basic.ml": [
          "File: bindings/ocaml/test_basic.ml -> bindings/ocaml/test_basic.ml",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: (* Capstone Disassembly Engine",
          "4: open Printf",
          "5: open List",
          "6: open Capstone",
          "8: let _X86_CODE16 = \"\\x8d\\x4c\\x32\\x08\\x01\\xd8\\x81\\xc6\\x34\\x12\\x00\\x00\";;",
          "9: let _X86_CODE32 = \"\\x8d\\x4c\\x32\\x08\\x01\\xd8\\x81\\xc6\\x34\\x12\\x00\\x00\";;",
          "10: let _X86_CODE64 = \"\\x55\\x48\\x8b\\x05\\xb8\\x13\\x00\\x00\";;",
          "11: let _ARM_CODE = \"\\xED\\xFF\\xFF\\xEB\\x04\\xe0\\x2d\\xe5\\x00\\x00\\x00\\x00\\xe0\\x83\\x22\\xe5\\xf1\\x02\\x03\\x0e\\x00\\x00\\xa0\\xe3\\x02\\x30\\xc1\\xe7\\x00\\x00\\x53\\xe3\";;",
          "12: let _ARM_CODE2 = \"\\x10\\xf1\\x10\\xe7\\x11\\xf2\\x31\\xe7\\xdc\\xa1\\x2e\\xf3\\xe8\\x4e\\x62\\xf3\";;",
          "13: let _THUMB_CODE = \"\\x70\\x47\\xeb\\x46\\x83\\xb0\\xc9\\x68\";;",
          "14: let _THUMB_CODE2 = \"\\x4f\\xf0\\x00\\x01\\xbd\\xe8\\x00\\x88\";;",
          "15: let _MIPS_CODE = \"\\x0C\\x10\\x00\\x97\\x00\\x00\\x00\\x00\\x24\\x02\\x00\\x0c\\x8f\\xa2\\x00\\x00\\x34\\x21\\x34\\x56\";;",
          "16: let _MIPS_CODE2 = \"\\x56\\x34\\x21\\x34\\xc2\\x17\\x01\\x00\";;",
          "17: let _ARM64_CODE = \"\\x21\\x7c\\x02\\x9b\\x21\\x7c\\x00\\x53\\x00\\x40\\x21\\x4b\\xe1\\x0b\\x40\\xb9\";;",
          "18: let _PPC_CODE = \"\\x80\\x20\\x00\\x00\\x80\\x3f\\x00\\x00\\x10\\x43\\x23\\x0e\\xd0\\x44\\x00\\x80\\x4c\\x43\\x22\\x02\\x2d\\x03\\x00\\x80\\x7c\\x43\\x20\\x14\\x7c\\x43\\x20\\x93\\x4f\\x20\\x00\\x21\\x4c\\xc8\\x00\\x21\";;",
          "19: let _SPARC_CODE = \"\\x80\\xa0\\x40\\x02\\x85\\xc2\\x60\\x08\\x85\\xe8\\x20\\x01\\x81\\xe8\\x00\\x00\\x90\\x10\\x20\\x01\\xd5\\xf6\\x10\\x16\\x21\\x00\\x00\\x0a\\x86\\x00\\x40\\x02\\x01\\x00\\x00\\x00\\x12\\xbf\\xff\\xff\\x10\\xbf\\xff\\xff\\xa0\\x02\\x00\\x09\\x0d\\xbf\\xff\\xff\\xd4\\x20\\x60\\x00\\xd4\\x4e\\x00\\x16\\x2a\\xc2\\x80\\x03\";;",
          "20: let _SPARCV9_CODE = \"\\x81\\xa8\\x0a\\x24\\x89\\xa0\\x10\\x20\\x89\\xa0\\x1a\\x60\\x89\\xa0\\x00\\xe0\";;",
          "21: let _SYSZ_CODE = \"\\xed\\x00\\x00\\x00\\x00\\x1a\\x5a\\x0f\\x1f\\xff\\xc2\\x09\\x80\\x00\\x00\\x00\\x07\\xf7\\xeb\\x2a\\xff\\xff\\x7f\\x57\\xe3\\x01\\xff\\xff\\x7f\\x57\\xeb\\x00\\xf0\\x00\\x00\\x24\\xb2\\x4f\\x00\\x78\";;",
          "22: let _XCORE_CODE = \"\\xfe\\x0f\\xfe\\x17\\x13\\x17\\xc6\\xfe\\xec\\x17\\x97\\xf8\\xec\\x4f\\x1f\\xfd\\xec\\x37\\x07\\xf2\\x45\\x5b\\xf9\\xfa\\x02\\x06\\x1b\\x10\";;",
          "24: let all_tests = [",
          "25:  (CS_ARCH_X86, [CS_MODE_16], _X86_CODE16, \"X86 16bit (Intel syntax)\", 0L);",
          "26:  (CS_ARCH_X86, [CS_MODE_32], _X86_CODE32, \"X86 32bit (ATT syntax)\", _CS_OPT_SYNTAX_ATT);",
          "27:  (CS_ARCH_X86, [CS_MODE_32], _X86_CODE32, \"X86 32 (Intel syntax)\", 0L);",
          "28:  (CS_ARCH_X86, [CS_MODE_64], _X86_CODE64, \"X86 64 (Intel syntax)\", 0L);",
          "29:  (CS_ARCH_ARM, [CS_MODE_ARM], _ARM_CODE, \"ARM\", 0L);",
          "30:  (CS_ARCH_ARM, [CS_MODE_ARM], _ARM_CODE2, \"ARM: Cortex-A15 + NEON\", 0L);",
          "31:  (CS_ARCH_ARM, [CS_MODE_THUMB], _THUMB_CODE, \"THUMB\", 0L);",
          "32:  (CS_ARCH_ARM, [CS_MODE_THUMB], _THUMB_CODE2, \"THUMB-2\", 0L);",
          "33:  (CS_ARCH_ARM64, [CS_MODE_ARM], _ARM64_CODE, \"ARM-64\", 0L);",
          "34:  (CS_ARCH_MIPS, [CS_MODE_MIPS32; CS_MODE_BIG_ENDIAN], _MIPS_CODE, \"MIPS-32 (Big-endian)\", 0L);",
          "35:  (CS_ARCH_MIPS, [CS_MODE_MIPS64; CS_MODE_LITTLE_ENDIAN], _MIPS_CODE2, \"MIPS-64-EL (Little-endian)\", 0L);",
          "36:         (CS_ARCH_PPC, [CS_MODE_BIG_ENDIAN], _PPC_CODE, \"PPC-64\", 0L);",
          "37:         (CS_ARCH_PPC, [CS_MODE_BIG_ENDIAN], _PPC_CODE, \"PPC-64, print register with number only\", 0L);",
          "38:         (CS_ARCH_SPARC, [CS_MODE_BIG_ENDIAN], _SPARC_CODE, \"Sparc\", 0L);",
          "39:         (CS_ARCH_SPARC, [CS_MODE_BIG_ENDIAN; CS_MODE_V9], _SPARCV9_CODE, \"SparcV9\", 0L);",
          "40:         (CS_ARCH_SYSZ, [CS_MODE_LITTLE_ENDIAN], _SYSZ_CODE, \"SystemZ\", 0L);",
          "41:         (CS_ARCH_XCORE, [CS_MODE_LITTLE_ENDIAN], _XCORE_CODE, \"XCore\", 0L);",
          "42: ];;",
          "45: let print_insn insn =",
          "46:  printf \"0x%x\\t%s\\t%s\\n\" insn.address insn.mnemonic insn.op_str;;",
          "48: let print_arch x =",
          "49:  let (arch, mode, code, comment, syntax) = x in",
          "50:  let handle = cs_open arch mode in (",
          "51:   if syntax != 0L then (",
          "52:    let err = cs_option handle CS_OPT_SYNTAX syntax in",
          "53:    match err with",
          "54:    | _ -> ();",
          "55:   );",
          "56:   let insns = cs_disasm handle code 0x1000L 0L in (",
          "57:    printf \"*************\\n\";",
          "58:    printf \"Platform: %s\\n\" comment;",
          "59:    List.iter print_insn insns;",
          "60:   );",
          "61:   match cs_close handle with",
          "62:   | 0 -> ();",
          "63:   | _ -> printf \"Failed to close handle\";",
          "64:  );;",
          "67: List.iter print_arch all_tests;;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "394cdfc11ec6bb69a2604956ca3040351f22f7b9",
      "candidate_info": {
        "commit_hash": "394cdfc11ec6bb69a2604956ca3040351f22f7b9",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/394cdfc11ec6bb69a2604956ca3040351f22f7b9",
        "files": [
          "arch/AArch64/AArch64Disassembler.c",
          "arch/AArch64/AArch64InstPrinter.c",
          "arch/ARM/ARMInstPrinter.c"
        ],
        "message": "Resolve some casting issues with Visual Studio.",
        "before_after_code_files": [
          "arch/AArch64/AArch64Disassembler.c||arch/AArch64/AArch64Disassembler.c",
          "arch/AArch64/AArch64InstPrinter.c||arch/AArch64/AArch64InstPrinter.c",
          "arch/ARM/ARMInstPrinter.c||arch/ARM/ARMInstPrinter.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "arch/AArch64/AArch64Disassembler.c||arch/AArch64/AArch64Disassembler.c": [
          "File: arch/AArch64/AArch64Disassembler.c -> arch/AArch64/AArch64Disassembler.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1626: {",
          "1627:  uint32_t Rt = fieldFromInstruction(insn, 0, 5);",
          "1628:  uint32_t bit = fieldFromInstruction(insn, 31, 1) << 5;",
          "1631:  bit |= fieldFromInstruction(insn, 19, 5);",
          "",
          "[Removed Lines]",
          "1629:  int32_t dst = fieldFromInstruction(insn, 5, 14);",
          "",
          "[Added Lines]",
          "1629:  uint32_t dst = fieldFromInstruction(insn, 5, 14);",
          "",
          "---------------"
        ],
        "arch/AArch64/AArch64InstPrinter.c||arch/AArch64/AArch64InstPrinter.c": [
          "File: arch/AArch64/AArch64InstPrinter.c -> arch/AArch64/AArch64InstPrinter.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1195:  if (MI->csh->detail) {",
          "1196:   if (MI->csh->doing_mem) {",
          "1198:   } else {",
          "1199: #ifndef CAPSTONE_DIET",
          "1200:    uint8_t access;",
          "",
          "[Removed Lines]",
          "1197:    MI->flat_insn->detail->arm64.operands[MI->flat_insn->detail->arm64.op_count].mem.disp = (int)val;",
          "",
          "[Added Lines]",
          "1197:    MI->flat_insn->detail->arm64.operands[MI->flat_insn->detail->arm64.op_count].mem.disp = (int32_t)val;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1218:   printInt64Bang(O, val);",
          "1219:   if (MI->csh->detail) {",
          "1220:    if (MI->csh->doing_mem) {",
          "1222:    } else {",
          "1223: #ifndef CAPSTONE_DIET",
          "1224:     uint8_t access;",
          "",
          "[Removed Lines]",
          "1221:     MI->flat_insn->detail->arm64.operands[MI->flat_insn->detail->arm64.op_count].mem.disp = (int)val;",
          "",
          "[Added Lines]",
          "1221:     MI->flat_insn->detail->arm64.operands[MI->flat_insn->detail->arm64.op_count].mem.disp = (int32_t)val;",
          "",
          "---------------"
        ],
        "arch/ARM/ARMInstPrinter.c||arch/ARM/ARMInstPrinter.c": [
          "File: arch/ARM/ARMInstPrinter.c -> arch/ARM/ARMInstPrinter.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1272: static void printPostIdxImm8s4Operand(MCInst *MI, unsigned OpNum, SStream *O)",
          "1273: {",
          "1274:  MCOperand *MO = MCInst_getOperand(MI, OpNum);",
          "1277:  if (((Imm & 0xff) << 2) > HEX_THRESHOLD) {",
          "1278:   SStream_concat(O, \"#%s0x%x\", ((Imm & 256) ? \"\" : \"-\"), ((Imm & 0xff) << 2));",
          "",
          "[Removed Lines]",
          "1275:  unsigned Imm = (unsigned int)MCOperand_getImm(MO);",
          "",
          "[Added Lines]",
          "1275:  int Imm = (int)MCOperand_getImm(MO);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1281:  }",
          "1283:  if (MI->csh->detail) {",
          "1285:   MI->flat_insn->detail->arm.operands[MI->flat_insn->detail->arm.op_count].type = ARM_OP_IMM;",
          "1286:   MI->flat_insn->detail->arm.operands[MI->flat_insn->detail->arm.op_count].imm = v;",
          "1287:   MI->flat_insn->detail->arm.op_count++;",
          "",
          "[Removed Lines]",
          "1284:   int v = (Imm & 256) ? ((Imm & 0xff) << 2) : -((((int)Imm) & 0xff) << 2);",
          "",
          "[Added Lines]",
          "1284:   int v = (Imm & 256) ? ((Imm & 0xff) << 2) : -((Imm & 0xff) << 2);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5c6e430319d0f622fb555701903ac2e4a710b500",
      "candidate_info": {
        "commit_hash": "5c6e430319d0f622fb555701903ac2e4a710b500",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/5c6e430319d0f622fb555701903ac2e4a710b500",
        "files": [
          "include/capstone/platform.h"
        ],
        "message": "compile on MSVC 2010",
        "before_after_code_files": [
          "include/capstone/platform.h||include/capstone/platform.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/capstone/platform.h||include/capstone/platform.h": [
          "File: include/capstone/platform.h -> include/capstone/platform.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "37: #if defined(CAPSTONE_HAS_OSXKERNEL) || (defined(_MSC_VER) && (_MSC_VER <= 1700 || defined(_KERNEL_MODE)))",
          "42: typedef signed char  int8_t;",
          "43: typedef signed short int16_t;",
          "",
          "[Removed Lines]",
          "40: #if defined(_MSC_VER) && (_MSC_VER < 1600 || defined(_KERNEL_MODE))",
          "",
          "[Added Lines]",
          "40: #if defined(_MSC_VER) && (_MSC_VER <= 1600 || defined(_KERNEL_MODE))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "47: typedef unsigned int   uint32_t;",
          "48: typedef signed long long   int64_t;",
          "49: typedef unsigned long long uint64_t;",
          "51: #define INT8_MIN         (-127i8 - 1)",
          "52: #define INT16_MIN        (-32767i16 - 1)",
          "53: #define INT32_MIN        (-2147483647i32 - 1)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "50: #endif  // defined(_MSC_VER) && (_MSC_VER <= 1600 || defined(_KERNEL_MODE))",
          "52: #if defined(_MSC_VER) && (_MSC_VER < 1600 || defined(_KERNEL_MODE))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "60: #define UINT16_MAX       0xffffui16",
          "61: #define UINT32_MAX       0xffffffffui32",
          "62: #define UINT64_MAX       0xffffffffffffffffui64",
          "65: #ifdef CAPSTONE_HAS_OSXKERNEL",
          "",
          "[Removed Lines]",
          "63: #endif  // defined(_MSC_VER) && (_MSC_VER <= 1700 || defined(_KERNEL_MODE))",
          "",
          "[Added Lines]",
          "65: #endif  // defined(_MSC_VER) && (_MSC_VER < 1600 || defined(_KERNEL_MODE))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ef4a2dbccc2a2f1b3bba22cb96e9214c241747db",
      "candidate_info": {
        "commit_hash": "ef4a2dbccc2a2f1b3bba22cb96e9214c241747db",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/ef4a2dbccc2a2f1b3bba22cb96e9214c241747db",
        "files": [
          "tests/test_x86.c"
        ],
        "message": "tests: cleanup",
        "before_after_code_files": [
          "tests/test_x86.c||tests/test_x86.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "tests/test_x86.c||tests/test_x86.c": [
          "File: tests/test_x86.c -> tests/test_x86.c"
        ]
      }
    }
  ]
}