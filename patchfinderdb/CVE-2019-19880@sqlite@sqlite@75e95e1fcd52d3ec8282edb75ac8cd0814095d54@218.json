{
  "cve_id": "CVE-2019-19880",
  "cve_desc": "exprListAppendList in window.c in SQLite 3.30.1 allows attackers to trigger an invalid pointer dereference because constant integer values in ORDER BY clauses of window definitions are mishandled.",
  "repo": "sqlite/sqlite",
  "patch_hash": "75e95e1fcd52d3ec8282edb75ac8cd0814095d54",
  "patch_info": {
    "commit_hash": "75e95e1fcd52d3ec8282edb75ac8cd0814095d54",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/75e95e1fcd52d3ec8282edb75ac8cd0814095d54",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/window.c"
    ],
    "message": "When processing constant integer values in ORDER BY clauses of window definitions (see check-in [7e4809eadfe99ebf]) be sure to fully disable the constant value to avoid an invalid pointer dereference if the expression is ever duplicated. This fixes a crash report from Yongheng and Rui.\n\nFossilOrigin-Name: 1ca0bd982ab1183bbafce0d260e4dceda5eb766ed2e7793374a88d1ae0bdd2ca",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/window.c||src/window.c"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 8223e79f987feda5c8e51ec52cec6798cca16d070b10558939e2888ca1a25b8e",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/window.c||src/window.c": [
      "File: src/window.c -> src/window.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "895:     int nInit = pList ? pList->nExpr : 0;",
      "896:     for(i=0; i<pAppend->nExpr; i++){",
      "897:       Expr *pDup = sqlite3ExprDup(pParse->db, pAppend->a[i].pExpr, 0);",
      "898:       if( bIntToNull && pDup && pDup->op==TK_INTEGER ){",
      "899:         pDup->op = TK_NULL;",
      "900:         pDup->flags &= ~(EP_IntValue|EP_IsTrue|EP_IsFalse);",
      "901:       }",
      "902:       pList = sqlite3ExprListAppend(pParse, pList, pDup);",
      "903:       if( pList ) pList->a[nInit+i].sortFlags = pAppend->a[i].sortFlags;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "898:       assert( pDup==0 || !ExprHasProperty(pDup, EP_MemToken) );",
      "902:         pDup->u.zToken = 0;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "cde4bf8ba7fe7657ffef49725f921cd0ac152003",
      "candidate_info": {
        "commit_hash": "cde4bf8ba7fe7657ffef49725f921cd0ac152003",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/cde4bf8ba7fe7657ffef49725f921cd0ac152003",
        "files": [
          "ext/rtree/rtree.c",
          "ext/rtree/rtreefuzz001.test",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Improved detection of shadow table corruption in RTREE.\n\nFossilOrigin-Name: b39bf4356e6bcf1d8442721d6cbbfe06caba01325104fb469da8fe69e1f623a2",
        "before_after_code_files": [
          "ext/rtree/rtree.c||ext/rtree/rtree.c",
          "ext/rtree/rtreefuzz001.test||ext/rtree/rtreefuzz001.test",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/rtree/rtree.c||ext/rtree/rtree.c": [
          "File: ext/rtree/rtree.c -> ext/rtree/rtree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "635:   }",
          "636: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "642: static int nodeInParentChain(const RtreeNode *pNode, const RtreeNode *pParent){",
          "643:   do{",
          "644:     if( pNode==pParent ) return 1;",
          "645:     pParent = pParent->pParent;",
          "646:   }while( pParent );",
          "647:   return 0;",
          "648: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "653:   if( (pNode = nodeHashLookup(pRtree, iNode))!=0 ){",
          "654:     assert( !pParent || !pNode->pParent || pNode->pParent==pParent );",
          "655:     if( pParent && !pNode->pParent ){",
          "656:       pParent->nRef++;",
          "657:       pNode->pParent = pParent;",
          "658:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "668:       if( nodeInParentChain(pNode, pParent) ){",
          "669:         RTREE_IS_CORRUPT(pRtree);",
          "670:         return SQLITE_CORRUPT_VTAB;",
          "671:       }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3225:         rc = rc2;",
          "3226:       }",
          "3227:     }",
          "3229:       sqlite3_stmt *pUp = pRtree->pWriteAux;",
          "3230:       int jj;",
          "3231:       sqlite3_bind_int64(pUp, 1, *pRowid);",
          "",
          "[Removed Lines]",
          "3228:     if( pRtree->nAux ){",
          "",
          "[Added Lines]",
          "3244:     if( rc==SQLITE_OK && pRtree->nAux ){",
          "",
          "---------------"
        ],
        "ext/rtree/rtreefuzz001.test||ext/rtree/rtreefuzz001.test": [
          "File: ext/rtree/rtreefuzz001.test -> ext/rtree/rtreefuzz001.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "483: |   3728: 00 00 00 00 00 00 00 00 00 00 00 00 5e 04 07 17   ............^...",
          "484: |   3744: 1f 1f 01 81 0b 74 61 62 6c 65 74 31 5f 70 61 72   .....tablet1_par",
          "485: |   3760: 65 6e 74 74 31 5f 70 61 72 65 6e 74 04 43 52 45   entt1_parent.CRE",
          "488: |   3808: 45 47 45 52 20 50 52 49 4d 41 52 59 20 4b 45 59   EGER PRIMARY KEY",
          "489: |   3824: 2c 70 61 72 65 6e 74 6e 6f 64 65 29 51 03 06 17   ,parentnode)Q...",
          "490: |   3840: 1b 1b 01 7b 74 61 62 6c 65 74 31 5f 6e 6f 64 65   ....tablet1_node",
          "491: |   3856: 74 31 5f 6e 6f 64 65 03 43 52 45 41 54 45 20 54   t1_node.CREATE T",
          "493: |   3888: 6f 64 65 6e 6f 20 49 4e 54 45 47 45 52 20 50 52   odeno INTEGER PR",
          "495: |   3920: 02 07 17 1d 1d 01 81 0b 74 61 62 6c 65 74 31 5f   ........tablet1_",
          "496: |   3936: 72 6f 77 69 64 74 31 5f 72 6f 77 69 64 02 43 52   rowidt1_rowid.CR",
          "499: |   3984: 47 45 52 20 50 52 49 4d 41 52 59 20 4b 45 59 2c   GER PRIMARY KEY,",
          "500: |   4000: 6e 6f 64 65 6e 6f 2c 61 30 2c 61 31 29 51 01 07   nodeno,a0,a1)Q..",
          "501: |   4016: 17 11 11 08 81 0f 74 61 62 6c 65 74 31 74 31 43   ......tablet1t1C",
          "",
          "[Removed Lines]",
          "486: |   3776: 41 54 45 20 54 41 42 4c 45 20 22 74 31 5f 70 61   ATE TABLE \"t1_pa",
          "487: |   3792: 72 65 6e 74 22 28 6e 6f 64 65 6e 6f 20 49 4e 54   rent\"(nodeno INT",
          "492: |   3872: 41 42 4c 45 20 22 74 31 5f 6e 6f 64 65 22 28 6e   ABLE \"t1_node\"(n",
          "494: |   3904: 49 4d 41 52 59 20 4b 45 59 2c 64 61 74 61 29 5c   IMARY KEY,data)\\",
          "497: |   3952: 45 41 54 45 20 54 41 42 4c 45 20 22 74 31 5f 72   EATE TABLE \"t1_r",
          "498: |   3968: 6f 77 69 64 22 28 72 6f 77 69 64 20 49 4e 54 45   owid\"(rowid INTE",
          "",
          "[Added Lines]",
          "486: |   3776: 41 54 45 20 54 41 42 4c 45 20 22 74 31 5f 70 61   ATE TABLE .t1_pa",
          "487: |   3792: 72 65 6e 74 22 28 6e 6f 64 65 6e 6f 20 49 4e 54   rent.(nodeno INT",
          "492: |   3872: 41 42 4c 45 20 22 74 31 5f 6e 6f 64 65 22 28 6e   ABLE .t1_node.(n",
          "494: |   3904: 49 4d 41 52 59 20 4b 45 59 2c 64 61 74 61 29 5c   IMARY KEY,data).",
          "497: |   3952: 45 41 54 45 20 54 41 42 4c 45 20 22 74 31 5f 72   EATE TABLE .t1_r",
          "498: |   3968: 6f 77 69 64 22 28 72 6f 77 69 64 20 49 4e 54 45   owid.(rowid INTE",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "560:     INSERT INTO t1(id, x0,x1,y0,y1,label)",
          "561:       SELECT 1000+x+y*100, x, x+1, y, y+1, printf('box-%d,%d',x,y) FROM c1, c2;",
          "562:   }",
          "564: do_test rtreefuzz001-210 {",
          "565:   catchsql {",
          "566:     SELECT rtreecheck('t1');",
          "567:   }",
          "570: do_test rtreefuzz001-300 {",
          "571:   sqlite3 db {}",
          "",
          "[Removed Lines]",
          "563: } {1 {malformed database schema (?)}}",
          "568: } {1 {database disk image is malformed}}",
          "",
          "[Added Lines]",
          "563: } {1 {database disk image is malformed}}",
          "568: } {/1 .*corrupt.*/}",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "580: |   3728: 00 00 00 00 00 00 00 00 00 00 00 00 5e 04 07 17   ............^...",
          "581: |   3744: 1f 1f 01 81 0b 74 61 62 6c 65 74 31 5f 70 61 72   .....tablet1_par",
          "582: |   3760: 65 6e 74 74 31 5f 70 61 72 65 6e 74 04 43 52 45   entt1_parent.CRE",
          "585: |   3808: 45 47 45 52 20 50 52 49 4d 41 52 59 20 4b 45 59   EGER PRIMARY KEY",
          "586: |   3824: 2c 70 61 72 65 6e 74 6e 6f 64 65 29 51 03 06 17   ,parentnode)Q...",
          "587: |   3840: 1b 1b 01 7b 74 61 62 6c 65 74 31 5f 6e 6f 64 65   ....tablet1_node",
          "588: |   3856: 74 31 5f 6e 6f 64 65 03 43 52 45 41 54 45 20 54   t1_node.CREATE T",
          "590: |   3888: 6f 64 65 6e 6f 20 49 4e 54 45 47 45 52 20 50 52   odeno INTEGER PR",
          "592: |   3920: 02 07 17 1d 1d 01 81 0b 74 61 62 6c 65 74 31 5f   ........tablet1_",
          "593: |   3936: 72 6f 77 69 64 74 31 5f 72 6f 77 69 64 02 43 52   rowidt1_rowid.CR",
          "596: |   3984: 47 45 72 20 50 52 49 4d 41 52 59 20 4b 45 59 2c   GEr PRIMARY KEY,",
          "597: |   4000: 6e 6f 64 65 6e 6f 2c 61 30 2c 61 31 29 51 01 07   nodeno,a0,a1)Q..",
          "598: |   4016: 17 11 11 08 81 0f 74 61 62 6c 65 74 31 74 31 43   ......tablet1t1C",
          "",
          "[Removed Lines]",
          "583: |   3776: 41 54 45 20 54 41 42 4c 45 20 22 74 31 5f 70 61   ATE TABLE \"t1_pa",
          "584: |   3792: 72 65 6e 74 22 28 6e 6f 64 65 6e 6f 20 49 4e 54   rent\"(nodeno INT",
          "589: |   3872: 41 42 4c 45 20 22 74 31 5f 6e 6f 64 65 22 28 6e   ABLE \"t1_node\"(n",
          "591: |   3904: 49 4d 41 52 59 20 4b 45 59 2c 64 61 74 61 29 5c   IMARY KEY,data)\\",
          "594: |   3952: 45 41 54 45 20 54 41 42 4c 45 20 22 74 31 5f 72   EATE TABLE \"t1_r",
          "595: |   3968: 6f 77 69 64 22 28 72 6f 77 69 64 20 49 4e 54 45   owid\"(rowid INTE",
          "",
          "[Added Lines]",
          "583: |   3776: 41 54 45 20 54 41 42 4c 45 20 22 74 31 5f 70 61   ATE TABLE .t1_pa",
          "584: |   3792: 72 65 6e 74 22 28 6e 6f 64 65 6e 6f 20 49 4e 54   rent.(nodeno INT",
          "589: |   3872: 41 42 4c 45 20 22 74 31 5f 6e 6f 64 65 22 28 6e   ABLE .t1_node.(n",
          "591: |   3904: 49 4d 41 52 59 20 4b 45 59 2c 64 61 74 61 29 5c   IMARY KEY,data).",
          "594: |   3952: 45 41 54 45 20 54 41 42 4c 45 20 22 74 31 5f 72   EATE TABLE .t1_r",
          "595: |   3968: 6f 77 69 64 22 28 72 6f 77 69 64 20 49 4e 54 45   owid.(rowid INTE",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "648: |   3200: 50 f0 70 50 00 92 10 07 26 96 76 87 42 06 56 46   P.pP....&.v.B.VF",
          "649: |   3216: 76 50 e0 60 50 00 91 f0 06 c6 56 67 42 06 56 46   vP.`P.....VgB.VF",
          "650: |   3232: 76 50 b0 50 50 00 91 90 06 36 56 e7 46 57 21 70   vP.PP....6V.FW!p",
          "652: |   3264: 42 06 36 f7 26 e6 57 21 70 30 50 00 93 10 06 c6   B.6.&.W!p0P.....",
          "655: |   3312: 60 00 00 c4 24 c0 00 04 2c 80 00 00 00 00 00 04   `...$...,.......",
          "656: |   3328: 2c 80 00 00 00 00 00 00 00 00 00 d0 00 00 00 04   ,...............",
          "657: |   3344: 2c 80 00 00 00 00 00 04 24 80 00 00 00 00 00 00   ,.......$.......",
          "",
          "[Removed Lines]",
          "651: |   3248: 40 50 00 93 10 07 57 07 06 57 22 d7 26 96 76 87   @P....W..W\".&.v.",
          "653: |   3280: f7 76 57 22 d7 26 96 76 87 42 06 36 f7 26 e6 57   .vW\".&.v.B.6.&.W",
          "654: |   3296: 21 60 20 50 00 92 f0 07 57 07 06 57 22 d6 c6 56   !` P....W..W\"..V",
          "",
          "[Added Lines]",
          "651: |   3248: 40 50 00 93 10 07 57 07 06 57 22 d7 26 96 76 87   @P....W..W..&.v.",
          "653: |   3280: f7 76 57 22 d7 26 96 76 87 42 06 36 f7 26 e6 57   .vW..&.v.B.6.&.W",
          "654: |   3296: 21 60 20 50 00 92 f0 07 57 07 06 57 22 d6 c6 56   !` P....W..W...V",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "664:   catchsql {",
          "665:     UPDATE t1 SET label='x';",
          "666:   }",
          "668: do_test rtreefuzz001-310 {",
          "669:   catchsql {",
          "670:     SELECT rtreecheck('t1');",
          "671:   }",
          "675: finish_test",
          "",
          "[Removed Lines]",
          "667: } {1 {malformed database schema (?)}}",
          "672: } {1 {database disk image is malformed}}",
          "",
          "[Added Lines]",
          "667: } {1 {rtree constraint failed: t1.(y0<=y1)}}",
          "672: } {/1 .*corrupt.*/}",
          "674: do_test rtreefuzz001-400 {",
          "675:   sqlite3 db {}",
          "676:   db deserialize [decode_hexdb {",
          "677: | size 16384 pagesize 4096 filename c7.db",
          "678: | page 1 offset 0",
          "679: |      0: 53 51 4c 69 74 65 20 66 6f 72 6d 61 74 20 33 00   SQLite format 3.",
          "680: |     16: 10 00 01 01 00 40 20 20 00 00 00 00 00 00 00 04   .....@  ........",
          "681: |     32: 00 00 00 00 01 00 00 00 00 00 00 04 00 00 00 04   ................",
          "682: |     48: 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00   ................",
          "683: |     96: 00 00 00 00 0d 00 00 00 04 0e 9c 00 0f ad 0f 4f   ...............O",
          "684: |    112: 0e fc 0e 9c 00 00 00 00 00 00 00 00 00 00 00 00   ................",
          "685: |   3728: 00 00 00 00 00 00 00 00 00 00 00 00 5e 04 07 17   ............^...",
          "686: |   3744: 1f 1f 01 81 0b 74 61 62 6c 65 74 31 5f 70 61 72   .....tablet1_par",
          "687: |   3760: 65 6e 74 74 31 5f 70 61 72 65 6e 74 04 43 52 45   entt1_parent.CRE",
          "688: |   3776: 41 54 45 20 54 41 42 4c 45 20 22 74 31 5f 70 61   ATE TABLE .t1_pa",
          "689: |   3792: 72 65 6e 74 22 28 6e 6f 64 65 6e 6f 20 49 4e 54   rent.(nodeno INT",
          "690: |   3808: 45 47 45 52 20 50 52 49 4d 41 52 59 20 4b 45 59   EGER PRIMARY KEY",
          "691: |   3824: 2c 70 61 72 65 6e 74 6e 6f 64 65 29 51 03 06 17   ,parentnode)Q...",
          "692: |   3840: 1b 1b 01 7b 74 61 62 6c 65 74 31 5f 6e 6f 64 65   ....tablet1_node",
          "693: |   3856: 74 31 5f 6e 6f 64 65 03 43 52 45 41 54 45 20 54   t1_node.CREATE T",
          "694: |   3872: 41 42 4c 45 20 22 74 31 5f 6e 6f 64 65 22 28 6e   ABLE .t1_node.(n",
          "695: |   3888: 6f 64 65 6e 6f 20 49 4e 54 45 47 45 52 20 50 52   odeno INTEGER PR",
          "696: |   3904: 49 4d 41 52 59 20 4b 45 59 2c 64 61 74 61 29 5c   IMARY KEY,data).",
          "697: |   3920: 02 07 17 1d 1d 01 81 0b 74 61 62 6c 65 74 31 5f   ........tablet1_",
          "698: |   3936: 72 6f 77 69 64 74 31 5f 72 6f 77 69 64 02 43 52   rowidt1_rowid.CR",
          "699: |   3952: 45 41 54 45 20 54 41 42 4c 45 20 22 74 31 5f 72   EATE TABLE .t1_r",
          "700: |   3968: 6f 77 69 64 22 28 72 6f 77 69 64 20 49 4e 54 45   owid.(rowid INTE",
          "701: |   3984: 47 45 52 20 50 52 49 4d 41 52 59 20 4b 45 59 2c   GER PRIMARY KEY,",
          "702: |   4000: 6e 6f 64 65 6e 6f 2c 61 30 2c 61 31 29 51 01 07   nodeno,a0,a1)Q..",
          "703: |   4016: 17 11 11 08 81 0f 74 61 62 6c 65 74 31 74 31 43   ......tablet1t1C",
          "704: |   4032: 52 45 41 54 45 20 56 49 52 54 55 41 4c 20 54 41   REATE VIRTUAL TA",
          "705: |   4048: 42 4c 45 20 74 31 20 55 53 49 4e 47 20 72 74 72   BLE t1 USING rtr",
          "706: |   4064: 65 65 28 69 64 2c 78 30 2c 78 31 2c 79 30 2c 79   ee(id,x0,x1,y0,y",
          "707: |   4080: 31 2c 2b 6c 61 62 65 6c 2c 2b 6f 74 68 65 72 29   1,+label,+other)",
          "708: | page 2 offset 4096",
          "709: |      0: 0d 00 00 00 0e 0e f7 00 0f e8 0f d0 0f b7 0f 9e   ................",
          "710: |     16: 0f 91 0f 81 0f 70 0f 5e 0f 4f 0f 39 0f 29 0f 18   .....p.^.O.9.)..",
          "711: |     32: 0f 06 0e f7 00 00 00 00 00 00 00 00 00 00 00 00   ................",
          "712: |   3824: 00 00 00 00 00 00 00 0d 0e 05 00 09 1d 00 74 6f   ..............to",
          "713: |   3840: 70 20 68 61 6c 66 10 0d 05 00 09 23 00 62 6f 74   p half.....#.bot",
          "714: |   3856: 74 6f 6d 20 68 61 6c 66 0f 0c 05 00 09 21 00 72   tom half.....!.r",
          "715: |   3872: 69 67 68 74 20 68 61 6c 66 0e 0b 05 00 09 1f 00   ight half.......",
          "716: |   3888: 6c 65 66 74 20 68 61 6c 66 14 0a 05 00 09 2b 00   left half.....+.",
          "717: |   3904: 74 68 65 20 77 68 6f 6c 65 20 74 68 69 6e 67 0d   the whole thing.",
          "718: |   3920: 09 05 00 09 1d 00 74 6f 70 20 65 64 67 65 10 08   ......top edge..",
          "719: |   3936: 05 00 09 23 00 62 6f 74 74 6f 6d 20 65 64 67 65   ...#.bottom edge",
          "720: |   3952: 0f 07 05 00 09 21 00 72 69 67 68 74 20 65 64 67   .....!.right edg",
          "721: |   3968: 65 0e 06 05 00 09 1f 00 6c 65 66 74 20 65 64 67   e.......left edg",
          "722: |   3984: 65 0b 05 05 00 09 19 00 23 65 6e 74 65 72 17 04   e.......#enter..",
          "723: |   4000: 05 00 09 31 00 75 70 70 65 72 2d 72 69 67 68 74   ...1.upper-right",
          "724: |   4016: 20 63 6f 72 6e 65 72 17 03 05 00 09 31 00 6c 6f    corner.....1.lo",
          "725: |   4032: 77 65 72 2d 72 69 67 68 74 20 63 6f 72 6e 65 72   wer-right corner",
          "726: |   4048: 16 02 05 00 09 2f 00 75 70 70 65 72 2d 6c 65 66   ...../.upper-lef",
          "727: |   4064: 74 20 63 6f 72 6e 65 72 16 01 05 00 09 2f 00 6c   t corner...../.l",
          "728: |   4080: 6f 77 65 72 2d 6c 65 66 74 20 63 6f 72 6e 65 72   ower-left corner",
          "729: | page 3 offset 8192",
          "730: |      0: 0d 00 00 00 02 0b 2d 00 0b 2d 00 00 00 00 00 00   ......-..-......",
          "731: |   2848: 00 00 00 00 00 00 00 00 00 00 00 00 00 89 50 01   ..............P.",
          "732: |   2864: 04 00 93 24 00 00 00 00 00 00 00 00 08 00 00 00   ...$............",
          "733: |   2880: 00 42 c8 00 00 00 00 00 00 40 a0 00 00 00 00 00   .B.......@......",
          "734: |   2896: 00 00 00 00 42 c8 00 00 00 00 00 00 00 00 00 07   ....B...........",
          "735: |   2912: 42 be 00 00 42 c8 00 00 00 00 00 00 42 c8 00 00   B...B.......B...",
          "736: |   2928: 00 00 00 00 00 00 00 08 00 00 00 00 42 c8 00 00   ............B...",
          "737: |   2944: 00 00 00 00 40 a0 00 00 00 00 00 00 00 00 00 09   ....@...........",
          "738: |   2960: 00 00 00 00 42 c8 00 00 42 be 00 00 42 c8 00 00   ....B...B...B...",
          "739: |   2976: 00 00 00 00 00 00 00 0a 00 00 00 00 42 c8 00 00   ............B...",
          "740: |   2992: 00 00 00 00 42 c8 00 00 00 00 00 00 00 00 00 0b   ....B...........",
          "741: |   3008: 00 00 00 00 42 48 00 00 00 00 00 04 2c 80 00 00   ....BH......,...",
          "742: |   3024: 00 00 00 00 00 00 00 c4 00 00 00 00 00 42 c8 00   .............B..",
          "743: |   3040: 00 00 00 00 00 00 00 00 07 42 be 00 00 42 c8 00   .........B...B..",
          "744: |   3056: 00 00 00 00 00 42 c8 00 00 00 00 00 00 00 00 00   .....B..........",
          "745: |   3072: 08 00 00 00 00 42 c8 00 00 00 00 00 00 40 a0 00   .....B.......@..",
          "746: |   3088: 00 00 00 00 00 00 00 00 09 00 00 00 00 42 c8 00   .............B..",
          "747: |   3104: 00 42 be 00 00 42 c8 00 00 00 00 00 00 00 00 00   .B...B..........",
          "748: |   3120: 0a 00 00 00 00 42 c8 00 00 00 00 00 00 42 c8 00   .....B.......B..",
          "749: |   3136: 00 00 00 00 00 00 00 00 0b 00 00 00 00 42 48 00   .............BH.",
          "750: |   3152: 00 00 00 00 04 2c 80 00 00 00 00 00 00 00 00 00   .....,..........",
          "751: |   3168: c4 24 c0 00 04 2c 80 00 00 00 00 00 04 2c 80 00   .$...,.......,..",
          "752: |   3184: 00 00 00 00 00 00 00 00 d0 00 00 00 04 2c 80 00   .............,..",
          "753: |   3200: 00 00 00 00 04 24 80 00 00 00 00 00 00 00 00 00   .....$..........",
          "754: |   3216: e0 00 00 00 04 2c 80 00 04 24 c0 00 04 2c 00 00   .....,...$...,..",
          "755: | page 4 offset 12288",
          "756: |      0: 0d 00 00 00 00 10 00 00 00 00 00 00 0e 00 00 00   ................",
          "757: |     16: 00 42 c8 00 00 42 4c 00 00 42 c8 00 00 00 00 00   .B...BL..B......",
          "758: |     32: 00 00 00 0a 00 00 00 00 42 c8 00 00 00 00 00 00   ........B.......",
          "759: |     48: 42 c8 00 00 00 00 00 00 00 00 00 0b 00 00 00 00   B...............",
          "760: |     64: 42 48 00 00 00 00 00 04 2c 80 00 00 00 00 00 00   BH......,.......",
          "761: |     80: 00 00 00 c4 24 c0 00 04 2c 80 00 00 00 00 00 04   ....$...,.......",
          "762: |     96: 2c 80 00 00 00 00 00 00 00 00 00 d0 00 00 00 04   ,...............",
          "763: |    112: 2c 80 00 00 00 00 00 04 24 80 00 00 00 00 00 00   ,.......$.......",
          "764: |    128: 00 00 00 e0 00 00 00 04 2c 80 00 04 24 c0 00 04   ........,...$...",
          "765: |    144: 2c 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00   ,...............",
          "766: | end c7.db",
          "767:   }]",
          "768:   catchsql {",
          "769:     WITH RECURSIVE",
          "770:       c1(x) AS (VALUES(0) UNION ALL SELECT x+1 FROM c1 WHERE x<8),",
          "771:       c2(y) AS (VALUES(0) UNION ALL SELECT y+1 FROM c2 WHERE y<5)",
          "772:     INSERT INTO t1(id, x0,x1,y0,y1,label)",
          "773:       SELECT 1000+x+y*100, x, x+1, y, y+1, printf('box-%d,%d',x,y) FROM c1, c2;",
          "774:   }",
          "775: } {1 {database disk image is malformed}}",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: da587d18575ac06a6b65fec1d106f0cc65bc10f493ca6c6b99117a2162d15a52",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4067ce7d540454978a970abb2042fc143af0397e",
      "candidate_info": {
        "commit_hash": "4067ce7d540454978a970abb2042fc143af0397e",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/4067ce7d540454978a970abb2042fc143af0397e",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbeaux.c"
        ],
        "message": "When parsing a corrupt record using sqlite3VdbeRecordUnpack(), make sure that the resulting UnpackedRecord object is completely initialized, to avoid (harmless) MSAN warnings.\n\nFossilOrigin-Name: ddc3697efd61830fad55c6bf7f9115f4a7f53e08838eba5a82e1406c7a721665",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbeaux.c||src/vdbeaux.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: c93c6b45a317c40eb5c0abb6620d21f5821a601632c791e11e5ce62e039eccda",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbeaux.c||src/vdbeaux.c": [
          "File: src/vdbeaux.c -> src/vdbeaux.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3818:     pMem++;",
          "3819:     if( (++u)>=p->nField ) break;",
          "3820:   }",
          "3821:   assert( u<=pKeyInfo->nKeyField + 1 );",
          "3822:   p->nField = u;",
          "3823: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3821:   if( d>nKey && u ){",
          "3822:     assert( CORRUPT_DB );",
          "3826:     sqlite3VdbeMemSetNull(pMem-1);",
          "3827:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1c960269dd94cf6898f330c22ce0005ef370b3f6",
      "candidate_info": {
        "commit_hash": "1c960269dd94cf6898f330c22ce0005ef370b3f6",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/1c960269dd94cf6898f330c22ce0005ef370b3f6",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c",
          "test/fuzzdata7.db"
        ],
        "message": "Fix a faulty assert() statement in balance_nonroot() - the assert() should use get2byteNotZero() instead of get2byte() for the corner case where the number cells is zero on a 65536-byte page.\n\nFossilOrigin-Name: bcbe7d96df3c9515f679ccf671ca9ba89d081b53501495d4218eb5126196838b",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 919fec91dac4cb0d5f67404d4f47a65f353d752f5da0aa7b071bf3caf19e0522",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "8166:     rc = defragmentPage(apNew[0], -1);",
          "8167:     testcase( rc!=SQLITE_OK );",
          "8168:     assert( apNew[0]->nFree ==",
          "8170:       || rc!=SQLITE_OK",
          "8171:     );",
          "8172:     copyNodeContent(apNew[0], pParent, &rc);",
          "",
          "[Removed Lines]",
          "8169:         (get2byte(&apNew[0]->aData[5])-apNew[0]->cellOffset-apNew[0]->nCell*2)",
          "",
          "[Added Lines]",
          "8169:         (get2byteNotZero(&apNew[0]->aData[5]) - apNew[0]->cellOffset",
          "8170:           - apNew[0]->nCell*2)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8fe25c64f13a8e5d3ca44d003441a7353cd6aca2",
      "candidate_info": {
        "commit_hash": "8fe25c64f13a8e5d3ca44d003441a7353cd6aca2",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/8fe25c64f13a8e5d3ca44d003441a7353cd6aca2",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c",
          "test/createtab.test"
        ],
        "message": "Early detection of too many columns in an index avoid a possible 16-bit signed integer overflow.\n\nFossilOrigin-Name: 8af0caeb6d1e55f66ad2f12af94845dccfe1d0420faf326f5917fc07f8aa6050",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c",
          "test/createtab.test||test/createtab.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: d03b611302f68483770d49b113b4ed685ba03526d2007647c306f8ec7ae697d2",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3265:     sqlite3ExprListSetSortOrder(pList, sortOrder);",
          "3266:   }else{",
          "3267:     sqlite3ExprListCheckLength(pParse, pList, \"index\");",
          "3268:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3268:     if( pParse->nErr ) goto exit_create_index;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3284:   nName = sqlite3Strlen30(zName);",
          "3285:   nExtraCol = pPk ? pPk->nKeyCol : 1;",
          "3286:   pIndex = sqlite3AllocateIndexObject(db, pList->nExpr + nExtraCol,",
          "3287:                                       nName + nExtra + 1, &zExtra);",
          "3288:   if( db->mallocFailed ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3287:   assert( pList->nExpr + nExtraCol <= 32767 /* Fits in i16 */ );",
          "",
          "---------------"
        ],
        "test/createtab.test||test/createtab.test": [
          "File: test/createtab.test -> test/createtab.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: # focus of this file is testing that it is OK to create new tables",
          "13: # and indices while creating existing tables and indices.",
          "14: #",
          "17: set testdir [file dirname $argv0]",
          "18: source $testdir/tester.tcl",
          "",
          "[Removed Lines]",
          "15: # $Id: createtab.test,v 1.3 2007/09/12 17:01:45 danielk1977 Exp $",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "142:   integrity_check createtab-$av.40",
          "144: }",
          "146: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "145: # 2019-03-31 Ensure that a proper error is returned for an index",
          "146: # with too many columns.",
          "147: #",
          "148: do_test createtab-3.1 {",
          "149:   db eval {DROP TABLE IF EXISTS t1;}",
          "150:   set sql \"CREATE TABLE t1(x,UNIQUE(x[string repeat ,x 100000]))\"",
          "151:   catchsql $sql",
          "152: } {1 {too many columns in index}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "54975cdff9d5e7e4490fbf6012d82143136b1e0b",
      "candidate_info": {
        "commit_hash": "54975cdff9d5e7e4490fbf6012d82143136b1e0b",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/54975cdff9d5e7e4490fbf6012d82143136b1e0b",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/window.c"
        ],
        "message": "Fix other \"ROWS BETWEEN\" cases on this branch.\n\nFossilOrigin-Name: a5f68f66472610b5beb4fe28669fbbfe83a32742be73cecad9b2ae28f8a17b30",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/window.c||src/window.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/window.c||src/window.c"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/window.c||src/window.c"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 093d2b25f1b656bba57d665aac68109436861b157a5769432b612176dae3f6eb",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1542:   return regArg;",
          "1543: }",
          "",
          "[Removed Lines]",
          "1666: static void windowCodeRowExprStep(",
          "1667:   Parse *pParse,",
          "1668:   Select *p,",
          "1669:   WhereInfo *pWInfo,",
          "1670:   int regGosub,",
          "1671:   int addrGosub",
          "1672: ){",
          "1673:   Window *pMWin = p->pWin;",
          "1674:   Vdbe *v = sqlite3GetVdbe(pParse);",
          "1679:   int regArg;",
          "1680:   int addr;",
          "1681:   int csrStart = pParse->nTab++;",
          "1682:   int csrEnd = pParse->nTab++;",
          "1685:   int addrGoto;",
          "1686:   int addrTop;",
          "1687:   int addrIfPos1 = 0;",
          "1688:   int addrIfPos2 = 0;",
          "1689:   int regSize = 0;",
          "1691:   assert( pMWin->eStart==TK_PRECEDING",
          "1692:        || pMWin->eStart==TK_CURRENT",
          "1693:        || pMWin->eStart==TK_FOLLOWING",
          "1694:        || pMWin->eStart==TK_UNBOUNDED",
          "1695:   );",
          "1696:   assert( pMWin->eEnd==TK_FOLLOWING",
          "1697:        || pMWin->eEnd==TK_CURRENT",
          "1698:        || pMWin->eEnd==TK_UNBOUNDED",
          "1699:        || pMWin->eEnd==TK_PRECEDING",
          "1700:   );",
          "1703:   regFlushPart = ++pParse->nMem;",
          "1704:   lblFlushPart = sqlite3VdbeMakeLabel(pParse);",
          "1705:   lblFlushDone = sqlite3VdbeMakeLabel(pParse);",
          "1707:   regStart = ++pParse->nMem;",
          "1708:   regEnd = ++pParse->nMem;",
          "1710:   windowPartitionCache(pParse, p, pWInfo, regFlushPart, lblFlushPart, &regSize);",
          "1712:   addrGoto = sqlite3VdbeAddOp0(v, OP_Goto);",
          "1715:   sqlite3VdbeResolveLabel(v, lblFlushPart);",
          "1716:   sqlite3VdbeAddOp2(v, OP_Once, 0, sqlite3VdbeCurrentAddr(v)+3);",
          "1717:   VdbeCoverage(v);",
          "1718:   VdbeComment((v, \"Flush_partition subroutine\"));",
          "1719:   sqlite3VdbeAddOp2(v, OP_OpenDup, csrStart, pMWin->iEphCsr);",
          "1720:   sqlite3VdbeAddOp2(v, OP_OpenDup, csrEnd, pMWin->iEphCsr);",
          "1724:   if( pMWin->pStart ){",
          "1725:     sqlite3ExprCode(pParse, pMWin->pStart, regStart);",
          "1726:     windowCheckIntValue(pParse, regStart, 0);",
          "1727:   }",
          "1728:   if( pMWin->pEnd ){",
          "1729:     sqlite3ExprCode(pParse, pMWin->pEnd, regEnd);",
          "1730:     windowCheckIntValue(pParse, regEnd, 1);",
          "1731:   }",
          "1741:   if( pMWin->pEnd && pMWin->eStart==TK_FOLLOWING ){",
          "1742:     assert( pMWin->pStart!=0 );",
          "1743:     assert( pMWin->eEnd==TK_FOLLOWING );",
          "1744:     sqlite3VdbeAddOp3(v, OP_Ge, regStart, sqlite3VdbeCurrentAddr(v)+2, regEnd);",
          "1745:     VdbeCoverageNeverNull(v);",
          "1746:     sqlite3VdbeAddOp2(v, OP_Copy, regSize, regStart);",
          "1747:     sqlite3VdbeAddOp3(v, OP_Subtract, regStart, regEnd, regEnd);",
          "1748:   }",
          "1750:   if( pMWin->pStart && pMWin->eEnd==TK_PRECEDING ){",
          "1751:     assert( pMWin->pEnd!=0 );",
          "1752:     assert( pMWin->eStart==TK_PRECEDING );",
          "1753:     sqlite3VdbeAddOp3(v, OP_Le, regStart, sqlite3VdbeCurrentAddr(v)+3, regEnd);",
          "1754:     VdbeCoverageNeverNull(v);",
          "1755:     sqlite3VdbeAddOp2(v, OP_Copy, regSize, regStart);",
          "1756:     sqlite3VdbeAddOp2(v, OP_Copy, regSize, regEnd);",
          "1757:   }",
          "1760:   regArg = windowInitAccum(pParse, pMWin);",
          "1762:   sqlite3VdbeAddOp2(v, OP_Rewind, pMWin->iEphCsr, lblFlushDone);",
          "1763:   VdbeCoverage(v);",
          "1764:   sqlite3VdbeAddOp2(v, OP_Rewind, csrStart, lblFlushDone);",
          "1765:   VdbeCoverageNeverTaken(v);",
          "1766:   sqlite3VdbeChangeP5(v, 1);",
          "1767:   sqlite3VdbeAddOp2(v, OP_Rewind, csrEnd, lblFlushDone);",
          "1768:   VdbeCoverageNeverTaken(v);",
          "1769:   sqlite3VdbeChangeP5(v, 1);",
          "1774:   addrTop = sqlite3VdbeCurrentAddr(v);",
          "1775:   if( pMWin->eEnd==TK_PRECEDING ){",
          "1776:     addrIfPos1 = sqlite3VdbeAddOp3(v, OP_IfPos, regEnd, 0 , 1);",
          "1777:     VdbeCoverage(v);",
          "1778:   }",
          "1779:   sqlite3VdbeAddOp2(v, OP_Next, csrEnd, sqlite3VdbeCurrentAddr(v)+2);",
          "1780:   VdbeCoverage(v);",
          "1781:   addr = sqlite3VdbeAddOp0(v, OP_Goto);",
          "1782:   windowAggStep(pParse, pMWin, csrEnd, 0, regArg, regSize);",
          "1783:   if( pMWin->eEnd==TK_UNBOUNDED ){",
          "1784:     sqlite3VdbeAddOp2(v, OP_Goto, 0, addrTop);",
          "1785:     sqlite3VdbeJumpHere(v, addr);",
          "1786:     addrTop = sqlite3VdbeCurrentAddr(v);",
          "1787:   }else{",
          "1788:     sqlite3VdbeJumpHere(v, addr);",
          "1789:     if( pMWin->eEnd==TK_PRECEDING ){",
          "1790:       sqlite3VdbeJumpHere(v, addrIfPos1);",
          "1791:     }",
          "1792:   }",
          "1794:   if( pMWin->eEnd==TK_FOLLOWING ){",
          "1795:     addrIfPos1 = sqlite3VdbeAddOp3(v, OP_IfPos, regEnd, 0 , 1);",
          "1796:     VdbeCoverage(v);",
          "1797:   }",
          "1798:   if( pMWin->eStart==TK_FOLLOWING ){",
          "1799:     addrIfPos2 = sqlite3VdbeAddOp3(v, OP_IfPos, regStart, 0 , 1);",
          "1800:     VdbeCoverage(v);",
          "1801:   }",
          "1802:   windowAggFinal(pParse, pMWin, 0);",
          "1803:   windowReturnOneRow(pParse, pMWin, regGosub, addrGosub);",
          "1804:   sqlite3VdbeAddOp2(v, OP_Next, pMWin->iEphCsr, sqlite3VdbeCurrentAddr(v)+2);",
          "1805:   VdbeCoverage(v);",
          "1806:   sqlite3VdbeAddOp2(v, OP_Goto, 0, lblFlushDone);",
          "1807:   if( pMWin->eStart==TK_FOLLOWING ){",
          "1808:     sqlite3VdbeJumpHere(v, addrIfPos2);",
          "1809:   }",
          "1811:   if( pMWin->eStart==TK_CURRENT",
          "1812:    || pMWin->eStart==TK_PRECEDING",
          "1813:    || pMWin->eStart==TK_FOLLOWING",
          "1814:   ){",
          "1815:     int lblSkipInverse = sqlite3VdbeMakeLabel(pParse);;",
          "1816:     if( pMWin->eStart==TK_PRECEDING ){",
          "1817:       sqlite3VdbeAddOp3(v, OP_IfPos, regStart, lblSkipInverse, 1);",
          "1818:       VdbeCoverage(v);",
          "1819:     }",
          "1820:     if( pMWin->eStart==TK_FOLLOWING ){",
          "1821:       sqlite3VdbeAddOp2(v, OP_Next, csrStart, sqlite3VdbeCurrentAddr(v)+2);",
          "1822:       VdbeCoverage(v);",
          "1823:       sqlite3VdbeAddOp2(v, OP_Goto, 0, lblSkipInverse);",
          "1824:     }else{",
          "1825:       sqlite3VdbeAddOp2(v, OP_Next, csrStart, sqlite3VdbeCurrentAddr(v)+1);",
          "1826:       VdbeCoverageAlwaysTaken(v);",
          "1827:     }",
          "1828:     windowAggStep(pParse, pMWin, csrStart, 1, regArg, regSize);",
          "1829:     sqlite3VdbeResolveLabel(v, lblSkipInverse);",
          "1830:   }",
          "1831:   if( pMWin->eEnd==TK_FOLLOWING ){",
          "1832:     sqlite3VdbeJumpHere(v, addrIfPos1);",
          "1833:   }",
          "1834:   sqlite3VdbeAddOp2(v, OP_Goto, 0, addrTop);",
          "1837:   sqlite3VdbeResolveLabel(v, lblFlushDone);",
          "1838:   sqlite3VdbeAddOp1(v, OP_ResetSorter, pMWin->iEphCsr);",
          "1839:   sqlite3VdbeAddOp1(v, OP_Return, regFlushPart);",
          "1840:   VdbeComment((v, \"end flush_partition subroutine\"));",
          "1843:   sqlite3VdbeJumpHere(v, addrGoto);",
          "1844: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1884:  int regCountdown,",
          "1885:  int jumpOnEof",
          "1886: ){",
          "1887:   int ret = 0;",
          "1888:   Vdbe *v = p->pVdbe;",
          "1889:   int addrIf = 0;",
          "1891:   if( regCountdown>0 ){",
          "1892:     addrIf = sqlite3VdbeAddOp3(v, OP_IfPos, regCountdown, 0, 1);",
          "1893:   }",
          "1895:   switch( op ){",
          "1896:     case WINDOW_RETURN_ROW:",
          "1899:       break;",
          "1901:     case WINDOW_AGGINVERSE:",
          "1903:       break;",
          "1905:     case WINDOW_AGGSTEP:",
          "1907:       break;",
          "1908:   }",
          "",
          "[Removed Lines]",
          "1897:       windowAggFinal(p->pParse, p->pMWin, 0);",
          "1898:       windowReturnOneRow(p->pParse, p->pMWin, p->regGosub, p->addrGosub);",
          "1902:       windowAggStep(p->pParse, p->pMWin, csr, 1, p->regArg, p->pMWin->regSize);",
          "1906:       windowAggStep(p->pParse, p->pMWin, csr, 0, p->regArg, p->pMWin->regSize);",
          "",
          "[Added Lines]",
          "1586:   Window *pMWin = p->pMWin;",
          "1593:   if( op==WINDOW_AGGINVERSE && pMWin->eStart==TK_UNBOUNDED ){",
          "1594:     assert( regCountdown==0 && jumpOnEof==0 );",
          "1595:     return 0;",
          "1596:   }",
          "1604:       windowAggFinal(p->pParse, pMWin, 0);",
          "1605:       windowReturnOneRow(p->pParse, pMWin, p->regGosub, p->addrGosub);",
          "1609:       windowAggStep(p->pParse, pMWin, csr, 1, p->regArg, pMWin->regSize);",
          "1613:       windowAggStep(p->pParse, pMWin, csr, 0, p->regArg, pMWin->regSize);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2040:   pParse->nMem += 1 + nSub + 1;",
          "2042:   regFlushPart = ++pParse->nMem;",
          "2046:   assert( pMWin->eStart==TK_PRECEDING",
          "2047:        || pMWin->eStart==TK_CURRENT",
          "",
          "[Removed Lines]",
          "2043:   regStart = ++pParse->nMem;",
          "2044:   regEnd = ++pParse->nMem;",
          "",
          "[Added Lines]",
          "1752:   if( pMWin->eStart==TK_PRECEDING || pMWin->eStart==TK_FOLLOWING ){",
          "1753:     regStart = ++pParse->nMem;",
          "1754:   }",
          "1755:   if( pMWin->eEnd==TK_PRECEDING || pMWin->eEnd==TK_FOLLOWING ){",
          "1756:     regEnd = ++pParse->nMem;",
          "1757:   }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2108:   s.regArg = regArg = windowInitAccum(pParse, pMWin);",
          "2118:     int op = ((pMWin->eStart==TK_FOLLOWING) ? OP_Ge : OP_Le);",
          "2119:     int addrGe = sqlite3VdbeAddOp3(v, op, regStart, 0, regEnd);",
          "2120:     windowAggFinal(pParse, pMWin, 0);",
          "",
          "[Removed Lines]",
          "2110:   sqlite3ExprCode(pParse, pMWin->pStart, regStart);",
          "2111:   windowCheckIntValue(pParse, regStart, 0);",
          "2112:   sqlite3ExprCode(pParse, pMWin->pEnd, regEnd);",
          "2113:   windowCheckIntValue(pParse, regEnd, 1);",
          "2115:   if( pMWin->eStart==pMWin->eEnd",
          "2116:    && pMWin->eStart!=TK_CURRENT && pMWin->eStart!=TK_UNBOUNDED",
          "2117:   ){",
          "",
          "[Added Lines]",
          "1823:   if( regStart ){",
          "1824:     sqlite3ExprCode(pParse, pMWin->pStart, regStart);",
          "1825:     windowCheckIntValue(pParse, regStart, 0);",
          "1826:   }",
          "1827:   if( regEnd ){",
          "1828:     sqlite3ExprCode(pParse, pMWin->pEnd, regEnd);",
          "1829:     windowCheckIntValue(pParse, regEnd, 1);",
          "1830:   }",
          "1832:   if( pMWin->eStart==pMWin->eEnd && regStart && regEnd ){",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2131:     addrShortcut = sqlite3VdbeAddOp0(v, OP_Goto);",
          "2132:     sqlite3VdbeJumpHere(v, addrGe);",
          "2133:   }",
          "2135:     sqlite3VdbeAddOp3(v, OP_Subtract, regStart, regEnd, regStart);",
          "2136:   }",
          "2139:   sqlite3VdbeAddOp2(v, OP_Rewind, csrCurrent, 1);",
          "2140:   sqlite3VdbeAddOp2(v, OP_Rewind, csrEnd, 1);",
          "",
          "[Removed Lines]",
          "2134:   if( pMWin->eStart==TK_FOLLOWING ){",
          "2138:   sqlite3VdbeAddOp2(v, OP_Rewind, csrStart, 1);",
          "",
          "[Added Lines]",
          "1849:   if( pMWin->eStart==TK_FOLLOWING && regEnd ){",
          "1850:     assert( pMWin->eEnd==TK_FOLLOWING );",
          "1854:   if( pMWin->eStart!=TK_UNBOUNDED ){",
          "1855:     sqlite3VdbeAddOp2(v, OP_Rewind, csrStart, 1);",
          "1856:   }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2151:   }",
          "2152:   if( pMWin->eStart==TK_FOLLOWING ){",
          "2153:     windowCodeOp(&s, WINDOW_AGGSTEP, csrEnd, 0, 0);",
          "2156:   }else",
          "2157:   if( pMWin->eEnd==TK_PRECEDING ){",
          "2158:     windowCodeOp(&s, WINDOW_AGGSTEP, csrEnd, regEnd, 0);",
          "",
          "[Removed Lines]",
          "2154:     windowCodeOp(&s, WINDOW_RETURN_ROW, csrCurrent, regEnd, 0);",
          "2155:     windowCodeOp(&s, WINDOW_AGGINVERSE, csrStart, regStart, 0);",
          "",
          "[Added Lines]",
          "1872:     if( pMWin->eEnd!=TK_UNBOUNDED ){",
          "1873:       windowCodeOp(&s, WINDOW_RETURN_ROW, csrCurrent, regEnd, 0);",
          "1874:       windowCodeOp(&s, WINDOW_AGGINVERSE, csrStart, regStart, 0);",
          "1875:     }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2161:   }else{",
          "2162:     int addr;",
          "2163:     windowCodeOp(&s, WINDOW_AGGSTEP, csrEnd, 0, 0);",
          "2168:   }",
          "2169:   VdbeModuleComment((pParse->pVdbe, \"End windowCodeStep.SECOND_ROW_CODE\"));",
          "",
          "[Removed Lines]",
          "2164:     addr = sqlite3VdbeAddOp3(v, OP_IfPos, regEnd, 0, 1);",
          "2165:     windowCodeOp(&s, WINDOW_RETURN_ROW, csrCurrent, 0, 0);",
          "2166:     windowCodeOp(&s, WINDOW_AGGINVERSE, csrStart, regStart, 0);",
          "2167:     sqlite3VdbeJumpHere(v, addr);",
          "",
          "[Added Lines]",
          "1884:     if( pMWin->eEnd!=TK_UNBOUNDED ){",
          "1885:       if( regEnd ) addr = sqlite3VdbeAddOp3(v, OP_IfPos, regEnd, 0, 1);",
          "1886:       windowCodeOp(&s, WINDOW_RETURN_ROW, csrCurrent, 0, 0);",
          "1887:       windowCodeOp(&s, WINDOW_AGGINVERSE, csrStart, regStart, 0);",
          "1888:       if( regEnd ) sqlite3VdbeJumpHere(v, addr);",
          "1889:     }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2195:     int addrBreak2;",
          "2196:     int addrBreak3;",
          "2197:     windowCodeOp(&s, WINDOW_AGGSTEP, csrEnd, 0, 0);",
          "2201:     sqlite3VdbeAddOp2(v, OP_Goto, 0, addrStart);",
          "2202:     sqlite3VdbeJumpHere(v, addrBreak2);",
          "2203:     addrStart = sqlite3VdbeCurrentAddr(v);",
          "",
          "[Removed Lines]",
          "2198:     addrStart = sqlite3VdbeCurrentAddr(v);",
          "2199:     addrBreak1 = windowCodeOp(&s, WINDOW_RETURN_ROW, csrCurrent, regEnd, 1);",
          "2200:     addrBreak2 = windowCodeOp(&s, WINDOW_AGGINVERSE, csrStart, regStart, 1);",
          "",
          "[Added Lines]",
          "1920:     if( pMWin->eEnd==TK_UNBOUNDED ){",
          "1921:       addrStart = sqlite3VdbeCurrentAddr(v);",
          "1922:       addrBreak1 = windowCodeOp(&s, WINDOW_RETURN_ROW, csrCurrent, regStart, 1);",
          "1923:       addrBreak2 = windowCodeOp(&s, WINDOW_AGGINVERSE, csrStart, 0, 1);",
          "1924:     }else{",
          "1925:       assert( pMWin->eEnd==TK_FOLLOWING );",
          "1926:       addrStart = sqlite3VdbeCurrentAddr(v);",
          "1927:       addrBreak1 = windowCodeOp(&s, WINDOW_RETURN_ROW, csrCurrent, regEnd, 1);",
          "1928:       addrBreak2 = windowCodeOp(&s, WINDOW_AGGINVERSE, csrStart, regStart, 1);",
          "1929:     }",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2706:   }else{",
          "2707:     Window *pWin;",
          "",
          "[Removed Lines]",
          "2691:   if( pMWin->eType==TK_ROWS",
          "2692:    && (pMWin->eStart!=TK_UNBOUNDED||pMWin->eEnd!=TK_CURRENT||!pMWin->pOrderBy)",
          "2693:   ){",
          "2694:     int bCache = windowCachePartition(pMWin);",
          "2695:     if( (pMWin->eEnd!=TK_FOLLOWING   && pMWin->eEnd!=TK_PRECEDING)",
          "2696:      || (pMWin->eStart!=TK_FOLLOWING && pMWin->eStart!=TK_PRECEDING)",
          "2697:     ){",
          "2698:       VdbeModuleComment((pParse->pVdbe, \"Begin RowExprStep()\"));",
          "2699:       windowCodeRowExprStep(pParse, p, pWInfo, regGosub, addrGosub);",
          "2700:       VdbeModuleComment((pParse->pVdbe, \"End RowExprStep()\"));",
          "2701:     }else{",
          "2702:       VdbeModuleComment((pParse->pVdbe, \"Begin windowCodeStep()\"));",
          "2703:       windowCodeStep(pParse, p, pWInfo, regGosub, addrGosub);",
          "2704:       VdbeModuleComment((pParse->pVdbe, \"End windowCodeStep()\"));",
          "2705:     }",
          "",
          "[Added Lines]",
          "2420:   if( pMWin->eType==TK_ROWS ){",
          "2421:     VdbeModuleComment((pParse->pVdbe, \"Begin windowCodeStep()\"));",
          "2422:     windowCodeStep(pParse, p, pWInfo, regGosub, addrGosub);",
          "2423:     VdbeModuleComment((pParse->pVdbe, \"End windowCodeStep()\"));",
          "",
          "---------------"
        ]
      }
    }
  ]
}