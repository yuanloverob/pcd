{
  "cve_id": "CVE-2021-43848",
  "cve_desc": "h2o is an open source http server. In code prior to the `8c0eca3` commit h2o may attempt to access uninitialized memory. When receiving QUIC frames in certain order, HTTP/3 server-side implementation of h2o can be misguided to treat uninitialized memory as HTTP/3 frames that have been received. When h2o is used as a reverse proxy, an attacker can abuse this vulnerability to send internal state of h2o to backend servers controlled by the attacker or third party. Also, if there is an HTTP endpoint that reflects the traffic sent from the client, an attacker can use that reflector to obtain internal state of h2o. This internal state includes traffic of other connections in unencrypted form and TLS session tickets. This vulnerability exists in h2o server with HTTP/3 support, between commit 93af138 and d1f0f65. None of the released versions of h2o are affected by this vulnerability. There are no known workarounds. Users of unreleased versions of h2o using HTTP/3 are advised to upgrade immediately.",
  "repo": "h2o/h2o",
  "patch_hash": "8c0eca3d9bc1f08e7c6bdf57645f3d54aed7d844",
  "patch_info": {
    "commit_hash": "8c0eca3d9bc1f08e7c6bdf57645f3d54aed7d844",
    "repo": "h2o/h2o",
    "commit_url": "https://github.com/h2o/h2o/commit/8c0eca3",
    "files": [
      "lib/http3/server.c"
    ],
    "message": "postpone stream shutdown by H3 frame parsers",
    "before_after_code_files": [
      "lib/http3/server.c||lib/http3/server.c"
    ]
  },
  "patch_diff": {
    "lib/http3/server.c||lib/http3/server.c": [
      "File: lib/http3/server.c -> lib/http3/server.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "178:     struct {",
      "179:         h2o_buffer_t *buf;",
      "180:         int (*handle_input)(struct st_h2o_http3_server_stream_t *stream, const uint8_t **src, const uint8_t *src_end,",
      "182:         uint64_t bytes_left_in_data_frame;",
      "183:     } recvbuf;",
      "184:     struct {",
      "",
      "[Removed Lines]",
      "181:                             const char **err_desc);",
      "",
      "[Added Lines]",
      "181:                             int in_generator, const char **err_desc);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "244: static void on_stream_destroy(quicly_stream_t *qs, int err);",
      "245: static int retain_sendvecs(struct st_h2o_http3_server_stream_t *stream);",
      "246: static int handle_input_post_trailers(struct st_h2o_http3_server_stream_t *stream, const uint8_t **src, const uint8_t *src_end,",
      "248: static int handle_input_expect_data(struct st_h2o_http3_server_stream_t *stream, const uint8_t **src, const uint8_t *src_end,",
      "250: static void tunnel_write(struct st_h2o_http3_server_stream_t *stream);",
      "251: static void tunnel_write_delayed(h2o_timer_t *timer);",
      "",
      "[Removed Lines]",
      "247:                                       const char **err_desc);",
      "249:                                     const char **err_desc);",
      "",
      "[Added Lines]",
      "247:                                       int in_generator, const char **err_desc);",
      "249:                                     int in_generator, const char **err_desc);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "834:         while (src != src_end) {",
      "835:             int err;",
      "836:             const char *err_desc = NULL;",
      "838:                 if (err == H2O_HTTP3_ERROR_INCOMPLETE) {",
      "839:                     if (!quicly_recvstate_transfer_complete(&stream->quic->recvstate))",
      "840:                         break;",
      "",
      "[Removed Lines]",
      "837:             if ((err = stream->recvbuf.handle_input(stream, &src, src_end, &err_desc)) != 0) {",
      "",
      "[Added Lines]",
      "837:             if ((err = stream->recvbuf.handle_input(stream, &src, src_end, in_generator, &err_desc)) != 0) {",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1036: }",
      "1038: int handle_input_post_trailers(struct st_h2o_http3_server_stream_t *stream, const uint8_t **src, const uint8_t *src_end,",
      "1040: {",
      "1041:     h2o_http3_read_frame_t frame;",
      "1042:     int ret;",
      "",
      "[Removed Lines]",
      "1039:                                const char **err_desc)",
      "",
      "[Added Lines]",
      "1039:                                int in_generator, const char **err_desc)",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1056: }",
      "1058: static int handle_input_expect_data_payload(struct st_h2o_http3_server_stream_t *stream, const uint8_t **src,",
      "1060: {",
      "1061:     size_t bytes_avail = src_end - *src;",
      "",
      "[Removed Lines]",
      "1059:                                             const uint8_t *src_end, const char **err_desc)",
      "",
      "[Added Lines]",
      "1059:                                             const uint8_t *src_end, int in_generator, const char **err_desc)",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "1079: }",
      "1081: int handle_input_expect_data(struct st_h2o_http3_server_stream_t *stream, const uint8_t **src, const uint8_t *src_end,",
      "1083: {",
      "1084:     h2o_http3_read_frame_t frame;",
      "1085:     int ret;",
      "",
      "[Removed Lines]",
      "1082:                              const char **err_desc)",
      "",
      "[Added Lines]",
      "1082:                              int in_generator, const char **err_desc)",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "1102:             stream->req.content_length - stream->req.req_body_bytes_received < frame.length) {",
      "1106:             return 0;",
      "1107:         }",
      "1108:         break;",
      "",
      "[Removed Lines]",
      "1105:             shutdown_stream(stream, H2O_HTTP3_ERROR_EARLY_RESPONSE, H2O_HTTP3_ERROR_GENERAL_PROTOCOL, 0);",
      "",
      "[Added Lines]",
      "1105:             shutdown_stream(stream, H2O_HTTP3_ERROR_EARLY_RESPONSE, H2O_HTTP3_ERROR_GENERAL_PROTOCOL, in_generator);",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "1134: }",
      "1136: static int handle_input_expect_headers(struct st_h2o_http3_server_stream_t *stream, const uint8_t **src, const uint8_t *src_end,",
      "1138: {",
      "1139:     struct st_h2o_http3_server_conn_t *conn = get_conn(stream);",
      "1140:     h2o_http3_read_frame_t frame;",
      "1141:     int header_exists_map = 0, ret;",
      "",
      "[Removed Lines]",
      "1137:                                        const char **err_desc)",
      "",
      "[Added Lines]",
      "1137:                                        int in_generator, const char **err_desc)",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "610f70bca65634f6852d322f13c3908f01978478",
      "candidate_info": {
        "commit_hash": "610f70bca65634f6852d322f13c3908f01978478",
        "repo": "h2o/h2o",
        "commit_url": "https://github.com/h2o/h2o/commit/610f70bca65634f6852d322f13c3908f01978478",
        "files": [
          "lib/http3/server.c"
        ],
        "message": "amends b27ba5a of #2602 so that the disposal of `h2o_req_t` would be delayed only when the caller is the generator",
        "before_after_code_files": [
          "lib/http3/server.c||lib/http3/server.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/http3/server.c||lib/http3/server.c"
          ],
          "candidate": [
            "lib/http3/server.c||lib/http3/server.c"
          ]
        }
      },
      "candidate_diff": {
        "lib/http3/server.c||lib/http3/server.c": [
          "File: lib/http3/server.c -> lib/http3/server.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "211:     uint8_t received_priority_update : 1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "215:     uint8_t req_disposed : 1;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "410:     }",
          "411: }",
          "414: {",
          "415:     struct st_h2o_http3_server_conn_t *conn = get_conn(stream);",
          "416:     enum h2o_http3_server_stream_state old_state = stream->state;",
          "",
          "[Removed Lines]",
          "413: static void set_state(struct st_h2o_http3_server_stream_t *stream, enum h2o_http3_server_stream_state state)",
          "",
          "[Added Lines]",
          "417: static void set_state(struct st_h2o_http3_server_stream_t *stream, enum h2o_http3_server_stream_state state, int in_generator)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "427:         break;",
          "428:     case H2O_HTTP3_SERVER_STREAM_STATE_CLOSE_WAIT: {",
          "429:         pre_dispose_request(stream);",
          "430:         static const quicly_stream_callbacks_t close_wait_callbacks = {on_stream_destroy,",
          "431:                                                                        quicly_stream_noop_on_send_shift,",
          "432:                                                                        quicly_stream_noop_on_send_emit,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "434:         if (!in_generator) {",
          "435:             h2o_dispose_request(&stream->req);",
          "436:             stream->req_disposed = 1;",
          "437:         }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "449: {",
          "450:     assert(stream->state < H2O_HTTP3_SERVER_STREAM_STATE_CLOSE_WAIT);",
          "451:     if (h2o_linklist_is_linked(&stream->link))",
          "",
          "[Removed Lines]",
          "448: static void shutdown_stream(struct st_h2o_http3_server_stream_t *stream, int stop_sending_code, int reset_code)",
          "",
          "[Added Lines]",
          "456: static void shutdown_stream(struct st_h2o_http3_server_stream_t *stream, int stop_sending_code, int reset_code, int in_generator)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "454:         quicly_request_stop(stream->quic, stop_sending_code);",
          "455:     if (quicly_stream_has_send_side(0, stream->quic->stream_id) && !quicly_sendstate_transfer_complete(&stream->quic->sendstate))",
          "456:         quicly_reset_stream(stream->quic, reset_code);",
          "458: }",
          "460: static socklen_t get_sockname(h2o_conn_t *_conn, struct sockaddr *sa)",
          "",
          "[Removed Lines]",
          "457:     set_state(stream, H2O_HTTP3_SERVER_STREAM_STATE_CLOSE_WAIT);",
          "",
          "[Added Lines]",
          "465:     set_state(stream, H2O_HTTP3_SERVER_STREAM_STATE_CLOSE_WAIT, in_generator);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "619:         h2o_linklist_unlink(&stream->link);",
          "620:     if (stream->state != H2O_HTTP3_SERVER_STREAM_STATE_CLOSE_WAIT)",
          "621:         pre_dispose_request(stream);",
          "623:     free(stream);",
          "624: }",
          "",
          "[Removed Lines]",
          "622:     h2o_dispose_request(&stream->req);",
          "",
          "[Added Lines]",
          "630:     if (!stream->req_disposed)",
          "631:         h2o_dispose_request(&stream->req);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "693:         if (quicly_sendstate_is_open(&stream->quic->sendstate)) {",
          "694:             assert(stream->state == H2O_HTTP3_SERVER_STREAM_STATE_SEND_HEADERS || stream->proceed_requested);",
          "695:         } else {",
          "697:         }",
          "698:     }",
          "699: }",
          "",
          "[Removed Lines]",
          "696:             set_state(stream, H2O_HTTP3_SERVER_STREAM_STATE_CLOSE_WAIT);",
          "",
          "[Added Lines]",
          "705:             set_state(stream, H2O_HTTP3_SERVER_STREAM_STATE_CLOSE_WAIT, 0);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "757: Error:",
          "761: }",
          "763: static void on_send_stop(quicly_stream_t *qs, int err)",
          "764: {",
          "765:     struct st_h2o_http3_server_stream_t *stream = qs->data;",
          "768: }",
          "770: static void handle_buffered_input(struct st_h2o_http3_server_stream_t *stream)",
          "",
          "[Removed Lines]",
          "760:     shutdown_stream(stream, H2O_HTTP3_ERROR_EARLY_RESPONSE, H2O_HTTP3_ERROR_INTERNAL);",
          "767:     shutdown_stream(stream, H2O_HTTP3_ERROR_REQUEST_CANCELLED, err);",
          "",
          "[Added Lines]",
          "769:     shutdown_stream(stream, H2O_HTTP3_ERROR_EARLY_RESPONSE, H2O_HTTP3_ERROR_INTERNAL, 0);",
          "776:     shutdown_stream(stream, H2O_HTTP3_ERROR_REQUEST_CANCELLED, err, 0);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "818:                 shutdown_stream(stream, H2O_HTTP3_ERROR_NONE /* ignored */,",
          "819:                                 stream->req.req_body_bytes_received < stream->req.content_length",
          "820:                                     ? H2O_HTTP3_ERROR_REQUEST_INCOMPLETE",
          "822:             } else {",
          "823:                 if (stream->req.write_req.cb != NULL) {",
          "824:                     if (!h2o_linklist_is_linked(&stream->link))",
          "",
          "[Removed Lines]",
          "821:                                     : H2O_HTTP3_ERROR_GENERAL_PROTOCOL);",
          "",
          "[Added Lines]",
          "830:                                     : H2O_HTTP3_ERROR_GENERAL_PROTOCOL,",
          "831:                                 0);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "835:                         assert(!\"unexpected state\");",
          "836:                         break;",
          "837:                     }",
          "839:                     h2o_linklist_insert(&conn->delayed_streams.pending, &stream->link);",
          "840:                     request_run_delayed(conn);",
          "841:                 }",
          "842:             }",
          "843:         } else {",
          "845:         }",
          "846:     } else {",
          "847:         if (stream->state == H2O_HTTP3_SERVER_STREAM_STATE_RECV_BODY_BEFORE_BLOCK && stream->req_body != NULL &&",
          "",
          "[Removed Lines]",
          "838:                     set_state(stream, H2O_HTTP3_SERVER_STREAM_STATE_REQ_PENDING);",
          "844:             shutdown_stream(stream, H2O_HTTP3_ERROR_NONE /* ignored */, H2O_HTTP3_ERROR_REQUEST_INCOMPLETE);",
          "",
          "[Added Lines]",
          "848:                     set_state(stream, H2O_HTTP3_SERVER_STREAM_STATE_REQ_PENDING, 0);",
          "854:             shutdown_stream(stream, H2O_HTTP3_ERROR_NONE /* ignored */, H2O_HTTP3_ERROR_REQUEST_INCOMPLETE, 0);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "850:             stream->read_blocked = 1;",
          "851:             h2o_linklist_insert(&conn->delayed_streams.recv_body_blocked, &stream->link);",
          "853:             check_run_blocked(conn);",
          "854:         } else if (stream->req.write_req.cb != NULL && stream->req_body->size != 0) {",
          "",
          "[Removed Lines]",
          "852:             set_state(stream, H2O_HTTP3_SERVER_STREAM_STATE_RECV_BODY_BLOCKED);",
          "",
          "[Added Lines]",
          "862:             set_state(stream, H2O_HTTP3_SERVER_STREAM_STATE_RECV_BODY_BLOCKED, 0);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "882:     if (stream->state == H2O_HTTP3_SERVER_STREAM_STATE_RECV_HEADERS) {",
          "883:         if (h2o_linklist_is_linked(&stream->link))",
          "884:             h2o_linklist_unlink(&stream->link);",
          "886:     }",
          "887: }",
          "",
          "[Removed Lines]",
          "885:         shutdown_stream(stream, H2O_HTTP3_ERROR_NONE /* ignored */, H2O_HTTP3_ERROR_REQUEST_REJECTED);",
          "",
          "[Added Lines]",
          "895:         shutdown_stream(stream, H2O_HTTP3_ERROR_NONE /* ignored */, H2O_HTTP3_ERROR_REQUEST_REJECTED, 0);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "904:         check_run_blocked(conn);",
          "906:         if (state == H2O_SEND_STATE_ERROR) {",
          "908:             return;",
          "909:         }",
          "910:     }",
          "",
          "[Removed Lines]",
          "907:             shutdown_stream(stream, H2O_HTTP3_ERROR_INTERNAL, H2O_HTTP3_ERROR_INTERNAL);",
          "",
          "[Added Lines]",
          "917:             shutdown_stream(stream, H2O_HTTP3_ERROR_INTERNAL, H2O_HTTP3_ERROR_INTERNAL, 1);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "944:                 ++conn->num_streams_req_streaming;",
          "945:                 stream->req.proceed_req = proceed_request_streaming;",
          "947:                 h2o_process_request(&stream->req);",
          "948:             } else {",
          "950:                 stream->read_blocked = 0;",
          "952:                 handle_buffered_input(stream);",
          "953:                 if (quicly_get_state(conn->h3.super.quic) >= QUICLY_STATE_CLOSING)",
          "954:                     return;",
          "",
          "[Removed Lines]",
          "946:                 set_state(stream, H2O_HTTP3_SERVER_STREAM_STATE_SEND_HEADERS);",
          "951:                 set_state(stream, H2O_HTTP3_SERVER_STREAM_STATE_RECV_BODY_UNBLOCKED);",
          "",
          "[Added Lines]",
          "956:                 set_state(stream, H2O_HTTP3_SERVER_STREAM_STATE_SEND_HEADERS, 0);",
          "961:                 set_state(stream, H2O_HTTP3_SERVER_STREAM_STATE_RECV_BODY_UNBLOCKED, 0);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "969:             made_progress = 1;",
          "970:             if (stream->req.write_req.cb(stream->req.write_req.ctx, h2o_iovec_init(stream->req_body->bytes, stream->req_body->size),",
          "971:                                          quicly_recvstate_transfer_complete(&stream->quic->recvstate)) != 0) {",
          "973:             }",
          "974:         }",
          "",
          "[Removed Lines]",
          "972:                 shutdown_stream(stream, H2O_HTTP3_ERROR_INTERNAL, H2O_HTTP3_ERROR_INTERNAL);",
          "",
          "[Added Lines]",
          "982:                 shutdown_stream(stream, H2O_HTTP3_ERROR_INTERNAL, H2O_HTTP3_ERROR_INTERNAL, 0);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "982:             assert(!stream->read_blocked);",
          "983:             h2o_linklist_unlink(&stream->link);",
          "984:             made_progress = 1;",
          "986:             h2o_process_request(&stream->req);",
          "987:         }",
          "",
          "[Removed Lines]",
          "985:             set_state(stream, H2O_HTTP3_SERVER_STREAM_STATE_SEND_HEADERS);",
          "",
          "[Added Lines]",
          "995:             set_state(stream, H2O_HTTP3_SERVER_STREAM_STATE_SEND_HEADERS, 0);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1056:             stream->req.content_length - stream->req.req_body_bytes_received < frame.length) {",
          "1060:             return 0;",
          "1061:         }",
          "1062:         break;",
          "",
          "[Removed Lines]",
          "1059:             shutdown_stream(stream, H2O_HTTP3_ERROR_EARLY_RESPONSE, H2O_HTTP3_ERROR_GENERAL_PROTOCOL);",
          "",
          "[Added Lines]",
          "1069:             shutdown_stream(stream, H2O_HTTP3_ERROR_EARLY_RESPONSE, H2O_HTTP3_ERROR_GENERAL_PROTOCOL, 0);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1080:     if (!quicly_recvstate_transfer_complete(&stream->quic->recvstate))",
          "1081:         quicly_request_stop(stream->quic, H2O_HTTP3_ERROR_EARLY_RESPONSE);",
          "1087:     return 0;",
          "",
          "[Removed Lines]",
          "1083:     set_state(stream, H2O_HTTP3_SERVER_STREAM_STATE_SEND_HEADERS);",
          "1084:     sendfn(&stream->req, reason, body, 0);",
          "",
          "[Added Lines]",
          "1093:     set_state(stream, H2O_HTTP3_SERVER_STREAM_STATE_SEND_HEADERS, 0);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1133:     if (!is_connect)",
          "1134:         expected_map |= H2O_HPACK_PARSE_HEADERS_SCHEME_EXISTS | H2O_HPACK_PARSE_HEADERS_PATH_EXISTS;",
          "1135:     if (header_exists_map != expected_map) {",
          "1137:         return 0;",
          "1138:     }",
          "",
          "[Removed Lines]",
          "1136:         shutdown_stream(stream, H2O_HTTP3_ERROR_GENERAL_PROTOCOL, H2O_HTTP3_ERROR_GENERAL_PROTOCOL);",
          "",
          "[Added Lines]",
          "1145:         shutdown_stream(stream, H2O_HTTP3_ERROR_GENERAL_PROTOCOL, H2O_HTTP3_ERROR_GENERAL_PROTOCOL, 0);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1161:         if (stream->req.content_length != SIZE_MAX)",
          "1162:             return handle_input_expect_headers_send_http_error(stream, h2o_send_error_400, \"Invalid Request\",",
          "1163:                                                                \"CONNECT request cannot have request body\", err_desc);",
          "1165:         stream->tunnel = h2o_mem_alloc(sizeof(*stream->tunnel));",
          "1166:         stream->tunnel->tunnel = NULL;",
          "1167:         stream->tunnel->stream = stream;",
          "",
          "[Removed Lines]",
          "1164:         set_state(stream, H2O_HTTP3_SERVER_STREAM_STATE_SEND_HEADERS);",
          "",
          "[Added Lines]",
          "1173:         set_state(stream, H2O_HTTP3_SERVER_STREAM_STATE_SEND_HEADERS, 0);",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1172:     }",
          "1177:     return 0;",
          "1178: }",
          "",
          "[Removed Lines]",
          "1175:     set_state(stream, H2O_HTTP3_SERVER_STREAM_STATE_RECV_BODY_BEFORE_BLOCK);",
          "",
          "[Added Lines]",
          "1184:     set_state(stream, H2O_HTTP3_SERVER_STREAM_STATE_RECV_BODY_BEFORE_BLOCK, 0);",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1208:     return header_size;",
          "1209: }",
          "1212: {",
          "1213:     quicly_sendstate_shutdown(&stream->quic->sendstate, stream->sendbuf.final_size);",
          "1214:     if (stream->sendbuf.vecs.size == 0)",
          "1216: }",
          "1218: static void finalize_do_send(struct st_h2o_http3_server_stream_t *stream)",
          "",
          "[Removed Lines]",
          "1211: static void shutdown_response(struct st_h2o_http3_server_stream_t *stream)",
          "1215:         set_state(stream, H2O_HTTP3_SERVER_STREAM_STATE_CLOSE_WAIT);",
          "",
          "[Added Lines]",
          "1220: static void shutdown_by_generator(struct st_h2o_http3_server_stream_t *stream)",
          "1224:         set_state(stream, H2O_HTTP3_SERVER_STREAM_STATE_CLOSE_WAIT, 1);",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1233:     if (stream->state == H2O_HTTP3_SERVER_STREAM_STATE_SEND_HEADERS) {",
          "1234:         write_response(stream);",
          "1235:         h2o_probe_log_response(&stream->req, stream->quic->stream_id, NULL);",
          "1237:     } else {",
          "1238:         assert(stream->state == H2O_HTTP3_SERVER_STREAM_STATE_SEND_BODY);",
          "1239:         assert(quicly_sendstate_is_open(&stream->quic->sendstate));",
          "",
          "[Removed Lines]",
          "1236:         set_state(stream, H2O_HTTP3_SERVER_STREAM_STATE_SEND_BODY);",
          "",
          "[Added Lines]",
          "1245:         set_state(stream, H2O_HTTP3_SERVER_STREAM_STATE_SEND_BODY, 1);",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1269:     case H2O_SEND_STATE_FINAL:",
          "1270:     case H2O_SEND_STATE_ERROR:",
          "1273:         break;",
          "1274:     }",
          "",
          "[Removed Lines]",
          "1272:         shutdown_response(stream);",
          "",
          "[Added Lines]",
          "1281:         shutdown_by_generator(stream);",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "1310:     if (err != NULL) {",
          "1311:         stream->tunnel->tunnel->destroy(stream->tunnel->tunnel);",
          "1312:         stream->tunnel->tunnel = NULL;",
          "1314:     }",
          "1316:     finalize_do_send(stream);",
          "",
          "[Removed Lines]",
          "1313:         shutdown_response(stream);",
          "",
          "[Added Lines]",
          "1322:         shutdown_by_generator(stream);",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "1353:     if (err != NULL) {",
          "1354:         stream->tunnel->tunnel->destroy(stream->tunnel->tunnel);",
          "1355:         stream->tunnel->tunnel = NULL;",
          "1357:         return;",
          "1358:     }",
          "",
          "[Removed Lines]",
          "1356:         shutdown_response(stream);",
          "",
          "[Added Lines]",
          "1365:         shutdown_by_generator(stream);",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "1376:     write_response(stream);",
          "1377:     h2o_probe_log_response(&stream->req, stream->quic->stream_id, stream->tunnel->tunnel);",
          "1380:     finalize_do_send(stream);",
          "1381:     assert(!stream->proceed_while_sending);",
          "",
          "[Removed Lines]",
          "1378:     set_state(stream, H2O_HTTP3_SERVER_STREAM_STATE_SEND_BODY);",
          "",
          "[Added Lines]",
          "1387:     set_state(stream, H2O_HTTP3_SERVER_STREAM_STATE_SEND_BODY, 1);",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "1484:     stream->proceed_requested = 0;",
          "1485:     stream->proceed_while_sending = 0;",
          "1486:     stream->received_priority_update = 0;",
          "1487:     stream->req_body = NULL;",
          "1489:     stream->tunnel = NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1496:     stream->req_disposed = 0;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4f93234d8bfc1557a981e5126f6217892b7cfa36",
      "candidate_info": {
        "commit_hash": "4f93234d8bfc1557a981e5126f6217892b7cfa36",
        "repo": "h2o/h2o",
        "commit_url": "https://github.com/h2o/h2o/commit/4f93234d8bfc1557a981e5126f6217892b7cfa36",
        "files": [
          "lib/common/url.c",
          "lib/core/logconf.c",
          "lib/http3/server.c"
        ],
        "message": "fix UB \"applying (non-)zero offset to pointer\"",
        "before_after_code_files": [
          "lib/common/url.c||lib/common/url.c",
          "lib/core/logconf.c||lib/core/logconf.c",
          "lib/http3/server.c||lib/http3/server.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/http3/server.c||lib/http3/server.c"
          ],
          "candidate": [
            "lib/http3/server.c||lib/http3/server.c"
          ]
        }
      },
      "candidate_diff": {
        "lib/common/url.c||lib/common/url.c": [
          "File: lib/common/url.c -> lib/common/url.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "120: h2o_iovec_t h2o_url_normalize_path(h2o_mem_pool_t *pool, const char *path, size_t len, size_t *query_at, size_t **norm_indexes)",
          "121: {",
          "123:     h2o_iovec_t ret;",
          "",
          "[Removed Lines]",
          "122:     const char *p = path, *end = path + len;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "130:         return ret;",
          "131:     }",
          "133:     if (path[0] != '/')",
          "134:         goto Rewrite;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "132:     const char *p = path, *end = path + len;",
          "",
          "---------------"
        ],
        "lib/core/logconf.c||lib/core/logconf.c": [
          "File: lib/core/logconf.c -> lib/core/logconf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "408: static char *append_unsafe_string_apache(char *pos, const char *src, size_t len)",
          "409: {",
          "412:     for (; src != src_end; ++src) {",
          "413:         if (' ' <= *src && *src < 0x7d && *src != '\"') {",
          "",
          "[Removed Lines]",
          "410:     const char *src_end = src + len;",
          "",
          "[Added Lines]",
          "410:     if (len == 0)",
          "411:         return pos;",
          "413:     const char *src_end = src + len;",
          "",
          "---------------"
        ],
        "lib/http3/server.c||lib/http3/server.c": [
          "File: lib/http3/server.c -> lib/http3/server.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "885:         size_t bytes_available = quicly_recvstate_bytes_available(&stream->quic->recvstate);",
          "886:         assert(bytes_available <= stream->recvbuf.buf->size);",
          "897:                 }",
          "902:             }",
          "903:         }",
          "908:     }",
          "910:     if (quicly_recvstate_transfer_complete(&stream->quic->recvstate)) {",
          "",
          "[Removed Lines]",
          "887:         const uint8_t *src = (const uint8_t *)stream->recvbuf.buf->bytes, *src_end = src + bytes_available;",
          "888:         while (src != src_end) {",
          "889:             int err;",
          "890:             const char *err_desc = NULL;",
          "891:             if ((err = stream->recvbuf.handle_input(stream, &src, src_end, in_generator, &err_desc)) != 0) {",
          "892:                 if (err == H2O_HTTP3_ERROR_INCOMPLETE) {",
          "893:                     if (!quicly_recvstate_transfer_complete(&stream->quic->recvstate))",
          "894:                         break;",
          "895:                     err = H2O_HTTP3_ERROR_GENERAL_PROTOCOL;",
          "896:                     err_desc = \"incomplete frame\";",
          "898:                 h2o_quic_close_connection(&conn->h3.super, err, err_desc);",
          "899:                 return;",
          "900:             } else if (stream->state >= H2O_HTTP3_SERVER_STREAM_STATE_CLOSE_WAIT) {",
          "901:                 return;",
          "905:         size_t bytes_consumed = src - (const uint8_t *)stream->recvbuf.buf->bytes;",
          "906:         h2o_buffer_consume(&stream->recvbuf.buf, bytes_consumed);",
          "907:         quicly_stream_sync_recvbuf(stream->quic, bytes_consumed);",
          "",
          "[Added Lines]",
          "887:         if (bytes_available != 0) {",
          "888:             const uint8_t *src = (const uint8_t *)stream->recvbuf.buf->bytes, *src_end = src + bytes_available;",
          "889:             while (src != src_end) {",
          "890:                 int err;",
          "891:                 const char *err_desc = NULL;",
          "892:                 if ((err = stream->recvbuf.handle_input(stream, &src, src_end, in_generator, &err_desc)) != 0) {",
          "893:                     if (err == H2O_HTTP3_ERROR_INCOMPLETE) {",
          "894:                         if (!quicly_recvstate_transfer_complete(&stream->quic->recvstate))",
          "895:                             break;",
          "896:                         err = H2O_HTTP3_ERROR_GENERAL_PROTOCOL;",
          "897:                         err_desc = \"incomplete frame\";",
          "898:                     }",
          "899:                     h2o_quic_close_connection(&conn->h3.super, err, err_desc);",
          "900:                     return;",
          "901:                 } else if (stream->state >= H2O_HTTP3_SERVER_STREAM_STATE_CLOSE_WAIT) {",
          "902:                     return;",
          "906:             size_t bytes_consumed = src - (const uint8_t *)stream->recvbuf.buf->bytes;",
          "907:             h2o_buffer_consume(&stream->recvbuf.buf, bytes_consumed);",
          "908:             quicly_stream_sync_recvbuf(stream->quic, bytes_consumed);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a82669ca2585d05cec37c1cfbc1d6440556ee731",
      "candidate_info": {
        "commit_hash": "a82669ca2585d05cec37c1cfbc1d6440556ee731",
        "repo": "h2o/h2o",
        "commit_url": "https://github.com/h2o/h2o/commit/a82669ca2585d05cec37c1cfbc1d6440556ee731",
        "files": [
          "lib/core/logconf.c",
          "lib/core/proxy.c",
          "lib/core/request.c",
          "lib/http3/server.c"
        ],
        "message": "make the code C99",
        "before_after_code_files": [
          "lib/core/logconf.c||lib/core/logconf.c",
          "lib/core/proxy.c||lib/core/proxy.c",
          "lib/core/request.c||lib/core/request.c",
          "lib/http3/server.c||lib/http3/server.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/http3/server.c||lib/http3/server.c"
          ],
          "candidate": [
            "lib/http3/server.c||lib/http3/server.c"
          ]
        }
      },
      "candidate_diff": {
        "lib/core/logconf.c||lib/core/logconf.c": [
          "File: lib/core/logconf.c -> lib/core/logconf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "410:     if (len == 0)",
          "411:         return pos;",
          "415:         if (' ' <= *src && *src < 0x7d && *src != '\"') {",
          "417:         } else {",
          "",
          "[Removed Lines]",
          "413:     const char *src_end = src + len;",
          "414:     for (; src != src_end; ++src) {",
          "",
          "[Added Lines]",
          "413:     for (const char *src_end = src + len; src != src_end; ++src) {",
          "",
          "---------------"
        ],
        "lib/core/proxy.c||lib/core/proxy.c": [
          "File: lib/core/proxy.c -> lib/core/proxy.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "200:     h2o_iovec_vector_t cookie_values = {NULL};",
          "201:     int found_early_data = 0;",
          "202:     if (H2O_LIKELY(req->headers.size != 0)) {",
          "205:             if (h2o_iovec_is_token(h->name)) {",
          "206:                 const h2o_token_t *token = (void *)h->name;",
          "207:                 if (token->flags.proxy_should_drop_for_req)",
          "",
          "[Removed Lines]",
          "203:         const h2o_header_t *h, *h_end;",
          "204:         for (h = req->headers.entries, h_end = h + req->headers.size; h != h_end; ++h) {",
          "",
          "[Added Lines]",
          "203:         for (const h2o_header_t *h = req->headers.entries, *h_end = h + req->headers.size; h != h_end; ++h) {",
          "",
          "---------------"
        ],
        "lib/core/request.c||lib/core/request.c": [
          "File: lib/core/request.c -> lib/core/request.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "328:     h2o_timer_unlink(&req->_timeout_entry);",
          "330:     if (req->pathconf != NULL && req->num_loggers != 0) {",
          "333:             (*logger)->log_access((*logger), req);",
          "334:         }",
          "335:     }",
          "",
          "[Removed Lines]",
          "331:         h2o_logger_t **logger = req->loggers, **end = logger + req->num_loggers;",
          "332:         for (; logger != end; ++logger) {",
          "",
          "[Added Lines]",
          "331:         for (h2o_logger_t **logger = req->loggers, **end = logger + req->num_loggers; logger != end; ++logger) {",
          "",
          "---------------"
        ],
        "lib/http3/server.c||lib/http3/server.c": [
          "File: lib/http3/server.c -> lib/http3/server.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "886:         assert(bytes_available <= stream->recvbuf.buf->size);",
          "887:         if (bytes_available != 0) {",
          "888:             const uint8_t *src = (const uint8_t *)stream->recvbuf.buf->bytes, *src_end = src + bytes_available;",
          "890:                 int err;",
          "891:                 const char *err_desc = NULL;",
          "892:                 if ((err = stream->recvbuf.handle_input(stream, &src, src_end, in_generator, &err_desc)) != 0) {",
          "",
          "[Removed Lines]",
          "889:             while (src != src_end) {",
          "",
          "[Added Lines]",
          "889:             do {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "901:                 } else if (stream->state >= H2O_HTTP3_SERVER_STREAM_STATE_CLOSE_WAIT) {",
          "902:                     return;",
          "903:                 }",
          "906:             size_t bytes_consumed = src - (const uint8_t *)stream->recvbuf.buf->bytes;",
          "907:             h2o_buffer_consume(&stream->recvbuf.buf, bytes_consumed);",
          "",
          "[Removed Lines]",
          "904:             }",
          "",
          "[Added Lines]",
          "904:             } while (src != src_end);",
          "",
          "---------------"
        ]
      }
    }
  ]
}