{
  "cve_id": "CVE-2017-3735",
  "cve_desc": "While parsing an IPAddressFamily extension in an X.509 certificate, it is possible to do a one-byte overread. This would result in an incorrect text display of the certificate. This bug has been present since 2006 and is present in all versions of OpenSSL before 1.0.2m and 1.1.0g.",
  "repo": "openssl/openssl",
  "patch_hash": "068b963bb7afc57f5bdd723de0dd15e7795d5822",
  "patch_info": {
    "commit_hash": "068b963bb7afc57f5bdd723de0dd15e7795d5822",
    "repo": "openssl/openssl",
    "commit_url": "https://github.com/openssl/openssl/commit/068b963bb7afc57f5bdd723de0dd15e7795d5822",
    "files": [
      "crypto/x509v3/v3_addr.c"
    ],
    "message": "Avoid out-of-bounds read\n\nFixes CVE 2017-3735\n\nReviewed-by: Kurt Roeckx <kurt@roeckx.be>\n(Merged from https://github.com/openssl/openssl/pull/4276)\n\n(cherry picked from commit b23171744b01e473ebbfd6edad70c1c3825ffbcd)",
    "before_after_code_files": [
      "crypto/x509v3/v3_addr.c||crypto/x509v3/v3_addr.c"
    ]
  },
  "patch_diff": {
    "crypto/x509v3/v3_addr.c||crypto/x509v3/v3_addr.c": [
      "File: crypto/x509v3/v3_addr.c -> crypto/x509v3/v3_addr.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "85: unsigned int X509v3_addr_get_afi(const IPAddressFamily *f)",
      "86: {",
      "91: }",
      "",
      "[Removed Lines]",
      "87:     return ((f != NULL &&",
      "88:              f->addressFamily != NULL && f->addressFamily->data != NULL)",
      "89:             ? ((f->addressFamily->data[0] << 8) | (f->addressFamily->data[1]))",
      "90:             : 0);",
      "",
      "[Added Lines]",
      "87:     if (f == NULL",
      "88:             || f->addressFamily == NULL",
      "89:             || f->addressFamily->data == NULL",
      "90:             || f->addressFamily->length < 2)",
      "91:         return 0;",
      "92:     return (f->addressFamily->data[0] << 8) | f->addressFamily->data[1];",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "d020a65a03ec10b9f7a6415ec89759c385a37d3a",
      "candidate_info": {
        "commit_hash": "d020a65a03ec10b9f7a6415ec89759c385a37d3a",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/d020a65a03ec10b9f7a6415ec89759c385a37d3a",
        "files": [
          "crypto/cryptlib.c",
          "crypto/modes/gcm128.c"
        ],
        "message": "crypto/cryptlib.c: mask more capability bits upon FXSR bit flip.\n\nOPENSSL_ia32cap.pod discusses possibility to disable operations on\nXMM register bank. This formally means that this flag has to be checked\nin combination with other flags. But it customarily isn't. But instead\nof chasing all the cases we can flip more bits together with FXSR one.\n\nReviewed-by: Richard Levitte <levitte@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/4303)\n\n(cherry picked from commit 6e5a853bda24e8aece325ecf5aa68b8ea832e414)",
        "before_after_code_files": [
          "crypto/cryptlib.c||crypto/cryptlib.c",
          "crypto/modes/gcm128.c||crypto/modes/gcm128.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/cryptlib.c||crypto/cryptlib.c": [
          "File: crypto/cryptlib.c -> crypto/cryptlib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "46:         if (!sscanf(env + off, \"%lli\", (long long *)&vec))",
          "47:             vec = strtoul(env + off, NULL, 0);",
          "48: #  endif",
          "52:             vec = OPENSSL_ia32_cpuid(OPENSSL_ia32cap_P);",
          "55:         if ((env = strchr(env, ':'))) {",
          "56:             unsigned int vecx;",
          "57:             env++;",
          "",
          "[Removed Lines]",
          "49:         if (off)",
          "50:             vec = OPENSSL_ia32_cpuid(OPENSSL_ia32cap_P) & ~vec;",
          "51:         else if (env[0] == ':')",
          "54:         OPENSSL_ia32cap_P[2] = 0;",
          "",
          "[Added Lines]",
          "49:         if (off) {",
          "50:             IA32CAP mask = vec;",
          "51:             vec = OPENSSL_ia32_cpuid(OPENSSL_ia32cap_P) & ~mask;",
          "52:             if (mask & (1<<24)) {",
          "61:                 vec &= ~((IA32CAP)(1<<1|1<<11|1<<25|1<<28) << 32);",
          "62:             }",
          "63:         } else if (env[0] == ':') {",
          "65:         }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "61:                 OPENSSL_ia32cap_P[2] &= ~vecx;",
          "62:             else",
          "63:                 OPENSSL_ia32cap_P[2] = vecx;",
          "64:         }",
          "66:         vec = OPENSSL_ia32_cpuid(OPENSSL_ia32cap_P);",
          "",
          "[Removed Lines]",
          "65:     } else",
          "",
          "[Added Lines]",
          "76:         } else {",
          "77:             OPENSSL_ia32cap_P[2] = 0;",
          "79:     } else {",
          "81:     }",
          "",
          "---------------"
        ],
        "crypto/modes/gcm128.c||crypto/modes/gcm128.c": [
          "File: crypto/modes/gcm128.c -> crypto/modes/gcm128.c"
        ]
      }
    },
    {
      "candidate_hash": "2717f2b7eb845594271a94969767af2c4521e004",
      "candidate_info": {
        "commit_hash": "2717f2b7eb845594271a94969767af2c4521e004",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/2717f2b7eb845594271a94969767af2c4521e004",
        "files": [
          "crypto/err/err.c"
        ],
        "message": "Fix leak in ERR_get_state() when OPENSSL_init_crypto() isn't called yet\n\nIf OPENSSL_init_crypto() hasn't been called yet when ERR_get_state()\nis called, it need to be called early, so the base initialization is\ndone.  On some platforms (those who support DSO functionality and\ndon't define OPENSSL_USE_NODELETE), that includes a call of\nERR_set_mark(), which calls this function again.\nFurthermore, we know that ossl_init_thread_start(), which is called\nlater in ERR_get_state(), calls OPENSSL_init_crypto(0, NULL), except\nthat's too late.\nHere's what happens without an early call of OPENSSL_init_crypto():\n\n    => ERR_get_state():\n         => CRYPTO_THREAD_get_local():\n         <= NULL;\n         # no state is found, so it gets allocated.\n         => ossl_init_thread_start():\n              => OPENSSL_init_crypto():\n                   # Here, base_inited is set to 1\n                   # before ERR_set_mark() call\n                   => ERR_set_mark():\n                        => ERR_get_state():\n                             => CRYPTO_THREAD_get_local():\n                             <= NULL;\n                             # no state is found, so it gets allocated!!!!!\n                             => ossl_init_thread_start():\n                                  => OPENSSL_init_crypto():\n                                       # base_inited is 1,\n                                       # so no more init to be done\n                                  <= 1\n                             <=\n                             => CRYPTO_thread_set_local():\n                             <=\n                        <=\n                   <=\n              <= 1\n         <=\n         => CRYPTO_thread_set_local()      # previous value removed!\n    <=\n\nResult: double allocation, and we have a leak.\n\nBy calling the base OPENSSL_init_crypto() early, we get this instead:\n\n    => ERR_get_state():\n         => OPENSSL_init_crypto():\n              # Here, base_inited is set to 1\n              # before ERR_set_mark() call\n              => ERR_set_mark():\n                   => ERR_get_state():\n                        => OPENSSL_init_crypto():\n                             # base_inited is 1,\n                             # so no more init to be done\n                        <= 1\n                        => CRYPTO_THREAD_get_local():\n                        <= NULL;\n                        # no state is found, so it gets allocated\n                        # let's assume we got 0xDEADBEEF\n                        => ossl_init_thread_start():\n                             => OPENSSL_init_crypto():\n                                  # base_inited is 1,\n                                  # so no more init to be done\n                             <= 1\n                        <= 1\n                        => CRYPTO_thread_set_local():\n                        <=\n                   <=\n              <=\n         <= 1\n         => CRYPTO_THREAD_get_local():\n         <= 0xDEADBEEF\n    <= 0xDEADBEEF\n\nResult: no leak.\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/4913)\n\n(cherry picked from commit aef84bb4efbddfd95d042f3f5f1d362ed7d4faeb)",
        "before_after_code_files": [
          "crypto/err/err.c||crypto/err/err.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/err/err.c||crypto/err/err.c": [
          "File: crypto/err/err.c -> crypto/err/err.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "658:     if (!RUN_ONCE(&err_init, err_do_init))",
          "659:         return NULL;",
          "661:     state = CRYPTO_THREAD_get_local(&err_thread_local);",
          "663:     if (state == NULL) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "666:     if (!OPENSSL_init_crypto(0, NULL))",
          "667:         return NULL;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6a8dfb90b54ad1d3d87510b37e409bf568a4338f",
      "candidate_info": {
        "commit_hash": "6a8dfb90b54ad1d3d87510b37e409bf568a4338f",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/6a8dfb90b54ad1d3d87510b37e409bf568a4338f",
        "files": [
          "Configurations/common.tmpl",
          "Configure"
        ],
        "message": "Configure: let INCLUDEs set on binaries \"trickle down\" to the objects\n\nThis ensures that only one set of includes is associated with each\nobject file, reagardless of where it's used.\n\nFor example, if apps/build.info has this:\n\n    SOURCE[openssl]=foo.c\n    INCLUDE[openssl]=.. ../include\n\nand test/build.info has this:\n\n    SOURCE[footest]=../apps/foo.c\n    INCLUDE[footest]=../include\n\nThe inclusion directories used for apps/foo.o would differ depending\non which program's dependencies get generated first in the build file.\n\nWith this change, all those INCLUDEs get combined into one set of\ninclusion directories tied to the object file.\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/5153)\n\n(cherry picked from commit 1b5ad51fc9b29d8893d5224f00bb3360f8aca465)",
        "before_after_code_files": [
          "Configurations/common.tmpl||Configurations/common.tmpl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Configurations/common.tmpl||Configurations/common.tmpl": [
          "File: Configurations/common.tmpl -> Configurations/common.tmpl",
          "--- Hunk 1 ---",
          "[Context before]",
          "52:                              generator_incs => $unified_info{includes}->{$script},",
          "53:                              generator_deps => $unified_info{depends}->{$script},",
          "54:                              deps => $unified_info{depends}->{$src},",
          "57:                              %opts);",
          "58:          foreach (@{$unified_info{depends}->{$src}}) {",
          "59:              dogenerate($_, $obj, $bin, %opts);",
          "",
          "[Removed Lines]",
          "55:                              incs => [ @{$unified_info{includes}->{$bin}},",
          "56:                                        @{$unified_info{includes}->{$obj}} ],",
          "",
          "[Added Lines]",
          "55:                              incs => $unified_info{includes}->{$obj},",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "74:          $OUT .= src2obj(obj => $obj_no_o,",
          "75:                          srcs => $unified_info{sources}->{$obj},",
          "76:                          deps => $unified_info{depends}->{$obj},",
          "79:                          %opts);",
          "80:          foreach ((@{$unified_info{sources}->{$obj}},",
          "81:                    @{$unified_info{depends}->{$obj}})) {",
          "",
          "[Removed Lines]",
          "77:                          incs => [ @{$unified_info{includes}->{$bin}},",
          "78:                                    @{$unified_info{includes}->{$obj}} ],",
          "",
          "[Added Lines]",
          "76:                          incs => $unified_info{includes}->{$obj},",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1bbbc5731afa4751597ce42a7410c77ff4fbe306",
      "candidate_info": {
        "commit_hash": "1bbbc5731afa4751597ce42a7410c77ff4fbe306",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/1bbbc5731afa4751597ce42a7410c77ff4fbe306",
        "files": [
          "util/TLSProxy/Proxy.pm"
        ],
        "message": "Wait longer for the server in TLSProxy to start\n\nIn a recent PR (#3566) it seems that TLSProxy gave up trying to connect to\nthe server process too quickly. This meant the test failed even though the\nserver *did* eventually start. Currently we try 3 times to connect with a\n0.1 second pause between each attempt. That is probably too aggressive.\n\nReviewed-by: Richard Levitte <levitte@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/3587)\n(cherry picked from commit 142463c9375efdcdaa4c504f6aaf5bfd61d5ba99)",
        "before_after_code_files": [
          "util/TLSProxy/Proxy.pm||util/TLSProxy/Proxy.pm"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "util/TLSProxy/Proxy.pm||util/TLSProxy/Proxy.pm": [
          "File: util/TLSProxy/Proxy.pm -> util/TLSProxy/Proxy.pm",
          "--- Hunk 1 ---",
          "[Context before]",
          "240:     print \"Connection opened\\n\";",
          "242:     # Now connect to the server",
          "244:     my $server_sock;",
          "245:     #We loop over this a few times because sometimes s_server can take a while",
          "246:     #to start up",
          "",
          "[Removed Lines]",
          "243:     my $retry = 3;",
          "",
          "[Added Lines]",
          "243:     my $retry = 10;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4ed22d63a7b150b2066f4fa676950786519c602b",
      "candidate_info": {
        "commit_hash": "4ed22d63a7b150b2066f4fa676950786519c602b",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/4ed22d63a7b150b2066f4fa676950786519c602b",
        "files": [
          "crypto/x509v3/v3_genn.c"
        ],
        "message": "Fix memory leak in GENERAL_NAME_set0_othername.\n\nCLA: trivial\n\nReviewed-by: Tim Hudson <tjh@openssl.org>\nReviewed-by: Richard Levitte <levitte@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/4544)\n\n(cherry picked from commit 04761b557a53f026630dd5916b2b8522d94579db)",
        "before_after_code_files": [
          "crypto/x509v3/v3_genn.c||crypto/x509v3/v3_genn.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/x509v3/v3_genn.c||crypto/x509v3/v3_genn.c": [
          "File: crypto/x509v3/v3_genn.c -> crypto/x509v3/v3_genn.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "181:     oth = OTHERNAME_new();",
          "182:     if (oth == NULL)",
          "183:         return 0;",
          "184:     oth->type_id = oid;",
          "185:     oth->value = value;",
          "186:     GENERAL_NAME_set0_value(gen, GEN_OTHERNAME, oth);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "184:     ASN1_TYPE_free(oth->value);",
          "",
          "---------------"
        ]
      }
    }
  ]
}